Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Nat_beq x n = true)
 -- (lst_mem x y = true -> lst_mem x (lst_union y z) = true)
 -- (lst_mem n z = true)

----------------------------------
Goal: (lst_mem x (lst_union y z) = true)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv0 : bool = (lst_mem x (lst_union y z))
gv2 : bool = true
gv1 : Lst = (lst_union y z)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 39.716 seconds

Label: Generalization #0
Assumptions: 
 -- (Nat_beq x n = true)
 -- (lst_union y z = gv1)
 -- (lst_mem n z = true)

----------------------------------
Goal: (lst_mem x gv1 = true)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (Nat_beq x n = gv2)
 -- (true = gv2)
 -- (lst_mem n z = gv2)

----------------------------------
Goal: (lst_mem x (lst_union y z) = gv2)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (Nat_beq x n = true)
 -- (lst_mem x (lst_union y z) = gv0)
 -- (lst_mem n z = true)

----------------------------------
Goal: (gv0 = true)
Case: 3

Label: Generalization #3
Assumptions: 
 -- (Nat_beq x n = true)
 -- (lst_mem n z = true)

----------------------------------
Goal: (lst_mem x (lst_union y z) = true)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 40.611 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
mem : (Nat -> Lst -> bool)
lst_mem : (Nat -> Lst -> bool)
lst_union : (Lst -> Lst -> Lst)

Label: 0 (0)
Abducted Assumption: (Nat_beq x n = true)
Positive Examples:
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero (cons zero (cons zero nil))); z := (cons zero nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := zero; y := nil; z := (cons zero (cons zero nil))]
   [gv1 := (cons zero nil); n := zero; x := zero; y := nil; z := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero nil); z := (cons zero nil)]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) nil)]
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons zero nil)]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ zero); y := (cons (succ zero) nil); z := (cons (succ zero) nil)]
   [gv1 := (cons zero (cons zero (cons (succ (succ zero)) nil))); n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons (succ (succ zero)) nil)))]

Negative Examples:
   [gv1 := (cons (succ (succ (succ zero))) nil); n := (succ (succ (succ zero))); x := zero; y := nil; z := (cons (succ (succ (succ zero))) nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ zero)); y := (cons zero nil); z := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ zero); y := (cons zero nil); z := (cons zero nil)]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := zero; y := nil; z := (cons (succ (succ zero)) nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ zero)); y := nil; z := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ (succ zero))); y := (cons zero nil); z := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ (succ zero))); y := nil; z := (cons zero nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := (succ (succ zero)); y := nil; z := (cons zero (cons zero nil))]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := zero; y := nil; z := (cons (succ zero) nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ zero); y := (cons zero (cons zero nil)); z := (cons zero nil)]
   etc ...


Label: 0 (1)
Abducted Assumption: (lst_union y z = gv1)
Positive Examples:
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero (cons zero (cons zero nil))); z := (cons zero nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := zero; y := nil; z := (cons zero (cons zero nil))]
   [gv1 := (cons zero nil); n := zero; x := zero; y := nil; z := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero nil); z := (cons zero nil)]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) nil)]
   [gv1 := (cons zero nil); n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons zero nil)]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ zero); y := (cons (succ zero) nil); z := (cons (succ zero) nil)]
   [gv1 := (cons zero (cons zero (cons (succ (succ zero)) nil))); n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons (succ (succ zero)) nil)))]

Negative Examples:
   [gv1 := (cons zero nil); n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons (succ (succ zero)) nil))]
   [gv1 := (cons (succ (succ (succ (succ (succ zero))))) nil); n := zero; x := zero; y := (cons zero nil); z := (cons zero nil)]
   [gv1 := nil; n := zero; x := zero; y := (cons zero (cons zero (cons (succ zero) (cons zero nil)))); z := (cons zero (cons (succ (succ (succ zero))) nil))]
   [gv1 := (cons zero nil); n := (succ zero); x := (succ zero); y := (cons zero (cons (succ (succ zero)) nil)); z := (cons (succ zero) nil)]
   [gv1 := nil; n := zero; x := zero; y := (cons (succ zero) (cons (succ zero) (cons zero nil))); z := (cons zero nil)]
   [gv1 := nil; n := zero; x := zero; y := nil; z := (cons (succ (succ zero))
   (cons (succ zero) (cons (succ zero) (cons zero (cons (succ zero) nil)))))]
   [gv1 := (cons (succ (succ (succ zero))) nil); n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons zero nil)))]
   [gv1 := nil; n := (succ zero); x := (succ zero); y := (cons (succ zero) (cons zero nil)); z := (cons zero (cons (succ zero) nil))]
   [gv1 := nil; n := zero; x := zero; y := (cons (succ zero) (cons zero (cons (succ zero) nil))); z := (cons zero nil)]
   [gv1 := (cons zero (cons zero nil)); n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero (cons (succ (succ (succ (succ zero)))) nil)))]
   etc ...


Label: 1 (2)
Abducted Assumption: (Nat_beq x n = gv2)
Positive Examples:
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ zero) nil)); z := (cons (succ zero)
   (cons zero
      (cons (succ (succ (succ zero))) (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero (cons zero (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) nil); z := (cons (succ (succ (succ zero)))
   (cons (succ (succ (succ zero))) (cons (succ zero) nil)))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ zero))) (cons zero nil))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons zero nil); z := (cons (succ zero) (cons (succ (succ (succ zero))) nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ (succ zero)) (cons zero (cons (succ (succ (succ zero))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) (cons zero nil))); z := (cons zero (cons (succ (succ (succ zero))) (cons zero nil)))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ (succ (succ (succ zero)))))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) nil)); z := (cons (succ (succ zero))
   (cons zero (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))))]
   etc ...

Negative Examples:
   [gv2 := true; n := (succ (succ zero)); x := (succ zero); y := (cons zero nil); z := (cons zero (cons zero (cons (succ (succ zero)) nil)))]
   [gv2 := true; n := zero; x := (succ (succ zero)); y := nil; z := (cons zero (cons (succ zero) (cons zero nil)))]
   [gv2 := true; n := zero; x := (succ (succ (succ (succ zero)))); y := nil; z := (cons zero nil)]
   [gv2 := true; n := zero; x := (succ (succ zero)); y := (cons zero (cons (succ (succ (succ zero))) nil)); z := (cons zero nil)]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ (succ zero))); y := (cons zero (cons (succ (succ zero)) nil)); z := (cons (succ zero) (cons (succ (succ zero)) (cons zero nil)))]
   [gv2 := true; n := (succ zero); x := (succ (succ zero)); y := nil; z := (cons (succ (succ (succ (succ (succ zero)))))
   (cons (succ zero) (cons zero nil)))]
   [gv2 := true; n := zero; x := (succ (succ (succ (succ (succ (succ zero)))))); y := nil; z := (cons zero (cons zero (cons (succ zero) nil)))]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ (succ zero))); y := (cons (succ zero) nil); z := (cons (succ (succ zero)) nil)]
   [gv2 := true; n := zero; x := (succ (succ zero)); y := (cons zero (cons zero nil)); z := (cons zero (cons zero nil))]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ (succ (succ zero)))); y := nil; z := (cons zero (cons (succ (succ zero)) (cons (succ zero) (cons zero nil))))]
   etc ...


Label: 1 (3)
Abducted Assumption: (true = gv2)
Positive Examples:
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ zero) nil)); z := (cons (succ zero)
   (cons zero
      (cons (succ (succ (succ zero))) (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero (cons zero (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) nil); z := (cons (succ (succ (succ zero)))
   (cons (succ (succ (succ zero))) (cons (succ zero) nil)))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ zero))) (cons zero nil))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons zero nil); z := (cons (succ zero) (cons (succ (succ (succ zero))) nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ (succ zero)) (cons zero (cons (succ (succ (succ zero))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) (cons zero nil))); z := (cons zero (cons (succ (succ (succ zero))) (cons zero nil)))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ (succ (succ (succ zero)))))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) nil)); z := (cons (succ (succ zero))
   (cons zero (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))))]
   etc ...

Negative Examples:
   [gv2 := false; n := (succ zero); x := zero; y := nil; z := (cons (succ (succ zero))
   (cons zero
      (cons (succ (succ (succ (succ zero)))) (cons zero (cons zero nil)))))]
   [gv2 := false; n := (succ (succ (succ (succ (succ zero))))); x := (succ zero); y := (cons (succ (succ (succ (succ zero))))
   (cons (succ zero)
      (cons (succ zero) (cons (succ zero) (cons (succ zero) nil))))); z := (cons zero (cons zero (cons (succ (succ (succ zero))) (cons zero nil))))]
   [gv2 := false; n := (succ zero); x := zero; y := (cons zero nil); z := (cons (succ (succ (succ zero))) nil)]
   [gv2 := false; n := (succ zero); x := (succ (succ zero)); y := (cons (succ (succ zero)) (cons (succ zero) nil)); z := nil]
   [gv2 := false; n := (succ zero); x := zero; y := (cons (succ (succ (succ zero))) (cons zero nil)); z := nil]
   [gv2 := false; n := (succ zero); x := zero; y := (cons zero (cons (succ (succ (succ zero))) (cons zero (cons zero nil)))); z := nil]
   [gv2 := false; n := zero; x := (succ (succ zero)); y := (cons (succ (succ zero)) (cons zero (cons (succ (succ zero)) nil))); z := nil]
   [gv2 := false; n := zero; x := (succ (succ zero)); y := (cons (succ (succ zero)) (cons (succ zero) nil)); z := nil]
   [gv2 := false; n := (succ (succ zero)); x := zero; y := (cons (succ (succ (succ (succ (succ (succ zero)))))) (cons zero nil)); z := nil]
   [gv2 := false; n := (succ (succ zero)); x := zero; y := (cons (succ zero) (cons (succ zero) (cons zero nil))); z := (cons (succ zero)
   (cons (succ zero) (cons (succ (succ (succ (succ zero)))) nil)))]
   etc ...


Label: 1 (4)
Abducted Assumption: (lst_mem n z = gv2)
Positive Examples:
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ zero) nil)); z := (cons (succ zero)
   (cons zero
      (cons (succ (succ (succ zero))) (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero (cons zero (cons zero (cons (succ zero) nil)))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) nil); z := (cons (succ (succ (succ zero)))
   (cons (succ (succ (succ zero))) (cons (succ zero) nil)))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons (succ zero) (cons zero nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ zero))) (cons zero nil))))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons zero nil); z := (cons (succ zero) (cons (succ (succ (succ zero))) nil))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ (succ zero)) (cons zero (cons (succ (succ (succ zero))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) (cons zero nil))); z := (cons zero (cons (succ (succ (succ zero))) (cons zero nil)))]
   [gv2 := true; n := zero; x := zero; y := nil; z := (cons (succ zero)
   (cons zero (cons (succ (succ (succ (succ (succ (succ zero)))))) nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons zero (cons (succ (succ zero)) nil)); z := (cons (succ (succ zero))
   (cons zero (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))))]
   etc ...

Negative Examples:
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ zero)
   (cons (succ zero)
      (cons zero
         (cons (succ (succ (succ (succ (succ zero)))))
            (cons (succ (succ (succ (succ zero)))) (cons zero nil)))))); z := (cons zero nil)]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero (cons (succ zero) (cons zero nil))); z := nil]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero (cons (succ zero) nil)); z := (cons zero (cons zero nil))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) nil); z := (cons zero (cons (succ (succ (succ (succ zero)))) nil))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons zero (cons (succ (succ (succ zero))) nil)); z := nil]
   [gv2 := true; n := (succ (succ zero)); x := (succ (succ zero)); y := nil; z := (cons (succ zero) (cons zero (cons zero nil)))]
   [gv2 := true; n := zero; x := zero; y := (cons (succ zero) nil); z := (cons (succ (succ zero)) (cons (succ (succ zero)) nil))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons zero (cons (succ (succ zero)) nil))]
   [gv2 := true; n := (succ (succ (succ zero))); x := (succ (succ (succ zero))); y := (cons zero nil); z := (cons (succ zero) (cons (succ zero) nil))]
   [gv2 := true; n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ zero))) (cons zero (cons zero nil))); z := nil]
   etc ...


Label: 2 (5)
Abducted Assumption: (lst_mem x (lst_union y z) = gv0)
Positive Examples:
   [gv0 := true; n := (succ zero); x := (succ zero); y := nil; z := (cons zero (cons (succ zero) (cons (succ zero) (cons zero (cons zero nil)))))]
   [gv0 := true; n := zero; x := zero; y := nil; z := (cons zero
   (cons (succ zero) (cons (succ (succ (succ zero))) (cons zero nil))))]
   [gv0 := true; n := zero; x := zero; y := (cons zero (cons zero (cons zero nil))); z := (cons zero nil)]
   [gv0 := true; n := zero; x := zero; y := (cons zero nil); z := (cons (succ zero) (cons zero (cons (succ zero) nil)))]
   [gv0 := true; n := zero; x := zero; y := (cons (succ zero) nil); z := (cons (succ zero)
   (cons zero
      (cons (succ (succ (succ (succ zero))))
         (cons zero (cons (succ (succ (succ zero))) nil)))))]
   [gv0 := true; n := zero; x := zero; y := nil; z := (cons zero
   (cons (succ (succ (succ zero))) (cons (succ (succ (succ zero))) nil)))]
   [gv0 := true; n := zero; x := zero; y := (cons (succ (succ zero))
   (cons zero (cons (succ (succ (succ (succ zero)))) (cons zero nil)))); z := (cons zero (cons (succ (succ zero)) nil))]
   [gv0 := true; n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero nil); z := (cons (succ (succ zero)) nil)]
   [gv0 := true; n := zero; x := zero; y := (cons (succ zero) (cons zero (cons zero (cons zero nil)))); z := (cons zero (cons zero nil))]
   [gv0 := true; n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons (succ zero) nil)))]
   etc ...

Negative Examples:
   [gv0 := false; n := zero; x := zero; y := nil; z := (cons zero
   (cons zero (cons (succ (succ zero)) (cons (succ zero) (cons zero nil)))))]
   [gv0 := false; n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons (succ (succ (succ (succ zero)))) (cons zero nil))]
   [gv0 := false; n := zero; x := zero; y := (cons zero
   (cons (succ zero) (cons (succ zero) (cons (succ (succ zero)) nil)))); z := (cons zero nil)]
   [gv0 := false; n := (succ zero); x := (succ zero); y := (cons zero (cons (succ (succ zero)) (cons (succ zero) nil))); z := (cons (succ zero)
   (cons (succ zero) (cons zero (cons zero (cons (succ (succ zero)) nil)))))]
   [gv0 := false; n := zero; x := zero; y := (cons zero
   (cons zero
      (cons (succ zero)
         (cons (succ zero) (cons zero (cons (succ (succ (succ zero))) nil)))))); z := (cons (succ (succ (succ zero))) (cons (succ (succ zero)) (cons zero nil)))]
   [gv0 := false; n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons (succ zero)
   (cons (succ (succ zero))
      (cons zero (cons (succ (succ (succ (succ zero)))) nil))))]
   [gv0 := false; n := zero; x := zero; y := (cons zero nil); z := (cons zero (cons (succ (succ zero)) nil))]
   [gv0 := false; n := zero; x := zero; y := (cons (succ zero)
   (cons (succ zero)
      (cons (succ (succ (succ zero))) (cons (succ (succ zero)) nil)))); z := (cons zero (cons zero (cons (succ (succ zero)) nil)))]
   [gv0 := false; n := zero; x := zero; y := (cons (succ zero) nil); z := (cons zero (cons zero (cons (succ zero) (cons (succ zero) nil))))]
   [gv0 := false; n := zero; x := zero; y := nil; z := (cons zero (cons (succ zero) (cons (succ zero) nil)))]
   etc ...


Label: 3 (6)
Abducted Assumption: (Nat_beq x n = true)
Positive Examples:
   [n := zero; x := zero; y := (cons (succ zero) nil); z := (cons (succ zero) (cons zero (cons zero (cons zero nil))))]
   [n := zero; x := zero; y := (cons (succ (succ zero)) nil); z := (cons (succ zero) (cons zero nil))]
   [n := zero; x := zero; y := (cons zero (cons (succ zero) (cons (succ zero) nil))); z := (cons (succ zero) (cons (succ zero) (cons zero (cons zero (cons zero nil)))))]
   [n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons (succ zero) (cons zero nil))]
   [n := zero; x := zero; y := (cons (succ zero) (cons zero nil)); z := (cons zero (cons zero nil))]
   [n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons zero (cons (succ zero) (cons (succ zero) nil)))))]
   [n := zero; x := zero; y := nil; z := (cons (succ (succ zero)) (cons (succ (succ zero)) (cons zero nil)))]
   [n := (succ zero); x := (succ zero); y := (cons (succ zero) nil); z := (cons (succ zero) (cons zero (cons zero nil)))]
   [n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ (succ zero)) nil); z := (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))]
   [n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons zero
   (cons zero
      (cons (succ zero)
         (cons (succ zero)
            (cons (succ (succ (succ zero))) (cons (succ zero) nil))))))]
   etc ...

Negative Examples:
   [n := zero; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (cons (succ (succ (succ zero))) (cons (succ zero) nil)); z := (cons zero nil)]
   [n := zero; x := (succ (succ zero)); y := (cons (succ zero) (cons (succ zero) nil)); z := (cons zero nil)]
   [n := zero; x := (succ (succ (succ (succ (succ zero))))); y := (cons (succ (succ zero)) (cons zero (cons zero nil))); z := (cons (succ zero) (cons zero (cons zero nil)))]
   [n := (succ (succ zero)); x := (succ (succ (succ (succ zero)))); y := (cons zero nil); z := (cons (succ (succ zero)) nil)]
   [n := zero; x := (succ (succ zero)); y := nil; z := (cons (succ (succ (succ (succ (succ zero))))) (cons zero nil))]
   [n := (succ zero); x := (succ (succ zero)); y := nil; z := (cons (succ zero) (cons zero (cons (succ (succ (succ (succ zero)))) nil)))]
   [n := zero; x := (succ (succ (succ zero))); y := nil; z := (cons zero (cons (succ zero) (cons zero (cons (succ zero) nil))))]
   [n := zero; x := (succ (succ (succ (succ (succ zero))))); y := nil; z := (cons zero
   (cons (succ (succ (succ (succ (succ (succ zero))))))
      (cons zero (cons (succ zero) (cons (succ (succ zero)) (cons zero nil))))))]
   [n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ zero)) (cons (succ (succ zero)) nil)); z := (cons (succ (succ zero)) nil)]
   [n := zero; x := (succ (succ zero)); y := nil; z := (cons (succ zero) (cons zero nil))]
   etc ...


Label: 3 (7)
Abducted Assumption: (lst_mem n z = true)
Positive Examples:
   [n := zero; x := zero; y := (cons (succ zero) nil); z := (cons (succ zero) (cons zero (cons zero (cons zero nil))))]
   [n := zero; x := zero; y := (cons (succ (succ zero)) nil); z := (cons (succ zero) (cons zero nil))]
   [n := zero; x := zero; y := (cons zero (cons (succ zero) (cons (succ zero) nil))); z := (cons (succ zero) (cons (succ zero) (cons zero (cons zero (cons zero nil)))))]
   [n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons (succ zero) (cons zero nil))]
   [n := zero; x := zero; y := (cons (succ zero) (cons zero nil)); z := (cons zero (cons zero nil))]
   [n := zero; x := zero; y := nil; z := (cons zero (cons zero (cons zero (cons (succ zero) (cons (succ zero) nil)))))]
   [n := zero; x := zero; y := nil; z := (cons (succ (succ zero)) (cons (succ (succ zero)) (cons zero nil)))]
   [n := (succ zero); x := (succ zero); y := (cons (succ zero) nil); z := (cons (succ zero) (cons zero (cons zero nil)))]
   [n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ (succ zero)) nil); z := (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))]
   [n := zero; x := zero; y := (cons zero (cons zero nil)); z := (cons zero
   (cons zero
      (cons (succ zero)
         (cons (succ zero)
            (cons (succ (succ (succ zero))) (cons (succ zero) nil))))))]
   etc ...

Negative Examples:
   [n := zero; x := zero; y := (cons (succ (succ (succ (succ (succ (succ zero)))))) nil); z := nil]
   [n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) (cons zero nil)); z := nil]
   [n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero (cons (succ (succ (succ zero))) nil)); z := nil]
   [n := (succ (succ (succ (succ zero)))); x := (succ (succ (succ (succ zero)))); y := (cons (succ zero) (cons zero (cons zero nil))); z := nil]
   [n := (succ zero); x := (succ zero); y := (cons zero (cons (succ (succ (succ zero))) (cons (succ (succ zero)) nil))); z := (cons (succ (succ (succ zero))) nil)]
   [n := (succ (succ (succ zero))); x := (succ (succ (succ zero))); y := nil; z := (cons (succ zero) (cons zero nil))]
   [n := (succ (succ (succ (succ (succ zero))))); x := (succ (succ (succ (succ (succ zero))))); y := (cons zero nil); z := nil]
   [n := zero; x := zero; y := nil; z := (cons (succ zero) (cons (succ (succ (succ (succ zero)))) nil))]
   [n := zero; x := zero; y := (cons (succ (succ (succ (succ zero)))) nil); z := (cons (succ (succ zero)) nil)]
   [n := zero; x := zero; y := (cons (succ (succ (succ (succ zero)))) nil); z := (cons (succ (succ (succ zero))) nil)]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 42.436 seconds


Label: 0 (0)
(y = y), (y = z), (y = gv1), (z = y), (z = z), (z = gv1), (gv1 = y), (gv1 = z), (gv1 = gv1), (n = n)
(n = x), (x = n), (x = x), (false = lst_mem n y), (false = lst_mem n z), (false = lst_mem n gv1), (false = lst_mem x y), (false = lst_mem x z), (false = lst_mem x gv1), (false = mem n y)
(false = mem n z), (false = mem n gv1), (false = mem x y), (false = mem x z), (false = mem x gv1), (true = lst_mem n y), (true = lst_mem n z), (true = lst_mem n gv1), (true = lst_mem x y), (true = lst_mem x z)
(true = lst_mem x gv1), (true = mem n y), (true = mem n z), (true = mem n gv1), (true = mem x y), (true = mem x z), (true = mem x gv1), (y <> y), (y <> z), (y <> gv1)
(z <> y), (z <> z), (z <> gv1), (gv1 <> y), (gv1 <> z), (gv1 <> gv1), (n <> n), (n <> x), (x <> n), (x <> x)
(None = Some y), (None = Some z), (None = Some gv1), (mem n y = lst_mem n y), (mem n y = lst_mem n z), (mem n y = lst_mem n gv1), (mem n y = lst_mem x y), (mem n y = lst_mem x z), (mem n y = lst_mem x gv1), (mem n z = lst_mem n y)
(mem n z = lst_mem n z), (mem n z = lst_mem n gv1), (mem n z = lst_mem x y), (mem n z = lst_mem x z), (mem n z = lst_mem x gv1), (mem n gv1 = lst_mem n y), (mem n gv1 = lst_mem n z), (mem n gv1 = lst_mem n gv1), (mem n gv1 = lst_mem x y), (mem n gv1 = lst_mem x z)
(mem n gv1 = lst_mem x gv1), (mem x y = lst_mem n y), (mem x y = lst_mem n z), (mem x y = lst_mem n gv1), (mem x y = lst_mem x y), (mem x y = lst_mem x z), (mem x y = lst_mem x gv1), (mem x z = lst_mem n y), (mem x z = lst_mem n z), (mem x z = lst_mem n gv1)
(mem x z = lst_mem x y), (mem x z = lst_mem x z), (mem x z = lst_mem x gv1), (mem x gv1 = lst_mem n y), (mem x gv1 = lst_mem n z), (mem x gv1 = lst_mem n gv1), (mem x gv1 = lst_mem x y), (mem x gv1 = lst_mem x z), (mem x gv1 = lst_mem x gv1), (None = Some n)
(None = Some x), (lst_union y y = y), (lst_union y y = z), (lst_union y y = gv1), (lst_union y z = y), (lst_union y z = z), (lst_union y z = gv1), (lst_union y gv1 = y), (lst_union y gv1 = z), (lst_union y gv1 = gv1)
(lst_union z y = y), (lst_union z y = z), (lst_union z y = gv1), (lst_union z z = y), (lst_union z z = z), (lst_union z z = gv1), (lst_union z gv1 = y), (lst_union z gv1 = z), (lst_union z gv1 = gv1), (lst_union gv1 y = y)
(lst_union gv1 y = z), (lst_union gv1 y = gv1), (lst_union gv1 z = y), (lst_union gv1 z = z), (lst_union gv1 z = gv1), (lst_union gv1 gv1 = y), (lst_union gv1 gv1 = z), (lst_union gv1 gv1 = gv1)

Label: 0 (1)
(y = y), (y = z), (y = gv1), (z = y), (z = z), (z = gv1), (gv1 = y), (gv1 = z), (gv1 = gv1), (n = n)
(n = x), (x = n), (x = x), (false = lst_mem n y), (false = lst_mem n z), (false = lst_mem n gv1), (false = lst_mem x y), (false = lst_mem x z), (false = lst_mem x gv1), (false = mem n y)
(false = mem n z), (false = mem n gv1), (false = mem x y), (false = mem x z), (false = mem x gv1), (true = lst_mem n y), (true = lst_mem n z), (true = lst_mem n gv1), (true = lst_mem x y), (true = lst_mem x z)
(true = lst_mem x gv1), (true = mem n y), (true = mem n z), (true = mem n gv1), (true = mem x y), (true = mem x z), (true = mem x gv1), (y <> y), (y <> z), (y <> gv1)
(z <> y), (z <> z), (z <> gv1), (gv1 <> y), (gv1 <> z), (gv1 <> gv1), (n <> n), (n <> x), (x <> n), (x <> x)
(None = Some y), (None = Some z), (None = Some gv1), (mem n y = lst_mem n y), (mem n y = lst_mem n z), (mem n y = lst_mem n gv1), (mem n y = lst_mem x y), (mem n y = lst_mem x z), (mem n y = lst_mem x gv1), (mem n z = lst_mem n y)
(mem n z = lst_mem n z), (mem n z = lst_mem n gv1), (mem n z = lst_mem x y), (mem n z = lst_mem x z), (mem n z = lst_mem x gv1), (mem n gv1 = lst_mem n y), (mem n gv1 = lst_mem n z), (mem n gv1 = lst_mem n gv1), (mem n gv1 = lst_mem x y), (mem n gv1 = lst_mem x z)
(mem n gv1 = lst_mem x gv1), (mem x y = lst_mem n y), (mem x y = lst_mem n z), (mem x y = lst_mem n gv1), (mem x y = lst_mem x y), (mem x y = lst_mem x z), (mem x y = lst_mem x gv1), (mem x z = lst_mem n y), (mem x z = lst_mem n z), (mem x z = lst_mem n gv1)
(mem x z = lst_mem x y), (mem x z = lst_mem x z), (mem x z = lst_mem x gv1), (mem x gv1 = lst_mem n y), (mem x gv1 = lst_mem n z), (mem x gv1 = lst_mem n gv1), (mem x gv1 = lst_mem x y), (mem x gv1 = lst_mem x z), (mem x gv1 = lst_mem x gv1), (None = Some n)
(None = Some x), (lst_union y y = y), (lst_union y y = z), (lst_union y y = gv1), (lst_union y z = y), (lst_union y z = z), (lst_union y z = gv1), (lst_union y gv1 = y), (lst_union y gv1 = z), (lst_union y gv1 = gv1)
(lst_union z y = y), (lst_union z y = z), (lst_union z y = gv1), (lst_union z z = y), (lst_union z z = z), (lst_union z z = gv1), (lst_union z gv1 = y), (lst_union z gv1 = z), (lst_union z gv1 = gv1), (lst_union gv1 y = y)
(lst_union gv1 y = z), (lst_union gv1 y = gv1), (lst_union gv1 z = y), (lst_union gv1 z = z), (lst_union gv1 z = gv1), (lst_union gv1 gv1 = y), (lst_union gv1 gv1 = z), (lst_union gv1 gv1 = gv1)

Label: 1 (2)
(false = gv2), (true = gv2), (gv2 = gv2), (z = z), (z = y), (y = z), (y = y), (n = n), (n = x), (x = n)
(x = x), (false = lst_mem n z), (false = lst_mem n y), (false = lst_mem x z), (false = lst_mem x y), (false = mem n z), (false = mem n y), (false = mem x z), (false = mem x y), (true = lst_mem n z)
(true = lst_mem n y), (true = lst_mem x z), (true = lst_mem x y), (true = mem n z), (true = mem n y), (true = mem x z), (true = mem x y), (false <> gv2), (true <> gv2), (gv2 <> gv2)
(z <> z), (z <> y), (y <> z), (y <> y), (n <> n), (n <> x), (x <> n), (x <> x), (None = Some gv2), (None = Some z)
(None = Some y), (lst_mem n z = gv2), (lst_mem n y = gv2), (lst_mem x z = gv2), (lst_mem x y = gv2), (mem n z = gv2), (mem n z = lst_mem n z), (mem n z = lst_mem n y), (mem n z = lst_mem x z), (mem n z = lst_mem x y)
(mem n y = gv2), (mem n y = lst_mem n z), (mem n y = lst_mem n y), (mem n y = lst_mem x z), (mem n y = lst_mem x y), (mem x z = gv2), (mem x z = lst_mem n z), (mem x z = lst_mem n y), (mem x z = lst_mem x z), (mem x z = lst_mem x y)
(mem x y = gv2), (mem x y = lst_mem n z), (mem x y = lst_mem n y), (mem x y = lst_mem x z), (mem x y = lst_mem x y), (None = Some n), (None = Some x), (lst_union z z = z), (lst_union z z = y), (lst_union z y = z)
(lst_union z y = y), (lst_union y z = z), (lst_union y z = y), (lst_union y y = z), (lst_union y y = y)

Label: 1 (3)
(false = gv2), (true = gv2), (gv2 = gv2), (z = z), (z = y), (y = z), (y = y), (n = n), (n = x), (x = n)
(x = x), (false = lst_mem n z), (false = lst_mem n y), (false = lst_mem x z), (false = lst_mem x y), (false = mem n z), (false = mem n y), (false = mem x z), (false = mem x y), (true = lst_mem n z)
(true = lst_mem n y), (true = lst_mem x z), (true = lst_mem x y), (true = mem n z), (true = mem n y), (true = mem x z), (true = mem x y), (false <> gv2), (true <> gv2), (gv2 <> gv2)
(z <> z), (z <> y), (y <> z), (y <> y), (n <> n), (n <> x), (x <> n), (x <> x), (None = Some gv2), (None = Some z)
(None = Some y), (lst_mem n z = gv2), (lst_mem n y = gv2), (lst_mem x z = gv2), (lst_mem x y = gv2), (mem n z = gv2), (mem n z = lst_mem n z), (mem n z = lst_mem n y), (mem n z = lst_mem x z), (mem n z = lst_mem x y)
(mem n y = gv2), (mem n y = lst_mem n z), (mem n y = lst_mem n y), (mem n y = lst_mem x z), (mem n y = lst_mem x y), (mem x z = gv2), (mem x z = lst_mem n z), (mem x z = lst_mem n y), (mem x z = lst_mem x z), (mem x z = lst_mem x y)
(mem x y = gv2), (mem x y = lst_mem n z), (mem x y = lst_mem n y), (mem x y = lst_mem x z), (mem x y = lst_mem x y), (None = Some n), (None = Some x), (lst_union z z = z), (lst_union z z = y), (lst_union z y = z)
(lst_union z y = y), (lst_union y z = z), (lst_union y z = y), (lst_union y y = z), (lst_union y y = y)

Label: 1 (4)
(false = gv2), (true = gv2), (gv2 = gv2), (z = z), (z = y), (y = z), (y = y), (n = n), (n = x), (x = n)
(x = x), (false = lst_mem n z), (false = lst_mem n y), (false = lst_mem x z), (false = lst_mem x y), (false = mem n z), (false = mem n y), (false = mem x z), (false = mem x y), (true = lst_mem n z)
(true = lst_mem n y), (true = lst_mem x z), (true = lst_mem x y), (true = mem n z), (true = mem n y), (true = mem x z), (true = mem x y), (false <> gv2), (true <> gv2), (gv2 <> gv2)
(z <> z), (z <> y), (y <> z), (y <> y), (n <> n), (n <> x), (x <> n), (x <> x), (None = Some gv2), (None = Some z)
(None = Some y), (lst_mem n z = gv2), (lst_mem n y = gv2), (lst_mem x z = gv2), (lst_mem x y = gv2), (mem n z = gv2), (mem n z = lst_mem n z), (mem n z = lst_mem n y), (mem n z = lst_mem x z), (mem n z = lst_mem x y)
(mem n y = gv2), (mem n y = lst_mem n z), (mem n y = lst_mem n y), (mem n y = lst_mem x z), (mem n y = lst_mem x y), (mem x z = gv2), (mem x z = lst_mem n z), (mem x z = lst_mem n y), (mem x z = lst_mem x z), (mem x z = lst_mem x y)
(mem x y = gv2), (mem x y = lst_mem n z), (mem x y = lst_mem n y), (mem x y = lst_mem x z), (mem x y = lst_mem x y), (None = Some n), (None = Some x), (lst_union z z = z), (lst_union z z = y), (lst_union z y = z)
(lst_union z y = y), (lst_union y z = z), (lst_union y z = y), (lst_union y y = z), (lst_union y y = y)

Label: 2 (5)
(false = gv0), (true = gv0), (y = y), (y = z), (z = y), (z = z), (x = x), (x = n), (n = x), (n = n)
(gv0 = gv0), (false = lst_mem x y), (false = lst_mem x z), (false = lst_mem n y), (false = lst_mem n z), (false = mem x y), (false = mem x z), (false = mem n y), (false = mem n z), (true = lst_mem x y)
(true = lst_mem x z), (true = lst_mem n y), (true = lst_mem n z), (true = mem x y), (true = mem x z), (true = mem n y), (true = mem n z), (false <> gv0), (true <> gv0), (y <> y)
(y <> z), (z <> y), (z <> z), (x <> x), (x <> n), (n <> x), (n <> n), (gv0 <> gv0), (None = Some gv0), (None = Some y)
(None = Some z), (lst_mem x y = gv0), (lst_mem x z = gv0), (lst_mem n y = gv0), (lst_mem n z = gv0), (mem x y = gv0), (mem x y = lst_mem x y), (mem x y = lst_mem x z), (mem x y = lst_mem n y), (mem x y = lst_mem n z)
(mem x z = gv0), (mem x z = lst_mem x y), (mem x z = lst_mem x z), (mem x z = lst_mem n y), (mem x z = lst_mem n z), (mem n y = gv0), (mem n y = lst_mem x y), (mem n y = lst_mem x z), (mem n y = lst_mem n y), (mem n y = lst_mem n z)
(mem n z = gv0), (mem n z = lst_mem x y), (mem n z = lst_mem x z), (mem n z = lst_mem n y), (mem n z = lst_mem n z), (None = Some x), (None = Some n), (lst_union y y = y), (lst_union y y = z), (lst_union y z = y)
(lst_union y z = z), (lst_union z y = y), (lst_union z y = z), (lst_union z z = y), (lst_union z z = z)

Label: 3 (6)
(z = z), (z = y), (y = z), (y = y), (n = n), (n = x), (x = n), (x = x), (false = lst_mem n z), (false = lst_mem n y)
(false = lst_mem x z), (false = lst_mem x y), (false = mem n z), (false = mem n y), (false = mem x z), (false = mem x y), (true = lst_mem n z), (true = lst_mem n y), (true = lst_mem x z), (true = lst_mem x y)
(true = mem n z), (true = mem n y), (true = mem x z), (true = mem x y), (z <> z), (z <> y), (y <> z), (y <> y), (n <> n), (n <> x)
(x <> n), (x <> x), (None = Some z), (None = Some y), (mem n z = lst_mem n z), (mem n z = lst_mem n y), (mem n z = lst_mem x z), (mem n z = lst_mem x y), (mem n y = lst_mem n z), (mem n y = lst_mem n y)
(mem n y = lst_mem x z), (mem n y = lst_mem x y), (mem x z = lst_mem n z), (mem x z = lst_mem n y), (mem x z = lst_mem x z), (mem x z = lst_mem x y), (mem x y = lst_mem n z), (mem x y = lst_mem n y), (mem x y = lst_mem x z), (mem x y = lst_mem x y)
(None = Some n), (None = Some x), (lst_union z z = z), (lst_union z z = y), (lst_union z y = z), (lst_union z y = y), (lst_union y z = z), (lst_union y z = y), (lst_union y y = z), (lst_union y y = y)

Label: 3 (7)
(z = z), (z = y), (y = z), (y = y), (n = n), (n = x), (x = n), (x = x), (false = lst_mem n z), (false = lst_mem n y)
(false = lst_mem x z), (false = lst_mem x y), (false = mem n z), (false = mem n y), (false = mem x z), (false = mem x y), (true = lst_mem n z), (true = lst_mem n y), (true = lst_mem x z), (true = lst_mem x y)
(true = mem n z), (true = mem n y), (true = mem x z), (true = mem x y), (z <> z), (z <> y), (y <> z), (y <> y), (n <> n), (n <> x)
(x <> n), (x <> x), (None = Some z), (None = Some y), (mem n z = lst_mem n z), (mem n z = lst_mem n y), (mem n z = lst_mem x z), (mem n z = lst_mem x y), (mem n y = lst_mem n z), (mem n y = lst_mem n y)
(mem n y = lst_mem x z), (mem n y = lst_mem x y), (mem x z = lst_mem n z), (mem x z = lst_mem n y), (mem x z = lst_mem x z), (mem x z = lst_mem x y), (mem x y = lst_mem n z), (mem x y = lst_mem n y), (mem x y = lst_mem x z), (mem x y = lst_mem x y)
(None = Some n), (None = Some x), (lst_union z z = z), (lst_union z z = y), (lst_union z y = z), (lst_union z y = y), (lst_union y z = z), (lst_union y z = y), (lst_union y y = z), (lst_union y y = y)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 288.733 seconds


Label: 0 (0)
(n = x), (x = n), (true = lst_mem x z), (true = lst_mem x gv1), (true = mem x z), (true = mem x gv1), (mem n z = lst_mem x z), (mem n z = lst_mem x gv1), (mem n gv1 = lst_mem x z), (mem n gv1 = lst_mem x gv1)
(mem x z = lst_mem n z), (mem x z = lst_mem n gv1), (mem x gv1 = lst_mem n z), (mem x gv1 = lst_mem n gv1)

Label: 0 (1)
(z = gv1), (gv1 = z), (true = lst_mem n gv1), (true = lst_mem x gv1), (true = mem n gv1), (true = mem x gv1), (mem n z = lst_mem n gv1), (mem n z = lst_mem x gv1), (mem n gv1 = lst_mem n z), (mem n gv1 = lst_mem x z)
(mem x z = lst_mem n gv1), (mem x z = lst_mem x gv1), (mem x gv1 = lst_mem n z), (mem x gv1 = lst_mem x z), (lst_union y z = gv1), (lst_union y gv1 = z), (lst_union z z = gv1), (lst_union z gv1 = gv1), (lst_union gv1 z = gv1), (lst_union gv1 gv1 = z)

Label: 1 (2)
(n = x), (x = n), (true = lst_mem x z), (true = mem x z), (lst_mem x z = gv2), (mem n z = lst_mem x z), (mem x z = gv2), (mem x z = lst_mem n z)

Label: 1 (3)
(true = gv2), (n = x), (x = n), (true = lst_mem n z), (true = mem n z), (false <> gv2)

Label: 1 (4)
(true = lst_mem n z), (true = lst_mem x z), (true = mem n z), (true = mem x z), (lst_mem n z = gv2), (lst_mem x z = gv2), (mem n z = gv2), (mem x z = gv2)

Label: 2 (5)
(true = gv0), (false <> gv0), (lst_mem x z = gv0), (lst_mem n z = gv0), (mem x z = gv0), (mem n z = gv0)

Label: 3 (6)
(n = x), (x = n), (true = lst_mem x z), (true = mem x z), (mem n z = lst_mem x z), (mem x z = lst_mem n z)

Label: 3 (7)
(true = lst_mem n z), (true = lst_mem x z), (true = mem n z), (true = mem x z)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 486.501 seconds


(Nat_beq x n = true)
 - (Nat_beq x n = true)
 - (n = x)
 - (x = n)
 - (true = lst_mem x z)
 - (true = mem x z)
 - (mem n z = lst_mem x z)
 - (mem x z = lst_mem n z)

(Nat_beq x n = gv2)
 - (Nat_beq x n = gv2)
 - (n = x)
 - (x = n)
 - (true = lst_mem x z)
 - (true = mem x z)
 - (lst_mem x z = gv2)
 - (mem n z = lst_mem x z)
 - (mem x z = gv2)
 - (mem x z = lst_mem n z)

(true = gv2)
 - (true = gv2)
 - (n = x)
 - (x = n)
 - (true = lst_mem n z)
 - (true = mem n z)
 - (false <> gv2)

(lst_mem x (lst_union y z) = gv0)
 - (lst_mem x (lst_union y z) = gv0)
 - (true = gv0)
 - (false <> gv0)
 - (lst_mem x z = gv0)
 - (lst_mem n z = gv0)
 - (mem x z = gv0)
 - (mem n z = gv0)

(lst_mem n z = true)
 - (lst_mem n z = true)
 - (true = lst_mem x z)
 - (true = mem x z)

(lst_union y z = gv1)
 - (lst_union y z = gv1)
 - (z = gv1)
 - (gv1 = z)
 - (true = lst_mem n gv1)
 - (true = lst_mem x gv1)
 - (true = mem n gv1)
 - (true = mem x gv1)
 - (mem n z = lst_mem n gv1)
 - (mem n z = lst_mem x gv1)
 - (mem n gv1 = lst_mem n z)
 - (mem n gv1 = lst_mem x z)
 - (mem x z = lst_mem n gv1)
 - (mem x z = lst_mem x gv1)
 - (mem x gv1 = lst_mem n z)
 - (mem x gv1 = lst_mem x z)
 - (lst_union y gv1 = z)
 - (lst_union z z = gv1)
 - (lst_union z gv1 = gv1)
 - (lst_union gv1 z = gv1)
 - (lst_union gv1 gv1 = z)

(lst_mem n z = gv2)
 - (lst_mem n z = gv2)
 - (true = lst_mem n z)
 - (true = lst_mem x z)
 - (true = mem n z)
 - (true = mem x z)
 - (lst_mem x z = gv2)
 - (mem x z = gv2)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 486.502 seconds

Number of Result Pairs Returned: 8

(lst_union y z = gv1 -> lst_union z gv1 = gv1)
(lst_union z gv1 = gv1 ->  Nat_beq x n = true -> lst_mem n z = true -> lst_mem x gv1 = true)

(lst_union y z = gv1 -> lst_union gv1 z = gv1)
(lst_union gv1 z = gv1 ->  Nat_beq x n = true -> lst_mem n z = true -> lst_mem x gv1 = true)

(true = gv2 -> false <> gv2)
(false <> gv2 ->  Nat_beq x n = gv2 -> lst_mem n z = gv2 -> lst_mem x (lst_union y z) = gv2)

(Nat_beq x n = true -> lst_mem n z = true -> lst_mem x (lst_union y z) = true)

(Nat_beq x n = true -> n = x)
(n = x -> lst_mem n z = true -> lst_mem x (lst_union y z) = true)

(Nat_beq x n = true -> x = n)
(x = n -> lst_mem n z = true -> lst_mem x (lst_union y z) = true)

(Nat_beq x n = true -> mem n z = lst_mem x z)
(mem n z = lst_mem x z ->  lst_mem n z = true -> lst_mem x (lst_union y z) = true)

(Nat_beq x n = true -> mem x z = lst_mem n z)
(mem x z = lst_mem n z ->  lst_mem n z = true -> lst_mem x (lst_union y z) = true)
