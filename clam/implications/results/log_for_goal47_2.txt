Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (x <> y)

----------------------------------
Goal: ((eqb x y || false)%bool = false)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : bool = (eqb x y)
gv0 : bool = (eqb x y || false)%bool
gv2 : bool = false


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 11.905 seconds

Label: Generalization #0
Assumptions: 
 -- (x <> y)

----------------------------------
Goal: ((eqb x y || gv2)%bool = gv2)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (x <> y)
 -- ((eqb x y || false)%bool = gv0)

----------------------------------
Goal: (gv0 = false)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (x <> y)
 -- (eqb x y = gv1)

----------------------------------
Goal: ((gv1 || false)%bool = false)
Case: 3

Label: Generalization #3
Assumptions: 
 -- (x <> y)

----------------------------------
Goal: ((eqb x y || false)%bool = false)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 12.764 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
less : (Nat -> Nat -> bool)
eqb : (Nat -> Nat -> bool)
mem : (Nat -> Lst -> bool)
insort : (Nat -> Lst -> Lst)
sort : (Lst -> Lst)

Label: 0 (0)
Abducted Assumption: (x <> y)
Positive Examples:
   [gv2 := false; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv2 := false; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [gv2 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [gv2 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ (succ zero))))]
   [gv2 := false; x := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv2 := true; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv2 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ zero))))]
   [gv2 := true; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv2 := true; x := (succ zero); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv2 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   etc ...

Negative Examples:
   [gv2 := false; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [gv2 := false; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv2 := false; x := (succ (succ (succ zero))); y := (succ (succ (succ zero)))]
   [gv2 := false; x := (succ (succ zero)); y := (succ (succ zero))]
   [gv2 := false; x := (succ zero); y := (succ zero)]
   [gv2 := false; x := zero; y := zero]


Label: 1 (1)
Abducted Assumption: ((eqb x y || false)%bool = gv0)
Positive Examples:
   [gv0 := false; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [gv0 := false; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := false; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   [gv0 := false; x := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := false; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := false; x := (succ (succ (succ (succ (succ (succ zero)))))); y := zero]
   [gv0 := false; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ zero))]
   [gv0 := false; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [gv0 := false; x := (succ (succ (succ (succ zero)))); y := (succ zero)]
   [gv0 := false; x := (succ zero); y := (succ (succ (succ (succ zero))))]
   etc ...

Negative Examples:
   [gv0 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ (succ zero))))]
   [gv0 := true; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ zero)))]
   [gv0 := true; x := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := true; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ zero))]
   [gv0 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ zero)))]
   [gv0 := true; x := (succ zero); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := true; x := (succ (succ zero)); y := (succ (succ (succ zero)))]
   [gv0 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [gv0 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   etc ...


Label: 2 (2)
Abducted Assumption: (eqb x y = gv1)
Positive Examples:
   [gv1 := false; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ zero)))]
   [gv1 := false; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ zero))))]
   [gv1 := false; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [gv1 := false; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv1 := false; x := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; x := (succ (succ (succ (succ (succ zero))))); y := zero]
   [gv1 := false; x := (succ zero); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; x := zero; y := (succ (succ (succ (succ (succ zero)))))]
   etc ...

Negative Examples:
   [gv1 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [gv1 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ zero))))]
   [gv1 := true; x := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [gv1 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   [gv1 := true; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ zero))]
   [gv1 := true; x := (succ zero); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; x := (succ (succ (succ (succ (succ zero))))); y := (succ zero)]
   [gv1 := true; x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   etc ...


Label: 3 (3)
Abducted Assumption: (x <> y)
Positive Examples:
   [x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ zero)))]
   [x := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [x := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ (succ (succ zero)))))]
   [x := (succ (succ (succ (succ zero)))); y := (succ (succ zero))]
   [x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   [x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ zero)))]
   [x := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   [x := zero; y := (succ (succ (succ (succ (succ zero)))))]
   etc ...

Negative Examples:
   [x := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ (succ zero)))))]
   [x := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [x := (succ (succ (succ zero))); y := (succ (succ (succ zero)))]
   [x := (succ (succ zero)); y := (succ (succ zero))]
   [x := (succ zero); y := (succ zero)]
   [x := zero; y := zero]



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 14.25 seconds


Label: 0 (0)
(false = gv2), (true = gv2), (gv2 = gv2), (y = y), (y = x), (x = y), (x = x), (false = eqb y y), (false = eqb y x), (false = eqb x y)
(false = eqb x x), (false = less y y), (false = less y x), (false = less x y), (false = less x x), (true = eqb y y), (true = eqb y x), (true = eqb x y), (true = eqb x x), (true = less y y)
(true = less y x), (true = less x y), (true = less x x), (false <> gv2), (true <> gv2), (gv2 <> gv2), (y <> y), (y <> x), (x <> y), (x <> x)
(None = Some y), (None = Some x), (eqb y y = gv2), (eqb y x = gv2), (eqb x y = gv2), (eqb x x = gv2), (less y y = gv2), (less y y = eqb y y), (less y y = eqb y x), (less y y = eqb x y)
(less y y = eqb x x), (less y x = gv2), (less y x = eqb y y), (less y x = eqb y x), (less y x = eqb x y), (less y x = eqb x x), (less x y = gv2), (less x y = eqb y y), (less x y = eqb y x), (less x y = eqb x y)
(less x y = eqb x x), (less x x = gv2), (less x x = eqb y y), (less x x = eqb y x), (less x x = eqb x y), (less x x = eqb x x), (None = Some gv2)

Label: 1 (1)
(false = gv0), (true = gv0), (y = y), (y = x), (x = y), (x = x), (gv0 = gv0), (false = eqb y y), (false = eqb y x), (false = eqb x y)
(false = eqb x x), (false = less y y), (false = less y x), (false = less x y), (false = less x x), (true = eqb y y), (true = eqb y x), (true = eqb x y), (true = eqb x x), (true = less y y)
(true = less y x), (true = less x y), (true = less x x), (false <> gv0), (true <> gv0), (y <> y), (y <> x), (x <> y), (x <> x), (gv0 <> gv0)
(None = Some y), (None = Some x), (eqb y y = gv0), (eqb y x = gv0), (eqb x y = gv0), (eqb x x = gv0), (less y y = gv0), (less y y = eqb y y), (less y y = eqb y x), (less y y = eqb x y)
(less y y = eqb x x), (less y x = gv0), (less y x = eqb y y), (less y x = eqb y x), (less y x = eqb x y), (less y x = eqb x x), (less x y = gv0), (less x y = eqb y y), (less x y = eqb y x), (less x y = eqb x y)
(less x y = eqb x x), (less x x = gv0), (less x x = eqb y y), (less x x = eqb y x), (less x x = eqb x y), (less x x = eqb x x), (None = Some gv0)

Label: 2 (2)
(false = gv1), (true = gv1), (y = y), (y = x), (x = y), (x = x), (gv1 = gv1), (false = eqb y y), (false = eqb y x), (false = eqb x y)
(false = eqb x x), (false = less y y), (false = less y x), (false = less x y), (false = less x x), (true = eqb y y), (true = eqb y x), (true = eqb x y), (true = eqb x x), (true = less y y)
(true = less y x), (true = less x y), (true = less x x), (false <> gv1), (true <> gv1), (y <> y), (y <> x), (x <> y), (x <> x), (gv1 <> gv1)
(None = Some y), (None = Some x), (eqb y y = gv1), (eqb y x = gv1), (eqb x y = gv1), (eqb x x = gv1), (less y y = gv1), (less y y = eqb y y), (less y y = eqb y x), (less y y = eqb x y)
(less y y = eqb x x), (less y x = gv1), (less y x = eqb y y), (less y x = eqb y x), (less y x = eqb x y), (less y x = eqb x x), (less x y = gv1), (less x y = eqb y y), (less x y = eqb y x), (less x y = eqb x y)
(less x y = eqb x x), (less x x = gv1), (less x x = eqb y y), (less x x = eqb y x), (less x x = eqb x y), (less x x = eqb x x), (None = Some gv1)

Label: 3 (3)
(y = y), (y = x), (x = y), (x = x), (false = eqb y y), (false = eqb y x), (false = eqb x y), (false = eqb x x), (false = less y y), (false = less y x)
(false = less x y), (false = less x x), (true = eqb y y), (true = eqb y x), (true = eqb x y), (true = eqb x x), (true = less y y), (true = less y x), (true = less x y), (true = less x x)
(y <> y), (y <> x), (x <> y), (x <> x), (None = Some y), (None = Some x), (less y y = eqb y y), (less y y = eqb y x), (less y y = eqb x y), (less y y = eqb x x)
(less y x = eqb y y), (less y x = eqb y x), (less y x = eqb x y), (less y x = eqb x x), (less x y = eqb y y), (less x y = eqb y x), (less x y = eqb x y), (less x y = eqb x x), (less x x = eqb y y), (less x x = eqb y x)
(less x x = eqb x y), (less x x = eqb x x)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 95.191 seconds


Label: 0 (0)
(false = eqb y x), (false = eqb x y), (y <> x), (x <> y), (less y y = eqb y x), (less y y = eqb x y), (less x x = eqb y x), (less x x = eqb x y)

Label: 1 (1)
(false = gv0), (true <> gv0), (eqb y x = gv0), (eqb x y = gv0), (less y y = gv0), (less x x = gv0)

Label: 2 (2)
(false = gv1), (true <> gv1), (eqb y x = gv1), (eqb x y = gv1), (less y y = gv1), (less x x = gv1)

Label: 3 (3)
(false = eqb y x), (false = eqb x y), (y <> x), (x <> y), (less y y = eqb y x), (less y y = eqb x y), (less x x = eqb y x), (less x x = eqb x y)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 200.624 seconds


(x <> y)
 - (x <> y)
 - (false = eqb y x)
 - (false = eqb x y)
 - (y <> x)
 - (less y y = eqb y x)
 - (less y y = eqb x y)
 - (less x x = eqb y x)
 - (less x x = eqb x y)

((eqb x y || false)%bool = gv0)
 - ((eqb x y || false)%bool = gv0)
 - (false = gv0)
 - (true <> gv0)
 - (eqb y x = gv0)
 - (eqb x y = gv0)
 - (less y y = gv0)
 - (less x x = gv0)

(eqb x y = gv1)
 - (eqb x y = gv1)
 - (false = gv1)
 - (true <> gv1)
 - (eqb y x = gv1)
 - (less y y = gv1)
 - (less x x = gv1)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 200.624 seconds

Number of Result Pairs Returned: 19

(x <> y -> (eqb x y || gv2)%bool = gv2)

(x <> y -> false = eqb y x)
(false = eqb y x -> (eqb x y || gv2)%bool = gv2)

(x <> y -> false = eqb x y)
(false = eqb x y -> (eqb x y || gv2)%bool = gv2)

(x <> y -> y <> x)
(y <> x -> (eqb x y || gv2)%bool = gv2)

(x <> y -> less y y = eqb y x)
(less y y = eqb y x -> (eqb x y || gv2)%bool = gv2)

(x <> y -> less y y = eqb x y)
(less y y = eqb x y -> (eqb x y || gv2)%bool = gv2)

(x <> y -> less x x = eqb y x)
(less x x = eqb y x -> (eqb x y || gv2)%bool = gv2)

(x <> y -> less x x = eqb x y)
(less x x = eqb x y -> (eqb x y || gv2)%bool = gv2)

((eqb x y || false)%bool = gv0 -> eqb y x = gv0)
(eqb y x = gv0 -> x <> y -> gv0 = false)

((eqb x y || false)%bool = gv0 -> eqb x y = gv0)
(eqb x y = gv0 -> x <> y -> gv0 = false)

(eqb x y = gv1 -> eqb y x = gv1)
(eqb y x = gv1 -> x <> y -> (gv1 || false)%bool = false)

(x <> y -> (eqb x y || false)%bool = false)

(x <> y -> false = eqb y x)
(false = eqb y x -> (eqb x y || false)%bool = false)

(x <> y -> false = eqb x y)
(false = eqb x y -> (eqb x y || false)%bool = false)

(x <> y -> y <> x)
(y <> x -> (eqb x y || false)%bool = false)

(x <> y -> less y y = eqb y x)
(less y y = eqb y x -> (eqb x y || false)%bool = false)

(x <> y -> less y y = eqb x y)
(less y y = eqb x y -> (eqb x y || false)%bool = false)

(x <> y -> less x x = eqb y x)
(less x x = eqb y x -> (eqb x y || false)%bool = false)

(x <> y -> less x x = eqb x y)
(less x x = eqb x y -> (eqb x y || false)%bool = false)
