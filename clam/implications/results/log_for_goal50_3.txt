Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (eqb x n = false)
 -- (count x (sort y) = count x y)

----------------------------------
Goal: (count x (insort n (sort y)) = count x y)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv3 : Nat = (count x y)
gv2 : Lst = (sort y)
gv0 : Nat = (count x (insort n (sort y)))
gv1 : Lst = (insort n (sort y))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 47.457 seconds

Label: Generalization #0
Assumptions: 
 -- (insort n (sort y) = gv1)
 -- (eqb x n = false)

----------------------------------
Goal: (count x gv1 = count x y)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (count x (insort n (sort y)) = gv0)
 -- (eqb x n = false)

----------------------------------
Goal: (gv0 = count x y)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (eqb x n = false)
 -- (count x gv2 = count x y)

----------------------------------
Goal: (count x (insort n gv2) = count x y)
Case: 3

Label: Generalization #3
Assumptions: 
 -- (eqb x n = false)
 -- (count x (sort y) = gv3)

----------------------------------
Goal: (count x (insort n (sort y)) = gv3)
Case: 3

Label: Generalization #4
Assumptions: 
 -- (eqb x n = false)

----------------------------------
Goal: (count x (insort n (sort y)) = count x y)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 48.704 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
less : (Nat -> Nat -> bool)
eqb : (Nat -> Nat -> bool)
count : (Nat -> Lst -> Nat)
insort : (Nat -> Lst -> Lst)
sort : (Lst -> Lst)

Label: 0 (0)
Abducted Assumption: (insort n (sort y) = gv1)
Positive Examples:
   [gv1 := (cons zero (cons (succ (succ zero)) nil)); n := zero; x := (succ (succ zero)); y := (cons (succ (succ zero)) nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (cons zero nil)]
   [gv1 := (cons (succ zero) (cons (succ zero) nil)); n := (succ zero); x := zero; y := (cons (succ zero) nil)]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := (succ (succ (succ zero))); y := nil]
   [gv1 := (cons zero (cons (succ (succ zero)) nil)); n := zero; x := (succ zero); y := (cons (succ (succ zero)) nil)]
   [gv1 := (cons (succ (succ (succ (succ zero)))) nil); n := (succ (succ (succ (succ zero)))); x := (succ zero); y := nil]
   [gv1 := (cons zero (cons zero (cons (succ zero) nil))); n := (succ zero); x := (succ (succ (succ (succ zero)))); y := (cons zero (cons zero nil))]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ (succ (succ (succ zero))))); y := nil]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := zero; y := nil]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ (succ (succ zero))); y := nil]
   etc ...

Negative Examples:
   [gv1 := (cons zero nil); n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ (succ zero)) (cons (succ (succ zero)) nil)))]
   [gv1 := (cons (succ zero) (cons (succ zero) nil)); n := (succ zero); x := zero; y := (cons zero nil)]
   [gv1 := (cons (succ zero) (cons zero nil)); n := (succ zero); x := zero; y := (cons zero (cons zero nil))]
   [gv1 := (cons zero (cons zero (cons (succ (succ zero)) (cons (succ zero) nil)))); n := (succ (succ zero)); x := zero; y := (cons zero nil)]
   [gv1 := (cons (succ (succ zero))
   (cons (succ zero) (cons (succ zero) (cons (succ zero) nil)))); n := zero; x := (succ zero); y := nil]
   [gv1 := (cons (succ zero) (cons zero (cons zero nil))); n := zero; x := (succ zero); y := nil]
   [gv1 := (cons (succ zero) (cons (succ (succ (succ zero))) (cons zero nil))); n := (succ zero); x := (succ (succ (succ zero))); y := nil]
   [gv1 := nil; n := zero; x := (succ zero); y := (cons (succ zero)
   (cons zero
      (cons zero (cons (succ (succ (succ (succ (succ (succ zero)))))) nil))))]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ (succ (succ (succ zero))))); y := (cons (succ (succ (succ (succ (succ zero))))) nil)]
   [gv1 := (cons zero nil); n := zero; x := (succ zero); y := (cons (succ zero) (cons (succ zero) nil))]
   etc ...


Label: 0 (1)
Abducted Assumption: (eqb x n = false)
Positive Examples:
   [gv1 := (cons zero (cons (succ (succ zero)) nil)); n := zero; x := (succ (succ zero)); y := (cons (succ (succ zero)) nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := (succ (succ (succ (succ (succ (succ zero)))))); y := (cons zero nil)]
   [gv1 := (cons (succ zero) (cons (succ zero) nil)); n := (succ zero); x := zero; y := (cons (succ zero) nil)]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := (succ (succ (succ zero))); y := nil]
   [gv1 := (cons zero (cons (succ (succ zero)) nil)); n := zero; x := (succ zero); y := (cons (succ (succ zero)) nil)]
   [gv1 := (cons (succ (succ (succ (succ zero)))) nil); n := (succ (succ (succ (succ zero)))); x := (succ zero); y := nil]
   [gv1 := (cons zero (cons zero (cons (succ zero) nil))); n := (succ zero); x := (succ (succ (succ (succ zero)))); y := (cons zero (cons zero nil))]
   [gv1 := (cons zero nil); n := zero; x := (succ (succ (succ (succ (succ zero))))); y := nil]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := zero; y := nil]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ (succ (succ zero))); y := nil]
   etc ...

Negative Examples:
   [gv1 := (cons zero (cons (succ (succ zero)) nil)); n := zero; x := zero; y := (cons (succ (succ zero)) nil)]
   [gv1 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := (succ (succ zero)); y := nil]
   [gv1 := (cons zero (cons (succ (succ (succ zero))) nil)); n := zero; x := zero; y := (cons (succ (succ (succ zero))) nil)]
   [gv1 := (cons zero (cons zero nil)); n := zero; x := zero; y := (cons zero nil)]
   [gv1 := (cons zero nil); n := zero; x := zero; y := nil]
   [gv1 := (cons (succ zero) nil); n := (succ zero); x := (succ zero); y := nil]


Label: 1 (2)
Abducted Assumption: (count x (insort n (sort y)) = gv0)
Positive Examples:
   [gv0 := zero; n := (succ (succ (succ (succ zero)))); x := (succ (succ zero)); y := (cons zero nil)]
   [gv0 := zero; n := (succ (succ (succ zero))); x := zero; y := (cons (succ (succ (succ zero))) nil)]
   [gv0 := zero; n := (succ zero); x := (succ (succ (succ (succ (succ zero))))); y := (cons (succ zero) nil)]
   [gv0 := zero; n := (succ (succ (succ zero))); x := (succ zero); y := (cons zero (cons (succ (succ zero)) nil))]
   [gv0 := zero; n := zero; x := (succ (succ (succ (succ (succ zero))))); y := (cons zero (cons (succ zero) (cons (succ zero) nil)))]
   [gv0 := zero; n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ (succ (succ (succ zero)))) nil))]
   [gv0 := zero; n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ (succ (succ (succ zero))))) nil)]
   [gv0 := (succ zero); n := zero; x := (succ zero); y := (cons (succ (succ zero)) (cons (succ zero) (cons (succ (succ zero)) nil)))]
   [gv0 := (succ zero); n := (succ zero); x := zero; y := (cons zero
   (cons (succ (succ zero))
      (cons (succ (succ (succ (succ (succ zero))))) nil)))]
   [gv0 := (succ zero); n := zero; x := (succ zero); y := (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))]
   etc ...

Negative Examples:
   [gv0 := (succ (succ (succ (succ zero)))); n := (succ zero); x := (succ (succ zero)); y := (cons zero (cons (succ (succ zero)) (cons (succ (succ zero)) nil)))]
   [gv0 := zero; n := (succ (succ (succ zero))); x := zero; y := (cons zero (cons (succ zero) (cons (succ (succ (succ zero))) nil)))]
   [gv0 := zero; n := zero; x := (succ zero); y := (cons zero (cons (succ (succ zero)) (cons (succ zero) nil)))]
   [gv0 := (succ zero); n := (succ zero); x := (succ (succ (succ zero))); y := (cons zero (cons (succ zero) nil))]
   [gv0 := (succ (succ (succ zero))); n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ zero)) (cons (succ zero) nil))]
   [gv0 := (succ zero); n := zero; x := (succ (succ zero)); y := (cons zero (cons (succ zero) (cons (succ (succ (succ zero))) nil)))]
   [gv0 := (succ zero); n := (succ (succ (succ (succ zero)))); x := (succ zero); y := nil]
   [gv0 := (succ (succ (succ (succ (succ zero))))); n := (succ (succ zero)); x := (succ zero); y := (cons zero (cons zero nil))]
   [gv0 := (succ zero); n := zero; x := (succ (succ (succ zero))); y := (cons (succ (succ (succ (succ zero)))) (cons (succ zero) (cons zero nil)))]
   [gv0 := zero; n := (succ (succ zero)); x := (succ zero); y := (cons zero (cons (succ zero) (cons zero (cons (succ zero) nil))))]
   etc ...


Label: 1 (3)
Abducted Assumption: (eqb x n = false)
Positive Examples:
   [gv0 := zero; n := (succ (succ (succ (succ zero)))); x := (succ (succ zero)); y := (cons zero nil)]
   [gv0 := zero; n := (succ (succ (succ zero))); x := zero; y := (cons (succ (succ (succ zero))) nil)]
   [gv0 := zero; n := (succ zero); x := (succ (succ (succ (succ (succ zero))))); y := (cons (succ zero) nil)]
   [gv0 := zero; n := (succ (succ (succ zero))); x := (succ zero); y := (cons zero (cons (succ (succ zero)) nil))]
   [gv0 := zero; n := zero; x := (succ (succ (succ (succ (succ zero))))); y := (cons zero (cons (succ zero) (cons (succ zero) nil)))]
   [gv0 := zero; n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ (succ (succ (succ zero)))) nil))]
   [gv0 := zero; n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ (succ (succ (succ zero))))) nil)]
   [gv0 := (succ zero); n := zero; x := (succ zero); y := (cons (succ (succ zero)) (cons (succ zero) (cons (succ (succ zero)) nil)))]
   [gv0 := (succ zero); n := (succ zero); x := zero; y := (cons zero
   (cons (succ (succ zero))
      (cons (succ (succ (succ (succ (succ zero))))) nil)))]
   [gv0 := (succ zero); n := zero; x := (succ zero); y := (cons zero (cons (succ zero) (cons (succ (succ zero)) nil)))]
   etc ...

Negative Examples:
   [gv0 := (succ (succ (succ (succ zero)))); n := zero; x := zero; y := (cons (succ (succ (succ zero)))
   (cons zero (cons zero (cons (succ zero) (cons zero nil)))))]
   [gv0 := (succ zero); n := (succ zero); x := (succ zero); y := (cons zero (cons zero (cons zero nil)))]
   [gv0 := (succ (succ zero)); n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero (cons (succ (succ zero)) (cons (succ zero) (cons zero nil))))]
   [gv0 := (succ zero); n := zero; x := zero; y := (cons (succ zero) (cons (succ zero) (cons (succ zero) nil)))]
   [gv0 := (succ (succ zero)); n := zero; x := zero; y := (cons zero (cons (succ (succ (succ (succ zero)))) nil))]
   [gv0 := (succ zero); n := (succ zero); x := (succ zero); y := (cons zero
   (cons zero
      (cons (succ (succ (succ zero))) (cons zero (cons zero (cons zero nil))))))]
   [gv0 := (succ (succ (succ (succ (succ zero))))); n := zero; x := zero; y := (cons zero (cons zero (cons zero (cons zero nil))))]
   [gv0 := (succ zero); n := zero; x := zero; y := (cons (succ zero) (cons (succ (succ (succ (succ (succ zero))))) nil))]
   [gv0 := (succ zero); n := zero; x := zero; y := (cons (succ (succ (succ (succ zero)))) (cons (succ zero) nil))]
   [gv0 := (succ (succ (succ zero))); n := zero; x := zero; y := (cons (succ zero)
   (cons zero
      (cons (succ (succ zero))
         (cons zero (cons (succ (succ (succ (succ (succ (succ zero)))))) nil)))))]
   etc ...


Label: 2 (4)
Abducted Assumption: (eqb x n = false)
Positive Examples:
   [gv2 := (cons (succ (succ zero)) (cons zero nil)); n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero nil)]
   [gv2 := (cons (succ (succ (succ zero))) (cons (succ zero) (cons (succ zero) nil))); n := (succ zero); x := (succ (succ zero)); y := (cons zero (cons zero nil))]
   [gv2 := (cons zero (cons zero nil)); n := (succ zero); x := (succ (succ zero)); y := nil]
   [gv2 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := zero; y := (cons (succ (succ (succ zero))) nil)]
   [gv2 := (cons zero nil); n := (succ (succ (succ zero))); x := (succ (succ (succ (succ zero)))); y := (cons zero nil)]
   [gv2 := nil; n := (succ zero); x := (succ (succ (succ zero))); y := (cons (succ zero) (cons zero nil))]
   [gv2 := (cons zero nil); n := (succ (succ zero)); x := zero; y := (cons (succ zero) (cons zero nil))]
   [gv2 := (cons (succ (succ (succ zero)))
   (cons zero (cons (succ (succ (succ zero))) nil))); n := (succ zero); x := (succ (succ zero)); y := (cons zero (cons zero nil))]
   [gv2 := (cons (succ (succ (succ (succ zero)))) (cons (succ (succ (succ zero))) nil)); n := (succ (succ zero)); x := zero; y := (cons (succ (succ zero)) nil)]
   [gv2 := (cons (succ (succ (succ (succ zero))))
   (cons (succ zero) (cons (succ zero) nil))); n := (succ (succ (succ zero))); x := zero; y := nil]
   etc ...

Negative Examples:
   [gv2 := (cons (succ zero) nil); n := zero; x := zero; y := (cons (succ (succ (succ zero)))
   (cons (succ (succ zero)) (cons (succ zero) nil)))]
   [gv2 := (cons zero (cons zero (cons (succ (succ zero)) nil))); n := (succ zero); x := (succ zero); y := (cons zero nil)]
   [gv2 := (cons (succ (succ zero)) (cons (succ (succ (succ zero))) nil)); n := (succ (succ (succ zero))); x := (succ (succ (succ zero))); y := (cons (succ (succ (succ zero))) nil)]
   [gv2 := (cons (succ (succ (succ (succ zero)))) nil); n := zero; x := zero; y := (cons (succ zero) nil)]
   [gv2 := (cons (succ (succ (succ (succ zero)))) (cons zero (cons zero nil))); n := (succ zero); x := (succ zero); y := (cons zero nil)]
   [gv2 := (cons (succ (succ zero)) (cons (succ (succ zero)) nil)); n := zero; x := zero; y := (cons (succ zero) nil)]
   [gv2 := (cons (succ zero) (cons zero nil)); n := zero; x := zero; y := (cons (succ (succ zero)) (cons zero (cons (succ zero) nil)))]
   [gv2 := (cons (succ zero) nil); n := (succ (succ (succ (succ (succ zero))))); x := (succ (succ (succ (succ (succ zero))))); y := nil]
   [gv2 := (cons (succ (succ zero))
   (cons (succ (succ (succ (succ zero))))
      (cons (succ zero) (cons (succ (succ (succ (succ zero)))) nil)))); n := zero; x := zero; y := nil]
   [gv2 := (cons (succ (succ zero))
   (cons zero (cons (succ (succ (succ (succ zero)))) nil))); n := zero; x := zero; y := (cons zero nil)]
   etc ...


Label: 2 (5)
Abducted Assumption: (count x gv2 = count x y)
Positive Examples:
   [gv2 := (cons (succ (succ zero)) (cons zero nil)); n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero nil)]
   [gv2 := (cons (succ (succ (succ zero))) (cons (succ zero) (cons (succ zero) nil))); n := (succ zero); x := (succ (succ zero)); y := (cons zero (cons zero nil))]
   [gv2 := (cons zero (cons zero nil)); n := (succ zero); x := (succ (succ zero)); y := nil]
   [gv2 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := zero; y := (cons (succ (succ (succ zero))) nil)]
   [gv2 := (cons zero nil); n := (succ (succ (succ zero))); x := (succ (succ (succ (succ zero)))); y := (cons zero nil)]
   [gv2 := nil; n := (succ zero); x := (succ (succ (succ zero))); y := (cons (succ zero) (cons zero nil))]
   [gv2 := (cons zero nil); n := (succ (succ zero)); x := zero; y := (cons (succ zero) (cons zero nil))]
   [gv2 := (cons (succ (succ (succ zero)))
   (cons zero (cons (succ (succ (succ zero))) nil))); n := (succ zero); x := (succ (succ zero)); y := (cons zero (cons zero nil))]
   [gv2 := (cons (succ (succ (succ (succ zero)))) (cons (succ (succ (succ zero))) nil)); n := (succ (succ zero)); x := zero; y := (cons (succ (succ zero)) nil)]
   [gv2 := (cons (succ (succ (succ (succ zero))))
   (cons (succ zero) (cons (succ zero) nil))); n := (succ (succ (succ zero))); x := zero; y := nil]
   etc ...

Negative Examples:
   [gv2 := (cons zero (cons (succ zero) nil)); n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ (succ zero)) nil))]
   [gv2 := (cons zero (cons (succ (succ (succ (succ (succ zero))))) nil)); n := zero; x := (succ zero); y := (cons (succ zero) nil)]
   [gv2 := (cons (succ (succ zero)) nil); n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ zero)) (cons (succ zero) (cons (succ zero) nil)))]
   [gv2 := nil; n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ zero)) (cons (succ zero) nil))]
   [gv2 := (cons zero nil); n := (succ zero); x := (succ (succ (succ (succ (succ zero))))); y := (cons zero (cons (succ (succ (succ (succ (succ zero))))) nil))]
   [gv2 := (cons (succ (succ zero))
   (cons zero (cons (succ (succ (succ zero))) (cons zero nil)))); n := (succ (succ (succ (succ zero)))); x := zero; y := nil]
   [gv2 := (cons zero (cons (succ (succ (succ zero))) (cons zero nil))); n := zero; x := (succ zero); y := (cons (succ zero) (cons (succ zero) nil))]
   [gv2 := nil; n := (succ (succ zero)); x := (succ zero); y := (cons zero
   (cons (succ (succ zero)) (cons zero (cons zero (cons (succ zero) nil)))))]
   [gv2 := (cons (succ (succ zero)) nil); n := (succ zero); x := (succ (succ (succ (succ zero)))); y := (cons (succ (succ (succ (succ zero)))) nil)]
   [gv2 := (cons zero (cons zero (cons (succ (succ zero)) nil))); n := zero; x := (succ zero); y := (cons (succ zero)
   (cons (succ (succ zero)) (cons zero (cons (succ zero) nil))))]
   etc ...


Label: 3 (6)
Abducted Assumption: (eqb x n = false)
Positive Examples:
   [gv3 := (succ zero); n := (succ (succ (succ zero))); x := (succ (succ zero)); y := (cons zero (cons zero (cons (succ (succ zero)) nil)))]
   [gv3 := zero; n := (succ (succ (succ zero))); x := (succ (succ zero)); y := (cons (succ (succ (succ (succ zero)))) nil)]
   [gv3 := zero; n := zero; x := (succ (succ zero)); y := (cons (succ zero)
   (cons (succ (succ (succ (succ (succ (succ zero)))))) (cons zero nil)))]
   [gv3 := zero; n := (succ (succ (succ (succ zero)))); x := (succ zero); y := (cons zero nil)]
   [gv3 := zero; n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero (cons (succ (succ zero)) (cons zero nil)))]
   [gv3 := zero; n := (succ (succ zero)); x := zero; y := (cons (succ zero)
   (cons (succ zero) (cons (succ (succ (succ zero))) (cons (succ zero) nil))))]
   [gv3 := zero; n := (succ (succ (succ (succ (succ (succ zero)))))); x := zero; y := (cons (succ (succ zero)) (cons (succ zero) nil))]
   [gv3 := (succ zero); n := (succ zero); x := zero; y := (cons (succ (succ (succ zero)))
   (cons zero (cons (succ (succ (succ zero))) nil)))]
   [gv3 := zero; n := (succ (succ (succ zero))); x := zero; y := (cons (succ zero) (cons (succ zero) nil))]
   [gv3 := zero; n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ zero) (cons (succ (succ (succ zero))) nil)))]
   etc ...

Negative Examples:
   [gv3 := zero; n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ (succ zero)))) nil)]
   [gv3 := (succ zero); n := (succ zero); x := (succ zero); y := (cons (succ (succ zero)) (cons zero (cons zero (cons (succ zero) nil))))]
   [gv3 := zero; n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ zero) (cons zero nil))]
   [gv3 := zero; n := zero; x := zero; y := (cons (succ (succ (succ (succ zero))))
   (cons (succ (succ (succ (succ zero))))
      (cons (succ (succ (succ (succ zero)))) nil)))]
   [gv3 := (succ zero); n := (succ zero); x := (succ zero); y := (cons zero (cons (succ zero) (cons zero nil)))]
   [gv3 := (succ zero); n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ zero))) (cons (succ zero) (cons zero nil)))]
   [gv3 := zero; n := (succ zero); x := (succ zero); y := (cons zero (cons (succ (succ zero)) nil))]
   [gv3 := (succ zero); n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ (succ zero)) nil)]
   [gv3 := zero; n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ zero))) (cons zero (cons (succ (succ zero)) nil)))]
   [gv3 := zero; n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ (succ zero))))
   (cons zero (cons (succ (succ zero)) nil)))]
   etc ...


Label: 3 (7)
Abducted Assumption: (count x (sort y) = gv3)
Positive Examples:
   [gv3 := (succ zero); n := (succ (succ (succ zero))); x := (succ (succ zero)); y := (cons zero (cons zero (cons (succ (succ zero)) nil)))]
   [gv3 := zero; n := (succ (succ (succ zero))); x := (succ (succ zero)); y := (cons (succ (succ (succ (succ zero)))) nil)]
   [gv3 := zero; n := zero; x := (succ (succ zero)); y := (cons (succ zero)
   (cons (succ (succ (succ (succ (succ (succ zero)))))) (cons zero nil)))]
   [gv3 := zero; n := (succ (succ (succ (succ zero)))); x := (succ zero); y := (cons zero nil)]
   [gv3 := zero; n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero (cons (succ (succ zero)) (cons zero nil)))]
   [gv3 := zero; n := (succ (succ zero)); x := zero; y := (cons (succ zero)
   (cons (succ zero) (cons (succ (succ (succ zero))) (cons (succ zero) nil))))]
   [gv3 := zero; n := (succ (succ (succ (succ (succ (succ zero)))))); x := zero; y := (cons (succ (succ zero)) (cons (succ zero) nil))]
   [gv3 := (succ zero); n := (succ zero); x := zero; y := (cons (succ (succ (succ zero)))
   (cons zero (cons (succ (succ (succ zero))) nil)))]
   [gv3 := zero; n := (succ (succ (succ zero))); x := zero; y := (cons (succ zero) (cons (succ zero) nil))]
   [gv3 := zero; n := (succ zero); x := zero; y := (cons (succ zero) (cons (succ zero) (cons (succ (succ (succ zero))) nil)))]
   etc ...

Negative Examples:
   [gv3 := zero; n := zero; x := (succ (succ zero)); y := (cons (succ (succ zero))
   (cons (succ (succ zero)) (cons zero (cons zero nil))))]
   [gv3 := (succ (succ (succ (succ (succ zero))))); n := zero; x := (succ zero); y := (cons (succ zero) (cons (succ (succ zero)) nil))]
   [gv3 := (succ (succ (succ zero))); n := zero; x := (succ (succ (succ zero))); y := (cons zero (cons (succ zero) (cons (succ (succ (succ zero))) nil)))]
   [gv3 := (succ (succ (succ (succ zero)))); n := (succ (succ (succ zero))); x := zero; y := (cons (succ (succ zero)) (cons zero nil))]
   [gv3 := (succ (succ zero)); n := (succ (succ (succ (succ (succ zero))))); x := (succ zero); y := (cons zero (cons zero nil))]
   [gv3 := (succ (succ zero)); n := zero; x := (succ (succ (succ (succ (succ zero))))); y := (cons zero nil)]
   [gv3 := (succ (succ (succ (succ (succ zero))))); n := (succ (succ zero)); x := (succ (succ (succ (succ zero)))); y := (cons (succ zero) (cons (succ (succ zero)) (cons zero (cons zero nil))))]
   [gv3 := (succ (succ zero)); n := zero; x := (succ zero); y := (cons zero
   (cons (succ (succ (succ zero)))
      (cons (succ (succ zero)) (cons zero (cons zero nil)))))]
   [gv3 := (succ (succ (succ zero))); n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero (cons (succ (succ (succ zero))) (cons zero (cons zero nil))))]
   [gv3 := (succ (succ zero)); n := zero; x := (succ (succ zero)); y := (cons (succ (succ (succ (succ (succ (succ zero)))))) nil)]
   etc ...


Label: 4 (8)
Abducted Assumption: (eqb x n = false)
Positive Examples:
   [n := (succ (succ zero)); x := (succ zero); y := (cons (succ (succ (succ (succ zero)))) (cons zero (cons zero nil)))]
   [n := (succ (succ (succ zero))); x := (succ (succ zero)); y := (cons zero (cons zero (cons (succ zero) nil)))]
   [n := (succ (succ zero)); x := zero; y := (cons zero (cons (succ (succ zero)) (cons zero (cons (succ zero) nil))))]
   [n := (succ zero); x := (succ (succ (succ zero))); y := (cons (succ (succ zero)) (cons zero nil))]
   [n := zero; x := (succ zero); y := (cons (succ zero) (cons zero (cons zero (cons (succ (succ zero)) nil))))]
   [n := (succ (succ zero)); x := zero; y := (cons (succ (succ (succ zero))) (cons (succ zero) nil))]
   [n := (succ (succ zero)); x := (succ (succ (succ zero))); y := (cons (succ zero) (cons zero (cons (succ zero) nil)))]
   [n := zero; x := (succ (succ (succ (succ zero)))); y := (cons (succ zero) (cons zero nil))]
   [n := zero; x := (succ (succ (succ (succ zero)))); y := (cons zero (cons (succ (succ (succ zero))) (cons zero (cons zero nil))))]
   [n := zero; x := (succ zero); y := (cons (succ (succ (succ (succ zero)))) (cons zero nil))]
   etc ...

Negative Examples:
   [n := (succ (succ zero)); x := (succ (succ zero)); y := (cons zero (cons (succ (succ (succ zero))) (cons (succ (succ zero)) nil)))]
   [n := (succ (succ zero)); x := (succ (succ zero)); y := (cons (succ (succ (succ zero)))
   (cons (succ (succ zero)) (cons (succ (succ (succ zero))) nil)))]
   [n := (succ (succ (succ zero))); x := (succ (succ (succ zero))); y := (cons (succ zero) (cons zero nil))]
   [n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ zero))) (cons (succ zero) (cons (succ zero) nil)))]
   [n := zero; x := zero; y := (cons (succ zero)
   (cons (succ zero) (cons zero (cons zero (cons (succ zero) nil)))))]
   [n := zero; x := zero; y := (cons (succ (succ zero))
   (cons (succ zero) (cons zero (cons (succ (succ (succ (succ zero)))) nil))))]
   [n := zero; x := zero; y := (cons (succ (succ (succ (succ zero)))) (cons (succ zero) (cons zero nil)))]
   [n := (succ zero); x := (succ zero); y := (cons (succ (succ (succ zero)))
   (cons (succ (succ (succ zero)))
      (cons (succ (succ (succ zero)))
         (cons zero (cons (succ (succ zero)) nil)))))]
   [n := zero; x := zero; y := (cons (succ (succ (succ (succ zero))))
   (cons (succ zero) (cons zero (cons zero (cons (succ zero) nil)))))]
   [n := (succ (succ (succ (succ zero)))); x := (succ (succ (succ (succ zero)))); y := (cons zero nil)]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 51.283 seconds


Label: 0 (0)
(y = y), (y = gv1), (gv1 = y), (gv1 = gv1), (n = n), (n = x), (x = n), (x = x), (false = eqb n n), (false = eqb n x)
(false = eqb x n), (false = eqb x x), (false = less n n), (false = less n x), (false = less x n), (false = less x x), (true = eqb n n), (true = eqb n x), (true = eqb x n), (true = eqb x x)
(true = less n n), (true = less n x), (true = less x n), (true = less x x), (y <> y), (y <> gv1), (gv1 <> y), (gv1 <> gv1), (n <> n), (n <> x)
(x <> n), (x <> x), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x n), (less n n = eqb x x), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x n), (less n x = eqb x x)
(less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv1)
(None = Some n), (None = Some x), (count n y = n), (count n y = x), (count n gv1 = n), (count n gv1 = x), (count x y = n), (count x y = x), (count x gv1 = n), (count x gv1 = x)
(sort y = y), (sort y = gv1), (sort y = insort n y), (sort y = insort n gv1), (sort y = insort x y), (sort y = insort x gv1), (sort gv1 = y), (sort gv1 = gv1), (sort gv1 = insort n y), (sort gv1 = insort n gv1)
(sort gv1 = insort x y), (sort gv1 = insort x gv1), (insort n y = y), (insort n y = gv1), (insort n gv1 = y), (insort n gv1 = gv1), (insort x y = y), (insort x y = gv1), (insort x gv1 = y), (insort x gv1 = gv1)

Label: 0 (1)
(y = y), (y = gv1), (gv1 = y), (gv1 = gv1), (n = n), (n = x), (x = n), (x = x), (false = eqb n n), (false = eqb n x)
(false = eqb x n), (false = eqb x x), (false = less n n), (false = less n x), (false = less x n), (false = less x x), (true = eqb n n), (true = eqb n x), (true = eqb x n), (true = eqb x x)
(true = less n n), (true = less n x), (true = less x n), (true = less x x), (y <> y), (y <> gv1), (gv1 <> y), (gv1 <> gv1), (n <> n), (n <> x)
(x <> n), (x <> x), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x n), (less n n = eqb x x), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x n), (less n x = eqb x x)
(less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv1)
(None = Some n), (None = Some x), (count n y = n), (count n y = x), (count n gv1 = n), (count n gv1 = x), (count x y = n), (count x y = x), (count x gv1 = n), (count x gv1 = x)
(sort y = y), (sort y = gv1), (sort y = insort n y), (sort y = insort n gv1), (sort y = insort x y), (sort y = insort x gv1), (sort gv1 = y), (sort gv1 = gv1), (sort gv1 = insort n y), (sort gv1 = insort n gv1)
(sort gv1 = insort x y), (sort gv1 = insort x gv1), (insort n y = y), (insort n y = gv1), (insort n gv1 = y), (insort n gv1 = gv1), (insort x y = y), (insort x y = gv1), (insort x gv1 = y), (insort x gv1 = gv1)

Label: 1 (2)
(y = y), (n = n), (n = x), (n = gv0), (x = n), (x = x), (x = gv0), (gv0 = n), (gv0 = x), (gv0 = gv0)
(false = eqb n n), (false = eqb n x), (false = eqb n gv0), (false = eqb x n), (false = eqb x x), (false = eqb x gv0), (false = eqb gv0 n), (false = eqb gv0 x), (false = eqb gv0 gv0), (false = less n n)
(false = less n x), (false = less n gv0), (false = less x n), (false = less x x), (false = less x gv0), (false = less gv0 n), (false = less gv0 x), (false = less gv0 gv0), (true = eqb n n), (true = eqb n x)
(true = eqb n gv0), (true = eqb x n), (true = eqb x x), (true = eqb x gv0), (true = eqb gv0 n), (true = eqb gv0 x), (true = eqb gv0 gv0), (true = less n n), (true = less n x), (true = less n gv0)
(true = less x n), (true = less x x), (true = less x gv0), (true = less gv0 n), (true = less gv0 x), (true = less gv0 gv0), (y <> y), (n <> n), (n <> x), (n <> gv0)
(x <> n), (x <> x), (x <> gv0), (gv0 <> n), (gv0 <> x), (gv0 <> gv0), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb n gv0), (less n n = eqb x n)
(less n n = eqb x x), (less n n = eqb x gv0), (less n n = eqb gv0 n), (less n n = eqb gv0 x), (less n n = eqb gv0 gv0), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb n gv0), (less n x = eqb x n), (less n x = eqb x x)
(less n x = eqb x gv0), (less n x = eqb gv0 n), (less n x = eqb gv0 x), (less n x = eqb gv0 gv0), (less n gv0 = eqb n n), (less n gv0 = eqb n x), (less n gv0 = eqb n gv0), (less n gv0 = eqb x n), (less n gv0 = eqb x x), (less n gv0 = eqb x gv0)
(less n gv0 = eqb gv0 n), (less n gv0 = eqb gv0 x), (less n gv0 = eqb gv0 gv0), (less x n = eqb n n), (less x n = eqb n x), (less x n = eqb n gv0), (less x n = eqb x n), (less x n = eqb x x), (less x n = eqb x gv0), (less x n = eqb gv0 n)
(less x n = eqb gv0 x), (less x n = eqb gv0 gv0), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb n gv0), (less x x = eqb x n), (less x x = eqb x x), (less x x = eqb x gv0), (less x x = eqb gv0 n), (less x x = eqb gv0 x)
(less x x = eqb gv0 gv0), (less x gv0 = eqb n n), (less x gv0 = eqb n x), (less x gv0 = eqb n gv0), (less x gv0 = eqb x n), (less x gv0 = eqb x x), (less x gv0 = eqb x gv0), (less x gv0 = eqb gv0 n), (less x gv0 = eqb gv0 x), (less x gv0 = eqb gv0 gv0)
(less gv0 n = eqb n n), (less gv0 n = eqb n x), (less gv0 n = eqb n gv0), (less gv0 n = eqb x n), (less gv0 n = eqb x x), (less gv0 n = eqb x gv0), (less gv0 n = eqb gv0 n), (less gv0 n = eqb gv0 x), (less gv0 n = eqb gv0 gv0), (less gv0 x = eqb n n)
(less gv0 x = eqb n x), (less gv0 x = eqb n gv0), (less gv0 x = eqb x n), (less gv0 x = eqb x x), (less gv0 x = eqb x gv0), (less gv0 x = eqb gv0 n), (less gv0 x = eqb gv0 x), (less gv0 x = eqb gv0 gv0), (less gv0 gv0 = eqb n n), (less gv0 gv0 = eqb n x)
(less gv0 gv0 = eqb n gv0), (less gv0 gv0 = eqb x n), (less gv0 gv0 = eqb x x), (less gv0 gv0 = eqb x gv0), (less gv0 gv0 = eqb gv0 n), (less gv0 gv0 = eqb gv0 x), (less gv0 gv0 = eqb gv0 gv0), (None = Some y), (None = Some n), (None = Some x)
(None = Some gv0), (count n y = n), (count n y = x), (count n y = gv0), (count x y = n), (count x y = x), (count x y = gv0), (count gv0 y = n), (count gv0 y = x), (count gv0 y = gv0)
(sort y = y), (sort y = insort n y), (sort y = insort x y), (sort y = insort gv0 y), (insort n y = y), (insort x y = y), (insort gv0 y = y)

Label: 1 (3)
(y = y), (n = n), (n = x), (n = gv0), (x = n), (x = x), (x = gv0), (gv0 = n), (gv0 = x), (gv0 = gv0)
(false = eqb n n), (false = eqb n x), (false = eqb n gv0), (false = eqb x n), (false = eqb x x), (false = eqb x gv0), (false = eqb gv0 n), (false = eqb gv0 x), (false = eqb gv0 gv0), (false = less n n)
(false = less n x), (false = less n gv0), (false = less x n), (false = less x x), (false = less x gv0), (false = less gv0 n), (false = less gv0 x), (false = less gv0 gv0), (true = eqb n n), (true = eqb n x)
(true = eqb n gv0), (true = eqb x n), (true = eqb x x), (true = eqb x gv0), (true = eqb gv0 n), (true = eqb gv0 x), (true = eqb gv0 gv0), (true = less n n), (true = less n x), (true = less n gv0)
(true = less x n), (true = less x x), (true = less x gv0), (true = less gv0 n), (true = less gv0 x), (true = less gv0 gv0), (y <> y), (n <> n), (n <> x), (n <> gv0)
(x <> n), (x <> x), (x <> gv0), (gv0 <> n), (gv0 <> x), (gv0 <> gv0), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb n gv0), (less n n = eqb x n)
(less n n = eqb x x), (less n n = eqb x gv0), (less n n = eqb gv0 n), (less n n = eqb gv0 x), (less n n = eqb gv0 gv0), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb n gv0), (less n x = eqb x n), (less n x = eqb x x)
(less n x = eqb x gv0), (less n x = eqb gv0 n), (less n x = eqb gv0 x), (less n x = eqb gv0 gv0), (less n gv0 = eqb n n), (less n gv0 = eqb n x), (less n gv0 = eqb n gv0), (less n gv0 = eqb x n), (less n gv0 = eqb x x), (less n gv0 = eqb x gv0)
(less n gv0 = eqb gv0 n), (less n gv0 = eqb gv0 x), (less n gv0 = eqb gv0 gv0), (less x n = eqb n n), (less x n = eqb n x), (less x n = eqb n gv0), (less x n = eqb x n), (less x n = eqb x x), (less x n = eqb x gv0), (less x n = eqb gv0 n)
(less x n = eqb gv0 x), (less x n = eqb gv0 gv0), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb n gv0), (less x x = eqb x n), (less x x = eqb x x), (less x x = eqb x gv0), (less x x = eqb gv0 n), (less x x = eqb gv0 x)
(less x x = eqb gv0 gv0), (less x gv0 = eqb n n), (less x gv0 = eqb n x), (less x gv0 = eqb n gv0), (less x gv0 = eqb x n), (less x gv0 = eqb x x), (less x gv0 = eqb x gv0), (less x gv0 = eqb gv0 n), (less x gv0 = eqb gv0 x), (less x gv0 = eqb gv0 gv0)
(less gv0 n = eqb n n), (less gv0 n = eqb n x), (less gv0 n = eqb n gv0), (less gv0 n = eqb x n), (less gv0 n = eqb x x), (less gv0 n = eqb x gv0), (less gv0 n = eqb gv0 n), (less gv0 n = eqb gv0 x), (less gv0 n = eqb gv0 gv0), (less gv0 x = eqb n n)
(less gv0 x = eqb n x), (less gv0 x = eqb n gv0), (less gv0 x = eqb x n), (less gv0 x = eqb x x), (less gv0 x = eqb x gv0), (less gv0 x = eqb gv0 n), (less gv0 x = eqb gv0 x), (less gv0 x = eqb gv0 gv0), (less gv0 gv0 = eqb n n), (less gv0 gv0 = eqb n x)
(less gv0 gv0 = eqb n gv0), (less gv0 gv0 = eqb x n), (less gv0 gv0 = eqb x x), (less gv0 gv0 = eqb x gv0), (less gv0 gv0 = eqb gv0 n), (less gv0 gv0 = eqb gv0 x), (less gv0 gv0 = eqb gv0 gv0), (None = Some y), (None = Some n), (None = Some x)
(None = Some gv0), (count n y = n), (count n y = x), (count n y = gv0), (count x y = n), (count x y = x), (count x y = gv0), (count gv0 y = n), (count gv0 y = x), (count gv0 y = gv0)
(sort y = y), (sort y = insort n y), (sort y = insort x y), (sort y = insort gv0 y), (insort n y = y), (insort x y = y), (insort gv0 y = y)

Label: 2 (4)
(y = y), (y = gv2), (gv2 = y), (gv2 = gv2), (n = n), (n = x), (x = n), (x = x), (false = eqb n n), (false = eqb n x)
(false = eqb x n), (false = eqb x x), (false = less n n), (false = less n x), (false = less x n), (false = less x x), (true = eqb n n), (true = eqb n x), (true = eqb x n), (true = eqb x x)
(true = less n n), (true = less n x), (true = less x n), (true = less x x), (y <> y), (y <> gv2), (gv2 <> y), (gv2 <> gv2), (n <> n), (n <> x)
(x <> n), (x <> x), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x n), (less n n = eqb x x), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x n), (less n x = eqb x x)
(less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv2)
(None = Some n), (None = Some x), (count n y = n), (count n y = x), (count n gv2 = n), (count n gv2 = x), (count x y = n), (count x y = x), (count x gv2 = n), (count x gv2 = x)
(sort y = y), (sort y = gv2), (sort y = insort n y), (sort y = insort n gv2), (sort y = insort x y), (sort y = insort x gv2), (sort gv2 = y), (sort gv2 = gv2), (sort gv2 = insort n y), (sort gv2 = insort n gv2)
(sort gv2 = insort x y), (sort gv2 = insort x gv2), (insort n y = y), (insort n y = gv2), (insort n gv2 = y), (insort n gv2 = gv2), (insort x y = y), (insort x y = gv2), (insort x gv2 = y), (insort x gv2 = gv2)

Label: 2 (5)
(y = y), (y = gv2), (gv2 = y), (gv2 = gv2), (n = n), (n = x), (x = n), (x = x), (false = eqb n n), (false = eqb n x)
(false = eqb x n), (false = eqb x x), (false = less n n), (false = less n x), (false = less x n), (false = less x x), (true = eqb n n), (true = eqb n x), (true = eqb x n), (true = eqb x x)
(true = less n n), (true = less n x), (true = less x n), (true = less x x), (y <> y), (y <> gv2), (gv2 <> y), (gv2 <> gv2), (n <> n), (n <> x)
(x <> n), (x <> x), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x n), (less n n = eqb x x), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x n), (less n x = eqb x x)
(less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv2)
(None = Some n), (None = Some x), (count n y = n), (count n y = x), (count n gv2 = n), (count n gv2 = x), (count x y = n), (count x y = x), (count x gv2 = n), (count x gv2 = x)
(sort y = y), (sort y = gv2), (sort y = insort n y), (sort y = insort n gv2), (sort y = insort x y), (sort y = insort x gv2), (sort gv2 = y), (sort gv2 = gv2), (sort gv2 = insort n y), (sort gv2 = insort n gv2)
(sort gv2 = insort x y), (sort gv2 = insort x gv2), (insort n y = y), (insort n y = gv2), (insort n gv2 = y), (insort n gv2 = gv2), (insort x y = y), (insort x y = gv2), (insort x gv2 = y), (insort x gv2 = gv2)

Label: 3 (6)
(y = y), (gv3 = gv3), (gv3 = n), (gv3 = x), (n = gv3), (n = n), (n = x), (x = gv3), (x = n), (x = x)
(false = eqb gv3 gv3), (false = eqb gv3 n), (false = eqb gv3 x), (false = eqb n gv3), (false = eqb n n), (false = eqb n x), (false = eqb x gv3), (false = eqb x n), (false = eqb x x), (false = less gv3 gv3)
(false = less gv3 n), (false = less gv3 x), (false = less n gv3), (false = less n n), (false = less n x), (false = less x gv3), (false = less x n), (false = less x x), (true = eqb gv3 gv3), (true = eqb gv3 n)
(true = eqb gv3 x), (true = eqb n gv3), (true = eqb n n), (true = eqb n x), (true = eqb x gv3), (true = eqb x n), (true = eqb x x), (true = less gv3 gv3), (true = less gv3 n), (true = less gv3 x)
(true = less n gv3), (true = less n n), (true = less n x), (true = less x gv3), (true = less x n), (true = less x x), (y <> y), (gv3 <> gv3), (gv3 <> n), (gv3 <> x)
(n <> gv3), (n <> n), (n <> x), (x <> gv3), (x <> n), (x <> x), (less gv3 gv3 = eqb gv3 gv3), (less gv3 gv3 = eqb gv3 n), (less gv3 gv3 = eqb gv3 x), (less gv3 gv3 = eqb n gv3)
(less gv3 gv3 = eqb n n), (less gv3 gv3 = eqb n x), (less gv3 gv3 = eqb x gv3), (less gv3 gv3 = eqb x n), (less gv3 gv3 = eqb x x), (less gv3 n = eqb gv3 gv3), (less gv3 n = eqb gv3 n), (less gv3 n = eqb gv3 x), (less gv3 n = eqb n gv3), (less gv3 n = eqb n n)
(less gv3 n = eqb n x), (less gv3 n = eqb x gv3), (less gv3 n = eqb x n), (less gv3 n = eqb x x), (less gv3 x = eqb gv3 gv3), (less gv3 x = eqb gv3 n), (less gv3 x = eqb gv3 x), (less gv3 x = eqb n gv3), (less gv3 x = eqb n n), (less gv3 x = eqb n x)
(less gv3 x = eqb x gv3), (less gv3 x = eqb x n), (less gv3 x = eqb x x), (less n gv3 = eqb gv3 gv3), (less n gv3 = eqb gv3 n), (less n gv3 = eqb gv3 x), (less n gv3 = eqb n gv3), (less n gv3 = eqb n n), (less n gv3 = eqb n x), (less n gv3 = eqb x gv3)
(less n gv3 = eqb x n), (less n gv3 = eqb x x), (less n n = eqb gv3 gv3), (less n n = eqb gv3 n), (less n n = eqb gv3 x), (less n n = eqb n gv3), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x gv3), (less n n = eqb x n)
(less n n = eqb x x), (less n x = eqb gv3 gv3), (less n x = eqb gv3 n), (less n x = eqb gv3 x), (less n x = eqb n gv3), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x gv3), (less n x = eqb x n), (less n x = eqb x x)
(less x gv3 = eqb gv3 gv3), (less x gv3 = eqb gv3 n), (less x gv3 = eqb gv3 x), (less x gv3 = eqb n gv3), (less x gv3 = eqb n n), (less x gv3 = eqb n x), (less x gv3 = eqb x gv3), (less x gv3 = eqb x n), (less x gv3 = eqb x x), (less x n = eqb gv3 gv3)
(less x n = eqb gv3 n), (less x n = eqb gv3 x), (less x n = eqb n gv3), (less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x gv3), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb gv3 gv3), (less x x = eqb gv3 n)
(less x x = eqb gv3 x), (less x x = eqb n gv3), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x gv3), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv3), (None = Some n)
(None = Some x), (count gv3 y = gv3), (count gv3 y = n), (count gv3 y = x), (count n y = gv3), (count n y = n), (count n y = x), (count x y = gv3), (count x y = n), (count x y = x)
(sort y = y), (sort y = insort gv3 y), (sort y = insort n y), (sort y = insort x y), (insort gv3 y = y), (insort n y = y), (insort x y = y)

Label: 3 (7)
(y = y), (gv3 = gv3), (gv3 = n), (gv3 = x), (n = gv3), (n = n), (n = x), (x = gv3), (x = n), (x = x)
(false = eqb gv3 gv3), (false = eqb gv3 n), (false = eqb gv3 x), (false = eqb n gv3), (false = eqb n n), (false = eqb n x), (false = eqb x gv3), (false = eqb x n), (false = eqb x x), (false = less gv3 gv3)
(false = less gv3 n), (false = less gv3 x), (false = less n gv3), (false = less n n), (false = less n x), (false = less x gv3), (false = less x n), (false = less x x), (true = eqb gv3 gv3), (true = eqb gv3 n)
(true = eqb gv3 x), (true = eqb n gv3), (true = eqb n n), (true = eqb n x), (true = eqb x gv3), (true = eqb x n), (true = eqb x x), (true = less gv3 gv3), (true = less gv3 n), (true = less gv3 x)
(true = less n gv3), (true = less n n), (true = less n x), (true = less x gv3), (true = less x n), (true = less x x), (y <> y), (gv3 <> gv3), (gv3 <> n), (gv3 <> x)
(n <> gv3), (n <> n), (n <> x), (x <> gv3), (x <> n), (x <> x), (less gv3 gv3 = eqb gv3 gv3), (less gv3 gv3 = eqb gv3 n), (less gv3 gv3 = eqb gv3 x), (less gv3 gv3 = eqb n gv3)
(less gv3 gv3 = eqb n n), (less gv3 gv3 = eqb n x), (less gv3 gv3 = eqb x gv3), (less gv3 gv3 = eqb x n), (less gv3 gv3 = eqb x x), (less gv3 n = eqb gv3 gv3), (less gv3 n = eqb gv3 n), (less gv3 n = eqb gv3 x), (less gv3 n = eqb n gv3), (less gv3 n = eqb n n)
(less gv3 n = eqb n x), (less gv3 n = eqb x gv3), (less gv3 n = eqb x n), (less gv3 n = eqb x x), (less gv3 x = eqb gv3 gv3), (less gv3 x = eqb gv3 n), (less gv3 x = eqb gv3 x), (less gv3 x = eqb n gv3), (less gv3 x = eqb n n), (less gv3 x = eqb n x)
(less gv3 x = eqb x gv3), (less gv3 x = eqb x n), (less gv3 x = eqb x x), (less n gv3 = eqb gv3 gv3), (less n gv3 = eqb gv3 n), (less n gv3 = eqb gv3 x), (less n gv3 = eqb n gv3), (less n gv3 = eqb n n), (less n gv3 = eqb n x), (less n gv3 = eqb x gv3)
(less n gv3 = eqb x n), (less n gv3 = eqb x x), (less n n = eqb gv3 gv3), (less n n = eqb gv3 n), (less n n = eqb gv3 x), (less n n = eqb n gv3), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x gv3), (less n n = eqb x n)
(less n n = eqb x x), (less n x = eqb gv3 gv3), (less n x = eqb gv3 n), (less n x = eqb gv3 x), (less n x = eqb n gv3), (less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x gv3), (less n x = eqb x n), (less n x = eqb x x)
(less x gv3 = eqb gv3 gv3), (less x gv3 = eqb gv3 n), (less x gv3 = eqb gv3 x), (less x gv3 = eqb n gv3), (less x gv3 = eqb n n), (less x gv3 = eqb n x), (less x gv3 = eqb x gv3), (less x gv3 = eqb x n), (less x gv3 = eqb x x), (less x n = eqb gv3 gv3)
(less x n = eqb gv3 n), (less x n = eqb gv3 x), (less x n = eqb n gv3), (less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x gv3), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb gv3 gv3), (less x x = eqb gv3 n)
(less x x = eqb gv3 x), (less x x = eqb n gv3), (less x x = eqb n n), (less x x = eqb n x), (less x x = eqb x gv3), (less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some gv3), (None = Some n)
(None = Some x), (count gv3 y = gv3), (count gv3 y = n), (count gv3 y = x), (count n y = gv3), (count n y = n), (count n y = x), (count x y = gv3), (count x y = n), (count x y = x)
(sort y = y), (sort y = insort gv3 y), (sort y = insort n y), (sort y = insort x y), (insort gv3 y = y), (insort n y = y), (insort x y = y)

Label: 4 (8)
(y = y), (n = n), (n = x), (x = n), (x = x), (false = eqb n n), (false = eqb n x), (false = eqb x n), (false = eqb x x), (false = less n n)
(false = less n x), (false = less x n), (false = less x x), (true = eqb n n), (true = eqb n x), (true = eqb x n), (true = eqb x x), (true = less n n), (true = less n x), (true = less x n)
(true = less x x), (y <> y), (n <> n), (n <> x), (x <> n), (x <> x), (less n n = eqb n n), (less n n = eqb n x), (less n n = eqb x n), (less n n = eqb x x)
(less n x = eqb n n), (less n x = eqb n x), (less n x = eqb x n), (less n x = eqb x x), (less x n = eqb n n), (less x n = eqb n x), (less x n = eqb x n), (less x n = eqb x x), (less x x = eqb n n), (less x x = eqb n x)
(less x x = eqb x n), (less x x = eqb x x), (None = Some y), (None = Some n), (None = Some x), (count n y = n), (count n y = x), (count x y = n), (count x y = x), (sort y = y)
(sort y = insort n y), (sort y = insort x y), (insort n y = y), (insort x y = y)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 462.258 seconds


Label: 0 (0)
(sort gv1 = insort n y), (insort n y = gv1)

Label: 0 (1)
(false = eqb n x), (false = eqb x n), (n <> x), (x <> n), (less n n = eqb n x), (less n n = eqb x n), (less x x = eqb n x), (less x x = eqb x n)

Label: 1 (2)
(count x y = gv0)

Label: 1 (3)
(false = eqb n x), (false = eqb x n), (n <> x), (x <> n), (less n n = eqb n x), (less n n = eqb x n), (less x x = eqb n x), (less x x = eqb x n), (less gv0 gv0 = eqb n x), (less gv0 gv0 = eqb x n)
(count x y = gv0)

Label: 2 (4)
(false = eqb n x), (false = eqb x n), (n <> x), (x <> n), (less n n = eqb n x), (less n n = eqb x n), (less x x = eqb n x), (less x x = eqb x n)

Label: 2 (5)

Label: 3 (6)
(false = eqb n x), (false = eqb x n), (n <> x), (x <> n), (less gv3 gv3 = eqb n x), (less gv3 gv3 = eqb x n), (less n n = eqb n x), (less n n = eqb x n), (less x x = eqb n x), (less x x = eqb x n)

Label: 3 (7)
(count x y = gv3)

Label: 4 (8)
(false = eqb n x), (false = eqb x n), (n <> x), (x <> n), (less n n = eqb n x), (less n n = eqb x n), (less x x = eqb n x), (less x x = eqb x n)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 619.863 seconds


(insort n (sort y) = gv1)
 - (insort n (sort y) = gv1)
 - (sort gv1 = insort n y)
 - (insort n y = gv1)

(count x (sort y) = gv3)
 - (count x (sort y) = gv3)
 - (count x y = gv3)

(count x gv2 = count x y)
 - (count x gv2 = count x y)

(count x (insort n (sort y)) = gv0)
 - (count x (insort n (sort y)) = gv0)
 - (count x y = gv0)

(eqb x n = false)
 - (eqb x n = false)
 - (false = eqb n x)
 - (n <> x)
 - (x <> n)
 - (less n n = eqb n x)
 - (less n n = eqb x n)
 - (less x x = eqb n x)
 - (less x x = eqb x n)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 619.864 seconds

Number of Result Pairs Returned: 25

(eqb x n = false ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> false = eqb n x)
(false = eqb n x ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> n <> x)
(n <> x -> count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> x <> n)
(x <> n -> count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> less n n = eqb n x)
(less n n = eqb n x ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> less n n = eqb x n)
(less n n = eqb x n ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> less x x = eqb n x)
(less x x = eqb n x ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false -> less x x = eqb x n)
(less x x = eqb x n ->  count x gv2 = count x y -> count x (insort n gv2) = count x y)

(eqb x n = false ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> false = eqb n x)
(false = eqb n x ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> n <> x)
(n <> x -> count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> x <> n)
(x <> n -> count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> less n n = eqb n x)
(less n n = eqb n x ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> less n n = eqb x n)
(less n n = eqb x n ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> less x x = eqb n x)
(less x x = eqb n x ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> less x x = eqb x n)
(less x x = eqb x n ->  count x (sort y) = gv3 -> count x (insort n (sort y)) = gv3)

(count x (sort y) = gv3 -> count x y = gv3)
(count x y = gv3 -> eqb x n = false -> count x (insort n (sort y)) = gv3)

(eqb x n = false -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> false = eqb n x)
(false = eqb n x -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> n <> x)
(n <> x -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> x <> n)
(x <> n -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> less n n = eqb n x)
(less n n = eqb n x -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> less n n = eqb x n)
(less n n = eqb x n -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> less x x = eqb n x)
(less x x = eqb n x -> count x (insort n (sort y)) = count x y)

(eqb x n = false -> less x x = eqb x n)
(less x x = eqb x n -> count x (insort n (sort y)) = count x y)
