Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (sorted nil = true -> sorted (insort y nil) = true)
 -- (less y n = false)
 -- (sorted (cons n nil) = true)

----------------------------------
Goal: (leq n y = true)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : bool = true
gv0 : bool = (leq n y)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 22.323 seconds

Label: Generalization #0
Assumptions: 
 -- (leq n y = gv0)
 -- (less y n = false)

----------------------------------
Goal: (gv0 = true)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (less y n = false)
 -- (sorted (cons n nil) = gv1)

----------------------------------
Goal: (leq n y = gv1)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (less y n = false)

----------------------------------
Goal: (leq n y = true)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 23.069 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
less : (Nat -> Nat -> bool)
leq : (Nat -> Nat -> bool)
insort : (Nat -> Lst -> Lst)
sorted : (Lst -> bool)
sort : (Lst -> Lst)

Label: 0 (0)
Abducted Assumption: (leq n y = gv0)
Positive Examples:
   [gv0 := true; n := (succ zero); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := true; n := (succ zero); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; n := zero; y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [gv0 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv0 := true; n := (succ (succ zero)); y := (succ (succ (succ zero)))]
   etc ...

Negative Examples:
   [gv0 := false; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := false; n := (succ zero); y := (succ (succ (succ (succ (succ zero)))))]
   [gv0 := false; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := false; n := (succ zero); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv0 := false; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [gv0 := false; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv0 := false; n := (succ zero); y := (succ (succ (succ (succ zero))))]
   [gv0 := false; n := (succ (succ zero)); y := (succ (succ (succ (succ zero))))]
   [gv0 := false; n := (succ (succ zero)); y := (succ (succ (succ zero)))]
   [gv0 := false; n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   etc ...


Label: 1 (1)
Abducted Assumption: (less y n = false)
Positive Examples:
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ zero)))]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := zero; y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   etc ...

Negative Examples:
   [gv1 := true; n := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ (succ zero)))]
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ zero))))]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ zero)))]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ zero))]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := (succ zero)]
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := zero]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := zero]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ zero)]
   etc ...


Label: 1 (2)
Abducted Assumption: (sorted (cons n nil) = gv1)
Positive Examples:
   [gv1 := true; n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv1 := true; n := (succ (succ (succ zero))); y := (succ (succ (succ zero)))]
   [gv1 := true; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := zero; y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := true; n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   etc ...

Negative Examples:
   [gv1 := false; n := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := false; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [gv1 := false; n := (succ (succ (succ zero))); y := (succ (succ (succ (succ zero))))]
   [gv1 := false; n := (succ zero); y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [gv1 := false; n := zero; y := (succ (succ (succ (succ (succ zero)))))]
   [gv1 := false; n := (succ zero); y := (succ (succ (succ (succ zero))))]
   [gv1 := false; n := (succ (succ zero)); y := (succ (succ (succ (succ zero))))]
   etc ...


Label: 2 (3)
Abducted Assumption: (less y n = false)
Positive Examples:
   [n := (succ (succ zero)); y := (succ (succ (succ (succ (succ (succ zero))))))]
   [n := zero; y := (succ (succ (succ (succ (succ (succ zero))))))]
   [n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ (succ zero))))]
   [n := (succ (succ zero)); y := (succ (succ (succ (succ (succ zero)))))]
   [n := (succ zero); y := (succ (succ (succ (succ (succ zero)))))]
   [n := (succ (succ zero)); y := (succ (succ (succ (succ zero))))]
   [n := zero; y := (succ (succ (succ (succ (succ zero)))))]
   [n := zero; y := (succ (succ (succ (succ zero))))]
   [n := (succ zero); y := (succ (succ (succ (succ zero))))]
   [n := (succ (succ (succ zero))); y := (succ (succ (succ (succ (succ zero)))))]
   etc ...

Negative Examples:
   [n := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ zero)]
   [n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ (succ zero))))]
   [n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ (succ zero)))]
   [n := (succ (succ (succ (succ (succ (succ zero)))))); y := (succ (succ zero))]
   [n := (succ (succ (succ (succ (succ zero))))); y := (succ (succ zero))]
   [n := (succ (succ (succ (succ (succ (succ zero)))))); y := zero]
   [n := (succ (succ (succ (succ zero)))); y := (succ (succ zero))]
   [n := (succ (succ (succ (succ (succ zero))))); y := zero]
   [n := (succ (succ (succ (succ zero)))); y := (succ (succ (succ zero)))]
   [n := (succ (succ (succ (succ zero)))); y := (succ zero)]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 23.896 seconds


Label: 0 (0)
(false = gv0), (true = gv0), (n = n), (n = y), (y = n), (y = y), (gv0 = gv0), (false = leq n n), (false = leq n y), (false = leq y n)
(false = leq y y), (false = less n n), (false = less n y), (false = less y n), (false = less y y), (true = leq n n), (true = leq n y), (true = leq y n), (true = leq y y), (true = less n n)
(true = less n y), (true = less y n), (true = less y y), (false <> gv0), (true <> gv0), (n <> n), (n <> y), (y <> n), (y <> y), (gv0 <> gv0)
(leq n n = gv0), (leq n y = gv0), (leq y n = gv0), (leq y y = gv0), (less n n = gv0), (less n n = leq n n), (less n n = leq n y), (less n n = leq y n), (less n n = leq y y), (less n y = gv0)
(less n y = leq n n), (less n y = leq n y), (less n y = leq y n), (less n y = leq y y), (less y n = gv0), (less y n = leq n n), (less y n = leq n y), (less y n = leq y n), (less y n = leq y y), (less y y = gv0)
(less y y = leq n n), (less y y = leq n y), (less y y = leq y n), (less y y = leq y y), (None = Some gv0), (None = Some n), (None = Some y)

Label: 1 (1)
(false = gv1), (true = gv1), (gv1 = gv1), (y = y), (y = n), (n = y), (n = n), (false = leq y y), (false = leq y n), (false = leq n y)
(false = leq n n), (false = less y y), (false = less y n), (false = less n y), (false = less n n), (true = leq y y), (true = leq y n), (true = leq n y), (true = leq n n), (true = less y y)
(true = less y n), (true = less n y), (true = less n n), (false <> gv1), (true <> gv1), (gv1 <> gv1), (y <> y), (y <> n), (n <> y), (n <> n)
(leq y y = gv1), (leq y n = gv1), (leq n y = gv1), (leq n n = gv1), (less y y = gv1), (less y y = leq y y), (less y y = leq y n), (less y y = leq n y), (less y y = leq n n), (less y n = gv1)
(less y n = leq y y), (less y n = leq y n), (less y n = leq n y), (less y n = leq n n), (less n y = gv1), (less n y = leq y y), (less n y = leq y n), (less n y = leq n y), (less n y = leq n n), (less n n = gv1)
(less n n = leq y y), (less n n = leq y n), (less n n = leq n y), (less n n = leq n n), (None = Some gv1), (None = Some y), (None = Some n)

Label: 1 (2)
(false = gv1), (true = gv1), (gv1 = gv1), (y = y), (y = n), (n = y), (n = n), (false = leq y y), (false = leq y n), (false = leq n y)
(false = leq n n), (false = less y y), (false = less y n), (false = less n y), (false = less n n), (true = leq y y), (true = leq y n), (true = leq n y), (true = leq n n), (true = less y y)
(true = less y n), (true = less n y), (true = less n n), (false <> gv1), (true <> gv1), (gv1 <> gv1), (y <> y), (y <> n), (n <> y), (n <> n)
(leq y y = gv1), (leq y n = gv1), (leq n y = gv1), (leq n n = gv1), (less y y = gv1), (less y y = leq y y), (less y y = leq y n), (less y y = leq n y), (less y y = leq n n), (less y n = gv1)
(less y n = leq y y), (less y n = leq y n), (less y n = leq n y), (less y n = leq n n), (less n y = gv1), (less n y = leq y y), (less n y = leq y n), (less n y = leq n y), (less n y = leq n n), (less n n = gv1)
(less n n = leq y y), (less n n = leq y n), (less n n = leq n y), (less n n = leq n n), (None = Some gv1), (None = Some y), (None = Some n)

Label: 2 (3)
(y = y), (y = n), (n = y), (n = n), (false = leq y y), (false = leq y n), (false = leq n y), (false = leq n n), (false = less y y), (false = less y n)
(false = less n y), (false = less n n), (true = leq y y), (true = leq y n), (true = leq n y), (true = leq n n), (true = less y y), (true = less y n), (true = less n y), (true = less n n)
(y <> y), (y <> n), (n <> y), (n <> n), (less y y = leq y y), (less y y = leq y n), (less y y = leq n y), (less y y = leq n n), (less y n = leq y y), (less y n = leq y n)
(less y n = leq n y), (less y n = leq n n), (less n y = leq y y), (less n y = leq y n), (less n y = leq n y), (less n y = leq n n), (less n n = leq y y), (less n n = leq y n), (less n n = leq n y), (less n n = leq n n)
(None = Some y), (None = Some n)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 99.447 seconds


Label: 0 (0)
(true = gv0), (false <> gv0), (leq n n = gv0), (leq n y = gv0), (leq y y = gv0)

Label: 1 (1)
(false = less y n), (true = leq n y), (leq n y = gv1)

Label: 1 (2)
(true = gv1), (false <> gv1), (leq y y = gv1), (leq n y = gv1), (leq n n = gv1)

Label: 2 (3)
(false = less y n), (true = leq n y)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 139.451 seconds


(leq n y = gv0)
 - (leq n y = gv0)
 - (true = gv0)
 - (false <> gv0)
 - (leq n n = gv0)
 - (leq y y = gv0)

(less y n = false)
 - (less y n = false)
 - (true = leq n y)

(sorted (cons n nil) = gv1)
 - (sorted (cons n nil) = gv1)
 - (false <> gv1)
 - (leq y y = gv1)
 - (leq n y = gv1)
 - (leq n n = gv1)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 139.451 seconds

Number of Result Pairs Returned: 6

(less y n = false -> sorted (cons n nil) = gv1 -> leq n y = gv1)

(less y n = false -> true = leq n y)
(true = leq n y -> sorted (cons n nil) = gv1 -> leq n y = gv1)

(sorted (cons n nil) = gv1 -> false <> gv1)
(false <> gv1 -> less y n = false -> leq n y = gv1)

(sorted (cons n nil) = gv1 -> leq y y = gv1)
(leq y y = gv1 -> less y n = false -> leq n y = gv1)

(sorted (cons n nil) = gv1 -> leq n n = gv1)
(leq n n = gv1 -> less y n = false -> leq n y = gv1)

(less y n = false -> leq n y = true)
