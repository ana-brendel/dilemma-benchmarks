Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (rev (rev x) = x)

----------------------------------
Goal: (rev (append (rev x) (Cons n Nil)) = Cons n x)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv5 : lst = (Cons n x)
gv0 : lst = (rev (append (rev x) (Cons n Nil)))
gv3 : lst = (Cons n Nil)
gv4 : lst = Nil
gv2 : lst = (rev x)
gv1 : lst = (append (rev x) (Cons n Nil))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 28.37 seconds

Label: Generalization #0
Assumptions: 
 -- (append (rev x) (Cons n Nil) = gv1)

----------------------------------
Goal: (rev gv1 = Cons n x)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (rev gv2 = x)

----------------------------------
Goal: (rev (append gv2 (Cons n Nil)) = Cons n x)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (Nil = gv4)

----------------------------------
Goal: (rev (append (rev x) (Cons n gv4)) = Cons n x)
Case: 3

Label: Generalization #3
Assumptions: 
 -- (Cons n Nil = gv3)

----------------------------------
Goal: (rev (append (rev x) gv3) = Cons n x)
Case: 3

Label: Generalization #4
Assumptions: 
 -- (rev (append (rev x) (Cons n Nil)) = gv0)

----------------------------------
Goal: (gv0 = Cons n x)
Case: 3

Label: Generalization #5
Assumptions: 
 -- (Cons n x = gv5)

----------------------------------
Goal: (rev (append (rev x) (Cons n Nil)) = gv5)
Case: 3

Label: Generalization #6
Assumptions: 
 -- (rev (rev x) = x)

----------------------------------
Goal: (rev (append (rev x) (Cons n Nil)) = Cons n x)
Case: 1



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 29.934 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
lst : Set
append : (lst -> lst -> lst)
rev : (lst -> lst)

Label: 0 (0)
Abducted Assumption: (append (rev x) (Cons n Nil) = gv1)
Positive Examples:
   [gv1 := (Cons 0 (Cons 1 Nil)); n := 1; x := (Cons 0 Nil)]
   [gv1 := (Cons 1 (Cons 3 Nil)); n := 3; x := (Cons 1 Nil)]
   [gv1 := (Cons 0 (Cons 0 Nil)); n := 0; x := (Cons 0 Nil)]
   [gv1 := (Cons 1 (Cons 6 Nil)); n := 6; x := (Cons 1 Nil)]
   [gv1 := (Cons 0 (Cons 0 (Cons 0 Nil))); n := 0; x := (Cons 0 (Cons 0 Nil))]
   [gv1 := (Cons 0 (Cons 3 Nil)); n := 3; x := (Cons 0 Nil)]
   [gv1 := (Cons 2 (Cons 2 Nil)); n := 2; x := (Cons 2 Nil)]
   [gv1 := (Cons 6 Nil); n := 6; x := Nil]
   [gv1 := (Cons 2 (Cons 0 Nil)); n := 0; x := (Cons 2 Nil)]
   [gv1 := (Cons 2 (Cons 1 Nil)); n := 1; x := (Cons 2 Nil)]
   etc ...

Negative Examples:
   [gv1 := (Cons 1 (Cons 0 (Cons 1 (Cons 5 Nil)))); n := 4; x := (Cons 1 (Cons 5 Nil))]
   [gv1 := (Cons 1 Nil); n := 2; x := (Cons 2 (Cons 0 Nil))]
   [gv1 := (Cons 3 (Cons 0 (Cons 2 Nil))); n := 2; x := (Cons 1 (Cons 3 (Cons 3 Nil)))]
   [gv1 := Nil; n := 1; x := (Cons 0 (Cons 2 (Cons 2 Nil)))]
   [gv1 := (Cons 0 (Cons 1 (Cons 4 (Cons 2 (Cons 5 Nil))))); n := 1; x := Nil]
   [gv1 := (Cons 0 (Cons 0 (Cons 3 (Cons 4 Nil)))); n := 0; x := Nil]
   [gv1 := (Cons 3 Nil); n := 0; x := (Cons 2 (Cons 2 Nil))]
   [gv1 := (Cons 0 (Cons 1 Nil)); n := 2; x := (Cons 0 (Cons 2 Nil))]
   [gv1 := (Cons 4 (Cons 2 (Cons 2 Nil))); n := 3; x := (Cons 3 (Cons 3 Nil))]
   [gv1 := (Cons 3 Nil); n := 3; x := (Cons 0 (Cons 1 (Cons 0 Nil)))]
   etc ...


Label: 1 (1)
Abducted Assumption: (rev gv2 = x)
Positive Examples:
   [gv2 := (Cons 1 (Cons 3 Nil)); n := 4; x := (Cons 3 (Cons 1 Nil))]
   [gv2 := (Cons 4 Nil); n := 5; x := (Cons 4 Nil)]
   [gv2 := (Cons 2 (Cons 1 Nil)); n := 1; x := (Cons 1 (Cons 2 Nil))]
   [gv2 := (Cons 1 Nil); n := 2; x := (Cons 1 Nil)]
   [gv2 := (Cons 3 Nil); n := 5; x := (Cons 3 Nil)]
   [gv2 := (Cons 1 (Cons 1 Nil)); n := 1; x := (Cons 1 (Cons 1 Nil))]
   [gv2 := (Cons 0 (Cons 0 Nil)); n := 1; x := (Cons 0 (Cons 0 Nil))]
   [gv2 := (Cons 5 Nil); n := 2; x := (Cons 5 Nil)]
   [gv2 := (Cons 3 Nil); n := 0; x := (Cons 3 Nil)]
   [gv2 := (Cons 3 Nil); n := 3; x := (Cons 3 Nil)]
   etc ...

Negative Examples:
   [gv2 := (Cons 0 Nil); n := 1; x := (Cons 2 (Cons 1 Nil))]
   [gv2 := (Cons 1 Nil); n := 2; x := (Cons 0 (Cons 2 Nil))]
   [gv2 := Nil; n := 6; x := (Cons 1 (Cons 1 Nil))]
   [gv2 := (Cons 2 Nil); n := 6; x := (Cons 4 Nil)]
   [gv2 := (Cons 0 (Cons 4 (Cons 0 Nil))); n := 0; x := (Cons 1 (Cons 1 (Cons 2 (Cons 2 Nil))))]
   [gv2 := (Cons 2 (Cons 5 (Cons 0 (Cons 5 (Cons 1 Nil))))); n := 2; x := (Cons 4 (Cons 2 Nil))]
   [gv2 := (Cons 0 Nil); n := 1; x := (Cons 3 (Cons 0 Nil))]
   [gv2 := (Cons 4 (Cons 3 (Cons 4 Nil))); n := 4; x := (Cons 1 (Cons 0 Nil))]
   [gv2 := (Cons 2 (Cons 0 Nil)); n := 5; x := (Cons 6 Nil)]
   [gv2 := Nil; n := 3; x := (Cons 3 (Cons 3 Nil))]
   etc ...


Label: 2 (2)
Abducted Assumption: (Nil = gv4)
Positive Examples:
   [gv4 := Nil; n := 4; x := (Cons 0 (Cons 1 Nil))]
   [gv4 := Nil; n := 2; x := (Cons 4 (Cons 5 Nil))]
   [gv4 := Nil; n := 4; x := (Cons 3 (Cons 6 (Cons 1 Nil)))]
   [gv4 := Nil; n := 3; x := (Cons 2 (Cons 1 (Cons 4 Nil)))]
   [gv4 := Nil; n := 3; x := (Cons 4 (Cons 2 (Cons 0 (Cons 0 Nil))))]
   [gv4 := Nil; n := 2; x := (Cons 5 (Cons 1 Nil))]
   [gv4 := Nil; n := 0; x := (Cons 4 (Cons 2 Nil))]
   [gv4 := Nil; n := 5; x := (Cons 0 (Cons 4 (Cons 1 Nil)))]
   [gv4 := Nil; n := 1; x := (Cons 0 (Cons 4 Nil))]
   [gv4 := Nil; n := 4; x := (Cons 5 (Cons 4 Nil))]
   etc ...

Negative Examples:
   [gv4 := (Cons 3 Nil); n := 1; x := (Cons 1 (Cons 2 (Cons 2 Nil)))]
   [gv4 := (Cons 2 Nil); n := 2; x := (Cons 0 (Cons 5 (Cons 1 Nil)))]
   [gv4 := (Cons 0 (Cons 2 Nil)); n := 1; x := (Cons 4 (Cons 3 Nil))]
   [gv4 := (Cons 1 (Cons 1 (Cons 3 (Cons 3 Nil)))); n := 2; x := Nil]
   [gv4 := (Cons 1 (Cons 3 (Cons 3 Nil))); n := 0; x := (Cons 0 (Cons 2 (Cons 3 Nil)))]
   [gv4 := (Cons 2 (Cons 5 (Cons 0 (Cons 4 Nil)))); n := 5; x := Nil]
   [gv4 := (Cons 4 (Cons 6 (Cons 4 Nil))); n := 5; x := Nil]
   [gv4 := (Cons 3 (Cons 2 Nil)); n := 3; x := (Cons 1 Nil)]
   [gv4 := (Cons 1 Nil); n := 1; x := (Cons 1 (Cons 0 Nil))]
   [gv4 := (Cons 4 Nil); n := 1; x := (Cons 0 (Cons 3 Nil))]
   etc ...


Label: 3 (3)
Abducted Assumption: (Cons n Nil = gv3)
Positive Examples:
   [gv3 := (Cons 6 Nil); n := 6; x := (Cons 4 Nil)]
   [gv3 := (Cons 1 Nil); n := 1; x := (Cons 0 (Cons 1 Nil))]
   [gv3 := (Cons 2 Nil); n := 2; x := (Cons 6 (Cons 0 Nil))]
   [gv3 := (Cons 0 Nil); n := 0; x := (Cons 0 (Cons 1 (Cons 4 (Cons 0 Nil))))]
   [gv3 := (Cons 0 Nil); n := 0; x := (Cons 3 (Cons 3 Nil))]
   [gv3 := (Cons 4 Nil); n := 4; x := (Cons 0 (Cons 3 (Cons 4 (Cons 2 Nil))))]
   [gv3 := (Cons 5 Nil); n := 5; x := (Cons 5 Nil)]
   [gv3 := (Cons 3 Nil); n := 3; x := (Cons 4 (Cons 5 (Cons 2 Nil)))]
   [gv3 := (Cons 2 Nil); n := 2; x := (Cons 2 (Cons 4 Nil))]
   [gv3 := (Cons 1 Nil); n := 1; x := (Cons 2 (Cons 2 (Cons 3 Nil)))]
   etc ...

Negative Examples:
   [gv3 := (Cons 6 (Cons 6 (Cons 4 (Cons 6 (Cons 5 (Cons 4 Nil)))))); n := 2; x := (Cons 4 (Cons 3 (Cons 3 (Cons 1 Nil))))]
   [gv3 := (Cons 4 Nil); n := 0; x := (Cons 1 Nil)]
   [gv3 := (Cons 4 (Cons 5 (Cons 1 (Cons 2 Nil)))); n := 5; x := (Cons 0 (Cons 0 Nil))]
   [gv3 := (Cons 2 (Cons 3 Nil)); n := 3; x := (Cons 3 Nil)]
   [gv3 := (Cons 2 (Cons 2 Nil)); n := 2; x := (Cons 2 (Cons 0 Nil))]
   [gv3 := (Cons 1 Nil); n := 3; x := (Cons 4 Nil)]
   [gv3 := (Cons 3 (Cons 2 (Cons 1 (Cons 5 (Cons 5 Nil))))); n := 0; x := Nil]
   [gv3 := (Cons 2 (Cons 4 (Cons 2 Nil))); n := 3; x := Nil]
   [gv3 := (Cons 3 (Cons 1 Nil)); n := 1; x := (Cons 0 (Cons 1 Nil))]
   [gv3 := Nil; n := 0; x := (Cons 1 (Cons 4 (Cons 5 (Cons 3 Nil))))]
   etc ...


Label: 4 (4)
Abducted Assumption: (rev (append (rev x) (Cons n Nil)) = gv0)
Positive Examples:
   [gv0 := (Cons 1 (Cons 1 Nil)); n := 1; x := (Cons 1 Nil)]
   [gv0 := (Cons 3 (Cons 0 Nil)); n := 3; x := (Cons 0 Nil)]
   [gv0 := (Cons 4 (Cons 1 Nil)); n := 4; x := (Cons 1 Nil)]
   [gv0 := (Cons 1 (Cons 0 Nil)); n := 1; x := (Cons 0 Nil)]
   [gv0 := (Cons 6 Nil); n := 6; x := Nil]
   [gv0 := (Cons 0 (Cons 2 Nil)); n := 0; x := (Cons 2 Nil)]
   [gv0 := (Cons 5 (Cons 0 Nil)); n := 5; x := (Cons 0 Nil)]
   [gv0 := (Cons 5 Nil); n := 5; x := Nil]
   [gv0 := (Cons 4 Nil); n := 4; x := Nil]
   [gv0 := (Cons 2 (Cons 1 Nil)); n := 2; x := (Cons 1 Nil)]
   etc ...

Negative Examples:
   [gv0 := Nil; n := 1; x := (Cons 6 (Cons 5 (Cons 6 (Cons 2 Nil))))]
   [gv0 := (Cons 5 (Cons 1 Nil)); n := 4; x := Nil]
   [gv0 := (Cons 1 (Cons 0 (Cons 1 Nil))); n := 0; x := (Cons 3 Nil)]
   [gv0 := (Cons 5 (Cons 0 Nil)); n := 1; x := (Cons 4 (Cons 2 Nil))]
   [gv0 := (Cons 3 Nil); n := 0; x := (Cons 2 (Cons 5 (Cons 3 (Cons 3 Nil))))]
   [gv0 := (Cons 2 Nil); n := 4; x := (Cons 1 (Cons 0 (Cons 0 (Cons 0 Nil))))]
   [gv0 := (Cons 1 (Cons 4 (Cons 4 Nil))); n := 3; x := Nil]
   [gv0 := (Cons 0 (Cons 3 (Cons 0 Nil))); n := 0; x := (Cons 0 Nil)]
   [gv0 := (Cons 2 (Cons 4 Nil)); n := 2; x := (Cons 4 (Cons 0 (Cons 3 (Cons 2 (Cons 2 Nil)))))]
   [gv0 := (Cons 4 (Cons 4 (Cons 2 (Cons 2 Nil)))); n := 6; x := (Cons 4 (Cons 1 Nil))]
   etc ...


Label: 5 (5)
Abducted Assumption: (Cons n x = gv5)
Positive Examples:
   [gv5 := (Cons 0 (Cons 2 Nil)); n := 0; x := (Cons 2 Nil)]
   [gv5 := (Cons 2 (Cons 1 Nil)); n := 2; x := (Cons 1 Nil)]
   [gv5 := (Cons 6 Nil); n := 6; x := Nil]
   [gv5 := (Cons 1 (Cons 1 Nil)); n := 1; x := (Cons 1 Nil)]
   [gv5 := (Cons 0 (Cons 0 Nil)); n := 0; x := (Cons 0 Nil)]
   [gv5 := (Cons 4 (Cons 4 Nil)); n := 4; x := (Cons 4 Nil)]
   [gv5 := (Cons 5 Nil); n := 5; x := Nil]
   [gv5 := (Cons 2 (Cons 0 Nil)); n := 2; x := (Cons 0 Nil)]
   [gv5 := (Cons 3 Nil); n := 3; x := Nil]
   [gv5 := (Cons 4 Nil); n := 4; x := Nil]
   etc ...

Negative Examples:
   [gv5 := (Cons 1 (Cons 3 (Cons 0 (Cons 2 Nil)))); n := 3; x := Nil]
   [gv5 := (Cons 0 (Cons 4 Nil)); n := 1; x := Nil]
   [gv5 := (Cons 0 (Cons 3 (Cons 2 Nil))); n := 3; x := (Cons 4 (Cons 1 Nil))]
   [gv5 := Nil; n := 1; x := (Cons 0 (Cons 5 (Cons 1 (Cons 0 Nil))))]
   [gv5 := Nil; n := 1; x := (Cons 2 (Cons 0 (Cons 3 Nil)))]
   [gv5 := (Cons 1 (Cons 6 Nil)); n := 3; x := (Cons 4 (Cons 0 (Cons 6 Nil)))]
   [gv5 := Nil; n := 4; x := (Cons 1 (Cons 0 (Cons 4 (Cons 0 Nil))))]
   [gv5 := Nil; n := 0; x := (Cons 6 (Cons 1 Nil))]
   [gv5 := (Cons 2 (Cons 6 (Cons 0 (Cons 4 (Cons 6 (Cons 3 Nil)))))); n := 2; x := Nil]
   [gv5 := (Cons 4 (Cons 0 (Cons 1 (Cons 4 Nil)))); n := 0; x := Nil]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 32.643 seconds


Label: 0 (0)
(n < n), (n <= n), (n = n), (x = x), (x = gv1), (gv1 = x), (gv1 = gv1), (~ n < n), (~ n <= n), (n <> n)
(x <> x), (x <> gv1), (gv1 <> x), (gv1 <> gv1), (rev x = x), (rev x = gv1), (rev x = append x x), (rev x = append x gv1), (rev x = append gv1 x), (rev x = append gv1 gv1)
(rev gv1 = x), (rev gv1 = gv1), (rev gv1 = append x x), (rev gv1 = append x gv1), (rev gv1 = append gv1 x), (rev gv1 = append gv1 gv1), (append x x = x), (append x x = gv1), (append x gv1 = x), (append x gv1 = gv1)
(append gv1 x = x), (append gv1 x = gv1), (append gv1 gv1 = x), (append gv1 gv1 = gv1), (None = Some x), (None = Some gv1), (None = Some n)

Label: 1 (1)
(n < n), (n <= n), (n = n), (x = x), (x = gv2), (gv2 = x), (gv2 = gv2), (~ n < n), (~ n <= n), (n <> n)
(x <> x), (x <> gv2), (gv2 <> x), (gv2 <> gv2), (rev x = x), (rev x = gv2), (rev x = append x x), (rev x = append x gv2), (rev x = append gv2 x), (rev x = append gv2 gv2)
(rev gv2 = x), (rev gv2 = gv2), (rev gv2 = append x x), (rev gv2 = append x gv2), (rev gv2 = append gv2 x), (rev gv2 = append gv2 gv2), (append x x = x), (append x x = gv2), (append x gv2 = x), (append x gv2 = gv2)
(append gv2 x = x), (append gv2 x = gv2), (append gv2 gv2 = x), (append gv2 gv2 = gv2), (None = Some x), (None = Some gv2), (None = Some n)

Label: 2 (2)
(n < n), (n <= n), (n = n), (gv4 = gv4), (gv4 = x), (x = gv4), (x = x), (~ n < n), (~ n <= n), (n <> n)
(gv4 <> gv4), (gv4 <> x), (x <> gv4), (x <> x), (rev gv4 = gv4), (rev gv4 = x), (rev gv4 = append gv4 gv4), (rev gv4 = append gv4 x), (rev gv4 = append x gv4), (rev gv4 = append x x)
(rev x = gv4), (rev x = x), (rev x = append gv4 gv4), (rev x = append gv4 x), (rev x = append x gv4), (rev x = append x x), (append gv4 gv4 = gv4), (append gv4 gv4 = x), (append gv4 x = gv4), (append gv4 x = x)
(append x gv4 = gv4), (append x gv4 = x), (append x x = gv4), (append x x = x), (None = Some gv4), (None = Some x), (None = Some n)

Label: 3 (3)
(n < n), (n <= n), (n = n), (gv3 = gv3), (gv3 = x), (x = gv3), (x = x), (~ n < n), (~ n <= n), (n <> n)
(gv3 <> gv3), (gv3 <> x), (x <> gv3), (x <> x), (rev gv3 = gv3), (rev gv3 = x), (rev gv3 = append gv3 gv3), (rev gv3 = append gv3 x), (rev gv3 = append x gv3), (rev gv3 = append x x)
(rev x = gv3), (rev x = x), (rev x = append gv3 gv3), (rev x = append gv3 x), (rev x = append x gv3), (rev x = append x x), (append gv3 gv3 = gv3), (append gv3 gv3 = x), (append gv3 x = gv3), (append gv3 x = x)
(append x gv3 = gv3), (append x gv3 = x), (append x x = gv3), (append x x = x), (None = Some gv3), (None = Some x), (None = Some n)

Label: 4 (4)
(n < n), (n <= n), (n = n), (x = x), (x = gv0), (gv0 = x), (gv0 = gv0), (~ n < n), (~ n <= n), (n <> n)
(x <> x), (x <> gv0), (gv0 <> x), (gv0 <> gv0), (rev x = x), (rev x = gv0), (rev x = append x x), (rev x = append x gv0), (rev x = append gv0 x), (rev x = append gv0 gv0)
(rev gv0 = x), (rev gv0 = gv0), (rev gv0 = append x x), (rev gv0 = append x gv0), (rev gv0 = append gv0 x), (rev gv0 = append gv0 gv0), (append x x = x), (append x x = gv0), (append x gv0 = x), (append x gv0 = gv0)
(append gv0 x = x), (append gv0 x = gv0), (append gv0 gv0 = x), (append gv0 gv0 = gv0), (None = Some x), (None = Some gv0), (None = Some n)

Label: 5 (5)
(n < n), (n <= n), (n = n), (gv5 = gv5), (gv5 = x), (x = gv5), (x = x), (~ n < n), (~ n <= n), (n <> n)
(gv5 <> gv5), (gv5 <> x), (x <> gv5), (x <> x), (rev gv5 = gv5), (rev gv5 = x), (rev gv5 = append gv5 gv5), (rev gv5 = append gv5 x), (rev gv5 = append x gv5), (rev gv5 = append x x)
(rev x = gv5), (rev x = x), (rev x = append gv5 gv5), (rev x = append gv5 x), (rev x = append x gv5), (rev x = append x x), (append gv5 gv5 = gv5), (append gv5 gv5 = x), (append gv5 x = gv5), (append gv5 x = x)
(append x gv5 = gv5), (append x gv5 = x), (append x x = gv5), (append x x = x), (None = Some gv5), (None = Some x), (None = Some n)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 146.533 seconds


Label: 0 (0)

Label: 1 (1)
(rev x = gv2), (rev gv2 = x)

Label: 2 (2)
(rev gv4 = append gv4 gv4), (append gv4 gv4 = gv4), (append gv4 x = x), (append x gv4 = x)

Label: 3 (3)

Label: 4 (4)

Label: 5 (5)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 185.654 seconds


(append (rev x) (Cons n Nil) = gv1)
 - (append (rev x) (Cons n Nil) = gv1)

(Cons n Nil = gv3)
 - (Cons n Nil = gv3)

(Nil = gv4)
 - (Nil = gv4)
 - (rev gv4 = append gv4 gv4)
 - (append gv4 gv4 = gv4)
 - (append gv4 x = x)
 - (append x gv4 = x)

(rev (append (rev x) (Cons n Nil)) = gv0)
 - (rev (append (rev x) (Cons n Nil)) = gv0)

(Cons n x = gv5)
 - (Cons n x = gv5)

(rev gv2 = x)
 - (rev gv2 = x)
 - (rev x = gv2)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 185.655 seconds

Number of Result Pairs Returned: 6

(rev gv2 = x -> rev (append gv2 (Cons n Nil)) = Cons n x)

(rev gv2 = x -> rev x = gv2)
(rev x = gv2 -> rev (append gv2 (Cons n Nil)) = Cons n x)

(Nil = gv4 -> rev gv4 = append gv4 gv4)
(rev gv4 = append gv4 gv4 -> rev (append (rev x) (Cons n gv4)) = Cons n x)

(Nil = gv4 -> append gv4 gv4 = gv4)
(append gv4 gv4 = gv4 -> rev (append (rev x) (Cons n gv4)) = Cons n x)

(Nil = gv4 -> append gv4 x = x)
(append gv4 x = x -> rev (append (rev x) (Cons n gv4)) = Cons n x)

(Nil = gv4 -> append x gv4 = x)
(append x gv4 = x -> rev (append (rev x) (Cons n gv4)) = Cons n x)
