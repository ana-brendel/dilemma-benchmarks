Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (rank l < rank r)
 -- (has_leftist_property l = true)
 -- (has_leftist_property r = true)

----------------------------------
Goal: (has_leftist_property (Heap (rank l + 1) v r l) = true)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv6 : bool = true
gv4 : nat = 1
gv1 : heap = (Heap (rank l + 1) v r l)
gv3 : nat = (rank l)
gv2 : nat = (rank l + 1)
gv0 : bool = (has_leftist_property (Heap (rank l + 1) v r l))
gv5 : nat = 0


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 127.515 seconds

Label: Generalization #0
Assumptions: 
 -- (0 = gv5)
 -- (rank l < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (has_leftist_property (Heap (rank l + S gv5) v r l) = true)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (has_leftist_property (Heap (rank l + 1) v r l) = gv0)
 -- (rank l < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (gv0 = true)
Case: 3

Label: Generalization #2
Assumptions: 
 -- (rank l + 1 = gv2)
 -- (rank l < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (has_leftist_property (Heap gv2 v r l) = true)
Case: 3

Label: Generalization #3
Assumptions: 
 -- (rank l = gv3)
 -- (gv3 < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (has_leftist_property (Heap (gv3 + 1) v r l) = true)
Case: 3

Label: Generalization #4
Assumptions: 
 -- (Heap (rank l + 1) v r l = gv1)
 -- (rank l < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (has_leftist_property gv1 = true)
Case: 4

Label: Generalization #5
Assumptions: 
 -- (1 = gv4)
 -- (rank l < rank r)
 -- (has_leftist_property r = true)
 -- (has_leftist_property l = true)

----------------------------------
Goal: (has_leftist_property (Heap (rank l + gv4) v r l) = true)
Case: 3

Label: Generalization #6
Assumptions: 
 -- (rank l < rank r)
 -- (has_leftist_property r = gv6)
 -- (has_leftist_property l = gv6)

----------------------------------
Goal: (has_leftist_property (Heap (rank l + 1) v r l) = gv6)
Case: 3

Label: Generalization #7
Assumptions: 
 -- (rank l < rank r)
 -- (has_leftist_property l = true)
 -- (has_leftist_property r = true)

----------------------------------
Goal: (has_leftist_property (Heap (rank l + 1) v r l) = true)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 129.819 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
lst : Set
lst_rect : (forall P : lst -> Type,
 (forall (n : nat) (l : lst), P l -> P (Cons n l)) ->
 P Nil -> forall l : lst, P l)
lst_rec : (forall P : lst -> Set,
 (forall (n : nat) (l : lst), P l -> P (Cons n l)) ->
 P Nil -> forall l : lst, P l)
heap : Set
heap_rect : (forall P : heap -> Type,
 P Hleaf ->
 (forall (n n0 : nat) (h : heap),
  P h -> forall h0 : heap, P h0 -> P (Heap n n0 h h0)) ->
 forall h : heap, P h)
heap_rec : (forall P : heap -> Set,
 P Hleaf ->
 (forall (n n0 : nat) (h : heap),
  P h -> forall h0 : heap, P h0 -> P (Heap n n0 h h0)) ->
 forall h : heap, P h)
right_height : (heap -> nat)
rank : (heap -> nat)
has_leftist_property : (heap -> bool)
hsize : (heap -> nat)
mergea : (nat -> heap -> heap -> heap)
merge : (heap -> heap -> heap)
hinsert : (heap -> nat -> heap)
hinsert_all : (lst -> heap -> heap)
show_lst : (Show.Show lst)
show_heap : (Show.Show heap)

Label: 0 (0)
Abducted Assumption: (0 = gv5)
Positive Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 5]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv5 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 2; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv5 := 2; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 0]
   [gv5 := 4; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv5 := 1; l := Hleaf; r := (Heap 1 6 Hleaf Hleaf); v := 5]
   [gv5 := 5; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv5 := 2; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv5 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 2; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv5 := 3; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   etc ...


Label: 0 (1)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 5]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv5 := 0; l := (Heap 1 4 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv5 := 0; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv5 := 0; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv5 := 0; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv5 := 0; l := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); r := Hleaf; v := 1]
   [gv5 := 0; l := (Heap 2 2 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := Hleaf; v := 2]
   [gv5 := 0; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv5 := 0; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv5 := 0; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv5 := 0; l := (Heap 1 1 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 2]
   etc ...


Label: 0 (2)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 5]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 0 0 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); v := 0]
   [gv5 := 0; l := Hleaf; r := (Heap 2 2 (Heap 2 2 Hleaf Hleaf) (Heap 0 1 Hleaf Hleaf)); v := 0]
   [gv5 := 0; l := Hleaf; r := (Heap 5 5 (Heap 3 0 (Heap 5 5 (Heap 2 3 Hleaf Hleaf) Hleaf) Hleaf) Hleaf); v := 4]
   [gv5 := 0; l := Hleaf; r := (Heap 2 1 (Heap 0 0 Hleaf Hleaf) Hleaf); v := 0]
   [gv5 := 0; l := Hleaf; r := (Heap 4 4
   (Heap 3 0 (Heap 2 0 Hleaf (Heap 5 2 Hleaf (Heap 2 3 Hleaf Hleaf))) Hleaf)
   Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 4 2 (Heap 3 0 Hleaf Hleaf) (Heap 5 3 Hleaf Hleaf)); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 (Heap 0 3 (Heap 2 2 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf))
   (Heap 3 2 (Heap 2 3 Hleaf Hleaf) Hleaf)); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3
   (Heap 5 5 Hleaf
      (Heap 3 1 (Heap 4 5 Hleaf (Heap 5 2 Hleaf Hleaf))
         (Heap 2 3 Hleaf Hleaf)))
   (Heap 2 1 (Heap 3 1 Hleaf (Heap 0 2 Hleaf (Heap 2 1 Hleaf Hleaf)))
      (Heap 0 0 Hleaf (Heap 3 0 Hleaf Hleaf)))); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 4 1 (Heap 1 2 (Heap 1 1 (Heap 3 0 Hleaf Hleaf) Hleaf) Hleaf) Hleaf); v := 4]
   etc ...


Label: 0 (3)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 5]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv5 := 0; l := (Heap 0 3 Hleaf (Heap 0 1 (Heap 2 3 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf))); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv5 := 0; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv5 := 0; l := (Heap 0 0 (Heap 0 1 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv5 := 0; l := (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf))
   (Heap 0 2 Hleaf Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv5 := 0; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]


Label: 1 (4)
Abducted Assumption: (has_leftist_property (Heap (rank l + 1) v r l) = gv0)
Positive Examples:
   [gv0 := true; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv0 := true; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv0 := true; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv0 := true; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [gv0 := true; l := Hleaf; r := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 0]
   [gv0 := true; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [gv0 := false; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 5]
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv0 := false; l := Hleaf; r := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0]
   [gv0 := false; l := Hleaf; r := (Heap 1 0 (Heap 1 5 Hleaf Hleaf) Hleaf); v := 2]
   [gv0 := false; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 5]
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv0 := false; l := Hleaf; r := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv0 := false; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv0 := false; l := Hleaf; r := (Heap 1 6 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 3]
   etc ...


Label: 2 (5)
Abducted Assumption: (rank l + 1 = gv2)
Positive Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...

Negative Examples:
   [gv2 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 5]
   [gv2 := 2; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 4]
   [gv2 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv2 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 2]
   [gv2 := 4; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 5]
   [gv2 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv2 := 3; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 2; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv2 := 2; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv2 := 2; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   etc ...


Label: 2 (6)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...

Negative Examples:
   [gv2 := 2; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 5 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv2 := 2; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 4]
   [gv2 := 2; l := (Heap 1 4 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv2 := 2; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 4]
   etc ...


Label: 2 (7)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...

Negative Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 2 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 3 0 Hleaf
   (Heap 2 1 (Heap 1 1 (Heap 2 2 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf))
      (Heap 2 1 (Heap 1 2 Hleaf Hleaf) (Heap 4 2 Hleaf Hleaf)))); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf (Heap 0 3 (Heap 0 3 Hleaf Hleaf) Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 2 0 Hleaf Hleaf) Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 2 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 (Heap 2 0 Hleaf (Heap 1 3 Hleaf Hleaf))
   (Heap 3 3 (Heap 0 1 Hleaf Hleaf) Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 3 4 (Heap 3 1 Hleaf Hleaf)
   (Heap 1 3
      (Heap 1 5 (Heap 2 3 (Heap 2 1 Hleaf Hleaf) Hleaf)
         (Heap 4 4 Hleaf (Heap 4 4 Hleaf Hleaf)))
      (Heap 5 1 (Heap 0 5 (Heap 2 4 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf Hleaf)))); v := 5]
   [gv2 := 1; l := Hleaf; r := (Heap 3 2 (Heap 2 2 (Heap 1 3 Hleaf Hleaf) Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 3 Hleaf (Heap 4 4 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 4 2 Hleaf Hleaf); v := 3]
   etc ...


Label: 2 (8)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...

Negative Examples:
   [gv2 := 1; l := (Heap 0 1 (Heap 0 0 Hleaf Hleaf) Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := (Heap 0 4
   (Heap 2 4 (Heap 4 2 (Heap 1 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf))
      (Heap 3 3 (Heap 2 1 Hleaf Hleaf) (Heap 2 3 Hleaf Hleaf)))
   (Heap 3 2 (Heap 1 3 Hleaf (Heap 4 3 Hleaf Hleaf)) (Heap 2 1 Hleaf Hleaf))); r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := (Heap 0 0 (Heap 1 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...


Label: 3 (9)
Abducted Assumption: (rank l = gv3)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 0; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2]
   etc ...


Label: 3 (10)
Abducted Assumption: (gv3 < rank r)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 2; l := (Heap 2 2 (Heap 1 1 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv3 := 1; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 5]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv3 := 1; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 1]
   etc ...


Label: 3 (11)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 (Heap 0 0 Hleaf Hleaf)
   (Heap 3 4 (Heap 3 1 Hleaf (Heap 0 1 Hleaf Hleaf)) Hleaf)); v := 3]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 0 3 (Heap 1 3 Hleaf Hleaf) (Heap 2 0 Hleaf Hleaf))
   (Heap 2 2 (Heap 3 1 Hleaf Hleaf) Hleaf)); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 5 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 0 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 3 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 0 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 3 5
   (Heap 1 5
      (Heap 4 0 Hleaf
         (Heap 1 5 (Heap 1 2 Hleaf (Heap 5 6 Hleaf Hleaf))
            (Heap 2 0 (Heap 2 1 Hleaf Hleaf) Hleaf)))
      (Heap 6 2 (Heap 5 4 Hleaf (Heap 1 5 (Heap 2 1 Hleaf Hleaf) Hleaf))
         (Heap 6 0 Hleaf Hleaf))) Hleaf); v := 5]
   [gv3 := 0; l := Hleaf; r := (Heap 3 1 Hleaf Hleaf); v := 3]
   [gv3 := 0; l := Hleaf; r := (Heap 3 3 Hleaf (Heap 2 4 Hleaf (Heap 0 4 Hleaf Hleaf))); v := 3]
   [gv3 := 0; l := Hleaf; r := (Heap 4 2 (Heap 5 4 (Heap 5 2 Hleaf Hleaf) Hleaf) Hleaf); v := 1]
   etc ...


Label: 3 (12)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 0; l := (Heap 0 2 Hleaf Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 0 0 (Heap 0 1 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 0 2 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 0 4
   (Heap 3 2 (Heap 1 2 (Heap 2 4 Hleaf Hleaf) Hleaf)
      (Heap 1 1 (Heap 0 0 Hleaf Hleaf) Hleaf))
   (Heap 2 3 (Heap 2 4 (Heap 0 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)) Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 0 1 Hleaf (Heap 1 0 Hleaf Hleaf)); r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv3 := 0; l := (Heap 0 3 Hleaf (Heap 3 3 Hleaf (Heap 1 3 Hleaf Hleaf))); r := (Heap 1 3 (Heap 1 3 Hleaf Hleaf) Hleaf); v := 0]
   [gv3 := 0; l := (Heap 0 1 (Heap 0 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...


Label: 5 (13)
Abducted Assumption: (1 = gv4)
Positive Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...

Negative Examples:
   [gv4 := 4; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv4 := 0; l := Hleaf; r := (Heap 2 2 (Heap 1 0 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 1]
   [gv4 := 2; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv4 := 4; l := Hleaf; r := (Heap 1 4 (Heap 1 3 Hleaf Hleaf) Hleaf); v := 2]
   [gv4 := 4; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 6]
   [gv4 := 3; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 3; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv4 := 3; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv4 := 3; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv4 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   etc ...


Label: 5 (14)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...

Negative Examples:
   [gv4 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 6]
   [gv4 := 1; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv4 := 1; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 5]
   [gv4 := 1; l := (Heap 1 3 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 1]
   [gv4 := 1; l := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 2]
   [gv4 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv4 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv4 := 1; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv4 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv4 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 1]
   etc ...


Label: 5 (15)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...

Negative Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 4 1 Hleaf
   (Heap 1 0 (Heap 3 4 (Heap 2 0 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf)) Hleaf)); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 2 0 (Heap 2 1 Hleaf Hleaf) (Heap 0 2 Hleaf Hleaf)); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 3 2
   (Heap 5 5
      (Heap 4 4 Hleaf
         (Heap 4 4 (Heap 0 6 (Heap 0 3 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf))
            (Heap 6 6 (Heap 2 6 Hleaf Hleaf) (Heap 3 5 Hleaf Hleaf))))
      (Heap 3 1 Hleaf (Heap 4 2 (Heap 1 3 Hleaf Hleaf) Hleaf)))
   (Heap 0 6 Hleaf Hleaf)); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf (Heap 1 1 Hleaf Hleaf)); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 2 0 Hleaf (Heap 0 1 Hleaf Hleaf)); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 2 0
   (Heap 2 0 (Heap 2 3 (Heap 1 0 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf))
      (Heap 4 3 Hleaf Hleaf)) Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 4 0
   (Heap 3 0
      (Heap 3 6 Hleaf
         (Heap 6 5 (Heap 2 0 (Heap 6 3 Hleaf Hleaf) Hleaf) Hleaf)) Hleaf)
   Hleaf); v := 6]
   [gv4 := 1; l := Hleaf; r := (Heap 4 5
   (Heap 2 3 Hleaf
      (Heap 4 0 Hleaf
         (Heap 3 0 (Heap 1 0 Hleaf Hleaf) (Heap 2 0 Hleaf Hleaf))))
   (Heap 5 2 Hleaf Hleaf)); v := 1]
   etc ...


Label: 5 (16)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...

Negative Examples:
   [gv4 := 1; l := (Heap 0 3 Hleaf (Heap 1 3 Hleaf (Heap 3 2 Hleaf Hleaf))); r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := (Heap 0 1 Hleaf (Heap 0 2 Hleaf Hleaf)); r := (Heap 1 2 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv4 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := (Heap 0 2 Hleaf (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := (Heap 0 2 Hleaf (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   etc ...


Label: 6 (17)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [gv6 := false; l := (Heap 2 5 (Heap 0 5 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf)); r := (Heap 4 2 (Heap 4 6 Hleaf Hleaf)
   (Heap 6 2
      (Heap 5 0 (Heap 3 0 Hleaf (Heap 0 2 (Heap 0 6 Hleaf Hleaf) Hleaf))
         Hleaf)
      (Heap 3 5 Hleaf
         (Heap 6 4 Hleaf
            (Heap 1 6 (Heap 2 4 Hleaf Hleaf) (Heap 5 4 Hleaf Hleaf)))))); v := 2]
   [gv6 := false; l := (Heap 0 0
   (Heap 2 1 (Heap 4 4 Hleaf (Heap 3 1 Hleaf (Heap 5 2 Hleaf Hleaf)))
      (Heap 1 1 (Heap 5 0 (Heap 2 4 Hleaf Hleaf) (Heap 1 5 Hleaf Hleaf))
         Hleaf))
   (Heap 5 3 (Heap 0 5 (Heap 3 5 Hleaf Hleaf) (Heap 4 0 Hleaf Hleaf)) Hleaf)); r := (Heap 5 0 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 4]
   [gv6 := false; l := (Heap 0 4 Hleaf
   (Heap 4 2
      (Heap 4 2 (Heap 5 3 (Heap 5 4 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
         Hleaf) Hleaf)); r := (Heap 3 4
   (Heap 1 0 Hleaf
      (Heap 1 4 Hleaf
         (Heap 1 3 (Heap 0 4 Hleaf Hleaf) (Heap 2 5 Hleaf Hleaf))))
   (Heap 0 5 Hleaf (Heap 3 1 (Heap 1 4 Hleaf (Heap 1 4 Hleaf Hleaf)) Hleaf))); v := 0]
   [gv6 := false; l := (Heap 1 4 Hleaf
   (Heap 5 6 Hleaf
      (Heap 1 6 (Heap 5 0 Hleaf Hleaf)
         (Heap 6 6 Hleaf
            (Heap 1 0 (Heap 5 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 3 2 Hleaf Hleaf); v := 5]
   [gv6 := false; l := (Heap 2 1
   (Heap 3 3 (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf) (Heap 2 0 Hleaf Hleaf))
   Hleaf); r := (Heap 4 3 Hleaf (Heap 4 3 Hleaf Hleaf)); v := 1]
   [gv6 := false; l := (Heap 2 4
   (Heap 6 0
      (Heap 2 6 (Heap 1 5 (Heap 6 0 Hleaf (Heap 1 3 Hleaf Hleaf)) Hleaf)
         Hleaf) Hleaf) (Heap 3 6 Hleaf Hleaf)); r := (Heap 6 3 Hleaf Hleaf); v := 0]
   [gv6 := false; l := (Heap 2 4
   (Heap 2 0 (Heap 6 4 Hleaf Hleaf)
      (Heap 1 3
         (Heap 5 0 (Heap 0 0 (Heap 6 5 Hleaf Hleaf) (Heap 0 6 Hleaf Hleaf))
            (Heap 6 6 (Heap 4 2 Hleaf Hleaf) (Heap 3 2 Hleaf Hleaf)))
         (Heap 2 1 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)))
   (Heap 2 4 (Heap 3 5 (Heap 1 5 (Heap 1 6 Hleaf Hleaf) Hleaf) Hleaf)
      (Heap 6 6 Hleaf
         (Heap 5 0 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf)
            (Heap 0 6 (Heap 0 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 4 0 (Heap 5 1 Hleaf Hleaf)
   (Heap 4 5 Hleaf
      (Heap 2 6 Hleaf
         (Heap 5 5 (Heap 4 5 Hleaf Hleaf)
            (Heap 3 3 (Heap 5 3 Hleaf Hleaf) Hleaf))))); v := 5]
   [gv6 := false; l := (Heap 1 0 (Heap 0 1 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 1 (Heap 0 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := false; l := (Heap 1 5
   (Heap 3 0 (Heap 1 1 Hleaf (Heap 2 5 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 5 1 (Heap 1 3 Hleaf (Heap 5 4 Hleaf Hleaf)) Hleaf)) Hleaf); r := (Heap 3 3 Hleaf
   (Heap 4 5 (Heap 2 0 (Heap 4 0 (Heap 5 4 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); v := 4]
   [gv6 := false; l := (Heap 1 0 Hleaf (Heap 5 1 Hleaf (Heap 5 2 Hleaf Hleaf))); r := (Heap 3 3 Hleaf
   (Heap 0 1
      (Heap 3 1 (Heap 3 4 (Heap 4 2 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 3 5 (Heap 1 4 Hleaf Hleaf)
         (Heap 5 1 (Heap 4 0 Hleaf Hleaf) (Heap 3 3 Hleaf Hleaf))))); v := 0]
   etc ...

Negative Examples:
   [gv6 := true; l := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); r := Hleaf; v := 2]
   [gv6 := true; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv6 := true; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv6 := true; l := (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); r := Hleaf; v := 2]
   [gv6 := true; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 4]
   [gv6 := true; l := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 0]
   [gv6 := true; l := (Heap 1 4 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv6 := true; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 5]
   [gv6 := true; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv6 := true; l := (Heap 1 4 Hleaf Hleaf); r := Hleaf; v := 1]
   etc ...


Label: 6 (18)
Abducted Assumption: (has_leftist_property r = gv6)
Positive Examples:
   [gv6 := false; l := (Heap 2 5 (Heap 0 5 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf)); r := (Heap 4 2 (Heap 4 6 Hleaf Hleaf)
   (Heap 6 2
      (Heap 5 0 (Heap 3 0 Hleaf (Heap 0 2 (Heap 0 6 Hleaf Hleaf) Hleaf))
         Hleaf)
      (Heap 3 5 Hleaf
         (Heap 6 4 Hleaf
            (Heap 1 6 (Heap 2 4 Hleaf Hleaf) (Heap 5 4 Hleaf Hleaf)))))); v := 2]
   [gv6 := false; l := (Heap 0 0
   (Heap 2 1 (Heap 4 4 Hleaf (Heap 3 1 Hleaf (Heap 5 2 Hleaf Hleaf)))
      (Heap 1 1 (Heap 5 0 (Heap 2 4 Hleaf Hleaf) (Heap 1 5 Hleaf Hleaf))
         Hleaf))
   (Heap 5 3 (Heap 0 5 (Heap 3 5 Hleaf Hleaf) (Heap 4 0 Hleaf Hleaf)) Hleaf)); r := (Heap 5 0 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 4]
   [gv6 := false; l := (Heap 0 4 Hleaf
   (Heap 4 2
      (Heap 4 2 (Heap 5 3 (Heap 5 4 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
         Hleaf) Hleaf)); r := (Heap 3 4
   (Heap 1 0 Hleaf
      (Heap 1 4 Hleaf
         (Heap 1 3 (Heap 0 4 Hleaf Hleaf) (Heap 2 5 Hleaf Hleaf))))
   (Heap 0 5 Hleaf (Heap 3 1 (Heap 1 4 Hleaf (Heap 1 4 Hleaf Hleaf)) Hleaf))); v := 0]
   [gv6 := false; l := (Heap 1 4 Hleaf
   (Heap 5 6 Hleaf
      (Heap 1 6 (Heap 5 0 Hleaf Hleaf)
         (Heap 6 6 Hleaf
            (Heap 1 0 (Heap 5 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 3 2 Hleaf Hleaf); v := 5]
   [gv6 := false; l := (Heap 2 1
   (Heap 3 3 (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf) (Heap 2 0 Hleaf Hleaf))
   Hleaf); r := (Heap 4 3 Hleaf (Heap 4 3 Hleaf Hleaf)); v := 1]
   [gv6 := false; l := (Heap 2 4
   (Heap 6 0
      (Heap 2 6 (Heap 1 5 (Heap 6 0 Hleaf (Heap 1 3 Hleaf Hleaf)) Hleaf)
         Hleaf) Hleaf) (Heap 3 6 Hleaf Hleaf)); r := (Heap 6 3 Hleaf Hleaf); v := 0]
   [gv6 := false; l := (Heap 2 4
   (Heap 2 0 (Heap 6 4 Hleaf Hleaf)
      (Heap 1 3
         (Heap 5 0 (Heap 0 0 (Heap 6 5 Hleaf Hleaf) (Heap 0 6 Hleaf Hleaf))
            (Heap 6 6 (Heap 4 2 Hleaf Hleaf) (Heap 3 2 Hleaf Hleaf)))
         (Heap 2 1 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)))
   (Heap 2 4 (Heap 3 5 (Heap 1 5 (Heap 1 6 Hleaf Hleaf) Hleaf) Hleaf)
      (Heap 6 6 Hleaf
         (Heap 5 0 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf)
            (Heap 0 6 (Heap 0 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 4 0 (Heap 5 1 Hleaf Hleaf)
   (Heap 4 5 Hleaf
      (Heap 2 6 Hleaf
         (Heap 5 5 (Heap 4 5 Hleaf Hleaf)
            (Heap 3 3 (Heap 5 3 Hleaf Hleaf) Hleaf))))); v := 5]
   [gv6 := false; l := (Heap 1 0 (Heap 0 1 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 1 (Heap 0 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := false; l := (Heap 1 5
   (Heap 3 0 (Heap 1 1 Hleaf (Heap 2 5 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 5 1 (Heap 1 3 Hleaf (Heap 5 4 Hleaf Hleaf)) Hleaf)) Hleaf); r := (Heap 3 3 Hleaf
   (Heap 4 5 (Heap 2 0 (Heap 4 0 (Heap 5 4 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); v := 4]
   [gv6 := false; l := (Heap 1 0 Hleaf (Heap 5 1 Hleaf (Heap 5 2 Hleaf Hleaf))); r := (Heap 3 3 Hleaf
   (Heap 0 1
      (Heap 3 1 (Heap 3 4 (Heap 4 2 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 3 5 (Heap 1 4 Hleaf Hleaf)
         (Heap 5 1 (Heap 4 0 Hleaf Hleaf) (Heap 3 3 Hleaf Hleaf))))); v := 0]
   etc ...

Negative Examples:
   [gv6 := true; l := Hleaf; r := (Heap 5 5 Hleaf Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 4 2 Hleaf (Heap 0 5 Hleaf Hleaf)); v := 5]
   [gv6 := true; l := Hleaf; r := (Heap 1 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 2 3 Hleaf
   (Heap 1 5 (Heap 1 5 (Heap 5 6 Hleaf (Heap 0 5 Hleaf Hleaf)) Hleaf)
      (Heap 2 2 (Heap 2 2 Hleaf Hleaf) (Heap 6 3 Hleaf Hleaf)))); v := 3]
   [gv6 := true; l := Hleaf; r := (Heap 4 3 Hleaf (Heap 3 0 Hleaf (Heap 0 3 Hleaf (Heap 2 2 Hleaf Hleaf)))); v := 4]
   [gv6 := true; l := Hleaf; r := (Heap 4 1 (Heap 3 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 1 2 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 3 3 Hleaf
   (Heap 1 4
      (Heap 4 3
         (Heap 2 2 (Heap 0 3 (Heap 2 2 Hleaf Hleaf) (Heap 6 0 Hleaf Hleaf))
            (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf))
         (Heap 4 3 Hleaf (Heap 4 1 Hleaf Hleaf))) Hleaf)); v := 5]
   [gv6 := true; l := Hleaf; r := (Heap 5 4 (Heap 4 5 (Heap 4 1 Hleaf Hleaf) Hleaf) Hleaf); v := 4]
   [gv6 := true; l := Hleaf; r := (Heap 6 0
   (Heap 5 5 (Heap 1 6 Hleaf Hleaf)
      (Heap 3 6 Hleaf (Heap 3 0 Hleaf (Heap 6 1 Hleaf Hleaf)))) Hleaf); v := 4]
   etc ...


Label: 6 (19)
Abducted Assumption: (has_leftist_property l = gv6)
Positive Examples:
   [gv6 := false; l := (Heap 2 5 (Heap 0 5 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf)); r := (Heap 4 2 (Heap 4 6 Hleaf Hleaf)
   (Heap 6 2
      (Heap 5 0 (Heap 3 0 Hleaf (Heap 0 2 (Heap 0 6 Hleaf Hleaf) Hleaf))
         Hleaf)
      (Heap 3 5 Hleaf
         (Heap 6 4 Hleaf
            (Heap 1 6 (Heap 2 4 Hleaf Hleaf) (Heap 5 4 Hleaf Hleaf)))))); v := 2]
   [gv6 := false; l := (Heap 0 0
   (Heap 2 1 (Heap 4 4 Hleaf (Heap 3 1 Hleaf (Heap 5 2 Hleaf Hleaf)))
      (Heap 1 1 (Heap 5 0 (Heap 2 4 Hleaf Hleaf) (Heap 1 5 Hleaf Hleaf))
         Hleaf))
   (Heap 5 3 (Heap 0 5 (Heap 3 5 Hleaf Hleaf) (Heap 4 0 Hleaf Hleaf)) Hleaf)); r := (Heap 5 0 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 4]
   [gv6 := false; l := (Heap 0 4 Hleaf
   (Heap 4 2
      (Heap 4 2 (Heap 5 3 (Heap 5 4 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
         Hleaf) Hleaf)); r := (Heap 3 4
   (Heap 1 0 Hleaf
      (Heap 1 4 Hleaf
         (Heap 1 3 (Heap 0 4 Hleaf Hleaf) (Heap 2 5 Hleaf Hleaf))))
   (Heap 0 5 Hleaf (Heap 3 1 (Heap 1 4 Hleaf (Heap 1 4 Hleaf Hleaf)) Hleaf))); v := 0]
   [gv6 := false; l := (Heap 1 4 Hleaf
   (Heap 5 6 Hleaf
      (Heap 1 6 (Heap 5 0 Hleaf Hleaf)
         (Heap 6 6 Hleaf
            (Heap 1 0 (Heap 5 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 3 2 Hleaf Hleaf); v := 5]
   [gv6 := false; l := (Heap 2 1
   (Heap 3 3 (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf) (Heap 2 0 Hleaf Hleaf))
   Hleaf); r := (Heap 4 3 Hleaf (Heap 4 3 Hleaf Hleaf)); v := 1]
   [gv6 := false; l := (Heap 2 4
   (Heap 6 0
      (Heap 2 6 (Heap 1 5 (Heap 6 0 Hleaf (Heap 1 3 Hleaf Hleaf)) Hleaf)
         Hleaf) Hleaf) (Heap 3 6 Hleaf Hleaf)); r := (Heap 6 3 Hleaf Hleaf); v := 0]
   [gv6 := false; l := (Heap 2 4
   (Heap 2 0 (Heap 6 4 Hleaf Hleaf)
      (Heap 1 3
         (Heap 5 0 (Heap 0 0 (Heap 6 5 Hleaf Hleaf) (Heap 0 6 Hleaf Hleaf))
            (Heap 6 6 (Heap 4 2 Hleaf Hleaf) (Heap 3 2 Hleaf Hleaf)))
         (Heap 2 1 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)))
   (Heap 2 4 (Heap 3 5 (Heap 1 5 (Heap 1 6 Hleaf Hleaf) Hleaf) Hleaf)
      (Heap 6 6 Hleaf
         (Heap 5 0 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf)
            (Heap 0 6 (Heap 0 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 4 0 (Heap 5 1 Hleaf Hleaf)
   (Heap 4 5 Hleaf
      (Heap 2 6 Hleaf
         (Heap 5 5 (Heap 4 5 Hleaf Hleaf)
            (Heap 3 3 (Heap 5 3 Hleaf Hleaf) Hleaf))))); v := 5]
   [gv6 := false; l := (Heap 1 0 (Heap 0 1 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 1 (Heap 0 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := false; l := (Heap 1 5
   (Heap 3 0 (Heap 1 1 Hleaf (Heap 2 5 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 5 1 (Heap 1 3 Hleaf (Heap 5 4 Hleaf Hleaf)) Hleaf)) Hleaf); r := (Heap 3 3 Hleaf
   (Heap 4 5 (Heap 2 0 (Heap 4 0 (Heap 5 4 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); v := 4]
   [gv6 := false; l := (Heap 1 0 Hleaf (Heap 5 1 Hleaf (Heap 5 2 Hleaf Hleaf))); r := (Heap 3 3 Hleaf
   (Heap 0 1
      (Heap 3 1 (Heap 3 4 (Heap 4 2 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 3 5 (Heap 1 4 Hleaf Hleaf)
         (Heap 5 1 (Heap 4 0 Hleaf Hleaf) (Heap 3 3 Hleaf Hleaf))))); v := 0]
   etc ...

Negative Examples:
   [gv6 := true; l := (Heap 0 2 Hleaf (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv6 := true; l := (Heap 0 4 Hleaf
   (Heap 3 3 (Heap 0 6 (Heap 2 1 (Heap 6 0 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 5]
   [gv6 := true; l := (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 3 1 Hleaf Hleaf))
   (Heap 2 3 (Heap 3 0 Hleaf Hleaf) Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv6 := true; l := (Heap 0 3 Hleaf Hleaf); r := (Heap 1 3 Hleaf Hleaf); v := 4]
   [gv6 := true; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv6 := true; l := (Heap 0 3
   (Heap 6 2 (Heap 0 2 Hleaf (Heap 6 0 Hleaf (Heap 0 1 Hleaf Hleaf))) Hleaf)
   Hleaf); r := (Heap 1 5 Hleaf Hleaf); v := 6]
   [gv6 := true; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2]
   [gv6 := true; l := (Heap 0 2 (Heap 0 0 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv6 := true; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv6 := true; l := (Heap 0 2 Hleaf (Heap 2 1 Hleaf Hleaf)); r := (Heap 1 2 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   etc ...


Label: 7 (20)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0]
   etc ...

Negative Examples:
   [l := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 1]
   [l := (Heap 1 3 (Heap 1 4 Hleaf Hleaf) Hleaf); r := Hleaf; v := 3]
   [l := (Heap 1 4 Hleaf Hleaf); r := Hleaf; v := 0]
   [l := (Heap 1 6 Hleaf Hleaf); r := Hleaf; v := 4]
   [l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 5]
   [l := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := Hleaf; v := 1]
   [l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 3]
   [l := (Heap 2 3 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := Hleaf; v := 1]
   [l := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); r := Hleaf; v := 2]
   [l := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 1]
   etc ...


Label: 7 (21)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0]
   etc ...

Negative Examples:
   [l := (Heap 0 2 Hleaf
   (Heap 4 0 Hleaf
      (Heap 4 4 (Heap 6 3 (Heap 4 6 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)
         (Heap 4 6 (Heap 1 6 (Heap 0 2 Hleaf Hleaf) Hleaf)
            (Heap 2 3 Hleaf (Heap 3 3 Hleaf Hleaf)))))); r := (Heap 1 5 Hleaf Hleaf); v := 3]
   [l := (Heap 0 3 Hleaf
   (Heap 2 4
      (Heap 3 4 (Heap 5 2 Hleaf (Heap 3 0 Hleaf Hleaf))
         (Heap 3 0 (Heap 3 5 Hleaf Hleaf) Hleaf)) Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 5]
   [l := (Heap 0 0 (Heap 0 0 (Heap 1 0 Hleaf (Heap 4 0 Hleaf Hleaf)) Hleaf) Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 4]
   [l := (Heap 0 1 Hleaf (Heap 1 4 Hleaf Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [l := (Heap 0 3 (Heap 3 4 Hleaf Hleaf) Hleaf); r := (Heap 1 3 Hleaf Hleaf); v := 4]
   [l := (Heap 0 0 Hleaf (Heap 0 0 Hleaf Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [l := (Heap 0 0 (Heap 0 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [l := (Heap 1 0 (Heap 0 0 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [l := (Heap 0 2 (Heap 1 2 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [l := (Heap 1 1 (Heap 0 0 Hleaf Hleaf) Hleaf); r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 2]
   etc ...


Label: 7 (22)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 3]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0]
   etc ...

Negative Examples:
   [l := Hleaf; r := (Heap 2 3 (Heap 3 1 Hleaf (Heap 0 0 Hleaf (Heap 4 0 Hleaf Hleaf))) Hleaf); v := 0]
   [l := Hleaf; r := (Heap 6 6 Hleaf (Heap 5 6 Hleaf (Heap 3 1 Hleaf Hleaf))); v := 2]
   [l := Hleaf; r := (Heap 4 4 Hleaf (Heap 3 5 Hleaf Hleaf)); v := 5]
   [l := Hleaf; r := (Heap 3 1 Hleaf (Heap 4 1 (Heap 4 4 (Heap 4 3 Hleaf Hleaf) Hleaf) Hleaf)); v := 3]
   [l := Hleaf; r := (Heap 1 0 Hleaf (Heap 1 0 Hleaf Hleaf)); v := 1]
   [l := Hleaf; r := (Heap 1 4 Hleaf
   (Heap 2 5 (Heap 0 3 Hleaf (Heap 5 3 (Heap 1 5 Hleaf Hleaf) Hleaf))
      (Heap 0 4 Hleaf
         (Heap 3 1 Hleaf (Heap 4 2 (Heap 4 2 Hleaf Hleaf) Hleaf))))); v := 3]
   [l := Hleaf; r := (Heap 6 0 Hleaf (Heap 6 5 Hleaf (Heap 6 2 Hleaf Hleaf))); v := 3]
   [l := Hleaf; r := (Heap 3 4 Hleaf (Heap 3 2 Hleaf Hleaf)); v := 2]
   [l := Hleaf; r := (Heap 1 2 Hleaf
   (Heap 5 4
      (Heap 2 4 Hleaf
         (Heap 2 2 (Heap 3 0 Hleaf Hleaf)
            (Heap 1 0 Hleaf (Heap 4 3 Hleaf Hleaf)))) Hleaf)); v := 0]
   [l := Hleaf; r := (Heap 1 5 Hleaf
   (Heap 0 3 (Heap 4 0 Hleaf Hleaf)
      (Heap 3 1 Hleaf (Heap 2 1 (Heap 5 5 Hleaf Hleaf) Hleaf)))); v := 0]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 132.78 seconds


Label: 0 (0)
(v < v), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= v), (v <= gv5), (gv5 <= v), (gv5 <= gv5), (v = v), (v = gv5)
(gv5 = gv5), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize r < gv5), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv5), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv5), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv5), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv5), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r), (gv5 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv5), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv5), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv5)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv5), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv5), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv5), (~ gv5 < v)
(~ v <= v), (~ v <= gv5), (~ gv5 <= v), (~ gv5 <= gv5), (v <> v), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv5), (hinsert r v = r), (hinsert r v = l), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l v = r)
(hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv5), (merge r r = hinsert l v), (merge r r = hinsert l gv5), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv5), (merge r l = hinsert l v), (merge r l = hinsert l gv5), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv5), (merge l r = hinsert l v), (merge l r = hinsert l gv5), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv5), (merge l l = hinsert l v), (merge l l = hinsert l gv5), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv5)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv5), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv5), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv5), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv5), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r), (mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l)
(mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l), (mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r)
(mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r), (mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l)
(mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l), (hsize r = v), (hsize r = gv5), (hsize l = v)
(rank r = v), (rank r = gv5), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv5), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv5)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv5), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 0 (1)
(v < v), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= v), (v <= gv5), (gv5 <= v), (gv5 <= gv5), (v = v), (v = gv5)
(gv5 = gv5), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize r < gv5), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv5), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv5), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv5), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv5), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r), (gv5 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv5), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv5), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv5)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv5), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv5), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv5), (~ gv5 < v)
(~ v <= v), (~ v <= gv5), (~ gv5 <= v), (~ gv5 <= gv5), (v <> v), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv5), (hinsert r v = r), (hinsert r v = l), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l v = r)
(hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv5), (merge r r = hinsert l v), (merge r r = hinsert l gv5), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv5), (merge r l = hinsert l v), (merge r l = hinsert l gv5), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv5), (merge l r = hinsert l v), (merge l r = hinsert l gv5), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv5), (merge l l = hinsert l v), (merge l l = hinsert l gv5), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv5)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv5), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv5), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv5), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv5), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r), (mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l)
(mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l), (mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r)
(mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r), (mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l)
(mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l), (hsize r = v), (hsize r = gv5), (hsize l = v)
(rank r = v), (rank r = gv5), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv5), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv5)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv5), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 0 (2)
(v < v), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= v), (v <= gv5), (gv5 <= v), (gv5 <= gv5), (v = v), (v = gv5)
(gv5 = gv5), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize r < gv5), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv5), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv5), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv5), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv5), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r), (gv5 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv5), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv5), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv5)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv5), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv5), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv5), (~ gv5 < v)
(~ v <= v), (~ v <= gv5), (~ gv5 <= v), (~ gv5 <= gv5), (v <> v), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv5), (hinsert r v = r), (hinsert r v = l), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l v = r)
(hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv5), (merge r r = hinsert l v), (merge r r = hinsert l gv5), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv5), (merge r l = hinsert l v), (merge r l = hinsert l gv5), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv5), (merge l r = hinsert l v), (merge l r = hinsert l gv5), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv5), (merge l l = hinsert l v), (merge l l = hinsert l gv5), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv5)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv5), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv5), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv5), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv5), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r), (mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l)
(mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l), (mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r)
(mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r), (mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l)
(mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l), (hsize r = v), (hsize r = gv5), (hsize l = v)
(rank r = v), (rank r = gv5), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv5), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv5)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv5), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 0 (3)
(v < v), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= v), (v <= gv5), (gv5 <= v), (gv5 <= gv5), (v = v), (v = gv5)
(gv5 = gv5), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize r < gv5), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv5), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv5), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv5), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv5), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r), (gv5 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv5), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv5), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv5)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv5), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv5), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv5), (~ gv5 < v)
(~ v <= v), (~ v <= gv5), (~ gv5 <= v), (~ gv5 <= gv5), (v <> v), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv5), (hinsert r v = r), (hinsert r v = l), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l v = r)
(hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv5), (merge r r = hinsert l v), (merge r r = hinsert l gv5), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv5), (merge r l = hinsert l v), (merge r l = hinsert l gv5), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv5), (merge l r = hinsert l v), (merge l r = hinsert l gv5), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv5), (merge l l = hinsert l v), (merge l l = hinsert l gv5), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv5)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv5), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv5), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv5), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv5), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r), (mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l)
(mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l), (mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r)
(mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r), (mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l)
(mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l), (hsize r = v), (hsize r = gv5), (hsize l = v)
(rank r = v), (rank r = gv5), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv5), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv5)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv5), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 1 (4)
(false = gv0), (true = gv0), (v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (gv0 = gv0)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv0), (~ v < v), (~ v <= v), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (gv0 <> gv0), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv0), (None = Some v), (has_leftist_property r = gv0), (has_leftist_property l = gv0)

Label: 2 (5)
(v < v), (v < gv2), (gv2 < v), (gv2 < gv2), (v <= v), (v <= gv2), (gv2 <= v), (gv2 <= gv2), (l = l), (l = r)
(r = r), (v = v), (v = gv2), (gv2 = v), (gv2 = gv2), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l), (gv2 < right_height r)
(hsize l < gv2), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv2), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv2), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv2), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv2), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r), (gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv2), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv2), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv2)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv2), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv2), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv2), (~ gv2 < v)
(~ v <= v), (~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv2)
(gv2 <> gv2), (None = Some v), (None = Some gv2), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r v = l)
(hinsert r gv2 = l), (hinsert r gv2 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv2), (merge l l = hinsert r v), (merge l l = hinsert r gv2), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv2), (merge l r = hinsert r v), (merge l r = hinsert r gv2), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv2), (merge r l = hinsert r v), (merge r l = hinsert r gv2), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv2), (merge r r = hinsert r v), (merge r r = hinsert r gv2), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv2)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv2), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv2), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv2), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv2), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2), (mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r)
(mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l), (mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l)
(mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r), (mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r)
(mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l), (mergea gv2 r r = merge r r), (hsize l = v), (hsize l = gv2), (hsize r = v)
(rank l = v), (rank l = gv2), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv2), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv2)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv2), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 2 (6)
(v < v), (v < gv2), (gv2 < v), (gv2 < gv2), (v <= v), (v <= gv2), (gv2 <= v), (gv2 <= gv2), (l = l), (l = r)
(r = r), (v = v), (v = gv2), (gv2 = v), (gv2 = gv2), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l), (gv2 < right_height r)
(hsize l < gv2), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv2), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv2), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv2), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv2), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r), (gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv2), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv2), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv2)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv2), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv2), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv2), (~ gv2 < v)
(~ v <= v), (~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv2)
(gv2 <> gv2), (None = Some v), (None = Some gv2), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r v = l)
(hinsert r gv2 = l), (hinsert r gv2 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv2), (merge l l = hinsert r v), (merge l l = hinsert r gv2), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv2), (merge l r = hinsert r v), (merge l r = hinsert r gv2), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv2), (merge r l = hinsert r v), (merge r l = hinsert r gv2), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv2), (merge r r = hinsert r v), (merge r r = hinsert r gv2), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv2)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv2), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv2), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv2), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv2), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2), (mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r)
(mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l), (mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l)
(mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r), (mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r)
(mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l), (mergea gv2 r r = merge r r), (hsize l = v), (hsize l = gv2), (hsize r = v)
(rank l = v), (rank l = gv2), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv2), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv2)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv2), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 2 (7)
(v < v), (v < gv2), (gv2 < v), (gv2 < gv2), (v <= v), (v <= gv2), (gv2 <= v), (gv2 <= gv2), (l = l), (l = r)
(r = r), (v = v), (v = gv2), (gv2 = v), (gv2 = gv2), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l), (gv2 < right_height r)
(hsize l < gv2), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv2), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv2), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv2), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv2), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r), (gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv2), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv2), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv2)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv2), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv2), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv2), (~ gv2 < v)
(~ v <= v), (~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv2)
(gv2 <> gv2), (None = Some v), (None = Some gv2), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r v = l)
(hinsert r gv2 = l), (hinsert r gv2 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv2), (merge l l = hinsert r v), (merge l l = hinsert r gv2), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv2), (merge l r = hinsert r v), (merge l r = hinsert r gv2), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv2), (merge r l = hinsert r v), (merge r l = hinsert r gv2), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv2), (merge r r = hinsert r v), (merge r r = hinsert r gv2), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv2)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv2), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv2), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv2), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv2), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2), (mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r)
(mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l), (mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l)
(mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r), (mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r)
(mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l), (mergea gv2 r r = merge r r), (hsize l = v), (hsize l = gv2), (hsize r = v)
(rank l = v), (rank l = gv2), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv2), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv2)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv2), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 2 (8)
(v < v), (v < gv2), (gv2 < v), (gv2 < gv2), (v <= v), (v <= gv2), (gv2 <= v), (gv2 <= gv2), (l = l), (l = r)
(r = r), (v = v), (v = gv2), (gv2 = v), (gv2 = gv2), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l), (gv2 < right_height r)
(hsize l < gv2), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv2), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv2), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv2), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv2), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r), (gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv2), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv2), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv2)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv2), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv2), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv2), (~ gv2 < v)
(~ v <= v), (~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv2)
(gv2 <> gv2), (None = Some v), (None = Some gv2), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r v = l)
(hinsert r gv2 = l), (hinsert r gv2 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv2), (merge l l = hinsert r v), (merge l l = hinsert r gv2), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv2), (merge l r = hinsert r v), (merge l r = hinsert r gv2), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv2), (merge r l = hinsert r v), (merge r l = hinsert r gv2), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv2), (merge r r = hinsert r v), (merge r r = hinsert r gv2), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv2)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv2), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv2), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv2), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv2), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2), (mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r)
(mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l), (mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l)
(mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r), (mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r)
(mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l), (mergea gv2 r r = merge r r), (hsize l = v), (hsize l = gv2), (hsize r = v)
(rank l = v), (rank l = gv2), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv2), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv2)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv2), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 3 (9)
(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 3 (10)
(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 3 (11)
(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 3 (12)
(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 5 (13)
(v < v), (v < gv4), (gv4 < v), (gv4 < gv4), (v <= v), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = v), (v = gv4)
(gv4 = gv4), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l)
(hsize r < gv4), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv4), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv4), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv4), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv4), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv4), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv4), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv4)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv4), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv4), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv4), (~ gv4 < v)
(~ v <= v), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> v), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv4), (hinsert r v = r), (hinsert r v = l), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l v = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv4), (merge r r = hinsert l v), (merge r r = hinsert l gv4), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv4), (merge r l = hinsert l v), (merge r l = hinsert l gv4), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv4), (merge l r = hinsert l v), (merge l r = hinsert l gv4), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv4), (merge l l = hinsert l v), (merge l l = hinsert l gv4), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv4)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv4), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv4), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv4), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l)
(mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r)
(mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l)
(mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = v), (hsize r = gv4), (hsize l = v)
(rank r = v), (rank r = gv4), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv4), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv4)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv4), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 5 (14)
(v < v), (v < gv4), (gv4 < v), (gv4 < gv4), (v <= v), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = v), (v = gv4)
(gv4 = gv4), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l)
(hsize r < gv4), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv4), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv4), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv4), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv4), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv4), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv4), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv4)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv4), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv4), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv4), (~ gv4 < v)
(~ v <= v), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> v), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv4), (hinsert r v = r), (hinsert r v = l), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l v = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv4), (merge r r = hinsert l v), (merge r r = hinsert l gv4), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv4), (merge r l = hinsert l v), (merge r l = hinsert l gv4), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv4), (merge l r = hinsert l v), (merge l r = hinsert l gv4), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv4), (merge l l = hinsert l v), (merge l l = hinsert l gv4), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv4)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv4), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv4), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv4), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l)
(mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r)
(mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l)
(mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = v), (hsize r = gv4), (hsize l = v)
(rank r = v), (rank r = gv4), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv4), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv4)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv4), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 5 (15)
(v < v), (v < gv4), (gv4 < v), (gv4 < gv4), (v <= v), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = v), (v = gv4)
(gv4 = gv4), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l)
(hsize r < gv4), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv4), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv4), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv4), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv4), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv4), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv4), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv4)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv4), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv4), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv4), (~ gv4 < v)
(~ v <= v), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> v), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv4), (hinsert r v = r), (hinsert r v = l), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l v = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv4), (merge r r = hinsert l v), (merge r r = hinsert l gv4), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv4), (merge r l = hinsert l v), (merge r l = hinsert l gv4), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv4), (merge l r = hinsert l v), (merge l r = hinsert l gv4), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv4), (merge l l = hinsert l v), (merge l l = hinsert l gv4), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv4)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv4), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv4), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv4), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l)
(mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r)
(mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l)
(mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = v), (hsize r = gv4), (hsize l = v)
(rank r = v), (rank r = gv4), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv4), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv4)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv4), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 5 (16)
(v < v), (v < gv4), (gv4 < v), (gv4 < gv4), (v <= v), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = v), (v = gv4)
(gv4 = gv4), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l)
(hsize r < gv4), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv4), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv4), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv4), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv4), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv4), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv4), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv4)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv4), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv4), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv4), (~ gv4 < v)
(~ v <= v), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> v), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv4), (hinsert r v = r), (hinsert r v = l), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l v = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv4), (merge r r = hinsert l v), (merge r r = hinsert l gv4), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv4), (merge r l = hinsert l v), (merge r l = hinsert l gv4), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv4), (merge l r = hinsert l v), (merge l r = hinsert l gv4), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv4), (merge l l = hinsert l v), (merge l l = hinsert l gv4), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv4)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv4), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv4), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv4), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l)
(mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r)
(mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l)
(mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = v), (hsize r = gv4), (hsize l = v)
(rank r = v), (rank r = gv4), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv4), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv4)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv4), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 6 (17)
(false = gv6), (true = gv6), (v < v), (v <= v), (gv6 = gv6), (v = v), (r = r), (r = l), (l = r), (l = l)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv6), (~ v < v), (~ v <= v), (gv6 <> gv6), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv6), (None = Some v), (has_leftist_property r = gv6), (has_leftist_property l = gv6)

Label: 6 (18)
(false = gv6), (true = gv6), (v < v), (v <= v), (gv6 = gv6), (v = v), (r = r), (r = l), (l = r), (l = l)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv6), (~ v < v), (~ v <= v), (gv6 <> gv6), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv6), (None = Some v), (has_leftist_property r = gv6), (has_leftist_property l = gv6)

Label: 6 (19)
(false = gv6), (true = gv6), (v < v), (v <= v), (gv6 = gv6), (v = v), (r = r), (r = l), (l = r), (l = l)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv6), (~ v < v), (~ v <= v), (gv6 <> gv6), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv6), (None = Some v), (has_leftist_property r = gv6), (has_leftist_property l = gv6)

Label: 7 (20)
(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 7 (21)
(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 7 (22)
(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 137.181 seconds


Label: 7 (0)
Abducted Assumption: (has_leftist_property l = true)
Positive Examples:
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   etc ...

Negative Examples:
   [l := (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf))
   (Heap 0 2 Hleaf Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 2; gv2 := (rank
   (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf))
      (Heap 0 2 Hleaf Hleaf)) + 1); gv4 := 1; gv5 := 0; gv3 := (rank
   (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf))
      (Heap 0 2 Hleaf Hleaf)))]
   [l := (Heap 0 1
   (Heap 0 3
      (Heap 0 4
         (Heap 6 0 Hleaf
            (Heap 3 6 (Heap 3 3 Hleaf Hleaf) (Heap 4 4 Hleaf Hleaf))) Hleaf)
      (Heap 5 3 Hleaf Hleaf))
   (Heap 1 3
      (Heap 3 2 (Heap 5 2 Hleaf (Heap 0 3 (Heap 4 6 Hleaf Hleaf) Hleaf))
         (Heap 3 4 Hleaf (Heap 0 5 Hleaf (Heap 0 1 Hleaf Hleaf)))) Hleaf)); r := (Heap 1 0 Hleaf Hleaf); v := 0; gv2 := (rank
   (Heap 0 1
      (Heap 0 3
         (Heap 0 4
            (Heap 6 0 Hleaf
               (Heap 3 6 (Heap 3 3 Hleaf Hleaf) (Heap 4 4 Hleaf Hleaf)))
            Hleaf) (Heap 5 3 Hleaf Hleaf))
      (Heap 1 3
         (Heap 3 2 (Heap 5 2 Hleaf (Heap 0 3 (Heap 4 6 Hleaf Hleaf) Hleaf))
            (Heap 3 4 Hleaf (Heap 0 5 Hleaf (Heap 0 1 Hleaf Hleaf)))) Hleaf)) +
 1); gv4 := 1; gv5 := 0; gv3 := (rank
   (Heap 0 1
      (Heap 0 3
         (Heap 0 4
            (Heap 6 0 Hleaf
               (Heap 3 6 (Heap 3 3 Hleaf Hleaf) (Heap 4 4 Hleaf Hleaf)))
            Hleaf) (Heap 5 3 Hleaf Hleaf))
      (Heap 1 3
         (Heap 3 2 (Heap 5 2 Hleaf (Heap 0 3 (Heap 4 6 Hleaf Hleaf) Hleaf))
            (Heap 3 4 Hleaf (Heap 0 5 Hleaf (Heap 0 1 Hleaf Hleaf)))) Hleaf)))]
   [l := (Heap 0 1 (Heap 2 2 Hleaf Hleaf) Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1; gv2 := (rank (Heap 0 1 (Heap 2 2 Hleaf Hleaf) Hleaf) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 1 (Heap 2 2 Hleaf Hleaf) Hleaf))]
   [l := (Heap 0 1 (Heap 0 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 0 Hleaf Hleaf); v := 2; gv2 := (rank (Heap 0 1 (Heap 0 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)) + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0; gv2 := (rank (Heap 0 0 Hleaf Hleaf) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 0 Hleaf Hleaf))]
   [l := (Heap 0 2 (Heap 0 1 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1; gv2 := (rank (Heap 0 2 (Heap 0 1 Hleaf Hleaf) Hleaf) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 2 (Heap 0 1 Hleaf Hleaf) Hleaf))]
   [l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := 0]
   [l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 0; gv2 := (rank (Heap 0 1 Hleaf Hleaf) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 1 Hleaf Hleaf))]
   [l := (Heap 0 2 Hleaf Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 0; gv2 := (rank (Heap 0 2 Hleaf Hleaf) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 2 Hleaf Hleaf))]
   [l := (Heap 0 3 Hleaf (Heap 1 3 Hleaf (Heap 3 2 Hleaf Hleaf))); r := (Heap 1 3 Hleaf Hleaf); v := 1; gv2 := (rank (Heap 0 3 Hleaf (Heap 1 3 Hleaf (Heap 3 2 Hleaf Hleaf))) + 1); gv4 := 1; gv5 := 0; gv3 := (rank (Heap 0 3 Hleaf (Heap 1 3 Hleaf (Heap 3 2 Hleaf Hleaf))))]
   etc ...

(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)
(gv4 < v), (gv4 < gv4), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = gv4), (gv4 = v), (gv4 = gv4), (gv4 < hsize r), (gv4 < hsize l)
(gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l), (hsize r < gv4), (hsize l < gv4), (rank r < gv4), (rank l < gv4), (right_height r < gv4), (right_height l < gv4), (gv4 <= hsize r)
(gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= gv4), (hsize l <= gv4), (rank r <= gv4), (rank l <= gv4), (right_height r <= gv4), (right_height l <= gv4)
(~ gv4 < v), (~ gv4 < gv4), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (None = Some gv4), (hinsert r gv4 = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = hinsert r gv4), (merge r r = hinsert l gv4), (merge r l = hinsert r gv4), (merge r l = hinsert l gv4), (merge l r = hinsert r gv4), (merge l r = hinsert l gv4), (merge l l = hinsert r gv4), (merge l l = hinsert l gv4)
(mergea v r r = hinsert l gv4), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l gv4), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l gv4), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l gv4), (mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v)
(mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l), (mergea gv4 r l = r), (mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4)
(mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r), (mergea gv4 l r = l), (mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v)
(mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l), (mergea gv4 l l = hinsert r v), (mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4)
(mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = gv4), (hsize l = gv4), (rank r = gv4), (rank l = gv4), (right_height r = gv4), (right_height l = gv4), (v < gv3)
(gv3 < gv3), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (v = gv3), (gv3 = v), (gv3 = gv3), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l)
(gv3 < right_height l), (gv3 < right_height r), (hsize l < gv3), (hsize r < gv3), (rank l < gv3), (rank r < gv3), (right_height l < gv3), (right_height r < gv3), (gv3 <= hsize l), (gv3 <= hsize r)
(gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= gv3), (hsize r <= gv3), (rank l <= gv3), (rank r <= gv3), (right_height l <= gv3), (right_height r <= gv3), (~ v < gv3)
(~ gv3 < gv3), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (v <> gv3), (gv3 <> v), (gv3 <> gv3), (None = Some gv3), (hinsert l gv3 = l), (hinsert l gv3 = r)
(hinsert r gv3 = r), (merge l l = hinsert l gv3), (merge l l = hinsert r gv3), (merge l r = hinsert l gv3), (merge l r = hinsert r gv3), (merge r l = hinsert l gv3), (merge r l = hinsert r gv3), (merge r r = hinsert l gv3), (merge r r = hinsert r gv3), (mergea v l l = hinsert l gv3)
(mergea v l r = hinsert l gv3), (mergea v l r = hinsert r gv3), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r gv3), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r gv3), (mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3)
(mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r), (mergea gv3 l r = l), (mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v)
(mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l), (mergea gv3 r l = r), (mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3)
(mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r), (mergea gv3 r r = hinsert l v), (mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l)
(mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = gv3), (hsize r = gv3), (rank l = gv3), (rank r = gv3), (right_height l = gv3), (right_height r = gv3), (v < gv2), (gv2 < v)
(v <= gv2), (gv2 <= v), (gv2 <= gv2), (v = gv2), (gv2 = v), (gv2 = gv2), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r)
(gv2 < right_height r), (hsize l < gv2), (hsize r < gv2), (rank l < gv2), (rank r < gv2), (right_height l < gv2), (right_height r < gv2), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l)
(gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= gv2), (hsize r <= gv2), (rank l <= gv2), (rank r <= gv2), (right_height l <= gv2), (right_height r <= gv2), (~ v < gv2), (~ gv2 < v)
(~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (v <> gv2), (gv2 <> v), (gv2 <> gv2), (None = Some gv2), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r gv2 = l)
(merge l l = hinsert l gv2), (merge l l = hinsert r gv2), (merge l r = hinsert l gv2), (merge l r = hinsert r gv2), (merge r l = hinsert l gv2), (merge r l = hinsert r gv2), (merge r r = hinsert l gv2), (merge r r = hinsert r gv2), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r gv2)
(mergea v l r = hinsert r gv2), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r gv2), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r gv2), (mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v)
(mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r), (mergea gv2 l r = l), (mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2)
(mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l), (mergea gv2 r l = r), (mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l)
(mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r), (mergea gv2 r r = hinsert l v), (mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r)
(mergea gv2 r r = merge r r), (hsize l = gv2), (hsize r = gv2), (rank l = gv2), (rank r = gv2), (right_height l = gv2), (right_height r = gv2), (v < gv5), (gv5 < v), (gv5 < gv5)
(gv5 <= v), (gv5 <= gv5), (v = gv5), (gv5 = v), (gv5 = gv5), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r)
(hsize r < gv5), (hsize l < gv5), (rank r < gv5), (rank l < gv5), (right_height r < gv5), (right_height l < gv5), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l)
(gv5 <= right_height l), (hsize r <= gv5), (hsize l <= gv5), (rank r <= gv5), (rank l <= gv5), (right_height r <= gv5), (right_height l <= gv5), (~ v < gv5), (~ gv5 < v), (~ gv5 < gv5)
(~ gv5 <= v), (~ gv5 <= gv5), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (None = Some gv5), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l gv5 = r), (hinsert l gv5 = l)
(merge r r = hinsert l gv5), (merge r l = hinsert r gv5), (merge r l = hinsert l gv5), (merge l r = hinsert r gv5), (merge l r = hinsert l gv5), (merge l l = hinsert r gv5), (merge l l = hinsert l gv5), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l gv5), (mergea v r l = hinsert r gv5)
(mergea v l r = hinsert r gv5), (mergea v l r = hinsert l gv5), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l gv5), (mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5)
(mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l), (mergea gv5 r l = r), (mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r)
(mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r), (mergea gv5 l r = l), (mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l)
(mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l), (mergea gv5 l l = hinsert r v), (mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r)
(hsize r = gv5), (hsize l = gv5), (rank r = gv5), (rank l = gv5), (right_height r = gv5), (right_height l = gv5)

Label: 2 (1)
Abducted Assumption: (rank l + 1 = gv2)
Positive Examples:
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 2]
   [gv2 := 2; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 2]
   [gv2 := 1; l := Hleaf; r := (Heap 2 1 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 0]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv2 := 1; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1]
   etc ...

Negative Examples:
   [gv2 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 5]
   [gv2 := 2; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 4]
   [gv2 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv2 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 2]
   [gv2 := 4; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 5]
   [gv2 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv2 := 3; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv2 := 2; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv2 := 2; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv2 := 2; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   etc ...

(v < v), (v < gv2), (gv2 < v), (gv2 < gv2), (v <= v), (v <= gv2), (gv2 <= v), (gv2 <= gv2), (l = l), (l = r)
(r = r), (v = v), (v = gv2), (gv2 = v), (gv2 = gv2), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l), (gv2 < right_height r)
(hsize l < gv2), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv2), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv2), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv2), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv2), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r), (gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv2), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv2), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv2)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv2), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv2), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv2), (~ gv2 < v)
(~ v <= v), (~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv2)
(gv2 <> gv2), (None = Some v), (None = Some gv2), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r v = l)
(hinsert r gv2 = l), (hinsert r gv2 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv2), (merge l l = hinsert r v), (merge l l = hinsert r gv2), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv2), (merge l r = hinsert r v), (merge l r = hinsert r gv2), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv2), (merge r l = hinsert r v), (merge r l = hinsert r gv2), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv2), (merge r r = hinsert r v), (merge r r = hinsert r gv2), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv2)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv2), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv2), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv2), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv2), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2), (mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r)
(mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l), (mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l)
(mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r), (mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r)
(mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l), (mergea gv2 r r = merge r r), (hsize l = v), (hsize l = gv2), (hsize r = v)
(rank l = v), (rank l = gv2), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv2), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv2)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv2), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 7 (2)
Abducted Assumption: (has_leftist_property r = true)
Positive Examples:
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 0; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   etc ...

Negative Examples:
   [l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 1 (Heap 2 4 Hleaf Hleaf) Hleaf); v := 4; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 5 2 (Heap 4 4 Hleaf Hleaf) Hleaf); v := 3; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 1 Hleaf (Heap 0 1 Hleaf Hleaf)); v := 2; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 1 Hleaf (Heap 2 0 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 2 2 (Heap 0 0 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 4 5 (Heap 5 3 (Heap 1 3 Hleaf Hleaf) Hleaf) (Heap 6 2 Hleaf Hleaf)); v := 1; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   [l := Hleaf; r := (Heap 1 3 (Heap 3 5 Hleaf (Heap 1 3 Hleaf Hleaf))
   (Heap 2 2 (Heap 4 4 Hleaf (Heap 0 0 Hleaf Hleaf))
      (Heap 4 3 (Heap 3 1 Hleaf (Heap 3 0 Hleaf Hleaf))
         (Heap 0 1 Hleaf (Heap 3 4 Hleaf Hleaf))))); v := 4; gv2 := 1; gv4 := 1; gv5 := 0; gv3 := (rank Hleaf)]
   [l := Hleaf; r := (Heap 1 4
   (Heap 3 2 Hleaf (Heap 1 0 (Heap 1 3 (Heap 4 2 Hleaf Hleaf) Hleaf) Hleaf))
   (Heap 3 5
      (Heap 3 1 (Heap 3 4 Hleaf (Heap 0 5 Hleaf Hleaf))
         (Heap 1 2 Hleaf (Heap 4 0 Hleaf Hleaf)))
      (Heap 5 0 Hleaf (Heap 3 5 (Heap 1 3 Hleaf Hleaf) Hleaf)))); v := 3; gv2 := (rank Hleaf + 1); gv4 := 1; gv5 := 0; gv3 := 0]
   etc ...

(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)
(gv4 < v), (gv4 < gv4), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = gv4), (gv4 = v), (gv4 = gv4), (gv4 < hsize r), (gv4 < hsize l)
(gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l), (hsize r < gv4), (hsize l < gv4), (rank r < gv4), (rank l < gv4), (right_height r < gv4), (right_height l < gv4), (gv4 <= hsize r)
(gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= gv4), (hsize l <= gv4), (rank r <= gv4), (rank l <= gv4), (right_height r <= gv4), (right_height l <= gv4)
(~ gv4 < v), (~ gv4 < gv4), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (None = Some gv4), (hinsert r gv4 = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = hinsert r gv4), (merge r r = hinsert l gv4), (merge r l = hinsert r gv4), (merge r l = hinsert l gv4), (merge l r = hinsert r gv4), (merge l r = hinsert l gv4), (merge l l = hinsert r gv4), (merge l l = hinsert l gv4)
(mergea v r r = hinsert l gv4), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l gv4), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l gv4), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l gv4), (mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v)
(mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l), (mergea gv4 r l = r), (mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4)
(mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r), (mergea gv4 l r = l), (mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v)
(mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l), (mergea gv4 l l = hinsert r v), (mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4)
(mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = gv4), (hsize l = gv4), (rank r = gv4), (rank l = gv4), (right_height r = gv4), (right_height l = gv4), (v < gv3)
(gv3 < gv3), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (v = gv3), (gv3 = v), (gv3 = gv3), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l)
(gv3 < right_height l), (gv3 < right_height r), (hsize l < gv3), (hsize r < gv3), (rank l < gv3), (rank r < gv3), (right_height l < gv3), (right_height r < gv3), (gv3 <= hsize l), (gv3 <= hsize r)
(gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= gv3), (hsize r <= gv3), (rank l <= gv3), (rank r <= gv3), (right_height l <= gv3), (right_height r <= gv3), (~ v < gv3)
(~ gv3 < gv3), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (v <> gv3), (gv3 <> v), (gv3 <> gv3), (None = Some gv3), (hinsert l gv3 = l), (hinsert l gv3 = r)
(hinsert r gv3 = r), (merge l l = hinsert l gv3), (merge l l = hinsert r gv3), (merge l r = hinsert l gv3), (merge l r = hinsert r gv3), (merge r l = hinsert l gv3), (merge r l = hinsert r gv3), (merge r r = hinsert l gv3), (merge r r = hinsert r gv3), (mergea v l l = hinsert l gv3)
(mergea v l r = hinsert l gv3), (mergea v l r = hinsert r gv3), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r gv3), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r gv3), (mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3)
(mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r), (mergea gv3 l r = l), (mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v)
(mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l), (mergea gv3 r l = r), (mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3)
(mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r), (mergea gv3 r r = hinsert l v), (mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l)
(mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = gv3), (hsize r = gv3), (rank l = gv3), (rank r = gv3), (right_height l = gv3), (right_height r = gv3), (v < gv2), (gv2 < v)
(v <= gv2), (gv2 <= v), (gv2 <= gv2), (v = gv2), (gv2 = v), (gv2 = gv2), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r)
(gv2 < right_height r), (hsize l < gv2), (hsize r < gv2), (rank l < gv2), (rank r < gv2), (right_height l < gv2), (right_height r < gv2), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l)
(gv2 <= right_height l), (gv2 <= right_height r), (hsize l <= gv2), (hsize r <= gv2), (rank l <= gv2), (rank r <= gv2), (right_height l <= gv2), (right_height r <= gv2), (~ v < gv2), (~ gv2 < v)
(~ v <= gv2), (~ gv2 <= v), (~ gv2 <= gv2), (v <> gv2), (gv2 <> v), (gv2 <> gv2), (None = Some gv2), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r gv2 = l)
(merge l l = hinsert l gv2), (merge l l = hinsert r gv2), (merge l r = hinsert l gv2), (merge l r = hinsert r gv2), (merge r l = hinsert l gv2), (merge r l = hinsert r gv2), (merge r r = hinsert l gv2), (merge r r = hinsert r gv2), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r gv2)
(mergea v l r = hinsert r gv2), (mergea v r l = hinsert l gv2), (mergea v r l = hinsert r gv2), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r gv2), (mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v)
(mergea gv2 l l = merge l l), (mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r), (mergea gv2 l r = l), (mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2)
(mergea gv2 l r = merge l r), (mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l), (mergea gv2 r l = r), (mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l)
(mergea gv2 r l = merge r l), (mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r), (mergea gv2 r r = hinsert l v), (mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r)
(mergea gv2 r r = merge r r), (hsize l = gv2), (hsize r = gv2), (rank l = gv2), (rank r = gv2), (right_height l = gv2), (right_height r = gv2), (v < gv5), (gv5 < v), (gv5 < gv5)
(gv5 <= v), (gv5 <= gv5), (v = gv5), (gv5 = v), (gv5 = gv5), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r)
(hsize r < gv5), (hsize l < gv5), (rank r < gv5), (rank l < gv5), (right_height r < gv5), (right_height l < gv5), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l)
(gv5 <= right_height l), (hsize r <= gv5), (hsize l <= gv5), (rank r <= gv5), (rank l <= gv5), (right_height r <= gv5), (right_height l <= gv5), (~ v < gv5), (~ gv5 < v), (~ gv5 < gv5)
(~ gv5 <= v), (~ gv5 <= gv5), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (None = Some gv5), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l gv5 = r), (hinsert l gv5 = l)
(merge r r = hinsert l gv5), (merge r l = hinsert r gv5), (merge r l = hinsert l gv5), (merge l r = hinsert r gv5), (merge l r = hinsert l gv5), (merge l l = hinsert r gv5), (merge l l = hinsert l gv5), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l gv5), (mergea v r l = hinsert r gv5)
(mergea v l r = hinsert r gv5), (mergea v l r = hinsert l gv5), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l gv5), (mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5)
(mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l), (mergea gv5 r l = r), (mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r)
(mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r), (mergea gv5 l r = l), (mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l)
(mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l), (mergea gv5 l l = hinsert r v), (mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r)
(hsize r = gv5), (hsize l = gv5), (rank r = gv5), (rank l = gv5), (right_height r = gv5), (right_height l = gv5)

Label: 3 (3)
Abducted Assumption: (gv3 < rank r)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 2; l := (Heap 2 2 (Heap 1 1 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv3 := 1; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 3]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 5]
   [gv3 := 1; l := (Heap 1 2 Hleaf Hleaf); r := Hleaf; v := 0]
   [gv3 := 1; l := (Heap 1 3 Hleaf Hleaf); r := Hleaf; v := 1]
   [gv3 := 1; l := (Heap 1 1 Hleaf Hleaf); r := Hleaf; v := 2]
   [gv3 := 1; l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 1]
   etc ...

(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 6 (4)
Abducted Assumption: (has_leftist_property r = gv6)
Positive Examples:
   [gv6 := false; l := (Heap 2 5 (Heap 0 5 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf)); r := (Heap 4 2 (Heap 4 6 Hleaf Hleaf)
   (Heap 6 2
      (Heap 5 0 (Heap 3 0 Hleaf (Heap 0 2 (Heap 0 6 Hleaf Hleaf) Hleaf))
         Hleaf)
      (Heap 3 5 Hleaf
         (Heap 6 4 Hleaf
            (Heap 1 6 (Heap 2 4 Hleaf Hleaf) (Heap 5 4 Hleaf Hleaf)))))); v := 2]
   [gv6 := false; l := (Heap 0 0
   (Heap 2 1 (Heap 4 4 Hleaf (Heap 3 1 Hleaf (Heap 5 2 Hleaf Hleaf)))
      (Heap 1 1 (Heap 5 0 (Heap 2 4 Hleaf Hleaf) (Heap 1 5 Hleaf Hleaf))
         Hleaf))
   (Heap 5 3 (Heap 0 5 (Heap 3 5 Hleaf Hleaf) (Heap 4 0 Hleaf Hleaf)) Hleaf)); r := (Heap 5 0 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 4]
   [gv6 := false; l := (Heap 0 4 Hleaf
   (Heap 4 2
      (Heap 4 2 (Heap 5 3 (Heap 5 4 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
         Hleaf) Hleaf)); r := (Heap 3 4
   (Heap 1 0 Hleaf
      (Heap 1 4 Hleaf
         (Heap 1 3 (Heap 0 4 Hleaf Hleaf) (Heap 2 5 Hleaf Hleaf))))
   (Heap 0 5 Hleaf (Heap 3 1 (Heap 1 4 Hleaf (Heap 1 4 Hleaf Hleaf)) Hleaf))); v := 0]
   [gv6 := false; l := (Heap 1 4 Hleaf
   (Heap 5 6 Hleaf
      (Heap 1 6 (Heap 5 0 Hleaf Hleaf)
         (Heap 6 6 Hleaf
            (Heap 1 0 (Heap 5 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 3 2 Hleaf Hleaf); v := 5]
   [gv6 := false; l := (Heap 2 1
   (Heap 3 3 (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf) (Heap 2 0 Hleaf Hleaf))
   Hleaf); r := (Heap 4 3 Hleaf (Heap 4 3 Hleaf Hleaf)); v := 1]
   [gv6 := false; l := (Heap 2 4
   (Heap 6 0
      (Heap 2 6 (Heap 1 5 (Heap 6 0 Hleaf (Heap 1 3 Hleaf Hleaf)) Hleaf)
         Hleaf) Hleaf) (Heap 3 6 Hleaf Hleaf)); r := (Heap 6 3 Hleaf Hleaf); v := 0]
   [gv6 := false; l := (Heap 2 4
   (Heap 2 0 (Heap 6 4 Hleaf Hleaf)
      (Heap 1 3
         (Heap 5 0 (Heap 0 0 (Heap 6 5 Hleaf Hleaf) (Heap 0 6 Hleaf Hleaf))
            (Heap 6 6 (Heap 4 2 Hleaf Hleaf) (Heap 3 2 Hleaf Hleaf)))
         (Heap 2 1 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)))
   (Heap 2 4 (Heap 3 5 (Heap 1 5 (Heap 1 6 Hleaf Hleaf) Hleaf) Hleaf)
      (Heap 6 6 Hleaf
         (Heap 5 0 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf)
            (Heap 0 6 (Heap 0 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 4 0 (Heap 5 1 Hleaf Hleaf)
   (Heap 4 5 Hleaf
      (Heap 2 6 Hleaf
         (Heap 5 5 (Heap 4 5 Hleaf Hleaf)
            (Heap 3 3 (Heap 5 3 Hleaf Hleaf) Hleaf))))); v := 5]
   [gv6 := false; l := (Heap 1 0 (Heap 0 1 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 1 (Heap 0 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := false; l := (Heap 1 5
   (Heap 3 0 (Heap 1 1 Hleaf (Heap 2 5 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 5 1 (Heap 1 3 Hleaf (Heap 5 4 Hleaf Hleaf)) Hleaf)) Hleaf); r := (Heap 3 3 Hleaf
   (Heap 4 5 (Heap 2 0 (Heap 4 0 (Heap 5 4 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); v := 4]
   [gv6 := false; l := (Heap 1 0 Hleaf (Heap 5 1 Hleaf (Heap 5 2 Hleaf Hleaf))); r := (Heap 3 3 Hleaf
   (Heap 0 1
      (Heap 3 1 (Heap 3 4 (Heap 4 2 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 3 5 (Heap 1 4 Hleaf Hleaf)
         (Heap 5 1 (Heap 4 0 Hleaf Hleaf) (Heap 3 3 Hleaf Hleaf))))); v := 0]
   etc ...

Negative Examples:
   [gv6 := true; l := Hleaf; r := (Heap 5 5 Hleaf Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 4 2 Hleaf (Heap 0 5 Hleaf Hleaf)); v := 5]
   [gv6 := true; l := Hleaf; r := (Heap 1 2 (Heap 0 2 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 2 3 Hleaf
   (Heap 1 5 (Heap 1 5 (Heap 5 6 Hleaf (Heap 0 5 Hleaf Hleaf)) Hleaf)
      (Heap 2 2 (Heap 2 2 Hleaf Hleaf) (Heap 6 3 Hleaf Hleaf)))); v := 3]
   [gv6 := true; l := Hleaf; r := (Heap 4 3 Hleaf (Heap 3 0 Hleaf (Heap 0 3 Hleaf (Heap 2 2 Hleaf Hleaf)))); v := 4]
   [gv6 := true; l := Hleaf; r := (Heap 4 1 (Heap 3 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 1 2 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 0]
   [gv6 := true; l := Hleaf; r := (Heap 3 3 Hleaf
   (Heap 1 4
      (Heap 4 3
         (Heap 2 2 (Heap 0 3 (Heap 2 2 Hleaf Hleaf) (Heap 6 0 Hleaf Hleaf))
            (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf))
         (Heap 4 3 Hleaf (Heap 4 1 Hleaf Hleaf))) Hleaf)); v := 5]
   [gv6 := true; l := Hleaf; r := (Heap 5 4 (Heap 4 5 (Heap 4 1 Hleaf Hleaf) Hleaf) Hleaf); v := 4]
   [gv6 := true; l := Hleaf; r := (Heap 6 0
   (Heap 5 5 (Heap 1 6 Hleaf Hleaf)
      (Heap 3 6 Hleaf (Heap 3 0 Hleaf (Heap 6 1 Hleaf Hleaf)))) Hleaf); v := 4]
   etc ...

(false = gv6), (true = gv6), (v < v), (v <= v), (gv6 = gv6), (v = v), (r = r), (r = l), (l = r), (l = l)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv6), (~ v < v), (~ v <= v), (gv6 <> gv6), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv6), (None = Some v), (has_leftist_property r = gv6), (has_leftist_property l = gv6)

Label: 0 (5)
Abducted Assumption: (0 = gv5)
Positive Examples:
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 5]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv5 := 0; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv5 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv5 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv5 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv5 := 2; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv5 := 2; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 0]
   [gv5 := 4; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv5 := 1; l := Hleaf; r := (Heap 1 6 Hleaf Hleaf); v := 5]
   [gv5 := 5; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv5 := 2; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv5 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv5 := 2; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv5 := 3; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   etc ...

(v < v), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= v), (v <= gv5), (gv5 <= v), (gv5 <= gv5), (v = v), (v = gv5)
(gv5 = gv5), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize r < gv5), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv5), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv5), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv5), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv5), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r), (gv5 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv5), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv5), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv5)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv5), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv5), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv5), (~ gv5 < v)
(~ v <= v), (~ v <= gv5), (~ gv5 <= v), (~ gv5 <= gv5), (v <> v), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv5), (hinsert r v = r), (hinsert r v = l), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l v = r)
(hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv5), (merge r r = hinsert l v), (merge r r = hinsert l gv5), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv5), (merge r l = hinsert l v), (merge r l = hinsert l gv5), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv5), (merge l r = hinsert l v), (merge l r = hinsert l gv5), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv5), (merge l l = hinsert l v), (merge l l = hinsert l gv5), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv5)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv5), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv5), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv5), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv5), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r), (mergea gv5 r r = merge r l), (mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l)
(mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l), (mergea gv5 r l = merge l r), (mergea gv5 r l = merge l l), (mergea gv5 l r = r)
(mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r), (mergea gv5 l r = merge l l), (mergea gv5 l l = r), (mergea gv5 l l = l)
(mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l), (hsize r = v), (hsize r = gv5), (hsize l = v)
(rank r = v), (rank r = gv5), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv5), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv5)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv5), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 1 (6)
Abducted Assumption: (has_leftist_property (Heap (rank l + 1) v r l) = gv0)
Positive Examples:
   [gv0 := true; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv0 := true; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv0 := true; l := Hleaf; r := (Heap 2 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv0 := true; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv0 := true; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [gv0 := true; l := Hleaf; r := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 0]
   [gv0 := true; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 4]
   etc ...

Negative Examples:
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 3]
   [gv0 := false; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 5]
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 1]
   [gv0 := false; l := Hleaf; r := (Heap 2 2 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0]
   [gv0 := false; l := Hleaf; r := (Heap 1 0 (Heap 1 5 Hleaf Hleaf) Hleaf); v := 2]
   [gv0 := false; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 5]
   [gv0 := false; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv0 := false; l := Hleaf; r := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv0 := false; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 3]
   [gv0 := false; l := Hleaf; r := (Heap 1 6 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 3]
   etc ...

(false = gv0), (true = gv0), (v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (gv0 = gv0)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv0), (~ v < v), (~ v <= v), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (gv0 <> gv0), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv0), (None = Some v), (has_leftist_property r = gv0), (has_leftist_property l = gv0)

Label: 6 (7)
Abducted Assumption: (has_leftist_property l = gv6)
Positive Examples:
   [gv6 := false; l := (Heap 2 5 (Heap 0 5 Hleaf Hleaf) (Heap 3 0 Hleaf Hleaf)); r := (Heap 4 2 (Heap 4 6 Hleaf Hleaf)
   (Heap 6 2
      (Heap 5 0 (Heap 3 0 Hleaf (Heap 0 2 (Heap 0 6 Hleaf Hleaf) Hleaf))
         Hleaf)
      (Heap 3 5 Hleaf
         (Heap 6 4 Hleaf
            (Heap 1 6 (Heap 2 4 Hleaf Hleaf) (Heap 5 4 Hleaf Hleaf)))))); v := 2]
   [gv6 := false; l := (Heap 0 0
   (Heap 2 1 (Heap 4 4 Hleaf (Heap 3 1 Hleaf (Heap 5 2 Hleaf Hleaf)))
      (Heap 1 1 (Heap 5 0 (Heap 2 4 Hleaf Hleaf) (Heap 1 5 Hleaf Hleaf))
         Hleaf))
   (Heap 5 3 (Heap 0 5 (Heap 3 5 Hleaf Hleaf) (Heap 4 0 Hleaf Hleaf)) Hleaf)); r := (Heap 5 0 (Heap 2 1 Hleaf Hleaf) Hleaf); v := 4]
   [gv6 := false; l := (Heap 0 4 Hleaf
   (Heap 4 2
      (Heap 4 2 (Heap 5 3 (Heap 5 4 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
         Hleaf) Hleaf)); r := (Heap 3 4
   (Heap 1 0 Hleaf
      (Heap 1 4 Hleaf
         (Heap 1 3 (Heap 0 4 Hleaf Hleaf) (Heap 2 5 Hleaf Hleaf))))
   (Heap 0 5 Hleaf (Heap 3 1 (Heap 1 4 Hleaf (Heap 1 4 Hleaf Hleaf)) Hleaf))); v := 0]
   [gv6 := false; l := (Heap 1 4 Hleaf
   (Heap 5 6 Hleaf
      (Heap 1 6 (Heap 5 0 Hleaf Hleaf)
         (Heap 6 6 Hleaf
            (Heap 1 0 (Heap 5 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 3 2 Hleaf Hleaf); v := 5]
   [gv6 := false; l := (Heap 2 1
   (Heap 3 3 (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf) (Heap 2 0 Hleaf Hleaf))
   Hleaf); r := (Heap 4 3 Hleaf (Heap 4 3 Hleaf Hleaf)); v := 1]
   [gv6 := false; l := (Heap 2 4
   (Heap 6 0
      (Heap 2 6 (Heap 1 5 (Heap 6 0 Hleaf (Heap 1 3 Hleaf Hleaf)) Hleaf)
         Hleaf) Hleaf) (Heap 3 6 Hleaf Hleaf)); r := (Heap 6 3 Hleaf Hleaf); v := 0]
   [gv6 := false; l := (Heap 2 4
   (Heap 2 0 (Heap 6 4 Hleaf Hleaf)
      (Heap 1 3
         (Heap 5 0 (Heap 0 0 (Heap 6 5 Hleaf Hleaf) (Heap 0 6 Hleaf Hleaf))
            (Heap 6 6 (Heap 4 2 Hleaf Hleaf) (Heap 3 2 Hleaf Hleaf)))
         (Heap 2 1 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf) Hleaf)))
   (Heap 2 4 (Heap 3 5 (Heap 1 5 (Heap 1 6 Hleaf Hleaf) Hleaf) Hleaf)
      (Heap 6 6 Hleaf
         (Heap 5 0 (Heap 0 1 (Heap 6 5 Hleaf Hleaf) Hleaf)
            (Heap 0 6 (Heap 0 2 Hleaf Hleaf) (Heap 6 2 Hleaf Hleaf)))))); r := (Heap 4 0 (Heap 5 1 Hleaf Hleaf)
   (Heap 4 5 Hleaf
      (Heap 2 6 Hleaf
         (Heap 5 5 (Heap 4 5 Hleaf Hleaf)
            (Heap 3 3 (Heap 5 3 Hleaf Hleaf) Hleaf))))); v := 5]
   [gv6 := false; l := (Heap 1 0 (Heap 0 1 Hleaf Hleaf) (Heap 2 2 Hleaf Hleaf)); r := (Heap 2 1 (Heap 0 1 Hleaf Hleaf) (Heap 2 1 Hleaf Hleaf)); v := 0]
   [gv6 := false; l := (Heap 1 5
   (Heap 3 0 (Heap 1 1 Hleaf (Heap 2 5 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 5 1 (Heap 1 3 Hleaf (Heap 5 4 Hleaf Hleaf)) Hleaf)) Hleaf); r := (Heap 3 3 Hleaf
   (Heap 4 5 (Heap 2 0 (Heap 4 0 (Heap 5 4 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); v := 4]
   [gv6 := false; l := (Heap 1 0 Hleaf (Heap 5 1 Hleaf (Heap 5 2 Hleaf Hleaf))); r := (Heap 3 3 Hleaf
   (Heap 0 1
      (Heap 3 1 (Heap 3 4 (Heap 4 2 Hleaf Hleaf) Hleaf)
         (Heap 1 3 Hleaf (Heap 4 1 Hleaf Hleaf)))
      (Heap 3 5 (Heap 1 4 Hleaf Hleaf)
         (Heap 5 1 (Heap 4 0 Hleaf Hleaf) (Heap 3 3 Hleaf Hleaf))))); v := 0]
   etc ...

Negative Examples:
   [gv6 := true; l := (Heap 0 2 Hleaf (Heap 1 2 Hleaf Hleaf)); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv6 := true; l := (Heap 0 4 Hleaf
   (Heap 3 3 (Heap 0 6 (Heap 2 1 (Heap 6 0 Hleaf Hleaf) Hleaf) Hleaf) Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 5]
   [gv6 := true; l := (Heap 0 2 (Heap 0 2 (Heap 0 2 Hleaf Hleaf) (Heap 3 1 Hleaf Hleaf))
   (Heap 2 3 (Heap 3 0 Hleaf Hleaf) Hleaf)); r := (Heap 1 1 Hleaf Hleaf); v := 3]
   [gv6 := true; l := (Heap 0 3 Hleaf Hleaf); r := (Heap 1 3 Hleaf Hleaf); v := 4]
   [gv6 := true; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv6 := true; l := (Heap 0 3
   (Heap 6 2 (Heap 0 2 Hleaf (Heap 6 0 Hleaf (Heap 0 1 Hleaf Hleaf))) Hleaf)
   Hleaf); r := (Heap 1 5 Hleaf Hleaf); v := 6]
   [gv6 := true; l := (Heap 0 0 Hleaf Hleaf); r := (Heap 1 0 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2]
   [gv6 := true; l := (Heap 0 2 (Heap 0 0 Hleaf Hleaf) Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv6 := true; l := (Heap 0 1 Hleaf Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv6 := true; l := (Heap 0 2 Hleaf (Heap 2 1 Hleaf Hleaf)); r := (Heap 1 2 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   etc ...

(false = gv6), (true = gv6), (v < v), (v <= v), (gv6 = gv6), (v = v), (r = r), (r = l), (l = r), (l = l)
(false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v)
(hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l)
(rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r)
(right_height r < v), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r)
(right_height l < right_height r), (v <= hsize r), (v <= hsize l), (v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r)
(hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r)
(rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v)
(right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l), (right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r)
(true <> gv6), (~ v < v), (~ v <= v), (gv6 <> gv6), (v <> v), (r <> r), (r <> l), (l <> r), (l <> l), (None = Some r)
(hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l)
(merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert l v), (merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r)
(mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v)
(mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r)
(mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v)
(rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l)
(right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l), (None = Some gv6), (None = Some v), (has_leftist_property r = gv6), (has_leftist_property l = gv6)

Label: 5 (8)
Abducted Assumption: (1 = gv4)
Positive Examples:
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 1 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 0]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv4 := 1; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 1; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv4 := 1; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 4]
   [gv4 := 1; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 0]
   etc ...

Negative Examples:
   [gv4 := 4; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv4 := 0; l := Hleaf; r := (Heap 2 2 (Heap 1 0 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); v := 1]
   [gv4 := 2; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv4 := 4; l := Hleaf; r := (Heap 1 4 (Heap 1 3 Hleaf Hleaf) Hleaf); v := 2]
   [gv4 := 4; l := Hleaf; r := (Heap 1 5 Hleaf Hleaf); v := 6]
   [gv4 := 3; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv4 := 3; l := Hleaf; r := (Heap 1 0 Hleaf Hleaf); v := 3]
   [gv4 := 3; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 1]
   [gv4 := 3; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 2]
   [gv4 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   etc ...

(v < v), (v < gv4), (gv4 < v), (gv4 < gv4), (v <= v), (v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = v), (v = gv4)
(gv4 = gv4), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r), (true = has_leftist_property l), (v < hsize r)
(v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l), (gv4 < right_height r), (gv4 < right_height l)
(hsize r < gv4), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l), (hsize r < right_height r), (hsize r < right_height l), (hsize l < v), (hsize l < gv4), (hsize l < hsize r), (hsize l < rank r)
(hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < gv4), (rank r < hsize r), (rank r < hsize l), (rank r < rank l), (rank r < right_height r), (rank r < right_height l), (rank l < v)
(rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < gv4), (right_height r < hsize r), (right_height r < hsize l), (right_height r < rank r)
(right_height r < right_height l), (right_height l < v), (right_height l < gv4), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r), (v <= hsize l)
(v <= rank l), (v <= right_height r), (v <= right_height l), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r), (gv4 <= rank l), (gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= v)
(hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l), (hsize l <= v), (hsize l <= gv4), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l)
(hsize l <= right_height l), (rank r <= v), (rank r <= gv4), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r), (rank r <= right_height l), (rank l <= v), (rank l <= gv4)
(rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= gv4), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r), (right_height r <= rank l)
(right_height l <= v), (right_height l <= gv4), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v < gv4), (~ gv4 < v)
(~ v <= v), (~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> v), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (r <> r), (r <> l)
(l <> l), (None = Some r), (None = Some l), (None = Some v), (None = Some gv4), (hinsert r v = r), (hinsert r v = l), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l v = r)
(hinsert l gv4 = r), (hinsert l gv4 = l), (merge r r = r), (merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert r gv4), (merge r r = hinsert l v), (merge r r = hinsert l gv4), (merge r l = r), (merge r l = l)
(merge r l = hinsert r gv4), (merge r l = hinsert l v), (merge r l = hinsert l gv4), (merge l r = r), (merge l r = l), (merge l r = hinsert r v), (merge l r = hinsert r gv4), (merge l r = hinsert l v), (merge l r = hinsert l gv4), (merge l l = r)
(merge l l = hinsert r v), (merge l l = hinsert r gv4), (merge l l = hinsert l v), (merge l l = hinsert l gv4), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv4)
(mergea v r r = merge r l), (mergea v r r = merge l r), (mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv4), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv4), (mergea v r l = merge r r)
(mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r), (mergea v l r = l), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv4), (mergea v l r = merge r r), (mergea v l r = merge r l)
(mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv4), (mergea v l l = merge r r), (mergea v l l = merge r l), (mergea v l l = merge l r)
(mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v), (mergea gv4 r r = hinsert l gv4), (mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l)
(mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4), (mergea gv4 r l = merge r r), (mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r)
(mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r), (mergea gv4 l r = merge r l), (mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l)
(mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l), (mergea gv4 l l = merge l r), (mergea gv4 l l = merge l l), (hsize r = v), (hsize r = gv4), (hsize l = v)
(rank r = v), (rank r = gv4), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = gv4), (rank l = hsize r), (rank l = hsize l), (right_height r = v), (right_height r = gv4)
(right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = gv4), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)

Label: 3 (9)
Abducted Assumption: (rank l = gv3)
Positive Examples:
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 3 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := Hleaf; r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := Hleaf; r := (Heap 1 4 Hleaf Hleaf); v := 2]
   [gv3 := 0; l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 3]
   etc ...

Negative Examples:
   [gv3 := 0; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := (Heap 1 2 Hleaf Hleaf); v := 1]
   [gv3 := 1; l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 1]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 0]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 3 Hleaf Hleaf); v := 3]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 1 Hleaf Hleaf); r := (Heap 1 1 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 0 Hleaf Hleaf); r := (Heap 1 0 Hleaf Hleaf); v := 1]
   [gv3 := 0; l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2]
   etc ...

(v < v), (v < gv3), (gv3 < v), (gv3 < gv3), (v <= v), (v <= gv3), (gv3 <= v), (gv3 <= gv3), (l = l), (l = r)
(r = r), (v = v), (v = gv3), (gv3 = v), (gv3 = gv3), (false = has_leftist_property l), (false = has_leftist_property r), (true = has_leftist_property l), (true = has_leftist_property r), (v < hsize l)
(v < rank l), (v < rank r), (v < right_height l), (v < right_height r), (gv3 < hsize l), (gv3 < hsize r), (gv3 < rank l), (gv3 < rank r), (gv3 < right_height l), (gv3 < right_height r)
(hsize l < gv3), (hsize l < hsize r), (hsize l < rank l), (hsize l < rank r), (hsize l < right_height l), (hsize l < right_height r), (hsize r < v), (hsize r < gv3), (hsize r < hsize l), (hsize r < rank l)
(hsize r < right_height l), (hsize r < right_height r), (rank l < v), (rank l < gv3), (rank l < hsize l), (rank l < hsize r), (rank l < rank r), (rank l < right_height l), (rank l < right_height r), (rank r < v)
(rank r < hsize l), (rank r < hsize r), (rank r < rank l), (rank r < right_height l), (rank r < right_height r), (right_height l < v), (right_height l < gv3), (right_height l < hsize l), (right_height l < hsize r), (right_height l < rank l)
(right_height l < right_height r), (right_height r < v), (right_height r < gv3), (right_height r < hsize l), (right_height r < hsize r), (right_height r < rank l), (right_height r < rank r), (right_height r < right_height l), (v <= hsize l), (v <= hsize r)
(v <= rank r), (v <= right_height l), (v <= right_height r), (gv3 <= hsize l), (gv3 <= hsize r), (gv3 <= rank l), (gv3 <= rank r), (gv3 <= right_height l), (gv3 <= right_height r), (hsize l <= v)
(hsize l <= hsize r), (hsize l <= rank l), (hsize l <= rank r), (hsize l <= right_height l), (hsize l <= right_height r), (hsize r <= v), (hsize r <= gv3), (hsize r <= hsize l), (hsize r <= rank l), (hsize r <= rank r)
(hsize r <= right_height r), (rank l <= v), (rank l <= gv3), (rank l <= hsize l), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height l), (rank l <= right_height r), (rank r <= v), (rank r <= gv3)
(rank r <= hsize r), (rank r <= rank l), (rank r <= right_height l), (rank r <= right_height r), (right_height l <= v), (right_height l <= gv3), (right_height l <= hsize l), (right_height l <= hsize r), (right_height l <= rank l), (right_height l <= rank r)
(right_height r <= v), (right_height r <= gv3), (right_height r <= hsize l), (right_height r <= hsize r), (right_height r <= rank l), (right_height r <= rank r), (right_height r <= right_height l), (~ v < v), (~ v < gv3), (~ gv3 < v)
(~ v <= v), (~ v <= gv3), (~ gv3 <= v), (~ gv3 <= gv3), (l <> l), (l <> r), (r <> l), (r <> r), (v <> v), (v <> gv3)
(gv3 <> gv3), (None = Some v), (None = Some gv3), (None = Some l), (None = Some r), (hinsert l v = l), (hinsert l v = r), (hinsert l gv3 = l), (hinsert l gv3 = r), (hinsert r v = l)
(hinsert r gv3 = l), (hinsert r gv3 = r), (merge l l = l), (merge l l = r), (merge l l = hinsert l v), (merge l l = hinsert l gv3), (merge l l = hinsert r v), (merge l l = hinsert r gv3), (merge l r = l), (merge l r = r)
(merge l r = hinsert l gv3), (merge l r = hinsert r v), (merge l r = hinsert r gv3), (merge r l = l), (merge r l = r), (merge r l = hinsert l v), (merge r l = hinsert l gv3), (merge r l = hinsert r v), (merge r l = hinsert r gv3), (merge r r = l)
(merge r r = hinsert l v), (merge r r = hinsert l gv3), (merge r r = hinsert r v), (merge r r = hinsert r gv3), (mergea v l l = l), (mergea v l l = r), (mergea v l l = hinsert l v), (mergea v l l = hinsert l gv3), (mergea v l l = hinsert r v), (mergea v l l = hinsert r gv3)
(mergea v l l = merge l r), (mergea v l l = merge r l), (mergea v l l = merge r r), (mergea v l r = l), (mergea v l r = r), (mergea v l r = hinsert l v), (mergea v l r = hinsert l gv3), (mergea v l r = hinsert r v), (mergea v l r = hinsert r gv3), (mergea v l r = merge l l)
(mergea v l r = merge r l), (mergea v l r = merge r r), (mergea v r l = l), (mergea v r l = r), (mergea v r l = hinsert l v), (mergea v r l = hinsert l gv3), (mergea v r l = hinsert r v), (mergea v r l = hinsert r gv3), (mergea v r l = merge l l), (mergea v r l = merge l r)
(mergea v r l = merge r r), (mergea v r r = l), (mergea v r r = r), (mergea v r r = hinsert l v), (mergea v r r = hinsert l gv3), (mergea v r r = hinsert r v), (mergea v r r = hinsert r gv3), (mergea v r r = merge l l), (mergea v r r = merge l r), (mergea v r r = merge r l)
(mergea gv3 l l = l), (mergea gv3 l l = r), (mergea gv3 l l = hinsert l v), (mergea gv3 l l = hinsert l gv3), (mergea gv3 l l = hinsert r v), (mergea gv3 l l = hinsert r gv3), (mergea gv3 l l = merge l l), (mergea gv3 l l = merge l r), (mergea gv3 l l = merge r l), (mergea gv3 l l = merge r r)
(mergea gv3 l r = r), (mergea gv3 l r = hinsert l v), (mergea gv3 l r = hinsert l gv3), (mergea gv3 l r = hinsert r v), (mergea gv3 l r = hinsert r gv3), (mergea gv3 l r = merge l l), (mergea gv3 l r = merge l r), (mergea gv3 l r = merge r l), (mergea gv3 l r = merge r r), (mergea gv3 r l = l)
(mergea gv3 r l = hinsert l v), (mergea gv3 r l = hinsert l gv3), (mergea gv3 r l = hinsert r v), (mergea gv3 r l = hinsert r gv3), (mergea gv3 r l = merge l l), (mergea gv3 r l = merge l r), (mergea gv3 r l = merge r l), (mergea gv3 r l = merge r r), (mergea gv3 r r = l), (mergea gv3 r r = r)
(mergea gv3 r r = hinsert l gv3), (mergea gv3 r r = hinsert r v), (mergea gv3 r r = hinsert r gv3), (mergea gv3 r r = merge l l), (mergea gv3 r r = merge l r), (mergea gv3 r r = merge r l), (mergea gv3 r r = merge r r), (hsize l = v), (hsize l = gv3), (hsize r = v)
(rank l = v), (rank l = gv3), (rank l = hsize l), (rank l = hsize r), (rank r = v), (rank r = gv3), (rank r = hsize l), (rank r = hsize r), (right_height l = v), (right_height l = gv3)
(right_height l = hsize r), (right_height l = rank l), (right_height l = rank r), (right_height r = v), (right_height r = gv3), (right_height r = hsize l), (right_height r = hsize r), (right_height r = rank l), (right_height r = rank r)

Label: 7 (10)
Abducted Assumption: (rank l < rank r)
Positive Examples:
   [l := Hleaf; r := (Heap 1 1 Hleaf Hleaf); v := 1; gv2 := 1; gv6 := true; gv4 := 1; gv5 := 0]
   [l := Hleaf; r := (Heap 2 0 (Heap 1 2 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); v := 0; gv2 := (rank Hleaf + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 2 2 Hleaf
   (Heap 4 1 (Heap 3 5 Hleaf (Heap 0 0 (Heap 3 1 Hleaf Hleaf) Hleaf))
      (Heap 3 3 Hleaf Hleaf))); r := (Heap 3 5 Hleaf Hleaf); v := 0; gv2 := (rank
   (Heap 2 2 Hleaf
      (Heap 4 1 (Heap 3 5 Hleaf (Heap 0 0 (Heap 3 1 Hleaf Hleaf) Hleaf))
         (Heap 3 3 Hleaf Hleaf))) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := (Heap 0 1
   (Heap 0 3
      (Heap 0 3
         (Heap 3 3 (Heap 6 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
            (Heap 0 3 Hleaf Hleaf)) Hleaf)
      (Heap 6 0 (Heap 3 4 (Heap 6 1 Hleaf (Heap 4 5 Hleaf Hleaf)) Hleaf)
         Hleaf))
   (Heap 0 0
      (Heap 1 3 Hleaf
         (Heap 4 5 Hleaf
            (Heap 6 0 (Heap 3 0 Hleaf Hleaf) (Heap 5 5 Hleaf Hleaf))))
      (Heap 4 0 Hleaf Hleaf))); r := (Heap 1 5 Hleaf
   (Heap 1 6
      (Heap 3 6
         (Heap 1 0 (Heap 0 2 (Heap 1 0 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf))
            Hleaf) (Heap 0 5 Hleaf Hleaf)) (Heap 4 1 Hleaf Hleaf))); v := 0; gv2 := (rank
   (Heap 0 1
      (Heap 0 3
         (Heap 0 3
            (Heap 3 3
               (Heap 6 0 (Heap 1 1 Hleaf Hleaf) (Heap 1 4 Hleaf Hleaf))
               (Heap 0 3 Hleaf Hleaf)) Hleaf)
         (Heap 6 0 (Heap 3 4 (Heap 6 1 Hleaf (Heap 4 5 Hleaf Hleaf)) Hleaf)
            Hleaf))
      (Heap 0 0
         (Heap 1 3 Hleaf
            (Heap 4 5 Hleaf
               (Heap 6 0 (Heap 3 0 Hleaf Hleaf) (Heap 5 5 Hleaf Hleaf))))
         (Heap 4 0 Hleaf Hleaf))) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := (Heap 0 2 Hleaf Hleaf); r := (Heap 4 1 Hleaf Hleaf); v := 0; gv2 := (rank (Heap 0 2 Hleaf Hleaf) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := (Heap 0 1 (Heap 0 0 Hleaf Hleaf) Hleaf); r := (Heap 2 2 Hleaf (Heap 1 1 Hleaf Hleaf)); v := 0; gv2 := (rank (Heap 0 1 (Heap 0 0 Hleaf Hleaf) Hleaf) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := Hleaf; r := (Heap 1 1 (Heap 1 0 Hleaf Hleaf) Hleaf); v := 2; gv2 := (rank Hleaf + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 0 2 Hleaf Hleaf); r := (Heap 2 0 (Heap 0 1 Hleaf Hleaf) (Heap 0 1 Hleaf Hleaf)); v := 1; gv2 := (rank (Heap 0 2 Hleaf Hleaf) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := (Heap 0 1 (Heap 2 2 Hleaf Hleaf) Hleaf); r := (Heap 2 1 (Heap 0 0 Hleaf Hleaf) Hleaf); v := 1; gv2 := (rank (Heap 0 1 (Heap 2 2 Hleaf Hleaf) Hleaf) + 1); gv6 := false; gv4 := 1; gv5 := 0]
   [l := Hleaf; r := (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); v := 1; gv2 := (rank Hleaf + 1); gv6 := true; gv4 := 1; gv5 := 0]
   etc ...

Negative Examples:
   [l := (Heap 1 0 Hleaf Hleaf); r := Hleaf; v := 0; gv2 := (rank (Heap 1 0 Hleaf Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 3 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 3; gv2 := (rank (Heap 1 3 (Heap 1 0 Hleaf Hleaf) Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf); r := Hleaf; v := 2; gv2 := (rank (Heap 1 2 (Heap 1 0 Hleaf Hleaf) Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 2 2 (Heap 1 0 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)); r := Hleaf; v := 1; gv2 := (rank (Heap 2 2 (Heap 1 0 Hleaf Hleaf) (Heap 1 1 Hleaf Hleaf)) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); r := Hleaf; v := 0; gv2 := (rank (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 0; gv2 := (rank (Heap 1 0 (Heap 1 1 Hleaf Hleaf) Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)); r := Hleaf; v := 2; gv2 := (rank (Heap 2 1 (Heap 1 0 Hleaf Hleaf) (Heap 1 0 Hleaf Hleaf)) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 1 (Heap 1 1 Hleaf Hleaf) Hleaf); r := Hleaf; v := 2; gv2 := (rank (Heap 1 1 (Heap 1 1 Hleaf Hleaf) Hleaf) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 2 2 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)); r := Hleaf; v := 2; gv2 := (rank (Heap 2 2 (Heap 1 1 Hleaf Hleaf) (Heap 1 2 Hleaf Hleaf)) + 1); gv6 := true; gv4 := 1; gv5 := 0]
   [l := (Heap 1 0 (Heap 1 2 Hleaf Hleaf) Hleaf); r := Hleaf; v := 1; gv2 := 2; gv6 := true; gv4 := 1; gv5 := 0]
   etc ...

(v < v), (v <= v), (v = v), (r = r), (r = l), (l = r), (l = l), (false = has_leftist_property r), (false = has_leftist_property l), (true = has_leftist_property r)
(v < hsize r), (v < hsize l), (v < rank r), (v < rank l), (v < right_height r), (v < right_height l), (hsize r < v), (hsize r < hsize l), (hsize r < rank r), (hsize r < rank l)
(hsize r < right_height l), (hsize l < v), (hsize l < hsize r), (hsize l < rank r), (hsize l < rank l), (hsize l < right_height r), (hsize l < right_height l), (rank r < v), (rank r < hsize r), (rank r < hsize l)
(rank r < right_height r), (rank r < right_height l), (rank l < v), (rank l < hsize r), (rank l < hsize l), (rank l < rank r), (rank l < right_height r), (rank l < right_height l), (right_height r < v), (right_height r < hsize r)
(right_height r < rank r), (right_height r < rank l), (right_height r < right_height l), (right_height l < v), (right_height l < hsize r), (right_height l < hsize l), (right_height l < rank r), (right_height l < rank l), (right_height l < right_height r), (v <= hsize r)
(v <= rank r), (v <= rank l), (v <= right_height r), (v <= right_height l), (hsize r <= v), (hsize r <= hsize l), (hsize r <= rank r), (hsize r <= rank l), (hsize r <= right_height r), (hsize r <= right_height l)
(hsize l <= hsize r), (hsize l <= rank r), (hsize l <= rank l), (hsize l <= right_height r), (hsize l <= right_height l), (rank r <= v), (rank r <= hsize r), (rank r <= hsize l), (rank r <= rank l), (rank r <= right_height r)
(rank l <= v), (rank l <= hsize r), (rank l <= hsize l), (rank l <= rank r), (rank l <= right_height r), (rank l <= right_height l), (right_height r <= v), (right_height r <= hsize r), (right_height r <= hsize l), (right_height r <= rank r)
(right_height r <= right_height l), (right_height l <= v), (right_height l <= hsize r), (right_height l <= hsize l), (right_height l <= rank r), (right_height l <= rank l), (right_height l <= right_height r), (~ v < v), (~ v <= v), (v <> v)
(r <> l), (l <> r), (l <> l), (None = Some r), (None = Some l), (None = Some v), (hinsert r v = r), (hinsert r v = l), (hinsert l v = r), (hinsert l v = l)
(merge r r = l), (merge r r = hinsert r v), (merge r r = hinsert l v), (merge r l = r), (merge r l = l), (merge r l = hinsert r v), (merge r l = hinsert l v), (merge l r = r), (merge l r = l), (merge l r = hinsert r v)
(merge l l = r), (merge l l = l), (merge l l = hinsert r v), (merge l l = hinsert l v), (mergea v r r = r), (mergea v r r = l), (mergea v r r = hinsert r v), (mergea v r r = hinsert l v), (mergea v r r = merge r r), (mergea v r r = merge r l)
(mergea v r r = merge l l), (mergea v r l = r), (mergea v r l = l), (mergea v r l = hinsert r v), (mergea v r l = hinsert l v), (mergea v r l = merge r r), (mergea v r l = merge r l), (mergea v r l = merge l r), (mergea v r l = merge l l), (mergea v l r = r)
(mergea v l r = hinsert r v), (mergea v l r = hinsert l v), (mergea v l r = merge r r), (mergea v l r = merge r l), (mergea v l r = merge l r), (mergea v l r = merge l l), (mergea v l l = r), (mergea v l l = l), (mergea v l l = hinsert r v), (mergea v l l = hinsert l v)
(mergea v l l = merge r l), (mergea v l l = merge l r), (mergea v l l = merge l l), (hsize r = v), (hsize l = v), (rank r = v), (rank r = hsize r), (rank r = hsize l), (rank l = v), (rank l = hsize r)
(right_height r = v), (right_height r = hsize r), (right_height r = hsize l), (right_height r = rank r), (right_height r = rank l), (right_height l = v), (right_height l = hsize r), (right_height l = hsize l), (right_height l = rank r), (right_height l = rank l)
(true = gv6), (gv6 = gv6), (false <> gv6), (true <> gv6), (gv6 <> gv6), (None = Some gv6), (has_leftist_property r = gv6), (has_leftist_property l = gv6), (v < gv4), (gv4 < v)
(v <= gv4), (gv4 <= v), (gv4 <= gv4), (v = gv4), (gv4 = v), (gv4 = gv4), (gv4 < hsize r), (gv4 < hsize l), (gv4 < rank r), (gv4 < rank l)
(gv4 < right_height l), (hsize r < gv4), (hsize l < gv4), (rank r < gv4), (rank l < gv4), (right_height r < gv4), (right_height l < gv4), (gv4 <= hsize r), (gv4 <= hsize l), (gv4 <= rank r)
(gv4 <= right_height r), (gv4 <= right_height l), (hsize r <= gv4), (hsize l <= gv4), (rank r <= gv4), (rank l <= gv4), (right_height r <= gv4), (right_height l <= gv4), (~ v < gv4), (~ gv4 < v)
(~ v <= gv4), (~ gv4 <= v), (~ gv4 <= gv4), (v <> gv4), (gv4 <> v), (gv4 <> gv4), (None = Some gv4), (hinsert r gv4 = r), (hinsert r gv4 = l), (hinsert l gv4 = r)
(merge r r = hinsert r gv4), (merge r r = hinsert l gv4), (merge r l = hinsert r gv4), (merge r l = hinsert l gv4), (merge l r = hinsert r gv4), (merge l r = hinsert l gv4), (merge l l = hinsert r gv4), (merge l l = hinsert l gv4), (mergea v r r = hinsert r gv4), (mergea v r r = hinsert l gv4)
(mergea v r l = hinsert l gv4), (mergea v l r = hinsert r gv4), (mergea v l r = hinsert l gv4), (mergea v l l = hinsert r gv4), (mergea v l l = hinsert l gv4), (mergea gv4 r r = r), (mergea gv4 r r = l), (mergea gv4 r r = hinsert r v), (mergea gv4 r r = hinsert r gv4), (mergea gv4 r r = hinsert l v)
(mergea gv4 r r = merge r r), (mergea gv4 r r = merge r l), (mergea gv4 r r = merge l r), (mergea gv4 r r = merge l l), (mergea gv4 r l = r), (mergea gv4 r l = l), (mergea gv4 r l = hinsert r v), (mergea gv4 r l = hinsert r gv4), (mergea gv4 r l = hinsert l v), (mergea gv4 r l = hinsert l gv4)
(mergea gv4 r l = merge r l), (mergea gv4 r l = merge l r), (mergea gv4 r l = merge l l), (mergea gv4 l r = r), (mergea gv4 l r = l), (mergea gv4 l r = hinsert r v), (mergea gv4 l r = hinsert r gv4), (mergea gv4 l r = hinsert l v), (mergea gv4 l r = hinsert l gv4), (mergea gv4 l r = merge r r)
(mergea gv4 l r = merge l r), (mergea gv4 l r = merge l l), (mergea gv4 l l = r), (mergea gv4 l l = l), (mergea gv4 l l = hinsert r v), (mergea gv4 l l = hinsert r gv4), (mergea gv4 l l = hinsert l v), (mergea gv4 l l = hinsert l gv4), (mergea gv4 l l = merge r r), (mergea gv4 l l = merge r l)
(mergea gv4 l l = merge l l), (hsize r = gv4), (hsize l = gv4), (rank r = gv4), (rank l = gv4), (right_height r = gv4), (right_height l = gv4), (v < gv2), (gv2 < v), (gv2 < gv2)
(gv2 <= v), (gv2 <= gv2), (v = gv2), (gv2 = v), (gv2 = gv2), (gv2 < hsize l), (gv2 < hsize r), (gv2 < rank l), (gv2 < rank r), (gv2 < right_height l)
(hsize l < gv2), (hsize r < gv2), (rank l < gv2), (rank r < gv2), (right_height l < gv2), (right_height r < gv2), (gv2 <= hsize l), (gv2 <= hsize r), (gv2 <= rank l), (gv2 <= rank r)
(gv2 <= right_height r), (hsize l <= gv2), (hsize r <= gv2), (rank l <= gv2), (rank r <= gv2), (right_height l <= gv2), (right_height r <= gv2), (~ v < gv2), (~ gv2 < v), (~ gv2 < gv2)
(~ gv2 <= v), (~ gv2 <= gv2), (v <> gv2), (gv2 <> v), (gv2 <> gv2), (None = Some gv2), (hinsert l gv2 = l), (hinsert l gv2 = r), (hinsert r gv2 = l), (hinsert r gv2 = r)
(merge l l = hinsert r gv2), (merge l r = hinsert l gv2), (merge l r = hinsert r gv2), (merge r l = hinsert l gv2), (merge r l = hinsert r gv2), (merge r r = hinsert l gv2), (merge r r = hinsert r gv2), (mergea v l l = hinsert l gv2), (mergea v l l = hinsert r gv2), (mergea v l r = hinsert l gv2)
(mergea v r l = hinsert l gv2), (mergea v r l = hinsert r gv2), (mergea v r r = hinsert l gv2), (mergea v r r = hinsert r gv2), (mergea gv2 l l = l), (mergea gv2 l l = r), (mergea gv2 l l = hinsert l v), (mergea gv2 l l = hinsert l gv2), (mergea gv2 l l = hinsert r v), (mergea gv2 l l = hinsert r gv2)
(mergea gv2 l l = merge l r), (mergea gv2 l l = merge r l), (mergea gv2 l l = merge r r), (mergea gv2 l r = l), (mergea gv2 l r = r), (mergea gv2 l r = hinsert l v), (mergea gv2 l r = hinsert l gv2), (mergea gv2 l r = hinsert r v), (mergea gv2 l r = hinsert r gv2), (mergea gv2 l r = merge l l)
(mergea gv2 l r = merge r l), (mergea gv2 l r = merge r r), (mergea gv2 r l = l), (mergea gv2 r l = r), (mergea gv2 r l = hinsert l v), (mergea gv2 r l = hinsert l gv2), (mergea gv2 r l = hinsert r v), (mergea gv2 r l = hinsert r gv2), (mergea gv2 r l = merge l l), (mergea gv2 r l = merge l r)
(mergea gv2 r l = merge r r), (mergea gv2 r r = l), (mergea gv2 r r = r), (mergea gv2 r r = hinsert l v), (mergea gv2 r r = hinsert l gv2), (mergea gv2 r r = hinsert r v), (mergea gv2 r r = hinsert r gv2), (mergea gv2 r r = merge l l), (mergea gv2 r r = merge l r), (mergea gv2 r r = merge r l)
(hsize l = gv2), (hsize r = gv2), (rank l = gv2), (rank r = gv2), (right_height l = gv2), (right_height r = gv2), (v < gv5), (gv5 < v), (gv5 < gv5), (v <= gv5)
(gv5 <= gv5), (v = gv5), (gv5 = v), (gv5 = gv5), (gv5 < hsize r), (gv5 < hsize l), (gv5 < rank r), (gv5 < rank l), (gv5 < right_height r), (gv5 < right_height l)
(hsize l < gv5), (rank r < gv5), (rank l < gv5), (right_height r < gv5), (right_height l < gv5), (gv5 <= hsize r), (gv5 <= hsize l), (gv5 <= rank r), (gv5 <= rank l), (gv5 <= right_height r)
(hsize r <= gv5), (hsize l <= gv5), (rank r <= gv5), (rank l <= gv5), (right_height r <= gv5), (right_height l <= gv5), (~ v < gv5), (~ gv5 < v), (~ gv5 < gv5), (~ v <= gv5)
(~ gv5 <= gv5), (v <> gv5), (gv5 <> v), (gv5 <> gv5), (None = Some gv5), (hinsert r gv5 = r), (hinsert r gv5 = l), (hinsert l gv5 = r), (hinsert l gv5 = l), (merge r r = hinsert r gv5)
(merge r l = hinsert r gv5), (merge r l = hinsert l gv5), (merge l r = hinsert r gv5), (merge l r = hinsert l gv5), (merge l l = hinsert r gv5), (merge l l = hinsert l gv5), (mergea v r r = hinsert r gv5), (mergea v r r = hinsert l gv5), (mergea v r l = hinsert r gv5), (mergea v r l = hinsert l gv5)
(mergea v l r = hinsert l gv5), (mergea v l l = hinsert r gv5), (mergea v l l = hinsert l gv5), (mergea gv5 r r = r), (mergea gv5 r r = l), (mergea gv5 r r = hinsert r v), (mergea gv5 r r = hinsert r gv5), (mergea gv5 r r = hinsert l v), (mergea gv5 r r = hinsert l gv5), (mergea gv5 r r = merge r r)
(mergea gv5 r r = merge l r), (mergea gv5 r r = merge l l), (mergea gv5 r l = r), (mergea gv5 r l = l), (mergea gv5 r l = hinsert r v), (mergea gv5 r l = hinsert r gv5), (mergea gv5 r l = hinsert l v), (mergea gv5 r l = hinsert l gv5), (mergea gv5 r l = merge r r), (mergea gv5 r l = merge r l)
(mergea gv5 r l = merge l l), (mergea gv5 l r = r), (mergea gv5 l r = l), (mergea gv5 l r = hinsert r v), (mergea gv5 l r = hinsert r gv5), (mergea gv5 l r = hinsert l v), (mergea gv5 l r = hinsert l gv5), (mergea gv5 l r = merge r r), (mergea gv5 l r = merge r l), (mergea gv5 l r = merge l r)
(mergea gv5 l l = r), (mergea gv5 l l = l), (mergea gv5 l l = hinsert r v), (mergea gv5 l l = hinsert r gv5), (mergea gv5 l l = hinsert l v), (mergea gv5 l l = hinsert l gv5), (mergea gv5 l l = merge r r), (mergea gv5 l l = merge r l), (mergea gv5 l l = merge l r), (mergea gv5 l l = merge l l)
(hsize l = gv5), (rank r = gv5), (rank l = gv5), (right_height r = gv5), (right_height l = gv5)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 1227.394 seconds


Label: 7 (0)
(true = has_leftist_property l), (hsize l < rank r), (hsize l < right_height r), (hsize l <= rank l), (rank l = hsize l), (hsize l <= gv3), (hsize l < gv2)

Label: 5 (1)
(true = has_leftist_property l), (hsize l < rank r), (hsize l < right_height r), (hsize l <= rank l), (rank l = hsize l), (hsize l <= gv3), (hsize l < gv2)

Label: 3 (2)
(true = has_leftist_property l), (hsize l < rank r), (hsize l < right_height r), (hsize l <= rank l), (rank l = hsize l), (hsize l <= gv3), (hsize l < gv2)

Label: 2 (3)
(true = has_leftist_property l), (hsize l < rank r), (hsize l < right_height r), (hsize l <= rank l), (rank l = hsize l), (hsize l <= gv3), (hsize l < gv2)

Label: 0 (4)
(true = has_leftist_property l), (hsize l < rank r), (hsize l < right_height r), (hsize l <= rank l), (rank l = hsize l), (hsize l <= gv3), (hsize l < gv2)

Label: 2 (5)

Label: 7 (6)
(true = has_leftist_property r)

Label: 5 (7)
(true = has_leftist_property r)

Label: 3 (8)
(true = has_leftist_property r)

Label: 2 (9)
(true = has_leftist_property r)

Label: 0 (10)
(true = has_leftist_property r)

Label: 3 (11)
(gv3 < hsize r), (gv3 < rank r), (gv3 < right_height r), (hsize l < hsize r), (hsize l < right_height r), (rank l < hsize r), (rank l < rank r), (rank l < right_height r), (right_height l < hsize r), (right_height l < rank r)
(gv3 <= rank r), (gv3 <= right_height r), (hsize l <= hsize r), (hsize l <= rank r), (hsize l <= right_height r), (rank l <= hsize r), (rank l <= rank r), (rank l <= right_height r), (right_height l <= hsize r), (right_height l <= rank r)
(merge l r = r), (merge r l = r), (mergea v l l = hinsert l v), (mergea gv3 l l = hinsert l gv3)

Label: 6 (12)

Label: 0 (13)
(gv5 < right_height r), (gv5 <= rank l), (gv5 <= right_height l), (hsize l = gv5), (rank l = gv5), (right_height l = gv5)

Label: 1 (14)
(true = gv0), (false <> gv0), (has_leftist_property r = gv0), (has_leftist_property l = gv0)

Label: 6 (15)
(has_leftist_property l = gv6)

Label: 5 (16)

Label: 3 (17)
(hsize l = gv3), (rank l = gv3), (right_height l = gv3)

Label: 7 (18)
(rank l < rank r), (rank l <= rank r), (gv4 <= hsize r), (gv4 <= right_height r), (gv2 <= rank r), (gv5 < hsize r), (gv5 < rank r)

Label: 6 (19)
(rank l < rank r), (rank l <= rank r), (gv4 <= hsize r), (gv4 <= right_height r), (gv2 <= rank r), (gv5 < hsize r), (gv5 < rank r)

Label: 5 (20)
(rank l < rank r), (rank l <= rank r), (gv4 <= hsize r), (gv4 <= right_height r), (gv2 <= rank r), (gv5 < hsize r), (gv5 < rank r)

Label: 2 (21)
(rank l < rank r), (rank l <= rank r), (gv4 <= hsize r), (gv4 <= right_height r), (gv2 <= rank r), (gv5 < hsize r), (gv5 < rank r)

Label: 0 (22)
(rank l < rank r), (rank l <= rank r), (gv4 <= hsize r), (gv4 <= right_height r), (gv2 <= rank r), (gv5 < hsize r), (gv5 < rank r)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 1617.447 seconds


(rank l < rank r)
 - (rank l < rank r)
 - (rank l <= rank r)
 - (gv4 <= hsize r)
 - (gv4 <= right_height r)
 - (gv2 <= rank r)
 - (gv5 < hsize r)
 - (gv5 < rank r)

(rank l = gv3)
 - (rank l = gv3)
 - (hsize l = gv3)
 - (right_height l = gv3)

(1 = gv4)
 - (1 = gv4)

(has_leftist_property l = gv6)
 - (has_leftist_property l = gv6)

(has_leftist_property (Heap (rank l + 1) v r l) = gv0)
 - (has_leftist_property (Heap (rank l + 1) v r l) = gv0)
 - (true = gv0)
 - (false <> gv0)
 - (has_leftist_property r = gv0)
 - (has_leftist_property l = gv0)

(0 = gv5)
 - (0 = gv5)
 - (gv5 < right_height r)
 - (gv5 <= rank l)
 - (gv5 <= right_height l)
 - (hsize l = gv5)
 - (rank l = gv5)
 - (right_height l = gv5)

(has_leftist_property r = gv6)
 - (has_leftist_property r = gv6)

(gv3 < rank r)
 - (gv3 < rank r)
 - (gv3 < hsize r)
 - (gv3 < right_height r)
 - (hsize l < hsize r)
 - (hsize l < right_height r)
 - (rank l < hsize r)
 - (rank l < rank r)
 - (rank l < right_height r)
 - (right_height l < hsize r)
 - (right_height l < rank r)
 - (gv3 <= hsize r)
 - (gv3 <= rank r)
 - (gv3 <= right_height r)
 - (hsize l <= hsize r)
 - (hsize l <= rank r)
 - (hsize l <= right_height r)
 - (rank l <= hsize r)
 - (rank l <= rank r)
 - (rank l <= right_height r)
 - (right_height l <= hsize r)
 - (right_height l <= rank r)
 - (right_height l <= right_height r)
 - (merge l r = r)
 - (merge r l = r)
 - (mergea v l l = hinsert l v)
 - (mergea gv3 l l = hinsert l gv3)

(has_leftist_property r = true)
 - (has_leftist_property r = true)

(has_leftist_property l = true)
 - (has_leftist_property l = true)
 - (hsize l < rank r)
 - (hsize l < right_height r)
 - (hsize l <= rank l)
 - (rank l = hsize l)
 - (hsize l <= gv3)
 - (hsize l < gv2)

(rank l + 1 = gv2)
 - (rank l + 1 = gv2)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 1617.449 seconds

Number of Result Pairs Returned: 6

(0 = gv5 -> gv5 <= rank l)
(gv5 <= rank l ->
 rank l < rank r ->
 has_leftist_property r = true ->
 has_leftist_property l = true ->
 has_leftist_property (Heap (rank l + S gv5) v r l) = true)

(0 = gv5 -> gv5 <= right_height l)
(gv5 <= right_height l ->
 rank l < rank r ->
 has_leftist_property r = true ->
 has_leftist_property l = true ->
 has_leftist_property (Heap (rank l + S gv5) v r l) = true)

(rank l < rank r ->
 has_leftist_property r = gv6 ->
 has_leftist_property l = gv6 ->
 has_leftist_property (Heap (rank l + 1) v r l) = gv6)

(rank l < rank r -> rank l <= rank r)
(rank l <= rank r ->
 has_leftist_property r = gv6 ->
 has_leftist_property l = gv6 ->
 has_leftist_property (Heap (rank l + 1) v r l) = gv6)

(rank l < rank r ->
 has_leftist_property l = true ->
 has_leftist_property r = true ->
 has_leftist_property (Heap (rank l + 1) v r l) = true)

(rank l < rank r -> rank l <= rank r)
(rank l <= rank r ->
 has_leftist_property l = true ->
 has_leftist_property r = true ->
 has_leftist_property (Heap (rank l + 1) v r l) = true)
