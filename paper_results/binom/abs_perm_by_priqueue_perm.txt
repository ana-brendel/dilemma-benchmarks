Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (tree_elems t cons_elems0)
 -- (tree_elems t cons_elems)
 -- (priqueue_elems p rest_elems0)
 -- (priqueue_elems p rest_elems)

----------------------------------
Goal: (Permutation rest_elems rest_elems0)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.687 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 53.964 seconds

Label: Generalization #0
Assumptions: 
 -- (priqueue_elems p rest_elems0)
 -- (priqueue_elems p rest_elems)

----------------------------------
Goal: (Permutation rest_elems rest_elems0)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 54.101 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqueue_elems p rest_elems0)
Positive Examples: 193
Negative Examples: 162

Label: 1 (1)
Abducted Assumption: (priqueue_elems p rest_elems)
Positive Examples: 170
Negative Examples: 185


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 54.253 seconds


Label: 0 (0)
(Abs p rest_elems0), (Abs p rest_elems), (priqueue_elems p rest_elems0), (priqueue_elems p rest_elems), (priq p), (Permutation p p), (Permutation rest_elems0 rest_elems0), (Permutation rest_elems0 rest_elems), (Permutation rest_elems rest_elems0), (Permutation rest_elems rest_elems)
(p = p), (rest_elems0 = rest_elems0), (rest_elems0 = rest_elems), (rest_elems = rest_elems0), (rest_elems = rest_elems), (Abs p (rest_elems0 ++ rest_elems0)), (Abs p (rest_elems0 ++ rest_elems)), (Abs p (rest_elems ++ rest_elems0)), (Abs p (rest_elems ++ rest_elems)), (Abs p [])
(Abs (merge p p) rest_elems0), (Abs (merge p p) rest_elems), (Abs (merge p p) (rest_elems0 ++ rest_elems0)), (Abs (merge p p) (rest_elems0 ++ rest_elems)), (Abs (merge p p) (rest_elems ++ rest_elems0)), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) []), (Abs (p ++ p) rest_elems0), (Abs (p ++ p) rest_elems), (Abs (p ++ p) (rest_elems0 ++ rest_elems0))
(Abs (p ++ p) (rest_elems0 ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ rest_elems0)), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) []), (Abs [] rest_elems0), (Abs [] rest_elems), (Abs [] (rest_elems0 ++ rest_elems0)), (Abs [] (rest_elems0 ++ rest_elems)), (Abs [] (rest_elems ++ rest_elems0)), (Abs [] (rest_elems ++ rest_elems))
(Abs [] []), (priqueue_elems p (rest_elems0 ++ rest_elems0)), (priqueue_elems p (rest_elems0 ++ rest_elems)), (priqueue_elems p (rest_elems ++ rest_elems0)), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p []), (priqueue_elems (merge p p) rest_elems0), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) (rest_elems0 ++ rest_elems0)), (priqueue_elems (merge p p) (rest_elems0 ++ rest_elems))
(priqueue_elems (merge p p) (rest_elems ++ rest_elems0)), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) []), (priqueue_elems (p ++ p) rest_elems0), (priqueue_elems (p ++ p) rest_elems), (priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems0)), (priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems0)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) [])
(priqueue_elems [] rest_elems0), (priqueue_elems [] rest_elems), (priqueue_elems [] (rest_elems0 ++ rest_elems0)), (priqueue_elems [] (rest_elems0 ++ rest_elems)), (priqueue_elems [] (rest_elems ++ rest_elems0)), (priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] []), (tree_elems Leaf rest_elems0), (tree_elems Leaf rest_elems), (tree_elems Leaf (rest_elems0 ++ rest_elems0))
(tree_elems Leaf (rest_elems0 ++ rest_elems)), (tree_elems Leaf (rest_elems ++ rest_elems0)), (tree_elems Leaf (rest_elems ++ rest_elems)), (tree_elems Leaf []), (priq (merge p p)), (priq (p ++ p)), (priqq (length p) p), (priqq (length p) (merge p p)), (priqq (length p) (p ++ p)), (priqq (length rest_elems0) p)
(priqq (length rest_elems0) (merge p p)), (priqq (length rest_elems0) (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (p ++ p)), (pow2heapp (length p) (length p) Leaf), (pow2heapp (length p) (length rest_elems0) Leaf), (pow2heapp (length p) (length rest_elems) Leaf), (pow2heapp (length rest_elems0) (length p) Leaf), (pow2heapp (length rest_elems0) (length rest_elems0) Leaf)
(pow2heapp (length rest_elems0) (length rest_elems) Leaf), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length rest_elems) (length rest_elems0) Leaf), (pow2heapp (length rest_elems) (length rest_elems) Leaf), (Permutation p (merge p p)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (merge p p) p), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) [])
(Permutation (p ++ p) p), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (merge p p)), (Permutation [] (p ++ p)), (Permutation rest_elems0 (rest_elems0 ++ rest_elems0)), (Permutation rest_elems0 (rest_elems0 ++ rest_elems)), (Permutation rest_elems0 (rest_elems ++ rest_elems0)), (Permutation rest_elems0 (rest_elems ++ rest_elems))
(Permutation rest_elems0 []), (Permutation rest_elems (rest_elems0 ++ rest_elems0)), (Permutation rest_elems (rest_elems0 ++ rest_elems)), (Permutation rest_elems (rest_elems ++ rest_elems0)), (Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems []), (Permutation (rest_elems0 ++ rest_elems0) rest_elems0), (Permutation (rest_elems0 ++ rest_elems0) rest_elems), (Permutation (rest_elems0 ++ rest_elems0) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems0) (rest_elems ++ rest_elems0))
(Permutation (rest_elems0 ++ rest_elems0) (rest_elems ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems0) []), (Permutation (rest_elems0 ++ rest_elems) rest_elems0), (Permutation (rest_elems0 ++ rest_elems) rest_elems), (Permutation (rest_elems0 ++ rest_elems) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems0 ++ rest_elems) (rest_elems ++ rest_elems0)), (Permutation (rest_elems0 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems) []), (Permutation (rest_elems ++ rest_elems0) rest_elems0), (Permutation (rest_elems ++ rest_elems0) rest_elems)
(Permutation (rest_elems ++ rest_elems0) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems0) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems0) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems0) []), (Permutation (rest_elems ++ rest_elems) rest_elems0), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems) [])
(Permutation [] rest_elems0), (Permutation [] rest_elems), (Permutation [] (rest_elems0 ++ rest_elems0)), (Permutation [] (rest_elems0 ++ rest_elems)), (Permutation [] (rest_elems ++ rest_elems0)), (Permutation [] (rest_elems ++ rest_elems)), (In Leaf p), (In Leaf (merge p p)), (In Leaf (p ++ p)), (In (length p) rest_elems0)
(In (length p) rest_elems), (In (length p) (rest_elems0 ++ rest_elems0)), (In (length p) (rest_elems0 ++ rest_elems)), (In (length p) (rest_elems ++ rest_elems0)), (In (length p) (rest_elems ++ rest_elems)), (In (length rest_elems0) rest_elems0), (In (length rest_elems0) rest_elems), (In (length rest_elems0) (rest_elems0 ++ rest_elems0)), (In (length rest_elems0) (rest_elems0 ++ rest_elems)), (In (length rest_elems0) (rest_elems ++ rest_elems0))
(In (length rest_elems0) (rest_elems ++ rest_elems)), (In (length rest_elems) rest_elems0), (In (length rest_elems) rest_elems), (In (length rest_elems) (rest_elems0 ++ rest_elems0)), (In (length rest_elems) (rest_elems0 ++ rest_elems)), (In (length rest_elems) (rest_elems ++ rest_elems0)), (In (length rest_elems) (rest_elems ++ rest_elems)), (length p < length rest_elems0), (length p < length rest_elems), (length rest_elems0 < length p)
(length rest_elems0 < length rest_elems), (length rest_elems < length p), (length rest_elems < length rest_elems0), (length p <= length rest_elems0), (length p <= length rest_elems), (length rest_elems0 <= length p), (length rest_elems0 <= length rest_elems), (length rest_elems <= length p), (length rest_elems <= length rest_elems0), (~ Abs p rest_elems0)
(~ Abs p rest_elems), (~ priqueue_elems p rest_elems0), (~ priqueue_elems p rest_elems), (~ priq p), (~ Permutation p p), (~ Permutation rest_elems0 rest_elems0), (~ Permutation rest_elems0 rest_elems), (~ Permutation rest_elems rest_elems0), (~ Permutation rest_elems rest_elems), (p <> p)
(rest_elems0 <> rest_elems0), (rest_elems0 <> rest_elems), (rest_elems <> rest_elems0), (rest_elems <> rest_elems), (None = Some rest_elems0), (None = Some rest_elems), (None = Some p), (merge p p = p), (merge p p = p ++ p), (p ++ p = p)
([] = p), ([] = merge p p), ([] = p ++ p), (rest_elems0 ++ rest_elems0 = rest_elems0), (rest_elems0 ++ rest_elems0 = rest_elems), (rest_elems0 ++ rest_elems = rest_elems0), (rest_elems0 ++ rest_elems = rest_elems), (rest_elems ++ rest_elems0 = rest_elems0), (rest_elems ++ rest_elems0 = rest_elems), (rest_elems ++ rest_elems = rest_elems0)
(rest_elems ++ rest_elems = rest_elems), ([] = rest_elems0), ([] = rest_elems), ([] = rest_elems0 ++ rest_elems0), ([] = rest_elems0 ++ rest_elems), ([] = rest_elems ++ rest_elems0), ([] = rest_elems ++ rest_elems), (None = find_max p)

Label: 1 (1)
(Abs p rest_elems0), (Abs p rest_elems), (priqueue_elems p rest_elems0), (priqueue_elems p rest_elems), (priq p), (Permutation p p), (Permutation rest_elems0 rest_elems0), (Permutation rest_elems0 rest_elems), (Permutation rest_elems rest_elems0), (Permutation rest_elems rest_elems)
(p = p), (rest_elems0 = rest_elems0), (rest_elems0 = rest_elems), (rest_elems = rest_elems0), (rest_elems = rest_elems), (Abs p (rest_elems0 ++ rest_elems0)), (Abs p (rest_elems0 ++ rest_elems)), (Abs p (rest_elems ++ rest_elems0)), (Abs p (rest_elems ++ rest_elems)), (Abs p [])
(Abs (merge p p) rest_elems0), (Abs (merge p p) rest_elems), (Abs (merge p p) (rest_elems0 ++ rest_elems0)), (Abs (merge p p) (rest_elems0 ++ rest_elems)), (Abs (merge p p) (rest_elems ++ rest_elems0)), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) []), (Abs (p ++ p) rest_elems0), (Abs (p ++ p) rest_elems), (Abs (p ++ p) (rest_elems0 ++ rest_elems0))
(Abs (p ++ p) (rest_elems0 ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ rest_elems0)), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) []), (Abs [] rest_elems0), (Abs [] rest_elems), (Abs [] (rest_elems0 ++ rest_elems0)), (Abs [] (rest_elems0 ++ rest_elems)), (Abs [] (rest_elems ++ rest_elems0)), (Abs [] (rest_elems ++ rest_elems))
(Abs [] []), (priqueue_elems p (rest_elems0 ++ rest_elems0)), (priqueue_elems p (rest_elems0 ++ rest_elems)), (priqueue_elems p (rest_elems ++ rest_elems0)), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p []), (priqueue_elems (merge p p) rest_elems0), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) (rest_elems0 ++ rest_elems0)), (priqueue_elems (merge p p) (rest_elems0 ++ rest_elems))
(priqueue_elems (merge p p) (rest_elems ++ rest_elems0)), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) []), (priqueue_elems (p ++ p) rest_elems0), (priqueue_elems (p ++ p) rest_elems), (priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems0)), (priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems0)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) [])
(priqueue_elems [] rest_elems0), (priqueue_elems [] rest_elems), (priqueue_elems [] (rest_elems0 ++ rest_elems0)), (priqueue_elems [] (rest_elems0 ++ rest_elems)), (priqueue_elems [] (rest_elems ++ rest_elems0)), (priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] []), (tree_elems Leaf rest_elems0), (tree_elems Leaf rest_elems), (tree_elems Leaf (rest_elems0 ++ rest_elems0))
(tree_elems Leaf (rest_elems0 ++ rest_elems)), (tree_elems Leaf (rest_elems ++ rest_elems0)), (tree_elems Leaf (rest_elems ++ rest_elems)), (tree_elems Leaf []), (priq (merge p p)), (priq (p ++ p)), (priqq (length p) p), (priqq (length p) (merge p p)), (priqq (length p) (p ++ p)), (priqq (length rest_elems0) p)
(priqq (length rest_elems0) (merge p p)), (priqq (length rest_elems0) (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (p ++ p)), (pow2heapp (length p) (length p) Leaf), (pow2heapp (length p) (length rest_elems0) Leaf), (pow2heapp (length p) (length rest_elems) Leaf), (pow2heapp (length rest_elems0) (length p) Leaf), (pow2heapp (length rest_elems0) (length rest_elems0) Leaf)
(pow2heapp (length rest_elems0) (length rest_elems) Leaf), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length rest_elems) (length rest_elems0) Leaf), (pow2heapp (length rest_elems) (length rest_elems) Leaf), (Permutation p (merge p p)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (merge p p) p), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) [])
(Permutation (p ++ p) p), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (merge p p)), (Permutation [] (p ++ p)), (Permutation rest_elems0 (rest_elems0 ++ rest_elems0)), (Permutation rest_elems0 (rest_elems0 ++ rest_elems)), (Permutation rest_elems0 (rest_elems ++ rest_elems0)), (Permutation rest_elems0 (rest_elems ++ rest_elems))
(Permutation rest_elems0 []), (Permutation rest_elems (rest_elems0 ++ rest_elems0)), (Permutation rest_elems (rest_elems0 ++ rest_elems)), (Permutation rest_elems (rest_elems ++ rest_elems0)), (Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems []), (Permutation (rest_elems0 ++ rest_elems0) rest_elems0), (Permutation (rest_elems0 ++ rest_elems0) rest_elems), (Permutation (rest_elems0 ++ rest_elems0) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems0) (rest_elems ++ rest_elems0))
(Permutation (rest_elems0 ++ rest_elems0) (rest_elems ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems0) []), (Permutation (rest_elems0 ++ rest_elems) rest_elems0), (Permutation (rest_elems0 ++ rest_elems) rest_elems), (Permutation (rest_elems0 ++ rest_elems) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems0 ++ rest_elems) (rest_elems ++ rest_elems0)), (Permutation (rest_elems0 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems0 ++ rest_elems) []), (Permutation (rest_elems ++ rest_elems0) rest_elems0), (Permutation (rest_elems ++ rest_elems0) rest_elems)
(Permutation (rest_elems ++ rest_elems0) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems0) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems0) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems0) []), (Permutation (rest_elems ++ rest_elems) rest_elems0), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) (rest_elems0 ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems) (rest_elems0 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ rest_elems0)), (Permutation (rest_elems ++ rest_elems) [])
(Permutation [] rest_elems0), (Permutation [] rest_elems), (Permutation [] (rest_elems0 ++ rest_elems0)), (Permutation [] (rest_elems0 ++ rest_elems)), (Permutation [] (rest_elems ++ rest_elems0)), (Permutation [] (rest_elems ++ rest_elems)), (In Leaf p), (In Leaf (merge p p)), (In Leaf (p ++ p)), (In (length p) rest_elems0)
(In (length p) rest_elems), (In (length p) (rest_elems0 ++ rest_elems0)), (In (length p) (rest_elems0 ++ rest_elems)), (In (length p) (rest_elems ++ rest_elems0)), (In (length p) (rest_elems ++ rest_elems)), (In (length rest_elems0) rest_elems0), (In (length rest_elems0) rest_elems), (In (length rest_elems0) (rest_elems0 ++ rest_elems0)), (In (length rest_elems0) (rest_elems0 ++ rest_elems)), (In (length rest_elems0) (rest_elems ++ rest_elems0))
(In (length rest_elems0) (rest_elems ++ rest_elems)), (In (length rest_elems) rest_elems0), (In (length rest_elems) rest_elems), (In (length rest_elems) (rest_elems0 ++ rest_elems0)), (In (length rest_elems) (rest_elems0 ++ rest_elems)), (In (length rest_elems) (rest_elems ++ rest_elems0)), (In (length rest_elems) (rest_elems ++ rest_elems)), (length p < length rest_elems0), (length p < length rest_elems), (length rest_elems0 < length p)
(length rest_elems0 < length rest_elems), (length rest_elems < length p), (length rest_elems < length rest_elems0), (length p <= length rest_elems0), (length p <= length rest_elems), (length rest_elems0 <= length p), (length rest_elems0 <= length rest_elems), (length rest_elems <= length p), (length rest_elems <= length rest_elems0), (~ Abs p rest_elems0)
(~ Abs p rest_elems), (~ priqueue_elems p rest_elems0), (~ priqueue_elems p rest_elems), (~ priq p), (~ Permutation p p), (~ Permutation rest_elems0 rest_elems0), (~ Permutation rest_elems0 rest_elems), (~ Permutation rest_elems rest_elems0), (~ Permutation rest_elems rest_elems), (p <> p)
(rest_elems0 <> rest_elems0), (rest_elems0 <> rest_elems), (rest_elems <> rest_elems0), (rest_elems <> rest_elems), (None = Some rest_elems0), (None = Some rest_elems), (None = Some p), (merge p p = p), (merge p p = p ++ p), (p ++ p = p)
([] = p), ([] = merge p p), ([] = p ++ p), (rest_elems0 ++ rest_elems0 = rest_elems0), (rest_elems0 ++ rest_elems0 = rest_elems), (rest_elems0 ++ rest_elems = rest_elems0), (rest_elems0 ++ rest_elems = rest_elems), (rest_elems ++ rest_elems0 = rest_elems0), (rest_elems ++ rest_elems0 = rest_elems), (rest_elems ++ rest_elems = rest_elems0)
(rest_elems ++ rest_elems = rest_elems), ([] = rest_elems0), ([] = rest_elems), ([] = rest_elems0 ++ rest_elems0), ([] = rest_elems0 ++ rest_elems), ([] = rest_elems ++ rest_elems0), ([] = rest_elems ++ rest_elems), (None = find_max p)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 67.36 seconds


Label: 0 (0)
(Abs p rest_elems0), (priqueue_elems p rest_elems0), (Abs (p ++ p) (rest_elems0 ++ rest_elems0)), (priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems0))

Label: 1 (1)
(Abs p rest_elems), (priqueue_elems p rest_elems), (Abs (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems))






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 90.888 seconds

Number of Result Pairs Returned: 5

1. (priqueue_elems p rest_elems0 ->  priqueue_elems p rest_elems -> Permutation rest_elems rest_elems0)

2. (priqueue_elems p rest_elems -> Abs (p ++ p) (rest_elems ++ rest_elems))
(Abs (p ++ p) (rest_elems ++ rest_elems) ->  priqueue_elems p rest_elems0 -> Permutation rest_elems rest_elems0)

3. (priqueue_elems p rest_elems0 -> Abs (p ++ p) (rest_elems0 ++ rest_elems0))
(Abs (p ++ p) (rest_elems0 ++ rest_elems0) ->  priqueue_elems p rest_elems -> Permutation rest_elems rest_elems0)

4. (priqueue_elems p rest_elems ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems))
(priqueue_elems p rest_elems0 ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems) ->  Permutation rest_elems rest_elems0)

5. (priqueue_elems p rest_elems0 ->  priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems0))
(priqueue_elems p rest_elems ->  priqueue_elems (p ++ p) (rest_elems0 ++ rest_elems0) ->  Permutation rest_elems rest_elems0)
