Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Some (k, join l l0 Leaf) = Some (k, q))
 -- (priqq 0 l)
 -- (priq l0)
 -- (priq p)
 -- (find_max p = Some k)
 -- (join l l0 Leaf = q)

----------------------------------
Goal: (priq (join l l0 Leaf))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.626 seconds

gv1 : tree = Leaf
gv0 : (list tree) = (join l l0 Leaf)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 146.235 seconds

Label: Generalization #0
Assumptions: 
 -- (Some (k, join l l0 Leaf) = Some (k, q))

----------------------------------
Goal: (priq (join l l0 Leaf))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (Some (k, gv0) = Some (k, q))
 -- (join l l0 Leaf = gv0)

----------------------------------
Goal: (priq gv0)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (Some (k, join l l0 gv1) = Some (k, q))
 -- (Leaf = gv1)

----------------------------------
Goal: (priq (join l l0 gv1))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (Some (k, gv0) = Some (k, q))

----------------------------------
Goal: (priq gv0)
Case: Not Stable



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 146.375 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (Some (k, join l l0 Leaf) = Some (k, q))
Positive Examples: 42
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 53
Negative Examples: 1


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 147.093 seconds


Label: 0 (0)
(priq q), (priq l0), (priq l), (priqq k q), (priqq k l0), (priqq k l), (Permutation q q), (Permutation q l0), (Permutation q l), (Permutation l0 q)
(Permutation l0 l0), (Permutation l0 l), (Permutation l q), (Permutation l l0), (Permutation l l), (k < k), (k <= k), (k = k), (q = q), (q = l0)
(q = l), (l0 = q), (l0 = l0), (l0 = l), (l = q), (l = l0), (l = l), (false = (k >? k)), (false = (k >=? k)), (true = (k >? k))
(true = (k >=? k)), (Abs q []), (Abs l0 []), (Abs l []), (Abs (merge q q) []), (Abs (merge q l0) []), (Abs (merge q l) []), (Abs (merge l0 q) []), (Abs (merge l0 l0) []), (Abs (merge l0 l) [])
(Abs (merge l q) []), (Abs (merge l l0) []), (Abs (merge l l) []), (Abs (insert k q) []), (Abs (insert k l0) []), (Abs (insert k l) []), (Abs (q ++ q) []), (Abs (q ++ l0) []), (Abs (q ++ l) []), (Abs (l0 ++ q) [])
(Abs (l0 ++ l0) []), (Abs (l0 ++ l) []), (Abs (l ++ q) []), (Abs (l ++ l0) []), (Abs (l ++ l) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems l0 []), (priqueue_elems l []), (priqueue_elems (merge q q) [])
(priqueue_elems (merge q l0) []), (priqueue_elems (merge q l) []), (priqueue_elems (merge l0 q) []), (priqueue_elems (merge l0 l0) []), (priqueue_elems (merge l0 l) []), (priqueue_elems (merge l q) []), (priqueue_elems (merge l l0) []), (priqueue_elems (merge l l) []), (priqueue_elems (insert k q) []), (priqueue_elems (insert k l0) [])
(priqueue_elems (insert k l) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ l0) []), (priqueue_elems (q ++ l) []), (priqueue_elems (l0 ++ q) []), (priqueue_elems (l0 ++ l0) []), (priqueue_elems (l0 ++ l) []), (priqueue_elems (l ++ q) []), (priqueue_elems (l ++ l0) []), (priqueue_elems (l ++ l) [])
(priqueue_elems [] []), (tree_elems Leaf []), (priq (merge q q)), (priq (merge q l0)), (priq (merge q l)), (priq (merge l0 q)), (priq (merge l0 l0)), (priq (merge l0 l)), (priq (merge l q)), (priq (merge l l0))
(priq (merge l l)), (priq (insert k q)), (priq (insert k l0)), (priq (insert k l)), (priq (q ++ q)), (priq (q ++ l0)), (priq (q ++ l)), (priq (l0 ++ q)), (priq (l0 ++ l0)), (priq (l0 ++ l))
(priq (l ++ q)), (priq (l ++ l0)), (priq (l ++ l)), (priqq k (merge q q)), (priqq k (merge q l0)), (priqq k (merge q l)), (priqq k (merge l0 q)), (priqq k (merge l0 l0)), (priqq k (merge l0 l)), (priqq k (merge l q))
(priqq k (merge l l0)), (priqq k (merge l l)), (priqq k (insert k q)), (priqq k (insert k l0)), (priqq k (insert k l)), (priqq k (q ++ q)), (priqq k (q ++ l0)), (priqq k (q ++ l)), (priqq k (l0 ++ q)), (priqq k (l0 ++ l0))
(priqq k (l0 ++ l)), (priqq k (l ++ q)), (priqq k (l ++ l0)), (priqq k (l ++ l)), (priqq (find_max' k q) q), (priqq (find_max' k q) l0), (priqq (find_max' k q) l), (priqq (find_max' k q) (merge q q)), (priqq (find_max' k q) (merge q l0)), (priqq (find_max' k q) (merge q l))
(priqq (find_max' k q) (merge l0 q)), (priqq (find_max' k q) (merge l0 l0)), (priqq (find_max' k q) (merge l0 l)), (priqq (find_max' k q) (merge l q)), (priqq (find_max' k q) (merge l l0)), (priqq (find_max' k q) (merge l l)), (priqq (find_max' k q) (insert k q)), (priqq (find_max' k q) (insert k l0)), (priqq (find_max' k q) (insert k l)), (priqq (find_max' k q) (q ++ q))
(priqq (find_max' k q) (q ++ l0)), (priqq (find_max' k q) (q ++ l)), (priqq (find_max' k q) (l0 ++ q)), (priqq (find_max' k q) (l0 ++ l0)), (priqq (find_max' k q) (l0 ++ l)), (priqq (find_max' k q) (l ++ q)), (priqq (find_max' k q) (l ++ l0)), (priqq (find_max' k q) (l ++ l)), (priqq (find_max' k l0) q), (priqq (find_max' k l0) l0)
(priqq (find_max' k l0) l), (priqq (find_max' k l0) (merge q q)), (priqq (find_max' k l0) (merge q l0)), (priqq (find_max' k l0) (merge q l)), (priqq (find_max' k l0) (merge l0 q)), (priqq (find_max' k l0) (merge l0 l0)), (priqq (find_max' k l0) (merge l0 l)), (priqq (find_max' k l0) (merge l q)), (priqq (find_max' k l0) (merge l l0)), (priqq (find_max' k l0) (merge l l))
(priqq (find_max' k l0) (insert k q)), (priqq (find_max' k l0) (insert k l0)), (priqq (find_max' k l0) (insert k l)), (priqq (find_max' k l0) (q ++ q)), (priqq (find_max' k l0) (q ++ l0)), (priqq (find_max' k l0) (q ++ l)), (priqq (find_max' k l0) (l0 ++ q)), (priqq (find_max' k l0) (l0 ++ l0)), (priqq (find_max' k l0) (l0 ++ l)), (priqq (find_max' k l0) (l ++ q))
(priqq (find_max' k l0) (l ++ l0)), (priqq (find_max' k l0) (l ++ l)), (priqq (find_max' k l) q), (priqq (find_max' k l) l0), (priqq (find_max' k l) l), (priqq (find_max' k l) (merge q q)), (priqq (find_max' k l) (merge q l0)), (priqq (find_max' k l) (merge q l)), (priqq (find_max' k l) (merge l0 q)), (priqq (find_max' k l) (merge l0 l0))
(priqq (find_max' k l) (merge l0 l)), (priqq (find_max' k l) (merge l q)), (priqq (find_max' k l) (merge l l0)), (priqq (find_max' k l) (merge l l)), (priqq (find_max' k l) (insert k q)), (priqq (find_max' k l) (insert k l0)), (priqq (find_max' k l) (insert k l)), (priqq (find_max' k l) (q ++ q)), (priqq (find_max' k l) (q ++ l0)), (priqq (find_max' k l) (q ++ l))
(priqq (find_max' k l) (l0 ++ q)), (priqq (find_max' k l) (l0 ++ l0)), (priqq (find_max' k l) (l0 ++ l)), (priqq (find_max' k l) (l ++ q)), (priqq (find_max' k l) (l ++ l0)), (priqq (find_max' k l) (l ++ l)), (priqq (length q) q), (priqq (length q) l0), (priqq (length q) l), (priqq (length q) (merge q q))
(priqq (length q) (merge q l0)), (priqq (length q) (merge q l)), (priqq (length q) (merge l0 q)), (priqq (length q) (merge l0 l0)), (priqq (length q) (merge l0 l)), (priqq (length q) (merge l q)), (priqq (length q) (merge l l0)), (priqq (length q) (merge l l)), (priqq (length q) (insert k q)), (priqq (length q) (insert k l0))
(priqq (length q) (insert k l)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ l0)), (priqq (length q) (q ++ l)), (priqq (length q) (l0 ++ q)), (priqq (length q) (l0 ++ l0)), (priqq (length q) (l0 ++ l)), (priqq (length q) (l ++ q)), (priqq (length q) (l ++ l0)), (priqq (length q) (l ++ l))
(priqq (length l0) q), (priqq (length l0) l0), (priqq (length l0) l), (priqq (length l0) (merge q q)), (priqq (length l0) (merge q l0)), (priqq (length l0) (merge q l)), (priqq (length l0) (merge l0 q)), (priqq (length l0) (merge l0 l0)), (priqq (length l0) (merge l0 l)), (priqq (length l0) (merge l q))
(priqq (length l0) (merge l l0)), (priqq (length l0) (merge l l)), (priqq (length l0) (insert k q)), (priqq (length l0) (insert k l0)), (priqq (length l0) (insert k l)), (priqq (length l0) (q ++ q)), (priqq (length l0) (q ++ l0)), (priqq (length l0) (q ++ l)), (priqq (length l0) (l0 ++ q)), (priqq (length l0) (l0 ++ l0))
(priqq (length l0) (l0 ++ l)), (priqq (length l0) (l ++ q)), (priqq (length l0) (l ++ l0)), (priqq (length l0) (l ++ l)), (priqq (length l) q), (priqq (length l) l0), (priqq (length l) l), (priqq (length l) (merge q q)), (priqq (length l) (merge q l0)), (priqq (length l) (merge q l))
(priqq (length l) (merge l0 q)), (priqq (length l) (merge l0 l0)), (priqq (length l) (merge l0 l)), (priqq (length l) (merge l q)), (priqq (length l) (merge l l0)), (priqq (length l) (merge l l)), (priqq (length l) (insert k q)), (priqq (length l) (insert k l0)), (priqq (length l) (insert k l)), (priqq (length l) (q ++ q))
(priqq (length l) (q ++ l0)), (priqq (length l) (q ++ l)), (priqq (length l) (l0 ++ q)), (priqq (length l) (l0 ++ l0)), (priqq (length l) (l0 ++ l)), (priqq (length l) (l ++ q)), (priqq (length l) (l ++ l0)), (priqq (length l) (l ++ l)), (pow2heapp k k Leaf), (pow2heapp k (find_max' k q) Leaf)
(pow2heapp k (find_max' k l0) Leaf), (pow2heapp k (find_max' k l) Leaf), (pow2heapp k (length q) Leaf), (pow2heapp k (length l0) Leaf), (pow2heapp k (length l) Leaf), (pow2heapp (find_max' k q) k Leaf), (pow2heapp (find_max' k q) (find_max' k q) Leaf), (pow2heapp (find_max' k q) (find_max' k l0) Leaf), (pow2heapp (find_max' k q) (find_max' k l) Leaf), (pow2heapp (find_max' k q) (length q) Leaf)
(pow2heapp (find_max' k q) (length l0) Leaf), (pow2heapp (find_max' k q) (length l) Leaf), (pow2heapp (find_max' k l0) k Leaf), (pow2heapp (find_max' k l0) (find_max' k q) Leaf), (pow2heapp (find_max' k l0) (find_max' k l0) Leaf), (pow2heapp (find_max' k l0) (find_max' k l) Leaf), (pow2heapp (find_max' k l0) (length q) Leaf), (pow2heapp (find_max' k l0) (length l0) Leaf), (pow2heapp (find_max' k l0) (length l) Leaf), (pow2heapp (find_max' k l) k Leaf)
(pow2heapp (find_max' k l) (find_max' k q) Leaf), (pow2heapp (find_max' k l) (find_max' k l0) Leaf), (pow2heapp (find_max' k l) (find_max' k l) Leaf), (pow2heapp (find_max' k l) (length q) Leaf), (pow2heapp (find_max' k l) (length l0) Leaf), (pow2heapp (find_max' k l) (length l) Leaf), (pow2heapp (length q) k Leaf), (pow2heapp (length q) (find_max' k q) Leaf), (pow2heapp (length q) (find_max' k l0) Leaf), (pow2heapp (length q) (find_max' k l) Leaf)
(pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length l0) Leaf), (pow2heapp (length q) (length l) Leaf), (pow2heapp (length l0) k Leaf), (pow2heapp (length l0) (find_max' k q) Leaf), (pow2heapp (length l0) (find_max' k l0) Leaf), (pow2heapp (length l0) (find_max' k l) Leaf), (pow2heapp (length l0) (length q) Leaf), (pow2heapp (length l0) (length l0) Leaf), (pow2heapp (length l0) (length l) Leaf)
(pow2heapp (length l) k Leaf), (pow2heapp (length l) (find_max' k q) Leaf), (pow2heapp (length l) (find_max' k l0) Leaf), (pow2heapp (length l) (find_max' k l) Leaf), (pow2heapp (length l) (length q) Leaf), (pow2heapp (length l) (length l0) Leaf), (pow2heapp (length l) (length l) Leaf), (Permutation q (merge q q)), (Permutation q (merge q l0)), (Permutation q (merge q l))
(Permutation q (merge l0 q)), (Permutation q (merge l0 l0)), (Permutation q (merge l0 l)), (Permutation q (merge l q)), (Permutation q (merge l l0)), (Permutation q (merge l l)), (Permutation q (insert k q)), (Permutation q (insert k l0)), (Permutation q (insert k l)), (Permutation q (q ++ q))
(Permutation q (q ++ l0)), (Permutation q (q ++ l)), (Permutation q (l0 ++ q)), (Permutation q (l0 ++ l0)), (Permutation q (l0 ++ l)), (Permutation q (l ++ q)), (Permutation q (l ++ l0)), (Permutation q (l ++ l)), (Permutation q []), (Permutation l0 (merge q q))
(Permutation l0 (merge q l0)), (Permutation l0 (merge q l)), (Permutation l0 (merge l0 q)), (Permutation l0 (merge l0 l0)), (Permutation l0 (merge l0 l)), (Permutation l0 (merge l q)), (Permutation l0 (merge l l0)), (Permutation l0 (merge l l)), (Permutation l0 (insert k q)), (Permutation l0 (insert k l0))
(Permutation l0 (insert k l)), (Permutation l0 (q ++ q)), (Permutation l0 (q ++ l0)), (Permutation l0 (q ++ l)), (Permutation l0 (l0 ++ q)), (Permutation l0 (l0 ++ l0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l ++ q)), (Permutation l0 (l ++ l0)), (Permutation l0 (l ++ l))
(Permutation l0 []), (Permutation l (merge q q)), (Permutation l (merge q l0)), (Permutation l (merge q l)), (Permutation l (merge l0 q)), (Permutation l (merge l0 l0)), (Permutation l (merge l0 l)), (Permutation l (merge l q)), (Permutation l (merge l l0)), (Permutation l (merge l l))
(Permutation l (insert k q)), (Permutation l (insert k l0)), (Permutation l (insert k l)), (Permutation l (q ++ q)), (Permutation l (q ++ l0)), (Permutation l (q ++ l)), (Permutation l (l0 ++ q)), (Permutation l (l0 ++ l0)), (Permutation l (l0 ++ l)), (Permutation l (l ++ q))
(Permutation l (l ++ l0)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (merge q q) q), (Permutation (merge q q) l0), (Permutation (merge q q) l), (Permutation (merge q q) (merge q l0)), (Permutation (merge q q) (merge q l)), (Permutation (merge q q) (merge l0 q)), (Permutation (merge q q) (merge l0 l0))
(Permutation (merge q q) (merge l0 l)), (Permutation (merge q q) (merge l q)), (Permutation (merge q q) (merge l l0)), (Permutation (merge q q) (merge l l)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k l0)), (Permutation (merge q q) (insert k l)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ l0)), (Permutation (merge q q) (q ++ l))
(Permutation (merge q q) (l0 ++ q)), (Permutation (merge q q) (l0 ++ l0)), (Permutation (merge q q) (l0 ++ l)), (Permutation (merge q q) (l ++ q)), (Permutation (merge q q) (l ++ l0)), (Permutation (merge q q) (l ++ l)), (Permutation (merge q q) []), (Permutation (merge q l0) q), (Permutation (merge q l0) l0), (Permutation (merge q l0) l)
(Permutation (merge q l0) (merge q q)), (Permutation (merge q l0) (merge q l)), (Permutation (merge q l0) (merge l0 q)), (Permutation (merge q l0) (merge l0 l0)), (Permutation (merge q l0) (merge l0 l)), (Permutation (merge q l0) (merge l q)), (Permutation (merge q l0) (merge l l0)), (Permutation (merge q l0) (merge l l)), (Permutation (merge q l0) (insert k q)), (Permutation (merge q l0) (insert k l0))
(Permutation (merge q l0) (insert k l)), (Permutation (merge q l0) (q ++ q)), (Permutation (merge q l0) (q ++ l0)), (Permutation (merge q l0) (q ++ l)), (Permutation (merge q l0) (l0 ++ q)), (Permutation (merge q l0) (l0 ++ l0)), (Permutation (merge q l0) (l0 ++ l)), (Permutation (merge q l0) (l ++ q)), (Permutation (merge q l0) (l ++ l0)), (Permutation (merge q l0) (l ++ l))
(Permutation (merge q l0) []), (Permutation (merge q l) q), (Permutation (merge q l) l0), (Permutation (merge q l) l), (Permutation (merge q l) (merge q q)), (Permutation (merge q l) (merge q l0)), (Permutation (merge q l) (merge l0 q)), (Permutation (merge q l) (merge l0 l0)), (Permutation (merge q l) (merge l0 l)), (Permutation (merge q l) (merge l q))
(Permutation (merge q l) (merge l l0)), (Permutation (merge q l) (merge l l)), (Permutation (merge q l) (insert k q)), (Permutation (merge q l) (insert k l0)), (Permutation (merge q l) (insert k l)), (Permutation (merge q l) (q ++ q)), (Permutation (merge q l) (q ++ l0)), (Permutation (merge q l) (q ++ l)), (Permutation (merge q l) (l0 ++ q)), (Permutation (merge q l) (l0 ++ l0))
(Permutation (merge q l) (l0 ++ l)), (Permutation (merge q l) (l ++ q)), (Permutation (merge q l) (l ++ l0)), (Permutation (merge q l) (l ++ l)), (Permutation (merge q l) []), (Permutation (merge l0 q) q), (Permutation (merge l0 q) l0), (Permutation (merge l0 q) l), (Permutation (merge l0 q) (merge q q)), (Permutation (merge l0 q) (merge q l0))
(Permutation (merge l0 q) (merge q l)), (Permutation (merge l0 q) (merge l0 l0)), (Permutation (merge l0 q) (merge l0 l)), (Permutation (merge l0 q) (merge l q)), (Permutation (merge l0 q) (merge l l0)), (Permutation (merge l0 q) (merge l l)), (Permutation (merge l0 q) (insert k q)), (Permutation (merge l0 q) (insert k l0)), (Permutation (merge l0 q) (insert k l)), (Permutation (merge l0 q) (q ++ q))
(Permutation (merge l0 q) (q ++ l0)), (Permutation (merge l0 q) (q ++ l)), (Permutation (merge l0 q) (l0 ++ q)), (Permutation (merge l0 q) (l0 ++ l0)), (Permutation (merge l0 q) (l0 ++ l)), (Permutation (merge l0 q) (l ++ q)), (Permutation (merge l0 q) (l ++ l0)), (Permutation (merge l0 q) (l ++ l)), (Permutation (merge l0 q) []), (Permutation (merge l0 l0) q)
(Permutation (merge l0 l0) l0), (Permutation (merge l0 l0) l), (Permutation (merge l0 l0) (merge q q)), (Permutation (merge l0 l0) (merge q l0)), (Permutation (merge l0 l0) (merge q l)), (Permutation (merge l0 l0) (merge l0 q)), (Permutation (merge l0 l0) (merge l0 l)), (Permutation (merge l0 l0) (merge l q)), (Permutation (merge l0 l0) (merge l l0)), (Permutation (merge l0 l0) (merge l l))
(Permutation (merge l0 l0) (insert k q)), (Permutation (merge l0 l0) (insert k l0)), (Permutation (merge l0 l0) (insert k l)), (Permutation (merge l0 l0) (q ++ q)), (Permutation (merge l0 l0) (q ++ l0)), (Permutation (merge l0 l0) (q ++ l)), (Permutation (merge l0 l0) (l0 ++ q)), (Permutation (merge l0 l0) (l0 ++ l0)), (Permutation (merge l0 l0) (l0 ++ l)), (Permutation (merge l0 l0) (l ++ q))
(Permutation (merge l0 l0) (l ++ l0)), (Permutation (merge l0 l0) (l ++ l)), (Permutation (merge l0 l0) []), (Permutation (merge l0 l) q), (Permutation (merge l0 l) l0), (Permutation (merge l0 l) l), (Permutation (merge l0 l) (merge q q)), (Permutation (merge l0 l) (merge q l0)), (Permutation (merge l0 l) (merge q l)), (Permutation (merge l0 l) (merge l0 q))
(Permutation (merge l0 l) (merge l0 l0)), (Permutation (merge l0 l) (merge l q)), (Permutation (merge l0 l) (merge l l0)), (Permutation (merge l0 l) (merge l l)), (Permutation (merge l0 l) (insert k q)), (Permutation (merge l0 l) (insert k l0)), (Permutation (merge l0 l) (insert k l)), (Permutation (merge l0 l) (q ++ q)), (Permutation (merge l0 l) (q ++ l0)), (Permutation (merge l0 l) (q ++ l))
(Permutation (merge l0 l) (l0 ++ q)), (Permutation (merge l0 l) (l0 ++ l0)), (Permutation (merge l0 l) (l0 ++ l)), (Permutation (merge l0 l) (l ++ q)), (Permutation (merge l0 l) (l ++ l0)), (Permutation (merge l0 l) (l ++ l)), (Permutation (merge l0 l) []), (Permutation (merge l q) q), (Permutation (merge l q) l0), (Permutation (merge l q) l)
(Permutation (merge l q) (merge q q)), (Permutation (merge l q) (merge q l0)), (Permutation (merge l q) (merge q l)), (Permutation (merge l q) (merge l0 q)), (Permutation (merge l q) (merge l0 l0)), (Permutation (merge l q) (merge l0 l)), (Permutation (merge l q) (merge l l0)), (Permutation (merge l q) (merge l l)), (Permutation (merge l q) (insert k q)), (Permutation (merge l q) (insert k l0))
(Permutation (merge l q) (insert k l)), (Permutation (merge l q) (q ++ q)), (Permutation (merge l q) (q ++ l0)), (Permutation (merge l q) (q ++ l)), (Permutation (merge l q) (l0 ++ q)), (Permutation (merge l q) (l0 ++ l0)), (Permutation (merge l q) (l0 ++ l)), (Permutation (merge l q) (l ++ q)), (Permutation (merge l q) (l ++ l0)), (Permutation (merge l q) (l ++ l))
(Permutation (merge l q) []), (Permutation (merge l l0) q), (Permutation (merge l l0) l0), (Permutation (merge l l0) l), (Permutation (merge l l0) (merge q q)), (Permutation (merge l l0) (merge q l0)), (Permutation (merge l l0) (merge q l)), (Permutation (merge l l0) (merge l0 q)), (Permutation (merge l l0) (merge l0 l0)), (Permutation (merge l l0) (merge l0 l))
(Permutation (merge l l0) (merge l q)), (Permutation (merge l l0) (merge l l)), (Permutation (merge l l0) (insert k q)), (Permutation (merge l l0) (insert k l0)), (Permutation (merge l l0) (insert k l)), (Permutation (merge l l0) (q ++ q)), (Permutation (merge l l0) (q ++ l0)), (Permutation (merge l l0) (q ++ l)), (Permutation (merge l l0) (l0 ++ q)), (Permutation (merge l l0) (l0 ++ l0))
(Permutation (merge l l0) (l0 ++ l)), (Permutation (merge l l0) (l ++ q)), (Permutation (merge l l0) (l ++ l0)), (Permutation (merge l l0) (l ++ l)), (Permutation (merge l l0) []), (Permutation (merge l l) q), (Permutation (merge l l) l0), (Permutation (merge l l) l), (Permutation (merge l l) (merge q q)), (Permutation (merge l l) (merge q l0))
(Permutation (merge l l) (merge q l)), (Permutation (merge l l) (merge l0 q)), (Permutation (merge l l) (merge l0 l0)), (Permutation (merge l l) (merge l0 l)), (Permutation (merge l l) (merge l q)), (Permutation (merge l l) (merge l l0)), (Permutation (merge l l) (insert k q)), (Permutation (merge l l) (insert k l0)), (Permutation (merge l l) (insert k l)), (Permutation (merge l l) (q ++ q))
(Permutation (merge l l) (q ++ l0)), (Permutation (merge l l) (q ++ l)), (Permutation (merge l l) (l0 ++ q)), (Permutation (merge l l) (l0 ++ l0)), (Permutation (merge l l) (l0 ++ l)), (Permutation (merge l l) (l ++ q)), (Permutation (merge l l) (l ++ l0)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (insert k q) q)
(Permutation (insert k q) l0), (Permutation (insert k q) l), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q l0)), (Permutation (insert k q) (merge q l)), (Permutation (insert k q) (merge l0 q)), (Permutation (insert k q) (merge l0 l0)), (Permutation (insert k q) (merge l0 l)), (Permutation (insert k q) (merge l q)), (Permutation (insert k q) (merge l l0))
(Permutation (insert k q) (merge l l)), (Permutation (insert k q) (insert k l0)), (Permutation (insert k q) (insert k l)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ l0)), (Permutation (insert k q) (q ++ l)), (Permutation (insert k q) (l0 ++ q)), (Permutation (insert k q) (l0 ++ l0)), (Permutation (insert k q) (l0 ++ l)), (Permutation (insert k q) (l ++ q))
(Permutation (insert k q) (l ++ l0)), (Permutation (insert k q) (l ++ l)), (Permutation (insert k q) []), (Permutation (insert k l0) q), (Permutation (insert k l0) l0), (Permutation (insert k l0) l), (Permutation (insert k l0) (merge q q)), (Permutation (insert k l0) (merge q l0)), (Permutation (insert k l0) (merge q l)), (Permutation (insert k l0) (merge l0 q))
(Permutation (insert k l0) (merge l0 l0)), (Permutation (insert k l0) (merge l0 l)), (Permutation (insert k l0) (merge l q)), (Permutation (insert k l0) (merge l l0)), (Permutation (insert k l0) (merge l l)), (Permutation (insert k l0) (insert k q)), (Permutation (insert k l0) (insert k l)), (Permutation (insert k l0) (q ++ q)), (Permutation (insert k l0) (q ++ l0)), (Permutation (insert k l0) (q ++ l))
(Permutation (insert k l0) (l0 ++ q)), (Permutation (insert k l0) (l0 ++ l0)), (Permutation (insert k l0) (l0 ++ l)), (Permutation (insert k l0) (l ++ q)), (Permutation (insert k l0) (l ++ l0)), (Permutation (insert k l0) (l ++ l)), (Permutation (insert k l0) []), (Permutation (insert k l) q), (Permutation (insert k l) l0), (Permutation (insert k l) l)
(Permutation (insert k l) (merge q q)), (Permutation (insert k l) (merge q l0)), (Permutation (insert k l) (merge q l)), (Permutation (insert k l) (merge l0 q)), (Permutation (insert k l) (merge l0 l0)), (Permutation (insert k l) (merge l0 l)), (Permutation (insert k l) (merge l q)), (Permutation (insert k l) (merge l l0)), (Permutation (insert k l) (merge l l)), (Permutation (insert k l) (insert k q))
(Permutation (insert k l) (insert k l0)), (Permutation (insert k l) (q ++ q)), (Permutation (insert k l) (q ++ l0)), (Permutation (insert k l) (q ++ l)), (Permutation (insert k l) (l0 ++ q)), (Permutation (insert k l) (l0 ++ l0)), (Permutation (insert k l) (l0 ++ l)), (Permutation (insert k l) (l ++ q)), (Permutation (insert k l) (l ++ l0)), (Permutation (insert k l) (l ++ l))
(Permutation (insert k l) []), (Permutation (q ++ q) q), (Permutation (q ++ q) l0), (Permutation (q ++ q) l), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q l0)), (Permutation (q ++ q) (merge q l)), (Permutation (q ++ q) (merge l0 q)), (Permutation (q ++ q) (merge l0 l0)), (Permutation (q ++ q) (merge l0 l))
(Permutation (q ++ q) (merge l q)), (Permutation (q ++ q) (merge l l0)), (Permutation (q ++ q) (merge l l)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k l0)), (Permutation (q ++ q) (insert k l)), (Permutation (q ++ q) (q ++ l0)), (Permutation (q ++ q) (q ++ l)), (Permutation (q ++ q) (l0 ++ q)), (Permutation (q ++ q) (l0 ++ l0))
(Permutation (q ++ q) (l0 ++ l)), (Permutation (q ++ q) (l ++ q)), (Permutation (q ++ q) (l ++ l0)), (Permutation (q ++ q) (l ++ l)), (Permutation (q ++ q) []), (Permutation (q ++ l0) q), (Permutation (q ++ l0) l0), (Permutation (q ++ l0) l), (Permutation (q ++ l0) (merge q q)), (Permutation (q ++ l0) (merge q l0))
(Permutation (q ++ l0) (merge q l)), (Permutation (q ++ l0) (merge l0 q)), (Permutation (q ++ l0) (merge l0 l0)), (Permutation (q ++ l0) (merge l0 l)), (Permutation (q ++ l0) (merge l q)), (Permutation (q ++ l0) (merge l l0)), (Permutation (q ++ l0) (merge l l)), (Permutation (q ++ l0) (insert k q)), (Permutation (q ++ l0) (insert k l0)), (Permutation (q ++ l0) (insert k l))
(Permutation (q ++ l0) (q ++ q)), (Permutation (q ++ l0) (q ++ l)), (Permutation (q ++ l0) (l0 ++ q)), (Permutation (q ++ l0) (l0 ++ l0)), (Permutation (q ++ l0) (l0 ++ l)), (Permutation (q ++ l0) (l ++ q)), (Permutation (q ++ l0) (l ++ l0)), (Permutation (q ++ l0) (l ++ l)), (Permutation (q ++ l0) []), (Permutation (q ++ l) q)
(Permutation (q ++ l) l0), (Permutation (q ++ l) l), (Permutation (q ++ l) (merge q q)), (Permutation (q ++ l) (merge q l0)), (Permutation (q ++ l) (merge q l)), (Permutation (q ++ l) (merge l0 q)), (Permutation (q ++ l) (merge l0 l0)), (Permutation (q ++ l) (merge l0 l)), (Permutation (q ++ l) (merge l q)), (Permutation (q ++ l) (merge l l0))
(Permutation (q ++ l) (merge l l)), (Permutation (q ++ l) (insert k q)), (Permutation (q ++ l) (insert k l0)), (Permutation (q ++ l) (insert k l)), (Permutation (q ++ l) (q ++ q)), (Permutation (q ++ l) (q ++ l0)), (Permutation (q ++ l) (l0 ++ q)), (Permutation (q ++ l) (l0 ++ l0)), (Permutation (q ++ l) (l0 ++ l)), (Permutation (q ++ l) (l ++ q))
(Permutation (q ++ l) (l ++ l0)), (Permutation (q ++ l) (l ++ l)), (Permutation (q ++ l) []), (Permutation (l0 ++ q) q), (Permutation (l0 ++ q) l0), (Permutation (l0 ++ q) l), (Permutation (l0 ++ q) (merge q q)), (Permutation (l0 ++ q) (merge q l0)), (Permutation (l0 ++ q) (merge q l)), (Permutation (l0 ++ q) (merge l0 q))
(Permutation (l0 ++ q) (merge l0 l0)), (Permutation (l0 ++ q) (merge l0 l)), (Permutation (l0 ++ q) (merge l q)), (Permutation (l0 ++ q) (merge l l0)), (Permutation (l0 ++ q) (merge l l)), (Permutation (l0 ++ q) (insert k q)), (Permutation (l0 ++ q) (insert k l0)), (Permutation (l0 ++ q) (insert k l)), (Permutation (l0 ++ q) (q ++ q)), (Permutation (l0 ++ q) (q ++ l0))
(Permutation (l0 ++ q) (q ++ l)), (Permutation (l0 ++ q) (l0 ++ l0)), (Permutation (l0 ++ q) (l0 ++ l)), (Permutation (l0 ++ q) (l ++ q)), (Permutation (l0 ++ q) (l ++ l0)), (Permutation (l0 ++ q) (l ++ l)), (Permutation (l0 ++ q) []), (Permutation (l0 ++ l0) q), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) l)
(Permutation (l0 ++ l0) (merge q q)), (Permutation (l0 ++ l0) (merge q l0)), (Permutation (l0 ++ l0) (merge q l)), (Permutation (l0 ++ l0) (merge l0 q)), (Permutation (l0 ++ l0) (merge l0 l0)), (Permutation (l0 ++ l0) (merge l0 l)), (Permutation (l0 ++ l0) (merge l q)), (Permutation (l0 ++ l0) (merge l l0)), (Permutation (l0 ++ l0) (merge l l)), (Permutation (l0 ++ l0) (insert k q))
(Permutation (l0 ++ l0) (insert k l0)), (Permutation (l0 ++ l0) (insert k l)), (Permutation (l0 ++ l0) (q ++ q)), (Permutation (l0 ++ l0) (q ++ l0)), (Permutation (l0 ++ l0) (q ++ l)), (Permutation (l0 ++ l0) (l0 ++ q)), (Permutation (l0 ++ l0) (l0 ++ l)), (Permutation (l0 ++ l0) (l ++ q)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l ++ l))
(Permutation (l0 ++ l0) []), (Permutation (l0 ++ l) q), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) (merge q q)), (Permutation (l0 ++ l) (merge q l0)), (Permutation (l0 ++ l) (merge q l)), (Permutation (l0 ++ l) (merge l0 q)), (Permutation (l0 ++ l) (merge l0 l0)), (Permutation (l0 ++ l) (merge l0 l))
(Permutation (l0 ++ l) (merge l q)), (Permutation (l0 ++ l) (merge l l0)), (Permutation (l0 ++ l) (merge l l)), (Permutation (l0 ++ l) (insert k q)), (Permutation (l0 ++ l) (insert k l0)), (Permutation (l0 ++ l) (insert k l)), (Permutation (l0 ++ l) (q ++ q)), (Permutation (l0 ++ l) (q ++ l0)), (Permutation (l0 ++ l) (q ++ l)), (Permutation (l0 ++ l) (l0 ++ q))
(Permutation (l0 ++ l) (l0 ++ l0)), (Permutation (l0 ++ l) (l ++ q)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) []), (Permutation (l ++ q) q), (Permutation (l ++ q) l0), (Permutation (l ++ q) l), (Permutation (l ++ q) (merge q q)), (Permutation (l ++ q) (merge q l0))
(Permutation (l ++ q) (merge q l)), (Permutation (l ++ q) (merge l0 q)), (Permutation (l ++ q) (merge l0 l0)), (Permutation (l ++ q) (merge l0 l)), (Permutation (l ++ q) (merge l q)), (Permutation (l ++ q) (merge l l0)), (Permutation (l ++ q) (merge l l)), (Permutation (l ++ q) (insert k q)), (Permutation (l ++ q) (insert k l0)), (Permutation (l ++ q) (insert k l))
(Permutation (l ++ q) (q ++ q)), (Permutation (l ++ q) (q ++ l0)), (Permutation (l ++ q) (q ++ l)), (Permutation (l ++ q) (l0 ++ q)), (Permutation (l ++ q) (l0 ++ l0)), (Permutation (l ++ q) (l0 ++ l)), (Permutation (l ++ q) (l ++ l0)), (Permutation (l ++ q) (l ++ l)), (Permutation (l ++ q) []), (Permutation (l ++ l0) q)
(Permutation (l ++ l0) l0), (Permutation (l ++ l0) l), (Permutation (l ++ l0) (merge q q)), (Permutation (l ++ l0) (merge q l0)), (Permutation (l ++ l0) (merge q l)), (Permutation (l ++ l0) (merge l0 q)), (Permutation (l ++ l0) (merge l0 l0)), (Permutation (l ++ l0) (merge l0 l)), (Permutation (l ++ l0) (merge l q)), (Permutation (l ++ l0) (merge l l0))
(Permutation (l ++ l0) (merge l l)), (Permutation (l ++ l0) (insert k q)), (Permutation (l ++ l0) (insert k l0)), (Permutation (l ++ l0) (insert k l)), (Permutation (l ++ l0) (q ++ q)), (Permutation (l ++ l0) (q ++ l0)), (Permutation (l ++ l0) (q ++ l)), (Permutation (l ++ l0) (l0 ++ q)), (Permutation (l ++ l0) (l0 ++ l0)), (Permutation (l ++ l0) (l0 ++ l))
(Permutation (l ++ l0) (l ++ q)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) []), (Permutation (l ++ l) q), (Permutation (l ++ l) l0), (Permutation (l ++ l) l), (Permutation (l ++ l) (merge q q)), (Permutation (l ++ l) (merge q l0)), (Permutation (l ++ l) (merge q l)), (Permutation (l ++ l) (merge l0 q))
(Permutation (l ++ l) (merge l0 l0)), (Permutation (l ++ l) (merge l0 l)), (Permutation (l ++ l) (merge l q)), (Permutation (l ++ l) (merge l l0)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (insert k q)), (Permutation (l ++ l) (insert k l0)), (Permutation (l ++ l) (insert k l)), (Permutation (l ++ l) (q ++ q)), (Permutation (l ++ l) (q ++ l0))
(Permutation (l ++ l) (q ++ l)), (Permutation (l ++ l) (l0 ++ q)), (Permutation (l ++ l) (l0 ++ l0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l ++ q)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) []), (Permutation [] q), (Permutation [] l0), (Permutation [] l)
(Permutation [] (merge q q)), (Permutation [] (merge q l0)), (Permutation [] (merge q l)), (Permutation [] (merge l0 q)), (Permutation [] (merge l0 l0)), (Permutation [] (merge l0 l)), (Permutation [] (merge l q)), (Permutation [] (merge l l0)), (Permutation [] (merge l l)), (Permutation [] (insert k q))
(Permutation [] (insert k l0)), (Permutation [] (insert k l)), (Permutation [] (q ++ q)), (Permutation [] (q ++ l0)), (Permutation [] (q ++ l)), (Permutation [] (l0 ++ q)), (Permutation [] (l0 ++ l0)), (Permutation [] (l0 ++ l)), (Permutation [] (l ++ q)), (Permutation [] (l ++ l0))
(Permutation [] (l ++ l)), (In Leaf q), (In Leaf l0), (In Leaf l), (In Leaf (merge q q)), (In Leaf (merge q l0)), (In Leaf (merge q l)), (In Leaf (merge l0 q)), (In Leaf (merge l0 l0)), (In Leaf (merge l0 l))
(In Leaf (merge l q)), (In Leaf (merge l l0)), (In Leaf (merge l l)), (In Leaf (insert k q)), (In Leaf (insert k l0)), (In Leaf (insert k l)), (In Leaf (q ++ q)), (In Leaf (q ++ l0)), (In Leaf (q ++ l)), (In Leaf (l0 ++ q))
(In Leaf (l0 ++ l0)), (In Leaf (l0 ++ l)), (In Leaf (l ++ q)), (In Leaf (l ++ l0)), (In Leaf (l ++ l)), (k < find_max' k q), (k < find_max' k l0), (k < find_max' k l), (k < length q), (k < length l0)
(k < length l), (find_max' k q < k), (find_max' k q < find_max' k l0), (find_max' k q < find_max' k l), (find_max' k q < length q), (find_max' k q < length l0), (find_max' k q < length l), (find_max' k l0 < k), (find_max' k l0 < find_max' k q), (find_max' k l0 < find_max' k l)
(find_max' k l0 < length q), (find_max' k l0 < length l0), (find_max' k l0 < length l), (find_max' k l < k), (find_max' k l < find_max' k q), (find_max' k l < find_max' k l0), (find_max' k l < length q), (find_max' k l < length l0), (find_max' k l < length l), (length q < k)
(length q < find_max' k q), (length q < find_max' k l0), (length q < find_max' k l), (length q < length l0), (length q < length l), (length l0 < k), (length l0 < find_max' k q), (length l0 < find_max' k l0), (length l0 < find_max' k l), (length l0 < length q)
(length l0 < length l), (length l < k), (length l < find_max' k q), (length l < find_max' k l0), (length l < find_max' k l), (length l < length q), (length l < length l0), (k <= find_max' k q), (k <= find_max' k l0), (k <= find_max' k l)
(k <= length q), (k <= length l0), (k <= length l), (find_max' k q <= k), (find_max' k q <= find_max' k l0), (find_max' k q <= find_max' k l), (find_max' k q <= length q), (find_max' k q <= length l0), (find_max' k q <= length l), (find_max' k l0 <= k)
(find_max' k l0 <= find_max' k q), (find_max' k l0 <= find_max' k l), (find_max' k l0 <= length q), (find_max' k l0 <= length l0), (find_max' k l0 <= length l), (find_max' k l <= k), (find_max' k l <= find_max' k q), (find_max' k l <= find_max' k l0), (find_max' k l <= length q), (find_max' k l <= length l0)
(find_max' k l <= length l), (length q <= k), (length q <= find_max' k q), (length q <= find_max' k l0), (length q <= find_max' k l), (length q <= length l0), (length q <= length l), (length l0 <= k), (length l0 <= find_max' k q), (length l0 <= find_max' k l0)
(length l0 <= find_max' k l), (length l0 <= length q), (length l0 <= length l), (length l <= k), (length l <= find_max' k q), (length l <= find_max' k l0), (length l <= find_max' k l), (length l <= length q), (length l <= length l0), (~ priq q)
(~ priq l0), (~ priq l), (~ priqq k q), (~ priqq k l0), (~ priqq k l), (~ Permutation q q), (~ Permutation q l0), (~ Permutation q l), (~ Permutation l0 q), (~ Permutation l0 l0)
(~ Permutation l0 l), (~ Permutation l q), (~ Permutation l l0), (~ Permutation l l), (~ k < k), (~ k <= k), (k <> k), (q <> q), (q <> l0), (q <> l)
(l0 <> q), (l0 <> l0), (l0 <> l), (l <> q), (l <> l0), (l <> l), (None = Some q), (None = Some l0), (None = Some l), (merge q q = q)
(merge q q = l0), (merge q q = l), (merge q q = insert k q), (merge q q = insert k l0), (merge q q = insert k l), (merge q q = q ++ q), (merge q q = q ++ l0), (merge q q = q ++ l), (merge q q = l0 ++ q), (merge q q = l0 ++ l0)
(merge q q = l0 ++ l), (merge q q = l ++ q), (merge q q = l ++ l0), (merge q q = l ++ l), (merge q l0 = q), (merge q l0 = l0), (merge q l0 = l), (merge q l0 = insert k q), (merge q l0 = insert k l0), (merge q l0 = insert k l)
(merge q l0 = q ++ q), (merge q l0 = q ++ l0), (merge q l0 = q ++ l), (merge q l0 = l0 ++ q), (merge q l0 = l0 ++ l0), (merge q l0 = l0 ++ l), (merge q l0 = l ++ q), (merge q l0 = l ++ l0), (merge q l0 = l ++ l), (merge q l = q)
(merge q l = l0), (merge q l = l), (merge q l = insert k q), (merge q l = insert k l0), (merge q l = insert k l), (merge q l = q ++ q), (merge q l = q ++ l0), (merge q l = q ++ l), (merge q l = l0 ++ q), (merge q l = l0 ++ l0)
(merge q l = l0 ++ l), (merge q l = l ++ q), (merge q l = l ++ l0), (merge q l = l ++ l), (merge l0 q = q), (merge l0 q = l0), (merge l0 q = l), (merge l0 q = insert k q), (merge l0 q = insert k l0), (merge l0 q = insert k l)
(merge l0 q = q ++ q), (merge l0 q = q ++ l0), (merge l0 q = q ++ l), (merge l0 q = l0 ++ q), (merge l0 q = l0 ++ l0), (merge l0 q = l0 ++ l), (merge l0 q = l ++ q), (merge l0 q = l ++ l0), (merge l0 q = l ++ l), (merge l0 l0 = q)
(merge l0 l0 = l0), (merge l0 l0 = l), (merge l0 l0 = insert k q), (merge l0 l0 = insert k l0), (merge l0 l0 = insert k l), (merge l0 l0 = q ++ q), (merge l0 l0 = q ++ l0), (merge l0 l0 = q ++ l), (merge l0 l0 = l0 ++ q), (merge l0 l0 = l0 ++ l0)
(merge l0 l0 = l0 ++ l), (merge l0 l0 = l ++ q), (merge l0 l0 = l ++ l0), (merge l0 l0 = l ++ l), (merge l0 l = q), (merge l0 l = l0), (merge l0 l = l), (merge l0 l = insert k q), (merge l0 l = insert k l0), (merge l0 l = insert k l)
(merge l0 l = q ++ q), (merge l0 l = q ++ l0), (merge l0 l = q ++ l), (merge l0 l = l0 ++ q), (merge l0 l = l0 ++ l0), (merge l0 l = l0 ++ l), (merge l0 l = l ++ q), (merge l0 l = l ++ l0), (merge l0 l = l ++ l), (merge l q = q)
(merge l q = l0), (merge l q = l), (merge l q = insert k q), (merge l q = insert k l0), (merge l q = insert k l), (merge l q = q ++ q), (merge l q = q ++ l0), (merge l q = q ++ l), (merge l q = l0 ++ q), (merge l q = l0 ++ l0)
(merge l q = l0 ++ l), (merge l q = l ++ q), (merge l q = l ++ l0), (merge l q = l ++ l), (merge l l0 = q), (merge l l0 = l0), (merge l l0 = l), (merge l l0 = insert k q), (merge l l0 = insert k l0), (merge l l0 = insert k l)
(merge l l0 = q ++ q), (merge l l0 = q ++ l0), (merge l l0 = q ++ l), (merge l l0 = l0 ++ q), (merge l l0 = l0 ++ l0), (merge l l0 = l0 ++ l), (merge l l0 = l ++ q), (merge l l0 = l ++ l0), (merge l l0 = l ++ l), (merge l l = q)
(merge l l = l0), (merge l l = l), (merge l l = insert k q), (merge l l = insert k l0), (merge l l = insert k l), (merge l l = q ++ q), (merge l l = q ++ l0), (merge l l = q ++ l), (merge l l = l0 ++ q), (merge l l = l0 ++ l0)
(merge l l = l0 ++ l), (merge l l = l ++ q), (merge l l = l ++ l0), (merge l l = l ++ l), (insert k q = q), (insert k q = l0), (insert k q = l), (insert k q = q ++ q), (insert k q = q ++ l0), (insert k q = q ++ l)
(insert k q = l0 ++ q), (insert k q = l0 ++ l0), (insert k q = l0 ++ l), (insert k q = l ++ q), (insert k q = l ++ l0), (insert k q = l ++ l), (insert k l0 = q), (insert k l0 = l0), (insert k l0 = l), (insert k l0 = q ++ q)
(insert k l0 = q ++ l0), (insert k l0 = q ++ l), (insert k l0 = l0 ++ q), (insert k l0 = l0 ++ l0), (insert k l0 = l0 ++ l), (insert k l0 = l ++ q), (insert k l0 = l ++ l0), (insert k l0 = l ++ l), (insert k l = q), (insert k l = l0)
(insert k l = l), (insert k l = q ++ q), (insert k l = q ++ l0), (insert k l = q ++ l), (insert k l = l0 ++ q), (insert k l = l0 ++ l0), (insert k l = l0 ++ l), (insert k l = l ++ q), (insert k l = l ++ l0), (insert k l = l ++ l)
(q ++ q = q), (q ++ q = l0), (q ++ q = l), (q ++ l0 = q), (q ++ l0 = l0), (q ++ l0 = l), (q ++ l = q), (q ++ l = l0), (q ++ l = l), (l0 ++ q = q)
(l0 ++ q = l0), (l0 ++ q = l), (l0 ++ l0 = q), (l0 ++ l0 = l0), (l0 ++ l0 = l), (l0 ++ l = q), (l0 ++ l = l0), (l0 ++ l = l), (l ++ q = q), (l ++ q = l0)
(l ++ q = l), (l ++ l0 = q), (l ++ l0 = l0), (l ++ l0 = l), (l ++ l = q), (l ++ l = l0), (l ++ l = l), ([] = q), ([] = l0), ([] = l)
([] = merge q q), ([] = merge q l0), ([] = merge q l), ([] = merge l0 q), ([] = merge l0 l0), ([] = merge l0 l), ([] = merge l q), ([] = merge l l0), ([] = merge l l), ([] = insert k q)
([] = insert k l0), ([] = insert k l), ([] = q ++ q), ([] = q ++ l0), ([] = q ++ l), ([] = l0 ++ q), ([] = l0 ++ l0), ([] = l0 ++ l), ([] = l ++ q), ([] = l ++ l0)
([] = l ++ l), ((q, q) = delete_max_aux k q), ((q, q) = delete_max_aux k l0), ((q, q) = delete_max_aux k l), ((q, l0) = delete_max_aux k q), ((q, l0) = delete_max_aux k l0), ((q, l0) = delete_max_aux k l), ((q, l) = delete_max_aux k q), ((q, l) = delete_max_aux k l0), ((q, l) = delete_max_aux k l)
((l0, q) = delete_max_aux k q), ((l0, q) = delete_max_aux k l0), ((l0, q) = delete_max_aux k l), ((l0, l0) = delete_max_aux k q), ((l0, l0) = delete_max_aux k l0), ((l0, l0) = delete_max_aux k l), ((l0, l) = delete_max_aux k q), ((l0, l) = delete_max_aux k l0), ((l0, l) = delete_max_aux k l), ((l, q) = delete_max_aux k q)
((l, q) = delete_max_aux k l0), ((l, q) = delete_max_aux k l), ((l, l0) = delete_max_aux k q), ((l, l0) = delete_max_aux k l0), ((l, l0) = delete_max_aux k l), ((l, l) = delete_max_aux k q), ((l, l) = delete_max_aux k l0), ((l, l) = delete_max_aux k l), (find_max' k q = k), (find_max' k l0 = k)
(find_max' k l = k), (length q = k), (length q = find_max' k q), (length q = find_max' k l0), (length q = find_max' k l), (length l0 = k), (length l0 = find_max' k q), (length l0 = find_max' k l0), (length l0 = find_max' k l), (length l = k)
(length l = find_max' k q), (length l = find_max' k l0), (length l = find_max' k l), (Some k = find_max q), (Some k = find_max l0), (Some k = find_max l), (None = Some k), (None = find_max q), (None = find_max l0), (None = find_max l)
((k >? k) = (k >=? k))

Label: 1 (1)
(priq q), (priq l0), (priq l), (priq gv0), (priqq k q), (priqq k l0), (priqq k l), (priqq k gv0), (Permutation q q), (Permutation q l0)
(Permutation q l), (Permutation q gv0), (Permutation l0 q), (Permutation l0 l0), (Permutation l0 l), (Permutation l0 gv0), (Permutation l q), (Permutation l l0), (Permutation l l), (Permutation l gv0)
(Permutation gv0 q), (Permutation gv0 l0), (Permutation gv0 l), (Permutation gv0 gv0), (k < k), (k <= k), (k = k), (q = q), (q = l0), (q = l)
(q = gv0), (l0 = q), (l0 = l0), (l0 = l), (l0 = gv0), (l = q), (l = l0), (l = l), (l = gv0), (gv0 = q)
(gv0 = l0), (gv0 = l), (gv0 = gv0), (false = (k >? k)), (false = (k >=? k)), (true = (k >? k)), (true = (k >=? k)), (Abs q []), (Abs l0 []), (Abs l [])
(Abs gv0 []), (Abs (merge q q) []), (Abs (merge q l0) []), (Abs (merge q l) []), (Abs (merge q gv0) []), (Abs (merge l0 q) []), (Abs (merge l0 l0) []), (Abs (merge l0 l) []), (Abs (merge l0 gv0) []), (Abs (merge l q) [])
(Abs (merge l l0) []), (Abs (merge l l) []), (Abs (merge l gv0) []), (Abs (merge gv0 q) []), (Abs (merge gv0 l0) []), (Abs (merge gv0 l) []), (Abs (merge gv0 gv0) []), (Abs (insert k q) []), (Abs (insert k l0) []), (Abs (insert k l) [])
(Abs (insert k gv0) []), (Abs (q ++ q) []), (Abs (q ++ l0) []), (Abs (q ++ l) []), (Abs (q ++ gv0) []), (Abs (l0 ++ q) []), (Abs (l0 ++ l0) []), (Abs (l0 ++ l) []), (Abs (l0 ++ gv0) []), (Abs (l ++ q) [])
(Abs (l ++ l0) []), (Abs (l ++ l) []), (Abs (l ++ gv0) []), (Abs (gv0 ++ q) []), (Abs (gv0 ++ l0) []), (Abs (gv0 ++ l) []), (Abs (gv0 ++ gv0) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems l0 [])
(priqueue_elems l []), (priqueue_elems gv0 []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q l0) []), (priqueue_elems (merge q l) []), (priqueue_elems (merge q gv0) []), (priqueue_elems (merge l0 q) []), (priqueue_elems (merge l0 l0) []), (priqueue_elems (merge l0 l) []), (priqueue_elems (merge l0 gv0) [])
(priqueue_elems (merge l q) []), (priqueue_elems (merge l l0) []), (priqueue_elems (merge l l) []), (priqueue_elems (merge l gv0) []), (priqueue_elems (merge gv0 q) []), (priqueue_elems (merge gv0 l0) []), (priqueue_elems (merge gv0 l) []), (priqueue_elems (merge gv0 gv0) []), (priqueue_elems (insert k q) []), (priqueue_elems (insert k l0) [])
(priqueue_elems (insert k l) []), (priqueue_elems (insert k gv0) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ l0) []), (priqueue_elems (q ++ l) []), (priqueue_elems (q ++ gv0) []), (priqueue_elems (l0 ++ q) []), (priqueue_elems (l0 ++ l0) []), (priqueue_elems (l0 ++ l) []), (priqueue_elems (l0 ++ gv0) [])
(priqueue_elems (l ++ q) []), (priqueue_elems (l ++ l0) []), (priqueue_elems (l ++ l) []), (priqueue_elems (l ++ gv0) []), (priqueue_elems (gv0 ++ q) []), (priqueue_elems (gv0 ++ l0) []), (priqueue_elems (gv0 ++ l) []), (priqueue_elems (gv0 ++ gv0) []), (priqueue_elems [] []), (tree_elems Leaf [])
(priq (merge q q)), (priq (merge q l0)), (priq (merge q l)), (priq (merge q gv0)), (priq (merge l0 q)), (priq (merge l0 l0)), (priq (merge l0 l)), (priq (merge l0 gv0)), (priq (merge l q)), (priq (merge l l0))
(priq (merge l l)), (priq (merge l gv0)), (priq (merge gv0 q)), (priq (merge gv0 l0)), (priq (merge gv0 l)), (priq (merge gv0 gv0)), (priq (insert k q)), (priq (insert k l0)), (priq (insert k l)), (priq (insert k gv0))
(priq (q ++ q)), (priq (q ++ l0)), (priq (q ++ l)), (priq (q ++ gv0)), (priq (l0 ++ q)), (priq (l0 ++ l0)), (priq (l0 ++ l)), (priq (l0 ++ gv0)), (priq (l ++ q)), (priq (l ++ l0))
(priq (l ++ l)), (priq (l ++ gv0)), (priq (gv0 ++ q)), (priq (gv0 ++ l0)), (priq (gv0 ++ l)), (priq (gv0 ++ gv0)), (priqq k (merge q q)), (priqq k (merge q l0)), (priqq k (merge q l)), (priqq k (merge q gv0))
(priqq k (merge l0 q)), (priqq k (merge l0 l0)), (priqq k (merge l0 l)), (priqq k (merge l0 gv0)), (priqq k (merge l q)), (priqq k (merge l l0)), (priqq k (merge l l)), (priqq k (merge l gv0)), (priqq k (merge gv0 q)), (priqq k (merge gv0 l0))
(priqq k (merge gv0 l)), (priqq k (merge gv0 gv0)), (priqq k (insert k q)), (priqq k (insert k l0)), (priqq k (insert k l)), (priqq k (insert k gv0)), (priqq k (q ++ q)), (priqq k (q ++ l0)), (priqq k (q ++ l)), (priqq k (q ++ gv0))
(priqq k (l0 ++ q)), (priqq k (l0 ++ l0)), (priqq k (l0 ++ l)), (priqq k (l0 ++ gv0)), (priqq k (l ++ q)), (priqq k (l ++ l0)), (priqq k (l ++ l)), (priqq k (l ++ gv0)), (priqq k (gv0 ++ q)), (priqq k (gv0 ++ l0))
(priqq k (gv0 ++ l)), (priqq k (gv0 ++ gv0)), (priqq (find_max' k q) q), (priqq (find_max' k q) l0), (priqq (find_max' k q) l), (priqq (find_max' k q) gv0), (priqq (find_max' k q) (merge q q)), (priqq (find_max' k q) (merge q l0)), (priqq (find_max' k q) (merge q l)), (priqq (find_max' k q) (merge q gv0))
(priqq (find_max' k q) (merge l0 q)), (priqq (find_max' k q) (merge l0 l0)), (priqq (find_max' k q) (merge l0 l)), (priqq (find_max' k q) (merge l0 gv0)), (priqq (find_max' k q) (merge l q)), (priqq (find_max' k q) (merge l l0)), (priqq (find_max' k q) (merge l l)), (priqq (find_max' k q) (merge l gv0)), (priqq (find_max' k q) (merge gv0 q)), (priqq (find_max' k q) (merge gv0 l0))
(priqq (find_max' k q) (merge gv0 l)), (priqq (find_max' k q) (merge gv0 gv0)), (priqq (find_max' k q) (insert k q)), (priqq (find_max' k q) (insert k l0)), (priqq (find_max' k q) (insert k l)), (priqq (find_max' k q) (insert k gv0)), (priqq (find_max' k q) (q ++ q)), (priqq (find_max' k q) (q ++ l0)), (priqq (find_max' k q) (q ++ l)), (priqq (find_max' k q) (q ++ gv0))
(priqq (find_max' k q) (l0 ++ q)), (priqq (find_max' k q) (l0 ++ l0)), (priqq (find_max' k q) (l0 ++ l)), (priqq (find_max' k q) (l0 ++ gv0)), (priqq (find_max' k q) (l ++ q)), (priqq (find_max' k q) (l ++ l0)), (priqq (find_max' k q) (l ++ l)), (priqq (find_max' k q) (l ++ gv0)), (priqq (find_max' k q) (gv0 ++ q)), (priqq (find_max' k q) (gv0 ++ l0))
(priqq (find_max' k q) (gv0 ++ l)), (priqq (find_max' k q) (gv0 ++ gv0)), (priqq (find_max' k l0) q), (priqq (find_max' k l0) l0), (priqq (find_max' k l0) l), (priqq (find_max' k l0) gv0), (priqq (find_max' k l0) (merge q q)), (priqq (find_max' k l0) (merge q l0)), (priqq (find_max' k l0) (merge q l)), (priqq (find_max' k l0) (merge q gv0))
(priqq (find_max' k l0) (merge l0 q)), (priqq (find_max' k l0) (merge l0 l0)), (priqq (find_max' k l0) (merge l0 l)), (priqq (find_max' k l0) (merge l0 gv0)), (priqq (find_max' k l0) (merge l q)), (priqq (find_max' k l0) (merge l l0)), (priqq (find_max' k l0) (merge l l)), (priqq (find_max' k l0) (merge l gv0)), (priqq (find_max' k l0) (merge gv0 q)), (priqq (find_max' k l0) (merge gv0 l0))
(priqq (find_max' k l0) (merge gv0 l)), (priqq (find_max' k l0) (merge gv0 gv0)), (priqq (find_max' k l0) (insert k q)), (priqq (find_max' k l0) (insert k l0)), (priqq (find_max' k l0) (insert k l)), (priqq (find_max' k l0) (insert k gv0)), (priqq (find_max' k l0) (q ++ q)), (priqq (find_max' k l0) (q ++ l0)), (priqq (find_max' k l0) (q ++ l)), (priqq (find_max' k l0) (q ++ gv0))
(priqq (find_max' k l0) (l0 ++ q)), (priqq (find_max' k l0) (l0 ++ l0)), (priqq (find_max' k l0) (l0 ++ l)), (priqq (find_max' k l0) (l0 ++ gv0)), (priqq (find_max' k l0) (l ++ q)), (priqq (find_max' k l0) (l ++ l0)), (priqq (find_max' k l0) (l ++ l)), (priqq (find_max' k l0) (l ++ gv0)), (priqq (find_max' k l0) (gv0 ++ q)), (priqq (find_max' k l0) (gv0 ++ l0))
(priqq (find_max' k l0) (gv0 ++ l)), (priqq (find_max' k l0) (gv0 ++ gv0)), (priqq (find_max' k l) q), (priqq (find_max' k l) l0), (priqq (find_max' k l) l), (priqq (find_max' k l) gv0), (priqq (find_max' k l) (merge q q)), (priqq (find_max' k l) (merge q l0)), (priqq (find_max' k l) (merge q l)), (priqq (find_max' k l) (merge q gv0))
(priqq (find_max' k l) (merge l0 q)), (priqq (find_max' k l) (merge l0 l0)), (priqq (find_max' k l) (merge l0 l)), (priqq (find_max' k l) (merge l0 gv0)), (priqq (find_max' k l) (merge l q)), (priqq (find_max' k l) (merge l l0)), (priqq (find_max' k l) (merge l l)), (priqq (find_max' k l) (merge l gv0)), (priqq (find_max' k l) (merge gv0 q)), (priqq (find_max' k l) (merge gv0 l0))
(priqq (find_max' k l) (merge gv0 l)), (priqq (find_max' k l) (merge gv0 gv0)), (priqq (find_max' k l) (insert k q)), (priqq (find_max' k l) (insert k l0)), (priqq (find_max' k l) (insert k l)), (priqq (find_max' k l) (insert k gv0)), (priqq (find_max' k l) (q ++ q)), (priqq (find_max' k l) (q ++ l0)), (priqq (find_max' k l) (q ++ l)), (priqq (find_max' k l) (q ++ gv0))
(priqq (find_max' k l) (l0 ++ q)), (priqq (find_max' k l) (l0 ++ l0)), (priqq (find_max' k l) (l0 ++ l)), (priqq (find_max' k l) (l0 ++ gv0)), (priqq (find_max' k l) (l ++ q)), (priqq (find_max' k l) (l ++ l0)), (priqq (find_max' k l) (l ++ l)), (priqq (find_max' k l) (l ++ gv0)), (priqq (find_max' k l) (gv0 ++ q)), (priqq (find_max' k l) (gv0 ++ l0))
(priqq (find_max' k l) (gv0 ++ l)), (priqq (find_max' k l) (gv0 ++ gv0)), (priqq (find_max' k gv0) q), (priqq (find_max' k gv0) l0), (priqq (find_max' k gv0) l), (priqq (find_max' k gv0) gv0), (priqq (find_max' k gv0) (merge q q)), (priqq (find_max' k gv0) (merge q l0)), (priqq (find_max' k gv0) (merge q l)), (priqq (find_max' k gv0) (merge q gv0))
(priqq (find_max' k gv0) (merge l0 q)), (priqq (find_max' k gv0) (merge l0 l0)), (priqq (find_max' k gv0) (merge l0 l)), (priqq (find_max' k gv0) (merge l0 gv0)), (priqq (find_max' k gv0) (merge l q)), (priqq (find_max' k gv0) (merge l l0)), (priqq (find_max' k gv0) (merge l l)), (priqq (find_max' k gv0) (merge l gv0)), (priqq (find_max' k gv0) (merge gv0 q)), (priqq (find_max' k gv0) (merge gv0 l0))
(priqq (find_max' k gv0) (merge gv0 l)), (priqq (find_max' k gv0) (merge gv0 gv0)), (priqq (find_max' k gv0) (insert k q)), (priqq (find_max' k gv0) (insert k l0)), (priqq (find_max' k gv0) (insert k l)), (priqq (find_max' k gv0) (insert k gv0)), (priqq (find_max' k gv0) (q ++ q)), (priqq (find_max' k gv0) (q ++ l0)), (priqq (find_max' k gv0) (q ++ l)), (priqq (find_max' k gv0) (q ++ gv0))
(priqq (find_max' k gv0) (l0 ++ q)), (priqq (find_max' k gv0) (l0 ++ l0)), (priqq (find_max' k gv0) (l0 ++ l)), (priqq (find_max' k gv0) (l0 ++ gv0)), (priqq (find_max' k gv0) (l ++ q)), (priqq (find_max' k gv0) (l ++ l0)), (priqq (find_max' k gv0) (l ++ l)), (priqq (find_max' k gv0) (l ++ gv0)), (priqq (find_max' k gv0) (gv0 ++ q)), (priqq (find_max' k gv0) (gv0 ++ l0))
(priqq (find_max' k gv0) (gv0 ++ l)), (priqq (find_max' k gv0) (gv0 ++ gv0)), (priqq (length q) q), (priqq (length q) l0), (priqq (length q) l), (priqq (length q) gv0), (priqq (length q) (merge q q)), (priqq (length q) (merge q l0)), (priqq (length q) (merge q l)), (priqq (length q) (merge q gv0))
(priqq (length q) (merge l0 q)), (priqq (length q) (merge l0 l0)), (priqq (length q) (merge l0 l)), (priqq (length q) (merge l0 gv0)), (priqq (length q) (merge l q)), (priqq (length q) (merge l l0)), (priqq (length q) (merge l l)), (priqq (length q) (merge l gv0)), (priqq (length q) (merge gv0 q)), (priqq (length q) (merge gv0 l0))
(priqq (length q) (merge gv0 l)), (priqq (length q) (merge gv0 gv0)), (priqq (length q) (insert k q)), (priqq (length q) (insert k l0)), (priqq (length q) (insert k l)), (priqq (length q) (insert k gv0)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ l0)), (priqq (length q) (q ++ l)), (priqq (length q) (q ++ gv0))
(priqq (length q) (l0 ++ q)), (priqq (length q) (l0 ++ l0)), (priqq (length q) (l0 ++ l)), (priqq (length q) (l0 ++ gv0)), (priqq (length q) (l ++ q)), (priqq (length q) (l ++ l0)), (priqq (length q) (l ++ l)), (priqq (length q) (l ++ gv0)), (priqq (length q) (gv0 ++ q)), (priqq (length q) (gv0 ++ l0))
(priqq (length q) (gv0 ++ l)), (priqq (length q) (gv0 ++ gv0)), (priqq (length l0) q), (priqq (length l0) l0), (priqq (length l0) l), (priqq (length l0) gv0), (priqq (length l0) (merge q q)), (priqq (length l0) (merge q l0)), (priqq (length l0) (merge q l)), (priqq (length l0) (merge q gv0))
(priqq (length l0) (merge l0 q)), (priqq (length l0) (merge l0 l0)), (priqq (length l0) (merge l0 l)), (priqq (length l0) (merge l0 gv0)), (priqq (length l0) (merge l q)), (priqq (length l0) (merge l l0)), (priqq (length l0) (merge l l)), (priqq (length l0) (merge l gv0)), (priqq (length l0) (merge gv0 q)), (priqq (length l0) (merge gv0 l0))
(priqq (length l0) (merge gv0 l)), (priqq (length l0) (merge gv0 gv0)), (priqq (length l0) (insert k q)), (priqq (length l0) (insert k l0)), (priqq (length l0) (insert k l)), (priqq (length l0) (insert k gv0)), (priqq (length l0) (q ++ q)), (priqq (length l0) (q ++ l0)), (priqq (length l0) (q ++ l)), (priqq (length l0) (q ++ gv0))
(priqq (length l0) (l0 ++ q)), (priqq (length l0) (l0 ++ l0)), (priqq (length l0) (l0 ++ l)), (priqq (length l0) (l0 ++ gv0)), (priqq (length l0) (l ++ q)), (priqq (length l0) (l ++ l0)), (priqq (length l0) (l ++ l)), (priqq (length l0) (l ++ gv0)), (priqq (length l0) (gv0 ++ q)), (priqq (length l0) (gv0 ++ l0))
(priqq (length l0) (gv0 ++ l)), (priqq (length l0) (gv0 ++ gv0)), (priqq (length l) q), (priqq (length l) l0), (priqq (length l) l), (priqq (length l) gv0), (priqq (length l) (merge q q)), (priqq (length l) (merge q l0)), (priqq (length l) (merge q l)), (priqq (length l) (merge q gv0))
(priqq (length l) (merge l0 q)), (priqq (length l) (merge l0 l0)), (priqq (length l) (merge l0 l)), (priqq (length l) (merge l0 gv0)), (priqq (length l) (merge l q)), (priqq (length l) (merge l l0)), (priqq (length l) (merge l l)), (priqq (length l) (merge l gv0)), (priqq (length l) (merge gv0 q)), (priqq (length l) (merge gv0 l0))
(priqq (length l) (merge gv0 l)), (priqq (length l) (merge gv0 gv0)), (priqq (length l) (insert k q)), (priqq (length l) (insert k l0)), (priqq (length l) (insert k l)), (priqq (length l) (insert k gv0)), (priqq (length l) (q ++ q)), (priqq (length l) (q ++ l0)), (priqq (length l) (q ++ l)), (priqq (length l) (q ++ gv0))
(priqq (length l) (l0 ++ q)), (priqq (length l) (l0 ++ l0)), (priqq (length l) (l0 ++ l)), (priqq (length l) (l0 ++ gv0)), (priqq (length l) (l ++ q)), (priqq (length l) (l ++ l0)), (priqq (length l) (l ++ l)), (priqq (length l) (l ++ gv0)), (priqq (length l) (gv0 ++ q)), (priqq (length l) (gv0 ++ l0))
(priqq (length l) (gv0 ++ l)), (priqq (length l) (gv0 ++ gv0)), (priqq (length gv0) q), (priqq (length gv0) l0), (priqq (length gv0) l), (priqq (length gv0) gv0), (priqq (length gv0) (merge q q)), (priqq (length gv0) (merge q l0)), (priqq (length gv0) (merge q l)), (priqq (length gv0) (merge q gv0))
(priqq (length gv0) (merge l0 q)), (priqq (length gv0) (merge l0 l0)), (priqq (length gv0) (merge l0 l)), (priqq (length gv0) (merge l0 gv0)), (priqq (length gv0) (merge l q)), (priqq (length gv0) (merge l l0)), (priqq (length gv0) (merge l l)), (priqq (length gv0) (merge l gv0)), (priqq (length gv0) (merge gv0 q)), (priqq (length gv0) (merge gv0 l0))
(priqq (length gv0) (merge gv0 l)), (priqq (length gv0) (merge gv0 gv0)), (priqq (length gv0) (insert k q)), (priqq (length gv0) (insert k l0)), (priqq (length gv0) (insert k l)), (priqq (length gv0) (insert k gv0)), (priqq (length gv0) (q ++ q)), (priqq (length gv0) (q ++ l0)), (priqq (length gv0) (q ++ l)), (priqq (length gv0) (q ++ gv0))
(priqq (length gv0) (l0 ++ q)), (priqq (length gv0) (l0 ++ l0)), (priqq (length gv0) (l0 ++ l)), (priqq (length gv0) (l0 ++ gv0)), (priqq (length gv0) (l ++ q)), (priqq (length gv0) (l ++ l0)), (priqq (length gv0) (l ++ l)), (priqq (length gv0) (l ++ gv0)), (priqq (length gv0) (gv0 ++ q)), (priqq (length gv0) (gv0 ++ l0))
(priqq (length gv0) (gv0 ++ l)), (priqq (length gv0) (gv0 ++ gv0)), (pow2heapp k k Leaf), (pow2heapp k (find_max' k q) Leaf), (pow2heapp k (find_max' k l0) Leaf), (pow2heapp k (find_max' k l) Leaf), (pow2heapp k (find_max' k gv0) Leaf), (pow2heapp k (length q) Leaf), (pow2heapp k (length l0) Leaf), (pow2heapp k (length l) Leaf)
(pow2heapp k (length gv0) Leaf), (pow2heapp (find_max' k q) k Leaf), (pow2heapp (find_max' k q) (find_max' k q) Leaf), (pow2heapp (find_max' k q) (find_max' k l0) Leaf), (pow2heapp (find_max' k q) (find_max' k l) Leaf), (pow2heapp (find_max' k q) (find_max' k gv0) Leaf), (pow2heapp (find_max' k q) (length q) Leaf), (pow2heapp (find_max' k q) (length l0) Leaf), (pow2heapp (find_max' k q) (length l) Leaf), (pow2heapp (find_max' k q) (length gv0) Leaf)
(pow2heapp (find_max' k l0) k Leaf), (pow2heapp (find_max' k l0) (find_max' k q) Leaf), (pow2heapp (find_max' k l0) (find_max' k l0) Leaf), (pow2heapp (find_max' k l0) (find_max' k l) Leaf), (pow2heapp (find_max' k l0) (find_max' k gv0) Leaf), (pow2heapp (find_max' k l0) (length q) Leaf), (pow2heapp (find_max' k l0) (length l0) Leaf), (pow2heapp (find_max' k l0) (length l) Leaf), (pow2heapp (find_max' k l0) (length gv0) Leaf), (pow2heapp (find_max' k l) k Leaf)
(pow2heapp (find_max' k l) (find_max' k q) Leaf), (pow2heapp (find_max' k l) (find_max' k l0) Leaf), (pow2heapp (find_max' k l) (find_max' k l) Leaf), (pow2heapp (find_max' k l) (find_max' k gv0) Leaf), (pow2heapp (find_max' k l) (length q) Leaf), (pow2heapp (find_max' k l) (length l0) Leaf), (pow2heapp (find_max' k l) (length l) Leaf), (pow2heapp (find_max' k l) (length gv0) Leaf), (pow2heapp (find_max' k gv0) k Leaf), (pow2heapp (find_max' k gv0) (find_max' k q) Leaf)
(pow2heapp (find_max' k gv0) (find_max' k l0) Leaf), (pow2heapp (find_max' k gv0) (find_max' k l) Leaf), (pow2heapp (find_max' k gv0) (find_max' k gv0) Leaf), (pow2heapp (find_max' k gv0) (length q) Leaf), (pow2heapp (find_max' k gv0) (length l0) Leaf), (pow2heapp (find_max' k gv0) (length l) Leaf), (pow2heapp (find_max' k gv0) (length gv0) Leaf), (pow2heapp (length q) k Leaf), (pow2heapp (length q) (find_max' k q) Leaf), (pow2heapp (length q) (find_max' k l0) Leaf)
(pow2heapp (length q) (find_max' k l) Leaf), (pow2heapp (length q) (find_max' k gv0) Leaf), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length l0) Leaf), (pow2heapp (length q) (length l) Leaf), (pow2heapp (length q) (length gv0) Leaf), (pow2heapp (length l0) k Leaf), (pow2heapp (length l0) (find_max' k q) Leaf), (pow2heapp (length l0) (find_max' k l0) Leaf), (pow2heapp (length l0) (find_max' k l) Leaf)
(pow2heapp (length l0) (find_max' k gv0) Leaf), (pow2heapp (length l0) (length q) Leaf), (pow2heapp (length l0) (length l0) Leaf), (pow2heapp (length l0) (length l) Leaf), (pow2heapp (length l0) (length gv0) Leaf), (pow2heapp (length l) k Leaf), (pow2heapp (length l) (find_max' k q) Leaf), (pow2heapp (length l) (find_max' k l0) Leaf), (pow2heapp (length l) (find_max' k l) Leaf), (pow2heapp (length l) (find_max' k gv0) Leaf)
(pow2heapp (length l) (length q) Leaf), (pow2heapp (length l) (length l0) Leaf), (pow2heapp (length l) (length l) Leaf), (pow2heapp (length l) (length gv0) Leaf), (pow2heapp (length gv0) k Leaf), (pow2heapp (length gv0) (find_max' k q) Leaf), (pow2heapp (length gv0) (find_max' k l0) Leaf), (pow2heapp (length gv0) (find_max' k l) Leaf), (pow2heapp (length gv0) (find_max' k gv0) Leaf), (pow2heapp (length gv0) (length q) Leaf)
(pow2heapp (length gv0) (length l0) Leaf), (pow2heapp (length gv0) (length l) Leaf), (pow2heapp (length gv0) (length gv0) Leaf), (Permutation q (merge q q)), (Permutation q (merge q l0)), (Permutation q (merge q l)), (Permutation q (merge q gv0)), (Permutation q (merge l0 q)), (Permutation q (merge l0 l0)), (Permutation q (merge l0 l))
(Permutation q (merge l0 gv0)), (Permutation q (merge l q)), (Permutation q (merge l l0)), (Permutation q (merge l l)), (Permutation q (merge l gv0)), (Permutation q (merge gv0 q)), (Permutation q (merge gv0 l0)), (Permutation q (merge gv0 l)), (Permutation q (merge gv0 gv0)), (Permutation q (insert k q))
(Permutation q (insert k l0)), (Permutation q (insert k l)), (Permutation q (insert k gv0)), (Permutation q (q ++ q)), (Permutation q (q ++ l0)), (Permutation q (q ++ l)), (Permutation q (q ++ gv0)), (Permutation q (l0 ++ q)), (Permutation q (l0 ++ l0)), (Permutation q (l0 ++ l))
(Permutation q (l0 ++ gv0)), (Permutation q (l ++ q)), (Permutation q (l ++ l0)), (Permutation q (l ++ l)), (Permutation q (l ++ gv0)), (Permutation q (gv0 ++ q)), (Permutation q (gv0 ++ l0)), (Permutation q (gv0 ++ l)), (Permutation q (gv0 ++ gv0)), (Permutation q [])
(Permutation l0 (merge q q)), (Permutation l0 (merge q l0)), (Permutation l0 (merge q l)), (Permutation l0 (merge q gv0)), (Permutation l0 (merge l0 q)), (Permutation l0 (merge l0 l0)), (Permutation l0 (merge l0 l)), (Permutation l0 (merge l0 gv0)), (Permutation l0 (merge l q)), (Permutation l0 (merge l l0))
(Permutation l0 (merge l l)), (Permutation l0 (merge l gv0)), (Permutation l0 (merge gv0 q)), (Permutation l0 (merge gv0 l0)), (Permutation l0 (merge gv0 l)), (Permutation l0 (merge gv0 gv0)), (Permutation l0 (insert k q)), (Permutation l0 (insert k l0)), (Permutation l0 (insert k l)), (Permutation l0 (insert k gv0))
(Permutation l0 (q ++ q)), (Permutation l0 (q ++ l0)), (Permutation l0 (q ++ l)), (Permutation l0 (q ++ gv0)), (Permutation l0 (l0 ++ q)), (Permutation l0 (l0 ++ l0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l0 ++ gv0)), (Permutation l0 (l ++ q)), (Permutation l0 (l ++ l0))
(Permutation l0 (l ++ l)), (Permutation l0 (l ++ gv0)), (Permutation l0 (gv0 ++ q)), (Permutation l0 (gv0 ++ l0)), (Permutation l0 (gv0 ++ l)), (Permutation l0 (gv0 ++ gv0)), (Permutation l0 []), (Permutation l (merge q q)), (Permutation l (merge q l0)), (Permutation l (merge q l))
(Permutation l (merge q gv0)), (Permutation l (merge l0 q)), (Permutation l (merge l0 l0)), (Permutation l (merge l0 l)), (Permutation l (merge l0 gv0)), (Permutation l (merge l q)), (Permutation l (merge l l0)), (Permutation l (merge l l)), (Permutation l (merge l gv0)), (Permutation l (merge gv0 q))
(Permutation l (merge gv0 l0)), (Permutation l (merge gv0 l)), (Permutation l (merge gv0 gv0)), (Permutation l (insert k q)), (Permutation l (insert k l0)), (Permutation l (insert k l)), (Permutation l (insert k gv0)), (Permutation l (q ++ q)), (Permutation l (q ++ l0)), (Permutation l (q ++ l))
(Permutation l (q ++ gv0)), (Permutation l (l0 ++ q)), (Permutation l (l0 ++ l0)), (Permutation l (l0 ++ l)), (Permutation l (l0 ++ gv0)), (Permutation l (l ++ q)), (Permutation l (l ++ l0)), (Permutation l (l ++ l)), (Permutation l (l ++ gv0)), (Permutation l (gv0 ++ q))
(Permutation l (gv0 ++ l0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv0)), (Permutation l []), (Permutation gv0 (merge q q)), (Permutation gv0 (merge q l0)), (Permutation gv0 (merge q l)), (Permutation gv0 (merge q gv0)), (Permutation gv0 (merge l0 q)), (Permutation gv0 (merge l0 l0))
(Permutation gv0 (merge l0 l)), (Permutation gv0 (merge l0 gv0)), (Permutation gv0 (merge l q)), (Permutation gv0 (merge l l0)), (Permutation gv0 (merge l l)), (Permutation gv0 (merge l gv0)), (Permutation gv0 (merge gv0 q)), (Permutation gv0 (merge gv0 l0)), (Permutation gv0 (merge gv0 l)), (Permutation gv0 (merge gv0 gv0))
(Permutation gv0 (insert k q)), (Permutation gv0 (insert k l0)), (Permutation gv0 (insert k l)), (Permutation gv0 (insert k gv0)), (Permutation gv0 (q ++ q)), (Permutation gv0 (q ++ l0)), (Permutation gv0 (q ++ l)), (Permutation gv0 (q ++ gv0)), (Permutation gv0 (l0 ++ q)), (Permutation gv0 (l0 ++ l0))
(Permutation gv0 (l0 ++ l)), (Permutation gv0 (l0 ++ gv0)), (Permutation gv0 (l ++ q)), (Permutation gv0 (l ++ l0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (gv0 ++ q)), (Permutation gv0 (gv0 ++ l0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ gv0))
(Permutation gv0 []), (Permutation (merge q q) q), (Permutation (merge q q) l0), (Permutation (merge q q) l), (Permutation (merge q q) gv0), (Permutation (merge q q) (merge q l0)), (Permutation (merge q q) (merge q l)), (Permutation (merge q q) (merge q gv0)), (Permutation (merge q q) (merge l0 q)), (Permutation (merge q q) (merge l0 l0))
(Permutation (merge q q) (merge l0 l)), (Permutation (merge q q) (merge l0 gv0)), (Permutation (merge q q) (merge l q)), (Permutation (merge q q) (merge l l0)), (Permutation (merge q q) (merge l l)), (Permutation (merge q q) (merge l gv0)), (Permutation (merge q q) (merge gv0 q)), (Permutation (merge q q) (merge gv0 l0)), (Permutation (merge q q) (merge gv0 l)), (Permutation (merge q q) (merge gv0 gv0))
(Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k l0)), (Permutation (merge q q) (insert k l)), (Permutation (merge q q) (insert k gv0)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ l0)), (Permutation (merge q q) (q ++ l)), (Permutation (merge q q) (q ++ gv0)), (Permutation (merge q q) (l0 ++ q)), (Permutation (merge q q) (l0 ++ l0))
(Permutation (merge q q) (l0 ++ l)), (Permutation (merge q q) (l0 ++ gv0)), (Permutation (merge q q) (l ++ q)), (Permutation (merge q q) (l ++ l0)), (Permutation (merge q q) (l ++ l)), (Permutation (merge q q) (l ++ gv0)), (Permutation (merge q q) (gv0 ++ q)), (Permutation (merge q q) (gv0 ++ l0)), (Permutation (merge q q) (gv0 ++ l)), (Permutation (merge q q) (gv0 ++ gv0))
(Permutation (merge q q) []), (Permutation (merge q l0) q), (Permutation (merge q l0) l0), (Permutation (merge q l0) l), (Permutation (merge q l0) gv0), (Permutation (merge q l0) (merge q q)), (Permutation (merge q l0) (merge q l)), (Permutation (merge q l0) (merge q gv0)), (Permutation (merge q l0) (merge l0 q)), (Permutation (merge q l0) (merge l0 l0))
(Permutation (merge q l0) (merge l0 l)), (Permutation (merge q l0) (merge l0 gv0)), (Permutation (merge q l0) (merge l q)), (Permutation (merge q l0) (merge l l0)), (Permutation (merge q l0) (merge l l)), (Permutation (merge q l0) (merge l gv0)), (Permutation (merge q l0) (merge gv0 q)), (Permutation (merge q l0) (merge gv0 l0)), (Permutation (merge q l0) (merge gv0 l)), (Permutation (merge q l0) (merge gv0 gv0))
(Permutation (merge q l0) (insert k q)), (Permutation (merge q l0) (insert k l0)), (Permutation (merge q l0) (insert k l)), (Permutation (merge q l0) (insert k gv0)), (Permutation (merge q l0) (q ++ q)), (Permutation (merge q l0) (q ++ l0)), (Permutation (merge q l0) (q ++ l)), (Permutation (merge q l0) (q ++ gv0)), (Permutation (merge q l0) (l0 ++ q)), (Permutation (merge q l0) (l0 ++ l0))
(Permutation (merge q l0) (l0 ++ l)), (Permutation (merge q l0) (l0 ++ gv0)), (Permutation (merge q l0) (l ++ q)), (Permutation (merge q l0) (l ++ l0)), (Permutation (merge q l0) (l ++ l)), (Permutation (merge q l0) (l ++ gv0)), (Permutation (merge q l0) (gv0 ++ q)), (Permutation (merge q l0) (gv0 ++ l0)), (Permutation (merge q l0) (gv0 ++ l)), (Permutation (merge q l0) (gv0 ++ gv0))
(Permutation (merge q l0) []), (Permutation (merge q l) q), (Permutation (merge q l) l0), (Permutation (merge q l) l), (Permutation (merge q l) gv0), (Permutation (merge q l) (merge q q)), (Permutation (merge q l) (merge q l0)), (Permutation (merge q l) (merge q gv0)), (Permutation (merge q l) (merge l0 q)), (Permutation (merge q l) (merge l0 l0))
(Permutation (merge q l) (merge l0 l)), (Permutation (merge q l) (merge l0 gv0)), (Permutation (merge q l) (merge l q)), (Permutation (merge q l) (merge l l0)), (Permutation (merge q l) (merge l l)), (Permutation (merge q l) (merge l gv0)), (Permutation (merge q l) (merge gv0 q)), (Permutation (merge q l) (merge gv0 l0)), (Permutation (merge q l) (merge gv0 l)), (Permutation (merge q l) (merge gv0 gv0))
(Permutation (merge q l) (insert k q)), (Permutation (merge q l) (insert k l0)), (Permutation (merge q l) (insert k l)), (Permutation (merge q l) (insert k gv0)), (Permutation (merge q l) (q ++ q)), (Permutation (merge q l) (q ++ l0)), (Permutation (merge q l) (q ++ l)), (Permutation (merge q l) (q ++ gv0)), (Permutation (merge q l) (l0 ++ q)), (Permutation (merge q l) (l0 ++ l0))
(Permutation (merge q l) (l0 ++ l)), (Permutation (merge q l) (l0 ++ gv0)), (Permutation (merge q l) (l ++ q)), (Permutation (merge q l) (l ++ l0)), (Permutation (merge q l) (l ++ l)), (Permutation (merge q l) (l ++ gv0)), (Permutation (merge q l) (gv0 ++ q)), (Permutation (merge q l) (gv0 ++ l0)), (Permutation (merge q l) (gv0 ++ l)), (Permutation (merge q l) (gv0 ++ gv0))
(Permutation (merge q l) []), (Permutation (merge q gv0) q), (Permutation (merge q gv0) l0), (Permutation (merge q gv0) l), (Permutation (merge q gv0) gv0), (Permutation (merge q gv0) (merge q q)), (Permutation (merge q gv0) (merge q l0)), (Permutation (merge q gv0) (merge q l)), (Permutation (merge q gv0) (merge l0 q)), (Permutation (merge q gv0) (merge l0 l0))
(Permutation (merge q gv0) (merge l0 l)), (Permutation (merge q gv0) (merge l0 gv0)), (Permutation (merge q gv0) (merge l q)), (Permutation (merge q gv0) (merge l l0)), (Permutation (merge q gv0) (merge l l)), (Permutation (merge q gv0) (merge l gv0)), (Permutation (merge q gv0) (merge gv0 q)), (Permutation (merge q gv0) (merge gv0 l0)), (Permutation (merge q gv0) (merge gv0 l)), (Permutation (merge q gv0) (merge gv0 gv0))
(Permutation (merge q gv0) (insert k q)), (Permutation (merge q gv0) (insert k l0)), (Permutation (merge q gv0) (insert k l)), (Permutation (merge q gv0) (insert k gv0)), (Permutation (merge q gv0) (q ++ q)), (Permutation (merge q gv0) (q ++ l0)), (Permutation (merge q gv0) (q ++ l)), (Permutation (merge q gv0) (q ++ gv0)), (Permutation (merge q gv0) (l0 ++ q)), (Permutation (merge q gv0) (l0 ++ l0))
(Permutation (merge q gv0) (l0 ++ l)), (Permutation (merge q gv0) (l0 ++ gv0)), (Permutation (merge q gv0) (l ++ q)), (Permutation (merge q gv0) (l ++ l0)), (Permutation (merge q gv0) (l ++ l)), (Permutation (merge q gv0) (l ++ gv0)), (Permutation (merge q gv0) (gv0 ++ q)), (Permutation (merge q gv0) (gv0 ++ l0)), (Permutation (merge q gv0) (gv0 ++ l)), (Permutation (merge q gv0) (gv0 ++ gv0))
(Permutation (merge q gv0) []), (Permutation (merge l0 q) q), (Permutation (merge l0 q) l0), (Permutation (merge l0 q) l), (Permutation (merge l0 q) gv0), (Permutation (merge l0 q) (merge q q)), (Permutation (merge l0 q) (merge q l0)), (Permutation (merge l0 q) (merge q l)), (Permutation (merge l0 q) (merge q gv0)), (Permutation (merge l0 q) (merge l0 l0))
(Permutation (merge l0 q) (merge l0 l)), (Permutation (merge l0 q) (merge l0 gv0)), (Permutation (merge l0 q) (merge l q)), (Permutation (merge l0 q) (merge l l0)), (Permutation (merge l0 q) (merge l l)), (Permutation (merge l0 q) (merge l gv0)), (Permutation (merge l0 q) (merge gv0 q)), (Permutation (merge l0 q) (merge gv0 l0)), (Permutation (merge l0 q) (merge gv0 l)), (Permutation (merge l0 q) (merge gv0 gv0))
(Permutation (merge l0 q) (insert k q)), (Permutation (merge l0 q) (insert k l0)), (Permutation (merge l0 q) (insert k l)), (Permutation (merge l0 q) (insert k gv0)), (Permutation (merge l0 q) (q ++ q)), (Permutation (merge l0 q) (q ++ l0)), (Permutation (merge l0 q) (q ++ l)), (Permutation (merge l0 q) (q ++ gv0)), (Permutation (merge l0 q) (l0 ++ q)), (Permutation (merge l0 q) (l0 ++ l0))
(Permutation (merge l0 q) (l0 ++ l)), (Permutation (merge l0 q) (l0 ++ gv0)), (Permutation (merge l0 q) (l ++ q)), (Permutation (merge l0 q) (l ++ l0)), (Permutation (merge l0 q) (l ++ l)), (Permutation (merge l0 q) (l ++ gv0)), (Permutation (merge l0 q) (gv0 ++ q)), (Permutation (merge l0 q) (gv0 ++ l0)), (Permutation (merge l0 q) (gv0 ++ l)), (Permutation (merge l0 q) (gv0 ++ gv0))
(Permutation (merge l0 q) []), (Permutation (merge l0 l0) q), (Permutation (merge l0 l0) l0), (Permutation (merge l0 l0) l), (Permutation (merge l0 l0) gv0), (Permutation (merge l0 l0) (merge q q)), (Permutation (merge l0 l0) (merge q l0)), (Permutation (merge l0 l0) (merge q l)), (Permutation (merge l0 l0) (merge q gv0)), (Permutation (merge l0 l0) (merge l0 q))
(Permutation (merge l0 l0) (merge l0 l)), (Permutation (merge l0 l0) (merge l0 gv0)), (Permutation (merge l0 l0) (merge l q)), (Permutation (merge l0 l0) (merge l l0)), (Permutation (merge l0 l0) (merge l l)), (Permutation (merge l0 l0) (merge l gv0)), (Permutation (merge l0 l0) (merge gv0 q)), (Permutation (merge l0 l0) (merge gv0 l0)), (Permutation (merge l0 l0) (merge gv0 l)), (Permutation (merge l0 l0) (merge gv0 gv0))
(Permutation (merge l0 l0) (insert k q)), (Permutation (merge l0 l0) (insert k l0)), (Permutation (merge l0 l0) (insert k l)), (Permutation (merge l0 l0) (insert k gv0)), (Permutation (merge l0 l0) (q ++ q)), (Permutation (merge l0 l0) (q ++ l0)), (Permutation (merge l0 l0) (q ++ l)), (Permutation (merge l0 l0) (q ++ gv0)), (Permutation (merge l0 l0) (l0 ++ q)), (Permutation (merge l0 l0) (l0 ++ l0))
(Permutation (merge l0 l0) (l0 ++ l)), (Permutation (merge l0 l0) (l0 ++ gv0)), (Permutation (merge l0 l0) (l ++ q)), (Permutation (merge l0 l0) (l ++ l0)), (Permutation (merge l0 l0) (l ++ l)), (Permutation (merge l0 l0) (l ++ gv0)), (Permutation (merge l0 l0) (gv0 ++ q)), (Permutation (merge l0 l0) (gv0 ++ l0)), (Permutation (merge l0 l0) (gv0 ++ l)), (Permutation (merge l0 l0) (gv0 ++ gv0))
(Permutation (merge l0 l0) []), (Permutation (merge l0 l) q), (Permutation (merge l0 l) l0), (Permutation (merge l0 l) l), (Permutation (merge l0 l) gv0), (Permutation (merge l0 l) (merge q q)), (Permutation (merge l0 l) (merge q l0)), (Permutation (merge l0 l) (merge q l)), (Permutation (merge l0 l) (merge q gv0)), (Permutation (merge l0 l) (merge l0 q))
(Permutation (merge l0 l) (merge l0 l0)), (Permutation (merge l0 l) (merge l0 gv0)), (Permutation (merge l0 l) (merge l q)), (Permutation (merge l0 l) (merge l l0)), (Permutation (merge l0 l) (merge l l)), (Permutation (merge l0 l) (merge l gv0)), (Permutation (merge l0 l) (merge gv0 q)), (Permutation (merge l0 l) (merge gv0 l0)), (Permutation (merge l0 l) (merge gv0 l)), (Permutation (merge l0 l) (merge gv0 gv0))
(Permutation (merge l0 l) (insert k q)), (Permutation (merge l0 l) (insert k l0)), (Permutation (merge l0 l) (insert k l)), (Permutation (merge l0 l) (insert k gv0)), (Permutation (merge l0 l) (q ++ q)), (Permutation (merge l0 l) (q ++ l0)), (Permutation (merge l0 l) (q ++ l)), (Permutation (merge l0 l) (q ++ gv0)), (Permutation (merge l0 l) (l0 ++ q)), (Permutation (merge l0 l) (l0 ++ l0))
(Permutation (merge l0 l) (l0 ++ l)), (Permutation (merge l0 l) (l0 ++ gv0)), (Permutation (merge l0 l) (l ++ q)), (Permutation (merge l0 l) (l ++ l0)), (Permutation (merge l0 l) (l ++ l)), (Permutation (merge l0 l) (l ++ gv0)), (Permutation (merge l0 l) (gv0 ++ q)), (Permutation (merge l0 l) (gv0 ++ l0)), (Permutation (merge l0 l) (gv0 ++ l)), (Permutation (merge l0 l) (gv0 ++ gv0))
(Permutation (merge l0 l) []), (Permutation (merge l0 gv0) q), (Permutation (merge l0 gv0) l0), (Permutation (merge l0 gv0) l), (Permutation (merge l0 gv0) gv0), (Permutation (merge l0 gv0) (merge q q)), (Permutation (merge l0 gv0) (merge q l0)), (Permutation (merge l0 gv0) (merge q l)), (Permutation (merge l0 gv0) (merge q gv0)), (Permutation (merge l0 gv0) (merge l0 q))
(Permutation (merge l0 gv0) (merge l0 l0)), (Permutation (merge l0 gv0) (merge l0 l)), (Permutation (merge l0 gv0) (merge l q)), (Permutation (merge l0 gv0) (merge l l0)), (Permutation (merge l0 gv0) (merge l l)), (Permutation (merge l0 gv0) (merge l gv0)), (Permutation (merge l0 gv0) (merge gv0 q)), (Permutation (merge l0 gv0) (merge gv0 l0)), (Permutation (merge l0 gv0) (merge gv0 l)), (Permutation (merge l0 gv0) (merge gv0 gv0))
(Permutation (merge l0 gv0) (insert k q)), (Permutation (merge l0 gv0) (insert k l0)), (Permutation (merge l0 gv0) (insert k l)), (Permutation (merge l0 gv0) (insert k gv0)), (Permutation (merge l0 gv0) (q ++ q)), (Permutation (merge l0 gv0) (q ++ l0)), (Permutation (merge l0 gv0) (q ++ l)), (Permutation (merge l0 gv0) (q ++ gv0)), (Permutation (merge l0 gv0) (l0 ++ q)), (Permutation (merge l0 gv0) (l0 ++ l0))
(Permutation (merge l0 gv0) (l0 ++ l)), (Permutation (merge l0 gv0) (l0 ++ gv0)), (Permutation (merge l0 gv0) (l ++ q)), (Permutation (merge l0 gv0) (l ++ l0)), (Permutation (merge l0 gv0) (l ++ l)), (Permutation (merge l0 gv0) (l ++ gv0)), (Permutation (merge l0 gv0) (gv0 ++ q)), (Permutation (merge l0 gv0) (gv0 ++ l0)), (Permutation (merge l0 gv0) (gv0 ++ l)), (Permutation (merge l0 gv0) (gv0 ++ gv0))
(Permutation (merge l0 gv0) []), (Permutation (merge l q) q), (Permutation (merge l q) l0), (Permutation (merge l q) l), (Permutation (merge l q) gv0), (Permutation (merge l q) (merge q q)), (Permutation (merge l q) (merge q l0)), (Permutation (merge l q) (merge q l)), (Permutation (merge l q) (merge q gv0)), (Permutation (merge l q) (merge l0 q))
(Permutation (merge l q) (merge l0 l0)), (Permutation (merge l q) (merge l0 l)), (Permutation (merge l q) (merge l0 gv0)), (Permutation (merge l q) (merge l l0)), (Permutation (merge l q) (merge l l)), (Permutation (merge l q) (merge l gv0)), (Permutation (merge l q) (merge gv0 q)), (Permutation (merge l q) (merge gv0 l0)), (Permutation (merge l q) (merge gv0 l)), (Permutation (merge l q) (merge gv0 gv0))
(Permutation (merge l q) (insert k q)), (Permutation (merge l q) (insert k l0)), (Permutation (merge l q) (insert k l)), (Permutation (merge l q) (insert k gv0)), (Permutation (merge l q) (q ++ q)), (Permutation (merge l q) (q ++ l0)), (Permutation (merge l q) (q ++ l)), (Permutation (merge l q) (q ++ gv0)), (Permutation (merge l q) (l0 ++ q)), (Permutation (merge l q) (l0 ++ l0))
(Permutation (merge l q) (l0 ++ l)), (Permutation (merge l q) (l0 ++ gv0)), (Permutation (merge l q) (l ++ q)), (Permutation (merge l q) (l ++ l0)), (Permutation (merge l q) (l ++ l)), (Permutation (merge l q) (l ++ gv0)), (Permutation (merge l q) (gv0 ++ q)), (Permutation (merge l q) (gv0 ++ l0)), (Permutation (merge l q) (gv0 ++ l)), (Permutation (merge l q) (gv0 ++ gv0))
(Permutation (merge l q) []), (Permutation (merge l l0) q), (Permutation (merge l l0) l0), (Permutation (merge l l0) l), (Permutation (merge l l0) gv0), (Permutation (merge l l0) (merge q q)), (Permutation (merge l l0) (merge q l0)), (Permutation (merge l l0) (merge q l)), (Permutation (merge l l0) (merge q gv0)), (Permutation (merge l l0) (merge l0 q))
(Permutation (merge l l0) (merge l0 l0)), (Permutation (merge l l0) (merge l0 l)), (Permutation (merge l l0) (merge l0 gv0)), (Permutation (merge l l0) (merge l q)), (Permutation (merge l l0) (merge l l)), (Permutation (merge l l0) (merge l gv0)), (Permutation (merge l l0) (merge gv0 q)), (Permutation (merge l l0) (merge gv0 l0)), (Permutation (merge l l0) (merge gv0 l)), (Permutation (merge l l0) (merge gv0 gv0))
(Permutation (merge l l0) (insert k q)), (Permutation (merge l l0) (insert k l0)), (Permutation (merge l l0) (insert k l)), (Permutation (merge l l0) (insert k gv0)), (Permutation (merge l l0) (q ++ q)), (Permutation (merge l l0) (q ++ l0)), (Permutation (merge l l0) (q ++ l)), (Permutation (merge l l0) (q ++ gv0)), (Permutation (merge l l0) (l0 ++ q)), (Permutation (merge l l0) (l0 ++ l0))
(Permutation (merge l l0) (l0 ++ l)), (Permutation (merge l l0) (l0 ++ gv0)), (Permutation (merge l l0) (l ++ q)), (Permutation (merge l l0) (l ++ l0)), (Permutation (merge l l0) (l ++ l)), (Permutation (merge l l0) (l ++ gv0)), (Permutation (merge l l0) (gv0 ++ q)), (Permutation (merge l l0) (gv0 ++ l0)), (Permutation (merge l l0) (gv0 ++ l)), (Permutation (merge l l0) (gv0 ++ gv0))
(Permutation (merge l l0) []), (Permutation (merge l l) q), (Permutation (merge l l) l0), (Permutation (merge l l) l), (Permutation (merge l l) gv0), (Permutation (merge l l) (merge q q)), (Permutation (merge l l) (merge q l0)), (Permutation (merge l l) (merge q l)), (Permutation (merge l l) (merge q gv0)), (Permutation (merge l l) (merge l0 q))
(Permutation (merge l l) (merge l0 l0)), (Permutation (merge l l) (merge l0 l)), (Permutation (merge l l) (merge l0 gv0)), (Permutation (merge l l) (merge l q)), (Permutation (merge l l) (merge l l0)), (Permutation (merge l l) (merge l gv0)), (Permutation (merge l l) (merge gv0 q)), (Permutation (merge l l) (merge gv0 l0)), (Permutation (merge l l) (merge gv0 l)), (Permutation (merge l l) (merge gv0 gv0))
(Permutation (merge l l) (insert k q)), (Permutation (merge l l) (insert k l0)), (Permutation (merge l l) (insert k l)), (Permutation (merge l l) (insert k gv0)), (Permutation (merge l l) (q ++ q)), (Permutation (merge l l) (q ++ l0)), (Permutation (merge l l) (q ++ l)), (Permutation (merge l l) (q ++ gv0)), (Permutation (merge l l) (l0 ++ q)), (Permutation (merge l l) (l0 ++ l0))
(Permutation (merge l l) (l0 ++ l)), (Permutation (merge l l) (l0 ++ gv0)), (Permutation (merge l l) (l ++ q)), (Permutation (merge l l) (l ++ l0)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ gv0)), (Permutation (merge l l) (gv0 ++ q)), (Permutation (merge l l) (gv0 ++ l0)), (Permutation (merge l l) (gv0 ++ l)), (Permutation (merge l l) (gv0 ++ gv0))
(Permutation (merge l l) []), (Permutation (merge l gv0) q), (Permutation (merge l gv0) l0), (Permutation (merge l gv0) l), (Permutation (merge l gv0) gv0), (Permutation (merge l gv0) (merge q q)), (Permutation (merge l gv0) (merge q l0)), (Permutation (merge l gv0) (merge q l)), (Permutation (merge l gv0) (merge q gv0)), (Permutation (merge l gv0) (merge l0 q))
(Permutation (merge l gv0) (merge l0 l0)), (Permutation (merge l gv0) (merge l0 l)), (Permutation (merge l gv0) (merge l0 gv0)), (Permutation (merge l gv0) (merge l q)), (Permutation (merge l gv0) (merge l l0)), (Permutation (merge l gv0) (merge l l)), (Permutation (merge l gv0) (merge gv0 q)), (Permutation (merge l gv0) (merge gv0 l0)), (Permutation (merge l gv0) (merge gv0 l)), (Permutation (merge l gv0) (merge gv0 gv0))
(Permutation (merge l gv0) (insert k q)), (Permutation (merge l gv0) (insert k l0)), (Permutation (merge l gv0) (insert k l)), (Permutation (merge l gv0) (insert k gv0)), (Permutation (merge l gv0) (q ++ q)), (Permutation (merge l gv0) (q ++ l0)), (Permutation (merge l gv0) (q ++ l)), (Permutation (merge l gv0) (q ++ gv0)), (Permutation (merge l gv0) (l0 ++ q)), (Permutation (merge l gv0) (l0 ++ l0))
(Permutation (merge l gv0) (l0 ++ l)), (Permutation (merge l gv0) (l0 ++ gv0)), (Permutation (merge l gv0) (l ++ q)), (Permutation (merge l gv0) (l ++ l0)), (Permutation (merge l gv0) (l ++ l)), (Permutation (merge l gv0) (l ++ gv0)), (Permutation (merge l gv0) (gv0 ++ q)), (Permutation (merge l gv0) (gv0 ++ l0)), (Permutation (merge l gv0) (gv0 ++ l)), (Permutation (merge l gv0) (gv0 ++ gv0))
(Permutation (merge l gv0) []), (Permutation (merge gv0 q) q), (Permutation (merge gv0 q) l0), (Permutation (merge gv0 q) l), (Permutation (merge gv0 q) gv0), (Permutation (merge gv0 q) (merge q q)), (Permutation (merge gv0 q) (merge q l0)), (Permutation (merge gv0 q) (merge q l)), (Permutation (merge gv0 q) (merge q gv0)), (Permutation (merge gv0 q) (merge l0 q))
(Permutation (merge gv0 q) (merge l0 l0)), (Permutation (merge gv0 q) (merge l0 l)), (Permutation (merge gv0 q) (merge l0 gv0)), (Permutation (merge gv0 q) (merge l q)), (Permutation (merge gv0 q) (merge l l0)), (Permutation (merge gv0 q) (merge l l)), (Permutation (merge gv0 q) (merge l gv0)), (Permutation (merge gv0 q) (merge gv0 l0)), (Permutation (merge gv0 q) (merge gv0 l)), (Permutation (merge gv0 q) (merge gv0 gv0))
(Permutation (merge gv0 q) (insert k q)), (Permutation (merge gv0 q) (insert k l0)), (Permutation (merge gv0 q) (insert k l)), (Permutation (merge gv0 q) (insert k gv0)), (Permutation (merge gv0 q) (q ++ q)), (Permutation (merge gv0 q) (q ++ l0)), (Permutation (merge gv0 q) (q ++ l)), (Permutation (merge gv0 q) (q ++ gv0)), (Permutation (merge gv0 q) (l0 ++ q)), (Permutation (merge gv0 q) (l0 ++ l0))
(Permutation (merge gv0 q) (l0 ++ l)), (Permutation (merge gv0 q) (l0 ++ gv0)), (Permutation (merge gv0 q) (l ++ q)), (Permutation (merge gv0 q) (l ++ l0)), (Permutation (merge gv0 q) (l ++ l)), (Permutation (merge gv0 q) (l ++ gv0)), (Permutation (merge gv0 q) (gv0 ++ q)), (Permutation (merge gv0 q) (gv0 ++ l0)), (Permutation (merge gv0 q) (gv0 ++ l)), (Permutation (merge gv0 q) (gv0 ++ gv0))
(Permutation (merge gv0 q) []), (Permutation (merge gv0 l0) q), (Permutation (merge gv0 l0) l0), (Permutation (merge gv0 l0) l), (Permutation (merge gv0 l0) gv0), (Permutation (merge gv0 l0) (merge q q)), (Permutation (merge gv0 l0) (merge q l0)), (Permutation (merge gv0 l0) (merge q l)), (Permutation (merge gv0 l0) (merge q gv0)), (Permutation (merge gv0 l0) (merge l0 q))
(Permutation (merge gv0 l0) (merge l0 l0)), (Permutation (merge gv0 l0) (merge l0 l)), (Permutation (merge gv0 l0) (merge l0 gv0)), (Permutation (merge gv0 l0) (merge l q)), (Permutation (merge gv0 l0) (merge l l0)), (Permutation (merge gv0 l0) (merge l l)), (Permutation (merge gv0 l0) (merge l gv0)), (Permutation (merge gv0 l0) (merge gv0 q)), (Permutation (merge gv0 l0) (merge gv0 l)), (Permutation (merge gv0 l0) (merge gv0 gv0))
(Permutation (merge gv0 l0) (insert k q)), (Permutation (merge gv0 l0) (insert k l0)), (Permutation (merge gv0 l0) (insert k l)), (Permutation (merge gv0 l0) (insert k gv0)), (Permutation (merge gv0 l0) (q ++ q)), (Permutation (merge gv0 l0) (q ++ l0)), (Permutation (merge gv0 l0) (q ++ l)), (Permutation (merge gv0 l0) (q ++ gv0)), (Permutation (merge gv0 l0) (l0 ++ q)), (Permutation (merge gv0 l0) (l0 ++ l0))
(Permutation (merge gv0 l0) (l0 ++ l)), (Permutation (merge gv0 l0) (l0 ++ gv0)), (Permutation (merge gv0 l0) (l ++ q)), (Permutation (merge gv0 l0) (l ++ l0)), (Permutation (merge gv0 l0) (l ++ l)), (Permutation (merge gv0 l0) (l ++ gv0)), (Permutation (merge gv0 l0) (gv0 ++ q)), (Permutation (merge gv0 l0) (gv0 ++ l0)), (Permutation (merge gv0 l0) (gv0 ++ l)), (Permutation (merge gv0 l0) (gv0 ++ gv0))
(Permutation (merge gv0 l0) []), (Permutation (merge gv0 l) q), (Permutation (merge gv0 l) l0), (Permutation (merge gv0 l) l), (Permutation (merge gv0 l) gv0), (Permutation (merge gv0 l) (merge q q)), (Permutation (merge gv0 l) (merge q l0)), (Permutation (merge gv0 l) (merge q l)), (Permutation (merge gv0 l) (merge q gv0)), (Permutation (merge gv0 l) (merge l0 q))
(Permutation (merge gv0 l) (merge l0 l0)), (Permutation (merge gv0 l) (merge l0 l)), (Permutation (merge gv0 l) (merge l0 gv0)), (Permutation (merge gv0 l) (merge l q)), (Permutation (merge gv0 l) (merge l l0)), (Permutation (merge gv0 l) (merge l l)), (Permutation (merge gv0 l) (merge l gv0)), (Permutation (merge gv0 l) (merge gv0 q)), (Permutation (merge gv0 l) (merge gv0 l0)), (Permutation (merge gv0 l) (merge gv0 gv0))
(Permutation (merge gv0 l) (insert k q)), (Permutation (merge gv0 l) (insert k l0)), (Permutation (merge gv0 l) (insert k l)), (Permutation (merge gv0 l) (insert k gv0)), (Permutation (merge gv0 l) (q ++ q)), (Permutation (merge gv0 l) (q ++ l0)), (Permutation (merge gv0 l) (q ++ l)), (Permutation (merge gv0 l) (q ++ gv0)), (Permutation (merge gv0 l) (l0 ++ q)), (Permutation (merge gv0 l) (l0 ++ l0))
(Permutation (merge gv0 l) (l0 ++ l)), (Permutation (merge gv0 l) (l0 ++ gv0)), (Permutation (merge gv0 l) (l ++ q)), (Permutation (merge gv0 l) (l ++ l0)), (Permutation (merge gv0 l) (l ++ l)), (Permutation (merge gv0 l) (l ++ gv0)), (Permutation (merge gv0 l) (gv0 ++ q)), (Permutation (merge gv0 l) (gv0 ++ l0)), (Permutation (merge gv0 l) (gv0 ++ l)), (Permutation (merge gv0 l) (gv0 ++ gv0))
(Permutation (merge gv0 l) []), (Permutation (merge gv0 gv0) q), (Permutation (merge gv0 gv0) l0), (Permutation (merge gv0 gv0) l), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (merge q q)), (Permutation (merge gv0 gv0) (merge q l0)), (Permutation (merge gv0 gv0) (merge q l)), (Permutation (merge gv0 gv0) (merge q gv0)), (Permutation (merge gv0 gv0) (merge l0 q))
(Permutation (merge gv0 gv0) (merge l0 l0)), (Permutation (merge gv0 gv0) (merge l0 l)), (Permutation (merge gv0 gv0) (merge l0 gv0)), (Permutation (merge gv0 gv0) (merge l q)), (Permutation (merge gv0 gv0) (merge l l0)), (Permutation (merge gv0 gv0) (merge l l)), (Permutation (merge gv0 gv0) (merge l gv0)), (Permutation (merge gv0 gv0) (merge gv0 q)), (Permutation (merge gv0 gv0) (merge gv0 l0)), (Permutation (merge gv0 gv0) (merge gv0 l))
(Permutation (merge gv0 gv0) (insert k q)), (Permutation (merge gv0 gv0) (insert k l0)), (Permutation (merge gv0 gv0) (insert k l)), (Permutation (merge gv0 gv0) (insert k gv0)), (Permutation (merge gv0 gv0) (q ++ q)), (Permutation (merge gv0 gv0) (q ++ l0)), (Permutation (merge gv0 gv0) (q ++ l)), (Permutation (merge gv0 gv0) (q ++ gv0)), (Permutation (merge gv0 gv0) (l0 ++ q)), (Permutation (merge gv0 gv0) (l0 ++ l0))
(Permutation (merge gv0 gv0) (l0 ++ l)), (Permutation (merge gv0 gv0) (l0 ++ gv0)), (Permutation (merge gv0 gv0) (l ++ q)), (Permutation (merge gv0 gv0) (l ++ l0)), (Permutation (merge gv0 gv0) (l ++ l)), (Permutation (merge gv0 gv0) (l ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ q)), (Permutation (merge gv0 gv0) (gv0 ++ l0)), (Permutation (merge gv0 gv0) (gv0 ++ l)), (Permutation (merge gv0 gv0) (gv0 ++ gv0))
(Permutation (merge gv0 gv0) []), (Permutation (insert k q) q), (Permutation (insert k q) l0), (Permutation (insert k q) l), (Permutation (insert k q) gv0), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q l0)), (Permutation (insert k q) (merge q l)), (Permutation (insert k q) (merge q gv0)), (Permutation (insert k q) (merge l0 q))
(Permutation (insert k q) (merge l0 l0)), (Permutation (insert k q) (merge l0 l)), (Permutation (insert k q) (merge l0 gv0)), (Permutation (insert k q) (merge l q)), (Permutation (insert k q) (merge l l0)), (Permutation (insert k q) (merge l l)), (Permutation (insert k q) (merge l gv0)), (Permutation (insert k q) (merge gv0 q)), (Permutation (insert k q) (merge gv0 l0)), (Permutation (insert k q) (merge gv0 l))
(Permutation (insert k q) (merge gv0 gv0)), (Permutation (insert k q) (insert k l0)), (Permutation (insert k q) (insert k l)), (Permutation (insert k q) (insert k gv0)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ l0)), (Permutation (insert k q) (q ++ l)), (Permutation (insert k q) (q ++ gv0)), (Permutation (insert k q) (l0 ++ q)), (Permutation (insert k q) (l0 ++ l0))
(Permutation (insert k q) (l0 ++ l)), (Permutation (insert k q) (l0 ++ gv0)), (Permutation (insert k q) (l ++ q)), (Permutation (insert k q) (l ++ l0)), (Permutation (insert k q) (l ++ l)), (Permutation (insert k q) (l ++ gv0)), (Permutation (insert k q) (gv0 ++ q)), (Permutation (insert k q) (gv0 ++ l0)), (Permutation (insert k q) (gv0 ++ l)), (Permutation (insert k q) (gv0 ++ gv0))
(Permutation (insert k q) []), (Permutation (insert k l0) q), (Permutation (insert k l0) l0), (Permutation (insert k l0) l), (Permutation (insert k l0) gv0), (Permutation (insert k l0) (merge q q)), (Permutation (insert k l0) (merge q l0)), (Permutation (insert k l0) (merge q l)), (Permutation (insert k l0) (merge q gv0)), (Permutation (insert k l0) (merge l0 q))
(Permutation (insert k l0) (merge l0 l0)), (Permutation (insert k l0) (merge l0 l)), (Permutation (insert k l0) (merge l0 gv0)), (Permutation (insert k l0) (merge l q)), (Permutation (insert k l0) (merge l l0)), (Permutation (insert k l0) (merge l l)), (Permutation (insert k l0) (merge l gv0)), (Permutation (insert k l0) (merge gv0 q)), (Permutation (insert k l0) (merge gv0 l0)), (Permutation (insert k l0) (merge gv0 l))
(Permutation (insert k l0) (merge gv0 gv0)), (Permutation (insert k l0) (insert k q)), (Permutation (insert k l0) (insert k l)), (Permutation (insert k l0) (insert k gv0)), (Permutation (insert k l0) (q ++ q)), (Permutation (insert k l0) (q ++ l0)), (Permutation (insert k l0) (q ++ l)), (Permutation (insert k l0) (q ++ gv0)), (Permutation (insert k l0) (l0 ++ q)), (Permutation (insert k l0) (l0 ++ l0))
(Permutation (insert k l0) (l0 ++ l)), (Permutation (insert k l0) (l0 ++ gv0)), (Permutation (insert k l0) (l ++ q)), (Permutation (insert k l0) (l ++ l0)), (Permutation (insert k l0) (l ++ l)), (Permutation (insert k l0) (l ++ gv0)), (Permutation (insert k l0) (gv0 ++ q)), (Permutation (insert k l0) (gv0 ++ l0)), (Permutation (insert k l0) (gv0 ++ l)), (Permutation (insert k l0) (gv0 ++ gv0))
(Permutation (insert k l0) []), (Permutation (insert k l) q), (Permutation (insert k l) l0), (Permutation (insert k l) l), (Permutation (insert k l) gv0), (Permutation (insert k l) (merge q q)), (Permutation (insert k l) (merge q l0)), (Permutation (insert k l) (merge q l)), (Permutation (insert k l) (merge q gv0)), (Permutation (insert k l) (merge l0 q))
(Permutation (insert k l) (merge l0 l0)), (Permutation (insert k l) (merge l0 l)), (Permutation (insert k l) (merge l0 gv0)), (Permutation (insert k l) (merge l q)), (Permutation (insert k l) (merge l l0)), (Permutation (insert k l) (merge l l)), (Permutation (insert k l) (merge l gv0)), (Permutation (insert k l) (merge gv0 q)), (Permutation (insert k l) (merge gv0 l0)), (Permutation (insert k l) (merge gv0 l))
(Permutation (insert k l) (merge gv0 gv0)), (Permutation (insert k l) (insert k q)), (Permutation (insert k l) (insert k l0)), (Permutation (insert k l) (insert k gv0)), (Permutation (insert k l) (q ++ q)), (Permutation (insert k l) (q ++ l0)), (Permutation (insert k l) (q ++ l)), (Permutation (insert k l) (q ++ gv0)), (Permutation (insert k l) (l0 ++ q)), (Permutation (insert k l) (l0 ++ l0))
(Permutation (insert k l) (l0 ++ l)), (Permutation (insert k l) (l0 ++ gv0)), (Permutation (insert k l) (l ++ q)), (Permutation (insert k l) (l ++ l0)), (Permutation (insert k l) (l ++ l)), (Permutation (insert k l) (l ++ gv0)), (Permutation (insert k l) (gv0 ++ q)), (Permutation (insert k l) (gv0 ++ l0)), (Permutation (insert k l) (gv0 ++ l)), (Permutation (insert k l) (gv0 ++ gv0))
(Permutation (insert k l) []), (Permutation (insert k gv0) q), (Permutation (insert k gv0) l0), (Permutation (insert k gv0) l), (Permutation (insert k gv0) gv0), (Permutation (insert k gv0) (merge q q)), (Permutation (insert k gv0) (merge q l0)), (Permutation (insert k gv0) (merge q l)), (Permutation (insert k gv0) (merge q gv0)), (Permutation (insert k gv0) (merge l0 q))
(Permutation (insert k gv0) (merge l0 l0)), (Permutation (insert k gv0) (merge l0 l)), (Permutation (insert k gv0) (merge l0 gv0)), (Permutation (insert k gv0) (merge l q)), (Permutation (insert k gv0) (merge l l0)), (Permutation (insert k gv0) (merge l l)), (Permutation (insert k gv0) (merge l gv0)), (Permutation (insert k gv0) (merge gv0 q)), (Permutation (insert k gv0) (merge gv0 l0)), (Permutation (insert k gv0) (merge gv0 l))
(Permutation (insert k gv0) (merge gv0 gv0)), (Permutation (insert k gv0) (insert k q)), (Permutation (insert k gv0) (insert k l0)), (Permutation (insert k gv0) (insert k l)), (Permutation (insert k gv0) (q ++ q)), (Permutation (insert k gv0) (q ++ l0)), (Permutation (insert k gv0) (q ++ l)), (Permutation (insert k gv0) (q ++ gv0)), (Permutation (insert k gv0) (l0 ++ q)), (Permutation (insert k gv0) (l0 ++ l0))
(Permutation (insert k gv0) (l0 ++ l)), (Permutation (insert k gv0) (l0 ++ gv0)), (Permutation (insert k gv0) (l ++ q)), (Permutation (insert k gv0) (l ++ l0)), (Permutation (insert k gv0) (l ++ l)), (Permutation (insert k gv0) (l ++ gv0)), (Permutation (insert k gv0) (gv0 ++ q)), (Permutation (insert k gv0) (gv0 ++ l0)), (Permutation (insert k gv0) (gv0 ++ l)), (Permutation (insert k gv0) (gv0 ++ gv0))
(Permutation (insert k gv0) []), (Permutation (q ++ q) q), (Permutation (q ++ q) l0), (Permutation (q ++ q) l), (Permutation (q ++ q) gv0), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q l0)), (Permutation (q ++ q) (merge q l)), (Permutation (q ++ q) (merge q gv0)), (Permutation (q ++ q) (merge l0 q))
(Permutation (q ++ q) (merge l0 l0)), (Permutation (q ++ q) (merge l0 l)), (Permutation (q ++ q) (merge l0 gv0)), (Permutation (q ++ q) (merge l q)), (Permutation (q ++ q) (merge l l0)), (Permutation (q ++ q) (merge l l)), (Permutation (q ++ q) (merge l gv0)), (Permutation (q ++ q) (merge gv0 q)), (Permutation (q ++ q) (merge gv0 l0)), (Permutation (q ++ q) (merge gv0 l))
(Permutation (q ++ q) (merge gv0 gv0)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k l0)), (Permutation (q ++ q) (insert k l)), (Permutation (q ++ q) (insert k gv0)), (Permutation (q ++ q) (q ++ l0)), (Permutation (q ++ q) (q ++ l)), (Permutation (q ++ q) (q ++ gv0)), (Permutation (q ++ q) (l0 ++ q)), (Permutation (q ++ q) (l0 ++ l0))
(Permutation (q ++ q) (l0 ++ l)), (Permutation (q ++ q) (l0 ++ gv0)), (Permutation (q ++ q) (l ++ q)), (Permutation (q ++ q) (l ++ l0)), (Permutation (q ++ q) (l ++ l)), (Permutation (q ++ q) (l ++ gv0)), (Permutation (q ++ q) (gv0 ++ q)), (Permutation (q ++ q) (gv0 ++ l0)), (Permutation (q ++ q) (gv0 ++ l)), (Permutation (q ++ q) (gv0 ++ gv0))
(Permutation (q ++ q) []), (Permutation (q ++ l0) q), (Permutation (q ++ l0) l0), (Permutation (q ++ l0) l), (Permutation (q ++ l0) gv0), (Permutation (q ++ l0) (merge q q)), (Permutation (q ++ l0) (merge q l0)), (Permutation (q ++ l0) (merge q l)), (Permutation (q ++ l0) (merge q gv0)), (Permutation (q ++ l0) (merge l0 q))
(Permutation (q ++ l0) (merge l0 l0)), (Permutation (q ++ l0) (merge l0 l)), (Permutation (q ++ l0) (merge l0 gv0)), (Permutation (q ++ l0) (merge l q)), (Permutation (q ++ l0) (merge l l0)), (Permutation (q ++ l0) (merge l l)), (Permutation (q ++ l0) (merge l gv0)), (Permutation (q ++ l0) (merge gv0 q)), (Permutation (q ++ l0) (merge gv0 l0)), (Permutation (q ++ l0) (merge gv0 l))
(Permutation (q ++ l0) (merge gv0 gv0)), (Permutation (q ++ l0) (insert k q)), (Permutation (q ++ l0) (insert k l0)), (Permutation (q ++ l0) (insert k l)), (Permutation (q ++ l0) (insert k gv0)), (Permutation (q ++ l0) (q ++ q)), (Permutation (q ++ l0) (q ++ l)), (Permutation (q ++ l0) (q ++ gv0)), (Permutation (q ++ l0) (l0 ++ q)), (Permutation (q ++ l0) (l0 ++ l0))
(Permutation (q ++ l0) (l0 ++ l)), (Permutation (q ++ l0) (l0 ++ gv0)), (Permutation (q ++ l0) (l ++ q)), (Permutation (q ++ l0) (l ++ l0)), (Permutation (q ++ l0) (l ++ l)), (Permutation (q ++ l0) (l ++ gv0)), (Permutation (q ++ l0) (gv0 ++ q)), (Permutation (q ++ l0) (gv0 ++ l0)), (Permutation (q ++ l0) (gv0 ++ l)), (Permutation (q ++ l0) (gv0 ++ gv0))
(Permutation (q ++ l0) []), (Permutation (q ++ l) q), (Permutation (q ++ l) l0), (Permutation (q ++ l) l), (Permutation (q ++ l) gv0), (Permutation (q ++ l) (merge q q)), (Permutation (q ++ l) (merge q l0)), (Permutation (q ++ l) (merge q l)), (Permutation (q ++ l) (merge q gv0)), (Permutation (q ++ l) (merge l0 q))
(Permutation (q ++ l) (merge l0 l0)), (Permutation (q ++ l) (merge l0 l)), (Permutation (q ++ l) (merge l0 gv0)), (Permutation (q ++ l) (merge l q)), (Permutation (q ++ l) (merge l l0)), (Permutation (q ++ l) (merge l l)), (Permutation (q ++ l) (merge l gv0)), (Permutation (q ++ l) (merge gv0 q)), (Permutation (q ++ l) (merge gv0 l0)), (Permutation (q ++ l) (merge gv0 l))
(Permutation (q ++ l) (merge gv0 gv0)), (Permutation (q ++ l) (insert k q)), (Permutation (q ++ l) (insert k l0)), (Permutation (q ++ l) (insert k l)), (Permutation (q ++ l) (insert k gv0)), (Permutation (q ++ l) (q ++ q)), (Permutation (q ++ l) (q ++ l0)), (Permutation (q ++ l) (q ++ gv0)), (Permutation (q ++ l) (l0 ++ q)), (Permutation (q ++ l) (l0 ++ l0))
(Permutation (q ++ l) (l0 ++ l)), (Permutation (q ++ l) (l0 ++ gv0)), (Permutation (q ++ l) (l ++ q)), (Permutation (q ++ l) (l ++ l0)), (Permutation (q ++ l) (l ++ l)), (Permutation (q ++ l) (l ++ gv0)), (Permutation (q ++ l) (gv0 ++ q)), (Permutation (q ++ l) (gv0 ++ l0)), (Permutation (q ++ l) (gv0 ++ l)), (Permutation (q ++ l) (gv0 ++ gv0))
(Permutation (q ++ l) []), (Permutation (q ++ gv0) q), (Permutation (q ++ gv0) l0), (Permutation (q ++ gv0) l), (Permutation (q ++ gv0) gv0), (Permutation (q ++ gv0) (merge q q)), (Permutation (q ++ gv0) (merge q l0)), (Permutation (q ++ gv0) (merge q l)), (Permutation (q ++ gv0) (merge q gv0)), (Permutation (q ++ gv0) (merge l0 q))
(Permutation (q ++ gv0) (merge l0 l0)), (Permutation (q ++ gv0) (merge l0 l)), (Permutation (q ++ gv0) (merge l0 gv0)), (Permutation (q ++ gv0) (merge l q)), (Permutation (q ++ gv0) (merge l l0)), (Permutation (q ++ gv0) (merge l l)), (Permutation (q ++ gv0) (merge l gv0)), (Permutation (q ++ gv0) (merge gv0 q)), (Permutation (q ++ gv0) (merge gv0 l0)), (Permutation (q ++ gv0) (merge gv0 l))
(Permutation (q ++ gv0) (merge gv0 gv0)), (Permutation (q ++ gv0) (insert k q)), (Permutation (q ++ gv0) (insert k l0)), (Permutation (q ++ gv0) (insert k l)), (Permutation (q ++ gv0) (insert k gv0)), (Permutation (q ++ gv0) (q ++ q)), (Permutation (q ++ gv0) (q ++ l0)), (Permutation (q ++ gv0) (q ++ l)), (Permutation (q ++ gv0) (l0 ++ q)), (Permutation (q ++ gv0) (l0 ++ l0))
(Permutation (q ++ gv0) (l0 ++ l)), (Permutation (q ++ gv0) (l0 ++ gv0)), (Permutation (q ++ gv0) (l ++ q)), (Permutation (q ++ gv0) (l ++ l0)), (Permutation (q ++ gv0) (l ++ l)), (Permutation (q ++ gv0) (l ++ gv0)), (Permutation (q ++ gv0) (gv0 ++ q)), (Permutation (q ++ gv0) (gv0 ++ l0)), (Permutation (q ++ gv0) (gv0 ++ l)), (Permutation (q ++ gv0) (gv0 ++ gv0))
(Permutation (q ++ gv0) []), (Permutation (l0 ++ q) q), (Permutation (l0 ++ q) l0), (Permutation (l0 ++ q) l), (Permutation (l0 ++ q) gv0), (Permutation (l0 ++ q) (merge q q)), (Permutation (l0 ++ q) (merge q l0)), (Permutation (l0 ++ q) (merge q l)), (Permutation (l0 ++ q) (merge q gv0)), (Permutation (l0 ++ q) (merge l0 q))
(Permutation (l0 ++ q) (merge l0 l0)), (Permutation (l0 ++ q) (merge l0 l)), (Permutation (l0 ++ q) (merge l0 gv0)), (Permutation (l0 ++ q) (merge l q)), (Permutation (l0 ++ q) (merge l l0)), (Permutation (l0 ++ q) (merge l l)), (Permutation (l0 ++ q) (merge l gv0)), (Permutation (l0 ++ q) (merge gv0 q)), (Permutation (l0 ++ q) (merge gv0 l0)), (Permutation (l0 ++ q) (merge gv0 l))
(Permutation (l0 ++ q) (merge gv0 gv0)), (Permutation (l0 ++ q) (insert k q)), (Permutation (l0 ++ q) (insert k l0)), (Permutation (l0 ++ q) (insert k l)), (Permutation (l0 ++ q) (insert k gv0)), (Permutation (l0 ++ q) (q ++ q)), (Permutation (l0 ++ q) (q ++ l0)), (Permutation (l0 ++ q) (q ++ l)), (Permutation (l0 ++ q) (q ++ gv0)), (Permutation (l0 ++ q) (l0 ++ l0))
(Permutation (l0 ++ q) (l0 ++ l)), (Permutation (l0 ++ q) (l0 ++ gv0)), (Permutation (l0 ++ q) (l ++ q)), (Permutation (l0 ++ q) (l ++ l0)), (Permutation (l0 ++ q) (l ++ l)), (Permutation (l0 ++ q) (l ++ gv0)), (Permutation (l0 ++ q) (gv0 ++ q)), (Permutation (l0 ++ q) (gv0 ++ l0)), (Permutation (l0 ++ q) (gv0 ++ l)), (Permutation (l0 ++ q) (gv0 ++ gv0))
(Permutation (l0 ++ q) []), (Permutation (l0 ++ l0) q), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) l), (Permutation (l0 ++ l0) gv0), (Permutation (l0 ++ l0) (merge q q)), (Permutation (l0 ++ l0) (merge q l0)), (Permutation (l0 ++ l0) (merge q l)), (Permutation (l0 ++ l0) (merge q gv0)), (Permutation (l0 ++ l0) (merge l0 q))
(Permutation (l0 ++ l0) (merge l0 l0)), (Permutation (l0 ++ l0) (merge l0 l)), (Permutation (l0 ++ l0) (merge l0 gv0)), (Permutation (l0 ++ l0) (merge l q)), (Permutation (l0 ++ l0) (merge l l0)), (Permutation (l0 ++ l0) (merge l l)), (Permutation (l0 ++ l0) (merge l gv0)), (Permutation (l0 ++ l0) (merge gv0 q)), (Permutation (l0 ++ l0) (merge gv0 l0)), (Permutation (l0 ++ l0) (merge gv0 l))
(Permutation (l0 ++ l0) (merge gv0 gv0)), (Permutation (l0 ++ l0) (insert k q)), (Permutation (l0 ++ l0) (insert k l0)), (Permutation (l0 ++ l0) (insert k l)), (Permutation (l0 ++ l0) (insert k gv0)), (Permutation (l0 ++ l0) (q ++ q)), (Permutation (l0 ++ l0) (q ++ l0)), (Permutation (l0 ++ l0) (q ++ l)), (Permutation (l0 ++ l0) (q ++ gv0)), (Permutation (l0 ++ l0) (l0 ++ q))
(Permutation (l0 ++ l0) (l0 ++ l)), (Permutation (l0 ++ l0) (l0 ++ gv0)), (Permutation (l0 ++ l0) (l ++ q)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l ++ l)), (Permutation (l0 ++ l0) (l ++ gv0)), (Permutation (l0 ++ l0) (gv0 ++ q)), (Permutation (l0 ++ l0) (gv0 ++ l0)), (Permutation (l0 ++ l0) (gv0 ++ l)), (Permutation (l0 ++ l0) (gv0 ++ gv0))
(Permutation (l0 ++ l0) []), (Permutation (l0 ++ l) q), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) gv0), (Permutation (l0 ++ l) (merge q q)), (Permutation (l0 ++ l) (merge q l0)), (Permutation (l0 ++ l) (merge q l)), (Permutation (l0 ++ l) (merge q gv0)), (Permutation (l0 ++ l) (merge l0 q))
(Permutation (l0 ++ l) (merge l0 l0)), (Permutation (l0 ++ l) (merge l0 l)), (Permutation (l0 ++ l) (merge l0 gv0)), (Permutation (l0 ++ l) (merge l q)), (Permutation (l0 ++ l) (merge l l0)), (Permutation (l0 ++ l) (merge l l)), (Permutation (l0 ++ l) (merge l gv0)), (Permutation (l0 ++ l) (merge gv0 q)), (Permutation (l0 ++ l) (merge gv0 l0)), (Permutation (l0 ++ l) (merge gv0 l))
(Permutation (l0 ++ l) (merge gv0 gv0)), (Permutation (l0 ++ l) (insert k q)), (Permutation (l0 ++ l) (insert k l0)), (Permutation (l0 ++ l) (insert k l)), (Permutation (l0 ++ l) (insert k gv0)), (Permutation (l0 ++ l) (q ++ q)), (Permutation (l0 ++ l) (q ++ l0)), (Permutation (l0 ++ l) (q ++ l)), (Permutation (l0 ++ l) (q ++ gv0)), (Permutation (l0 ++ l) (l0 ++ q))
(Permutation (l0 ++ l) (l0 ++ l0)), (Permutation (l0 ++ l) (l0 ++ gv0)), (Permutation (l0 ++ l) (l ++ q)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) (l ++ gv0)), (Permutation (l0 ++ l) (gv0 ++ q)), (Permutation (l0 ++ l) (gv0 ++ l0)), (Permutation (l0 ++ l) (gv0 ++ l)), (Permutation (l0 ++ l) (gv0 ++ gv0))
(Permutation (l0 ++ l) []), (Permutation (l0 ++ gv0) q), (Permutation (l0 ++ gv0) l0), (Permutation (l0 ++ gv0) l), (Permutation (l0 ++ gv0) gv0), (Permutation (l0 ++ gv0) (merge q q)), (Permutation (l0 ++ gv0) (merge q l0)), (Permutation (l0 ++ gv0) (merge q l)), (Permutation (l0 ++ gv0) (merge q gv0)), (Permutation (l0 ++ gv0) (merge l0 q))
(Permutation (l0 ++ gv0) (merge l0 l0)), (Permutation (l0 ++ gv0) (merge l0 l)), (Permutation (l0 ++ gv0) (merge l0 gv0)), (Permutation (l0 ++ gv0) (merge l q)), (Permutation (l0 ++ gv0) (merge l l0)), (Permutation (l0 ++ gv0) (merge l l)), (Permutation (l0 ++ gv0) (merge l gv0)), (Permutation (l0 ++ gv0) (merge gv0 q)), (Permutation (l0 ++ gv0) (merge gv0 l0)), (Permutation (l0 ++ gv0) (merge gv0 l))
(Permutation (l0 ++ gv0) (merge gv0 gv0)), (Permutation (l0 ++ gv0) (insert k q)), (Permutation (l0 ++ gv0) (insert k l0)), (Permutation (l0 ++ gv0) (insert k l)), (Permutation (l0 ++ gv0) (insert k gv0)), (Permutation (l0 ++ gv0) (q ++ q)), (Permutation (l0 ++ gv0) (q ++ l0)), (Permutation (l0 ++ gv0) (q ++ l)), (Permutation (l0 ++ gv0) (q ++ gv0)), (Permutation (l0 ++ gv0) (l0 ++ q))
(Permutation (l0 ++ gv0) (l0 ++ l0)), (Permutation (l0 ++ gv0) (l0 ++ l)), (Permutation (l0 ++ gv0) (l ++ q)), (Permutation (l0 ++ gv0) (l ++ l0)), (Permutation (l0 ++ gv0) (l ++ l)), (Permutation (l0 ++ gv0) (l ++ gv0)), (Permutation (l0 ++ gv0) (gv0 ++ q)), (Permutation (l0 ++ gv0) (gv0 ++ l0)), (Permutation (l0 ++ gv0) (gv0 ++ l)), (Permutation (l0 ++ gv0) (gv0 ++ gv0))
(Permutation (l0 ++ gv0) []), (Permutation (l ++ q) q), (Permutation (l ++ q) l0), (Permutation (l ++ q) l), (Permutation (l ++ q) gv0), (Permutation (l ++ q) (merge q q)), (Permutation (l ++ q) (merge q l0)), (Permutation (l ++ q) (merge q l)), (Permutation (l ++ q) (merge q gv0)), (Permutation (l ++ q) (merge l0 q))
(Permutation (l ++ q) (merge l0 l0)), (Permutation (l ++ q) (merge l0 l)), (Permutation (l ++ q) (merge l0 gv0)), (Permutation (l ++ q) (merge l q)), (Permutation (l ++ q) (merge l l0)), (Permutation (l ++ q) (merge l l)), (Permutation (l ++ q) (merge l gv0)), (Permutation (l ++ q) (merge gv0 q)), (Permutation (l ++ q) (merge gv0 l0)), (Permutation (l ++ q) (merge gv0 l))
(Permutation (l ++ q) (merge gv0 gv0)), (Permutation (l ++ q) (insert k q)), (Permutation (l ++ q) (insert k l0)), (Permutation (l ++ q) (insert k l)), (Permutation (l ++ q) (insert k gv0)), (Permutation (l ++ q) (q ++ q)), (Permutation (l ++ q) (q ++ l0)), (Permutation (l ++ q) (q ++ l)), (Permutation (l ++ q) (q ++ gv0)), (Permutation (l ++ q) (l0 ++ q))
(Permutation (l ++ q) (l0 ++ l0)), (Permutation (l ++ q) (l0 ++ l)), (Permutation (l ++ q) (l0 ++ gv0)), (Permutation (l ++ q) (l ++ l0)), (Permutation (l ++ q) (l ++ l)), (Permutation (l ++ q) (l ++ gv0)), (Permutation (l ++ q) (gv0 ++ q)), (Permutation (l ++ q) (gv0 ++ l0)), (Permutation (l ++ q) (gv0 ++ l)), (Permutation (l ++ q) (gv0 ++ gv0))
(Permutation (l ++ q) []), (Permutation (l ++ l0) q), (Permutation (l ++ l0) l0), (Permutation (l ++ l0) l), (Permutation (l ++ l0) gv0), (Permutation (l ++ l0) (merge q q)), (Permutation (l ++ l0) (merge q l0)), (Permutation (l ++ l0) (merge q l)), (Permutation (l ++ l0) (merge q gv0)), (Permutation (l ++ l0) (merge l0 q))
(Permutation (l ++ l0) (merge l0 l0)), (Permutation (l ++ l0) (merge l0 l)), (Permutation (l ++ l0) (merge l0 gv0)), (Permutation (l ++ l0) (merge l q)), (Permutation (l ++ l0) (merge l l0)), (Permutation (l ++ l0) (merge l l)), (Permutation (l ++ l0) (merge l gv0)), (Permutation (l ++ l0) (merge gv0 q)), (Permutation (l ++ l0) (merge gv0 l0)), (Permutation (l ++ l0) (merge gv0 l))
(Permutation (l ++ l0) (merge gv0 gv0)), (Permutation (l ++ l0) (insert k q)), (Permutation (l ++ l0) (insert k l0)), (Permutation (l ++ l0) (insert k l)), (Permutation (l ++ l0) (insert k gv0)), (Permutation (l ++ l0) (q ++ q)), (Permutation (l ++ l0) (q ++ l0)), (Permutation (l ++ l0) (q ++ l)), (Permutation (l ++ l0) (q ++ gv0)), (Permutation (l ++ l0) (l0 ++ q))
(Permutation (l ++ l0) (l0 ++ l0)), (Permutation (l ++ l0) (l0 ++ l)), (Permutation (l ++ l0) (l0 ++ gv0)), (Permutation (l ++ l0) (l ++ q)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) (l ++ gv0)), (Permutation (l ++ l0) (gv0 ++ q)), (Permutation (l ++ l0) (gv0 ++ l0)), (Permutation (l ++ l0) (gv0 ++ l)), (Permutation (l ++ l0) (gv0 ++ gv0))
(Permutation (l ++ l0) []), (Permutation (l ++ l) q), (Permutation (l ++ l) l0), (Permutation (l ++ l) l), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (merge q q)), (Permutation (l ++ l) (merge q l0)), (Permutation (l ++ l) (merge q l)), (Permutation (l ++ l) (merge q gv0)), (Permutation (l ++ l) (merge l0 q))
(Permutation (l ++ l) (merge l0 l0)), (Permutation (l ++ l) (merge l0 l)), (Permutation (l ++ l) (merge l0 gv0)), (Permutation (l ++ l) (merge l q)), (Permutation (l ++ l) (merge l l0)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l gv0)), (Permutation (l ++ l) (merge gv0 q)), (Permutation (l ++ l) (merge gv0 l0)), (Permutation (l ++ l) (merge gv0 l))
(Permutation (l ++ l) (merge gv0 gv0)), (Permutation (l ++ l) (insert k q)), (Permutation (l ++ l) (insert k l0)), (Permutation (l ++ l) (insert k l)), (Permutation (l ++ l) (insert k gv0)), (Permutation (l ++ l) (q ++ q)), (Permutation (l ++ l) (q ++ l0)), (Permutation (l ++ l) (q ++ l)), (Permutation (l ++ l) (q ++ gv0)), (Permutation (l ++ l) (l0 ++ q))
(Permutation (l ++ l) (l0 ++ l0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l0 ++ gv0)), (Permutation (l ++ l) (l ++ q)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv0 ++ q)), (Permutation (l ++ l) (gv0 ++ l0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv0))
(Permutation (l ++ l) []), (Permutation (l ++ gv0) q), (Permutation (l ++ gv0) l0), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (merge q q)), (Permutation (l ++ gv0) (merge q l0)), (Permutation (l ++ gv0) (merge q l)), (Permutation (l ++ gv0) (merge q gv0)), (Permutation (l ++ gv0) (merge l0 q))
(Permutation (l ++ gv0) (merge l0 l0)), (Permutation (l ++ gv0) (merge l0 l)), (Permutation (l ++ gv0) (merge l0 gv0)), (Permutation (l ++ gv0) (merge l q)), (Permutation (l ++ gv0) (merge l l0)), (Permutation (l ++ gv0) (merge l l)), (Permutation (l ++ gv0) (merge l gv0)), (Permutation (l ++ gv0) (merge gv0 q)), (Permutation (l ++ gv0) (merge gv0 l0)), (Permutation (l ++ gv0) (merge gv0 l))
(Permutation (l ++ gv0) (merge gv0 gv0)), (Permutation (l ++ gv0) (insert k q)), (Permutation (l ++ gv0) (insert k l0)), (Permutation (l ++ gv0) (insert k l)), (Permutation (l ++ gv0) (insert k gv0)), (Permutation (l ++ gv0) (q ++ q)), (Permutation (l ++ gv0) (q ++ l0)), (Permutation (l ++ gv0) (q ++ l)), (Permutation (l ++ gv0) (q ++ gv0)), (Permutation (l ++ gv0) (l0 ++ q))
(Permutation (l ++ gv0) (l0 ++ l0)), (Permutation (l ++ gv0) (l0 ++ l)), (Permutation (l ++ gv0) (l0 ++ gv0)), (Permutation (l ++ gv0) (l ++ q)), (Permutation (l ++ gv0) (l ++ l0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (gv0 ++ q)), (Permutation (l ++ gv0) (gv0 ++ l0)), (Permutation (l ++ gv0) (gv0 ++ l)), (Permutation (l ++ gv0) (gv0 ++ gv0))
(Permutation (l ++ gv0) []), (Permutation (gv0 ++ q) q), (Permutation (gv0 ++ q) l0), (Permutation (gv0 ++ q) l), (Permutation (gv0 ++ q) gv0), (Permutation (gv0 ++ q) (merge q q)), (Permutation (gv0 ++ q) (merge q l0)), (Permutation (gv0 ++ q) (merge q l)), (Permutation (gv0 ++ q) (merge q gv0)), (Permutation (gv0 ++ q) (merge l0 q))
(Permutation (gv0 ++ q) (merge l0 l0)), (Permutation (gv0 ++ q) (merge l0 l)), (Permutation (gv0 ++ q) (merge l0 gv0)), (Permutation (gv0 ++ q) (merge l q)), (Permutation (gv0 ++ q) (merge l l0)), (Permutation (gv0 ++ q) (merge l l)), (Permutation (gv0 ++ q) (merge l gv0)), (Permutation (gv0 ++ q) (merge gv0 q)), (Permutation (gv0 ++ q) (merge gv0 l0)), (Permutation (gv0 ++ q) (merge gv0 l))
(Permutation (gv0 ++ q) (merge gv0 gv0)), (Permutation (gv0 ++ q) (insert k q)), (Permutation (gv0 ++ q) (insert k l0)), (Permutation (gv0 ++ q) (insert k l)), (Permutation (gv0 ++ q) (insert k gv0)), (Permutation (gv0 ++ q) (q ++ q)), (Permutation (gv0 ++ q) (q ++ l0)), (Permutation (gv0 ++ q) (q ++ l)), (Permutation (gv0 ++ q) (q ++ gv0)), (Permutation (gv0 ++ q) (l0 ++ q))
(Permutation (gv0 ++ q) (l0 ++ l0)), (Permutation (gv0 ++ q) (l0 ++ l)), (Permutation (gv0 ++ q) (l0 ++ gv0)), (Permutation (gv0 ++ q) (l ++ q)), (Permutation (gv0 ++ q) (l ++ l0)), (Permutation (gv0 ++ q) (l ++ l)), (Permutation (gv0 ++ q) (l ++ gv0)), (Permutation (gv0 ++ q) (gv0 ++ l0)), (Permutation (gv0 ++ q) (gv0 ++ l)), (Permutation (gv0 ++ q) (gv0 ++ gv0))
(Permutation (gv0 ++ q) []), (Permutation (gv0 ++ l0) q), (Permutation (gv0 ++ l0) l0), (Permutation (gv0 ++ l0) l), (Permutation (gv0 ++ l0) gv0), (Permutation (gv0 ++ l0) (merge q q)), (Permutation (gv0 ++ l0) (merge q l0)), (Permutation (gv0 ++ l0) (merge q l)), (Permutation (gv0 ++ l0) (merge q gv0)), (Permutation (gv0 ++ l0) (merge l0 q))
(Permutation (gv0 ++ l0) (merge l0 l0)), (Permutation (gv0 ++ l0) (merge l0 l)), (Permutation (gv0 ++ l0) (merge l0 gv0)), (Permutation (gv0 ++ l0) (merge l q)), (Permutation (gv0 ++ l0) (merge l l0)), (Permutation (gv0 ++ l0) (merge l l)), (Permutation (gv0 ++ l0) (merge l gv0)), (Permutation (gv0 ++ l0) (merge gv0 q)), (Permutation (gv0 ++ l0) (merge gv0 l0)), (Permutation (gv0 ++ l0) (merge gv0 l))
(Permutation (gv0 ++ l0) (merge gv0 gv0)), (Permutation (gv0 ++ l0) (insert k q)), (Permutation (gv0 ++ l0) (insert k l0)), (Permutation (gv0 ++ l0) (insert k l)), (Permutation (gv0 ++ l0) (insert k gv0)), (Permutation (gv0 ++ l0) (q ++ q)), (Permutation (gv0 ++ l0) (q ++ l0)), (Permutation (gv0 ++ l0) (q ++ l)), (Permutation (gv0 ++ l0) (q ++ gv0)), (Permutation (gv0 ++ l0) (l0 ++ q))
(Permutation (gv0 ++ l0) (l0 ++ l0)), (Permutation (gv0 ++ l0) (l0 ++ l)), (Permutation (gv0 ++ l0) (l0 ++ gv0)), (Permutation (gv0 ++ l0) (l ++ q)), (Permutation (gv0 ++ l0) (l ++ l0)), (Permutation (gv0 ++ l0) (l ++ l)), (Permutation (gv0 ++ l0) (l ++ gv0)), (Permutation (gv0 ++ l0) (gv0 ++ q)), (Permutation (gv0 ++ l0) (gv0 ++ l)), (Permutation (gv0 ++ l0) (gv0 ++ gv0))
(Permutation (gv0 ++ l0) []), (Permutation (gv0 ++ l) q), (Permutation (gv0 ++ l) l0), (Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (merge q q)), (Permutation (gv0 ++ l) (merge q l0)), (Permutation (gv0 ++ l) (merge q l)), (Permutation (gv0 ++ l) (merge q gv0)), (Permutation (gv0 ++ l) (merge l0 q))
(Permutation (gv0 ++ l) (merge l0 l0)), (Permutation (gv0 ++ l) (merge l0 l)), (Permutation (gv0 ++ l) (merge l0 gv0)), (Permutation (gv0 ++ l) (merge l q)), (Permutation (gv0 ++ l) (merge l l0)), (Permutation (gv0 ++ l) (merge l l)), (Permutation (gv0 ++ l) (merge l gv0)), (Permutation (gv0 ++ l) (merge gv0 q)), (Permutation (gv0 ++ l) (merge gv0 l0)), (Permutation (gv0 ++ l) (merge gv0 l))
(Permutation (gv0 ++ l) (merge gv0 gv0)), (Permutation (gv0 ++ l) (insert k q)), (Permutation (gv0 ++ l) (insert k l0)), (Permutation (gv0 ++ l) (insert k l)), (Permutation (gv0 ++ l) (insert k gv0)), (Permutation (gv0 ++ l) (q ++ q)), (Permutation (gv0 ++ l) (q ++ l0)), (Permutation (gv0 ++ l) (q ++ l)), (Permutation (gv0 ++ l) (q ++ gv0)), (Permutation (gv0 ++ l) (l0 ++ q))
(Permutation (gv0 ++ l) (l0 ++ l0)), (Permutation (gv0 ++ l) (l0 ++ l)), (Permutation (gv0 ++ l) (l0 ++ gv0)), (Permutation (gv0 ++ l) (l ++ q)), (Permutation (gv0 ++ l) (l ++ l0)), (Permutation (gv0 ++ l) (l ++ l)), (Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ q)), (Permutation (gv0 ++ l) (gv0 ++ l0)), (Permutation (gv0 ++ l) (gv0 ++ gv0))
(Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv0) q), (Permutation (gv0 ++ gv0) l0), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (merge q q)), (Permutation (gv0 ++ gv0) (merge q l0)), (Permutation (gv0 ++ gv0) (merge q l)), (Permutation (gv0 ++ gv0) (merge q gv0)), (Permutation (gv0 ++ gv0) (merge l0 q))
(Permutation (gv0 ++ gv0) (merge l0 l0)), (Permutation (gv0 ++ gv0) (merge l0 l)), (Permutation (gv0 ++ gv0) (merge l0 gv0)), (Permutation (gv0 ++ gv0) (merge l q)), (Permutation (gv0 ++ gv0) (merge l l0)), (Permutation (gv0 ++ gv0) (merge l l)), (Permutation (gv0 ++ gv0) (merge l gv0)), (Permutation (gv0 ++ gv0) (merge gv0 q)), (Permutation (gv0 ++ gv0) (merge gv0 l0)), (Permutation (gv0 ++ gv0) (merge gv0 l))
(Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (insert k q)), (Permutation (gv0 ++ gv0) (insert k l0)), (Permutation (gv0 ++ gv0) (insert k l)), (Permutation (gv0 ++ gv0) (insert k gv0)), (Permutation (gv0 ++ gv0) (q ++ q)), (Permutation (gv0 ++ gv0) (q ++ l0)), (Permutation (gv0 ++ gv0) (q ++ l)), (Permutation (gv0 ++ gv0) (q ++ gv0)), (Permutation (gv0 ++ gv0) (l0 ++ q))
(Permutation (gv0 ++ gv0) (l0 ++ l0)), (Permutation (gv0 ++ gv0) (l0 ++ l)), (Permutation (gv0 ++ gv0) (l0 ++ gv0)), (Permutation (gv0 ++ gv0) (l ++ q)), (Permutation (gv0 ++ gv0) (l ++ l0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ q)), (Permutation (gv0 ++ gv0) (gv0 ++ l0)), (Permutation (gv0 ++ gv0) (gv0 ++ l))
(Permutation (gv0 ++ gv0) []), (Permutation [] q), (Permutation [] l0), (Permutation [] l), (Permutation [] gv0), (Permutation [] (merge q q)), (Permutation [] (merge q l0)), (Permutation [] (merge q l)), (Permutation [] (merge q gv0)), (Permutation [] (merge l0 q))
(Permutation [] (merge l0 l0)), (Permutation [] (merge l0 l)), (Permutation [] (merge l0 gv0)), (Permutation [] (merge l q)), (Permutation [] (merge l l0)), (Permutation [] (merge l l)), (Permutation [] (merge l gv0)), (Permutation [] (merge gv0 q)), (Permutation [] (merge gv0 l0)), (Permutation [] (merge gv0 l))
(Permutation [] (merge gv0 gv0)), (Permutation [] (insert k q)), (Permutation [] (insert k l0)), (Permutation [] (insert k l)), (Permutation [] (insert k gv0)), (Permutation [] (q ++ q)), (Permutation [] (q ++ l0)), (Permutation [] (q ++ l)), (Permutation [] (q ++ gv0)), (Permutation [] (l0 ++ q))
(Permutation [] (l0 ++ l0)), (Permutation [] (l0 ++ l)), (Permutation [] (l0 ++ gv0)), (Permutation [] (l ++ q)), (Permutation [] (l ++ l0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv0)), (Permutation [] (gv0 ++ q)), (Permutation [] (gv0 ++ l0)), (Permutation [] (gv0 ++ l))
(Permutation [] (gv0 ++ gv0)), (In Leaf q), (In Leaf l0), (In Leaf l), (In Leaf gv0), (In Leaf (merge q q)), (In Leaf (merge q l0)), (In Leaf (merge q l)), (In Leaf (merge q gv0)), (In Leaf (merge l0 q))
(In Leaf (merge l0 l0)), (In Leaf (merge l0 l)), (In Leaf (merge l0 gv0)), (In Leaf (merge l q)), (In Leaf (merge l l0)), (In Leaf (merge l l)), (In Leaf (merge l gv0)), (In Leaf (merge gv0 q)), (In Leaf (merge gv0 l0)), (In Leaf (merge gv0 l))
(In Leaf (merge gv0 gv0)), (In Leaf (insert k q)), (In Leaf (insert k l0)), (In Leaf (insert k l)), (In Leaf (insert k gv0)), (In Leaf (q ++ q)), (In Leaf (q ++ l0)), (In Leaf (q ++ l)), (In Leaf (q ++ gv0)), (In Leaf (l0 ++ q))
(In Leaf (l0 ++ l0)), (In Leaf (l0 ++ l)), (In Leaf (l0 ++ gv0)), (In Leaf (l ++ q)), (In Leaf (l ++ l0)), (In Leaf (l ++ l)), (In Leaf (l ++ gv0)), (In Leaf (gv0 ++ q)), (In Leaf (gv0 ++ l0)), (In Leaf (gv0 ++ l))
(In Leaf (gv0 ++ gv0)), (k < find_max' k q), (k < find_max' k l0), (k < find_max' k l), (k < find_max' k gv0), (k < length q), (k < length l0), (k < length l), (k < length gv0), (find_max' k q < k)
(find_max' k q < find_max' k l0), (find_max' k q < find_max' k l), (find_max' k q < find_max' k gv0), (find_max' k q < length q), (find_max' k q < length l0), (find_max' k q < length l), (find_max' k q < length gv0), (find_max' k l0 < k), (find_max' k l0 < find_max' k q), (find_max' k l0 < find_max' k l)
(find_max' k l0 < find_max' k gv0), (find_max' k l0 < length q), (find_max' k l0 < length l0), (find_max' k l0 < length l), (find_max' k l0 < length gv0), (find_max' k l < k), (find_max' k l < find_max' k q), (find_max' k l < find_max' k l0), (find_max' k l < find_max' k gv0), (find_max' k l < length q)
(find_max' k l < length l0), (find_max' k l < length l), (find_max' k l < length gv0), (find_max' k gv0 < k), (find_max' k gv0 < find_max' k q), (find_max' k gv0 < find_max' k l0), (find_max' k gv0 < find_max' k l), (find_max' k gv0 < length q), (find_max' k gv0 < length l0), (find_max' k gv0 < length l)
(find_max' k gv0 < length gv0), (length q < k), (length q < find_max' k q), (length q < find_max' k l0), (length q < find_max' k l), (length q < find_max' k gv0), (length q < length l0), (length q < length l), (length q < length gv0), (length l0 < k)
(length l0 < find_max' k q), (length l0 < find_max' k l0), (length l0 < find_max' k l), (length l0 < find_max' k gv0), (length l0 < length q), (length l0 < length l), (length l0 < length gv0), (length l < k), (length l < find_max' k q), (length l < find_max' k l0)
(length l < find_max' k l), (length l < find_max' k gv0), (length l < length q), (length l < length l0), (length l < length gv0), (length gv0 < k), (length gv0 < find_max' k q), (length gv0 < find_max' k l0), (length gv0 < find_max' k l), (length gv0 < find_max' k gv0)
(length gv0 < length q), (length gv0 < length l0), (length gv0 < length l), (k <= find_max' k q), (k <= find_max' k l0), (k <= find_max' k l), (k <= find_max' k gv0), (k <= length q), (k <= length l0), (k <= length l)
(k <= length gv0), (find_max' k q <= k), (find_max' k q <= find_max' k l0), (find_max' k q <= find_max' k l), (find_max' k q <= find_max' k gv0), (find_max' k q <= length q), (find_max' k q <= length l0), (find_max' k q <= length l), (find_max' k q <= length gv0), (find_max' k l0 <= k)
(find_max' k l0 <= find_max' k q), (find_max' k l0 <= find_max' k l), (find_max' k l0 <= find_max' k gv0), (find_max' k l0 <= length q), (find_max' k l0 <= length l0), (find_max' k l0 <= length l), (find_max' k l0 <= length gv0), (find_max' k l <= k), (find_max' k l <= find_max' k q), (find_max' k l <= find_max' k l0)
(find_max' k l <= find_max' k gv0), (find_max' k l <= length q), (find_max' k l <= length l0), (find_max' k l <= length l), (find_max' k l <= length gv0), (find_max' k gv0 <= k), (find_max' k gv0 <= find_max' k q), (find_max' k gv0 <= find_max' k l0), (find_max' k gv0 <= find_max' k l), (find_max' k gv0 <= length q)
(find_max' k gv0 <= length l0), (find_max' k gv0 <= length l), (find_max' k gv0 <= length gv0), (length q <= k), (length q <= find_max' k q), (length q <= find_max' k l0), (length q <= find_max' k l), (length q <= find_max' k gv0), (length q <= length l0), (length q <= length l)
(length q <= length gv0), (length l0 <= k), (length l0 <= find_max' k q), (length l0 <= find_max' k l0), (length l0 <= find_max' k l), (length l0 <= find_max' k gv0), (length l0 <= length q), (length l0 <= length l), (length l0 <= length gv0), (length l <= k)
(length l <= find_max' k q), (length l <= find_max' k l0), (length l <= find_max' k l), (length l <= find_max' k gv0), (length l <= length q), (length l <= length l0), (length l <= length gv0), (length gv0 <= k), (length gv0 <= find_max' k q), (length gv0 <= find_max' k l0)
(length gv0 <= find_max' k l), (length gv0 <= find_max' k gv0), (length gv0 <= length q), (length gv0 <= length l0), (length gv0 <= length l), (~ priq q), (~ priq l0), (~ priq l), (~ priq gv0), (~ priqq k q)
(~ priqq k l0), (~ priqq k l), (~ priqq k gv0), (~ Permutation q q), (~ Permutation q l0), (~ Permutation q l), (~ Permutation q gv0), (~ Permutation l0 q), (~ Permutation l0 l0), (~ Permutation l0 l)
(~ Permutation l0 gv0), (~ Permutation l q), (~ Permutation l l0), (~ Permutation l l), (~ Permutation l gv0), (~ Permutation gv0 q), (~ Permutation gv0 l0), (~ Permutation gv0 l), (~ Permutation gv0 gv0), (~ k < k)
(~ k <= k), (k <> k), (q <> q), (q <> l0), (q <> l), (q <> gv0), (l0 <> q), (l0 <> l0), (l0 <> l), (l0 <> gv0)
(l <> q), (l <> l0), (l <> l), (l <> gv0), (gv0 <> q), (gv0 <> l0), (gv0 <> l), (gv0 <> gv0), (None = Some q), (None = Some l0)
(None = Some l), (None = Some gv0), (merge q q = q), (merge q q = l0), (merge q q = l), (merge q q = gv0), (merge q q = insert k q), (merge q q = insert k l0), (merge q q = insert k l), (merge q q = insert k gv0)
(merge q q = q ++ q), (merge q q = q ++ l0), (merge q q = q ++ l), (merge q q = q ++ gv0), (merge q q = l0 ++ q), (merge q q = l0 ++ l0), (merge q q = l0 ++ l), (merge q q = l0 ++ gv0), (merge q q = l ++ q), (merge q q = l ++ l0)
(merge q q = l ++ l), (merge q q = l ++ gv0), (merge q q = gv0 ++ q), (merge q q = gv0 ++ l0), (merge q q = gv0 ++ l), (merge q q = gv0 ++ gv0), (merge q l0 = q), (merge q l0 = l0), (merge q l0 = l), (merge q l0 = gv0)
(merge q l0 = insert k q), (merge q l0 = insert k l0), (merge q l0 = insert k l), (merge q l0 = insert k gv0), (merge q l0 = q ++ q), (merge q l0 = q ++ l0), (merge q l0 = q ++ l), (merge q l0 = q ++ gv0), (merge q l0 = l0 ++ q), (merge q l0 = l0 ++ l0)
(merge q l0 = l0 ++ l), (merge q l0 = l0 ++ gv0), (merge q l0 = l ++ q), (merge q l0 = l ++ l0), (merge q l0 = l ++ l), (merge q l0 = l ++ gv0), (merge q l0 = gv0 ++ q), (merge q l0 = gv0 ++ l0), (merge q l0 = gv0 ++ l), (merge q l0 = gv0 ++ gv0)
(merge q l = q), (merge q l = l0), (merge q l = l), (merge q l = gv0), (merge q l = insert k q), (merge q l = insert k l0), (merge q l = insert k l), (merge q l = insert k gv0), (merge q l = q ++ q), (merge q l = q ++ l0)
(merge q l = q ++ l), (merge q l = q ++ gv0), (merge q l = l0 ++ q), (merge q l = l0 ++ l0), (merge q l = l0 ++ l), (merge q l = l0 ++ gv0), (merge q l = l ++ q), (merge q l = l ++ l0), (merge q l = l ++ l), (merge q l = l ++ gv0)
(merge q l = gv0 ++ q), (merge q l = gv0 ++ l0), (merge q l = gv0 ++ l), (merge q l = gv0 ++ gv0), (merge q gv0 = q), (merge q gv0 = l0), (merge q gv0 = l), (merge q gv0 = gv0), (merge q gv0 = insert k q), (merge q gv0 = insert k l0)
(merge q gv0 = insert k l), (merge q gv0 = insert k gv0), (merge q gv0 = q ++ q), (merge q gv0 = q ++ l0), (merge q gv0 = q ++ l), (merge q gv0 = q ++ gv0), (merge q gv0 = l0 ++ q), (merge q gv0 = l0 ++ l0), (merge q gv0 = l0 ++ l), (merge q gv0 = l0 ++ gv0)
(merge q gv0 = l ++ q), (merge q gv0 = l ++ l0), (merge q gv0 = l ++ l), (merge q gv0 = l ++ gv0), (merge q gv0 = gv0 ++ q), (merge q gv0 = gv0 ++ l0), (merge q gv0 = gv0 ++ l), (merge q gv0 = gv0 ++ gv0), (merge l0 q = q), (merge l0 q = l0)
(merge l0 q = l), (merge l0 q = gv0), (merge l0 q = insert k q), (merge l0 q = insert k l0), (merge l0 q = insert k l), (merge l0 q = insert k gv0), (merge l0 q = q ++ q), (merge l0 q = q ++ l0), (merge l0 q = q ++ l), (merge l0 q = q ++ gv0)
(merge l0 q = l0 ++ q), (merge l0 q = l0 ++ l0), (merge l0 q = l0 ++ l), (merge l0 q = l0 ++ gv0), (merge l0 q = l ++ q), (merge l0 q = l ++ l0), (merge l0 q = l ++ l), (merge l0 q = l ++ gv0), (merge l0 q = gv0 ++ q), (merge l0 q = gv0 ++ l0)
(merge l0 q = gv0 ++ l), (merge l0 q = gv0 ++ gv0), (merge l0 l0 = q), (merge l0 l0 = l0), (merge l0 l0 = l), (merge l0 l0 = gv0), (merge l0 l0 = insert k q), (merge l0 l0 = insert k l0), (merge l0 l0 = insert k l), (merge l0 l0 = insert k gv0)
(merge l0 l0 = q ++ q), (merge l0 l0 = q ++ l0), (merge l0 l0 = q ++ l), (merge l0 l0 = q ++ gv0), (merge l0 l0 = l0 ++ q), (merge l0 l0 = l0 ++ l0), (merge l0 l0 = l0 ++ l), (merge l0 l0 = l0 ++ gv0), (merge l0 l0 = l ++ q), (merge l0 l0 = l ++ l0)
(merge l0 l0 = l ++ l), (merge l0 l0 = l ++ gv0), (merge l0 l0 = gv0 ++ q), (merge l0 l0 = gv0 ++ l0), (merge l0 l0 = gv0 ++ l), (merge l0 l0 = gv0 ++ gv0), (merge l0 l = q), (merge l0 l = l0), (merge l0 l = l), (merge l0 l = gv0)
(merge l0 l = insert k q), (merge l0 l = insert k l0), (merge l0 l = insert k l), (merge l0 l = insert k gv0), (merge l0 l = q ++ q), (merge l0 l = q ++ l0), (merge l0 l = q ++ l), (merge l0 l = q ++ gv0), (merge l0 l = l0 ++ q), (merge l0 l = l0 ++ l0)
(merge l0 l = l0 ++ l), (merge l0 l = l0 ++ gv0), (merge l0 l = l ++ q), (merge l0 l = l ++ l0), (merge l0 l = l ++ l), (merge l0 l = l ++ gv0), (merge l0 l = gv0 ++ q), (merge l0 l = gv0 ++ l0), (merge l0 l = gv0 ++ l), (merge l0 l = gv0 ++ gv0)
(merge l0 gv0 = q), (merge l0 gv0 = l0), (merge l0 gv0 = l), (merge l0 gv0 = gv0), (merge l0 gv0 = insert k q), (merge l0 gv0 = insert k l0), (merge l0 gv0 = insert k l), (merge l0 gv0 = insert k gv0), (merge l0 gv0 = q ++ q), (merge l0 gv0 = q ++ l0)
(merge l0 gv0 = q ++ l), (merge l0 gv0 = q ++ gv0), (merge l0 gv0 = l0 ++ q), (merge l0 gv0 = l0 ++ l0), (merge l0 gv0 = l0 ++ l), (merge l0 gv0 = l0 ++ gv0), (merge l0 gv0 = l ++ q), (merge l0 gv0 = l ++ l0), (merge l0 gv0 = l ++ l), (merge l0 gv0 = l ++ gv0)
(merge l0 gv0 = gv0 ++ q), (merge l0 gv0 = gv0 ++ l0), (merge l0 gv0 = gv0 ++ l), (merge l0 gv0 = gv0 ++ gv0), (merge l q = q), (merge l q = l0), (merge l q = l), (merge l q = gv0), (merge l q = insert k q), (merge l q = insert k l0)
(merge l q = insert k l), (merge l q = insert k gv0), (merge l q = q ++ q), (merge l q = q ++ l0), (merge l q = q ++ l), (merge l q = q ++ gv0), (merge l q = l0 ++ q), (merge l q = l0 ++ l0), (merge l q = l0 ++ l), (merge l q = l0 ++ gv0)
(merge l q = l ++ q), (merge l q = l ++ l0), (merge l q = l ++ l), (merge l q = l ++ gv0), (merge l q = gv0 ++ q), (merge l q = gv0 ++ l0), (merge l q = gv0 ++ l), (merge l q = gv0 ++ gv0), (merge l l0 = q), (merge l l0 = l0)
(merge l l0 = l), (merge l l0 = gv0), (merge l l0 = insert k q), (merge l l0 = insert k l0), (merge l l0 = insert k l), (merge l l0 = insert k gv0), (merge l l0 = q ++ q), (merge l l0 = q ++ l0), (merge l l0 = q ++ l), (merge l l0 = q ++ gv0)
(merge l l0 = l0 ++ q), (merge l l0 = l0 ++ l0), (merge l l0 = l0 ++ l), (merge l l0 = l0 ++ gv0), (merge l l0 = l ++ q), (merge l l0 = l ++ l0), (merge l l0 = l ++ l), (merge l l0 = l ++ gv0), (merge l l0 = gv0 ++ q), (merge l l0 = gv0 ++ l0)
(merge l l0 = gv0 ++ l), (merge l l0 = gv0 ++ gv0), (merge l l = q), (merge l l = l0), (merge l l = l), (merge l l = gv0), (merge l l = insert k q), (merge l l = insert k l0), (merge l l = insert k l), (merge l l = insert k gv0)
(merge l l = q ++ q), (merge l l = q ++ l0), (merge l l = q ++ l), (merge l l = q ++ gv0), (merge l l = l0 ++ q), (merge l l = l0 ++ l0), (merge l l = l0 ++ l), (merge l l = l0 ++ gv0), (merge l l = l ++ q), (merge l l = l ++ l0)
(merge l l = l ++ l), (merge l l = l ++ gv0), (merge l l = gv0 ++ q), (merge l l = gv0 ++ l0), (merge l l = gv0 ++ l), (merge l l = gv0 ++ gv0), (merge l gv0 = q), (merge l gv0 = l0), (merge l gv0 = l), (merge l gv0 = gv0)
(merge l gv0 = insert k q), (merge l gv0 = insert k l0), (merge l gv0 = insert k l), (merge l gv0 = insert k gv0), (merge l gv0 = q ++ q), (merge l gv0 = q ++ l0), (merge l gv0 = q ++ l), (merge l gv0 = q ++ gv0), (merge l gv0 = l0 ++ q), (merge l gv0 = l0 ++ l0)
(merge l gv0 = l0 ++ l), (merge l gv0 = l0 ++ gv0), (merge l gv0 = l ++ q), (merge l gv0 = l ++ l0), (merge l gv0 = l ++ l), (merge l gv0 = l ++ gv0), (merge l gv0 = gv0 ++ q), (merge l gv0 = gv0 ++ l0), (merge l gv0 = gv0 ++ l), (merge l gv0 = gv0 ++ gv0)
(merge gv0 q = q), (merge gv0 q = l0), (merge gv0 q = l), (merge gv0 q = gv0), (merge gv0 q = insert k q), (merge gv0 q = insert k l0), (merge gv0 q = insert k l), (merge gv0 q = insert k gv0), (merge gv0 q = q ++ q), (merge gv0 q = q ++ l0)
(merge gv0 q = q ++ l), (merge gv0 q = q ++ gv0), (merge gv0 q = l0 ++ q), (merge gv0 q = l0 ++ l0), (merge gv0 q = l0 ++ l), (merge gv0 q = l0 ++ gv0), (merge gv0 q = l ++ q), (merge gv0 q = l ++ l0), (merge gv0 q = l ++ l), (merge gv0 q = l ++ gv0)
(merge gv0 q = gv0 ++ q), (merge gv0 q = gv0 ++ l0), (merge gv0 q = gv0 ++ l), (merge gv0 q = gv0 ++ gv0), (merge gv0 l0 = q), (merge gv0 l0 = l0), (merge gv0 l0 = l), (merge gv0 l0 = gv0), (merge gv0 l0 = insert k q), (merge gv0 l0 = insert k l0)
(merge gv0 l0 = insert k l), (merge gv0 l0 = insert k gv0), (merge gv0 l0 = q ++ q), (merge gv0 l0 = q ++ l0), (merge gv0 l0 = q ++ l), (merge gv0 l0 = q ++ gv0), (merge gv0 l0 = l0 ++ q), (merge gv0 l0 = l0 ++ l0), (merge gv0 l0 = l0 ++ l), (merge gv0 l0 = l0 ++ gv0)
(merge gv0 l0 = l ++ q), (merge gv0 l0 = l ++ l0), (merge gv0 l0 = l ++ l), (merge gv0 l0 = l ++ gv0), (merge gv0 l0 = gv0 ++ q), (merge gv0 l0 = gv0 ++ l0), (merge gv0 l0 = gv0 ++ l), (merge gv0 l0 = gv0 ++ gv0), (merge gv0 l = q), (merge gv0 l = l0)
(merge gv0 l = l), (merge gv0 l = gv0), (merge gv0 l = insert k q), (merge gv0 l = insert k l0), (merge gv0 l = insert k l), (merge gv0 l = insert k gv0), (merge gv0 l = q ++ q), (merge gv0 l = q ++ l0), (merge gv0 l = q ++ l), (merge gv0 l = q ++ gv0)
(merge gv0 l = l0 ++ q), (merge gv0 l = l0 ++ l0), (merge gv0 l = l0 ++ l), (merge gv0 l = l0 ++ gv0), (merge gv0 l = l ++ q), (merge gv0 l = l ++ l0), (merge gv0 l = l ++ l), (merge gv0 l = l ++ gv0), (merge gv0 l = gv0 ++ q), (merge gv0 l = gv0 ++ l0)
(merge gv0 l = gv0 ++ l), (merge gv0 l = gv0 ++ gv0), (merge gv0 gv0 = q), (merge gv0 gv0 = l0), (merge gv0 gv0 = l), (merge gv0 gv0 = gv0), (merge gv0 gv0 = insert k q), (merge gv0 gv0 = insert k l0), (merge gv0 gv0 = insert k l), (merge gv0 gv0 = insert k gv0)
(merge gv0 gv0 = q ++ q), (merge gv0 gv0 = q ++ l0), (merge gv0 gv0 = q ++ l), (merge gv0 gv0 = q ++ gv0), (merge gv0 gv0 = l0 ++ q), (merge gv0 gv0 = l0 ++ l0), (merge gv0 gv0 = l0 ++ l), (merge gv0 gv0 = l0 ++ gv0), (merge gv0 gv0 = l ++ q), (merge gv0 gv0 = l ++ l0)
(merge gv0 gv0 = l ++ l), (merge gv0 gv0 = l ++ gv0), (merge gv0 gv0 = gv0 ++ q), (merge gv0 gv0 = gv0 ++ l0), (merge gv0 gv0 = gv0 ++ l), (merge gv0 gv0 = gv0 ++ gv0), (insert k q = q), (insert k q = l0), (insert k q = l), (insert k q = gv0)
(insert k q = q ++ q), (insert k q = q ++ l0), (insert k q = q ++ l), (insert k q = q ++ gv0), (insert k q = l0 ++ q), (insert k q = l0 ++ l0), (insert k q = l0 ++ l), (insert k q = l0 ++ gv0), (insert k q = l ++ q), (insert k q = l ++ l0)
(insert k q = l ++ l), (insert k q = l ++ gv0), (insert k q = gv0 ++ q), (insert k q = gv0 ++ l0), (insert k q = gv0 ++ l), (insert k q = gv0 ++ gv0), (insert k l0 = q), (insert k l0 = l0), (insert k l0 = l), (insert k l0 = gv0)
(insert k l0 = q ++ q), (insert k l0 = q ++ l0), (insert k l0 = q ++ l), (insert k l0 = q ++ gv0), (insert k l0 = l0 ++ q), (insert k l0 = l0 ++ l0), (insert k l0 = l0 ++ l), (insert k l0 = l0 ++ gv0), (insert k l0 = l ++ q), (insert k l0 = l ++ l0)
(insert k l0 = l ++ l), (insert k l0 = l ++ gv0), (insert k l0 = gv0 ++ q), (insert k l0 = gv0 ++ l0), (insert k l0 = gv0 ++ l), (insert k l0 = gv0 ++ gv0), (insert k l = q), (insert k l = l0), (insert k l = l), (insert k l = gv0)
(insert k l = q ++ q), (insert k l = q ++ l0), (insert k l = q ++ l), (insert k l = q ++ gv0), (insert k l = l0 ++ q), (insert k l = l0 ++ l0), (insert k l = l0 ++ l), (insert k l = l0 ++ gv0), (insert k l = l ++ q), (insert k l = l ++ l0)
(insert k l = l ++ l), (insert k l = l ++ gv0), (insert k l = gv0 ++ q), (insert k l = gv0 ++ l0), (insert k l = gv0 ++ l), (insert k l = gv0 ++ gv0), (insert k gv0 = q), (insert k gv0 = l0), (insert k gv0 = l), (insert k gv0 = gv0)
(insert k gv0 = q ++ q), (insert k gv0 = q ++ l0), (insert k gv0 = q ++ l), (insert k gv0 = q ++ gv0), (insert k gv0 = l0 ++ q), (insert k gv0 = l0 ++ l0), (insert k gv0 = l0 ++ l), (insert k gv0 = l0 ++ gv0), (insert k gv0 = l ++ q), (insert k gv0 = l ++ l0)
(insert k gv0 = l ++ l), (insert k gv0 = l ++ gv0), (insert k gv0 = gv0 ++ q), (insert k gv0 = gv0 ++ l0), (insert k gv0 = gv0 ++ l), (insert k gv0 = gv0 ++ gv0), (q ++ q = q), (q ++ q = l0), (q ++ q = l), (q ++ q = gv0)
(q ++ l0 = q), (q ++ l0 = l0), (q ++ l0 = l), (q ++ l0 = gv0), (q ++ l = q), (q ++ l = l0), (q ++ l = l), (q ++ l = gv0), (q ++ gv0 = q), (q ++ gv0 = l0)
(q ++ gv0 = l), (q ++ gv0 = gv0), (l0 ++ q = q), (l0 ++ q = l0), (l0 ++ q = l), (l0 ++ q = gv0), (l0 ++ l0 = q), (l0 ++ l0 = l0), (l0 ++ l0 = l), (l0 ++ l0 = gv0)
(l0 ++ l = q), (l0 ++ l = l0), (l0 ++ l = l), (l0 ++ l = gv0), (l0 ++ gv0 = q), (l0 ++ gv0 = l0), (l0 ++ gv0 = l), (l0 ++ gv0 = gv0), (l ++ q = q), (l ++ q = l0)
(l ++ q = l), (l ++ q = gv0), (l ++ l0 = q), (l ++ l0 = l0), (l ++ l0 = l), (l ++ l0 = gv0), (l ++ l = q), (l ++ l = l0), (l ++ l = l), (l ++ l = gv0)
(l ++ gv0 = q), (l ++ gv0 = l0), (l ++ gv0 = l), (l ++ gv0 = gv0), (gv0 ++ q = q), (gv0 ++ q = l0), (gv0 ++ q = l), (gv0 ++ q = gv0), (gv0 ++ l0 = q), (gv0 ++ l0 = l0)
(gv0 ++ l0 = l), (gv0 ++ l0 = gv0), (gv0 ++ l = q), (gv0 ++ l = l0), (gv0 ++ l = l), (gv0 ++ l = gv0), (gv0 ++ gv0 = q), (gv0 ++ gv0 = l0), (gv0 ++ gv0 = l), (gv0 ++ gv0 = gv0)
([] = q), ([] = l0), ([] = l), ([] = gv0), ([] = merge q q), ([] = merge q l0), ([] = merge q l), ([] = merge q gv0), ([] = merge l0 q), ([] = merge l0 l0)
([] = merge l0 l), ([] = merge l0 gv0), ([] = merge l q), ([] = merge l l0), ([] = merge l l), ([] = merge l gv0), ([] = merge gv0 q), ([] = merge gv0 l0), ([] = merge gv0 l), ([] = merge gv0 gv0)
([] = insert k q), ([] = insert k l0), ([] = insert k l), ([] = insert k gv0), ([] = q ++ q), ([] = q ++ l0), ([] = q ++ l), ([] = q ++ gv0), ([] = l0 ++ q), ([] = l0 ++ l0)
([] = l0 ++ l), ([] = l0 ++ gv0), ([] = l ++ q), ([] = l ++ l0), ([] = l ++ l), ([] = l ++ gv0), ([] = gv0 ++ q), ([] = gv0 ++ l0), ([] = gv0 ++ l), ([] = gv0 ++ gv0)
((q, q) = delete_max_aux k q), ((q, q) = delete_max_aux k l0), ((q, q) = delete_max_aux k l), ((q, q) = delete_max_aux k gv0), ((q, l0) = delete_max_aux k q), ((q, l0) = delete_max_aux k l0), ((q, l0) = delete_max_aux k l), ((q, l0) = delete_max_aux k gv0), ((q, l) = delete_max_aux k q), ((q, l) = delete_max_aux k l0)
((q, l) = delete_max_aux k l), ((q, l) = delete_max_aux k gv0), ((q, gv0) = delete_max_aux k q), ((q, gv0) = delete_max_aux k l0), ((q, gv0) = delete_max_aux k l), ((q, gv0) = delete_max_aux k gv0), ((l0, q) = delete_max_aux k q), ((l0, q) = delete_max_aux k l0), ((l0, q) = delete_max_aux k l), ((l0, q) = delete_max_aux k gv0)
((l0, l0) = delete_max_aux k q), ((l0, l0) = delete_max_aux k l0), ((l0, l0) = delete_max_aux k l), ((l0, l0) = delete_max_aux k gv0), ((l0, l) = delete_max_aux k q), ((l0, l) = delete_max_aux k l0), ((l0, l) = delete_max_aux k l), ((l0, l) = delete_max_aux k gv0), ((l0, gv0) = delete_max_aux k q), ((l0, gv0) = delete_max_aux k l0)
((l0, gv0) = delete_max_aux k l), ((l0, gv0) = delete_max_aux k gv0), ((l, q) = delete_max_aux k q), ((l, q) = delete_max_aux k l0), ((l, q) = delete_max_aux k l), ((l, q) = delete_max_aux k gv0), ((l, l0) = delete_max_aux k q), ((l, l0) = delete_max_aux k l0), ((l, l0) = delete_max_aux k l), ((l, l0) = delete_max_aux k gv0)
((l, l) = delete_max_aux k q), ((l, l) = delete_max_aux k l0), ((l, l) = delete_max_aux k l), ((l, l) = delete_max_aux k gv0), ((l, gv0) = delete_max_aux k q), ((l, gv0) = delete_max_aux k l0), ((l, gv0) = delete_max_aux k l), ((l, gv0) = delete_max_aux k gv0), ((gv0, q) = delete_max_aux k q), ((gv0, q) = delete_max_aux k l0)
((gv0, q) = delete_max_aux k l), ((gv0, q) = delete_max_aux k gv0), ((gv0, l0) = delete_max_aux k q), ((gv0, l0) = delete_max_aux k l0), ((gv0, l0) = delete_max_aux k l), ((gv0, l0) = delete_max_aux k gv0), ((gv0, l) = delete_max_aux k q), ((gv0, l) = delete_max_aux k l0), ((gv0, l) = delete_max_aux k l), ((gv0, l) = delete_max_aux k gv0)
((gv0, gv0) = delete_max_aux k q), ((gv0, gv0) = delete_max_aux k l0), ((gv0, gv0) = delete_max_aux k l), ((gv0, gv0) = delete_max_aux k gv0), (find_max' k q = k), (find_max' k l0 = k), (find_max' k l = k), (find_max' k gv0 = k), (length q = k), (length q = find_max' k q)
(length q = find_max' k l0), (length q = find_max' k l), (length q = find_max' k gv0), (length l0 = k), (length l0 = find_max' k q), (length l0 = find_max' k l0), (length l0 = find_max' k l), (length l0 = find_max' k gv0), (length l = k), (length l = find_max' k q)
(length l = find_max' k l0), (length l = find_max' k l), (length l = find_max' k gv0), (length gv0 = k), (length gv0 = find_max' k q), (length gv0 = find_max' k l0), (length gv0 = find_max' k l), (length gv0 = find_max' k gv0), (Some k = find_max q), (Some k = find_max l0)
(Some k = find_max l), (Some k = find_max gv0), (None = Some k), (None = find_max q), (None = find_max l0), (None = find_max l), (None = find_max gv0), ((k >? k) = (k >=? k))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 197.458 seconds


Label: 0 (0)
(priq (merge l0 l)), (priq (merge l l0)), (Permutation q (merge l0 l)), (Permutation q (merge l l0)), (Permutation (merge l0 l) q), (Permutation (merge l l0) q), (merge l0 l = q), (merge l l0 = q)

Label: 1 (1)
(priq q), (priq gv0), (priq (merge q q)), (priq (insert k q)), (priq (merge q gv0)), (priq (merge gv0 q)), (priq (insert k gv0)), (priq (merge gv0 gv0)), (Permutation q (merge l0 l)), (Permutation q (merge l l0))
(Permutation (merge l0 l) q), (Permutation (merge l l0) q), (Permutation gv0 (merge l0 l)), (Permutation gv0 (merge l l0)), (Permutation (merge l0 l) gv0), (Permutation (merge l l0) gv0), (merge l0 l = q), (merge l l0 = q), (merge l0 l = gv0), (merge l l0 = gv0)


------------------------------ ALL RESULTS ------------------------------
1. (Some (k, join l l0 gv1) = Some (k, q) -> Leaf = gv1 -> priq (join l l0 gv1))

2. (Some (k, join l l0 Leaf) = Some (k, q) -> priq (join l l0 Leaf))

3. (merge l l0 = join l l0 Leaf)

4. (Some (k, join l l0 Leaf) = Some (k, q) -> priq (merge l0 l))
(priq (merge l0 l) -> priq (join l l0 Leaf))

5. (Some (k, join l l0 Leaf) = Some (k, q) -> merge l0 l = q)
(merge l0 l = q -> priq (join l l0 Leaf))

6. (Some (k, join l l0 Leaf) = Some (k, q) -> merge l l0 = q)
(merge l l0 = q -> priq (join l l0 Leaf))

7. (priq q -> Some (k, gv0) = Some (k, q) -> priq gv0)

8. (priq (merge q q) -> Some (k, gv0) = Some (k, q) -> priq gv0)

9. (priq (insert k q) -> Some (k, gv0) = Some (k, q) -> priq gv0)

10. (priq (merge q gv0) -> Some (k, gv0) = Some (k, q) -> priq gv0)

11. (priq (merge gv0 q) -> Some (k, gv0) = Some (k, q) -> priq gv0)

12. (priq (insert k gv0) -> Some (k, gv0) = Some (k, q) -> priq gv0)

13. (priq (merge gv0 gv0) -> Some (k, gv0) = Some (k, q) -> priq gv0)

14. (Permutation q (merge l0 l) -> Some (k, gv0) = Some (k, q) -> priq gv0)

15. (Permutation q (merge l l0) -> Some (k, gv0) = Some (k, q) -> priq gv0)

16. (Permutation (merge l0 l) q -> Some (k, gv0) = Some (k, q) -> priq gv0)

17. (Permutation (merge l l0) q -> Some (k, gv0) = Some (k, q) -> priq gv0)

18. (Permutation gv0 (merge l0 l) -> Some (k, gv0) = Some (k, q) -> priq gv0)

19. (Permutation gv0 (merge l l0) -> Some (k, gv0) = Some (k, q) -> priq gv0)

20. (Permutation (merge l0 l) gv0 -> Some (k, gv0) = Some (k, q) -> priq gv0)

21. (Permutation (merge l l0) gv0 -> Some (k, gv0) = Some (k, q) -> priq gv0)

22. (merge l0 l = q -> Some (k, gv0) = Some (k, q) -> priq gv0)

23. (merge l l0 = q -> Some (k, gv0) = Some (k, q) -> priq gv0)

24. (merge l0 l = gv0 -> Some (k, gv0) = Some (k, q) -> priq gv0)

25. (merge l l0 = gv0 -> Some (k, gv0) = Some (k, q) -> priq gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 288.547 seconds

Number of Result Pairs Returned: 25

1. (Some (k, join l l0 gv1) = Some (k, q) -> Leaf = gv1 -> priq (join l l0 gv1))

2. (merge l l0 = join l l0 Leaf)

3. (priq q -> Some (k, gv0) = Some (k, q) -> priq gv0)

4. (priq (insert k q) -> Some (k, gv0) = Some (k, q) -> priq gv0)

5. (priq (merge gv0 q) -> Some (k, gv0) = Some (k, q) -> priq gv0)
