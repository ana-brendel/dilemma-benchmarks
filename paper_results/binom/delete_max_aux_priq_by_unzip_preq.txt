Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (n m : nat) (q q' : list tree),
 priqq n p -> delete_max_aux m p = (q, q') -> priqq n q /\ priq q')
 -- (Leaf :: p = q)
 -- (unzip a1 (fun u : list tree => u) = q')
 -- (priqq n (Node n0 a1 Leaf :: p))

----------------------------------
Goal: (priq (unzip a1 (fun u : list tree => u)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.59 seconds

gv0 : (list tree) = (unzip a1 (fun u : list tree => u))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 91.67 seconds

Label: Generalization #0
Assumptions: 
 -- (priqq n (Node n0 a1 Leaf :: p))

----------------------------------
Goal: (priq (unzip a1 (fun u : list tree => u)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (unzip a1 (fun u : list tree => u) = gv0)
 -- (priqq n (Node n0 a1 Leaf :: p))

----------------------------------
Goal: (priq gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 91.801 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqq n (Node n0 a1 Leaf :: p))
Positive Examples: 44
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 71
Negative Examples: 89


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 92.161 seconds


Label: 0 (0)
(priq p), (priqq n0 p), (priqq n p), (pow2heap n0 a1), (pow2heap n a1), (pow2heapp n0 n0 a1), (pow2heapp n0 n a1), (pow2heapp n n0 a1), (pow2heapp n n a1), (Permutation p p)
(In a1 p), (n0 < n0), (n0 < n), (n < n0), (n < n), (n0 <= n0), (n0 <= n), (n <= n0), (n <= n), (p = p)
(n0 = n0), (n0 = n), (n = n0), (n = n), (a1 = a1), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n0)), (false = (n >? n)), (false = (n0 >=? n0))
(false = (n0 >=? n)), (false = (n >=? n0)), (false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n0)), (true = (n >? n)), (true = (n0 >=? n0)), (true = (n0 >=? n)), (true = (n >=? n0))
(true = (n >=? n)), (Abs p []), (Abs (a1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max a1) []), (Abs (join p p a1) []), (Abs (insert n0 p) []), (Abs (insert n p) []), (Abs (carry p a1) []), (Abs (p ++ p) [])
(Abs [] []), (priqueue_elems p []), (priqueue_elems (a1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join p p a1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p a1) []), (priqueue_elems (p ++ p) [])
(priqueue_elems [] []), (tree_elems a1 []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n a1 a1) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf []), (priq (a1 :: p)), (priq (merge p p)), (priq (heap_delete_max a1)), (priq (join p p a1))
(priq (insert n0 p)), (priq (insert n p)), (priq (carry p a1)), (priq (p ++ p)), (priqq n0 (a1 :: p)), (priqq n0 (merge p p)), (priqq n0 (heap_delete_max a1)), (priqq n0 (join p p a1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n p))
(priqq n0 (carry p a1)), (priqq n0 (p ++ p)), (priqq n (a1 :: p)), (priqq n (merge p p)), (priqq n (heap_delete_max a1)), (priqq n (join p p a1)), (priqq n (insert n0 p)), (priqq n (insert n p)), (priqq n (carry p a1)), (priqq n (p ++ p))
(priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n p) p)
(priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (a1 :: p))
(priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (join p p a1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p a1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (smash a1 a1))
(pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n a1 a1))
(pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (length p) a1), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (smash a1 a1)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n0 a1 a1))
(pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1))
(pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n a1 a1))
(pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 Leaf), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 a1))
(pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) a1), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (smash a1 a1))
(pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 a1))
(pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 a1))
(pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 a1))
(pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n a1), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (smash a1 a1))
(pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 a1))
(pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a1)), (Permutation p (join p p a1))
(Permutation p (insert n0 p)), (Permutation p (insert n p)), (Permutation p (carry p a1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (insert n0 p))
(Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n p))
(Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p a1))
(Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (p ++ p))
(Permutation (join p p a1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) [])
(Permutation (insert n p) p), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p a1) p)
(Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a1 :: p))
(Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (insert n0 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a1 :: p)), (Permutation [] (merge p p))
(Permutation [] (heap_delete_max a1)), (Permutation [] (join p p a1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n p)), (Permutation [] (carry p a1)), (Permutation [] (p ++ p)), (In a1 (a1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max a1)), (In a1 (join p p a1))
(In a1 (insert n0 p)), (In a1 (insert n p)), (In a1 (carry p a1)), (In a1 (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (insert n0 p))
(In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n p))
(In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p a1))
(In (smash a1 a1) (p ++ p)), (In Leaf p), (In Leaf (a1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a1)), (In Leaf (join p p a1)), (In Leaf (insert n0 p)), (In Leaf (insert n p)), (In Leaf (carry p a1)), (In Leaf (p ++ p))
(n0 < find_max' n0 p), (n0 < find_max' n p), (n0 < length p), (n < find_max' n0 p), (n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p)
(find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < length p), (length p < n0), (length p < n), (length p < find_max' n0 p), (length p < find_max' n p), (n0 <= find_max' n0 p), (n0 <= find_max' n p)
(n0 <= length p), (n <= find_max' n0 p), (n <= find_max' n p), (n <= length p), (find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n p <= n0), (find_max' n p <= n)
(find_max' n p <= find_max' n0 p), (find_max' n p <= length p), (length p <= n0), (length p <= n), (length p <= find_max' n0 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n p), (~ pow2heap n0 a1)
(~ pow2heap n a1), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n a1), (~ pow2heapp n n0 a1), (~ pow2heapp n n a1), (~ Permutation p p), (~ In a1 p), (~ n0 < n0), (~ n0 < n), (~ n < n0)
(~ n < n), (~ n0 <= n0), (~ n0 <= n), (~ n <= n0), (~ n <= n), (p <> p), (n0 <> n0), (n0 <> n), (n <> n0), (n <> n)
(a1 <> a1), (None = Some p), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max a1), (a1 :: p = join p p a1), (a1 :: p = insert n0 p), (a1 :: p = insert n p), (a1 :: p = carry p a1), (a1 :: p = p ++ p)
(a1 :: p = []), (merge p p = p), (merge p p = heap_delete_max a1), (merge p p = join p p a1), (merge p p = insert n0 p), (merge p p = insert n p), (merge p p = carry p a1), (merge p p = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p a1)
(heap_delete_max a1 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max a1), (join p p a1 = insert n0 p), (join p p a1 = insert n p), (join p p a1 = carry p a1), (join p p a1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max a1), (insert n0 p = carry p a1)
(insert n0 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max a1), (insert n p = carry p a1), (insert n p = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p)
([] = heap_delete_max a1), ([] = join p p a1), ([] = insert n0 p), ([] = insert n p), ([] = carry p a1), ([] = p ++ p), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n p), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = smash a1 a1)
(Node n a1 a1 = a1), (Node n a1 a1 = smash a1 a1), (smash a1 a1 = a1), (Leaf = Node n0 a1 a1), (Leaf = Node n a1 a1), (Leaf = smash a1 a1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n p = n0), (find_max' n p = n)
(length p = n0), (length p = n), (length p = find_max' n0 p), (length p = find_max' n p), (Some n0 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n), (None = find_max p), (None = Some a1)
((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n))
((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))

Label: 1 (1)
(priq p), (priq gv0), (priqq n0 p), (priqq n0 gv0), (priqq n p), (priqq n gv0), (pow2heap n0 a1), (pow2heap n a1), (pow2heapp n0 n0 a1), (pow2heapp n0 n a1)
(pow2heapp n n0 a1), (pow2heapp n n a1), (Permutation p p), (Permutation p gv0), (Permutation gv0 p), (Permutation gv0 gv0), (In a1 p), (In a1 gv0), (n0 < n0), (n0 < n)
(n < n0), (n < n), (n0 <= n0), (n0 <= n), (n <= n0), (n <= n), (a1 = a1), (n0 = n0), (n0 = n), (n = n0)
(n = n), (p = p), (p = gv0), (gv0 = p), (gv0 = gv0), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n0)), (false = (n >? n)), (false = (n0 >=? n0))
(false = (n0 >=? n)), (false = (n >=? n0)), (false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n0)), (true = (n >? n)), (true = (n0 >=? n0)), (true = (n0 >=? n)), (true = (n >=? n0))
(true = (n >=? n)), (Abs p []), (Abs gv0 []), (Abs (a1 :: p) []), (Abs (a1 :: gv0) []), (Abs (merge p p) []), (Abs (merge p gv0) []), (Abs (merge gv0 p) []), (Abs (merge gv0 gv0) []), (Abs (heap_delete_max a1) [])
(Abs (join p p a1) []), (Abs (join p gv0 a1) []), (Abs (join gv0 p a1) []), (Abs (join gv0 gv0 a1) []), (Abs (insert n0 p) []), (Abs (insert n0 gv0) []), (Abs (insert n p) []), (Abs (insert n gv0) []), (Abs (carry p a1) []), (Abs (carry gv0 a1) [])
(Abs (p ++ p) []), (Abs (p ++ gv0) []), (Abs (gv0 ++ p) []), (Abs (gv0 ++ gv0) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems gv0 []), (priqueue_elems (a1 :: p) []), (priqueue_elems (a1 :: gv0) []), (priqueue_elems (merge p p) [])
(priqueue_elems (merge p gv0) []), (priqueue_elems (merge gv0 p) []), (priqueue_elems (merge gv0 gv0) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p gv0 a1) []), (priqueue_elems (join gv0 p a1) []), (priqueue_elems (join gv0 gv0 a1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n0 gv0) [])
(priqueue_elems (insert n p) []), (priqueue_elems (insert n gv0) []), (priqueue_elems (carry p a1) []), (priqueue_elems (carry gv0 a1) []), (priqueue_elems (p ++ p) []), (priqueue_elems (p ++ gv0) []), (priqueue_elems (gv0 ++ p) []), (priqueue_elems (gv0 ++ gv0) []), (priqueue_elems [] []), (tree_elems a1 [])
(tree_elems (Node n0 a1 a1) []), (tree_elems (Node n a1 a1) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf []), (priq (a1 :: p)), (priq (a1 :: gv0)), (priq (merge p p)), (priq (merge p gv0)), (priq (merge gv0 p)), (priq (merge gv0 gv0))
(priq (heap_delete_max a1)), (priq (join p p a1)), (priq (join p gv0 a1)), (priq (join gv0 p a1)), (priq (join gv0 gv0 a1)), (priq (insert n0 p)), (priq (insert n0 gv0)), (priq (insert n p)), (priq (insert n gv0)), (priq (carry p a1))
(priq (carry gv0 a1)), (priq (p ++ p)), (priq (p ++ gv0)), (priq (gv0 ++ p)), (priq (gv0 ++ gv0)), (priqq n0 (a1 :: p)), (priqq n0 (a1 :: gv0)), (priqq n0 (merge p p)), (priqq n0 (merge p gv0)), (priqq n0 (merge gv0 p))
(priqq n0 (merge gv0 gv0)), (priqq n0 (heap_delete_max a1)), (priqq n0 (join p p a1)), (priqq n0 (join p gv0 a1)), (priqq n0 (join gv0 p a1)), (priqq n0 (join gv0 gv0 a1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n0 gv0)), (priqq n0 (insert n p)), (priqq n0 (insert n gv0))
(priqq n0 (carry p a1)), (priqq n0 (carry gv0 a1)), (priqq n0 (p ++ p)), (priqq n0 (p ++ gv0)), (priqq n0 (gv0 ++ p)), (priqq n0 (gv0 ++ gv0)), (priqq n (a1 :: p)), (priqq n (a1 :: gv0)), (priqq n (merge p p)), (priqq n (merge p gv0))
(priqq n (merge gv0 p)), (priqq n (merge gv0 gv0)), (priqq n (heap_delete_max a1)), (priqq n (join p p a1)), (priqq n (join p gv0 a1)), (priqq n (join gv0 p a1)), (priqq n (join gv0 gv0 a1)), (priqq n (insert n0 p)), (priqq n (insert n0 gv0)), (priqq n (insert n p))
(priqq n (insert n gv0)), (priqq n (carry p a1)), (priqq n (carry gv0 a1)), (priqq n (p ++ p)), (priqq n (p ++ gv0)), (priqq n (gv0 ++ p)), (priqq n (gv0 ++ gv0)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) gv0), (priqq (find_max' n0 p) (a1 :: p))
(priqq (find_max' n0 p) (a1 :: gv0)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (merge p gv0)), (priqq (find_max' n0 p) (merge gv0 p)), (priqq (find_max' n0 p) (merge gv0 gv0)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p gv0 a1)), (priqq (find_max' n0 p) (join gv0 p a1)), (priqq (find_max' n0 p) (join gv0 gv0 a1))
(priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n0 gv0)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (insert n gv0)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry gv0 a1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n0 p) (p ++ gv0)), (priqq (find_max' n0 p) (gv0 ++ p)), (priqq (find_max' n0 p) (gv0 ++ gv0))
(priqq (find_max' n0 gv0) p), (priqq (find_max' n0 gv0) gv0), (priqq (find_max' n0 gv0) (a1 :: p)), (priqq (find_max' n0 gv0) (a1 :: gv0)), (priqq (find_max' n0 gv0) (merge p p)), (priqq (find_max' n0 gv0) (merge p gv0)), (priqq (find_max' n0 gv0) (merge gv0 p)), (priqq (find_max' n0 gv0) (merge gv0 gv0)), (priqq (find_max' n0 gv0) (heap_delete_max a1)), (priqq (find_max' n0 gv0) (join p p a1))
(priqq (find_max' n0 gv0) (join p gv0 a1)), (priqq (find_max' n0 gv0) (join gv0 p a1)), (priqq (find_max' n0 gv0) (join gv0 gv0 a1)), (priqq (find_max' n0 gv0) (insert n0 p)), (priqq (find_max' n0 gv0) (insert n0 gv0)), (priqq (find_max' n0 gv0) (insert n p)), (priqq (find_max' n0 gv0) (insert n gv0)), (priqq (find_max' n0 gv0) (carry p a1)), (priqq (find_max' n0 gv0) (carry gv0 a1)), (priqq (find_max' n0 gv0) (p ++ p))
(priqq (find_max' n0 gv0) (p ++ gv0)), (priqq (find_max' n0 gv0) (gv0 ++ p)), (priqq (find_max' n0 gv0) (gv0 ++ gv0)), (priqq (find_max' n p) p), (priqq (find_max' n p) gv0), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (a1 :: gv0)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (merge p gv0)), (priqq (find_max' n p) (merge gv0 p))
(priqq (find_max' n p) (merge gv0 gv0)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p gv0 a1)), (priqq (find_max' n p) (join gv0 p a1)), (priqq (find_max' n p) (join gv0 gv0 a1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n0 gv0)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (insert n gv0))
(priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry gv0 a1)), (priqq (find_max' n p) (p ++ p)), (priqq (find_max' n p) (p ++ gv0)), (priqq (find_max' n p) (gv0 ++ p)), (priqq (find_max' n p) (gv0 ++ gv0)), (priqq (find_max' n gv0) p), (priqq (find_max' n gv0) gv0), (priqq (find_max' n gv0) (a1 :: p)), (priqq (find_max' n gv0) (a1 :: gv0))
(priqq (find_max' n gv0) (merge p p)), (priqq (find_max' n gv0) (merge p gv0)), (priqq (find_max' n gv0) (merge gv0 p)), (priqq (find_max' n gv0) (merge gv0 gv0)), (priqq (find_max' n gv0) (heap_delete_max a1)), (priqq (find_max' n gv0) (join p p a1)), (priqq (find_max' n gv0) (join p gv0 a1)), (priqq (find_max' n gv0) (join gv0 p a1)), (priqq (find_max' n gv0) (join gv0 gv0 a1)), (priqq (find_max' n gv0) (insert n0 p))
(priqq (find_max' n gv0) (insert n0 gv0)), (priqq (find_max' n gv0) (insert n p)), (priqq (find_max' n gv0) (insert n gv0)), (priqq (find_max' n gv0) (carry p a1)), (priqq (find_max' n gv0) (carry gv0 a1)), (priqq (find_max' n gv0) (p ++ p)), (priqq (find_max' n gv0) (p ++ gv0)), (priqq (find_max' n gv0) (gv0 ++ p)), (priqq (find_max' n gv0) (gv0 ++ gv0)), (priqq (length p) p)
(priqq (length p) gv0), (priqq (length p) (a1 :: p)), (priqq (length p) (a1 :: gv0)), (priqq (length p) (merge p p)), (priqq (length p) (merge p gv0)), (priqq (length p) (merge gv0 p)), (priqq (length p) (merge gv0 gv0)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (join p p a1)), (priqq (length p) (join p gv0 a1))
(priqq (length p) (join gv0 p a1)), (priqq (length p) (join gv0 gv0 a1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n0 gv0)), (priqq (length p) (insert n p)), (priqq (length p) (insert n gv0)), (priqq (length p) (carry p a1)), (priqq (length p) (carry gv0 a1)), (priqq (length p) (p ++ p)), (priqq (length p) (p ++ gv0))
(priqq (length p) (gv0 ++ p)), (priqq (length p) (gv0 ++ gv0)), (priqq (length gv0) p), (priqq (length gv0) gv0), (priqq (length gv0) (a1 :: p)), (priqq (length gv0) (a1 :: gv0)), (priqq (length gv0) (merge p p)), (priqq (length gv0) (merge p gv0)), (priqq (length gv0) (merge gv0 p)), (priqq (length gv0) (merge gv0 gv0))
(priqq (length gv0) (heap_delete_max a1)), (priqq (length gv0) (join p p a1)), (priqq (length gv0) (join p gv0 a1)), (priqq (length gv0) (join gv0 p a1)), (priqq (length gv0) (join gv0 gv0 a1)), (priqq (length gv0) (insert n0 p)), (priqq (length gv0) (insert n0 gv0)), (priqq (length gv0) (insert n p)), (priqq (length gv0) (insert n gv0)), (priqq (length gv0) (carry p a1))
(priqq (length gv0) (carry gv0 a1)), (priqq (length gv0) (p ++ p)), (priqq (length gv0) (p ++ gv0)), (priqq (length gv0) (gv0 ++ p)), (priqq (length gv0) (gv0 ++ gv0)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (smash a1 a1)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n a1 a1))
(pow2heap n (smash a1 a1)), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 gv0) a1), (pow2heap (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heap (find_max' n0 gv0) (Node n a1 a1)), (pow2heap (find_max' n0 gv0) (smash a1 a1)), (pow2heap (find_max' n p) a1)
(pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (find_max' n gv0) a1), (pow2heap (find_max' n gv0) (Node n0 a1 a1)), (pow2heap (find_max' n gv0) (Node n a1 a1)), (pow2heap (find_max' n gv0) (smash a1 a1)), (pow2heap (length p) a1), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n a1 a1))
(pow2heap (length p) (smash a1 a1)), (pow2heap (length gv0) a1), (pow2heap (length gv0) (Node n0 a1 a1)), (pow2heap (length gv0) (Node n a1 a1)), (pow2heap (length gv0) (smash a1 a1)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n0 a1 a1))
(pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n0 gv0) a1), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a1 a1))
(pow2heapp n0 (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 gv0) (smash a1 a1)), (pow2heapp n0 (find_max' n0 gv0) Leaf), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (find_max' n gv0) a1), (pow2heapp n0 (find_max' n gv0) (Node n0 a1 a1))
(pow2heapp n0 (find_max' n gv0) (Node n a1 a1)), (pow2heapp n0 (find_max' n gv0) (smash a1 a1)), (pow2heapp n0 (find_max' n gv0) Leaf), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n0 (length gv0) a1), (pow2heapp n0 (length gv0) (Node n0 a1 a1))
(pow2heapp n0 (length gv0) (Node n a1 a1)), (pow2heapp n0 (length gv0) (smash a1 a1)), (pow2heapp n0 (length gv0) Leaf), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 Leaf), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash a1 a1))
(pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n0 gv0) a1), (pow2heapp n (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp n (find_max' n0 gv0) (smash a1 a1))
(pow2heapp n (find_max' n0 gv0) Leaf), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (find_max' n gv0) a1), (pow2heapp n (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp n (find_max' n gv0) (Node n a1 a1)), (pow2heapp n (find_max' n gv0) (smash a1 a1))
(pow2heapp n (find_max' n gv0) Leaf), (pow2heapp n (length p) a1), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) Leaf), (pow2heapp n (length gv0) a1), (pow2heapp n (length gv0) (Node n0 a1 a1)), (pow2heapp n (length gv0) (Node n a1 a1)), (pow2heapp n (length gv0) (smash a1 a1))
(pow2heapp n (length gv0) Leaf), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 a1))
(pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) a1), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n gv0) a1), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n gv0) Leaf), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n0 p) (length gv0) a1), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length gv0) (smash a1 a1))
(pow2heapp (find_max' n0 p) (length gv0) Leaf), (pow2heapp (find_max' n0 gv0) n0 a1), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) n0 (smash a1 a1)), (pow2heapp (find_max' n0 gv0) n0 Leaf), (pow2heapp (find_max' n0 gv0) n a1), (pow2heapp (find_max' n0 gv0) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) n (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) n (smash a1 a1))
(pow2heapp (find_max' n0 gv0) n Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) a1), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) a1), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n p) a1), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) a1), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a1 a1))
(pow2heapp (find_max' n0 gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n0 gv0) (length p) a1), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) Leaf), (pow2heapp (find_max' n0 gv0) (length gv0) a1), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a1 a1))
(pow2heapp (find_max' n0 gv0) (length gv0) Leaf), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (smash a1 a1))
(pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n0 gv0) a1), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (find_max' n gv0) a1), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a1 a1))
(pow2heapp (find_max' n p) (find_max' n gv0) Leaf), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (find_max' n p) (length gv0) a1), (pow2heapp (find_max' n p) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (length gv0) (smash a1 a1))
(pow2heapp (find_max' n p) (length gv0) Leaf), (pow2heapp (find_max' n gv0) n0 a1), (pow2heapp (find_max' n gv0) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) n0 (Node n a1 a1)), (pow2heapp (find_max' n gv0) n0 (smash a1 a1)), (pow2heapp (find_max' n gv0) n0 Leaf), (pow2heapp (find_max' n gv0) n a1), (pow2heapp (find_max' n gv0) n (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) n (Node n a1 a1)), (pow2heapp (find_max' n gv0) n (smash a1 a1))
(pow2heapp (find_max' n gv0) n Leaf), (pow2heapp (find_max' n gv0) (find_max' n0 p) a1), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) Leaf), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) a1), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (find_max' n gv0) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n gv0) (find_max' n p) a1), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) Leaf), (pow2heapp (find_max' n gv0) (find_max' n gv0) a1), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a1 a1))
(pow2heapp (find_max' n gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n gv0) (length p) a1), (pow2heapp (find_max' n gv0) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (length p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (length p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (length p) Leaf), (pow2heapp (find_max' n gv0) (length gv0) a1), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (length gv0) (smash a1 a1))
(pow2heapp (find_max' n gv0) (length gv0) Leaf), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n a1), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (smash a1 a1))
(pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n0 gv0) a1), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (length p) (find_max' n0 gv0) Leaf), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (find_max' n gv0) a1), (pow2heapp (length p) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (length p) (find_max' n gv0) (smash a1 a1))
(pow2heapp (length p) (find_max' n gv0) Leaf), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) Leaf), (pow2heapp (length p) (length gv0) a1), (pow2heapp (length p) (length gv0) (Node n0 a1 a1)), (pow2heapp (length p) (length gv0) (Node n a1 a1)), (pow2heapp (length p) (length gv0) (smash a1 a1))
(pow2heapp (length p) (length gv0) Leaf), (pow2heapp (length gv0) n0 a1), (pow2heapp (length gv0) n0 (Node n0 a1 a1)), (pow2heapp (length gv0) n0 (Node n a1 a1)), (pow2heapp (length gv0) n0 (smash a1 a1)), (pow2heapp (length gv0) n0 Leaf), (pow2heapp (length gv0) n a1), (pow2heapp (length gv0) n (Node n0 a1 a1)), (pow2heapp (length gv0) n (Node n a1 a1)), (pow2heapp (length gv0) n (smash a1 a1))
(pow2heapp (length gv0) n Leaf), (pow2heapp (length gv0) (find_max' n0 p) a1), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length gv0) (find_max' n0 p) Leaf), (pow2heapp (length gv0) (find_max' n0 gv0) a1), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (length gv0) (find_max' n0 gv0) Leaf), (pow2heapp (length gv0) (find_max' n p) a1), (pow2heapp (length gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n p) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (length gv0) (find_max' n p) Leaf), (pow2heapp (length gv0) (find_max' n gv0) a1), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n gv0) (smash a1 a1))
(pow2heapp (length gv0) (find_max' n gv0) Leaf), (pow2heapp (length gv0) (length p) a1), (pow2heapp (length gv0) (length p) (Node n0 a1 a1)), (pow2heapp (length gv0) (length p) (Node n a1 a1)), (pow2heapp (length gv0) (length p) (smash a1 a1)), (pow2heapp (length gv0) (length p) Leaf), (pow2heapp (length gv0) (length gv0) a1), (pow2heapp (length gv0) (length gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (length gv0) (Node n a1 a1)), (pow2heapp (length gv0) (length gv0) (smash a1 a1))
(pow2heapp (length gv0) (length gv0) Leaf), (Permutation p (a1 :: p)), (Permutation p (a1 :: gv0)), (Permutation p (merge p p)), (Permutation p (merge p gv0)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 gv0)), (Permutation p (heap_delete_max a1)), (Permutation p (join p p a1)), (Permutation p (join p gv0 a1))
(Permutation p (join gv0 p a1)), (Permutation p (join gv0 gv0 a1)), (Permutation p (insert n0 p)), (Permutation p (insert n0 gv0)), (Permutation p (insert n p)), (Permutation p (insert n gv0)), (Permutation p (carry p a1)), (Permutation p (carry gv0 a1)), (Permutation p (p ++ p)), (Permutation p (p ++ gv0))
(Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ gv0)), (Permutation p []), (Permutation gv0 (a1 :: p)), (Permutation gv0 (a1 :: gv0)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p gv0)), (Permutation gv0 (merge gv0 p)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (heap_delete_max a1))
(Permutation gv0 (join p p a1)), (Permutation gv0 (join p gv0 a1)), (Permutation gv0 (join gv0 p a1)), (Permutation gv0 (join gv0 gv0 a1)), (Permutation gv0 (insert n0 p)), (Permutation gv0 (insert n0 gv0)), (Permutation gv0 (insert n p)), (Permutation gv0 (insert n gv0)), (Permutation gv0 (carry p a1)), (Permutation gv0 (carry gv0 a1))
(Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (gv0 ++ p)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) gv0), (Permutation (a1 :: p) (a1 :: gv0)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (merge p gv0))
(Permutation (a1 :: p) (merge gv0 p)), (Permutation (a1 :: p) (merge gv0 gv0)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p gv0 a1)), (Permutation (a1 :: p) (join gv0 p a1)), (Permutation (a1 :: p) (join gv0 gv0 a1)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n0 gv0)), (Permutation (a1 :: p) (insert n p))
(Permutation (a1 :: p) (insert n gv0)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry gv0 a1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) (p ++ gv0)), (Permutation (a1 :: p) (gv0 ++ p)), (Permutation (a1 :: p) (gv0 ++ gv0)), (Permutation (a1 :: p) []), (Permutation (a1 :: gv0) p), (Permutation (a1 :: gv0) gv0)
(Permutation (a1 :: gv0) (a1 :: p)), (Permutation (a1 :: gv0) (merge p p)), (Permutation (a1 :: gv0) (merge p gv0)), (Permutation (a1 :: gv0) (merge gv0 p)), (Permutation (a1 :: gv0) (merge gv0 gv0)), (Permutation (a1 :: gv0) (heap_delete_max a1)), (Permutation (a1 :: gv0) (join p p a1)), (Permutation (a1 :: gv0) (join p gv0 a1)), (Permutation (a1 :: gv0) (join gv0 p a1)), (Permutation (a1 :: gv0) (join gv0 gv0 a1))
(Permutation (a1 :: gv0) (insert n0 p)), (Permutation (a1 :: gv0) (insert n0 gv0)), (Permutation (a1 :: gv0) (insert n p)), (Permutation (a1 :: gv0) (insert n gv0)), (Permutation (a1 :: gv0) (carry p a1)), (Permutation (a1 :: gv0) (carry gv0 a1)), (Permutation (a1 :: gv0) (p ++ p)), (Permutation (a1 :: gv0) (p ++ gv0)), (Permutation (a1 :: gv0) (gv0 ++ p)), (Permutation (a1 :: gv0) (gv0 ++ gv0))
(Permutation (a1 :: gv0) []), (Permutation (merge p p) p), (Permutation (merge p p) gv0), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (a1 :: gv0)), (Permutation (merge p p) (merge p gv0)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (join p p a1))
(Permutation (merge p p) (join p gv0 a1)), (Permutation (merge p p) (join gv0 p a1)), (Permutation (merge p p) (join gv0 gv0 a1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n0 gv0)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (insert n gv0)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry gv0 a1)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) []), (Permutation (merge p gv0) p), (Permutation (merge p gv0) gv0), (Permutation (merge p gv0) (a1 :: p)), (Permutation (merge p gv0) (a1 :: gv0)), (Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge gv0 p))
(Permutation (merge p gv0) (merge gv0 gv0)), (Permutation (merge p gv0) (heap_delete_max a1)), (Permutation (merge p gv0) (join p p a1)), (Permutation (merge p gv0) (join p gv0 a1)), (Permutation (merge p gv0) (join gv0 p a1)), (Permutation (merge p gv0) (join gv0 gv0 a1)), (Permutation (merge p gv0) (insert n0 p)), (Permutation (merge p gv0) (insert n0 gv0)), (Permutation (merge p gv0) (insert n p)), (Permutation (merge p gv0) (insert n gv0))
(Permutation (merge p gv0) (carry p a1)), (Permutation (merge p gv0) (carry gv0 a1)), (Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ gv0)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) []), (Permutation (merge gv0 p) p), (Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) (a1 :: p))
(Permutation (merge gv0 p) (a1 :: gv0)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p gv0)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (heap_delete_max a1)), (Permutation (merge gv0 p) (join p p a1)), (Permutation (merge gv0 p) (join p gv0 a1)), (Permutation (merge gv0 p) (join gv0 p a1)), (Permutation (merge gv0 p) (join gv0 gv0 a1)), (Permutation (merge gv0 p) (insert n0 p))
(Permutation (merge gv0 p) (insert n0 gv0)), (Permutation (merge gv0 p) (insert n p)), (Permutation (merge gv0 p) (insert n gv0)), (Permutation (merge gv0 p) (carry p a1)), (Permutation (merge gv0 p) (carry gv0 a1)), (Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) [])
(Permutation (merge gv0 gv0) p), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (a1 :: p)), (Permutation (merge gv0 gv0) (a1 :: gv0)), (Permutation (merge gv0 gv0) (merge p p)), (Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (heap_delete_max a1)), (Permutation (merge gv0 gv0) (join p p a1)), (Permutation (merge gv0 gv0) (join p gv0 a1))
(Permutation (merge gv0 gv0) (join gv0 p a1)), (Permutation (merge gv0 gv0) (join gv0 gv0 a1)), (Permutation (merge gv0 gv0) (insert n0 p)), (Permutation (merge gv0 gv0) (insert n0 gv0)), (Permutation (merge gv0 gv0) (insert n p)), (Permutation (merge gv0 gv0) (insert n gv0)), (Permutation (merge gv0 gv0) (carry p a1)), (Permutation (merge gv0 gv0) (carry gv0 a1)), (Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ gv0))
(Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) gv0), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (a1 :: gv0)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (merge p gv0)), (Permutation (heap_delete_max a1) (merge gv0 p))
(Permutation (heap_delete_max a1) (merge gv0 gv0)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p gv0 a1)), (Permutation (heap_delete_max a1) (join gv0 p a1)), (Permutation (heap_delete_max a1) (join gv0 gv0 a1)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n0 gv0)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (insert n gv0)), (Permutation (heap_delete_max a1) (carry p a1))
(Permutation (heap_delete_max a1) (carry gv0 a1)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) (p ++ gv0)), (Permutation (heap_delete_max a1) (gv0 ++ p)), (Permutation (heap_delete_max a1) (gv0 ++ gv0)), (Permutation (heap_delete_max a1) []), (Permutation (join p p a1) p), (Permutation (join p p a1) gv0), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (a1 :: gv0))
(Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (merge p gv0)), (Permutation (join p p a1) (merge gv0 p)), (Permutation (join p p a1) (merge gv0 gv0)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (join p gv0 a1)), (Permutation (join p p a1) (join gv0 p a1)), (Permutation (join p p a1) (join gv0 gv0 a1)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n0 gv0))
(Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (insert n gv0)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry gv0 a1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) (p ++ gv0)), (Permutation (join p p a1) (gv0 ++ p)), (Permutation (join p p a1) (gv0 ++ gv0)), (Permutation (join p p a1) []), (Permutation (join p gv0 a1) p)
(Permutation (join p gv0 a1) gv0), (Permutation (join p gv0 a1) (a1 :: p)), (Permutation (join p gv0 a1) (a1 :: gv0)), (Permutation (join p gv0 a1) (merge p p)), (Permutation (join p gv0 a1) (merge p gv0)), (Permutation (join p gv0 a1) (merge gv0 p)), (Permutation (join p gv0 a1) (merge gv0 gv0)), (Permutation (join p gv0 a1) (heap_delete_max a1)), (Permutation (join p gv0 a1) (join p p a1)), (Permutation (join p gv0 a1) (join gv0 p a1))
(Permutation (join p gv0 a1) (join gv0 gv0 a1)), (Permutation (join p gv0 a1) (insert n0 p)), (Permutation (join p gv0 a1) (insert n0 gv0)), (Permutation (join p gv0 a1) (insert n p)), (Permutation (join p gv0 a1) (insert n gv0)), (Permutation (join p gv0 a1) (carry p a1)), (Permutation (join p gv0 a1) (carry gv0 a1)), (Permutation (join p gv0 a1) (p ++ p)), (Permutation (join p gv0 a1) (p ++ gv0)), (Permutation (join p gv0 a1) (gv0 ++ p))
(Permutation (join p gv0 a1) (gv0 ++ gv0)), (Permutation (join p gv0 a1) []), (Permutation (join gv0 p a1) p), (Permutation (join gv0 p a1) gv0), (Permutation (join gv0 p a1) (a1 :: p)), (Permutation (join gv0 p a1) (a1 :: gv0)), (Permutation (join gv0 p a1) (merge p p)), (Permutation (join gv0 p a1) (merge p gv0)), (Permutation (join gv0 p a1) (merge gv0 p)), (Permutation (join gv0 p a1) (merge gv0 gv0))
(Permutation (join gv0 p a1) (heap_delete_max a1)), (Permutation (join gv0 p a1) (join p p a1)), (Permutation (join gv0 p a1) (join p gv0 a1)), (Permutation (join gv0 p a1) (join gv0 gv0 a1)), (Permutation (join gv0 p a1) (insert n0 p)), (Permutation (join gv0 p a1) (insert n0 gv0)), (Permutation (join gv0 p a1) (insert n p)), (Permutation (join gv0 p a1) (insert n gv0)), (Permutation (join gv0 p a1) (carry p a1)), (Permutation (join gv0 p a1) (carry gv0 a1))
(Permutation (join gv0 p a1) (p ++ p)), (Permutation (join gv0 p a1) (p ++ gv0)), (Permutation (join gv0 p a1) (gv0 ++ p)), (Permutation (join gv0 p a1) (gv0 ++ gv0)), (Permutation (join gv0 p a1) []), (Permutation (join gv0 gv0 a1) p), (Permutation (join gv0 gv0 a1) gv0), (Permutation (join gv0 gv0 a1) (a1 :: p)), (Permutation (join gv0 gv0 a1) (a1 :: gv0)), (Permutation (join gv0 gv0 a1) (merge p p))
(Permutation (join gv0 gv0 a1) (merge p gv0)), (Permutation (join gv0 gv0 a1) (merge gv0 p)), (Permutation (join gv0 gv0 a1) (merge gv0 gv0)), (Permutation (join gv0 gv0 a1) (heap_delete_max a1)), (Permutation (join gv0 gv0 a1) (join p p a1)), (Permutation (join gv0 gv0 a1) (join p gv0 a1)), (Permutation (join gv0 gv0 a1) (join gv0 p a1)), (Permutation (join gv0 gv0 a1) (insert n0 p)), (Permutation (join gv0 gv0 a1) (insert n0 gv0)), (Permutation (join gv0 gv0 a1) (insert n p))
(Permutation (join gv0 gv0 a1) (insert n gv0)), (Permutation (join gv0 gv0 a1) (carry p a1)), (Permutation (join gv0 gv0 a1) (carry gv0 a1)), (Permutation (join gv0 gv0 a1) (p ++ p)), (Permutation (join gv0 gv0 a1) (p ++ gv0)), (Permutation (join gv0 gv0 a1) (gv0 ++ p)), (Permutation (join gv0 gv0 a1) (gv0 ++ gv0)), (Permutation (join gv0 gv0 a1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) gv0)
(Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (a1 :: gv0)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (merge p gv0)), (Permutation (insert n0 p) (merge gv0 p)), (Permutation (insert n0 p) (merge gv0 gv0)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p gv0 a1)), (Permutation (insert n0 p) (join gv0 p a1))
(Permutation (insert n0 p) (join gv0 gv0 a1)), (Permutation (insert n0 p) (insert n0 gv0)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (insert n gv0)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry gv0 a1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) (p ++ gv0)), (Permutation (insert n0 p) (gv0 ++ p)), (Permutation (insert n0 p) (gv0 ++ gv0))
(Permutation (insert n0 p) []), (Permutation (insert n0 gv0) p), (Permutation (insert n0 gv0) gv0), (Permutation (insert n0 gv0) (a1 :: p)), (Permutation (insert n0 gv0) (a1 :: gv0)), (Permutation (insert n0 gv0) (merge p p)), (Permutation (insert n0 gv0) (merge p gv0)), (Permutation (insert n0 gv0) (merge gv0 p)), (Permutation (insert n0 gv0) (merge gv0 gv0)), (Permutation (insert n0 gv0) (heap_delete_max a1))
(Permutation (insert n0 gv0) (join p p a1)), (Permutation (insert n0 gv0) (join p gv0 a1)), (Permutation (insert n0 gv0) (join gv0 p a1)), (Permutation (insert n0 gv0) (join gv0 gv0 a1)), (Permutation (insert n0 gv0) (insert n0 p)), (Permutation (insert n0 gv0) (insert n p)), (Permutation (insert n0 gv0) (insert n gv0)), (Permutation (insert n0 gv0) (carry p a1)), (Permutation (insert n0 gv0) (carry gv0 a1)), (Permutation (insert n0 gv0) (p ++ p))
(Permutation (insert n0 gv0) (p ++ gv0)), (Permutation (insert n0 gv0) (gv0 ++ p)), (Permutation (insert n0 gv0) (gv0 ++ gv0)), (Permutation (insert n0 gv0) []), (Permutation (insert n p) p), (Permutation (insert n p) gv0), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (a1 :: gv0)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (merge p gv0))
(Permutation (insert n p) (merge gv0 p)), (Permutation (insert n p) (merge gv0 gv0)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p gv0 a1)), (Permutation (insert n p) (join gv0 p a1)), (Permutation (insert n p) (join gv0 gv0 a1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (insert n0 gv0)), (Permutation (insert n p) (insert n gv0))
(Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry gv0 a1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) (p ++ gv0)), (Permutation (insert n p) (gv0 ++ p)), (Permutation (insert n p) (gv0 ++ gv0)), (Permutation (insert n p) []), (Permutation (insert n gv0) p), (Permutation (insert n gv0) gv0), (Permutation (insert n gv0) (a1 :: p))
(Permutation (insert n gv0) (a1 :: gv0)), (Permutation (insert n gv0) (merge p p)), (Permutation (insert n gv0) (merge p gv0)), (Permutation (insert n gv0) (merge gv0 p)), (Permutation (insert n gv0) (merge gv0 gv0)), (Permutation (insert n gv0) (heap_delete_max a1)), (Permutation (insert n gv0) (join p p a1)), (Permutation (insert n gv0) (join p gv0 a1)), (Permutation (insert n gv0) (join gv0 p a1)), (Permutation (insert n gv0) (join gv0 gv0 a1))
(Permutation (insert n gv0) (insert n0 p)), (Permutation (insert n gv0) (insert n0 gv0)), (Permutation (insert n gv0) (insert n p)), (Permutation (insert n gv0) (carry p a1)), (Permutation (insert n gv0) (carry gv0 a1)), (Permutation (insert n gv0) (p ++ p)), (Permutation (insert n gv0) (p ++ gv0)), (Permutation (insert n gv0) (gv0 ++ p)), (Permutation (insert n gv0) (gv0 ++ gv0)), (Permutation (insert n gv0) [])
(Permutation (carry p a1) p), (Permutation (carry p a1) gv0), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (a1 :: gv0)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (merge p gv0)), (Permutation (carry p a1) (merge gv0 p)), (Permutation (carry p a1) (merge gv0 gv0)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (join p p a1))
(Permutation (carry p a1) (join p gv0 a1)), (Permutation (carry p a1) (join gv0 p a1)), (Permutation (carry p a1) (join gv0 gv0 a1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n0 gv0)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (insert n gv0)), (Permutation (carry p a1) (carry gv0 a1)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) (p ++ gv0))
(Permutation (carry p a1) (gv0 ++ p)), (Permutation (carry p a1) (gv0 ++ gv0)), (Permutation (carry p a1) []), (Permutation (carry gv0 a1) p), (Permutation (carry gv0 a1) gv0), (Permutation (carry gv0 a1) (a1 :: p)), (Permutation (carry gv0 a1) (a1 :: gv0)), (Permutation (carry gv0 a1) (merge p p)), (Permutation (carry gv0 a1) (merge p gv0)), (Permutation (carry gv0 a1) (merge gv0 p))
(Permutation (carry gv0 a1) (merge gv0 gv0)), (Permutation (carry gv0 a1) (heap_delete_max a1)), (Permutation (carry gv0 a1) (join p p a1)), (Permutation (carry gv0 a1) (join p gv0 a1)), (Permutation (carry gv0 a1) (join gv0 p a1)), (Permutation (carry gv0 a1) (join gv0 gv0 a1)), (Permutation (carry gv0 a1) (insert n0 p)), (Permutation (carry gv0 a1) (insert n0 gv0)), (Permutation (carry gv0 a1) (insert n p)), (Permutation (carry gv0 a1) (insert n gv0))
(Permutation (carry gv0 a1) (carry p a1)), (Permutation (carry gv0 a1) (p ++ p)), (Permutation (carry gv0 a1) (p ++ gv0)), (Permutation (carry gv0 a1) (gv0 ++ p)), (Permutation (carry gv0 a1) (gv0 ++ gv0)), (Permutation (carry gv0 a1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) gv0), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (a1 :: gv0))
(Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p gv0 a1)), (Permutation (p ++ p) (join gv0 p a1)), (Permutation (p ++ p) (join gv0 gv0 a1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n0 gv0)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (insert n gv0)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry gv0 a1)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) []), (Permutation (p ++ gv0) p)
(Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) (a1 :: p)), (Permutation (p ++ gv0) (a1 :: gv0)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 gv0)), (Permutation (p ++ gv0) (heap_delete_max a1)), (Permutation (p ++ gv0) (join p p a1)), (Permutation (p ++ gv0) (join p gv0 a1))
(Permutation (p ++ gv0) (join gv0 p a1)), (Permutation (p ++ gv0) (join gv0 gv0 a1)), (Permutation (p ++ gv0) (insert n0 p)), (Permutation (p ++ gv0) (insert n0 gv0)), (Permutation (p ++ gv0) (insert n p)), (Permutation (p ++ gv0) (insert n gv0)), (Permutation (p ++ gv0) (carry p a1)), (Permutation (p ++ gv0) (carry gv0 a1)), (Permutation (p ++ gv0) (p ++ p)), (Permutation (p ++ gv0) (gv0 ++ p))
(Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) []), (Permutation (gv0 ++ p) p), (Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) (a1 :: p)), (Permutation (gv0 ++ p) (a1 :: gv0)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 gv0))
(Permutation (gv0 ++ p) (heap_delete_max a1)), (Permutation (gv0 ++ p) (join p p a1)), (Permutation (gv0 ++ p) (join p gv0 a1)), (Permutation (gv0 ++ p) (join gv0 p a1)), (Permutation (gv0 ++ p) (join gv0 gv0 a1)), (Permutation (gv0 ++ p) (insert n0 p)), (Permutation (gv0 ++ p) (insert n0 gv0)), (Permutation (gv0 ++ p) (insert n p)), (Permutation (gv0 ++ p) (insert n gv0)), (Permutation (gv0 ++ p) (carry p a1))
(Permutation (gv0 ++ p) (carry gv0 a1)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ gv0) p), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a1 :: p)), (Permutation (gv0 ++ gv0) (a1 :: gv0)), (Permutation (gv0 ++ gv0) (merge p p))
(Permutation (gv0 ++ gv0) (merge p gv0)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (heap_delete_max a1)), (Permutation (gv0 ++ gv0) (join p p a1)), (Permutation (gv0 ++ gv0) (join p gv0 a1)), (Permutation (gv0 ++ gv0) (join gv0 p a1)), (Permutation (gv0 ++ gv0) (join gv0 gv0 a1)), (Permutation (gv0 ++ gv0) (insert n0 p)), (Permutation (gv0 ++ gv0) (insert n0 gv0))
(Permutation (gv0 ++ gv0) (insert n p)), (Permutation (gv0 ++ gv0) (insert n gv0)), (Permutation (gv0 ++ gv0) (carry p a1)), (Permutation (gv0 ++ gv0) (carry gv0 a1)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) []), (Permutation [] p), (Permutation [] gv0)
(Permutation [] (a1 :: p)), (Permutation [] (a1 :: gv0)), (Permutation [] (merge p p)), (Permutation [] (merge p gv0)), (Permutation [] (merge gv0 p)), (Permutation [] (merge gv0 gv0)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join p p a1)), (Permutation [] (join p gv0 a1)), (Permutation [] (join gv0 p a1))
(Permutation [] (join gv0 gv0 a1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n0 gv0)), (Permutation [] (insert n p)), (Permutation [] (insert n gv0)), (Permutation [] (carry p a1)), (Permutation [] (carry gv0 a1)), (Permutation [] (p ++ p)), (Permutation [] (p ++ gv0)), (Permutation [] (gv0 ++ p))
(Permutation [] (gv0 ++ gv0)), (In a1 (a1 :: p)), (In a1 (a1 :: gv0)), (In a1 (merge p p)), (In a1 (merge p gv0)), (In a1 (merge gv0 p)), (In a1 (merge gv0 gv0)), (In a1 (heap_delete_max a1)), (In a1 (join p p a1)), (In a1 (join p gv0 a1))
(In a1 (join gv0 p a1)), (In a1 (join gv0 gv0 a1)), (In a1 (insert n0 p)), (In a1 (insert n0 gv0)), (In a1 (insert n p)), (In a1 (insert n gv0)), (In a1 (carry p a1)), (In a1 (carry gv0 a1)), (In a1 (p ++ p)), (In a1 (p ++ gv0))
(In a1 (gv0 ++ p)), (In a1 (gv0 ++ gv0)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) gv0), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (a1 :: gv0)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (merge p gv0)), (In (Node n0 a1 a1) (merge gv0 p)), (In (Node n0 a1 a1) (merge gv0 gv0))
(In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p gv0 a1)), (In (Node n0 a1 a1) (join gv0 p a1)), (In (Node n0 a1 a1) (join gv0 gv0 a1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n0 gv0)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (insert n gv0)), (In (Node n0 a1 a1) (carry p a1))
(In (Node n0 a1 a1) (carry gv0 a1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 a1) (p ++ gv0)), (In (Node n0 a1 a1) (gv0 ++ p)), (In (Node n0 a1 a1) (gv0 ++ gv0)), (In (Node n a1 a1) p), (In (Node n a1 a1) gv0), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (a1 :: gv0)), (In (Node n a1 a1) (merge p p))
(In (Node n a1 a1) (merge p gv0)), (In (Node n a1 a1) (merge gv0 p)), (In (Node n a1 a1) (merge gv0 gv0)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p gv0 a1)), (In (Node n a1 a1) (join gv0 p a1)), (In (Node n a1 a1) (join gv0 gv0 a1)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n0 gv0))
(In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (insert n gv0)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry gv0 a1)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 a1) (p ++ gv0)), (In (Node n a1 a1) (gv0 ++ p)), (In (Node n a1 a1) (gv0 ++ gv0)), (In (smash a1 a1) p), (In (smash a1 a1) gv0)
(In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (a1 :: gv0)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (merge p gv0)), (In (smash a1 a1) (merge gv0 p)), (In (smash a1 a1) (merge gv0 gv0)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p gv0 a1)), (In (smash a1 a1) (join gv0 p a1))
(In (smash a1 a1) (join gv0 gv0 a1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n0 gv0)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (insert n gv0)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry gv0 a1)), (In (smash a1 a1) (p ++ p)), (In (smash a1 a1) (p ++ gv0)), (In (smash a1 a1) (gv0 ++ p))
(In (smash a1 a1) (gv0 ++ gv0)), (In Leaf p), (In Leaf gv0), (In Leaf (a1 :: p)), (In Leaf (a1 :: gv0)), (In Leaf (merge p p)), (In Leaf (merge p gv0)), (In Leaf (merge gv0 p)), (In Leaf (merge gv0 gv0)), (In Leaf (heap_delete_max a1))
(In Leaf (join p p a1)), (In Leaf (join p gv0 a1)), (In Leaf (join gv0 p a1)), (In Leaf (join gv0 gv0 a1)), (In Leaf (insert n0 p)), (In Leaf (insert n0 gv0)), (In Leaf (insert n p)), (In Leaf (insert n gv0)), (In Leaf (carry p a1)), (In Leaf (carry gv0 a1))
(In Leaf (p ++ p)), (In Leaf (p ++ gv0)), (In Leaf (gv0 ++ p)), (In Leaf (gv0 ++ gv0)), (n0 < find_max' n0 p), (n0 < find_max' n0 gv0), (n0 < find_max' n p), (n0 < find_max' n gv0), (n0 < length p), (n0 < length gv0)
(n < find_max' n0 p), (n < find_max' n0 gv0), (n < find_max' n p), (n < find_max' n gv0), (n < length p), (n < length gv0), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n0 gv0), (find_max' n0 p < find_max' n p)
(find_max' n0 p < find_max' n gv0), (find_max' n0 p < length p), (find_max' n0 p < length gv0), (find_max' n0 gv0 < n0), (find_max' n0 gv0 < n), (find_max' n0 gv0 < find_max' n0 p), (find_max' n0 gv0 < find_max' n p), (find_max' n0 gv0 < find_max' n gv0), (find_max' n0 gv0 < length p), (find_max' n0 gv0 < length gv0)
(find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < find_max' n0 gv0), (find_max' n p < find_max' n gv0), (find_max' n p < length p), (find_max' n p < length gv0), (find_max' n gv0 < n0), (find_max' n gv0 < n), (find_max' n gv0 < find_max' n0 p)
(find_max' n gv0 < find_max' n0 gv0), (find_max' n gv0 < find_max' n p), (find_max' n gv0 < length p), (find_max' n gv0 < length gv0), (length p < n0), (length p < n), (length p < find_max' n0 p), (length p < find_max' n0 gv0), (length p < find_max' n p), (length p < find_max' n gv0)
(length p < length gv0), (length gv0 < n0), (length gv0 < n), (length gv0 < find_max' n0 p), (length gv0 < find_max' n0 gv0), (length gv0 < find_max' n p), (length gv0 < find_max' n gv0), (length gv0 < length p), (n0 <= find_max' n0 p), (n0 <= find_max' n0 gv0)
(n0 <= find_max' n p), (n0 <= find_max' n gv0), (n0 <= length p), (n0 <= length gv0), (n <= find_max' n0 p), (n <= find_max' n0 gv0), (n <= find_max' n p), (n <= find_max' n gv0), (n <= length p), (n <= length gv0)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n0 gv0), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= find_max' n gv0), (find_max' n0 p <= length p), (find_max' n0 p <= length gv0), (find_max' n0 gv0 <= n0), (find_max' n0 gv0 <= n), (find_max' n0 gv0 <= find_max' n0 p)
(find_max' n0 gv0 <= find_max' n p), (find_max' n0 gv0 <= find_max' n gv0), (find_max' n0 gv0 <= length p), (find_max' n0 gv0 <= length gv0), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n0 gv0), (find_max' n p <= find_max' n gv0), (find_max' n p <= length p)
(find_max' n p <= length gv0), (find_max' n gv0 <= n0), (find_max' n gv0 <= n), (find_max' n gv0 <= find_max' n0 p), (find_max' n gv0 <= find_max' n0 gv0), (find_max' n gv0 <= find_max' n p), (find_max' n gv0 <= length p), (find_max' n gv0 <= length gv0), (length p <= n0), (length p <= n)
(length p <= find_max' n0 p), (length p <= find_max' n0 gv0), (length p <= find_max' n p), (length p <= find_max' n gv0), (length p <= length gv0), (length gv0 <= n0), (length gv0 <= n), (length gv0 <= find_max' n0 p), (length gv0 <= find_max' n0 gv0), (length gv0 <= find_max' n p)
(length gv0 <= find_max' n gv0), (length gv0 <= length p), (~ priq p), (~ priq gv0), (~ priqq n0 p), (~ priqq n0 gv0), (~ priqq n p), (~ priqq n gv0), (~ pow2heap n0 a1), (~ pow2heap n a1)
(~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n a1), (~ pow2heapp n n0 a1), (~ pow2heapp n n a1), (~ Permutation p p), (~ Permutation p gv0), (~ Permutation gv0 p), (~ Permutation gv0 gv0), (~ In a1 p), (~ In a1 gv0)
(~ n0 < n0), (~ n0 < n), (~ n < n0), (~ n < n), (~ n0 <= n0), (~ n0 <= n), (~ n <= n0), (~ n <= n), (a1 <> a1), (n0 <> n0)
(n0 <> n), (n <> n0), (n <> n), (p <> p), (p <> gv0), (gv0 <> p), (gv0 <> gv0), (None = Some p), (None = Some gv0), (a1 :: p = p)
(a1 :: p = gv0), (a1 :: p = merge p p), (a1 :: p = merge p gv0), (a1 :: p = merge gv0 p), (a1 :: p = merge gv0 gv0), (a1 :: p = heap_delete_max a1), (a1 :: p = join p p a1), (a1 :: p = join p gv0 a1), (a1 :: p = join gv0 p a1), (a1 :: p = join gv0 gv0 a1)
(a1 :: p = insert n0 p), (a1 :: p = insert n0 gv0), (a1 :: p = insert n p), (a1 :: p = insert n gv0), (a1 :: p = carry p a1), (a1 :: p = carry gv0 a1), (a1 :: p = p ++ p), (a1 :: p = p ++ gv0), (a1 :: p = gv0 ++ p), (a1 :: p = gv0 ++ gv0)
(a1 :: p = []), (a1 :: gv0 = p), (a1 :: gv0 = gv0), (a1 :: gv0 = merge p p), (a1 :: gv0 = merge p gv0), (a1 :: gv0 = merge gv0 p), (a1 :: gv0 = merge gv0 gv0), (a1 :: gv0 = heap_delete_max a1), (a1 :: gv0 = join p p a1), (a1 :: gv0 = join p gv0 a1)
(a1 :: gv0 = join gv0 p a1), (a1 :: gv0 = join gv0 gv0 a1), (a1 :: gv0 = insert n0 p), (a1 :: gv0 = insert n0 gv0), (a1 :: gv0 = insert n p), (a1 :: gv0 = insert n gv0), (a1 :: gv0 = carry p a1), (a1 :: gv0 = carry gv0 a1), (a1 :: gv0 = p ++ p), (a1 :: gv0 = p ++ gv0)
(a1 :: gv0 = gv0 ++ p), (a1 :: gv0 = gv0 ++ gv0), (a1 :: gv0 = []), (merge p p = p), (merge p p = gv0), (merge p p = heap_delete_max a1), (merge p p = join p p a1), (merge p p = join p gv0 a1), (merge p p = join gv0 p a1), (merge p p = join gv0 gv0 a1)
(merge p p = insert n0 p), (merge p p = insert n0 gv0), (merge p p = insert n p), (merge p p = insert n gv0), (merge p p = carry p a1), (merge p p = carry gv0 a1), (merge p p = p ++ p), (merge p p = p ++ gv0), (merge p p = gv0 ++ p), (merge p p = gv0 ++ gv0)
(merge p gv0 = p), (merge p gv0 = gv0), (merge p gv0 = heap_delete_max a1), (merge p gv0 = join p p a1), (merge p gv0 = join p gv0 a1), (merge p gv0 = join gv0 p a1), (merge p gv0 = join gv0 gv0 a1), (merge p gv0 = insert n0 p), (merge p gv0 = insert n0 gv0), (merge p gv0 = insert n p)
(merge p gv0 = insert n gv0), (merge p gv0 = carry p a1), (merge p gv0 = carry gv0 a1), (merge p gv0 = p ++ p), (merge p gv0 = p ++ gv0), (merge p gv0 = gv0 ++ p), (merge p gv0 = gv0 ++ gv0), (merge gv0 p = p), (merge gv0 p = gv0), (merge gv0 p = heap_delete_max a1)
(merge gv0 p = join p p a1), (merge gv0 p = join p gv0 a1), (merge gv0 p = join gv0 p a1), (merge gv0 p = join gv0 gv0 a1), (merge gv0 p = insert n0 p), (merge gv0 p = insert n0 gv0), (merge gv0 p = insert n p), (merge gv0 p = insert n gv0), (merge gv0 p = carry p a1), (merge gv0 p = carry gv0 a1)
(merge gv0 p = p ++ p), (merge gv0 p = p ++ gv0), (merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ gv0), (merge gv0 gv0 = p), (merge gv0 gv0 = gv0), (merge gv0 gv0 = heap_delete_max a1), (merge gv0 gv0 = join p p a1), (merge gv0 gv0 = join p gv0 a1), (merge gv0 gv0 = join gv0 p a1)
(merge gv0 gv0 = join gv0 gv0 a1), (merge gv0 gv0 = insert n0 p), (merge gv0 gv0 = insert n0 gv0), (merge gv0 gv0 = insert n p), (merge gv0 gv0 = insert n gv0), (merge gv0 gv0 = carry p a1), (merge gv0 gv0 = carry gv0 a1), (merge gv0 gv0 = p ++ p), (merge gv0 gv0 = p ++ gv0), (merge gv0 gv0 = gv0 ++ p)
(merge gv0 gv0 = gv0 ++ gv0), (heap_delete_max a1 = p), (heap_delete_max a1 = gv0), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry gv0 a1), (heap_delete_max a1 = p ++ p), (heap_delete_max a1 = p ++ gv0), (heap_delete_max a1 = gv0 ++ p), (heap_delete_max a1 = gv0 ++ gv0), (join p p a1 = p)
(join p p a1 = gv0), (join p p a1 = heap_delete_max a1), (join p p a1 = insert n0 p), (join p p a1 = insert n0 gv0), (join p p a1 = insert n p), (join p p a1 = insert n gv0), (join p p a1 = carry p a1), (join p p a1 = carry gv0 a1), (join p p a1 = p ++ p), (join p p a1 = p ++ gv0)
(join p p a1 = gv0 ++ p), (join p p a1 = gv0 ++ gv0), (join p gv0 a1 = p), (join p gv0 a1 = gv0), (join p gv0 a1 = heap_delete_max a1), (join p gv0 a1 = insert n0 p), (join p gv0 a1 = insert n0 gv0), (join p gv0 a1 = insert n p), (join p gv0 a1 = insert n gv0), (join p gv0 a1 = carry p a1)
(join p gv0 a1 = carry gv0 a1), (join p gv0 a1 = p ++ p), (join p gv0 a1 = p ++ gv0), (join p gv0 a1 = gv0 ++ p), (join p gv0 a1 = gv0 ++ gv0), (join gv0 p a1 = p), (join gv0 p a1 = gv0), (join gv0 p a1 = heap_delete_max a1), (join gv0 p a1 = insert n0 p), (join gv0 p a1 = insert n0 gv0)
(join gv0 p a1 = insert n p), (join gv0 p a1 = insert n gv0), (join gv0 p a1 = carry p a1), (join gv0 p a1 = carry gv0 a1), (join gv0 p a1 = p ++ p), (join gv0 p a1 = p ++ gv0), (join gv0 p a1 = gv0 ++ p), (join gv0 p a1 = gv0 ++ gv0), (join gv0 gv0 a1 = p), (join gv0 gv0 a1 = gv0)
(join gv0 gv0 a1 = heap_delete_max a1), (join gv0 gv0 a1 = insert n0 p), (join gv0 gv0 a1 = insert n0 gv0), (join gv0 gv0 a1 = insert n p), (join gv0 gv0 a1 = insert n gv0), (join gv0 gv0 a1 = carry p a1), (join gv0 gv0 a1 = carry gv0 a1), (join gv0 gv0 a1 = p ++ p), (join gv0 gv0 a1 = p ++ gv0), (join gv0 gv0 a1 = gv0 ++ p)
(join gv0 gv0 a1 = gv0 ++ gv0), (insert n0 p = p), (insert n0 p = gv0), (insert n0 p = heap_delete_max a1), (insert n0 p = carry p a1), (insert n0 p = carry gv0 a1), (insert n0 p = p ++ p), (insert n0 p = p ++ gv0), (insert n0 p = gv0 ++ p), (insert n0 p = gv0 ++ gv0)
(insert n0 gv0 = p), (insert n0 gv0 = gv0), (insert n0 gv0 = heap_delete_max a1), (insert n0 gv0 = carry p a1), (insert n0 gv0 = carry gv0 a1), (insert n0 gv0 = p ++ p), (insert n0 gv0 = p ++ gv0), (insert n0 gv0 = gv0 ++ p), (insert n0 gv0 = gv0 ++ gv0), (insert n p = p)
(insert n p = gv0), (insert n p = heap_delete_max a1), (insert n p = carry p a1), (insert n p = carry gv0 a1), (insert n p = p ++ p), (insert n p = p ++ gv0), (insert n p = gv0 ++ p), (insert n p = gv0 ++ gv0), (insert n gv0 = p), (insert n gv0 = gv0)
(insert n gv0 = heap_delete_max a1), (insert n gv0 = carry p a1), (insert n gv0 = carry gv0 a1), (insert n gv0 = p ++ p), (insert n gv0 = p ++ gv0), (insert n gv0 = gv0 ++ p), (insert n gv0 = gv0 ++ gv0), (carry p a1 = p), (carry p a1 = gv0), (carry p a1 = p ++ p)
(carry p a1 = p ++ gv0), (carry p a1 = gv0 ++ p), (carry p a1 = gv0 ++ gv0), (carry gv0 a1 = p), (carry gv0 a1 = gv0), (carry gv0 a1 = p ++ p), (carry gv0 a1 = p ++ gv0), (carry gv0 a1 = gv0 ++ p), (carry gv0 a1 = gv0 ++ gv0), (p ++ p = p)
(p ++ p = gv0), (p ++ gv0 = p), (p ++ gv0 = gv0), (gv0 ++ p = p), (gv0 ++ p = gv0), (gv0 ++ gv0 = p), (gv0 ++ gv0 = gv0), ([] = p), ([] = gv0), ([] = merge p p)
([] = merge p gv0), ([] = merge gv0 p), ([] = merge gv0 gv0), ([] = heap_delete_max a1), ([] = join p p a1), ([] = join p gv0 a1), ([] = join gv0 p a1), ([] = join gv0 gv0 a1), ([] = insert n0 p), ([] = insert n0 gv0)
([] = insert n p), ([] = insert n gv0), ([] = carry p a1), ([] = carry gv0 a1), ([] = p ++ p), ([] = p ++ gv0), ([] = gv0 ++ p), ([] = gv0 ++ gv0), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n0 gv0)
((p, p) = delete_max_aux n p), ((p, p) = delete_max_aux n gv0), ((p, gv0) = delete_max_aux n0 p), ((p, gv0) = delete_max_aux n0 gv0), ((p, gv0) = delete_max_aux n p), ((p, gv0) = delete_max_aux n gv0), ((gv0, p) = delete_max_aux n0 p), ((gv0, p) = delete_max_aux n0 gv0), ((gv0, p) = delete_max_aux n p), ((gv0, p) = delete_max_aux n gv0)
((gv0, gv0) = delete_max_aux n0 p), ((gv0, gv0) = delete_max_aux n0 gv0), ((gv0, gv0) = delete_max_aux n p), ((gv0, gv0) = delete_max_aux n gv0), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = smash a1 a1), (Node n a1 a1 = a1), (Node n a1 a1 = smash a1 a1), (smash a1 a1 = a1), (Leaf = Node n0 a1 a1)
(Leaf = Node n a1 a1), (Leaf = smash a1 a1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n0 gv0 = n0), (find_max' n0 gv0 = n), (find_max' n p = n0), (find_max' n p = n), (find_max' n gv0 = n0), (find_max' n gv0 = n)
(length p = n0), (length p = n), (length p = find_max' n0 p), (length p = find_max' n0 gv0), (length p = find_max' n p), (length p = find_max' n gv0), (length gv0 = n0), (length gv0 = n), (length gv0 = find_max' n0 p), (length gv0 = find_max' n0 gv0)
(length gv0 = find_max' n p), (length gv0 = find_max' n gv0), (Some n0 = find_max p), (Some n0 = find_max gv0), (Some n = find_max p), (Some n = find_max gv0), (None = Some n0), (None = Some n), (None = find_max p), (None = find_max gv0)
(None = Some a1), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0))
((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 122.022 seconds


Label: 0 (0)
(pow2heapp n n0 a1), (pow2heapp n (find_max' n0 p) a1)

Label: 1 (1)
(priq gv0), (Permutation (merge p gv0) (carry p a1)), (Permutation (merge gv0 p) (carry p a1)), (Permutation (carry p a1) (merge p gv0)), (Permutation (carry p a1) (merge gv0 p)), (merge p gv0 = carry p a1), (merge gv0 p = carry p a1)


------------------------------ ALL RESULTS ------------------------------
1. (priqq n (Node n0 a1 Leaf :: p) -> priq (unzip a1 (fun u : list tree => u)))

2. (priqq n (Node n0 a1 Leaf :: p) -> pow2heapp n n0 a1)
(pow2heapp n n0 a1 -> priq (unzip a1 (fun u : list tree => u)))

3. (priqq n (Node n0 a1 Leaf :: p) -> pow2heapp n (find_max' n0 p) a1)
(pow2heapp n (find_max' n0 p) a1 -> priq (unzip a1 (fun u : list tree => u)))

4. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (merge p gv0) (carry p a1) -> priq gv0)

5. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (merge gv0 p) (carry p a1) -> priq gv0)

6. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (carry p a1) (merge p gv0) -> priq gv0)

7. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (carry p a1) (merge gv0 p) -> priq gv0)

8. (priqq n (Node n0 a1 Leaf :: p) -> merge p gv0 = carry p a1 -> priq gv0)

9. (priqq n (Node n0 a1 Leaf :: p) -> merge gv0 p = carry p a1 -> priq gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 166.705 seconds

Number of Result Pairs Returned: 9

1. (priqq n (Node n0 a1 Leaf :: p) -> priq (unzip a1 (fun u : list tree => u)))

2. (priqq n (Node n0 a1 Leaf :: p) -> pow2heapp n n0 a1)
(pow2heapp n n0 a1 -> priq (unzip a1 (fun u : list tree => u)))

3. (priqq n (Node n0 a1 Leaf :: p) -> pow2heapp n (find_max' n0 p) a1)
(pow2heapp n (find_max' n0 p) a1 -> priq (unzip a1 (fun u : list tree => u)))

4. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (merge gv0 p) (carry p a1) -> priq gv0)

5. (priqq n (Node n0 a1 Leaf :: p) ->  Permutation (carry p a1) (merge p gv0) -> priq gv0)
