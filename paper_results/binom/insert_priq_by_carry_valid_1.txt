Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (priqq 0 q -> priqq 0 (carry q (Node x Leaf Leaf)))
 -- (priqq 0 (a2 :: q) -> priqq 0 (carry (a2 :: q) (Node x Leaf Leaf)))
 -- (priqq 0 (a1 :: q) -> priqq 0 (carry (a1 :: q) (Node x Leaf Leaf)))

----------------------------------
Goal: (priqq 0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 4.347 seconds

gv1 : (list tree) = (carry (Node n a1 a2 :: q) (Node x Leaf Leaf))
gv2 : (list tree) = (Node n a1 a2 :: q)
gv5 : tree = Leaf
gv0 : nat = 0
gv4 : tree = (Node x Leaf Leaf)
gv3 : tree = (Node n a1 a2)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 867.365 seconds

Label: Generalization #0
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))

----------------------------------
Goal: (priqq 0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (priqq 0 (a2 :: q) -> priqq 0 (carry (a2 :: q) gv4))

----------------------------------
Goal: (priqq 0 (carry (Node n a1 a2 :: q) gv4))
Case: Valid and Generalized

Label: Generalization #2
Assumptions: 
 -- (priqq 0 (gv3 :: q))
 -- (Node x Leaf Leaf = gv4)
 -- (Node n a1 a2 = gv3)

----------------------------------
Goal: (priqq 0 (carry (gv3 :: q) gv4))
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (priqq gv0 (Node n a1 a2 :: q))
 -- (priqq gv0 (a2 :: q) -> priqq gv0 (carry (a2 :: q) gv4))

----------------------------------
Goal: (priqq gv0 (carry (Node n a1 a2 :: q) gv4))
Case: Valid and Generalized

Label: Generalization #7
Assumptions: 
 -- (priqq 0 gv2)
 -- (Node x Leaf Leaf = gv4)
 -- (Node n a1 a2 :: q = gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 gv4))
Case: Invalid and Generalized

Label: Generalization #8
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (carry (Node n a1 a2 :: q) gv4 = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Not Stable

Label: Generalization #9
Assumptions: 
 -- (priqq 0 (gv3 :: q))

----------------------------------
Goal: (priqq 0 (carry (gv3 :: q) (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #10
Assumptions: 
 -- (priqq gv0 (gv3 :: q))
 -- (priqq gv0 q -> priqq gv0 (carry q (Node x Leaf Leaf)))

----------------------------------
Goal: (priqq gv0 (carry (gv3 :: q) (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #14
Assumptions: 
 -- (priqq 0 (gv3 :: q))
 -- (Leaf = gv5)
 -- (Node n a1 a2 = gv3)

----------------------------------
Goal: (priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))
Case: Invalid and Generalized

Label: Generalization #15
Assumptions: 
 -- (priqq 0 gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #18
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (carry gv2 (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Not Stable

Label: Generalization #19
Assumptions: 
 -- (priqq 0 (gv3 :: q))
 -- (carry (gv3 :: q) (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized

Label: Generalization #20
Assumptions: 
 -- (priqq gv0 (Node n a1 a2 :: q))
 -- (priqq gv0 q -> priqq gv0 (carry q (Node x Leaf Leaf)))

----------------------------------
Goal: (priqq gv0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #21
Assumptions: 
 -- (priqq gv0 (Node n a1 a2 :: q))
 -- (priqq gv0 q -> priqq gv0 (carry q (Node x gv5 gv5)))

----------------------------------
Goal: (priqq gv0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))
Case: Valid and Generalized

Label: Generalization #25
Assumptions: 
 -- (priqq gv0 gv2)
 -- (0 = gv0)
 -- (Node n a1 a2 :: q = gv2)

----------------------------------
Goal: (priqq gv0 (carry gv2 (Node x Leaf Leaf)))
Case: Invalid and Generalized

Label: Generalization #26
Assumptions: 
 -- (priqq gv0 (Node n a1 a2 :: q))
 -- (carry (Node n a1 a2 :: q) (Node x Leaf Leaf) = gv1)
 -- (0 = gv0)

----------------------------------
Goal: (priqq gv0 gv1)
Case: Invalid and Generalized

Label: Generalization #27
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))

----------------------------------
Goal: (priqq 0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))
Case: Valid and Generalized

Label: Generalization #28
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (priqq 0 (a2 :: q) -> priqq 0 (carry (a2 :: q) gv4))

----------------------------------
Goal: (priqq 0 (carry (Node n a1 a2 :: q) gv4))
Case: Valid and Generalized

Label: Generalization #31
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (carry (Node n a1 a2 :: q) gv4 = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Not Stable

Label: Generalization #32
Assumptions: 
 -- (priqq 0 gv2)
 -- (Leaf = gv5)
 -- (Node n a1 a2 :: q = gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 (Node x gv5 gv5)))
Case: Invalid and Generalized

Label: Generalization #33
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (carry (Node n a1 a2 :: q) (Node x gv5 gv5) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized

Label: Generalization #34
Assumptions: 
 -- (priqq 0 gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #35
Assumptions: 
 -- (priqq 0 gv2)
 -- (carry gv2 (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized

Label: Generalization #36
Assumptions: 
 -- (priqq 0 (Node n a1 a2 :: q))
 -- (carry (Node n a1 a2 :: q) (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 867.654 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqq 0 (Node n a1 a2 :: q))
Positive Examples: 40
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 46
Negative Examples: 321

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 48
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 45
Negative Examples: 436

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 130
Negative Examples: 368

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 44
Negative Examples: 500

Label: 6 (6)
Inferring Condition About Generalization
Positive Examples: 38
Negative Examples: 33

Label: 7 (7)
Inferring Condition About Generalization
Positive Examples: 47
Negative Examples: 500

Label: 8 (8)
Inferring Condition About Generalization
Positive Examples: 33
Negative Examples: 62

Label: 9 (9)
Inferring Condition About Generalization
Positive Examples: 293
Negative Examples: 500

Label: 10 (10)
Inferring Condition About Generalization
Positive Examples: 35
Negative Examples: 64


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 871.731 seconds


Label: 0 (0)
(priq q), (priqq x q), (priqq n q), (pow2heap x a2), (pow2heap x a1), (pow2heap n a2), (pow2heap n a1), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x n a2)
(pow2heapp x n a1), (pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n n a2), (pow2heapp n n a1), (Permutation q q), (In a2 q), (In a1 q), (x < x), (x < n)
(n < x), (n < n), (x <= x), (x <= n), (n <= x), (n <= n), (q = q), (a2 = a2), (a2 = a1), (a1 = a2)
(a1 = a1), (x = x), (x = n), (n = x), (n = n), (false = (x >? x)), (false = (x >? n)), (false = (n >? x)), (false = (n >? n)), (false = (x >=? x))
(false = (x >=? n)), (false = (n >=? x)), (false = (n >=? n)), (true = (x >? x)), (true = (x >? n)), (true = (n >? x)), (true = (n >? n)), (true = (x >=? x)), (true = (x >=? n)), (true = (n >=? x))
(true = (n >=? n)), (Abs q []), (Abs (a2 :: q) []), (Abs (a1 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (insert x q) [])
(Abs (insert n q) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems (a2 :: q) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max a2) [])
(priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert n q) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) []), (priqueue_elems (q ++ q) []), (priqueue_elems [] []), (tree_elems a2 [])
(tree_elems a1 []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (smash a2 a2) [])
(tree_elems (smash a2 a1) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf []), (priq (a2 :: q)), (priq (a1 :: q)), (priq (merge q q)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (join q q a2))
(priq (join q q a1)), (priq (insert x q)), (priq (insert n q)), (priq (carry q a2)), (priq (carry q a1)), (priq (q ++ q)), (priqq x (a2 :: q)), (priqq x (a1 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max a2))
(priqq x (heap_delete_max a1)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (insert x q)), (priqq x (insert n q)), (priqq x (carry q a2)), (priqq x (carry q a1)), (priqq x (q ++ q)), (priqq n (a2 :: q)), (priqq n (a1 :: q))
(priqq n (merge q q)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (insert x q)), (priqq n (insert n q)), (priqq n (carry q a2)), (priqq n (carry q a1)), (priqq n (q ++ q))
(priqq (find_max' x q) q), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert n q))
(priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' n q) q), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (join q q a2))
(priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (q ++ q)), (priqq (length q) q), (priqq (length q) (a2 :: q)), (priqq (length q) (a1 :: q)), (priqq (length q) (merge q q))
(priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (insert x q)), (priqq (length q) (insert n q)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (q ++ q)), (pow2heap x (Node x a2 a2))
(pow2heap x (Node x a2 a1)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a1 a2))
(pow2heap x (smash a1 a1)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash a2 a2))
(pow2heap n (smash a2 a1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node n a2 a2))
(pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) (Node x a2 a2))
(pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a1 a2))
(pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a1 a2))
(pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node n a2 a2))
(pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a1 a2)), (pow2heapp x x (Node n a1 a1)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x Leaf), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1))
(pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1))
(pow2heapp x n Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a1 a2))
(pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1))
(pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1))
(pow2heapp x (find_max' n q) Leaf), (pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a1 a2))
(pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) Leaf), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1))
(pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x Leaf), (pow2heapp n n (Node x a2 a2))
(pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 a2))
(pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1))
(pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) (Node x a2 a2))
(pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a1 a2))
(pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1))
(pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x (Node x a2 a2))
(pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a1 a2))
(pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1))
(pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) (Node x a2 a2))
(pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 a2))
(pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1))
(pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n (Node x a2 a2))
(pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a1 a2))
(pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1))
(pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x (Node x a2 a2))
(pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a1 a2)), (pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a1 a2))
(pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1))
(pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) (Node x a2 a2))
(pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 a2))
(pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1))
(pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) (Node x a2 a2))
(pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a1 a2))
(pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) Leaf), (Permutation q (a2 :: q)), (Permutation q (a1 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (insert x q))
(Permutation q (insert n q)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (a2 :: q) q), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1))
(Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) (a2 :: q))
(Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (q ++ q))
(Permutation (a1 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a1 :: q)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert n q))
(Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join q q a2))
(Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (carry q a2)), (Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a1 :: q))
(Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) [])
(Permutation (join q q a2) q), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (carry q a2))
(Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (join q q a2))
(Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) []), (Permutation (insert x q) q), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (merge q q))
(Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (insert n q) q)
(Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1))
(Permutation (insert n q) (q ++ q)), (Permutation (insert n q) []), (Permutation (carry q a2) q), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1))
(Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) []), (Permutation (carry q a1) q), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (heap_delete_max a2))
(Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (a2 :: q))
(Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1))
(Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (a2 :: q)), (Permutation [] (a1 :: q)), (Permutation [] (merge q q)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join q q a2)), (Permutation [] (join q q a1)), (Permutation [] (insert x q))
(Permutation [] (insert n q)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (q ++ q)), (In a2 (a2 :: q)), (In a2 (a1 :: q)), (In a2 (merge q q)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (join q q a2))
(In a2 (join q q a1)), (In a2 (insert x q)), (In a2 (insert n q)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (q ++ q)), (In a1 (a2 :: q)), (In a1 (a1 :: q)), (In a1 (merge q q)), (In a1 (heap_delete_max a2))
(In a1 (heap_delete_max a1)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (insert x q)), (In a1 (insert n q)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (q ++ q)), (In (Node x a2 a2) q), (In (Node x a2 a2) (a2 :: q))
(In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1))
(In (Node x a2 a2) (q ++ q)), (In (Node x a2 a1) q), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (insert x q))
(In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (q ++ q)), (In (Node x a1 a2) q), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1))
(In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a1) q), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a1 :: q))
(In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (q ++ q))
(In (Node n a2 a2) q), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert n q))
(In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a1) q), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join q q a2))
(In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (q ++ q)), (In (Node n a1 a2) q), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (merge q q))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (q ++ q)), (In (Node n a1 a1) q)
(In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (carry q a2))
(In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (q ++ q)), (In (smash a2 a2) q), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1))
(In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a1) q), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (heap_delete_max a2))
(In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (q ++ q)), (In (smash a1 a2) q), (In (smash a1 a2) (a2 :: q))
(In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1))
(In (smash a1 a2) (q ++ q)), (In (smash a1 a1) q), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a1 :: q)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (insert x q))
(In (smash a1 a1) (insert n q)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (q ++ q)), (In Leaf q), (In Leaf (a2 :: q)), (In Leaf (a1 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1))
(In Leaf (join q q a2)), (In Leaf (join q q a1)), (In Leaf (insert x q)), (In Leaf (insert n q)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (q ++ q)), (x < find_max' x q), (x < find_max' n q), (x < length q)
(n < find_max' x q), (n < find_max' n q), (n < length q), (find_max' x q < x), (find_max' x q < n), (find_max' x q < find_max' n q), (find_max' x q < length q), (find_max' n q < x), (find_max' n q < n), (find_max' n q < find_max' x q)
(find_max' n q < length q), (length q < x), (length q < n), (length q < find_max' x q), (length q < find_max' n q), (x <= find_max' x q), (x <= find_max' n q), (x <= length q), (n <= find_max' x q), (n <= find_max' n q)
(n <= length q), (find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= find_max' n q), (find_max' x q <= length q), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= find_max' x q), (find_max' n q <= length q), (length q <= x)
(length q <= n), (length q <= find_max' x q), (length q <= find_max' n q), (~ priq q), (~ priqq x q), (~ priqq n q), (~ pow2heap x a2), (~ pow2heap x a1), (~ pow2heap n a2), (~ pow2heap n a1)
(~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ Permutation q q), (~ In a2 q)
(~ In a1 q), (~ x < x), (~ x < n), (~ n < x), (~ n < n), (~ x <= x), (~ x <= n), (~ n <= x), (~ n <= n), (q <> q)
(a2 <> a2), (a2 <> a1), (a1 <> a2), (a1 <> a1), (x <> x), (x <> n), (n <> x), (n <> n), (None = Some q), (a2 :: q = q)
(a2 :: q = merge q q), (a2 :: q = heap_delete_max a2), (a2 :: q = heap_delete_max a1), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = insert x q), (a2 :: q = insert n q), (a2 :: q = carry q a2), (a2 :: q = carry q a1), (a2 :: q = q ++ q)
(a2 :: q = []), (a1 :: q = q), (a1 :: q = merge q q), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = insert x q), (a1 :: q = insert n q), (a1 :: q = carry q a2)
(a1 :: q = carry q a1), (a1 :: q = q ++ q), (a1 :: q = []), (merge q q = q), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = insert x q), (merge q q = insert n q)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = q ++ q), (heap_delete_max a2 = q), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = q ++ q), (heap_delete_max a1 = q), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1)
(heap_delete_max a1 = q ++ q), (join q q a2 = q), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = insert x q), (join q q a2 = insert n q), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = q ++ q), (join q q a1 = q)
(join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = insert x q), (join q q a1 = insert n q), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = q ++ q), (insert x q = q), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1)
(insert x q = carry q a2), (insert x q = carry q a1), (insert x q = q ++ q), (insert n q = q), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = q ++ q), (carry q a2 = q)
(carry q a2 = q ++ q), (carry q a1 = q), (carry q a1 = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = join q q a2), ([] = join q q a1)
([] = insert x q), ([] = insert n q), ([] = carry q a2), ([] = carry q a1), ([] = q ++ q), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux n q), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = smash a2 a2)
(Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a1 a2 = a2)
(Node x a1 a2 = a1), (Node x a1 a2 = smash a2 a2), (Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a1 a2)
(Node x a1 a1 = smash a1 a1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash a2 a2)
(Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = a2)
(Node n a1 a1 = a1), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 a2 = a2)
(smash a1 a2 = a1), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a1 a2)
(Leaf = Node n a1 a1), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' x q = x), (find_max' x q = n), (find_max' n q = x), (find_max' n q = n), (length q = x)
(length q = n), (length q = find_max' x q), (length q = find_max' n q), (Some x = find_max q), (Some n = find_max q), (None = Some x), (None = Some n), (None = find_max q), (None = Some a2), (None = Some a1)
((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (n >=? x)), ((x >? n) = (n >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? n))
((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n))

Label: 1 (1)
(priq q), (priqq x q), (priqq n q), (pow2heap x a2), (pow2heap x a1), (pow2heap x gv4), (pow2heap x gv3), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv4)
(pow2heap n gv3), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x x gv4), (pow2heapp x x gv3), (pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp x n gv4), (pow2heapp x n gv3), (pow2heapp n x a2)
(pow2heapp n x a1), (pow2heapp n x gv4), (pow2heapp n x gv3), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv4), (pow2heapp n n gv3), (Permutation q q), (In a2 q), (In a1 q)
(In gv4 q), (In gv3 q), (x < x), (x < n), (n < x), (n < n), (x <= x), (x <= n), (n <= x), (n <= n)
(x = x), (x = n), (n = x), (n = n), (q = q), (a2 = a2), (a2 = a1), (a2 = gv4), (a2 = gv3), (a1 = a2)
(a1 = a1), (a1 = gv4), (a1 = gv3), (gv4 = a2), (gv4 = a1), (gv4 = gv4), (gv4 = gv3), (gv3 = a2), (gv3 = a1), (gv3 = gv4)
(gv3 = gv3), (false = (x >? x)), (false = (x >? n)), (false = (n >? x)), (false = (n >? n)), (false = (x >=? x)), (false = (x >=? n)), (false = (n >=? x)), (false = (n >=? n)), (true = (x >? x))
(true = (x >? n)), (true = (n >? x)), (true = (n >? n)), (true = (x >=? x)), (true = (x >=? n)), (true = (n >=? x)), (true = (n >=? n)), (Abs q []), (Abs (a2 :: q) []), (Abs (a1 :: q) [])
(Abs (gv4 :: q) []), (Abs (gv3 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max gv4) []), (Abs (heap_delete_max gv3) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q q gv4) [])
(Abs (join q q gv3) []), (Abs (insert x q) []), (Abs (insert n q) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry q gv4) []), (Abs (carry q gv3) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q [])
(priqueue_elems (a2 :: q) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (gv4 :: q) []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv4) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q a2) [])
(priqueue_elems (join q q a1) []), (priqueue_elems (join q q gv4) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert n q) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) []), (priqueue_elems (carry q gv4) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (q ++ q) [])
(priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems gv4 []), (tree_elems gv3 []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a2 gv4) []), (tree_elems (Node x a2 gv3) []), (tree_elems (Node x a1 a2) [])
(tree_elems (Node x a1 a1) []), (tree_elems (Node x a1 gv4) []), (tree_elems (Node x a1 gv3) []), (tree_elems (Node x gv4 a2) []), (tree_elems (Node x gv4 a1) []), (tree_elems (Node x gv4 gv4) []), (tree_elems (Node x gv4 gv3) []), (tree_elems (Node x gv3 a2) []), (tree_elems (Node x gv3 a1) []), (tree_elems (Node x gv3 gv4) [])
(tree_elems (Node x gv3 gv3) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv4) []), (tree_elems (Node n a2 gv3) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv4) []), (tree_elems (Node n a1 gv3) []), (tree_elems (Node n gv4 a2) [])
(tree_elems (Node n gv4 a1) []), (tree_elems (Node n gv4 gv4) []), (tree_elems (Node n gv4 gv3) []), (tree_elems (Node n gv3 a2) []), (tree_elems (Node n gv3 a1) []), (tree_elems (Node n gv3 gv4) []), (tree_elems (Node n gv3 gv3) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv4) [])
(tree_elems (smash a2 gv3) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv4) []), (tree_elems (smash a1 gv3) []), (tree_elems (smash gv4 a2) []), (tree_elems (smash gv4 a1) []), (tree_elems (smash gv4 gv4) []), (tree_elems (smash gv4 gv3) []), (tree_elems (smash gv3 a2) [])
(tree_elems (smash gv3 a1) []), (tree_elems (smash gv3 gv4) []), (tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (a2 :: q)), (priq (a1 :: q)), (priq (gv4 :: q)), (priq (gv3 :: q)), (priq (merge q q)), (priq (heap_delete_max a2))
(priq (heap_delete_max a1)), (priq (heap_delete_max gv4)), (priq (heap_delete_max gv3)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q q gv4)), (priq (join q q gv3)), (priq (insert x q)), (priq (insert n q)), (priq (carry q a2))
(priq (carry q a1)), (priq (carry q gv4)), (priq (carry q gv3)), (priq (q ++ q)), (priqq x (a2 :: q)), (priqq x (a1 :: q)), (priqq x (gv4 :: q)), (priqq x (gv3 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max a2))
(priqq x (heap_delete_max a1)), (priqq x (heap_delete_max gv4)), (priqq x (heap_delete_max gv3)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q q gv4)), (priqq x (join q q gv3)), (priqq x (insert x q)), (priqq x (insert n q)), (priqq x (carry q a2))
(priqq x (carry q a1)), (priqq x (carry q gv4)), (priqq x (carry q gv3)), (priqq x (q ++ q)), (priqq n (a2 :: q)), (priqq n (a1 :: q)), (priqq n (gv4 :: q)), (priqq n (gv3 :: q)), (priqq n (merge q q)), (priqq n (heap_delete_max a2))
(priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv4)), (priqq n (heap_delete_max gv3)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q q gv4)), (priqq n (join q q gv3)), (priqq n (insert x q)), (priqq n (insert n q)), (priqq n (carry q a2))
(priqq n (carry q a1)), (priqq n (carry q gv4)), (priqq n (carry q gv3)), (priqq n (q ++ q)), (priqq (find_max' x q) q), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (gv4 :: q)), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (merge q q))
(priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (heap_delete_max gv4)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q q gv4)), (priqq (find_max' x q) (join q q gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert n q))
(priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry q gv4)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' n q) q), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (gv4 :: q)), (priqq (find_max' n q) (gv3 :: q))
(priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (heap_delete_max gv4)), (priqq (find_max' n q) (heap_delete_max gv3)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q q gv4)), (priqq (find_max' n q) (join q q gv3)), (priqq (find_max' n q) (insert x q))
(priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry q gv4)), (priqq (find_max' n q) (carry q gv3)), (priqq (find_max' n q) (q ++ q)), (priqq (length q) q), (priqq (length q) (a2 :: q)), (priqq (length q) (a1 :: q)), (priqq (length q) (gv4 :: q))
(priqq (length q) (gv3 :: q)), (priqq (length q) (merge q q)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (heap_delete_max gv4)), (priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q q gv4)), (priqq (length q) (join q q gv3))
(priqq (length q) (insert x q)), (priqq (length q) (insert n q)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry q gv4)), (priqq (length q) (carry q gv3)), (priqq (length q) (q ++ q)), (pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a2 gv4))
(pow2heap x (Node x a2 gv3)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node x a1 gv4)), (pow2heap x (Node x a1 gv3)), (pow2heap x (Node x gv4 a2)), (pow2heap x (Node x gv4 a1)), (pow2heap x (Node x gv4 gv4)), (pow2heap x (Node x gv4 gv3)), (pow2heap x (Node x gv3 a2))
(pow2heap x (Node x gv3 a1)), (pow2heap x (Node x gv3 gv4)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a2 gv4)), (pow2heap x (Node n a2 gv3)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (Node n a1 gv4))
(pow2heap x (Node n a1 gv3)), (pow2heap x (Node n gv4 a2)), (pow2heap x (Node n gv4 a1)), (pow2heap x (Node n gv4 gv4)), (pow2heap x (Node n gv4 gv3)), (pow2heap x (Node n gv3 a2)), (pow2heap x (Node n gv3 a1)), (pow2heap x (Node n gv3 gv4)), (pow2heap x (Node n gv3 gv3)), (pow2heap x (smash a2 a2))
(pow2heap x (smash a2 a1)), (pow2heap x (smash a2 gv4)), (pow2heap x (smash a2 gv3)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap x (smash a1 gv4)), (pow2heap x (smash a1 gv3)), (pow2heap x (smash gv4 a2)), (pow2heap x (smash gv4 a1)), (pow2heap x (smash gv4 gv4))
(pow2heap x (smash gv4 gv3)), (pow2heap x (smash gv3 a2)), (pow2heap x (smash gv3 a1)), (pow2heap x (smash gv3 gv4)), (pow2heap x (smash gv3 gv3)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a2 gv4)), (pow2heap n (Node x a2 gv3)), (pow2heap n (Node x a1 a2))
(pow2heap n (Node x a1 a1)), (pow2heap n (Node x a1 gv4)), (pow2heap n (Node x a1 gv3)), (pow2heap n (Node x gv4 a2)), (pow2heap n (Node x gv4 a1)), (pow2heap n (Node x gv4 gv4)), (pow2heap n (Node x gv4 gv3)), (pow2heap n (Node x gv3 a2)), (pow2heap n (Node x gv3 a1)), (pow2heap n (Node x gv3 gv4))
(pow2heap n (Node x gv3 gv3)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv4)), (pow2heap n (Node n a2 gv3)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv4)), (pow2heap n (Node n a1 gv3)), (pow2heap n (Node n gv4 a2))
(pow2heap n (Node n gv4 a1)), (pow2heap n (Node n gv4 gv4)), (pow2heap n (Node n gv4 gv3)), (pow2heap n (Node n gv3 a2)), (pow2heap n (Node n gv3 a1)), (pow2heap n (Node n gv3 gv4)), (pow2heap n (Node n gv3 gv3)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 gv4))
(pow2heap n (smash a2 gv3)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv4)), (pow2heap n (smash a1 gv3)), (pow2heap n (smash gv4 a2)), (pow2heap n (smash gv4 a1)), (pow2heap n (smash gv4 gv4)), (pow2heap n (smash gv4 gv3)), (pow2heap n (smash gv3 a2))
(pow2heap n (smash gv3 a1)), (pow2heap n (smash gv3 gv4)), (pow2heap n (smash gv3 gv3)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) gv4), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a2 gv4))
(pow2heap (find_max' x q) (Node x a2 gv3)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node x a1 gv4)), (pow2heap (find_max' x q) (Node x a1 gv3)), (pow2heap (find_max' x q) (Node x gv4 a2)), (pow2heap (find_max' x q) (Node x gv4 a1)), (pow2heap (find_max' x q) (Node x gv4 gv4)), (pow2heap (find_max' x q) (Node x gv4 gv3)), (pow2heap (find_max' x q) (Node x gv3 a2))
(pow2heap (find_max' x q) (Node x gv3 a1)), (pow2heap (find_max' x q) (Node x gv3 gv4)), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a2 gv4)), (pow2heap (find_max' x q) (Node n a2 gv3)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (Node n a1 gv4))
(pow2heap (find_max' x q) (Node n a1 gv3)), (pow2heap (find_max' x q) (Node n gv4 a2)), (pow2heap (find_max' x q) (Node n gv4 a1)), (pow2heap (find_max' x q) (Node n gv4 gv4)), (pow2heap (find_max' x q) (Node n gv4 gv3)), (pow2heap (find_max' x q) (Node n gv3 a2)), (pow2heap (find_max' x q) (Node n gv3 a1)), (pow2heap (find_max' x q) (Node n gv3 gv4)), (pow2heap (find_max' x q) (Node n gv3 gv3)), (pow2heap (find_max' x q) (smash a2 a2))
(pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a2 gv4)), (pow2heap (find_max' x q) (smash a2 gv3)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x q) (smash a1 gv4)), (pow2heap (find_max' x q) (smash a1 gv3)), (pow2heap (find_max' x q) (smash gv4 a2)), (pow2heap (find_max' x q) (smash gv4 a1)), (pow2heap (find_max' x q) (smash gv4 gv4))
(pow2heap (find_max' x q) (smash gv4 gv3)), (pow2heap (find_max' x q) (smash gv3 a2)), (pow2heap (find_max' x q) (smash gv3 a1)), (pow2heap (find_max' x q) (smash gv3 gv4)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) gv4), (pow2heap (find_max' n q) gv3), (pow2heap (find_max' n q) (Node x a2 a2))
(pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a2 gv4)), (pow2heap (find_max' n q) (Node x a2 gv3)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node x a1 gv4)), (pow2heap (find_max' n q) (Node x a1 gv3)), (pow2heap (find_max' n q) (Node x gv4 a2)), (pow2heap (find_max' n q) (Node x gv4 a1)), (pow2heap (find_max' n q) (Node x gv4 gv4))
(pow2heap (find_max' n q) (Node x gv4 gv3)), (pow2heap (find_max' n q) (Node x gv3 a2)), (pow2heap (find_max' n q) (Node x gv3 a1)), (pow2heap (find_max' n q) (Node x gv3 gv4)), (pow2heap (find_max' n q) (Node x gv3 gv3)), (pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a2 gv4)), (pow2heap (find_max' n q) (Node n a2 gv3)), (pow2heap (find_max' n q) (Node n a1 a2))
(pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node n a1 gv4)), (pow2heap (find_max' n q) (Node n a1 gv3)), (pow2heap (find_max' n q) (Node n gv4 a2)), (pow2heap (find_max' n q) (Node n gv4 a1)), (pow2heap (find_max' n q) (Node n gv4 gv4)), (pow2heap (find_max' n q) (Node n gv4 gv3)), (pow2heap (find_max' n q) (Node n gv3 a2)), (pow2heap (find_max' n q) (Node n gv3 a1)), (pow2heap (find_max' n q) (Node n gv3 gv4))
(pow2heap (find_max' n q) (Node n gv3 gv3)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a2 gv4)), (pow2heap (find_max' n q) (smash a2 gv3)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n q) (smash a1 gv4)), (pow2heap (find_max' n q) (smash a1 gv3)), (pow2heap (find_max' n q) (smash gv4 a2))
(pow2heap (find_max' n q) (smash gv4 a1)), (pow2heap (find_max' n q) (smash gv4 gv4)), (pow2heap (find_max' n q) (smash gv4 gv3)), (pow2heap (find_max' n q) (smash gv3 a2)), (pow2heap (find_max' n q) (smash gv3 a1)), (pow2heap (find_max' n q) (smash gv3 gv4)), (pow2heap (find_max' n q) (smash gv3 gv3)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) gv4)
(pow2heap (length q) gv3), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a2 gv4)), (pow2heap (length q) (Node x a2 gv3)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node x a1 gv4)), (pow2heap (length q) (Node x a1 gv3)), (pow2heap (length q) (Node x gv4 a2))
(pow2heap (length q) (Node x gv4 a1)), (pow2heap (length q) (Node x gv4 gv4)), (pow2heap (length q) (Node x gv4 gv3)), (pow2heap (length q) (Node x gv3 a2)), (pow2heap (length q) (Node x gv3 a1)), (pow2heap (length q) (Node x gv3 gv4)), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a2 gv4))
(pow2heap (length q) (Node n a2 gv3)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node n a1 gv4)), (pow2heap (length q) (Node n a1 gv3)), (pow2heap (length q) (Node n gv4 a2)), (pow2heap (length q) (Node n gv4 a1)), (pow2heap (length q) (Node n gv4 gv4)), (pow2heap (length q) (Node n gv4 gv3)), (pow2heap (length q) (Node n gv3 a2))
(pow2heap (length q) (Node n gv3 a1)), (pow2heap (length q) (Node n gv3 gv4)), (pow2heap (length q) (Node n gv3 gv3)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a2 gv4)), (pow2heap (length q) (smash a2 gv3)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length q) (smash a1 gv4))
(pow2heap (length q) (smash a1 gv3)), (pow2heap (length q) (smash gv4 a2)), (pow2heap (length q) (smash gv4 a1)), (pow2heap (length q) (smash gv4 gv4)), (pow2heap (length q) (smash gv4 gv3)), (pow2heap (length q) (smash gv3 a2)), (pow2heap (length q) (smash gv3 a1)), (pow2heap (length q) (smash gv3 gv4)), (pow2heap (length q) (smash gv3 gv3)), (pow2heapp x x (Node x a2 a2))
(pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a2 gv4)), (pow2heapp x x (Node x a2 gv3)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node x a1 gv4)), (pow2heapp x x (Node x a1 gv3)), (pow2heapp x x (Node x gv4 a2)), (pow2heapp x x (Node x gv4 a1)), (pow2heapp x x (Node x gv4 gv4))
(pow2heapp x x (Node x gv4 gv3)), (pow2heapp x x (Node x gv3 a2)), (pow2heapp x x (Node x gv3 a1)), (pow2heapp x x (Node x gv3 gv4)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a2 gv4)), (pow2heapp x x (Node n a2 gv3)), (pow2heapp x x (Node n a1 a2))
(pow2heapp x x (Node n a1 a1)), (pow2heapp x x (Node n a1 gv4)), (pow2heapp x x (Node n a1 gv3)), (pow2heapp x x (Node n gv4 a2)), (pow2heapp x x (Node n gv4 a1)), (pow2heapp x x (Node n gv4 gv4)), (pow2heapp x x (Node n gv4 gv3)), (pow2heapp x x (Node n gv3 a2)), (pow2heapp x x (Node n gv3 a1)), (pow2heapp x x (Node n gv3 gv4))
(pow2heapp x x (Node n gv3 gv3)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a2 gv4)), (pow2heapp x x (smash a2 gv3)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x (smash a1 gv4)), (pow2heapp x x (smash a1 gv3)), (pow2heapp x x (smash gv4 a2))
(pow2heapp x x (smash gv4 a1)), (pow2heapp x x (smash gv4 gv4)), (pow2heapp x x (smash gv4 gv3)), (pow2heapp x x (smash gv3 a2)), (pow2heapp x x (smash gv3 a1)), (pow2heapp x x (smash gv3 gv4)), (pow2heapp x x (smash gv3 gv3)), (pow2heapp x x Leaf), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1))
(pow2heapp x n (Node x a2 gv4)), (pow2heapp x n (Node x a2 gv3)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node x a1 gv4)), (pow2heapp x n (Node x a1 gv3)), (pow2heapp x n (Node x gv4 a2)), (pow2heapp x n (Node x gv4 a1)), (pow2heapp x n (Node x gv4 gv4)), (pow2heapp x n (Node x gv4 gv3))
(pow2heapp x n (Node x gv3 a2)), (pow2heapp x n (Node x gv3 a1)), (pow2heapp x n (Node x gv3 gv4)), (pow2heapp x n (Node x gv3 gv3)), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a2 gv4)), (pow2heapp x n (Node n a2 gv3)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1))
(pow2heapp x n (Node n a1 gv4)), (pow2heapp x n (Node n a1 gv3)), (pow2heapp x n (Node n gv4 a2)), (pow2heapp x n (Node n gv4 a1)), (pow2heapp x n (Node n gv4 gv4)), (pow2heapp x n (Node n gv4 gv3)), (pow2heapp x n (Node n gv3 a2)), (pow2heapp x n (Node n gv3 a1)), (pow2heapp x n (Node n gv3 gv4)), (pow2heapp x n (Node n gv3 gv3))
(pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a2 gv4)), (pow2heapp x n (smash a2 gv3)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n (smash a1 gv4)), (pow2heapp x n (smash a1 gv3)), (pow2heapp x n (smash gv4 a2)), (pow2heapp x n (smash gv4 a1))
(pow2heapp x n (smash gv4 gv4)), (pow2heapp x n (smash gv4 gv3)), (pow2heapp x n (smash gv3 a2)), (pow2heapp x n (smash gv3 a1)), (pow2heapp x n (smash gv3 gv4)), (pow2heapp x n (smash gv3 gv3)), (pow2heapp x n Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) gv4)
(pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a2 gv4)), (pow2heapp x (find_max' x q) (Node x a2 gv3)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node x a1 gv4)), (pow2heapp x (find_max' x q) (Node x a1 gv3)), (pow2heapp x (find_max' x q) (Node x gv4 a2))
(pow2heapp x (find_max' x q) (Node x gv4 a1)), (pow2heapp x (find_max' x q) (Node x gv4 gv4)), (pow2heapp x (find_max' x q) (Node x gv4 gv3)), (pow2heapp x (find_max' x q) (Node x gv3 a2)), (pow2heapp x (find_max' x q) (Node x gv3 a1)), (pow2heapp x (find_max' x q) (Node x gv3 gv4)), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a2 gv4))
(pow2heapp x (find_max' x q) (Node n a2 gv3)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (Node n a1 gv4)), (pow2heapp x (find_max' x q) (Node n a1 gv3)), (pow2heapp x (find_max' x q) (Node n gv4 a2)), (pow2heapp x (find_max' x q) (Node n gv4 a1)), (pow2heapp x (find_max' x q) (Node n gv4 gv4)), (pow2heapp x (find_max' x q) (Node n gv4 gv3)), (pow2heapp x (find_max' x q) (Node n gv3 a2))
(pow2heapp x (find_max' x q) (Node n gv3 a1)), (pow2heapp x (find_max' x q) (Node n gv3 gv4)), (pow2heapp x (find_max' x q) (Node n gv3 gv3)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a2 gv4)), (pow2heapp x (find_max' x q) (smash a2 gv3)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) (smash a1 gv4))
(pow2heapp x (find_max' x q) (smash a1 gv3)), (pow2heapp x (find_max' x q) (smash gv4 a2)), (pow2heapp x (find_max' x q) (smash gv4 a1)), (pow2heapp x (find_max' x q) (smash gv4 gv4)), (pow2heapp x (find_max' x q) (smash gv4 gv3)), (pow2heapp x (find_max' x q) (smash gv3 a2)), (pow2heapp x (find_max' x q) (smash gv3 a1)), (pow2heapp x (find_max' x q) (smash gv3 gv4)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf)
(pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) gv4), (pow2heapp x (find_max' n q) gv3), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a2 gv4)), (pow2heapp x (find_max' n q) (Node x a2 gv3)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1))
(pow2heapp x (find_max' n q) (Node x a1 gv4)), (pow2heapp x (find_max' n q) (Node x a1 gv3)), (pow2heapp x (find_max' n q) (Node x gv4 a2)), (pow2heapp x (find_max' n q) (Node x gv4 a1)), (pow2heapp x (find_max' n q) (Node x gv4 gv4)), (pow2heapp x (find_max' n q) (Node x gv4 gv3)), (pow2heapp x (find_max' n q) (Node x gv3 a2)), (pow2heapp x (find_max' n q) (Node x gv3 a1)), (pow2heapp x (find_max' n q) (Node x gv3 gv4)), (pow2heapp x (find_max' n q) (Node x gv3 gv3))
(pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a2 gv4)), (pow2heapp x (find_max' n q) (Node n a2 gv3)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node n a1 gv4)), (pow2heapp x (find_max' n q) (Node n a1 gv3)), (pow2heapp x (find_max' n q) (Node n gv4 a2)), (pow2heapp x (find_max' n q) (Node n gv4 a1))
(pow2heapp x (find_max' n q) (Node n gv4 gv4)), (pow2heapp x (find_max' n q) (Node n gv4 gv3)), (pow2heapp x (find_max' n q) (Node n gv3 a2)), (pow2heapp x (find_max' n q) (Node n gv3 a1)), (pow2heapp x (find_max' n q) (Node n gv3 gv4)), (pow2heapp x (find_max' n q) (Node n gv3 gv3)), (pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a2 gv4)), (pow2heapp x (find_max' n q) (smash a2 gv3))
(pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) (smash a1 gv4)), (pow2heapp x (find_max' n q) (smash a1 gv3)), (pow2heapp x (find_max' n q) (smash gv4 a2)), (pow2heapp x (find_max' n q) (smash gv4 a1)), (pow2heapp x (find_max' n q) (smash gv4 gv4)), (pow2heapp x (find_max' n q) (smash gv4 gv3)), (pow2heapp x (find_max' n q) (smash gv3 a2)), (pow2heapp x (find_max' n q) (smash gv3 a1))
(pow2heapp x (find_max' n q) (smash gv3 gv4)), (pow2heapp x (find_max' n q) (smash gv3 gv3)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) gv4), (pow2heapp x (length q) gv3), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a2 gv4))
(pow2heapp x (length q) (Node x a2 gv3)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node x a1 gv4)), (pow2heapp x (length q) (Node x a1 gv3)), (pow2heapp x (length q) (Node x gv4 a2)), (pow2heapp x (length q) (Node x gv4 a1)), (pow2heapp x (length q) (Node x gv4 gv4)), (pow2heapp x (length q) (Node x gv4 gv3)), (pow2heapp x (length q) (Node x gv3 a2))
(pow2heapp x (length q) (Node x gv3 a1)), (pow2heapp x (length q) (Node x gv3 gv4)), (pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a2 gv4)), (pow2heapp x (length q) (Node n a2 gv3)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (Node n a1 gv4))
(pow2heapp x (length q) (Node n a1 gv3)), (pow2heapp x (length q) (Node n gv4 a2)), (pow2heapp x (length q) (Node n gv4 a1)), (pow2heapp x (length q) (Node n gv4 gv4)), (pow2heapp x (length q) (Node n gv4 gv3)), (pow2heapp x (length q) (Node n gv3 a2)), (pow2heapp x (length q) (Node n gv3 a1)), (pow2heapp x (length q) (Node n gv3 gv4)), (pow2heapp x (length q) (Node n gv3 gv3)), (pow2heapp x (length q) (smash a2 a2))
(pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a2 gv4)), (pow2heapp x (length q) (smash a2 gv3)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) (smash a1 gv4)), (pow2heapp x (length q) (smash a1 gv3)), (pow2heapp x (length q) (smash gv4 a2)), (pow2heapp x (length q) (smash gv4 a1)), (pow2heapp x (length q) (smash gv4 gv4))
(pow2heapp x (length q) (smash gv4 gv3)), (pow2heapp x (length q) (smash gv3 a2)), (pow2heapp x (length q) (smash gv3 a1)), (pow2heapp x (length q) (smash gv3 gv4)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a2 gv4)), (pow2heapp n x (Node x a2 gv3))
(pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node x a1 gv4)), (pow2heapp n x (Node x a1 gv3)), (pow2heapp n x (Node x gv4 a2)), (pow2heapp n x (Node x gv4 a1)), (pow2heapp n x (Node x gv4 gv4)), (pow2heapp n x (Node x gv4 gv3)), (pow2heapp n x (Node x gv3 a2)), (pow2heapp n x (Node x gv3 a1))
(pow2heapp n x (Node x gv3 gv4)), (pow2heapp n x (Node x gv3 gv3)), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a2 gv4)), (pow2heapp n x (Node n a2 gv3)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (Node n a1 gv4)), (pow2heapp n x (Node n a1 gv3))
(pow2heapp n x (Node n gv4 a2)), (pow2heapp n x (Node n gv4 a1)), (pow2heapp n x (Node n gv4 gv4)), (pow2heapp n x (Node n gv4 gv3)), (pow2heapp n x (Node n gv3 a2)), (pow2heapp n x (Node n gv3 a1)), (pow2heapp n x (Node n gv3 gv4)), (pow2heapp n x (Node n gv3 gv3)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1))
(pow2heapp n x (smash a2 gv4)), (pow2heapp n x (smash a2 gv3)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x (smash a1 gv4)), (pow2heapp n x (smash a1 gv3)), (pow2heapp n x (smash gv4 a2)), (pow2heapp n x (smash gv4 a1)), (pow2heapp n x (smash gv4 gv4)), (pow2heapp n x (smash gv4 gv3))
(pow2heapp n x (smash gv3 a2)), (pow2heapp n x (smash gv3 a1)), (pow2heapp n x (smash gv3 gv4)), (pow2heapp n x (smash gv3 gv3)), (pow2heapp n x Leaf), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a2 gv4)), (pow2heapp n n (Node x a2 gv3)), (pow2heapp n n (Node x a1 a2))
(pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node x a1 gv4)), (pow2heapp n n (Node x a1 gv3)), (pow2heapp n n (Node x gv4 a2)), (pow2heapp n n (Node x gv4 a1)), (pow2heapp n n (Node x gv4 gv4)), (pow2heapp n n (Node x gv4 gv3)), (pow2heapp n n (Node x gv3 a2)), (pow2heapp n n (Node x gv3 a1)), (pow2heapp n n (Node x gv3 gv4))
(pow2heapp n n (Node x gv3 gv3)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv4)), (pow2heapp n n (Node n a2 gv3)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv4)), (pow2heapp n n (Node n a1 gv3)), (pow2heapp n n (Node n gv4 a2))
(pow2heapp n n (Node n gv4 a1)), (pow2heapp n n (Node n gv4 gv4)), (pow2heapp n n (Node n gv4 gv3)), (pow2heapp n n (Node n gv3 a2)), (pow2heapp n n (Node n gv3 a1)), (pow2heapp n n (Node n gv3 gv4)), (pow2heapp n n (Node n gv3 gv3)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv4))
(pow2heapp n n (smash a2 gv3)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 gv4)), (pow2heapp n n (smash a1 gv3)), (pow2heapp n n (smash gv4 a2)), (pow2heapp n n (smash gv4 a1)), (pow2heapp n n (smash gv4 gv4)), (pow2heapp n n (smash gv4 gv3)), (pow2heapp n n (smash gv3 a2))
(pow2heapp n n (smash gv3 a1)), (pow2heapp n n (smash gv3 gv4)), (pow2heapp n n (smash gv3 gv3)), (pow2heapp n n Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) gv4), (pow2heapp n (find_max' x q) gv3), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1))
(pow2heapp n (find_max' x q) (Node x a2 gv4)), (pow2heapp n (find_max' x q) (Node x a2 gv3)), (pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node x a1 gv4)), (pow2heapp n (find_max' x q) (Node x a1 gv3)), (pow2heapp n (find_max' x q) (Node x gv4 a2)), (pow2heapp n (find_max' x q) (Node x gv4 a1)), (pow2heapp n (find_max' x q) (Node x gv4 gv4)), (pow2heapp n (find_max' x q) (Node x gv4 gv3))
(pow2heapp n (find_max' x q) (Node x gv3 a2)), (pow2heapp n (find_max' x q) (Node x gv3 a1)), (pow2heapp n (find_max' x q) (Node x gv3 gv4)), (pow2heapp n (find_max' x q) (Node x gv3 gv3)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a2 gv4)), (pow2heapp n (find_max' x q) (Node n a2 gv3)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1))
(pow2heapp n (find_max' x q) (Node n a1 gv4)), (pow2heapp n (find_max' x q) (Node n a1 gv3)), (pow2heapp n (find_max' x q) (Node n gv4 a2)), (pow2heapp n (find_max' x q) (Node n gv4 a1)), (pow2heapp n (find_max' x q) (Node n gv4 gv4)), (pow2heapp n (find_max' x q) (Node n gv4 gv3)), (pow2heapp n (find_max' x q) (Node n gv3 a2)), (pow2heapp n (find_max' x q) (Node n gv3 a1)), (pow2heapp n (find_max' x q) (Node n gv3 gv4)), (pow2heapp n (find_max' x q) (Node n gv3 gv3))
(pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a2 gv4)), (pow2heapp n (find_max' x q) (smash a2 gv3)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) (smash a1 gv4)), (pow2heapp n (find_max' x q) (smash a1 gv3)), (pow2heapp n (find_max' x q) (smash gv4 a2)), (pow2heapp n (find_max' x q) (smash gv4 a1))
(pow2heapp n (find_max' x q) (smash gv4 gv4)), (pow2heapp n (find_max' x q) (smash gv4 gv3)), (pow2heapp n (find_max' x q) (smash gv3 a2)), (pow2heapp n (find_max' x q) (smash gv3 a1)), (pow2heapp n (find_max' x q) (smash gv3 gv4)), (pow2heapp n (find_max' x q) (smash gv3 gv3)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) gv4)
(pow2heapp n (find_max' n q) gv3), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a2 gv4)), (pow2heapp n (find_max' n q) (Node x a2 gv3)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node x a1 gv4)), (pow2heapp n (find_max' n q) (Node x a1 gv3)), (pow2heapp n (find_max' n q) (Node x gv4 a2))
(pow2heapp n (find_max' n q) (Node x gv4 a1)), (pow2heapp n (find_max' n q) (Node x gv4 gv4)), (pow2heapp n (find_max' n q) (Node x gv4 gv3)), (pow2heapp n (find_max' n q) (Node x gv3 a2)), (pow2heapp n (find_max' n q) (Node x gv3 a1)), (pow2heapp n (find_max' n q) (Node x gv3 gv4)), (pow2heapp n (find_max' n q) (Node x gv3 gv3)), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a2 gv4))
(pow2heapp n (find_max' n q) (Node n a2 gv3)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node n a1 gv4)), (pow2heapp n (find_max' n q) (Node n a1 gv3)), (pow2heapp n (find_max' n q) (Node n gv4 a2)), (pow2heapp n (find_max' n q) (Node n gv4 a1)), (pow2heapp n (find_max' n q) (Node n gv4 gv4)), (pow2heapp n (find_max' n q) (Node n gv4 gv3)), (pow2heapp n (find_max' n q) (Node n gv3 a2))
(pow2heapp n (find_max' n q) (Node n gv3 a1)), (pow2heapp n (find_max' n q) (Node n gv3 gv4)), (pow2heapp n (find_max' n q) (Node n gv3 gv3)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a2 gv4)), (pow2heapp n (find_max' n q) (smash a2 gv3)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) (smash a1 gv4))
(pow2heapp n (find_max' n q) (smash a1 gv3)), (pow2heapp n (find_max' n q) (smash gv4 a2)), (pow2heapp n (find_max' n q) (smash gv4 a1)), (pow2heapp n (find_max' n q) (smash gv4 gv4)), (pow2heapp n (find_max' n q) (smash gv4 gv3)), (pow2heapp n (find_max' n q) (smash gv3 a2)), (pow2heapp n (find_max' n q) (smash gv3 a1)), (pow2heapp n (find_max' n q) (smash gv3 gv4)), (pow2heapp n (find_max' n q) (smash gv3 gv3)), (pow2heapp n (find_max' n q) Leaf)
(pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) gv4), (pow2heapp n (length q) gv3), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a2 gv4)), (pow2heapp n (length q) (Node x a2 gv3)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1))
(pow2heapp n (length q) (Node x a1 gv4)), (pow2heapp n (length q) (Node x a1 gv3)), (pow2heapp n (length q) (Node x gv4 a2)), (pow2heapp n (length q) (Node x gv4 a1)), (pow2heapp n (length q) (Node x gv4 gv4)), (pow2heapp n (length q) (Node x gv4 gv3)), (pow2heapp n (length q) (Node x gv3 a2)), (pow2heapp n (length q) (Node x gv3 a1)), (pow2heapp n (length q) (Node x gv3 gv4)), (pow2heapp n (length q) (Node x gv3 gv3))
(pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a2 gv4)), (pow2heapp n (length q) (Node n a2 gv3)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (Node n a1 gv4)), (pow2heapp n (length q) (Node n a1 gv3)), (pow2heapp n (length q) (Node n gv4 a2)), (pow2heapp n (length q) (Node n gv4 a1))
(pow2heapp n (length q) (Node n gv4 gv4)), (pow2heapp n (length q) (Node n gv4 gv3)), (pow2heapp n (length q) (Node n gv3 a2)), (pow2heapp n (length q) (Node n gv3 a1)), (pow2heapp n (length q) (Node n gv3 gv4)), (pow2heapp n (length q) (Node n gv3 gv3)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a2 gv4)), (pow2heapp n (length q) (smash a2 gv3))
(pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) (smash a1 gv4)), (pow2heapp n (length q) (smash a1 gv3)), (pow2heapp n (length q) (smash gv4 a2)), (pow2heapp n (length q) (smash gv4 a1)), (pow2heapp n (length q) (smash gv4 gv4)), (pow2heapp n (length q) (smash gv4 gv3)), (pow2heapp n (length q) (smash gv3 a2)), (pow2heapp n (length q) (smash gv3 a1))
(pow2heapp n (length q) (smash gv3 gv4)), (pow2heapp n (length q) (smash gv3 gv3)), (pow2heapp n (length q) Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x gv4), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a2 gv4))
(pow2heapp (find_max' x q) x (Node x a2 gv3)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node x a1 gv4)), (pow2heapp (find_max' x q) x (Node x a1 gv3)), (pow2heapp (find_max' x q) x (Node x gv4 a2)), (pow2heapp (find_max' x q) x (Node x gv4 a1)), (pow2heapp (find_max' x q) x (Node x gv4 gv4)), (pow2heapp (find_max' x q) x (Node x gv4 gv3)), (pow2heapp (find_max' x q) x (Node x gv3 a2))
(pow2heapp (find_max' x q) x (Node x gv3 a1)), (pow2heapp (find_max' x q) x (Node x gv3 gv4)), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a2 gv4)), (pow2heapp (find_max' x q) x (Node n a2 gv3)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node n a1 gv4))
(pow2heapp (find_max' x q) x (Node n a1 gv3)), (pow2heapp (find_max' x q) x (Node n gv4 a2)), (pow2heapp (find_max' x q) x (Node n gv4 a1)), (pow2heapp (find_max' x q) x (Node n gv4 gv4)), (pow2heapp (find_max' x q) x (Node n gv4 gv3)), (pow2heapp (find_max' x q) x (Node n gv3 a2)), (pow2heapp (find_max' x q) x (Node n gv3 a1)), (pow2heapp (find_max' x q) x (Node n gv3 gv4)), (pow2heapp (find_max' x q) x (Node n gv3 gv3)), (pow2heapp (find_max' x q) x (smash a2 a2))
(pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a2 gv4)), (pow2heapp (find_max' x q) x (smash a2 gv3)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x (smash a1 gv4)), (pow2heapp (find_max' x q) x (smash a1 gv3)), (pow2heapp (find_max' x q) x (smash gv4 a2)), (pow2heapp (find_max' x q) x (smash gv4 a1)), (pow2heapp (find_max' x q) x (smash gv4 gv4))
(pow2heapp (find_max' x q) x (smash gv4 gv3)), (pow2heapp (find_max' x q) x (smash gv3 a2)), (pow2heapp (find_max' x q) x (smash gv3 a1)), (pow2heapp (find_max' x q) x (smash gv3 gv4)), (pow2heapp (find_max' x q) x (smash gv3 gv3)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n gv4), (pow2heapp (find_max' x q) n gv3)
(pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a2 gv4)), (pow2heapp (find_max' x q) n (Node x a2 gv3)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node x a1 gv4)), (pow2heapp (find_max' x q) n (Node x a1 gv3)), (pow2heapp (find_max' x q) n (Node x gv4 a2)), (pow2heapp (find_max' x q) n (Node x gv4 a1))
(pow2heapp (find_max' x q) n (Node x gv4 gv4)), (pow2heapp (find_max' x q) n (Node x gv4 gv3)), (pow2heapp (find_max' x q) n (Node x gv3 a2)), (pow2heapp (find_max' x q) n (Node x gv3 a1)), (pow2heapp (find_max' x q) n (Node x gv3 gv4)), (pow2heapp (find_max' x q) n (Node x gv3 gv3)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a2 gv4)), (pow2heapp (find_max' x q) n (Node n a2 gv3))
(pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (Node n a1 gv4)), (pow2heapp (find_max' x q) n (Node n a1 gv3)), (pow2heapp (find_max' x q) n (Node n gv4 a2)), (pow2heapp (find_max' x q) n (Node n gv4 a1)), (pow2heapp (find_max' x q) n (Node n gv4 gv4)), (pow2heapp (find_max' x q) n (Node n gv4 gv3)), (pow2heapp (find_max' x q) n (Node n gv3 a2)), (pow2heapp (find_max' x q) n (Node n gv3 a1))
(pow2heapp (find_max' x q) n (Node n gv3 gv4)), (pow2heapp (find_max' x q) n (Node n gv3 gv3)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a2 gv4)), (pow2heapp (find_max' x q) n (smash a2 gv3)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n (smash a1 gv4)), (pow2heapp (find_max' x q) n (smash a1 gv3))
(pow2heapp (find_max' x q) n (smash gv4 a2)), (pow2heapp (find_max' x q) n (smash gv4 a1)), (pow2heapp (find_max' x q) n (smash gv4 gv4)), (pow2heapp (find_max' x q) n (smash gv4 gv3)), (pow2heapp (find_max' x q) n (smash gv3 a2)), (pow2heapp (find_max' x q) n (smash gv3 a1)), (pow2heapp (find_max' x q) n (smash gv3 gv4)), (pow2heapp (find_max' x q) n (smash gv3 gv3)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2)
(pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) gv4), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv4))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 gv4))
(pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv4))
(pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) gv4), (pow2heapp (find_max' x q) (find_max' n q) gv3), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv3))
(pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv3))
(pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 gv3))
(pow2heapp (find_max' x q) (find_max' n q) (smash gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) gv4), (pow2heapp (find_max' x q) (length q) gv3), (pow2heapp (find_max' x q) (length q) (Node x a2 a2))
(pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv3)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv4)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (length q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (length q) (Node x gv4 gv4))
(pow2heapp (find_max' x q) (length q) (Node x gv4 gv3)), (pow2heapp (find_max' x q) (length q) (Node x gv3 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv3 a1)), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv4)), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv4)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2))
(pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv3)), (pow2heapp (find_max' x q) (length q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (length q) (Node n gv4 gv3)), (pow2heapp (find_max' x q) (length q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv3 gv4))
(pow2heapp (find_max' x q) (length q) (Node n gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 gv4)), (pow2heapp (find_max' x q) (length q) (smash a2 gv3)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 gv4)), (pow2heapp (find_max' x q) (length q) (smash a1 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv4 a2))
(pow2heapp (find_max' x q) (length q) (smash gv4 a1)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 a2)), (pow2heapp (find_max' x q) (length q) (smash gv3 a1)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1)
(pow2heapp (find_max' n q) x gv4), (pow2heapp (find_max' n q) x gv3), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a2 gv4)), (pow2heapp (find_max' n q) x (Node x a2 gv3)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node x a1 gv4)), (pow2heapp (find_max' n q) x (Node x a1 gv3))
(pow2heapp (find_max' n q) x (Node x gv4 a2)), (pow2heapp (find_max' n q) x (Node x gv4 a1)), (pow2heapp (find_max' n q) x (Node x gv4 gv4)), (pow2heapp (find_max' n q) x (Node x gv4 gv3)), (pow2heapp (find_max' n q) x (Node x gv3 a2)), (pow2heapp (find_max' n q) x (Node x gv3 a1)), (pow2heapp (find_max' n q) x (Node x gv3 gv4)), (pow2heapp (find_max' n q) x (Node x gv3 gv3)), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1))
(pow2heapp (find_max' n q) x (Node n a2 gv4)), (pow2heapp (find_max' n q) x (Node n a2 gv3)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (Node n a1 gv4)), (pow2heapp (find_max' n q) x (Node n a1 gv3)), (pow2heapp (find_max' n q) x (Node n gv4 a2)), (pow2heapp (find_max' n q) x (Node n gv4 a1)), (pow2heapp (find_max' n q) x (Node n gv4 gv4)), (pow2heapp (find_max' n q) x (Node n gv4 gv3))
(pow2heapp (find_max' n q) x (Node n gv3 a2)), (pow2heapp (find_max' n q) x (Node n gv3 a1)), (pow2heapp (find_max' n q) x (Node n gv3 gv4)), (pow2heapp (find_max' n q) x (Node n gv3 gv3)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a2 gv4)), (pow2heapp (find_max' n q) x (smash a2 gv3)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1))
(pow2heapp (find_max' n q) x (smash a1 gv4)), (pow2heapp (find_max' n q) x (smash a1 gv3)), (pow2heapp (find_max' n q) x (smash gv4 a2)), (pow2heapp (find_max' n q) x (smash gv4 a1)), (pow2heapp (find_max' n q) x (smash gv4 gv4)), (pow2heapp (find_max' n q) x (smash gv4 gv3)), (pow2heapp (find_max' n q) x (smash gv3 a2)), (pow2heapp (find_max' n q) x (smash gv3 a1)), (pow2heapp (find_max' n q) x (smash gv3 gv4)), (pow2heapp (find_max' n q) x (smash gv3 gv3))
(pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n gv4), (pow2heapp (find_max' n q) n gv3), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a2 gv4)), (pow2heapp (find_max' n q) n (Node x a2 gv3)), (pow2heapp (find_max' n q) n (Node x a1 a2))
(pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node x a1 gv4)), (pow2heapp (find_max' n q) n (Node x a1 gv3)), (pow2heapp (find_max' n q) n (Node x gv4 a2)), (pow2heapp (find_max' n q) n (Node x gv4 a1)), (pow2heapp (find_max' n q) n (Node x gv4 gv4)), (pow2heapp (find_max' n q) n (Node x gv4 gv3)), (pow2heapp (find_max' n q) n (Node x gv3 a2)), (pow2heapp (find_max' n q) n (Node x gv3 a1)), (pow2heapp (find_max' n q) n (Node x gv3 gv4))
(pow2heapp (find_max' n q) n (Node x gv3 gv3)), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a2 gv4)), (pow2heapp (find_max' n q) n (Node n a2 gv3)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node n a1 gv4)), (pow2heapp (find_max' n q) n (Node n a1 gv3)), (pow2heapp (find_max' n q) n (Node n gv4 a2))
(pow2heapp (find_max' n q) n (Node n gv4 a1)), (pow2heapp (find_max' n q) n (Node n gv4 gv4)), (pow2heapp (find_max' n q) n (Node n gv4 gv3)), (pow2heapp (find_max' n q) n (Node n gv3 a2)), (pow2heapp (find_max' n q) n (Node n gv3 a1)), (pow2heapp (find_max' n q) n (Node n gv3 gv4)), (pow2heapp (find_max' n q) n (Node n gv3 gv3)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a2 gv4))
(pow2heapp (find_max' n q) n (smash a2 gv3)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n (smash a1 gv4)), (pow2heapp (find_max' n q) n (smash a1 gv3)), (pow2heapp (find_max' n q) n (smash gv4 a2)), (pow2heapp (find_max' n q) n (smash gv4 a1)), (pow2heapp (find_max' n q) n (smash gv4 gv4)), (pow2heapp (find_max' n q) n (smash gv4 gv3)), (pow2heapp (find_max' n q) n (smash gv3 a2))
(pow2heapp (find_max' n q) n (smash gv3 a1)), (pow2heapp (find_max' n q) n (smash gv3 gv4)), (pow2heapp (find_max' n q) n (smash gv3 gv3)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) gv4), (pow2heapp (find_max' n q) (find_max' x q) gv3), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 gv3))
(pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 gv3))
(pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 a1))
(pow2heapp (find_max' n q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) gv4)
(pow2heapp (find_max' n q) (find_max' n q) gv3), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv4))
(pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv4))
(pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) Leaf)
(pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) gv4), (pow2heapp (find_max' n q) (length q) gv3), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1))
(pow2heapp (find_max' n q) (length q) (Node x a1 gv4)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv3)), (pow2heapp (find_max' n q) (length q) (Node x gv4 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv4 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (length q) (Node x gv4 gv3)), (pow2heapp (find_max' n q) (length q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv3 gv4)), (pow2heapp (find_max' n q) (length q) (Node x gv3 gv3))
(pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv4)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv3)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (length q) (Node n gv4 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv4 a1))
(pow2heapp (find_max' n q) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (length q) (Node n gv4 gv3)), (pow2heapp (find_max' n q) (length q) (Node n gv3 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv3 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv3 gv4)), (pow2heapp (find_max' n q) (length q) (Node n gv3 gv3)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 gv4)), (pow2heapp (find_max' n q) (length q) (smash a2 gv3))
(pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 gv4)), (pow2heapp (find_max' n q) (length q) (smash a1 gv3)), (pow2heapp (find_max' n q) (length q) (smash gv4 a2)), (pow2heapp (find_max' n q) (length q) (smash gv4 a1)), (pow2heapp (find_max' n q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (length q) (smash gv4 gv3)), (pow2heapp (find_max' n q) (length q) (smash gv3 a2)), (pow2heapp (find_max' n q) (length q) (smash gv3 a1))
(pow2heapp (find_max' n q) (length q) (smash gv3 gv4)), (pow2heapp (find_max' n q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x gv4), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a2 gv4))
(pow2heapp (length q) x (Node x a2 gv3)), (pow2heapp (length q) x (Node x a1 a2)), (pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node x a1 gv4)), (pow2heapp (length q) x (Node x a1 gv3)), (pow2heapp (length q) x (Node x gv4 a2)), (pow2heapp (length q) x (Node x gv4 a1)), (pow2heapp (length q) x (Node x gv4 gv4)), (pow2heapp (length q) x (Node x gv4 gv3)), (pow2heapp (length q) x (Node x gv3 a2))
(pow2heapp (length q) x (Node x gv3 a1)), (pow2heapp (length q) x (Node x gv3 gv4)), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a2 gv4)), (pow2heapp (length q) x (Node n a2 gv3)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (Node n a1 gv4))
(pow2heapp (length q) x (Node n a1 gv3)), (pow2heapp (length q) x (Node n gv4 a2)), (pow2heapp (length q) x (Node n gv4 a1)), (pow2heapp (length q) x (Node n gv4 gv4)), (pow2heapp (length q) x (Node n gv4 gv3)), (pow2heapp (length q) x (Node n gv3 a2)), (pow2heapp (length q) x (Node n gv3 a1)), (pow2heapp (length q) x (Node n gv3 gv4)), (pow2heapp (length q) x (Node n gv3 gv3)), (pow2heapp (length q) x (smash a2 a2))
(pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a2 gv4)), (pow2heapp (length q) x (smash a2 gv3)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x (smash a1 gv4)), (pow2heapp (length q) x (smash a1 gv3)), (pow2heapp (length q) x (smash gv4 a2)), (pow2heapp (length q) x (smash gv4 a1)), (pow2heapp (length q) x (smash gv4 gv4))
(pow2heapp (length q) x (smash gv4 gv3)), (pow2heapp (length q) x (smash gv3 a2)), (pow2heapp (length q) x (smash gv3 a1)), (pow2heapp (length q) x (smash gv3 gv4)), (pow2heapp (length q) x (smash gv3 gv3)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n gv4), (pow2heapp (length q) n gv3)
(pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a2 gv4)), (pow2heapp (length q) n (Node x a2 gv3)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node x a1 gv4)), (pow2heapp (length q) n (Node x a1 gv3)), (pow2heapp (length q) n (Node x gv4 a2)), (pow2heapp (length q) n (Node x gv4 a1))
(pow2heapp (length q) n (Node x gv4 gv4)), (pow2heapp (length q) n (Node x gv4 gv3)), (pow2heapp (length q) n (Node x gv3 a2)), (pow2heapp (length q) n (Node x gv3 a1)), (pow2heapp (length q) n (Node x gv3 gv4)), (pow2heapp (length q) n (Node x gv3 gv3)), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a2 gv4)), (pow2heapp (length q) n (Node n a2 gv3))
(pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node n a1 gv4)), (pow2heapp (length q) n (Node n a1 gv3)), (pow2heapp (length q) n (Node n gv4 a2)), (pow2heapp (length q) n (Node n gv4 a1)), (pow2heapp (length q) n (Node n gv4 gv4)), (pow2heapp (length q) n (Node n gv4 gv3)), (pow2heapp (length q) n (Node n gv3 a2)), (pow2heapp (length q) n (Node n gv3 a1))
(pow2heapp (length q) n (Node n gv3 gv4)), (pow2heapp (length q) n (Node n gv3 gv3)), (pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a2 gv4)), (pow2heapp (length q) n (smash a2 gv3)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n (smash a1 gv4)), (pow2heapp (length q) n (smash a1 gv3))
(pow2heapp (length q) n (smash gv4 a2)), (pow2heapp (length q) n (smash gv4 a1)), (pow2heapp (length q) n (smash gv4 gv4)), (pow2heapp (length q) n (smash gv4 gv3)), (pow2heapp (length q) n (smash gv3 a2)), (pow2heapp (length q) n (smash gv3 a1)), (pow2heapp (length q) n (smash gv3 gv4)), (pow2heapp (length q) n (smash gv3 gv3)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) (find_max' x q) a2)
(pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) gv4), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv4))
(pow2heapp (length q) (find_max' x q) (Node x a1 gv3)), (pow2heapp (length q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv4 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv3)), (pow2heapp (length q) (find_max' x q) (Node x gv3 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv4)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2))
(pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv4)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv3)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (length q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv4 gv4))
(pow2heapp (length q) (find_max' x q) (Node n gv4 gv3)), (pow2heapp (length q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv3 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv3 gv4)), (pow2heapp (length q) (find_max' x q) (Node n gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 gv4)), (pow2heapp (length q) (find_max' x q) (smash a2 gv3)), (pow2heapp (length q) (find_max' x q) (smash a1 a2))
(pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 gv4)), (pow2heapp (length q) (find_max' x q) (smash a1 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv4 a2)), (pow2heapp (length q) (find_max' x q) (smash gv4 a1)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 a2)), (pow2heapp (length q) (find_max' x q) (smash gv3 a1)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv4))
(pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) gv4), (pow2heapp (length q) (find_max' n q) gv3), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv3))
(pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv4)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (length q) (find_max' n q) (Node x gv4 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (length q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' n q) (Node x gv4 gv3)), (pow2heapp (length q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv3 a1))
(pow2heapp (length q) (find_max' n q) (Node x gv3 gv4)), (pow2heapp (length q) (find_max' n q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv4)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv3))
(pow2heapp (length q) (find_max' n q) (Node n gv4 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (length q) (find_max' n q) (Node n gv4 gv3)), (pow2heapp (length q) (find_max' n q) (Node n gv3 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv3 gv4)), (pow2heapp (length q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1))
(pow2heapp (length q) (find_max' n q) (smash a2 gv4)), (pow2heapp (length q) (find_max' n q) (smash a2 gv3)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 gv4)), (pow2heapp (length q) (find_max' n q) (smash a1 gv3)), (pow2heapp (length q) (find_max' n q) (smash gv4 a2)), (pow2heapp (length q) (find_max' n q) (smash gv4 a1)), (pow2heapp (length q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' n q) (smash gv4 gv3))
(pow2heapp (length q) (find_max' n q) (smash gv3 a2)), (pow2heapp (length q) (find_max' n q) (smash gv3 a1)), (pow2heapp (length q) (find_max' n q) (smash gv3 gv4)), (pow2heapp (length q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) gv4), (pow2heapp (length q) (length q) gv3), (pow2heapp (length q) (length q) (Node x a2 a2))
(pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a2 gv4)), (pow2heapp (length q) (length q) (Node x a2 gv3)), (pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node x a1 gv4)), (pow2heapp (length q) (length q) (Node x a1 gv3)), (pow2heapp (length q) (length q) (Node x gv4 a2)), (pow2heapp (length q) (length q) (Node x gv4 a1)), (pow2heapp (length q) (length q) (Node x gv4 gv4))
(pow2heapp (length q) (length q) (Node x gv4 gv3)), (pow2heapp (length q) (length q) (Node x gv3 a2)), (pow2heapp (length q) (length q) (Node x gv3 a1)), (pow2heapp (length q) (length q) (Node x gv3 gv4)), (pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a2 gv4)), (pow2heapp (length q) (length q) (Node n a2 gv3)), (pow2heapp (length q) (length q) (Node n a1 a2))
(pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node n a1 gv4)), (pow2heapp (length q) (length q) (Node n a1 gv3)), (pow2heapp (length q) (length q) (Node n gv4 a2)), (pow2heapp (length q) (length q) (Node n gv4 a1)), (pow2heapp (length q) (length q) (Node n gv4 gv4)), (pow2heapp (length q) (length q) (Node n gv4 gv3)), (pow2heapp (length q) (length q) (Node n gv3 a2)), (pow2heapp (length q) (length q) (Node n gv3 a1)), (pow2heapp (length q) (length q) (Node n gv3 gv4))
(pow2heapp (length q) (length q) (Node n gv3 gv3)), (pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a2 gv4)), (pow2heapp (length q) (length q) (smash a2 gv3)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) (smash a1 gv4)), (pow2heapp (length q) (length q) (smash a1 gv3)), (pow2heapp (length q) (length q) (smash gv4 a2))
(pow2heapp (length q) (length q) (smash gv4 a1)), (pow2heapp (length q) (length q) (smash gv4 gv4)), (pow2heapp (length q) (length q) (smash gv4 gv3)), (pow2heapp (length q) (length q) (smash gv3 a2)), (pow2heapp (length q) (length q) (smash gv3 a1)), (pow2heapp (length q) (length q) (smash gv3 gv4)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (Permutation q (a2 :: q)), (Permutation q (a1 :: q))
(Permutation q (gv4 :: q)), (Permutation q (gv3 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (heap_delete_max gv4)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q q gv4))
(Permutation q (join q q gv3)), (Permutation q (insert x q)), (Permutation q (insert n q)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (carry q gv4)), (Permutation q (carry q gv3)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (gv4 :: q)), (Permutation (a2 :: q) (gv3 :: q)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (heap_delete_max gv4)), (Permutation (a2 :: q) (heap_delete_max gv3)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1))
(Permutation (a2 :: q) (join q q gv4)), (Permutation (a2 :: q) (join q q gv3)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry q gv4)), (Permutation (a2 :: q) (carry q gv3)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) [])
(Permutation (a1 :: q) q), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (gv4 :: q)), (Permutation (a1 :: q) (gv3 :: q)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (heap_delete_max gv4)), (Permutation (a1 :: q) (heap_delete_max gv3)), (Permutation (a1 :: q) (join q q a2))
(Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (join q q gv4)), (Permutation (a1 :: q) (join q q gv3)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry q gv4)), (Permutation (a1 :: q) (carry q gv3)), (Permutation (a1 :: q) (q ++ q))
(Permutation (a1 :: q) []), (Permutation (gv4 :: q) q), (Permutation (gv4 :: q) (a2 :: q)), (Permutation (gv4 :: q) (a1 :: q)), (Permutation (gv4 :: q) (gv3 :: q)), (Permutation (gv4 :: q) (merge q q)), (Permutation (gv4 :: q) (heap_delete_max a2)), (Permutation (gv4 :: q) (heap_delete_max a1)), (Permutation (gv4 :: q) (heap_delete_max gv4)), (Permutation (gv4 :: q) (heap_delete_max gv3))
(Permutation (gv4 :: q) (join q q a2)), (Permutation (gv4 :: q) (join q q a1)), (Permutation (gv4 :: q) (join q q gv4)), (Permutation (gv4 :: q) (join q q gv3)), (Permutation (gv4 :: q) (insert x q)), (Permutation (gv4 :: q) (insert n q)), (Permutation (gv4 :: q) (carry q a2)), (Permutation (gv4 :: q) (carry q a1)), (Permutation (gv4 :: q) (carry q gv4)), (Permutation (gv4 :: q) (carry q gv3))
(Permutation (gv4 :: q) (q ++ q)), (Permutation (gv4 :: q) []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) (a2 :: q)), (Permutation (gv3 :: q) (a1 :: q)), (Permutation (gv3 :: q) (gv4 :: q)), (Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (heap_delete_max a2)), (Permutation (gv3 :: q) (heap_delete_max a1)), (Permutation (gv3 :: q) (heap_delete_max gv4))
(Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q a2)), (Permutation (gv3 :: q) (join q q a1)), (Permutation (gv3 :: q) (join q q gv4)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (insert x q)), (Permutation (gv3 :: q) (insert n q)), (Permutation (gv3 :: q) (carry q a2)), (Permutation (gv3 :: q) (carry q a1)), (Permutation (gv3 :: q) (carry q gv4))
(Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a1 :: q)), (Permutation (merge q q) (gv4 :: q)), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1))
(Permutation (merge q q) (heap_delete_max gv4)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q q gv4)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1))
(Permutation (merge q q) (carry q gv4)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (gv4 :: q)), (Permutation (heap_delete_max a2) (gv3 :: q)), (Permutation (heap_delete_max a2) (merge q q))
(Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv4)), (Permutation (heap_delete_max a2) (heap_delete_max gv3)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q q gv4)), (Permutation (heap_delete_max a2) (join q q gv3)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (carry q a2))
(Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry q gv4)), (Permutation (heap_delete_max a2) (carry q gv3)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a1 :: q)), (Permutation (heap_delete_max a1) (gv4 :: q)), (Permutation (heap_delete_max a1) (gv3 :: q))
(Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv4)), (Permutation (heap_delete_max a1) (heap_delete_max gv3)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q q gv4)), (Permutation (heap_delete_max a1) (join q q gv3)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert n q))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry q gv4)), (Permutation (heap_delete_max a1) (carry q gv3)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv4) q), (Permutation (heap_delete_max gv4) (a2 :: q)), (Permutation (heap_delete_max gv4) (a1 :: q)), (Permutation (heap_delete_max gv4) (gv4 :: q))
(Permutation (heap_delete_max gv4) (gv3 :: q)), (Permutation (heap_delete_max gv4) (merge q q)), (Permutation (heap_delete_max gv4) (heap_delete_max a2)), (Permutation (heap_delete_max gv4) (heap_delete_max a1)), (Permutation (heap_delete_max gv4) (heap_delete_max gv3)), (Permutation (heap_delete_max gv4) (join q q a2)), (Permutation (heap_delete_max gv4) (join q q a1)), (Permutation (heap_delete_max gv4) (join q q gv4)), (Permutation (heap_delete_max gv4) (join q q gv3)), (Permutation (heap_delete_max gv4) (insert x q))
(Permutation (heap_delete_max gv4) (insert n q)), (Permutation (heap_delete_max gv4) (carry q a2)), (Permutation (heap_delete_max gv4) (carry q a1)), (Permutation (heap_delete_max gv4) (carry q gv4)), (Permutation (heap_delete_max gv4) (carry q gv3)), (Permutation (heap_delete_max gv4) (q ++ q)), (Permutation (heap_delete_max gv4) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) (a2 :: q)), (Permutation (heap_delete_max gv3) (a1 :: q))
(Permutation (heap_delete_max gv3) (gv4 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (heap_delete_max a2)), (Permutation (heap_delete_max gv3) (heap_delete_max a1)), (Permutation (heap_delete_max gv3) (heap_delete_max gv4)), (Permutation (heap_delete_max gv3) (join q q a2)), (Permutation (heap_delete_max gv3) (join q q a1)), (Permutation (heap_delete_max gv3) (join q q gv4)), (Permutation (heap_delete_max gv3) (join q q gv3))
(Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (insert n q)), (Permutation (heap_delete_max gv3) (carry q a2)), (Permutation (heap_delete_max gv3) (carry q a1)), (Permutation (heap_delete_max gv3) (carry q gv4)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (q ++ q)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q a2) q), (Permutation (join q q a2) (a2 :: q))
(Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (gv4 :: q)), (Permutation (join q q a2) (gv3 :: q)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (heap_delete_max gv4)), (Permutation (join q q a2) (heap_delete_max gv3)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q q gv4))
(Permutation (join q q a2) (join q q gv3)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry q gv4)), (Permutation (join q q a2) (carry q gv3)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) []), (Permutation (join q q a1) q)
(Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (gv4 :: q)), (Permutation (join q q a1) (gv3 :: q)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (heap_delete_max gv4)), (Permutation (join q q a1) (heap_delete_max gv3)), (Permutation (join q q a1) (join q q a2))
(Permutation (join q q a1) (join q q gv4)), (Permutation (join q q a1) (join q q gv3)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry q gv4)), (Permutation (join q q a1) (carry q gv3)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) [])
(Permutation (join q q gv4) q), (Permutation (join q q gv4) (a2 :: q)), (Permutation (join q q gv4) (a1 :: q)), (Permutation (join q q gv4) (gv4 :: q)), (Permutation (join q q gv4) (gv3 :: q)), (Permutation (join q q gv4) (merge q q)), (Permutation (join q q gv4) (heap_delete_max a2)), (Permutation (join q q gv4) (heap_delete_max a1)), (Permutation (join q q gv4) (heap_delete_max gv4)), (Permutation (join q q gv4) (heap_delete_max gv3))
(Permutation (join q q gv4) (join q q a2)), (Permutation (join q q gv4) (join q q a1)), (Permutation (join q q gv4) (join q q gv3)), (Permutation (join q q gv4) (insert x q)), (Permutation (join q q gv4) (insert n q)), (Permutation (join q q gv4) (carry q a2)), (Permutation (join q q gv4) (carry q a1)), (Permutation (join q q gv4) (carry q gv4)), (Permutation (join q q gv4) (carry q gv3)), (Permutation (join q q gv4) (q ++ q))
(Permutation (join q q gv4) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) (a2 :: q)), (Permutation (join q q gv3) (a1 :: q)), (Permutation (join q q gv3) (gv4 :: q)), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (heap_delete_max a2)), (Permutation (join q q gv3) (heap_delete_max a1)), (Permutation (join q q gv3) (heap_delete_max gv4))
(Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q q a2)), (Permutation (join q q gv3) (join q q a1)), (Permutation (join q q gv3) (join q q gv4)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (insert n q)), (Permutation (join q q gv3) (carry q a2)), (Permutation (join q q gv3) (carry q a1)), (Permutation (join q q gv3) (carry q gv4)), (Permutation (join q q gv3) (carry q gv3))
(Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (gv4 :: q)), (Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1))
(Permutation (insert x q) (heap_delete_max gv4)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q q gv4)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry q gv4))
(Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (insert n q) q), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (gv4 :: q)), (Permutation (insert n q) (gv3 :: q)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (heap_delete_max a2))
(Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (heap_delete_max gv4)), (Permutation (insert n q) (heap_delete_max gv3)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q q gv4)), (Permutation (insert n q) (join q q gv3)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1))
(Permutation (insert n q) (carry q gv4)), (Permutation (insert n q) (carry q gv3)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) []), (Permutation (carry q a2) q), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (gv4 :: q)), (Permutation (carry q a2) (gv3 :: q)), (Permutation (carry q a2) (merge q q))
(Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (heap_delete_max gv4)), (Permutation (carry q a2) (heap_delete_max gv3)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q q gv4)), (Permutation (carry q a2) (join q q gv3)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert n q))
(Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry q gv4)), (Permutation (carry q a2) (carry q gv3)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) []), (Permutation (carry q a1) q), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (gv4 :: q)), (Permutation (carry q a1) (gv3 :: q))
(Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (heap_delete_max gv4)), (Permutation (carry q a1) (heap_delete_max gv3)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q q gv4)), (Permutation (carry q a1) (join q q gv3)), (Permutation (carry q a1) (insert x q))
(Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry q gv4)), (Permutation (carry q a1) (carry q gv3)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) []), (Permutation (carry q gv4) q), (Permutation (carry q gv4) (a2 :: q)), (Permutation (carry q gv4) (a1 :: q)), (Permutation (carry q gv4) (gv4 :: q))
(Permutation (carry q gv4) (gv3 :: q)), (Permutation (carry q gv4) (merge q q)), (Permutation (carry q gv4) (heap_delete_max a2)), (Permutation (carry q gv4) (heap_delete_max a1)), (Permutation (carry q gv4) (heap_delete_max gv4)), (Permutation (carry q gv4) (heap_delete_max gv3)), (Permutation (carry q gv4) (join q q a2)), (Permutation (carry q gv4) (join q q a1)), (Permutation (carry q gv4) (join q q gv4)), (Permutation (carry q gv4) (join q q gv3))
(Permutation (carry q gv4) (insert x q)), (Permutation (carry q gv4) (insert n q)), (Permutation (carry q gv4) (carry q a2)), (Permutation (carry q gv4) (carry q a1)), (Permutation (carry q gv4) (carry q gv3)), (Permutation (carry q gv4) (q ++ q)), (Permutation (carry q gv4) []), (Permutation (carry q gv3) q), (Permutation (carry q gv3) (a2 :: q)), (Permutation (carry q gv3) (a1 :: q))
(Permutation (carry q gv3) (gv4 :: q)), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (heap_delete_max a2)), (Permutation (carry q gv3) (heap_delete_max a1)), (Permutation (carry q gv3) (heap_delete_max gv4)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q a2)), (Permutation (carry q gv3) (join q q a1)), (Permutation (carry q gv3) (join q q gv4))
(Permutation (carry q gv3) (join q q gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (insert n q)), (Permutation (carry q gv3) (carry q a2)), (Permutation (carry q gv3) (carry q a1)), (Permutation (carry q gv3) (carry q gv4)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (a2 :: q))
(Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (gv4 :: q)), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (heap_delete_max gv4)), (Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1))
(Permutation (q ++ q) (join q q gv4)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry q gv4)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) []), (Permutation [] q)
(Permutation [] (a2 :: q)), (Permutation [] (a1 :: q)), (Permutation [] (gv4 :: q)), (Permutation [] (gv3 :: q)), (Permutation [] (merge q q)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv4)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q a2))
(Permutation [] (join q q a1)), (Permutation [] (join q q gv4)), (Permutation [] (join q q gv3)), (Permutation [] (insert x q)), (Permutation [] (insert n q)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry q gv4)), (Permutation [] (carry q gv3)), (Permutation [] (q ++ q))
(In a2 (a2 :: q)), (In a2 (a1 :: q)), (In a2 (gv4 :: q)), (In a2 (gv3 :: q)), (In a2 (merge q q)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv4)), (In a2 (heap_delete_max gv3)), (In a2 (join q q a2))
(In a2 (join q q a1)), (In a2 (join q q gv4)), (In a2 (join q q gv3)), (In a2 (insert x q)), (In a2 (insert n q)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (carry q gv4)), (In a2 (carry q gv3)), (In a2 (q ++ q))
(In a1 (a2 :: q)), (In a1 (a1 :: q)), (In a1 (gv4 :: q)), (In a1 (gv3 :: q)), (In a1 (merge q q)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max gv4)), (In a1 (heap_delete_max gv3)), (In a1 (join q q a2))
(In a1 (join q q a1)), (In a1 (join q q gv4)), (In a1 (join q q gv3)), (In a1 (insert x q)), (In a1 (insert n q)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry q gv4)), (In a1 (carry q gv3)), (In a1 (q ++ q))
(In gv4 (a2 :: q)), (In gv4 (a1 :: q)), (In gv4 (gv4 :: q)), (In gv4 (gv3 :: q)), (In gv4 (merge q q)), (In gv4 (heap_delete_max a2)), (In gv4 (heap_delete_max a1)), (In gv4 (heap_delete_max gv4)), (In gv4 (heap_delete_max gv3)), (In gv4 (join q q a2))
(In gv4 (join q q a1)), (In gv4 (join q q gv4)), (In gv4 (join q q gv3)), (In gv4 (insert x q)), (In gv4 (insert n q)), (In gv4 (carry q a2)), (In gv4 (carry q a1)), (In gv4 (carry q gv4)), (In gv4 (carry q gv3)), (In gv4 (q ++ q))
(In gv3 (a2 :: q)), (In gv3 (a1 :: q)), (In gv3 (gv4 :: q)), (In gv3 (gv3 :: q)), (In gv3 (merge q q)), (In gv3 (heap_delete_max a2)), (In gv3 (heap_delete_max a1)), (In gv3 (heap_delete_max gv4)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q a2))
(In gv3 (join q q a1)), (In gv3 (join q q gv4)), (In gv3 (join q q gv3)), (In gv3 (insert x q)), (In gv3 (insert n q)), (In gv3 (carry q a2)), (In gv3 (carry q a1)), (In gv3 (carry q gv4)), (In gv3 (carry q gv3)), (In gv3 (q ++ q))
(In (Node x a2 a2) q), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (gv4 :: q)), (In (Node x a2 a2) (gv3 :: q)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (heap_delete_max gv4)), (In (Node x a2 a2) (heap_delete_max gv3))
(In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q q gv4)), (In (Node x a2 a2) (join q q gv3)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry q gv4)), (In (Node x a2 a2) (carry q gv3))
(In (Node x a2 a2) (q ++ q)), (In (Node x a2 a1) q), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (gv4 :: q)), (In (Node x a2 a1) (gv3 :: q)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (heap_delete_max gv4))
(In (Node x a2 a1) (heap_delete_max gv3)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q q gv4)), (In (Node x a2 a1) (join q q gv3)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry q gv4))
(In (Node x a2 a1) (carry q gv3)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 gv4) q), (In (Node x a2 gv4) (a2 :: q)), (In (Node x a2 gv4) (a1 :: q)), (In (Node x a2 gv4) (gv4 :: q)), (In (Node x a2 gv4) (gv3 :: q)), (In (Node x a2 gv4) (merge q q)), (In (Node x a2 gv4) (heap_delete_max a2)), (In (Node x a2 gv4) (heap_delete_max a1))
(In (Node x a2 gv4) (heap_delete_max gv4)), (In (Node x a2 gv4) (heap_delete_max gv3)), (In (Node x a2 gv4) (join q q a2)), (In (Node x a2 gv4) (join q q a1)), (In (Node x a2 gv4) (join q q gv4)), (In (Node x a2 gv4) (join q q gv3)), (In (Node x a2 gv4) (insert x q)), (In (Node x a2 gv4) (insert n q)), (In (Node x a2 gv4) (carry q a2)), (In (Node x a2 gv4) (carry q a1))
(In (Node x a2 gv4) (carry q gv4)), (In (Node x a2 gv4) (carry q gv3)), (In (Node x a2 gv4) (q ++ q)), (In (Node x a2 gv3) q), (In (Node x a2 gv3) (a2 :: q)), (In (Node x a2 gv3) (a1 :: q)), (In (Node x a2 gv3) (gv4 :: q)), (In (Node x a2 gv3) (gv3 :: q)), (In (Node x a2 gv3) (merge q q)), (In (Node x a2 gv3) (heap_delete_max a2))
(In (Node x a2 gv3) (heap_delete_max a1)), (In (Node x a2 gv3) (heap_delete_max gv4)), (In (Node x a2 gv3) (heap_delete_max gv3)), (In (Node x a2 gv3) (join q q a2)), (In (Node x a2 gv3) (join q q a1)), (In (Node x a2 gv3) (join q q gv4)), (In (Node x a2 gv3) (join q q gv3)), (In (Node x a2 gv3) (insert x q)), (In (Node x a2 gv3) (insert n q)), (In (Node x a2 gv3) (carry q a2))
(In (Node x a2 gv3) (carry q a1)), (In (Node x a2 gv3) (carry q gv4)), (In (Node x a2 gv3) (carry q gv3)), (In (Node x a2 gv3) (q ++ q)), (In (Node x a1 a2) q), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (gv4 :: q)), (In (Node x a1 a2) (gv3 :: q)), (In (Node x a1 a2) (merge q q))
(In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (heap_delete_max gv4)), (In (Node x a1 a2) (heap_delete_max gv3)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q q gv4)), (In (Node x a1 a2) (join q q gv3)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert n q))
(In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry q gv4)), (In (Node x a1 a2) (carry q gv3)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a1) q), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (gv4 :: q)), (In (Node x a1 a1) (gv3 :: q))
(In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (heap_delete_max gv4)), (In (Node x a1 a1) (heap_delete_max gv3)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q q gv4)), (In (Node x a1 a1) (join q q gv3)), (In (Node x a1 a1) (insert x q))
(In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry q gv4)), (In (Node x a1 a1) (carry q gv3)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 gv4) q), (In (Node x a1 gv4) (a2 :: q)), (In (Node x a1 gv4) (a1 :: q)), (In (Node x a1 gv4) (gv4 :: q))
(In (Node x a1 gv4) (gv3 :: q)), (In (Node x a1 gv4) (merge q q)), (In (Node x a1 gv4) (heap_delete_max a2)), (In (Node x a1 gv4) (heap_delete_max a1)), (In (Node x a1 gv4) (heap_delete_max gv4)), (In (Node x a1 gv4) (heap_delete_max gv3)), (In (Node x a1 gv4) (join q q a2)), (In (Node x a1 gv4) (join q q a1)), (In (Node x a1 gv4) (join q q gv4)), (In (Node x a1 gv4) (join q q gv3))
(In (Node x a1 gv4) (insert x q)), (In (Node x a1 gv4) (insert n q)), (In (Node x a1 gv4) (carry q a2)), (In (Node x a1 gv4) (carry q a1)), (In (Node x a1 gv4) (carry q gv4)), (In (Node x a1 gv4) (carry q gv3)), (In (Node x a1 gv4) (q ++ q)), (In (Node x a1 gv3) q), (In (Node x a1 gv3) (a2 :: q)), (In (Node x a1 gv3) (a1 :: q))
(In (Node x a1 gv3) (gv4 :: q)), (In (Node x a1 gv3) (gv3 :: q)), (In (Node x a1 gv3) (merge q q)), (In (Node x a1 gv3) (heap_delete_max a2)), (In (Node x a1 gv3) (heap_delete_max a1)), (In (Node x a1 gv3) (heap_delete_max gv4)), (In (Node x a1 gv3) (heap_delete_max gv3)), (In (Node x a1 gv3) (join q q a2)), (In (Node x a1 gv3) (join q q a1)), (In (Node x a1 gv3) (join q q gv4))
(In (Node x a1 gv3) (join q q gv3)), (In (Node x a1 gv3) (insert x q)), (In (Node x a1 gv3) (insert n q)), (In (Node x a1 gv3) (carry q a2)), (In (Node x a1 gv3) (carry q a1)), (In (Node x a1 gv3) (carry q gv4)), (In (Node x a1 gv3) (carry q gv3)), (In (Node x a1 gv3) (q ++ q)), (In (Node x gv4 a2) q), (In (Node x gv4 a2) (a2 :: q))
(In (Node x gv4 a2) (a1 :: q)), (In (Node x gv4 a2) (gv4 :: q)), (In (Node x gv4 a2) (gv3 :: q)), (In (Node x gv4 a2) (merge q q)), (In (Node x gv4 a2) (heap_delete_max a2)), (In (Node x gv4 a2) (heap_delete_max a1)), (In (Node x gv4 a2) (heap_delete_max gv4)), (In (Node x gv4 a2) (heap_delete_max gv3)), (In (Node x gv4 a2) (join q q a2)), (In (Node x gv4 a2) (join q q a1))
(In (Node x gv4 a2) (join q q gv4)), (In (Node x gv4 a2) (join q q gv3)), (In (Node x gv4 a2) (insert x q)), (In (Node x gv4 a2) (insert n q)), (In (Node x gv4 a2) (carry q a2)), (In (Node x gv4 a2) (carry q a1)), (In (Node x gv4 a2) (carry q gv4)), (In (Node x gv4 a2) (carry q gv3)), (In (Node x gv4 a2) (q ++ q)), (In (Node x gv4 a1) q)
(In (Node x gv4 a1) (a2 :: q)), (In (Node x gv4 a1) (a1 :: q)), (In (Node x gv4 a1) (gv4 :: q)), (In (Node x gv4 a1) (gv3 :: q)), (In (Node x gv4 a1) (merge q q)), (In (Node x gv4 a1) (heap_delete_max a2)), (In (Node x gv4 a1) (heap_delete_max a1)), (In (Node x gv4 a1) (heap_delete_max gv4)), (In (Node x gv4 a1) (heap_delete_max gv3)), (In (Node x gv4 a1) (join q q a2))
(In (Node x gv4 a1) (join q q a1)), (In (Node x gv4 a1) (join q q gv4)), (In (Node x gv4 a1) (join q q gv3)), (In (Node x gv4 a1) (insert x q)), (In (Node x gv4 a1) (insert n q)), (In (Node x gv4 a1) (carry q a2)), (In (Node x gv4 a1) (carry q a1)), (In (Node x gv4 a1) (carry q gv4)), (In (Node x gv4 a1) (carry q gv3)), (In (Node x gv4 a1) (q ++ q))
(In (Node x gv4 gv4) q), (In (Node x gv4 gv4) (a2 :: q)), (In (Node x gv4 gv4) (a1 :: q)), (In (Node x gv4 gv4) (gv4 :: q)), (In (Node x gv4 gv4) (gv3 :: q)), (In (Node x gv4 gv4) (merge q q)), (In (Node x gv4 gv4) (heap_delete_max a2)), (In (Node x gv4 gv4) (heap_delete_max a1)), (In (Node x gv4 gv4) (heap_delete_max gv4)), (In (Node x gv4 gv4) (heap_delete_max gv3))
(In (Node x gv4 gv4) (join q q a2)), (In (Node x gv4 gv4) (join q q a1)), (In (Node x gv4 gv4) (join q q gv4)), (In (Node x gv4 gv4) (join q q gv3)), (In (Node x gv4 gv4) (insert x q)), (In (Node x gv4 gv4) (insert n q)), (In (Node x gv4 gv4) (carry q a2)), (In (Node x gv4 gv4) (carry q a1)), (In (Node x gv4 gv4) (carry q gv4)), (In (Node x gv4 gv4) (carry q gv3))
(In (Node x gv4 gv4) (q ++ q)), (In (Node x gv4 gv3) q), (In (Node x gv4 gv3) (a2 :: q)), (In (Node x gv4 gv3) (a1 :: q)), (In (Node x gv4 gv3) (gv4 :: q)), (In (Node x gv4 gv3) (gv3 :: q)), (In (Node x gv4 gv3) (merge q q)), (In (Node x gv4 gv3) (heap_delete_max a2)), (In (Node x gv4 gv3) (heap_delete_max a1)), (In (Node x gv4 gv3) (heap_delete_max gv4))
(In (Node x gv4 gv3) (heap_delete_max gv3)), (In (Node x gv4 gv3) (join q q a2)), (In (Node x gv4 gv3) (join q q a1)), (In (Node x gv4 gv3) (join q q gv4)), (In (Node x gv4 gv3) (join q q gv3)), (In (Node x gv4 gv3) (insert x q)), (In (Node x gv4 gv3) (insert n q)), (In (Node x gv4 gv3) (carry q a2)), (In (Node x gv4 gv3) (carry q a1)), (In (Node x gv4 gv3) (carry q gv4))
(In (Node x gv4 gv3) (carry q gv3)), (In (Node x gv4 gv3) (q ++ q)), (In (Node x gv3 a2) q), (In (Node x gv3 a2) (a2 :: q)), (In (Node x gv3 a2) (a1 :: q)), (In (Node x gv3 a2) (gv4 :: q)), (In (Node x gv3 a2) (gv3 :: q)), (In (Node x gv3 a2) (merge q q)), (In (Node x gv3 a2) (heap_delete_max a2)), (In (Node x gv3 a2) (heap_delete_max a1))
(In (Node x gv3 a2) (heap_delete_max gv4)), (In (Node x gv3 a2) (heap_delete_max gv3)), (In (Node x gv3 a2) (join q q a2)), (In (Node x gv3 a2) (join q q a1)), (In (Node x gv3 a2) (join q q gv4)), (In (Node x gv3 a2) (join q q gv3)), (In (Node x gv3 a2) (insert x q)), (In (Node x gv3 a2) (insert n q)), (In (Node x gv3 a2) (carry q a2)), (In (Node x gv3 a2) (carry q a1))
(In (Node x gv3 a2) (carry q gv4)), (In (Node x gv3 a2) (carry q gv3)), (In (Node x gv3 a2) (q ++ q)), (In (Node x gv3 a1) q), (In (Node x gv3 a1) (a2 :: q)), (In (Node x gv3 a1) (a1 :: q)), (In (Node x gv3 a1) (gv4 :: q)), (In (Node x gv3 a1) (gv3 :: q)), (In (Node x gv3 a1) (merge q q)), (In (Node x gv3 a1) (heap_delete_max a2))
(In (Node x gv3 a1) (heap_delete_max a1)), (In (Node x gv3 a1) (heap_delete_max gv4)), (In (Node x gv3 a1) (heap_delete_max gv3)), (In (Node x gv3 a1) (join q q a2)), (In (Node x gv3 a1) (join q q a1)), (In (Node x gv3 a1) (join q q gv4)), (In (Node x gv3 a1) (join q q gv3)), (In (Node x gv3 a1) (insert x q)), (In (Node x gv3 a1) (insert n q)), (In (Node x gv3 a1) (carry q a2))
(In (Node x gv3 a1) (carry q a1)), (In (Node x gv3 a1) (carry q gv4)), (In (Node x gv3 a1) (carry q gv3)), (In (Node x gv3 a1) (q ++ q)), (In (Node x gv3 gv4) q), (In (Node x gv3 gv4) (a2 :: q)), (In (Node x gv3 gv4) (a1 :: q)), (In (Node x gv3 gv4) (gv4 :: q)), (In (Node x gv3 gv4) (gv3 :: q)), (In (Node x gv3 gv4) (merge q q))
(In (Node x gv3 gv4) (heap_delete_max a2)), (In (Node x gv3 gv4) (heap_delete_max a1)), (In (Node x gv3 gv4) (heap_delete_max gv4)), (In (Node x gv3 gv4) (heap_delete_max gv3)), (In (Node x gv3 gv4) (join q q a2)), (In (Node x gv3 gv4) (join q q a1)), (In (Node x gv3 gv4) (join q q gv4)), (In (Node x gv3 gv4) (join q q gv3)), (In (Node x gv3 gv4) (insert x q)), (In (Node x gv3 gv4) (insert n q))
(In (Node x gv3 gv4) (carry q a2)), (In (Node x gv3 gv4) (carry q a1)), (In (Node x gv3 gv4) (carry q gv4)), (In (Node x gv3 gv4) (carry q gv3)), (In (Node x gv3 gv4) (q ++ q)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) (a2 :: q)), (In (Node x gv3 gv3) (a1 :: q)), (In (Node x gv3 gv3) (gv4 :: q)), (In (Node x gv3 gv3) (gv3 :: q))
(In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (heap_delete_max a2)), (In (Node x gv3 gv3) (heap_delete_max a1)), (In (Node x gv3 gv3) (heap_delete_max gv4)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q a2)), (In (Node x gv3 gv3) (join q q a1)), (In (Node x gv3 gv3) (join q q gv4)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (insert x q))
(In (Node x gv3 gv3) (insert n q)), (In (Node x gv3 gv3) (carry q a2)), (In (Node x gv3 gv3) (carry q a1)), (In (Node x gv3 gv3) (carry q gv4)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (Node n a2 a2) q), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (gv4 :: q))
(In (Node n a2 a2) (gv3 :: q)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv4)), (In (Node n a2 a2) (heap_delete_max gv3)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q q gv4)), (In (Node n a2 a2) (join q q gv3))
(In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry q gv4)), (In (Node n a2 a2) (carry q gv3)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a1) q), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a1 :: q))
(In (Node n a2 a1) (gv4 :: q)), (In (Node n a2 a1) (gv3 :: q)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv4)), (In (Node n a2 a1) (heap_delete_max gv3)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q q gv4))
(In (Node n a2 a1) (join q q gv3)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry q gv4)), (In (Node n a2 a1) (carry q gv3)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 gv4) q), (In (Node n a2 gv4) (a2 :: q))
(In (Node n a2 gv4) (a1 :: q)), (In (Node n a2 gv4) (gv4 :: q)), (In (Node n a2 gv4) (gv3 :: q)), (In (Node n a2 gv4) (merge q q)), (In (Node n a2 gv4) (heap_delete_max a2)), (In (Node n a2 gv4) (heap_delete_max a1)), (In (Node n a2 gv4) (heap_delete_max gv4)), (In (Node n a2 gv4) (heap_delete_max gv3)), (In (Node n a2 gv4) (join q q a2)), (In (Node n a2 gv4) (join q q a1))
(In (Node n a2 gv4) (join q q gv4)), (In (Node n a2 gv4) (join q q gv3)), (In (Node n a2 gv4) (insert x q)), (In (Node n a2 gv4) (insert n q)), (In (Node n a2 gv4) (carry q a2)), (In (Node n a2 gv4) (carry q a1)), (In (Node n a2 gv4) (carry q gv4)), (In (Node n a2 gv4) (carry q gv3)), (In (Node n a2 gv4) (q ++ q)), (In (Node n a2 gv3) q)
(In (Node n a2 gv3) (a2 :: q)), (In (Node n a2 gv3) (a1 :: q)), (In (Node n a2 gv3) (gv4 :: q)), (In (Node n a2 gv3) (gv3 :: q)), (In (Node n a2 gv3) (merge q q)), (In (Node n a2 gv3) (heap_delete_max a2)), (In (Node n a2 gv3) (heap_delete_max a1)), (In (Node n a2 gv3) (heap_delete_max gv4)), (In (Node n a2 gv3) (heap_delete_max gv3)), (In (Node n a2 gv3) (join q q a2))
(In (Node n a2 gv3) (join q q a1)), (In (Node n a2 gv3) (join q q gv4)), (In (Node n a2 gv3) (join q q gv3)), (In (Node n a2 gv3) (insert x q)), (In (Node n a2 gv3) (insert n q)), (In (Node n a2 gv3) (carry q a2)), (In (Node n a2 gv3) (carry q a1)), (In (Node n a2 gv3) (carry q gv4)), (In (Node n a2 gv3) (carry q gv3)), (In (Node n a2 gv3) (q ++ q))
(In (Node n a1 a2) q), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (gv4 :: q)), (In (Node n a1 a2) (gv3 :: q)), (In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv4)), (In (Node n a1 a2) (heap_delete_max gv3))
(In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q q gv4)), (In (Node n a1 a2) (join q q gv3)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry q gv4)), (In (Node n a1 a2) (carry q gv3))
(In (Node n a1 a2) (q ++ q)), (In (Node n a1 a1) q), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (gv4 :: q)), (In (Node n a1 a1) (gv3 :: q)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv4))
(In (Node n a1 a1) (heap_delete_max gv3)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q q gv4)), (In (Node n a1 a1) (join q q gv3)), (In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry q gv4))
(In (Node n a1 a1) (carry q gv3)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 gv4) q), (In (Node n a1 gv4) (a2 :: q)), (In (Node n a1 gv4) (a1 :: q)), (In (Node n a1 gv4) (gv4 :: q)), (In (Node n a1 gv4) (gv3 :: q)), (In (Node n a1 gv4) (merge q q)), (In (Node n a1 gv4) (heap_delete_max a2)), (In (Node n a1 gv4) (heap_delete_max a1))
(In (Node n a1 gv4) (heap_delete_max gv4)), (In (Node n a1 gv4) (heap_delete_max gv3)), (In (Node n a1 gv4) (join q q a2)), (In (Node n a1 gv4) (join q q a1)), (In (Node n a1 gv4) (join q q gv4)), (In (Node n a1 gv4) (join q q gv3)), (In (Node n a1 gv4) (insert x q)), (In (Node n a1 gv4) (insert n q)), (In (Node n a1 gv4) (carry q a2)), (In (Node n a1 gv4) (carry q a1))
(In (Node n a1 gv4) (carry q gv4)), (In (Node n a1 gv4) (carry q gv3)), (In (Node n a1 gv4) (q ++ q)), (In (Node n a1 gv3) q), (In (Node n a1 gv3) (a2 :: q)), (In (Node n a1 gv3) (a1 :: q)), (In (Node n a1 gv3) (gv4 :: q)), (In (Node n a1 gv3) (gv3 :: q)), (In (Node n a1 gv3) (merge q q)), (In (Node n a1 gv3) (heap_delete_max a2))
(In (Node n a1 gv3) (heap_delete_max a1)), (In (Node n a1 gv3) (heap_delete_max gv4)), (In (Node n a1 gv3) (heap_delete_max gv3)), (In (Node n a1 gv3) (join q q a2)), (In (Node n a1 gv3) (join q q a1)), (In (Node n a1 gv3) (join q q gv4)), (In (Node n a1 gv3) (join q q gv3)), (In (Node n a1 gv3) (insert x q)), (In (Node n a1 gv3) (insert n q)), (In (Node n a1 gv3) (carry q a2))
(In (Node n a1 gv3) (carry q a1)), (In (Node n a1 gv3) (carry q gv4)), (In (Node n a1 gv3) (carry q gv3)), (In (Node n a1 gv3) (q ++ q)), (In (Node n gv4 a2) q), (In (Node n gv4 a2) (a2 :: q)), (In (Node n gv4 a2) (a1 :: q)), (In (Node n gv4 a2) (gv4 :: q)), (In (Node n gv4 a2) (gv3 :: q)), (In (Node n gv4 a2) (merge q q))
(In (Node n gv4 a2) (heap_delete_max a2)), (In (Node n gv4 a2) (heap_delete_max a1)), (In (Node n gv4 a2) (heap_delete_max gv4)), (In (Node n gv4 a2) (heap_delete_max gv3)), (In (Node n gv4 a2) (join q q a2)), (In (Node n gv4 a2) (join q q a1)), (In (Node n gv4 a2) (join q q gv4)), (In (Node n gv4 a2) (join q q gv3)), (In (Node n gv4 a2) (insert x q)), (In (Node n gv4 a2) (insert n q))
(In (Node n gv4 a2) (carry q a2)), (In (Node n gv4 a2) (carry q a1)), (In (Node n gv4 a2) (carry q gv4)), (In (Node n gv4 a2) (carry q gv3)), (In (Node n gv4 a2) (q ++ q)), (In (Node n gv4 a1) q), (In (Node n gv4 a1) (a2 :: q)), (In (Node n gv4 a1) (a1 :: q)), (In (Node n gv4 a1) (gv4 :: q)), (In (Node n gv4 a1) (gv3 :: q))
(In (Node n gv4 a1) (merge q q)), (In (Node n gv4 a1) (heap_delete_max a2)), (In (Node n gv4 a1) (heap_delete_max a1)), (In (Node n gv4 a1) (heap_delete_max gv4)), (In (Node n gv4 a1) (heap_delete_max gv3)), (In (Node n gv4 a1) (join q q a2)), (In (Node n gv4 a1) (join q q a1)), (In (Node n gv4 a1) (join q q gv4)), (In (Node n gv4 a1) (join q q gv3)), (In (Node n gv4 a1) (insert x q))
(In (Node n gv4 a1) (insert n q)), (In (Node n gv4 a1) (carry q a2)), (In (Node n gv4 a1) (carry q a1)), (In (Node n gv4 a1) (carry q gv4)), (In (Node n gv4 a1) (carry q gv3)), (In (Node n gv4 a1) (q ++ q)), (In (Node n gv4 gv4) q), (In (Node n gv4 gv4) (a2 :: q)), (In (Node n gv4 gv4) (a1 :: q)), (In (Node n gv4 gv4) (gv4 :: q))
(In (Node n gv4 gv4) (gv3 :: q)), (In (Node n gv4 gv4) (merge q q)), (In (Node n gv4 gv4) (heap_delete_max a2)), (In (Node n gv4 gv4) (heap_delete_max a1)), (In (Node n gv4 gv4) (heap_delete_max gv4)), (In (Node n gv4 gv4) (heap_delete_max gv3)), (In (Node n gv4 gv4) (join q q a2)), (In (Node n gv4 gv4) (join q q a1)), (In (Node n gv4 gv4) (join q q gv4)), (In (Node n gv4 gv4) (join q q gv3))
(In (Node n gv4 gv4) (insert x q)), (In (Node n gv4 gv4) (insert n q)), (In (Node n gv4 gv4) (carry q a2)), (In (Node n gv4 gv4) (carry q a1)), (In (Node n gv4 gv4) (carry q gv4)), (In (Node n gv4 gv4) (carry q gv3)), (In (Node n gv4 gv4) (q ++ q)), (In (Node n gv4 gv3) q), (In (Node n gv4 gv3) (a2 :: q)), (In (Node n gv4 gv3) (a1 :: q))
(In (Node n gv4 gv3) (gv4 :: q)), (In (Node n gv4 gv3) (gv3 :: q)), (In (Node n gv4 gv3) (merge q q)), (In (Node n gv4 gv3) (heap_delete_max a2)), (In (Node n gv4 gv3) (heap_delete_max a1)), (In (Node n gv4 gv3) (heap_delete_max gv4)), (In (Node n gv4 gv3) (heap_delete_max gv3)), (In (Node n gv4 gv3) (join q q a2)), (In (Node n gv4 gv3) (join q q a1)), (In (Node n gv4 gv3) (join q q gv4))
(In (Node n gv4 gv3) (join q q gv3)), (In (Node n gv4 gv3) (insert x q)), (In (Node n gv4 gv3) (insert n q)), (In (Node n gv4 gv3) (carry q a2)), (In (Node n gv4 gv3) (carry q a1)), (In (Node n gv4 gv3) (carry q gv4)), (In (Node n gv4 gv3) (carry q gv3)), (In (Node n gv4 gv3) (q ++ q)), (In (Node n gv3 a2) q), (In (Node n gv3 a2) (a2 :: q))
(In (Node n gv3 a2) (a1 :: q)), (In (Node n gv3 a2) (gv4 :: q)), (In (Node n gv3 a2) (gv3 :: q)), (In (Node n gv3 a2) (merge q q)), (In (Node n gv3 a2) (heap_delete_max a2)), (In (Node n gv3 a2) (heap_delete_max a1)), (In (Node n gv3 a2) (heap_delete_max gv4)), (In (Node n gv3 a2) (heap_delete_max gv3)), (In (Node n gv3 a2) (join q q a2)), (In (Node n gv3 a2) (join q q a1))
(In (Node n gv3 a2) (join q q gv4)), (In (Node n gv3 a2) (join q q gv3)), (In (Node n gv3 a2) (insert x q)), (In (Node n gv3 a2) (insert n q)), (In (Node n gv3 a2) (carry q a2)), (In (Node n gv3 a2) (carry q a1)), (In (Node n gv3 a2) (carry q gv4)), (In (Node n gv3 a2) (carry q gv3)), (In (Node n gv3 a2) (q ++ q)), (In (Node n gv3 a1) q)
(In (Node n gv3 a1) (a2 :: q)), (In (Node n gv3 a1) (a1 :: q)), (In (Node n gv3 a1) (gv4 :: q)), (In (Node n gv3 a1) (gv3 :: q)), (In (Node n gv3 a1) (merge q q)), (In (Node n gv3 a1) (heap_delete_max a2)), (In (Node n gv3 a1) (heap_delete_max a1)), (In (Node n gv3 a1) (heap_delete_max gv4)), (In (Node n gv3 a1) (heap_delete_max gv3)), (In (Node n gv3 a1) (join q q a2))
(In (Node n gv3 a1) (join q q a1)), (In (Node n gv3 a1) (join q q gv4)), (In (Node n gv3 a1) (join q q gv3)), (In (Node n gv3 a1) (insert x q)), (In (Node n gv3 a1) (insert n q)), (In (Node n gv3 a1) (carry q a2)), (In (Node n gv3 a1) (carry q a1)), (In (Node n gv3 a1) (carry q gv4)), (In (Node n gv3 a1) (carry q gv3)), (In (Node n gv3 a1) (q ++ q))
(In (Node n gv3 gv4) q), (In (Node n gv3 gv4) (a2 :: q)), (In (Node n gv3 gv4) (a1 :: q)), (In (Node n gv3 gv4) (gv4 :: q)), (In (Node n gv3 gv4) (gv3 :: q)), (In (Node n gv3 gv4) (merge q q)), (In (Node n gv3 gv4) (heap_delete_max a2)), (In (Node n gv3 gv4) (heap_delete_max a1)), (In (Node n gv3 gv4) (heap_delete_max gv4)), (In (Node n gv3 gv4) (heap_delete_max gv3))
(In (Node n gv3 gv4) (join q q a2)), (In (Node n gv3 gv4) (join q q a1)), (In (Node n gv3 gv4) (join q q gv4)), (In (Node n gv3 gv4) (join q q gv3)), (In (Node n gv3 gv4) (insert x q)), (In (Node n gv3 gv4) (insert n q)), (In (Node n gv3 gv4) (carry q a2)), (In (Node n gv3 gv4) (carry q a1)), (In (Node n gv3 gv4) (carry q gv4)), (In (Node n gv3 gv4) (carry q gv3))
(In (Node n gv3 gv4) (q ++ q)), (In (Node n gv3 gv3) q), (In (Node n gv3 gv3) (a2 :: q)), (In (Node n gv3 gv3) (a1 :: q)), (In (Node n gv3 gv3) (gv4 :: q)), (In (Node n gv3 gv3) (gv3 :: q)), (In (Node n gv3 gv3) (merge q q)), (In (Node n gv3 gv3) (heap_delete_max a2)), (In (Node n gv3 gv3) (heap_delete_max a1)), (In (Node n gv3 gv3) (heap_delete_max gv4))
(In (Node n gv3 gv3) (heap_delete_max gv3)), (In (Node n gv3 gv3) (join q q a2)), (In (Node n gv3 gv3) (join q q a1)), (In (Node n gv3 gv3) (join q q gv4)), (In (Node n gv3 gv3) (join q q gv3)), (In (Node n gv3 gv3) (insert x q)), (In (Node n gv3 gv3) (insert n q)), (In (Node n gv3 gv3) (carry q a2)), (In (Node n gv3 gv3) (carry q a1)), (In (Node n gv3 gv3) (carry q gv4))
(In (Node n gv3 gv3) (carry q gv3)), (In (Node n gv3 gv3) (q ++ q)), (In (smash a2 a2) q), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (gv4 :: q)), (In (smash a2 a2) (gv3 :: q)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1))
(In (smash a2 a2) (heap_delete_max gv4)), (In (smash a2 a2) (heap_delete_max gv3)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q q gv4)), (In (smash a2 a2) (join q q gv3)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1))
(In (smash a2 a2) (carry q gv4)), (In (smash a2 a2) (carry q gv3)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a1) q), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (gv4 :: q)), (In (smash a2 a1) (gv3 :: q)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (heap_delete_max a2))
(In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv4)), (In (smash a2 a1) (heap_delete_max gv3)), (In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q q gv4)), (In (smash a2 a1) (join q q gv3)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (carry q a2))
(In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry q gv4)), (In (smash a2 a1) (carry q gv3)), (In (smash a2 a1) (q ++ q)), (In (smash a2 gv4) q), (In (smash a2 gv4) (a2 :: q)), (In (smash a2 gv4) (a1 :: q)), (In (smash a2 gv4) (gv4 :: q)), (In (smash a2 gv4) (gv3 :: q)), (In (smash a2 gv4) (merge q q))
(In (smash a2 gv4) (heap_delete_max a2)), (In (smash a2 gv4) (heap_delete_max a1)), (In (smash a2 gv4) (heap_delete_max gv4)), (In (smash a2 gv4) (heap_delete_max gv3)), (In (smash a2 gv4) (join q q a2)), (In (smash a2 gv4) (join q q a1)), (In (smash a2 gv4) (join q q gv4)), (In (smash a2 gv4) (join q q gv3)), (In (smash a2 gv4) (insert x q)), (In (smash a2 gv4) (insert n q))
(In (smash a2 gv4) (carry q a2)), (In (smash a2 gv4) (carry q a1)), (In (smash a2 gv4) (carry q gv4)), (In (smash a2 gv4) (carry q gv3)), (In (smash a2 gv4) (q ++ q)), (In (smash a2 gv3) q), (In (smash a2 gv3) (a2 :: q)), (In (smash a2 gv3) (a1 :: q)), (In (smash a2 gv3) (gv4 :: q)), (In (smash a2 gv3) (gv3 :: q))
(In (smash a2 gv3) (merge q q)), (In (smash a2 gv3) (heap_delete_max a2)), (In (smash a2 gv3) (heap_delete_max a1)), (In (smash a2 gv3) (heap_delete_max gv4)), (In (smash a2 gv3) (heap_delete_max gv3)), (In (smash a2 gv3) (join q q a2)), (In (smash a2 gv3) (join q q a1)), (In (smash a2 gv3) (join q q gv4)), (In (smash a2 gv3) (join q q gv3)), (In (smash a2 gv3) (insert x q))
(In (smash a2 gv3) (insert n q)), (In (smash a2 gv3) (carry q a2)), (In (smash a2 gv3) (carry q a1)), (In (smash a2 gv3) (carry q gv4)), (In (smash a2 gv3) (carry q gv3)), (In (smash a2 gv3) (q ++ q)), (In (smash a1 a2) q), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (gv4 :: q))
(In (smash a1 a2) (gv3 :: q)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv4)), (In (smash a1 a2) (heap_delete_max gv3)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q q gv4)), (In (smash a1 a2) (join q q gv3))
(In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry q gv4)), (In (smash a1 a2) (carry q gv3)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a1) q), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a1 :: q))
(In (smash a1 a1) (gv4 :: q)), (In (smash a1 a1) (gv3 :: q)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv4)), (In (smash a1 a1) (heap_delete_max gv3)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q q gv4))
(In (smash a1 a1) (join q q gv3)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry q gv4)), (In (smash a1 a1) (carry q gv3)), (In (smash a1 a1) (q ++ q)), (In (smash a1 gv4) q), (In (smash a1 gv4) (a2 :: q))
(In (smash a1 gv4) (a1 :: q)), (In (smash a1 gv4) (gv4 :: q)), (In (smash a1 gv4) (gv3 :: q)), (In (smash a1 gv4) (merge q q)), (In (smash a1 gv4) (heap_delete_max a2)), (In (smash a1 gv4) (heap_delete_max a1)), (In (smash a1 gv4) (heap_delete_max gv4)), (In (smash a1 gv4) (heap_delete_max gv3)), (In (smash a1 gv4) (join q q a2)), (In (smash a1 gv4) (join q q a1))
(In (smash a1 gv4) (join q q gv4)), (In (smash a1 gv4) (join q q gv3)), (In (smash a1 gv4) (insert x q)), (In (smash a1 gv4) (insert n q)), (In (smash a1 gv4) (carry q a2)), (In (smash a1 gv4) (carry q a1)), (In (smash a1 gv4) (carry q gv4)), (In (smash a1 gv4) (carry q gv3)), (In (smash a1 gv4) (q ++ q)), (In (smash a1 gv3) q)
(In (smash a1 gv3) (a2 :: q)), (In (smash a1 gv3) (a1 :: q)), (In (smash a1 gv3) (gv4 :: q)), (In (smash a1 gv3) (gv3 :: q)), (In (smash a1 gv3) (merge q q)), (In (smash a1 gv3) (heap_delete_max a2)), (In (smash a1 gv3) (heap_delete_max a1)), (In (smash a1 gv3) (heap_delete_max gv4)), (In (smash a1 gv3) (heap_delete_max gv3)), (In (smash a1 gv3) (join q q a2))
(In (smash a1 gv3) (join q q a1)), (In (smash a1 gv3) (join q q gv4)), (In (smash a1 gv3) (join q q gv3)), (In (smash a1 gv3) (insert x q)), (In (smash a1 gv3) (insert n q)), (In (smash a1 gv3) (carry q a2)), (In (smash a1 gv3) (carry q a1)), (In (smash a1 gv3) (carry q gv4)), (In (smash a1 gv3) (carry q gv3)), (In (smash a1 gv3) (q ++ q))
(In (smash gv4 a2) q), (In (smash gv4 a2) (a2 :: q)), (In (smash gv4 a2) (a1 :: q)), (In (smash gv4 a2) (gv4 :: q)), (In (smash gv4 a2) (gv3 :: q)), (In (smash gv4 a2) (merge q q)), (In (smash gv4 a2) (heap_delete_max a2)), (In (smash gv4 a2) (heap_delete_max a1)), (In (smash gv4 a2) (heap_delete_max gv4)), (In (smash gv4 a2) (heap_delete_max gv3))
(In (smash gv4 a2) (join q q a2)), (In (smash gv4 a2) (join q q a1)), (In (smash gv4 a2) (join q q gv4)), (In (smash gv4 a2) (join q q gv3)), (In (smash gv4 a2) (insert x q)), (In (smash gv4 a2) (insert n q)), (In (smash gv4 a2) (carry q a2)), (In (smash gv4 a2) (carry q a1)), (In (smash gv4 a2) (carry q gv4)), (In (smash gv4 a2) (carry q gv3))
(In (smash gv4 a2) (q ++ q)), (In (smash gv4 a1) q), (In (smash gv4 a1) (a2 :: q)), (In (smash gv4 a1) (a1 :: q)), (In (smash gv4 a1) (gv4 :: q)), (In (smash gv4 a1) (gv3 :: q)), (In (smash gv4 a1) (merge q q)), (In (smash gv4 a1) (heap_delete_max a2)), (In (smash gv4 a1) (heap_delete_max a1)), (In (smash gv4 a1) (heap_delete_max gv4))
(In (smash gv4 a1) (heap_delete_max gv3)), (In (smash gv4 a1) (join q q a2)), (In (smash gv4 a1) (join q q a1)), (In (smash gv4 a1) (join q q gv4)), (In (smash gv4 a1) (join q q gv3)), (In (smash gv4 a1) (insert x q)), (In (smash gv4 a1) (insert n q)), (In (smash gv4 a1) (carry q a2)), (In (smash gv4 a1) (carry q a1)), (In (smash gv4 a1) (carry q gv4))
(In (smash gv4 a1) (carry q gv3)), (In (smash gv4 a1) (q ++ q)), (In (smash gv4 gv4) q), (In (smash gv4 gv4) (a2 :: q)), (In (smash gv4 gv4) (a1 :: q)), (In (smash gv4 gv4) (gv4 :: q)), (In (smash gv4 gv4) (gv3 :: q)), (In (smash gv4 gv4) (merge q q)), (In (smash gv4 gv4) (heap_delete_max a2)), (In (smash gv4 gv4) (heap_delete_max a1))
(In (smash gv4 gv4) (heap_delete_max gv4)), (In (smash gv4 gv4) (heap_delete_max gv3)), (In (smash gv4 gv4) (join q q a2)), (In (smash gv4 gv4) (join q q a1)), (In (smash gv4 gv4) (join q q gv4)), (In (smash gv4 gv4) (join q q gv3)), (In (smash gv4 gv4) (insert x q)), (In (smash gv4 gv4) (insert n q)), (In (smash gv4 gv4) (carry q a2)), (In (smash gv4 gv4) (carry q a1))
(In (smash gv4 gv4) (carry q gv4)), (In (smash gv4 gv4) (carry q gv3)), (In (smash gv4 gv4) (q ++ q)), (In (smash gv4 gv3) q), (In (smash gv4 gv3) (a2 :: q)), (In (smash gv4 gv3) (a1 :: q)), (In (smash gv4 gv3) (gv4 :: q)), (In (smash gv4 gv3) (gv3 :: q)), (In (smash gv4 gv3) (merge q q)), (In (smash gv4 gv3) (heap_delete_max a2))
(In (smash gv4 gv3) (heap_delete_max a1)), (In (smash gv4 gv3) (heap_delete_max gv4)), (In (smash gv4 gv3) (heap_delete_max gv3)), (In (smash gv4 gv3) (join q q a2)), (In (smash gv4 gv3) (join q q a1)), (In (smash gv4 gv3) (join q q gv4)), (In (smash gv4 gv3) (join q q gv3)), (In (smash gv4 gv3) (insert x q)), (In (smash gv4 gv3) (insert n q)), (In (smash gv4 gv3) (carry q a2))
(In (smash gv4 gv3) (carry q a1)), (In (smash gv4 gv3) (carry q gv4)), (In (smash gv4 gv3) (carry q gv3)), (In (smash gv4 gv3) (q ++ q)), (In (smash gv3 a2) q), (In (smash gv3 a2) (a2 :: q)), (In (smash gv3 a2) (a1 :: q)), (In (smash gv3 a2) (gv4 :: q)), (In (smash gv3 a2) (gv3 :: q)), (In (smash gv3 a2) (merge q q))
(In (smash gv3 a2) (heap_delete_max a2)), (In (smash gv3 a2) (heap_delete_max a1)), (In (smash gv3 a2) (heap_delete_max gv4)), (In (smash gv3 a2) (heap_delete_max gv3)), (In (smash gv3 a2) (join q q a2)), (In (smash gv3 a2) (join q q a1)), (In (smash gv3 a2) (join q q gv4)), (In (smash gv3 a2) (join q q gv3)), (In (smash gv3 a2) (insert x q)), (In (smash gv3 a2) (insert n q))
(In (smash gv3 a2) (carry q a2)), (In (smash gv3 a2) (carry q a1)), (In (smash gv3 a2) (carry q gv4)), (In (smash gv3 a2) (carry q gv3)), (In (smash gv3 a2) (q ++ q)), (In (smash gv3 a1) q), (In (smash gv3 a1) (a2 :: q)), (In (smash gv3 a1) (a1 :: q)), (In (smash gv3 a1) (gv4 :: q)), (In (smash gv3 a1) (gv3 :: q))
(In (smash gv3 a1) (merge q q)), (In (smash gv3 a1) (heap_delete_max a2)), (In (smash gv3 a1) (heap_delete_max a1)), (In (smash gv3 a1) (heap_delete_max gv4)), (In (smash gv3 a1) (heap_delete_max gv3)), (In (smash gv3 a1) (join q q a2)), (In (smash gv3 a1) (join q q a1)), (In (smash gv3 a1) (join q q gv4)), (In (smash gv3 a1) (join q q gv3)), (In (smash gv3 a1) (insert x q))
(In (smash gv3 a1) (insert n q)), (In (smash gv3 a1) (carry q a2)), (In (smash gv3 a1) (carry q a1)), (In (smash gv3 a1) (carry q gv4)), (In (smash gv3 a1) (carry q gv3)), (In (smash gv3 a1) (q ++ q)), (In (smash gv3 gv4) q), (In (smash gv3 gv4) (a2 :: q)), (In (smash gv3 gv4) (a1 :: q)), (In (smash gv3 gv4) (gv4 :: q))
(In (smash gv3 gv4) (gv3 :: q)), (In (smash gv3 gv4) (merge q q)), (In (smash gv3 gv4) (heap_delete_max a2)), (In (smash gv3 gv4) (heap_delete_max a1)), (In (smash gv3 gv4) (heap_delete_max gv4)), (In (smash gv3 gv4) (heap_delete_max gv3)), (In (smash gv3 gv4) (join q q a2)), (In (smash gv3 gv4) (join q q a1)), (In (smash gv3 gv4) (join q q gv4)), (In (smash gv3 gv4) (join q q gv3))
(In (smash gv3 gv4) (insert x q)), (In (smash gv3 gv4) (insert n q)), (In (smash gv3 gv4) (carry q a2)), (In (smash gv3 gv4) (carry q a1)), (In (smash gv3 gv4) (carry q gv4)), (In (smash gv3 gv4) (carry q gv3)), (In (smash gv3 gv4) (q ++ q)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) (a2 :: q)), (In (smash gv3 gv3) (a1 :: q))
(In (smash gv3 gv3) (gv4 :: q)), (In (smash gv3 gv3) (gv3 :: q)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (heap_delete_max a2)), (In (smash gv3 gv3) (heap_delete_max a1)), (In (smash gv3 gv3) (heap_delete_max gv4)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q a2)), (In (smash gv3 gv3) (join q q a1)), (In (smash gv3 gv3) (join q q gv4))
(In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (insert n q)), (In (smash gv3 gv3) (carry q a2)), (In (smash gv3 gv3) (carry q a1)), (In (smash gv3 gv3) (carry q gv4)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (q ++ q)), (In Leaf q), (In Leaf (a2 :: q))
(In Leaf (a1 :: q)), (In Leaf (gv4 :: q)), (In Leaf (gv3 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max gv4)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q a2)), (In Leaf (join q q a1))
(In Leaf (join q q gv4)), (In Leaf (join q q gv3)), (In Leaf (insert x q)), (In Leaf (insert n q)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry q gv4)), (In Leaf (carry q gv3)), (In Leaf (q ++ q)), (x < find_max' x q)
(x < find_max' n q), (x < length q), (n < find_max' x q), (n < find_max' n q), (n < length q), (find_max' x q < x), (find_max' x q < n), (find_max' x q < find_max' n q), (find_max' x q < length q), (find_max' n q < x)
(find_max' n q < n), (find_max' n q < find_max' x q), (find_max' n q < length q), (length q < x), (length q < n), (length q < find_max' x q), (length q < find_max' n q), (x <= find_max' x q), (x <= find_max' n q), (x <= length q)
(n <= find_max' x q), (n <= find_max' n q), (n <= length q), (find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= find_max' n q), (find_max' x q <= length q), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= find_max' x q)
(find_max' n q <= length q), (length q <= x), (length q <= n), (length q <= find_max' x q), (length q <= find_max' n q), (~ priq q), (~ priqq x q), (~ priqq n q), (~ pow2heap x a2), (~ pow2heap x a1)
(~ pow2heap x gv4), (~ pow2heap x gv3), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n gv4), (~ pow2heap n gv3), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x x gv4), (~ pow2heapp x x gv3)
(~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x n gv4), (~ pow2heapp x n gv3), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n x gv4), (~ pow2heapp n x gv3), (~ pow2heapp n n a2), (~ pow2heapp n n a1)
(~ pow2heapp n n gv4), (~ pow2heapp n n gv3), (~ Permutation q q), (~ In a2 q), (~ In a1 q), (~ In gv4 q), (~ In gv3 q), (~ x < x), (~ x < n), (~ n < x)
(~ n < n), (~ x <= x), (~ x <= n), (~ n <= x), (~ n <= n), (x <> x), (x <> n), (n <> x), (n <> n), (q <> q)
(a2 <> a2), (a2 <> a1), (a2 <> gv4), (a2 <> gv3), (a1 <> a2), (a1 <> a1), (a1 <> gv4), (a1 <> gv3), (gv4 <> a2), (gv4 <> a1)
(gv4 <> gv4), (gv4 <> gv3), (gv3 <> a2), (gv3 <> a1), (gv3 <> gv4), (gv3 <> gv3), (None = Some q), (a2 :: q = q), (a2 :: q = merge q q), (a2 :: q = heap_delete_max a2)
(a2 :: q = heap_delete_max a1), (a2 :: q = heap_delete_max gv4), (a2 :: q = heap_delete_max gv3), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q q gv4), (a2 :: q = join q q gv3), (a2 :: q = insert x q), (a2 :: q = insert n q), (a2 :: q = carry q a2)
(a2 :: q = carry q a1), (a2 :: q = carry q gv4), (a2 :: q = carry q gv3), (a2 :: q = q ++ q), (a2 :: q = []), (a1 :: q = q), (a1 :: q = merge q q), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = heap_delete_max gv4)
(a1 :: q = heap_delete_max gv3), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q q gv4), (a1 :: q = join q q gv3), (a1 :: q = insert x q), (a1 :: q = insert n q), (a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry q gv4)
(a1 :: q = carry q gv3), (a1 :: q = q ++ q), (a1 :: q = []), (gv4 :: q = q), (gv4 :: q = merge q q), (gv4 :: q = heap_delete_max a2), (gv4 :: q = heap_delete_max a1), (gv4 :: q = heap_delete_max gv4), (gv4 :: q = heap_delete_max gv3), (gv4 :: q = join q q a2)
(gv4 :: q = join q q a1), (gv4 :: q = join q q gv4), (gv4 :: q = join q q gv3), (gv4 :: q = insert x q), (gv4 :: q = insert n q), (gv4 :: q = carry q a2), (gv4 :: q = carry q a1), (gv4 :: q = carry q gv4), (gv4 :: q = carry q gv3), (gv4 :: q = q ++ q)
(gv4 :: q = []), (gv3 :: q = q), (gv3 :: q = merge q q), (gv3 :: q = heap_delete_max a2), (gv3 :: q = heap_delete_max a1), (gv3 :: q = heap_delete_max gv4), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q a2), (gv3 :: q = join q q a1), (gv3 :: q = join q q gv4)
(gv3 :: q = join q q gv3), (gv3 :: q = insert x q), (gv3 :: q = insert n q), (gv3 :: q = carry q a2), (gv3 :: q = carry q a1), (gv3 :: q = carry q gv4), (gv3 :: q = carry q gv3), (gv3 :: q = q ++ q), (gv3 :: q = []), (merge q q = q)
(merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = heap_delete_max gv4), (merge q q = heap_delete_max gv3), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q q gv4), (merge q q = join q q gv3), (merge q q = insert x q), (merge q q = insert n q)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry q gv4), (merge q q = carry q gv3), (merge q q = q ++ q), (heap_delete_max a2 = q), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = carry q gv4), (heap_delete_max a2 = carry q gv3)
(heap_delete_max a2 = q ++ q), (heap_delete_max a1 = q), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry q gv4), (heap_delete_max a1 = carry q gv3), (heap_delete_max a1 = q ++ q), (heap_delete_max gv4 = q), (heap_delete_max gv4 = carry q a2), (heap_delete_max gv4 = carry q a1)
(heap_delete_max gv4 = carry q gv4), (heap_delete_max gv4 = carry q gv3), (heap_delete_max gv4 = q ++ q), (heap_delete_max gv3 = q), (heap_delete_max gv3 = carry q a2), (heap_delete_max gv3 = carry q a1), (heap_delete_max gv3 = carry q gv4), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = q ++ q), (join q q a2 = q)
(join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = heap_delete_max gv4), (join q q a2 = heap_delete_max gv3), (join q q a2 = insert x q), (join q q a2 = insert n q), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = carry q gv4), (join q q a2 = carry q gv3)
(join q q a2 = q ++ q), (join q q a1 = q), (join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = heap_delete_max gv4), (join q q a1 = heap_delete_max gv3), (join q q a1 = insert x q), (join q q a1 = insert n q), (join q q a1 = carry q a2), (join q q a1 = carry q a1)
(join q q a1 = carry q gv4), (join q q a1 = carry q gv3), (join q q a1 = q ++ q), (join q q gv4 = q), (join q q gv4 = heap_delete_max a2), (join q q gv4 = heap_delete_max a1), (join q q gv4 = heap_delete_max gv4), (join q q gv4 = heap_delete_max gv3), (join q q gv4 = insert x q), (join q q gv4 = insert n q)
(join q q gv4 = carry q a2), (join q q gv4 = carry q a1), (join q q gv4 = carry q gv4), (join q q gv4 = carry q gv3), (join q q gv4 = q ++ q), (join q q gv3 = q), (join q q gv3 = heap_delete_max a2), (join q q gv3 = heap_delete_max a1), (join q q gv3 = heap_delete_max gv4), (join q q gv3 = heap_delete_max gv3)
(join q q gv3 = insert x q), (join q q gv3 = insert n q), (join q q gv3 = carry q a2), (join q q gv3 = carry q a1), (join q q gv3 = carry q gv4), (join q q gv3 = carry q gv3), (join q q gv3 = q ++ q), (insert x q = q), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1)
(insert x q = heap_delete_max gv4), (insert x q = heap_delete_max gv3), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry q gv4), (insert x q = carry q gv3), (insert x q = q ++ q), (insert n q = q), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1)
(insert n q = heap_delete_max gv4), (insert n q = heap_delete_max gv3), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry q gv4), (insert n q = carry q gv3), (insert n q = q ++ q), (carry q a2 = q), (carry q a2 = q ++ q), (carry q a1 = q)
(carry q a1 = q ++ q), (carry q gv4 = q), (carry q gv4 = q ++ q), (carry q gv3 = q), (carry q gv3 = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = heap_delete_max a2), ([] = heap_delete_max a1)
([] = heap_delete_max gv4), ([] = heap_delete_max gv3), ([] = join q q a2), ([] = join q q a1), ([] = join q q gv4), ([] = join q q gv3), ([] = insert x q), ([] = insert n q), ([] = carry q a2), ([] = carry q a1)
([] = carry q gv4), ([] = carry q gv3), ([] = q ++ q), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux n q), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = gv4), (Node x a2 a2 = gv3), (Node x a2 a2 = smash a2 a2)
(Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a2 gv4), (Node x a2 a2 = smash a2 gv3), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a2 = smash a1 gv4), (Node x a2 a2 = smash a1 gv3), (Node x a2 a2 = smash gv4 a2), (Node x a2 a2 = smash gv4 a1), (Node x a2 a2 = smash gv4 gv4)
(Node x a2 a2 = smash gv4 gv3), (Node x a2 a2 = smash gv3 a2), (Node x a2 a2 = smash gv3 a1), (Node x a2 a2 = smash gv3 gv4), (Node x a2 a2 = smash gv3 gv3), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = gv4), (Node x a2 a1 = gv3), (Node x a2 a1 = smash a2 a2)
(Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a2 gv4), (Node x a2 a1 = smash a2 gv3), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a2 a1 = smash a1 gv4), (Node x a2 a1 = smash a1 gv3), (Node x a2 a1 = smash gv4 a2), (Node x a2 a1 = smash gv4 a1), (Node x a2 a1 = smash gv4 gv4)
(Node x a2 a1 = smash gv4 gv3), (Node x a2 a1 = smash gv3 a2), (Node x a2 a1 = smash gv3 a1), (Node x a2 a1 = smash gv3 gv4), (Node x a2 a1 = smash gv3 gv3), (Node x a2 gv4 = a2), (Node x a2 gv4 = a1), (Node x a2 gv4 = gv4), (Node x a2 gv4 = gv3), (Node x a2 gv4 = smash a2 a2)
(Node x a2 gv4 = smash a2 a1), (Node x a2 gv4 = smash a2 gv4), (Node x a2 gv4 = smash a2 gv3), (Node x a2 gv4 = smash a1 a2), (Node x a2 gv4 = smash a1 a1), (Node x a2 gv4 = smash a1 gv4), (Node x a2 gv4 = smash a1 gv3), (Node x a2 gv4 = smash gv4 a2), (Node x a2 gv4 = smash gv4 a1), (Node x a2 gv4 = smash gv4 gv4)
(Node x a2 gv4 = smash gv4 gv3), (Node x a2 gv4 = smash gv3 a2), (Node x a2 gv4 = smash gv3 a1), (Node x a2 gv4 = smash gv3 gv4), (Node x a2 gv4 = smash gv3 gv3), (Node x a2 gv3 = a2), (Node x a2 gv3 = a1), (Node x a2 gv3 = gv4), (Node x a2 gv3 = gv3), (Node x a2 gv3 = smash a2 a2)
(Node x a2 gv3 = smash a2 a1), (Node x a2 gv3 = smash a2 gv4), (Node x a2 gv3 = smash a2 gv3), (Node x a2 gv3 = smash a1 a2), (Node x a2 gv3 = smash a1 a1), (Node x a2 gv3 = smash a1 gv4), (Node x a2 gv3 = smash a1 gv3), (Node x a2 gv3 = smash gv4 a2), (Node x a2 gv3 = smash gv4 a1), (Node x a2 gv3 = smash gv4 gv4)
(Node x a2 gv3 = smash gv4 gv3), (Node x a2 gv3 = smash gv3 a2), (Node x a2 gv3 = smash gv3 a1), (Node x a2 gv3 = smash gv3 gv4), (Node x a2 gv3 = smash gv3 gv3), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = gv4), (Node x a1 a2 = gv3), (Node x a1 a2 = smash a2 a2)
(Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a2 gv4), (Node x a1 a2 = smash a2 gv3), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a2 = smash a1 gv4), (Node x a1 a2 = smash a1 gv3), (Node x a1 a2 = smash gv4 a2), (Node x a1 a2 = smash gv4 a1), (Node x a1 a2 = smash gv4 gv4)
(Node x a1 a2 = smash gv4 gv3), (Node x a1 a2 = smash gv3 a2), (Node x a1 a2 = smash gv3 a1), (Node x a1 a2 = smash gv3 gv4), (Node x a1 a2 = smash gv3 gv3), (Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = gv4), (Node x a1 a1 = gv3), (Node x a1 a1 = smash a2 a2)
(Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a2 gv4), (Node x a1 a1 = smash a2 gv3), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node x a1 a1 = smash a1 gv4), (Node x a1 a1 = smash a1 gv3), (Node x a1 a1 = smash gv4 a2), (Node x a1 a1 = smash gv4 a1), (Node x a1 a1 = smash gv4 gv4)
(Node x a1 a1 = smash gv4 gv3), (Node x a1 a1 = smash gv3 a2), (Node x a1 a1 = smash gv3 a1), (Node x a1 a1 = smash gv3 gv4), (Node x a1 a1 = smash gv3 gv3), (Node x a1 gv4 = a2), (Node x a1 gv4 = a1), (Node x a1 gv4 = gv4), (Node x a1 gv4 = gv3), (Node x a1 gv4 = smash a2 a2)
(Node x a1 gv4 = smash a2 a1), (Node x a1 gv4 = smash a2 gv4), (Node x a1 gv4 = smash a2 gv3), (Node x a1 gv4 = smash a1 a2), (Node x a1 gv4 = smash a1 a1), (Node x a1 gv4 = smash a1 gv4), (Node x a1 gv4 = smash a1 gv3), (Node x a1 gv4 = smash gv4 a2), (Node x a1 gv4 = smash gv4 a1), (Node x a1 gv4 = smash gv4 gv4)
(Node x a1 gv4 = smash gv4 gv3), (Node x a1 gv4 = smash gv3 a2), (Node x a1 gv4 = smash gv3 a1), (Node x a1 gv4 = smash gv3 gv4), (Node x a1 gv4 = smash gv3 gv3), (Node x a1 gv3 = a2), (Node x a1 gv3 = a1), (Node x a1 gv3 = gv4), (Node x a1 gv3 = gv3), (Node x a1 gv3 = smash a2 a2)
(Node x a1 gv3 = smash a2 a1), (Node x a1 gv3 = smash a2 gv4), (Node x a1 gv3 = smash a2 gv3), (Node x a1 gv3 = smash a1 a2), (Node x a1 gv3 = smash a1 a1), (Node x a1 gv3 = smash a1 gv4), (Node x a1 gv3 = smash a1 gv3), (Node x a1 gv3 = smash gv4 a2), (Node x a1 gv3 = smash gv4 a1), (Node x a1 gv3 = smash gv4 gv4)
(Node x a1 gv3 = smash gv4 gv3), (Node x a1 gv3 = smash gv3 a2), (Node x a1 gv3 = smash gv3 a1), (Node x a1 gv3 = smash gv3 gv4), (Node x a1 gv3 = smash gv3 gv3), (Node x gv4 a2 = a2), (Node x gv4 a2 = a1), (Node x gv4 a2 = gv4), (Node x gv4 a2 = gv3), (Node x gv4 a2 = smash a2 a2)
(Node x gv4 a2 = smash a2 a1), (Node x gv4 a2 = smash a2 gv4), (Node x gv4 a2 = smash a2 gv3), (Node x gv4 a2 = smash a1 a2), (Node x gv4 a2 = smash a1 a1), (Node x gv4 a2 = smash a1 gv4), (Node x gv4 a2 = smash a1 gv3), (Node x gv4 a2 = smash gv4 a2), (Node x gv4 a2 = smash gv4 a1), (Node x gv4 a2 = smash gv4 gv4)
(Node x gv4 a2 = smash gv4 gv3), (Node x gv4 a2 = smash gv3 a2), (Node x gv4 a2 = smash gv3 a1), (Node x gv4 a2 = smash gv3 gv4), (Node x gv4 a2 = smash gv3 gv3), (Node x gv4 a1 = a2), (Node x gv4 a1 = a1), (Node x gv4 a1 = gv4), (Node x gv4 a1 = gv3), (Node x gv4 a1 = smash a2 a2)
(Node x gv4 a1 = smash a2 a1), (Node x gv4 a1 = smash a2 gv4), (Node x gv4 a1 = smash a2 gv3), (Node x gv4 a1 = smash a1 a2), (Node x gv4 a1 = smash a1 a1), (Node x gv4 a1 = smash a1 gv4), (Node x gv4 a1 = smash a1 gv3), (Node x gv4 a1 = smash gv4 a2), (Node x gv4 a1 = smash gv4 a1), (Node x gv4 a1 = smash gv4 gv4)
(Node x gv4 a1 = smash gv4 gv3), (Node x gv4 a1 = smash gv3 a2), (Node x gv4 a1 = smash gv3 a1), (Node x gv4 a1 = smash gv3 gv4), (Node x gv4 a1 = smash gv3 gv3), (Node x gv4 gv4 = a2), (Node x gv4 gv4 = a1), (Node x gv4 gv4 = gv4), (Node x gv4 gv4 = gv3), (Node x gv4 gv4 = smash a2 a2)
(Node x gv4 gv4 = smash a2 a1), (Node x gv4 gv4 = smash a2 gv4), (Node x gv4 gv4 = smash a2 gv3), (Node x gv4 gv4 = smash a1 a2), (Node x gv4 gv4 = smash a1 a1), (Node x gv4 gv4 = smash a1 gv4), (Node x gv4 gv4 = smash a1 gv3), (Node x gv4 gv4 = smash gv4 a2), (Node x gv4 gv4 = smash gv4 a1), (Node x gv4 gv4 = smash gv4 gv4)
(Node x gv4 gv4 = smash gv4 gv3), (Node x gv4 gv4 = smash gv3 a2), (Node x gv4 gv4 = smash gv3 a1), (Node x gv4 gv4 = smash gv3 gv4), (Node x gv4 gv4 = smash gv3 gv3), (Node x gv4 gv3 = a2), (Node x gv4 gv3 = a1), (Node x gv4 gv3 = gv4), (Node x gv4 gv3 = gv3), (Node x gv4 gv3 = smash a2 a2)
(Node x gv4 gv3 = smash a2 a1), (Node x gv4 gv3 = smash a2 gv4), (Node x gv4 gv3 = smash a2 gv3), (Node x gv4 gv3 = smash a1 a2), (Node x gv4 gv3 = smash a1 a1), (Node x gv4 gv3 = smash a1 gv4), (Node x gv4 gv3 = smash a1 gv3), (Node x gv4 gv3 = smash gv4 a2), (Node x gv4 gv3 = smash gv4 a1), (Node x gv4 gv3 = smash gv4 gv4)
(Node x gv4 gv3 = smash gv4 gv3), (Node x gv4 gv3 = smash gv3 a2), (Node x gv4 gv3 = smash gv3 a1), (Node x gv4 gv3 = smash gv3 gv4), (Node x gv4 gv3 = smash gv3 gv3), (Node x gv3 a2 = a2), (Node x gv3 a2 = a1), (Node x gv3 a2 = gv4), (Node x gv3 a2 = gv3), (Node x gv3 a2 = smash a2 a2)
(Node x gv3 a2 = smash a2 a1), (Node x gv3 a2 = smash a2 gv4), (Node x gv3 a2 = smash a2 gv3), (Node x gv3 a2 = smash a1 a2), (Node x gv3 a2 = smash a1 a1), (Node x gv3 a2 = smash a1 gv4), (Node x gv3 a2 = smash a1 gv3), (Node x gv3 a2 = smash gv4 a2), (Node x gv3 a2 = smash gv4 a1), (Node x gv3 a2 = smash gv4 gv4)
(Node x gv3 a2 = smash gv4 gv3), (Node x gv3 a2 = smash gv3 a2), (Node x gv3 a2 = smash gv3 a1), (Node x gv3 a2 = smash gv3 gv4), (Node x gv3 a2 = smash gv3 gv3), (Node x gv3 a1 = a2), (Node x gv3 a1 = a1), (Node x gv3 a1 = gv4), (Node x gv3 a1 = gv3), (Node x gv3 a1 = smash a2 a2)
(Node x gv3 a1 = smash a2 a1), (Node x gv3 a1 = smash a2 gv4), (Node x gv3 a1 = smash a2 gv3), (Node x gv3 a1 = smash a1 a2), (Node x gv3 a1 = smash a1 a1), (Node x gv3 a1 = smash a1 gv4), (Node x gv3 a1 = smash a1 gv3), (Node x gv3 a1 = smash gv4 a2), (Node x gv3 a1 = smash gv4 a1), (Node x gv3 a1 = smash gv4 gv4)
(Node x gv3 a1 = smash gv4 gv3), (Node x gv3 a1 = smash gv3 a2), (Node x gv3 a1 = smash gv3 a1), (Node x gv3 a1 = smash gv3 gv4), (Node x gv3 a1 = smash gv3 gv3), (Node x gv3 gv4 = a2), (Node x gv3 gv4 = a1), (Node x gv3 gv4 = gv4), (Node x gv3 gv4 = gv3), (Node x gv3 gv4 = smash a2 a2)
(Node x gv3 gv4 = smash a2 a1), (Node x gv3 gv4 = smash a2 gv4), (Node x gv3 gv4 = smash a2 gv3), (Node x gv3 gv4 = smash a1 a2), (Node x gv3 gv4 = smash a1 a1), (Node x gv3 gv4 = smash a1 gv4), (Node x gv3 gv4 = smash a1 gv3), (Node x gv3 gv4 = smash gv4 a2), (Node x gv3 gv4 = smash gv4 a1), (Node x gv3 gv4 = smash gv4 gv4)
(Node x gv3 gv4 = smash gv4 gv3), (Node x gv3 gv4 = smash gv3 a2), (Node x gv3 gv4 = smash gv3 a1), (Node x gv3 gv4 = smash gv3 gv4), (Node x gv3 gv4 = smash gv3 gv3), (Node x gv3 gv3 = a2), (Node x gv3 gv3 = a1), (Node x gv3 gv3 = gv4), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash a2 a2)
(Node x gv3 gv3 = smash a2 a1), (Node x gv3 gv3 = smash a2 gv4), (Node x gv3 gv3 = smash a2 gv3), (Node x gv3 gv3 = smash a1 a2), (Node x gv3 gv3 = smash a1 a1), (Node x gv3 gv3 = smash a1 gv4), (Node x gv3 gv3 = smash a1 gv3), (Node x gv3 gv3 = smash gv4 a2), (Node x gv3 gv3 = smash gv4 a1), (Node x gv3 gv3 = smash gv4 gv4)
(Node x gv3 gv3 = smash gv4 gv3), (Node x gv3 gv3 = smash gv3 a2), (Node x gv3 gv3 = smash gv3 a1), (Node x gv3 gv3 = smash gv3 gv4), (Node x gv3 gv3 = smash gv3 gv3), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv4), (Node n a2 a2 = gv3), (Node n a2 a2 = smash a2 a2)
(Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv4), (Node n a2 a2 = smash a2 gv3), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv4), (Node n a2 a2 = smash a1 gv3), (Node n a2 a2 = smash gv4 a2), (Node n a2 a2 = smash gv4 a1), (Node n a2 a2 = smash gv4 gv4)
(Node n a2 a2 = smash gv4 gv3), (Node n a2 a2 = smash gv3 a2), (Node n a2 a2 = smash gv3 a1), (Node n a2 a2 = smash gv3 gv4), (Node n a2 a2 = smash gv3 gv3), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv4), (Node n a2 a1 = gv3), (Node n a2 a1 = smash a2 a2)
(Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv4), (Node n a2 a1 = smash a2 gv3), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv4), (Node n a2 a1 = smash a1 gv3), (Node n a2 a1 = smash gv4 a2), (Node n a2 a1 = smash gv4 a1), (Node n a2 a1 = smash gv4 gv4)
(Node n a2 a1 = smash gv4 gv3), (Node n a2 a1 = smash gv3 a2), (Node n a2 a1 = smash gv3 a1), (Node n a2 a1 = smash gv3 gv4), (Node n a2 a1 = smash gv3 gv3), (Node n a2 gv4 = a2), (Node n a2 gv4 = a1), (Node n a2 gv4 = gv4), (Node n a2 gv4 = gv3), (Node n a2 gv4 = smash a2 a2)
(Node n a2 gv4 = smash a2 a1), (Node n a2 gv4 = smash a2 gv4), (Node n a2 gv4 = smash a2 gv3), (Node n a2 gv4 = smash a1 a2), (Node n a2 gv4 = smash a1 a1), (Node n a2 gv4 = smash a1 gv4), (Node n a2 gv4 = smash a1 gv3), (Node n a2 gv4 = smash gv4 a2), (Node n a2 gv4 = smash gv4 a1), (Node n a2 gv4 = smash gv4 gv4)
(Node n a2 gv4 = smash gv4 gv3), (Node n a2 gv4 = smash gv3 a2), (Node n a2 gv4 = smash gv3 a1), (Node n a2 gv4 = smash gv3 gv4), (Node n a2 gv4 = smash gv3 gv3), (Node n a2 gv3 = a2), (Node n a2 gv3 = a1), (Node n a2 gv3 = gv4), (Node n a2 gv3 = gv3), (Node n a2 gv3 = smash a2 a2)
(Node n a2 gv3 = smash a2 a1), (Node n a2 gv3 = smash a2 gv4), (Node n a2 gv3 = smash a2 gv3), (Node n a2 gv3 = smash a1 a2), (Node n a2 gv3 = smash a1 a1), (Node n a2 gv3 = smash a1 gv4), (Node n a2 gv3 = smash a1 gv3), (Node n a2 gv3 = smash gv4 a2), (Node n a2 gv3 = smash gv4 a1), (Node n a2 gv3 = smash gv4 gv4)
(Node n a2 gv3 = smash gv4 gv3), (Node n a2 gv3 = smash gv3 a2), (Node n a2 gv3 = smash gv3 a1), (Node n a2 gv3 = smash gv3 gv4), (Node n a2 gv3 = smash gv3 gv3), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv4), (Node n a1 a2 = gv3), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv4), (Node n a1 a2 = smash a2 gv3), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv4), (Node n a1 a2 = smash a1 gv3), (Node n a1 a2 = smash gv4 a2), (Node n a1 a2 = smash gv4 a1), (Node n a1 a2 = smash gv4 gv4)
(Node n a1 a2 = smash gv4 gv3), (Node n a1 a2 = smash gv3 a2), (Node n a1 a2 = smash gv3 a1), (Node n a1 a2 = smash gv3 gv4), (Node n a1 a2 = smash gv3 gv3), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv4), (Node n a1 a1 = gv3), (Node n a1 a1 = smash a2 a2)
(Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv4), (Node n a1 a1 = smash a2 gv3), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv4), (Node n a1 a1 = smash a1 gv3), (Node n a1 a1 = smash gv4 a2), (Node n a1 a1 = smash gv4 a1), (Node n a1 a1 = smash gv4 gv4)
(Node n a1 a1 = smash gv4 gv3), (Node n a1 a1 = smash gv3 a2), (Node n a1 a1 = smash gv3 a1), (Node n a1 a1 = smash gv3 gv4), (Node n a1 a1 = smash gv3 gv3), (Node n a1 gv4 = a2), (Node n a1 gv4 = a1), (Node n a1 gv4 = gv4), (Node n a1 gv4 = gv3), (Node n a1 gv4 = smash a2 a2)
(Node n a1 gv4 = smash a2 a1), (Node n a1 gv4 = smash a2 gv4), (Node n a1 gv4 = smash a2 gv3), (Node n a1 gv4 = smash a1 a2), (Node n a1 gv4 = smash a1 a1), (Node n a1 gv4 = smash a1 gv4), (Node n a1 gv4 = smash a1 gv3), (Node n a1 gv4 = smash gv4 a2), (Node n a1 gv4 = smash gv4 a1), (Node n a1 gv4 = smash gv4 gv4)
(Node n a1 gv4 = smash gv4 gv3), (Node n a1 gv4 = smash gv3 a2), (Node n a1 gv4 = smash gv3 a1), (Node n a1 gv4 = smash gv3 gv4), (Node n a1 gv4 = smash gv3 gv3), (Node n a1 gv3 = a2), (Node n a1 gv3 = a1), (Node n a1 gv3 = gv4), (Node n a1 gv3 = gv3), (Node n a1 gv3 = smash a2 a2)
(Node n a1 gv3 = smash a2 a1), (Node n a1 gv3 = smash a2 gv4), (Node n a1 gv3 = smash a2 gv3), (Node n a1 gv3 = smash a1 a2), (Node n a1 gv3 = smash a1 a1), (Node n a1 gv3 = smash a1 gv4), (Node n a1 gv3 = smash a1 gv3), (Node n a1 gv3 = smash gv4 a2), (Node n a1 gv3 = smash gv4 a1), (Node n a1 gv3 = smash gv4 gv4)
(Node n a1 gv3 = smash gv4 gv3), (Node n a1 gv3 = smash gv3 a2), (Node n a1 gv3 = smash gv3 a1), (Node n a1 gv3 = smash gv3 gv4), (Node n a1 gv3 = smash gv3 gv3), (Node n gv4 a2 = a2), (Node n gv4 a2 = a1), (Node n gv4 a2 = gv4), (Node n gv4 a2 = gv3), (Node n gv4 a2 = smash a2 a2)
(Node n gv4 a2 = smash a2 a1), (Node n gv4 a2 = smash a2 gv4), (Node n gv4 a2 = smash a2 gv3), (Node n gv4 a2 = smash a1 a2), (Node n gv4 a2 = smash a1 a1), (Node n gv4 a2 = smash a1 gv4), (Node n gv4 a2 = smash a1 gv3), (Node n gv4 a2 = smash gv4 a2), (Node n gv4 a2 = smash gv4 a1), (Node n gv4 a2 = smash gv4 gv4)
(Node n gv4 a2 = smash gv4 gv3), (Node n gv4 a2 = smash gv3 a2), (Node n gv4 a2 = smash gv3 a1), (Node n gv4 a2 = smash gv3 gv4), (Node n gv4 a2 = smash gv3 gv3), (Node n gv4 a1 = a2), (Node n gv4 a1 = a1), (Node n gv4 a1 = gv4), (Node n gv4 a1 = gv3), (Node n gv4 a1 = smash a2 a2)
(Node n gv4 a1 = smash a2 a1), (Node n gv4 a1 = smash a2 gv4), (Node n gv4 a1 = smash a2 gv3), (Node n gv4 a1 = smash a1 a2), (Node n gv4 a1 = smash a1 a1), (Node n gv4 a1 = smash a1 gv4), (Node n gv4 a1 = smash a1 gv3), (Node n gv4 a1 = smash gv4 a2), (Node n gv4 a1 = smash gv4 a1), (Node n gv4 a1 = smash gv4 gv4)
(Node n gv4 a1 = smash gv4 gv3), (Node n gv4 a1 = smash gv3 a2), (Node n gv4 a1 = smash gv3 a1), (Node n gv4 a1 = smash gv3 gv4), (Node n gv4 a1 = smash gv3 gv3), (Node n gv4 gv4 = a2), (Node n gv4 gv4 = a1), (Node n gv4 gv4 = gv4), (Node n gv4 gv4 = gv3), (Node n gv4 gv4 = smash a2 a2)
(Node n gv4 gv4 = smash a2 a1), (Node n gv4 gv4 = smash a2 gv4), (Node n gv4 gv4 = smash a2 gv3), (Node n gv4 gv4 = smash a1 a2), (Node n gv4 gv4 = smash a1 a1), (Node n gv4 gv4 = smash a1 gv4), (Node n gv4 gv4 = smash a1 gv3), (Node n gv4 gv4 = smash gv4 a2), (Node n gv4 gv4 = smash gv4 a1), (Node n gv4 gv4 = smash gv4 gv4)
(Node n gv4 gv4 = smash gv4 gv3), (Node n gv4 gv4 = smash gv3 a2), (Node n gv4 gv4 = smash gv3 a1), (Node n gv4 gv4 = smash gv3 gv4), (Node n gv4 gv4 = smash gv3 gv3), (Node n gv4 gv3 = a2), (Node n gv4 gv3 = a1), (Node n gv4 gv3 = gv4), (Node n gv4 gv3 = gv3), (Node n gv4 gv3 = smash a2 a2)
(Node n gv4 gv3 = smash a2 a1), (Node n gv4 gv3 = smash a2 gv4), (Node n gv4 gv3 = smash a2 gv3), (Node n gv4 gv3 = smash a1 a2), (Node n gv4 gv3 = smash a1 a1), (Node n gv4 gv3 = smash a1 gv4), (Node n gv4 gv3 = smash a1 gv3), (Node n gv4 gv3 = smash gv4 a2), (Node n gv4 gv3 = smash gv4 a1), (Node n gv4 gv3 = smash gv4 gv4)
(Node n gv4 gv3 = smash gv4 gv3), (Node n gv4 gv3 = smash gv3 a2), (Node n gv4 gv3 = smash gv3 a1), (Node n gv4 gv3 = smash gv3 gv4), (Node n gv4 gv3 = smash gv3 gv3), (Node n gv3 a2 = a2), (Node n gv3 a2 = a1), (Node n gv3 a2 = gv4), (Node n gv3 a2 = gv3), (Node n gv3 a2 = smash a2 a2)
(Node n gv3 a2 = smash a2 a1), (Node n gv3 a2 = smash a2 gv4), (Node n gv3 a2 = smash a2 gv3), (Node n gv3 a2 = smash a1 a2), (Node n gv3 a2 = smash a1 a1), (Node n gv3 a2 = smash a1 gv4), (Node n gv3 a2 = smash a1 gv3), (Node n gv3 a2 = smash gv4 a2), (Node n gv3 a2 = smash gv4 a1), (Node n gv3 a2 = smash gv4 gv4)
(Node n gv3 a2 = smash gv4 gv3), (Node n gv3 a2 = smash gv3 a2), (Node n gv3 a2 = smash gv3 a1), (Node n gv3 a2 = smash gv3 gv4), (Node n gv3 a2 = smash gv3 gv3), (Node n gv3 a1 = a2), (Node n gv3 a1 = a1), (Node n gv3 a1 = gv4), (Node n gv3 a1 = gv3), (Node n gv3 a1 = smash a2 a2)
(Node n gv3 a1 = smash a2 a1), (Node n gv3 a1 = smash a2 gv4), (Node n gv3 a1 = smash a2 gv3), (Node n gv3 a1 = smash a1 a2), (Node n gv3 a1 = smash a1 a1), (Node n gv3 a1 = smash a1 gv4), (Node n gv3 a1 = smash a1 gv3), (Node n gv3 a1 = smash gv4 a2), (Node n gv3 a1 = smash gv4 a1), (Node n gv3 a1 = smash gv4 gv4)
(Node n gv3 a1 = smash gv4 gv3), (Node n gv3 a1 = smash gv3 a2), (Node n gv3 a1 = smash gv3 a1), (Node n gv3 a1 = smash gv3 gv4), (Node n gv3 a1 = smash gv3 gv3), (Node n gv3 gv4 = a2), (Node n gv3 gv4 = a1), (Node n gv3 gv4 = gv4), (Node n gv3 gv4 = gv3), (Node n gv3 gv4 = smash a2 a2)
(Node n gv3 gv4 = smash a2 a1), (Node n gv3 gv4 = smash a2 gv4), (Node n gv3 gv4 = smash a2 gv3), (Node n gv3 gv4 = smash a1 a2), (Node n gv3 gv4 = smash a1 a1), (Node n gv3 gv4 = smash a1 gv4), (Node n gv3 gv4 = smash a1 gv3), (Node n gv3 gv4 = smash gv4 a2), (Node n gv3 gv4 = smash gv4 a1), (Node n gv3 gv4 = smash gv4 gv4)
(Node n gv3 gv4 = smash gv4 gv3), (Node n gv3 gv4 = smash gv3 a2), (Node n gv3 gv4 = smash gv3 a1), (Node n gv3 gv4 = smash gv3 gv4), (Node n gv3 gv4 = smash gv3 gv3), (Node n gv3 gv3 = a2), (Node n gv3 gv3 = a1), (Node n gv3 gv3 = gv4), (Node n gv3 gv3 = gv3), (Node n gv3 gv3 = smash a2 a2)
(Node n gv3 gv3 = smash a2 a1), (Node n gv3 gv3 = smash a2 gv4), (Node n gv3 gv3 = smash a2 gv3), (Node n gv3 gv3 = smash a1 a2), (Node n gv3 gv3 = smash a1 a1), (Node n gv3 gv3 = smash a1 gv4), (Node n gv3 gv3 = smash a1 gv3), (Node n gv3 gv3 = smash gv4 a2), (Node n gv3 gv3 = smash gv4 a1), (Node n gv3 gv3 = smash gv4 gv4)
(Node n gv3 gv3 = smash gv4 gv3), (Node n gv3 gv3 = smash gv3 a2), (Node n gv3 gv3 = smash gv3 a1), (Node n gv3 gv3 = smash gv3 gv4), (Node n gv3 gv3 = smash gv3 gv3), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = gv4), (smash a2 a2 = gv3), (smash a2 a1 = a2)
(smash a2 a1 = a1), (smash a2 a1 = gv4), (smash a2 a1 = gv3), (smash a2 gv4 = a2), (smash a2 gv4 = a1), (smash a2 gv4 = gv4), (smash a2 gv4 = gv3), (smash a2 gv3 = a2), (smash a2 gv3 = a1), (smash a2 gv3 = gv4)
(smash a2 gv3 = gv3), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = gv4), (smash a1 a2 = gv3), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv4), (smash a1 a1 = gv3), (smash a1 gv4 = a2)
(smash a1 gv4 = a1), (smash a1 gv4 = gv4), (smash a1 gv4 = gv3), (smash a1 gv3 = a2), (smash a1 gv3 = a1), (smash a1 gv3 = gv4), (smash a1 gv3 = gv3), (smash gv4 a2 = a2), (smash gv4 a2 = a1), (smash gv4 a2 = gv4)
(smash gv4 a2 = gv3), (smash gv4 a1 = a2), (smash gv4 a1 = a1), (smash gv4 a1 = gv4), (smash gv4 a1 = gv3), (smash gv4 gv4 = a2), (smash gv4 gv4 = a1), (smash gv4 gv4 = gv4), (smash gv4 gv4 = gv3), (smash gv4 gv3 = a2)
(smash gv4 gv3 = a1), (smash gv4 gv3 = gv4), (smash gv4 gv3 = gv3), (smash gv3 a2 = a2), (smash gv3 a2 = a1), (smash gv3 a2 = gv4), (smash gv3 a2 = gv3), (smash gv3 a1 = a2), (smash gv3 a1 = a1), (smash gv3 a1 = gv4)
(smash gv3 a1 = gv3), (smash gv3 gv4 = a2), (smash gv3 gv4 = a1), (smash gv3 gv4 = gv4), (smash gv3 gv4 = gv3), (smash gv3 gv3 = a2), (smash gv3 gv3 = a1), (smash gv3 gv3 = gv4), (smash gv3 gv3 = gv3), (Leaf = Node x a2 a2)
(Leaf = Node x a2 a1), (Leaf = Node x a2 gv4), (Leaf = Node x a2 gv3), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node x a1 gv4), (Leaf = Node x a1 gv3), (Leaf = Node x gv4 a2), (Leaf = Node x gv4 a1), (Leaf = Node x gv4 gv4)
(Leaf = Node x gv4 gv3), (Leaf = Node x gv3 a2), (Leaf = Node x gv3 a1), (Leaf = Node x gv3 gv4), (Leaf = Node x gv3 gv3), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 gv4), (Leaf = Node n a2 gv3), (Leaf = Node n a1 a2)
(Leaf = Node n a1 a1), (Leaf = Node n a1 gv4), (Leaf = Node n a1 gv3), (Leaf = Node n gv4 a2), (Leaf = Node n gv4 a1), (Leaf = Node n gv4 gv4), (Leaf = Node n gv4 gv3), (Leaf = Node n gv3 a2), (Leaf = Node n gv3 a1), (Leaf = Node n gv3 gv4)
(Leaf = Node n gv3 gv3), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv4), (Leaf = smash a2 gv3), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 gv4), (Leaf = smash a1 gv3), (Leaf = smash gv4 a2)
(Leaf = smash gv4 a1), (Leaf = smash gv4 gv4), (Leaf = smash gv4 gv3), (Leaf = smash gv3 a2), (Leaf = smash gv3 a1), (Leaf = smash gv3 gv4), (Leaf = smash gv3 gv3), (find_max' x q = x), (find_max' x q = n), (find_max' n q = x)
(find_max' n q = n), (length q = x), (length q = n), (length q = find_max' x q), (length q = find_max' n q), (Some x = find_max q), (Some n = find_max q), (None = Some x), (None = Some n), (None = find_max q)
(None = Some a2), (None = Some a1), (None = Some gv4), (None = Some gv3), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n))
((x >? n) = (n >=? x)), ((x >? n) = (n >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n))

Label: 2 (2)
(priq q), (priq gv2), (priqq x q), (priqq x gv2), (priqq n q), (priqq n gv2), (pow2heap x a2), (pow2heap x a1), (pow2heap x gv4), (pow2heap n a2)
(pow2heap n a1), (pow2heap n gv4), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x x gv4), (pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp x n gv4), (pow2heapp n x a2), (pow2heapp n x a1)
(pow2heapp n x gv4), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv4), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2), (In a2 q), (In a2 gv2)
(In a1 q), (In a1 gv2), (In gv4 q), (In gv4 gv2), (x < x), (x < n), (n < x), (n < n), (x <= x), (x <= n)
(n <= x), (n <= n), (x = x), (x = n), (n = x), (n = n), (a2 = a2), (a2 = a1), (a2 = gv4), (a1 = a2)
(a1 = a1), (a1 = gv4), (gv4 = a2), (gv4 = a1), (gv4 = gv4), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2), (false = (x >? x))
(false = (x >? n)), (false = (n >? x)), (false = (n >? n)), (false = (x >=? x)), (false = (x >=? n)), (false = (n >=? x)), (false = (n >=? n)), (true = (x >? x)), (true = (x >? n)), (true = (n >? x))
(true = (n >? n)), (true = (x >=? x)), (true = (x >=? n)), (true = (n >=? x)), (true = (n >=? n)), (Abs q []), (Abs gv2 []), (Abs (a2 :: q) []), (Abs (a2 :: gv2) []), (Abs (a1 :: q) [])
(Abs (a1 :: gv2) []), (Abs (gv4 :: q) []), (Abs (gv4 :: gv2) []), (Abs (merge q q) []), (Abs (merge q gv2) []), (Abs (merge gv2 q) []), (Abs (merge gv2 gv2) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max gv4) [])
(Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q q gv4) []), (Abs (join q gv2 a2) []), (Abs (join q gv2 a1) []), (Abs (join q gv2 gv4) []), (Abs (join gv2 q a2) []), (Abs (join gv2 q a1) []), (Abs (join gv2 q gv4) []), (Abs (join gv2 gv2 a2) [])
(Abs (join gv2 gv2 a1) []), (Abs (join gv2 gv2 gv4) []), (Abs (insert x q) []), (Abs (insert x gv2) []), (Abs (insert n q) []), (Abs (insert n gv2) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry q gv4) []), (Abs (carry gv2 a2) [])
(Abs (carry gv2 a1) []), (Abs (carry gv2 gv4) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (a2 :: q) [])
(priqueue_elems (a2 :: gv2) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (a1 :: gv2) []), (priqueue_elems (gv4 :: q) []), (priqueue_elems (gv4 :: gv2) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (heap_delete_max a2) [])
(priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv4) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) []), (priqueue_elems (join q q gv4) []), (priqueue_elems (join q gv2 a2) []), (priqueue_elems (join q gv2 a1) []), (priqueue_elems (join q gv2 gv4) []), (priqueue_elems (join gv2 q a2) []), (priqueue_elems (join gv2 q a1) [])
(priqueue_elems (join gv2 q gv4) []), (priqueue_elems (join gv2 gv2 a2) []), (priqueue_elems (join gv2 gv2 a1) []), (priqueue_elems (join gv2 gv2 gv4) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv2) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv2) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) [])
(priqueue_elems (carry q gv4) []), (priqueue_elems (carry gv2 a2) []), (priqueue_elems (carry gv2 a1) []), (priqueue_elems (carry gv2 gv4) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) []), (priqueue_elems (gv2 ++ gv2) []), (priqueue_elems [] []), (tree_elems a2 [])
(tree_elems a1 []), (tree_elems gv4 []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a2 gv4) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node x a1 gv4) []), (tree_elems (Node x gv4 a2) []), (tree_elems (Node x gv4 a1) [])
(tree_elems (Node x gv4 gv4) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv4) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv4) []), (tree_elems (Node n gv4 a2) []), (tree_elems (Node n gv4 a1) []), (tree_elems (Node n gv4 gv4) [])
(tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv4) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv4) []), (tree_elems (smash gv4 a2) []), (tree_elems (smash gv4 a1) []), (tree_elems (smash gv4 gv4) []), (tree_elems Leaf [])
(priq (a2 :: q)), (priq (a2 :: gv2)), (priq (a1 :: q)), (priq (a1 :: gv2)), (priq (gv4 :: q)), (priq (gv4 :: gv2)), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2))
(priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max gv4)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q q gv4)), (priq (join q gv2 a2)), (priq (join q gv2 a1)), (priq (join q gv2 gv4)), (priq (join gv2 q a2))
(priq (join gv2 q a1)), (priq (join gv2 q gv4)), (priq (join gv2 gv2 a2)), (priq (join gv2 gv2 a1)), (priq (join gv2 gv2 gv4)), (priq (insert x q)), (priq (insert x gv2)), (priq (insert n q)), (priq (insert n gv2)), (priq (carry q a2))
(priq (carry q a1)), (priq (carry q gv4)), (priq (carry gv2 a2)), (priq (carry gv2 a1)), (priq (carry gv2 gv4)), (priq (q ++ q)), (priq (q ++ gv2)), (priq (gv2 ++ q)), (priq (gv2 ++ gv2)), (priqq x (a2 :: q))
(priqq x (a2 :: gv2)), (priqq x (a1 :: q)), (priqq x (a1 :: gv2)), (priqq x (gv4 :: q)), (priqq x (gv4 :: gv2)), (priqq x (merge q q)), (priqq x (merge q gv2)), (priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (heap_delete_max a2))
(priqq x (heap_delete_max a1)), (priqq x (heap_delete_max gv4)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q q gv4)), (priqq x (join q gv2 a2)), (priqq x (join q gv2 a1)), (priqq x (join q gv2 gv4)), (priqq x (join gv2 q a2)), (priqq x (join gv2 q a1))
(priqq x (join gv2 q gv4)), (priqq x (join gv2 gv2 a2)), (priqq x (join gv2 gv2 a1)), (priqq x (join gv2 gv2 gv4)), (priqq x (insert x q)), (priqq x (insert x gv2)), (priqq x (insert n q)), (priqq x (insert n gv2)), (priqq x (carry q a2)), (priqq x (carry q a1))
(priqq x (carry q gv4)), (priqq x (carry gv2 a2)), (priqq x (carry gv2 a1)), (priqq x (carry gv2 gv4)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2)), (priqq n (a2 :: q)), (priqq n (a2 :: gv2))
(priqq n (a1 :: q)), (priqq n (a1 :: gv2)), (priqq n (gv4 :: q)), (priqq n (gv4 :: gv2)), (priqq n (merge q q)), (priqq n (merge q gv2)), (priqq n (merge gv2 q)), (priqq n (merge gv2 gv2)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1))
(priqq n (heap_delete_max gv4)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q q gv4)), (priqq n (join q gv2 a2)), (priqq n (join q gv2 a1)), (priqq n (join q gv2 gv4)), (priqq n (join gv2 q a2)), (priqq n (join gv2 q a1)), (priqq n (join gv2 q gv4))
(priqq n (join gv2 gv2 a2)), (priqq n (join gv2 gv2 a1)), (priqq n (join gv2 gv2 gv4)), (priqq n (insert x q)), (priqq n (insert x gv2)), (priqq n (insert n q)), (priqq n (insert n gv2)), (priqq n (carry q a2)), (priqq n (carry q a1)), (priqq n (carry q gv4))
(priqq n (carry gv2 a2)), (priqq n (carry gv2 a1)), (priqq n (carry gv2 gv4)), (priqq n (q ++ q)), (priqq n (q ++ gv2)), (priqq n (gv2 ++ q)), (priqq n (gv2 ++ gv2)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv2), (priqq (find_max' x q) (a2 :: q))
(priqq (find_max' x q) (a2 :: gv2)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv2)), (priqq (find_max' x q) (gv4 :: q)), (priqq (find_max' x q) (gv4 :: gv2)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q)), (priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (heap_delete_max a2))
(priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (heap_delete_max gv4)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q q gv4)), (priqq (find_max' x q) (join q gv2 a2)), (priqq (find_max' x q) (join q gv2 a1)), (priqq (find_max' x q) (join q gv2 gv4)), (priqq (find_max' x q) (join gv2 q a2)), (priqq (find_max' x q) (join gv2 q a1))
(priqq (find_max' x q) (join gv2 q gv4)), (priqq (find_max' x q) (join gv2 gv2 a2)), (priqq (find_max' x q) (join gv2 gv2 a1)), (priqq (find_max' x q) (join gv2 gv2 gv4)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2)), (priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv2)), (priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1))
(priqq (find_max' x q) (carry q gv4)), (priqq (find_max' x q) (carry gv2 a2)), (priqq (find_max' x q) (carry gv2 a1)), (priqq (find_max' x q) (carry gv2 gv4)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q)), (priqq (find_max' x q) (gv2 ++ gv2)), (priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2)
(priqq (find_max' x gv2) (a2 :: q)), (priqq (find_max' x gv2) (a2 :: gv2)), (priqq (find_max' x gv2) (a1 :: q)), (priqq (find_max' x gv2) (a1 :: gv2)), (priqq (find_max' x gv2) (gv4 :: q)), (priqq (find_max' x gv2) (gv4 :: gv2)), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2)), (priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2))
(priqq (find_max' x gv2) (heap_delete_max a2)), (priqq (find_max' x gv2) (heap_delete_max a1)), (priqq (find_max' x gv2) (heap_delete_max gv4)), (priqq (find_max' x gv2) (join q q a2)), (priqq (find_max' x gv2) (join q q a1)), (priqq (find_max' x gv2) (join q q gv4)), (priqq (find_max' x gv2) (join q gv2 a2)), (priqq (find_max' x gv2) (join q gv2 a1)), (priqq (find_max' x gv2) (join q gv2 gv4)), (priqq (find_max' x gv2) (join gv2 q a2))
(priqq (find_max' x gv2) (join gv2 q a1)), (priqq (find_max' x gv2) (join gv2 q gv4)), (priqq (find_max' x gv2) (join gv2 gv2 a2)), (priqq (find_max' x gv2) (join gv2 gv2 a1)), (priqq (find_max' x gv2) (join gv2 gv2 gv4)), (priqq (find_max' x gv2) (insert x q)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (insert n q)), (priqq (find_max' x gv2) (insert n gv2)), (priqq (find_max' x gv2) (carry q a2))
(priqq (find_max' x gv2) (carry q a1)), (priqq (find_max' x gv2) (carry q gv4)), (priqq (find_max' x gv2) (carry gv2 a2)), (priqq (find_max' x gv2) (carry gv2 a1)), (priqq (find_max' x gv2) (carry gv2 gv4)), (priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ q)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (find_max' n q) q)
(priqq (find_max' n q) gv2), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a2 :: gv2)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv2)), (priqq (find_max' n q) (gv4 :: q)), (priqq (find_max' n q) (gv4 :: gv2)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv2)), (priqq (find_max' n q) (merge gv2 q))
(priqq (find_max' n q) (merge gv2 gv2)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (heap_delete_max gv4)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q q gv4)), (priqq (find_max' n q) (join q gv2 a2)), (priqq (find_max' n q) (join q gv2 a1)), (priqq (find_max' n q) (join q gv2 gv4))
(priqq (find_max' n q) (join gv2 q a2)), (priqq (find_max' n q) (join gv2 q a1)), (priqq (find_max' n q) (join gv2 q gv4)), (priqq (find_max' n q) (join gv2 gv2 a2)), (priqq (find_max' n q) (join gv2 gv2 a1)), (priqq (find_max' n q) (join gv2 gv2 gv4)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv2)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert n gv2))
(priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry q gv4)), (priqq (find_max' n q) (carry gv2 a2)), (priqq (find_max' n q) (carry gv2 a1)), (priqq (find_max' n q) (carry gv2 gv4)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv2)), (priqq (find_max' n q) (gv2 ++ q)), (priqq (find_max' n q) (gv2 ++ gv2))
(priqq (find_max' n gv2) q), (priqq (find_max' n gv2) gv2), (priqq (find_max' n gv2) (a2 :: q)), (priqq (find_max' n gv2) (a2 :: gv2)), (priqq (find_max' n gv2) (a1 :: q)), (priqq (find_max' n gv2) (a1 :: gv2)), (priqq (find_max' n gv2) (gv4 :: q)), (priqq (find_max' n gv2) (gv4 :: gv2)), (priqq (find_max' n gv2) (merge q q)), (priqq (find_max' n gv2) (merge q gv2))
(priqq (find_max' n gv2) (merge gv2 q)), (priqq (find_max' n gv2) (merge gv2 gv2)), (priqq (find_max' n gv2) (heap_delete_max a2)), (priqq (find_max' n gv2) (heap_delete_max a1)), (priqq (find_max' n gv2) (heap_delete_max gv4)), (priqq (find_max' n gv2) (join q q a2)), (priqq (find_max' n gv2) (join q q a1)), (priqq (find_max' n gv2) (join q q gv4)), (priqq (find_max' n gv2) (join q gv2 a2)), (priqq (find_max' n gv2) (join q gv2 a1))
(priqq (find_max' n gv2) (join q gv2 gv4)), (priqq (find_max' n gv2) (join gv2 q a2)), (priqq (find_max' n gv2) (join gv2 q a1)), (priqq (find_max' n gv2) (join gv2 q gv4)), (priqq (find_max' n gv2) (join gv2 gv2 a2)), (priqq (find_max' n gv2) (join gv2 gv2 a1)), (priqq (find_max' n gv2) (join gv2 gv2 gv4)), (priqq (find_max' n gv2) (insert x q)), (priqq (find_max' n gv2) (insert x gv2)), (priqq (find_max' n gv2) (insert n q))
(priqq (find_max' n gv2) (insert n gv2)), (priqq (find_max' n gv2) (carry q a2)), (priqq (find_max' n gv2) (carry q a1)), (priqq (find_max' n gv2) (carry q gv4)), (priqq (find_max' n gv2) (carry gv2 a2)), (priqq (find_max' n gv2) (carry gv2 a1)), (priqq (find_max' n gv2) (carry gv2 gv4)), (priqq (find_max' n gv2) (q ++ q)), (priqq (find_max' n gv2) (q ++ gv2)), (priqq (find_max' n gv2) (gv2 ++ q))
(priqq (find_max' n gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv2)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv2)), (priqq (length q) (gv4 :: q)), (priqq (length q) (gv4 :: gv2)), (priqq (length q) (merge q q))
(priqq (length q) (merge q gv2)), (priqq (length q) (merge gv2 q)), (priqq (length q) (merge gv2 gv2)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (heap_delete_max gv4)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q q gv4)), (priqq (length q) (join q gv2 a2))
(priqq (length q) (join q gv2 a1)), (priqq (length q) (join q gv2 gv4)), (priqq (length q) (join gv2 q a2)), (priqq (length q) (join gv2 q a1)), (priqq (length q) (join gv2 q gv4)), (priqq (length q) (join gv2 gv2 a2)), (priqq (length q) (join gv2 gv2 a1)), (priqq (length q) (join gv2 gv2 gv4)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv2))
(priqq (length q) (insert n q)), (priqq (length q) (insert n gv2)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry q gv4)), (priqq (length q) (carry gv2 a2)), (priqq (length q) (carry gv2 a1)), (priqq (length q) (carry gv2 gv4)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv2))
(priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q), (priqq (length gv2) gv2), (priqq (length gv2) (a2 :: q)), (priqq (length gv2) (a2 :: gv2)), (priqq (length gv2) (a1 :: q)), (priqq (length gv2) (a1 :: gv2)), (priqq (length gv2) (gv4 :: q)), (priqq (length gv2) (gv4 :: gv2))
(priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q)), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (heap_delete_max a2)), (priqq (length gv2) (heap_delete_max a1)), (priqq (length gv2) (heap_delete_max gv4)), (priqq (length gv2) (join q q a2)), (priqq (length gv2) (join q q a1)), (priqq (length gv2) (join q q gv4))
(priqq (length gv2) (join q gv2 a2)), (priqq (length gv2) (join q gv2 a1)), (priqq (length gv2) (join q gv2 gv4)), (priqq (length gv2) (join gv2 q a2)), (priqq (length gv2) (join gv2 q a1)), (priqq (length gv2) (join gv2 q gv4)), (priqq (length gv2) (join gv2 gv2 a2)), (priqq (length gv2) (join gv2 gv2 a1)), (priqq (length gv2) (join gv2 gv2 gv4)), (priqq (length gv2) (insert x q))
(priqq (length gv2) (insert x gv2)), (priqq (length gv2) (insert n q)), (priqq (length gv2) (insert n gv2)), (priqq (length gv2) (carry q a2)), (priqq (length gv2) (carry q a1)), (priqq (length gv2) (carry q gv4)), (priqq (length gv2) (carry gv2 a2)), (priqq (length gv2) (carry gv2 a1)), (priqq (length gv2) (carry gv2 gv4)), (priqq (length gv2) (q ++ q))
(priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2)), (pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a2 gv4)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node x a1 gv4)), (pow2heap x (Node x gv4 a2))
(pow2heap x (Node x gv4 a1)), (pow2heap x (Node x gv4 gv4)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a2 gv4)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (Node n a1 gv4)), (pow2heap x (Node n gv4 a2)), (pow2heap x (Node n gv4 a1))
(pow2heap x (Node n gv4 gv4)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a2 gv4)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap x (smash a1 gv4)), (pow2heap x (smash gv4 a2)), (pow2heap x (smash gv4 a1)), (pow2heap x (smash gv4 gv4))
(pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a2 gv4)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node x a1 gv4)), (pow2heap n (Node x gv4 a2)), (pow2heap n (Node x gv4 a1)), (pow2heap n (Node x gv4 gv4)), (pow2heap n (Node n a2 a2))
(pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv4)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv4)), (pow2heap n (Node n gv4 a2)), (pow2heap n (Node n gv4 a1)), (pow2heap n (Node n gv4 gv4)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a2 gv4)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv4)), (pow2heap n (smash gv4 a2)), (pow2heap n (smash gv4 a1)), (pow2heap n (smash gv4 gv4)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) gv4)
(pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a2 gv4)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node x a1 gv4)), (pow2heap (find_max' x q) (Node x gv4 a2)), (pow2heap (find_max' x q) (Node x gv4 a1)), (pow2heap (find_max' x q) (Node x gv4 gv4)), (pow2heap (find_max' x q) (Node n a2 a2))
(pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a2 gv4)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (Node n a1 gv4)), (pow2heap (find_max' x q) (Node n gv4 a2)), (pow2heap (find_max' x q) (Node n gv4 a1)), (pow2heap (find_max' x q) (Node n gv4 gv4)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1))
(pow2heap (find_max' x q) (smash a2 gv4)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x q) (smash a1 gv4)), (pow2heap (find_max' x q) (smash gv4 a2)), (pow2heap (find_max' x q) (smash gv4 a1)), (pow2heap (find_max' x q) (smash gv4 gv4)), (pow2heap (find_max' x gv2) a2), (pow2heap (find_max' x gv2) a1), (pow2heap (find_max' x gv2) gv4)
(pow2heap (find_max' x gv2) (Node x a2 a2)), (pow2heap (find_max' x gv2) (Node x a2 a1)), (pow2heap (find_max' x gv2) (Node x a2 gv4)), (pow2heap (find_max' x gv2) (Node x a1 a2)), (pow2heap (find_max' x gv2) (Node x a1 a1)), (pow2heap (find_max' x gv2) (Node x a1 gv4)), (pow2heap (find_max' x gv2) (Node x gv4 a2)), (pow2heap (find_max' x gv2) (Node x gv4 a1)), (pow2heap (find_max' x gv2) (Node x gv4 gv4)), (pow2heap (find_max' x gv2) (Node n a2 a2))
(pow2heap (find_max' x gv2) (Node n a2 a1)), (pow2heap (find_max' x gv2) (Node n a2 gv4)), (pow2heap (find_max' x gv2) (Node n a1 a2)), (pow2heap (find_max' x gv2) (Node n a1 a1)), (pow2heap (find_max' x gv2) (Node n a1 gv4)), (pow2heap (find_max' x gv2) (Node n gv4 a2)), (pow2heap (find_max' x gv2) (Node n gv4 a1)), (pow2heap (find_max' x gv2) (Node n gv4 gv4)), (pow2heap (find_max' x gv2) (smash a2 a2)), (pow2heap (find_max' x gv2) (smash a2 a1))
(pow2heap (find_max' x gv2) (smash a2 gv4)), (pow2heap (find_max' x gv2) (smash a1 a2)), (pow2heap (find_max' x gv2) (smash a1 a1)), (pow2heap (find_max' x gv2) (smash a1 gv4)), (pow2heap (find_max' x gv2) (smash gv4 a2)), (pow2heap (find_max' x gv2) (smash gv4 a1)), (pow2heap (find_max' x gv2) (smash gv4 gv4)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) gv4)
(pow2heap (find_max' n q) (Node x a2 a2)), (pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a2 gv4)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node x a1 gv4)), (pow2heap (find_max' n q) (Node x gv4 a2)), (pow2heap (find_max' n q) (Node x gv4 a1)), (pow2heap (find_max' n q) (Node x gv4 gv4)), (pow2heap (find_max' n q) (Node n a2 a2))
(pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a2 gv4)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node n a1 gv4)), (pow2heap (find_max' n q) (Node n gv4 a2)), (pow2heap (find_max' n q) (Node n gv4 a1)), (pow2heap (find_max' n q) (Node n gv4 gv4)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1))
(pow2heap (find_max' n q) (smash a2 gv4)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n q) (smash a1 gv4)), (pow2heap (find_max' n q) (smash gv4 a2)), (pow2heap (find_max' n q) (smash gv4 a1)), (pow2heap (find_max' n q) (smash gv4 gv4)), (pow2heap (find_max' n gv2) a2), (pow2heap (find_max' n gv2) a1), (pow2heap (find_max' n gv2) gv4)
(pow2heap (find_max' n gv2) (Node x a2 a2)), (pow2heap (find_max' n gv2) (Node x a2 a1)), (pow2heap (find_max' n gv2) (Node x a2 gv4)), (pow2heap (find_max' n gv2) (Node x a1 a2)), (pow2heap (find_max' n gv2) (Node x a1 a1)), (pow2heap (find_max' n gv2) (Node x a1 gv4)), (pow2heap (find_max' n gv2) (Node x gv4 a2)), (pow2heap (find_max' n gv2) (Node x gv4 a1)), (pow2heap (find_max' n gv2) (Node x gv4 gv4)), (pow2heap (find_max' n gv2) (Node n a2 a2))
(pow2heap (find_max' n gv2) (Node n a2 a1)), (pow2heap (find_max' n gv2) (Node n a2 gv4)), (pow2heap (find_max' n gv2) (Node n a1 a2)), (pow2heap (find_max' n gv2) (Node n a1 a1)), (pow2heap (find_max' n gv2) (Node n a1 gv4)), (pow2heap (find_max' n gv2) (Node n gv4 a2)), (pow2heap (find_max' n gv2) (Node n gv4 a1)), (pow2heap (find_max' n gv2) (Node n gv4 gv4)), (pow2heap (find_max' n gv2) (smash a2 a2)), (pow2heap (find_max' n gv2) (smash a2 a1))
(pow2heap (find_max' n gv2) (smash a2 gv4)), (pow2heap (find_max' n gv2) (smash a1 a2)), (pow2heap (find_max' n gv2) (smash a1 a1)), (pow2heap (find_max' n gv2) (smash a1 gv4)), (pow2heap (find_max' n gv2) (smash gv4 a2)), (pow2heap (find_max' n gv2) (smash gv4 a1)), (pow2heap (find_max' n gv2) (smash gv4 gv4)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) gv4)
(pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a2 gv4)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node x a1 gv4)), (pow2heap (length q) (Node x gv4 a2)), (pow2heap (length q) (Node x gv4 a1)), (pow2heap (length q) (Node x gv4 gv4)), (pow2heap (length q) (Node n a2 a2))
(pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a2 gv4)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node n a1 gv4)), (pow2heap (length q) (Node n gv4 a2)), (pow2heap (length q) (Node n gv4 a1)), (pow2heap (length q) (Node n gv4 gv4)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1))
(pow2heap (length q) (smash a2 gv4)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length q) (smash a1 gv4)), (pow2heap (length q) (smash gv4 a2)), (pow2heap (length q) (smash gv4 a1)), (pow2heap (length q) (smash gv4 gv4)), (pow2heap (length gv2) a2), (pow2heap (length gv2) a1), (pow2heap (length gv2) gv4)
(pow2heap (length gv2) (Node x a2 a2)), (pow2heap (length gv2) (Node x a2 a1)), (pow2heap (length gv2) (Node x a2 gv4)), (pow2heap (length gv2) (Node x a1 a2)), (pow2heap (length gv2) (Node x a1 a1)), (pow2heap (length gv2) (Node x a1 gv4)), (pow2heap (length gv2) (Node x gv4 a2)), (pow2heap (length gv2) (Node x gv4 a1)), (pow2heap (length gv2) (Node x gv4 gv4)), (pow2heap (length gv2) (Node n a2 a2))
(pow2heap (length gv2) (Node n a2 a1)), (pow2heap (length gv2) (Node n a2 gv4)), (pow2heap (length gv2) (Node n a1 a2)), (pow2heap (length gv2) (Node n a1 a1)), (pow2heap (length gv2) (Node n a1 gv4)), (pow2heap (length gv2) (Node n gv4 a2)), (pow2heap (length gv2) (Node n gv4 a1)), (pow2heap (length gv2) (Node n gv4 gv4)), (pow2heap (length gv2) (smash a2 a2)), (pow2heap (length gv2) (smash a2 a1))
(pow2heap (length gv2) (smash a2 gv4)), (pow2heap (length gv2) (smash a1 a2)), (pow2heap (length gv2) (smash a1 a1)), (pow2heap (length gv2) (smash a1 gv4)), (pow2heap (length gv2) (smash gv4 a2)), (pow2heap (length gv2) (smash gv4 a1)), (pow2heap (length gv2) (smash gv4 gv4)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a2 gv4))
(pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node x a1 gv4)), (pow2heapp x x (Node x gv4 a2)), (pow2heapp x x (Node x gv4 a1)), (pow2heapp x x (Node x gv4 gv4)), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a2 gv4)), (pow2heapp x x (Node n a1 a2))
(pow2heapp x x (Node n a1 a1)), (pow2heapp x x (Node n a1 gv4)), (pow2heapp x x (Node n gv4 a2)), (pow2heapp x x (Node n gv4 a1)), (pow2heapp x x (Node n gv4 gv4)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a2 gv4)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1))
(pow2heapp x x (smash a1 gv4)), (pow2heapp x x (smash gv4 a2)), (pow2heapp x x (smash gv4 a1)), (pow2heapp x x (smash gv4 gv4)), (pow2heapp x x Leaf), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a2 gv4)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1))
(pow2heapp x n (Node x a1 gv4)), (pow2heapp x n (Node x gv4 a2)), (pow2heapp x n (Node x gv4 a1)), (pow2heapp x n (Node x gv4 gv4)), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a2 gv4)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (Node n a1 gv4))
(pow2heapp x n (Node n gv4 a2)), (pow2heapp x n (Node n gv4 a1)), (pow2heapp x n (Node n gv4 gv4)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a2 gv4)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n (smash a1 gv4)), (pow2heapp x n (smash gv4 a2))
(pow2heapp x n (smash gv4 a1)), (pow2heapp x n (smash gv4 gv4)), (pow2heapp x n Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) gv4), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a2 gv4)), (pow2heapp x (find_max' x q) (Node x a1 a2))
(pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node x a1 gv4)), (pow2heapp x (find_max' x q) (Node x gv4 a2)), (pow2heapp x (find_max' x q) (Node x gv4 a1)), (pow2heapp x (find_max' x q) (Node x gv4 gv4)), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a2 gv4)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1))
(pow2heapp x (find_max' x q) (Node n a1 gv4)), (pow2heapp x (find_max' x q) (Node n gv4 a2)), (pow2heapp x (find_max' x q) (Node n gv4 a1)), (pow2heapp x (find_max' x q) (Node n gv4 gv4)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a2 gv4)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) (smash a1 gv4))
(pow2heapp x (find_max' x q) (smash gv4 a2)), (pow2heapp x (find_max' x q) (smash gv4 a1)), (pow2heapp x (find_max' x q) (smash gv4 gv4)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) a2), (pow2heapp x (find_max' x gv2) a1), (pow2heapp x (find_max' x gv2) gv4), (pow2heapp x (find_max' x gv2) (Node x a2 a2)), (pow2heapp x (find_max' x gv2) (Node x a2 a1)), (pow2heapp x (find_max' x gv2) (Node x a2 gv4))
(pow2heapp x (find_max' x gv2) (Node x a1 a2)), (pow2heapp x (find_max' x gv2) (Node x a1 a1)), (pow2heapp x (find_max' x gv2) (Node x a1 gv4)), (pow2heapp x (find_max' x gv2) (Node x gv4 a2)), (pow2heapp x (find_max' x gv2) (Node x gv4 a1)), (pow2heapp x (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp x (find_max' x gv2) (Node n a2 a2)), (pow2heapp x (find_max' x gv2) (Node n a2 a1)), (pow2heapp x (find_max' x gv2) (Node n a2 gv4)), (pow2heapp x (find_max' x gv2) (Node n a1 a2))
(pow2heapp x (find_max' x gv2) (Node n a1 a1)), (pow2heapp x (find_max' x gv2) (Node n a1 gv4)), (pow2heapp x (find_max' x gv2) (Node n gv4 a2)), (pow2heapp x (find_max' x gv2) (Node n gv4 a1)), (pow2heapp x (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp x (find_max' x gv2) (smash a2 a2)), (pow2heapp x (find_max' x gv2) (smash a2 a1)), (pow2heapp x (find_max' x gv2) (smash a2 gv4)), (pow2heapp x (find_max' x gv2) (smash a1 a2)), (pow2heapp x (find_max' x gv2) (smash a1 a1))
(pow2heapp x (find_max' x gv2) (smash a1 gv4)), (pow2heapp x (find_max' x gv2) (smash gv4 a2)), (pow2heapp x (find_max' x gv2) (smash gv4 a1)), (pow2heapp x (find_max' x gv2) (smash gv4 gv4)), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) gv4), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1))
(pow2heapp x (find_max' n q) (Node x a2 gv4)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node x a1 gv4)), (pow2heapp x (find_max' n q) (Node x gv4 a2)), (pow2heapp x (find_max' n q) (Node x gv4 a1)), (pow2heapp x (find_max' n q) (Node x gv4 gv4)), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a2 gv4))
(pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node n a1 gv4)), (pow2heapp x (find_max' n q) (Node n gv4 a2)), (pow2heapp x (find_max' n q) (Node n gv4 a1)), (pow2heapp x (find_max' n q) (Node n gv4 gv4)), (pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a2 gv4)), (pow2heapp x (find_max' n q) (smash a1 a2))
(pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) (smash a1 gv4)), (pow2heapp x (find_max' n q) (smash gv4 a2)), (pow2heapp x (find_max' n q) (smash gv4 a1)), (pow2heapp x (find_max' n q) (smash gv4 gv4)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' n gv2) a2), (pow2heapp x (find_max' n gv2) a1), (pow2heapp x (find_max' n gv2) gv4), (pow2heapp x (find_max' n gv2) (Node x a2 a2))
(pow2heapp x (find_max' n gv2) (Node x a2 a1)), (pow2heapp x (find_max' n gv2) (Node x a2 gv4)), (pow2heapp x (find_max' n gv2) (Node x a1 a2)), (pow2heapp x (find_max' n gv2) (Node x a1 a1)), (pow2heapp x (find_max' n gv2) (Node x a1 gv4)), (pow2heapp x (find_max' n gv2) (Node x gv4 a2)), (pow2heapp x (find_max' n gv2) (Node x gv4 a1)), (pow2heapp x (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp x (find_max' n gv2) (Node n a2 a2)), (pow2heapp x (find_max' n gv2) (Node n a2 a1))
(pow2heapp x (find_max' n gv2) (Node n a2 gv4)), (pow2heapp x (find_max' n gv2) (Node n a1 a2)), (pow2heapp x (find_max' n gv2) (Node n a1 a1)), (pow2heapp x (find_max' n gv2) (Node n a1 gv4)), (pow2heapp x (find_max' n gv2) (Node n gv4 a2)), (pow2heapp x (find_max' n gv2) (Node n gv4 a1)), (pow2heapp x (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp x (find_max' n gv2) (smash a2 a2)), (pow2heapp x (find_max' n gv2) (smash a2 a1)), (pow2heapp x (find_max' n gv2) (smash a2 gv4))
(pow2heapp x (find_max' n gv2) (smash a1 a2)), (pow2heapp x (find_max' n gv2) (smash a1 a1)), (pow2heapp x (find_max' n gv2) (smash a1 gv4)), (pow2heapp x (find_max' n gv2) (smash gv4 a2)), (pow2heapp x (find_max' n gv2) (smash gv4 a1)), (pow2heapp x (find_max' n gv2) (smash gv4 gv4)), (pow2heapp x (find_max' n gv2) Leaf), (pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) gv4)
(pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a2 gv4)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node x a1 gv4)), (pow2heapp x (length q) (Node x gv4 a2)), (pow2heapp x (length q) (Node x gv4 a1)), (pow2heapp x (length q) (Node x gv4 gv4)), (pow2heapp x (length q) (Node n a2 a2))
(pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a2 gv4)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (Node n a1 gv4)), (pow2heapp x (length q) (Node n gv4 a2)), (pow2heapp x (length q) (Node n gv4 a1)), (pow2heapp x (length q) (Node n gv4 gv4)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1))
(pow2heapp x (length q) (smash a2 gv4)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) (smash a1 gv4)), (pow2heapp x (length q) (smash gv4 a2)), (pow2heapp x (length q) (smash gv4 a1)), (pow2heapp x (length q) (smash gv4 gv4)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv2) a2), (pow2heapp x (length gv2) a1)
(pow2heapp x (length gv2) gv4), (pow2heapp x (length gv2) (Node x a2 a2)), (pow2heapp x (length gv2) (Node x a2 a1)), (pow2heapp x (length gv2) (Node x a2 gv4)), (pow2heapp x (length gv2) (Node x a1 a2)), (pow2heapp x (length gv2) (Node x a1 a1)), (pow2heapp x (length gv2) (Node x a1 gv4)), (pow2heapp x (length gv2) (Node x gv4 a2)), (pow2heapp x (length gv2) (Node x gv4 a1)), (pow2heapp x (length gv2) (Node x gv4 gv4))
(pow2heapp x (length gv2) (Node n a2 a2)), (pow2heapp x (length gv2) (Node n a2 a1)), (pow2heapp x (length gv2) (Node n a2 gv4)), (pow2heapp x (length gv2) (Node n a1 a2)), (pow2heapp x (length gv2) (Node n a1 a1)), (pow2heapp x (length gv2) (Node n a1 gv4)), (pow2heapp x (length gv2) (Node n gv4 a2)), (pow2heapp x (length gv2) (Node n gv4 a1)), (pow2heapp x (length gv2) (Node n gv4 gv4)), (pow2heapp x (length gv2) (smash a2 a2))
(pow2heapp x (length gv2) (smash a2 a1)), (pow2heapp x (length gv2) (smash a2 gv4)), (pow2heapp x (length gv2) (smash a1 a2)), (pow2heapp x (length gv2) (smash a1 a1)), (pow2heapp x (length gv2) (smash a1 gv4)), (pow2heapp x (length gv2) (smash gv4 a2)), (pow2heapp x (length gv2) (smash gv4 a1)), (pow2heapp x (length gv2) (smash gv4 gv4)), (pow2heapp x (length gv2) Leaf), (pow2heapp n x (Node x a2 a2))
(pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a2 gv4)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node x a1 gv4)), (pow2heapp n x (Node x gv4 a2)), (pow2heapp n x (Node x gv4 a1)), (pow2heapp n x (Node x gv4 gv4)), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1))
(pow2heapp n x (Node n a2 gv4)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (Node n a1 gv4)), (pow2heapp n x (Node n gv4 a2)), (pow2heapp n x (Node n gv4 a1)), (pow2heapp n x (Node n gv4 gv4)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a2 gv4))
(pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x (smash a1 gv4)), (pow2heapp n x (smash gv4 a2)), (pow2heapp n x (smash gv4 a1)), (pow2heapp n x (smash gv4 gv4)), (pow2heapp n x Leaf), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a2 gv4))
(pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node x a1 gv4)), (pow2heapp n n (Node x gv4 a2)), (pow2heapp n n (Node x gv4 a1)), (pow2heapp n n (Node x gv4 gv4)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv4)), (pow2heapp n n (Node n a1 a2))
(pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv4)), (pow2heapp n n (Node n gv4 a2)), (pow2heapp n n (Node n gv4 a1)), (pow2heapp n n (Node n gv4 gv4)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv4)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1))
(pow2heapp n n (smash a1 gv4)), (pow2heapp n n (smash gv4 a2)), (pow2heapp n n (smash gv4 a1)), (pow2heapp n n (smash gv4 gv4)), (pow2heapp n n Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) gv4), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1))
(pow2heapp n (find_max' x q) (Node x a2 gv4)), (pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node x a1 gv4)), (pow2heapp n (find_max' x q) (Node x gv4 a2)), (pow2heapp n (find_max' x q) (Node x gv4 a1)), (pow2heapp n (find_max' x q) (Node x gv4 gv4)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a2 gv4))
(pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (Node n a1 gv4)), (pow2heapp n (find_max' x q) (Node n gv4 a2)), (pow2heapp n (find_max' x q) (Node n gv4 a1)), (pow2heapp n (find_max' x q) (Node n gv4 gv4)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a2 gv4)), (pow2heapp n (find_max' x q) (smash a1 a2))
(pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) (smash a1 gv4)), (pow2heapp n (find_max' x q) (smash gv4 a2)), (pow2heapp n (find_max' x q) (smash gv4 a1)), (pow2heapp n (find_max' x q) (smash gv4 gv4)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' x gv2) a2), (pow2heapp n (find_max' x gv2) a1), (pow2heapp n (find_max' x gv2) gv4), (pow2heapp n (find_max' x gv2) (Node x a2 a2))
(pow2heapp n (find_max' x gv2) (Node x a2 a1)), (pow2heapp n (find_max' x gv2) (Node x a2 gv4)), (pow2heapp n (find_max' x gv2) (Node x a1 a2)), (pow2heapp n (find_max' x gv2) (Node x a1 a1)), (pow2heapp n (find_max' x gv2) (Node x a1 gv4)), (pow2heapp n (find_max' x gv2) (Node x gv4 a2)), (pow2heapp n (find_max' x gv2) (Node x gv4 a1)), (pow2heapp n (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp n (find_max' x gv2) (Node n a2 a2)), (pow2heapp n (find_max' x gv2) (Node n a2 a1))
(pow2heapp n (find_max' x gv2) (Node n a2 gv4)), (pow2heapp n (find_max' x gv2) (Node n a1 a2)), (pow2heapp n (find_max' x gv2) (Node n a1 a1)), (pow2heapp n (find_max' x gv2) (Node n a1 gv4)), (pow2heapp n (find_max' x gv2) (Node n gv4 a2)), (pow2heapp n (find_max' x gv2) (Node n gv4 a1)), (pow2heapp n (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp n (find_max' x gv2) (smash a2 a2)), (pow2heapp n (find_max' x gv2) (smash a2 a1)), (pow2heapp n (find_max' x gv2) (smash a2 gv4))
(pow2heapp n (find_max' x gv2) (smash a1 a2)), (pow2heapp n (find_max' x gv2) (smash a1 a1)), (pow2heapp n (find_max' x gv2) (smash a1 gv4)), (pow2heapp n (find_max' x gv2) (smash gv4 a2)), (pow2heapp n (find_max' x gv2) (smash gv4 a1)), (pow2heapp n (find_max' x gv2) (smash gv4 gv4)), (pow2heapp n (find_max' x gv2) Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) gv4)
(pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a2 gv4)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node x a1 gv4)), (pow2heapp n (find_max' n q) (Node x gv4 a2)), (pow2heapp n (find_max' n q) (Node x gv4 a1)), (pow2heapp n (find_max' n q) (Node x gv4 gv4)), (pow2heapp n (find_max' n q) (Node n a2 a2))
(pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a2 gv4)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node n a1 gv4)), (pow2heapp n (find_max' n q) (Node n gv4 a2)), (pow2heapp n (find_max' n q) (Node n gv4 a1)), (pow2heapp n (find_max' n q) (Node n gv4 gv4)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1))
(pow2heapp n (find_max' n q) (smash a2 gv4)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) (smash a1 gv4)), (pow2heapp n (find_max' n q) (smash gv4 a2)), (pow2heapp n (find_max' n q) (smash gv4 a1)), (pow2heapp n (find_max' n q) (smash gv4 gv4)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (find_max' n gv2) a2), (pow2heapp n (find_max' n gv2) a1)
(pow2heapp n (find_max' n gv2) gv4), (pow2heapp n (find_max' n gv2) (Node x a2 a2)), (pow2heapp n (find_max' n gv2) (Node x a2 a1)), (pow2heapp n (find_max' n gv2) (Node x a2 gv4)), (pow2heapp n (find_max' n gv2) (Node x a1 a2)), (pow2heapp n (find_max' n gv2) (Node x a1 a1)), (pow2heapp n (find_max' n gv2) (Node x a1 gv4)), (pow2heapp n (find_max' n gv2) (Node x gv4 a2)), (pow2heapp n (find_max' n gv2) (Node x gv4 a1)), (pow2heapp n (find_max' n gv2) (Node x gv4 gv4))
(pow2heapp n (find_max' n gv2) (Node n a2 a2)), (pow2heapp n (find_max' n gv2) (Node n a2 a1)), (pow2heapp n (find_max' n gv2) (Node n a2 gv4)), (pow2heapp n (find_max' n gv2) (Node n a1 a2)), (pow2heapp n (find_max' n gv2) (Node n a1 a1)), (pow2heapp n (find_max' n gv2) (Node n a1 gv4)), (pow2heapp n (find_max' n gv2) (Node n gv4 a2)), (pow2heapp n (find_max' n gv2) (Node n gv4 a1)), (pow2heapp n (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp n (find_max' n gv2) (smash a2 a2))
(pow2heapp n (find_max' n gv2) (smash a2 a1)), (pow2heapp n (find_max' n gv2) (smash a2 gv4)), (pow2heapp n (find_max' n gv2) (smash a1 a2)), (pow2heapp n (find_max' n gv2) (smash a1 a1)), (pow2heapp n (find_max' n gv2) (smash a1 gv4)), (pow2heapp n (find_max' n gv2) (smash gv4 a2)), (pow2heapp n (find_max' n gv2) (smash gv4 a1)), (pow2heapp n (find_max' n gv2) (smash gv4 gv4)), (pow2heapp n (find_max' n gv2) Leaf), (pow2heapp n (length q) a2)
(pow2heapp n (length q) a1), (pow2heapp n (length q) gv4), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a2 gv4)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node x a1 gv4)), (pow2heapp n (length q) (Node x gv4 a2)), (pow2heapp n (length q) (Node x gv4 a1))
(pow2heapp n (length q) (Node x gv4 gv4)), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a2 gv4)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (Node n a1 gv4)), (pow2heapp n (length q) (Node n gv4 a2)), (pow2heapp n (length q) (Node n gv4 a1)), (pow2heapp n (length q) (Node n gv4 gv4))
(pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a2 gv4)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) (smash a1 gv4)), (pow2heapp n (length q) (smash gv4 a2)), (pow2heapp n (length q) (smash gv4 a1)), (pow2heapp n (length q) (smash gv4 gv4)), (pow2heapp n (length q) Leaf)
(pow2heapp n (length gv2) a2), (pow2heapp n (length gv2) a1), (pow2heapp n (length gv2) gv4), (pow2heapp n (length gv2) (Node x a2 a2)), (pow2heapp n (length gv2) (Node x a2 a1)), (pow2heapp n (length gv2) (Node x a2 gv4)), (pow2heapp n (length gv2) (Node x a1 a2)), (pow2heapp n (length gv2) (Node x a1 a1)), (pow2heapp n (length gv2) (Node x a1 gv4)), (pow2heapp n (length gv2) (Node x gv4 a2))
(pow2heapp n (length gv2) (Node x gv4 a1)), (pow2heapp n (length gv2) (Node x gv4 gv4)), (pow2heapp n (length gv2) (Node n a2 a2)), (pow2heapp n (length gv2) (Node n a2 a1)), (pow2heapp n (length gv2) (Node n a2 gv4)), (pow2heapp n (length gv2) (Node n a1 a2)), (pow2heapp n (length gv2) (Node n a1 a1)), (pow2heapp n (length gv2) (Node n a1 gv4)), (pow2heapp n (length gv2) (Node n gv4 a2)), (pow2heapp n (length gv2) (Node n gv4 a1))
(pow2heapp n (length gv2) (Node n gv4 gv4)), (pow2heapp n (length gv2) (smash a2 a2)), (pow2heapp n (length gv2) (smash a2 a1)), (pow2heapp n (length gv2) (smash a2 gv4)), (pow2heapp n (length gv2) (smash a1 a2)), (pow2heapp n (length gv2) (smash a1 a1)), (pow2heapp n (length gv2) (smash a1 gv4)), (pow2heapp n (length gv2) (smash gv4 a2)), (pow2heapp n (length gv2) (smash gv4 a1)), (pow2heapp n (length gv2) (smash gv4 gv4))
(pow2heapp n (length gv2) Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x gv4), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a2 gv4)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node x a1 gv4))
(pow2heapp (find_max' x q) x (Node x gv4 a2)), (pow2heapp (find_max' x q) x (Node x gv4 a1)), (pow2heapp (find_max' x q) x (Node x gv4 gv4)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a2 gv4)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node n a1 gv4)), (pow2heapp (find_max' x q) x (Node n gv4 a2))
(pow2heapp (find_max' x q) x (Node n gv4 a1)), (pow2heapp (find_max' x q) x (Node n gv4 gv4)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a2 gv4)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x (smash a1 gv4)), (pow2heapp (find_max' x q) x (smash gv4 a2)), (pow2heapp (find_max' x q) x (smash gv4 a1))
(pow2heapp (find_max' x q) x (smash gv4 gv4)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n gv4), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a2 gv4)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1))
(pow2heapp (find_max' x q) n (Node x a1 gv4)), (pow2heapp (find_max' x q) n (Node x gv4 a2)), (pow2heapp (find_max' x q) n (Node x gv4 a1)), (pow2heapp (find_max' x q) n (Node x gv4 gv4)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a2 gv4)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (Node n a1 gv4))
(pow2heapp (find_max' x q) n (Node n gv4 a2)), (pow2heapp (find_max' x q) n (Node n gv4 a1)), (pow2heapp (find_max' x q) n (Node n gv4 gv4)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a2 gv4)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n (smash a1 gv4)), (pow2heapp (find_max' x q) n (smash gv4 a2))
(pow2heapp (find_max' x q) n (smash gv4 a1)), (pow2heapp (find_max' x q) n (smash gv4 gv4)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) gv4), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1))
(pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv4))
(pow2heapp (find_max' x q) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) a2), (pow2heapp (find_max' x q) (find_max' x gv2) a1), (pow2heapp (find_max' x q) (find_max' x gv2) gv4), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 gv4))
(pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a2))
(pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a1))
(pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) gv4), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv4))
(pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv4)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (find_max' n gv2) a2), (pow2heapp (find_max' x q) (find_max' n gv2) a1), (pow2heapp (find_max' x q) (find_max' n gv2) gv4), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a2))
(pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv4 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a1))
(pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv4 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 gv4))
(pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv4 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' n gv2) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) gv4)
(pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv4)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv4)), (pow2heapp (find_max' x q) (length q) (Node x gv4 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv4 a1)), (pow2heapp (find_max' x q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2))
(pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv4)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv4)), (pow2heapp (find_max' x q) (length q) (Node n gv4 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv4 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1))
(pow2heapp (find_max' x q) (length q) (smash a2 gv4)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv4 a2)), (pow2heapp (find_max' x q) (length q) (smash gv4 a1)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) a2), (pow2heapp (find_max' x q) (length gv2) a1)
(pow2heapp (find_max' x q) (length gv2) gv4), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 gv4)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 gv4)), (pow2heapp (find_max' x q) (length gv2) (Node x gv4 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x gv4 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x gv4 gv4))
(pow2heapp (find_max' x q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n a2 gv4)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 gv4)), (pow2heapp (find_max' x q) (length gv2) (Node n gv4 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n gv4 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x q) (length gv2) (smash a2 a2))
(pow2heapp (find_max' x q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv2) (smash a2 gv4)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (length gv2) (smash a1 gv4)), (pow2heapp (find_max' x q) (length gv2) (smash gv4 a2)), (pow2heapp (find_max' x q) (length gv2) (smash gv4 a1)), (pow2heapp (find_max' x q) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) x a2)
(pow2heapp (find_max' x gv2) x a1), (pow2heapp (find_max' x gv2) x gv4), (pow2heapp (find_max' x gv2) x (Node x a2 a2)), (pow2heapp (find_max' x gv2) x (Node x a2 a1)), (pow2heapp (find_max' x gv2) x (Node x a2 gv4)), (pow2heapp (find_max' x gv2) x (Node x a1 a2)), (pow2heapp (find_max' x gv2) x (Node x a1 a1)), (pow2heapp (find_max' x gv2) x (Node x a1 gv4)), (pow2heapp (find_max' x gv2) x (Node x gv4 a2)), (pow2heapp (find_max' x gv2) x (Node x gv4 a1))
(pow2heapp (find_max' x gv2) x (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) x (Node n a2 a2)), (pow2heapp (find_max' x gv2) x (Node n a2 a1)), (pow2heapp (find_max' x gv2) x (Node n a2 gv4)), (pow2heapp (find_max' x gv2) x (Node n a1 a2)), (pow2heapp (find_max' x gv2) x (Node n a1 a1)), (pow2heapp (find_max' x gv2) x (Node n a1 gv4)), (pow2heapp (find_max' x gv2) x (Node n gv4 a2)), (pow2heapp (find_max' x gv2) x (Node n gv4 a1)), (pow2heapp (find_max' x gv2) x (Node n gv4 gv4))
(pow2heapp (find_max' x gv2) x (smash a2 a2)), (pow2heapp (find_max' x gv2) x (smash a2 a1)), (pow2heapp (find_max' x gv2) x (smash a2 gv4)), (pow2heapp (find_max' x gv2) x (smash a1 a2)), (pow2heapp (find_max' x gv2) x (smash a1 a1)), (pow2heapp (find_max' x gv2) x (smash a1 gv4)), (pow2heapp (find_max' x gv2) x (smash gv4 a2)), (pow2heapp (find_max' x gv2) x (smash gv4 a1)), (pow2heapp (find_max' x gv2) x (smash gv4 gv4)), (pow2heapp (find_max' x gv2) x Leaf)
(pow2heapp (find_max' x gv2) n a2), (pow2heapp (find_max' x gv2) n a1), (pow2heapp (find_max' x gv2) n gv4), (pow2heapp (find_max' x gv2) n (Node x a2 a2)), (pow2heapp (find_max' x gv2) n (Node x a2 a1)), (pow2heapp (find_max' x gv2) n (Node x a2 gv4)), (pow2heapp (find_max' x gv2) n (Node x a1 a2)), (pow2heapp (find_max' x gv2) n (Node x a1 a1)), (pow2heapp (find_max' x gv2) n (Node x a1 gv4)), (pow2heapp (find_max' x gv2) n (Node x gv4 a2))
(pow2heapp (find_max' x gv2) n (Node x gv4 a1)), (pow2heapp (find_max' x gv2) n (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) n (Node n a2 a2)), (pow2heapp (find_max' x gv2) n (Node n a2 a1)), (pow2heapp (find_max' x gv2) n (Node n a2 gv4)), (pow2heapp (find_max' x gv2) n (Node n a1 a2)), (pow2heapp (find_max' x gv2) n (Node n a1 a1)), (pow2heapp (find_max' x gv2) n (Node n a1 gv4)), (pow2heapp (find_max' x gv2) n (Node n gv4 a2)), (pow2heapp (find_max' x gv2) n (Node n gv4 a1))
(pow2heapp (find_max' x gv2) n (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) n (smash a2 a2)), (pow2heapp (find_max' x gv2) n (smash a2 a1)), (pow2heapp (find_max' x gv2) n (smash a2 gv4)), (pow2heapp (find_max' x gv2) n (smash a1 a2)), (pow2heapp (find_max' x gv2) n (smash a1 a1)), (pow2heapp (find_max' x gv2) n (smash a1 gv4)), (pow2heapp (find_max' x gv2) n (smash gv4 a2)), (pow2heapp (find_max' x gv2) n (smash gv4 a1)), (pow2heapp (find_max' x gv2) n (smash gv4 gv4))
(pow2heapp (find_max' x gv2) n Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) a2), (pow2heapp (find_max' x gv2) (find_max' x q) a1), (pow2heapp (find_max' x gv2) (find_max' x q) gv4), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 gv4))
(pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv4 a2))
(pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv4 a1))
(pow2heapp (find_max' x gv2) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv2) a2), (pow2heapp (find_max' x gv2) (find_max' x gv2) a1), (pow2heapp (find_max' x gv2) (find_max' x gv2) gv4), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a1))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 gv4))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv4 a2))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' n q) a2), (pow2heapp (find_max' x gv2) (find_max' n q) a1), (pow2heapp (find_max' x gv2) (find_max' n q) gv4), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a1))
(pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 gv4))
(pow2heapp (find_max' x gv2) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n q) Leaf), (pow2heapp (find_max' x gv2) (find_max' n gv2) a2), (pow2heapp (find_max' x gv2) (find_max' n gv2) a1), (pow2heapp (find_max' x gv2) (find_max' n gv2) gv4), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 gv4))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a2))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a1))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv4 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) a2), (pow2heapp (find_max' x gv2) (length q) a1), (pow2heapp (find_max' x gv2) (length q) gv4), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a1))
(pow2heapp (find_max' x gv2) (length q) (Node x a2 gv4)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 gv4)), (pow2heapp (find_max' x gv2) (length q) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 gv4))
(pow2heapp (find_max' x gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 gv4)), (pow2heapp (find_max' x gv2) (length q) (Node n gv4 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a2 gv4)), (pow2heapp (find_max' x gv2) (length q) (smash a1 a2))
(pow2heapp (find_max' x gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a1 gv4)), (pow2heapp (find_max' x gv2) (length q) (smash gv4 a2)), (pow2heapp (find_max' x gv2) (length q) (smash gv4 a1)), (pow2heapp (find_max' x gv2) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) a2), (pow2heapp (find_max' x gv2) (length gv2) a1), (pow2heapp (find_max' x gv2) (length gv2) gv4), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a2))
(pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv4 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv4 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a1))
(pow2heapp (find_max' x gv2) (length gv2) (Node n a2 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv4 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv4 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv4 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 gv4))
(pow2heapp (find_max' x gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv4 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv4 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x gv4)
(pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a2 gv4)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node x a1 gv4)), (pow2heapp (find_max' n q) x (Node x gv4 a2)), (pow2heapp (find_max' n q) x (Node x gv4 a1)), (pow2heapp (find_max' n q) x (Node x gv4 gv4)), (pow2heapp (find_max' n q) x (Node n a2 a2))
(pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a2 gv4)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (Node n a1 gv4)), (pow2heapp (find_max' n q) x (Node n gv4 a2)), (pow2heapp (find_max' n q) x (Node n gv4 a1)), (pow2heapp (find_max' n q) x (Node n gv4 gv4)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1))
(pow2heapp (find_max' n q) x (smash a2 gv4)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x (smash a1 gv4)), (pow2heapp (find_max' n q) x (smash gv4 a2)), (pow2heapp (find_max' n q) x (smash gv4 a1)), (pow2heapp (find_max' n q) x (smash gv4 gv4)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1)
(pow2heapp (find_max' n q) n gv4), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a2 gv4)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node x a1 gv4)), (pow2heapp (find_max' n q) n (Node x gv4 a2)), (pow2heapp (find_max' n q) n (Node x gv4 a1)), (pow2heapp (find_max' n q) n (Node x gv4 gv4))
(pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a2 gv4)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node n a1 gv4)), (pow2heapp (find_max' n q) n (Node n gv4 a2)), (pow2heapp (find_max' n q) n (Node n gv4 a1)), (pow2heapp (find_max' n q) n (Node n gv4 gv4)), (pow2heapp (find_max' n q) n (smash a2 a2))
(pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a2 gv4)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n (smash a1 gv4)), (pow2heapp (find_max' n q) n (smash gv4 a2)), (pow2heapp (find_max' n q) n (smash gv4 a1)), (pow2heapp (find_max' n q) n (smash gv4 gv4)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2)
(pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) gv4), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv4 gv4))
(pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv4)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x q) Leaf)
(pow2heapp (find_max' n q) (find_max' x gv2) a2), (pow2heapp (find_max' n q) (find_max' x gv2) a1), (pow2heapp (find_max' n q) (find_max' x gv2) gv4), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv4 a2))
(pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv4 a1))
(pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv4 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv4 gv4))
(pow2heapp (find_max' n q) (find_max' x gv2) Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) gv4), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv4))
(pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv4)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv4 a1))
(pow2heapp (find_max' n q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' n gv2) a2), (pow2heapp (find_max' n q) (find_max' n gv2) a1), (pow2heapp (find_max' n q) (find_max' n gv2) gv4), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a1))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv4 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 gv4))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv4 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash gv4 a2))
(pow2heapp (find_max' n q) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash gv4 gv4)), (pow2heapp (find_max' n q) (find_max' n gv2) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) gv4), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv4)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2))
(pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv4)), (pow2heapp (find_max' n q) (length q) (Node x gv4 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv4 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv4)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1))
(pow2heapp (find_max' n q) (length q) (Node n a1 gv4)), (pow2heapp (find_max' n q) (length q) (Node n gv4 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv4 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 gv4)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 gv4))
(pow2heapp (find_max' n q) (length q) (smash gv4 a2)), (pow2heapp (find_max' n q) (length q) (smash gv4 a1)), (pow2heapp (find_max' n q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' n q) (length gv2) a2), (pow2heapp (find_max' n q) (length gv2) a1), (pow2heapp (find_max' n q) (length gv2) gv4), (pow2heapp (find_max' n q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 gv4))
(pow2heapp (find_max' n q) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 gv4)), (pow2heapp (find_max' n q) (length gv2) (Node x gv4 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x gv4 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x gv4 gv4)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 gv4)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 a2))
(pow2heapp (find_max' n q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 gv4)), (pow2heapp (find_max' n q) (length gv2) (Node n gv4 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n gv4 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n q) (length gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv2) (smash a2 gv4)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a1))
(pow2heapp (find_max' n q) (length gv2) (smash a1 gv4)), (pow2heapp (find_max' n q) (length gv2) (smash gv4 a2)), (pow2heapp (find_max' n q) (length gv2) (smash gv4 a1)), (pow2heapp (find_max' n q) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' n q) (length gv2) Leaf), (pow2heapp (find_max' n gv2) x a2), (pow2heapp (find_max' n gv2) x a1), (pow2heapp (find_max' n gv2) x gv4), (pow2heapp (find_max' n gv2) x (Node x a2 a2)), (pow2heapp (find_max' n gv2) x (Node x a2 a1))
(pow2heapp (find_max' n gv2) x (Node x a2 gv4)), (pow2heapp (find_max' n gv2) x (Node x a1 a2)), (pow2heapp (find_max' n gv2) x (Node x a1 a1)), (pow2heapp (find_max' n gv2) x (Node x a1 gv4)), (pow2heapp (find_max' n gv2) x (Node x gv4 a2)), (pow2heapp (find_max' n gv2) x (Node x gv4 a1)), (pow2heapp (find_max' n gv2) x (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) x (Node n a2 a2)), (pow2heapp (find_max' n gv2) x (Node n a2 a1)), (pow2heapp (find_max' n gv2) x (Node n a2 gv4))
(pow2heapp (find_max' n gv2) x (Node n a1 a2)), (pow2heapp (find_max' n gv2) x (Node n a1 a1)), (pow2heapp (find_max' n gv2) x (Node n a1 gv4)), (pow2heapp (find_max' n gv2) x (Node n gv4 a2)), (pow2heapp (find_max' n gv2) x (Node n gv4 a1)), (pow2heapp (find_max' n gv2) x (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) x (smash a2 a2)), (pow2heapp (find_max' n gv2) x (smash a2 a1)), (pow2heapp (find_max' n gv2) x (smash a2 gv4)), (pow2heapp (find_max' n gv2) x (smash a1 a2))
(pow2heapp (find_max' n gv2) x (smash a1 a1)), (pow2heapp (find_max' n gv2) x (smash a1 gv4)), (pow2heapp (find_max' n gv2) x (smash gv4 a2)), (pow2heapp (find_max' n gv2) x (smash gv4 a1)), (pow2heapp (find_max' n gv2) x (smash gv4 gv4)), (pow2heapp (find_max' n gv2) x Leaf), (pow2heapp (find_max' n gv2) n a2), (pow2heapp (find_max' n gv2) n a1), (pow2heapp (find_max' n gv2) n gv4), (pow2heapp (find_max' n gv2) n (Node x a2 a2))
(pow2heapp (find_max' n gv2) n (Node x a2 a1)), (pow2heapp (find_max' n gv2) n (Node x a2 gv4)), (pow2heapp (find_max' n gv2) n (Node x a1 a2)), (pow2heapp (find_max' n gv2) n (Node x a1 a1)), (pow2heapp (find_max' n gv2) n (Node x a1 gv4)), (pow2heapp (find_max' n gv2) n (Node x gv4 a2)), (pow2heapp (find_max' n gv2) n (Node x gv4 a1)), (pow2heapp (find_max' n gv2) n (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) n (Node n a2 a2)), (pow2heapp (find_max' n gv2) n (Node n a2 a1))
(pow2heapp (find_max' n gv2) n (Node n a2 gv4)), (pow2heapp (find_max' n gv2) n (Node n a1 a2)), (pow2heapp (find_max' n gv2) n (Node n a1 a1)), (pow2heapp (find_max' n gv2) n (Node n a1 gv4)), (pow2heapp (find_max' n gv2) n (Node n gv4 a2)), (pow2heapp (find_max' n gv2) n (Node n gv4 a1)), (pow2heapp (find_max' n gv2) n (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) n (smash a2 a2)), (pow2heapp (find_max' n gv2) n (smash a2 a1)), (pow2heapp (find_max' n gv2) n (smash a2 gv4))
(pow2heapp (find_max' n gv2) n (smash a1 a2)), (pow2heapp (find_max' n gv2) n (smash a1 a1)), (pow2heapp (find_max' n gv2) n (smash a1 gv4)), (pow2heapp (find_max' n gv2) n (smash gv4 a2)), (pow2heapp (find_max' n gv2) n (smash gv4 a1)), (pow2heapp (find_max' n gv2) n (smash gv4 gv4)), (pow2heapp (find_max' n gv2) n Leaf), (pow2heapp (find_max' n gv2) (find_max' x q) a2), (pow2heapp (find_max' n gv2) (find_max' x q) a1), (pow2heapp (find_max' n gv2) (find_max' x q) gv4)
(pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a2))
(pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a1))
(pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' x q) Leaf), (pow2heapp (find_max' n gv2) (find_max' x gv2) a2), (pow2heapp (find_max' n gv2) (find_max' x gv2) a1)
(pow2heapp (find_max' n gv2) (find_max' x gv2) gv4), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv4 gv4))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a2))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' n gv2) (find_max' n q) a2)
(pow2heapp (find_max' n gv2) (find_max' n q) a1), (pow2heapp (find_max' n gv2) (find_max' n q) gv4), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv4 a1))
(pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv4 gv4))
(pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' n q) Leaf)
(pow2heapp (find_max' n gv2) (find_max' n gv2) a2), (pow2heapp (find_max' n gv2) (find_max' n gv2) a1), (pow2heapp (find_max' n gv2) (find_max' n gv2) gv4), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv4 a2))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv4 a1))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv4 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv4 gv4))
(pow2heapp (find_max' n gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' n gv2) (length q) a2), (pow2heapp (find_max' n gv2) (length q) a1), (pow2heapp (find_max' n gv2) (length q) gv4), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 gv4))
(pow2heapp (find_max' n gv2) (length q) (Node x gv4 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x gv4 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 gv4)), (pow2heapp (find_max' n gv2) (length q) (Node n gv4 a2))
(pow2heapp (find_max' n gv2) (length q) (Node n gv4 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (length q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (length q) (smash gv4 a2)), (pow2heapp (find_max' n gv2) (length q) (smash gv4 a1))
(pow2heapp (find_max' n gv2) (length q) (smash gv4 gv4)), (pow2heapp (find_max' n gv2) (length q) Leaf), (pow2heapp (find_max' n gv2) (length gv2) a2), (pow2heapp (find_max' n gv2) (length gv2) a1), (pow2heapp (find_max' n gv2) (length gv2) gv4), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a1))
(pow2heapp (find_max' n gv2) (length gv2) (Node x a1 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv4 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv4 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv4 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 gv4))
(pow2heapp (find_max' n gv2) (length gv2) (Node n gv4 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n gv4 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n gv4 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 gv4)), (pow2heapp (find_max' n gv2) (length gv2) (smash gv4 a2))
(pow2heapp (find_max' n gv2) (length gv2) (smash gv4 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' n gv2) (length gv2) Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x gv4), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a2 gv4)), (pow2heapp (length q) x (Node x a1 a2))
(pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node x a1 gv4)), (pow2heapp (length q) x (Node x gv4 a2)), (pow2heapp (length q) x (Node x gv4 a1)), (pow2heapp (length q) x (Node x gv4 gv4)), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a2 gv4)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1))
(pow2heapp (length q) x (Node n a1 gv4)), (pow2heapp (length q) x (Node n gv4 a2)), (pow2heapp (length q) x (Node n gv4 a1)), (pow2heapp (length q) x (Node n gv4 gv4)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a2 gv4)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x (smash a1 gv4))
(pow2heapp (length q) x (smash gv4 a2)), (pow2heapp (length q) x (smash gv4 a1)), (pow2heapp (length q) x (smash gv4 gv4)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n gv4), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a2 gv4))
(pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node x a1 gv4)), (pow2heapp (length q) n (Node x gv4 a2)), (pow2heapp (length q) n (Node x gv4 a1)), (pow2heapp (length q) n (Node x gv4 gv4)), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a2 gv4)), (pow2heapp (length q) n (Node n a1 a2))
(pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node n a1 gv4)), (pow2heapp (length q) n (Node n gv4 a2)), (pow2heapp (length q) n (Node n gv4 a1)), (pow2heapp (length q) n (Node n gv4 gv4)), (pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a2 gv4)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1))
(pow2heapp (length q) n (smash a1 gv4)), (pow2heapp (length q) n (smash gv4 a2)), (pow2heapp (length q) n (smash gv4 a1)), (pow2heapp (length q) n (smash gv4 gv4)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) gv4), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1))
(pow2heapp (length q) (find_max' x q) (Node x a2 gv4)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv4)), (pow2heapp (length q) (find_max' x q) (Node x gv4 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv4 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv4))
(pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv4)), (pow2heapp (length q) (find_max' x q) (Node n gv4 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv4 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 gv4)), (pow2heapp (length q) (find_max' x q) (smash a1 a2))
(pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv4 a2)), (pow2heapp (length q) (find_max' x q) (smash gv4 a1)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) a2), (pow2heapp (length q) (find_max' x gv2) a1), (pow2heapp (length q) (find_max' x gv2) gv4), (pow2heapp (length q) (find_max' x gv2) (Node x a2 a2))
(pow2heapp (length q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a2 gv4)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (length q) (find_max' x gv2) (Node x gv4 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a1))
(pow2heapp (length q) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 gv4)), (pow2heapp (length q) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n gv4 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (length q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (length q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a2 gv4))
(pow2heapp (length q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (length q) (find_max' x gv2) (smash gv4 a2)), (pow2heapp (length q) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (length q) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) gv4)
(pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv4)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv4)), (pow2heapp (length q) (find_max' n q) (Node x gv4 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv4 a1)), (pow2heapp (length q) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2))
(pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv4)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv4)), (pow2heapp (length q) (find_max' n q) (Node n gv4 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv4 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1))
(pow2heapp (length q) (find_max' n q) (smash a2 gv4)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 gv4)), (pow2heapp (length q) (find_max' n q) (smash gv4 a2)), (pow2heapp (length q) (find_max' n q) (smash gv4 a1)), (pow2heapp (length q) (find_max' n q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' n gv2) a2), (pow2heapp (length q) (find_max' n gv2) a1)
(pow2heapp (length q) (find_max' n gv2) gv4), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 gv4)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (length q) (find_max' n gv2) (Node x gv4 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x gv4 gv4))
(pow2heapp (length q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 gv4)), (pow2heapp (length q) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n gv4 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (length q) (find_max' n gv2) (smash a2 a2))
(pow2heapp (length q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a2 gv4)), (pow2heapp (length q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (length q) (find_max' n gv2) (smash gv4 a2)), (pow2heapp (length q) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (length q) (find_max' n gv2) (smash gv4 gv4)), (pow2heapp (length q) (find_max' n gv2) Leaf), (pow2heapp (length q) (length q) a2)
(pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) gv4), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a2 gv4)), (pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node x a1 gv4)), (pow2heapp (length q) (length q) (Node x gv4 a2)), (pow2heapp (length q) (length q) (Node x gv4 a1))
(pow2heapp (length q) (length q) (Node x gv4 gv4)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a2 gv4)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node n a1 gv4)), (pow2heapp (length q) (length q) (Node n gv4 a2)), (pow2heapp (length q) (length q) (Node n gv4 a1)), (pow2heapp (length q) (length q) (Node n gv4 gv4))
(pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a2 gv4)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) (smash a1 gv4)), (pow2heapp (length q) (length q) (smash gv4 a2)), (pow2heapp (length q) (length q) (smash gv4 a1)), (pow2heapp (length q) (length q) (smash gv4 gv4)), (pow2heapp (length q) (length q) Leaf)
(pow2heapp (length q) (length gv2) a2), (pow2heapp (length q) (length gv2) a1), (pow2heapp (length q) (length gv2) gv4), (pow2heapp (length q) (length gv2) (Node x a2 a2)), (pow2heapp (length q) (length gv2) (Node x a2 a1)), (pow2heapp (length q) (length gv2) (Node x a2 gv4)), (pow2heapp (length q) (length gv2) (Node x a1 a2)), (pow2heapp (length q) (length gv2) (Node x a1 a1)), (pow2heapp (length q) (length gv2) (Node x a1 gv4)), (pow2heapp (length q) (length gv2) (Node x gv4 a2))
(pow2heapp (length q) (length gv2) (Node x gv4 a1)), (pow2heapp (length q) (length gv2) (Node x gv4 gv4)), (pow2heapp (length q) (length gv2) (Node n a2 a2)), (pow2heapp (length q) (length gv2) (Node n a2 a1)), (pow2heapp (length q) (length gv2) (Node n a2 gv4)), (pow2heapp (length q) (length gv2) (Node n a1 a2)), (pow2heapp (length q) (length gv2) (Node n a1 a1)), (pow2heapp (length q) (length gv2) (Node n a1 gv4)), (pow2heapp (length q) (length gv2) (Node n gv4 a2)), (pow2heapp (length q) (length gv2) (Node n gv4 a1))
(pow2heapp (length q) (length gv2) (Node n gv4 gv4)), (pow2heapp (length q) (length gv2) (smash a2 a2)), (pow2heapp (length q) (length gv2) (smash a2 a1)), (pow2heapp (length q) (length gv2) (smash a2 gv4)), (pow2heapp (length q) (length gv2) (smash a1 a2)), (pow2heapp (length q) (length gv2) (smash a1 a1)), (pow2heapp (length q) (length gv2) (smash a1 gv4)), (pow2heapp (length q) (length gv2) (smash gv4 a2)), (pow2heapp (length q) (length gv2) (smash gv4 a1)), (pow2heapp (length q) (length gv2) (smash gv4 gv4))
(pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) x a2), (pow2heapp (length gv2) x a1), (pow2heapp (length gv2) x gv4), (pow2heapp (length gv2) x (Node x a2 a2)), (pow2heapp (length gv2) x (Node x a2 a1)), (pow2heapp (length gv2) x (Node x a2 gv4)), (pow2heapp (length gv2) x (Node x a1 a2)), (pow2heapp (length gv2) x (Node x a1 a1)), (pow2heapp (length gv2) x (Node x a1 gv4))
(pow2heapp (length gv2) x (Node x gv4 a2)), (pow2heapp (length gv2) x (Node x gv4 a1)), (pow2heapp (length gv2) x (Node x gv4 gv4)), (pow2heapp (length gv2) x (Node n a2 a2)), (pow2heapp (length gv2) x (Node n a2 a1)), (pow2heapp (length gv2) x (Node n a2 gv4)), (pow2heapp (length gv2) x (Node n a1 a2)), (pow2heapp (length gv2) x (Node n a1 a1)), (pow2heapp (length gv2) x (Node n a1 gv4)), (pow2heapp (length gv2) x (Node n gv4 a2))
(pow2heapp (length gv2) x (Node n gv4 a1)), (pow2heapp (length gv2) x (Node n gv4 gv4)), (pow2heapp (length gv2) x (smash a2 a2)), (pow2heapp (length gv2) x (smash a2 a1)), (pow2heapp (length gv2) x (smash a2 gv4)), (pow2heapp (length gv2) x (smash a1 a2)), (pow2heapp (length gv2) x (smash a1 a1)), (pow2heapp (length gv2) x (smash a1 gv4)), (pow2heapp (length gv2) x (smash gv4 a2)), (pow2heapp (length gv2) x (smash gv4 a1))
(pow2heapp (length gv2) x (smash gv4 gv4)), (pow2heapp (length gv2) x Leaf), (pow2heapp (length gv2) n a2), (pow2heapp (length gv2) n a1), (pow2heapp (length gv2) n gv4), (pow2heapp (length gv2) n (Node x a2 a2)), (pow2heapp (length gv2) n (Node x a2 a1)), (pow2heapp (length gv2) n (Node x a2 gv4)), (pow2heapp (length gv2) n (Node x a1 a2)), (pow2heapp (length gv2) n (Node x a1 a1))
(pow2heapp (length gv2) n (Node x a1 gv4)), (pow2heapp (length gv2) n (Node x gv4 a2)), (pow2heapp (length gv2) n (Node x gv4 a1)), (pow2heapp (length gv2) n (Node x gv4 gv4)), (pow2heapp (length gv2) n (Node n a2 a2)), (pow2heapp (length gv2) n (Node n a2 a1)), (pow2heapp (length gv2) n (Node n a2 gv4)), (pow2heapp (length gv2) n (Node n a1 a2)), (pow2heapp (length gv2) n (Node n a1 a1)), (pow2heapp (length gv2) n (Node n a1 gv4))
(pow2heapp (length gv2) n (Node n gv4 a2)), (pow2heapp (length gv2) n (Node n gv4 a1)), (pow2heapp (length gv2) n (Node n gv4 gv4)), (pow2heapp (length gv2) n (smash a2 a2)), (pow2heapp (length gv2) n (smash a2 a1)), (pow2heapp (length gv2) n (smash a2 gv4)), (pow2heapp (length gv2) n (smash a1 a2)), (pow2heapp (length gv2) n (smash a1 a1)), (pow2heapp (length gv2) n (smash a1 gv4)), (pow2heapp (length gv2) n (smash gv4 a2))
(pow2heapp (length gv2) n (smash gv4 a1)), (pow2heapp (length gv2) n (smash gv4 gv4)), (pow2heapp (length gv2) n Leaf), (pow2heapp (length gv2) (find_max' x q) a2), (pow2heapp (length gv2) (find_max' x q) a1), (pow2heapp (length gv2) (find_max' x q) gv4), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 gv4)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 a2))
(pow2heapp (length gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 gv4)), (pow2heapp (length gv2) (find_max' x q) (Node x gv4 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x gv4 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node n a2 gv4)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a1))
(pow2heapp (length gv2) (find_max' x q) (Node n a1 gv4)), (pow2heapp (length gv2) (find_max' x q) (Node n gv4 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n gv4 a1)), (pow2heapp (length gv2) (find_max' x q) (Node n gv4 gv4)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a2 gv4)), (pow2heapp (length gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (length gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a1 gv4))
(pow2heapp (length gv2) (find_max' x q) (smash gv4 a2)), (pow2heapp (length gv2) (find_max' x q) (smash gv4 a1)), (pow2heapp (length gv2) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) a2), (pow2heapp (length gv2) (find_max' x gv2) a1), (pow2heapp (length gv2) (find_max' x gv2) gv4), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 gv4))
(pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv4 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv4 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a2))
(pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv4 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv4 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv4 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 a1))
(pow2heapp (length gv2) (find_max' x gv2) (smash a1 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv4 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv4 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (find_max' n q) a2), (pow2heapp (length gv2) (find_max' n q) a1), (pow2heapp (length gv2) (find_max' n q) gv4), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a1))
(pow2heapp (length gv2) (find_max' n q) (Node x a2 gv4)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 gv4)), (pow2heapp (length gv2) (find_max' n q) (Node x gv4 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x gv4 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 gv4))
(pow2heapp (length gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 gv4)), (pow2heapp (length gv2) (find_max' n q) (Node n gv4 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n gv4 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n gv4 gv4)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a2 gv4)), (pow2heapp (length gv2) (find_max' n q) (smash a1 a2))
(pow2heapp (length gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a1 gv4)), (pow2heapp (length gv2) (find_max' n q) (smash gv4 a2)), (pow2heapp (length gv2) (find_max' n q) (smash gv4 a1)), (pow2heapp (length gv2) (find_max' n q) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' n q) Leaf), (pow2heapp (length gv2) (find_max' n gv2) a2), (pow2heapp (length gv2) (find_max' n gv2) a1), (pow2heapp (length gv2) (find_max' n gv2) gv4), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a2))
(pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv4 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv4 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a1))
(pow2heapp (length gv2) (find_max' n gv2) (Node n a2 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv4 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv4 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv4 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 gv4))
(pow2heapp (length gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 gv4)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv4 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv4 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' n gv2) Leaf), (pow2heapp (length gv2) (length q) a2), (pow2heapp (length gv2) (length q) a1), (pow2heapp (length gv2) (length q) gv4)
(pow2heapp (length gv2) (length q) (Node x a2 a2)), (pow2heapp (length gv2) (length q) (Node x a2 a1)), (pow2heapp (length gv2) (length q) (Node x a2 gv4)), (pow2heapp (length gv2) (length q) (Node x a1 a2)), (pow2heapp (length gv2) (length q) (Node x a1 a1)), (pow2heapp (length gv2) (length q) (Node x a1 gv4)), (pow2heapp (length gv2) (length q) (Node x gv4 a2)), (pow2heapp (length gv2) (length q) (Node x gv4 a1)), (pow2heapp (length gv2) (length q) (Node x gv4 gv4)), (pow2heapp (length gv2) (length q) (Node n a2 a2))
(pow2heapp (length gv2) (length q) (Node n a2 a1)), (pow2heapp (length gv2) (length q) (Node n a2 gv4)), (pow2heapp (length gv2) (length q) (Node n a1 a2)), (pow2heapp (length gv2) (length q) (Node n a1 a1)), (pow2heapp (length gv2) (length q) (Node n a1 gv4)), (pow2heapp (length gv2) (length q) (Node n gv4 a2)), (pow2heapp (length gv2) (length q) (Node n gv4 a1)), (pow2heapp (length gv2) (length q) (Node n gv4 gv4)), (pow2heapp (length gv2) (length q) (smash a2 a2)), (pow2heapp (length gv2) (length q) (smash a2 a1))
(pow2heapp (length gv2) (length q) (smash a2 gv4)), (pow2heapp (length gv2) (length q) (smash a1 a2)), (pow2heapp (length gv2) (length q) (smash a1 a1)), (pow2heapp (length gv2) (length q) (smash a1 gv4)), (pow2heapp (length gv2) (length q) (smash gv4 a2)), (pow2heapp (length gv2) (length q) (smash gv4 a1)), (pow2heapp (length gv2) (length q) (smash gv4 gv4)), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) a2), (pow2heapp (length gv2) (length gv2) a1)
(pow2heapp (length gv2) (length gv2) gv4), (pow2heapp (length gv2) (length gv2) (Node x a2 a2)), (pow2heapp (length gv2) (length gv2) (Node x a2 a1)), (pow2heapp (length gv2) (length gv2) (Node x a2 gv4)), (pow2heapp (length gv2) (length gv2) (Node x a1 a2)), (pow2heapp (length gv2) (length gv2) (Node x a1 a1)), (pow2heapp (length gv2) (length gv2) (Node x a1 gv4)), (pow2heapp (length gv2) (length gv2) (Node x gv4 a2)), (pow2heapp (length gv2) (length gv2) (Node x gv4 a1)), (pow2heapp (length gv2) (length gv2) (Node x gv4 gv4))
(pow2heapp (length gv2) (length gv2) (Node n a2 a2)), (pow2heapp (length gv2) (length gv2) (Node n a2 a1)), (pow2heapp (length gv2) (length gv2) (Node n a2 gv4)), (pow2heapp (length gv2) (length gv2) (Node n a1 a2)), (pow2heapp (length gv2) (length gv2) (Node n a1 a1)), (pow2heapp (length gv2) (length gv2) (Node n a1 gv4)), (pow2heapp (length gv2) (length gv2) (Node n gv4 a2)), (pow2heapp (length gv2) (length gv2) (Node n gv4 a1)), (pow2heapp (length gv2) (length gv2) (Node n gv4 gv4)), (pow2heapp (length gv2) (length gv2) (smash a2 a2))
(pow2heapp (length gv2) (length gv2) (smash a2 a1)), (pow2heapp (length gv2) (length gv2) (smash a2 gv4)), (pow2heapp (length gv2) (length gv2) (smash a1 a2)), (pow2heapp (length gv2) (length gv2) (smash a1 a1)), (pow2heapp (length gv2) (length gv2) (smash a1 gv4)), (pow2heapp (length gv2) (length gv2) (smash gv4 a2)), (pow2heapp (length gv2) (length gv2) (smash gv4 a1)), (pow2heapp (length gv2) (length gv2) (smash gv4 gv4)), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (a2 :: q))
(Permutation q (a2 :: gv2)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv2)), (Permutation q (gv4 :: q)), (Permutation q (gv4 :: gv2)), (Permutation q (merge q q)), (Permutation q (merge q gv2)), (Permutation q (merge gv2 q)), (Permutation q (merge gv2 gv2)), (Permutation q (heap_delete_max a2))
(Permutation q (heap_delete_max a1)), (Permutation q (heap_delete_max gv4)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q q gv4)), (Permutation q (join q gv2 a2)), (Permutation q (join q gv2 a1)), (Permutation q (join q gv2 gv4)), (Permutation q (join gv2 q a2)), (Permutation q (join gv2 q a1))
(Permutation q (join gv2 q gv4)), (Permutation q (join gv2 gv2 a2)), (Permutation q (join gv2 gv2 a1)), (Permutation q (join gv2 gv2 gv4)), (Permutation q (insert x q)), (Permutation q (insert x gv2)), (Permutation q (insert n q)), (Permutation q (insert n gv2)), (Permutation q (carry q a2)), (Permutation q (carry q a1))
(Permutation q (carry q gv4)), (Permutation q (carry gv2 a2)), (Permutation q (carry gv2 a1)), (Permutation q (carry gv2 gv4)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q []), (Permutation gv2 (a2 :: q))
(Permutation gv2 (a2 :: gv2)), (Permutation gv2 (a1 :: q)), (Permutation gv2 (a1 :: gv2)), (Permutation gv2 (gv4 :: q)), (Permutation gv2 (gv4 :: gv2)), (Permutation gv2 (merge q q)), (Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (heap_delete_max a2))
(Permutation gv2 (heap_delete_max a1)), (Permutation gv2 (heap_delete_max gv4)), (Permutation gv2 (join q q a2)), (Permutation gv2 (join q q a1)), (Permutation gv2 (join q q gv4)), (Permutation gv2 (join q gv2 a2)), (Permutation gv2 (join q gv2 a1)), (Permutation gv2 (join q gv2 gv4)), (Permutation gv2 (join gv2 q a2)), (Permutation gv2 (join gv2 q a1))
(Permutation gv2 (join gv2 q gv4)), (Permutation gv2 (join gv2 gv2 a2)), (Permutation gv2 (join gv2 gv2 a1)), (Permutation gv2 (join gv2 gv2 gv4)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (insert n q)), (Permutation gv2 (insert n gv2)), (Permutation gv2 (carry q a2)), (Permutation gv2 (carry q a1))
(Permutation gv2 (carry q gv4)), (Permutation gv2 (carry gv2 a2)), (Permutation gv2 (carry gv2 a1)), (Permutation gv2 (carry gv2 gv4)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2)), (Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) gv2), (Permutation (a2 :: q) (a2 :: gv2)), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv2)), (Permutation (a2 :: q) (gv4 :: q)), (Permutation (a2 :: q) (gv4 :: gv2)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv2)), (Permutation (a2 :: q) (merge gv2 q)), (Permutation (a2 :: q) (merge gv2 gv2))
(Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (heap_delete_max gv4)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (join q q gv4)), (Permutation (a2 :: q) (join q gv2 a2)), (Permutation (a2 :: q) (join q gv2 a1)), (Permutation (a2 :: q) (join q gv2 gv4)), (Permutation (a2 :: q) (join gv2 q a2))
(Permutation (a2 :: q) (join gv2 q a1)), (Permutation (a2 :: q) (join gv2 q gv4)), (Permutation (a2 :: q) (join gv2 gv2 a2)), (Permutation (a2 :: q) (join gv2 gv2 a1)), (Permutation (a2 :: q) (join gv2 gv2 gv4)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv2)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert n gv2)), (Permutation (a2 :: q) (carry q a2))
(Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry q gv4)), (Permutation (a2 :: q) (carry gv2 a2)), (Permutation (a2 :: q) (carry gv2 a1)), (Permutation (a2 :: q) (carry gv2 gv4)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv2)), (Permutation (a2 :: q) (gv2 ++ q)), (Permutation (a2 :: q) (gv2 ++ gv2)), (Permutation (a2 :: q) [])
(Permutation (a2 :: gv2) q), (Permutation (a2 :: gv2) gv2), (Permutation (a2 :: gv2) (a2 :: q)), (Permutation (a2 :: gv2) (a1 :: q)), (Permutation (a2 :: gv2) (a1 :: gv2)), (Permutation (a2 :: gv2) (gv4 :: q)), (Permutation (a2 :: gv2) (gv4 :: gv2)), (Permutation (a2 :: gv2) (merge q q)), (Permutation (a2 :: gv2) (merge q gv2)), (Permutation (a2 :: gv2) (merge gv2 q))
(Permutation (a2 :: gv2) (merge gv2 gv2)), (Permutation (a2 :: gv2) (heap_delete_max a2)), (Permutation (a2 :: gv2) (heap_delete_max a1)), (Permutation (a2 :: gv2) (heap_delete_max gv4)), (Permutation (a2 :: gv2) (join q q a2)), (Permutation (a2 :: gv2) (join q q a1)), (Permutation (a2 :: gv2) (join q q gv4)), (Permutation (a2 :: gv2) (join q gv2 a2)), (Permutation (a2 :: gv2) (join q gv2 a1)), (Permutation (a2 :: gv2) (join q gv2 gv4))
(Permutation (a2 :: gv2) (join gv2 q a2)), (Permutation (a2 :: gv2) (join gv2 q a1)), (Permutation (a2 :: gv2) (join gv2 q gv4)), (Permutation (a2 :: gv2) (join gv2 gv2 a2)), (Permutation (a2 :: gv2) (join gv2 gv2 a1)), (Permutation (a2 :: gv2) (join gv2 gv2 gv4)), (Permutation (a2 :: gv2) (insert x q)), (Permutation (a2 :: gv2) (insert x gv2)), (Permutation (a2 :: gv2) (insert n q)), (Permutation (a2 :: gv2) (insert n gv2))
(Permutation (a2 :: gv2) (carry q a2)), (Permutation (a2 :: gv2) (carry q a1)), (Permutation (a2 :: gv2) (carry q gv4)), (Permutation (a2 :: gv2) (carry gv2 a2)), (Permutation (a2 :: gv2) (carry gv2 a1)), (Permutation (a2 :: gv2) (carry gv2 gv4)), (Permutation (a2 :: gv2) (q ++ q)), (Permutation (a2 :: gv2) (q ++ gv2)), (Permutation (a2 :: gv2) (gv2 ++ q)), (Permutation (a2 :: gv2) (gv2 ++ gv2))
(Permutation (a2 :: gv2) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv2), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (a2 :: gv2)), (Permutation (a1 :: q) (a1 :: gv2)), (Permutation (a1 :: q) (gv4 :: q)), (Permutation (a1 :: q) (gv4 :: gv2)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv2))
(Permutation (a1 :: q) (merge gv2 q)), (Permutation (a1 :: q) (merge gv2 gv2)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (heap_delete_max gv4)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (join q q gv4)), (Permutation (a1 :: q) (join q gv2 a2)), (Permutation (a1 :: q) (join q gv2 a1))
(Permutation (a1 :: q) (join q gv2 gv4)), (Permutation (a1 :: q) (join gv2 q a2)), (Permutation (a1 :: q) (join gv2 q a1)), (Permutation (a1 :: q) (join gv2 q gv4)), (Permutation (a1 :: q) (join gv2 gv2 a2)), (Permutation (a1 :: q) (join gv2 gv2 a1)), (Permutation (a1 :: q) (join gv2 gv2 gv4)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert x gv2)), (Permutation (a1 :: q) (insert n q))
(Permutation (a1 :: q) (insert n gv2)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry q gv4)), (Permutation (a1 :: q) (carry gv2 a2)), (Permutation (a1 :: q) (carry gv2 a1)), (Permutation (a1 :: q) (carry gv2 gv4)), (Permutation (a1 :: q) (q ++ q)), (Permutation (a1 :: q) (q ++ gv2)), (Permutation (a1 :: q) (gv2 ++ q))
(Permutation (a1 :: q) (gv2 ++ gv2)), (Permutation (a1 :: q) []), (Permutation (a1 :: gv2) q), (Permutation (a1 :: gv2) gv2), (Permutation (a1 :: gv2) (a2 :: q)), (Permutation (a1 :: gv2) (a2 :: gv2)), (Permutation (a1 :: gv2) (a1 :: q)), (Permutation (a1 :: gv2) (gv4 :: q)), (Permutation (a1 :: gv2) (gv4 :: gv2)), (Permutation (a1 :: gv2) (merge q q))
(Permutation (a1 :: gv2) (merge q gv2)), (Permutation (a1 :: gv2) (merge gv2 q)), (Permutation (a1 :: gv2) (merge gv2 gv2)), (Permutation (a1 :: gv2) (heap_delete_max a2)), (Permutation (a1 :: gv2) (heap_delete_max a1)), (Permutation (a1 :: gv2) (heap_delete_max gv4)), (Permutation (a1 :: gv2) (join q q a2)), (Permutation (a1 :: gv2) (join q q a1)), (Permutation (a1 :: gv2) (join q q gv4)), (Permutation (a1 :: gv2) (join q gv2 a2))
(Permutation (a1 :: gv2) (join q gv2 a1)), (Permutation (a1 :: gv2) (join q gv2 gv4)), (Permutation (a1 :: gv2) (join gv2 q a2)), (Permutation (a1 :: gv2) (join gv2 q a1)), (Permutation (a1 :: gv2) (join gv2 q gv4)), (Permutation (a1 :: gv2) (join gv2 gv2 a2)), (Permutation (a1 :: gv2) (join gv2 gv2 a1)), (Permutation (a1 :: gv2) (join gv2 gv2 gv4)), (Permutation (a1 :: gv2) (insert x q)), (Permutation (a1 :: gv2) (insert x gv2))
(Permutation (a1 :: gv2) (insert n q)), (Permutation (a1 :: gv2) (insert n gv2)), (Permutation (a1 :: gv2) (carry q a2)), (Permutation (a1 :: gv2) (carry q a1)), (Permutation (a1 :: gv2) (carry q gv4)), (Permutation (a1 :: gv2) (carry gv2 a2)), (Permutation (a1 :: gv2) (carry gv2 a1)), (Permutation (a1 :: gv2) (carry gv2 gv4)), (Permutation (a1 :: gv2) (q ++ q)), (Permutation (a1 :: gv2) (q ++ gv2))
(Permutation (a1 :: gv2) (gv2 ++ q)), (Permutation (a1 :: gv2) (gv2 ++ gv2)), (Permutation (a1 :: gv2) []), (Permutation (gv4 :: q) q), (Permutation (gv4 :: q) gv2), (Permutation (gv4 :: q) (a2 :: q)), (Permutation (gv4 :: q) (a2 :: gv2)), (Permutation (gv4 :: q) (a1 :: q)), (Permutation (gv4 :: q) (a1 :: gv2)), (Permutation (gv4 :: q) (gv4 :: gv2))
(Permutation (gv4 :: q) (merge q q)), (Permutation (gv4 :: q) (merge q gv2)), (Permutation (gv4 :: q) (merge gv2 q)), (Permutation (gv4 :: q) (merge gv2 gv2)), (Permutation (gv4 :: q) (heap_delete_max a2)), (Permutation (gv4 :: q) (heap_delete_max a1)), (Permutation (gv4 :: q) (heap_delete_max gv4)), (Permutation (gv4 :: q) (join q q a2)), (Permutation (gv4 :: q) (join q q a1)), (Permutation (gv4 :: q) (join q q gv4))
(Permutation (gv4 :: q) (join q gv2 a2)), (Permutation (gv4 :: q) (join q gv2 a1)), (Permutation (gv4 :: q) (join q gv2 gv4)), (Permutation (gv4 :: q) (join gv2 q a2)), (Permutation (gv4 :: q) (join gv2 q a1)), (Permutation (gv4 :: q) (join gv2 q gv4)), (Permutation (gv4 :: q) (join gv2 gv2 a2)), (Permutation (gv4 :: q) (join gv2 gv2 a1)), (Permutation (gv4 :: q) (join gv2 gv2 gv4)), (Permutation (gv4 :: q) (insert x q))
(Permutation (gv4 :: q) (insert x gv2)), (Permutation (gv4 :: q) (insert n q)), (Permutation (gv4 :: q) (insert n gv2)), (Permutation (gv4 :: q) (carry q a2)), (Permutation (gv4 :: q) (carry q a1)), (Permutation (gv4 :: q) (carry q gv4)), (Permutation (gv4 :: q) (carry gv2 a2)), (Permutation (gv4 :: q) (carry gv2 a1)), (Permutation (gv4 :: q) (carry gv2 gv4)), (Permutation (gv4 :: q) (q ++ q))
(Permutation (gv4 :: q) (q ++ gv2)), (Permutation (gv4 :: q) (gv2 ++ q)), (Permutation (gv4 :: q) (gv2 ++ gv2)), (Permutation (gv4 :: q) []), (Permutation (gv4 :: gv2) q), (Permutation (gv4 :: gv2) gv2), (Permutation (gv4 :: gv2) (a2 :: q)), (Permutation (gv4 :: gv2) (a2 :: gv2)), (Permutation (gv4 :: gv2) (a1 :: q)), (Permutation (gv4 :: gv2) (a1 :: gv2))
(Permutation (gv4 :: gv2) (gv4 :: q)), (Permutation (gv4 :: gv2) (merge q q)), (Permutation (gv4 :: gv2) (merge q gv2)), (Permutation (gv4 :: gv2) (merge gv2 q)), (Permutation (gv4 :: gv2) (merge gv2 gv2)), (Permutation (gv4 :: gv2) (heap_delete_max a2)), (Permutation (gv4 :: gv2) (heap_delete_max a1)), (Permutation (gv4 :: gv2) (heap_delete_max gv4)), (Permutation (gv4 :: gv2) (join q q a2)), (Permutation (gv4 :: gv2) (join q q a1))
(Permutation (gv4 :: gv2) (join q q gv4)), (Permutation (gv4 :: gv2) (join q gv2 a2)), (Permutation (gv4 :: gv2) (join q gv2 a1)), (Permutation (gv4 :: gv2) (join q gv2 gv4)), (Permutation (gv4 :: gv2) (join gv2 q a2)), (Permutation (gv4 :: gv2) (join gv2 q a1)), (Permutation (gv4 :: gv2) (join gv2 q gv4)), (Permutation (gv4 :: gv2) (join gv2 gv2 a2)), (Permutation (gv4 :: gv2) (join gv2 gv2 a1)), (Permutation (gv4 :: gv2) (join gv2 gv2 gv4))
(Permutation (gv4 :: gv2) (insert x q)), (Permutation (gv4 :: gv2) (insert x gv2)), (Permutation (gv4 :: gv2) (insert n q)), (Permutation (gv4 :: gv2) (insert n gv2)), (Permutation (gv4 :: gv2) (carry q a2)), (Permutation (gv4 :: gv2) (carry q a1)), (Permutation (gv4 :: gv2) (carry q gv4)), (Permutation (gv4 :: gv2) (carry gv2 a2)), (Permutation (gv4 :: gv2) (carry gv2 a1)), (Permutation (gv4 :: gv2) (carry gv2 gv4))
(Permutation (gv4 :: gv2) (q ++ q)), (Permutation (gv4 :: gv2) (q ++ gv2)), (Permutation (gv4 :: gv2) (gv2 ++ q)), (Permutation (gv4 :: gv2) (gv2 ++ gv2)), (Permutation (gv4 :: gv2) []), (Permutation (merge q q) q), (Permutation (merge q q) gv2), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a2 :: gv2)), (Permutation (merge q q) (a1 :: q))
(Permutation (merge q q) (a1 :: gv2)), (Permutation (merge q q) (gv4 :: q)), (Permutation (merge q q) (gv4 :: gv2)), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (heap_delete_max gv4)), (Permutation (merge q q) (join q q a2))
(Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q q gv4)), (Permutation (merge q q) (join q gv2 a2)), (Permutation (merge q q) (join q gv2 a1)), (Permutation (merge q q) (join q gv2 gv4)), (Permutation (merge q q) (join gv2 q a2)), (Permutation (merge q q) (join gv2 q a1)), (Permutation (merge q q) (join gv2 q gv4)), (Permutation (merge q q) (join gv2 gv2 a2)), (Permutation (merge q q) (join gv2 gv2 a1))
(Permutation (merge q q) (join gv2 gv2 gv4)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv2)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (carry q gv4)), (Permutation (merge q q) (carry gv2 a2)), (Permutation (merge q q) (carry gv2 a1))
(Permutation (merge q q) (carry gv2 gv4)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) []), (Permutation (merge q gv2) q), (Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (a2 :: q)), (Permutation (merge q gv2) (a2 :: gv2))
(Permutation (merge q gv2) (a1 :: q)), (Permutation (merge q gv2) (a1 :: gv2)), (Permutation (merge q gv2) (gv4 :: q)), (Permutation (merge q gv2) (gv4 :: gv2)), (Permutation (merge q gv2) (merge q q)), (Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (heap_delete_max a2)), (Permutation (merge q gv2) (heap_delete_max a1)), (Permutation (merge q gv2) (heap_delete_max gv4))
(Permutation (merge q gv2) (join q q a2)), (Permutation (merge q gv2) (join q q a1)), (Permutation (merge q gv2) (join q q gv4)), (Permutation (merge q gv2) (join q gv2 a2)), (Permutation (merge q gv2) (join q gv2 a1)), (Permutation (merge q gv2) (join q gv2 gv4)), (Permutation (merge q gv2) (join gv2 q a2)), (Permutation (merge q gv2) (join gv2 q a1)), (Permutation (merge q gv2) (join gv2 q gv4)), (Permutation (merge q gv2) (join gv2 gv2 a2))
(Permutation (merge q gv2) (join gv2 gv2 a1)), (Permutation (merge q gv2) (join gv2 gv2 gv4)), (Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (insert n q)), (Permutation (merge q gv2) (insert n gv2)), (Permutation (merge q gv2) (carry q a2)), (Permutation (merge q gv2) (carry q a1)), (Permutation (merge q gv2) (carry q gv4)), (Permutation (merge q gv2) (carry gv2 a2))
(Permutation (merge q gv2) (carry gv2 a1)), (Permutation (merge q gv2) (carry gv2 gv4)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2)), (Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2)), (Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (a2 :: q))
(Permutation (merge gv2 q) (a2 :: gv2)), (Permutation (merge gv2 q) (a1 :: q)), (Permutation (merge gv2 q) (a1 :: gv2)), (Permutation (merge gv2 q) (gv4 :: q)), (Permutation (merge gv2 q) (gv4 :: gv2)), (Permutation (merge gv2 q) (merge q q)), (Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (heap_delete_max a2)), (Permutation (merge gv2 q) (heap_delete_max a1))
(Permutation (merge gv2 q) (heap_delete_max gv4)), (Permutation (merge gv2 q) (join q q a2)), (Permutation (merge gv2 q) (join q q a1)), (Permutation (merge gv2 q) (join q q gv4)), (Permutation (merge gv2 q) (join q gv2 a2)), (Permutation (merge gv2 q) (join q gv2 a1)), (Permutation (merge gv2 q) (join q gv2 gv4)), (Permutation (merge gv2 q) (join gv2 q a2)), (Permutation (merge gv2 q) (join gv2 q a1)), (Permutation (merge gv2 q) (join gv2 q gv4))
(Permutation (merge gv2 q) (join gv2 gv2 a2)), (Permutation (merge gv2 q) (join gv2 gv2 a1)), (Permutation (merge gv2 q) (join gv2 gv2 gv4)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (insert n q)), (Permutation (merge gv2 q) (insert n gv2)), (Permutation (merge gv2 q) (carry q a2)), (Permutation (merge gv2 q) (carry q a1)), (Permutation (merge gv2 q) (carry q gv4))
(Permutation (merge gv2 q) (carry gv2 a2)), (Permutation (merge gv2 q) (carry gv2 a1)), (Permutation (merge gv2 q) (carry gv2 gv4)), (Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q)), (Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2)
(Permutation (merge gv2 gv2) (a2 :: q)), (Permutation (merge gv2 gv2) (a2 :: gv2)), (Permutation (merge gv2 gv2) (a1 :: q)), (Permutation (merge gv2 gv2) (a1 :: gv2)), (Permutation (merge gv2 gv2) (gv4 :: q)), (Permutation (merge gv2 gv2) (gv4 :: gv2)), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q)), (Permutation (merge gv2 gv2) (heap_delete_max a2))
(Permutation (merge gv2 gv2) (heap_delete_max a1)), (Permutation (merge gv2 gv2) (heap_delete_max gv4)), (Permutation (merge gv2 gv2) (join q q a2)), (Permutation (merge gv2 gv2) (join q q a1)), (Permutation (merge gv2 gv2) (join q q gv4)), (Permutation (merge gv2 gv2) (join q gv2 a2)), (Permutation (merge gv2 gv2) (join q gv2 a1)), (Permutation (merge gv2 gv2) (join q gv2 gv4)), (Permutation (merge gv2 gv2) (join gv2 q a2)), (Permutation (merge gv2 gv2) (join gv2 q a1))
(Permutation (merge gv2 gv2) (join gv2 q gv4)), (Permutation (merge gv2 gv2) (join gv2 gv2 a2)), (Permutation (merge gv2 gv2) (join gv2 gv2 a1)), (Permutation (merge gv2 gv2) (join gv2 gv2 gv4)), (Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (insert n q)), (Permutation (merge gv2 gv2) (insert n gv2)), (Permutation (merge gv2 gv2) (carry q a2)), (Permutation (merge gv2 gv2) (carry q a1))
(Permutation (merge gv2 gv2) (carry q gv4)), (Permutation (merge gv2 gv2) (carry gv2 a2)), (Permutation (merge gv2 gv2) (carry gv2 a1)), (Permutation (merge gv2 gv2) (carry gv2 gv4)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (heap_delete_max a2) q)
(Permutation (heap_delete_max a2) gv2), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv2)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv2)), (Permutation (heap_delete_max a2) (gv4 :: q)), (Permutation (heap_delete_max a2) (gv4 :: gv2)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (merge q gv2)), (Permutation (heap_delete_max a2) (merge gv2 q))
(Permutation (heap_delete_max a2) (merge gv2 gv2)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv4)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q q gv4)), (Permutation (heap_delete_max a2) (join q gv2 a2)), (Permutation (heap_delete_max a2) (join q gv2 a1)), (Permutation (heap_delete_max a2) (join q gv2 gv4)), (Permutation (heap_delete_max a2) (join gv2 q a2))
(Permutation (heap_delete_max a2) (join gv2 q a1)), (Permutation (heap_delete_max a2) (join gv2 q gv4)), (Permutation (heap_delete_max a2) (join gv2 gv2 a2)), (Permutation (heap_delete_max a2) (join gv2 gv2 a1)), (Permutation (heap_delete_max a2) (join gv2 gv2 gv4)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv2)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv2)), (Permutation (heap_delete_max a2) (carry q a2))
(Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry q gv4)), (Permutation (heap_delete_max a2) (carry gv2 a2)), (Permutation (heap_delete_max a2) (carry gv2 a1)), (Permutation (heap_delete_max a2) (carry gv2 gv4)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv2)), (Permutation (heap_delete_max a2) (gv2 ++ q)), (Permutation (heap_delete_max a2) (gv2 ++ gv2)), (Permutation (heap_delete_max a2) [])
(Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv2), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv2)), (Permutation (heap_delete_max a1) (a1 :: q)), (Permutation (heap_delete_max a1) (a1 :: gv2)), (Permutation (heap_delete_max a1) (gv4 :: q)), (Permutation (heap_delete_max a1) (gv4 :: gv2)), (Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (merge q gv2))
(Permutation (heap_delete_max a1) (merge gv2 q)), (Permutation (heap_delete_max a1) (merge gv2 gv2)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv4)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q q gv4)), (Permutation (heap_delete_max a1) (join q gv2 a2)), (Permutation (heap_delete_max a1) (join q gv2 a1)), (Permutation (heap_delete_max a1) (join q gv2 gv4))
(Permutation (heap_delete_max a1) (join gv2 q a2)), (Permutation (heap_delete_max a1) (join gv2 q a1)), (Permutation (heap_delete_max a1) (join gv2 q gv4)), (Permutation (heap_delete_max a1) (join gv2 gv2 a2)), (Permutation (heap_delete_max a1) (join gv2 gv2 a1)), (Permutation (heap_delete_max a1) (join gv2 gv2 gv4)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv2)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert n gv2))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry q gv4)), (Permutation (heap_delete_max a1) (carry gv2 a2)), (Permutation (heap_delete_max a1) (carry gv2 a1)), (Permutation (heap_delete_max a1) (carry gv2 gv4)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv2)), (Permutation (heap_delete_max a1) (gv2 ++ q)), (Permutation (heap_delete_max a1) (gv2 ++ gv2))
(Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv4) q), (Permutation (heap_delete_max gv4) gv2), (Permutation (heap_delete_max gv4) (a2 :: q)), (Permutation (heap_delete_max gv4) (a2 :: gv2)), (Permutation (heap_delete_max gv4) (a1 :: q)), (Permutation (heap_delete_max gv4) (a1 :: gv2)), (Permutation (heap_delete_max gv4) (gv4 :: q)), (Permutation (heap_delete_max gv4) (gv4 :: gv2)), (Permutation (heap_delete_max gv4) (merge q q))
(Permutation (heap_delete_max gv4) (merge q gv2)), (Permutation (heap_delete_max gv4) (merge gv2 q)), (Permutation (heap_delete_max gv4) (merge gv2 gv2)), (Permutation (heap_delete_max gv4) (heap_delete_max a2)), (Permutation (heap_delete_max gv4) (heap_delete_max a1)), (Permutation (heap_delete_max gv4) (join q q a2)), (Permutation (heap_delete_max gv4) (join q q a1)), (Permutation (heap_delete_max gv4) (join q q gv4)), (Permutation (heap_delete_max gv4) (join q gv2 a2)), (Permutation (heap_delete_max gv4) (join q gv2 a1))
(Permutation (heap_delete_max gv4) (join q gv2 gv4)), (Permutation (heap_delete_max gv4) (join gv2 q a2)), (Permutation (heap_delete_max gv4) (join gv2 q a1)), (Permutation (heap_delete_max gv4) (join gv2 q gv4)), (Permutation (heap_delete_max gv4) (join gv2 gv2 a2)), (Permutation (heap_delete_max gv4) (join gv2 gv2 a1)), (Permutation (heap_delete_max gv4) (join gv2 gv2 gv4)), (Permutation (heap_delete_max gv4) (insert x q)), (Permutation (heap_delete_max gv4) (insert x gv2)), (Permutation (heap_delete_max gv4) (insert n q))
(Permutation (heap_delete_max gv4) (insert n gv2)), (Permutation (heap_delete_max gv4) (carry q a2)), (Permutation (heap_delete_max gv4) (carry q a1)), (Permutation (heap_delete_max gv4) (carry q gv4)), (Permutation (heap_delete_max gv4) (carry gv2 a2)), (Permutation (heap_delete_max gv4) (carry gv2 a1)), (Permutation (heap_delete_max gv4) (carry gv2 gv4)), (Permutation (heap_delete_max gv4) (q ++ q)), (Permutation (heap_delete_max gv4) (q ++ gv2)), (Permutation (heap_delete_max gv4) (gv2 ++ q))
(Permutation (heap_delete_max gv4) (gv2 ++ gv2)), (Permutation (heap_delete_max gv4) []), (Permutation (join q q a2) q), (Permutation (join q q a2) gv2), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a2 :: gv2)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (a1 :: gv2)), (Permutation (join q q a2) (gv4 :: q)), (Permutation (join q q a2) (gv4 :: gv2))
(Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv2)), (Permutation (join q q a2) (merge gv2 q)), (Permutation (join q q a2) (merge gv2 gv2)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (heap_delete_max gv4)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q q gv4)), (Permutation (join q q a2) (join q gv2 a2))
(Permutation (join q q a2) (join q gv2 a1)), (Permutation (join q q a2) (join q gv2 gv4)), (Permutation (join q q a2) (join gv2 q a2)), (Permutation (join q q a2) (join gv2 q a1)), (Permutation (join q q a2) (join gv2 q gv4)), (Permutation (join q q a2) (join gv2 gv2 a2)), (Permutation (join q q a2) (join gv2 gv2 a1)), (Permutation (join q q a2) (join gv2 gv2 gv4)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert x gv2))
(Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv2)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry q gv4)), (Permutation (join q q a2) (carry gv2 a2)), (Permutation (join q q a2) (carry gv2 a1)), (Permutation (join q q a2) (carry gv2 gv4)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) (q ++ gv2))
(Permutation (join q q a2) (gv2 ++ q)), (Permutation (join q q a2) (gv2 ++ gv2)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) gv2), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv2)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv2)), (Permutation (join q q a1) (gv4 :: q))
(Permutation (join q q a1) (gv4 :: gv2)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (merge q gv2)), (Permutation (join q q a1) (merge gv2 q)), (Permutation (join q q a1) (merge gv2 gv2)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (heap_delete_max gv4)), (Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q q gv4))
(Permutation (join q q a1) (join q gv2 a2)), (Permutation (join q q a1) (join q gv2 a1)), (Permutation (join q q a1) (join q gv2 gv4)), (Permutation (join q q a1) (join gv2 q a2)), (Permutation (join q q a1) (join gv2 q a1)), (Permutation (join q q a1) (join gv2 q gv4)), (Permutation (join q q a1) (join gv2 gv2 a2)), (Permutation (join q q a1) (join gv2 gv2 a1)), (Permutation (join q q a1) (join gv2 gv2 gv4)), (Permutation (join q q a1) (insert x q))
(Permutation (join q q a1) (insert x gv2)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert n gv2)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry q gv4)), (Permutation (join q q a1) (carry gv2 a2)), (Permutation (join q q a1) (carry gv2 a1)), (Permutation (join q q a1) (carry gv2 gv4)), (Permutation (join q q a1) (q ++ q))
(Permutation (join q q a1) (q ++ gv2)), (Permutation (join q q a1) (gv2 ++ q)), (Permutation (join q q a1) (gv2 ++ gv2)), (Permutation (join q q a1) []), (Permutation (join q q gv4) q), (Permutation (join q q gv4) gv2), (Permutation (join q q gv4) (a2 :: q)), (Permutation (join q q gv4) (a2 :: gv2)), (Permutation (join q q gv4) (a1 :: q)), (Permutation (join q q gv4) (a1 :: gv2))
(Permutation (join q q gv4) (gv4 :: q)), (Permutation (join q q gv4) (gv4 :: gv2)), (Permutation (join q q gv4) (merge q q)), (Permutation (join q q gv4) (merge q gv2)), (Permutation (join q q gv4) (merge gv2 q)), (Permutation (join q q gv4) (merge gv2 gv2)), (Permutation (join q q gv4) (heap_delete_max a2)), (Permutation (join q q gv4) (heap_delete_max a1)), (Permutation (join q q gv4) (heap_delete_max gv4)), (Permutation (join q q gv4) (join q q a2))
(Permutation (join q q gv4) (join q q a1)), (Permutation (join q q gv4) (join q gv2 a2)), (Permutation (join q q gv4) (join q gv2 a1)), (Permutation (join q q gv4) (join q gv2 gv4)), (Permutation (join q q gv4) (join gv2 q a2)), (Permutation (join q q gv4) (join gv2 q a1)), (Permutation (join q q gv4) (join gv2 q gv4)), (Permutation (join q q gv4) (join gv2 gv2 a2)), (Permutation (join q q gv4) (join gv2 gv2 a1)), (Permutation (join q q gv4) (join gv2 gv2 gv4))
(Permutation (join q q gv4) (insert x q)), (Permutation (join q q gv4) (insert x gv2)), (Permutation (join q q gv4) (insert n q)), (Permutation (join q q gv4) (insert n gv2)), (Permutation (join q q gv4) (carry q a2)), (Permutation (join q q gv4) (carry q a1)), (Permutation (join q q gv4) (carry q gv4)), (Permutation (join q q gv4) (carry gv2 a2)), (Permutation (join q q gv4) (carry gv2 a1)), (Permutation (join q q gv4) (carry gv2 gv4))
(Permutation (join q q gv4) (q ++ q)), (Permutation (join q q gv4) (q ++ gv2)), (Permutation (join q q gv4) (gv2 ++ q)), (Permutation (join q q gv4) (gv2 ++ gv2)), (Permutation (join q q gv4) []), (Permutation (join q gv2 a2) q), (Permutation (join q gv2 a2) gv2), (Permutation (join q gv2 a2) (a2 :: q)), (Permutation (join q gv2 a2) (a2 :: gv2)), (Permutation (join q gv2 a2) (a1 :: q))
(Permutation (join q gv2 a2) (a1 :: gv2)), (Permutation (join q gv2 a2) (gv4 :: q)), (Permutation (join q gv2 a2) (gv4 :: gv2)), (Permutation (join q gv2 a2) (merge q q)), (Permutation (join q gv2 a2) (merge q gv2)), (Permutation (join q gv2 a2) (merge gv2 q)), (Permutation (join q gv2 a2) (merge gv2 gv2)), (Permutation (join q gv2 a2) (heap_delete_max a2)), (Permutation (join q gv2 a2) (heap_delete_max a1)), (Permutation (join q gv2 a2) (heap_delete_max gv4))
(Permutation (join q gv2 a2) (join q q a2)), (Permutation (join q gv2 a2) (join q q a1)), (Permutation (join q gv2 a2) (join q q gv4)), (Permutation (join q gv2 a2) (join q gv2 a1)), (Permutation (join q gv2 a2) (join q gv2 gv4)), (Permutation (join q gv2 a2) (join gv2 q a2)), (Permutation (join q gv2 a2) (join gv2 q a1)), (Permutation (join q gv2 a2) (join gv2 q gv4)), (Permutation (join q gv2 a2) (join gv2 gv2 a2)), (Permutation (join q gv2 a2) (join gv2 gv2 a1))
(Permutation (join q gv2 a2) (join gv2 gv2 gv4)), (Permutation (join q gv2 a2) (insert x q)), (Permutation (join q gv2 a2) (insert x gv2)), (Permutation (join q gv2 a2) (insert n q)), (Permutation (join q gv2 a2) (insert n gv2)), (Permutation (join q gv2 a2) (carry q a2)), (Permutation (join q gv2 a2) (carry q a1)), (Permutation (join q gv2 a2) (carry q gv4)), (Permutation (join q gv2 a2) (carry gv2 a2)), (Permutation (join q gv2 a2) (carry gv2 a1))
(Permutation (join q gv2 a2) (carry gv2 gv4)), (Permutation (join q gv2 a2) (q ++ q)), (Permutation (join q gv2 a2) (q ++ gv2)), (Permutation (join q gv2 a2) (gv2 ++ q)), (Permutation (join q gv2 a2) (gv2 ++ gv2)), (Permutation (join q gv2 a2) []), (Permutation (join q gv2 a1) q), (Permutation (join q gv2 a1) gv2), (Permutation (join q gv2 a1) (a2 :: q)), (Permutation (join q gv2 a1) (a2 :: gv2))
(Permutation (join q gv2 a1) (a1 :: q)), (Permutation (join q gv2 a1) (a1 :: gv2)), (Permutation (join q gv2 a1) (gv4 :: q)), (Permutation (join q gv2 a1) (gv4 :: gv2)), (Permutation (join q gv2 a1) (merge q q)), (Permutation (join q gv2 a1) (merge q gv2)), (Permutation (join q gv2 a1) (merge gv2 q)), (Permutation (join q gv2 a1) (merge gv2 gv2)), (Permutation (join q gv2 a1) (heap_delete_max a2)), (Permutation (join q gv2 a1) (heap_delete_max a1))
(Permutation (join q gv2 a1) (heap_delete_max gv4)), (Permutation (join q gv2 a1) (join q q a2)), (Permutation (join q gv2 a1) (join q q a1)), (Permutation (join q gv2 a1) (join q q gv4)), (Permutation (join q gv2 a1) (join q gv2 a2)), (Permutation (join q gv2 a1) (join q gv2 gv4)), (Permutation (join q gv2 a1) (join gv2 q a2)), (Permutation (join q gv2 a1) (join gv2 q a1)), (Permutation (join q gv2 a1) (join gv2 q gv4)), (Permutation (join q gv2 a1) (join gv2 gv2 a2))
(Permutation (join q gv2 a1) (join gv2 gv2 a1)), (Permutation (join q gv2 a1) (join gv2 gv2 gv4)), (Permutation (join q gv2 a1) (insert x q)), (Permutation (join q gv2 a1) (insert x gv2)), (Permutation (join q gv2 a1) (insert n q)), (Permutation (join q gv2 a1) (insert n gv2)), (Permutation (join q gv2 a1) (carry q a2)), (Permutation (join q gv2 a1) (carry q a1)), (Permutation (join q gv2 a1) (carry q gv4)), (Permutation (join q gv2 a1) (carry gv2 a2))
(Permutation (join q gv2 a1) (carry gv2 a1)), (Permutation (join q gv2 a1) (carry gv2 gv4)), (Permutation (join q gv2 a1) (q ++ q)), (Permutation (join q gv2 a1) (q ++ gv2)), (Permutation (join q gv2 a1) (gv2 ++ q)), (Permutation (join q gv2 a1) (gv2 ++ gv2)), (Permutation (join q gv2 a1) []), (Permutation (join q gv2 gv4) q), (Permutation (join q gv2 gv4) gv2), (Permutation (join q gv2 gv4) (a2 :: q))
(Permutation (join q gv2 gv4) (a2 :: gv2)), (Permutation (join q gv2 gv4) (a1 :: q)), (Permutation (join q gv2 gv4) (a1 :: gv2)), (Permutation (join q gv2 gv4) (gv4 :: q)), (Permutation (join q gv2 gv4) (gv4 :: gv2)), (Permutation (join q gv2 gv4) (merge q q)), (Permutation (join q gv2 gv4) (merge q gv2)), (Permutation (join q gv2 gv4) (merge gv2 q)), (Permutation (join q gv2 gv4) (merge gv2 gv2)), (Permutation (join q gv2 gv4) (heap_delete_max a2))
(Permutation (join q gv2 gv4) (heap_delete_max a1)), (Permutation (join q gv2 gv4) (heap_delete_max gv4)), (Permutation (join q gv2 gv4) (join q q a2)), (Permutation (join q gv2 gv4) (join q q a1)), (Permutation (join q gv2 gv4) (join q q gv4)), (Permutation (join q gv2 gv4) (join q gv2 a2)), (Permutation (join q gv2 gv4) (join q gv2 a1)), (Permutation (join q gv2 gv4) (join gv2 q a2)), (Permutation (join q gv2 gv4) (join gv2 q a1)), (Permutation (join q gv2 gv4) (join gv2 q gv4))
(Permutation (join q gv2 gv4) (join gv2 gv2 a2)), (Permutation (join q gv2 gv4) (join gv2 gv2 a1)), (Permutation (join q gv2 gv4) (join gv2 gv2 gv4)), (Permutation (join q gv2 gv4) (insert x q)), (Permutation (join q gv2 gv4) (insert x gv2)), (Permutation (join q gv2 gv4) (insert n q)), (Permutation (join q gv2 gv4) (insert n gv2)), (Permutation (join q gv2 gv4) (carry q a2)), (Permutation (join q gv2 gv4) (carry q a1)), (Permutation (join q gv2 gv4) (carry q gv4))
(Permutation (join q gv2 gv4) (carry gv2 a2)), (Permutation (join q gv2 gv4) (carry gv2 a1)), (Permutation (join q gv2 gv4) (carry gv2 gv4)), (Permutation (join q gv2 gv4) (q ++ q)), (Permutation (join q gv2 gv4) (q ++ gv2)), (Permutation (join q gv2 gv4) (gv2 ++ q)), (Permutation (join q gv2 gv4) (gv2 ++ gv2)), (Permutation (join q gv2 gv4) []), (Permutation (join gv2 q a2) q), (Permutation (join gv2 q a2) gv2)
(Permutation (join gv2 q a2) (a2 :: q)), (Permutation (join gv2 q a2) (a2 :: gv2)), (Permutation (join gv2 q a2) (a1 :: q)), (Permutation (join gv2 q a2) (a1 :: gv2)), (Permutation (join gv2 q a2) (gv4 :: q)), (Permutation (join gv2 q a2) (gv4 :: gv2)), (Permutation (join gv2 q a2) (merge q q)), (Permutation (join gv2 q a2) (merge q gv2)), (Permutation (join gv2 q a2) (merge gv2 q)), (Permutation (join gv2 q a2) (merge gv2 gv2))
(Permutation (join gv2 q a2) (heap_delete_max a2)), (Permutation (join gv2 q a2) (heap_delete_max a1)), (Permutation (join gv2 q a2) (heap_delete_max gv4)), (Permutation (join gv2 q a2) (join q q a2)), (Permutation (join gv2 q a2) (join q q a1)), (Permutation (join gv2 q a2) (join q q gv4)), (Permutation (join gv2 q a2) (join q gv2 a2)), (Permutation (join gv2 q a2) (join q gv2 a1)), (Permutation (join gv2 q a2) (join q gv2 gv4)), (Permutation (join gv2 q a2) (join gv2 q a1))
(Permutation (join gv2 q a2) (join gv2 q gv4)), (Permutation (join gv2 q a2) (join gv2 gv2 a2)), (Permutation (join gv2 q a2) (join gv2 gv2 a1)), (Permutation (join gv2 q a2) (join gv2 gv2 gv4)), (Permutation (join gv2 q a2) (insert x q)), (Permutation (join gv2 q a2) (insert x gv2)), (Permutation (join gv2 q a2) (insert n q)), (Permutation (join gv2 q a2) (insert n gv2)), (Permutation (join gv2 q a2) (carry q a2)), (Permutation (join gv2 q a2) (carry q a1))
(Permutation (join gv2 q a2) (carry q gv4)), (Permutation (join gv2 q a2) (carry gv2 a2)), (Permutation (join gv2 q a2) (carry gv2 a1)), (Permutation (join gv2 q a2) (carry gv2 gv4)), (Permutation (join gv2 q a2) (q ++ q)), (Permutation (join gv2 q a2) (q ++ gv2)), (Permutation (join gv2 q a2) (gv2 ++ q)), (Permutation (join gv2 q a2) (gv2 ++ gv2)), (Permutation (join gv2 q a2) []), (Permutation (join gv2 q a1) q)
(Permutation (join gv2 q a1) gv2), (Permutation (join gv2 q a1) (a2 :: q)), (Permutation (join gv2 q a1) (a2 :: gv2)), (Permutation (join gv2 q a1) (a1 :: q)), (Permutation (join gv2 q a1) (a1 :: gv2)), (Permutation (join gv2 q a1) (gv4 :: q)), (Permutation (join gv2 q a1) (gv4 :: gv2)), (Permutation (join gv2 q a1) (merge q q)), (Permutation (join gv2 q a1) (merge q gv2)), (Permutation (join gv2 q a1) (merge gv2 q))
(Permutation (join gv2 q a1) (merge gv2 gv2)), (Permutation (join gv2 q a1) (heap_delete_max a2)), (Permutation (join gv2 q a1) (heap_delete_max a1)), (Permutation (join gv2 q a1) (heap_delete_max gv4)), (Permutation (join gv2 q a1) (join q q a2)), (Permutation (join gv2 q a1) (join q q a1)), (Permutation (join gv2 q a1) (join q q gv4)), (Permutation (join gv2 q a1) (join q gv2 a2)), (Permutation (join gv2 q a1) (join q gv2 a1)), (Permutation (join gv2 q a1) (join q gv2 gv4))
(Permutation (join gv2 q a1) (join gv2 q a2)), (Permutation (join gv2 q a1) (join gv2 q gv4)), (Permutation (join gv2 q a1) (join gv2 gv2 a2)), (Permutation (join gv2 q a1) (join gv2 gv2 a1)), (Permutation (join gv2 q a1) (join gv2 gv2 gv4)), (Permutation (join gv2 q a1) (insert x q)), (Permutation (join gv2 q a1) (insert x gv2)), (Permutation (join gv2 q a1) (insert n q)), (Permutation (join gv2 q a1) (insert n gv2)), (Permutation (join gv2 q a1) (carry q a2))
(Permutation (join gv2 q a1) (carry q a1)), (Permutation (join gv2 q a1) (carry q gv4)), (Permutation (join gv2 q a1) (carry gv2 a2)), (Permutation (join gv2 q a1) (carry gv2 a1)), (Permutation (join gv2 q a1) (carry gv2 gv4)), (Permutation (join gv2 q a1) (q ++ q)), (Permutation (join gv2 q a1) (q ++ gv2)), (Permutation (join gv2 q a1) (gv2 ++ q)), (Permutation (join gv2 q a1) (gv2 ++ gv2)), (Permutation (join gv2 q a1) [])
(Permutation (join gv2 q gv4) q), (Permutation (join gv2 q gv4) gv2), (Permutation (join gv2 q gv4) (a2 :: q)), (Permutation (join gv2 q gv4) (a2 :: gv2)), (Permutation (join gv2 q gv4) (a1 :: q)), (Permutation (join gv2 q gv4) (a1 :: gv2)), (Permutation (join gv2 q gv4) (gv4 :: q)), (Permutation (join gv2 q gv4) (gv4 :: gv2)), (Permutation (join gv2 q gv4) (merge q q)), (Permutation (join gv2 q gv4) (merge q gv2))
(Permutation (join gv2 q gv4) (merge gv2 q)), (Permutation (join gv2 q gv4) (merge gv2 gv2)), (Permutation (join gv2 q gv4) (heap_delete_max a2)), (Permutation (join gv2 q gv4) (heap_delete_max a1)), (Permutation (join gv2 q gv4) (heap_delete_max gv4)), (Permutation (join gv2 q gv4) (join q q a2)), (Permutation (join gv2 q gv4) (join q q a1)), (Permutation (join gv2 q gv4) (join q q gv4)), (Permutation (join gv2 q gv4) (join q gv2 a2)), (Permutation (join gv2 q gv4) (join q gv2 a1))
(Permutation (join gv2 q gv4) (join q gv2 gv4)), (Permutation (join gv2 q gv4) (join gv2 q a2)), (Permutation (join gv2 q gv4) (join gv2 q a1)), (Permutation (join gv2 q gv4) (join gv2 gv2 a2)), (Permutation (join gv2 q gv4) (join gv2 gv2 a1)), (Permutation (join gv2 q gv4) (join gv2 gv2 gv4)), (Permutation (join gv2 q gv4) (insert x q)), (Permutation (join gv2 q gv4) (insert x gv2)), (Permutation (join gv2 q gv4) (insert n q)), (Permutation (join gv2 q gv4) (insert n gv2))
(Permutation (join gv2 q gv4) (carry q a2)), (Permutation (join gv2 q gv4) (carry q a1)), (Permutation (join gv2 q gv4) (carry q gv4)), (Permutation (join gv2 q gv4) (carry gv2 a2)), (Permutation (join gv2 q gv4) (carry gv2 a1)), (Permutation (join gv2 q gv4) (carry gv2 gv4)), (Permutation (join gv2 q gv4) (q ++ q)), (Permutation (join gv2 q gv4) (q ++ gv2)), (Permutation (join gv2 q gv4) (gv2 ++ q)), (Permutation (join gv2 q gv4) (gv2 ++ gv2))
(Permutation (join gv2 q gv4) []), (Permutation (join gv2 gv2 a2) q), (Permutation (join gv2 gv2 a2) gv2), (Permutation (join gv2 gv2 a2) (a2 :: q)), (Permutation (join gv2 gv2 a2) (a2 :: gv2)), (Permutation (join gv2 gv2 a2) (a1 :: q)), (Permutation (join gv2 gv2 a2) (a1 :: gv2)), (Permutation (join gv2 gv2 a2) (gv4 :: q)), (Permutation (join gv2 gv2 a2) (gv4 :: gv2)), (Permutation (join gv2 gv2 a2) (merge q q))
(Permutation (join gv2 gv2 a2) (merge q gv2)), (Permutation (join gv2 gv2 a2) (merge gv2 q)), (Permutation (join gv2 gv2 a2) (merge gv2 gv2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a1)), (Permutation (join gv2 gv2 a2) (heap_delete_max gv4)), (Permutation (join gv2 gv2 a2) (join q q a2)), (Permutation (join gv2 gv2 a2) (join q q a1)), (Permutation (join gv2 gv2 a2) (join q q gv4)), (Permutation (join gv2 gv2 a2) (join q gv2 a2))
(Permutation (join gv2 gv2 a2) (join q gv2 a1)), (Permutation (join gv2 gv2 a2) (join q gv2 gv4)), (Permutation (join gv2 gv2 a2) (join gv2 q a2)), (Permutation (join gv2 gv2 a2) (join gv2 q a1)), (Permutation (join gv2 gv2 a2) (join gv2 q gv4)), (Permutation (join gv2 gv2 a2) (join gv2 gv2 a1)), (Permutation (join gv2 gv2 a2) (join gv2 gv2 gv4)), (Permutation (join gv2 gv2 a2) (insert x q)), (Permutation (join gv2 gv2 a2) (insert x gv2)), (Permutation (join gv2 gv2 a2) (insert n q))
(Permutation (join gv2 gv2 a2) (insert n gv2)), (Permutation (join gv2 gv2 a2) (carry q a2)), (Permutation (join gv2 gv2 a2) (carry q a1)), (Permutation (join gv2 gv2 a2) (carry q gv4)), (Permutation (join gv2 gv2 a2) (carry gv2 a2)), (Permutation (join gv2 gv2 a2) (carry gv2 a1)), (Permutation (join gv2 gv2 a2) (carry gv2 gv4)), (Permutation (join gv2 gv2 a2) (q ++ q)), (Permutation (join gv2 gv2 a2) (q ++ gv2)), (Permutation (join gv2 gv2 a2) (gv2 ++ q))
(Permutation (join gv2 gv2 a2) (gv2 ++ gv2)), (Permutation (join gv2 gv2 a2) []), (Permutation (join gv2 gv2 a1) q), (Permutation (join gv2 gv2 a1) gv2), (Permutation (join gv2 gv2 a1) (a2 :: q)), (Permutation (join gv2 gv2 a1) (a2 :: gv2)), (Permutation (join gv2 gv2 a1) (a1 :: q)), (Permutation (join gv2 gv2 a1) (a1 :: gv2)), (Permutation (join gv2 gv2 a1) (gv4 :: q)), (Permutation (join gv2 gv2 a1) (gv4 :: gv2))
(Permutation (join gv2 gv2 a1) (merge q q)), (Permutation (join gv2 gv2 a1) (merge q gv2)), (Permutation (join gv2 gv2 a1) (merge gv2 q)), (Permutation (join gv2 gv2 a1) (merge gv2 gv2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a1)), (Permutation (join gv2 gv2 a1) (heap_delete_max gv4)), (Permutation (join gv2 gv2 a1) (join q q a2)), (Permutation (join gv2 gv2 a1) (join q q a1)), (Permutation (join gv2 gv2 a1) (join q q gv4))
(Permutation (join gv2 gv2 a1) (join q gv2 a2)), (Permutation (join gv2 gv2 a1) (join q gv2 a1)), (Permutation (join gv2 gv2 a1) (join q gv2 gv4)), (Permutation (join gv2 gv2 a1) (join gv2 q a2)), (Permutation (join gv2 gv2 a1) (join gv2 q a1)), (Permutation (join gv2 gv2 a1) (join gv2 q gv4)), (Permutation (join gv2 gv2 a1) (join gv2 gv2 a2)), (Permutation (join gv2 gv2 a1) (join gv2 gv2 gv4)), (Permutation (join gv2 gv2 a1) (insert x q)), (Permutation (join gv2 gv2 a1) (insert x gv2))
(Permutation (join gv2 gv2 a1) (insert n q)), (Permutation (join gv2 gv2 a1) (insert n gv2)), (Permutation (join gv2 gv2 a1) (carry q a2)), (Permutation (join gv2 gv2 a1) (carry q a1)), (Permutation (join gv2 gv2 a1) (carry q gv4)), (Permutation (join gv2 gv2 a1) (carry gv2 a2)), (Permutation (join gv2 gv2 a1) (carry gv2 a1)), (Permutation (join gv2 gv2 a1) (carry gv2 gv4)), (Permutation (join gv2 gv2 a1) (q ++ q)), (Permutation (join gv2 gv2 a1) (q ++ gv2))
(Permutation (join gv2 gv2 a1) (gv2 ++ q)), (Permutation (join gv2 gv2 a1) (gv2 ++ gv2)), (Permutation (join gv2 gv2 a1) []), (Permutation (join gv2 gv2 gv4) q), (Permutation (join gv2 gv2 gv4) gv2), (Permutation (join gv2 gv2 gv4) (a2 :: q)), (Permutation (join gv2 gv2 gv4) (a2 :: gv2)), (Permutation (join gv2 gv2 gv4) (a1 :: q)), (Permutation (join gv2 gv2 gv4) (a1 :: gv2)), (Permutation (join gv2 gv2 gv4) (gv4 :: q))
(Permutation (join gv2 gv2 gv4) (gv4 :: gv2)), (Permutation (join gv2 gv2 gv4) (merge q q)), (Permutation (join gv2 gv2 gv4) (merge q gv2)), (Permutation (join gv2 gv2 gv4) (merge gv2 q)), (Permutation (join gv2 gv2 gv4) (merge gv2 gv2)), (Permutation (join gv2 gv2 gv4) (heap_delete_max a2)), (Permutation (join gv2 gv2 gv4) (heap_delete_max a1)), (Permutation (join gv2 gv2 gv4) (heap_delete_max gv4)), (Permutation (join gv2 gv2 gv4) (join q q a2)), (Permutation (join gv2 gv2 gv4) (join q q a1))
(Permutation (join gv2 gv2 gv4) (join q q gv4)), (Permutation (join gv2 gv2 gv4) (join q gv2 a2)), (Permutation (join gv2 gv2 gv4) (join q gv2 a1)), (Permutation (join gv2 gv2 gv4) (join q gv2 gv4)), (Permutation (join gv2 gv2 gv4) (join gv2 q a2)), (Permutation (join gv2 gv2 gv4) (join gv2 q a1)), (Permutation (join gv2 gv2 gv4) (join gv2 q gv4)), (Permutation (join gv2 gv2 gv4) (join gv2 gv2 a2)), (Permutation (join gv2 gv2 gv4) (join gv2 gv2 a1)), (Permutation (join gv2 gv2 gv4) (insert x q))
(Permutation (join gv2 gv2 gv4) (insert x gv2)), (Permutation (join gv2 gv2 gv4) (insert n q)), (Permutation (join gv2 gv2 gv4) (insert n gv2)), (Permutation (join gv2 gv2 gv4) (carry q a2)), (Permutation (join gv2 gv2 gv4) (carry q a1)), (Permutation (join gv2 gv2 gv4) (carry q gv4)), (Permutation (join gv2 gv2 gv4) (carry gv2 a2)), (Permutation (join gv2 gv2 gv4) (carry gv2 a1)), (Permutation (join gv2 gv2 gv4) (carry gv2 gv4)), (Permutation (join gv2 gv2 gv4) (q ++ q))
(Permutation (join gv2 gv2 gv4) (q ++ gv2)), (Permutation (join gv2 gv2 gv4) (gv2 ++ q)), (Permutation (join gv2 gv2 gv4) (gv2 ++ gv2)), (Permutation (join gv2 gv2 gv4) []), (Permutation (insert x q) q), (Permutation (insert x q) gv2), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv2)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv2))
(Permutation (insert x q) (gv4 :: q)), (Permutation (insert x q) (gv4 :: gv2)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (heap_delete_max gv4)), (Permutation (insert x q) (join q q a2))
(Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q q gv4)), (Permutation (insert x q) (join q gv2 a2)), (Permutation (insert x q) (join q gv2 a1)), (Permutation (insert x q) (join q gv2 gv4)), (Permutation (insert x q) (join gv2 q a2)), (Permutation (insert x q) (join gv2 q a1)), (Permutation (insert x q) (join gv2 q gv4)), (Permutation (insert x q) (join gv2 gv2 a2)), (Permutation (insert x q) (join gv2 gv2 a1))
(Permutation (insert x q) (join gv2 gv2 gv4)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (insert n gv2)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry q gv4)), (Permutation (insert x q) (carry gv2 a2)), (Permutation (insert x q) (carry gv2 a1)), (Permutation (insert x q) (carry gv2 gv4))
(Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2)), (Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q), (Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (a2 :: q)), (Permutation (insert x gv2) (a2 :: gv2)), (Permutation (insert x gv2) (a1 :: q))
(Permutation (insert x gv2) (a1 :: gv2)), (Permutation (insert x gv2) (gv4 :: q)), (Permutation (insert x gv2) (gv4 :: gv2)), (Permutation (insert x gv2) (merge q q)), (Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (heap_delete_max a2)), (Permutation (insert x gv2) (heap_delete_max a1)), (Permutation (insert x gv2) (heap_delete_max gv4))
(Permutation (insert x gv2) (join q q a2)), (Permutation (insert x gv2) (join q q a1)), (Permutation (insert x gv2) (join q q gv4)), (Permutation (insert x gv2) (join q gv2 a2)), (Permutation (insert x gv2) (join q gv2 a1)), (Permutation (insert x gv2) (join q gv2 gv4)), (Permutation (insert x gv2) (join gv2 q a2)), (Permutation (insert x gv2) (join gv2 q a1)), (Permutation (insert x gv2) (join gv2 q gv4)), (Permutation (insert x gv2) (join gv2 gv2 a2))
(Permutation (insert x gv2) (join gv2 gv2 a1)), (Permutation (insert x gv2) (join gv2 gv2 gv4)), (Permutation (insert x gv2) (insert x q)), (Permutation (insert x gv2) (insert n q)), (Permutation (insert x gv2) (insert n gv2)), (Permutation (insert x gv2) (carry q a2)), (Permutation (insert x gv2) (carry q a1)), (Permutation (insert x gv2) (carry q gv4)), (Permutation (insert x gv2) (carry gv2 a2)), (Permutation (insert x gv2) (carry gv2 a1))
(Permutation (insert x gv2) (carry gv2 gv4)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) []), (Permutation (insert n q) q), (Permutation (insert n q) gv2), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a2 :: gv2))
(Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv2)), (Permutation (insert n q) (gv4 :: q)), (Permutation (insert n q) (gv4 :: gv2)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv2)), (Permutation (insert n q) (merge gv2 q)), (Permutation (insert n q) (merge gv2 gv2)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1))
(Permutation (insert n q) (heap_delete_max gv4)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q q gv4)), (Permutation (insert n q) (join q gv2 a2)), (Permutation (insert n q) (join q gv2 a1)), (Permutation (insert n q) (join q gv2 gv4)), (Permutation (insert n q) (join gv2 q a2)), (Permutation (insert n q) (join gv2 q a1)), (Permutation (insert n q) (join gv2 q gv4))
(Permutation (insert n q) (join gv2 gv2 a2)), (Permutation (insert n q) (join gv2 gv2 a1)), (Permutation (insert n q) (join gv2 gv2 gv4)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (insert x gv2)), (Permutation (insert n q) (insert n gv2)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry q gv4)), (Permutation (insert n q) (carry gv2 a2))
(Permutation (insert n q) (carry gv2 a1)), (Permutation (insert n q) (carry gv2 gv4)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv2)), (Permutation (insert n q) (gv2 ++ q)), (Permutation (insert n q) (gv2 ++ gv2)), (Permutation (insert n q) []), (Permutation (insert n gv2) q), (Permutation (insert n gv2) gv2), (Permutation (insert n gv2) (a2 :: q))
(Permutation (insert n gv2) (a2 :: gv2)), (Permutation (insert n gv2) (a1 :: q)), (Permutation (insert n gv2) (a1 :: gv2)), (Permutation (insert n gv2) (gv4 :: q)), (Permutation (insert n gv2) (gv4 :: gv2)), (Permutation (insert n gv2) (merge q q)), (Permutation (insert n gv2) (merge q gv2)), (Permutation (insert n gv2) (merge gv2 q)), (Permutation (insert n gv2) (merge gv2 gv2)), (Permutation (insert n gv2) (heap_delete_max a2))
(Permutation (insert n gv2) (heap_delete_max a1)), (Permutation (insert n gv2) (heap_delete_max gv4)), (Permutation (insert n gv2) (join q q a2)), (Permutation (insert n gv2) (join q q a1)), (Permutation (insert n gv2) (join q q gv4)), (Permutation (insert n gv2) (join q gv2 a2)), (Permutation (insert n gv2) (join q gv2 a1)), (Permutation (insert n gv2) (join q gv2 gv4)), (Permutation (insert n gv2) (join gv2 q a2)), (Permutation (insert n gv2) (join gv2 q a1))
(Permutation (insert n gv2) (join gv2 q gv4)), (Permutation (insert n gv2) (join gv2 gv2 a2)), (Permutation (insert n gv2) (join gv2 gv2 a1)), (Permutation (insert n gv2) (join gv2 gv2 gv4)), (Permutation (insert n gv2) (insert x q)), (Permutation (insert n gv2) (insert x gv2)), (Permutation (insert n gv2) (insert n q)), (Permutation (insert n gv2) (carry q a2)), (Permutation (insert n gv2) (carry q a1)), (Permutation (insert n gv2) (carry q gv4))
(Permutation (insert n gv2) (carry gv2 a2)), (Permutation (insert n gv2) (carry gv2 a1)), (Permutation (insert n gv2) (carry gv2 gv4)), (Permutation (insert n gv2) (q ++ q)), (Permutation (insert n gv2) (q ++ gv2)), (Permutation (insert n gv2) (gv2 ++ q)), (Permutation (insert n gv2) (gv2 ++ gv2)), (Permutation (insert n gv2) []), (Permutation (carry q a2) q), (Permutation (carry q a2) gv2)
(Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv2)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (a1 :: gv2)), (Permutation (carry q a2) (gv4 :: q)), (Permutation (carry q a2) (gv4 :: gv2)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv2)), (Permutation (carry q a2) (merge gv2 q)), (Permutation (carry q a2) (merge gv2 gv2))
(Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (heap_delete_max gv4)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q q gv4)), (Permutation (carry q a2) (join q gv2 a2)), (Permutation (carry q a2) (join q gv2 a1)), (Permutation (carry q a2) (join q gv2 gv4)), (Permutation (carry q a2) (join gv2 q a2))
(Permutation (carry q a2) (join gv2 q a1)), (Permutation (carry q a2) (join gv2 q gv4)), (Permutation (carry q a2) (join gv2 gv2 a2)), (Permutation (carry q a2) (join gv2 gv2 a1)), (Permutation (carry q a2) (join gv2 gv2 gv4)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv2)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv2)), (Permutation (carry q a2) (carry q a1))
(Permutation (carry q a2) (carry q gv4)), (Permutation (carry q a2) (carry gv2 a2)), (Permutation (carry q a2) (carry gv2 a1)), (Permutation (carry q a2) (carry gv2 gv4)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv2)), (Permutation (carry q a2) (gv2 ++ q)), (Permutation (carry q a2) (gv2 ++ gv2)), (Permutation (carry q a2) []), (Permutation (carry q a1) q)
(Permutation (carry q a1) gv2), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv2)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv2)), (Permutation (carry q a1) (gv4 :: q)), (Permutation (carry q a1) (gv4 :: gv2)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (merge q gv2)), (Permutation (carry q a1) (merge gv2 q))
(Permutation (carry q a1) (merge gv2 gv2)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (heap_delete_max gv4)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q q gv4)), (Permutation (carry q a1) (join q gv2 a2)), (Permutation (carry q a1) (join q gv2 a1)), (Permutation (carry q a1) (join q gv2 gv4))
(Permutation (carry q a1) (join gv2 q a2)), (Permutation (carry q a1) (join gv2 q a1)), (Permutation (carry q a1) (join gv2 q gv4)), (Permutation (carry q a1) (join gv2 gv2 a2)), (Permutation (carry q a1) (join gv2 gv2 a1)), (Permutation (carry q a1) (join gv2 gv2 gv4)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert x gv2)), (Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (insert n gv2))
(Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry q gv4)), (Permutation (carry q a1) (carry gv2 a2)), (Permutation (carry q a1) (carry gv2 a1)), (Permutation (carry q a1) (carry gv2 gv4)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv2)), (Permutation (carry q a1) (gv2 ++ q)), (Permutation (carry q a1) (gv2 ++ gv2)), (Permutation (carry q a1) [])
(Permutation (carry q gv4) q), (Permutation (carry q gv4) gv2), (Permutation (carry q gv4) (a2 :: q)), (Permutation (carry q gv4) (a2 :: gv2)), (Permutation (carry q gv4) (a1 :: q)), (Permutation (carry q gv4) (a1 :: gv2)), (Permutation (carry q gv4) (gv4 :: q)), (Permutation (carry q gv4) (gv4 :: gv2)), (Permutation (carry q gv4) (merge q q)), (Permutation (carry q gv4) (merge q gv2))
(Permutation (carry q gv4) (merge gv2 q)), (Permutation (carry q gv4) (merge gv2 gv2)), (Permutation (carry q gv4) (heap_delete_max a2)), (Permutation (carry q gv4) (heap_delete_max a1)), (Permutation (carry q gv4) (heap_delete_max gv4)), (Permutation (carry q gv4) (join q q a2)), (Permutation (carry q gv4) (join q q a1)), (Permutation (carry q gv4) (join q q gv4)), (Permutation (carry q gv4) (join q gv2 a2)), (Permutation (carry q gv4) (join q gv2 a1))
(Permutation (carry q gv4) (join q gv2 gv4)), (Permutation (carry q gv4) (join gv2 q a2)), (Permutation (carry q gv4) (join gv2 q a1)), (Permutation (carry q gv4) (join gv2 q gv4)), (Permutation (carry q gv4) (join gv2 gv2 a2)), (Permutation (carry q gv4) (join gv2 gv2 a1)), (Permutation (carry q gv4) (join gv2 gv2 gv4)), (Permutation (carry q gv4) (insert x q)), (Permutation (carry q gv4) (insert x gv2)), (Permutation (carry q gv4) (insert n q))
(Permutation (carry q gv4) (insert n gv2)), (Permutation (carry q gv4) (carry q a2)), (Permutation (carry q gv4) (carry q a1)), (Permutation (carry q gv4) (carry gv2 a2)), (Permutation (carry q gv4) (carry gv2 a1)), (Permutation (carry q gv4) (carry gv2 gv4)), (Permutation (carry q gv4) (q ++ q)), (Permutation (carry q gv4) (q ++ gv2)), (Permutation (carry q gv4) (gv2 ++ q)), (Permutation (carry q gv4) (gv2 ++ gv2))
(Permutation (carry q gv4) []), (Permutation (carry gv2 a2) q), (Permutation (carry gv2 a2) gv2), (Permutation (carry gv2 a2) (a2 :: q)), (Permutation (carry gv2 a2) (a2 :: gv2)), (Permutation (carry gv2 a2) (a1 :: q)), (Permutation (carry gv2 a2) (a1 :: gv2)), (Permutation (carry gv2 a2) (gv4 :: q)), (Permutation (carry gv2 a2) (gv4 :: gv2)), (Permutation (carry gv2 a2) (merge q q))
(Permutation (carry gv2 a2) (merge q gv2)), (Permutation (carry gv2 a2) (merge gv2 q)), (Permutation (carry gv2 a2) (merge gv2 gv2)), (Permutation (carry gv2 a2) (heap_delete_max a2)), (Permutation (carry gv2 a2) (heap_delete_max a1)), (Permutation (carry gv2 a2) (heap_delete_max gv4)), (Permutation (carry gv2 a2) (join q q a2)), (Permutation (carry gv2 a2) (join q q a1)), (Permutation (carry gv2 a2) (join q q gv4)), (Permutation (carry gv2 a2) (join q gv2 a2))
(Permutation (carry gv2 a2) (join q gv2 a1)), (Permutation (carry gv2 a2) (join q gv2 gv4)), (Permutation (carry gv2 a2) (join gv2 q a2)), (Permutation (carry gv2 a2) (join gv2 q a1)), (Permutation (carry gv2 a2) (join gv2 q gv4)), (Permutation (carry gv2 a2) (join gv2 gv2 a2)), (Permutation (carry gv2 a2) (join gv2 gv2 a1)), (Permutation (carry gv2 a2) (join gv2 gv2 gv4)), (Permutation (carry gv2 a2) (insert x q)), (Permutation (carry gv2 a2) (insert x gv2))
(Permutation (carry gv2 a2) (insert n q)), (Permutation (carry gv2 a2) (insert n gv2)), (Permutation (carry gv2 a2) (carry q a2)), (Permutation (carry gv2 a2) (carry q a1)), (Permutation (carry gv2 a2) (carry q gv4)), (Permutation (carry gv2 a2) (carry gv2 a1)), (Permutation (carry gv2 a2) (carry gv2 gv4)), (Permutation (carry gv2 a2) (q ++ q)), (Permutation (carry gv2 a2) (q ++ gv2)), (Permutation (carry gv2 a2) (gv2 ++ q))
(Permutation (carry gv2 a2) (gv2 ++ gv2)), (Permutation (carry gv2 a2) []), (Permutation (carry gv2 a1) q), (Permutation (carry gv2 a1) gv2), (Permutation (carry gv2 a1) (a2 :: q)), (Permutation (carry gv2 a1) (a2 :: gv2)), (Permutation (carry gv2 a1) (a1 :: q)), (Permutation (carry gv2 a1) (a1 :: gv2)), (Permutation (carry gv2 a1) (gv4 :: q)), (Permutation (carry gv2 a1) (gv4 :: gv2))
(Permutation (carry gv2 a1) (merge q q)), (Permutation (carry gv2 a1) (merge q gv2)), (Permutation (carry gv2 a1) (merge gv2 q)), (Permutation (carry gv2 a1) (merge gv2 gv2)), (Permutation (carry gv2 a1) (heap_delete_max a2)), (Permutation (carry gv2 a1) (heap_delete_max a1)), (Permutation (carry gv2 a1) (heap_delete_max gv4)), (Permutation (carry gv2 a1) (join q q a2)), (Permutation (carry gv2 a1) (join q q a1)), (Permutation (carry gv2 a1) (join q q gv4))
(Permutation (carry gv2 a1) (join q gv2 a2)), (Permutation (carry gv2 a1) (join q gv2 a1)), (Permutation (carry gv2 a1) (join q gv2 gv4)), (Permutation (carry gv2 a1) (join gv2 q a2)), (Permutation (carry gv2 a1) (join gv2 q a1)), (Permutation (carry gv2 a1) (join gv2 q gv4)), (Permutation (carry gv2 a1) (join gv2 gv2 a2)), (Permutation (carry gv2 a1) (join gv2 gv2 a1)), (Permutation (carry gv2 a1) (join gv2 gv2 gv4)), (Permutation (carry gv2 a1) (insert x q))
(Permutation (carry gv2 a1) (insert x gv2)), (Permutation (carry gv2 a1) (insert n q)), (Permutation (carry gv2 a1) (insert n gv2)), (Permutation (carry gv2 a1) (carry q a2)), (Permutation (carry gv2 a1) (carry q a1)), (Permutation (carry gv2 a1) (carry q gv4)), (Permutation (carry gv2 a1) (carry gv2 a2)), (Permutation (carry gv2 a1) (carry gv2 gv4)), (Permutation (carry gv2 a1) (q ++ q)), (Permutation (carry gv2 a1) (q ++ gv2))
(Permutation (carry gv2 a1) (gv2 ++ q)), (Permutation (carry gv2 a1) (gv2 ++ gv2)), (Permutation (carry gv2 a1) []), (Permutation (carry gv2 gv4) q), (Permutation (carry gv2 gv4) gv2), (Permutation (carry gv2 gv4) (a2 :: q)), (Permutation (carry gv2 gv4) (a2 :: gv2)), (Permutation (carry gv2 gv4) (a1 :: q)), (Permutation (carry gv2 gv4) (a1 :: gv2)), (Permutation (carry gv2 gv4) (gv4 :: q))
(Permutation (carry gv2 gv4) (gv4 :: gv2)), (Permutation (carry gv2 gv4) (merge q q)), (Permutation (carry gv2 gv4) (merge q gv2)), (Permutation (carry gv2 gv4) (merge gv2 q)), (Permutation (carry gv2 gv4) (merge gv2 gv2)), (Permutation (carry gv2 gv4) (heap_delete_max a2)), (Permutation (carry gv2 gv4) (heap_delete_max a1)), (Permutation (carry gv2 gv4) (heap_delete_max gv4)), (Permutation (carry gv2 gv4) (join q q a2)), (Permutation (carry gv2 gv4) (join q q a1))
(Permutation (carry gv2 gv4) (join q q gv4)), (Permutation (carry gv2 gv4) (join q gv2 a2)), (Permutation (carry gv2 gv4) (join q gv2 a1)), (Permutation (carry gv2 gv4) (join q gv2 gv4)), (Permutation (carry gv2 gv4) (join gv2 q a2)), (Permutation (carry gv2 gv4) (join gv2 q a1)), (Permutation (carry gv2 gv4) (join gv2 q gv4)), (Permutation (carry gv2 gv4) (join gv2 gv2 a2)), (Permutation (carry gv2 gv4) (join gv2 gv2 a1)), (Permutation (carry gv2 gv4) (join gv2 gv2 gv4))
(Permutation (carry gv2 gv4) (insert x q)), (Permutation (carry gv2 gv4) (insert x gv2)), (Permutation (carry gv2 gv4) (insert n q)), (Permutation (carry gv2 gv4) (insert n gv2)), (Permutation (carry gv2 gv4) (carry q a2)), (Permutation (carry gv2 gv4) (carry q a1)), (Permutation (carry gv2 gv4) (carry q gv4)), (Permutation (carry gv2 gv4) (carry gv2 a2)), (Permutation (carry gv2 gv4) (carry gv2 a1)), (Permutation (carry gv2 gv4) (q ++ q))
(Permutation (carry gv2 gv4) (q ++ gv2)), (Permutation (carry gv2 gv4) (gv2 ++ q)), (Permutation (carry gv2 gv4) (gv2 ++ gv2)), (Permutation (carry gv2 gv4) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv2)), (Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv2))
(Permutation (q ++ q) (gv4 :: q)), (Permutation (q ++ q) (gv4 :: gv2)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q)), (Permutation (q ++ q) (merge gv2 gv2)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (heap_delete_max gv4)), (Permutation (q ++ q) (join q q a2))
(Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q q gv4)), (Permutation (q ++ q) (join q gv2 a2)), (Permutation (q ++ q) (join q gv2 a1)), (Permutation (q ++ q) (join q gv2 gv4)), (Permutation (q ++ q) (join gv2 q a2)), (Permutation (q ++ q) (join gv2 q a1)), (Permutation (q ++ q) (join gv2 q gv4)), (Permutation (q ++ q) (join gv2 gv2 a2)), (Permutation (q ++ q) (join gv2 gv2 a1))
(Permutation (q ++ q) (join gv2 gv2 gv4)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv2)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry q gv4)), (Permutation (q ++ q) (carry gv2 a2)), (Permutation (q ++ q) (carry gv2 a1))
(Permutation (q ++ q) (carry gv2 gv4)), (Permutation (q ++ q) (q ++ gv2)), (Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q), (Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (a2 :: q)), (Permutation (q ++ gv2) (a2 :: gv2)), (Permutation (q ++ gv2) (a1 :: q))
(Permutation (q ++ gv2) (a1 :: gv2)), (Permutation (q ++ gv2) (gv4 :: q)), (Permutation (q ++ gv2) (gv4 :: gv2)), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q)), (Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (heap_delete_max a2)), (Permutation (q ++ gv2) (heap_delete_max a1)), (Permutation (q ++ gv2) (heap_delete_max gv4))
(Permutation (q ++ gv2) (join q q a2)), (Permutation (q ++ gv2) (join q q a1)), (Permutation (q ++ gv2) (join q q gv4)), (Permutation (q ++ gv2) (join q gv2 a2)), (Permutation (q ++ gv2) (join q gv2 a1)), (Permutation (q ++ gv2) (join q gv2 gv4)), (Permutation (q ++ gv2) (join gv2 q a2)), (Permutation (q ++ gv2) (join gv2 q a1)), (Permutation (q ++ gv2) (join gv2 q gv4)), (Permutation (q ++ gv2) (join gv2 gv2 a2))
(Permutation (q ++ gv2) (join gv2 gv2 a1)), (Permutation (q ++ gv2) (join gv2 gv2 gv4)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (insert n q)), (Permutation (q ++ gv2) (insert n gv2)), (Permutation (q ++ gv2) (carry q a2)), (Permutation (q ++ gv2) (carry q a1)), (Permutation (q ++ gv2) (carry q gv4)), (Permutation (q ++ gv2) (carry gv2 a2))
(Permutation (q ++ gv2) (carry gv2 a1)), (Permutation (q ++ gv2) (carry gv2 gv4)), (Permutation (q ++ gv2) (q ++ q)), (Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q), (Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (a2 :: q)), (Permutation (gv2 ++ q) (a2 :: gv2))
(Permutation (gv2 ++ q) (a1 :: q)), (Permutation (gv2 ++ q) (a1 :: gv2)), (Permutation (gv2 ++ q) (gv4 :: q)), (Permutation (gv2 ++ q) (gv4 :: gv2)), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2)), (Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (heap_delete_max a2)), (Permutation (gv2 ++ q) (heap_delete_max a1))
(Permutation (gv2 ++ q) (heap_delete_max gv4)), (Permutation (gv2 ++ q) (join q q a2)), (Permutation (gv2 ++ q) (join q q a1)), (Permutation (gv2 ++ q) (join q q gv4)), (Permutation (gv2 ++ q) (join q gv2 a2)), (Permutation (gv2 ++ q) (join q gv2 a1)), (Permutation (gv2 ++ q) (join q gv2 gv4)), (Permutation (gv2 ++ q) (join gv2 q a2)), (Permutation (gv2 ++ q) (join gv2 q a1)), (Permutation (gv2 ++ q) (join gv2 q gv4))
(Permutation (gv2 ++ q) (join gv2 gv2 a2)), (Permutation (gv2 ++ q) (join gv2 gv2 a1)), (Permutation (gv2 ++ q) (join gv2 gv2 gv4)), (Permutation (gv2 ++ q) (insert x q)), (Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (insert n q)), (Permutation (gv2 ++ q) (insert n gv2)), (Permutation (gv2 ++ q) (carry q a2)), (Permutation (gv2 ++ q) (carry q a1)), (Permutation (gv2 ++ q) (carry q gv4))
(Permutation (gv2 ++ q) (carry gv2 a2)), (Permutation (gv2 ++ q) (carry gv2 a1)), (Permutation (gv2 ++ q) (carry gv2 gv4)), (Permutation (gv2 ++ q) (q ++ q)), (Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (a2 :: q))
(Permutation (gv2 ++ gv2) (a2 :: gv2)), (Permutation (gv2 ++ gv2) (a1 :: q)), (Permutation (gv2 ++ gv2) (a1 :: gv2)), (Permutation (gv2 ++ gv2) (gv4 :: q)), (Permutation (gv2 ++ gv2) (gv4 :: gv2)), (Permutation (gv2 ++ gv2) (merge q q)), (Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (heap_delete_max a2))
(Permutation (gv2 ++ gv2) (heap_delete_max a1)), (Permutation (gv2 ++ gv2) (heap_delete_max gv4)), (Permutation (gv2 ++ gv2) (join q q a2)), (Permutation (gv2 ++ gv2) (join q q a1)), (Permutation (gv2 ++ gv2) (join q q gv4)), (Permutation (gv2 ++ gv2) (join q gv2 a2)), (Permutation (gv2 ++ gv2) (join q gv2 a1)), (Permutation (gv2 ++ gv2) (join q gv2 gv4)), (Permutation (gv2 ++ gv2) (join gv2 q a2)), (Permutation (gv2 ++ gv2) (join gv2 q a1))
(Permutation (gv2 ++ gv2) (join gv2 q gv4)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a2)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a1)), (Permutation (gv2 ++ gv2) (join gv2 gv2 gv4)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2)), (Permutation (gv2 ++ gv2) (insert n q)), (Permutation (gv2 ++ gv2) (insert n gv2)), (Permutation (gv2 ++ gv2) (carry q a2)), (Permutation (gv2 ++ gv2) (carry q a1))
(Permutation (gv2 ++ gv2) (carry q gv4)), (Permutation (gv2 ++ gv2) (carry gv2 a2)), (Permutation (gv2 ++ gv2) (carry gv2 a1)), (Permutation (gv2 ++ gv2) (carry gv2 gv4)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q)), (Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2)
(Permutation [] (a2 :: q)), (Permutation [] (a2 :: gv2)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv2)), (Permutation [] (gv4 :: q)), (Permutation [] (gv4 :: gv2)), (Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2))
(Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv4)), (Permutation [] (join q q a2)), (Permutation [] (join q q a1)), (Permutation [] (join q q gv4)), (Permutation [] (join q gv2 a2)), (Permutation [] (join q gv2 a1)), (Permutation [] (join q gv2 gv4)), (Permutation [] (join gv2 q a2))
(Permutation [] (join gv2 q a1)), (Permutation [] (join gv2 q gv4)), (Permutation [] (join gv2 gv2 a2)), (Permutation [] (join gv2 gv2 a1)), (Permutation [] (join gv2 gv2 gv4)), (Permutation [] (insert x q)), (Permutation [] (insert x gv2)), (Permutation [] (insert n q)), (Permutation [] (insert n gv2)), (Permutation [] (carry q a2))
(Permutation [] (carry q a1)), (Permutation [] (carry q gv4)), (Permutation [] (carry gv2 a2)), (Permutation [] (carry gv2 a1)), (Permutation [] (carry gv2 gv4)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q)), (Permutation [] (gv2 ++ gv2)), (In a2 (a2 :: q))
(In a2 (a2 :: gv2)), (In a2 (a1 :: q)), (In a2 (a1 :: gv2)), (In a2 (gv4 :: q)), (In a2 (gv4 :: gv2)), (In a2 (merge q q)), (In a2 (merge q gv2)), (In a2 (merge gv2 q)), (In a2 (merge gv2 gv2)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv4)), (In a2 (join q q a2)), (In a2 (join q q a1)), (In a2 (join q q gv4)), (In a2 (join q gv2 a2)), (In a2 (join q gv2 a1)), (In a2 (join q gv2 gv4)), (In a2 (join gv2 q a2)), (In a2 (join gv2 q a1))
(In a2 (join gv2 q gv4)), (In a2 (join gv2 gv2 a2)), (In a2 (join gv2 gv2 a1)), (In a2 (join gv2 gv2 gv4)), (In a2 (insert x q)), (In a2 (insert x gv2)), (In a2 (insert n q)), (In a2 (insert n gv2)), (In a2 (carry q a2)), (In a2 (carry q a1))
(In a2 (carry q gv4)), (In a2 (carry gv2 a2)), (In a2 (carry gv2 a1)), (In a2 (carry gv2 gv4)), (In a2 (q ++ q)), (In a2 (q ++ gv2)), (In a2 (gv2 ++ q)), (In a2 (gv2 ++ gv2)), (In a1 (a2 :: q)), (In a1 (a2 :: gv2))
(In a1 (a1 :: q)), (In a1 (a1 :: gv2)), (In a1 (gv4 :: q)), (In a1 (gv4 :: gv2)), (In a1 (merge q q)), (In a1 (merge q gv2)), (In a1 (merge gv2 q)), (In a1 (merge gv2 gv2)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1))
(In a1 (heap_delete_max gv4)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (join q q gv4)), (In a1 (join q gv2 a2)), (In a1 (join q gv2 a1)), (In a1 (join q gv2 gv4)), (In a1 (join gv2 q a2)), (In a1 (join gv2 q a1)), (In a1 (join gv2 q gv4))
(In a1 (join gv2 gv2 a2)), (In a1 (join gv2 gv2 a1)), (In a1 (join gv2 gv2 gv4)), (In a1 (insert x q)), (In a1 (insert x gv2)), (In a1 (insert n q)), (In a1 (insert n gv2)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry q gv4))
(In a1 (carry gv2 a2)), (In a1 (carry gv2 a1)), (In a1 (carry gv2 gv4)), (In a1 (q ++ q)), (In a1 (q ++ gv2)), (In a1 (gv2 ++ q)), (In a1 (gv2 ++ gv2)), (In gv4 (a2 :: q)), (In gv4 (a2 :: gv2)), (In gv4 (a1 :: q))
(In gv4 (a1 :: gv2)), (In gv4 (gv4 :: q)), (In gv4 (gv4 :: gv2)), (In gv4 (merge q q)), (In gv4 (merge q gv2)), (In gv4 (merge gv2 q)), (In gv4 (merge gv2 gv2)), (In gv4 (heap_delete_max a2)), (In gv4 (heap_delete_max a1)), (In gv4 (heap_delete_max gv4))
(In gv4 (join q q a2)), (In gv4 (join q q a1)), (In gv4 (join q q gv4)), (In gv4 (join q gv2 a2)), (In gv4 (join q gv2 a1)), (In gv4 (join q gv2 gv4)), (In gv4 (join gv2 q a2)), (In gv4 (join gv2 q a1)), (In gv4 (join gv2 q gv4)), (In gv4 (join gv2 gv2 a2))
(In gv4 (join gv2 gv2 a1)), (In gv4 (join gv2 gv2 gv4)), (In gv4 (insert x q)), (In gv4 (insert x gv2)), (In gv4 (insert n q)), (In gv4 (insert n gv2)), (In gv4 (carry q a2)), (In gv4 (carry q a1)), (In gv4 (carry q gv4)), (In gv4 (carry gv2 a2))
(In gv4 (carry gv2 a1)), (In gv4 (carry gv2 gv4)), (In gv4 (q ++ q)), (In gv4 (q ++ gv2)), (In gv4 (gv2 ++ q)), (In gv4 (gv2 ++ gv2)), (In (Node x a2 a2) q), (In (Node x a2 a2) gv2), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv2))
(In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (a1 :: gv2)), (In (Node x a2 a2) (gv4 :: q)), (In (Node x a2 a2) (gv4 :: gv2)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv2)), (In (Node x a2 a2) (merge gv2 q)), (In (Node x a2 a2) (merge gv2 gv2)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1))
(In (Node x a2 a2) (heap_delete_max gv4)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q q gv4)), (In (Node x a2 a2) (join q gv2 a2)), (In (Node x a2 a2) (join q gv2 a1)), (In (Node x a2 a2) (join q gv2 gv4)), (In (Node x a2 a2) (join gv2 q a2)), (In (Node x a2 a2) (join gv2 q a1)), (In (Node x a2 a2) (join gv2 q gv4))
(In (Node x a2 a2) (join gv2 gv2 a2)), (In (Node x a2 a2) (join gv2 gv2 a1)), (In (Node x a2 a2) (join gv2 gv2 gv4)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert x gv2)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert n gv2)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry q gv4))
(In (Node x a2 a2) (carry gv2 a2)), (In (Node x a2 a2) (carry gv2 a1)), (In (Node x a2 a2) (carry gv2 gv4)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv2)), (In (Node x a2 a2) (gv2 ++ q)), (In (Node x a2 a2) (gv2 ++ gv2)), (In (Node x a2 a1) q), (In (Node x a2 a1) gv2), (In (Node x a2 a1) (a2 :: q))
(In (Node x a2 a1) (a2 :: gv2)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (a1 :: gv2)), (In (Node x a2 a1) (gv4 :: q)), (In (Node x a2 a1) (gv4 :: gv2)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (merge q gv2)), (In (Node x a2 a1) (merge gv2 q)), (In (Node x a2 a1) (merge gv2 gv2)), (In (Node x a2 a1) (heap_delete_max a2))
(In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (heap_delete_max gv4)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q q gv4)), (In (Node x a2 a1) (join q gv2 a2)), (In (Node x a2 a1) (join q gv2 a1)), (In (Node x a2 a1) (join q gv2 gv4)), (In (Node x a2 a1) (join gv2 q a2)), (In (Node x a2 a1) (join gv2 q a1))
(In (Node x a2 a1) (join gv2 q gv4)), (In (Node x a2 a1) (join gv2 gv2 a2)), (In (Node x a2 a1) (join gv2 gv2 a1)), (In (Node x a2 a1) (join gv2 gv2 gv4)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert x gv2)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv2)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1))
(In (Node x a2 a1) (carry q gv4)), (In (Node x a2 a1) (carry gv2 a2)), (In (Node x a2 a1) (carry gv2 a1)), (In (Node x a2 a1) (carry gv2 gv4)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 a1) (q ++ gv2)), (In (Node x a2 a1) (gv2 ++ q)), (In (Node x a2 a1) (gv2 ++ gv2)), (In (Node x a2 gv4) q), (In (Node x a2 gv4) gv2)
(In (Node x a2 gv4) (a2 :: q)), (In (Node x a2 gv4) (a2 :: gv2)), (In (Node x a2 gv4) (a1 :: q)), (In (Node x a2 gv4) (a1 :: gv2)), (In (Node x a2 gv4) (gv4 :: q)), (In (Node x a2 gv4) (gv4 :: gv2)), (In (Node x a2 gv4) (merge q q)), (In (Node x a2 gv4) (merge q gv2)), (In (Node x a2 gv4) (merge gv2 q)), (In (Node x a2 gv4) (merge gv2 gv2))
(In (Node x a2 gv4) (heap_delete_max a2)), (In (Node x a2 gv4) (heap_delete_max a1)), (In (Node x a2 gv4) (heap_delete_max gv4)), (In (Node x a2 gv4) (join q q a2)), (In (Node x a2 gv4) (join q q a1)), (In (Node x a2 gv4) (join q q gv4)), (In (Node x a2 gv4) (join q gv2 a2)), (In (Node x a2 gv4) (join q gv2 a1)), (In (Node x a2 gv4) (join q gv2 gv4)), (In (Node x a2 gv4) (join gv2 q a2))
(In (Node x a2 gv4) (join gv2 q a1)), (In (Node x a2 gv4) (join gv2 q gv4)), (In (Node x a2 gv4) (join gv2 gv2 a2)), (In (Node x a2 gv4) (join gv2 gv2 a1)), (In (Node x a2 gv4) (join gv2 gv2 gv4)), (In (Node x a2 gv4) (insert x q)), (In (Node x a2 gv4) (insert x gv2)), (In (Node x a2 gv4) (insert n q)), (In (Node x a2 gv4) (insert n gv2)), (In (Node x a2 gv4) (carry q a2))
(In (Node x a2 gv4) (carry q a1)), (In (Node x a2 gv4) (carry q gv4)), (In (Node x a2 gv4) (carry gv2 a2)), (In (Node x a2 gv4) (carry gv2 a1)), (In (Node x a2 gv4) (carry gv2 gv4)), (In (Node x a2 gv4) (q ++ q)), (In (Node x a2 gv4) (q ++ gv2)), (In (Node x a2 gv4) (gv2 ++ q)), (In (Node x a2 gv4) (gv2 ++ gv2)), (In (Node x a1 a2) q)
(In (Node x a1 a2) gv2), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv2)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (a1 :: gv2)), (In (Node x a1 a2) (gv4 :: q)), (In (Node x a1 a2) (gv4 :: gv2)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (merge q gv2)), (In (Node x a1 a2) (merge gv2 q))
(In (Node x a1 a2) (merge gv2 gv2)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (heap_delete_max gv4)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q q gv4)), (In (Node x a1 a2) (join q gv2 a2)), (In (Node x a1 a2) (join q gv2 a1)), (In (Node x a1 a2) (join q gv2 gv4))
(In (Node x a1 a2) (join gv2 q a2)), (In (Node x a1 a2) (join gv2 q a1)), (In (Node x a1 a2) (join gv2 q gv4)), (In (Node x a1 a2) (join gv2 gv2 a2)), (In (Node x a1 a2) (join gv2 gv2 a1)), (In (Node x a1 a2) (join gv2 gv2 gv4)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv2)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert n gv2))
(In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry q gv4)), (In (Node x a1 a2) (carry gv2 a2)), (In (Node x a1 a2) (carry gv2 a1)), (In (Node x a1 a2) (carry gv2 gv4)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a2) (q ++ gv2)), (In (Node x a1 a2) (gv2 ++ q)), (In (Node x a1 a2) (gv2 ++ gv2))
(In (Node x a1 a1) q), (In (Node x a1 a1) gv2), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a2 :: gv2)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (a1 :: gv2)), (In (Node x a1 a1) (gv4 :: q)), (In (Node x a1 a1) (gv4 :: gv2)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (merge q gv2))
(In (Node x a1 a1) (merge gv2 q)), (In (Node x a1 a1) (merge gv2 gv2)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (heap_delete_max gv4)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q q gv4)), (In (Node x a1 a1) (join q gv2 a2)), (In (Node x a1 a1) (join q gv2 a1))
(In (Node x a1 a1) (join q gv2 gv4)), (In (Node x a1 a1) (join gv2 q a2)), (In (Node x a1 a1) (join gv2 q a1)), (In (Node x a1 a1) (join gv2 q gv4)), (In (Node x a1 a1) (join gv2 gv2 a2)), (In (Node x a1 a1) (join gv2 gv2 a1)), (In (Node x a1 a1) (join gv2 gv2 gv4)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv2)), (In (Node x a1 a1) (insert n q))
(In (Node x a1 a1) (insert n gv2)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry q gv4)), (In (Node x a1 a1) (carry gv2 a2)), (In (Node x a1 a1) (carry gv2 a1)), (In (Node x a1 a1) (carry gv2 gv4)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv2)), (In (Node x a1 a1) (gv2 ++ q))
(In (Node x a1 a1) (gv2 ++ gv2)), (In (Node x a1 gv4) q), (In (Node x a1 gv4) gv2), (In (Node x a1 gv4) (a2 :: q)), (In (Node x a1 gv4) (a2 :: gv2)), (In (Node x a1 gv4) (a1 :: q)), (In (Node x a1 gv4) (a1 :: gv2)), (In (Node x a1 gv4) (gv4 :: q)), (In (Node x a1 gv4) (gv4 :: gv2)), (In (Node x a1 gv4) (merge q q))
(In (Node x a1 gv4) (merge q gv2)), (In (Node x a1 gv4) (merge gv2 q)), (In (Node x a1 gv4) (merge gv2 gv2)), (In (Node x a1 gv4) (heap_delete_max a2)), (In (Node x a1 gv4) (heap_delete_max a1)), (In (Node x a1 gv4) (heap_delete_max gv4)), (In (Node x a1 gv4) (join q q a2)), (In (Node x a1 gv4) (join q q a1)), (In (Node x a1 gv4) (join q q gv4)), (In (Node x a1 gv4) (join q gv2 a2))
(In (Node x a1 gv4) (join q gv2 a1)), (In (Node x a1 gv4) (join q gv2 gv4)), (In (Node x a1 gv4) (join gv2 q a2)), (In (Node x a1 gv4) (join gv2 q a1)), (In (Node x a1 gv4) (join gv2 q gv4)), (In (Node x a1 gv4) (join gv2 gv2 a2)), (In (Node x a1 gv4) (join gv2 gv2 a1)), (In (Node x a1 gv4) (join gv2 gv2 gv4)), (In (Node x a1 gv4) (insert x q)), (In (Node x a1 gv4) (insert x gv2))
(In (Node x a1 gv4) (insert n q)), (In (Node x a1 gv4) (insert n gv2)), (In (Node x a1 gv4) (carry q a2)), (In (Node x a1 gv4) (carry q a1)), (In (Node x a1 gv4) (carry q gv4)), (In (Node x a1 gv4) (carry gv2 a2)), (In (Node x a1 gv4) (carry gv2 a1)), (In (Node x a1 gv4) (carry gv2 gv4)), (In (Node x a1 gv4) (q ++ q)), (In (Node x a1 gv4) (q ++ gv2))
(In (Node x a1 gv4) (gv2 ++ q)), (In (Node x a1 gv4) (gv2 ++ gv2)), (In (Node x gv4 a2) q), (In (Node x gv4 a2) gv2), (In (Node x gv4 a2) (a2 :: q)), (In (Node x gv4 a2) (a2 :: gv2)), (In (Node x gv4 a2) (a1 :: q)), (In (Node x gv4 a2) (a1 :: gv2)), (In (Node x gv4 a2) (gv4 :: q)), (In (Node x gv4 a2) (gv4 :: gv2))
(In (Node x gv4 a2) (merge q q)), (In (Node x gv4 a2) (merge q gv2)), (In (Node x gv4 a2) (merge gv2 q)), (In (Node x gv4 a2) (merge gv2 gv2)), (In (Node x gv4 a2) (heap_delete_max a2)), (In (Node x gv4 a2) (heap_delete_max a1)), (In (Node x gv4 a2) (heap_delete_max gv4)), (In (Node x gv4 a2) (join q q a2)), (In (Node x gv4 a2) (join q q a1)), (In (Node x gv4 a2) (join q q gv4))
(In (Node x gv4 a2) (join q gv2 a2)), (In (Node x gv4 a2) (join q gv2 a1)), (In (Node x gv4 a2) (join q gv2 gv4)), (In (Node x gv4 a2) (join gv2 q a2)), (In (Node x gv4 a2) (join gv2 q a1)), (In (Node x gv4 a2) (join gv2 q gv4)), (In (Node x gv4 a2) (join gv2 gv2 a2)), (In (Node x gv4 a2) (join gv2 gv2 a1)), (In (Node x gv4 a2) (join gv2 gv2 gv4)), (In (Node x gv4 a2) (insert x q))
(In (Node x gv4 a2) (insert x gv2)), (In (Node x gv4 a2) (insert n q)), (In (Node x gv4 a2) (insert n gv2)), (In (Node x gv4 a2) (carry q a2)), (In (Node x gv4 a2) (carry q a1)), (In (Node x gv4 a2) (carry q gv4)), (In (Node x gv4 a2) (carry gv2 a2)), (In (Node x gv4 a2) (carry gv2 a1)), (In (Node x gv4 a2) (carry gv2 gv4)), (In (Node x gv4 a2) (q ++ q))
(In (Node x gv4 a2) (q ++ gv2)), (In (Node x gv4 a2) (gv2 ++ q)), (In (Node x gv4 a2) (gv2 ++ gv2)), (In (Node x gv4 a1) q), (In (Node x gv4 a1) gv2), (In (Node x gv4 a1) (a2 :: q)), (In (Node x gv4 a1) (a2 :: gv2)), (In (Node x gv4 a1) (a1 :: q)), (In (Node x gv4 a1) (a1 :: gv2)), (In (Node x gv4 a1) (gv4 :: q))
(In (Node x gv4 a1) (gv4 :: gv2)), (In (Node x gv4 a1) (merge q q)), (In (Node x gv4 a1) (merge q gv2)), (In (Node x gv4 a1) (merge gv2 q)), (In (Node x gv4 a1) (merge gv2 gv2)), (In (Node x gv4 a1) (heap_delete_max a2)), (In (Node x gv4 a1) (heap_delete_max a1)), (In (Node x gv4 a1) (heap_delete_max gv4)), (In (Node x gv4 a1) (join q q a2)), (In (Node x gv4 a1) (join q q a1))
(In (Node x gv4 a1) (join q q gv4)), (In (Node x gv4 a1) (join q gv2 a2)), (In (Node x gv4 a1) (join q gv2 a1)), (In (Node x gv4 a1) (join q gv2 gv4)), (In (Node x gv4 a1) (join gv2 q a2)), (In (Node x gv4 a1) (join gv2 q a1)), (In (Node x gv4 a1) (join gv2 q gv4)), (In (Node x gv4 a1) (join gv2 gv2 a2)), (In (Node x gv4 a1) (join gv2 gv2 a1)), (In (Node x gv4 a1) (join gv2 gv2 gv4))
(In (Node x gv4 a1) (insert x q)), (In (Node x gv4 a1) (insert x gv2)), (In (Node x gv4 a1) (insert n q)), (In (Node x gv4 a1) (insert n gv2)), (In (Node x gv4 a1) (carry q a2)), (In (Node x gv4 a1) (carry q a1)), (In (Node x gv4 a1) (carry q gv4)), (In (Node x gv4 a1) (carry gv2 a2)), (In (Node x gv4 a1) (carry gv2 a1)), (In (Node x gv4 a1) (carry gv2 gv4))
(In (Node x gv4 a1) (q ++ q)), (In (Node x gv4 a1) (q ++ gv2)), (In (Node x gv4 a1) (gv2 ++ q)), (In (Node x gv4 a1) (gv2 ++ gv2)), (In (Node x gv4 gv4) q), (In (Node x gv4 gv4) gv2), (In (Node x gv4 gv4) (a2 :: q)), (In (Node x gv4 gv4) (a2 :: gv2)), (In (Node x gv4 gv4) (a1 :: q)), (In (Node x gv4 gv4) (a1 :: gv2))
(In (Node x gv4 gv4) (gv4 :: q)), (In (Node x gv4 gv4) (gv4 :: gv2)), (In (Node x gv4 gv4) (merge q q)), (In (Node x gv4 gv4) (merge q gv2)), (In (Node x gv4 gv4) (merge gv2 q)), (In (Node x gv4 gv4) (merge gv2 gv2)), (In (Node x gv4 gv4) (heap_delete_max a2)), (In (Node x gv4 gv4) (heap_delete_max a1)), (In (Node x gv4 gv4) (heap_delete_max gv4)), (In (Node x gv4 gv4) (join q q a2))
(In (Node x gv4 gv4) (join q q a1)), (In (Node x gv4 gv4) (join q q gv4)), (In (Node x gv4 gv4) (join q gv2 a2)), (In (Node x gv4 gv4) (join q gv2 a1)), (In (Node x gv4 gv4) (join q gv2 gv4)), (In (Node x gv4 gv4) (join gv2 q a2)), (In (Node x gv4 gv4) (join gv2 q a1)), (In (Node x gv4 gv4) (join gv2 q gv4)), (In (Node x gv4 gv4) (join gv2 gv2 a2)), (In (Node x gv4 gv4) (join gv2 gv2 a1))
(In (Node x gv4 gv4) (join gv2 gv2 gv4)), (In (Node x gv4 gv4) (insert x q)), (In (Node x gv4 gv4) (insert x gv2)), (In (Node x gv4 gv4) (insert n q)), (In (Node x gv4 gv4) (insert n gv2)), (In (Node x gv4 gv4) (carry q a2)), (In (Node x gv4 gv4) (carry q a1)), (In (Node x gv4 gv4) (carry q gv4)), (In (Node x gv4 gv4) (carry gv2 a2)), (In (Node x gv4 gv4) (carry gv2 a1))
(In (Node x gv4 gv4) (carry gv2 gv4)), (In (Node x gv4 gv4) (q ++ q)), (In (Node x gv4 gv4) (q ++ gv2)), (In (Node x gv4 gv4) (gv2 ++ q)), (In (Node x gv4 gv4) (gv2 ++ gv2)), (In (Node n a2 a2) q), (In (Node n a2 a2) gv2), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a2 :: gv2)), (In (Node n a2 a2) (a1 :: q))
(In (Node n a2 a2) (a1 :: gv2)), (In (Node n a2 a2) (gv4 :: q)), (In (Node n a2 a2) (gv4 :: gv2)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv2)), (In (Node n a2 a2) (merge gv2 q)), (In (Node n a2 a2) (merge gv2 gv2)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv4))
(In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q q gv4)), (In (Node n a2 a2) (join q gv2 a2)), (In (Node n a2 a2) (join q gv2 a1)), (In (Node n a2 a2) (join q gv2 gv4)), (In (Node n a2 a2) (join gv2 q a2)), (In (Node n a2 a2) (join gv2 q a1)), (In (Node n a2 a2) (join gv2 q gv4)), (In (Node n a2 a2) (join gv2 gv2 a2))
(In (Node n a2 a2) (join gv2 gv2 a1)), (In (Node n a2 a2) (join gv2 gv2 gv4)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv2)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert n gv2)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry q gv4)), (In (Node n a2 a2) (carry gv2 a2))
(In (Node n a2 a2) (carry gv2 a1)), (In (Node n a2 a2) (carry gv2 gv4)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv2)), (In (Node n a2 a2) (gv2 ++ q)), (In (Node n a2 a2) (gv2 ++ gv2)), (In (Node n a2 a1) q), (In (Node n a2 a1) gv2), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a2 :: gv2))
(In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (a1 :: gv2)), (In (Node n a2 a1) (gv4 :: q)), (In (Node n a2 a1) (gv4 :: gv2)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv2)), (In (Node n a2 a1) (merge gv2 q)), (In (Node n a2 a1) (merge gv2 gv2)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1))
(In (Node n a2 a1) (heap_delete_max gv4)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q q gv4)), (In (Node n a2 a1) (join q gv2 a2)), (In (Node n a2 a1) (join q gv2 a1)), (In (Node n a2 a1) (join q gv2 gv4)), (In (Node n a2 a1) (join gv2 q a2)), (In (Node n a2 a1) (join gv2 q a1)), (In (Node n a2 a1) (join gv2 q gv4))
(In (Node n a2 a1) (join gv2 gv2 a2)), (In (Node n a2 a1) (join gv2 gv2 a1)), (In (Node n a2 a1) (join gv2 gv2 gv4)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert x gv2)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (insert n gv2)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry q gv4))
(In (Node n a2 a1) (carry gv2 a2)), (In (Node n a2 a1) (carry gv2 a1)), (In (Node n a2 a1) (carry gv2 gv4)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 a1) (q ++ gv2)), (In (Node n a2 a1) (gv2 ++ q)), (In (Node n a2 a1) (gv2 ++ gv2)), (In (Node n a2 gv4) q), (In (Node n a2 gv4) gv2), (In (Node n a2 gv4) (a2 :: q))
(In (Node n a2 gv4) (a2 :: gv2)), (In (Node n a2 gv4) (a1 :: q)), (In (Node n a2 gv4) (a1 :: gv2)), (In (Node n a2 gv4) (gv4 :: q)), (In (Node n a2 gv4) (gv4 :: gv2)), (In (Node n a2 gv4) (merge q q)), (In (Node n a2 gv4) (merge q gv2)), (In (Node n a2 gv4) (merge gv2 q)), (In (Node n a2 gv4) (merge gv2 gv2)), (In (Node n a2 gv4) (heap_delete_max a2))
(In (Node n a2 gv4) (heap_delete_max a1)), (In (Node n a2 gv4) (heap_delete_max gv4)), (In (Node n a2 gv4) (join q q a2)), (In (Node n a2 gv4) (join q q a1)), (In (Node n a2 gv4) (join q q gv4)), (In (Node n a2 gv4) (join q gv2 a2)), (In (Node n a2 gv4) (join q gv2 a1)), (In (Node n a2 gv4) (join q gv2 gv4)), (In (Node n a2 gv4) (join gv2 q a2)), (In (Node n a2 gv4) (join gv2 q a1))
(In (Node n a2 gv4) (join gv2 q gv4)), (In (Node n a2 gv4) (join gv2 gv2 a2)), (In (Node n a2 gv4) (join gv2 gv2 a1)), (In (Node n a2 gv4) (join gv2 gv2 gv4)), (In (Node n a2 gv4) (insert x q)), (In (Node n a2 gv4) (insert x gv2)), (In (Node n a2 gv4) (insert n q)), (In (Node n a2 gv4) (insert n gv2)), (In (Node n a2 gv4) (carry q a2)), (In (Node n a2 gv4) (carry q a1))
(In (Node n a2 gv4) (carry q gv4)), (In (Node n a2 gv4) (carry gv2 a2)), (In (Node n a2 gv4) (carry gv2 a1)), (In (Node n a2 gv4) (carry gv2 gv4)), (In (Node n a2 gv4) (q ++ q)), (In (Node n a2 gv4) (q ++ gv2)), (In (Node n a2 gv4) (gv2 ++ q)), (In (Node n a2 gv4) (gv2 ++ gv2)), (In (Node n a1 a2) q), (In (Node n a1 a2) gv2)
(In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv2)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv2)), (In (Node n a1 a2) (gv4 :: q)), (In (Node n a1 a2) (gv4 :: gv2)), (In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (merge q gv2)), (In (Node n a1 a2) (merge gv2 q)), (In (Node n a1 a2) (merge gv2 gv2))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv4)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q q gv4)), (In (Node n a1 a2) (join q gv2 a2)), (In (Node n a1 a2) (join q gv2 a1)), (In (Node n a1 a2) (join q gv2 gv4)), (In (Node n a1 a2) (join gv2 q a2))
(In (Node n a1 a2) (join gv2 q a1)), (In (Node n a1 a2) (join gv2 q gv4)), (In (Node n a1 a2) (join gv2 gv2 a2)), (In (Node n a1 a2) (join gv2 gv2 a1)), (In (Node n a1 a2) (join gv2 gv2 gv4)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert x gv2)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv2)), (In (Node n a1 a2) (carry q a2))
(In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry q gv4)), (In (Node n a1 a2) (carry gv2 a2)), (In (Node n a1 a2) (carry gv2 a1)), (In (Node n a1 a2) (carry gv2 gv4)), (In (Node n a1 a2) (q ++ q)), (In (Node n a1 a2) (q ++ gv2)), (In (Node n a1 a2) (gv2 ++ q)), (In (Node n a1 a2) (gv2 ++ gv2)), (In (Node n a1 a1) q)
(In (Node n a1 a1) gv2), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a2 :: gv2)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (a1 :: gv2)), (In (Node n a1 a1) (gv4 :: q)), (In (Node n a1 a1) (gv4 :: gv2)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (merge q gv2)), (In (Node n a1 a1) (merge gv2 q))
(In (Node n a1 a1) (merge gv2 gv2)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv4)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q q gv4)), (In (Node n a1 a1) (join q gv2 a2)), (In (Node n a1 a1) (join q gv2 a1)), (In (Node n a1 a1) (join q gv2 gv4))
(In (Node n a1 a1) (join gv2 q a2)), (In (Node n a1 a1) (join gv2 q a1)), (In (Node n a1 a1) (join gv2 q gv4)), (In (Node n a1 a1) (join gv2 gv2 a2)), (In (Node n a1 a1) (join gv2 gv2 a1)), (In (Node n a1 a1) (join gv2 gv2 gv4)), (In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert x gv2)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv2))
(In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry q gv4)), (In (Node n a1 a1) (carry gv2 a2)), (In (Node n a1 a1) (carry gv2 a1)), (In (Node n a1 a1) (carry gv2 gv4)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv2)), (In (Node n a1 a1) (gv2 ++ q)), (In (Node n a1 a1) (gv2 ++ gv2))
(In (Node n a1 gv4) q), (In (Node n a1 gv4) gv2), (In (Node n a1 gv4) (a2 :: q)), (In (Node n a1 gv4) (a2 :: gv2)), (In (Node n a1 gv4) (a1 :: q)), (In (Node n a1 gv4) (a1 :: gv2)), (In (Node n a1 gv4) (gv4 :: q)), (In (Node n a1 gv4) (gv4 :: gv2)), (In (Node n a1 gv4) (merge q q)), (In (Node n a1 gv4) (merge q gv2))
(In (Node n a1 gv4) (merge gv2 q)), (In (Node n a1 gv4) (merge gv2 gv2)), (In (Node n a1 gv4) (heap_delete_max a2)), (In (Node n a1 gv4) (heap_delete_max a1)), (In (Node n a1 gv4) (heap_delete_max gv4)), (In (Node n a1 gv4) (join q q a2)), (In (Node n a1 gv4) (join q q a1)), (In (Node n a1 gv4) (join q q gv4)), (In (Node n a1 gv4) (join q gv2 a2)), (In (Node n a1 gv4) (join q gv2 a1))
(In (Node n a1 gv4) (join q gv2 gv4)), (In (Node n a1 gv4) (join gv2 q a2)), (In (Node n a1 gv4) (join gv2 q a1)), (In (Node n a1 gv4) (join gv2 q gv4)), (In (Node n a1 gv4) (join gv2 gv2 a2)), (In (Node n a1 gv4) (join gv2 gv2 a1)), (In (Node n a1 gv4) (join gv2 gv2 gv4)), (In (Node n a1 gv4) (insert x q)), (In (Node n a1 gv4) (insert x gv2)), (In (Node n a1 gv4) (insert n q))
(In (Node n a1 gv4) (insert n gv2)), (In (Node n a1 gv4) (carry q a2)), (In (Node n a1 gv4) (carry q a1)), (In (Node n a1 gv4) (carry q gv4)), (In (Node n a1 gv4) (carry gv2 a2)), (In (Node n a1 gv4) (carry gv2 a1)), (In (Node n a1 gv4) (carry gv2 gv4)), (In (Node n a1 gv4) (q ++ q)), (In (Node n a1 gv4) (q ++ gv2)), (In (Node n a1 gv4) (gv2 ++ q))
(In (Node n a1 gv4) (gv2 ++ gv2)), (In (Node n gv4 a2) q), (In (Node n gv4 a2) gv2), (In (Node n gv4 a2) (a2 :: q)), (In (Node n gv4 a2) (a2 :: gv2)), (In (Node n gv4 a2) (a1 :: q)), (In (Node n gv4 a2) (a1 :: gv2)), (In (Node n gv4 a2) (gv4 :: q)), (In (Node n gv4 a2) (gv4 :: gv2)), (In (Node n gv4 a2) (merge q q))
(In (Node n gv4 a2) (merge q gv2)), (In (Node n gv4 a2) (merge gv2 q)), (In (Node n gv4 a2) (merge gv2 gv2)), (In (Node n gv4 a2) (heap_delete_max a2)), (In (Node n gv4 a2) (heap_delete_max a1)), (In (Node n gv4 a2) (heap_delete_max gv4)), (In (Node n gv4 a2) (join q q a2)), (In (Node n gv4 a2) (join q q a1)), (In (Node n gv4 a2) (join q q gv4)), (In (Node n gv4 a2) (join q gv2 a2))
(In (Node n gv4 a2) (join q gv2 a1)), (In (Node n gv4 a2) (join q gv2 gv4)), (In (Node n gv4 a2) (join gv2 q a2)), (In (Node n gv4 a2) (join gv2 q a1)), (In (Node n gv4 a2) (join gv2 q gv4)), (In (Node n gv4 a2) (join gv2 gv2 a2)), (In (Node n gv4 a2) (join gv2 gv2 a1)), (In (Node n gv4 a2) (join gv2 gv2 gv4)), (In (Node n gv4 a2) (insert x q)), (In (Node n gv4 a2) (insert x gv2))
(In (Node n gv4 a2) (insert n q)), (In (Node n gv4 a2) (insert n gv2)), (In (Node n gv4 a2) (carry q a2)), (In (Node n gv4 a2) (carry q a1)), (In (Node n gv4 a2) (carry q gv4)), (In (Node n gv4 a2) (carry gv2 a2)), (In (Node n gv4 a2) (carry gv2 a1)), (In (Node n gv4 a2) (carry gv2 gv4)), (In (Node n gv4 a2) (q ++ q)), (In (Node n gv4 a2) (q ++ gv2))
(In (Node n gv4 a2) (gv2 ++ q)), (In (Node n gv4 a2) (gv2 ++ gv2)), (In (Node n gv4 a1) q), (In (Node n gv4 a1) gv2), (In (Node n gv4 a1) (a2 :: q)), (In (Node n gv4 a1) (a2 :: gv2)), (In (Node n gv4 a1) (a1 :: q)), (In (Node n gv4 a1) (a1 :: gv2)), (In (Node n gv4 a1) (gv4 :: q)), (In (Node n gv4 a1) (gv4 :: gv2))
(In (Node n gv4 a1) (merge q q)), (In (Node n gv4 a1) (merge q gv2)), (In (Node n gv4 a1) (merge gv2 q)), (In (Node n gv4 a1) (merge gv2 gv2)), (In (Node n gv4 a1) (heap_delete_max a2)), (In (Node n gv4 a1) (heap_delete_max a1)), (In (Node n gv4 a1) (heap_delete_max gv4)), (In (Node n gv4 a1) (join q q a2)), (In (Node n gv4 a1) (join q q a1)), (In (Node n gv4 a1) (join q q gv4))
(In (Node n gv4 a1) (join q gv2 a2)), (In (Node n gv4 a1) (join q gv2 a1)), (In (Node n gv4 a1) (join q gv2 gv4)), (In (Node n gv4 a1) (join gv2 q a2)), (In (Node n gv4 a1) (join gv2 q a1)), (In (Node n gv4 a1) (join gv2 q gv4)), (In (Node n gv4 a1) (join gv2 gv2 a2)), (In (Node n gv4 a1) (join gv2 gv2 a1)), (In (Node n gv4 a1) (join gv2 gv2 gv4)), (In (Node n gv4 a1) (insert x q))
(In (Node n gv4 a1) (insert x gv2)), (In (Node n gv4 a1) (insert n q)), (In (Node n gv4 a1) (insert n gv2)), (In (Node n gv4 a1) (carry q a2)), (In (Node n gv4 a1) (carry q a1)), (In (Node n gv4 a1) (carry q gv4)), (In (Node n gv4 a1) (carry gv2 a2)), (In (Node n gv4 a1) (carry gv2 a1)), (In (Node n gv4 a1) (carry gv2 gv4)), (In (Node n gv4 a1) (q ++ q))
(In (Node n gv4 a1) (q ++ gv2)), (In (Node n gv4 a1) (gv2 ++ q)), (In (Node n gv4 a1) (gv2 ++ gv2)), (In (Node n gv4 gv4) q), (In (Node n gv4 gv4) gv2), (In (Node n gv4 gv4) (a2 :: q)), (In (Node n gv4 gv4) (a2 :: gv2)), (In (Node n gv4 gv4) (a1 :: q)), (In (Node n gv4 gv4) (a1 :: gv2)), (In (Node n gv4 gv4) (gv4 :: q))
(In (Node n gv4 gv4) (gv4 :: gv2)), (In (Node n gv4 gv4) (merge q q)), (In (Node n gv4 gv4) (merge q gv2)), (In (Node n gv4 gv4) (merge gv2 q)), (In (Node n gv4 gv4) (merge gv2 gv2)), (In (Node n gv4 gv4) (heap_delete_max a2)), (In (Node n gv4 gv4) (heap_delete_max a1)), (In (Node n gv4 gv4) (heap_delete_max gv4)), (In (Node n gv4 gv4) (join q q a2)), (In (Node n gv4 gv4) (join q q a1))
(In (Node n gv4 gv4) (join q q gv4)), (In (Node n gv4 gv4) (join q gv2 a2)), (In (Node n gv4 gv4) (join q gv2 a1)), (In (Node n gv4 gv4) (join q gv2 gv4)), (In (Node n gv4 gv4) (join gv2 q a2)), (In (Node n gv4 gv4) (join gv2 q a1)), (In (Node n gv4 gv4) (join gv2 q gv4)), (In (Node n gv4 gv4) (join gv2 gv2 a2)), (In (Node n gv4 gv4) (join gv2 gv2 a1)), (In (Node n gv4 gv4) (join gv2 gv2 gv4))
(In (Node n gv4 gv4) (insert x q)), (In (Node n gv4 gv4) (insert x gv2)), (In (Node n gv4 gv4) (insert n q)), (In (Node n gv4 gv4) (insert n gv2)), (In (Node n gv4 gv4) (carry q a2)), (In (Node n gv4 gv4) (carry q a1)), (In (Node n gv4 gv4) (carry q gv4)), (In (Node n gv4 gv4) (carry gv2 a2)), (In (Node n gv4 gv4) (carry gv2 a1)), (In (Node n gv4 gv4) (carry gv2 gv4))
(In (Node n gv4 gv4) (q ++ q)), (In (Node n gv4 gv4) (q ++ gv2)), (In (Node n gv4 gv4) (gv2 ++ q)), (In (Node n gv4 gv4) (gv2 ++ gv2)), (In (smash a2 a2) q), (In (smash a2 a2) gv2), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv2)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (a1 :: gv2))
(In (smash a2 a2) (gv4 :: q)), (In (smash a2 a2) (gv4 :: gv2)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (merge q gv2)), (In (smash a2 a2) (merge gv2 q)), (In (smash a2 a2) (merge gv2 gv2)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max gv4)), (In (smash a2 a2) (join q q a2))
(In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q q gv4)), (In (smash a2 a2) (join q gv2 a2)), (In (smash a2 a2) (join q gv2 a1)), (In (smash a2 a2) (join q gv2 gv4)), (In (smash a2 a2) (join gv2 q a2)), (In (smash a2 a2) (join gv2 q a1)), (In (smash a2 a2) (join gv2 q gv4)), (In (smash a2 a2) (join gv2 gv2 a2)), (In (smash a2 a2) (join gv2 gv2 a1))
(In (smash a2 a2) (join gv2 gv2 gv4)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv2)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv2)), (In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry q gv4)), (In (smash a2 a2) (carry gv2 a2)), (In (smash a2 a2) (carry gv2 a1))
(In (smash a2 a2) (carry gv2 gv4)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv2)), (In (smash a2 a2) (gv2 ++ q)), (In (smash a2 a2) (gv2 ++ gv2)), (In (smash a2 a1) q), (In (smash a2 a1) gv2), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a2 :: gv2)), (In (smash a2 a1) (a1 :: q))
(In (smash a2 a1) (a1 :: gv2)), (In (smash a2 a1) (gv4 :: q)), (In (smash a2 a1) (gv4 :: gv2)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv2)), (In (smash a2 a1) (merge gv2 q)), (In (smash a2 a1) (merge gv2 gv2)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv4))
(In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q q gv4)), (In (smash a2 a1) (join q gv2 a2)), (In (smash a2 a1) (join q gv2 a1)), (In (smash a2 a1) (join q gv2 gv4)), (In (smash a2 a1) (join gv2 q a2)), (In (smash a2 a1) (join gv2 q a1)), (In (smash a2 a1) (join gv2 q gv4)), (In (smash a2 a1) (join gv2 gv2 a2))
(In (smash a2 a1) (join gv2 gv2 a1)), (In (smash a2 a1) (join gv2 gv2 gv4)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert x gv2)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (insert n gv2)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry q gv4)), (In (smash a2 a1) (carry gv2 a2))
(In (smash a2 a1) (carry gv2 a1)), (In (smash a2 a1) (carry gv2 gv4)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv2)), (In (smash a2 a1) (gv2 ++ q)), (In (smash a2 a1) (gv2 ++ gv2)), (In (smash a2 gv4) q), (In (smash a2 gv4) gv2), (In (smash a2 gv4) (a2 :: q)), (In (smash a2 gv4) (a2 :: gv2))
(In (smash a2 gv4) (a1 :: q)), (In (smash a2 gv4) (a1 :: gv2)), (In (smash a2 gv4) (gv4 :: q)), (In (smash a2 gv4) (gv4 :: gv2)), (In (smash a2 gv4) (merge q q)), (In (smash a2 gv4) (merge q gv2)), (In (smash a2 gv4) (merge gv2 q)), (In (smash a2 gv4) (merge gv2 gv2)), (In (smash a2 gv4) (heap_delete_max a2)), (In (smash a2 gv4) (heap_delete_max a1))
(In (smash a2 gv4) (heap_delete_max gv4)), (In (smash a2 gv4) (join q q a2)), (In (smash a2 gv4) (join q q a1)), (In (smash a2 gv4) (join q q gv4)), (In (smash a2 gv4) (join q gv2 a2)), (In (smash a2 gv4) (join q gv2 a1)), (In (smash a2 gv4) (join q gv2 gv4)), (In (smash a2 gv4) (join gv2 q a2)), (In (smash a2 gv4) (join gv2 q a1)), (In (smash a2 gv4) (join gv2 q gv4))
(In (smash a2 gv4) (join gv2 gv2 a2)), (In (smash a2 gv4) (join gv2 gv2 a1)), (In (smash a2 gv4) (join gv2 gv2 gv4)), (In (smash a2 gv4) (insert x q)), (In (smash a2 gv4) (insert x gv2)), (In (smash a2 gv4) (insert n q)), (In (smash a2 gv4) (insert n gv2)), (In (smash a2 gv4) (carry q a2)), (In (smash a2 gv4) (carry q a1)), (In (smash a2 gv4) (carry q gv4))
(In (smash a2 gv4) (carry gv2 a2)), (In (smash a2 gv4) (carry gv2 a1)), (In (smash a2 gv4) (carry gv2 gv4)), (In (smash a2 gv4) (q ++ q)), (In (smash a2 gv4) (q ++ gv2)), (In (smash a2 gv4) (gv2 ++ q)), (In (smash a2 gv4) (gv2 ++ gv2)), (In (smash a1 a2) q), (In (smash a1 a2) gv2), (In (smash a1 a2) (a2 :: q))
(In (smash a1 a2) (a2 :: gv2)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv2)), (In (smash a1 a2) (gv4 :: q)), (In (smash a1 a2) (gv4 :: gv2)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (merge q gv2)), (In (smash a1 a2) (merge gv2 q)), (In (smash a1 a2) (merge gv2 gv2)), (In (smash a1 a2) (heap_delete_max a2))
(In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv4)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q q gv4)), (In (smash a1 a2) (join q gv2 a2)), (In (smash a1 a2) (join q gv2 a1)), (In (smash a1 a2) (join q gv2 gv4)), (In (smash a1 a2) (join gv2 q a2)), (In (smash a1 a2) (join gv2 q a1))
(In (smash a1 a2) (join gv2 q gv4)), (In (smash a1 a2) (join gv2 gv2 a2)), (In (smash a1 a2) (join gv2 gv2 a1)), (In (smash a1 a2) (join gv2 gv2 gv4)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert x gv2)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv2)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1))
(In (smash a1 a2) (carry q gv4)), (In (smash a1 a2) (carry gv2 a2)), (In (smash a1 a2) (carry gv2 a1)), (In (smash a1 a2) (carry gv2 gv4)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv2)), (In (smash a1 a2) (gv2 ++ q)), (In (smash a1 a2) (gv2 ++ gv2)), (In (smash a1 a1) q), (In (smash a1 a1) gv2)
(In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv2)), (In (smash a1 a1) (a1 :: q)), (In (smash a1 a1) (a1 :: gv2)), (In (smash a1 a1) (gv4 :: q)), (In (smash a1 a1) (gv4 :: gv2)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv2)), (In (smash a1 a1) (merge gv2 q)), (In (smash a1 a1) (merge gv2 gv2))
(In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv4)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q q gv4)), (In (smash a1 a1) (join q gv2 a2)), (In (smash a1 a1) (join q gv2 a1)), (In (smash a1 a1) (join q gv2 gv4)), (In (smash a1 a1) (join gv2 q a2))
(In (smash a1 a1) (join gv2 q a1)), (In (smash a1 a1) (join gv2 q gv4)), (In (smash a1 a1) (join gv2 gv2 a2)), (In (smash a1 a1) (join gv2 gv2 a1)), (In (smash a1 a1) (join gv2 gv2 gv4)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert x gv2)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv2)), (In (smash a1 a1) (carry q a2))
(In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry q gv4)), (In (smash a1 a1) (carry gv2 a2)), (In (smash a1 a1) (carry gv2 a1)), (In (smash a1 a1) (carry gv2 gv4)), (In (smash a1 a1) (q ++ q)), (In (smash a1 a1) (q ++ gv2)), (In (smash a1 a1) (gv2 ++ q)), (In (smash a1 a1) (gv2 ++ gv2)), (In (smash a1 gv4) q)
(In (smash a1 gv4) gv2), (In (smash a1 gv4) (a2 :: q)), (In (smash a1 gv4) (a2 :: gv2)), (In (smash a1 gv4) (a1 :: q)), (In (smash a1 gv4) (a1 :: gv2)), (In (smash a1 gv4) (gv4 :: q)), (In (smash a1 gv4) (gv4 :: gv2)), (In (smash a1 gv4) (merge q q)), (In (smash a1 gv4) (merge q gv2)), (In (smash a1 gv4) (merge gv2 q))
(In (smash a1 gv4) (merge gv2 gv2)), (In (smash a1 gv4) (heap_delete_max a2)), (In (smash a1 gv4) (heap_delete_max a1)), (In (smash a1 gv4) (heap_delete_max gv4)), (In (smash a1 gv4) (join q q a2)), (In (smash a1 gv4) (join q q a1)), (In (smash a1 gv4) (join q q gv4)), (In (smash a1 gv4) (join q gv2 a2)), (In (smash a1 gv4) (join q gv2 a1)), (In (smash a1 gv4) (join q gv2 gv4))
(In (smash a1 gv4) (join gv2 q a2)), (In (smash a1 gv4) (join gv2 q a1)), (In (smash a1 gv4) (join gv2 q gv4)), (In (smash a1 gv4) (join gv2 gv2 a2)), (In (smash a1 gv4) (join gv2 gv2 a1)), (In (smash a1 gv4) (join gv2 gv2 gv4)), (In (smash a1 gv4) (insert x q)), (In (smash a1 gv4) (insert x gv2)), (In (smash a1 gv4) (insert n q)), (In (smash a1 gv4) (insert n gv2))
(In (smash a1 gv4) (carry q a2)), (In (smash a1 gv4) (carry q a1)), (In (smash a1 gv4) (carry q gv4)), (In (smash a1 gv4) (carry gv2 a2)), (In (smash a1 gv4) (carry gv2 a1)), (In (smash a1 gv4) (carry gv2 gv4)), (In (smash a1 gv4) (q ++ q)), (In (smash a1 gv4) (q ++ gv2)), (In (smash a1 gv4) (gv2 ++ q)), (In (smash a1 gv4) (gv2 ++ gv2))
(In (smash gv4 a2) q), (In (smash gv4 a2) gv2), (In (smash gv4 a2) (a2 :: q)), (In (smash gv4 a2) (a2 :: gv2)), (In (smash gv4 a2) (a1 :: q)), (In (smash gv4 a2) (a1 :: gv2)), (In (smash gv4 a2) (gv4 :: q)), (In (smash gv4 a2) (gv4 :: gv2)), (In (smash gv4 a2) (merge q q)), (In (smash gv4 a2) (merge q gv2))
(In (smash gv4 a2) (merge gv2 q)), (In (smash gv4 a2) (merge gv2 gv2)), (In (smash gv4 a2) (heap_delete_max a2)), (In (smash gv4 a2) (heap_delete_max a1)), (In (smash gv4 a2) (heap_delete_max gv4)), (In (smash gv4 a2) (join q q a2)), (In (smash gv4 a2) (join q q a1)), (In (smash gv4 a2) (join q q gv4)), (In (smash gv4 a2) (join q gv2 a2)), (In (smash gv4 a2) (join q gv2 a1))
(In (smash gv4 a2) (join q gv2 gv4)), (In (smash gv4 a2) (join gv2 q a2)), (In (smash gv4 a2) (join gv2 q a1)), (In (smash gv4 a2) (join gv2 q gv4)), (In (smash gv4 a2) (join gv2 gv2 a2)), (In (smash gv4 a2) (join gv2 gv2 a1)), (In (smash gv4 a2) (join gv2 gv2 gv4)), (In (smash gv4 a2) (insert x q)), (In (smash gv4 a2) (insert x gv2)), (In (smash gv4 a2) (insert n q))
(In (smash gv4 a2) (insert n gv2)), (In (smash gv4 a2) (carry q a2)), (In (smash gv4 a2) (carry q a1)), (In (smash gv4 a2) (carry q gv4)), (In (smash gv4 a2) (carry gv2 a2)), (In (smash gv4 a2) (carry gv2 a1)), (In (smash gv4 a2) (carry gv2 gv4)), (In (smash gv4 a2) (q ++ q)), (In (smash gv4 a2) (q ++ gv2)), (In (smash gv4 a2) (gv2 ++ q))
(In (smash gv4 a2) (gv2 ++ gv2)), (In (smash gv4 a1) q), (In (smash gv4 a1) gv2), (In (smash gv4 a1) (a2 :: q)), (In (smash gv4 a1) (a2 :: gv2)), (In (smash gv4 a1) (a1 :: q)), (In (smash gv4 a1) (a1 :: gv2)), (In (smash gv4 a1) (gv4 :: q)), (In (smash gv4 a1) (gv4 :: gv2)), (In (smash gv4 a1) (merge q q))
(In (smash gv4 a1) (merge q gv2)), (In (smash gv4 a1) (merge gv2 q)), (In (smash gv4 a1) (merge gv2 gv2)), (In (smash gv4 a1) (heap_delete_max a2)), (In (smash gv4 a1) (heap_delete_max a1)), (In (smash gv4 a1) (heap_delete_max gv4)), (In (smash gv4 a1) (join q q a2)), (In (smash gv4 a1) (join q q a1)), (In (smash gv4 a1) (join q q gv4)), (In (smash gv4 a1) (join q gv2 a2))
(In (smash gv4 a1) (join q gv2 a1)), (In (smash gv4 a1) (join q gv2 gv4)), (In (smash gv4 a1) (join gv2 q a2)), (In (smash gv4 a1) (join gv2 q a1)), (In (smash gv4 a1) (join gv2 q gv4)), (In (smash gv4 a1) (join gv2 gv2 a2)), (In (smash gv4 a1) (join gv2 gv2 a1)), (In (smash gv4 a1) (join gv2 gv2 gv4)), (In (smash gv4 a1) (insert x q)), (In (smash gv4 a1) (insert x gv2))
(In (smash gv4 a1) (insert n q)), (In (smash gv4 a1) (insert n gv2)), (In (smash gv4 a1) (carry q a2)), (In (smash gv4 a1) (carry q a1)), (In (smash gv4 a1) (carry q gv4)), (In (smash gv4 a1) (carry gv2 a2)), (In (smash gv4 a1) (carry gv2 a1)), (In (smash gv4 a1) (carry gv2 gv4)), (In (smash gv4 a1) (q ++ q)), (In (smash gv4 a1) (q ++ gv2))
(In (smash gv4 a1) (gv2 ++ q)), (In (smash gv4 a1) (gv2 ++ gv2)), (In (smash gv4 gv4) q), (In (smash gv4 gv4) gv2), (In (smash gv4 gv4) (a2 :: q)), (In (smash gv4 gv4) (a2 :: gv2)), (In (smash gv4 gv4) (a1 :: q)), (In (smash gv4 gv4) (a1 :: gv2)), (In (smash gv4 gv4) (gv4 :: q)), (In (smash gv4 gv4) (gv4 :: gv2))
(In (smash gv4 gv4) (merge q q)), (In (smash gv4 gv4) (merge q gv2)), (In (smash gv4 gv4) (merge gv2 q)), (In (smash gv4 gv4) (merge gv2 gv2)), (In (smash gv4 gv4) (heap_delete_max a2)), (In (smash gv4 gv4) (heap_delete_max a1)), (In (smash gv4 gv4) (heap_delete_max gv4)), (In (smash gv4 gv4) (join q q a2)), (In (smash gv4 gv4) (join q q a1)), (In (smash gv4 gv4) (join q q gv4))
(In (smash gv4 gv4) (join q gv2 a2)), (In (smash gv4 gv4) (join q gv2 a1)), (In (smash gv4 gv4) (join q gv2 gv4)), (In (smash gv4 gv4) (join gv2 q a2)), (In (smash gv4 gv4) (join gv2 q a1)), (In (smash gv4 gv4) (join gv2 q gv4)), (In (smash gv4 gv4) (join gv2 gv2 a2)), (In (smash gv4 gv4) (join gv2 gv2 a1)), (In (smash gv4 gv4) (join gv2 gv2 gv4)), (In (smash gv4 gv4) (insert x q))
(In (smash gv4 gv4) (insert x gv2)), (In (smash gv4 gv4) (insert n q)), (In (smash gv4 gv4) (insert n gv2)), (In (smash gv4 gv4) (carry q a2)), (In (smash gv4 gv4) (carry q a1)), (In (smash gv4 gv4) (carry q gv4)), (In (smash gv4 gv4) (carry gv2 a2)), (In (smash gv4 gv4) (carry gv2 a1)), (In (smash gv4 gv4) (carry gv2 gv4)), (In (smash gv4 gv4) (q ++ q))
(In (smash gv4 gv4) (q ++ gv2)), (In (smash gv4 gv4) (gv2 ++ q)), (In (smash gv4 gv4) (gv2 ++ gv2)), (In Leaf q), (In Leaf gv2), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv2)), (In Leaf (a1 :: q)), (In Leaf (a1 :: gv2)), (In Leaf (gv4 :: q))
(In Leaf (gv4 :: gv2)), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q)), (In Leaf (merge gv2 gv2)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max gv4)), (In Leaf (join q q a2)), (In Leaf (join q q a1))
(In Leaf (join q q gv4)), (In Leaf (join q gv2 a2)), (In Leaf (join q gv2 a1)), (In Leaf (join q gv2 gv4)), (In Leaf (join gv2 q a2)), (In Leaf (join gv2 q a1)), (In Leaf (join gv2 q gv4)), (In Leaf (join gv2 gv2 a2)), (In Leaf (join gv2 gv2 a1)), (In Leaf (join gv2 gv2 gv4))
(In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (insert n q)), (In Leaf (insert n gv2)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry q gv4)), (In Leaf (carry gv2 a2)), (In Leaf (carry gv2 a1)), (In Leaf (carry gv2 gv4))
(In Leaf (q ++ q)), (In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (x < find_max' x q), (x < find_max' x gv2), (x < find_max' n q), (x < find_max' n gv2), (x < length q), (x < length gv2)
(n < find_max' x q), (n < find_max' x gv2), (n < find_max' n q), (n < find_max' n gv2), (n < length q), (n < length gv2), (find_max' x q < x), (find_max' x q < n), (find_max' x q < find_max' x gv2), (find_max' x q < find_max' n q)
(find_max' x q < find_max' n gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < x), (find_max' x gv2 < n), (find_max' x gv2 < find_max' x q), (find_max' x gv2 < find_max' n q), (find_max' x gv2 < find_max' n gv2), (find_max' x gv2 < length q), (find_max' x gv2 < length gv2)
(find_max' n q < x), (find_max' n q < n), (find_max' n q < find_max' x q), (find_max' n q < find_max' x gv2), (find_max' n q < find_max' n gv2), (find_max' n q < length q), (find_max' n q < length gv2), (find_max' n gv2 < x), (find_max' n gv2 < n), (find_max' n gv2 < find_max' x q)
(find_max' n gv2 < find_max' x gv2), (find_max' n gv2 < find_max' n q), (find_max' n gv2 < length q), (find_max' n gv2 < length gv2), (length q < x), (length q < n), (length q < find_max' x q), (length q < find_max' x gv2), (length q < find_max' n q), (length q < find_max' n gv2)
(length q < length gv2), (length gv2 < x), (length gv2 < n), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2), (length gv2 < find_max' n q), (length gv2 < find_max' n gv2), (length gv2 < length q), (x <= find_max' x q), (x <= find_max' x gv2)
(x <= find_max' n q), (x <= find_max' n gv2), (x <= length q), (x <= length gv2), (n <= find_max' x q), (n <= find_max' x gv2), (n <= find_max' n q), (n <= find_max' n gv2), (n <= length q), (n <= length gv2)
(find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= find_max' x gv2), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv2), (find_max' x q <= length q), (find_max' x q <= length gv2), (find_max' x gv2 <= x), (find_max' x gv2 <= n), (find_max' x gv2 <= find_max' x q)
(find_max' x gv2 <= find_max' n q), (find_max' x gv2 <= find_max' n gv2), (find_max' x gv2 <= length q), (find_max' x gv2 <= length gv2), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv2), (find_max' n q <= find_max' n gv2), (find_max' n q <= length q)
(find_max' n q <= length gv2), (find_max' n gv2 <= x), (find_max' n gv2 <= n), (find_max' n gv2 <= find_max' x q), (find_max' n gv2 <= find_max' x gv2), (find_max' n gv2 <= find_max' n q), (find_max' n gv2 <= length q), (find_max' n gv2 <= length gv2), (length q <= x), (length q <= n)
(length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= find_max' n q), (length q <= find_max' n gv2), (length q <= length gv2), (length gv2 <= x), (length gv2 <= n), (length gv2 <= find_max' x q), (length gv2 <= find_max' x gv2), (length gv2 <= find_max' n q)
(length gv2 <= find_max' n gv2), (length gv2 <= length q), (~ priq q), (~ priq gv2), (~ priqq x q), (~ priqq x gv2), (~ priqq n q), (~ priqq n gv2), (~ pow2heap x a2), (~ pow2heap x a1)
(~ pow2heap x gv4), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n gv4), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x x gv4), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x n gv4)
(~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n x gv4), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n gv4), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2)
(~ In a2 q), (~ In a2 gv2), (~ In a1 q), (~ In a1 gv2), (~ In gv4 q), (~ In gv4 gv2), (~ x < x), (~ x < n), (~ n < x), (~ n < n)
(~ x <= x), (~ x <= n), (~ n <= x), (~ n <= n), (x <> x), (x <> n), (n <> x), (n <> n), (a2 <> a2), (a2 <> a1)
(a2 <> gv4), (a1 <> a2), (a1 <> a1), (a1 <> gv4), (gv4 <> a2), (gv4 <> a1), (gv4 <> gv4), (q <> q), (q <> gv2), (gv2 <> q)
(gv2 <> gv2), (None = Some q), (None = Some gv2), (a2 :: q = q), (a2 :: q = gv2), (a2 :: q = merge q q), (a2 :: q = merge q gv2), (a2 :: q = merge gv2 q), (a2 :: q = merge gv2 gv2), (a2 :: q = heap_delete_max a2)
(a2 :: q = heap_delete_max a1), (a2 :: q = heap_delete_max gv4), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q q gv4), (a2 :: q = join q gv2 a2), (a2 :: q = join q gv2 a1), (a2 :: q = join q gv2 gv4), (a2 :: q = join gv2 q a2), (a2 :: q = join gv2 q a1)
(a2 :: q = join gv2 q gv4), (a2 :: q = join gv2 gv2 a2), (a2 :: q = join gv2 gv2 a1), (a2 :: q = join gv2 gv2 gv4), (a2 :: q = insert x q), (a2 :: q = insert x gv2), (a2 :: q = insert n q), (a2 :: q = insert n gv2), (a2 :: q = carry q a2), (a2 :: q = carry q a1)
(a2 :: q = carry q gv4), (a2 :: q = carry gv2 a2), (a2 :: q = carry gv2 a1), (a2 :: q = carry gv2 gv4), (a2 :: q = q ++ q), (a2 :: q = q ++ gv2), (a2 :: q = gv2 ++ q), (a2 :: q = gv2 ++ gv2), (a2 :: q = []), (a2 :: gv2 = q)
(a2 :: gv2 = gv2), (a2 :: gv2 = merge q q), (a2 :: gv2 = merge q gv2), (a2 :: gv2 = merge gv2 q), (a2 :: gv2 = merge gv2 gv2), (a2 :: gv2 = heap_delete_max a2), (a2 :: gv2 = heap_delete_max a1), (a2 :: gv2 = heap_delete_max gv4), (a2 :: gv2 = join q q a2), (a2 :: gv2 = join q q a1)
(a2 :: gv2 = join q q gv4), (a2 :: gv2 = join q gv2 a2), (a2 :: gv2 = join q gv2 a1), (a2 :: gv2 = join q gv2 gv4), (a2 :: gv2 = join gv2 q a2), (a2 :: gv2 = join gv2 q a1), (a2 :: gv2 = join gv2 q gv4), (a2 :: gv2 = join gv2 gv2 a2), (a2 :: gv2 = join gv2 gv2 a1), (a2 :: gv2 = join gv2 gv2 gv4)
(a2 :: gv2 = insert x q), (a2 :: gv2 = insert x gv2), (a2 :: gv2 = insert n q), (a2 :: gv2 = insert n gv2), (a2 :: gv2 = carry q a2), (a2 :: gv2 = carry q a1), (a2 :: gv2 = carry q gv4), (a2 :: gv2 = carry gv2 a2), (a2 :: gv2 = carry gv2 a1), (a2 :: gv2 = carry gv2 gv4)
(a2 :: gv2 = q ++ q), (a2 :: gv2 = q ++ gv2), (a2 :: gv2 = gv2 ++ q), (a2 :: gv2 = gv2 ++ gv2), (a2 :: gv2 = []), (a1 :: q = q), (a1 :: q = gv2), (a1 :: q = merge q q), (a1 :: q = merge q gv2), (a1 :: q = merge gv2 q)
(a1 :: q = merge gv2 gv2), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = heap_delete_max gv4), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q q gv4), (a1 :: q = join q gv2 a2), (a1 :: q = join q gv2 a1), (a1 :: q = join q gv2 gv4)
(a1 :: q = join gv2 q a2), (a1 :: q = join gv2 q a1), (a1 :: q = join gv2 q gv4), (a1 :: q = join gv2 gv2 a2), (a1 :: q = join gv2 gv2 a1), (a1 :: q = join gv2 gv2 gv4), (a1 :: q = insert x q), (a1 :: q = insert x gv2), (a1 :: q = insert n q), (a1 :: q = insert n gv2)
(a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry q gv4), (a1 :: q = carry gv2 a2), (a1 :: q = carry gv2 a1), (a1 :: q = carry gv2 gv4), (a1 :: q = q ++ q), (a1 :: q = q ++ gv2), (a1 :: q = gv2 ++ q), (a1 :: q = gv2 ++ gv2)
(a1 :: q = []), (a1 :: gv2 = q), (a1 :: gv2 = gv2), (a1 :: gv2 = merge q q), (a1 :: gv2 = merge q gv2), (a1 :: gv2 = merge gv2 q), (a1 :: gv2 = merge gv2 gv2), (a1 :: gv2 = heap_delete_max a2), (a1 :: gv2 = heap_delete_max a1), (a1 :: gv2 = heap_delete_max gv4)
(a1 :: gv2 = join q q a2), (a1 :: gv2 = join q q a1), (a1 :: gv2 = join q q gv4), (a1 :: gv2 = join q gv2 a2), (a1 :: gv2 = join q gv2 a1), (a1 :: gv2 = join q gv2 gv4), (a1 :: gv2 = join gv2 q a2), (a1 :: gv2 = join gv2 q a1), (a1 :: gv2 = join gv2 q gv4), (a1 :: gv2 = join gv2 gv2 a2)
(a1 :: gv2 = join gv2 gv2 a1), (a1 :: gv2 = join gv2 gv2 gv4), (a1 :: gv2 = insert x q), (a1 :: gv2 = insert x gv2), (a1 :: gv2 = insert n q), (a1 :: gv2 = insert n gv2), (a1 :: gv2 = carry q a2), (a1 :: gv2 = carry q a1), (a1 :: gv2 = carry q gv4), (a1 :: gv2 = carry gv2 a2)
(a1 :: gv2 = carry gv2 a1), (a1 :: gv2 = carry gv2 gv4), (a1 :: gv2 = q ++ q), (a1 :: gv2 = q ++ gv2), (a1 :: gv2 = gv2 ++ q), (a1 :: gv2 = gv2 ++ gv2), (a1 :: gv2 = []), (gv4 :: q = q), (gv4 :: q = gv2), (gv4 :: q = merge q q)
(gv4 :: q = merge q gv2), (gv4 :: q = merge gv2 q), (gv4 :: q = merge gv2 gv2), (gv4 :: q = heap_delete_max a2), (gv4 :: q = heap_delete_max a1), (gv4 :: q = heap_delete_max gv4), (gv4 :: q = join q q a2), (gv4 :: q = join q q a1), (gv4 :: q = join q q gv4), (gv4 :: q = join q gv2 a2)
(gv4 :: q = join q gv2 a1), (gv4 :: q = join q gv2 gv4), (gv4 :: q = join gv2 q a2), (gv4 :: q = join gv2 q a1), (gv4 :: q = join gv2 q gv4), (gv4 :: q = join gv2 gv2 a2), (gv4 :: q = join gv2 gv2 a1), (gv4 :: q = join gv2 gv2 gv4), (gv4 :: q = insert x q), (gv4 :: q = insert x gv2)
(gv4 :: q = insert n q), (gv4 :: q = insert n gv2), (gv4 :: q = carry q a2), (gv4 :: q = carry q a1), (gv4 :: q = carry q gv4), (gv4 :: q = carry gv2 a2), (gv4 :: q = carry gv2 a1), (gv4 :: q = carry gv2 gv4), (gv4 :: q = q ++ q), (gv4 :: q = q ++ gv2)
(gv4 :: q = gv2 ++ q), (gv4 :: q = gv2 ++ gv2), (gv4 :: q = []), (gv4 :: gv2 = q), (gv4 :: gv2 = gv2), (gv4 :: gv2 = merge q q), (gv4 :: gv2 = merge q gv2), (gv4 :: gv2 = merge gv2 q), (gv4 :: gv2 = merge gv2 gv2), (gv4 :: gv2 = heap_delete_max a2)
(gv4 :: gv2 = heap_delete_max a1), (gv4 :: gv2 = heap_delete_max gv4), (gv4 :: gv2 = join q q a2), (gv4 :: gv2 = join q q a1), (gv4 :: gv2 = join q q gv4), (gv4 :: gv2 = join q gv2 a2), (gv4 :: gv2 = join q gv2 a1), (gv4 :: gv2 = join q gv2 gv4), (gv4 :: gv2 = join gv2 q a2), (gv4 :: gv2 = join gv2 q a1)
(gv4 :: gv2 = join gv2 q gv4), (gv4 :: gv2 = join gv2 gv2 a2), (gv4 :: gv2 = join gv2 gv2 a1), (gv4 :: gv2 = join gv2 gv2 gv4), (gv4 :: gv2 = insert x q), (gv4 :: gv2 = insert x gv2), (gv4 :: gv2 = insert n q), (gv4 :: gv2 = insert n gv2), (gv4 :: gv2 = carry q a2), (gv4 :: gv2 = carry q a1)
(gv4 :: gv2 = carry q gv4), (gv4 :: gv2 = carry gv2 a2), (gv4 :: gv2 = carry gv2 a1), (gv4 :: gv2 = carry gv2 gv4), (gv4 :: gv2 = q ++ q), (gv4 :: gv2 = q ++ gv2), (gv4 :: gv2 = gv2 ++ q), (gv4 :: gv2 = gv2 ++ gv2), (gv4 :: gv2 = []), (merge q q = q)
(merge q q = gv2), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = heap_delete_max gv4), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q q gv4), (merge q q = join q gv2 a2), (merge q q = join q gv2 a1), (merge q q = join q gv2 gv4)
(merge q q = join gv2 q a2), (merge q q = join gv2 q a1), (merge q q = join gv2 q gv4), (merge q q = join gv2 gv2 a2), (merge q q = join gv2 gv2 a1), (merge q q = join gv2 gv2 gv4), (merge q q = insert x q), (merge q q = insert x gv2), (merge q q = insert n q), (merge q q = insert n gv2)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry q gv4), (merge q q = carry gv2 a2), (merge q q = carry gv2 a1), (merge q q = carry gv2 gv4), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2)
(merge q gv2 = q), (merge q gv2 = gv2), (merge q gv2 = heap_delete_max a2), (merge q gv2 = heap_delete_max a1), (merge q gv2 = heap_delete_max gv4), (merge q gv2 = join q q a2), (merge q gv2 = join q q a1), (merge q gv2 = join q q gv4), (merge q gv2 = join q gv2 a2), (merge q gv2 = join q gv2 a1)
(merge q gv2 = join q gv2 gv4), (merge q gv2 = join gv2 q a2), (merge q gv2 = join gv2 q a1), (merge q gv2 = join gv2 q gv4), (merge q gv2 = join gv2 gv2 a2), (merge q gv2 = join gv2 gv2 a1), (merge q gv2 = join gv2 gv2 gv4), (merge q gv2 = insert x q), (merge q gv2 = insert x gv2), (merge q gv2 = insert n q)
(merge q gv2 = insert n gv2), (merge q gv2 = carry q a2), (merge q gv2 = carry q a1), (merge q gv2 = carry q gv4), (merge q gv2 = carry gv2 a2), (merge q gv2 = carry gv2 a1), (merge q gv2 = carry gv2 gv4), (merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q)
(merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = heap_delete_max a2), (merge gv2 q = heap_delete_max a1), (merge gv2 q = heap_delete_max gv4), (merge gv2 q = join q q a2), (merge gv2 q = join q q a1), (merge gv2 q = join q q gv4), (merge gv2 q = join q gv2 a2)
(merge gv2 q = join q gv2 a1), (merge gv2 q = join q gv2 gv4), (merge gv2 q = join gv2 q a2), (merge gv2 q = join gv2 q a1), (merge gv2 q = join gv2 q gv4), (merge gv2 q = join gv2 gv2 a2), (merge gv2 q = join gv2 gv2 a1), (merge gv2 q = join gv2 gv2 gv4), (merge gv2 q = insert x q), (merge gv2 q = insert x gv2)
(merge gv2 q = insert n q), (merge gv2 q = insert n gv2), (merge gv2 q = carry q a2), (merge gv2 q = carry q a1), (merge gv2 q = carry q gv4), (merge gv2 q = carry gv2 a2), (merge gv2 q = carry gv2 a1), (merge gv2 q = carry gv2 gv4), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2)
(merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2), (merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = heap_delete_max a2), (merge gv2 gv2 = heap_delete_max a1), (merge gv2 gv2 = heap_delete_max gv4), (merge gv2 gv2 = join q q a2), (merge gv2 gv2 = join q q a1), (merge gv2 gv2 = join q q gv4)
(merge gv2 gv2 = join q gv2 a2), (merge gv2 gv2 = join q gv2 a1), (merge gv2 gv2 = join q gv2 gv4), (merge gv2 gv2 = join gv2 q a2), (merge gv2 gv2 = join gv2 q a1), (merge gv2 gv2 = join gv2 q gv4), (merge gv2 gv2 = join gv2 gv2 a2), (merge gv2 gv2 = join gv2 gv2 a1), (merge gv2 gv2 = join gv2 gv2 gv4), (merge gv2 gv2 = insert x q)
(merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = insert n q), (merge gv2 gv2 = insert n gv2), (merge gv2 gv2 = carry q a2), (merge gv2 gv2 = carry q a1), (merge gv2 gv2 = carry q gv4), (merge gv2 gv2 = carry gv2 a2), (merge gv2 gv2 = carry gv2 a1), (merge gv2 gv2 = carry gv2 gv4), (merge gv2 gv2 = q ++ q)
(merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q), (merge gv2 gv2 = gv2 ++ gv2), (heap_delete_max a2 = q), (heap_delete_max a2 = gv2), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = carry q gv4), (heap_delete_max a2 = carry gv2 a2), (heap_delete_max a2 = carry gv2 a1)
(heap_delete_max a2 = carry gv2 gv4), (heap_delete_max a2 = q ++ q), (heap_delete_max a2 = q ++ gv2), (heap_delete_max a2 = gv2 ++ q), (heap_delete_max a2 = gv2 ++ gv2), (heap_delete_max a1 = q), (heap_delete_max a1 = gv2), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry q gv4)
(heap_delete_max a1 = carry gv2 a2), (heap_delete_max a1 = carry gv2 a1), (heap_delete_max a1 = carry gv2 gv4), (heap_delete_max a1 = q ++ q), (heap_delete_max a1 = q ++ gv2), (heap_delete_max a1 = gv2 ++ q), (heap_delete_max a1 = gv2 ++ gv2), (heap_delete_max gv4 = q), (heap_delete_max gv4 = gv2), (heap_delete_max gv4 = carry q a2)
(heap_delete_max gv4 = carry q a1), (heap_delete_max gv4 = carry q gv4), (heap_delete_max gv4 = carry gv2 a2), (heap_delete_max gv4 = carry gv2 a1), (heap_delete_max gv4 = carry gv2 gv4), (heap_delete_max gv4 = q ++ q), (heap_delete_max gv4 = q ++ gv2), (heap_delete_max gv4 = gv2 ++ q), (heap_delete_max gv4 = gv2 ++ gv2), (join q q a2 = q)
(join q q a2 = gv2), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = heap_delete_max gv4), (join q q a2 = insert x q), (join q q a2 = insert x gv2), (join q q a2 = insert n q), (join q q a2 = insert n gv2), (join q q a2 = carry q a2), (join q q a2 = carry q a1)
(join q q a2 = carry q gv4), (join q q a2 = carry gv2 a2), (join q q a2 = carry gv2 a1), (join q q a2 = carry gv2 gv4), (join q q a2 = q ++ q), (join q q a2 = q ++ gv2), (join q q a2 = gv2 ++ q), (join q q a2 = gv2 ++ gv2), (join q q a1 = q), (join q q a1 = gv2)
(join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = heap_delete_max gv4), (join q q a1 = insert x q), (join q q a1 = insert x gv2), (join q q a1 = insert n q), (join q q a1 = insert n gv2), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry q gv4)
(join q q a1 = carry gv2 a2), (join q q a1 = carry gv2 a1), (join q q a1 = carry gv2 gv4), (join q q a1 = q ++ q), (join q q a1 = q ++ gv2), (join q q a1 = gv2 ++ q), (join q q a1 = gv2 ++ gv2), (join q q gv4 = q), (join q q gv4 = gv2), (join q q gv4 = heap_delete_max a2)
(join q q gv4 = heap_delete_max a1), (join q q gv4 = heap_delete_max gv4), (join q q gv4 = insert x q), (join q q gv4 = insert x gv2), (join q q gv4 = insert n q), (join q q gv4 = insert n gv2), (join q q gv4 = carry q a2), (join q q gv4 = carry q a1), (join q q gv4 = carry q gv4), (join q q gv4 = carry gv2 a2)
(join q q gv4 = carry gv2 a1), (join q q gv4 = carry gv2 gv4), (join q q gv4 = q ++ q), (join q q gv4 = q ++ gv2), (join q q gv4 = gv2 ++ q), (join q q gv4 = gv2 ++ gv2), (join q gv2 a2 = q), (join q gv2 a2 = gv2), (join q gv2 a2 = heap_delete_max a2), (join q gv2 a2 = heap_delete_max a1)
(join q gv2 a2 = heap_delete_max gv4), (join q gv2 a2 = insert x q), (join q gv2 a2 = insert x gv2), (join q gv2 a2 = insert n q), (join q gv2 a2 = insert n gv2), (join q gv2 a2 = carry q a2), (join q gv2 a2 = carry q a1), (join q gv2 a2 = carry q gv4), (join q gv2 a2 = carry gv2 a2), (join q gv2 a2 = carry gv2 a1)
(join q gv2 a2 = carry gv2 gv4), (join q gv2 a2 = q ++ q), (join q gv2 a2 = q ++ gv2), (join q gv2 a2 = gv2 ++ q), (join q gv2 a2 = gv2 ++ gv2), (join q gv2 a1 = q), (join q gv2 a1 = gv2), (join q gv2 a1 = heap_delete_max a2), (join q gv2 a1 = heap_delete_max a1), (join q gv2 a1 = heap_delete_max gv4)
(join q gv2 a1 = insert x q), (join q gv2 a1 = insert x gv2), (join q gv2 a1 = insert n q), (join q gv2 a1 = insert n gv2), (join q gv2 a1 = carry q a2), (join q gv2 a1 = carry q a1), (join q gv2 a1 = carry q gv4), (join q gv2 a1 = carry gv2 a2), (join q gv2 a1 = carry gv2 a1), (join q gv2 a1 = carry gv2 gv4)
(join q gv2 a1 = q ++ q), (join q gv2 a1 = q ++ gv2), (join q gv2 a1 = gv2 ++ q), (join q gv2 a1 = gv2 ++ gv2), (join q gv2 gv4 = q), (join q gv2 gv4 = gv2), (join q gv2 gv4 = heap_delete_max a2), (join q gv2 gv4 = heap_delete_max a1), (join q gv2 gv4 = heap_delete_max gv4), (join q gv2 gv4 = insert x q)
(join q gv2 gv4 = insert x gv2), (join q gv2 gv4 = insert n q), (join q gv2 gv4 = insert n gv2), (join q gv2 gv4 = carry q a2), (join q gv2 gv4 = carry q a1), (join q gv2 gv4 = carry q gv4), (join q gv2 gv4 = carry gv2 a2), (join q gv2 gv4 = carry gv2 a1), (join q gv2 gv4 = carry gv2 gv4), (join q gv2 gv4 = q ++ q)
(join q gv2 gv4 = q ++ gv2), (join q gv2 gv4 = gv2 ++ q), (join q gv2 gv4 = gv2 ++ gv2), (join gv2 q a2 = q), (join gv2 q a2 = gv2), (join gv2 q a2 = heap_delete_max a2), (join gv2 q a2 = heap_delete_max a1), (join gv2 q a2 = heap_delete_max gv4), (join gv2 q a2 = insert x q), (join gv2 q a2 = insert x gv2)
(join gv2 q a2 = insert n q), (join gv2 q a2 = insert n gv2), (join gv2 q a2 = carry q a2), (join gv2 q a2 = carry q a1), (join gv2 q a2 = carry q gv4), (join gv2 q a2 = carry gv2 a2), (join gv2 q a2 = carry gv2 a1), (join gv2 q a2 = carry gv2 gv4), (join gv2 q a2 = q ++ q), (join gv2 q a2 = q ++ gv2)
(join gv2 q a2 = gv2 ++ q), (join gv2 q a2 = gv2 ++ gv2), (join gv2 q a1 = q), (join gv2 q a1 = gv2), (join gv2 q a1 = heap_delete_max a2), (join gv2 q a1 = heap_delete_max a1), (join gv2 q a1 = heap_delete_max gv4), (join gv2 q a1 = insert x q), (join gv2 q a1 = insert x gv2), (join gv2 q a1 = insert n q)
(join gv2 q a1 = insert n gv2), (join gv2 q a1 = carry q a2), (join gv2 q a1 = carry q a1), (join gv2 q a1 = carry q gv4), (join gv2 q a1 = carry gv2 a2), (join gv2 q a1 = carry gv2 a1), (join gv2 q a1 = carry gv2 gv4), (join gv2 q a1 = q ++ q), (join gv2 q a1 = q ++ gv2), (join gv2 q a1 = gv2 ++ q)
(join gv2 q a1 = gv2 ++ gv2), (join gv2 q gv4 = q), (join gv2 q gv4 = gv2), (join gv2 q gv4 = heap_delete_max a2), (join gv2 q gv4 = heap_delete_max a1), (join gv2 q gv4 = heap_delete_max gv4), (join gv2 q gv4 = insert x q), (join gv2 q gv4 = insert x gv2), (join gv2 q gv4 = insert n q), (join gv2 q gv4 = insert n gv2)
(join gv2 q gv4 = carry q a2), (join gv2 q gv4 = carry q a1), (join gv2 q gv4 = carry q gv4), (join gv2 q gv4 = carry gv2 a2), (join gv2 q gv4 = carry gv2 a1), (join gv2 q gv4 = carry gv2 gv4), (join gv2 q gv4 = q ++ q), (join gv2 q gv4 = q ++ gv2), (join gv2 q gv4 = gv2 ++ q), (join gv2 q gv4 = gv2 ++ gv2)
(join gv2 gv2 a2 = q), (join gv2 gv2 a2 = gv2), (join gv2 gv2 a2 = heap_delete_max a2), (join gv2 gv2 a2 = heap_delete_max a1), (join gv2 gv2 a2 = heap_delete_max gv4), (join gv2 gv2 a2 = insert x q), (join gv2 gv2 a2 = insert x gv2), (join gv2 gv2 a2 = insert n q), (join gv2 gv2 a2 = insert n gv2), (join gv2 gv2 a2 = carry q a2)
(join gv2 gv2 a2 = carry q a1), (join gv2 gv2 a2 = carry q gv4), (join gv2 gv2 a2 = carry gv2 a2), (join gv2 gv2 a2 = carry gv2 a1), (join gv2 gv2 a2 = carry gv2 gv4), (join gv2 gv2 a2 = q ++ q), (join gv2 gv2 a2 = q ++ gv2), (join gv2 gv2 a2 = gv2 ++ q), (join gv2 gv2 a2 = gv2 ++ gv2), (join gv2 gv2 a1 = q)
(join gv2 gv2 a1 = gv2), (join gv2 gv2 a1 = heap_delete_max a2), (join gv2 gv2 a1 = heap_delete_max a1), (join gv2 gv2 a1 = heap_delete_max gv4), (join gv2 gv2 a1 = insert x q), (join gv2 gv2 a1 = insert x gv2), (join gv2 gv2 a1 = insert n q), (join gv2 gv2 a1 = insert n gv2), (join gv2 gv2 a1 = carry q a2), (join gv2 gv2 a1 = carry q a1)
(join gv2 gv2 a1 = carry q gv4), (join gv2 gv2 a1 = carry gv2 a2), (join gv2 gv2 a1 = carry gv2 a1), (join gv2 gv2 a1 = carry gv2 gv4), (join gv2 gv2 a1 = q ++ q), (join gv2 gv2 a1 = q ++ gv2), (join gv2 gv2 a1 = gv2 ++ q), (join gv2 gv2 a1 = gv2 ++ gv2), (join gv2 gv2 gv4 = q), (join gv2 gv2 gv4 = gv2)
(join gv2 gv2 gv4 = heap_delete_max a2), (join gv2 gv2 gv4 = heap_delete_max a1), (join gv2 gv2 gv4 = heap_delete_max gv4), (join gv2 gv2 gv4 = insert x q), (join gv2 gv2 gv4 = insert x gv2), (join gv2 gv2 gv4 = insert n q), (join gv2 gv2 gv4 = insert n gv2), (join gv2 gv2 gv4 = carry q a2), (join gv2 gv2 gv4 = carry q a1), (join gv2 gv2 gv4 = carry q gv4)
(join gv2 gv2 gv4 = carry gv2 a2), (join gv2 gv2 gv4 = carry gv2 a1), (join gv2 gv2 gv4 = carry gv2 gv4), (join gv2 gv2 gv4 = q ++ q), (join gv2 gv2 gv4 = q ++ gv2), (join gv2 gv2 gv4 = gv2 ++ q), (join gv2 gv2 gv4 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = heap_delete_max a2)
(insert x q = heap_delete_max a1), (insert x q = heap_delete_max gv4), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry q gv4), (insert x q = carry gv2 a2), (insert x q = carry gv2 a1), (insert x q = carry gv2 gv4), (insert x q = q ++ q), (insert x q = q ++ gv2)
(insert x q = gv2 ++ q), (insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = heap_delete_max a2), (insert x gv2 = heap_delete_max a1), (insert x gv2 = heap_delete_max gv4), (insert x gv2 = carry q a2), (insert x gv2 = carry q a1), (insert x gv2 = carry q gv4)
(insert x gv2 = carry gv2 a2), (insert x gv2 = carry gv2 a1), (insert x gv2 = carry gv2 gv4), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q), (insert x gv2 = gv2 ++ gv2), (insert n q = q), (insert n q = gv2), (insert n q = heap_delete_max a2)
(insert n q = heap_delete_max a1), (insert n q = heap_delete_max gv4), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry q gv4), (insert n q = carry gv2 a2), (insert n q = carry gv2 a1), (insert n q = carry gv2 gv4), (insert n q = q ++ q), (insert n q = q ++ gv2)
(insert n q = gv2 ++ q), (insert n q = gv2 ++ gv2), (insert n gv2 = q), (insert n gv2 = gv2), (insert n gv2 = heap_delete_max a2), (insert n gv2 = heap_delete_max a1), (insert n gv2 = heap_delete_max gv4), (insert n gv2 = carry q a2), (insert n gv2 = carry q a1), (insert n gv2 = carry q gv4)
(insert n gv2 = carry gv2 a2), (insert n gv2 = carry gv2 a1), (insert n gv2 = carry gv2 gv4), (insert n gv2 = q ++ q), (insert n gv2 = q ++ gv2), (insert n gv2 = gv2 ++ q), (insert n gv2 = gv2 ++ gv2), (carry q a2 = q), (carry q a2 = gv2), (carry q a2 = q ++ q)
(carry q a2 = q ++ gv2), (carry q a2 = gv2 ++ q), (carry q a2 = gv2 ++ gv2), (carry q a1 = q), (carry q a1 = gv2), (carry q a1 = q ++ q), (carry q a1 = q ++ gv2), (carry q a1 = gv2 ++ q), (carry q a1 = gv2 ++ gv2), (carry q gv4 = q)
(carry q gv4 = gv2), (carry q gv4 = q ++ q), (carry q gv4 = q ++ gv2), (carry q gv4 = gv2 ++ q), (carry q gv4 = gv2 ++ gv2), (carry gv2 a2 = q), (carry gv2 a2 = gv2), (carry gv2 a2 = q ++ q), (carry gv2 a2 = q ++ gv2), (carry gv2 a2 = gv2 ++ q)
(carry gv2 a2 = gv2 ++ gv2), (carry gv2 a1 = q), (carry gv2 a1 = gv2), (carry gv2 a1 = q ++ q), (carry gv2 a1 = q ++ gv2), (carry gv2 a1 = gv2 ++ q), (carry gv2 a1 = gv2 ++ gv2), (carry gv2 gv4 = q), (carry gv2 gv4 = gv2), (carry gv2 gv4 = q ++ q)
(carry gv2 gv4 = q ++ gv2), (carry gv2 gv4 = gv2 ++ q), (carry gv2 gv4 = gv2 ++ gv2), (q ++ q = q), (q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2), (gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q)
(gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q), ([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max gv4)
([] = join q q a2), ([] = join q q a1), ([] = join q q gv4), ([] = join q gv2 a2), ([] = join q gv2 a1), ([] = join q gv2 gv4), ([] = join gv2 q a2), ([] = join gv2 q a1), ([] = join gv2 q gv4), ([] = join gv2 gv2 a2)
([] = join gv2 gv2 a1), ([] = join gv2 gv2 gv4), ([] = insert x q), ([] = insert x gv2), ([] = insert n q), ([] = insert n gv2), ([] = carry q a2), ([] = carry q a1), ([] = carry q gv4), ([] = carry gv2 a2)
([] = carry gv2 a1), ([] = carry gv2 gv4), ([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q), ([] = gv2 ++ gv2), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv2)
((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((q, gv2) = delete_max_aux n q), ((q, gv2) = delete_max_aux n gv2), ((gv2, q) = delete_max_aux x q), ((gv2, q) = delete_max_aux x gv2), ((gv2, q) = delete_max_aux n q), ((gv2, q) = delete_max_aux n gv2), ((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2)
((gv2, gv2) = delete_max_aux n q), ((gv2, gv2) = delete_max_aux n gv2), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = gv4), (Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a2 gv4), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1)
(Node x a2 a2 = smash a1 gv4), (Node x a2 a2 = smash gv4 a2), (Node x a2 a2 = smash gv4 a1), (Node x a2 a2 = smash gv4 gv4), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = gv4), (Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a2 gv4)
(Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a2 a1 = smash a1 gv4), (Node x a2 a1 = smash gv4 a2), (Node x a2 a1 = smash gv4 a1), (Node x a2 a1 = smash gv4 gv4), (Node x a2 gv4 = a2), (Node x a2 gv4 = a1), (Node x a2 gv4 = gv4), (Node x a2 gv4 = smash a2 a2)
(Node x a2 gv4 = smash a2 a1), (Node x a2 gv4 = smash a2 gv4), (Node x a2 gv4 = smash a1 a2), (Node x a2 gv4 = smash a1 a1), (Node x a2 gv4 = smash a1 gv4), (Node x a2 gv4 = smash gv4 a2), (Node x a2 gv4 = smash gv4 a1), (Node x a2 gv4 = smash gv4 gv4), (Node x a1 a2 = a2), (Node x a1 a2 = a1)
(Node x a1 a2 = gv4), (Node x a1 a2 = smash a2 a2), (Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a2 gv4), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a2 = smash a1 gv4), (Node x a1 a2 = smash gv4 a2), (Node x a1 a2 = smash gv4 a1), (Node x a1 a2 = smash gv4 gv4)
(Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = gv4), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a2 gv4), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node x a1 a1 = smash a1 gv4), (Node x a1 a1 = smash gv4 a2)
(Node x a1 a1 = smash gv4 a1), (Node x a1 a1 = smash gv4 gv4), (Node x a1 gv4 = a2), (Node x a1 gv4 = a1), (Node x a1 gv4 = gv4), (Node x a1 gv4 = smash a2 a2), (Node x a1 gv4 = smash a2 a1), (Node x a1 gv4 = smash a2 gv4), (Node x a1 gv4 = smash a1 a2), (Node x a1 gv4 = smash a1 a1)
(Node x a1 gv4 = smash a1 gv4), (Node x a1 gv4 = smash gv4 a2), (Node x a1 gv4 = smash gv4 a1), (Node x a1 gv4 = smash gv4 gv4), (Node x gv4 a2 = a2), (Node x gv4 a2 = a1), (Node x gv4 a2 = gv4), (Node x gv4 a2 = smash a2 a2), (Node x gv4 a2 = smash a2 a1), (Node x gv4 a2 = smash a2 gv4)
(Node x gv4 a2 = smash a1 a2), (Node x gv4 a2 = smash a1 a1), (Node x gv4 a2 = smash a1 gv4), (Node x gv4 a2 = smash gv4 a2), (Node x gv4 a2 = smash gv4 a1), (Node x gv4 a2 = smash gv4 gv4), (Node x gv4 a1 = a2), (Node x gv4 a1 = a1), (Node x gv4 a1 = gv4), (Node x gv4 a1 = smash a2 a2)
(Node x gv4 a1 = smash a2 a1), (Node x gv4 a1 = smash a2 gv4), (Node x gv4 a1 = smash a1 a2), (Node x gv4 a1 = smash a1 a1), (Node x gv4 a1 = smash a1 gv4), (Node x gv4 a1 = smash gv4 a2), (Node x gv4 a1 = smash gv4 a1), (Node x gv4 a1 = smash gv4 gv4), (Node x gv4 gv4 = a2), (Node x gv4 gv4 = a1)
(Node x gv4 gv4 = gv4), (Node x gv4 gv4 = smash a2 a2), (Node x gv4 gv4 = smash a2 a1), (Node x gv4 gv4 = smash a2 gv4), (Node x gv4 gv4 = smash a1 a2), (Node x gv4 gv4 = smash a1 a1), (Node x gv4 gv4 = smash a1 gv4), (Node x gv4 gv4 = smash gv4 a2), (Node x gv4 gv4 = smash gv4 a1), (Node x gv4 gv4 = smash gv4 gv4)
(Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv4), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv4), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv4), (Node n a2 a2 = smash gv4 a2)
(Node n a2 a2 = smash gv4 a1), (Node n a2 a2 = smash gv4 gv4), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv4), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv4), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1)
(Node n a2 a1 = smash a1 gv4), (Node n a2 a1 = smash gv4 a2), (Node n a2 a1 = smash gv4 a1), (Node n a2 a1 = smash gv4 gv4), (Node n a2 gv4 = a2), (Node n a2 gv4 = a1), (Node n a2 gv4 = gv4), (Node n a2 gv4 = smash a2 a2), (Node n a2 gv4 = smash a2 a1), (Node n a2 gv4 = smash a2 gv4)
(Node n a2 gv4 = smash a1 a2), (Node n a2 gv4 = smash a1 a1), (Node n a2 gv4 = smash a1 gv4), (Node n a2 gv4 = smash gv4 a2), (Node n a2 gv4 = smash gv4 a1), (Node n a2 gv4 = smash gv4 gv4), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv4), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv4), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv4), (Node n a1 a2 = smash gv4 a2), (Node n a1 a2 = smash gv4 a1), (Node n a1 a2 = smash gv4 gv4), (Node n a1 a1 = a2), (Node n a1 a1 = a1)
(Node n a1 a1 = gv4), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv4), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv4), (Node n a1 a1 = smash gv4 a2), (Node n a1 a1 = smash gv4 a1), (Node n a1 a1 = smash gv4 gv4)
(Node n a1 gv4 = a2), (Node n a1 gv4 = a1), (Node n a1 gv4 = gv4), (Node n a1 gv4 = smash a2 a2), (Node n a1 gv4 = smash a2 a1), (Node n a1 gv4 = smash a2 gv4), (Node n a1 gv4 = smash a1 a2), (Node n a1 gv4 = smash a1 a1), (Node n a1 gv4 = smash a1 gv4), (Node n a1 gv4 = smash gv4 a2)
(Node n a1 gv4 = smash gv4 a1), (Node n a1 gv4 = smash gv4 gv4), (Node n gv4 a2 = a2), (Node n gv4 a2 = a1), (Node n gv4 a2 = gv4), (Node n gv4 a2 = smash a2 a2), (Node n gv4 a2 = smash a2 a1), (Node n gv4 a2 = smash a2 gv4), (Node n gv4 a2 = smash a1 a2), (Node n gv4 a2 = smash a1 a1)
(Node n gv4 a2 = smash a1 gv4), (Node n gv4 a2 = smash gv4 a2), (Node n gv4 a2 = smash gv4 a1), (Node n gv4 a2 = smash gv4 gv4), (Node n gv4 a1 = a2), (Node n gv4 a1 = a1), (Node n gv4 a1 = gv4), (Node n gv4 a1 = smash a2 a2), (Node n gv4 a1 = smash a2 a1), (Node n gv4 a1 = smash a2 gv4)
(Node n gv4 a1 = smash a1 a2), (Node n gv4 a1 = smash a1 a1), (Node n gv4 a1 = smash a1 gv4), (Node n gv4 a1 = smash gv4 a2), (Node n gv4 a1 = smash gv4 a1), (Node n gv4 a1 = smash gv4 gv4), (Node n gv4 gv4 = a2), (Node n gv4 gv4 = a1), (Node n gv4 gv4 = gv4), (Node n gv4 gv4 = smash a2 a2)
(Node n gv4 gv4 = smash a2 a1), (Node n gv4 gv4 = smash a2 gv4), (Node n gv4 gv4 = smash a1 a2), (Node n gv4 gv4 = smash a1 a1), (Node n gv4 gv4 = smash a1 gv4), (Node n gv4 gv4 = smash gv4 a2), (Node n gv4 gv4 = smash gv4 a1), (Node n gv4 gv4 = smash gv4 gv4), (smash a2 a2 = a2), (smash a2 a2 = a1)
(smash a2 a2 = gv4), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = gv4), (smash a2 gv4 = a2), (smash a2 gv4 = a1), (smash a2 gv4 = gv4), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = gv4)
(smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv4), (smash a1 gv4 = a2), (smash a1 gv4 = a1), (smash a1 gv4 = gv4), (smash gv4 a2 = a2), (smash gv4 a2 = a1), (smash gv4 a2 = gv4), (smash gv4 a1 = a2)
(smash gv4 a1 = a1), (smash gv4 a1 = gv4), (smash gv4 gv4 = a2), (smash gv4 gv4 = a1), (smash gv4 gv4 = gv4), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a2 gv4), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1)
(Leaf = Node x a1 gv4), (Leaf = Node x gv4 a2), (Leaf = Node x gv4 a1), (Leaf = Node x gv4 gv4), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 gv4), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 gv4)
(Leaf = Node n gv4 a2), (Leaf = Node n gv4 a1), (Leaf = Node n gv4 gv4), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv4), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 gv4), (Leaf = smash gv4 a2)
(Leaf = smash gv4 a1), (Leaf = smash gv4 gv4), (find_max' x q = x), (find_max' x q = n), (find_max' x gv2 = x), (find_max' x gv2 = n), (find_max' n q = x), (find_max' n q = n), (find_max' n gv2 = x), (find_max' n gv2 = n)
(length q = x), (length q = n), (length q = find_max' x q), (length q = find_max' x gv2), (length q = find_max' n q), (length q = find_max' n gv2), (length gv2 = x), (length gv2 = n), (length gv2 = find_max' x q), (length gv2 = find_max' x gv2)
(length gv2 = find_max' n q), (length gv2 = find_max' n gv2), (Some x = find_max q), (Some x = find_max gv2), (Some n = find_max q), (Some n = find_max gv2), (None = Some x), (None = Some n), (None = find_max q), (None = find_max gv2)
(None = Some a2), (None = Some a1), (None = Some gv4), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (n >=? x))
((x >? n) = (n >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n))

Label: 3 (3)
(priq q), (priqq n q), (priqq x q), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv5), (pow2heap n gv3), (pow2heap x a2), (pow2heap x a1), (pow2heap x gv5)
(pow2heap x gv3), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv5), (pow2heapp n n gv3), (pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n x gv5), (pow2heapp n x gv3), (pow2heapp x n a2)
(pow2heapp x n a1), (pow2heapp x n gv5), (pow2heapp x n gv3), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x x gv5), (pow2heapp x x gv3), (Permutation q q), (In a2 q), (In a1 q)
(In gv5 q), (In gv3 q), (n < n), (n < x), (x < n), (x < x), (n <= n), (n <= x), (x <= n), (x <= x)
(n = n), (n = x), (x = n), (x = x), (q = q), (a2 = a2), (a2 = a1), (a2 = gv5), (a2 = gv3), (a1 = a2)
(a1 = a1), (a1 = gv5), (a1 = gv3), (gv5 = a2), (gv5 = a1), (gv5 = gv5), (gv5 = gv3), (gv3 = a2), (gv3 = a1), (gv3 = gv5)
(gv3 = gv3), (false = (n >? n)), (false = (n >? x)), (false = (x >? n)), (false = (x >? x)), (false = (n >=? n)), (false = (n >=? x)), (false = (x >=? n)), (false = (x >=? x)), (true = (n >? n))
(true = (n >? x)), (true = (x >? n)), (true = (x >? x)), (true = (n >=? n)), (true = (n >=? x)), (true = (x >=? n)), (true = (x >=? x)), (Abs q []), (Abs (a2 :: q) []), (Abs (a1 :: q) [])
(Abs (gv5 :: q) []), (Abs (gv3 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max gv5) []), (Abs (heap_delete_max gv3) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q q gv5) [])
(Abs (join q q gv3) []), (Abs (insert n q) []), (Abs (insert x q) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry q gv5) []), (Abs (carry q gv3) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q [])
(priqueue_elems (a2 :: q) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (gv5 :: q) []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv5) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q a2) [])
(priqueue_elems (join q q a1) []), (priqueue_elems (join q q gv5) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert x q) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) []), (priqueue_elems (carry q gv5) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (q ++ q) [])
(priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems gv5 []), (tree_elems gv3 []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv5) []), (tree_elems (Node n a2 gv3) []), (tree_elems (Node n a1 a2) [])
(tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv5) []), (tree_elems (Node n a1 gv3) []), (tree_elems (Node n gv5 a2) []), (tree_elems (Node n gv5 a1) []), (tree_elems (Node n gv5 gv5) []), (tree_elems (Node n gv5 gv3) []), (tree_elems (Node n gv3 a2) []), (tree_elems (Node n gv3 a1) []), (tree_elems (Node n gv3 gv5) [])
(tree_elems (Node n gv3 gv3) []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a2 gv5) []), (tree_elems (Node x a2 gv3) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node x a1 gv5) []), (tree_elems (Node x a1 gv3) []), (tree_elems (Node x gv5 a2) [])
(tree_elems (Node x gv5 a1) []), (tree_elems (Node x gv5 gv5) []), (tree_elems (Node x gv5 gv3) []), (tree_elems (Node x gv3 a2) []), (tree_elems (Node x gv3 a1) []), (tree_elems (Node x gv3 gv5) []), (tree_elems (Node x gv3 gv3) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv5) [])
(tree_elems (smash a2 gv3) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv5) []), (tree_elems (smash a1 gv3) []), (tree_elems (smash gv5 a2) []), (tree_elems (smash gv5 a1) []), (tree_elems (smash gv5 gv5) []), (tree_elems (smash gv5 gv3) []), (tree_elems (smash gv3 a2) [])
(tree_elems (smash gv3 a1) []), (tree_elems (smash gv3 gv5) []), (tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (a2 :: q)), (priq (a1 :: q)), (priq (gv5 :: q)), (priq (gv3 :: q)), (priq (merge q q)), (priq (heap_delete_max a2))
(priq (heap_delete_max a1)), (priq (heap_delete_max gv5)), (priq (heap_delete_max gv3)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q q gv5)), (priq (join q q gv3)), (priq (insert n q)), (priq (insert x q)), (priq (carry q a2))
(priq (carry q a1)), (priq (carry q gv5)), (priq (carry q gv3)), (priq (q ++ q)), (priqq n (a2 :: q)), (priqq n (a1 :: q)), (priqq n (gv5 :: q)), (priqq n (gv3 :: q)), (priqq n (merge q q)), (priqq n (heap_delete_max a2))
(priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv5)), (priqq n (heap_delete_max gv3)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q q gv5)), (priqq n (join q q gv3)), (priqq n (insert n q)), (priqq n (insert x q)), (priqq n (carry q a2))
(priqq n (carry q a1)), (priqq n (carry q gv5)), (priqq n (carry q gv3)), (priqq n (q ++ q)), (priqq x (a2 :: q)), (priqq x (a1 :: q)), (priqq x (gv5 :: q)), (priqq x (gv3 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max a2))
(priqq x (heap_delete_max a1)), (priqq x (heap_delete_max gv5)), (priqq x (heap_delete_max gv3)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q q gv5)), (priqq x (join q q gv3)), (priqq x (insert n q)), (priqq x (insert x q)), (priqq x (carry q a2))
(priqq x (carry q a1)), (priqq x (carry q gv5)), (priqq x (carry q gv3)), (priqq x (q ++ q)), (priqq (find_max' n q) q), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (gv5 :: q)), (priqq (find_max' n q) (gv3 :: q)), (priqq (find_max' n q) (merge q q))
(priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (heap_delete_max gv5)), (priqq (find_max' n q) (heap_delete_max gv3)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q q gv5)), (priqq (find_max' n q) (join q q gv3)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert x q))
(priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry q gv5)), (priqq (find_max' n q) (carry q gv3)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' x q) q), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (gv5 :: q)), (priqq (find_max' x q) (gv3 :: q))
(priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (heap_delete_max gv5)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q q gv5)), (priqq (find_max' x q) (join q q gv3)), (priqq (find_max' x q) (insert n q))
(priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry q gv5)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (length q) q), (priqq (length q) (a2 :: q)), (priqq (length q) (a1 :: q)), (priqq (length q) (gv5 :: q))
(priqq (length q) (gv3 :: q)), (priqq (length q) (merge q q)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (heap_delete_max gv5)), (priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q q gv5)), (priqq (length q) (join q q gv3))
(priqq (length q) (insert n q)), (priqq (length q) (insert x q)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry q gv5)), (priqq (length q) (carry q gv3)), (priqq (length q) (q ++ q)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv5))
(pow2heap n (Node n a2 gv3)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv5)), (pow2heap n (Node n a1 gv3)), (pow2heap n (Node n gv5 a2)), (pow2heap n (Node n gv5 a1)), (pow2heap n (Node n gv5 gv5)), (pow2heap n (Node n gv5 gv3)), (pow2heap n (Node n gv3 a2))
(pow2heap n (Node n gv3 a1)), (pow2heap n (Node n gv3 gv5)), (pow2heap n (Node n gv3 gv3)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a2 gv5)), (pow2heap n (Node x a2 gv3)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node x a1 gv5))
(pow2heap n (Node x a1 gv3)), (pow2heap n (Node x gv5 a2)), (pow2heap n (Node x gv5 a1)), (pow2heap n (Node x gv5 gv5)), (pow2heap n (Node x gv5 gv3)), (pow2heap n (Node x gv3 a2)), (pow2heap n (Node x gv3 a1)), (pow2heap n (Node x gv3 gv5)), (pow2heap n (Node x gv3 gv3)), (pow2heap n (smash a2 a2))
(pow2heap n (smash a2 a1)), (pow2heap n (smash a2 gv5)), (pow2heap n (smash a2 gv3)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv5)), (pow2heap n (smash a1 gv3)), (pow2heap n (smash gv5 a2)), (pow2heap n (smash gv5 a1)), (pow2heap n (smash gv5 gv5))
(pow2heap n (smash gv5 gv3)), (pow2heap n (smash gv3 a2)), (pow2heap n (smash gv3 a1)), (pow2heap n (smash gv3 gv5)), (pow2heap n (smash gv3 gv3)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a2 gv5)), (pow2heap x (Node n a2 gv3)), (pow2heap x (Node n a1 a2))
(pow2heap x (Node n a1 a1)), (pow2heap x (Node n a1 gv5)), (pow2heap x (Node n a1 gv3)), (pow2heap x (Node n gv5 a2)), (pow2heap x (Node n gv5 a1)), (pow2heap x (Node n gv5 gv5)), (pow2heap x (Node n gv5 gv3)), (pow2heap x (Node n gv3 a2)), (pow2heap x (Node n gv3 a1)), (pow2heap x (Node n gv3 gv5))
(pow2heap x (Node n gv3 gv3)), (pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a2 gv5)), (pow2heap x (Node x a2 gv3)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node x a1 gv5)), (pow2heap x (Node x a1 gv3)), (pow2heap x (Node x gv5 a2))
(pow2heap x (Node x gv5 a1)), (pow2heap x (Node x gv5 gv5)), (pow2heap x (Node x gv5 gv3)), (pow2heap x (Node x gv3 a2)), (pow2heap x (Node x gv3 a1)), (pow2heap x (Node x gv3 gv5)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a2 gv5))
(pow2heap x (smash a2 gv3)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap x (smash a1 gv5)), (pow2heap x (smash a1 gv3)), (pow2heap x (smash gv5 a2)), (pow2heap x (smash gv5 a1)), (pow2heap x (smash gv5 gv5)), (pow2heap x (smash gv5 gv3)), (pow2heap x (smash gv3 a2))
(pow2heap x (smash gv3 a1)), (pow2heap x (smash gv3 gv5)), (pow2heap x (smash gv3 gv3)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) gv5), (pow2heap (find_max' n q) gv3), (pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a2 gv5))
(pow2heap (find_max' n q) (Node n a2 gv3)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node n a1 gv5)), (pow2heap (find_max' n q) (Node n a1 gv3)), (pow2heap (find_max' n q) (Node n gv5 a2)), (pow2heap (find_max' n q) (Node n gv5 a1)), (pow2heap (find_max' n q) (Node n gv5 gv5)), (pow2heap (find_max' n q) (Node n gv5 gv3)), (pow2heap (find_max' n q) (Node n gv3 a2))
(pow2heap (find_max' n q) (Node n gv3 a1)), (pow2heap (find_max' n q) (Node n gv3 gv5)), (pow2heap (find_max' n q) (Node n gv3 gv3)), (pow2heap (find_max' n q) (Node x a2 a2)), (pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a2 gv5)), (pow2heap (find_max' n q) (Node x a2 gv3)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node x a1 gv5))
(pow2heap (find_max' n q) (Node x a1 gv3)), (pow2heap (find_max' n q) (Node x gv5 a2)), (pow2heap (find_max' n q) (Node x gv5 a1)), (pow2heap (find_max' n q) (Node x gv5 gv5)), (pow2heap (find_max' n q) (Node x gv5 gv3)), (pow2heap (find_max' n q) (Node x gv3 a2)), (pow2heap (find_max' n q) (Node x gv3 a1)), (pow2heap (find_max' n q) (Node x gv3 gv5)), (pow2heap (find_max' n q) (Node x gv3 gv3)), (pow2heap (find_max' n q) (smash a2 a2))
(pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a2 gv5)), (pow2heap (find_max' n q) (smash a2 gv3)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n q) (smash a1 gv5)), (pow2heap (find_max' n q) (smash a1 gv3)), (pow2heap (find_max' n q) (smash gv5 a2)), (pow2heap (find_max' n q) (smash gv5 a1)), (pow2heap (find_max' n q) (smash gv5 gv5))
(pow2heap (find_max' n q) (smash gv5 gv3)), (pow2heap (find_max' n q) (smash gv3 a2)), (pow2heap (find_max' n q) (smash gv3 a1)), (pow2heap (find_max' n q) (smash gv3 gv5)), (pow2heap (find_max' n q) (smash gv3 gv3)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) gv5), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node n a2 a2))
(pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a2 gv5)), (pow2heap (find_max' x q) (Node n a2 gv3)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (Node n a1 gv5)), (pow2heap (find_max' x q) (Node n a1 gv3)), (pow2heap (find_max' x q) (Node n gv5 a2)), (pow2heap (find_max' x q) (Node n gv5 a1)), (pow2heap (find_max' x q) (Node n gv5 gv5))
(pow2heap (find_max' x q) (Node n gv5 gv3)), (pow2heap (find_max' x q) (Node n gv3 a2)), (pow2heap (find_max' x q) (Node n gv3 a1)), (pow2heap (find_max' x q) (Node n gv3 gv5)), (pow2heap (find_max' x q) (Node n gv3 gv3)), (pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a2 gv5)), (pow2heap (find_max' x q) (Node x a2 gv3)), (pow2heap (find_max' x q) (Node x a1 a2))
(pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node x a1 gv5)), (pow2heap (find_max' x q) (Node x a1 gv3)), (pow2heap (find_max' x q) (Node x gv5 a2)), (pow2heap (find_max' x q) (Node x gv5 a1)), (pow2heap (find_max' x q) (Node x gv5 gv5)), (pow2heap (find_max' x q) (Node x gv5 gv3)), (pow2heap (find_max' x q) (Node x gv3 a2)), (pow2heap (find_max' x q) (Node x gv3 a1)), (pow2heap (find_max' x q) (Node x gv3 gv5))
(pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a2 gv5)), (pow2heap (find_max' x q) (smash a2 gv3)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x q) (smash a1 gv5)), (pow2heap (find_max' x q) (smash a1 gv3)), (pow2heap (find_max' x q) (smash gv5 a2))
(pow2heap (find_max' x q) (smash gv5 a1)), (pow2heap (find_max' x q) (smash gv5 gv5)), (pow2heap (find_max' x q) (smash gv5 gv3)), (pow2heap (find_max' x q) (smash gv3 a2)), (pow2heap (find_max' x q) (smash gv3 a1)), (pow2heap (find_max' x q) (smash gv3 gv5)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) gv5)
(pow2heap (length q) gv3), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a2 gv5)), (pow2heap (length q) (Node n a2 gv3)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node n a1 gv5)), (pow2heap (length q) (Node n a1 gv3)), (pow2heap (length q) (Node n gv5 a2))
(pow2heap (length q) (Node n gv5 a1)), (pow2heap (length q) (Node n gv5 gv5)), (pow2heap (length q) (Node n gv5 gv3)), (pow2heap (length q) (Node n gv3 a2)), (pow2heap (length q) (Node n gv3 a1)), (pow2heap (length q) (Node n gv3 gv5)), (pow2heap (length q) (Node n gv3 gv3)), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a2 gv5))
(pow2heap (length q) (Node x a2 gv3)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node x a1 gv5)), (pow2heap (length q) (Node x a1 gv3)), (pow2heap (length q) (Node x gv5 a2)), (pow2heap (length q) (Node x gv5 a1)), (pow2heap (length q) (Node x gv5 gv5)), (pow2heap (length q) (Node x gv5 gv3)), (pow2heap (length q) (Node x gv3 a2))
(pow2heap (length q) (Node x gv3 a1)), (pow2heap (length q) (Node x gv3 gv5)), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a2 gv5)), (pow2heap (length q) (smash a2 gv3)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length q) (smash a1 gv5))
(pow2heap (length q) (smash a1 gv3)), (pow2heap (length q) (smash gv5 a2)), (pow2heap (length q) (smash gv5 a1)), (pow2heap (length q) (smash gv5 gv5)), (pow2heap (length q) (smash gv5 gv3)), (pow2heap (length q) (smash gv3 a2)), (pow2heap (length q) (smash gv3 a1)), (pow2heap (length q) (smash gv3 gv5)), (pow2heap (length q) (smash gv3 gv3)), (pow2heapp n n (Node n a2 a2))
(pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv5)), (pow2heapp n n (Node n a2 gv3)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv5)), (pow2heapp n n (Node n a1 gv3)), (pow2heapp n n (Node n gv5 a2)), (pow2heapp n n (Node n gv5 a1)), (pow2heapp n n (Node n gv5 gv5))
(pow2heapp n n (Node n gv5 gv3)), (pow2heapp n n (Node n gv3 a2)), (pow2heapp n n (Node n gv3 a1)), (pow2heapp n n (Node n gv3 gv5)), (pow2heapp n n (Node n gv3 gv3)), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a2 gv5)), (pow2heapp n n (Node x a2 gv3)), (pow2heapp n n (Node x a1 a2))
(pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node x a1 gv5)), (pow2heapp n n (Node x a1 gv3)), (pow2heapp n n (Node x gv5 a2)), (pow2heapp n n (Node x gv5 a1)), (pow2heapp n n (Node x gv5 gv5)), (pow2heapp n n (Node x gv5 gv3)), (pow2heapp n n (Node x gv3 a2)), (pow2heapp n n (Node x gv3 a1)), (pow2heapp n n (Node x gv3 gv5))
(pow2heapp n n (Node x gv3 gv3)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv5)), (pow2heapp n n (smash a2 gv3)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 gv5)), (pow2heapp n n (smash a1 gv3)), (pow2heapp n n (smash gv5 a2))
(pow2heapp n n (smash gv5 a1)), (pow2heapp n n (smash gv5 gv5)), (pow2heapp n n (smash gv5 gv3)), (pow2heapp n n (smash gv3 a2)), (pow2heapp n n (smash gv3 a1)), (pow2heapp n n (smash gv3 gv5)), (pow2heapp n n (smash gv3 gv3)), (pow2heapp n n Leaf), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1))
(pow2heapp n x (Node n a2 gv5)), (pow2heapp n x (Node n a2 gv3)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (Node n a1 gv5)), (pow2heapp n x (Node n a1 gv3)), (pow2heapp n x (Node n gv5 a2)), (pow2heapp n x (Node n gv5 a1)), (pow2heapp n x (Node n gv5 gv5)), (pow2heapp n x (Node n gv5 gv3))
(pow2heapp n x (Node n gv3 a2)), (pow2heapp n x (Node n gv3 a1)), (pow2heapp n x (Node n gv3 gv5)), (pow2heapp n x (Node n gv3 gv3)), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a2 gv5)), (pow2heapp n x (Node x a2 gv3)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1))
(pow2heapp n x (Node x a1 gv5)), (pow2heapp n x (Node x a1 gv3)), (pow2heapp n x (Node x gv5 a2)), (pow2heapp n x (Node x gv5 a1)), (pow2heapp n x (Node x gv5 gv5)), (pow2heapp n x (Node x gv5 gv3)), (pow2heapp n x (Node x gv3 a2)), (pow2heapp n x (Node x gv3 a1)), (pow2heapp n x (Node x gv3 gv5)), (pow2heapp n x (Node x gv3 gv3))
(pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a2 gv5)), (pow2heapp n x (smash a2 gv3)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x (smash a1 gv5)), (pow2heapp n x (smash a1 gv3)), (pow2heapp n x (smash gv5 a2)), (pow2heapp n x (smash gv5 a1))
(pow2heapp n x (smash gv5 gv5)), (pow2heapp n x (smash gv5 gv3)), (pow2heapp n x (smash gv3 a2)), (pow2heapp n x (smash gv3 a1)), (pow2heapp n x (smash gv3 gv5)), (pow2heapp n x (smash gv3 gv3)), (pow2heapp n x Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) gv5)
(pow2heapp n (find_max' n q) gv3), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a2 gv5)), (pow2heapp n (find_max' n q) (Node n a2 gv3)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node n a1 gv5)), (pow2heapp n (find_max' n q) (Node n a1 gv3)), (pow2heapp n (find_max' n q) (Node n gv5 a2))
(pow2heapp n (find_max' n q) (Node n gv5 a1)), (pow2heapp n (find_max' n q) (Node n gv5 gv5)), (pow2heapp n (find_max' n q) (Node n gv5 gv3)), (pow2heapp n (find_max' n q) (Node n gv3 a2)), (pow2heapp n (find_max' n q) (Node n gv3 a1)), (pow2heapp n (find_max' n q) (Node n gv3 gv5)), (pow2heapp n (find_max' n q) (Node n gv3 gv3)), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a2 gv5))
(pow2heapp n (find_max' n q) (Node x a2 gv3)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node x a1 gv5)), (pow2heapp n (find_max' n q) (Node x a1 gv3)), (pow2heapp n (find_max' n q) (Node x gv5 a2)), (pow2heapp n (find_max' n q) (Node x gv5 a1)), (pow2heapp n (find_max' n q) (Node x gv5 gv5)), (pow2heapp n (find_max' n q) (Node x gv5 gv3)), (pow2heapp n (find_max' n q) (Node x gv3 a2))
(pow2heapp n (find_max' n q) (Node x gv3 a1)), (pow2heapp n (find_max' n q) (Node x gv3 gv5)), (pow2heapp n (find_max' n q) (Node x gv3 gv3)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a2 gv5)), (pow2heapp n (find_max' n q) (smash a2 gv3)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) (smash a1 gv5))
(pow2heapp n (find_max' n q) (smash a1 gv3)), (pow2heapp n (find_max' n q) (smash gv5 a2)), (pow2heapp n (find_max' n q) (smash gv5 a1)), (pow2heapp n (find_max' n q) (smash gv5 gv5)), (pow2heapp n (find_max' n q) (smash gv5 gv3)), (pow2heapp n (find_max' n q) (smash gv3 a2)), (pow2heapp n (find_max' n q) (smash gv3 a1)), (pow2heapp n (find_max' n q) (smash gv3 gv5)), (pow2heapp n (find_max' n q) (smash gv3 gv3)), (pow2heapp n (find_max' n q) Leaf)
(pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) gv5), (pow2heapp n (find_max' x q) gv3), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a2 gv5)), (pow2heapp n (find_max' x q) (Node n a2 gv3)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1))
(pow2heapp n (find_max' x q) (Node n a1 gv5)), (pow2heapp n (find_max' x q) (Node n a1 gv3)), (pow2heapp n (find_max' x q) (Node n gv5 a2)), (pow2heapp n (find_max' x q) (Node n gv5 a1)), (pow2heapp n (find_max' x q) (Node n gv5 gv5)), (pow2heapp n (find_max' x q) (Node n gv5 gv3)), (pow2heapp n (find_max' x q) (Node n gv3 a2)), (pow2heapp n (find_max' x q) (Node n gv3 a1)), (pow2heapp n (find_max' x q) (Node n gv3 gv5)), (pow2heapp n (find_max' x q) (Node n gv3 gv3))
(pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a2 gv5)), (pow2heapp n (find_max' x q) (Node x a2 gv3)), (pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node x a1 gv5)), (pow2heapp n (find_max' x q) (Node x a1 gv3)), (pow2heapp n (find_max' x q) (Node x gv5 a2)), (pow2heapp n (find_max' x q) (Node x gv5 a1))
(pow2heapp n (find_max' x q) (Node x gv5 gv5)), (pow2heapp n (find_max' x q) (Node x gv5 gv3)), (pow2heapp n (find_max' x q) (Node x gv3 a2)), (pow2heapp n (find_max' x q) (Node x gv3 a1)), (pow2heapp n (find_max' x q) (Node x gv3 gv5)), (pow2heapp n (find_max' x q) (Node x gv3 gv3)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a2 gv5)), (pow2heapp n (find_max' x q) (smash a2 gv3))
(pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) (smash a1 gv5)), (pow2heapp n (find_max' x q) (smash a1 gv3)), (pow2heapp n (find_max' x q) (smash gv5 a2)), (pow2heapp n (find_max' x q) (smash gv5 a1)), (pow2heapp n (find_max' x q) (smash gv5 gv5)), (pow2heapp n (find_max' x q) (smash gv5 gv3)), (pow2heapp n (find_max' x q) (smash gv3 a2)), (pow2heapp n (find_max' x q) (smash gv3 a1))
(pow2heapp n (find_max' x q) (smash gv3 gv5)), (pow2heapp n (find_max' x q) (smash gv3 gv3)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) gv5), (pow2heapp n (length q) gv3), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a2 gv5))
(pow2heapp n (length q) (Node n a2 gv3)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (Node n a1 gv5)), (pow2heapp n (length q) (Node n a1 gv3)), (pow2heapp n (length q) (Node n gv5 a2)), (pow2heapp n (length q) (Node n gv5 a1)), (pow2heapp n (length q) (Node n gv5 gv5)), (pow2heapp n (length q) (Node n gv5 gv3)), (pow2heapp n (length q) (Node n gv3 a2))
(pow2heapp n (length q) (Node n gv3 a1)), (pow2heapp n (length q) (Node n gv3 gv5)), (pow2heapp n (length q) (Node n gv3 gv3)), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a2 gv5)), (pow2heapp n (length q) (Node x a2 gv3)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node x a1 gv5))
(pow2heapp n (length q) (Node x a1 gv3)), (pow2heapp n (length q) (Node x gv5 a2)), (pow2heapp n (length q) (Node x gv5 a1)), (pow2heapp n (length q) (Node x gv5 gv5)), (pow2heapp n (length q) (Node x gv5 gv3)), (pow2heapp n (length q) (Node x gv3 a2)), (pow2heapp n (length q) (Node x gv3 a1)), (pow2heapp n (length q) (Node x gv3 gv5)), (pow2heapp n (length q) (Node x gv3 gv3)), (pow2heapp n (length q) (smash a2 a2))
(pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a2 gv5)), (pow2heapp n (length q) (smash a2 gv3)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) (smash a1 gv5)), (pow2heapp n (length q) (smash a1 gv3)), (pow2heapp n (length q) (smash gv5 a2)), (pow2heapp n (length q) (smash gv5 a1)), (pow2heapp n (length q) (smash gv5 gv5))
(pow2heapp n (length q) (smash gv5 gv3)), (pow2heapp n (length q) (smash gv3 a2)), (pow2heapp n (length q) (smash gv3 a1)), (pow2heapp n (length q) (smash gv3 gv5)), (pow2heapp n (length q) (smash gv3 gv3)), (pow2heapp n (length q) Leaf), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a2 gv5)), (pow2heapp x n (Node n a2 gv3))
(pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (Node n a1 gv5)), (pow2heapp x n (Node n a1 gv3)), (pow2heapp x n (Node n gv5 a2)), (pow2heapp x n (Node n gv5 a1)), (pow2heapp x n (Node n gv5 gv5)), (pow2heapp x n (Node n gv5 gv3)), (pow2heapp x n (Node n gv3 a2)), (pow2heapp x n (Node n gv3 a1))
(pow2heapp x n (Node n gv3 gv5)), (pow2heapp x n (Node n gv3 gv3)), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a2 gv5)), (pow2heapp x n (Node x a2 gv3)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node x a1 gv5)), (pow2heapp x n (Node x a1 gv3))
(pow2heapp x n (Node x gv5 a2)), (pow2heapp x n (Node x gv5 a1)), (pow2heapp x n (Node x gv5 gv5)), (pow2heapp x n (Node x gv5 gv3)), (pow2heapp x n (Node x gv3 a2)), (pow2heapp x n (Node x gv3 a1)), (pow2heapp x n (Node x gv3 gv5)), (pow2heapp x n (Node x gv3 gv3)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1))
(pow2heapp x n (smash a2 gv5)), (pow2heapp x n (smash a2 gv3)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n (smash a1 gv5)), (pow2heapp x n (smash a1 gv3)), (pow2heapp x n (smash gv5 a2)), (pow2heapp x n (smash gv5 a1)), (pow2heapp x n (smash gv5 gv5)), (pow2heapp x n (smash gv5 gv3))
(pow2heapp x n (smash gv3 a2)), (pow2heapp x n (smash gv3 a1)), (pow2heapp x n (smash gv3 gv5)), (pow2heapp x n (smash gv3 gv3)), (pow2heapp x n Leaf), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a2 gv5)), (pow2heapp x x (Node n a2 gv3)), (pow2heapp x x (Node n a1 a2))
(pow2heapp x x (Node n a1 a1)), (pow2heapp x x (Node n a1 gv5)), (pow2heapp x x (Node n a1 gv3)), (pow2heapp x x (Node n gv5 a2)), (pow2heapp x x (Node n gv5 a1)), (pow2heapp x x (Node n gv5 gv5)), (pow2heapp x x (Node n gv5 gv3)), (pow2heapp x x (Node n gv3 a2)), (pow2heapp x x (Node n gv3 a1)), (pow2heapp x x (Node n gv3 gv5))
(pow2heapp x x (Node n gv3 gv3)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a2 gv5)), (pow2heapp x x (Node x a2 gv3)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node x a1 gv5)), (pow2heapp x x (Node x a1 gv3)), (pow2heapp x x (Node x gv5 a2))
(pow2heapp x x (Node x gv5 a1)), (pow2heapp x x (Node x gv5 gv5)), (pow2heapp x x (Node x gv5 gv3)), (pow2heapp x x (Node x gv3 a2)), (pow2heapp x x (Node x gv3 a1)), (pow2heapp x x (Node x gv3 gv5)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a2 gv5))
(pow2heapp x x (smash a2 gv3)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x (smash a1 gv5)), (pow2heapp x x (smash a1 gv3)), (pow2heapp x x (smash gv5 a2)), (pow2heapp x x (smash gv5 a1)), (pow2heapp x x (smash gv5 gv5)), (pow2heapp x x (smash gv5 gv3)), (pow2heapp x x (smash gv3 a2))
(pow2heapp x x (smash gv3 a1)), (pow2heapp x x (smash gv3 gv5)), (pow2heapp x x (smash gv3 gv3)), (pow2heapp x x Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) gv5), (pow2heapp x (find_max' n q) gv3), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1))
(pow2heapp x (find_max' n q) (Node n a2 gv5)), (pow2heapp x (find_max' n q) (Node n a2 gv3)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node n a1 gv5)), (pow2heapp x (find_max' n q) (Node n a1 gv3)), (pow2heapp x (find_max' n q) (Node n gv5 a2)), (pow2heapp x (find_max' n q) (Node n gv5 a1)), (pow2heapp x (find_max' n q) (Node n gv5 gv5)), (pow2heapp x (find_max' n q) (Node n gv5 gv3))
(pow2heapp x (find_max' n q) (Node n gv3 a2)), (pow2heapp x (find_max' n q) (Node n gv3 a1)), (pow2heapp x (find_max' n q) (Node n gv3 gv5)), (pow2heapp x (find_max' n q) (Node n gv3 gv3)), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a2 gv5)), (pow2heapp x (find_max' n q) (Node x a2 gv3)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1))
(pow2heapp x (find_max' n q) (Node x a1 gv5)), (pow2heapp x (find_max' n q) (Node x a1 gv3)), (pow2heapp x (find_max' n q) (Node x gv5 a2)), (pow2heapp x (find_max' n q) (Node x gv5 a1)), (pow2heapp x (find_max' n q) (Node x gv5 gv5)), (pow2heapp x (find_max' n q) (Node x gv5 gv3)), (pow2heapp x (find_max' n q) (Node x gv3 a2)), (pow2heapp x (find_max' n q) (Node x gv3 a1)), (pow2heapp x (find_max' n q) (Node x gv3 gv5)), (pow2heapp x (find_max' n q) (Node x gv3 gv3))
(pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a2 gv5)), (pow2heapp x (find_max' n q) (smash a2 gv3)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) (smash a1 gv5)), (pow2heapp x (find_max' n q) (smash a1 gv3)), (pow2heapp x (find_max' n q) (smash gv5 a2)), (pow2heapp x (find_max' n q) (smash gv5 a1))
(pow2heapp x (find_max' n q) (smash gv5 gv5)), (pow2heapp x (find_max' n q) (smash gv5 gv3)), (pow2heapp x (find_max' n q) (smash gv3 a2)), (pow2heapp x (find_max' n q) (smash gv3 a1)), (pow2heapp x (find_max' n q) (smash gv3 gv5)), (pow2heapp x (find_max' n q) (smash gv3 gv3)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) gv5)
(pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a2 gv5)), (pow2heapp x (find_max' x q) (Node n a2 gv3)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (Node n a1 gv5)), (pow2heapp x (find_max' x q) (Node n a1 gv3)), (pow2heapp x (find_max' x q) (Node n gv5 a2))
(pow2heapp x (find_max' x q) (Node n gv5 a1)), (pow2heapp x (find_max' x q) (Node n gv5 gv5)), (pow2heapp x (find_max' x q) (Node n gv5 gv3)), (pow2heapp x (find_max' x q) (Node n gv3 a2)), (pow2heapp x (find_max' x q) (Node n gv3 a1)), (pow2heapp x (find_max' x q) (Node n gv3 gv5)), (pow2heapp x (find_max' x q) (Node n gv3 gv3)), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a2 gv5))
(pow2heapp x (find_max' x q) (Node x a2 gv3)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node x a1 gv5)), (pow2heapp x (find_max' x q) (Node x a1 gv3)), (pow2heapp x (find_max' x q) (Node x gv5 a2)), (pow2heapp x (find_max' x q) (Node x gv5 a1)), (pow2heapp x (find_max' x q) (Node x gv5 gv5)), (pow2heapp x (find_max' x q) (Node x gv5 gv3)), (pow2heapp x (find_max' x q) (Node x gv3 a2))
(pow2heapp x (find_max' x q) (Node x gv3 a1)), (pow2heapp x (find_max' x q) (Node x gv3 gv5)), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a2 gv5)), (pow2heapp x (find_max' x q) (smash a2 gv3)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) (smash a1 gv5))
(pow2heapp x (find_max' x q) (smash a1 gv3)), (pow2heapp x (find_max' x q) (smash gv5 a2)), (pow2heapp x (find_max' x q) (smash gv5 a1)), (pow2heapp x (find_max' x q) (smash gv5 gv5)), (pow2heapp x (find_max' x q) (smash gv5 gv3)), (pow2heapp x (find_max' x q) (smash gv3 a2)), (pow2heapp x (find_max' x q) (smash gv3 a1)), (pow2heapp x (find_max' x q) (smash gv3 gv5)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf)
(pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) gv5), (pow2heapp x (length q) gv3), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a2 gv5)), (pow2heapp x (length q) (Node n a2 gv3)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1))
(pow2heapp x (length q) (Node n a1 gv5)), (pow2heapp x (length q) (Node n a1 gv3)), (pow2heapp x (length q) (Node n gv5 a2)), (pow2heapp x (length q) (Node n gv5 a1)), (pow2heapp x (length q) (Node n gv5 gv5)), (pow2heapp x (length q) (Node n gv5 gv3)), (pow2heapp x (length q) (Node n gv3 a2)), (pow2heapp x (length q) (Node n gv3 a1)), (pow2heapp x (length q) (Node n gv3 gv5)), (pow2heapp x (length q) (Node n gv3 gv3))
(pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a2 gv5)), (pow2heapp x (length q) (Node x a2 gv3)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node x a1 gv5)), (pow2heapp x (length q) (Node x a1 gv3)), (pow2heapp x (length q) (Node x gv5 a2)), (pow2heapp x (length q) (Node x gv5 a1))
(pow2heapp x (length q) (Node x gv5 gv5)), (pow2heapp x (length q) (Node x gv5 gv3)), (pow2heapp x (length q) (Node x gv3 a2)), (pow2heapp x (length q) (Node x gv3 a1)), (pow2heapp x (length q) (Node x gv3 gv5)), (pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a2 gv5)), (pow2heapp x (length q) (smash a2 gv3))
(pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) (smash a1 gv5)), (pow2heapp x (length q) (smash a1 gv3)), (pow2heapp x (length q) (smash gv5 a2)), (pow2heapp x (length q) (smash gv5 a1)), (pow2heapp x (length q) (smash gv5 gv5)), (pow2heapp x (length q) (smash gv5 gv3)), (pow2heapp x (length q) (smash gv3 a2)), (pow2heapp x (length q) (smash gv3 a1))
(pow2heapp x (length q) (smash gv3 gv5)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n gv5), (pow2heapp (find_max' n q) n gv3), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a2 gv5))
(pow2heapp (find_max' n q) n (Node n a2 gv3)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node n a1 gv5)), (pow2heapp (find_max' n q) n (Node n a1 gv3)), (pow2heapp (find_max' n q) n (Node n gv5 a2)), (pow2heapp (find_max' n q) n (Node n gv5 a1)), (pow2heapp (find_max' n q) n (Node n gv5 gv5)), (pow2heapp (find_max' n q) n (Node n gv5 gv3)), (pow2heapp (find_max' n q) n (Node n gv3 a2))
(pow2heapp (find_max' n q) n (Node n gv3 a1)), (pow2heapp (find_max' n q) n (Node n gv3 gv5)), (pow2heapp (find_max' n q) n (Node n gv3 gv3)), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a2 gv5)), (pow2heapp (find_max' n q) n (Node x a2 gv3)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node x a1 gv5))
(pow2heapp (find_max' n q) n (Node x a1 gv3)), (pow2heapp (find_max' n q) n (Node x gv5 a2)), (pow2heapp (find_max' n q) n (Node x gv5 a1)), (pow2heapp (find_max' n q) n (Node x gv5 gv5)), (pow2heapp (find_max' n q) n (Node x gv5 gv3)), (pow2heapp (find_max' n q) n (Node x gv3 a2)), (pow2heapp (find_max' n q) n (Node x gv3 a1)), (pow2heapp (find_max' n q) n (Node x gv3 gv5)), (pow2heapp (find_max' n q) n (Node x gv3 gv3)), (pow2heapp (find_max' n q) n (smash a2 a2))
(pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a2 gv5)), (pow2heapp (find_max' n q) n (smash a2 gv3)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n (smash a1 gv5)), (pow2heapp (find_max' n q) n (smash a1 gv3)), (pow2heapp (find_max' n q) n (smash gv5 a2)), (pow2heapp (find_max' n q) n (smash gv5 a1)), (pow2heapp (find_max' n q) n (smash gv5 gv5))
(pow2heapp (find_max' n q) n (smash gv5 gv3)), (pow2heapp (find_max' n q) n (smash gv3 a2)), (pow2heapp (find_max' n q) n (smash gv3 a1)), (pow2heapp (find_max' n q) n (smash gv3 gv5)), (pow2heapp (find_max' n q) n (smash gv3 gv3)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x gv5), (pow2heapp (find_max' n q) x gv3)
(pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a2 gv5)), (pow2heapp (find_max' n q) x (Node n a2 gv3)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (Node n a1 gv5)), (pow2heapp (find_max' n q) x (Node n a1 gv3)), (pow2heapp (find_max' n q) x (Node n gv5 a2)), (pow2heapp (find_max' n q) x (Node n gv5 a1))
(pow2heapp (find_max' n q) x (Node n gv5 gv5)), (pow2heapp (find_max' n q) x (Node n gv5 gv3)), (pow2heapp (find_max' n q) x (Node n gv3 a2)), (pow2heapp (find_max' n q) x (Node n gv3 a1)), (pow2heapp (find_max' n q) x (Node n gv3 gv5)), (pow2heapp (find_max' n q) x (Node n gv3 gv3)), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a2 gv5)), (pow2heapp (find_max' n q) x (Node x a2 gv3))
(pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node x a1 gv5)), (pow2heapp (find_max' n q) x (Node x a1 gv3)), (pow2heapp (find_max' n q) x (Node x gv5 a2)), (pow2heapp (find_max' n q) x (Node x gv5 a1)), (pow2heapp (find_max' n q) x (Node x gv5 gv5)), (pow2heapp (find_max' n q) x (Node x gv5 gv3)), (pow2heapp (find_max' n q) x (Node x gv3 a2)), (pow2heapp (find_max' n q) x (Node x gv3 a1))
(pow2heapp (find_max' n q) x (Node x gv3 gv5)), (pow2heapp (find_max' n q) x (Node x gv3 gv3)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a2 gv5)), (pow2heapp (find_max' n q) x (smash a2 gv3)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x (smash a1 gv5)), (pow2heapp (find_max' n q) x (smash a1 gv3))
(pow2heapp (find_max' n q) x (smash gv5 a2)), (pow2heapp (find_max' n q) x (smash gv5 a1)), (pow2heapp (find_max' n q) x (smash gv5 gv5)), (pow2heapp (find_max' n q) x (smash gv5 gv3)), (pow2heapp (find_max' n q) x (smash gv3 a2)), (pow2heapp (find_max' n q) x (smash gv3 a1)), (pow2heapp (find_max' n q) x (smash gv3 gv5)), (pow2heapp (find_max' n q) x (smash gv3 gv3)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2)
(pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) gv5), (pow2heapp (find_max' n q) (find_max' n q) gv3), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv5))
(pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 gv5))
(pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 gv3)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv3 gv5))
(pow2heapp (find_max' n q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) gv5), (pow2heapp (find_max' n q) (find_max' x q) gv3), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv3))
(pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv3 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv3))
(pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv3)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 gv3))
(pow2heapp (find_max' n q) (find_max' x q) (smash gv3 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) gv5), (pow2heapp (find_max' n q) (length q) gv3), (pow2heapp (find_max' n q) (length q) (Node n a2 a2))
(pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv3)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv3)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv5 gv5))
(pow2heapp (find_max' n q) (length q) (Node n gv5 gv3)), (pow2heapp (find_max' n q) (length q) (Node n gv3 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv3 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv3 gv5)), (pow2heapp (find_max' n q) (length q) (Node n gv3 gv3)), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv3)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2))
(pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv3)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (length q) (Node x gv5 gv3)), (pow2heapp (find_max' n q) (length q) (Node x gv3 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv3 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv3 gv5))
(pow2heapp (find_max' n q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 gv5)), (pow2heapp (find_max' n q) (length q) (smash a2 gv3)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 gv5)), (pow2heapp (find_max' n q) (length q) (smash a1 gv3)), (pow2heapp (find_max' n q) (length q) (smash gv5 a2))
(pow2heapp (find_max' n q) (length q) (smash gv5 a1)), (pow2heapp (find_max' n q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (length q) (smash gv5 gv3)), (pow2heapp (find_max' n q) (length q) (smash gv3 a2)), (pow2heapp (find_max' n q) (length q) (smash gv3 a1)), (pow2heapp (find_max' n q) (length q) (smash gv3 gv5)), (pow2heapp (find_max' n q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1)
(pow2heapp (find_max' x q) n gv5), (pow2heapp (find_max' x q) n gv3), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a2 gv5)), (pow2heapp (find_max' x q) n (Node n a2 gv3)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (Node n a1 gv5)), (pow2heapp (find_max' x q) n (Node n a1 gv3))
(pow2heapp (find_max' x q) n (Node n gv5 a2)), (pow2heapp (find_max' x q) n (Node n gv5 a1)), (pow2heapp (find_max' x q) n (Node n gv5 gv5)), (pow2heapp (find_max' x q) n (Node n gv5 gv3)), (pow2heapp (find_max' x q) n (Node n gv3 a2)), (pow2heapp (find_max' x q) n (Node n gv3 a1)), (pow2heapp (find_max' x q) n (Node n gv3 gv5)), (pow2heapp (find_max' x q) n (Node n gv3 gv3)), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1))
(pow2heapp (find_max' x q) n (Node x a2 gv5)), (pow2heapp (find_max' x q) n (Node x a2 gv3)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node x a1 gv5)), (pow2heapp (find_max' x q) n (Node x a1 gv3)), (pow2heapp (find_max' x q) n (Node x gv5 a2)), (pow2heapp (find_max' x q) n (Node x gv5 a1)), (pow2heapp (find_max' x q) n (Node x gv5 gv5)), (pow2heapp (find_max' x q) n (Node x gv5 gv3))
(pow2heapp (find_max' x q) n (Node x gv3 a2)), (pow2heapp (find_max' x q) n (Node x gv3 a1)), (pow2heapp (find_max' x q) n (Node x gv3 gv5)), (pow2heapp (find_max' x q) n (Node x gv3 gv3)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a2 gv5)), (pow2heapp (find_max' x q) n (smash a2 gv3)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1))
(pow2heapp (find_max' x q) n (smash a1 gv5)), (pow2heapp (find_max' x q) n (smash a1 gv3)), (pow2heapp (find_max' x q) n (smash gv5 a2)), (pow2heapp (find_max' x q) n (smash gv5 a1)), (pow2heapp (find_max' x q) n (smash gv5 gv5)), (pow2heapp (find_max' x q) n (smash gv5 gv3)), (pow2heapp (find_max' x q) n (smash gv3 a2)), (pow2heapp (find_max' x q) n (smash gv3 a1)), (pow2heapp (find_max' x q) n (smash gv3 gv5)), (pow2heapp (find_max' x q) n (smash gv3 gv3))
(pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x gv5), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a2 gv5)), (pow2heapp (find_max' x q) x (Node n a2 gv3)), (pow2heapp (find_max' x q) x (Node n a1 a2))
(pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node n a1 gv5)), (pow2heapp (find_max' x q) x (Node n a1 gv3)), (pow2heapp (find_max' x q) x (Node n gv5 a2)), (pow2heapp (find_max' x q) x (Node n gv5 a1)), (pow2heapp (find_max' x q) x (Node n gv5 gv5)), (pow2heapp (find_max' x q) x (Node n gv5 gv3)), (pow2heapp (find_max' x q) x (Node n gv3 a2)), (pow2heapp (find_max' x q) x (Node n gv3 a1)), (pow2heapp (find_max' x q) x (Node n gv3 gv5))
(pow2heapp (find_max' x q) x (Node n gv3 gv3)), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a2 gv5)), (pow2heapp (find_max' x q) x (Node x a2 gv3)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node x a1 gv5)), (pow2heapp (find_max' x q) x (Node x a1 gv3)), (pow2heapp (find_max' x q) x (Node x gv5 a2))
(pow2heapp (find_max' x q) x (Node x gv5 a1)), (pow2heapp (find_max' x q) x (Node x gv5 gv5)), (pow2heapp (find_max' x q) x (Node x gv5 gv3)), (pow2heapp (find_max' x q) x (Node x gv3 a2)), (pow2heapp (find_max' x q) x (Node x gv3 a1)), (pow2heapp (find_max' x q) x (Node x gv3 gv5)), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a2 gv5))
(pow2heapp (find_max' x q) x (smash a2 gv3)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x (smash a1 gv5)), (pow2heapp (find_max' x q) x (smash a1 gv3)), (pow2heapp (find_max' x q) x (smash gv5 a2)), (pow2heapp (find_max' x q) x (smash gv5 a1)), (pow2heapp (find_max' x q) x (smash gv5 gv5)), (pow2heapp (find_max' x q) x (smash gv5 gv3)), (pow2heapp (find_max' x q) x (smash gv3 a2))
(pow2heapp (find_max' x q) x (smash gv3 a1)), (pow2heapp (find_max' x q) x (smash gv3 gv5)), (pow2heapp (find_max' x q) x (smash gv3 gv3)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) gv5), (pow2heapp (find_max' x q) (find_max' n q) gv3), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 gv3))
(pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv3 gv3))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a1))
(pow2heapp (find_max' x q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 gv3)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) gv5)
(pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv5))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv5))
(pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf)
(pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) gv5), (pow2heapp (find_max' x q) (length q) gv3), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv3)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1))
(pow2heapp (find_max' x q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv3)), (pow2heapp (find_max' x q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (length q) (Node n gv5 gv3)), (pow2heapp (find_max' x q) (length q) (Node n gv3 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv3 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv3 gv5)), (pow2heapp (find_max' x q) (length q) (Node n gv3 gv3))
(pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv3)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv3)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a1))
(pow2heapp (find_max' x q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (length q) (Node x gv5 gv3)), (pow2heapp (find_max' x q) (length q) (Node x gv3 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv3 a1)), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv5)), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 gv5)), (pow2heapp (find_max' x q) (length q) (smash a2 gv3))
(pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 gv5)), (pow2heapp (find_max' x q) (length q) (smash a1 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv5 a2)), (pow2heapp (find_max' x q) (length q) (smash gv5 a1)), (pow2heapp (find_max' x q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (length q) (smash gv5 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 a2)), (pow2heapp (find_max' x q) (length q) (smash gv3 a1))
(pow2heapp (find_max' x q) (length q) (smash gv3 gv5)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n gv5), (pow2heapp (length q) n gv3), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a2 gv5))
(pow2heapp (length q) n (Node n a2 gv3)), (pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node n a1 gv5)), (pow2heapp (length q) n (Node n a1 gv3)), (pow2heapp (length q) n (Node n gv5 a2)), (pow2heapp (length q) n (Node n gv5 a1)), (pow2heapp (length q) n (Node n gv5 gv5)), (pow2heapp (length q) n (Node n gv5 gv3)), (pow2heapp (length q) n (Node n gv3 a2))
(pow2heapp (length q) n (Node n gv3 a1)), (pow2heapp (length q) n (Node n gv3 gv5)), (pow2heapp (length q) n (Node n gv3 gv3)), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a2 gv5)), (pow2heapp (length q) n (Node x a2 gv3)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node x a1 gv5))
(pow2heapp (length q) n (Node x a1 gv3)), (pow2heapp (length q) n (Node x gv5 a2)), (pow2heapp (length q) n (Node x gv5 a1)), (pow2heapp (length q) n (Node x gv5 gv5)), (pow2heapp (length q) n (Node x gv5 gv3)), (pow2heapp (length q) n (Node x gv3 a2)), (pow2heapp (length q) n (Node x gv3 a1)), (pow2heapp (length q) n (Node x gv3 gv5)), (pow2heapp (length q) n (Node x gv3 gv3)), (pow2heapp (length q) n (smash a2 a2))
(pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a2 gv5)), (pow2heapp (length q) n (smash a2 gv3)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n (smash a1 gv5)), (pow2heapp (length q) n (smash a1 gv3)), (pow2heapp (length q) n (smash gv5 a2)), (pow2heapp (length q) n (smash gv5 a1)), (pow2heapp (length q) n (smash gv5 gv5))
(pow2heapp (length q) n (smash gv5 gv3)), (pow2heapp (length q) n (smash gv3 a2)), (pow2heapp (length q) n (smash gv3 a1)), (pow2heapp (length q) n (smash gv3 gv5)), (pow2heapp (length q) n (smash gv3 gv3)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x gv5), (pow2heapp (length q) x gv3)
(pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a2 gv5)), (pow2heapp (length q) x (Node n a2 gv3)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (Node n a1 gv5)), (pow2heapp (length q) x (Node n a1 gv3)), (pow2heapp (length q) x (Node n gv5 a2)), (pow2heapp (length q) x (Node n gv5 a1))
(pow2heapp (length q) x (Node n gv5 gv5)), (pow2heapp (length q) x (Node n gv5 gv3)), (pow2heapp (length q) x (Node n gv3 a2)), (pow2heapp (length q) x (Node n gv3 a1)), (pow2heapp (length q) x (Node n gv3 gv5)), (pow2heapp (length q) x (Node n gv3 gv3)), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a2 gv5)), (pow2heapp (length q) x (Node x a2 gv3))
(pow2heapp (length q) x (Node x a1 a2)), (pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node x a1 gv5)), (pow2heapp (length q) x (Node x a1 gv3)), (pow2heapp (length q) x (Node x gv5 a2)), (pow2heapp (length q) x (Node x gv5 a1)), (pow2heapp (length q) x (Node x gv5 gv5)), (pow2heapp (length q) x (Node x gv5 gv3)), (pow2heapp (length q) x (Node x gv3 a2)), (pow2heapp (length q) x (Node x gv3 a1))
(pow2heapp (length q) x (Node x gv3 gv5)), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a2 gv5)), (pow2heapp (length q) x (smash a2 gv3)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x (smash a1 gv5)), (pow2heapp (length q) x (smash a1 gv3))
(pow2heapp (length q) x (smash gv5 a2)), (pow2heapp (length q) x (smash gv5 a1)), (pow2heapp (length q) x (smash gv5 gv5)), (pow2heapp (length q) x (smash gv5 gv3)), (pow2heapp (length q) x (smash gv3 a2)), (pow2heapp (length q) x (smash gv3 a1)), (pow2heapp (length q) x (smash gv3 gv5)), (pow2heapp (length q) x (smash gv3 gv3)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' n q) a2)
(pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) gv5), (pow2heapp (length q) (find_max' n q) gv3), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv3)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv5))
(pow2heapp (length q) (find_max' n q) (Node n a1 gv3)), (pow2heapp (length q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' n q) (Node n gv5 gv3)), (pow2heapp (length q) (find_max' n q) (Node n gv3 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv3 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv3 gv5)), (pow2heapp (length q) (find_max' n q) (Node n gv3 gv3)), (pow2heapp (length q) (find_max' n q) (Node x a2 a2))
(pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv3)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv3)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node x gv5 gv5))
(pow2heapp (length q) (find_max' n q) (Node x gv5 gv3)), (pow2heapp (length q) (find_max' n q) (Node x gv3 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv3 a1)), (pow2heapp (length q) (find_max' n q) (Node x gv3 gv5)), (pow2heapp (length q) (find_max' n q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 gv5)), (pow2heapp (length q) (find_max' n q) (smash a2 gv3)), (pow2heapp (length q) (find_max' n q) (smash a1 a2))
(pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 gv5)), (pow2heapp (length q) (find_max' n q) (smash a1 gv3)), (pow2heapp (length q) (find_max' n q) (smash gv5 a2)), (pow2heapp (length q) (find_max' n q) (smash gv5 a1)), (pow2heapp (length q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' n q) (smash gv5 gv3)), (pow2heapp (length q) (find_max' n q) (smash gv3 a2)), (pow2heapp (length q) (find_max' n q) (smash gv3 a1)), (pow2heapp (length q) (find_max' n q) (smash gv3 gv5))
(pow2heapp (length q) (find_max' n q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) gv5), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv3))
(pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv3)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' x q) (Node n gv5 gv3)), (pow2heapp (length q) (find_max' x q) (Node n gv3 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv3 a1))
(pow2heapp (length q) (find_max' x q) (Node n gv3 gv5)), (pow2heapp (length q) (find_max' x q) (Node n gv3 gv3)), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv3)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv3))
(pow2heapp (length q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' x q) (Node x gv5 gv3)), (pow2heapp (length q) (find_max' x q) (Node x gv3 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv3 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv5)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1))
(pow2heapp (length q) (find_max' x q) (smash a2 gv5)), (pow2heapp (length q) (find_max' x q) (smash a2 gv3)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 gv5)), (pow2heapp (length q) (find_max' x q) (smash a1 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv5 a2)), (pow2heapp (length q) (find_max' x q) (smash gv5 a1)), (pow2heapp (length q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' x q) (smash gv5 gv3))
(pow2heapp (length q) (find_max' x q) (smash gv3 a2)), (pow2heapp (length q) (find_max' x q) (smash gv3 a1)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv5)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) gv5), (pow2heapp (length q) (length q) gv3), (pow2heapp (length q) (length q) (Node n a2 a2))
(pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a2 gv5)), (pow2heapp (length q) (length q) (Node n a2 gv3)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node n a1 gv5)), (pow2heapp (length q) (length q) (Node n a1 gv3)), (pow2heapp (length q) (length q) (Node n gv5 a2)), (pow2heapp (length q) (length q) (Node n gv5 a1)), (pow2heapp (length q) (length q) (Node n gv5 gv5))
(pow2heapp (length q) (length q) (Node n gv5 gv3)), (pow2heapp (length q) (length q) (Node n gv3 a2)), (pow2heapp (length q) (length q) (Node n gv3 a1)), (pow2heapp (length q) (length q) (Node n gv3 gv5)), (pow2heapp (length q) (length q) (Node n gv3 gv3)), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a2 gv5)), (pow2heapp (length q) (length q) (Node x a2 gv3)), (pow2heapp (length q) (length q) (Node x a1 a2))
(pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node x a1 gv5)), (pow2heapp (length q) (length q) (Node x a1 gv3)), (pow2heapp (length q) (length q) (Node x gv5 a2)), (pow2heapp (length q) (length q) (Node x gv5 a1)), (pow2heapp (length q) (length q) (Node x gv5 gv5)), (pow2heapp (length q) (length q) (Node x gv5 gv3)), (pow2heapp (length q) (length q) (Node x gv3 a2)), (pow2heapp (length q) (length q) (Node x gv3 a1)), (pow2heapp (length q) (length q) (Node x gv3 gv5))
(pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a2 gv5)), (pow2heapp (length q) (length q) (smash a2 gv3)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) (smash a1 gv5)), (pow2heapp (length q) (length q) (smash a1 gv3)), (pow2heapp (length q) (length q) (smash gv5 a2))
(pow2heapp (length q) (length q) (smash gv5 a1)), (pow2heapp (length q) (length q) (smash gv5 gv5)), (pow2heapp (length q) (length q) (smash gv5 gv3)), (pow2heapp (length q) (length q) (smash gv3 a2)), (pow2heapp (length q) (length q) (smash gv3 a1)), (pow2heapp (length q) (length q) (smash gv3 gv5)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (Permutation q (a2 :: q)), (Permutation q (a1 :: q))
(Permutation q (gv5 :: q)), (Permutation q (gv3 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (heap_delete_max gv5)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q q gv5))
(Permutation q (join q q gv3)), (Permutation q (insert n q)), (Permutation q (insert x q)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (carry q gv5)), (Permutation q (carry q gv3)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (gv5 :: q)), (Permutation (a2 :: q) (gv3 :: q)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (heap_delete_max gv5)), (Permutation (a2 :: q) (heap_delete_max gv3)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1))
(Permutation (a2 :: q) (join q q gv5)), (Permutation (a2 :: q) (join q q gv3)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry q gv5)), (Permutation (a2 :: q) (carry q gv3)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) [])
(Permutation (a1 :: q) q), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (gv5 :: q)), (Permutation (a1 :: q) (gv3 :: q)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (heap_delete_max gv5)), (Permutation (a1 :: q) (heap_delete_max gv3)), (Permutation (a1 :: q) (join q q a2))
(Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (join q q gv5)), (Permutation (a1 :: q) (join q q gv3)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry q gv5)), (Permutation (a1 :: q) (carry q gv3)), (Permutation (a1 :: q) (q ++ q))
(Permutation (a1 :: q) []), (Permutation (gv5 :: q) q), (Permutation (gv5 :: q) (a2 :: q)), (Permutation (gv5 :: q) (a1 :: q)), (Permutation (gv5 :: q) (gv3 :: q)), (Permutation (gv5 :: q) (merge q q)), (Permutation (gv5 :: q) (heap_delete_max a2)), (Permutation (gv5 :: q) (heap_delete_max a1)), (Permutation (gv5 :: q) (heap_delete_max gv5)), (Permutation (gv5 :: q) (heap_delete_max gv3))
(Permutation (gv5 :: q) (join q q a2)), (Permutation (gv5 :: q) (join q q a1)), (Permutation (gv5 :: q) (join q q gv5)), (Permutation (gv5 :: q) (join q q gv3)), (Permutation (gv5 :: q) (insert n q)), (Permutation (gv5 :: q) (insert x q)), (Permutation (gv5 :: q) (carry q a2)), (Permutation (gv5 :: q) (carry q a1)), (Permutation (gv5 :: q) (carry q gv5)), (Permutation (gv5 :: q) (carry q gv3))
(Permutation (gv5 :: q) (q ++ q)), (Permutation (gv5 :: q) []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) (a2 :: q)), (Permutation (gv3 :: q) (a1 :: q)), (Permutation (gv3 :: q) (gv5 :: q)), (Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (heap_delete_max a2)), (Permutation (gv3 :: q) (heap_delete_max a1)), (Permutation (gv3 :: q) (heap_delete_max gv5))
(Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q a2)), (Permutation (gv3 :: q) (join q q a1)), (Permutation (gv3 :: q) (join q q gv5)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (insert n q)), (Permutation (gv3 :: q) (insert x q)), (Permutation (gv3 :: q) (carry q a2)), (Permutation (gv3 :: q) (carry q a1)), (Permutation (gv3 :: q) (carry q gv5))
(Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a1 :: q)), (Permutation (merge q q) (gv5 :: q)), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1))
(Permutation (merge q q) (heap_delete_max gv5)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q q gv5)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1))
(Permutation (merge q q) (carry q gv5)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (gv5 :: q)), (Permutation (heap_delete_max a2) (gv3 :: q)), (Permutation (heap_delete_max a2) (merge q q))
(Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv5)), (Permutation (heap_delete_max a2) (heap_delete_max gv3)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q q gv5)), (Permutation (heap_delete_max a2) (join q q gv3)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (carry q a2))
(Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry q gv5)), (Permutation (heap_delete_max a2) (carry q gv3)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a1 :: q)), (Permutation (heap_delete_max a1) (gv5 :: q)), (Permutation (heap_delete_max a1) (gv3 :: q))
(Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv5)), (Permutation (heap_delete_max a1) (heap_delete_max gv3)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q q gv5)), (Permutation (heap_delete_max a1) (join q q gv3)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert x q))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry q gv5)), (Permutation (heap_delete_max a1) (carry q gv3)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv5) q), (Permutation (heap_delete_max gv5) (a2 :: q)), (Permutation (heap_delete_max gv5) (a1 :: q)), (Permutation (heap_delete_max gv5) (gv5 :: q))
(Permutation (heap_delete_max gv5) (gv3 :: q)), (Permutation (heap_delete_max gv5) (merge q q)), (Permutation (heap_delete_max gv5) (heap_delete_max a2)), (Permutation (heap_delete_max gv5) (heap_delete_max a1)), (Permutation (heap_delete_max gv5) (heap_delete_max gv3)), (Permutation (heap_delete_max gv5) (join q q a2)), (Permutation (heap_delete_max gv5) (join q q a1)), (Permutation (heap_delete_max gv5) (join q q gv5)), (Permutation (heap_delete_max gv5) (join q q gv3)), (Permutation (heap_delete_max gv5) (insert n q))
(Permutation (heap_delete_max gv5) (insert x q)), (Permutation (heap_delete_max gv5) (carry q a2)), (Permutation (heap_delete_max gv5) (carry q a1)), (Permutation (heap_delete_max gv5) (carry q gv5)), (Permutation (heap_delete_max gv5) (carry q gv3)), (Permutation (heap_delete_max gv5) (q ++ q)), (Permutation (heap_delete_max gv5) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) (a2 :: q)), (Permutation (heap_delete_max gv3) (a1 :: q))
(Permutation (heap_delete_max gv3) (gv5 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (heap_delete_max a2)), (Permutation (heap_delete_max gv3) (heap_delete_max a1)), (Permutation (heap_delete_max gv3) (heap_delete_max gv5)), (Permutation (heap_delete_max gv3) (join q q a2)), (Permutation (heap_delete_max gv3) (join q q a1)), (Permutation (heap_delete_max gv3) (join q q gv5)), (Permutation (heap_delete_max gv3) (join q q gv3))
(Permutation (heap_delete_max gv3) (insert n q)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (carry q a2)), (Permutation (heap_delete_max gv3) (carry q a1)), (Permutation (heap_delete_max gv3) (carry q gv5)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (q ++ q)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q a2) q), (Permutation (join q q a2) (a2 :: q))
(Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (gv5 :: q)), (Permutation (join q q a2) (gv3 :: q)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (heap_delete_max gv5)), (Permutation (join q q a2) (heap_delete_max gv3)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q q gv5))
(Permutation (join q q a2) (join q q gv3)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry q gv5)), (Permutation (join q q a2) (carry q gv3)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) []), (Permutation (join q q a1) q)
(Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (gv5 :: q)), (Permutation (join q q a1) (gv3 :: q)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (heap_delete_max gv5)), (Permutation (join q q a1) (heap_delete_max gv3)), (Permutation (join q q a1) (join q q a2))
(Permutation (join q q a1) (join q q gv5)), (Permutation (join q q a1) (join q q gv3)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry q gv5)), (Permutation (join q q a1) (carry q gv3)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) [])
(Permutation (join q q gv5) q), (Permutation (join q q gv5) (a2 :: q)), (Permutation (join q q gv5) (a1 :: q)), (Permutation (join q q gv5) (gv5 :: q)), (Permutation (join q q gv5) (gv3 :: q)), (Permutation (join q q gv5) (merge q q)), (Permutation (join q q gv5) (heap_delete_max a2)), (Permutation (join q q gv5) (heap_delete_max a1)), (Permutation (join q q gv5) (heap_delete_max gv5)), (Permutation (join q q gv5) (heap_delete_max gv3))
(Permutation (join q q gv5) (join q q a2)), (Permutation (join q q gv5) (join q q a1)), (Permutation (join q q gv5) (join q q gv3)), (Permutation (join q q gv5) (insert n q)), (Permutation (join q q gv5) (insert x q)), (Permutation (join q q gv5) (carry q a2)), (Permutation (join q q gv5) (carry q a1)), (Permutation (join q q gv5) (carry q gv5)), (Permutation (join q q gv5) (carry q gv3)), (Permutation (join q q gv5) (q ++ q))
(Permutation (join q q gv5) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) (a2 :: q)), (Permutation (join q q gv3) (a1 :: q)), (Permutation (join q q gv3) (gv5 :: q)), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (heap_delete_max a2)), (Permutation (join q q gv3) (heap_delete_max a1)), (Permutation (join q q gv3) (heap_delete_max gv5))
(Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q q a2)), (Permutation (join q q gv3) (join q q a1)), (Permutation (join q q gv3) (join q q gv5)), (Permutation (join q q gv3) (insert n q)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (carry q a2)), (Permutation (join q q gv3) (carry q a1)), (Permutation (join q q gv3) (carry q gv5)), (Permutation (join q q gv3) (carry q gv3))
(Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) []), (Permutation (insert n q) q), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (gv5 :: q)), (Permutation (insert n q) (gv3 :: q)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1))
(Permutation (insert n q) (heap_delete_max gv5)), (Permutation (insert n q) (heap_delete_max gv3)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q q gv5)), (Permutation (insert n q) (join q q gv3)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry q gv5))
(Permutation (insert n q) (carry q gv3)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) []), (Permutation (insert x q) q), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (gv5 :: q)), (Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (heap_delete_max a2))
(Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (heap_delete_max gv5)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q q gv5)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1))
(Permutation (insert x q) (carry q gv5)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (carry q a2) q), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (gv5 :: q)), (Permutation (carry q a2) (gv3 :: q)), (Permutation (carry q a2) (merge q q))
(Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (heap_delete_max gv5)), (Permutation (carry q a2) (heap_delete_max gv3)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q q gv5)), (Permutation (carry q a2) (join q q gv3)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert x q))
(Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry q gv5)), (Permutation (carry q a2) (carry q gv3)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) []), (Permutation (carry q a1) q), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (gv5 :: q)), (Permutation (carry q a1) (gv3 :: q))
(Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (heap_delete_max gv5)), (Permutation (carry q a1) (heap_delete_max gv3)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q q gv5)), (Permutation (carry q a1) (join q q gv3)), (Permutation (carry q a1) (insert n q))
(Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry q gv5)), (Permutation (carry q a1) (carry q gv3)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) []), (Permutation (carry q gv5) q), (Permutation (carry q gv5) (a2 :: q)), (Permutation (carry q gv5) (a1 :: q)), (Permutation (carry q gv5) (gv5 :: q))
(Permutation (carry q gv5) (gv3 :: q)), (Permutation (carry q gv5) (merge q q)), (Permutation (carry q gv5) (heap_delete_max a2)), (Permutation (carry q gv5) (heap_delete_max a1)), (Permutation (carry q gv5) (heap_delete_max gv5)), (Permutation (carry q gv5) (heap_delete_max gv3)), (Permutation (carry q gv5) (join q q a2)), (Permutation (carry q gv5) (join q q a1)), (Permutation (carry q gv5) (join q q gv5)), (Permutation (carry q gv5) (join q q gv3))
(Permutation (carry q gv5) (insert n q)), (Permutation (carry q gv5) (insert x q)), (Permutation (carry q gv5) (carry q a2)), (Permutation (carry q gv5) (carry q a1)), (Permutation (carry q gv5) (carry q gv3)), (Permutation (carry q gv5) (q ++ q)), (Permutation (carry q gv5) []), (Permutation (carry q gv3) q), (Permutation (carry q gv3) (a2 :: q)), (Permutation (carry q gv3) (a1 :: q))
(Permutation (carry q gv3) (gv5 :: q)), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (heap_delete_max a2)), (Permutation (carry q gv3) (heap_delete_max a1)), (Permutation (carry q gv3) (heap_delete_max gv5)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q a2)), (Permutation (carry q gv3) (join q q a1)), (Permutation (carry q gv3) (join q q gv5))
(Permutation (carry q gv3) (join q q gv3)), (Permutation (carry q gv3) (insert n q)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (carry q a2)), (Permutation (carry q gv3) (carry q a1)), (Permutation (carry q gv3) (carry q gv5)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (a2 :: q))
(Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (gv5 :: q)), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (heap_delete_max gv5)), (Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1))
(Permutation (q ++ q) (join q q gv5)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry q gv5)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) []), (Permutation [] q)
(Permutation [] (a2 :: q)), (Permutation [] (a1 :: q)), (Permutation [] (gv5 :: q)), (Permutation [] (gv3 :: q)), (Permutation [] (merge q q)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv5)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q a2))
(Permutation [] (join q q a1)), (Permutation [] (join q q gv5)), (Permutation [] (join q q gv3)), (Permutation [] (insert n q)), (Permutation [] (insert x q)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry q gv5)), (Permutation [] (carry q gv3)), (Permutation [] (q ++ q))
(In a2 (a2 :: q)), (In a2 (a1 :: q)), (In a2 (gv5 :: q)), (In a2 (gv3 :: q)), (In a2 (merge q q)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv5)), (In a2 (heap_delete_max gv3)), (In a2 (join q q a2))
(In a2 (join q q a1)), (In a2 (join q q gv5)), (In a2 (join q q gv3)), (In a2 (insert n q)), (In a2 (insert x q)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (carry q gv5)), (In a2 (carry q gv3)), (In a2 (q ++ q))
(In a1 (a2 :: q)), (In a1 (a1 :: q)), (In a1 (gv5 :: q)), (In a1 (gv3 :: q)), (In a1 (merge q q)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max gv5)), (In a1 (heap_delete_max gv3)), (In a1 (join q q a2))
(In a1 (join q q a1)), (In a1 (join q q gv5)), (In a1 (join q q gv3)), (In a1 (insert n q)), (In a1 (insert x q)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry q gv5)), (In a1 (carry q gv3)), (In a1 (q ++ q))
(In gv5 (a2 :: q)), (In gv5 (a1 :: q)), (In gv5 (gv5 :: q)), (In gv5 (gv3 :: q)), (In gv5 (merge q q)), (In gv5 (heap_delete_max a2)), (In gv5 (heap_delete_max a1)), (In gv5 (heap_delete_max gv5)), (In gv5 (heap_delete_max gv3)), (In gv5 (join q q a2))
(In gv5 (join q q a1)), (In gv5 (join q q gv5)), (In gv5 (join q q gv3)), (In gv5 (insert n q)), (In gv5 (insert x q)), (In gv5 (carry q a2)), (In gv5 (carry q a1)), (In gv5 (carry q gv5)), (In gv5 (carry q gv3)), (In gv5 (q ++ q))
(In gv3 (a2 :: q)), (In gv3 (a1 :: q)), (In gv3 (gv5 :: q)), (In gv3 (gv3 :: q)), (In gv3 (merge q q)), (In gv3 (heap_delete_max a2)), (In gv3 (heap_delete_max a1)), (In gv3 (heap_delete_max gv5)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q a2))
(In gv3 (join q q a1)), (In gv3 (join q q gv5)), (In gv3 (join q q gv3)), (In gv3 (insert n q)), (In gv3 (insert x q)), (In gv3 (carry q a2)), (In gv3 (carry q a1)), (In gv3 (carry q gv5)), (In gv3 (carry q gv3)), (In gv3 (q ++ q))
(In (Node n a2 a2) q), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (gv5 :: q)), (In (Node n a2 a2) (gv3 :: q)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv5)), (In (Node n a2 a2) (heap_delete_max gv3))
(In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q q gv5)), (In (Node n a2 a2) (join q q gv3)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry q gv5)), (In (Node n a2 a2) (carry q gv3))
(In (Node n a2 a2) (q ++ q)), (In (Node n a2 a1) q), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (gv5 :: q)), (In (Node n a2 a1) (gv3 :: q)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv5))
(In (Node n a2 a1) (heap_delete_max gv3)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q q gv5)), (In (Node n a2 a1) (join q q gv3)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry q gv5))
(In (Node n a2 a1) (carry q gv3)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 gv5) q), (In (Node n a2 gv5) (a2 :: q)), (In (Node n a2 gv5) (a1 :: q)), (In (Node n a2 gv5) (gv5 :: q)), (In (Node n a2 gv5) (gv3 :: q)), (In (Node n a2 gv5) (merge q q)), (In (Node n a2 gv5) (heap_delete_max a2)), (In (Node n a2 gv5) (heap_delete_max a1))
(In (Node n a2 gv5) (heap_delete_max gv5)), (In (Node n a2 gv5) (heap_delete_max gv3)), (In (Node n a2 gv5) (join q q a2)), (In (Node n a2 gv5) (join q q a1)), (In (Node n a2 gv5) (join q q gv5)), (In (Node n a2 gv5) (join q q gv3)), (In (Node n a2 gv5) (insert n q)), (In (Node n a2 gv5) (insert x q)), (In (Node n a2 gv5) (carry q a2)), (In (Node n a2 gv5) (carry q a1))
(In (Node n a2 gv5) (carry q gv5)), (In (Node n a2 gv5) (carry q gv3)), (In (Node n a2 gv5) (q ++ q)), (In (Node n a2 gv3) q), (In (Node n a2 gv3) (a2 :: q)), (In (Node n a2 gv3) (a1 :: q)), (In (Node n a2 gv3) (gv5 :: q)), (In (Node n a2 gv3) (gv3 :: q)), (In (Node n a2 gv3) (merge q q)), (In (Node n a2 gv3) (heap_delete_max a2))
(In (Node n a2 gv3) (heap_delete_max a1)), (In (Node n a2 gv3) (heap_delete_max gv5)), (In (Node n a2 gv3) (heap_delete_max gv3)), (In (Node n a2 gv3) (join q q a2)), (In (Node n a2 gv3) (join q q a1)), (In (Node n a2 gv3) (join q q gv5)), (In (Node n a2 gv3) (join q q gv3)), (In (Node n a2 gv3) (insert n q)), (In (Node n a2 gv3) (insert x q)), (In (Node n a2 gv3) (carry q a2))
(In (Node n a2 gv3) (carry q a1)), (In (Node n a2 gv3) (carry q gv5)), (In (Node n a2 gv3) (carry q gv3)), (In (Node n a2 gv3) (q ++ q)), (In (Node n a1 a2) q), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (gv5 :: q)), (In (Node n a1 a2) (gv3 :: q)), (In (Node n a1 a2) (merge q q))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv5)), (In (Node n a1 a2) (heap_delete_max gv3)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q q gv5)), (In (Node n a1 a2) (join q q gv3)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert x q))
(In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry q gv5)), (In (Node n a1 a2) (carry q gv3)), (In (Node n a1 a2) (q ++ q)), (In (Node n a1 a1) q), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (gv5 :: q)), (In (Node n a1 a1) (gv3 :: q))
(In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv5)), (In (Node n a1 a1) (heap_delete_max gv3)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q q gv5)), (In (Node n a1 a1) (join q q gv3)), (In (Node n a1 a1) (insert n q))
(In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry q gv5)), (In (Node n a1 a1) (carry q gv3)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 gv5) q), (In (Node n a1 gv5) (a2 :: q)), (In (Node n a1 gv5) (a1 :: q)), (In (Node n a1 gv5) (gv5 :: q))
(In (Node n a1 gv5) (gv3 :: q)), (In (Node n a1 gv5) (merge q q)), (In (Node n a1 gv5) (heap_delete_max a2)), (In (Node n a1 gv5) (heap_delete_max a1)), (In (Node n a1 gv5) (heap_delete_max gv5)), (In (Node n a1 gv5) (heap_delete_max gv3)), (In (Node n a1 gv5) (join q q a2)), (In (Node n a1 gv5) (join q q a1)), (In (Node n a1 gv5) (join q q gv5)), (In (Node n a1 gv5) (join q q gv3))
(In (Node n a1 gv5) (insert n q)), (In (Node n a1 gv5) (insert x q)), (In (Node n a1 gv5) (carry q a2)), (In (Node n a1 gv5) (carry q a1)), (In (Node n a1 gv5) (carry q gv5)), (In (Node n a1 gv5) (carry q gv3)), (In (Node n a1 gv5) (q ++ q)), (In (Node n a1 gv3) q), (In (Node n a1 gv3) (a2 :: q)), (In (Node n a1 gv3) (a1 :: q))
(In (Node n a1 gv3) (gv5 :: q)), (In (Node n a1 gv3) (gv3 :: q)), (In (Node n a1 gv3) (merge q q)), (In (Node n a1 gv3) (heap_delete_max a2)), (In (Node n a1 gv3) (heap_delete_max a1)), (In (Node n a1 gv3) (heap_delete_max gv5)), (In (Node n a1 gv3) (heap_delete_max gv3)), (In (Node n a1 gv3) (join q q a2)), (In (Node n a1 gv3) (join q q a1)), (In (Node n a1 gv3) (join q q gv5))
(In (Node n a1 gv3) (join q q gv3)), (In (Node n a1 gv3) (insert n q)), (In (Node n a1 gv3) (insert x q)), (In (Node n a1 gv3) (carry q a2)), (In (Node n a1 gv3) (carry q a1)), (In (Node n a1 gv3) (carry q gv5)), (In (Node n a1 gv3) (carry q gv3)), (In (Node n a1 gv3) (q ++ q)), (In (Node n gv5 a2) q), (In (Node n gv5 a2) (a2 :: q))
(In (Node n gv5 a2) (a1 :: q)), (In (Node n gv5 a2) (gv5 :: q)), (In (Node n gv5 a2) (gv3 :: q)), (In (Node n gv5 a2) (merge q q)), (In (Node n gv5 a2) (heap_delete_max a2)), (In (Node n gv5 a2) (heap_delete_max a1)), (In (Node n gv5 a2) (heap_delete_max gv5)), (In (Node n gv5 a2) (heap_delete_max gv3)), (In (Node n gv5 a2) (join q q a2)), (In (Node n gv5 a2) (join q q a1))
(In (Node n gv5 a2) (join q q gv5)), (In (Node n gv5 a2) (join q q gv3)), (In (Node n gv5 a2) (insert n q)), (In (Node n gv5 a2) (insert x q)), (In (Node n gv5 a2) (carry q a2)), (In (Node n gv5 a2) (carry q a1)), (In (Node n gv5 a2) (carry q gv5)), (In (Node n gv5 a2) (carry q gv3)), (In (Node n gv5 a2) (q ++ q)), (In (Node n gv5 a1) q)
(In (Node n gv5 a1) (a2 :: q)), (In (Node n gv5 a1) (a1 :: q)), (In (Node n gv5 a1) (gv5 :: q)), (In (Node n gv5 a1) (gv3 :: q)), (In (Node n gv5 a1) (merge q q)), (In (Node n gv5 a1) (heap_delete_max a2)), (In (Node n gv5 a1) (heap_delete_max a1)), (In (Node n gv5 a1) (heap_delete_max gv5)), (In (Node n gv5 a1) (heap_delete_max gv3)), (In (Node n gv5 a1) (join q q a2))
(In (Node n gv5 a1) (join q q a1)), (In (Node n gv5 a1) (join q q gv5)), (In (Node n gv5 a1) (join q q gv3)), (In (Node n gv5 a1) (insert n q)), (In (Node n gv5 a1) (insert x q)), (In (Node n gv5 a1) (carry q a2)), (In (Node n gv5 a1) (carry q a1)), (In (Node n gv5 a1) (carry q gv5)), (In (Node n gv5 a1) (carry q gv3)), (In (Node n gv5 a1) (q ++ q))
(In (Node n gv5 gv5) q), (In (Node n gv5 gv5) (a2 :: q)), (In (Node n gv5 gv5) (a1 :: q)), (In (Node n gv5 gv5) (gv5 :: q)), (In (Node n gv5 gv5) (gv3 :: q)), (In (Node n gv5 gv5) (merge q q)), (In (Node n gv5 gv5) (heap_delete_max a2)), (In (Node n gv5 gv5) (heap_delete_max a1)), (In (Node n gv5 gv5) (heap_delete_max gv5)), (In (Node n gv5 gv5) (heap_delete_max gv3))
(In (Node n gv5 gv5) (join q q a2)), (In (Node n gv5 gv5) (join q q a1)), (In (Node n gv5 gv5) (join q q gv5)), (In (Node n gv5 gv5) (join q q gv3)), (In (Node n gv5 gv5) (insert n q)), (In (Node n gv5 gv5) (insert x q)), (In (Node n gv5 gv5) (carry q a2)), (In (Node n gv5 gv5) (carry q a1)), (In (Node n gv5 gv5) (carry q gv5)), (In (Node n gv5 gv5) (carry q gv3))
(In (Node n gv5 gv5) (q ++ q)), (In (Node n gv5 gv3) q), (In (Node n gv5 gv3) (a2 :: q)), (In (Node n gv5 gv3) (a1 :: q)), (In (Node n gv5 gv3) (gv5 :: q)), (In (Node n gv5 gv3) (gv3 :: q)), (In (Node n gv5 gv3) (merge q q)), (In (Node n gv5 gv3) (heap_delete_max a2)), (In (Node n gv5 gv3) (heap_delete_max a1)), (In (Node n gv5 gv3) (heap_delete_max gv5))
(In (Node n gv5 gv3) (heap_delete_max gv3)), (In (Node n gv5 gv3) (join q q a2)), (In (Node n gv5 gv3) (join q q a1)), (In (Node n gv5 gv3) (join q q gv5)), (In (Node n gv5 gv3) (join q q gv3)), (In (Node n gv5 gv3) (insert n q)), (In (Node n gv5 gv3) (insert x q)), (In (Node n gv5 gv3) (carry q a2)), (In (Node n gv5 gv3) (carry q a1)), (In (Node n gv5 gv3) (carry q gv5))
(In (Node n gv5 gv3) (carry q gv3)), (In (Node n gv5 gv3) (q ++ q)), (In (Node n gv3 a2) q), (In (Node n gv3 a2) (a2 :: q)), (In (Node n gv3 a2) (a1 :: q)), (In (Node n gv3 a2) (gv5 :: q)), (In (Node n gv3 a2) (gv3 :: q)), (In (Node n gv3 a2) (merge q q)), (In (Node n gv3 a2) (heap_delete_max a2)), (In (Node n gv3 a2) (heap_delete_max a1))
(In (Node n gv3 a2) (heap_delete_max gv5)), (In (Node n gv3 a2) (heap_delete_max gv3)), (In (Node n gv3 a2) (join q q a2)), (In (Node n gv3 a2) (join q q a1)), (In (Node n gv3 a2) (join q q gv5)), (In (Node n gv3 a2) (join q q gv3)), (In (Node n gv3 a2) (insert n q)), (In (Node n gv3 a2) (insert x q)), (In (Node n gv3 a2) (carry q a2)), (In (Node n gv3 a2) (carry q a1))
(In (Node n gv3 a2) (carry q gv5)), (In (Node n gv3 a2) (carry q gv3)), (In (Node n gv3 a2) (q ++ q)), (In (Node n gv3 a1) q), (In (Node n gv3 a1) (a2 :: q)), (In (Node n gv3 a1) (a1 :: q)), (In (Node n gv3 a1) (gv5 :: q)), (In (Node n gv3 a1) (gv3 :: q)), (In (Node n gv3 a1) (merge q q)), (In (Node n gv3 a1) (heap_delete_max a2))
(In (Node n gv3 a1) (heap_delete_max a1)), (In (Node n gv3 a1) (heap_delete_max gv5)), (In (Node n gv3 a1) (heap_delete_max gv3)), (In (Node n gv3 a1) (join q q a2)), (In (Node n gv3 a1) (join q q a1)), (In (Node n gv3 a1) (join q q gv5)), (In (Node n gv3 a1) (join q q gv3)), (In (Node n gv3 a1) (insert n q)), (In (Node n gv3 a1) (insert x q)), (In (Node n gv3 a1) (carry q a2))
(In (Node n gv3 a1) (carry q a1)), (In (Node n gv3 a1) (carry q gv5)), (In (Node n gv3 a1) (carry q gv3)), (In (Node n gv3 a1) (q ++ q)), (In (Node n gv3 gv5) q), (In (Node n gv3 gv5) (a2 :: q)), (In (Node n gv3 gv5) (a1 :: q)), (In (Node n gv3 gv5) (gv5 :: q)), (In (Node n gv3 gv5) (gv3 :: q)), (In (Node n gv3 gv5) (merge q q))
(In (Node n gv3 gv5) (heap_delete_max a2)), (In (Node n gv3 gv5) (heap_delete_max a1)), (In (Node n gv3 gv5) (heap_delete_max gv5)), (In (Node n gv3 gv5) (heap_delete_max gv3)), (In (Node n gv3 gv5) (join q q a2)), (In (Node n gv3 gv5) (join q q a1)), (In (Node n gv3 gv5) (join q q gv5)), (In (Node n gv3 gv5) (join q q gv3)), (In (Node n gv3 gv5) (insert n q)), (In (Node n gv3 gv5) (insert x q))
(In (Node n gv3 gv5) (carry q a2)), (In (Node n gv3 gv5) (carry q a1)), (In (Node n gv3 gv5) (carry q gv5)), (In (Node n gv3 gv5) (carry q gv3)), (In (Node n gv3 gv5) (q ++ q)), (In (Node n gv3 gv3) q), (In (Node n gv3 gv3) (a2 :: q)), (In (Node n gv3 gv3) (a1 :: q)), (In (Node n gv3 gv3) (gv5 :: q)), (In (Node n gv3 gv3) (gv3 :: q))
(In (Node n gv3 gv3) (merge q q)), (In (Node n gv3 gv3) (heap_delete_max a2)), (In (Node n gv3 gv3) (heap_delete_max a1)), (In (Node n gv3 gv3) (heap_delete_max gv5)), (In (Node n gv3 gv3) (heap_delete_max gv3)), (In (Node n gv3 gv3) (join q q a2)), (In (Node n gv3 gv3) (join q q a1)), (In (Node n gv3 gv3) (join q q gv5)), (In (Node n gv3 gv3) (join q q gv3)), (In (Node n gv3 gv3) (insert n q))
(In (Node n gv3 gv3) (insert x q)), (In (Node n gv3 gv3) (carry q a2)), (In (Node n gv3 gv3) (carry q a1)), (In (Node n gv3 gv3) (carry q gv5)), (In (Node n gv3 gv3) (carry q gv3)), (In (Node n gv3 gv3) (q ++ q)), (In (Node x a2 a2) q), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (gv5 :: q))
(In (Node x a2 a2) (gv3 :: q)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (heap_delete_max gv5)), (In (Node x a2 a2) (heap_delete_max gv3)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q q gv5)), (In (Node x a2 a2) (join q q gv3))
(In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry q gv5)), (In (Node x a2 a2) (carry q gv3)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a1) q), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a1 :: q))
(In (Node x a2 a1) (gv5 :: q)), (In (Node x a2 a1) (gv3 :: q)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (heap_delete_max gv5)), (In (Node x a2 a1) (heap_delete_max gv3)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q q gv5))
(In (Node x a2 a1) (join q q gv3)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry q gv5)), (In (Node x a2 a1) (carry q gv3)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 gv5) q), (In (Node x a2 gv5) (a2 :: q))
(In (Node x a2 gv5) (a1 :: q)), (In (Node x a2 gv5) (gv5 :: q)), (In (Node x a2 gv5) (gv3 :: q)), (In (Node x a2 gv5) (merge q q)), (In (Node x a2 gv5) (heap_delete_max a2)), (In (Node x a2 gv5) (heap_delete_max a1)), (In (Node x a2 gv5) (heap_delete_max gv5)), (In (Node x a2 gv5) (heap_delete_max gv3)), (In (Node x a2 gv5) (join q q a2)), (In (Node x a2 gv5) (join q q a1))
(In (Node x a2 gv5) (join q q gv5)), (In (Node x a2 gv5) (join q q gv3)), (In (Node x a2 gv5) (insert n q)), (In (Node x a2 gv5) (insert x q)), (In (Node x a2 gv5) (carry q a2)), (In (Node x a2 gv5) (carry q a1)), (In (Node x a2 gv5) (carry q gv5)), (In (Node x a2 gv5) (carry q gv3)), (In (Node x a2 gv5) (q ++ q)), (In (Node x a2 gv3) q)
(In (Node x a2 gv3) (a2 :: q)), (In (Node x a2 gv3) (a1 :: q)), (In (Node x a2 gv3) (gv5 :: q)), (In (Node x a2 gv3) (gv3 :: q)), (In (Node x a2 gv3) (merge q q)), (In (Node x a2 gv3) (heap_delete_max a2)), (In (Node x a2 gv3) (heap_delete_max a1)), (In (Node x a2 gv3) (heap_delete_max gv5)), (In (Node x a2 gv3) (heap_delete_max gv3)), (In (Node x a2 gv3) (join q q a2))
(In (Node x a2 gv3) (join q q a1)), (In (Node x a2 gv3) (join q q gv5)), (In (Node x a2 gv3) (join q q gv3)), (In (Node x a2 gv3) (insert n q)), (In (Node x a2 gv3) (insert x q)), (In (Node x a2 gv3) (carry q a2)), (In (Node x a2 gv3) (carry q a1)), (In (Node x a2 gv3) (carry q gv5)), (In (Node x a2 gv3) (carry q gv3)), (In (Node x a2 gv3) (q ++ q))
(In (Node x a1 a2) q), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (gv5 :: q)), (In (Node x a1 a2) (gv3 :: q)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (heap_delete_max gv5)), (In (Node x a1 a2) (heap_delete_max gv3))
(In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q q gv5)), (In (Node x a1 a2) (join q q gv3)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry q gv5)), (In (Node x a1 a2) (carry q gv3))
(In (Node x a1 a2) (q ++ q)), (In (Node x a1 a1) q), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (gv5 :: q)), (In (Node x a1 a1) (gv3 :: q)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (heap_delete_max gv5))
(In (Node x a1 a1) (heap_delete_max gv3)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q q gv5)), (In (Node x a1 a1) (join q q gv3)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry q gv5))
(In (Node x a1 a1) (carry q gv3)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 gv5) q), (In (Node x a1 gv5) (a2 :: q)), (In (Node x a1 gv5) (a1 :: q)), (In (Node x a1 gv5) (gv5 :: q)), (In (Node x a1 gv5) (gv3 :: q)), (In (Node x a1 gv5) (merge q q)), (In (Node x a1 gv5) (heap_delete_max a2)), (In (Node x a1 gv5) (heap_delete_max a1))
(In (Node x a1 gv5) (heap_delete_max gv5)), (In (Node x a1 gv5) (heap_delete_max gv3)), (In (Node x a1 gv5) (join q q a2)), (In (Node x a1 gv5) (join q q a1)), (In (Node x a1 gv5) (join q q gv5)), (In (Node x a1 gv5) (join q q gv3)), (In (Node x a1 gv5) (insert n q)), (In (Node x a1 gv5) (insert x q)), (In (Node x a1 gv5) (carry q a2)), (In (Node x a1 gv5) (carry q a1))
(In (Node x a1 gv5) (carry q gv5)), (In (Node x a1 gv5) (carry q gv3)), (In (Node x a1 gv5) (q ++ q)), (In (Node x a1 gv3) q), (In (Node x a1 gv3) (a2 :: q)), (In (Node x a1 gv3) (a1 :: q)), (In (Node x a1 gv3) (gv5 :: q)), (In (Node x a1 gv3) (gv3 :: q)), (In (Node x a1 gv3) (merge q q)), (In (Node x a1 gv3) (heap_delete_max a2))
(In (Node x a1 gv3) (heap_delete_max a1)), (In (Node x a1 gv3) (heap_delete_max gv5)), (In (Node x a1 gv3) (heap_delete_max gv3)), (In (Node x a1 gv3) (join q q a2)), (In (Node x a1 gv3) (join q q a1)), (In (Node x a1 gv3) (join q q gv5)), (In (Node x a1 gv3) (join q q gv3)), (In (Node x a1 gv3) (insert n q)), (In (Node x a1 gv3) (insert x q)), (In (Node x a1 gv3) (carry q a2))
(In (Node x a1 gv3) (carry q a1)), (In (Node x a1 gv3) (carry q gv5)), (In (Node x a1 gv3) (carry q gv3)), (In (Node x a1 gv3) (q ++ q)), (In (Node x gv5 a2) q), (In (Node x gv5 a2) (a2 :: q)), (In (Node x gv5 a2) (a1 :: q)), (In (Node x gv5 a2) (gv5 :: q)), (In (Node x gv5 a2) (gv3 :: q)), (In (Node x gv5 a2) (merge q q))
(In (Node x gv5 a2) (heap_delete_max a2)), (In (Node x gv5 a2) (heap_delete_max a1)), (In (Node x gv5 a2) (heap_delete_max gv5)), (In (Node x gv5 a2) (heap_delete_max gv3)), (In (Node x gv5 a2) (join q q a2)), (In (Node x gv5 a2) (join q q a1)), (In (Node x gv5 a2) (join q q gv5)), (In (Node x gv5 a2) (join q q gv3)), (In (Node x gv5 a2) (insert n q)), (In (Node x gv5 a2) (insert x q))
(In (Node x gv5 a2) (carry q a2)), (In (Node x gv5 a2) (carry q a1)), (In (Node x gv5 a2) (carry q gv5)), (In (Node x gv5 a2) (carry q gv3)), (In (Node x gv5 a2) (q ++ q)), (In (Node x gv5 a1) q), (In (Node x gv5 a1) (a2 :: q)), (In (Node x gv5 a1) (a1 :: q)), (In (Node x gv5 a1) (gv5 :: q)), (In (Node x gv5 a1) (gv3 :: q))
(In (Node x gv5 a1) (merge q q)), (In (Node x gv5 a1) (heap_delete_max a2)), (In (Node x gv5 a1) (heap_delete_max a1)), (In (Node x gv5 a1) (heap_delete_max gv5)), (In (Node x gv5 a1) (heap_delete_max gv3)), (In (Node x gv5 a1) (join q q a2)), (In (Node x gv5 a1) (join q q a1)), (In (Node x gv5 a1) (join q q gv5)), (In (Node x gv5 a1) (join q q gv3)), (In (Node x gv5 a1) (insert n q))
(In (Node x gv5 a1) (insert x q)), (In (Node x gv5 a1) (carry q a2)), (In (Node x gv5 a1) (carry q a1)), (In (Node x gv5 a1) (carry q gv5)), (In (Node x gv5 a1) (carry q gv3)), (In (Node x gv5 a1) (q ++ q)), (In (Node x gv5 gv5) q), (In (Node x gv5 gv5) (a2 :: q)), (In (Node x gv5 gv5) (a1 :: q)), (In (Node x gv5 gv5) (gv5 :: q))
(In (Node x gv5 gv5) (gv3 :: q)), (In (Node x gv5 gv5) (merge q q)), (In (Node x gv5 gv5) (heap_delete_max a2)), (In (Node x gv5 gv5) (heap_delete_max a1)), (In (Node x gv5 gv5) (heap_delete_max gv5)), (In (Node x gv5 gv5) (heap_delete_max gv3)), (In (Node x gv5 gv5) (join q q a2)), (In (Node x gv5 gv5) (join q q a1)), (In (Node x gv5 gv5) (join q q gv5)), (In (Node x gv5 gv5) (join q q gv3))
(In (Node x gv5 gv5) (insert n q)), (In (Node x gv5 gv5) (insert x q)), (In (Node x gv5 gv5) (carry q a2)), (In (Node x gv5 gv5) (carry q a1)), (In (Node x gv5 gv5) (carry q gv5)), (In (Node x gv5 gv5) (carry q gv3)), (In (Node x gv5 gv5) (q ++ q)), (In (Node x gv5 gv3) q), (In (Node x gv5 gv3) (a2 :: q)), (In (Node x gv5 gv3) (a1 :: q))
(In (Node x gv5 gv3) (gv5 :: q)), (In (Node x gv5 gv3) (gv3 :: q)), (In (Node x gv5 gv3) (merge q q)), (In (Node x gv5 gv3) (heap_delete_max a2)), (In (Node x gv5 gv3) (heap_delete_max a1)), (In (Node x gv5 gv3) (heap_delete_max gv5)), (In (Node x gv5 gv3) (heap_delete_max gv3)), (In (Node x gv5 gv3) (join q q a2)), (In (Node x gv5 gv3) (join q q a1)), (In (Node x gv5 gv3) (join q q gv5))
(In (Node x gv5 gv3) (join q q gv3)), (In (Node x gv5 gv3) (insert n q)), (In (Node x gv5 gv3) (insert x q)), (In (Node x gv5 gv3) (carry q a2)), (In (Node x gv5 gv3) (carry q a1)), (In (Node x gv5 gv3) (carry q gv5)), (In (Node x gv5 gv3) (carry q gv3)), (In (Node x gv5 gv3) (q ++ q)), (In (Node x gv3 a2) q), (In (Node x gv3 a2) (a2 :: q))
(In (Node x gv3 a2) (a1 :: q)), (In (Node x gv3 a2) (gv5 :: q)), (In (Node x gv3 a2) (gv3 :: q)), (In (Node x gv3 a2) (merge q q)), (In (Node x gv3 a2) (heap_delete_max a2)), (In (Node x gv3 a2) (heap_delete_max a1)), (In (Node x gv3 a2) (heap_delete_max gv5)), (In (Node x gv3 a2) (heap_delete_max gv3)), (In (Node x gv3 a2) (join q q a2)), (In (Node x gv3 a2) (join q q a1))
(In (Node x gv3 a2) (join q q gv5)), (In (Node x gv3 a2) (join q q gv3)), (In (Node x gv3 a2) (insert n q)), (In (Node x gv3 a2) (insert x q)), (In (Node x gv3 a2) (carry q a2)), (In (Node x gv3 a2) (carry q a1)), (In (Node x gv3 a2) (carry q gv5)), (In (Node x gv3 a2) (carry q gv3)), (In (Node x gv3 a2) (q ++ q)), (In (Node x gv3 a1) q)
(In (Node x gv3 a1) (a2 :: q)), (In (Node x gv3 a1) (a1 :: q)), (In (Node x gv3 a1) (gv5 :: q)), (In (Node x gv3 a1) (gv3 :: q)), (In (Node x gv3 a1) (merge q q)), (In (Node x gv3 a1) (heap_delete_max a2)), (In (Node x gv3 a1) (heap_delete_max a1)), (In (Node x gv3 a1) (heap_delete_max gv5)), (In (Node x gv3 a1) (heap_delete_max gv3)), (In (Node x gv3 a1) (join q q a2))
(In (Node x gv3 a1) (join q q a1)), (In (Node x gv3 a1) (join q q gv5)), (In (Node x gv3 a1) (join q q gv3)), (In (Node x gv3 a1) (insert n q)), (In (Node x gv3 a1) (insert x q)), (In (Node x gv3 a1) (carry q a2)), (In (Node x gv3 a1) (carry q a1)), (In (Node x gv3 a1) (carry q gv5)), (In (Node x gv3 a1) (carry q gv3)), (In (Node x gv3 a1) (q ++ q))
(In (Node x gv3 gv5) q), (In (Node x gv3 gv5) (a2 :: q)), (In (Node x gv3 gv5) (a1 :: q)), (In (Node x gv3 gv5) (gv5 :: q)), (In (Node x gv3 gv5) (gv3 :: q)), (In (Node x gv3 gv5) (merge q q)), (In (Node x gv3 gv5) (heap_delete_max a2)), (In (Node x gv3 gv5) (heap_delete_max a1)), (In (Node x gv3 gv5) (heap_delete_max gv5)), (In (Node x gv3 gv5) (heap_delete_max gv3))
(In (Node x gv3 gv5) (join q q a2)), (In (Node x gv3 gv5) (join q q a1)), (In (Node x gv3 gv5) (join q q gv5)), (In (Node x gv3 gv5) (join q q gv3)), (In (Node x gv3 gv5) (insert n q)), (In (Node x gv3 gv5) (insert x q)), (In (Node x gv3 gv5) (carry q a2)), (In (Node x gv3 gv5) (carry q a1)), (In (Node x gv3 gv5) (carry q gv5)), (In (Node x gv3 gv5) (carry q gv3))
(In (Node x gv3 gv5) (q ++ q)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) (a2 :: q)), (In (Node x gv3 gv3) (a1 :: q)), (In (Node x gv3 gv3) (gv5 :: q)), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (heap_delete_max a2)), (In (Node x gv3 gv3) (heap_delete_max a1)), (In (Node x gv3 gv3) (heap_delete_max gv5))
(In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q a2)), (In (Node x gv3 gv3) (join q q a1)), (In (Node x gv3 gv3) (join q q gv5)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (insert n q)), (In (Node x gv3 gv3) (insert x q)), (In (Node x gv3 gv3) (carry q a2)), (In (Node x gv3 gv3) (carry q a1)), (In (Node x gv3 gv3) (carry q gv5))
(In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (smash a2 a2) q), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (gv5 :: q)), (In (smash a2 a2) (gv3 :: q)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1))
(In (smash a2 a2) (heap_delete_max gv5)), (In (smash a2 a2) (heap_delete_max gv3)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q q gv5)), (In (smash a2 a2) (join q q gv3)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1))
(In (smash a2 a2) (carry q gv5)), (In (smash a2 a2) (carry q gv3)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a1) q), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (gv5 :: q)), (In (smash a2 a1) (gv3 :: q)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (heap_delete_max a2))
(In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv5)), (In (smash a2 a1) (heap_delete_max gv3)), (In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q q gv5)), (In (smash a2 a1) (join q q gv3)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (carry q a2))
(In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry q gv5)), (In (smash a2 a1) (carry q gv3)), (In (smash a2 a1) (q ++ q)), (In (smash a2 gv5) q), (In (smash a2 gv5) (a2 :: q)), (In (smash a2 gv5) (a1 :: q)), (In (smash a2 gv5) (gv5 :: q)), (In (smash a2 gv5) (gv3 :: q)), (In (smash a2 gv5) (merge q q))
(In (smash a2 gv5) (heap_delete_max a2)), (In (smash a2 gv5) (heap_delete_max a1)), (In (smash a2 gv5) (heap_delete_max gv5)), (In (smash a2 gv5) (heap_delete_max gv3)), (In (smash a2 gv5) (join q q a2)), (In (smash a2 gv5) (join q q a1)), (In (smash a2 gv5) (join q q gv5)), (In (smash a2 gv5) (join q q gv3)), (In (smash a2 gv5) (insert n q)), (In (smash a2 gv5) (insert x q))
(In (smash a2 gv5) (carry q a2)), (In (smash a2 gv5) (carry q a1)), (In (smash a2 gv5) (carry q gv5)), (In (smash a2 gv5) (carry q gv3)), (In (smash a2 gv5) (q ++ q)), (In (smash a2 gv3) q), (In (smash a2 gv3) (a2 :: q)), (In (smash a2 gv3) (a1 :: q)), (In (smash a2 gv3) (gv5 :: q)), (In (smash a2 gv3) (gv3 :: q))
(In (smash a2 gv3) (merge q q)), (In (smash a2 gv3) (heap_delete_max a2)), (In (smash a2 gv3) (heap_delete_max a1)), (In (smash a2 gv3) (heap_delete_max gv5)), (In (smash a2 gv3) (heap_delete_max gv3)), (In (smash a2 gv3) (join q q a2)), (In (smash a2 gv3) (join q q a1)), (In (smash a2 gv3) (join q q gv5)), (In (smash a2 gv3) (join q q gv3)), (In (smash a2 gv3) (insert n q))
(In (smash a2 gv3) (insert x q)), (In (smash a2 gv3) (carry q a2)), (In (smash a2 gv3) (carry q a1)), (In (smash a2 gv3) (carry q gv5)), (In (smash a2 gv3) (carry q gv3)), (In (smash a2 gv3) (q ++ q)), (In (smash a1 a2) q), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (gv5 :: q))
(In (smash a1 a2) (gv3 :: q)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv5)), (In (smash a1 a2) (heap_delete_max gv3)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q q gv5)), (In (smash a1 a2) (join q q gv3))
(In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry q gv5)), (In (smash a1 a2) (carry q gv3)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a1) q), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a1 :: q))
(In (smash a1 a1) (gv5 :: q)), (In (smash a1 a1) (gv3 :: q)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv5)), (In (smash a1 a1) (heap_delete_max gv3)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q q gv5))
(In (smash a1 a1) (join q q gv3)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry q gv5)), (In (smash a1 a1) (carry q gv3)), (In (smash a1 a1) (q ++ q)), (In (smash a1 gv5) q), (In (smash a1 gv5) (a2 :: q))
(In (smash a1 gv5) (a1 :: q)), (In (smash a1 gv5) (gv5 :: q)), (In (smash a1 gv5) (gv3 :: q)), (In (smash a1 gv5) (merge q q)), (In (smash a1 gv5) (heap_delete_max a2)), (In (smash a1 gv5) (heap_delete_max a1)), (In (smash a1 gv5) (heap_delete_max gv5)), (In (smash a1 gv5) (heap_delete_max gv3)), (In (smash a1 gv5) (join q q a2)), (In (smash a1 gv5) (join q q a1))
(In (smash a1 gv5) (join q q gv5)), (In (smash a1 gv5) (join q q gv3)), (In (smash a1 gv5) (insert n q)), (In (smash a1 gv5) (insert x q)), (In (smash a1 gv5) (carry q a2)), (In (smash a1 gv5) (carry q a1)), (In (smash a1 gv5) (carry q gv5)), (In (smash a1 gv5) (carry q gv3)), (In (smash a1 gv5) (q ++ q)), (In (smash a1 gv3) q)
(In (smash a1 gv3) (a2 :: q)), (In (smash a1 gv3) (a1 :: q)), (In (smash a1 gv3) (gv5 :: q)), (In (smash a1 gv3) (gv3 :: q)), (In (smash a1 gv3) (merge q q)), (In (smash a1 gv3) (heap_delete_max a2)), (In (smash a1 gv3) (heap_delete_max a1)), (In (smash a1 gv3) (heap_delete_max gv5)), (In (smash a1 gv3) (heap_delete_max gv3)), (In (smash a1 gv3) (join q q a2))
(In (smash a1 gv3) (join q q a1)), (In (smash a1 gv3) (join q q gv5)), (In (smash a1 gv3) (join q q gv3)), (In (smash a1 gv3) (insert n q)), (In (smash a1 gv3) (insert x q)), (In (smash a1 gv3) (carry q a2)), (In (smash a1 gv3) (carry q a1)), (In (smash a1 gv3) (carry q gv5)), (In (smash a1 gv3) (carry q gv3)), (In (smash a1 gv3) (q ++ q))
(In (smash gv5 a2) q), (In (smash gv5 a2) (a2 :: q)), (In (smash gv5 a2) (a1 :: q)), (In (smash gv5 a2) (gv5 :: q)), (In (smash gv5 a2) (gv3 :: q)), (In (smash gv5 a2) (merge q q)), (In (smash gv5 a2) (heap_delete_max a2)), (In (smash gv5 a2) (heap_delete_max a1)), (In (smash gv5 a2) (heap_delete_max gv5)), (In (smash gv5 a2) (heap_delete_max gv3))
(In (smash gv5 a2) (join q q a2)), (In (smash gv5 a2) (join q q a1)), (In (smash gv5 a2) (join q q gv5)), (In (smash gv5 a2) (join q q gv3)), (In (smash gv5 a2) (insert n q)), (In (smash gv5 a2) (insert x q)), (In (smash gv5 a2) (carry q a2)), (In (smash gv5 a2) (carry q a1)), (In (smash gv5 a2) (carry q gv5)), (In (smash gv5 a2) (carry q gv3))
(In (smash gv5 a2) (q ++ q)), (In (smash gv5 a1) q), (In (smash gv5 a1) (a2 :: q)), (In (smash gv5 a1) (a1 :: q)), (In (smash gv5 a1) (gv5 :: q)), (In (smash gv5 a1) (gv3 :: q)), (In (smash gv5 a1) (merge q q)), (In (smash gv5 a1) (heap_delete_max a2)), (In (smash gv5 a1) (heap_delete_max a1)), (In (smash gv5 a1) (heap_delete_max gv5))
(In (smash gv5 a1) (heap_delete_max gv3)), (In (smash gv5 a1) (join q q a2)), (In (smash gv5 a1) (join q q a1)), (In (smash gv5 a1) (join q q gv5)), (In (smash gv5 a1) (join q q gv3)), (In (smash gv5 a1) (insert n q)), (In (smash gv5 a1) (insert x q)), (In (smash gv5 a1) (carry q a2)), (In (smash gv5 a1) (carry q a1)), (In (smash gv5 a1) (carry q gv5))
(In (smash gv5 a1) (carry q gv3)), (In (smash gv5 a1) (q ++ q)), (In (smash gv5 gv5) q), (In (smash gv5 gv5) (a2 :: q)), (In (smash gv5 gv5) (a1 :: q)), (In (smash gv5 gv5) (gv5 :: q)), (In (smash gv5 gv5) (gv3 :: q)), (In (smash gv5 gv5) (merge q q)), (In (smash gv5 gv5) (heap_delete_max a2)), (In (smash gv5 gv5) (heap_delete_max a1))
(In (smash gv5 gv5) (heap_delete_max gv5)), (In (smash gv5 gv5) (heap_delete_max gv3)), (In (smash gv5 gv5) (join q q a2)), (In (smash gv5 gv5) (join q q a1)), (In (smash gv5 gv5) (join q q gv5)), (In (smash gv5 gv5) (join q q gv3)), (In (smash gv5 gv5) (insert n q)), (In (smash gv5 gv5) (insert x q)), (In (smash gv5 gv5) (carry q a2)), (In (smash gv5 gv5) (carry q a1))
(In (smash gv5 gv5) (carry q gv5)), (In (smash gv5 gv5) (carry q gv3)), (In (smash gv5 gv5) (q ++ q)), (In (smash gv5 gv3) q), (In (smash gv5 gv3) (a2 :: q)), (In (smash gv5 gv3) (a1 :: q)), (In (smash gv5 gv3) (gv5 :: q)), (In (smash gv5 gv3) (gv3 :: q)), (In (smash gv5 gv3) (merge q q)), (In (smash gv5 gv3) (heap_delete_max a2))
(In (smash gv5 gv3) (heap_delete_max a1)), (In (smash gv5 gv3) (heap_delete_max gv5)), (In (smash gv5 gv3) (heap_delete_max gv3)), (In (smash gv5 gv3) (join q q a2)), (In (smash gv5 gv3) (join q q a1)), (In (smash gv5 gv3) (join q q gv5)), (In (smash gv5 gv3) (join q q gv3)), (In (smash gv5 gv3) (insert n q)), (In (smash gv5 gv3) (insert x q)), (In (smash gv5 gv3) (carry q a2))
(In (smash gv5 gv3) (carry q a1)), (In (smash gv5 gv3) (carry q gv5)), (In (smash gv5 gv3) (carry q gv3)), (In (smash gv5 gv3) (q ++ q)), (In (smash gv3 a2) q), (In (smash gv3 a2) (a2 :: q)), (In (smash gv3 a2) (a1 :: q)), (In (smash gv3 a2) (gv5 :: q)), (In (smash gv3 a2) (gv3 :: q)), (In (smash gv3 a2) (merge q q))
(In (smash gv3 a2) (heap_delete_max a2)), (In (smash gv3 a2) (heap_delete_max a1)), (In (smash gv3 a2) (heap_delete_max gv5)), (In (smash gv3 a2) (heap_delete_max gv3)), (In (smash gv3 a2) (join q q a2)), (In (smash gv3 a2) (join q q a1)), (In (smash gv3 a2) (join q q gv5)), (In (smash gv3 a2) (join q q gv3)), (In (smash gv3 a2) (insert n q)), (In (smash gv3 a2) (insert x q))
(In (smash gv3 a2) (carry q a2)), (In (smash gv3 a2) (carry q a1)), (In (smash gv3 a2) (carry q gv5)), (In (smash gv3 a2) (carry q gv3)), (In (smash gv3 a2) (q ++ q)), (In (smash gv3 a1) q), (In (smash gv3 a1) (a2 :: q)), (In (smash gv3 a1) (a1 :: q)), (In (smash gv3 a1) (gv5 :: q)), (In (smash gv3 a1) (gv3 :: q))
(In (smash gv3 a1) (merge q q)), (In (smash gv3 a1) (heap_delete_max a2)), (In (smash gv3 a1) (heap_delete_max a1)), (In (smash gv3 a1) (heap_delete_max gv5)), (In (smash gv3 a1) (heap_delete_max gv3)), (In (smash gv3 a1) (join q q a2)), (In (smash gv3 a1) (join q q a1)), (In (smash gv3 a1) (join q q gv5)), (In (smash gv3 a1) (join q q gv3)), (In (smash gv3 a1) (insert n q))
(In (smash gv3 a1) (insert x q)), (In (smash gv3 a1) (carry q a2)), (In (smash gv3 a1) (carry q a1)), (In (smash gv3 a1) (carry q gv5)), (In (smash gv3 a1) (carry q gv3)), (In (smash gv3 a1) (q ++ q)), (In (smash gv3 gv5) q), (In (smash gv3 gv5) (a2 :: q)), (In (smash gv3 gv5) (a1 :: q)), (In (smash gv3 gv5) (gv5 :: q))
(In (smash gv3 gv5) (gv3 :: q)), (In (smash gv3 gv5) (merge q q)), (In (smash gv3 gv5) (heap_delete_max a2)), (In (smash gv3 gv5) (heap_delete_max a1)), (In (smash gv3 gv5) (heap_delete_max gv5)), (In (smash gv3 gv5) (heap_delete_max gv3)), (In (smash gv3 gv5) (join q q a2)), (In (smash gv3 gv5) (join q q a1)), (In (smash gv3 gv5) (join q q gv5)), (In (smash gv3 gv5) (join q q gv3))
(In (smash gv3 gv5) (insert n q)), (In (smash gv3 gv5) (insert x q)), (In (smash gv3 gv5) (carry q a2)), (In (smash gv3 gv5) (carry q a1)), (In (smash gv3 gv5) (carry q gv5)), (In (smash gv3 gv5) (carry q gv3)), (In (smash gv3 gv5) (q ++ q)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) (a2 :: q)), (In (smash gv3 gv3) (a1 :: q))
(In (smash gv3 gv3) (gv5 :: q)), (In (smash gv3 gv3) (gv3 :: q)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (heap_delete_max a2)), (In (smash gv3 gv3) (heap_delete_max a1)), (In (smash gv3 gv3) (heap_delete_max gv5)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q a2)), (In (smash gv3 gv3) (join q q a1)), (In (smash gv3 gv3) (join q q gv5))
(In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (insert n q)), (In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (carry q a2)), (In (smash gv3 gv3) (carry q a1)), (In (smash gv3 gv3) (carry q gv5)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (q ++ q)), (In Leaf q), (In Leaf (a2 :: q))
(In Leaf (a1 :: q)), (In Leaf (gv5 :: q)), (In Leaf (gv3 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max gv5)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q a2)), (In Leaf (join q q a1))
(In Leaf (join q q gv5)), (In Leaf (join q q gv3)), (In Leaf (insert n q)), (In Leaf (insert x q)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry q gv5)), (In Leaf (carry q gv3)), (In Leaf (q ++ q)), (n < find_max' n q)
(n < find_max' x q), (n < length q), (x < find_max' n q), (x < find_max' x q), (x < length q), (find_max' n q < n), (find_max' n q < x), (find_max' n q < find_max' x q), (find_max' n q < length q), (find_max' x q < n)
(find_max' x q < x), (find_max' x q < find_max' n q), (find_max' x q < length q), (length q < n), (length q < x), (length q < find_max' n q), (length q < find_max' x q), (n <= find_max' n q), (n <= find_max' x q), (n <= length q)
(x <= find_max' n q), (x <= find_max' x q), (x <= length q), (find_max' n q <= n), (find_max' n q <= x), (find_max' n q <= find_max' x q), (find_max' n q <= length q), (find_max' x q <= n), (find_max' x q <= x), (find_max' x q <= find_max' n q)
(find_max' x q <= length q), (length q <= n), (length q <= x), (length q <= find_max' n q), (length q <= find_max' x q), (~ priq q), (~ priqq n q), (~ priqq x q), (~ pow2heap n a2), (~ pow2heap n a1)
(~ pow2heap n gv5), (~ pow2heap n gv3), (~ pow2heap x a2), (~ pow2heap x a1), (~ pow2heap x gv5), (~ pow2heap x gv3), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n gv5), (~ pow2heapp n n gv3)
(~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n x gv5), (~ pow2heapp n x gv3), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x n gv5), (~ pow2heapp x n gv3), (~ pow2heapp x x a2), (~ pow2heapp x x a1)
(~ pow2heapp x x gv5), (~ pow2heapp x x gv3), (~ Permutation q q), (~ In a2 q), (~ In a1 q), (~ In gv5 q), (~ In gv3 q), (~ n < n), (~ n < x), (~ x < n)
(~ x < x), (~ n <= n), (~ n <= x), (~ x <= n), (~ x <= x), (n <> n), (n <> x), (x <> n), (x <> x), (q <> q)
(a2 <> a2), (a2 <> a1), (a2 <> gv5), (a2 <> gv3), (a1 <> a2), (a1 <> a1), (a1 <> gv5), (a1 <> gv3), (gv5 <> a2), (gv5 <> a1)
(gv5 <> gv5), (gv5 <> gv3), (gv3 <> a2), (gv3 <> a1), (gv3 <> gv5), (gv3 <> gv3), (None = Some q), (a2 :: q = q), (a2 :: q = merge q q), (a2 :: q = heap_delete_max a2)
(a2 :: q = heap_delete_max a1), (a2 :: q = heap_delete_max gv5), (a2 :: q = heap_delete_max gv3), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q q gv5), (a2 :: q = join q q gv3), (a2 :: q = insert n q), (a2 :: q = insert x q), (a2 :: q = carry q a2)
(a2 :: q = carry q a1), (a2 :: q = carry q gv5), (a2 :: q = carry q gv3), (a2 :: q = q ++ q), (a2 :: q = []), (a1 :: q = q), (a1 :: q = merge q q), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = heap_delete_max gv5)
(a1 :: q = heap_delete_max gv3), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q q gv5), (a1 :: q = join q q gv3), (a1 :: q = insert n q), (a1 :: q = insert x q), (a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry q gv5)
(a1 :: q = carry q gv3), (a1 :: q = q ++ q), (a1 :: q = []), (gv5 :: q = q), (gv5 :: q = merge q q), (gv5 :: q = heap_delete_max a2), (gv5 :: q = heap_delete_max a1), (gv5 :: q = heap_delete_max gv5), (gv5 :: q = heap_delete_max gv3), (gv5 :: q = join q q a2)
(gv5 :: q = join q q a1), (gv5 :: q = join q q gv5), (gv5 :: q = join q q gv3), (gv5 :: q = insert n q), (gv5 :: q = insert x q), (gv5 :: q = carry q a2), (gv5 :: q = carry q a1), (gv5 :: q = carry q gv5), (gv5 :: q = carry q gv3), (gv5 :: q = q ++ q)
(gv5 :: q = []), (gv3 :: q = q), (gv3 :: q = merge q q), (gv3 :: q = heap_delete_max a2), (gv3 :: q = heap_delete_max a1), (gv3 :: q = heap_delete_max gv5), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q a2), (gv3 :: q = join q q a1), (gv3 :: q = join q q gv5)
(gv3 :: q = join q q gv3), (gv3 :: q = insert n q), (gv3 :: q = insert x q), (gv3 :: q = carry q a2), (gv3 :: q = carry q a1), (gv3 :: q = carry q gv5), (gv3 :: q = carry q gv3), (gv3 :: q = q ++ q), (gv3 :: q = []), (merge q q = q)
(merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = heap_delete_max gv5), (merge q q = heap_delete_max gv3), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q q gv5), (merge q q = join q q gv3), (merge q q = insert n q), (merge q q = insert x q)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry q gv5), (merge q q = carry q gv3), (merge q q = q ++ q), (heap_delete_max a2 = q), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = carry q gv5), (heap_delete_max a2 = carry q gv3)
(heap_delete_max a2 = q ++ q), (heap_delete_max a1 = q), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry q gv5), (heap_delete_max a1 = carry q gv3), (heap_delete_max a1 = q ++ q), (heap_delete_max gv5 = q), (heap_delete_max gv5 = carry q a2), (heap_delete_max gv5 = carry q a1)
(heap_delete_max gv5 = carry q gv5), (heap_delete_max gv5 = carry q gv3), (heap_delete_max gv5 = q ++ q), (heap_delete_max gv3 = q), (heap_delete_max gv3 = carry q a2), (heap_delete_max gv3 = carry q a1), (heap_delete_max gv3 = carry q gv5), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = q ++ q), (join q q a2 = q)
(join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = heap_delete_max gv5), (join q q a2 = heap_delete_max gv3), (join q q a2 = insert n q), (join q q a2 = insert x q), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = carry q gv5), (join q q a2 = carry q gv3)
(join q q a2 = q ++ q), (join q q a1 = q), (join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = heap_delete_max gv5), (join q q a1 = heap_delete_max gv3), (join q q a1 = insert n q), (join q q a1 = insert x q), (join q q a1 = carry q a2), (join q q a1 = carry q a1)
(join q q a1 = carry q gv5), (join q q a1 = carry q gv3), (join q q a1 = q ++ q), (join q q gv5 = q), (join q q gv5 = heap_delete_max a2), (join q q gv5 = heap_delete_max a1), (join q q gv5 = heap_delete_max gv5), (join q q gv5 = heap_delete_max gv3), (join q q gv5 = insert n q), (join q q gv5 = insert x q)
(join q q gv5 = carry q a2), (join q q gv5 = carry q a1), (join q q gv5 = carry q gv5), (join q q gv5 = carry q gv3), (join q q gv5 = q ++ q), (join q q gv3 = q), (join q q gv3 = heap_delete_max a2), (join q q gv3 = heap_delete_max a1), (join q q gv3 = heap_delete_max gv5), (join q q gv3 = heap_delete_max gv3)
(join q q gv3 = insert n q), (join q q gv3 = insert x q), (join q q gv3 = carry q a2), (join q q gv3 = carry q a1), (join q q gv3 = carry q gv5), (join q q gv3 = carry q gv3), (join q q gv3 = q ++ q), (insert n q = q), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1)
(insert n q = heap_delete_max gv5), (insert n q = heap_delete_max gv3), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry q gv5), (insert n q = carry q gv3), (insert n q = q ++ q), (insert x q = q), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1)
(insert x q = heap_delete_max gv5), (insert x q = heap_delete_max gv3), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry q gv5), (insert x q = carry q gv3), (insert x q = q ++ q), (carry q a2 = q), (carry q a2 = q ++ q), (carry q a1 = q)
(carry q a1 = q ++ q), (carry q gv5 = q), (carry q gv5 = q ++ q), (carry q gv3 = q), (carry q gv3 = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = heap_delete_max a2), ([] = heap_delete_max a1)
([] = heap_delete_max gv5), ([] = heap_delete_max gv3), ([] = join q q a2), ([] = join q q a1), ([] = join q q gv5), ([] = join q q gv3), ([] = insert n q), ([] = insert x q), ([] = carry q a2), ([] = carry q a1)
([] = carry q gv5), ([] = carry q gv3), ([] = q ++ q), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux x q), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv5), (Node n a2 a2 = gv3), (Node n a2 a2 = smash a2 a2)
(Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv5), (Node n a2 a2 = smash a2 gv3), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv5), (Node n a2 a2 = smash a1 gv3), (Node n a2 a2 = smash gv5 a2), (Node n a2 a2 = smash gv5 a1), (Node n a2 a2 = smash gv5 gv5)
(Node n a2 a2 = smash gv5 gv3), (Node n a2 a2 = smash gv3 a2), (Node n a2 a2 = smash gv3 a1), (Node n a2 a2 = smash gv3 gv5), (Node n a2 a2 = smash gv3 gv3), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv5), (Node n a2 a1 = gv3), (Node n a2 a1 = smash a2 a2)
(Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv5), (Node n a2 a1 = smash a2 gv3), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv5), (Node n a2 a1 = smash a1 gv3), (Node n a2 a1 = smash gv5 a2), (Node n a2 a1 = smash gv5 a1), (Node n a2 a1 = smash gv5 gv5)
(Node n a2 a1 = smash gv5 gv3), (Node n a2 a1 = smash gv3 a2), (Node n a2 a1 = smash gv3 a1), (Node n a2 a1 = smash gv3 gv5), (Node n a2 a1 = smash gv3 gv3), (Node n a2 gv5 = a2), (Node n a2 gv5 = a1), (Node n a2 gv5 = gv5), (Node n a2 gv5 = gv3), (Node n a2 gv5 = smash a2 a2)
(Node n a2 gv5 = smash a2 a1), (Node n a2 gv5 = smash a2 gv5), (Node n a2 gv5 = smash a2 gv3), (Node n a2 gv5 = smash a1 a2), (Node n a2 gv5 = smash a1 a1), (Node n a2 gv5 = smash a1 gv5), (Node n a2 gv5 = smash a1 gv3), (Node n a2 gv5 = smash gv5 a2), (Node n a2 gv5 = smash gv5 a1), (Node n a2 gv5 = smash gv5 gv5)
(Node n a2 gv5 = smash gv5 gv3), (Node n a2 gv5 = smash gv3 a2), (Node n a2 gv5 = smash gv3 a1), (Node n a2 gv5 = smash gv3 gv5), (Node n a2 gv5 = smash gv3 gv3), (Node n a2 gv3 = a2), (Node n a2 gv3 = a1), (Node n a2 gv3 = gv5), (Node n a2 gv3 = gv3), (Node n a2 gv3 = smash a2 a2)
(Node n a2 gv3 = smash a2 a1), (Node n a2 gv3 = smash a2 gv5), (Node n a2 gv3 = smash a2 gv3), (Node n a2 gv3 = smash a1 a2), (Node n a2 gv3 = smash a1 a1), (Node n a2 gv3 = smash a1 gv5), (Node n a2 gv3 = smash a1 gv3), (Node n a2 gv3 = smash gv5 a2), (Node n a2 gv3 = smash gv5 a1), (Node n a2 gv3 = smash gv5 gv5)
(Node n a2 gv3 = smash gv5 gv3), (Node n a2 gv3 = smash gv3 a2), (Node n a2 gv3 = smash gv3 a1), (Node n a2 gv3 = smash gv3 gv5), (Node n a2 gv3 = smash gv3 gv3), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv5), (Node n a1 a2 = gv3), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv5), (Node n a1 a2 = smash a2 gv3), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv5), (Node n a1 a2 = smash a1 gv3), (Node n a1 a2 = smash gv5 a2), (Node n a1 a2 = smash gv5 a1), (Node n a1 a2 = smash gv5 gv5)
(Node n a1 a2 = smash gv5 gv3), (Node n a1 a2 = smash gv3 a2), (Node n a1 a2 = smash gv3 a1), (Node n a1 a2 = smash gv3 gv5), (Node n a1 a2 = smash gv3 gv3), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv5), (Node n a1 a1 = gv3), (Node n a1 a1 = smash a2 a2)
(Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv5), (Node n a1 a1 = smash a2 gv3), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv5), (Node n a1 a1 = smash a1 gv3), (Node n a1 a1 = smash gv5 a2), (Node n a1 a1 = smash gv5 a1), (Node n a1 a1 = smash gv5 gv5)
(Node n a1 a1 = smash gv5 gv3), (Node n a1 a1 = smash gv3 a2), (Node n a1 a1 = smash gv3 a1), (Node n a1 a1 = smash gv3 gv5), (Node n a1 a1 = smash gv3 gv3), (Node n a1 gv5 = a2), (Node n a1 gv5 = a1), (Node n a1 gv5 = gv5), (Node n a1 gv5 = gv3), (Node n a1 gv5 = smash a2 a2)
(Node n a1 gv5 = smash a2 a1), (Node n a1 gv5 = smash a2 gv5), (Node n a1 gv5 = smash a2 gv3), (Node n a1 gv5 = smash a1 a2), (Node n a1 gv5 = smash a1 a1), (Node n a1 gv5 = smash a1 gv5), (Node n a1 gv5 = smash a1 gv3), (Node n a1 gv5 = smash gv5 a2), (Node n a1 gv5 = smash gv5 a1), (Node n a1 gv5 = smash gv5 gv5)
(Node n a1 gv5 = smash gv5 gv3), (Node n a1 gv5 = smash gv3 a2), (Node n a1 gv5 = smash gv3 a1), (Node n a1 gv5 = smash gv3 gv5), (Node n a1 gv5 = smash gv3 gv3), (Node n a1 gv3 = a2), (Node n a1 gv3 = a1), (Node n a1 gv3 = gv5), (Node n a1 gv3 = gv3), (Node n a1 gv3 = smash a2 a2)
(Node n a1 gv3 = smash a2 a1), (Node n a1 gv3 = smash a2 gv5), (Node n a1 gv3 = smash a2 gv3), (Node n a1 gv3 = smash a1 a2), (Node n a1 gv3 = smash a1 a1), (Node n a1 gv3 = smash a1 gv5), (Node n a1 gv3 = smash a1 gv3), (Node n a1 gv3 = smash gv5 a2), (Node n a1 gv3 = smash gv5 a1), (Node n a1 gv3 = smash gv5 gv5)
(Node n a1 gv3 = smash gv5 gv3), (Node n a1 gv3 = smash gv3 a2), (Node n a1 gv3 = smash gv3 a1), (Node n a1 gv3 = smash gv3 gv5), (Node n a1 gv3 = smash gv3 gv3), (Node n gv5 a2 = a2), (Node n gv5 a2 = a1), (Node n gv5 a2 = gv5), (Node n gv5 a2 = gv3), (Node n gv5 a2 = smash a2 a2)
(Node n gv5 a2 = smash a2 a1), (Node n gv5 a2 = smash a2 gv5), (Node n gv5 a2 = smash a2 gv3), (Node n gv5 a2 = smash a1 a2), (Node n gv5 a2 = smash a1 a1), (Node n gv5 a2 = smash a1 gv5), (Node n gv5 a2 = smash a1 gv3), (Node n gv5 a2 = smash gv5 a2), (Node n gv5 a2 = smash gv5 a1), (Node n gv5 a2 = smash gv5 gv5)
(Node n gv5 a2 = smash gv5 gv3), (Node n gv5 a2 = smash gv3 a2), (Node n gv5 a2 = smash gv3 a1), (Node n gv5 a2 = smash gv3 gv5), (Node n gv5 a2 = smash gv3 gv3), (Node n gv5 a1 = a2), (Node n gv5 a1 = a1), (Node n gv5 a1 = gv5), (Node n gv5 a1 = gv3), (Node n gv5 a1 = smash a2 a2)
(Node n gv5 a1 = smash a2 a1), (Node n gv5 a1 = smash a2 gv5), (Node n gv5 a1 = smash a2 gv3), (Node n gv5 a1 = smash a1 a2), (Node n gv5 a1 = smash a1 a1), (Node n gv5 a1 = smash a1 gv5), (Node n gv5 a1 = smash a1 gv3), (Node n gv5 a1 = smash gv5 a2), (Node n gv5 a1 = smash gv5 a1), (Node n gv5 a1 = smash gv5 gv5)
(Node n gv5 a1 = smash gv5 gv3), (Node n gv5 a1 = smash gv3 a2), (Node n gv5 a1 = smash gv3 a1), (Node n gv5 a1 = smash gv3 gv5), (Node n gv5 a1 = smash gv3 gv3), (Node n gv5 gv5 = a2), (Node n gv5 gv5 = a1), (Node n gv5 gv5 = gv5), (Node n gv5 gv5 = gv3), (Node n gv5 gv5 = smash a2 a2)
(Node n gv5 gv5 = smash a2 a1), (Node n gv5 gv5 = smash a2 gv5), (Node n gv5 gv5 = smash a2 gv3), (Node n gv5 gv5 = smash a1 a2), (Node n gv5 gv5 = smash a1 a1), (Node n gv5 gv5 = smash a1 gv5), (Node n gv5 gv5 = smash a1 gv3), (Node n gv5 gv5 = smash gv5 a2), (Node n gv5 gv5 = smash gv5 a1), (Node n gv5 gv5 = smash gv5 gv5)
(Node n gv5 gv5 = smash gv5 gv3), (Node n gv5 gv5 = smash gv3 a2), (Node n gv5 gv5 = smash gv3 a1), (Node n gv5 gv5 = smash gv3 gv5), (Node n gv5 gv5 = smash gv3 gv3), (Node n gv5 gv3 = a2), (Node n gv5 gv3 = a1), (Node n gv5 gv3 = gv5), (Node n gv5 gv3 = gv3), (Node n gv5 gv3 = smash a2 a2)
(Node n gv5 gv3 = smash a2 a1), (Node n gv5 gv3 = smash a2 gv5), (Node n gv5 gv3 = smash a2 gv3), (Node n gv5 gv3 = smash a1 a2), (Node n gv5 gv3 = smash a1 a1), (Node n gv5 gv3 = smash a1 gv5), (Node n gv5 gv3 = smash a1 gv3), (Node n gv5 gv3 = smash gv5 a2), (Node n gv5 gv3 = smash gv5 a1), (Node n gv5 gv3 = smash gv5 gv5)
(Node n gv5 gv3 = smash gv5 gv3), (Node n gv5 gv3 = smash gv3 a2), (Node n gv5 gv3 = smash gv3 a1), (Node n gv5 gv3 = smash gv3 gv5), (Node n gv5 gv3 = smash gv3 gv3), (Node n gv3 a2 = a2), (Node n gv3 a2 = a1), (Node n gv3 a2 = gv5), (Node n gv3 a2 = gv3), (Node n gv3 a2 = smash a2 a2)
(Node n gv3 a2 = smash a2 a1), (Node n gv3 a2 = smash a2 gv5), (Node n gv3 a2 = smash a2 gv3), (Node n gv3 a2 = smash a1 a2), (Node n gv3 a2 = smash a1 a1), (Node n gv3 a2 = smash a1 gv5), (Node n gv3 a2 = smash a1 gv3), (Node n gv3 a2 = smash gv5 a2), (Node n gv3 a2 = smash gv5 a1), (Node n gv3 a2 = smash gv5 gv5)
(Node n gv3 a2 = smash gv5 gv3), (Node n gv3 a2 = smash gv3 a2), (Node n gv3 a2 = smash gv3 a1), (Node n gv3 a2 = smash gv3 gv5), (Node n gv3 a2 = smash gv3 gv3), (Node n gv3 a1 = a2), (Node n gv3 a1 = a1), (Node n gv3 a1 = gv5), (Node n gv3 a1 = gv3), (Node n gv3 a1 = smash a2 a2)
(Node n gv3 a1 = smash a2 a1), (Node n gv3 a1 = smash a2 gv5), (Node n gv3 a1 = smash a2 gv3), (Node n gv3 a1 = smash a1 a2), (Node n gv3 a1 = smash a1 a1), (Node n gv3 a1 = smash a1 gv5), (Node n gv3 a1 = smash a1 gv3), (Node n gv3 a1 = smash gv5 a2), (Node n gv3 a1 = smash gv5 a1), (Node n gv3 a1 = smash gv5 gv5)
(Node n gv3 a1 = smash gv5 gv3), (Node n gv3 a1 = smash gv3 a2), (Node n gv3 a1 = smash gv3 a1), (Node n gv3 a1 = smash gv3 gv5), (Node n gv3 a1 = smash gv3 gv3), (Node n gv3 gv5 = a2), (Node n gv3 gv5 = a1), (Node n gv3 gv5 = gv5), (Node n gv3 gv5 = gv3), (Node n gv3 gv5 = smash a2 a2)
(Node n gv3 gv5 = smash a2 a1), (Node n gv3 gv5 = smash a2 gv5), (Node n gv3 gv5 = smash a2 gv3), (Node n gv3 gv5 = smash a1 a2), (Node n gv3 gv5 = smash a1 a1), (Node n gv3 gv5 = smash a1 gv5), (Node n gv3 gv5 = smash a1 gv3), (Node n gv3 gv5 = smash gv5 a2), (Node n gv3 gv5 = smash gv5 a1), (Node n gv3 gv5 = smash gv5 gv5)
(Node n gv3 gv5 = smash gv5 gv3), (Node n gv3 gv5 = smash gv3 a2), (Node n gv3 gv5 = smash gv3 a1), (Node n gv3 gv5 = smash gv3 gv5), (Node n gv3 gv5 = smash gv3 gv3), (Node n gv3 gv3 = a2), (Node n gv3 gv3 = a1), (Node n gv3 gv3 = gv5), (Node n gv3 gv3 = gv3), (Node n gv3 gv3 = smash a2 a2)
(Node n gv3 gv3 = smash a2 a1), (Node n gv3 gv3 = smash a2 gv5), (Node n gv3 gv3 = smash a2 gv3), (Node n gv3 gv3 = smash a1 a2), (Node n gv3 gv3 = smash a1 a1), (Node n gv3 gv3 = smash a1 gv5), (Node n gv3 gv3 = smash a1 gv3), (Node n gv3 gv3 = smash gv5 a2), (Node n gv3 gv3 = smash gv5 a1), (Node n gv3 gv3 = smash gv5 gv5)
(Node n gv3 gv3 = smash gv5 gv3), (Node n gv3 gv3 = smash gv3 a2), (Node n gv3 gv3 = smash gv3 a1), (Node n gv3 gv3 = smash gv3 gv5), (Node n gv3 gv3 = smash gv3 gv3), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = gv5), (Node x a2 a2 = gv3), (Node x a2 a2 = smash a2 a2)
(Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a2 gv5), (Node x a2 a2 = smash a2 gv3), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a2 = smash a1 gv5), (Node x a2 a2 = smash a1 gv3), (Node x a2 a2 = smash gv5 a2), (Node x a2 a2 = smash gv5 a1), (Node x a2 a2 = smash gv5 gv5)
(Node x a2 a2 = smash gv5 gv3), (Node x a2 a2 = smash gv3 a2), (Node x a2 a2 = smash gv3 a1), (Node x a2 a2 = smash gv3 gv5), (Node x a2 a2 = smash gv3 gv3), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = gv5), (Node x a2 a1 = gv3), (Node x a2 a1 = smash a2 a2)
(Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a2 gv5), (Node x a2 a1 = smash a2 gv3), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a2 a1 = smash a1 gv5), (Node x a2 a1 = smash a1 gv3), (Node x a2 a1 = smash gv5 a2), (Node x a2 a1 = smash gv5 a1), (Node x a2 a1 = smash gv5 gv5)
(Node x a2 a1 = smash gv5 gv3), (Node x a2 a1 = smash gv3 a2), (Node x a2 a1 = smash gv3 a1), (Node x a2 a1 = smash gv3 gv5), (Node x a2 a1 = smash gv3 gv3), (Node x a2 gv5 = a2), (Node x a2 gv5 = a1), (Node x a2 gv5 = gv5), (Node x a2 gv5 = gv3), (Node x a2 gv5 = smash a2 a2)
(Node x a2 gv5 = smash a2 a1), (Node x a2 gv5 = smash a2 gv5), (Node x a2 gv5 = smash a2 gv3), (Node x a2 gv5 = smash a1 a2), (Node x a2 gv5 = smash a1 a1), (Node x a2 gv5 = smash a1 gv5), (Node x a2 gv5 = smash a1 gv3), (Node x a2 gv5 = smash gv5 a2), (Node x a2 gv5 = smash gv5 a1), (Node x a2 gv5 = smash gv5 gv5)
(Node x a2 gv5 = smash gv5 gv3), (Node x a2 gv5 = smash gv3 a2), (Node x a2 gv5 = smash gv3 a1), (Node x a2 gv5 = smash gv3 gv5), (Node x a2 gv5 = smash gv3 gv3), (Node x a2 gv3 = a2), (Node x a2 gv3 = a1), (Node x a2 gv3 = gv5), (Node x a2 gv3 = gv3), (Node x a2 gv3 = smash a2 a2)
(Node x a2 gv3 = smash a2 a1), (Node x a2 gv3 = smash a2 gv5), (Node x a2 gv3 = smash a2 gv3), (Node x a2 gv3 = smash a1 a2), (Node x a2 gv3 = smash a1 a1), (Node x a2 gv3 = smash a1 gv5), (Node x a2 gv3 = smash a1 gv3), (Node x a2 gv3 = smash gv5 a2), (Node x a2 gv3 = smash gv5 a1), (Node x a2 gv3 = smash gv5 gv5)
(Node x a2 gv3 = smash gv5 gv3), (Node x a2 gv3 = smash gv3 a2), (Node x a2 gv3 = smash gv3 a1), (Node x a2 gv3 = smash gv3 gv5), (Node x a2 gv3 = smash gv3 gv3), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = gv5), (Node x a1 a2 = gv3), (Node x a1 a2 = smash a2 a2)
(Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a2 gv5), (Node x a1 a2 = smash a2 gv3), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a2 = smash a1 gv5), (Node x a1 a2 = smash a1 gv3), (Node x a1 a2 = smash gv5 a2), (Node x a1 a2 = smash gv5 a1), (Node x a1 a2 = smash gv5 gv5)
(Node x a1 a2 = smash gv5 gv3), (Node x a1 a2 = smash gv3 a2), (Node x a1 a2 = smash gv3 a1), (Node x a1 a2 = smash gv3 gv5), (Node x a1 a2 = smash gv3 gv3), (Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = gv5), (Node x a1 a1 = gv3), (Node x a1 a1 = smash a2 a2)
(Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a2 gv5), (Node x a1 a1 = smash a2 gv3), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node x a1 a1 = smash a1 gv5), (Node x a1 a1 = smash a1 gv3), (Node x a1 a1 = smash gv5 a2), (Node x a1 a1 = smash gv5 a1), (Node x a1 a1 = smash gv5 gv5)
(Node x a1 a1 = smash gv5 gv3), (Node x a1 a1 = smash gv3 a2), (Node x a1 a1 = smash gv3 a1), (Node x a1 a1 = smash gv3 gv5), (Node x a1 a1 = smash gv3 gv3), (Node x a1 gv5 = a2), (Node x a1 gv5 = a1), (Node x a1 gv5 = gv5), (Node x a1 gv5 = gv3), (Node x a1 gv5 = smash a2 a2)
(Node x a1 gv5 = smash a2 a1), (Node x a1 gv5 = smash a2 gv5), (Node x a1 gv5 = smash a2 gv3), (Node x a1 gv5 = smash a1 a2), (Node x a1 gv5 = smash a1 a1), (Node x a1 gv5 = smash a1 gv5), (Node x a1 gv5 = smash a1 gv3), (Node x a1 gv5 = smash gv5 a2), (Node x a1 gv5 = smash gv5 a1), (Node x a1 gv5 = smash gv5 gv5)
(Node x a1 gv5 = smash gv5 gv3), (Node x a1 gv5 = smash gv3 a2), (Node x a1 gv5 = smash gv3 a1), (Node x a1 gv5 = smash gv3 gv5), (Node x a1 gv5 = smash gv3 gv3), (Node x a1 gv3 = a2), (Node x a1 gv3 = a1), (Node x a1 gv3 = gv5), (Node x a1 gv3 = gv3), (Node x a1 gv3 = smash a2 a2)
(Node x a1 gv3 = smash a2 a1), (Node x a1 gv3 = smash a2 gv5), (Node x a1 gv3 = smash a2 gv3), (Node x a1 gv3 = smash a1 a2), (Node x a1 gv3 = smash a1 a1), (Node x a1 gv3 = smash a1 gv5), (Node x a1 gv3 = smash a1 gv3), (Node x a1 gv3 = smash gv5 a2), (Node x a1 gv3 = smash gv5 a1), (Node x a1 gv3 = smash gv5 gv5)
(Node x a1 gv3 = smash gv5 gv3), (Node x a1 gv3 = smash gv3 a2), (Node x a1 gv3 = smash gv3 a1), (Node x a1 gv3 = smash gv3 gv5), (Node x a1 gv3 = smash gv3 gv3), (Node x gv5 a2 = a2), (Node x gv5 a2 = a1), (Node x gv5 a2 = gv5), (Node x gv5 a2 = gv3), (Node x gv5 a2 = smash a2 a2)
(Node x gv5 a2 = smash a2 a1), (Node x gv5 a2 = smash a2 gv5), (Node x gv5 a2 = smash a2 gv3), (Node x gv5 a2 = smash a1 a2), (Node x gv5 a2 = smash a1 a1), (Node x gv5 a2 = smash a1 gv5), (Node x gv5 a2 = smash a1 gv3), (Node x gv5 a2 = smash gv5 a2), (Node x gv5 a2 = smash gv5 a1), (Node x gv5 a2 = smash gv5 gv5)
(Node x gv5 a2 = smash gv5 gv3), (Node x gv5 a2 = smash gv3 a2), (Node x gv5 a2 = smash gv3 a1), (Node x gv5 a2 = smash gv3 gv5), (Node x gv5 a2 = smash gv3 gv3), (Node x gv5 a1 = a2), (Node x gv5 a1 = a1), (Node x gv5 a1 = gv5), (Node x gv5 a1 = gv3), (Node x gv5 a1 = smash a2 a2)
(Node x gv5 a1 = smash a2 a1), (Node x gv5 a1 = smash a2 gv5), (Node x gv5 a1 = smash a2 gv3), (Node x gv5 a1 = smash a1 a2), (Node x gv5 a1 = smash a1 a1), (Node x gv5 a1 = smash a1 gv5), (Node x gv5 a1 = smash a1 gv3), (Node x gv5 a1 = smash gv5 a2), (Node x gv5 a1 = smash gv5 a1), (Node x gv5 a1 = smash gv5 gv5)
(Node x gv5 a1 = smash gv5 gv3), (Node x gv5 a1 = smash gv3 a2), (Node x gv5 a1 = smash gv3 a1), (Node x gv5 a1 = smash gv3 gv5), (Node x gv5 a1 = smash gv3 gv3), (Node x gv5 gv5 = a2), (Node x gv5 gv5 = a1), (Node x gv5 gv5 = gv5), (Node x gv5 gv5 = gv3), (Node x gv5 gv5 = smash a2 a2)
(Node x gv5 gv5 = smash a2 a1), (Node x gv5 gv5 = smash a2 gv5), (Node x gv5 gv5 = smash a2 gv3), (Node x gv5 gv5 = smash a1 a2), (Node x gv5 gv5 = smash a1 a1), (Node x gv5 gv5 = smash a1 gv5), (Node x gv5 gv5 = smash a1 gv3), (Node x gv5 gv5 = smash gv5 a2), (Node x gv5 gv5 = smash gv5 a1), (Node x gv5 gv5 = smash gv5 gv5)
(Node x gv5 gv5 = smash gv5 gv3), (Node x gv5 gv5 = smash gv3 a2), (Node x gv5 gv5 = smash gv3 a1), (Node x gv5 gv5 = smash gv3 gv5), (Node x gv5 gv5 = smash gv3 gv3), (Node x gv5 gv3 = a2), (Node x gv5 gv3 = a1), (Node x gv5 gv3 = gv5), (Node x gv5 gv3 = gv3), (Node x gv5 gv3 = smash a2 a2)
(Node x gv5 gv3 = smash a2 a1), (Node x gv5 gv3 = smash a2 gv5), (Node x gv5 gv3 = smash a2 gv3), (Node x gv5 gv3 = smash a1 a2), (Node x gv5 gv3 = smash a1 a1), (Node x gv5 gv3 = smash a1 gv5), (Node x gv5 gv3 = smash a1 gv3), (Node x gv5 gv3 = smash gv5 a2), (Node x gv5 gv3 = smash gv5 a1), (Node x gv5 gv3 = smash gv5 gv5)
(Node x gv5 gv3 = smash gv5 gv3), (Node x gv5 gv3 = smash gv3 a2), (Node x gv5 gv3 = smash gv3 a1), (Node x gv5 gv3 = smash gv3 gv5), (Node x gv5 gv3 = smash gv3 gv3), (Node x gv3 a2 = a2), (Node x gv3 a2 = a1), (Node x gv3 a2 = gv5), (Node x gv3 a2 = gv3), (Node x gv3 a2 = smash a2 a2)
(Node x gv3 a2 = smash a2 a1), (Node x gv3 a2 = smash a2 gv5), (Node x gv3 a2 = smash a2 gv3), (Node x gv3 a2 = smash a1 a2), (Node x gv3 a2 = smash a1 a1), (Node x gv3 a2 = smash a1 gv5), (Node x gv3 a2 = smash a1 gv3), (Node x gv3 a2 = smash gv5 a2), (Node x gv3 a2 = smash gv5 a1), (Node x gv3 a2 = smash gv5 gv5)
(Node x gv3 a2 = smash gv5 gv3), (Node x gv3 a2 = smash gv3 a2), (Node x gv3 a2 = smash gv3 a1), (Node x gv3 a2 = smash gv3 gv5), (Node x gv3 a2 = smash gv3 gv3), (Node x gv3 a1 = a2), (Node x gv3 a1 = a1), (Node x gv3 a1 = gv5), (Node x gv3 a1 = gv3), (Node x gv3 a1 = smash a2 a2)
(Node x gv3 a1 = smash a2 a1), (Node x gv3 a1 = smash a2 gv5), (Node x gv3 a1 = smash a2 gv3), (Node x gv3 a1 = smash a1 a2), (Node x gv3 a1 = smash a1 a1), (Node x gv3 a1 = smash a1 gv5), (Node x gv3 a1 = smash a1 gv3), (Node x gv3 a1 = smash gv5 a2), (Node x gv3 a1 = smash gv5 a1), (Node x gv3 a1 = smash gv5 gv5)
(Node x gv3 a1 = smash gv5 gv3), (Node x gv3 a1 = smash gv3 a2), (Node x gv3 a1 = smash gv3 a1), (Node x gv3 a1 = smash gv3 gv5), (Node x gv3 a1 = smash gv3 gv3), (Node x gv3 gv5 = a2), (Node x gv3 gv5 = a1), (Node x gv3 gv5 = gv5), (Node x gv3 gv5 = gv3), (Node x gv3 gv5 = smash a2 a2)
(Node x gv3 gv5 = smash a2 a1), (Node x gv3 gv5 = smash a2 gv5), (Node x gv3 gv5 = smash a2 gv3), (Node x gv3 gv5 = smash a1 a2), (Node x gv3 gv5 = smash a1 a1), (Node x gv3 gv5 = smash a1 gv5), (Node x gv3 gv5 = smash a1 gv3), (Node x gv3 gv5 = smash gv5 a2), (Node x gv3 gv5 = smash gv5 a1), (Node x gv3 gv5 = smash gv5 gv5)
(Node x gv3 gv5 = smash gv5 gv3), (Node x gv3 gv5 = smash gv3 a2), (Node x gv3 gv5 = smash gv3 a1), (Node x gv3 gv5 = smash gv3 gv5), (Node x gv3 gv5 = smash gv3 gv3), (Node x gv3 gv3 = a2), (Node x gv3 gv3 = a1), (Node x gv3 gv3 = gv5), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash a2 a2)
(Node x gv3 gv3 = smash a2 a1), (Node x gv3 gv3 = smash a2 gv5), (Node x gv3 gv3 = smash a2 gv3), (Node x gv3 gv3 = smash a1 a2), (Node x gv3 gv3 = smash a1 a1), (Node x gv3 gv3 = smash a1 gv5), (Node x gv3 gv3 = smash a1 gv3), (Node x gv3 gv3 = smash gv5 a2), (Node x gv3 gv3 = smash gv5 a1), (Node x gv3 gv3 = smash gv5 gv5)
(Node x gv3 gv3 = smash gv5 gv3), (Node x gv3 gv3 = smash gv3 a2), (Node x gv3 gv3 = smash gv3 a1), (Node x gv3 gv3 = smash gv3 gv5), (Node x gv3 gv3 = smash gv3 gv3), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = gv5), (smash a2 a2 = gv3), (smash a2 a1 = a2)
(smash a2 a1 = a1), (smash a2 a1 = gv5), (smash a2 a1 = gv3), (smash a2 gv5 = a2), (smash a2 gv5 = a1), (smash a2 gv5 = gv5), (smash a2 gv5 = gv3), (smash a2 gv3 = a2), (smash a2 gv3 = a1), (smash a2 gv3 = gv5)
(smash a2 gv3 = gv3), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = gv5), (smash a1 a2 = gv3), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv5), (smash a1 a1 = gv3), (smash a1 gv5 = a2)
(smash a1 gv5 = a1), (smash a1 gv5 = gv5), (smash a1 gv5 = gv3), (smash a1 gv3 = a2), (smash a1 gv3 = a1), (smash a1 gv3 = gv5), (smash a1 gv3 = gv3), (smash gv5 a2 = a2), (smash gv5 a2 = a1), (smash gv5 a2 = gv5)
(smash gv5 a2 = gv3), (smash gv5 a1 = a2), (smash gv5 a1 = a1), (smash gv5 a1 = gv5), (smash gv5 a1 = gv3), (smash gv5 gv5 = a2), (smash gv5 gv5 = a1), (smash gv5 gv5 = gv5), (smash gv5 gv5 = gv3), (smash gv5 gv3 = a2)
(smash gv5 gv3 = a1), (smash gv5 gv3 = gv5), (smash gv5 gv3 = gv3), (smash gv3 a2 = a2), (smash gv3 a2 = a1), (smash gv3 a2 = gv5), (smash gv3 a2 = gv3), (smash gv3 a1 = a2), (smash gv3 a1 = a1), (smash gv3 a1 = gv5)
(smash gv3 a1 = gv3), (smash gv3 gv5 = a2), (smash gv3 gv5 = a1), (smash gv3 gv5 = gv5), (smash gv3 gv5 = gv3), (smash gv3 gv3 = a2), (smash gv3 gv3 = a1), (smash gv3 gv3 = gv5), (smash gv3 gv3 = gv3), (Leaf = Node n a2 a2)
(Leaf = Node n a2 a1), (Leaf = Node n a2 gv5), (Leaf = Node n a2 gv3), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 gv5), (Leaf = Node n a1 gv3), (Leaf = Node n gv5 a2), (Leaf = Node n gv5 a1), (Leaf = Node n gv5 gv5)
(Leaf = Node n gv5 gv3), (Leaf = Node n gv3 a2), (Leaf = Node n gv3 a1), (Leaf = Node n gv3 gv5), (Leaf = Node n gv3 gv3), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a2 gv5), (Leaf = Node x a2 gv3), (Leaf = Node x a1 a2)
(Leaf = Node x a1 a1), (Leaf = Node x a1 gv5), (Leaf = Node x a1 gv3), (Leaf = Node x gv5 a2), (Leaf = Node x gv5 a1), (Leaf = Node x gv5 gv5), (Leaf = Node x gv5 gv3), (Leaf = Node x gv3 a2), (Leaf = Node x gv3 a1), (Leaf = Node x gv3 gv5)
(Leaf = Node x gv3 gv3), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv5), (Leaf = smash a2 gv3), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 gv5), (Leaf = smash a1 gv3), (Leaf = smash gv5 a2)
(Leaf = smash gv5 a1), (Leaf = smash gv5 gv5), (Leaf = smash gv5 gv3), (Leaf = smash gv3 a2), (Leaf = smash gv3 a1), (Leaf = smash gv3 gv5), (Leaf = smash gv3 gv3), (find_max' n q = n), (find_max' n q = x), (find_max' x q = n)
(find_max' x q = x), (length q = n), (length q = x), (length q = find_max' n q), (length q = find_max' x q), (Some n = find_max q), (Some x = find_max q), (None = Some n), (None = Some x), (None = find_max q)
(None = Some a2), (None = Some a1), (None = Some gv5), (None = Some gv3), ((n >? n) = (n >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (x >=? x)), ((n >? x) = (n >=? n)), ((n >? x) = (n >=? x))
((n >? x) = (x >=? n)), ((n >? x) = (x >=? x)), ((x >? n) = (n >=? n)), ((x >? n) = (n >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (x >=? x)), ((x >? x) = (n >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (x >=? x))

Label: 4 (4)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (pow2heap x gv3), (pow2heapp x x gv3), (Permutation q q), (Permutation q gv1), (Permutation gv1 q), (Permutation gv1 gv1)
(In gv3 q), (In gv3 gv1), (x < x), (x <= x), (x = x), (gv3 = gv3), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1)
(false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q []), (Abs gv1 []), (Abs (gv3 :: q) []), (Abs (gv3 :: gv1) []), (Abs (merge q q) []), (Abs (merge q gv1) [])
(Abs (merge gv1 q) []), (Abs (merge gv1 gv1) []), (Abs (heap_delete_max gv3) []), (Abs (join q q gv3) []), (Abs (join q gv1 gv3) []), (Abs (join gv1 q gv3) []), (Abs (join gv1 gv1 gv3) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (carry q gv3) [])
(Abs (carry gv1 gv3) []), (Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (gv3 :: gv1) [])
(priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (join q gv1 gv3) []), (priqueue_elems (join gv1 q gv3) []), (priqueue_elems (join gv1 gv1 gv3) []), (priqueue_elems (insert x q) [])
(priqueue_elems (insert x gv1) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (carry gv1 gv3) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems gv3 []), (tree_elems (Node x gv3 gv3) [])
(tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (gv3 :: q)), (priq (gv3 :: gv1)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (merge gv1 gv1)), (priq (heap_delete_max gv3)), (priq (join q q gv3))
(priq (join q gv1 gv3)), (priq (join gv1 q gv3)), (priq (join gv1 gv1 gv3)), (priq (insert x q)), (priq (insert x gv1)), (priq (carry q gv3)), (priq (carry gv1 gv3)), (priq (q ++ q)), (priq (q ++ gv1)), (priq (gv1 ++ q))
(priq (gv1 ++ gv1)), (priqq x (gv3 :: q)), (priqq x (gv3 :: gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q)), (priqq x (merge gv1 gv1)), (priqq x (heap_delete_max gv3)), (priqq x (join q q gv3)), (priqq x (join q gv1 gv3))
(priqq x (join gv1 q gv3)), (priqq x (join gv1 gv1 gv3)), (priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (carry q gv3)), (priqq x (carry gv1 gv3)), (priqq x (q ++ q)), (priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1))
(priqq (find_max' x q) q), (priqq (find_max' x q) gv1), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (gv3 :: gv1)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv1)), (priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q gv3))
(priqq (find_max' x q) (join q gv1 gv3)), (priqq (find_max' x q) (join gv1 q gv3)), (priqq (find_max' x q) (join gv1 gv1 gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (carry gv1 gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1)), (priqq (find_max' x q) (gv1 ++ q))
(priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1), (priqq (find_max' x gv1) (gv3 :: q)), (priqq (find_max' x gv1) (gv3 :: gv1)), (priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1)), (priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (heap_delete_max gv3))
(priqq (find_max' x gv1) (join q q gv3)), (priqq (find_max' x gv1) (join q gv1 gv3)), (priqq (find_max' x gv1) (join gv1 q gv3)), (priqq (find_max' x gv1) (join gv1 gv1 gv3)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (carry q gv3)), (priqq (find_max' x gv1) (carry gv1 gv3)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1))
(priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1)), (priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (gv3 :: q)), (priqq (length q) (gv3 :: gv1)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv1)), (priqq (length q) (merge gv1 q)), (priqq (length q) (merge gv1 gv1))
(priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q gv3)), (priqq (length q) (join q gv1 gv3)), (priqq (length q) (join gv1 q gv3)), (priqq (length q) (join gv1 gv1 gv3)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1)), (priqq (length q) (carry q gv3)), (priqq (length q) (carry gv1 gv3)), (priqq (length q) (q ++ q))
(priqq (length q) (q ++ gv1)), (priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (gv3 :: q)), (priqq (length gv1) (gv3 :: gv1)), (priqq (length gv1) (merge q q)), (priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q))
(priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (heap_delete_max gv3)), (priqq (length gv1) (join q q gv3)), (priqq (length gv1) (join q gv1 gv3)), (priqq (length gv1) (join gv1 q gv3)), (priqq (length gv1) (join gv1 gv1 gv3)), (priqq (length gv1) (insert x q)), (priqq (length gv1) (insert x gv1)), (priqq (length gv1) (carry q gv3)), (priqq (length gv1) (carry gv1 gv3))
(priqq (length gv1) (q ++ q)), (priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (smash gv3 gv3)), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (find_max' x gv1) gv3)
(pow2heap (find_max' x gv1) (Node x gv3 gv3)), (pow2heap (find_max' x gv1) (smash gv3 gv3)), (pow2heap (length q) gv3), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (smash gv3 gv3)), (pow2heap (length gv1) gv3), (pow2heap (length gv1) (Node x gv3 gv3)), (pow2heap (length gv1) (smash gv3 gv3)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (smash gv3 gv3))
(pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) gv3), (pow2heapp x (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp x (find_max' x gv1) (smash gv3 gv3)), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (length q) gv3)
(pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) gv3), (pow2heapp x (length gv1) (Node x gv3 gv3)), (pow2heapp x (length gv1) (smash gv3 gv3)), (pow2heapp x (length gv1) Leaf), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (smash gv3 gv3))
(pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv1) gv3), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (length q) gv3)
(pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv1) gv3), (pow2heapp (find_max' x q) (length gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length gv1) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x gv3), (pow2heapp (find_max' x gv1) x (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) x (smash gv3 gv3))
(pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) gv3), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) gv3), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) gv3)
(pow2heapp (find_max' x gv1) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (length q) Leaf), (pow2heapp (find_max' x gv1) (length gv1) gv3), (pow2heapp (find_max' x gv1) (length gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (length gv1) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (smash gv3 gv3))
(pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv1) gv3), (pow2heapp (length q) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x gv1) Leaf), (pow2heapp (length q) (length q) gv3)
(pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv1) gv3), (pow2heapp (length q) (length gv1) (Node x gv3 gv3)), (pow2heapp (length q) (length gv1) (smash gv3 gv3)), (pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x gv3), (pow2heapp (length gv1) x (Node x gv3 gv3)), (pow2heapp (length gv1) x (smash gv3 gv3))
(pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) (find_max' x q) gv3), (pow2heapp (length gv1) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length gv1) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length gv1) (find_max' x q) Leaf), (pow2heapp (length gv1) (find_max' x gv1) gv3), (pow2heapp (length gv1) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (length gv1) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (length q) gv3)
(pow2heapp (length gv1) (length q) (Node x gv3 gv3)), (pow2heapp (length gv1) (length q) (smash gv3 gv3)), (pow2heapp (length gv1) (length q) Leaf), (pow2heapp (length gv1) (length gv1) gv3), (pow2heapp (length gv1) (length gv1) (Node x gv3 gv3)), (pow2heapp (length gv1) (length gv1) (smash gv3 gv3)), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (gv3 :: q)), (Permutation q (gv3 :: gv1)), (Permutation q (merge q q))
(Permutation q (merge q gv1)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q gv3)), (Permutation q (join q gv1 gv3)), (Permutation q (join gv1 q gv3)), (Permutation q (join gv1 gv1 gv3)), (Permutation q (insert x q)), (Permutation q (insert x gv1))
(Permutation q (carry q gv3)), (Permutation q (carry gv1 gv3)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q []), (Permutation gv1 (gv3 :: q)), (Permutation gv1 (gv3 :: gv1)), (Permutation gv1 (merge q q))
(Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (heap_delete_max gv3)), (Permutation gv1 (join q q gv3)), (Permutation gv1 (join q gv1 gv3)), (Permutation gv1 (join gv1 q gv3)), (Permutation gv1 (join gv1 gv1 gv3)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1))
(Permutation gv1 (carry q gv3)), (Permutation gv1 (carry gv1 gv3)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) gv1), (Permutation (gv3 :: q) (gv3 :: gv1))
(Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (merge q gv1)), (Permutation (gv3 :: q) (merge gv1 q)), (Permutation (gv3 :: q) (merge gv1 gv1)), (Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (join q gv1 gv3)), (Permutation (gv3 :: q) (join gv1 q gv3)), (Permutation (gv3 :: q) (join gv1 gv1 gv3)), (Permutation (gv3 :: q) (insert x q))
(Permutation (gv3 :: q) (insert x gv1)), (Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (carry gv1 gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) (q ++ gv1)), (Permutation (gv3 :: q) (gv1 ++ q)), (Permutation (gv3 :: q) (gv1 ++ gv1)), (Permutation (gv3 :: q) []), (Permutation (gv3 :: gv1) q), (Permutation (gv3 :: gv1) gv1)
(Permutation (gv3 :: gv1) (gv3 :: q)), (Permutation (gv3 :: gv1) (merge q q)), (Permutation (gv3 :: gv1) (merge q gv1)), (Permutation (gv3 :: gv1) (merge gv1 q)), (Permutation (gv3 :: gv1) (merge gv1 gv1)), (Permutation (gv3 :: gv1) (heap_delete_max gv3)), (Permutation (gv3 :: gv1) (join q q gv3)), (Permutation (gv3 :: gv1) (join q gv1 gv3)), (Permutation (gv3 :: gv1) (join gv1 q gv3)), (Permutation (gv3 :: gv1) (join gv1 gv1 gv3))
(Permutation (gv3 :: gv1) (insert x q)), (Permutation (gv3 :: gv1) (insert x gv1)), (Permutation (gv3 :: gv1) (carry q gv3)), (Permutation (gv3 :: gv1) (carry gv1 gv3)), (Permutation (gv3 :: gv1) (q ++ q)), (Permutation (gv3 :: gv1) (q ++ gv1)), (Permutation (gv3 :: gv1) (gv1 ++ q)), (Permutation (gv3 :: gv1) (gv1 ++ gv1)), (Permutation (gv3 :: gv1) []), (Permutation (merge q q) q)
(Permutation (merge q q) gv1), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (gv3 :: gv1)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (join q gv1 gv3)), (Permutation (merge q q) (join gv1 q gv3))
(Permutation (merge q q) (join gv1 gv1 gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (carry gv1 gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) [])
(Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (gv3 :: q)), (Permutation (merge q gv1) (gv3 :: gv1)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (heap_delete_max gv3)), (Permutation (merge q gv1) (join q q gv3)), (Permutation (merge q gv1) (join q gv1 gv3))
(Permutation (merge q gv1) (join gv1 q gv3)), (Permutation (merge q gv1) (join gv1 gv1 gv3)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1)), (Permutation (merge q gv1) (carry q gv3)), (Permutation (merge q gv1) (carry gv1 gv3)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1))
(Permutation (merge q gv1) []), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (gv3 :: q)), (Permutation (merge gv1 q) (gv3 :: gv1)), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (heap_delete_max gv3)), (Permutation (merge gv1 q) (join q q gv3))
(Permutation (merge gv1 q) (join q gv1 gv3)), (Permutation (merge gv1 q) (join gv1 q gv3)), (Permutation (merge gv1 q) (join gv1 gv1 gv3)), (Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1)), (Permutation (merge gv1 q) (carry q gv3)), (Permutation (merge gv1 q) (carry gv1 gv3)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q))
(Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (gv3 :: q)), (Permutation (merge gv1 gv1) (gv3 :: gv1)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (heap_delete_max gv3))
(Permutation (merge gv1 gv1) (join q q gv3)), (Permutation (merge gv1 gv1) (join q gv1 gv3)), (Permutation (merge gv1 gv1) (join gv1 q gv3)), (Permutation (merge gv1 gv1) (join gv1 gv1 gv3)), (Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (carry q gv3)), (Permutation (merge gv1 gv1) (carry gv1 gv3)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1))
(Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) gv1), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: gv1)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (merge q gv1)), (Permutation (heap_delete_max gv3) (merge gv1 q))
(Permutation (heap_delete_max gv3) (merge gv1 gv1)), (Permutation (heap_delete_max gv3) (join q q gv3)), (Permutation (heap_delete_max gv3) (join q gv1 gv3)), (Permutation (heap_delete_max gv3) (join gv1 q gv3)), (Permutation (heap_delete_max gv3) (join gv1 gv1 gv3)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (insert x gv1)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (carry gv1 gv3)), (Permutation (heap_delete_max gv3) (q ++ q))
(Permutation (heap_delete_max gv3) (q ++ gv1)), (Permutation (heap_delete_max gv3) (gv1 ++ q)), (Permutation (heap_delete_max gv3) (gv1 ++ gv1)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) gv1), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (gv3 :: gv1)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (merge q gv1))
(Permutation (join q q gv3) (merge gv1 q)), (Permutation (join q q gv3) (merge gv1 gv1)), (Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q gv1 gv3)), (Permutation (join q q gv3) (join gv1 q gv3)), (Permutation (join q q gv3) (join gv1 gv1 gv3)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (insert x gv1)), (Permutation (join q q gv3) (carry q gv3)), (Permutation (join q q gv3) (carry gv1 gv3))
(Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) (q ++ gv1)), (Permutation (join q q gv3) (gv1 ++ q)), (Permutation (join q q gv3) (gv1 ++ gv1)), (Permutation (join q q gv3) []), (Permutation (join q gv1 gv3) q), (Permutation (join q gv1 gv3) gv1), (Permutation (join q gv1 gv3) (gv3 :: q)), (Permutation (join q gv1 gv3) (gv3 :: gv1)), (Permutation (join q gv1 gv3) (merge q q))
(Permutation (join q gv1 gv3) (merge q gv1)), (Permutation (join q gv1 gv3) (merge gv1 q)), (Permutation (join q gv1 gv3) (merge gv1 gv1)), (Permutation (join q gv1 gv3) (heap_delete_max gv3)), (Permutation (join q gv1 gv3) (join q q gv3)), (Permutation (join q gv1 gv3) (join gv1 q gv3)), (Permutation (join q gv1 gv3) (join gv1 gv1 gv3)), (Permutation (join q gv1 gv3) (insert x q)), (Permutation (join q gv1 gv3) (insert x gv1)), (Permutation (join q gv1 gv3) (carry q gv3))
(Permutation (join q gv1 gv3) (carry gv1 gv3)), (Permutation (join q gv1 gv3) (q ++ q)), (Permutation (join q gv1 gv3) (q ++ gv1)), (Permutation (join q gv1 gv3) (gv1 ++ q)), (Permutation (join q gv1 gv3) (gv1 ++ gv1)), (Permutation (join q gv1 gv3) []), (Permutation (join gv1 q gv3) q), (Permutation (join gv1 q gv3) gv1), (Permutation (join gv1 q gv3) (gv3 :: q)), (Permutation (join gv1 q gv3) (gv3 :: gv1))
(Permutation (join gv1 q gv3) (merge q q)), (Permutation (join gv1 q gv3) (merge q gv1)), (Permutation (join gv1 q gv3) (merge gv1 q)), (Permutation (join gv1 q gv3) (merge gv1 gv1)), (Permutation (join gv1 q gv3) (heap_delete_max gv3)), (Permutation (join gv1 q gv3) (join q q gv3)), (Permutation (join gv1 q gv3) (join q gv1 gv3)), (Permutation (join gv1 q gv3) (join gv1 gv1 gv3)), (Permutation (join gv1 q gv3) (insert x q)), (Permutation (join gv1 q gv3) (insert x gv1))
(Permutation (join gv1 q gv3) (carry q gv3)), (Permutation (join gv1 q gv3) (carry gv1 gv3)), (Permutation (join gv1 q gv3) (q ++ q)), (Permutation (join gv1 q gv3) (q ++ gv1)), (Permutation (join gv1 q gv3) (gv1 ++ q)), (Permutation (join gv1 q gv3) (gv1 ++ gv1)), (Permutation (join gv1 q gv3) []), (Permutation (join gv1 gv1 gv3) q), (Permutation (join gv1 gv1 gv3) gv1), (Permutation (join gv1 gv1 gv3) (gv3 :: q))
(Permutation (join gv1 gv1 gv3) (gv3 :: gv1)), (Permutation (join gv1 gv1 gv3) (merge q q)), (Permutation (join gv1 gv1 gv3) (merge q gv1)), (Permutation (join gv1 gv1 gv3) (merge gv1 q)), (Permutation (join gv1 gv1 gv3) (merge gv1 gv1)), (Permutation (join gv1 gv1 gv3) (heap_delete_max gv3)), (Permutation (join gv1 gv1 gv3) (join q q gv3)), (Permutation (join gv1 gv1 gv3) (join q gv1 gv3)), (Permutation (join gv1 gv1 gv3) (join gv1 q gv3)), (Permutation (join gv1 gv1 gv3) (insert x q))
(Permutation (join gv1 gv1 gv3) (insert x gv1)), (Permutation (join gv1 gv1 gv3) (carry q gv3)), (Permutation (join gv1 gv1 gv3) (carry gv1 gv3)), (Permutation (join gv1 gv1 gv3) (q ++ q)), (Permutation (join gv1 gv1 gv3) (q ++ gv1)), (Permutation (join gv1 gv1 gv3) (gv1 ++ q)), (Permutation (join gv1 gv1 gv3) (gv1 ++ gv1)), (Permutation (join gv1 gv1 gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) gv1)
(Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (gv3 :: gv1)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q)), (Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (join q gv1 gv3)), (Permutation (insert x q) (join gv1 q gv3))
(Permutation (insert x q) (join gv1 gv1 gv3)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (carry gv1 gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1)), (Permutation (insert x q) []), (Permutation (insert x gv1) q)
(Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (gv3 :: q)), (Permutation (insert x gv1) (gv3 :: gv1)), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (heap_delete_max gv3)), (Permutation (insert x gv1) (join q q gv3)), (Permutation (insert x gv1) (join q gv1 gv3))
(Permutation (insert x gv1) (join gv1 q gv3)), (Permutation (insert x gv1) (join gv1 gv1 gv3)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (carry q gv3)), (Permutation (insert x gv1) (carry gv1 gv3)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1)), (Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) [])
(Permutation (carry q gv3) q), (Permutation (carry q gv3) gv1), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (gv3 :: gv1)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (merge q gv1)), (Permutation (carry q gv3) (merge gv1 q)), (Permutation (carry q gv3) (merge gv1 gv1)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q gv3))
(Permutation (carry q gv3) (join q gv1 gv3)), (Permutation (carry q gv3) (join gv1 q gv3)), (Permutation (carry q gv3) (join gv1 gv1 gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (insert x gv1)), (Permutation (carry q gv3) (carry gv1 gv3)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) (q ++ gv1)), (Permutation (carry q gv3) (gv1 ++ q)), (Permutation (carry q gv3) (gv1 ++ gv1))
(Permutation (carry q gv3) []), (Permutation (carry gv1 gv3) q), (Permutation (carry gv1 gv3) gv1), (Permutation (carry gv1 gv3) (gv3 :: q)), (Permutation (carry gv1 gv3) (gv3 :: gv1)), (Permutation (carry gv1 gv3) (merge q q)), (Permutation (carry gv1 gv3) (merge q gv1)), (Permutation (carry gv1 gv3) (merge gv1 q)), (Permutation (carry gv1 gv3) (merge gv1 gv1)), (Permutation (carry gv1 gv3) (heap_delete_max gv3))
(Permutation (carry gv1 gv3) (join q q gv3)), (Permutation (carry gv1 gv3) (join q gv1 gv3)), (Permutation (carry gv1 gv3) (join gv1 q gv3)), (Permutation (carry gv1 gv3) (join gv1 gv1 gv3)), (Permutation (carry gv1 gv3) (insert x q)), (Permutation (carry gv1 gv3) (insert x gv1)), (Permutation (carry gv1 gv3) (carry q gv3)), (Permutation (carry gv1 gv3) (q ++ q)), (Permutation (carry gv1 gv3) (q ++ gv1)), (Permutation (carry gv1 gv3) (gv1 ++ q))
(Permutation (carry gv1 gv3) (gv1 ++ gv1)), (Permutation (carry gv1 gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (gv3 :: gv1)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1))
(Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (join q gv1 gv3)), (Permutation (q ++ q) (join gv1 q gv3)), (Permutation (q ++ q) (join gv1 gv1 gv3)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) (carry gv1 gv3)), (Permutation (q ++ q) (q ++ gv1))
(Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (gv3 :: q)), (Permutation (q ++ gv1) (gv3 :: gv1)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q))
(Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (heap_delete_max gv3)), (Permutation (q ++ gv1) (join q q gv3)), (Permutation (q ++ gv1) (join q gv1 gv3)), (Permutation (q ++ gv1) (join gv1 q gv3)), (Permutation (q ++ gv1) (join gv1 gv1 gv3)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (carry q gv3)), (Permutation (q ++ gv1) (carry gv1 gv3))
(Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (gv3 :: q)), (Permutation (gv1 ++ q) (gv3 :: gv1)), (Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1))
(Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (heap_delete_max gv3)), (Permutation (gv1 ++ q) (join q q gv3)), (Permutation (gv1 ++ q) (join q gv1 gv3)), (Permutation (gv1 ++ q) (join gv1 q gv3)), (Permutation (gv1 ++ q) (join gv1 gv1 gv3)), (Permutation (gv1 ++ q) (insert x q)), (Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (carry q gv3))
(Permutation (gv1 ++ q) (carry gv1 gv3)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (gv3 :: q)), (Permutation (gv1 ++ gv1) (gv3 :: gv1)), (Permutation (gv1 ++ gv1) (merge q q))
(Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (heap_delete_max gv3)), (Permutation (gv1 ++ gv1) (join q q gv3)), (Permutation (gv1 ++ gv1) (join q gv1 gv3)), (Permutation (gv1 ++ gv1) (join gv1 q gv3)), (Permutation (gv1 ++ gv1) (join gv1 gv1 gv3)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1))
(Permutation (gv1 ++ gv1) (carry q gv3)), (Permutation (gv1 ++ gv1) (carry gv1 gv3)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] (gv3 :: q)), (Permutation [] (gv3 :: gv1))
(Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q gv3)), (Permutation [] (join q gv1 gv3)), (Permutation [] (join gv1 q gv3)), (Permutation [] (join gv1 gv1 gv3)), (Permutation [] (insert x q))
(Permutation [] (insert x gv1)), (Permutation [] (carry q gv3)), (Permutation [] (carry gv1 gv3)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (In gv3 (gv3 :: q)), (In gv3 (gv3 :: gv1)), (In gv3 (merge q q))
(In gv3 (merge q gv1)), (In gv3 (merge gv1 q)), (In gv3 (merge gv1 gv1)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q gv3)), (In gv3 (join q gv1 gv3)), (In gv3 (join gv1 q gv3)), (In gv3 (join gv1 gv1 gv3)), (In gv3 (insert x q)), (In gv3 (insert x gv1))
(In gv3 (carry q gv3)), (In gv3 (carry gv1 gv3)), (In gv3 (q ++ q)), (In gv3 (q ++ gv1)), (In gv3 (gv1 ++ q)), (In gv3 (gv1 ++ gv1)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) gv1), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (gv3 :: gv1))
(In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (merge q gv1)), (In (Node x gv3 gv3) (merge gv1 q)), (In (Node x gv3 gv3) (merge gv1 gv1)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (join q gv1 gv3)), (In (Node x gv3 gv3) (join gv1 q gv3)), (In (Node x gv3 gv3) (join gv1 gv1 gv3)), (In (Node x gv3 gv3) (insert x q))
(In (Node x gv3 gv3) (insert x gv1)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (carry gv1 gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (Node x gv3 gv3) (q ++ gv1)), (In (Node x gv3 gv3) (gv1 ++ q)), (In (Node x gv3 gv3) (gv1 ++ gv1)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) gv1), (In (smash gv3 gv3) (gv3 :: q))
(In (smash gv3 gv3) (gv3 :: gv1)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (merge q gv1)), (In (smash gv3 gv3) (merge gv1 q)), (In (smash gv3 gv3) (merge gv1 gv1)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (join q gv1 gv3)), (In (smash gv3 gv3) (join gv1 q gv3)), (In (smash gv3 gv3) (join gv1 gv1 gv3))
(In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (insert x gv1)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (carry gv1 gv3)), (In (smash gv3 gv3) (q ++ q)), (In (smash gv3 gv3) (q ++ gv1)), (In (smash gv3 gv3) (gv1 ++ q)), (In (smash gv3 gv3) (gv1 ++ gv1)), (In Leaf q), (In Leaf gv1)
(In Leaf (gv3 :: q)), (In Leaf (gv3 :: gv1)), (In Leaf (merge q q)), (In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q gv3)), (In Leaf (join q gv1 gv3)), (In Leaf (join gv1 q gv3))
(In Leaf (join gv1 gv1 gv3)), (In Leaf (insert x q)), (In Leaf (insert x gv1)), (In Leaf (carry q gv3)), (In Leaf (carry gv1 gv3)), (In Leaf (q ++ q)), (In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q)
(x < find_max' x gv1), (x < length q), (x < length gv1), (find_max' x q < x), (find_max' x q < find_max' x gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < find_max' x q), (find_max' x gv1 < length q)
(find_max' x gv1 < length gv1), (length q < x), (length q < find_max' x q), (length q < find_max' x gv1), (length q < length gv1), (length gv1 < x), (length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < length q), (x <= find_max' x q)
(x <= find_max' x gv1), (x <= length q), (x <= length gv1), (find_max' x q <= x), (find_max' x q <= find_max' x gv1), (find_max' x q <= length q), (find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= find_max' x q), (find_max' x gv1 <= length q)
(find_max' x gv1 <= length gv1), (length q <= x), (length q <= find_max' x q), (length q <= find_max' x gv1), (length q <= length gv1), (length gv1 <= x), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1), (length gv1 <= length q), (~ priq q)
(~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ pow2heap x gv3), (~ pow2heapp x x gv3), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ In gv3 q)
(~ In gv3 gv1), (~ x < x), (~ x <= x), (x <> x), (gv3 <> gv3), (q <> q), (q <> gv1), (gv1 <> q), (gv1 <> gv1), (None = Some q)
(None = Some gv1), (gv3 :: q = q), (gv3 :: q = gv1), (gv3 :: q = merge q q), (gv3 :: q = merge q gv1), (gv3 :: q = merge gv1 q), (gv3 :: q = merge gv1 gv1), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q gv3), (gv3 :: q = join q gv1 gv3)
(gv3 :: q = join gv1 q gv3), (gv3 :: q = join gv1 gv1 gv3), (gv3 :: q = insert x q), (gv3 :: q = insert x gv1), (gv3 :: q = carry q gv3), (gv3 :: q = carry gv1 gv3), (gv3 :: q = q ++ q), (gv3 :: q = q ++ gv1), (gv3 :: q = gv1 ++ q), (gv3 :: q = gv1 ++ gv1)
(gv3 :: q = []), (gv3 :: gv1 = q), (gv3 :: gv1 = gv1), (gv3 :: gv1 = merge q q), (gv3 :: gv1 = merge q gv1), (gv3 :: gv1 = merge gv1 q), (gv3 :: gv1 = merge gv1 gv1), (gv3 :: gv1 = heap_delete_max gv3), (gv3 :: gv1 = join q q gv3), (gv3 :: gv1 = join q gv1 gv3)
(gv3 :: gv1 = join gv1 q gv3), (gv3 :: gv1 = join gv1 gv1 gv3), (gv3 :: gv1 = insert x q), (gv3 :: gv1 = insert x gv1), (gv3 :: gv1 = carry q gv3), (gv3 :: gv1 = carry gv1 gv3), (gv3 :: gv1 = q ++ q), (gv3 :: gv1 = q ++ gv1), (gv3 :: gv1 = gv1 ++ q), (gv3 :: gv1 = gv1 ++ gv1)
(gv3 :: gv1 = []), (merge q q = q), (merge q q = gv1), (merge q q = heap_delete_max gv3), (merge q q = join q q gv3), (merge q q = join q gv1 gv3), (merge q q = join gv1 q gv3), (merge q q = join gv1 gv1 gv3), (merge q q = insert x q), (merge q q = insert x gv1)
(merge q q = carry q gv3), (merge q q = carry gv1 gv3), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1), (merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = heap_delete_max gv3), (merge q gv1 = join q q gv3)
(merge q gv1 = join q gv1 gv3), (merge q gv1 = join gv1 q gv3), (merge q gv1 = join gv1 gv1 gv3), (merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = carry q gv3), (merge q gv1 = carry gv1 gv3), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q)
(merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = heap_delete_max gv3), (merge gv1 q = join q q gv3), (merge gv1 q = join q gv1 gv3), (merge gv1 q = join gv1 q gv3), (merge gv1 q = join gv1 gv1 gv3), (merge gv1 q = insert x q), (merge gv1 q = insert x gv1)
(merge gv1 q = carry q gv3), (merge gv1 q = carry gv1 gv3), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = heap_delete_max gv3), (merge gv1 gv1 = join q q gv3)
(merge gv1 gv1 = join q gv1 gv3), (merge gv1 gv1 = join gv1 q gv3), (merge gv1 gv1 = join gv1 gv1 gv3), (merge gv1 gv1 = insert x q), (merge gv1 gv1 = insert x gv1), (merge gv1 gv1 = carry q gv3), (merge gv1 gv1 = carry gv1 gv3), (merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q)
(merge gv1 gv1 = gv1 ++ gv1), (heap_delete_max gv3 = q), (heap_delete_max gv3 = gv1), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = carry gv1 gv3), (heap_delete_max gv3 = q ++ q), (heap_delete_max gv3 = q ++ gv1), (heap_delete_max gv3 = gv1 ++ q), (heap_delete_max gv3 = gv1 ++ gv1), (join q q gv3 = q)
(join q q gv3 = gv1), (join q q gv3 = heap_delete_max gv3), (join q q gv3 = insert x q), (join q q gv3 = insert x gv1), (join q q gv3 = carry q gv3), (join q q gv3 = carry gv1 gv3), (join q q gv3 = q ++ q), (join q q gv3 = q ++ gv1), (join q q gv3 = gv1 ++ q), (join q q gv3 = gv1 ++ gv1)
(join q gv1 gv3 = q), (join q gv1 gv3 = gv1), (join q gv1 gv3 = heap_delete_max gv3), (join q gv1 gv3 = insert x q), (join q gv1 gv3 = insert x gv1), (join q gv1 gv3 = carry q gv3), (join q gv1 gv3 = carry gv1 gv3), (join q gv1 gv3 = q ++ q), (join q gv1 gv3 = q ++ gv1), (join q gv1 gv3 = gv1 ++ q)
(join q gv1 gv3 = gv1 ++ gv1), (join gv1 q gv3 = q), (join gv1 q gv3 = gv1), (join gv1 q gv3 = heap_delete_max gv3), (join gv1 q gv3 = insert x q), (join gv1 q gv3 = insert x gv1), (join gv1 q gv3 = carry q gv3), (join gv1 q gv3 = carry gv1 gv3), (join gv1 q gv3 = q ++ q), (join gv1 q gv3 = q ++ gv1)
(join gv1 q gv3 = gv1 ++ q), (join gv1 q gv3 = gv1 ++ gv1), (join gv1 gv1 gv3 = q), (join gv1 gv1 gv3 = gv1), (join gv1 gv1 gv3 = heap_delete_max gv3), (join gv1 gv1 gv3 = insert x q), (join gv1 gv1 gv3 = insert x gv1), (join gv1 gv1 gv3 = carry q gv3), (join gv1 gv1 gv3 = carry gv1 gv3), (join gv1 gv1 gv3 = q ++ q)
(join gv1 gv1 gv3 = q ++ gv1), (join gv1 gv1 gv3 = gv1 ++ q), (join gv1 gv1 gv3 = gv1 ++ gv1), (insert x q = q), (insert x q = gv1), (insert x q = heap_delete_max gv3), (insert x q = carry q gv3), (insert x q = carry gv1 gv3), (insert x q = q ++ q), (insert x q = q ++ gv1)
(insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1), (insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = heap_delete_max gv3), (insert x gv1 = carry q gv3), (insert x gv1 = carry gv1 gv3), (insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q)
(insert x gv1 = gv1 ++ gv1), (carry q gv3 = q), (carry q gv3 = gv1), (carry q gv3 = q ++ q), (carry q gv3 = q ++ gv1), (carry q gv3 = gv1 ++ q), (carry q gv3 = gv1 ++ gv1), (carry gv1 gv3 = q), (carry gv1 gv3 = gv1), (carry gv1 gv3 = q ++ q)
(carry gv1 gv3 = q ++ gv1), (carry gv1 gv3 = gv1 ++ q), (carry gv1 gv3 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q)
(gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = heap_delete_max gv3), ([] = join q q gv3), ([] = join q gv1 gv3)
([] = join gv1 q gv3), ([] = join gv1 gv1 gv3), ([] = insert x q), ([] = insert x gv1), ([] = carry q gv3), ([] = carry gv1 gv3), ([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1)
((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1), ((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash gv3 gv3)
(smash gv3 gv3 = gv3), (Leaf = Node x gv3 gv3), (Leaf = smash gv3 gv3), (find_max' x q = x), (find_max' x gv1 = x), (length q = x), (length q = find_max' x q), (length q = find_max' x gv1), (length gv1 = x), (length gv1 = find_max' x q)
(length gv1 = find_max' x gv1), (Some x = find_max q), (Some x = find_max gv1), (None = Some x), (None = find_max q), (None = find_max gv1), (None = Some gv3), ((x >? x) = (x >=? x))

Label: 5 (5)
(priq q), (priq gv2), (priqq n q), (priqq n gv2), (priqq x q), (priqq x gv2), (priqq gv0 q), (priqq gv0 gv2), (pow2heap n a2), (pow2heap n a1)
(pow2heap x a2), (pow2heap x a1), (pow2heap gv0 a2), (pow2heap gv0 a1), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n gv0 a2), (pow2heapp n gv0 a1)
(pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x gv0 a2), (pow2heapp x gv0 a1), (pow2heapp gv0 n a2), (pow2heapp gv0 n a1), (pow2heapp gv0 x a2), (pow2heapp gv0 x a1)
(pow2heapp gv0 gv0 a2), (pow2heapp gv0 gv0 a1), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2), (In a2 q), (In a2 gv2), (In a1 q), (In a1 gv2)
(n < n), (n < x), (n < gv0), (x < n), (x < x), (x < gv0), (gv0 < n), (gv0 < x), (gv0 < gv0), (n <= n)
(n <= x), (n <= gv0), (x <= n), (x <= x), (x <= gv0), (gv0 <= n), (gv0 <= x), (gv0 <= gv0), (a2 = a2), (a2 = a1)
(a1 = a2), (a1 = a1), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2), (n = n), (n = x), (n = gv0), (x = n)
(x = x), (x = gv0), (gv0 = n), (gv0 = x), (gv0 = gv0), (false = (n >? n)), (false = (n >? x)), (false = (n >? gv0)), (false = (x >? n)), (false = (x >? x))
(false = (x >? gv0)), (false = (gv0 >? n)), (false = (gv0 >? x)), (false = (gv0 >? gv0)), (false = (n >=? n)), (false = (n >=? x)), (false = (n >=? gv0)), (false = (x >=? n)), (false = (x >=? x)), (false = (x >=? gv0))
(false = (gv0 >=? n)), (false = (gv0 >=? x)), (false = (gv0 >=? gv0)), (true = (n >? n)), (true = (n >? x)), (true = (n >? gv0)), (true = (x >? n)), (true = (x >? x)), (true = (x >? gv0)), (true = (gv0 >? n))
(true = (gv0 >? x)), (true = (gv0 >? gv0)), (true = (n >=? n)), (true = (n >=? x)), (true = (n >=? gv0)), (true = (x >=? n)), (true = (x >=? x)), (true = (x >=? gv0)), (true = (gv0 >=? n)), (true = (gv0 >=? x))
(true = (gv0 >=? gv0)), (Abs q []), (Abs gv2 []), (Abs (a2 :: q) []), (Abs (a2 :: gv2) []), (Abs (a1 :: q) []), (Abs (a1 :: gv2) []), (Abs (merge q q) []), (Abs (merge q gv2) []), (Abs (merge gv2 q) [])
(Abs (merge gv2 gv2) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q gv2 a2) []), (Abs (join q gv2 a1) []), (Abs (join gv2 q a2) []), (Abs (join gv2 q a1) []), (Abs (join gv2 gv2 a2) [])
(Abs (join gv2 gv2 a1) []), (Abs (insert n q) []), (Abs (insert n gv2) []), (Abs (insert x q) []), (Abs (insert x gv2) []), (Abs (insert gv0 q) []), (Abs (insert gv0 gv2) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry gv2 a2) [])
(Abs (carry gv2 a1) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (a2 :: q) []), (priqueue_elems (a2 :: gv2) [])
(priqueue_elems (a1 :: q) []), (priqueue_elems (a1 :: gv2) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) [])
(priqueue_elems (join q gv2 a2) []), (priqueue_elems (join q gv2 a1) []), (priqueue_elems (join gv2 q a2) []), (priqueue_elems (join gv2 q a1) []), (priqueue_elems (join gv2 gv2 a2) []), (priqueue_elems (join gv2 gv2 a1) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv2) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv2) [])
(priqueue_elems (insert gv0 q) []), (priqueue_elems (insert gv0 gv2) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) []), (priqueue_elems (carry gv2 a2) []), (priqueue_elems (carry gv2 a1) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) []), (priqueue_elems (gv2 ++ gv2) [])
(priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a1 a2) [])
(tree_elems (Node x a1 a1) []), (tree_elems (Node gv0 a2 a2) []), (tree_elems (Node gv0 a2 a1) []), (tree_elems (Node gv0 a1 a2) []), (tree_elems (Node gv0 a1 a1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf [])
(priq (a2 :: q)), (priq (a2 :: gv2)), (priq (a1 :: q)), (priq (a1 :: gv2)), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1))
(priq (join q q a2)), (priq (join q q a1)), (priq (join q gv2 a2)), (priq (join q gv2 a1)), (priq (join gv2 q a2)), (priq (join gv2 q a1)), (priq (join gv2 gv2 a2)), (priq (join gv2 gv2 a1)), (priq (insert n q)), (priq (insert n gv2))
(priq (insert x q)), (priq (insert x gv2)), (priq (insert gv0 q)), (priq (insert gv0 gv2)), (priq (carry q a2)), (priq (carry q a1)), (priq (carry gv2 a2)), (priq (carry gv2 a1)), (priq (q ++ q)), (priq (q ++ gv2))
(priq (gv2 ++ q)), (priq (gv2 ++ gv2)), (priqq n (a2 :: q)), (priqq n (a2 :: gv2)), (priqq n (a1 :: q)), (priqq n (a1 :: gv2)), (priqq n (merge q q)), (priqq n (merge q gv2)), (priqq n (merge gv2 q)), (priqq n (merge gv2 gv2))
(priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q gv2 a2)), (priqq n (join q gv2 a1)), (priqq n (join gv2 q a2)), (priqq n (join gv2 q a1)), (priqq n (join gv2 gv2 a2)), (priqq n (join gv2 gv2 a1))
(priqq n (insert n q)), (priqq n (insert n gv2)), (priqq n (insert x q)), (priqq n (insert x gv2)), (priqq n (insert gv0 q)), (priqq n (insert gv0 gv2)), (priqq n (carry q a2)), (priqq n (carry q a1)), (priqq n (carry gv2 a2)), (priqq n (carry gv2 a1))
(priqq n (q ++ q)), (priqq n (q ++ gv2)), (priqq n (gv2 ++ q)), (priqq n (gv2 ++ gv2)), (priqq x (a2 :: q)), (priqq x (a2 :: gv2)), (priqq x (a1 :: q)), (priqq x (a1 :: gv2)), (priqq x (merge q q)), (priqq x (merge q gv2))
(priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (heap_delete_max a2)), (priqq x (heap_delete_max a1)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q gv2 a2)), (priqq x (join q gv2 a1)), (priqq x (join gv2 q a2)), (priqq x (join gv2 q a1))
(priqq x (join gv2 gv2 a2)), (priqq x (join gv2 gv2 a1)), (priqq x (insert n q)), (priqq x (insert n gv2)), (priqq x (insert x q)), (priqq x (insert x gv2)), (priqq x (insert gv0 q)), (priqq x (insert gv0 gv2)), (priqq x (carry q a2)), (priqq x (carry q a1))
(priqq x (carry gv2 a2)), (priqq x (carry gv2 a1)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2)), (priqq gv0 (a2 :: q)), (priqq gv0 (a2 :: gv2)), (priqq gv0 (a1 :: q)), (priqq gv0 (a1 :: gv2))
(priqq gv0 (merge q q)), (priqq gv0 (merge q gv2)), (priqq gv0 (merge gv2 q)), (priqq gv0 (merge gv2 gv2)), (priqq gv0 (heap_delete_max a2)), (priqq gv0 (heap_delete_max a1)), (priqq gv0 (join q q a2)), (priqq gv0 (join q q a1)), (priqq gv0 (join q gv2 a2)), (priqq gv0 (join q gv2 a1))
(priqq gv0 (join gv2 q a2)), (priqq gv0 (join gv2 q a1)), (priqq gv0 (join gv2 gv2 a2)), (priqq gv0 (join gv2 gv2 a1)), (priqq gv0 (insert n q)), (priqq gv0 (insert n gv2)), (priqq gv0 (insert x q)), (priqq gv0 (insert x gv2)), (priqq gv0 (insert gv0 q)), (priqq gv0 (insert gv0 gv2))
(priqq gv0 (carry q a2)), (priqq gv0 (carry q a1)), (priqq gv0 (carry gv2 a2)), (priqq gv0 (carry gv2 a1)), (priqq gv0 (q ++ q)), (priqq gv0 (q ++ gv2)), (priqq gv0 (gv2 ++ q)), (priqq gv0 (gv2 ++ gv2)), (priqq (find_max' n q) q), (priqq (find_max' n q) gv2)
(priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a2 :: gv2)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv2)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv2)), (priqq (find_max' n q) (merge gv2 q)), (priqq (find_max' n q) (merge gv2 gv2)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1))
(priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q gv2 a2)), (priqq (find_max' n q) (join q gv2 a1)), (priqq (find_max' n q) (join gv2 q a2)), (priqq (find_max' n q) (join gv2 q a1)), (priqq (find_max' n q) (join gv2 gv2 a2)), (priqq (find_max' n q) (join gv2 gv2 a1)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert n gv2))
(priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv2)), (priqq (find_max' n q) (insert gv0 q)), (priqq (find_max' n q) (insert gv0 gv2)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry gv2 a2)), (priqq (find_max' n q) (carry gv2 a1)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv2))
(priqq (find_max' n q) (gv2 ++ q)), (priqq (find_max' n q) (gv2 ++ gv2)), (priqq (find_max' n gv2) q), (priqq (find_max' n gv2) gv2), (priqq (find_max' n gv2) (a2 :: q)), (priqq (find_max' n gv2) (a2 :: gv2)), (priqq (find_max' n gv2) (a1 :: q)), (priqq (find_max' n gv2) (a1 :: gv2)), (priqq (find_max' n gv2) (merge q q)), (priqq (find_max' n gv2) (merge q gv2))
(priqq (find_max' n gv2) (merge gv2 q)), (priqq (find_max' n gv2) (merge gv2 gv2)), (priqq (find_max' n gv2) (heap_delete_max a2)), (priqq (find_max' n gv2) (heap_delete_max a1)), (priqq (find_max' n gv2) (join q q a2)), (priqq (find_max' n gv2) (join q q a1)), (priqq (find_max' n gv2) (join q gv2 a2)), (priqq (find_max' n gv2) (join q gv2 a1)), (priqq (find_max' n gv2) (join gv2 q a2)), (priqq (find_max' n gv2) (join gv2 q a1))
(priqq (find_max' n gv2) (join gv2 gv2 a2)), (priqq (find_max' n gv2) (join gv2 gv2 a1)), (priqq (find_max' n gv2) (insert n q)), (priqq (find_max' n gv2) (insert n gv2)), (priqq (find_max' n gv2) (insert x q)), (priqq (find_max' n gv2) (insert x gv2)), (priqq (find_max' n gv2) (insert gv0 q)), (priqq (find_max' n gv2) (insert gv0 gv2)), (priqq (find_max' n gv2) (carry q a2)), (priqq (find_max' n gv2) (carry q a1))
(priqq (find_max' n gv2) (carry gv2 a2)), (priqq (find_max' n gv2) (carry gv2 a1)), (priqq (find_max' n gv2) (q ++ q)), (priqq (find_max' n gv2) (q ++ gv2)), (priqq (find_max' n gv2) (gv2 ++ q)), (priqq (find_max' n gv2) (gv2 ++ gv2)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv2), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a2 :: gv2))
(priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv2)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q)), (priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1))
(priqq (find_max' x q) (join q gv2 a2)), (priqq (find_max' x q) (join q gv2 a1)), (priqq (find_max' x q) (join gv2 q a2)), (priqq (find_max' x q) (join gv2 q a1)), (priqq (find_max' x q) (join gv2 gv2 a2)), (priqq (find_max' x q) (join gv2 gv2 a1)), (priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv2)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2))
(priqq (find_max' x q) (insert gv0 q)), (priqq (find_max' x q) (insert gv0 gv2)), (priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry gv2 a2)), (priqq (find_max' x q) (carry gv2 a1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q)), (priqq (find_max' x q) (gv2 ++ gv2))
(priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) (a2 :: q)), (priqq (find_max' x gv2) (a2 :: gv2)), (priqq (find_max' x gv2) (a1 :: q)), (priqq (find_max' x gv2) (a1 :: gv2)), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2)), (priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2))
(priqq (find_max' x gv2) (heap_delete_max a2)), (priqq (find_max' x gv2) (heap_delete_max a1)), (priqq (find_max' x gv2) (join q q a2)), (priqq (find_max' x gv2) (join q q a1)), (priqq (find_max' x gv2) (join q gv2 a2)), (priqq (find_max' x gv2) (join q gv2 a1)), (priqq (find_max' x gv2) (join gv2 q a2)), (priqq (find_max' x gv2) (join gv2 q a1)), (priqq (find_max' x gv2) (join gv2 gv2 a2)), (priqq (find_max' x gv2) (join gv2 gv2 a1))
(priqq (find_max' x gv2) (insert n q)), (priqq (find_max' x gv2) (insert n gv2)), (priqq (find_max' x gv2) (insert x q)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (insert gv0 q)), (priqq (find_max' x gv2) (insert gv0 gv2)), (priqq (find_max' x gv2) (carry q a2)), (priqq (find_max' x gv2) (carry q a1)), (priqq (find_max' x gv2) (carry gv2 a2)), (priqq (find_max' x gv2) (carry gv2 a1))
(priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ q)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (find_max' gv0 q) q), (priqq (find_max' gv0 q) gv2), (priqq (find_max' gv0 q) (a2 :: q)), (priqq (find_max' gv0 q) (a2 :: gv2)), (priqq (find_max' gv0 q) (a1 :: q)), (priqq (find_max' gv0 q) (a1 :: gv2))
(priqq (find_max' gv0 q) (merge q q)), (priqq (find_max' gv0 q) (merge q gv2)), (priqq (find_max' gv0 q) (merge gv2 q)), (priqq (find_max' gv0 q) (merge gv2 gv2)), (priqq (find_max' gv0 q) (heap_delete_max a2)), (priqq (find_max' gv0 q) (heap_delete_max a1)), (priqq (find_max' gv0 q) (join q q a2)), (priqq (find_max' gv0 q) (join q q a1)), (priqq (find_max' gv0 q) (join q gv2 a2)), (priqq (find_max' gv0 q) (join q gv2 a1))
(priqq (find_max' gv0 q) (join gv2 q a2)), (priqq (find_max' gv0 q) (join gv2 q a1)), (priqq (find_max' gv0 q) (join gv2 gv2 a2)), (priqq (find_max' gv0 q) (join gv2 gv2 a1)), (priqq (find_max' gv0 q) (insert n q)), (priqq (find_max' gv0 q) (insert n gv2)), (priqq (find_max' gv0 q) (insert x q)), (priqq (find_max' gv0 q) (insert x gv2)), (priqq (find_max' gv0 q) (insert gv0 q)), (priqq (find_max' gv0 q) (insert gv0 gv2))
(priqq (find_max' gv0 q) (carry q a2)), (priqq (find_max' gv0 q) (carry q a1)), (priqq (find_max' gv0 q) (carry gv2 a2)), (priqq (find_max' gv0 q) (carry gv2 a1)), (priqq (find_max' gv0 q) (q ++ q)), (priqq (find_max' gv0 q) (q ++ gv2)), (priqq (find_max' gv0 q) (gv2 ++ q)), (priqq (find_max' gv0 q) (gv2 ++ gv2)), (priqq (find_max' gv0 gv2) q), (priqq (find_max' gv0 gv2) gv2)
(priqq (find_max' gv0 gv2) (a2 :: q)), (priqq (find_max' gv0 gv2) (a2 :: gv2)), (priqq (find_max' gv0 gv2) (a1 :: q)), (priqq (find_max' gv0 gv2) (a1 :: gv2)), (priqq (find_max' gv0 gv2) (merge q q)), (priqq (find_max' gv0 gv2) (merge q gv2)), (priqq (find_max' gv0 gv2) (merge gv2 q)), (priqq (find_max' gv0 gv2) (merge gv2 gv2)), (priqq (find_max' gv0 gv2) (heap_delete_max a2)), (priqq (find_max' gv0 gv2) (heap_delete_max a1))
(priqq (find_max' gv0 gv2) (join q q a2)), (priqq (find_max' gv0 gv2) (join q q a1)), (priqq (find_max' gv0 gv2) (join q gv2 a2)), (priqq (find_max' gv0 gv2) (join q gv2 a1)), (priqq (find_max' gv0 gv2) (join gv2 q a2)), (priqq (find_max' gv0 gv2) (join gv2 q a1)), (priqq (find_max' gv0 gv2) (join gv2 gv2 a2)), (priqq (find_max' gv0 gv2) (join gv2 gv2 a1)), (priqq (find_max' gv0 gv2) (insert n q)), (priqq (find_max' gv0 gv2) (insert n gv2))
(priqq (find_max' gv0 gv2) (insert x q)), (priqq (find_max' gv0 gv2) (insert x gv2)), (priqq (find_max' gv0 gv2) (insert gv0 q)), (priqq (find_max' gv0 gv2) (insert gv0 gv2)), (priqq (find_max' gv0 gv2) (carry q a2)), (priqq (find_max' gv0 gv2) (carry q a1)), (priqq (find_max' gv0 gv2) (carry gv2 a2)), (priqq (find_max' gv0 gv2) (carry gv2 a1)), (priqq (find_max' gv0 gv2) (q ++ q)), (priqq (find_max' gv0 gv2) (q ++ gv2))
(priqq (find_max' gv0 gv2) (gv2 ++ q)), (priqq (find_max' gv0 gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv2)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv2)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv2))
(priqq (length q) (merge gv2 q)), (priqq (length q) (merge gv2 gv2)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q gv2 a2)), (priqq (length q) (join q gv2 a1)), (priqq (length q) (join gv2 q a2)), (priqq (length q) (join gv2 q a1))
(priqq (length q) (join gv2 gv2 a2)), (priqq (length q) (join gv2 gv2 a1)), (priqq (length q) (insert n q)), (priqq (length q) (insert n gv2)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv2)), (priqq (length q) (insert gv0 q)), (priqq (length q) (insert gv0 gv2)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1))
(priqq (length q) (carry gv2 a2)), (priqq (length q) (carry gv2 a1)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv2)), (priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q), (priqq (length gv2) gv2), (priqq (length gv2) (a2 :: q)), (priqq (length gv2) (a2 :: gv2))
(priqq (length gv2) (a1 :: q)), (priqq (length gv2) (a1 :: gv2)), (priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q)), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (heap_delete_max a2)), (priqq (length gv2) (heap_delete_max a1)), (priqq (length gv2) (join q q a2)), (priqq (length gv2) (join q q a1))
(priqq (length gv2) (join q gv2 a2)), (priqq (length gv2) (join q gv2 a1)), (priqq (length gv2) (join gv2 q a2)), (priqq (length gv2) (join gv2 q a1)), (priqq (length gv2) (join gv2 gv2 a2)), (priqq (length gv2) (join gv2 gv2 a1)), (priqq (length gv2) (insert n q)), (priqq (length gv2) (insert n gv2)), (priqq (length gv2) (insert x q)), (priqq (length gv2) (insert x gv2))
(priqq (length gv2) (insert gv0 q)), (priqq (length gv2) (insert gv0 gv2)), (priqq (length gv2) (carry q a2)), (priqq (length gv2) (carry q a1)), (priqq (length gv2) (carry gv2 a2)), (priqq (length gv2) (carry gv2 a1)), (priqq (length gv2) (q ++ q)), (priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2))
(pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node gv0 a2 a2)), (pow2heap n (Node gv0 a2 a1))
(pow2heap n (Node gv0 a1 a2)), (pow2heap n (Node gv0 a1 a1)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1))
(pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node gv0 a2 a2)), (pow2heap x (Node gv0 a2 a1)), (pow2heap x (Node gv0 a1 a2)), (pow2heap x (Node gv0 a1 a1)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1))
(pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap gv0 (Node n a2 a2)), (pow2heap gv0 (Node n a2 a1)), (pow2heap gv0 (Node n a1 a2)), (pow2heap gv0 (Node n a1 a1)), (pow2heap gv0 (Node x a2 a2)), (pow2heap gv0 (Node x a2 a1)), (pow2heap gv0 (Node x a1 a2)), (pow2heap gv0 (Node x a1 a1))
(pow2heap gv0 (Node gv0 a2 a2)), (pow2heap gv0 (Node gv0 a2 a1)), (pow2heap gv0 (Node gv0 a1 a2)), (pow2heap gv0 (Node gv0 a1 a1)), (pow2heap gv0 (smash a2 a2)), (pow2heap gv0 (smash a2 a1)), (pow2heap gv0 (smash a1 a2)), (pow2heap gv0 (smash a1 a1)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1)
(pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node x a2 a2)), (pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node gv0 a2 a2)), (pow2heap (find_max' n q) (Node gv0 a2 a1))
(pow2heap (find_max' n q) (Node gv0 a1 a2)), (pow2heap (find_max' n q) (Node gv0 a1 a1)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n gv2) a2), (pow2heap (find_max' n gv2) a1), (pow2heap (find_max' n gv2) (Node n a2 a2)), (pow2heap (find_max' n gv2) (Node n a2 a1))
(pow2heap (find_max' n gv2) (Node n a1 a2)), (pow2heap (find_max' n gv2) (Node n a1 a1)), (pow2heap (find_max' n gv2) (Node x a2 a2)), (pow2heap (find_max' n gv2) (Node x a2 a1)), (pow2heap (find_max' n gv2) (Node x a1 a2)), (pow2heap (find_max' n gv2) (Node x a1 a1)), (pow2heap (find_max' n gv2) (Node gv0 a2 a2)), (pow2heap (find_max' n gv2) (Node gv0 a2 a1)), (pow2heap (find_max' n gv2) (Node gv0 a1 a2)), (pow2heap (find_max' n gv2) (Node gv0 a1 a1))
(pow2heap (find_max' n gv2) (smash a2 a2)), (pow2heap (find_max' n gv2) (smash a2 a1)), (pow2heap (find_max' n gv2) (smash a1 a2)), (pow2heap (find_max' n gv2) (smash a1 a1)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1))
(pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node gv0 a2 a2)), (pow2heap (find_max' x q) (Node gv0 a2 a1)), (pow2heap (find_max' x q) (Node gv0 a1 a2)), (pow2heap (find_max' x q) (Node gv0 a1 a1)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1))
(pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x gv2) a2), (pow2heap (find_max' x gv2) a1), (pow2heap (find_max' x gv2) (Node n a2 a2)), (pow2heap (find_max' x gv2) (Node n a2 a1)), (pow2heap (find_max' x gv2) (Node n a1 a2)), (pow2heap (find_max' x gv2) (Node n a1 a1)), (pow2heap (find_max' x gv2) (Node x a2 a2)), (pow2heap (find_max' x gv2) (Node x a2 a1))
(pow2heap (find_max' x gv2) (Node x a1 a2)), (pow2heap (find_max' x gv2) (Node x a1 a1)), (pow2heap (find_max' x gv2) (Node gv0 a2 a2)), (pow2heap (find_max' x gv2) (Node gv0 a2 a1)), (pow2heap (find_max' x gv2) (Node gv0 a1 a2)), (pow2heap (find_max' x gv2) (Node gv0 a1 a1)), (pow2heap (find_max' x gv2) (smash a2 a2)), (pow2heap (find_max' x gv2) (smash a2 a1)), (pow2heap (find_max' x gv2) (smash a1 a2)), (pow2heap (find_max' x gv2) (smash a1 a1))
(pow2heap (find_max' gv0 q) a2), (pow2heap (find_max' gv0 q) a1), (pow2heap (find_max' gv0 q) (Node n a2 a2)), (pow2heap (find_max' gv0 q) (Node n a2 a1)), (pow2heap (find_max' gv0 q) (Node n a1 a2)), (pow2heap (find_max' gv0 q) (Node n a1 a1)), (pow2heap (find_max' gv0 q) (Node x a2 a2)), (pow2heap (find_max' gv0 q) (Node x a2 a1)), (pow2heap (find_max' gv0 q) (Node x a1 a2)), (pow2heap (find_max' gv0 q) (Node x a1 a1))
(pow2heap (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heap (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heap (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heap (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heap (find_max' gv0 q) (smash a2 a2)), (pow2heap (find_max' gv0 q) (smash a2 a1)), (pow2heap (find_max' gv0 q) (smash a1 a2)), (pow2heap (find_max' gv0 q) (smash a1 a1)), (pow2heap (find_max' gv0 gv2) a2), (pow2heap (find_max' gv0 gv2) a1)
(pow2heap (find_max' gv0 gv2) (Node n a2 a2)), (pow2heap (find_max' gv0 gv2) (Node n a2 a1)), (pow2heap (find_max' gv0 gv2) (Node n a1 a2)), (pow2heap (find_max' gv0 gv2) (Node n a1 a1)), (pow2heap (find_max' gv0 gv2) (Node x a2 a2)), (pow2heap (find_max' gv0 gv2) (Node x a2 a1)), (pow2heap (find_max' gv0 gv2) (Node x a1 a2)), (pow2heap (find_max' gv0 gv2) (Node x a1 a1)), (pow2heap (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heap (find_max' gv0 gv2) (Node gv0 a2 a1))
(pow2heap (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heap (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heap (find_max' gv0 gv2) (smash a2 a2)), (pow2heap (find_max' gv0 gv2) (smash a2 a1)), (pow2heap (find_max' gv0 gv2) (smash a1 a2)), (pow2heap (find_max' gv0 gv2) (smash a1 a1)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1))
(pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node gv0 a2 a2)), (pow2heap (length q) (Node gv0 a2 a1)), (pow2heap (length q) (Node gv0 a1 a2)), (pow2heap (length q) (Node gv0 a1 a1))
(pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length gv2) a2), (pow2heap (length gv2) a1), (pow2heap (length gv2) (Node n a2 a2)), (pow2heap (length gv2) (Node n a2 a1)), (pow2heap (length gv2) (Node n a1 a2)), (pow2heap (length gv2) (Node n a1 a1))
(pow2heap (length gv2) (Node x a2 a2)), (pow2heap (length gv2) (Node x a2 a1)), (pow2heap (length gv2) (Node x a1 a2)), (pow2heap (length gv2) (Node x a1 a1)), (pow2heap (length gv2) (Node gv0 a2 a2)), (pow2heap (length gv2) (Node gv0 a2 a1)), (pow2heap (length gv2) (Node gv0 a1 a2)), (pow2heap (length gv2) (Node gv0 a1 a1)), (pow2heap (length gv2) (smash a2 a2)), (pow2heap (length gv2) (smash a2 a1))
(pow2heap (length gv2) (smash a1 a2)), (pow2heap (length gv2) (smash a1 a1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1))
(pow2heapp n n (Node gv0 a2 a2)), (pow2heapp n n (Node gv0 a2 a1)), (pow2heapp n n (Node gv0 a1 a2)), (pow2heapp n n (Node gv0 a1 a1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n x (Node n a2 a2))
(pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node gv0 a2 a2)), (pow2heapp n x (Node gv0 a2 a1)), (pow2heapp n x (Node gv0 a1 a2))
(pow2heapp n x (Node gv0 a1 a1)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x Leaf), (pow2heapp n gv0 (Node n a2 a2)), (pow2heapp n gv0 (Node n a2 a1)), (pow2heapp n gv0 (Node n a1 a2)), (pow2heapp n gv0 (Node n a1 a1))
(pow2heapp n gv0 (Node x a2 a2)), (pow2heapp n gv0 (Node x a2 a1)), (pow2heapp n gv0 (Node x a1 a2)), (pow2heapp n gv0 (Node x a1 a1)), (pow2heapp n gv0 (Node gv0 a2 a2)), (pow2heapp n gv0 (Node gv0 a2 a1)), (pow2heapp n gv0 (Node gv0 a1 a2)), (pow2heapp n gv0 (Node gv0 a1 a1)), (pow2heapp n gv0 (smash a2 a2)), (pow2heapp n gv0 (smash a2 a1))
(pow2heapp n gv0 (smash a1 a2)), (pow2heapp n gv0 (smash a1 a1)), (pow2heapp n gv0 Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node x a2 a2))
(pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node gv0 a2 a2)), (pow2heapp n (find_max' n q) (Node gv0 a2 a1)), (pow2heapp n (find_max' n q) (Node gv0 a1 a2)), (pow2heapp n (find_max' n q) (Node gv0 a1 a1)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a1 a2))
(pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (find_max' n gv2) a2), (pow2heapp n (find_max' n gv2) a1), (pow2heapp n (find_max' n gv2) (Node n a2 a2)), (pow2heapp n (find_max' n gv2) (Node n a2 a1)), (pow2heapp n (find_max' n gv2) (Node n a1 a2)), (pow2heapp n (find_max' n gv2) (Node n a1 a1)), (pow2heapp n (find_max' n gv2) (Node x a2 a2)), (pow2heapp n (find_max' n gv2) (Node x a2 a1))
(pow2heapp n (find_max' n gv2) (Node x a1 a2)), (pow2heapp n (find_max' n gv2) (Node x a1 a1)), (pow2heapp n (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp n (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp n (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp n (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp n (find_max' n gv2) (smash a2 a2)), (pow2heapp n (find_max' n gv2) (smash a2 a1)), (pow2heapp n (find_max' n gv2) (smash a1 a2)), (pow2heapp n (find_max' n gv2) (smash a1 a1))
(pow2heapp n (find_max' n gv2) Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a1 a2))
(pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node gv0 a2 a2)), (pow2heapp n (find_max' x q) (Node gv0 a2 a1)), (pow2heapp n (find_max' x q) (Node gv0 a1 a2)), (pow2heapp n (find_max' x q) (Node gv0 a1 a1)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) Leaf)
(pow2heapp n (find_max' x gv2) a2), (pow2heapp n (find_max' x gv2) a1), (pow2heapp n (find_max' x gv2) (Node n a2 a2)), (pow2heapp n (find_max' x gv2) (Node n a2 a1)), (pow2heapp n (find_max' x gv2) (Node n a1 a2)), (pow2heapp n (find_max' x gv2) (Node n a1 a1)), (pow2heapp n (find_max' x gv2) (Node x a2 a2)), (pow2heapp n (find_max' x gv2) (Node x a2 a1)), (pow2heapp n (find_max' x gv2) (Node x a1 a2)), (pow2heapp n (find_max' x gv2) (Node x a1 a1))
(pow2heapp n (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp n (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp n (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp n (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp n (find_max' x gv2) (smash a2 a2)), (pow2heapp n (find_max' x gv2) (smash a2 a1)), (pow2heapp n (find_max' x gv2) (smash a1 a2)), (pow2heapp n (find_max' x gv2) (smash a1 a1)), (pow2heapp n (find_max' x gv2) Leaf), (pow2heapp n (find_max' gv0 q) a2)
(pow2heapp n (find_max' gv0 q) a1), (pow2heapp n (find_max' gv0 q) (Node n a2 a2)), (pow2heapp n (find_max' gv0 q) (Node n a2 a1)), (pow2heapp n (find_max' gv0 q) (Node n a1 a2)), (pow2heapp n (find_max' gv0 q) (Node n a1 a1)), (pow2heapp n (find_max' gv0 q) (Node x a2 a2)), (pow2heapp n (find_max' gv0 q) (Node x a2 a1)), (pow2heapp n (find_max' gv0 q) (Node x a1 a2)), (pow2heapp n (find_max' gv0 q) (Node x a1 a1)), (pow2heapp n (find_max' gv0 q) (Node gv0 a2 a2))
(pow2heapp n (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp n (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp n (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp n (find_max' gv0 q) (smash a2 a2)), (pow2heapp n (find_max' gv0 q) (smash a2 a1)), (pow2heapp n (find_max' gv0 q) (smash a1 a2)), (pow2heapp n (find_max' gv0 q) (smash a1 a1)), (pow2heapp n (find_max' gv0 q) Leaf), (pow2heapp n (find_max' gv0 gv2) a2), (pow2heapp n (find_max' gv0 gv2) a1)
(pow2heapp n (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp n (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp n (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp n (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp n (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp n (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp n (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp n (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp n (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp n (find_max' gv0 gv2) (Node gv0 a2 a1))
(pow2heapp n (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp n (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp n (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp n (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp n (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp n (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp n (find_max' gv0 gv2) Leaf), (pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) (Node n a2 a2))
(pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node gv0 a2 a2)), (pow2heapp n (length q) (Node gv0 a2 a1)), (pow2heapp n (length q) (Node gv0 a1 a2))
(pow2heapp n (length q) (Node gv0 a1 a1)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) Leaf), (pow2heapp n (length gv2) a2), (pow2heapp n (length gv2) a1), (pow2heapp n (length gv2) (Node n a2 a2)), (pow2heapp n (length gv2) (Node n a2 a1))
(pow2heapp n (length gv2) (Node n a1 a2)), (pow2heapp n (length gv2) (Node n a1 a1)), (pow2heapp n (length gv2) (Node x a2 a2)), (pow2heapp n (length gv2) (Node x a2 a1)), (pow2heapp n (length gv2) (Node x a1 a2)), (pow2heapp n (length gv2) (Node x a1 a1)), (pow2heapp n (length gv2) (Node gv0 a2 a2)), (pow2heapp n (length gv2) (Node gv0 a2 a1)), (pow2heapp n (length gv2) (Node gv0 a1 a2)), (pow2heapp n (length gv2) (Node gv0 a1 a1))
(pow2heapp n (length gv2) (smash a2 a2)), (pow2heapp n (length gv2) (smash a2 a1)), (pow2heapp n (length gv2) (smash a1 a2)), (pow2heapp n (length gv2) (smash a1 a1)), (pow2heapp n (length gv2) Leaf), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (Node x a2 a2))
(pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node gv0 a2 a2)), (pow2heapp x n (Node gv0 a2 a1)), (pow2heapp x n (Node gv0 a1 a2)), (pow2heapp x n (Node gv0 a1 a1)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a1 a2))
(pow2heapp x n (smash a1 a1)), (pow2heapp x n Leaf), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a1 a2)), (pow2heapp x x (Node n a1 a1)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1))
(pow2heapp x x (Node gv0 a2 a2)), (pow2heapp x x (Node gv0 a2 a1)), (pow2heapp x x (Node gv0 a1 a2)), (pow2heapp x x (Node gv0 a1 a1)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x Leaf), (pow2heapp x gv0 (Node n a2 a2))
(pow2heapp x gv0 (Node n a2 a1)), (pow2heapp x gv0 (Node n a1 a2)), (pow2heapp x gv0 (Node n a1 a1)), (pow2heapp x gv0 (Node x a2 a2)), (pow2heapp x gv0 (Node x a2 a1)), (pow2heapp x gv0 (Node x a1 a2)), (pow2heapp x gv0 (Node x a1 a1)), (pow2heapp x gv0 (Node gv0 a2 a2)), (pow2heapp x gv0 (Node gv0 a2 a1)), (pow2heapp x gv0 (Node gv0 a1 a2))
(pow2heapp x gv0 (Node gv0 a1 a1)), (pow2heapp x gv0 (smash a2 a2)), (pow2heapp x gv0 (smash a2 a1)), (pow2heapp x gv0 (smash a1 a2)), (pow2heapp x gv0 (smash a1 a1)), (pow2heapp x gv0 Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1))
(pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node gv0 a2 a2)), (pow2heapp x (find_max' n q) (Node gv0 a2 a1)), (pow2heapp x (find_max' n q) (Node gv0 a1 a2)), (pow2heapp x (find_max' n q) (Node gv0 a1 a1))
(pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' n gv2) a2), (pow2heapp x (find_max' n gv2) a1), (pow2heapp x (find_max' n gv2) (Node n a2 a2)), (pow2heapp x (find_max' n gv2) (Node n a2 a1)), (pow2heapp x (find_max' n gv2) (Node n a1 a2))
(pow2heapp x (find_max' n gv2) (Node n a1 a1)), (pow2heapp x (find_max' n gv2) (Node x a2 a2)), (pow2heapp x (find_max' n gv2) (Node x a2 a1)), (pow2heapp x (find_max' n gv2) (Node x a1 a2)), (pow2heapp x (find_max' n gv2) (Node x a1 a1)), (pow2heapp x (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp x (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp x (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp x (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp x (find_max' n gv2) (smash a2 a2))
(pow2heapp x (find_max' n gv2) (smash a2 a1)), (pow2heapp x (find_max' n gv2) (smash a1 a2)), (pow2heapp x (find_max' n gv2) (smash a1 a1)), (pow2heapp x (find_max' n gv2) Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1))
(pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node gv0 a2 a2)), (pow2heapp x (find_max' x q) (Node gv0 a2 a1)), (pow2heapp x (find_max' x q) (Node gv0 a1 a2)), (pow2heapp x (find_max' x q) (Node gv0 a1 a1)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1))
(pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) a2), (pow2heapp x (find_max' x gv2) a1), (pow2heapp x (find_max' x gv2) (Node n a2 a2)), (pow2heapp x (find_max' x gv2) (Node n a2 a1)), (pow2heapp x (find_max' x gv2) (Node n a1 a2)), (pow2heapp x (find_max' x gv2) (Node n a1 a1)), (pow2heapp x (find_max' x gv2) (Node x a2 a2))
(pow2heapp x (find_max' x gv2) (Node x a2 a1)), (pow2heapp x (find_max' x gv2) (Node x a1 a2)), (pow2heapp x (find_max' x gv2) (Node x a1 a1)), (pow2heapp x (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp x (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp x (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp x (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp x (find_max' x gv2) (smash a2 a2)), (pow2heapp x (find_max' x gv2) (smash a2 a1)), (pow2heapp x (find_max' x gv2) (smash a1 a2))
(pow2heapp x (find_max' x gv2) (smash a1 a1)), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (find_max' gv0 q) a2), (pow2heapp x (find_max' gv0 q) a1), (pow2heapp x (find_max' gv0 q) (Node n a2 a2)), (pow2heapp x (find_max' gv0 q) (Node n a2 a1)), (pow2heapp x (find_max' gv0 q) (Node n a1 a2)), (pow2heapp x (find_max' gv0 q) (Node n a1 a1)), (pow2heapp x (find_max' gv0 q) (Node x a2 a2)), (pow2heapp x (find_max' gv0 q) (Node x a2 a1))
(pow2heapp x (find_max' gv0 q) (Node x a1 a2)), (pow2heapp x (find_max' gv0 q) (Node x a1 a1)), (pow2heapp x (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp x (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp x (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp x (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp x (find_max' gv0 q) (smash a2 a2)), (pow2heapp x (find_max' gv0 q) (smash a2 a1)), (pow2heapp x (find_max' gv0 q) (smash a1 a2)), (pow2heapp x (find_max' gv0 q) (smash a1 a1))
(pow2heapp x (find_max' gv0 q) Leaf), (pow2heapp x (find_max' gv0 gv2) a2), (pow2heapp x (find_max' gv0 gv2) a1), (pow2heapp x (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp x (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp x (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp x (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp x (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp x (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp x (find_max' gv0 gv2) (Node x a1 a2))
(pow2heapp x (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp x (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp x (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp x (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp x (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp x (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp x (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp x (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp x (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp x (find_max' gv0 gv2) Leaf)
(pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1))
(pow2heapp x (length q) (Node gv0 a2 a2)), (pow2heapp x (length q) (Node gv0 a2 a1)), (pow2heapp x (length q) (Node gv0 a1 a2)), (pow2heapp x (length q) (Node gv0 a1 a1)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv2) a2)
(pow2heapp x (length gv2) a1), (pow2heapp x (length gv2) (Node n a2 a2)), (pow2heapp x (length gv2) (Node n a2 a1)), (pow2heapp x (length gv2) (Node n a1 a2)), (pow2heapp x (length gv2) (Node n a1 a1)), (pow2heapp x (length gv2) (Node x a2 a2)), (pow2heapp x (length gv2) (Node x a2 a1)), (pow2heapp x (length gv2) (Node x a1 a2)), (pow2heapp x (length gv2) (Node x a1 a1)), (pow2heapp x (length gv2) (Node gv0 a2 a2))
(pow2heapp x (length gv2) (Node gv0 a2 a1)), (pow2heapp x (length gv2) (Node gv0 a1 a2)), (pow2heapp x (length gv2) (Node gv0 a1 a1)), (pow2heapp x (length gv2) (smash a2 a2)), (pow2heapp x (length gv2) (smash a2 a1)), (pow2heapp x (length gv2) (smash a1 a2)), (pow2heapp x (length gv2) (smash a1 a1)), (pow2heapp x (length gv2) Leaf), (pow2heapp gv0 n (Node n a2 a2)), (pow2heapp gv0 n (Node n a2 a1))
(pow2heapp gv0 n (Node n a1 a2)), (pow2heapp gv0 n (Node n a1 a1)), (pow2heapp gv0 n (Node x a2 a2)), (pow2heapp gv0 n (Node x a2 a1)), (pow2heapp gv0 n (Node x a1 a2)), (pow2heapp gv0 n (Node x a1 a1)), (pow2heapp gv0 n (Node gv0 a2 a2)), (pow2heapp gv0 n (Node gv0 a2 a1)), (pow2heapp gv0 n (Node gv0 a1 a2)), (pow2heapp gv0 n (Node gv0 a1 a1))
(pow2heapp gv0 n (smash a2 a2)), (pow2heapp gv0 n (smash a2 a1)), (pow2heapp gv0 n (smash a1 a2)), (pow2heapp gv0 n (smash a1 a1)), (pow2heapp gv0 n Leaf), (pow2heapp gv0 x (Node n a2 a2)), (pow2heapp gv0 x (Node n a2 a1)), (pow2heapp gv0 x (Node n a1 a2)), (pow2heapp gv0 x (Node n a1 a1)), (pow2heapp gv0 x (Node x a2 a2))
(pow2heapp gv0 x (Node x a2 a1)), (pow2heapp gv0 x (Node x a1 a2)), (pow2heapp gv0 x (Node x a1 a1)), (pow2heapp gv0 x (Node gv0 a2 a2)), (pow2heapp gv0 x (Node gv0 a2 a1)), (pow2heapp gv0 x (Node gv0 a1 a2)), (pow2heapp gv0 x (Node gv0 a1 a1)), (pow2heapp gv0 x (smash a2 a2)), (pow2heapp gv0 x (smash a2 a1)), (pow2heapp gv0 x (smash a1 a2))
(pow2heapp gv0 x (smash a1 a1)), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 (Node n a2 a2)), (pow2heapp gv0 gv0 (Node n a2 a1)), (pow2heapp gv0 gv0 (Node n a1 a2)), (pow2heapp gv0 gv0 (Node n a1 a1)), (pow2heapp gv0 gv0 (Node x a2 a2)), (pow2heapp gv0 gv0 (Node x a2 a1)), (pow2heapp gv0 gv0 (Node x a1 a2)), (pow2heapp gv0 gv0 (Node x a1 a1))
(pow2heapp gv0 gv0 (Node gv0 a2 a2)), (pow2heapp gv0 gv0 (Node gv0 a2 a1)), (pow2heapp gv0 gv0 (Node gv0 a1 a2)), (pow2heapp gv0 gv0 (Node gv0 a1 a1)), (pow2heapp gv0 gv0 (smash a2 a2)), (pow2heapp gv0 gv0 (smash a2 a1)), (pow2heapp gv0 gv0 (smash a1 a2)), (pow2heapp gv0 gv0 (smash a1 a1)), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (find_max' n q) a2)
(pow2heapp gv0 (find_max' n q) a1), (pow2heapp gv0 (find_max' n q) (Node n a2 a2)), (pow2heapp gv0 (find_max' n q) (Node n a2 a1)), (pow2heapp gv0 (find_max' n q) (Node n a1 a2)), (pow2heapp gv0 (find_max' n q) (Node n a1 a1)), (pow2heapp gv0 (find_max' n q) (Node x a2 a2)), (pow2heapp gv0 (find_max' n q) (Node x a2 a1)), (pow2heapp gv0 (find_max' n q) (Node x a1 a2)), (pow2heapp gv0 (find_max' n q) (Node x a1 a1)), (pow2heapp gv0 (find_max' n q) (Node gv0 a2 a2))
(pow2heapp gv0 (find_max' n q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n q) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' n q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n q) (smash a2 a2)), (pow2heapp gv0 (find_max' n q) (smash a2 a1)), (pow2heapp gv0 (find_max' n q) (smash a1 a2)), (pow2heapp gv0 (find_max' n q) (smash a1 a1)), (pow2heapp gv0 (find_max' n q) Leaf), (pow2heapp gv0 (find_max' n gv2) a2), (pow2heapp gv0 (find_max' n gv2) a1)
(pow2heapp gv0 (find_max' n gv2) (Node n a2 a2)), (pow2heapp gv0 (find_max' n gv2) (Node n a2 a1)), (pow2heapp gv0 (find_max' n gv2) (Node n a1 a2)), (pow2heapp gv0 (find_max' n gv2) (Node n a1 a1)), (pow2heapp gv0 (find_max' n gv2) (Node x a2 a2)), (pow2heapp gv0 (find_max' n gv2) (Node x a2 a1)), (pow2heapp gv0 (find_max' n gv2) (Node x a1 a2)), (pow2heapp gv0 (find_max' n gv2) (Node x a1 a1)), (pow2heapp gv0 (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n gv2) (Node gv0 a2 a1))
(pow2heapp gv0 (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n gv2) (smash a2 a2)), (pow2heapp gv0 (find_max' n gv2) (smash a2 a1)), (pow2heapp gv0 (find_max' n gv2) (smash a1 a2)), (pow2heapp gv0 (find_max' n gv2) (smash a1 a1)), (pow2heapp gv0 (find_max' n gv2) Leaf), (pow2heapp gv0 (find_max' x q) a2), (pow2heapp gv0 (find_max' x q) a1), (pow2heapp gv0 (find_max' x q) (Node n a2 a2))
(pow2heapp gv0 (find_max' x q) (Node n a2 a1)), (pow2heapp gv0 (find_max' x q) (Node n a1 a2)), (pow2heapp gv0 (find_max' x q) (Node n a1 a1)), (pow2heapp gv0 (find_max' x q) (Node x a2 a2)), (pow2heapp gv0 (find_max' x q) (Node x a2 a1)), (pow2heapp gv0 (find_max' x q) (Node x a1 a2)), (pow2heapp gv0 (find_max' x q) (Node x a1 a1)), (pow2heapp gv0 (find_max' x q) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' x q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' x q) (Node gv0 a1 a2))
(pow2heapp gv0 (find_max' x q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' x q) (smash a2 a2)), (pow2heapp gv0 (find_max' x q) (smash a2 a1)), (pow2heapp gv0 (find_max' x q) (smash a1 a2)), (pow2heapp gv0 (find_max' x q) (smash a1 a1)), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' x gv2) a2), (pow2heapp gv0 (find_max' x gv2) a1), (pow2heapp gv0 (find_max' x gv2) (Node n a2 a2)), (pow2heapp gv0 (find_max' x gv2) (Node n a2 a1))
(pow2heapp gv0 (find_max' x gv2) (Node n a1 a2)), (pow2heapp gv0 (find_max' x gv2) (Node n a1 a1)), (pow2heapp gv0 (find_max' x gv2) (Node x a2 a2)), (pow2heapp gv0 (find_max' x gv2) (Node x a2 a1)), (pow2heapp gv0 (find_max' x gv2) (Node x a1 a2)), (pow2heapp gv0 (find_max' x gv2) (Node x a1 a1)), (pow2heapp gv0 (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' x gv2) (Node gv0 a1 a1))
(pow2heapp gv0 (find_max' x gv2) (smash a2 a2)), (pow2heapp gv0 (find_max' x gv2) (smash a2 a1)), (pow2heapp gv0 (find_max' x gv2) (smash a1 a2)), (pow2heapp gv0 (find_max' x gv2) (smash a1 a1)), (pow2heapp gv0 (find_max' x gv2) Leaf), (pow2heapp gv0 (find_max' gv0 q) a2), (pow2heapp gv0 (find_max' gv0 q) a1), (pow2heapp gv0 (find_max' gv0 q) (Node n a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node n a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node n a1 a2))
(pow2heapp gv0 (find_max' gv0 q) (Node n a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node x a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node x a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node x a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node x a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (smash a2 a2))
(pow2heapp gv0 (find_max' gv0 q) (smash a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (smash a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (smash a1 a1)), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (find_max' gv0 gv2) a2), (pow2heapp gv0 (find_max' gv0 gv2) a1), (pow2heapp gv0 (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp gv0 (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node n a1 a1))
(pow2heapp gv0 (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp gv0 (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp gv0 (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (smash a2 a1))
(pow2heapp gv0 (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp gv0 (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp gv0 (find_max' gv0 gv2) Leaf), (pow2heapp gv0 (length q) a2), (pow2heapp gv0 (length q) a1), (pow2heapp gv0 (length q) (Node n a2 a2)), (pow2heapp gv0 (length q) (Node n a2 a1)), (pow2heapp gv0 (length q) (Node n a1 a2)), (pow2heapp gv0 (length q) (Node n a1 a1)), (pow2heapp gv0 (length q) (Node x a2 a2))
(pow2heapp gv0 (length q) (Node x a2 a1)), (pow2heapp gv0 (length q) (Node x a1 a2)), (pow2heapp gv0 (length q) (Node x a1 a1)), (pow2heapp gv0 (length q) (Node gv0 a2 a2)), (pow2heapp gv0 (length q) (Node gv0 a2 a1)), (pow2heapp gv0 (length q) (Node gv0 a1 a2)), (pow2heapp gv0 (length q) (Node gv0 a1 a1)), (pow2heapp gv0 (length q) (smash a2 a2)), (pow2heapp gv0 (length q) (smash a2 a1)), (pow2heapp gv0 (length q) (smash a1 a2))
(pow2heapp gv0 (length q) (smash a1 a1)), (pow2heapp gv0 (length q) Leaf), (pow2heapp gv0 (length gv2) a2), (pow2heapp gv0 (length gv2) a1), (pow2heapp gv0 (length gv2) (Node n a2 a2)), (pow2heapp gv0 (length gv2) (Node n a2 a1)), (pow2heapp gv0 (length gv2) (Node n a1 a2)), (pow2heapp gv0 (length gv2) (Node n a1 a1)), (pow2heapp gv0 (length gv2) (Node x a2 a2)), (pow2heapp gv0 (length gv2) (Node x a2 a1))
(pow2heapp gv0 (length gv2) (Node x a1 a2)), (pow2heapp gv0 (length gv2) (Node x a1 a1)), (pow2heapp gv0 (length gv2) (Node gv0 a2 a2)), (pow2heapp gv0 (length gv2) (Node gv0 a2 a1)), (pow2heapp gv0 (length gv2) (Node gv0 a1 a2)), (pow2heapp gv0 (length gv2) (Node gv0 a1 a1)), (pow2heapp gv0 (length gv2) (smash a2 a2)), (pow2heapp gv0 (length gv2) (smash a2 a1)), (pow2heapp gv0 (length gv2) (smash a1 a2)), (pow2heapp gv0 (length gv2) (smash a1 a1))
(pow2heapp gv0 (length gv2) Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a1 a2))
(pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node gv0 a2 a2)), (pow2heapp (find_max' n q) n (Node gv0 a2 a1)), (pow2heapp (find_max' n q) n (Node gv0 a1 a2)), (pow2heapp (find_max' n q) n (Node gv0 a1 a1)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n Leaf)
(pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1))
(pow2heapp (find_max' n q) x (Node gv0 a2 a2)), (pow2heapp (find_max' n q) x (Node gv0 a2 a1)), (pow2heapp (find_max' n q) x (Node gv0 a1 a2)), (pow2heapp (find_max' n q) x (Node gv0 a1 a1)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) gv0 a2)
(pow2heapp (find_max' n q) gv0 a1), (pow2heapp (find_max' n q) gv0 (Node n a2 a2)), (pow2heapp (find_max' n q) gv0 (Node n a2 a1)), (pow2heapp (find_max' n q) gv0 (Node n a1 a2)), (pow2heapp (find_max' n q) gv0 (Node n a1 a1)), (pow2heapp (find_max' n q) gv0 (Node x a2 a2)), (pow2heapp (find_max' n q) gv0 (Node x a2 a1)), (pow2heapp (find_max' n q) gv0 (Node x a1 a2)), (pow2heapp (find_max' n q) gv0 (Node x a1 a1)), (pow2heapp (find_max' n q) gv0 (Node gv0 a2 a2))
(pow2heapp (find_max' n q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n q) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' n q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n q) gv0 (smash a2 a2)), (pow2heapp (find_max' n q) gv0 (smash a2 a1)), (pow2heapp (find_max' n q) gv0 (smash a1 a2)), (pow2heapp (find_max' n q) gv0 (smash a1 a1)), (pow2heapp (find_max' n q) gv0 Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1)
(pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a2 a1))
(pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' n gv2) a2), (pow2heapp (find_max' n q) (find_max' n gv2) a1), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a2))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node gv0 a1 a2))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a1 a1))
(pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (find_max' x gv2) a2), (pow2heapp (find_max' n q) (find_max' x gv2) a1), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a2))
(pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a2))
(pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) Leaf), (pow2heapp (find_max' n q) (find_max' gv0 q) a2), (pow2heapp (find_max' n q) (find_max' gv0 q) a1), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a1 a1))
(pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a2 a1))
(pow2heapp (find_max' n q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' n q) (find_max' gv0 gv2) a2), (pow2heapp (find_max' n q) (find_max' gv0 gv2) a1), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node x a2 a2))
(pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1))
(pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1))
(pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' n q) (length gv2) a2), (pow2heapp (find_max' n q) (length gv2) a1), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 a2))
(pow2heapp (find_max' n q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (length gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (length gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (length gv2) Leaf)
(pow2heapp (find_max' n gv2) n a2), (pow2heapp (find_max' n gv2) n a1), (pow2heapp (find_max' n gv2) n (Node n a2 a2)), (pow2heapp (find_max' n gv2) n (Node n a2 a1)), (pow2heapp (find_max' n gv2) n (Node n a1 a2)), (pow2heapp (find_max' n gv2) n (Node n a1 a1)), (pow2heapp (find_max' n gv2) n (Node x a2 a2)), (pow2heapp (find_max' n gv2) n (Node x a2 a1)), (pow2heapp (find_max' n gv2) n (Node x a1 a2)), (pow2heapp (find_max' n gv2) n (Node x a1 a1))
(pow2heapp (find_max' n gv2) n (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) n (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) n (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) n (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) n (smash a2 a2)), (pow2heapp (find_max' n gv2) n (smash a2 a1)), (pow2heapp (find_max' n gv2) n (smash a1 a2)), (pow2heapp (find_max' n gv2) n (smash a1 a1)), (pow2heapp (find_max' n gv2) n Leaf), (pow2heapp (find_max' n gv2) x a2)
(pow2heapp (find_max' n gv2) x a1), (pow2heapp (find_max' n gv2) x (Node n a2 a2)), (pow2heapp (find_max' n gv2) x (Node n a2 a1)), (pow2heapp (find_max' n gv2) x (Node n a1 a2)), (pow2heapp (find_max' n gv2) x (Node n a1 a1)), (pow2heapp (find_max' n gv2) x (Node x a2 a2)), (pow2heapp (find_max' n gv2) x (Node x a2 a1)), (pow2heapp (find_max' n gv2) x (Node x a1 a2)), (pow2heapp (find_max' n gv2) x (Node x a1 a1)), (pow2heapp (find_max' n gv2) x (Node gv0 a2 a2))
(pow2heapp (find_max' n gv2) x (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) x (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) x (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) x (smash a2 a2)), (pow2heapp (find_max' n gv2) x (smash a2 a1)), (pow2heapp (find_max' n gv2) x (smash a1 a2)), (pow2heapp (find_max' n gv2) x (smash a1 a1)), (pow2heapp (find_max' n gv2) x Leaf), (pow2heapp (find_max' n gv2) gv0 a2), (pow2heapp (find_max' n gv2) gv0 a1)
(pow2heapp (find_max' n gv2) gv0 (Node n a2 a2)), (pow2heapp (find_max' n gv2) gv0 (Node n a2 a1)), (pow2heapp (find_max' n gv2) gv0 (Node n a1 a2)), (pow2heapp (find_max' n gv2) gv0 (Node n a1 a1)), (pow2heapp (find_max' n gv2) gv0 (Node x a2 a2)), (pow2heapp (find_max' n gv2) gv0 (Node x a2 a1)), (pow2heapp (find_max' n gv2) gv0 (Node x a1 a2)), (pow2heapp (find_max' n gv2) gv0 (Node x a1 a1)), (pow2heapp (find_max' n gv2) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) gv0 (Node gv0 a2 a1))
(pow2heapp (find_max' n gv2) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) gv0 (smash a2 a2)), (pow2heapp (find_max' n gv2) gv0 (smash a2 a1)), (pow2heapp (find_max' n gv2) gv0 (smash a1 a2)), (pow2heapp (find_max' n gv2) gv0 (smash a1 a1)), (pow2heapp (find_max' n gv2) gv0 Leaf), (pow2heapp (find_max' n gv2) (find_max' n q) a2), (pow2heapp (find_max' n gv2) (find_max' n q) a1), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a2))
(pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node gv0 a1 a2))
(pow2heapp (find_max' n gv2) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) Leaf), (pow2heapp (find_max' n gv2) (find_max' n gv2) a2), (pow2heapp (find_max' n gv2) (find_max' n gv2) a1), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a1))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node gv0 a1 a1))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' n gv2) (find_max' x q) a2), (pow2heapp (find_max' n gv2) (find_max' x q) a1), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a2))
(pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a2))
(pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) Leaf), (pow2heapp (find_max' n gv2) (find_max' x gv2) a2), (pow2heapp (find_max' n gv2) (find_max' x gv2) a1), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a1))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a1))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' n gv2) (find_max' gv0 q) a2), (pow2heapp (find_max' n gv2) (find_max' gv0 q) a1), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node x a2 a2))
(pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) (smash a1 a2))
(pow2heapp (find_max' n gv2) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 q) Leaf), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) a2), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) a1), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node x a2 a1))
(pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' gv0 gv2) (smash a1 a1))
(pow2heapp (find_max' n gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' n gv2) (length q) a2), (pow2heapp (find_max' n gv2) (length q) a1), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 a2))
(pow2heapp (find_max' n gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length q) Leaf)
(pow2heapp (find_max' n gv2) (length gv2) a2), (pow2heapp (find_max' n gv2) (length gv2) a1), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a1))
(pow2heapp (find_max' n gv2) (length gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) Leaf), (pow2heapp (find_max' x q) n a2)
(pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node gv0 a2 a2))
(pow2heapp (find_max' x q) n (Node gv0 a2 a1)), (pow2heapp (find_max' x q) n (Node gv0 a1 a2)), (pow2heapp (find_max' x q) n (Node gv0 a1 a1)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1)
(pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node gv0 a2 a2)), (pow2heapp (find_max' x q) x (Node gv0 a2 a1))
(pow2heapp (find_max' x q) x (Node gv0 a1 a2)), (pow2heapp (find_max' x q) x (Node gv0 a1 a1)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) gv0 a2), (pow2heapp (find_max' x q) gv0 a1), (pow2heapp (find_max' x q) gv0 (Node n a2 a2))
(pow2heapp (find_max' x q) gv0 (Node n a2 a1)), (pow2heapp (find_max' x q) gv0 (Node n a1 a2)), (pow2heapp (find_max' x q) gv0 (Node n a1 a1)), (pow2heapp (find_max' x q) gv0 (Node x a2 a2)), (pow2heapp (find_max' x q) gv0 (Node x a2 a1)), (pow2heapp (find_max' x q) gv0 (Node x a1 a2)), (pow2heapp (find_max' x q) gv0 (Node x a1 a1)), (pow2heapp (find_max' x q) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' x q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' x q) gv0 (Node gv0 a1 a2))
(pow2heapp (find_max' x q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' x q) gv0 (smash a2 a2)), (pow2heapp (find_max' x q) gv0 (smash a2 a1)), (pow2heapp (find_max' x q) gv0 (smash a1 a2)), (pow2heapp (find_max' x q) gv0 (smash a1 a1)), (pow2heapp (find_max' x q) gv0 Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a1 a1))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (find_max' n gv2) a2), (pow2heapp (find_max' x q) (find_max' n gv2) a1), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a2))
(pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a2))
(pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1))
(pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) a2), (pow2heapp (find_max' x q) (find_max' x gv2) a1), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a2))
(pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a2))
(pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 q) a2), (pow2heapp (find_max' x q) (find_max' gv0 q) a1), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a2 a1))
(pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a1 a1))
(pow2heapp (find_max' x q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 gv2) a2), (pow2heapp (find_max' x q) (find_max' gv0 gv2) a1), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node x a1 a2))
(pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv2) Leaf)
(pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1))
(pow2heapp (find_max' x q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) a2)
(pow2heapp (find_max' x q) (length gv2) a1), (pow2heapp (find_max' x q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node gv0 a2 a2))
(pow2heapp (find_max' x q) (length gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (length gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) n a2), (pow2heapp (find_max' x gv2) n a1)
(pow2heapp (find_max' x gv2) n (Node n a2 a2)), (pow2heapp (find_max' x gv2) n (Node n a2 a1)), (pow2heapp (find_max' x gv2) n (Node n a1 a2)), (pow2heapp (find_max' x gv2) n (Node n a1 a1)), (pow2heapp (find_max' x gv2) n (Node x a2 a2)), (pow2heapp (find_max' x gv2) n (Node x a2 a1)), (pow2heapp (find_max' x gv2) n (Node x a1 a2)), (pow2heapp (find_max' x gv2) n (Node x a1 a1)), (pow2heapp (find_max' x gv2) n (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) n (Node gv0 a2 a1))
(pow2heapp (find_max' x gv2) n (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) n (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) n (smash a2 a2)), (pow2heapp (find_max' x gv2) n (smash a2 a1)), (pow2heapp (find_max' x gv2) n (smash a1 a2)), (pow2heapp (find_max' x gv2) n (smash a1 a1)), (pow2heapp (find_max' x gv2) n Leaf), (pow2heapp (find_max' x gv2) x a2), (pow2heapp (find_max' x gv2) x a1), (pow2heapp (find_max' x gv2) x (Node n a2 a2))
(pow2heapp (find_max' x gv2) x (Node n a2 a1)), (pow2heapp (find_max' x gv2) x (Node n a1 a2)), (pow2heapp (find_max' x gv2) x (Node n a1 a1)), (pow2heapp (find_max' x gv2) x (Node x a2 a2)), (pow2heapp (find_max' x gv2) x (Node x a2 a1)), (pow2heapp (find_max' x gv2) x (Node x a1 a2)), (pow2heapp (find_max' x gv2) x (Node x a1 a1)), (pow2heapp (find_max' x gv2) x (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) x (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) x (Node gv0 a1 a2))
(pow2heapp (find_max' x gv2) x (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) x (smash a2 a2)), (pow2heapp (find_max' x gv2) x (smash a2 a1)), (pow2heapp (find_max' x gv2) x (smash a1 a2)), (pow2heapp (find_max' x gv2) x (smash a1 a1)), (pow2heapp (find_max' x gv2) x Leaf), (pow2heapp (find_max' x gv2) gv0 a2), (pow2heapp (find_max' x gv2) gv0 a1), (pow2heapp (find_max' x gv2) gv0 (Node n a2 a2)), (pow2heapp (find_max' x gv2) gv0 (Node n a2 a1))
(pow2heapp (find_max' x gv2) gv0 (Node n a1 a2)), (pow2heapp (find_max' x gv2) gv0 (Node n a1 a1)), (pow2heapp (find_max' x gv2) gv0 (Node x a2 a2)), (pow2heapp (find_max' x gv2) gv0 (Node x a2 a1)), (pow2heapp (find_max' x gv2) gv0 (Node x a1 a2)), (pow2heapp (find_max' x gv2) gv0 (Node x a1 a1)), (pow2heapp (find_max' x gv2) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) gv0 (Node gv0 a1 a1))
(pow2heapp (find_max' x gv2) gv0 (smash a2 a2)), (pow2heapp (find_max' x gv2) gv0 (smash a2 a1)), (pow2heapp (find_max' x gv2) gv0 (smash a1 a2)), (pow2heapp (find_max' x gv2) gv0 (smash a1 a1)), (pow2heapp (find_max' x gv2) gv0 Leaf), (pow2heapp (find_max' x gv2) (find_max' n q) a2), (pow2heapp (find_max' x gv2) (find_max' n q) a1), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a2))
(pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a2))
(pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) Leaf), (pow2heapp (find_max' x gv2) (find_max' n gv2) a2), (pow2heapp (find_max' x gv2) (find_max' n gv2) a1), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a1))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a1))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) a2), (pow2heapp (find_max' x gv2) (find_max' x q) a1), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a2))
(pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv2) a2), (pow2heapp (find_max' x gv2) (find_max' x gv2) a1), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a1))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a1))
(pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' gv0 q) a2), (pow2heapp (find_max' x gv2) (find_max' gv0 q) a1), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node x a1 a2))
(pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 q) Leaf)
(pow2heapp (find_max' x gv2) (find_max' gv0 gv2) a2), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) a1), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node x a1 a1))
(pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) a2)
(pow2heapp (find_max' x gv2) (length q) a1), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node gv0 a2 a2))
(pow2heapp (find_max' x gv2) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) a2), (pow2heapp (find_max' x gv2) (length gv2) a1)
(pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node gv0 a2 a1))
(pow2heapp (find_max' x gv2) (length gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (find_max' gv0 q) n a2), (pow2heapp (find_max' gv0 q) n a1), (pow2heapp (find_max' gv0 q) n (Node n a2 a2))
(pow2heapp (find_max' gv0 q) n (Node n a2 a1)), (pow2heapp (find_max' gv0 q) n (Node n a1 a2)), (pow2heapp (find_max' gv0 q) n (Node n a1 a1)), (pow2heapp (find_max' gv0 q) n (Node x a2 a2)), (pow2heapp (find_max' gv0 q) n (Node x a2 a1)), (pow2heapp (find_max' gv0 q) n (Node x a1 a2)), (pow2heapp (find_max' gv0 q) n (Node x a1 a1)), (pow2heapp (find_max' gv0 q) n (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) n (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) n (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 q) n (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) n (smash a2 a2)), (pow2heapp (find_max' gv0 q) n (smash a2 a1)), (pow2heapp (find_max' gv0 q) n (smash a1 a2)), (pow2heapp (find_max' gv0 q) n (smash a1 a1)), (pow2heapp (find_max' gv0 q) n Leaf), (pow2heapp (find_max' gv0 q) x a2), (pow2heapp (find_max' gv0 q) x a1), (pow2heapp (find_max' gv0 q) x (Node n a2 a2)), (pow2heapp (find_max' gv0 q) x (Node n a2 a1))
(pow2heapp (find_max' gv0 q) x (Node n a1 a2)), (pow2heapp (find_max' gv0 q) x (Node n a1 a1)), (pow2heapp (find_max' gv0 q) x (Node x a2 a2)), (pow2heapp (find_max' gv0 q) x (Node x a2 a1)), (pow2heapp (find_max' gv0 q) x (Node x a1 a2)), (pow2heapp (find_max' gv0 q) x (Node x a1 a1)), (pow2heapp (find_max' gv0 q) x (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) x (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) x (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) x (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 q) x (smash a2 a2)), (pow2heapp (find_max' gv0 q) x (smash a2 a1)), (pow2heapp (find_max' gv0 q) x (smash a1 a2)), (pow2heapp (find_max' gv0 q) x (smash a1 a1)), (pow2heapp (find_max' gv0 q) x Leaf), (pow2heapp (find_max' gv0 q) gv0 a2), (pow2heapp (find_max' gv0 q) gv0 a1), (pow2heapp (find_max' gv0 q) gv0 (Node n a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node n a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node n a1 a2))
(pow2heapp (find_max' gv0 q) gv0 (Node n a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node x a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node x a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node x a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node x a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (smash a2 a2))
(pow2heapp (find_max' gv0 q) gv0 (smash a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (smash a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (smash a1 a1)), (pow2heapp (find_max' gv0 q) gv0 Leaf), (pow2heapp (find_max' gv0 q) (find_max' n q) a2), (pow2heapp (find_max' gv0 q) (find_max' n q) a1), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a2 a1))
(pow2heapp (find_max' gv0 q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' n gv2) a2), (pow2heapp (find_max' gv0 q) (find_max' n gv2) a1), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node x a2 a2))
(pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) (smash a1 a2))
(pow2heapp (find_max' gv0 q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv2) Leaf), (pow2heapp (find_max' gv0 q) (find_max' x q) a2), (pow2heapp (find_max' gv0 q) (find_max' x q) a1), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a2 a1))
(pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' x gv2) a2), (pow2heapp (find_max' gv0 q) (find_max' x gv2) a1), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node x a1 a2))
(pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv2) Leaf)
(pow2heapp (find_max' gv0 q) (find_max' gv0 q) a2), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) a1), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) a2)
(pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) a1), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node gv0 a2 a2))
(pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' gv0 q) (length q) a2), (pow2heapp (find_max' gv0 q) (length q) a1)
(pow2heapp (find_max' gv0 q) (length q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a2 a1))
(pow2heapp (find_max' gv0 q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (length q) Leaf), (pow2heapp (find_max' gv0 q) (length gv2) a2), (pow2heapp (find_max' gv0 q) (length gv2) a1), (pow2heapp (find_max' gv0 q) (length gv2) (Node n a2 a2))
(pow2heapp (find_max' gv0 q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 q) (length gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (length gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (length gv2) Leaf), (pow2heapp (find_max' gv0 gv2) n a2), (pow2heapp (find_max' gv0 gv2) n a1), (pow2heapp (find_max' gv0 gv2) n (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) n (Node n a2 a1))
(pow2heapp (find_max' gv0 gv2) n (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) n (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) n (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) n (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) n (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) n (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) n (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) n (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) n (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) n (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 gv2) n (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) n (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) n (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) n (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) n Leaf), (pow2heapp (find_max' gv0 gv2) x a2), (pow2heapp (find_max' gv0 gv2) x a1), (pow2heapp (find_max' gv0 gv2) x (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) x (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) x (Node n a1 a2))
(pow2heapp (find_max' gv0 gv2) x (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) x (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) x (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) x (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) x (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) x (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) x (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) x (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) x (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) x (smash a2 a2))
(pow2heapp (find_max' gv0 gv2) x (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) x (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) x (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) x Leaf), (pow2heapp (find_max' gv0 gv2) gv0 a2), (pow2heapp (find_max' gv0 gv2) gv0 a1), (pow2heapp (find_max' gv0 gv2) gv0 (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) gv0 (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node n a1 a1))
(pow2heapp (find_max' gv0 gv2) gv0 (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) gv0 (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) gv0 (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (smash a2 a1))
(pow2heapp (find_max' gv0 gv2) gv0 (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) gv0 (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) gv0 Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' n q) a2), (pow2heapp (find_max' gv0 gv2) (find_max' n q) a1), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node x a2 a2))
(pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' gv0 gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n q) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) a2), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) a1), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node x a2 a1))
(pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' n gv2) (smash a1 a1))
(pow2heapp (find_max' gv0 gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' x q) a2), (pow2heapp (find_max' gv0 gv2) (find_max' x q) a1), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x q) Leaf)
(pow2heapp (find_max' gv0 gv2) (find_max' x gv2) a2), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) a1), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node x a1 a1))
(pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) a2)
(pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) a1), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node gv0 a2 a2))
(pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) a2), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) a1)
(pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node gv0 a2 a1))
(pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' gv0 gv2) (length q) a2), (pow2heapp (find_max' gv0 gv2) (length q) a1), (pow2heapp (find_max' gv0 gv2) (length q) (Node n a2 a2))
(pow2heapp (find_max' gv0 gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 gv2) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (length q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (length q) Leaf), (pow2heapp (find_max' gv0 gv2) (length gv2) a2), (pow2heapp (find_max' gv0 gv2) (length gv2) a1), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node n a2 a1))
(pow2heapp (find_max' gv0 gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' gv0 gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' gv0 gv2) (length gv2) Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a1 a2))
(pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node gv0 a2 a2)), (pow2heapp (length q) n (Node gv0 a2 a1)), (pow2heapp (length q) n (Node gv0 a1 a2)), (pow2heapp (length q) n (Node gv0 a1 a1)), (pow2heapp (length q) n (smash a2 a2))
(pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1))
(pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a1 a2)), (pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node gv0 a2 a2)), (pow2heapp (length q) x (Node gv0 a2 a1)), (pow2heapp (length q) x (Node gv0 a1 a2)), (pow2heapp (length q) x (Node gv0 a1 a1)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1))
(pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) gv0 a2), (pow2heapp (length q) gv0 a1), (pow2heapp (length q) gv0 (Node n a2 a2)), (pow2heapp (length q) gv0 (Node n a2 a1)), (pow2heapp (length q) gv0 (Node n a1 a2)), (pow2heapp (length q) gv0 (Node n a1 a1)), (pow2heapp (length q) gv0 (Node x a2 a2))
(pow2heapp (length q) gv0 (Node x a2 a1)), (pow2heapp (length q) gv0 (Node x a1 a2)), (pow2heapp (length q) gv0 (Node x a1 a1)), (pow2heapp (length q) gv0 (Node gv0 a2 a2)), (pow2heapp (length q) gv0 (Node gv0 a2 a1)), (pow2heapp (length q) gv0 (Node gv0 a1 a2)), (pow2heapp (length q) gv0 (Node gv0 a1 a1)), (pow2heapp (length q) gv0 (smash a2 a2)), (pow2heapp (length q) gv0 (smash a2 a1)), (pow2heapp (length q) gv0 (smash a1 a2))
(pow2heapp (length q) gv0 (smash a1 a1)), (pow2heapp (length q) gv0 Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1))
(pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1))
(pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' n gv2) a2), (pow2heapp (length q) (find_max' n gv2) a1), (pow2heapp (length q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 a2))
(pow2heapp (length q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (length q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv2) Leaf)
(pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1))
(pow2heapp (length q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) a2)
(pow2heapp (length q) (find_max' x gv2) a1), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node gv0 a2 a2))
(pow2heapp (length q) (find_max' x gv2) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (length q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (find_max' gv0 q) a2), (pow2heapp (length q) (find_max' gv0 q) a1)
(pow2heapp (length q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a2 a1))
(pow2heapp (length q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (length q) (find_max' gv0 q) Leaf), (pow2heapp (length q) (find_max' gv0 gv2) a2), (pow2heapp (length q) (find_max' gv0 gv2) a1), (pow2heapp (length q) (find_max' gv0 gv2) (Node n a2 a2))
(pow2heapp (length q) (find_max' gv0 gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (Node gv0 a1 a2))
(pow2heapp (length q) (find_max' gv0 gv2) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' gv0 gv2) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1))
(pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node gv0 a2 a2)), (pow2heapp (length q) (length q) (Node gv0 a2 a1)), (pow2heapp (length q) (length q) (Node gv0 a1 a2)), (pow2heapp (length q) (length q) (Node gv0 a1 a1))
(pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv2) a2), (pow2heapp (length q) (length gv2) a1), (pow2heapp (length q) (length gv2) (Node n a2 a2)), (pow2heapp (length q) (length gv2) (Node n a2 a1)), (pow2heapp (length q) (length gv2) (Node n a1 a2))
(pow2heapp (length q) (length gv2) (Node n a1 a1)), (pow2heapp (length q) (length gv2) (Node x a2 a2)), (pow2heapp (length q) (length gv2) (Node x a2 a1)), (pow2heapp (length q) (length gv2) (Node x a1 a2)), (pow2heapp (length q) (length gv2) (Node x a1 a1)), (pow2heapp (length q) (length gv2) (Node gv0 a2 a2)), (pow2heapp (length q) (length gv2) (Node gv0 a2 a1)), (pow2heapp (length q) (length gv2) (Node gv0 a1 a2)), (pow2heapp (length q) (length gv2) (Node gv0 a1 a1)), (pow2heapp (length q) (length gv2) (smash a2 a2))
(pow2heapp (length q) (length gv2) (smash a2 a1)), (pow2heapp (length q) (length gv2) (smash a1 a2)), (pow2heapp (length q) (length gv2) (smash a1 a1)), (pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) n a2), (pow2heapp (length gv2) n a1), (pow2heapp (length gv2) n (Node n a2 a2)), (pow2heapp (length gv2) n (Node n a2 a1)), (pow2heapp (length gv2) n (Node n a1 a2)), (pow2heapp (length gv2) n (Node n a1 a1))
(pow2heapp (length gv2) n (Node x a2 a2)), (pow2heapp (length gv2) n (Node x a2 a1)), (pow2heapp (length gv2) n (Node x a1 a2)), (pow2heapp (length gv2) n (Node x a1 a1)), (pow2heapp (length gv2) n (Node gv0 a2 a2)), (pow2heapp (length gv2) n (Node gv0 a2 a1)), (pow2heapp (length gv2) n (Node gv0 a1 a2)), (pow2heapp (length gv2) n (Node gv0 a1 a1)), (pow2heapp (length gv2) n (smash a2 a2)), (pow2heapp (length gv2) n (smash a2 a1))
(pow2heapp (length gv2) n (smash a1 a2)), (pow2heapp (length gv2) n (smash a1 a1)), (pow2heapp (length gv2) n Leaf), (pow2heapp (length gv2) x a2), (pow2heapp (length gv2) x a1), (pow2heapp (length gv2) x (Node n a2 a2)), (pow2heapp (length gv2) x (Node n a2 a1)), (pow2heapp (length gv2) x (Node n a1 a2)), (pow2heapp (length gv2) x (Node n a1 a1)), (pow2heapp (length gv2) x (Node x a2 a2))
(pow2heapp (length gv2) x (Node x a2 a1)), (pow2heapp (length gv2) x (Node x a1 a2)), (pow2heapp (length gv2) x (Node x a1 a1)), (pow2heapp (length gv2) x (Node gv0 a2 a2)), (pow2heapp (length gv2) x (Node gv0 a2 a1)), (pow2heapp (length gv2) x (Node gv0 a1 a2)), (pow2heapp (length gv2) x (Node gv0 a1 a1)), (pow2heapp (length gv2) x (smash a2 a2)), (pow2heapp (length gv2) x (smash a2 a1)), (pow2heapp (length gv2) x (smash a1 a2))
(pow2heapp (length gv2) x (smash a1 a1)), (pow2heapp (length gv2) x Leaf), (pow2heapp (length gv2) gv0 a2), (pow2heapp (length gv2) gv0 a1), (pow2heapp (length gv2) gv0 (Node n a2 a2)), (pow2heapp (length gv2) gv0 (Node n a2 a1)), (pow2heapp (length gv2) gv0 (Node n a1 a2)), (pow2heapp (length gv2) gv0 (Node n a1 a1)), (pow2heapp (length gv2) gv0 (Node x a2 a2)), (pow2heapp (length gv2) gv0 (Node x a2 a1))
(pow2heapp (length gv2) gv0 (Node x a1 a2)), (pow2heapp (length gv2) gv0 (Node x a1 a1)), (pow2heapp (length gv2) gv0 (Node gv0 a2 a2)), (pow2heapp (length gv2) gv0 (Node gv0 a2 a1)), (pow2heapp (length gv2) gv0 (Node gv0 a1 a2)), (pow2heapp (length gv2) gv0 (Node gv0 a1 a1)), (pow2heapp (length gv2) gv0 (smash a2 a2)), (pow2heapp (length gv2) gv0 (smash a2 a1)), (pow2heapp (length gv2) gv0 (smash a1 a2)), (pow2heapp (length gv2) gv0 (smash a1 a1))
(pow2heapp (length gv2) gv0 Leaf), (pow2heapp (length gv2) (find_max' n q) a2), (pow2heapp (length gv2) (find_max' n q) a1), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 a2))
(pow2heapp (length gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (length gv2) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (length gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' n q) Leaf)
(pow2heapp (length gv2) (find_max' n gv2) a2), (pow2heapp (length gv2) (find_max' n gv2) a1), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a1))
(pow2heapp (length gv2) (find_max' n gv2) (Node gv0 a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node gv0 a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node gv0 a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node gv0 a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) Leaf), (pow2heapp (length gv2) (find_max' x q) a2)
(pow2heapp (length gv2) (find_max' x q) a1), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x q) (Node gv0 a2 a2))
(pow2heapp (length gv2) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (length gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) a2), (pow2heapp (length gv2) (find_max' x gv2) a1)
(pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node gv0 a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node gv0 a2 a1))
(pow2heapp (length gv2) (find_max' x gv2) (Node gv0 a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node gv0 a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (find_max' gv0 q) a2), (pow2heapp (length gv2) (find_max' gv0 q) a1), (pow2heapp (length gv2) (find_max' gv0 q) (Node n a2 a2))
(pow2heapp (length gv2) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (Node gv0 a1 a2))
(pow2heapp (length gv2) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (length gv2) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' gv0 q) Leaf), (pow2heapp (length gv2) (find_max' gv0 gv2) a2), (pow2heapp (length gv2) (find_max' gv0 gv2) a1), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node n a2 a1))
(pow2heapp (length gv2) (find_max' gv0 gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node gv0 a2 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node gv0 a2 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node gv0 a1 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (Node gv0 a1 a1))
(pow2heapp (length gv2) (find_max' gv0 gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' gv0 gv2) (smash a1 a1)), (pow2heapp (length gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (length gv2) (length q) a2), (pow2heapp (length gv2) (length q) a1), (pow2heapp (length gv2) (length q) (Node n a2 a2)), (pow2heapp (length gv2) (length q) (Node n a2 a1)), (pow2heapp (length gv2) (length q) (Node n a1 a2))
(pow2heapp (length gv2) (length q) (Node n a1 a1)), (pow2heapp (length gv2) (length q) (Node x a2 a2)), (pow2heapp (length gv2) (length q) (Node x a2 a1)), (pow2heapp (length gv2) (length q) (Node x a1 a2)), (pow2heapp (length gv2) (length q) (Node x a1 a1)), (pow2heapp (length gv2) (length q) (Node gv0 a2 a2)), (pow2heapp (length gv2) (length q) (Node gv0 a2 a1)), (pow2heapp (length gv2) (length q) (Node gv0 a1 a2)), (pow2heapp (length gv2) (length q) (Node gv0 a1 a1)), (pow2heapp (length gv2) (length q) (smash a2 a2))
(pow2heapp (length gv2) (length q) (smash a2 a1)), (pow2heapp (length gv2) (length q) (smash a1 a2)), (pow2heapp (length gv2) (length q) (smash a1 a1)), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) a2), (pow2heapp (length gv2) (length gv2) a1), (pow2heapp (length gv2) (length gv2) (Node n a2 a2)), (pow2heapp (length gv2) (length gv2) (Node n a2 a1)), (pow2heapp (length gv2) (length gv2) (Node n a1 a2)), (pow2heapp (length gv2) (length gv2) (Node n a1 a1))
(pow2heapp (length gv2) (length gv2) (Node x a2 a2)), (pow2heapp (length gv2) (length gv2) (Node x a2 a1)), (pow2heapp (length gv2) (length gv2) (Node x a1 a2)), (pow2heapp (length gv2) (length gv2) (Node x a1 a1)), (pow2heapp (length gv2) (length gv2) (Node gv0 a2 a2)), (pow2heapp (length gv2) (length gv2) (Node gv0 a2 a1)), (pow2heapp (length gv2) (length gv2) (Node gv0 a1 a2)), (pow2heapp (length gv2) (length gv2) (Node gv0 a1 a1)), (pow2heapp (length gv2) (length gv2) (smash a2 a2)), (pow2heapp (length gv2) (length gv2) (smash a2 a1))
(pow2heapp (length gv2) (length gv2) (smash a1 a2)), (pow2heapp (length gv2) (length gv2) (smash a1 a1)), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (a2 :: q)), (Permutation q (a2 :: gv2)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv2)), (Permutation q (merge q q)), (Permutation q (merge q gv2)), (Permutation q (merge gv2 q))
(Permutation q (merge gv2 gv2)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q gv2 a2)), (Permutation q (join q gv2 a1)), (Permutation q (join gv2 q a2)), (Permutation q (join gv2 q a1)), (Permutation q (join gv2 gv2 a2))
(Permutation q (join gv2 gv2 a1)), (Permutation q (insert n q)), (Permutation q (insert n gv2)), (Permutation q (insert x q)), (Permutation q (insert x gv2)), (Permutation q (insert gv0 q)), (Permutation q (insert gv0 gv2)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (carry gv2 a2))
(Permutation q (carry gv2 a1)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q []), (Permutation gv2 (a2 :: q)), (Permutation gv2 (a2 :: gv2)), (Permutation gv2 (a1 :: q)), (Permutation gv2 (a1 :: gv2))
(Permutation gv2 (merge q q)), (Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (heap_delete_max a2)), (Permutation gv2 (heap_delete_max a1)), (Permutation gv2 (join q q a2)), (Permutation gv2 (join q q a1)), (Permutation gv2 (join q gv2 a2)), (Permutation gv2 (join q gv2 a1))
(Permutation gv2 (join gv2 q a2)), (Permutation gv2 (join gv2 q a1)), (Permutation gv2 (join gv2 gv2 a2)), (Permutation gv2 (join gv2 gv2 a1)), (Permutation gv2 (insert n q)), (Permutation gv2 (insert n gv2)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (insert gv0 q)), (Permutation gv2 (insert gv0 gv2))
(Permutation gv2 (carry q a2)), (Permutation gv2 (carry q a1)), (Permutation gv2 (carry gv2 a2)), (Permutation gv2 (carry gv2 a1)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2)), (Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) gv2), (Permutation (a2 :: q) (a2 :: gv2)), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv2)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv2)), (Permutation (a2 :: q) (merge gv2 q)), (Permutation (a2 :: q) (merge gv2 gv2)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1))
(Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (join q gv2 a2)), (Permutation (a2 :: q) (join q gv2 a1)), (Permutation (a2 :: q) (join gv2 q a2)), (Permutation (a2 :: q) (join gv2 q a1)), (Permutation (a2 :: q) (join gv2 gv2 a2)), (Permutation (a2 :: q) (join gv2 gv2 a1)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert n gv2))
(Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv2)), (Permutation (a2 :: q) (insert gv0 q)), (Permutation (a2 :: q) (insert gv0 gv2)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry gv2 a2)), (Permutation (a2 :: q) (carry gv2 a1)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv2))
(Permutation (a2 :: q) (gv2 ++ q)), (Permutation (a2 :: q) (gv2 ++ gv2)), (Permutation (a2 :: q) []), (Permutation (a2 :: gv2) q), (Permutation (a2 :: gv2) gv2), (Permutation (a2 :: gv2) (a2 :: q)), (Permutation (a2 :: gv2) (a1 :: q)), (Permutation (a2 :: gv2) (a1 :: gv2)), (Permutation (a2 :: gv2) (merge q q)), (Permutation (a2 :: gv2) (merge q gv2))
(Permutation (a2 :: gv2) (merge gv2 q)), (Permutation (a2 :: gv2) (merge gv2 gv2)), (Permutation (a2 :: gv2) (heap_delete_max a2)), (Permutation (a2 :: gv2) (heap_delete_max a1)), (Permutation (a2 :: gv2) (join q q a2)), (Permutation (a2 :: gv2) (join q q a1)), (Permutation (a2 :: gv2) (join q gv2 a2)), (Permutation (a2 :: gv2) (join q gv2 a1)), (Permutation (a2 :: gv2) (join gv2 q a2)), (Permutation (a2 :: gv2) (join gv2 q a1))
(Permutation (a2 :: gv2) (join gv2 gv2 a2)), (Permutation (a2 :: gv2) (join gv2 gv2 a1)), (Permutation (a2 :: gv2) (insert n q)), (Permutation (a2 :: gv2) (insert n gv2)), (Permutation (a2 :: gv2) (insert x q)), (Permutation (a2 :: gv2) (insert x gv2)), (Permutation (a2 :: gv2) (insert gv0 q)), (Permutation (a2 :: gv2) (insert gv0 gv2)), (Permutation (a2 :: gv2) (carry q a2)), (Permutation (a2 :: gv2) (carry q a1))
(Permutation (a2 :: gv2) (carry gv2 a2)), (Permutation (a2 :: gv2) (carry gv2 a1)), (Permutation (a2 :: gv2) (q ++ q)), (Permutation (a2 :: gv2) (q ++ gv2)), (Permutation (a2 :: gv2) (gv2 ++ q)), (Permutation (a2 :: gv2) (gv2 ++ gv2)), (Permutation (a2 :: gv2) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv2), (Permutation (a1 :: q) (a2 :: q))
(Permutation (a1 :: q) (a2 :: gv2)), (Permutation (a1 :: q) (a1 :: gv2)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv2)), (Permutation (a1 :: q) (merge gv2 q)), (Permutation (a1 :: q) (merge gv2 gv2)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1))
(Permutation (a1 :: q) (join q gv2 a2)), (Permutation (a1 :: q) (join q gv2 a1)), (Permutation (a1 :: q) (join gv2 q a2)), (Permutation (a1 :: q) (join gv2 q a1)), (Permutation (a1 :: q) (join gv2 gv2 a2)), (Permutation (a1 :: q) (join gv2 gv2 a1)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert n gv2)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert x gv2))
(Permutation (a1 :: q) (insert gv0 q)), (Permutation (a1 :: q) (insert gv0 gv2)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry gv2 a2)), (Permutation (a1 :: q) (carry gv2 a1)), (Permutation (a1 :: q) (q ++ q)), (Permutation (a1 :: q) (q ++ gv2)), (Permutation (a1 :: q) (gv2 ++ q)), (Permutation (a1 :: q) (gv2 ++ gv2))
(Permutation (a1 :: q) []), (Permutation (a1 :: gv2) q), (Permutation (a1 :: gv2) gv2), (Permutation (a1 :: gv2) (a2 :: q)), (Permutation (a1 :: gv2) (a2 :: gv2)), (Permutation (a1 :: gv2) (a1 :: q)), (Permutation (a1 :: gv2) (merge q q)), (Permutation (a1 :: gv2) (merge q gv2)), (Permutation (a1 :: gv2) (merge gv2 q)), (Permutation (a1 :: gv2) (merge gv2 gv2))
(Permutation (a1 :: gv2) (heap_delete_max a2)), (Permutation (a1 :: gv2) (heap_delete_max a1)), (Permutation (a1 :: gv2) (join q q a2)), (Permutation (a1 :: gv2) (join q q a1)), (Permutation (a1 :: gv2) (join q gv2 a2)), (Permutation (a1 :: gv2) (join q gv2 a1)), (Permutation (a1 :: gv2) (join gv2 q a2)), (Permutation (a1 :: gv2) (join gv2 q a1)), (Permutation (a1 :: gv2) (join gv2 gv2 a2)), (Permutation (a1 :: gv2) (join gv2 gv2 a1))
(Permutation (a1 :: gv2) (insert n q)), (Permutation (a1 :: gv2) (insert n gv2)), (Permutation (a1 :: gv2) (insert x q)), (Permutation (a1 :: gv2) (insert x gv2)), (Permutation (a1 :: gv2) (insert gv0 q)), (Permutation (a1 :: gv2) (insert gv0 gv2)), (Permutation (a1 :: gv2) (carry q a2)), (Permutation (a1 :: gv2) (carry q a1)), (Permutation (a1 :: gv2) (carry gv2 a2)), (Permutation (a1 :: gv2) (carry gv2 a1))
(Permutation (a1 :: gv2) (q ++ q)), (Permutation (a1 :: gv2) (q ++ gv2)), (Permutation (a1 :: gv2) (gv2 ++ q)), (Permutation (a1 :: gv2) (gv2 ++ gv2)), (Permutation (a1 :: gv2) []), (Permutation (merge q q) q), (Permutation (merge q q) gv2), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a2 :: gv2)), (Permutation (merge q q) (a1 :: q))
(Permutation (merge q q) (a1 :: gv2)), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q gv2 a2)), (Permutation (merge q q) (join q gv2 a1))
(Permutation (merge q q) (join gv2 q a2)), (Permutation (merge q q) (join gv2 q a1)), (Permutation (merge q q) (join gv2 gv2 a2)), (Permutation (merge q q) (join gv2 gv2 a1)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv2)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2)), (Permutation (merge q q) (insert gv0 q)), (Permutation (merge q q) (insert gv0 gv2))
(Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (carry gv2 a2)), (Permutation (merge q q) (carry gv2 a1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) []), (Permutation (merge q gv2) q)
(Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (a2 :: q)), (Permutation (merge q gv2) (a2 :: gv2)), (Permutation (merge q gv2) (a1 :: q)), (Permutation (merge q gv2) (a1 :: gv2)), (Permutation (merge q gv2) (merge q q)), (Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (heap_delete_max a2)), (Permutation (merge q gv2) (heap_delete_max a1))
(Permutation (merge q gv2) (join q q a2)), (Permutation (merge q gv2) (join q q a1)), (Permutation (merge q gv2) (join q gv2 a2)), (Permutation (merge q gv2) (join q gv2 a1)), (Permutation (merge q gv2) (join gv2 q a2)), (Permutation (merge q gv2) (join gv2 q a1)), (Permutation (merge q gv2) (join gv2 gv2 a2)), (Permutation (merge q gv2) (join gv2 gv2 a1)), (Permutation (merge q gv2) (insert n q)), (Permutation (merge q gv2) (insert n gv2))
(Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (insert gv0 q)), (Permutation (merge q gv2) (insert gv0 gv2)), (Permutation (merge q gv2) (carry q a2)), (Permutation (merge q gv2) (carry q a1)), (Permutation (merge q gv2) (carry gv2 a2)), (Permutation (merge q gv2) (carry gv2 a1)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2))
(Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2)), (Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (a2 :: q)), (Permutation (merge gv2 q) (a2 :: gv2)), (Permutation (merge gv2 q) (a1 :: q)), (Permutation (merge gv2 q) (a1 :: gv2)), (Permutation (merge gv2 q) (merge q q))
(Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (heap_delete_max a2)), (Permutation (merge gv2 q) (heap_delete_max a1)), (Permutation (merge gv2 q) (join q q a2)), (Permutation (merge gv2 q) (join q q a1)), (Permutation (merge gv2 q) (join q gv2 a2)), (Permutation (merge gv2 q) (join q gv2 a1)), (Permutation (merge gv2 q) (join gv2 q a2)), (Permutation (merge gv2 q) (join gv2 q a1))
(Permutation (merge gv2 q) (join gv2 gv2 a2)), (Permutation (merge gv2 q) (join gv2 gv2 a1)), (Permutation (merge gv2 q) (insert n q)), (Permutation (merge gv2 q) (insert n gv2)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (insert gv0 q)), (Permutation (merge gv2 q) (insert gv0 gv2)), (Permutation (merge gv2 q) (carry q a2)), (Permutation (merge gv2 q) (carry q a1))
(Permutation (merge gv2 q) (carry gv2 a2)), (Permutation (merge gv2 q) (carry gv2 a1)), (Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q)), (Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a2 :: q))
(Permutation (merge gv2 gv2) (a2 :: gv2)), (Permutation (merge gv2 gv2) (a1 :: q)), (Permutation (merge gv2 gv2) (a1 :: gv2)), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q)), (Permutation (merge gv2 gv2) (heap_delete_max a2)), (Permutation (merge gv2 gv2) (heap_delete_max a1)), (Permutation (merge gv2 gv2) (join q q a2)), (Permutation (merge gv2 gv2) (join q q a1))
(Permutation (merge gv2 gv2) (join q gv2 a2)), (Permutation (merge gv2 gv2) (join q gv2 a1)), (Permutation (merge gv2 gv2) (join gv2 q a2)), (Permutation (merge gv2 gv2) (join gv2 q a1)), (Permutation (merge gv2 gv2) (join gv2 gv2 a2)), (Permutation (merge gv2 gv2) (join gv2 gv2 a1)), (Permutation (merge gv2 gv2) (insert n q)), (Permutation (merge gv2 gv2) (insert n gv2)), (Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2))
(Permutation (merge gv2 gv2) (insert gv0 q)), (Permutation (merge gv2 gv2) (insert gv0 gv2)), (Permutation (merge gv2 gv2) (carry q a2)), (Permutation (merge gv2 gv2) (carry q a1)), (Permutation (merge gv2 gv2) (carry gv2 a2)), (Permutation (merge gv2 gv2) (carry gv2 a1)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2))
(Permutation (merge gv2 gv2) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) gv2), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv2)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv2)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (merge q gv2)), (Permutation (heap_delete_max a2) (merge gv2 q))
(Permutation (heap_delete_max a2) (merge gv2 gv2)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q gv2 a2)), (Permutation (heap_delete_max a2) (join q gv2 a1)), (Permutation (heap_delete_max a2) (join gv2 q a2)), (Permutation (heap_delete_max a2) (join gv2 q a1)), (Permutation (heap_delete_max a2) (join gv2 gv2 a2)), (Permutation (heap_delete_max a2) (join gv2 gv2 a1))
(Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv2)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv2)), (Permutation (heap_delete_max a2) (insert gv0 q)), (Permutation (heap_delete_max a2) (insert gv0 gv2)), (Permutation (heap_delete_max a2) (carry q a2)), (Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry gv2 a2)), (Permutation (heap_delete_max a2) (carry gv2 a1))
(Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv2)), (Permutation (heap_delete_max a2) (gv2 ++ q)), (Permutation (heap_delete_max a2) (gv2 ++ gv2)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv2), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv2)), (Permutation (heap_delete_max a1) (a1 :: q))
(Permutation (heap_delete_max a1) (a1 :: gv2)), (Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (merge q gv2)), (Permutation (heap_delete_max a1) (merge gv2 q)), (Permutation (heap_delete_max a1) (merge gv2 gv2)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q gv2 a2)), (Permutation (heap_delete_max a1) (join q gv2 a1))
(Permutation (heap_delete_max a1) (join gv2 q a2)), (Permutation (heap_delete_max a1) (join gv2 q a1)), (Permutation (heap_delete_max a1) (join gv2 gv2 a2)), (Permutation (heap_delete_max a1) (join gv2 gv2 a1)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert n gv2)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv2)), (Permutation (heap_delete_max a1) (insert gv0 q)), (Permutation (heap_delete_max a1) (insert gv0 gv2))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry gv2 a2)), (Permutation (heap_delete_max a1) (carry gv2 a1)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv2)), (Permutation (heap_delete_max a1) (gv2 ++ q)), (Permutation (heap_delete_max a1) (gv2 ++ gv2)), (Permutation (heap_delete_max a1) []), (Permutation (join q q a2) q)
(Permutation (join q q a2) gv2), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a2 :: gv2)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (a1 :: gv2)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv2)), (Permutation (join q q a2) (merge gv2 q)), (Permutation (join q q a2) (merge gv2 gv2)), (Permutation (join q q a2) (heap_delete_max a2))
(Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q gv2 a2)), (Permutation (join q q a2) (join q gv2 a1)), (Permutation (join q q a2) (join gv2 q a2)), (Permutation (join q q a2) (join gv2 q a1)), (Permutation (join q q a2) (join gv2 gv2 a2)), (Permutation (join q q a2) (join gv2 gv2 a1)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv2))
(Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert x gv2)), (Permutation (join q q a2) (insert gv0 q)), (Permutation (join q q a2) (insert gv0 gv2)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry gv2 a2)), (Permutation (join q q a2) (carry gv2 a1)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) (q ++ gv2))
(Permutation (join q q a2) (gv2 ++ q)), (Permutation (join q q a2) (gv2 ++ gv2)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) gv2), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv2)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv2)), (Permutation (join q q a1) (merge q q))
(Permutation (join q q a1) (merge q gv2)), (Permutation (join q q a1) (merge gv2 q)), (Permutation (join q q a1) (merge gv2 gv2)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q gv2 a2)), (Permutation (join q q a1) (join q gv2 a1)), (Permutation (join q q a1) (join gv2 q a2)), (Permutation (join q q a1) (join gv2 q a1))
(Permutation (join q q a1) (join gv2 gv2 a2)), (Permutation (join q q a1) (join gv2 gv2 a1)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert n gv2)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert x gv2)), (Permutation (join q q a1) (insert gv0 q)), (Permutation (join q q a1) (insert gv0 gv2)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1))
(Permutation (join q q a1) (carry gv2 a2)), (Permutation (join q q a1) (carry gv2 a1)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) (q ++ gv2)), (Permutation (join q q a1) (gv2 ++ q)), (Permutation (join q q a1) (gv2 ++ gv2)), (Permutation (join q q a1) []), (Permutation (join q gv2 a2) q), (Permutation (join q gv2 a2) gv2), (Permutation (join q gv2 a2) (a2 :: q))
(Permutation (join q gv2 a2) (a2 :: gv2)), (Permutation (join q gv2 a2) (a1 :: q)), (Permutation (join q gv2 a2) (a1 :: gv2)), (Permutation (join q gv2 a2) (merge q q)), (Permutation (join q gv2 a2) (merge q gv2)), (Permutation (join q gv2 a2) (merge gv2 q)), (Permutation (join q gv2 a2) (merge gv2 gv2)), (Permutation (join q gv2 a2) (heap_delete_max a2)), (Permutation (join q gv2 a2) (heap_delete_max a1)), (Permutation (join q gv2 a2) (join q q a2))
(Permutation (join q gv2 a2) (join q q a1)), (Permutation (join q gv2 a2) (join q gv2 a1)), (Permutation (join q gv2 a2) (join gv2 q a2)), (Permutation (join q gv2 a2) (join gv2 q a1)), (Permutation (join q gv2 a2) (join gv2 gv2 a2)), (Permutation (join q gv2 a2) (join gv2 gv2 a1)), (Permutation (join q gv2 a2) (insert n q)), (Permutation (join q gv2 a2) (insert n gv2)), (Permutation (join q gv2 a2) (insert x q)), (Permutation (join q gv2 a2) (insert x gv2))
(Permutation (join q gv2 a2) (insert gv0 q)), (Permutation (join q gv2 a2) (insert gv0 gv2)), (Permutation (join q gv2 a2) (carry q a2)), (Permutation (join q gv2 a2) (carry q a1)), (Permutation (join q gv2 a2) (carry gv2 a2)), (Permutation (join q gv2 a2) (carry gv2 a1)), (Permutation (join q gv2 a2) (q ++ q)), (Permutation (join q gv2 a2) (q ++ gv2)), (Permutation (join q gv2 a2) (gv2 ++ q)), (Permutation (join q gv2 a2) (gv2 ++ gv2))
(Permutation (join q gv2 a2) []), (Permutation (join q gv2 a1) q), (Permutation (join q gv2 a1) gv2), (Permutation (join q gv2 a1) (a2 :: q)), (Permutation (join q gv2 a1) (a2 :: gv2)), (Permutation (join q gv2 a1) (a1 :: q)), (Permutation (join q gv2 a1) (a1 :: gv2)), (Permutation (join q gv2 a1) (merge q q)), (Permutation (join q gv2 a1) (merge q gv2)), (Permutation (join q gv2 a1) (merge gv2 q))
(Permutation (join q gv2 a1) (merge gv2 gv2)), (Permutation (join q gv2 a1) (heap_delete_max a2)), (Permutation (join q gv2 a1) (heap_delete_max a1)), (Permutation (join q gv2 a1) (join q q a2)), (Permutation (join q gv2 a1) (join q q a1)), (Permutation (join q gv2 a1) (join q gv2 a2)), (Permutation (join q gv2 a1) (join gv2 q a2)), (Permutation (join q gv2 a1) (join gv2 q a1)), (Permutation (join q gv2 a1) (join gv2 gv2 a2)), (Permutation (join q gv2 a1) (join gv2 gv2 a1))
(Permutation (join q gv2 a1) (insert n q)), (Permutation (join q gv2 a1) (insert n gv2)), (Permutation (join q gv2 a1) (insert x q)), (Permutation (join q gv2 a1) (insert x gv2)), (Permutation (join q gv2 a1) (insert gv0 q)), (Permutation (join q gv2 a1) (insert gv0 gv2)), (Permutation (join q gv2 a1) (carry q a2)), (Permutation (join q gv2 a1) (carry q a1)), (Permutation (join q gv2 a1) (carry gv2 a2)), (Permutation (join q gv2 a1) (carry gv2 a1))
(Permutation (join q gv2 a1) (q ++ q)), (Permutation (join q gv2 a1) (q ++ gv2)), (Permutation (join q gv2 a1) (gv2 ++ q)), (Permutation (join q gv2 a1) (gv2 ++ gv2)), (Permutation (join q gv2 a1) []), (Permutation (join gv2 q a2) q), (Permutation (join gv2 q a2) gv2), (Permutation (join gv2 q a2) (a2 :: q)), (Permutation (join gv2 q a2) (a2 :: gv2)), (Permutation (join gv2 q a2) (a1 :: q))
(Permutation (join gv2 q a2) (a1 :: gv2)), (Permutation (join gv2 q a2) (merge q q)), (Permutation (join gv2 q a2) (merge q gv2)), (Permutation (join gv2 q a2) (merge gv2 q)), (Permutation (join gv2 q a2) (merge gv2 gv2)), (Permutation (join gv2 q a2) (heap_delete_max a2)), (Permutation (join gv2 q a2) (heap_delete_max a1)), (Permutation (join gv2 q a2) (join q q a2)), (Permutation (join gv2 q a2) (join q q a1)), (Permutation (join gv2 q a2) (join q gv2 a2))
(Permutation (join gv2 q a2) (join q gv2 a1)), (Permutation (join gv2 q a2) (join gv2 q a1)), (Permutation (join gv2 q a2) (join gv2 gv2 a2)), (Permutation (join gv2 q a2) (join gv2 gv2 a1)), (Permutation (join gv2 q a2) (insert n q)), (Permutation (join gv2 q a2) (insert n gv2)), (Permutation (join gv2 q a2) (insert x q)), (Permutation (join gv2 q a2) (insert x gv2)), (Permutation (join gv2 q a2) (insert gv0 q)), (Permutation (join gv2 q a2) (insert gv0 gv2))
(Permutation (join gv2 q a2) (carry q a2)), (Permutation (join gv2 q a2) (carry q a1)), (Permutation (join gv2 q a2) (carry gv2 a2)), (Permutation (join gv2 q a2) (carry gv2 a1)), (Permutation (join gv2 q a2) (q ++ q)), (Permutation (join gv2 q a2) (q ++ gv2)), (Permutation (join gv2 q a2) (gv2 ++ q)), (Permutation (join gv2 q a2) (gv2 ++ gv2)), (Permutation (join gv2 q a2) []), (Permutation (join gv2 q a1) q)
(Permutation (join gv2 q a1) gv2), (Permutation (join gv2 q a1) (a2 :: q)), (Permutation (join gv2 q a1) (a2 :: gv2)), (Permutation (join gv2 q a1) (a1 :: q)), (Permutation (join gv2 q a1) (a1 :: gv2)), (Permutation (join gv2 q a1) (merge q q)), (Permutation (join gv2 q a1) (merge q gv2)), (Permutation (join gv2 q a1) (merge gv2 q)), (Permutation (join gv2 q a1) (merge gv2 gv2)), (Permutation (join gv2 q a1) (heap_delete_max a2))
(Permutation (join gv2 q a1) (heap_delete_max a1)), (Permutation (join gv2 q a1) (join q q a2)), (Permutation (join gv2 q a1) (join q q a1)), (Permutation (join gv2 q a1) (join q gv2 a2)), (Permutation (join gv2 q a1) (join q gv2 a1)), (Permutation (join gv2 q a1) (join gv2 q a2)), (Permutation (join gv2 q a1) (join gv2 gv2 a2)), (Permutation (join gv2 q a1) (join gv2 gv2 a1)), (Permutation (join gv2 q a1) (insert n q)), (Permutation (join gv2 q a1) (insert n gv2))
(Permutation (join gv2 q a1) (insert x q)), (Permutation (join gv2 q a1) (insert x gv2)), (Permutation (join gv2 q a1) (insert gv0 q)), (Permutation (join gv2 q a1) (insert gv0 gv2)), (Permutation (join gv2 q a1) (carry q a2)), (Permutation (join gv2 q a1) (carry q a1)), (Permutation (join gv2 q a1) (carry gv2 a2)), (Permutation (join gv2 q a1) (carry gv2 a1)), (Permutation (join gv2 q a1) (q ++ q)), (Permutation (join gv2 q a1) (q ++ gv2))
(Permutation (join gv2 q a1) (gv2 ++ q)), (Permutation (join gv2 q a1) (gv2 ++ gv2)), (Permutation (join gv2 q a1) []), (Permutation (join gv2 gv2 a2) q), (Permutation (join gv2 gv2 a2) gv2), (Permutation (join gv2 gv2 a2) (a2 :: q)), (Permutation (join gv2 gv2 a2) (a2 :: gv2)), (Permutation (join gv2 gv2 a2) (a1 :: q)), (Permutation (join gv2 gv2 a2) (a1 :: gv2)), (Permutation (join gv2 gv2 a2) (merge q q))
(Permutation (join gv2 gv2 a2) (merge q gv2)), (Permutation (join gv2 gv2 a2) (merge gv2 q)), (Permutation (join gv2 gv2 a2) (merge gv2 gv2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a1)), (Permutation (join gv2 gv2 a2) (join q q a2)), (Permutation (join gv2 gv2 a2) (join q q a1)), (Permutation (join gv2 gv2 a2) (join q gv2 a2)), (Permutation (join gv2 gv2 a2) (join q gv2 a1)), (Permutation (join gv2 gv2 a2) (join gv2 q a2))
(Permutation (join gv2 gv2 a2) (join gv2 q a1)), (Permutation (join gv2 gv2 a2) (join gv2 gv2 a1)), (Permutation (join gv2 gv2 a2) (insert n q)), (Permutation (join gv2 gv2 a2) (insert n gv2)), (Permutation (join gv2 gv2 a2) (insert x q)), (Permutation (join gv2 gv2 a2) (insert x gv2)), (Permutation (join gv2 gv2 a2) (insert gv0 q)), (Permutation (join gv2 gv2 a2) (insert gv0 gv2)), (Permutation (join gv2 gv2 a2) (carry q a2)), (Permutation (join gv2 gv2 a2) (carry q a1))
(Permutation (join gv2 gv2 a2) (carry gv2 a2)), (Permutation (join gv2 gv2 a2) (carry gv2 a1)), (Permutation (join gv2 gv2 a2) (q ++ q)), (Permutation (join gv2 gv2 a2) (q ++ gv2)), (Permutation (join gv2 gv2 a2) (gv2 ++ q)), (Permutation (join gv2 gv2 a2) (gv2 ++ gv2)), (Permutation (join gv2 gv2 a2) []), (Permutation (join gv2 gv2 a1) q), (Permutation (join gv2 gv2 a1) gv2), (Permutation (join gv2 gv2 a1) (a2 :: q))
(Permutation (join gv2 gv2 a1) (a2 :: gv2)), (Permutation (join gv2 gv2 a1) (a1 :: q)), (Permutation (join gv2 gv2 a1) (a1 :: gv2)), (Permutation (join gv2 gv2 a1) (merge q q)), (Permutation (join gv2 gv2 a1) (merge q gv2)), (Permutation (join gv2 gv2 a1) (merge gv2 q)), (Permutation (join gv2 gv2 a1) (merge gv2 gv2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a1)), (Permutation (join gv2 gv2 a1) (join q q a2))
(Permutation (join gv2 gv2 a1) (join q q a1)), (Permutation (join gv2 gv2 a1) (join q gv2 a2)), (Permutation (join gv2 gv2 a1) (join q gv2 a1)), (Permutation (join gv2 gv2 a1) (join gv2 q a2)), (Permutation (join gv2 gv2 a1) (join gv2 q a1)), (Permutation (join gv2 gv2 a1) (join gv2 gv2 a2)), (Permutation (join gv2 gv2 a1) (insert n q)), (Permutation (join gv2 gv2 a1) (insert n gv2)), (Permutation (join gv2 gv2 a1) (insert x q)), (Permutation (join gv2 gv2 a1) (insert x gv2))
(Permutation (join gv2 gv2 a1) (insert gv0 q)), (Permutation (join gv2 gv2 a1) (insert gv0 gv2)), (Permutation (join gv2 gv2 a1) (carry q a2)), (Permutation (join gv2 gv2 a1) (carry q a1)), (Permutation (join gv2 gv2 a1) (carry gv2 a2)), (Permutation (join gv2 gv2 a1) (carry gv2 a1)), (Permutation (join gv2 gv2 a1) (q ++ q)), (Permutation (join gv2 gv2 a1) (q ++ gv2)), (Permutation (join gv2 gv2 a1) (gv2 ++ q)), (Permutation (join gv2 gv2 a1) (gv2 ++ gv2))
(Permutation (join gv2 gv2 a1) []), (Permutation (insert n q) q), (Permutation (insert n q) gv2), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a2 :: gv2)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv2)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv2)), (Permutation (insert n q) (merge gv2 q))
(Permutation (insert n q) (merge gv2 gv2)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q gv2 a2)), (Permutation (insert n q) (join q gv2 a1)), (Permutation (insert n q) (join gv2 q a2)), (Permutation (insert n q) (join gv2 q a1)), (Permutation (insert n q) (join gv2 gv2 a2))
(Permutation (insert n q) (join gv2 gv2 a1)), (Permutation (insert n q) (insert n gv2)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (insert x gv2)), (Permutation (insert n q) (insert gv0 q)), (Permutation (insert n q) (insert gv0 gv2)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry gv2 a2)), (Permutation (insert n q) (carry gv2 a1))
(Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv2)), (Permutation (insert n q) (gv2 ++ q)), (Permutation (insert n q) (gv2 ++ gv2)), (Permutation (insert n q) []), (Permutation (insert n gv2) q), (Permutation (insert n gv2) gv2), (Permutation (insert n gv2) (a2 :: q)), (Permutation (insert n gv2) (a2 :: gv2)), (Permutation (insert n gv2) (a1 :: q))
(Permutation (insert n gv2) (a1 :: gv2)), (Permutation (insert n gv2) (merge q q)), (Permutation (insert n gv2) (merge q gv2)), (Permutation (insert n gv2) (merge gv2 q)), (Permutation (insert n gv2) (merge gv2 gv2)), (Permutation (insert n gv2) (heap_delete_max a2)), (Permutation (insert n gv2) (heap_delete_max a1)), (Permutation (insert n gv2) (join q q a2)), (Permutation (insert n gv2) (join q q a1)), (Permutation (insert n gv2) (join q gv2 a2))
(Permutation (insert n gv2) (join q gv2 a1)), (Permutation (insert n gv2) (join gv2 q a2)), (Permutation (insert n gv2) (join gv2 q a1)), (Permutation (insert n gv2) (join gv2 gv2 a2)), (Permutation (insert n gv2) (join gv2 gv2 a1)), (Permutation (insert n gv2) (insert n q)), (Permutation (insert n gv2) (insert x q)), (Permutation (insert n gv2) (insert x gv2)), (Permutation (insert n gv2) (insert gv0 q)), (Permutation (insert n gv2) (insert gv0 gv2))
(Permutation (insert n gv2) (carry q a2)), (Permutation (insert n gv2) (carry q a1)), (Permutation (insert n gv2) (carry gv2 a2)), (Permutation (insert n gv2) (carry gv2 a1)), (Permutation (insert n gv2) (q ++ q)), (Permutation (insert n gv2) (q ++ gv2)), (Permutation (insert n gv2) (gv2 ++ q)), (Permutation (insert n gv2) (gv2 ++ gv2)), (Permutation (insert n gv2) []), (Permutation (insert x q) q)
(Permutation (insert x q) gv2), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv2)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv2)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (heap_delete_max a2))
(Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q gv2 a2)), (Permutation (insert x q) (join q gv2 a1)), (Permutation (insert x q) (join gv2 q a2)), (Permutation (insert x q) (join gv2 q a1)), (Permutation (insert x q) (join gv2 gv2 a2)), (Permutation (insert x q) (join gv2 gv2 a1)), (Permutation (insert x q) (insert n q))
(Permutation (insert x q) (insert n gv2)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (insert gv0 q)), (Permutation (insert x q) (insert gv0 gv2)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry gv2 a2)), (Permutation (insert x q) (carry gv2 a1)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2))
(Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q), (Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (a2 :: q)), (Permutation (insert x gv2) (a2 :: gv2)), (Permutation (insert x gv2) (a1 :: q)), (Permutation (insert x gv2) (a1 :: gv2)), (Permutation (insert x gv2) (merge q q))
(Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (heap_delete_max a2)), (Permutation (insert x gv2) (heap_delete_max a1)), (Permutation (insert x gv2) (join q q a2)), (Permutation (insert x gv2) (join q q a1)), (Permutation (insert x gv2) (join q gv2 a2)), (Permutation (insert x gv2) (join q gv2 a1)), (Permutation (insert x gv2) (join gv2 q a2))
(Permutation (insert x gv2) (join gv2 q a1)), (Permutation (insert x gv2) (join gv2 gv2 a2)), (Permutation (insert x gv2) (join gv2 gv2 a1)), (Permutation (insert x gv2) (insert n q)), (Permutation (insert x gv2) (insert n gv2)), (Permutation (insert x gv2) (insert x q)), (Permutation (insert x gv2) (insert gv0 q)), (Permutation (insert x gv2) (insert gv0 gv2)), (Permutation (insert x gv2) (carry q a2)), (Permutation (insert x gv2) (carry q a1))
(Permutation (insert x gv2) (carry gv2 a2)), (Permutation (insert x gv2) (carry gv2 a1)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) []), (Permutation (insert gv0 q) q), (Permutation (insert gv0 q) gv2), (Permutation (insert gv0 q) (a2 :: q))
(Permutation (insert gv0 q) (a2 :: gv2)), (Permutation (insert gv0 q) (a1 :: q)), (Permutation (insert gv0 q) (a1 :: gv2)), (Permutation (insert gv0 q) (merge q q)), (Permutation (insert gv0 q) (merge q gv2)), (Permutation (insert gv0 q) (merge gv2 q)), (Permutation (insert gv0 q) (merge gv2 gv2)), (Permutation (insert gv0 q) (heap_delete_max a2)), (Permutation (insert gv0 q) (heap_delete_max a1)), (Permutation (insert gv0 q) (join q q a2))
(Permutation (insert gv0 q) (join q q a1)), (Permutation (insert gv0 q) (join q gv2 a2)), (Permutation (insert gv0 q) (join q gv2 a1)), (Permutation (insert gv0 q) (join gv2 q a2)), (Permutation (insert gv0 q) (join gv2 q a1)), (Permutation (insert gv0 q) (join gv2 gv2 a2)), (Permutation (insert gv0 q) (join gv2 gv2 a1)), (Permutation (insert gv0 q) (insert n q)), (Permutation (insert gv0 q) (insert n gv2)), (Permutation (insert gv0 q) (insert x q))
(Permutation (insert gv0 q) (insert x gv2)), (Permutation (insert gv0 q) (insert gv0 gv2)), (Permutation (insert gv0 q) (carry q a2)), (Permutation (insert gv0 q) (carry q a1)), (Permutation (insert gv0 q) (carry gv2 a2)), (Permutation (insert gv0 q) (carry gv2 a1)), (Permutation (insert gv0 q) (q ++ q)), (Permutation (insert gv0 q) (q ++ gv2)), (Permutation (insert gv0 q) (gv2 ++ q)), (Permutation (insert gv0 q) (gv2 ++ gv2))
(Permutation (insert gv0 q) []), (Permutation (insert gv0 gv2) q), (Permutation (insert gv0 gv2) gv2), (Permutation (insert gv0 gv2) (a2 :: q)), (Permutation (insert gv0 gv2) (a2 :: gv2)), (Permutation (insert gv0 gv2) (a1 :: q)), (Permutation (insert gv0 gv2) (a1 :: gv2)), (Permutation (insert gv0 gv2) (merge q q)), (Permutation (insert gv0 gv2) (merge q gv2)), (Permutation (insert gv0 gv2) (merge gv2 q))
(Permutation (insert gv0 gv2) (merge gv2 gv2)), (Permutation (insert gv0 gv2) (heap_delete_max a2)), (Permutation (insert gv0 gv2) (heap_delete_max a1)), (Permutation (insert gv0 gv2) (join q q a2)), (Permutation (insert gv0 gv2) (join q q a1)), (Permutation (insert gv0 gv2) (join q gv2 a2)), (Permutation (insert gv0 gv2) (join q gv2 a1)), (Permutation (insert gv0 gv2) (join gv2 q a2)), (Permutation (insert gv0 gv2) (join gv2 q a1)), (Permutation (insert gv0 gv2) (join gv2 gv2 a2))
(Permutation (insert gv0 gv2) (join gv2 gv2 a1)), (Permutation (insert gv0 gv2) (insert n q)), (Permutation (insert gv0 gv2) (insert n gv2)), (Permutation (insert gv0 gv2) (insert x q)), (Permutation (insert gv0 gv2) (insert x gv2)), (Permutation (insert gv0 gv2) (insert gv0 q)), (Permutation (insert gv0 gv2) (carry q a2)), (Permutation (insert gv0 gv2) (carry q a1)), (Permutation (insert gv0 gv2) (carry gv2 a2)), (Permutation (insert gv0 gv2) (carry gv2 a1))
(Permutation (insert gv0 gv2) (q ++ q)), (Permutation (insert gv0 gv2) (q ++ gv2)), (Permutation (insert gv0 gv2) (gv2 ++ q)), (Permutation (insert gv0 gv2) (gv2 ++ gv2)), (Permutation (insert gv0 gv2) []), (Permutation (carry q a2) q), (Permutation (carry q a2) gv2), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv2)), (Permutation (carry q a2) (a1 :: q))
(Permutation (carry q a2) (a1 :: gv2)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv2)), (Permutation (carry q a2) (merge gv2 q)), (Permutation (carry q a2) (merge gv2 gv2)), (Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q gv2 a2))
(Permutation (carry q a2) (join q gv2 a1)), (Permutation (carry q a2) (join gv2 q a2)), (Permutation (carry q a2) (join gv2 q a1)), (Permutation (carry q a2) (join gv2 gv2 a2)), (Permutation (carry q a2) (join gv2 gv2 a1)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv2)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv2)), (Permutation (carry q a2) (insert gv0 q))
(Permutation (carry q a2) (insert gv0 gv2)), (Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry gv2 a2)), (Permutation (carry q a2) (carry gv2 a1)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv2)), (Permutation (carry q a2) (gv2 ++ q)), (Permutation (carry q a2) (gv2 ++ gv2)), (Permutation (carry q a2) []), (Permutation (carry q a1) q)
(Permutation (carry q a1) gv2), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv2)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv2)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (merge q gv2)), (Permutation (carry q a1) (merge gv2 q)), (Permutation (carry q a1) (merge gv2 gv2)), (Permutation (carry q a1) (heap_delete_max a2))
(Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q gv2 a2)), (Permutation (carry q a1) (join q gv2 a1)), (Permutation (carry q a1) (join gv2 q a2)), (Permutation (carry q a1) (join gv2 q a1)), (Permutation (carry q a1) (join gv2 gv2 a2)), (Permutation (carry q a1) (join gv2 gv2 a1)), (Permutation (carry q a1) (insert n q))
(Permutation (carry q a1) (insert n gv2)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert x gv2)), (Permutation (carry q a1) (insert gv0 q)), (Permutation (carry q a1) (insert gv0 gv2)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry gv2 a2)), (Permutation (carry q a1) (carry gv2 a1)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv2))
(Permutation (carry q a1) (gv2 ++ q)), (Permutation (carry q a1) (gv2 ++ gv2)), (Permutation (carry q a1) []), (Permutation (carry gv2 a2) q), (Permutation (carry gv2 a2) gv2), (Permutation (carry gv2 a2) (a2 :: q)), (Permutation (carry gv2 a2) (a2 :: gv2)), (Permutation (carry gv2 a2) (a1 :: q)), (Permutation (carry gv2 a2) (a1 :: gv2)), (Permutation (carry gv2 a2) (merge q q))
(Permutation (carry gv2 a2) (merge q gv2)), (Permutation (carry gv2 a2) (merge gv2 q)), (Permutation (carry gv2 a2) (merge gv2 gv2)), (Permutation (carry gv2 a2) (heap_delete_max a2)), (Permutation (carry gv2 a2) (heap_delete_max a1)), (Permutation (carry gv2 a2) (join q q a2)), (Permutation (carry gv2 a2) (join q q a1)), (Permutation (carry gv2 a2) (join q gv2 a2)), (Permutation (carry gv2 a2) (join q gv2 a1)), (Permutation (carry gv2 a2) (join gv2 q a2))
(Permutation (carry gv2 a2) (join gv2 q a1)), (Permutation (carry gv2 a2) (join gv2 gv2 a2)), (Permutation (carry gv2 a2) (join gv2 gv2 a1)), (Permutation (carry gv2 a2) (insert n q)), (Permutation (carry gv2 a2) (insert n gv2)), (Permutation (carry gv2 a2) (insert x q)), (Permutation (carry gv2 a2) (insert x gv2)), (Permutation (carry gv2 a2) (insert gv0 q)), (Permutation (carry gv2 a2) (insert gv0 gv2)), (Permutation (carry gv2 a2) (carry q a2))
(Permutation (carry gv2 a2) (carry q a1)), (Permutation (carry gv2 a2) (carry gv2 a1)), (Permutation (carry gv2 a2) (q ++ q)), (Permutation (carry gv2 a2) (q ++ gv2)), (Permutation (carry gv2 a2) (gv2 ++ q)), (Permutation (carry gv2 a2) (gv2 ++ gv2)), (Permutation (carry gv2 a2) []), (Permutation (carry gv2 a1) q), (Permutation (carry gv2 a1) gv2), (Permutation (carry gv2 a1) (a2 :: q))
(Permutation (carry gv2 a1) (a2 :: gv2)), (Permutation (carry gv2 a1) (a1 :: q)), (Permutation (carry gv2 a1) (a1 :: gv2)), (Permutation (carry gv2 a1) (merge q q)), (Permutation (carry gv2 a1) (merge q gv2)), (Permutation (carry gv2 a1) (merge gv2 q)), (Permutation (carry gv2 a1) (merge gv2 gv2)), (Permutation (carry gv2 a1) (heap_delete_max a2)), (Permutation (carry gv2 a1) (heap_delete_max a1)), (Permutation (carry gv2 a1) (join q q a2))
(Permutation (carry gv2 a1) (join q q a1)), (Permutation (carry gv2 a1) (join q gv2 a2)), (Permutation (carry gv2 a1) (join q gv2 a1)), (Permutation (carry gv2 a1) (join gv2 q a2)), (Permutation (carry gv2 a1) (join gv2 q a1)), (Permutation (carry gv2 a1) (join gv2 gv2 a2)), (Permutation (carry gv2 a1) (join gv2 gv2 a1)), (Permutation (carry gv2 a1) (insert n q)), (Permutation (carry gv2 a1) (insert n gv2)), (Permutation (carry gv2 a1) (insert x q))
(Permutation (carry gv2 a1) (insert x gv2)), (Permutation (carry gv2 a1) (insert gv0 q)), (Permutation (carry gv2 a1) (insert gv0 gv2)), (Permutation (carry gv2 a1) (carry q a2)), (Permutation (carry gv2 a1) (carry q a1)), (Permutation (carry gv2 a1) (carry gv2 a2)), (Permutation (carry gv2 a1) (q ++ q)), (Permutation (carry gv2 a1) (q ++ gv2)), (Permutation (carry gv2 a1) (gv2 ++ q)), (Permutation (carry gv2 a1) (gv2 ++ gv2))
(Permutation (carry gv2 a1) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv2)), (Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv2)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q))
(Permutation (q ++ q) (merge gv2 gv2)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q gv2 a2)), (Permutation (q ++ q) (join q gv2 a1)), (Permutation (q ++ q) (join gv2 q a2)), (Permutation (q ++ q) (join gv2 q a1)), (Permutation (q ++ q) (join gv2 gv2 a2))
(Permutation (q ++ q) (join gv2 gv2 a1)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv2)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (insert gv0 q)), (Permutation (q ++ q) (insert gv0 gv2)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry gv2 a2))
(Permutation (q ++ q) (carry gv2 a1)), (Permutation (q ++ q) (q ++ gv2)), (Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q), (Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (a2 :: q)), (Permutation (q ++ gv2) (a2 :: gv2)), (Permutation (q ++ gv2) (a1 :: q))
(Permutation (q ++ gv2) (a1 :: gv2)), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q)), (Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (heap_delete_max a2)), (Permutation (q ++ gv2) (heap_delete_max a1)), (Permutation (q ++ gv2) (join q q a2)), (Permutation (q ++ gv2) (join q q a1)), (Permutation (q ++ gv2) (join q gv2 a2))
(Permutation (q ++ gv2) (join q gv2 a1)), (Permutation (q ++ gv2) (join gv2 q a2)), (Permutation (q ++ gv2) (join gv2 q a1)), (Permutation (q ++ gv2) (join gv2 gv2 a2)), (Permutation (q ++ gv2) (join gv2 gv2 a1)), (Permutation (q ++ gv2) (insert n q)), (Permutation (q ++ gv2) (insert n gv2)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (insert gv0 q))
(Permutation (q ++ gv2) (insert gv0 gv2)), (Permutation (q ++ gv2) (carry q a2)), (Permutation (q ++ gv2) (carry q a1)), (Permutation (q ++ gv2) (carry gv2 a2)), (Permutation (q ++ gv2) (carry gv2 a1)), (Permutation (q ++ gv2) (q ++ q)), (Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q)
(Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (a2 :: q)), (Permutation (gv2 ++ q) (a2 :: gv2)), (Permutation (gv2 ++ q) (a1 :: q)), (Permutation (gv2 ++ q) (a1 :: gv2)), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2)), (Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (heap_delete_max a2))
(Permutation (gv2 ++ q) (heap_delete_max a1)), (Permutation (gv2 ++ q) (join q q a2)), (Permutation (gv2 ++ q) (join q q a1)), (Permutation (gv2 ++ q) (join q gv2 a2)), (Permutation (gv2 ++ q) (join q gv2 a1)), (Permutation (gv2 ++ q) (join gv2 q a2)), (Permutation (gv2 ++ q) (join gv2 q a1)), (Permutation (gv2 ++ q) (join gv2 gv2 a2)), (Permutation (gv2 ++ q) (join gv2 gv2 a1)), (Permutation (gv2 ++ q) (insert n q))
(Permutation (gv2 ++ q) (insert n gv2)), (Permutation (gv2 ++ q) (insert x q)), (Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (insert gv0 q)), (Permutation (gv2 ++ q) (insert gv0 gv2)), (Permutation (gv2 ++ q) (carry q a2)), (Permutation (gv2 ++ q) (carry q a1)), (Permutation (gv2 ++ q) (carry gv2 a2)), (Permutation (gv2 ++ q) (carry gv2 a1)), (Permutation (gv2 ++ q) (q ++ q))
(Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (a2 :: q)), (Permutation (gv2 ++ gv2) (a2 :: gv2)), (Permutation (gv2 ++ gv2) (a1 :: q)), (Permutation (gv2 ++ gv2) (a1 :: gv2)), (Permutation (gv2 ++ gv2) (merge q q))
(Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (heap_delete_max a2)), (Permutation (gv2 ++ gv2) (heap_delete_max a1)), (Permutation (gv2 ++ gv2) (join q q a2)), (Permutation (gv2 ++ gv2) (join q q a1)), (Permutation (gv2 ++ gv2) (join q gv2 a2)), (Permutation (gv2 ++ gv2) (join q gv2 a1)), (Permutation (gv2 ++ gv2) (join gv2 q a2))
(Permutation (gv2 ++ gv2) (join gv2 q a1)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a2)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a1)), (Permutation (gv2 ++ gv2) (insert n q)), (Permutation (gv2 ++ gv2) (insert n gv2)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2)), (Permutation (gv2 ++ gv2) (insert gv0 q)), (Permutation (gv2 ++ gv2) (insert gv0 gv2)), (Permutation (gv2 ++ gv2) (carry q a2))
(Permutation (gv2 ++ gv2) (carry q a1)), (Permutation (gv2 ++ gv2) (carry gv2 a2)), (Permutation (gv2 ++ gv2) (carry gv2 a1)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q)), (Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2), (Permutation [] (a2 :: q))
(Permutation [] (a2 :: gv2)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv2)), (Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join q q a2))
(Permutation [] (join q q a1)), (Permutation [] (join q gv2 a2)), (Permutation [] (join q gv2 a1)), (Permutation [] (join gv2 q a2)), (Permutation [] (join gv2 q a1)), (Permutation [] (join gv2 gv2 a2)), (Permutation [] (join gv2 gv2 a1)), (Permutation [] (insert n q)), (Permutation [] (insert n gv2)), (Permutation [] (insert x q))
(Permutation [] (insert x gv2)), (Permutation [] (insert gv0 q)), (Permutation [] (insert gv0 gv2)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry gv2 a2)), (Permutation [] (carry gv2 a1)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q))
(Permutation [] (gv2 ++ gv2)), (In a2 (a2 :: q)), (In a2 (a2 :: gv2)), (In a2 (a1 :: q)), (In a2 (a1 :: gv2)), (In a2 (merge q q)), (In a2 (merge q gv2)), (In a2 (merge gv2 q)), (In a2 (merge gv2 gv2)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (join q q a2)), (In a2 (join q q a1)), (In a2 (join q gv2 a2)), (In a2 (join q gv2 a1)), (In a2 (join gv2 q a2)), (In a2 (join gv2 q a1)), (In a2 (join gv2 gv2 a2)), (In a2 (join gv2 gv2 a1)), (In a2 (insert n q))
(In a2 (insert n gv2)), (In a2 (insert x q)), (In a2 (insert x gv2)), (In a2 (insert gv0 q)), (In a2 (insert gv0 gv2)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (carry gv2 a2)), (In a2 (carry gv2 a1)), (In a2 (q ++ q))
(In a2 (q ++ gv2)), (In a2 (gv2 ++ q)), (In a2 (gv2 ++ gv2)), (In a1 (a2 :: q)), (In a1 (a2 :: gv2)), (In a1 (a1 :: q)), (In a1 (a1 :: gv2)), (In a1 (merge q q)), (In a1 (merge q gv2)), (In a1 (merge gv2 q))
(In a1 (merge gv2 gv2)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (join q gv2 a2)), (In a1 (join q gv2 a1)), (In a1 (join gv2 q a2)), (In a1 (join gv2 q a1)), (In a1 (join gv2 gv2 a2))
(In a1 (join gv2 gv2 a1)), (In a1 (insert n q)), (In a1 (insert n gv2)), (In a1 (insert x q)), (In a1 (insert x gv2)), (In a1 (insert gv0 q)), (In a1 (insert gv0 gv2)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry gv2 a2))
(In a1 (carry gv2 a1)), (In a1 (q ++ q)), (In a1 (q ++ gv2)), (In a1 (gv2 ++ q)), (In a1 (gv2 ++ gv2)), (In (Node n a2 a2) q), (In (Node n a2 a2) gv2), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a2 :: gv2)), (In (Node n a2 a2) (a1 :: q))
(In (Node n a2 a2) (a1 :: gv2)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv2)), (In (Node n a2 a2) (merge gv2 q)), (In (Node n a2 a2) (merge gv2 gv2)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q gv2 a2))
(In (Node n a2 a2) (join q gv2 a1)), (In (Node n a2 a2) (join gv2 q a2)), (In (Node n a2 a2) (join gv2 q a1)), (In (Node n a2 a2) (join gv2 gv2 a2)), (In (Node n a2 a2) (join gv2 gv2 a1)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert n gv2)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv2)), (In (Node n a2 a2) (insert gv0 q))
(In (Node n a2 a2) (insert gv0 gv2)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry gv2 a2)), (In (Node n a2 a2) (carry gv2 a1)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv2)), (In (Node n a2 a2) (gv2 ++ q)), (In (Node n a2 a2) (gv2 ++ gv2)), (In (Node n a2 a1) q)
(In (Node n a2 a1) gv2), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a2 :: gv2)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (a1 :: gv2)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv2)), (In (Node n a2 a1) (merge gv2 q)), (In (Node n a2 a1) (merge gv2 gv2)), (In (Node n a2 a1) (heap_delete_max a2))
(In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q gv2 a2)), (In (Node n a2 a1) (join q gv2 a1)), (In (Node n a2 a1) (join gv2 q a2)), (In (Node n a2 a1) (join gv2 q a1)), (In (Node n a2 a1) (join gv2 gv2 a2)), (In (Node n a2 a1) (join gv2 gv2 a1)), (In (Node n a2 a1) (insert n q))
(In (Node n a2 a1) (insert n gv2)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert x gv2)), (In (Node n a2 a1) (insert gv0 q)), (In (Node n a2 a1) (insert gv0 gv2)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry gv2 a2)), (In (Node n a2 a1) (carry gv2 a1)), (In (Node n a2 a1) (q ++ q))
(In (Node n a2 a1) (q ++ gv2)), (In (Node n a2 a1) (gv2 ++ q)), (In (Node n a2 a1) (gv2 ++ gv2)), (In (Node n a1 a2) q), (In (Node n a1 a2) gv2), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv2)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv2)), (In (Node n a1 a2) (merge q q))
(In (Node n a1 a2) (merge q gv2)), (In (Node n a1 a2) (merge gv2 q)), (In (Node n a1 a2) (merge gv2 gv2)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q gv2 a2)), (In (Node n a1 a2) (join q gv2 a1)), (In (Node n a1 a2) (join gv2 q a2))
(In (Node n a1 a2) (join gv2 q a1)), (In (Node n a1 a2) (join gv2 gv2 a2)), (In (Node n a1 a2) (join gv2 gv2 a1)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv2)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert x gv2)), (In (Node n a1 a2) (insert gv0 q)), (In (Node n a1 a2) (insert gv0 gv2)), (In (Node n a1 a2) (carry q a2))
(In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry gv2 a2)), (In (Node n a1 a2) (carry gv2 a1)), (In (Node n a1 a2) (q ++ q)), (In (Node n a1 a2) (q ++ gv2)), (In (Node n a1 a2) (gv2 ++ q)), (In (Node n a1 a2) (gv2 ++ gv2)), (In (Node n a1 a1) q), (In (Node n a1 a1) gv2), (In (Node n a1 a1) (a2 :: q))
(In (Node n a1 a1) (a2 :: gv2)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (a1 :: gv2)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (merge q gv2)), (In (Node n a1 a1) (merge gv2 q)), (In (Node n a1 a1) (merge gv2 gv2)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join q q a2))
(In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q gv2 a2)), (In (Node n a1 a1) (join q gv2 a1)), (In (Node n a1 a1) (join gv2 q a2)), (In (Node n a1 a1) (join gv2 q a1)), (In (Node n a1 a1) (join gv2 gv2 a2)), (In (Node n a1 a1) (join gv2 gv2 a1)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv2)), (In (Node n a1 a1) (insert x q))
(In (Node n a1 a1) (insert x gv2)), (In (Node n a1 a1) (insert gv0 q)), (In (Node n a1 a1) (insert gv0 gv2)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry gv2 a2)), (In (Node n a1 a1) (carry gv2 a1)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv2)), (In (Node n a1 a1) (gv2 ++ q))
(In (Node n a1 a1) (gv2 ++ gv2)), (In (Node x a2 a2) q), (In (Node x a2 a2) gv2), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv2)), (In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (a1 :: gv2)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv2)), (In (Node x a2 a2) (merge gv2 q))
(In (Node x a2 a2) (merge gv2 gv2)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q gv2 a2)), (In (Node x a2 a2) (join q gv2 a1)), (In (Node x a2 a2) (join gv2 q a2)), (In (Node x a2 a2) (join gv2 q a1)), (In (Node x a2 a2) (join gv2 gv2 a2))
(In (Node x a2 a2) (join gv2 gv2 a1)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert n gv2)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert x gv2)), (In (Node x a2 a2) (insert gv0 q)), (In (Node x a2 a2) (insert gv0 gv2)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry gv2 a2))
(In (Node x a2 a2) (carry gv2 a1)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv2)), (In (Node x a2 a2) (gv2 ++ q)), (In (Node x a2 a2) (gv2 ++ gv2)), (In (Node x a2 a1) q), (In (Node x a2 a1) gv2), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a2 :: gv2)), (In (Node x a2 a1) (a1 :: q))
(In (Node x a2 a1) (a1 :: gv2)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (merge q gv2)), (In (Node x a2 a1) (merge gv2 q)), (In (Node x a2 a1) (merge gv2 gv2)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q gv2 a2))
(In (Node x a2 a1) (join q gv2 a1)), (In (Node x a2 a1) (join gv2 q a2)), (In (Node x a2 a1) (join gv2 q a1)), (In (Node x a2 a1) (join gv2 gv2 a2)), (In (Node x a2 a1) (join gv2 gv2 a1)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv2)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert x gv2)), (In (Node x a2 a1) (insert gv0 q))
(In (Node x a2 a1) (insert gv0 gv2)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry gv2 a2)), (In (Node x a2 a1) (carry gv2 a1)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 a1) (q ++ gv2)), (In (Node x a2 a1) (gv2 ++ q)), (In (Node x a2 a1) (gv2 ++ gv2)), (In (Node x a1 a2) q)
(In (Node x a1 a2) gv2), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv2)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (a1 :: gv2)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (merge q gv2)), (In (Node x a1 a2) (merge gv2 q)), (In (Node x a1 a2) (merge gv2 gv2)), (In (Node x a1 a2) (heap_delete_max a2))
(In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q gv2 a2)), (In (Node x a1 a2) (join q gv2 a1)), (In (Node x a1 a2) (join gv2 q a2)), (In (Node x a1 a2) (join gv2 q a1)), (In (Node x a1 a2) (join gv2 gv2 a2)), (In (Node x a1 a2) (join gv2 gv2 a1)), (In (Node x a1 a2) (insert n q))
(In (Node x a1 a2) (insert n gv2)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv2)), (In (Node x a1 a2) (insert gv0 q)), (In (Node x a1 a2) (insert gv0 gv2)), (In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry gv2 a2)), (In (Node x a1 a2) (carry gv2 a1)), (In (Node x a1 a2) (q ++ q))
(In (Node x a1 a2) (q ++ gv2)), (In (Node x a1 a2) (gv2 ++ q)), (In (Node x a1 a2) (gv2 ++ gv2)), (In (Node x a1 a1) q), (In (Node x a1 a1) gv2), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a2 :: gv2)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (a1 :: gv2)), (In (Node x a1 a1) (merge q q))
(In (Node x a1 a1) (merge q gv2)), (In (Node x a1 a1) (merge gv2 q)), (In (Node x a1 a1) (merge gv2 gv2)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q gv2 a2)), (In (Node x a1 a1) (join q gv2 a1)), (In (Node x a1 a1) (join gv2 q a2))
(In (Node x a1 a1) (join gv2 q a1)), (In (Node x a1 a1) (join gv2 gv2 a2)), (In (Node x a1 a1) (join gv2 gv2 a1)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (insert n gv2)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv2)), (In (Node x a1 a1) (insert gv0 q)), (In (Node x a1 a1) (insert gv0 gv2)), (In (Node x a1 a1) (carry q a2))
(In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry gv2 a2)), (In (Node x a1 a1) (carry gv2 a1)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv2)), (In (Node x a1 a1) (gv2 ++ q)), (In (Node x a1 a1) (gv2 ++ gv2)), (In (Node gv0 a2 a2) q), (In (Node gv0 a2 a2) gv2), (In (Node gv0 a2 a2) (a2 :: q))
(In (Node gv0 a2 a2) (a2 :: gv2)), (In (Node gv0 a2 a2) (a1 :: q)), (In (Node gv0 a2 a2) (a1 :: gv2)), (In (Node gv0 a2 a2) (merge q q)), (In (Node gv0 a2 a2) (merge q gv2)), (In (Node gv0 a2 a2) (merge gv2 q)), (In (Node gv0 a2 a2) (merge gv2 gv2)), (In (Node gv0 a2 a2) (heap_delete_max a2)), (In (Node gv0 a2 a2) (heap_delete_max a1)), (In (Node gv0 a2 a2) (join q q a2))
(In (Node gv0 a2 a2) (join q q a1)), (In (Node gv0 a2 a2) (join q gv2 a2)), (In (Node gv0 a2 a2) (join q gv2 a1)), (In (Node gv0 a2 a2) (join gv2 q a2)), (In (Node gv0 a2 a2) (join gv2 q a1)), (In (Node gv0 a2 a2) (join gv2 gv2 a2)), (In (Node gv0 a2 a2) (join gv2 gv2 a1)), (In (Node gv0 a2 a2) (insert n q)), (In (Node gv0 a2 a2) (insert n gv2)), (In (Node gv0 a2 a2) (insert x q))
(In (Node gv0 a2 a2) (insert x gv2)), (In (Node gv0 a2 a2) (insert gv0 q)), (In (Node gv0 a2 a2) (insert gv0 gv2)), (In (Node gv0 a2 a2) (carry q a2)), (In (Node gv0 a2 a2) (carry q a1)), (In (Node gv0 a2 a2) (carry gv2 a2)), (In (Node gv0 a2 a2) (carry gv2 a1)), (In (Node gv0 a2 a2) (q ++ q)), (In (Node gv0 a2 a2) (q ++ gv2)), (In (Node gv0 a2 a2) (gv2 ++ q))
(In (Node gv0 a2 a2) (gv2 ++ gv2)), (In (Node gv0 a2 a1) q), (In (Node gv0 a2 a1) gv2), (In (Node gv0 a2 a1) (a2 :: q)), (In (Node gv0 a2 a1) (a2 :: gv2)), (In (Node gv0 a2 a1) (a1 :: q)), (In (Node gv0 a2 a1) (a1 :: gv2)), (In (Node gv0 a2 a1) (merge q q)), (In (Node gv0 a2 a1) (merge q gv2)), (In (Node gv0 a2 a1) (merge gv2 q))
(In (Node gv0 a2 a1) (merge gv2 gv2)), (In (Node gv0 a2 a1) (heap_delete_max a2)), (In (Node gv0 a2 a1) (heap_delete_max a1)), (In (Node gv0 a2 a1) (join q q a2)), (In (Node gv0 a2 a1) (join q q a1)), (In (Node gv0 a2 a1) (join q gv2 a2)), (In (Node gv0 a2 a1) (join q gv2 a1)), (In (Node gv0 a2 a1) (join gv2 q a2)), (In (Node gv0 a2 a1) (join gv2 q a1)), (In (Node gv0 a2 a1) (join gv2 gv2 a2))
(In (Node gv0 a2 a1) (join gv2 gv2 a1)), (In (Node gv0 a2 a1) (insert n q)), (In (Node gv0 a2 a1) (insert n gv2)), (In (Node gv0 a2 a1) (insert x q)), (In (Node gv0 a2 a1) (insert x gv2)), (In (Node gv0 a2 a1) (insert gv0 q)), (In (Node gv0 a2 a1) (insert gv0 gv2)), (In (Node gv0 a2 a1) (carry q a2)), (In (Node gv0 a2 a1) (carry q a1)), (In (Node gv0 a2 a1) (carry gv2 a2))
(In (Node gv0 a2 a1) (carry gv2 a1)), (In (Node gv0 a2 a1) (q ++ q)), (In (Node gv0 a2 a1) (q ++ gv2)), (In (Node gv0 a2 a1) (gv2 ++ q)), (In (Node gv0 a2 a1) (gv2 ++ gv2)), (In (Node gv0 a1 a2) q), (In (Node gv0 a1 a2) gv2), (In (Node gv0 a1 a2) (a2 :: q)), (In (Node gv0 a1 a2) (a2 :: gv2)), (In (Node gv0 a1 a2) (a1 :: q))
(In (Node gv0 a1 a2) (a1 :: gv2)), (In (Node gv0 a1 a2) (merge q q)), (In (Node gv0 a1 a2) (merge q gv2)), (In (Node gv0 a1 a2) (merge gv2 q)), (In (Node gv0 a1 a2) (merge gv2 gv2)), (In (Node gv0 a1 a2) (heap_delete_max a2)), (In (Node gv0 a1 a2) (heap_delete_max a1)), (In (Node gv0 a1 a2) (join q q a2)), (In (Node gv0 a1 a2) (join q q a1)), (In (Node gv0 a1 a2) (join q gv2 a2))
(In (Node gv0 a1 a2) (join q gv2 a1)), (In (Node gv0 a1 a2) (join gv2 q a2)), (In (Node gv0 a1 a2) (join gv2 q a1)), (In (Node gv0 a1 a2) (join gv2 gv2 a2)), (In (Node gv0 a1 a2) (join gv2 gv2 a1)), (In (Node gv0 a1 a2) (insert n q)), (In (Node gv0 a1 a2) (insert n gv2)), (In (Node gv0 a1 a2) (insert x q)), (In (Node gv0 a1 a2) (insert x gv2)), (In (Node gv0 a1 a2) (insert gv0 q))
(In (Node gv0 a1 a2) (insert gv0 gv2)), (In (Node gv0 a1 a2) (carry q a2)), (In (Node gv0 a1 a2) (carry q a1)), (In (Node gv0 a1 a2) (carry gv2 a2)), (In (Node gv0 a1 a2) (carry gv2 a1)), (In (Node gv0 a1 a2) (q ++ q)), (In (Node gv0 a1 a2) (q ++ gv2)), (In (Node gv0 a1 a2) (gv2 ++ q)), (In (Node gv0 a1 a2) (gv2 ++ gv2)), (In (Node gv0 a1 a1) q)
(In (Node gv0 a1 a1) gv2), (In (Node gv0 a1 a1) (a2 :: q)), (In (Node gv0 a1 a1) (a2 :: gv2)), (In (Node gv0 a1 a1) (a1 :: q)), (In (Node gv0 a1 a1) (a1 :: gv2)), (In (Node gv0 a1 a1) (merge q q)), (In (Node gv0 a1 a1) (merge q gv2)), (In (Node gv0 a1 a1) (merge gv2 q)), (In (Node gv0 a1 a1) (merge gv2 gv2)), (In (Node gv0 a1 a1) (heap_delete_max a2))
(In (Node gv0 a1 a1) (heap_delete_max a1)), (In (Node gv0 a1 a1) (join q q a2)), (In (Node gv0 a1 a1) (join q q a1)), (In (Node gv0 a1 a1) (join q gv2 a2)), (In (Node gv0 a1 a1) (join q gv2 a1)), (In (Node gv0 a1 a1) (join gv2 q a2)), (In (Node gv0 a1 a1) (join gv2 q a1)), (In (Node gv0 a1 a1) (join gv2 gv2 a2)), (In (Node gv0 a1 a1) (join gv2 gv2 a1)), (In (Node gv0 a1 a1) (insert n q))
(In (Node gv0 a1 a1) (insert n gv2)), (In (Node gv0 a1 a1) (insert x q)), (In (Node gv0 a1 a1) (insert x gv2)), (In (Node gv0 a1 a1) (insert gv0 q)), (In (Node gv0 a1 a1) (insert gv0 gv2)), (In (Node gv0 a1 a1) (carry q a2)), (In (Node gv0 a1 a1) (carry q a1)), (In (Node gv0 a1 a1) (carry gv2 a2)), (In (Node gv0 a1 a1) (carry gv2 a1)), (In (Node gv0 a1 a1) (q ++ q))
(In (Node gv0 a1 a1) (q ++ gv2)), (In (Node gv0 a1 a1) (gv2 ++ q)), (In (Node gv0 a1 a1) (gv2 ++ gv2)), (In (smash a2 a2) q), (In (smash a2 a2) gv2), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv2)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (a1 :: gv2)), (In (smash a2 a2) (merge q q))
(In (smash a2 a2) (merge q gv2)), (In (smash a2 a2) (merge gv2 q)), (In (smash a2 a2) (merge gv2 gv2)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q gv2 a2)), (In (smash a2 a2) (join q gv2 a1)), (In (smash a2 a2) (join gv2 q a2))
(In (smash a2 a2) (join gv2 q a1)), (In (smash a2 a2) (join gv2 gv2 a2)), (In (smash a2 a2) (join gv2 gv2 a1)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv2)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv2)), (In (smash a2 a2) (insert gv0 q)), (In (smash a2 a2) (insert gv0 gv2)), (In (smash a2 a2) (carry q a2))
(In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry gv2 a2)), (In (smash a2 a2) (carry gv2 a1)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv2)), (In (smash a2 a2) (gv2 ++ q)), (In (smash a2 a2) (gv2 ++ gv2)), (In (smash a2 a1) q), (In (smash a2 a1) gv2), (In (smash a2 a1) (a2 :: q))
(In (smash a2 a1) (a2 :: gv2)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (a1 :: gv2)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv2)), (In (smash a2 a1) (merge gv2 q)), (In (smash a2 a1) (merge gv2 gv2)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join q q a2))
(In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q gv2 a2)), (In (smash a2 a1) (join q gv2 a1)), (In (smash a2 a1) (join gv2 q a2)), (In (smash a2 a1) (join gv2 q a1)), (In (smash a2 a1) (join gv2 gv2 a2)), (In (smash a2 a1) (join gv2 gv2 a1)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (insert n gv2)), (In (smash a2 a1) (insert x q))
(In (smash a2 a1) (insert x gv2)), (In (smash a2 a1) (insert gv0 q)), (In (smash a2 a1) (insert gv0 gv2)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry gv2 a2)), (In (smash a2 a1) (carry gv2 a1)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv2)), (In (smash a2 a1) (gv2 ++ q))
(In (smash a2 a1) (gv2 ++ gv2)), (In (smash a1 a2) q), (In (smash a1 a2) gv2), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a2 :: gv2)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv2)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (merge q gv2)), (In (smash a1 a2) (merge gv2 q))
(In (smash a1 a2) (merge gv2 gv2)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q gv2 a2)), (In (smash a1 a2) (join q gv2 a1)), (In (smash a1 a2) (join gv2 q a2)), (In (smash a1 a2) (join gv2 q a1)), (In (smash a1 a2) (join gv2 gv2 a2))
(In (smash a1 a2) (join gv2 gv2 a1)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv2)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert x gv2)), (In (smash a1 a2) (insert gv0 q)), (In (smash a1 a2) (insert gv0 gv2)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry gv2 a2))
(In (smash a1 a2) (carry gv2 a1)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv2)), (In (smash a1 a2) (gv2 ++ q)), (In (smash a1 a2) (gv2 ++ gv2)), (In (smash a1 a1) q), (In (smash a1 a1) gv2), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv2)), (In (smash a1 a1) (a1 :: q))
(In (smash a1 a1) (a1 :: gv2)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv2)), (In (smash a1 a1) (merge gv2 q)), (In (smash a1 a1) (merge gv2 gv2)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q gv2 a2))
(In (smash a1 a1) (join q gv2 a1)), (In (smash a1 a1) (join gv2 q a2)), (In (smash a1 a1) (join gv2 q a1)), (In (smash a1 a1) (join gv2 gv2 a2)), (In (smash a1 a1) (join gv2 gv2 a1)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv2)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert x gv2)), (In (smash a1 a1) (insert gv0 q))
(In (smash a1 a1) (insert gv0 gv2)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry gv2 a2)), (In (smash a1 a1) (carry gv2 a1)), (In (smash a1 a1) (q ++ q)), (In (smash a1 a1) (q ++ gv2)), (In (smash a1 a1) (gv2 ++ q)), (In (smash a1 a1) (gv2 ++ gv2)), (In Leaf q)
(In Leaf gv2), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv2)), (In Leaf (a1 :: q)), (In Leaf (a1 :: gv2)), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q)), (In Leaf (merge gv2 gv2)), (In Leaf (heap_delete_max a2))
(In Leaf (heap_delete_max a1)), (In Leaf (join q q a2)), (In Leaf (join q q a1)), (In Leaf (join q gv2 a2)), (In Leaf (join q gv2 a1)), (In Leaf (join gv2 q a2)), (In Leaf (join gv2 q a1)), (In Leaf (join gv2 gv2 a2)), (In Leaf (join gv2 gv2 a1)), (In Leaf (insert n q))
(In Leaf (insert n gv2)), (In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (insert gv0 q)), (In Leaf (insert gv0 gv2)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry gv2 a2)), (In Leaf (carry gv2 a1)), (In Leaf (q ++ q))
(In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (n < find_max' n q), (n < find_max' n gv2), (n < find_max' x q), (n < find_max' x gv2), (n < find_max' gv0 q), (n < find_max' gv0 gv2), (n < length q)
(n < length gv2), (x < find_max' n q), (x < find_max' n gv2), (x < find_max' x q), (x < find_max' x gv2), (x < find_max' gv0 q), (x < find_max' gv0 gv2), (x < length q), (x < length gv2), (gv0 < find_max' n q)
(gv0 < find_max' n gv2), (gv0 < find_max' x q), (gv0 < find_max' x gv2), (gv0 < find_max' gv0 q), (gv0 < find_max' gv0 gv2), (gv0 < length q), (gv0 < length gv2), (find_max' n q < n), (find_max' n q < x), (find_max' n q < gv0)
(find_max' n q < find_max' n gv2), (find_max' n q < find_max' x q), (find_max' n q < find_max' x gv2), (find_max' n q < find_max' gv0 q), (find_max' n q < find_max' gv0 gv2), (find_max' n q < length q), (find_max' n q < length gv2), (find_max' n gv2 < n), (find_max' n gv2 < x), (find_max' n gv2 < gv0)
(find_max' n gv2 < find_max' n q), (find_max' n gv2 < find_max' x q), (find_max' n gv2 < find_max' x gv2), (find_max' n gv2 < find_max' gv0 q), (find_max' n gv2 < find_max' gv0 gv2), (find_max' n gv2 < length q), (find_max' n gv2 < length gv2), (find_max' x q < n), (find_max' x q < x), (find_max' x q < gv0)
(find_max' x q < find_max' n q), (find_max' x q < find_max' n gv2), (find_max' x q < find_max' x gv2), (find_max' x q < find_max' gv0 q), (find_max' x q < find_max' gv0 gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < n), (find_max' x gv2 < x), (find_max' x gv2 < gv0)
(find_max' x gv2 < find_max' n q), (find_max' x gv2 < find_max' n gv2), (find_max' x gv2 < find_max' x q), (find_max' x gv2 < find_max' gv0 q), (find_max' x gv2 < find_max' gv0 gv2), (find_max' x gv2 < length q), (find_max' x gv2 < length gv2), (find_max' gv0 q < n), (find_max' gv0 q < x), (find_max' gv0 q < gv0)
(find_max' gv0 q < find_max' n q), (find_max' gv0 q < find_max' n gv2), (find_max' gv0 q < find_max' x q), (find_max' gv0 q < find_max' x gv2), (find_max' gv0 q < find_max' gv0 gv2), (find_max' gv0 q < length q), (find_max' gv0 q < length gv2), (find_max' gv0 gv2 < n), (find_max' gv0 gv2 < x), (find_max' gv0 gv2 < gv0)
(find_max' gv0 gv2 < find_max' n q), (find_max' gv0 gv2 < find_max' n gv2), (find_max' gv0 gv2 < find_max' x q), (find_max' gv0 gv2 < find_max' x gv2), (find_max' gv0 gv2 < find_max' gv0 q), (find_max' gv0 gv2 < length q), (find_max' gv0 gv2 < length gv2), (length q < n), (length q < x), (length q < gv0)
(length q < find_max' n q), (length q < find_max' n gv2), (length q < find_max' x q), (length q < find_max' x gv2), (length q < find_max' gv0 q), (length q < find_max' gv0 gv2), (length q < length gv2), (length gv2 < n), (length gv2 < x), (length gv2 < gv0)
(length gv2 < find_max' n q), (length gv2 < find_max' n gv2), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2), (length gv2 < find_max' gv0 q), (length gv2 < find_max' gv0 gv2), (length gv2 < length q), (n <= find_max' n q), (n <= find_max' n gv2), (n <= find_max' x q)
(n <= find_max' x gv2), (n <= find_max' gv0 q), (n <= find_max' gv0 gv2), (n <= length q), (n <= length gv2), (x <= find_max' n q), (x <= find_max' n gv2), (x <= find_max' x q), (x <= find_max' x gv2), (x <= find_max' gv0 q)
(x <= find_max' gv0 gv2), (x <= length q), (x <= length gv2), (gv0 <= find_max' n q), (gv0 <= find_max' n gv2), (gv0 <= find_max' x q), (gv0 <= find_max' x gv2), (gv0 <= find_max' gv0 q), (gv0 <= find_max' gv0 gv2), (gv0 <= length q)
(gv0 <= length gv2), (find_max' n q <= n), (find_max' n q <= x), (find_max' n q <= gv0), (find_max' n q <= find_max' n gv2), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv2), (find_max' n q <= find_max' gv0 q), (find_max' n q <= find_max' gv0 gv2), (find_max' n q <= length q)
(find_max' n q <= length gv2), (find_max' n gv2 <= n), (find_max' n gv2 <= x), (find_max' n gv2 <= gv0), (find_max' n gv2 <= find_max' n q), (find_max' n gv2 <= find_max' x q), (find_max' n gv2 <= find_max' x gv2), (find_max' n gv2 <= find_max' gv0 q), (find_max' n gv2 <= find_max' gv0 gv2), (find_max' n gv2 <= length q)
(find_max' n gv2 <= length gv2), (find_max' x q <= n), (find_max' x q <= x), (find_max' x q <= gv0), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv2), (find_max' x q <= find_max' x gv2), (find_max' x q <= find_max' gv0 q), (find_max' x q <= find_max' gv0 gv2), (find_max' x q <= length q)
(find_max' x q <= length gv2), (find_max' x gv2 <= n), (find_max' x gv2 <= x), (find_max' x gv2 <= gv0), (find_max' x gv2 <= find_max' n q), (find_max' x gv2 <= find_max' n gv2), (find_max' x gv2 <= find_max' x q), (find_max' x gv2 <= find_max' gv0 q), (find_max' x gv2 <= find_max' gv0 gv2), (find_max' x gv2 <= length q)
(find_max' x gv2 <= length gv2), (find_max' gv0 q <= n), (find_max' gv0 q <= x), (find_max' gv0 q <= gv0), (find_max' gv0 q <= find_max' n q), (find_max' gv0 q <= find_max' n gv2), (find_max' gv0 q <= find_max' x q), (find_max' gv0 q <= find_max' x gv2), (find_max' gv0 q <= find_max' gv0 gv2), (find_max' gv0 q <= length q)
(find_max' gv0 q <= length gv2), (find_max' gv0 gv2 <= n), (find_max' gv0 gv2 <= x), (find_max' gv0 gv2 <= gv0), (find_max' gv0 gv2 <= find_max' n q), (find_max' gv0 gv2 <= find_max' n gv2), (find_max' gv0 gv2 <= find_max' x q), (find_max' gv0 gv2 <= find_max' x gv2), (find_max' gv0 gv2 <= find_max' gv0 q), (find_max' gv0 gv2 <= length q)
(find_max' gv0 gv2 <= length gv2), (length q <= n), (length q <= x), (length q <= gv0), (length q <= find_max' n q), (length q <= find_max' n gv2), (length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= find_max' gv0 q), (length q <= find_max' gv0 gv2)
(length q <= length gv2), (length gv2 <= n), (length gv2 <= x), (length gv2 <= gv0), (length gv2 <= find_max' n q), (length gv2 <= find_max' n gv2), (length gv2 <= find_max' x q), (length gv2 <= find_max' x gv2), (length gv2 <= find_max' gv0 q), (length gv2 <= find_max' gv0 gv2)
(length gv2 <= length q), (~ priq q), (~ priq gv2), (~ priqq n q), (~ priqq n gv2), (~ priqq x q), (~ priqq x gv2), (~ priqq gv0 q), (~ priqq gv0 gv2), (~ pow2heap n a2)
(~ pow2heap n a1), (~ pow2heap x a2), (~ pow2heap x a1), (~ pow2heap gv0 a2), (~ pow2heap gv0 a1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n gv0 a2)
(~ pow2heapp n gv0 a1), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x gv0 a2), (~ pow2heapp x gv0 a1), (~ pow2heapp gv0 n a2), (~ pow2heapp gv0 n a1), (~ pow2heapp gv0 x a2)
(~ pow2heapp gv0 x a1), (~ pow2heapp gv0 gv0 a2), (~ pow2heapp gv0 gv0 a1), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2), (~ In a2 q), (~ In a2 gv2), (~ In a1 q)
(~ In a1 gv2), (~ n < n), (~ n < x), (~ n < gv0), (~ x < n), (~ x < x), (~ x < gv0), (~ gv0 < n), (~ gv0 < x), (~ gv0 < gv0)
(~ n <= n), (~ n <= x), (~ n <= gv0), (~ x <= n), (~ x <= x), (~ x <= gv0), (~ gv0 <= n), (~ gv0 <= x), (~ gv0 <= gv0), (a2 <> a2)
(a2 <> a1), (a1 <> a2), (a1 <> a1), (q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2), (n <> n), (n <> x), (n <> gv0)
(x <> n), (x <> x), (x <> gv0), (gv0 <> n), (gv0 <> x), (gv0 <> gv0), (None = Some q), (None = Some gv2), (a2 :: q = q), (a2 :: q = gv2)
(a2 :: q = merge q q), (a2 :: q = merge q gv2), (a2 :: q = merge gv2 q), (a2 :: q = merge gv2 gv2), (a2 :: q = heap_delete_max a2), (a2 :: q = heap_delete_max a1), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q gv2 a2), (a2 :: q = join q gv2 a1)
(a2 :: q = join gv2 q a2), (a2 :: q = join gv2 q a1), (a2 :: q = join gv2 gv2 a2), (a2 :: q = join gv2 gv2 a1), (a2 :: q = insert n q), (a2 :: q = insert n gv2), (a2 :: q = insert x q), (a2 :: q = insert x gv2), (a2 :: q = insert gv0 q), (a2 :: q = insert gv0 gv2)
(a2 :: q = carry q a2), (a2 :: q = carry q a1), (a2 :: q = carry gv2 a2), (a2 :: q = carry gv2 a1), (a2 :: q = q ++ q), (a2 :: q = q ++ gv2), (a2 :: q = gv2 ++ q), (a2 :: q = gv2 ++ gv2), (a2 :: q = []), (a2 :: gv2 = q)
(a2 :: gv2 = gv2), (a2 :: gv2 = merge q q), (a2 :: gv2 = merge q gv2), (a2 :: gv2 = merge gv2 q), (a2 :: gv2 = merge gv2 gv2), (a2 :: gv2 = heap_delete_max a2), (a2 :: gv2 = heap_delete_max a1), (a2 :: gv2 = join q q a2), (a2 :: gv2 = join q q a1), (a2 :: gv2 = join q gv2 a2)
(a2 :: gv2 = join q gv2 a1), (a2 :: gv2 = join gv2 q a2), (a2 :: gv2 = join gv2 q a1), (a2 :: gv2 = join gv2 gv2 a2), (a2 :: gv2 = join gv2 gv2 a1), (a2 :: gv2 = insert n q), (a2 :: gv2 = insert n gv2), (a2 :: gv2 = insert x q), (a2 :: gv2 = insert x gv2), (a2 :: gv2 = insert gv0 q)
(a2 :: gv2 = insert gv0 gv2), (a2 :: gv2 = carry q a2), (a2 :: gv2 = carry q a1), (a2 :: gv2 = carry gv2 a2), (a2 :: gv2 = carry gv2 a1), (a2 :: gv2 = q ++ q), (a2 :: gv2 = q ++ gv2), (a2 :: gv2 = gv2 ++ q), (a2 :: gv2 = gv2 ++ gv2), (a2 :: gv2 = [])
(a1 :: q = q), (a1 :: q = gv2), (a1 :: q = merge q q), (a1 :: q = merge q gv2), (a1 :: q = merge gv2 q), (a1 :: q = merge gv2 gv2), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = join q q a2), (a1 :: q = join q q a1)
(a1 :: q = join q gv2 a2), (a1 :: q = join q gv2 a1), (a1 :: q = join gv2 q a2), (a1 :: q = join gv2 q a1), (a1 :: q = join gv2 gv2 a2), (a1 :: q = join gv2 gv2 a1), (a1 :: q = insert n q), (a1 :: q = insert n gv2), (a1 :: q = insert x q), (a1 :: q = insert x gv2)
(a1 :: q = insert gv0 q), (a1 :: q = insert gv0 gv2), (a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry gv2 a2), (a1 :: q = carry gv2 a1), (a1 :: q = q ++ q), (a1 :: q = q ++ gv2), (a1 :: q = gv2 ++ q), (a1 :: q = gv2 ++ gv2)
(a1 :: q = []), (a1 :: gv2 = q), (a1 :: gv2 = gv2), (a1 :: gv2 = merge q q), (a1 :: gv2 = merge q gv2), (a1 :: gv2 = merge gv2 q), (a1 :: gv2 = merge gv2 gv2), (a1 :: gv2 = heap_delete_max a2), (a1 :: gv2 = heap_delete_max a1), (a1 :: gv2 = join q q a2)
(a1 :: gv2 = join q q a1), (a1 :: gv2 = join q gv2 a2), (a1 :: gv2 = join q gv2 a1), (a1 :: gv2 = join gv2 q a2), (a1 :: gv2 = join gv2 q a1), (a1 :: gv2 = join gv2 gv2 a2), (a1 :: gv2 = join gv2 gv2 a1), (a1 :: gv2 = insert n q), (a1 :: gv2 = insert n gv2), (a1 :: gv2 = insert x q)
(a1 :: gv2 = insert x gv2), (a1 :: gv2 = insert gv0 q), (a1 :: gv2 = insert gv0 gv2), (a1 :: gv2 = carry q a2), (a1 :: gv2 = carry q a1), (a1 :: gv2 = carry gv2 a2), (a1 :: gv2 = carry gv2 a1), (a1 :: gv2 = q ++ q), (a1 :: gv2 = q ++ gv2), (a1 :: gv2 = gv2 ++ q)
(a1 :: gv2 = gv2 ++ gv2), (a1 :: gv2 = []), (merge q q = q), (merge q q = gv2), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q gv2 a2), (merge q q = join q gv2 a1)
(merge q q = join gv2 q a2), (merge q q = join gv2 q a1), (merge q q = join gv2 gv2 a2), (merge q q = join gv2 gv2 a1), (merge q q = insert n q), (merge q q = insert n gv2), (merge q q = insert x q), (merge q q = insert x gv2), (merge q q = insert gv0 q), (merge q q = insert gv0 gv2)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry gv2 a2), (merge q q = carry gv2 a1), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2), (merge q gv2 = q), (merge q gv2 = gv2)
(merge q gv2 = heap_delete_max a2), (merge q gv2 = heap_delete_max a1), (merge q gv2 = join q q a2), (merge q gv2 = join q q a1), (merge q gv2 = join q gv2 a2), (merge q gv2 = join q gv2 a1), (merge q gv2 = join gv2 q a2), (merge q gv2 = join gv2 q a1), (merge q gv2 = join gv2 gv2 a2), (merge q gv2 = join gv2 gv2 a1)
(merge q gv2 = insert n q), (merge q gv2 = insert n gv2), (merge q gv2 = insert x q), (merge q gv2 = insert x gv2), (merge q gv2 = insert gv0 q), (merge q gv2 = insert gv0 gv2), (merge q gv2 = carry q a2), (merge q gv2 = carry q a1), (merge q gv2 = carry gv2 a2), (merge q gv2 = carry gv2 a1)
(merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q), (merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = heap_delete_max a2), (merge gv2 q = heap_delete_max a1), (merge gv2 q = join q q a2), (merge gv2 q = join q q a1)
(merge gv2 q = join q gv2 a2), (merge gv2 q = join q gv2 a1), (merge gv2 q = join gv2 q a2), (merge gv2 q = join gv2 q a1), (merge gv2 q = join gv2 gv2 a2), (merge gv2 q = join gv2 gv2 a1), (merge gv2 q = insert n q), (merge gv2 q = insert n gv2), (merge gv2 q = insert x q), (merge gv2 q = insert x gv2)
(merge gv2 q = insert gv0 q), (merge gv2 q = insert gv0 gv2), (merge gv2 q = carry q a2), (merge gv2 q = carry q a1), (merge gv2 q = carry gv2 a2), (merge gv2 q = carry gv2 a1), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2), (merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2)
(merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = heap_delete_max a2), (merge gv2 gv2 = heap_delete_max a1), (merge gv2 gv2 = join q q a2), (merge gv2 gv2 = join q q a1), (merge gv2 gv2 = join q gv2 a2), (merge gv2 gv2 = join q gv2 a1), (merge gv2 gv2 = join gv2 q a2), (merge gv2 gv2 = join gv2 q a1)
(merge gv2 gv2 = join gv2 gv2 a2), (merge gv2 gv2 = join gv2 gv2 a1), (merge gv2 gv2 = insert n q), (merge gv2 gv2 = insert n gv2), (merge gv2 gv2 = insert x q), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = insert gv0 q), (merge gv2 gv2 = insert gv0 gv2), (merge gv2 gv2 = carry q a2), (merge gv2 gv2 = carry q a1)
(merge gv2 gv2 = carry gv2 a2), (merge gv2 gv2 = carry gv2 a1), (merge gv2 gv2 = q ++ q), (merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q), (merge gv2 gv2 = gv2 ++ gv2), (heap_delete_max a2 = q), (heap_delete_max a2 = gv2), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1)
(heap_delete_max a2 = carry gv2 a2), (heap_delete_max a2 = carry gv2 a1), (heap_delete_max a2 = q ++ q), (heap_delete_max a2 = q ++ gv2), (heap_delete_max a2 = gv2 ++ q), (heap_delete_max a2 = gv2 ++ gv2), (heap_delete_max a1 = q), (heap_delete_max a1 = gv2), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1)
(heap_delete_max a1 = carry gv2 a2), (heap_delete_max a1 = carry gv2 a1), (heap_delete_max a1 = q ++ q), (heap_delete_max a1 = q ++ gv2), (heap_delete_max a1 = gv2 ++ q), (heap_delete_max a1 = gv2 ++ gv2), (join q q a2 = q), (join q q a2 = gv2), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1)
(join q q a2 = insert n q), (join q q a2 = insert n gv2), (join q q a2 = insert x q), (join q q a2 = insert x gv2), (join q q a2 = insert gv0 q), (join q q a2 = insert gv0 gv2), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = carry gv2 a2), (join q q a2 = carry gv2 a1)
(join q q a2 = q ++ q), (join q q a2 = q ++ gv2), (join q q a2 = gv2 ++ q), (join q q a2 = gv2 ++ gv2), (join q q a1 = q), (join q q a1 = gv2), (join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = insert n q), (join q q a1 = insert n gv2)
(join q q a1 = insert x q), (join q q a1 = insert x gv2), (join q q a1 = insert gv0 q), (join q q a1 = insert gv0 gv2), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry gv2 a2), (join q q a1 = carry gv2 a1), (join q q a1 = q ++ q), (join q q a1 = q ++ gv2)
(join q q a1 = gv2 ++ q), (join q q a1 = gv2 ++ gv2), (join q gv2 a2 = q), (join q gv2 a2 = gv2), (join q gv2 a2 = heap_delete_max a2), (join q gv2 a2 = heap_delete_max a1), (join q gv2 a2 = insert n q), (join q gv2 a2 = insert n gv2), (join q gv2 a2 = insert x q), (join q gv2 a2 = insert x gv2)
(join q gv2 a2 = insert gv0 q), (join q gv2 a2 = insert gv0 gv2), (join q gv2 a2 = carry q a2), (join q gv2 a2 = carry q a1), (join q gv2 a2 = carry gv2 a2), (join q gv2 a2 = carry gv2 a1), (join q gv2 a2 = q ++ q), (join q gv2 a2 = q ++ gv2), (join q gv2 a2 = gv2 ++ q), (join q gv2 a2 = gv2 ++ gv2)
(join q gv2 a1 = q), (join q gv2 a1 = gv2), (join q gv2 a1 = heap_delete_max a2), (join q gv2 a1 = heap_delete_max a1), (join q gv2 a1 = insert n q), (join q gv2 a1 = insert n gv2), (join q gv2 a1 = insert x q), (join q gv2 a1 = insert x gv2), (join q gv2 a1 = insert gv0 q), (join q gv2 a1 = insert gv0 gv2)
(join q gv2 a1 = carry q a2), (join q gv2 a1 = carry q a1), (join q gv2 a1 = carry gv2 a2), (join q gv2 a1 = carry gv2 a1), (join q gv2 a1 = q ++ q), (join q gv2 a1 = q ++ gv2), (join q gv2 a1 = gv2 ++ q), (join q gv2 a1 = gv2 ++ gv2), (join gv2 q a2 = q), (join gv2 q a2 = gv2)
(join gv2 q a2 = heap_delete_max a2), (join gv2 q a2 = heap_delete_max a1), (join gv2 q a2 = insert n q), (join gv2 q a2 = insert n gv2), (join gv2 q a2 = insert x q), (join gv2 q a2 = insert x gv2), (join gv2 q a2 = insert gv0 q), (join gv2 q a2 = insert gv0 gv2), (join gv2 q a2 = carry q a2), (join gv2 q a2 = carry q a1)
(join gv2 q a2 = carry gv2 a2), (join gv2 q a2 = carry gv2 a1), (join gv2 q a2 = q ++ q), (join gv2 q a2 = q ++ gv2), (join gv2 q a2 = gv2 ++ q), (join gv2 q a2 = gv2 ++ gv2), (join gv2 q a1 = q), (join gv2 q a1 = gv2), (join gv2 q a1 = heap_delete_max a2), (join gv2 q a1 = heap_delete_max a1)
(join gv2 q a1 = insert n q), (join gv2 q a1 = insert n gv2), (join gv2 q a1 = insert x q), (join gv2 q a1 = insert x gv2), (join gv2 q a1 = insert gv0 q), (join gv2 q a1 = insert gv0 gv2), (join gv2 q a1 = carry q a2), (join gv2 q a1 = carry q a1), (join gv2 q a1 = carry gv2 a2), (join gv2 q a1 = carry gv2 a1)
(join gv2 q a1 = q ++ q), (join gv2 q a1 = q ++ gv2), (join gv2 q a1 = gv2 ++ q), (join gv2 q a1 = gv2 ++ gv2), (join gv2 gv2 a2 = q), (join gv2 gv2 a2 = gv2), (join gv2 gv2 a2 = heap_delete_max a2), (join gv2 gv2 a2 = heap_delete_max a1), (join gv2 gv2 a2 = insert n q), (join gv2 gv2 a2 = insert n gv2)
(join gv2 gv2 a2 = insert x q), (join gv2 gv2 a2 = insert x gv2), (join gv2 gv2 a2 = insert gv0 q), (join gv2 gv2 a2 = insert gv0 gv2), (join gv2 gv2 a2 = carry q a2), (join gv2 gv2 a2 = carry q a1), (join gv2 gv2 a2 = carry gv2 a2), (join gv2 gv2 a2 = carry gv2 a1), (join gv2 gv2 a2 = q ++ q), (join gv2 gv2 a2 = q ++ gv2)
(join gv2 gv2 a2 = gv2 ++ q), (join gv2 gv2 a2 = gv2 ++ gv2), (join gv2 gv2 a1 = q), (join gv2 gv2 a1 = gv2), (join gv2 gv2 a1 = heap_delete_max a2), (join gv2 gv2 a1 = heap_delete_max a1), (join gv2 gv2 a1 = insert n q), (join gv2 gv2 a1 = insert n gv2), (join gv2 gv2 a1 = insert x q), (join gv2 gv2 a1 = insert x gv2)
(join gv2 gv2 a1 = insert gv0 q), (join gv2 gv2 a1 = insert gv0 gv2), (join gv2 gv2 a1 = carry q a2), (join gv2 gv2 a1 = carry q a1), (join gv2 gv2 a1 = carry gv2 a2), (join gv2 gv2 a1 = carry gv2 a1), (join gv2 gv2 a1 = q ++ q), (join gv2 gv2 a1 = q ++ gv2), (join gv2 gv2 a1 = gv2 ++ q), (join gv2 gv2 a1 = gv2 ++ gv2)
(insert n q = q), (insert n q = gv2), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry gv2 a2), (insert n q = carry gv2 a1), (insert n q = q ++ q), (insert n q = q ++ gv2)
(insert n q = gv2 ++ q), (insert n q = gv2 ++ gv2), (insert n gv2 = q), (insert n gv2 = gv2), (insert n gv2 = heap_delete_max a2), (insert n gv2 = heap_delete_max a1), (insert n gv2 = carry q a2), (insert n gv2 = carry q a1), (insert n gv2 = carry gv2 a2), (insert n gv2 = carry gv2 a1)
(insert n gv2 = q ++ q), (insert n gv2 = q ++ gv2), (insert n gv2 = gv2 ++ q), (insert n gv2 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1), (insert x q = carry q a2), (insert x q = carry q a1)
(insert x q = carry gv2 a2), (insert x q = carry gv2 a1), (insert x q = q ++ q), (insert x q = q ++ gv2), (insert x q = gv2 ++ q), (insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = heap_delete_max a2), (insert x gv2 = heap_delete_max a1)
(insert x gv2 = carry q a2), (insert x gv2 = carry q a1), (insert x gv2 = carry gv2 a2), (insert x gv2 = carry gv2 a1), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q), (insert x gv2 = gv2 ++ gv2), (insert gv0 q = q), (insert gv0 q = gv2)
(insert gv0 q = heap_delete_max a2), (insert gv0 q = heap_delete_max a1), (insert gv0 q = carry q a2), (insert gv0 q = carry q a1), (insert gv0 q = carry gv2 a2), (insert gv0 q = carry gv2 a1), (insert gv0 q = q ++ q), (insert gv0 q = q ++ gv2), (insert gv0 q = gv2 ++ q), (insert gv0 q = gv2 ++ gv2)
(insert gv0 gv2 = q), (insert gv0 gv2 = gv2), (insert gv0 gv2 = heap_delete_max a2), (insert gv0 gv2 = heap_delete_max a1), (insert gv0 gv2 = carry q a2), (insert gv0 gv2 = carry q a1), (insert gv0 gv2 = carry gv2 a2), (insert gv0 gv2 = carry gv2 a1), (insert gv0 gv2 = q ++ q), (insert gv0 gv2 = q ++ gv2)
(insert gv0 gv2 = gv2 ++ q), (insert gv0 gv2 = gv2 ++ gv2), (carry q a2 = q), (carry q a2 = gv2), (carry q a2 = q ++ q), (carry q a2 = q ++ gv2), (carry q a2 = gv2 ++ q), (carry q a2 = gv2 ++ gv2), (carry q a1 = q), (carry q a1 = gv2)
(carry q a1 = q ++ q), (carry q a1 = q ++ gv2), (carry q a1 = gv2 ++ q), (carry q a1 = gv2 ++ gv2), (carry gv2 a2 = q), (carry gv2 a2 = gv2), (carry gv2 a2 = q ++ q), (carry gv2 a2 = q ++ gv2), (carry gv2 a2 = gv2 ++ q), (carry gv2 a2 = gv2 ++ gv2)
(carry gv2 a1 = q), (carry gv2 a1 = gv2), (carry gv2 a1 = q ++ q), (carry gv2 a1 = q ++ gv2), (carry gv2 a1 = gv2 ++ q), (carry gv2 a1 = gv2 ++ gv2), (q ++ q = q), (q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2)
(gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q), (gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q), ([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2)
([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = join q q a2), ([] = join q q a1), ([] = join q gv2 a2), ([] = join q gv2 a1), ([] = join gv2 q a2), ([] = join gv2 q a1), ([] = join gv2 gv2 a2), ([] = join gv2 gv2 a1)
([] = insert n q), ([] = insert n gv2), ([] = insert x q), ([] = insert x gv2), ([] = insert gv0 q), ([] = insert gv0 gv2), ([] = carry q a2), ([] = carry q a1), ([] = carry gv2 a2), ([] = carry gv2 a1)
([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q), ([] = gv2 ++ gv2), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv2), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2), ((q, q) = delete_max_aux gv0 q), ((q, q) = delete_max_aux gv0 gv2)
((q, gv2) = delete_max_aux n q), ((q, gv2) = delete_max_aux n gv2), ((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((q, gv2) = delete_max_aux gv0 q), ((q, gv2) = delete_max_aux gv0 gv2), ((gv2, q) = delete_max_aux n q), ((gv2, q) = delete_max_aux n gv2), ((gv2, q) = delete_max_aux x q), ((gv2, q) = delete_max_aux x gv2)
((gv2, q) = delete_max_aux gv0 q), ((gv2, q) = delete_max_aux gv0 gv2), ((gv2, gv2) = delete_max_aux n q), ((gv2, gv2) = delete_max_aux n gv2), ((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux gv0 q), ((gv2, gv2) = delete_max_aux gv0 gv2), (Node n a2 a2 = a2), (Node n a2 a2 = a1)
(Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1)
(Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1)
(Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a1 = a2), (Node x a2 a1 = a1)
(Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = smash a2 a2), (Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1)
(Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node gv0 a2 a2 = a2), (Node gv0 a2 a2 = a1), (Node gv0 a2 a2 = smash a2 a2), (Node gv0 a2 a2 = smash a2 a1)
(Node gv0 a2 a2 = smash a1 a2), (Node gv0 a2 a2 = smash a1 a1), (Node gv0 a2 a1 = a2), (Node gv0 a2 a1 = a1), (Node gv0 a2 a1 = smash a2 a2), (Node gv0 a2 a1 = smash a2 a1), (Node gv0 a2 a1 = smash a1 a2), (Node gv0 a2 a1 = smash a1 a1), (Node gv0 a1 a2 = a2), (Node gv0 a1 a2 = a1)
(Node gv0 a1 a2 = smash a2 a2), (Node gv0 a1 a2 = smash a2 a1), (Node gv0 a1 a2 = smash a1 a2), (Node gv0 a1 a2 = smash a1 a1), (Node gv0 a1 a1 = a2), (Node gv0 a1 a1 = a1), (Node gv0 a1 a1 = smash a2 a2), (Node gv0 a1 a1 = smash a2 a1), (Node gv0 a1 a1 = smash a1 a2), (Node gv0 a1 a1 = smash a1 a1)
(smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1)
(Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node gv0 a2 a2), (Leaf = Node gv0 a2 a1), (Leaf = Node gv0 a1 a2), (Leaf = Node gv0 a1 a1)
(Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' n q = n), (find_max' n q = x), (find_max' n q = gv0), (find_max' n gv2 = n), (find_max' n gv2 = x), (find_max' n gv2 = gv0)
(find_max' x q = n), (find_max' x q = x), (find_max' x q = gv0), (find_max' x gv2 = n), (find_max' x gv2 = x), (find_max' x gv2 = gv0), (find_max' gv0 q = n), (find_max' gv0 q = x), (find_max' gv0 q = gv0), (find_max' gv0 gv2 = n)
(find_max' gv0 gv2 = x), (find_max' gv0 gv2 = gv0), (length q = n), (length q = x), (length q = gv0), (length q = find_max' n q), (length q = find_max' n gv2), (length q = find_max' x q), (length q = find_max' x gv2), (length q = find_max' gv0 q)
(length q = find_max' gv0 gv2), (length gv2 = n), (length gv2 = x), (length gv2 = gv0), (length gv2 = find_max' n q), (length gv2 = find_max' n gv2), (length gv2 = find_max' x q), (length gv2 = find_max' x gv2), (length gv2 = find_max' gv0 q), (length gv2 = find_max' gv0 gv2)
(Some n = find_max q), (Some n = find_max gv2), (Some x = find_max q), (Some x = find_max gv2), (Some gv0 = find_max q), (Some gv0 = find_max gv2), (None = Some n), (None = Some x), (None = Some gv0), (None = find_max q)
(None = find_max gv2), (None = Some a2), (None = Some a1), ((n >? n) = (n >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? gv0)), ((n >? n) = (x >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? gv0)), ((n >? n) = (gv0 >=? n))
((n >? n) = (gv0 >=? x)), ((n >? n) = (gv0 >=? gv0)), ((n >? x) = (n >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? gv0)), ((n >? x) = (x >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? gv0)), ((n >? x) = (gv0 >=? n)), ((n >? x) = (gv0 >=? x))
((n >? x) = (gv0 >=? gv0)), ((n >? gv0) = (n >=? n)), ((n >? gv0) = (n >=? x)), ((n >? gv0) = (n >=? gv0)), ((n >? gv0) = (x >=? n)), ((n >? gv0) = (x >=? x)), ((n >? gv0) = (x >=? gv0)), ((n >? gv0) = (gv0 >=? n)), ((n >? gv0) = (gv0 >=? x)), ((n >? gv0) = (gv0 >=? gv0))
((x >? n) = (n >=? n)), ((x >? n) = (n >=? x)), ((x >? n) = (n >=? gv0)), ((x >? n) = (x >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? gv0)), ((x >? n) = (gv0 >=? n)), ((x >? n) = (gv0 >=? x)), ((x >? n) = (gv0 >=? gv0)), ((x >? x) = (n >=? n))
((x >? x) = (n >=? x)), ((x >? x) = (n >=? gv0)), ((x >? x) = (x >=? n)), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? gv0)), ((x >? x) = (gv0 >=? n)), ((x >? x) = (gv0 >=? x)), ((x >? x) = (gv0 >=? gv0)), ((x >? gv0) = (n >=? n)), ((x >? gv0) = (n >=? x))
((x >? gv0) = (n >=? gv0)), ((x >? gv0) = (x >=? n)), ((x >? gv0) = (x >=? x)), ((x >? gv0) = (x >=? gv0)), ((x >? gv0) = (gv0 >=? n)), ((x >? gv0) = (gv0 >=? x)), ((x >? gv0) = (gv0 >=? gv0)), ((gv0 >? n) = (n >=? n)), ((gv0 >? n) = (n >=? x)), ((gv0 >? n) = (n >=? gv0))
((gv0 >? n) = (x >=? n)), ((gv0 >? n) = (x >=? x)), ((gv0 >? n) = (x >=? gv0)), ((gv0 >? n) = (gv0 >=? n)), ((gv0 >? n) = (gv0 >=? x)), ((gv0 >? n) = (gv0 >=? gv0)), ((gv0 >? x) = (n >=? n)), ((gv0 >? x) = (n >=? x)), ((gv0 >? x) = (n >=? gv0)), ((gv0 >? x) = (x >=? n))
((gv0 >? x) = (x >=? x)), ((gv0 >? x) = (x >=? gv0)), ((gv0 >? x) = (gv0 >=? n)), ((gv0 >? x) = (gv0 >=? x)), ((gv0 >? x) = (gv0 >=? gv0)), ((gv0 >? gv0) = (n >=? n)), ((gv0 >? gv0) = (n >=? x)), ((gv0 >? gv0) = (n >=? gv0)), ((gv0 >? gv0) = (x >=? n)), ((gv0 >? gv0) = (x >=? x))
((gv0 >? gv0) = (x >=? gv0)), ((gv0 >? gv0) = (gv0 >=? n)), ((gv0 >? gv0) = (gv0 >=? x)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 6 (6)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (priqq n q), (priqq n gv1), (priqq gv0 q), (priqq gv0 gv1), (pow2heap x a2), (pow2heap x a1)
(pow2heap n a2), (pow2heap n a1), (pow2heap gv0 a2), (pow2heap gv0 a1), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp x gv0 a2), (pow2heapp x gv0 a1)
(pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n gv0 a2), (pow2heapp n gv0 a1), (pow2heapp gv0 x a2), (pow2heapp gv0 x a1), (pow2heapp gv0 n a2), (pow2heapp gv0 n a1)
(pow2heapp gv0 gv0 a2), (pow2heapp gv0 gv0 a1), (Permutation q q), (Permutation q gv1), (Permutation gv1 q), (Permutation gv1 gv1), (In a2 q), (In a2 gv1), (In a1 q), (In a1 gv1)
(x < x), (x < n), (x < gv0), (n < x), (n < n), (n < gv0), (gv0 < x), (gv0 < n), (gv0 < gv0), (x <= x)
(x <= n), (x <= gv0), (n <= x), (n <= n), (n <= gv0), (gv0 <= x), (gv0 <= n), (gv0 <= gv0), (a2 = a2), (a2 = a1)
(a1 = a2), (a1 = a1), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1), (x = x), (x = n), (x = gv0), (n = x)
(n = n), (n = gv0), (gv0 = x), (gv0 = n), (gv0 = gv0), (false = (x >? x)), (false = (x >? n)), (false = (x >? gv0)), (false = (n >? x)), (false = (n >? n))
(false = (n >? gv0)), (false = (gv0 >? x)), (false = (gv0 >? n)), (false = (gv0 >? gv0)), (false = (x >=? x)), (false = (x >=? n)), (false = (x >=? gv0)), (false = (n >=? x)), (false = (n >=? n)), (false = (n >=? gv0))
(false = (gv0 >=? x)), (false = (gv0 >=? n)), (false = (gv0 >=? gv0)), (true = (x >? x)), (true = (x >? n)), (true = (x >? gv0)), (true = (n >? x)), (true = (n >? n)), (true = (n >? gv0)), (true = (gv0 >? x))
(true = (gv0 >? n)), (true = (gv0 >? gv0)), (true = (x >=? x)), (true = (x >=? n)), (true = (x >=? gv0)), (true = (n >=? x)), (true = (n >=? n)), (true = (n >=? gv0)), (true = (gv0 >=? x)), (true = (gv0 >=? n))
(true = (gv0 >=? gv0)), (Abs q []), (Abs gv1 []), (Abs (a2 :: q) []), (Abs (a2 :: gv1) []), (Abs (a1 :: q) []), (Abs (a1 :: gv1) []), (Abs (merge q q) []), (Abs (merge q gv1) []), (Abs (merge gv1 q) [])
(Abs (merge gv1 gv1) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q gv1 a2) []), (Abs (join q gv1 a1) []), (Abs (join gv1 q a2) []), (Abs (join gv1 q a1) []), (Abs (join gv1 gv1 a2) [])
(Abs (join gv1 gv1 a1) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (insert n q) []), (Abs (insert n gv1) []), (Abs (insert gv0 q) []), (Abs (insert gv0 gv1) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry gv1 a2) [])
(Abs (carry gv1 a1) []), (Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (a2 :: q) []), (priqueue_elems (a2 :: gv1) [])
(priqueue_elems (a1 :: q) []), (priqueue_elems (a1 :: gv1) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) [])
(priqueue_elems (join q gv1 a2) []), (priqueue_elems (join q gv1 a1) []), (priqueue_elems (join gv1 q a2) []), (priqueue_elems (join gv1 q a1) []), (priqueue_elems (join gv1 gv1 a2) []), (priqueue_elems (join gv1 gv1 a1) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv1) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv1) [])
(priqueue_elems (insert gv0 q) []), (priqueue_elems (insert gv0 gv1) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) []), (priqueue_elems (carry gv1 a2) []), (priqueue_elems (carry gv1 a1) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) [])
(priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 a2) [])
(tree_elems (Node n a1 a1) []), (tree_elems (Node gv0 a2 a2) []), (tree_elems (Node gv0 a2 a1) []), (tree_elems (Node gv0 a1 a2) []), (tree_elems (Node gv0 a1 a1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf [])
(priq (a2 :: q)), (priq (a2 :: gv1)), (priq (a1 :: q)), (priq (a1 :: gv1)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (merge gv1 gv1)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1))
(priq (join q q a2)), (priq (join q q a1)), (priq (join q gv1 a2)), (priq (join q gv1 a1)), (priq (join gv1 q a2)), (priq (join gv1 q a1)), (priq (join gv1 gv1 a2)), (priq (join gv1 gv1 a1)), (priq (insert x q)), (priq (insert x gv1))
(priq (insert n q)), (priq (insert n gv1)), (priq (insert gv0 q)), (priq (insert gv0 gv1)), (priq (carry q a2)), (priq (carry q a1)), (priq (carry gv1 a2)), (priq (carry gv1 a1)), (priq (q ++ q)), (priq (q ++ gv1))
(priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priqq x (a2 :: q)), (priqq x (a2 :: gv1)), (priqq x (a1 :: q)), (priqq x (a1 :: gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q)), (priqq x (merge gv1 gv1))
(priqq x (heap_delete_max a2)), (priqq x (heap_delete_max a1)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q gv1 a2)), (priqq x (join q gv1 a1)), (priqq x (join gv1 q a2)), (priqq x (join gv1 q a1)), (priqq x (join gv1 gv1 a2)), (priqq x (join gv1 gv1 a1))
(priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (insert n q)), (priqq x (insert n gv1)), (priqq x (insert gv0 q)), (priqq x (insert gv0 gv1)), (priqq x (carry q a2)), (priqq x (carry q a1)), (priqq x (carry gv1 a2)), (priqq x (carry gv1 a1))
(priqq x (q ++ q)), (priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1)), (priqq n (a2 :: q)), (priqq n (a2 :: gv1)), (priqq n (a1 :: q)), (priqq n (a1 :: gv1)), (priqq n (merge q q)), (priqq n (merge q gv1))
(priqq n (merge gv1 q)), (priqq n (merge gv1 gv1)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q gv1 a2)), (priqq n (join q gv1 a1)), (priqq n (join gv1 q a2)), (priqq n (join gv1 q a1))
(priqq n (join gv1 gv1 a2)), (priqq n (join gv1 gv1 a1)), (priqq n (insert x q)), (priqq n (insert x gv1)), (priqq n (insert n q)), (priqq n (insert n gv1)), (priqq n (insert gv0 q)), (priqq n (insert gv0 gv1)), (priqq n (carry q a2)), (priqq n (carry q a1))
(priqq n (carry gv1 a2)), (priqq n (carry gv1 a1)), (priqq n (q ++ q)), (priqq n (q ++ gv1)), (priqq n (gv1 ++ q)), (priqq n (gv1 ++ gv1)), (priqq gv0 (a2 :: q)), (priqq gv0 (a2 :: gv1)), (priqq gv0 (a1 :: q)), (priqq gv0 (a1 :: gv1))
(priqq gv0 (merge q q)), (priqq gv0 (merge q gv1)), (priqq gv0 (merge gv1 q)), (priqq gv0 (merge gv1 gv1)), (priqq gv0 (heap_delete_max a2)), (priqq gv0 (heap_delete_max a1)), (priqq gv0 (join q q a2)), (priqq gv0 (join q q a1)), (priqq gv0 (join q gv1 a2)), (priqq gv0 (join q gv1 a1))
(priqq gv0 (join gv1 q a2)), (priqq gv0 (join gv1 q a1)), (priqq gv0 (join gv1 gv1 a2)), (priqq gv0 (join gv1 gv1 a1)), (priqq gv0 (insert x q)), (priqq gv0 (insert x gv1)), (priqq gv0 (insert n q)), (priqq gv0 (insert n gv1)), (priqq gv0 (insert gv0 q)), (priqq gv0 (insert gv0 gv1))
(priqq gv0 (carry q a2)), (priqq gv0 (carry q a1)), (priqq gv0 (carry gv1 a2)), (priqq gv0 (carry gv1 a1)), (priqq gv0 (q ++ q)), (priqq gv0 (q ++ gv1)), (priqq gv0 (gv1 ++ q)), (priqq gv0 (gv1 ++ gv1)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv1)
(priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a2 :: gv1)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv1)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv1)), (priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1))
(priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q gv1 a2)), (priqq (find_max' x q) (join q gv1 a1)), (priqq (find_max' x q) (join gv1 q a2)), (priqq (find_max' x q) (join gv1 q a1)), (priqq (find_max' x q) (join gv1 gv1 a2)), (priqq (find_max' x q) (join gv1 gv1 a1)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1))
(priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv1)), (priqq (find_max' x q) (insert gv0 q)), (priqq (find_max' x q) (insert gv0 gv1)), (priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry gv1 a2)), (priqq (find_max' x q) (carry gv1 a1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1))
(priqq (find_max' x q) (gv1 ++ q)), (priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1), (priqq (find_max' x gv1) (a2 :: q)), (priqq (find_max' x gv1) (a2 :: gv1)), (priqq (find_max' x gv1) (a1 :: q)), (priqq (find_max' x gv1) (a1 :: gv1)), (priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1))
(priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (heap_delete_max a2)), (priqq (find_max' x gv1) (heap_delete_max a1)), (priqq (find_max' x gv1) (join q q a2)), (priqq (find_max' x gv1) (join q q a1)), (priqq (find_max' x gv1) (join q gv1 a2)), (priqq (find_max' x gv1) (join q gv1 a1)), (priqq (find_max' x gv1) (join gv1 q a2)), (priqq (find_max' x gv1) (join gv1 q a1))
(priqq (find_max' x gv1) (join gv1 gv1 a2)), (priqq (find_max' x gv1) (join gv1 gv1 a1)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (insert n q)), (priqq (find_max' x gv1) (insert n gv1)), (priqq (find_max' x gv1) (insert gv0 q)), (priqq (find_max' x gv1) (insert gv0 gv1)), (priqq (find_max' x gv1) (carry q a2)), (priqq (find_max' x gv1) (carry q a1))
(priqq (find_max' x gv1) (carry gv1 a2)), (priqq (find_max' x gv1) (carry gv1 a1)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1)), (priqq (find_max' n q) q), (priqq (find_max' n q) gv1), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a2 :: gv1))
(priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv1)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv1)), (priqq (find_max' n q) (merge gv1 q)), (priqq (find_max' n q) (merge gv1 gv1)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1))
(priqq (find_max' n q) (join q gv1 a2)), (priqq (find_max' n q) (join q gv1 a1)), (priqq (find_max' n q) (join gv1 q a2)), (priqq (find_max' n q) (join gv1 q a1)), (priqq (find_max' n q) (join gv1 gv1 a2)), (priqq (find_max' n q) (join gv1 gv1 a1)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv1)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert n gv1))
(priqq (find_max' n q) (insert gv0 q)), (priqq (find_max' n q) (insert gv0 gv1)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry gv1 a2)), (priqq (find_max' n q) (carry gv1 a1)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv1)), (priqq (find_max' n q) (gv1 ++ q)), (priqq (find_max' n q) (gv1 ++ gv1))
(priqq (find_max' n gv1) q), (priqq (find_max' n gv1) gv1), (priqq (find_max' n gv1) (a2 :: q)), (priqq (find_max' n gv1) (a2 :: gv1)), (priqq (find_max' n gv1) (a1 :: q)), (priqq (find_max' n gv1) (a1 :: gv1)), (priqq (find_max' n gv1) (merge q q)), (priqq (find_max' n gv1) (merge q gv1)), (priqq (find_max' n gv1) (merge gv1 q)), (priqq (find_max' n gv1) (merge gv1 gv1))
(priqq (find_max' n gv1) (heap_delete_max a2)), (priqq (find_max' n gv1) (heap_delete_max a1)), (priqq (find_max' n gv1) (join q q a2)), (priqq (find_max' n gv1) (join q q a1)), (priqq (find_max' n gv1) (join q gv1 a2)), (priqq (find_max' n gv1) (join q gv1 a1)), (priqq (find_max' n gv1) (join gv1 q a2)), (priqq (find_max' n gv1) (join gv1 q a1)), (priqq (find_max' n gv1) (join gv1 gv1 a2)), (priqq (find_max' n gv1) (join gv1 gv1 a1))
(priqq (find_max' n gv1) (insert x q)), (priqq (find_max' n gv1) (insert x gv1)), (priqq (find_max' n gv1) (insert n q)), (priqq (find_max' n gv1) (insert n gv1)), (priqq (find_max' n gv1) (insert gv0 q)), (priqq (find_max' n gv1) (insert gv0 gv1)), (priqq (find_max' n gv1) (carry q a2)), (priqq (find_max' n gv1) (carry q a1)), (priqq (find_max' n gv1) (carry gv1 a2)), (priqq (find_max' n gv1) (carry gv1 a1))
(priqq (find_max' n gv1) (q ++ q)), (priqq (find_max' n gv1) (q ++ gv1)), (priqq (find_max' n gv1) (gv1 ++ q)), (priqq (find_max' n gv1) (gv1 ++ gv1)), (priqq (find_max' gv0 q) q), (priqq (find_max' gv0 q) gv1), (priqq (find_max' gv0 q) (a2 :: q)), (priqq (find_max' gv0 q) (a2 :: gv1)), (priqq (find_max' gv0 q) (a1 :: q)), (priqq (find_max' gv0 q) (a1 :: gv1))
(priqq (find_max' gv0 q) (merge q q)), (priqq (find_max' gv0 q) (merge q gv1)), (priqq (find_max' gv0 q) (merge gv1 q)), (priqq (find_max' gv0 q) (merge gv1 gv1)), (priqq (find_max' gv0 q) (heap_delete_max a2)), (priqq (find_max' gv0 q) (heap_delete_max a1)), (priqq (find_max' gv0 q) (join q q a2)), (priqq (find_max' gv0 q) (join q q a1)), (priqq (find_max' gv0 q) (join q gv1 a2)), (priqq (find_max' gv0 q) (join q gv1 a1))
(priqq (find_max' gv0 q) (join gv1 q a2)), (priqq (find_max' gv0 q) (join gv1 q a1)), (priqq (find_max' gv0 q) (join gv1 gv1 a2)), (priqq (find_max' gv0 q) (join gv1 gv1 a1)), (priqq (find_max' gv0 q) (insert x q)), (priqq (find_max' gv0 q) (insert x gv1)), (priqq (find_max' gv0 q) (insert n q)), (priqq (find_max' gv0 q) (insert n gv1)), (priqq (find_max' gv0 q) (insert gv0 q)), (priqq (find_max' gv0 q) (insert gv0 gv1))
(priqq (find_max' gv0 q) (carry q a2)), (priqq (find_max' gv0 q) (carry q a1)), (priqq (find_max' gv0 q) (carry gv1 a2)), (priqq (find_max' gv0 q) (carry gv1 a1)), (priqq (find_max' gv0 q) (q ++ q)), (priqq (find_max' gv0 q) (q ++ gv1)), (priqq (find_max' gv0 q) (gv1 ++ q)), (priqq (find_max' gv0 q) (gv1 ++ gv1)), (priqq (find_max' gv0 gv1) q), (priqq (find_max' gv0 gv1) gv1)
(priqq (find_max' gv0 gv1) (a2 :: q)), (priqq (find_max' gv0 gv1) (a2 :: gv1)), (priqq (find_max' gv0 gv1) (a1 :: q)), (priqq (find_max' gv0 gv1) (a1 :: gv1)), (priqq (find_max' gv0 gv1) (merge q q)), (priqq (find_max' gv0 gv1) (merge q gv1)), (priqq (find_max' gv0 gv1) (merge gv1 q)), (priqq (find_max' gv0 gv1) (merge gv1 gv1)), (priqq (find_max' gv0 gv1) (heap_delete_max a2)), (priqq (find_max' gv0 gv1) (heap_delete_max a1))
(priqq (find_max' gv0 gv1) (join q q a2)), (priqq (find_max' gv0 gv1) (join q q a1)), (priqq (find_max' gv0 gv1) (join q gv1 a2)), (priqq (find_max' gv0 gv1) (join q gv1 a1)), (priqq (find_max' gv0 gv1) (join gv1 q a2)), (priqq (find_max' gv0 gv1) (join gv1 q a1)), (priqq (find_max' gv0 gv1) (join gv1 gv1 a2)), (priqq (find_max' gv0 gv1) (join gv1 gv1 a1)), (priqq (find_max' gv0 gv1) (insert x q)), (priqq (find_max' gv0 gv1) (insert x gv1))
(priqq (find_max' gv0 gv1) (insert n q)), (priqq (find_max' gv0 gv1) (insert n gv1)), (priqq (find_max' gv0 gv1) (insert gv0 q)), (priqq (find_max' gv0 gv1) (insert gv0 gv1)), (priqq (find_max' gv0 gv1) (carry q a2)), (priqq (find_max' gv0 gv1) (carry q a1)), (priqq (find_max' gv0 gv1) (carry gv1 a2)), (priqq (find_max' gv0 gv1) (carry gv1 a1)), (priqq (find_max' gv0 gv1) (q ++ q)), (priqq (find_max' gv0 gv1) (q ++ gv1))
(priqq (find_max' gv0 gv1) (gv1 ++ q)), (priqq (find_max' gv0 gv1) (gv1 ++ gv1)), (priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv1)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv1)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv1))
(priqq (length q) (merge gv1 q)), (priqq (length q) (merge gv1 gv1)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q gv1 a2)), (priqq (length q) (join q gv1 a1)), (priqq (length q) (join gv1 q a2)), (priqq (length q) (join gv1 q a1))
(priqq (length q) (join gv1 gv1 a2)), (priqq (length q) (join gv1 gv1 a1)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1)), (priqq (length q) (insert n q)), (priqq (length q) (insert n gv1)), (priqq (length q) (insert gv0 q)), (priqq (length q) (insert gv0 gv1)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1))
(priqq (length q) (carry gv1 a2)), (priqq (length q) (carry gv1 a1)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv1)), (priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (a2 :: q)), (priqq (length gv1) (a2 :: gv1))
(priqq (length gv1) (a1 :: q)), (priqq (length gv1) (a1 :: gv1)), (priqq (length gv1) (merge q q)), (priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (heap_delete_max a2)), (priqq (length gv1) (heap_delete_max a1)), (priqq (length gv1) (join q q a2)), (priqq (length gv1) (join q q a1))
(priqq (length gv1) (join q gv1 a2)), (priqq (length gv1) (join q gv1 a1)), (priqq (length gv1) (join gv1 q a2)), (priqq (length gv1) (join gv1 q a1)), (priqq (length gv1) (join gv1 gv1 a2)), (priqq (length gv1) (join gv1 gv1 a1)), (priqq (length gv1) (insert x q)), (priqq (length gv1) (insert x gv1)), (priqq (length gv1) (insert n q)), (priqq (length gv1) (insert n gv1))
(priqq (length gv1) (insert gv0 q)), (priqq (length gv1) (insert gv0 gv1)), (priqq (length gv1) (carry q a2)), (priqq (length gv1) (carry q a1)), (priqq (length gv1) (carry gv1 a2)), (priqq (length gv1) (carry gv1 a1)), (priqq (length gv1) (q ++ q)), (priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1))
(pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (Node gv0 a2 a2)), (pow2heap x (Node gv0 a2 a1))
(pow2heap x (Node gv0 a1 a2)), (pow2heap x (Node gv0 a1 a1)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1))
(pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node gv0 a2 a2)), (pow2heap n (Node gv0 a2 a1)), (pow2heap n (Node gv0 a1 a2)), (pow2heap n (Node gv0 a1 a1)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap gv0 (Node x a2 a2)), (pow2heap gv0 (Node x a2 a1)), (pow2heap gv0 (Node x a1 a2)), (pow2heap gv0 (Node x a1 a1)), (pow2heap gv0 (Node n a2 a2)), (pow2heap gv0 (Node n a2 a1)), (pow2heap gv0 (Node n a1 a2)), (pow2heap gv0 (Node n a1 a1))
(pow2heap gv0 (Node gv0 a2 a2)), (pow2heap gv0 (Node gv0 a2 a1)), (pow2heap gv0 (Node gv0 a1 a2)), (pow2heap gv0 (Node gv0 a1 a1)), (pow2heap gv0 (smash a2 a2)), (pow2heap gv0 (smash a2 a1)), (pow2heap gv0 (smash a1 a2)), (pow2heap gv0 (smash a1 a1)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1)
(pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (Node gv0 a2 a2)), (pow2heap (find_max' x q) (Node gv0 a2 a1))
(pow2heap (find_max' x q) (Node gv0 a1 a2)), (pow2heap (find_max' x q) (Node gv0 a1 a1)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x gv1) a2), (pow2heap (find_max' x gv1) a1), (pow2heap (find_max' x gv1) (Node x a2 a2)), (pow2heap (find_max' x gv1) (Node x a2 a1))
(pow2heap (find_max' x gv1) (Node x a1 a2)), (pow2heap (find_max' x gv1) (Node x a1 a1)), (pow2heap (find_max' x gv1) (Node n a2 a2)), (pow2heap (find_max' x gv1) (Node n a2 a1)), (pow2heap (find_max' x gv1) (Node n a1 a2)), (pow2heap (find_max' x gv1) (Node n a1 a1)), (pow2heap (find_max' x gv1) (Node gv0 a2 a2)), (pow2heap (find_max' x gv1) (Node gv0 a2 a1)), (pow2heap (find_max' x gv1) (Node gv0 a1 a2)), (pow2heap (find_max' x gv1) (Node gv0 a1 a1))
(pow2heap (find_max' x gv1) (smash a2 a2)), (pow2heap (find_max' x gv1) (smash a2 a1)), (pow2heap (find_max' x gv1) (smash a1 a2)), (pow2heap (find_max' x gv1) (smash a1 a1)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) (Node x a2 a2)), (pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1))
(pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node gv0 a2 a2)), (pow2heap (find_max' n q) (Node gv0 a2 a1)), (pow2heap (find_max' n q) (Node gv0 a1 a2)), (pow2heap (find_max' n q) (Node gv0 a1 a1)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1))
(pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n gv1) a2), (pow2heap (find_max' n gv1) a1), (pow2heap (find_max' n gv1) (Node x a2 a2)), (pow2heap (find_max' n gv1) (Node x a2 a1)), (pow2heap (find_max' n gv1) (Node x a1 a2)), (pow2heap (find_max' n gv1) (Node x a1 a1)), (pow2heap (find_max' n gv1) (Node n a2 a2)), (pow2heap (find_max' n gv1) (Node n a2 a1))
(pow2heap (find_max' n gv1) (Node n a1 a2)), (pow2heap (find_max' n gv1) (Node n a1 a1)), (pow2heap (find_max' n gv1) (Node gv0 a2 a2)), (pow2heap (find_max' n gv1) (Node gv0 a2 a1)), (pow2heap (find_max' n gv1) (Node gv0 a1 a2)), (pow2heap (find_max' n gv1) (Node gv0 a1 a1)), (pow2heap (find_max' n gv1) (smash a2 a2)), (pow2heap (find_max' n gv1) (smash a2 a1)), (pow2heap (find_max' n gv1) (smash a1 a2)), (pow2heap (find_max' n gv1) (smash a1 a1))
(pow2heap (find_max' gv0 q) a2), (pow2heap (find_max' gv0 q) a1), (pow2heap (find_max' gv0 q) (Node x a2 a2)), (pow2heap (find_max' gv0 q) (Node x a2 a1)), (pow2heap (find_max' gv0 q) (Node x a1 a2)), (pow2heap (find_max' gv0 q) (Node x a1 a1)), (pow2heap (find_max' gv0 q) (Node n a2 a2)), (pow2heap (find_max' gv0 q) (Node n a2 a1)), (pow2heap (find_max' gv0 q) (Node n a1 a2)), (pow2heap (find_max' gv0 q) (Node n a1 a1))
(pow2heap (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heap (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heap (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heap (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heap (find_max' gv0 q) (smash a2 a2)), (pow2heap (find_max' gv0 q) (smash a2 a1)), (pow2heap (find_max' gv0 q) (smash a1 a2)), (pow2heap (find_max' gv0 q) (smash a1 a1)), (pow2heap (find_max' gv0 gv1) a2), (pow2heap (find_max' gv0 gv1) a1)
(pow2heap (find_max' gv0 gv1) (Node x a2 a2)), (pow2heap (find_max' gv0 gv1) (Node x a2 a1)), (pow2heap (find_max' gv0 gv1) (Node x a1 a2)), (pow2heap (find_max' gv0 gv1) (Node x a1 a1)), (pow2heap (find_max' gv0 gv1) (Node n a2 a2)), (pow2heap (find_max' gv0 gv1) (Node n a2 a1)), (pow2heap (find_max' gv0 gv1) (Node n a1 a2)), (pow2heap (find_max' gv0 gv1) (Node n a1 a1)), (pow2heap (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heap (find_max' gv0 gv1) (Node gv0 a2 a1))
(pow2heap (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heap (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heap (find_max' gv0 gv1) (smash a2 a2)), (pow2heap (find_max' gv0 gv1) (smash a2 a1)), (pow2heap (find_max' gv0 gv1) (smash a1 a2)), (pow2heap (find_max' gv0 gv1) (smash a1 a1)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1))
(pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node gv0 a2 a2)), (pow2heap (length q) (Node gv0 a2 a1)), (pow2heap (length q) (Node gv0 a1 a2)), (pow2heap (length q) (Node gv0 a1 a1))
(pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length gv1) a2), (pow2heap (length gv1) a1), (pow2heap (length gv1) (Node x a2 a2)), (pow2heap (length gv1) (Node x a2 a1)), (pow2heap (length gv1) (Node x a1 a2)), (pow2heap (length gv1) (Node x a1 a1))
(pow2heap (length gv1) (Node n a2 a2)), (pow2heap (length gv1) (Node n a2 a1)), (pow2heap (length gv1) (Node n a1 a2)), (pow2heap (length gv1) (Node n a1 a1)), (pow2heap (length gv1) (Node gv0 a2 a2)), (pow2heap (length gv1) (Node gv0 a2 a1)), (pow2heap (length gv1) (Node gv0 a1 a2)), (pow2heap (length gv1) (Node gv0 a1 a1)), (pow2heap (length gv1) (smash a2 a2)), (pow2heap (length gv1) (smash a2 a1))
(pow2heap (length gv1) (smash a1 a2)), (pow2heap (length gv1) (smash a1 a1)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a1 a2)), (pow2heapp x x (Node n a1 a1))
(pow2heapp x x (Node gv0 a2 a2)), (pow2heapp x x (Node gv0 a2 a1)), (pow2heapp x x (Node gv0 a1 a2)), (pow2heapp x x (Node gv0 a1 a1)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x Leaf), (pow2heapp x n (Node x a2 a2))
(pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (Node gv0 a2 a2)), (pow2heapp x n (Node gv0 a2 a1)), (pow2heapp x n (Node gv0 a1 a2))
(pow2heapp x n (Node gv0 a1 a1)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n Leaf), (pow2heapp x gv0 (Node x a2 a2)), (pow2heapp x gv0 (Node x a2 a1)), (pow2heapp x gv0 (Node x a1 a2)), (pow2heapp x gv0 (Node x a1 a1))
(pow2heapp x gv0 (Node n a2 a2)), (pow2heapp x gv0 (Node n a2 a1)), (pow2heapp x gv0 (Node n a1 a2)), (pow2heapp x gv0 (Node n a1 a1)), (pow2heapp x gv0 (Node gv0 a2 a2)), (pow2heapp x gv0 (Node gv0 a2 a1)), (pow2heapp x gv0 (Node gv0 a1 a2)), (pow2heapp x gv0 (Node gv0 a1 a1)), (pow2heapp x gv0 (smash a2 a2)), (pow2heapp x gv0 (smash a2 a1))
(pow2heapp x gv0 (smash a1 a2)), (pow2heapp x gv0 (smash a1 a1)), (pow2heapp x gv0 Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node n a2 a2))
(pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (Node gv0 a2 a2)), (pow2heapp x (find_max' x q) (Node gv0 a2 a1)), (pow2heapp x (find_max' x q) (Node gv0 a1 a2)), (pow2heapp x (find_max' x q) (Node gv0 a1 a1)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a1 a2))
(pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) a2), (pow2heapp x (find_max' x gv1) a1), (pow2heapp x (find_max' x gv1) (Node x a2 a2)), (pow2heapp x (find_max' x gv1) (Node x a2 a1)), (pow2heapp x (find_max' x gv1) (Node x a1 a2)), (pow2heapp x (find_max' x gv1) (Node x a1 a1)), (pow2heapp x (find_max' x gv1) (Node n a2 a2)), (pow2heapp x (find_max' x gv1) (Node n a2 a1))
(pow2heapp x (find_max' x gv1) (Node n a1 a2)), (pow2heapp x (find_max' x gv1) (Node n a1 a1)), (pow2heapp x (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp x (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp x (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp x (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp x (find_max' x gv1) (smash a2 a2)), (pow2heapp x (find_max' x gv1) (smash a2 a1)), (pow2heapp x (find_max' x gv1) (smash a1 a2)), (pow2heapp x (find_max' x gv1) (smash a1 a1))
(pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a1 a2))
(pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node gv0 a2 a2)), (pow2heapp x (find_max' n q) (Node gv0 a2 a1)), (pow2heapp x (find_max' n q) (Node gv0 a1 a2)), (pow2heapp x (find_max' n q) (Node gv0 a1 a1)), (pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) Leaf)
(pow2heapp x (find_max' n gv1) a2), (pow2heapp x (find_max' n gv1) a1), (pow2heapp x (find_max' n gv1) (Node x a2 a2)), (pow2heapp x (find_max' n gv1) (Node x a2 a1)), (pow2heapp x (find_max' n gv1) (Node x a1 a2)), (pow2heapp x (find_max' n gv1) (Node x a1 a1)), (pow2heapp x (find_max' n gv1) (Node n a2 a2)), (pow2heapp x (find_max' n gv1) (Node n a2 a1)), (pow2heapp x (find_max' n gv1) (Node n a1 a2)), (pow2heapp x (find_max' n gv1) (Node n a1 a1))
(pow2heapp x (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp x (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp x (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp x (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp x (find_max' n gv1) (smash a2 a2)), (pow2heapp x (find_max' n gv1) (smash a2 a1)), (pow2heapp x (find_max' n gv1) (smash a1 a2)), (pow2heapp x (find_max' n gv1) (smash a1 a1)), (pow2heapp x (find_max' n gv1) Leaf), (pow2heapp x (find_max' gv0 q) a2)
(pow2heapp x (find_max' gv0 q) a1), (pow2heapp x (find_max' gv0 q) (Node x a2 a2)), (pow2heapp x (find_max' gv0 q) (Node x a2 a1)), (pow2heapp x (find_max' gv0 q) (Node x a1 a2)), (pow2heapp x (find_max' gv0 q) (Node x a1 a1)), (pow2heapp x (find_max' gv0 q) (Node n a2 a2)), (pow2heapp x (find_max' gv0 q) (Node n a2 a1)), (pow2heapp x (find_max' gv0 q) (Node n a1 a2)), (pow2heapp x (find_max' gv0 q) (Node n a1 a1)), (pow2heapp x (find_max' gv0 q) (Node gv0 a2 a2))
(pow2heapp x (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp x (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp x (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp x (find_max' gv0 q) (smash a2 a2)), (pow2heapp x (find_max' gv0 q) (smash a2 a1)), (pow2heapp x (find_max' gv0 q) (smash a1 a2)), (pow2heapp x (find_max' gv0 q) (smash a1 a1)), (pow2heapp x (find_max' gv0 q) Leaf), (pow2heapp x (find_max' gv0 gv1) a2), (pow2heapp x (find_max' gv0 gv1) a1)
(pow2heapp x (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp x (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp x (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp x (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp x (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp x (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp x (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp x (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp x (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp x (find_max' gv0 gv1) (Node gv0 a2 a1))
(pow2heapp x (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp x (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp x (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp x (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp x (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp x (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp x (find_max' gv0 gv1) Leaf), (pow2heapp x (length q) a2), (pow2heapp x (length q) a1), (pow2heapp x (length q) (Node x a2 a2))
(pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (Node gv0 a2 a2)), (pow2heapp x (length q) (Node gv0 a2 a1)), (pow2heapp x (length q) (Node gv0 a1 a2))
(pow2heapp x (length q) (Node gv0 a1 a1)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) a2), (pow2heapp x (length gv1) a1), (pow2heapp x (length gv1) (Node x a2 a2)), (pow2heapp x (length gv1) (Node x a2 a1))
(pow2heapp x (length gv1) (Node x a1 a2)), (pow2heapp x (length gv1) (Node x a1 a1)), (pow2heapp x (length gv1) (Node n a2 a2)), (pow2heapp x (length gv1) (Node n a2 a1)), (pow2heapp x (length gv1) (Node n a1 a2)), (pow2heapp x (length gv1) (Node n a1 a1)), (pow2heapp x (length gv1) (Node gv0 a2 a2)), (pow2heapp x (length gv1) (Node gv0 a2 a1)), (pow2heapp x (length gv1) (Node gv0 a1 a2)), (pow2heapp x (length gv1) (Node gv0 a1 a1))
(pow2heapp x (length gv1) (smash a2 a2)), (pow2heapp x (length gv1) (smash a2 a1)), (pow2heapp x (length gv1) (smash a1 a2)), (pow2heapp x (length gv1) (smash a1 a1)), (pow2heapp x (length gv1) Leaf), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node n a2 a2))
(pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (Node gv0 a2 a2)), (pow2heapp n x (Node gv0 a2 a1)), (pow2heapp n x (Node gv0 a1 a2)), (pow2heapp n x (Node gv0 a1 a1)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a1 a2))
(pow2heapp n x (smash a1 a1)), (pow2heapp n x Leaf), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1))
(pow2heapp n n (Node gv0 a2 a2)), (pow2heapp n n (Node gv0 a2 a1)), (pow2heapp n n (Node gv0 a1 a2)), (pow2heapp n n (Node gv0 a1 a1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n gv0 (Node x a2 a2))
(pow2heapp n gv0 (Node x a2 a1)), (pow2heapp n gv0 (Node x a1 a2)), (pow2heapp n gv0 (Node x a1 a1)), (pow2heapp n gv0 (Node n a2 a2)), (pow2heapp n gv0 (Node n a2 a1)), (pow2heapp n gv0 (Node n a1 a2)), (pow2heapp n gv0 (Node n a1 a1)), (pow2heapp n gv0 (Node gv0 a2 a2)), (pow2heapp n gv0 (Node gv0 a2 a1)), (pow2heapp n gv0 (Node gv0 a1 a2))
(pow2heapp n gv0 (Node gv0 a1 a1)), (pow2heapp n gv0 (smash a2 a2)), (pow2heapp n gv0 (smash a2 a1)), (pow2heapp n gv0 (smash a1 a2)), (pow2heapp n gv0 (smash a1 a1)), (pow2heapp n gv0 Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1))
(pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (Node gv0 a2 a2)), (pow2heapp n (find_max' x q) (Node gv0 a2 a1)), (pow2heapp n (find_max' x q) (Node gv0 a1 a2)), (pow2heapp n (find_max' x q) (Node gv0 a1 a1))
(pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' x gv1) a2), (pow2heapp n (find_max' x gv1) a1), (pow2heapp n (find_max' x gv1) (Node x a2 a2)), (pow2heapp n (find_max' x gv1) (Node x a2 a1)), (pow2heapp n (find_max' x gv1) (Node x a1 a2))
(pow2heapp n (find_max' x gv1) (Node x a1 a1)), (pow2heapp n (find_max' x gv1) (Node n a2 a2)), (pow2heapp n (find_max' x gv1) (Node n a2 a1)), (pow2heapp n (find_max' x gv1) (Node n a1 a2)), (pow2heapp n (find_max' x gv1) (Node n a1 a1)), (pow2heapp n (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp n (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp n (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp n (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp n (find_max' x gv1) (smash a2 a2))
(pow2heapp n (find_max' x gv1) (smash a2 a1)), (pow2heapp n (find_max' x gv1) (smash a1 a2)), (pow2heapp n (find_max' x gv1) (smash a1 a1)), (pow2heapp n (find_max' x gv1) Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1))
(pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node gv0 a2 a2)), (pow2heapp n (find_max' n q) (Node gv0 a2 a1)), (pow2heapp n (find_max' n q) (Node gv0 a1 a2)), (pow2heapp n (find_max' n q) (Node gv0 a1 a1)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1))
(pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (find_max' n gv1) a2), (pow2heapp n (find_max' n gv1) a1), (pow2heapp n (find_max' n gv1) (Node x a2 a2)), (pow2heapp n (find_max' n gv1) (Node x a2 a1)), (pow2heapp n (find_max' n gv1) (Node x a1 a2)), (pow2heapp n (find_max' n gv1) (Node x a1 a1)), (pow2heapp n (find_max' n gv1) (Node n a2 a2))
(pow2heapp n (find_max' n gv1) (Node n a2 a1)), (pow2heapp n (find_max' n gv1) (Node n a1 a2)), (pow2heapp n (find_max' n gv1) (Node n a1 a1)), (pow2heapp n (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp n (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp n (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp n (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp n (find_max' n gv1) (smash a2 a2)), (pow2heapp n (find_max' n gv1) (smash a2 a1)), (pow2heapp n (find_max' n gv1) (smash a1 a2))
(pow2heapp n (find_max' n gv1) (smash a1 a1)), (pow2heapp n (find_max' n gv1) Leaf), (pow2heapp n (find_max' gv0 q) a2), (pow2heapp n (find_max' gv0 q) a1), (pow2heapp n (find_max' gv0 q) (Node x a2 a2)), (pow2heapp n (find_max' gv0 q) (Node x a2 a1)), (pow2heapp n (find_max' gv0 q) (Node x a1 a2)), (pow2heapp n (find_max' gv0 q) (Node x a1 a1)), (pow2heapp n (find_max' gv0 q) (Node n a2 a2)), (pow2heapp n (find_max' gv0 q) (Node n a2 a1))
(pow2heapp n (find_max' gv0 q) (Node n a1 a2)), (pow2heapp n (find_max' gv0 q) (Node n a1 a1)), (pow2heapp n (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp n (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp n (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp n (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp n (find_max' gv0 q) (smash a2 a2)), (pow2heapp n (find_max' gv0 q) (smash a2 a1)), (pow2heapp n (find_max' gv0 q) (smash a1 a2)), (pow2heapp n (find_max' gv0 q) (smash a1 a1))
(pow2heapp n (find_max' gv0 q) Leaf), (pow2heapp n (find_max' gv0 gv1) a2), (pow2heapp n (find_max' gv0 gv1) a1), (pow2heapp n (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp n (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp n (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp n (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp n (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp n (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp n (find_max' gv0 gv1) (Node n a1 a2))
(pow2heapp n (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp n (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp n (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp n (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp n (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp n (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp n (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp n (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp n (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp n (find_max' gv0 gv1) Leaf)
(pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1))
(pow2heapp n (length q) (Node gv0 a2 a2)), (pow2heapp n (length q) (Node gv0 a2 a1)), (pow2heapp n (length q) (Node gv0 a1 a2)), (pow2heapp n (length q) (Node gv0 a1 a1)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) Leaf), (pow2heapp n (length gv1) a2)
(pow2heapp n (length gv1) a1), (pow2heapp n (length gv1) (Node x a2 a2)), (pow2heapp n (length gv1) (Node x a2 a1)), (pow2heapp n (length gv1) (Node x a1 a2)), (pow2heapp n (length gv1) (Node x a1 a1)), (pow2heapp n (length gv1) (Node n a2 a2)), (pow2heapp n (length gv1) (Node n a2 a1)), (pow2heapp n (length gv1) (Node n a1 a2)), (pow2heapp n (length gv1) (Node n a1 a1)), (pow2heapp n (length gv1) (Node gv0 a2 a2))
(pow2heapp n (length gv1) (Node gv0 a2 a1)), (pow2heapp n (length gv1) (Node gv0 a1 a2)), (pow2heapp n (length gv1) (Node gv0 a1 a1)), (pow2heapp n (length gv1) (smash a2 a2)), (pow2heapp n (length gv1) (smash a2 a1)), (pow2heapp n (length gv1) (smash a1 a2)), (pow2heapp n (length gv1) (smash a1 a1)), (pow2heapp n (length gv1) Leaf), (pow2heapp gv0 x (Node x a2 a2)), (pow2heapp gv0 x (Node x a2 a1))
(pow2heapp gv0 x (Node x a1 a2)), (pow2heapp gv0 x (Node x a1 a1)), (pow2heapp gv0 x (Node n a2 a2)), (pow2heapp gv0 x (Node n a2 a1)), (pow2heapp gv0 x (Node n a1 a2)), (pow2heapp gv0 x (Node n a1 a1)), (pow2heapp gv0 x (Node gv0 a2 a2)), (pow2heapp gv0 x (Node gv0 a2 a1)), (pow2heapp gv0 x (Node gv0 a1 a2)), (pow2heapp gv0 x (Node gv0 a1 a1))
(pow2heapp gv0 x (smash a2 a2)), (pow2heapp gv0 x (smash a2 a1)), (pow2heapp gv0 x (smash a1 a2)), (pow2heapp gv0 x (smash a1 a1)), (pow2heapp gv0 x Leaf), (pow2heapp gv0 n (Node x a2 a2)), (pow2heapp gv0 n (Node x a2 a1)), (pow2heapp gv0 n (Node x a1 a2)), (pow2heapp gv0 n (Node x a1 a1)), (pow2heapp gv0 n (Node n a2 a2))
(pow2heapp gv0 n (Node n a2 a1)), (pow2heapp gv0 n (Node n a1 a2)), (pow2heapp gv0 n (Node n a1 a1)), (pow2heapp gv0 n (Node gv0 a2 a2)), (pow2heapp gv0 n (Node gv0 a2 a1)), (pow2heapp gv0 n (Node gv0 a1 a2)), (pow2heapp gv0 n (Node gv0 a1 a1)), (pow2heapp gv0 n (smash a2 a2)), (pow2heapp gv0 n (smash a2 a1)), (pow2heapp gv0 n (smash a1 a2))
(pow2heapp gv0 n (smash a1 a1)), (pow2heapp gv0 n Leaf), (pow2heapp gv0 gv0 (Node x a2 a2)), (pow2heapp gv0 gv0 (Node x a2 a1)), (pow2heapp gv0 gv0 (Node x a1 a2)), (pow2heapp gv0 gv0 (Node x a1 a1)), (pow2heapp gv0 gv0 (Node n a2 a2)), (pow2heapp gv0 gv0 (Node n a2 a1)), (pow2heapp gv0 gv0 (Node n a1 a2)), (pow2heapp gv0 gv0 (Node n a1 a1))
(pow2heapp gv0 gv0 (Node gv0 a2 a2)), (pow2heapp gv0 gv0 (Node gv0 a2 a1)), (pow2heapp gv0 gv0 (Node gv0 a1 a2)), (pow2heapp gv0 gv0 (Node gv0 a1 a1)), (pow2heapp gv0 gv0 (smash a2 a2)), (pow2heapp gv0 gv0 (smash a2 a1)), (pow2heapp gv0 gv0 (smash a1 a2)), (pow2heapp gv0 gv0 (smash a1 a1)), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (find_max' x q) a2)
(pow2heapp gv0 (find_max' x q) a1), (pow2heapp gv0 (find_max' x q) (Node x a2 a2)), (pow2heapp gv0 (find_max' x q) (Node x a2 a1)), (pow2heapp gv0 (find_max' x q) (Node x a1 a2)), (pow2heapp gv0 (find_max' x q) (Node x a1 a1)), (pow2heapp gv0 (find_max' x q) (Node n a2 a2)), (pow2heapp gv0 (find_max' x q) (Node n a2 a1)), (pow2heapp gv0 (find_max' x q) (Node n a1 a2)), (pow2heapp gv0 (find_max' x q) (Node n a1 a1)), (pow2heapp gv0 (find_max' x q) (Node gv0 a2 a2))
(pow2heapp gv0 (find_max' x q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' x q) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' x q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' x q) (smash a2 a2)), (pow2heapp gv0 (find_max' x q) (smash a2 a1)), (pow2heapp gv0 (find_max' x q) (smash a1 a2)), (pow2heapp gv0 (find_max' x q) (smash a1 a1)), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' x gv1) a2), (pow2heapp gv0 (find_max' x gv1) a1)
(pow2heapp gv0 (find_max' x gv1) (Node x a2 a2)), (pow2heapp gv0 (find_max' x gv1) (Node x a2 a1)), (pow2heapp gv0 (find_max' x gv1) (Node x a1 a2)), (pow2heapp gv0 (find_max' x gv1) (Node x a1 a1)), (pow2heapp gv0 (find_max' x gv1) (Node n a2 a2)), (pow2heapp gv0 (find_max' x gv1) (Node n a2 a1)), (pow2heapp gv0 (find_max' x gv1) (Node n a1 a2)), (pow2heapp gv0 (find_max' x gv1) (Node n a1 a1)), (pow2heapp gv0 (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' x gv1) (Node gv0 a2 a1))
(pow2heapp gv0 (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' x gv1) (smash a2 a2)), (pow2heapp gv0 (find_max' x gv1) (smash a2 a1)), (pow2heapp gv0 (find_max' x gv1) (smash a1 a2)), (pow2heapp gv0 (find_max' x gv1) (smash a1 a1)), (pow2heapp gv0 (find_max' x gv1) Leaf), (pow2heapp gv0 (find_max' n q) a2), (pow2heapp gv0 (find_max' n q) a1), (pow2heapp gv0 (find_max' n q) (Node x a2 a2))
(pow2heapp gv0 (find_max' n q) (Node x a2 a1)), (pow2heapp gv0 (find_max' n q) (Node x a1 a2)), (pow2heapp gv0 (find_max' n q) (Node x a1 a1)), (pow2heapp gv0 (find_max' n q) (Node n a2 a2)), (pow2heapp gv0 (find_max' n q) (Node n a2 a1)), (pow2heapp gv0 (find_max' n q) (Node n a1 a2)), (pow2heapp gv0 (find_max' n q) (Node n a1 a1)), (pow2heapp gv0 (find_max' n q) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n q) (Node gv0 a1 a2))
(pow2heapp gv0 (find_max' n q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n q) (smash a2 a2)), (pow2heapp gv0 (find_max' n q) (smash a2 a1)), (pow2heapp gv0 (find_max' n q) (smash a1 a2)), (pow2heapp gv0 (find_max' n q) (smash a1 a1)), (pow2heapp gv0 (find_max' n q) Leaf), (pow2heapp gv0 (find_max' n gv1) a2), (pow2heapp gv0 (find_max' n gv1) a1), (pow2heapp gv0 (find_max' n gv1) (Node x a2 a2)), (pow2heapp gv0 (find_max' n gv1) (Node x a2 a1))
(pow2heapp gv0 (find_max' n gv1) (Node x a1 a2)), (pow2heapp gv0 (find_max' n gv1) (Node x a1 a1)), (pow2heapp gv0 (find_max' n gv1) (Node n a2 a2)), (pow2heapp gv0 (find_max' n gv1) (Node n a2 a1)), (pow2heapp gv0 (find_max' n gv1) (Node n a1 a2)), (pow2heapp gv0 (find_max' n gv1) (Node n a1 a1)), (pow2heapp gv0 (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' n gv1) (Node gv0 a1 a1))
(pow2heapp gv0 (find_max' n gv1) (smash a2 a2)), (pow2heapp gv0 (find_max' n gv1) (smash a2 a1)), (pow2heapp gv0 (find_max' n gv1) (smash a1 a2)), (pow2heapp gv0 (find_max' n gv1) (smash a1 a1)), (pow2heapp gv0 (find_max' n gv1) Leaf), (pow2heapp gv0 (find_max' gv0 q) a2), (pow2heapp gv0 (find_max' gv0 q) a1), (pow2heapp gv0 (find_max' gv0 q) (Node x a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node x a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node x a1 a2))
(pow2heapp gv0 (find_max' gv0 q) (Node x a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node n a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node n a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node n a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node n a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' gv0 q) (smash a2 a2))
(pow2heapp gv0 (find_max' gv0 q) (smash a2 a1)), (pow2heapp gv0 (find_max' gv0 q) (smash a1 a2)), (pow2heapp gv0 (find_max' gv0 q) (smash a1 a1)), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (find_max' gv0 gv1) a2), (pow2heapp gv0 (find_max' gv0 gv1) a1), (pow2heapp gv0 (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp gv0 (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node x a1 a1))
(pow2heapp gv0 (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp gv0 (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp gv0 (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (smash a2 a1))
(pow2heapp gv0 (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp gv0 (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp gv0 (find_max' gv0 gv1) Leaf), (pow2heapp gv0 (length q) a2), (pow2heapp gv0 (length q) a1), (pow2heapp gv0 (length q) (Node x a2 a2)), (pow2heapp gv0 (length q) (Node x a2 a1)), (pow2heapp gv0 (length q) (Node x a1 a2)), (pow2heapp gv0 (length q) (Node x a1 a1)), (pow2heapp gv0 (length q) (Node n a2 a2))
(pow2heapp gv0 (length q) (Node n a2 a1)), (pow2heapp gv0 (length q) (Node n a1 a2)), (pow2heapp gv0 (length q) (Node n a1 a1)), (pow2heapp gv0 (length q) (Node gv0 a2 a2)), (pow2heapp gv0 (length q) (Node gv0 a2 a1)), (pow2heapp gv0 (length q) (Node gv0 a1 a2)), (pow2heapp gv0 (length q) (Node gv0 a1 a1)), (pow2heapp gv0 (length q) (smash a2 a2)), (pow2heapp gv0 (length q) (smash a2 a1)), (pow2heapp gv0 (length q) (smash a1 a2))
(pow2heapp gv0 (length q) (smash a1 a1)), (pow2heapp gv0 (length q) Leaf), (pow2heapp gv0 (length gv1) a2), (pow2heapp gv0 (length gv1) a1), (pow2heapp gv0 (length gv1) (Node x a2 a2)), (pow2heapp gv0 (length gv1) (Node x a2 a1)), (pow2heapp gv0 (length gv1) (Node x a1 a2)), (pow2heapp gv0 (length gv1) (Node x a1 a1)), (pow2heapp gv0 (length gv1) (Node n a2 a2)), (pow2heapp gv0 (length gv1) (Node n a2 a1))
(pow2heapp gv0 (length gv1) (Node n a1 a2)), (pow2heapp gv0 (length gv1) (Node n a1 a1)), (pow2heapp gv0 (length gv1) (Node gv0 a2 a2)), (pow2heapp gv0 (length gv1) (Node gv0 a2 a1)), (pow2heapp gv0 (length gv1) (Node gv0 a1 a2)), (pow2heapp gv0 (length gv1) (Node gv0 a1 a1)), (pow2heapp gv0 (length gv1) (smash a2 a2)), (pow2heapp gv0 (length gv1) (smash a2 a1)), (pow2heapp gv0 (length gv1) (smash a1 a2)), (pow2heapp gv0 (length gv1) (smash a1 a1))
(pow2heapp gv0 (length gv1) Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a1 a2))
(pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node gv0 a2 a2)), (pow2heapp (find_max' x q) x (Node gv0 a2 a1)), (pow2heapp (find_max' x q) x (Node gv0 a1 a2)), (pow2heapp (find_max' x q) x (Node gv0 a1 a1)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1))
(pow2heapp (find_max' x q) n (Node gv0 a2 a2)), (pow2heapp (find_max' x q) n (Node gv0 a2 a1)), (pow2heapp (find_max' x q) n (Node gv0 a1 a2)), (pow2heapp (find_max' x q) n (Node gv0 a1 a1)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) gv0 a2)
(pow2heapp (find_max' x q) gv0 a1), (pow2heapp (find_max' x q) gv0 (Node x a2 a2)), (pow2heapp (find_max' x q) gv0 (Node x a2 a1)), (pow2heapp (find_max' x q) gv0 (Node x a1 a2)), (pow2heapp (find_max' x q) gv0 (Node x a1 a1)), (pow2heapp (find_max' x q) gv0 (Node n a2 a2)), (pow2heapp (find_max' x q) gv0 (Node n a2 a1)), (pow2heapp (find_max' x q) gv0 (Node n a1 a2)), (pow2heapp (find_max' x q) gv0 (Node n a1 a1)), (pow2heapp (find_max' x q) gv0 (Node gv0 a2 a2))
(pow2heapp (find_max' x q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' x q) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' x q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' x q) gv0 (smash a2 a2)), (pow2heapp (find_max' x q) gv0 (smash a2 a1)), (pow2heapp (find_max' x q) gv0 (smash a1 a2)), (pow2heapp (find_max' x q) gv0 (smash a1 a1)), (pow2heapp (find_max' x q) gv0 Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1)
(pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a2 a1))
(pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv1) a2), (pow2heapp (find_max' x q) (find_max' x gv1) a1), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a2))
(pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node gv0 a1 a2))
(pow2heapp (find_max' x q) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node gv0 a1 a1))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (find_max' n gv1) a2), (pow2heapp (find_max' x q) (find_max' n gv1) a1), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a2))
(pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a2))
(pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 q) a2), (pow2heapp (find_max' x q) (find_max' gv0 q) a1), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x a1 a1))
(pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a2 a1))
(pow2heapp (find_max' x q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 gv1) a2), (pow2heapp (find_max' x q) (find_max' gv0 gv1) a1), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node n a2 a2))
(pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) (smash a1 a2))
(pow2heapp (find_max' x q) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' gv0 gv1) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1))
(pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1))
(pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv1) a2), (pow2heapp (find_max' x q) (length gv1) a1), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 a2))
(pow2heapp (find_max' x q) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (length gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (length gv1) Leaf)
(pow2heapp (find_max' x gv1) x a2), (pow2heapp (find_max' x gv1) x a1), (pow2heapp (find_max' x gv1) x (Node x a2 a2)), (pow2heapp (find_max' x gv1) x (Node x a2 a1)), (pow2heapp (find_max' x gv1) x (Node x a1 a2)), (pow2heapp (find_max' x gv1) x (Node x a1 a1)), (pow2heapp (find_max' x gv1) x (Node n a2 a2)), (pow2heapp (find_max' x gv1) x (Node n a2 a1)), (pow2heapp (find_max' x gv1) x (Node n a1 a2)), (pow2heapp (find_max' x gv1) x (Node n a1 a1))
(pow2heapp (find_max' x gv1) x (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) x (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) x (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) x (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) x (smash a2 a2)), (pow2heapp (find_max' x gv1) x (smash a2 a1)), (pow2heapp (find_max' x gv1) x (smash a1 a2)), (pow2heapp (find_max' x gv1) x (smash a1 a1)), (pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) n a2)
(pow2heapp (find_max' x gv1) n a1), (pow2heapp (find_max' x gv1) n (Node x a2 a2)), (pow2heapp (find_max' x gv1) n (Node x a2 a1)), (pow2heapp (find_max' x gv1) n (Node x a1 a2)), (pow2heapp (find_max' x gv1) n (Node x a1 a1)), (pow2heapp (find_max' x gv1) n (Node n a2 a2)), (pow2heapp (find_max' x gv1) n (Node n a2 a1)), (pow2heapp (find_max' x gv1) n (Node n a1 a2)), (pow2heapp (find_max' x gv1) n (Node n a1 a1)), (pow2heapp (find_max' x gv1) n (Node gv0 a2 a2))
(pow2heapp (find_max' x gv1) n (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) n (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) n (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) n (smash a2 a2)), (pow2heapp (find_max' x gv1) n (smash a2 a1)), (pow2heapp (find_max' x gv1) n (smash a1 a2)), (pow2heapp (find_max' x gv1) n (smash a1 a1)), (pow2heapp (find_max' x gv1) n Leaf), (pow2heapp (find_max' x gv1) gv0 a2), (pow2heapp (find_max' x gv1) gv0 a1)
(pow2heapp (find_max' x gv1) gv0 (Node x a2 a2)), (pow2heapp (find_max' x gv1) gv0 (Node x a2 a1)), (pow2heapp (find_max' x gv1) gv0 (Node x a1 a2)), (pow2heapp (find_max' x gv1) gv0 (Node x a1 a1)), (pow2heapp (find_max' x gv1) gv0 (Node n a2 a2)), (pow2heapp (find_max' x gv1) gv0 (Node n a2 a1)), (pow2heapp (find_max' x gv1) gv0 (Node n a1 a2)), (pow2heapp (find_max' x gv1) gv0 (Node n a1 a1)), (pow2heapp (find_max' x gv1) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) gv0 (Node gv0 a2 a1))
(pow2heapp (find_max' x gv1) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) gv0 (smash a2 a2)), (pow2heapp (find_max' x gv1) gv0 (smash a2 a1)), (pow2heapp (find_max' x gv1) gv0 (smash a1 a2)), (pow2heapp (find_max' x gv1) gv0 (smash a1 a1)), (pow2heapp (find_max' x gv1) gv0 Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) a2), (pow2heapp (find_max' x gv1) (find_max' x q) a1), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a2))
(pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node gv0 a1 a2))
(pow2heapp (find_max' x gv1) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) a2), (pow2heapp (find_max' x gv1) (find_max' x gv1) a1), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a1))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node gv0 a1 a1))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (find_max' n q) a2), (pow2heapp (find_max' x gv1) (find_max' n q) a1), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a2))
(pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) Leaf), (pow2heapp (find_max' x gv1) (find_max' n gv1) a2), (pow2heapp (find_max' x gv1) (find_max' n gv1) a1), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a1))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a1))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' x gv1) (find_max' gv0 q) a2), (pow2heapp (find_max' x gv1) (find_max' gv0 q) a1), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node n a2 a2))
(pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) (smash a1 a2))
(pow2heapp (find_max' x gv1) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) a2), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) a1), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node n a2 a1))
(pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' gv0 gv1) (smash a1 a1))
(pow2heapp (find_max' x gv1) (find_max' gv0 gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) a2), (pow2heapp (find_max' x gv1) (length q) a1), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 a2))
(pow2heapp (find_max' x gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length q) Leaf)
(pow2heapp (find_max' x gv1) (length gv1) a2), (pow2heapp (find_max' x gv1) (length gv1) a1), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a1))
(pow2heapp (find_max' x gv1) (length gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (find_max' n q) x a2)
(pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (Node gv0 a2 a2))
(pow2heapp (find_max' n q) x (Node gv0 a2 a1)), (pow2heapp (find_max' n q) x (Node gv0 a1 a2)), (pow2heapp (find_max' n q) x (Node gv0 a1 a1)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1)
(pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node gv0 a2 a2)), (pow2heapp (find_max' n q) n (Node gv0 a2 a1))
(pow2heapp (find_max' n q) n (Node gv0 a1 a2)), (pow2heapp (find_max' n q) n (Node gv0 a1 a1)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) gv0 a2), (pow2heapp (find_max' n q) gv0 a1), (pow2heapp (find_max' n q) gv0 (Node x a2 a2))
(pow2heapp (find_max' n q) gv0 (Node x a2 a1)), (pow2heapp (find_max' n q) gv0 (Node x a1 a2)), (pow2heapp (find_max' n q) gv0 (Node x a1 a1)), (pow2heapp (find_max' n q) gv0 (Node n a2 a2)), (pow2heapp (find_max' n q) gv0 (Node n a2 a1)), (pow2heapp (find_max' n q) gv0 (Node n a1 a2)), (pow2heapp (find_max' n q) gv0 (Node n a1 a1)), (pow2heapp (find_max' n q) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n q) gv0 (Node gv0 a1 a2))
(pow2heapp (find_max' n q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n q) gv0 (smash a2 a2)), (pow2heapp (find_max' n q) gv0 (smash a2 a1)), (pow2heapp (find_max' n q) gv0 (smash a1 a2)), (pow2heapp (find_max' n q) gv0 (smash a1 a1)), (pow2heapp (find_max' n q) gv0 Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node gv0 a1 a1))
(pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (find_max' x gv1) a2), (pow2heapp (find_max' n q) (find_max' x gv1) a1), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a2))
(pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a2))
(pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1))
(pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1))
(pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' n gv1) a2), (pow2heapp (find_max' n q) (find_max' n gv1) a1), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a2))
(pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) Leaf), (pow2heapp (find_max' n q) (find_max' gv0 q) a2), (pow2heapp (find_max' n q) (find_max' gv0 q) a1), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a2 a1))
(pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 q) (smash a1 a1))
(pow2heapp (find_max' n q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' n q) (find_max' gv0 gv1) a2), (pow2heapp (find_max' n q) (find_max' gv0 gv1) a1), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node n a1 a2))
(pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' gv0 gv1) Leaf)
(pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1))
(pow2heapp (find_max' n q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' n q) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' n q) (length gv1) a2)
(pow2heapp (find_max' n q) (length gv1) a1), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (length gv1) (Node gv0 a2 a2))
(pow2heapp (find_max' n q) (length gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (length gv1) Leaf), (pow2heapp (find_max' n gv1) x a2), (pow2heapp (find_max' n gv1) x a1)
(pow2heapp (find_max' n gv1) x (Node x a2 a2)), (pow2heapp (find_max' n gv1) x (Node x a2 a1)), (pow2heapp (find_max' n gv1) x (Node x a1 a2)), (pow2heapp (find_max' n gv1) x (Node x a1 a1)), (pow2heapp (find_max' n gv1) x (Node n a2 a2)), (pow2heapp (find_max' n gv1) x (Node n a2 a1)), (pow2heapp (find_max' n gv1) x (Node n a1 a2)), (pow2heapp (find_max' n gv1) x (Node n a1 a1)), (pow2heapp (find_max' n gv1) x (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) x (Node gv0 a2 a1))
(pow2heapp (find_max' n gv1) x (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) x (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) x (smash a2 a2)), (pow2heapp (find_max' n gv1) x (smash a2 a1)), (pow2heapp (find_max' n gv1) x (smash a1 a2)), (pow2heapp (find_max' n gv1) x (smash a1 a1)), (pow2heapp (find_max' n gv1) x Leaf), (pow2heapp (find_max' n gv1) n a2), (pow2heapp (find_max' n gv1) n a1), (pow2heapp (find_max' n gv1) n (Node x a2 a2))
(pow2heapp (find_max' n gv1) n (Node x a2 a1)), (pow2heapp (find_max' n gv1) n (Node x a1 a2)), (pow2heapp (find_max' n gv1) n (Node x a1 a1)), (pow2heapp (find_max' n gv1) n (Node n a2 a2)), (pow2heapp (find_max' n gv1) n (Node n a2 a1)), (pow2heapp (find_max' n gv1) n (Node n a1 a2)), (pow2heapp (find_max' n gv1) n (Node n a1 a1)), (pow2heapp (find_max' n gv1) n (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) n (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) n (Node gv0 a1 a2))
(pow2heapp (find_max' n gv1) n (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) n (smash a2 a2)), (pow2heapp (find_max' n gv1) n (smash a2 a1)), (pow2heapp (find_max' n gv1) n (smash a1 a2)), (pow2heapp (find_max' n gv1) n (smash a1 a1)), (pow2heapp (find_max' n gv1) n Leaf), (pow2heapp (find_max' n gv1) gv0 a2), (pow2heapp (find_max' n gv1) gv0 a1), (pow2heapp (find_max' n gv1) gv0 (Node x a2 a2)), (pow2heapp (find_max' n gv1) gv0 (Node x a2 a1))
(pow2heapp (find_max' n gv1) gv0 (Node x a1 a2)), (pow2heapp (find_max' n gv1) gv0 (Node x a1 a1)), (pow2heapp (find_max' n gv1) gv0 (Node n a2 a2)), (pow2heapp (find_max' n gv1) gv0 (Node n a2 a1)), (pow2heapp (find_max' n gv1) gv0 (Node n a1 a2)), (pow2heapp (find_max' n gv1) gv0 (Node n a1 a1)), (pow2heapp (find_max' n gv1) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) gv0 (Node gv0 a1 a1))
(pow2heapp (find_max' n gv1) gv0 (smash a2 a2)), (pow2heapp (find_max' n gv1) gv0 (smash a2 a1)), (pow2heapp (find_max' n gv1) gv0 (smash a1 a2)), (pow2heapp (find_max' n gv1) gv0 (smash a1 a1)), (pow2heapp (find_max' n gv1) gv0 Leaf), (pow2heapp (find_max' n gv1) (find_max' x q) a2), (pow2heapp (find_max' n gv1) (find_max' x q) a1), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a2))
(pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) Leaf), (pow2heapp (find_max' n gv1) (find_max' x gv1) a2), (pow2heapp (find_max' n gv1) (find_max' x gv1) a1), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a1))
(pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a1))
(pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' n gv1) (find_max' n q) a2), (pow2heapp (find_max' n gv1) (find_max' n q) a1), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a2))
(pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) Leaf), (pow2heapp (find_max' n gv1) (find_max' n gv1) a2), (pow2heapp (find_max' n gv1) (find_max' n gv1) a1), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a1))
(pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a1))
(pow2heapp (find_max' n gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' n gv1) (find_max' gv0 q) a2), (pow2heapp (find_max' n gv1) (find_max' gv0 q) a1), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node n a1 a2))
(pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 q) Leaf)
(pow2heapp (find_max' n gv1) (find_max' gv0 gv1) a2), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) a1), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node n a1 a1))
(pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' gv0 gv1) Leaf), (pow2heapp (find_max' n gv1) (length q) a2)
(pow2heapp (find_max' n gv1) (length q) a1), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (length q) (Node gv0 a2 a2))
(pow2heapp (find_max' n gv1) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length q) Leaf), (pow2heapp (find_max' n gv1) (length gv1) a2), (pow2heapp (find_max' n gv1) (length gv1) a1)
(pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node gv0 a2 a1))
(pow2heapp (find_max' n gv1) (length gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) Leaf), (pow2heapp (find_max' gv0 q) x a2), (pow2heapp (find_max' gv0 q) x a1), (pow2heapp (find_max' gv0 q) x (Node x a2 a2))
(pow2heapp (find_max' gv0 q) x (Node x a2 a1)), (pow2heapp (find_max' gv0 q) x (Node x a1 a2)), (pow2heapp (find_max' gv0 q) x (Node x a1 a1)), (pow2heapp (find_max' gv0 q) x (Node n a2 a2)), (pow2heapp (find_max' gv0 q) x (Node n a2 a1)), (pow2heapp (find_max' gv0 q) x (Node n a1 a2)), (pow2heapp (find_max' gv0 q) x (Node n a1 a1)), (pow2heapp (find_max' gv0 q) x (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) x (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) x (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 q) x (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) x (smash a2 a2)), (pow2heapp (find_max' gv0 q) x (smash a2 a1)), (pow2heapp (find_max' gv0 q) x (smash a1 a2)), (pow2heapp (find_max' gv0 q) x (smash a1 a1)), (pow2heapp (find_max' gv0 q) x Leaf), (pow2heapp (find_max' gv0 q) n a2), (pow2heapp (find_max' gv0 q) n a1), (pow2heapp (find_max' gv0 q) n (Node x a2 a2)), (pow2heapp (find_max' gv0 q) n (Node x a2 a1))
(pow2heapp (find_max' gv0 q) n (Node x a1 a2)), (pow2heapp (find_max' gv0 q) n (Node x a1 a1)), (pow2heapp (find_max' gv0 q) n (Node n a2 a2)), (pow2heapp (find_max' gv0 q) n (Node n a2 a1)), (pow2heapp (find_max' gv0 q) n (Node n a1 a2)), (pow2heapp (find_max' gv0 q) n (Node n a1 a1)), (pow2heapp (find_max' gv0 q) n (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) n (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) n (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) n (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 q) n (smash a2 a2)), (pow2heapp (find_max' gv0 q) n (smash a2 a1)), (pow2heapp (find_max' gv0 q) n (smash a1 a2)), (pow2heapp (find_max' gv0 q) n (smash a1 a1)), (pow2heapp (find_max' gv0 q) n Leaf), (pow2heapp (find_max' gv0 q) gv0 a2), (pow2heapp (find_max' gv0 q) gv0 a1), (pow2heapp (find_max' gv0 q) gv0 (Node x a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node x a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node x a1 a2))
(pow2heapp (find_max' gv0 q) gv0 (Node x a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node n a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node n a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node n a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node n a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) gv0 (smash a2 a2))
(pow2heapp (find_max' gv0 q) gv0 (smash a2 a1)), (pow2heapp (find_max' gv0 q) gv0 (smash a1 a2)), (pow2heapp (find_max' gv0 q) gv0 (smash a1 a1)), (pow2heapp (find_max' gv0 q) gv0 Leaf), (pow2heapp (find_max' gv0 q) (find_max' x q) a2), (pow2heapp (find_max' gv0 q) (find_max' x q) a1), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a2 a1))
(pow2heapp (find_max' gv0 q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' x gv1) a2), (pow2heapp (find_max' gv0 q) (find_max' x gv1) a1), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node n a2 a2))
(pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) (smash a1 a2))
(pow2heapp (find_max' gv0 q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' x gv1) Leaf), (pow2heapp (find_max' gv0 q) (find_max' n q) a2), (pow2heapp (find_max' gv0 q) (find_max' n q) a1), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a2 a1))
(pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n q) (smash a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' n q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' n gv1) a2), (pow2heapp (find_max' gv0 q) (find_max' n gv1) a1), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node n a1 a2))
(pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' n gv1) Leaf)
(pow2heapp (find_max' gv0 q) (find_max' gv0 q) a2), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) a1), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node n a1 a1))
(pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) a2)
(pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) a1), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node gv0 a2 a2))
(pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (find_max' gv0 gv1) Leaf), (pow2heapp (find_max' gv0 q) (length q) a2), (pow2heapp (find_max' gv0 q) (length q) a1)
(pow2heapp (find_max' gv0 q) (length q) (Node x a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a2 a1))
(pow2heapp (find_max' gv0 q) (length q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (length q) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (length q) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (length q) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (length q) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (length q) Leaf), (pow2heapp (find_max' gv0 q) (length gv1) a2), (pow2heapp (find_max' gv0 q) (length gv1) a1), (pow2heapp (find_max' gv0 q) (length gv1) (Node x a2 a2))
(pow2heapp (find_max' gv0 q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 q) (length gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 q) (length gv1) Leaf), (pow2heapp (find_max' gv0 gv1) x a2), (pow2heapp (find_max' gv0 gv1) x a1), (pow2heapp (find_max' gv0 gv1) x (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) x (Node x a2 a1))
(pow2heapp (find_max' gv0 gv1) x (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) x (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) x (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) x (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) x (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) x (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) x (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) x (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) x (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) x (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 gv1) x (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) x (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) x (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) x (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) x Leaf), (pow2heapp (find_max' gv0 gv1) n a2), (pow2heapp (find_max' gv0 gv1) n a1), (pow2heapp (find_max' gv0 gv1) n (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) n (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) n (Node x a1 a2))
(pow2heapp (find_max' gv0 gv1) n (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) n (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) n (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) n (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) n (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) n (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) n (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) n (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) n (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) n (smash a2 a2))
(pow2heapp (find_max' gv0 gv1) n (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) n (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) n (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) n Leaf), (pow2heapp (find_max' gv0 gv1) gv0 a2), (pow2heapp (find_max' gv0 gv1) gv0 a1), (pow2heapp (find_max' gv0 gv1) gv0 (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) gv0 (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node x a1 a1))
(pow2heapp (find_max' gv0 gv1) gv0 (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) gv0 (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) gv0 (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (smash a2 a1))
(pow2heapp (find_max' gv0 gv1) gv0 (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) gv0 (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) gv0 Leaf), (pow2heapp (find_max' gv0 gv1) (find_max' x q) a2), (pow2heapp (find_max' gv0 gv1) (find_max' x q) a1), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node n a2 a2))
(pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' gv0 gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) a2), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) a1), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node n a2 a1))
(pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' x gv1) (smash a1 a1))
(pow2heapp (find_max' gv0 gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' gv0 gv1) (find_max' n q) a2), (pow2heapp (find_max' gv0 gv1) (find_max' n q) a1), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node n a1 a2))
(pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n q) Leaf)
(pow2heapp (find_max' gv0 gv1) (find_max' n gv1) a2), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) a1), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) a2)
(pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) a1), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node gv0 a2 a2))
(pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) a2), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) a1)
(pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node gv0 a2 a1))
(pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (find_max' gv0 gv1) Leaf), (pow2heapp (find_max' gv0 gv1) (length q) a2), (pow2heapp (find_max' gv0 gv1) (length q) a1), (pow2heapp (find_max' gv0 gv1) (length q) (Node x a2 a2))
(pow2heapp (find_max' gv0 gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 gv1) (length q) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (length q) Leaf), (pow2heapp (find_max' gv0 gv1) (length gv1) a2), (pow2heapp (find_max' gv0 gv1) (length gv1) a1), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node x a2 a1))
(pow2heapp (find_max' gv0 gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (Node gv0 a1 a1))
(pow2heapp (find_max' gv0 gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' gv0 gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' gv0 gv1) (length gv1) Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a1 a2))
(pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (Node gv0 a2 a2)), (pow2heapp (length q) x (Node gv0 a2 a1)), (pow2heapp (length q) x (Node gv0 a1 a2)), (pow2heapp (length q) x (Node gv0 a1 a1)), (pow2heapp (length q) x (smash a2 a2))
(pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1))
(pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node gv0 a2 a2)), (pow2heapp (length q) n (Node gv0 a2 a1)), (pow2heapp (length q) n (Node gv0 a1 a2)), (pow2heapp (length q) n (Node gv0 a1 a1)), (pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1))
(pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) gv0 a2), (pow2heapp (length q) gv0 a1), (pow2heapp (length q) gv0 (Node x a2 a2)), (pow2heapp (length q) gv0 (Node x a2 a1)), (pow2heapp (length q) gv0 (Node x a1 a2)), (pow2heapp (length q) gv0 (Node x a1 a1)), (pow2heapp (length q) gv0 (Node n a2 a2))
(pow2heapp (length q) gv0 (Node n a2 a1)), (pow2heapp (length q) gv0 (Node n a1 a2)), (pow2heapp (length q) gv0 (Node n a1 a1)), (pow2heapp (length q) gv0 (Node gv0 a2 a2)), (pow2heapp (length q) gv0 (Node gv0 a2 a1)), (pow2heapp (length q) gv0 (Node gv0 a1 a2)), (pow2heapp (length q) gv0 (Node gv0 a1 a1)), (pow2heapp (length q) gv0 (smash a2 a2)), (pow2heapp (length q) gv0 (smash a2 a1)), (pow2heapp (length q) gv0 (smash a1 a2))
(pow2heapp (length q) gv0 (smash a1 a1)), (pow2heapp (length q) gv0 Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1))
(pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1))
(pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv1) a2), (pow2heapp (length q) (find_max' x gv1) a1), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 a2))
(pow2heapp (length q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (length q) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv1) Leaf)
(pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1))
(pow2heapp (length q) (find_max' n q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' n gv1) a2)
(pow2heapp (length q) (find_max' n gv1) a1), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (length q) (find_max' n gv1) (Node gv0 a2 a2))
(pow2heapp (length q) (find_max' n gv1) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv1) Leaf), (pow2heapp (length q) (find_max' gv0 q) a2), (pow2heapp (length q) (find_max' gv0 q) a1)
(pow2heapp (length q) (find_max' gv0 q) (Node x a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a2 a1))
(pow2heapp (length q) (find_max' gv0 q) (Node gv0 a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (length q) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (length q) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (length q) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (length q) (find_max' gv0 q) Leaf), (pow2heapp (length q) (find_max' gv0 gv1) a2), (pow2heapp (length q) (find_max' gv0 gv1) a1), (pow2heapp (length q) (find_max' gv0 gv1) (Node x a2 a2))
(pow2heapp (length q) (find_max' gv0 gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (Node gv0 a1 a2))
(pow2heapp (length q) (find_max' gv0 gv1) (Node gv0 a1 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' gv0 gv1) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1))
(pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node gv0 a2 a2)), (pow2heapp (length q) (length q) (Node gv0 a2 a1)), (pow2heapp (length q) (length q) (Node gv0 a1 a2)), (pow2heapp (length q) (length q) (Node gv0 a1 a1))
(pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv1) a2), (pow2heapp (length q) (length gv1) a1), (pow2heapp (length q) (length gv1) (Node x a2 a2)), (pow2heapp (length q) (length gv1) (Node x a2 a1)), (pow2heapp (length q) (length gv1) (Node x a1 a2))
(pow2heapp (length q) (length gv1) (Node x a1 a1)), (pow2heapp (length q) (length gv1) (Node n a2 a2)), (pow2heapp (length q) (length gv1) (Node n a2 a1)), (pow2heapp (length q) (length gv1) (Node n a1 a2)), (pow2heapp (length q) (length gv1) (Node n a1 a1)), (pow2heapp (length q) (length gv1) (Node gv0 a2 a2)), (pow2heapp (length q) (length gv1) (Node gv0 a2 a1)), (pow2heapp (length q) (length gv1) (Node gv0 a1 a2)), (pow2heapp (length q) (length gv1) (Node gv0 a1 a1)), (pow2heapp (length q) (length gv1) (smash a2 a2))
(pow2heapp (length q) (length gv1) (smash a2 a1)), (pow2heapp (length q) (length gv1) (smash a1 a2)), (pow2heapp (length q) (length gv1) (smash a1 a1)), (pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x a2), (pow2heapp (length gv1) x a1), (pow2heapp (length gv1) x (Node x a2 a2)), (pow2heapp (length gv1) x (Node x a2 a1)), (pow2heapp (length gv1) x (Node x a1 a2)), (pow2heapp (length gv1) x (Node x a1 a1))
(pow2heapp (length gv1) x (Node n a2 a2)), (pow2heapp (length gv1) x (Node n a2 a1)), (pow2heapp (length gv1) x (Node n a1 a2)), (pow2heapp (length gv1) x (Node n a1 a1)), (pow2heapp (length gv1) x (Node gv0 a2 a2)), (pow2heapp (length gv1) x (Node gv0 a2 a1)), (pow2heapp (length gv1) x (Node gv0 a1 a2)), (pow2heapp (length gv1) x (Node gv0 a1 a1)), (pow2heapp (length gv1) x (smash a2 a2)), (pow2heapp (length gv1) x (smash a2 a1))
(pow2heapp (length gv1) x (smash a1 a2)), (pow2heapp (length gv1) x (smash a1 a1)), (pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) n a2), (pow2heapp (length gv1) n a1), (pow2heapp (length gv1) n (Node x a2 a2)), (pow2heapp (length gv1) n (Node x a2 a1)), (pow2heapp (length gv1) n (Node x a1 a2)), (pow2heapp (length gv1) n (Node x a1 a1)), (pow2heapp (length gv1) n (Node n a2 a2))
(pow2heapp (length gv1) n (Node n a2 a1)), (pow2heapp (length gv1) n (Node n a1 a2)), (pow2heapp (length gv1) n (Node n a1 a1)), (pow2heapp (length gv1) n (Node gv0 a2 a2)), (pow2heapp (length gv1) n (Node gv0 a2 a1)), (pow2heapp (length gv1) n (Node gv0 a1 a2)), (pow2heapp (length gv1) n (Node gv0 a1 a1)), (pow2heapp (length gv1) n (smash a2 a2)), (pow2heapp (length gv1) n (smash a2 a1)), (pow2heapp (length gv1) n (smash a1 a2))
(pow2heapp (length gv1) n (smash a1 a1)), (pow2heapp (length gv1) n Leaf), (pow2heapp (length gv1) gv0 a2), (pow2heapp (length gv1) gv0 a1), (pow2heapp (length gv1) gv0 (Node x a2 a2)), (pow2heapp (length gv1) gv0 (Node x a2 a1)), (pow2heapp (length gv1) gv0 (Node x a1 a2)), (pow2heapp (length gv1) gv0 (Node x a1 a1)), (pow2heapp (length gv1) gv0 (Node n a2 a2)), (pow2heapp (length gv1) gv0 (Node n a2 a1))
(pow2heapp (length gv1) gv0 (Node n a1 a2)), (pow2heapp (length gv1) gv0 (Node n a1 a1)), (pow2heapp (length gv1) gv0 (Node gv0 a2 a2)), (pow2heapp (length gv1) gv0 (Node gv0 a2 a1)), (pow2heapp (length gv1) gv0 (Node gv0 a1 a2)), (pow2heapp (length gv1) gv0 (Node gv0 a1 a1)), (pow2heapp (length gv1) gv0 (smash a2 a2)), (pow2heapp (length gv1) gv0 (smash a2 a1)), (pow2heapp (length gv1) gv0 (smash a1 a2)), (pow2heapp (length gv1) gv0 (smash a1 a1))
(pow2heapp (length gv1) gv0 Leaf), (pow2heapp (length gv1) (find_max' x q) a2), (pow2heapp (length gv1) (find_max' x q) a1), (pow2heapp (length gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 a2))
(pow2heapp (length gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' x q) (Node gv0 a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node gv0 a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node gv0 a1 a2)), (pow2heapp (length gv1) (find_max' x q) (Node gv0 a1 a1)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x q) Leaf)
(pow2heapp (length gv1) (find_max' x gv1) a2), (pow2heapp (length gv1) (find_max' x gv1) a1), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (length gv1) (find_max' x gv1) (Node gv0 a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node gv0 a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node gv0 a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node gv0 a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (find_max' n q) a2)
(pow2heapp (length gv1) (find_max' n q) a1), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' n q) (Node gv0 a2 a2))
(pow2heapp (length gv1) (find_max' n q) (Node gv0 a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node gv0 a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node gv0 a1 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n q) Leaf), (pow2heapp (length gv1) (find_max' n gv1) a2), (pow2heapp (length gv1) (find_max' n gv1) a1)
(pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node gv0 a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node gv0 a2 a1))
(pow2heapp (length gv1) (find_max' n gv1) (Node gv0 a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node gv0 a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) Leaf), (pow2heapp (length gv1) (find_max' gv0 q) a2), (pow2heapp (length gv1) (find_max' gv0 q) a1), (pow2heapp (length gv1) (find_max' gv0 q) (Node x a2 a2))
(pow2heapp (length gv1) (find_max' gv0 q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (Node gv0 a2 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (Node gv0 a2 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (Node gv0 a1 a2))
(pow2heapp (length gv1) (find_max' gv0 q) (Node gv0 a1 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' gv0 q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' gv0 q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' gv0 q) Leaf), (pow2heapp (length gv1) (find_max' gv0 gv1) a2), (pow2heapp (length gv1) (find_max' gv0 gv1) a1), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node x a2 a1))
(pow2heapp (length gv1) (find_max' gv0 gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node gv0 a2 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node gv0 a2 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node gv0 a1 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (Node gv0 a1 a1))
(pow2heapp (length gv1) (find_max' gv0 gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' gv0 gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' gv0 gv1) Leaf), (pow2heapp (length gv1) (length q) a2), (pow2heapp (length gv1) (length q) a1), (pow2heapp (length gv1) (length q) (Node x a2 a2)), (pow2heapp (length gv1) (length q) (Node x a2 a1)), (pow2heapp (length gv1) (length q) (Node x a1 a2))
(pow2heapp (length gv1) (length q) (Node x a1 a1)), (pow2heapp (length gv1) (length q) (Node n a2 a2)), (pow2heapp (length gv1) (length q) (Node n a2 a1)), (pow2heapp (length gv1) (length q) (Node n a1 a2)), (pow2heapp (length gv1) (length q) (Node n a1 a1)), (pow2heapp (length gv1) (length q) (Node gv0 a2 a2)), (pow2heapp (length gv1) (length q) (Node gv0 a2 a1)), (pow2heapp (length gv1) (length q) (Node gv0 a1 a2)), (pow2heapp (length gv1) (length q) (Node gv0 a1 a1)), (pow2heapp (length gv1) (length q) (smash a2 a2))
(pow2heapp (length gv1) (length q) (smash a2 a1)), (pow2heapp (length gv1) (length q) (smash a1 a2)), (pow2heapp (length gv1) (length q) (smash a1 a1)), (pow2heapp (length gv1) (length q) Leaf), (pow2heapp (length gv1) (length gv1) a2), (pow2heapp (length gv1) (length gv1) a1), (pow2heapp (length gv1) (length gv1) (Node x a2 a2)), (pow2heapp (length gv1) (length gv1) (Node x a2 a1)), (pow2heapp (length gv1) (length gv1) (Node x a1 a2)), (pow2heapp (length gv1) (length gv1) (Node x a1 a1))
(pow2heapp (length gv1) (length gv1) (Node n a2 a2)), (pow2heapp (length gv1) (length gv1) (Node n a2 a1)), (pow2heapp (length gv1) (length gv1) (Node n a1 a2)), (pow2heapp (length gv1) (length gv1) (Node n a1 a1)), (pow2heapp (length gv1) (length gv1) (Node gv0 a2 a2)), (pow2heapp (length gv1) (length gv1) (Node gv0 a2 a1)), (pow2heapp (length gv1) (length gv1) (Node gv0 a1 a2)), (pow2heapp (length gv1) (length gv1) (Node gv0 a1 a1)), (pow2heapp (length gv1) (length gv1) (smash a2 a2)), (pow2heapp (length gv1) (length gv1) (smash a2 a1))
(pow2heapp (length gv1) (length gv1) (smash a1 a2)), (pow2heapp (length gv1) (length gv1) (smash a1 a1)), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (a2 :: q)), (Permutation q (a2 :: gv1)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv1)), (Permutation q (merge q q)), (Permutation q (merge q gv1)), (Permutation q (merge gv1 q))
(Permutation q (merge gv1 gv1)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q gv1 a2)), (Permutation q (join q gv1 a1)), (Permutation q (join gv1 q a2)), (Permutation q (join gv1 q a1)), (Permutation q (join gv1 gv1 a2))
(Permutation q (join gv1 gv1 a1)), (Permutation q (insert x q)), (Permutation q (insert x gv1)), (Permutation q (insert n q)), (Permutation q (insert n gv1)), (Permutation q (insert gv0 q)), (Permutation q (insert gv0 gv1)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (carry gv1 a2))
(Permutation q (carry gv1 a1)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q []), (Permutation gv1 (a2 :: q)), (Permutation gv1 (a2 :: gv1)), (Permutation gv1 (a1 :: q)), (Permutation gv1 (a1 :: gv1))
(Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (heap_delete_max a2)), (Permutation gv1 (heap_delete_max a1)), (Permutation gv1 (join q q a2)), (Permutation gv1 (join q q a1)), (Permutation gv1 (join q gv1 a2)), (Permutation gv1 (join q gv1 a1))
(Permutation gv1 (join gv1 q a2)), (Permutation gv1 (join gv1 q a1)), (Permutation gv1 (join gv1 gv1 a2)), (Permutation gv1 (join gv1 gv1 a1)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (insert n q)), (Permutation gv1 (insert n gv1)), (Permutation gv1 (insert gv0 q)), (Permutation gv1 (insert gv0 gv1))
(Permutation gv1 (carry q a2)), (Permutation gv1 (carry q a1)), (Permutation gv1 (carry gv1 a2)), (Permutation gv1 (carry gv1 a1)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) gv1), (Permutation (a2 :: q) (a2 :: gv1)), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv1)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv1)), (Permutation (a2 :: q) (merge gv1 q)), (Permutation (a2 :: q) (merge gv1 gv1)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1))
(Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (join q gv1 a2)), (Permutation (a2 :: q) (join q gv1 a1)), (Permutation (a2 :: q) (join gv1 q a2)), (Permutation (a2 :: q) (join gv1 q a1)), (Permutation (a2 :: q) (join gv1 gv1 a2)), (Permutation (a2 :: q) (join gv1 gv1 a1)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv1))
(Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert n gv1)), (Permutation (a2 :: q) (insert gv0 q)), (Permutation (a2 :: q) (insert gv0 gv1)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry gv1 a2)), (Permutation (a2 :: q) (carry gv1 a1)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv1))
(Permutation (a2 :: q) (gv1 ++ q)), (Permutation (a2 :: q) (gv1 ++ gv1)), (Permutation (a2 :: q) []), (Permutation (a2 :: gv1) q), (Permutation (a2 :: gv1) gv1), (Permutation (a2 :: gv1) (a2 :: q)), (Permutation (a2 :: gv1) (a1 :: q)), (Permutation (a2 :: gv1) (a1 :: gv1)), (Permutation (a2 :: gv1) (merge q q)), (Permutation (a2 :: gv1) (merge q gv1))
(Permutation (a2 :: gv1) (merge gv1 q)), (Permutation (a2 :: gv1) (merge gv1 gv1)), (Permutation (a2 :: gv1) (heap_delete_max a2)), (Permutation (a2 :: gv1) (heap_delete_max a1)), (Permutation (a2 :: gv1) (join q q a2)), (Permutation (a2 :: gv1) (join q q a1)), (Permutation (a2 :: gv1) (join q gv1 a2)), (Permutation (a2 :: gv1) (join q gv1 a1)), (Permutation (a2 :: gv1) (join gv1 q a2)), (Permutation (a2 :: gv1) (join gv1 q a1))
(Permutation (a2 :: gv1) (join gv1 gv1 a2)), (Permutation (a2 :: gv1) (join gv1 gv1 a1)), (Permutation (a2 :: gv1) (insert x q)), (Permutation (a2 :: gv1) (insert x gv1)), (Permutation (a2 :: gv1) (insert n q)), (Permutation (a2 :: gv1) (insert n gv1)), (Permutation (a2 :: gv1) (insert gv0 q)), (Permutation (a2 :: gv1) (insert gv0 gv1)), (Permutation (a2 :: gv1) (carry q a2)), (Permutation (a2 :: gv1) (carry q a1))
(Permutation (a2 :: gv1) (carry gv1 a2)), (Permutation (a2 :: gv1) (carry gv1 a1)), (Permutation (a2 :: gv1) (q ++ q)), (Permutation (a2 :: gv1) (q ++ gv1)), (Permutation (a2 :: gv1) (gv1 ++ q)), (Permutation (a2 :: gv1) (gv1 ++ gv1)), (Permutation (a2 :: gv1) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv1), (Permutation (a1 :: q) (a2 :: q))
(Permutation (a1 :: q) (a2 :: gv1)), (Permutation (a1 :: q) (a1 :: gv1)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv1)), (Permutation (a1 :: q) (merge gv1 q)), (Permutation (a1 :: q) (merge gv1 gv1)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1))
(Permutation (a1 :: q) (join q gv1 a2)), (Permutation (a1 :: q) (join q gv1 a1)), (Permutation (a1 :: q) (join gv1 q a2)), (Permutation (a1 :: q) (join gv1 q a1)), (Permutation (a1 :: q) (join gv1 gv1 a2)), (Permutation (a1 :: q) (join gv1 gv1 a1)), (Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert x gv1)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert n gv1))
(Permutation (a1 :: q) (insert gv0 q)), (Permutation (a1 :: q) (insert gv0 gv1)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry gv1 a2)), (Permutation (a1 :: q) (carry gv1 a1)), (Permutation (a1 :: q) (q ++ q)), (Permutation (a1 :: q) (q ++ gv1)), (Permutation (a1 :: q) (gv1 ++ q)), (Permutation (a1 :: q) (gv1 ++ gv1))
(Permutation (a1 :: q) []), (Permutation (a1 :: gv1) q), (Permutation (a1 :: gv1) gv1), (Permutation (a1 :: gv1) (a2 :: q)), (Permutation (a1 :: gv1) (a2 :: gv1)), (Permutation (a1 :: gv1) (a1 :: q)), (Permutation (a1 :: gv1) (merge q q)), (Permutation (a1 :: gv1) (merge q gv1)), (Permutation (a1 :: gv1) (merge gv1 q)), (Permutation (a1 :: gv1) (merge gv1 gv1))
(Permutation (a1 :: gv1) (heap_delete_max a2)), (Permutation (a1 :: gv1) (heap_delete_max a1)), (Permutation (a1 :: gv1) (join q q a2)), (Permutation (a1 :: gv1) (join q q a1)), (Permutation (a1 :: gv1) (join q gv1 a2)), (Permutation (a1 :: gv1) (join q gv1 a1)), (Permutation (a1 :: gv1) (join gv1 q a2)), (Permutation (a1 :: gv1) (join gv1 q a1)), (Permutation (a1 :: gv1) (join gv1 gv1 a2)), (Permutation (a1 :: gv1) (join gv1 gv1 a1))
(Permutation (a1 :: gv1) (insert x q)), (Permutation (a1 :: gv1) (insert x gv1)), (Permutation (a1 :: gv1) (insert n q)), (Permutation (a1 :: gv1) (insert n gv1)), (Permutation (a1 :: gv1) (insert gv0 q)), (Permutation (a1 :: gv1) (insert gv0 gv1)), (Permutation (a1 :: gv1) (carry q a2)), (Permutation (a1 :: gv1) (carry q a1)), (Permutation (a1 :: gv1) (carry gv1 a2)), (Permutation (a1 :: gv1) (carry gv1 a1))
(Permutation (a1 :: gv1) (q ++ q)), (Permutation (a1 :: gv1) (q ++ gv1)), (Permutation (a1 :: gv1) (gv1 ++ q)), (Permutation (a1 :: gv1) (gv1 ++ gv1)), (Permutation (a1 :: gv1) []), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a2 :: gv1)), (Permutation (merge q q) (a1 :: q))
(Permutation (merge q q) (a1 :: gv1)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q gv1 a2)), (Permutation (merge q q) (join q gv1 a1))
(Permutation (merge q q) (join gv1 q a2)), (Permutation (merge q q) (join gv1 q a1)), (Permutation (merge q q) (join gv1 gv1 a2)), (Permutation (merge q q) (join gv1 gv1 a1)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv1)), (Permutation (merge q q) (insert gv0 q)), (Permutation (merge q q) (insert gv0 gv1))
(Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (carry gv1 a2)), (Permutation (merge q q) (carry gv1 a1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) []), (Permutation (merge q gv1) q)
(Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (a2 :: q)), (Permutation (merge q gv1) (a2 :: gv1)), (Permutation (merge q gv1) (a1 :: q)), (Permutation (merge q gv1) (a1 :: gv1)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (heap_delete_max a2)), (Permutation (merge q gv1) (heap_delete_max a1))
(Permutation (merge q gv1) (join q q a2)), (Permutation (merge q gv1) (join q q a1)), (Permutation (merge q gv1) (join q gv1 a2)), (Permutation (merge q gv1) (join q gv1 a1)), (Permutation (merge q gv1) (join gv1 q a2)), (Permutation (merge q gv1) (join gv1 q a1)), (Permutation (merge q gv1) (join gv1 gv1 a2)), (Permutation (merge q gv1) (join gv1 gv1 a1)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1))
(Permutation (merge q gv1) (insert n q)), (Permutation (merge q gv1) (insert n gv1)), (Permutation (merge q gv1) (insert gv0 q)), (Permutation (merge q gv1) (insert gv0 gv1)), (Permutation (merge q gv1) (carry q a2)), (Permutation (merge q gv1) (carry q a1)), (Permutation (merge q gv1) (carry gv1 a2)), (Permutation (merge q gv1) (carry gv1 a1)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1))
(Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) []), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (a2 :: q)), (Permutation (merge gv1 q) (a2 :: gv1)), (Permutation (merge gv1 q) (a1 :: q)), (Permutation (merge gv1 q) (a1 :: gv1)), (Permutation (merge gv1 q) (merge q q))
(Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (heap_delete_max a2)), (Permutation (merge gv1 q) (heap_delete_max a1)), (Permutation (merge gv1 q) (join q q a2)), (Permutation (merge gv1 q) (join q q a1)), (Permutation (merge gv1 q) (join q gv1 a2)), (Permutation (merge gv1 q) (join q gv1 a1)), (Permutation (merge gv1 q) (join gv1 q a2)), (Permutation (merge gv1 q) (join gv1 q a1))
(Permutation (merge gv1 q) (join gv1 gv1 a2)), (Permutation (merge gv1 q) (join gv1 gv1 a1)), (Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1)), (Permutation (merge gv1 q) (insert n q)), (Permutation (merge gv1 q) (insert n gv1)), (Permutation (merge gv1 q) (insert gv0 q)), (Permutation (merge gv1 q) (insert gv0 gv1)), (Permutation (merge gv1 q) (carry q a2)), (Permutation (merge gv1 q) (carry q a1))
(Permutation (merge gv1 q) (carry gv1 a2)), (Permutation (merge gv1 q) (carry gv1 a1)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q)), (Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (a2 :: q))
(Permutation (merge gv1 gv1) (a2 :: gv1)), (Permutation (merge gv1 gv1) (a1 :: q)), (Permutation (merge gv1 gv1) (a1 :: gv1)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (heap_delete_max a2)), (Permutation (merge gv1 gv1) (heap_delete_max a1)), (Permutation (merge gv1 gv1) (join q q a2)), (Permutation (merge gv1 gv1) (join q q a1))
(Permutation (merge gv1 gv1) (join q gv1 a2)), (Permutation (merge gv1 gv1) (join q gv1 a1)), (Permutation (merge gv1 gv1) (join gv1 q a2)), (Permutation (merge gv1 gv1) (join gv1 q a1)), (Permutation (merge gv1 gv1) (join gv1 gv1 a2)), (Permutation (merge gv1 gv1) (join gv1 gv1 a1)), (Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (insert n q)), (Permutation (merge gv1 gv1) (insert n gv1))
(Permutation (merge gv1 gv1) (insert gv0 q)), (Permutation (merge gv1 gv1) (insert gv0 gv1)), (Permutation (merge gv1 gv1) (carry q a2)), (Permutation (merge gv1 gv1) (carry q a1)), (Permutation (merge gv1 gv1) (carry gv1 a2)), (Permutation (merge gv1 gv1) (carry gv1 a1)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1))
(Permutation (merge gv1 gv1) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) gv1), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv1)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv1)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (merge q gv1)), (Permutation (heap_delete_max a2) (merge gv1 q))
(Permutation (heap_delete_max a2) (merge gv1 gv1)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q gv1 a2)), (Permutation (heap_delete_max a2) (join q gv1 a1)), (Permutation (heap_delete_max a2) (join gv1 q a2)), (Permutation (heap_delete_max a2) (join gv1 q a1)), (Permutation (heap_delete_max a2) (join gv1 gv1 a2)), (Permutation (heap_delete_max a2) (join gv1 gv1 a1))
(Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv1)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv1)), (Permutation (heap_delete_max a2) (insert gv0 q)), (Permutation (heap_delete_max a2) (insert gv0 gv1)), (Permutation (heap_delete_max a2) (carry q a2)), (Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry gv1 a2)), (Permutation (heap_delete_max a2) (carry gv1 a1))
(Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv1)), (Permutation (heap_delete_max a2) (gv1 ++ q)), (Permutation (heap_delete_max a2) (gv1 ++ gv1)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv1), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv1)), (Permutation (heap_delete_max a1) (a1 :: q))
(Permutation (heap_delete_max a1) (a1 :: gv1)), (Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (merge q gv1)), (Permutation (heap_delete_max a1) (merge gv1 q)), (Permutation (heap_delete_max a1) (merge gv1 gv1)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q gv1 a2)), (Permutation (heap_delete_max a1) (join q gv1 a1))
(Permutation (heap_delete_max a1) (join gv1 q a2)), (Permutation (heap_delete_max a1) (join gv1 q a1)), (Permutation (heap_delete_max a1) (join gv1 gv1 a2)), (Permutation (heap_delete_max a1) (join gv1 gv1 a1)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv1)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert n gv1)), (Permutation (heap_delete_max a1) (insert gv0 q)), (Permutation (heap_delete_max a1) (insert gv0 gv1))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry gv1 a2)), (Permutation (heap_delete_max a1) (carry gv1 a1)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv1)), (Permutation (heap_delete_max a1) (gv1 ++ q)), (Permutation (heap_delete_max a1) (gv1 ++ gv1)), (Permutation (heap_delete_max a1) []), (Permutation (join q q a2) q)
(Permutation (join q q a2) gv1), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a2 :: gv1)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (a1 :: gv1)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv1)), (Permutation (join q q a2) (merge gv1 q)), (Permutation (join q q a2) (merge gv1 gv1)), (Permutation (join q q a2) (heap_delete_max a2))
(Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q gv1 a2)), (Permutation (join q q a2) (join q gv1 a1)), (Permutation (join q q a2) (join gv1 q a2)), (Permutation (join q q a2) (join gv1 q a1)), (Permutation (join q q a2) (join gv1 gv1 a2)), (Permutation (join q q a2) (join gv1 gv1 a1)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert x gv1))
(Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv1)), (Permutation (join q q a2) (insert gv0 q)), (Permutation (join q q a2) (insert gv0 gv1)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry gv1 a2)), (Permutation (join q q a2) (carry gv1 a1)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) (q ++ gv1))
(Permutation (join q q a2) (gv1 ++ q)), (Permutation (join q q a2) (gv1 ++ gv1)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) gv1), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv1)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv1)), (Permutation (join q q a1) (merge q q))
(Permutation (join q q a1) (merge q gv1)), (Permutation (join q q a1) (merge gv1 q)), (Permutation (join q q a1) (merge gv1 gv1)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q gv1 a2)), (Permutation (join q q a1) (join q gv1 a1)), (Permutation (join q q a1) (join gv1 q a2)), (Permutation (join q q a1) (join gv1 q a1))
(Permutation (join q q a1) (join gv1 gv1 a2)), (Permutation (join q q a1) (join gv1 gv1 a1)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert x gv1)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert n gv1)), (Permutation (join q q a1) (insert gv0 q)), (Permutation (join q q a1) (insert gv0 gv1)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1))
(Permutation (join q q a1) (carry gv1 a2)), (Permutation (join q q a1) (carry gv1 a1)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) (q ++ gv1)), (Permutation (join q q a1) (gv1 ++ q)), (Permutation (join q q a1) (gv1 ++ gv1)), (Permutation (join q q a1) []), (Permutation (join q gv1 a2) q), (Permutation (join q gv1 a2) gv1), (Permutation (join q gv1 a2) (a2 :: q))
(Permutation (join q gv1 a2) (a2 :: gv1)), (Permutation (join q gv1 a2) (a1 :: q)), (Permutation (join q gv1 a2) (a1 :: gv1)), (Permutation (join q gv1 a2) (merge q q)), (Permutation (join q gv1 a2) (merge q gv1)), (Permutation (join q gv1 a2) (merge gv1 q)), (Permutation (join q gv1 a2) (merge gv1 gv1)), (Permutation (join q gv1 a2) (heap_delete_max a2)), (Permutation (join q gv1 a2) (heap_delete_max a1)), (Permutation (join q gv1 a2) (join q q a2))
(Permutation (join q gv1 a2) (join q q a1)), (Permutation (join q gv1 a2) (join q gv1 a1)), (Permutation (join q gv1 a2) (join gv1 q a2)), (Permutation (join q gv1 a2) (join gv1 q a1)), (Permutation (join q gv1 a2) (join gv1 gv1 a2)), (Permutation (join q gv1 a2) (join gv1 gv1 a1)), (Permutation (join q gv1 a2) (insert x q)), (Permutation (join q gv1 a2) (insert x gv1)), (Permutation (join q gv1 a2) (insert n q)), (Permutation (join q gv1 a2) (insert n gv1))
(Permutation (join q gv1 a2) (insert gv0 q)), (Permutation (join q gv1 a2) (insert gv0 gv1)), (Permutation (join q gv1 a2) (carry q a2)), (Permutation (join q gv1 a2) (carry q a1)), (Permutation (join q gv1 a2) (carry gv1 a2)), (Permutation (join q gv1 a2) (carry gv1 a1)), (Permutation (join q gv1 a2) (q ++ q)), (Permutation (join q gv1 a2) (q ++ gv1)), (Permutation (join q gv1 a2) (gv1 ++ q)), (Permutation (join q gv1 a2) (gv1 ++ gv1))
(Permutation (join q gv1 a2) []), (Permutation (join q gv1 a1) q), (Permutation (join q gv1 a1) gv1), (Permutation (join q gv1 a1) (a2 :: q)), (Permutation (join q gv1 a1) (a2 :: gv1)), (Permutation (join q gv1 a1) (a1 :: q)), (Permutation (join q gv1 a1) (a1 :: gv1)), (Permutation (join q gv1 a1) (merge q q)), (Permutation (join q gv1 a1) (merge q gv1)), (Permutation (join q gv1 a1) (merge gv1 q))
(Permutation (join q gv1 a1) (merge gv1 gv1)), (Permutation (join q gv1 a1) (heap_delete_max a2)), (Permutation (join q gv1 a1) (heap_delete_max a1)), (Permutation (join q gv1 a1) (join q q a2)), (Permutation (join q gv1 a1) (join q q a1)), (Permutation (join q gv1 a1) (join q gv1 a2)), (Permutation (join q gv1 a1) (join gv1 q a2)), (Permutation (join q gv1 a1) (join gv1 q a1)), (Permutation (join q gv1 a1) (join gv1 gv1 a2)), (Permutation (join q gv1 a1) (join gv1 gv1 a1))
(Permutation (join q gv1 a1) (insert x q)), (Permutation (join q gv1 a1) (insert x gv1)), (Permutation (join q gv1 a1) (insert n q)), (Permutation (join q gv1 a1) (insert n gv1)), (Permutation (join q gv1 a1) (insert gv0 q)), (Permutation (join q gv1 a1) (insert gv0 gv1)), (Permutation (join q gv1 a1) (carry q a2)), (Permutation (join q gv1 a1) (carry q a1)), (Permutation (join q gv1 a1) (carry gv1 a2)), (Permutation (join q gv1 a1) (carry gv1 a1))
(Permutation (join q gv1 a1) (q ++ q)), (Permutation (join q gv1 a1) (q ++ gv1)), (Permutation (join q gv1 a1) (gv1 ++ q)), (Permutation (join q gv1 a1) (gv1 ++ gv1)), (Permutation (join q gv1 a1) []), (Permutation (join gv1 q a2) q), (Permutation (join gv1 q a2) gv1), (Permutation (join gv1 q a2) (a2 :: q)), (Permutation (join gv1 q a2) (a2 :: gv1)), (Permutation (join gv1 q a2) (a1 :: q))
(Permutation (join gv1 q a2) (a1 :: gv1)), (Permutation (join gv1 q a2) (merge q q)), (Permutation (join gv1 q a2) (merge q gv1)), (Permutation (join gv1 q a2) (merge gv1 q)), (Permutation (join gv1 q a2) (merge gv1 gv1)), (Permutation (join gv1 q a2) (heap_delete_max a2)), (Permutation (join gv1 q a2) (heap_delete_max a1)), (Permutation (join gv1 q a2) (join q q a2)), (Permutation (join gv1 q a2) (join q q a1)), (Permutation (join gv1 q a2) (join q gv1 a2))
(Permutation (join gv1 q a2) (join q gv1 a1)), (Permutation (join gv1 q a2) (join gv1 q a1)), (Permutation (join gv1 q a2) (join gv1 gv1 a2)), (Permutation (join gv1 q a2) (join gv1 gv1 a1)), (Permutation (join gv1 q a2) (insert x q)), (Permutation (join gv1 q a2) (insert x gv1)), (Permutation (join gv1 q a2) (insert n q)), (Permutation (join gv1 q a2) (insert n gv1)), (Permutation (join gv1 q a2) (insert gv0 q)), (Permutation (join gv1 q a2) (insert gv0 gv1))
(Permutation (join gv1 q a2) (carry q a2)), (Permutation (join gv1 q a2) (carry q a1)), (Permutation (join gv1 q a2) (carry gv1 a2)), (Permutation (join gv1 q a2) (carry gv1 a1)), (Permutation (join gv1 q a2) (q ++ q)), (Permutation (join gv1 q a2) (q ++ gv1)), (Permutation (join gv1 q a2) (gv1 ++ q)), (Permutation (join gv1 q a2) (gv1 ++ gv1)), (Permutation (join gv1 q a2) []), (Permutation (join gv1 q a1) q)
(Permutation (join gv1 q a1) gv1), (Permutation (join gv1 q a1) (a2 :: q)), (Permutation (join gv1 q a1) (a2 :: gv1)), (Permutation (join gv1 q a1) (a1 :: q)), (Permutation (join gv1 q a1) (a1 :: gv1)), (Permutation (join gv1 q a1) (merge q q)), (Permutation (join gv1 q a1) (merge q gv1)), (Permutation (join gv1 q a1) (merge gv1 q)), (Permutation (join gv1 q a1) (merge gv1 gv1)), (Permutation (join gv1 q a1) (heap_delete_max a2))
(Permutation (join gv1 q a1) (heap_delete_max a1)), (Permutation (join gv1 q a1) (join q q a2)), (Permutation (join gv1 q a1) (join q q a1)), (Permutation (join gv1 q a1) (join q gv1 a2)), (Permutation (join gv1 q a1) (join q gv1 a1)), (Permutation (join gv1 q a1) (join gv1 q a2)), (Permutation (join gv1 q a1) (join gv1 gv1 a2)), (Permutation (join gv1 q a1) (join gv1 gv1 a1)), (Permutation (join gv1 q a1) (insert x q)), (Permutation (join gv1 q a1) (insert x gv1))
(Permutation (join gv1 q a1) (insert n q)), (Permutation (join gv1 q a1) (insert n gv1)), (Permutation (join gv1 q a1) (insert gv0 q)), (Permutation (join gv1 q a1) (insert gv0 gv1)), (Permutation (join gv1 q a1) (carry q a2)), (Permutation (join gv1 q a1) (carry q a1)), (Permutation (join gv1 q a1) (carry gv1 a2)), (Permutation (join gv1 q a1) (carry gv1 a1)), (Permutation (join gv1 q a1) (q ++ q)), (Permutation (join gv1 q a1) (q ++ gv1))
(Permutation (join gv1 q a1) (gv1 ++ q)), (Permutation (join gv1 q a1) (gv1 ++ gv1)), (Permutation (join gv1 q a1) []), (Permutation (join gv1 gv1 a2) q), (Permutation (join gv1 gv1 a2) gv1), (Permutation (join gv1 gv1 a2) (a2 :: q)), (Permutation (join gv1 gv1 a2) (a2 :: gv1)), (Permutation (join gv1 gv1 a2) (a1 :: q)), (Permutation (join gv1 gv1 a2) (a1 :: gv1)), (Permutation (join gv1 gv1 a2) (merge q q))
(Permutation (join gv1 gv1 a2) (merge q gv1)), (Permutation (join gv1 gv1 a2) (merge gv1 q)), (Permutation (join gv1 gv1 a2) (merge gv1 gv1)), (Permutation (join gv1 gv1 a2) (heap_delete_max a2)), (Permutation (join gv1 gv1 a2) (heap_delete_max a1)), (Permutation (join gv1 gv1 a2) (join q q a2)), (Permutation (join gv1 gv1 a2) (join q q a1)), (Permutation (join gv1 gv1 a2) (join q gv1 a2)), (Permutation (join gv1 gv1 a2) (join q gv1 a1)), (Permutation (join gv1 gv1 a2) (join gv1 q a2))
(Permutation (join gv1 gv1 a2) (join gv1 q a1)), (Permutation (join gv1 gv1 a2) (join gv1 gv1 a1)), (Permutation (join gv1 gv1 a2) (insert x q)), (Permutation (join gv1 gv1 a2) (insert x gv1)), (Permutation (join gv1 gv1 a2) (insert n q)), (Permutation (join gv1 gv1 a2) (insert n gv1)), (Permutation (join gv1 gv1 a2) (insert gv0 q)), (Permutation (join gv1 gv1 a2) (insert gv0 gv1)), (Permutation (join gv1 gv1 a2) (carry q a2)), (Permutation (join gv1 gv1 a2) (carry q a1))
(Permutation (join gv1 gv1 a2) (carry gv1 a2)), (Permutation (join gv1 gv1 a2) (carry gv1 a1)), (Permutation (join gv1 gv1 a2) (q ++ q)), (Permutation (join gv1 gv1 a2) (q ++ gv1)), (Permutation (join gv1 gv1 a2) (gv1 ++ q)), (Permutation (join gv1 gv1 a2) (gv1 ++ gv1)), (Permutation (join gv1 gv1 a2) []), (Permutation (join gv1 gv1 a1) q), (Permutation (join gv1 gv1 a1) gv1), (Permutation (join gv1 gv1 a1) (a2 :: q))
(Permutation (join gv1 gv1 a1) (a2 :: gv1)), (Permutation (join gv1 gv1 a1) (a1 :: q)), (Permutation (join gv1 gv1 a1) (a1 :: gv1)), (Permutation (join gv1 gv1 a1) (merge q q)), (Permutation (join gv1 gv1 a1) (merge q gv1)), (Permutation (join gv1 gv1 a1) (merge gv1 q)), (Permutation (join gv1 gv1 a1) (merge gv1 gv1)), (Permutation (join gv1 gv1 a1) (heap_delete_max a2)), (Permutation (join gv1 gv1 a1) (heap_delete_max a1)), (Permutation (join gv1 gv1 a1) (join q q a2))
(Permutation (join gv1 gv1 a1) (join q q a1)), (Permutation (join gv1 gv1 a1) (join q gv1 a2)), (Permutation (join gv1 gv1 a1) (join q gv1 a1)), (Permutation (join gv1 gv1 a1) (join gv1 q a2)), (Permutation (join gv1 gv1 a1) (join gv1 q a1)), (Permutation (join gv1 gv1 a1) (join gv1 gv1 a2)), (Permutation (join gv1 gv1 a1) (insert x q)), (Permutation (join gv1 gv1 a1) (insert x gv1)), (Permutation (join gv1 gv1 a1) (insert n q)), (Permutation (join gv1 gv1 a1) (insert n gv1))
(Permutation (join gv1 gv1 a1) (insert gv0 q)), (Permutation (join gv1 gv1 a1) (insert gv0 gv1)), (Permutation (join gv1 gv1 a1) (carry q a2)), (Permutation (join gv1 gv1 a1) (carry q a1)), (Permutation (join gv1 gv1 a1) (carry gv1 a2)), (Permutation (join gv1 gv1 a1) (carry gv1 a1)), (Permutation (join gv1 gv1 a1) (q ++ q)), (Permutation (join gv1 gv1 a1) (q ++ gv1)), (Permutation (join gv1 gv1 a1) (gv1 ++ q)), (Permutation (join gv1 gv1 a1) (gv1 ++ gv1))
(Permutation (join gv1 gv1 a1) []), (Permutation (insert x q) q), (Permutation (insert x q) gv1), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv1)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv1)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q))
(Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q gv1 a2)), (Permutation (insert x q) (join q gv1 a1)), (Permutation (insert x q) (join gv1 q a2)), (Permutation (insert x q) (join gv1 q a1)), (Permutation (insert x q) (join gv1 gv1 a2))
(Permutation (insert x q) (join gv1 gv1 a1)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (insert n gv1)), (Permutation (insert x q) (insert gv0 q)), (Permutation (insert x q) (insert gv0 gv1)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry gv1 a2)), (Permutation (insert x q) (carry gv1 a1))
(Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1)), (Permutation (insert x q) []), (Permutation (insert x gv1) q), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (a2 :: q)), (Permutation (insert x gv1) (a2 :: gv1)), (Permutation (insert x gv1) (a1 :: q))
(Permutation (insert x gv1) (a1 :: gv1)), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (heap_delete_max a2)), (Permutation (insert x gv1) (heap_delete_max a1)), (Permutation (insert x gv1) (join q q a2)), (Permutation (insert x gv1) (join q q a1)), (Permutation (insert x gv1) (join q gv1 a2))
(Permutation (insert x gv1) (join q gv1 a1)), (Permutation (insert x gv1) (join gv1 q a2)), (Permutation (insert x gv1) (join gv1 q a1)), (Permutation (insert x gv1) (join gv1 gv1 a2)), (Permutation (insert x gv1) (join gv1 gv1 a1)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (insert n q)), (Permutation (insert x gv1) (insert n gv1)), (Permutation (insert x gv1) (insert gv0 q)), (Permutation (insert x gv1) (insert gv0 gv1))
(Permutation (insert x gv1) (carry q a2)), (Permutation (insert x gv1) (carry q a1)), (Permutation (insert x gv1) (carry gv1 a2)), (Permutation (insert x gv1) (carry gv1 a1)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1)), (Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (insert n q) q)
(Permutation (insert n q) gv1), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a2 :: gv1)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv1)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv1)), (Permutation (insert n q) (merge gv1 q)), (Permutation (insert n q) (merge gv1 gv1)), (Permutation (insert n q) (heap_delete_max a2))
(Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q gv1 a2)), (Permutation (insert n q) (join q gv1 a1)), (Permutation (insert n q) (join gv1 q a2)), (Permutation (insert n q) (join gv1 q a1)), (Permutation (insert n q) (join gv1 gv1 a2)), (Permutation (insert n q) (join gv1 gv1 a1)), (Permutation (insert n q) (insert x q))
(Permutation (insert n q) (insert x gv1)), (Permutation (insert n q) (insert n gv1)), (Permutation (insert n q) (insert gv0 q)), (Permutation (insert n q) (insert gv0 gv1)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry gv1 a2)), (Permutation (insert n q) (carry gv1 a1)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv1))
(Permutation (insert n q) (gv1 ++ q)), (Permutation (insert n q) (gv1 ++ gv1)), (Permutation (insert n q) []), (Permutation (insert n gv1) q), (Permutation (insert n gv1) gv1), (Permutation (insert n gv1) (a2 :: q)), (Permutation (insert n gv1) (a2 :: gv1)), (Permutation (insert n gv1) (a1 :: q)), (Permutation (insert n gv1) (a1 :: gv1)), (Permutation (insert n gv1) (merge q q))
(Permutation (insert n gv1) (merge q gv1)), (Permutation (insert n gv1) (merge gv1 q)), (Permutation (insert n gv1) (merge gv1 gv1)), (Permutation (insert n gv1) (heap_delete_max a2)), (Permutation (insert n gv1) (heap_delete_max a1)), (Permutation (insert n gv1) (join q q a2)), (Permutation (insert n gv1) (join q q a1)), (Permutation (insert n gv1) (join q gv1 a2)), (Permutation (insert n gv1) (join q gv1 a1)), (Permutation (insert n gv1) (join gv1 q a2))
(Permutation (insert n gv1) (join gv1 q a1)), (Permutation (insert n gv1) (join gv1 gv1 a2)), (Permutation (insert n gv1) (join gv1 gv1 a1)), (Permutation (insert n gv1) (insert x q)), (Permutation (insert n gv1) (insert x gv1)), (Permutation (insert n gv1) (insert n q)), (Permutation (insert n gv1) (insert gv0 q)), (Permutation (insert n gv1) (insert gv0 gv1)), (Permutation (insert n gv1) (carry q a2)), (Permutation (insert n gv1) (carry q a1))
(Permutation (insert n gv1) (carry gv1 a2)), (Permutation (insert n gv1) (carry gv1 a1)), (Permutation (insert n gv1) (q ++ q)), (Permutation (insert n gv1) (q ++ gv1)), (Permutation (insert n gv1) (gv1 ++ q)), (Permutation (insert n gv1) (gv1 ++ gv1)), (Permutation (insert n gv1) []), (Permutation (insert gv0 q) q), (Permutation (insert gv0 q) gv1), (Permutation (insert gv0 q) (a2 :: q))
(Permutation (insert gv0 q) (a2 :: gv1)), (Permutation (insert gv0 q) (a1 :: q)), (Permutation (insert gv0 q) (a1 :: gv1)), (Permutation (insert gv0 q) (merge q q)), (Permutation (insert gv0 q) (merge q gv1)), (Permutation (insert gv0 q) (merge gv1 q)), (Permutation (insert gv0 q) (merge gv1 gv1)), (Permutation (insert gv0 q) (heap_delete_max a2)), (Permutation (insert gv0 q) (heap_delete_max a1)), (Permutation (insert gv0 q) (join q q a2))
(Permutation (insert gv0 q) (join q q a1)), (Permutation (insert gv0 q) (join q gv1 a2)), (Permutation (insert gv0 q) (join q gv1 a1)), (Permutation (insert gv0 q) (join gv1 q a2)), (Permutation (insert gv0 q) (join gv1 q a1)), (Permutation (insert gv0 q) (join gv1 gv1 a2)), (Permutation (insert gv0 q) (join gv1 gv1 a1)), (Permutation (insert gv0 q) (insert x q)), (Permutation (insert gv0 q) (insert x gv1)), (Permutation (insert gv0 q) (insert n q))
(Permutation (insert gv0 q) (insert n gv1)), (Permutation (insert gv0 q) (insert gv0 gv1)), (Permutation (insert gv0 q) (carry q a2)), (Permutation (insert gv0 q) (carry q a1)), (Permutation (insert gv0 q) (carry gv1 a2)), (Permutation (insert gv0 q) (carry gv1 a1)), (Permutation (insert gv0 q) (q ++ q)), (Permutation (insert gv0 q) (q ++ gv1)), (Permutation (insert gv0 q) (gv1 ++ q)), (Permutation (insert gv0 q) (gv1 ++ gv1))
(Permutation (insert gv0 q) []), (Permutation (insert gv0 gv1) q), (Permutation (insert gv0 gv1) gv1), (Permutation (insert gv0 gv1) (a2 :: q)), (Permutation (insert gv0 gv1) (a2 :: gv1)), (Permutation (insert gv0 gv1) (a1 :: q)), (Permutation (insert gv0 gv1) (a1 :: gv1)), (Permutation (insert gv0 gv1) (merge q q)), (Permutation (insert gv0 gv1) (merge q gv1)), (Permutation (insert gv0 gv1) (merge gv1 q))
(Permutation (insert gv0 gv1) (merge gv1 gv1)), (Permutation (insert gv0 gv1) (heap_delete_max a2)), (Permutation (insert gv0 gv1) (heap_delete_max a1)), (Permutation (insert gv0 gv1) (join q q a2)), (Permutation (insert gv0 gv1) (join q q a1)), (Permutation (insert gv0 gv1) (join q gv1 a2)), (Permutation (insert gv0 gv1) (join q gv1 a1)), (Permutation (insert gv0 gv1) (join gv1 q a2)), (Permutation (insert gv0 gv1) (join gv1 q a1)), (Permutation (insert gv0 gv1) (join gv1 gv1 a2))
(Permutation (insert gv0 gv1) (join gv1 gv1 a1)), (Permutation (insert gv0 gv1) (insert x q)), (Permutation (insert gv0 gv1) (insert x gv1)), (Permutation (insert gv0 gv1) (insert n q)), (Permutation (insert gv0 gv1) (insert n gv1)), (Permutation (insert gv0 gv1) (insert gv0 q)), (Permutation (insert gv0 gv1) (carry q a2)), (Permutation (insert gv0 gv1) (carry q a1)), (Permutation (insert gv0 gv1) (carry gv1 a2)), (Permutation (insert gv0 gv1) (carry gv1 a1))
(Permutation (insert gv0 gv1) (q ++ q)), (Permutation (insert gv0 gv1) (q ++ gv1)), (Permutation (insert gv0 gv1) (gv1 ++ q)), (Permutation (insert gv0 gv1) (gv1 ++ gv1)), (Permutation (insert gv0 gv1) []), (Permutation (carry q a2) q), (Permutation (carry q a2) gv1), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv1)), (Permutation (carry q a2) (a1 :: q))
(Permutation (carry q a2) (a1 :: gv1)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv1)), (Permutation (carry q a2) (merge gv1 q)), (Permutation (carry q a2) (merge gv1 gv1)), (Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q gv1 a2))
(Permutation (carry q a2) (join q gv1 a1)), (Permutation (carry q a2) (join gv1 q a2)), (Permutation (carry q a2) (join gv1 q a1)), (Permutation (carry q a2) (join gv1 gv1 a2)), (Permutation (carry q a2) (join gv1 gv1 a1)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv1)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv1)), (Permutation (carry q a2) (insert gv0 q))
(Permutation (carry q a2) (insert gv0 gv1)), (Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry gv1 a2)), (Permutation (carry q a2) (carry gv1 a1)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv1)), (Permutation (carry q a2) (gv1 ++ q)), (Permutation (carry q a2) (gv1 ++ gv1)), (Permutation (carry q a2) []), (Permutation (carry q a1) q)
(Permutation (carry q a1) gv1), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv1)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv1)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (merge q gv1)), (Permutation (carry q a1) (merge gv1 q)), (Permutation (carry q a1) (merge gv1 gv1)), (Permutation (carry q a1) (heap_delete_max a2))
(Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q gv1 a2)), (Permutation (carry q a1) (join q gv1 a1)), (Permutation (carry q a1) (join gv1 q a2)), (Permutation (carry q a1) (join gv1 q a1)), (Permutation (carry q a1) (join gv1 gv1 a2)), (Permutation (carry q a1) (join gv1 gv1 a1)), (Permutation (carry q a1) (insert x q))
(Permutation (carry q a1) (insert x gv1)), (Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (insert n gv1)), (Permutation (carry q a1) (insert gv0 q)), (Permutation (carry q a1) (insert gv0 gv1)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry gv1 a2)), (Permutation (carry q a1) (carry gv1 a1)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv1))
(Permutation (carry q a1) (gv1 ++ q)), (Permutation (carry q a1) (gv1 ++ gv1)), (Permutation (carry q a1) []), (Permutation (carry gv1 a2) q), (Permutation (carry gv1 a2) gv1), (Permutation (carry gv1 a2) (a2 :: q)), (Permutation (carry gv1 a2) (a2 :: gv1)), (Permutation (carry gv1 a2) (a1 :: q)), (Permutation (carry gv1 a2) (a1 :: gv1)), (Permutation (carry gv1 a2) (merge q q))
(Permutation (carry gv1 a2) (merge q gv1)), (Permutation (carry gv1 a2) (merge gv1 q)), (Permutation (carry gv1 a2) (merge gv1 gv1)), (Permutation (carry gv1 a2) (heap_delete_max a2)), (Permutation (carry gv1 a2) (heap_delete_max a1)), (Permutation (carry gv1 a2) (join q q a2)), (Permutation (carry gv1 a2) (join q q a1)), (Permutation (carry gv1 a2) (join q gv1 a2)), (Permutation (carry gv1 a2) (join q gv1 a1)), (Permutation (carry gv1 a2) (join gv1 q a2))
(Permutation (carry gv1 a2) (join gv1 q a1)), (Permutation (carry gv1 a2) (join gv1 gv1 a2)), (Permutation (carry gv1 a2) (join gv1 gv1 a1)), (Permutation (carry gv1 a2) (insert x q)), (Permutation (carry gv1 a2) (insert x gv1)), (Permutation (carry gv1 a2) (insert n q)), (Permutation (carry gv1 a2) (insert n gv1)), (Permutation (carry gv1 a2) (insert gv0 q)), (Permutation (carry gv1 a2) (insert gv0 gv1)), (Permutation (carry gv1 a2) (carry q a2))
(Permutation (carry gv1 a2) (carry q a1)), (Permutation (carry gv1 a2) (carry gv1 a1)), (Permutation (carry gv1 a2) (q ++ q)), (Permutation (carry gv1 a2) (q ++ gv1)), (Permutation (carry gv1 a2) (gv1 ++ q)), (Permutation (carry gv1 a2) (gv1 ++ gv1)), (Permutation (carry gv1 a2) []), (Permutation (carry gv1 a1) q), (Permutation (carry gv1 a1) gv1), (Permutation (carry gv1 a1) (a2 :: q))
(Permutation (carry gv1 a1) (a2 :: gv1)), (Permutation (carry gv1 a1) (a1 :: q)), (Permutation (carry gv1 a1) (a1 :: gv1)), (Permutation (carry gv1 a1) (merge q q)), (Permutation (carry gv1 a1) (merge q gv1)), (Permutation (carry gv1 a1) (merge gv1 q)), (Permutation (carry gv1 a1) (merge gv1 gv1)), (Permutation (carry gv1 a1) (heap_delete_max a2)), (Permutation (carry gv1 a1) (heap_delete_max a1)), (Permutation (carry gv1 a1) (join q q a2))
(Permutation (carry gv1 a1) (join q q a1)), (Permutation (carry gv1 a1) (join q gv1 a2)), (Permutation (carry gv1 a1) (join q gv1 a1)), (Permutation (carry gv1 a1) (join gv1 q a2)), (Permutation (carry gv1 a1) (join gv1 q a1)), (Permutation (carry gv1 a1) (join gv1 gv1 a2)), (Permutation (carry gv1 a1) (join gv1 gv1 a1)), (Permutation (carry gv1 a1) (insert x q)), (Permutation (carry gv1 a1) (insert x gv1)), (Permutation (carry gv1 a1) (insert n q))
(Permutation (carry gv1 a1) (insert n gv1)), (Permutation (carry gv1 a1) (insert gv0 q)), (Permutation (carry gv1 a1) (insert gv0 gv1)), (Permutation (carry gv1 a1) (carry q a2)), (Permutation (carry gv1 a1) (carry q a1)), (Permutation (carry gv1 a1) (carry gv1 a2)), (Permutation (carry gv1 a1) (q ++ q)), (Permutation (carry gv1 a1) (q ++ gv1)), (Permutation (carry gv1 a1) (gv1 ++ q)), (Permutation (carry gv1 a1) (gv1 ++ gv1))
(Permutation (carry gv1 a1) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv1)), (Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv1)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q))
(Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q gv1 a2)), (Permutation (q ++ q) (join q gv1 a1)), (Permutation (q ++ q) (join gv1 q a2)), (Permutation (q ++ q) (join gv1 q a1)), (Permutation (q ++ q) (join gv1 gv1 a2))
(Permutation (q ++ q) (join gv1 gv1 a1)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv1)), (Permutation (q ++ q) (insert gv0 q)), (Permutation (q ++ q) (insert gv0 gv1)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry gv1 a2))
(Permutation (q ++ q) (carry gv1 a1)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (a2 :: q)), (Permutation (q ++ gv1) (a2 :: gv1)), (Permutation (q ++ gv1) (a1 :: q))
(Permutation (q ++ gv1) (a1 :: gv1)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q)), (Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (heap_delete_max a2)), (Permutation (q ++ gv1) (heap_delete_max a1)), (Permutation (q ++ gv1) (join q q a2)), (Permutation (q ++ gv1) (join q q a1)), (Permutation (q ++ gv1) (join q gv1 a2))
(Permutation (q ++ gv1) (join q gv1 a1)), (Permutation (q ++ gv1) (join gv1 q a2)), (Permutation (q ++ gv1) (join gv1 q a1)), (Permutation (q ++ gv1) (join gv1 gv1 a2)), (Permutation (q ++ gv1) (join gv1 gv1 a1)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (insert n q)), (Permutation (q ++ gv1) (insert n gv1)), (Permutation (q ++ gv1) (insert gv0 q))
(Permutation (q ++ gv1) (insert gv0 gv1)), (Permutation (q ++ gv1) (carry q a2)), (Permutation (q ++ gv1) (carry q a1)), (Permutation (q ++ gv1) (carry gv1 a2)), (Permutation (q ++ gv1) (carry gv1 a1)), (Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q)
(Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (a2 :: q)), (Permutation (gv1 ++ q) (a2 :: gv1)), (Permutation (gv1 ++ q) (a1 :: q)), (Permutation (gv1 ++ q) (a1 :: gv1)), (Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (heap_delete_max a2))
(Permutation (gv1 ++ q) (heap_delete_max a1)), (Permutation (gv1 ++ q) (join q q a2)), (Permutation (gv1 ++ q) (join q q a1)), (Permutation (gv1 ++ q) (join q gv1 a2)), (Permutation (gv1 ++ q) (join q gv1 a1)), (Permutation (gv1 ++ q) (join gv1 q a2)), (Permutation (gv1 ++ q) (join gv1 q a1)), (Permutation (gv1 ++ q) (join gv1 gv1 a2)), (Permutation (gv1 ++ q) (join gv1 gv1 a1)), (Permutation (gv1 ++ q) (insert x q))
(Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (insert n q)), (Permutation (gv1 ++ q) (insert n gv1)), (Permutation (gv1 ++ q) (insert gv0 q)), (Permutation (gv1 ++ q) (insert gv0 gv1)), (Permutation (gv1 ++ q) (carry q a2)), (Permutation (gv1 ++ q) (carry q a1)), (Permutation (gv1 ++ q) (carry gv1 a2)), (Permutation (gv1 ++ q) (carry gv1 a1)), (Permutation (gv1 ++ q) (q ++ q))
(Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (a2 :: q)), (Permutation (gv1 ++ gv1) (a2 :: gv1)), (Permutation (gv1 ++ gv1) (a1 :: q)), (Permutation (gv1 ++ gv1) (a1 :: gv1)), (Permutation (gv1 ++ gv1) (merge q q))
(Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (heap_delete_max a2)), (Permutation (gv1 ++ gv1) (heap_delete_max a1)), (Permutation (gv1 ++ gv1) (join q q a2)), (Permutation (gv1 ++ gv1) (join q q a1)), (Permutation (gv1 ++ gv1) (join q gv1 a2)), (Permutation (gv1 ++ gv1) (join q gv1 a1)), (Permutation (gv1 ++ gv1) (join gv1 q a2))
(Permutation (gv1 ++ gv1) (join gv1 q a1)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a2)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a1)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (insert n q)), (Permutation (gv1 ++ gv1) (insert n gv1)), (Permutation (gv1 ++ gv1) (insert gv0 q)), (Permutation (gv1 ++ gv1) (insert gv0 gv1)), (Permutation (gv1 ++ gv1) (carry q a2))
(Permutation (gv1 ++ gv1) (carry q a1)), (Permutation (gv1 ++ gv1) (carry gv1 a2)), (Permutation (gv1 ++ gv1) (carry gv1 a1)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] (a2 :: q))
(Permutation [] (a2 :: gv1)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv1)), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join q q a2))
(Permutation [] (join q q a1)), (Permutation [] (join q gv1 a2)), (Permutation [] (join q gv1 a1)), (Permutation [] (join gv1 q a2)), (Permutation [] (join gv1 q a1)), (Permutation [] (join gv1 gv1 a2)), (Permutation [] (join gv1 gv1 a1)), (Permutation [] (insert x q)), (Permutation [] (insert x gv1)), (Permutation [] (insert n q))
(Permutation [] (insert n gv1)), (Permutation [] (insert gv0 q)), (Permutation [] (insert gv0 gv1)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry gv1 a2)), (Permutation [] (carry gv1 a1)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q))
(Permutation [] (gv1 ++ gv1)), (In a2 (a2 :: q)), (In a2 (a2 :: gv1)), (In a2 (a1 :: q)), (In a2 (a1 :: gv1)), (In a2 (merge q q)), (In a2 (merge q gv1)), (In a2 (merge gv1 q)), (In a2 (merge gv1 gv1)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (join q q a2)), (In a2 (join q q a1)), (In a2 (join q gv1 a2)), (In a2 (join q gv1 a1)), (In a2 (join gv1 q a2)), (In a2 (join gv1 q a1)), (In a2 (join gv1 gv1 a2)), (In a2 (join gv1 gv1 a1)), (In a2 (insert x q))
(In a2 (insert x gv1)), (In a2 (insert n q)), (In a2 (insert n gv1)), (In a2 (insert gv0 q)), (In a2 (insert gv0 gv1)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (carry gv1 a2)), (In a2 (carry gv1 a1)), (In a2 (q ++ q))
(In a2 (q ++ gv1)), (In a2 (gv1 ++ q)), (In a2 (gv1 ++ gv1)), (In a1 (a2 :: q)), (In a1 (a2 :: gv1)), (In a1 (a1 :: q)), (In a1 (a1 :: gv1)), (In a1 (merge q q)), (In a1 (merge q gv1)), (In a1 (merge gv1 q))
(In a1 (merge gv1 gv1)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (join q gv1 a2)), (In a1 (join q gv1 a1)), (In a1 (join gv1 q a2)), (In a1 (join gv1 q a1)), (In a1 (join gv1 gv1 a2))
(In a1 (join gv1 gv1 a1)), (In a1 (insert x q)), (In a1 (insert x gv1)), (In a1 (insert n q)), (In a1 (insert n gv1)), (In a1 (insert gv0 q)), (In a1 (insert gv0 gv1)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry gv1 a2))
(In a1 (carry gv1 a1)), (In a1 (q ++ q)), (In a1 (q ++ gv1)), (In a1 (gv1 ++ q)), (In a1 (gv1 ++ gv1)), (In (Node x a2 a2) q), (In (Node x a2 a2) gv1), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv1)), (In (Node x a2 a2) (a1 :: q))
(In (Node x a2 a2) (a1 :: gv1)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv1)), (In (Node x a2 a2) (merge gv1 q)), (In (Node x a2 a2) (merge gv1 gv1)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q gv1 a2))
(In (Node x a2 a2) (join q gv1 a1)), (In (Node x a2 a2) (join gv1 q a2)), (In (Node x a2 a2) (join gv1 q a1)), (In (Node x a2 a2) (join gv1 gv1 a2)), (In (Node x a2 a2) (join gv1 gv1 a1)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert x gv1)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert n gv1)), (In (Node x a2 a2) (insert gv0 q))
(In (Node x a2 a2) (insert gv0 gv1)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry gv1 a2)), (In (Node x a2 a2) (carry gv1 a1)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv1)), (In (Node x a2 a2) (gv1 ++ q)), (In (Node x a2 a2) (gv1 ++ gv1)), (In (Node x a2 a1) q)
(In (Node x a2 a1) gv1), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a2 :: gv1)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (a1 :: gv1)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (merge q gv1)), (In (Node x a2 a1) (merge gv1 q)), (In (Node x a2 a1) (merge gv1 gv1)), (In (Node x a2 a1) (heap_delete_max a2))
(In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q gv1 a2)), (In (Node x a2 a1) (join q gv1 a1)), (In (Node x a2 a1) (join gv1 q a2)), (In (Node x a2 a1) (join gv1 q a1)), (In (Node x a2 a1) (join gv1 gv1 a2)), (In (Node x a2 a1) (join gv1 gv1 a1)), (In (Node x a2 a1) (insert x q))
(In (Node x a2 a1) (insert x gv1)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv1)), (In (Node x a2 a1) (insert gv0 q)), (In (Node x a2 a1) (insert gv0 gv1)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry gv1 a2)), (In (Node x a2 a1) (carry gv1 a1)), (In (Node x a2 a1) (q ++ q))
(In (Node x a2 a1) (q ++ gv1)), (In (Node x a2 a1) (gv1 ++ q)), (In (Node x a2 a1) (gv1 ++ gv1)), (In (Node x a1 a2) q), (In (Node x a1 a2) gv1), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv1)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (a1 :: gv1)), (In (Node x a1 a2) (merge q q))
(In (Node x a1 a2) (merge q gv1)), (In (Node x a1 a2) (merge gv1 q)), (In (Node x a1 a2) (merge gv1 gv1)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q gv1 a2)), (In (Node x a1 a2) (join q gv1 a1)), (In (Node x a1 a2) (join gv1 q a2))
(In (Node x a1 a2) (join gv1 q a1)), (In (Node x a1 a2) (join gv1 gv1 a2)), (In (Node x a1 a2) (join gv1 gv1 a1)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv1)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert n gv1)), (In (Node x a1 a2) (insert gv0 q)), (In (Node x a1 a2) (insert gv0 gv1)), (In (Node x a1 a2) (carry q a2))
(In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry gv1 a2)), (In (Node x a1 a2) (carry gv1 a1)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a2) (q ++ gv1)), (In (Node x a1 a2) (gv1 ++ q)), (In (Node x a1 a2) (gv1 ++ gv1)), (In (Node x a1 a1) q), (In (Node x a1 a1) gv1), (In (Node x a1 a1) (a2 :: q))
(In (Node x a1 a1) (a2 :: gv1)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (a1 :: gv1)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (merge q gv1)), (In (Node x a1 a1) (merge gv1 q)), (In (Node x a1 a1) (merge gv1 gv1)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (join q q a2))
(In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q gv1 a2)), (In (Node x a1 a1) (join q gv1 a1)), (In (Node x a1 a1) (join gv1 q a2)), (In (Node x a1 a1) (join gv1 q a1)), (In (Node x a1 a1) (join gv1 gv1 a2)), (In (Node x a1 a1) (join gv1 gv1 a1)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv1)), (In (Node x a1 a1) (insert n q))
(In (Node x a1 a1) (insert n gv1)), (In (Node x a1 a1) (insert gv0 q)), (In (Node x a1 a1) (insert gv0 gv1)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry gv1 a2)), (In (Node x a1 a1) (carry gv1 a1)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv1)), (In (Node x a1 a1) (gv1 ++ q))
(In (Node x a1 a1) (gv1 ++ gv1)), (In (Node n a2 a2) q), (In (Node n a2 a2) gv1), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a2 :: gv1)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (a1 :: gv1)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv1)), (In (Node n a2 a2) (merge gv1 q))
(In (Node n a2 a2) (merge gv1 gv1)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q gv1 a2)), (In (Node n a2 a2) (join q gv1 a1)), (In (Node n a2 a2) (join gv1 q a2)), (In (Node n a2 a2) (join gv1 q a1)), (In (Node n a2 a2) (join gv1 gv1 a2))
(In (Node n a2 a2) (join gv1 gv1 a1)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv1)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert n gv1)), (In (Node n a2 a2) (insert gv0 q)), (In (Node n a2 a2) (insert gv0 gv1)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry gv1 a2))
(In (Node n a2 a2) (carry gv1 a1)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv1)), (In (Node n a2 a2) (gv1 ++ q)), (In (Node n a2 a2) (gv1 ++ gv1)), (In (Node n a2 a1) q), (In (Node n a2 a1) gv1), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a2 :: gv1)), (In (Node n a2 a1) (a1 :: q))
(In (Node n a2 a1) (a1 :: gv1)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv1)), (In (Node n a2 a1) (merge gv1 q)), (In (Node n a2 a1) (merge gv1 gv1)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q gv1 a2))
(In (Node n a2 a1) (join q gv1 a1)), (In (Node n a2 a1) (join gv1 q a2)), (In (Node n a2 a1) (join gv1 q a1)), (In (Node n a2 a1) (join gv1 gv1 a2)), (In (Node n a2 a1) (join gv1 gv1 a1)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert x gv1)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (insert n gv1)), (In (Node n a2 a1) (insert gv0 q))
(In (Node n a2 a1) (insert gv0 gv1)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry gv1 a2)), (In (Node n a2 a1) (carry gv1 a1)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 a1) (q ++ gv1)), (In (Node n a2 a1) (gv1 ++ q)), (In (Node n a2 a1) (gv1 ++ gv1)), (In (Node n a1 a2) q)
(In (Node n a1 a2) gv1), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv1)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv1)), (In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (merge q gv1)), (In (Node n a1 a2) (merge gv1 q)), (In (Node n a1 a2) (merge gv1 gv1)), (In (Node n a1 a2) (heap_delete_max a2))
(In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q gv1 a2)), (In (Node n a1 a2) (join q gv1 a1)), (In (Node n a1 a2) (join gv1 q a2)), (In (Node n a1 a2) (join gv1 q a1)), (In (Node n a1 a2) (join gv1 gv1 a2)), (In (Node n a1 a2) (join gv1 gv1 a1)), (In (Node n a1 a2) (insert x q))
(In (Node n a1 a2) (insert x gv1)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv1)), (In (Node n a1 a2) (insert gv0 q)), (In (Node n a1 a2) (insert gv0 gv1)), (In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry gv1 a2)), (In (Node n a1 a2) (carry gv1 a1)), (In (Node n a1 a2) (q ++ q))
(In (Node n a1 a2) (q ++ gv1)), (In (Node n a1 a2) (gv1 ++ q)), (In (Node n a1 a2) (gv1 ++ gv1)), (In (Node n a1 a1) q), (In (Node n a1 a1) gv1), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a2 :: gv1)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (a1 :: gv1)), (In (Node n a1 a1) (merge q q))
(In (Node n a1 a1) (merge q gv1)), (In (Node n a1 a1) (merge gv1 q)), (In (Node n a1 a1) (merge gv1 gv1)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q gv1 a2)), (In (Node n a1 a1) (join q gv1 a1)), (In (Node n a1 a1) (join gv1 q a2))
(In (Node n a1 a1) (join gv1 q a1)), (In (Node n a1 a1) (join gv1 gv1 a2)), (In (Node n a1 a1) (join gv1 gv1 a1)), (In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert x gv1)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv1)), (In (Node n a1 a1) (insert gv0 q)), (In (Node n a1 a1) (insert gv0 gv1)), (In (Node n a1 a1) (carry q a2))
(In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry gv1 a2)), (In (Node n a1 a1) (carry gv1 a1)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv1)), (In (Node n a1 a1) (gv1 ++ q)), (In (Node n a1 a1) (gv1 ++ gv1)), (In (Node gv0 a2 a2) q), (In (Node gv0 a2 a2) gv1), (In (Node gv0 a2 a2) (a2 :: q))
(In (Node gv0 a2 a2) (a2 :: gv1)), (In (Node gv0 a2 a2) (a1 :: q)), (In (Node gv0 a2 a2) (a1 :: gv1)), (In (Node gv0 a2 a2) (merge q q)), (In (Node gv0 a2 a2) (merge q gv1)), (In (Node gv0 a2 a2) (merge gv1 q)), (In (Node gv0 a2 a2) (merge gv1 gv1)), (In (Node gv0 a2 a2) (heap_delete_max a2)), (In (Node gv0 a2 a2) (heap_delete_max a1)), (In (Node gv0 a2 a2) (join q q a2))
(In (Node gv0 a2 a2) (join q q a1)), (In (Node gv0 a2 a2) (join q gv1 a2)), (In (Node gv0 a2 a2) (join q gv1 a1)), (In (Node gv0 a2 a2) (join gv1 q a2)), (In (Node gv0 a2 a2) (join gv1 q a1)), (In (Node gv0 a2 a2) (join gv1 gv1 a2)), (In (Node gv0 a2 a2) (join gv1 gv1 a1)), (In (Node gv0 a2 a2) (insert x q)), (In (Node gv0 a2 a2) (insert x gv1)), (In (Node gv0 a2 a2) (insert n q))
(In (Node gv0 a2 a2) (insert n gv1)), (In (Node gv0 a2 a2) (insert gv0 q)), (In (Node gv0 a2 a2) (insert gv0 gv1)), (In (Node gv0 a2 a2) (carry q a2)), (In (Node gv0 a2 a2) (carry q a1)), (In (Node gv0 a2 a2) (carry gv1 a2)), (In (Node gv0 a2 a2) (carry gv1 a1)), (In (Node gv0 a2 a2) (q ++ q)), (In (Node gv0 a2 a2) (q ++ gv1)), (In (Node gv0 a2 a2) (gv1 ++ q))
(In (Node gv0 a2 a2) (gv1 ++ gv1)), (In (Node gv0 a2 a1) q), (In (Node gv0 a2 a1) gv1), (In (Node gv0 a2 a1) (a2 :: q)), (In (Node gv0 a2 a1) (a2 :: gv1)), (In (Node gv0 a2 a1) (a1 :: q)), (In (Node gv0 a2 a1) (a1 :: gv1)), (In (Node gv0 a2 a1) (merge q q)), (In (Node gv0 a2 a1) (merge q gv1)), (In (Node gv0 a2 a1) (merge gv1 q))
(In (Node gv0 a2 a1) (merge gv1 gv1)), (In (Node gv0 a2 a1) (heap_delete_max a2)), (In (Node gv0 a2 a1) (heap_delete_max a1)), (In (Node gv0 a2 a1) (join q q a2)), (In (Node gv0 a2 a1) (join q q a1)), (In (Node gv0 a2 a1) (join q gv1 a2)), (In (Node gv0 a2 a1) (join q gv1 a1)), (In (Node gv0 a2 a1) (join gv1 q a2)), (In (Node gv0 a2 a1) (join gv1 q a1)), (In (Node gv0 a2 a1) (join gv1 gv1 a2))
(In (Node gv0 a2 a1) (join gv1 gv1 a1)), (In (Node gv0 a2 a1) (insert x q)), (In (Node gv0 a2 a1) (insert x gv1)), (In (Node gv0 a2 a1) (insert n q)), (In (Node gv0 a2 a1) (insert n gv1)), (In (Node gv0 a2 a1) (insert gv0 q)), (In (Node gv0 a2 a1) (insert gv0 gv1)), (In (Node gv0 a2 a1) (carry q a2)), (In (Node gv0 a2 a1) (carry q a1)), (In (Node gv0 a2 a1) (carry gv1 a2))
(In (Node gv0 a2 a1) (carry gv1 a1)), (In (Node gv0 a2 a1) (q ++ q)), (In (Node gv0 a2 a1) (q ++ gv1)), (In (Node gv0 a2 a1) (gv1 ++ q)), (In (Node gv0 a2 a1) (gv1 ++ gv1)), (In (Node gv0 a1 a2) q), (In (Node gv0 a1 a2) gv1), (In (Node gv0 a1 a2) (a2 :: q)), (In (Node gv0 a1 a2) (a2 :: gv1)), (In (Node gv0 a1 a2) (a1 :: q))
(In (Node gv0 a1 a2) (a1 :: gv1)), (In (Node gv0 a1 a2) (merge q q)), (In (Node gv0 a1 a2) (merge q gv1)), (In (Node gv0 a1 a2) (merge gv1 q)), (In (Node gv0 a1 a2) (merge gv1 gv1)), (In (Node gv0 a1 a2) (heap_delete_max a2)), (In (Node gv0 a1 a2) (heap_delete_max a1)), (In (Node gv0 a1 a2) (join q q a2)), (In (Node gv0 a1 a2) (join q q a1)), (In (Node gv0 a1 a2) (join q gv1 a2))
(In (Node gv0 a1 a2) (join q gv1 a1)), (In (Node gv0 a1 a2) (join gv1 q a2)), (In (Node gv0 a1 a2) (join gv1 q a1)), (In (Node gv0 a1 a2) (join gv1 gv1 a2)), (In (Node gv0 a1 a2) (join gv1 gv1 a1)), (In (Node gv0 a1 a2) (insert x q)), (In (Node gv0 a1 a2) (insert x gv1)), (In (Node gv0 a1 a2) (insert n q)), (In (Node gv0 a1 a2) (insert n gv1)), (In (Node gv0 a1 a2) (insert gv0 q))
(In (Node gv0 a1 a2) (insert gv0 gv1)), (In (Node gv0 a1 a2) (carry q a2)), (In (Node gv0 a1 a2) (carry q a1)), (In (Node gv0 a1 a2) (carry gv1 a2)), (In (Node gv0 a1 a2) (carry gv1 a1)), (In (Node gv0 a1 a2) (q ++ q)), (In (Node gv0 a1 a2) (q ++ gv1)), (In (Node gv0 a1 a2) (gv1 ++ q)), (In (Node gv0 a1 a2) (gv1 ++ gv1)), (In (Node gv0 a1 a1) q)
(In (Node gv0 a1 a1) gv1), (In (Node gv0 a1 a1) (a2 :: q)), (In (Node gv0 a1 a1) (a2 :: gv1)), (In (Node gv0 a1 a1) (a1 :: q)), (In (Node gv0 a1 a1) (a1 :: gv1)), (In (Node gv0 a1 a1) (merge q q)), (In (Node gv0 a1 a1) (merge q gv1)), (In (Node gv0 a1 a1) (merge gv1 q)), (In (Node gv0 a1 a1) (merge gv1 gv1)), (In (Node gv0 a1 a1) (heap_delete_max a2))
(In (Node gv0 a1 a1) (heap_delete_max a1)), (In (Node gv0 a1 a1) (join q q a2)), (In (Node gv0 a1 a1) (join q q a1)), (In (Node gv0 a1 a1) (join q gv1 a2)), (In (Node gv0 a1 a1) (join q gv1 a1)), (In (Node gv0 a1 a1) (join gv1 q a2)), (In (Node gv0 a1 a1) (join gv1 q a1)), (In (Node gv0 a1 a1) (join gv1 gv1 a2)), (In (Node gv0 a1 a1) (join gv1 gv1 a1)), (In (Node gv0 a1 a1) (insert x q))
(In (Node gv0 a1 a1) (insert x gv1)), (In (Node gv0 a1 a1) (insert n q)), (In (Node gv0 a1 a1) (insert n gv1)), (In (Node gv0 a1 a1) (insert gv0 q)), (In (Node gv0 a1 a1) (insert gv0 gv1)), (In (Node gv0 a1 a1) (carry q a2)), (In (Node gv0 a1 a1) (carry q a1)), (In (Node gv0 a1 a1) (carry gv1 a2)), (In (Node gv0 a1 a1) (carry gv1 a1)), (In (Node gv0 a1 a1) (q ++ q))
(In (Node gv0 a1 a1) (q ++ gv1)), (In (Node gv0 a1 a1) (gv1 ++ q)), (In (Node gv0 a1 a1) (gv1 ++ gv1)), (In (smash a2 a2) q), (In (smash a2 a2) gv1), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv1)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (a1 :: gv1)), (In (smash a2 a2) (merge q q))
(In (smash a2 a2) (merge q gv1)), (In (smash a2 a2) (merge gv1 q)), (In (smash a2 a2) (merge gv1 gv1)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q gv1 a2)), (In (smash a2 a2) (join q gv1 a1)), (In (smash a2 a2) (join gv1 q a2))
(In (smash a2 a2) (join gv1 q a1)), (In (smash a2 a2) (join gv1 gv1 a2)), (In (smash a2 a2) (join gv1 gv1 a1)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv1)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv1)), (In (smash a2 a2) (insert gv0 q)), (In (smash a2 a2) (insert gv0 gv1)), (In (smash a2 a2) (carry q a2))
(In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry gv1 a2)), (In (smash a2 a2) (carry gv1 a1)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv1)), (In (smash a2 a2) (gv1 ++ q)), (In (smash a2 a2) (gv1 ++ gv1)), (In (smash a2 a1) q), (In (smash a2 a1) gv1), (In (smash a2 a1) (a2 :: q))
(In (smash a2 a1) (a2 :: gv1)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (a1 :: gv1)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv1)), (In (smash a2 a1) (merge gv1 q)), (In (smash a2 a1) (merge gv1 gv1)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join q q a2))
(In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q gv1 a2)), (In (smash a2 a1) (join q gv1 a1)), (In (smash a2 a1) (join gv1 q a2)), (In (smash a2 a1) (join gv1 q a1)), (In (smash a2 a1) (join gv1 gv1 a2)), (In (smash a2 a1) (join gv1 gv1 a1)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert x gv1)), (In (smash a2 a1) (insert n q))
(In (smash a2 a1) (insert n gv1)), (In (smash a2 a1) (insert gv0 q)), (In (smash a2 a1) (insert gv0 gv1)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry gv1 a2)), (In (smash a2 a1) (carry gv1 a1)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv1)), (In (smash a2 a1) (gv1 ++ q))
(In (smash a2 a1) (gv1 ++ gv1)), (In (smash a1 a2) q), (In (smash a1 a2) gv1), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a2 :: gv1)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv1)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (merge q gv1)), (In (smash a1 a2) (merge gv1 q))
(In (smash a1 a2) (merge gv1 gv1)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q gv1 a2)), (In (smash a1 a2) (join q gv1 a1)), (In (smash a1 a2) (join gv1 q a2)), (In (smash a1 a2) (join gv1 q a1)), (In (smash a1 a2) (join gv1 gv1 a2))
(In (smash a1 a2) (join gv1 gv1 a1)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert x gv1)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv1)), (In (smash a1 a2) (insert gv0 q)), (In (smash a1 a2) (insert gv0 gv1)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry gv1 a2))
(In (smash a1 a2) (carry gv1 a1)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv1)), (In (smash a1 a2) (gv1 ++ q)), (In (smash a1 a2) (gv1 ++ gv1)), (In (smash a1 a1) q), (In (smash a1 a1) gv1), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv1)), (In (smash a1 a1) (a1 :: q))
(In (smash a1 a1) (a1 :: gv1)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv1)), (In (smash a1 a1) (merge gv1 q)), (In (smash a1 a1) (merge gv1 gv1)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q gv1 a2))
(In (smash a1 a1) (join q gv1 a1)), (In (smash a1 a1) (join gv1 q a2)), (In (smash a1 a1) (join gv1 q a1)), (In (smash a1 a1) (join gv1 gv1 a2)), (In (smash a1 a1) (join gv1 gv1 a1)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert x gv1)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv1)), (In (smash a1 a1) (insert gv0 q))
(In (smash a1 a1) (insert gv0 gv1)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry gv1 a2)), (In (smash a1 a1) (carry gv1 a1)), (In (smash a1 a1) (q ++ q)), (In (smash a1 a1) (q ++ gv1)), (In (smash a1 a1) (gv1 ++ q)), (In (smash a1 a1) (gv1 ++ gv1)), (In Leaf q)
(In Leaf gv1), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv1)), (In Leaf (a1 :: q)), (In Leaf (a1 :: gv1)), (In Leaf (merge q q)), (In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (heap_delete_max a2))
(In Leaf (heap_delete_max a1)), (In Leaf (join q q a2)), (In Leaf (join q q a1)), (In Leaf (join q gv1 a2)), (In Leaf (join q gv1 a1)), (In Leaf (join gv1 q a2)), (In Leaf (join gv1 q a1)), (In Leaf (join gv1 gv1 a2)), (In Leaf (join gv1 gv1 a1)), (In Leaf (insert x q))
(In Leaf (insert x gv1)), (In Leaf (insert n q)), (In Leaf (insert n gv1)), (In Leaf (insert gv0 q)), (In Leaf (insert gv0 gv1)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry gv1 a2)), (In Leaf (carry gv1 a1)), (In Leaf (q ++ q))
(In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q), (x < find_max' x gv1), (x < find_max' n q), (x < find_max' n gv1), (x < find_max' gv0 q), (x < find_max' gv0 gv1), (x < length q)
(x < length gv1), (n < find_max' x q), (n < find_max' x gv1), (n < find_max' n q), (n < find_max' n gv1), (n < find_max' gv0 q), (n < find_max' gv0 gv1), (n < length q), (n < length gv1), (gv0 < find_max' x q)
(gv0 < find_max' x gv1), (gv0 < find_max' n q), (gv0 < find_max' n gv1), (gv0 < find_max' gv0 q), (gv0 < find_max' gv0 gv1), (gv0 < length q), (gv0 < length gv1), (find_max' x q < x), (find_max' x q < n), (find_max' x q < gv0)
(find_max' x q < find_max' x gv1), (find_max' x q < find_max' n q), (find_max' x q < find_max' n gv1), (find_max' x q < find_max' gv0 q), (find_max' x q < find_max' gv0 gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < n), (find_max' x gv1 < gv0)
(find_max' x gv1 < find_max' x q), (find_max' x gv1 < find_max' n q), (find_max' x gv1 < find_max' n gv1), (find_max' x gv1 < find_max' gv0 q), (find_max' x gv1 < find_max' gv0 gv1), (find_max' x gv1 < length q), (find_max' x gv1 < length gv1), (find_max' n q < x), (find_max' n q < n), (find_max' n q < gv0)
(find_max' n q < find_max' x q), (find_max' n q < find_max' x gv1), (find_max' n q < find_max' n gv1), (find_max' n q < find_max' gv0 q), (find_max' n q < find_max' gv0 gv1), (find_max' n q < length q), (find_max' n q < length gv1), (find_max' n gv1 < x), (find_max' n gv1 < n), (find_max' n gv1 < gv0)
(find_max' n gv1 < find_max' x q), (find_max' n gv1 < find_max' x gv1), (find_max' n gv1 < find_max' n q), (find_max' n gv1 < find_max' gv0 q), (find_max' n gv1 < find_max' gv0 gv1), (find_max' n gv1 < length q), (find_max' n gv1 < length gv1), (find_max' gv0 q < x), (find_max' gv0 q < n), (find_max' gv0 q < gv0)
(find_max' gv0 q < find_max' x q), (find_max' gv0 q < find_max' x gv1), (find_max' gv0 q < find_max' n q), (find_max' gv0 q < find_max' n gv1), (find_max' gv0 q < find_max' gv0 gv1), (find_max' gv0 q < length q), (find_max' gv0 q < length gv1), (find_max' gv0 gv1 < x), (find_max' gv0 gv1 < n), (find_max' gv0 gv1 < gv0)
(find_max' gv0 gv1 < find_max' x q), (find_max' gv0 gv1 < find_max' x gv1), (find_max' gv0 gv1 < find_max' n q), (find_max' gv0 gv1 < find_max' n gv1), (find_max' gv0 gv1 < find_max' gv0 q), (find_max' gv0 gv1 < length q), (find_max' gv0 gv1 < length gv1), (length q < x), (length q < n), (length q < gv0)
(length q < find_max' x q), (length q < find_max' x gv1), (length q < find_max' n q), (length q < find_max' n gv1), (length q < find_max' gv0 q), (length q < find_max' gv0 gv1), (length q < length gv1), (length gv1 < x), (length gv1 < n), (length gv1 < gv0)
(length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < find_max' n q), (length gv1 < find_max' n gv1), (length gv1 < find_max' gv0 q), (length gv1 < find_max' gv0 gv1), (length gv1 < length q), (x <= find_max' x q), (x <= find_max' x gv1), (x <= find_max' n q)
(x <= find_max' n gv1), (x <= find_max' gv0 q), (x <= find_max' gv0 gv1), (x <= length q), (x <= length gv1), (n <= find_max' x q), (n <= find_max' x gv1), (n <= find_max' n q), (n <= find_max' n gv1), (n <= find_max' gv0 q)
(n <= find_max' gv0 gv1), (n <= length q), (n <= length gv1), (gv0 <= find_max' x q), (gv0 <= find_max' x gv1), (gv0 <= find_max' n q), (gv0 <= find_max' n gv1), (gv0 <= find_max' gv0 q), (gv0 <= find_max' gv0 gv1), (gv0 <= length q)
(gv0 <= length gv1), (find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= gv0), (find_max' x q <= find_max' x gv1), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv1), (find_max' x q <= find_max' gv0 q), (find_max' x q <= find_max' gv0 gv1), (find_max' x q <= length q)
(find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= n), (find_max' x gv1 <= gv0), (find_max' x gv1 <= find_max' x q), (find_max' x gv1 <= find_max' n q), (find_max' x gv1 <= find_max' n gv1), (find_max' x gv1 <= find_max' gv0 q), (find_max' x gv1 <= find_max' gv0 gv1), (find_max' x gv1 <= length q)
(find_max' x gv1 <= length gv1), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= gv0), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv1), (find_max' n q <= find_max' n gv1), (find_max' n q <= find_max' gv0 q), (find_max' n q <= find_max' gv0 gv1), (find_max' n q <= length q)
(find_max' n q <= length gv1), (find_max' n gv1 <= x), (find_max' n gv1 <= n), (find_max' n gv1 <= gv0), (find_max' n gv1 <= find_max' x q), (find_max' n gv1 <= find_max' x gv1), (find_max' n gv1 <= find_max' n q), (find_max' n gv1 <= find_max' gv0 q), (find_max' n gv1 <= find_max' gv0 gv1), (find_max' n gv1 <= length q)
(find_max' n gv1 <= length gv1), (find_max' gv0 q <= x), (find_max' gv0 q <= n), (find_max' gv0 q <= gv0), (find_max' gv0 q <= find_max' x q), (find_max' gv0 q <= find_max' x gv1), (find_max' gv0 q <= find_max' n q), (find_max' gv0 q <= find_max' n gv1), (find_max' gv0 q <= find_max' gv0 gv1), (find_max' gv0 q <= length q)
(find_max' gv0 q <= length gv1), (find_max' gv0 gv1 <= x), (find_max' gv0 gv1 <= n), (find_max' gv0 gv1 <= gv0), (find_max' gv0 gv1 <= find_max' x q), (find_max' gv0 gv1 <= find_max' x gv1), (find_max' gv0 gv1 <= find_max' n q), (find_max' gv0 gv1 <= find_max' n gv1), (find_max' gv0 gv1 <= find_max' gv0 q), (find_max' gv0 gv1 <= length q)
(find_max' gv0 gv1 <= length gv1), (length q <= x), (length q <= n), (length q <= gv0), (length q <= find_max' x q), (length q <= find_max' x gv1), (length q <= find_max' n q), (length q <= find_max' n gv1), (length q <= find_max' gv0 q), (length q <= find_max' gv0 gv1)
(length q <= length gv1), (length gv1 <= x), (length gv1 <= n), (length gv1 <= gv0), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1), (length gv1 <= find_max' n q), (length gv1 <= find_max' n gv1), (length gv1 <= find_max' gv0 q), (length gv1 <= find_max' gv0 gv1)
(length gv1 <= length q), (~ priq q), (~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ priqq n q), (~ priqq n gv1), (~ priqq gv0 q), (~ priqq gv0 gv1), (~ pow2heap x a2)
(~ pow2heap x a1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap gv0 a2), (~ pow2heap gv0 a1), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x gv0 a2)
(~ pow2heapp x gv0 a1), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n gv0 a2), (~ pow2heapp n gv0 a1), (~ pow2heapp gv0 x a2), (~ pow2heapp gv0 x a1), (~ pow2heapp gv0 n a2)
(~ pow2heapp gv0 n a1), (~ pow2heapp gv0 gv0 a2), (~ pow2heapp gv0 gv0 a1), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ In a2 q), (~ In a2 gv1), (~ In a1 q)
(~ In a1 gv1), (~ x < x), (~ x < n), (~ x < gv0), (~ n < x), (~ n < n), (~ n < gv0), (~ gv0 < x), (~ gv0 < n), (~ gv0 < gv0)
(~ x <= x), (~ x <= n), (~ x <= gv0), (~ n <= x), (~ n <= n), (~ n <= gv0), (~ gv0 <= x), (~ gv0 <= n), (~ gv0 <= gv0), (a2 <> a2)
(a2 <> a1), (a1 <> a2), (a1 <> a1), (q <> q), (q <> gv1), (gv1 <> q), (gv1 <> gv1), (x <> x), (x <> n), (x <> gv0)
(n <> x), (n <> n), (n <> gv0), (gv0 <> x), (gv0 <> n), (gv0 <> gv0), (None = Some q), (None = Some gv1), (a2 :: q = q), (a2 :: q = gv1)
(a2 :: q = merge q q), (a2 :: q = merge q gv1), (a2 :: q = merge gv1 q), (a2 :: q = merge gv1 gv1), (a2 :: q = heap_delete_max a2), (a2 :: q = heap_delete_max a1), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q gv1 a2), (a2 :: q = join q gv1 a1)
(a2 :: q = join gv1 q a2), (a2 :: q = join gv1 q a1), (a2 :: q = join gv1 gv1 a2), (a2 :: q = join gv1 gv1 a1), (a2 :: q = insert x q), (a2 :: q = insert x gv1), (a2 :: q = insert n q), (a2 :: q = insert n gv1), (a2 :: q = insert gv0 q), (a2 :: q = insert gv0 gv1)
(a2 :: q = carry q a2), (a2 :: q = carry q a1), (a2 :: q = carry gv1 a2), (a2 :: q = carry gv1 a1), (a2 :: q = q ++ q), (a2 :: q = q ++ gv1), (a2 :: q = gv1 ++ q), (a2 :: q = gv1 ++ gv1), (a2 :: q = []), (a2 :: gv1 = q)
(a2 :: gv1 = gv1), (a2 :: gv1 = merge q q), (a2 :: gv1 = merge q gv1), (a2 :: gv1 = merge gv1 q), (a2 :: gv1 = merge gv1 gv1), (a2 :: gv1 = heap_delete_max a2), (a2 :: gv1 = heap_delete_max a1), (a2 :: gv1 = join q q a2), (a2 :: gv1 = join q q a1), (a2 :: gv1 = join q gv1 a2)
(a2 :: gv1 = join q gv1 a1), (a2 :: gv1 = join gv1 q a2), (a2 :: gv1 = join gv1 q a1), (a2 :: gv1 = join gv1 gv1 a2), (a2 :: gv1 = join gv1 gv1 a1), (a2 :: gv1 = insert x q), (a2 :: gv1 = insert x gv1), (a2 :: gv1 = insert n q), (a2 :: gv1 = insert n gv1), (a2 :: gv1 = insert gv0 q)
(a2 :: gv1 = insert gv0 gv1), (a2 :: gv1 = carry q a2), (a2 :: gv1 = carry q a1), (a2 :: gv1 = carry gv1 a2), (a2 :: gv1 = carry gv1 a1), (a2 :: gv1 = q ++ q), (a2 :: gv1 = q ++ gv1), (a2 :: gv1 = gv1 ++ q), (a2 :: gv1 = gv1 ++ gv1), (a2 :: gv1 = [])
(a1 :: q = q), (a1 :: q = gv1), (a1 :: q = merge q q), (a1 :: q = merge q gv1), (a1 :: q = merge gv1 q), (a1 :: q = merge gv1 gv1), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = join q q a2), (a1 :: q = join q q a1)
(a1 :: q = join q gv1 a2), (a1 :: q = join q gv1 a1), (a1 :: q = join gv1 q a2), (a1 :: q = join gv1 q a1), (a1 :: q = join gv1 gv1 a2), (a1 :: q = join gv1 gv1 a1), (a1 :: q = insert x q), (a1 :: q = insert x gv1), (a1 :: q = insert n q), (a1 :: q = insert n gv1)
(a1 :: q = insert gv0 q), (a1 :: q = insert gv0 gv1), (a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry gv1 a2), (a1 :: q = carry gv1 a1), (a1 :: q = q ++ q), (a1 :: q = q ++ gv1), (a1 :: q = gv1 ++ q), (a1 :: q = gv1 ++ gv1)
(a1 :: q = []), (a1 :: gv1 = q), (a1 :: gv1 = gv1), (a1 :: gv1 = merge q q), (a1 :: gv1 = merge q gv1), (a1 :: gv1 = merge gv1 q), (a1 :: gv1 = merge gv1 gv1), (a1 :: gv1 = heap_delete_max a2), (a1 :: gv1 = heap_delete_max a1), (a1 :: gv1 = join q q a2)
(a1 :: gv1 = join q q a1), (a1 :: gv1 = join q gv1 a2), (a1 :: gv1 = join q gv1 a1), (a1 :: gv1 = join gv1 q a2), (a1 :: gv1 = join gv1 q a1), (a1 :: gv1 = join gv1 gv1 a2), (a1 :: gv1 = join gv1 gv1 a1), (a1 :: gv1 = insert x q), (a1 :: gv1 = insert x gv1), (a1 :: gv1 = insert n q)
(a1 :: gv1 = insert n gv1), (a1 :: gv1 = insert gv0 q), (a1 :: gv1 = insert gv0 gv1), (a1 :: gv1 = carry q a2), (a1 :: gv1 = carry q a1), (a1 :: gv1 = carry gv1 a2), (a1 :: gv1 = carry gv1 a1), (a1 :: gv1 = q ++ q), (a1 :: gv1 = q ++ gv1), (a1 :: gv1 = gv1 ++ q)
(a1 :: gv1 = gv1 ++ gv1), (a1 :: gv1 = []), (merge q q = q), (merge q q = gv1), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q gv1 a2), (merge q q = join q gv1 a1)
(merge q q = join gv1 q a2), (merge q q = join gv1 q a1), (merge q q = join gv1 gv1 a2), (merge q q = join gv1 gv1 a1), (merge q q = insert x q), (merge q q = insert x gv1), (merge q q = insert n q), (merge q q = insert n gv1), (merge q q = insert gv0 q), (merge q q = insert gv0 gv1)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry gv1 a2), (merge q q = carry gv1 a1), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1), (merge q gv1 = q), (merge q gv1 = gv1)
(merge q gv1 = heap_delete_max a2), (merge q gv1 = heap_delete_max a1), (merge q gv1 = join q q a2), (merge q gv1 = join q q a1), (merge q gv1 = join q gv1 a2), (merge q gv1 = join q gv1 a1), (merge q gv1 = join gv1 q a2), (merge q gv1 = join gv1 q a1), (merge q gv1 = join gv1 gv1 a2), (merge q gv1 = join gv1 gv1 a1)
(merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = insert n q), (merge q gv1 = insert n gv1), (merge q gv1 = insert gv0 q), (merge q gv1 = insert gv0 gv1), (merge q gv1 = carry q a2), (merge q gv1 = carry q a1), (merge q gv1 = carry gv1 a2), (merge q gv1 = carry gv1 a1)
(merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q), (merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = heap_delete_max a2), (merge gv1 q = heap_delete_max a1), (merge gv1 q = join q q a2), (merge gv1 q = join q q a1)
(merge gv1 q = join q gv1 a2), (merge gv1 q = join q gv1 a1), (merge gv1 q = join gv1 q a2), (merge gv1 q = join gv1 q a1), (merge gv1 q = join gv1 gv1 a2), (merge gv1 q = join gv1 gv1 a1), (merge gv1 q = insert x q), (merge gv1 q = insert x gv1), (merge gv1 q = insert n q), (merge gv1 q = insert n gv1)
(merge gv1 q = insert gv0 q), (merge gv1 q = insert gv0 gv1), (merge gv1 q = carry q a2), (merge gv1 q = carry q a1), (merge gv1 q = carry gv1 a2), (merge gv1 q = carry gv1 a1), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1)
(merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = heap_delete_max a2), (merge gv1 gv1 = heap_delete_max a1), (merge gv1 gv1 = join q q a2), (merge gv1 gv1 = join q q a1), (merge gv1 gv1 = join q gv1 a2), (merge gv1 gv1 = join q gv1 a1), (merge gv1 gv1 = join gv1 q a2), (merge gv1 gv1 = join gv1 q a1)
(merge gv1 gv1 = join gv1 gv1 a2), (merge gv1 gv1 = join gv1 gv1 a1), (merge gv1 gv1 = insert x q), (merge gv1 gv1 = insert x gv1), (merge gv1 gv1 = insert n q), (merge gv1 gv1 = insert n gv1), (merge gv1 gv1 = insert gv0 q), (merge gv1 gv1 = insert gv0 gv1), (merge gv1 gv1 = carry q a2), (merge gv1 gv1 = carry q a1)
(merge gv1 gv1 = carry gv1 a2), (merge gv1 gv1 = carry gv1 a1), (merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1), (heap_delete_max a2 = q), (heap_delete_max a2 = gv1), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1)
(heap_delete_max a2 = carry gv1 a2), (heap_delete_max a2 = carry gv1 a1), (heap_delete_max a2 = q ++ q), (heap_delete_max a2 = q ++ gv1), (heap_delete_max a2 = gv1 ++ q), (heap_delete_max a2 = gv1 ++ gv1), (heap_delete_max a1 = q), (heap_delete_max a1 = gv1), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1)
(heap_delete_max a1 = carry gv1 a2), (heap_delete_max a1 = carry gv1 a1), (heap_delete_max a1 = q ++ q), (heap_delete_max a1 = q ++ gv1), (heap_delete_max a1 = gv1 ++ q), (heap_delete_max a1 = gv1 ++ gv1), (join q q a2 = q), (join q q a2 = gv1), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1)
(join q q a2 = insert x q), (join q q a2 = insert x gv1), (join q q a2 = insert n q), (join q q a2 = insert n gv1), (join q q a2 = insert gv0 q), (join q q a2 = insert gv0 gv1), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = carry gv1 a2), (join q q a2 = carry gv1 a1)
(join q q a2 = q ++ q), (join q q a2 = q ++ gv1), (join q q a2 = gv1 ++ q), (join q q a2 = gv1 ++ gv1), (join q q a1 = q), (join q q a1 = gv1), (join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = insert x q), (join q q a1 = insert x gv1)
(join q q a1 = insert n q), (join q q a1 = insert n gv1), (join q q a1 = insert gv0 q), (join q q a1 = insert gv0 gv1), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry gv1 a2), (join q q a1 = carry gv1 a1), (join q q a1 = q ++ q), (join q q a1 = q ++ gv1)
(join q q a1 = gv1 ++ q), (join q q a1 = gv1 ++ gv1), (join q gv1 a2 = q), (join q gv1 a2 = gv1), (join q gv1 a2 = heap_delete_max a2), (join q gv1 a2 = heap_delete_max a1), (join q gv1 a2 = insert x q), (join q gv1 a2 = insert x gv1), (join q gv1 a2 = insert n q), (join q gv1 a2 = insert n gv1)
(join q gv1 a2 = insert gv0 q), (join q gv1 a2 = insert gv0 gv1), (join q gv1 a2 = carry q a2), (join q gv1 a2 = carry q a1), (join q gv1 a2 = carry gv1 a2), (join q gv1 a2 = carry gv1 a1), (join q gv1 a2 = q ++ q), (join q gv1 a2 = q ++ gv1), (join q gv1 a2 = gv1 ++ q), (join q gv1 a2 = gv1 ++ gv1)
(join q gv1 a1 = q), (join q gv1 a1 = gv1), (join q gv1 a1 = heap_delete_max a2), (join q gv1 a1 = heap_delete_max a1), (join q gv1 a1 = insert x q), (join q gv1 a1 = insert x gv1), (join q gv1 a1 = insert n q), (join q gv1 a1 = insert n gv1), (join q gv1 a1 = insert gv0 q), (join q gv1 a1 = insert gv0 gv1)
(join q gv1 a1 = carry q a2), (join q gv1 a1 = carry q a1), (join q gv1 a1 = carry gv1 a2), (join q gv1 a1 = carry gv1 a1), (join q gv1 a1 = q ++ q), (join q gv1 a1 = q ++ gv1), (join q gv1 a1 = gv1 ++ q), (join q gv1 a1 = gv1 ++ gv1), (join gv1 q a2 = q), (join gv1 q a2 = gv1)
(join gv1 q a2 = heap_delete_max a2), (join gv1 q a2 = heap_delete_max a1), (join gv1 q a2 = insert x q), (join gv1 q a2 = insert x gv1), (join gv1 q a2 = insert n q), (join gv1 q a2 = insert n gv1), (join gv1 q a2 = insert gv0 q), (join gv1 q a2 = insert gv0 gv1), (join gv1 q a2 = carry q a2), (join gv1 q a2 = carry q a1)
(join gv1 q a2 = carry gv1 a2), (join gv1 q a2 = carry gv1 a1), (join gv1 q a2 = q ++ q), (join gv1 q a2 = q ++ gv1), (join gv1 q a2 = gv1 ++ q), (join gv1 q a2 = gv1 ++ gv1), (join gv1 q a1 = q), (join gv1 q a1 = gv1), (join gv1 q a1 = heap_delete_max a2), (join gv1 q a1 = heap_delete_max a1)
(join gv1 q a1 = insert x q), (join gv1 q a1 = insert x gv1), (join gv1 q a1 = insert n q), (join gv1 q a1 = insert n gv1), (join gv1 q a1 = insert gv0 q), (join gv1 q a1 = insert gv0 gv1), (join gv1 q a1 = carry q a2), (join gv1 q a1 = carry q a1), (join gv1 q a1 = carry gv1 a2), (join gv1 q a1 = carry gv1 a1)
(join gv1 q a1 = q ++ q), (join gv1 q a1 = q ++ gv1), (join gv1 q a1 = gv1 ++ q), (join gv1 q a1 = gv1 ++ gv1), (join gv1 gv1 a2 = q), (join gv1 gv1 a2 = gv1), (join gv1 gv1 a2 = heap_delete_max a2), (join gv1 gv1 a2 = heap_delete_max a1), (join gv1 gv1 a2 = insert x q), (join gv1 gv1 a2 = insert x gv1)
(join gv1 gv1 a2 = insert n q), (join gv1 gv1 a2 = insert n gv1), (join gv1 gv1 a2 = insert gv0 q), (join gv1 gv1 a2 = insert gv0 gv1), (join gv1 gv1 a2 = carry q a2), (join gv1 gv1 a2 = carry q a1), (join gv1 gv1 a2 = carry gv1 a2), (join gv1 gv1 a2 = carry gv1 a1), (join gv1 gv1 a2 = q ++ q), (join gv1 gv1 a2 = q ++ gv1)
(join gv1 gv1 a2 = gv1 ++ q), (join gv1 gv1 a2 = gv1 ++ gv1), (join gv1 gv1 a1 = q), (join gv1 gv1 a1 = gv1), (join gv1 gv1 a1 = heap_delete_max a2), (join gv1 gv1 a1 = heap_delete_max a1), (join gv1 gv1 a1 = insert x q), (join gv1 gv1 a1 = insert x gv1), (join gv1 gv1 a1 = insert n q), (join gv1 gv1 a1 = insert n gv1)
(join gv1 gv1 a1 = insert gv0 q), (join gv1 gv1 a1 = insert gv0 gv1), (join gv1 gv1 a1 = carry q a2), (join gv1 gv1 a1 = carry q a1), (join gv1 gv1 a1 = carry gv1 a2), (join gv1 gv1 a1 = carry gv1 a1), (join gv1 gv1 a1 = q ++ q), (join gv1 gv1 a1 = q ++ gv1), (join gv1 gv1 a1 = gv1 ++ q), (join gv1 gv1 a1 = gv1 ++ gv1)
(insert x q = q), (insert x q = gv1), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry gv1 a2), (insert x q = carry gv1 a1), (insert x q = q ++ q), (insert x q = q ++ gv1)
(insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1), (insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = heap_delete_max a2), (insert x gv1 = heap_delete_max a1), (insert x gv1 = carry q a2), (insert x gv1 = carry q a1), (insert x gv1 = carry gv1 a2), (insert x gv1 = carry gv1 a1)
(insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q), (insert x gv1 = gv1 ++ gv1), (insert n q = q), (insert n q = gv1), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1), (insert n q = carry q a2), (insert n q = carry q a1)
(insert n q = carry gv1 a2), (insert n q = carry gv1 a1), (insert n q = q ++ q), (insert n q = q ++ gv1), (insert n q = gv1 ++ q), (insert n q = gv1 ++ gv1), (insert n gv1 = q), (insert n gv1 = gv1), (insert n gv1 = heap_delete_max a2), (insert n gv1 = heap_delete_max a1)
(insert n gv1 = carry q a2), (insert n gv1 = carry q a1), (insert n gv1 = carry gv1 a2), (insert n gv1 = carry gv1 a1), (insert n gv1 = q ++ q), (insert n gv1 = q ++ gv1), (insert n gv1 = gv1 ++ q), (insert n gv1 = gv1 ++ gv1), (insert gv0 q = q), (insert gv0 q = gv1)
(insert gv0 q = heap_delete_max a2), (insert gv0 q = heap_delete_max a1), (insert gv0 q = carry q a2), (insert gv0 q = carry q a1), (insert gv0 q = carry gv1 a2), (insert gv0 q = carry gv1 a1), (insert gv0 q = q ++ q), (insert gv0 q = q ++ gv1), (insert gv0 q = gv1 ++ q), (insert gv0 q = gv1 ++ gv1)
(insert gv0 gv1 = q), (insert gv0 gv1 = gv1), (insert gv0 gv1 = heap_delete_max a2), (insert gv0 gv1 = heap_delete_max a1), (insert gv0 gv1 = carry q a2), (insert gv0 gv1 = carry q a1), (insert gv0 gv1 = carry gv1 a2), (insert gv0 gv1 = carry gv1 a1), (insert gv0 gv1 = q ++ q), (insert gv0 gv1 = q ++ gv1)
(insert gv0 gv1 = gv1 ++ q), (insert gv0 gv1 = gv1 ++ gv1), (carry q a2 = q), (carry q a2 = gv1), (carry q a2 = q ++ q), (carry q a2 = q ++ gv1), (carry q a2 = gv1 ++ q), (carry q a2 = gv1 ++ gv1), (carry q a1 = q), (carry q a1 = gv1)
(carry q a1 = q ++ q), (carry q a1 = q ++ gv1), (carry q a1 = gv1 ++ q), (carry q a1 = gv1 ++ gv1), (carry gv1 a2 = q), (carry gv1 a2 = gv1), (carry gv1 a2 = q ++ q), (carry gv1 a2 = q ++ gv1), (carry gv1 a2 = gv1 ++ q), (carry gv1 a2 = gv1 ++ gv1)
(carry gv1 a1 = q), (carry gv1 a1 = gv1), (carry gv1 a1 = q ++ q), (carry gv1 a1 = q ++ gv1), (carry gv1 a1 = gv1 ++ q), (carry gv1 a1 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1)
(gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q), (gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1)
([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = join q q a2), ([] = join q q a1), ([] = join q gv1 a2), ([] = join q gv1 a1), ([] = join gv1 q a2), ([] = join gv1 q a1), ([] = join gv1 gv1 a2), ([] = join gv1 gv1 a1)
([] = insert x q), ([] = insert x gv1), ([] = insert n q), ([] = insert n gv1), ([] = insert gv0 q), ([] = insert gv0 gv1), ([] = carry q a2), ([] = carry q a1), ([] = carry gv1 a2), ([] = carry gv1 a1)
([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv1), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv1), ((q, q) = delete_max_aux gv0 q), ((q, q) = delete_max_aux gv0 gv1)
((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux n q), ((q, gv1) = delete_max_aux n gv1), ((q, gv1) = delete_max_aux gv0 q), ((q, gv1) = delete_max_aux gv0 gv1), ((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, q) = delete_max_aux n q), ((gv1, q) = delete_max_aux n gv1)
((gv1, q) = delete_max_aux gv0 q), ((gv1, q) = delete_max_aux gv0 gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux n q), ((gv1, gv1) = delete_max_aux n gv1), ((gv1, gv1) = delete_max_aux gv0 q), ((gv1, gv1) = delete_max_aux gv0 gv1), (Node x a2 a2 = a2), (Node x a2 a2 = a1)
(Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1)
(Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = smash a2 a2), (Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1)
(Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a1 = a2), (Node n a2 a1 = a1)
(Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1)
(Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node gv0 a2 a2 = a2), (Node gv0 a2 a2 = a1), (Node gv0 a2 a2 = smash a2 a2), (Node gv0 a2 a2 = smash a2 a1)
(Node gv0 a2 a2 = smash a1 a2), (Node gv0 a2 a2 = smash a1 a1), (Node gv0 a2 a1 = a2), (Node gv0 a2 a1 = a1), (Node gv0 a2 a1 = smash a2 a2), (Node gv0 a2 a1 = smash a2 a1), (Node gv0 a2 a1 = smash a1 a2), (Node gv0 a2 a1 = smash a1 a1), (Node gv0 a1 a2 = a2), (Node gv0 a1 a2 = a1)
(Node gv0 a1 a2 = smash a2 a2), (Node gv0 a1 a2 = smash a2 a1), (Node gv0 a1 a2 = smash a1 a2), (Node gv0 a1 a2 = smash a1 a1), (Node gv0 a1 a1 = a2), (Node gv0 a1 a1 = a1), (Node gv0 a1 a1 = smash a2 a2), (Node gv0 a1 a1 = smash a2 a1), (Node gv0 a1 a1 = smash a1 a2), (Node gv0 a1 a1 = smash a1 a1)
(smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1)
(Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node gv0 a2 a2), (Leaf = Node gv0 a2 a1), (Leaf = Node gv0 a1 a2), (Leaf = Node gv0 a1 a1)
(Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' x q = x), (find_max' x q = n), (find_max' x q = gv0), (find_max' x gv1 = x), (find_max' x gv1 = n), (find_max' x gv1 = gv0)
(find_max' n q = x), (find_max' n q = n), (find_max' n q = gv0), (find_max' n gv1 = x), (find_max' n gv1 = n), (find_max' n gv1 = gv0), (find_max' gv0 q = x), (find_max' gv0 q = n), (find_max' gv0 q = gv0), (find_max' gv0 gv1 = x)
(find_max' gv0 gv1 = n), (find_max' gv0 gv1 = gv0), (length q = x), (length q = n), (length q = gv0), (length q = find_max' x q), (length q = find_max' x gv1), (length q = find_max' n q), (length q = find_max' n gv1), (length q = find_max' gv0 q)
(length q = find_max' gv0 gv1), (length gv1 = x), (length gv1 = n), (length gv1 = gv0), (length gv1 = find_max' x q), (length gv1 = find_max' x gv1), (length gv1 = find_max' n q), (length gv1 = find_max' n gv1), (length gv1 = find_max' gv0 q), (length gv1 = find_max' gv0 gv1)
(Some x = find_max q), (Some x = find_max gv1), (Some n = find_max q), (Some n = find_max gv1), (Some gv0 = find_max q), (Some gv0 = find_max gv1), (None = Some x), (None = Some n), (None = Some gv0), (None = find_max q)
(None = find_max gv1), (None = Some a2), (None = Some a1), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (x >=? gv0)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? x) = (n >=? gv0)), ((x >? x) = (gv0 >=? x))
((x >? x) = (gv0 >=? n)), ((x >? x) = (gv0 >=? gv0)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (x >=? gv0)), ((x >? n) = (n >=? x)), ((x >? n) = (n >=? n)), ((x >? n) = (n >=? gv0)), ((x >? n) = (gv0 >=? x)), ((x >? n) = (gv0 >=? n))
((x >? n) = (gv0 >=? gv0)), ((x >? gv0) = (x >=? x)), ((x >? gv0) = (x >=? n)), ((x >? gv0) = (x >=? gv0)), ((x >? gv0) = (n >=? x)), ((x >? gv0) = (n >=? n)), ((x >? gv0) = (n >=? gv0)), ((x >? gv0) = (gv0 >=? x)), ((x >? gv0) = (gv0 >=? n)), ((x >? gv0) = (gv0 >=? gv0))
((n >? x) = (x >=? x)), ((n >? x) = (x >=? n)), ((n >? x) = (x >=? gv0)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? x) = (n >=? gv0)), ((n >? x) = (gv0 >=? x)), ((n >? x) = (gv0 >=? n)), ((n >? x) = (gv0 >=? gv0)), ((n >? n) = (x >=? x))
((n >? n) = (x >=? n)), ((n >? n) = (x >=? gv0)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n)), ((n >? n) = (n >=? gv0)), ((n >? n) = (gv0 >=? x)), ((n >? n) = (gv0 >=? n)), ((n >? n) = (gv0 >=? gv0)), ((n >? gv0) = (x >=? x)), ((n >? gv0) = (x >=? n))
((n >? gv0) = (x >=? gv0)), ((n >? gv0) = (n >=? x)), ((n >? gv0) = (n >=? n)), ((n >? gv0) = (n >=? gv0)), ((n >? gv0) = (gv0 >=? x)), ((n >? gv0) = (gv0 >=? n)), ((n >? gv0) = (gv0 >=? gv0)), ((gv0 >? x) = (x >=? x)), ((gv0 >? x) = (x >=? n)), ((gv0 >? x) = (x >=? gv0))
((gv0 >? x) = (n >=? x)), ((gv0 >? x) = (n >=? n)), ((gv0 >? x) = (n >=? gv0)), ((gv0 >? x) = (gv0 >=? x)), ((gv0 >? x) = (gv0 >=? n)), ((gv0 >? x) = (gv0 >=? gv0)), ((gv0 >? n) = (x >=? x)), ((gv0 >? n) = (x >=? n)), ((gv0 >? n) = (x >=? gv0)), ((gv0 >? n) = (n >=? x))
((gv0 >? n) = (n >=? n)), ((gv0 >? n) = (n >=? gv0)), ((gv0 >? n) = (gv0 >=? x)), ((gv0 >? n) = (gv0 >=? n)), ((gv0 >? n) = (gv0 >=? gv0)), ((gv0 >? gv0) = (x >=? x)), ((gv0 >? gv0) = (x >=? n)), ((gv0 >? gv0) = (x >=? gv0)), ((gv0 >? gv0) = (n >=? x)), ((gv0 >? gv0) = (n >=? n))
((gv0 >? gv0) = (n >=? gv0)), ((gv0 >? gv0) = (gv0 >=? x)), ((gv0 >? gv0) = (gv0 >=? n)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 7 (7)
(priq q), (priq gv2), (priqq n q), (priqq n gv2), (priqq x q), (priqq x gv2), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv5), (pow2heap x a2)
(pow2heap x a1), (pow2heap x gv5), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv5), (pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n x gv5), (pow2heapp x n a2), (pow2heapp x n a1)
(pow2heapp x n gv5), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x x gv5), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2), (In a2 q), (In a2 gv2)
(In a1 q), (In a1 gv2), (In gv5 q), (In gv5 gv2), (n < n), (n < x), (x < n), (x < x), (n <= n), (n <= x)
(x <= n), (x <= x), (a2 = a2), (a2 = a1), (a2 = gv5), (a1 = a2), (a1 = a1), (a1 = gv5), (gv5 = a2), (gv5 = a1)
(gv5 = gv5), (n = n), (n = x), (x = n), (x = x), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2), (false = (n >? n))
(false = (n >? x)), (false = (x >? n)), (false = (x >? x)), (false = (n >=? n)), (false = (n >=? x)), (false = (x >=? n)), (false = (x >=? x)), (true = (n >? n)), (true = (n >? x)), (true = (x >? n))
(true = (x >? x)), (true = (n >=? n)), (true = (n >=? x)), (true = (x >=? n)), (true = (x >=? x)), (Abs q []), (Abs gv2 []), (Abs (a2 :: q) []), (Abs (a2 :: gv2) []), (Abs (a1 :: q) [])
(Abs (a1 :: gv2) []), (Abs (gv5 :: q) []), (Abs (gv5 :: gv2) []), (Abs (merge q q) []), (Abs (merge q gv2) []), (Abs (merge gv2 q) []), (Abs (merge gv2 gv2) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max gv5) [])
(Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q q gv5) []), (Abs (join q gv2 a2) []), (Abs (join q gv2 a1) []), (Abs (join q gv2 gv5) []), (Abs (join gv2 q a2) []), (Abs (join gv2 q a1) []), (Abs (join gv2 q gv5) []), (Abs (join gv2 gv2 a2) [])
(Abs (join gv2 gv2 a1) []), (Abs (join gv2 gv2 gv5) []), (Abs (insert n q) []), (Abs (insert n gv2) []), (Abs (insert x q) []), (Abs (insert x gv2) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry q gv5) []), (Abs (carry gv2 a2) [])
(Abs (carry gv2 a1) []), (Abs (carry gv2 gv5) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (a2 :: q) [])
(priqueue_elems (a2 :: gv2) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (a1 :: gv2) []), (priqueue_elems (gv5 :: q) []), (priqueue_elems (gv5 :: gv2) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (heap_delete_max a2) [])
(priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv5) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) []), (priqueue_elems (join q q gv5) []), (priqueue_elems (join q gv2 a2) []), (priqueue_elems (join q gv2 a1) []), (priqueue_elems (join q gv2 gv5) []), (priqueue_elems (join gv2 q a2) []), (priqueue_elems (join gv2 q a1) [])
(priqueue_elems (join gv2 q gv5) []), (priqueue_elems (join gv2 gv2 a2) []), (priqueue_elems (join gv2 gv2 a1) []), (priqueue_elems (join gv2 gv2 gv5) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv2) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv2) []), (priqueue_elems (carry q a2) []), (priqueue_elems (carry q a1) [])
(priqueue_elems (carry q gv5) []), (priqueue_elems (carry gv2 a2) []), (priqueue_elems (carry gv2 a1) []), (priqueue_elems (carry gv2 gv5) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) []), (priqueue_elems (gv2 ++ gv2) []), (priqueue_elems [] []), (tree_elems a2 [])
(tree_elems a1 []), (tree_elems gv5 []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv5) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv5) []), (tree_elems (Node n gv5 a2) []), (tree_elems (Node n gv5 a1) [])
(tree_elems (Node n gv5 gv5) []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a2 gv5) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node x a1 gv5) []), (tree_elems (Node x gv5 a2) []), (tree_elems (Node x gv5 a1) []), (tree_elems (Node x gv5 gv5) [])
(tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv5) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv5) []), (tree_elems (smash gv5 a2) []), (tree_elems (smash gv5 a1) []), (tree_elems (smash gv5 gv5) []), (tree_elems Leaf [])
(priq (a2 :: q)), (priq (a2 :: gv2)), (priq (a1 :: q)), (priq (a1 :: gv2)), (priq (gv5 :: q)), (priq (gv5 :: gv2)), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2))
(priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max gv5)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q q gv5)), (priq (join q gv2 a2)), (priq (join q gv2 a1)), (priq (join q gv2 gv5)), (priq (join gv2 q a2))
(priq (join gv2 q a1)), (priq (join gv2 q gv5)), (priq (join gv2 gv2 a2)), (priq (join gv2 gv2 a1)), (priq (join gv2 gv2 gv5)), (priq (insert n q)), (priq (insert n gv2)), (priq (insert x q)), (priq (insert x gv2)), (priq (carry q a2))
(priq (carry q a1)), (priq (carry q gv5)), (priq (carry gv2 a2)), (priq (carry gv2 a1)), (priq (carry gv2 gv5)), (priq (q ++ q)), (priq (q ++ gv2)), (priq (gv2 ++ q)), (priq (gv2 ++ gv2)), (priqq n (a2 :: q))
(priqq n (a2 :: gv2)), (priqq n (a1 :: q)), (priqq n (a1 :: gv2)), (priqq n (gv5 :: q)), (priqq n (gv5 :: gv2)), (priqq n (merge q q)), (priqq n (merge q gv2)), (priqq n (merge gv2 q)), (priqq n (merge gv2 gv2)), (priqq n (heap_delete_max a2))
(priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv5)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q q gv5)), (priqq n (join q gv2 a2)), (priqq n (join q gv2 a1)), (priqq n (join q gv2 gv5)), (priqq n (join gv2 q a2)), (priqq n (join gv2 q a1))
(priqq n (join gv2 q gv5)), (priqq n (join gv2 gv2 a2)), (priqq n (join gv2 gv2 a1)), (priqq n (join gv2 gv2 gv5)), (priqq n (insert n q)), (priqq n (insert n gv2)), (priqq n (insert x q)), (priqq n (insert x gv2)), (priqq n (carry q a2)), (priqq n (carry q a1))
(priqq n (carry q gv5)), (priqq n (carry gv2 a2)), (priqq n (carry gv2 a1)), (priqq n (carry gv2 gv5)), (priqq n (q ++ q)), (priqq n (q ++ gv2)), (priqq n (gv2 ++ q)), (priqq n (gv2 ++ gv2)), (priqq x (a2 :: q)), (priqq x (a2 :: gv2))
(priqq x (a1 :: q)), (priqq x (a1 :: gv2)), (priqq x (gv5 :: q)), (priqq x (gv5 :: gv2)), (priqq x (merge q q)), (priqq x (merge q gv2)), (priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (heap_delete_max a2)), (priqq x (heap_delete_max a1))
(priqq x (heap_delete_max gv5)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q q gv5)), (priqq x (join q gv2 a2)), (priqq x (join q gv2 a1)), (priqq x (join q gv2 gv5)), (priqq x (join gv2 q a2)), (priqq x (join gv2 q a1)), (priqq x (join gv2 q gv5))
(priqq x (join gv2 gv2 a2)), (priqq x (join gv2 gv2 a1)), (priqq x (join gv2 gv2 gv5)), (priqq x (insert n q)), (priqq x (insert n gv2)), (priqq x (insert x q)), (priqq x (insert x gv2)), (priqq x (carry q a2)), (priqq x (carry q a1)), (priqq x (carry q gv5))
(priqq x (carry gv2 a2)), (priqq x (carry gv2 a1)), (priqq x (carry gv2 gv5)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2)), (priqq (find_max' n q) q), (priqq (find_max' n q) gv2), (priqq (find_max' n q) (a2 :: q))
(priqq (find_max' n q) (a2 :: gv2)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv2)), (priqq (find_max' n q) (gv5 :: q)), (priqq (find_max' n q) (gv5 :: gv2)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv2)), (priqq (find_max' n q) (merge gv2 q)), (priqq (find_max' n q) (merge gv2 gv2)), (priqq (find_max' n q) (heap_delete_max a2))
(priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (heap_delete_max gv5)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q q gv5)), (priqq (find_max' n q) (join q gv2 a2)), (priqq (find_max' n q) (join q gv2 a1)), (priqq (find_max' n q) (join q gv2 gv5)), (priqq (find_max' n q) (join gv2 q a2)), (priqq (find_max' n q) (join gv2 q a1))
(priqq (find_max' n q) (join gv2 q gv5)), (priqq (find_max' n q) (join gv2 gv2 a2)), (priqq (find_max' n q) (join gv2 gv2 a1)), (priqq (find_max' n q) (join gv2 gv2 gv5)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert n gv2)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv2)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1))
(priqq (find_max' n q) (carry q gv5)), (priqq (find_max' n q) (carry gv2 a2)), (priqq (find_max' n q) (carry gv2 a1)), (priqq (find_max' n q) (carry gv2 gv5)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv2)), (priqq (find_max' n q) (gv2 ++ q)), (priqq (find_max' n q) (gv2 ++ gv2)), (priqq (find_max' n gv2) q), (priqq (find_max' n gv2) gv2)
(priqq (find_max' n gv2) (a2 :: q)), (priqq (find_max' n gv2) (a2 :: gv2)), (priqq (find_max' n gv2) (a1 :: q)), (priqq (find_max' n gv2) (a1 :: gv2)), (priqq (find_max' n gv2) (gv5 :: q)), (priqq (find_max' n gv2) (gv5 :: gv2)), (priqq (find_max' n gv2) (merge q q)), (priqq (find_max' n gv2) (merge q gv2)), (priqq (find_max' n gv2) (merge gv2 q)), (priqq (find_max' n gv2) (merge gv2 gv2))
(priqq (find_max' n gv2) (heap_delete_max a2)), (priqq (find_max' n gv2) (heap_delete_max a1)), (priqq (find_max' n gv2) (heap_delete_max gv5)), (priqq (find_max' n gv2) (join q q a2)), (priqq (find_max' n gv2) (join q q a1)), (priqq (find_max' n gv2) (join q q gv5)), (priqq (find_max' n gv2) (join q gv2 a2)), (priqq (find_max' n gv2) (join q gv2 a1)), (priqq (find_max' n gv2) (join q gv2 gv5)), (priqq (find_max' n gv2) (join gv2 q a2))
(priqq (find_max' n gv2) (join gv2 q a1)), (priqq (find_max' n gv2) (join gv2 q gv5)), (priqq (find_max' n gv2) (join gv2 gv2 a2)), (priqq (find_max' n gv2) (join gv2 gv2 a1)), (priqq (find_max' n gv2) (join gv2 gv2 gv5)), (priqq (find_max' n gv2) (insert n q)), (priqq (find_max' n gv2) (insert n gv2)), (priqq (find_max' n gv2) (insert x q)), (priqq (find_max' n gv2) (insert x gv2)), (priqq (find_max' n gv2) (carry q a2))
(priqq (find_max' n gv2) (carry q a1)), (priqq (find_max' n gv2) (carry q gv5)), (priqq (find_max' n gv2) (carry gv2 a2)), (priqq (find_max' n gv2) (carry gv2 a1)), (priqq (find_max' n gv2) (carry gv2 gv5)), (priqq (find_max' n gv2) (q ++ q)), (priqq (find_max' n gv2) (q ++ gv2)), (priqq (find_max' n gv2) (gv2 ++ q)), (priqq (find_max' n gv2) (gv2 ++ gv2)), (priqq (find_max' x q) q)
(priqq (find_max' x q) gv2), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a2 :: gv2)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv2)), (priqq (find_max' x q) (gv5 :: q)), (priqq (find_max' x q) (gv5 :: gv2)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q))
(priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (heap_delete_max gv5)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q q gv5)), (priqq (find_max' x q) (join q gv2 a2)), (priqq (find_max' x q) (join q gv2 a1)), (priqq (find_max' x q) (join q gv2 gv5))
(priqq (find_max' x q) (join gv2 q a2)), (priqq (find_max' x q) (join gv2 q a1)), (priqq (find_max' x q) (join gv2 q gv5)), (priqq (find_max' x q) (join gv2 gv2 a2)), (priqq (find_max' x q) (join gv2 gv2 a1)), (priqq (find_max' x q) (join gv2 gv2 gv5)), (priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv2)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2))
(priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry q gv5)), (priqq (find_max' x q) (carry gv2 a2)), (priqq (find_max' x q) (carry gv2 a1)), (priqq (find_max' x q) (carry gv2 gv5)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q)), (priqq (find_max' x q) (gv2 ++ gv2))
(priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) (a2 :: q)), (priqq (find_max' x gv2) (a2 :: gv2)), (priqq (find_max' x gv2) (a1 :: q)), (priqq (find_max' x gv2) (a1 :: gv2)), (priqq (find_max' x gv2) (gv5 :: q)), (priqq (find_max' x gv2) (gv5 :: gv2)), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2))
(priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (heap_delete_max a2)), (priqq (find_max' x gv2) (heap_delete_max a1)), (priqq (find_max' x gv2) (heap_delete_max gv5)), (priqq (find_max' x gv2) (join q q a2)), (priqq (find_max' x gv2) (join q q a1)), (priqq (find_max' x gv2) (join q q gv5)), (priqq (find_max' x gv2) (join q gv2 a2)), (priqq (find_max' x gv2) (join q gv2 a1))
(priqq (find_max' x gv2) (join q gv2 gv5)), (priqq (find_max' x gv2) (join gv2 q a2)), (priqq (find_max' x gv2) (join gv2 q a1)), (priqq (find_max' x gv2) (join gv2 q gv5)), (priqq (find_max' x gv2) (join gv2 gv2 a2)), (priqq (find_max' x gv2) (join gv2 gv2 a1)), (priqq (find_max' x gv2) (join gv2 gv2 gv5)), (priqq (find_max' x gv2) (insert n q)), (priqq (find_max' x gv2) (insert n gv2)), (priqq (find_max' x gv2) (insert x q))
(priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (carry q a2)), (priqq (find_max' x gv2) (carry q a1)), (priqq (find_max' x gv2) (carry q gv5)), (priqq (find_max' x gv2) (carry gv2 a2)), (priqq (find_max' x gv2) (carry gv2 a1)), (priqq (find_max' x gv2) (carry gv2 gv5)), (priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ q))
(priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv2)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv2)), (priqq (length q) (gv5 :: q)), (priqq (length q) (gv5 :: gv2)), (priqq (length q) (merge q q))
(priqq (length q) (merge q gv2)), (priqq (length q) (merge gv2 q)), (priqq (length q) (merge gv2 gv2)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (heap_delete_max gv5)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q q gv5)), (priqq (length q) (join q gv2 a2))
(priqq (length q) (join q gv2 a1)), (priqq (length q) (join q gv2 gv5)), (priqq (length q) (join gv2 q a2)), (priqq (length q) (join gv2 q a1)), (priqq (length q) (join gv2 q gv5)), (priqq (length q) (join gv2 gv2 a2)), (priqq (length q) (join gv2 gv2 a1)), (priqq (length q) (join gv2 gv2 gv5)), (priqq (length q) (insert n q)), (priqq (length q) (insert n gv2))
(priqq (length q) (insert x q)), (priqq (length q) (insert x gv2)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry q gv5)), (priqq (length q) (carry gv2 a2)), (priqq (length q) (carry gv2 a1)), (priqq (length q) (carry gv2 gv5)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv2))
(priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q), (priqq (length gv2) gv2), (priqq (length gv2) (a2 :: q)), (priqq (length gv2) (a2 :: gv2)), (priqq (length gv2) (a1 :: q)), (priqq (length gv2) (a1 :: gv2)), (priqq (length gv2) (gv5 :: q)), (priqq (length gv2) (gv5 :: gv2))
(priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q)), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (heap_delete_max a2)), (priqq (length gv2) (heap_delete_max a1)), (priqq (length gv2) (heap_delete_max gv5)), (priqq (length gv2) (join q q a2)), (priqq (length gv2) (join q q a1)), (priqq (length gv2) (join q q gv5))
(priqq (length gv2) (join q gv2 a2)), (priqq (length gv2) (join q gv2 a1)), (priqq (length gv2) (join q gv2 gv5)), (priqq (length gv2) (join gv2 q a2)), (priqq (length gv2) (join gv2 q a1)), (priqq (length gv2) (join gv2 q gv5)), (priqq (length gv2) (join gv2 gv2 a2)), (priqq (length gv2) (join gv2 gv2 a1)), (priqq (length gv2) (join gv2 gv2 gv5)), (priqq (length gv2) (insert n q))
(priqq (length gv2) (insert n gv2)), (priqq (length gv2) (insert x q)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (carry q a2)), (priqq (length gv2) (carry q a1)), (priqq (length gv2) (carry q gv5)), (priqq (length gv2) (carry gv2 a2)), (priqq (length gv2) (carry gv2 a1)), (priqq (length gv2) (carry gv2 gv5)), (priqq (length gv2) (q ++ q))
(priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv5)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv5)), (pow2heap n (Node n gv5 a2))
(pow2heap n (Node n gv5 a1)), (pow2heap n (Node n gv5 gv5)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a2 gv5)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node x a1 gv5)), (pow2heap n (Node x gv5 a2)), (pow2heap n (Node x gv5 a1))
(pow2heap n (Node x gv5 gv5)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 gv5)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv5)), (pow2heap n (smash gv5 a2)), (pow2heap n (smash gv5 a1)), (pow2heap n (smash gv5 gv5))
(pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a2 gv5)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (Node n a1 gv5)), (pow2heap x (Node n gv5 a2)), (pow2heap x (Node n gv5 a1)), (pow2heap x (Node n gv5 gv5)), (pow2heap x (Node x a2 a2))
(pow2heap x (Node x a2 a1)), (pow2heap x (Node x a2 gv5)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node x a1 gv5)), (pow2heap x (Node x gv5 a2)), (pow2heap x (Node x gv5 a1)), (pow2heap x (Node x gv5 gv5)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1))
(pow2heap x (smash a2 gv5)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap x (smash a1 gv5)), (pow2heap x (smash gv5 a2)), (pow2heap x (smash gv5 a1)), (pow2heap x (smash gv5 gv5)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) gv5)
(pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a2 gv5)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (Node n a1 gv5)), (pow2heap (find_max' n q) (Node n gv5 a2)), (pow2heap (find_max' n q) (Node n gv5 a1)), (pow2heap (find_max' n q) (Node n gv5 gv5)), (pow2heap (find_max' n q) (Node x a2 a2))
(pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a2 gv5)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node x a1 gv5)), (pow2heap (find_max' n q) (Node x gv5 a2)), (pow2heap (find_max' n q) (Node x gv5 a1)), (pow2heap (find_max' n q) (Node x gv5 gv5)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1))
(pow2heap (find_max' n q) (smash a2 gv5)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n q) (smash a1 gv5)), (pow2heap (find_max' n q) (smash gv5 a2)), (pow2heap (find_max' n q) (smash gv5 a1)), (pow2heap (find_max' n q) (smash gv5 gv5)), (pow2heap (find_max' n gv2) a2), (pow2heap (find_max' n gv2) a1), (pow2heap (find_max' n gv2) gv5)
(pow2heap (find_max' n gv2) (Node n a2 a2)), (pow2heap (find_max' n gv2) (Node n a2 a1)), (pow2heap (find_max' n gv2) (Node n a2 gv5)), (pow2heap (find_max' n gv2) (Node n a1 a2)), (pow2heap (find_max' n gv2) (Node n a1 a1)), (pow2heap (find_max' n gv2) (Node n a1 gv5)), (pow2heap (find_max' n gv2) (Node n gv5 a2)), (pow2heap (find_max' n gv2) (Node n gv5 a1)), (pow2heap (find_max' n gv2) (Node n gv5 gv5)), (pow2heap (find_max' n gv2) (Node x a2 a2))
(pow2heap (find_max' n gv2) (Node x a2 a1)), (pow2heap (find_max' n gv2) (Node x a2 gv5)), (pow2heap (find_max' n gv2) (Node x a1 a2)), (pow2heap (find_max' n gv2) (Node x a1 a1)), (pow2heap (find_max' n gv2) (Node x a1 gv5)), (pow2heap (find_max' n gv2) (Node x gv5 a2)), (pow2heap (find_max' n gv2) (Node x gv5 a1)), (pow2heap (find_max' n gv2) (Node x gv5 gv5)), (pow2heap (find_max' n gv2) (smash a2 a2)), (pow2heap (find_max' n gv2) (smash a2 a1))
(pow2heap (find_max' n gv2) (smash a2 gv5)), (pow2heap (find_max' n gv2) (smash a1 a2)), (pow2heap (find_max' n gv2) (smash a1 a1)), (pow2heap (find_max' n gv2) (smash a1 gv5)), (pow2heap (find_max' n gv2) (smash gv5 a2)), (pow2heap (find_max' n gv2) (smash gv5 a1)), (pow2heap (find_max' n gv2) (smash gv5 gv5)), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) gv5)
(pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a2 gv5)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (Node n a1 gv5)), (pow2heap (find_max' x q) (Node n gv5 a2)), (pow2heap (find_max' x q) (Node n gv5 a1)), (pow2heap (find_max' x q) (Node n gv5 gv5)), (pow2heap (find_max' x q) (Node x a2 a2))
(pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a2 gv5)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node x a1 gv5)), (pow2heap (find_max' x q) (Node x gv5 a2)), (pow2heap (find_max' x q) (Node x gv5 a1)), (pow2heap (find_max' x q) (Node x gv5 gv5)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1))
(pow2heap (find_max' x q) (smash a2 gv5)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x q) (smash a1 gv5)), (pow2heap (find_max' x q) (smash gv5 a2)), (pow2heap (find_max' x q) (smash gv5 a1)), (pow2heap (find_max' x q) (smash gv5 gv5)), (pow2heap (find_max' x gv2) a2), (pow2heap (find_max' x gv2) a1), (pow2heap (find_max' x gv2) gv5)
(pow2heap (find_max' x gv2) (Node n a2 a2)), (pow2heap (find_max' x gv2) (Node n a2 a1)), (pow2heap (find_max' x gv2) (Node n a2 gv5)), (pow2heap (find_max' x gv2) (Node n a1 a2)), (pow2heap (find_max' x gv2) (Node n a1 a1)), (pow2heap (find_max' x gv2) (Node n a1 gv5)), (pow2heap (find_max' x gv2) (Node n gv5 a2)), (pow2heap (find_max' x gv2) (Node n gv5 a1)), (pow2heap (find_max' x gv2) (Node n gv5 gv5)), (pow2heap (find_max' x gv2) (Node x a2 a2))
(pow2heap (find_max' x gv2) (Node x a2 a1)), (pow2heap (find_max' x gv2) (Node x a2 gv5)), (pow2heap (find_max' x gv2) (Node x a1 a2)), (pow2heap (find_max' x gv2) (Node x a1 a1)), (pow2heap (find_max' x gv2) (Node x a1 gv5)), (pow2heap (find_max' x gv2) (Node x gv5 a2)), (pow2heap (find_max' x gv2) (Node x gv5 a1)), (pow2heap (find_max' x gv2) (Node x gv5 gv5)), (pow2heap (find_max' x gv2) (smash a2 a2)), (pow2heap (find_max' x gv2) (smash a2 a1))
(pow2heap (find_max' x gv2) (smash a2 gv5)), (pow2heap (find_max' x gv2) (smash a1 a2)), (pow2heap (find_max' x gv2) (smash a1 a1)), (pow2heap (find_max' x gv2) (smash a1 gv5)), (pow2heap (find_max' x gv2) (smash gv5 a2)), (pow2heap (find_max' x gv2) (smash gv5 a1)), (pow2heap (find_max' x gv2) (smash gv5 gv5)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) gv5)
(pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a2 gv5)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (Node n a1 gv5)), (pow2heap (length q) (Node n gv5 a2)), (pow2heap (length q) (Node n gv5 a1)), (pow2heap (length q) (Node n gv5 gv5)), (pow2heap (length q) (Node x a2 a2))
(pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a2 gv5)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node x a1 gv5)), (pow2heap (length q) (Node x gv5 a2)), (pow2heap (length q) (Node x gv5 a1)), (pow2heap (length q) (Node x gv5 gv5)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1))
(pow2heap (length q) (smash a2 gv5)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length q) (smash a1 gv5)), (pow2heap (length q) (smash gv5 a2)), (pow2heap (length q) (smash gv5 a1)), (pow2heap (length q) (smash gv5 gv5)), (pow2heap (length gv2) a2), (pow2heap (length gv2) a1), (pow2heap (length gv2) gv5)
(pow2heap (length gv2) (Node n a2 a2)), (pow2heap (length gv2) (Node n a2 a1)), (pow2heap (length gv2) (Node n a2 gv5)), (pow2heap (length gv2) (Node n a1 a2)), (pow2heap (length gv2) (Node n a1 a1)), (pow2heap (length gv2) (Node n a1 gv5)), (pow2heap (length gv2) (Node n gv5 a2)), (pow2heap (length gv2) (Node n gv5 a1)), (pow2heap (length gv2) (Node n gv5 gv5)), (pow2heap (length gv2) (Node x a2 a2))
(pow2heap (length gv2) (Node x a2 a1)), (pow2heap (length gv2) (Node x a2 gv5)), (pow2heap (length gv2) (Node x a1 a2)), (pow2heap (length gv2) (Node x a1 a1)), (pow2heap (length gv2) (Node x a1 gv5)), (pow2heap (length gv2) (Node x gv5 a2)), (pow2heap (length gv2) (Node x gv5 a1)), (pow2heap (length gv2) (Node x gv5 gv5)), (pow2heap (length gv2) (smash a2 a2)), (pow2heap (length gv2) (smash a2 a1))
(pow2heap (length gv2) (smash a2 gv5)), (pow2heap (length gv2) (smash a1 a2)), (pow2heap (length gv2) (smash a1 a1)), (pow2heap (length gv2) (smash a1 gv5)), (pow2heap (length gv2) (smash gv5 a2)), (pow2heap (length gv2) (smash gv5 a1)), (pow2heap (length gv2) (smash gv5 gv5)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv5))
(pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv5)), (pow2heapp n n (Node n gv5 a2)), (pow2heapp n n (Node n gv5 a1)), (pow2heapp n n (Node n gv5 gv5)), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a2 gv5)), (pow2heapp n n (Node x a1 a2))
(pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node x a1 gv5)), (pow2heapp n n (Node x gv5 a2)), (pow2heapp n n (Node x gv5 a1)), (pow2heapp n n (Node x gv5 gv5)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv5)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1))
(pow2heapp n n (smash a1 gv5)), (pow2heapp n n (smash gv5 a2)), (pow2heapp n n (smash gv5 a1)), (pow2heapp n n (smash gv5 gv5)), (pow2heapp n n Leaf), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a2 gv5)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1))
(pow2heapp n x (Node n a1 gv5)), (pow2heapp n x (Node n gv5 a2)), (pow2heapp n x (Node n gv5 a1)), (pow2heapp n x (Node n gv5 gv5)), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a2 gv5)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node x a1 gv5))
(pow2heapp n x (Node x gv5 a2)), (pow2heapp n x (Node x gv5 a1)), (pow2heapp n x (Node x gv5 gv5)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a2 gv5)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x (smash a1 gv5)), (pow2heapp n x (smash gv5 a2))
(pow2heapp n x (smash gv5 a1)), (pow2heapp n x (smash gv5 gv5)), (pow2heapp n x Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) gv5), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a2 gv5)), (pow2heapp n (find_max' n q) (Node n a1 a2))
(pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (Node n a1 gv5)), (pow2heapp n (find_max' n q) (Node n gv5 a2)), (pow2heapp n (find_max' n q) (Node n gv5 a1)), (pow2heapp n (find_max' n q) (Node n gv5 gv5)), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a2 gv5)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1))
(pow2heapp n (find_max' n q) (Node x a1 gv5)), (pow2heapp n (find_max' n q) (Node x gv5 a2)), (pow2heapp n (find_max' n q) (Node x gv5 a1)), (pow2heapp n (find_max' n q) (Node x gv5 gv5)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a2 gv5)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) (smash a1 gv5))
(pow2heapp n (find_max' n q) (smash gv5 a2)), (pow2heapp n (find_max' n q) (smash gv5 a1)), (pow2heapp n (find_max' n q) (smash gv5 gv5)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (find_max' n gv2) a2), (pow2heapp n (find_max' n gv2) a1), (pow2heapp n (find_max' n gv2) gv5), (pow2heapp n (find_max' n gv2) (Node n a2 a2)), (pow2heapp n (find_max' n gv2) (Node n a2 a1)), (pow2heapp n (find_max' n gv2) (Node n a2 gv5))
(pow2heapp n (find_max' n gv2) (Node n a1 a2)), (pow2heapp n (find_max' n gv2) (Node n a1 a1)), (pow2heapp n (find_max' n gv2) (Node n a1 gv5)), (pow2heapp n (find_max' n gv2) (Node n gv5 a2)), (pow2heapp n (find_max' n gv2) (Node n gv5 a1)), (pow2heapp n (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp n (find_max' n gv2) (Node x a2 a2)), (pow2heapp n (find_max' n gv2) (Node x a2 a1)), (pow2heapp n (find_max' n gv2) (Node x a2 gv5)), (pow2heapp n (find_max' n gv2) (Node x a1 a2))
(pow2heapp n (find_max' n gv2) (Node x a1 a1)), (pow2heapp n (find_max' n gv2) (Node x a1 gv5)), (pow2heapp n (find_max' n gv2) (Node x gv5 a2)), (pow2heapp n (find_max' n gv2) (Node x gv5 a1)), (pow2heapp n (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp n (find_max' n gv2) (smash a2 a2)), (pow2heapp n (find_max' n gv2) (smash a2 a1)), (pow2heapp n (find_max' n gv2) (smash a2 gv5)), (pow2heapp n (find_max' n gv2) (smash a1 a2)), (pow2heapp n (find_max' n gv2) (smash a1 a1))
(pow2heapp n (find_max' n gv2) (smash a1 gv5)), (pow2heapp n (find_max' n gv2) (smash gv5 a2)), (pow2heapp n (find_max' n gv2) (smash gv5 a1)), (pow2heapp n (find_max' n gv2) (smash gv5 gv5)), (pow2heapp n (find_max' n gv2) Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) gv5), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1))
(pow2heapp n (find_max' x q) (Node n a2 gv5)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (Node n a1 gv5)), (pow2heapp n (find_max' x q) (Node n gv5 a2)), (pow2heapp n (find_max' x q) (Node n gv5 a1)), (pow2heapp n (find_max' x q) (Node n gv5 gv5)), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a2 gv5))
(pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node x a1 gv5)), (pow2heapp n (find_max' x q) (Node x gv5 a2)), (pow2heapp n (find_max' x q) (Node x gv5 a1)), (pow2heapp n (find_max' x q) (Node x gv5 gv5)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a2 gv5)), (pow2heapp n (find_max' x q) (smash a1 a2))
(pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) (smash a1 gv5)), (pow2heapp n (find_max' x q) (smash gv5 a2)), (pow2heapp n (find_max' x q) (smash gv5 a1)), (pow2heapp n (find_max' x q) (smash gv5 gv5)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' x gv2) a2), (pow2heapp n (find_max' x gv2) a1), (pow2heapp n (find_max' x gv2) gv5), (pow2heapp n (find_max' x gv2) (Node n a2 a2))
(pow2heapp n (find_max' x gv2) (Node n a2 a1)), (pow2heapp n (find_max' x gv2) (Node n a2 gv5)), (pow2heapp n (find_max' x gv2) (Node n a1 a2)), (pow2heapp n (find_max' x gv2) (Node n a1 a1)), (pow2heapp n (find_max' x gv2) (Node n a1 gv5)), (pow2heapp n (find_max' x gv2) (Node n gv5 a2)), (pow2heapp n (find_max' x gv2) (Node n gv5 a1)), (pow2heapp n (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp n (find_max' x gv2) (Node x a2 a2)), (pow2heapp n (find_max' x gv2) (Node x a2 a1))
(pow2heapp n (find_max' x gv2) (Node x a2 gv5)), (pow2heapp n (find_max' x gv2) (Node x a1 a2)), (pow2heapp n (find_max' x gv2) (Node x a1 a1)), (pow2heapp n (find_max' x gv2) (Node x a1 gv5)), (pow2heapp n (find_max' x gv2) (Node x gv5 a2)), (pow2heapp n (find_max' x gv2) (Node x gv5 a1)), (pow2heapp n (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp n (find_max' x gv2) (smash a2 a2)), (pow2heapp n (find_max' x gv2) (smash a2 a1)), (pow2heapp n (find_max' x gv2) (smash a2 gv5))
(pow2heapp n (find_max' x gv2) (smash a1 a2)), (pow2heapp n (find_max' x gv2) (smash a1 a1)), (pow2heapp n (find_max' x gv2) (smash a1 gv5)), (pow2heapp n (find_max' x gv2) (smash gv5 a2)), (pow2heapp n (find_max' x gv2) (smash gv5 a1)), (pow2heapp n (find_max' x gv2) (smash gv5 gv5)), (pow2heapp n (find_max' x gv2) Leaf), (pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) gv5)
(pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a2 gv5)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (Node n a1 gv5)), (pow2heapp n (length q) (Node n gv5 a2)), (pow2heapp n (length q) (Node n gv5 a1)), (pow2heapp n (length q) (Node n gv5 gv5)), (pow2heapp n (length q) (Node x a2 a2))
(pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a2 gv5)), (pow2heapp n (length q) (Node x a1 a2)), (pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node x a1 gv5)), (pow2heapp n (length q) (Node x gv5 a2)), (pow2heapp n (length q) (Node x gv5 a1)), (pow2heapp n (length q) (Node x gv5 gv5)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1))
(pow2heapp n (length q) (smash a2 gv5)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) (smash a1 gv5)), (pow2heapp n (length q) (smash gv5 a2)), (pow2heapp n (length q) (smash gv5 a1)), (pow2heapp n (length q) (smash gv5 gv5)), (pow2heapp n (length q) Leaf), (pow2heapp n (length gv2) a2), (pow2heapp n (length gv2) a1)
(pow2heapp n (length gv2) gv5), (pow2heapp n (length gv2) (Node n a2 a2)), (pow2heapp n (length gv2) (Node n a2 a1)), (pow2heapp n (length gv2) (Node n a2 gv5)), (pow2heapp n (length gv2) (Node n a1 a2)), (pow2heapp n (length gv2) (Node n a1 a1)), (pow2heapp n (length gv2) (Node n a1 gv5)), (pow2heapp n (length gv2) (Node n gv5 a2)), (pow2heapp n (length gv2) (Node n gv5 a1)), (pow2heapp n (length gv2) (Node n gv5 gv5))
(pow2heapp n (length gv2) (Node x a2 a2)), (pow2heapp n (length gv2) (Node x a2 a1)), (pow2heapp n (length gv2) (Node x a2 gv5)), (pow2heapp n (length gv2) (Node x a1 a2)), (pow2heapp n (length gv2) (Node x a1 a1)), (pow2heapp n (length gv2) (Node x a1 gv5)), (pow2heapp n (length gv2) (Node x gv5 a2)), (pow2heapp n (length gv2) (Node x gv5 a1)), (pow2heapp n (length gv2) (Node x gv5 gv5)), (pow2heapp n (length gv2) (smash a2 a2))
(pow2heapp n (length gv2) (smash a2 a1)), (pow2heapp n (length gv2) (smash a2 gv5)), (pow2heapp n (length gv2) (smash a1 a2)), (pow2heapp n (length gv2) (smash a1 a1)), (pow2heapp n (length gv2) (smash a1 gv5)), (pow2heapp n (length gv2) (smash gv5 a2)), (pow2heapp n (length gv2) (smash gv5 a1)), (pow2heapp n (length gv2) (smash gv5 gv5)), (pow2heapp n (length gv2) Leaf), (pow2heapp x n (Node n a2 a2))
(pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a2 gv5)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (Node n a1 gv5)), (pow2heapp x n (Node n gv5 a2)), (pow2heapp x n (Node n gv5 a1)), (pow2heapp x n (Node n gv5 gv5)), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1))
(pow2heapp x n (Node x a2 gv5)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node x a1 gv5)), (pow2heapp x n (Node x gv5 a2)), (pow2heapp x n (Node x gv5 a1)), (pow2heapp x n (Node x gv5 gv5)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a2 gv5))
(pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n (smash a1 gv5)), (pow2heapp x n (smash gv5 a2)), (pow2heapp x n (smash gv5 a1)), (pow2heapp x n (smash gv5 gv5)), (pow2heapp x n Leaf), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a2 gv5))
(pow2heapp x x (Node n a1 a2)), (pow2heapp x x (Node n a1 a1)), (pow2heapp x x (Node n a1 gv5)), (pow2heapp x x (Node n gv5 a2)), (pow2heapp x x (Node n gv5 a1)), (pow2heapp x x (Node n gv5 gv5)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a2 gv5)), (pow2heapp x x (Node x a1 a2))
(pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node x a1 gv5)), (pow2heapp x x (Node x gv5 a2)), (pow2heapp x x (Node x gv5 a1)), (pow2heapp x x (Node x gv5 gv5)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a2 gv5)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1))
(pow2heapp x x (smash a1 gv5)), (pow2heapp x x (smash gv5 a2)), (pow2heapp x x (smash gv5 a1)), (pow2heapp x x (smash gv5 gv5)), (pow2heapp x x Leaf), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) gv5), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1))
(pow2heapp x (find_max' n q) (Node n a2 gv5)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (Node n a1 gv5)), (pow2heapp x (find_max' n q) (Node n gv5 a2)), (pow2heapp x (find_max' n q) (Node n gv5 a1)), (pow2heapp x (find_max' n q) (Node n gv5 gv5)), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a2 gv5))
(pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node x a1 gv5)), (pow2heapp x (find_max' n q) (Node x gv5 a2)), (pow2heapp x (find_max' n q) (Node x gv5 a1)), (pow2heapp x (find_max' n q) (Node x gv5 gv5)), (pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a2 gv5)), (pow2heapp x (find_max' n q) (smash a1 a2))
(pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) (smash a1 gv5)), (pow2heapp x (find_max' n q) (smash gv5 a2)), (pow2heapp x (find_max' n q) (smash gv5 a1)), (pow2heapp x (find_max' n q) (smash gv5 gv5)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' n gv2) a2), (pow2heapp x (find_max' n gv2) a1), (pow2heapp x (find_max' n gv2) gv5), (pow2heapp x (find_max' n gv2) (Node n a2 a2))
(pow2heapp x (find_max' n gv2) (Node n a2 a1)), (pow2heapp x (find_max' n gv2) (Node n a2 gv5)), (pow2heapp x (find_max' n gv2) (Node n a1 a2)), (pow2heapp x (find_max' n gv2) (Node n a1 a1)), (pow2heapp x (find_max' n gv2) (Node n a1 gv5)), (pow2heapp x (find_max' n gv2) (Node n gv5 a2)), (pow2heapp x (find_max' n gv2) (Node n gv5 a1)), (pow2heapp x (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp x (find_max' n gv2) (Node x a2 a2)), (pow2heapp x (find_max' n gv2) (Node x a2 a1))
(pow2heapp x (find_max' n gv2) (Node x a2 gv5)), (pow2heapp x (find_max' n gv2) (Node x a1 a2)), (pow2heapp x (find_max' n gv2) (Node x a1 a1)), (pow2heapp x (find_max' n gv2) (Node x a1 gv5)), (pow2heapp x (find_max' n gv2) (Node x gv5 a2)), (pow2heapp x (find_max' n gv2) (Node x gv5 a1)), (pow2heapp x (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp x (find_max' n gv2) (smash a2 a2)), (pow2heapp x (find_max' n gv2) (smash a2 a1)), (pow2heapp x (find_max' n gv2) (smash a2 gv5))
(pow2heapp x (find_max' n gv2) (smash a1 a2)), (pow2heapp x (find_max' n gv2) (smash a1 a1)), (pow2heapp x (find_max' n gv2) (smash a1 gv5)), (pow2heapp x (find_max' n gv2) (smash gv5 a2)), (pow2heapp x (find_max' n gv2) (smash gv5 a1)), (pow2heapp x (find_max' n gv2) (smash gv5 gv5)), (pow2heapp x (find_max' n gv2) Leaf), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) gv5)
(pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a2 gv5)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (Node n a1 gv5)), (pow2heapp x (find_max' x q) (Node n gv5 a2)), (pow2heapp x (find_max' x q) (Node n gv5 a1)), (pow2heapp x (find_max' x q) (Node n gv5 gv5)), (pow2heapp x (find_max' x q) (Node x a2 a2))
(pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a2 gv5)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node x a1 gv5)), (pow2heapp x (find_max' x q) (Node x gv5 a2)), (pow2heapp x (find_max' x q) (Node x gv5 a1)), (pow2heapp x (find_max' x q) (Node x gv5 gv5)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1))
(pow2heapp x (find_max' x q) (smash a2 gv5)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) (smash a1 gv5)), (pow2heapp x (find_max' x q) (smash gv5 a2)), (pow2heapp x (find_max' x q) (smash gv5 a1)), (pow2heapp x (find_max' x q) (smash gv5 gv5)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) a2), (pow2heapp x (find_max' x gv2) a1)
(pow2heapp x (find_max' x gv2) gv5), (pow2heapp x (find_max' x gv2) (Node n a2 a2)), (pow2heapp x (find_max' x gv2) (Node n a2 a1)), (pow2heapp x (find_max' x gv2) (Node n a2 gv5)), (pow2heapp x (find_max' x gv2) (Node n a1 a2)), (pow2heapp x (find_max' x gv2) (Node n a1 a1)), (pow2heapp x (find_max' x gv2) (Node n a1 gv5)), (pow2heapp x (find_max' x gv2) (Node n gv5 a2)), (pow2heapp x (find_max' x gv2) (Node n gv5 a1)), (pow2heapp x (find_max' x gv2) (Node n gv5 gv5))
(pow2heapp x (find_max' x gv2) (Node x a2 a2)), (pow2heapp x (find_max' x gv2) (Node x a2 a1)), (pow2heapp x (find_max' x gv2) (Node x a2 gv5)), (pow2heapp x (find_max' x gv2) (Node x a1 a2)), (pow2heapp x (find_max' x gv2) (Node x a1 a1)), (pow2heapp x (find_max' x gv2) (Node x a1 gv5)), (pow2heapp x (find_max' x gv2) (Node x gv5 a2)), (pow2heapp x (find_max' x gv2) (Node x gv5 a1)), (pow2heapp x (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp x (find_max' x gv2) (smash a2 a2))
(pow2heapp x (find_max' x gv2) (smash a2 a1)), (pow2heapp x (find_max' x gv2) (smash a2 gv5)), (pow2heapp x (find_max' x gv2) (smash a1 a2)), (pow2heapp x (find_max' x gv2) (smash a1 a1)), (pow2heapp x (find_max' x gv2) (smash a1 gv5)), (pow2heapp x (find_max' x gv2) (smash gv5 a2)), (pow2heapp x (find_max' x gv2) (smash gv5 a1)), (pow2heapp x (find_max' x gv2) (smash gv5 gv5)), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (length q) a2)
(pow2heapp x (length q) a1), (pow2heapp x (length q) gv5), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a2 gv5)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (Node n a1 gv5)), (pow2heapp x (length q) (Node n gv5 a2)), (pow2heapp x (length q) (Node n gv5 a1))
(pow2heapp x (length q) (Node n gv5 gv5)), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a2 gv5)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node x a1 gv5)), (pow2heapp x (length q) (Node x gv5 a2)), (pow2heapp x (length q) (Node x gv5 a1)), (pow2heapp x (length q) (Node x gv5 gv5))
(pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a2 gv5)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) (smash a1 gv5)), (pow2heapp x (length q) (smash gv5 a2)), (pow2heapp x (length q) (smash gv5 a1)), (pow2heapp x (length q) (smash gv5 gv5)), (pow2heapp x (length q) Leaf)
(pow2heapp x (length gv2) a2), (pow2heapp x (length gv2) a1), (pow2heapp x (length gv2) gv5), (pow2heapp x (length gv2) (Node n a2 a2)), (pow2heapp x (length gv2) (Node n a2 a1)), (pow2heapp x (length gv2) (Node n a2 gv5)), (pow2heapp x (length gv2) (Node n a1 a2)), (pow2heapp x (length gv2) (Node n a1 a1)), (pow2heapp x (length gv2) (Node n a1 gv5)), (pow2heapp x (length gv2) (Node n gv5 a2))
(pow2heapp x (length gv2) (Node n gv5 a1)), (pow2heapp x (length gv2) (Node n gv5 gv5)), (pow2heapp x (length gv2) (Node x a2 a2)), (pow2heapp x (length gv2) (Node x a2 a1)), (pow2heapp x (length gv2) (Node x a2 gv5)), (pow2heapp x (length gv2) (Node x a1 a2)), (pow2heapp x (length gv2) (Node x a1 a1)), (pow2heapp x (length gv2) (Node x a1 gv5)), (pow2heapp x (length gv2) (Node x gv5 a2)), (pow2heapp x (length gv2) (Node x gv5 a1))
(pow2heapp x (length gv2) (Node x gv5 gv5)), (pow2heapp x (length gv2) (smash a2 a2)), (pow2heapp x (length gv2) (smash a2 a1)), (pow2heapp x (length gv2) (smash a2 gv5)), (pow2heapp x (length gv2) (smash a1 a2)), (pow2heapp x (length gv2) (smash a1 a1)), (pow2heapp x (length gv2) (smash a1 gv5)), (pow2heapp x (length gv2) (smash gv5 a2)), (pow2heapp x (length gv2) (smash gv5 a1)), (pow2heapp x (length gv2) (smash gv5 gv5))
(pow2heapp x (length gv2) Leaf), (pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n gv5), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a2 gv5)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (Node n a1 gv5))
(pow2heapp (find_max' n q) n (Node n gv5 a2)), (pow2heapp (find_max' n q) n (Node n gv5 a1)), (pow2heapp (find_max' n q) n (Node n gv5 gv5)), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a2 gv5)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node x a1 gv5)), (pow2heapp (find_max' n q) n (Node x gv5 a2))
(pow2heapp (find_max' n q) n (Node x gv5 a1)), (pow2heapp (find_max' n q) n (Node x gv5 gv5)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a2 gv5)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n (smash a1 gv5)), (pow2heapp (find_max' n q) n (smash gv5 a2)), (pow2heapp (find_max' n q) n (smash gv5 a1))
(pow2heapp (find_max' n q) n (smash gv5 gv5)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x gv5), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a2 gv5)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1))
(pow2heapp (find_max' n q) x (Node n a1 gv5)), (pow2heapp (find_max' n q) x (Node n gv5 a2)), (pow2heapp (find_max' n q) x (Node n gv5 a1)), (pow2heapp (find_max' n q) x (Node n gv5 gv5)), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a2 gv5)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node x a1 gv5))
(pow2heapp (find_max' n q) x (Node x gv5 a2)), (pow2heapp (find_max' n q) x (Node x gv5 a1)), (pow2heapp (find_max' n q) x (Node x gv5 gv5)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a2 gv5)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x (smash a1 gv5)), (pow2heapp (find_max' n q) x (smash gv5 a2))
(pow2heapp (find_max' n q) x (smash gv5 a1)), (pow2heapp (find_max' n q) x (smash gv5 gv5)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) gv5), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1))
(pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv5))
(pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' n gv2) a2), (pow2heapp (find_max' n q) (find_max' n gv2) a1), (pow2heapp (find_max' n q) (find_max' n gv2) gv5), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a2 gv5))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a2))
(pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 a1))
(pow2heapp (find_max' n q) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv2) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv2) Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) gv5), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1))
(pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv5))
(pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) Leaf), (pow2heapp (find_max' n q) (find_max' x gv2) a2), (pow2heapp (find_max' n q) (find_max' x gv2) a1), (pow2heapp (find_max' n q) (find_max' x gv2) gv5), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a2))
(pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 a1))
(pow2heapp (find_max' n q) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a2 gv5))
(pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv2) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv2) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) gv5)
(pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (length q) (Node x a2 a2))
(pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1))
(pow2heapp (find_max' n q) (length q) (smash a2 gv5)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 gv5)), (pow2heapp (find_max' n q) (length q) (smash gv5 a2)), (pow2heapp (find_max' n q) (length q) (smash gv5 a1)), (pow2heapp (find_max' n q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' n q) (length gv2) a2), (pow2heapp (find_max' n q) (length gv2) a1)
(pow2heapp (find_max' n q) (length gv2) gv5), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n a2 gv5)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n a1 gv5)), (pow2heapp (find_max' n q) (length gv2) (Node n gv5 a2)), (pow2heapp (find_max' n q) (length gv2) (Node n gv5 a1)), (pow2heapp (find_max' n q) (length gv2) (Node n gv5 gv5))
(pow2heapp (find_max' n q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a2 gv5)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x a1 gv5)), (pow2heapp (find_max' n q) (length gv2) (Node x gv5 a2)), (pow2heapp (find_max' n q) (length gv2) (Node x gv5 a1)), (pow2heapp (find_max' n q) (length gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (length gv2) (smash a2 a2))
(pow2heapp (find_max' n q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv2) (smash a2 gv5)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv2) (smash a1 a1)), (pow2heapp (find_max' n q) (length gv2) (smash a1 gv5)), (pow2heapp (find_max' n q) (length gv2) (smash gv5 a2)), (pow2heapp (find_max' n q) (length gv2) (smash gv5 a1)), (pow2heapp (find_max' n q) (length gv2) (smash gv5 gv5)), (pow2heapp (find_max' n q) (length gv2) Leaf), (pow2heapp (find_max' n gv2) n a2)
(pow2heapp (find_max' n gv2) n a1), (pow2heapp (find_max' n gv2) n gv5), (pow2heapp (find_max' n gv2) n (Node n a2 a2)), (pow2heapp (find_max' n gv2) n (Node n a2 a1)), (pow2heapp (find_max' n gv2) n (Node n a2 gv5)), (pow2heapp (find_max' n gv2) n (Node n a1 a2)), (pow2heapp (find_max' n gv2) n (Node n a1 a1)), (pow2heapp (find_max' n gv2) n (Node n a1 gv5)), (pow2heapp (find_max' n gv2) n (Node n gv5 a2)), (pow2heapp (find_max' n gv2) n (Node n gv5 a1))
(pow2heapp (find_max' n gv2) n (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) n (Node x a2 a2)), (pow2heapp (find_max' n gv2) n (Node x a2 a1)), (pow2heapp (find_max' n gv2) n (Node x a2 gv5)), (pow2heapp (find_max' n gv2) n (Node x a1 a2)), (pow2heapp (find_max' n gv2) n (Node x a1 a1)), (pow2heapp (find_max' n gv2) n (Node x a1 gv5)), (pow2heapp (find_max' n gv2) n (Node x gv5 a2)), (pow2heapp (find_max' n gv2) n (Node x gv5 a1)), (pow2heapp (find_max' n gv2) n (Node x gv5 gv5))
(pow2heapp (find_max' n gv2) n (smash a2 a2)), (pow2heapp (find_max' n gv2) n (smash a2 a1)), (pow2heapp (find_max' n gv2) n (smash a2 gv5)), (pow2heapp (find_max' n gv2) n (smash a1 a2)), (pow2heapp (find_max' n gv2) n (smash a1 a1)), (pow2heapp (find_max' n gv2) n (smash a1 gv5)), (pow2heapp (find_max' n gv2) n (smash gv5 a2)), (pow2heapp (find_max' n gv2) n (smash gv5 a1)), (pow2heapp (find_max' n gv2) n (smash gv5 gv5)), (pow2heapp (find_max' n gv2) n Leaf)
(pow2heapp (find_max' n gv2) x a2), (pow2heapp (find_max' n gv2) x a1), (pow2heapp (find_max' n gv2) x gv5), (pow2heapp (find_max' n gv2) x (Node n a2 a2)), (pow2heapp (find_max' n gv2) x (Node n a2 a1)), (pow2heapp (find_max' n gv2) x (Node n a2 gv5)), (pow2heapp (find_max' n gv2) x (Node n a1 a2)), (pow2heapp (find_max' n gv2) x (Node n a1 a1)), (pow2heapp (find_max' n gv2) x (Node n a1 gv5)), (pow2heapp (find_max' n gv2) x (Node n gv5 a2))
(pow2heapp (find_max' n gv2) x (Node n gv5 a1)), (pow2heapp (find_max' n gv2) x (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) x (Node x a2 a2)), (pow2heapp (find_max' n gv2) x (Node x a2 a1)), (pow2heapp (find_max' n gv2) x (Node x a2 gv5)), (pow2heapp (find_max' n gv2) x (Node x a1 a2)), (pow2heapp (find_max' n gv2) x (Node x a1 a1)), (pow2heapp (find_max' n gv2) x (Node x a1 gv5)), (pow2heapp (find_max' n gv2) x (Node x gv5 a2)), (pow2heapp (find_max' n gv2) x (Node x gv5 a1))
(pow2heapp (find_max' n gv2) x (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) x (smash a2 a2)), (pow2heapp (find_max' n gv2) x (smash a2 a1)), (pow2heapp (find_max' n gv2) x (smash a2 gv5)), (pow2heapp (find_max' n gv2) x (smash a1 a2)), (pow2heapp (find_max' n gv2) x (smash a1 a1)), (pow2heapp (find_max' n gv2) x (smash a1 gv5)), (pow2heapp (find_max' n gv2) x (smash gv5 a2)), (pow2heapp (find_max' n gv2) x (smash gv5 a1)), (pow2heapp (find_max' n gv2) x (smash gv5 gv5))
(pow2heapp (find_max' n gv2) x Leaf), (pow2heapp (find_max' n gv2) (find_max' n q) a2), (pow2heapp (find_max' n gv2) (find_max' n q) a1), (pow2heapp (find_max' n gv2) (find_max' n q) gv5), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n a1 gv5))
(pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv5 a2))
(pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' n q) (smash gv5 a1))
(pow2heapp (find_max' n gv2) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n q) Leaf), (pow2heapp (find_max' n gv2) (find_max' n gv2) a2), (pow2heapp (find_max' n gv2) (find_max' n gv2) a1), (pow2heapp (find_max' n gv2) (find_max' n gv2) gv5), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 a1))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x a1 gv5))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv5 a2))
(pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' n gv2) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' n gv2) (find_max' x q) a2), (pow2heapp (find_max' n gv2) (find_max' x q) a1), (pow2heapp (find_max' n gv2) (find_max' x q) gv5), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a2))
(pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 a1))
(pow2heapp (find_max' n gv2) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash a1 gv5))
(pow2heapp (find_max' n gv2) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x q) Leaf), (pow2heapp (find_max' n gv2) (find_max' x gv2) a2), (pow2heapp (find_max' n gv2) (find_max' x gv2) a1), (pow2heapp (find_max' n gv2) (find_max' x gv2) gv5), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a2 gv5))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a2))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a2 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 a1))
(pow2heapp (find_max' n gv2) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv5 a2)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (find_max' n gv2) (find_max' x gv2) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' n gv2) (length q) a2), (pow2heapp (find_max' n gv2) (length q) a1), (pow2heapp (find_max' n gv2) (length q) gv5), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a2 a1))
(pow2heapp (find_max' n gv2) (length q) (Node n a2 gv5)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n a1 gv5)), (pow2heapp (find_max' n gv2) (length q) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (length q) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a2 gv5))
(pow2heapp (find_max' n gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x a1 gv5)), (pow2heapp (find_max' n gv2) (length q) (Node x gv5 a2)), (pow2heapp (find_max' n gv2) (length q) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a2 gv5)), (pow2heapp (find_max' n gv2) (length q) (smash a1 a2))
(pow2heapp (find_max' n gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length q) (smash a1 gv5)), (pow2heapp (find_max' n gv2) (length q) (smash gv5 a2)), (pow2heapp (find_max' n gv2) (length q) (smash gv5 a1)), (pow2heapp (find_max' n gv2) (length q) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (length q) Leaf), (pow2heapp (find_max' n gv2) (length gv2) a2), (pow2heapp (find_max' n gv2) (length gv2) a1), (pow2heapp (find_max' n gv2) (length gv2) gv5), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a2))
(pow2heapp (find_max' n gv2) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a2 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n a1 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (Node n gv5 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node n gv5 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node n gv5 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a2 a1))
(pow2heapp (find_max' n gv2) (length gv2) (Node x a2 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x a1 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv5 a2)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv5 a1)), (pow2heapp (find_max' n gv2) (length gv2) (Node x gv5 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a2 gv5))
(pow2heapp (find_max' n gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash a1 gv5)), (pow2heapp (find_max' n gv2) (length gv2) (smash gv5 a2)), (pow2heapp (find_max' n gv2) (length gv2) (smash gv5 a1)), (pow2heapp (find_max' n gv2) (length gv2) (smash gv5 gv5)), (pow2heapp (find_max' n gv2) (length gv2) Leaf), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n gv5)
(pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a2 gv5)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (Node n a1 gv5)), (pow2heapp (find_max' x q) n (Node n gv5 a2)), (pow2heapp (find_max' x q) n (Node n gv5 a1)), (pow2heapp (find_max' x q) n (Node n gv5 gv5)), (pow2heapp (find_max' x q) n (Node x a2 a2))
(pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a2 gv5)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node x a1 gv5)), (pow2heapp (find_max' x q) n (Node x gv5 a2)), (pow2heapp (find_max' x q) n (Node x gv5 a1)), (pow2heapp (find_max' x q) n (Node x gv5 gv5)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1))
(pow2heapp (find_max' x q) n (smash a2 gv5)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n (smash a1 gv5)), (pow2heapp (find_max' x q) n (smash gv5 a2)), (pow2heapp (find_max' x q) n (smash gv5 a1)), (pow2heapp (find_max' x q) n (smash gv5 gv5)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1)
(pow2heapp (find_max' x q) x gv5), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a2 gv5)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (Node n a1 gv5)), (pow2heapp (find_max' x q) x (Node n gv5 a2)), (pow2heapp (find_max' x q) x (Node n gv5 a1)), (pow2heapp (find_max' x q) x (Node n gv5 gv5))
(pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a2 gv5)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node x a1 gv5)), (pow2heapp (find_max' x q) x (Node x gv5 a2)), (pow2heapp (find_max' x q) x (Node x gv5 a1)), (pow2heapp (find_max' x q) x (Node x gv5 gv5)), (pow2heapp (find_max' x q) x (smash a2 a2))
(pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a2 gv5)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x (smash a1 gv5)), (pow2heapp (find_max' x q) x (smash gv5 a2)), (pow2heapp (find_max' x q) x (smash gv5 a1)), (pow2heapp (find_max' x q) x (smash gv5 gv5)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2)
(pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) gv5), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 gv5))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) Leaf)
(pow2heapp (find_max' x q) (find_max' n gv2) a2), (pow2heapp (find_max' x q) (find_max' n gv2) a1), (pow2heapp (find_max' x q) (find_max' n gv2) gv5), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv5 a2))
(pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv5 a1))
(pow2heapp (find_max' x q) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' n gv2) (smash gv5 gv5))
(pow2heapp (find_max' x q) (find_max' n gv2) Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) gv5), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv5))
(pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a1))
(pow2heapp (find_max' x q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) a2), (pow2heapp (find_max' x q) (find_max' x gv2) a1), (pow2heapp (find_max' x q) (find_max' x gv2) gv5), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 a1))
(pow2heapp (find_max' x q) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x a1 gv5))
(pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv5 a2))
(pow2heapp (find_max' x q) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) gv5), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2))
(pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1))
(pow2heapp (find_max' x q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 gv5)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 gv5))
(pow2heapp (find_max' x q) (length q) (smash gv5 a2)), (pow2heapp (find_max' x q) (length q) (smash gv5 a1)), (pow2heapp (find_max' x q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) a2), (pow2heapp (find_max' x q) (length gv2) a1), (pow2heapp (find_max' x q) (length gv2) gv5), (pow2heapp (find_max' x q) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n a2 gv5))
(pow2heapp (find_max' x q) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n a1 gv5)), (pow2heapp (find_max' x q) (length gv2) (Node n gv5 a2)), (pow2heapp (find_max' x q) (length gv2) (Node n gv5 a1)), (pow2heapp (find_max' x q) (length gv2) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a2 gv5)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 a2))
(pow2heapp (find_max' x q) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x a1 gv5)), (pow2heapp (find_max' x q) (length gv2) (Node x gv5 a2)), (pow2heapp (find_max' x q) (length gv2) (Node x gv5 a1)), (pow2heapp (find_max' x q) (length gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (length gv2) (smash a2 a2)), (pow2heapp (find_max' x q) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv2) (smash a2 gv5)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv2) (smash a1 a1))
(pow2heapp (find_max' x q) (length gv2) (smash a1 gv5)), (pow2heapp (find_max' x q) (length gv2) (smash gv5 a2)), (pow2heapp (find_max' x q) (length gv2) (smash gv5 a1)), (pow2heapp (find_max' x q) (length gv2) (smash gv5 gv5)), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) n a2), (pow2heapp (find_max' x gv2) n a1), (pow2heapp (find_max' x gv2) n gv5), (pow2heapp (find_max' x gv2) n (Node n a2 a2)), (pow2heapp (find_max' x gv2) n (Node n a2 a1))
(pow2heapp (find_max' x gv2) n (Node n a2 gv5)), (pow2heapp (find_max' x gv2) n (Node n a1 a2)), (pow2heapp (find_max' x gv2) n (Node n a1 a1)), (pow2heapp (find_max' x gv2) n (Node n a1 gv5)), (pow2heapp (find_max' x gv2) n (Node n gv5 a2)), (pow2heapp (find_max' x gv2) n (Node n gv5 a1)), (pow2heapp (find_max' x gv2) n (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) n (Node x a2 a2)), (pow2heapp (find_max' x gv2) n (Node x a2 a1)), (pow2heapp (find_max' x gv2) n (Node x a2 gv5))
(pow2heapp (find_max' x gv2) n (Node x a1 a2)), (pow2heapp (find_max' x gv2) n (Node x a1 a1)), (pow2heapp (find_max' x gv2) n (Node x a1 gv5)), (pow2heapp (find_max' x gv2) n (Node x gv5 a2)), (pow2heapp (find_max' x gv2) n (Node x gv5 a1)), (pow2heapp (find_max' x gv2) n (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) n (smash a2 a2)), (pow2heapp (find_max' x gv2) n (smash a2 a1)), (pow2heapp (find_max' x gv2) n (smash a2 gv5)), (pow2heapp (find_max' x gv2) n (smash a1 a2))
(pow2heapp (find_max' x gv2) n (smash a1 a1)), (pow2heapp (find_max' x gv2) n (smash a1 gv5)), (pow2heapp (find_max' x gv2) n (smash gv5 a2)), (pow2heapp (find_max' x gv2) n (smash gv5 a1)), (pow2heapp (find_max' x gv2) n (smash gv5 gv5)), (pow2heapp (find_max' x gv2) n Leaf), (pow2heapp (find_max' x gv2) x a2), (pow2heapp (find_max' x gv2) x a1), (pow2heapp (find_max' x gv2) x gv5), (pow2heapp (find_max' x gv2) x (Node n a2 a2))
(pow2heapp (find_max' x gv2) x (Node n a2 a1)), (pow2heapp (find_max' x gv2) x (Node n a2 gv5)), (pow2heapp (find_max' x gv2) x (Node n a1 a2)), (pow2heapp (find_max' x gv2) x (Node n a1 a1)), (pow2heapp (find_max' x gv2) x (Node n a1 gv5)), (pow2heapp (find_max' x gv2) x (Node n gv5 a2)), (pow2heapp (find_max' x gv2) x (Node n gv5 a1)), (pow2heapp (find_max' x gv2) x (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) x (Node x a2 a2)), (pow2heapp (find_max' x gv2) x (Node x a2 a1))
(pow2heapp (find_max' x gv2) x (Node x a2 gv5)), (pow2heapp (find_max' x gv2) x (Node x a1 a2)), (pow2heapp (find_max' x gv2) x (Node x a1 a1)), (pow2heapp (find_max' x gv2) x (Node x a1 gv5)), (pow2heapp (find_max' x gv2) x (Node x gv5 a2)), (pow2heapp (find_max' x gv2) x (Node x gv5 a1)), (pow2heapp (find_max' x gv2) x (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) x (smash a2 a2)), (pow2heapp (find_max' x gv2) x (smash a2 a1)), (pow2heapp (find_max' x gv2) x (smash a2 gv5))
(pow2heapp (find_max' x gv2) x (smash a1 a2)), (pow2heapp (find_max' x gv2) x (smash a1 a1)), (pow2heapp (find_max' x gv2) x (smash a1 gv5)), (pow2heapp (find_max' x gv2) x (smash gv5 a2)), (pow2heapp (find_max' x gv2) x (smash gv5 a1)), (pow2heapp (find_max' x gv2) x (smash gv5 gv5)), (pow2heapp (find_max' x gv2) x Leaf), (pow2heapp (find_max' x gv2) (find_max' n q) a2), (pow2heapp (find_max' x gv2) (find_max' n q) a1), (pow2heapp (find_max' x gv2) (find_max' n q) gv5)
(pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a2))
(pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 a1))
(pow2heapp (find_max' x gv2) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' n q) Leaf), (pow2heapp (find_max' x gv2) (find_max' n gv2) a2), (pow2heapp (find_max' x gv2) (find_max' n gv2) a1)
(pow2heapp (find_max' x gv2) (find_max' n gv2) gv5), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node n gv5 gv5))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a2))
(pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' n gv2) (smash gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' n gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) a2)
(pow2heapp (find_max' x gv2) (find_max' x q) a1), (pow2heapp (find_max' x gv2) (find_max' x q) gv5), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv5 a1))
(pow2heapp (find_max' x gv2) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv5 gv5))
(pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf)
(pow2heapp (find_max' x gv2) (find_max' x gv2) a2), (pow2heapp (find_max' x gv2) (find_max' x gv2) a1), (pow2heapp (find_max' x gv2) (find_max' x gv2) gv5), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv5 a2))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv5 a1))
(pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv5 a2)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv5 gv5))
(pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) a2), (pow2heapp (find_max' x gv2) (length q) a1), (pow2heapp (find_max' x gv2) (length q) gv5), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n a1 gv5))
(pow2heapp (find_max' x gv2) (length q) (Node n gv5 a2)), (pow2heapp (find_max' x gv2) (length q) (Node n gv5 a1)), (pow2heapp (find_max' x gv2) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x a1 gv5)), (pow2heapp (find_max' x gv2) (length q) (Node x gv5 a2))
(pow2heapp (find_max' x gv2) (length q) (Node x gv5 a1)), (pow2heapp (find_max' x gv2) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (length q) (smash a1 a2)), (pow2heapp (find_max' x gv2) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length q) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (length q) (smash gv5 a2)), (pow2heapp (find_max' x gv2) (length q) (smash gv5 a1))
(pow2heapp (find_max' x gv2) (length q) (smash gv5 gv5)), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) a2), (pow2heapp (find_max' x gv2) (length gv2) a1), (pow2heapp (find_max' x gv2) (length gv2) gv5), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a2 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n a1 a1))
(pow2heapp (find_max' x gv2) (length gv2) (Node n a1 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv5 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv5 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node n gv5 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a2 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x a1 gv5))
(pow2heapp (find_max' x gv2) (length gv2) (Node x gv5 a2)), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv5 a1)), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv5 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a2 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 a2)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash a1 gv5)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv5 a2))
(pow2heapp (find_max' x gv2) (length gv2) (smash gv5 a1)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv5 gv5)), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n gv5), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a2 gv5)), (pow2heapp (length q) n (Node n a1 a2))
(pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (Node n a1 gv5)), (pow2heapp (length q) n (Node n gv5 a2)), (pow2heapp (length q) n (Node n gv5 a1)), (pow2heapp (length q) n (Node n gv5 gv5)), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a2 gv5)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1))
(pow2heapp (length q) n (Node x a1 gv5)), (pow2heapp (length q) n (Node x gv5 a2)), (pow2heapp (length q) n (Node x gv5 a1)), (pow2heapp (length q) n (Node x gv5 gv5)), (pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a2 gv5)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n (smash a1 gv5))
(pow2heapp (length q) n (smash gv5 a2)), (pow2heapp (length q) n (smash gv5 a1)), (pow2heapp (length q) n (smash gv5 gv5)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x gv5), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a2 gv5))
(pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (Node n a1 gv5)), (pow2heapp (length q) x (Node n gv5 a2)), (pow2heapp (length q) x (Node n gv5 a1)), (pow2heapp (length q) x (Node n gv5 gv5)), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a2 gv5)), (pow2heapp (length q) x (Node x a1 a2))
(pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node x a1 gv5)), (pow2heapp (length q) x (Node x gv5 a2)), (pow2heapp (length q) x (Node x gv5 a1)), (pow2heapp (length q) x (Node x gv5 gv5)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a2 gv5)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1))
(pow2heapp (length q) x (smash a1 gv5)), (pow2heapp (length q) x (smash gv5 a2)), (pow2heapp (length q) x (smash gv5 a1)), (pow2heapp (length q) x (smash gv5 gv5)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) gv5), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1))
(pow2heapp (length q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (length q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv5))
(pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 gv5)), (pow2heapp (length q) (find_max' n q) (smash a1 a2))
(pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 gv5)), (pow2heapp (length q) (find_max' n q) (smash gv5 a2)), (pow2heapp (length q) (find_max' n q) (smash gv5 a1)), (pow2heapp (length q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' n gv2) a2), (pow2heapp (length q) (find_max' n gv2) a1), (pow2heapp (length q) (find_max' n gv2) gv5), (pow2heapp (length q) (find_max' n gv2) (Node n a2 a2))
(pow2heapp (length q) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n a2 gv5)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (length q) (find_max' n gv2) (Node n gv5 a2)), (pow2heapp (length q) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (length q) (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x a2 a1))
(pow2heapp (length q) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x a1 gv5)), (pow2heapp (length q) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (length q) (find_max' n gv2) (Node x gv5 a1)), (pow2heapp (length q) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' n gv2) (smash a2 a2)), (pow2heapp (length q) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a2 gv5))
(pow2heapp (length q) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (length q) (find_max' n gv2) (smash gv5 a2)), (pow2heapp (length q) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (length q) (find_max' n gv2) (smash gv5 gv5)), (pow2heapp (length q) (find_max' n gv2) Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) gv5)
(pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a2 a2))
(pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (length q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1))
(pow2heapp (length q) (find_max' x q) (smash a2 gv5)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 gv5)), (pow2heapp (length q) (find_max' x q) (smash gv5 a2)), (pow2heapp (length q) (find_max' x q) (smash gv5 a1)), (pow2heapp (length q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) a2), (pow2heapp (length q) (find_max' x gv2) a1)
(pow2heapp (length q) (find_max' x gv2) gv5), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n a2 gv5)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (length q) (find_max' x gv2) (Node n gv5 a2)), (pow2heapp (length q) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (length q) (find_max' x gv2) (Node n gv5 gv5))
(pow2heapp (length q) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x a1 gv5)), (pow2heapp (length q) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (length q) (find_max' x gv2) (Node x gv5 a1)), (pow2heapp (length q) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' x gv2) (smash a2 a2))
(pow2heapp (length q) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a2 gv5)), (pow2heapp (length q) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv2) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (length q) (find_max' x gv2) (smash gv5 a2)), (pow2heapp (length q) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (length q) (find_max' x gv2) (smash gv5 gv5)), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (length q) a2)
(pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) gv5), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a2 gv5)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (Node n a1 gv5)), (pow2heapp (length q) (length q) (Node n gv5 a2)), (pow2heapp (length q) (length q) (Node n gv5 a1))
(pow2heapp (length q) (length q) (Node n gv5 gv5)), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a2 gv5)), (pow2heapp (length q) (length q) (Node x a1 a2)), (pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node x a1 gv5)), (pow2heapp (length q) (length q) (Node x gv5 a2)), (pow2heapp (length q) (length q) (Node x gv5 a1)), (pow2heapp (length q) (length q) (Node x gv5 gv5))
(pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a2 gv5)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) (smash a1 gv5)), (pow2heapp (length q) (length q) (smash gv5 a2)), (pow2heapp (length q) (length q) (smash gv5 a1)), (pow2heapp (length q) (length q) (smash gv5 gv5)), (pow2heapp (length q) (length q) Leaf)
(pow2heapp (length q) (length gv2) a2), (pow2heapp (length q) (length gv2) a1), (pow2heapp (length q) (length gv2) gv5), (pow2heapp (length q) (length gv2) (Node n a2 a2)), (pow2heapp (length q) (length gv2) (Node n a2 a1)), (pow2heapp (length q) (length gv2) (Node n a2 gv5)), (pow2heapp (length q) (length gv2) (Node n a1 a2)), (pow2heapp (length q) (length gv2) (Node n a1 a1)), (pow2heapp (length q) (length gv2) (Node n a1 gv5)), (pow2heapp (length q) (length gv2) (Node n gv5 a2))
(pow2heapp (length q) (length gv2) (Node n gv5 a1)), (pow2heapp (length q) (length gv2) (Node n gv5 gv5)), (pow2heapp (length q) (length gv2) (Node x a2 a2)), (pow2heapp (length q) (length gv2) (Node x a2 a1)), (pow2heapp (length q) (length gv2) (Node x a2 gv5)), (pow2heapp (length q) (length gv2) (Node x a1 a2)), (pow2heapp (length q) (length gv2) (Node x a1 a1)), (pow2heapp (length q) (length gv2) (Node x a1 gv5)), (pow2heapp (length q) (length gv2) (Node x gv5 a2)), (pow2heapp (length q) (length gv2) (Node x gv5 a1))
(pow2heapp (length q) (length gv2) (Node x gv5 gv5)), (pow2heapp (length q) (length gv2) (smash a2 a2)), (pow2heapp (length q) (length gv2) (smash a2 a1)), (pow2heapp (length q) (length gv2) (smash a2 gv5)), (pow2heapp (length q) (length gv2) (smash a1 a2)), (pow2heapp (length q) (length gv2) (smash a1 a1)), (pow2heapp (length q) (length gv2) (smash a1 gv5)), (pow2heapp (length q) (length gv2) (smash gv5 a2)), (pow2heapp (length q) (length gv2) (smash gv5 a1)), (pow2heapp (length q) (length gv2) (smash gv5 gv5))
(pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) n a2), (pow2heapp (length gv2) n a1), (pow2heapp (length gv2) n gv5), (pow2heapp (length gv2) n (Node n a2 a2)), (pow2heapp (length gv2) n (Node n a2 a1)), (pow2heapp (length gv2) n (Node n a2 gv5)), (pow2heapp (length gv2) n (Node n a1 a2)), (pow2heapp (length gv2) n (Node n a1 a1)), (pow2heapp (length gv2) n (Node n a1 gv5))
(pow2heapp (length gv2) n (Node n gv5 a2)), (pow2heapp (length gv2) n (Node n gv5 a1)), (pow2heapp (length gv2) n (Node n gv5 gv5)), (pow2heapp (length gv2) n (Node x a2 a2)), (pow2heapp (length gv2) n (Node x a2 a1)), (pow2heapp (length gv2) n (Node x a2 gv5)), (pow2heapp (length gv2) n (Node x a1 a2)), (pow2heapp (length gv2) n (Node x a1 a1)), (pow2heapp (length gv2) n (Node x a1 gv5)), (pow2heapp (length gv2) n (Node x gv5 a2))
(pow2heapp (length gv2) n (Node x gv5 a1)), (pow2heapp (length gv2) n (Node x gv5 gv5)), (pow2heapp (length gv2) n (smash a2 a2)), (pow2heapp (length gv2) n (smash a2 a1)), (pow2heapp (length gv2) n (smash a2 gv5)), (pow2heapp (length gv2) n (smash a1 a2)), (pow2heapp (length gv2) n (smash a1 a1)), (pow2heapp (length gv2) n (smash a1 gv5)), (pow2heapp (length gv2) n (smash gv5 a2)), (pow2heapp (length gv2) n (smash gv5 a1))
(pow2heapp (length gv2) n (smash gv5 gv5)), (pow2heapp (length gv2) n Leaf), (pow2heapp (length gv2) x a2), (pow2heapp (length gv2) x a1), (pow2heapp (length gv2) x gv5), (pow2heapp (length gv2) x (Node n a2 a2)), (pow2heapp (length gv2) x (Node n a2 a1)), (pow2heapp (length gv2) x (Node n a2 gv5)), (pow2heapp (length gv2) x (Node n a1 a2)), (pow2heapp (length gv2) x (Node n a1 a1))
(pow2heapp (length gv2) x (Node n a1 gv5)), (pow2heapp (length gv2) x (Node n gv5 a2)), (pow2heapp (length gv2) x (Node n gv5 a1)), (pow2heapp (length gv2) x (Node n gv5 gv5)), (pow2heapp (length gv2) x (Node x a2 a2)), (pow2heapp (length gv2) x (Node x a2 a1)), (pow2heapp (length gv2) x (Node x a2 gv5)), (pow2heapp (length gv2) x (Node x a1 a2)), (pow2heapp (length gv2) x (Node x a1 a1)), (pow2heapp (length gv2) x (Node x a1 gv5))
(pow2heapp (length gv2) x (Node x gv5 a2)), (pow2heapp (length gv2) x (Node x gv5 a1)), (pow2heapp (length gv2) x (Node x gv5 gv5)), (pow2heapp (length gv2) x (smash a2 a2)), (pow2heapp (length gv2) x (smash a2 a1)), (pow2heapp (length gv2) x (smash a2 gv5)), (pow2heapp (length gv2) x (smash a1 a2)), (pow2heapp (length gv2) x (smash a1 a1)), (pow2heapp (length gv2) x (smash a1 gv5)), (pow2heapp (length gv2) x (smash gv5 a2))
(pow2heapp (length gv2) x (smash gv5 a1)), (pow2heapp (length gv2) x (smash gv5 gv5)), (pow2heapp (length gv2) x Leaf), (pow2heapp (length gv2) (find_max' n q) a2), (pow2heapp (length gv2) (find_max' n q) a1), (pow2heapp (length gv2) (find_max' n q) gv5), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n a2 gv5)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 a2))
(pow2heapp (length gv2) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n a1 gv5)), (pow2heapp (length gv2) (find_max' n q) (Node n gv5 a2)), (pow2heapp (length gv2) (find_max' n q) (Node n gv5 a1)), (pow2heapp (length gv2) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x a2 gv5)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x a1 a1))
(pow2heapp (length gv2) (find_max' n q) (Node x a1 gv5)), (pow2heapp (length gv2) (find_max' n q) (Node x gv5 a2)), (pow2heapp (length gv2) (find_max' n q) (Node x gv5 a1)), (pow2heapp (length gv2) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a2 gv5)), (pow2heapp (length gv2) (find_max' n q) (smash a1 a2)), (pow2heapp (length gv2) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' n q) (smash a1 gv5))
(pow2heapp (length gv2) (find_max' n q) (smash gv5 a2)), (pow2heapp (length gv2) (find_max' n q) (smash gv5 a1)), (pow2heapp (length gv2) (find_max' n q) (smash gv5 gv5)), (pow2heapp (length gv2) (find_max' n q) Leaf), (pow2heapp (length gv2) (find_max' n gv2) a2), (pow2heapp (length gv2) (find_max' n gv2) a1), (pow2heapp (length gv2) (find_max' n gv2) gv5), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a2 gv5))
(pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n a1 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv5 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv5 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node n gv5 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a2 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a2))
(pow2heapp (length gv2) (find_max' n gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x a1 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv5 a2)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv5 a1)), (pow2heapp (length gv2) (find_max' n gv2) (Node x gv5 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash a2 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash a1 a1))
(pow2heapp (length gv2) (find_max' n gv2) (smash a1 gv5)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv5 a2)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv5 a1)), (pow2heapp (length gv2) (find_max' n gv2) (smash gv5 gv5)), (pow2heapp (length gv2) (find_max' n gv2) Leaf), (pow2heapp (length gv2) (find_max' x q) a2), (pow2heapp (length gv2) (find_max' x q) a1), (pow2heapp (length gv2) (find_max' x q) gv5), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a2 a1))
(pow2heapp (length gv2) (find_max' x q) (Node n a2 gv5)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' x q) (Node n a1 gv5)), (pow2heapp (length gv2) (find_max' x q) (Node n gv5 a2)), (pow2heapp (length gv2) (find_max' x q) (Node n gv5 a1)), (pow2heapp (length gv2) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a2 gv5))
(pow2heapp (length gv2) (find_max' x q) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x a1 gv5)), (pow2heapp (length gv2) (find_max' x q) (Node x gv5 a2)), (pow2heapp (length gv2) (find_max' x q) (Node x gv5 a1)), (pow2heapp (length gv2) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x q) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a2 gv5)), (pow2heapp (length gv2) (find_max' x q) (smash a1 a2))
(pow2heapp (length gv2) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv2) (find_max' x q) (smash a1 gv5)), (pow2heapp (length gv2) (find_max' x q) (smash gv5 a2)), (pow2heapp (length gv2) (find_max' x q) (smash gv5 a1)), (pow2heapp (length gv2) (find_max' x q) (smash gv5 gv5)), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) a2), (pow2heapp (length gv2) (find_max' x gv2) a1), (pow2heapp (length gv2) (find_max' x gv2) gv5), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a2))
(pow2heapp (length gv2) (find_max' x gv2) (Node n a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a2 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n a1 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv5 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv5 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node n gv5 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a2 a1))
(pow2heapp (length gv2) (find_max' x gv2) (Node x a2 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x a1 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv5 a2)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv5 a1)), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv5 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash a2 gv5))
(pow2heapp (length gv2) (find_max' x gv2) (smash a1 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash a1 gv5)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv5 a2)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv5 a1)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv5 gv5)), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (length q) a2), (pow2heapp (length gv2) (length q) a1), (pow2heapp (length gv2) (length q) gv5)
(pow2heapp (length gv2) (length q) (Node n a2 a2)), (pow2heapp (length gv2) (length q) (Node n a2 a1)), (pow2heapp (length gv2) (length q) (Node n a2 gv5)), (pow2heapp (length gv2) (length q) (Node n a1 a2)), (pow2heapp (length gv2) (length q) (Node n a1 a1)), (pow2heapp (length gv2) (length q) (Node n a1 gv5)), (pow2heapp (length gv2) (length q) (Node n gv5 a2)), (pow2heapp (length gv2) (length q) (Node n gv5 a1)), (pow2heapp (length gv2) (length q) (Node n gv5 gv5)), (pow2heapp (length gv2) (length q) (Node x a2 a2))
(pow2heapp (length gv2) (length q) (Node x a2 a1)), (pow2heapp (length gv2) (length q) (Node x a2 gv5)), (pow2heapp (length gv2) (length q) (Node x a1 a2)), (pow2heapp (length gv2) (length q) (Node x a1 a1)), (pow2heapp (length gv2) (length q) (Node x a1 gv5)), (pow2heapp (length gv2) (length q) (Node x gv5 a2)), (pow2heapp (length gv2) (length q) (Node x gv5 a1)), (pow2heapp (length gv2) (length q) (Node x gv5 gv5)), (pow2heapp (length gv2) (length q) (smash a2 a2)), (pow2heapp (length gv2) (length q) (smash a2 a1))
(pow2heapp (length gv2) (length q) (smash a2 gv5)), (pow2heapp (length gv2) (length q) (smash a1 a2)), (pow2heapp (length gv2) (length q) (smash a1 a1)), (pow2heapp (length gv2) (length q) (smash a1 gv5)), (pow2heapp (length gv2) (length q) (smash gv5 a2)), (pow2heapp (length gv2) (length q) (smash gv5 a1)), (pow2heapp (length gv2) (length q) (smash gv5 gv5)), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) a2), (pow2heapp (length gv2) (length gv2) a1)
(pow2heapp (length gv2) (length gv2) gv5), (pow2heapp (length gv2) (length gv2) (Node n a2 a2)), (pow2heapp (length gv2) (length gv2) (Node n a2 a1)), (pow2heapp (length gv2) (length gv2) (Node n a2 gv5)), (pow2heapp (length gv2) (length gv2) (Node n a1 a2)), (pow2heapp (length gv2) (length gv2) (Node n a1 a1)), (pow2heapp (length gv2) (length gv2) (Node n a1 gv5)), (pow2heapp (length gv2) (length gv2) (Node n gv5 a2)), (pow2heapp (length gv2) (length gv2) (Node n gv5 a1)), (pow2heapp (length gv2) (length gv2) (Node n gv5 gv5))
(pow2heapp (length gv2) (length gv2) (Node x a2 a2)), (pow2heapp (length gv2) (length gv2) (Node x a2 a1)), (pow2heapp (length gv2) (length gv2) (Node x a2 gv5)), (pow2heapp (length gv2) (length gv2) (Node x a1 a2)), (pow2heapp (length gv2) (length gv2) (Node x a1 a1)), (pow2heapp (length gv2) (length gv2) (Node x a1 gv5)), (pow2heapp (length gv2) (length gv2) (Node x gv5 a2)), (pow2heapp (length gv2) (length gv2) (Node x gv5 a1)), (pow2heapp (length gv2) (length gv2) (Node x gv5 gv5)), (pow2heapp (length gv2) (length gv2) (smash a2 a2))
(pow2heapp (length gv2) (length gv2) (smash a2 a1)), (pow2heapp (length gv2) (length gv2) (smash a2 gv5)), (pow2heapp (length gv2) (length gv2) (smash a1 a2)), (pow2heapp (length gv2) (length gv2) (smash a1 a1)), (pow2heapp (length gv2) (length gv2) (smash a1 gv5)), (pow2heapp (length gv2) (length gv2) (smash gv5 a2)), (pow2heapp (length gv2) (length gv2) (smash gv5 a1)), (pow2heapp (length gv2) (length gv2) (smash gv5 gv5)), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (a2 :: q))
(Permutation q (a2 :: gv2)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv2)), (Permutation q (gv5 :: q)), (Permutation q (gv5 :: gv2)), (Permutation q (merge q q)), (Permutation q (merge q gv2)), (Permutation q (merge gv2 q)), (Permutation q (merge gv2 gv2)), (Permutation q (heap_delete_max a2))
(Permutation q (heap_delete_max a1)), (Permutation q (heap_delete_max gv5)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q q gv5)), (Permutation q (join q gv2 a2)), (Permutation q (join q gv2 a1)), (Permutation q (join q gv2 gv5)), (Permutation q (join gv2 q a2)), (Permutation q (join gv2 q a1))
(Permutation q (join gv2 q gv5)), (Permutation q (join gv2 gv2 a2)), (Permutation q (join gv2 gv2 a1)), (Permutation q (join gv2 gv2 gv5)), (Permutation q (insert n q)), (Permutation q (insert n gv2)), (Permutation q (insert x q)), (Permutation q (insert x gv2)), (Permutation q (carry q a2)), (Permutation q (carry q a1))
(Permutation q (carry q gv5)), (Permutation q (carry gv2 a2)), (Permutation q (carry gv2 a1)), (Permutation q (carry gv2 gv5)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q []), (Permutation gv2 (a2 :: q))
(Permutation gv2 (a2 :: gv2)), (Permutation gv2 (a1 :: q)), (Permutation gv2 (a1 :: gv2)), (Permutation gv2 (gv5 :: q)), (Permutation gv2 (gv5 :: gv2)), (Permutation gv2 (merge q q)), (Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (heap_delete_max a2))
(Permutation gv2 (heap_delete_max a1)), (Permutation gv2 (heap_delete_max gv5)), (Permutation gv2 (join q q a2)), (Permutation gv2 (join q q a1)), (Permutation gv2 (join q q gv5)), (Permutation gv2 (join q gv2 a2)), (Permutation gv2 (join q gv2 a1)), (Permutation gv2 (join q gv2 gv5)), (Permutation gv2 (join gv2 q a2)), (Permutation gv2 (join gv2 q a1))
(Permutation gv2 (join gv2 q gv5)), (Permutation gv2 (join gv2 gv2 a2)), (Permutation gv2 (join gv2 gv2 a1)), (Permutation gv2 (join gv2 gv2 gv5)), (Permutation gv2 (insert n q)), (Permutation gv2 (insert n gv2)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (carry q a2)), (Permutation gv2 (carry q a1))
(Permutation gv2 (carry q gv5)), (Permutation gv2 (carry gv2 a2)), (Permutation gv2 (carry gv2 a1)), (Permutation gv2 (carry gv2 gv5)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2)), (Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a2 :: q) q)
(Permutation (a2 :: q) gv2), (Permutation (a2 :: q) (a2 :: gv2)), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv2)), (Permutation (a2 :: q) (gv5 :: q)), (Permutation (a2 :: q) (gv5 :: gv2)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv2)), (Permutation (a2 :: q) (merge gv2 q)), (Permutation (a2 :: q) (merge gv2 gv2))
(Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (heap_delete_max gv5)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (join q q gv5)), (Permutation (a2 :: q) (join q gv2 a2)), (Permutation (a2 :: q) (join q gv2 a1)), (Permutation (a2 :: q) (join q gv2 gv5)), (Permutation (a2 :: q) (join gv2 q a2))
(Permutation (a2 :: q) (join gv2 q a1)), (Permutation (a2 :: q) (join gv2 q gv5)), (Permutation (a2 :: q) (join gv2 gv2 a2)), (Permutation (a2 :: q) (join gv2 gv2 a1)), (Permutation (a2 :: q) (join gv2 gv2 gv5)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert n gv2)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv2)), (Permutation (a2 :: q) (carry q a2))
(Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry q gv5)), (Permutation (a2 :: q) (carry gv2 a2)), (Permutation (a2 :: q) (carry gv2 a1)), (Permutation (a2 :: q) (carry gv2 gv5)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv2)), (Permutation (a2 :: q) (gv2 ++ q)), (Permutation (a2 :: q) (gv2 ++ gv2)), (Permutation (a2 :: q) [])
(Permutation (a2 :: gv2) q), (Permutation (a2 :: gv2) gv2), (Permutation (a2 :: gv2) (a2 :: q)), (Permutation (a2 :: gv2) (a1 :: q)), (Permutation (a2 :: gv2) (a1 :: gv2)), (Permutation (a2 :: gv2) (gv5 :: q)), (Permutation (a2 :: gv2) (gv5 :: gv2)), (Permutation (a2 :: gv2) (merge q q)), (Permutation (a2 :: gv2) (merge q gv2)), (Permutation (a2 :: gv2) (merge gv2 q))
(Permutation (a2 :: gv2) (merge gv2 gv2)), (Permutation (a2 :: gv2) (heap_delete_max a2)), (Permutation (a2 :: gv2) (heap_delete_max a1)), (Permutation (a2 :: gv2) (heap_delete_max gv5)), (Permutation (a2 :: gv2) (join q q a2)), (Permutation (a2 :: gv2) (join q q a1)), (Permutation (a2 :: gv2) (join q q gv5)), (Permutation (a2 :: gv2) (join q gv2 a2)), (Permutation (a2 :: gv2) (join q gv2 a1)), (Permutation (a2 :: gv2) (join q gv2 gv5))
(Permutation (a2 :: gv2) (join gv2 q a2)), (Permutation (a2 :: gv2) (join gv2 q a1)), (Permutation (a2 :: gv2) (join gv2 q gv5)), (Permutation (a2 :: gv2) (join gv2 gv2 a2)), (Permutation (a2 :: gv2) (join gv2 gv2 a1)), (Permutation (a2 :: gv2) (join gv2 gv2 gv5)), (Permutation (a2 :: gv2) (insert n q)), (Permutation (a2 :: gv2) (insert n gv2)), (Permutation (a2 :: gv2) (insert x q)), (Permutation (a2 :: gv2) (insert x gv2))
(Permutation (a2 :: gv2) (carry q a2)), (Permutation (a2 :: gv2) (carry q a1)), (Permutation (a2 :: gv2) (carry q gv5)), (Permutation (a2 :: gv2) (carry gv2 a2)), (Permutation (a2 :: gv2) (carry gv2 a1)), (Permutation (a2 :: gv2) (carry gv2 gv5)), (Permutation (a2 :: gv2) (q ++ q)), (Permutation (a2 :: gv2) (q ++ gv2)), (Permutation (a2 :: gv2) (gv2 ++ q)), (Permutation (a2 :: gv2) (gv2 ++ gv2))
(Permutation (a2 :: gv2) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv2), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (a2 :: gv2)), (Permutation (a1 :: q) (a1 :: gv2)), (Permutation (a1 :: q) (gv5 :: q)), (Permutation (a1 :: q) (gv5 :: gv2)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv2))
(Permutation (a1 :: q) (merge gv2 q)), (Permutation (a1 :: q) (merge gv2 gv2)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (heap_delete_max gv5)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (join q q gv5)), (Permutation (a1 :: q) (join q gv2 a2)), (Permutation (a1 :: q) (join q gv2 a1))
(Permutation (a1 :: q) (join q gv2 gv5)), (Permutation (a1 :: q) (join gv2 q a2)), (Permutation (a1 :: q) (join gv2 q a1)), (Permutation (a1 :: q) (join gv2 q gv5)), (Permutation (a1 :: q) (join gv2 gv2 a2)), (Permutation (a1 :: q) (join gv2 gv2 a1)), (Permutation (a1 :: q) (join gv2 gv2 gv5)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert n gv2)), (Permutation (a1 :: q) (insert x q))
(Permutation (a1 :: q) (insert x gv2)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry q gv5)), (Permutation (a1 :: q) (carry gv2 a2)), (Permutation (a1 :: q) (carry gv2 a1)), (Permutation (a1 :: q) (carry gv2 gv5)), (Permutation (a1 :: q) (q ++ q)), (Permutation (a1 :: q) (q ++ gv2)), (Permutation (a1 :: q) (gv2 ++ q))
(Permutation (a1 :: q) (gv2 ++ gv2)), (Permutation (a1 :: q) []), (Permutation (a1 :: gv2) q), (Permutation (a1 :: gv2) gv2), (Permutation (a1 :: gv2) (a2 :: q)), (Permutation (a1 :: gv2) (a2 :: gv2)), (Permutation (a1 :: gv2) (a1 :: q)), (Permutation (a1 :: gv2) (gv5 :: q)), (Permutation (a1 :: gv2) (gv5 :: gv2)), (Permutation (a1 :: gv2) (merge q q))
(Permutation (a1 :: gv2) (merge q gv2)), (Permutation (a1 :: gv2) (merge gv2 q)), (Permutation (a1 :: gv2) (merge gv2 gv2)), (Permutation (a1 :: gv2) (heap_delete_max a2)), (Permutation (a1 :: gv2) (heap_delete_max a1)), (Permutation (a1 :: gv2) (heap_delete_max gv5)), (Permutation (a1 :: gv2) (join q q a2)), (Permutation (a1 :: gv2) (join q q a1)), (Permutation (a1 :: gv2) (join q q gv5)), (Permutation (a1 :: gv2) (join q gv2 a2))
(Permutation (a1 :: gv2) (join q gv2 a1)), (Permutation (a1 :: gv2) (join q gv2 gv5)), (Permutation (a1 :: gv2) (join gv2 q a2)), (Permutation (a1 :: gv2) (join gv2 q a1)), (Permutation (a1 :: gv2) (join gv2 q gv5)), (Permutation (a1 :: gv2) (join gv2 gv2 a2)), (Permutation (a1 :: gv2) (join gv2 gv2 a1)), (Permutation (a1 :: gv2) (join gv2 gv2 gv5)), (Permutation (a1 :: gv2) (insert n q)), (Permutation (a1 :: gv2) (insert n gv2))
(Permutation (a1 :: gv2) (insert x q)), (Permutation (a1 :: gv2) (insert x gv2)), (Permutation (a1 :: gv2) (carry q a2)), (Permutation (a1 :: gv2) (carry q a1)), (Permutation (a1 :: gv2) (carry q gv5)), (Permutation (a1 :: gv2) (carry gv2 a2)), (Permutation (a1 :: gv2) (carry gv2 a1)), (Permutation (a1 :: gv2) (carry gv2 gv5)), (Permutation (a1 :: gv2) (q ++ q)), (Permutation (a1 :: gv2) (q ++ gv2))
(Permutation (a1 :: gv2) (gv2 ++ q)), (Permutation (a1 :: gv2) (gv2 ++ gv2)), (Permutation (a1 :: gv2) []), (Permutation (gv5 :: q) q), (Permutation (gv5 :: q) gv2), (Permutation (gv5 :: q) (a2 :: q)), (Permutation (gv5 :: q) (a2 :: gv2)), (Permutation (gv5 :: q) (a1 :: q)), (Permutation (gv5 :: q) (a1 :: gv2)), (Permutation (gv5 :: q) (gv5 :: gv2))
(Permutation (gv5 :: q) (merge q q)), (Permutation (gv5 :: q) (merge q gv2)), (Permutation (gv5 :: q) (merge gv2 q)), (Permutation (gv5 :: q) (merge gv2 gv2)), (Permutation (gv5 :: q) (heap_delete_max a2)), (Permutation (gv5 :: q) (heap_delete_max a1)), (Permutation (gv5 :: q) (heap_delete_max gv5)), (Permutation (gv5 :: q) (join q q a2)), (Permutation (gv5 :: q) (join q q a1)), (Permutation (gv5 :: q) (join q q gv5))
(Permutation (gv5 :: q) (join q gv2 a2)), (Permutation (gv5 :: q) (join q gv2 a1)), (Permutation (gv5 :: q) (join q gv2 gv5)), (Permutation (gv5 :: q) (join gv2 q a2)), (Permutation (gv5 :: q) (join gv2 q a1)), (Permutation (gv5 :: q) (join gv2 q gv5)), (Permutation (gv5 :: q) (join gv2 gv2 a2)), (Permutation (gv5 :: q) (join gv2 gv2 a1)), (Permutation (gv5 :: q) (join gv2 gv2 gv5)), (Permutation (gv5 :: q) (insert n q))
(Permutation (gv5 :: q) (insert n gv2)), (Permutation (gv5 :: q) (insert x q)), (Permutation (gv5 :: q) (insert x gv2)), (Permutation (gv5 :: q) (carry q a2)), (Permutation (gv5 :: q) (carry q a1)), (Permutation (gv5 :: q) (carry q gv5)), (Permutation (gv5 :: q) (carry gv2 a2)), (Permutation (gv5 :: q) (carry gv2 a1)), (Permutation (gv5 :: q) (carry gv2 gv5)), (Permutation (gv5 :: q) (q ++ q))
(Permutation (gv5 :: q) (q ++ gv2)), (Permutation (gv5 :: q) (gv2 ++ q)), (Permutation (gv5 :: q) (gv2 ++ gv2)), (Permutation (gv5 :: q) []), (Permutation (gv5 :: gv2) q), (Permutation (gv5 :: gv2) gv2), (Permutation (gv5 :: gv2) (a2 :: q)), (Permutation (gv5 :: gv2) (a2 :: gv2)), (Permutation (gv5 :: gv2) (a1 :: q)), (Permutation (gv5 :: gv2) (a1 :: gv2))
(Permutation (gv5 :: gv2) (gv5 :: q)), (Permutation (gv5 :: gv2) (merge q q)), (Permutation (gv5 :: gv2) (merge q gv2)), (Permutation (gv5 :: gv2) (merge gv2 q)), (Permutation (gv5 :: gv2) (merge gv2 gv2)), (Permutation (gv5 :: gv2) (heap_delete_max a2)), (Permutation (gv5 :: gv2) (heap_delete_max a1)), (Permutation (gv5 :: gv2) (heap_delete_max gv5)), (Permutation (gv5 :: gv2) (join q q a2)), (Permutation (gv5 :: gv2) (join q q a1))
(Permutation (gv5 :: gv2) (join q q gv5)), (Permutation (gv5 :: gv2) (join q gv2 a2)), (Permutation (gv5 :: gv2) (join q gv2 a1)), (Permutation (gv5 :: gv2) (join q gv2 gv5)), (Permutation (gv5 :: gv2) (join gv2 q a2)), (Permutation (gv5 :: gv2) (join gv2 q a1)), (Permutation (gv5 :: gv2) (join gv2 q gv5)), (Permutation (gv5 :: gv2) (join gv2 gv2 a2)), (Permutation (gv5 :: gv2) (join gv2 gv2 a1)), (Permutation (gv5 :: gv2) (join gv2 gv2 gv5))
(Permutation (gv5 :: gv2) (insert n q)), (Permutation (gv5 :: gv2) (insert n gv2)), (Permutation (gv5 :: gv2) (insert x q)), (Permutation (gv5 :: gv2) (insert x gv2)), (Permutation (gv5 :: gv2) (carry q a2)), (Permutation (gv5 :: gv2) (carry q a1)), (Permutation (gv5 :: gv2) (carry q gv5)), (Permutation (gv5 :: gv2) (carry gv2 a2)), (Permutation (gv5 :: gv2) (carry gv2 a1)), (Permutation (gv5 :: gv2) (carry gv2 gv5))
(Permutation (gv5 :: gv2) (q ++ q)), (Permutation (gv5 :: gv2) (q ++ gv2)), (Permutation (gv5 :: gv2) (gv2 ++ q)), (Permutation (gv5 :: gv2) (gv2 ++ gv2)), (Permutation (gv5 :: gv2) []), (Permutation (merge q q) q), (Permutation (merge q q) gv2), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a2 :: gv2)), (Permutation (merge q q) (a1 :: q))
(Permutation (merge q q) (a1 :: gv2)), (Permutation (merge q q) (gv5 :: q)), (Permutation (merge q q) (gv5 :: gv2)), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (heap_delete_max gv5)), (Permutation (merge q q) (join q q a2))
(Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q q gv5)), (Permutation (merge q q) (join q gv2 a2)), (Permutation (merge q q) (join q gv2 a1)), (Permutation (merge q q) (join q gv2 gv5)), (Permutation (merge q q) (join gv2 q a2)), (Permutation (merge q q) (join gv2 q a1)), (Permutation (merge q q) (join gv2 q gv5)), (Permutation (merge q q) (join gv2 gv2 a2)), (Permutation (merge q q) (join gv2 gv2 a1))
(Permutation (merge q q) (join gv2 gv2 gv5)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv2)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (carry q gv5)), (Permutation (merge q q) (carry gv2 a2)), (Permutation (merge q q) (carry gv2 a1))
(Permutation (merge q q) (carry gv2 gv5)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) []), (Permutation (merge q gv2) q), (Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (a2 :: q)), (Permutation (merge q gv2) (a2 :: gv2))
(Permutation (merge q gv2) (a1 :: q)), (Permutation (merge q gv2) (a1 :: gv2)), (Permutation (merge q gv2) (gv5 :: q)), (Permutation (merge q gv2) (gv5 :: gv2)), (Permutation (merge q gv2) (merge q q)), (Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (heap_delete_max a2)), (Permutation (merge q gv2) (heap_delete_max a1)), (Permutation (merge q gv2) (heap_delete_max gv5))
(Permutation (merge q gv2) (join q q a2)), (Permutation (merge q gv2) (join q q a1)), (Permutation (merge q gv2) (join q q gv5)), (Permutation (merge q gv2) (join q gv2 a2)), (Permutation (merge q gv2) (join q gv2 a1)), (Permutation (merge q gv2) (join q gv2 gv5)), (Permutation (merge q gv2) (join gv2 q a2)), (Permutation (merge q gv2) (join gv2 q a1)), (Permutation (merge q gv2) (join gv2 q gv5)), (Permutation (merge q gv2) (join gv2 gv2 a2))
(Permutation (merge q gv2) (join gv2 gv2 a1)), (Permutation (merge q gv2) (join gv2 gv2 gv5)), (Permutation (merge q gv2) (insert n q)), (Permutation (merge q gv2) (insert n gv2)), (Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (carry q a2)), (Permutation (merge q gv2) (carry q a1)), (Permutation (merge q gv2) (carry q gv5)), (Permutation (merge q gv2) (carry gv2 a2))
(Permutation (merge q gv2) (carry gv2 a1)), (Permutation (merge q gv2) (carry gv2 gv5)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2)), (Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2)), (Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (a2 :: q))
(Permutation (merge gv2 q) (a2 :: gv2)), (Permutation (merge gv2 q) (a1 :: q)), (Permutation (merge gv2 q) (a1 :: gv2)), (Permutation (merge gv2 q) (gv5 :: q)), (Permutation (merge gv2 q) (gv5 :: gv2)), (Permutation (merge gv2 q) (merge q q)), (Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (heap_delete_max a2)), (Permutation (merge gv2 q) (heap_delete_max a1))
(Permutation (merge gv2 q) (heap_delete_max gv5)), (Permutation (merge gv2 q) (join q q a2)), (Permutation (merge gv2 q) (join q q a1)), (Permutation (merge gv2 q) (join q q gv5)), (Permutation (merge gv2 q) (join q gv2 a2)), (Permutation (merge gv2 q) (join q gv2 a1)), (Permutation (merge gv2 q) (join q gv2 gv5)), (Permutation (merge gv2 q) (join gv2 q a2)), (Permutation (merge gv2 q) (join gv2 q a1)), (Permutation (merge gv2 q) (join gv2 q gv5))
(Permutation (merge gv2 q) (join gv2 gv2 a2)), (Permutation (merge gv2 q) (join gv2 gv2 a1)), (Permutation (merge gv2 q) (join gv2 gv2 gv5)), (Permutation (merge gv2 q) (insert n q)), (Permutation (merge gv2 q) (insert n gv2)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (carry q a2)), (Permutation (merge gv2 q) (carry q a1)), (Permutation (merge gv2 q) (carry q gv5))
(Permutation (merge gv2 q) (carry gv2 a2)), (Permutation (merge gv2 q) (carry gv2 a1)), (Permutation (merge gv2 q) (carry gv2 gv5)), (Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q)), (Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2)
(Permutation (merge gv2 gv2) (a2 :: q)), (Permutation (merge gv2 gv2) (a2 :: gv2)), (Permutation (merge gv2 gv2) (a1 :: q)), (Permutation (merge gv2 gv2) (a1 :: gv2)), (Permutation (merge gv2 gv2) (gv5 :: q)), (Permutation (merge gv2 gv2) (gv5 :: gv2)), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q)), (Permutation (merge gv2 gv2) (heap_delete_max a2))
(Permutation (merge gv2 gv2) (heap_delete_max a1)), (Permutation (merge gv2 gv2) (heap_delete_max gv5)), (Permutation (merge gv2 gv2) (join q q a2)), (Permutation (merge gv2 gv2) (join q q a1)), (Permutation (merge gv2 gv2) (join q q gv5)), (Permutation (merge gv2 gv2) (join q gv2 a2)), (Permutation (merge gv2 gv2) (join q gv2 a1)), (Permutation (merge gv2 gv2) (join q gv2 gv5)), (Permutation (merge gv2 gv2) (join gv2 q a2)), (Permutation (merge gv2 gv2) (join gv2 q a1))
(Permutation (merge gv2 gv2) (join gv2 q gv5)), (Permutation (merge gv2 gv2) (join gv2 gv2 a2)), (Permutation (merge gv2 gv2) (join gv2 gv2 a1)), (Permutation (merge gv2 gv2) (join gv2 gv2 gv5)), (Permutation (merge gv2 gv2) (insert n q)), (Permutation (merge gv2 gv2) (insert n gv2)), (Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (carry q a2)), (Permutation (merge gv2 gv2) (carry q a1))
(Permutation (merge gv2 gv2) (carry q gv5)), (Permutation (merge gv2 gv2) (carry gv2 a2)), (Permutation (merge gv2 gv2) (carry gv2 a1)), (Permutation (merge gv2 gv2) (carry gv2 gv5)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (heap_delete_max a2) q)
(Permutation (heap_delete_max a2) gv2), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv2)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv2)), (Permutation (heap_delete_max a2) (gv5 :: q)), (Permutation (heap_delete_max a2) (gv5 :: gv2)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (merge q gv2)), (Permutation (heap_delete_max a2) (merge gv2 q))
(Permutation (heap_delete_max a2) (merge gv2 gv2)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv5)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q q gv5)), (Permutation (heap_delete_max a2) (join q gv2 a2)), (Permutation (heap_delete_max a2) (join q gv2 a1)), (Permutation (heap_delete_max a2) (join q gv2 gv5)), (Permutation (heap_delete_max a2) (join gv2 q a2))
(Permutation (heap_delete_max a2) (join gv2 q a1)), (Permutation (heap_delete_max a2) (join gv2 q gv5)), (Permutation (heap_delete_max a2) (join gv2 gv2 a2)), (Permutation (heap_delete_max a2) (join gv2 gv2 a1)), (Permutation (heap_delete_max a2) (join gv2 gv2 gv5)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv2)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv2)), (Permutation (heap_delete_max a2) (carry q a2))
(Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry q gv5)), (Permutation (heap_delete_max a2) (carry gv2 a2)), (Permutation (heap_delete_max a2) (carry gv2 a1)), (Permutation (heap_delete_max a2) (carry gv2 gv5)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv2)), (Permutation (heap_delete_max a2) (gv2 ++ q)), (Permutation (heap_delete_max a2) (gv2 ++ gv2)), (Permutation (heap_delete_max a2) [])
(Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv2), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv2)), (Permutation (heap_delete_max a1) (a1 :: q)), (Permutation (heap_delete_max a1) (a1 :: gv2)), (Permutation (heap_delete_max a1) (gv5 :: q)), (Permutation (heap_delete_max a1) (gv5 :: gv2)), (Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (merge q gv2))
(Permutation (heap_delete_max a1) (merge gv2 q)), (Permutation (heap_delete_max a1) (merge gv2 gv2)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv5)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q q gv5)), (Permutation (heap_delete_max a1) (join q gv2 a2)), (Permutation (heap_delete_max a1) (join q gv2 a1)), (Permutation (heap_delete_max a1) (join q gv2 gv5))
(Permutation (heap_delete_max a1) (join gv2 q a2)), (Permutation (heap_delete_max a1) (join gv2 q a1)), (Permutation (heap_delete_max a1) (join gv2 q gv5)), (Permutation (heap_delete_max a1) (join gv2 gv2 a2)), (Permutation (heap_delete_max a1) (join gv2 gv2 a1)), (Permutation (heap_delete_max a1) (join gv2 gv2 gv5)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert n gv2)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv2))
(Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry q gv5)), (Permutation (heap_delete_max a1) (carry gv2 a2)), (Permutation (heap_delete_max a1) (carry gv2 a1)), (Permutation (heap_delete_max a1) (carry gv2 gv5)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv2)), (Permutation (heap_delete_max a1) (gv2 ++ q)), (Permutation (heap_delete_max a1) (gv2 ++ gv2))
(Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv5) q), (Permutation (heap_delete_max gv5) gv2), (Permutation (heap_delete_max gv5) (a2 :: q)), (Permutation (heap_delete_max gv5) (a2 :: gv2)), (Permutation (heap_delete_max gv5) (a1 :: q)), (Permutation (heap_delete_max gv5) (a1 :: gv2)), (Permutation (heap_delete_max gv5) (gv5 :: q)), (Permutation (heap_delete_max gv5) (gv5 :: gv2)), (Permutation (heap_delete_max gv5) (merge q q))
(Permutation (heap_delete_max gv5) (merge q gv2)), (Permutation (heap_delete_max gv5) (merge gv2 q)), (Permutation (heap_delete_max gv5) (merge gv2 gv2)), (Permutation (heap_delete_max gv5) (heap_delete_max a2)), (Permutation (heap_delete_max gv5) (heap_delete_max a1)), (Permutation (heap_delete_max gv5) (join q q a2)), (Permutation (heap_delete_max gv5) (join q q a1)), (Permutation (heap_delete_max gv5) (join q q gv5)), (Permutation (heap_delete_max gv5) (join q gv2 a2)), (Permutation (heap_delete_max gv5) (join q gv2 a1))
(Permutation (heap_delete_max gv5) (join q gv2 gv5)), (Permutation (heap_delete_max gv5) (join gv2 q a2)), (Permutation (heap_delete_max gv5) (join gv2 q a1)), (Permutation (heap_delete_max gv5) (join gv2 q gv5)), (Permutation (heap_delete_max gv5) (join gv2 gv2 a2)), (Permutation (heap_delete_max gv5) (join gv2 gv2 a1)), (Permutation (heap_delete_max gv5) (join gv2 gv2 gv5)), (Permutation (heap_delete_max gv5) (insert n q)), (Permutation (heap_delete_max gv5) (insert n gv2)), (Permutation (heap_delete_max gv5) (insert x q))
(Permutation (heap_delete_max gv5) (insert x gv2)), (Permutation (heap_delete_max gv5) (carry q a2)), (Permutation (heap_delete_max gv5) (carry q a1)), (Permutation (heap_delete_max gv5) (carry q gv5)), (Permutation (heap_delete_max gv5) (carry gv2 a2)), (Permutation (heap_delete_max gv5) (carry gv2 a1)), (Permutation (heap_delete_max gv5) (carry gv2 gv5)), (Permutation (heap_delete_max gv5) (q ++ q)), (Permutation (heap_delete_max gv5) (q ++ gv2)), (Permutation (heap_delete_max gv5) (gv2 ++ q))
(Permutation (heap_delete_max gv5) (gv2 ++ gv2)), (Permutation (heap_delete_max gv5) []), (Permutation (join q q a2) q), (Permutation (join q q a2) gv2), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a2 :: gv2)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (a1 :: gv2)), (Permutation (join q q a2) (gv5 :: q)), (Permutation (join q q a2) (gv5 :: gv2))
(Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv2)), (Permutation (join q q a2) (merge gv2 q)), (Permutation (join q q a2) (merge gv2 gv2)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (heap_delete_max gv5)), (Permutation (join q q a2) (join q q a1)), (Permutation (join q q a2) (join q q gv5)), (Permutation (join q q a2) (join q gv2 a2))
(Permutation (join q q a2) (join q gv2 a1)), (Permutation (join q q a2) (join q gv2 gv5)), (Permutation (join q q a2) (join gv2 q a2)), (Permutation (join q q a2) (join gv2 q a1)), (Permutation (join q q a2) (join gv2 q gv5)), (Permutation (join q q a2) (join gv2 gv2 a2)), (Permutation (join q q a2) (join gv2 gv2 a1)), (Permutation (join q q a2) (join gv2 gv2 gv5)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv2))
(Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert x gv2)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry q gv5)), (Permutation (join q q a2) (carry gv2 a2)), (Permutation (join q q a2) (carry gv2 a1)), (Permutation (join q q a2) (carry gv2 gv5)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) (q ++ gv2))
(Permutation (join q q a2) (gv2 ++ q)), (Permutation (join q q a2) (gv2 ++ gv2)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) gv2), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv2)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv2)), (Permutation (join q q a1) (gv5 :: q))
(Permutation (join q q a1) (gv5 :: gv2)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (merge q gv2)), (Permutation (join q q a1) (merge gv2 q)), (Permutation (join q q a1) (merge gv2 gv2)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (heap_delete_max gv5)), (Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q q gv5))
(Permutation (join q q a1) (join q gv2 a2)), (Permutation (join q q a1) (join q gv2 a1)), (Permutation (join q q a1) (join q gv2 gv5)), (Permutation (join q q a1) (join gv2 q a2)), (Permutation (join q q a1) (join gv2 q a1)), (Permutation (join q q a1) (join gv2 q gv5)), (Permutation (join q q a1) (join gv2 gv2 a2)), (Permutation (join q q a1) (join gv2 gv2 a1)), (Permutation (join q q a1) (join gv2 gv2 gv5)), (Permutation (join q q a1) (insert n q))
(Permutation (join q q a1) (insert n gv2)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert x gv2)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry q gv5)), (Permutation (join q q a1) (carry gv2 a2)), (Permutation (join q q a1) (carry gv2 a1)), (Permutation (join q q a1) (carry gv2 gv5)), (Permutation (join q q a1) (q ++ q))
(Permutation (join q q a1) (q ++ gv2)), (Permutation (join q q a1) (gv2 ++ q)), (Permutation (join q q a1) (gv2 ++ gv2)), (Permutation (join q q a1) []), (Permutation (join q q gv5) q), (Permutation (join q q gv5) gv2), (Permutation (join q q gv5) (a2 :: q)), (Permutation (join q q gv5) (a2 :: gv2)), (Permutation (join q q gv5) (a1 :: q)), (Permutation (join q q gv5) (a1 :: gv2))
(Permutation (join q q gv5) (gv5 :: q)), (Permutation (join q q gv5) (gv5 :: gv2)), (Permutation (join q q gv5) (merge q q)), (Permutation (join q q gv5) (merge q gv2)), (Permutation (join q q gv5) (merge gv2 q)), (Permutation (join q q gv5) (merge gv2 gv2)), (Permutation (join q q gv5) (heap_delete_max a2)), (Permutation (join q q gv5) (heap_delete_max a1)), (Permutation (join q q gv5) (heap_delete_max gv5)), (Permutation (join q q gv5) (join q q a2))
(Permutation (join q q gv5) (join q q a1)), (Permutation (join q q gv5) (join q gv2 a2)), (Permutation (join q q gv5) (join q gv2 a1)), (Permutation (join q q gv5) (join q gv2 gv5)), (Permutation (join q q gv5) (join gv2 q a2)), (Permutation (join q q gv5) (join gv2 q a1)), (Permutation (join q q gv5) (join gv2 q gv5)), (Permutation (join q q gv5) (join gv2 gv2 a2)), (Permutation (join q q gv5) (join gv2 gv2 a1)), (Permutation (join q q gv5) (join gv2 gv2 gv5))
(Permutation (join q q gv5) (insert n q)), (Permutation (join q q gv5) (insert n gv2)), (Permutation (join q q gv5) (insert x q)), (Permutation (join q q gv5) (insert x gv2)), (Permutation (join q q gv5) (carry q a2)), (Permutation (join q q gv5) (carry q a1)), (Permutation (join q q gv5) (carry q gv5)), (Permutation (join q q gv5) (carry gv2 a2)), (Permutation (join q q gv5) (carry gv2 a1)), (Permutation (join q q gv5) (carry gv2 gv5))
(Permutation (join q q gv5) (q ++ q)), (Permutation (join q q gv5) (q ++ gv2)), (Permutation (join q q gv5) (gv2 ++ q)), (Permutation (join q q gv5) (gv2 ++ gv2)), (Permutation (join q q gv5) []), (Permutation (join q gv2 a2) q), (Permutation (join q gv2 a2) gv2), (Permutation (join q gv2 a2) (a2 :: q)), (Permutation (join q gv2 a2) (a2 :: gv2)), (Permutation (join q gv2 a2) (a1 :: q))
(Permutation (join q gv2 a2) (a1 :: gv2)), (Permutation (join q gv2 a2) (gv5 :: q)), (Permutation (join q gv2 a2) (gv5 :: gv2)), (Permutation (join q gv2 a2) (merge q q)), (Permutation (join q gv2 a2) (merge q gv2)), (Permutation (join q gv2 a2) (merge gv2 q)), (Permutation (join q gv2 a2) (merge gv2 gv2)), (Permutation (join q gv2 a2) (heap_delete_max a2)), (Permutation (join q gv2 a2) (heap_delete_max a1)), (Permutation (join q gv2 a2) (heap_delete_max gv5))
(Permutation (join q gv2 a2) (join q q a2)), (Permutation (join q gv2 a2) (join q q a1)), (Permutation (join q gv2 a2) (join q q gv5)), (Permutation (join q gv2 a2) (join q gv2 a1)), (Permutation (join q gv2 a2) (join q gv2 gv5)), (Permutation (join q gv2 a2) (join gv2 q a2)), (Permutation (join q gv2 a2) (join gv2 q a1)), (Permutation (join q gv2 a2) (join gv2 q gv5)), (Permutation (join q gv2 a2) (join gv2 gv2 a2)), (Permutation (join q gv2 a2) (join gv2 gv2 a1))
(Permutation (join q gv2 a2) (join gv2 gv2 gv5)), (Permutation (join q gv2 a2) (insert n q)), (Permutation (join q gv2 a2) (insert n gv2)), (Permutation (join q gv2 a2) (insert x q)), (Permutation (join q gv2 a2) (insert x gv2)), (Permutation (join q gv2 a2) (carry q a2)), (Permutation (join q gv2 a2) (carry q a1)), (Permutation (join q gv2 a2) (carry q gv5)), (Permutation (join q gv2 a2) (carry gv2 a2)), (Permutation (join q gv2 a2) (carry gv2 a1))
(Permutation (join q gv2 a2) (carry gv2 gv5)), (Permutation (join q gv2 a2) (q ++ q)), (Permutation (join q gv2 a2) (q ++ gv2)), (Permutation (join q gv2 a2) (gv2 ++ q)), (Permutation (join q gv2 a2) (gv2 ++ gv2)), (Permutation (join q gv2 a2) []), (Permutation (join q gv2 a1) q), (Permutation (join q gv2 a1) gv2), (Permutation (join q gv2 a1) (a2 :: q)), (Permutation (join q gv2 a1) (a2 :: gv2))
(Permutation (join q gv2 a1) (a1 :: q)), (Permutation (join q gv2 a1) (a1 :: gv2)), (Permutation (join q gv2 a1) (gv5 :: q)), (Permutation (join q gv2 a1) (gv5 :: gv2)), (Permutation (join q gv2 a1) (merge q q)), (Permutation (join q gv2 a1) (merge q gv2)), (Permutation (join q gv2 a1) (merge gv2 q)), (Permutation (join q gv2 a1) (merge gv2 gv2)), (Permutation (join q gv2 a1) (heap_delete_max a2)), (Permutation (join q gv2 a1) (heap_delete_max a1))
(Permutation (join q gv2 a1) (heap_delete_max gv5)), (Permutation (join q gv2 a1) (join q q a2)), (Permutation (join q gv2 a1) (join q q a1)), (Permutation (join q gv2 a1) (join q q gv5)), (Permutation (join q gv2 a1) (join q gv2 a2)), (Permutation (join q gv2 a1) (join q gv2 gv5)), (Permutation (join q gv2 a1) (join gv2 q a2)), (Permutation (join q gv2 a1) (join gv2 q a1)), (Permutation (join q gv2 a1) (join gv2 q gv5)), (Permutation (join q gv2 a1) (join gv2 gv2 a2))
(Permutation (join q gv2 a1) (join gv2 gv2 a1)), (Permutation (join q gv2 a1) (join gv2 gv2 gv5)), (Permutation (join q gv2 a1) (insert n q)), (Permutation (join q gv2 a1) (insert n gv2)), (Permutation (join q gv2 a1) (insert x q)), (Permutation (join q gv2 a1) (insert x gv2)), (Permutation (join q gv2 a1) (carry q a2)), (Permutation (join q gv2 a1) (carry q a1)), (Permutation (join q gv2 a1) (carry q gv5)), (Permutation (join q gv2 a1) (carry gv2 a2))
(Permutation (join q gv2 a1) (carry gv2 a1)), (Permutation (join q gv2 a1) (carry gv2 gv5)), (Permutation (join q gv2 a1) (q ++ q)), (Permutation (join q gv2 a1) (q ++ gv2)), (Permutation (join q gv2 a1) (gv2 ++ q)), (Permutation (join q gv2 a1) (gv2 ++ gv2)), (Permutation (join q gv2 a1) []), (Permutation (join q gv2 gv5) q), (Permutation (join q gv2 gv5) gv2), (Permutation (join q gv2 gv5) (a2 :: q))
(Permutation (join q gv2 gv5) (a2 :: gv2)), (Permutation (join q gv2 gv5) (a1 :: q)), (Permutation (join q gv2 gv5) (a1 :: gv2)), (Permutation (join q gv2 gv5) (gv5 :: q)), (Permutation (join q gv2 gv5) (gv5 :: gv2)), (Permutation (join q gv2 gv5) (merge q q)), (Permutation (join q gv2 gv5) (merge q gv2)), (Permutation (join q gv2 gv5) (merge gv2 q)), (Permutation (join q gv2 gv5) (merge gv2 gv2)), (Permutation (join q gv2 gv5) (heap_delete_max a2))
(Permutation (join q gv2 gv5) (heap_delete_max a1)), (Permutation (join q gv2 gv5) (heap_delete_max gv5)), (Permutation (join q gv2 gv5) (join q q a2)), (Permutation (join q gv2 gv5) (join q q a1)), (Permutation (join q gv2 gv5) (join q q gv5)), (Permutation (join q gv2 gv5) (join q gv2 a2)), (Permutation (join q gv2 gv5) (join q gv2 a1)), (Permutation (join q gv2 gv5) (join gv2 q a2)), (Permutation (join q gv2 gv5) (join gv2 q a1)), (Permutation (join q gv2 gv5) (join gv2 q gv5))
(Permutation (join q gv2 gv5) (join gv2 gv2 a2)), (Permutation (join q gv2 gv5) (join gv2 gv2 a1)), (Permutation (join q gv2 gv5) (join gv2 gv2 gv5)), (Permutation (join q gv2 gv5) (insert n q)), (Permutation (join q gv2 gv5) (insert n gv2)), (Permutation (join q gv2 gv5) (insert x q)), (Permutation (join q gv2 gv5) (insert x gv2)), (Permutation (join q gv2 gv5) (carry q a2)), (Permutation (join q gv2 gv5) (carry q a1)), (Permutation (join q gv2 gv5) (carry q gv5))
(Permutation (join q gv2 gv5) (carry gv2 a2)), (Permutation (join q gv2 gv5) (carry gv2 a1)), (Permutation (join q gv2 gv5) (carry gv2 gv5)), (Permutation (join q gv2 gv5) (q ++ q)), (Permutation (join q gv2 gv5) (q ++ gv2)), (Permutation (join q gv2 gv5) (gv2 ++ q)), (Permutation (join q gv2 gv5) (gv2 ++ gv2)), (Permutation (join q gv2 gv5) []), (Permutation (join gv2 q a2) q), (Permutation (join gv2 q a2) gv2)
(Permutation (join gv2 q a2) (a2 :: q)), (Permutation (join gv2 q a2) (a2 :: gv2)), (Permutation (join gv2 q a2) (a1 :: q)), (Permutation (join gv2 q a2) (a1 :: gv2)), (Permutation (join gv2 q a2) (gv5 :: q)), (Permutation (join gv2 q a2) (gv5 :: gv2)), (Permutation (join gv2 q a2) (merge q q)), (Permutation (join gv2 q a2) (merge q gv2)), (Permutation (join gv2 q a2) (merge gv2 q)), (Permutation (join gv2 q a2) (merge gv2 gv2))
(Permutation (join gv2 q a2) (heap_delete_max a2)), (Permutation (join gv2 q a2) (heap_delete_max a1)), (Permutation (join gv2 q a2) (heap_delete_max gv5)), (Permutation (join gv2 q a2) (join q q a2)), (Permutation (join gv2 q a2) (join q q a1)), (Permutation (join gv2 q a2) (join q q gv5)), (Permutation (join gv2 q a2) (join q gv2 a2)), (Permutation (join gv2 q a2) (join q gv2 a1)), (Permutation (join gv2 q a2) (join q gv2 gv5)), (Permutation (join gv2 q a2) (join gv2 q a1))
(Permutation (join gv2 q a2) (join gv2 q gv5)), (Permutation (join gv2 q a2) (join gv2 gv2 a2)), (Permutation (join gv2 q a2) (join gv2 gv2 a1)), (Permutation (join gv2 q a2) (join gv2 gv2 gv5)), (Permutation (join gv2 q a2) (insert n q)), (Permutation (join gv2 q a2) (insert n gv2)), (Permutation (join gv2 q a2) (insert x q)), (Permutation (join gv2 q a2) (insert x gv2)), (Permutation (join gv2 q a2) (carry q a2)), (Permutation (join gv2 q a2) (carry q a1))
(Permutation (join gv2 q a2) (carry q gv5)), (Permutation (join gv2 q a2) (carry gv2 a2)), (Permutation (join gv2 q a2) (carry gv2 a1)), (Permutation (join gv2 q a2) (carry gv2 gv5)), (Permutation (join gv2 q a2) (q ++ q)), (Permutation (join gv2 q a2) (q ++ gv2)), (Permutation (join gv2 q a2) (gv2 ++ q)), (Permutation (join gv2 q a2) (gv2 ++ gv2)), (Permutation (join gv2 q a2) []), (Permutation (join gv2 q a1) q)
(Permutation (join gv2 q a1) gv2), (Permutation (join gv2 q a1) (a2 :: q)), (Permutation (join gv2 q a1) (a2 :: gv2)), (Permutation (join gv2 q a1) (a1 :: q)), (Permutation (join gv2 q a1) (a1 :: gv2)), (Permutation (join gv2 q a1) (gv5 :: q)), (Permutation (join gv2 q a1) (gv5 :: gv2)), (Permutation (join gv2 q a1) (merge q q)), (Permutation (join gv2 q a1) (merge q gv2)), (Permutation (join gv2 q a1) (merge gv2 q))
(Permutation (join gv2 q a1) (merge gv2 gv2)), (Permutation (join gv2 q a1) (heap_delete_max a2)), (Permutation (join gv2 q a1) (heap_delete_max a1)), (Permutation (join gv2 q a1) (heap_delete_max gv5)), (Permutation (join gv2 q a1) (join q q a2)), (Permutation (join gv2 q a1) (join q q a1)), (Permutation (join gv2 q a1) (join q q gv5)), (Permutation (join gv2 q a1) (join q gv2 a2)), (Permutation (join gv2 q a1) (join q gv2 a1)), (Permutation (join gv2 q a1) (join q gv2 gv5))
(Permutation (join gv2 q a1) (join gv2 q a2)), (Permutation (join gv2 q a1) (join gv2 q gv5)), (Permutation (join gv2 q a1) (join gv2 gv2 a2)), (Permutation (join gv2 q a1) (join gv2 gv2 a1)), (Permutation (join gv2 q a1) (join gv2 gv2 gv5)), (Permutation (join gv2 q a1) (insert n q)), (Permutation (join gv2 q a1) (insert n gv2)), (Permutation (join gv2 q a1) (insert x q)), (Permutation (join gv2 q a1) (insert x gv2)), (Permutation (join gv2 q a1) (carry q a2))
(Permutation (join gv2 q a1) (carry q a1)), (Permutation (join gv2 q a1) (carry q gv5)), (Permutation (join gv2 q a1) (carry gv2 a2)), (Permutation (join gv2 q a1) (carry gv2 a1)), (Permutation (join gv2 q a1) (carry gv2 gv5)), (Permutation (join gv2 q a1) (q ++ q)), (Permutation (join gv2 q a1) (q ++ gv2)), (Permutation (join gv2 q a1) (gv2 ++ q)), (Permutation (join gv2 q a1) (gv2 ++ gv2)), (Permutation (join gv2 q a1) [])
(Permutation (join gv2 q gv5) q), (Permutation (join gv2 q gv5) gv2), (Permutation (join gv2 q gv5) (a2 :: q)), (Permutation (join gv2 q gv5) (a2 :: gv2)), (Permutation (join gv2 q gv5) (a1 :: q)), (Permutation (join gv2 q gv5) (a1 :: gv2)), (Permutation (join gv2 q gv5) (gv5 :: q)), (Permutation (join gv2 q gv5) (gv5 :: gv2)), (Permutation (join gv2 q gv5) (merge q q)), (Permutation (join gv2 q gv5) (merge q gv2))
(Permutation (join gv2 q gv5) (merge gv2 q)), (Permutation (join gv2 q gv5) (merge gv2 gv2)), (Permutation (join gv2 q gv5) (heap_delete_max a2)), (Permutation (join gv2 q gv5) (heap_delete_max a1)), (Permutation (join gv2 q gv5) (heap_delete_max gv5)), (Permutation (join gv2 q gv5) (join q q a2)), (Permutation (join gv2 q gv5) (join q q a1)), (Permutation (join gv2 q gv5) (join q q gv5)), (Permutation (join gv2 q gv5) (join q gv2 a2)), (Permutation (join gv2 q gv5) (join q gv2 a1))
(Permutation (join gv2 q gv5) (join q gv2 gv5)), (Permutation (join gv2 q gv5) (join gv2 q a2)), (Permutation (join gv2 q gv5) (join gv2 q a1)), (Permutation (join gv2 q gv5) (join gv2 gv2 a2)), (Permutation (join gv2 q gv5) (join gv2 gv2 a1)), (Permutation (join gv2 q gv5) (join gv2 gv2 gv5)), (Permutation (join gv2 q gv5) (insert n q)), (Permutation (join gv2 q gv5) (insert n gv2)), (Permutation (join gv2 q gv5) (insert x q)), (Permutation (join gv2 q gv5) (insert x gv2))
(Permutation (join gv2 q gv5) (carry q a2)), (Permutation (join gv2 q gv5) (carry q a1)), (Permutation (join gv2 q gv5) (carry q gv5)), (Permutation (join gv2 q gv5) (carry gv2 a2)), (Permutation (join gv2 q gv5) (carry gv2 a1)), (Permutation (join gv2 q gv5) (carry gv2 gv5)), (Permutation (join gv2 q gv5) (q ++ q)), (Permutation (join gv2 q gv5) (q ++ gv2)), (Permutation (join gv2 q gv5) (gv2 ++ q)), (Permutation (join gv2 q gv5) (gv2 ++ gv2))
(Permutation (join gv2 q gv5) []), (Permutation (join gv2 gv2 a2) q), (Permutation (join gv2 gv2 a2) gv2), (Permutation (join gv2 gv2 a2) (a2 :: q)), (Permutation (join gv2 gv2 a2) (a2 :: gv2)), (Permutation (join gv2 gv2 a2) (a1 :: q)), (Permutation (join gv2 gv2 a2) (a1 :: gv2)), (Permutation (join gv2 gv2 a2) (gv5 :: q)), (Permutation (join gv2 gv2 a2) (gv5 :: gv2)), (Permutation (join gv2 gv2 a2) (merge q q))
(Permutation (join gv2 gv2 a2) (merge q gv2)), (Permutation (join gv2 gv2 a2) (merge gv2 q)), (Permutation (join gv2 gv2 a2) (merge gv2 gv2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a2)), (Permutation (join gv2 gv2 a2) (heap_delete_max a1)), (Permutation (join gv2 gv2 a2) (heap_delete_max gv5)), (Permutation (join gv2 gv2 a2) (join q q a2)), (Permutation (join gv2 gv2 a2) (join q q a1)), (Permutation (join gv2 gv2 a2) (join q q gv5)), (Permutation (join gv2 gv2 a2) (join q gv2 a2))
(Permutation (join gv2 gv2 a2) (join q gv2 a1)), (Permutation (join gv2 gv2 a2) (join q gv2 gv5)), (Permutation (join gv2 gv2 a2) (join gv2 q a2)), (Permutation (join gv2 gv2 a2) (join gv2 q a1)), (Permutation (join gv2 gv2 a2) (join gv2 q gv5)), (Permutation (join gv2 gv2 a2) (join gv2 gv2 a1)), (Permutation (join gv2 gv2 a2) (join gv2 gv2 gv5)), (Permutation (join gv2 gv2 a2) (insert n q)), (Permutation (join gv2 gv2 a2) (insert n gv2)), (Permutation (join gv2 gv2 a2) (insert x q))
(Permutation (join gv2 gv2 a2) (insert x gv2)), (Permutation (join gv2 gv2 a2) (carry q a2)), (Permutation (join gv2 gv2 a2) (carry q a1)), (Permutation (join gv2 gv2 a2) (carry q gv5)), (Permutation (join gv2 gv2 a2) (carry gv2 a2)), (Permutation (join gv2 gv2 a2) (carry gv2 a1)), (Permutation (join gv2 gv2 a2) (carry gv2 gv5)), (Permutation (join gv2 gv2 a2) (q ++ q)), (Permutation (join gv2 gv2 a2) (q ++ gv2)), (Permutation (join gv2 gv2 a2) (gv2 ++ q))
(Permutation (join gv2 gv2 a2) (gv2 ++ gv2)), (Permutation (join gv2 gv2 a2) []), (Permutation (join gv2 gv2 a1) q), (Permutation (join gv2 gv2 a1) gv2), (Permutation (join gv2 gv2 a1) (a2 :: q)), (Permutation (join gv2 gv2 a1) (a2 :: gv2)), (Permutation (join gv2 gv2 a1) (a1 :: q)), (Permutation (join gv2 gv2 a1) (a1 :: gv2)), (Permutation (join gv2 gv2 a1) (gv5 :: q)), (Permutation (join gv2 gv2 a1) (gv5 :: gv2))
(Permutation (join gv2 gv2 a1) (merge q q)), (Permutation (join gv2 gv2 a1) (merge q gv2)), (Permutation (join gv2 gv2 a1) (merge gv2 q)), (Permutation (join gv2 gv2 a1) (merge gv2 gv2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a2)), (Permutation (join gv2 gv2 a1) (heap_delete_max a1)), (Permutation (join gv2 gv2 a1) (heap_delete_max gv5)), (Permutation (join gv2 gv2 a1) (join q q a2)), (Permutation (join gv2 gv2 a1) (join q q a1)), (Permutation (join gv2 gv2 a1) (join q q gv5))
(Permutation (join gv2 gv2 a1) (join q gv2 a2)), (Permutation (join gv2 gv2 a1) (join q gv2 a1)), (Permutation (join gv2 gv2 a1) (join q gv2 gv5)), (Permutation (join gv2 gv2 a1) (join gv2 q a2)), (Permutation (join gv2 gv2 a1) (join gv2 q a1)), (Permutation (join gv2 gv2 a1) (join gv2 q gv5)), (Permutation (join gv2 gv2 a1) (join gv2 gv2 a2)), (Permutation (join gv2 gv2 a1) (join gv2 gv2 gv5)), (Permutation (join gv2 gv2 a1) (insert n q)), (Permutation (join gv2 gv2 a1) (insert n gv2))
(Permutation (join gv2 gv2 a1) (insert x q)), (Permutation (join gv2 gv2 a1) (insert x gv2)), (Permutation (join gv2 gv2 a1) (carry q a2)), (Permutation (join gv2 gv2 a1) (carry q a1)), (Permutation (join gv2 gv2 a1) (carry q gv5)), (Permutation (join gv2 gv2 a1) (carry gv2 a2)), (Permutation (join gv2 gv2 a1) (carry gv2 a1)), (Permutation (join gv2 gv2 a1) (carry gv2 gv5)), (Permutation (join gv2 gv2 a1) (q ++ q)), (Permutation (join gv2 gv2 a1) (q ++ gv2))
(Permutation (join gv2 gv2 a1) (gv2 ++ q)), (Permutation (join gv2 gv2 a1) (gv2 ++ gv2)), (Permutation (join gv2 gv2 a1) []), (Permutation (join gv2 gv2 gv5) q), (Permutation (join gv2 gv2 gv5) gv2), (Permutation (join gv2 gv2 gv5) (a2 :: q)), (Permutation (join gv2 gv2 gv5) (a2 :: gv2)), (Permutation (join gv2 gv2 gv5) (a1 :: q)), (Permutation (join gv2 gv2 gv5) (a1 :: gv2)), (Permutation (join gv2 gv2 gv5) (gv5 :: q))
(Permutation (join gv2 gv2 gv5) (gv5 :: gv2)), (Permutation (join gv2 gv2 gv5) (merge q q)), (Permutation (join gv2 gv2 gv5) (merge q gv2)), (Permutation (join gv2 gv2 gv5) (merge gv2 q)), (Permutation (join gv2 gv2 gv5) (merge gv2 gv2)), (Permutation (join gv2 gv2 gv5) (heap_delete_max a2)), (Permutation (join gv2 gv2 gv5) (heap_delete_max a1)), (Permutation (join gv2 gv2 gv5) (heap_delete_max gv5)), (Permutation (join gv2 gv2 gv5) (join q q a2)), (Permutation (join gv2 gv2 gv5) (join q q a1))
(Permutation (join gv2 gv2 gv5) (join q q gv5)), (Permutation (join gv2 gv2 gv5) (join q gv2 a2)), (Permutation (join gv2 gv2 gv5) (join q gv2 a1)), (Permutation (join gv2 gv2 gv5) (join q gv2 gv5)), (Permutation (join gv2 gv2 gv5) (join gv2 q a2)), (Permutation (join gv2 gv2 gv5) (join gv2 q a1)), (Permutation (join gv2 gv2 gv5) (join gv2 q gv5)), (Permutation (join gv2 gv2 gv5) (join gv2 gv2 a2)), (Permutation (join gv2 gv2 gv5) (join gv2 gv2 a1)), (Permutation (join gv2 gv2 gv5) (insert n q))
(Permutation (join gv2 gv2 gv5) (insert n gv2)), (Permutation (join gv2 gv2 gv5) (insert x q)), (Permutation (join gv2 gv2 gv5) (insert x gv2)), (Permutation (join gv2 gv2 gv5) (carry q a2)), (Permutation (join gv2 gv2 gv5) (carry q a1)), (Permutation (join gv2 gv2 gv5) (carry q gv5)), (Permutation (join gv2 gv2 gv5) (carry gv2 a2)), (Permutation (join gv2 gv2 gv5) (carry gv2 a1)), (Permutation (join gv2 gv2 gv5) (carry gv2 gv5)), (Permutation (join gv2 gv2 gv5) (q ++ q))
(Permutation (join gv2 gv2 gv5) (q ++ gv2)), (Permutation (join gv2 gv2 gv5) (gv2 ++ q)), (Permutation (join gv2 gv2 gv5) (gv2 ++ gv2)), (Permutation (join gv2 gv2 gv5) []), (Permutation (insert n q) q), (Permutation (insert n q) gv2), (Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a2 :: gv2)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv2))
(Permutation (insert n q) (gv5 :: q)), (Permutation (insert n q) (gv5 :: gv2)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv2)), (Permutation (insert n q) (merge gv2 q)), (Permutation (insert n q) (merge gv2 gv2)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (heap_delete_max gv5)), (Permutation (insert n q) (join q q a2))
(Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q q gv5)), (Permutation (insert n q) (join q gv2 a2)), (Permutation (insert n q) (join q gv2 a1)), (Permutation (insert n q) (join q gv2 gv5)), (Permutation (insert n q) (join gv2 q a2)), (Permutation (insert n q) (join gv2 q a1)), (Permutation (insert n q) (join gv2 q gv5)), (Permutation (insert n q) (join gv2 gv2 a2)), (Permutation (insert n q) (join gv2 gv2 a1))
(Permutation (insert n q) (join gv2 gv2 gv5)), (Permutation (insert n q) (insert n gv2)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (insert x gv2)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry q gv5)), (Permutation (insert n q) (carry gv2 a2)), (Permutation (insert n q) (carry gv2 a1)), (Permutation (insert n q) (carry gv2 gv5))
(Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv2)), (Permutation (insert n q) (gv2 ++ q)), (Permutation (insert n q) (gv2 ++ gv2)), (Permutation (insert n q) []), (Permutation (insert n gv2) q), (Permutation (insert n gv2) gv2), (Permutation (insert n gv2) (a2 :: q)), (Permutation (insert n gv2) (a2 :: gv2)), (Permutation (insert n gv2) (a1 :: q))
(Permutation (insert n gv2) (a1 :: gv2)), (Permutation (insert n gv2) (gv5 :: q)), (Permutation (insert n gv2) (gv5 :: gv2)), (Permutation (insert n gv2) (merge q q)), (Permutation (insert n gv2) (merge q gv2)), (Permutation (insert n gv2) (merge gv2 q)), (Permutation (insert n gv2) (merge gv2 gv2)), (Permutation (insert n gv2) (heap_delete_max a2)), (Permutation (insert n gv2) (heap_delete_max a1)), (Permutation (insert n gv2) (heap_delete_max gv5))
(Permutation (insert n gv2) (join q q a2)), (Permutation (insert n gv2) (join q q a1)), (Permutation (insert n gv2) (join q q gv5)), (Permutation (insert n gv2) (join q gv2 a2)), (Permutation (insert n gv2) (join q gv2 a1)), (Permutation (insert n gv2) (join q gv2 gv5)), (Permutation (insert n gv2) (join gv2 q a2)), (Permutation (insert n gv2) (join gv2 q a1)), (Permutation (insert n gv2) (join gv2 q gv5)), (Permutation (insert n gv2) (join gv2 gv2 a2))
(Permutation (insert n gv2) (join gv2 gv2 a1)), (Permutation (insert n gv2) (join gv2 gv2 gv5)), (Permutation (insert n gv2) (insert n q)), (Permutation (insert n gv2) (insert x q)), (Permutation (insert n gv2) (insert x gv2)), (Permutation (insert n gv2) (carry q a2)), (Permutation (insert n gv2) (carry q a1)), (Permutation (insert n gv2) (carry q gv5)), (Permutation (insert n gv2) (carry gv2 a2)), (Permutation (insert n gv2) (carry gv2 a1))
(Permutation (insert n gv2) (carry gv2 gv5)), (Permutation (insert n gv2) (q ++ q)), (Permutation (insert n gv2) (q ++ gv2)), (Permutation (insert n gv2) (gv2 ++ q)), (Permutation (insert n gv2) (gv2 ++ gv2)), (Permutation (insert n gv2) []), (Permutation (insert x q) q), (Permutation (insert x q) gv2), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv2))
(Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv2)), (Permutation (insert x q) (gv5 :: q)), (Permutation (insert x q) (gv5 :: gv2)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1))
(Permutation (insert x q) (heap_delete_max gv5)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q q gv5)), (Permutation (insert x q) (join q gv2 a2)), (Permutation (insert x q) (join q gv2 a1)), (Permutation (insert x q) (join q gv2 gv5)), (Permutation (insert x q) (join gv2 q a2)), (Permutation (insert x q) (join gv2 q a1)), (Permutation (insert x q) (join gv2 q gv5))
(Permutation (insert x q) (join gv2 gv2 a2)), (Permutation (insert x q) (join gv2 gv2 a1)), (Permutation (insert x q) (join gv2 gv2 gv5)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (insert n gv2)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry q gv5)), (Permutation (insert x q) (carry gv2 a2))
(Permutation (insert x q) (carry gv2 a1)), (Permutation (insert x q) (carry gv2 gv5)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2)), (Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q), (Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (a2 :: q))
(Permutation (insert x gv2) (a2 :: gv2)), (Permutation (insert x gv2) (a1 :: q)), (Permutation (insert x gv2) (a1 :: gv2)), (Permutation (insert x gv2) (gv5 :: q)), (Permutation (insert x gv2) (gv5 :: gv2)), (Permutation (insert x gv2) (merge q q)), (Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (heap_delete_max a2))
(Permutation (insert x gv2) (heap_delete_max a1)), (Permutation (insert x gv2) (heap_delete_max gv5)), (Permutation (insert x gv2) (join q q a2)), (Permutation (insert x gv2) (join q q a1)), (Permutation (insert x gv2) (join q q gv5)), (Permutation (insert x gv2) (join q gv2 a2)), (Permutation (insert x gv2) (join q gv2 a1)), (Permutation (insert x gv2) (join q gv2 gv5)), (Permutation (insert x gv2) (join gv2 q a2)), (Permutation (insert x gv2) (join gv2 q a1))
(Permutation (insert x gv2) (join gv2 q gv5)), (Permutation (insert x gv2) (join gv2 gv2 a2)), (Permutation (insert x gv2) (join gv2 gv2 a1)), (Permutation (insert x gv2) (join gv2 gv2 gv5)), (Permutation (insert x gv2) (insert n q)), (Permutation (insert x gv2) (insert n gv2)), (Permutation (insert x gv2) (insert x q)), (Permutation (insert x gv2) (carry q a2)), (Permutation (insert x gv2) (carry q a1)), (Permutation (insert x gv2) (carry q gv5))
(Permutation (insert x gv2) (carry gv2 a2)), (Permutation (insert x gv2) (carry gv2 a1)), (Permutation (insert x gv2) (carry gv2 gv5)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) []), (Permutation (carry q a2) q), (Permutation (carry q a2) gv2)
(Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv2)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (a1 :: gv2)), (Permutation (carry q a2) (gv5 :: q)), (Permutation (carry q a2) (gv5 :: gv2)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv2)), (Permutation (carry q a2) (merge gv2 q)), (Permutation (carry q a2) (merge gv2 gv2))
(Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (heap_delete_max gv5)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q q gv5)), (Permutation (carry q a2) (join q gv2 a2)), (Permutation (carry q a2) (join q gv2 a1)), (Permutation (carry q a2) (join q gv2 gv5)), (Permutation (carry q a2) (join gv2 q a2))
(Permutation (carry q a2) (join gv2 q a1)), (Permutation (carry q a2) (join gv2 q gv5)), (Permutation (carry q a2) (join gv2 gv2 a2)), (Permutation (carry q a2) (join gv2 gv2 a1)), (Permutation (carry q a2) (join gv2 gv2 gv5)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv2)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv2)), (Permutation (carry q a2) (carry q a1))
(Permutation (carry q a2) (carry q gv5)), (Permutation (carry q a2) (carry gv2 a2)), (Permutation (carry q a2) (carry gv2 a1)), (Permutation (carry q a2) (carry gv2 gv5)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv2)), (Permutation (carry q a2) (gv2 ++ q)), (Permutation (carry q a2) (gv2 ++ gv2)), (Permutation (carry q a2) []), (Permutation (carry q a1) q)
(Permutation (carry q a1) gv2), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv2)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv2)), (Permutation (carry q a1) (gv5 :: q)), (Permutation (carry q a1) (gv5 :: gv2)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (merge q gv2)), (Permutation (carry q a1) (merge gv2 q))
(Permutation (carry q a1) (merge gv2 gv2)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (heap_delete_max gv5)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q q gv5)), (Permutation (carry q a1) (join q gv2 a2)), (Permutation (carry q a1) (join q gv2 a1)), (Permutation (carry q a1) (join q gv2 gv5))
(Permutation (carry q a1) (join gv2 q a2)), (Permutation (carry q a1) (join gv2 q a1)), (Permutation (carry q a1) (join gv2 q gv5)), (Permutation (carry q a1) (join gv2 gv2 a2)), (Permutation (carry q a1) (join gv2 gv2 a1)), (Permutation (carry q a1) (join gv2 gv2 gv5)), (Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (insert n gv2)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert x gv2))
(Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry q gv5)), (Permutation (carry q a1) (carry gv2 a2)), (Permutation (carry q a1) (carry gv2 a1)), (Permutation (carry q a1) (carry gv2 gv5)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv2)), (Permutation (carry q a1) (gv2 ++ q)), (Permutation (carry q a1) (gv2 ++ gv2)), (Permutation (carry q a1) [])
(Permutation (carry q gv5) q), (Permutation (carry q gv5) gv2), (Permutation (carry q gv5) (a2 :: q)), (Permutation (carry q gv5) (a2 :: gv2)), (Permutation (carry q gv5) (a1 :: q)), (Permutation (carry q gv5) (a1 :: gv2)), (Permutation (carry q gv5) (gv5 :: q)), (Permutation (carry q gv5) (gv5 :: gv2)), (Permutation (carry q gv5) (merge q q)), (Permutation (carry q gv5) (merge q gv2))
(Permutation (carry q gv5) (merge gv2 q)), (Permutation (carry q gv5) (merge gv2 gv2)), (Permutation (carry q gv5) (heap_delete_max a2)), (Permutation (carry q gv5) (heap_delete_max a1)), (Permutation (carry q gv5) (heap_delete_max gv5)), (Permutation (carry q gv5) (join q q a2)), (Permutation (carry q gv5) (join q q a1)), (Permutation (carry q gv5) (join q q gv5)), (Permutation (carry q gv5) (join q gv2 a2)), (Permutation (carry q gv5) (join q gv2 a1))
(Permutation (carry q gv5) (join q gv2 gv5)), (Permutation (carry q gv5) (join gv2 q a2)), (Permutation (carry q gv5) (join gv2 q a1)), (Permutation (carry q gv5) (join gv2 q gv5)), (Permutation (carry q gv5) (join gv2 gv2 a2)), (Permutation (carry q gv5) (join gv2 gv2 a1)), (Permutation (carry q gv5) (join gv2 gv2 gv5)), (Permutation (carry q gv5) (insert n q)), (Permutation (carry q gv5) (insert n gv2)), (Permutation (carry q gv5) (insert x q))
(Permutation (carry q gv5) (insert x gv2)), (Permutation (carry q gv5) (carry q a2)), (Permutation (carry q gv5) (carry q a1)), (Permutation (carry q gv5) (carry gv2 a2)), (Permutation (carry q gv5) (carry gv2 a1)), (Permutation (carry q gv5) (carry gv2 gv5)), (Permutation (carry q gv5) (q ++ q)), (Permutation (carry q gv5) (q ++ gv2)), (Permutation (carry q gv5) (gv2 ++ q)), (Permutation (carry q gv5) (gv2 ++ gv2))
(Permutation (carry q gv5) []), (Permutation (carry gv2 a2) q), (Permutation (carry gv2 a2) gv2), (Permutation (carry gv2 a2) (a2 :: q)), (Permutation (carry gv2 a2) (a2 :: gv2)), (Permutation (carry gv2 a2) (a1 :: q)), (Permutation (carry gv2 a2) (a1 :: gv2)), (Permutation (carry gv2 a2) (gv5 :: q)), (Permutation (carry gv2 a2) (gv5 :: gv2)), (Permutation (carry gv2 a2) (merge q q))
(Permutation (carry gv2 a2) (merge q gv2)), (Permutation (carry gv2 a2) (merge gv2 q)), (Permutation (carry gv2 a2) (merge gv2 gv2)), (Permutation (carry gv2 a2) (heap_delete_max a2)), (Permutation (carry gv2 a2) (heap_delete_max a1)), (Permutation (carry gv2 a2) (heap_delete_max gv5)), (Permutation (carry gv2 a2) (join q q a2)), (Permutation (carry gv2 a2) (join q q a1)), (Permutation (carry gv2 a2) (join q q gv5)), (Permutation (carry gv2 a2) (join q gv2 a2))
(Permutation (carry gv2 a2) (join q gv2 a1)), (Permutation (carry gv2 a2) (join q gv2 gv5)), (Permutation (carry gv2 a2) (join gv2 q a2)), (Permutation (carry gv2 a2) (join gv2 q a1)), (Permutation (carry gv2 a2) (join gv2 q gv5)), (Permutation (carry gv2 a2) (join gv2 gv2 a2)), (Permutation (carry gv2 a2) (join gv2 gv2 a1)), (Permutation (carry gv2 a2) (join gv2 gv2 gv5)), (Permutation (carry gv2 a2) (insert n q)), (Permutation (carry gv2 a2) (insert n gv2))
(Permutation (carry gv2 a2) (insert x q)), (Permutation (carry gv2 a2) (insert x gv2)), (Permutation (carry gv2 a2) (carry q a2)), (Permutation (carry gv2 a2) (carry q a1)), (Permutation (carry gv2 a2) (carry q gv5)), (Permutation (carry gv2 a2) (carry gv2 a1)), (Permutation (carry gv2 a2) (carry gv2 gv5)), (Permutation (carry gv2 a2) (q ++ q)), (Permutation (carry gv2 a2) (q ++ gv2)), (Permutation (carry gv2 a2) (gv2 ++ q))
(Permutation (carry gv2 a2) (gv2 ++ gv2)), (Permutation (carry gv2 a2) []), (Permutation (carry gv2 a1) q), (Permutation (carry gv2 a1) gv2), (Permutation (carry gv2 a1) (a2 :: q)), (Permutation (carry gv2 a1) (a2 :: gv2)), (Permutation (carry gv2 a1) (a1 :: q)), (Permutation (carry gv2 a1) (a1 :: gv2)), (Permutation (carry gv2 a1) (gv5 :: q)), (Permutation (carry gv2 a1) (gv5 :: gv2))
(Permutation (carry gv2 a1) (merge q q)), (Permutation (carry gv2 a1) (merge q gv2)), (Permutation (carry gv2 a1) (merge gv2 q)), (Permutation (carry gv2 a1) (merge gv2 gv2)), (Permutation (carry gv2 a1) (heap_delete_max a2)), (Permutation (carry gv2 a1) (heap_delete_max a1)), (Permutation (carry gv2 a1) (heap_delete_max gv5)), (Permutation (carry gv2 a1) (join q q a2)), (Permutation (carry gv2 a1) (join q q a1)), (Permutation (carry gv2 a1) (join q q gv5))
(Permutation (carry gv2 a1) (join q gv2 a2)), (Permutation (carry gv2 a1) (join q gv2 a1)), (Permutation (carry gv2 a1) (join q gv2 gv5)), (Permutation (carry gv2 a1) (join gv2 q a2)), (Permutation (carry gv2 a1) (join gv2 q a1)), (Permutation (carry gv2 a1) (join gv2 q gv5)), (Permutation (carry gv2 a1) (join gv2 gv2 a2)), (Permutation (carry gv2 a1) (join gv2 gv2 a1)), (Permutation (carry gv2 a1) (join gv2 gv2 gv5)), (Permutation (carry gv2 a1) (insert n q))
(Permutation (carry gv2 a1) (insert n gv2)), (Permutation (carry gv2 a1) (insert x q)), (Permutation (carry gv2 a1) (insert x gv2)), (Permutation (carry gv2 a1) (carry q a2)), (Permutation (carry gv2 a1) (carry q a1)), (Permutation (carry gv2 a1) (carry q gv5)), (Permutation (carry gv2 a1) (carry gv2 a2)), (Permutation (carry gv2 a1) (carry gv2 gv5)), (Permutation (carry gv2 a1) (q ++ q)), (Permutation (carry gv2 a1) (q ++ gv2))
(Permutation (carry gv2 a1) (gv2 ++ q)), (Permutation (carry gv2 a1) (gv2 ++ gv2)), (Permutation (carry gv2 a1) []), (Permutation (carry gv2 gv5) q), (Permutation (carry gv2 gv5) gv2), (Permutation (carry gv2 gv5) (a2 :: q)), (Permutation (carry gv2 gv5) (a2 :: gv2)), (Permutation (carry gv2 gv5) (a1 :: q)), (Permutation (carry gv2 gv5) (a1 :: gv2)), (Permutation (carry gv2 gv5) (gv5 :: q))
(Permutation (carry gv2 gv5) (gv5 :: gv2)), (Permutation (carry gv2 gv5) (merge q q)), (Permutation (carry gv2 gv5) (merge q gv2)), (Permutation (carry gv2 gv5) (merge gv2 q)), (Permutation (carry gv2 gv5) (merge gv2 gv2)), (Permutation (carry gv2 gv5) (heap_delete_max a2)), (Permutation (carry gv2 gv5) (heap_delete_max a1)), (Permutation (carry gv2 gv5) (heap_delete_max gv5)), (Permutation (carry gv2 gv5) (join q q a2)), (Permutation (carry gv2 gv5) (join q q a1))
(Permutation (carry gv2 gv5) (join q q gv5)), (Permutation (carry gv2 gv5) (join q gv2 a2)), (Permutation (carry gv2 gv5) (join q gv2 a1)), (Permutation (carry gv2 gv5) (join q gv2 gv5)), (Permutation (carry gv2 gv5) (join gv2 q a2)), (Permutation (carry gv2 gv5) (join gv2 q a1)), (Permutation (carry gv2 gv5) (join gv2 q gv5)), (Permutation (carry gv2 gv5) (join gv2 gv2 a2)), (Permutation (carry gv2 gv5) (join gv2 gv2 a1)), (Permutation (carry gv2 gv5) (join gv2 gv2 gv5))
(Permutation (carry gv2 gv5) (insert n q)), (Permutation (carry gv2 gv5) (insert n gv2)), (Permutation (carry gv2 gv5) (insert x q)), (Permutation (carry gv2 gv5) (insert x gv2)), (Permutation (carry gv2 gv5) (carry q a2)), (Permutation (carry gv2 gv5) (carry q a1)), (Permutation (carry gv2 gv5) (carry q gv5)), (Permutation (carry gv2 gv5) (carry gv2 a2)), (Permutation (carry gv2 gv5) (carry gv2 a1)), (Permutation (carry gv2 gv5) (q ++ q))
(Permutation (carry gv2 gv5) (q ++ gv2)), (Permutation (carry gv2 gv5) (gv2 ++ q)), (Permutation (carry gv2 gv5) (gv2 ++ gv2)), (Permutation (carry gv2 gv5) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv2)), (Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv2))
(Permutation (q ++ q) (gv5 :: q)), (Permutation (q ++ q) (gv5 :: gv2)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q)), (Permutation (q ++ q) (merge gv2 gv2)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (heap_delete_max gv5)), (Permutation (q ++ q) (join q q a2))
(Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q q gv5)), (Permutation (q ++ q) (join q gv2 a2)), (Permutation (q ++ q) (join q gv2 a1)), (Permutation (q ++ q) (join q gv2 gv5)), (Permutation (q ++ q) (join gv2 q a2)), (Permutation (q ++ q) (join gv2 q a1)), (Permutation (q ++ q) (join gv2 q gv5)), (Permutation (q ++ q) (join gv2 gv2 a2)), (Permutation (q ++ q) (join gv2 gv2 a1))
(Permutation (q ++ q) (join gv2 gv2 gv5)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv2)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry q gv5)), (Permutation (q ++ q) (carry gv2 a2)), (Permutation (q ++ q) (carry gv2 a1))
(Permutation (q ++ q) (carry gv2 gv5)), (Permutation (q ++ q) (q ++ gv2)), (Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q), (Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (a2 :: q)), (Permutation (q ++ gv2) (a2 :: gv2)), (Permutation (q ++ gv2) (a1 :: q))
(Permutation (q ++ gv2) (a1 :: gv2)), (Permutation (q ++ gv2) (gv5 :: q)), (Permutation (q ++ gv2) (gv5 :: gv2)), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q)), (Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (heap_delete_max a2)), (Permutation (q ++ gv2) (heap_delete_max a1)), (Permutation (q ++ gv2) (heap_delete_max gv5))
(Permutation (q ++ gv2) (join q q a2)), (Permutation (q ++ gv2) (join q q a1)), (Permutation (q ++ gv2) (join q q gv5)), (Permutation (q ++ gv2) (join q gv2 a2)), (Permutation (q ++ gv2) (join q gv2 a1)), (Permutation (q ++ gv2) (join q gv2 gv5)), (Permutation (q ++ gv2) (join gv2 q a2)), (Permutation (q ++ gv2) (join gv2 q a1)), (Permutation (q ++ gv2) (join gv2 q gv5)), (Permutation (q ++ gv2) (join gv2 gv2 a2))
(Permutation (q ++ gv2) (join gv2 gv2 a1)), (Permutation (q ++ gv2) (join gv2 gv2 gv5)), (Permutation (q ++ gv2) (insert n q)), (Permutation (q ++ gv2) (insert n gv2)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (carry q a2)), (Permutation (q ++ gv2) (carry q a1)), (Permutation (q ++ gv2) (carry q gv5)), (Permutation (q ++ gv2) (carry gv2 a2))
(Permutation (q ++ gv2) (carry gv2 a1)), (Permutation (q ++ gv2) (carry gv2 gv5)), (Permutation (q ++ gv2) (q ++ q)), (Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q), (Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (a2 :: q)), (Permutation (gv2 ++ q) (a2 :: gv2))
(Permutation (gv2 ++ q) (a1 :: q)), (Permutation (gv2 ++ q) (a1 :: gv2)), (Permutation (gv2 ++ q) (gv5 :: q)), (Permutation (gv2 ++ q) (gv5 :: gv2)), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2)), (Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (heap_delete_max a2)), (Permutation (gv2 ++ q) (heap_delete_max a1))
(Permutation (gv2 ++ q) (heap_delete_max gv5)), (Permutation (gv2 ++ q) (join q q a2)), (Permutation (gv2 ++ q) (join q q a1)), (Permutation (gv2 ++ q) (join q q gv5)), (Permutation (gv2 ++ q) (join q gv2 a2)), (Permutation (gv2 ++ q) (join q gv2 a1)), (Permutation (gv2 ++ q) (join q gv2 gv5)), (Permutation (gv2 ++ q) (join gv2 q a2)), (Permutation (gv2 ++ q) (join gv2 q a1)), (Permutation (gv2 ++ q) (join gv2 q gv5))
(Permutation (gv2 ++ q) (join gv2 gv2 a2)), (Permutation (gv2 ++ q) (join gv2 gv2 a1)), (Permutation (gv2 ++ q) (join gv2 gv2 gv5)), (Permutation (gv2 ++ q) (insert n q)), (Permutation (gv2 ++ q) (insert n gv2)), (Permutation (gv2 ++ q) (insert x q)), (Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (carry q a2)), (Permutation (gv2 ++ q) (carry q a1)), (Permutation (gv2 ++ q) (carry q gv5))
(Permutation (gv2 ++ q) (carry gv2 a2)), (Permutation (gv2 ++ q) (carry gv2 a1)), (Permutation (gv2 ++ q) (carry gv2 gv5)), (Permutation (gv2 ++ q) (q ++ q)), (Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (a2 :: q))
(Permutation (gv2 ++ gv2) (a2 :: gv2)), (Permutation (gv2 ++ gv2) (a1 :: q)), (Permutation (gv2 ++ gv2) (a1 :: gv2)), (Permutation (gv2 ++ gv2) (gv5 :: q)), (Permutation (gv2 ++ gv2) (gv5 :: gv2)), (Permutation (gv2 ++ gv2) (merge q q)), (Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (heap_delete_max a2))
(Permutation (gv2 ++ gv2) (heap_delete_max a1)), (Permutation (gv2 ++ gv2) (heap_delete_max gv5)), (Permutation (gv2 ++ gv2) (join q q a2)), (Permutation (gv2 ++ gv2) (join q q a1)), (Permutation (gv2 ++ gv2) (join q q gv5)), (Permutation (gv2 ++ gv2) (join q gv2 a2)), (Permutation (gv2 ++ gv2) (join q gv2 a1)), (Permutation (gv2 ++ gv2) (join q gv2 gv5)), (Permutation (gv2 ++ gv2) (join gv2 q a2)), (Permutation (gv2 ++ gv2) (join gv2 q a1))
(Permutation (gv2 ++ gv2) (join gv2 q gv5)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a2)), (Permutation (gv2 ++ gv2) (join gv2 gv2 a1)), (Permutation (gv2 ++ gv2) (join gv2 gv2 gv5)), (Permutation (gv2 ++ gv2) (insert n q)), (Permutation (gv2 ++ gv2) (insert n gv2)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2)), (Permutation (gv2 ++ gv2) (carry q a2)), (Permutation (gv2 ++ gv2) (carry q a1))
(Permutation (gv2 ++ gv2) (carry q gv5)), (Permutation (gv2 ++ gv2) (carry gv2 a2)), (Permutation (gv2 ++ gv2) (carry gv2 a1)), (Permutation (gv2 ++ gv2) (carry gv2 gv5)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q)), (Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2)
(Permutation [] (a2 :: q)), (Permutation [] (a2 :: gv2)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv2)), (Permutation [] (gv5 :: q)), (Permutation [] (gv5 :: gv2)), (Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2))
(Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv5)), (Permutation [] (join q q a2)), (Permutation [] (join q q a1)), (Permutation [] (join q q gv5)), (Permutation [] (join q gv2 a2)), (Permutation [] (join q gv2 a1)), (Permutation [] (join q gv2 gv5)), (Permutation [] (join gv2 q a2))
(Permutation [] (join gv2 q a1)), (Permutation [] (join gv2 q gv5)), (Permutation [] (join gv2 gv2 a2)), (Permutation [] (join gv2 gv2 a1)), (Permutation [] (join gv2 gv2 gv5)), (Permutation [] (insert n q)), (Permutation [] (insert n gv2)), (Permutation [] (insert x q)), (Permutation [] (insert x gv2)), (Permutation [] (carry q a2))
(Permutation [] (carry q a1)), (Permutation [] (carry q gv5)), (Permutation [] (carry gv2 a2)), (Permutation [] (carry gv2 a1)), (Permutation [] (carry gv2 gv5)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q)), (Permutation [] (gv2 ++ gv2)), (In a2 (a2 :: q))
(In a2 (a2 :: gv2)), (In a2 (a1 :: q)), (In a2 (a1 :: gv2)), (In a2 (gv5 :: q)), (In a2 (gv5 :: gv2)), (In a2 (merge q q)), (In a2 (merge q gv2)), (In a2 (merge gv2 q)), (In a2 (merge gv2 gv2)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv5)), (In a2 (join q q a2)), (In a2 (join q q a1)), (In a2 (join q q gv5)), (In a2 (join q gv2 a2)), (In a2 (join q gv2 a1)), (In a2 (join q gv2 gv5)), (In a2 (join gv2 q a2)), (In a2 (join gv2 q a1))
(In a2 (join gv2 q gv5)), (In a2 (join gv2 gv2 a2)), (In a2 (join gv2 gv2 a1)), (In a2 (join gv2 gv2 gv5)), (In a2 (insert n q)), (In a2 (insert n gv2)), (In a2 (insert x q)), (In a2 (insert x gv2)), (In a2 (carry q a2)), (In a2 (carry q a1))
(In a2 (carry q gv5)), (In a2 (carry gv2 a2)), (In a2 (carry gv2 a1)), (In a2 (carry gv2 gv5)), (In a2 (q ++ q)), (In a2 (q ++ gv2)), (In a2 (gv2 ++ q)), (In a2 (gv2 ++ gv2)), (In a1 (a2 :: q)), (In a1 (a2 :: gv2))
(In a1 (a1 :: q)), (In a1 (a1 :: gv2)), (In a1 (gv5 :: q)), (In a1 (gv5 :: gv2)), (In a1 (merge q q)), (In a1 (merge q gv2)), (In a1 (merge gv2 q)), (In a1 (merge gv2 gv2)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1))
(In a1 (heap_delete_max gv5)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (join q q gv5)), (In a1 (join q gv2 a2)), (In a1 (join q gv2 a1)), (In a1 (join q gv2 gv5)), (In a1 (join gv2 q a2)), (In a1 (join gv2 q a1)), (In a1 (join gv2 q gv5))
(In a1 (join gv2 gv2 a2)), (In a1 (join gv2 gv2 a1)), (In a1 (join gv2 gv2 gv5)), (In a1 (insert n q)), (In a1 (insert n gv2)), (In a1 (insert x q)), (In a1 (insert x gv2)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry q gv5))
(In a1 (carry gv2 a2)), (In a1 (carry gv2 a1)), (In a1 (carry gv2 gv5)), (In a1 (q ++ q)), (In a1 (q ++ gv2)), (In a1 (gv2 ++ q)), (In a1 (gv2 ++ gv2)), (In gv5 (a2 :: q)), (In gv5 (a2 :: gv2)), (In gv5 (a1 :: q))
(In gv5 (a1 :: gv2)), (In gv5 (gv5 :: q)), (In gv5 (gv5 :: gv2)), (In gv5 (merge q q)), (In gv5 (merge q gv2)), (In gv5 (merge gv2 q)), (In gv5 (merge gv2 gv2)), (In gv5 (heap_delete_max a2)), (In gv5 (heap_delete_max a1)), (In gv5 (heap_delete_max gv5))
(In gv5 (join q q a2)), (In gv5 (join q q a1)), (In gv5 (join q q gv5)), (In gv5 (join q gv2 a2)), (In gv5 (join q gv2 a1)), (In gv5 (join q gv2 gv5)), (In gv5 (join gv2 q a2)), (In gv5 (join gv2 q a1)), (In gv5 (join gv2 q gv5)), (In gv5 (join gv2 gv2 a2))
(In gv5 (join gv2 gv2 a1)), (In gv5 (join gv2 gv2 gv5)), (In gv5 (insert n q)), (In gv5 (insert n gv2)), (In gv5 (insert x q)), (In gv5 (insert x gv2)), (In gv5 (carry q a2)), (In gv5 (carry q a1)), (In gv5 (carry q gv5)), (In gv5 (carry gv2 a2))
(In gv5 (carry gv2 a1)), (In gv5 (carry gv2 gv5)), (In gv5 (q ++ q)), (In gv5 (q ++ gv2)), (In gv5 (gv2 ++ q)), (In gv5 (gv2 ++ gv2)), (In (Node n a2 a2) q), (In (Node n a2 a2) gv2), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a2 :: gv2))
(In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (a1 :: gv2)), (In (Node n a2 a2) (gv5 :: q)), (In (Node n a2 a2) (gv5 :: gv2)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv2)), (In (Node n a2 a2) (merge gv2 q)), (In (Node n a2 a2) (merge gv2 gv2)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1))
(In (Node n a2 a2) (heap_delete_max gv5)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q q gv5)), (In (Node n a2 a2) (join q gv2 a2)), (In (Node n a2 a2) (join q gv2 a1)), (In (Node n a2 a2) (join q gv2 gv5)), (In (Node n a2 a2) (join gv2 q a2)), (In (Node n a2 a2) (join gv2 q a1)), (In (Node n a2 a2) (join gv2 q gv5))
(In (Node n a2 a2) (join gv2 gv2 a2)), (In (Node n a2 a2) (join gv2 gv2 a1)), (In (Node n a2 a2) (join gv2 gv2 gv5)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert n gv2)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv2)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry q gv5))
(In (Node n a2 a2) (carry gv2 a2)), (In (Node n a2 a2) (carry gv2 a1)), (In (Node n a2 a2) (carry gv2 gv5)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv2)), (In (Node n a2 a2) (gv2 ++ q)), (In (Node n a2 a2) (gv2 ++ gv2)), (In (Node n a2 a1) q), (In (Node n a2 a1) gv2), (In (Node n a2 a1) (a2 :: q))
(In (Node n a2 a1) (a2 :: gv2)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (a1 :: gv2)), (In (Node n a2 a1) (gv5 :: q)), (In (Node n a2 a1) (gv5 :: gv2)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv2)), (In (Node n a2 a1) (merge gv2 q)), (In (Node n a2 a1) (merge gv2 gv2)), (In (Node n a2 a1) (heap_delete_max a2))
(In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv5)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q q gv5)), (In (Node n a2 a1) (join q gv2 a2)), (In (Node n a2 a1) (join q gv2 a1)), (In (Node n a2 a1) (join q gv2 gv5)), (In (Node n a2 a1) (join gv2 q a2)), (In (Node n a2 a1) (join gv2 q a1))
(In (Node n a2 a1) (join gv2 q gv5)), (In (Node n a2 a1) (join gv2 gv2 a2)), (In (Node n a2 a1) (join gv2 gv2 a1)), (In (Node n a2 a1) (join gv2 gv2 gv5)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (insert n gv2)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert x gv2)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1))
(In (Node n a2 a1) (carry q gv5)), (In (Node n a2 a1) (carry gv2 a2)), (In (Node n a2 a1) (carry gv2 a1)), (In (Node n a2 a1) (carry gv2 gv5)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 a1) (q ++ gv2)), (In (Node n a2 a1) (gv2 ++ q)), (In (Node n a2 a1) (gv2 ++ gv2)), (In (Node n a2 gv5) q), (In (Node n a2 gv5) gv2)
(In (Node n a2 gv5) (a2 :: q)), (In (Node n a2 gv5) (a2 :: gv2)), (In (Node n a2 gv5) (a1 :: q)), (In (Node n a2 gv5) (a1 :: gv2)), (In (Node n a2 gv5) (gv5 :: q)), (In (Node n a2 gv5) (gv5 :: gv2)), (In (Node n a2 gv5) (merge q q)), (In (Node n a2 gv5) (merge q gv2)), (In (Node n a2 gv5) (merge gv2 q)), (In (Node n a2 gv5) (merge gv2 gv2))
(In (Node n a2 gv5) (heap_delete_max a2)), (In (Node n a2 gv5) (heap_delete_max a1)), (In (Node n a2 gv5) (heap_delete_max gv5)), (In (Node n a2 gv5) (join q q a2)), (In (Node n a2 gv5) (join q q a1)), (In (Node n a2 gv5) (join q q gv5)), (In (Node n a2 gv5) (join q gv2 a2)), (In (Node n a2 gv5) (join q gv2 a1)), (In (Node n a2 gv5) (join q gv2 gv5)), (In (Node n a2 gv5) (join gv2 q a2))
(In (Node n a2 gv5) (join gv2 q a1)), (In (Node n a2 gv5) (join gv2 q gv5)), (In (Node n a2 gv5) (join gv2 gv2 a2)), (In (Node n a2 gv5) (join gv2 gv2 a1)), (In (Node n a2 gv5) (join gv2 gv2 gv5)), (In (Node n a2 gv5) (insert n q)), (In (Node n a2 gv5) (insert n gv2)), (In (Node n a2 gv5) (insert x q)), (In (Node n a2 gv5) (insert x gv2)), (In (Node n a2 gv5) (carry q a2))
(In (Node n a2 gv5) (carry q a1)), (In (Node n a2 gv5) (carry q gv5)), (In (Node n a2 gv5) (carry gv2 a2)), (In (Node n a2 gv5) (carry gv2 a1)), (In (Node n a2 gv5) (carry gv2 gv5)), (In (Node n a2 gv5) (q ++ q)), (In (Node n a2 gv5) (q ++ gv2)), (In (Node n a2 gv5) (gv2 ++ q)), (In (Node n a2 gv5) (gv2 ++ gv2)), (In (Node n a1 a2) q)
(In (Node n a1 a2) gv2), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv2)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv2)), (In (Node n a1 a2) (gv5 :: q)), (In (Node n a1 a2) (gv5 :: gv2)), (In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (merge q gv2)), (In (Node n a1 a2) (merge gv2 q))
(In (Node n a1 a2) (merge gv2 gv2)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv5)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q q gv5)), (In (Node n a1 a2) (join q gv2 a2)), (In (Node n a1 a2) (join q gv2 a1)), (In (Node n a1 a2) (join q gv2 gv5))
(In (Node n a1 a2) (join gv2 q a2)), (In (Node n a1 a2) (join gv2 q a1)), (In (Node n a1 a2) (join gv2 q gv5)), (In (Node n a1 a2) (join gv2 gv2 a2)), (In (Node n a1 a2) (join gv2 gv2 a1)), (In (Node n a1 a2) (join gv2 gv2 gv5)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv2)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert x gv2))
(In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry q gv5)), (In (Node n a1 a2) (carry gv2 a2)), (In (Node n a1 a2) (carry gv2 a1)), (In (Node n a1 a2) (carry gv2 gv5)), (In (Node n a1 a2) (q ++ q)), (In (Node n a1 a2) (q ++ gv2)), (In (Node n a1 a2) (gv2 ++ q)), (In (Node n a1 a2) (gv2 ++ gv2))
(In (Node n a1 a1) q), (In (Node n a1 a1) gv2), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a2 :: gv2)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (a1 :: gv2)), (In (Node n a1 a1) (gv5 :: q)), (In (Node n a1 a1) (gv5 :: gv2)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (merge q gv2))
(In (Node n a1 a1) (merge gv2 q)), (In (Node n a1 a1) (merge gv2 gv2)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv5)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q q gv5)), (In (Node n a1 a1) (join q gv2 a2)), (In (Node n a1 a1) (join q gv2 a1))
(In (Node n a1 a1) (join q gv2 gv5)), (In (Node n a1 a1) (join gv2 q a2)), (In (Node n a1 a1) (join gv2 q a1)), (In (Node n a1 a1) (join gv2 q gv5)), (In (Node n a1 a1) (join gv2 gv2 a2)), (In (Node n a1 a1) (join gv2 gv2 a1)), (In (Node n a1 a1) (join gv2 gv2 gv5)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv2)), (In (Node n a1 a1) (insert x q))
(In (Node n a1 a1) (insert x gv2)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry q gv5)), (In (Node n a1 a1) (carry gv2 a2)), (In (Node n a1 a1) (carry gv2 a1)), (In (Node n a1 a1) (carry gv2 gv5)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv2)), (In (Node n a1 a1) (gv2 ++ q))
(In (Node n a1 a1) (gv2 ++ gv2)), (In (Node n a1 gv5) q), (In (Node n a1 gv5) gv2), (In (Node n a1 gv5) (a2 :: q)), (In (Node n a1 gv5) (a2 :: gv2)), (In (Node n a1 gv5) (a1 :: q)), (In (Node n a1 gv5) (a1 :: gv2)), (In (Node n a1 gv5) (gv5 :: q)), (In (Node n a1 gv5) (gv5 :: gv2)), (In (Node n a1 gv5) (merge q q))
(In (Node n a1 gv5) (merge q gv2)), (In (Node n a1 gv5) (merge gv2 q)), (In (Node n a1 gv5) (merge gv2 gv2)), (In (Node n a1 gv5) (heap_delete_max a2)), (In (Node n a1 gv5) (heap_delete_max a1)), (In (Node n a1 gv5) (heap_delete_max gv5)), (In (Node n a1 gv5) (join q q a2)), (In (Node n a1 gv5) (join q q a1)), (In (Node n a1 gv5) (join q q gv5)), (In (Node n a1 gv5) (join q gv2 a2))
(In (Node n a1 gv5) (join q gv2 a1)), (In (Node n a1 gv5) (join q gv2 gv5)), (In (Node n a1 gv5) (join gv2 q a2)), (In (Node n a1 gv5) (join gv2 q a1)), (In (Node n a1 gv5) (join gv2 q gv5)), (In (Node n a1 gv5) (join gv2 gv2 a2)), (In (Node n a1 gv5) (join gv2 gv2 a1)), (In (Node n a1 gv5) (join gv2 gv2 gv5)), (In (Node n a1 gv5) (insert n q)), (In (Node n a1 gv5) (insert n gv2))
(In (Node n a1 gv5) (insert x q)), (In (Node n a1 gv5) (insert x gv2)), (In (Node n a1 gv5) (carry q a2)), (In (Node n a1 gv5) (carry q a1)), (In (Node n a1 gv5) (carry q gv5)), (In (Node n a1 gv5) (carry gv2 a2)), (In (Node n a1 gv5) (carry gv2 a1)), (In (Node n a1 gv5) (carry gv2 gv5)), (In (Node n a1 gv5) (q ++ q)), (In (Node n a1 gv5) (q ++ gv2))
(In (Node n a1 gv5) (gv2 ++ q)), (In (Node n a1 gv5) (gv2 ++ gv2)), (In (Node n gv5 a2) q), (In (Node n gv5 a2) gv2), (In (Node n gv5 a2) (a2 :: q)), (In (Node n gv5 a2) (a2 :: gv2)), (In (Node n gv5 a2) (a1 :: q)), (In (Node n gv5 a2) (a1 :: gv2)), (In (Node n gv5 a2) (gv5 :: q)), (In (Node n gv5 a2) (gv5 :: gv2))
(In (Node n gv5 a2) (merge q q)), (In (Node n gv5 a2) (merge q gv2)), (In (Node n gv5 a2) (merge gv2 q)), (In (Node n gv5 a2) (merge gv2 gv2)), (In (Node n gv5 a2) (heap_delete_max a2)), (In (Node n gv5 a2) (heap_delete_max a1)), (In (Node n gv5 a2) (heap_delete_max gv5)), (In (Node n gv5 a2) (join q q a2)), (In (Node n gv5 a2) (join q q a1)), (In (Node n gv5 a2) (join q q gv5))
(In (Node n gv5 a2) (join q gv2 a2)), (In (Node n gv5 a2) (join q gv2 a1)), (In (Node n gv5 a2) (join q gv2 gv5)), (In (Node n gv5 a2) (join gv2 q a2)), (In (Node n gv5 a2) (join gv2 q a1)), (In (Node n gv5 a2) (join gv2 q gv5)), (In (Node n gv5 a2) (join gv2 gv2 a2)), (In (Node n gv5 a2) (join gv2 gv2 a1)), (In (Node n gv5 a2) (join gv2 gv2 gv5)), (In (Node n gv5 a2) (insert n q))
(In (Node n gv5 a2) (insert n gv2)), (In (Node n gv5 a2) (insert x q)), (In (Node n gv5 a2) (insert x gv2)), (In (Node n gv5 a2) (carry q a2)), (In (Node n gv5 a2) (carry q a1)), (In (Node n gv5 a2) (carry q gv5)), (In (Node n gv5 a2) (carry gv2 a2)), (In (Node n gv5 a2) (carry gv2 a1)), (In (Node n gv5 a2) (carry gv2 gv5)), (In (Node n gv5 a2) (q ++ q))
(In (Node n gv5 a2) (q ++ gv2)), (In (Node n gv5 a2) (gv2 ++ q)), (In (Node n gv5 a2) (gv2 ++ gv2)), (In (Node n gv5 a1) q), (In (Node n gv5 a1) gv2), (In (Node n gv5 a1) (a2 :: q)), (In (Node n gv5 a1) (a2 :: gv2)), (In (Node n gv5 a1) (a1 :: q)), (In (Node n gv5 a1) (a1 :: gv2)), (In (Node n gv5 a1) (gv5 :: q))
(In (Node n gv5 a1) (gv5 :: gv2)), (In (Node n gv5 a1) (merge q q)), (In (Node n gv5 a1) (merge q gv2)), (In (Node n gv5 a1) (merge gv2 q)), (In (Node n gv5 a1) (merge gv2 gv2)), (In (Node n gv5 a1) (heap_delete_max a2)), (In (Node n gv5 a1) (heap_delete_max a1)), (In (Node n gv5 a1) (heap_delete_max gv5)), (In (Node n gv5 a1) (join q q a2)), (In (Node n gv5 a1) (join q q a1))
(In (Node n gv5 a1) (join q q gv5)), (In (Node n gv5 a1) (join q gv2 a2)), (In (Node n gv5 a1) (join q gv2 a1)), (In (Node n gv5 a1) (join q gv2 gv5)), (In (Node n gv5 a1) (join gv2 q a2)), (In (Node n gv5 a1) (join gv2 q a1)), (In (Node n gv5 a1) (join gv2 q gv5)), (In (Node n gv5 a1) (join gv2 gv2 a2)), (In (Node n gv5 a1) (join gv2 gv2 a1)), (In (Node n gv5 a1) (join gv2 gv2 gv5))
(In (Node n gv5 a1) (insert n q)), (In (Node n gv5 a1) (insert n gv2)), (In (Node n gv5 a1) (insert x q)), (In (Node n gv5 a1) (insert x gv2)), (In (Node n gv5 a1) (carry q a2)), (In (Node n gv5 a1) (carry q a1)), (In (Node n gv5 a1) (carry q gv5)), (In (Node n gv5 a1) (carry gv2 a2)), (In (Node n gv5 a1) (carry gv2 a1)), (In (Node n gv5 a1) (carry gv2 gv5))
(In (Node n gv5 a1) (q ++ q)), (In (Node n gv5 a1) (q ++ gv2)), (In (Node n gv5 a1) (gv2 ++ q)), (In (Node n gv5 a1) (gv2 ++ gv2)), (In (Node n gv5 gv5) q), (In (Node n gv5 gv5) gv2), (In (Node n gv5 gv5) (a2 :: q)), (In (Node n gv5 gv5) (a2 :: gv2)), (In (Node n gv5 gv5) (a1 :: q)), (In (Node n gv5 gv5) (a1 :: gv2))
(In (Node n gv5 gv5) (gv5 :: q)), (In (Node n gv5 gv5) (gv5 :: gv2)), (In (Node n gv5 gv5) (merge q q)), (In (Node n gv5 gv5) (merge q gv2)), (In (Node n gv5 gv5) (merge gv2 q)), (In (Node n gv5 gv5) (merge gv2 gv2)), (In (Node n gv5 gv5) (heap_delete_max a2)), (In (Node n gv5 gv5) (heap_delete_max a1)), (In (Node n gv5 gv5) (heap_delete_max gv5)), (In (Node n gv5 gv5) (join q q a2))
(In (Node n gv5 gv5) (join q q a1)), (In (Node n gv5 gv5) (join q q gv5)), (In (Node n gv5 gv5) (join q gv2 a2)), (In (Node n gv5 gv5) (join q gv2 a1)), (In (Node n gv5 gv5) (join q gv2 gv5)), (In (Node n gv5 gv5) (join gv2 q a2)), (In (Node n gv5 gv5) (join gv2 q a1)), (In (Node n gv5 gv5) (join gv2 q gv5)), (In (Node n gv5 gv5) (join gv2 gv2 a2)), (In (Node n gv5 gv5) (join gv2 gv2 a1))
(In (Node n gv5 gv5) (join gv2 gv2 gv5)), (In (Node n gv5 gv5) (insert n q)), (In (Node n gv5 gv5) (insert n gv2)), (In (Node n gv5 gv5) (insert x q)), (In (Node n gv5 gv5) (insert x gv2)), (In (Node n gv5 gv5) (carry q a2)), (In (Node n gv5 gv5) (carry q a1)), (In (Node n gv5 gv5) (carry q gv5)), (In (Node n gv5 gv5) (carry gv2 a2)), (In (Node n gv5 gv5) (carry gv2 a1))
(In (Node n gv5 gv5) (carry gv2 gv5)), (In (Node n gv5 gv5) (q ++ q)), (In (Node n gv5 gv5) (q ++ gv2)), (In (Node n gv5 gv5) (gv2 ++ q)), (In (Node n gv5 gv5) (gv2 ++ gv2)), (In (Node x a2 a2) q), (In (Node x a2 a2) gv2), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv2)), (In (Node x a2 a2) (a1 :: q))
(In (Node x a2 a2) (a1 :: gv2)), (In (Node x a2 a2) (gv5 :: q)), (In (Node x a2 a2) (gv5 :: gv2)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv2)), (In (Node x a2 a2) (merge gv2 q)), (In (Node x a2 a2) (merge gv2 gv2)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (heap_delete_max gv5))
(In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q q gv5)), (In (Node x a2 a2) (join q gv2 a2)), (In (Node x a2 a2) (join q gv2 a1)), (In (Node x a2 a2) (join q gv2 gv5)), (In (Node x a2 a2) (join gv2 q a2)), (In (Node x a2 a2) (join gv2 q a1)), (In (Node x a2 a2) (join gv2 q gv5)), (In (Node x a2 a2) (join gv2 gv2 a2))
(In (Node x a2 a2) (join gv2 gv2 a1)), (In (Node x a2 a2) (join gv2 gv2 gv5)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert n gv2)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert x gv2)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry q gv5)), (In (Node x a2 a2) (carry gv2 a2))
(In (Node x a2 a2) (carry gv2 a1)), (In (Node x a2 a2) (carry gv2 gv5)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv2)), (In (Node x a2 a2) (gv2 ++ q)), (In (Node x a2 a2) (gv2 ++ gv2)), (In (Node x a2 a1) q), (In (Node x a2 a1) gv2), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a2 :: gv2))
(In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (a1 :: gv2)), (In (Node x a2 a1) (gv5 :: q)), (In (Node x a2 a1) (gv5 :: gv2)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (merge q gv2)), (In (Node x a2 a1) (merge gv2 q)), (In (Node x a2 a1) (merge gv2 gv2)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1))
(In (Node x a2 a1) (heap_delete_max gv5)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q q gv5)), (In (Node x a2 a1) (join q gv2 a2)), (In (Node x a2 a1) (join q gv2 a1)), (In (Node x a2 a1) (join q gv2 gv5)), (In (Node x a2 a1) (join gv2 q a2)), (In (Node x a2 a1) (join gv2 q a1)), (In (Node x a2 a1) (join gv2 q gv5))
(In (Node x a2 a1) (join gv2 gv2 a2)), (In (Node x a2 a1) (join gv2 gv2 a1)), (In (Node x a2 a1) (join gv2 gv2 gv5)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv2)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert x gv2)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry q gv5))
(In (Node x a2 a1) (carry gv2 a2)), (In (Node x a2 a1) (carry gv2 a1)), (In (Node x a2 a1) (carry gv2 gv5)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 a1) (q ++ gv2)), (In (Node x a2 a1) (gv2 ++ q)), (In (Node x a2 a1) (gv2 ++ gv2)), (In (Node x a2 gv5) q), (In (Node x a2 gv5) gv2), (In (Node x a2 gv5) (a2 :: q))
(In (Node x a2 gv5) (a2 :: gv2)), (In (Node x a2 gv5) (a1 :: q)), (In (Node x a2 gv5) (a1 :: gv2)), (In (Node x a2 gv5) (gv5 :: q)), (In (Node x a2 gv5) (gv5 :: gv2)), (In (Node x a2 gv5) (merge q q)), (In (Node x a2 gv5) (merge q gv2)), (In (Node x a2 gv5) (merge gv2 q)), (In (Node x a2 gv5) (merge gv2 gv2)), (In (Node x a2 gv5) (heap_delete_max a2))
(In (Node x a2 gv5) (heap_delete_max a1)), (In (Node x a2 gv5) (heap_delete_max gv5)), (In (Node x a2 gv5) (join q q a2)), (In (Node x a2 gv5) (join q q a1)), (In (Node x a2 gv5) (join q q gv5)), (In (Node x a2 gv5) (join q gv2 a2)), (In (Node x a2 gv5) (join q gv2 a1)), (In (Node x a2 gv5) (join q gv2 gv5)), (In (Node x a2 gv5) (join gv2 q a2)), (In (Node x a2 gv5) (join gv2 q a1))
(In (Node x a2 gv5) (join gv2 q gv5)), (In (Node x a2 gv5) (join gv2 gv2 a2)), (In (Node x a2 gv5) (join gv2 gv2 a1)), (In (Node x a2 gv5) (join gv2 gv2 gv5)), (In (Node x a2 gv5) (insert n q)), (In (Node x a2 gv5) (insert n gv2)), (In (Node x a2 gv5) (insert x q)), (In (Node x a2 gv5) (insert x gv2)), (In (Node x a2 gv5) (carry q a2)), (In (Node x a2 gv5) (carry q a1))
(In (Node x a2 gv5) (carry q gv5)), (In (Node x a2 gv5) (carry gv2 a2)), (In (Node x a2 gv5) (carry gv2 a1)), (In (Node x a2 gv5) (carry gv2 gv5)), (In (Node x a2 gv5) (q ++ q)), (In (Node x a2 gv5) (q ++ gv2)), (In (Node x a2 gv5) (gv2 ++ q)), (In (Node x a2 gv5) (gv2 ++ gv2)), (In (Node x a1 a2) q), (In (Node x a1 a2) gv2)
(In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv2)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (a1 :: gv2)), (In (Node x a1 a2) (gv5 :: q)), (In (Node x a1 a2) (gv5 :: gv2)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (merge q gv2)), (In (Node x a1 a2) (merge gv2 q)), (In (Node x a1 a2) (merge gv2 gv2))
(In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (heap_delete_max gv5)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q q gv5)), (In (Node x a1 a2) (join q gv2 a2)), (In (Node x a1 a2) (join q gv2 a1)), (In (Node x a1 a2) (join q gv2 gv5)), (In (Node x a1 a2) (join gv2 q a2))
(In (Node x a1 a2) (join gv2 q a1)), (In (Node x a1 a2) (join gv2 q gv5)), (In (Node x a1 a2) (join gv2 gv2 a2)), (In (Node x a1 a2) (join gv2 gv2 a1)), (In (Node x a1 a2) (join gv2 gv2 gv5)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert n gv2)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv2)), (In (Node x a1 a2) (carry q a2))
(In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry q gv5)), (In (Node x a1 a2) (carry gv2 a2)), (In (Node x a1 a2) (carry gv2 a1)), (In (Node x a1 a2) (carry gv2 gv5)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a2) (q ++ gv2)), (In (Node x a1 a2) (gv2 ++ q)), (In (Node x a1 a2) (gv2 ++ gv2)), (In (Node x a1 a1) q)
(In (Node x a1 a1) gv2), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a2 :: gv2)), (In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (a1 :: gv2)), (In (Node x a1 a1) (gv5 :: q)), (In (Node x a1 a1) (gv5 :: gv2)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (merge q gv2)), (In (Node x a1 a1) (merge gv2 q))
(In (Node x a1 a1) (merge gv2 gv2)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (heap_delete_max gv5)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q q gv5)), (In (Node x a1 a1) (join q gv2 a2)), (In (Node x a1 a1) (join q gv2 a1)), (In (Node x a1 a1) (join q gv2 gv5))
(In (Node x a1 a1) (join gv2 q a2)), (In (Node x a1 a1) (join gv2 q a1)), (In (Node x a1 a1) (join gv2 q gv5)), (In (Node x a1 a1) (join gv2 gv2 a2)), (In (Node x a1 a1) (join gv2 gv2 a1)), (In (Node x a1 a1) (join gv2 gv2 gv5)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (insert n gv2)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv2))
(In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry q gv5)), (In (Node x a1 a1) (carry gv2 a2)), (In (Node x a1 a1) (carry gv2 a1)), (In (Node x a1 a1) (carry gv2 gv5)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv2)), (In (Node x a1 a1) (gv2 ++ q)), (In (Node x a1 a1) (gv2 ++ gv2))
(In (Node x a1 gv5) q), (In (Node x a1 gv5) gv2), (In (Node x a1 gv5) (a2 :: q)), (In (Node x a1 gv5) (a2 :: gv2)), (In (Node x a1 gv5) (a1 :: q)), (In (Node x a1 gv5) (a1 :: gv2)), (In (Node x a1 gv5) (gv5 :: q)), (In (Node x a1 gv5) (gv5 :: gv2)), (In (Node x a1 gv5) (merge q q)), (In (Node x a1 gv5) (merge q gv2))
(In (Node x a1 gv5) (merge gv2 q)), (In (Node x a1 gv5) (merge gv2 gv2)), (In (Node x a1 gv5) (heap_delete_max a2)), (In (Node x a1 gv5) (heap_delete_max a1)), (In (Node x a1 gv5) (heap_delete_max gv5)), (In (Node x a1 gv5) (join q q a2)), (In (Node x a1 gv5) (join q q a1)), (In (Node x a1 gv5) (join q q gv5)), (In (Node x a1 gv5) (join q gv2 a2)), (In (Node x a1 gv5) (join q gv2 a1))
(In (Node x a1 gv5) (join q gv2 gv5)), (In (Node x a1 gv5) (join gv2 q a2)), (In (Node x a1 gv5) (join gv2 q a1)), (In (Node x a1 gv5) (join gv2 q gv5)), (In (Node x a1 gv5) (join gv2 gv2 a2)), (In (Node x a1 gv5) (join gv2 gv2 a1)), (In (Node x a1 gv5) (join gv2 gv2 gv5)), (In (Node x a1 gv5) (insert n q)), (In (Node x a1 gv5) (insert n gv2)), (In (Node x a1 gv5) (insert x q))
(In (Node x a1 gv5) (insert x gv2)), (In (Node x a1 gv5) (carry q a2)), (In (Node x a1 gv5) (carry q a1)), (In (Node x a1 gv5) (carry q gv5)), (In (Node x a1 gv5) (carry gv2 a2)), (In (Node x a1 gv5) (carry gv2 a1)), (In (Node x a1 gv5) (carry gv2 gv5)), (In (Node x a1 gv5) (q ++ q)), (In (Node x a1 gv5) (q ++ gv2)), (In (Node x a1 gv5) (gv2 ++ q))
(In (Node x a1 gv5) (gv2 ++ gv2)), (In (Node x gv5 a2) q), (In (Node x gv5 a2) gv2), (In (Node x gv5 a2) (a2 :: q)), (In (Node x gv5 a2) (a2 :: gv2)), (In (Node x gv5 a2) (a1 :: q)), (In (Node x gv5 a2) (a1 :: gv2)), (In (Node x gv5 a2) (gv5 :: q)), (In (Node x gv5 a2) (gv5 :: gv2)), (In (Node x gv5 a2) (merge q q))
(In (Node x gv5 a2) (merge q gv2)), (In (Node x gv5 a2) (merge gv2 q)), (In (Node x gv5 a2) (merge gv2 gv2)), (In (Node x gv5 a2) (heap_delete_max a2)), (In (Node x gv5 a2) (heap_delete_max a1)), (In (Node x gv5 a2) (heap_delete_max gv5)), (In (Node x gv5 a2) (join q q a2)), (In (Node x gv5 a2) (join q q a1)), (In (Node x gv5 a2) (join q q gv5)), (In (Node x gv5 a2) (join q gv2 a2))
(In (Node x gv5 a2) (join q gv2 a1)), (In (Node x gv5 a2) (join q gv2 gv5)), (In (Node x gv5 a2) (join gv2 q a2)), (In (Node x gv5 a2) (join gv2 q a1)), (In (Node x gv5 a2) (join gv2 q gv5)), (In (Node x gv5 a2) (join gv2 gv2 a2)), (In (Node x gv5 a2) (join gv2 gv2 a1)), (In (Node x gv5 a2) (join gv2 gv2 gv5)), (In (Node x gv5 a2) (insert n q)), (In (Node x gv5 a2) (insert n gv2))
(In (Node x gv5 a2) (insert x q)), (In (Node x gv5 a2) (insert x gv2)), (In (Node x gv5 a2) (carry q a2)), (In (Node x gv5 a2) (carry q a1)), (In (Node x gv5 a2) (carry q gv5)), (In (Node x gv5 a2) (carry gv2 a2)), (In (Node x gv5 a2) (carry gv2 a1)), (In (Node x gv5 a2) (carry gv2 gv5)), (In (Node x gv5 a2) (q ++ q)), (In (Node x gv5 a2) (q ++ gv2))
(In (Node x gv5 a2) (gv2 ++ q)), (In (Node x gv5 a2) (gv2 ++ gv2)), (In (Node x gv5 a1) q), (In (Node x gv5 a1) gv2), (In (Node x gv5 a1) (a2 :: q)), (In (Node x gv5 a1) (a2 :: gv2)), (In (Node x gv5 a1) (a1 :: q)), (In (Node x gv5 a1) (a1 :: gv2)), (In (Node x gv5 a1) (gv5 :: q)), (In (Node x gv5 a1) (gv5 :: gv2))
(In (Node x gv5 a1) (merge q q)), (In (Node x gv5 a1) (merge q gv2)), (In (Node x gv5 a1) (merge gv2 q)), (In (Node x gv5 a1) (merge gv2 gv2)), (In (Node x gv5 a1) (heap_delete_max a2)), (In (Node x gv5 a1) (heap_delete_max a1)), (In (Node x gv5 a1) (heap_delete_max gv5)), (In (Node x gv5 a1) (join q q a2)), (In (Node x gv5 a1) (join q q a1)), (In (Node x gv5 a1) (join q q gv5))
(In (Node x gv5 a1) (join q gv2 a2)), (In (Node x gv5 a1) (join q gv2 a1)), (In (Node x gv5 a1) (join q gv2 gv5)), (In (Node x gv5 a1) (join gv2 q a2)), (In (Node x gv5 a1) (join gv2 q a1)), (In (Node x gv5 a1) (join gv2 q gv5)), (In (Node x gv5 a1) (join gv2 gv2 a2)), (In (Node x gv5 a1) (join gv2 gv2 a1)), (In (Node x gv5 a1) (join gv2 gv2 gv5)), (In (Node x gv5 a1) (insert n q))
(In (Node x gv5 a1) (insert n gv2)), (In (Node x gv5 a1) (insert x q)), (In (Node x gv5 a1) (insert x gv2)), (In (Node x gv5 a1) (carry q a2)), (In (Node x gv5 a1) (carry q a1)), (In (Node x gv5 a1) (carry q gv5)), (In (Node x gv5 a1) (carry gv2 a2)), (In (Node x gv5 a1) (carry gv2 a1)), (In (Node x gv5 a1) (carry gv2 gv5)), (In (Node x gv5 a1) (q ++ q))
(In (Node x gv5 a1) (q ++ gv2)), (In (Node x gv5 a1) (gv2 ++ q)), (In (Node x gv5 a1) (gv2 ++ gv2)), (In (Node x gv5 gv5) q), (In (Node x gv5 gv5) gv2), (In (Node x gv5 gv5) (a2 :: q)), (In (Node x gv5 gv5) (a2 :: gv2)), (In (Node x gv5 gv5) (a1 :: q)), (In (Node x gv5 gv5) (a1 :: gv2)), (In (Node x gv5 gv5) (gv5 :: q))
(In (Node x gv5 gv5) (gv5 :: gv2)), (In (Node x gv5 gv5) (merge q q)), (In (Node x gv5 gv5) (merge q gv2)), (In (Node x gv5 gv5) (merge gv2 q)), (In (Node x gv5 gv5) (merge gv2 gv2)), (In (Node x gv5 gv5) (heap_delete_max a2)), (In (Node x gv5 gv5) (heap_delete_max a1)), (In (Node x gv5 gv5) (heap_delete_max gv5)), (In (Node x gv5 gv5) (join q q a2)), (In (Node x gv5 gv5) (join q q a1))
(In (Node x gv5 gv5) (join q q gv5)), (In (Node x gv5 gv5) (join q gv2 a2)), (In (Node x gv5 gv5) (join q gv2 a1)), (In (Node x gv5 gv5) (join q gv2 gv5)), (In (Node x gv5 gv5) (join gv2 q a2)), (In (Node x gv5 gv5) (join gv2 q a1)), (In (Node x gv5 gv5) (join gv2 q gv5)), (In (Node x gv5 gv5) (join gv2 gv2 a2)), (In (Node x gv5 gv5) (join gv2 gv2 a1)), (In (Node x gv5 gv5) (join gv2 gv2 gv5))
(In (Node x gv5 gv5) (insert n q)), (In (Node x gv5 gv5) (insert n gv2)), (In (Node x gv5 gv5) (insert x q)), (In (Node x gv5 gv5) (insert x gv2)), (In (Node x gv5 gv5) (carry q a2)), (In (Node x gv5 gv5) (carry q a1)), (In (Node x gv5 gv5) (carry q gv5)), (In (Node x gv5 gv5) (carry gv2 a2)), (In (Node x gv5 gv5) (carry gv2 a1)), (In (Node x gv5 gv5) (carry gv2 gv5))
(In (Node x gv5 gv5) (q ++ q)), (In (Node x gv5 gv5) (q ++ gv2)), (In (Node x gv5 gv5) (gv2 ++ q)), (In (Node x gv5 gv5) (gv2 ++ gv2)), (In (smash a2 a2) q), (In (smash a2 a2) gv2), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv2)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (a1 :: gv2))
(In (smash a2 a2) (gv5 :: q)), (In (smash a2 a2) (gv5 :: gv2)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (merge q gv2)), (In (smash a2 a2) (merge gv2 q)), (In (smash a2 a2) (merge gv2 gv2)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max gv5)), (In (smash a2 a2) (join q q a2))
(In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q q gv5)), (In (smash a2 a2) (join q gv2 a2)), (In (smash a2 a2) (join q gv2 a1)), (In (smash a2 a2) (join q gv2 gv5)), (In (smash a2 a2) (join gv2 q a2)), (In (smash a2 a2) (join gv2 q a1)), (In (smash a2 a2) (join gv2 q gv5)), (In (smash a2 a2) (join gv2 gv2 a2)), (In (smash a2 a2) (join gv2 gv2 a1))
(In (smash a2 a2) (join gv2 gv2 gv5)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv2)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv2)), (In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry q gv5)), (In (smash a2 a2) (carry gv2 a2)), (In (smash a2 a2) (carry gv2 a1))
(In (smash a2 a2) (carry gv2 gv5)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv2)), (In (smash a2 a2) (gv2 ++ q)), (In (smash a2 a2) (gv2 ++ gv2)), (In (smash a2 a1) q), (In (smash a2 a1) gv2), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a2 :: gv2)), (In (smash a2 a1) (a1 :: q))
(In (smash a2 a1) (a1 :: gv2)), (In (smash a2 a1) (gv5 :: q)), (In (smash a2 a1) (gv5 :: gv2)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv2)), (In (smash a2 a1) (merge gv2 q)), (In (smash a2 a1) (merge gv2 gv2)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv5))
(In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q q gv5)), (In (smash a2 a1) (join q gv2 a2)), (In (smash a2 a1) (join q gv2 a1)), (In (smash a2 a1) (join q gv2 gv5)), (In (smash a2 a1) (join gv2 q a2)), (In (smash a2 a1) (join gv2 q a1)), (In (smash a2 a1) (join gv2 q gv5)), (In (smash a2 a1) (join gv2 gv2 a2))
(In (smash a2 a1) (join gv2 gv2 a1)), (In (smash a2 a1) (join gv2 gv2 gv5)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (insert n gv2)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert x gv2)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry q gv5)), (In (smash a2 a1) (carry gv2 a2))
(In (smash a2 a1) (carry gv2 a1)), (In (smash a2 a1) (carry gv2 gv5)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv2)), (In (smash a2 a1) (gv2 ++ q)), (In (smash a2 a1) (gv2 ++ gv2)), (In (smash a2 gv5) q), (In (smash a2 gv5) gv2), (In (smash a2 gv5) (a2 :: q)), (In (smash a2 gv5) (a2 :: gv2))
(In (smash a2 gv5) (a1 :: q)), (In (smash a2 gv5) (a1 :: gv2)), (In (smash a2 gv5) (gv5 :: q)), (In (smash a2 gv5) (gv5 :: gv2)), (In (smash a2 gv5) (merge q q)), (In (smash a2 gv5) (merge q gv2)), (In (smash a2 gv5) (merge gv2 q)), (In (smash a2 gv5) (merge gv2 gv2)), (In (smash a2 gv5) (heap_delete_max a2)), (In (smash a2 gv5) (heap_delete_max a1))
(In (smash a2 gv5) (heap_delete_max gv5)), (In (smash a2 gv5) (join q q a2)), (In (smash a2 gv5) (join q q a1)), (In (smash a2 gv5) (join q q gv5)), (In (smash a2 gv5) (join q gv2 a2)), (In (smash a2 gv5) (join q gv2 a1)), (In (smash a2 gv5) (join q gv2 gv5)), (In (smash a2 gv5) (join gv2 q a2)), (In (smash a2 gv5) (join gv2 q a1)), (In (smash a2 gv5) (join gv2 q gv5))
(In (smash a2 gv5) (join gv2 gv2 a2)), (In (smash a2 gv5) (join gv2 gv2 a1)), (In (smash a2 gv5) (join gv2 gv2 gv5)), (In (smash a2 gv5) (insert n q)), (In (smash a2 gv5) (insert n gv2)), (In (smash a2 gv5) (insert x q)), (In (smash a2 gv5) (insert x gv2)), (In (smash a2 gv5) (carry q a2)), (In (smash a2 gv5) (carry q a1)), (In (smash a2 gv5) (carry q gv5))
(In (smash a2 gv5) (carry gv2 a2)), (In (smash a2 gv5) (carry gv2 a1)), (In (smash a2 gv5) (carry gv2 gv5)), (In (smash a2 gv5) (q ++ q)), (In (smash a2 gv5) (q ++ gv2)), (In (smash a2 gv5) (gv2 ++ q)), (In (smash a2 gv5) (gv2 ++ gv2)), (In (smash a1 a2) q), (In (smash a1 a2) gv2), (In (smash a1 a2) (a2 :: q))
(In (smash a1 a2) (a2 :: gv2)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv2)), (In (smash a1 a2) (gv5 :: q)), (In (smash a1 a2) (gv5 :: gv2)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (merge q gv2)), (In (smash a1 a2) (merge gv2 q)), (In (smash a1 a2) (merge gv2 gv2)), (In (smash a1 a2) (heap_delete_max a2))
(In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv5)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q q gv5)), (In (smash a1 a2) (join q gv2 a2)), (In (smash a1 a2) (join q gv2 a1)), (In (smash a1 a2) (join q gv2 gv5)), (In (smash a1 a2) (join gv2 q a2)), (In (smash a1 a2) (join gv2 q a1))
(In (smash a1 a2) (join gv2 q gv5)), (In (smash a1 a2) (join gv2 gv2 a2)), (In (smash a1 a2) (join gv2 gv2 a1)), (In (smash a1 a2) (join gv2 gv2 gv5)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv2)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert x gv2)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1))
(In (smash a1 a2) (carry q gv5)), (In (smash a1 a2) (carry gv2 a2)), (In (smash a1 a2) (carry gv2 a1)), (In (smash a1 a2) (carry gv2 gv5)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv2)), (In (smash a1 a2) (gv2 ++ q)), (In (smash a1 a2) (gv2 ++ gv2)), (In (smash a1 a1) q), (In (smash a1 a1) gv2)
(In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv2)), (In (smash a1 a1) (a1 :: q)), (In (smash a1 a1) (a1 :: gv2)), (In (smash a1 a1) (gv5 :: q)), (In (smash a1 a1) (gv5 :: gv2)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv2)), (In (smash a1 a1) (merge gv2 q)), (In (smash a1 a1) (merge gv2 gv2))
(In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv5)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q q gv5)), (In (smash a1 a1) (join q gv2 a2)), (In (smash a1 a1) (join q gv2 a1)), (In (smash a1 a1) (join q gv2 gv5)), (In (smash a1 a1) (join gv2 q a2))
(In (smash a1 a1) (join gv2 q a1)), (In (smash a1 a1) (join gv2 q gv5)), (In (smash a1 a1) (join gv2 gv2 a2)), (In (smash a1 a1) (join gv2 gv2 a1)), (In (smash a1 a1) (join gv2 gv2 gv5)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv2)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert x gv2)), (In (smash a1 a1) (carry q a2))
(In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry q gv5)), (In (smash a1 a1) (carry gv2 a2)), (In (smash a1 a1) (carry gv2 a1)), (In (smash a1 a1) (carry gv2 gv5)), (In (smash a1 a1) (q ++ q)), (In (smash a1 a1) (q ++ gv2)), (In (smash a1 a1) (gv2 ++ q)), (In (smash a1 a1) (gv2 ++ gv2)), (In (smash a1 gv5) q)
(In (smash a1 gv5) gv2), (In (smash a1 gv5) (a2 :: q)), (In (smash a1 gv5) (a2 :: gv2)), (In (smash a1 gv5) (a1 :: q)), (In (smash a1 gv5) (a1 :: gv2)), (In (smash a1 gv5) (gv5 :: q)), (In (smash a1 gv5) (gv5 :: gv2)), (In (smash a1 gv5) (merge q q)), (In (smash a1 gv5) (merge q gv2)), (In (smash a1 gv5) (merge gv2 q))
(In (smash a1 gv5) (merge gv2 gv2)), (In (smash a1 gv5) (heap_delete_max a2)), (In (smash a1 gv5) (heap_delete_max a1)), (In (smash a1 gv5) (heap_delete_max gv5)), (In (smash a1 gv5) (join q q a2)), (In (smash a1 gv5) (join q q a1)), (In (smash a1 gv5) (join q q gv5)), (In (smash a1 gv5) (join q gv2 a2)), (In (smash a1 gv5) (join q gv2 a1)), (In (smash a1 gv5) (join q gv2 gv5))
(In (smash a1 gv5) (join gv2 q a2)), (In (smash a1 gv5) (join gv2 q a1)), (In (smash a1 gv5) (join gv2 q gv5)), (In (smash a1 gv5) (join gv2 gv2 a2)), (In (smash a1 gv5) (join gv2 gv2 a1)), (In (smash a1 gv5) (join gv2 gv2 gv5)), (In (smash a1 gv5) (insert n q)), (In (smash a1 gv5) (insert n gv2)), (In (smash a1 gv5) (insert x q)), (In (smash a1 gv5) (insert x gv2))
(In (smash a1 gv5) (carry q a2)), (In (smash a1 gv5) (carry q a1)), (In (smash a1 gv5) (carry q gv5)), (In (smash a1 gv5) (carry gv2 a2)), (In (smash a1 gv5) (carry gv2 a1)), (In (smash a1 gv5) (carry gv2 gv5)), (In (smash a1 gv5) (q ++ q)), (In (smash a1 gv5) (q ++ gv2)), (In (smash a1 gv5) (gv2 ++ q)), (In (smash a1 gv5) (gv2 ++ gv2))
(In (smash gv5 a2) q), (In (smash gv5 a2) gv2), (In (smash gv5 a2) (a2 :: q)), (In (smash gv5 a2) (a2 :: gv2)), (In (smash gv5 a2) (a1 :: q)), (In (smash gv5 a2) (a1 :: gv2)), (In (smash gv5 a2) (gv5 :: q)), (In (smash gv5 a2) (gv5 :: gv2)), (In (smash gv5 a2) (merge q q)), (In (smash gv5 a2) (merge q gv2))
(In (smash gv5 a2) (merge gv2 q)), (In (smash gv5 a2) (merge gv2 gv2)), (In (smash gv5 a2) (heap_delete_max a2)), (In (smash gv5 a2) (heap_delete_max a1)), (In (smash gv5 a2) (heap_delete_max gv5)), (In (smash gv5 a2) (join q q a2)), (In (smash gv5 a2) (join q q a1)), (In (smash gv5 a2) (join q q gv5)), (In (smash gv5 a2) (join q gv2 a2)), (In (smash gv5 a2) (join q gv2 a1))
(In (smash gv5 a2) (join q gv2 gv5)), (In (smash gv5 a2) (join gv2 q a2)), (In (smash gv5 a2) (join gv2 q a1)), (In (smash gv5 a2) (join gv2 q gv5)), (In (smash gv5 a2) (join gv2 gv2 a2)), (In (smash gv5 a2) (join gv2 gv2 a1)), (In (smash gv5 a2) (join gv2 gv2 gv5)), (In (smash gv5 a2) (insert n q)), (In (smash gv5 a2) (insert n gv2)), (In (smash gv5 a2) (insert x q))
(In (smash gv5 a2) (insert x gv2)), (In (smash gv5 a2) (carry q a2)), (In (smash gv5 a2) (carry q a1)), (In (smash gv5 a2) (carry q gv5)), (In (smash gv5 a2) (carry gv2 a2)), (In (smash gv5 a2) (carry gv2 a1)), (In (smash gv5 a2) (carry gv2 gv5)), (In (smash gv5 a2) (q ++ q)), (In (smash gv5 a2) (q ++ gv2)), (In (smash gv5 a2) (gv2 ++ q))
(In (smash gv5 a2) (gv2 ++ gv2)), (In (smash gv5 a1) q), (In (smash gv5 a1) gv2), (In (smash gv5 a1) (a2 :: q)), (In (smash gv5 a1) (a2 :: gv2)), (In (smash gv5 a1) (a1 :: q)), (In (smash gv5 a1) (a1 :: gv2)), (In (smash gv5 a1) (gv5 :: q)), (In (smash gv5 a1) (gv5 :: gv2)), (In (smash gv5 a1) (merge q q))
(In (smash gv5 a1) (merge q gv2)), (In (smash gv5 a1) (merge gv2 q)), (In (smash gv5 a1) (merge gv2 gv2)), (In (smash gv5 a1) (heap_delete_max a2)), (In (smash gv5 a1) (heap_delete_max a1)), (In (smash gv5 a1) (heap_delete_max gv5)), (In (smash gv5 a1) (join q q a2)), (In (smash gv5 a1) (join q q a1)), (In (smash gv5 a1) (join q q gv5)), (In (smash gv5 a1) (join q gv2 a2))
(In (smash gv5 a1) (join q gv2 a1)), (In (smash gv5 a1) (join q gv2 gv5)), (In (smash gv5 a1) (join gv2 q a2)), (In (smash gv5 a1) (join gv2 q a1)), (In (smash gv5 a1) (join gv2 q gv5)), (In (smash gv5 a1) (join gv2 gv2 a2)), (In (smash gv5 a1) (join gv2 gv2 a1)), (In (smash gv5 a1) (join gv2 gv2 gv5)), (In (smash gv5 a1) (insert n q)), (In (smash gv5 a1) (insert n gv2))
(In (smash gv5 a1) (insert x q)), (In (smash gv5 a1) (insert x gv2)), (In (smash gv5 a1) (carry q a2)), (In (smash gv5 a1) (carry q a1)), (In (smash gv5 a1) (carry q gv5)), (In (smash gv5 a1) (carry gv2 a2)), (In (smash gv5 a1) (carry gv2 a1)), (In (smash gv5 a1) (carry gv2 gv5)), (In (smash gv5 a1) (q ++ q)), (In (smash gv5 a1) (q ++ gv2))
(In (smash gv5 a1) (gv2 ++ q)), (In (smash gv5 a1) (gv2 ++ gv2)), (In (smash gv5 gv5) q), (In (smash gv5 gv5) gv2), (In (smash gv5 gv5) (a2 :: q)), (In (smash gv5 gv5) (a2 :: gv2)), (In (smash gv5 gv5) (a1 :: q)), (In (smash gv5 gv5) (a1 :: gv2)), (In (smash gv5 gv5) (gv5 :: q)), (In (smash gv5 gv5) (gv5 :: gv2))
(In (smash gv5 gv5) (merge q q)), (In (smash gv5 gv5) (merge q gv2)), (In (smash gv5 gv5) (merge gv2 q)), (In (smash gv5 gv5) (merge gv2 gv2)), (In (smash gv5 gv5) (heap_delete_max a2)), (In (smash gv5 gv5) (heap_delete_max a1)), (In (smash gv5 gv5) (heap_delete_max gv5)), (In (smash gv5 gv5) (join q q a2)), (In (smash gv5 gv5) (join q q a1)), (In (smash gv5 gv5) (join q q gv5))
(In (smash gv5 gv5) (join q gv2 a2)), (In (smash gv5 gv5) (join q gv2 a1)), (In (smash gv5 gv5) (join q gv2 gv5)), (In (smash gv5 gv5) (join gv2 q a2)), (In (smash gv5 gv5) (join gv2 q a1)), (In (smash gv5 gv5) (join gv2 q gv5)), (In (smash gv5 gv5) (join gv2 gv2 a2)), (In (smash gv5 gv5) (join gv2 gv2 a1)), (In (smash gv5 gv5) (join gv2 gv2 gv5)), (In (smash gv5 gv5) (insert n q))
(In (smash gv5 gv5) (insert n gv2)), (In (smash gv5 gv5) (insert x q)), (In (smash gv5 gv5) (insert x gv2)), (In (smash gv5 gv5) (carry q a2)), (In (smash gv5 gv5) (carry q a1)), (In (smash gv5 gv5) (carry q gv5)), (In (smash gv5 gv5) (carry gv2 a2)), (In (smash gv5 gv5) (carry gv2 a1)), (In (smash gv5 gv5) (carry gv2 gv5)), (In (smash gv5 gv5) (q ++ q))
(In (smash gv5 gv5) (q ++ gv2)), (In (smash gv5 gv5) (gv2 ++ q)), (In (smash gv5 gv5) (gv2 ++ gv2)), (In Leaf q), (In Leaf gv2), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv2)), (In Leaf (a1 :: q)), (In Leaf (a1 :: gv2)), (In Leaf (gv5 :: q))
(In Leaf (gv5 :: gv2)), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q)), (In Leaf (merge gv2 gv2)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max gv5)), (In Leaf (join q q a2)), (In Leaf (join q q a1))
(In Leaf (join q q gv5)), (In Leaf (join q gv2 a2)), (In Leaf (join q gv2 a1)), (In Leaf (join q gv2 gv5)), (In Leaf (join gv2 q a2)), (In Leaf (join gv2 q a1)), (In Leaf (join gv2 q gv5)), (In Leaf (join gv2 gv2 a2)), (In Leaf (join gv2 gv2 a1)), (In Leaf (join gv2 gv2 gv5))
(In Leaf (insert n q)), (In Leaf (insert n gv2)), (In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry q gv5)), (In Leaf (carry gv2 a2)), (In Leaf (carry gv2 a1)), (In Leaf (carry gv2 gv5))
(In Leaf (q ++ q)), (In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (n < find_max' n q), (n < find_max' n gv2), (n < find_max' x q), (n < find_max' x gv2), (n < length q), (n < length gv2)
(x < find_max' n q), (x < find_max' n gv2), (x < find_max' x q), (x < find_max' x gv2), (x < length q), (x < length gv2), (find_max' n q < n), (find_max' n q < x), (find_max' n q < find_max' n gv2), (find_max' n q < find_max' x q)
(find_max' n q < find_max' x gv2), (find_max' n q < length q), (find_max' n q < length gv2), (find_max' n gv2 < n), (find_max' n gv2 < x), (find_max' n gv2 < find_max' n q), (find_max' n gv2 < find_max' x q), (find_max' n gv2 < find_max' x gv2), (find_max' n gv2 < length q), (find_max' n gv2 < length gv2)
(find_max' x q < n), (find_max' x q < x), (find_max' x q < find_max' n q), (find_max' x q < find_max' n gv2), (find_max' x q < find_max' x gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < n), (find_max' x gv2 < x), (find_max' x gv2 < find_max' n q)
(find_max' x gv2 < find_max' n gv2), (find_max' x gv2 < find_max' x q), (find_max' x gv2 < length q), (find_max' x gv2 < length gv2), (length q < n), (length q < x), (length q < find_max' n q), (length q < find_max' n gv2), (length q < find_max' x q), (length q < find_max' x gv2)
(length q < length gv2), (length gv2 < n), (length gv2 < x), (length gv2 < find_max' n q), (length gv2 < find_max' n gv2), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2), (length gv2 < length q), (n <= find_max' n q), (n <= find_max' n gv2)
(n <= find_max' x q), (n <= find_max' x gv2), (n <= length q), (n <= length gv2), (x <= find_max' n q), (x <= find_max' n gv2), (x <= find_max' x q), (x <= find_max' x gv2), (x <= length q), (x <= length gv2)
(find_max' n q <= n), (find_max' n q <= x), (find_max' n q <= find_max' n gv2), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv2), (find_max' n q <= length q), (find_max' n q <= length gv2), (find_max' n gv2 <= n), (find_max' n gv2 <= x), (find_max' n gv2 <= find_max' n q)
(find_max' n gv2 <= find_max' x q), (find_max' n gv2 <= find_max' x gv2), (find_max' n gv2 <= length q), (find_max' n gv2 <= length gv2), (find_max' x q <= n), (find_max' x q <= x), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv2), (find_max' x q <= find_max' x gv2), (find_max' x q <= length q)
(find_max' x q <= length gv2), (find_max' x gv2 <= n), (find_max' x gv2 <= x), (find_max' x gv2 <= find_max' n q), (find_max' x gv2 <= find_max' n gv2), (find_max' x gv2 <= find_max' x q), (find_max' x gv2 <= length q), (find_max' x gv2 <= length gv2), (length q <= n), (length q <= x)
(length q <= find_max' n q), (length q <= find_max' n gv2), (length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= length gv2), (length gv2 <= n), (length gv2 <= x), (length gv2 <= find_max' n q), (length gv2 <= find_max' n gv2), (length gv2 <= find_max' x q)
(length gv2 <= find_max' x gv2), (length gv2 <= length q), (~ priq q), (~ priq gv2), (~ priqq n q), (~ priqq n gv2), (~ priqq x q), (~ priqq x gv2), (~ pow2heap n a2), (~ pow2heap n a1)
(~ pow2heap n gv5), (~ pow2heap x a2), (~ pow2heap x a1), (~ pow2heap x gv5), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n gv5), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n x gv5)
(~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp x n gv5), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x x gv5), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2)
(~ In a2 q), (~ In a2 gv2), (~ In a1 q), (~ In a1 gv2), (~ In gv5 q), (~ In gv5 gv2), (~ n < n), (~ n < x), (~ x < n), (~ x < x)
(~ n <= n), (~ n <= x), (~ x <= n), (~ x <= x), (a2 <> a2), (a2 <> a1), (a2 <> gv5), (a1 <> a2), (a1 <> a1), (a1 <> gv5)
(gv5 <> a2), (gv5 <> a1), (gv5 <> gv5), (n <> n), (n <> x), (x <> n), (x <> x), (q <> q), (q <> gv2), (gv2 <> q)
(gv2 <> gv2), (None = Some q), (None = Some gv2), (a2 :: q = q), (a2 :: q = gv2), (a2 :: q = merge q q), (a2 :: q = merge q gv2), (a2 :: q = merge gv2 q), (a2 :: q = merge gv2 gv2), (a2 :: q = heap_delete_max a2)
(a2 :: q = heap_delete_max a1), (a2 :: q = heap_delete_max gv5), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q q gv5), (a2 :: q = join q gv2 a2), (a2 :: q = join q gv2 a1), (a2 :: q = join q gv2 gv5), (a2 :: q = join gv2 q a2), (a2 :: q = join gv2 q a1)
(a2 :: q = join gv2 q gv5), (a2 :: q = join gv2 gv2 a2), (a2 :: q = join gv2 gv2 a1), (a2 :: q = join gv2 gv2 gv5), (a2 :: q = insert n q), (a2 :: q = insert n gv2), (a2 :: q = insert x q), (a2 :: q = insert x gv2), (a2 :: q = carry q a2), (a2 :: q = carry q a1)
(a2 :: q = carry q gv5), (a2 :: q = carry gv2 a2), (a2 :: q = carry gv2 a1), (a2 :: q = carry gv2 gv5), (a2 :: q = q ++ q), (a2 :: q = q ++ gv2), (a2 :: q = gv2 ++ q), (a2 :: q = gv2 ++ gv2), (a2 :: q = []), (a2 :: gv2 = q)
(a2 :: gv2 = gv2), (a2 :: gv2 = merge q q), (a2 :: gv2 = merge q gv2), (a2 :: gv2 = merge gv2 q), (a2 :: gv2 = merge gv2 gv2), (a2 :: gv2 = heap_delete_max a2), (a2 :: gv2 = heap_delete_max a1), (a2 :: gv2 = heap_delete_max gv5), (a2 :: gv2 = join q q a2), (a2 :: gv2 = join q q a1)
(a2 :: gv2 = join q q gv5), (a2 :: gv2 = join q gv2 a2), (a2 :: gv2 = join q gv2 a1), (a2 :: gv2 = join q gv2 gv5), (a2 :: gv2 = join gv2 q a2), (a2 :: gv2 = join gv2 q a1), (a2 :: gv2 = join gv2 q gv5), (a2 :: gv2 = join gv2 gv2 a2), (a2 :: gv2 = join gv2 gv2 a1), (a2 :: gv2 = join gv2 gv2 gv5)
(a2 :: gv2 = insert n q), (a2 :: gv2 = insert n gv2), (a2 :: gv2 = insert x q), (a2 :: gv2 = insert x gv2), (a2 :: gv2 = carry q a2), (a2 :: gv2 = carry q a1), (a2 :: gv2 = carry q gv5), (a2 :: gv2 = carry gv2 a2), (a2 :: gv2 = carry gv2 a1), (a2 :: gv2 = carry gv2 gv5)
(a2 :: gv2 = q ++ q), (a2 :: gv2 = q ++ gv2), (a2 :: gv2 = gv2 ++ q), (a2 :: gv2 = gv2 ++ gv2), (a2 :: gv2 = []), (a1 :: q = q), (a1 :: q = gv2), (a1 :: q = merge q q), (a1 :: q = merge q gv2), (a1 :: q = merge gv2 q)
(a1 :: q = merge gv2 gv2), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = heap_delete_max gv5), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q q gv5), (a1 :: q = join q gv2 a2), (a1 :: q = join q gv2 a1), (a1 :: q = join q gv2 gv5)
(a1 :: q = join gv2 q a2), (a1 :: q = join gv2 q a1), (a1 :: q = join gv2 q gv5), (a1 :: q = join gv2 gv2 a2), (a1 :: q = join gv2 gv2 a1), (a1 :: q = join gv2 gv2 gv5), (a1 :: q = insert n q), (a1 :: q = insert n gv2), (a1 :: q = insert x q), (a1 :: q = insert x gv2)
(a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry q gv5), (a1 :: q = carry gv2 a2), (a1 :: q = carry gv2 a1), (a1 :: q = carry gv2 gv5), (a1 :: q = q ++ q), (a1 :: q = q ++ gv2), (a1 :: q = gv2 ++ q), (a1 :: q = gv2 ++ gv2)
(a1 :: q = []), (a1 :: gv2 = q), (a1 :: gv2 = gv2), (a1 :: gv2 = merge q q), (a1 :: gv2 = merge q gv2), (a1 :: gv2 = merge gv2 q), (a1 :: gv2 = merge gv2 gv2), (a1 :: gv2 = heap_delete_max a2), (a1 :: gv2 = heap_delete_max a1), (a1 :: gv2 = heap_delete_max gv5)
(a1 :: gv2 = join q q a2), (a1 :: gv2 = join q q a1), (a1 :: gv2 = join q q gv5), (a1 :: gv2 = join q gv2 a2), (a1 :: gv2 = join q gv2 a1), (a1 :: gv2 = join q gv2 gv5), (a1 :: gv2 = join gv2 q a2), (a1 :: gv2 = join gv2 q a1), (a1 :: gv2 = join gv2 q gv5), (a1 :: gv2 = join gv2 gv2 a2)
(a1 :: gv2 = join gv2 gv2 a1), (a1 :: gv2 = join gv2 gv2 gv5), (a1 :: gv2 = insert n q), (a1 :: gv2 = insert n gv2), (a1 :: gv2 = insert x q), (a1 :: gv2 = insert x gv2), (a1 :: gv2 = carry q a2), (a1 :: gv2 = carry q a1), (a1 :: gv2 = carry q gv5), (a1 :: gv2 = carry gv2 a2)
(a1 :: gv2 = carry gv2 a1), (a1 :: gv2 = carry gv2 gv5), (a1 :: gv2 = q ++ q), (a1 :: gv2 = q ++ gv2), (a1 :: gv2 = gv2 ++ q), (a1 :: gv2 = gv2 ++ gv2), (a1 :: gv2 = []), (gv5 :: q = q), (gv5 :: q = gv2), (gv5 :: q = merge q q)
(gv5 :: q = merge q gv2), (gv5 :: q = merge gv2 q), (gv5 :: q = merge gv2 gv2), (gv5 :: q = heap_delete_max a2), (gv5 :: q = heap_delete_max a1), (gv5 :: q = heap_delete_max gv5), (gv5 :: q = join q q a2), (gv5 :: q = join q q a1), (gv5 :: q = join q q gv5), (gv5 :: q = join q gv2 a2)
(gv5 :: q = join q gv2 a1), (gv5 :: q = join q gv2 gv5), (gv5 :: q = join gv2 q a2), (gv5 :: q = join gv2 q a1), (gv5 :: q = join gv2 q gv5), (gv5 :: q = join gv2 gv2 a2), (gv5 :: q = join gv2 gv2 a1), (gv5 :: q = join gv2 gv2 gv5), (gv5 :: q = insert n q), (gv5 :: q = insert n gv2)
(gv5 :: q = insert x q), (gv5 :: q = insert x gv2), (gv5 :: q = carry q a2), (gv5 :: q = carry q a1), (gv5 :: q = carry q gv5), (gv5 :: q = carry gv2 a2), (gv5 :: q = carry gv2 a1), (gv5 :: q = carry gv2 gv5), (gv5 :: q = q ++ q), (gv5 :: q = q ++ gv2)
(gv5 :: q = gv2 ++ q), (gv5 :: q = gv2 ++ gv2), (gv5 :: q = []), (gv5 :: gv2 = q), (gv5 :: gv2 = gv2), (gv5 :: gv2 = merge q q), (gv5 :: gv2 = merge q gv2), (gv5 :: gv2 = merge gv2 q), (gv5 :: gv2 = merge gv2 gv2), (gv5 :: gv2 = heap_delete_max a2)
(gv5 :: gv2 = heap_delete_max a1), (gv5 :: gv2 = heap_delete_max gv5), (gv5 :: gv2 = join q q a2), (gv5 :: gv2 = join q q a1), (gv5 :: gv2 = join q q gv5), (gv5 :: gv2 = join q gv2 a2), (gv5 :: gv2 = join q gv2 a1), (gv5 :: gv2 = join q gv2 gv5), (gv5 :: gv2 = join gv2 q a2), (gv5 :: gv2 = join gv2 q a1)
(gv5 :: gv2 = join gv2 q gv5), (gv5 :: gv2 = join gv2 gv2 a2), (gv5 :: gv2 = join gv2 gv2 a1), (gv5 :: gv2 = join gv2 gv2 gv5), (gv5 :: gv2 = insert n q), (gv5 :: gv2 = insert n gv2), (gv5 :: gv2 = insert x q), (gv5 :: gv2 = insert x gv2), (gv5 :: gv2 = carry q a2), (gv5 :: gv2 = carry q a1)
(gv5 :: gv2 = carry q gv5), (gv5 :: gv2 = carry gv2 a2), (gv5 :: gv2 = carry gv2 a1), (gv5 :: gv2 = carry gv2 gv5), (gv5 :: gv2 = q ++ q), (gv5 :: gv2 = q ++ gv2), (gv5 :: gv2 = gv2 ++ q), (gv5 :: gv2 = gv2 ++ gv2), (gv5 :: gv2 = []), (merge q q = q)
(merge q q = gv2), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = heap_delete_max gv5), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q q gv5), (merge q q = join q gv2 a2), (merge q q = join q gv2 a1), (merge q q = join q gv2 gv5)
(merge q q = join gv2 q a2), (merge q q = join gv2 q a1), (merge q q = join gv2 q gv5), (merge q q = join gv2 gv2 a2), (merge q q = join gv2 gv2 a1), (merge q q = join gv2 gv2 gv5), (merge q q = insert n q), (merge q q = insert n gv2), (merge q q = insert x q), (merge q q = insert x gv2)
(merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry q gv5), (merge q q = carry gv2 a2), (merge q q = carry gv2 a1), (merge q q = carry gv2 gv5), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2)
(merge q gv2 = q), (merge q gv2 = gv2), (merge q gv2 = heap_delete_max a2), (merge q gv2 = heap_delete_max a1), (merge q gv2 = heap_delete_max gv5), (merge q gv2 = join q q a2), (merge q gv2 = join q q a1), (merge q gv2 = join q q gv5), (merge q gv2 = join q gv2 a2), (merge q gv2 = join q gv2 a1)
(merge q gv2 = join q gv2 gv5), (merge q gv2 = join gv2 q a2), (merge q gv2 = join gv2 q a1), (merge q gv2 = join gv2 q gv5), (merge q gv2 = join gv2 gv2 a2), (merge q gv2 = join gv2 gv2 a1), (merge q gv2 = join gv2 gv2 gv5), (merge q gv2 = insert n q), (merge q gv2 = insert n gv2), (merge q gv2 = insert x q)
(merge q gv2 = insert x gv2), (merge q gv2 = carry q a2), (merge q gv2 = carry q a1), (merge q gv2 = carry q gv5), (merge q gv2 = carry gv2 a2), (merge q gv2 = carry gv2 a1), (merge q gv2 = carry gv2 gv5), (merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q)
(merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = heap_delete_max a2), (merge gv2 q = heap_delete_max a1), (merge gv2 q = heap_delete_max gv5), (merge gv2 q = join q q a2), (merge gv2 q = join q q a1), (merge gv2 q = join q q gv5), (merge gv2 q = join q gv2 a2)
(merge gv2 q = join q gv2 a1), (merge gv2 q = join q gv2 gv5), (merge gv2 q = join gv2 q a2), (merge gv2 q = join gv2 q a1), (merge gv2 q = join gv2 q gv5), (merge gv2 q = join gv2 gv2 a2), (merge gv2 q = join gv2 gv2 a1), (merge gv2 q = join gv2 gv2 gv5), (merge gv2 q = insert n q), (merge gv2 q = insert n gv2)
(merge gv2 q = insert x q), (merge gv2 q = insert x gv2), (merge gv2 q = carry q a2), (merge gv2 q = carry q a1), (merge gv2 q = carry q gv5), (merge gv2 q = carry gv2 a2), (merge gv2 q = carry gv2 a1), (merge gv2 q = carry gv2 gv5), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2)
(merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2), (merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = heap_delete_max a2), (merge gv2 gv2 = heap_delete_max a1), (merge gv2 gv2 = heap_delete_max gv5), (merge gv2 gv2 = join q q a2), (merge gv2 gv2 = join q q a1), (merge gv2 gv2 = join q q gv5)
(merge gv2 gv2 = join q gv2 a2), (merge gv2 gv2 = join q gv2 a1), (merge gv2 gv2 = join q gv2 gv5), (merge gv2 gv2 = join gv2 q a2), (merge gv2 gv2 = join gv2 q a1), (merge gv2 gv2 = join gv2 q gv5), (merge gv2 gv2 = join gv2 gv2 a2), (merge gv2 gv2 = join gv2 gv2 a1), (merge gv2 gv2 = join gv2 gv2 gv5), (merge gv2 gv2 = insert n q)
(merge gv2 gv2 = insert n gv2), (merge gv2 gv2 = insert x q), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = carry q a2), (merge gv2 gv2 = carry q a1), (merge gv2 gv2 = carry q gv5), (merge gv2 gv2 = carry gv2 a2), (merge gv2 gv2 = carry gv2 a1), (merge gv2 gv2 = carry gv2 gv5), (merge gv2 gv2 = q ++ q)
(merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q), (merge gv2 gv2 = gv2 ++ gv2), (heap_delete_max a2 = q), (heap_delete_max a2 = gv2), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = carry q gv5), (heap_delete_max a2 = carry gv2 a2), (heap_delete_max a2 = carry gv2 a1)
(heap_delete_max a2 = carry gv2 gv5), (heap_delete_max a2 = q ++ q), (heap_delete_max a2 = q ++ gv2), (heap_delete_max a2 = gv2 ++ q), (heap_delete_max a2 = gv2 ++ gv2), (heap_delete_max a1 = q), (heap_delete_max a1 = gv2), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry q gv5)
(heap_delete_max a1 = carry gv2 a2), (heap_delete_max a1 = carry gv2 a1), (heap_delete_max a1 = carry gv2 gv5), (heap_delete_max a1 = q ++ q), (heap_delete_max a1 = q ++ gv2), (heap_delete_max a1 = gv2 ++ q), (heap_delete_max a1 = gv2 ++ gv2), (heap_delete_max gv5 = q), (heap_delete_max gv5 = gv2), (heap_delete_max gv5 = carry q a2)
(heap_delete_max gv5 = carry q a1), (heap_delete_max gv5 = carry q gv5), (heap_delete_max gv5 = carry gv2 a2), (heap_delete_max gv5 = carry gv2 a1), (heap_delete_max gv5 = carry gv2 gv5), (heap_delete_max gv5 = q ++ q), (heap_delete_max gv5 = q ++ gv2), (heap_delete_max gv5 = gv2 ++ q), (heap_delete_max gv5 = gv2 ++ gv2), (join q q a2 = q)
(join q q a2 = gv2), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = heap_delete_max gv5), (join q q a2 = insert n q), (join q q a2 = insert n gv2), (join q q a2 = insert x q), (join q q a2 = insert x gv2), (join q q a2 = carry q a2), (join q q a2 = carry q a1)
(join q q a2 = carry q gv5), (join q q a2 = carry gv2 a2), (join q q a2 = carry gv2 a1), (join q q a2 = carry gv2 gv5), (join q q a2 = q ++ q), (join q q a2 = q ++ gv2), (join q q a2 = gv2 ++ q), (join q q a2 = gv2 ++ gv2), (join q q a1 = q), (join q q a1 = gv2)
(join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = heap_delete_max gv5), (join q q a1 = insert n q), (join q q a1 = insert n gv2), (join q q a1 = insert x q), (join q q a1 = insert x gv2), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry q gv5)
(join q q a1 = carry gv2 a2), (join q q a1 = carry gv2 a1), (join q q a1 = carry gv2 gv5), (join q q a1 = q ++ q), (join q q a1 = q ++ gv2), (join q q a1 = gv2 ++ q), (join q q a1 = gv2 ++ gv2), (join q q gv5 = q), (join q q gv5 = gv2), (join q q gv5 = heap_delete_max a2)
(join q q gv5 = heap_delete_max a1), (join q q gv5 = heap_delete_max gv5), (join q q gv5 = insert n q), (join q q gv5 = insert n gv2), (join q q gv5 = insert x q), (join q q gv5 = insert x gv2), (join q q gv5 = carry q a2), (join q q gv5 = carry q a1), (join q q gv5 = carry q gv5), (join q q gv5 = carry gv2 a2)
(join q q gv5 = carry gv2 a1), (join q q gv5 = carry gv2 gv5), (join q q gv5 = q ++ q), (join q q gv5 = q ++ gv2), (join q q gv5 = gv2 ++ q), (join q q gv5 = gv2 ++ gv2), (join q gv2 a2 = q), (join q gv2 a2 = gv2), (join q gv2 a2 = heap_delete_max a2), (join q gv2 a2 = heap_delete_max a1)
(join q gv2 a2 = heap_delete_max gv5), (join q gv2 a2 = insert n q), (join q gv2 a2 = insert n gv2), (join q gv2 a2 = insert x q), (join q gv2 a2 = insert x gv2), (join q gv2 a2 = carry q a2), (join q gv2 a2 = carry q a1), (join q gv2 a2 = carry q gv5), (join q gv2 a2 = carry gv2 a2), (join q gv2 a2 = carry gv2 a1)
(join q gv2 a2 = carry gv2 gv5), (join q gv2 a2 = q ++ q), (join q gv2 a2 = q ++ gv2), (join q gv2 a2 = gv2 ++ q), (join q gv2 a2 = gv2 ++ gv2), (join q gv2 a1 = q), (join q gv2 a1 = gv2), (join q gv2 a1 = heap_delete_max a2), (join q gv2 a1 = heap_delete_max a1), (join q gv2 a1 = heap_delete_max gv5)
(join q gv2 a1 = insert n q), (join q gv2 a1 = insert n gv2), (join q gv2 a1 = insert x q), (join q gv2 a1 = insert x gv2), (join q gv2 a1 = carry q a2), (join q gv2 a1 = carry q a1), (join q gv2 a1 = carry q gv5), (join q gv2 a1 = carry gv2 a2), (join q gv2 a1 = carry gv2 a1), (join q gv2 a1 = carry gv2 gv5)
(join q gv2 a1 = q ++ q), (join q gv2 a1 = q ++ gv2), (join q gv2 a1 = gv2 ++ q), (join q gv2 a1 = gv2 ++ gv2), (join q gv2 gv5 = q), (join q gv2 gv5 = gv2), (join q gv2 gv5 = heap_delete_max a2), (join q gv2 gv5 = heap_delete_max a1), (join q gv2 gv5 = heap_delete_max gv5), (join q gv2 gv5 = insert n q)
(join q gv2 gv5 = insert n gv2), (join q gv2 gv5 = insert x q), (join q gv2 gv5 = insert x gv2), (join q gv2 gv5 = carry q a2), (join q gv2 gv5 = carry q a1), (join q gv2 gv5 = carry q gv5), (join q gv2 gv5 = carry gv2 a2), (join q gv2 gv5 = carry gv2 a1), (join q gv2 gv5 = carry gv2 gv5), (join q gv2 gv5 = q ++ q)
(join q gv2 gv5 = q ++ gv2), (join q gv2 gv5 = gv2 ++ q), (join q gv2 gv5 = gv2 ++ gv2), (join gv2 q a2 = q), (join gv2 q a2 = gv2), (join gv2 q a2 = heap_delete_max a2), (join gv2 q a2 = heap_delete_max a1), (join gv2 q a2 = heap_delete_max gv5), (join gv2 q a2 = insert n q), (join gv2 q a2 = insert n gv2)
(join gv2 q a2 = insert x q), (join gv2 q a2 = insert x gv2), (join gv2 q a2 = carry q a2), (join gv2 q a2 = carry q a1), (join gv2 q a2 = carry q gv5), (join gv2 q a2 = carry gv2 a2), (join gv2 q a2 = carry gv2 a1), (join gv2 q a2 = carry gv2 gv5), (join gv2 q a2 = q ++ q), (join gv2 q a2 = q ++ gv2)
(join gv2 q a2 = gv2 ++ q), (join gv2 q a2 = gv2 ++ gv2), (join gv2 q a1 = q), (join gv2 q a1 = gv2), (join gv2 q a1 = heap_delete_max a2), (join gv2 q a1 = heap_delete_max a1), (join gv2 q a1 = heap_delete_max gv5), (join gv2 q a1 = insert n q), (join gv2 q a1 = insert n gv2), (join gv2 q a1 = insert x q)
(join gv2 q a1 = insert x gv2), (join gv2 q a1 = carry q a2), (join gv2 q a1 = carry q a1), (join gv2 q a1 = carry q gv5), (join gv2 q a1 = carry gv2 a2), (join gv2 q a1 = carry gv2 a1), (join gv2 q a1 = carry gv2 gv5), (join gv2 q a1 = q ++ q), (join gv2 q a1 = q ++ gv2), (join gv2 q a1 = gv2 ++ q)
(join gv2 q a1 = gv2 ++ gv2), (join gv2 q gv5 = q), (join gv2 q gv5 = gv2), (join gv2 q gv5 = heap_delete_max a2), (join gv2 q gv5 = heap_delete_max a1), (join gv2 q gv5 = heap_delete_max gv5), (join gv2 q gv5 = insert n q), (join gv2 q gv5 = insert n gv2), (join gv2 q gv5 = insert x q), (join gv2 q gv5 = insert x gv2)
(join gv2 q gv5 = carry q a2), (join gv2 q gv5 = carry q a1), (join gv2 q gv5 = carry q gv5), (join gv2 q gv5 = carry gv2 a2), (join gv2 q gv5 = carry gv2 a1), (join gv2 q gv5 = carry gv2 gv5), (join gv2 q gv5 = q ++ q), (join gv2 q gv5 = q ++ gv2), (join gv2 q gv5 = gv2 ++ q), (join gv2 q gv5 = gv2 ++ gv2)
(join gv2 gv2 a2 = q), (join gv2 gv2 a2 = gv2), (join gv2 gv2 a2 = heap_delete_max a2), (join gv2 gv2 a2 = heap_delete_max a1), (join gv2 gv2 a2 = heap_delete_max gv5), (join gv2 gv2 a2 = insert n q), (join gv2 gv2 a2 = insert n gv2), (join gv2 gv2 a2 = insert x q), (join gv2 gv2 a2 = insert x gv2), (join gv2 gv2 a2 = carry q a2)
(join gv2 gv2 a2 = carry q a1), (join gv2 gv2 a2 = carry q gv5), (join gv2 gv2 a2 = carry gv2 a2), (join gv2 gv2 a2 = carry gv2 a1), (join gv2 gv2 a2 = carry gv2 gv5), (join gv2 gv2 a2 = q ++ q), (join gv2 gv2 a2 = q ++ gv2), (join gv2 gv2 a2 = gv2 ++ q), (join gv2 gv2 a2 = gv2 ++ gv2), (join gv2 gv2 a1 = q)
(join gv2 gv2 a1 = gv2), (join gv2 gv2 a1 = heap_delete_max a2), (join gv2 gv2 a1 = heap_delete_max a1), (join gv2 gv2 a1 = heap_delete_max gv5), (join gv2 gv2 a1 = insert n q), (join gv2 gv2 a1 = insert n gv2), (join gv2 gv2 a1 = insert x q), (join gv2 gv2 a1 = insert x gv2), (join gv2 gv2 a1 = carry q a2), (join gv2 gv2 a1 = carry q a1)
(join gv2 gv2 a1 = carry q gv5), (join gv2 gv2 a1 = carry gv2 a2), (join gv2 gv2 a1 = carry gv2 a1), (join gv2 gv2 a1 = carry gv2 gv5), (join gv2 gv2 a1 = q ++ q), (join gv2 gv2 a1 = q ++ gv2), (join gv2 gv2 a1 = gv2 ++ q), (join gv2 gv2 a1 = gv2 ++ gv2), (join gv2 gv2 gv5 = q), (join gv2 gv2 gv5 = gv2)
(join gv2 gv2 gv5 = heap_delete_max a2), (join gv2 gv2 gv5 = heap_delete_max a1), (join gv2 gv2 gv5 = heap_delete_max gv5), (join gv2 gv2 gv5 = insert n q), (join gv2 gv2 gv5 = insert n gv2), (join gv2 gv2 gv5 = insert x q), (join gv2 gv2 gv5 = insert x gv2), (join gv2 gv2 gv5 = carry q a2), (join gv2 gv2 gv5 = carry q a1), (join gv2 gv2 gv5 = carry q gv5)
(join gv2 gv2 gv5 = carry gv2 a2), (join gv2 gv2 gv5 = carry gv2 a1), (join gv2 gv2 gv5 = carry gv2 gv5), (join gv2 gv2 gv5 = q ++ q), (join gv2 gv2 gv5 = q ++ gv2), (join gv2 gv2 gv5 = gv2 ++ q), (join gv2 gv2 gv5 = gv2 ++ gv2), (insert n q = q), (insert n q = gv2), (insert n q = heap_delete_max a2)
(insert n q = heap_delete_max a1), (insert n q = heap_delete_max gv5), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry q gv5), (insert n q = carry gv2 a2), (insert n q = carry gv2 a1), (insert n q = carry gv2 gv5), (insert n q = q ++ q), (insert n q = q ++ gv2)
(insert n q = gv2 ++ q), (insert n q = gv2 ++ gv2), (insert n gv2 = q), (insert n gv2 = gv2), (insert n gv2 = heap_delete_max a2), (insert n gv2 = heap_delete_max a1), (insert n gv2 = heap_delete_max gv5), (insert n gv2 = carry q a2), (insert n gv2 = carry q a1), (insert n gv2 = carry q gv5)
(insert n gv2 = carry gv2 a2), (insert n gv2 = carry gv2 a1), (insert n gv2 = carry gv2 gv5), (insert n gv2 = q ++ q), (insert n gv2 = q ++ gv2), (insert n gv2 = gv2 ++ q), (insert n gv2 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = heap_delete_max a2)
(insert x q = heap_delete_max a1), (insert x q = heap_delete_max gv5), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry q gv5), (insert x q = carry gv2 a2), (insert x q = carry gv2 a1), (insert x q = carry gv2 gv5), (insert x q = q ++ q), (insert x q = q ++ gv2)
(insert x q = gv2 ++ q), (insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = heap_delete_max a2), (insert x gv2 = heap_delete_max a1), (insert x gv2 = heap_delete_max gv5), (insert x gv2 = carry q a2), (insert x gv2 = carry q a1), (insert x gv2 = carry q gv5)
(insert x gv2 = carry gv2 a2), (insert x gv2 = carry gv2 a1), (insert x gv2 = carry gv2 gv5), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q), (insert x gv2 = gv2 ++ gv2), (carry q a2 = q), (carry q a2 = gv2), (carry q a2 = q ++ q)
(carry q a2 = q ++ gv2), (carry q a2 = gv2 ++ q), (carry q a2 = gv2 ++ gv2), (carry q a1 = q), (carry q a1 = gv2), (carry q a1 = q ++ q), (carry q a1 = q ++ gv2), (carry q a1 = gv2 ++ q), (carry q a1 = gv2 ++ gv2), (carry q gv5 = q)
(carry q gv5 = gv2), (carry q gv5 = q ++ q), (carry q gv5 = q ++ gv2), (carry q gv5 = gv2 ++ q), (carry q gv5 = gv2 ++ gv2), (carry gv2 a2 = q), (carry gv2 a2 = gv2), (carry gv2 a2 = q ++ q), (carry gv2 a2 = q ++ gv2), (carry gv2 a2 = gv2 ++ q)
(carry gv2 a2 = gv2 ++ gv2), (carry gv2 a1 = q), (carry gv2 a1 = gv2), (carry gv2 a1 = q ++ q), (carry gv2 a1 = q ++ gv2), (carry gv2 a1 = gv2 ++ q), (carry gv2 a1 = gv2 ++ gv2), (carry gv2 gv5 = q), (carry gv2 gv5 = gv2), (carry gv2 gv5 = q ++ q)
(carry gv2 gv5 = q ++ gv2), (carry gv2 gv5 = gv2 ++ q), (carry gv2 gv5 = gv2 ++ gv2), (q ++ q = q), (q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2), (gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q)
(gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q), ([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max gv5)
([] = join q q a2), ([] = join q q a1), ([] = join q q gv5), ([] = join q gv2 a2), ([] = join q gv2 a1), ([] = join q gv2 gv5), ([] = join gv2 q a2), ([] = join gv2 q a1), ([] = join gv2 q gv5), ([] = join gv2 gv2 a2)
([] = join gv2 gv2 a1), ([] = join gv2 gv2 gv5), ([] = insert n q), ([] = insert n gv2), ([] = insert x q), ([] = insert x gv2), ([] = carry q a2), ([] = carry q a1), ([] = carry q gv5), ([] = carry gv2 a2)
([] = carry gv2 a1), ([] = carry gv2 gv5), ([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q), ([] = gv2 ++ gv2), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv2), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2)
((q, gv2) = delete_max_aux n q), ((q, gv2) = delete_max_aux n gv2), ((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((gv2, q) = delete_max_aux n q), ((gv2, q) = delete_max_aux n gv2), ((gv2, q) = delete_max_aux x q), ((gv2, q) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux n q), ((gv2, gv2) = delete_max_aux n gv2)
((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv5), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv5), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1)
(Node n a2 a2 = smash a1 gv5), (Node n a2 a2 = smash gv5 a2), (Node n a2 a2 = smash gv5 a1), (Node n a2 a2 = smash gv5 gv5), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv5), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv5)
(Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv5), (Node n a2 a1 = smash gv5 a2), (Node n a2 a1 = smash gv5 a1), (Node n a2 a1 = smash gv5 gv5), (Node n a2 gv5 = a2), (Node n a2 gv5 = a1), (Node n a2 gv5 = gv5), (Node n a2 gv5 = smash a2 a2)
(Node n a2 gv5 = smash a2 a1), (Node n a2 gv5 = smash a2 gv5), (Node n a2 gv5 = smash a1 a2), (Node n a2 gv5 = smash a1 a1), (Node n a2 gv5 = smash a1 gv5), (Node n a2 gv5 = smash gv5 a2), (Node n a2 gv5 = smash gv5 a1), (Node n a2 gv5 = smash gv5 gv5), (Node n a1 a2 = a2), (Node n a1 a2 = a1)
(Node n a1 a2 = gv5), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv5), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv5), (Node n a1 a2 = smash gv5 a2), (Node n a1 a2 = smash gv5 a1), (Node n a1 a2 = smash gv5 gv5)
(Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv5), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv5), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv5), (Node n a1 a1 = smash gv5 a2)
(Node n a1 a1 = smash gv5 a1), (Node n a1 a1 = smash gv5 gv5), (Node n a1 gv5 = a2), (Node n a1 gv5 = a1), (Node n a1 gv5 = gv5), (Node n a1 gv5 = smash a2 a2), (Node n a1 gv5 = smash a2 a1), (Node n a1 gv5 = smash a2 gv5), (Node n a1 gv5 = smash a1 a2), (Node n a1 gv5 = smash a1 a1)
(Node n a1 gv5 = smash a1 gv5), (Node n a1 gv5 = smash gv5 a2), (Node n a1 gv5 = smash gv5 a1), (Node n a1 gv5 = smash gv5 gv5), (Node n gv5 a2 = a2), (Node n gv5 a2 = a1), (Node n gv5 a2 = gv5), (Node n gv5 a2 = smash a2 a2), (Node n gv5 a2 = smash a2 a1), (Node n gv5 a2 = smash a2 gv5)
(Node n gv5 a2 = smash a1 a2), (Node n gv5 a2 = smash a1 a1), (Node n gv5 a2 = smash a1 gv5), (Node n gv5 a2 = smash gv5 a2), (Node n gv5 a2 = smash gv5 a1), (Node n gv5 a2 = smash gv5 gv5), (Node n gv5 a1 = a2), (Node n gv5 a1 = a1), (Node n gv5 a1 = gv5), (Node n gv5 a1 = smash a2 a2)
(Node n gv5 a1 = smash a2 a1), (Node n gv5 a1 = smash a2 gv5), (Node n gv5 a1 = smash a1 a2), (Node n gv5 a1 = smash a1 a1), (Node n gv5 a1 = smash a1 gv5), (Node n gv5 a1 = smash gv5 a2), (Node n gv5 a1 = smash gv5 a1), (Node n gv5 a1 = smash gv5 gv5), (Node n gv5 gv5 = a2), (Node n gv5 gv5 = a1)
(Node n gv5 gv5 = gv5), (Node n gv5 gv5 = smash a2 a2), (Node n gv5 gv5 = smash a2 a1), (Node n gv5 gv5 = smash a2 gv5), (Node n gv5 gv5 = smash a1 a2), (Node n gv5 gv5 = smash a1 a1), (Node n gv5 gv5 = smash a1 gv5), (Node n gv5 gv5 = smash gv5 a2), (Node n gv5 gv5 = smash gv5 a1), (Node n gv5 gv5 = smash gv5 gv5)
(Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = gv5), (Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a2 gv5), (Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a2 = smash a1 gv5), (Node x a2 a2 = smash gv5 a2)
(Node x a2 a2 = smash gv5 a1), (Node x a2 a2 = smash gv5 gv5), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = gv5), (Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a2 gv5), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1)
(Node x a2 a1 = smash a1 gv5), (Node x a2 a1 = smash gv5 a2), (Node x a2 a1 = smash gv5 a1), (Node x a2 a1 = smash gv5 gv5), (Node x a2 gv5 = a2), (Node x a2 gv5 = a1), (Node x a2 gv5 = gv5), (Node x a2 gv5 = smash a2 a2), (Node x a2 gv5 = smash a2 a1), (Node x a2 gv5 = smash a2 gv5)
(Node x a2 gv5 = smash a1 a2), (Node x a2 gv5 = smash a1 a1), (Node x a2 gv5 = smash a1 gv5), (Node x a2 gv5 = smash gv5 a2), (Node x a2 gv5 = smash gv5 a1), (Node x a2 gv5 = smash gv5 gv5), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = gv5), (Node x a1 a2 = smash a2 a2)
(Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a2 gv5), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a2 = smash a1 gv5), (Node x a1 a2 = smash gv5 a2), (Node x a1 a2 = smash gv5 a1), (Node x a1 a2 = smash gv5 gv5), (Node x a1 a1 = a2), (Node x a1 a1 = a1)
(Node x a1 a1 = gv5), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a2 gv5), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node x a1 a1 = smash a1 gv5), (Node x a1 a1 = smash gv5 a2), (Node x a1 a1 = smash gv5 a1), (Node x a1 a1 = smash gv5 gv5)
(Node x a1 gv5 = a2), (Node x a1 gv5 = a1), (Node x a1 gv5 = gv5), (Node x a1 gv5 = smash a2 a2), (Node x a1 gv5 = smash a2 a1), (Node x a1 gv5 = smash a2 gv5), (Node x a1 gv5 = smash a1 a2), (Node x a1 gv5 = smash a1 a1), (Node x a1 gv5 = smash a1 gv5), (Node x a1 gv5 = smash gv5 a2)
(Node x a1 gv5 = smash gv5 a1), (Node x a1 gv5 = smash gv5 gv5), (Node x gv5 a2 = a2), (Node x gv5 a2 = a1), (Node x gv5 a2 = gv5), (Node x gv5 a2 = smash a2 a2), (Node x gv5 a2 = smash a2 a1), (Node x gv5 a2 = smash a2 gv5), (Node x gv5 a2 = smash a1 a2), (Node x gv5 a2 = smash a1 a1)
(Node x gv5 a2 = smash a1 gv5), (Node x gv5 a2 = smash gv5 a2), (Node x gv5 a2 = smash gv5 a1), (Node x gv5 a2 = smash gv5 gv5), (Node x gv5 a1 = a2), (Node x gv5 a1 = a1), (Node x gv5 a1 = gv5), (Node x gv5 a1 = smash a2 a2), (Node x gv5 a1 = smash a2 a1), (Node x gv5 a1 = smash a2 gv5)
(Node x gv5 a1 = smash a1 a2), (Node x gv5 a1 = smash a1 a1), (Node x gv5 a1 = smash a1 gv5), (Node x gv5 a1 = smash gv5 a2), (Node x gv5 a1 = smash gv5 a1), (Node x gv5 a1 = smash gv5 gv5), (Node x gv5 gv5 = a2), (Node x gv5 gv5 = a1), (Node x gv5 gv5 = gv5), (Node x gv5 gv5 = smash a2 a2)
(Node x gv5 gv5 = smash a2 a1), (Node x gv5 gv5 = smash a2 gv5), (Node x gv5 gv5 = smash a1 a2), (Node x gv5 gv5 = smash a1 a1), (Node x gv5 gv5 = smash a1 gv5), (Node x gv5 gv5 = smash gv5 a2), (Node x gv5 gv5 = smash gv5 a1), (Node x gv5 gv5 = smash gv5 gv5), (smash a2 a2 = a2), (smash a2 a2 = a1)
(smash a2 a2 = gv5), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = gv5), (smash a2 gv5 = a2), (smash a2 gv5 = a1), (smash a2 gv5 = gv5), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = gv5)
(smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv5), (smash a1 gv5 = a2), (smash a1 gv5 = a1), (smash a1 gv5 = gv5), (smash gv5 a2 = a2), (smash gv5 a2 = a1), (smash gv5 a2 = gv5), (smash gv5 a1 = a2)
(smash gv5 a1 = a1), (smash gv5 a1 = gv5), (smash gv5 gv5 = a2), (smash gv5 gv5 = a1), (smash gv5 gv5 = gv5), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 gv5), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1)
(Leaf = Node n a1 gv5), (Leaf = Node n gv5 a2), (Leaf = Node n gv5 a1), (Leaf = Node n gv5 gv5), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a2 gv5), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node x a1 gv5)
(Leaf = Node x gv5 a2), (Leaf = Node x gv5 a1), (Leaf = Node x gv5 gv5), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv5), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 gv5), (Leaf = smash gv5 a2)
(Leaf = smash gv5 a1), (Leaf = smash gv5 gv5), (find_max' n q = n), (find_max' n q = x), (find_max' n gv2 = n), (find_max' n gv2 = x), (find_max' x q = n), (find_max' x q = x), (find_max' x gv2 = n), (find_max' x gv2 = x)
(length q = n), (length q = x), (length q = find_max' n q), (length q = find_max' n gv2), (length q = find_max' x q), (length q = find_max' x gv2), (length gv2 = n), (length gv2 = x), (length gv2 = find_max' n q), (length gv2 = find_max' n gv2)
(length gv2 = find_max' x q), (length gv2 = find_max' x gv2), (Some n = find_max q), (Some n = find_max gv2), (Some x = find_max q), (Some x = find_max gv2), (None = Some n), (None = Some x), (None = find_max q), (None = find_max gv2)
(None = Some a2), (None = Some a1), (None = Some gv5), ((n >? n) = (n >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (x >=? x)), ((n >? x) = (n >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (x >=? n))
((n >? x) = (x >=? x)), ((x >? n) = (n >=? n)), ((x >? n) = (n >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (x >=? x)), ((x >? x) = (n >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (x >=? x))

Label: 8 (8)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (priqq n q), (priqq n gv1), (pow2heap x gv5), (pow2heap x a2), (pow2heap x a1), (pow2heap n gv5)
(pow2heap n a2), (pow2heap n a1), (pow2heapp x x gv5), (pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x n gv5), (pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp n x gv5), (pow2heapp n x a2)
(pow2heapp n x a1), (pow2heapp n n gv5), (pow2heapp n n a2), (pow2heapp n n a1), (Permutation q q), (Permutation q gv1), (Permutation gv1 q), (Permutation gv1 gv1), (In gv5 q), (In gv5 gv1)
(In a2 q), (In a2 gv1), (In a1 q), (In a1 gv1), (x < x), (x < n), (n < x), (n < n), (x <= x), (x <= n)
(n <= x), (n <= n), (gv5 = gv5), (gv5 = a2), (gv5 = a1), (a2 = gv5), (a2 = a2), (a2 = a1), (a1 = gv5), (a1 = a2)
(a1 = a1), (x = x), (x = n), (n = x), (n = n), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1), (false = (x >? x))
(false = (x >? n)), (false = (n >? x)), (false = (n >? n)), (false = (x >=? x)), (false = (x >=? n)), (false = (n >=? x)), (false = (n >=? n)), (true = (x >? x)), (true = (x >? n)), (true = (n >? x))
(true = (n >? n)), (true = (x >=? x)), (true = (x >=? n)), (true = (n >=? x)), (true = (n >=? n)), (Abs q []), (Abs gv1 []), (Abs (gv5 :: q) []), (Abs (gv5 :: gv1) []), (Abs (a2 :: q) [])
(Abs (a2 :: gv1) []), (Abs (a1 :: q) []), (Abs (a1 :: gv1) []), (Abs (merge q q) []), (Abs (merge q gv1) []), (Abs (merge gv1 q) []), (Abs (merge gv1 gv1) []), (Abs (heap_delete_max gv5) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) [])
(Abs (join q q gv5) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q gv1 gv5) []), (Abs (join q gv1 a2) []), (Abs (join q gv1 a1) []), (Abs (join gv1 q gv5) []), (Abs (join gv1 q a2) []), (Abs (join gv1 q a1) []), (Abs (join gv1 gv1 gv5) [])
(Abs (join gv1 gv1 a2) []), (Abs (join gv1 gv1 a1) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (insert n q) []), (Abs (insert n gv1) []), (Abs (carry q gv5) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry gv1 gv5) [])
(Abs (carry gv1 a2) []), (Abs (carry gv1 a1) []), (Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (gv5 :: q) [])
(priqueue_elems (gv5 :: gv1) []), (priqueue_elems (a2 :: q) []), (priqueue_elems (a2 :: gv1) []), (priqueue_elems (a1 :: q) []), (priqueue_elems (a1 :: gv1) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (heap_delete_max gv5) [])
(priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join q q gv5) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) []), (priqueue_elems (join q gv1 gv5) []), (priqueue_elems (join q gv1 a2) []), (priqueue_elems (join q gv1 a1) []), (priqueue_elems (join gv1 q gv5) []), (priqueue_elems (join gv1 q a2) [])
(priqueue_elems (join gv1 q a1) []), (priqueue_elems (join gv1 gv1 gv5) []), (priqueue_elems (join gv1 gv1 a2) []), (priqueue_elems (join gv1 gv1 a1) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv1) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv1) []), (priqueue_elems (carry q gv5) []), (priqueue_elems (carry q a2) [])
(priqueue_elems (carry q a1) []), (priqueue_elems (carry gv1 gv5) []), (priqueue_elems (carry gv1 a2) []), (priqueue_elems (carry gv1 a1) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems gv5 [])
(tree_elems a2 []), (tree_elems a1 []), (tree_elems (Node x gv5 gv5) []), (tree_elems (Node x gv5 a2) []), (tree_elems (Node x gv5 a1) []), (tree_elems (Node x a2 gv5) []), (tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a1 gv5) []), (tree_elems (Node x a1 a2) [])
(tree_elems (Node x a1 a1) []), (tree_elems (Node n gv5 gv5) []), (tree_elems (Node n gv5 a2) []), (tree_elems (Node n gv5 a1) []), (tree_elems (Node n a2 gv5) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 gv5) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) [])
(tree_elems (smash gv5 gv5) []), (tree_elems (smash gv5 a2) []), (tree_elems (smash gv5 a1) []), (tree_elems (smash a2 gv5) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a1 gv5) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf [])
(priq (gv5 :: q)), (priq (gv5 :: gv1)), (priq (a2 :: q)), (priq (a2 :: gv1)), (priq (a1 :: q)), (priq (a1 :: gv1)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (merge gv1 gv1))
(priq (heap_delete_max gv5)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (join q q gv5)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q gv1 gv5)), (priq (join q gv1 a2)), (priq (join q gv1 a1)), (priq (join gv1 q gv5))
(priq (join gv1 q a2)), (priq (join gv1 q a1)), (priq (join gv1 gv1 gv5)), (priq (join gv1 gv1 a2)), (priq (join gv1 gv1 a1)), (priq (insert x q)), (priq (insert x gv1)), (priq (insert n q)), (priq (insert n gv1)), (priq (carry q gv5))
(priq (carry q a2)), (priq (carry q a1)), (priq (carry gv1 gv5)), (priq (carry gv1 a2)), (priq (carry gv1 a1)), (priq (q ++ q)), (priq (q ++ gv1)), (priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priqq x (gv5 :: q))
(priqq x (gv5 :: gv1)), (priqq x (a2 :: q)), (priqq x (a2 :: gv1)), (priqq x (a1 :: q)), (priqq x (a1 :: gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q)), (priqq x (merge gv1 gv1)), (priqq x (heap_delete_max gv5))
(priqq x (heap_delete_max a2)), (priqq x (heap_delete_max a1)), (priqq x (join q q gv5)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q gv1 gv5)), (priqq x (join q gv1 a2)), (priqq x (join q gv1 a1)), (priqq x (join gv1 q gv5)), (priqq x (join gv1 q a2))
(priqq x (join gv1 q a1)), (priqq x (join gv1 gv1 gv5)), (priqq x (join gv1 gv1 a2)), (priqq x (join gv1 gv1 a1)), (priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (insert n q)), (priqq x (insert n gv1)), (priqq x (carry q gv5)), (priqq x (carry q a2))
(priqq x (carry q a1)), (priqq x (carry gv1 gv5)), (priqq x (carry gv1 a2)), (priqq x (carry gv1 a1)), (priqq x (q ++ q)), (priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1)), (priqq n (gv5 :: q)), (priqq n (gv5 :: gv1))
(priqq n (a2 :: q)), (priqq n (a2 :: gv1)), (priqq n (a1 :: q)), (priqq n (a1 :: gv1)), (priqq n (merge q q)), (priqq n (merge q gv1)), (priqq n (merge gv1 q)), (priqq n (merge gv1 gv1)), (priqq n (heap_delete_max gv5)), (priqq n (heap_delete_max a2))
(priqq n (heap_delete_max a1)), (priqq n (join q q gv5)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q gv1 gv5)), (priqq n (join q gv1 a2)), (priqq n (join q gv1 a1)), (priqq n (join gv1 q gv5)), (priqq n (join gv1 q a2)), (priqq n (join gv1 q a1))
(priqq n (join gv1 gv1 gv5)), (priqq n (join gv1 gv1 a2)), (priqq n (join gv1 gv1 a1)), (priqq n (insert x q)), (priqq n (insert x gv1)), (priqq n (insert n q)), (priqq n (insert n gv1)), (priqq n (carry q gv5)), (priqq n (carry q a2)), (priqq n (carry q a1))
(priqq n (carry gv1 gv5)), (priqq n (carry gv1 a2)), (priqq n (carry gv1 a1)), (priqq n (q ++ q)), (priqq n (q ++ gv1)), (priqq n (gv1 ++ q)), (priqq n (gv1 ++ gv1)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv1), (priqq (find_max' x q) (gv5 :: q))
(priqq (find_max' x q) (gv5 :: gv1)), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a2 :: gv1)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv1)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv1)), (priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (heap_delete_max gv5))
(priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (join q q gv5)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q gv1 gv5)), (priqq (find_max' x q) (join q gv1 a2)), (priqq (find_max' x q) (join q gv1 a1)), (priqq (find_max' x q) (join gv1 q gv5)), (priqq (find_max' x q) (join gv1 q a2))
(priqq (find_max' x q) (join gv1 q a1)), (priqq (find_max' x q) (join gv1 gv1 gv5)), (priqq (find_max' x q) (join gv1 gv1 a2)), (priqq (find_max' x q) (join gv1 gv1 a1)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1)), (priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv1)), (priqq (find_max' x q) (carry q gv5)), (priqq (find_max' x q) (carry q a2))
(priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry gv1 gv5)), (priqq (find_max' x q) (carry gv1 a2)), (priqq (find_max' x q) (carry gv1 a1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1)), (priqq (find_max' x q) (gv1 ++ q)), (priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1)
(priqq (find_max' x gv1) (gv5 :: q)), (priqq (find_max' x gv1) (gv5 :: gv1)), (priqq (find_max' x gv1) (a2 :: q)), (priqq (find_max' x gv1) (a2 :: gv1)), (priqq (find_max' x gv1) (a1 :: q)), (priqq (find_max' x gv1) (a1 :: gv1)), (priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1)), (priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1))
(priqq (find_max' x gv1) (heap_delete_max gv5)), (priqq (find_max' x gv1) (heap_delete_max a2)), (priqq (find_max' x gv1) (heap_delete_max a1)), (priqq (find_max' x gv1) (join q q gv5)), (priqq (find_max' x gv1) (join q q a2)), (priqq (find_max' x gv1) (join q q a1)), (priqq (find_max' x gv1) (join q gv1 gv5)), (priqq (find_max' x gv1) (join q gv1 a2)), (priqq (find_max' x gv1) (join q gv1 a1)), (priqq (find_max' x gv1) (join gv1 q gv5))
(priqq (find_max' x gv1) (join gv1 q a2)), (priqq (find_max' x gv1) (join gv1 q a1)), (priqq (find_max' x gv1) (join gv1 gv1 gv5)), (priqq (find_max' x gv1) (join gv1 gv1 a2)), (priqq (find_max' x gv1) (join gv1 gv1 a1)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (insert n q)), (priqq (find_max' x gv1) (insert n gv1)), (priqq (find_max' x gv1) (carry q gv5))
(priqq (find_max' x gv1) (carry q a2)), (priqq (find_max' x gv1) (carry q a1)), (priqq (find_max' x gv1) (carry gv1 gv5)), (priqq (find_max' x gv1) (carry gv1 a2)), (priqq (find_max' x gv1) (carry gv1 a1)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1)), (priqq (find_max' n q) q)
(priqq (find_max' n q) gv1), (priqq (find_max' n q) (gv5 :: q)), (priqq (find_max' n q) (gv5 :: gv1)), (priqq (find_max' n q) (a2 :: q)), (priqq (find_max' n q) (a2 :: gv1)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv1)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv1)), (priqq (find_max' n q) (merge gv1 q))
(priqq (find_max' n q) (merge gv1 gv1)), (priqq (find_max' n q) (heap_delete_max gv5)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (join q q gv5)), (priqq (find_max' n q) (join q q a2)), (priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q gv1 gv5)), (priqq (find_max' n q) (join q gv1 a2)), (priqq (find_max' n q) (join q gv1 a1))
(priqq (find_max' n q) (join gv1 q gv5)), (priqq (find_max' n q) (join gv1 q a2)), (priqq (find_max' n q) (join gv1 q a1)), (priqq (find_max' n q) (join gv1 gv1 gv5)), (priqq (find_max' n q) (join gv1 gv1 a2)), (priqq (find_max' n q) (join gv1 gv1 a1)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv1)), (priqq (find_max' n q) (insert n q)), (priqq (find_max' n q) (insert n gv1))
(priqq (find_max' n q) (carry q gv5)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry gv1 gv5)), (priqq (find_max' n q) (carry gv1 a2)), (priqq (find_max' n q) (carry gv1 a1)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv1)), (priqq (find_max' n q) (gv1 ++ q)), (priqq (find_max' n q) (gv1 ++ gv1))
(priqq (find_max' n gv1) q), (priqq (find_max' n gv1) gv1), (priqq (find_max' n gv1) (gv5 :: q)), (priqq (find_max' n gv1) (gv5 :: gv1)), (priqq (find_max' n gv1) (a2 :: q)), (priqq (find_max' n gv1) (a2 :: gv1)), (priqq (find_max' n gv1) (a1 :: q)), (priqq (find_max' n gv1) (a1 :: gv1)), (priqq (find_max' n gv1) (merge q q)), (priqq (find_max' n gv1) (merge q gv1))
(priqq (find_max' n gv1) (merge gv1 q)), (priqq (find_max' n gv1) (merge gv1 gv1)), (priqq (find_max' n gv1) (heap_delete_max gv5)), (priqq (find_max' n gv1) (heap_delete_max a2)), (priqq (find_max' n gv1) (heap_delete_max a1)), (priqq (find_max' n gv1) (join q q gv5)), (priqq (find_max' n gv1) (join q q a2)), (priqq (find_max' n gv1) (join q q a1)), (priqq (find_max' n gv1) (join q gv1 gv5)), (priqq (find_max' n gv1) (join q gv1 a2))
(priqq (find_max' n gv1) (join q gv1 a1)), (priqq (find_max' n gv1) (join gv1 q gv5)), (priqq (find_max' n gv1) (join gv1 q a2)), (priqq (find_max' n gv1) (join gv1 q a1)), (priqq (find_max' n gv1) (join gv1 gv1 gv5)), (priqq (find_max' n gv1) (join gv1 gv1 a2)), (priqq (find_max' n gv1) (join gv1 gv1 a1)), (priqq (find_max' n gv1) (insert x q)), (priqq (find_max' n gv1) (insert x gv1)), (priqq (find_max' n gv1) (insert n q))
(priqq (find_max' n gv1) (insert n gv1)), (priqq (find_max' n gv1) (carry q gv5)), (priqq (find_max' n gv1) (carry q a2)), (priqq (find_max' n gv1) (carry q a1)), (priqq (find_max' n gv1) (carry gv1 gv5)), (priqq (find_max' n gv1) (carry gv1 a2)), (priqq (find_max' n gv1) (carry gv1 a1)), (priqq (find_max' n gv1) (q ++ q)), (priqq (find_max' n gv1) (q ++ gv1)), (priqq (find_max' n gv1) (gv1 ++ q))
(priqq (find_max' n gv1) (gv1 ++ gv1)), (priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (gv5 :: q)), (priqq (length q) (gv5 :: gv1)), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv1)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv1)), (priqq (length q) (merge q q))
(priqq (length q) (merge q gv1)), (priqq (length q) (merge gv1 q)), (priqq (length q) (merge gv1 gv1)), (priqq (length q) (heap_delete_max gv5)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (join q q gv5)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q gv1 gv5))
(priqq (length q) (join q gv1 a2)), (priqq (length q) (join q gv1 a1)), (priqq (length q) (join gv1 q gv5)), (priqq (length q) (join gv1 q a2)), (priqq (length q) (join gv1 q a1)), (priqq (length q) (join gv1 gv1 gv5)), (priqq (length q) (join gv1 gv1 a2)), (priqq (length q) (join gv1 gv1 a1)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1))
(priqq (length q) (insert n q)), (priqq (length q) (insert n gv1)), (priqq (length q) (carry q gv5)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry gv1 gv5)), (priqq (length q) (carry gv1 a2)), (priqq (length q) (carry gv1 a1)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv1))
(priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (gv5 :: q)), (priqq (length gv1) (gv5 :: gv1)), (priqq (length gv1) (a2 :: q)), (priqq (length gv1) (a2 :: gv1)), (priqq (length gv1) (a1 :: q)), (priqq (length gv1) (a1 :: gv1))
(priqq (length gv1) (merge q q)), (priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (heap_delete_max gv5)), (priqq (length gv1) (heap_delete_max a2)), (priqq (length gv1) (heap_delete_max a1)), (priqq (length gv1) (join q q gv5)), (priqq (length gv1) (join q q a2)), (priqq (length gv1) (join q q a1))
(priqq (length gv1) (join q gv1 gv5)), (priqq (length gv1) (join q gv1 a2)), (priqq (length gv1) (join q gv1 a1)), (priqq (length gv1) (join gv1 q gv5)), (priqq (length gv1) (join gv1 q a2)), (priqq (length gv1) (join gv1 q a1)), (priqq (length gv1) (join gv1 gv1 gv5)), (priqq (length gv1) (join gv1 gv1 a2)), (priqq (length gv1) (join gv1 gv1 a1)), (priqq (length gv1) (insert x q))
(priqq (length gv1) (insert x gv1)), (priqq (length gv1) (insert n q)), (priqq (length gv1) (insert n gv1)), (priqq (length gv1) (carry q gv5)), (priqq (length gv1) (carry q a2)), (priqq (length gv1) (carry q a1)), (priqq (length gv1) (carry gv1 gv5)), (priqq (length gv1) (carry gv1 a2)), (priqq (length gv1) (carry gv1 a1)), (priqq (length gv1) (q ++ q))
(priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heap x (Node x gv5 gv5)), (pow2heap x (Node x gv5 a2)), (pow2heap x (Node x gv5 a1)), (pow2heap x (Node x a2 gv5)), (pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a1 gv5))
(pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node n gv5 gv5)), (pow2heap x (Node n gv5 a2)), (pow2heap x (Node n gv5 a1)), (pow2heap x (Node n a2 gv5)), (pow2heap x (Node n a2 a2)), (pow2heap x (Node n a2 a1)), (pow2heap x (Node n a1 gv5)), (pow2heap x (Node n a1 a2))
(pow2heap x (Node n a1 a1)), (pow2heap x (smash gv5 gv5)), (pow2heap x (smash gv5 a2)), (pow2heap x (smash gv5 a1)), (pow2heap x (smash a2 gv5)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a1 gv5)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1))
(pow2heap n (Node x gv5 gv5)), (pow2heap n (Node x gv5 a2)), (pow2heap n (Node x gv5 a1)), (pow2heap n (Node x a2 gv5)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a1 gv5)), (pow2heap n (Node x a1 a2)), (pow2heap n (Node x a1 a1)), (pow2heap n (Node n gv5 gv5))
(pow2heap n (Node n gv5 a2)), (pow2heap n (Node n gv5 a1)), (pow2heap n (Node n a2 gv5)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 gv5)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash gv5 gv5)), (pow2heap n (smash gv5 a2))
(pow2heap n (smash gv5 a1)), (pow2heap n (smash a2 gv5)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a1 gv5)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' x q) gv5), (pow2heap (find_max' x q) a2), (pow2heap (find_max' x q) a1)
(pow2heap (find_max' x q) (Node x gv5 gv5)), (pow2heap (find_max' x q) (Node x gv5 a2)), (pow2heap (find_max' x q) (Node x gv5 a1)), (pow2heap (find_max' x q) (Node x a2 gv5)), (pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a1 gv5)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node n gv5 gv5))
(pow2heap (find_max' x q) (Node n gv5 a2)), (pow2heap (find_max' x q) (Node n gv5 a1)), (pow2heap (find_max' x q) (Node n a2 gv5)), (pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a1 gv5)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (smash gv5 gv5)), (pow2heap (find_max' x q) (smash gv5 a2))
(pow2heap (find_max' x q) (smash gv5 a1)), (pow2heap (find_max' x q) (smash a2 gv5)), (pow2heap (find_max' x q) (smash a2 a2)), (pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a1 gv5)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x gv1) gv5), (pow2heap (find_max' x gv1) a2), (pow2heap (find_max' x gv1) a1)
(pow2heap (find_max' x gv1) (Node x gv5 gv5)), (pow2heap (find_max' x gv1) (Node x gv5 a2)), (pow2heap (find_max' x gv1) (Node x gv5 a1)), (pow2heap (find_max' x gv1) (Node x a2 gv5)), (pow2heap (find_max' x gv1) (Node x a2 a2)), (pow2heap (find_max' x gv1) (Node x a2 a1)), (pow2heap (find_max' x gv1) (Node x a1 gv5)), (pow2heap (find_max' x gv1) (Node x a1 a2)), (pow2heap (find_max' x gv1) (Node x a1 a1)), (pow2heap (find_max' x gv1) (Node n gv5 gv5))
(pow2heap (find_max' x gv1) (Node n gv5 a2)), (pow2heap (find_max' x gv1) (Node n gv5 a1)), (pow2heap (find_max' x gv1) (Node n a2 gv5)), (pow2heap (find_max' x gv1) (Node n a2 a2)), (pow2heap (find_max' x gv1) (Node n a2 a1)), (pow2heap (find_max' x gv1) (Node n a1 gv5)), (pow2heap (find_max' x gv1) (Node n a1 a2)), (pow2heap (find_max' x gv1) (Node n a1 a1)), (pow2heap (find_max' x gv1) (smash gv5 gv5)), (pow2heap (find_max' x gv1) (smash gv5 a2))
(pow2heap (find_max' x gv1) (smash gv5 a1)), (pow2heap (find_max' x gv1) (smash a2 gv5)), (pow2heap (find_max' x gv1) (smash a2 a2)), (pow2heap (find_max' x gv1) (smash a2 a1)), (pow2heap (find_max' x gv1) (smash a1 gv5)), (pow2heap (find_max' x gv1) (smash a1 a2)), (pow2heap (find_max' x gv1) (smash a1 a1)), (pow2heap (find_max' n q) gv5), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1)
(pow2heap (find_max' n q) (Node x gv5 gv5)), (pow2heap (find_max' n q) (Node x gv5 a2)), (pow2heap (find_max' n q) (Node x gv5 a1)), (pow2heap (find_max' n q) (Node x a2 gv5)), (pow2heap (find_max' n q) (Node x a2 a2)), (pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a1 gv5)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node n gv5 gv5))
(pow2heap (find_max' n q) (Node n gv5 a2)), (pow2heap (find_max' n q) (Node n gv5 a1)), (pow2heap (find_max' n q) (Node n a2 gv5)), (pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a1 gv5)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (smash gv5 gv5)), (pow2heap (find_max' n q) (smash gv5 a2))
(pow2heap (find_max' n q) (smash gv5 a1)), (pow2heap (find_max' n q) (smash a2 gv5)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a1 gv5)), (pow2heap (find_max' n q) (smash a1 a2)), (pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n gv1) gv5), (pow2heap (find_max' n gv1) a2), (pow2heap (find_max' n gv1) a1)
(pow2heap (find_max' n gv1) (Node x gv5 gv5)), (pow2heap (find_max' n gv1) (Node x gv5 a2)), (pow2heap (find_max' n gv1) (Node x gv5 a1)), (pow2heap (find_max' n gv1) (Node x a2 gv5)), (pow2heap (find_max' n gv1) (Node x a2 a2)), (pow2heap (find_max' n gv1) (Node x a2 a1)), (pow2heap (find_max' n gv1) (Node x a1 gv5)), (pow2heap (find_max' n gv1) (Node x a1 a2)), (pow2heap (find_max' n gv1) (Node x a1 a1)), (pow2heap (find_max' n gv1) (Node n gv5 gv5))
(pow2heap (find_max' n gv1) (Node n gv5 a2)), (pow2heap (find_max' n gv1) (Node n gv5 a1)), (pow2heap (find_max' n gv1) (Node n a2 gv5)), (pow2heap (find_max' n gv1) (Node n a2 a2)), (pow2heap (find_max' n gv1) (Node n a2 a1)), (pow2heap (find_max' n gv1) (Node n a1 gv5)), (pow2heap (find_max' n gv1) (Node n a1 a2)), (pow2heap (find_max' n gv1) (Node n a1 a1)), (pow2heap (find_max' n gv1) (smash gv5 gv5)), (pow2heap (find_max' n gv1) (smash gv5 a2))
(pow2heap (find_max' n gv1) (smash gv5 a1)), (pow2heap (find_max' n gv1) (smash a2 gv5)), (pow2heap (find_max' n gv1) (smash a2 a2)), (pow2heap (find_max' n gv1) (smash a2 a1)), (pow2heap (find_max' n gv1) (smash a1 gv5)), (pow2heap (find_max' n gv1) (smash a1 a2)), (pow2heap (find_max' n gv1) (smash a1 a1)), (pow2heap (length q) gv5), (pow2heap (length q) a2), (pow2heap (length q) a1)
(pow2heap (length q) (Node x gv5 gv5)), (pow2heap (length q) (Node x gv5 a2)), (pow2heap (length q) (Node x gv5 a1)), (pow2heap (length q) (Node x a2 gv5)), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a1 gv5)), (pow2heap (length q) (Node x a1 a2)), (pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node n gv5 gv5))
(pow2heap (length q) (Node n gv5 a2)), (pow2heap (length q) (Node n gv5 a1)), (pow2heap (length q) (Node n a2 gv5)), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a1 gv5)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (smash gv5 gv5)), (pow2heap (length q) (smash gv5 a2))
(pow2heap (length q) (smash gv5 a1)), (pow2heap (length q) (smash a2 gv5)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a1 gv5)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length gv1) gv5), (pow2heap (length gv1) a2), (pow2heap (length gv1) a1)
(pow2heap (length gv1) (Node x gv5 gv5)), (pow2heap (length gv1) (Node x gv5 a2)), (pow2heap (length gv1) (Node x gv5 a1)), (pow2heap (length gv1) (Node x a2 gv5)), (pow2heap (length gv1) (Node x a2 a2)), (pow2heap (length gv1) (Node x a2 a1)), (pow2heap (length gv1) (Node x a1 gv5)), (pow2heap (length gv1) (Node x a1 a2)), (pow2heap (length gv1) (Node x a1 a1)), (pow2heap (length gv1) (Node n gv5 gv5))
(pow2heap (length gv1) (Node n gv5 a2)), (pow2heap (length gv1) (Node n gv5 a1)), (pow2heap (length gv1) (Node n a2 gv5)), (pow2heap (length gv1) (Node n a2 a2)), (pow2heap (length gv1) (Node n a2 a1)), (pow2heap (length gv1) (Node n a1 gv5)), (pow2heap (length gv1) (Node n a1 a2)), (pow2heap (length gv1) (Node n a1 a1)), (pow2heap (length gv1) (smash gv5 gv5)), (pow2heap (length gv1) (smash gv5 a2))
(pow2heap (length gv1) (smash gv5 a1)), (pow2heap (length gv1) (smash a2 gv5)), (pow2heap (length gv1) (smash a2 a2)), (pow2heap (length gv1) (smash a2 a1)), (pow2heap (length gv1) (smash a1 gv5)), (pow2heap (length gv1) (smash a1 a2)), (pow2heap (length gv1) (smash a1 a1)), (pow2heapp x x (Node x gv5 gv5)), (pow2heapp x x (Node x gv5 a2)), (pow2heapp x x (Node x gv5 a1))
(pow2heapp x x (Node x a2 gv5)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a1 gv5)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node n gv5 gv5)), (pow2heapp x x (Node n gv5 a2)), (pow2heapp x x (Node n gv5 a1)), (pow2heapp x x (Node n a2 gv5))
(pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a1 gv5)), (pow2heapp x x (Node n a1 a2)), (pow2heapp x x (Node n a1 a1)), (pow2heapp x x (smash gv5 gv5)), (pow2heapp x x (smash gv5 a2)), (pow2heapp x x (smash gv5 a1)), (pow2heapp x x (smash a2 gv5)), (pow2heapp x x (smash a2 a2))
(pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a1 gv5)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x Leaf), (pow2heapp x n (Node x gv5 gv5)), (pow2heapp x n (Node x gv5 a2)), (pow2heapp x n (Node x gv5 a1)), (pow2heapp x n (Node x a2 gv5)), (pow2heapp x n (Node x a2 a2))
(pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a1 gv5)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1)), (pow2heapp x n (Node n gv5 gv5)), (pow2heapp x n (Node n gv5 a2)), (pow2heapp x n (Node n gv5 a1)), (pow2heapp x n (Node n a2 gv5)), (pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1))
(pow2heapp x n (Node n a1 gv5)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (smash gv5 gv5)), (pow2heapp x n (smash gv5 a2)), (pow2heapp x n (smash gv5 a1)), (pow2heapp x n (smash a2 gv5)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a1 gv5))
(pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n Leaf), (pow2heapp x (find_max' x q) gv5), (pow2heapp x (find_max' x q) a2), (pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) (Node x gv5 gv5)), (pow2heapp x (find_max' x q) (Node x gv5 a2)), (pow2heapp x (find_max' x q) (Node x gv5 a1)), (pow2heapp x (find_max' x q) (Node x a2 gv5))
(pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a1 gv5)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node n gv5 gv5)), (pow2heapp x (find_max' x q) (Node n gv5 a2)), (pow2heapp x (find_max' x q) (Node n gv5 a1)), (pow2heapp x (find_max' x q) (Node n a2 gv5)), (pow2heapp x (find_max' x q) (Node n a2 a2))
(pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a1 gv5)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (smash gv5 gv5)), (pow2heapp x (find_max' x q) (smash gv5 a2)), (pow2heapp x (find_max' x q) (smash gv5 a1)), (pow2heapp x (find_max' x q) (smash a2 gv5)), (pow2heapp x (find_max' x q) (smash a2 a2)), (pow2heapp x (find_max' x q) (smash a2 a1))
(pow2heapp x (find_max' x q) (smash a1 gv5)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) gv5), (pow2heapp x (find_max' x gv1) a2), (pow2heapp x (find_max' x gv1) a1), (pow2heapp x (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp x (find_max' x gv1) (Node x gv5 a2)), (pow2heapp x (find_max' x gv1) (Node x gv5 a1))
(pow2heapp x (find_max' x gv1) (Node x a2 gv5)), (pow2heapp x (find_max' x gv1) (Node x a2 a2)), (pow2heapp x (find_max' x gv1) (Node x a2 a1)), (pow2heapp x (find_max' x gv1) (Node x a1 gv5)), (pow2heapp x (find_max' x gv1) (Node x a1 a2)), (pow2heapp x (find_max' x gv1) (Node x a1 a1)), (pow2heapp x (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp x (find_max' x gv1) (Node n gv5 a2)), (pow2heapp x (find_max' x gv1) (Node n gv5 a1)), (pow2heapp x (find_max' x gv1) (Node n a2 gv5))
(pow2heapp x (find_max' x gv1) (Node n a2 a2)), (pow2heapp x (find_max' x gv1) (Node n a2 a1)), (pow2heapp x (find_max' x gv1) (Node n a1 gv5)), (pow2heapp x (find_max' x gv1) (Node n a1 a2)), (pow2heapp x (find_max' x gv1) (Node n a1 a1)), (pow2heapp x (find_max' x gv1) (smash gv5 gv5)), (pow2heapp x (find_max' x gv1) (smash gv5 a2)), (pow2heapp x (find_max' x gv1) (smash gv5 a1)), (pow2heapp x (find_max' x gv1) (smash a2 gv5)), (pow2heapp x (find_max' x gv1) (smash a2 a2))
(pow2heapp x (find_max' x gv1) (smash a2 a1)), (pow2heapp x (find_max' x gv1) (smash a1 gv5)), (pow2heapp x (find_max' x gv1) (smash a1 a2)), (pow2heapp x (find_max' x gv1) (smash a1 a1)), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (find_max' n q) gv5), (pow2heapp x (find_max' n q) a2), (pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) (Node x gv5 gv5)), (pow2heapp x (find_max' n q) (Node x gv5 a2))
(pow2heapp x (find_max' n q) (Node x gv5 a1)), (pow2heapp x (find_max' n q) (Node x a2 gv5)), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a1 gv5)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node n gv5 gv5)), (pow2heapp x (find_max' n q) (Node n gv5 a2)), (pow2heapp x (find_max' n q) (Node n gv5 a1))
(pow2heapp x (find_max' n q) (Node n a2 gv5)), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a1 gv5)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (smash gv5 gv5)), (pow2heapp x (find_max' n q) (smash gv5 a2)), (pow2heapp x (find_max' n q) (smash gv5 a1)), (pow2heapp x (find_max' n q) (smash a2 gv5))
(pow2heapp x (find_max' n q) (smash a2 a2)), (pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a1 gv5)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' n gv1) gv5), (pow2heapp x (find_max' n gv1) a2), (pow2heapp x (find_max' n gv1) a1), (pow2heapp x (find_max' n gv1) (Node x gv5 gv5))
(pow2heapp x (find_max' n gv1) (Node x gv5 a2)), (pow2heapp x (find_max' n gv1) (Node x gv5 a1)), (pow2heapp x (find_max' n gv1) (Node x a2 gv5)), (pow2heapp x (find_max' n gv1) (Node x a2 a2)), (pow2heapp x (find_max' n gv1) (Node x a2 a1)), (pow2heapp x (find_max' n gv1) (Node x a1 gv5)), (pow2heapp x (find_max' n gv1) (Node x a1 a2)), (pow2heapp x (find_max' n gv1) (Node x a1 a1)), (pow2heapp x (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp x (find_max' n gv1) (Node n gv5 a2))
(pow2heapp x (find_max' n gv1) (Node n gv5 a1)), (pow2heapp x (find_max' n gv1) (Node n a2 gv5)), (pow2heapp x (find_max' n gv1) (Node n a2 a2)), (pow2heapp x (find_max' n gv1) (Node n a2 a1)), (pow2heapp x (find_max' n gv1) (Node n a1 gv5)), (pow2heapp x (find_max' n gv1) (Node n a1 a2)), (pow2heapp x (find_max' n gv1) (Node n a1 a1)), (pow2heapp x (find_max' n gv1) (smash gv5 gv5)), (pow2heapp x (find_max' n gv1) (smash gv5 a2)), (pow2heapp x (find_max' n gv1) (smash gv5 a1))
(pow2heapp x (find_max' n gv1) (smash a2 gv5)), (pow2heapp x (find_max' n gv1) (smash a2 a2)), (pow2heapp x (find_max' n gv1) (smash a2 a1)), (pow2heapp x (find_max' n gv1) (smash a1 gv5)), (pow2heapp x (find_max' n gv1) (smash a1 a2)), (pow2heapp x (find_max' n gv1) (smash a1 a1)), (pow2heapp x (find_max' n gv1) Leaf), (pow2heapp x (length q) gv5), (pow2heapp x (length q) a2), (pow2heapp x (length q) a1)
(pow2heapp x (length q) (Node x gv5 gv5)), (pow2heapp x (length q) (Node x gv5 a2)), (pow2heapp x (length q) (Node x gv5 a1)), (pow2heapp x (length q) (Node x a2 gv5)), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a1 gv5)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node n gv5 gv5))
(pow2heapp x (length q) (Node n gv5 a2)), (pow2heapp x (length q) (Node n gv5 a1)), (pow2heapp x (length q) (Node n a2 gv5)), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a1 gv5)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (smash gv5 gv5)), (pow2heapp x (length q) (smash gv5 a2))
(pow2heapp x (length q) (smash gv5 a1)), (pow2heapp x (length q) (smash a2 gv5)), (pow2heapp x (length q) (smash a2 a2)), (pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a1 gv5)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) gv5), (pow2heapp x (length gv1) a2)
(pow2heapp x (length gv1) a1), (pow2heapp x (length gv1) (Node x gv5 gv5)), (pow2heapp x (length gv1) (Node x gv5 a2)), (pow2heapp x (length gv1) (Node x gv5 a1)), (pow2heapp x (length gv1) (Node x a2 gv5)), (pow2heapp x (length gv1) (Node x a2 a2)), (pow2heapp x (length gv1) (Node x a2 a1)), (pow2heapp x (length gv1) (Node x a1 gv5)), (pow2heapp x (length gv1) (Node x a1 a2)), (pow2heapp x (length gv1) (Node x a1 a1))
(pow2heapp x (length gv1) (Node n gv5 gv5)), (pow2heapp x (length gv1) (Node n gv5 a2)), (pow2heapp x (length gv1) (Node n gv5 a1)), (pow2heapp x (length gv1) (Node n a2 gv5)), (pow2heapp x (length gv1) (Node n a2 a2)), (pow2heapp x (length gv1) (Node n a2 a1)), (pow2heapp x (length gv1) (Node n a1 gv5)), (pow2heapp x (length gv1) (Node n a1 a2)), (pow2heapp x (length gv1) (Node n a1 a1)), (pow2heapp x (length gv1) (smash gv5 gv5))
(pow2heapp x (length gv1) (smash gv5 a2)), (pow2heapp x (length gv1) (smash gv5 a1)), (pow2heapp x (length gv1) (smash a2 gv5)), (pow2heapp x (length gv1) (smash a2 a2)), (pow2heapp x (length gv1) (smash a2 a1)), (pow2heapp x (length gv1) (smash a1 gv5)), (pow2heapp x (length gv1) (smash a1 a2)), (pow2heapp x (length gv1) (smash a1 a1)), (pow2heapp x (length gv1) Leaf), (pow2heapp n x (Node x gv5 gv5))
(pow2heapp n x (Node x gv5 a2)), (pow2heapp n x (Node x gv5 a1)), (pow2heapp n x (Node x a2 gv5)), (pow2heapp n x (Node x a2 a2)), (pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a1 gv5)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node n gv5 gv5)), (pow2heapp n x (Node n gv5 a2))
(pow2heapp n x (Node n gv5 a1)), (pow2heapp n x (Node n a2 gv5)), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a1 gv5)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (smash gv5 gv5)), (pow2heapp n x (smash gv5 a2)), (pow2heapp n x (smash gv5 a1))
(pow2heapp n x (smash a2 gv5)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a1 gv5)), (pow2heapp n x (smash a1 a2)), (pow2heapp n x (smash a1 a1)), (pow2heapp n x Leaf), (pow2heapp n n (Node x gv5 gv5)), (pow2heapp n n (Node x gv5 a2)), (pow2heapp n n (Node x gv5 a1))
(pow2heapp n n (Node x a2 gv5)), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a1 gv5)), (pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node n gv5 gv5)), (pow2heapp n n (Node n gv5 a2)), (pow2heapp n n (Node n gv5 a1)), (pow2heapp n n (Node n a2 gv5))
(pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 gv5)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash gv5 gv5)), (pow2heapp n n (smash gv5 a2)), (pow2heapp n n (smash gv5 a1)), (pow2heapp n n (smash a2 gv5)), (pow2heapp n n (smash a2 a2))
(pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 gv5)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' x q) gv5), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) (Node x gv5 gv5)), (pow2heapp n (find_max' x q) (Node x gv5 a2))
(pow2heapp n (find_max' x q) (Node x gv5 a1)), (pow2heapp n (find_max' x q) (Node x a2 gv5)), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a1 gv5)), (pow2heapp n (find_max' x q) (Node x a1 a2)), (pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node n gv5 gv5)), (pow2heapp n (find_max' x q) (Node n gv5 a2)), (pow2heapp n (find_max' x q) (Node n gv5 a1))
(pow2heapp n (find_max' x q) (Node n a2 gv5)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a1 gv5)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (smash gv5 gv5)), (pow2heapp n (find_max' x q) (smash gv5 a2)), (pow2heapp n (find_max' x q) (smash gv5 a1)), (pow2heapp n (find_max' x q) (smash a2 gv5))
(pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a1 gv5)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) Leaf), (pow2heapp n (find_max' x gv1) gv5), (pow2heapp n (find_max' x gv1) a2), (pow2heapp n (find_max' x gv1) a1), (pow2heapp n (find_max' x gv1) (Node x gv5 gv5))
(pow2heapp n (find_max' x gv1) (Node x gv5 a2)), (pow2heapp n (find_max' x gv1) (Node x gv5 a1)), (pow2heapp n (find_max' x gv1) (Node x a2 gv5)), (pow2heapp n (find_max' x gv1) (Node x a2 a2)), (pow2heapp n (find_max' x gv1) (Node x a2 a1)), (pow2heapp n (find_max' x gv1) (Node x a1 gv5)), (pow2heapp n (find_max' x gv1) (Node x a1 a2)), (pow2heapp n (find_max' x gv1) (Node x a1 a1)), (pow2heapp n (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp n (find_max' x gv1) (Node n gv5 a2))
(pow2heapp n (find_max' x gv1) (Node n gv5 a1)), (pow2heapp n (find_max' x gv1) (Node n a2 gv5)), (pow2heapp n (find_max' x gv1) (Node n a2 a2)), (pow2heapp n (find_max' x gv1) (Node n a2 a1)), (pow2heapp n (find_max' x gv1) (Node n a1 gv5)), (pow2heapp n (find_max' x gv1) (Node n a1 a2)), (pow2heapp n (find_max' x gv1) (Node n a1 a1)), (pow2heapp n (find_max' x gv1) (smash gv5 gv5)), (pow2heapp n (find_max' x gv1) (smash gv5 a2)), (pow2heapp n (find_max' x gv1) (smash gv5 a1))
(pow2heapp n (find_max' x gv1) (smash a2 gv5)), (pow2heapp n (find_max' x gv1) (smash a2 a2)), (pow2heapp n (find_max' x gv1) (smash a2 a1)), (pow2heapp n (find_max' x gv1) (smash a1 gv5)), (pow2heapp n (find_max' x gv1) (smash a1 a2)), (pow2heapp n (find_max' x gv1) (smash a1 a1)), (pow2heapp n (find_max' x gv1) Leaf), (pow2heapp n (find_max' n q) gv5), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1)
(pow2heapp n (find_max' n q) (Node x gv5 gv5)), (pow2heapp n (find_max' n q) (Node x gv5 a2)), (pow2heapp n (find_max' n q) (Node x gv5 a1)), (pow2heapp n (find_max' n q) (Node x a2 gv5)), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a1 gv5)), (pow2heapp n (find_max' n q) (Node x a1 a2)), (pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node n gv5 gv5))
(pow2heapp n (find_max' n q) (Node n gv5 a2)), (pow2heapp n (find_max' n q) (Node n gv5 a1)), (pow2heapp n (find_max' n q) (Node n a2 gv5)), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a1 gv5)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (smash gv5 gv5)), (pow2heapp n (find_max' n q) (smash gv5 a2))
(pow2heapp n (find_max' n q) (smash gv5 a1)), (pow2heapp n (find_max' n q) (smash a2 gv5)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a1 gv5)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) Leaf), (pow2heapp n (find_max' n gv1) gv5), (pow2heapp n (find_max' n gv1) a2)
(pow2heapp n (find_max' n gv1) a1), (pow2heapp n (find_max' n gv1) (Node x gv5 gv5)), (pow2heapp n (find_max' n gv1) (Node x gv5 a2)), (pow2heapp n (find_max' n gv1) (Node x gv5 a1)), (pow2heapp n (find_max' n gv1) (Node x a2 gv5)), (pow2heapp n (find_max' n gv1) (Node x a2 a2)), (pow2heapp n (find_max' n gv1) (Node x a2 a1)), (pow2heapp n (find_max' n gv1) (Node x a1 gv5)), (pow2heapp n (find_max' n gv1) (Node x a1 a2)), (pow2heapp n (find_max' n gv1) (Node x a1 a1))
(pow2heapp n (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp n (find_max' n gv1) (Node n gv5 a2)), (pow2heapp n (find_max' n gv1) (Node n gv5 a1)), (pow2heapp n (find_max' n gv1) (Node n a2 gv5)), (pow2heapp n (find_max' n gv1) (Node n a2 a2)), (pow2heapp n (find_max' n gv1) (Node n a2 a1)), (pow2heapp n (find_max' n gv1) (Node n a1 gv5)), (pow2heapp n (find_max' n gv1) (Node n a1 a2)), (pow2heapp n (find_max' n gv1) (Node n a1 a1)), (pow2heapp n (find_max' n gv1) (smash gv5 gv5))
(pow2heapp n (find_max' n gv1) (smash gv5 a2)), (pow2heapp n (find_max' n gv1) (smash gv5 a1)), (pow2heapp n (find_max' n gv1) (smash a2 gv5)), (pow2heapp n (find_max' n gv1) (smash a2 a2)), (pow2heapp n (find_max' n gv1) (smash a2 a1)), (pow2heapp n (find_max' n gv1) (smash a1 gv5)), (pow2heapp n (find_max' n gv1) (smash a1 a2)), (pow2heapp n (find_max' n gv1) (smash a1 a1)), (pow2heapp n (find_max' n gv1) Leaf), (pow2heapp n (length q) gv5)
(pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) (Node x gv5 gv5)), (pow2heapp n (length q) (Node x gv5 a2)), (pow2heapp n (length q) (Node x gv5 a1)), (pow2heapp n (length q) (Node x a2 gv5)), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a1 gv5)), (pow2heapp n (length q) (Node x a1 a2))
(pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node n gv5 gv5)), (pow2heapp n (length q) (Node n gv5 a2)), (pow2heapp n (length q) (Node n gv5 a1)), (pow2heapp n (length q) (Node n a2 gv5)), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a1 gv5)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1))
(pow2heapp n (length q) (smash gv5 gv5)), (pow2heapp n (length q) (smash gv5 a2)), (pow2heapp n (length q) (smash gv5 a1)), (pow2heapp n (length q) (smash a2 gv5)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a1 gv5)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) Leaf)
(pow2heapp n (length gv1) gv5), (pow2heapp n (length gv1) a2), (pow2heapp n (length gv1) a1), (pow2heapp n (length gv1) (Node x gv5 gv5)), (pow2heapp n (length gv1) (Node x gv5 a2)), (pow2heapp n (length gv1) (Node x gv5 a1)), (pow2heapp n (length gv1) (Node x a2 gv5)), (pow2heapp n (length gv1) (Node x a2 a2)), (pow2heapp n (length gv1) (Node x a2 a1)), (pow2heapp n (length gv1) (Node x a1 gv5))
(pow2heapp n (length gv1) (Node x a1 a2)), (pow2heapp n (length gv1) (Node x a1 a1)), (pow2heapp n (length gv1) (Node n gv5 gv5)), (pow2heapp n (length gv1) (Node n gv5 a2)), (pow2heapp n (length gv1) (Node n gv5 a1)), (pow2heapp n (length gv1) (Node n a2 gv5)), (pow2heapp n (length gv1) (Node n a2 a2)), (pow2heapp n (length gv1) (Node n a2 a1)), (pow2heapp n (length gv1) (Node n a1 gv5)), (pow2heapp n (length gv1) (Node n a1 a2))
(pow2heapp n (length gv1) (Node n a1 a1)), (pow2heapp n (length gv1) (smash gv5 gv5)), (pow2heapp n (length gv1) (smash gv5 a2)), (pow2heapp n (length gv1) (smash gv5 a1)), (pow2heapp n (length gv1) (smash a2 gv5)), (pow2heapp n (length gv1) (smash a2 a2)), (pow2heapp n (length gv1) (smash a2 a1)), (pow2heapp n (length gv1) (smash a1 gv5)), (pow2heapp n (length gv1) (smash a1 a2)), (pow2heapp n (length gv1) (smash a1 a1))
(pow2heapp n (length gv1) Leaf), (pow2heapp (find_max' x q) x gv5), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x (Node x gv5 gv5)), (pow2heapp (find_max' x q) x (Node x gv5 a2)), (pow2heapp (find_max' x q) x (Node x gv5 a1)), (pow2heapp (find_max' x q) x (Node x a2 gv5)), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1))
(pow2heapp (find_max' x q) x (Node x a1 gv5)), (pow2heapp (find_max' x q) x (Node x a1 a2)), (pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node n gv5 gv5)), (pow2heapp (find_max' x q) x (Node n gv5 a2)), (pow2heapp (find_max' x q) x (Node n gv5 a1)), (pow2heapp (find_max' x q) x (Node n a2 gv5)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a1 gv5))
(pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (smash gv5 gv5)), (pow2heapp (find_max' x q) x (smash gv5 a2)), (pow2heapp (find_max' x q) x (smash gv5 a1)), (pow2heapp (find_max' x q) x (smash a2 gv5)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a1 gv5)), (pow2heapp (find_max' x q) x (smash a1 a2))
(pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) n gv5), (pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n (Node x gv5 gv5)), (pow2heapp (find_max' x q) n (Node x gv5 a2)), (pow2heapp (find_max' x q) n (Node x gv5 a1)), (pow2heapp (find_max' x q) n (Node x a2 gv5)), (pow2heapp (find_max' x q) n (Node x a2 a2))
(pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a1 gv5)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node n gv5 gv5)), (pow2heapp (find_max' x q) n (Node n gv5 a2)), (pow2heapp (find_max' x q) n (Node n gv5 a1)), (pow2heapp (find_max' x q) n (Node n a2 gv5)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1))
(pow2heapp (find_max' x q) n (Node n a1 gv5)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1)), (pow2heapp (find_max' x q) n (smash gv5 gv5)), (pow2heapp (find_max' x q) n (smash gv5 a2)), (pow2heapp (find_max' x q) n (smash gv5 a1)), (pow2heapp (find_max' x q) n (smash a2 gv5)), (pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a1 gv5))
(pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv5), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 gv5))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1))
(pow2heapp (find_max' x q) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv1) gv5), (pow2heapp (find_max' x q) (find_max' x gv1) a2), (pow2heapp (find_max' x q) (find_max' x gv1) a1), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x gv5 a1))
(pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 gv5))
(pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a2))
(pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (find_max' n q) gv5), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a2))
(pow2heapp (find_max' x q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n gv5 a1))
(pow2heapp (find_max' x q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 gv5))
(pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) Leaf), (pow2heapp (find_max' x q) (find_max' n gv1) gv5), (pow2heapp (find_max' x q) (find_max' n gv1) a2), (pow2heapp (find_max' x q) (find_max' n gv1) a1), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x gv5 gv5))
(pow2heapp (find_max' x q) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x gv5 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n gv5 a2))
(pow2heapp (find_max' x q) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash gv5 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash gv5 a1))
(pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 gv5)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) Leaf), (pow2heapp (find_max' x q) (length q) gv5), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1)
(pow2heapp (find_max' x q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node x gv5 a1)), (pow2heapp (find_max' x q) (length q) (Node x a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2)), (pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n gv5 gv5))
(pow2heapp (find_max' x q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' x q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' x q) (length q) (smash gv5 a2))
(pow2heapp (find_max' x q) (length q) (smash gv5 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 gv5)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 gv5)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv1) gv5), (pow2heapp (find_max' x q) (length gv1) a2)
(pow2heapp (find_max' x q) (length gv1) a1), (pow2heapp (find_max' x q) (length gv1) (Node x gv5 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node x gv5 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x gv5 a1)), (pow2heapp (find_max' x q) (length gv1) (Node x a2 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a1))
(pow2heapp (find_max' x q) (length gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node n gv5 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n gv5 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 gv5)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' x q) (length gv1) (smash gv5 gv5))
(pow2heapp (find_max' x q) (length gv1) (smash gv5 a2)), (pow2heapp (find_max' x q) (length gv1) (smash gv5 a1)), (pow2heapp (find_max' x q) (length gv1) (smash a2 gv5)), (pow2heapp (find_max' x q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv1) (smash a1 gv5)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x gv5)
(pow2heapp (find_max' x gv1) x a2), (pow2heapp (find_max' x gv1) x a1), (pow2heapp (find_max' x gv1) x (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) x (Node x gv5 a2)), (pow2heapp (find_max' x gv1) x (Node x gv5 a1)), (pow2heapp (find_max' x gv1) x (Node x a2 gv5)), (pow2heapp (find_max' x gv1) x (Node x a2 a2)), (pow2heapp (find_max' x gv1) x (Node x a2 a1)), (pow2heapp (find_max' x gv1) x (Node x a1 gv5)), (pow2heapp (find_max' x gv1) x (Node x a1 a2))
(pow2heapp (find_max' x gv1) x (Node x a1 a1)), (pow2heapp (find_max' x gv1) x (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) x (Node n gv5 a2)), (pow2heapp (find_max' x gv1) x (Node n gv5 a1)), (pow2heapp (find_max' x gv1) x (Node n a2 gv5)), (pow2heapp (find_max' x gv1) x (Node n a2 a2)), (pow2heapp (find_max' x gv1) x (Node n a2 a1)), (pow2heapp (find_max' x gv1) x (Node n a1 gv5)), (pow2heapp (find_max' x gv1) x (Node n a1 a2)), (pow2heapp (find_max' x gv1) x (Node n a1 a1))
(pow2heapp (find_max' x gv1) x (smash gv5 gv5)), (pow2heapp (find_max' x gv1) x (smash gv5 a2)), (pow2heapp (find_max' x gv1) x (smash gv5 a1)), (pow2heapp (find_max' x gv1) x (smash a2 gv5)), (pow2heapp (find_max' x gv1) x (smash a2 a2)), (pow2heapp (find_max' x gv1) x (smash a2 a1)), (pow2heapp (find_max' x gv1) x (smash a1 gv5)), (pow2heapp (find_max' x gv1) x (smash a1 a2)), (pow2heapp (find_max' x gv1) x (smash a1 a1)), (pow2heapp (find_max' x gv1) x Leaf)
(pow2heapp (find_max' x gv1) n gv5), (pow2heapp (find_max' x gv1) n a2), (pow2heapp (find_max' x gv1) n a1), (pow2heapp (find_max' x gv1) n (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) n (Node x gv5 a2)), (pow2heapp (find_max' x gv1) n (Node x gv5 a1)), (pow2heapp (find_max' x gv1) n (Node x a2 gv5)), (pow2heapp (find_max' x gv1) n (Node x a2 a2)), (pow2heapp (find_max' x gv1) n (Node x a2 a1)), (pow2heapp (find_max' x gv1) n (Node x a1 gv5))
(pow2heapp (find_max' x gv1) n (Node x a1 a2)), (pow2heapp (find_max' x gv1) n (Node x a1 a1)), (pow2heapp (find_max' x gv1) n (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) n (Node n gv5 a2)), (pow2heapp (find_max' x gv1) n (Node n gv5 a1)), (pow2heapp (find_max' x gv1) n (Node n a2 gv5)), (pow2heapp (find_max' x gv1) n (Node n a2 a2)), (pow2heapp (find_max' x gv1) n (Node n a2 a1)), (pow2heapp (find_max' x gv1) n (Node n a1 gv5)), (pow2heapp (find_max' x gv1) n (Node n a1 a2))
(pow2heapp (find_max' x gv1) n (Node n a1 a1)), (pow2heapp (find_max' x gv1) n (smash gv5 gv5)), (pow2heapp (find_max' x gv1) n (smash gv5 a2)), (pow2heapp (find_max' x gv1) n (smash gv5 a1)), (pow2heapp (find_max' x gv1) n (smash a2 gv5)), (pow2heapp (find_max' x gv1) n (smash a2 a2)), (pow2heapp (find_max' x gv1) n (smash a2 a1)), (pow2heapp (find_max' x gv1) n (smash a1 gv5)), (pow2heapp (find_max' x gv1) n (smash a1 a2)), (pow2heapp (find_max' x gv1) n (smash a1 a1))
(pow2heapp (find_max' x gv1) n Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) gv5), (pow2heapp (find_max' x gv1) (find_max' x q) a2), (pow2heapp (find_max' x gv1) (find_max' x q) a1), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a1))
(pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 gv5))
(pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a2))
(pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) gv5), (pow2heapp (find_max' x gv1) (find_max' x gv1) a2), (pow2heapp (find_max' x gv1) (find_max' x gv1) a1), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a2))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a1))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 gv5))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (find_max' n q) gv5), (pow2heapp (find_max' x gv1) (find_max' n q) a2), (pow2heapp (find_max' x gv1) (find_max' n q) a1), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 gv5))
(pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a2))
(pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a1))
(pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) Leaf), (pow2heapp (find_max' x gv1) (find_max' n gv1) gv5), (pow2heapp (find_max' x gv1) (find_max' n gv1) a2), (pow2heapp (find_max' x gv1) (find_max' n gv1) a1), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x gv5 a1))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 gv5))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash gv5 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a2))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 gv5)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) gv5), (pow2heapp (find_max' x gv1) (length q) a2), (pow2heapp (find_max' x gv1) (length q) a1), (pow2heapp (find_max' x gv1) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node x gv5 a2))
(pow2heapp (find_max' x gv1) (length q) (Node x gv5 a1)), (pow2heapp (find_max' x gv1) (length q) (Node x a2 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node n gv5 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n gv5 a1))
(pow2heapp (find_max' x gv1) (length q) (Node n a2 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 gv5)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (length q) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (length q) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (length q) (smash gv5 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a2 gv5))
(pow2heapp (find_max' x gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a1 gv5)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length q) Leaf), (pow2heapp (find_max' x gv1) (length gv1) gv5), (pow2heapp (find_max' x gv1) (length gv1) a2), (pow2heapp (find_max' x gv1) (length gv1) a1), (pow2heapp (find_max' x gv1) (length gv1) (Node x gv5 gv5))
(pow2heapp (find_max' x gv1) (length gv1) (Node x gv5 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x gv5 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n gv5 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (Node n gv5 a2))
(pow2heapp (find_max' x gv1) (length gv1) (Node n gv5 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) (smash gv5 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (smash gv5 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash gv5 a1))
(pow2heapp (find_max' x gv1) (length gv1) (smash a2 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 gv5)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (find_max' n q) x gv5), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1)
(pow2heapp (find_max' n q) x (Node x gv5 gv5)), (pow2heapp (find_max' n q) x (Node x gv5 a2)), (pow2heapp (find_max' n q) x (Node x gv5 a1)), (pow2heapp (find_max' n q) x (Node x a2 gv5)), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a1 gv5)), (pow2heapp (find_max' n q) x (Node x a1 a2)), (pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node n gv5 gv5))
(pow2heapp (find_max' n q) x (Node n gv5 a2)), (pow2heapp (find_max' n q) x (Node n gv5 a1)), (pow2heapp (find_max' n q) x (Node n a2 gv5)), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a1 gv5)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (smash gv5 gv5)), (pow2heapp (find_max' n q) x (smash gv5 a2))
(pow2heapp (find_max' n q) x (smash gv5 a1)), (pow2heapp (find_max' n q) x (smash a2 gv5)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a1 gv5)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x Leaf), (pow2heapp (find_max' n q) n gv5), (pow2heapp (find_max' n q) n a2)
(pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n (Node x gv5 gv5)), (pow2heapp (find_max' n q) n (Node x gv5 a2)), (pow2heapp (find_max' n q) n (Node x gv5 a1)), (pow2heapp (find_max' n q) n (Node x a2 gv5)), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a1 gv5)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1))
(pow2heapp (find_max' n q) n (Node n gv5 gv5)), (pow2heapp (find_max' n q) n (Node n gv5 a2)), (pow2heapp (find_max' n q) n (Node n gv5 a1)), (pow2heapp (find_max' n q) n (Node n a2 gv5)), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a1 gv5)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1)), (pow2heapp (find_max' n q) n (smash gv5 gv5))
(pow2heapp (find_max' n q) n (smash gv5 a2)), (pow2heapp (find_max' n q) n (smash gv5 a1)), (pow2heapp (find_max' n q) n (smash a2 gv5)), (pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a1 gv5)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) (find_max' x q) gv5)
(pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1))
(pow2heapp (find_max' n q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) Leaf)
(pow2heapp (find_max' n q) (find_max' x gv1) gv5), (pow2heapp (find_max' n q) (find_max' x gv1) a2), (pow2heapp (find_max' n q) (find_max' x gv1) a1), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 gv5))
(pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a2))
(pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a1))
(pow2heapp (find_max' n q) (find_max' x gv1) Leaf), (pow2heapp (find_max' n q) (find_max' n q) gv5), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1))
(pow2heapp (find_max' n q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 gv5))
(pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2))
(pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) Leaf), (pow2heapp (find_max' n q) (find_max' n gv1) gv5), (pow2heapp (find_max' n q) (find_max' n gv1) a2), (pow2heapp (find_max' n q) (find_max' n gv1) a1), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a2))
(pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a1))
(pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash gv5 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash gv5 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 gv5))
(pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) Leaf), (pow2heapp (find_max' n q) (length q) gv5), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node x gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node x a2 gv5))
(pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2)), (pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a2)), (pow2heapp (find_max' n q) (length q) (Node n gv5 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 gv5)), (pow2heapp (find_max' n q) (length q) (Node n a2 a2))
(pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 gv5)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (smash gv5 gv5)), (pow2heapp (find_max' n q) (length q) (smash gv5 a2)), (pow2heapp (find_max' n q) (length q) (smash gv5 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 gv5)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1))
(pow2heapp (find_max' n q) (length q) (smash a1 gv5)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) Leaf), (pow2heapp (find_max' n q) (length gv1) gv5), (pow2heapp (find_max' n q) (length gv1) a2), (pow2heapp (find_max' n q) (length gv1) a1), (pow2heapp (find_max' n q) (length gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n q) (length gv1) (Node x gv5 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x gv5 a1))
(pow2heapp (find_max' n q) (length gv1) (Node x a2 gv5)), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 gv5)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n q) (length gv1) (Node n gv5 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n gv5 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 gv5))
(pow2heapp (find_max' n q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 gv5)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' n q) (length gv1) (smash gv5 gv5)), (pow2heapp (find_max' n q) (length gv1) (smash gv5 a2)), (pow2heapp (find_max' n q) (length gv1) (smash gv5 a1)), (pow2heapp (find_max' n q) (length gv1) (smash a2 gv5)), (pow2heapp (find_max' n q) (length gv1) (smash a2 a2))
(pow2heapp (find_max' n q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv1) (smash a1 gv5)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (length gv1) Leaf), (pow2heapp (find_max' n gv1) x gv5), (pow2heapp (find_max' n gv1) x a2), (pow2heapp (find_max' n gv1) x a1), (pow2heapp (find_max' n gv1) x (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) x (Node x gv5 a2))
(pow2heapp (find_max' n gv1) x (Node x gv5 a1)), (pow2heapp (find_max' n gv1) x (Node x a2 gv5)), (pow2heapp (find_max' n gv1) x (Node x a2 a2)), (pow2heapp (find_max' n gv1) x (Node x a2 a1)), (pow2heapp (find_max' n gv1) x (Node x a1 gv5)), (pow2heapp (find_max' n gv1) x (Node x a1 a2)), (pow2heapp (find_max' n gv1) x (Node x a1 a1)), (pow2heapp (find_max' n gv1) x (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) x (Node n gv5 a2)), (pow2heapp (find_max' n gv1) x (Node n gv5 a1))
(pow2heapp (find_max' n gv1) x (Node n a2 gv5)), (pow2heapp (find_max' n gv1) x (Node n a2 a2)), (pow2heapp (find_max' n gv1) x (Node n a2 a1)), (pow2heapp (find_max' n gv1) x (Node n a1 gv5)), (pow2heapp (find_max' n gv1) x (Node n a1 a2)), (pow2heapp (find_max' n gv1) x (Node n a1 a1)), (pow2heapp (find_max' n gv1) x (smash gv5 gv5)), (pow2heapp (find_max' n gv1) x (smash gv5 a2)), (pow2heapp (find_max' n gv1) x (smash gv5 a1)), (pow2heapp (find_max' n gv1) x (smash a2 gv5))
(pow2heapp (find_max' n gv1) x (smash a2 a2)), (pow2heapp (find_max' n gv1) x (smash a2 a1)), (pow2heapp (find_max' n gv1) x (smash a1 gv5)), (pow2heapp (find_max' n gv1) x (smash a1 a2)), (pow2heapp (find_max' n gv1) x (smash a1 a1)), (pow2heapp (find_max' n gv1) x Leaf), (pow2heapp (find_max' n gv1) n gv5), (pow2heapp (find_max' n gv1) n a2), (pow2heapp (find_max' n gv1) n a1), (pow2heapp (find_max' n gv1) n (Node x gv5 gv5))
(pow2heapp (find_max' n gv1) n (Node x gv5 a2)), (pow2heapp (find_max' n gv1) n (Node x gv5 a1)), (pow2heapp (find_max' n gv1) n (Node x a2 gv5)), (pow2heapp (find_max' n gv1) n (Node x a2 a2)), (pow2heapp (find_max' n gv1) n (Node x a2 a1)), (pow2heapp (find_max' n gv1) n (Node x a1 gv5)), (pow2heapp (find_max' n gv1) n (Node x a1 a2)), (pow2heapp (find_max' n gv1) n (Node x a1 a1)), (pow2heapp (find_max' n gv1) n (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) n (Node n gv5 a2))
(pow2heapp (find_max' n gv1) n (Node n gv5 a1)), (pow2heapp (find_max' n gv1) n (Node n a2 gv5)), (pow2heapp (find_max' n gv1) n (Node n a2 a2)), (pow2heapp (find_max' n gv1) n (Node n a2 a1)), (pow2heapp (find_max' n gv1) n (Node n a1 gv5)), (pow2heapp (find_max' n gv1) n (Node n a1 a2)), (pow2heapp (find_max' n gv1) n (Node n a1 a1)), (pow2heapp (find_max' n gv1) n (smash gv5 gv5)), (pow2heapp (find_max' n gv1) n (smash gv5 a2)), (pow2heapp (find_max' n gv1) n (smash gv5 a1))
(pow2heapp (find_max' n gv1) n (smash a2 gv5)), (pow2heapp (find_max' n gv1) n (smash a2 a2)), (pow2heapp (find_max' n gv1) n (smash a2 a1)), (pow2heapp (find_max' n gv1) n (smash a1 gv5)), (pow2heapp (find_max' n gv1) n (smash a1 a2)), (pow2heapp (find_max' n gv1) n (smash a1 a1)), (pow2heapp (find_max' n gv1) n Leaf), (pow2heapp (find_max' n gv1) (find_max' x q) gv5), (pow2heapp (find_max' n gv1) (find_max' x q) a2), (pow2heapp (find_max' n gv1) (find_max' x q) a1)
(pow2heapp (find_max' n gv1) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n gv5 gv5))
(pow2heapp (find_max' n gv1) (find_max' x q) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash gv5 a2))
(pow2heapp (find_max' n gv1) (find_max' x q) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) Leaf), (pow2heapp (find_max' n gv1) (find_max' x gv1) gv5), (pow2heapp (find_max' n gv1) (find_max' x gv1) a2)
(pow2heapp (find_max' n gv1) (find_max' x gv1) a1), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a1))
(pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash gv5 gv5))
(pow2heapp (find_max' n gv1) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' n gv1) (find_max' n q) gv5)
(pow2heapp (find_max' n gv1) (find_max' n q) a2), (pow2heapp (find_max' n gv1) (find_max' n q) a1), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a1))
(pow2heapp (find_max' n gv1) (find_max' n q) (smash gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) Leaf)
(pow2heapp (find_max' n gv1) (find_max' n gv1) gv5), (pow2heapp (find_max' n gv1) (find_max' n gv1) a2), (pow2heapp (find_max' n gv1) (find_max' n gv1) a1), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 gv5))
(pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a2))
(pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash gv5 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 gv5)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a1))
(pow2heapp (find_max' n gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' n gv1) (length q) gv5), (pow2heapp (find_max' n gv1) (length q) a2), (pow2heapp (find_max' n gv1) (length q) a1), (pow2heapp (find_max' n gv1) (length q) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (length q) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (length q) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a1))
(pow2heapp (find_max' n gv1) (length q) (Node x a1 gv5)), (pow2heapp (find_max' n gv1) (length q) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) (length q) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 gv5))
(pow2heapp (find_max' n gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (length q) (smash gv5 gv5)), (pow2heapp (find_max' n gv1) (length q) (smash gv5 a2)), (pow2heapp (find_max' n gv1) (length q) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a1 gv5)), (pow2heapp (find_max' n gv1) (length q) (smash a1 a2))
(pow2heapp (find_max' n gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length q) Leaf), (pow2heapp (find_max' n gv1) (length gv1) gv5), (pow2heapp (find_max' n gv1) (length gv1) a2), (pow2heapp (find_max' n gv1) (length gv1) a1), (pow2heapp (find_max' n gv1) (length gv1) (Node x gv5 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node x gv5 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x gv5 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a2 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a2))
(pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n gv5 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node n gv5 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n gv5 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a1))
(pow2heapp (find_max' n gv1) (length gv1) (Node n a1 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash gv5 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (smash gv5 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash gv5 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 gv5)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 gv5))
(pow2heapp (find_max' n gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) Leaf), (pow2heapp (length q) x gv5), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x (Node x gv5 gv5)), (pow2heapp (length q) x (Node x gv5 a2)), (pow2heapp (length q) x (Node x gv5 a1)), (pow2heapp (length q) x (Node x a2 gv5))
(pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a1 gv5)), (pow2heapp (length q) x (Node x a1 a2)), (pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node n gv5 gv5)), (pow2heapp (length q) x (Node n gv5 a2)), (pow2heapp (length q) x (Node n gv5 a1)), (pow2heapp (length q) x (Node n a2 gv5)), (pow2heapp (length q) x (Node n a2 a2))
(pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a1 gv5)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (smash gv5 gv5)), (pow2heapp (length q) x (smash gv5 a2)), (pow2heapp (length q) x (smash gv5 a1)), (pow2heapp (length q) x (smash a2 gv5)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1))
(pow2heapp (length q) x (smash a1 gv5)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) n gv5), (pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n (Node x gv5 gv5)), (pow2heapp (length q) n (Node x gv5 a2)), (pow2heapp (length q) n (Node x gv5 a1))
(pow2heapp (length q) n (Node x a2 gv5)), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a1 gv5)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node n gv5 gv5)), (pow2heapp (length q) n (Node n gv5 a2)), (pow2heapp (length q) n (Node n gv5 a1)), (pow2heapp (length q) n (Node n a2 gv5))
(pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a1 gv5)), (pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1)), (pow2heapp (length q) n (smash gv5 gv5)), (pow2heapp (length q) n (smash gv5 a2)), (pow2heapp (length q) n (smash gv5 a1)), (pow2heapp (length q) n (smash a2 gv5)), (pow2heapp (length q) n (smash a2 a2))
(pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a1 gv5)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) (find_max' x q) gv5), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' x q) (Node x gv5 a2))
(pow2heapp (length q) (find_max' x q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' x q) (Node x a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2)), (pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' x q) (Node n gv5 a1))
(pow2heapp (length q) (find_max' x q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 gv5)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' x q) (smash gv5 a2)), (pow2heapp (length q) (find_max' x q) (smash gv5 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 gv5))
(pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 gv5)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv1) gv5), (pow2heapp (length q) (find_max' x gv1) a2), (pow2heapp (length q) (find_max' x gv1) a1), (pow2heapp (length q) (find_max' x gv1) (Node x gv5 gv5))
(pow2heapp (length q) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x gv5 a1)), (pow2heapp (length q) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 gv5)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' x gv1) (Node n gv5 a2))
(pow2heapp (length q) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 gv5)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (length q) (find_max' x gv1) (smash gv5 gv5)), (pow2heapp (length q) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (length q) (find_max' x gv1) (smash gv5 a1))
(pow2heapp (length q) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (length q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv1) (smash a1 gv5)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv1) Leaf), (pow2heapp (length q) (find_max' n q) gv5), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1)
(pow2heapp (length q) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node x gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node x a2 gv5)), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 gv5)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2)), (pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n gv5 gv5))
(pow2heapp (length q) (find_max' n q) (Node n gv5 a2)), (pow2heapp (length q) (find_max' n q) (Node n gv5 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 gv5)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 gv5)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (smash gv5 gv5)), (pow2heapp (length q) (find_max' n q) (smash gv5 a2))
(pow2heapp (length q) (find_max' n q) (smash gv5 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 gv5)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 gv5)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) Leaf), (pow2heapp (length q) (find_max' n gv1) gv5), (pow2heapp (length q) (find_max' n gv1) a2)
(pow2heapp (length q) (find_max' n gv1) a1), (pow2heapp (length q) (find_max' n gv1) (Node x gv5 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x gv5 a1)), (pow2heapp (length q) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a1))
(pow2heapp (length q) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node n gv5 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (length q) (find_max' n gv1) (smash gv5 gv5))
(pow2heapp (length q) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (length q) (find_max' n gv1) (smash gv5 a1)), (pow2heapp (length q) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (length q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv1) (smash a1 gv5)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv1) Leaf), (pow2heapp (length q) (length q) gv5)
(pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) (Node x gv5 gv5)), (pow2heapp (length q) (length q) (Node x gv5 a2)), (pow2heapp (length q) (length q) (Node x gv5 a1)), (pow2heapp (length q) (length q) (Node x a2 gv5)), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a1 gv5)), (pow2heapp (length q) (length q) (Node x a1 a2))
(pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node n gv5 gv5)), (pow2heapp (length q) (length q) (Node n gv5 a2)), (pow2heapp (length q) (length q) (Node n gv5 a1)), (pow2heapp (length q) (length q) (Node n a2 gv5)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a1 gv5)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1))
(pow2heapp (length q) (length q) (smash gv5 gv5)), (pow2heapp (length q) (length q) (smash gv5 a2)), (pow2heapp (length q) (length q) (smash gv5 a1)), (pow2heapp (length q) (length q) (smash a2 gv5)), (pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a1 gv5)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) Leaf)
(pow2heapp (length q) (length gv1) gv5), (pow2heapp (length q) (length gv1) a2), (pow2heapp (length q) (length gv1) a1), (pow2heapp (length q) (length gv1) (Node x gv5 gv5)), (pow2heapp (length q) (length gv1) (Node x gv5 a2)), (pow2heapp (length q) (length gv1) (Node x gv5 a1)), (pow2heapp (length q) (length gv1) (Node x a2 gv5)), (pow2heapp (length q) (length gv1) (Node x a2 a2)), (pow2heapp (length q) (length gv1) (Node x a2 a1)), (pow2heapp (length q) (length gv1) (Node x a1 gv5))
(pow2heapp (length q) (length gv1) (Node x a1 a2)), (pow2heapp (length q) (length gv1) (Node x a1 a1)), (pow2heapp (length q) (length gv1) (Node n gv5 gv5)), (pow2heapp (length q) (length gv1) (Node n gv5 a2)), (pow2heapp (length q) (length gv1) (Node n gv5 a1)), (pow2heapp (length q) (length gv1) (Node n a2 gv5)), (pow2heapp (length q) (length gv1) (Node n a2 a2)), (pow2heapp (length q) (length gv1) (Node n a2 a1)), (pow2heapp (length q) (length gv1) (Node n a1 gv5)), (pow2heapp (length q) (length gv1) (Node n a1 a2))
(pow2heapp (length q) (length gv1) (Node n a1 a1)), (pow2heapp (length q) (length gv1) (smash gv5 gv5)), (pow2heapp (length q) (length gv1) (smash gv5 a2)), (pow2heapp (length q) (length gv1) (smash gv5 a1)), (pow2heapp (length q) (length gv1) (smash a2 gv5)), (pow2heapp (length q) (length gv1) (smash a2 a2)), (pow2heapp (length q) (length gv1) (smash a2 a1)), (pow2heapp (length q) (length gv1) (smash a1 gv5)), (pow2heapp (length q) (length gv1) (smash a1 a2)), (pow2heapp (length q) (length gv1) (smash a1 a1))
(pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x gv5), (pow2heapp (length gv1) x a2), (pow2heapp (length gv1) x a1), (pow2heapp (length gv1) x (Node x gv5 gv5)), (pow2heapp (length gv1) x (Node x gv5 a2)), (pow2heapp (length gv1) x (Node x gv5 a1)), (pow2heapp (length gv1) x (Node x a2 gv5)), (pow2heapp (length gv1) x (Node x a2 a2)), (pow2heapp (length gv1) x (Node x a2 a1))
(pow2heapp (length gv1) x (Node x a1 gv5)), (pow2heapp (length gv1) x (Node x a1 a2)), (pow2heapp (length gv1) x (Node x a1 a1)), (pow2heapp (length gv1) x (Node n gv5 gv5)), (pow2heapp (length gv1) x (Node n gv5 a2)), (pow2heapp (length gv1) x (Node n gv5 a1)), (pow2heapp (length gv1) x (Node n a2 gv5)), (pow2heapp (length gv1) x (Node n a2 a2)), (pow2heapp (length gv1) x (Node n a2 a1)), (pow2heapp (length gv1) x (Node n a1 gv5))
(pow2heapp (length gv1) x (Node n a1 a2)), (pow2heapp (length gv1) x (Node n a1 a1)), (pow2heapp (length gv1) x (smash gv5 gv5)), (pow2heapp (length gv1) x (smash gv5 a2)), (pow2heapp (length gv1) x (smash gv5 a1)), (pow2heapp (length gv1) x (smash a2 gv5)), (pow2heapp (length gv1) x (smash a2 a2)), (pow2heapp (length gv1) x (smash a2 a1)), (pow2heapp (length gv1) x (smash a1 gv5)), (pow2heapp (length gv1) x (smash a1 a2))
(pow2heapp (length gv1) x (smash a1 a1)), (pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) n gv5), (pow2heapp (length gv1) n a2), (pow2heapp (length gv1) n a1), (pow2heapp (length gv1) n (Node x gv5 gv5)), (pow2heapp (length gv1) n (Node x gv5 a2)), (pow2heapp (length gv1) n (Node x gv5 a1)), (pow2heapp (length gv1) n (Node x a2 gv5)), (pow2heapp (length gv1) n (Node x a2 a2))
(pow2heapp (length gv1) n (Node x a2 a1)), (pow2heapp (length gv1) n (Node x a1 gv5)), (pow2heapp (length gv1) n (Node x a1 a2)), (pow2heapp (length gv1) n (Node x a1 a1)), (pow2heapp (length gv1) n (Node n gv5 gv5)), (pow2heapp (length gv1) n (Node n gv5 a2)), (pow2heapp (length gv1) n (Node n gv5 a1)), (pow2heapp (length gv1) n (Node n a2 gv5)), (pow2heapp (length gv1) n (Node n a2 a2)), (pow2heapp (length gv1) n (Node n a2 a1))
(pow2heapp (length gv1) n (Node n a1 gv5)), (pow2heapp (length gv1) n (Node n a1 a2)), (pow2heapp (length gv1) n (Node n a1 a1)), (pow2heapp (length gv1) n (smash gv5 gv5)), (pow2heapp (length gv1) n (smash gv5 a2)), (pow2heapp (length gv1) n (smash gv5 a1)), (pow2heapp (length gv1) n (smash a2 gv5)), (pow2heapp (length gv1) n (smash a2 a2)), (pow2heapp (length gv1) n (smash a2 a1)), (pow2heapp (length gv1) n (smash a1 gv5))
(pow2heapp (length gv1) n (smash a1 a2)), (pow2heapp (length gv1) n (smash a1 a1)), (pow2heapp (length gv1) n Leaf), (pow2heapp (length gv1) (find_max' x q) gv5), (pow2heapp (length gv1) (find_max' x q) a2), (pow2heapp (length gv1) (find_max' x q) a1), (pow2heapp (length gv1) (find_max' x q) (Node x gv5 gv5)), (pow2heapp (length gv1) (find_max' x q) (Node x gv5 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x gv5 a1)), (pow2heapp (length gv1) (find_max' x q) (Node x a2 gv5))
(pow2heapp (length gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 gv5)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n gv5 gv5)), (pow2heapp (length gv1) (find_max' x q) (Node n gv5 a2)), (pow2heapp (length gv1) (find_max' x q) (Node n gv5 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 gv5)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 a2))
(pow2heapp (length gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 gv5)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' x q) (smash gv5 gv5)), (pow2heapp (length gv1) (find_max' x q) (smash gv5 a2)), (pow2heapp (length gv1) (find_max' x q) (smash gv5 a1)), (pow2heapp (length gv1) (find_max' x q) (smash a2 gv5)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a1))
(pow2heapp (length gv1) (find_max' x q) (smash a1 gv5)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x q) Leaf), (pow2heapp (length gv1) (find_max' x gv1) gv5), (pow2heapp (length gv1) (find_max' x gv1) a2), (pow2heapp (length gv1) (find_max' x gv1) a1), (pow2heapp (length gv1) (find_max' x gv1) (Node x gv5 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (Node x gv5 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x gv5 a1))
(pow2heapp (length gv1) (find_max' x gv1) (Node x a2 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n gv5 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (Node n gv5 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n gv5 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 gv5))
(pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash gv5 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (smash gv5 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash gv5 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash a2 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (smash a2 a2))
(pow2heapp (length gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 gv5)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (find_max' n q) gv5), (pow2heapp (length gv1) (find_max' n q) a2), (pow2heapp (length gv1) (find_max' n q) a1), (pow2heapp (length gv1) (find_max' n q) (Node x gv5 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node x gv5 a2))
(pow2heapp (length gv1) (find_max' n q) (Node x gv5 a1)), (pow2heapp (length gv1) (find_max' n q) (Node x a2 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n gv5 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node n gv5 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n gv5 a1))
(pow2heapp (length gv1) (find_max' n q) (Node n a2 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 gv5)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' n q) (smash gv5 gv5)), (pow2heapp (length gv1) (find_max' n q) (smash gv5 a2)), (pow2heapp (length gv1) (find_max' n q) (smash gv5 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a2 gv5))
(pow2heapp (length gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a1 gv5)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n q) Leaf), (pow2heapp (length gv1) (find_max' n gv1) gv5), (pow2heapp (length gv1) (find_max' n gv1) a2), (pow2heapp (length gv1) (find_max' n gv1) a1), (pow2heapp (length gv1) (find_max' n gv1) (Node x gv5 gv5))
(pow2heapp (length gv1) (find_max' n gv1) (Node x gv5 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x gv5 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n gv5 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (Node n gv5 a2))
(pow2heapp (length gv1) (find_max' n gv1) (Node n gv5 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (smash gv5 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (smash gv5 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash gv5 a1))
(pow2heapp (length gv1) (find_max' n gv1) (smash a2 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 gv5)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) Leaf), (pow2heapp (length gv1) (length q) gv5), (pow2heapp (length gv1) (length q) a2), (pow2heapp (length gv1) (length q) a1)
(pow2heapp (length gv1) (length q) (Node x gv5 gv5)), (pow2heapp (length gv1) (length q) (Node x gv5 a2)), (pow2heapp (length gv1) (length q) (Node x gv5 a1)), (pow2heapp (length gv1) (length q) (Node x a2 gv5)), (pow2heapp (length gv1) (length q) (Node x a2 a2)), (pow2heapp (length gv1) (length q) (Node x a2 a1)), (pow2heapp (length gv1) (length q) (Node x a1 gv5)), (pow2heapp (length gv1) (length q) (Node x a1 a2)), (pow2heapp (length gv1) (length q) (Node x a1 a1)), (pow2heapp (length gv1) (length q) (Node n gv5 gv5))
(pow2heapp (length gv1) (length q) (Node n gv5 a2)), (pow2heapp (length gv1) (length q) (Node n gv5 a1)), (pow2heapp (length gv1) (length q) (Node n a2 gv5)), (pow2heapp (length gv1) (length q) (Node n a2 a2)), (pow2heapp (length gv1) (length q) (Node n a2 a1)), (pow2heapp (length gv1) (length q) (Node n a1 gv5)), (pow2heapp (length gv1) (length q) (Node n a1 a2)), (pow2heapp (length gv1) (length q) (Node n a1 a1)), (pow2heapp (length gv1) (length q) (smash gv5 gv5)), (pow2heapp (length gv1) (length q) (smash gv5 a2))
(pow2heapp (length gv1) (length q) (smash gv5 a1)), (pow2heapp (length gv1) (length q) (smash a2 gv5)), (pow2heapp (length gv1) (length q) (smash a2 a2)), (pow2heapp (length gv1) (length q) (smash a2 a1)), (pow2heapp (length gv1) (length q) (smash a1 gv5)), (pow2heapp (length gv1) (length q) (smash a1 a2)), (pow2heapp (length gv1) (length q) (smash a1 a1)), (pow2heapp (length gv1) (length q) Leaf), (pow2heapp (length gv1) (length gv1) gv5), (pow2heapp (length gv1) (length gv1) a2)
(pow2heapp (length gv1) (length gv1) a1), (pow2heapp (length gv1) (length gv1) (Node x gv5 gv5)), (pow2heapp (length gv1) (length gv1) (Node x gv5 a2)), (pow2heapp (length gv1) (length gv1) (Node x gv5 a1)), (pow2heapp (length gv1) (length gv1) (Node x a2 gv5)), (pow2heapp (length gv1) (length gv1) (Node x a2 a2)), (pow2heapp (length gv1) (length gv1) (Node x a2 a1)), (pow2heapp (length gv1) (length gv1) (Node x a1 gv5)), (pow2heapp (length gv1) (length gv1) (Node x a1 a2)), (pow2heapp (length gv1) (length gv1) (Node x a1 a1))
(pow2heapp (length gv1) (length gv1) (Node n gv5 gv5)), (pow2heapp (length gv1) (length gv1) (Node n gv5 a2)), (pow2heapp (length gv1) (length gv1) (Node n gv5 a1)), (pow2heapp (length gv1) (length gv1) (Node n a2 gv5)), (pow2heapp (length gv1) (length gv1) (Node n a2 a2)), (pow2heapp (length gv1) (length gv1) (Node n a2 a1)), (pow2heapp (length gv1) (length gv1) (Node n a1 gv5)), (pow2heapp (length gv1) (length gv1) (Node n a1 a2)), (pow2heapp (length gv1) (length gv1) (Node n a1 a1)), (pow2heapp (length gv1) (length gv1) (smash gv5 gv5))
(pow2heapp (length gv1) (length gv1) (smash gv5 a2)), (pow2heapp (length gv1) (length gv1) (smash gv5 a1)), (pow2heapp (length gv1) (length gv1) (smash a2 gv5)), (pow2heapp (length gv1) (length gv1) (smash a2 a2)), (pow2heapp (length gv1) (length gv1) (smash a2 a1)), (pow2heapp (length gv1) (length gv1) (smash a1 gv5)), (pow2heapp (length gv1) (length gv1) (smash a1 a2)), (pow2heapp (length gv1) (length gv1) (smash a1 a1)), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (gv5 :: q))
(Permutation q (gv5 :: gv1)), (Permutation q (a2 :: q)), (Permutation q (a2 :: gv1)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv1)), (Permutation q (merge q q)), (Permutation q (merge q gv1)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (heap_delete_max gv5))
(Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (join q q gv5)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q gv1 gv5)), (Permutation q (join q gv1 a2)), (Permutation q (join q gv1 a1)), (Permutation q (join gv1 q gv5)), (Permutation q (join gv1 q a2))
(Permutation q (join gv1 q a1)), (Permutation q (join gv1 gv1 gv5)), (Permutation q (join gv1 gv1 a2)), (Permutation q (join gv1 gv1 a1)), (Permutation q (insert x q)), (Permutation q (insert x gv1)), (Permutation q (insert n q)), (Permutation q (insert n gv1)), (Permutation q (carry q gv5)), (Permutation q (carry q a2))
(Permutation q (carry q a1)), (Permutation q (carry gv1 gv5)), (Permutation q (carry gv1 a2)), (Permutation q (carry gv1 a1)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q []), (Permutation gv1 (gv5 :: q))
(Permutation gv1 (gv5 :: gv1)), (Permutation gv1 (a2 :: q)), (Permutation gv1 (a2 :: gv1)), (Permutation gv1 (a1 :: q)), (Permutation gv1 (a1 :: gv1)), (Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (heap_delete_max gv5))
(Permutation gv1 (heap_delete_max a2)), (Permutation gv1 (heap_delete_max a1)), (Permutation gv1 (join q q gv5)), (Permutation gv1 (join q q a2)), (Permutation gv1 (join q q a1)), (Permutation gv1 (join q gv1 gv5)), (Permutation gv1 (join q gv1 a2)), (Permutation gv1 (join q gv1 a1)), (Permutation gv1 (join gv1 q gv5)), (Permutation gv1 (join gv1 q a2))
(Permutation gv1 (join gv1 q a1)), (Permutation gv1 (join gv1 gv1 gv5)), (Permutation gv1 (join gv1 gv1 a2)), (Permutation gv1 (join gv1 gv1 a1)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (insert n q)), (Permutation gv1 (insert n gv1)), (Permutation gv1 (carry q gv5)), (Permutation gv1 (carry q a2))
(Permutation gv1 (carry q a1)), (Permutation gv1 (carry gv1 gv5)), (Permutation gv1 (carry gv1 a2)), (Permutation gv1 (carry gv1 a1)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (gv5 :: q) q)
(Permutation (gv5 :: q) gv1), (Permutation (gv5 :: q) (gv5 :: gv1)), (Permutation (gv5 :: q) (a2 :: q)), (Permutation (gv5 :: q) (a2 :: gv1)), (Permutation (gv5 :: q) (a1 :: q)), (Permutation (gv5 :: q) (a1 :: gv1)), (Permutation (gv5 :: q) (merge q q)), (Permutation (gv5 :: q) (merge q gv1)), (Permutation (gv5 :: q) (merge gv1 q)), (Permutation (gv5 :: q) (merge gv1 gv1))
(Permutation (gv5 :: q) (heap_delete_max gv5)), (Permutation (gv5 :: q) (heap_delete_max a2)), (Permutation (gv5 :: q) (heap_delete_max a1)), (Permutation (gv5 :: q) (join q q gv5)), (Permutation (gv5 :: q) (join q q a2)), (Permutation (gv5 :: q) (join q q a1)), (Permutation (gv5 :: q) (join q gv1 gv5)), (Permutation (gv5 :: q) (join q gv1 a2)), (Permutation (gv5 :: q) (join q gv1 a1)), (Permutation (gv5 :: q) (join gv1 q gv5))
(Permutation (gv5 :: q) (join gv1 q a2)), (Permutation (gv5 :: q) (join gv1 q a1)), (Permutation (gv5 :: q) (join gv1 gv1 gv5)), (Permutation (gv5 :: q) (join gv1 gv1 a2)), (Permutation (gv5 :: q) (join gv1 gv1 a1)), (Permutation (gv5 :: q) (insert x q)), (Permutation (gv5 :: q) (insert x gv1)), (Permutation (gv5 :: q) (insert n q)), (Permutation (gv5 :: q) (insert n gv1)), (Permutation (gv5 :: q) (carry q gv5))
(Permutation (gv5 :: q) (carry q a2)), (Permutation (gv5 :: q) (carry q a1)), (Permutation (gv5 :: q) (carry gv1 gv5)), (Permutation (gv5 :: q) (carry gv1 a2)), (Permutation (gv5 :: q) (carry gv1 a1)), (Permutation (gv5 :: q) (q ++ q)), (Permutation (gv5 :: q) (q ++ gv1)), (Permutation (gv5 :: q) (gv1 ++ q)), (Permutation (gv5 :: q) (gv1 ++ gv1)), (Permutation (gv5 :: q) [])
(Permutation (gv5 :: gv1) q), (Permutation (gv5 :: gv1) gv1), (Permutation (gv5 :: gv1) (gv5 :: q)), (Permutation (gv5 :: gv1) (a2 :: q)), (Permutation (gv5 :: gv1) (a2 :: gv1)), (Permutation (gv5 :: gv1) (a1 :: q)), (Permutation (gv5 :: gv1) (a1 :: gv1)), (Permutation (gv5 :: gv1) (merge q q)), (Permutation (gv5 :: gv1) (merge q gv1)), (Permutation (gv5 :: gv1) (merge gv1 q))
(Permutation (gv5 :: gv1) (merge gv1 gv1)), (Permutation (gv5 :: gv1) (heap_delete_max gv5)), (Permutation (gv5 :: gv1) (heap_delete_max a2)), (Permutation (gv5 :: gv1) (heap_delete_max a1)), (Permutation (gv5 :: gv1) (join q q gv5)), (Permutation (gv5 :: gv1) (join q q a2)), (Permutation (gv5 :: gv1) (join q q a1)), (Permutation (gv5 :: gv1) (join q gv1 gv5)), (Permutation (gv5 :: gv1) (join q gv1 a2)), (Permutation (gv5 :: gv1) (join q gv1 a1))
(Permutation (gv5 :: gv1) (join gv1 q gv5)), (Permutation (gv5 :: gv1) (join gv1 q a2)), (Permutation (gv5 :: gv1) (join gv1 q a1)), (Permutation (gv5 :: gv1) (join gv1 gv1 gv5)), (Permutation (gv5 :: gv1) (join gv1 gv1 a2)), (Permutation (gv5 :: gv1) (join gv1 gv1 a1)), (Permutation (gv5 :: gv1) (insert x q)), (Permutation (gv5 :: gv1) (insert x gv1)), (Permutation (gv5 :: gv1) (insert n q)), (Permutation (gv5 :: gv1) (insert n gv1))
(Permutation (gv5 :: gv1) (carry q gv5)), (Permutation (gv5 :: gv1) (carry q a2)), (Permutation (gv5 :: gv1) (carry q a1)), (Permutation (gv5 :: gv1) (carry gv1 gv5)), (Permutation (gv5 :: gv1) (carry gv1 a2)), (Permutation (gv5 :: gv1) (carry gv1 a1)), (Permutation (gv5 :: gv1) (q ++ q)), (Permutation (gv5 :: gv1) (q ++ gv1)), (Permutation (gv5 :: gv1) (gv1 ++ q)), (Permutation (gv5 :: gv1) (gv1 ++ gv1))
(Permutation (gv5 :: gv1) []), (Permutation (a2 :: q) q), (Permutation (a2 :: q) gv1), (Permutation (a2 :: q) (gv5 :: q)), (Permutation (a2 :: q) (gv5 :: gv1)), (Permutation (a2 :: q) (a2 :: gv1)), (Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv1)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv1))
(Permutation (a2 :: q) (merge gv1 q)), (Permutation (a2 :: q) (merge gv1 gv1)), (Permutation (a2 :: q) (heap_delete_max gv5)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (join q q gv5)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1)), (Permutation (a2 :: q) (join q gv1 gv5)), (Permutation (a2 :: q) (join q gv1 a2))
(Permutation (a2 :: q) (join q gv1 a1)), (Permutation (a2 :: q) (join gv1 q gv5)), (Permutation (a2 :: q) (join gv1 q a2)), (Permutation (a2 :: q) (join gv1 q a1)), (Permutation (a2 :: q) (join gv1 gv1 gv5)), (Permutation (a2 :: q) (join gv1 gv1 a2)), (Permutation (a2 :: q) (join gv1 gv1 a1)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv1)), (Permutation (a2 :: q) (insert n q))
(Permutation (a2 :: q) (insert n gv1)), (Permutation (a2 :: q) (carry q gv5)), (Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry gv1 gv5)), (Permutation (a2 :: q) (carry gv1 a2)), (Permutation (a2 :: q) (carry gv1 a1)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv1)), (Permutation (a2 :: q) (gv1 ++ q))
(Permutation (a2 :: q) (gv1 ++ gv1)), (Permutation (a2 :: q) []), (Permutation (a2 :: gv1) q), (Permutation (a2 :: gv1) gv1), (Permutation (a2 :: gv1) (gv5 :: q)), (Permutation (a2 :: gv1) (gv5 :: gv1)), (Permutation (a2 :: gv1) (a2 :: q)), (Permutation (a2 :: gv1) (a1 :: q)), (Permutation (a2 :: gv1) (a1 :: gv1)), (Permutation (a2 :: gv1) (merge q q))
(Permutation (a2 :: gv1) (merge q gv1)), (Permutation (a2 :: gv1) (merge gv1 q)), (Permutation (a2 :: gv1) (merge gv1 gv1)), (Permutation (a2 :: gv1) (heap_delete_max gv5)), (Permutation (a2 :: gv1) (heap_delete_max a2)), (Permutation (a2 :: gv1) (heap_delete_max a1)), (Permutation (a2 :: gv1) (join q q gv5)), (Permutation (a2 :: gv1) (join q q a2)), (Permutation (a2 :: gv1) (join q q a1)), (Permutation (a2 :: gv1) (join q gv1 gv5))
(Permutation (a2 :: gv1) (join q gv1 a2)), (Permutation (a2 :: gv1) (join q gv1 a1)), (Permutation (a2 :: gv1) (join gv1 q gv5)), (Permutation (a2 :: gv1) (join gv1 q a2)), (Permutation (a2 :: gv1) (join gv1 q a1)), (Permutation (a2 :: gv1) (join gv1 gv1 gv5)), (Permutation (a2 :: gv1) (join gv1 gv1 a2)), (Permutation (a2 :: gv1) (join gv1 gv1 a1)), (Permutation (a2 :: gv1) (insert x q)), (Permutation (a2 :: gv1) (insert x gv1))
(Permutation (a2 :: gv1) (insert n q)), (Permutation (a2 :: gv1) (insert n gv1)), (Permutation (a2 :: gv1) (carry q gv5)), (Permutation (a2 :: gv1) (carry q a2)), (Permutation (a2 :: gv1) (carry q a1)), (Permutation (a2 :: gv1) (carry gv1 gv5)), (Permutation (a2 :: gv1) (carry gv1 a2)), (Permutation (a2 :: gv1) (carry gv1 a1)), (Permutation (a2 :: gv1) (q ++ q)), (Permutation (a2 :: gv1) (q ++ gv1))
(Permutation (a2 :: gv1) (gv1 ++ q)), (Permutation (a2 :: gv1) (gv1 ++ gv1)), (Permutation (a2 :: gv1) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv1), (Permutation (a1 :: q) (gv5 :: q)), (Permutation (a1 :: q) (gv5 :: gv1)), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (a2 :: gv1)), (Permutation (a1 :: q) (a1 :: gv1))
(Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv1)), (Permutation (a1 :: q) (merge gv1 q)), (Permutation (a1 :: q) (merge gv1 gv1)), (Permutation (a1 :: q) (heap_delete_max gv5)), (Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (join q q gv5)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1))
(Permutation (a1 :: q) (join q gv1 gv5)), (Permutation (a1 :: q) (join q gv1 a2)), (Permutation (a1 :: q) (join q gv1 a1)), (Permutation (a1 :: q) (join gv1 q gv5)), (Permutation (a1 :: q) (join gv1 q a2)), (Permutation (a1 :: q) (join gv1 q a1)), (Permutation (a1 :: q) (join gv1 gv1 gv5)), (Permutation (a1 :: q) (join gv1 gv1 a2)), (Permutation (a1 :: q) (join gv1 gv1 a1)), (Permutation (a1 :: q) (insert x q))
(Permutation (a1 :: q) (insert x gv1)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert n gv1)), (Permutation (a1 :: q) (carry q gv5)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry gv1 gv5)), (Permutation (a1 :: q) (carry gv1 a2)), (Permutation (a1 :: q) (carry gv1 a1)), (Permutation (a1 :: q) (q ++ q))
(Permutation (a1 :: q) (q ++ gv1)), (Permutation (a1 :: q) (gv1 ++ q)), (Permutation (a1 :: q) (gv1 ++ gv1)), (Permutation (a1 :: q) []), (Permutation (a1 :: gv1) q), (Permutation (a1 :: gv1) gv1), (Permutation (a1 :: gv1) (gv5 :: q)), (Permutation (a1 :: gv1) (gv5 :: gv1)), (Permutation (a1 :: gv1) (a2 :: q)), (Permutation (a1 :: gv1) (a2 :: gv1))
(Permutation (a1 :: gv1) (a1 :: q)), (Permutation (a1 :: gv1) (merge q q)), (Permutation (a1 :: gv1) (merge q gv1)), (Permutation (a1 :: gv1) (merge gv1 q)), (Permutation (a1 :: gv1) (merge gv1 gv1)), (Permutation (a1 :: gv1) (heap_delete_max gv5)), (Permutation (a1 :: gv1) (heap_delete_max a2)), (Permutation (a1 :: gv1) (heap_delete_max a1)), (Permutation (a1 :: gv1) (join q q gv5)), (Permutation (a1 :: gv1) (join q q a2))
(Permutation (a1 :: gv1) (join q q a1)), (Permutation (a1 :: gv1) (join q gv1 gv5)), (Permutation (a1 :: gv1) (join q gv1 a2)), (Permutation (a1 :: gv1) (join q gv1 a1)), (Permutation (a1 :: gv1) (join gv1 q gv5)), (Permutation (a1 :: gv1) (join gv1 q a2)), (Permutation (a1 :: gv1) (join gv1 q a1)), (Permutation (a1 :: gv1) (join gv1 gv1 gv5)), (Permutation (a1 :: gv1) (join gv1 gv1 a2)), (Permutation (a1 :: gv1) (join gv1 gv1 a1))
(Permutation (a1 :: gv1) (insert x q)), (Permutation (a1 :: gv1) (insert x gv1)), (Permutation (a1 :: gv1) (insert n q)), (Permutation (a1 :: gv1) (insert n gv1)), (Permutation (a1 :: gv1) (carry q gv5)), (Permutation (a1 :: gv1) (carry q a2)), (Permutation (a1 :: gv1) (carry q a1)), (Permutation (a1 :: gv1) (carry gv1 gv5)), (Permutation (a1 :: gv1) (carry gv1 a2)), (Permutation (a1 :: gv1) (carry gv1 a1))
(Permutation (a1 :: gv1) (q ++ q)), (Permutation (a1 :: gv1) (q ++ gv1)), (Permutation (a1 :: gv1) (gv1 ++ q)), (Permutation (a1 :: gv1) (gv1 ++ gv1)), (Permutation (a1 :: gv1) []), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) (gv5 :: q)), (Permutation (merge q q) (gv5 :: gv1)), (Permutation (merge q q) (a2 :: q))
(Permutation (merge q q) (a2 :: gv1)), (Permutation (merge q q) (a1 :: q)), (Permutation (merge q q) (a1 :: gv1)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (heap_delete_max gv5)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (join q q gv5))
(Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q gv1 gv5)), (Permutation (merge q q) (join q gv1 a2)), (Permutation (merge q q) (join q gv1 a1)), (Permutation (merge q q) (join gv1 q gv5)), (Permutation (merge q q) (join gv1 q a2)), (Permutation (merge q q) (join gv1 q a1)), (Permutation (merge q q) (join gv1 gv1 gv5)), (Permutation (merge q q) (join gv1 gv1 a2))
(Permutation (merge q q) (join gv1 gv1 a1)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv1)), (Permutation (merge q q) (carry q gv5)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1)), (Permutation (merge q q) (carry gv1 gv5)), (Permutation (merge q q) (carry gv1 a2))
(Permutation (merge q q) (carry gv1 a1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) []), (Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (gv5 :: q)), (Permutation (merge q gv1) (gv5 :: gv1))
(Permutation (merge q gv1) (a2 :: q)), (Permutation (merge q gv1) (a2 :: gv1)), (Permutation (merge q gv1) (a1 :: q)), (Permutation (merge q gv1) (a1 :: gv1)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (heap_delete_max gv5)), (Permutation (merge q gv1) (heap_delete_max a2)), (Permutation (merge q gv1) (heap_delete_max a1))
(Permutation (merge q gv1) (join q q gv5)), (Permutation (merge q gv1) (join q q a2)), (Permutation (merge q gv1) (join q q a1)), (Permutation (merge q gv1) (join q gv1 gv5)), (Permutation (merge q gv1) (join q gv1 a2)), (Permutation (merge q gv1) (join q gv1 a1)), (Permutation (merge q gv1) (join gv1 q gv5)), (Permutation (merge q gv1) (join gv1 q a2)), (Permutation (merge q gv1) (join gv1 q a1)), (Permutation (merge q gv1) (join gv1 gv1 gv5))
(Permutation (merge q gv1) (join gv1 gv1 a2)), (Permutation (merge q gv1) (join gv1 gv1 a1)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1)), (Permutation (merge q gv1) (insert n q)), (Permutation (merge q gv1) (insert n gv1)), (Permutation (merge q gv1) (carry q gv5)), (Permutation (merge q gv1) (carry q a2)), (Permutation (merge q gv1) (carry q a1)), (Permutation (merge q gv1) (carry gv1 gv5))
(Permutation (merge q gv1) (carry gv1 a2)), (Permutation (merge q gv1) (carry gv1 a1)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) []), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (gv5 :: q))
(Permutation (merge gv1 q) (gv5 :: gv1)), (Permutation (merge gv1 q) (a2 :: q)), (Permutation (merge gv1 q) (a2 :: gv1)), (Permutation (merge gv1 q) (a1 :: q)), (Permutation (merge gv1 q) (a1 :: gv1)), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (heap_delete_max gv5)), (Permutation (merge gv1 q) (heap_delete_max a2))
(Permutation (merge gv1 q) (heap_delete_max a1)), (Permutation (merge gv1 q) (join q q gv5)), (Permutation (merge gv1 q) (join q q a2)), (Permutation (merge gv1 q) (join q q a1)), (Permutation (merge gv1 q) (join q gv1 gv5)), (Permutation (merge gv1 q) (join q gv1 a2)), (Permutation (merge gv1 q) (join q gv1 a1)), (Permutation (merge gv1 q) (join gv1 q gv5)), (Permutation (merge gv1 q) (join gv1 q a2)), (Permutation (merge gv1 q) (join gv1 q a1))
(Permutation (merge gv1 q) (join gv1 gv1 gv5)), (Permutation (merge gv1 q) (join gv1 gv1 a2)), (Permutation (merge gv1 q) (join gv1 gv1 a1)), (Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1)), (Permutation (merge gv1 q) (insert n q)), (Permutation (merge gv1 q) (insert n gv1)), (Permutation (merge gv1 q) (carry q gv5)), (Permutation (merge gv1 q) (carry q a2)), (Permutation (merge gv1 q) (carry q a1))
(Permutation (merge gv1 q) (carry gv1 gv5)), (Permutation (merge gv1 q) (carry gv1 a2)), (Permutation (merge gv1 q) (carry gv1 a1)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q)), (Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1)
(Permutation (merge gv1 gv1) (gv5 :: q)), (Permutation (merge gv1 gv1) (gv5 :: gv1)), (Permutation (merge gv1 gv1) (a2 :: q)), (Permutation (merge gv1 gv1) (a2 :: gv1)), (Permutation (merge gv1 gv1) (a1 :: q)), (Permutation (merge gv1 gv1) (a1 :: gv1)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (heap_delete_max gv5))
(Permutation (merge gv1 gv1) (heap_delete_max a2)), (Permutation (merge gv1 gv1) (heap_delete_max a1)), (Permutation (merge gv1 gv1) (join q q gv5)), (Permutation (merge gv1 gv1) (join q q a2)), (Permutation (merge gv1 gv1) (join q q a1)), (Permutation (merge gv1 gv1) (join q gv1 gv5)), (Permutation (merge gv1 gv1) (join q gv1 a2)), (Permutation (merge gv1 gv1) (join q gv1 a1)), (Permutation (merge gv1 gv1) (join gv1 q gv5)), (Permutation (merge gv1 gv1) (join gv1 q a2))
(Permutation (merge gv1 gv1) (join gv1 q a1)), (Permutation (merge gv1 gv1) (join gv1 gv1 gv5)), (Permutation (merge gv1 gv1) (join gv1 gv1 a2)), (Permutation (merge gv1 gv1) (join gv1 gv1 a1)), (Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (insert n q)), (Permutation (merge gv1 gv1) (insert n gv1)), (Permutation (merge gv1 gv1) (carry q gv5)), (Permutation (merge gv1 gv1) (carry q a2))
(Permutation (merge gv1 gv1) (carry q a1)), (Permutation (merge gv1 gv1) (carry gv1 gv5)), (Permutation (merge gv1 gv1) (carry gv1 a2)), (Permutation (merge gv1 gv1) (carry gv1 a1)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (heap_delete_max gv5) q)
(Permutation (heap_delete_max gv5) gv1), (Permutation (heap_delete_max gv5) (gv5 :: q)), (Permutation (heap_delete_max gv5) (gv5 :: gv1)), (Permutation (heap_delete_max gv5) (a2 :: q)), (Permutation (heap_delete_max gv5) (a2 :: gv1)), (Permutation (heap_delete_max gv5) (a1 :: q)), (Permutation (heap_delete_max gv5) (a1 :: gv1)), (Permutation (heap_delete_max gv5) (merge q q)), (Permutation (heap_delete_max gv5) (merge q gv1)), (Permutation (heap_delete_max gv5) (merge gv1 q))
(Permutation (heap_delete_max gv5) (merge gv1 gv1)), (Permutation (heap_delete_max gv5) (heap_delete_max a2)), (Permutation (heap_delete_max gv5) (heap_delete_max a1)), (Permutation (heap_delete_max gv5) (join q q gv5)), (Permutation (heap_delete_max gv5) (join q q a2)), (Permutation (heap_delete_max gv5) (join q q a1)), (Permutation (heap_delete_max gv5) (join q gv1 gv5)), (Permutation (heap_delete_max gv5) (join q gv1 a2)), (Permutation (heap_delete_max gv5) (join q gv1 a1)), (Permutation (heap_delete_max gv5) (join gv1 q gv5))
(Permutation (heap_delete_max gv5) (join gv1 q a2)), (Permutation (heap_delete_max gv5) (join gv1 q a1)), (Permutation (heap_delete_max gv5) (join gv1 gv1 gv5)), (Permutation (heap_delete_max gv5) (join gv1 gv1 a2)), (Permutation (heap_delete_max gv5) (join gv1 gv1 a1)), (Permutation (heap_delete_max gv5) (insert x q)), (Permutation (heap_delete_max gv5) (insert x gv1)), (Permutation (heap_delete_max gv5) (insert n q)), (Permutation (heap_delete_max gv5) (insert n gv1)), (Permutation (heap_delete_max gv5) (carry q gv5))
(Permutation (heap_delete_max gv5) (carry q a2)), (Permutation (heap_delete_max gv5) (carry q a1)), (Permutation (heap_delete_max gv5) (carry gv1 gv5)), (Permutation (heap_delete_max gv5) (carry gv1 a2)), (Permutation (heap_delete_max gv5) (carry gv1 a1)), (Permutation (heap_delete_max gv5) (q ++ q)), (Permutation (heap_delete_max gv5) (q ++ gv1)), (Permutation (heap_delete_max gv5) (gv1 ++ q)), (Permutation (heap_delete_max gv5) (gv1 ++ gv1)), (Permutation (heap_delete_max gv5) [])
(Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) gv1), (Permutation (heap_delete_max a2) (gv5 :: q)), (Permutation (heap_delete_max a2) (gv5 :: gv1)), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv1)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv1)), (Permutation (heap_delete_max a2) (merge q q)), (Permutation (heap_delete_max a2) (merge q gv1))
(Permutation (heap_delete_max a2) (merge gv1 q)), (Permutation (heap_delete_max a2) (merge gv1 gv1)), (Permutation (heap_delete_max a2) (heap_delete_max gv5)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join q q gv5)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q gv1 gv5)), (Permutation (heap_delete_max a2) (join q gv1 a2)), (Permutation (heap_delete_max a2) (join q gv1 a1))
(Permutation (heap_delete_max a2) (join gv1 q gv5)), (Permutation (heap_delete_max a2) (join gv1 q a2)), (Permutation (heap_delete_max a2) (join gv1 q a1)), (Permutation (heap_delete_max a2) (join gv1 gv1 gv5)), (Permutation (heap_delete_max a2) (join gv1 gv1 a2)), (Permutation (heap_delete_max a2) (join gv1 gv1 a1)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv1)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv1))
(Permutation (heap_delete_max a2) (carry q gv5)), (Permutation (heap_delete_max a2) (carry q a2)), (Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry gv1 gv5)), (Permutation (heap_delete_max a2) (carry gv1 a2)), (Permutation (heap_delete_max a2) (carry gv1 a1)), (Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv1)), (Permutation (heap_delete_max a2) (gv1 ++ q)), (Permutation (heap_delete_max a2) (gv1 ++ gv1))
(Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv1), (Permutation (heap_delete_max a1) (gv5 :: q)), (Permutation (heap_delete_max a1) (gv5 :: gv1)), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv1)), (Permutation (heap_delete_max a1) (a1 :: q)), (Permutation (heap_delete_max a1) (a1 :: gv1)), (Permutation (heap_delete_max a1) (merge q q))
(Permutation (heap_delete_max a1) (merge q gv1)), (Permutation (heap_delete_max a1) (merge gv1 q)), (Permutation (heap_delete_max a1) (merge gv1 gv1)), (Permutation (heap_delete_max a1) (heap_delete_max gv5)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join q q gv5)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q gv1 gv5)), (Permutation (heap_delete_max a1) (join q gv1 a2))
(Permutation (heap_delete_max a1) (join q gv1 a1)), (Permutation (heap_delete_max a1) (join gv1 q gv5)), (Permutation (heap_delete_max a1) (join gv1 q a2)), (Permutation (heap_delete_max a1) (join gv1 q a1)), (Permutation (heap_delete_max a1) (join gv1 gv1 gv5)), (Permutation (heap_delete_max a1) (join gv1 gv1 a2)), (Permutation (heap_delete_max a1) (join gv1 gv1 a1)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv1)), (Permutation (heap_delete_max a1) (insert n q))
(Permutation (heap_delete_max a1) (insert n gv1)), (Permutation (heap_delete_max a1) (carry q gv5)), (Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1)), (Permutation (heap_delete_max a1) (carry gv1 gv5)), (Permutation (heap_delete_max a1) (carry gv1 a2)), (Permutation (heap_delete_max a1) (carry gv1 a1)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv1)), (Permutation (heap_delete_max a1) (gv1 ++ q))
(Permutation (heap_delete_max a1) (gv1 ++ gv1)), (Permutation (heap_delete_max a1) []), (Permutation (join q q gv5) q), (Permutation (join q q gv5) gv1), (Permutation (join q q gv5) (gv5 :: q)), (Permutation (join q q gv5) (gv5 :: gv1)), (Permutation (join q q gv5) (a2 :: q)), (Permutation (join q q gv5) (a2 :: gv1)), (Permutation (join q q gv5) (a1 :: q)), (Permutation (join q q gv5) (a1 :: gv1))
(Permutation (join q q gv5) (merge q q)), (Permutation (join q q gv5) (merge q gv1)), (Permutation (join q q gv5) (merge gv1 q)), (Permutation (join q q gv5) (merge gv1 gv1)), (Permutation (join q q gv5) (heap_delete_max gv5)), (Permutation (join q q gv5) (heap_delete_max a2)), (Permutation (join q q gv5) (heap_delete_max a1)), (Permutation (join q q gv5) (join q q a2)), (Permutation (join q q gv5) (join q q a1)), (Permutation (join q q gv5) (join q gv1 gv5))
(Permutation (join q q gv5) (join q gv1 a2)), (Permutation (join q q gv5) (join q gv1 a1)), (Permutation (join q q gv5) (join gv1 q gv5)), (Permutation (join q q gv5) (join gv1 q a2)), (Permutation (join q q gv5) (join gv1 q a1)), (Permutation (join q q gv5) (join gv1 gv1 gv5)), (Permutation (join q q gv5) (join gv1 gv1 a2)), (Permutation (join q q gv5) (join gv1 gv1 a1)), (Permutation (join q q gv5) (insert x q)), (Permutation (join q q gv5) (insert x gv1))
(Permutation (join q q gv5) (insert n q)), (Permutation (join q q gv5) (insert n gv1)), (Permutation (join q q gv5) (carry q gv5)), (Permutation (join q q gv5) (carry q a2)), (Permutation (join q q gv5) (carry q a1)), (Permutation (join q q gv5) (carry gv1 gv5)), (Permutation (join q q gv5) (carry gv1 a2)), (Permutation (join q q gv5) (carry gv1 a1)), (Permutation (join q q gv5) (q ++ q)), (Permutation (join q q gv5) (q ++ gv1))
(Permutation (join q q gv5) (gv1 ++ q)), (Permutation (join q q gv5) (gv1 ++ gv1)), (Permutation (join q q gv5) []), (Permutation (join q q a2) q), (Permutation (join q q a2) gv1), (Permutation (join q q a2) (gv5 :: q)), (Permutation (join q q a2) (gv5 :: gv1)), (Permutation (join q q a2) (a2 :: q)), (Permutation (join q q a2) (a2 :: gv1)), (Permutation (join q q a2) (a1 :: q))
(Permutation (join q q a2) (a1 :: gv1)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv1)), (Permutation (join q q a2) (merge gv1 q)), (Permutation (join q q a2) (merge gv1 gv1)), (Permutation (join q q a2) (heap_delete_max gv5)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (join q q gv5)), (Permutation (join q q a2) (join q q a1))
(Permutation (join q q a2) (join q gv1 gv5)), (Permutation (join q q a2) (join q gv1 a2)), (Permutation (join q q a2) (join q gv1 a1)), (Permutation (join q q a2) (join gv1 q gv5)), (Permutation (join q q a2) (join gv1 q a2)), (Permutation (join q q a2) (join gv1 q a1)), (Permutation (join q q a2) (join gv1 gv1 gv5)), (Permutation (join q q a2) (join gv1 gv1 a2)), (Permutation (join q q a2) (join gv1 gv1 a1)), (Permutation (join q q a2) (insert x q))
(Permutation (join q q a2) (insert x gv1)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv1)), (Permutation (join q q a2) (carry q gv5)), (Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry gv1 gv5)), (Permutation (join q q a2) (carry gv1 a2)), (Permutation (join q q a2) (carry gv1 a1)), (Permutation (join q q a2) (q ++ q))
(Permutation (join q q a2) (q ++ gv1)), (Permutation (join q q a2) (gv1 ++ q)), (Permutation (join q q a2) (gv1 ++ gv1)), (Permutation (join q q a2) []), (Permutation (join q q a1) q), (Permutation (join q q a1) gv1), (Permutation (join q q a1) (gv5 :: q)), (Permutation (join q q a1) (gv5 :: gv1)), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv1))
(Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv1)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (merge q gv1)), (Permutation (join q q a1) (merge gv1 q)), (Permutation (join q q a1) (merge gv1 gv1)), (Permutation (join q q a1) (heap_delete_max gv5)), (Permutation (join q q a1) (heap_delete_max a2)), (Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (join q q gv5))
(Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q gv1 gv5)), (Permutation (join q q a1) (join q gv1 a2)), (Permutation (join q q a1) (join q gv1 a1)), (Permutation (join q q a1) (join gv1 q gv5)), (Permutation (join q q a1) (join gv1 q a2)), (Permutation (join q q a1) (join gv1 q a1)), (Permutation (join q q a1) (join gv1 gv1 gv5)), (Permutation (join q q a1) (join gv1 gv1 a2)), (Permutation (join q q a1) (join gv1 gv1 a1))
(Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert x gv1)), (Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert n gv1)), (Permutation (join q q a1) (carry q gv5)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry gv1 gv5)), (Permutation (join q q a1) (carry gv1 a2)), (Permutation (join q q a1) (carry gv1 a1))
(Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) (q ++ gv1)), (Permutation (join q q a1) (gv1 ++ q)), (Permutation (join q q a1) (gv1 ++ gv1)), (Permutation (join q q a1) []), (Permutation (join q gv1 gv5) q), (Permutation (join q gv1 gv5) gv1), (Permutation (join q gv1 gv5) (gv5 :: q)), (Permutation (join q gv1 gv5) (gv5 :: gv1)), (Permutation (join q gv1 gv5) (a2 :: q))
(Permutation (join q gv1 gv5) (a2 :: gv1)), (Permutation (join q gv1 gv5) (a1 :: q)), (Permutation (join q gv1 gv5) (a1 :: gv1)), (Permutation (join q gv1 gv5) (merge q q)), (Permutation (join q gv1 gv5) (merge q gv1)), (Permutation (join q gv1 gv5) (merge gv1 q)), (Permutation (join q gv1 gv5) (merge gv1 gv1)), (Permutation (join q gv1 gv5) (heap_delete_max gv5)), (Permutation (join q gv1 gv5) (heap_delete_max a2)), (Permutation (join q gv1 gv5) (heap_delete_max a1))
(Permutation (join q gv1 gv5) (join q q gv5)), (Permutation (join q gv1 gv5) (join q q a2)), (Permutation (join q gv1 gv5) (join q q a1)), (Permutation (join q gv1 gv5) (join q gv1 a2)), (Permutation (join q gv1 gv5) (join q gv1 a1)), (Permutation (join q gv1 gv5) (join gv1 q gv5)), (Permutation (join q gv1 gv5) (join gv1 q a2)), (Permutation (join q gv1 gv5) (join gv1 q a1)), (Permutation (join q gv1 gv5) (join gv1 gv1 gv5)), (Permutation (join q gv1 gv5) (join gv1 gv1 a2))
(Permutation (join q gv1 gv5) (join gv1 gv1 a1)), (Permutation (join q gv1 gv5) (insert x q)), (Permutation (join q gv1 gv5) (insert x gv1)), (Permutation (join q gv1 gv5) (insert n q)), (Permutation (join q gv1 gv5) (insert n gv1)), (Permutation (join q gv1 gv5) (carry q gv5)), (Permutation (join q gv1 gv5) (carry q a2)), (Permutation (join q gv1 gv5) (carry q a1)), (Permutation (join q gv1 gv5) (carry gv1 gv5)), (Permutation (join q gv1 gv5) (carry gv1 a2))
(Permutation (join q gv1 gv5) (carry gv1 a1)), (Permutation (join q gv1 gv5) (q ++ q)), (Permutation (join q gv1 gv5) (q ++ gv1)), (Permutation (join q gv1 gv5) (gv1 ++ q)), (Permutation (join q gv1 gv5) (gv1 ++ gv1)), (Permutation (join q gv1 gv5) []), (Permutation (join q gv1 a2) q), (Permutation (join q gv1 a2) gv1), (Permutation (join q gv1 a2) (gv5 :: q)), (Permutation (join q gv1 a2) (gv5 :: gv1))
(Permutation (join q gv1 a2) (a2 :: q)), (Permutation (join q gv1 a2) (a2 :: gv1)), (Permutation (join q gv1 a2) (a1 :: q)), (Permutation (join q gv1 a2) (a1 :: gv1)), (Permutation (join q gv1 a2) (merge q q)), (Permutation (join q gv1 a2) (merge q gv1)), (Permutation (join q gv1 a2) (merge gv1 q)), (Permutation (join q gv1 a2) (merge gv1 gv1)), (Permutation (join q gv1 a2) (heap_delete_max gv5)), (Permutation (join q gv1 a2) (heap_delete_max a2))
(Permutation (join q gv1 a2) (heap_delete_max a1)), (Permutation (join q gv1 a2) (join q q gv5)), (Permutation (join q gv1 a2) (join q q a2)), (Permutation (join q gv1 a2) (join q q a1)), (Permutation (join q gv1 a2) (join q gv1 gv5)), (Permutation (join q gv1 a2) (join q gv1 a1)), (Permutation (join q gv1 a2) (join gv1 q gv5)), (Permutation (join q gv1 a2) (join gv1 q a2)), (Permutation (join q gv1 a2) (join gv1 q a1)), (Permutation (join q gv1 a2) (join gv1 gv1 gv5))
(Permutation (join q gv1 a2) (join gv1 gv1 a2)), (Permutation (join q gv1 a2) (join gv1 gv1 a1)), (Permutation (join q gv1 a2) (insert x q)), (Permutation (join q gv1 a2) (insert x gv1)), (Permutation (join q gv1 a2) (insert n q)), (Permutation (join q gv1 a2) (insert n gv1)), (Permutation (join q gv1 a2) (carry q gv5)), (Permutation (join q gv1 a2) (carry q a2)), (Permutation (join q gv1 a2) (carry q a1)), (Permutation (join q gv1 a2) (carry gv1 gv5))
(Permutation (join q gv1 a2) (carry gv1 a2)), (Permutation (join q gv1 a2) (carry gv1 a1)), (Permutation (join q gv1 a2) (q ++ q)), (Permutation (join q gv1 a2) (q ++ gv1)), (Permutation (join q gv1 a2) (gv1 ++ q)), (Permutation (join q gv1 a2) (gv1 ++ gv1)), (Permutation (join q gv1 a2) []), (Permutation (join q gv1 a1) q), (Permutation (join q gv1 a1) gv1), (Permutation (join q gv1 a1) (gv5 :: q))
(Permutation (join q gv1 a1) (gv5 :: gv1)), (Permutation (join q gv1 a1) (a2 :: q)), (Permutation (join q gv1 a1) (a2 :: gv1)), (Permutation (join q gv1 a1) (a1 :: q)), (Permutation (join q gv1 a1) (a1 :: gv1)), (Permutation (join q gv1 a1) (merge q q)), (Permutation (join q gv1 a1) (merge q gv1)), (Permutation (join q gv1 a1) (merge gv1 q)), (Permutation (join q gv1 a1) (merge gv1 gv1)), (Permutation (join q gv1 a1) (heap_delete_max gv5))
(Permutation (join q gv1 a1) (heap_delete_max a2)), (Permutation (join q gv1 a1) (heap_delete_max a1)), (Permutation (join q gv1 a1) (join q q gv5)), (Permutation (join q gv1 a1) (join q q a2)), (Permutation (join q gv1 a1) (join q q a1)), (Permutation (join q gv1 a1) (join q gv1 gv5)), (Permutation (join q gv1 a1) (join q gv1 a2)), (Permutation (join q gv1 a1) (join gv1 q gv5)), (Permutation (join q gv1 a1) (join gv1 q a2)), (Permutation (join q gv1 a1) (join gv1 q a1))
(Permutation (join q gv1 a1) (join gv1 gv1 gv5)), (Permutation (join q gv1 a1) (join gv1 gv1 a2)), (Permutation (join q gv1 a1) (join gv1 gv1 a1)), (Permutation (join q gv1 a1) (insert x q)), (Permutation (join q gv1 a1) (insert x gv1)), (Permutation (join q gv1 a1) (insert n q)), (Permutation (join q gv1 a1) (insert n gv1)), (Permutation (join q gv1 a1) (carry q gv5)), (Permutation (join q gv1 a1) (carry q a2)), (Permutation (join q gv1 a1) (carry q a1))
(Permutation (join q gv1 a1) (carry gv1 gv5)), (Permutation (join q gv1 a1) (carry gv1 a2)), (Permutation (join q gv1 a1) (carry gv1 a1)), (Permutation (join q gv1 a1) (q ++ q)), (Permutation (join q gv1 a1) (q ++ gv1)), (Permutation (join q gv1 a1) (gv1 ++ q)), (Permutation (join q gv1 a1) (gv1 ++ gv1)), (Permutation (join q gv1 a1) []), (Permutation (join gv1 q gv5) q), (Permutation (join gv1 q gv5) gv1)
(Permutation (join gv1 q gv5) (gv5 :: q)), (Permutation (join gv1 q gv5) (gv5 :: gv1)), (Permutation (join gv1 q gv5) (a2 :: q)), (Permutation (join gv1 q gv5) (a2 :: gv1)), (Permutation (join gv1 q gv5) (a1 :: q)), (Permutation (join gv1 q gv5) (a1 :: gv1)), (Permutation (join gv1 q gv5) (merge q q)), (Permutation (join gv1 q gv5) (merge q gv1)), (Permutation (join gv1 q gv5) (merge gv1 q)), (Permutation (join gv1 q gv5) (merge gv1 gv1))
(Permutation (join gv1 q gv5) (heap_delete_max gv5)), (Permutation (join gv1 q gv5) (heap_delete_max a2)), (Permutation (join gv1 q gv5) (heap_delete_max a1)), (Permutation (join gv1 q gv5) (join q q gv5)), (Permutation (join gv1 q gv5) (join q q a2)), (Permutation (join gv1 q gv5) (join q q a1)), (Permutation (join gv1 q gv5) (join q gv1 gv5)), (Permutation (join gv1 q gv5) (join q gv1 a2)), (Permutation (join gv1 q gv5) (join q gv1 a1)), (Permutation (join gv1 q gv5) (join gv1 q a2))
(Permutation (join gv1 q gv5) (join gv1 q a1)), (Permutation (join gv1 q gv5) (join gv1 gv1 gv5)), (Permutation (join gv1 q gv5) (join gv1 gv1 a2)), (Permutation (join gv1 q gv5) (join gv1 gv1 a1)), (Permutation (join gv1 q gv5) (insert x q)), (Permutation (join gv1 q gv5) (insert x gv1)), (Permutation (join gv1 q gv5) (insert n q)), (Permutation (join gv1 q gv5) (insert n gv1)), (Permutation (join gv1 q gv5) (carry q gv5)), (Permutation (join gv1 q gv5) (carry q a2))
(Permutation (join gv1 q gv5) (carry q a1)), (Permutation (join gv1 q gv5) (carry gv1 gv5)), (Permutation (join gv1 q gv5) (carry gv1 a2)), (Permutation (join gv1 q gv5) (carry gv1 a1)), (Permutation (join gv1 q gv5) (q ++ q)), (Permutation (join gv1 q gv5) (q ++ gv1)), (Permutation (join gv1 q gv5) (gv1 ++ q)), (Permutation (join gv1 q gv5) (gv1 ++ gv1)), (Permutation (join gv1 q gv5) []), (Permutation (join gv1 q a2) q)
(Permutation (join gv1 q a2) gv1), (Permutation (join gv1 q a2) (gv5 :: q)), (Permutation (join gv1 q a2) (gv5 :: gv1)), (Permutation (join gv1 q a2) (a2 :: q)), (Permutation (join gv1 q a2) (a2 :: gv1)), (Permutation (join gv1 q a2) (a1 :: q)), (Permutation (join gv1 q a2) (a1 :: gv1)), (Permutation (join gv1 q a2) (merge q q)), (Permutation (join gv1 q a2) (merge q gv1)), (Permutation (join gv1 q a2) (merge gv1 q))
(Permutation (join gv1 q a2) (merge gv1 gv1)), (Permutation (join gv1 q a2) (heap_delete_max gv5)), (Permutation (join gv1 q a2) (heap_delete_max a2)), (Permutation (join gv1 q a2) (heap_delete_max a1)), (Permutation (join gv1 q a2) (join q q gv5)), (Permutation (join gv1 q a2) (join q q a2)), (Permutation (join gv1 q a2) (join q q a1)), (Permutation (join gv1 q a2) (join q gv1 gv5)), (Permutation (join gv1 q a2) (join q gv1 a2)), (Permutation (join gv1 q a2) (join q gv1 a1))
(Permutation (join gv1 q a2) (join gv1 q gv5)), (Permutation (join gv1 q a2) (join gv1 q a1)), (Permutation (join gv1 q a2) (join gv1 gv1 gv5)), (Permutation (join gv1 q a2) (join gv1 gv1 a2)), (Permutation (join gv1 q a2) (join gv1 gv1 a1)), (Permutation (join gv1 q a2) (insert x q)), (Permutation (join gv1 q a2) (insert x gv1)), (Permutation (join gv1 q a2) (insert n q)), (Permutation (join gv1 q a2) (insert n gv1)), (Permutation (join gv1 q a2) (carry q gv5))
(Permutation (join gv1 q a2) (carry q a2)), (Permutation (join gv1 q a2) (carry q a1)), (Permutation (join gv1 q a2) (carry gv1 gv5)), (Permutation (join gv1 q a2) (carry gv1 a2)), (Permutation (join gv1 q a2) (carry gv1 a1)), (Permutation (join gv1 q a2) (q ++ q)), (Permutation (join gv1 q a2) (q ++ gv1)), (Permutation (join gv1 q a2) (gv1 ++ q)), (Permutation (join gv1 q a2) (gv1 ++ gv1)), (Permutation (join gv1 q a2) [])
(Permutation (join gv1 q a1) q), (Permutation (join gv1 q a1) gv1), (Permutation (join gv1 q a1) (gv5 :: q)), (Permutation (join gv1 q a1) (gv5 :: gv1)), (Permutation (join gv1 q a1) (a2 :: q)), (Permutation (join gv1 q a1) (a2 :: gv1)), (Permutation (join gv1 q a1) (a1 :: q)), (Permutation (join gv1 q a1) (a1 :: gv1)), (Permutation (join gv1 q a1) (merge q q)), (Permutation (join gv1 q a1) (merge q gv1))
(Permutation (join gv1 q a1) (merge gv1 q)), (Permutation (join gv1 q a1) (merge gv1 gv1)), (Permutation (join gv1 q a1) (heap_delete_max gv5)), (Permutation (join gv1 q a1) (heap_delete_max a2)), (Permutation (join gv1 q a1) (heap_delete_max a1)), (Permutation (join gv1 q a1) (join q q gv5)), (Permutation (join gv1 q a1) (join q q a2)), (Permutation (join gv1 q a1) (join q q a1)), (Permutation (join gv1 q a1) (join q gv1 gv5)), (Permutation (join gv1 q a1) (join q gv1 a2))
(Permutation (join gv1 q a1) (join q gv1 a1)), (Permutation (join gv1 q a1) (join gv1 q gv5)), (Permutation (join gv1 q a1) (join gv1 q a2)), (Permutation (join gv1 q a1) (join gv1 gv1 gv5)), (Permutation (join gv1 q a1) (join gv1 gv1 a2)), (Permutation (join gv1 q a1) (join gv1 gv1 a1)), (Permutation (join gv1 q a1) (insert x q)), (Permutation (join gv1 q a1) (insert x gv1)), (Permutation (join gv1 q a1) (insert n q)), (Permutation (join gv1 q a1) (insert n gv1))
(Permutation (join gv1 q a1) (carry q gv5)), (Permutation (join gv1 q a1) (carry q a2)), (Permutation (join gv1 q a1) (carry q a1)), (Permutation (join gv1 q a1) (carry gv1 gv5)), (Permutation (join gv1 q a1) (carry gv1 a2)), (Permutation (join gv1 q a1) (carry gv1 a1)), (Permutation (join gv1 q a1) (q ++ q)), (Permutation (join gv1 q a1) (q ++ gv1)), (Permutation (join gv1 q a1) (gv1 ++ q)), (Permutation (join gv1 q a1) (gv1 ++ gv1))
(Permutation (join gv1 q a1) []), (Permutation (join gv1 gv1 gv5) q), (Permutation (join gv1 gv1 gv5) gv1), (Permutation (join gv1 gv1 gv5) (gv5 :: q)), (Permutation (join gv1 gv1 gv5) (gv5 :: gv1)), (Permutation (join gv1 gv1 gv5) (a2 :: q)), (Permutation (join gv1 gv1 gv5) (a2 :: gv1)), (Permutation (join gv1 gv1 gv5) (a1 :: q)), (Permutation (join gv1 gv1 gv5) (a1 :: gv1)), (Permutation (join gv1 gv1 gv5) (merge q q))
(Permutation (join gv1 gv1 gv5) (merge q gv1)), (Permutation (join gv1 gv1 gv5) (merge gv1 q)), (Permutation (join gv1 gv1 gv5) (merge gv1 gv1)), (Permutation (join gv1 gv1 gv5) (heap_delete_max gv5)), (Permutation (join gv1 gv1 gv5) (heap_delete_max a2)), (Permutation (join gv1 gv1 gv5) (heap_delete_max a1)), (Permutation (join gv1 gv1 gv5) (join q q gv5)), (Permutation (join gv1 gv1 gv5) (join q q a2)), (Permutation (join gv1 gv1 gv5) (join q q a1)), (Permutation (join gv1 gv1 gv5) (join q gv1 gv5))
(Permutation (join gv1 gv1 gv5) (join q gv1 a2)), (Permutation (join gv1 gv1 gv5) (join q gv1 a1)), (Permutation (join gv1 gv1 gv5) (join gv1 q gv5)), (Permutation (join gv1 gv1 gv5) (join gv1 q a2)), (Permutation (join gv1 gv1 gv5) (join gv1 q a1)), (Permutation (join gv1 gv1 gv5) (join gv1 gv1 a2)), (Permutation (join gv1 gv1 gv5) (join gv1 gv1 a1)), (Permutation (join gv1 gv1 gv5) (insert x q)), (Permutation (join gv1 gv1 gv5) (insert x gv1)), (Permutation (join gv1 gv1 gv5) (insert n q))
(Permutation (join gv1 gv1 gv5) (insert n gv1)), (Permutation (join gv1 gv1 gv5) (carry q gv5)), (Permutation (join gv1 gv1 gv5) (carry q a2)), (Permutation (join gv1 gv1 gv5) (carry q a1)), (Permutation (join gv1 gv1 gv5) (carry gv1 gv5)), (Permutation (join gv1 gv1 gv5) (carry gv1 a2)), (Permutation (join gv1 gv1 gv5) (carry gv1 a1)), (Permutation (join gv1 gv1 gv5) (q ++ q)), (Permutation (join gv1 gv1 gv5) (q ++ gv1)), (Permutation (join gv1 gv1 gv5) (gv1 ++ q))
(Permutation (join gv1 gv1 gv5) (gv1 ++ gv1)), (Permutation (join gv1 gv1 gv5) []), (Permutation (join gv1 gv1 a2) q), (Permutation (join gv1 gv1 a2) gv1), (Permutation (join gv1 gv1 a2) (gv5 :: q)), (Permutation (join gv1 gv1 a2) (gv5 :: gv1)), (Permutation (join gv1 gv1 a2) (a2 :: q)), (Permutation (join gv1 gv1 a2) (a2 :: gv1)), (Permutation (join gv1 gv1 a2) (a1 :: q)), (Permutation (join gv1 gv1 a2) (a1 :: gv1))
(Permutation (join gv1 gv1 a2) (merge q q)), (Permutation (join gv1 gv1 a2) (merge q gv1)), (Permutation (join gv1 gv1 a2) (merge gv1 q)), (Permutation (join gv1 gv1 a2) (merge gv1 gv1)), (Permutation (join gv1 gv1 a2) (heap_delete_max gv5)), (Permutation (join gv1 gv1 a2) (heap_delete_max a2)), (Permutation (join gv1 gv1 a2) (heap_delete_max a1)), (Permutation (join gv1 gv1 a2) (join q q gv5)), (Permutation (join gv1 gv1 a2) (join q q a2)), (Permutation (join gv1 gv1 a2) (join q q a1))
(Permutation (join gv1 gv1 a2) (join q gv1 gv5)), (Permutation (join gv1 gv1 a2) (join q gv1 a2)), (Permutation (join gv1 gv1 a2) (join q gv1 a1)), (Permutation (join gv1 gv1 a2) (join gv1 q gv5)), (Permutation (join gv1 gv1 a2) (join gv1 q a2)), (Permutation (join gv1 gv1 a2) (join gv1 q a1)), (Permutation (join gv1 gv1 a2) (join gv1 gv1 gv5)), (Permutation (join gv1 gv1 a2) (join gv1 gv1 a1)), (Permutation (join gv1 gv1 a2) (insert x q)), (Permutation (join gv1 gv1 a2) (insert x gv1))
(Permutation (join gv1 gv1 a2) (insert n q)), (Permutation (join gv1 gv1 a2) (insert n gv1)), (Permutation (join gv1 gv1 a2) (carry q gv5)), (Permutation (join gv1 gv1 a2) (carry q a2)), (Permutation (join gv1 gv1 a2) (carry q a1)), (Permutation (join gv1 gv1 a2) (carry gv1 gv5)), (Permutation (join gv1 gv1 a2) (carry gv1 a2)), (Permutation (join gv1 gv1 a2) (carry gv1 a1)), (Permutation (join gv1 gv1 a2) (q ++ q)), (Permutation (join gv1 gv1 a2) (q ++ gv1))
(Permutation (join gv1 gv1 a2) (gv1 ++ q)), (Permutation (join gv1 gv1 a2) (gv1 ++ gv1)), (Permutation (join gv1 gv1 a2) []), (Permutation (join gv1 gv1 a1) q), (Permutation (join gv1 gv1 a1) gv1), (Permutation (join gv1 gv1 a1) (gv5 :: q)), (Permutation (join gv1 gv1 a1) (gv5 :: gv1)), (Permutation (join gv1 gv1 a1) (a2 :: q)), (Permutation (join gv1 gv1 a1) (a2 :: gv1)), (Permutation (join gv1 gv1 a1) (a1 :: q))
(Permutation (join gv1 gv1 a1) (a1 :: gv1)), (Permutation (join gv1 gv1 a1) (merge q q)), (Permutation (join gv1 gv1 a1) (merge q gv1)), (Permutation (join gv1 gv1 a1) (merge gv1 q)), (Permutation (join gv1 gv1 a1) (merge gv1 gv1)), (Permutation (join gv1 gv1 a1) (heap_delete_max gv5)), (Permutation (join gv1 gv1 a1) (heap_delete_max a2)), (Permutation (join gv1 gv1 a1) (heap_delete_max a1)), (Permutation (join gv1 gv1 a1) (join q q gv5)), (Permutation (join gv1 gv1 a1) (join q q a2))
(Permutation (join gv1 gv1 a1) (join q q a1)), (Permutation (join gv1 gv1 a1) (join q gv1 gv5)), (Permutation (join gv1 gv1 a1) (join q gv1 a2)), (Permutation (join gv1 gv1 a1) (join q gv1 a1)), (Permutation (join gv1 gv1 a1) (join gv1 q gv5)), (Permutation (join gv1 gv1 a1) (join gv1 q a2)), (Permutation (join gv1 gv1 a1) (join gv1 q a1)), (Permutation (join gv1 gv1 a1) (join gv1 gv1 gv5)), (Permutation (join gv1 gv1 a1) (join gv1 gv1 a2)), (Permutation (join gv1 gv1 a1) (insert x q))
(Permutation (join gv1 gv1 a1) (insert x gv1)), (Permutation (join gv1 gv1 a1) (insert n q)), (Permutation (join gv1 gv1 a1) (insert n gv1)), (Permutation (join gv1 gv1 a1) (carry q gv5)), (Permutation (join gv1 gv1 a1) (carry q a2)), (Permutation (join gv1 gv1 a1) (carry q a1)), (Permutation (join gv1 gv1 a1) (carry gv1 gv5)), (Permutation (join gv1 gv1 a1) (carry gv1 a2)), (Permutation (join gv1 gv1 a1) (carry gv1 a1)), (Permutation (join gv1 gv1 a1) (q ++ q))
(Permutation (join gv1 gv1 a1) (q ++ gv1)), (Permutation (join gv1 gv1 a1) (gv1 ++ q)), (Permutation (join gv1 gv1 a1) (gv1 ++ gv1)), (Permutation (join gv1 gv1 a1) []), (Permutation (insert x q) q), (Permutation (insert x q) gv1), (Permutation (insert x q) (gv5 :: q)), (Permutation (insert x q) (gv5 :: gv1)), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv1))
(Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv1)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q)), (Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (heap_delete_max gv5)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (join q q gv5))
(Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q gv1 gv5)), (Permutation (insert x q) (join q gv1 a2)), (Permutation (insert x q) (join q gv1 a1)), (Permutation (insert x q) (join gv1 q gv5)), (Permutation (insert x q) (join gv1 q a2)), (Permutation (insert x q) (join gv1 q a1)), (Permutation (insert x q) (join gv1 gv1 gv5)), (Permutation (insert x q) (join gv1 gv1 a2))
(Permutation (insert x q) (join gv1 gv1 a1)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (insert n gv1)), (Permutation (insert x q) (carry q gv5)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry gv1 gv5)), (Permutation (insert x q) (carry gv1 a2)), (Permutation (insert x q) (carry gv1 a1))
(Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1)), (Permutation (insert x q) []), (Permutation (insert x gv1) q), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (gv5 :: q)), (Permutation (insert x gv1) (gv5 :: gv1)), (Permutation (insert x gv1) (a2 :: q))
(Permutation (insert x gv1) (a2 :: gv1)), (Permutation (insert x gv1) (a1 :: q)), (Permutation (insert x gv1) (a1 :: gv1)), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (heap_delete_max gv5)), (Permutation (insert x gv1) (heap_delete_max a2)), (Permutation (insert x gv1) (heap_delete_max a1))
(Permutation (insert x gv1) (join q q gv5)), (Permutation (insert x gv1) (join q q a2)), (Permutation (insert x gv1) (join q q a1)), (Permutation (insert x gv1) (join q gv1 gv5)), (Permutation (insert x gv1) (join q gv1 a2)), (Permutation (insert x gv1) (join q gv1 a1)), (Permutation (insert x gv1) (join gv1 q gv5)), (Permutation (insert x gv1) (join gv1 q a2)), (Permutation (insert x gv1) (join gv1 q a1)), (Permutation (insert x gv1) (join gv1 gv1 gv5))
(Permutation (insert x gv1) (join gv1 gv1 a2)), (Permutation (insert x gv1) (join gv1 gv1 a1)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (insert n q)), (Permutation (insert x gv1) (insert n gv1)), (Permutation (insert x gv1) (carry q gv5)), (Permutation (insert x gv1) (carry q a2)), (Permutation (insert x gv1) (carry q a1)), (Permutation (insert x gv1) (carry gv1 gv5)), (Permutation (insert x gv1) (carry gv1 a2))
(Permutation (insert x gv1) (carry gv1 a1)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1)), (Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (insert n q) q), (Permutation (insert n q) gv1), (Permutation (insert n q) (gv5 :: q)), (Permutation (insert n q) (gv5 :: gv1))
(Permutation (insert n q) (a2 :: q)), (Permutation (insert n q) (a2 :: gv1)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv1)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv1)), (Permutation (insert n q) (merge gv1 q)), (Permutation (insert n q) (merge gv1 gv1)), (Permutation (insert n q) (heap_delete_max gv5)), (Permutation (insert n q) (heap_delete_max a2))
(Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (join q q gv5)), (Permutation (insert n q) (join q q a2)), (Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q gv1 gv5)), (Permutation (insert n q) (join q gv1 a2)), (Permutation (insert n q) (join q gv1 a1)), (Permutation (insert n q) (join gv1 q gv5)), (Permutation (insert n q) (join gv1 q a2)), (Permutation (insert n q) (join gv1 q a1))
(Permutation (insert n q) (join gv1 gv1 gv5)), (Permutation (insert n q) (join gv1 gv1 a2)), (Permutation (insert n q) (join gv1 gv1 a1)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (insert x gv1)), (Permutation (insert n q) (insert n gv1)), (Permutation (insert n q) (carry q gv5)), (Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry gv1 gv5))
(Permutation (insert n q) (carry gv1 a2)), (Permutation (insert n q) (carry gv1 a1)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv1)), (Permutation (insert n q) (gv1 ++ q)), (Permutation (insert n q) (gv1 ++ gv1)), (Permutation (insert n q) []), (Permutation (insert n gv1) q), (Permutation (insert n gv1) gv1), (Permutation (insert n gv1) (gv5 :: q))
(Permutation (insert n gv1) (gv5 :: gv1)), (Permutation (insert n gv1) (a2 :: q)), (Permutation (insert n gv1) (a2 :: gv1)), (Permutation (insert n gv1) (a1 :: q)), (Permutation (insert n gv1) (a1 :: gv1)), (Permutation (insert n gv1) (merge q q)), (Permutation (insert n gv1) (merge q gv1)), (Permutation (insert n gv1) (merge gv1 q)), (Permutation (insert n gv1) (merge gv1 gv1)), (Permutation (insert n gv1) (heap_delete_max gv5))
(Permutation (insert n gv1) (heap_delete_max a2)), (Permutation (insert n gv1) (heap_delete_max a1)), (Permutation (insert n gv1) (join q q gv5)), (Permutation (insert n gv1) (join q q a2)), (Permutation (insert n gv1) (join q q a1)), (Permutation (insert n gv1) (join q gv1 gv5)), (Permutation (insert n gv1) (join q gv1 a2)), (Permutation (insert n gv1) (join q gv1 a1)), (Permutation (insert n gv1) (join gv1 q gv5)), (Permutation (insert n gv1) (join gv1 q a2))
(Permutation (insert n gv1) (join gv1 q a1)), (Permutation (insert n gv1) (join gv1 gv1 gv5)), (Permutation (insert n gv1) (join gv1 gv1 a2)), (Permutation (insert n gv1) (join gv1 gv1 a1)), (Permutation (insert n gv1) (insert x q)), (Permutation (insert n gv1) (insert x gv1)), (Permutation (insert n gv1) (insert n q)), (Permutation (insert n gv1) (carry q gv5)), (Permutation (insert n gv1) (carry q a2)), (Permutation (insert n gv1) (carry q a1))
(Permutation (insert n gv1) (carry gv1 gv5)), (Permutation (insert n gv1) (carry gv1 a2)), (Permutation (insert n gv1) (carry gv1 a1)), (Permutation (insert n gv1) (q ++ q)), (Permutation (insert n gv1) (q ++ gv1)), (Permutation (insert n gv1) (gv1 ++ q)), (Permutation (insert n gv1) (gv1 ++ gv1)), (Permutation (insert n gv1) []), (Permutation (carry q gv5) q), (Permutation (carry q gv5) gv1)
(Permutation (carry q gv5) (gv5 :: q)), (Permutation (carry q gv5) (gv5 :: gv1)), (Permutation (carry q gv5) (a2 :: q)), (Permutation (carry q gv5) (a2 :: gv1)), (Permutation (carry q gv5) (a1 :: q)), (Permutation (carry q gv5) (a1 :: gv1)), (Permutation (carry q gv5) (merge q q)), (Permutation (carry q gv5) (merge q gv1)), (Permutation (carry q gv5) (merge gv1 q)), (Permutation (carry q gv5) (merge gv1 gv1))
(Permutation (carry q gv5) (heap_delete_max gv5)), (Permutation (carry q gv5) (heap_delete_max a2)), (Permutation (carry q gv5) (heap_delete_max a1)), (Permutation (carry q gv5) (join q q gv5)), (Permutation (carry q gv5) (join q q a2)), (Permutation (carry q gv5) (join q q a1)), (Permutation (carry q gv5) (join q gv1 gv5)), (Permutation (carry q gv5) (join q gv1 a2)), (Permutation (carry q gv5) (join q gv1 a1)), (Permutation (carry q gv5) (join gv1 q gv5))
(Permutation (carry q gv5) (join gv1 q a2)), (Permutation (carry q gv5) (join gv1 q a1)), (Permutation (carry q gv5) (join gv1 gv1 gv5)), (Permutation (carry q gv5) (join gv1 gv1 a2)), (Permutation (carry q gv5) (join gv1 gv1 a1)), (Permutation (carry q gv5) (insert x q)), (Permutation (carry q gv5) (insert x gv1)), (Permutation (carry q gv5) (insert n q)), (Permutation (carry q gv5) (insert n gv1)), (Permutation (carry q gv5) (carry q a2))
(Permutation (carry q gv5) (carry q a1)), (Permutation (carry q gv5) (carry gv1 gv5)), (Permutation (carry q gv5) (carry gv1 a2)), (Permutation (carry q gv5) (carry gv1 a1)), (Permutation (carry q gv5) (q ++ q)), (Permutation (carry q gv5) (q ++ gv1)), (Permutation (carry q gv5) (gv1 ++ q)), (Permutation (carry q gv5) (gv1 ++ gv1)), (Permutation (carry q gv5) []), (Permutation (carry q a2) q)
(Permutation (carry q a2) gv1), (Permutation (carry q a2) (gv5 :: q)), (Permutation (carry q a2) (gv5 :: gv1)), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv1)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (a1 :: gv1)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv1)), (Permutation (carry q a2) (merge gv1 q))
(Permutation (carry q a2) (merge gv1 gv1)), (Permutation (carry q a2) (heap_delete_max gv5)), (Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (join q q gv5)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q gv1 gv5)), (Permutation (carry q a2) (join q gv1 a2)), (Permutation (carry q a2) (join q gv1 a1))
(Permutation (carry q a2) (join gv1 q gv5)), (Permutation (carry q a2) (join gv1 q a2)), (Permutation (carry q a2) (join gv1 q a1)), (Permutation (carry q a2) (join gv1 gv1 gv5)), (Permutation (carry q a2) (join gv1 gv1 a2)), (Permutation (carry q a2) (join gv1 gv1 a1)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv1)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv1))
(Permutation (carry q a2) (carry q gv5)), (Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry gv1 gv5)), (Permutation (carry q a2) (carry gv1 a2)), (Permutation (carry q a2) (carry gv1 a1)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv1)), (Permutation (carry q a2) (gv1 ++ q)), (Permutation (carry q a2) (gv1 ++ gv1)), (Permutation (carry q a2) [])
(Permutation (carry q a1) q), (Permutation (carry q a1) gv1), (Permutation (carry q a1) (gv5 :: q)), (Permutation (carry q a1) (gv5 :: gv1)), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv1)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv1)), (Permutation (carry q a1) (merge q q)), (Permutation (carry q a1) (merge q gv1))
(Permutation (carry q a1) (merge gv1 q)), (Permutation (carry q a1) (merge gv1 gv1)), (Permutation (carry q a1) (heap_delete_max gv5)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (join q q gv5)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q gv1 gv5)), (Permutation (carry q a1) (join q gv1 a2))
(Permutation (carry q a1) (join q gv1 a1)), (Permutation (carry q a1) (join gv1 q gv5)), (Permutation (carry q a1) (join gv1 q a2)), (Permutation (carry q a1) (join gv1 q a1)), (Permutation (carry q a1) (join gv1 gv1 gv5)), (Permutation (carry q a1) (join gv1 gv1 a2)), (Permutation (carry q a1) (join gv1 gv1 a1)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert x gv1)), (Permutation (carry q a1) (insert n q))
(Permutation (carry q a1) (insert n gv1)), (Permutation (carry q a1) (carry q gv5)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry gv1 gv5)), (Permutation (carry q a1) (carry gv1 a2)), (Permutation (carry q a1) (carry gv1 a1)), (Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv1)), (Permutation (carry q a1) (gv1 ++ q)), (Permutation (carry q a1) (gv1 ++ gv1))
(Permutation (carry q a1) []), (Permutation (carry gv1 gv5) q), (Permutation (carry gv1 gv5) gv1), (Permutation (carry gv1 gv5) (gv5 :: q)), (Permutation (carry gv1 gv5) (gv5 :: gv1)), (Permutation (carry gv1 gv5) (a2 :: q)), (Permutation (carry gv1 gv5) (a2 :: gv1)), (Permutation (carry gv1 gv5) (a1 :: q)), (Permutation (carry gv1 gv5) (a1 :: gv1)), (Permutation (carry gv1 gv5) (merge q q))
(Permutation (carry gv1 gv5) (merge q gv1)), (Permutation (carry gv1 gv5) (merge gv1 q)), (Permutation (carry gv1 gv5) (merge gv1 gv1)), (Permutation (carry gv1 gv5) (heap_delete_max gv5)), (Permutation (carry gv1 gv5) (heap_delete_max a2)), (Permutation (carry gv1 gv5) (heap_delete_max a1)), (Permutation (carry gv1 gv5) (join q q gv5)), (Permutation (carry gv1 gv5) (join q q a2)), (Permutation (carry gv1 gv5) (join q q a1)), (Permutation (carry gv1 gv5) (join q gv1 gv5))
(Permutation (carry gv1 gv5) (join q gv1 a2)), (Permutation (carry gv1 gv5) (join q gv1 a1)), (Permutation (carry gv1 gv5) (join gv1 q gv5)), (Permutation (carry gv1 gv5) (join gv1 q a2)), (Permutation (carry gv1 gv5) (join gv1 q a1)), (Permutation (carry gv1 gv5) (join gv1 gv1 gv5)), (Permutation (carry gv1 gv5) (join gv1 gv1 a2)), (Permutation (carry gv1 gv5) (join gv1 gv1 a1)), (Permutation (carry gv1 gv5) (insert x q)), (Permutation (carry gv1 gv5) (insert x gv1))
(Permutation (carry gv1 gv5) (insert n q)), (Permutation (carry gv1 gv5) (insert n gv1)), (Permutation (carry gv1 gv5) (carry q gv5)), (Permutation (carry gv1 gv5) (carry q a2)), (Permutation (carry gv1 gv5) (carry q a1)), (Permutation (carry gv1 gv5) (carry gv1 a2)), (Permutation (carry gv1 gv5) (carry gv1 a1)), (Permutation (carry gv1 gv5) (q ++ q)), (Permutation (carry gv1 gv5) (q ++ gv1)), (Permutation (carry gv1 gv5) (gv1 ++ q))
(Permutation (carry gv1 gv5) (gv1 ++ gv1)), (Permutation (carry gv1 gv5) []), (Permutation (carry gv1 a2) q), (Permutation (carry gv1 a2) gv1), (Permutation (carry gv1 a2) (gv5 :: q)), (Permutation (carry gv1 a2) (gv5 :: gv1)), (Permutation (carry gv1 a2) (a2 :: q)), (Permutation (carry gv1 a2) (a2 :: gv1)), (Permutation (carry gv1 a2) (a1 :: q)), (Permutation (carry gv1 a2) (a1 :: gv1))
(Permutation (carry gv1 a2) (merge q q)), (Permutation (carry gv1 a2) (merge q gv1)), (Permutation (carry gv1 a2) (merge gv1 q)), (Permutation (carry gv1 a2) (merge gv1 gv1)), (Permutation (carry gv1 a2) (heap_delete_max gv5)), (Permutation (carry gv1 a2) (heap_delete_max a2)), (Permutation (carry gv1 a2) (heap_delete_max a1)), (Permutation (carry gv1 a2) (join q q gv5)), (Permutation (carry gv1 a2) (join q q a2)), (Permutation (carry gv1 a2) (join q q a1))
(Permutation (carry gv1 a2) (join q gv1 gv5)), (Permutation (carry gv1 a2) (join q gv1 a2)), (Permutation (carry gv1 a2) (join q gv1 a1)), (Permutation (carry gv1 a2) (join gv1 q gv5)), (Permutation (carry gv1 a2) (join gv1 q a2)), (Permutation (carry gv1 a2) (join gv1 q a1)), (Permutation (carry gv1 a2) (join gv1 gv1 gv5)), (Permutation (carry gv1 a2) (join gv1 gv1 a2)), (Permutation (carry gv1 a2) (join gv1 gv1 a1)), (Permutation (carry gv1 a2) (insert x q))
(Permutation (carry gv1 a2) (insert x gv1)), (Permutation (carry gv1 a2) (insert n q)), (Permutation (carry gv1 a2) (insert n gv1)), (Permutation (carry gv1 a2) (carry q gv5)), (Permutation (carry gv1 a2) (carry q a2)), (Permutation (carry gv1 a2) (carry q a1)), (Permutation (carry gv1 a2) (carry gv1 gv5)), (Permutation (carry gv1 a2) (carry gv1 a1)), (Permutation (carry gv1 a2) (q ++ q)), (Permutation (carry gv1 a2) (q ++ gv1))
(Permutation (carry gv1 a2) (gv1 ++ q)), (Permutation (carry gv1 a2) (gv1 ++ gv1)), (Permutation (carry gv1 a2) []), (Permutation (carry gv1 a1) q), (Permutation (carry gv1 a1) gv1), (Permutation (carry gv1 a1) (gv5 :: q)), (Permutation (carry gv1 a1) (gv5 :: gv1)), (Permutation (carry gv1 a1) (a2 :: q)), (Permutation (carry gv1 a1) (a2 :: gv1)), (Permutation (carry gv1 a1) (a1 :: q))
(Permutation (carry gv1 a1) (a1 :: gv1)), (Permutation (carry gv1 a1) (merge q q)), (Permutation (carry gv1 a1) (merge q gv1)), (Permutation (carry gv1 a1) (merge gv1 q)), (Permutation (carry gv1 a1) (merge gv1 gv1)), (Permutation (carry gv1 a1) (heap_delete_max gv5)), (Permutation (carry gv1 a1) (heap_delete_max a2)), (Permutation (carry gv1 a1) (heap_delete_max a1)), (Permutation (carry gv1 a1) (join q q gv5)), (Permutation (carry gv1 a1) (join q q a2))
(Permutation (carry gv1 a1) (join q q a1)), (Permutation (carry gv1 a1) (join q gv1 gv5)), (Permutation (carry gv1 a1) (join q gv1 a2)), (Permutation (carry gv1 a1) (join q gv1 a1)), (Permutation (carry gv1 a1) (join gv1 q gv5)), (Permutation (carry gv1 a1) (join gv1 q a2)), (Permutation (carry gv1 a1) (join gv1 q a1)), (Permutation (carry gv1 a1) (join gv1 gv1 gv5)), (Permutation (carry gv1 a1) (join gv1 gv1 a2)), (Permutation (carry gv1 a1) (join gv1 gv1 a1))
(Permutation (carry gv1 a1) (insert x q)), (Permutation (carry gv1 a1) (insert x gv1)), (Permutation (carry gv1 a1) (insert n q)), (Permutation (carry gv1 a1) (insert n gv1)), (Permutation (carry gv1 a1) (carry q gv5)), (Permutation (carry gv1 a1) (carry q a2)), (Permutation (carry gv1 a1) (carry q a1)), (Permutation (carry gv1 a1) (carry gv1 gv5)), (Permutation (carry gv1 a1) (carry gv1 a2)), (Permutation (carry gv1 a1) (q ++ q))
(Permutation (carry gv1 a1) (q ++ gv1)), (Permutation (carry gv1 a1) (gv1 ++ q)), (Permutation (carry gv1 a1) (gv1 ++ gv1)), (Permutation (carry gv1 a1) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) (gv5 :: q)), (Permutation (q ++ q) (gv5 :: gv1)), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv1))
(Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv1)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (heap_delete_max gv5)), (Permutation (q ++ q) (heap_delete_max a2)), (Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (join q q gv5))
(Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q gv1 gv5)), (Permutation (q ++ q) (join q gv1 a2)), (Permutation (q ++ q) (join q gv1 a1)), (Permutation (q ++ q) (join gv1 q gv5)), (Permutation (q ++ q) (join gv1 q a2)), (Permutation (q ++ q) (join gv1 q a1)), (Permutation (q ++ q) (join gv1 gv1 gv5)), (Permutation (q ++ q) (join gv1 gv1 a2))
(Permutation (q ++ q) (join gv1 gv1 a1)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv1)), (Permutation (q ++ q) (carry q gv5)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry gv1 gv5)), (Permutation (q ++ q) (carry gv1 a2))
(Permutation (q ++ q) (carry gv1 a1)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (gv5 :: q)), (Permutation (q ++ gv1) (gv5 :: gv1)), (Permutation (q ++ gv1) (a2 :: q))
(Permutation (q ++ gv1) (a2 :: gv1)), (Permutation (q ++ gv1) (a1 :: q)), (Permutation (q ++ gv1) (a1 :: gv1)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q)), (Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (heap_delete_max gv5)), (Permutation (q ++ gv1) (heap_delete_max a2)), (Permutation (q ++ gv1) (heap_delete_max a1))
(Permutation (q ++ gv1) (join q q gv5)), (Permutation (q ++ gv1) (join q q a2)), (Permutation (q ++ gv1) (join q q a1)), (Permutation (q ++ gv1) (join q gv1 gv5)), (Permutation (q ++ gv1) (join q gv1 a2)), (Permutation (q ++ gv1) (join q gv1 a1)), (Permutation (q ++ gv1) (join gv1 q gv5)), (Permutation (q ++ gv1) (join gv1 q a2)), (Permutation (q ++ gv1) (join gv1 q a1)), (Permutation (q ++ gv1) (join gv1 gv1 gv5))
(Permutation (q ++ gv1) (join gv1 gv1 a2)), (Permutation (q ++ gv1) (join gv1 gv1 a1)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (insert n q)), (Permutation (q ++ gv1) (insert n gv1)), (Permutation (q ++ gv1) (carry q gv5)), (Permutation (q ++ gv1) (carry q a2)), (Permutation (q ++ gv1) (carry q a1)), (Permutation (q ++ gv1) (carry gv1 gv5))
(Permutation (q ++ gv1) (carry gv1 a2)), (Permutation (q ++ gv1) (carry gv1 a1)), (Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (gv5 :: q)), (Permutation (gv1 ++ q) (gv5 :: gv1))
(Permutation (gv1 ++ q) (a2 :: q)), (Permutation (gv1 ++ q) (a2 :: gv1)), (Permutation (gv1 ++ q) (a1 :: q)), (Permutation (gv1 ++ q) (a1 :: gv1)), (Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (heap_delete_max gv5)), (Permutation (gv1 ++ q) (heap_delete_max a2))
(Permutation (gv1 ++ q) (heap_delete_max a1)), (Permutation (gv1 ++ q) (join q q gv5)), (Permutation (gv1 ++ q) (join q q a2)), (Permutation (gv1 ++ q) (join q q a1)), (Permutation (gv1 ++ q) (join q gv1 gv5)), (Permutation (gv1 ++ q) (join q gv1 a2)), (Permutation (gv1 ++ q) (join q gv1 a1)), (Permutation (gv1 ++ q) (join gv1 q gv5)), (Permutation (gv1 ++ q) (join gv1 q a2)), (Permutation (gv1 ++ q) (join gv1 q a1))
(Permutation (gv1 ++ q) (join gv1 gv1 gv5)), (Permutation (gv1 ++ q) (join gv1 gv1 a2)), (Permutation (gv1 ++ q) (join gv1 gv1 a1)), (Permutation (gv1 ++ q) (insert x q)), (Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (insert n q)), (Permutation (gv1 ++ q) (insert n gv1)), (Permutation (gv1 ++ q) (carry q gv5)), (Permutation (gv1 ++ q) (carry q a2)), (Permutation (gv1 ++ q) (carry q a1))
(Permutation (gv1 ++ q) (carry gv1 gv5)), (Permutation (gv1 ++ q) (carry gv1 a2)), (Permutation (gv1 ++ q) (carry gv1 a1)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (gv5 :: q))
(Permutation (gv1 ++ gv1) (gv5 :: gv1)), (Permutation (gv1 ++ gv1) (a2 :: q)), (Permutation (gv1 ++ gv1) (a2 :: gv1)), (Permutation (gv1 ++ gv1) (a1 :: q)), (Permutation (gv1 ++ gv1) (a1 :: gv1)), (Permutation (gv1 ++ gv1) (merge q q)), (Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (heap_delete_max gv5))
(Permutation (gv1 ++ gv1) (heap_delete_max a2)), (Permutation (gv1 ++ gv1) (heap_delete_max a1)), (Permutation (gv1 ++ gv1) (join q q gv5)), (Permutation (gv1 ++ gv1) (join q q a2)), (Permutation (gv1 ++ gv1) (join q q a1)), (Permutation (gv1 ++ gv1) (join q gv1 gv5)), (Permutation (gv1 ++ gv1) (join q gv1 a2)), (Permutation (gv1 ++ gv1) (join q gv1 a1)), (Permutation (gv1 ++ gv1) (join gv1 q gv5)), (Permutation (gv1 ++ gv1) (join gv1 q a2))
(Permutation (gv1 ++ gv1) (join gv1 q a1)), (Permutation (gv1 ++ gv1) (join gv1 gv1 gv5)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a2)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a1)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (insert n q)), (Permutation (gv1 ++ gv1) (insert n gv1)), (Permutation (gv1 ++ gv1) (carry q gv5)), (Permutation (gv1 ++ gv1) (carry q a2))
(Permutation (gv1 ++ gv1) (carry q a1)), (Permutation (gv1 ++ gv1) (carry gv1 gv5)), (Permutation (gv1 ++ gv1) (carry gv1 a2)), (Permutation (gv1 ++ gv1) (carry gv1 a1)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1)
(Permutation [] (gv5 :: q)), (Permutation [] (gv5 :: gv1)), (Permutation [] (a2 :: q)), (Permutation [] (a2 :: gv1)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv1)), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1))
(Permutation [] (heap_delete_max gv5)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join q q gv5)), (Permutation [] (join q q a2)), (Permutation [] (join q q a1)), (Permutation [] (join q gv1 gv5)), (Permutation [] (join q gv1 a2)), (Permutation [] (join q gv1 a1)), (Permutation [] (join gv1 q gv5))
(Permutation [] (join gv1 q a2)), (Permutation [] (join gv1 q a1)), (Permutation [] (join gv1 gv1 gv5)), (Permutation [] (join gv1 gv1 a2)), (Permutation [] (join gv1 gv1 a1)), (Permutation [] (insert x q)), (Permutation [] (insert x gv1)), (Permutation [] (insert n q)), (Permutation [] (insert n gv1)), (Permutation [] (carry q gv5))
(Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry gv1 gv5)), (Permutation [] (carry gv1 a2)), (Permutation [] (carry gv1 a1)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (In gv5 (gv5 :: q))
(In gv5 (gv5 :: gv1)), (In gv5 (a2 :: q)), (In gv5 (a2 :: gv1)), (In gv5 (a1 :: q)), (In gv5 (a1 :: gv1)), (In gv5 (merge q q)), (In gv5 (merge q gv1)), (In gv5 (merge gv1 q)), (In gv5 (merge gv1 gv1)), (In gv5 (heap_delete_max gv5))
(In gv5 (heap_delete_max a2)), (In gv5 (heap_delete_max a1)), (In gv5 (join q q gv5)), (In gv5 (join q q a2)), (In gv5 (join q q a1)), (In gv5 (join q gv1 gv5)), (In gv5 (join q gv1 a2)), (In gv5 (join q gv1 a1)), (In gv5 (join gv1 q gv5)), (In gv5 (join gv1 q a2))
(In gv5 (join gv1 q a1)), (In gv5 (join gv1 gv1 gv5)), (In gv5 (join gv1 gv1 a2)), (In gv5 (join gv1 gv1 a1)), (In gv5 (insert x q)), (In gv5 (insert x gv1)), (In gv5 (insert n q)), (In gv5 (insert n gv1)), (In gv5 (carry q gv5)), (In gv5 (carry q a2))
(In gv5 (carry q a1)), (In gv5 (carry gv1 gv5)), (In gv5 (carry gv1 a2)), (In gv5 (carry gv1 a1)), (In gv5 (q ++ q)), (In gv5 (q ++ gv1)), (In gv5 (gv1 ++ q)), (In gv5 (gv1 ++ gv1)), (In a2 (gv5 :: q)), (In a2 (gv5 :: gv1))
(In a2 (a2 :: q)), (In a2 (a2 :: gv1)), (In a2 (a1 :: q)), (In a2 (a1 :: gv1)), (In a2 (merge q q)), (In a2 (merge q gv1)), (In a2 (merge gv1 q)), (In a2 (merge gv1 gv1)), (In a2 (heap_delete_max gv5)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (join q q gv5)), (In a2 (join q q a2)), (In a2 (join q q a1)), (In a2 (join q gv1 gv5)), (In a2 (join q gv1 a2)), (In a2 (join q gv1 a1)), (In a2 (join gv1 q gv5)), (In a2 (join gv1 q a2)), (In a2 (join gv1 q a1))
(In a2 (join gv1 gv1 gv5)), (In a2 (join gv1 gv1 a2)), (In a2 (join gv1 gv1 a1)), (In a2 (insert x q)), (In a2 (insert x gv1)), (In a2 (insert n q)), (In a2 (insert n gv1)), (In a2 (carry q gv5)), (In a2 (carry q a2)), (In a2 (carry q a1))
(In a2 (carry gv1 gv5)), (In a2 (carry gv1 a2)), (In a2 (carry gv1 a1)), (In a2 (q ++ q)), (In a2 (q ++ gv1)), (In a2 (gv1 ++ q)), (In a2 (gv1 ++ gv1)), (In a1 (gv5 :: q)), (In a1 (gv5 :: gv1)), (In a1 (a2 :: q))
(In a1 (a2 :: gv1)), (In a1 (a1 :: q)), (In a1 (a1 :: gv1)), (In a1 (merge q q)), (In a1 (merge q gv1)), (In a1 (merge gv1 q)), (In a1 (merge gv1 gv1)), (In a1 (heap_delete_max gv5)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1))
(In a1 (join q q gv5)), (In a1 (join q q a2)), (In a1 (join q q a1)), (In a1 (join q gv1 gv5)), (In a1 (join q gv1 a2)), (In a1 (join q gv1 a1)), (In a1 (join gv1 q gv5)), (In a1 (join gv1 q a2)), (In a1 (join gv1 q a1)), (In a1 (join gv1 gv1 gv5))
(In a1 (join gv1 gv1 a2)), (In a1 (join gv1 gv1 a1)), (In a1 (insert x q)), (In a1 (insert x gv1)), (In a1 (insert n q)), (In a1 (insert n gv1)), (In a1 (carry q gv5)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry gv1 gv5))
(In a1 (carry gv1 a2)), (In a1 (carry gv1 a1)), (In a1 (q ++ q)), (In a1 (q ++ gv1)), (In a1 (gv1 ++ q)), (In a1 (gv1 ++ gv1)), (In (Node x gv5 gv5) q), (In (Node x gv5 gv5) gv1), (In (Node x gv5 gv5) (gv5 :: q)), (In (Node x gv5 gv5) (gv5 :: gv1))
(In (Node x gv5 gv5) (a2 :: q)), (In (Node x gv5 gv5) (a2 :: gv1)), (In (Node x gv5 gv5) (a1 :: q)), (In (Node x gv5 gv5) (a1 :: gv1)), (In (Node x gv5 gv5) (merge q q)), (In (Node x gv5 gv5) (merge q gv1)), (In (Node x gv5 gv5) (merge gv1 q)), (In (Node x gv5 gv5) (merge gv1 gv1)), (In (Node x gv5 gv5) (heap_delete_max gv5)), (In (Node x gv5 gv5) (heap_delete_max a2))
(In (Node x gv5 gv5) (heap_delete_max a1)), (In (Node x gv5 gv5) (join q q gv5)), (In (Node x gv5 gv5) (join q q a2)), (In (Node x gv5 gv5) (join q q a1)), (In (Node x gv5 gv5) (join q gv1 gv5)), (In (Node x gv5 gv5) (join q gv1 a2)), (In (Node x gv5 gv5) (join q gv1 a1)), (In (Node x gv5 gv5) (join gv1 q gv5)), (In (Node x gv5 gv5) (join gv1 q a2)), (In (Node x gv5 gv5) (join gv1 q a1))
(In (Node x gv5 gv5) (join gv1 gv1 gv5)), (In (Node x gv5 gv5) (join gv1 gv1 a2)), (In (Node x gv5 gv5) (join gv1 gv1 a1)), (In (Node x gv5 gv5) (insert x q)), (In (Node x gv5 gv5) (insert x gv1)), (In (Node x gv5 gv5) (insert n q)), (In (Node x gv5 gv5) (insert n gv1)), (In (Node x gv5 gv5) (carry q gv5)), (In (Node x gv5 gv5) (carry q a2)), (In (Node x gv5 gv5) (carry q a1))
(In (Node x gv5 gv5) (carry gv1 gv5)), (In (Node x gv5 gv5) (carry gv1 a2)), (In (Node x gv5 gv5) (carry gv1 a1)), (In (Node x gv5 gv5) (q ++ q)), (In (Node x gv5 gv5) (q ++ gv1)), (In (Node x gv5 gv5) (gv1 ++ q)), (In (Node x gv5 gv5) (gv1 ++ gv1)), (In (Node x gv5 a2) q), (In (Node x gv5 a2) gv1), (In (Node x gv5 a2) (gv5 :: q))
(In (Node x gv5 a2) (gv5 :: gv1)), (In (Node x gv5 a2) (a2 :: q)), (In (Node x gv5 a2) (a2 :: gv1)), (In (Node x gv5 a2) (a1 :: q)), (In (Node x gv5 a2) (a1 :: gv1)), (In (Node x gv5 a2) (merge q q)), (In (Node x gv5 a2) (merge q gv1)), (In (Node x gv5 a2) (merge gv1 q)), (In (Node x gv5 a2) (merge gv1 gv1)), (In (Node x gv5 a2) (heap_delete_max gv5))
(In (Node x gv5 a2) (heap_delete_max a2)), (In (Node x gv5 a2) (heap_delete_max a1)), (In (Node x gv5 a2) (join q q gv5)), (In (Node x gv5 a2) (join q q a2)), (In (Node x gv5 a2) (join q q a1)), (In (Node x gv5 a2) (join q gv1 gv5)), (In (Node x gv5 a2) (join q gv1 a2)), (In (Node x gv5 a2) (join q gv1 a1)), (In (Node x gv5 a2) (join gv1 q gv5)), (In (Node x gv5 a2) (join gv1 q a2))
(In (Node x gv5 a2) (join gv1 q a1)), (In (Node x gv5 a2) (join gv1 gv1 gv5)), (In (Node x gv5 a2) (join gv1 gv1 a2)), (In (Node x gv5 a2) (join gv1 gv1 a1)), (In (Node x gv5 a2) (insert x q)), (In (Node x gv5 a2) (insert x gv1)), (In (Node x gv5 a2) (insert n q)), (In (Node x gv5 a2) (insert n gv1)), (In (Node x gv5 a2) (carry q gv5)), (In (Node x gv5 a2) (carry q a2))
(In (Node x gv5 a2) (carry q a1)), (In (Node x gv5 a2) (carry gv1 gv5)), (In (Node x gv5 a2) (carry gv1 a2)), (In (Node x gv5 a2) (carry gv1 a1)), (In (Node x gv5 a2) (q ++ q)), (In (Node x gv5 a2) (q ++ gv1)), (In (Node x gv5 a2) (gv1 ++ q)), (In (Node x gv5 a2) (gv1 ++ gv1)), (In (Node x gv5 a1) q), (In (Node x gv5 a1) gv1)
(In (Node x gv5 a1) (gv5 :: q)), (In (Node x gv5 a1) (gv5 :: gv1)), (In (Node x gv5 a1) (a2 :: q)), (In (Node x gv5 a1) (a2 :: gv1)), (In (Node x gv5 a1) (a1 :: q)), (In (Node x gv5 a1) (a1 :: gv1)), (In (Node x gv5 a1) (merge q q)), (In (Node x gv5 a1) (merge q gv1)), (In (Node x gv5 a1) (merge gv1 q)), (In (Node x gv5 a1) (merge gv1 gv1))
(In (Node x gv5 a1) (heap_delete_max gv5)), (In (Node x gv5 a1) (heap_delete_max a2)), (In (Node x gv5 a1) (heap_delete_max a1)), (In (Node x gv5 a1) (join q q gv5)), (In (Node x gv5 a1) (join q q a2)), (In (Node x gv5 a1) (join q q a1)), (In (Node x gv5 a1) (join q gv1 gv5)), (In (Node x gv5 a1) (join q gv1 a2)), (In (Node x gv5 a1) (join q gv1 a1)), (In (Node x gv5 a1) (join gv1 q gv5))
(In (Node x gv5 a1) (join gv1 q a2)), (In (Node x gv5 a1) (join gv1 q a1)), (In (Node x gv5 a1) (join gv1 gv1 gv5)), (In (Node x gv5 a1) (join gv1 gv1 a2)), (In (Node x gv5 a1) (join gv1 gv1 a1)), (In (Node x gv5 a1) (insert x q)), (In (Node x gv5 a1) (insert x gv1)), (In (Node x gv5 a1) (insert n q)), (In (Node x gv5 a1) (insert n gv1)), (In (Node x gv5 a1) (carry q gv5))
(In (Node x gv5 a1) (carry q a2)), (In (Node x gv5 a1) (carry q a1)), (In (Node x gv5 a1) (carry gv1 gv5)), (In (Node x gv5 a1) (carry gv1 a2)), (In (Node x gv5 a1) (carry gv1 a1)), (In (Node x gv5 a1) (q ++ q)), (In (Node x gv5 a1) (q ++ gv1)), (In (Node x gv5 a1) (gv1 ++ q)), (In (Node x gv5 a1) (gv1 ++ gv1)), (In (Node x a2 gv5) q)
(In (Node x a2 gv5) gv1), (In (Node x a2 gv5) (gv5 :: q)), (In (Node x a2 gv5) (gv5 :: gv1)), (In (Node x a2 gv5) (a2 :: q)), (In (Node x a2 gv5) (a2 :: gv1)), (In (Node x a2 gv5) (a1 :: q)), (In (Node x a2 gv5) (a1 :: gv1)), (In (Node x a2 gv5) (merge q q)), (In (Node x a2 gv5) (merge q gv1)), (In (Node x a2 gv5) (merge gv1 q))
(In (Node x a2 gv5) (merge gv1 gv1)), (In (Node x a2 gv5) (heap_delete_max gv5)), (In (Node x a2 gv5) (heap_delete_max a2)), (In (Node x a2 gv5) (heap_delete_max a1)), (In (Node x a2 gv5) (join q q gv5)), (In (Node x a2 gv5) (join q q a2)), (In (Node x a2 gv5) (join q q a1)), (In (Node x a2 gv5) (join q gv1 gv5)), (In (Node x a2 gv5) (join q gv1 a2)), (In (Node x a2 gv5) (join q gv1 a1))
(In (Node x a2 gv5) (join gv1 q gv5)), (In (Node x a2 gv5) (join gv1 q a2)), (In (Node x a2 gv5) (join gv1 q a1)), (In (Node x a2 gv5) (join gv1 gv1 gv5)), (In (Node x a2 gv5) (join gv1 gv1 a2)), (In (Node x a2 gv5) (join gv1 gv1 a1)), (In (Node x a2 gv5) (insert x q)), (In (Node x a2 gv5) (insert x gv1)), (In (Node x a2 gv5) (insert n q)), (In (Node x a2 gv5) (insert n gv1))
(In (Node x a2 gv5) (carry q gv5)), (In (Node x a2 gv5) (carry q a2)), (In (Node x a2 gv5) (carry q a1)), (In (Node x a2 gv5) (carry gv1 gv5)), (In (Node x a2 gv5) (carry gv1 a2)), (In (Node x a2 gv5) (carry gv1 a1)), (In (Node x a2 gv5) (q ++ q)), (In (Node x a2 gv5) (q ++ gv1)), (In (Node x a2 gv5) (gv1 ++ q)), (In (Node x a2 gv5) (gv1 ++ gv1))
(In (Node x a2 a2) q), (In (Node x a2 a2) gv1), (In (Node x a2 a2) (gv5 :: q)), (In (Node x a2 a2) (gv5 :: gv1)), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv1)), (In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (a1 :: gv1)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv1))
(In (Node x a2 a2) (merge gv1 q)), (In (Node x a2 a2) (merge gv1 gv1)), (In (Node x a2 a2) (heap_delete_max gv5)), (In (Node x a2 a2) (heap_delete_max a2)), (In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (join q q gv5)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q gv1 gv5)), (In (Node x a2 a2) (join q gv1 a2))
(In (Node x a2 a2) (join q gv1 a1)), (In (Node x a2 a2) (join gv1 q gv5)), (In (Node x a2 a2) (join gv1 q a2)), (In (Node x a2 a2) (join gv1 q a1)), (In (Node x a2 a2) (join gv1 gv1 gv5)), (In (Node x a2 a2) (join gv1 gv1 a2)), (In (Node x a2 a2) (join gv1 gv1 a1)), (In (Node x a2 a2) (insert x q)), (In (Node x a2 a2) (insert x gv1)), (In (Node x a2 a2) (insert n q))
(In (Node x a2 a2) (insert n gv1)), (In (Node x a2 a2) (carry q gv5)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry gv1 gv5)), (In (Node x a2 a2) (carry gv1 a2)), (In (Node x a2 a2) (carry gv1 a1)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv1)), (In (Node x a2 a2) (gv1 ++ q))
(In (Node x a2 a2) (gv1 ++ gv1)), (In (Node x a2 a1) q), (In (Node x a2 a1) gv1), (In (Node x a2 a1) (gv5 :: q)), (In (Node x a2 a1) (gv5 :: gv1)), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a2 :: gv1)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (a1 :: gv1)), (In (Node x a2 a1) (merge q q))
(In (Node x a2 a1) (merge q gv1)), (In (Node x a2 a1) (merge gv1 q)), (In (Node x a2 a1) (merge gv1 gv1)), (In (Node x a2 a1) (heap_delete_max gv5)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (join q q gv5)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q gv1 gv5))
(In (Node x a2 a1) (join q gv1 a2)), (In (Node x a2 a1) (join q gv1 a1)), (In (Node x a2 a1) (join gv1 q gv5)), (In (Node x a2 a1) (join gv1 q a2)), (In (Node x a2 a1) (join gv1 q a1)), (In (Node x a2 a1) (join gv1 gv1 gv5)), (In (Node x a2 a1) (join gv1 gv1 a2)), (In (Node x a2 a1) (join gv1 gv1 a1)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert x gv1))
(In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv1)), (In (Node x a2 a1) (carry q gv5)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry gv1 gv5)), (In (Node x a2 a1) (carry gv1 a2)), (In (Node x a2 a1) (carry gv1 a1)), (In (Node x a2 a1) (q ++ q)), (In (Node x a2 a1) (q ++ gv1))
(In (Node x a2 a1) (gv1 ++ q)), (In (Node x a2 a1) (gv1 ++ gv1)), (In (Node x a1 gv5) q), (In (Node x a1 gv5) gv1), (In (Node x a1 gv5) (gv5 :: q)), (In (Node x a1 gv5) (gv5 :: gv1)), (In (Node x a1 gv5) (a2 :: q)), (In (Node x a1 gv5) (a2 :: gv1)), (In (Node x a1 gv5) (a1 :: q)), (In (Node x a1 gv5) (a1 :: gv1))
(In (Node x a1 gv5) (merge q q)), (In (Node x a1 gv5) (merge q gv1)), (In (Node x a1 gv5) (merge gv1 q)), (In (Node x a1 gv5) (merge gv1 gv1)), (In (Node x a1 gv5) (heap_delete_max gv5)), (In (Node x a1 gv5) (heap_delete_max a2)), (In (Node x a1 gv5) (heap_delete_max a1)), (In (Node x a1 gv5) (join q q gv5)), (In (Node x a1 gv5) (join q q a2)), (In (Node x a1 gv5) (join q q a1))
(In (Node x a1 gv5) (join q gv1 gv5)), (In (Node x a1 gv5) (join q gv1 a2)), (In (Node x a1 gv5) (join q gv1 a1)), (In (Node x a1 gv5) (join gv1 q gv5)), (In (Node x a1 gv5) (join gv1 q a2)), (In (Node x a1 gv5) (join gv1 q a1)), (In (Node x a1 gv5) (join gv1 gv1 gv5)), (In (Node x a1 gv5) (join gv1 gv1 a2)), (In (Node x a1 gv5) (join gv1 gv1 a1)), (In (Node x a1 gv5) (insert x q))
(In (Node x a1 gv5) (insert x gv1)), (In (Node x a1 gv5) (insert n q)), (In (Node x a1 gv5) (insert n gv1)), (In (Node x a1 gv5) (carry q gv5)), (In (Node x a1 gv5) (carry q a2)), (In (Node x a1 gv5) (carry q a1)), (In (Node x a1 gv5) (carry gv1 gv5)), (In (Node x a1 gv5) (carry gv1 a2)), (In (Node x a1 gv5) (carry gv1 a1)), (In (Node x a1 gv5) (q ++ q))
(In (Node x a1 gv5) (q ++ gv1)), (In (Node x a1 gv5) (gv1 ++ q)), (In (Node x a1 gv5) (gv1 ++ gv1)), (In (Node x a1 a2) q), (In (Node x a1 a2) gv1), (In (Node x a1 a2) (gv5 :: q)), (In (Node x a1 a2) (gv5 :: gv1)), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv1)), (In (Node x a1 a2) (a1 :: q))
(In (Node x a1 a2) (a1 :: gv1)), (In (Node x a1 a2) (merge q q)), (In (Node x a1 a2) (merge q gv1)), (In (Node x a1 a2) (merge gv1 q)), (In (Node x a1 a2) (merge gv1 gv1)), (In (Node x a1 a2) (heap_delete_max gv5)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (join q q gv5)), (In (Node x a1 a2) (join q q a2))
(In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q gv1 gv5)), (In (Node x a1 a2) (join q gv1 a2)), (In (Node x a1 a2) (join q gv1 a1)), (In (Node x a1 a2) (join gv1 q gv5)), (In (Node x a1 a2) (join gv1 q a2)), (In (Node x a1 a2) (join gv1 q a1)), (In (Node x a1 a2) (join gv1 gv1 gv5)), (In (Node x a1 a2) (join gv1 gv1 a2)), (In (Node x a1 a2) (join gv1 gv1 a1))
(In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv1)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert n gv1)), (In (Node x a1 a2) (carry q gv5)), (In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry gv1 gv5)), (In (Node x a1 a2) (carry gv1 a2)), (In (Node x a1 a2) (carry gv1 a1))
(In (Node x a1 a2) (q ++ q)), (In (Node x a1 a2) (q ++ gv1)), (In (Node x a1 a2) (gv1 ++ q)), (In (Node x a1 a2) (gv1 ++ gv1)), (In (Node x a1 a1) q), (In (Node x a1 a1) gv1), (In (Node x a1 a1) (gv5 :: q)), (In (Node x a1 a1) (gv5 :: gv1)), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a2 :: gv1))
(In (Node x a1 a1) (a1 :: q)), (In (Node x a1 a1) (a1 :: gv1)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (merge q gv1)), (In (Node x a1 a1) (merge gv1 q)), (In (Node x a1 a1) (merge gv1 gv1)), (In (Node x a1 a1) (heap_delete_max gv5)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (join q q gv5))
(In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q gv1 gv5)), (In (Node x a1 a1) (join q gv1 a2)), (In (Node x a1 a1) (join q gv1 a1)), (In (Node x a1 a1) (join gv1 q gv5)), (In (Node x a1 a1) (join gv1 q a2)), (In (Node x a1 a1) (join gv1 q a1)), (In (Node x a1 a1) (join gv1 gv1 gv5)), (In (Node x a1 a1) (join gv1 gv1 a2))
(In (Node x a1 a1) (join gv1 gv1 a1)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv1)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (insert n gv1)), (In (Node x a1 a1) (carry q gv5)), (In (Node x a1 a1) (carry q a2)), (In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry gv1 gv5)), (In (Node x a1 a1) (carry gv1 a2))
(In (Node x a1 a1) (carry gv1 a1)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv1)), (In (Node x a1 a1) (gv1 ++ q)), (In (Node x a1 a1) (gv1 ++ gv1)), (In (Node n gv5 gv5) q), (In (Node n gv5 gv5) gv1), (In (Node n gv5 gv5) (gv5 :: q)), (In (Node n gv5 gv5) (gv5 :: gv1)), (In (Node n gv5 gv5) (a2 :: q))
(In (Node n gv5 gv5) (a2 :: gv1)), (In (Node n gv5 gv5) (a1 :: q)), (In (Node n gv5 gv5) (a1 :: gv1)), (In (Node n gv5 gv5) (merge q q)), (In (Node n gv5 gv5) (merge q gv1)), (In (Node n gv5 gv5) (merge gv1 q)), (In (Node n gv5 gv5) (merge gv1 gv1)), (In (Node n gv5 gv5) (heap_delete_max gv5)), (In (Node n gv5 gv5) (heap_delete_max a2)), (In (Node n gv5 gv5) (heap_delete_max a1))
(In (Node n gv5 gv5) (join q q gv5)), (In (Node n gv5 gv5) (join q q a2)), (In (Node n gv5 gv5) (join q q a1)), (In (Node n gv5 gv5) (join q gv1 gv5)), (In (Node n gv5 gv5) (join q gv1 a2)), (In (Node n gv5 gv5) (join q gv1 a1)), (In (Node n gv5 gv5) (join gv1 q gv5)), (In (Node n gv5 gv5) (join gv1 q a2)), (In (Node n gv5 gv5) (join gv1 q a1)), (In (Node n gv5 gv5) (join gv1 gv1 gv5))
(In (Node n gv5 gv5) (join gv1 gv1 a2)), (In (Node n gv5 gv5) (join gv1 gv1 a1)), (In (Node n gv5 gv5) (insert x q)), (In (Node n gv5 gv5) (insert x gv1)), (In (Node n gv5 gv5) (insert n q)), (In (Node n gv5 gv5) (insert n gv1)), (In (Node n gv5 gv5) (carry q gv5)), (In (Node n gv5 gv5) (carry q a2)), (In (Node n gv5 gv5) (carry q a1)), (In (Node n gv5 gv5) (carry gv1 gv5))
(In (Node n gv5 gv5) (carry gv1 a2)), (In (Node n gv5 gv5) (carry gv1 a1)), (In (Node n gv5 gv5) (q ++ q)), (In (Node n gv5 gv5) (q ++ gv1)), (In (Node n gv5 gv5) (gv1 ++ q)), (In (Node n gv5 gv5) (gv1 ++ gv1)), (In (Node n gv5 a2) q), (In (Node n gv5 a2) gv1), (In (Node n gv5 a2) (gv5 :: q)), (In (Node n gv5 a2) (gv5 :: gv1))
(In (Node n gv5 a2) (a2 :: q)), (In (Node n gv5 a2) (a2 :: gv1)), (In (Node n gv5 a2) (a1 :: q)), (In (Node n gv5 a2) (a1 :: gv1)), (In (Node n gv5 a2) (merge q q)), (In (Node n gv5 a2) (merge q gv1)), (In (Node n gv5 a2) (merge gv1 q)), (In (Node n gv5 a2) (merge gv1 gv1)), (In (Node n gv5 a2) (heap_delete_max gv5)), (In (Node n gv5 a2) (heap_delete_max a2))
(In (Node n gv5 a2) (heap_delete_max a1)), (In (Node n gv5 a2) (join q q gv5)), (In (Node n gv5 a2) (join q q a2)), (In (Node n gv5 a2) (join q q a1)), (In (Node n gv5 a2) (join q gv1 gv5)), (In (Node n gv5 a2) (join q gv1 a2)), (In (Node n gv5 a2) (join q gv1 a1)), (In (Node n gv5 a2) (join gv1 q gv5)), (In (Node n gv5 a2) (join gv1 q a2)), (In (Node n gv5 a2) (join gv1 q a1))
(In (Node n gv5 a2) (join gv1 gv1 gv5)), (In (Node n gv5 a2) (join gv1 gv1 a2)), (In (Node n gv5 a2) (join gv1 gv1 a1)), (In (Node n gv5 a2) (insert x q)), (In (Node n gv5 a2) (insert x gv1)), (In (Node n gv5 a2) (insert n q)), (In (Node n gv5 a2) (insert n gv1)), (In (Node n gv5 a2) (carry q gv5)), (In (Node n gv5 a2) (carry q a2)), (In (Node n gv5 a2) (carry q a1))
(In (Node n gv5 a2) (carry gv1 gv5)), (In (Node n gv5 a2) (carry gv1 a2)), (In (Node n gv5 a2) (carry gv1 a1)), (In (Node n gv5 a2) (q ++ q)), (In (Node n gv5 a2) (q ++ gv1)), (In (Node n gv5 a2) (gv1 ++ q)), (In (Node n gv5 a2) (gv1 ++ gv1)), (In (Node n gv5 a1) q), (In (Node n gv5 a1) gv1), (In (Node n gv5 a1) (gv5 :: q))
(In (Node n gv5 a1) (gv5 :: gv1)), (In (Node n gv5 a1) (a2 :: q)), (In (Node n gv5 a1) (a2 :: gv1)), (In (Node n gv5 a1) (a1 :: q)), (In (Node n gv5 a1) (a1 :: gv1)), (In (Node n gv5 a1) (merge q q)), (In (Node n gv5 a1) (merge q gv1)), (In (Node n gv5 a1) (merge gv1 q)), (In (Node n gv5 a1) (merge gv1 gv1)), (In (Node n gv5 a1) (heap_delete_max gv5))
(In (Node n gv5 a1) (heap_delete_max a2)), (In (Node n gv5 a1) (heap_delete_max a1)), (In (Node n gv5 a1) (join q q gv5)), (In (Node n gv5 a1) (join q q a2)), (In (Node n gv5 a1) (join q q a1)), (In (Node n gv5 a1) (join q gv1 gv5)), (In (Node n gv5 a1) (join q gv1 a2)), (In (Node n gv5 a1) (join q gv1 a1)), (In (Node n gv5 a1) (join gv1 q gv5)), (In (Node n gv5 a1) (join gv1 q a2))
(In (Node n gv5 a1) (join gv1 q a1)), (In (Node n gv5 a1) (join gv1 gv1 gv5)), (In (Node n gv5 a1) (join gv1 gv1 a2)), (In (Node n gv5 a1) (join gv1 gv1 a1)), (In (Node n gv5 a1) (insert x q)), (In (Node n gv5 a1) (insert x gv1)), (In (Node n gv5 a1) (insert n q)), (In (Node n gv5 a1) (insert n gv1)), (In (Node n gv5 a1) (carry q gv5)), (In (Node n gv5 a1) (carry q a2))
(In (Node n gv5 a1) (carry q a1)), (In (Node n gv5 a1) (carry gv1 gv5)), (In (Node n gv5 a1) (carry gv1 a2)), (In (Node n gv5 a1) (carry gv1 a1)), (In (Node n gv5 a1) (q ++ q)), (In (Node n gv5 a1) (q ++ gv1)), (In (Node n gv5 a1) (gv1 ++ q)), (In (Node n gv5 a1) (gv1 ++ gv1)), (In (Node n a2 gv5) q), (In (Node n a2 gv5) gv1)
(In (Node n a2 gv5) (gv5 :: q)), (In (Node n a2 gv5) (gv5 :: gv1)), (In (Node n a2 gv5) (a2 :: q)), (In (Node n a2 gv5) (a2 :: gv1)), (In (Node n a2 gv5) (a1 :: q)), (In (Node n a2 gv5) (a1 :: gv1)), (In (Node n a2 gv5) (merge q q)), (In (Node n a2 gv5) (merge q gv1)), (In (Node n a2 gv5) (merge gv1 q)), (In (Node n a2 gv5) (merge gv1 gv1))
(In (Node n a2 gv5) (heap_delete_max gv5)), (In (Node n a2 gv5) (heap_delete_max a2)), (In (Node n a2 gv5) (heap_delete_max a1)), (In (Node n a2 gv5) (join q q gv5)), (In (Node n a2 gv5) (join q q a2)), (In (Node n a2 gv5) (join q q a1)), (In (Node n a2 gv5) (join q gv1 gv5)), (In (Node n a2 gv5) (join q gv1 a2)), (In (Node n a2 gv5) (join q gv1 a1)), (In (Node n a2 gv5) (join gv1 q gv5))
(In (Node n a2 gv5) (join gv1 q a2)), (In (Node n a2 gv5) (join gv1 q a1)), (In (Node n a2 gv5) (join gv1 gv1 gv5)), (In (Node n a2 gv5) (join gv1 gv1 a2)), (In (Node n a2 gv5) (join gv1 gv1 a1)), (In (Node n a2 gv5) (insert x q)), (In (Node n a2 gv5) (insert x gv1)), (In (Node n a2 gv5) (insert n q)), (In (Node n a2 gv5) (insert n gv1)), (In (Node n a2 gv5) (carry q gv5))
(In (Node n a2 gv5) (carry q a2)), (In (Node n a2 gv5) (carry q a1)), (In (Node n a2 gv5) (carry gv1 gv5)), (In (Node n a2 gv5) (carry gv1 a2)), (In (Node n a2 gv5) (carry gv1 a1)), (In (Node n a2 gv5) (q ++ q)), (In (Node n a2 gv5) (q ++ gv1)), (In (Node n a2 gv5) (gv1 ++ q)), (In (Node n a2 gv5) (gv1 ++ gv1)), (In (Node n a2 a2) q)
(In (Node n a2 a2) gv1), (In (Node n a2 a2) (gv5 :: q)), (In (Node n a2 a2) (gv5 :: gv1)), (In (Node n a2 a2) (a2 :: q)), (In (Node n a2 a2) (a2 :: gv1)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (a1 :: gv1)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv1)), (In (Node n a2 a2) (merge gv1 q))
(In (Node n a2 a2) (merge gv1 gv1)), (In (Node n a2 a2) (heap_delete_max gv5)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join q q gv5)), (In (Node n a2 a2) (join q q a2)), (In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q gv1 gv5)), (In (Node n a2 a2) (join q gv1 a2)), (In (Node n a2 a2) (join q gv1 a1))
(In (Node n a2 a2) (join gv1 q gv5)), (In (Node n a2 a2) (join gv1 q a2)), (In (Node n a2 a2) (join gv1 q a1)), (In (Node n a2 a2) (join gv1 gv1 gv5)), (In (Node n a2 a2) (join gv1 gv1 a2)), (In (Node n a2 a2) (join gv1 gv1 a1)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv1)), (In (Node n a2 a2) (insert n q)), (In (Node n a2 a2) (insert n gv1))
(In (Node n a2 a2) (carry q gv5)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry gv1 gv5)), (In (Node n a2 a2) (carry gv1 a2)), (In (Node n a2 a2) (carry gv1 a1)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv1)), (In (Node n a2 a2) (gv1 ++ q)), (In (Node n a2 a2) (gv1 ++ gv1))
(In (Node n a2 a1) q), (In (Node n a2 a1) gv1), (In (Node n a2 a1) (gv5 :: q)), (In (Node n a2 a1) (gv5 :: gv1)), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a2 :: gv1)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (a1 :: gv1)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv1))
(In (Node n a2 a1) (merge gv1 q)), (In (Node n a2 a1) (merge gv1 gv1)), (In (Node n a2 a1) (heap_delete_max gv5)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join q q gv5)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q gv1 gv5)), (In (Node n a2 a1) (join q gv1 a2))
(In (Node n a2 a1) (join q gv1 a1)), (In (Node n a2 a1) (join gv1 q gv5)), (In (Node n a2 a1) (join gv1 q a2)), (In (Node n a2 a1) (join gv1 q a1)), (In (Node n a2 a1) (join gv1 gv1 gv5)), (In (Node n a2 a1) (join gv1 gv1 a2)), (In (Node n a2 a1) (join gv1 gv1 a1)), (In (Node n a2 a1) (insert x q)), (In (Node n a2 a1) (insert x gv1)), (In (Node n a2 a1) (insert n q))
(In (Node n a2 a1) (insert n gv1)), (In (Node n a2 a1) (carry q gv5)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry gv1 gv5)), (In (Node n a2 a1) (carry gv1 a2)), (In (Node n a2 a1) (carry gv1 a1)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 a1) (q ++ gv1)), (In (Node n a2 a1) (gv1 ++ q))
(In (Node n a2 a1) (gv1 ++ gv1)), (In (Node n a1 gv5) q), (In (Node n a1 gv5) gv1), (In (Node n a1 gv5) (gv5 :: q)), (In (Node n a1 gv5) (gv5 :: gv1)), (In (Node n a1 gv5) (a2 :: q)), (In (Node n a1 gv5) (a2 :: gv1)), (In (Node n a1 gv5) (a1 :: q)), (In (Node n a1 gv5) (a1 :: gv1)), (In (Node n a1 gv5) (merge q q))
(In (Node n a1 gv5) (merge q gv1)), (In (Node n a1 gv5) (merge gv1 q)), (In (Node n a1 gv5) (merge gv1 gv1)), (In (Node n a1 gv5) (heap_delete_max gv5)), (In (Node n a1 gv5) (heap_delete_max a2)), (In (Node n a1 gv5) (heap_delete_max a1)), (In (Node n a1 gv5) (join q q gv5)), (In (Node n a1 gv5) (join q q a2)), (In (Node n a1 gv5) (join q q a1)), (In (Node n a1 gv5) (join q gv1 gv5))
(In (Node n a1 gv5) (join q gv1 a2)), (In (Node n a1 gv5) (join q gv1 a1)), (In (Node n a1 gv5) (join gv1 q gv5)), (In (Node n a1 gv5) (join gv1 q a2)), (In (Node n a1 gv5) (join gv1 q a1)), (In (Node n a1 gv5) (join gv1 gv1 gv5)), (In (Node n a1 gv5) (join gv1 gv1 a2)), (In (Node n a1 gv5) (join gv1 gv1 a1)), (In (Node n a1 gv5) (insert x q)), (In (Node n a1 gv5) (insert x gv1))
(In (Node n a1 gv5) (insert n q)), (In (Node n a1 gv5) (insert n gv1)), (In (Node n a1 gv5) (carry q gv5)), (In (Node n a1 gv5) (carry q a2)), (In (Node n a1 gv5) (carry q a1)), (In (Node n a1 gv5) (carry gv1 gv5)), (In (Node n a1 gv5) (carry gv1 a2)), (In (Node n a1 gv5) (carry gv1 a1)), (In (Node n a1 gv5) (q ++ q)), (In (Node n a1 gv5) (q ++ gv1))
(In (Node n a1 gv5) (gv1 ++ q)), (In (Node n a1 gv5) (gv1 ++ gv1)), (In (Node n a1 a2) q), (In (Node n a1 a2) gv1), (In (Node n a1 a2) (gv5 :: q)), (In (Node n a1 a2) (gv5 :: gv1)), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv1)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv1))
(In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (merge q gv1)), (In (Node n a1 a2) (merge gv1 q)), (In (Node n a1 a2) (merge gv1 gv1)), (In (Node n a1 a2) (heap_delete_max gv5)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (join q q gv5)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1))
(In (Node n a1 a2) (join q gv1 gv5)), (In (Node n a1 a2) (join q gv1 a2)), (In (Node n a1 a2) (join q gv1 a1)), (In (Node n a1 a2) (join gv1 q gv5)), (In (Node n a1 a2) (join gv1 q a2)), (In (Node n a1 a2) (join gv1 q a1)), (In (Node n a1 a2) (join gv1 gv1 gv5)), (In (Node n a1 a2) (join gv1 gv1 a2)), (In (Node n a1 a2) (join gv1 gv1 a1)), (In (Node n a1 a2) (insert x q))
(In (Node n a1 a2) (insert x gv1)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv1)), (In (Node n a1 a2) (carry q gv5)), (In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry gv1 gv5)), (In (Node n a1 a2) (carry gv1 a2)), (In (Node n a1 a2) (carry gv1 a1)), (In (Node n a1 a2) (q ++ q))
(In (Node n a1 a2) (q ++ gv1)), (In (Node n a1 a2) (gv1 ++ q)), (In (Node n a1 a2) (gv1 ++ gv1)), (In (Node n a1 a1) q), (In (Node n a1 a1) gv1), (In (Node n a1 a1) (gv5 :: q)), (In (Node n a1 a1) (gv5 :: gv1)), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a2 :: gv1)), (In (Node n a1 a1) (a1 :: q))
(In (Node n a1 a1) (a1 :: gv1)), (In (Node n a1 a1) (merge q q)), (In (Node n a1 a1) (merge q gv1)), (In (Node n a1 a1) (merge gv1 q)), (In (Node n a1 a1) (merge gv1 gv1)), (In (Node n a1 a1) (heap_delete_max gv5)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join q q gv5)), (In (Node n a1 a1) (join q q a2))
(In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q gv1 gv5)), (In (Node n a1 a1) (join q gv1 a2)), (In (Node n a1 a1) (join q gv1 a1)), (In (Node n a1 a1) (join gv1 q gv5)), (In (Node n a1 a1) (join gv1 q a2)), (In (Node n a1 a1) (join gv1 q a1)), (In (Node n a1 a1) (join gv1 gv1 gv5)), (In (Node n a1 a1) (join gv1 gv1 a2)), (In (Node n a1 a1) (join gv1 gv1 a1))
(In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert x gv1)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv1)), (In (Node n a1 a1) (carry q gv5)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry gv1 gv5)), (In (Node n a1 a1) (carry gv1 a2)), (In (Node n a1 a1) (carry gv1 a1))
(In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv1)), (In (Node n a1 a1) (gv1 ++ q)), (In (Node n a1 a1) (gv1 ++ gv1)), (In (smash gv5 gv5) q), (In (smash gv5 gv5) gv1), (In (smash gv5 gv5) (gv5 :: q)), (In (smash gv5 gv5) (gv5 :: gv1)), (In (smash gv5 gv5) (a2 :: q)), (In (smash gv5 gv5) (a2 :: gv1))
(In (smash gv5 gv5) (a1 :: q)), (In (smash gv5 gv5) (a1 :: gv1)), (In (smash gv5 gv5) (merge q q)), (In (smash gv5 gv5) (merge q gv1)), (In (smash gv5 gv5) (merge gv1 q)), (In (smash gv5 gv5) (merge gv1 gv1)), (In (smash gv5 gv5) (heap_delete_max gv5)), (In (smash gv5 gv5) (heap_delete_max a2)), (In (smash gv5 gv5) (heap_delete_max a1)), (In (smash gv5 gv5) (join q q gv5))
(In (smash gv5 gv5) (join q q a2)), (In (smash gv5 gv5) (join q q a1)), (In (smash gv5 gv5) (join q gv1 gv5)), (In (smash gv5 gv5) (join q gv1 a2)), (In (smash gv5 gv5) (join q gv1 a1)), (In (smash gv5 gv5) (join gv1 q gv5)), (In (smash gv5 gv5) (join gv1 q a2)), (In (smash gv5 gv5) (join gv1 q a1)), (In (smash gv5 gv5) (join gv1 gv1 gv5)), (In (smash gv5 gv5) (join gv1 gv1 a2))
(In (smash gv5 gv5) (join gv1 gv1 a1)), (In (smash gv5 gv5) (insert x q)), (In (smash gv5 gv5) (insert x gv1)), (In (smash gv5 gv5) (insert n q)), (In (smash gv5 gv5) (insert n gv1)), (In (smash gv5 gv5) (carry q gv5)), (In (smash gv5 gv5) (carry q a2)), (In (smash gv5 gv5) (carry q a1)), (In (smash gv5 gv5) (carry gv1 gv5)), (In (smash gv5 gv5) (carry gv1 a2))
(In (smash gv5 gv5) (carry gv1 a1)), (In (smash gv5 gv5) (q ++ q)), (In (smash gv5 gv5) (q ++ gv1)), (In (smash gv5 gv5) (gv1 ++ q)), (In (smash gv5 gv5) (gv1 ++ gv1)), (In (smash gv5 a2) q), (In (smash gv5 a2) gv1), (In (smash gv5 a2) (gv5 :: q)), (In (smash gv5 a2) (gv5 :: gv1)), (In (smash gv5 a2) (a2 :: q))
(In (smash gv5 a2) (a2 :: gv1)), (In (smash gv5 a2) (a1 :: q)), (In (smash gv5 a2) (a1 :: gv1)), (In (smash gv5 a2) (merge q q)), (In (smash gv5 a2) (merge q gv1)), (In (smash gv5 a2) (merge gv1 q)), (In (smash gv5 a2) (merge gv1 gv1)), (In (smash gv5 a2) (heap_delete_max gv5)), (In (smash gv5 a2) (heap_delete_max a2)), (In (smash gv5 a2) (heap_delete_max a1))
(In (smash gv5 a2) (join q q gv5)), (In (smash gv5 a2) (join q q a2)), (In (smash gv5 a2) (join q q a1)), (In (smash gv5 a2) (join q gv1 gv5)), (In (smash gv5 a2) (join q gv1 a2)), (In (smash gv5 a2) (join q gv1 a1)), (In (smash gv5 a2) (join gv1 q gv5)), (In (smash gv5 a2) (join gv1 q a2)), (In (smash gv5 a2) (join gv1 q a1)), (In (smash gv5 a2) (join gv1 gv1 gv5))
(In (smash gv5 a2) (join gv1 gv1 a2)), (In (smash gv5 a2) (join gv1 gv1 a1)), (In (smash gv5 a2) (insert x q)), (In (smash gv5 a2) (insert x gv1)), (In (smash gv5 a2) (insert n q)), (In (smash gv5 a2) (insert n gv1)), (In (smash gv5 a2) (carry q gv5)), (In (smash gv5 a2) (carry q a2)), (In (smash gv5 a2) (carry q a1)), (In (smash gv5 a2) (carry gv1 gv5))
(In (smash gv5 a2) (carry gv1 a2)), (In (smash gv5 a2) (carry gv1 a1)), (In (smash gv5 a2) (q ++ q)), (In (smash gv5 a2) (q ++ gv1)), (In (smash gv5 a2) (gv1 ++ q)), (In (smash gv5 a2) (gv1 ++ gv1)), (In (smash gv5 a1) q), (In (smash gv5 a1) gv1), (In (smash gv5 a1) (gv5 :: q)), (In (smash gv5 a1) (gv5 :: gv1))
(In (smash gv5 a1) (a2 :: q)), (In (smash gv5 a1) (a2 :: gv1)), (In (smash gv5 a1) (a1 :: q)), (In (smash gv5 a1) (a1 :: gv1)), (In (smash gv5 a1) (merge q q)), (In (smash gv5 a1) (merge q gv1)), (In (smash gv5 a1) (merge gv1 q)), (In (smash gv5 a1) (merge gv1 gv1)), (In (smash gv5 a1) (heap_delete_max gv5)), (In (smash gv5 a1) (heap_delete_max a2))
(In (smash gv5 a1) (heap_delete_max a1)), (In (smash gv5 a1) (join q q gv5)), (In (smash gv5 a1) (join q q a2)), (In (smash gv5 a1) (join q q a1)), (In (smash gv5 a1) (join q gv1 gv5)), (In (smash gv5 a1) (join q gv1 a2)), (In (smash gv5 a1) (join q gv1 a1)), (In (smash gv5 a1) (join gv1 q gv5)), (In (smash gv5 a1) (join gv1 q a2)), (In (smash gv5 a1) (join gv1 q a1))
(In (smash gv5 a1) (join gv1 gv1 gv5)), (In (smash gv5 a1) (join gv1 gv1 a2)), (In (smash gv5 a1) (join gv1 gv1 a1)), (In (smash gv5 a1) (insert x q)), (In (smash gv5 a1) (insert x gv1)), (In (smash gv5 a1) (insert n q)), (In (smash gv5 a1) (insert n gv1)), (In (smash gv5 a1) (carry q gv5)), (In (smash gv5 a1) (carry q a2)), (In (smash gv5 a1) (carry q a1))
(In (smash gv5 a1) (carry gv1 gv5)), (In (smash gv5 a1) (carry gv1 a2)), (In (smash gv5 a1) (carry gv1 a1)), (In (smash gv5 a1) (q ++ q)), (In (smash gv5 a1) (q ++ gv1)), (In (smash gv5 a1) (gv1 ++ q)), (In (smash gv5 a1) (gv1 ++ gv1)), (In (smash a2 gv5) q), (In (smash a2 gv5) gv1), (In (smash a2 gv5) (gv5 :: q))
(In (smash a2 gv5) (gv5 :: gv1)), (In (smash a2 gv5) (a2 :: q)), (In (smash a2 gv5) (a2 :: gv1)), (In (smash a2 gv5) (a1 :: q)), (In (smash a2 gv5) (a1 :: gv1)), (In (smash a2 gv5) (merge q q)), (In (smash a2 gv5) (merge q gv1)), (In (smash a2 gv5) (merge gv1 q)), (In (smash a2 gv5) (merge gv1 gv1)), (In (smash a2 gv5) (heap_delete_max gv5))
(In (smash a2 gv5) (heap_delete_max a2)), (In (smash a2 gv5) (heap_delete_max a1)), (In (smash a2 gv5) (join q q gv5)), (In (smash a2 gv5) (join q q a2)), (In (smash a2 gv5) (join q q a1)), (In (smash a2 gv5) (join q gv1 gv5)), (In (smash a2 gv5) (join q gv1 a2)), (In (smash a2 gv5) (join q gv1 a1)), (In (smash a2 gv5) (join gv1 q gv5)), (In (smash a2 gv5) (join gv1 q a2))
(In (smash a2 gv5) (join gv1 q a1)), (In (smash a2 gv5) (join gv1 gv1 gv5)), (In (smash a2 gv5) (join gv1 gv1 a2)), (In (smash a2 gv5) (join gv1 gv1 a1)), (In (smash a2 gv5) (insert x q)), (In (smash a2 gv5) (insert x gv1)), (In (smash a2 gv5) (insert n q)), (In (smash a2 gv5) (insert n gv1)), (In (smash a2 gv5) (carry q gv5)), (In (smash a2 gv5) (carry q a2))
(In (smash a2 gv5) (carry q a1)), (In (smash a2 gv5) (carry gv1 gv5)), (In (smash a2 gv5) (carry gv1 a2)), (In (smash a2 gv5) (carry gv1 a1)), (In (smash a2 gv5) (q ++ q)), (In (smash a2 gv5) (q ++ gv1)), (In (smash a2 gv5) (gv1 ++ q)), (In (smash a2 gv5) (gv1 ++ gv1)), (In (smash a2 a2) q), (In (smash a2 a2) gv1)
(In (smash a2 a2) (gv5 :: q)), (In (smash a2 a2) (gv5 :: gv1)), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv1)), (In (smash a2 a2) (a1 :: q)), (In (smash a2 a2) (a1 :: gv1)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (merge q gv1)), (In (smash a2 a2) (merge gv1 q)), (In (smash a2 a2) (merge gv1 gv1))
(In (smash a2 a2) (heap_delete_max gv5)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join q q gv5)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q gv1 gv5)), (In (smash a2 a2) (join q gv1 a2)), (In (smash a2 a2) (join q gv1 a1)), (In (smash a2 a2) (join gv1 q gv5))
(In (smash a2 a2) (join gv1 q a2)), (In (smash a2 a2) (join gv1 q a1)), (In (smash a2 a2) (join gv1 gv1 gv5)), (In (smash a2 a2) (join gv1 gv1 a2)), (In (smash a2 a2) (join gv1 gv1 a1)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv1)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv1)), (In (smash a2 a2) (carry q gv5))
(In (smash a2 a2) (carry q a2)), (In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry gv1 gv5)), (In (smash a2 a2) (carry gv1 a2)), (In (smash a2 a2) (carry gv1 a1)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv1)), (In (smash a2 a2) (gv1 ++ q)), (In (smash a2 a2) (gv1 ++ gv1)), (In (smash a2 a1) q)
(In (smash a2 a1) gv1), (In (smash a2 a1) (gv5 :: q)), (In (smash a2 a1) (gv5 :: gv1)), (In (smash a2 a1) (a2 :: q)), (In (smash a2 a1) (a2 :: gv1)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (a1 :: gv1)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv1)), (In (smash a2 a1) (merge gv1 q))
(In (smash a2 a1) (merge gv1 gv1)), (In (smash a2 a1) (heap_delete_max gv5)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join q q gv5)), (In (smash a2 a1) (join q q a2)), (In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q gv1 gv5)), (In (smash a2 a1) (join q gv1 a2)), (In (smash a2 a1) (join q gv1 a1))
(In (smash a2 a1) (join gv1 q gv5)), (In (smash a2 a1) (join gv1 q a2)), (In (smash a2 a1) (join gv1 q a1)), (In (smash a2 a1) (join gv1 gv1 gv5)), (In (smash a2 a1) (join gv1 gv1 a2)), (In (smash a2 a1) (join gv1 gv1 a1)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert x gv1)), (In (smash a2 a1) (insert n q)), (In (smash a2 a1) (insert n gv1))
(In (smash a2 a1) (carry q gv5)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry gv1 gv5)), (In (smash a2 a1) (carry gv1 a2)), (In (smash a2 a1) (carry gv1 a1)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv1)), (In (smash a2 a1) (gv1 ++ q)), (In (smash a2 a1) (gv1 ++ gv1))
(In (smash a1 gv5) q), (In (smash a1 gv5) gv1), (In (smash a1 gv5) (gv5 :: q)), (In (smash a1 gv5) (gv5 :: gv1)), (In (smash a1 gv5) (a2 :: q)), (In (smash a1 gv5) (a2 :: gv1)), (In (smash a1 gv5) (a1 :: q)), (In (smash a1 gv5) (a1 :: gv1)), (In (smash a1 gv5) (merge q q)), (In (smash a1 gv5) (merge q gv1))
(In (smash a1 gv5) (merge gv1 q)), (In (smash a1 gv5) (merge gv1 gv1)), (In (smash a1 gv5) (heap_delete_max gv5)), (In (smash a1 gv5) (heap_delete_max a2)), (In (smash a1 gv5) (heap_delete_max a1)), (In (smash a1 gv5) (join q q gv5)), (In (smash a1 gv5) (join q q a2)), (In (smash a1 gv5) (join q q a1)), (In (smash a1 gv5) (join q gv1 gv5)), (In (smash a1 gv5) (join q gv1 a2))
(In (smash a1 gv5) (join q gv1 a1)), (In (smash a1 gv5) (join gv1 q gv5)), (In (smash a1 gv5) (join gv1 q a2)), (In (smash a1 gv5) (join gv1 q a1)), (In (smash a1 gv5) (join gv1 gv1 gv5)), (In (smash a1 gv5) (join gv1 gv1 a2)), (In (smash a1 gv5) (join gv1 gv1 a1)), (In (smash a1 gv5) (insert x q)), (In (smash a1 gv5) (insert x gv1)), (In (smash a1 gv5) (insert n q))
(In (smash a1 gv5) (insert n gv1)), (In (smash a1 gv5) (carry q gv5)), (In (smash a1 gv5) (carry q a2)), (In (smash a1 gv5) (carry q a1)), (In (smash a1 gv5) (carry gv1 gv5)), (In (smash a1 gv5) (carry gv1 a2)), (In (smash a1 gv5) (carry gv1 a1)), (In (smash a1 gv5) (q ++ q)), (In (smash a1 gv5) (q ++ gv1)), (In (smash a1 gv5) (gv1 ++ q))
(In (smash a1 gv5) (gv1 ++ gv1)), (In (smash a1 a2) q), (In (smash a1 a2) gv1), (In (smash a1 a2) (gv5 :: q)), (In (smash a1 a2) (gv5 :: gv1)), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a2 :: gv1)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv1)), (In (smash a1 a2) (merge q q))
(In (smash a1 a2) (merge q gv1)), (In (smash a1 a2) (merge gv1 q)), (In (smash a1 a2) (merge gv1 gv1)), (In (smash a1 a2) (heap_delete_max gv5)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join q q gv5)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q gv1 gv5))
(In (smash a1 a2) (join q gv1 a2)), (In (smash a1 a2) (join q gv1 a1)), (In (smash a1 a2) (join gv1 q gv5)), (In (smash a1 a2) (join gv1 q a2)), (In (smash a1 a2) (join gv1 q a1)), (In (smash a1 a2) (join gv1 gv1 gv5)), (In (smash a1 a2) (join gv1 gv1 a2)), (In (smash a1 a2) (join gv1 gv1 a1)), (In (smash a1 a2) (insert x q)), (In (smash a1 a2) (insert x gv1))
(In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv1)), (In (smash a1 a2) (carry q gv5)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry gv1 gv5)), (In (smash a1 a2) (carry gv1 a2)), (In (smash a1 a2) (carry gv1 a1)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv1))
(In (smash a1 a2) (gv1 ++ q)), (In (smash a1 a2) (gv1 ++ gv1)), (In (smash a1 a1) q), (In (smash a1 a1) gv1), (In (smash a1 a1) (gv5 :: q)), (In (smash a1 a1) (gv5 :: gv1)), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv1)), (In (smash a1 a1) (a1 :: q)), (In (smash a1 a1) (a1 :: gv1))
(In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv1)), (In (smash a1 a1) (merge gv1 q)), (In (smash a1 a1) (merge gv1 gv1)), (In (smash a1 a1) (heap_delete_max gv5)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join q q gv5)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1))
(In (smash a1 a1) (join q gv1 gv5)), (In (smash a1 a1) (join q gv1 a2)), (In (smash a1 a1) (join q gv1 a1)), (In (smash a1 a1) (join gv1 q gv5)), (In (smash a1 a1) (join gv1 q a2)), (In (smash a1 a1) (join gv1 q a1)), (In (smash a1 a1) (join gv1 gv1 gv5)), (In (smash a1 a1) (join gv1 gv1 a2)), (In (smash a1 a1) (join gv1 gv1 a1)), (In (smash a1 a1) (insert x q))
(In (smash a1 a1) (insert x gv1)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv1)), (In (smash a1 a1) (carry q gv5)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry gv1 gv5)), (In (smash a1 a1) (carry gv1 a2)), (In (smash a1 a1) (carry gv1 a1)), (In (smash a1 a1) (q ++ q))
(In (smash a1 a1) (q ++ gv1)), (In (smash a1 a1) (gv1 ++ q)), (In (smash a1 a1) (gv1 ++ gv1)), (In Leaf q), (In Leaf gv1), (In Leaf (gv5 :: q)), (In Leaf (gv5 :: gv1)), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv1)), (In Leaf (a1 :: q))
(In Leaf (a1 :: gv1)), (In Leaf (merge q q)), (In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (heap_delete_max gv5)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (join q q gv5)), (In Leaf (join q q a2))
(In Leaf (join q q a1)), (In Leaf (join q gv1 gv5)), (In Leaf (join q gv1 a2)), (In Leaf (join q gv1 a1)), (In Leaf (join gv1 q gv5)), (In Leaf (join gv1 q a2)), (In Leaf (join gv1 q a1)), (In Leaf (join gv1 gv1 gv5)), (In Leaf (join gv1 gv1 a2)), (In Leaf (join gv1 gv1 a1))
(In Leaf (insert x q)), (In Leaf (insert x gv1)), (In Leaf (insert n q)), (In Leaf (insert n gv1)), (In Leaf (carry q gv5)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry gv1 gv5)), (In Leaf (carry gv1 a2)), (In Leaf (carry gv1 a1))
(In Leaf (q ++ q)), (In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q), (x < find_max' x gv1), (x < find_max' n q), (x < find_max' n gv1), (x < length q), (x < length gv1)
(n < find_max' x q), (n < find_max' x gv1), (n < find_max' n q), (n < find_max' n gv1), (n < length q), (n < length gv1), (find_max' x q < x), (find_max' x q < n), (find_max' x q < find_max' x gv1), (find_max' x q < find_max' n q)
(find_max' x q < find_max' n gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < n), (find_max' x gv1 < find_max' x q), (find_max' x gv1 < find_max' n q), (find_max' x gv1 < find_max' n gv1), (find_max' x gv1 < length q), (find_max' x gv1 < length gv1)
(find_max' n q < x), (find_max' n q < n), (find_max' n q < find_max' x q), (find_max' n q < find_max' x gv1), (find_max' n q < find_max' n gv1), (find_max' n q < length q), (find_max' n q < length gv1), (find_max' n gv1 < x), (find_max' n gv1 < n), (find_max' n gv1 < find_max' x q)
(find_max' n gv1 < find_max' x gv1), (find_max' n gv1 < find_max' n q), (find_max' n gv1 < length q), (find_max' n gv1 < length gv1), (length q < x), (length q < n), (length q < find_max' x q), (length q < find_max' x gv1), (length q < find_max' n q), (length q < find_max' n gv1)
(length q < length gv1), (length gv1 < x), (length gv1 < n), (length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < find_max' n q), (length gv1 < find_max' n gv1), (length gv1 < length q), (x <= find_max' x q), (x <= find_max' x gv1)
(x <= find_max' n q), (x <= find_max' n gv1), (x <= length q), (x <= length gv1), (n <= find_max' x q), (n <= find_max' x gv1), (n <= find_max' n q), (n <= find_max' n gv1), (n <= length q), (n <= length gv1)
(find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= find_max' x gv1), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv1), (find_max' x q <= length q), (find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= n), (find_max' x gv1 <= find_max' x q)
(find_max' x gv1 <= find_max' n q), (find_max' x gv1 <= find_max' n gv1), (find_max' x gv1 <= length q), (find_max' x gv1 <= length gv1), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv1), (find_max' n q <= find_max' n gv1), (find_max' n q <= length q)
(find_max' n q <= length gv1), (find_max' n gv1 <= x), (find_max' n gv1 <= n), (find_max' n gv1 <= find_max' x q), (find_max' n gv1 <= find_max' x gv1), (find_max' n gv1 <= find_max' n q), (find_max' n gv1 <= length q), (find_max' n gv1 <= length gv1), (length q <= x), (length q <= n)
(length q <= find_max' x q), (length q <= find_max' x gv1), (length q <= find_max' n q), (length q <= find_max' n gv1), (length q <= length gv1), (length gv1 <= x), (length gv1 <= n), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1), (length gv1 <= find_max' n q)
(length gv1 <= find_max' n gv1), (length gv1 <= length q), (~ priq q), (~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ priqq n q), (~ priqq n gv1), (~ pow2heap x gv5), (~ pow2heap x a2)
(~ pow2heap x a1), (~ pow2heap n gv5), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heapp x x gv5), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x n gv5), (~ pow2heapp x n a2), (~ pow2heapp x n a1)
(~ pow2heapp n x gv5), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n n gv5), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1)
(~ In gv5 q), (~ In gv5 gv1), (~ In a2 q), (~ In a2 gv1), (~ In a1 q), (~ In a1 gv1), (~ x < x), (~ x < n), (~ n < x), (~ n < n)
(~ x <= x), (~ x <= n), (~ n <= x), (~ n <= n), (gv5 <> gv5), (gv5 <> a2), (gv5 <> a1), (a2 <> gv5), (a2 <> a2), (a2 <> a1)
(a1 <> gv5), (a1 <> a2), (a1 <> a1), (x <> x), (x <> n), (n <> x), (n <> n), (q <> q), (q <> gv1), (gv1 <> q)
(gv1 <> gv1), (None = Some q), (None = Some gv1), (gv5 :: q = q), (gv5 :: q = gv1), (gv5 :: q = merge q q), (gv5 :: q = merge q gv1), (gv5 :: q = merge gv1 q), (gv5 :: q = merge gv1 gv1), (gv5 :: q = heap_delete_max gv5)
(gv5 :: q = heap_delete_max a2), (gv5 :: q = heap_delete_max a1), (gv5 :: q = join q q gv5), (gv5 :: q = join q q a2), (gv5 :: q = join q q a1), (gv5 :: q = join q gv1 gv5), (gv5 :: q = join q gv1 a2), (gv5 :: q = join q gv1 a1), (gv5 :: q = join gv1 q gv5), (gv5 :: q = join gv1 q a2)
(gv5 :: q = join gv1 q a1), (gv5 :: q = join gv1 gv1 gv5), (gv5 :: q = join gv1 gv1 a2), (gv5 :: q = join gv1 gv1 a1), (gv5 :: q = insert x q), (gv5 :: q = insert x gv1), (gv5 :: q = insert n q), (gv5 :: q = insert n gv1), (gv5 :: q = carry q gv5), (gv5 :: q = carry q a2)
(gv5 :: q = carry q a1), (gv5 :: q = carry gv1 gv5), (gv5 :: q = carry gv1 a2), (gv5 :: q = carry gv1 a1), (gv5 :: q = q ++ q), (gv5 :: q = q ++ gv1), (gv5 :: q = gv1 ++ q), (gv5 :: q = gv1 ++ gv1), (gv5 :: q = []), (gv5 :: gv1 = q)
(gv5 :: gv1 = gv1), (gv5 :: gv1 = merge q q), (gv5 :: gv1 = merge q gv1), (gv5 :: gv1 = merge gv1 q), (gv5 :: gv1 = merge gv1 gv1), (gv5 :: gv1 = heap_delete_max gv5), (gv5 :: gv1 = heap_delete_max a2), (gv5 :: gv1 = heap_delete_max a1), (gv5 :: gv1 = join q q gv5), (gv5 :: gv1 = join q q a2)
(gv5 :: gv1 = join q q a1), (gv5 :: gv1 = join q gv1 gv5), (gv5 :: gv1 = join q gv1 a2), (gv5 :: gv1 = join q gv1 a1), (gv5 :: gv1 = join gv1 q gv5), (gv5 :: gv1 = join gv1 q a2), (gv5 :: gv1 = join gv1 q a1), (gv5 :: gv1 = join gv1 gv1 gv5), (gv5 :: gv1 = join gv1 gv1 a2), (gv5 :: gv1 = join gv1 gv1 a1)
(gv5 :: gv1 = insert x q), (gv5 :: gv1 = insert x gv1), (gv5 :: gv1 = insert n q), (gv5 :: gv1 = insert n gv1), (gv5 :: gv1 = carry q gv5), (gv5 :: gv1 = carry q a2), (gv5 :: gv1 = carry q a1), (gv5 :: gv1 = carry gv1 gv5), (gv5 :: gv1 = carry gv1 a2), (gv5 :: gv1 = carry gv1 a1)
(gv5 :: gv1 = q ++ q), (gv5 :: gv1 = q ++ gv1), (gv5 :: gv1 = gv1 ++ q), (gv5 :: gv1 = gv1 ++ gv1), (gv5 :: gv1 = []), (a2 :: q = q), (a2 :: q = gv1), (a2 :: q = merge q q), (a2 :: q = merge q gv1), (a2 :: q = merge gv1 q)
(a2 :: q = merge gv1 gv1), (a2 :: q = heap_delete_max gv5), (a2 :: q = heap_delete_max a2), (a2 :: q = heap_delete_max a1), (a2 :: q = join q q gv5), (a2 :: q = join q q a2), (a2 :: q = join q q a1), (a2 :: q = join q gv1 gv5), (a2 :: q = join q gv1 a2), (a2 :: q = join q gv1 a1)
(a2 :: q = join gv1 q gv5), (a2 :: q = join gv1 q a2), (a2 :: q = join gv1 q a1), (a2 :: q = join gv1 gv1 gv5), (a2 :: q = join gv1 gv1 a2), (a2 :: q = join gv1 gv1 a1), (a2 :: q = insert x q), (a2 :: q = insert x gv1), (a2 :: q = insert n q), (a2 :: q = insert n gv1)
(a2 :: q = carry q gv5), (a2 :: q = carry q a2), (a2 :: q = carry q a1), (a2 :: q = carry gv1 gv5), (a2 :: q = carry gv1 a2), (a2 :: q = carry gv1 a1), (a2 :: q = q ++ q), (a2 :: q = q ++ gv1), (a2 :: q = gv1 ++ q), (a2 :: q = gv1 ++ gv1)
(a2 :: q = []), (a2 :: gv1 = q), (a2 :: gv1 = gv1), (a2 :: gv1 = merge q q), (a2 :: gv1 = merge q gv1), (a2 :: gv1 = merge gv1 q), (a2 :: gv1 = merge gv1 gv1), (a2 :: gv1 = heap_delete_max gv5), (a2 :: gv1 = heap_delete_max a2), (a2 :: gv1 = heap_delete_max a1)
(a2 :: gv1 = join q q gv5), (a2 :: gv1 = join q q a2), (a2 :: gv1 = join q q a1), (a2 :: gv1 = join q gv1 gv5), (a2 :: gv1 = join q gv1 a2), (a2 :: gv1 = join q gv1 a1), (a2 :: gv1 = join gv1 q gv5), (a2 :: gv1 = join gv1 q a2), (a2 :: gv1 = join gv1 q a1), (a2 :: gv1 = join gv1 gv1 gv5)
(a2 :: gv1 = join gv1 gv1 a2), (a2 :: gv1 = join gv1 gv1 a1), (a2 :: gv1 = insert x q), (a2 :: gv1 = insert x gv1), (a2 :: gv1 = insert n q), (a2 :: gv1 = insert n gv1), (a2 :: gv1 = carry q gv5), (a2 :: gv1 = carry q a2), (a2 :: gv1 = carry q a1), (a2 :: gv1 = carry gv1 gv5)
(a2 :: gv1 = carry gv1 a2), (a2 :: gv1 = carry gv1 a1), (a2 :: gv1 = q ++ q), (a2 :: gv1 = q ++ gv1), (a2 :: gv1 = gv1 ++ q), (a2 :: gv1 = gv1 ++ gv1), (a2 :: gv1 = []), (a1 :: q = q), (a1 :: q = gv1), (a1 :: q = merge q q)
(a1 :: q = merge q gv1), (a1 :: q = merge gv1 q), (a1 :: q = merge gv1 gv1), (a1 :: q = heap_delete_max gv5), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = join q q gv5), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q gv1 gv5)
(a1 :: q = join q gv1 a2), (a1 :: q = join q gv1 a1), (a1 :: q = join gv1 q gv5), (a1 :: q = join gv1 q a2), (a1 :: q = join gv1 q a1), (a1 :: q = join gv1 gv1 gv5), (a1 :: q = join gv1 gv1 a2), (a1 :: q = join gv1 gv1 a1), (a1 :: q = insert x q), (a1 :: q = insert x gv1)
(a1 :: q = insert n q), (a1 :: q = insert n gv1), (a1 :: q = carry q gv5), (a1 :: q = carry q a2), (a1 :: q = carry q a1), (a1 :: q = carry gv1 gv5), (a1 :: q = carry gv1 a2), (a1 :: q = carry gv1 a1), (a1 :: q = q ++ q), (a1 :: q = q ++ gv1)
(a1 :: q = gv1 ++ q), (a1 :: q = gv1 ++ gv1), (a1 :: q = []), (a1 :: gv1 = q), (a1 :: gv1 = gv1), (a1 :: gv1 = merge q q), (a1 :: gv1 = merge q gv1), (a1 :: gv1 = merge gv1 q), (a1 :: gv1 = merge gv1 gv1), (a1 :: gv1 = heap_delete_max gv5)
(a1 :: gv1 = heap_delete_max a2), (a1 :: gv1 = heap_delete_max a1), (a1 :: gv1 = join q q gv5), (a1 :: gv1 = join q q a2), (a1 :: gv1 = join q q a1), (a1 :: gv1 = join q gv1 gv5), (a1 :: gv1 = join q gv1 a2), (a1 :: gv1 = join q gv1 a1), (a1 :: gv1 = join gv1 q gv5), (a1 :: gv1 = join gv1 q a2)
(a1 :: gv1 = join gv1 q a1), (a1 :: gv1 = join gv1 gv1 gv5), (a1 :: gv1 = join gv1 gv1 a2), (a1 :: gv1 = join gv1 gv1 a1), (a1 :: gv1 = insert x q), (a1 :: gv1 = insert x gv1), (a1 :: gv1 = insert n q), (a1 :: gv1 = insert n gv1), (a1 :: gv1 = carry q gv5), (a1 :: gv1 = carry q a2)
(a1 :: gv1 = carry q a1), (a1 :: gv1 = carry gv1 gv5), (a1 :: gv1 = carry gv1 a2), (a1 :: gv1 = carry gv1 a1), (a1 :: gv1 = q ++ q), (a1 :: gv1 = q ++ gv1), (a1 :: gv1 = gv1 ++ q), (a1 :: gv1 = gv1 ++ gv1), (a1 :: gv1 = []), (merge q q = q)
(merge q q = gv1), (merge q q = heap_delete_max gv5), (merge q q = heap_delete_max a2), (merge q q = heap_delete_max a1), (merge q q = join q q gv5), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q gv1 gv5), (merge q q = join q gv1 a2), (merge q q = join q gv1 a1)
(merge q q = join gv1 q gv5), (merge q q = join gv1 q a2), (merge q q = join gv1 q a1), (merge q q = join gv1 gv1 gv5), (merge q q = join gv1 gv1 a2), (merge q q = join gv1 gv1 a1), (merge q q = insert x q), (merge q q = insert x gv1), (merge q q = insert n q), (merge q q = insert n gv1)
(merge q q = carry q gv5), (merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry gv1 gv5), (merge q q = carry gv1 a2), (merge q q = carry gv1 a1), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1)
(merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = heap_delete_max gv5), (merge q gv1 = heap_delete_max a2), (merge q gv1 = heap_delete_max a1), (merge q gv1 = join q q gv5), (merge q gv1 = join q q a2), (merge q gv1 = join q q a1), (merge q gv1 = join q gv1 gv5), (merge q gv1 = join q gv1 a2)
(merge q gv1 = join q gv1 a1), (merge q gv1 = join gv1 q gv5), (merge q gv1 = join gv1 q a2), (merge q gv1 = join gv1 q a1), (merge q gv1 = join gv1 gv1 gv5), (merge q gv1 = join gv1 gv1 a2), (merge q gv1 = join gv1 gv1 a1), (merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = insert n q)
(merge q gv1 = insert n gv1), (merge q gv1 = carry q gv5), (merge q gv1 = carry q a2), (merge q gv1 = carry q a1), (merge q gv1 = carry gv1 gv5), (merge q gv1 = carry gv1 a2), (merge q gv1 = carry gv1 a1), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q)
(merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = heap_delete_max gv5), (merge gv1 q = heap_delete_max a2), (merge gv1 q = heap_delete_max a1), (merge gv1 q = join q q gv5), (merge gv1 q = join q q a2), (merge gv1 q = join q q a1), (merge gv1 q = join q gv1 gv5)
(merge gv1 q = join q gv1 a2), (merge gv1 q = join q gv1 a1), (merge gv1 q = join gv1 q gv5), (merge gv1 q = join gv1 q a2), (merge gv1 q = join gv1 q a1), (merge gv1 q = join gv1 gv1 gv5), (merge gv1 q = join gv1 gv1 a2), (merge gv1 q = join gv1 gv1 a1), (merge gv1 q = insert x q), (merge gv1 q = insert x gv1)
(merge gv1 q = insert n q), (merge gv1 q = insert n gv1), (merge gv1 q = carry q gv5), (merge gv1 q = carry q a2), (merge gv1 q = carry q a1), (merge gv1 q = carry gv1 gv5), (merge gv1 q = carry gv1 a2), (merge gv1 q = carry gv1 a1), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1)
(merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = heap_delete_max gv5), (merge gv1 gv1 = heap_delete_max a2), (merge gv1 gv1 = heap_delete_max a1), (merge gv1 gv1 = join q q gv5), (merge gv1 gv1 = join q q a2), (merge gv1 gv1 = join q q a1)
(merge gv1 gv1 = join q gv1 gv5), (merge gv1 gv1 = join q gv1 a2), (merge gv1 gv1 = join q gv1 a1), (merge gv1 gv1 = join gv1 q gv5), (merge gv1 gv1 = join gv1 q a2), (merge gv1 gv1 = join gv1 q a1), (merge gv1 gv1 = join gv1 gv1 gv5), (merge gv1 gv1 = join gv1 gv1 a2), (merge gv1 gv1 = join gv1 gv1 a1), (merge gv1 gv1 = insert x q)
(merge gv1 gv1 = insert x gv1), (merge gv1 gv1 = insert n q), (merge gv1 gv1 = insert n gv1), (merge gv1 gv1 = carry q gv5), (merge gv1 gv1 = carry q a2), (merge gv1 gv1 = carry q a1), (merge gv1 gv1 = carry gv1 gv5), (merge gv1 gv1 = carry gv1 a2), (merge gv1 gv1 = carry gv1 a1), (merge gv1 gv1 = q ++ q)
(merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1), (heap_delete_max gv5 = q), (heap_delete_max gv5 = gv1), (heap_delete_max gv5 = carry q gv5), (heap_delete_max gv5 = carry q a2), (heap_delete_max gv5 = carry q a1), (heap_delete_max gv5 = carry gv1 gv5), (heap_delete_max gv5 = carry gv1 a2)
(heap_delete_max gv5 = carry gv1 a1), (heap_delete_max gv5 = q ++ q), (heap_delete_max gv5 = q ++ gv1), (heap_delete_max gv5 = gv1 ++ q), (heap_delete_max gv5 = gv1 ++ gv1), (heap_delete_max a2 = q), (heap_delete_max a2 = gv1), (heap_delete_max a2 = carry q gv5), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1)
(heap_delete_max a2 = carry gv1 gv5), (heap_delete_max a2 = carry gv1 a2), (heap_delete_max a2 = carry gv1 a1), (heap_delete_max a2 = q ++ q), (heap_delete_max a2 = q ++ gv1), (heap_delete_max a2 = gv1 ++ q), (heap_delete_max a2 = gv1 ++ gv1), (heap_delete_max a1 = q), (heap_delete_max a1 = gv1), (heap_delete_max a1 = carry q gv5)
(heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry gv1 gv5), (heap_delete_max a1 = carry gv1 a2), (heap_delete_max a1 = carry gv1 a1), (heap_delete_max a1 = q ++ q), (heap_delete_max a1 = q ++ gv1), (heap_delete_max a1 = gv1 ++ q), (heap_delete_max a1 = gv1 ++ gv1), (join q q gv5 = q)
(join q q gv5 = gv1), (join q q gv5 = heap_delete_max gv5), (join q q gv5 = heap_delete_max a2), (join q q gv5 = heap_delete_max a1), (join q q gv5 = insert x q), (join q q gv5 = insert x gv1), (join q q gv5 = insert n q), (join q q gv5 = insert n gv1), (join q q gv5 = carry q gv5), (join q q gv5 = carry q a2)
(join q q gv5 = carry q a1), (join q q gv5 = carry gv1 gv5), (join q q gv5 = carry gv1 a2), (join q q gv5 = carry gv1 a1), (join q q gv5 = q ++ q), (join q q gv5 = q ++ gv1), (join q q gv5 = gv1 ++ q), (join q q gv5 = gv1 ++ gv1), (join q q a2 = q), (join q q a2 = gv1)
(join q q a2 = heap_delete_max gv5), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = insert x q), (join q q a2 = insert x gv1), (join q q a2 = insert n q), (join q q a2 = insert n gv1), (join q q a2 = carry q gv5), (join q q a2 = carry q a2), (join q q a2 = carry q a1)
(join q q a2 = carry gv1 gv5), (join q q a2 = carry gv1 a2), (join q q a2 = carry gv1 a1), (join q q a2 = q ++ q), (join q q a2 = q ++ gv1), (join q q a2 = gv1 ++ q), (join q q a2 = gv1 ++ gv1), (join q q a1 = q), (join q q a1 = gv1), (join q q a1 = heap_delete_max gv5)
(join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = insert x q), (join q q a1 = insert x gv1), (join q q a1 = insert n q), (join q q a1 = insert n gv1), (join q q a1 = carry q gv5), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry gv1 gv5)
(join q q a1 = carry gv1 a2), (join q q a1 = carry gv1 a1), (join q q a1 = q ++ q), (join q q a1 = q ++ gv1), (join q q a1 = gv1 ++ q), (join q q a1 = gv1 ++ gv1), (join q gv1 gv5 = q), (join q gv1 gv5 = gv1), (join q gv1 gv5 = heap_delete_max gv5), (join q gv1 gv5 = heap_delete_max a2)
(join q gv1 gv5 = heap_delete_max a1), (join q gv1 gv5 = insert x q), (join q gv1 gv5 = insert x gv1), (join q gv1 gv5 = insert n q), (join q gv1 gv5 = insert n gv1), (join q gv1 gv5 = carry q gv5), (join q gv1 gv5 = carry q a2), (join q gv1 gv5 = carry q a1), (join q gv1 gv5 = carry gv1 gv5), (join q gv1 gv5 = carry gv1 a2)
(join q gv1 gv5 = carry gv1 a1), (join q gv1 gv5 = q ++ q), (join q gv1 gv5 = q ++ gv1), (join q gv1 gv5 = gv1 ++ q), (join q gv1 gv5 = gv1 ++ gv1), (join q gv1 a2 = q), (join q gv1 a2 = gv1), (join q gv1 a2 = heap_delete_max gv5), (join q gv1 a2 = heap_delete_max a2), (join q gv1 a2 = heap_delete_max a1)
(join q gv1 a2 = insert x q), (join q gv1 a2 = insert x gv1), (join q gv1 a2 = insert n q), (join q gv1 a2 = insert n gv1), (join q gv1 a2 = carry q gv5), (join q gv1 a2 = carry q a2), (join q gv1 a2 = carry q a1), (join q gv1 a2 = carry gv1 gv5), (join q gv1 a2 = carry gv1 a2), (join q gv1 a2 = carry gv1 a1)
(join q gv1 a2 = q ++ q), (join q gv1 a2 = q ++ gv1), (join q gv1 a2 = gv1 ++ q), (join q gv1 a2 = gv1 ++ gv1), (join q gv1 a1 = q), (join q gv1 a1 = gv1), (join q gv1 a1 = heap_delete_max gv5), (join q gv1 a1 = heap_delete_max a2), (join q gv1 a1 = heap_delete_max a1), (join q gv1 a1 = insert x q)
(join q gv1 a1 = insert x gv1), (join q gv1 a1 = insert n q), (join q gv1 a1 = insert n gv1), (join q gv1 a1 = carry q gv5), (join q gv1 a1 = carry q a2), (join q gv1 a1 = carry q a1), (join q gv1 a1 = carry gv1 gv5), (join q gv1 a1 = carry gv1 a2), (join q gv1 a1 = carry gv1 a1), (join q gv1 a1 = q ++ q)
(join q gv1 a1 = q ++ gv1), (join q gv1 a1 = gv1 ++ q), (join q gv1 a1 = gv1 ++ gv1), (join gv1 q gv5 = q), (join gv1 q gv5 = gv1), (join gv1 q gv5 = heap_delete_max gv5), (join gv1 q gv5 = heap_delete_max a2), (join gv1 q gv5 = heap_delete_max a1), (join gv1 q gv5 = insert x q), (join gv1 q gv5 = insert x gv1)
(join gv1 q gv5 = insert n q), (join gv1 q gv5 = insert n gv1), (join gv1 q gv5 = carry q gv5), (join gv1 q gv5 = carry q a2), (join gv1 q gv5 = carry q a1), (join gv1 q gv5 = carry gv1 gv5), (join gv1 q gv5 = carry gv1 a2), (join gv1 q gv5 = carry gv1 a1), (join gv1 q gv5 = q ++ q), (join gv1 q gv5 = q ++ gv1)
(join gv1 q gv5 = gv1 ++ q), (join gv1 q gv5 = gv1 ++ gv1), (join gv1 q a2 = q), (join gv1 q a2 = gv1), (join gv1 q a2 = heap_delete_max gv5), (join gv1 q a2 = heap_delete_max a2), (join gv1 q a2 = heap_delete_max a1), (join gv1 q a2 = insert x q), (join gv1 q a2 = insert x gv1), (join gv1 q a2 = insert n q)
(join gv1 q a2 = insert n gv1), (join gv1 q a2 = carry q gv5), (join gv1 q a2 = carry q a2), (join gv1 q a2 = carry q a1), (join gv1 q a2 = carry gv1 gv5), (join gv1 q a2 = carry gv1 a2), (join gv1 q a2 = carry gv1 a1), (join gv1 q a2 = q ++ q), (join gv1 q a2 = q ++ gv1), (join gv1 q a2 = gv1 ++ q)
(join gv1 q a2 = gv1 ++ gv1), (join gv1 q a1 = q), (join gv1 q a1 = gv1), (join gv1 q a1 = heap_delete_max gv5), (join gv1 q a1 = heap_delete_max a2), (join gv1 q a1 = heap_delete_max a1), (join gv1 q a1 = insert x q), (join gv1 q a1 = insert x gv1), (join gv1 q a1 = insert n q), (join gv1 q a1 = insert n gv1)
(join gv1 q a1 = carry q gv5), (join gv1 q a1 = carry q a2), (join gv1 q a1 = carry q a1), (join gv1 q a1 = carry gv1 gv5), (join gv1 q a1 = carry gv1 a2), (join gv1 q a1 = carry gv1 a1), (join gv1 q a1 = q ++ q), (join gv1 q a1 = q ++ gv1), (join gv1 q a1 = gv1 ++ q), (join gv1 q a1 = gv1 ++ gv1)
(join gv1 gv1 gv5 = q), (join gv1 gv1 gv5 = gv1), (join gv1 gv1 gv5 = heap_delete_max gv5), (join gv1 gv1 gv5 = heap_delete_max a2), (join gv1 gv1 gv5 = heap_delete_max a1), (join gv1 gv1 gv5 = insert x q), (join gv1 gv1 gv5 = insert x gv1), (join gv1 gv1 gv5 = insert n q), (join gv1 gv1 gv5 = insert n gv1), (join gv1 gv1 gv5 = carry q gv5)
(join gv1 gv1 gv5 = carry q a2), (join gv1 gv1 gv5 = carry q a1), (join gv1 gv1 gv5 = carry gv1 gv5), (join gv1 gv1 gv5 = carry gv1 a2), (join gv1 gv1 gv5 = carry gv1 a1), (join gv1 gv1 gv5 = q ++ q), (join gv1 gv1 gv5 = q ++ gv1), (join gv1 gv1 gv5 = gv1 ++ q), (join gv1 gv1 gv5 = gv1 ++ gv1), (join gv1 gv1 a2 = q)
(join gv1 gv1 a2 = gv1), (join gv1 gv1 a2 = heap_delete_max gv5), (join gv1 gv1 a2 = heap_delete_max a2), (join gv1 gv1 a2 = heap_delete_max a1), (join gv1 gv1 a2 = insert x q), (join gv1 gv1 a2 = insert x gv1), (join gv1 gv1 a2 = insert n q), (join gv1 gv1 a2 = insert n gv1), (join gv1 gv1 a2 = carry q gv5), (join gv1 gv1 a2 = carry q a2)
(join gv1 gv1 a2 = carry q a1), (join gv1 gv1 a2 = carry gv1 gv5), (join gv1 gv1 a2 = carry gv1 a2), (join gv1 gv1 a2 = carry gv1 a1), (join gv1 gv1 a2 = q ++ q), (join gv1 gv1 a2 = q ++ gv1), (join gv1 gv1 a2 = gv1 ++ q), (join gv1 gv1 a2 = gv1 ++ gv1), (join gv1 gv1 a1 = q), (join gv1 gv1 a1 = gv1)
(join gv1 gv1 a1 = heap_delete_max gv5), (join gv1 gv1 a1 = heap_delete_max a2), (join gv1 gv1 a1 = heap_delete_max a1), (join gv1 gv1 a1 = insert x q), (join gv1 gv1 a1 = insert x gv1), (join gv1 gv1 a1 = insert n q), (join gv1 gv1 a1 = insert n gv1), (join gv1 gv1 a1 = carry q gv5), (join gv1 gv1 a1 = carry q a2), (join gv1 gv1 a1 = carry q a1)
(join gv1 gv1 a1 = carry gv1 gv5), (join gv1 gv1 a1 = carry gv1 a2), (join gv1 gv1 a1 = carry gv1 a1), (join gv1 gv1 a1 = q ++ q), (join gv1 gv1 a1 = q ++ gv1), (join gv1 gv1 a1 = gv1 ++ q), (join gv1 gv1 a1 = gv1 ++ gv1), (insert x q = q), (insert x q = gv1), (insert x q = heap_delete_max gv5)
(insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1), (insert x q = carry q gv5), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry gv1 gv5), (insert x q = carry gv1 a2), (insert x q = carry gv1 a1), (insert x q = q ++ q), (insert x q = q ++ gv1)
(insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1), (insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = heap_delete_max gv5), (insert x gv1 = heap_delete_max a2), (insert x gv1 = heap_delete_max a1), (insert x gv1 = carry q gv5), (insert x gv1 = carry q a2), (insert x gv1 = carry q a1)
(insert x gv1 = carry gv1 gv5), (insert x gv1 = carry gv1 a2), (insert x gv1 = carry gv1 a1), (insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q), (insert x gv1 = gv1 ++ gv1), (insert n q = q), (insert n q = gv1), (insert n q = heap_delete_max gv5)
(insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1), (insert n q = carry q gv5), (insert n q = carry q a2), (insert n q = carry q a1), (insert n q = carry gv1 gv5), (insert n q = carry gv1 a2), (insert n q = carry gv1 a1), (insert n q = q ++ q), (insert n q = q ++ gv1)
(insert n q = gv1 ++ q), (insert n q = gv1 ++ gv1), (insert n gv1 = q), (insert n gv1 = gv1), (insert n gv1 = heap_delete_max gv5), (insert n gv1 = heap_delete_max a2), (insert n gv1 = heap_delete_max a1), (insert n gv1 = carry q gv5), (insert n gv1 = carry q a2), (insert n gv1 = carry q a1)
(insert n gv1 = carry gv1 gv5), (insert n gv1 = carry gv1 a2), (insert n gv1 = carry gv1 a1), (insert n gv1 = q ++ q), (insert n gv1 = q ++ gv1), (insert n gv1 = gv1 ++ q), (insert n gv1 = gv1 ++ gv1), (carry q gv5 = q), (carry q gv5 = gv1), (carry q gv5 = q ++ q)
(carry q gv5 = q ++ gv1), (carry q gv5 = gv1 ++ q), (carry q gv5 = gv1 ++ gv1), (carry q a2 = q), (carry q a2 = gv1), (carry q a2 = q ++ q), (carry q a2 = q ++ gv1), (carry q a2 = gv1 ++ q), (carry q a2 = gv1 ++ gv1), (carry q a1 = q)
(carry q a1 = gv1), (carry q a1 = q ++ q), (carry q a1 = q ++ gv1), (carry q a1 = gv1 ++ q), (carry q a1 = gv1 ++ gv1), (carry gv1 gv5 = q), (carry gv1 gv5 = gv1), (carry gv1 gv5 = q ++ q), (carry gv1 gv5 = q ++ gv1), (carry gv1 gv5 = gv1 ++ q)
(carry gv1 gv5 = gv1 ++ gv1), (carry gv1 a2 = q), (carry gv1 a2 = gv1), (carry gv1 a2 = q ++ q), (carry gv1 a2 = q ++ gv1), (carry gv1 a2 = gv1 ++ q), (carry gv1 a2 = gv1 ++ gv1), (carry gv1 a1 = q), (carry gv1 a1 = gv1), (carry gv1 a1 = q ++ q)
(carry gv1 a1 = q ++ gv1), (carry gv1 a1 = gv1 ++ q), (carry gv1 a1 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q)
(gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = heap_delete_max gv5), ([] = heap_delete_max a2), ([] = heap_delete_max a1)
([] = join q q gv5), ([] = join q q a2), ([] = join q q a1), ([] = join q gv1 gv5), ([] = join q gv1 a2), ([] = join q gv1 a1), ([] = join gv1 q gv5), ([] = join gv1 q a2), ([] = join gv1 q a1), ([] = join gv1 gv1 gv5)
([] = join gv1 gv1 a2), ([] = join gv1 gv1 a1), ([] = insert x q), ([] = insert x gv1), ([] = insert n q), ([] = insert n gv1), ([] = carry q gv5), ([] = carry q a2), ([] = carry q a1), ([] = carry gv1 gv5)
([] = carry gv1 a2), ([] = carry gv1 a1), ([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv1), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv1)
((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux n q), ((q, gv1) = delete_max_aux n gv1), ((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, q) = delete_max_aux n q), ((gv1, q) = delete_max_aux n gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1)
((gv1, gv1) = delete_max_aux n q), ((gv1, gv1) = delete_max_aux n gv1), (Node x gv5 gv5 = gv5), (Node x gv5 gv5 = a2), (Node x gv5 gv5 = a1), (Node x gv5 gv5 = smash gv5 gv5), (Node x gv5 gv5 = smash gv5 a2), (Node x gv5 gv5 = smash gv5 a1), (Node x gv5 gv5 = smash a2 gv5), (Node x gv5 gv5 = smash a2 a2)
(Node x gv5 gv5 = smash a2 a1), (Node x gv5 gv5 = smash a1 gv5), (Node x gv5 gv5 = smash a1 a2), (Node x gv5 gv5 = smash a1 a1), (Node x gv5 a2 = gv5), (Node x gv5 a2 = a2), (Node x gv5 a2 = a1), (Node x gv5 a2 = smash gv5 gv5), (Node x gv5 a2 = smash gv5 a2), (Node x gv5 a2 = smash gv5 a1)
(Node x gv5 a2 = smash a2 gv5), (Node x gv5 a2 = smash a2 a2), (Node x gv5 a2 = smash a2 a1), (Node x gv5 a2 = smash a1 gv5), (Node x gv5 a2 = smash a1 a2), (Node x gv5 a2 = smash a1 a1), (Node x gv5 a1 = gv5), (Node x gv5 a1 = a2), (Node x gv5 a1 = a1), (Node x gv5 a1 = smash gv5 gv5)
(Node x gv5 a1 = smash gv5 a2), (Node x gv5 a1 = smash gv5 a1), (Node x gv5 a1 = smash a2 gv5), (Node x gv5 a1 = smash a2 a2), (Node x gv5 a1 = smash a2 a1), (Node x gv5 a1 = smash a1 gv5), (Node x gv5 a1 = smash a1 a2), (Node x gv5 a1 = smash a1 a1), (Node x a2 gv5 = gv5), (Node x a2 gv5 = a2)
(Node x a2 gv5 = a1), (Node x a2 gv5 = smash gv5 gv5), (Node x a2 gv5 = smash gv5 a2), (Node x a2 gv5 = smash gv5 a1), (Node x a2 gv5 = smash a2 gv5), (Node x a2 gv5 = smash a2 a2), (Node x a2 gv5 = smash a2 a1), (Node x a2 gv5 = smash a1 gv5), (Node x a2 gv5 = smash a1 a2), (Node x a2 gv5 = smash a1 a1)
(Node x a2 a2 = gv5), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = smash gv5 gv5), (Node x a2 a2 = smash gv5 a2), (Node x a2 a2 = smash gv5 a1), (Node x a2 a2 = smash a2 gv5), (Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a1 gv5)
(Node x a2 a2 = smash a1 a2), (Node x a2 a2 = smash a1 a1), (Node x a2 a1 = gv5), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = smash gv5 gv5), (Node x a2 a1 = smash gv5 a2), (Node x a2 a1 = smash gv5 a1), (Node x a2 a1 = smash a2 gv5), (Node x a2 a1 = smash a2 a2)
(Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a1 gv5), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a1 gv5 = gv5), (Node x a1 gv5 = a2), (Node x a1 gv5 = a1), (Node x a1 gv5 = smash gv5 gv5), (Node x a1 gv5 = smash gv5 a2), (Node x a1 gv5 = smash gv5 a1)
(Node x a1 gv5 = smash a2 gv5), (Node x a1 gv5 = smash a2 a2), (Node x a1 gv5 = smash a2 a1), (Node x a1 gv5 = smash a1 gv5), (Node x a1 gv5 = smash a1 a2), (Node x a1 gv5 = smash a1 a1), (Node x a1 a2 = gv5), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = smash gv5 gv5)
(Node x a1 a2 = smash gv5 a2), (Node x a1 a2 = smash gv5 a1), (Node x a1 a2 = smash a2 gv5), (Node x a1 a2 = smash a2 a2), (Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a1 gv5), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a1 = gv5), (Node x a1 a1 = a2)
(Node x a1 a1 = a1), (Node x a1 a1 = smash gv5 gv5), (Node x a1 a1 = smash gv5 a2), (Node x a1 a1 = smash gv5 a1), (Node x a1 a1 = smash a2 gv5), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a1 gv5), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1)
(Node n gv5 gv5 = gv5), (Node n gv5 gv5 = a2), (Node n gv5 gv5 = a1), (Node n gv5 gv5 = smash gv5 gv5), (Node n gv5 gv5 = smash gv5 a2), (Node n gv5 gv5 = smash gv5 a1), (Node n gv5 gv5 = smash a2 gv5), (Node n gv5 gv5 = smash a2 a2), (Node n gv5 gv5 = smash a2 a1), (Node n gv5 gv5 = smash a1 gv5)
(Node n gv5 gv5 = smash a1 a2), (Node n gv5 gv5 = smash a1 a1), (Node n gv5 a2 = gv5), (Node n gv5 a2 = a2), (Node n gv5 a2 = a1), (Node n gv5 a2 = smash gv5 gv5), (Node n gv5 a2 = smash gv5 a2), (Node n gv5 a2 = smash gv5 a1), (Node n gv5 a2 = smash a2 gv5), (Node n gv5 a2 = smash a2 a2)
(Node n gv5 a2 = smash a2 a1), (Node n gv5 a2 = smash a1 gv5), (Node n gv5 a2 = smash a1 a2), (Node n gv5 a2 = smash a1 a1), (Node n gv5 a1 = gv5), (Node n gv5 a1 = a2), (Node n gv5 a1 = a1), (Node n gv5 a1 = smash gv5 gv5), (Node n gv5 a1 = smash gv5 a2), (Node n gv5 a1 = smash gv5 a1)
(Node n gv5 a1 = smash a2 gv5), (Node n gv5 a1 = smash a2 a2), (Node n gv5 a1 = smash a2 a1), (Node n gv5 a1 = smash a1 gv5), (Node n gv5 a1 = smash a1 a2), (Node n gv5 a1 = smash a1 a1), (Node n a2 gv5 = gv5), (Node n a2 gv5 = a2), (Node n a2 gv5 = a1), (Node n a2 gv5 = smash gv5 gv5)
(Node n a2 gv5 = smash gv5 a2), (Node n a2 gv5 = smash gv5 a1), (Node n a2 gv5 = smash a2 gv5), (Node n a2 gv5 = smash a2 a2), (Node n a2 gv5 = smash a2 a1), (Node n a2 gv5 = smash a1 gv5), (Node n a2 gv5 = smash a1 a2), (Node n a2 gv5 = smash a1 a1), (Node n a2 a2 = gv5), (Node n a2 a2 = a2)
(Node n a2 a2 = a1), (Node n a2 a2 = smash gv5 gv5), (Node n a2 a2 = smash gv5 a2), (Node n a2 a2 = smash gv5 a1), (Node n a2 a2 = smash a2 gv5), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 gv5), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1)
(Node n a2 a1 = gv5), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash gv5 gv5), (Node n a2 a1 = smash gv5 a2), (Node n a2 a1 = smash gv5 a1), (Node n a2 a1 = smash a2 gv5), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 gv5)
(Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a1 gv5 = gv5), (Node n a1 gv5 = a2), (Node n a1 gv5 = a1), (Node n a1 gv5 = smash gv5 gv5), (Node n a1 gv5 = smash gv5 a2), (Node n a1 gv5 = smash gv5 a1), (Node n a1 gv5 = smash a2 gv5), (Node n a1 gv5 = smash a2 a2)
(Node n a1 gv5 = smash a2 a1), (Node n a1 gv5 = smash a1 gv5), (Node n a1 gv5 = smash a1 a2), (Node n a1 gv5 = smash a1 a1), (Node n a1 a2 = gv5), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash gv5 gv5), (Node n a1 a2 = smash gv5 a2), (Node n a1 a2 = smash gv5 a1)
(Node n a1 a2 = smash a2 gv5), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 gv5), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = gv5), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash gv5 gv5)
(Node n a1 a1 = smash gv5 a2), (Node n a1 a1 = smash gv5 a1), (Node n a1 a1 = smash a2 gv5), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 gv5), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (smash gv5 gv5 = gv5), (smash gv5 gv5 = a2)
(smash gv5 gv5 = a1), (smash gv5 a2 = gv5), (smash gv5 a2 = a2), (smash gv5 a2 = a1), (smash gv5 a1 = gv5), (smash gv5 a1 = a2), (smash gv5 a1 = a1), (smash a2 gv5 = gv5), (smash a2 gv5 = a2), (smash a2 gv5 = a1)
(smash a2 a2 = gv5), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = gv5), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 gv5 = gv5), (smash a1 gv5 = a2), (smash a1 gv5 = a1), (smash a1 a2 = gv5)
(smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = gv5), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node x gv5 gv5), (Leaf = Node x gv5 a2), (Leaf = Node x gv5 a1), (Leaf = Node x a2 gv5), (Leaf = Node x a2 a2)
(Leaf = Node x a2 a1), (Leaf = Node x a1 gv5), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node n gv5 gv5), (Leaf = Node n gv5 a2), (Leaf = Node n gv5 a1), (Leaf = Node n a2 gv5), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1)
(Leaf = Node n a1 gv5), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = smash gv5 gv5), (Leaf = smash gv5 a2), (Leaf = smash gv5 a1), (Leaf = smash a2 gv5), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 gv5)
(Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' x q = x), (find_max' x q = n), (find_max' x gv1 = x), (find_max' x gv1 = n), (find_max' n q = x), (find_max' n q = n), (find_max' n gv1 = x), (find_max' n gv1 = n)
(length q = x), (length q = n), (length q = find_max' x q), (length q = find_max' x gv1), (length q = find_max' n q), (length q = find_max' n gv1), (length gv1 = x), (length gv1 = n), (length gv1 = find_max' x q), (length gv1 = find_max' x gv1)
(length gv1 = find_max' n q), (length gv1 = find_max' n gv1), (Some x = find_max q), (Some x = find_max gv1), (Some n = find_max q), (Some n = find_max gv1), (None = Some x), (None = Some n), (None = find_max q), (None = find_max gv1)
(None = Some gv5), (None = Some a2), (None = Some a1), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (n >=? x))
((x >? n) = (n >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n))

Label: 9 (9)
(priq gv2), (priq gv1), (priqq x gv2), (priqq x gv1), (Permutation gv2 gv2), (Permutation gv2 gv1), (Permutation gv1 gv2), (Permutation gv1 gv1), (x < x), (x <= x)
(x = x), (gv2 = gv2), (gv2 = gv1), (gv1 = gv2), (gv1 = gv1), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs gv2 [])
(Abs gv1 []), (Abs (merge gv2 gv2) []), (Abs (merge gv2 gv1) []), (Abs (merge gv1 gv2) []), (Abs (merge gv1 gv1) []), (Abs (insert x gv2) []), (Abs (insert x gv1) []), (Abs (gv2 ++ gv2) []), (Abs (gv2 ++ gv1) []), (Abs (gv1 ++ gv2) [])
(Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems gv2 []), (priqueue_elems gv1 []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (merge gv2 gv1) []), (priqueue_elems (merge gv1 gv2) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (insert x gv2) []), (priqueue_elems (insert x gv1) [])
(priqueue_elems (gv2 ++ gv2) []), (priqueue_elems (gv2 ++ gv1) []), (priqueue_elems (gv1 ++ gv2) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems Leaf []), (priq (merge gv2 gv2)), (priq (merge gv2 gv1)), (priq (merge gv1 gv2)), (priq (merge gv1 gv1))
(priq (insert x gv2)), (priq (insert x gv1)), (priq (gv2 ++ gv2)), (priq (gv2 ++ gv1)), (priq (gv1 ++ gv2)), (priq (gv1 ++ gv1)), (priqq x (merge gv2 gv2)), (priqq x (merge gv2 gv1)), (priqq x (merge gv1 gv2)), (priqq x (merge gv1 gv1))
(priqq x (insert x gv2)), (priqq x (insert x gv1)), (priqq x (gv2 ++ gv2)), (priqq x (gv2 ++ gv1)), (priqq x (gv1 ++ gv2)), (priqq x (gv1 ++ gv1)), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) gv1), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (merge gv2 gv1))
(priqq (find_max' x gv2) (merge gv1 gv2)), (priqq (find_max' x gv2) (merge gv1 gv1)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (insert x gv1)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ gv1)), (priqq (find_max' x gv2) (gv1 ++ gv2)), (priqq (find_max' x gv2) (gv1 ++ gv1)), (priqq (find_max' x gv1) gv2), (priqq (find_max' x gv1) gv1)
(priqq (find_max' x gv1) (merge gv2 gv2)), (priqq (find_max' x gv1) (merge gv2 gv1)), (priqq (find_max' x gv1) (merge gv1 gv2)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (insert x gv2)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (gv2 ++ gv2)), (priqq (find_max' x gv1) (gv2 ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ gv2)), (priqq (find_max' x gv1) (gv1 ++ gv1))
(priqq (length gv2) gv2), (priqq (length gv2) gv1), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (merge gv2 gv1)), (priqq (length gv2) (merge gv1 gv2)), (priqq (length gv2) (merge gv1 gv1)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (insert x gv1)), (priqq (length gv2) (gv2 ++ gv2)), (priqq (length gv2) (gv2 ++ gv1))
(priqq (length gv2) (gv1 ++ gv2)), (priqq (length gv2) (gv1 ++ gv1)), (priqq (length gv1) gv2), (priqq (length gv1) gv1), (priqq (length gv1) (merge gv2 gv2)), (priqq (length gv1) (merge gv2 gv1)), (priqq (length gv1) (merge gv1 gv2)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (insert x gv2)), (priqq (length gv1) (insert x gv1))
(priqq (length gv1) (gv2 ++ gv2)), (priqq (length gv1) (gv2 ++ gv1)), (priqq (length gv1) (gv1 ++ gv2)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heapp x x Leaf), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (length gv2) Leaf), (pow2heapp x (length gv1) Leaf), (pow2heapp (find_max' x gv2) x Leaf)
(pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (find_max' x gv2) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (length gv2) Leaf), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (length gv2) x Leaf)
(pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (find_max' x gv1) Leaf), (pow2heapp (length gv2) (length gv2) Leaf), (pow2heapp (length gv2) (length gv1) Leaf), (pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) (find_max' x gv2) Leaf), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (length gv2) Leaf), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (merge gv2 gv1)), (Permutation gv2 (merge gv1 gv2)), (Permutation gv2 (merge gv1 gv1)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (insert x gv1)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ gv1)), (Permutation gv2 (gv1 ++ gv2)), (Permutation gv2 (gv1 ++ gv1)), (Permutation gv2 [])
(Permutation gv1 (merge gv2 gv2)), (Permutation gv1 (merge gv2 gv1)), (Permutation gv1 (merge gv1 gv2)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (insert x gv2)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (gv2 ++ gv2)), (Permutation gv1 (gv2 ++ gv1)), (Permutation gv1 (gv1 ++ gv2)), (Permutation gv1 (gv1 ++ gv1))
(Permutation gv1 []), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) gv1), (Permutation (merge gv2 gv2) (merge gv2 gv1)), (Permutation (merge gv2 gv2) (merge gv1 gv2)), (Permutation (merge gv2 gv2) (merge gv1 gv1)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (insert x gv1)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ gv1))
(Permutation (merge gv2 gv2) (gv1 ++ gv2)), (Permutation (merge gv2 gv2) (gv1 ++ gv1)), (Permutation (merge gv2 gv2) []), (Permutation (merge gv2 gv1) gv2), (Permutation (merge gv2 gv1) gv1), (Permutation (merge gv2 gv1) (merge gv2 gv2)), (Permutation (merge gv2 gv1) (merge gv1 gv2)), (Permutation (merge gv2 gv1) (merge gv1 gv1)), (Permutation (merge gv2 gv1) (insert x gv2)), (Permutation (merge gv2 gv1) (insert x gv1))
(Permutation (merge gv2 gv1) (gv2 ++ gv2)), (Permutation (merge gv2 gv1) (gv2 ++ gv1)), (Permutation (merge gv2 gv1) (gv1 ++ gv2)), (Permutation (merge gv2 gv1) (gv1 ++ gv1)), (Permutation (merge gv2 gv1) []), (Permutation (merge gv1 gv2) gv2), (Permutation (merge gv1 gv2) gv1), (Permutation (merge gv1 gv2) (merge gv2 gv2)), (Permutation (merge gv1 gv2) (merge gv2 gv1)), (Permutation (merge gv1 gv2) (merge gv1 gv1))
(Permutation (merge gv1 gv2) (insert x gv2)), (Permutation (merge gv1 gv2) (insert x gv1)), (Permutation (merge gv1 gv2) (gv2 ++ gv2)), (Permutation (merge gv1 gv2) (gv2 ++ gv1)), (Permutation (merge gv1 gv2) (gv1 ++ gv2)), (Permutation (merge gv1 gv2) (gv1 ++ gv1)), (Permutation (merge gv1 gv2) []), (Permutation (merge gv1 gv1) gv2), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge gv2 gv2))
(Permutation (merge gv1 gv1) (merge gv2 gv1)), (Permutation (merge gv1 gv1) (merge gv1 gv2)), (Permutation (merge gv1 gv1) (insert x gv2)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (gv2 ++ gv2)), (Permutation (merge gv1 gv1) (gv2 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ gv2)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (insert x gv2) gv2)
(Permutation (insert x gv2) gv1), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (merge gv2 gv1)), (Permutation (insert x gv2) (merge gv1 gv2)), (Permutation (insert x gv2) (merge gv1 gv1)), (Permutation (insert x gv2) (insert x gv1)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) (gv2 ++ gv1)), (Permutation (insert x gv2) (gv1 ++ gv2)), (Permutation (insert x gv2) (gv1 ++ gv1))
(Permutation (insert x gv2) []), (Permutation (insert x gv1) gv2), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (merge gv2 gv2)), (Permutation (insert x gv1) (merge gv2 gv1)), (Permutation (insert x gv1) (merge gv1 gv2)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (insert x gv2)), (Permutation (insert x gv1) (gv2 ++ gv2)), (Permutation (insert x gv1) (gv2 ++ gv1))
(Permutation (insert x gv1) (gv1 ++ gv2)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) gv1), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 gv1)), (Permutation (gv2 ++ gv2) (merge gv1 gv2)), (Permutation (gv2 ++ gv2) (merge gv1 gv1)), (Permutation (gv2 ++ gv2) (insert x gv2))
(Permutation (gv2 ++ gv2) (insert x gv1)), (Permutation (gv2 ++ gv2) (gv2 ++ gv1)), (Permutation (gv2 ++ gv2) (gv1 ++ gv2)), (Permutation (gv2 ++ gv2) (gv1 ++ gv1)), (Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ gv1) gv2), (Permutation (gv2 ++ gv1) gv1), (Permutation (gv2 ++ gv1) (merge gv2 gv2)), (Permutation (gv2 ++ gv1) (merge gv2 gv1)), (Permutation (gv2 ++ gv1) (merge gv1 gv2))
(Permutation (gv2 ++ gv1) (merge gv1 gv1)), (Permutation (gv2 ++ gv1) (insert x gv2)), (Permutation (gv2 ++ gv1) (insert x gv1)), (Permutation (gv2 ++ gv1) (gv2 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ gv1)), (Permutation (gv2 ++ gv1) []), (Permutation (gv1 ++ gv2) gv2), (Permutation (gv1 ++ gv2) gv1), (Permutation (gv1 ++ gv2) (merge gv2 gv2))
(Permutation (gv1 ++ gv2) (merge gv2 gv1)), (Permutation (gv1 ++ gv2) (merge gv1 gv2)), (Permutation (gv1 ++ gv2) (merge gv1 gv1)), (Permutation (gv1 ++ gv2) (insert x gv2)), (Permutation (gv1 ++ gv2) (insert x gv1)), (Permutation (gv1 ++ gv2) (gv2 ++ gv2)), (Permutation (gv1 ++ gv2) (gv2 ++ gv1)), (Permutation (gv1 ++ gv2) (gv1 ++ gv1)), (Permutation (gv1 ++ gv2) []), (Permutation (gv1 ++ gv1) gv2)
(Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (merge gv2 gv2)), (Permutation (gv1 ++ gv1) (merge gv2 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 gv2)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (insert x gv2)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (gv2 ++ gv2)), (Permutation (gv1 ++ gv1) (gv2 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ gv2))
(Permutation (gv1 ++ gv1) []), (Permutation [] gv2), (Permutation [] gv1), (Permutation [] (merge gv2 gv2)), (Permutation [] (merge gv2 gv1)), (Permutation [] (merge gv1 gv2)), (Permutation [] (merge gv1 gv1)), (Permutation [] (insert x gv2)), (Permutation [] (insert x gv1)), (Permutation [] (gv2 ++ gv2))
(Permutation [] (gv2 ++ gv1)), (Permutation [] (gv1 ++ gv2)), (Permutation [] (gv1 ++ gv1)), (In Leaf gv2), (In Leaf gv1), (In Leaf (merge gv2 gv2)), (In Leaf (merge gv2 gv1)), (In Leaf (merge gv1 gv2)), (In Leaf (merge gv1 gv1)), (In Leaf (insert x gv2))
(In Leaf (insert x gv1)), (In Leaf (gv2 ++ gv2)), (In Leaf (gv2 ++ gv1)), (In Leaf (gv1 ++ gv2)), (In Leaf (gv1 ++ gv1)), (x < find_max' x gv2), (x < find_max' x gv1), (x < length gv2), (x < length gv1), (find_max' x gv2 < x)
(find_max' x gv2 < find_max' x gv1), (find_max' x gv2 < length gv2), (find_max' x gv2 < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < find_max' x gv2), (find_max' x gv1 < length gv2), (find_max' x gv1 < length gv1), (length gv2 < x), (length gv2 < find_max' x gv2), (length gv2 < find_max' x gv1)
(length gv2 < length gv1), (length gv1 < x), (length gv1 < find_max' x gv2), (length gv1 < find_max' x gv1), (length gv1 < length gv2), (x <= find_max' x gv2), (x <= find_max' x gv1), (x <= length gv2), (x <= length gv1), (find_max' x gv2 <= x)
(find_max' x gv2 <= find_max' x gv1), (find_max' x gv2 <= length gv2), (find_max' x gv2 <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= find_max' x gv2), (find_max' x gv1 <= length gv2), (find_max' x gv1 <= length gv1), (length gv2 <= x), (length gv2 <= find_max' x gv2), (length gv2 <= find_max' x gv1)
(length gv2 <= length gv1), (length gv1 <= x), (length gv1 <= find_max' x gv2), (length gv1 <= find_max' x gv1), (length gv1 <= length gv2), (~ priq gv2), (~ priq gv1), (~ priqq x gv2), (~ priqq x gv1), (~ Permutation gv2 gv2)
(~ Permutation gv2 gv1), (~ Permutation gv1 gv2), (~ Permutation gv1 gv1), (~ x < x), (~ x <= x), (x <> x), (gv2 <> gv2), (gv2 <> gv1), (gv1 <> gv2), (gv1 <> gv1)
(None = Some gv2), (None = Some gv1), (merge gv2 gv2 = gv2), (merge gv2 gv2 = gv1), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = insert x gv1), (merge gv2 gv2 = gv2 ++ gv2), (merge gv2 gv2 = gv2 ++ gv1), (merge gv2 gv2 = gv1 ++ gv2), (merge gv2 gv2 = gv1 ++ gv1)
(merge gv2 gv1 = gv2), (merge gv2 gv1 = gv1), (merge gv2 gv1 = insert x gv2), (merge gv2 gv1 = insert x gv1), (merge gv2 gv1 = gv2 ++ gv2), (merge gv2 gv1 = gv2 ++ gv1), (merge gv2 gv1 = gv1 ++ gv2), (merge gv2 gv1 = gv1 ++ gv1), (merge gv1 gv2 = gv2), (merge gv1 gv2 = gv1)
(merge gv1 gv2 = insert x gv2), (merge gv1 gv2 = insert x gv1), (merge gv1 gv2 = gv2 ++ gv2), (merge gv1 gv2 = gv2 ++ gv1), (merge gv1 gv2 = gv1 ++ gv2), (merge gv1 gv2 = gv1 ++ gv1), (merge gv1 gv1 = gv2), (merge gv1 gv1 = gv1), (merge gv1 gv1 = insert x gv2), (merge gv1 gv1 = insert x gv1)
(merge gv1 gv1 = gv2 ++ gv2), (merge gv1 gv1 = gv2 ++ gv1), (merge gv1 gv1 = gv1 ++ gv2), (merge gv1 gv1 = gv1 ++ gv1), (insert x gv2 = gv2), (insert x gv2 = gv1), (insert x gv2 = gv2 ++ gv2), (insert x gv2 = gv2 ++ gv1), (insert x gv2 = gv1 ++ gv2), (insert x gv2 = gv1 ++ gv1)
(insert x gv1 = gv2), (insert x gv1 = gv1), (insert x gv1 = gv2 ++ gv2), (insert x gv1 = gv2 ++ gv1), (insert x gv1 = gv1 ++ gv2), (insert x gv1 = gv1 ++ gv1), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = gv1), (gv2 ++ gv1 = gv2), (gv2 ++ gv1 = gv1)
(gv1 ++ gv2 = gv2), (gv1 ++ gv2 = gv1), (gv1 ++ gv1 = gv2), (gv1 ++ gv1 = gv1), ([] = gv2), ([] = gv1), ([] = merge gv2 gv2), ([] = merge gv2 gv1), ([] = merge gv1 gv2), ([] = merge gv1 gv1)
([] = insert x gv2), ([] = insert x gv1), ([] = gv2 ++ gv2), ([] = gv2 ++ gv1), ([] = gv1 ++ gv2), ([] = gv1 ++ gv1), ((gv2, gv2) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux x gv1), ((gv2, gv1) = delete_max_aux x gv2), ((gv2, gv1) = delete_max_aux x gv1)
((gv1, gv2) = delete_max_aux x gv2), ((gv1, gv2) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux x gv2), ((gv1, gv1) = delete_max_aux x gv1), (find_max' x gv2 = x), (find_max' x gv1 = x), (length gv2 = x), (length gv2 = find_max' x gv2), (length gv2 = find_max' x gv1), (length gv1 = x)
(length gv1 = find_max' x gv2), (length gv1 = find_max' x gv1), (Some x = find_max gv2), (Some x = find_max gv1), (None = Some x), (None = find_max gv2), (None = find_max gv1), ((x >? x) = (x >=? x))

Label: 10 (10)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (priqq n q), (priqq n gv1), (pow2heap x a2), (pow2heap x a1), (pow2heap n a2), (pow2heap n a1)
(pow2heapp x x a2), (pow2heapp x x a1), (pow2heapp x n a2), (pow2heapp x n a1), (pow2heapp n x a2), (pow2heapp n x a1), (pow2heapp n n a2), (pow2heapp n n a1), (Permutation q q), (Permutation q gv1)
(Permutation gv1 q), (Permutation gv1 gv1), (In a2 q), (In a2 gv1), (In a1 q), (In a1 gv1), (x < x), (x < n), (n < x), (n < n)
(x <= x), (x <= n), (n <= x), (n <= n), (a2 = a2), (a2 = a1), (a1 = a2), (a1 = a1), (x = x), (x = n)
(n = x), (n = n), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1), (false = (x >? x)), (false = (x >? n)), (false = (n >? x)), (false = (n >? n))
(false = (x >=? x)), (false = (x >=? n)), (false = (n >=? x)), (false = (n >=? n)), (true = (x >? x)), (true = (x >? n)), (true = (n >? x)), (true = (n >? n)), (true = (x >=? x)), (true = (x >=? n))
(true = (n >=? x)), (true = (n >=? n)), (Abs q []), (Abs gv1 []), (Abs (a2 :: q) []), (Abs (a2 :: gv1) []), (Abs (a1 :: q) []), (Abs (a1 :: gv1) []), (Abs (merge q q) []), (Abs (merge q gv1) [])
(Abs (merge gv1 q) []), (Abs (merge gv1 gv1) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (join q q a2) []), (Abs (join q q a1) []), (Abs (join q gv1 a2) []), (Abs (join q gv1 a1) []), (Abs (join gv1 q a2) []), (Abs (join gv1 q a1) [])
(Abs (join gv1 gv1 a2) []), (Abs (join gv1 gv1 a1) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (insert n q) []), (Abs (insert n gv1) []), (Abs (carry q a2) []), (Abs (carry q a1) []), (Abs (carry gv1 a2) []), (Abs (carry gv1 a1) [])
(Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (a2 :: q) []), (priqueue_elems (a2 :: gv1) []), (priqueue_elems (a1 :: q) [])
(priqueue_elems (a1 :: gv1) []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join q q a2) []), (priqueue_elems (join q q a1) []), (priqueue_elems (join q gv1 a2) [])
(priqueue_elems (join q gv1 a1) []), (priqueue_elems (join gv1 q a2) []), (priqueue_elems (join gv1 q a1) []), (priqueue_elems (join gv1 gv1 a2) []), (priqueue_elems (join gv1 gv1 a1) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv1) []), (priqueue_elems (insert n q) []), (priqueue_elems (insert n gv1) []), (priqueue_elems (carry q a2) [])
(priqueue_elems (carry q a1) []), (priqueue_elems (carry gv1 a2) []), (priqueue_elems (carry gv1 a1) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 [])
(tree_elems (Node x a2 a2) []), (tree_elems (Node x a2 a1) []), (tree_elems (Node x a1 a2) []), (tree_elems (Node x a1 a1) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) [])
(tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf []), (priq (a2 :: q)), (priq (a2 :: gv1)), (priq (a1 :: q)), (priq (a1 :: gv1)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q))
(priq (merge gv1 gv1)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (join q q a2)), (priq (join q q a1)), (priq (join q gv1 a2)), (priq (join q gv1 a1)), (priq (join gv1 q a2)), (priq (join gv1 q a1)), (priq (join gv1 gv1 a2))
(priq (join gv1 gv1 a1)), (priq (insert x q)), (priq (insert x gv1)), (priq (insert n q)), (priq (insert n gv1)), (priq (carry q a2)), (priq (carry q a1)), (priq (carry gv1 a2)), (priq (carry gv1 a1)), (priq (q ++ q))
(priq (q ++ gv1)), (priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priqq x (a2 :: q)), (priqq x (a2 :: gv1)), (priqq x (a1 :: q)), (priqq x (a1 :: gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q))
(priqq x (merge gv1 gv1)), (priqq x (heap_delete_max a2)), (priqq x (heap_delete_max a1)), (priqq x (join q q a2)), (priqq x (join q q a1)), (priqq x (join q gv1 a2)), (priqq x (join q gv1 a1)), (priqq x (join gv1 q a2)), (priqq x (join gv1 q a1)), (priqq x (join gv1 gv1 a2))
(priqq x (join gv1 gv1 a1)), (priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (insert n q)), (priqq x (insert n gv1)), (priqq x (carry q a2)), (priqq x (carry q a1)), (priqq x (carry gv1 a2)), (priqq x (carry gv1 a1)), (priqq x (q ++ q))
(priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1)), (priqq n (a2 :: q)), (priqq n (a2 :: gv1)), (priqq n (a1 :: q)), (priqq n (a1 :: gv1)), (priqq n (merge q q)), (priqq n (merge q gv1)), (priqq n (merge gv1 q))
(priqq n (merge gv1 gv1)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join q q a2)), (priqq n (join q q a1)), (priqq n (join q gv1 a2)), (priqq n (join q gv1 a1)), (priqq n (join gv1 q a2)), (priqq n (join gv1 q a1)), (priqq n (join gv1 gv1 a2))
(priqq n (join gv1 gv1 a1)), (priqq n (insert x q)), (priqq n (insert x gv1)), (priqq n (insert n q)), (priqq n (insert n gv1)), (priqq n (carry q a2)), (priqq n (carry q a1)), (priqq n (carry gv1 a2)), (priqq n (carry gv1 a1)), (priqq n (q ++ q))
(priqq n (q ++ gv1)), (priqq n (gv1 ++ q)), (priqq n (gv1 ++ gv1)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv1), (priqq (find_max' x q) (a2 :: q)), (priqq (find_max' x q) (a2 :: gv1)), (priqq (find_max' x q) (a1 :: q)), (priqq (find_max' x q) (a1 :: gv1)), (priqq (find_max' x q) (merge q q))
(priqq (find_max' x q) (merge q gv1)), (priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (heap_delete_max a2)), (priqq (find_max' x q) (heap_delete_max a1)), (priqq (find_max' x q) (join q q a2)), (priqq (find_max' x q) (join q q a1)), (priqq (find_max' x q) (join q gv1 a2)), (priqq (find_max' x q) (join q gv1 a1)), (priqq (find_max' x q) (join gv1 q a2))
(priqq (find_max' x q) (join gv1 q a1)), (priqq (find_max' x q) (join gv1 gv1 a2)), (priqq (find_max' x q) (join gv1 gv1 a1)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1)), (priqq (find_max' x q) (insert n q)), (priqq (find_max' x q) (insert n gv1)), (priqq (find_max' x q) (carry q a2)), (priqq (find_max' x q) (carry q a1)), (priqq (find_max' x q) (carry gv1 a2))
(priqq (find_max' x q) (carry gv1 a1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1)), (priqq (find_max' x q) (gv1 ++ q)), (priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1), (priqq (find_max' x gv1) (a2 :: q)), (priqq (find_max' x gv1) (a2 :: gv1)), (priqq (find_max' x gv1) (a1 :: q))
(priqq (find_max' x gv1) (a1 :: gv1)), (priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1)), (priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (heap_delete_max a2)), (priqq (find_max' x gv1) (heap_delete_max a1)), (priqq (find_max' x gv1) (join q q a2)), (priqq (find_max' x gv1) (join q q a1)), (priqq (find_max' x gv1) (join q gv1 a2))
(priqq (find_max' x gv1) (join q gv1 a1)), (priqq (find_max' x gv1) (join gv1 q a2)), (priqq (find_max' x gv1) (join gv1 q a1)), (priqq (find_max' x gv1) (join gv1 gv1 a2)), (priqq (find_max' x gv1) (join gv1 gv1 a1)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (insert n q)), (priqq (find_max' x gv1) (insert n gv1)), (priqq (find_max' x gv1) (carry q a2))
(priqq (find_max' x gv1) (carry q a1)), (priqq (find_max' x gv1) (carry gv1 a2)), (priqq (find_max' x gv1) (carry gv1 a1)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1)), (priqq (find_max' n q) q), (priqq (find_max' n q) gv1), (priqq (find_max' n q) (a2 :: q))
(priqq (find_max' n q) (a2 :: gv1)), (priqq (find_max' n q) (a1 :: q)), (priqq (find_max' n q) (a1 :: gv1)), (priqq (find_max' n q) (merge q q)), (priqq (find_max' n q) (merge q gv1)), (priqq (find_max' n q) (merge gv1 q)), (priqq (find_max' n q) (merge gv1 gv1)), (priqq (find_max' n q) (heap_delete_max a2)), (priqq (find_max' n q) (heap_delete_max a1)), (priqq (find_max' n q) (join q q a2))
(priqq (find_max' n q) (join q q a1)), (priqq (find_max' n q) (join q gv1 a2)), (priqq (find_max' n q) (join q gv1 a1)), (priqq (find_max' n q) (join gv1 q a2)), (priqq (find_max' n q) (join gv1 q a1)), (priqq (find_max' n q) (join gv1 gv1 a2)), (priqq (find_max' n q) (join gv1 gv1 a1)), (priqq (find_max' n q) (insert x q)), (priqq (find_max' n q) (insert x gv1)), (priqq (find_max' n q) (insert n q))
(priqq (find_max' n q) (insert n gv1)), (priqq (find_max' n q) (carry q a2)), (priqq (find_max' n q) (carry q a1)), (priqq (find_max' n q) (carry gv1 a2)), (priqq (find_max' n q) (carry gv1 a1)), (priqq (find_max' n q) (q ++ q)), (priqq (find_max' n q) (q ++ gv1)), (priqq (find_max' n q) (gv1 ++ q)), (priqq (find_max' n q) (gv1 ++ gv1)), (priqq (find_max' n gv1) q)
(priqq (find_max' n gv1) gv1), (priqq (find_max' n gv1) (a2 :: q)), (priqq (find_max' n gv1) (a2 :: gv1)), (priqq (find_max' n gv1) (a1 :: q)), (priqq (find_max' n gv1) (a1 :: gv1)), (priqq (find_max' n gv1) (merge q q)), (priqq (find_max' n gv1) (merge q gv1)), (priqq (find_max' n gv1) (merge gv1 q)), (priqq (find_max' n gv1) (merge gv1 gv1)), (priqq (find_max' n gv1) (heap_delete_max a2))
(priqq (find_max' n gv1) (heap_delete_max a1)), (priqq (find_max' n gv1) (join q q a2)), (priqq (find_max' n gv1) (join q q a1)), (priqq (find_max' n gv1) (join q gv1 a2)), (priqq (find_max' n gv1) (join q gv1 a1)), (priqq (find_max' n gv1) (join gv1 q a2)), (priqq (find_max' n gv1) (join gv1 q a1)), (priqq (find_max' n gv1) (join gv1 gv1 a2)), (priqq (find_max' n gv1) (join gv1 gv1 a1)), (priqq (find_max' n gv1) (insert x q))
(priqq (find_max' n gv1) (insert x gv1)), (priqq (find_max' n gv1) (insert n q)), (priqq (find_max' n gv1) (insert n gv1)), (priqq (find_max' n gv1) (carry q a2)), (priqq (find_max' n gv1) (carry q a1)), (priqq (find_max' n gv1) (carry gv1 a2)), (priqq (find_max' n gv1) (carry gv1 a1)), (priqq (find_max' n gv1) (q ++ q)), (priqq (find_max' n gv1) (q ++ gv1)), (priqq (find_max' n gv1) (gv1 ++ q))
(priqq (find_max' n gv1) (gv1 ++ gv1)), (priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (a2 :: q)), (priqq (length q) (a2 :: gv1)), (priqq (length q) (a1 :: q)), (priqq (length q) (a1 :: gv1)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv1)), (priqq (length q) (merge gv1 q))
(priqq (length q) (merge gv1 gv1)), (priqq (length q) (heap_delete_max a2)), (priqq (length q) (heap_delete_max a1)), (priqq (length q) (join q q a2)), (priqq (length q) (join q q a1)), (priqq (length q) (join q gv1 a2)), (priqq (length q) (join q gv1 a1)), (priqq (length q) (join gv1 q a2)), (priqq (length q) (join gv1 q a1)), (priqq (length q) (join gv1 gv1 a2))
(priqq (length q) (join gv1 gv1 a1)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1)), (priqq (length q) (insert n q)), (priqq (length q) (insert n gv1)), (priqq (length q) (carry q a2)), (priqq (length q) (carry q a1)), (priqq (length q) (carry gv1 a2)), (priqq (length q) (carry gv1 a1)), (priqq (length q) (q ++ q))
(priqq (length q) (q ++ gv1)), (priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (a2 :: q)), (priqq (length gv1) (a2 :: gv1)), (priqq (length gv1) (a1 :: q)), (priqq (length gv1) (a1 :: gv1)), (priqq (length gv1) (merge q q))
(priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (heap_delete_max a2)), (priqq (length gv1) (heap_delete_max a1)), (priqq (length gv1) (join q q a2)), (priqq (length gv1) (join q q a1)), (priqq (length gv1) (join q gv1 a2)), (priqq (length gv1) (join q gv1 a1)), (priqq (length gv1) (join gv1 q a2))
(priqq (length gv1) (join gv1 q a1)), (priqq (length gv1) (join gv1 gv1 a2)), (priqq (length gv1) (join gv1 gv1 a1)), (priqq (length gv1) (insert x q)), (priqq (length gv1) (insert x gv1)), (priqq (length gv1) (insert n q)), (priqq (length gv1) (insert n gv1)), (priqq (length gv1) (carry q a2)), (priqq (length gv1) (carry q a1)), (priqq (length gv1) (carry gv1 a2))
(priqq (length gv1) (carry gv1 a1)), (priqq (length gv1) (q ++ q)), (priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heap x (Node x a2 a2)), (pow2heap x (Node x a2 a1)), (pow2heap x (Node x a1 a2)), (pow2heap x (Node x a1 a1)), (pow2heap x (Node n a2 a2))
(pow2heap x (Node n a2 a1)), (pow2heap x (Node n a1 a2)), (pow2heap x (Node n a1 a1)), (pow2heap x (smash a2 a2)), (pow2heap x (smash a2 a1)), (pow2heap x (smash a1 a2)), (pow2heap x (smash a1 a1)), (pow2heap n (Node x a2 a2)), (pow2heap n (Node x a2 a1)), (pow2heap n (Node x a1 a2))
(pow2heap n (Node x a1 a1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' x q) a2)
(pow2heap (find_max' x q) a1), (pow2heap (find_max' x q) (Node x a2 a2)), (pow2heap (find_max' x q) (Node x a2 a1)), (pow2heap (find_max' x q) (Node x a1 a2)), (pow2heap (find_max' x q) (Node x a1 a1)), (pow2heap (find_max' x q) (Node n a2 a2)), (pow2heap (find_max' x q) (Node n a2 a1)), (pow2heap (find_max' x q) (Node n a1 a2)), (pow2heap (find_max' x q) (Node n a1 a1)), (pow2heap (find_max' x q) (smash a2 a2))
(pow2heap (find_max' x q) (smash a2 a1)), (pow2heap (find_max' x q) (smash a1 a2)), (pow2heap (find_max' x q) (smash a1 a1)), (pow2heap (find_max' x gv1) a2), (pow2heap (find_max' x gv1) a1), (pow2heap (find_max' x gv1) (Node x a2 a2)), (pow2heap (find_max' x gv1) (Node x a2 a1)), (pow2heap (find_max' x gv1) (Node x a1 a2)), (pow2heap (find_max' x gv1) (Node x a1 a1)), (pow2heap (find_max' x gv1) (Node n a2 a2))
(pow2heap (find_max' x gv1) (Node n a2 a1)), (pow2heap (find_max' x gv1) (Node n a1 a2)), (pow2heap (find_max' x gv1) (Node n a1 a1)), (pow2heap (find_max' x gv1) (smash a2 a2)), (pow2heap (find_max' x gv1) (smash a2 a1)), (pow2heap (find_max' x gv1) (smash a1 a2)), (pow2heap (find_max' x gv1) (smash a1 a1)), (pow2heap (find_max' n q) a2), (pow2heap (find_max' n q) a1), (pow2heap (find_max' n q) (Node x a2 a2))
(pow2heap (find_max' n q) (Node x a2 a1)), (pow2heap (find_max' n q) (Node x a1 a2)), (pow2heap (find_max' n q) (Node x a1 a1)), (pow2heap (find_max' n q) (Node n a2 a2)), (pow2heap (find_max' n q) (Node n a2 a1)), (pow2heap (find_max' n q) (Node n a1 a2)), (pow2heap (find_max' n q) (Node n a1 a1)), (pow2heap (find_max' n q) (smash a2 a2)), (pow2heap (find_max' n q) (smash a2 a1)), (pow2heap (find_max' n q) (smash a1 a2))
(pow2heap (find_max' n q) (smash a1 a1)), (pow2heap (find_max' n gv1) a2), (pow2heap (find_max' n gv1) a1), (pow2heap (find_max' n gv1) (Node x a2 a2)), (pow2heap (find_max' n gv1) (Node x a2 a1)), (pow2heap (find_max' n gv1) (Node x a1 a2)), (pow2heap (find_max' n gv1) (Node x a1 a1)), (pow2heap (find_max' n gv1) (Node n a2 a2)), (pow2heap (find_max' n gv1) (Node n a2 a1)), (pow2heap (find_max' n gv1) (Node n a1 a2))
(pow2heap (find_max' n gv1) (Node n a1 a1)), (pow2heap (find_max' n gv1) (smash a2 a2)), (pow2heap (find_max' n gv1) (smash a2 a1)), (pow2heap (find_max' n gv1) (smash a1 a2)), (pow2heap (find_max' n gv1) (smash a1 a1)), (pow2heap (length q) a2), (pow2heap (length q) a1), (pow2heap (length q) (Node x a2 a2)), (pow2heap (length q) (Node x a2 a1)), (pow2heap (length q) (Node x a1 a2))
(pow2heap (length q) (Node x a1 a1)), (pow2heap (length q) (Node n a2 a2)), (pow2heap (length q) (Node n a2 a1)), (pow2heap (length q) (Node n a1 a2)), (pow2heap (length q) (Node n a1 a1)), (pow2heap (length q) (smash a2 a2)), (pow2heap (length q) (smash a2 a1)), (pow2heap (length q) (smash a1 a2)), (pow2heap (length q) (smash a1 a1)), (pow2heap (length gv1) a2)
(pow2heap (length gv1) a1), (pow2heap (length gv1) (Node x a2 a2)), (pow2heap (length gv1) (Node x a2 a1)), (pow2heap (length gv1) (Node x a1 a2)), (pow2heap (length gv1) (Node x a1 a1)), (pow2heap (length gv1) (Node n a2 a2)), (pow2heap (length gv1) (Node n a2 a1)), (pow2heap (length gv1) (Node n a1 a2)), (pow2heap (length gv1) (Node n a1 a1)), (pow2heap (length gv1) (smash a2 a2))
(pow2heap (length gv1) (smash a2 a1)), (pow2heap (length gv1) (smash a1 a2)), (pow2heap (length gv1) (smash a1 a1)), (pow2heapp x x (Node x a2 a2)), (pow2heapp x x (Node x a2 a1)), (pow2heapp x x (Node x a1 a2)), (pow2heapp x x (Node x a1 a1)), (pow2heapp x x (Node n a2 a2)), (pow2heapp x x (Node n a2 a1)), (pow2heapp x x (Node n a1 a2))
(pow2heapp x x (Node n a1 a1)), (pow2heapp x x (smash a2 a2)), (pow2heapp x x (smash a2 a1)), (pow2heapp x x (smash a1 a2)), (pow2heapp x x (smash a1 a1)), (pow2heapp x x Leaf), (pow2heapp x n (Node x a2 a2)), (pow2heapp x n (Node x a2 a1)), (pow2heapp x n (Node x a1 a2)), (pow2heapp x n (Node x a1 a1))
(pow2heapp x n (Node n a2 a2)), (pow2heapp x n (Node n a2 a1)), (pow2heapp x n (Node n a1 a2)), (pow2heapp x n (Node n a1 a1)), (pow2heapp x n (smash a2 a2)), (pow2heapp x n (smash a2 a1)), (pow2heapp x n (smash a1 a2)), (pow2heapp x n (smash a1 a1)), (pow2heapp x n Leaf), (pow2heapp x (find_max' x q) a2)
(pow2heapp x (find_max' x q) a1), (pow2heapp x (find_max' x q) (Node x a2 a2)), (pow2heapp x (find_max' x q) (Node x a2 a1)), (pow2heapp x (find_max' x q) (Node x a1 a2)), (pow2heapp x (find_max' x q) (Node x a1 a1)), (pow2heapp x (find_max' x q) (Node n a2 a2)), (pow2heapp x (find_max' x q) (Node n a2 a1)), (pow2heapp x (find_max' x q) (Node n a1 a2)), (pow2heapp x (find_max' x q) (Node n a1 a1)), (pow2heapp x (find_max' x q) (smash a2 a2))
(pow2heapp x (find_max' x q) (smash a2 a1)), (pow2heapp x (find_max' x q) (smash a1 a2)), (pow2heapp x (find_max' x q) (smash a1 a1)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) a2), (pow2heapp x (find_max' x gv1) a1), (pow2heapp x (find_max' x gv1) (Node x a2 a2)), (pow2heapp x (find_max' x gv1) (Node x a2 a1)), (pow2heapp x (find_max' x gv1) (Node x a1 a2)), (pow2heapp x (find_max' x gv1) (Node x a1 a1))
(pow2heapp x (find_max' x gv1) (Node n a2 a2)), (pow2heapp x (find_max' x gv1) (Node n a2 a1)), (pow2heapp x (find_max' x gv1) (Node n a1 a2)), (pow2heapp x (find_max' x gv1) (Node n a1 a1)), (pow2heapp x (find_max' x gv1) (smash a2 a2)), (pow2heapp x (find_max' x gv1) (smash a2 a1)), (pow2heapp x (find_max' x gv1) (smash a1 a2)), (pow2heapp x (find_max' x gv1) (smash a1 a1)), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (find_max' n q) a2)
(pow2heapp x (find_max' n q) a1), (pow2heapp x (find_max' n q) (Node x a2 a2)), (pow2heapp x (find_max' n q) (Node x a2 a1)), (pow2heapp x (find_max' n q) (Node x a1 a2)), (pow2heapp x (find_max' n q) (Node x a1 a1)), (pow2heapp x (find_max' n q) (Node n a2 a2)), (pow2heapp x (find_max' n q) (Node n a2 a1)), (pow2heapp x (find_max' n q) (Node n a1 a2)), (pow2heapp x (find_max' n q) (Node n a1 a1)), (pow2heapp x (find_max' n q) (smash a2 a2))
(pow2heapp x (find_max' n q) (smash a2 a1)), (pow2heapp x (find_max' n q) (smash a1 a2)), (pow2heapp x (find_max' n q) (smash a1 a1)), (pow2heapp x (find_max' n q) Leaf), (pow2heapp x (find_max' n gv1) a2), (pow2heapp x (find_max' n gv1) a1), (pow2heapp x (find_max' n gv1) (Node x a2 a2)), (pow2heapp x (find_max' n gv1) (Node x a2 a1)), (pow2heapp x (find_max' n gv1) (Node x a1 a2)), (pow2heapp x (find_max' n gv1) (Node x a1 a1))
(pow2heapp x (find_max' n gv1) (Node n a2 a2)), (pow2heapp x (find_max' n gv1) (Node n a2 a1)), (pow2heapp x (find_max' n gv1) (Node n a1 a2)), (pow2heapp x (find_max' n gv1) (Node n a1 a1)), (pow2heapp x (find_max' n gv1) (smash a2 a2)), (pow2heapp x (find_max' n gv1) (smash a2 a1)), (pow2heapp x (find_max' n gv1) (smash a1 a2)), (pow2heapp x (find_max' n gv1) (smash a1 a1)), (pow2heapp x (find_max' n gv1) Leaf), (pow2heapp x (length q) a2)
(pow2heapp x (length q) a1), (pow2heapp x (length q) (Node x a2 a2)), (pow2heapp x (length q) (Node x a2 a1)), (pow2heapp x (length q) (Node x a1 a2)), (pow2heapp x (length q) (Node x a1 a1)), (pow2heapp x (length q) (Node n a2 a2)), (pow2heapp x (length q) (Node n a2 a1)), (pow2heapp x (length q) (Node n a1 a2)), (pow2heapp x (length q) (Node n a1 a1)), (pow2heapp x (length q) (smash a2 a2))
(pow2heapp x (length q) (smash a2 a1)), (pow2heapp x (length q) (smash a1 a2)), (pow2heapp x (length q) (smash a1 a1)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) a2), (pow2heapp x (length gv1) a1), (pow2heapp x (length gv1) (Node x a2 a2)), (pow2heapp x (length gv1) (Node x a2 a1)), (pow2heapp x (length gv1) (Node x a1 a2)), (pow2heapp x (length gv1) (Node x a1 a1))
(pow2heapp x (length gv1) (Node n a2 a2)), (pow2heapp x (length gv1) (Node n a2 a1)), (pow2heapp x (length gv1) (Node n a1 a2)), (pow2heapp x (length gv1) (Node n a1 a1)), (pow2heapp x (length gv1) (smash a2 a2)), (pow2heapp x (length gv1) (smash a2 a1)), (pow2heapp x (length gv1) (smash a1 a2)), (pow2heapp x (length gv1) (smash a1 a1)), (pow2heapp x (length gv1) Leaf), (pow2heapp n x (Node x a2 a2))
(pow2heapp n x (Node x a2 a1)), (pow2heapp n x (Node x a1 a2)), (pow2heapp n x (Node x a1 a1)), (pow2heapp n x (Node n a2 a2)), (pow2heapp n x (Node n a2 a1)), (pow2heapp n x (Node n a1 a2)), (pow2heapp n x (Node n a1 a1)), (pow2heapp n x (smash a2 a2)), (pow2heapp n x (smash a2 a1)), (pow2heapp n x (smash a1 a2))
(pow2heapp n x (smash a1 a1)), (pow2heapp n x Leaf), (pow2heapp n n (Node x a2 a2)), (pow2heapp n n (Node x a2 a1)), (pow2heapp n n (Node x a1 a2)), (pow2heapp n n (Node x a1 a1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1))
(pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' x q) a2), (pow2heapp n (find_max' x q) a1), (pow2heapp n (find_max' x q) (Node x a2 a2)), (pow2heapp n (find_max' x q) (Node x a2 a1)), (pow2heapp n (find_max' x q) (Node x a1 a2))
(pow2heapp n (find_max' x q) (Node x a1 a1)), (pow2heapp n (find_max' x q) (Node n a2 a2)), (pow2heapp n (find_max' x q) (Node n a2 a1)), (pow2heapp n (find_max' x q) (Node n a1 a2)), (pow2heapp n (find_max' x q) (Node n a1 a1)), (pow2heapp n (find_max' x q) (smash a2 a2)), (pow2heapp n (find_max' x q) (smash a2 a1)), (pow2heapp n (find_max' x q) (smash a1 a2)), (pow2heapp n (find_max' x q) (smash a1 a1)), (pow2heapp n (find_max' x q) Leaf)
(pow2heapp n (find_max' x gv1) a2), (pow2heapp n (find_max' x gv1) a1), (pow2heapp n (find_max' x gv1) (Node x a2 a2)), (pow2heapp n (find_max' x gv1) (Node x a2 a1)), (pow2heapp n (find_max' x gv1) (Node x a1 a2)), (pow2heapp n (find_max' x gv1) (Node x a1 a1)), (pow2heapp n (find_max' x gv1) (Node n a2 a2)), (pow2heapp n (find_max' x gv1) (Node n a2 a1)), (pow2heapp n (find_max' x gv1) (Node n a1 a2)), (pow2heapp n (find_max' x gv1) (Node n a1 a1))
(pow2heapp n (find_max' x gv1) (smash a2 a2)), (pow2heapp n (find_max' x gv1) (smash a2 a1)), (pow2heapp n (find_max' x gv1) (smash a1 a2)), (pow2heapp n (find_max' x gv1) (smash a1 a1)), (pow2heapp n (find_max' x gv1) Leaf), (pow2heapp n (find_max' n q) a2), (pow2heapp n (find_max' n q) a1), (pow2heapp n (find_max' n q) (Node x a2 a2)), (pow2heapp n (find_max' n q) (Node x a2 a1)), (pow2heapp n (find_max' n q) (Node x a1 a2))
(pow2heapp n (find_max' n q) (Node x a1 a1)), (pow2heapp n (find_max' n q) (Node n a2 a2)), (pow2heapp n (find_max' n q) (Node n a2 a1)), (pow2heapp n (find_max' n q) (Node n a1 a2)), (pow2heapp n (find_max' n q) (Node n a1 a1)), (pow2heapp n (find_max' n q) (smash a2 a2)), (pow2heapp n (find_max' n q) (smash a2 a1)), (pow2heapp n (find_max' n q) (smash a1 a2)), (pow2heapp n (find_max' n q) (smash a1 a1)), (pow2heapp n (find_max' n q) Leaf)
(pow2heapp n (find_max' n gv1) a2), (pow2heapp n (find_max' n gv1) a1), (pow2heapp n (find_max' n gv1) (Node x a2 a2)), (pow2heapp n (find_max' n gv1) (Node x a2 a1)), (pow2heapp n (find_max' n gv1) (Node x a1 a2)), (pow2heapp n (find_max' n gv1) (Node x a1 a1)), (pow2heapp n (find_max' n gv1) (Node n a2 a2)), (pow2heapp n (find_max' n gv1) (Node n a2 a1)), (pow2heapp n (find_max' n gv1) (Node n a1 a2)), (pow2heapp n (find_max' n gv1) (Node n a1 a1))
(pow2heapp n (find_max' n gv1) (smash a2 a2)), (pow2heapp n (find_max' n gv1) (smash a2 a1)), (pow2heapp n (find_max' n gv1) (smash a1 a2)), (pow2heapp n (find_max' n gv1) (smash a1 a1)), (pow2heapp n (find_max' n gv1) Leaf), (pow2heapp n (length q) a2), (pow2heapp n (length q) a1), (pow2heapp n (length q) (Node x a2 a2)), (pow2heapp n (length q) (Node x a2 a1)), (pow2heapp n (length q) (Node x a1 a2))
(pow2heapp n (length q) (Node x a1 a1)), (pow2heapp n (length q) (Node n a2 a2)), (pow2heapp n (length q) (Node n a2 a1)), (pow2heapp n (length q) (Node n a1 a2)), (pow2heapp n (length q) (Node n a1 a1)), (pow2heapp n (length q) (smash a2 a2)), (pow2heapp n (length q) (smash a2 a1)), (pow2heapp n (length q) (smash a1 a2)), (pow2heapp n (length q) (smash a1 a1)), (pow2heapp n (length q) Leaf)
(pow2heapp n (length gv1) a2), (pow2heapp n (length gv1) a1), (pow2heapp n (length gv1) (Node x a2 a2)), (pow2heapp n (length gv1) (Node x a2 a1)), (pow2heapp n (length gv1) (Node x a1 a2)), (pow2heapp n (length gv1) (Node x a1 a1)), (pow2heapp n (length gv1) (Node n a2 a2)), (pow2heapp n (length gv1) (Node n a2 a1)), (pow2heapp n (length gv1) (Node n a1 a2)), (pow2heapp n (length gv1) (Node n a1 a1))
(pow2heapp n (length gv1) (smash a2 a2)), (pow2heapp n (length gv1) (smash a2 a1)), (pow2heapp n (length gv1) (smash a1 a2)), (pow2heapp n (length gv1) (smash a1 a1)), (pow2heapp n (length gv1) Leaf), (pow2heapp (find_max' x q) x a2), (pow2heapp (find_max' x q) x a1), (pow2heapp (find_max' x q) x (Node x a2 a2)), (pow2heapp (find_max' x q) x (Node x a2 a1)), (pow2heapp (find_max' x q) x (Node x a1 a2))
(pow2heapp (find_max' x q) x (Node x a1 a1)), (pow2heapp (find_max' x q) x (Node n a2 a2)), (pow2heapp (find_max' x q) x (Node n a2 a1)), (pow2heapp (find_max' x q) x (Node n a1 a2)), (pow2heapp (find_max' x q) x (Node n a1 a1)), (pow2heapp (find_max' x q) x (smash a2 a2)), (pow2heapp (find_max' x q) x (smash a2 a1)), (pow2heapp (find_max' x q) x (smash a1 a2)), (pow2heapp (find_max' x q) x (smash a1 a1)), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) n a2), (pow2heapp (find_max' x q) n a1), (pow2heapp (find_max' x q) n (Node x a2 a2)), (pow2heapp (find_max' x q) n (Node x a2 a1)), (pow2heapp (find_max' x q) n (Node x a1 a2)), (pow2heapp (find_max' x q) n (Node x a1 a1)), (pow2heapp (find_max' x q) n (Node n a2 a2)), (pow2heapp (find_max' x q) n (Node n a2 a1)), (pow2heapp (find_max' x q) n (Node n a1 a2)), (pow2heapp (find_max' x q) n (Node n a1 a1))
(pow2heapp (find_max' x q) n (smash a2 a2)), (pow2heapp (find_max' x q) n (smash a2 a1)), (pow2heapp (find_max' x q) n (smash a1 a2)), (pow2heapp (find_max' x q) n (smash a1 a1)), (pow2heapp (find_max' x q) n Leaf), (pow2heapp (find_max' x q) (find_max' x q) a2), (pow2heapp (find_max' x q) (find_max' x q) a1), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' x q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x q) Leaf)
(pow2heapp (find_max' x q) (find_max' x gv1) a2), (pow2heapp (find_max' x q) (find_max' x gv1) a1), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (find_max' n q) a2), (pow2heapp (find_max' x q) (find_max' n q) a1), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' x q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n q) Leaf)
(pow2heapp (find_max' x q) (find_max' n gv1) a2), (pow2heapp (find_max' x q) (find_max' n gv1) a1), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (find_max' n gv1) Leaf), (pow2heapp (find_max' x q) (length q) a2), (pow2heapp (find_max' x q) (length q) a1), (pow2heapp (find_max' x q) (length q) (Node x a2 a2)), (pow2heapp (find_max' x q) (length q) (Node x a2 a1)), (pow2heapp (find_max' x q) (length q) (Node x a1 a2))
(pow2heapp (find_max' x q) (length q) (Node x a1 a1)), (pow2heapp (find_max' x q) (length q) (Node n a2 a2)), (pow2heapp (find_max' x q) (length q) (Node n a2 a1)), (pow2heapp (find_max' x q) (length q) (Node n a1 a2)), (pow2heapp (find_max' x q) (length q) (Node n a1 a1)), (pow2heapp (find_max' x q) (length q) (smash a2 a2)), (pow2heapp (find_max' x q) (length q) (smash a2 a1)), (pow2heapp (find_max' x q) (length q) (smash a1 a2)), (pow2heapp (find_max' x q) (length q) (smash a1 a1)), (pow2heapp (find_max' x q) (length q) Leaf)
(pow2heapp (find_max' x q) (length gv1) a2), (pow2heapp (find_max' x q) (length gv1) a1), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' x q) (length gv1) (Node n a1 a1))
(pow2heapp (find_max' x q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x q) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x a2), (pow2heapp (find_max' x gv1) x a1), (pow2heapp (find_max' x gv1) x (Node x a2 a2)), (pow2heapp (find_max' x gv1) x (Node x a2 a1)), (pow2heapp (find_max' x gv1) x (Node x a1 a2))
(pow2heapp (find_max' x gv1) x (Node x a1 a1)), (pow2heapp (find_max' x gv1) x (Node n a2 a2)), (pow2heapp (find_max' x gv1) x (Node n a2 a1)), (pow2heapp (find_max' x gv1) x (Node n a1 a2)), (pow2heapp (find_max' x gv1) x (Node n a1 a1)), (pow2heapp (find_max' x gv1) x (smash a2 a2)), (pow2heapp (find_max' x gv1) x (smash a2 a1)), (pow2heapp (find_max' x gv1) x (smash a1 a2)), (pow2heapp (find_max' x gv1) x (smash a1 a1)), (pow2heapp (find_max' x gv1) x Leaf)
(pow2heapp (find_max' x gv1) n a2), (pow2heapp (find_max' x gv1) n a1), (pow2heapp (find_max' x gv1) n (Node x a2 a2)), (pow2heapp (find_max' x gv1) n (Node x a2 a1)), (pow2heapp (find_max' x gv1) n (Node x a1 a2)), (pow2heapp (find_max' x gv1) n (Node x a1 a1)), (pow2heapp (find_max' x gv1) n (Node n a2 a2)), (pow2heapp (find_max' x gv1) n (Node n a2 a1)), (pow2heapp (find_max' x gv1) n (Node n a1 a2)), (pow2heapp (find_max' x gv1) n (Node n a1 a1))
(pow2heapp (find_max' x gv1) n (smash a2 a2)), (pow2heapp (find_max' x gv1) n (smash a2 a1)), (pow2heapp (find_max' x gv1) n (smash a1 a2)), (pow2heapp (find_max' x gv1) n (smash a1 a1)), (pow2heapp (find_max' x gv1) n Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) a2), (pow2heapp (find_max' x gv1) (find_max' x q) a1), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' x gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf)
(pow2heapp (find_max' x gv1) (find_max' x gv1) a2), (pow2heapp (find_max' x gv1) (find_max' x gv1) a1), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (find_max' n q) a2), (pow2heapp (find_max' x gv1) (find_max' n q) a1), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' x gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n q) Leaf)
(pow2heapp (find_max' x gv1) (find_max' n gv1) a2), (pow2heapp (find_max' x gv1) (find_max' n gv1) a1), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) a2), (pow2heapp (find_max' x gv1) (length q) a1), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node x a1 a2))
(pow2heapp (find_max' x gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length q) Leaf)
(pow2heapp (find_max' x gv1) (length gv1) a2), (pow2heapp (find_max' x gv1) (length gv1) a1), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (Node n a1 a1))
(pow2heapp (find_max' x gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' x gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (find_max' n q) x a2), (pow2heapp (find_max' n q) x a1), (pow2heapp (find_max' n q) x (Node x a2 a2)), (pow2heapp (find_max' n q) x (Node x a2 a1)), (pow2heapp (find_max' n q) x (Node x a1 a2))
(pow2heapp (find_max' n q) x (Node x a1 a1)), (pow2heapp (find_max' n q) x (Node n a2 a2)), (pow2heapp (find_max' n q) x (Node n a2 a1)), (pow2heapp (find_max' n q) x (Node n a1 a2)), (pow2heapp (find_max' n q) x (Node n a1 a1)), (pow2heapp (find_max' n q) x (smash a2 a2)), (pow2heapp (find_max' n q) x (smash a2 a1)), (pow2heapp (find_max' n q) x (smash a1 a2)), (pow2heapp (find_max' n q) x (smash a1 a1)), (pow2heapp (find_max' n q) x Leaf)
(pow2heapp (find_max' n q) n a2), (pow2heapp (find_max' n q) n a1), (pow2heapp (find_max' n q) n (Node x a2 a2)), (pow2heapp (find_max' n q) n (Node x a2 a1)), (pow2heapp (find_max' n q) n (Node x a1 a2)), (pow2heapp (find_max' n q) n (Node x a1 a1)), (pow2heapp (find_max' n q) n (Node n a2 a2)), (pow2heapp (find_max' n q) n (Node n a2 a1)), (pow2heapp (find_max' n q) n (Node n a1 a2)), (pow2heapp (find_max' n q) n (Node n a1 a1))
(pow2heapp (find_max' n q) n (smash a2 a2)), (pow2heapp (find_max' n q) n (smash a2 a1)), (pow2heapp (find_max' n q) n (smash a1 a2)), (pow2heapp (find_max' n q) n (smash a1 a1)), (pow2heapp (find_max' n q) n Leaf), (pow2heapp (find_max' n q) (find_max' x q) a2), (pow2heapp (find_max' n q) (find_max' x q) a1), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' n q) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x q) Leaf)
(pow2heapp (find_max' n q) (find_max' x gv1) a2), (pow2heapp (find_max' n q) (find_max' x gv1) a1), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' x gv1) Leaf), (pow2heapp (find_max' n q) (find_max' n q) a2), (pow2heapp (find_max' n q) (find_max' n q) a1), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' n q) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n q) Leaf)
(pow2heapp (find_max' n q) (find_max' n gv1) a2), (pow2heapp (find_max' n q) (find_max' n gv1) a1), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (find_max' n gv1) Leaf), (pow2heapp (find_max' n q) (length q) a2), (pow2heapp (find_max' n q) (length q) a1), (pow2heapp (find_max' n q) (length q) (Node x a2 a2)), (pow2heapp (find_max' n q) (length q) (Node x a2 a1)), (pow2heapp (find_max' n q) (length q) (Node x a1 a2))
(pow2heapp (find_max' n q) (length q) (Node x a1 a1)), (pow2heapp (find_max' n q) (length q) (Node n a2 a2)), (pow2heapp (find_max' n q) (length q) (Node n a2 a1)), (pow2heapp (find_max' n q) (length q) (Node n a1 a2)), (pow2heapp (find_max' n q) (length q) (Node n a1 a1)), (pow2heapp (find_max' n q) (length q) (smash a2 a2)), (pow2heapp (find_max' n q) (length q) (smash a2 a1)), (pow2heapp (find_max' n q) (length q) (smash a1 a2)), (pow2heapp (find_max' n q) (length q) (smash a1 a1)), (pow2heapp (find_max' n q) (length q) Leaf)
(pow2heapp (find_max' n q) (length gv1) a2), (pow2heapp (find_max' n q) (length gv1) a1), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n q) (length gv1) (Node n a1 a1))
(pow2heapp (find_max' n q) (length gv1) (smash a2 a2)), (pow2heapp (find_max' n q) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n q) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n q) (length gv1) Leaf), (pow2heapp (find_max' n gv1) x a2), (pow2heapp (find_max' n gv1) x a1), (pow2heapp (find_max' n gv1) x (Node x a2 a2)), (pow2heapp (find_max' n gv1) x (Node x a2 a1)), (pow2heapp (find_max' n gv1) x (Node x a1 a2))
(pow2heapp (find_max' n gv1) x (Node x a1 a1)), (pow2heapp (find_max' n gv1) x (Node n a2 a2)), (pow2heapp (find_max' n gv1) x (Node n a2 a1)), (pow2heapp (find_max' n gv1) x (Node n a1 a2)), (pow2heapp (find_max' n gv1) x (Node n a1 a1)), (pow2heapp (find_max' n gv1) x (smash a2 a2)), (pow2heapp (find_max' n gv1) x (smash a2 a1)), (pow2heapp (find_max' n gv1) x (smash a1 a2)), (pow2heapp (find_max' n gv1) x (smash a1 a1)), (pow2heapp (find_max' n gv1) x Leaf)
(pow2heapp (find_max' n gv1) n a2), (pow2heapp (find_max' n gv1) n a1), (pow2heapp (find_max' n gv1) n (Node x a2 a2)), (pow2heapp (find_max' n gv1) n (Node x a2 a1)), (pow2heapp (find_max' n gv1) n (Node x a1 a2)), (pow2heapp (find_max' n gv1) n (Node x a1 a1)), (pow2heapp (find_max' n gv1) n (Node n a2 a2)), (pow2heapp (find_max' n gv1) n (Node n a2 a1)), (pow2heapp (find_max' n gv1) n (Node n a1 a2)), (pow2heapp (find_max' n gv1) n (Node n a1 a1))
(pow2heapp (find_max' n gv1) n (smash a2 a2)), (pow2heapp (find_max' n gv1) n (smash a2 a1)), (pow2heapp (find_max' n gv1) n (smash a1 a2)), (pow2heapp (find_max' n gv1) n (smash a1 a1)), (pow2heapp (find_max' n gv1) n Leaf), (pow2heapp (find_max' n gv1) (find_max' x q) a2), (pow2heapp (find_max' n gv1) (find_max' x q) a1), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a2))
(pow2heapp (find_max' n gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x q) Leaf)
(pow2heapp (find_max' n gv1) (find_max' x gv1) a2), (pow2heapp (find_max' n gv1) (find_max' x gv1) a1), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' n gv1) (find_max' n q) a2), (pow2heapp (find_max' n gv1) (find_max' n q) a1), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a2))
(pow2heapp (find_max' n gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n q) Leaf)
(pow2heapp (find_max' n gv1) (find_max' n gv1) a2), (pow2heapp (find_max' n gv1) (find_max' n gv1) a1), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' n gv1) (length q) a2), (pow2heapp (find_max' n gv1) (length q) a1), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node x a1 a2))
(pow2heapp (find_max' n gv1) (length q) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length q) (Node n a1 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length q) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length q) (smash a1 a2)), (pow2heapp (find_max' n gv1) (length q) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length q) Leaf)
(pow2heapp (find_max' n gv1) (length gv1) a2), (pow2heapp (find_max' n gv1) (length gv1) a1), (pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node x a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (Node n a1 a1))
(pow2heapp (find_max' n gv1) (length gv1) (smash a2 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a2 a1)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 a2)), (pow2heapp (find_max' n gv1) (length gv1) (smash a1 a1)), (pow2heapp (find_max' n gv1) (length gv1) Leaf), (pow2heapp (length q) x a2), (pow2heapp (length q) x a1), (pow2heapp (length q) x (Node x a2 a2)), (pow2heapp (length q) x (Node x a2 a1)), (pow2heapp (length q) x (Node x a1 a2))
(pow2heapp (length q) x (Node x a1 a1)), (pow2heapp (length q) x (Node n a2 a2)), (pow2heapp (length q) x (Node n a2 a1)), (pow2heapp (length q) x (Node n a1 a2)), (pow2heapp (length q) x (Node n a1 a1)), (pow2heapp (length q) x (smash a2 a2)), (pow2heapp (length q) x (smash a2 a1)), (pow2heapp (length q) x (smash a1 a2)), (pow2heapp (length q) x (smash a1 a1)), (pow2heapp (length q) x Leaf)
(pow2heapp (length q) n a2), (pow2heapp (length q) n a1), (pow2heapp (length q) n (Node x a2 a2)), (pow2heapp (length q) n (Node x a2 a1)), (pow2heapp (length q) n (Node x a1 a2)), (pow2heapp (length q) n (Node x a1 a1)), (pow2heapp (length q) n (Node n a2 a2)), (pow2heapp (length q) n (Node n a2 a1)), (pow2heapp (length q) n (Node n a1 a2)), (pow2heapp (length q) n (Node n a1 a1))
(pow2heapp (length q) n (smash a2 a2)), (pow2heapp (length q) n (smash a2 a1)), (pow2heapp (length q) n (smash a1 a2)), (pow2heapp (length q) n (smash a1 a1)), (pow2heapp (length q) n Leaf), (pow2heapp (length q) (find_max' x q) a2), (pow2heapp (length q) (find_max' x q) a1), (pow2heapp (length q) (find_max' x q) (Node x a2 a2)), (pow2heapp (length q) (find_max' x q) (Node x a2 a1)), (pow2heapp (length q) (find_max' x q) (Node x a1 a2))
(pow2heapp (length q) (find_max' x q) (Node x a1 a1)), (pow2heapp (length q) (find_max' x q) (Node n a2 a2)), (pow2heapp (length q) (find_max' x q) (Node n a2 a1)), (pow2heapp (length q) (find_max' x q) (Node n a1 a2)), (pow2heapp (length q) (find_max' x q) (Node n a1 a1)), (pow2heapp (length q) (find_max' x q) (smash a2 a2)), (pow2heapp (length q) (find_max' x q) (smash a2 a1)), (pow2heapp (length q) (find_max' x q) (smash a1 a2)), (pow2heapp (length q) (find_max' x q) (smash a1 a1)), (pow2heapp (length q) (find_max' x q) Leaf)
(pow2heapp (length q) (find_max' x gv1) a2), (pow2heapp (length q) (find_max' x gv1) a1), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (length q) (find_max' x gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' x gv1) Leaf), (pow2heapp (length q) (find_max' n q) a2), (pow2heapp (length q) (find_max' n q) a1), (pow2heapp (length q) (find_max' n q) (Node x a2 a2)), (pow2heapp (length q) (find_max' n q) (Node x a2 a1)), (pow2heapp (length q) (find_max' n q) (Node x a1 a2))
(pow2heapp (length q) (find_max' n q) (Node x a1 a1)), (pow2heapp (length q) (find_max' n q) (Node n a2 a2)), (pow2heapp (length q) (find_max' n q) (Node n a2 a1)), (pow2heapp (length q) (find_max' n q) (Node n a1 a2)), (pow2heapp (length q) (find_max' n q) (Node n a1 a1)), (pow2heapp (length q) (find_max' n q) (smash a2 a2)), (pow2heapp (length q) (find_max' n q) (smash a2 a1)), (pow2heapp (length q) (find_max' n q) (smash a1 a2)), (pow2heapp (length q) (find_max' n q) (smash a1 a1)), (pow2heapp (length q) (find_max' n q) Leaf)
(pow2heapp (length q) (find_max' n gv1) a2), (pow2heapp (length q) (find_max' n gv1) a1), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length q) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (length q) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length q) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length q) (find_max' n gv1) Leaf), (pow2heapp (length q) (length q) a2), (pow2heapp (length q) (length q) a1), (pow2heapp (length q) (length q) (Node x a2 a2)), (pow2heapp (length q) (length q) (Node x a2 a1)), (pow2heapp (length q) (length q) (Node x a1 a2))
(pow2heapp (length q) (length q) (Node x a1 a1)), (pow2heapp (length q) (length q) (Node n a2 a2)), (pow2heapp (length q) (length q) (Node n a2 a1)), (pow2heapp (length q) (length q) (Node n a1 a2)), (pow2heapp (length q) (length q) (Node n a1 a1)), (pow2heapp (length q) (length q) (smash a2 a2)), (pow2heapp (length q) (length q) (smash a2 a1)), (pow2heapp (length q) (length q) (smash a1 a2)), (pow2heapp (length q) (length q) (smash a1 a1)), (pow2heapp (length q) (length q) Leaf)
(pow2heapp (length q) (length gv1) a2), (pow2heapp (length q) (length gv1) a1), (pow2heapp (length q) (length gv1) (Node x a2 a2)), (pow2heapp (length q) (length gv1) (Node x a2 a1)), (pow2heapp (length q) (length gv1) (Node x a1 a2)), (pow2heapp (length q) (length gv1) (Node x a1 a1)), (pow2heapp (length q) (length gv1) (Node n a2 a2)), (pow2heapp (length q) (length gv1) (Node n a2 a1)), (pow2heapp (length q) (length gv1) (Node n a1 a2)), (pow2heapp (length q) (length gv1) (Node n a1 a1))
(pow2heapp (length q) (length gv1) (smash a2 a2)), (pow2heapp (length q) (length gv1) (smash a2 a1)), (pow2heapp (length q) (length gv1) (smash a1 a2)), (pow2heapp (length q) (length gv1) (smash a1 a1)), (pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x a2), (pow2heapp (length gv1) x a1), (pow2heapp (length gv1) x (Node x a2 a2)), (pow2heapp (length gv1) x (Node x a2 a1)), (pow2heapp (length gv1) x (Node x a1 a2))
(pow2heapp (length gv1) x (Node x a1 a1)), (pow2heapp (length gv1) x (Node n a2 a2)), (pow2heapp (length gv1) x (Node n a2 a1)), (pow2heapp (length gv1) x (Node n a1 a2)), (pow2heapp (length gv1) x (Node n a1 a1)), (pow2heapp (length gv1) x (smash a2 a2)), (pow2heapp (length gv1) x (smash a2 a1)), (pow2heapp (length gv1) x (smash a1 a2)), (pow2heapp (length gv1) x (smash a1 a1)), (pow2heapp (length gv1) x Leaf)
(pow2heapp (length gv1) n a2), (pow2heapp (length gv1) n a1), (pow2heapp (length gv1) n (Node x a2 a2)), (pow2heapp (length gv1) n (Node x a2 a1)), (pow2heapp (length gv1) n (Node x a1 a2)), (pow2heapp (length gv1) n (Node x a1 a1)), (pow2heapp (length gv1) n (Node n a2 a2)), (pow2heapp (length gv1) n (Node n a2 a1)), (pow2heapp (length gv1) n (Node n a1 a2)), (pow2heapp (length gv1) n (Node n a1 a1))
(pow2heapp (length gv1) n (smash a2 a2)), (pow2heapp (length gv1) n (smash a2 a1)), (pow2heapp (length gv1) n (smash a1 a2)), (pow2heapp (length gv1) n (smash a1 a1)), (pow2heapp (length gv1) n Leaf), (pow2heapp (length gv1) (find_max' x q) a2), (pow2heapp (length gv1) (find_max' x q) a1), (pow2heapp (length gv1) (find_max' x q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node x a1 a2))
(pow2heapp (length gv1) (find_max' x q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' x q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' x q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x q) Leaf)
(pow2heapp (length gv1) (find_max' x gv1) a2), (pow2heapp (length gv1) (find_max' x gv1) a1), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (Node n a1 a1))
(pow2heapp (length gv1) (find_max' x gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' x gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (find_max' n q) a2), (pow2heapp (length gv1) (find_max' n q) a1), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node x a1 a2))
(pow2heapp (length gv1) (find_max' n q) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n q) (Node n a1 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n q) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n q) Leaf)
(pow2heapp (length gv1) (find_max' n gv1) a2), (pow2heapp (length gv1) (find_max' n gv1) a1), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node x a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (Node n a1 a1))
(pow2heapp (length gv1) (find_max' n gv1) (smash a2 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a2 a1)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a2)), (pow2heapp (length gv1) (find_max' n gv1) (smash a1 a1)), (pow2heapp (length gv1) (find_max' n gv1) Leaf), (pow2heapp (length gv1) (length q) a2), (pow2heapp (length gv1) (length q) a1), (pow2heapp (length gv1) (length q) (Node x a2 a2)), (pow2heapp (length gv1) (length q) (Node x a2 a1)), (pow2heapp (length gv1) (length q) (Node x a1 a2))
(pow2heapp (length gv1) (length q) (Node x a1 a1)), (pow2heapp (length gv1) (length q) (Node n a2 a2)), (pow2heapp (length gv1) (length q) (Node n a2 a1)), (pow2heapp (length gv1) (length q) (Node n a1 a2)), (pow2heapp (length gv1) (length q) (Node n a1 a1)), (pow2heapp (length gv1) (length q) (smash a2 a2)), (pow2heapp (length gv1) (length q) (smash a2 a1)), (pow2heapp (length gv1) (length q) (smash a1 a2)), (pow2heapp (length gv1) (length q) (smash a1 a1)), (pow2heapp (length gv1) (length q) Leaf)
(pow2heapp (length gv1) (length gv1) a2), (pow2heapp (length gv1) (length gv1) a1), (pow2heapp (length gv1) (length gv1) (Node x a2 a2)), (pow2heapp (length gv1) (length gv1) (Node x a2 a1)), (pow2heapp (length gv1) (length gv1) (Node x a1 a2)), (pow2heapp (length gv1) (length gv1) (Node x a1 a1)), (pow2heapp (length gv1) (length gv1) (Node n a2 a2)), (pow2heapp (length gv1) (length gv1) (Node n a2 a1)), (pow2heapp (length gv1) (length gv1) (Node n a1 a2)), (pow2heapp (length gv1) (length gv1) (Node n a1 a1))
(pow2heapp (length gv1) (length gv1) (smash a2 a2)), (pow2heapp (length gv1) (length gv1) (smash a2 a1)), (pow2heapp (length gv1) (length gv1) (smash a1 a2)), (pow2heapp (length gv1) (length gv1) (smash a1 a1)), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (a2 :: q)), (Permutation q (a2 :: gv1)), (Permutation q (a1 :: q)), (Permutation q (a1 :: gv1)), (Permutation q (merge q q))
(Permutation q (merge q gv1)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (heap_delete_max a2)), (Permutation q (heap_delete_max a1)), (Permutation q (join q q a2)), (Permutation q (join q q a1)), (Permutation q (join q gv1 a2)), (Permutation q (join q gv1 a1)), (Permutation q (join gv1 q a2))
(Permutation q (join gv1 q a1)), (Permutation q (join gv1 gv1 a2)), (Permutation q (join gv1 gv1 a1)), (Permutation q (insert x q)), (Permutation q (insert x gv1)), (Permutation q (insert n q)), (Permutation q (insert n gv1)), (Permutation q (carry q a2)), (Permutation q (carry q a1)), (Permutation q (carry gv1 a2))
(Permutation q (carry gv1 a1)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q []), (Permutation gv1 (a2 :: q)), (Permutation gv1 (a2 :: gv1)), (Permutation gv1 (a1 :: q)), (Permutation gv1 (a1 :: gv1))
(Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (heap_delete_max a2)), (Permutation gv1 (heap_delete_max a1)), (Permutation gv1 (join q q a2)), (Permutation gv1 (join q q a1)), (Permutation gv1 (join q gv1 a2)), (Permutation gv1 (join q gv1 a1))
(Permutation gv1 (join gv1 q a2)), (Permutation gv1 (join gv1 q a1)), (Permutation gv1 (join gv1 gv1 a2)), (Permutation gv1 (join gv1 gv1 a1)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (insert n q)), (Permutation gv1 (insert n gv1)), (Permutation gv1 (carry q a2)), (Permutation gv1 (carry q a1))
(Permutation gv1 (carry gv1 a2)), (Permutation gv1 (carry gv1 a1)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a2 :: q) q), (Permutation (a2 :: q) gv1), (Permutation (a2 :: q) (a2 :: gv1))
(Permutation (a2 :: q) (a1 :: q)), (Permutation (a2 :: q) (a1 :: gv1)), (Permutation (a2 :: q) (merge q q)), (Permutation (a2 :: q) (merge q gv1)), (Permutation (a2 :: q) (merge gv1 q)), (Permutation (a2 :: q) (merge gv1 gv1)), (Permutation (a2 :: q) (heap_delete_max a2)), (Permutation (a2 :: q) (heap_delete_max a1)), (Permutation (a2 :: q) (join q q a2)), (Permutation (a2 :: q) (join q q a1))
(Permutation (a2 :: q) (join q gv1 a2)), (Permutation (a2 :: q) (join q gv1 a1)), (Permutation (a2 :: q) (join gv1 q a2)), (Permutation (a2 :: q) (join gv1 q a1)), (Permutation (a2 :: q) (join gv1 gv1 a2)), (Permutation (a2 :: q) (join gv1 gv1 a1)), (Permutation (a2 :: q) (insert x q)), (Permutation (a2 :: q) (insert x gv1)), (Permutation (a2 :: q) (insert n q)), (Permutation (a2 :: q) (insert n gv1))
(Permutation (a2 :: q) (carry q a2)), (Permutation (a2 :: q) (carry q a1)), (Permutation (a2 :: q) (carry gv1 a2)), (Permutation (a2 :: q) (carry gv1 a1)), (Permutation (a2 :: q) (q ++ q)), (Permutation (a2 :: q) (q ++ gv1)), (Permutation (a2 :: q) (gv1 ++ q)), (Permutation (a2 :: q) (gv1 ++ gv1)), (Permutation (a2 :: q) []), (Permutation (a2 :: gv1) q)
(Permutation (a2 :: gv1) gv1), (Permutation (a2 :: gv1) (a2 :: q)), (Permutation (a2 :: gv1) (a1 :: q)), (Permutation (a2 :: gv1) (a1 :: gv1)), (Permutation (a2 :: gv1) (merge q q)), (Permutation (a2 :: gv1) (merge q gv1)), (Permutation (a2 :: gv1) (merge gv1 q)), (Permutation (a2 :: gv1) (merge gv1 gv1)), (Permutation (a2 :: gv1) (heap_delete_max a2)), (Permutation (a2 :: gv1) (heap_delete_max a1))
(Permutation (a2 :: gv1) (join q q a2)), (Permutation (a2 :: gv1) (join q q a1)), (Permutation (a2 :: gv1) (join q gv1 a2)), (Permutation (a2 :: gv1) (join q gv1 a1)), (Permutation (a2 :: gv1) (join gv1 q a2)), (Permutation (a2 :: gv1) (join gv1 q a1)), (Permutation (a2 :: gv1) (join gv1 gv1 a2)), (Permutation (a2 :: gv1) (join gv1 gv1 a1)), (Permutation (a2 :: gv1) (insert x q)), (Permutation (a2 :: gv1) (insert x gv1))
(Permutation (a2 :: gv1) (insert n q)), (Permutation (a2 :: gv1) (insert n gv1)), (Permutation (a2 :: gv1) (carry q a2)), (Permutation (a2 :: gv1) (carry q a1)), (Permutation (a2 :: gv1) (carry gv1 a2)), (Permutation (a2 :: gv1) (carry gv1 a1)), (Permutation (a2 :: gv1) (q ++ q)), (Permutation (a2 :: gv1) (q ++ gv1)), (Permutation (a2 :: gv1) (gv1 ++ q)), (Permutation (a2 :: gv1) (gv1 ++ gv1))
(Permutation (a2 :: gv1) []), (Permutation (a1 :: q) q), (Permutation (a1 :: q) gv1), (Permutation (a1 :: q) (a2 :: q)), (Permutation (a1 :: q) (a2 :: gv1)), (Permutation (a1 :: q) (a1 :: gv1)), (Permutation (a1 :: q) (merge q q)), (Permutation (a1 :: q) (merge q gv1)), (Permutation (a1 :: q) (merge gv1 q)), (Permutation (a1 :: q) (merge gv1 gv1))
(Permutation (a1 :: q) (heap_delete_max a2)), (Permutation (a1 :: q) (heap_delete_max a1)), (Permutation (a1 :: q) (join q q a2)), (Permutation (a1 :: q) (join q q a1)), (Permutation (a1 :: q) (join q gv1 a2)), (Permutation (a1 :: q) (join q gv1 a1)), (Permutation (a1 :: q) (join gv1 q a2)), (Permutation (a1 :: q) (join gv1 q a1)), (Permutation (a1 :: q) (join gv1 gv1 a2)), (Permutation (a1 :: q) (join gv1 gv1 a1))
(Permutation (a1 :: q) (insert x q)), (Permutation (a1 :: q) (insert x gv1)), (Permutation (a1 :: q) (insert n q)), (Permutation (a1 :: q) (insert n gv1)), (Permutation (a1 :: q) (carry q a2)), (Permutation (a1 :: q) (carry q a1)), (Permutation (a1 :: q) (carry gv1 a2)), (Permutation (a1 :: q) (carry gv1 a1)), (Permutation (a1 :: q) (q ++ q)), (Permutation (a1 :: q) (q ++ gv1))
(Permutation (a1 :: q) (gv1 ++ q)), (Permutation (a1 :: q) (gv1 ++ gv1)), (Permutation (a1 :: q) []), (Permutation (a1 :: gv1) q), (Permutation (a1 :: gv1) gv1), (Permutation (a1 :: gv1) (a2 :: q)), (Permutation (a1 :: gv1) (a2 :: gv1)), (Permutation (a1 :: gv1) (a1 :: q)), (Permutation (a1 :: gv1) (merge q q)), (Permutation (a1 :: gv1) (merge q gv1))
(Permutation (a1 :: gv1) (merge gv1 q)), (Permutation (a1 :: gv1) (merge gv1 gv1)), (Permutation (a1 :: gv1) (heap_delete_max a2)), (Permutation (a1 :: gv1) (heap_delete_max a1)), (Permutation (a1 :: gv1) (join q q a2)), (Permutation (a1 :: gv1) (join q q a1)), (Permutation (a1 :: gv1) (join q gv1 a2)), (Permutation (a1 :: gv1) (join q gv1 a1)), (Permutation (a1 :: gv1) (join gv1 q a2)), (Permutation (a1 :: gv1) (join gv1 q a1))
(Permutation (a1 :: gv1) (join gv1 gv1 a2)), (Permutation (a1 :: gv1) (join gv1 gv1 a1)), (Permutation (a1 :: gv1) (insert x q)), (Permutation (a1 :: gv1) (insert x gv1)), (Permutation (a1 :: gv1) (insert n q)), (Permutation (a1 :: gv1) (insert n gv1)), (Permutation (a1 :: gv1) (carry q a2)), (Permutation (a1 :: gv1) (carry q a1)), (Permutation (a1 :: gv1) (carry gv1 a2)), (Permutation (a1 :: gv1) (carry gv1 a1))
(Permutation (a1 :: gv1) (q ++ q)), (Permutation (a1 :: gv1) (q ++ gv1)), (Permutation (a1 :: gv1) (gv1 ++ q)), (Permutation (a1 :: gv1) (gv1 ++ gv1)), (Permutation (a1 :: gv1) []), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) (a2 :: q)), (Permutation (merge q q) (a2 :: gv1)), (Permutation (merge q q) (a1 :: q))
(Permutation (merge q q) (a1 :: gv1)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (heap_delete_max a2)), (Permutation (merge q q) (heap_delete_max a1)), (Permutation (merge q q) (join q q a2)), (Permutation (merge q q) (join q q a1)), (Permutation (merge q q) (join q gv1 a2)), (Permutation (merge q q) (join q gv1 a1))
(Permutation (merge q q) (join gv1 q a2)), (Permutation (merge q q) (join gv1 q a1)), (Permutation (merge q q) (join gv1 gv1 a2)), (Permutation (merge q q) (join gv1 gv1 a1)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (insert n q)), (Permutation (merge q q) (insert n gv1)), (Permutation (merge q q) (carry q a2)), (Permutation (merge q q) (carry q a1))
(Permutation (merge q q) (carry gv1 a2)), (Permutation (merge q q) (carry gv1 a1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) []), (Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (a2 :: q))
(Permutation (merge q gv1) (a2 :: gv1)), (Permutation (merge q gv1) (a1 :: q)), (Permutation (merge q gv1) (a1 :: gv1)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (heap_delete_max a2)), (Permutation (merge q gv1) (heap_delete_max a1)), (Permutation (merge q gv1) (join q q a2)), (Permutation (merge q gv1) (join q q a1))
(Permutation (merge q gv1) (join q gv1 a2)), (Permutation (merge q gv1) (join q gv1 a1)), (Permutation (merge q gv1) (join gv1 q a2)), (Permutation (merge q gv1) (join gv1 q a1)), (Permutation (merge q gv1) (join gv1 gv1 a2)), (Permutation (merge q gv1) (join gv1 gv1 a1)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1)), (Permutation (merge q gv1) (insert n q)), (Permutation (merge q gv1) (insert n gv1))
(Permutation (merge q gv1) (carry q a2)), (Permutation (merge q gv1) (carry q a1)), (Permutation (merge q gv1) (carry gv1 a2)), (Permutation (merge q gv1) (carry gv1 a1)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) []), (Permutation (merge gv1 q) q)
(Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (a2 :: q)), (Permutation (merge gv1 q) (a2 :: gv1)), (Permutation (merge gv1 q) (a1 :: q)), (Permutation (merge gv1 q) (a1 :: gv1)), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (heap_delete_max a2)), (Permutation (merge gv1 q) (heap_delete_max a1))
(Permutation (merge gv1 q) (join q q a2)), (Permutation (merge gv1 q) (join q q a1)), (Permutation (merge gv1 q) (join q gv1 a2)), (Permutation (merge gv1 q) (join q gv1 a1)), (Permutation (merge gv1 q) (join gv1 q a2)), (Permutation (merge gv1 q) (join gv1 q a1)), (Permutation (merge gv1 q) (join gv1 gv1 a2)), (Permutation (merge gv1 q) (join gv1 gv1 a1)), (Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1))
(Permutation (merge gv1 q) (insert n q)), (Permutation (merge gv1 q) (insert n gv1)), (Permutation (merge gv1 q) (carry q a2)), (Permutation (merge gv1 q) (carry q a1)), (Permutation (merge gv1 q) (carry gv1 a2)), (Permutation (merge gv1 q) (carry gv1 a1)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q)), (Permutation (merge gv1 q) (gv1 ++ gv1))
(Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (a2 :: q)), (Permutation (merge gv1 gv1) (a2 :: gv1)), (Permutation (merge gv1 gv1) (a1 :: q)), (Permutation (merge gv1 gv1) (a1 :: gv1)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q))
(Permutation (merge gv1 gv1) (heap_delete_max a2)), (Permutation (merge gv1 gv1) (heap_delete_max a1)), (Permutation (merge gv1 gv1) (join q q a2)), (Permutation (merge gv1 gv1) (join q q a1)), (Permutation (merge gv1 gv1) (join q gv1 a2)), (Permutation (merge gv1 gv1) (join q gv1 a1)), (Permutation (merge gv1 gv1) (join gv1 q a2)), (Permutation (merge gv1 gv1) (join gv1 q a1)), (Permutation (merge gv1 gv1) (join gv1 gv1 a2)), (Permutation (merge gv1 gv1) (join gv1 gv1 a1))
(Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (insert n q)), (Permutation (merge gv1 gv1) (insert n gv1)), (Permutation (merge gv1 gv1) (carry q a2)), (Permutation (merge gv1 gv1) (carry q a1)), (Permutation (merge gv1 gv1) (carry gv1 a2)), (Permutation (merge gv1 gv1) (carry gv1 a1)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1))
(Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (heap_delete_max a2) q), (Permutation (heap_delete_max a2) gv1), (Permutation (heap_delete_max a2) (a2 :: q)), (Permutation (heap_delete_max a2) (a2 :: gv1)), (Permutation (heap_delete_max a2) (a1 :: q)), (Permutation (heap_delete_max a2) (a1 :: gv1)), (Permutation (heap_delete_max a2) (merge q q))
(Permutation (heap_delete_max a2) (merge q gv1)), (Permutation (heap_delete_max a2) (merge gv1 q)), (Permutation (heap_delete_max a2) (merge gv1 gv1)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join q q a2)), (Permutation (heap_delete_max a2) (join q q a1)), (Permutation (heap_delete_max a2) (join q gv1 a2)), (Permutation (heap_delete_max a2) (join q gv1 a1)), (Permutation (heap_delete_max a2) (join gv1 q a2)), (Permutation (heap_delete_max a2) (join gv1 q a1))
(Permutation (heap_delete_max a2) (join gv1 gv1 a2)), (Permutation (heap_delete_max a2) (join gv1 gv1 a1)), (Permutation (heap_delete_max a2) (insert x q)), (Permutation (heap_delete_max a2) (insert x gv1)), (Permutation (heap_delete_max a2) (insert n q)), (Permutation (heap_delete_max a2) (insert n gv1)), (Permutation (heap_delete_max a2) (carry q a2)), (Permutation (heap_delete_max a2) (carry q a1)), (Permutation (heap_delete_max a2) (carry gv1 a2)), (Permutation (heap_delete_max a2) (carry gv1 a1))
(Permutation (heap_delete_max a2) (q ++ q)), (Permutation (heap_delete_max a2) (q ++ gv1)), (Permutation (heap_delete_max a2) (gv1 ++ q)), (Permutation (heap_delete_max a2) (gv1 ++ gv1)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) q), (Permutation (heap_delete_max a1) gv1), (Permutation (heap_delete_max a1) (a2 :: q)), (Permutation (heap_delete_max a1) (a2 :: gv1)), (Permutation (heap_delete_max a1) (a1 :: q))
(Permutation (heap_delete_max a1) (a1 :: gv1)), (Permutation (heap_delete_max a1) (merge q q)), (Permutation (heap_delete_max a1) (merge q gv1)), (Permutation (heap_delete_max a1) (merge gv1 q)), (Permutation (heap_delete_max a1) (merge gv1 gv1)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join q q a2)), (Permutation (heap_delete_max a1) (join q q a1)), (Permutation (heap_delete_max a1) (join q gv1 a2)), (Permutation (heap_delete_max a1) (join q gv1 a1))
(Permutation (heap_delete_max a1) (join gv1 q a2)), (Permutation (heap_delete_max a1) (join gv1 q a1)), (Permutation (heap_delete_max a1) (join gv1 gv1 a2)), (Permutation (heap_delete_max a1) (join gv1 gv1 a1)), (Permutation (heap_delete_max a1) (insert x q)), (Permutation (heap_delete_max a1) (insert x gv1)), (Permutation (heap_delete_max a1) (insert n q)), (Permutation (heap_delete_max a1) (insert n gv1)), (Permutation (heap_delete_max a1) (carry q a2)), (Permutation (heap_delete_max a1) (carry q a1))
(Permutation (heap_delete_max a1) (carry gv1 a2)), (Permutation (heap_delete_max a1) (carry gv1 a1)), (Permutation (heap_delete_max a1) (q ++ q)), (Permutation (heap_delete_max a1) (q ++ gv1)), (Permutation (heap_delete_max a1) (gv1 ++ q)), (Permutation (heap_delete_max a1) (gv1 ++ gv1)), (Permutation (heap_delete_max a1) []), (Permutation (join q q a2) q), (Permutation (join q q a2) gv1), (Permutation (join q q a2) (a2 :: q))
(Permutation (join q q a2) (a2 :: gv1)), (Permutation (join q q a2) (a1 :: q)), (Permutation (join q q a2) (a1 :: gv1)), (Permutation (join q q a2) (merge q q)), (Permutation (join q q a2) (merge q gv1)), (Permutation (join q q a2) (merge gv1 q)), (Permutation (join q q a2) (merge gv1 gv1)), (Permutation (join q q a2) (heap_delete_max a2)), (Permutation (join q q a2) (heap_delete_max a1)), (Permutation (join q q a2) (join q q a1))
(Permutation (join q q a2) (join q gv1 a2)), (Permutation (join q q a2) (join q gv1 a1)), (Permutation (join q q a2) (join gv1 q a2)), (Permutation (join q q a2) (join gv1 q a1)), (Permutation (join q q a2) (join gv1 gv1 a2)), (Permutation (join q q a2) (join gv1 gv1 a1)), (Permutation (join q q a2) (insert x q)), (Permutation (join q q a2) (insert x gv1)), (Permutation (join q q a2) (insert n q)), (Permutation (join q q a2) (insert n gv1))
(Permutation (join q q a2) (carry q a2)), (Permutation (join q q a2) (carry q a1)), (Permutation (join q q a2) (carry gv1 a2)), (Permutation (join q q a2) (carry gv1 a1)), (Permutation (join q q a2) (q ++ q)), (Permutation (join q q a2) (q ++ gv1)), (Permutation (join q q a2) (gv1 ++ q)), (Permutation (join q q a2) (gv1 ++ gv1)), (Permutation (join q q a2) []), (Permutation (join q q a1) q)
(Permutation (join q q a1) gv1), (Permutation (join q q a1) (a2 :: q)), (Permutation (join q q a1) (a2 :: gv1)), (Permutation (join q q a1) (a1 :: q)), (Permutation (join q q a1) (a1 :: gv1)), (Permutation (join q q a1) (merge q q)), (Permutation (join q q a1) (merge q gv1)), (Permutation (join q q a1) (merge gv1 q)), (Permutation (join q q a1) (merge gv1 gv1)), (Permutation (join q q a1) (heap_delete_max a2))
(Permutation (join q q a1) (heap_delete_max a1)), (Permutation (join q q a1) (join q q a2)), (Permutation (join q q a1) (join q gv1 a2)), (Permutation (join q q a1) (join q gv1 a1)), (Permutation (join q q a1) (join gv1 q a2)), (Permutation (join q q a1) (join gv1 q a1)), (Permutation (join q q a1) (join gv1 gv1 a2)), (Permutation (join q q a1) (join gv1 gv1 a1)), (Permutation (join q q a1) (insert x q)), (Permutation (join q q a1) (insert x gv1))
(Permutation (join q q a1) (insert n q)), (Permutation (join q q a1) (insert n gv1)), (Permutation (join q q a1) (carry q a2)), (Permutation (join q q a1) (carry q a1)), (Permutation (join q q a1) (carry gv1 a2)), (Permutation (join q q a1) (carry gv1 a1)), (Permutation (join q q a1) (q ++ q)), (Permutation (join q q a1) (q ++ gv1)), (Permutation (join q q a1) (gv1 ++ q)), (Permutation (join q q a1) (gv1 ++ gv1))
(Permutation (join q q a1) []), (Permutation (join q gv1 a2) q), (Permutation (join q gv1 a2) gv1), (Permutation (join q gv1 a2) (a2 :: q)), (Permutation (join q gv1 a2) (a2 :: gv1)), (Permutation (join q gv1 a2) (a1 :: q)), (Permutation (join q gv1 a2) (a1 :: gv1)), (Permutation (join q gv1 a2) (merge q q)), (Permutation (join q gv1 a2) (merge q gv1)), (Permutation (join q gv1 a2) (merge gv1 q))
(Permutation (join q gv1 a2) (merge gv1 gv1)), (Permutation (join q gv1 a2) (heap_delete_max a2)), (Permutation (join q gv1 a2) (heap_delete_max a1)), (Permutation (join q gv1 a2) (join q q a2)), (Permutation (join q gv1 a2) (join q q a1)), (Permutation (join q gv1 a2) (join q gv1 a1)), (Permutation (join q gv1 a2) (join gv1 q a2)), (Permutation (join q gv1 a2) (join gv1 q a1)), (Permutation (join q gv1 a2) (join gv1 gv1 a2)), (Permutation (join q gv1 a2) (join gv1 gv1 a1))
(Permutation (join q gv1 a2) (insert x q)), (Permutation (join q gv1 a2) (insert x gv1)), (Permutation (join q gv1 a2) (insert n q)), (Permutation (join q gv1 a2) (insert n gv1)), (Permutation (join q gv1 a2) (carry q a2)), (Permutation (join q gv1 a2) (carry q a1)), (Permutation (join q gv1 a2) (carry gv1 a2)), (Permutation (join q gv1 a2) (carry gv1 a1)), (Permutation (join q gv1 a2) (q ++ q)), (Permutation (join q gv1 a2) (q ++ gv1))
(Permutation (join q gv1 a2) (gv1 ++ q)), (Permutation (join q gv1 a2) (gv1 ++ gv1)), (Permutation (join q gv1 a2) []), (Permutation (join q gv1 a1) q), (Permutation (join q gv1 a1) gv1), (Permutation (join q gv1 a1) (a2 :: q)), (Permutation (join q gv1 a1) (a2 :: gv1)), (Permutation (join q gv1 a1) (a1 :: q)), (Permutation (join q gv1 a1) (a1 :: gv1)), (Permutation (join q gv1 a1) (merge q q))
(Permutation (join q gv1 a1) (merge q gv1)), (Permutation (join q gv1 a1) (merge gv1 q)), (Permutation (join q gv1 a1) (merge gv1 gv1)), (Permutation (join q gv1 a1) (heap_delete_max a2)), (Permutation (join q gv1 a1) (heap_delete_max a1)), (Permutation (join q gv1 a1) (join q q a2)), (Permutation (join q gv1 a1) (join q q a1)), (Permutation (join q gv1 a1) (join q gv1 a2)), (Permutation (join q gv1 a1) (join gv1 q a2)), (Permutation (join q gv1 a1) (join gv1 q a1))
(Permutation (join q gv1 a1) (join gv1 gv1 a2)), (Permutation (join q gv1 a1) (join gv1 gv1 a1)), (Permutation (join q gv1 a1) (insert x q)), (Permutation (join q gv1 a1) (insert x gv1)), (Permutation (join q gv1 a1) (insert n q)), (Permutation (join q gv1 a1) (insert n gv1)), (Permutation (join q gv1 a1) (carry q a2)), (Permutation (join q gv1 a1) (carry q a1)), (Permutation (join q gv1 a1) (carry gv1 a2)), (Permutation (join q gv1 a1) (carry gv1 a1))
(Permutation (join q gv1 a1) (q ++ q)), (Permutation (join q gv1 a1) (q ++ gv1)), (Permutation (join q gv1 a1) (gv1 ++ q)), (Permutation (join q gv1 a1) (gv1 ++ gv1)), (Permutation (join q gv1 a1) []), (Permutation (join gv1 q a2) q), (Permutation (join gv1 q a2) gv1), (Permutation (join gv1 q a2) (a2 :: q)), (Permutation (join gv1 q a2) (a2 :: gv1)), (Permutation (join gv1 q a2) (a1 :: q))
(Permutation (join gv1 q a2) (a1 :: gv1)), (Permutation (join gv1 q a2) (merge q q)), (Permutation (join gv1 q a2) (merge q gv1)), (Permutation (join gv1 q a2) (merge gv1 q)), (Permutation (join gv1 q a2) (merge gv1 gv1)), (Permutation (join gv1 q a2) (heap_delete_max a2)), (Permutation (join gv1 q a2) (heap_delete_max a1)), (Permutation (join gv1 q a2) (join q q a2)), (Permutation (join gv1 q a2) (join q q a1)), (Permutation (join gv1 q a2) (join q gv1 a2))
(Permutation (join gv1 q a2) (join q gv1 a1)), (Permutation (join gv1 q a2) (join gv1 q a1)), (Permutation (join gv1 q a2) (join gv1 gv1 a2)), (Permutation (join gv1 q a2) (join gv1 gv1 a1)), (Permutation (join gv1 q a2) (insert x q)), (Permutation (join gv1 q a2) (insert x gv1)), (Permutation (join gv1 q a2) (insert n q)), (Permutation (join gv1 q a2) (insert n gv1)), (Permutation (join gv1 q a2) (carry q a2)), (Permutation (join gv1 q a2) (carry q a1))
(Permutation (join gv1 q a2) (carry gv1 a2)), (Permutation (join gv1 q a2) (carry gv1 a1)), (Permutation (join gv1 q a2) (q ++ q)), (Permutation (join gv1 q a2) (q ++ gv1)), (Permutation (join gv1 q a2) (gv1 ++ q)), (Permutation (join gv1 q a2) (gv1 ++ gv1)), (Permutation (join gv1 q a2) []), (Permutation (join gv1 q a1) q), (Permutation (join gv1 q a1) gv1), (Permutation (join gv1 q a1) (a2 :: q))
(Permutation (join gv1 q a1) (a2 :: gv1)), (Permutation (join gv1 q a1) (a1 :: q)), (Permutation (join gv1 q a1) (a1 :: gv1)), (Permutation (join gv1 q a1) (merge q q)), (Permutation (join gv1 q a1) (merge q gv1)), (Permutation (join gv1 q a1) (merge gv1 q)), (Permutation (join gv1 q a1) (merge gv1 gv1)), (Permutation (join gv1 q a1) (heap_delete_max a2)), (Permutation (join gv1 q a1) (heap_delete_max a1)), (Permutation (join gv1 q a1) (join q q a2))
(Permutation (join gv1 q a1) (join q q a1)), (Permutation (join gv1 q a1) (join q gv1 a2)), (Permutation (join gv1 q a1) (join q gv1 a1)), (Permutation (join gv1 q a1) (join gv1 q a2)), (Permutation (join gv1 q a1) (join gv1 gv1 a2)), (Permutation (join gv1 q a1) (join gv1 gv1 a1)), (Permutation (join gv1 q a1) (insert x q)), (Permutation (join gv1 q a1) (insert x gv1)), (Permutation (join gv1 q a1) (insert n q)), (Permutation (join gv1 q a1) (insert n gv1))
(Permutation (join gv1 q a1) (carry q a2)), (Permutation (join gv1 q a1) (carry q a1)), (Permutation (join gv1 q a1) (carry gv1 a2)), (Permutation (join gv1 q a1) (carry gv1 a1)), (Permutation (join gv1 q a1) (q ++ q)), (Permutation (join gv1 q a1) (q ++ gv1)), (Permutation (join gv1 q a1) (gv1 ++ q)), (Permutation (join gv1 q a1) (gv1 ++ gv1)), (Permutation (join gv1 q a1) []), (Permutation (join gv1 gv1 a2) q)
(Permutation (join gv1 gv1 a2) gv1), (Permutation (join gv1 gv1 a2) (a2 :: q)), (Permutation (join gv1 gv1 a2) (a2 :: gv1)), (Permutation (join gv1 gv1 a2) (a1 :: q)), (Permutation (join gv1 gv1 a2) (a1 :: gv1)), (Permutation (join gv1 gv1 a2) (merge q q)), (Permutation (join gv1 gv1 a2) (merge q gv1)), (Permutation (join gv1 gv1 a2) (merge gv1 q)), (Permutation (join gv1 gv1 a2) (merge gv1 gv1)), (Permutation (join gv1 gv1 a2) (heap_delete_max a2))
(Permutation (join gv1 gv1 a2) (heap_delete_max a1)), (Permutation (join gv1 gv1 a2) (join q q a2)), (Permutation (join gv1 gv1 a2) (join q q a1)), (Permutation (join gv1 gv1 a2) (join q gv1 a2)), (Permutation (join gv1 gv1 a2) (join q gv1 a1)), (Permutation (join gv1 gv1 a2) (join gv1 q a2)), (Permutation (join gv1 gv1 a2) (join gv1 q a1)), (Permutation (join gv1 gv1 a2) (join gv1 gv1 a1)), (Permutation (join gv1 gv1 a2) (insert x q)), (Permutation (join gv1 gv1 a2) (insert x gv1))
(Permutation (join gv1 gv1 a2) (insert n q)), (Permutation (join gv1 gv1 a2) (insert n gv1)), (Permutation (join gv1 gv1 a2) (carry q a2)), (Permutation (join gv1 gv1 a2) (carry q a1)), (Permutation (join gv1 gv1 a2) (carry gv1 a2)), (Permutation (join gv1 gv1 a2) (carry gv1 a1)), (Permutation (join gv1 gv1 a2) (q ++ q)), (Permutation (join gv1 gv1 a2) (q ++ gv1)), (Permutation (join gv1 gv1 a2) (gv1 ++ q)), (Permutation (join gv1 gv1 a2) (gv1 ++ gv1))
(Permutation (join gv1 gv1 a2) []), (Permutation (join gv1 gv1 a1) q), (Permutation (join gv1 gv1 a1) gv1), (Permutation (join gv1 gv1 a1) (a2 :: q)), (Permutation (join gv1 gv1 a1) (a2 :: gv1)), (Permutation (join gv1 gv1 a1) (a1 :: q)), (Permutation (join gv1 gv1 a1) (a1 :: gv1)), (Permutation (join gv1 gv1 a1) (merge q q)), (Permutation (join gv1 gv1 a1) (merge q gv1)), (Permutation (join gv1 gv1 a1) (merge gv1 q))
(Permutation (join gv1 gv1 a1) (merge gv1 gv1)), (Permutation (join gv1 gv1 a1) (heap_delete_max a2)), (Permutation (join gv1 gv1 a1) (heap_delete_max a1)), (Permutation (join gv1 gv1 a1) (join q q a2)), (Permutation (join gv1 gv1 a1) (join q q a1)), (Permutation (join gv1 gv1 a1) (join q gv1 a2)), (Permutation (join gv1 gv1 a1) (join q gv1 a1)), (Permutation (join gv1 gv1 a1) (join gv1 q a2)), (Permutation (join gv1 gv1 a1) (join gv1 q a1)), (Permutation (join gv1 gv1 a1) (join gv1 gv1 a2))
(Permutation (join gv1 gv1 a1) (insert x q)), (Permutation (join gv1 gv1 a1) (insert x gv1)), (Permutation (join gv1 gv1 a1) (insert n q)), (Permutation (join gv1 gv1 a1) (insert n gv1)), (Permutation (join gv1 gv1 a1) (carry q a2)), (Permutation (join gv1 gv1 a1) (carry q a1)), (Permutation (join gv1 gv1 a1) (carry gv1 a2)), (Permutation (join gv1 gv1 a1) (carry gv1 a1)), (Permutation (join gv1 gv1 a1) (q ++ q)), (Permutation (join gv1 gv1 a1) (q ++ gv1))
(Permutation (join gv1 gv1 a1) (gv1 ++ q)), (Permutation (join gv1 gv1 a1) (gv1 ++ gv1)), (Permutation (join gv1 gv1 a1) []), (Permutation (insert x q) q), (Permutation (insert x q) gv1), (Permutation (insert x q) (a2 :: q)), (Permutation (insert x q) (a2 :: gv1)), (Permutation (insert x q) (a1 :: q)), (Permutation (insert x q) (a1 :: gv1)), (Permutation (insert x q) (merge q q))
(Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q)), (Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (heap_delete_max a2)), (Permutation (insert x q) (heap_delete_max a1)), (Permutation (insert x q) (join q q a2)), (Permutation (insert x q) (join q q a1)), (Permutation (insert x q) (join q gv1 a2)), (Permutation (insert x q) (join q gv1 a1)), (Permutation (insert x q) (join gv1 q a2))
(Permutation (insert x q) (join gv1 q a1)), (Permutation (insert x q) (join gv1 gv1 a2)), (Permutation (insert x q) (join gv1 gv1 a1)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (insert n q)), (Permutation (insert x q) (insert n gv1)), (Permutation (insert x q) (carry q a2)), (Permutation (insert x q) (carry q a1)), (Permutation (insert x q) (carry gv1 a2)), (Permutation (insert x q) (carry gv1 a1))
(Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1)), (Permutation (insert x q) []), (Permutation (insert x gv1) q), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (a2 :: q)), (Permutation (insert x gv1) (a2 :: gv1)), (Permutation (insert x gv1) (a1 :: q))
(Permutation (insert x gv1) (a1 :: gv1)), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (heap_delete_max a2)), (Permutation (insert x gv1) (heap_delete_max a1)), (Permutation (insert x gv1) (join q q a2)), (Permutation (insert x gv1) (join q q a1)), (Permutation (insert x gv1) (join q gv1 a2))
(Permutation (insert x gv1) (join q gv1 a1)), (Permutation (insert x gv1) (join gv1 q a2)), (Permutation (insert x gv1) (join gv1 q a1)), (Permutation (insert x gv1) (join gv1 gv1 a2)), (Permutation (insert x gv1) (join gv1 gv1 a1)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (insert n q)), (Permutation (insert x gv1) (insert n gv1)), (Permutation (insert x gv1) (carry q a2)), (Permutation (insert x gv1) (carry q a1))
(Permutation (insert x gv1) (carry gv1 a2)), (Permutation (insert x gv1) (carry gv1 a1)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1)), (Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (insert n q) q), (Permutation (insert n q) gv1), (Permutation (insert n q) (a2 :: q))
(Permutation (insert n q) (a2 :: gv1)), (Permutation (insert n q) (a1 :: q)), (Permutation (insert n q) (a1 :: gv1)), (Permutation (insert n q) (merge q q)), (Permutation (insert n q) (merge q gv1)), (Permutation (insert n q) (merge gv1 q)), (Permutation (insert n q) (merge gv1 gv1)), (Permutation (insert n q) (heap_delete_max a2)), (Permutation (insert n q) (heap_delete_max a1)), (Permutation (insert n q) (join q q a2))
(Permutation (insert n q) (join q q a1)), (Permutation (insert n q) (join q gv1 a2)), (Permutation (insert n q) (join q gv1 a1)), (Permutation (insert n q) (join gv1 q a2)), (Permutation (insert n q) (join gv1 q a1)), (Permutation (insert n q) (join gv1 gv1 a2)), (Permutation (insert n q) (join gv1 gv1 a1)), (Permutation (insert n q) (insert x q)), (Permutation (insert n q) (insert x gv1)), (Permutation (insert n q) (insert n gv1))
(Permutation (insert n q) (carry q a2)), (Permutation (insert n q) (carry q a1)), (Permutation (insert n q) (carry gv1 a2)), (Permutation (insert n q) (carry gv1 a1)), (Permutation (insert n q) (q ++ q)), (Permutation (insert n q) (q ++ gv1)), (Permutation (insert n q) (gv1 ++ q)), (Permutation (insert n q) (gv1 ++ gv1)), (Permutation (insert n q) []), (Permutation (insert n gv1) q)
(Permutation (insert n gv1) gv1), (Permutation (insert n gv1) (a2 :: q)), (Permutation (insert n gv1) (a2 :: gv1)), (Permutation (insert n gv1) (a1 :: q)), (Permutation (insert n gv1) (a1 :: gv1)), (Permutation (insert n gv1) (merge q q)), (Permutation (insert n gv1) (merge q gv1)), (Permutation (insert n gv1) (merge gv1 q)), (Permutation (insert n gv1) (merge gv1 gv1)), (Permutation (insert n gv1) (heap_delete_max a2))
(Permutation (insert n gv1) (heap_delete_max a1)), (Permutation (insert n gv1) (join q q a2)), (Permutation (insert n gv1) (join q q a1)), (Permutation (insert n gv1) (join q gv1 a2)), (Permutation (insert n gv1) (join q gv1 a1)), (Permutation (insert n gv1) (join gv1 q a2)), (Permutation (insert n gv1) (join gv1 q a1)), (Permutation (insert n gv1) (join gv1 gv1 a2)), (Permutation (insert n gv1) (join gv1 gv1 a1)), (Permutation (insert n gv1) (insert x q))
(Permutation (insert n gv1) (insert x gv1)), (Permutation (insert n gv1) (insert n q)), (Permutation (insert n gv1) (carry q a2)), (Permutation (insert n gv1) (carry q a1)), (Permutation (insert n gv1) (carry gv1 a2)), (Permutation (insert n gv1) (carry gv1 a1)), (Permutation (insert n gv1) (q ++ q)), (Permutation (insert n gv1) (q ++ gv1)), (Permutation (insert n gv1) (gv1 ++ q)), (Permutation (insert n gv1) (gv1 ++ gv1))
(Permutation (insert n gv1) []), (Permutation (carry q a2) q), (Permutation (carry q a2) gv1), (Permutation (carry q a2) (a2 :: q)), (Permutation (carry q a2) (a2 :: gv1)), (Permutation (carry q a2) (a1 :: q)), (Permutation (carry q a2) (a1 :: gv1)), (Permutation (carry q a2) (merge q q)), (Permutation (carry q a2) (merge q gv1)), (Permutation (carry q a2) (merge gv1 q))
(Permutation (carry q a2) (merge gv1 gv1)), (Permutation (carry q a2) (heap_delete_max a2)), (Permutation (carry q a2) (heap_delete_max a1)), (Permutation (carry q a2) (join q q a2)), (Permutation (carry q a2) (join q q a1)), (Permutation (carry q a2) (join q gv1 a2)), (Permutation (carry q a2) (join q gv1 a1)), (Permutation (carry q a2) (join gv1 q a2)), (Permutation (carry q a2) (join gv1 q a1)), (Permutation (carry q a2) (join gv1 gv1 a2))
(Permutation (carry q a2) (join gv1 gv1 a1)), (Permutation (carry q a2) (insert x q)), (Permutation (carry q a2) (insert x gv1)), (Permutation (carry q a2) (insert n q)), (Permutation (carry q a2) (insert n gv1)), (Permutation (carry q a2) (carry q a1)), (Permutation (carry q a2) (carry gv1 a2)), (Permutation (carry q a2) (carry gv1 a1)), (Permutation (carry q a2) (q ++ q)), (Permutation (carry q a2) (q ++ gv1))
(Permutation (carry q a2) (gv1 ++ q)), (Permutation (carry q a2) (gv1 ++ gv1)), (Permutation (carry q a2) []), (Permutation (carry q a1) q), (Permutation (carry q a1) gv1), (Permutation (carry q a1) (a2 :: q)), (Permutation (carry q a1) (a2 :: gv1)), (Permutation (carry q a1) (a1 :: q)), (Permutation (carry q a1) (a1 :: gv1)), (Permutation (carry q a1) (merge q q))
(Permutation (carry q a1) (merge q gv1)), (Permutation (carry q a1) (merge gv1 q)), (Permutation (carry q a1) (merge gv1 gv1)), (Permutation (carry q a1) (heap_delete_max a2)), (Permutation (carry q a1) (heap_delete_max a1)), (Permutation (carry q a1) (join q q a2)), (Permutation (carry q a1) (join q q a1)), (Permutation (carry q a1) (join q gv1 a2)), (Permutation (carry q a1) (join q gv1 a1)), (Permutation (carry q a1) (join gv1 q a2))
(Permutation (carry q a1) (join gv1 q a1)), (Permutation (carry q a1) (join gv1 gv1 a2)), (Permutation (carry q a1) (join gv1 gv1 a1)), (Permutation (carry q a1) (insert x q)), (Permutation (carry q a1) (insert x gv1)), (Permutation (carry q a1) (insert n q)), (Permutation (carry q a1) (insert n gv1)), (Permutation (carry q a1) (carry q a2)), (Permutation (carry q a1) (carry gv1 a2)), (Permutation (carry q a1) (carry gv1 a1))
(Permutation (carry q a1) (q ++ q)), (Permutation (carry q a1) (q ++ gv1)), (Permutation (carry q a1) (gv1 ++ q)), (Permutation (carry q a1) (gv1 ++ gv1)), (Permutation (carry q a1) []), (Permutation (carry gv1 a2) q), (Permutation (carry gv1 a2) gv1), (Permutation (carry gv1 a2) (a2 :: q)), (Permutation (carry gv1 a2) (a2 :: gv1)), (Permutation (carry gv1 a2) (a1 :: q))
(Permutation (carry gv1 a2) (a1 :: gv1)), (Permutation (carry gv1 a2) (merge q q)), (Permutation (carry gv1 a2) (merge q gv1)), (Permutation (carry gv1 a2) (merge gv1 q)), (Permutation (carry gv1 a2) (merge gv1 gv1)), (Permutation (carry gv1 a2) (heap_delete_max a2)), (Permutation (carry gv1 a2) (heap_delete_max a1)), (Permutation (carry gv1 a2) (join q q a2)), (Permutation (carry gv1 a2) (join q q a1)), (Permutation (carry gv1 a2) (join q gv1 a2))
(Permutation (carry gv1 a2) (join q gv1 a1)), (Permutation (carry gv1 a2) (join gv1 q a2)), (Permutation (carry gv1 a2) (join gv1 q a1)), (Permutation (carry gv1 a2) (join gv1 gv1 a2)), (Permutation (carry gv1 a2) (join gv1 gv1 a1)), (Permutation (carry gv1 a2) (insert x q)), (Permutation (carry gv1 a2) (insert x gv1)), (Permutation (carry gv1 a2) (insert n q)), (Permutation (carry gv1 a2) (insert n gv1)), (Permutation (carry gv1 a2) (carry q a2))
(Permutation (carry gv1 a2) (carry q a1)), (Permutation (carry gv1 a2) (carry gv1 a1)), (Permutation (carry gv1 a2) (q ++ q)), (Permutation (carry gv1 a2) (q ++ gv1)), (Permutation (carry gv1 a2) (gv1 ++ q)), (Permutation (carry gv1 a2) (gv1 ++ gv1)), (Permutation (carry gv1 a2) []), (Permutation (carry gv1 a1) q), (Permutation (carry gv1 a1) gv1), (Permutation (carry gv1 a1) (a2 :: q))
(Permutation (carry gv1 a1) (a2 :: gv1)), (Permutation (carry gv1 a1) (a1 :: q)), (Permutation (carry gv1 a1) (a1 :: gv1)), (Permutation (carry gv1 a1) (merge q q)), (Permutation (carry gv1 a1) (merge q gv1)), (Permutation (carry gv1 a1) (merge gv1 q)), (Permutation (carry gv1 a1) (merge gv1 gv1)), (Permutation (carry gv1 a1) (heap_delete_max a2)), (Permutation (carry gv1 a1) (heap_delete_max a1)), (Permutation (carry gv1 a1) (join q q a2))
(Permutation (carry gv1 a1) (join q q a1)), (Permutation (carry gv1 a1) (join q gv1 a2)), (Permutation (carry gv1 a1) (join q gv1 a1)), (Permutation (carry gv1 a1) (join gv1 q a2)), (Permutation (carry gv1 a1) (join gv1 q a1)), (Permutation (carry gv1 a1) (join gv1 gv1 a2)), (Permutation (carry gv1 a1) (join gv1 gv1 a1)), (Permutation (carry gv1 a1) (insert x q)), (Permutation (carry gv1 a1) (insert x gv1)), (Permutation (carry gv1 a1) (insert n q))
(Permutation (carry gv1 a1) (insert n gv1)), (Permutation (carry gv1 a1) (carry q a2)), (Permutation (carry gv1 a1) (carry q a1)), (Permutation (carry gv1 a1) (carry gv1 a2)), (Permutation (carry gv1 a1) (q ++ q)), (Permutation (carry gv1 a1) (q ++ gv1)), (Permutation (carry gv1 a1) (gv1 ++ q)), (Permutation (carry gv1 a1) (gv1 ++ gv1)), (Permutation (carry gv1 a1) []), (Permutation (q ++ q) q)
(Permutation (q ++ q) gv1), (Permutation (q ++ q) (a2 :: q)), (Permutation (q ++ q) (a2 :: gv1)), (Permutation (q ++ q) (a1 :: q)), (Permutation (q ++ q) (a1 :: gv1)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (heap_delete_max a2))
(Permutation (q ++ q) (heap_delete_max a1)), (Permutation (q ++ q) (join q q a2)), (Permutation (q ++ q) (join q q a1)), (Permutation (q ++ q) (join q gv1 a2)), (Permutation (q ++ q) (join q gv1 a1)), (Permutation (q ++ q) (join gv1 q a2)), (Permutation (q ++ q) (join gv1 q a1)), (Permutation (q ++ q) (join gv1 gv1 a2)), (Permutation (q ++ q) (join gv1 gv1 a1)), (Permutation (q ++ q) (insert x q))
(Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (insert n q)), (Permutation (q ++ q) (insert n gv1)), (Permutation (q ++ q) (carry q a2)), (Permutation (q ++ q) (carry q a1)), (Permutation (q ++ q) (carry gv1 a2)), (Permutation (q ++ q) (carry gv1 a1)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1))
(Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (a2 :: q)), (Permutation (q ++ gv1) (a2 :: gv1)), (Permutation (q ++ gv1) (a1 :: q)), (Permutation (q ++ gv1) (a1 :: gv1)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q))
(Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (heap_delete_max a2)), (Permutation (q ++ gv1) (heap_delete_max a1)), (Permutation (q ++ gv1) (join q q a2)), (Permutation (q ++ gv1) (join q q a1)), (Permutation (q ++ gv1) (join q gv1 a2)), (Permutation (q ++ gv1) (join q gv1 a1)), (Permutation (q ++ gv1) (join gv1 q a2)), (Permutation (q ++ gv1) (join gv1 q a1)), (Permutation (q ++ gv1) (join gv1 gv1 a2))
(Permutation (q ++ gv1) (join gv1 gv1 a1)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (insert n q)), (Permutation (q ++ gv1) (insert n gv1)), (Permutation (q ++ gv1) (carry q a2)), (Permutation (q ++ gv1) (carry q a1)), (Permutation (q ++ gv1) (carry gv1 a2)), (Permutation (q ++ gv1) (carry gv1 a1)), (Permutation (q ++ gv1) (q ++ q))
(Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (a2 :: q)), (Permutation (gv1 ++ q) (a2 :: gv1)), (Permutation (gv1 ++ q) (a1 :: q)), (Permutation (gv1 ++ q) (a1 :: gv1)), (Permutation (gv1 ++ q) (merge q q))
(Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (heap_delete_max a2)), (Permutation (gv1 ++ q) (heap_delete_max a1)), (Permutation (gv1 ++ q) (join q q a2)), (Permutation (gv1 ++ q) (join q q a1)), (Permutation (gv1 ++ q) (join q gv1 a2)), (Permutation (gv1 ++ q) (join q gv1 a1)), (Permutation (gv1 ++ q) (join gv1 q a2))
(Permutation (gv1 ++ q) (join gv1 q a1)), (Permutation (gv1 ++ q) (join gv1 gv1 a2)), (Permutation (gv1 ++ q) (join gv1 gv1 a1)), (Permutation (gv1 ++ q) (insert x q)), (Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (insert n q)), (Permutation (gv1 ++ q) (insert n gv1)), (Permutation (gv1 ++ q) (carry q a2)), (Permutation (gv1 ++ q) (carry q a1)), (Permutation (gv1 ++ q) (carry gv1 a2))
(Permutation (gv1 ++ q) (carry gv1 a1)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (a2 :: q)), (Permutation (gv1 ++ gv1) (a2 :: gv1)), (Permutation (gv1 ++ gv1) (a1 :: q))
(Permutation (gv1 ++ gv1) (a1 :: gv1)), (Permutation (gv1 ++ gv1) (merge q q)), (Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (heap_delete_max a2)), (Permutation (gv1 ++ gv1) (heap_delete_max a1)), (Permutation (gv1 ++ gv1) (join q q a2)), (Permutation (gv1 ++ gv1) (join q q a1)), (Permutation (gv1 ++ gv1) (join q gv1 a2))
(Permutation (gv1 ++ gv1) (join q gv1 a1)), (Permutation (gv1 ++ gv1) (join gv1 q a2)), (Permutation (gv1 ++ gv1) (join gv1 q a1)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a2)), (Permutation (gv1 ++ gv1) (join gv1 gv1 a1)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (insert n q)), (Permutation (gv1 ++ gv1) (insert n gv1)), (Permutation (gv1 ++ gv1) (carry q a2))
(Permutation (gv1 ++ gv1) (carry q a1)), (Permutation (gv1 ++ gv1) (carry gv1 a2)), (Permutation (gv1 ++ gv1) (carry gv1 a1)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] (a2 :: q))
(Permutation [] (a2 :: gv1)), (Permutation [] (a1 :: q)), (Permutation [] (a1 :: gv1)), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join q q a2))
(Permutation [] (join q q a1)), (Permutation [] (join q gv1 a2)), (Permutation [] (join q gv1 a1)), (Permutation [] (join gv1 q a2)), (Permutation [] (join gv1 q a1)), (Permutation [] (join gv1 gv1 a2)), (Permutation [] (join gv1 gv1 a1)), (Permutation [] (insert x q)), (Permutation [] (insert x gv1)), (Permutation [] (insert n q))
(Permutation [] (insert n gv1)), (Permutation [] (carry q a2)), (Permutation [] (carry q a1)), (Permutation [] (carry gv1 a2)), (Permutation [] (carry gv1 a1)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (In a2 (a2 :: q))
(In a2 (a2 :: gv1)), (In a2 (a1 :: q)), (In a2 (a1 :: gv1)), (In a2 (merge q q)), (In a2 (merge q gv1)), (In a2 (merge gv1 q)), (In a2 (merge gv1 gv1)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (join q q a2))
(In a2 (join q q a1)), (In a2 (join q gv1 a2)), (In a2 (join q gv1 a1)), (In a2 (join gv1 q a2)), (In a2 (join gv1 q a1)), (In a2 (join gv1 gv1 a2)), (In a2 (join gv1 gv1 a1)), (In a2 (insert x q)), (In a2 (insert x gv1)), (In a2 (insert n q))
(In a2 (insert n gv1)), (In a2 (carry q a2)), (In a2 (carry q a1)), (In a2 (carry gv1 a2)), (In a2 (carry gv1 a1)), (In a2 (q ++ q)), (In a2 (q ++ gv1)), (In a2 (gv1 ++ q)), (In a2 (gv1 ++ gv1)), (In a1 (a2 :: q))
(In a1 (a2 :: gv1)), (In a1 (a1 :: q)), (In a1 (a1 :: gv1)), (In a1 (merge q q)), (In a1 (merge q gv1)), (In a1 (merge gv1 q)), (In a1 (merge gv1 gv1)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (join q q a2))
(In a1 (join q q a1)), (In a1 (join q gv1 a2)), (In a1 (join q gv1 a1)), (In a1 (join gv1 q a2)), (In a1 (join gv1 q a1)), (In a1 (join gv1 gv1 a2)), (In a1 (join gv1 gv1 a1)), (In a1 (insert x q)), (In a1 (insert x gv1)), (In a1 (insert n q))
(In a1 (insert n gv1)), (In a1 (carry q a2)), (In a1 (carry q a1)), (In a1 (carry gv1 a2)), (In a1 (carry gv1 a1)), (In a1 (q ++ q)), (In a1 (q ++ gv1)), (In a1 (gv1 ++ q)), (In a1 (gv1 ++ gv1)), (In (Node x a2 a2) q)
(In (Node x a2 a2) gv1), (In (Node x a2 a2) (a2 :: q)), (In (Node x a2 a2) (a2 :: gv1)), (In (Node x a2 a2) (a1 :: q)), (In (Node x a2 a2) (a1 :: gv1)), (In (Node x a2 a2) (merge q q)), (In (Node x a2 a2) (merge q gv1)), (In (Node x a2 a2) (merge gv1 q)), (In (Node x a2 a2) (merge gv1 gv1)), (In (Node x a2 a2) (heap_delete_max a2))
(In (Node x a2 a2) (heap_delete_max a1)), (In (Node x a2 a2) (join q q a2)), (In (Node x a2 a2) (join q q a1)), (In (Node x a2 a2) (join q gv1 a2)), (In (Node x a2 a2) (join q gv1 a1)), (In (Node x a2 a2) (join gv1 q a2)), (In (Node x a2 a2) (join gv1 q a1)), (In (Node x a2 a2) (join gv1 gv1 a2)), (In (Node x a2 a2) (join gv1 gv1 a1)), (In (Node x a2 a2) (insert x q))
(In (Node x a2 a2) (insert x gv1)), (In (Node x a2 a2) (insert n q)), (In (Node x a2 a2) (insert n gv1)), (In (Node x a2 a2) (carry q a2)), (In (Node x a2 a2) (carry q a1)), (In (Node x a2 a2) (carry gv1 a2)), (In (Node x a2 a2) (carry gv1 a1)), (In (Node x a2 a2) (q ++ q)), (In (Node x a2 a2) (q ++ gv1)), (In (Node x a2 a2) (gv1 ++ q))
(In (Node x a2 a2) (gv1 ++ gv1)), (In (Node x a2 a1) q), (In (Node x a2 a1) gv1), (In (Node x a2 a1) (a2 :: q)), (In (Node x a2 a1) (a2 :: gv1)), (In (Node x a2 a1) (a1 :: q)), (In (Node x a2 a1) (a1 :: gv1)), (In (Node x a2 a1) (merge q q)), (In (Node x a2 a1) (merge q gv1)), (In (Node x a2 a1) (merge gv1 q))
(In (Node x a2 a1) (merge gv1 gv1)), (In (Node x a2 a1) (heap_delete_max a2)), (In (Node x a2 a1) (heap_delete_max a1)), (In (Node x a2 a1) (join q q a2)), (In (Node x a2 a1) (join q q a1)), (In (Node x a2 a1) (join q gv1 a2)), (In (Node x a2 a1) (join q gv1 a1)), (In (Node x a2 a1) (join gv1 q a2)), (In (Node x a2 a1) (join gv1 q a1)), (In (Node x a2 a1) (join gv1 gv1 a2))
(In (Node x a2 a1) (join gv1 gv1 a1)), (In (Node x a2 a1) (insert x q)), (In (Node x a2 a1) (insert x gv1)), (In (Node x a2 a1) (insert n q)), (In (Node x a2 a1) (insert n gv1)), (In (Node x a2 a1) (carry q a2)), (In (Node x a2 a1) (carry q a1)), (In (Node x a2 a1) (carry gv1 a2)), (In (Node x a2 a1) (carry gv1 a1)), (In (Node x a2 a1) (q ++ q))
(In (Node x a2 a1) (q ++ gv1)), (In (Node x a2 a1) (gv1 ++ q)), (In (Node x a2 a1) (gv1 ++ gv1)), (In (Node x a1 a2) q), (In (Node x a1 a2) gv1), (In (Node x a1 a2) (a2 :: q)), (In (Node x a1 a2) (a2 :: gv1)), (In (Node x a1 a2) (a1 :: q)), (In (Node x a1 a2) (a1 :: gv1)), (In (Node x a1 a2) (merge q q))
(In (Node x a1 a2) (merge q gv1)), (In (Node x a1 a2) (merge gv1 q)), (In (Node x a1 a2) (merge gv1 gv1)), (In (Node x a1 a2) (heap_delete_max a2)), (In (Node x a1 a2) (heap_delete_max a1)), (In (Node x a1 a2) (join q q a2)), (In (Node x a1 a2) (join q q a1)), (In (Node x a1 a2) (join q gv1 a2)), (In (Node x a1 a2) (join q gv1 a1)), (In (Node x a1 a2) (join gv1 q a2))
(In (Node x a1 a2) (join gv1 q a1)), (In (Node x a1 a2) (join gv1 gv1 a2)), (In (Node x a1 a2) (join gv1 gv1 a1)), (In (Node x a1 a2) (insert x q)), (In (Node x a1 a2) (insert x gv1)), (In (Node x a1 a2) (insert n q)), (In (Node x a1 a2) (insert n gv1)), (In (Node x a1 a2) (carry q a2)), (In (Node x a1 a2) (carry q a1)), (In (Node x a1 a2) (carry gv1 a2))
(In (Node x a1 a2) (carry gv1 a1)), (In (Node x a1 a2) (q ++ q)), (In (Node x a1 a2) (q ++ gv1)), (In (Node x a1 a2) (gv1 ++ q)), (In (Node x a1 a2) (gv1 ++ gv1)), (In (Node x a1 a1) q), (In (Node x a1 a1) gv1), (In (Node x a1 a1) (a2 :: q)), (In (Node x a1 a1) (a2 :: gv1)), (In (Node x a1 a1) (a1 :: q))
(In (Node x a1 a1) (a1 :: gv1)), (In (Node x a1 a1) (merge q q)), (In (Node x a1 a1) (merge q gv1)), (In (Node x a1 a1) (merge gv1 q)), (In (Node x a1 a1) (merge gv1 gv1)), (In (Node x a1 a1) (heap_delete_max a2)), (In (Node x a1 a1) (heap_delete_max a1)), (In (Node x a1 a1) (join q q a2)), (In (Node x a1 a1) (join q q a1)), (In (Node x a1 a1) (join q gv1 a2))
(In (Node x a1 a1) (join q gv1 a1)), (In (Node x a1 a1) (join gv1 q a2)), (In (Node x a1 a1) (join gv1 q a1)), (In (Node x a1 a1) (join gv1 gv1 a2)), (In (Node x a1 a1) (join gv1 gv1 a1)), (In (Node x a1 a1) (insert x q)), (In (Node x a1 a1) (insert x gv1)), (In (Node x a1 a1) (insert n q)), (In (Node x a1 a1) (insert n gv1)), (In (Node x a1 a1) (carry q a2))
(In (Node x a1 a1) (carry q a1)), (In (Node x a1 a1) (carry gv1 a2)), (In (Node x a1 a1) (carry gv1 a1)), (In (Node x a1 a1) (q ++ q)), (In (Node x a1 a1) (q ++ gv1)), (In (Node x a1 a1) (gv1 ++ q)), (In (Node x a1 a1) (gv1 ++ gv1)), (In (Node n a2 a2) q), (In (Node n a2 a2) gv1), (In (Node n a2 a2) (a2 :: q))
(In (Node n a2 a2) (a2 :: gv1)), (In (Node n a2 a2) (a1 :: q)), (In (Node n a2 a2) (a1 :: gv1)), (In (Node n a2 a2) (merge q q)), (In (Node n a2 a2) (merge q gv1)), (In (Node n a2 a2) (merge gv1 q)), (In (Node n a2 a2) (merge gv1 gv1)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join q q a2))
(In (Node n a2 a2) (join q q a1)), (In (Node n a2 a2) (join q gv1 a2)), (In (Node n a2 a2) (join q gv1 a1)), (In (Node n a2 a2) (join gv1 q a2)), (In (Node n a2 a2) (join gv1 q a1)), (In (Node n a2 a2) (join gv1 gv1 a2)), (In (Node n a2 a2) (join gv1 gv1 a1)), (In (Node n a2 a2) (insert x q)), (In (Node n a2 a2) (insert x gv1)), (In (Node n a2 a2) (insert n q))
(In (Node n a2 a2) (insert n gv1)), (In (Node n a2 a2) (carry q a2)), (In (Node n a2 a2) (carry q a1)), (In (Node n a2 a2) (carry gv1 a2)), (In (Node n a2 a2) (carry gv1 a1)), (In (Node n a2 a2) (q ++ q)), (In (Node n a2 a2) (q ++ gv1)), (In (Node n a2 a2) (gv1 ++ q)), (In (Node n a2 a2) (gv1 ++ gv1)), (In (Node n a2 a1) q)
(In (Node n a2 a1) gv1), (In (Node n a2 a1) (a2 :: q)), (In (Node n a2 a1) (a2 :: gv1)), (In (Node n a2 a1) (a1 :: q)), (In (Node n a2 a1) (a1 :: gv1)), (In (Node n a2 a1) (merge q q)), (In (Node n a2 a1) (merge q gv1)), (In (Node n a2 a1) (merge gv1 q)), (In (Node n a2 a1) (merge gv1 gv1)), (In (Node n a2 a1) (heap_delete_max a2))
(In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join q q a2)), (In (Node n a2 a1) (join q q a1)), (In (Node n a2 a1) (join q gv1 a2)), (In (Node n a2 a1) (join q gv1 a1)), (In (Node n a2 a1) (join gv1 q a2)), (In (Node n a2 a1) (join gv1 q a1)), (In (Node n a2 a1) (join gv1 gv1 a2)), (In (Node n a2 a1) (join gv1 gv1 a1)), (In (Node n a2 a1) (insert x q))
(In (Node n a2 a1) (insert x gv1)), (In (Node n a2 a1) (insert n q)), (In (Node n a2 a1) (insert n gv1)), (In (Node n a2 a1) (carry q a2)), (In (Node n a2 a1) (carry q a1)), (In (Node n a2 a1) (carry gv1 a2)), (In (Node n a2 a1) (carry gv1 a1)), (In (Node n a2 a1) (q ++ q)), (In (Node n a2 a1) (q ++ gv1)), (In (Node n a2 a1) (gv1 ++ q))
(In (Node n a2 a1) (gv1 ++ gv1)), (In (Node n a1 a2) q), (In (Node n a1 a2) gv1), (In (Node n a1 a2) (a2 :: q)), (In (Node n a1 a2) (a2 :: gv1)), (In (Node n a1 a2) (a1 :: q)), (In (Node n a1 a2) (a1 :: gv1)), (In (Node n a1 a2) (merge q q)), (In (Node n a1 a2) (merge q gv1)), (In (Node n a1 a2) (merge gv1 q))
(In (Node n a1 a2) (merge gv1 gv1)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (join q q a2)), (In (Node n a1 a2) (join q q a1)), (In (Node n a1 a2) (join q gv1 a2)), (In (Node n a1 a2) (join q gv1 a1)), (In (Node n a1 a2) (join gv1 q a2)), (In (Node n a1 a2) (join gv1 q a1)), (In (Node n a1 a2) (join gv1 gv1 a2))
(In (Node n a1 a2) (join gv1 gv1 a1)), (In (Node n a1 a2) (insert x q)), (In (Node n a1 a2) (insert x gv1)), (In (Node n a1 a2) (insert n q)), (In (Node n a1 a2) (insert n gv1)), (In (Node n a1 a2) (carry q a2)), (In (Node n a1 a2) (carry q a1)), (In (Node n a1 a2) (carry gv1 a2)), (In (Node n a1 a2) (carry gv1 a1)), (In (Node n a1 a2) (q ++ q))
(In (Node n a1 a2) (q ++ gv1)), (In (Node n a1 a2) (gv1 ++ q)), (In (Node n a1 a2) (gv1 ++ gv1)), (In (Node n a1 a1) q), (In (Node n a1 a1) gv1), (In (Node n a1 a1) (a2 :: q)), (In (Node n a1 a1) (a2 :: gv1)), (In (Node n a1 a1) (a1 :: q)), (In (Node n a1 a1) (a1 :: gv1)), (In (Node n a1 a1) (merge q q))
(In (Node n a1 a1) (merge q gv1)), (In (Node n a1 a1) (merge gv1 q)), (In (Node n a1 a1) (merge gv1 gv1)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join q q a2)), (In (Node n a1 a1) (join q q a1)), (In (Node n a1 a1) (join q gv1 a2)), (In (Node n a1 a1) (join q gv1 a1)), (In (Node n a1 a1) (join gv1 q a2))
(In (Node n a1 a1) (join gv1 q a1)), (In (Node n a1 a1) (join gv1 gv1 a2)), (In (Node n a1 a1) (join gv1 gv1 a1)), (In (Node n a1 a1) (insert x q)), (In (Node n a1 a1) (insert x gv1)), (In (Node n a1 a1) (insert n q)), (In (Node n a1 a1) (insert n gv1)), (In (Node n a1 a1) (carry q a2)), (In (Node n a1 a1) (carry q a1)), (In (Node n a1 a1) (carry gv1 a2))
(In (Node n a1 a1) (carry gv1 a1)), (In (Node n a1 a1) (q ++ q)), (In (Node n a1 a1) (q ++ gv1)), (In (Node n a1 a1) (gv1 ++ q)), (In (Node n a1 a1) (gv1 ++ gv1)), (In (smash a2 a2) q), (In (smash a2 a2) gv1), (In (smash a2 a2) (a2 :: q)), (In (smash a2 a2) (a2 :: gv1)), (In (smash a2 a2) (a1 :: q))
(In (smash a2 a2) (a1 :: gv1)), (In (smash a2 a2) (merge q q)), (In (smash a2 a2) (merge q gv1)), (In (smash a2 a2) (merge gv1 q)), (In (smash a2 a2) (merge gv1 gv1)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join q q a2)), (In (smash a2 a2) (join q q a1)), (In (smash a2 a2) (join q gv1 a2))
(In (smash a2 a2) (join q gv1 a1)), (In (smash a2 a2) (join gv1 q a2)), (In (smash a2 a2) (join gv1 q a1)), (In (smash a2 a2) (join gv1 gv1 a2)), (In (smash a2 a2) (join gv1 gv1 a1)), (In (smash a2 a2) (insert x q)), (In (smash a2 a2) (insert x gv1)), (In (smash a2 a2) (insert n q)), (In (smash a2 a2) (insert n gv1)), (In (smash a2 a2) (carry q a2))
(In (smash a2 a2) (carry q a1)), (In (smash a2 a2) (carry gv1 a2)), (In (smash a2 a2) (carry gv1 a1)), (In (smash a2 a2) (q ++ q)), (In (smash a2 a2) (q ++ gv1)), (In (smash a2 a2) (gv1 ++ q)), (In (smash a2 a2) (gv1 ++ gv1)), (In (smash a2 a1) q), (In (smash a2 a1) gv1), (In (smash a2 a1) (a2 :: q))
(In (smash a2 a1) (a2 :: gv1)), (In (smash a2 a1) (a1 :: q)), (In (smash a2 a1) (a1 :: gv1)), (In (smash a2 a1) (merge q q)), (In (smash a2 a1) (merge q gv1)), (In (smash a2 a1) (merge gv1 q)), (In (smash a2 a1) (merge gv1 gv1)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join q q a2))
(In (smash a2 a1) (join q q a1)), (In (smash a2 a1) (join q gv1 a2)), (In (smash a2 a1) (join q gv1 a1)), (In (smash a2 a1) (join gv1 q a2)), (In (smash a2 a1) (join gv1 q a1)), (In (smash a2 a1) (join gv1 gv1 a2)), (In (smash a2 a1) (join gv1 gv1 a1)), (In (smash a2 a1) (insert x q)), (In (smash a2 a1) (insert x gv1)), (In (smash a2 a1) (insert n q))
(In (smash a2 a1) (insert n gv1)), (In (smash a2 a1) (carry q a2)), (In (smash a2 a1) (carry q a1)), (In (smash a2 a1) (carry gv1 a2)), (In (smash a2 a1) (carry gv1 a1)), (In (smash a2 a1) (q ++ q)), (In (smash a2 a1) (q ++ gv1)), (In (smash a2 a1) (gv1 ++ q)), (In (smash a2 a1) (gv1 ++ gv1)), (In (smash a1 a2) q)
(In (smash a1 a2) gv1), (In (smash a1 a2) (a2 :: q)), (In (smash a1 a2) (a2 :: gv1)), (In (smash a1 a2) (a1 :: q)), (In (smash a1 a2) (a1 :: gv1)), (In (smash a1 a2) (merge q q)), (In (smash a1 a2) (merge q gv1)), (In (smash a1 a2) (merge gv1 q)), (In (smash a1 a2) (merge gv1 gv1)), (In (smash a1 a2) (heap_delete_max a2))
(In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join q q a2)), (In (smash a1 a2) (join q q a1)), (In (smash a1 a2) (join q gv1 a2)), (In (smash a1 a2) (join q gv1 a1)), (In (smash a1 a2) (join gv1 q a2)), (In (smash a1 a2) (join gv1 q a1)), (In (smash a1 a2) (join gv1 gv1 a2)), (In (smash a1 a2) (join gv1 gv1 a1)), (In (smash a1 a2) (insert x q))
(In (smash a1 a2) (insert x gv1)), (In (smash a1 a2) (insert n q)), (In (smash a1 a2) (insert n gv1)), (In (smash a1 a2) (carry q a2)), (In (smash a1 a2) (carry q a1)), (In (smash a1 a2) (carry gv1 a2)), (In (smash a1 a2) (carry gv1 a1)), (In (smash a1 a2) (q ++ q)), (In (smash a1 a2) (q ++ gv1)), (In (smash a1 a2) (gv1 ++ q))
(In (smash a1 a2) (gv1 ++ gv1)), (In (smash a1 a1) q), (In (smash a1 a1) gv1), (In (smash a1 a1) (a2 :: q)), (In (smash a1 a1) (a2 :: gv1)), (In (smash a1 a1) (a1 :: q)), (In (smash a1 a1) (a1 :: gv1)), (In (smash a1 a1) (merge q q)), (In (smash a1 a1) (merge q gv1)), (In (smash a1 a1) (merge gv1 q))
(In (smash a1 a1) (merge gv1 gv1)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (join q q a2)), (In (smash a1 a1) (join q q a1)), (In (smash a1 a1) (join q gv1 a2)), (In (smash a1 a1) (join q gv1 a1)), (In (smash a1 a1) (join gv1 q a2)), (In (smash a1 a1) (join gv1 q a1)), (In (smash a1 a1) (join gv1 gv1 a2))
(In (smash a1 a1) (join gv1 gv1 a1)), (In (smash a1 a1) (insert x q)), (In (smash a1 a1) (insert x gv1)), (In (smash a1 a1) (insert n q)), (In (smash a1 a1) (insert n gv1)), (In (smash a1 a1) (carry q a2)), (In (smash a1 a1) (carry q a1)), (In (smash a1 a1) (carry gv1 a2)), (In (smash a1 a1) (carry gv1 a1)), (In (smash a1 a1) (q ++ q))
(In (smash a1 a1) (q ++ gv1)), (In (smash a1 a1) (gv1 ++ q)), (In (smash a1 a1) (gv1 ++ gv1)), (In Leaf q), (In Leaf gv1), (In Leaf (a2 :: q)), (In Leaf (a2 :: gv1)), (In Leaf (a1 :: q)), (In Leaf (a1 :: gv1)), (In Leaf (merge q q))
(In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (join q q a2)), (In Leaf (join q q a1)), (In Leaf (join q gv1 a2)), (In Leaf (join q gv1 a1)), (In Leaf (join gv1 q a2))
(In Leaf (join gv1 q a1)), (In Leaf (join gv1 gv1 a2)), (In Leaf (join gv1 gv1 a1)), (In Leaf (insert x q)), (In Leaf (insert x gv1)), (In Leaf (insert n q)), (In Leaf (insert n gv1)), (In Leaf (carry q a2)), (In Leaf (carry q a1)), (In Leaf (carry gv1 a2))
(In Leaf (carry gv1 a1)), (In Leaf (q ++ q)), (In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q), (x < find_max' x gv1), (x < find_max' n q), (x < find_max' n gv1), (x < length q)
(x < length gv1), (n < find_max' x q), (n < find_max' x gv1), (n < find_max' n q), (n < find_max' n gv1), (n < length q), (n < length gv1), (find_max' x q < x), (find_max' x q < n), (find_max' x q < find_max' x gv1)
(find_max' x q < find_max' n q), (find_max' x q < find_max' n gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < n), (find_max' x gv1 < find_max' x q), (find_max' x gv1 < find_max' n q), (find_max' x gv1 < find_max' n gv1), (find_max' x gv1 < length q)
(find_max' x gv1 < length gv1), (find_max' n q < x), (find_max' n q < n), (find_max' n q < find_max' x q), (find_max' n q < find_max' x gv1), (find_max' n q < find_max' n gv1), (find_max' n q < length q), (find_max' n q < length gv1), (find_max' n gv1 < x), (find_max' n gv1 < n)
(find_max' n gv1 < find_max' x q), (find_max' n gv1 < find_max' x gv1), (find_max' n gv1 < find_max' n q), (find_max' n gv1 < length q), (find_max' n gv1 < length gv1), (length q < x), (length q < n), (length q < find_max' x q), (length q < find_max' x gv1), (length q < find_max' n q)
(length q < find_max' n gv1), (length q < length gv1), (length gv1 < x), (length gv1 < n), (length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < find_max' n q), (length gv1 < find_max' n gv1), (length gv1 < length q), (x <= find_max' x q)
(x <= find_max' x gv1), (x <= find_max' n q), (x <= find_max' n gv1), (x <= length q), (x <= length gv1), (n <= find_max' x q), (n <= find_max' x gv1), (n <= find_max' n q), (n <= find_max' n gv1), (n <= length q)
(n <= length gv1), (find_max' x q <= x), (find_max' x q <= n), (find_max' x q <= find_max' x gv1), (find_max' x q <= find_max' n q), (find_max' x q <= find_max' n gv1), (find_max' x q <= length q), (find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= n)
(find_max' x gv1 <= find_max' x q), (find_max' x gv1 <= find_max' n q), (find_max' x gv1 <= find_max' n gv1), (find_max' x gv1 <= length q), (find_max' x gv1 <= length gv1), (find_max' n q <= x), (find_max' n q <= n), (find_max' n q <= find_max' x q), (find_max' n q <= find_max' x gv1), (find_max' n q <= find_max' n gv1)
(find_max' n q <= length q), (find_max' n q <= length gv1), (find_max' n gv1 <= x), (find_max' n gv1 <= n), (find_max' n gv1 <= find_max' x q), (find_max' n gv1 <= find_max' x gv1), (find_max' n gv1 <= find_max' n q), (find_max' n gv1 <= length q), (find_max' n gv1 <= length gv1), (length q <= x)
(length q <= n), (length q <= find_max' x q), (length q <= find_max' x gv1), (length q <= find_max' n q), (length q <= find_max' n gv1), (length q <= length gv1), (length gv1 <= x), (length gv1 <= n), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1)
(length gv1 <= find_max' n q), (length gv1 <= find_max' n gv1), (length gv1 <= length q), (~ priq q), (~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ priqq n q), (~ priqq n gv1), (~ pow2heap x a2)
(~ pow2heap x a1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heapp x x a2), (~ pow2heapp x x a1), (~ pow2heapp x n a2), (~ pow2heapp x n a1), (~ pow2heapp n x a2), (~ pow2heapp n x a1), (~ pow2heapp n n a2)
(~ pow2heapp n n a1), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ In a2 q), (~ In a2 gv1), (~ In a1 q), (~ In a1 gv1), (~ x < x)
(~ x < n), (~ n < x), (~ n < n), (~ x <= x), (~ x <= n), (~ n <= x), (~ n <= n), (a2 <> a2), (a2 <> a1), (a1 <> a2)
(a1 <> a1), (x <> x), (x <> n), (n <> x), (n <> n), (q <> q), (q <> gv1), (gv1 <> q), (gv1 <> gv1), (None = Some q)
(None = Some gv1), (a2 :: q = q), (a2 :: q = gv1), (a2 :: q = merge q q), (a2 :: q = merge q gv1), (a2 :: q = merge gv1 q), (a2 :: q = merge gv1 gv1), (a2 :: q = heap_delete_max a2), (a2 :: q = heap_delete_max a1), (a2 :: q = join q q a2)
(a2 :: q = join q q a1), (a2 :: q = join q gv1 a2), (a2 :: q = join q gv1 a1), (a2 :: q = join gv1 q a2), (a2 :: q = join gv1 q a1), (a2 :: q = join gv1 gv1 a2), (a2 :: q = join gv1 gv1 a1), (a2 :: q = insert x q), (a2 :: q = insert x gv1), (a2 :: q = insert n q)
(a2 :: q = insert n gv1), (a2 :: q = carry q a2), (a2 :: q = carry q a1), (a2 :: q = carry gv1 a2), (a2 :: q = carry gv1 a1), (a2 :: q = q ++ q), (a2 :: q = q ++ gv1), (a2 :: q = gv1 ++ q), (a2 :: q = gv1 ++ gv1), (a2 :: q = [])
(a2 :: gv1 = q), (a2 :: gv1 = gv1), (a2 :: gv1 = merge q q), (a2 :: gv1 = merge q gv1), (a2 :: gv1 = merge gv1 q), (a2 :: gv1 = merge gv1 gv1), (a2 :: gv1 = heap_delete_max a2), (a2 :: gv1 = heap_delete_max a1), (a2 :: gv1 = join q q a2), (a2 :: gv1 = join q q a1)
(a2 :: gv1 = join q gv1 a2), (a2 :: gv1 = join q gv1 a1), (a2 :: gv1 = join gv1 q a2), (a2 :: gv1 = join gv1 q a1), (a2 :: gv1 = join gv1 gv1 a2), (a2 :: gv1 = join gv1 gv1 a1), (a2 :: gv1 = insert x q), (a2 :: gv1 = insert x gv1), (a2 :: gv1 = insert n q), (a2 :: gv1 = insert n gv1)
(a2 :: gv1 = carry q a2), (a2 :: gv1 = carry q a1), (a2 :: gv1 = carry gv1 a2), (a2 :: gv1 = carry gv1 a1), (a2 :: gv1 = q ++ q), (a2 :: gv1 = q ++ gv1), (a2 :: gv1 = gv1 ++ q), (a2 :: gv1 = gv1 ++ gv1), (a2 :: gv1 = []), (a1 :: q = q)
(a1 :: q = gv1), (a1 :: q = merge q q), (a1 :: q = merge q gv1), (a1 :: q = merge gv1 q), (a1 :: q = merge gv1 gv1), (a1 :: q = heap_delete_max a2), (a1 :: q = heap_delete_max a1), (a1 :: q = join q q a2), (a1 :: q = join q q a1), (a1 :: q = join q gv1 a2)
(a1 :: q = join q gv1 a1), (a1 :: q = join gv1 q a2), (a1 :: q = join gv1 q a1), (a1 :: q = join gv1 gv1 a2), (a1 :: q = join gv1 gv1 a1), (a1 :: q = insert x q), (a1 :: q = insert x gv1), (a1 :: q = insert n q), (a1 :: q = insert n gv1), (a1 :: q = carry q a2)
(a1 :: q = carry q a1), (a1 :: q = carry gv1 a2), (a1 :: q = carry gv1 a1), (a1 :: q = q ++ q), (a1 :: q = q ++ gv1), (a1 :: q = gv1 ++ q), (a1 :: q = gv1 ++ gv1), (a1 :: q = []), (a1 :: gv1 = q), (a1 :: gv1 = gv1)
(a1 :: gv1 = merge q q), (a1 :: gv1 = merge q gv1), (a1 :: gv1 = merge gv1 q), (a1 :: gv1 = merge gv1 gv1), (a1 :: gv1 = heap_delete_max a2), (a1 :: gv1 = heap_delete_max a1), (a1 :: gv1 = join q q a2), (a1 :: gv1 = join q q a1), (a1 :: gv1 = join q gv1 a2), (a1 :: gv1 = join q gv1 a1)
(a1 :: gv1 = join gv1 q a2), (a1 :: gv1 = join gv1 q a1), (a1 :: gv1 = join gv1 gv1 a2), (a1 :: gv1 = join gv1 gv1 a1), (a1 :: gv1 = insert x q), (a1 :: gv1 = insert x gv1), (a1 :: gv1 = insert n q), (a1 :: gv1 = insert n gv1), (a1 :: gv1 = carry q a2), (a1 :: gv1 = carry q a1)
(a1 :: gv1 = carry gv1 a2), (a1 :: gv1 = carry gv1 a1), (a1 :: gv1 = q ++ q), (a1 :: gv1 = q ++ gv1), (a1 :: gv1 = gv1 ++ q), (a1 :: gv1 = gv1 ++ gv1), (a1 :: gv1 = []), (merge q q = q), (merge q q = gv1), (merge q q = heap_delete_max a2)
(merge q q = heap_delete_max a1), (merge q q = join q q a2), (merge q q = join q q a1), (merge q q = join q gv1 a2), (merge q q = join q gv1 a1), (merge q q = join gv1 q a2), (merge q q = join gv1 q a1), (merge q q = join gv1 gv1 a2), (merge q q = join gv1 gv1 a1), (merge q q = insert x q)
(merge q q = insert x gv1), (merge q q = insert n q), (merge q q = insert n gv1), (merge q q = carry q a2), (merge q q = carry q a1), (merge q q = carry gv1 a2), (merge q q = carry gv1 a1), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q)
(merge q q = gv1 ++ gv1), (merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = heap_delete_max a2), (merge q gv1 = heap_delete_max a1), (merge q gv1 = join q q a2), (merge q gv1 = join q q a1), (merge q gv1 = join q gv1 a2), (merge q gv1 = join q gv1 a1), (merge q gv1 = join gv1 q a2)
(merge q gv1 = join gv1 q a1), (merge q gv1 = join gv1 gv1 a2), (merge q gv1 = join gv1 gv1 a1), (merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = insert n q), (merge q gv1 = insert n gv1), (merge q gv1 = carry q a2), (merge q gv1 = carry q a1), (merge q gv1 = carry gv1 a2)
(merge q gv1 = carry gv1 a1), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q), (merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = heap_delete_max a2), (merge gv1 q = heap_delete_max a1), (merge gv1 q = join q q a2)
(merge gv1 q = join q q a1), (merge gv1 q = join q gv1 a2), (merge gv1 q = join q gv1 a1), (merge gv1 q = join gv1 q a2), (merge gv1 q = join gv1 q a1), (merge gv1 q = join gv1 gv1 a2), (merge gv1 q = join gv1 gv1 a1), (merge gv1 q = insert x q), (merge gv1 q = insert x gv1), (merge gv1 q = insert n q)
(merge gv1 q = insert n gv1), (merge gv1 q = carry q a2), (merge gv1 q = carry q a1), (merge gv1 q = carry gv1 a2), (merge gv1 q = carry gv1 a1), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 gv1 = q)
(merge gv1 gv1 = gv1), (merge gv1 gv1 = heap_delete_max a2), (merge gv1 gv1 = heap_delete_max a1), (merge gv1 gv1 = join q q a2), (merge gv1 gv1 = join q q a1), (merge gv1 gv1 = join q gv1 a2), (merge gv1 gv1 = join q gv1 a1), (merge gv1 gv1 = join gv1 q a2), (merge gv1 gv1 = join gv1 q a1), (merge gv1 gv1 = join gv1 gv1 a2)
(merge gv1 gv1 = join gv1 gv1 a1), (merge gv1 gv1 = insert x q), (merge gv1 gv1 = insert x gv1), (merge gv1 gv1 = insert n q), (merge gv1 gv1 = insert n gv1), (merge gv1 gv1 = carry q a2), (merge gv1 gv1 = carry q a1), (merge gv1 gv1 = carry gv1 a2), (merge gv1 gv1 = carry gv1 a1), (merge gv1 gv1 = q ++ q)
(merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1), (heap_delete_max a2 = q), (heap_delete_max a2 = gv1), (heap_delete_max a2 = carry q a2), (heap_delete_max a2 = carry q a1), (heap_delete_max a2 = carry gv1 a2), (heap_delete_max a2 = carry gv1 a1), (heap_delete_max a2 = q ++ q)
(heap_delete_max a2 = q ++ gv1), (heap_delete_max a2 = gv1 ++ q), (heap_delete_max a2 = gv1 ++ gv1), (heap_delete_max a1 = q), (heap_delete_max a1 = gv1), (heap_delete_max a1 = carry q a2), (heap_delete_max a1 = carry q a1), (heap_delete_max a1 = carry gv1 a2), (heap_delete_max a1 = carry gv1 a1), (heap_delete_max a1 = q ++ q)
(heap_delete_max a1 = q ++ gv1), (heap_delete_max a1 = gv1 ++ q), (heap_delete_max a1 = gv1 ++ gv1), (join q q a2 = q), (join q q a2 = gv1), (join q q a2 = heap_delete_max a2), (join q q a2 = heap_delete_max a1), (join q q a2 = insert x q), (join q q a2 = insert x gv1), (join q q a2 = insert n q)
(join q q a2 = insert n gv1), (join q q a2 = carry q a2), (join q q a2 = carry q a1), (join q q a2 = carry gv1 a2), (join q q a2 = carry gv1 a1), (join q q a2 = q ++ q), (join q q a2 = q ++ gv1), (join q q a2 = gv1 ++ q), (join q q a2 = gv1 ++ gv1), (join q q a1 = q)
(join q q a1 = gv1), (join q q a1 = heap_delete_max a2), (join q q a1 = heap_delete_max a1), (join q q a1 = insert x q), (join q q a1 = insert x gv1), (join q q a1 = insert n q), (join q q a1 = insert n gv1), (join q q a1 = carry q a2), (join q q a1 = carry q a1), (join q q a1 = carry gv1 a2)
(join q q a1 = carry gv1 a1), (join q q a1 = q ++ q), (join q q a1 = q ++ gv1), (join q q a1 = gv1 ++ q), (join q q a1 = gv1 ++ gv1), (join q gv1 a2 = q), (join q gv1 a2 = gv1), (join q gv1 a2 = heap_delete_max a2), (join q gv1 a2 = heap_delete_max a1), (join q gv1 a2 = insert x q)
(join q gv1 a2 = insert x gv1), (join q gv1 a2 = insert n q), (join q gv1 a2 = insert n gv1), (join q gv1 a2 = carry q a2), (join q gv1 a2 = carry q a1), (join q gv1 a2 = carry gv1 a2), (join q gv1 a2 = carry gv1 a1), (join q gv1 a2 = q ++ q), (join q gv1 a2 = q ++ gv1), (join q gv1 a2 = gv1 ++ q)
(join q gv1 a2 = gv1 ++ gv1), (join q gv1 a1 = q), (join q gv1 a1 = gv1), (join q gv1 a1 = heap_delete_max a2), (join q gv1 a1 = heap_delete_max a1), (join q gv1 a1 = insert x q), (join q gv1 a1 = insert x gv1), (join q gv1 a1 = insert n q), (join q gv1 a1 = insert n gv1), (join q gv1 a1 = carry q a2)
(join q gv1 a1 = carry q a1), (join q gv1 a1 = carry gv1 a2), (join q gv1 a1 = carry gv1 a1), (join q gv1 a1 = q ++ q), (join q gv1 a1 = q ++ gv1), (join q gv1 a1 = gv1 ++ q), (join q gv1 a1 = gv1 ++ gv1), (join gv1 q a2 = q), (join gv1 q a2 = gv1), (join gv1 q a2 = heap_delete_max a2)
(join gv1 q a2 = heap_delete_max a1), (join gv1 q a2 = insert x q), (join gv1 q a2 = insert x gv1), (join gv1 q a2 = insert n q), (join gv1 q a2 = insert n gv1), (join gv1 q a2 = carry q a2), (join gv1 q a2 = carry q a1), (join gv1 q a2 = carry gv1 a2), (join gv1 q a2 = carry gv1 a1), (join gv1 q a2 = q ++ q)
(join gv1 q a2 = q ++ gv1), (join gv1 q a2 = gv1 ++ q), (join gv1 q a2 = gv1 ++ gv1), (join gv1 q a1 = q), (join gv1 q a1 = gv1), (join gv1 q a1 = heap_delete_max a2), (join gv1 q a1 = heap_delete_max a1), (join gv1 q a1 = insert x q), (join gv1 q a1 = insert x gv1), (join gv1 q a1 = insert n q)
(join gv1 q a1 = insert n gv1), (join gv1 q a1 = carry q a2), (join gv1 q a1 = carry q a1), (join gv1 q a1 = carry gv1 a2), (join gv1 q a1 = carry gv1 a1), (join gv1 q a1 = q ++ q), (join gv1 q a1 = q ++ gv1), (join gv1 q a1 = gv1 ++ q), (join gv1 q a1 = gv1 ++ gv1), (join gv1 gv1 a2 = q)
(join gv1 gv1 a2 = gv1), (join gv1 gv1 a2 = heap_delete_max a2), (join gv1 gv1 a2 = heap_delete_max a1), (join gv1 gv1 a2 = insert x q), (join gv1 gv1 a2 = insert x gv1), (join gv1 gv1 a2 = insert n q), (join gv1 gv1 a2 = insert n gv1), (join gv1 gv1 a2 = carry q a2), (join gv1 gv1 a2 = carry q a1), (join gv1 gv1 a2 = carry gv1 a2)
(join gv1 gv1 a2 = carry gv1 a1), (join gv1 gv1 a2 = q ++ q), (join gv1 gv1 a2 = q ++ gv1), (join gv1 gv1 a2 = gv1 ++ q), (join gv1 gv1 a2 = gv1 ++ gv1), (join gv1 gv1 a1 = q), (join gv1 gv1 a1 = gv1), (join gv1 gv1 a1 = heap_delete_max a2), (join gv1 gv1 a1 = heap_delete_max a1), (join gv1 gv1 a1 = insert x q)
(join gv1 gv1 a1 = insert x gv1), (join gv1 gv1 a1 = insert n q), (join gv1 gv1 a1 = insert n gv1), (join gv1 gv1 a1 = carry q a2), (join gv1 gv1 a1 = carry q a1), (join gv1 gv1 a1 = carry gv1 a2), (join gv1 gv1 a1 = carry gv1 a1), (join gv1 gv1 a1 = q ++ q), (join gv1 gv1 a1 = q ++ gv1), (join gv1 gv1 a1 = gv1 ++ q)
(join gv1 gv1 a1 = gv1 ++ gv1), (insert x q = q), (insert x q = gv1), (insert x q = heap_delete_max a2), (insert x q = heap_delete_max a1), (insert x q = carry q a2), (insert x q = carry q a1), (insert x q = carry gv1 a2), (insert x q = carry gv1 a1), (insert x q = q ++ q)
(insert x q = q ++ gv1), (insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1), (insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = heap_delete_max a2), (insert x gv1 = heap_delete_max a1), (insert x gv1 = carry q a2), (insert x gv1 = carry q a1), (insert x gv1 = carry gv1 a2)
(insert x gv1 = carry gv1 a1), (insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q), (insert x gv1 = gv1 ++ gv1), (insert n q = q), (insert n q = gv1), (insert n q = heap_delete_max a2), (insert n q = heap_delete_max a1), (insert n q = carry q a2)
(insert n q = carry q a1), (insert n q = carry gv1 a2), (insert n q = carry gv1 a1), (insert n q = q ++ q), (insert n q = q ++ gv1), (insert n q = gv1 ++ q), (insert n q = gv1 ++ gv1), (insert n gv1 = q), (insert n gv1 = gv1), (insert n gv1 = heap_delete_max a2)
(insert n gv1 = heap_delete_max a1), (insert n gv1 = carry q a2), (insert n gv1 = carry q a1), (insert n gv1 = carry gv1 a2), (insert n gv1 = carry gv1 a1), (insert n gv1 = q ++ q), (insert n gv1 = q ++ gv1), (insert n gv1 = gv1 ++ q), (insert n gv1 = gv1 ++ gv1), (carry q a2 = q)
(carry q a2 = gv1), (carry q a2 = q ++ q), (carry q a2 = q ++ gv1), (carry q a2 = gv1 ++ q), (carry q a2 = gv1 ++ gv1), (carry q a1 = q), (carry q a1 = gv1), (carry q a1 = q ++ q), (carry q a1 = q ++ gv1), (carry q a1 = gv1 ++ q)
(carry q a1 = gv1 ++ gv1), (carry gv1 a2 = q), (carry gv1 a2 = gv1), (carry gv1 a2 = q ++ q), (carry gv1 a2 = q ++ gv1), (carry gv1 a2 = gv1 ++ q), (carry gv1 a2 = gv1 ++ gv1), (carry gv1 a1 = q), (carry gv1 a1 = gv1), (carry gv1 a1 = q ++ q)
(carry gv1 a1 = q ++ gv1), (carry gv1 a1 = gv1 ++ q), (carry gv1 a1 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q)
(gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = join q q a2)
([] = join q q a1), ([] = join q gv1 a2), ([] = join q gv1 a1), ([] = join gv1 q a2), ([] = join gv1 q a1), ([] = join gv1 gv1 a2), ([] = join gv1 gv1 a1), ([] = insert x q), ([] = insert x gv1), ([] = insert n q)
([] = insert n gv1), ([] = carry q a2), ([] = carry q a1), ([] = carry gv1 a2), ([] = carry gv1 a1), ([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ((q, q) = delete_max_aux x q)
((q, q) = delete_max_aux x gv1), ((q, q) = delete_max_aux n q), ((q, q) = delete_max_aux n gv1), ((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux n q), ((q, gv1) = delete_max_aux n gv1), ((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, q) = delete_max_aux n q)
((gv1, q) = delete_max_aux n gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux n q), ((gv1, gv1) = delete_max_aux n gv1), (Node x a2 a2 = a2), (Node x a2 a2 = a1), (Node x a2 a2 = smash a2 a2), (Node x a2 a2 = smash a2 a1), (Node x a2 a2 = smash a1 a2)
(Node x a2 a2 = smash a1 a1), (Node x a2 a1 = a2), (Node x a2 a1 = a1), (Node x a2 a1 = smash a2 a2), (Node x a2 a1 = smash a2 a1), (Node x a2 a1 = smash a1 a2), (Node x a2 a1 = smash a1 a1), (Node x a1 a2 = a2), (Node x a1 a2 = a1), (Node x a1 a2 = smash a2 a2)
(Node x a1 a2 = smash a2 a1), (Node x a1 a2 = smash a1 a2), (Node x a1 a2 = smash a1 a1), (Node x a1 a1 = a2), (Node x a1 a1 = a1), (Node x a1 a1 = smash a2 a2), (Node x a1 a1 = smash a2 a1), (Node x a1 a1 = smash a1 a2), (Node x a1 a1 = smash a1 a1), (Node n a2 a2 = a2)
(Node n a2 a2 = a1), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 a2)
(Node n a2 a1 = smash a1 a1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash a2 a2)
(Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = a2)
(smash a1 a1 = a1), (Leaf = Node x a2 a2), (Leaf = Node x a2 a1), (Leaf = Node x a1 a2), (Leaf = Node x a1 a1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = smash a2 a2)
(Leaf = smash a2 a1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' x q = x), (find_max' x q = n), (find_max' x gv1 = x), (find_max' x gv1 = n), (find_max' n q = x), (find_max' n q = n), (find_max' n gv1 = x)
(find_max' n gv1 = n), (length q = x), (length q = n), (length q = find_max' x q), (length q = find_max' x gv1), (length q = find_max' n q), (length q = find_max' n gv1), (length gv1 = x), (length gv1 = n), (length gv1 = find_max' x q)
(length gv1 = find_max' x gv1), (length gv1 = find_max' n q), (length gv1 = find_max' n gv1), (Some x = find_max q), (Some x = find_max gv1), (Some n = find_max q), (Some n = find_max gv1), (None = Some x), (None = Some n), (None = find_max q)
(None = find_max gv1), (None = Some a2), (None = Some a1), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? n)), ((x >? x) = (n >=? x)), ((x >? x) = (n >=? n)), ((x >? n) = (x >=? x)), ((x >? n) = (x >=? n)), ((x >? n) = (n >=? x))
((x >? n) = (n >=? n)), ((n >? x) = (x >=? x)), ((n >? x) = (x >=? n)), ((n >? x) = (n >=? x)), ((n >? x) = (n >=? n)), ((n >? n) = (x >=? x)), ((n >? n) = (x >=? n)), ((n >? n) = (n >=? x)), ((n >? n) = (n >=? n))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 1419.477 seconds


Label: 0 (0)

Label: 1 (1)
(priq (gv4 :: q)), (Node x a2 a2 = gv4), (Node x a1 a2 = gv4), (Permutation (insert x q) (carry q gv4)), (Permutation (carry q gv4) (insert x q)), (insert x q = carry q gv4), (Node x gv4 a2 = smash gv4 gv4), (Node x gv4 a1 = smash gv4 gv4), (In (Node x a2 a2) (gv4 :: q)), (In (Node x a1 a2) (gv4 :: q))
(In (Node x a2 a2) (join q q gv4)), (In (Node x a1 a2) (join q q gv4))

Label: 2 (2)
(priq (carry gv2 gv4)), (priq (gv4 :: q)), (priq (join q q gv4)), (priq (join gv2 gv2 gv4)), (Node x a2 a2 = gv4), (Node x a1 a2 = gv4), (In (Node n a2 a2) gv2), (In (Node n a2 a1) gv2), (In (Node n a1 a2) gv2), (Permutation (insert x gv2) (carry gv2 gv4))
(Permutation (carry gv2 gv4) (insert x gv2)), (insert x gv2 = carry gv2 gv4), (Node x gv4 a2 = smash gv4 gv4), (Node x gv4 a1 = smash gv4 gv4), (In (Node n a2 a2) (carry gv2 a2)), (In (Node n a2 a1) (carry gv2 a2)), (In (Node n a2 a1) (carry gv2 a1)), (In (Node n a1 a2) (carry gv2 a2)), (In (Node n a1 a2) (carry gv2 a1)), (Permutation (join q q gv4) (insert x q))

Label: 3 (3)
(tree_elems gv5 []), (smash a2 a1 = gv5), (smash a1 a2 = gv5), (smash a1 a1 = gv5), (smash a2 gv5 = gv5), (smash a2 gv3 = gv5), (smash a1 gv5 = gv5), (smash a1 gv3 = gv5), (smash gv5 a2 = gv5), (smash gv5 a1 = gv5)
(smash gv3 a2 = gv5), (smash gv3 a1 = gv5), (smash gv5 gv5 = gv5), (smash gv5 gv3 = gv5), (smash gv3 gv5 = gv5), (Permutation q (carry q gv5)), (Permutation (carry q gv5) q), (carry q gv5 = q), (Abs (gv5 :: q) []), (Node n a2 a2 = gv3)

Label: 4 (4)
(priq gv1)

Label: 5 (5)
(pow2heapp gv0 n Leaf), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 Leaf), (priqq gv0 (insert n gv2)), (priqq gv0 (insert x gv2)), (priqq gv0 (insert gv0 gv2)), (pow2heap gv0 (Node n a2 a2)), (pow2heap gv0 (Node n a1 a1)), (pow2heap gv0 (Node x a2 a2)), (pow2heap gv0 (Node x a1 a1))
(pow2heap gv0 (Node gv0 a2 a2)), (pow2heap gv0 (Node gv0 a1 a1)), (pow2heapp gv0 n (smash a2 a2)), (pow2heapp gv0 n (smash a2 a1)), (pow2heapp gv0 n (smash a1 a2)), (pow2heapp gv0 n (smash a1 a1)), (pow2heapp gv0 x (smash a2 a2)), (pow2heapp gv0 x (smash a2 a1)), (pow2heapp gv0 x (smash a1 a2)), (pow2heapp gv0 x (smash a1 a1))

Label: 6 (6)
(priqq gv0 gv1), (priqq gv0 (carry gv1 a2))

Label: 7 (7)
(tree_elems gv5 []), (smash a2 a2 = gv5), (smash a2 a1 = gv5), (smash a1 a2 = gv5), (smash a1 a1 = gv5), (smash a2 gv5 = gv5), (smash a1 gv5 = gv5), (smash gv5 a2 = gv5), (smash gv5 a1 = gv5), (smash gv5 gv5 = gv5)
(In gv5 (merge gv2 gv2)), (Permutation q (carry q gv5)), (Permutation (carry q gv5) q), (Permutation gv2 (carry gv2 gv5)), (Permutation (carry gv2 gv5) gv2), (carry q gv5 = q), (carry gv2 gv5 = gv2), (In (Node n a2 a2) gv2), (In (Node n a2 a1) gv2), (In (Node n a1 a2) gv2)

Label: 8 (8)
(priq gv1), (priq (carry gv1 a2)), (priq (carry gv1 a1)), (priq (gv1 ++ q))

Label: 9 (9)
(priq gv1), (Permutation gv1 (insert x gv2)), (Permutation (insert x gv2) gv1), (insert x gv2 = gv1)

Label: 10 (10)
(priq gv1), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (carry gv1 a2)), (priq (carry gv1 a1)), (priq (gv1 ++ q)), (priq (join q gv1 a2)), (priq (join q gv1 a1)), (priq (join gv1 q a2)), (priq (join gv1 q a1))


------------------------------ ALL RESULTS ------------------------------
1. (priqq 0 gv2 -> priqq 0 (carry gv2 (Node x Leaf Leaf)))

2. (priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) (Node x Leaf Leaf)))

3. (priqq 0 (Node n a1 a2 :: q) ->  priqq 0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))

4. ((priqq gv0 q -> priqq gv0 (carry q (Node x Leaf Leaf))) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x Leaf Leaf)))

5. ((priqq gv0 q -> priqq gv0 (carry q (Node x Leaf Leaf))) ->  priqq gv0 (Node n a1 a2 :: q) ->  priqq gv0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))

6. ((priqq gv0 q -> priqq gv0 (carry q (Node x gv5 gv5))) ->  priqq gv0 (Node n a1 a2 :: q) ->  priqq gv0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))

7. ((priqq 0 (a2 :: q) -> priqq 0 (carry (a2 :: q) gv4)) ->  priqq 0 (Node n a1 a2 :: q) -> priqq 0 (carry (Node n a1 a2 :: q) gv4))

8. ((priqq gv0 (a2 :: q) -> priqq gv0 (carry (a2 :: q) gv4)) ->  priqq gv0 (Node n a1 a2 :: q) -> priqq gv0 (carry (Node n a1 a2 :: q) gv4))

9. (priqq 0 (Node n a1 a2 :: q) ->  priqq 0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))

10. (smash a2 Leaf = Leaf)

11. (smash a1 Leaf = Leaf)

12. (smash Leaf a2 = Leaf)

13. (smash Leaf a1 = Leaf)

14. (smash Leaf Leaf = Leaf)

15. (smash Leaf gv3 = Leaf)

16. (smash gv3 Leaf = Leaf)

17. (insert x gv2 = carry gv2 (Node x Leaf Leaf))

18. (priq (gv1 ++ q) -> priqq 0 gv1)

19. (pow2heapp gv0 n Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

20. (pow2heapp gv0 x Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

21. (pow2heapp gv0 gv0 Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

22. (priqq 0 gv2 -> tree_elems gv5 [] -> priqq 0 (carry gv2 (Node x gv5 gv5)))

23. (priq (gv4 :: q) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

24. (priq (join q q gv4) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

25. (priq (join gv2 gv2 gv4) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

26. (priqq gv0 gv2 ->  priqq gv0 (insert n gv2) -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

27. (priqq gv0 gv2 ->  priqq gv0 (insert gv0 gv2) -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

28. (pow2heap gv0 (Node n a2 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

29. (pow2heap gv0 (Node n a1 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

30. (pow2heap gv0 (Node x a2 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

31. (pow2heap gv0 (Node x a1 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

32. (pow2heap gv0 (Node gv0 a2 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

33. (pow2heap gv0 (Node gv0 a1 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

34. (pow2heapp gv0 n (smash a2 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

35. (pow2heapp gv0 n (smash a2 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

36. (pow2heapp gv0 n (smash a1 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

37. (pow2heapp gv0 n (smash a1 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

38. (pow2heapp gv0 x (smash a2 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

39. (pow2heapp gv0 x (smash a2 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

40. (pow2heapp gv0 x (smash a1 a2) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

41. (pow2heapp gv0 x (smash a1 a1) ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

42. (priqq 0 gv2 -> smash a2 a1 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

43. (priqq 0 gv2 -> smash a1 a2 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

44. (priqq 0 gv2 -> smash a1 a1 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

45. (priqq 0 gv2 -> smash a2 gv5 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

46. (priqq 0 gv2 -> smash a1 gv5 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

47. (priqq 0 gv2 -> smash gv5 a2 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

48. (priqq 0 gv2 -> smash gv5 a1 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

49. (priqq 0 gv2 -> smash gv5 gv5 = gv5 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

50. (In gv5 (merge gv2 gv2) ->  priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

51. (priqq 0 gv2 ->  Permutation q (carry q gv5) -> priqq 0 (carry gv2 (Node x gv5 gv5)))

52. (priqq 0 gv2 ->  Permutation (carry q gv5) q -> priqq 0 (carry gv2 (Node x gv5 gv5)))

53. (priqq 0 gv2 ->  Permutation gv2 (carry gv2 gv5) -> priqq 0 (carry gv2 (Node x gv5 gv5)))

54. (priqq 0 gv2 ->  Permutation (carry gv2 gv5) gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

55. (priqq 0 gv2 -> Node x a2 a2 = gv4 -> priqq 0 (carry gv2 gv4))

56. (priqq 0 gv2 -> Node x a1 a2 = gv4 -> priqq 0 (carry gv2 gv4))

57. (In (Node n a2 a1) gv2 -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

58. (In (Node n a1 a2) gv2 -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

59. (priqq 0 (gv3 :: q) ->  tree_elems gv5 [] -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

60. (priqq 0 gv2 -> carry q gv5 = q -> priqq 0 (carry gv2 (Node x gv5 gv5)))

61. (priqq 0 gv2 -> carry gv2 gv5 = gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

62. (In (Node n a2 a2) gv2 -> priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

63. (In (Node n a2 a1) gv2 -> priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

64. (In (Node n a1 a2) gv2 -> priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv5 gv5)))

65. (priq (gv4 :: q) -> priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

66. (priqq 0 gv2 ->  Permutation (insert x gv2) (carry gv2 gv4) -> priqq 0 (carry gv2 gv4))

67. (priqq 0 gv2 ->  Permutation (carry gv2 gv4) (insert x gv2) -> priqq 0 (carry gv2 gv4))

68. (priqq 0 gv2 -> insert x gv2 = carry gv2 gv4 -> priqq 0 (carry gv2 gv4))

69. (priqq 0 gv2 -> Node x gv4 a2 = smash gv4 gv4 -> priqq 0 (carry gv2 gv4))

70. (priqq 0 gv2 -> Node x gv4 a1 = smash gv4 gv4 -> priqq 0 (carry gv2 gv4))

71. (In (Node n a2 a1) (carry gv2 a2) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

72. (In (Node n a2 a1) (carry gv2 a1) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

73. (In (Node n a1 a2) (carry gv2 a2) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

74. (priqq 0 (gv3 :: q) ->  smash a2 a1 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

75. (priqq 0 (gv3 :: q) ->  smash a1 a2 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

76. (priqq 0 (gv3 :: q) ->  smash a1 a1 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

77. (priqq 0 (gv3 :: q) ->  smash a2 gv5 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

78. (priqq 0 (gv3 :: q) ->  smash a2 gv3 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

79. (priqq 0 (gv3 :: q) ->  smash a1 gv5 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

80. (priqq 0 (gv3 :: q) ->  smash a1 gv3 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

81. (priqq 0 (gv3 :: q) ->  smash gv5 a2 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

82. (priqq 0 (gv3 :: q) ->  smash gv5 a1 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

83. (priqq 0 (gv3 :: q) ->  smash gv3 a2 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

84. (priqq 0 (gv3 :: q) ->  smash gv3 a1 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

85. (priqq 0 (gv3 :: q) ->  smash gv5 gv5 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

86. (priqq 0 (gv3 :: q) ->  smash gv5 gv3 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

87. (priqq 0 (gv3 :: q) ->  smash gv3 gv5 = gv5 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

88. (priqq 0 (gv3 :: q) ->  Permutation q (carry q gv5) -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

89. (priqq 0 (gv3 :: q) ->  Permutation (carry q gv5) q -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

90. (priqq 0 (gv3 :: q) -> Node x a2 a2 = gv4 -> priqq 0 (carry (gv3 :: q) gv4))

91. (priqq 0 (gv3 :: q) -> Node x a1 a2 = gv4 -> priqq 0 (carry (gv3 :: q) gv4))

92. (priqq 0 (gv3 :: q) ->  carry q gv5 = q -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

93. (Abs (gv5 :: q) [] ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

94. (priqq 0 (gv3 :: q) ->  Node n a2 a2 = gv3 -> priqq 0 (carry (gv3 :: q) (Node x gv5 gv5)))

95. (priqq 0 (gv3 :: q) ->  Permutation (insert x q) (carry q gv4) -> priqq 0 (carry (gv3 :: q) gv4))

96. (priqq 0 (gv3 :: q) ->  Permutation (carry q gv4) (insert x q) -> priqq 0 (carry (gv3 :: q) gv4))

97. (priqq gv0 (carry gv1 a2) -> priqq gv0 (Node n a1 a2 :: q) -> priqq gv0 gv1)

98. (priqq 0 (gv3 :: q) ->  insert x q = carry q gv4 -> priqq 0 (carry (gv3 :: q) gv4))

99. (priqq 0 (gv3 :: q) ->  Node x gv4 a2 = smash gv4 gv4 -> priqq 0 (carry (gv3 :: q) gv4))

100. (priqq 0 (gv3 :: q) ->  Node x gv4 a1 = smash gv4 gv4 -> priqq 0 (carry (gv3 :: q) gv4))

101. (In (Node x a2 a2) (gv4 :: q) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

102. (In (Node x a1 a2) (gv4 :: q) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

103. (In (Node x a2 a2) (join q q gv4) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

104. (In (Node x a1 a2) (join q q gv4) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 1713.733 seconds

Number of Result Pairs Returned: 104

1. (priqq 0 gv2 -> priqq 0 (carry gv2 (Node x Leaf Leaf)))

2. (priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) (Node x Leaf Leaf)))

3. (priqq 0 (Node n a1 a2 :: q) ->  priqq 0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))

4. ((priqq gv0 q -> priqq gv0 (carry q (Node x Leaf Leaf))) ->  priqq gv0 (Node n a1 a2 :: q) ->  priqq gv0 (carry (Node n a1 a2 :: q) (Node x Leaf Leaf)))

5. ((priqq gv0 q -> priqq gv0 (carry q (Node x gv5 gv5))) ->  priqq gv0 (Node n a1 a2 :: q) ->  priqq gv0 (carry (Node n a1 a2 :: q) (Node x gv5 gv5)))
