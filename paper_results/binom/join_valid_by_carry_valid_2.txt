Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (priqq n [])
 -- (forall (q : list tree) (c : tree) (n : nat),
 priqq n p -> priqq n q -> c = Leaf \/ pow2heap n c -> priqq n (join p q c))
 -- (priqq n (Node n0 a1 a2 :: p))
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n (carry (Node n0 a1 a2 :: p) c))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.469 seconds

gv2 : tree = (Node n0 a1 a2)
gv1 : (list tree) = (Node n0 a1 a2 :: p)
gv0 : (list tree) = (carry (Node n0 a1 a2 :: p) c)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 133.697 seconds

Label: Generalization #0
Assumptions: 
 -- (priqq n (Node n0 a1 a2 :: p))
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n (carry (Node n0 a1 a2 :: p) c))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (priqq n (Node n0 a1 a2 :: p))
 -- (carry (Node n0 a1 a2 :: p) c = gv0)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n gv0)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (priqq n gv1)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n (carry gv1 c))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (priqq n gv1)
 -- (carry gv1 c = gv0)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n gv0)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (priqq n (gv2 :: p))
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n (carry (gv2 :: p) c))
Case: Valid and Generalized

Label: Generalization #5
Assumptions: 
 -- (priqq n (gv2 :: p))
 -- (carry (gv2 :: p) c = gv0)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n gv0)
Case: Invalid and Generalized

Label: Generalization #6
Assumptions: 
 -- (priqq n gv1)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n (carry gv1 c))
Case: Valid and Generalized

Label: Generalization #7
Assumptions: 
 -- (priqq n (Node n0 a1 a2 :: p))
 -- (carry gv1 c = gv0)
 -- (c = Leaf \/ pow2heap n c)

----------------------------------
Goal: (priqq n gv0)
Case: Not Stable



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 133.874 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqq n (Node n0 a1 a2 :: p))
Positive Examples: 74
Negative Examples: 500

Label: 1 (1)
Abducted Assumption: (c = Leaf \/ pow2heap n c)
Positive Examples: 500
Negative Examples: 22

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 20
Negative Examples: 22

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 119
Negative Examples: 313

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 68
Negative Examples: 115


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 136.423 seconds


Label: 0 (0)
(priq p), (priqq n0 p), (priqq n p), (pow2heap n0 c), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n c), (pow2heap n a2), (pow2heap n a1), (pow2heapp n0 n0 c)
(pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n c), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n n0 c), (pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n c), (pow2heapp n n a2)
(pow2heapp n n a1), (Permutation p p), (In c p), (In a2 p), (In a1 p), (n0 < n0), (n0 < n), (n < n0), (n < n), (n0 <= n0)
(n0 <= n), (n <= n0), (n <= n), (p = p), (c = c), (c = a2), (c = a1), (a2 = c), (a2 = a2), (a2 = a1)
(a1 = c), (a1 = a2), (a1 = a1), (n0 = n0), (n0 = n), (n = n0), (n = n), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n0))
(false = (n >? n)), (false = (n0 >=? n0)), (false = (n0 >=? n)), (false = (n >=? n0)), (false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n0)), (true = (n >? n)), (true = (n0 >=? n0))
(true = (n0 >=? n)), (true = (n >=? n0)), (true = (n >=? n)), (Abs p []), (Abs (c :: p) []), (Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max c) []), (Abs (heap_delete_max a2) [])
(Abs (heap_delete_max a1) []), (Abs (join p p c) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (insert n0 p) []), (Abs (insert n p) []), (Abs (carry p c) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (p ++ p) [])
(Abs [] []), (priqueue_elems p []), (priqueue_elems (c :: p) []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max c) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join p p c) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p c) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems c [])
(tree_elems a2 []), (tree_elems a1 []), (tree_elems (Node n0 c c) []), (tree_elems (Node n0 c a2) []), (tree_elems (Node n0 c a1) []), (tree_elems (Node n0 a2 c) []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a1 c) []), (tree_elems (Node n0 a1 a2) [])
(tree_elems (Node n0 a1 a1) []), (tree_elems (Node n c c) []), (tree_elems (Node n c a2) []), (tree_elems (Node n c a1) []), (tree_elems (Node n a2 c) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 c) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) [])
(tree_elems (smash c c) []), (tree_elems (smash c a2) []), (tree_elems (smash c a1) []), (tree_elems (smash a2 c) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a1 c) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf [])
(priq (c :: p)), (priq (a2 :: p)), (priq (a1 :: p)), (priq (merge p p)), (priq (heap_delete_max c)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (join p p c)), (priq (join p p a2)), (priq (join p p a1))
(priq (insert n0 p)), (priq (insert n p)), (priq (carry p c)), (priq (carry p a2)), (priq (carry p a1)), (priq (p ++ p)), (priqq n0 (c :: p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (merge p p))
(priqq n0 (heap_delete_max c)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (join p p c)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n p)), (priqq n0 (carry p c)), (priqq n0 (carry p a2))
(priqq n0 (carry p a1)), (priqq n0 (p ++ p)), (priqq n (c :: p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (merge p p)), (priqq n (heap_delete_max c)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join p p c))
(priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (insert n0 p)), (priqq n (insert n p)), (priqq n (carry p c)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (c :: p))
(priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max c)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (join p p c)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (insert n0 p))
(priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p c)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (c :: p)), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (merge p p))
(priqq (find_max' n p) (heap_delete_max c)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (join p p c)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p c)), (priqq (find_max' n p) (carry p a2))
(priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (c :: p)), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max c)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1))
(priqq (length p) (join p p c)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p c)), (priqq (length p) (carry p a2)), (priqq (length p) (carry p a1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 c c))
(pow2heap n0 (Node n0 c a2)), (pow2heap n0 (Node n0 c a1)), (pow2heap n0 (Node n0 a2 c)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a1 c)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n c c)), (pow2heap n0 (Node n c a2))
(pow2heap n0 (Node n c a1)), (pow2heap n0 (Node n a2 c)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a1 c)), (pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (smash c c)), (pow2heap n0 (smash c a2)), (pow2heap n0 (smash c a1))
(pow2heap n0 (smash a2 c)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a1 c)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n (Node n0 c c)), (pow2heap n (Node n0 c a2)), (pow2heap n (Node n0 c a1)), (pow2heap n (Node n0 a2 c))
(pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a1 c)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n c c)), (pow2heap n (Node n c a2)), (pow2heap n (Node n c a1)), (pow2heap n (Node n a2 c)), (pow2heap n (Node n a2 a2))
(pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 c)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash c c)), (pow2heap n (smash c a2)), (pow2heap n (smash c a1)), (pow2heap n (smash a2 c)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a1 c)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' n0 p) c), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) (Node n0 c c)), (pow2heap (find_max' n0 p) (Node n0 c a2)), (pow2heap (find_max' n0 p) (Node n0 c a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c))
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n c c)), (pow2heap (find_max' n0 p) (Node n c a2)), (pow2heap (find_max' n0 p) (Node n c a1)), (pow2heap (find_max' n0 p) (Node n a2 c)), (pow2heap (find_max' n0 p) (Node n a2 a2))
(pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a1 c)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (smash c c)), (pow2heap (find_max' n0 p) (smash c a2)), (pow2heap (find_max' n0 p) (smash c a1)), (pow2heap (find_max' n0 p) (smash a2 c)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1))
(pow2heap (find_max' n0 p) (smash a1 c)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n p) c), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) (Node n0 c c)), (pow2heap (find_max' n p) (Node n0 c a2)), (pow2heap (find_max' n p) (Node n0 c a1)), (pow2heap (find_max' n p) (Node n0 a2 c))
(pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a1 c)), (pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n c c)), (pow2heap (find_max' n p) (Node n c a2)), (pow2heap (find_max' n p) (Node n c a1)), (pow2heap (find_max' n p) (Node n a2 c)), (pow2heap (find_max' n p) (Node n a2 a2))
(pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a1 c)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (smash c c)), (pow2heap (find_max' n p) (smash c a2)), (pow2heap (find_max' n p) (smash c a1)), (pow2heap (find_max' n p) (smash a2 c)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1))
(pow2heap (find_max' n p) (smash a1 c)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (length p) c), (pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) (Node n0 c c)), (pow2heap (length p) (Node n0 c a2)), (pow2heap (length p) (Node n0 c a1)), (pow2heap (length p) (Node n0 a2 c))
(pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a1 c)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n c c)), (pow2heap (length p) (Node n c a2)), (pow2heap (length p) (Node n c a1)), (pow2heap (length p) (Node n a2 c)), (pow2heap (length p) (Node n a2 a2))
(pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a1 c)), (pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (smash c c)), (pow2heap (length p) (smash c a2)), (pow2heap (length p) (smash c a1)), (pow2heap (length p) (smash a2 c)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1))
(pow2heap (length p) (smash a1 c)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heapp n0 n0 (Node n0 c c)), (pow2heapp n0 n0 (Node n0 c a2)), (pow2heapp n0 n0 (Node n0 c a1)), (pow2heapp n0 n0 (Node n0 a2 c)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1)), (pow2heapp n0 n0 (Node n0 a1 c))
(pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n c c)), (pow2heapp n0 n0 (Node n c a2)), (pow2heapp n0 n0 (Node n c a1)), (pow2heapp n0 n0 (Node n a2 c)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a1 c)), (pow2heapp n0 n0 (Node n a1 a2))
(pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (smash c c)), (pow2heapp n0 n0 (smash c a2)), (pow2heapp n0 n0 (smash c a1)), (pow2heapp n0 n0 (smash a2 c)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a1 c)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1))
(pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n0 c c)), (pow2heapp n0 n (Node n0 c a2)), (pow2heapp n0 n (Node n0 c a1)), (pow2heapp n0 n (Node n0 a2 c)), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a1 c)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1))
(pow2heapp n0 n (Node n c c)), (pow2heapp n0 n (Node n c a2)), (pow2heapp n0 n (Node n c a1)), (pow2heapp n0 n (Node n a2 c)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a1 c)), (pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (smash c c))
(pow2heapp n0 n (smash c a2)), (pow2heapp n0 n (smash c a1)), (pow2heapp n0 n (smash a2 c)), (pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a1 c)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) c)
(pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) (Node n0 c c)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c c)), (pow2heapp n0 (find_max' n0 p) (Node n c a2)), (pow2heapp n0 (find_max' n0 p) (Node n c a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1))
(pow2heapp n0 (find_max' n0 p) (smash c c)), (pow2heapp n0 (find_max' n0 p) (smash c a2)), (pow2heapp n0 (find_max' n0 p) (smash c a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) Leaf)
(pow2heapp n0 (find_max' n p) c), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) (Node n0 c c)), (pow2heapp n0 (find_max' n p) (Node n0 c a2)), (pow2heapp n0 (find_max' n p) (Node n0 c a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c))
(pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n c c)), (pow2heapp n0 (find_max' n p) (Node n c a2)), (pow2heapp n0 (find_max' n p) (Node n c a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 c)), (pow2heapp n0 (find_max' n p) (Node n a1 a2))
(pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (smash c c)), (pow2heapp n0 (find_max' n p) (smash c a2)), (pow2heapp n0 (find_max' n p) (smash c a1)), (pow2heapp n0 (find_max' n p) (smash a2 c)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1))
(pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) c), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) (Node n0 c c)), (pow2heapp n0 (length p) (Node n0 c a2)), (pow2heapp n0 (length p) (Node n0 c a1)), (pow2heapp n0 (length p) (Node n0 a2 c)), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1))
(pow2heapp n0 (length p) (Node n0 a1 c)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n c c)), (pow2heapp n0 (length p) (Node n c a2)), (pow2heapp n0 (length p) (Node n c a1)), (pow2heapp n0 (length p) (Node n a2 c)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a1 c))
(pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (smash c c)), (pow2heapp n0 (length p) (smash c a2)), (pow2heapp n0 (length p) (smash c a1)), (pow2heapp n0 (length p) (smash a2 c)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a1 c)), (pow2heapp n0 (length p) (smash a1 a2))
(pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n n0 (Node n0 c c)), (pow2heapp n n0 (Node n0 c a2)), (pow2heapp n n0 (Node n0 c a1)), (pow2heapp n n0 (Node n0 a2 c)), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a1 c)), (pow2heapp n n0 (Node n0 a1 a2))
(pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n c c)), (pow2heapp n n0 (Node n c a2)), (pow2heapp n n0 (Node n c a1)), (pow2heapp n n0 (Node n a2 c)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a1 c)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1))
(pow2heapp n n0 (smash c c)), (pow2heapp n n0 (smash c a2)), (pow2heapp n n0 (smash c a1)), (pow2heapp n n0 (smash a2 c)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a1 c)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 Leaf)
(pow2heapp n n (Node n0 c c)), (pow2heapp n n (Node n0 c a2)), (pow2heapp n n (Node n0 c a1)), (pow2heapp n n (Node n0 a2 c)), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a1 c)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n c c))
(pow2heapp n n (Node n c a2)), (pow2heapp n n (Node n c a1)), (pow2heapp n n (Node n a2 c)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 c)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash c c)), (pow2heapp n n (smash c a2))
(pow2heapp n n (smash c a1)), (pow2heapp n n (smash a2 c)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 c)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) c), (pow2heapp n (find_max' n0 p) a2)
(pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) (Node n0 c c)), (pow2heapp n (find_max' n0 p) (Node n0 c a2)), (pow2heapp n (find_max' n0 p) (Node n0 c a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp n (find_max' n0 p) (Node n c c)), (pow2heapp n (find_max' n0 p) (Node n c a2)), (pow2heapp n (find_max' n0 p) (Node n c a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (smash c c))
(pow2heapp n (find_max' n0 p) (smash c a2)), (pow2heapp n (find_max' n0 p) (smash c a1)), (pow2heapp n (find_max' n0 p) (smash a2 c)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a1 c)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n p) c)
(pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) (Node n0 c c)), (pow2heapp n (find_max' n p) (Node n0 c a2)), (pow2heapp n (find_max' n p) (Node n0 c a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c)), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c)), (pow2heapp n (find_max' n p) (Node n0 a1 a2))
(pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n c c)), (pow2heapp n (find_max' n p) (Node n c a2)), (pow2heapp n (find_max' n p) (Node n c a1)), (pow2heapp n (find_max' n p) (Node n a2 c)), (pow2heapp n (find_max' n p) (Node n a2 a2)), (pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a1 c)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1))
(pow2heapp n (find_max' n p) (smash c c)), (pow2heapp n (find_max' n p) (smash c a2)), (pow2heapp n (find_max' n p) (smash c a1)), (pow2heapp n (find_max' n p) (smash a2 c)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a1 c)), (pow2heapp n (find_max' n p) (smash a1 a2)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) Leaf)
(pow2heapp n (length p) c), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) (Node n0 c c)), (pow2heapp n (length p) (Node n0 c a2)), (pow2heapp n (length p) (Node n0 c a1)), (pow2heapp n (length p) (Node n0 a2 c)), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a1 c))
(pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n c c)), (pow2heapp n (length p) (Node n c a2)), (pow2heapp n (length p) (Node n c a1)), (pow2heapp n (length p) (Node n a2 c)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a1 c)), (pow2heapp n (length p) (Node n a1 a2))
(pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (smash c c)), (pow2heapp n (length p) (smash c a2)), (pow2heapp n (length p) (smash c a1)), (pow2heapp n (length p) (smash a2 c)), (pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a1 c)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1))
(pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 c), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 (Node n0 c c)), (pow2heapp (find_max' n0 p) n0 (Node n0 c a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 c)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c c)), (pow2heapp (find_max' n0 p) n0 (Node n c a2)), (pow2heapp (find_max' n0 p) n0 (Node n c a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c))
(pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c c)), (pow2heapp (find_max' n0 p) n0 (smash c a2)), (pow2heapp (find_max' n0 p) n0 (smash c a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2))
(pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n c), (pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n (Node n0 c c)), (pow2heapp (find_max' n0 p) n (Node n0 c a2)), (pow2heapp (find_max' n0 p) n (Node n0 c a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n c c)), (pow2heapp (find_max' n0 p) n (Node n c a2)), (pow2heapp (find_max' n0 p) n (Node n c a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1))
(pow2heapp (find_max' n0 p) n (Node n a1 c)), (pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (smash c c)), (pow2heapp (find_max' n0 p) n (smash c a2)), (pow2heapp (find_max' n0 p) n (smash c a1)), (pow2heapp (find_max' n0 p) n (smash a2 c)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c))
(pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) c), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) c), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) c), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c c)), (pow2heapp (find_max' n0 p) (length p) (Node n c a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c a1))
(pow2heapp (find_max' n0 p) (length p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c c)), (pow2heapp (find_max' n0 p) (length p) (smash c a2)), (pow2heapp (find_max' n0 p) (length p) (smash c a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c))
(pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 c), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 (Node n0 c c))
(pow2heapp (find_max' n p) n0 (Node n0 c a2)), (pow2heapp (find_max' n p) n0 (Node n0 c a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n c c)), (pow2heapp (find_max' n p) n0 (Node n c a2))
(pow2heapp (find_max' n p) n0 (Node n c a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (smash c c)), (pow2heapp (find_max' n p) n0 (smash c a2)), (pow2heapp (find_max' n p) n0 (smash c a1))
(pow2heapp (find_max' n p) n0 (smash a2 c)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n c), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1)
(pow2heapp (find_max' n p) n (Node n0 c c)), (pow2heapp (find_max' n p) n (Node n0 c a2)), (pow2heapp (find_max' n p) n (Node n0 c a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c)), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n c c))
(pow2heapp (find_max' n p) n (Node n c a2)), (pow2heapp (find_max' n p) n (Node n c a1)), (pow2heapp (find_max' n p) n (Node n a2 c)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a1 c)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (smash c c)), (pow2heapp (find_max' n p) n (smash c a2))
(pow2heapp (find_max' n p) n (smash c a1)), (pow2heapp (find_max' n p) n (smash a2 c)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a1 c)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) c), (pow2heapp (find_max' n p) (find_max' n0 p) a2)
(pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c c))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) c)
(pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf)
(pow2heapp (find_max' n p) (length p) c), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) (Node n0 c c)), (pow2heapp (find_max' n p) (length p) (Node n0 c a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c c)), (pow2heapp (find_max' n p) (length p) (Node n c a2)), (pow2heapp (find_max' n p) (length p) (Node n c a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (smash c c)), (pow2heapp (find_max' n p) (length p) (smash c a2)), (pow2heapp (find_max' n p) (length p) (smash c a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1))
(pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (length p) n0 c), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 (Node n0 c c)), (pow2heapp (length p) n0 (Node n0 c a2)), (pow2heapp (length p) n0 (Node n0 c a1)), (pow2heapp (length p) n0 (Node n0 a2 c)), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1))
(pow2heapp (length p) n0 (Node n0 a1 c)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n c c)), (pow2heapp (length p) n0 (Node n c a2)), (pow2heapp (length p) n0 (Node n c a1)), (pow2heapp (length p) n0 (Node n a2 c)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a1 c))
(pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (smash c c)), (pow2heapp (length p) n0 (smash c a2)), (pow2heapp (length p) n0 (smash c a1)), (pow2heapp (length p) n0 (smash a2 c)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a1 c)), (pow2heapp (length p) n0 (smash a1 a2))
(pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n c), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n (Node n0 c c)), (pow2heapp (length p) n (Node n0 c a2)), (pow2heapp (length p) n (Node n0 c a1)), (pow2heapp (length p) n (Node n0 a2 c)), (pow2heapp (length p) n (Node n0 a2 a2))
(pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a1 c)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n c c)), (pow2heapp (length p) n (Node n c a2)), (pow2heapp (length p) n (Node n c a1)), (pow2heapp (length p) n (Node n a2 c)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1))
(pow2heapp (length p) n (Node n a1 c)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (smash c c)), (pow2heapp (length p) n (smash c a2)), (pow2heapp (length p) n (smash c a1)), (pow2heapp (length p) n (smash a2 c)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a1 c))
(pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) c), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c c)), (pow2heapp (length p) (find_max' n0 p) (Node n c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c c)), (pow2heapp (length p) (find_max' n0 p) (smash c a2)), (pow2heapp (length p) (find_max' n0 p) (smash c a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1))
(pow2heapp (length p) (find_max' n0 p) (smash a1 c)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n p) c), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) (Node n0 c c)), (pow2heapp (length p) (find_max' n p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c a1))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c c)), (pow2heapp (length p) (find_max' n p) (Node n c a2)), (pow2heapp (length p) (find_max' n p) (Node n c a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c))
(pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (smash c c)), (pow2heapp (length p) (find_max' n p) (smash c a2)), (pow2heapp (length p) (find_max' n p) (smash c a1)), (pow2heapp (length p) (find_max' n p) (smash a2 c)), (pow2heapp (length p) (find_max' n p) (smash a2 a2))
(pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) c), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) (Node n0 c c)), (pow2heapp (length p) (length p) (Node n0 c a2))
(pow2heapp (length p) (length p) (Node n0 c a1)), (pow2heapp (length p) (length p) (Node n0 a2 c)), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n c c)), (pow2heapp (length p) (length p) (Node n c a2)), (pow2heapp (length p) (length p) (Node n c a1))
(pow2heapp (length p) (length p) (Node n a2 c)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a1 c)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (smash c c)), (pow2heapp (length p) (length p) (smash c a2)), (pow2heapp (length p) (length p) (smash c a1)), (pow2heapp (length p) (length p) (smash a2 c))
(pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a1 c)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (c :: p)), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (merge p p))
(Permutation p (heap_delete_max c)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1)), (Permutation p (join p p c)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (insert n0 p)), (Permutation p (insert n p)), (Permutation p (carry p c)), (Permutation p (carry p a2))
(Permutation p (carry p a1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (c :: p) p), (Permutation (c :: p) (a2 :: p)), (Permutation (c :: p) (a1 :: p)), (Permutation (c :: p) (merge p p)), (Permutation (c :: p) (heap_delete_max c)), (Permutation (c :: p) (heap_delete_max a2)), (Permutation (c :: p) (heap_delete_max a1))
(Permutation (c :: p) (join p p c)), (Permutation (c :: p) (join p p a2)), (Permutation (c :: p) (join p p a1)), (Permutation (c :: p) (insert n0 p)), (Permutation (c :: p) (insert n p)), (Permutation (c :: p) (carry p c)), (Permutation (c :: p) (carry p a2)), (Permutation (c :: p) (carry p a1)), (Permutation (c :: p) (p ++ p)), (Permutation (c :: p) [])
(Permutation (a2 :: p) p), (Permutation (a2 :: p) (c :: p)), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max c)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (join p p c)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1))
(Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p c)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (c :: p)), (Permutation (a1 :: p) (a2 :: p))
(Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max c)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (join p p c)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p c))
(Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (c :: p)), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (heap_delete_max c)), (Permutation (merge p p) (heap_delete_max a2))
(Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (join p p c)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p c)), (Permutation (merge p p) (carry p a2)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (heap_delete_max c) p), (Permutation (heap_delete_max c) (c :: p)), (Permutation (heap_delete_max c) (a2 :: p)), (Permutation (heap_delete_max c) (a1 :: p)), (Permutation (heap_delete_max c) (merge p p)), (Permutation (heap_delete_max c) (heap_delete_max a2)), (Permutation (heap_delete_max c) (heap_delete_max a1)), (Permutation (heap_delete_max c) (join p p c)), (Permutation (heap_delete_max c) (join p p a2))
(Permutation (heap_delete_max c) (join p p a1)), (Permutation (heap_delete_max c) (insert n0 p)), (Permutation (heap_delete_max c) (insert n p)), (Permutation (heap_delete_max c) (carry p c)), (Permutation (heap_delete_max c) (carry p a2)), (Permutation (heap_delete_max c) (carry p a1)), (Permutation (heap_delete_max c) (p ++ p)), (Permutation (heap_delete_max c) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (c :: p))
(Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max c)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join p p c)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n p))
(Permutation (heap_delete_max a2) (carry p c)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (c :: p)), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (merge p p))
(Permutation (heap_delete_max a1) (heap_delete_max c)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join p p c)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p c)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1))
(Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (join p p c) p), (Permutation (join p p c) (c :: p)), (Permutation (join p p c) (a2 :: p)), (Permutation (join p p c) (a1 :: p)), (Permutation (join p p c) (merge p p)), (Permutation (join p p c) (heap_delete_max c)), (Permutation (join p p c) (heap_delete_max a2)), (Permutation (join p p c) (heap_delete_max a1))
(Permutation (join p p c) (join p p a2)), (Permutation (join p p c) (join p p a1)), (Permutation (join p p c) (insert n0 p)), (Permutation (join p p c) (insert n p)), (Permutation (join p p c) (carry p c)), (Permutation (join p p c) (carry p a2)), (Permutation (join p p c) (carry p a1)), (Permutation (join p p c) (p ++ p)), (Permutation (join p p c) []), (Permutation (join p p a2) p)
(Permutation (join p p a2) (c :: p)), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max c)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (join p p c)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (insert n0 p))
(Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p c)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (c :: p)), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p))
(Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max c)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (join p p c)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p c)), (Permutation (join p p a1) (carry p a2))
(Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (c :: p)), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max c)), (Permutation (insert n0 p) (heap_delete_max a2))
(Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (join p p c)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p c)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) [])
(Permutation (insert n p) p), (Permutation (insert n p) (c :: p)), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max c)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (join p p c)), (Permutation (insert n p) (join p p a2))
(Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (carry p c)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p c) p), (Permutation (carry p c) (c :: p)), (Permutation (carry p c) (a2 :: p))
(Permutation (carry p c) (a1 :: p)), (Permutation (carry p c) (merge p p)), (Permutation (carry p c) (heap_delete_max c)), (Permutation (carry p c) (heap_delete_max a2)), (Permutation (carry p c) (heap_delete_max a1)), (Permutation (carry p c) (join p p c)), (Permutation (carry p c) (join p p a2)), (Permutation (carry p c) (join p p a1)), (Permutation (carry p c) (insert n0 p)), (Permutation (carry p c) (insert n p))
(Permutation (carry p c) (carry p a2)), (Permutation (carry p c) (carry p a1)), (Permutation (carry p c) (p ++ p)), (Permutation (carry p c) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (c :: p)), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max c))
(Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (join p p c)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p c)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (p ++ p))
(Permutation (carry p a2) []), (Permutation (carry p a1) p), (Permutation (carry p a1) (c :: p)), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max c)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (join p p c))
(Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (carry p c)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (c :: p))
(Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max c)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (join p p c)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p c)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (c :: p)), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p)), (Permutation [] (merge p p))
(Permutation [] (heap_delete_max c)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join p p c)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n p)), (Permutation [] (carry p c)), (Permutation [] (carry p a2))
(Permutation [] (carry p a1)), (Permutation [] (p ++ p)), (In c (c :: p)), (In c (a2 :: p)), (In c (a1 :: p)), (In c (merge p p)), (In c (heap_delete_max c)), (In c (heap_delete_max a2)), (In c (heap_delete_max a1)), (In c (join p p c))
(In c (join p p a2)), (In c (join p p a1)), (In c (insert n0 p)), (In c (insert n p)), (In c (carry p c)), (In c (carry p a2)), (In c (carry p a1)), (In c (p ++ p)), (In a2 (c :: p)), (In a2 (a2 :: p))
(In a2 (a1 :: p)), (In a2 (merge p p)), (In a2 (heap_delete_max c)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (join p p c)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (insert n0 p)), (In a2 (insert n p))
(In a2 (carry p c)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (p ++ p)), (In a1 (c :: p)), (In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max c)), (In a1 (heap_delete_max a2))
(In a1 (heap_delete_max a1)), (In a1 (join p p c)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (insert n0 p)), (In a1 (insert n p)), (In a1 (carry p c)), (In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (p ++ p))
(In (Node n0 c c) p), (In (Node n0 c c) (c :: p)), (In (Node n0 c c) (a2 :: p)), (In (Node n0 c c) (a1 :: p)), (In (Node n0 c c) (merge p p)), (In (Node n0 c c) (heap_delete_max c)), (In (Node n0 c c) (heap_delete_max a2)), (In (Node n0 c c) (heap_delete_max a1)), (In (Node n0 c c) (join p p c)), (In (Node n0 c c) (join p p a2))
(In (Node n0 c c) (join p p a1)), (In (Node n0 c c) (insert n0 p)), (In (Node n0 c c) (insert n p)), (In (Node n0 c c) (carry p c)), (In (Node n0 c c) (carry p a2)), (In (Node n0 c c) (carry p a1)), (In (Node n0 c c) (p ++ p)), (In (Node n0 c a2) p), (In (Node n0 c a2) (c :: p)), (In (Node n0 c a2) (a2 :: p))
(In (Node n0 c a2) (a1 :: p)), (In (Node n0 c a2) (merge p p)), (In (Node n0 c a2) (heap_delete_max c)), (In (Node n0 c a2) (heap_delete_max a2)), (In (Node n0 c a2) (heap_delete_max a1)), (In (Node n0 c a2) (join p p c)), (In (Node n0 c a2) (join p p a2)), (In (Node n0 c a2) (join p p a1)), (In (Node n0 c a2) (insert n0 p)), (In (Node n0 c a2) (insert n p))
(In (Node n0 c a2) (carry p c)), (In (Node n0 c a2) (carry p a2)), (In (Node n0 c a2) (carry p a1)), (In (Node n0 c a2) (p ++ p)), (In (Node n0 c a1) p), (In (Node n0 c a1) (c :: p)), (In (Node n0 c a1) (a2 :: p)), (In (Node n0 c a1) (a1 :: p)), (In (Node n0 c a1) (merge p p)), (In (Node n0 c a1) (heap_delete_max c))
(In (Node n0 c a1) (heap_delete_max a2)), (In (Node n0 c a1) (heap_delete_max a1)), (In (Node n0 c a1) (join p p c)), (In (Node n0 c a1) (join p p a2)), (In (Node n0 c a1) (join p p a1)), (In (Node n0 c a1) (insert n0 p)), (In (Node n0 c a1) (insert n p)), (In (Node n0 c a1) (carry p c)), (In (Node n0 c a1) (carry p a2)), (In (Node n0 c a1) (carry p a1))
(In (Node n0 c a1) (p ++ p)), (In (Node n0 a2 c) p), (In (Node n0 a2 c) (c :: p)), (In (Node n0 a2 c) (a2 :: p)), (In (Node n0 a2 c) (a1 :: p)), (In (Node n0 a2 c) (merge p p)), (In (Node n0 a2 c) (heap_delete_max c)), (In (Node n0 a2 c) (heap_delete_max a2)), (In (Node n0 a2 c) (heap_delete_max a1)), (In (Node n0 a2 c) (join p p c))
(In (Node n0 a2 c) (join p p a2)), (In (Node n0 a2 c) (join p p a1)), (In (Node n0 a2 c) (insert n0 p)), (In (Node n0 a2 c) (insert n p)), (In (Node n0 a2 c) (carry p c)), (In (Node n0 a2 c) (carry p a2)), (In (Node n0 a2 c) (carry p a1)), (In (Node n0 a2 c) (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (c :: p))
(In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max c)), (In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (join p p c)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (insert n0 p))
(In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (carry p c)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (c :: p)), (In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (merge p p))
(In (Node n0 a2 a1) (heap_delete_max c)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (join p p c)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p c)), (In (Node n0 a2 a1) (carry p a2))
(In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a1 c) p), (In (Node n0 a1 c) (c :: p)), (In (Node n0 a1 c) (a2 :: p)), (In (Node n0 a1 c) (a1 :: p)), (In (Node n0 a1 c) (merge p p)), (In (Node n0 a1 c) (heap_delete_max c)), (In (Node n0 a1 c) (heap_delete_max a2)), (In (Node n0 a1 c) (heap_delete_max a1))
(In (Node n0 a1 c) (join p p c)), (In (Node n0 a1 c) (join p p a2)), (In (Node n0 a1 c) (join p p a1)), (In (Node n0 a1 c) (insert n0 p)), (In (Node n0 a1 c) (insert n p)), (In (Node n0 a1 c) (carry p c)), (In (Node n0 a1 c) (carry p a2)), (In (Node n0 a1 c) (carry p a1)), (In (Node n0 a1 c) (p ++ p)), (In (Node n0 a1 a2) p)
(In (Node n0 a1 a2) (c :: p)), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max c)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (join p p c)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1))
(In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p c)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (c :: p)), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p))
(In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max c)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (join p p c)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p c))
(In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n c c) p), (In (Node n c c) (c :: p)), (In (Node n c c) (a2 :: p)), (In (Node n c c) (a1 :: p)), (In (Node n c c) (merge p p)), (In (Node n c c) (heap_delete_max c)), (In (Node n c c) (heap_delete_max a2))
(In (Node n c c) (heap_delete_max a1)), (In (Node n c c) (join p p c)), (In (Node n c c) (join p p a2)), (In (Node n c c) (join p p a1)), (In (Node n c c) (insert n0 p)), (In (Node n c c) (insert n p)), (In (Node n c c) (carry p c)), (In (Node n c c) (carry p a2)), (In (Node n c c) (carry p a1)), (In (Node n c c) (p ++ p))
(In (Node n c a2) p), (In (Node n c a2) (c :: p)), (In (Node n c a2) (a2 :: p)), (In (Node n c a2) (a1 :: p)), (In (Node n c a2) (merge p p)), (In (Node n c a2) (heap_delete_max c)), (In (Node n c a2) (heap_delete_max a2)), (In (Node n c a2) (heap_delete_max a1)), (In (Node n c a2) (join p p c)), (In (Node n c a2) (join p p a2))
(In (Node n c a2) (join p p a1)), (In (Node n c a2) (insert n0 p)), (In (Node n c a2) (insert n p)), (In (Node n c a2) (carry p c)), (In (Node n c a2) (carry p a2)), (In (Node n c a2) (carry p a1)), (In (Node n c a2) (p ++ p)), (In (Node n c a1) p), (In (Node n c a1) (c :: p)), (In (Node n c a1) (a2 :: p))
(In (Node n c a1) (a1 :: p)), (In (Node n c a1) (merge p p)), (In (Node n c a1) (heap_delete_max c)), (In (Node n c a1) (heap_delete_max a2)), (In (Node n c a1) (heap_delete_max a1)), (In (Node n c a1) (join p p c)), (In (Node n c a1) (join p p a2)), (In (Node n c a1) (join p p a1)), (In (Node n c a1) (insert n0 p)), (In (Node n c a1) (insert n p))
(In (Node n c a1) (carry p c)), (In (Node n c a1) (carry p a2)), (In (Node n c a1) (carry p a1)), (In (Node n c a1) (p ++ p)), (In (Node n a2 c) p), (In (Node n a2 c) (c :: p)), (In (Node n a2 c) (a2 :: p)), (In (Node n a2 c) (a1 :: p)), (In (Node n a2 c) (merge p p)), (In (Node n a2 c) (heap_delete_max c))
(In (Node n a2 c) (heap_delete_max a2)), (In (Node n a2 c) (heap_delete_max a1)), (In (Node n a2 c) (join p p c)), (In (Node n a2 c) (join p p a2)), (In (Node n a2 c) (join p p a1)), (In (Node n a2 c) (insert n0 p)), (In (Node n a2 c) (insert n p)), (In (Node n a2 c) (carry p c)), (In (Node n a2 c) (carry p a2)), (In (Node n a2 c) (carry p a1))
(In (Node n a2 c) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (c :: p)), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max c)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join p p c))
(In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p c)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (c :: p))
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max c)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join p p c)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (insert n0 p))
(In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p c)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (p ++ p)), (In (Node n a1 c) p), (In (Node n a1 c) (c :: p)), (In (Node n a1 c) (a2 :: p)), (In (Node n a1 c) (a1 :: p)), (In (Node n a1 c) (merge p p))
(In (Node n a1 c) (heap_delete_max c)), (In (Node n a1 c) (heap_delete_max a2)), (In (Node n a1 c) (heap_delete_max a1)), (In (Node n a1 c) (join p p c)), (In (Node n a1 c) (join p p a2)), (In (Node n a1 c) (join p p a1)), (In (Node n a1 c) (insert n0 p)), (In (Node n a1 c) (insert n p)), (In (Node n a1 c) (carry p c)), (In (Node n a1 c) (carry p a2))
(In (Node n a1 c) (carry p a1)), (In (Node n a1 c) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (c :: p)), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max c)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1))
(In (Node n a1 a2) (join p p c)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (insert n0 p)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p c)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p)
(In (Node n a1 a1) (c :: p)), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max c)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join p p c)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1))
(In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p c)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (p ++ p)), (In (smash c c) p), (In (smash c c) (c :: p)), (In (smash c c) (a2 :: p)), (In (smash c c) (a1 :: p))
(In (smash c c) (merge p p)), (In (smash c c) (heap_delete_max c)), (In (smash c c) (heap_delete_max a2)), (In (smash c c) (heap_delete_max a1)), (In (smash c c) (join p p c)), (In (smash c c) (join p p a2)), (In (smash c c) (join p p a1)), (In (smash c c) (insert n0 p)), (In (smash c c) (insert n p)), (In (smash c c) (carry p c))
(In (smash c c) (carry p a2)), (In (smash c c) (carry p a1)), (In (smash c c) (p ++ p)), (In (smash c a2) p), (In (smash c a2) (c :: p)), (In (smash c a2) (a2 :: p)), (In (smash c a2) (a1 :: p)), (In (smash c a2) (merge p p)), (In (smash c a2) (heap_delete_max c)), (In (smash c a2) (heap_delete_max a2))
(In (smash c a2) (heap_delete_max a1)), (In (smash c a2) (join p p c)), (In (smash c a2) (join p p a2)), (In (smash c a2) (join p p a1)), (In (smash c a2) (insert n0 p)), (In (smash c a2) (insert n p)), (In (smash c a2) (carry p c)), (In (smash c a2) (carry p a2)), (In (smash c a2) (carry p a1)), (In (smash c a2) (p ++ p))
(In (smash c a1) p), (In (smash c a1) (c :: p)), (In (smash c a1) (a2 :: p)), (In (smash c a1) (a1 :: p)), (In (smash c a1) (merge p p)), (In (smash c a1) (heap_delete_max c)), (In (smash c a1) (heap_delete_max a2)), (In (smash c a1) (heap_delete_max a1)), (In (smash c a1) (join p p c)), (In (smash c a1) (join p p a2))
(In (smash c a1) (join p p a1)), (In (smash c a1) (insert n0 p)), (In (smash c a1) (insert n p)), (In (smash c a1) (carry p c)), (In (smash c a1) (carry p a2)), (In (smash c a1) (carry p a1)), (In (smash c a1) (p ++ p)), (In (smash a2 c) p), (In (smash a2 c) (c :: p)), (In (smash a2 c) (a2 :: p))
(In (smash a2 c) (a1 :: p)), (In (smash a2 c) (merge p p)), (In (smash a2 c) (heap_delete_max c)), (In (smash a2 c) (heap_delete_max a2)), (In (smash a2 c) (heap_delete_max a1)), (In (smash a2 c) (join p p c)), (In (smash a2 c) (join p p a2)), (In (smash a2 c) (join p p a1)), (In (smash a2 c) (insert n0 p)), (In (smash a2 c) (insert n p))
(In (smash a2 c) (carry p c)), (In (smash a2 c) (carry p a2)), (In (smash a2 c) (carry p a1)), (In (smash a2 c) (p ++ p)), (In (smash a2 a2) p), (In (smash a2 a2) (c :: p)), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max c))
(In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join p p c)), (In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p c)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1))
(In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (c :: p)), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max c)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join p p c))
(In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p c)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (p ++ p)), (In (smash a1 c) p), (In (smash a1 c) (c :: p))
(In (smash a1 c) (a2 :: p)), (In (smash a1 c) (a1 :: p)), (In (smash a1 c) (merge p p)), (In (smash a1 c) (heap_delete_max c)), (In (smash a1 c) (heap_delete_max a2)), (In (smash a1 c) (heap_delete_max a1)), (In (smash a1 c) (join p p c)), (In (smash a1 c) (join p p a2)), (In (smash a1 c) (join p p a1)), (In (smash a1 c) (insert n0 p))
(In (smash a1 c) (insert n p)), (In (smash a1 c) (carry p c)), (In (smash a1 c) (carry p a2)), (In (smash a1 c) (carry p a1)), (In (smash a1 c) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (c :: p)), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (merge p p))
(In (smash a1 a2) (heap_delete_max c)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join p p c)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p c)), (In (smash a1 a2) (carry p a2))
(In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (c :: p)), (In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max c)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1))
(In (smash a1 a1) (join p p c)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p c)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (p ++ p)), (In Leaf p)
(In Leaf (c :: p)), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max c)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (join p p c)), (In Leaf (join p p a2)), (In Leaf (join p p a1))
(In Leaf (insert n0 p)), (In Leaf (insert n p)), (In Leaf (carry p c)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (p ++ p)), (n0 < find_max' n0 p), (n0 < find_max' n p), (n0 < length p), (n < find_max' n0 p)
(n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p), (find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < length p)
(length p < n0), (length p < n), (length p < find_max' n0 p), (length p < find_max' n p), (n0 <= find_max' n0 p), (n0 <= find_max' n p), (n0 <= length p), (n <= find_max' n0 p), (n <= find_max' n p), (n <= length p)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= length p), (length p <= n0), (length p <= n)
(length p <= find_max' n0 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n p), (~ pow2heap n0 c), (~ pow2heap n0 a2), (~ pow2heap n0 a1), (~ pow2heap n c), (~ pow2heap n a2)
(~ pow2heap n a1), (~ pow2heapp n0 n0 c), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n c), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n n0 c), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1)
(~ pow2heapp n n c), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ Permutation p p), (~ In c p), (~ In a2 p), (~ In a1 p), (~ n0 < n0), (~ n0 < n), (~ n < n0)
(~ n < n), (~ n0 <= n0), (~ n0 <= n), (~ n <= n0), (~ n <= n), (p <> p), (c <> c), (c <> a2), (c <> a1), (a2 <> c)
(a2 <> a2), (a2 <> a1), (a1 <> c), (a1 <> a2), (a1 <> a1), (n0 <> n0), (n0 <> n), (n <> n0), (n <> n), (None = Some p)
(c :: p = p), (c :: p = merge p p), (c :: p = heap_delete_max c), (c :: p = heap_delete_max a2), (c :: p = heap_delete_max a1), (c :: p = join p p c), (c :: p = join p p a2), (c :: p = join p p a1), (c :: p = insert n0 p), (c :: p = insert n p)
(c :: p = carry p c), (c :: p = carry p a2), (c :: p = carry p a1), (c :: p = p ++ p), (c :: p = []), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max c), (a2 :: p = heap_delete_max a2), (a2 :: p = heap_delete_max a1)
(a2 :: p = join p p c), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = insert n0 p), (a2 :: p = insert n p), (a2 :: p = carry p c), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = p ++ p), (a2 :: p = [])
(a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max c), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = join p p c), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = insert n0 p), (a1 :: p = insert n p)
(a1 :: p = carry p c), (a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = p ++ p), (a1 :: p = []), (merge p p = p), (merge p p = heap_delete_max c), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = join p p c)
(merge p p = join p p a2), (merge p p = join p p a1), (merge p p = insert n0 p), (merge p p = insert n p), (merge p p = carry p c), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = p ++ p), (heap_delete_max c = p), (heap_delete_max c = carry p c)
(heap_delete_max c = carry p a2), (heap_delete_max c = carry p a1), (heap_delete_max c = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p c), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p c)
(heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = p ++ p), (join p p c = p), (join p p c = heap_delete_max c), (join p p c = heap_delete_max a2), (join p p c = heap_delete_max a1), (join p p c = insert n0 p), (join p p c = insert n p), (join p p c = carry p c)
(join p p c = carry p a2), (join p p c = carry p a1), (join p p c = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max c), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = insert n0 p), (join p p a2 = insert n p), (join p p a2 = carry p c)
(join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max c), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = insert n0 p), (join p p a1 = insert n p), (join p p a1 = carry p c)
(join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max c), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = carry p c), (insert n0 p = carry p a2), (insert n0 p = carry p a1)
(insert n0 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max c), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = carry p c), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = p ++ p), (carry p c = p)
(carry p c = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max c), ([] = heap_delete_max a2)
([] = heap_delete_max a1), ([] = join p p c), ([] = join p p a2), ([] = join p p a1), ([] = insert n0 p), ([] = insert n p), ([] = carry p c), ([] = carry p a2), ([] = carry p a1), ([] = p ++ p)
((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n p), (Node n0 c c = c), (Node n0 c c = a2), (Node n0 c c = a1), (Node n0 c c = smash c c), (Node n0 c c = smash c a2), (Node n0 c c = smash c a1), (Node n0 c c = smash a2 c), (Node n0 c c = smash a2 a2)
(Node n0 c c = smash a2 a1), (Node n0 c c = smash a1 c), (Node n0 c c = smash a1 a2), (Node n0 c c = smash a1 a1), (Node n0 c a2 = c), (Node n0 c a2 = a2), (Node n0 c a2 = a1), (Node n0 c a2 = smash c c), (Node n0 c a2 = smash c a2), (Node n0 c a2 = smash c a1)
(Node n0 c a2 = smash a2 c), (Node n0 c a2 = smash a2 a2), (Node n0 c a2 = smash a2 a1), (Node n0 c a2 = smash a1 c), (Node n0 c a2 = smash a1 a2), (Node n0 c a2 = smash a1 a1), (Node n0 c a1 = c), (Node n0 c a1 = a2), (Node n0 c a1 = a1), (Node n0 c a1 = smash c c)
(Node n0 c a1 = smash c a2), (Node n0 c a1 = smash c a1), (Node n0 c a1 = smash a2 c), (Node n0 c a1 = smash a2 a2), (Node n0 c a1 = smash a2 a1), (Node n0 c a1 = smash a1 c), (Node n0 c a1 = smash a1 a2), (Node n0 c a1 = smash a1 a1), (Node n0 a2 c = c), (Node n0 a2 c = a2)
(Node n0 a2 c = a1), (Node n0 a2 c = smash c c), (Node n0 a2 c = smash c a2), (Node n0 a2 c = smash c a1), (Node n0 a2 c = smash a2 c), (Node n0 a2 c = smash a2 a2), (Node n0 a2 c = smash a2 a1), (Node n0 a2 c = smash a1 c), (Node n0 a2 c = smash a1 a2), (Node n0 a2 c = smash a1 a1)
(Node n0 a2 a2 = c), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = smash c c), (Node n0 a2 a2 = smash c a2), (Node n0 a2 a2 = smash c a1), (Node n0 a2 a2 = smash a2 c), (Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a1 c)
(Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a1 = c), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = smash c c), (Node n0 a2 a1 = smash c a2), (Node n0 a2 a1 = smash c a1), (Node n0 a2 a1 = smash a2 c), (Node n0 a2 a1 = smash a2 a2)
(Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a1 c), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a1 c = c), (Node n0 a1 c = a2), (Node n0 a1 c = a1), (Node n0 a1 c = smash c c), (Node n0 a1 c = smash c a2), (Node n0 a1 c = smash c a1)
(Node n0 a1 c = smash a2 c), (Node n0 a1 c = smash a2 a2), (Node n0 a1 c = smash a2 a1), (Node n0 a1 c = smash a1 c), (Node n0 a1 c = smash a1 a2), (Node n0 a1 c = smash a1 a1), (Node n0 a1 a2 = c), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = smash c c)
(Node n0 a1 a2 = smash c a2), (Node n0 a1 a2 = smash c a1), (Node n0 a1 a2 = smash a2 c), (Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a1 c), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a1 = c), (Node n0 a1 a1 = a2)
(Node n0 a1 a1 = a1), (Node n0 a1 a1 = smash c c), (Node n0 a1 a1 = smash c a2), (Node n0 a1 a1 = smash c a1), (Node n0 a1 a1 = smash a2 c), (Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a1 c), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1)
(Node n c c = c), (Node n c c = a2), (Node n c c = a1), (Node n c c = smash c c), (Node n c c = smash c a2), (Node n c c = smash c a1), (Node n c c = smash a2 c), (Node n c c = smash a2 a2), (Node n c c = smash a2 a1), (Node n c c = smash a1 c)
(Node n c c = smash a1 a2), (Node n c c = smash a1 a1), (Node n c a2 = c), (Node n c a2 = a2), (Node n c a2 = a1), (Node n c a2 = smash c c), (Node n c a2 = smash c a2), (Node n c a2 = smash c a1), (Node n c a2 = smash a2 c), (Node n c a2 = smash a2 a2)
(Node n c a2 = smash a2 a1), (Node n c a2 = smash a1 c), (Node n c a2 = smash a1 a2), (Node n c a2 = smash a1 a1), (Node n c a1 = c), (Node n c a1 = a2), (Node n c a1 = a1), (Node n c a1 = smash c c), (Node n c a1 = smash c a2), (Node n c a1 = smash c a1)
(Node n c a1 = smash a2 c), (Node n c a1 = smash a2 a2), (Node n c a1 = smash a2 a1), (Node n c a1 = smash a1 c), (Node n c a1 = smash a1 a2), (Node n c a1 = smash a1 a1), (Node n a2 c = c), (Node n a2 c = a2), (Node n a2 c = a1), (Node n a2 c = smash c c)
(Node n a2 c = smash c a2), (Node n a2 c = smash c a1), (Node n a2 c = smash a2 c), (Node n a2 c = smash a2 a2), (Node n a2 c = smash a2 a1), (Node n a2 c = smash a1 c), (Node n a2 c = smash a1 a2), (Node n a2 c = smash a1 a1), (Node n a2 a2 = c), (Node n a2 a2 = a2)
(Node n a2 a2 = a1), (Node n a2 a2 = smash c c), (Node n a2 a2 = smash c a2), (Node n a2 a2 = smash c a1), (Node n a2 a2 = smash a2 c), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 c), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1)
(Node n a2 a1 = c), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash c c), (Node n a2 a1 = smash c a2), (Node n a2 a1 = smash c a1), (Node n a2 a1 = smash a2 c), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 c)
(Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a1 c = c), (Node n a1 c = a2), (Node n a1 c = a1), (Node n a1 c = smash c c), (Node n a1 c = smash c a2), (Node n a1 c = smash c a1), (Node n a1 c = smash a2 c), (Node n a1 c = smash a2 a2)
(Node n a1 c = smash a2 a1), (Node n a1 c = smash a1 c), (Node n a1 c = smash a1 a2), (Node n a1 c = smash a1 a1), (Node n a1 a2 = c), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash c c), (Node n a1 a2 = smash c a2), (Node n a1 a2 = smash c a1)
(Node n a1 a2 = smash a2 c), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 c), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = c), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash c c)
(Node n a1 a1 = smash c a2), (Node n a1 a1 = smash c a1), (Node n a1 a1 = smash a2 c), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 c), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (smash c c = c), (smash c c = a2)
(smash c c = a1), (smash c a2 = c), (smash c a2 = a2), (smash c a2 = a1), (smash c a1 = c), (smash c a1 = a2), (smash c a1 = a1), (smash a2 c = c), (smash a2 c = a2), (smash a2 c = a1)
(smash a2 a2 = c), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = c), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 c = c), (smash a1 c = a2), (smash a1 c = a1), (smash a1 a2 = c)
(smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = c), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node n0 c c), (Leaf = Node n0 c a2), (Leaf = Node n0 c a1), (Leaf = Node n0 a2 c), (Leaf = Node n0 a2 a2)
(Leaf = Node n0 a2 a1), (Leaf = Node n0 a1 c), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n c c), (Leaf = Node n c a2), (Leaf = Node n c a1), (Leaf = Node n a2 c), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1)
(Leaf = Node n a1 c), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = smash c c), (Leaf = smash c a2), (Leaf = smash c a1), (Leaf = smash a2 c), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 c)
(Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n p = n0), (find_max' n p = n), (length p = n0), (length p = n), (length p = find_max' n0 p), (length p = find_max' n p)
(Some n0 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n), (None = find_max p), (None = Some c), (None = Some a2), (None = Some a1), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n))
((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n))
((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))

Label: 1 (1)
(priq p), (priqq n0 p), (priqq n p), (pow2heap n0 c), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n c), (pow2heap n a2), (pow2heap n a1), (pow2heapp n0 n0 c)
(pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n c), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n n0 c), (pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n c), (pow2heapp n n a2)
(pow2heapp n n a1), (Permutation p p), (In c p), (In a2 p), (In a1 p), (n0 < n0), (n0 < n), (n < n0), (n < n), (n0 <= n0)
(n0 <= n), (n <= n0), (n <= n), (p = p), (c = c), (c = a2), (c = a1), (a2 = c), (a2 = a2), (a2 = a1)
(a1 = c), (a1 = a2), (a1 = a1), (n0 = n0), (n0 = n), (n = n0), (n = n), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n0))
(false = (n >? n)), (false = (n0 >=? n0)), (false = (n0 >=? n)), (false = (n >=? n0)), (false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n0)), (true = (n >? n)), (true = (n0 >=? n0))
(true = (n0 >=? n)), (true = (n >=? n0)), (true = (n >=? n)), (Abs p []), (Abs (c :: p) []), (Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max c) []), (Abs (heap_delete_max a2) [])
(Abs (heap_delete_max a1) []), (Abs (join p p c) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (insert n0 p) []), (Abs (insert n p) []), (Abs (carry p c) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (p ++ p) [])
(Abs [] []), (priqueue_elems p []), (priqueue_elems (c :: p) []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max c) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (join p p c) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p c) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems c [])
(tree_elems a2 []), (tree_elems a1 []), (tree_elems (Node n0 c c) []), (tree_elems (Node n0 c a2) []), (tree_elems (Node n0 c a1) []), (tree_elems (Node n0 a2 c) []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a1 c) []), (tree_elems (Node n0 a1 a2) [])
(tree_elems (Node n0 a1 a1) []), (tree_elems (Node n c c) []), (tree_elems (Node n c a2) []), (tree_elems (Node n c a1) []), (tree_elems (Node n a2 c) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a1 c) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) [])
(tree_elems (smash c c) []), (tree_elems (smash c a2) []), (tree_elems (smash c a1) []), (tree_elems (smash a2 c) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a1 c) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems Leaf [])
(priq (c :: p)), (priq (a2 :: p)), (priq (a1 :: p)), (priq (merge p p)), (priq (heap_delete_max c)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (join p p c)), (priq (join p p a2)), (priq (join p p a1))
(priq (insert n0 p)), (priq (insert n p)), (priq (carry p c)), (priq (carry p a2)), (priq (carry p a1)), (priq (p ++ p)), (priqq n0 (c :: p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (merge p p))
(priqq n0 (heap_delete_max c)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (join p p c)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n p)), (priqq n0 (carry p c)), (priqq n0 (carry p a2))
(priqq n0 (carry p a1)), (priqq n0 (p ++ p)), (priqq n (c :: p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (merge p p)), (priqq n (heap_delete_max c)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (join p p c))
(priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (insert n0 p)), (priqq n (insert n p)), (priqq n (carry p c)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (c :: p))
(priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max c)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (join p p c)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (insert n0 p))
(priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p c)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (c :: p)), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (merge p p))
(priqq (find_max' n p) (heap_delete_max c)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (join p p c)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p c)), (priqq (find_max' n p) (carry p a2))
(priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (c :: p)), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max c)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1))
(priqq (length p) (join p p c)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p c)), (priqq (length p) (carry p a2)), (priqq (length p) (carry p a1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 c c))
(pow2heap n0 (Node n0 c a2)), (pow2heap n0 (Node n0 c a1)), (pow2heap n0 (Node n0 a2 c)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a1 c)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n c c)), (pow2heap n0 (Node n c a2))
(pow2heap n0 (Node n c a1)), (pow2heap n0 (Node n a2 c)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a1 c)), (pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (smash c c)), (pow2heap n0 (smash c a2)), (pow2heap n0 (smash c a1))
(pow2heap n0 (smash a2 c)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a1 c)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n (Node n0 c c)), (pow2heap n (Node n0 c a2)), (pow2heap n (Node n0 c a1)), (pow2heap n (Node n0 a2 c))
(pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a1 c)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n c c)), (pow2heap n (Node n c a2)), (pow2heap n (Node n c a1)), (pow2heap n (Node n a2 c)), (pow2heap n (Node n a2 a2))
(pow2heap n (Node n a2 a1)), (pow2heap n (Node n a1 c)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (smash c c)), (pow2heap n (smash c a2)), (pow2heap n (smash c a1)), (pow2heap n (smash a2 c)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a1 c)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap (find_max' n0 p) c), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) (Node n0 c c)), (pow2heap (find_max' n0 p) (Node n0 c a2)), (pow2heap (find_max' n0 p) (Node n0 c a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c))
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n c c)), (pow2heap (find_max' n0 p) (Node n c a2)), (pow2heap (find_max' n0 p) (Node n c a1)), (pow2heap (find_max' n0 p) (Node n a2 c)), (pow2heap (find_max' n0 p) (Node n a2 a2))
(pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a1 c)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (smash c c)), (pow2heap (find_max' n0 p) (smash c a2)), (pow2heap (find_max' n0 p) (smash c a1)), (pow2heap (find_max' n0 p) (smash a2 c)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1))
(pow2heap (find_max' n0 p) (smash a1 c)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n p) c), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) (Node n0 c c)), (pow2heap (find_max' n p) (Node n0 c a2)), (pow2heap (find_max' n p) (Node n0 c a1)), (pow2heap (find_max' n p) (Node n0 a2 c))
(pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a1 c)), (pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n c c)), (pow2heap (find_max' n p) (Node n c a2)), (pow2heap (find_max' n p) (Node n c a1)), (pow2heap (find_max' n p) (Node n a2 c)), (pow2heap (find_max' n p) (Node n a2 a2))
(pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a1 c)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (smash c c)), (pow2heap (find_max' n p) (smash c a2)), (pow2heap (find_max' n p) (smash c a1)), (pow2heap (find_max' n p) (smash a2 c)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1))
(pow2heap (find_max' n p) (smash a1 c)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (length p) c), (pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) (Node n0 c c)), (pow2heap (length p) (Node n0 c a2)), (pow2heap (length p) (Node n0 c a1)), (pow2heap (length p) (Node n0 a2 c))
(pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a1 c)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n c c)), (pow2heap (length p) (Node n c a2)), (pow2heap (length p) (Node n c a1)), (pow2heap (length p) (Node n a2 c)), (pow2heap (length p) (Node n a2 a2))
(pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a1 c)), (pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (smash c c)), (pow2heap (length p) (smash c a2)), (pow2heap (length p) (smash c a1)), (pow2heap (length p) (smash a2 c)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1))
(pow2heap (length p) (smash a1 c)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heapp n0 n0 (Node n0 c c)), (pow2heapp n0 n0 (Node n0 c a2)), (pow2heapp n0 n0 (Node n0 c a1)), (pow2heapp n0 n0 (Node n0 a2 c)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1)), (pow2heapp n0 n0 (Node n0 a1 c))
(pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n c c)), (pow2heapp n0 n0 (Node n c a2)), (pow2heapp n0 n0 (Node n c a1)), (pow2heapp n0 n0 (Node n a2 c)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a1 c)), (pow2heapp n0 n0 (Node n a1 a2))
(pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (smash c c)), (pow2heapp n0 n0 (smash c a2)), (pow2heapp n0 n0 (smash c a1)), (pow2heapp n0 n0 (smash a2 c)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a1 c)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1))
(pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n0 c c)), (pow2heapp n0 n (Node n0 c a2)), (pow2heapp n0 n (Node n0 c a1)), (pow2heapp n0 n (Node n0 a2 c)), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a1 c)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1))
(pow2heapp n0 n (Node n c c)), (pow2heapp n0 n (Node n c a2)), (pow2heapp n0 n (Node n c a1)), (pow2heapp n0 n (Node n a2 c)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a1 c)), (pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (smash c c))
(pow2heapp n0 n (smash c a2)), (pow2heapp n0 n (smash c a1)), (pow2heapp n0 n (smash a2 c)), (pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a1 c)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) c)
(pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) (Node n0 c c)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c c)), (pow2heapp n0 (find_max' n0 p) (Node n c a2)), (pow2heapp n0 (find_max' n0 p) (Node n c a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1))
(pow2heapp n0 (find_max' n0 p) (smash c c)), (pow2heapp n0 (find_max' n0 p) (smash c a2)), (pow2heapp n0 (find_max' n0 p) (smash c a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) Leaf)
(pow2heapp n0 (find_max' n p) c), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) (Node n0 c c)), (pow2heapp n0 (find_max' n p) (Node n0 c a2)), (pow2heapp n0 (find_max' n p) (Node n0 c a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c))
(pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n c c)), (pow2heapp n0 (find_max' n p) (Node n c a2)), (pow2heapp n0 (find_max' n p) (Node n c a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 c)), (pow2heapp n0 (find_max' n p) (Node n a1 a2))
(pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (smash c c)), (pow2heapp n0 (find_max' n p) (smash c a2)), (pow2heapp n0 (find_max' n p) (smash c a1)), (pow2heapp n0 (find_max' n p) (smash a2 c)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1))
(pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) c), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) (Node n0 c c)), (pow2heapp n0 (length p) (Node n0 c a2)), (pow2heapp n0 (length p) (Node n0 c a1)), (pow2heapp n0 (length p) (Node n0 a2 c)), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1))
(pow2heapp n0 (length p) (Node n0 a1 c)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n c c)), (pow2heapp n0 (length p) (Node n c a2)), (pow2heapp n0 (length p) (Node n c a1)), (pow2heapp n0 (length p) (Node n a2 c)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a1 c))
(pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (smash c c)), (pow2heapp n0 (length p) (smash c a2)), (pow2heapp n0 (length p) (smash c a1)), (pow2heapp n0 (length p) (smash a2 c)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a1 c)), (pow2heapp n0 (length p) (smash a1 a2))
(pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n n0 (Node n0 c c)), (pow2heapp n n0 (Node n0 c a2)), (pow2heapp n n0 (Node n0 c a1)), (pow2heapp n n0 (Node n0 a2 c)), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a1 c)), (pow2heapp n n0 (Node n0 a1 a2))
(pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n c c)), (pow2heapp n n0 (Node n c a2)), (pow2heapp n n0 (Node n c a1)), (pow2heapp n n0 (Node n a2 c)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a1 c)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1))
(pow2heapp n n0 (smash c c)), (pow2heapp n n0 (smash c a2)), (pow2heapp n n0 (smash c a1)), (pow2heapp n n0 (smash a2 c)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a1 c)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 Leaf)
(pow2heapp n n (Node n0 c c)), (pow2heapp n n (Node n0 c a2)), (pow2heapp n n (Node n0 c a1)), (pow2heapp n n (Node n0 a2 c)), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a1 c)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n c c))
(pow2heapp n n (Node n c a2)), (pow2heapp n n (Node n c a1)), (pow2heapp n n (Node n a2 c)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a1 c)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (smash c c)), (pow2heapp n n (smash c a2))
(pow2heapp n n (smash c a1)), (pow2heapp n n (smash a2 c)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a1 c)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) c), (pow2heapp n (find_max' n0 p) a2)
(pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) (Node n0 c c)), (pow2heapp n (find_max' n0 p) (Node n0 c a2)), (pow2heapp n (find_max' n0 p) (Node n0 c a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp n (find_max' n0 p) (Node n c c)), (pow2heapp n (find_max' n0 p) (Node n c a2)), (pow2heapp n (find_max' n0 p) (Node n c a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (smash c c))
(pow2heapp n (find_max' n0 p) (smash c a2)), (pow2heapp n (find_max' n0 p) (smash c a1)), (pow2heapp n (find_max' n0 p) (smash a2 c)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a1 c)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n p) c)
(pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) (Node n0 c c)), (pow2heapp n (find_max' n p) (Node n0 c a2)), (pow2heapp n (find_max' n p) (Node n0 c a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c)), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c)), (pow2heapp n (find_max' n p) (Node n0 a1 a2))
(pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n c c)), (pow2heapp n (find_max' n p) (Node n c a2)), (pow2heapp n (find_max' n p) (Node n c a1)), (pow2heapp n (find_max' n p) (Node n a2 c)), (pow2heapp n (find_max' n p) (Node n a2 a2)), (pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a1 c)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1))
(pow2heapp n (find_max' n p) (smash c c)), (pow2heapp n (find_max' n p) (smash c a2)), (pow2heapp n (find_max' n p) (smash c a1)), (pow2heapp n (find_max' n p) (smash a2 c)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a1 c)), (pow2heapp n (find_max' n p) (smash a1 a2)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) Leaf)
(pow2heapp n (length p) c), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) (Node n0 c c)), (pow2heapp n (length p) (Node n0 c a2)), (pow2heapp n (length p) (Node n0 c a1)), (pow2heapp n (length p) (Node n0 a2 c)), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a1 c))
(pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n c c)), (pow2heapp n (length p) (Node n c a2)), (pow2heapp n (length p) (Node n c a1)), (pow2heapp n (length p) (Node n a2 c)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a1 c)), (pow2heapp n (length p) (Node n a1 a2))
(pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (smash c c)), (pow2heapp n (length p) (smash c a2)), (pow2heapp n (length p) (smash c a1)), (pow2heapp n (length p) (smash a2 c)), (pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a1 c)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1))
(pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 c), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 (Node n0 c c)), (pow2heapp (find_max' n0 p) n0 (Node n0 c a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 c)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c c)), (pow2heapp (find_max' n0 p) n0 (Node n c a2)), (pow2heapp (find_max' n0 p) n0 (Node n c a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c))
(pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c c)), (pow2heapp (find_max' n0 p) n0 (smash c a2)), (pow2heapp (find_max' n0 p) n0 (smash c a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2))
(pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n c), (pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n (Node n0 c c)), (pow2heapp (find_max' n0 p) n (Node n0 c a2)), (pow2heapp (find_max' n0 p) n (Node n0 c a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n c c)), (pow2heapp (find_max' n0 p) n (Node n c a2)), (pow2heapp (find_max' n0 p) n (Node n c a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1))
(pow2heapp (find_max' n0 p) n (Node n a1 c)), (pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (smash c c)), (pow2heapp (find_max' n0 p) n (smash c a2)), (pow2heapp (find_max' n0 p) n (smash c a1)), (pow2heapp (find_max' n0 p) n (smash a2 c)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c))
(pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) c), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) c), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) c), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c c)), (pow2heapp (find_max' n0 p) (length p) (Node n c a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c a1))
(pow2heapp (find_max' n0 p) (length p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c c)), (pow2heapp (find_max' n0 p) (length p) (smash c a2)), (pow2heapp (find_max' n0 p) (length p) (smash c a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c))
(pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 c), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 (Node n0 c c))
(pow2heapp (find_max' n p) n0 (Node n0 c a2)), (pow2heapp (find_max' n p) n0 (Node n0 c a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n c c)), (pow2heapp (find_max' n p) n0 (Node n c a2))
(pow2heapp (find_max' n p) n0 (Node n c a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (smash c c)), (pow2heapp (find_max' n p) n0 (smash c a2)), (pow2heapp (find_max' n p) n0 (smash c a1))
(pow2heapp (find_max' n p) n0 (smash a2 c)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n c), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1)
(pow2heapp (find_max' n p) n (Node n0 c c)), (pow2heapp (find_max' n p) n (Node n0 c a2)), (pow2heapp (find_max' n p) n (Node n0 c a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c)), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n c c))
(pow2heapp (find_max' n p) n (Node n c a2)), (pow2heapp (find_max' n p) n (Node n c a1)), (pow2heapp (find_max' n p) n (Node n a2 c)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a1 c)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (smash c c)), (pow2heapp (find_max' n p) n (smash c a2))
(pow2heapp (find_max' n p) n (smash c a1)), (pow2heapp (find_max' n p) n (smash a2 c)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a1 c)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) c), (pow2heapp (find_max' n p) (find_max' n0 p) a2)
(pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c c))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) c)
(pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf)
(pow2heapp (find_max' n p) (length p) c), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) (Node n0 c c)), (pow2heapp (find_max' n p) (length p) (Node n0 c a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c c)), (pow2heapp (find_max' n p) (length p) (Node n c a2)), (pow2heapp (find_max' n p) (length p) (Node n c a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (smash c c)), (pow2heapp (find_max' n p) (length p) (smash c a2)), (pow2heapp (find_max' n p) (length p) (smash c a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1))
(pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (length p) n0 c), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 (Node n0 c c)), (pow2heapp (length p) n0 (Node n0 c a2)), (pow2heapp (length p) n0 (Node n0 c a1)), (pow2heapp (length p) n0 (Node n0 a2 c)), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1))
(pow2heapp (length p) n0 (Node n0 a1 c)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n c c)), (pow2heapp (length p) n0 (Node n c a2)), (pow2heapp (length p) n0 (Node n c a1)), (pow2heapp (length p) n0 (Node n a2 c)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a1 c))
(pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (smash c c)), (pow2heapp (length p) n0 (smash c a2)), (pow2heapp (length p) n0 (smash c a1)), (pow2heapp (length p) n0 (smash a2 c)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a1 c)), (pow2heapp (length p) n0 (smash a1 a2))
(pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n c), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n (Node n0 c c)), (pow2heapp (length p) n (Node n0 c a2)), (pow2heapp (length p) n (Node n0 c a1)), (pow2heapp (length p) n (Node n0 a2 c)), (pow2heapp (length p) n (Node n0 a2 a2))
(pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a1 c)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n c c)), (pow2heapp (length p) n (Node n c a2)), (pow2heapp (length p) n (Node n c a1)), (pow2heapp (length p) n (Node n a2 c)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1))
(pow2heapp (length p) n (Node n a1 c)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (smash c c)), (pow2heapp (length p) n (smash c a2)), (pow2heapp (length p) n (smash c a1)), (pow2heapp (length p) n (smash a2 c)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a1 c))
(pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) c), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c c)), (pow2heapp (length p) (find_max' n0 p) (Node n c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c c)), (pow2heapp (length p) (find_max' n0 p) (smash c a2)), (pow2heapp (length p) (find_max' n0 p) (smash c a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1))
(pow2heapp (length p) (find_max' n0 p) (smash a1 c)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n p) c), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) (Node n0 c c)), (pow2heapp (length p) (find_max' n p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c a1))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c c)), (pow2heapp (length p) (find_max' n p) (Node n c a2)), (pow2heapp (length p) (find_max' n p) (Node n c a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c))
(pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (smash c c)), (pow2heapp (length p) (find_max' n p) (smash c a2)), (pow2heapp (length p) (find_max' n p) (smash c a1)), (pow2heapp (length p) (find_max' n p) (smash a2 c)), (pow2heapp (length p) (find_max' n p) (smash a2 a2))
(pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) c), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) (Node n0 c c)), (pow2heapp (length p) (length p) (Node n0 c a2))
(pow2heapp (length p) (length p) (Node n0 c a1)), (pow2heapp (length p) (length p) (Node n0 a2 c)), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n c c)), (pow2heapp (length p) (length p) (Node n c a2)), (pow2heapp (length p) (length p) (Node n c a1))
(pow2heapp (length p) (length p) (Node n a2 c)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a1 c)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (smash c c)), (pow2heapp (length p) (length p) (smash c a2)), (pow2heapp (length p) (length p) (smash c a1)), (pow2heapp (length p) (length p) (smash a2 c))
(pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a1 c)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (c :: p)), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (merge p p))
(Permutation p (heap_delete_max c)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1)), (Permutation p (join p p c)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (insert n0 p)), (Permutation p (insert n p)), (Permutation p (carry p c)), (Permutation p (carry p a2))
(Permutation p (carry p a1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (c :: p) p), (Permutation (c :: p) (a2 :: p)), (Permutation (c :: p) (a1 :: p)), (Permutation (c :: p) (merge p p)), (Permutation (c :: p) (heap_delete_max c)), (Permutation (c :: p) (heap_delete_max a2)), (Permutation (c :: p) (heap_delete_max a1))
(Permutation (c :: p) (join p p c)), (Permutation (c :: p) (join p p a2)), (Permutation (c :: p) (join p p a1)), (Permutation (c :: p) (insert n0 p)), (Permutation (c :: p) (insert n p)), (Permutation (c :: p) (carry p c)), (Permutation (c :: p) (carry p a2)), (Permutation (c :: p) (carry p a1)), (Permutation (c :: p) (p ++ p)), (Permutation (c :: p) [])
(Permutation (a2 :: p) p), (Permutation (a2 :: p) (c :: p)), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max c)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (join p p c)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1))
(Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p c)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (c :: p)), (Permutation (a1 :: p) (a2 :: p))
(Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max c)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (join p p c)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p c))
(Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (c :: p)), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (heap_delete_max c)), (Permutation (merge p p) (heap_delete_max a2))
(Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (join p p c)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p c)), (Permutation (merge p p) (carry p a2)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (heap_delete_max c) p), (Permutation (heap_delete_max c) (c :: p)), (Permutation (heap_delete_max c) (a2 :: p)), (Permutation (heap_delete_max c) (a1 :: p)), (Permutation (heap_delete_max c) (merge p p)), (Permutation (heap_delete_max c) (heap_delete_max a2)), (Permutation (heap_delete_max c) (heap_delete_max a1)), (Permutation (heap_delete_max c) (join p p c)), (Permutation (heap_delete_max c) (join p p a2))
(Permutation (heap_delete_max c) (join p p a1)), (Permutation (heap_delete_max c) (insert n0 p)), (Permutation (heap_delete_max c) (insert n p)), (Permutation (heap_delete_max c) (carry p c)), (Permutation (heap_delete_max c) (carry p a2)), (Permutation (heap_delete_max c) (carry p a1)), (Permutation (heap_delete_max c) (p ++ p)), (Permutation (heap_delete_max c) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (c :: p))
(Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max c)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (join p p c)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n p))
(Permutation (heap_delete_max a2) (carry p c)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (c :: p)), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (merge p p))
(Permutation (heap_delete_max a1) (heap_delete_max c)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (join p p c)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p c)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1))
(Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (join p p c) p), (Permutation (join p p c) (c :: p)), (Permutation (join p p c) (a2 :: p)), (Permutation (join p p c) (a1 :: p)), (Permutation (join p p c) (merge p p)), (Permutation (join p p c) (heap_delete_max c)), (Permutation (join p p c) (heap_delete_max a2)), (Permutation (join p p c) (heap_delete_max a1))
(Permutation (join p p c) (join p p a2)), (Permutation (join p p c) (join p p a1)), (Permutation (join p p c) (insert n0 p)), (Permutation (join p p c) (insert n p)), (Permutation (join p p c) (carry p c)), (Permutation (join p p c) (carry p a2)), (Permutation (join p p c) (carry p a1)), (Permutation (join p p c) (p ++ p)), (Permutation (join p p c) []), (Permutation (join p p a2) p)
(Permutation (join p p a2) (c :: p)), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max c)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (join p p c)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (insert n0 p))
(Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p c)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (c :: p)), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p))
(Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max c)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (join p p c)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p c)), (Permutation (join p p a1) (carry p a2))
(Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (c :: p)), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max c)), (Permutation (insert n0 p) (heap_delete_max a2))
(Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (join p p c)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p c)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) [])
(Permutation (insert n p) p), (Permutation (insert n p) (c :: p)), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max c)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (join p p c)), (Permutation (insert n p) (join p p a2))
(Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (carry p c)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p c) p), (Permutation (carry p c) (c :: p)), (Permutation (carry p c) (a2 :: p))
(Permutation (carry p c) (a1 :: p)), (Permutation (carry p c) (merge p p)), (Permutation (carry p c) (heap_delete_max c)), (Permutation (carry p c) (heap_delete_max a2)), (Permutation (carry p c) (heap_delete_max a1)), (Permutation (carry p c) (join p p c)), (Permutation (carry p c) (join p p a2)), (Permutation (carry p c) (join p p a1)), (Permutation (carry p c) (insert n0 p)), (Permutation (carry p c) (insert n p))
(Permutation (carry p c) (carry p a2)), (Permutation (carry p c) (carry p a1)), (Permutation (carry p c) (p ++ p)), (Permutation (carry p c) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (c :: p)), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max c))
(Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (join p p c)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p c)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (p ++ p))
(Permutation (carry p a2) []), (Permutation (carry p a1) p), (Permutation (carry p a1) (c :: p)), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max c)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (join p p c))
(Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (carry p c)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (c :: p))
(Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max c)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (join p p c)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p c)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (c :: p)), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p)), (Permutation [] (merge p p))
(Permutation [] (heap_delete_max c)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (join p p c)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n p)), (Permutation [] (carry p c)), (Permutation [] (carry p a2))
(Permutation [] (carry p a1)), (Permutation [] (p ++ p)), (In c (c :: p)), (In c (a2 :: p)), (In c (a1 :: p)), (In c (merge p p)), (In c (heap_delete_max c)), (In c (heap_delete_max a2)), (In c (heap_delete_max a1)), (In c (join p p c))
(In c (join p p a2)), (In c (join p p a1)), (In c (insert n0 p)), (In c (insert n p)), (In c (carry p c)), (In c (carry p a2)), (In c (carry p a1)), (In c (p ++ p)), (In a2 (c :: p)), (In a2 (a2 :: p))
(In a2 (a1 :: p)), (In a2 (merge p p)), (In a2 (heap_delete_max c)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (join p p c)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (insert n0 p)), (In a2 (insert n p))
(In a2 (carry p c)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (p ++ p)), (In a1 (c :: p)), (In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max c)), (In a1 (heap_delete_max a2))
(In a1 (heap_delete_max a1)), (In a1 (join p p c)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (insert n0 p)), (In a1 (insert n p)), (In a1 (carry p c)), (In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (p ++ p))
(In (Node n0 c c) p), (In (Node n0 c c) (c :: p)), (In (Node n0 c c) (a2 :: p)), (In (Node n0 c c) (a1 :: p)), (In (Node n0 c c) (merge p p)), (In (Node n0 c c) (heap_delete_max c)), (In (Node n0 c c) (heap_delete_max a2)), (In (Node n0 c c) (heap_delete_max a1)), (In (Node n0 c c) (join p p c)), (In (Node n0 c c) (join p p a2))
(In (Node n0 c c) (join p p a1)), (In (Node n0 c c) (insert n0 p)), (In (Node n0 c c) (insert n p)), (In (Node n0 c c) (carry p c)), (In (Node n0 c c) (carry p a2)), (In (Node n0 c c) (carry p a1)), (In (Node n0 c c) (p ++ p)), (In (Node n0 c a2) p), (In (Node n0 c a2) (c :: p)), (In (Node n0 c a2) (a2 :: p))
(In (Node n0 c a2) (a1 :: p)), (In (Node n0 c a2) (merge p p)), (In (Node n0 c a2) (heap_delete_max c)), (In (Node n0 c a2) (heap_delete_max a2)), (In (Node n0 c a2) (heap_delete_max a1)), (In (Node n0 c a2) (join p p c)), (In (Node n0 c a2) (join p p a2)), (In (Node n0 c a2) (join p p a1)), (In (Node n0 c a2) (insert n0 p)), (In (Node n0 c a2) (insert n p))
(In (Node n0 c a2) (carry p c)), (In (Node n0 c a2) (carry p a2)), (In (Node n0 c a2) (carry p a1)), (In (Node n0 c a2) (p ++ p)), (In (Node n0 c a1) p), (In (Node n0 c a1) (c :: p)), (In (Node n0 c a1) (a2 :: p)), (In (Node n0 c a1) (a1 :: p)), (In (Node n0 c a1) (merge p p)), (In (Node n0 c a1) (heap_delete_max c))
(In (Node n0 c a1) (heap_delete_max a2)), (In (Node n0 c a1) (heap_delete_max a1)), (In (Node n0 c a1) (join p p c)), (In (Node n0 c a1) (join p p a2)), (In (Node n0 c a1) (join p p a1)), (In (Node n0 c a1) (insert n0 p)), (In (Node n0 c a1) (insert n p)), (In (Node n0 c a1) (carry p c)), (In (Node n0 c a1) (carry p a2)), (In (Node n0 c a1) (carry p a1))
(In (Node n0 c a1) (p ++ p)), (In (Node n0 a2 c) p), (In (Node n0 a2 c) (c :: p)), (In (Node n0 a2 c) (a2 :: p)), (In (Node n0 a2 c) (a1 :: p)), (In (Node n0 a2 c) (merge p p)), (In (Node n0 a2 c) (heap_delete_max c)), (In (Node n0 a2 c) (heap_delete_max a2)), (In (Node n0 a2 c) (heap_delete_max a1)), (In (Node n0 a2 c) (join p p c))
(In (Node n0 a2 c) (join p p a2)), (In (Node n0 a2 c) (join p p a1)), (In (Node n0 a2 c) (insert n0 p)), (In (Node n0 a2 c) (insert n p)), (In (Node n0 a2 c) (carry p c)), (In (Node n0 a2 c) (carry p a2)), (In (Node n0 a2 c) (carry p a1)), (In (Node n0 a2 c) (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (c :: p))
(In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max c)), (In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (join p p c)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (insert n0 p))
(In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (carry p c)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (c :: p)), (In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (merge p p))
(In (Node n0 a2 a1) (heap_delete_max c)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (join p p c)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p c)), (In (Node n0 a2 a1) (carry p a2))
(In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a1 c) p), (In (Node n0 a1 c) (c :: p)), (In (Node n0 a1 c) (a2 :: p)), (In (Node n0 a1 c) (a1 :: p)), (In (Node n0 a1 c) (merge p p)), (In (Node n0 a1 c) (heap_delete_max c)), (In (Node n0 a1 c) (heap_delete_max a2)), (In (Node n0 a1 c) (heap_delete_max a1))
(In (Node n0 a1 c) (join p p c)), (In (Node n0 a1 c) (join p p a2)), (In (Node n0 a1 c) (join p p a1)), (In (Node n0 a1 c) (insert n0 p)), (In (Node n0 a1 c) (insert n p)), (In (Node n0 a1 c) (carry p c)), (In (Node n0 a1 c) (carry p a2)), (In (Node n0 a1 c) (carry p a1)), (In (Node n0 a1 c) (p ++ p)), (In (Node n0 a1 a2) p)
(In (Node n0 a1 a2) (c :: p)), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max c)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (join p p c)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1))
(In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p c)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (c :: p)), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p))
(In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max c)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (join p p c)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p c))
(In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n c c) p), (In (Node n c c) (c :: p)), (In (Node n c c) (a2 :: p)), (In (Node n c c) (a1 :: p)), (In (Node n c c) (merge p p)), (In (Node n c c) (heap_delete_max c)), (In (Node n c c) (heap_delete_max a2))
(In (Node n c c) (heap_delete_max a1)), (In (Node n c c) (join p p c)), (In (Node n c c) (join p p a2)), (In (Node n c c) (join p p a1)), (In (Node n c c) (insert n0 p)), (In (Node n c c) (insert n p)), (In (Node n c c) (carry p c)), (In (Node n c c) (carry p a2)), (In (Node n c c) (carry p a1)), (In (Node n c c) (p ++ p))
(In (Node n c a2) p), (In (Node n c a2) (c :: p)), (In (Node n c a2) (a2 :: p)), (In (Node n c a2) (a1 :: p)), (In (Node n c a2) (merge p p)), (In (Node n c a2) (heap_delete_max c)), (In (Node n c a2) (heap_delete_max a2)), (In (Node n c a2) (heap_delete_max a1)), (In (Node n c a2) (join p p c)), (In (Node n c a2) (join p p a2))
(In (Node n c a2) (join p p a1)), (In (Node n c a2) (insert n0 p)), (In (Node n c a2) (insert n p)), (In (Node n c a2) (carry p c)), (In (Node n c a2) (carry p a2)), (In (Node n c a2) (carry p a1)), (In (Node n c a2) (p ++ p)), (In (Node n c a1) p), (In (Node n c a1) (c :: p)), (In (Node n c a1) (a2 :: p))
(In (Node n c a1) (a1 :: p)), (In (Node n c a1) (merge p p)), (In (Node n c a1) (heap_delete_max c)), (In (Node n c a1) (heap_delete_max a2)), (In (Node n c a1) (heap_delete_max a1)), (In (Node n c a1) (join p p c)), (In (Node n c a1) (join p p a2)), (In (Node n c a1) (join p p a1)), (In (Node n c a1) (insert n0 p)), (In (Node n c a1) (insert n p))
(In (Node n c a1) (carry p c)), (In (Node n c a1) (carry p a2)), (In (Node n c a1) (carry p a1)), (In (Node n c a1) (p ++ p)), (In (Node n a2 c) p), (In (Node n a2 c) (c :: p)), (In (Node n a2 c) (a2 :: p)), (In (Node n a2 c) (a1 :: p)), (In (Node n a2 c) (merge p p)), (In (Node n a2 c) (heap_delete_max c))
(In (Node n a2 c) (heap_delete_max a2)), (In (Node n a2 c) (heap_delete_max a1)), (In (Node n a2 c) (join p p c)), (In (Node n a2 c) (join p p a2)), (In (Node n a2 c) (join p p a1)), (In (Node n a2 c) (insert n0 p)), (In (Node n a2 c) (insert n p)), (In (Node n a2 c) (carry p c)), (In (Node n a2 c) (carry p a2)), (In (Node n a2 c) (carry p a1))
(In (Node n a2 c) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (c :: p)), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max c)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (join p p c))
(In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p c)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (c :: p))
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max c)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (join p p c)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (insert n0 p))
(In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p c)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (p ++ p)), (In (Node n a1 c) p), (In (Node n a1 c) (c :: p)), (In (Node n a1 c) (a2 :: p)), (In (Node n a1 c) (a1 :: p)), (In (Node n a1 c) (merge p p))
(In (Node n a1 c) (heap_delete_max c)), (In (Node n a1 c) (heap_delete_max a2)), (In (Node n a1 c) (heap_delete_max a1)), (In (Node n a1 c) (join p p c)), (In (Node n a1 c) (join p p a2)), (In (Node n a1 c) (join p p a1)), (In (Node n a1 c) (insert n0 p)), (In (Node n a1 c) (insert n p)), (In (Node n a1 c) (carry p c)), (In (Node n a1 c) (carry p a2))
(In (Node n a1 c) (carry p a1)), (In (Node n a1 c) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (c :: p)), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max c)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1))
(In (Node n a1 a2) (join p p c)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (insert n0 p)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p c)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p)
(In (Node n a1 a1) (c :: p)), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max c)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (join p p c)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1))
(In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p c)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (p ++ p)), (In (smash c c) p), (In (smash c c) (c :: p)), (In (smash c c) (a2 :: p)), (In (smash c c) (a1 :: p))
(In (smash c c) (merge p p)), (In (smash c c) (heap_delete_max c)), (In (smash c c) (heap_delete_max a2)), (In (smash c c) (heap_delete_max a1)), (In (smash c c) (join p p c)), (In (smash c c) (join p p a2)), (In (smash c c) (join p p a1)), (In (smash c c) (insert n0 p)), (In (smash c c) (insert n p)), (In (smash c c) (carry p c))
(In (smash c c) (carry p a2)), (In (smash c c) (carry p a1)), (In (smash c c) (p ++ p)), (In (smash c a2) p), (In (smash c a2) (c :: p)), (In (smash c a2) (a2 :: p)), (In (smash c a2) (a1 :: p)), (In (smash c a2) (merge p p)), (In (smash c a2) (heap_delete_max c)), (In (smash c a2) (heap_delete_max a2))
(In (smash c a2) (heap_delete_max a1)), (In (smash c a2) (join p p c)), (In (smash c a2) (join p p a2)), (In (smash c a2) (join p p a1)), (In (smash c a2) (insert n0 p)), (In (smash c a2) (insert n p)), (In (smash c a2) (carry p c)), (In (smash c a2) (carry p a2)), (In (smash c a2) (carry p a1)), (In (smash c a2) (p ++ p))
(In (smash c a1) p), (In (smash c a1) (c :: p)), (In (smash c a1) (a2 :: p)), (In (smash c a1) (a1 :: p)), (In (smash c a1) (merge p p)), (In (smash c a1) (heap_delete_max c)), (In (smash c a1) (heap_delete_max a2)), (In (smash c a1) (heap_delete_max a1)), (In (smash c a1) (join p p c)), (In (smash c a1) (join p p a2))
(In (smash c a1) (join p p a1)), (In (smash c a1) (insert n0 p)), (In (smash c a1) (insert n p)), (In (smash c a1) (carry p c)), (In (smash c a1) (carry p a2)), (In (smash c a1) (carry p a1)), (In (smash c a1) (p ++ p)), (In (smash a2 c) p), (In (smash a2 c) (c :: p)), (In (smash a2 c) (a2 :: p))
(In (smash a2 c) (a1 :: p)), (In (smash a2 c) (merge p p)), (In (smash a2 c) (heap_delete_max c)), (In (smash a2 c) (heap_delete_max a2)), (In (smash a2 c) (heap_delete_max a1)), (In (smash a2 c) (join p p c)), (In (smash a2 c) (join p p a2)), (In (smash a2 c) (join p p a1)), (In (smash a2 c) (insert n0 p)), (In (smash a2 c) (insert n p))
(In (smash a2 c) (carry p c)), (In (smash a2 c) (carry p a2)), (In (smash a2 c) (carry p a1)), (In (smash a2 c) (p ++ p)), (In (smash a2 a2) p), (In (smash a2 a2) (c :: p)), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max c))
(In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (join p p c)), (In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p c)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1))
(In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (c :: p)), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max c)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (join p p c))
(In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p c)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (p ++ p)), (In (smash a1 c) p), (In (smash a1 c) (c :: p))
(In (smash a1 c) (a2 :: p)), (In (smash a1 c) (a1 :: p)), (In (smash a1 c) (merge p p)), (In (smash a1 c) (heap_delete_max c)), (In (smash a1 c) (heap_delete_max a2)), (In (smash a1 c) (heap_delete_max a1)), (In (smash a1 c) (join p p c)), (In (smash a1 c) (join p p a2)), (In (smash a1 c) (join p p a1)), (In (smash a1 c) (insert n0 p))
(In (smash a1 c) (insert n p)), (In (smash a1 c) (carry p c)), (In (smash a1 c) (carry p a2)), (In (smash a1 c) (carry p a1)), (In (smash a1 c) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (c :: p)), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (merge p p))
(In (smash a1 a2) (heap_delete_max c)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (join p p c)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p c)), (In (smash a1 a2) (carry p a2))
(In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (c :: p)), (In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max c)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1))
(In (smash a1 a1) (join p p c)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p c)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (p ++ p)), (In Leaf p)
(In Leaf (c :: p)), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max c)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (join p p c)), (In Leaf (join p p a2)), (In Leaf (join p p a1))
(In Leaf (insert n0 p)), (In Leaf (insert n p)), (In Leaf (carry p c)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (p ++ p)), (n0 < find_max' n0 p), (n0 < find_max' n p), (n0 < length p), (n < find_max' n0 p)
(n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p), (find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < length p)
(length p < n0), (length p < n), (length p < find_max' n0 p), (length p < find_max' n p), (n0 <= find_max' n0 p), (n0 <= find_max' n p), (n0 <= length p), (n <= find_max' n0 p), (n <= find_max' n p), (n <= length p)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= length p), (length p <= n0), (length p <= n)
(length p <= find_max' n0 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n p), (~ pow2heap n0 c), (~ pow2heap n0 a2), (~ pow2heap n0 a1), (~ pow2heap n c), (~ pow2heap n a2)
(~ pow2heap n a1), (~ pow2heapp n0 n0 c), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n c), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n n0 c), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1)
(~ pow2heapp n n c), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ Permutation p p), (~ In c p), (~ In a2 p), (~ In a1 p), (~ n0 < n0), (~ n0 < n), (~ n < n0)
(~ n < n), (~ n0 <= n0), (~ n0 <= n), (~ n <= n0), (~ n <= n), (p <> p), (c <> c), (c <> a2), (c <> a1), (a2 <> c)
(a2 <> a2), (a2 <> a1), (a1 <> c), (a1 <> a2), (a1 <> a1), (n0 <> n0), (n0 <> n), (n <> n0), (n <> n), (None = Some p)
(c :: p = p), (c :: p = merge p p), (c :: p = heap_delete_max c), (c :: p = heap_delete_max a2), (c :: p = heap_delete_max a1), (c :: p = join p p c), (c :: p = join p p a2), (c :: p = join p p a1), (c :: p = insert n0 p), (c :: p = insert n p)
(c :: p = carry p c), (c :: p = carry p a2), (c :: p = carry p a1), (c :: p = p ++ p), (c :: p = []), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max c), (a2 :: p = heap_delete_max a2), (a2 :: p = heap_delete_max a1)
(a2 :: p = join p p c), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = insert n0 p), (a2 :: p = insert n p), (a2 :: p = carry p c), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = p ++ p), (a2 :: p = [])
(a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max c), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = join p p c), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = insert n0 p), (a1 :: p = insert n p)
(a1 :: p = carry p c), (a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = p ++ p), (a1 :: p = []), (merge p p = p), (merge p p = heap_delete_max c), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = join p p c)
(merge p p = join p p a2), (merge p p = join p p a1), (merge p p = insert n0 p), (merge p p = insert n p), (merge p p = carry p c), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = p ++ p), (heap_delete_max c = p), (heap_delete_max c = carry p c)
(heap_delete_max c = carry p a2), (heap_delete_max c = carry p a1), (heap_delete_max c = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p c), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p c)
(heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = p ++ p), (join p p c = p), (join p p c = heap_delete_max c), (join p p c = heap_delete_max a2), (join p p c = heap_delete_max a1), (join p p c = insert n0 p), (join p p c = insert n p), (join p p c = carry p c)
(join p p c = carry p a2), (join p p c = carry p a1), (join p p c = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max c), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = insert n0 p), (join p p a2 = insert n p), (join p p a2 = carry p c)
(join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max c), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = insert n0 p), (join p p a1 = insert n p), (join p p a1 = carry p c)
(join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max c), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = carry p c), (insert n0 p = carry p a2), (insert n0 p = carry p a1)
(insert n0 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max c), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = carry p c), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = p ++ p), (carry p c = p)
(carry p c = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max c), ([] = heap_delete_max a2)
([] = heap_delete_max a1), ([] = join p p c), ([] = join p p a2), ([] = join p p a1), ([] = insert n0 p), ([] = insert n p), ([] = carry p c), ([] = carry p a2), ([] = carry p a1), ([] = p ++ p)
((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n p), (Node n0 c c = c), (Node n0 c c = a2), (Node n0 c c = a1), (Node n0 c c = smash c c), (Node n0 c c = smash c a2), (Node n0 c c = smash c a1), (Node n0 c c = smash a2 c), (Node n0 c c = smash a2 a2)
(Node n0 c c = smash a2 a1), (Node n0 c c = smash a1 c), (Node n0 c c = smash a1 a2), (Node n0 c c = smash a1 a1), (Node n0 c a2 = c), (Node n0 c a2 = a2), (Node n0 c a2 = a1), (Node n0 c a2 = smash c c), (Node n0 c a2 = smash c a2), (Node n0 c a2 = smash c a1)
(Node n0 c a2 = smash a2 c), (Node n0 c a2 = smash a2 a2), (Node n0 c a2 = smash a2 a1), (Node n0 c a2 = smash a1 c), (Node n0 c a2 = smash a1 a2), (Node n0 c a2 = smash a1 a1), (Node n0 c a1 = c), (Node n0 c a1 = a2), (Node n0 c a1 = a1), (Node n0 c a1 = smash c c)
(Node n0 c a1 = smash c a2), (Node n0 c a1 = smash c a1), (Node n0 c a1 = smash a2 c), (Node n0 c a1 = smash a2 a2), (Node n0 c a1 = smash a2 a1), (Node n0 c a1 = smash a1 c), (Node n0 c a1 = smash a1 a2), (Node n0 c a1 = smash a1 a1), (Node n0 a2 c = c), (Node n0 a2 c = a2)
(Node n0 a2 c = a1), (Node n0 a2 c = smash c c), (Node n0 a2 c = smash c a2), (Node n0 a2 c = smash c a1), (Node n0 a2 c = smash a2 c), (Node n0 a2 c = smash a2 a2), (Node n0 a2 c = smash a2 a1), (Node n0 a2 c = smash a1 c), (Node n0 a2 c = smash a1 a2), (Node n0 a2 c = smash a1 a1)
(Node n0 a2 a2 = c), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = smash c c), (Node n0 a2 a2 = smash c a2), (Node n0 a2 a2 = smash c a1), (Node n0 a2 a2 = smash a2 c), (Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a1 c)
(Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a1 = c), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = smash c c), (Node n0 a2 a1 = smash c a2), (Node n0 a2 a1 = smash c a1), (Node n0 a2 a1 = smash a2 c), (Node n0 a2 a1 = smash a2 a2)
(Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a1 c), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a1 c = c), (Node n0 a1 c = a2), (Node n0 a1 c = a1), (Node n0 a1 c = smash c c), (Node n0 a1 c = smash c a2), (Node n0 a1 c = smash c a1)
(Node n0 a1 c = smash a2 c), (Node n0 a1 c = smash a2 a2), (Node n0 a1 c = smash a2 a1), (Node n0 a1 c = smash a1 c), (Node n0 a1 c = smash a1 a2), (Node n0 a1 c = smash a1 a1), (Node n0 a1 a2 = c), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = smash c c)
(Node n0 a1 a2 = smash c a2), (Node n0 a1 a2 = smash c a1), (Node n0 a1 a2 = smash a2 c), (Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a1 c), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a1 = c), (Node n0 a1 a1 = a2)
(Node n0 a1 a1 = a1), (Node n0 a1 a1 = smash c c), (Node n0 a1 a1 = smash c a2), (Node n0 a1 a1 = smash c a1), (Node n0 a1 a1 = smash a2 c), (Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a1 c), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1)
(Node n c c = c), (Node n c c = a2), (Node n c c = a1), (Node n c c = smash c c), (Node n c c = smash c a2), (Node n c c = smash c a1), (Node n c c = smash a2 c), (Node n c c = smash a2 a2), (Node n c c = smash a2 a1), (Node n c c = smash a1 c)
(Node n c c = smash a1 a2), (Node n c c = smash a1 a1), (Node n c a2 = c), (Node n c a2 = a2), (Node n c a2 = a1), (Node n c a2 = smash c c), (Node n c a2 = smash c a2), (Node n c a2 = smash c a1), (Node n c a2 = smash a2 c), (Node n c a2 = smash a2 a2)
(Node n c a2 = smash a2 a1), (Node n c a2 = smash a1 c), (Node n c a2 = smash a1 a2), (Node n c a2 = smash a1 a1), (Node n c a1 = c), (Node n c a1 = a2), (Node n c a1 = a1), (Node n c a1 = smash c c), (Node n c a1 = smash c a2), (Node n c a1 = smash c a1)
(Node n c a1 = smash a2 c), (Node n c a1 = smash a2 a2), (Node n c a1 = smash a2 a1), (Node n c a1 = smash a1 c), (Node n c a1 = smash a1 a2), (Node n c a1 = smash a1 a1), (Node n a2 c = c), (Node n a2 c = a2), (Node n a2 c = a1), (Node n a2 c = smash c c)
(Node n a2 c = smash c a2), (Node n a2 c = smash c a1), (Node n a2 c = smash a2 c), (Node n a2 c = smash a2 a2), (Node n a2 c = smash a2 a1), (Node n a2 c = smash a1 c), (Node n a2 c = smash a1 a2), (Node n a2 c = smash a1 a1), (Node n a2 a2 = c), (Node n a2 a2 = a2)
(Node n a2 a2 = a1), (Node n a2 a2 = smash c c), (Node n a2 a2 = smash c a2), (Node n a2 a2 = smash c a1), (Node n a2 a2 = smash a2 c), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a1 c), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1)
(Node n a2 a1 = c), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = smash c c), (Node n a2 a1 = smash c a2), (Node n a2 a1 = smash c a1), (Node n a2 a1 = smash a2 c), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a1 c)
(Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a1 c = c), (Node n a1 c = a2), (Node n a1 c = a1), (Node n a1 c = smash c c), (Node n a1 c = smash c a2), (Node n a1 c = smash c a1), (Node n a1 c = smash a2 c), (Node n a1 c = smash a2 a2)
(Node n a1 c = smash a2 a1), (Node n a1 c = smash a1 c), (Node n a1 c = smash a1 a2), (Node n a1 c = smash a1 a1), (Node n a1 a2 = c), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = smash c c), (Node n a1 a2 = smash c a2), (Node n a1 a2 = smash c a1)
(Node n a1 a2 = smash a2 c), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a1 c), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a1 = c), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = smash c c)
(Node n a1 a1 = smash c a2), (Node n a1 a1 = smash c a1), (Node n a1 a1 = smash a2 c), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a1 c), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (smash c c = c), (smash c c = a2)
(smash c c = a1), (smash c a2 = c), (smash c a2 = a2), (smash c a2 = a1), (smash c a1 = c), (smash c a1 = a2), (smash c a1 = a1), (smash a2 c = c), (smash a2 c = a2), (smash a2 c = a1)
(smash a2 a2 = c), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a1 = c), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a1 c = c), (smash a1 c = a2), (smash a1 c = a1), (smash a1 a2 = c)
(smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a1 = c), (smash a1 a1 = a2), (smash a1 a1 = a1), (Leaf = Node n0 c c), (Leaf = Node n0 c a2), (Leaf = Node n0 c a1), (Leaf = Node n0 a2 c), (Leaf = Node n0 a2 a2)
(Leaf = Node n0 a2 a1), (Leaf = Node n0 a1 c), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n c c), (Leaf = Node n c a2), (Leaf = Node n c a1), (Leaf = Node n a2 c), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1)
(Leaf = Node n a1 c), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = smash c c), (Leaf = smash c a2), (Leaf = smash c a1), (Leaf = smash a2 c), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a1 c)
(Leaf = smash a1 a2), (Leaf = smash a1 a1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n p = n0), (find_max' n p = n), (length p = n0), (length p = n), (length p = find_max' n0 p), (length p = find_max' n p)
(Some n0 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n), (None = find_max p), (None = Some c), (None = Some a2), (None = Some a1), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n))
((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n))
((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))

Label: 2 (2)
(priq p), (priq gv0), (priqq n0 p), (priqq n0 gv0), (priqq n p), (priqq n gv0), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 c), (pow2heap n a2)
(pow2heap n a1), (pow2heap n c), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 c), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n c), (pow2heapp n n0 a2), (pow2heapp n n0 a1)
(pow2heapp n n0 c), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n c), (Permutation p p), (Permutation p gv0), (Permutation gv0 p), (Permutation gv0 gv0), (In a2 p), (In a2 gv0)
(In a1 p), (In a1 gv0), (In c p), (In c gv0), (n0 < n0), (n0 < n), (n < n0), (n < n), (n0 <= n0), (n0 <= n)
(n <= n0), (n <= n), (a2 = a2), (a2 = a1), (a2 = c), (a1 = a2), (a1 = a1), (a1 = c), (c = a2), (c = a1)
(c = c), (p = p), (p = gv0), (gv0 = p), (gv0 = gv0), (n0 = n0), (n0 = n), (n = n0), (n = n), (false = (n0 >? n0))
(false = (n0 >? n)), (false = (n >? n0)), (false = (n >? n)), (false = (n0 >=? n0)), (false = (n0 >=? n)), (false = (n >=? n0)), (false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n0))
(true = (n >? n)), (true = (n0 >=? n0)), (true = (n0 >=? n)), (true = (n >=? n0)), (true = (n >=? n)), (Abs p []), (Abs gv0 []), (Abs (a2 :: p) []), (Abs (a2 :: gv0) []), (Abs (a1 :: p) [])
(Abs (a1 :: gv0) []), (Abs (c :: p) []), (Abs (c :: gv0) []), (Abs (merge p p) []), (Abs (merge p gv0) []), (Abs (merge gv0 p) []), (Abs (merge gv0 gv0) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max c) [])
(Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p c) []), (Abs (join p gv0 a2) []), (Abs (join p gv0 a1) []), (Abs (join p gv0 c) []), (Abs (join gv0 p a2) []), (Abs (join gv0 p a1) []), (Abs (join gv0 p c) []), (Abs (join gv0 gv0 a2) [])
(Abs (join gv0 gv0 a1) []), (Abs (join gv0 gv0 c) []), (Abs (insert n0 p) []), (Abs (insert n0 gv0) []), (Abs (insert n p) []), (Abs (insert n gv0) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p c) []), (Abs (carry gv0 a2) [])
(Abs (carry gv0 a1) []), (Abs (carry gv0 c) []), (Abs (p ++ p) []), (Abs (p ++ gv0) []), (Abs (gv0 ++ p) []), (Abs (gv0 ++ gv0) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems gv0 []), (priqueue_elems (a2 :: p) [])
(priqueue_elems (a2 :: gv0) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (a1 :: gv0) []), (priqueue_elems (c :: p) []), (priqueue_elems (c :: gv0) []), (priqueue_elems (merge p p) []), (priqueue_elems (merge p gv0) []), (priqueue_elems (merge gv0 p) []), (priqueue_elems (merge gv0 gv0) []), (priqueue_elems (heap_delete_max a2) [])
(priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max c) []), (priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p c) []), (priqueue_elems (join p gv0 a2) []), (priqueue_elems (join p gv0 a1) []), (priqueue_elems (join p gv0 c) []), (priqueue_elems (join gv0 p a2) []), (priqueue_elems (join gv0 p a1) [])
(priqueue_elems (join gv0 p c) []), (priqueue_elems (join gv0 gv0 a2) []), (priqueue_elems (join gv0 gv0 a1) []), (priqueue_elems (join gv0 gv0 c) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n0 gv0) []), (priqueue_elems (insert n p) []), (priqueue_elems (insert n gv0) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) [])
(priqueue_elems (carry p c) []), (priqueue_elems (carry gv0 a2) []), (priqueue_elems (carry gv0 a1) []), (priqueue_elems (carry gv0 c) []), (priqueue_elems (p ++ p) []), (priqueue_elems (p ++ gv0) []), (priqueue_elems (gv0 ++ p) []), (priqueue_elems (gv0 ++ gv0) []), (priqueue_elems [] []), (tree_elems a2 [])
(tree_elems a1 []), (tree_elems c []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 c) []), (tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 c) []), (tree_elems (Node n0 c a2) []), (tree_elems (Node n0 c a1) [])
(tree_elems (Node n0 c c) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 c) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 c) []), (tree_elems (Node n c a2) []), (tree_elems (Node n c a1) []), (tree_elems (Node n c c) [])
(tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 c) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 c) []), (tree_elems (smash c a2) []), (tree_elems (smash c a1) []), (tree_elems (smash c c) []), (tree_elems Leaf [])
(priq (a2 :: p)), (priq (a2 :: gv0)), (priq (a1 :: p)), (priq (a1 :: gv0)), (priq (c :: p)), (priq (c :: gv0)), (priq (merge p p)), (priq (merge p gv0)), (priq (merge gv0 p)), (priq (merge gv0 gv0))
(priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max c)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p c)), (priq (join p gv0 a2)), (priq (join p gv0 a1)), (priq (join p gv0 c)), (priq (join gv0 p a2))
(priq (join gv0 p a1)), (priq (join gv0 p c)), (priq (join gv0 gv0 a2)), (priq (join gv0 gv0 a1)), (priq (join gv0 gv0 c)), (priq (insert n0 p)), (priq (insert n0 gv0)), (priq (insert n p)), (priq (insert n gv0)), (priq (carry p a2))
(priq (carry p a1)), (priq (carry p c)), (priq (carry gv0 a2)), (priq (carry gv0 a1)), (priq (carry gv0 c)), (priq (p ++ p)), (priq (p ++ gv0)), (priq (gv0 ++ p)), (priq (gv0 ++ gv0)), (priqq n0 (a2 :: p))
(priqq n0 (a2 :: gv0)), (priqq n0 (a1 :: p)), (priqq n0 (a1 :: gv0)), (priqq n0 (c :: p)), (priqq n0 (c :: gv0)), (priqq n0 (merge p p)), (priqq n0 (merge p gv0)), (priqq n0 (merge gv0 p)), (priqq n0 (merge gv0 gv0)), (priqq n0 (heap_delete_max a2))
(priqq n0 (heap_delete_max a1)), (priqq n0 (heap_delete_max c)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p c)), (priqq n0 (join p gv0 a2)), (priqq n0 (join p gv0 a1)), (priqq n0 (join p gv0 c)), (priqq n0 (join gv0 p a2)), (priqq n0 (join gv0 p a1))
(priqq n0 (join gv0 p c)), (priqq n0 (join gv0 gv0 a2)), (priqq n0 (join gv0 gv0 a1)), (priqq n0 (join gv0 gv0 c)), (priqq n0 (insert n0 p)), (priqq n0 (insert n0 gv0)), (priqq n0 (insert n p)), (priqq n0 (insert n gv0)), (priqq n0 (carry p a2)), (priqq n0 (carry p a1))
(priqq n0 (carry p c)), (priqq n0 (carry gv0 a2)), (priqq n0 (carry gv0 a1)), (priqq n0 (carry gv0 c)), (priqq n0 (p ++ p)), (priqq n0 (p ++ gv0)), (priqq n0 (gv0 ++ p)), (priqq n0 (gv0 ++ gv0)), (priqq n (a2 :: p)), (priqq n (a2 :: gv0))
(priqq n (a1 :: p)), (priqq n (a1 :: gv0)), (priqq n (c :: p)), (priqq n (c :: gv0)), (priqq n (merge p p)), (priqq n (merge p gv0)), (priqq n (merge gv0 p)), (priqq n (merge gv0 gv0)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1))
(priqq n (heap_delete_max c)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p c)), (priqq n (join p gv0 a2)), (priqq n (join p gv0 a1)), (priqq n (join p gv0 c)), (priqq n (join gv0 p a2)), (priqq n (join gv0 p a1)), (priqq n (join gv0 p c))
(priqq n (join gv0 gv0 a2)), (priqq n (join gv0 gv0 a1)), (priqq n (join gv0 gv0 c)), (priqq n (insert n0 p)), (priqq n (insert n0 gv0)), (priqq n (insert n p)), (priqq n (insert n gv0)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p c))
(priqq n (carry gv0 a2)), (priqq n (carry gv0 a1)), (priqq n (carry gv0 c)), (priqq n (p ++ p)), (priqq n (p ++ gv0)), (priqq n (gv0 ++ p)), (priqq n (gv0 ++ gv0)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) gv0), (priqq (find_max' n0 p) (a2 :: p))
(priqq (find_max' n0 p) (a2 :: gv0)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (a1 :: gv0)), (priqq (find_max' n0 p) (c :: p)), (priqq (find_max' n0 p) (c :: gv0)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (merge p gv0)), (priqq (find_max' n0 p) (merge gv0 p)), (priqq (find_max' n0 p) (merge gv0 gv0)), (priqq (find_max' n0 p) (heap_delete_max a2))
(priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max c)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p c)), (priqq (find_max' n0 p) (join p gv0 a2)), (priqq (find_max' n0 p) (join p gv0 a1)), (priqq (find_max' n0 p) (join p gv0 c)), (priqq (find_max' n0 p) (join gv0 p a2)), (priqq (find_max' n0 p) (join gv0 p a1))
(priqq (find_max' n0 p) (join gv0 p c)), (priqq (find_max' n0 p) (join gv0 gv0 a2)), (priqq (find_max' n0 p) (join gv0 gv0 a1)), (priqq (find_max' n0 p) (join gv0 gv0 c)), (priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n0 gv0)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (insert n gv0)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1))
(priqq (find_max' n0 p) (carry p c)), (priqq (find_max' n0 p) (carry gv0 a2)), (priqq (find_max' n0 p) (carry gv0 a1)), (priqq (find_max' n0 p) (carry gv0 c)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n0 p) (p ++ gv0)), (priqq (find_max' n0 p) (gv0 ++ p)), (priqq (find_max' n0 p) (gv0 ++ gv0)), (priqq (find_max' n0 gv0) p), (priqq (find_max' n0 gv0) gv0)
(priqq (find_max' n0 gv0) (a2 :: p)), (priqq (find_max' n0 gv0) (a2 :: gv0)), (priqq (find_max' n0 gv0) (a1 :: p)), (priqq (find_max' n0 gv0) (a1 :: gv0)), (priqq (find_max' n0 gv0) (c :: p)), (priqq (find_max' n0 gv0) (c :: gv0)), (priqq (find_max' n0 gv0) (merge p p)), (priqq (find_max' n0 gv0) (merge p gv0)), (priqq (find_max' n0 gv0) (merge gv0 p)), (priqq (find_max' n0 gv0) (merge gv0 gv0))
(priqq (find_max' n0 gv0) (heap_delete_max a2)), (priqq (find_max' n0 gv0) (heap_delete_max a1)), (priqq (find_max' n0 gv0) (heap_delete_max c)), (priqq (find_max' n0 gv0) (join p p a2)), (priqq (find_max' n0 gv0) (join p p a1)), (priqq (find_max' n0 gv0) (join p p c)), (priqq (find_max' n0 gv0) (join p gv0 a2)), (priqq (find_max' n0 gv0) (join p gv0 a1)), (priqq (find_max' n0 gv0) (join p gv0 c)), (priqq (find_max' n0 gv0) (join gv0 p a2))
(priqq (find_max' n0 gv0) (join gv0 p a1)), (priqq (find_max' n0 gv0) (join gv0 p c)), (priqq (find_max' n0 gv0) (join gv0 gv0 a2)), (priqq (find_max' n0 gv0) (join gv0 gv0 a1)), (priqq (find_max' n0 gv0) (join gv0 gv0 c)), (priqq (find_max' n0 gv0) (insert n0 p)), (priqq (find_max' n0 gv0) (insert n0 gv0)), (priqq (find_max' n0 gv0) (insert n p)), (priqq (find_max' n0 gv0) (insert n gv0)), (priqq (find_max' n0 gv0) (carry p a2))
(priqq (find_max' n0 gv0) (carry p a1)), (priqq (find_max' n0 gv0) (carry p c)), (priqq (find_max' n0 gv0) (carry gv0 a2)), (priqq (find_max' n0 gv0) (carry gv0 a1)), (priqq (find_max' n0 gv0) (carry gv0 c)), (priqq (find_max' n0 gv0) (p ++ p)), (priqq (find_max' n0 gv0) (p ++ gv0)), (priqq (find_max' n0 gv0) (gv0 ++ p)), (priqq (find_max' n0 gv0) (gv0 ++ gv0)), (priqq (find_max' n p) p)
(priqq (find_max' n p) gv0), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a2 :: gv0)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (a1 :: gv0)), (priqq (find_max' n p) (c :: p)), (priqq (find_max' n p) (c :: gv0)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (merge p gv0)), (priqq (find_max' n p) (merge gv0 p))
(priqq (find_max' n p) (merge gv0 gv0)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (heap_delete_max c)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p c)), (priqq (find_max' n p) (join p gv0 a2)), (priqq (find_max' n p) (join p gv0 a1)), (priqq (find_max' n p) (join p gv0 c))
(priqq (find_max' n p) (join gv0 p a2)), (priqq (find_max' n p) (join gv0 p a1)), (priqq (find_max' n p) (join gv0 p c)), (priqq (find_max' n p) (join gv0 gv0 a2)), (priqq (find_max' n p) (join gv0 gv0 a1)), (priqq (find_max' n p) (join gv0 gv0 c)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n0 gv0)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (insert n gv0))
(priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p c)), (priqq (find_max' n p) (carry gv0 a2)), (priqq (find_max' n p) (carry gv0 a1)), (priqq (find_max' n p) (carry gv0 c)), (priqq (find_max' n p) (p ++ p)), (priqq (find_max' n p) (p ++ gv0)), (priqq (find_max' n p) (gv0 ++ p)), (priqq (find_max' n p) (gv0 ++ gv0))
(priqq (find_max' n gv0) p), (priqq (find_max' n gv0) gv0), (priqq (find_max' n gv0) (a2 :: p)), (priqq (find_max' n gv0) (a2 :: gv0)), (priqq (find_max' n gv0) (a1 :: p)), (priqq (find_max' n gv0) (a1 :: gv0)), (priqq (find_max' n gv0) (c :: p)), (priqq (find_max' n gv0) (c :: gv0)), (priqq (find_max' n gv0) (merge p p)), (priqq (find_max' n gv0) (merge p gv0))
(priqq (find_max' n gv0) (merge gv0 p)), (priqq (find_max' n gv0) (merge gv0 gv0)), (priqq (find_max' n gv0) (heap_delete_max a2)), (priqq (find_max' n gv0) (heap_delete_max a1)), (priqq (find_max' n gv0) (heap_delete_max c)), (priqq (find_max' n gv0) (join p p a2)), (priqq (find_max' n gv0) (join p p a1)), (priqq (find_max' n gv0) (join p p c)), (priqq (find_max' n gv0) (join p gv0 a2)), (priqq (find_max' n gv0) (join p gv0 a1))
(priqq (find_max' n gv0) (join p gv0 c)), (priqq (find_max' n gv0) (join gv0 p a2)), (priqq (find_max' n gv0) (join gv0 p a1)), (priqq (find_max' n gv0) (join gv0 p c)), (priqq (find_max' n gv0) (join gv0 gv0 a2)), (priqq (find_max' n gv0) (join gv0 gv0 a1)), (priqq (find_max' n gv0) (join gv0 gv0 c)), (priqq (find_max' n gv0) (insert n0 p)), (priqq (find_max' n gv0) (insert n0 gv0)), (priqq (find_max' n gv0) (insert n p))
(priqq (find_max' n gv0) (insert n gv0)), (priqq (find_max' n gv0) (carry p a2)), (priqq (find_max' n gv0) (carry p a1)), (priqq (find_max' n gv0) (carry p c)), (priqq (find_max' n gv0) (carry gv0 a2)), (priqq (find_max' n gv0) (carry gv0 a1)), (priqq (find_max' n gv0) (carry gv0 c)), (priqq (find_max' n gv0) (p ++ p)), (priqq (find_max' n gv0) (p ++ gv0)), (priqq (find_max' n gv0) (gv0 ++ p))
(priqq (find_max' n gv0) (gv0 ++ gv0)), (priqq (length p) p), (priqq (length p) gv0), (priqq (length p) (a2 :: p)), (priqq (length p) (a2 :: gv0)), (priqq (length p) (a1 :: p)), (priqq (length p) (a1 :: gv0)), (priqq (length p) (c :: p)), (priqq (length p) (c :: gv0)), (priqq (length p) (merge p p))
(priqq (length p) (merge p gv0)), (priqq (length p) (merge gv0 p)), (priqq (length p) (merge gv0 gv0)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (heap_delete_max c)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p c)), (priqq (length p) (join p gv0 a2))
(priqq (length p) (join p gv0 a1)), (priqq (length p) (join p gv0 c)), (priqq (length p) (join gv0 p a2)), (priqq (length p) (join gv0 p a1)), (priqq (length p) (join gv0 p c)), (priqq (length p) (join gv0 gv0 a2)), (priqq (length p) (join gv0 gv0 a1)), (priqq (length p) (join gv0 gv0 c)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n0 gv0))
(priqq (length p) (insert n p)), (priqq (length p) (insert n gv0)), (priqq (length p) (carry p a2)), (priqq (length p) (carry p a1)), (priqq (length p) (carry p c)), (priqq (length p) (carry gv0 a2)), (priqq (length p) (carry gv0 a1)), (priqq (length p) (carry gv0 c)), (priqq (length p) (p ++ p)), (priqq (length p) (p ++ gv0))
(priqq (length p) (gv0 ++ p)), (priqq (length p) (gv0 ++ gv0)), (priqq (length gv0) p), (priqq (length gv0) gv0), (priqq (length gv0) (a2 :: p)), (priqq (length gv0) (a2 :: gv0)), (priqq (length gv0) (a1 :: p)), (priqq (length gv0) (a1 :: gv0)), (priqq (length gv0) (c :: p)), (priqq (length gv0) (c :: gv0))
(priqq (length gv0) (merge p p)), (priqq (length gv0) (merge p gv0)), (priqq (length gv0) (merge gv0 p)), (priqq (length gv0) (merge gv0 gv0)), (priqq (length gv0) (heap_delete_max a2)), (priqq (length gv0) (heap_delete_max a1)), (priqq (length gv0) (heap_delete_max c)), (priqq (length gv0) (join p p a2)), (priqq (length gv0) (join p p a1)), (priqq (length gv0) (join p p c))
(priqq (length gv0) (join p gv0 a2)), (priqq (length gv0) (join p gv0 a1)), (priqq (length gv0) (join p gv0 c)), (priqq (length gv0) (join gv0 p a2)), (priqq (length gv0) (join gv0 p a1)), (priqq (length gv0) (join gv0 p c)), (priqq (length gv0) (join gv0 gv0 a2)), (priqq (length gv0) (join gv0 gv0 a1)), (priqq (length gv0) (join gv0 gv0 c)), (priqq (length gv0) (insert n0 p))
(priqq (length gv0) (insert n0 gv0)), (priqq (length gv0) (insert n p)), (priqq (length gv0) (insert n gv0)), (priqq (length gv0) (carry p a2)), (priqq (length gv0) (carry p a1)), (priqq (length gv0) (carry p c)), (priqq (length gv0) (carry gv0 a2)), (priqq (length gv0) (carry gv0 a1)), (priqq (length gv0) (carry gv0 c)), (priqq (length gv0) (p ++ p))
(priqq (length gv0) (p ++ gv0)), (priqq (length gv0) (gv0 ++ p)), (priqq (length gv0) (gv0 ++ gv0)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 c)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n0 a1 c)), (pow2heap n0 (Node n0 c a2))
(pow2heap n0 (Node n0 c a1)), (pow2heap n0 (Node n0 c c)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 c)), (pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 c)), (pow2heap n0 (Node n c a2)), (pow2heap n0 (Node n c a1))
(pow2heap n0 (Node n c c)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 c)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 c)), (pow2heap n0 (smash c a2)), (pow2heap n0 (smash c a1)), (pow2heap n0 (smash c c))
(pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 c)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 c)), (pow2heap n (Node n0 c a2)), (pow2heap n (Node n0 c a1)), (pow2heap n (Node n0 c c)), (pow2heap n (Node n a2 a2))
(pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 c)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 c)), (pow2heap n (Node n c a2)), (pow2heap n (Node n c a1)), (pow2heap n (Node n c c)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a2 c)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 c)), (pow2heap n (smash c a2)), (pow2heap n (smash c a1)), (pow2heap n (smash c c)), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) c)
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c)), (pow2heap (find_max' n0 p) (Node n0 c a2)), (pow2heap (find_max' n0 p) (Node n0 c a1)), (pow2heap (find_max' n0 p) (Node n0 c c)), (pow2heap (find_max' n0 p) (Node n a2 a2))
(pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 c)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 c)), (pow2heap (find_max' n0 p) (Node n c a2)), (pow2heap (find_max' n0 p) (Node n c a1)), (pow2heap (find_max' n0 p) (Node n c c)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1))
(pow2heap (find_max' n0 p) (smash a2 c)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 c)), (pow2heap (find_max' n0 p) (smash c a2)), (pow2heap (find_max' n0 p) (smash c a1)), (pow2heap (find_max' n0 p) (smash c c)), (pow2heap (find_max' n0 gv0) a2), (pow2heap (find_max' n0 gv0) a1), (pow2heap (find_max' n0 gv0) c)
(pow2heap (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heap (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heap (find_max' n0 gv0) (Node n0 a2 c)), (pow2heap (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heap (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heap (find_max' n0 gv0) (Node n0 a1 c)), (pow2heap (find_max' n0 gv0) (Node n0 c a2)), (pow2heap (find_max' n0 gv0) (Node n0 c a1)), (pow2heap (find_max' n0 gv0) (Node n0 c c)), (pow2heap (find_max' n0 gv0) (Node n a2 a2))
(pow2heap (find_max' n0 gv0) (Node n a2 a1)), (pow2heap (find_max' n0 gv0) (Node n a2 c)), (pow2heap (find_max' n0 gv0) (Node n a1 a2)), (pow2heap (find_max' n0 gv0) (Node n a1 a1)), (pow2heap (find_max' n0 gv0) (Node n a1 c)), (pow2heap (find_max' n0 gv0) (Node n c a2)), (pow2heap (find_max' n0 gv0) (Node n c a1)), (pow2heap (find_max' n0 gv0) (Node n c c)), (pow2heap (find_max' n0 gv0) (smash a2 a2)), (pow2heap (find_max' n0 gv0) (smash a2 a1))
(pow2heap (find_max' n0 gv0) (smash a2 c)), (pow2heap (find_max' n0 gv0) (smash a1 a2)), (pow2heap (find_max' n0 gv0) (smash a1 a1)), (pow2heap (find_max' n0 gv0) (smash a1 c)), (pow2heap (find_max' n0 gv0) (smash c a2)), (pow2heap (find_max' n0 gv0) (smash c a1)), (pow2heap (find_max' n0 gv0) (smash c c)), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) c)
(pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 c)), (pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 c)), (pow2heap (find_max' n p) (Node n0 c a2)), (pow2heap (find_max' n p) (Node n0 c a1)), (pow2heap (find_max' n p) (Node n0 c c)), (pow2heap (find_max' n p) (Node n a2 a2))
(pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a2 c)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 c)), (pow2heap (find_max' n p) (Node n c a2)), (pow2heap (find_max' n p) (Node n c a1)), (pow2heap (find_max' n p) (Node n c c)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1))
(pow2heap (find_max' n p) (smash a2 c)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (find_max' n p) (smash a1 c)), (pow2heap (find_max' n p) (smash c a2)), (pow2heap (find_max' n p) (smash c a1)), (pow2heap (find_max' n p) (smash c c)), (pow2heap (find_max' n gv0) a2), (pow2heap (find_max' n gv0) a1), (pow2heap (find_max' n gv0) c)
(pow2heap (find_max' n gv0) (Node n0 a2 a2)), (pow2heap (find_max' n gv0) (Node n0 a2 a1)), (pow2heap (find_max' n gv0) (Node n0 a2 c)), (pow2heap (find_max' n gv0) (Node n0 a1 a2)), (pow2heap (find_max' n gv0) (Node n0 a1 a1)), (pow2heap (find_max' n gv0) (Node n0 a1 c)), (pow2heap (find_max' n gv0) (Node n0 c a2)), (pow2heap (find_max' n gv0) (Node n0 c a1)), (pow2heap (find_max' n gv0) (Node n0 c c)), (pow2heap (find_max' n gv0) (Node n a2 a2))
(pow2heap (find_max' n gv0) (Node n a2 a1)), (pow2heap (find_max' n gv0) (Node n a2 c)), (pow2heap (find_max' n gv0) (Node n a1 a2)), (pow2heap (find_max' n gv0) (Node n a1 a1)), (pow2heap (find_max' n gv0) (Node n a1 c)), (pow2heap (find_max' n gv0) (Node n c a2)), (pow2heap (find_max' n gv0) (Node n c a1)), (pow2heap (find_max' n gv0) (Node n c c)), (pow2heap (find_max' n gv0) (smash a2 a2)), (pow2heap (find_max' n gv0) (smash a2 a1))
(pow2heap (find_max' n gv0) (smash a2 c)), (pow2heap (find_max' n gv0) (smash a1 a2)), (pow2heap (find_max' n gv0) (smash a1 a1)), (pow2heap (find_max' n gv0) (smash a1 c)), (pow2heap (find_max' n gv0) (smash c a2)), (pow2heap (find_max' n gv0) (smash c a1)), (pow2heap (find_max' n gv0) (smash c c)), (pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) c)
(pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 c)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n0 a1 c)), (pow2heap (length p) (Node n0 c a2)), (pow2heap (length p) (Node n0 c a1)), (pow2heap (length p) (Node n0 c c)), (pow2heap (length p) (Node n a2 a2))
(pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 c)), (pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 c)), (pow2heap (length p) (Node n c a2)), (pow2heap (length p) (Node n c a1)), (pow2heap (length p) (Node n c c)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1))
(pow2heap (length p) (smash a2 c)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 c)), (pow2heap (length p) (smash c a2)), (pow2heap (length p) (smash c a1)), (pow2heap (length p) (smash c c)), (pow2heap (length gv0) a2), (pow2heap (length gv0) a1), (pow2heap (length gv0) c)
(pow2heap (length gv0) (Node n0 a2 a2)), (pow2heap (length gv0) (Node n0 a2 a1)), (pow2heap (length gv0) (Node n0 a2 c)), (pow2heap (length gv0) (Node n0 a1 a2)), (pow2heap (length gv0) (Node n0 a1 a1)), (pow2heap (length gv0) (Node n0 a1 c)), (pow2heap (length gv0) (Node n0 c a2)), (pow2heap (length gv0) (Node n0 c a1)), (pow2heap (length gv0) (Node n0 c c)), (pow2heap (length gv0) (Node n a2 a2))
(pow2heap (length gv0) (Node n a2 a1)), (pow2heap (length gv0) (Node n a2 c)), (pow2heap (length gv0) (Node n a1 a2)), (pow2heap (length gv0) (Node n a1 a1)), (pow2heap (length gv0) (Node n a1 c)), (pow2heap (length gv0) (Node n c a2)), (pow2heap (length gv0) (Node n c a1)), (pow2heap (length gv0) (Node n c c)), (pow2heap (length gv0) (smash a2 a2)), (pow2heap (length gv0) (smash a2 a1))
(pow2heap (length gv0) (smash a2 c)), (pow2heap (length gv0) (smash a1 a2)), (pow2heap (length gv0) (smash a1 a1)), (pow2heap (length gv0) (smash a1 c)), (pow2heap (length gv0) (smash c a2)), (pow2heap (length gv0) (smash c a1)), (pow2heap (length gv0) (smash c c)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1)), (pow2heapp n0 n0 (Node n0 a2 c))
(pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 c)), (pow2heapp n0 n0 (Node n0 c a2)), (pow2heapp n0 n0 (Node n0 c a1)), (pow2heapp n0 n0 (Node n0 c c)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 c)), (pow2heapp n0 n0 (Node n a1 a2))
(pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (Node n a1 c)), (pow2heapp n0 n0 (Node n c a2)), (pow2heapp n0 n0 (Node n c a1)), (pow2heapp n0 n0 (Node n c c)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a2 c)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1))
(pow2heapp n0 n0 (smash a1 c)), (pow2heapp n0 n0 (smash c a2)), (pow2heapp n0 n0 (smash c a1)), (pow2heapp n0 n0 (smash c c)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a2 c)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1))
(pow2heapp n0 n (Node n0 a1 c)), (pow2heapp n0 n (Node n0 c a2)), (pow2heapp n0 n (Node n0 c a1)), (pow2heapp n0 n (Node n0 c c)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 c)), (pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 c))
(pow2heapp n0 n (Node n c a2)), (pow2heapp n0 n (Node n c a1)), (pow2heapp n0 n (Node n c c)), (pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 c)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 c)), (pow2heapp n0 n (smash c a2))
(pow2heapp n0 n (smash c a1)), (pow2heapp n0 n (smash c c)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) c), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c c)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1))
(pow2heapp n0 (find_max' n0 p) (Node n a1 c)), (pow2heapp n0 (find_max' n0 p) (Node n c a2)), (pow2heapp n0 (find_max' n0 p) (Node n c a1)), (pow2heapp n0 (find_max' n0 p) (Node n c c)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c))
(pow2heapp n0 (find_max' n0 p) (smash c a2)), (pow2heapp n0 (find_max' n0 p) (smash c a1)), (pow2heapp n0 (find_max' n0 p) (smash c c)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n0 gv0) a2), (pow2heapp n0 (find_max' n0 gv0) a1), (pow2heapp n0 (find_max' n0 gv0) c), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a2 c))
(pow2heapp n0 (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n0 c c)), (pow2heapp n0 (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n a2 c)), (pow2heapp n0 (find_max' n0 gv0) (Node n a1 a2))
(pow2heapp n0 (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n a1 c)), (pow2heapp n0 (find_max' n0 gv0) (Node n c a2)), (pow2heapp n0 (find_max' n0 gv0) (Node n c a1)), (pow2heapp n0 (find_max' n0 gv0) (Node n c c)), (pow2heapp n0 (find_max' n0 gv0) (smash a2 a2)), (pow2heapp n0 (find_max' n0 gv0) (smash a2 a1)), (pow2heapp n0 (find_max' n0 gv0) (smash a2 c)), (pow2heapp n0 (find_max' n0 gv0) (smash a1 a2)), (pow2heapp n0 (find_max' n0 gv0) (smash a1 a1))
(pow2heapp n0 (find_max' n0 gv0) (smash a1 c)), (pow2heapp n0 (find_max' n0 gv0) (smash c a2)), (pow2heapp n0 (find_max' n0 gv0) (smash c a1)), (pow2heapp n0 (find_max' n0 gv0) (smash c c)), (pow2heapp n0 (find_max' n0 gv0) Leaf), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) c), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1))
(pow2heapp n0 (find_max' n p) (Node n0 a2 c)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c)), (pow2heapp n0 (find_max' n p) (Node n0 c a2)), (pow2heapp n0 (find_max' n p) (Node n0 c a1)), (pow2heapp n0 (find_max' n p) (Node n0 c c)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c))
(pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 c)), (pow2heapp n0 (find_max' n p) (Node n c a2)), (pow2heapp n0 (find_max' n p) (Node n c a1)), (pow2heapp n0 (find_max' n p) (Node n c c)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a2 c)), (pow2heapp n0 (find_max' n p) (smash a1 a2))
(pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c)), (pow2heapp n0 (find_max' n p) (smash c a2)), (pow2heapp n0 (find_max' n p) (smash c a1)), (pow2heapp n0 (find_max' n p) (smash c c)), (pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (find_max' n gv0) a2), (pow2heapp n0 (find_max' n gv0) a1), (pow2heapp n0 (find_max' n gv0) c), (pow2heapp n0 (find_max' n gv0) (Node n0 a2 a2))
(pow2heapp n0 (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n gv0) (Node n0 a2 c)), (pow2heapp n0 (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n gv0) (Node n0 a1 c)), (pow2heapp n0 (find_max' n gv0) (Node n0 c a2)), (pow2heapp n0 (find_max' n gv0) (Node n0 c a1)), (pow2heapp n0 (find_max' n gv0) (Node n0 c c)), (pow2heapp n0 (find_max' n gv0) (Node n a2 a2)), (pow2heapp n0 (find_max' n gv0) (Node n a2 a1))
(pow2heapp n0 (find_max' n gv0) (Node n a2 c)), (pow2heapp n0 (find_max' n gv0) (Node n a1 a2)), (pow2heapp n0 (find_max' n gv0) (Node n a1 a1)), (pow2heapp n0 (find_max' n gv0) (Node n a1 c)), (pow2heapp n0 (find_max' n gv0) (Node n c a2)), (pow2heapp n0 (find_max' n gv0) (Node n c a1)), (pow2heapp n0 (find_max' n gv0) (Node n c c)), (pow2heapp n0 (find_max' n gv0) (smash a2 a2)), (pow2heapp n0 (find_max' n gv0) (smash a2 a1)), (pow2heapp n0 (find_max' n gv0) (smash a2 c))
(pow2heapp n0 (find_max' n gv0) (smash a1 a2)), (pow2heapp n0 (find_max' n gv0) (smash a1 a1)), (pow2heapp n0 (find_max' n gv0) (smash a1 c)), (pow2heapp n0 (find_max' n gv0) (smash c a2)), (pow2heapp n0 (find_max' n gv0) (smash c a1)), (pow2heapp n0 (find_max' n gv0) (smash c c)), (pow2heapp n0 (find_max' n gv0) Leaf), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) c)
(pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 c)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n0 a1 c)), (pow2heapp n0 (length p) (Node n0 c a2)), (pow2heapp n0 (length p) (Node n0 c a1)), (pow2heapp n0 (length p) (Node n0 c c)), (pow2heapp n0 (length p) (Node n a2 a2))
(pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a2 c)), (pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 c)), (pow2heapp n0 (length p) (Node n c a2)), (pow2heapp n0 (length p) (Node n c a1)), (pow2heapp n0 (length p) (Node n c c)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1))
(pow2heapp n0 (length p) (smash a2 c)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) (smash a1 c)), (pow2heapp n0 (length p) (smash c a2)), (pow2heapp n0 (length p) (smash c a1)), (pow2heapp n0 (length p) (smash c c)), (pow2heapp n0 (length p) Leaf), (pow2heapp n0 (length gv0) a2), (pow2heapp n0 (length gv0) a1)
(pow2heapp n0 (length gv0) c), (pow2heapp n0 (length gv0) (Node n0 a2 a2)), (pow2heapp n0 (length gv0) (Node n0 a2 a1)), (pow2heapp n0 (length gv0) (Node n0 a2 c)), (pow2heapp n0 (length gv0) (Node n0 a1 a2)), (pow2heapp n0 (length gv0) (Node n0 a1 a1)), (pow2heapp n0 (length gv0) (Node n0 a1 c)), (pow2heapp n0 (length gv0) (Node n0 c a2)), (pow2heapp n0 (length gv0) (Node n0 c a1)), (pow2heapp n0 (length gv0) (Node n0 c c))
(pow2heapp n0 (length gv0) (Node n a2 a2)), (pow2heapp n0 (length gv0) (Node n a2 a1)), (pow2heapp n0 (length gv0) (Node n a2 c)), (pow2heapp n0 (length gv0) (Node n a1 a2)), (pow2heapp n0 (length gv0) (Node n a1 a1)), (pow2heapp n0 (length gv0) (Node n a1 c)), (pow2heapp n0 (length gv0) (Node n c a2)), (pow2heapp n0 (length gv0) (Node n c a1)), (pow2heapp n0 (length gv0) (Node n c c)), (pow2heapp n0 (length gv0) (smash a2 a2))
(pow2heapp n0 (length gv0) (smash a2 a1)), (pow2heapp n0 (length gv0) (smash a2 c)), (pow2heapp n0 (length gv0) (smash a1 a2)), (pow2heapp n0 (length gv0) (smash a1 a1)), (pow2heapp n0 (length gv0) (smash a1 c)), (pow2heapp n0 (length gv0) (smash c a2)), (pow2heapp n0 (length gv0) (smash c a1)), (pow2heapp n0 (length gv0) (smash c c)), (pow2heapp n0 (length gv0) Leaf), (pow2heapp n n0 (Node n0 a2 a2))
(pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 c)), (pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 c)), (pow2heapp n n0 (Node n0 c a2)), (pow2heapp n n0 (Node n0 c a1)), (pow2heapp n n0 (Node n0 c c)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1))
(pow2heapp n n0 (Node n a2 c)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 c)), (pow2heapp n n0 (Node n c a2)), (pow2heapp n n0 (Node n c a1)), (pow2heapp n n0 (Node n c c)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a2 c))
(pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 c)), (pow2heapp n n0 (smash c a2)), (pow2heapp n n0 (smash c a1)), (pow2heapp n n0 (smash c c)), (pow2heapp n n0 Leaf), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 c))
(pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 c)), (pow2heapp n n (Node n0 c a2)), (pow2heapp n n (Node n0 c a1)), (pow2heapp n n (Node n0 c c)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 c)), (pow2heapp n n (Node n a1 a2))
(pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 c)), (pow2heapp n n (Node n c a2)), (pow2heapp n n (Node n c a1)), (pow2heapp n n (Node n c c)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 c)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1))
(pow2heapp n n (smash a1 c)), (pow2heapp n n (smash c a2)), (pow2heapp n n (smash c a1)), (pow2heapp n n (smash c c)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) c), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 a2 c)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c)), (pow2heapp n (find_max' n0 p) (Node n0 c a2)), (pow2heapp n (find_max' n0 p) (Node n0 c a1)), (pow2heapp n (find_max' n0 p) (Node n0 c c)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c))
(pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c)), (pow2heapp n (find_max' n0 p) (Node n c a2)), (pow2heapp n (find_max' n0 p) (Node n c a1)), (pow2heapp n (find_max' n0 p) (Node n c c)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a2 c)), (pow2heapp n (find_max' n0 p) (smash a1 a2))
(pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 c)), (pow2heapp n (find_max' n0 p) (smash c a2)), (pow2heapp n (find_max' n0 p) (smash c a1)), (pow2heapp n (find_max' n0 p) (smash c c)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n0 gv0) a2), (pow2heapp n (find_max' n0 gv0) a1), (pow2heapp n (find_max' n0 gv0) c), (pow2heapp n (find_max' n0 gv0) (Node n0 a2 a2))
(pow2heapp n (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 gv0) (Node n0 a2 c)), (pow2heapp n (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp n (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp n (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp n (find_max' n0 gv0) (Node n0 c c)), (pow2heapp n (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp n (find_max' n0 gv0) (Node n a2 a1))
(pow2heapp n (find_max' n0 gv0) (Node n a2 c)), (pow2heapp n (find_max' n0 gv0) (Node n a1 a2)), (pow2heapp n (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp n (find_max' n0 gv0) (Node n a1 c)), (pow2heapp n (find_max' n0 gv0) (Node n c a2)), (pow2heapp n (find_max' n0 gv0) (Node n c a1)), (pow2heapp n (find_max' n0 gv0) (Node n c c)), (pow2heapp n (find_max' n0 gv0) (smash a2 a2)), (pow2heapp n (find_max' n0 gv0) (smash a2 a1)), (pow2heapp n (find_max' n0 gv0) (smash a2 c))
(pow2heapp n (find_max' n0 gv0) (smash a1 a2)), (pow2heapp n (find_max' n0 gv0) (smash a1 a1)), (pow2heapp n (find_max' n0 gv0) (smash a1 c)), (pow2heapp n (find_max' n0 gv0) (smash c a2)), (pow2heapp n (find_max' n0 gv0) (smash c a1)), (pow2heapp n (find_max' n0 gv0) (smash c c)), (pow2heapp n (find_max' n0 gv0) Leaf), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) c)
(pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c)), (pow2heapp n (find_max' n p) (Node n0 a1 a2)), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c)), (pow2heapp n (find_max' n p) (Node n0 c a2)), (pow2heapp n (find_max' n p) (Node n0 c a1)), (pow2heapp n (find_max' n p) (Node n0 c c)), (pow2heapp n (find_max' n p) (Node n a2 a2))
(pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 c)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 c)), (pow2heapp n (find_max' n p) (Node n c a2)), (pow2heapp n (find_max' n p) (Node n c a1)), (pow2heapp n (find_max' n p) (Node n c c)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1))
(pow2heapp n (find_max' n p) (smash a2 c)), (pow2heapp n (find_max' n p) (smash a1 a2)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 c)), (pow2heapp n (find_max' n p) (smash c a2)), (pow2heapp n (find_max' n p) (smash c a1)), (pow2heapp n (find_max' n p) (smash c c)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (find_max' n gv0) a2), (pow2heapp n (find_max' n gv0) a1)
(pow2heapp n (find_max' n gv0) c), (pow2heapp n (find_max' n gv0) (Node n0 a2 a2)), (pow2heapp n (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp n (find_max' n gv0) (Node n0 a2 c)), (pow2heapp n (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp n (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp n (find_max' n gv0) (Node n0 a1 c)), (pow2heapp n (find_max' n gv0) (Node n0 c a2)), (pow2heapp n (find_max' n gv0) (Node n0 c a1)), (pow2heapp n (find_max' n gv0) (Node n0 c c))
(pow2heapp n (find_max' n gv0) (Node n a2 a2)), (pow2heapp n (find_max' n gv0) (Node n a2 a1)), (pow2heapp n (find_max' n gv0) (Node n a2 c)), (pow2heapp n (find_max' n gv0) (Node n a1 a2)), (pow2heapp n (find_max' n gv0) (Node n a1 a1)), (pow2heapp n (find_max' n gv0) (Node n a1 c)), (pow2heapp n (find_max' n gv0) (Node n c a2)), (pow2heapp n (find_max' n gv0) (Node n c a1)), (pow2heapp n (find_max' n gv0) (Node n c c)), (pow2heapp n (find_max' n gv0) (smash a2 a2))
(pow2heapp n (find_max' n gv0) (smash a2 a1)), (pow2heapp n (find_max' n gv0) (smash a2 c)), (pow2heapp n (find_max' n gv0) (smash a1 a2)), (pow2heapp n (find_max' n gv0) (smash a1 a1)), (pow2heapp n (find_max' n gv0) (smash a1 c)), (pow2heapp n (find_max' n gv0) (smash c a2)), (pow2heapp n (find_max' n gv0) (smash c a1)), (pow2heapp n (find_max' n gv0) (smash c c)), (pow2heapp n (find_max' n gv0) Leaf), (pow2heapp n (length p) a2)
(pow2heapp n (length p) a1), (pow2heapp n (length p) c), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 c)), (pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 c)), (pow2heapp n (length p) (Node n0 c a2)), (pow2heapp n (length p) (Node n0 c a1))
(pow2heapp n (length p) (Node n0 c c)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a2 c)), (pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 c)), (pow2heapp n (length p) (Node n c a2)), (pow2heapp n (length p) (Node n c a1)), (pow2heapp n (length p) (Node n c c))
(pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 c)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) (smash a1 c)), (pow2heapp n (length p) (smash c a2)), (pow2heapp n (length p) (smash c a1)), (pow2heapp n (length p) (smash c c)), (pow2heapp n (length p) Leaf)
(pow2heapp n (length gv0) a2), (pow2heapp n (length gv0) a1), (pow2heapp n (length gv0) c), (pow2heapp n (length gv0) (Node n0 a2 a2)), (pow2heapp n (length gv0) (Node n0 a2 a1)), (pow2heapp n (length gv0) (Node n0 a2 c)), (pow2heapp n (length gv0) (Node n0 a1 a2)), (pow2heapp n (length gv0) (Node n0 a1 a1)), (pow2heapp n (length gv0) (Node n0 a1 c)), (pow2heapp n (length gv0) (Node n0 c a2))
(pow2heapp n (length gv0) (Node n0 c a1)), (pow2heapp n (length gv0) (Node n0 c c)), (pow2heapp n (length gv0) (Node n a2 a2)), (pow2heapp n (length gv0) (Node n a2 a1)), (pow2heapp n (length gv0) (Node n a2 c)), (pow2heapp n (length gv0) (Node n a1 a2)), (pow2heapp n (length gv0) (Node n a1 a1)), (pow2heapp n (length gv0) (Node n a1 c)), (pow2heapp n (length gv0) (Node n c a2)), (pow2heapp n (length gv0) (Node n c a1))
(pow2heapp n (length gv0) (Node n c c)), (pow2heapp n (length gv0) (smash a2 a2)), (pow2heapp n (length gv0) (smash a2 a1)), (pow2heapp n (length gv0) (smash a2 c)), (pow2heapp n (length gv0) (smash a1 a2)), (pow2heapp n (length gv0) (smash a1 a1)), (pow2heapp n (length gv0) (smash a1 c)), (pow2heapp n (length gv0) (smash c a2)), (pow2heapp n (length gv0) (smash c a1)), (pow2heapp n (length gv0) (smash c c))
(pow2heapp n (length gv0) Leaf), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 c), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c))
(pow2heapp (find_max' n0 p) n0 (Node n0 c a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c c)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c)), (pow2heapp (find_max' n0 p) n0 (Node n c a2))
(pow2heapp (find_max' n0 p) n0 (Node n c a1)), (pow2heapp (find_max' n0 p) n0 (Node n c c)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c)), (pow2heapp (find_max' n0 p) n0 (smash c a2)), (pow2heapp (find_max' n0 p) n0 (smash c a1))
(pow2heapp (find_max' n0 p) n0 (smash c c)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n c), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1))
(pow2heapp (find_max' n0 p) n (Node n0 a1 c)), (pow2heapp (find_max' n0 p) n (Node n0 c a2)), (pow2heapp (find_max' n0 p) n (Node n0 c a1)), (pow2heapp (find_max' n0 p) n (Node n0 c c)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c)), (pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 c))
(pow2heapp (find_max' n0 p) n (Node n c a2)), (pow2heapp (find_max' n0 p) n (Node n c a1)), (pow2heapp (find_max' n0 p) n (Node n c c)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 c)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c)), (pow2heapp (find_max' n0 p) n (smash c a2))
(pow2heapp (find_max' n0 p) n (smash c a1)), (pow2heapp (find_max' n0 p) n (smash c c)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) c), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) a2), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) a1), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) c), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a2 c))
(pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) c), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n gv0) a2), (pow2heapp (find_max' n0 p) (find_max' n gv0) a1), (pow2heapp (find_max' n0 p) (find_max' n gv0) c), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n0 c c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a2 c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n a1 c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n c a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n c a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a2 c))
(pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash a1 c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash c a2)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash c a1)), (pow2heapp (find_max' n0 p) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n0 p) (find_max' n gv0) Leaf), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) c)
(pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c c)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c)), (pow2heapp (find_max' n0 p) (length p) (Node n c a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c c)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (length p) (smash a2 c)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c)), (pow2heapp (find_max' n0 p) (length p) (smash c a2)), (pow2heapp (find_max' n0 p) (length p) (smash c a1)), (pow2heapp (find_max' n0 p) (length p) (smash c c)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n0 p) (length gv0) a2), (pow2heapp (find_max' n0 p) (length gv0) a1)
(pow2heapp (find_max' n0 p) (length gv0) c), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a2 c)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n0 c c))
(pow2heapp (find_max' n0 p) (length gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a2 c)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n a1 c)), (pow2heapp (find_max' n0 p) (length gv0) (Node n c a2)), (pow2heapp (find_max' n0 p) (length gv0) (Node n c a1)), (pow2heapp (find_max' n0 p) (length gv0) (Node n c c)), (pow2heapp (find_max' n0 p) (length gv0) (smash a2 a2))
(pow2heapp (find_max' n0 p) (length gv0) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length gv0) (smash a2 c)), (pow2heapp (find_max' n0 p) (length gv0) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length gv0) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length gv0) (smash a1 c)), (pow2heapp (find_max' n0 p) (length gv0) (smash c a2)), (pow2heapp (find_max' n0 p) (length gv0) (smash c a1)), (pow2heapp (find_max' n0 p) (length gv0) (smash c c)), (pow2heapp (find_max' n0 p) (length gv0) Leaf), (pow2heapp (find_max' n0 gv0) n0 a2)
(pow2heapp (find_max' n0 gv0) n0 a1), (pow2heapp (find_max' n0 gv0) n0 c), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n0 c a1))
(pow2heapp (find_max' n0 gv0) n0 (Node n0 c c)), (pow2heapp (find_max' n0 gv0) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n a2 c)), (pow2heapp (find_max' n0 gv0) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n a1 c)), (pow2heapp (find_max' n0 gv0) n0 (Node n c a2)), (pow2heapp (find_max' n0 gv0) n0 (Node n c a1)), (pow2heapp (find_max' n0 gv0) n0 (Node n c c))
(pow2heapp (find_max' n0 gv0) n0 (smash a2 a2)), (pow2heapp (find_max' n0 gv0) n0 (smash a2 a1)), (pow2heapp (find_max' n0 gv0) n0 (smash a2 c)), (pow2heapp (find_max' n0 gv0) n0 (smash a1 a2)), (pow2heapp (find_max' n0 gv0) n0 (smash a1 a1)), (pow2heapp (find_max' n0 gv0) n0 (smash a1 c)), (pow2heapp (find_max' n0 gv0) n0 (smash c a2)), (pow2heapp (find_max' n0 gv0) n0 (smash c a1)), (pow2heapp (find_max' n0 gv0) n0 (smash c c)), (pow2heapp (find_max' n0 gv0) n0 Leaf)
(pow2heapp (find_max' n0 gv0) n a2), (pow2heapp (find_max' n0 gv0) n a1), (pow2heapp (find_max' n0 gv0) n c), (pow2heapp (find_max' n0 gv0) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) n (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) n (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) n (Node n0 c a2))
(pow2heapp (find_max' n0 gv0) n (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) n (Node n0 c c)), (pow2heapp (find_max' n0 gv0) n (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) n (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) n (Node n a2 c)), (pow2heapp (find_max' n0 gv0) n (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) n (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) n (Node n a1 c)), (pow2heapp (find_max' n0 gv0) n (Node n c a2)), (pow2heapp (find_max' n0 gv0) n (Node n c a1))
(pow2heapp (find_max' n0 gv0) n (Node n c c)), (pow2heapp (find_max' n0 gv0) n (smash a2 a2)), (pow2heapp (find_max' n0 gv0) n (smash a2 a1)), (pow2heapp (find_max' n0 gv0) n (smash a2 c)), (pow2heapp (find_max' n0 gv0) n (smash a1 a2)), (pow2heapp (find_max' n0 gv0) n (smash a1 a1)), (pow2heapp (find_max' n0 gv0) n (smash a1 c)), (pow2heapp (find_max' n0 gv0) n (smash c a2)), (pow2heapp (find_max' n0 gv0) n (smash c a1)), (pow2heapp (find_max' n0 gv0) n (smash c c))
(pow2heapp (find_max' n0 gv0) n Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) a2), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) a1), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) c), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 a1 c))
(pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n c a2))
(pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash c a1))
(pow2heapp (find_max' n0 gv0) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) a2), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) a1), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) c), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a1 a1))
(pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n a1 c))
(pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (Node n c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash c a2))
(pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) (smash c c)), (pow2heapp (find_max' n0 gv0) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n p) a2), (pow2heapp (find_max' n0 gv0) (find_max' n p) a1), (pow2heapp (find_max' n0 gv0) (find_max' n p) c), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a1 a2))
(pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash a1 c))
(pow2heapp (find_max' n0 gv0) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n p) (smash c c)), (pow2heapp (find_max' n0 gv0) (find_max' n p) Leaf), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) a2), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) a1), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) c), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a2 c))
(pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a1 a2))
(pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a2 c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a1 a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a1 a1))
(pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash a1 c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash c a2)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash c a1)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n0 gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n0 gv0) (length p) a2), (pow2heapp (find_max' n0 gv0) (length p) a1), (pow2heapp (find_max' n0 gv0) (length p) c), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 gv0) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a2 c))
(pow2heapp (find_max' n0 gv0) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n a1 c)), (pow2heapp (find_max' n0 gv0) (length p) (Node n c a2)), (pow2heapp (find_max' n0 gv0) (length p) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (length p) (Node n c c)), (pow2heapp (find_max' n0 gv0) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (length p) (smash a2 c)), (pow2heapp (find_max' n0 gv0) (length p) (smash a1 a2))
(pow2heapp (find_max' n0 gv0) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (length p) (smash a1 c)), (pow2heapp (find_max' n0 gv0) (length p) (smash c a2)), (pow2heapp (find_max' n0 gv0) (length p) (smash c a1)), (pow2heapp (find_max' n0 gv0) (length p) (smash c c)), (pow2heapp (find_max' n0 gv0) (length p) Leaf), (pow2heapp (find_max' n0 gv0) (length gv0) a2), (pow2heapp (find_max' n0 gv0) (length gv0) a1), (pow2heapp (find_max' n0 gv0) (length gv0) c), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a2 a2))
(pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a2 c)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 a1 c)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 c a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 c a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n0 c c)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a2 a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a2 a1))
(pow2heapp (find_max' n0 gv0) (length gv0) (Node n a2 c)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a1 a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n a1 c)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n c a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n c a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (Node n c c)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a2 a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a2 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a2 c))
(pow2heapp (find_max' n0 gv0) (length gv0) (smash a1 a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a1 a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash a1 c)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash c a2)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash c a1)), (pow2heapp (find_max' n0 gv0) (length gv0) (smash c c)), (pow2heapp (find_max' n0 gv0) (length gv0) Leaf), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 c)
(pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c)), (pow2heapp (find_max' n p) n0 (Node n0 c a2)), (pow2heapp (find_max' n p) n0 (Node n0 c a1)), (pow2heapp (find_max' n p) n0 (Node n0 c c)), (pow2heapp (find_max' n p) n0 (Node n a2 a2))
(pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c)), (pow2heapp (find_max' n p) n0 (Node n c a2)), (pow2heapp (find_max' n p) n0 (Node n c a1)), (pow2heapp (find_max' n p) n0 (Node n c c)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1))
(pow2heapp (find_max' n p) n0 (smash a2 c)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c)), (pow2heapp (find_max' n p) n0 (smash c a2)), (pow2heapp (find_max' n p) n0 (smash c a1)), (pow2heapp (find_max' n p) n0 (smash c c)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1)
(pow2heapp (find_max' n p) n c), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c)), (pow2heapp (find_max' n p) n (Node n0 c a2)), (pow2heapp (find_max' n p) n (Node n0 c a1)), (pow2heapp (find_max' n p) n (Node n0 c c))
(pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 c)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 c)), (pow2heapp (find_max' n p) n (Node n c a2)), (pow2heapp (find_max' n p) n (Node n c a1)), (pow2heapp (find_max' n p) n (Node n c c)), (pow2heapp (find_max' n p) n (smash a2 a2))
(pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 c)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 c)), (pow2heapp (find_max' n p) n (smash c a2)), (pow2heapp (find_max' n p) n (smash c a1)), (pow2heapp (find_max' n p) n (smash c c)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a2)
(pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) c), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c c))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf)
(pow2heapp (find_max' n p) (find_max' n0 gv0) a2), (pow2heapp (find_max' n p) (find_max' n0 gv0) a1), (pow2heapp (find_max' n p) (find_max' n0 gv0) c), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 c a2))
(pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n c a1))
(pow2heapp (find_max' n p) (find_max' n0 gv0) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n0 gv0) (smash c c))
(pow2heapp (find_max' n p) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) c), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (find_max' n gv0) a2), (pow2heapp (find_max' n p) (find_max' n gv0) a1), (pow2heapp (find_max' n p) (find_max' n gv0) c), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a2 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a1 a1))
(pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 c a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n0 c c)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a2 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n a1 c))
(pow2heapp (find_max' n p) (find_max' n gv0) (Node n c a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n c a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a2 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash a1 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash c a2))
(pow2heapp (find_max' n p) (find_max' n gv0) (smash c a1)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n p) (find_max' n gv0) Leaf), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) c), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c)), (pow2heapp (find_max' n p) (length p) (Node n0 c a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c c)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1))
(pow2heapp (find_max' n p) (length p) (Node n a1 c)), (pow2heapp (find_max' n p) (length p) (Node n c a2)), (pow2heapp (find_max' n p) (length p) (Node n c a1)), (pow2heapp (find_max' n p) (length p) (Node n c c)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c))
(pow2heapp (find_max' n p) (length p) (smash c a2)), (pow2heapp (find_max' n p) (length p) (smash c a1)), (pow2heapp (find_max' n p) (length p) (smash c c)), (pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (find_max' n p) (length gv0) a2), (pow2heapp (find_max' n p) (length gv0) a1), (pow2heapp (find_max' n p) (length gv0) c), (pow2heapp (find_max' n p) (length gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length gv0) (Node n0 a2 c))
(pow2heapp (find_max' n p) (length gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length gv0) (Node n0 a1 c)), (pow2heapp (find_max' n p) (length gv0) (Node n0 c a2)), (pow2heapp (find_max' n p) (length gv0) (Node n0 c a1)), (pow2heapp (find_max' n p) (length gv0) (Node n0 c c)), (pow2heapp (find_max' n p) (length gv0) (Node n a2 a2)), (pow2heapp (find_max' n p) (length gv0) (Node n a2 a1)), (pow2heapp (find_max' n p) (length gv0) (Node n a2 c)), (pow2heapp (find_max' n p) (length gv0) (Node n a1 a2))
(pow2heapp (find_max' n p) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n p) (length gv0) (Node n a1 c)), (pow2heapp (find_max' n p) (length gv0) (Node n c a2)), (pow2heapp (find_max' n p) (length gv0) (Node n c a1)), (pow2heapp (find_max' n p) (length gv0) (Node n c c)), (pow2heapp (find_max' n p) (length gv0) (smash a2 a2)), (pow2heapp (find_max' n p) (length gv0) (smash a2 a1)), (pow2heapp (find_max' n p) (length gv0) (smash a2 c)), (pow2heapp (find_max' n p) (length gv0) (smash a1 a2)), (pow2heapp (find_max' n p) (length gv0) (smash a1 a1))
(pow2heapp (find_max' n p) (length gv0) (smash a1 c)), (pow2heapp (find_max' n p) (length gv0) (smash c a2)), (pow2heapp (find_max' n p) (length gv0) (smash c a1)), (pow2heapp (find_max' n p) (length gv0) (smash c c)), (pow2heapp (find_max' n p) (length gv0) Leaf), (pow2heapp (find_max' n gv0) n0 a2), (pow2heapp (find_max' n gv0) n0 a1), (pow2heapp (find_max' n gv0) n0 c), (pow2heapp (find_max' n gv0) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n gv0) n0 (Node n0 a2 c)), (pow2heapp (find_max' n gv0) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) n0 (Node n0 a1 c)), (pow2heapp (find_max' n gv0) n0 (Node n0 c a2)), (pow2heapp (find_max' n gv0) n0 (Node n0 c a1)), (pow2heapp (find_max' n gv0) n0 (Node n0 c c)), (pow2heapp (find_max' n gv0) n0 (Node n a2 a2)), (pow2heapp (find_max' n gv0) n0 (Node n a2 a1)), (pow2heapp (find_max' n gv0) n0 (Node n a2 c))
(pow2heapp (find_max' n gv0) n0 (Node n a1 a2)), (pow2heapp (find_max' n gv0) n0 (Node n a1 a1)), (pow2heapp (find_max' n gv0) n0 (Node n a1 c)), (pow2heapp (find_max' n gv0) n0 (Node n c a2)), (pow2heapp (find_max' n gv0) n0 (Node n c a1)), (pow2heapp (find_max' n gv0) n0 (Node n c c)), (pow2heapp (find_max' n gv0) n0 (smash a2 a2)), (pow2heapp (find_max' n gv0) n0 (smash a2 a1)), (pow2heapp (find_max' n gv0) n0 (smash a2 c)), (pow2heapp (find_max' n gv0) n0 (smash a1 a2))
(pow2heapp (find_max' n gv0) n0 (smash a1 a1)), (pow2heapp (find_max' n gv0) n0 (smash a1 c)), (pow2heapp (find_max' n gv0) n0 (smash c a2)), (pow2heapp (find_max' n gv0) n0 (smash c a1)), (pow2heapp (find_max' n gv0) n0 (smash c c)), (pow2heapp (find_max' n gv0) n0 Leaf), (pow2heapp (find_max' n gv0) n a2), (pow2heapp (find_max' n gv0) n a1), (pow2heapp (find_max' n gv0) n c), (pow2heapp (find_max' n gv0) n (Node n0 a2 a2))
(pow2heapp (find_max' n gv0) n (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) n (Node n0 a2 c)), (pow2heapp (find_max' n gv0) n (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) n (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) n (Node n0 a1 c)), (pow2heapp (find_max' n gv0) n (Node n0 c a2)), (pow2heapp (find_max' n gv0) n (Node n0 c a1)), (pow2heapp (find_max' n gv0) n (Node n0 c c)), (pow2heapp (find_max' n gv0) n (Node n a2 a2)), (pow2heapp (find_max' n gv0) n (Node n a2 a1))
(pow2heapp (find_max' n gv0) n (Node n a2 c)), (pow2heapp (find_max' n gv0) n (Node n a1 a2)), (pow2heapp (find_max' n gv0) n (Node n a1 a1)), (pow2heapp (find_max' n gv0) n (Node n a1 c)), (pow2heapp (find_max' n gv0) n (Node n c a2)), (pow2heapp (find_max' n gv0) n (Node n c a1)), (pow2heapp (find_max' n gv0) n (Node n c c)), (pow2heapp (find_max' n gv0) n (smash a2 a2)), (pow2heapp (find_max' n gv0) n (smash a2 a1)), (pow2heapp (find_max' n gv0) n (smash a2 c))
(pow2heapp (find_max' n gv0) n (smash a1 a2)), (pow2heapp (find_max' n gv0) n (smash a1 a1)), (pow2heapp (find_max' n gv0) n (smash a1 c)), (pow2heapp (find_max' n gv0) n (smash c a2)), (pow2heapp (find_max' n gv0) n (smash c a1)), (pow2heapp (find_max' n gv0) n (smash c c)), (pow2heapp (find_max' n gv0) n Leaf), (pow2heapp (find_max' n gv0) (find_max' n0 p) a2), (pow2heapp (find_max' n gv0) (find_max' n0 p) a1), (pow2heapp (find_max' n gv0) (find_max' n0 p) c)
(pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n0 c c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a2 a1))
(pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 p) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n0 p) Leaf), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) a2), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) a1)
(pow2heapp (find_max' n gv0) (find_max' n0 gv0) c), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n0 c c))
(pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a2 a2))
(pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a2 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash c a2)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash c a1)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n0 gv0) Leaf), (pow2heapp (find_max' n gv0) (find_max' n p) a2)
(pow2heapp (find_max' n gv0) (find_max' n p) a1), (pow2heapp (find_max' n gv0) (find_max' n p) c), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 a1 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 c a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 c a1))
(pow2heapp (find_max' n gv0) (find_max' n p) (Node n0 c c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a2 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n a1 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n c a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n c a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n c c))
(pow2heapp (find_max' n gv0) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a2 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash a1 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash c a2)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash c a1)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n p) Leaf)
(pow2heapp (find_max' n gv0) (find_max' n gv0) a2), (pow2heapp (find_max' n gv0) (find_max' n gv0) a1), (pow2heapp (find_max' n gv0) (find_max' n gv0) c), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 c a2))
(pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n0 c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a2 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n a1 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c a1))
(pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a2 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a2 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a2 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a1 a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a1 a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash a1 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c a2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c a1)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c c))
(pow2heapp (find_max' n gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n gv0) (length p) a2), (pow2heapp (find_max' n gv0) (length p) a1), (pow2heapp (find_max' n gv0) (length p) c), (pow2heapp (find_max' n gv0) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (length p) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n gv0) (length p) (Node n0 a1 c))
(pow2heapp (find_max' n gv0) (length p) (Node n0 c a2)), (pow2heapp (find_max' n gv0) (length p) (Node n0 c a1)), (pow2heapp (find_max' n gv0) (length p) (Node n0 c c)), (pow2heapp (find_max' n gv0) (length p) (Node n a2 a2)), (pow2heapp (find_max' n gv0) (length p) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (length p) (Node n a2 c)), (pow2heapp (find_max' n gv0) (length p) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (length p) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (length p) (Node n a1 c)), (pow2heapp (find_max' n gv0) (length p) (Node n c a2))
(pow2heapp (find_max' n gv0) (length p) (Node n c a1)), (pow2heapp (find_max' n gv0) (length p) (Node n c c)), (pow2heapp (find_max' n gv0) (length p) (smash a2 a2)), (pow2heapp (find_max' n gv0) (length p) (smash a2 a1)), (pow2heapp (find_max' n gv0) (length p) (smash a2 c)), (pow2heapp (find_max' n gv0) (length p) (smash a1 a2)), (pow2heapp (find_max' n gv0) (length p) (smash a1 a1)), (pow2heapp (find_max' n gv0) (length p) (smash a1 c)), (pow2heapp (find_max' n gv0) (length p) (smash c a2)), (pow2heapp (find_max' n gv0) (length p) (smash c a1))
(pow2heapp (find_max' n gv0) (length p) (smash c c)), (pow2heapp (find_max' n gv0) (length p) Leaf), (pow2heapp (find_max' n gv0) (length gv0) a2), (pow2heapp (find_max' n gv0) (length gv0) a1), (pow2heapp (find_max' n gv0) (length gv0) c), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a2 a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a2 a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a2 c)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a1 a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 a1 a1))
(pow2heapp (find_max' n gv0) (length gv0) (Node n0 a1 c)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 c a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 c a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n0 c c)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a2 a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a2 a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a2 c)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a1 a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a1 a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n a1 c))
(pow2heapp (find_max' n gv0) (length gv0) (Node n c a2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n c a1)), (pow2heapp (find_max' n gv0) (length gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (length gv0) (smash a2 a2)), (pow2heapp (find_max' n gv0) (length gv0) (smash a2 a1)), (pow2heapp (find_max' n gv0) (length gv0) (smash a2 c)), (pow2heapp (find_max' n gv0) (length gv0) (smash a1 a2)), (pow2heapp (find_max' n gv0) (length gv0) (smash a1 a1)), (pow2heapp (find_max' n gv0) (length gv0) (smash a1 c)), (pow2heapp (find_max' n gv0) (length gv0) (smash c a2))
(pow2heapp (find_max' n gv0) (length gv0) (smash c a1)), (pow2heapp (find_max' n gv0) (length gv0) (smash c c)), (pow2heapp (find_max' n gv0) (length gv0) Leaf), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 c), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1)), (pow2heapp (length p) n0 (Node n0 a2 c)), (pow2heapp (length p) n0 (Node n0 a1 a2))
(pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n0 a1 c)), (pow2heapp (length p) n0 (Node n0 c a2)), (pow2heapp (length p) n0 (Node n0 c a1)), (pow2heapp (length p) n0 (Node n0 c c)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 c)), (pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1))
(pow2heapp (length p) n0 (Node n a1 c)), (pow2heapp (length p) n0 (Node n c a2)), (pow2heapp (length p) n0 (Node n c a1)), (pow2heapp (length p) n0 (Node n c c)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a2 c)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 c))
(pow2heapp (length p) n0 (smash c a2)), (pow2heapp (length p) n0 (smash c a1)), (pow2heapp (length p) n0 (smash c c)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n c), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 c))
(pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 c)), (pow2heapp (length p) n (Node n0 c a2)), (pow2heapp (length p) n (Node n0 c a1)), (pow2heapp (length p) n (Node n0 c c)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 c)), (pow2heapp (length p) n (Node n a1 a2))
(pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (Node n a1 c)), (pow2heapp (length p) n (Node n c a2)), (pow2heapp (length p) n (Node n c a1)), (pow2heapp (length p) n (Node n c c)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 c)), (pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1))
(pow2heapp (length p) n (smash a1 c)), (pow2heapp (length p) n (smash c a2)), (pow2heapp (length p) n (smash c a1)), (pow2heapp (length p) n (smash c c)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) c), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c c)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c))
(pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c)), (pow2heapp (length p) (find_max' n0 p) (Node n c a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c c)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2))
(pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c)), (pow2heapp (length p) (find_max' n0 p) (smash c a2)), (pow2heapp (length p) (find_max' n0 p) (smash c a1)), (pow2heapp (length p) (find_max' n0 p) (smash c c)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n0 gv0) a2), (pow2heapp (length p) (find_max' n0 gv0) a1), (pow2heapp (length p) (find_max' n0 gv0) c), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a2 a2))
(pow2heapp (length p) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n0 c c)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a2 a1))
(pow2heapp (length p) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n a1 c)), (pow2heapp (length p) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (length p) (find_max' n0 gv0) (Node n c a1)), (pow2heapp (length p) (find_max' n0 gv0) (Node n c c)), (pow2heapp (length p) (find_max' n0 gv0) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 gv0) (smash a2 c))
(pow2heapp (length p) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 gv0) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (length p) (find_max' n0 gv0) (smash c a2)), (pow2heapp (length p) (find_max' n0 gv0) (smash c a1)), (pow2heapp (length p) (find_max' n0 gv0) (smash c c)), (pow2heapp (length p) (find_max' n0 gv0) Leaf), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) c)
(pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n p) (Node n0 c a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c c)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2))
(pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c)), (pow2heapp (length p) (find_max' n p) (Node n c a2)), (pow2heapp (length p) (find_max' n p) (Node n c a1)), (pow2heapp (length p) (find_max' n p) (Node n c c)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1))
(pow2heapp (length p) (find_max' n p) (smash a2 c)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c)), (pow2heapp (length p) (find_max' n p) (smash c a2)), (pow2heapp (length p) (find_max' n p) (smash c a1)), (pow2heapp (length p) (find_max' n p) (smash c c)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (find_max' n gv0) a2), (pow2heapp (length p) (find_max' n gv0) a1)
(pow2heapp (length p) (find_max' n gv0) c), (pow2heapp (length p) (find_max' n gv0) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n gv0) (Node n0 a2 c)), (pow2heapp (length p) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (length p) (find_max' n gv0) (Node n0 c a2)), (pow2heapp (length p) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (length p) (find_max' n gv0) (Node n0 c c))
(pow2heapp (length p) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (length p) (find_max' n gv0) (Node n a2 a1)), (pow2heapp (length p) (find_max' n gv0) (Node n a2 c)), (pow2heapp (length p) (find_max' n gv0) (Node n a1 a2)), (pow2heapp (length p) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (length p) (find_max' n gv0) (Node n a1 c)), (pow2heapp (length p) (find_max' n gv0) (Node n c a2)), (pow2heapp (length p) (find_max' n gv0) (Node n c a1)), (pow2heapp (length p) (find_max' n gv0) (Node n c c)), (pow2heapp (length p) (find_max' n gv0) (smash a2 a2))
(pow2heapp (length p) (find_max' n gv0) (smash a2 a1)), (pow2heapp (length p) (find_max' n gv0) (smash a2 c)), (pow2heapp (length p) (find_max' n gv0) (smash a1 a2)), (pow2heapp (length p) (find_max' n gv0) (smash a1 a1)), (pow2heapp (length p) (find_max' n gv0) (smash a1 c)), (pow2heapp (length p) (find_max' n gv0) (smash c a2)), (pow2heapp (length p) (find_max' n gv0) (smash c a1)), (pow2heapp (length p) (find_max' n gv0) (smash c c)), (pow2heapp (length p) (find_max' n gv0) Leaf), (pow2heapp (length p) (length p) a2)
(pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) c), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1)), (pow2heapp (length p) (length p) (Node n0 a2 c)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c)), (pow2heapp (length p) (length p) (Node n0 c a2)), (pow2heapp (length p) (length p) (Node n0 c a1))
(pow2heapp (length p) (length p) (Node n0 c c)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 c)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (Node n a1 c)), (pow2heapp (length p) (length p) (Node n c a2)), (pow2heapp (length p) (length p) (Node n c a1)), (pow2heapp (length p) (length p) (Node n c c))
(pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a2 c)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 c)), (pow2heapp (length p) (length p) (smash c a2)), (pow2heapp (length p) (length p) (smash c a1)), (pow2heapp (length p) (length p) (smash c c)), (pow2heapp (length p) (length p) Leaf)
(pow2heapp (length p) (length gv0) a2), (pow2heapp (length p) (length gv0) a1), (pow2heapp (length p) (length gv0) c), (pow2heapp (length p) (length gv0) (Node n0 a2 a2)), (pow2heapp (length p) (length gv0) (Node n0 a2 a1)), (pow2heapp (length p) (length gv0) (Node n0 a2 c)), (pow2heapp (length p) (length gv0) (Node n0 a1 a2)), (pow2heapp (length p) (length gv0) (Node n0 a1 a1)), (pow2heapp (length p) (length gv0) (Node n0 a1 c)), (pow2heapp (length p) (length gv0) (Node n0 c a2))
(pow2heapp (length p) (length gv0) (Node n0 c a1)), (pow2heapp (length p) (length gv0) (Node n0 c c)), (pow2heapp (length p) (length gv0) (Node n a2 a2)), (pow2heapp (length p) (length gv0) (Node n a2 a1)), (pow2heapp (length p) (length gv0) (Node n a2 c)), (pow2heapp (length p) (length gv0) (Node n a1 a2)), (pow2heapp (length p) (length gv0) (Node n a1 a1)), (pow2heapp (length p) (length gv0) (Node n a1 c)), (pow2heapp (length p) (length gv0) (Node n c a2)), (pow2heapp (length p) (length gv0) (Node n c a1))
(pow2heapp (length p) (length gv0) (Node n c c)), (pow2heapp (length p) (length gv0) (smash a2 a2)), (pow2heapp (length p) (length gv0) (smash a2 a1)), (pow2heapp (length p) (length gv0) (smash a2 c)), (pow2heapp (length p) (length gv0) (smash a1 a2)), (pow2heapp (length p) (length gv0) (smash a1 a1)), (pow2heapp (length p) (length gv0) (smash a1 c)), (pow2heapp (length p) (length gv0) (smash c a2)), (pow2heapp (length p) (length gv0) (smash c a1)), (pow2heapp (length p) (length gv0) (smash c c))
(pow2heapp (length p) (length gv0) Leaf), (pow2heapp (length gv0) n0 a2), (pow2heapp (length gv0) n0 a1), (pow2heapp (length gv0) n0 c), (pow2heapp (length gv0) n0 (Node n0 a2 a2)), (pow2heapp (length gv0) n0 (Node n0 a2 a1)), (pow2heapp (length gv0) n0 (Node n0 a2 c)), (pow2heapp (length gv0) n0 (Node n0 a1 a2)), (pow2heapp (length gv0) n0 (Node n0 a1 a1)), (pow2heapp (length gv0) n0 (Node n0 a1 c))
(pow2heapp (length gv0) n0 (Node n0 c a2)), (pow2heapp (length gv0) n0 (Node n0 c a1)), (pow2heapp (length gv0) n0 (Node n0 c c)), (pow2heapp (length gv0) n0 (Node n a2 a2)), (pow2heapp (length gv0) n0 (Node n a2 a1)), (pow2heapp (length gv0) n0 (Node n a2 c)), (pow2heapp (length gv0) n0 (Node n a1 a2)), (pow2heapp (length gv0) n0 (Node n a1 a1)), (pow2heapp (length gv0) n0 (Node n a1 c)), (pow2heapp (length gv0) n0 (Node n c a2))
(pow2heapp (length gv0) n0 (Node n c a1)), (pow2heapp (length gv0) n0 (Node n c c)), (pow2heapp (length gv0) n0 (smash a2 a2)), (pow2heapp (length gv0) n0 (smash a2 a1)), (pow2heapp (length gv0) n0 (smash a2 c)), (pow2heapp (length gv0) n0 (smash a1 a2)), (pow2heapp (length gv0) n0 (smash a1 a1)), (pow2heapp (length gv0) n0 (smash a1 c)), (pow2heapp (length gv0) n0 (smash c a2)), (pow2heapp (length gv0) n0 (smash c a1))
(pow2heapp (length gv0) n0 (smash c c)), (pow2heapp (length gv0) n0 Leaf), (pow2heapp (length gv0) n a2), (pow2heapp (length gv0) n a1), (pow2heapp (length gv0) n c), (pow2heapp (length gv0) n (Node n0 a2 a2)), (pow2heapp (length gv0) n (Node n0 a2 a1)), (pow2heapp (length gv0) n (Node n0 a2 c)), (pow2heapp (length gv0) n (Node n0 a1 a2)), (pow2heapp (length gv0) n (Node n0 a1 a1))
(pow2heapp (length gv0) n (Node n0 a1 c)), (pow2heapp (length gv0) n (Node n0 c a2)), (pow2heapp (length gv0) n (Node n0 c a1)), (pow2heapp (length gv0) n (Node n0 c c)), (pow2heapp (length gv0) n (Node n a2 a2)), (pow2heapp (length gv0) n (Node n a2 a1)), (pow2heapp (length gv0) n (Node n a2 c)), (pow2heapp (length gv0) n (Node n a1 a2)), (pow2heapp (length gv0) n (Node n a1 a1)), (pow2heapp (length gv0) n (Node n a1 c))
(pow2heapp (length gv0) n (Node n c a2)), (pow2heapp (length gv0) n (Node n c a1)), (pow2heapp (length gv0) n (Node n c c)), (pow2heapp (length gv0) n (smash a2 a2)), (pow2heapp (length gv0) n (smash a2 a1)), (pow2heapp (length gv0) n (smash a2 c)), (pow2heapp (length gv0) n (smash a1 a2)), (pow2heapp (length gv0) n (smash a1 a1)), (pow2heapp (length gv0) n (smash a1 c)), (pow2heapp (length gv0) n (smash c a2))
(pow2heapp (length gv0) n (smash c a1)), (pow2heapp (length gv0) n (smash c c)), (pow2heapp (length gv0) n Leaf), (pow2heapp (length gv0) (find_max' n0 p) a2), (pow2heapp (length gv0) (find_max' n0 p) a1), (pow2heapp (length gv0) (find_max' n0 p) c), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a2 c)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (length gv0) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 a1 c)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 c a2)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 c a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n0 c c)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a2 c)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length gv0) (find_max' n0 p) (Node n a1 a1))
(pow2heapp (length gv0) (find_max' n0 p) (Node n a1 c)), (pow2heapp (length gv0) (find_max' n0 p) (Node n c a2)), (pow2heapp (length gv0) (find_max' n0 p) (Node n c a1)), (pow2heapp (length gv0) (find_max' n0 p) (Node n c c)), (pow2heapp (length gv0) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length gv0) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length gv0) (find_max' n0 p) (smash a2 c)), (pow2heapp (length gv0) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length gv0) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length gv0) (find_max' n0 p) (smash a1 c))
(pow2heapp (length gv0) (find_max' n0 p) (smash c a2)), (pow2heapp (length gv0) (find_max' n0 p) (smash c a1)), (pow2heapp (length gv0) (find_max' n0 p) (smash c c)), (pow2heapp (length gv0) (find_max' n0 p) Leaf), (pow2heapp (length gv0) (find_max' n0 gv0) a2), (pow2heapp (length gv0) (find_max' n0 gv0) a1), (pow2heapp (length gv0) (find_max' n0 gv0) c), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a2 a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a2 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a2 c))
(pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a1 a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 a1 c)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 c a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 c a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n0 c c)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a2 a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a2 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a2 c)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a1 a2))
(pow2heapp (length gv0) (find_max' n0 gv0) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n a1 c)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n c a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n c a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (Node n c c)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a2 a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a2 a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a2 c)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a1 a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash a1 a1))
(pow2heapp (length gv0) (find_max' n0 gv0) (smash a1 c)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash c a2)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash c a1)), (pow2heapp (length gv0) (find_max' n0 gv0) (smash c c)), (pow2heapp (length gv0) (find_max' n0 gv0) Leaf), (pow2heapp (length gv0) (find_max' n p) a2), (pow2heapp (length gv0) (find_max' n p) a1), (pow2heapp (length gv0) (find_max' n p) c), (pow2heapp (length gv0) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length gv0) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (length gv0) (find_max' n p) (Node n0 a2 c)), (pow2heapp (length gv0) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length gv0) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n p) (Node n0 a1 c)), (pow2heapp (length gv0) (find_max' n p) (Node n0 c a2)), (pow2heapp (length gv0) (find_max' n p) (Node n0 c a1)), (pow2heapp (length gv0) (find_max' n p) (Node n0 c c)), (pow2heapp (length gv0) (find_max' n p) (Node n a2 a2)), (pow2heapp (length gv0) (find_max' n p) (Node n a2 a1)), (pow2heapp (length gv0) (find_max' n p) (Node n a2 c))
(pow2heapp (length gv0) (find_max' n p) (Node n a1 a2)), (pow2heapp (length gv0) (find_max' n p) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n p) (Node n a1 c)), (pow2heapp (length gv0) (find_max' n p) (Node n c a2)), (pow2heapp (length gv0) (find_max' n p) (Node n c a1)), (pow2heapp (length gv0) (find_max' n p) (Node n c c)), (pow2heapp (length gv0) (find_max' n p) (smash a2 a2)), (pow2heapp (length gv0) (find_max' n p) (smash a2 a1)), (pow2heapp (length gv0) (find_max' n p) (smash a2 c)), (pow2heapp (length gv0) (find_max' n p) (smash a1 a2))
(pow2heapp (length gv0) (find_max' n p) (smash a1 a1)), (pow2heapp (length gv0) (find_max' n p) (smash a1 c)), (pow2heapp (length gv0) (find_max' n p) (smash c a2)), (pow2heapp (length gv0) (find_max' n p) (smash c a1)), (pow2heapp (length gv0) (find_max' n p) (smash c c)), (pow2heapp (length gv0) (find_max' n p) Leaf), (pow2heapp (length gv0) (find_max' n gv0) a2), (pow2heapp (length gv0) (find_max' n gv0) a1), (pow2heapp (length gv0) (find_max' n gv0) c), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a2 a2))
(pow2heapp (length gv0) (find_max' n gv0) (Node n0 a2 a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a2 c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a1 a2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 a1 c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 c a2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 c a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n0 c c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a2 a2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a2 a1))
(pow2heapp (length gv0) (find_max' n gv0) (Node n a2 c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a1 a2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a1 a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n a1 c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n c a2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n c a1)), (pow2heapp (length gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (length gv0) (find_max' n gv0) (smash a2 a2)), (pow2heapp (length gv0) (find_max' n gv0) (smash a2 a1)), (pow2heapp (length gv0) (find_max' n gv0) (smash a2 c))
(pow2heapp (length gv0) (find_max' n gv0) (smash a1 a2)), (pow2heapp (length gv0) (find_max' n gv0) (smash a1 a1)), (pow2heapp (length gv0) (find_max' n gv0) (smash a1 c)), (pow2heapp (length gv0) (find_max' n gv0) (smash c a2)), (pow2heapp (length gv0) (find_max' n gv0) (smash c a1)), (pow2heapp (length gv0) (find_max' n gv0) (smash c c)), (pow2heapp (length gv0) (find_max' n gv0) Leaf), (pow2heapp (length gv0) (length p) a2), (pow2heapp (length gv0) (length p) a1), (pow2heapp (length gv0) (length p) c)
(pow2heapp (length gv0) (length p) (Node n0 a2 a2)), (pow2heapp (length gv0) (length p) (Node n0 a2 a1)), (pow2heapp (length gv0) (length p) (Node n0 a2 c)), (pow2heapp (length gv0) (length p) (Node n0 a1 a2)), (pow2heapp (length gv0) (length p) (Node n0 a1 a1)), (pow2heapp (length gv0) (length p) (Node n0 a1 c)), (pow2heapp (length gv0) (length p) (Node n0 c a2)), (pow2heapp (length gv0) (length p) (Node n0 c a1)), (pow2heapp (length gv0) (length p) (Node n0 c c)), (pow2heapp (length gv0) (length p) (Node n a2 a2))
(pow2heapp (length gv0) (length p) (Node n a2 a1)), (pow2heapp (length gv0) (length p) (Node n a2 c)), (pow2heapp (length gv0) (length p) (Node n a1 a2)), (pow2heapp (length gv0) (length p) (Node n a1 a1)), (pow2heapp (length gv0) (length p) (Node n a1 c)), (pow2heapp (length gv0) (length p) (Node n c a2)), (pow2heapp (length gv0) (length p) (Node n c a1)), (pow2heapp (length gv0) (length p) (Node n c c)), (pow2heapp (length gv0) (length p) (smash a2 a2)), (pow2heapp (length gv0) (length p) (smash a2 a1))
(pow2heapp (length gv0) (length p) (smash a2 c)), (pow2heapp (length gv0) (length p) (smash a1 a2)), (pow2heapp (length gv0) (length p) (smash a1 a1)), (pow2heapp (length gv0) (length p) (smash a1 c)), (pow2heapp (length gv0) (length p) (smash c a2)), (pow2heapp (length gv0) (length p) (smash c a1)), (pow2heapp (length gv0) (length p) (smash c c)), (pow2heapp (length gv0) (length p) Leaf), (pow2heapp (length gv0) (length gv0) a2), (pow2heapp (length gv0) (length gv0) a1)
(pow2heapp (length gv0) (length gv0) c), (pow2heapp (length gv0) (length gv0) (Node n0 a2 a2)), (pow2heapp (length gv0) (length gv0) (Node n0 a2 a1)), (pow2heapp (length gv0) (length gv0) (Node n0 a2 c)), (pow2heapp (length gv0) (length gv0) (Node n0 a1 a2)), (pow2heapp (length gv0) (length gv0) (Node n0 a1 a1)), (pow2heapp (length gv0) (length gv0) (Node n0 a1 c)), (pow2heapp (length gv0) (length gv0) (Node n0 c a2)), (pow2heapp (length gv0) (length gv0) (Node n0 c a1)), (pow2heapp (length gv0) (length gv0) (Node n0 c c))
(pow2heapp (length gv0) (length gv0) (Node n a2 a2)), (pow2heapp (length gv0) (length gv0) (Node n a2 a1)), (pow2heapp (length gv0) (length gv0) (Node n a2 c)), (pow2heapp (length gv0) (length gv0) (Node n a1 a2)), (pow2heapp (length gv0) (length gv0) (Node n a1 a1)), (pow2heapp (length gv0) (length gv0) (Node n a1 c)), (pow2heapp (length gv0) (length gv0) (Node n c a2)), (pow2heapp (length gv0) (length gv0) (Node n c a1)), (pow2heapp (length gv0) (length gv0) (Node n c c)), (pow2heapp (length gv0) (length gv0) (smash a2 a2))
(pow2heapp (length gv0) (length gv0) (smash a2 a1)), (pow2heapp (length gv0) (length gv0) (smash a2 c)), (pow2heapp (length gv0) (length gv0) (smash a1 a2)), (pow2heapp (length gv0) (length gv0) (smash a1 a1)), (pow2heapp (length gv0) (length gv0) (smash a1 c)), (pow2heapp (length gv0) (length gv0) (smash c a2)), (pow2heapp (length gv0) (length gv0) (smash c a1)), (pow2heapp (length gv0) (length gv0) (smash c c)), (pow2heapp (length gv0) (length gv0) Leaf), (Permutation p (a2 :: p))
(Permutation p (a2 :: gv0)), (Permutation p (a1 :: p)), (Permutation p (a1 :: gv0)), (Permutation p (c :: p)), (Permutation p (c :: gv0)), (Permutation p (merge p p)), (Permutation p (merge p gv0)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 gv0)), (Permutation p (heap_delete_max a2))
(Permutation p (heap_delete_max a1)), (Permutation p (heap_delete_max c)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p c)), (Permutation p (join p gv0 a2)), (Permutation p (join p gv0 a1)), (Permutation p (join p gv0 c)), (Permutation p (join gv0 p a2)), (Permutation p (join gv0 p a1))
(Permutation p (join gv0 p c)), (Permutation p (join gv0 gv0 a2)), (Permutation p (join gv0 gv0 a1)), (Permutation p (join gv0 gv0 c)), (Permutation p (insert n0 p)), (Permutation p (insert n0 gv0)), (Permutation p (insert n p)), (Permutation p (insert n gv0)), (Permutation p (carry p a2)), (Permutation p (carry p a1))
(Permutation p (carry p c)), (Permutation p (carry gv0 a2)), (Permutation p (carry gv0 a1)), (Permutation p (carry gv0 c)), (Permutation p (p ++ p)), (Permutation p (p ++ gv0)), (Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ gv0)), (Permutation p []), (Permutation gv0 (a2 :: p))
(Permutation gv0 (a2 :: gv0)), (Permutation gv0 (a1 :: p)), (Permutation gv0 (a1 :: gv0)), (Permutation gv0 (c :: p)), (Permutation gv0 (c :: gv0)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p gv0)), (Permutation gv0 (merge gv0 p)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (heap_delete_max a2))
(Permutation gv0 (heap_delete_max a1)), (Permutation gv0 (heap_delete_max c)), (Permutation gv0 (join p p a2)), (Permutation gv0 (join p p a1)), (Permutation gv0 (join p p c)), (Permutation gv0 (join p gv0 a2)), (Permutation gv0 (join p gv0 a1)), (Permutation gv0 (join p gv0 c)), (Permutation gv0 (join gv0 p a2)), (Permutation gv0 (join gv0 p a1))
(Permutation gv0 (join gv0 p c)), (Permutation gv0 (join gv0 gv0 a2)), (Permutation gv0 (join gv0 gv0 a1)), (Permutation gv0 (join gv0 gv0 c)), (Permutation gv0 (insert n0 p)), (Permutation gv0 (insert n0 gv0)), (Permutation gv0 (insert n p)), (Permutation gv0 (insert n gv0)), (Permutation gv0 (carry p a2)), (Permutation gv0 (carry p a1))
(Permutation gv0 (carry p c)), (Permutation gv0 (carry gv0 a2)), (Permutation gv0 (carry gv0 a1)), (Permutation gv0 (carry gv0 c)), (Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (gv0 ++ p)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a2 :: p) p)
(Permutation (a2 :: p) gv0), (Permutation (a2 :: p) (a2 :: gv0)), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (a1 :: gv0)), (Permutation (a2 :: p) (c :: p)), (Permutation (a2 :: p) (c :: gv0)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (merge p gv0)), (Permutation (a2 :: p) (merge gv0 p)), (Permutation (a2 :: p) (merge gv0 gv0))
(Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (heap_delete_max c)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p c)), (Permutation (a2 :: p) (join p gv0 a2)), (Permutation (a2 :: p) (join p gv0 a1)), (Permutation (a2 :: p) (join p gv0 c)), (Permutation (a2 :: p) (join gv0 p a2))
(Permutation (a2 :: p) (join gv0 p a1)), (Permutation (a2 :: p) (join gv0 p c)), (Permutation (a2 :: p) (join gv0 gv0 a2)), (Permutation (a2 :: p) (join gv0 gv0 a1)), (Permutation (a2 :: p) (join gv0 gv0 c)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n0 gv0)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (insert n gv0)), (Permutation (a2 :: p) (carry p a2))
(Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p c)), (Permutation (a2 :: p) (carry gv0 a2)), (Permutation (a2 :: p) (carry gv0 a1)), (Permutation (a2 :: p) (carry gv0 c)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) (p ++ gv0)), (Permutation (a2 :: p) (gv0 ++ p)), (Permutation (a2 :: p) (gv0 ++ gv0)), (Permutation (a2 :: p) [])
(Permutation (a2 :: gv0) p), (Permutation (a2 :: gv0) gv0), (Permutation (a2 :: gv0) (a2 :: p)), (Permutation (a2 :: gv0) (a1 :: p)), (Permutation (a2 :: gv0) (a1 :: gv0)), (Permutation (a2 :: gv0) (c :: p)), (Permutation (a2 :: gv0) (c :: gv0)), (Permutation (a2 :: gv0) (merge p p)), (Permutation (a2 :: gv0) (merge p gv0)), (Permutation (a2 :: gv0) (merge gv0 p))
(Permutation (a2 :: gv0) (merge gv0 gv0)), (Permutation (a2 :: gv0) (heap_delete_max a2)), (Permutation (a2 :: gv0) (heap_delete_max a1)), (Permutation (a2 :: gv0) (heap_delete_max c)), (Permutation (a2 :: gv0) (join p p a2)), (Permutation (a2 :: gv0) (join p p a1)), (Permutation (a2 :: gv0) (join p p c)), (Permutation (a2 :: gv0) (join p gv0 a2)), (Permutation (a2 :: gv0) (join p gv0 a1)), (Permutation (a2 :: gv0) (join p gv0 c))
(Permutation (a2 :: gv0) (join gv0 p a2)), (Permutation (a2 :: gv0) (join gv0 p a1)), (Permutation (a2 :: gv0) (join gv0 p c)), (Permutation (a2 :: gv0) (join gv0 gv0 a2)), (Permutation (a2 :: gv0) (join gv0 gv0 a1)), (Permutation (a2 :: gv0) (join gv0 gv0 c)), (Permutation (a2 :: gv0) (insert n0 p)), (Permutation (a2 :: gv0) (insert n0 gv0)), (Permutation (a2 :: gv0) (insert n p)), (Permutation (a2 :: gv0) (insert n gv0))
(Permutation (a2 :: gv0) (carry p a2)), (Permutation (a2 :: gv0) (carry p a1)), (Permutation (a2 :: gv0) (carry p c)), (Permutation (a2 :: gv0) (carry gv0 a2)), (Permutation (a2 :: gv0) (carry gv0 a1)), (Permutation (a2 :: gv0) (carry gv0 c)), (Permutation (a2 :: gv0) (p ++ p)), (Permutation (a2 :: gv0) (p ++ gv0)), (Permutation (a2 :: gv0) (gv0 ++ p)), (Permutation (a2 :: gv0) (gv0 ++ gv0))
(Permutation (a2 :: gv0) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) gv0), (Permutation (a1 :: p) (a2 :: p)), (Permutation (a1 :: p) (a2 :: gv0)), (Permutation (a1 :: p) (a1 :: gv0)), (Permutation (a1 :: p) (c :: p)), (Permutation (a1 :: p) (c :: gv0)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (merge p gv0))
(Permutation (a1 :: p) (merge gv0 p)), (Permutation (a1 :: p) (merge gv0 gv0)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max c)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p c)), (Permutation (a1 :: p) (join p gv0 a2)), (Permutation (a1 :: p) (join p gv0 a1))
(Permutation (a1 :: p) (join p gv0 c)), (Permutation (a1 :: p) (join gv0 p a2)), (Permutation (a1 :: p) (join gv0 p a1)), (Permutation (a1 :: p) (join gv0 p c)), (Permutation (a1 :: p) (join gv0 gv0 a2)), (Permutation (a1 :: p) (join gv0 gv0 a1)), (Permutation (a1 :: p) (join gv0 gv0 c)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n0 gv0)), (Permutation (a1 :: p) (insert n p))
(Permutation (a1 :: p) (insert n gv0)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p c)), (Permutation (a1 :: p) (carry gv0 a2)), (Permutation (a1 :: p) (carry gv0 a1)), (Permutation (a1 :: p) (carry gv0 c)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) (p ++ gv0)), (Permutation (a1 :: p) (gv0 ++ p))
(Permutation (a1 :: p) (gv0 ++ gv0)), (Permutation (a1 :: p) []), (Permutation (a1 :: gv0) p), (Permutation (a1 :: gv0) gv0), (Permutation (a1 :: gv0) (a2 :: p)), (Permutation (a1 :: gv0) (a2 :: gv0)), (Permutation (a1 :: gv0) (a1 :: p)), (Permutation (a1 :: gv0) (c :: p)), (Permutation (a1 :: gv0) (c :: gv0)), (Permutation (a1 :: gv0) (merge p p))
(Permutation (a1 :: gv0) (merge p gv0)), (Permutation (a1 :: gv0) (merge gv0 p)), (Permutation (a1 :: gv0) (merge gv0 gv0)), (Permutation (a1 :: gv0) (heap_delete_max a2)), (Permutation (a1 :: gv0) (heap_delete_max a1)), (Permutation (a1 :: gv0) (heap_delete_max c)), (Permutation (a1 :: gv0) (join p p a2)), (Permutation (a1 :: gv0) (join p p a1)), (Permutation (a1 :: gv0) (join p p c)), (Permutation (a1 :: gv0) (join p gv0 a2))
(Permutation (a1 :: gv0) (join p gv0 a1)), (Permutation (a1 :: gv0) (join p gv0 c)), (Permutation (a1 :: gv0) (join gv0 p a2)), (Permutation (a1 :: gv0) (join gv0 p a1)), (Permutation (a1 :: gv0) (join gv0 p c)), (Permutation (a1 :: gv0) (join gv0 gv0 a2)), (Permutation (a1 :: gv0) (join gv0 gv0 a1)), (Permutation (a1 :: gv0) (join gv0 gv0 c)), (Permutation (a1 :: gv0) (insert n0 p)), (Permutation (a1 :: gv0) (insert n0 gv0))
(Permutation (a1 :: gv0) (insert n p)), (Permutation (a1 :: gv0) (insert n gv0)), (Permutation (a1 :: gv0) (carry p a2)), (Permutation (a1 :: gv0) (carry p a1)), (Permutation (a1 :: gv0) (carry p c)), (Permutation (a1 :: gv0) (carry gv0 a2)), (Permutation (a1 :: gv0) (carry gv0 a1)), (Permutation (a1 :: gv0) (carry gv0 c)), (Permutation (a1 :: gv0) (p ++ p)), (Permutation (a1 :: gv0) (p ++ gv0))
(Permutation (a1 :: gv0) (gv0 ++ p)), (Permutation (a1 :: gv0) (gv0 ++ gv0)), (Permutation (a1 :: gv0) []), (Permutation (c :: p) p), (Permutation (c :: p) gv0), (Permutation (c :: p) (a2 :: p)), (Permutation (c :: p) (a2 :: gv0)), (Permutation (c :: p) (a1 :: p)), (Permutation (c :: p) (a1 :: gv0)), (Permutation (c :: p) (c :: gv0))
(Permutation (c :: p) (merge p p)), (Permutation (c :: p) (merge p gv0)), (Permutation (c :: p) (merge gv0 p)), (Permutation (c :: p) (merge gv0 gv0)), (Permutation (c :: p) (heap_delete_max a2)), (Permutation (c :: p) (heap_delete_max a1)), (Permutation (c :: p) (heap_delete_max c)), (Permutation (c :: p) (join p p a2)), (Permutation (c :: p) (join p p a1)), (Permutation (c :: p) (join p p c))
(Permutation (c :: p) (join p gv0 a2)), (Permutation (c :: p) (join p gv0 a1)), (Permutation (c :: p) (join p gv0 c)), (Permutation (c :: p) (join gv0 p a2)), (Permutation (c :: p) (join gv0 p a1)), (Permutation (c :: p) (join gv0 p c)), (Permutation (c :: p) (join gv0 gv0 a2)), (Permutation (c :: p) (join gv0 gv0 a1)), (Permutation (c :: p) (join gv0 gv0 c)), (Permutation (c :: p) (insert n0 p))
(Permutation (c :: p) (insert n0 gv0)), (Permutation (c :: p) (insert n p)), (Permutation (c :: p) (insert n gv0)), (Permutation (c :: p) (carry p a2)), (Permutation (c :: p) (carry p a1)), (Permutation (c :: p) (carry p c)), (Permutation (c :: p) (carry gv0 a2)), (Permutation (c :: p) (carry gv0 a1)), (Permutation (c :: p) (carry gv0 c)), (Permutation (c :: p) (p ++ p))
(Permutation (c :: p) (p ++ gv0)), (Permutation (c :: p) (gv0 ++ p)), (Permutation (c :: p) (gv0 ++ gv0)), (Permutation (c :: p) []), (Permutation (c :: gv0) p), (Permutation (c :: gv0) gv0), (Permutation (c :: gv0) (a2 :: p)), (Permutation (c :: gv0) (a2 :: gv0)), (Permutation (c :: gv0) (a1 :: p)), (Permutation (c :: gv0) (a1 :: gv0))
(Permutation (c :: gv0) (c :: p)), (Permutation (c :: gv0) (merge p p)), (Permutation (c :: gv0) (merge p gv0)), (Permutation (c :: gv0) (merge gv0 p)), (Permutation (c :: gv0) (merge gv0 gv0)), (Permutation (c :: gv0) (heap_delete_max a2)), (Permutation (c :: gv0) (heap_delete_max a1)), (Permutation (c :: gv0) (heap_delete_max c)), (Permutation (c :: gv0) (join p p a2)), (Permutation (c :: gv0) (join p p a1))
(Permutation (c :: gv0) (join p p c)), (Permutation (c :: gv0) (join p gv0 a2)), (Permutation (c :: gv0) (join p gv0 a1)), (Permutation (c :: gv0) (join p gv0 c)), (Permutation (c :: gv0) (join gv0 p a2)), (Permutation (c :: gv0) (join gv0 p a1)), (Permutation (c :: gv0) (join gv0 p c)), (Permutation (c :: gv0) (join gv0 gv0 a2)), (Permutation (c :: gv0) (join gv0 gv0 a1)), (Permutation (c :: gv0) (join gv0 gv0 c))
(Permutation (c :: gv0) (insert n0 p)), (Permutation (c :: gv0) (insert n0 gv0)), (Permutation (c :: gv0) (insert n p)), (Permutation (c :: gv0) (insert n gv0)), (Permutation (c :: gv0) (carry p a2)), (Permutation (c :: gv0) (carry p a1)), (Permutation (c :: gv0) (carry p c)), (Permutation (c :: gv0) (carry gv0 a2)), (Permutation (c :: gv0) (carry gv0 a1)), (Permutation (c :: gv0) (carry gv0 c))
(Permutation (c :: gv0) (p ++ p)), (Permutation (c :: gv0) (p ++ gv0)), (Permutation (c :: gv0) (gv0 ++ p)), (Permutation (c :: gv0) (gv0 ++ gv0)), (Permutation (c :: gv0) []), (Permutation (merge p p) p), (Permutation (merge p p) gv0), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a2 :: gv0)), (Permutation (merge p p) (a1 :: p))
(Permutation (merge p p) (a1 :: gv0)), (Permutation (merge p p) (c :: p)), (Permutation (merge p p) (c :: gv0)), (Permutation (merge p p) (merge p gv0)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (heap_delete_max c)), (Permutation (merge p p) (join p p a2))
(Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p c)), (Permutation (merge p p) (join p gv0 a2)), (Permutation (merge p p) (join p gv0 a1)), (Permutation (merge p p) (join p gv0 c)), (Permutation (merge p p) (join gv0 p a2)), (Permutation (merge p p) (join gv0 p a1)), (Permutation (merge p p) (join gv0 p c)), (Permutation (merge p p) (join gv0 gv0 a2)), (Permutation (merge p p) (join gv0 gv0 a1))
(Permutation (merge p p) (join gv0 gv0 c)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n0 gv0)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (insert n gv0)), (Permutation (merge p p) (carry p a2)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p c)), (Permutation (merge p p) (carry gv0 a2)), (Permutation (merge p p) (carry gv0 a1))
(Permutation (merge p p) (carry gv0 c)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) []), (Permutation (merge p gv0) p), (Permutation (merge p gv0) gv0), (Permutation (merge p gv0) (a2 :: p)), (Permutation (merge p gv0) (a2 :: gv0))
(Permutation (merge p gv0) (a1 :: p)), (Permutation (merge p gv0) (a1 :: gv0)), (Permutation (merge p gv0) (c :: p)), (Permutation (merge p gv0) (c :: gv0)), (Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge gv0 p)), (Permutation (merge p gv0) (merge gv0 gv0)), (Permutation (merge p gv0) (heap_delete_max a2)), (Permutation (merge p gv0) (heap_delete_max a1)), (Permutation (merge p gv0) (heap_delete_max c))
(Permutation (merge p gv0) (join p p a2)), (Permutation (merge p gv0) (join p p a1)), (Permutation (merge p gv0) (join p p c)), (Permutation (merge p gv0) (join p gv0 a2)), (Permutation (merge p gv0) (join p gv0 a1)), (Permutation (merge p gv0) (join p gv0 c)), (Permutation (merge p gv0) (join gv0 p a2)), (Permutation (merge p gv0) (join gv0 p a1)), (Permutation (merge p gv0) (join gv0 p c)), (Permutation (merge p gv0) (join gv0 gv0 a2))
(Permutation (merge p gv0) (join gv0 gv0 a1)), (Permutation (merge p gv0) (join gv0 gv0 c)), (Permutation (merge p gv0) (insert n0 p)), (Permutation (merge p gv0) (insert n0 gv0)), (Permutation (merge p gv0) (insert n p)), (Permutation (merge p gv0) (insert n gv0)), (Permutation (merge p gv0) (carry p a2)), (Permutation (merge p gv0) (carry p a1)), (Permutation (merge p gv0) (carry p c)), (Permutation (merge p gv0) (carry gv0 a2))
(Permutation (merge p gv0) (carry gv0 a1)), (Permutation (merge p gv0) (carry gv0 c)), (Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ gv0)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) []), (Permutation (merge gv0 p) p), (Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) (a2 :: p))
(Permutation (merge gv0 p) (a2 :: gv0)), (Permutation (merge gv0 p) (a1 :: p)), (Permutation (merge gv0 p) (a1 :: gv0)), (Permutation (merge gv0 p) (c :: p)), (Permutation (merge gv0 p) (c :: gv0)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p gv0)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (heap_delete_max a2)), (Permutation (merge gv0 p) (heap_delete_max a1))
(Permutation (merge gv0 p) (heap_delete_max c)), (Permutation (merge gv0 p) (join p p a2)), (Permutation (merge gv0 p) (join p p a1)), (Permutation (merge gv0 p) (join p p c)), (Permutation (merge gv0 p) (join p gv0 a2)), (Permutation (merge gv0 p) (join p gv0 a1)), (Permutation (merge gv0 p) (join p gv0 c)), (Permutation (merge gv0 p) (join gv0 p a2)), (Permutation (merge gv0 p) (join gv0 p a1)), (Permutation (merge gv0 p) (join gv0 p c))
(Permutation (merge gv0 p) (join gv0 gv0 a2)), (Permutation (merge gv0 p) (join gv0 gv0 a1)), (Permutation (merge gv0 p) (join gv0 gv0 c)), (Permutation (merge gv0 p) (insert n0 p)), (Permutation (merge gv0 p) (insert n0 gv0)), (Permutation (merge gv0 p) (insert n p)), (Permutation (merge gv0 p) (insert n gv0)), (Permutation (merge gv0 p) (carry p a2)), (Permutation (merge gv0 p) (carry p a1)), (Permutation (merge gv0 p) (carry p c))
(Permutation (merge gv0 p) (carry gv0 a2)), (Permutation (merge gv0 p) (carry gv0 a1)), (Permutation (merge gv0 p) (carry gv0 c)), (Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) []), (Permutation (merge gv0 gv0) p), (Permutation (merge gv0 gv0) gv0)
(Permutation (merge gv0 gv0) (a2 :: p)), (Permutation (merge gv0 gv0) (a2 :: gv0)), (Permutation (merge gv0 gv0) (a1 :: p)), (Permutation (merge gv0 gv0) (a1 :: gv0)), (Permutation (merge gv0 gv0) (c :: p)), (Permutation (merge gv0 gv0) (c :: gv0)), (Permutation (merge gv0 gv0) (merge p p)), (Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (heap_delete_max a2))
(Permutation (merge gv0 gv0) (heap_delete_max a1)), (Permutation (merge gv0 gv0) (heap_delete_max c)), (Permutation (merge gv0 gv0) (join p p a2)), (Permutation (merge gv0 gv0) (join p p a1)), (Permutation (merge gv0 gv0) (join p p c)), (Permutation (merge gv0 gv0) (join p gv0 a2)), (Permutation (merge gv0 gv0) (join p gv0 a1)), (Permutation (merge gv0 gv0) (join p gv0 c)), (Permutation (merge gv0 gv0) (join gv0 p a2)), (Permutation (merge gv0 gv0) (join gv0 p a1))
(Permutation (merge gv0 gv0) (join gv0 p c)), (Permutation (merge gv0 gv0) (join gv0 gv0 a2)), (Permutation (merge gv0 gv0) (join gv0 gv0 a1)), (Permutation (merge gv0 gv0) (join gv0 gv0 c)), (Permutation (merge gv0 gv0) (insert n0 p)), (Permutation (merge gv0 gv0) (insert n0 gv0)), (Permutation (merge gv0 gv0) (insert n p)), (Permutation (merge gv0 gv0) (insert n gv0)), (Permutation (merge gv0 gv0) (carry p a2)), (Permutation (merge gv0 gv0) (carry p a1))
(Permutation (merge gv0 gv0) (carry p c)), (Permutation (merge gv0 gv0) (carry gv0 a2)), (Permutation (merge gv0 gv0) (carry gv0 a1)), (Permutation (merge gv0 gv0) (carry gv0 c)), (Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (heap_delete_max a2) p)
(Permutation (heap_delete_max a2) gv0), (Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a2 :: gv0)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (a1 :: gv0)), (Permutation (heap_delete_max a2) (c :: p)), (Permutation (heap_delete_max a2) (c :: gv0)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (merge p gv0)), (Permutation (heap_delete_max a2) (merge gv0 p))
(Permutation (heap_delete_max a2) (merge gv0 gv0)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max c)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p c)), (Permutation (heap_delete_max a2) (join p gv0 a2)), (Permutation (heap_delete_max a2) (join p gv0 a1)), (Permutation (heap_delete_max a2) (join p gv0 c)), (Permutation (heap_delete_max a2) (join gv0 p a2))
(Permutation (heap_delete_max a2) (join gv0 p a1)), (Permutation (heap_delete_max a2) (join gv0 p c)), (Permutation (heap_delete_max a2) (join gv0 gv0 a2)), (Permutation (heap_delete_max a2) (join gv0 gv0 a1)), (Permutation (heap_delete_max a2) (join gv0 gv0 c)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n0 gv0)), (Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (insert n gv0)), (Permutation (heap_delete_max a2) (carry p a2))
(Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p c)), (Permutation (heap_delete_max a2) (carry gv0 a2)), (Permutation (heap_delete_max a2) (carry gv0 a1)), (Permutation (heap_delete_max a2) (carry gv0 c)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) (p ++ gv0)), (Permutation (heap_delete_max a2) (gv0 ++ p)), (Permutation (heap_delete_max a2) (gv0 ++ gv0)), (Permutation (heap_delete_max a2) [])
(Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) gv0), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a2 :: gv0)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (a1 :: gv0)), (Permutation (heap_delete_max a1) (c :: p)), (Permutation (heap_delete_max a1) (c :: gv0)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (merge p gv0))
(Permutation (heap_delete_max a1) (merge gv0 p)), (Permutation (heap_delete_max a1) (merge gv0 gv0)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max c)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p c)), (Permutation (heap_delete_max a1) (join p gv0 a2)), (Permutation (heap_delete_max a1) (join p gv0 a1)), (Permutation (heap_delete_max a1) (join p gv0 c))
(Permutation (heap_delete_max a1) (join gv0 p a2)), (Permutation (heap_delete_max a1) (join gv0 p a1)), (Permutation (heap_delete_max a1) (join gv0 p c)), (Permutation (heap_delete_max a1) (join gv0 gv0 a2)), (Permutation (heap_delete_max a1) (join gv0 gv0 a1)), (Permutation (heap_delete_max a1) (join gv0 gv0 c)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n0 gv0)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (insert n gv0))
(Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p c)), (Permutation (heap_delete_max a1) (carry gv0 a2)), (Permutation (heap_delete_max a1) (carry gv0 a1)), (Permutation (heap_delete_max a1) (carry gv0 c)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) (p ++ gv0)), (Permutation (heap_delete_max a1) (gv0 ++ p)), (Permutation (heap_delete_max a1) (gv0 ++ gv0))
(Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max c) p), (Permutation (heap_delete_max c) gv0), (Permutation (heap_delete_max c) (a2 :: p)), (Permutation (heap_delete_max c) (a2 :: gv0)), (Permutation (heap_delete_max c) (a1 :: p)), (Permutation (heap_delete_max c) (a1 :: gv0)), (Permutation (heap_delete_max c) (c :: p)), (Permutation (heap_delete_max c) (c :: gv0)), (Permutation (heap_delete_max c) (merge p p))
(Permutation (heap_delete_max c) (merge p gv0)), (Permutation (heap_delete_max c) (merge gv0 p)), (Permutation (heap_delete_max c) (merge gv0 gv0)), (Permutation (heap_delete_max c) (heap_delete_max a2)), (Permutation (heap_delete_max c) (heap_delete_max a1)), (Permutation (heap_delete_max c) (join p p a2)), (Permutation (heap_delete_max c) (join p p a1)), (Permutation (heap_delete_max c) (join p p c)), (Permutation (heap_delete_max c) (join p gv0 a2)), (Permutation (heap_delete_max c) (join p gv0 a1))
(Permutation (heap_delete_max c) (join p gv0 c)), (Permutation (heap_delete_max c) (join gv0 p a2)), (Permutation (heap_delete_max c) (join gv0 p a1)), (Permutation (heap_delete_max c) (join gv0 p c)), (Permutation (heap_delete_max c) (join gv0 gv0 a2)), (Permutation (heap_delete_max c) (join gv0 gv0 a1)), (Permutation (heap_delete_max c) (join gv0 gv0 c)), (Permutation (heap_delete_max c) (insert n0 p)), (Permutation (heap_delete_max c) (insert n0 gv0)), (Permutation (heap_delete_max c) (insert n p))
(Permutation (heap_delete_max c) (insert n gv0)), (Permutation (heap_delete_max c) (carry p a2)), (Permutation (heap_delete_max c) (carry p a1)), (Permutation (heap_delete_max c) (carry p c)), (Permutation (heap_delete_max c) (carry gv0 a2)), (Permutation (heap_delete_max c) (carry gv0 a1)), (Permutation (heap_delete_max c) (carry gv0 c)), (Permutation (heap_delete_max c) (p ++ p)), (Permutation (heap_delete_max c) (p ++ gv0)), (Permutation (heap_delete_max c) (gv0 ++ p))
(Permutation (heap_delete_max c) (gv0 ++ gv0)), (Permutation (heap_delete_max c) []), (Permutation (join p p a2) p), (Permutation (join p p a2) gv0), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a2 :: gv0)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (a1 :: gv0)), (Permutation (join p p a2) (c :: p)), (Permutation (join p p a2) (c :: gv0))
(Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (merge p gv0)), (Permutation (join p p a2) (merge gv0 p)), (Permutation (join p p a2) (merge gv0 gv0)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max c)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p c)), (Permutation (join p p a2) (join p gv0 a2))
(Permutation (join p p a2) (join p gv0 a1)), (Permutation (join p p a2) (join p gv0 c)), (Permutation (join p p a2) (join gv0 p a2)), (Permutation (join p p a2) (join gv0 p a1)), (Permutation (join p p a2) (join gv0 p c)), (Permutation (join p p a2) (join gv0 gv0 a2)), (Permutation (join p p a2) (join gv0 gv0 a1)), (Permutation (join p p a2) (join gv0 gv0 c)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n0 gv0))
(Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (insert n gv0)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p c)), (Permutation (join p p a2) (carry gv0 a2)), (Permutation (join p p a2) (carry gv0 a1)), (Permutation (join p p a2) (carry gv0 c)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) (p ++ gv0))
(Permutation (join p p a2) (gv0 ++ p)), (Permutation (join p p a2) (gv0 ++ gv0)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) gv0), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a2 :: gv0)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (a1 :: gv0)), (Permutation (join p p a1) (c :: p))
(Permutation (join p p a1) (c :: gv0)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (merge p gv0)), (Permutation (join p p a1) (merge gv0 p)), (Permutation (join p p a1) (merge gv0 gv0)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max c)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p c))
(Permutation (join p p a1) (join p gv0 a2)), (Permutation (join p p a1) (join p gv0 a1)), (Permutation (join p p a1) (join p gv0 c)), (Permutation (join p p a1) (join gv0 p a2)), (Permutation (join p p a1) (join gv0 p a1)), (Permutation (join p p a1) (join gv0 p c)), (Permutation (join p p a1) (join gv0 gv0 a2)), (Permutation (join p p a1) (join gv0 gv0 a1)), (Permutation (join p p a1) (join gv0 gv0 c)), (Permutation (join p p a1) (insert n0 p))
(Permutation (join p p a1) (insert n0 gv0)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (insert n gv0)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p c)), (Permutation (join p p a1) (carry gv0 a2)), (Permutation (join p p a1) (carry gv0 a1)), (Permutation (join p p a1) (carry gv0 c)), (Permutation (join p p a1) (p ++ p))
(Permutation (join p p a1) (p ++ gv0)), (Permutation (join p p a1) (gv0 ++ p)), (Permutation (join p p a1) (gv0 ++ gv0)), (Permutation (join p p a1) []), (Permutation (join p p c) p), (Permutation (join p p c) gv0), (Permutation (join p p c) (a2 :: p)), (Permutation (join p p c) (a2 :: gv0)), (Permutation (join p p c) (a1 :: p)), (Permutation (join p p c) (a1 :: gv0))
(Permutation (join p p c) (c :: p)), (Permutation (join p p c) (c :: gv0)), (Permutation (join p p c) (merge p p)), (Permutation (join p p c) (merge p gv0)), (Permutation (join p p c) (merge gv0 p)), (Permutation (join p p c) (merge gv0 gv0)), (Permutation (join p p c) (heap_delete_max a2)), (Permutation (join p p c) (heap_delete_max a1)), (Permutation (join p p c) (heap_delete_max c)), (Permutation (join p p c) (join p p a2))
(Permutation (join p p c) (join p p a1)), (Permutation (join p p c) (join p gv0 a2)), (Permutation (join p p c) (join p gv0 a1)), (Permutation (join p p c) (join p gv0 c)), (Permutation (join p p c) (join gv0 p a2)), (Permutation (join p p c) (join gv0 p a1)), (Permutation (join p p c) (join gv0 p c)), (Permutation (join p p c) (join gv0 gv0 a2)), (Permutation (join p p c) (join gv0 gv0 a1)), (Permutation (join p p c) (join gv0 gv0 c))
(Permutation (join p p c) (insert n0 p)), (Permutation (join p p c) (insert n0 gv0)), (Permutation (join p p c) (insert n p)), (Permutation (join p p c) (insert n gv0)), (Permutation (join p p c) (carry p a2)), (Permutation (join p p c) (carry p a1)), (Permutation (join p p c) (carry p c)), (Permutation (join p p c) (carry gv0 a2)), (Permutation (join p p c) (carry gv0 a1)), (Permutation (join p p c) (carry gv0 c))
(Permutation (join p p c) (p ++ p)), (Permutation (join p p c) (p ++ gv0)), (Permutation (join p p c) (gv0 ++ p)), (Permutation (join p p c) (gv0 ++ gv0)), (Permutation (join p p c) []), (Permutation (join p gv0 a2) p), (Permutation (join p gv0 a2) gv0), (Permutation (join p gv0 a2) (a2 :: p)), (Permutation (join p gv0 a2) (a2 :: gv0)), (Permutation (join p gv0 a2) (a1 :: p))
(Permutation (join p gv0 a2) (a1 :: gv0)), (Permutation (join p gv0 a2) (c :: p)), (Permutation (join p gv0 a2) (c :: gv0)), (Permutation (join p gv0 a2) (merge p p)), (Permutation (join p gv0 a2) (merge p gv0)), (Permutation (join p gv0 a2) (merge gv0 p)), (Permutation (join p gv0 a2) (merge gv0 gv0)), (Permutation (join p gv0 a2) (heap_delete_max a2)), (Permutation (join p gv0 a2) (heap_delete_max a1)), (Permutation (join p gv0 a2) (heap_delete_max c))
(Permutation (join p gv0 a2) (join p p a2)), (Permutation (join p gv0 a2) (join p p a1)), (Permutation (join p gv0 a2) (join p p c)), (Permutation (join p gv0 a2) (join p gv0 a1)), (Permutation (join p gv0 a2) (join p gv0 c)), (Permutation (join p gv0 a2) (join gv0 p a2)), (Permutation (join p gv0 a2) (join gv0 p a1)), (Permutation (join p gv0 a2) (join gv0 p c)), (Permutation (join p gv0 a2) (join gv0 gv0 a2)), (Permutation (join p gv0 a2) (join gv0 gv0 a1))
(Permutation (join p gv0 a2) (join gv0 gv0 c)), (Permutation (join p gv0 a2) (insert n0 p)), (Permutation (join p gv0 a2) (insert n0 gv0)), (Permutation (join p gv0 a2) (insert n p)), (Permutation (join p gv0 a2) (insert n gv0)), (Permutation (join p gv0 a2) (carry p a2)), (Permutation (join p gv0 a2) (carry p a1)), (Permutation (join p gv0 a2) (carry p c)), (Permutation (join p gv0 a2) (carry gv0 a2)), (Permutation (join p gv0 a2) (carry gv0 a1))
(Permutation (join p gv0 a2) (carry gv0 c)), (Permutation (join p gv0 a2) (p ++ p)), (Permutation (join p gv0 a2) (p ++ gv0)), (Permutation (join p gv0 a2) (gv0 ++ p)), (Permutation (join p gv0 a2) (gv0 ++ gv0)), (Permutation (join p gv0 a2) []), (Permutation (join p gv0 a1) p), (Permutation (join p gv0 a1) gv0), (Permutation (join p gv0 a1) (a2 :: p)), (Permutation (join p gv0 a1) (a2 :: gv0))
(Permutation (join p gv0 a1) (a1 :: p)), (Permutation (join p gv0 a1) (a1 :: gv0)), (Permutation (join p gv0 a1) (c :: p)), (Permutation (join p gv0 a1) (c :: gv0)), (Permutation (join p gv0 a1) (merge p p)), (Permutation (join p gv0 a1) (merge p gv0)), (Permutation (join p gv0 a1) (merge gv0 p)), (Permutation (join p gv0 a1) (merge gv0 gv0)), (Permutation (join p gv0 a1) (heap_delete_max a2)), (Permutation (join p gv0 a1) (heap_delete_max a1))
(Permutation (join p gv0 a1) (heap_delete_max c)), (Permutation (join p gv0 a1) (join p p a2)), (Permutation (join p gv0 a1) (join p p a1)), (Permutation (join p gv0 a1) (join p p c)), (Permutation (join p gv0 a1) (join p gv0 a2)), (Permutation (join p gv0 a1) (join p gv0 c)), (Permutation (join p gv0 a1) (join gv0 p a2)), (Permutation (join p gv0 a1) (join gv0 p a1)), (Permutation (join p gv0 a1) (join gv0 p c)), (Permutation (join p gv0 a1) (join gv0 gv0 a2))
(Permutation (join p gv0 a1) (join gv0 gv0 a1)), (Permutation (join p gv0 a1) (join gv0 gv0 c)), (Permutation (join p gv0 a1) (insert n0 p)), (Permutation (join p gv0 a1) (insert n0 gv0)), (Permutation (join p gv0 a1) (insert n p)), (Permutation (join p gv0 a1) (insert n gv0)), (Permutation (join p gv0 a1) (carry p a2)), (Permutation (join p gv0 a1) (carry p a1)), (Permutation (join p gv0 a1) (carry p c)), (Permutation (join p gv0 a1) (carry gv0 a2))
(Permutation (join p gv0 a1) (carry gv0 a1)), (Permutation (join p gv0 a1) (carry gv0 c)), (Permutation (join p gv0 a1) (p ++ p)), (Permutation (join p gv0 a1) (p ++ gv0)), (Permutation (join p gv0 a1) (gv0 ++ p)), (Permutation (join p gv0 a1) (gv0 ++ gv0)), (Permutation (join p gv0 a1) []), (Permutation (join p gv0 c) p), (Permutation (join p gv0 c) gv0), (Permutation (join p gv0 c) (a2 :: p))
(Permutation (join p gv0 c) (a2 :: gv0)), (Permutation (join p gv0 c) (a1 :: p)), (Permutation (join p gv0 c) (a1 :: gv0)), (Permutation (join p gv0 c) (c :: p)), (Permutation (join p gv0 c) (c :: gv0)), (Permutation (join p gv0 c) (merge p p)), (Permutation (join p gv0 c) (merge p gv0)), (Permutation (join p gv0 c) (merge gv0 p)), (Permutation (join p gv0 c) (merge gv0 gv0)), (Permutation (join p gv0 c) (heap_delete_max a2))
(Permutation (join p gv0 c) (heap_delete_max a1)), (Permutation (join p gv0 c) (heap_delete_max c)), (Permutation (join p gv0 c) (join p p a2)), (Permutation (join p gv0 c) (join p p a1)), (Permutation (join p gv0 c) (join p p c)), (Permutation (join p gv0 c) (join p gv0 a2)), (Permutation (join p gv0 c) (join p gv0 a1)), (Permutation (join p gv0 c) (join gv0 p a2)), (Permutation (join p gv0 c) (join gv0 p a1)), (Permutation (join p gv0 c) (join gv0 p c))
(Permutation (join p gv0 c) (join gv0 gv0 a2)), (Permutation (join p gv0 c) (join gv0 gv0 a1)), (Permutation (join p gv0 c) (join gv0 gv0 c)), (Permutation (join p gv0 c) (insert n0 p)), (Permutation (join p gv0 c) (insert n0 gv0)), (Permutation (join p gv0 c) (insert n p)), (Permutation (join p gv0 c) (insert n gv0)), (Permutation (join p gv0 c) (carry p a2)), (Permutation (join p gv0 c) (carry p a1)), (Permutation (join p gv0 c) (carry p c))
(Permutation (join p gv0 c) (carry gv0 a2)), (Permutation (join p gv0 c) (carry gv0 a1)), (Permutation (join p gv0 c) (carry gv0 c)), (Permutation (join p gv0 c) (p ++ p)), (Permutation (join p gv0 c) (p ++ gv0)), (Permutation (join p gv0 c) (gv0 ++ p)), (Permutation (join p gv0 c) (gv0 ++ gv0)), (Permutation (join p gv0 c) []), (Permutation (join gv0 p a2) p), (Permutation (join gv0 p a2) gv0)
(Permutation (join gv0 p a2) (a2 :: p)), (Permutation (join gv0 p a2) (a2 :: gv0)), (Permutation (join gv0 p a2) (a1 :: p)), (Permutation (join gv0 p a2) (a1 :: gv0)), (Permutation (join gv0 p a2) (c :: p)), (Permutation (join gv0 p a2) (c :: gv0)), (Permutation (join gv0 p a2) (merge p p)), (Permutation (join gv0 p a2) (merge p gv0)), (Permutation (join gv0 p a2) (merge gv0 p)), (Permutation (join gv0 p a2) (merge gv0 gv0))
(Permutation (join gv0 p a2) (heap_delete_max a2)), (Permutation (join gv0 p a2) (heap_delete_max a1)), (Permutation (join gv0 p a2) (heap_delete_max c)), (Permutation (join gv0 p a2) (join p p a2)), (Permutation (join gv0 p a2) (join p p a1)), (Permutation (join gv0 p a2) (join p p c)), (Permutation (join gv0 p a2) (join p gv0 a2)), (Permutation (join gv0 p a2) (join p gv0 a1)), (Permutation (join gv0 p a2) (join p gv0 c)), (Permutation (join gv0 p a2) (join gv0 p a1))
(Permutation (join gv0 p a2) (join gv0 p c)), (Permutation (join gv0 p a2) (join gv0 gv0 a2)), (Permutation (join gv0 p a2) (join gv0 gv0 a1)), (Permutation (join gv0 p a2) (join gv0 gv0 c)), (Permutation (join gv0 p a2) (insert n0 p)), (Permutation (join gv0 p a2) (insert n0 gv0)), (Permutation (join gv0 p a2) (insert n p)), (Permutation (join gv0 p a2) (insert n gv0)), (Permutation (join gv0 p a2) (carry p a2)), (Permutation (join gv0 p a2) (carry p a1))
(Permutation (join gv0 p a2) (carry p c)), (Permutation (join gv0 p a2) (carry gv0 a2)), (Permutation (join gv0 p a2) (carry gv0 a1)), (Permutation (join gv0 p a2) (carry gv0 c)), (Permutation (join gv0 p a2) (p ++ p)), (Permutation (join gv0 p a2) (p ++ gv0)), (Permutation (join gv0 p a2) (gv0 ++ p)), (Permutation (join gv0 p a2) (gv0 ++ gv0)), (Permutation (join gv0 p a2) []), (Permutation (join gv0 p a1) p)
(Permutation (join gv0 p a1) gv0), (Permutation (join gv0 p a1) (a2 :: p)), (Permutation (join gv0 p a1) (a2 :: gv0)), (Permutation (join gv0 p a1) (a1 :: p)), (Permutation (join gv0 p a1) (a1 :: gv0)), (Permutation (join gv0 p a1) (c :: p)), (Permutation (join gv0 p a1) (c :: gv0)), (Permutation (join gv0 p a1) (merge p p)), (Permutation (join gv0 p a1) (merge p gv0)), (Permutation (join gv0 p a1) (merge gv0 p))
(Permutation (join gv0 p a1) (merge gv0 gv0)), (Permutation (join gv0 p a1) (heap_delete_max a2)), (Permutation (join gv0 p a1) (heap_delete_max a1)), (Permutation (join gv0 p a1) (heap_delete_max c)), (Permutation (join gv0 p a1) (join p p a2)), (Permutation (join gv0 p a1) (join p p a1)), (Permutation (join gv0 p a1) (join p p c)), (Permutation (join gv0 p a1) (join p gv0 a2)), (Permutation (join gv0 p a1) (join p gv0 a1)), (Permutation (join gv0 p a1) (join p gv0 c))
(Permutation (join gv0 p a1) (join gv0 p a2)), (Permutation (join gv0 p a1) (join gv0 p c)), (Permutation (join gv0 p a1) (join gv0 gv0 a2)), (Permutation (join gv0 p a1) (join gv0 gv0 a1)), (Permutation (join gv0 p a1) (join gv0 gv0 c)), (Permutation (join gv0 p a1) (insert n0 p)), (Permutation (join gv0 p a1) (insert n0 gv0)), (Permutation (join gv0 p a1) (insert n p)), (Permutation (join gv0 p a1) (insert n gv0)), (Permutation (join gv0 p a1) (carry p a2))
(Permutation (join gv0 p a1) (carry p a1)), (Permutation (join gv0 p a1) (carry p c)), (Permutation (join gv0 p a1) (carry gv0 a2)), (Permutation (join gv0 p a1) (carry gv0 a1)), (Permutation (join gv0 p a1) (carry gv0 c)), (Permutation (join gv0 p a1) (p ++ p)), (Permutation (join gv0 p a1) (p ++ gv0)), (Permutation (join gv0 p a1) (gv0 ++ p)), (Permutation (join gv0 p a1) (gv0 ++ gv0)), (Permutation (join gv0 p a1) [])
(Permutation (join gv0 p c) p), (Permutation (join gv0 p c) gv0), (Permutation (join gv0 p c) (a2 :: p)), (Permutation (join gv0 p c) (a2 :: gv0)), (Permutation (join gv0 p c) (a1 :: p)), (Permutation (join gv0 p c) (a1 :: gv0)), (Permutation (join gv0 p c) (c :: p)), (Permutation (join gv0 p c) (c :: gv0)), (Permutation (join gv0 p c) (merge p p)), (Permutation (join gv0 p c) (merge p gv0))
(Permutation (join gv0 p c) (merge gv0 p)), (Permutation (join gv0 p c) (merge gv0 gv0)), (Permutation (join gv0 p c) (heap_delete_max a2)), (Permutation (join gv0 p c) (heap_delete_max a1)), (Permutation (join gv0 p c) (heap_delete_max c)), (Permutation (join gv0 p c) (join p p a2)), (Permutation (join gv0 p c) (join p p a1)), (Permutation (join gv0 p c) (join p p c)), (Permutation (join gv0 p c) (join p gv0 a2)), (Permutation (join gv0 p c) (join p gv0 a1))
(Permutation (join gv0 p c) (join p gv0 c)), (Permutation (join gv0 p c) (join gv0 p a2)), (Permutation (join gv0 p c) (join gv0 p a1)), (Permutation (join gv0 p c) (join gv0 gv0 a2)), (Permutation (join gv0 p c) (join gv0 gv0 a1)), (Permutation (join gv0 p c) (join gv0 gv0 c)), (Permutation (join gv0 p c) (insert n0 p)), (Permutation (join gv0 p c) (insert n0 gv0)), (Permutation (join gv0 p c) (insert n p)), (Permutation (join gv0 p c) (insert n gv0))
(Permutation (join gv0 p c) (carry p a2)), (Permutation (join gv0 p c) (carry p a1)), (Permutation (join gv0 p c) (carry p c)), (Permutation (join gv0 p c) (carry gv0 a2)), (Permutation (join gv0 p c) (carry gv0 a1)), (Permutation (join gv0 p c) (carry gv0 c)), (Permutation (join gv0 p c) (p ++ p)), (Permutation (join gv0 p c) (p ++ gv0)), (Permutation (join gv0 p c) (gv0 ++ p)), (Permutation (join gv0 p c) (gv0 ++ gv0))
(Permutation (join gv0 p c) []), (Permutation (join gv0 gv0 a2) p), (Permutation (join gv0 gv0 a2) gv0), (Permutation (join gv0 gv0 a2) (a2 :: p)), (Permutation (join gv0 gv0 a2) (a2 :: gv0)), (Permutation (join gv0 gv0 a2) (a1 :: p)), (Permutation (join gv0 gv0 a2) (a1 :: gv0)), (Permutation (join gv0 gv0 a2) (c :: p)), (Permutation (join gv0 gv0 a2) (c :: gv0)), (Permutation (join gv0 gv0 a2) (merge p p))
(Permutation (join gv0 gv0 a2) (merge p gv0)), (Permutation (join gv0 gv0 a2) (merge gv0 p)), (Permutation (join gv0 gv0 a2) (merge gv0 gv0)), (Permutation (join gv0 gv0 a2) (heap_delete_max a2)), (Permutation (join gv0 gv0 a2) (heap_delete_max a1)), (Permutation (join gv0 gv0 a2) (heap_delete_max c)), (Permutation (join gv0 gv0 a2) (join p p a2)), (Permutation (join gv0 gv0 a2) (join p p a1)), (Permutation (join gv0 gv0 a2) (join p p c)), (Permutation (join gv0 gv0 a2) (join p gv0 a2))
(Permutation (join gv0 gv0 a2) (join p gv0 a1)), (Permutation (join gv0 gv0 a2) (join p gv0 c)), (Permutation (join gv0 gv0 a2) (join gv0 p a2)), (Permutation (join gv0 gv0 a2) (join gv0 p a1)), (Permutation (join gv0 gv0 a2) (join gv0 p c)), (Permutation (join gv0 gv0 a2) (join gv0 gv0 a1)), (Permutation (join gv0 gv0 a2) (join gv0 gv0 c)), (Permutation (join gv0 gv0 a2) (insert n0 p)), (Permutation (join gv0 gv0 a2) (insert n0 gv0)), (Permutation (join gv0 gv0 a2) (insert n p))
(Permutation (join gv0 gv0 a2) (insert n gv0)), (Permutation (join gv0 gv0 a2) (carry p a2)), (Permutation (join gv0 gv0 a2) (carry p a1)), (Permutation (join gv0 gv0 a2) (carry p c)), (Permutation (join gv0 gv0 a2) (carry gv0 a2)), (Permutation (join gv0 gv0 a2) (carry gv0 a1)), (Permutation (join gv0 gv0 a2) (carry gv0 c)), (Permutation (join gv0 gv0 a2) (p ++ p)), (Permutation (join gv0 gv0 a2) (p ++ gv0)), (Permutation (join gv0 gv0 a2) (gv0 ++ p))
(Permutation (join gv0 gv0 a2) (gv0 ++ gv0)), (Permutation (join gv0 gv0 a2) []), (Permutation (join gv0 gv0 a1) p), (Permutation (join gv0 gv0 a1) gv0), (Permutation (join gv0 gv0 a1) (a2 :: p)), (Permutation (join gv0 gv0 a1) (a2 :: gv0)), (Permutation (join gv0 gv0 a1) (a1 :: p)), (Permutation (join gv0 gv0 a1) (a1 :: gv0)), (Permutation (join gv0 gv0 a1) (c :: p)), (Permutation (join gv0 gv0 a1) (c :: gv0))
(Permutation (join gv0 gv0 a1) (merge p p)), (Permutation (join gv0 gv0 a1) (merge p gv0)), (Permutation (join gv0 gv0 a1) (merge gv0 p)), (Permutation (join gv0 gv0 a1) (merge gv0 gv0)), (Permutation (join gv0 gv0 a1) (heap_delete_max a2)), (Permutation (join gv0 gv0 a1) (heap_delete_max a1)), (Permutation (join gv0 gv0 a1) (heap_delete_max c)), (Permutation (join gv0 gv0 a1) (join p p a2)), (Permutation (join gv0 gv0 a1) (join p p a1)), (Permutation (join gv0 gv0 a1) (join p p c))
(Permutation (join gv0 gv0 a1) (join p gv0 a2)), (Permutation (join gv0 gv0 a1) (join p gv0 a1)), (Permutation (join gv0 gv0 a1) (join p gv0 c)), (Permutation (join gv0 gv0 a1) (join gv0 p a2)), (Permutation (join gv0 gv0 a1) (join gv0 p a1)), (Permutation (join gv0 gv0 a1) (join gv0 p c)), (Permutation (join gv0 gv0 a1) (join gv0 gv0 a2)), (Permutation (join gv0 gv0 a1) (join gv0 gv0 c)), (Permutation (join gv0 gv0 a1) (insert n0 p)), (Permutation (join gv0 gv0 a1) (insert n0 gv0))
(Permutation (join gv0 gv0 a1) (insert n p)), (Permutation (join gv0 gv0 a1) (insert n gv0)), (Permutation (join gv0 gv0 a1) (carry p a2)), (Permutation (join gv0 gv0 a1) (carry p a1)), (Permutation (join gv0 gv0 a1) (carry p c)), (Permutation (join gv0 gv0 a1) (carry gv0 a2)), (Permutation (join gv0 gv0 a1) (carry gv0 a1)), (Permutation (join gv0 gv0 a1) (carry gv0 c)), (Permutation (join gv0 gv0 a1) (p ++ p)), (Permutation (join gv0 gv0 a1) (p ++ gv0))
(Permutation (join gv0 gv0 a1) (gv0 ++ p)), (Permutation (join gv0 gv0 a1) (gv0 ++ gv0)), (Permutation (join gv0 gv0 a1) []), (Permutation (join gv0 gv0 c) p), (Permutation (join gv0 gv0 c) gv0), (Permutation (join gv0 gv0 c) (a2 :: p)), (Permutation (join gv0 gv0 c) (a2 :: gv0)), (Permutation (join gv0 gv0 c) (a1 :: p)), (Permutation (join gv0 gv0 c) (a1 :: gv0)), (Permutation (join gv0 gv0 c) (c :: p))
(Permutation (join gv0 gv0 c) (c :: gv0)), (Permutation (join gv0 gv0 c) (merge p p)), (Permutation (join gv0 gv0 c) (merge p gv0)), (Permutation (join gv0 gv0 c) (merge gv0 p)), (Permutation (join gv0 gv0 c) (merge gv0 gv0)), (Permutation (join gv0 gv0 c) (heap_delete_max a2)), (Permutation (join gv0 gv0 c) (heap_delete_max a1)), (Permutation (join gv0 gv0 c) (heap_delete_max c)), (Permutation (join gv0 gv0 c) (join p p a2)), (Permutation (join gv0 gv0 c) (join p p a1))
(Permutation (join gv0 gv0 c) (join p p c)), (Permutation (join gv0 gv0 c) (join p gv0 a2)), (Permutation (join gv0 gv0 c) (join p gv0 a1)), (Permutation (join gv0 gv0 c) (join p gv0 c)), (Permutation (join gv0 gv0 c) (join gv0 p a2)), (Permutation (join gv0 gv0 c) (join gv0 p a1)), (Permutation (join gv0 gv0 c) (join gv0 p c)), (Permutation (join gv0 gv0 c) (join gv0 gv0 a2)), (Permutation (join gv0 gv0 c) (join gv0 gv0 a1)), (Permutation (join gv0 gv0 c) (insert n0 p))
(Permutation (join gv0 gv0 c) (insert n0 gv0)), (Permutation (join gv0 gv0 c) (insert n p)), (Permutation (join gv0 gv0 c) (insert n gv0)), (Permutation (join gv0 gv0 c) (carry p a2)), (Permutation (join gv0 gv0 c) (carry p a1)), (Permutation (join gv0 gv0 c) (carry p c)), (Permutation (join gv0 gv0 c) (carry gv0 a2)), (Permutation (join gv0 gv0 c) (carry gv0 a1)), (Permutation (join gv0 gv0 c) (carry gv0 c)), (Permutation (join gv0 gv0 c) (p ++ p))
(Permutation (join gv0 gv0 c) (p ++ gv0)), (Permutation (join gv0 gv0 c) (gv0 ++ p)), (Permutation (join gv0 gv0 c) (gv0 ++ gv0)), (Permutation (join gv0 gv0 c) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) gv0), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a2 :: gv0)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (a1 :: gv0))
(Permutation (insert n0 p) (c :: p)), (Permutation (insert n0 p) (c :: gv0)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (merge p gv0)), (Permutation (insert n0 p) (merge gv0 p)), (Permutation (insert n0 p) (merge gv0 gv0)), (Permutation (insert n0 p) (heap_delete_max a2)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max c)), (Permutation (insert n0 p) (join p p a2))
(Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p c)), (Permutation (insert n0 p) (join p gv0 a2)), (Permutation (insert n0 p) (join p gv0 a1)), (Permutation (insert n0 p) (join p gv0 c)), (Permutation (insert n0 p) (join gv0 p a2)), (Permutation (insert n0 p) (join gv0 p a1)), (Permutation (insert n0 p) (join gv0 p c)), (Permutation (insert n0 p) (join gv0 gv0 a2)), (Permutation (insert n0 p) (join gv0 gv0 a1))
(Permutation (insert n0 p) (join gv0 gv0 c)), (Permutation (insert n0 p) (insert n0 gv0)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (insert n gv0)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p c)), (Permutation (insert n0 p) (carry gv0 a2)), (Permutation (insert n0 p) (carry gv0 a1)), (Permutation (insert n0 p) (carry gv0 c))
(Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) (p ++ gv0)), (Permutation (insert n0 p) (gv0 ++ p)), (Permutation (insert n0 p) (gv0 ++ gv0)), (Permutation (insert n0 p) []), (Permutation (insert n0 gv0) p), (Permutation (insert n0 gv0) gv0), (Permutation (insert n0 gv0) (a2 :: p)), (Permutation (insert n0 gv0) (a2 :: gv0)), (Permutation (insert n0 gv0) (a1 :: p))
(Permutation (insert n0 gv0) (a1 :: gv0)), (Permutation (insert n0 gv0) (c :: p)), (Permutation (insert n0 gv0) (c :: gv0)), (Permutation (insert n0 gv0) (merge p p)), (Permutation (insert n0 gv0) (merge p gv0)), (Permutation (insert n0 gv0) (merge gv0 p)), (Permutation (insert n0 gv0) (merge gv0 gv0)), (Permutation (insert n0 gv0) (heap_delete_max a2)), (Permutation (insert n0 gv0) (heap_delete_max a1)), (Permutation (insert n0 gv0) (heap_delete_max c))
(Permutation (insert n0 gv0) (join p p a2)), (Permutation (insert n0 gv0) (join p p a1)), (Permutation (insert n0 gv0) (join p p c)), (Permutation (insert n0 gv0) (join p gv0 a2)), (Permutation (insert n0 gv0) (join p gv0 a1)), (Permutation (insert n0 gv0) (join p gv0 c)), (Permutation (insert n0 gv0) (join gv0 p a2)), (Permutation (insert n0 gv0) (join gv0 p a1)), (Permutation (insert n0 gv0) (join gv0 p c)), (Permutation (insert n0 gv0) (join gv0 gv0 a2))
(Permutation (insert n0 gv0) (join gv0 gv0 a1)), (Permutation (insert n0 gv0) (join gv0 gv0 c)), (Permutation (insert n0 gv0) (insert n0 p)), (Permutation (insert n0 gv0) (insert n p)), (Permutation (insert n0 gv0) (insert n gv0)), (Permutation (insert n0 gv0) (carry p a2)), (Permutation (insert n0 gv0) (carry p a1)), (Permutation (insert n0 gv0) (carry p c)), (Permutation (insert n0 gv0) (carry gv0 a2)), (Permutation (insert n0 gv0) (carry gv0 a1))
(Permutation (insert n0 gv0) (carry gv0 c)), (Permutation (insert n0 gv0) (p ++ p)), (Permutation (insert n0 gv0) (p ++ gv0)), (Permutation (insert n0 gv0) (gv0 ++ p)), (Permutation (insert n0 gv0) (gv0 ++ gv0)), (Permutation (insert n0 gv0) []), (Permutation (insert n p) p), (Permutation (insert n p) gv0), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a2 :: gv0))
(Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (a1 :: gv0)), (Permutation (insert n p) (c :: p)), (Permutation (insert n p) (c :: gv0)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (merge p gv0)), (Permutation (insert n p) (merge gv0 p)), (Permutation (insert n p) (merge gv0 gv0)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1))
(Permutation (insert n p) (heap_delete_max c)), (Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p c)), (Permutation (insert n p) (join p gv0 a2)), (Permutation (insert n p) (join p gv0 a1)), (Permutation (insert n p) (join p gv0 c)), (Permutation (insert n p) (join gv0 p a2)), (Permutation (insert n p) (join gv0 p a1)), (Permutation (insert n p) (join gv0 p c))
(Permutation (insert n p) (join gv0 gv0 a2)), (Permutation (insert n p) (join gv0 gv0 a1)), (Permutation (insert n p) (join gv0 gv0 c)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (insert n0 gv0)), (Permutation (insert n p) (insert n gv0)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p c)), (Permutation (insert n p) (carry gv0 a2))
(Permutation (insert n p) (carry gv0 a1)), (Permutation (insert n p) (carry gv0 c)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) (p ++ gv0)), (Permutation (insert n p) (gv0 ++ p)), (Permutation (insert n p) (gv0 ++ gv0)), (Permutation (insert n p) []), (Permutation (insert n gv0) p), (Permutation (insert n gv0) gv0), (Permutation (insert n gv0) (a2 :: p))
(Permutation (insert n gv0) (a2 :: gv0)), (Permutation (insert n gv0) (a1 :: p)), (Permutation (insert n gv0) (a1 :: gv0)), (Permutation (insert n gv0) (c :: p)), (Permutation (insert n gv0) (c :: gv0)), (Permutation (insert n gv0) (merge p p)), (Permutation (insert n gv0) (merge p gv0)), (Permutation (insert n gv0) (merge gv0 p)), (Permutation (insert n gv0) (merge gv0 gv0)), (Permutation (insert n gv0) (heap_delete_max a2))
(Permutation (insert n gv0) (heap_delete_max a1)), (Permutation (insert n gv0) (heap_delete_max c)), (Permutation (insert n gv0) (join p p a2)), (Permutation (insert n gv0) (join p p a1)), (Permutation (insert n gv0) (join p p c)), (Permutation (insert n gv0) (join p gv0 a2)), (Permutation (insert n gv0) (join p gv0 a1)), (Permutation (insert n gv0) (join p gv0 c)), (Permutation (insert n gv0) (join gv0 p a2)), (Permutation (insert n gv0) (join gv0 p a1))
(Permutation (insert n gv0) (join gv0 p c)), (Permutation (insert n gv0) (join gv0 gv0 a2)), (Permutation (insert n gv0) (join gv0 gv0 a1)), (Permutation (insert n gv0) (join gv0 gv0 c)), (Permutation (insert n gv0) (insert n0 p)), (Permutation (insert n gv0) (insert n0 gv0)), (Permutation (insert n gv0) (insert n p)), (Permutation (insert n gv0) (carry p a2)), (Permutation (insert n gv0) (carry p a1)), (Permutation (insert n gv0) (carry p c))
(Permutation (insert n gv0) (carry gv0 a2)), (Permutation (insert n gv0) (carry gv0 a1)), (Permutation (insert n gv0) (carry gv0 c)), (Permutation (insert n gv0) (p ++ p)), (Permutation (insert n gv0) (p ++ gv0)), (Permutation (insert n gv0) (gv0 ++ p)), (Permutation (insert n gv0) (gv0 ++ gv0)), (Permutation (insert n gv0) []), (Permutation (carry p a2) p), (Permutation (carry p a2) gv0)
(Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a2 :: gv0)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (a1 :: gv0)), (Permutation (carry p a2) (c :: p)), (Permutation (carry p a2) (c :: gv0)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (merge p gv0)), (Permutation (carry p a2) (merge gv0 p)), (Permutation (carry p a2) (merge gv0 gv0))
(Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max c)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (join p p c)), (Permutation (carry p a2) (join p gv0 a2)), (Permutation (carry p a2) (join p gv0 a1)), (Permutation (carry p a2) (join p gv0 c)), (Permutation (carry p a2) (join gv0 p a2))
(Permutation (carry p a2) (join gv0 p a1)), (Permutation (carry p a2) (join gv0 p c)), (Permutation (carry p a2) (join gv0 gv0 a2)), (Permutation (carry p a2) (join gv0 gv0 a1)), (Permutation (carry p a2) (join gv0 gv0 c)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n0 gv0)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (insert n gv0)), (Permutation (carry p a2) (carry p a1))
(Permutation (carry p a2) (carry p c)), (Permutation (carry p a2) (carry gv0 a2)), (Permutation (carry p a2) (carry gv0 a1)), (Permutation (carry p a2) (carry gv0 c)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) (p ++ gv0)), (Permutation (carry p a2) (gv0 ++ p)), (Permutation (carry p a2) (gv0 ++ gv0)), (Permutation (carry p a2) []), (Permutation (carry p a1) p)
(Permutation (carry p a1) gv0), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a2 :: gv0)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (a1 :: gv0)), (Permutation (carry p a1) (c :: p)), (Permutation (carry p a1) (c :: gv0)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (merge p gv0)), (Permutation (carry p a1) (merge gv0 p))
(Permutation (carry p a1) (merge gv0 gv0)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max c)), (Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p c)), (Permutation (carry p a1) (join p gv0 a2)), (Permutation (carry p a1) (join p gv0 a1)), (Permutation (carry p a1) (join p gv0 c))
(Permutation (carry p a1) (join gv0 p a2)), (Permutation (carry p a1) (join gv0 p a1)), (Permutation (carry p a1) (join gv0 p c)), (Permutation (carry p a1) (join gv0 gv0 a2)), (Permutation (carry p a1) (join gv0 gv0 a1)), (Permutation (carry p a1) (join gv0 gv0 c)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n0 gv0)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (insert n gv0))
(Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p c)), (Permutation (carry p a1) (carry gv0 a2)), (Permutation (carry p a1) (carry gv0 a1)), (Permutation (carry p a1) (carry gv0 c)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) (p ++ gv0)), (Permutation (carry p a1) (gv0 ++ p)), (Permutation (carry p a1) (gv0 ++ gv0)), (Permutation (carry p a1) [])
(Permutation (carry p c) p), (Permutation (carry p c) gv0), (Permutation (carry p c) (a2 :: p)), (Permutation (carry p c) (a2 :: gv0)), (Permutation (carry p c) (a1 :: p)), (Permutation (carry p c) (a1 :: gv0)), (Permutation (carry p c) (c :: p)), (Permutation (carry p c) (c :: gv0)), (Permutation (carry p c) (merge p p)), (Permutation (carry p c) (merge p gv0))
(Permutation (carry p c) (merge gv0 p)), (Permutation (carry p c) (merge gv0 gv0)), (Permutation (carry p c) (heap_delete_max a2)), (Permutation (carry p c) (heap_delete_max a1)), (Permutation (carry p c) (heap_delete_max c)), (Permutation (carry p c) (join p p a2)), (Permutation (carry p c) (join p p a1)), (Permutation (carry p c) (join p p c)), (Permutation (carry p c) (join p gv0 a2)), (Permutation (carry p c) (join p gv0 a1))
(Permutation (carry p c) (join p gv0 c)), (Permutation (carry p c) (join gv0 p a2)), (Permutation (carry p c) (join gv0 p a1)), (Permutation (carry p c) (join gv0 p c)), (Permutation (carry p c) (join gv0 gv0 a2)), (Permutation (carry p c) (join gv0 gv0 a1)), (Permutation (carry p c) (join gv0 gv0 c)), (Permutation (carry p c) (insert n0 p)), (Permutation (carry p c) (insert n0 gv0)), (Permutation (carry p c) (insert n p))
(Permutation (carry p c) (insert n gv0)), (Permutation (carry p c) (carry p a2)), (Permutation (carry p c) (carry p a1)), (Permutation (carry p c) (carry gv0 a2)), (Permutation (carry p c) (carry gv0 a1)), (Permutation (carry p c) (carry gv0 c)), (Permutation (carry p c) (p ++ p)), (Permutation (carry p c) (p ++ gv0)), (Permutation (carry p c) (gv0 ++ p)), (Permutation (carry p c) (gv0 ++ gv0))
(Permutation (carry p c) []), (Permutation (carry gv0 a2) p), (Permutation (carry gv0 a2) gv0), (Permutation (carry gv0 a2) (a2 :: p)), (Permutation (carry gv0 a2) (a2 :: gv0)), (Permutation (carry gv0 a2) (a1 :: p)), (Permutation (carry gv0 a2) (a1 :: gv0)), (Permutation (carry gv0 a2) (c :: p)), (Permutation (carry gv0 a2) (c :: gv0)), (Permutation (carry gv0 a2) (merge p p))
(Permutation (carry gv0 a2) (merge p gv0)), (Permutation (carry gv0 a2) (merge gv0 p)), (Permutation (carry gv0 a2) (merge gv0 gv0)), (Permutation (carry gv0 a2) (heap_delete_max a2)), (Permutation (carry gv0 a2) (heap_delete_max a1)), (Permutation (carry gv0 a2) (heap_delete_max c)), (Permutation (carry gv0 a2) (join p p a2)), (Permutation (carry gv0 a2) (join p p a1)), (Permutation (carry gv0 a2) (join p p c)), (Permutation (carry gv0 a2) (join p gv0 a2))
(Permutation (carry gv0 a2) (join p gv0 a1)), (Permutation (carry gv0 a2) (join p gv0 c)), (Permutation (carry gv0 a2) (join gv0 p a2)), (Permutation (carry gv0 a2) (join gv0 p a1)), (Permutation (carry gv0 a2) (join gv0 p c)), (Permutation (carry gv0 a2) (join gv0 gv0 a2)), (Permutation (carry gv0 a2) (join gv0 gv0 a1)), (Permutation (carry gv0 a2) (join gv0 gv0 c)), (Permutation (carry gv0 a2) (insert n0 p)), (Permutation (carry gv0 a2) (insert n0 gv0))
(Permutation (carry gv0 a2) (insert n p)), (Permutation (carry gv0 a2) (insert n gv0)), (Permutation (carry gv0 a2) (carry p a2)), (Permutation (carry gv0 a2) (carry p a1)), (Permutation (carry gv0 a2) (carry p c)), (Permutation (carry gv0 a2) (carry gv0 a1)), (Permutation (carry gv0 a2) (carry gv0 c)), (Permutation (carry gv0 a2) (p ++ p)), (Permutation (carry gv0 a2) (p ++ gv0)), (Permutation (carry gv0 a2) (gv0 ++ p))
(Permutation (carry gv0 a2) (gv0 ++ gv0)), (Permutation (carry gv0 a2) []), (Permutation (carry gv0 a1) p), (Permutation (carry gv0 a1) gv0), (Permutation (carry gv0 a1) (a2 :: p)), (Permutation (carry gv0 a1) (a2 :: gv0)), (Permutation (carry gv0 a1) (a1 :: p)), (Permutation (carry gv0 a1) (a1 :: gv0)), (Permutation (carry gv0 a1) (c :: p)), (Permutation (carry gv0 a1) (c :: gv0))
(Permutation (carry gv0 a1) (merge p p)), (Permutation (carry gv0 a1) (merge p gv0)), (Permutation (carry gv0 a1) (merge gv0 p)), (Permutation (carry gv0 a1) (merge gv0 gv0)), (Permutation (carry gv0 a1) (heap_delete_max a2)), (Permutation (carry gv0 a1) (heap_delete_max a1)), (Permutation (carry gv0 a1) (heap_delete_max c)), (Permutation (carry gv0 a1) (join p p a2)), (Permutation (carry gv0 a1) (join p p a1)), (Permutation (carry gv0 a1) (join p p c))
(Permutation (carry gv0 a1) (join p gv0 a2)), (Permutation (carry gv0 a1) (join p gv0 a1)), (Permutation (carry gv0 a1) (join p gv0 c)), (Permutation (carry gv0 a1) (join gv0 p a2)), (Permutation (carry gv0 a1) (join gv0 p a1)), (Permutation (carry gv0 a1) (join gv0 p c)), (Permutation (carry gv0 a1) (join gv0 gv0 a2)), (Permutation (carry gv0 a1) (join gv0 gv0 a1)), (Permutation (carry gv0 a1) (join gv0 gv0 c)), (Permutation (carry gv0 a1) (insert n0 p))
(Permutation (carry gv0 a1) (insert n0 gv0)), (Permutation (carry gv0 a1) (insert n p)), (Permutation (carry gv0 a1) (insert n gv0)), (Permutation (carry gv0 a1) (carry p a2)), (Permutation (carry gv0 a1) (carry p a1)), (Permutation (carry gv0 a1) (carry p c)), (Permutation (carry gv0 a1) (carry gv0 a2)), (Permutation (carry gv0 a1) (carry gv0 c)), (Permutation (carry gv0 a1) (p ++ p)), (Permutation (carry gv0 a1) (p ++ gv0))
(Permutation (carry gv0 a1) (gv0 ++ p)), (Permutation (carry gv0 a1) (gv0 ++ gv0)), (Permutation (carry gv0 a1) []), (Permutation (carry gv0 c) p), (Permutation (carry gv0 c) gv0), (Permutation (carry gv0 c) (a2 :: p)), (Permutation (carry gv0 c) (a2 :: gv0)), (Permutation (carry gv0 c) (a1 :: p)), (Permutation (carry gv0 c) (a1 :: gv0)), (Permutation (carry gv0 c) (c :: p))
(Permutation (carry gv0 c) (c :: gv0)), (Permutation (carry gv0 c) (merge p p)), (Permutation (carry gv0 c) (merge p gv0)), (Permutation (carry gv0 c) (merge gv0 p)), (Permutation (carry gv0 c) (merge gv0 gv0)), (Permutation (carry gv0 c) (heap_delete_max a2)), (Permutation (carry gv0 c) (heap_delete_max a1)), (Permutation (carry gv0 c) (heap_delete_max c)), (Permutation (carry gv0 c) (join p p a2)), (Permutation (carry gv0 c) (join p p a1))
(Permutation (carry gv0 c) (join p p c)), (Permutation (carry gv0 c) (join p gv0 a2)), (Permutation (carry gv0 c) (join p gv0 a1)), (Permutation (carry gv0 c) (join p gv0 c)), (Permutation (carry gv0 c) (join gv0 p a2)), (Permutation (carry gv0 c) (join gv0 p a1)), (Permutation (carry gv0 c) (join gv0 p c)), (Permutation (carry gv0 c) (join gv0 gv0 a2)), (Permutation (carry gv0 c) (join gv0 gv0 a1)), (Permutation (carry gv0 c) (join gv0 gv0 c))
(Permutation (carry gv0 c) (insert n0 p)), (Permutation (carry gv0 c) (insert n0 gv0)), (Permutation (carry gv0 c) (insert n p)), (Permutation (carry gv0 c) (insert n gv0)), (Permutation (carry gv0 c) (carry p a2)), (Permutation (carry gv0 c) (carry p a1)), (Permutation (carry gv0 c) (carry p c)), (Permutation (carry gv0 c) (carry gv0 a2)), (Permutation (carry gv0 c) (carry gv0 a1)), (Permutation (carry gv0 c) (p ++ p))
(Permutation (carry gv0 c) (p ++ gv0)), (Permutation (carry gv0 c) (gv0 ++ p)), (Permutation (carry gv0 c) (gv0 ++ gv0)), (Permutation (carry gv0 c) []), (Permutation (p ++ p) p), (Permutation (p ++ p) gv0), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a2 :: gv0)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (a1 :: gv0))
(Permutation (p ++ p) (c :: p)), (Permutation (p ++ p) (c :: gv0)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max c)), (Permutation (p ++ p) (join p p a2))
(Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p c)), (Permutation (p ++ p) (join p gv0 a2)), (Permutation (p ++ p) (join p gv0 a1)), (Permutation (p ++ p) (join p gv0 c)), (Permutation (p ++ p) (join gv0 p a2)), (Permutation (p ++ p) (join gv0 p a1)), (Permutation (p ++ p) (join gv0 p c)), (Permutation (p ++ p) (join gv0 gv0 a2)), (Permutation (p ++ p) (join gv0 gv0 a1))
(Permutation (p ++ p) (join gv0 gv0 c)), (Permutation (p ++ p) (insert n0 p)), (Permutation (p ++ p) (insert n0 gv0)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (insert n gv0)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p c)), (Permutation (p ++ p) (carry gv0 a2)), (Permutation (p ++ p) (carry gv0 a1))
(Permutation (p ++ p) (carry gv0 c)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) []), (Permutation (p ++ gv0) p), (Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) (a2 :: p)), (Permutation (p ++ gv0) (a2 :: gv0)), (Permutation (p ++ gv0) (a1 :: p))
(Permutation (p ++ gv0) (a1 :: gv0)), (Permutation (p ++ gv0) (c :: p)), (Permutation (p ++ gv0) (c :: gv0)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 gv0)), (Permutation (p ++ gv0) (heap_delete_max a2)), (Permutation (p ++ gv0) (heap_delete_max a1)), (Permutation (p ++ gv0) (heap_delete_max c))
(Permutation (p ++ gv0) (join p p a2)), (Permutation (p ++ gv0) (join p p a1)), (Permutation (p ++ gv0) (join p p c)), (Permutation (p ++ gv0) (join p gv0 a2)), (Permutation (p ++ gv0) (join p gv0 a1)), (Permutation (p ++ gv0) (join p gv0 c)), (Permutation (p ++ gv0) (join gv0 p a2)), (Permutation (p ++ gv0) (join gv0 p a1)), (Permutation (p ++ gv0) (join gv0 p c)), (Permutation (p ++ gv0) (join gv0 gv0 a2))
(Permutation (p ++ gv0) (join gv0 gv0 a1)), (Permutation (p ++ gv0) (join gv0 gv0 c)), (Permutation (p ++ gv0) (insert n0 p)), (Permutation (p ++ gv0) (insert n0 gv0)), (Permutation (p ++ gv0) (insert n p)), (Permutation (p ++ gv0) (insert n gv0)), (Permutation (p ++ gv0) (carry p a2)), (Permutation (p ++ gv0) (carry p a1)), (Permutation (p ++ gv0) (carry p c)), (Permutation (p ++ gv0) (carry gv0 a2))
(Permutation (p ++ gv0) (carry gv0 a1)), (Permutation (p ++ gv0) (carry gv0 c)), (Permutation (p ++ gv0) (p ++ p)), (Permutation (p ++ gv0) (gv0 ++ p)), (Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) []), (Permutation (gv0 ++ p) p), (Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) (a2 :: p)), (Permutation (gv0 ++ p) (a2 :: gv0))
(Permutation (gv0 ++ p) (a1 :: p)), (Permutation (gv0 ++ p) (a1 :: gv0)), (Permutation (gv0 ++ p) (c :: p)), (Permutation (gv0 ++ p) (c :: gv0)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 gv0)), (Permutation (gv0 ++ p) (heap_delete_max a2)), (Permutation (gv0 ++ p) (heap_delete_max a1))
(Permutation (gv0 ++ p) (heap_delete_max c)), (Permutation (gv0 ++ p) (join p p a2)), (Permutation (gv0 ++ p) (join p p a1)), (Permutation (gv0 ++ p) (join p p c)), (Permutation (gv0 ++ p) (join p gv0 a2)), (Permutation (gv0 ++ p) (join p gv0 a1)), (Permutation (gv0 ++ p) (join p gv0 c)), (Permutation (gv0 ++ p) (join gv0 p a2)), (Permutation (gv0 ++ p) (join gv0 p a1)), (Permutation (gv0 ++ p) (join gv0 p c))
(Permutation (gv0 ++ p) (join gv0 gv0 a2)), (Permutation (gv0 ++ p) (join gv0 gv0 a1)), (Permutation (gv0 ++ p) (join gv0 gv0 c)), (Permutation (gv0 ++ p) (insert n0 p)), (Permutation (gv0 ++ p) (insert n0 gv0)), (Permutation (gv0 ++ p) (insert n p)), (Permutation (gv0 ++ p) (insert n gv0)), (Permutation (gv0 ++ p) (carry p a2)), (Permutation (gv0 ++ p) (carry p a1)), (Permutation (gv0 ++ p) (carry p c))
(Permutation (gv0 ++ p) (carry gv0 a2)), (Permutation (gv0 ++ p) (carry gv0 a1)), (Permutation (gv0 ++ p) (carry gv0 c)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ gv0) p), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a2 :: p))
(Permutation (gv0 ++ gv0) (a2 :: gv0)), (Permutation (gv0 ++ gv0) (a1 :: p)), (Permutation (gv0 ++ gv0) (a1 :: gv0)), (Permutation (gv0 ++ gv0) (c :: p)), (Permutation (gv0 ++ gv0) (c :: gv0)), (Permutation (gv0 ++ gv0) (merge p p)), (Permutation (gv0 ++ gv0) (merge p gv0)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (heap_delete_max a2))
(Permutation (gv0 ++ gv0) (heap_delete_max a1)), (Permutation (gv0 ++ gv0) (heap_delete_max c)), (Permutation (gv0 ++ gv0) (join p p a2)), (Permutation (gv0 ++ gv0) (join p p a1)), (Permutation (gv0 ++ gv0) (join p p c)), (Permutation (gv0 ++ gv0) (join p gv0 a2)), (Permutation (gv0 ++ gv0) (join p gv0 a1)), (Permutation (gv0 ++ gv0) (join p gv0 c)), (Permutation (gv0 ++ gv0) (join gv0 p a2)), (Permutation (gv0 ++ gv0) (join gv0 p a1))
(Permutation (gv0 ++ gv0) (join gv0 p c)), (Permutation (gv0 ++ gv0) (join gv0 gv0 a2)), (Permutation (gv0 ++ gv0) (join gv0 gv0 a1)), (Permutation (gv0 ++ gv0) (join gv0 gv0 c)), (Permutation (gv0 ++ gv0) (insert n0 p)), (Permutation (gv0 ++ gv0) (insert n0 gv0)), (Permutation (gv0 ++ gv0) (insert n p)), (Permutation (gv0 ++ gv0) (insert n gv0)), (Permutation (gv0 ++ gv0) (carry p a2)), (Permutation (gv0 ++ gv0) (carry p a1))
(Permutation (gv0 ++ gv0) (carry p c)), (Permutation (gv0 ++ gv0) (carry gv0 a2)), (Permutation (gv0 ++ gv0) (carry gv0 a1)), (Permutation (gv0 ++ gv0) (carry gv0 c)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) []), (Permutation [] p), (Permutation [] gv0)
(Permutation [] (a2 :: p)), (Permutation [] (a2 :: gv0)), (Permutation [] (a1 :: p)), (Permutation [] (a1 :: gv0)), (Permutation [] (c :: p)), (Permutation [] (c :: gv0)), (Permutation [] (merge p p)), (Permutation [] (merge p gv0)), (Permutation [] (merge gv0 p)), (Permutation [] (merge gv0 gv0))
(Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max c)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p c)), (Permutation [] (join p gv0 a2)), (Permutation [] (join p gv0 a1)), (Permutation [] (join p gv0 c)), (Permutation [] (join gv0 p a2))
(Permutation [] (join gv0 p a1)), (Permutation [] (join gv0 p c)), (Permutation [] (join gv0 gv0 a2)), (Permutation [] (join gv0 gv0 a1)), (Permutation [] (join gv0 gv0 c)), (Permutation [] (insert n0 p)), (Permutation [] (insert n0 gv0)), (Permutation [] (insert n p)), (Permutation [] (insert n gv0)), (Permutation [] (carry p a2))
(Permutation [] (carry p a1)), (Permutation [] (carry p c)), (Permutation [] (carry gv0 a2)), (Permutation [] (carry gv0 a1)), (Permutation [] (carry gv0 c)), (Permutation [] (p ++ p)), (Permutation [] (p ++ gv0)), (Permutation [] (gv0 ++ p)), (Permutation [] (gv0 ++ gv0)), (In a2 (a2 :: p))
(In a2 (a2 :: gv0)), (In a2 (a1 :: p)), (In a2 (a1 :: gv0)), (In a2 (c :: p)), (In a2 (c :: gv0)), (In a2 (merge p p)), (In a2 (merge p gv0)), (In a2 (merge gv0 p)), (In a2 (merge gv0 gv0)), (In a2 (heap_delete_max a2))
(In a2 (heap_delete_max a1)), (In a2 (heap_delete_max c)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (join p p c)), (In a2 (join p gv0 a2)), (In a2 (join p gv0 a1)), (In a2 (join p gv0 c)), (In a2 (join gv0 p a2)), (In a2 (join gv0 p a1))
(In a2 (join gv0 p c)), (In a2 (join gv0 gv0 a2)), (In a2 (join gv0 gv0 a1)), (In a2 (join gv0 gv0 c)), (In a2 (insert n0 p)), (In a2 (insert n0 gv0)), (In a2 (insert n p)), (In a2 (insert n gv0)), (In a2 (carry p a2)), (In a2 (carry p a1))
(In a2 (carry p c)), (In a2 (carry gv0 a2)), (In a2 (carry gv0 a1)), (In a2 (carry gv0 c)), (In a2 (p ++ p)), (In a2 (p ++ gv0)), (In a2 (gv0 ++ p)), (In a2 (gv0 ++ gv0)), (In a1 (a2 :: p)), (In a1 (a2 :: gv0))
(In a1 (a1 :: p)), (In a1 (a1 :: gv0)), (In a1 (c :: p)), (In a1 (c :: gv0)), (In a1 (merge p p)), (In a1 (merge p gv0)), (In a1 (merge gv0 p)), (In a1 (merge gv0 gv0)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1))
(In a1 (heap_delete_max c)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (join p p c)), (In a1 (join p gv0 a2)), (In a1 (join p gv0 a1)), (In a1 (join p gv0 c)), (In a1 (join gv0 p a2)), (In a1 (join gv0 p a1)), (In a1 (join gv0 p c))
(In a1 (join gv0 gv0 a2)), (In a1 (join gv0 gv0 a1)), (In a1 (join gv0 gv0 c)), (In a1 (insert n0 p)), (In a1 (insert n0 gv0)), (In a1 (insert n p)), (In a1 (insert n gv0)), (In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (carry p c))
(In a1 (carry gv0 a2)), (In a1 (carry gv0 a1)), (In a1 (carry gv0 c)), (In a1 (p ++ p)), (In a1 (p ++ gv0)), (In a1 (gv0 ++ p)), (In a1 (gv0 ++ gv0)), (In c (a2 :: p)), (In c (a2 :: gv0)), (In c (a1 :: p))
(In c (a1 :: gv0)), (In c (c :: p)), (In c (c :: gv0)), (In c (merge p p)), (In c (merge p gv0)), (In c (merge gv0 p)), (In c (merge gv0 gv0)), (In c (heap_delete_max a2)), (In c (heap_delete_max a1)), (In c (heap_delete_max c))
(In c (join p p a2)), (In c (join p p a1)), (In c (join p p c)), (In c (join p gv0 a2)), (In c (join p gv0 a1)), (In c (join p gv0 c)), (In c (join gv0 p a2)), (In c (join gv0 p a1)), (In c (join gv0 p c)), (In c (join gv0 gv0 a2))
(In c (join gv0 gv0 a1)), (In c (join gv0 gv0 c)), (In c (insert n0 p)), (In c (insert n0 gv0)), (In c (insert n p)), (In c (insert n gv0)), (In c (carry p a2)), (In c (carry p a1)), (In c (carry p c)), (In c (carry gv0 a2))
(In c (carry gv0 a1)), (In c (carry gv0 c)), (In c (p ++ p)), (In c (p ++ gv0)), (In c (gv0 ++ p)), (In c (gv0 ++ gv0)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) gv0), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a2 :: gv0))
(In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (a1 :: gv0)), (In (Node n0 a2 a2) (c :: p)), (In (Node n0 a2 a2) (c :: gv0)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (merge p gv0)), (In (Node n0 a2 a2) (merge gv0 p)), (In (Node n0 a2 a2) (merge gv0 gv0)), (In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1))
(In (Node n0 a2 a2) (heap_delete_max c)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p c)), (In (Node n0 a2 a2) (join p gv0 a2)), (In (Node n0 a2 a2) (join p gv0 a1)), (In (Node n0 a2 a2) (join p gv0 c)), (In (Node n0 a2 a2) (join gv0 p a2)), (In (Node n0 a2 a2) (join gv0 p a1)), (In (Node n0 a2 a2) (join gv0 p c))
(In (Node n0 a2 a2) (join gv0 gv0 a2)), (In (Node n0 a2 a2) (join gv0 gv0 a1)), (In (Node n0 a2 a2) (join gv0 gv0 c)), (In (Node n0 a2 a2) (insert n0 p)), (In (Node n0 a2 a2) (insert n0 gv0)), (In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (insert n gv0)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p c))
(In (Node n0 a2 a2) (carry gv0 a2)), (In (Node n0 a2 a2) (carry gv0 a1)), (In (Node n0 a2 a2) (carry gv0 c)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a2) (p ++ gv0)), (In (Node n0 a2 a2) (gv0 ++ p)), (In (Node n0 a2 a2) (gv0 ++ gv0)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) gv0), (In (Node n0 a2 a1) (a2 :: p))
(In (Node n0 a2 a1) (a2 :: gv0)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (a1 :: gv0)), (In (Node n0 a2 a1) (c :: p)), (In (Node n0 a2 a1) (c :: gv0)), (In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (merge p gv0)), (In (Node n0 a2 a1) (merge gv0 p)), (In (Node n0 a2 a1) (merge gv0 gv0)), (In (Node n0 a2 a1) (heap_delete_max a2))
(In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max c)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p c)), (In (Node n0 a2 a1) (join p gv0 a2)), (In (Node n0 a2 a1) (join p gv0 a1)), (In (Node n0 a2 a1) (join p gv0 c)), (In (Node n0 a2 a1) (join gv0 p a2)), (In (Node n0 a2 a1) (join gv0 p a1))
(In (Node n0 a2 a1) (join gv0 p c)), (In (Node n0 a2 a1) (join gv0 gv0 a2)), (In (Node n0 a2 a1) (join gv0 gv0 a1)), (In (Node n0 a2 a1) (join gv0 gv0 c)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n0 gv0)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (insert n gv0)), (In (Node n0 a2 a1) (carry p a2)), (In (Node n0 a2 a1) (carry p a1))
(In (Node n0 a2 a1) (carry p c)), (In (Node n0 a2 a1) (carry gv0 a2)), (In (Node n0 a2 a1) (carry gv0 a1)), (In (Node n0 a2 a1) (carry gv0 c)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 a1) (p ++ gv0)), (In (Node n0 a2 a1) (gv0 ++ p)), (In (Node n0 a2 a1) (gv0 ++ gv0)), (In (Node n0 a2 c) p), (In (Node n0 a2 c) gv0)
(In (Node n0 a2 c) (a2 :: p)), (In (Node n0 a2 c) (a2 :: gv0)), (In (Node n0 a2 c) (a1 :: p)), (In (Node n0 a2 c) (a1 :: gv0)), (In (Node n0 a2 c) (c :: p)), (In (Node n0 a2 c) (c :: gv0)), (In (Node n0 a2 c) (merge p p)), (In (Node n0 a2 c) (merge p gv0)), (In (Node n0 a2 c) (merge gv0 p)), (In (Node n0 a2 c) (merge gv0 gv0))
(In (Node n0 a2 c) (heap_delete_max a2)), (In (Node n0 a2 c) (heap_delete_max a1)), (In (Node n0 a2 c) (heap_delete_max c)), (In (Node n0 a2 c) (join p p a2)), (In (Node n0 a2 c) (join p p a1)), (In (Node n0 a2 c) (join p p c)), (In (Node n0 a2 c) (join p gv0 a2)), (In (Node n0 a2 c) (join p gv0 a1)), (In (Node n0 a2 c) (join p gv0 c)), (In (Node n0 a2 c) (join gv0 p a2))
(In (Node n0 a2 c) (join gv0 p a1)), (In (Node n0 a2 c) (join gv0 p c)), (In (Node n0 a2 c) (join gv0 gv0 a2)), (In (Node n0 a2 c) (join gv0 gv0 a1)), (In (Node n0 a2 c) (join gv0 gv0 c)), (In (Node n0 a2 c) (insert n0 p)), (In (Node n0 a2 c) (insert n0 gv0)), (In (Node n0 a2 c) (insert n p)), (In (Node n0 a2 c) (insert n gv0)), (In (Node n0 a2 c) (carry p a2))
(In (Node n0 a2 c) (carry p a1)), (In (Node n0 a2 c) (carry p c)), (In (Node n0 a2 c) (carry gv0 a2)), (In (Node n0 a2 c) (carry gv0 a1)), (In (Node n0 a2 c) (carry gv0 c)), (In (Node n0 a2 c) (p ++ p)), (In (Node n0 a2 c) (p ++ gv0)), (In (Node n0 a2 c) (gv0 ++ p)), (In (Node n0 a2 c) (gv0 ++ gv0)), (In (Node n0 a1 a2) p)
(In (Node n0 a1 a2) gv0), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a2 :: gv0)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (a1 :: gv0)), (In (Node n0 a1 a2) (c :: p)), (In (Node n0 a1 a2) (c :: gv0)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (merge p gv0)), (In (Node n0 a1 a2) (merge gv0 p))
(In (Node n0 a1 a2) (merge gv0 gv0)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max c)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p c)), (In (Node n0 a1 a2) (join p gv0 a2)), (In (Node n0 a1 a2) (join p gv0 a1)), (In (Node n0 a1 a2) (join p gv0 c))
(In (Node n0 a1 a2) (join gv0 p a2)), (In (Node n0 a1 a2) (join gv0 p a1)), (In (Node n0 a1 a2) (join gv0 p c)), (In (Node n0 a1 a2) (join gv0 gv0 a2)), (In (Node n0 a1 a2) (join gv0 gv0 a1)), (In (Node n0 a1 a2) (join gv0 gv0 c)), (In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n0 gv0)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (insert n gv0))
(In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (carry p c)), (In (Node n0 a1 a2) (carry gv0 a2)), (In (Node n0 a1 a2) (carry gv0 a1)), (In (Node n0 a1 a2) (carry gv0 c)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a2) (p ++ gv0)), (In (Node n0 a1 a2) (gv0 ++ p)), (In (Node n0 a1 a2) (gv0 ++ gv0))
(In (Node n0 a1 a1) p), (In (Node n0 a1 a1) gv0), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a2 :: gv0)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (a1 :: gv0)), (In (Node n0 a1 a1) (c :: p)), (In (Node n0 a1 a1) (c :: gv0)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (merge p gv0))
(In (Node n0 a1 a1) (merge gv0 p)), (In (Node n0 a1 a1) (merge gv0 gv0)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max c)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p c)), (In (Node n0 a1 a1) (join p gv0 a2)), (In (Node n0 a1 a1) (join p gv0 a1))
(In (Node n0 a1 a1) (join p gv0 c)), (In (Node n0 a1 a1) (join gv0 p a2)), (In (Node n0 a1 a1) (join gv0 p a1)), (In (Node n0 a1 a1) (join gv0 p c)), (In (Node n0 a1 a1) (join gv0 gv0 a2)), (In (Node n0 a1 a1) (join gv0 gv0 a1)), (In (Node n0 a1 a1) (join gv0 gv0 c)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n0 gv0)), (In (Node n0 a1 a1) (insert n p))
(In (Node n0 a1 a1) (insert n gv0)), (In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p c)), (In (Node n0 a1 a1) (carry gv0 a2)), (In (Node n0 a1 a1) (carry gv0 a1)), (In (Node n0 a1 a1) (carry gv0 c)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 a1) (p ++ gv0)), (In (Node n0 a1 a1) (gv0 ++ p))
(In (Node n0 a1 a1) (gv0 ++ gv0)), (In (Node n0 a1 c) p), (In (Node n0 a1 c) gv0), (In (Node n0 a1 c) (a2 :: p)), (In (Node n0 a1 c) (a2 :: gv0)), (In (Node n0 a1 c) (a1 :: p)), (In (Node n0 a1 c) (a1 :: gv0)), (In (Node n0 a1 c) (c :: p)), (In (Node n0 a1 c) (c :: gv0)), (In (Node n0 a1 c) (merge p p))
(In (Node n0 a1 c) (merge p gv0)), (In (Node n0 a1 c) (merge gv0 p)), (In (Node n0 a1 c) (merge gv0 gv0)), (In (Node n0 a1 c) (heap_delete_max a2)), (In (Node n0 a1 c) (heap_delete_max a1)), (In (Node n0 a1 c) (heap_delete_max c)), (In (Node n0 a1 c) (join p p a2)), (In (Node n0 a1 c) (join p p a1)), (In (Node n0 a1 c) (join p p c)), (In (Node n0 a1 c) (join p gv0 a2))
(In (Node n0 a1 c) (join p gv0 a1)), (In (Node n0 a1 c) (join p gv0 c)), (In (Node n0 a1 c) (join gv0 p a2)), (In (Node n0 a1 c) (join gv0 p a1)), (In (Node n0 a1 c) (join gv0 p c)), (In (Node n0 a1 c) (join gv0 gv0 a2)), (In (Node n0 a1 c) (join gv0 gv0 a1)), (In (Node n0 a1 c) (join gv0 gv0 c)), (In (Node n0 a1 c) (insert n0 p)), (In (Node n0 a1 c) (insert n0 gv0))
(In (Node n0 a1 c) (insert n p)), (In (Node n0 a1 c) (insert n gv0)), (In (Node n0 a1 c) (carry p a2)), (In (Node n0 a1 c) (carry p a1)), (In (Node n0 a1 c) (carry p c)), (In (Node n0 a1 c) (carry gv0 a2)), (In (Node n0 a1 c) (carry gv0 a1)), (In (Node n0 a1 c) (carry gv0 c)), (In (Node n0 a1 c) (p ++ p)), (In (Node n0 a1 c) (p ++ gv0))
(In (Node n0 a1 c) (gv0 ++ p)), (In (Node n0 a1 c) (gv0 ++ gv0)), (In (Node n0 c a2) p), (In (Node n0 c a2) gv0), (In (Node n0 c a2) (a2 :: p)), (In (Node n0 c a2) (a2 :: gv0)), (In (Node n0 c a2) (a1 :: p)), (In (Node n0 c a2) (a1 :: gv0)), (In (Node n0 c a2) (c :: p)), (In (Node n0 c a2) (c :: gv0))
(In (Node n0 c a2) (merge p p)), (In (Node n0 c a2) (merge p gv0)), (In (Node n0 c a2) (merge gv0 p)), (In (Node n0 c a2) (merge gv0 gv0)), (In (Node n0 c a2) (heap_delete_max a2)), (In (Node n0 c a2) (heap_delete_max a1)), (In (Node n0 c a2) (heap_delete_max c)), (In (Node n0 c a2) (join p p a2)), (In (Node n0 c a2) (join p p a1)), (In (Node n0 c a2) (join p p c))
(In (Node n0 c a2) (join p gv0 a2)), (In (Node n0 c a2) (join p gv0 a1)), (In (Node n0 c a2) (join p gv0 c)), (In (Node n0 c a2) (join gv0 p a2)), (In (Node n0 c a2) (join gv0 p a1)), (In (Node n0 c a2) (join gv0 p c)), (In (Node n0 c a2) (join gv0 gv0 a2)), (In (Node n0 c a2) (join gv0 gv0 a1)), (In (Node n0 c a2) (join gv0 gv0 c)), (In (Node n0 c a2) (insert n0 p))
(In (Node n0 c a2) (insert n0 gv0)), (In (Node n0 c a2) (insert n p)), (In (Node n0 c a2) (insert n gv0)), (In (Node n0 c a2) (carry p a2)), (In (Node n0 c a2) (carry p a1)), (In (Node n0 c a2) (carry p c)), (In (Node n0 c a2) (carry gv0 a2)), (In (Node n0 c a2) (carry gv0 a1)), (In (Node n0 c a2) (carry gv0 c)), (In (Node n0 c a2) (p ++ p))
(In (Node n0 c a2) (p ++ gv0)), (In (Node n0 c a2) (gv0 ++ p)), (In (Node n0 c a2) (gv0 ++ gv0)), (In (Node n0 c a1) p), (In (Node n0 c a1) gv0), (In (Node n0 c a1) (a2 :: p)), (In (Node n0 c a1) (a2 :: gv0)), (In (Node n0 c a1) (a1 :: p)), (In (Node n0 c a1) (a1 :: gv0)), (In (Node n0 c a1) (c :: p))
(In (Node n0 c a1) (c :: gv0)), (In (Node n0 c a1) (merge p p)), (In (Node n0 c a1) (merge p gv0)), (In (Node n0 c a1) (merge gv0 p)), (In (Node n0 c a1) (merge gv0 gv0)), (In (Node n0 c a1) (heap_delete_max a2)), (In (Node n0 c a1) (heap_delete_max a1)), (In (Node n0 c a1) (heap_delete_max c)), (In (Node n0 c a1) (join p p a2)), (In (Node n0 c a1) (join p p a1))
(In (Node n0 c a1) (join p p c)), (In (Node n0 c a1) (join p gv0 a2)), (In (Node n0 c a1) (join p gv0 a1)), (In (Node n0 c a1) (join p gv0 c)), (In (Node n0 c a1) (join gv0 p a2)), (In (Node n0 c a1) (join gv0 p a1)), (In (Node n0 c a1) (join gv0 p c)), (In (Node n0 c a1) (join gv0 gv0 a2)), (In (Node n0 c a1) (join gv0 gv0 a1)), (In (Node n0 c a1) (join gv0 gv0 c))
(In (Node n0 c a1) (insert n0 p)), (In (Node n0 c a1) (insert n0 gv0)), (In (Node n0 c a1) (insert n p)), (In (Node n0 c a1) (insert n gv0)), (In (Node n0 c a1) (carry p a2)), (In (Node n0 c a1) (carry p a1)), (In (Node n0 c a1) (carry p c)), (In (Node n0 c a1) (carry gv0 a2)), (In (Node n0 c a1) (carry gv0 a1)), (In (Node n0 c a1) (carry gv0 c))
(In (Node n0 c a1) (p ++ p)), (In (Node n0 c a1) (p ++ gv0)), (In (Node n0 c a1) (gv0 ++ p)), (In (Node n0 c a1) (gv0 ++ gv0)), (In (Node n0 c c) p), (In (Node n0 c c) gv0), (In (Node n0 c c) (a2 :: p)), (In (Node n0 c c) (a2 :: gv0)), (In (Node n0 c c) (a1 :: p)), (In (Node n0 c c) (a1 :: gv0))
(In (Node n0 c c) (c :: p)), (In (Node n0 c c) (c :: gv0)), (In (Node n0 c c) (merge p p)), (In (Node n0 c c) (merge p gv0)), (In (Node n0 c c) (merge gv0 p)), (In (Node n0 c c) (merge gv0 gv0)), (In (Node n0 c c) (heap_delete_max a2)), (In (Node n0 c c) (heap_delete_max a1)), (In (Node n0 c c) (heap_delete_max c)), (In (Node n0 c c) (join p p a2))
(In (Node n0 c c) (join p p a1)), (In (Node n0 c c) (join p p c)), (In (Node n0 c c) (join p gv0 a2)), (In (Node n0 c c) (join p gv0 a1)), (In (Node n0 c c) (join p gv0 c)), (In (Node n0 c c) (join gv0 p a2)), (In (Node n0 c c) (join gv0 p a1)), (In (Node n0 c c) (join gv0 p c)), (In (Node n0 c c) (join gv0 gv0 a2)), (In (Node n0 c c) (join gv0 gv0 a1))
(In (Node n0 c c) (join gv0 gv0 c)), (In (Node n0 c c) (insert n0 p)), (In (Node n0 c c) (insert n0 gv0)), (In (Node n0 c c) (insert n p)), (In (Node n0 c c) (insert n gv0)), (In (Node n0 c c) (carry p a2)), (In (Node n0 c c) (carry p a1)), (In (Node n0 c c) (carry p c)), (In (Node n0 c c) (carry gv0 a2)), (In (Node n0 c c) (carry gv0 a1))
(In (Node n0 c c) (carry gv0 c)), (In (Node n0 c c) (p ++ p)), (In (Node n0 c c) (p ++ gv0)), (In (Node n0 c c) (gv0 ++ p)), (In (Node n0 c c) (gv0 ++ gv0)), (In (Node n a2 a2) p), (In (Node n a2 a2) gv0), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a2 :: gv0)), (In (Node n a2 a2) (a1 :: p))
(In (Node n a2 a2) (a1 :: gv0)), (In (Node n a2 a2) (c :: p)), (In (Node n a2 a2) (c :: gv0)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (merge p gv0)), (In (Node n a2 a2) (merge gv0 p)), (In (Node n a2 a2) (merge gv0 gv0)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max c))
(In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p c)), (In (Node n a2 a2) (join p gv0 a2)), (In (Node n a2 a2) (join p gv0 a1)), (In (Node n a2 a2) (join p gv0 c)), (In (Node n a2 a2) (join gv0 p a2)), (In (Node n a2 a2) (join gv0 p a1)), (In (Node n a2 a2) (join gv0 p c)), (In (Node n a2 a2) (join gv0 gv0 a2))
(In (Node n a2 a2) (join gv0 gv0 a1)), (In (Node n a2 a2) (join gv0 gv0 c)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n0 gv0)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (insert n gv0)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p c)), (In (Node n a2 a2) (carry gv0 a2))
(In (Node n a2 a2) (carry gv0 a1)), (In (Node n a2 a2) (carry gv0 c)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a2) (p ++ gv0)), (In (Node n a2 a2) (gv0 ++ p)), (In (Node n a2 a2) (gv0 ++ gv0)), (In (Node n a2 a1) p), (In (Node n a2 a1) gv0), (In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a2 :: gv0))
(In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (a1 :: gv0)), (In (Node n a2 a1) (c :: p)), (In (Node n a2 a1) (c :: gv0)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (merge p gv0)), (In (Node n a2 a1) (merge gv0 p)), (In (Node n a2 a1) (merge gv0 gv0)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1))
(In (Node n a2 a1) (heap_delete_max c)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p c)), (In (Node n a2 a1) (join p gv0 a2)), (In (Node n a2 a1) (join p gv0 a1)), (In (Node n a2 a1) (join p gv0 c)), (In (Node n a2 a1) (join gv0 p a2)), (In (Node n a2 a1) (join gv0 p a1)), (In (Node n a2 a1) (join gv0 p c))
(In (Node n a2 a1) (join gv0 gv0 a2)), (In (Node n a2 a1) (join gv0 gv0 a1)), (In (Node n a2 a1) (join gv0 gv0 c)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n0 gv0)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (insert n gv0)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p c))
(In (Node n a2 a1) (carry gv0 a2)), (In (Node n a2 a1) (carry gv0 a1)), (In (Node n a2 a1) (carry gv0 c)), (In (Node n a2 a1) (p ++ p)), (In (Node n a2 a1) (p ++ gv0)), (In (Node n a2 a1) (gv0 ++ p)), (In (Node n a2 a1) (gv0 ++ gv0)), (In (Node n a2 c) p), (In (Node n a2 c) gv0), (In (Node n a2 c) (a2 :: p))
(In (Node n a2 c) (a2 :: gv0)), (In (Node n a2 c) (a1 :: p)), (In (Node n a2 c) (a1 :: gv0)), (In (Node n a2 c) (c :: p)), (In (Node n a2 c) (c :: gv0)), (In (Node n a2 c) (merge p p)), (In (Node n a2 c) (merge p gv0)), (In (Node n a2 c) (merge gv0 p)), (In (Node n a2 c) (merge gv0 gv0)), (In (Node n a2 c) (heap_delete_max a2))
(In (Node n a2 c) (heap_delete_max a1)), (In (Node n a2 c) (heap_delete_max c)), (In (Node n a2 c) (join p p a2)), (In (Node n a2 c) (join p p a1)), (In (Node n a2 c) (join p p c)), (In (Node n a2 c) (join p gv0 a2)), (In (Node n a2 c) (join p gv0 a1)), (In (Node n a2 c) (join p gv0 c)), (In (Node n a2 c) (join gv0 p a2)), (In (Node n a2 c) (join gv0 p a1))
(In (Node n a2 c) (join gv0 p c)), (In (Node n a2 c) (join gv0 gv0 a2)), (In (Node n a2 c) (join gv0 gv0 a1)), (In (Node n a2 c) (join gv0 gv0 c)), (In (Node n a2 c) (insert n0 p)), (In (Node n a2 c) (insert n0 gv0)), (In (Node n a2 c) (insert n p)), (In (Node n a2 c) (insert n gv0)), (In (Node n a2 c) (carry p a2)), (In (Node n a2 c) (carry p a1))
(In (Node n a2 c) (carry p c)), (In (Node n a2 c) (carry gv0 a2)), (In (Node n a2 c) (carry gv0 a1)), (In (Node n a2 c) (carry gv0 c)), (In (Node n a2 c) (p ++ p)), (In (Node n a2 c) (p ++ gv0)), (In (Node n a2 c) (gv0 ++ p)), (In (Node n a2 c) (gv0 ++ gv0)), (In (Node n a1 a2) p), (In (Node n a1 a2) gv0)
(In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a2 :: gv0)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (a1 :: gv0)), (In (Node n a1 a2) (c :: p)), (In (Node n a1 a2) (c :: gv0)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (merge p gv0)), (In (Node n a1 a2) (merge gv0 p)), (In (Node n a1 a2) (merge gv0 gv0))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max c)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p c)), (In (Node n a1 a2) (join p gv0 a2)), (In (Node n a1 a2) (join p gv0 a1)), (In (Node n a1 a2) (join p gv0 c)), (In (Node n a1 a2) (join gv0 p a2))
(In (Node n a1 a2) (join gv0 p a1)), (In (Node n a1 a2) (join gv0 p c)), (In (Node n a1 a2) (join gv0 gv0 a2)), (In (Node n a1 a2) (join gv0 gv0 a1)), (In (Node n a1 a2) (join gv0 gv0 c)), (In (Node n a1 a2) (insert n0 p)), (In (Node n a1 a2) (insert n0 gv0)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (insert n gv0)), (In (Node n a1 a2) (carry p a2))
(In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p c)), (In (Node n a1 a2) (carry gv0 a2)), (In (Node n a1 a2) (carry gv0 a1)), (In (Node n a1 a2) (carry gv0 c)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a2) (p ++ gv0)), (In (Node n a1 a2) (gv0 ++ p)), (In (Node n a1 a2) (gv0 ++ gv0)), (In (Node n a1 a1) p)
(In (Node n a1 a1) gv0), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a2 :: gv0)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (a1 :: gv0)), (In (Node n a1 a1) (c :: p)), (In (Node n a1 a1) (c :: gv0)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (merge p gv0)), (In (Node n a1 a1) (merge gv0 p))
(In (Node n a1 a1) (merge gv0 gv0)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max c)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p c)), (In (Node n a1 a1) (join p gv0 a2)), (In (Node n a1 a1) (join p gv0 a1)), (In (Node n a1 a1) (join p gv0 c))
(In (Node n a1 a1) (join gv0 p a2)), (In (Node n a1 a1) (join gv0 p a1)), (In (Node n a1 a1) (join gv0 p c)), (In (Node n a1 a1) (join gv0 gv0 a2)), (In (Node n a1 a1) (join gv0 gv0 a1)), (In (Node n a1 a1) (join gv0 gv0 c)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n0 gv0)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (insert n gv0))
(In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p c)), (In (Node n a1 a1) (carry gv0 a2)), (In (Node n a1 a1) (carry gv0 a1)), (In (Node n a1 a1) (carry gv0 c)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 a1) (p ++ gv0)), (In (Node n a1 a1) (gv0 ++ p)), (In (Node n a1 a1) (gv0 ++ gv0))
(In (Node n a1 c) p), (In (Node n a1 c) gv0), (In (Node n a1 c) (a2 :: p)), (In (Node n a1 c) (a2 :: gv0)), (In (Node n a1 c) (a1 :: p)), (In (Node n a1 c) (a1 :: gv0)), (In (Node n a1 c) (c :: p)), (In (Node n a1 c) (c :: gv0)), (In (Node n a1 c) (merge p p)), (In (Node n a1 c) (merge p gv0))
(In (Node n a1 c) (merge gv0 p)), (In (Node n a1 c) (merge gv0 gv0)), (In (Node n a1 c) (heap_delete_max a2)), (In (Node n a1 c) (heap_delete_max a1)), (In (Node n a1 c) (heap_delete_max c)), (In (Node n a1 c) (join p p a2)), (In (Node n a1 c) (join p p a1)), (In (Node n a1 c) (join p p c)), (In (Node n a1 c) (join p gv0 a2)), (In (Node n a1 c) (join p gv0 a1))
(In (Node n a1 c) (join p gv0 c)), (In (Node n a1 c) (join gv0 p a2)), (In (Node n a1 c) (join gv0 p a1)), (In (Node n a1 c) (join gv0 p c)), (In (Node n a1 c) (join gv0 gv0 a2)), (In (Node n a1 c) (join gv0 gv0 a1)), (In (Node n a1 c) (join gv0 gv0 c)), (In (Node n a1 c) (insert n0 p)), (In (Node n a1 c) (insert n0 gv0)), (In (Node n a1 c) (insert n p))
(In (Node n a1 c) (insert n gv0)), (In (Node n a1 c) (carry p a2)), (In (Node n a1 c) (carry p a1)), (In (Node n a1 c) (carry p c)), (In (Node n a1 c) (carry gv0 a2)), (In (Node n a1 c) (carry gv0 a1)), (In (Node n a1 c) (carry gv0 c)), (In (Node n a1 c) (p ++ p)), (In (Node n a1 c) (p ++ gv0)), (In (Node n a1 c) (gv0 ++ p))
(In (Node n a1 c) (gv0 ++ gv0)), (In (Node n c a2) p), (In (Node n c a2) gv0), (In (Node n c a2) (a2 :: p)), (In (Node n c a2) (a2 :: gv0)), (In (Node n c a2) (a1 :: p)), (In (Node n c a2) (a1 :: gv0)), (In (Node n c a2) (c :: p)), (In (Node n c a2) (c :: gv0)), (In (Node n c a2) (merge p p))
(In (Node n c a2) (merge p gv0)), (In (Node n c a2) (merge gv0 p)), (In (Node n c a2) (merge gv0 gv0)), (In (Node n c a2) (heap_delete_max a2)), (In (Node n c a2) (heap_delete_max a1)), (In (Node n c a2) (heap_delete_max c)), (In (Node n c a2) (join p p a2)), (In (Node n c a2) (join p p a1)), (In (Node n c a2) (join p p c)), (In (Node n c a2) (join p gv0 a2))
(In (Node n c a2) (join p gv0 a1)), (In (Node n c a2) (join p gv0 c)), (In (Node n c a2) (join gv0 p a2)), (In (Node n c a2) (join gv0 p a1)), (In (Node n c a2) (join gv0 p c)), (In (Node n c a2) (join gv0 gv0 a2)), (In (Node n c a2) (join gv0 gv0 a1)), (In (Node n c a2) (join gv0 gv0 c)), (In (Node n c a2) (insert n0 p)), (In (Node n c a2) (insert n0 gv0))
(In (Node n c a2) (insert n p)), (In (Node n c a2) (insert n gv0)), (In (Node n c a2) (carry p a2)), (In (Node n c a2) (carry p a1)), (In (Node n c a2) (carry p c)), (In (Node n c a2) (carry gv0 a2)), (In (Node n c a2) (carry gv0 a1)), (In (Node n c a2) (carry gv0 c)), (In (Node n c a2) (p ++ p)), (In (Node n c a2) (p ++ gv0))
(In (Node n c a2) (gv0 ++ p)), (In (Node n c a2) (gv0 ++ gv0)), (In (Node n c a1) p), (In (Node n c a1) gv0), (In (Node n c a1) (a2 :: p)), (In (Node n c a1) (a2 :: gv0)), (In (Node n c a1) (a1 :: p)), (In (Node n c a1) (a1 :: gv0)), (In (Node n c a1) (c :: p)), (In (Node n c a1) (c :: gv0))
(In (Node n c a1) (merge p p)), (In (Node n c a1) (merge p gv0)), (In (Node n c a1) (merge gv0 p)), (In (Node n c a1) (merge gv0 gv0)), (In (Node n c a1) (heap_delete_max a2)), (In (Node n c a1) (heap_delete_max a1)), (In (Node n c a1) (heap_delete_max c)), (In (Node n c a1) (join p p a2)), (In (Node n c a1) (join p p a1)), (In (Node n c a1) (join p p c))
(In (Node n c a1) (join p gv0 a2)), (In (Node n c a1) (join p gv0 a1)), (In (Node n c a1) (join p gv0 c)), (In (Node n c a1) (join gv0 p a2)), (In (Node n c a1) (join gv0 p a1)), (In (Node n c a1) (join gv0 p c)), (In (Node n c a1) (join gv0 gv0 a2)), (In (Node n c a1) (join gv0 gv0 a1)), (In (Node n c a1) (join gv0 gv0 c)), (In (Node n c a1) (insert n0 p))
(In (Node n c a1) (insert n0 gv0)), (In (Node n c a1) (insert n p)), (In (Node n c a1) (insert n gv0)), (In (Node n c a1) (carry p a2)), (In (Node n c a1) (carry p a1)), (In (Node n c a1) (carry p c)), (In (Node n c a1) (carry gv0 a2)), (In (Node n c a1) (carry gv0 a1)), (In (Node n c a1) (carry gv0 c)), (In (Node n c a1) (p ++ p))
(In (Node n c a1) (p ++ gv0)), (In (Node n c a1) (gv0 ++ p)), (In (Node n c a1) (gv0 ++ gv0)), (In (Node n c c) p), (In (Node n c c) gv0), (In (Node n c c) (a2 :: p)), (In (Node n c c) (a2 :: gv0)), (In (Node n c c) (a1 :: p)), (In (Node n c c) (a1 :: gv0)), (In (Node n c c) (c :: p))
(In (Node n c c) (c :: gv0)), (In (Node n c c) (merge p p)), (In (Node n c c) (merge p gv0)), (In (Node n c c) (merge gv0 p)), (In (Node n c c) (merge gv0 gv0)), (In (Node n c c) (heap_delete_max a2)), (In (Node n c c) (heap_delete_max a1)), (In (Node n c c) (heap_delete_max c)), (In (Node n c c) (join p p a2)), (In (Node n c c) (join p p a1))
(In (Node n c c) (join p p c)), (In (Node n c c) (join p gv0 a2)), (In (Node n c c) (join p gv0 a1)), (In (Node n c c) (join p gv0 c)), (In (Node n c c) (join gv0 p a2)), (In (Node n c c) (join gv0 p a1)), (In (Node n c c) (join gv0 p c)), (In (Node n c c) (join gv0 gv0 a2)), (In (Node n c c) (join gv0 gv0 a1)), (In (Node n c c) (join gv0 gv0 c))
(In (Node n c c) (insert n0 p)), (In (Node n c c) (insert n0 gv0)), (In (Node n c c) (insert n p)), (In (Node n c c) (insert n gv0)), (In (Node n c c) (carry p a2)), (In (Node n c c) (carry p a1)), (In (Node n c c) (carry p c)), (In (Node n c c) (carry gv0 a2)), (In (Node n c c) (carry gv0 a1)), (In (Node n c c) (carry gv0 c))
(In (Node n c c) (p ++ p)), (In (Node n c c) (p ++ gv0)), (In (Node n c c) (gv0 ++ p)), (In (Node n c c) (gv0 ++ gv0)), (In (smash a2 a2) p), (In (smash a2 a2) gv0), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a2 :: gv0)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (a1 :: gv0))
(In (smash a2 a2) (c :: p)), (In (smash a2 a2) (c :: gv0)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (merge p gv0)), (In (smash a2 a2) (merge gv0 p)), (In (smash a2 a2) (merge gv0 gv0)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max c)), (In (smash a2 a2) (join p p a2))
(In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p c)), (In (smash a2 a2) (join p gv0 a2)), (In (smash a2 a2) (join p gv0 a1)), (In (smash a2 a2) (join p gv0 c)), (In (smash a2 a2) (join gv0 p a2)), (In (smash a2 a2) (join gv0 p a1)), (In (smash a2 a2) (join gv0 p c)), (In (smash a2 a2) (join gv0 gv0 a2)), (In (smash a2 a2) (join gv0 gv0 a1))
(In (smash a2 a2) (join gv0 gv0 c)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n0 gv0)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (insert n gv0)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p c)), (In (smash a2 a2) (carry gv0 a2)), (In (smash a2 a2) (carry gv0 a1))
(In (smash a2 a2) (carry gv0 c)), (In (smash a2 a2) (p ++ p)), (In (smash a2 a2) (p ++ gv0)), (In (smash a2 a2) (gv0 ++ p)), (In (smash a2 a2) (gv0 ++ gv0)), (In (smash a2 a1) p), (In (smash a2 a1) gv0), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a2 :: gv0)), (In (smash a2 a1) (a1 :: p))
(In (smash a2 a1) (a1 :: gv0)), (In (smash a2 a1) (c :: p)), (In (smash a2 a1) (c :: gv0)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (merge p gv0)), (In (smash a2 a1) (merge gv0 p)), (In (smash a2 a1) (merge gv0 gv0)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max c))
(In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p c)), (In (smash a2 a1) (join p gv0 a2)), (In (smash a2 a1) (join p gv0 a1)), (In (smash a2 a1) (join p gv0 c)), (In (smash a2 a1) (join gv0 p a2)), (In (smash a2 a1) (join gv0 p a1)), (In (smash a2 a1) (join gv0 p c)), (In (smash a2 a1) (join gv0 gv0 a2))
(In (smash a2 a1) (join gv0 gv0 a1)), (In (smash a2 a1) (join gv0 gv0 c)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n0 gv0)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (insert n gv0)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (carry p c)), (In (smash a2 a1) (carry gv0 a2))
(In (smash a2 a1) (carry gv0 a1)), (In (smash a2 a1) (carry gv0 c)), (In (smash a2 a1) (p ++ p)), (In (smash a2 a1) (p ++ gv0)), (In (smash a2 a1) (gv0 ++ p)), (In (smash a2 a1) (gv0 ++ gv0)), (In (smash a2 c) p), (In (smash a2 c) gv0), (In (smash a2 c) (a2 :: p)), (In (smash a2 c) (a2 :: gv0))
(In (smash a2 c) (a1 :: p)), (In (smash a2 c) (a1 :: gv0)), (In (smash a2 c) (c :: p)), (In (smash a2 c) (c :: gv0)), (In (smash a2 c) (merge p p)), (In (smash a2 c) (merge p gv0)), (In (smash a2 c) (merge gv0 p)), (In (smash a2 c) (merge gv0 gv0)), (In (smash a2 c) (heap_delete_max a2)), (In (smash a2 c) (heap_delete_max a1))
(In (smash a2 c) (heap_delete_max c)), (In (smash a2 c) (join p p a2)), (In (smash a2 c) (join p p a1)), (In (smash a2 c) (join p p c)), (In (smash a2 c) (join p gv0 a2)), (In (smash a2 c) (join p gv0 a1)), (In (smash a2 c) (join p gv0 c)), (In (smash a2 c) (join gv0 p a2)), (In (smash a2 c) (join gv0 p a1)), (In (smash a2 c) (join gv0 p c))
(In (smash a2 c) (join gv0 gv0 a2)), (In (smash a2 c) (join gv0 gv0 a1)), (In (smash a2 c) (join gv0 gv0 c)), (In (smash a2 c) (insert n0 p)), (In (smash a2 c) (insert n0 gv0)), (In (smash a2 c) (insert n p)), (In (smash a2 c) (insert n gv0)), (In (smash a2 c) (carry p a2)), (In (smash a2 c) (carry p a1)), (In (smash a2 c) (carry p c))
(In (smash a2 c) (carry gv0 a2)), (In (smash a2 c) (carry gv0 a1)), (In (smash a2 c) (carry gv0 c)), (In (smash a2 c) (p ++ p)), (In (smash a2 c) (p ++ gv0)), (In (smash a2 c) (gv0 ++ p)), (In (smash a2 c) (gv0 ++ gv0)), (In (smash a1 a2) p), (In (smash a1 a2) gv0), (In (smash a1 a2) (a2 :: p))
(In (smash a1 a2) (a2 :: gv0)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (a1 :: gv0)), (In (smash a1 a2) (c :: p)), (In (smash a1 a2) (c :: gv0)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (merge p gv0)), (In (smash a1 a2) (merge gv0 p)), (In (smash a1 a2) (merge gv0 gv0)), (In (smash a1 a2) (heap_delete_max a2))
(In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max c)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p c)), (In (smash a1 a2) (join p gv0 a2)), (In (smash a1 a2) (join p gv0 a1)), (In (smash a1 a2) (join p gv0 c)), (In (smash a1 a2) (join gv0 p a2)), (In (smash a1 a2) (join gv0 p a1))
(In (smash a1 a2) (join gv0 p c)), (In (smash a1 a2) (join gv0 gv0 a2)), (In (smash a1 a2) (join gv0 gv0 a1)), (In (smash a1 a2) (join gv0 gv0 c)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n0 gv0)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (insert n gv0)), (In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1))
(In (smash a1 a2) (carry p c)), (In (smash a1 a2) (carry gv0 a2)), (In (smash a1 a2) (carry gv0 a1)), (In (smash a1 a2) (carry gv0 c)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a2) (p ++ gv0)), (In (smash a1 a2) (gv0 ++ p)), (In (smash a1 a2) (gv0 ++ gv0)), (In (smash a1 a1) p), (In (smash a1 a1) gv0)
(In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a2 :: gv0)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (a1 :: gv0)), (In (smash a1 a1) (c :: p)), (In (smash a1 a1) (c :: gv0)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (merge p gv0)), (In (smash a1 a1) (merge gv0 p)), (In (smash a1 a1) (merge gv0 gv0))
(In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max c)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p c)), (In (smash a1 a1) (join p gv0 a2)), (In (smash a1 a1) (join p gv0 a1)), (In (smash a1 a1) (join p gv0 c)), (In (smash a1 a1) (join gv0 p a2))
(In (smash a1 a1) (join gv0 p a1)), (In (smash a1 a1) (join gv0 p c)), (In (smash a1 a1) (join gv0 gv0 a2)), (In (smash a1 a1) (join gv0 gv0 a1)), (In (smash a1 a1) (join gv0 gv0 c)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n0 gv0)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (insert n gv0)), (In (smash a1 a1) (carry p a2))
(In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p c)), (In (smash a1 a1) (carry gv0 a2)), (In (smash a1 a1) (carry gv0 a1)), (In (smash a1 a1) (carry gv0 c)), (In (smash a1 a1) (p ++ p)), (In (smash a1 a1) (p ++ gv0)), (In (smash a1 a1) (gv0 ++ p)), (In (smash a1 a1) (gv0 ++ gv0)), (In (smash a1 c) p)
(In (smash a1 c) gv0), (In (smash a1 c) (a2 :: p)), (In (smash a1 c) (a2 :: gv0)), (In (smash a1 c) (a1 :: p)), (In (smash a1 c) (a1 :: gv0)), (In (smash a1 c) (c :: p)), (In (smash a1 c) (c :: gv0)), (In (smash a1 c) (merge p p)), (In (smash a1 c) (merge p gv0)), (In (smash a1 c) (merge gv0 p))
(In (smash a1 c) (merge gv0 gv0)), (In (smash a1 c) (heap_delete_max a2)), (In (smash a1 c) (heap_delete_max a1)), (In (smash a1 c) (heap_delete_max c)), (In (smash a1 c) (join p p a2)), (In (smash a1 c) (join p p a1)), (In (smash a1 c) (join p p c)), (In (smash a1 c) (join p gv0 a2)), (In (smash a1 c) (join p gv0 a1)), (In (smash a1 c) (join p gv0 c))
(In (smash a1 c) (join gv0 p a2)), (In (smash a1 c) (join gv0 p a1)), (In (smash a1 c) (join gv0 p c)), (In (smash a1 c) (join gv0 gv0 a2)), (In (smash a1 c) (join gv0 gv0 a1)), (In (smash a1 c) (join gv0 gv0 c)), (In (smash a1 c) (insert n0 p)), (In (smash a1 c) (insert n0 gv0)), (In (smash a1 c) (insert n p)), (In (smash a1 c) (insert n gv0))
(In (smash a1 c) (carry p a2)), (In (smash a1 c) (carry p a1)), (In (smash a1 c) (carry p c)), (In (smash a1 c) (carry gv0 a2)), (In (smash a1 c) (carry gv0 a1)), (In (smash a1 c) (carry gv0 c)), (In (smash a1 c) (p ++ p)), (In (smash a1 c) (p ++ gv0)), (In (smash a1 c) (gv0 ++ p)), (In (smash a1 c) (gv0 ++ gv0))
(In (smash c a2) p), (In (smash c a2) gv0), (In (smash c a2) (a2 :: p)), (In (smash c a2) (a2 :: gv0)), (In (smash c a2) (a1 :: p)), (In (smash c a2) (a1 :: gv0)), (In (smash c a2) (c :: p)), (In (smash c a2) (c :: gv0)), (In (smash c a2) (merge p p)), (In (smash c a2) (merge p gv0))
(In (smash c a2) (merge gv0 p)), (In (smash c a2) (merge gv0 gv0)), (In (smash c a2) (heap_delete_max a2)), (In (smash c a2) (heap_delete_max a1)), (In (smash c a2) (heap_delete_max c)), (In (smash c a2) (join p p a2)), (In (smash c a2) (join p p a1)), (In (smash c a2) (join p p c)), (In (smash c a2) (join p gv0 a2)), (In (smash c a2) (join p gv0 a1))
(In (smash c a2) (join p gv0 c)), (In (smash c a2) (join gv0 p a2)), (In (smash c a2) (join gv0 p a1)), (In (smash c a2) (join gv0 p c)), (In (smash c a2) (join gv0 gv0 a2)), (In (smash c a2) (join gv0 gv0 a1)), (In (smash c a2) (join gv0 gv0 c)), (In (smash c a2) (insert n0 p)), (In (smash c a2) (insert n0 gv0)), (In (smash c a2) (insert n p))
(In (smash c a2) (insert n gv0)), (In (smash c a2) (carry p a2)), (In (smash c a2) (carry p a1)), (In (smash c a2) (carry p c)), (In (smash c a2) (carry gv0 a2)), (In (smash c a2) (carry gv0 a1)), (In (smash c a2) (carry gv0 c)), (In (smash c a2) (p ++ p)), (In (smash c a2) (p ++ gv0)), (In (smash c a2) (gv0 ++ p))
(In (smash c a2) (gv0 ++ gv0)), (In (smash c a1) p), (In (smash c a1) gv0), (In (smash c a1) (a2 :: p)), (In (smash c a1) (a2 :: gv0)), (In (smash c a1) (a1 :: p)), (In (smash c a1) (a1 :: gv0)), (In (smash c a1) (c :: p)), (In (smash c a1) (c :: gv0)), (In (smash c a1) (merge p p))
(In (smash c a1) (merge p gv0)), (In (smash c a1) (merge gv0 p)), (In (smash c a1) (merge gv0 gv0)), (In (smash c a1) (heap_delete_max a2)), (In (smash c a1) (heap_delete_max a1)), (In (smash c a1) (heap_delete_max c)), (In (smash c a1) (join p p a2)), (In (smash c a1) (join p p a1)), (In (smash c a1) (join p p c)), (In (smash c a1) (join p gv0 a2))
(In (smash c a1) (join p gv0 a1)), (In (smash c a1) (join p gv0 c)), (In (smash c a1) (join gv0 p a2)), (In (smash c a1) (join gv0 p a1)), (In (smash c a1) (join gv0 p c)), (In (smash c a1) (join gv0 gv0 a2)), (In (smash c a1) (join gv0 gv0 a1)), (In (smash c a1) (join gv0 gv0 c)), (In (smash c a1) (insert n0 p)), (In (smash c a1) (insert n0 gv0))
(In (smash c a1) (insert n p)), (In (smash c a1) (insert n gv0)), (In (smash c a1) (carry p a2)), (In (smash c a1) (carry p a1)), (In (smash c a1) (carry p c)), (In (smash c a1) (carry gv0 a2)), (In (smash c a1) (carry gv0 a1)), (In (smash c a1) (carry gv0 c)), (In (smash c a1) (p ++ p)), (In (smash c a1) (p ++ gv0))
(In (smash c a1) (gv0 ++ p)), (In (smash c a1) (gv0 ++ gv0)), (In (smash c c) p), (In (smash c c) gv0), (In (smash c c) (a2 :: p)), (In (smash c c) (a2 :: gv0)), (In (smash c c) (a1 :: p)), (In (smash c c) (a1 :: gv0)), (In (smash c c) (c :: p)), (In (smash c c) (c :: gv0))
(In (smash c c) (merge p p)), (In (smash c c) (merge p gv0)), (In (smash c c) (merge gv0 p)), (In (smash c c) (merge gv0 gv0)), (In (smash c c) (heap_delete_max a2)), (In (smash c c) (heap_delete_max a1)), (In (smash c c) (heap_delete_max c)), (In (smash c c) (join p p a2)), (In (smash c c) (join p p a1)), (In (smash c c) (join p p c))
(In (smash c c) (join p gv0 a2)), (In (smash c c) (join p gv0 a1)), (In (smash c c) (join p gv0 c)), (In (smash c c) (join gv0 p a2)), (In (smash c c) (join gv0 p a1)), (In (smash c c) (join gv0 p c)), (In (smash c c) (join gv0 gv0 a2)), (In (smash c c) (join gv0 gv0 a1)), (In (smash c c) (join gv0 gv0 c)), (In (smash c c) (insert n0 p))
(In (smash c c) (insert n0 gv0)), (In (smash c c) (insert n p)), (In (smash c c) (insert n gv0)), (In (smash c c) (carry p a2)), (In (smash c c) (carry p a1)), (In (smash c c) (carry p c)), (In (smash c c) (carry gv0 a2)), (In (smash c c) (carry gv0 a1)), (In (smash c c) (carry gv0 c)), (In (smash c c) (p ++ p))
(In (smash c c) (p ++ gv0)), (In (smash c c) (gv0 ++ p)), (In (smash c c) (gv0 ++ gv0)), (In Leaf p), (In Leaf gv0), (In Leaf (a2 :: p)), (In Leaf (a2 :: gv0)), (In Leaf (a1 :: p)), (In Leaf (a1 :: gv0)), (In Leaf (c :: p))
(In Leaf (c :: gv0)), (In Leaf (merge p p)), (In Leaf (merge p gv0)), (In Leaf (merge gv0 p)), (In Leaf (merge gv0 gv0)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max c)), (In Leaf (join p p a2)), (In Leaf (join p p a1))
(In Leaf (join p p c)), (In Leaf (join p gv0 a2)), (In Leaf (join p gv0 a1)), (In Leaf (join p gv0 c)), (In Leaf (join gv0 p a2)), (In Leaf (join gv0 p a1)), (In Leaf (join gv0 p c)), (In Leaf (join gv0 gv0 a2)), (In Leaf (join gv0 gv0 a1)), (In Leaf (join gv0 gv0 c))
(In Leaf (insert n0 p)), (In Leaf (insert n0 gv0)), (In Leaf (insert n p)), (In Leaf (insert n gv0)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (carry p c)), (In Leaf (carry gv0 a2)), (In Leaf (carry gv0 a1)), (In Leaf (carry gv0 c))
(In Leaf (p ++ p)), (In Leaf (p ++ gv0)), (In Leaf (gv0 ++ p)), (In Leaf (gv0 ++ gv0)), (n0 < find_max' n0 p), (n0 < find_max' n0 gv0), (n0 < find_max' n p), (n0 < find_max' n gv0), (n0 < length p), (n0 < length gv0)
(n < find_max' n0 p), (n < find_max' n0 gv0), (n < find_max' n p), (n < find_max' n gv0), (n < length p), (n < length gv0), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n0 gv0), (find_max' n0 p < find_max' n p)
(find_max' n0 p < find_max' n gv0), (find_max' n0 p < length p), (find_max' n0 p < length gv0), (find_max' n0 gv0 < n0), (find_max' n0 gv0 < n), (find_max' n0 gv0 < find_max' n0 p), (find_max' n0 gv0 < find_max' n p), (find_max' n0 gv0 < find_max' n gv0), (find_max' n0 gv0 < length p), (find_max' n0 gv0 < length gv0)
(find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < find_max' n0 gv0), (find_max' n p < find_max' n gv0), (find_max' n p < length p), (find_max' n p < length gv0), (find_max' n gv0 < n0), (find_max' n gv0 < n), (find_max' n gv0 < find_max' n0 p)
(find_max' n gv0 < find_max' n0 gv0), (find_max' n gv0 < find_max' n p), (find_max' n gv0 < length p), (find_max' n gv0 < length gv0), (length p < n0), (length p < n), (length p < find_max' n0 p), (length p < find_max' n0 gv0), (length p < find_max' n p), (length p < find_max' n gv0)
(length p < length gv0), (length gv0 < n0), (length gv0 < n), (length gv0 < find_max' n0 p), (length gv0 < find_max' n0 gv0), (length gv0 < find_max' n p), (length gv0 < find_max' n gv0), (length gv0 < length p), (n0 <= find_max' n0 p), (n0 <= find_max' n0 gv0)
(n0 <= find_max' n p), (n0 <= find_max' n gv0), (n0 <= length p), (n0 <= length gv0), (n <= find_max' n0 p), (n <= find_max' n0 gv0), (n <= find_max' n p), (n <= find_max' n gv0), (n <= length p), (n <= length gv0)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n0 gv0), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= find_max' n gv0), (find_max' n0 p <= length p), (find_max' n0 p <= length gv0), (find_max' n0 gv0 <= n0), (find_max' n0 gv0 <= n), (find_max' n0 gv0 <= find_max' n0 p)
(find_max' n0 gv0 <= find_max' n p), (find_max' n0 gv0 <= find_max' n gv0), (find_max' n0 gv0 <= length p), (find_max' n0 gv0 <= length gv0), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n0 gv0), (find_max' n p <= find_max' n gv0), (find_max' n p <= length p)
(find_max' n p <= length gv0), (find_max' n gv0 <= n0), (find_max' n gv0 <= n), (find_max' n gv0 <= find_max' n0 p), (find_max' n gv0 <= find_max' n0 gv0), (find_max' n gv0 <= find_max' n p), (find_max' n gv0 <= length p), (find_max' n gv0 <= length gv0), (length p <= n0), (length p <= n)
(length p <= find_max' n0 p), (length p <= find_max' n0 gv0), (length p <= find_max' n p), (length p <= find_max' n gv0), (length p <= length gv0), (length gv0 <= n0), (length gv0 <= n), (length gv0 <= find_max' n0 p), (length gv0 <= find_max' n0 gv0), (length gv0 <= find_max' n p)
(length gv0 <= find_max' n gv0), (length gv0 <= length p), (~ priq p), (~ priq gv0), (~ priqq n0 p), (~ priqq n0 gv0), (~ priqq n p), (~ priqq n gv0), (~ pow2heap n0 a2), (~ pow2heap n0 a1)
(~ pow2heap n0 c), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n c), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n0 c), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n0 n c)
(~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 c), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n c), (~ Permutation p p), (~ Permutation p gv0), (~ Permutation gv0 p), (~ Permutation gv0 gv0)
(~ In a2 p), (~ In a2 gv0), (~ In a1 p), (~ In a1 gv0), (~ In c p), (~ In c gv0), (~ n0 < n0), (~ n0 < n), (~ n < n0), (~ n < n)
(~ n0 <= n0), (~ n0 <= n), (~ n <= n0), (~ n <= n), (a2 <> a2), (a2 <> a1), (a2 <> c), (a1 <> a2), (a1 <> a1), (a1 <> c)
(c <> a2), (c <> a1), (c <> c), (p <> p), (p <> gv0), (gv0 <> p), (gv0 <> gv0), (n0 <> n0), (n0 <> n), (n <> n0)
(n <> n), (None = Some p), (None = Some gv0), (a2 :: p = p), (a2 :: p = gv0), (a2 :: p = merge p p), (a2 :: p = merge p gv0), (a2 :: p = merge gv0 p), (a2 :: p = merge gv0 gv0), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max c), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p c), (a2 :: p = join p gv0 a2), (a2 :: p = join p gv0 a1), (a2 :: p = join p gv0 c), (a2 :: p = join gv0 p a2), (a2 :: p = join gv0 p a1)
(a2 :: p = join gv0 p c), (a2 :: p = join gv0 gv0 a2), (a2 :: p = join gv0 gv0 a1), (a2 :: p = join gv0 gv0 c), (a2 :: p = insert n0 p), (a2 :: p = insert n0 gv0), (a2 :: p = insert n p), (a2 :: p = insert n gv0), (a2 :: p = carry p a2), (a2 :: p = carry p a1)
(a2 :: p = carry p c), (a2 :: p = carry gv0 a2), (a2 :: p = carry gv0 a1), (a2 :: p = carry gv0 c), (a2 :: p = p ++ p), (a2 :: p = p ++ gv0), (a2 :: p = gv0 ++ p), (a2 :: p = gv0 ++ gv0), (a2 :: p = []), (a2 :: gv0 = p)
(a2 :: gv0 = gv0), (a2 :: gv0 = merge p p), (a2 :: gv0 = merge p gv0), (a2 :: gv0 = merge gv0 p), (a2 :: gv0 = merge gv0 gv0), (a2 :: gv0 = heap_delete_max a2), (a2 :: gv0 = heap_delete_max a1), (a2 :: gv0 = heap_delete_max c), (a2 :: gv0 = join p p a2), (a2 :: gv0 = join p p a1)
(a2 :: gv0 = join p p c), (a2 :: gv0 = join p gv0 a2), (a2 :: gv0 = join p gv0 a1), (a2 :: gv0 = join p gv0 c), (a2 :: gv0 = join gv0 p a2), (a2 :: gv0 = join gv0 p a1), (a2 :: gv0 = join gv0 p c), (a2 :: gv0 = join gv0 gv0 a2), (a2 :: gv0 = join gv0 gv0 a1), (a2 :: gv0 = join gv0 gv0 c)
(a2 :: gv0 = insert n0 p), (a2 :: gv0 = insert n0 gv0), (a2 :: gv0 = insert n p), (a2 :: gv0 = insert n gv0), (a2 :: gv0 = carry p a2), (a2 :: gv0 = carry p a1), (a2 :: gv0 = carry p c), (a2 :: gv0 = carry gv0 a2), (a2 :: gv0 = carry gv0 a1), (a2 :: gv0 = carry gv0 c)
(a2 :: gv0 = p ++ p), (a2 :: gv0 = p ++ gv0), (a2 :: gv0 = gv0 ++ p), (a2 :: gv0 = gv0 ++ gv0), (a2 :: gv0 = []), (a1 :: p = p), (a1 :: p = gv0), (a1 :: p = merge p p), (a1 :: p = merge p gv0), (a1 :: p = merge gv0 p)
(a1 :: p = merge gv0 gv0), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = heap_delete_max c), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p c), (a1 :: p = join p gv0 a2), (a1 :: p = join p gv0 a1), (a1 :: p = join p gv0 c)
(a1 :: p = join gv0 p a2), (a1 :: p = join gv0 p a1), (a1 :: p = join gv0 p c), (a1 :: p = join gv0 gv0 a2), (a1 :: p = join gv0 gv0 a1), (a1 :: p = join gv0 gv0 c), (a1 :: p = insert n0 p), (a1 :: p = insert n0 gv0), (a1 :: p = insert n p), (a1 :: p = insert n gv0)
(a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = carry p c), (a1 :: p = carry gv0 a2), (a1 :: p = carry gv0 a1), (a1 :: p = carry gv0 c), (a1 :: p = p ++ p), (a1 :: p = p ++ gv0), (a1 :: p = gv0 ++ p), (a1 :: p = gv0 ++ gv0)
(a1 :: p = []), (a1 :: gv0 = p), (a1 :: gv0 = gv0), (a1 :: gv0 = merge p p), (a1 :: gv0 = merge p gv0), (a1 :: gv0 = merge gv0 p), (a1 :: gv0 = merge gv0 gv0), (a1 :: gv0 = heap_delete_max a2), (a1 :: gv0 = heap_delete_max a1), (a1 :: gv0 = heap_delete_max c)
(a1 :: gv0 = join p p a2), (a1 :: gv0 = join p p a1), (a1 :: gv0 = join p p c), (a1 :: gv0 = join p gv0 a2), (a1 :: gv0 = join p gv0 a1), (a1 :: gv0 = join p gv0 c), (a1 :: gv0 = join gv0 p a2), (a1 :: gv0 = join gv0 p a1), (a1 :: gv0 = join gv0 p c), (a1 :: gv0 = join gv0 gv0 a2)
(a1 :: gv0 = join gv0 gv0 a1), (a1 :: gv0 = join gv0 gv0 c), (a1 :: gv0 = insert n0 p), (a1 :: gv0 = insert n0 gv0), (a1 :: gv0 = insert n p), (a1 :: gv0 = insert n gv0), (a1 :: gv0 = carry p a2), (a1 :: gv0 = carry p a1), (a1 :: gv0 = carry p c), (a1 :: gv0 = carry gv0 a2)
(a1 :: gv0 = carry gv0 a1), (a1 :: gv0 = carry gv0 c), (a1 :: gv0 = p ++ p), (a1 :: gv0 = p ++ gv0), (a1 :: gv0 = gv0 ++ p), (a1 :: gv0 = gv0 ++ gv0), (a1 :: gv0 = []), (c :: p = p), (c :: p = gv0), (c :: p = merge p p)
(c :: p = merge p gv0), (c :: p = merge gv0 p), (c :: p = merge gv0 gv0), (c :: p = heap_delete_max a2), (c :: p = heap_delete_max a1), (c :: p = heap_delete_max c), (c :: p = join p p a2), (c :: p = join p p a1), (c :: p = join p p c), (c :: p = join p gv0 a2)
(c :: p = join p gv0 a1), (c :: p = join p gv0 c), (c :: p = join gv0 p a2), (c :: p = join gv0 p a1), (c :: p = join gv0 p c), (c :: p = join gv0 gv0 a2), (c :: p = join gv0 gv0 a1), (c :: p = join gv0 gv0 c), (c :: p = insert n0 p), (c :: p = insert n0 gv0)
(c :: p = insert n p), (c :: p = insert n gv0), (c :: p = carry p a2), (c :: p = carry p a1), (c :: p = carry p c), (c :: p = carry gv0 a2), (c :: p = carry gv0 a1), (c :: p = carry gv0 c), (c :: p = p ++ p), (c :: p = p ++ gv0)
(c :: p = gv0 ++ p), (c :: p = gv0 ++ gv0), (c :: p = []), (c :: gv0 = p), (c :: gv0 = gv0), (c :: gv0 = merge p p), (c :: gv0 = merge p gv0), (c :: gv0 = merge gv0 p), (c :: gv0 = merge gv0 gv0), (c :: gv0 = heap_delete_max a2)
(c :: gv0 = heap_delete_max a1), (c :: gv0 = heap_delete_max c), (c :: gv0 = join p p a2), (c :: gv0 = join p p a1), (c :: gv0 = join p p c), (c :: gv0 = join p gv0 a2), (c :: gv0 = join p gv0 a1), (c :: gv0 = join p gv0 c), (c :: gv0 = join gv0 p a2), (c :: gv0 = join gv0 p a1)
(c :: gv0 = join gv0 p c), (c :: gv0 = join gv0 gv0 a2), (c :: gv0 = join gv0 gv0 a1), (c :: gv0 = join gv0 gv0 c), (c :: gv0 = insert n0 p), (c :: gv0 = insert n0 gv0), (c :: gv0 = insert n p), (c :: gv0 = insert n gv0), (c :: gv0 = carry p a2), (c :: gv0 = carry p a1)
(c :: gv0 = carry p c), (c :: gv0 = carry gv0 a2), (c :: gv0 = carry gv0 a1), (c :: gv0 = carry gv0 c), (c :: gv0 = p ++ p), (c :: gv0 = p ++ gv0), (c :: gv0 = gv0 ++ p), (c :: gv0 = gv0 ++ gv0), (c :: gv0 = []), (merge p p = p)
(merge p p = gv0), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max c), (merge p p = join p p a2), (merge p p = join p p a1), (merge p p = join p p c), (merge p p = join p gv0 a2), (merge p p = join p gv0 a1), (merge p p = join p gv0 c)
(merge p p = join gv0 p a2), (merge p p = join gv0 p a1), (merge p p = join gv0 p c), (merge p p = join gv0 gv0 a2), (merge p p = join gv0 gv0 a1), (merge p p = join gv0 gv0 c), (merge p p = insert n0 p), (merge p p = insert n0 gv0), (merge p p = insert n p), (merge p p = insert n gv0)
(merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p c), (merge p p = carry gv0 a2), (merge p p = carry gv0 a1), (merge p p = carry gv0 c), (merge p p = p ++ p), (merge p p = p ++ gv0), (merge p p = gv0 ++ p), (merge p p = gv0 ++ gv0)
(merge p gv0 = p), (merge p gv0 = gv0), (merge p gv0 = heap_delete_max a2), (merge p gv0 = heap_delete_max a1), (merge p gv0 = heap_delete_max c), (merge p gv0 = join p p a2), (merge p gv0 = join p p a1), (merge p gv0 = join p p c), (merge p gv0 = join p gv0 a2), (merge p gv0 = join p gv0 a1)
(merge p gv0 = join p gv0 c), (merge p gv0 = join gv0 p a2), (merge p gv0 = join gv0 p a1), (merge p gv0 = join gv0 p c), (merge p gv0 = join gv0 gv0 a2), (merge p gv0 = join gv0 gv0 a1), (merge p gv0 = join gv0 gv0 c), (merge p gv0 = insert n0 p), (merge p gv0 = insert n0 gv0), (merge p gv0 = insert n p)
(merge p gv0 = insert n gv0), (merge p gv0 = carry p a2), (merge p gv0 = carry p a1), (merge p gv0 = carry p c), (merge p gv0 = carry gv0 a2), (merge p gv0 = carry gv0 a1), (merge p gv0 = carry gv0 c), (merge p gv0 = p ++ p), (merge p gv0 = p ++ gv0), (merge p gv0 = gv0 ++ p)
(merge p gv0 = gv0 ++ gv0), (merge gv0 p = p), (merge gv0 p = gv0), (merge gv0 p = heap_delete_max a2), (merge gv0 p = heap_delete_max a1), (merge gv0 p = heap_delete_max c), (merge gv0 p = join p p a2), (merge gv0 p = join p p a1), (merge gv0 p = join p p c), (merge gv0 p = join p gv0 a2)
(merge gv0 p = join p gv0 a1), (merge gv0 p = join p gv0 c), (merge gv0 p = join gv0 p a2), (merge gv0 p = join gv0 p a1), (merge gv0 p = join gv0 p c), (merge gv0 p = join gv0 gv0 a2), (merge gv0 p = join gv0 gv0 a1), (merge gv0 p = join gv0 gv0 c), (merge gv0 p = insert n0 p), (merge gv0 p = insert n0 gv0)
(merge gv0 p = insert n p), (merge gv0 p = insert n gv0), (merge gv0 p = carry p a2), (merge gv0 p = carry p a1), (merge gv0 p = carry p c), (merge gv0 p = carry gv0 a2), (merge gv0 p = carry gv0 a1), (merge gv0 p = carry gv0 c), (merge gv0 p = p ++ p), (merge gv0 p = p ++ gv0)
(merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ gv0), (merge gv0 gv0 = p), (merge gv0 gv0 = gv0), (merge gv0 gv0 = heap_delete_max a2), (merge gv0 gv0 = heap_delete_max a1), (merge gv0 gv0 = heap_delete_max c), (merge gv0 gv0 = join p p a2), (merge gv0 gv0 = join p p a1), (merge gv0 gv0 = join p p c)
(merge gv0 gv0 = join p gv0 a2), (merge gv0 gv0 = join p gv0 a1), (merge gv0 gv0 = join p gv0 c), (merge gv0 gv0 = join gv0 p a2), (merge gv0 gv0 = join gv0 p a1), (merge gv0 gv0 = join gv0 p c), (merge gv0 gv0 = join gv0 gv0 a2), (merge gv0 gv0 = join gv0 gv0 a1), (merge gv0 gv0 = join gv0 gv0 c), (merge gv0 gv0 = insert n0 p)
(merge gv0 gv0 = insert n0 gv0), (merge gv0 gv0 = insert n p), (merge gv0 gv0 = insert n gv0), (merge gv0 gv0 = carry p a2), (merge gv0 gv0 = carry p a1), (merge gv0 gv0 = carry p c), (merge gv0 gv0 = carry gv0 a2), (merge gv0 gv0 = carry gv0 a1), (merge gv0 gv0 = carry gv0 c), (merge gv0 gv0 = p ++ p)
(merge gv0 gv0 = p ++ gv0), (merge gv0 gv0 = gv0 ++ p), (merge gv0 gv0 = gv0 ++ gv0), (heap_delete_max a2 = p), (heap_delete_max a2 = gv0), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = carry p c), (heap_delete_max a2 = carry gv0 a2), (heap_delete_max a2 = carry gv0 a1)
(heap_delete_max a2 = carry gv0 c), (heap_delete_max a2 = p ++ p), (heap_delete_max a2 = p ++ gv0), (heap_delete_max a2 = gv0 ++ p), (heap_delete_max a2 = gv0 ++ gv0), (heap_delete_max a1 = p), (heap_delete_max a1 = gv0), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p c)
(heap_delete_max a1 = carry gv0 a2), (heap_delete_max a1 = carry gv0 a1), (heap_delete_max a1 = carry gv0 c), (heap_delete_max a1 = p ++ p), (heap_delete_max a1 = p ++ gv0), (heap_delete_max a1 = gv0 ++ p), (heap_delete_max a1 = gv0 ++ gv0), (heap_delete_max c = p), (heap_delete_max c = gv0), (heap_delete_max c = carry p a2)
(heap_delete_max c = carry p a1), (heap_delete_max c = carry p c), (heap_delete_max c = carry gv0 a2), (heap_delete_max c = carry gv0 a1), (heap_delete_max c = carry gv0 c), (heap_delete_max c = p ++ p), (heap_delete_max c = p ++ gv0), (heap_delete_max c = gv0 ++ p), (heap_delete_max c = gv0 ++ gv0), (join p p a2 = p)
(join p p a2 = gv0), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max c), (join p p a2 = insert n0 p), (join p p a2 = insert n0 gv0), (join p p a2 = insert n p), (join p p a2 = insert n gv0), (join p p a2 = carry p a2), (join p p a2 = carry p a1)
(join p p a2 = carry p c), (join p p a2 = carry gv0 a2), (join p p a2 = carry gv0 a1), (join p p a2 = carry gv0 c), (join p p a2 = p ++ p), (join p p a2 = p ++ gv0), (join p p a2 = gv0 ++ p), (join p p a2 = gv0 ++ gv0), (join p p a1 = p), (join p p a1 = gv0)
(join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = heap_delete_max c), (join p p a1 = insert n0 p), (join p p a1 = insert n0 gv0), (join p p a1 = insert n p), (join p p a1 = insert n gv0), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p c)
(join p p a1 = carry gv0 a2), (join p p a1 = carry gv0 a1), (join p p a1 = carry gv0 c), (join p p a1 = p ++ p), (join p p a1 = p ++ gv0), (join p p a1 = gv0 ++ p), (join p p a1 = gv0 ++ gv0), (join p p c = p), (join p p c = gv0), (join p p c = heap_delete_max a2)
(join p p c = heap_delete_max a1), (join p p c = heap_delete_max c), (join p p c = insert n0 p), (join p p c = insert n0 gv0), (join p p c = insert n p), (join p p c = insert n gv0), (join p p c = carry p a2), (join p p c = carry p a1), (join p p c = carry p c), (join p p c = carry gv0 a2)
(join p p c = carry gv0 a1), (join p p c = carry gv0 c), (join p p c = p ++ p), (join p p c = p ++ gv0), (join p p c = gv0 ++ p), (join p p c = gv0 ++ gv0), (join p gv0 a2 = p), (join p gv0 a2 = gv0), (join p gv0 a2 = heap_delete_max a2), (join p gv0 a2 = heap_delete_max a1)
(join p gv0 a2 = heap_delete_max c), (join p gv0 a2 = insert n0 p), (join p gv0 a2 = insert n0 gv0), (join p gv0 a2 = insert n p), (join p gv0 a2 = insert n gv0), (join p gv0 a2 = carry p a2), (join p gv0 a2 = carry p a1), (join p gv0 a2 = carry p c), (join p gv0 a2 = carry gv0 a2), (join p gv0 a2 = carry gv0 a1)
(join p gv0 a2 = carry gv0 c), (join p gv0 a2 = p ++ p), (join p gv0 a2 = p ++ gv0), (join p gv0 a2 = gv0 ++ p), (join p gv0 a2 = gv0 ++ gv0), (join p gv0 a1 = p), (join p gv0 a1 = gv0), (join p gv0 a1 = heap_delete_max a2), (join p gv0 a1 = heap_delete_max a1), (join p gv0 a1 = heap_delete_max c)
(join p gv0 a1 = insert n0 p), (join p gv0 a1 = insert n0 gv0), (join p gv0 a1 = insert n p), (join p gv0 a1 = insert n gv0), (join p gv0 a1 = carry p a2), (join p gv0 a1 = carry p a1), (join p gv0 a1 = carry p c), (join p gv0 a1 = carry gv0 a2), (join p gv0 a1 = carry gv0 a1), (join p gv0 a1 = carry gv0 c)
(join p gv0 a1 = p ++ p), (join p gv0 a1 = p ++ gv0), (join p gv0 a1 = gv0 ++ p), (join p gv0 a1 = gv0 ++ gv0), (join p gv0 c = p), (join p gv0 c = gv0), (join p gv0 c = heap_delete_max a2), (join p gv0 c = heap_delete_max a1), (join p gv0 c = heap_delete_max c), (join p gv0 c = insert n0 p)
(join p gv0 c = insert n0 gv0), (join p gv0 c = insert n p), (join p gv0 c = insert n gv0), (join p gv0 c = carry p a2), (join p gv0 c = carry p a1), (join p gv0 c = carry p c), (join p gv0 c = carry gv0 a2), (join p gv0 c = carry gv0 a1), (join p gv0 c = carry gv0 c), (join p gv0 c = p ++ p)
(join p gv0 c = p ++ gv0), (join p gv0 c = gv0 ++ p), (join p gv0 c = gv0 ++ gv0), (join gv0 p a2 = p), (join gv0 p a2 = gv0), (join gv0 p a2 = heap_delete_max a2), (join gv0 p a2 = heap_delete_max a1), (join gv0 p a2 = heap_delete_max c), (join gv0 p a2 = insert n0 p), (join gv0 p a2 = insert n0 gv0)
(join gv0 p a2 = insert n p), (join gv0 p a2 = insert n gv0), (join gv0 p a2 = carry p a2), (join gv0 p a2 = carry p a1), (join gv0 p a2 = carry p c), (join gv0 p a2 = carry gv0 a2), (join gv0 p a2 = carry gv0 a1), (join gv0 p a2 = carry gv0 c), (join gv0 p a2 = p ++ p), (join gv0 p a2 = p ++ gv0)
(join gv0 p a2 = gv0 ++ p), (join gv0 p a2 = gv0 ++ gv0), (join gv0 p a1 = p), (join gv0 p a1 = gv0), (join gv0 p a1 = heap_delete_max a2), (join gv0 p a1 = heap_delete_max a1), (join gv0 p a1 = heap_delete_max c), (join gv0 p a1 = insert n0 p), (join gv0 p a1 = insert n0 gv0), (join gv0 p a1 = insert n p)
(join gv0 p a1 = insert n gv0), (join gv0 p a1 = carry p a2), (join gv0 p a1 = carry p a1), (join gv0 p a1 = carry p c), (join gv0 p a1 = carry gv0 a2), (join gv0 p a1 = carry gv0 a1), (join gv0 p a1 = carry gv0 c), (join gv0 p a1 = p ++ p), (join gv0 p a1 = p ++ gv0), (join gv0 p a1 = gv0 ++ p)
(join gv0 p a1 = gv0 ++ gv0), (join gv0 p c = p), (join gv0 p c = gv0), (join gv0 p c = heap_delete_max a2), (join gv0 p c = heap_delete_max a1), (join gv0 p c = heap_delete_max c), (join gv0 p c = insert n0 p), (join gv0 p c = insert n0 gv0), (join gv0 p c = insert n p), (join gv0 p c = insert n gv0)
(join gv0 p c = carry p a2), (join gv0 p c = carry p a1), (join gv0 p c = carry p c), (join gv0 p c = carry gv0 a2), (join gv0 p c = carry gv0 a1), (join gv0 p c = carry gv0 c), (join gv0 p c = p ++ p), (join gv0 p c = p ++ gv0), (join gv0 p c = gv0 ++ p), (join gv0 p c = gv0 ++ gv0)
(join gv0 gv0 a2 = p), (join gv0 gv0 a2 = gv0), (join gv0 gv0 a2 = heap_delete_max a2), (join gv0 gv0 a2 = heap_delete_max a1), (join gv0 gv0 a2 = heap_delete_max c), (join gv0 gv0 a2 = insert n0 p), (join gv0 gv0 a2 = insert n0 gv0), (join gv0 gv0 a2 = insert n p), (join gv0 gv0 a2 = insert n gv0), (join gv0 gv0 a2 = carry p a2)
(join gv0 gv0 a2 = carry p a1), (join gv0 gv0 a2 = carry p c), (join gv0 gv0 a2 = carry gv0 a2), (join gv0 gv0 a2 = carry gv0 a1), (join gv0 gv0 a2 = carry gv0 c), (join gv0 gv0 a2 = p ++ p), (join gv0 gv0 a2 = p ++ gv0), (join gv0 gv0 a2 = gv0 ++ p), (join gv0 gv0 a2 = gv0 ++ gv0), (join gv0 gv0 a1 = p)
(join gv0 gv0 a1 = gv0), (join gv0 gv0 a1 = heap_delete_max a2), (join gv0 gv0 a1 = heap_delete_max a1), (join gv0 gv0 a1 = heap_delete_max c), (join gv0 gv0 a1 = insert n0 p), (join gv0 gv0 a1 = insert n0 gv0), (join gv0 gv0 a1 = insert n p), (join gv0 gv0 a1 = insert n gv0), (join gv0 gv0 a1 = carry p a2), (join gv0 gv0 a1 = carry p a1)
(join gv0 gv0 a1 = carry p c), (join gv0 gv0 a1 = carry gv0 a2), (join gv0 gv0 a1 = carry gv0 a1), (join gv0 gv0 a1 = carry gv0 c), (join gv0 gv0 a1 = p ++ p), (join gv0 gv0 a1 = p ++ gv0), (join gv0 gv0 a1 = gv0 ++ p), (join gv0 gv0 a1 = gv0 ++ gv0), (join gv0 gv0 c = p), (join gv0 gv0 c = gv0)
(join gv0 gv0 c = heap_delete_max a2), (join gv0 gv0 c = heap_delete_max a1), (join gv0 gv0 c = heap_delete_max c), (join gv0 gv0 c = insert n0 p), (join gv0 gv0 c = insert n0 gv0), (join gv0 gv0 c = insert n p), (join gv0 gv0 c = insert n gv0), (join gv0 gv0 c = carry p a2), (join gv0 gv0 c = carry p a1), (join gv0 gv0 c = carry p c)
(join gv0 gv0 c = carry gv0 a2), (join gv0 gv0 c = carry gv0 a1), (join gv0 gv0 c = carry gv0 c), (join gv0 gv0 c = p ++ p), (join gv0 gv0 c = p ++ gv0), (join gv0 gv0 c = gv0 ++ p), (join gv0 gv0 c = gv0 ++ gv0), (insert n0 p = p), (insert n0 p = gv0), (insert n0 p = heap_delete_max a2)
(insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max c), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p c), (insert n0 p = carry gv0 a2), (insert n0 p = carry gv0 a1), (insert n0 p = carry gv0 c), (insert n0 p = p ++ p), (insert n0 p = p ++ gv0)
(insert n0 p = gv0 ++ p), (insert n0 p = gv0 ++ gv0), (insert n0 gv0 = p), (insert n0 gv0 = gv0), (insert n0 gv0 = heap_delete_max a2), (insert n0 gv0 = heap_delete_max a1), (insert n0 gv0 = heap_delete_max c), (insert n0 gv0 = carry p a2), (insert n0 gv0 = carry p a1), (insert n0 gv0 = carry p c)
(insert n0 gv0 = carry gv0 a2), (insert n0 gv0 = carry gv0 a1), (insert n0 gv0 = carry gv0 c), (insert n0 gv0 = p ++ p), (insert n0 gv0 = p ++ gv0), (insert n0 gv0 = gv0 ++ p), (insert n0 gv0 = gv0 ++ gv0), (insert n p = p), (insert n p = gv0), (insert n p = heap_delete_max a2)
(insert n p = heap_delete_max a1), (insert n p = heap_delete_max c), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p c), (insert n p = carry gv0 a2), (insert n p = carry gv0 a1), (insert n p = carry gv0 c), (insert n p = p ++ p), (insert n p = p ++ gv0)
(insert n p = gv0 ++ p), (insert n p = gv0 ++ gv0), (insert n gv0 = p), (insert n gv0 = gv0), (insert n gv0 = heap_delete_max a2), (insert n gv0 = heap_delete_max a1), (insert n gv0 = heap_delete_max c), (insert n gv0 = carry p a2), (insert n gv0 = carry p a1), (insert n gv0 = carry p c)
(insert n gv0 = carry gv0 a2), (insert n gv0 = carry gv0 a1), (insert n gv0 = carry gv0 c), (insert n gv0 = p ++ p), (insert n gv0 = p ++ gv0), (insert n gv0 = gv0 ++ p), (insert n gv0 = gv0 ++ gv0), (carry p a2 = p), (carry p a2 = gv0), (carry p a2 = p ++ p)
(carry p a2 = p ++ gv0), (carry p a2 = gv0 ++ p), (carry p a2 = gv0 ++ gv0), (carry p a1 = p), (carry p a1 = gv0), (carry p a1 = p ++ p), (carry p a1 = p ++ gv0), (carry p a1 = gv0 ++ p), (carry p a1 = gv0 ++ gv0), (carry p c = p)
(carry p c = gv0), (carry p c = p ++ p), (carry p c = p ++ gv0), (carry p c = gv0 ++ p), (carry p c = gv0 ++ gv0), (carry gv0 a2 = p), (carry gv0 a2 = gv0), (carry gv0 a2 = p ++ p), (carry gv0 a2 = p ++ gv0), (carry gv0 a2 = gv0 ++ p)
(carry gv0 a2 = gv0 ++ gv0), (carry gv0 a1 = p), (carry gv0 a1 = gv0), (carry gv0 a1 = p ++ p), (carry gv0 a1 = p ++ gv0), (carry gv0 a1 = gv0 ++ p), (carry gv0 a1 = gv0 ++ gv0), (carry gv0 c = p), (carry gv0 c = gv0), (carry gv0 c = p ++ p)
(carry gv0 c = p ++ gv0), (carry gv0 c = gv0 ++ p), (carry gv0 c = gv0 ++ gv0), (p ++ p = p), (p ++ p = gv0), (p ++ gv0 = p), (p ++ gv0 = gv0), (gv0 ++ p = p), (gv0 ++ p = gv0), (gv0 ++ gv0 = p)
(gv0 ++ gv0 = gv0), ([] = p), ([] = gv0), ([] = merge p p), ([] = merge p gv0), ([] = merge gv0 p), ([] = merge gv0 gv0), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max c)
([] = join p p a2), ([] = join p p a1), ([] = join p p c), ([] = join p gv0 a2), ([] = join p gv0 a1), ([] = join p gv0 c), ([] = join gv0 p a2), ([] = join gv0 p a1), ([] = join gv0 p c), ([] = join gv0 gv0 a2)
([] = join gv0 gv0 a1), ([] = join gv0 gv0 c), ([] = insert n0 p), ([] = insert n0 gv0), ([] = insert n p), ([] = insert n gv0), ([] = carry p a2), ([] = carry p a1), ([] = carry p c), ([] = carry gv0 a2)
([] = carry gv0 a1), ([] = carry gv0 c), ([] = p ++ p), ([] = p ++ gv0), ([] = gv0 ++ p), ([] = gv0 ++ gv0), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n0 gv0), ((p, p) = delete_max_aux n p), ((p, p) = delete_max_aux n gv0)
((p, gv0) = delete_max_aux n0 p), ((p, gv0) = delete_max_aux n0 gv0), ((p, gv0) = delete_max_aux n p), ((p, gv0) = delete_max_aux n gv0), ((gv0, p) = delete_max_aux n0 p), ((gv0, p) = delete_max_aux n0 gv0), ((gv0, p) = delete_max_aux n p), ((gv0, p) = delete_max_aux n gv0), ((gv0, gv0) = delete_max_aux n0 p), ((gv0, gv0) = delete_max_aux n0 gv0)
((gv0, gv0) = delete_max_aux n p), ((gv0, gv0) = delete_max_aux n gv0), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = c), (Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 c), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1)
(Node n0 a2 a2 = smash a1 c), (Node n0 a2 a2 = smash c a2), (Node n0 a2 a2 = smash c a1), (Node n0 a2 a2 = smash c c), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = c), (Node n0 a2 a1 = smash a2 a2), (Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 c)
(Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 c), (Node n0 a2 a1 = smash c a2), (Node n0 a2 a1 = smash c a1), (Node n0 a2 a1 = smash c c), (Node n0 a2 c = a2), (Node n0 a2 c = a1), (Node n0 a2 c = c), (Node n0 a2 c = smash a2 a2)
(Node n0 a2 c = smash a2 a1), (Node n0 a2 c = smash a2 c), (Node n0 a2 c = smash a1 a2), (Node n0 a2 c = smash a1 a1), (Node n0 a2 c = smash a1 c), (Node n0 a2 c = smash c a2), (Node n0 a2 c = smash c a1), (Node n0 a2 c = smash c c), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1)
(Node n0 a1 a2 = c), (Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 c), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 c), (Node n0 a1 a2 = smash c a2), (Node n0 a1 a2 = smash c a1), (Node n0 a1 a2 = smash c c)
(Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = c), (Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 c), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 c), (Node n0 a1 a1 = smash c a2)
(Node n0 a1 a1 = smash c a1), (Node n0 a1 a1 = smash c c), (Node n0 a1 c = a2), (Node n0 a1 c = a1), (Node n0 a1 c = c), (Node n0 a1 c = smash a2 a2), (Node n0 a1 c = smash a2 a1), (Node n0 a1 c = smash a2 c), (Node n0 a1 c = smash a1 a2), (Node n0 a1 c = smash a1 a1)
(Node n0 a1 c = smash a1 c), (Node n0 a1 c = smash c a2), (Node n0 a1 c = smash c a1), (Node n0 a1 c = smash c c), (Node n0 c a2 = a2), (Node n0 c a2 = a1), (Node n0 c a2 = c), (Node n0 c a2 = smash a2 a2), (Node n0 c a2 = smash a2 a1), (Node n0 c a2 = smash a2 c)
(Node n0 c a2 = smash a1 a2), (Node n0 c a2 = smash a1 a1), (Node n0 c a2 = smash a1 c), (Node n0 c a2 = smash c a2), (Node n0 c a2 = smash c a1), (Node n0 c a2 = smash c c), (Node n0 c a1 = a2), (Node n0 c a1 = a1), (Node n0 c a1 = c), (Node n0 c a1 = smash a2 a2)
(Node n0 c a1 = smash a2 a1), (Node n0 c a1 = smash a2 c), (Node n0 c a1 = smash a1 a2), (Node n0 c a1 = smash a1 a1), (Node n0 c a1 = smash a1 c), (Node n0 c a1 = smash c a2), (Node n0 c a1 = smash c a1), (Node n0 c a1 = smash c c), (Node n0 c c = a2), (Node n0 c c = a1)
(Node n0 c c = c), (Node n0 c c = smash a2 a2), (Node n0 c c = smash a2 a1), (Node n0 c c = smash a2 c), (Node n0 c c = smash a1 a2), (Node n0 c c = smash a1 a1), (Node n0 c c = smash a1 c), (Node n0 c c = smash c a2), (Node n0 c c = smash c a1), (Node n0 c c = smash c c)
(Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = c), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 c), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 c), (Node n a2 a2 = smash c a2)
(Node n a2 a2 = smash c a1), (Node n a2 a2 = smash c c), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = c), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 c), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1)
(Node n a2 a1 = smash a1 c), (Node n a2 a1 = smash c a2), (Node n a2 a1 = smash c a1), (Node n a2 a1 = smash c c), (Node n a2 c = a2), (Node n a2 c = a1), (Node n a2 c = c), (Node n a2 c = smash a2 a2), (Node n a2 c = smash a2 a1), (Node n a2 c = smash a2 c)
(Node n a2 c = smash a1 a2), (Node n a2 c = smash a1 a1), (Node n a2 c = smash a1 c), (Node n a2 c = smash c a2), (Node n a2 c = smash c a1), (Node n a2 c = smash c c), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = c), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 c), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 c), (Node n a1 a2 = smash c a2), (Node n a1 a2 = smash c a1), (Node n a1 a2 = smash c c), (Node n a1 a1 = a2), (Node n a1 a1 = a1)
(Node n a1 a1 = c), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 c), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 c), (Node n a1 a1 = smash c a2), (Node n a1 a1 = smash c a1), (Node n a1 a1 = smash c c)
(Node n a1 c = a2), (Node n a1 c = a1), (Node n a1 c = c), (Node n a1 c = smash a2 a2), (Node n a1 c = smash a2 a1), (Node n a1 c = smash a2 c), (Node n a1 c = smash a1 a2), (Node n a1 c = smash a1 a1), (Node n a1 c = smash a1 c), (Node n a1 c = smash c a2)
(Node n a1 c = smash c a1), (Node n a1 c = smash c c), (Node n c a2 = a2), (Node n c a2 = a1), (Node n c a2 = c), (Node n c a2 = smash a2 a2), (Node n c a2 = smash a2 a1), (Node n c a2 = smash a2 c), (Node n c a2 = smash a1 a2), (Node n c a2 = smash a1 a1)
(Node n c a2 = smash a1 c), (Node n c a2 = smash c a2), (Node n c a2 = smash c a1), (Node n c a2 = smash c c), (Node n c a1 = a2), (Node n c a1 = a1), (Node n c a1 = c), (Node n c a1 = smash a2 a2), (Node n c a1 = smash a2 a1), (Node n c a1 = smash a2 c)
(Node n c a1 = smash a1 a2), (Node n c a1 = smash a1 a1), (Node n c a1 = smash a1 c), (Node n c a1 = smash c a2), (Node n c a1 = smash c a1), (Node n c a1 = smash c c), (Node n c c = a2), (Node n c c = a1), (Node n c c = c), (Node n c c = smash a2 a2)
(Node n c c = smash a2 a1), (Node n c c = smash a2 c), (Node n c c = smash a1 a2), (Node n c c = smash a1 a1), (Node n c c = smash a1 c), (Node n c c = smash c a2), (Node n c c = smash c a1), (Node n c c = smash c c), (smash a2 a2 = a2), (smash a2 a2 = a1)
(smash a2 a2 = c), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = c), (smash a2 c = a2), (smash a2 c = a1), (smash a2 c = c), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = c)
(smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = c), (smash a1 c = a2), (smash a1 c = a1), (smash a1 c = c), (smash c a2 = a2), (smash c a2 = a1), (smash c a2 = c), (smash c a1 = a2)
(smash c a1 = a1), (smash c a1 = c), (smash c c = a2), (smash c c = a1), (smash c c = c), (Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 c), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1)
(Leaf = Node n0 a1 c), (Leaf = Node n0 c a2), (Leaf = Node n0 c a1), (Leaf = Node n0 c c), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 c), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 c)
(Leaf = Node n c a2), (Leaf = Node n c a1), (Leaf = Node n c c), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 c), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 c), (Leaf = smash c a2)
(Leaf = smash c a1), (Leaf = smash c c), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n0 gv0 = n0), (find_max' n0 gv0 = n), (find_max' n p = n0), (find_max' n p = n), (find_max' n gv0 = n0), (find_max' n gv0 = n)
(length p = n0), (length p = n), (length p = find_max' n0 p), (length p = find_max' n0 gv0), (length p = find_max' n p), (length p = find_max' n gv0), (length gv0 = n0), (length gv0 = n), (length gv0 = find_max' n0 p), (length gv0 = find_max' n0 gv0)
(length gv0 = find_max' n p), (length gv0 = find_max' n gv0), (Some n0 = find_max p), (Some n0 = find_max gv0), (Some n = find_max p), (Some n = find_max gv0), (None = Some n0), (None = Some n), (None = find_max p), (None = find_max gv0)
(None = Some a2), (None = Some a1), (None = Some c), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n0))
((n0 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))

Label: 3 (3)
(priq gv1), (priq gv0), (priqq n gv1), (priqq n gv0), (pow2heap n c), (pow2heapp n n c), (Permutation gv1 gv1), (Permutation gv1 gv0), (Permutation gv0 gv1), (Permutation gv0 gv0)
(In c gv1), (In c gv0), (n < n), (n <= n), (c = c), (gv1 = gv1), (gv1 = gv0), (gv0 = gv1), (gv0 = gv0), (n = n)
(false = (n >? n)), (false = (n >=? n)), (true = (n >? n)), (true = (n >=? n)), (Abs gv1 []), (Abs gv0 []), (Abs (c :: gv1) []), (Abs (c :: gv0) []), (Abs (merge gv1 gv1) []), (Abs (merge gv1 gv0) [])
(Abs (merge gv0 gv1) []), (Abs (merge gv0 gv0) []), (Abs (heap_delete_max c) []), (Abs (join gv1 gv1 c) []), (Abs (join gv1 gv0 c) []), (Abs (join gv0 gv1 c) []), (Abs (join gv0 gv0 c) []), (Abs (insert n gv1) []), (Abs (insert n gv0) []), (Abs (carry gv1 c) [])
(Abs (carry gv0 c) []), (Abs (gv1 ++ gv1) []), (Abs (gv1 ++ gv0) []), (Abs (gv0 ++ gv1) []), (Abs (gv0 ++ gv0) []), (Abs [] []), (priqueue_elems gv1 []), (priqueue_elems gv0 []), (priqueue_elems (c :: gv1) []), (priqueue_elems (c :: gv0) [])
(priqueue_elems (merge gv1 gv1) []), (priqueue_elems (merge gv1 gv0) []), (priqueue_elems (merge gv0 gv1) []), (priqueue_elems (merge gv0 gv0) []), (priqueue_elems (heap_delete_max c) []), (priqueue_elems (join gv1 gv1 c) []), (priqueue_elems (join gv1 gv0 c) []), (priqueue_elems (join gv0 gv1 c) []), (priqueue_elems (join gv0 gv0 c) []), (priqueue_elems (insert n gv1) [])
(priqueue_elems (insert n gv0) []), (priqueue_elems (carry gv1 c) []), (priqueue_elems (carry gv0 c) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems (gv1 ++ gv0) []), (priqueue_elems (gv0 ++ gv1) []), (priqueue_elems (gv0 ++ gv0) []), (priqueue_elems [] []), (tree_elems c []), (tree_elems (Node n c c) [])
(tree_elems (smash c c) []), (tree_elems Leaf []), (priq (c :: gv1)), (priq (c :: gv0)), (priq (merge gv1 gv1)), (priq (merge gv1 gv0)), (priq (merge gv0 gv1)), (priq (merge gv0 gv0)), (priq (heap_delete_max c)), (priq (join gv1 gv1 c))
(priq (join gv1 gv0 c)), (priq (join gv0 gv1 c)), (priq (join gv0 gv0 c)), (priq (insert n gv1)), (priq (insert n gv0)), (priq (carry gv1 c)), (priq (carry gv0 c)), (priq (gv1 ++ gv1)), (priq (gv1 ++ gv0)), (priq (gv0 ++ gv1))
(priq (gv0 ++ gv0)), (priqq n (c :: gv1)), (priqq n (c :: gv0)), (priqq n (merge gv1 gv1)), (priqq n (merge gv1 gv0)), (priqq n (merge gv0 gv1)), (priqq n (merge gv0 gv0)), (priqq n (heap_delete_max c)), (priqq n (join gv1 gv1 c)), (priqq n (join gv1 gv0 c))
(priqq n (join gv0 gv1 c)), (priqq n (join gv0 gv0 c)), (priqq n (insert n gv1)), (priqq n (insert n gv0)), (priqq n (carry gv1 c)), (priqq n (carry gv0 c)), (priqq n (gv1 ++ gv1)), (priqq n (gv1 ++ gv0)), (priqq n (gv0 ++ gv1)), (priqq n (gv0 ++ gv0))
(priqq (find_max' n gv1) gv1), (priqq (find_max' n gv1) gv0), (priqq (find_max' n gv1) (c :: gv1)), (priqq (find_max' n gv1) (c :: gv0)), (priqq (find_max' n gv1) (merge gv1 gv1)), (priqq (find_max' n gv1) (merge gv1 gv0)), (priqq (find_max' n gv1) (merge gv0 gv1)), (priqq (find_max' n gv1) (merge gv0 gv0)), (priqq (find_max' n gv1) (heap_delete_max c)), (priqq (find_max' n gv1) (join gv1 gv1 c))
(priqq (find_max' n gv1) (join gv1 gv0 c)), (priqq (find_max' n gv1) (join gv0 gv1 c)), (priqq (find_max' n gv1) (join gv0 gv0 c)), (priqq (find_max' n gv1) (insert n gv1)), (priqq (find_max' n gv1) (insert n gv0)), (priqq (find_max' n gv1) (carry gv1 c)), (priqq (find_max' n gv1) (carry gv0 c)), (priqq (find_max' n gv1) (gv1 ++ gv1)), (priqq (find_max' n gv1) (gv1 ++ gv0)), (priqq (find_max' n gv1) (gv0 ++ gv1))
(priqq (find_max' n gv1) (gv0 ++ gv0)), (priqq (find_max' n gv0) gv1), (priqq (find_max' n gv0) gv0), (priqq (find_max' n gv0) (c :: gv1)), (priqq (find_max' n gv0) (c :: gv0)), (priqq (find_max' n gv0) (merge gv1 gv1)), (priqq (find_max' n gv0) (merge gv1 gv0)), (priqq (find_max' n gv0) (merge gv0 gv1)), (priqq (find_max' n gv0) (merge gv0 gv0)), (priqq (find_max' n gv0) (heap_delete_max c))
(priqq (find_max' n gv0) (join gv1 gv1 c)), (priqq (find_max' n gv0) (join gv1 gv0 c)), (priqq (find_max' n gv0) (join gv0 gv1 c)), (priqq (find_max' n gv0) (join gv0 gv0 c)), (priqq (find_max' n gv0) (insert n gv1)), (priqq (find_max' n gv0) (insert n gv0)), (priqq (find_max' n gv0) (carry gv1 c)), (priqq (find_max' n gv0) (carry gv0 c)), (priqq (find_max' n gv0) (gv1 ++ gv1)), (priqq (find_max' n gv0) (gv1 ++ gv0))
(priqq (find_max' n gv0) (gv0 ++ gv1)), (priqq (find_max' n gv0) (gv0 ++ gv0)), (priqq (length gv1) gv1), (priqq (length gv1) gv0), (priqq (length gv1) (c :: gv1)), (priqq (length gv1) (c :: gv0)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (merge gv1 gv0)), (priqq (length gv1) (merge gv0 gv1)), (priqq (length gv1) (merge gv0 gv0))
(priqq (length gv1) (heap_delete_max c)), (priqq (length gv1) (join gv1 gv1 c)), (priqq (length gv1) (join gv1 gv0 c)), (priqq (length gv1) (join gv0 gv1 c)), (priqq (length gv1) (join gv0 gv0 c)), (priqq (length gv1) (insert n gv1)), (priqq (length gv1) (insert n gv0)), (priqq (length gv1) (carry gv1 c)), (priqq (length gv1) (carry gv0 c)), (priqq (length gv1) (gv1 ++ gv1))
(priqq (length gv1) (gv1 ++ gv0)), (priqq (length gv1) (gv0 ++ gv1)), (priqq (length gv1) (gv0 ++ gv0)), (priqq (length gv0) gv1), (priqq (length gv0) gv0), (priqq (length gv0) (c :: gv1)), (priqq (length gv0) (c :: gv0)), (priqq (length gv0) (merge gv1 gv1)), (priqq (length gv0) (merge gv1 gv0)), (priqq (length gv0) (merge gv0 gv1))
(priqq (length gv0) (merge gv0 gv0)), (priqq (length gv0) (heap_delete_max c)), (priqq (length gv0) (join gv1 gv1 c)), (priqq (length gv0) (join gv1 gv0 c)), (priqq (length gv0) (join gv0 gv1 c)), (priqq (length gv0) (join gv0 gv0 c)), (priqq (length gv0) (insert n gv1)), (priqq (length gv0) (insert n gv0)), (priqq (length gv0) (carry gv1 c)), (priqq (length gv0) (carry gv0 c))
(priqq (length gv0) (gv1 ++ gv1)), (priqq (length gv0) (gv1 ++ gv0)), (priqq (length gv0) (gv0 ++ gv1)), (priqq (length gv0) (gv0 ++ gv0)), (pow2heap n (Node n c c)), (pow2heap n (smash c c)), (pow2heap (find_max' n gv1) c), (pow2heap (find_max' n gv1) (Node n c c)), (pow2heap (find_max' n gv1) (smash c c)), (pow2heap (find_max' n gv0) c)
(pow2heap (find_max' n gv0) (Node n c c)), (pow2heap (find_max' n gv0) (smash c c)), (pow2heap (length gv1) c), (pow2heap (length gv1) (Node n c c)), (pow2heap (length gv1) (smash c c)), (pow2heap (length gv0) c), (pow2heap (length gv0) (Node n c c)), (pow2heap (length gv0) (smash c c)), (pow2heapp n n (Node n c c)), (pow2heapp n n (smash c c))
(pow2heapp n n Leaf), (pow2heapp n (find_max' n gv1) c), (pow2heapp n (find_max' n gv1) (Node n c c)), (pow2heapp n (find_max' n gv1) (smash c c)), (pow2heapp n (find_max' n gv1) Leaf), (pow2heapp n (find_max' n gv0) c), (pow2heapp n (find_max' n gv0) (Node n c c)), (pow2heapp n (find_max' n gv0) (smash c c)), (pow2heapp n (find_max' n gv0) Leaf), (pow2heapp n (length gv1) c)
(pow2heapp n (length gv1) (Node n c c)), (pow2heapp n (length gv1) (smash c c)), (pow2heapp n (length gv1) Leaf), (pow2heapp n (length gv0) c), (pow2heapp n (length gv0) (Node n c c)), (pow2heapp n (length gv0) (smash c c)), (pow2heapp n (length gv0) Leaf), (pow2heapp (find_max' n gv1) n c), (pow2heapp (find_max' n gv1) n (Node n c c)), (pow2heapp (find_max' n gv1) n (smash c c))
(pow2heapp (find_max' n gv1) n Leaf), (pow2heapp (find_max' n gv1) (find_max' n gv1) c), (pow2heapp (find_max' n gv1) (find_max' n gv1) (Node n c c)), (pow2heapp (find_max' n gv1) (find_max' n gv1) (smash c c)), (pow2heapp (find_max' n gv1) (find_max' n gv1) Leaf), (pow2heapp (find_max' n gv1) (find_max' n gv0) c), (pow2heapp (find_max' n gv1) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n gv1) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n gv1) (find_max' n gv0) Leaf), (pow2heapp (find_max' n gv1) (length gv1) c)
(pow2heapp (find_max' n gv1) (length gv1) (Node n c c)), (pow2heapp (find_max' n gv1) (length gv1) (smash c c)), (pow2heapp (find_max' n gv1) (length gv1) Leaf), (pow2heapp (find_max' n gv1) (length gv0) c), (pow2heapp (find_max' n gv1) (length gv0) (Node n c c)), (pow2heapp (find_max' n gv1) (length gv0) (smash c c)), (pow2heapp (find_max' n gv1) (length gv0) Leaf), (pow2heapp (find_max' n gv0) n c), (pow2heapp (find_max' n gv0) n (Node n c c)), (pow2heapp (find_max' n gv0) n (smash c c))
(pow2heapp (find_max' n gv0) n Leaf), (pow2heapp (find_max' n gv0) (find_max' n gv1) c), (pow2heapp (find_max' n gv0) (find_max' n gv1) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n gv1) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n gv1) Leaf), (pow2heapp (find_max' n gv0) (find_max' n gv0) c), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n gv0) (length gv1) c)
(pow2heapp (find_max' n gv0) (length gv1) (Node n c c)), (pow2heapp (find_max' n gv0) (length gv1) (smash c c)), (pow2heapp (find_max' n gv0) (length gv1) Leaf), (pow2heapp (find_max' n gv0) (length gv0) c), (pow2heapp (find_max' n gv0) (length gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (length gv0) (smash c c)), (pow2heapp (find_max' n gv0) (length gv0) Leaf), (pow2heapp (length gv1) n c), (pow2heapp (length gv1) n (Node n c c)), (pow2heapp (length gv1) n (smash c c))
(pow2heapp (length gv1) n Leaf), (pow2heapp (length gv1) (find_max' n gv1) c), (pow2heapp (length gv1) (find_max' n gv1) (Node n c c)), (pow2heapp (length gv1) (find_max' n gv1) (smash c c)), (pow2heapp (length gv1) (find_max' n gv1) Leaf), (pow2heapp (length gv1) (find_max' n gv0) c), (pow2heapp (length gv1) (find_max' n gv0) (Node n c c)), (pow2heapp (length gv1) (find_max' n gv0) (smash c c)), (pow2heapp (length gv1) (find_max' n gv0) Leaf), (pow2heapp (length gv1) (length gv1) c)
(pow2heapp (length gv1) (length gv1) (Node n c c)), (pow2heapp (length gv1) (length gv1) (smash c c)), (pow2heapp (length gv1) (length gv1) Leaf), (pow2heapp (length gv1) (length gv0) c), (pow2heapp (length gv1) (length gv0) (Node n c c)), (pow2heapp (length gv1) (length gv0) (smash c c)), (pow2heapp (length gv1) (length gv0) Leaf), (pow2heapp (length gv0) n c), (pow2heapp (length gv0) n (Node n c c)), (pow2heapp (length gv0) n (smash c c))
(pow2heapp (length gv0) n Leaf), (pow2heapp (length gv0) (find_max' n gv1) c), (pow2heapp (length gv0) (find_max' n gv1) (Node n c c)), (pow2heapp (length gv0) (find_max' n gv1) (smash c c)), (pow2heapp (length gv0) (find_max' n gv1) Leaf), (pow2heapp (length gv0) (find_max' n gv0) c), (pow2heapp (length gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (length gv0) (find_max' n gv0) (smash c c)), (pow2heapp (length gv0) (find_max' n gv0) Leaf), (pow2heapp (length gv0) (length gv1) c)
(pow2heapp (length gv0) (length gv1) (Node n c c)), (pow2heapp (length gv0) (length gv1) (smash c c)), (pow2heapp (length gv0) (length gv1) Leaf), (pow2heapp (length gv0) (length gv0) c), (pow2heapp (length gv0) (length gv0) (Node n c c)), (pow2heapp (length gv0) (length gv0) (smash c c)), (pow2heapp (length gv0) (length gv0) Leaf), (Permutation gv1 (c :: gv1)), (Permutation gv1 (c :: gv0)), (Permutation gv1 (merge gv1 gv1))
(Permutation gv1 (merge gv1 gv0)), (Permutation gv1 (merge gv0 gv1)), (Permutation gv1 (merge gv0 gv0)), (Permutation gv1 (heap_delete_max c)), (Permutation gv1 (join gv1 gv1 c)), (Permutation gv1 (join gv1 gv0 c)), (Permutation gv1 (join gv0 gv1 c)), (Permutation gv1 (join gv0 gv0 c)), (Permutation gv1 (insert n gv1)), (Permutation gv1 (insert n gv0))
(Permutation gv1 (carry gv1 c)), (Permutation gv1 (carry gv0 c)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ gv0)), (Permutation gv1 (gv0 ++ gv1)), (Permutation gv1 (gv0 ++ gv0)), (Permutation gv1 []), (Permutation gv0 (c :: gv1)), (Permutation gv0 (c :: gv0)), (Permutation gv0 (merge gv1 gv1))
(Permutation gv0 (merge gv1 gv0)), (Permutation gv0 (merge gv0 gv1)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (heap_delete_max c)), (Permutation gv0 (join gv1 gv1 c)), (Permutation gv0 (join gv1 gv0 c)), (Permutation gv0 (join gv0 gv1 c)), (Permutation gv0 (join gv0 gv0 c)), (Permutation gv0 (insert n gv1)), (Permutation gv0 (insert n gv0))
(Permutation gv0 (carry gv1 c)), (Permutation gv0 (carry gv0 c)), (Permutation gv0 (gv1 ++ gv1)), (Permutation gv0 (gv1 ++ gv0)), (Permutation gv0 (gv0 ++ gv1)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (c :: gv1) gv1), (Permutation (c :: gv1) gv0), (Permutation (c :: gv1) (c :: gv0))
(Permutation (c :: gv1) (merge gv1 gv1)), (Permutation (c :: gv1) (merge gv1 gv0)), (Permutation (c :: gv1) (merge gv0 gv1)), (Permutation (c :: gv1) (merge gv0 gv0)), (Permutation (c :: gv1) (heap_delete_max c)), (Permutation (c :: gv1) (join gv1 gv1 c)), (Permutation (c :: gv1) (join gv1 gv0 c)), (Permutation (c :: gv1) (join gv0 gv1 c)), (Permutation (c :: gv1) (join gv0 gv0 c)), (Permutation (c :: gv1) (insert n gv1))
(Permutation (c :: gv1) (insert n gv0)), (Permutation (c :: gv1) (carry gv1 c)), (Permutation (c :: gv1) (carry gv0 c)), (Permutation (c :: gv1) (gv1 ++ gv1)), (Permutation (c :: gv1) (gv1 ++ gv0)), (Permutation (c :: gv1) (gv0 ++ gv1)), (Permutation (c :: gv1) (gv0 ++ gv0)), (Permutation (c :: gv1) []), (Permutation (c :: gv0) gv1), (Permutation (c :: gv0) gv0)
(Permutation (c :: gv0) (c :: gv1)), (Permutation (c :: gv0) (merge gv1 gv1)), (Permutation (c :: gv0) (merge gv1 gv0)), (Permutation (c :: gv0) (merge gv0 gv1)), (Permutation (c :: gv0) (merge gv0 gv0)), (Permutation (c :: gv0) (heap_delete_max c)), (Permutation (c :: gv0) (join gv1 gv1 c)), (Permutation (c :: gv0) (join gv1 gv0 c)), (Permutation (c :: gv0) (join gv0 gv1 c)), (Permutation (c :: gv0) (join gv0 gv0 c))
(Permutation (c :: gv0) (insert n gv1)), (Permutation (c :: gv0) (insert n gv0)), (Permutation (c :: gv0) (carry gv1 c)), (Permutation (c :: gv0) (carry gv0 c)), (Permutation (c :: gv0) (gv1 ++ gv1)), (Permutation (c :: gv0) (gv1 ++ gv0)), (Permutation (c :: gv0) (gv0 ++ gv1)), (Permutation (c :: gv0) (gv0 ++ gv0)), (Permutation (c :: gv0) []), (Permutation (merge gv1 gv1) gv1)
(Permutation (merge gv1 gv1) gv0), (Permutation (merge gv1 gv1) (c :: gv1)), (Permutation (merge gv1 gv1) (c :: gv0)), (Permutation (merge gv1 gv1) (merge gv1 gv0)), (Permutation (merge gv1 gv1) (merge gv0 gv1)), (Permutation (merge gv1 gv1) (merge gv0 gv0)), (Permutation (merge gv1 gv1) (heap_delete_max c)), (Permutation (merge gv1 gv1) (join gv1 gv1 c)), (Permutation (merge gv1 gv1) (join gv1 gv0 c)), (Permutation (merge gv1 gv1) (join gv0 gv1 c))
(Permutation (merge gv1 gv1) (join gv0 gv0 c)), (Permutation (merge gv1 gv1) (insert n gv1)), (Permutation (merge gv1 gv1) (insert n gv0)), (Permutation (merge gv1 gv1) (carry gv1 c)), (Permutation (merge gv1 gv1) (carry gv0 c)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ gv0)), (Permutation (merge gv1 gv1) (gv0 ++ gv1)), (Permutation (merge gv1 gv1) (gv0 ++ gv0)), (Permutation (merge gv1 gv1) [])
(Permutation (merge gv1 gv0) gv1), (Permutation (merge gv1 gv0) gv0), (Permutation (merge gv1 gv0) (c :: gv1)), (Permutation (merge gv1 gv0) (c :: gv0)), (Permutation (merge gv1 gv0) (merge gv1 gv1)), (Permutation (merge gv1 gv0) (merge gv0 gv1)), (Permutation (merge gv1 gv0) (merge gv0 gv0)), (Permutation (merge gv1 gv0) (heap_delete_max c)), (Permutation (merge gv1 gv0) (join gv1 gv1 c)), (Permutation (merge gv1 gv0) (join gv1 gv0 c))
(Permutation (merge gv1 gv0) (join gv0 gv1 c)), (Permutation (merge gv1 gv0) (join gv0 gv0 c)), (Permutation (merge gv1 gv0) (insert n gv1)), (Permutation (merge gv1 gv0) (insert n gv0)), (Permutation (merge gv1 gv0) (carry gv1 c)), (Permutation (merge gv1 gv0) (carry gv0 c)), (Permutation (merge gv1 gv0) (gv1 ++ gv1)), (Permutation (merge gv1 gv0) (gv1 ++ gv0)), (Permutation (merge gv1 gv0) (gv0 ++ gv1)), (Permutation (merge gv1 gv0) (gv0 ++ gv0))
(Permutation (merge gv1 gv0) []), (Permutation (merge gv0 gv1) gv1), (Permutation (merge gv0 gv1) gv0), (Permutation (merge gv0 gv1) (c :: gv1)), (Permutation (merge gv0 gv1) (c :: gv0)), (Permutation (merge gv0 gv1) (merge gv1 gv1)), (Permutation (merge gv0 gv1) (merge gv1 gv0)), (Permutation (merge gv0 gv1) (merge gv0 gv0)), (Permutation (merge gv0 gv1) (heap_delete_max c)), (Permutation (merge gv0 gv1) (join gv1 gv1 c))
(Permutation (merge gv0 gv1) (join gv1 gv0 c)), (Permutation (merge gv0 gv1) (join gv0 gv1 c)), (Permutation (merge gv0 gv1) (join gv0 gv0 c)), (Permutation (merge gv0 gv1) (insert n gv1)), (Permutation (merge gv0 gv1) (insert n gv0)), (Permutation (merge gv0 gv1) (carry gv1 c)), (Permutation (merge gv0 gv1) (carry gv0 c)), (Permutation (merge gv0 gv1) (gv1 ++ gv1)), (Permutation (merge gv0 gv1) (gv1 ++ gv0)), (Permutation (merge gv0 gv1) (gv0 ++ gv1))
(Permutation (merge gv0 gv1) (gv0 ++ gv0)), (Permutation (merge gv0 gv1) []), (Permutation (merge gv0 gv0) gv1), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (c :: gv1)), (Permutation (merge gv0 gv0) (c :: gv0)), (Permutation (merge gv0 gv0) (merge gv1 gv1)), (Permutation (merge gv0 gv0) (merge gv1 gv0)), (Permutation (merge gv0 gv0) (merge gv0 gv1)), (Permutation (merge gv0 gv0) (heap_delete_max c))
(Permutation (merge gv0 gv0) (join gv1 gv1 c)), (Permutation (merge gv0 gv0) (join gv1 gv0 c)), (Permutation (merge gv0 gv0) (join gv0 gv1 c)), (Permutation (merge gv0 gv0) (join gv0 gv0 c)), (Permutation (merge gv0 gv0) (insert n gv1)), (Permutation (merge gv0 gv0) (insert n gv0)), (Permutation (merge gv0 gv0) (carry gv1 c)), (Permutation (merge gv0 gv0) (carry gv0 c)), (Permutation (merge gv0 gv0) (gv1 ++ gv1)), (Permutation (merge gv0 gv0) (gv1 ++ gv0))
(Permutation (merge gv0 gv0) (gv0 ++ gv1)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (heap_delete_max c) gv1), (Permutation (heap_delete_max c) gv0), (Permutation (heap_delete_max c) (c :: gv1)), (Permutation (heap_delete_max c) (c :: gv0)), (Permutation (heap_delete_max c) (merge gv1 gv1)), (Permutation (heap_delete_max c) (merge gv1 gv0)), (Permutation (heap_delete_max c) (merge gv0 gv1))
(Permutation (heap_delete_max c) (merge gv0 gv0)), (Permutation (heap_delete_max c) (join gv1 gv1 c)), (Permutation (heap_delete_max c) (join gv1 gv0 c)), (Permutation (heap_delete_max c) (join gv0 gv1 c)), (Permutation (heap_delete_max c) (join gv0 gv0 c)), (Permutation (heap_delete_max c) (insert n gv1)), (Permutation (heap_delete_max c) (insert n gv0)), (Permutation (heap_delete_max c) (carry gv1 c)), (Permutation (heap_delete_max c) (carry gv0 c)), (Permutation (heap_delete_max c) (gv1 ++ gv1))
(Permutation (heap_delete_max c) (gv1 ++ gv0)), (Permutation (heap_delete_max c) (gv0 ++ gv1)), (Permutation (heap_delete_max c) (gv0 ++ gv0)), (Permutation (heap_delete_max c) []), (Permutation (join gv1 gv1 c) gv1), (Permutation (join gv1 gv1 c) gv0), (Permutation (join gv1 gv1 c) (c :: gv1)), (Permutation (join gv1 gv1 c) (c :: gv0)), (Permutation (join gv1 gv1 c) (merge gv1 gv1)), (Permutation (join gv1 gv1 c) (merge gv1 gv0))
(Permutation (join gv1 gv1 c) (merge gv0 gv1)), (Permutation (join gv1 gv1 c) (merge gv0 gv0)), (Permutation (join gv1 gv1 c) (heap_delete_max c)), (Permutation (join gv1 gv1 c) (join gv1 gv0 c)), (Permutation (join gv1 gv1 c) (join gv0 gv1 c)), (Permutation (join gv1 gv1 c) (join gv0 gv0 c)), (Permutation (join gv1 gv1 c) (insert n gv1)), (Permutation (join gv1 gv1 c) (insert n gv0)), (Permutation (join gv1 gv1 c) (carry gv1 c)), (Permutation (join gv1 gv1 c) (carry gv0 c))
(Permutation (join gv1 gv1 c) (gv1 ++ gv1)), (Permutation (join gv1 gv1 c) (gv1 ++ gv0)), (Permutation (join gv1 gv1 c) (gv0 ++ gv1)), (Permutation (join gv1 gv1 c) (gv0 ++ gv0)), (Permutation (join gv1 gv1 c) []), (Permutation (join gv1 gv0 c) gv1), (Permutation (join gv1 gv0 c) gv0), (Permutation (join gv1 gv0 c) (c :: gv1)), (Permutation (join gv1 gv0 c) (c :: gv0)), (Permutation (join gv1 gv0 c) (merge gv1 gv1))
(Permutation (join gv1 gv0 c) (merge gv1 gv0)), (Permutation (join gv1 gv0 c) (merge gv0 gv1)), (Permutation (join gv1 gv0 c) (merge gv0 gv0)), (Permutation (join gv1 gv0 c) (heap_delete_max c)), (Permutation (join gv1 gv0 c) (join gv1 gv1 c)), (Permutation (join gv1 gv0 c) (join gv0 gv1 c)), (Permutation (join gv1 gv0 c) (join gv0 gv0 c)), (Permutation (join gv1 gv0 c) (insert n gv1)), (Permutation (join gv1 gv0 c) (insert n gv0)), (Permutation (join gv1 gv0 c) (carry gv1 c))
(Permutation (join gv1 gv0 c) (carry gv0 c)), (Permutation (join gv1 gv0 c) (gv1 ++ gv1)), (Permutation (join gv1 gv0 c) (gv1 ++ gv0)), (Permutation (join gv1 gv0 c) (gv0 ++ gv1)), (Permutation (join gv1 gv0 c) (gv0 ++ gv0)), (Permutation (join gv1 gv0 c) []), (Permutation (join gv0 gv1 c) gv1), (Permutation (join gv0 gv1 c) gv0), (Permutation (join gv0 gv1 c) (c :: gv1)), (Permutation (join gv0 gv1 c) (c :: gv0))
(Permutation (join gv0 gv1 c) (merge gv1 gv1)), (Permutation (join gv0 gv1 c) (merge gv1 gv0)), (Permutation (join gv0 gv1 c) (merge gv0 gv1)), (Permutation (join gv0 gv1 c) (merge gv0 gv0)), (Permutation (join gv0 gv1 c) (heap_delete_max c)), (Permutation (join gv0 gv1 c) (join gv1 gv1 c)), (Permutation (join gv0 gv1 c) (join gv1 gv0 c)), (Permutation (join gv0 gv1 c) (join gv0 gv0 c)), (Permutation (join gv0 gv1 c) (insert n gv1)), (Permutation (join gv0 gv1 c) (insert n gv0))
(Permutation (join gv0 gv1 c) (carry gv1 c)), (Permutation (join gv0 gv1 c) (carry gv0 c)), (Permutation (join gv0 gv1 c) (gv1 ++ gv1)), (Permutation (join gv0 gv1 c) (gv1 ++ gv0)), (Permutation (join gv0 gv1 c) (gv0 ++ gv1)), (Permutation (join gv0 gv1 c) (gv0 ++ gv0)), (Permutation (join gv0 gv1 c) []), (Permutation (join gv0 gv0 c) gv1), (Permutation (join gv0 gv0 c) gv0), (Permutation (join gv0 gv0 c) (c :: gv1))
(Permutation (join gv0 gv0 c) (c :: gv0)), (Permutation (join gv0 gv0 c) (merge gv1 gv1)), (Permutation (join gv0 gv0 c) (merge gv1 gv0)), (Permutation (join gv0 gv0 c) (merge gv0 gv1)), (Permutation (join gv0 gv0 c) (merge gv0 gv0)), (Permutation (join gv0 gv0 c) (heap_delete_max c)), (Permutation (join gv0 gv0 c) (join gv1 gv1 c)), (Permutation (join gv0 gv0 c) (join gv1 gv0 c)), (Permutation (join gv0 gv0 c) (join gv0 gv1 c)), (Permutation (join gv0 gv0 c) (insert n gv1))
(Permutation (join gv0 gv0 c) (insert n gv0)), (Permutation (join gv0 gv0 c) (carry gv1 c)), (Permutation (join gv0 gv0 c) (carry gv0 c)), (Permutation (join gv0 gv0 c) (gv1 ++ gv1)), (Permutation (join gv0 gv0 c) (gv1 ++ gv0)), (Permutation (join gv0 gv0 c) (gv0 ++ gv1)), (Permutation (join gv0 gv0 c) (gv0 ++ gv0)), (Permutation (join gv0 gv0 c) []), (Permutation (insert n gv1) gv1), (Permutation (insert n gv1) gv0)
(Permutation (insert n gv1) (c :: gv1)), (Permutation (insert n gv1) (c :: gv0)), (Permutation (insert n gv1) (merge gv1 gv1)), (Permutation (insert n gv1) (merge gv1 gv0)), (Permutation (insert n gv1) (merge gv0 gv1)), (Permutation (insert n gv1) (merge gv0 gv0)), (Permutation (insert n gv1) (heap_delete_max c)), (Permutation (insert n gv1) (join gv1 gv1 c)), (Permutation (insert n gv1) (join gv1 gv0 c)), (Permutation (insert n gv1) (join gv0 gv1 c))
(Permutation (insert n gv1) (join gv0 gv0 c)), (Permutation (insert n gv1) (insert n gv0)), (Permutation (insert n gv1) (carry gv1 c)), (Permutation (insert n gv1) (carry gv0 c)), (Permutation (insert n gv1) (gv1 ++ gv1)), (Permutation (insert n gv1) (gv1 ++ gv0)), (Permutation (insert n gv1) (gv0 ++ gv1)), (Permutation (insert n gv1) (gv0 ++ gv0)), (Permutation (insert n gv1) []), (Permutation (insert n gv0) gv1)
(Permutation (insert n gv0) gv0), (Permutation (insert n gv0) (c :: gv1)), (Permutation (insert n gv0) (c :: gv0)), (Permutation (insert n gv0) (merge gv1 gv1)), (Permutation (insert n gv0) (merge gv1 gv0)), (Permutation (insert n gv0) (merge gv0 gv1)), (Permutation (insert n gv0) (merge gv0 gv0)), (Permutation (insert n gv0) (heap_delete_max c)), (Permutation (insert n gv0) (join gv1 gv1 c)), (Permutation (insert n gv0) (join gv1 gv0 c))
(Permutation (insert n gv0) (join gv0 gv1 c)), (Permutation (insert n gv0) (join gv0 gv0 c)), (Permutation (insert n gv0) (insert n gv1)), (Permutation (insert n gv0) (carry gv1 c)), (Permutation (insert n gv0) (carry gv0 c)), (Permutation (insert n gv0) (gv1 ++ gv1)), (Permutation (insert n gv0) (gv1 ++ gv0)), (Permutation (insert n gv0) (gv0 ++ gv1)), (Permutation (insert n gv0) (gv0 ++ gv0)), (Permutation (insert n gv0) [])
(Permutation (carry gv1 c) gv1), (Permutation (carry gv1 c) gv0), (Permutation (carry gv1 c) (c :: gv1)), (Permutation (carry gv1 c) (c :: gv0)), (Permutation (carry gv1 c) (merge gv1 gv1)), (Permutation (carry gv1 c) (merge gv1 gv0)), (Permutation (carry gv1 c) (merge gv0 gv1)), (Permutation (carry gv1 c) (merge gv0 gv0)), (Permutation (carry gv1 c) (heap_delete_max c)), (Permutation (carry gv1 c) (join gv1 gv1 c))
(Permutation (carry gv1 c) (join gv1 gv0 c)), (Permutation (carry gv1 c) (join gv0 gv1 c)), (Permutation (carry gv1 c) (join gv0 gv0 c)), (Permutation (carry gv1 c) (insert n gv1)), (Permutation (carry gv1 c) (insert n gv0)), (Permutation (carry gv1 c) (carry gv0 c)), (Permutation (carry gv1 c) (gv1 ++ gv1)), (Permutation (carry gv1 c) (gv1 ++ gv0)), (Permutation (carry gv1 c) (gv0 ++ gv1)), (Permutation (carry gv1 c) (gv0 ++ gv0))
(Permutation (carry gv1 c) []), (Permutation (carry gv0 c) gv1), (Permutation (carry gv0 c) gv0), (Permutation (carry gv0 c) (c :: gv1)), (Permutation (carry gv0 c) (c :: gv0)), (Permutation (carry gv0 c) (merge gv1 gv1)), (Permutation (carry gv0 c) (merge gv1 gv0)), (Permutation (carry gv0 c) (merge gv0 gv1)), (Permutation (carry gv0 c) (merge gv0 gv0)), (Permutation (carry gv0 c) (heap_delete_max c))
(Permutation (carry gv0 c) (join gv1 gv1 c)), (Permutation (carry gv0 c) (join gv1 gv0 c)), (Permutation (carry gv0 c) (join gv0 gv1 c)), (Permutation (carry gv0 c) (join gv0 gv0 c)), (Permutation (carry gv0 c) (insert n gv1)), (Permutation (carry gv0 c) (insert n gv0)), (Permutation (carry gv0 c) (carry gv1 c)), (Permutation (carry gv0 c) (gv1 ++ gv1)), (Permutation (carry gv0 c) (gv1 ++ gv0)), (Permutation (carry gv0 c) (gv0 ++ gv1))
(Permutation (carry gv0 c) (gv0 ++ gv0)), (Permutation (carry gv0 c) []), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) gv0), (Permutation (gv1 ++ gv1) (c :: gv1)), (Permutation (gv1 ++ gv1) (c :: gv0)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 gv0)), (Permutation (gv1 ++ gv1) (merge gv0 gv1)), (Permutation (gv1 ++ gv1) (merge gv0 gv0))
(Permutation (gv1 ++ gv1) (heap_delete_max c)), (Permutation (gv1 ++ gv1) (join gv1 gv1 c)), (Permutation (gv1 ++ gv1) (join gv1 gv0 c)), (Permutation (gv1 ++ gv1) (join gv0 gv1 c)), (Permutation (gv1 ++ gv1) (join gv0 gv0 c)), (Permutation (gv1 ++ gv1) (insert n gv1)), (Permutation (gv1 ++ gv1) (insert n gv0)), (Permutation (gv1 ++ gv1) (carry gv1 c)), (Permutation (gv1 ++ gv1) (carry gv0 c)), (Permutation (gv1 ++ gv1) (gv1 ++ gv0))
(Permutation (gv1 ++ gv1) (gv0 ++ gv1)), (Permutation (gv1 ++ gv1) (gv0 ++ gv0)), (Permutation (gv1 ++ gv1) []), (Permutation (gv1 ++ gv0) gv1), (Permutation (gv1 ++ gv0) gv0), (Permutation (gv1 ++ gv0) (c :: gv1)), (Permutation (gv1 ++ gv0) (c :: gv0)), (Permutation (gv1 ++ gv0) (merge gv1 gv1)), (Permutation (gv1 ++ gv0) (merge gv1 gv0)), (Permutation (gv1 ++ gv0) (merge gv0 gv1))
(Permutation (gv1 ++ gv0) (merge gv0 gv0)), (Permutation (gv1 ++ gv0) (heap_delete_max c)), (Permutation (gv1 ++ gv0) (join gv1 gv1 c)), (Permutation (gv1 ++ gv0) (join gv1 gv0 c)), (Permutation (gv1 ++ gv0) (join gv0 gv1 c)), (Permutation (gv1 ++ gv0) (join gv0 gv0 c)), (Permutation (gv1 ++ gv0) (insert n gv1)), (Permutation (gv1 ++ gv0) (insert n gv0)), (Permutation (gv1 ++ gv0) (carry gv1 c)), (Permutation (gv1 ++ gv0) (carry gv0 c))
(Permutation (gv1 ++ gv0) (gv1 ++ gv1)), (Permutation (gv1 ++ gv0) (gv0 ++ gv1)), (Permutation (gv1 ++ gv0) (gv0 ++ gv0)), (Permutation (gv1 ++ gv0) []), (Permutation (gv0 ++ gv1) gv1), (Permutation (gv0 ++ gv1) gv0), (Permutation (gv0 ++ gv1) (c :: gv1)), (Permutation (gv0 ++ gv1) (c :: gv0)), (Permutation (gv0 ++ gv1) (merge gv1 gv1)), (Permutation (gv0 ++ gv1) (merge gv1 gv0))
(Permutation (gv0 ++ gv1) (merge gv0 gv1)), (Permutation (gv0 ++ gv1) (merge gv0 gv0)), (Permutation (gv0 ++ gv1) (heap_delete_max c)), (Permutation (gv0 ++ gv1) (join gv1 gv1 c)), (Permutation (gv0 ++ gv1) (join gv1 gv0 c)), (Permutation (gv0 ++ gv1) (join gv0 gv1 c)), (Permutation (gv0 ++ gv1) (join gv0 gv0 c)), (Permutation (gv0 ++ gv1) (insert n gv1)), (Permutation (gv0 ++ gv1) (insert n gv0)), (Permutation (gv0 ++ gv1) (carry gv1 c))
(Permutation (gv0 ++ gv1) (carry gv0 c)), (Permutation (gv0 ++ gv1) (gv1 ++ gv1)), (Permutation (gv0 ++ gv1) (gv1 ++ gv0)), (Permutation (gv0 ++ gv1) (gv0 ++ gv0)), (Permutation (gv0 ++ gv1) []), (Permutation (gv0 ++ gv0) gv1), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (c :: gv1)), (Permutation (gv0 ++ gv0) (c :: gv0)), (Permutation (gv0 ++ gv0) (merge gv1 gv1))
(Permutation (gv0 ++ gv0) (merge gv1 gv0)), (Permutation (gv0 ++ gv0) (merge gv0 gv1)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (heap_delete_max c)), (Permutation (gv0 ++ gv0) (join gv1 gv1 c)), (Permutation (gv0 ++ gv0) (join gv1 gv0 c)), (Permutation (gv0 ++ gv0) (join gv0 gv1 c)), (Permutation (gv0 ++ gv0) (join gv0 gv0 c)), (Permutation (gv0 ++ gv0) (insert n gv1)), (Permutation (gv0 ++ gv0) (insert n gv0))
(Permutation (gv0 ++ gv0) (carry gv1 c)), (Permutation (gv0 ++ gv0) (carry gv0 c)), (Permutation (gv0 ++ gv0) (gv1 ++ gv1)), (Permutation (gv0 ++ gv0) (gv1 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ gv1)), (Permutation (gv0 ++ gv0) []), (Permutation [] gv1), (Permutation [] gv0), (Permutation [] (c :: gv1)), (Permutation [] (c :: gv0))
(Permutation [] (merge gv1 gv1)), (Permutation [] (merge gv1 gv0)), (Permutation [] (merge gv0 gv1)), (Permutation [] (merge gv0 gv0)), (Permutation [] (heap_delete_max c)), (Permutation [] (join gv1 gv1 c)), (Permutation [] (join gv1 gv0 c)), (Permutation [] (join gv0 gv1 c)), (Permutation [] (join gv0 gv0 c)), (Permutation [] (insert n gv1))
(Permutation [] (insert n gv0)), (Permutation [] (carry gv1 c)), (Permutation [] (carry gv0 c)), (Permutation [] (gv1 ++ gv1)), (Permutation [] (gv1 ++ gv0)), (Permutation [] (gv0 ++ gv1)), (Permutation [] (gv0 ++ gv0)), (In c (c :: gv1)), (In c (c :: gv0)), (In c (merge gv1 gv1))
(In c (merge gv1 gv0)), (In c (merge gv0 gv1)), (In c (merge gv0 gv0)), (In c (heap_delete_max c)), (In c (join gv1 gv1 c)), (In c (join gv1 gv0 c)), (In c (join gv0 gv1 c)), (In c (join gv0 gv0 c)), (In c (insert n gv1)), (In c (insert n gv0))
(In c (carry gv1 c)), (In c (carry gv0 c)), (In c (gv1 ++ gv1)), (In c (gv1 ++ gv0)), (In c (gv0 ++ gv1)), (In c (gv0 ++ gv0)), (In (Node n c c) gv1), (In (Node n c c) gv0), (In (Node n c c) (c :: gv1)), (In (Node n c c) (c :: gv0))
(In (Node n c c) (merge gv1 gv1)), (In (Node n c c) (merge gv1 gv0)), (In (Node n c c) (merge gv0 gv1)), (In (Node n c c) (merge gv0 gv0)), (In (Node n c c) (heap_delete_max c)), (In (Node n c c) (join gv1 gv1 c)), (In (Node n c c) (join gv1 gv0 c)), (In (Node n c c) (join gv0 gv1 c)), (In (Node n c c) (join gv0 gv0 c)), (In (Node n c c) (insert n gv1))
(In (Node n c c) (insert n gv0)), (In (Node n c c) (carry gv1 c)), (In (Node n c c) (carry gv0 c)), (In (Node n c c) (gv1 ++ gv1)), (In (Node n c c) (gv1 ++ gv0)), (In (Node n c c) (gv0 ++ gv1)), (In (Node n c c) (gv0 ++ gv0)), (In (smash c c) gv1), (In (smash c c) gv0), (In (smash c c) (c :: gv1))
(In (smash c c) (c :: gv0)), (In (smash c c) (merge gv1 gv1)), (In (smash c c) (merge gv1 gv0)), (In (smash c c) (merge gv0 gv1)), (In (smash c c) (merge gv0 gv0)), (In (smash c c) (heap_delete_max c)), (In (smash c c) (join gv1 gv1 c)), (In (smash c c) (join gv1 gv0 c)), (In (smash c c) (join gv0 gv1 c)), (In (smash c c) (join gv0 gv0 c))
(In (smash c c) (insert n gv1)), (In (smash c c) (insert n gv0)), (In (smash c c) (carry gv1 c)), (In (smash c c) (carry gv0 c)), (In (smash c c) (gv1 ++ gv1)), (In (smash c c) (gv1 ++ gv0)), (In (smash c c) (gv0 ++ gv1)), (In (smash c c) (gv0 ++ gv0)), (In Leaf gv1), (In Leaf gv0)
(In Leaf (c :: gv1)), (In Leaf (c :: gv0)), (In Leaf (merge gv1 gv1)), (In Leaf (merge gv1 gv0)), (In Leaf (merge gv0 gv1)), (In Leaf (merge gv0 gv0)), (In Leaf (heap_delete_max c)), (In Leaf (join gv1 gv1 c)), (In Leaf (join gv1 gv0 c)), (In Leaf (join gv0 gv1 c))
(In Leaf (join gv0 gv0 c)), (In Leaf (insert n gv1)), (In Leaf (insert n gv0)), (In Leaf (carry gv1 c)), (In Leaf (carry gv0 c)), (In Leaf (gv1 ++ gv1)), (In Leaf (gv1 ++ gv0)), (In Leaf (gv0 ++ gv1)), (In Leaf (gv0 ++ gv0)), (n < find_max' n gv1)
(n < find_max' n gv0), (n < length gv1), (n < length gv0), (find_max' n gv1 < n), (find_max' n gv1 < find_max' n gv0), (find_max' n gv1 < length gv1), (find_max' n gv1 < length gv0), (find_max' n gv0 < n), (find_max' n gv0 < find_max' n gv1), (find_max' n gv0 < length gv1)
(find_max' n gv0 < length gv0), (length gv1 < n), (length gv1 < find_max' n gv1), (length gv1 < find_max' n gv0), (length gv1 < length gv0), (length gv0 < n), (length gv0 < find_max' n gv1), (length gv0 < find_max' n gv0), (length gv0 < length gv1), (n <= find_max' n gv1)
(n <= find_max' n gv0), (n <= length gv1), (n <= length gv0), (find_max' n gv1 <= n), (find_max' n gv1 <= find_max' n gv0), (find_max' n gv1 <= length gv1), (find_max' n gv1 <= length gv0), (find_max' n gv0 <= n), (find_max' n gv0 <= find_max' n gv1), (find_max' n gv0 <= length gv1)
(find_max' n gv0 <= length gv0), (length gv1 <= n), (length gv1 <= find_max' n gv1), (length gv1 <= find_max' n gv0), (length gv1 <= length gv0), (length gv0 <= n), (length gv0 <= find_max' n gv1), (length gv0 <= find_max' n gv0), (length gv0 <= length gv1), (~ priq gv1)
(~ priq gv0), (~ priqq n gv1), (~ priqq n gv0), (~ pow2heap n c), (~ pow2heapp n n c), (~ Permutation gv1 gv1), (~ Permutation gv1 gv0), (~ Permutation gv0 gv1), (~ Permutation gv0 gv0), (~ In c gv1)
(~ In c gv0), (~ n < n), (~ n <= n), (c <> c), (gv1 <> gv1), (gv1 <> gv0), (gv0 <> gv1), (gv0 <> gv0), (n <> n), (None = Some gv1)
(None = Some gv0), (c :: gv1 = gv1), (c :: gv1 = gv0), (c :: gv1 = merge gv1 gv1), (c :: gv1 = merge gv1 gv0), (c :: gv1 = merge gv0 gv1), (c :: gv1 = merge gv0 gv0), (c :: gv1 = heap_delete_max c), (c :: gv1 = join gv1 gv1 c), (c :: gv1 = join gv1 gv0 c)
(c :: gv1 = join gv0 gv1 c), (c :: gv1 = join gv0 gv0 c), (c :: gv1 = insert n gv1), (c :: gv1 = insert n gv0), (c :: gv1 = carry gv1 c), (c :: gv1 = carry gv0 c), (c :: gv1 = gv1 ++ gv1), (c :: gv1 = gv1 ++ gv0), (c :: gv1 = gv0 ++ gv1), (c :: gv1 = gv0 ++ gv0)
(c :: gv1 = []), (c :: gv0 = gv1), (c :: gv0 = gv0), (c :: gv0 = merge gv1 gv1), (c :: gv0 = merge gv1 gv0), (c :: gv0 = merge gv0 gv1), (c :: gv0 = merge gv0 gv0), (c :: gv0 = heap_delete_max c), (c :: gv0 = join gv1 gv1 c), (c :: gv0 = join gv1 gv0 c)
(c :: gv0 = join gv0 gv1 c), (c :: gv0 = join gv0 gv0 c), (c :: gv0 = insert n gv1), (c :: gv0 = insert n gv0), (c :: gv0 = carry gv1 c), (c :: gv0 = carry gv0 c), (c :: gv0 = gv1 ++ gv1), (c :: gv0 = gv1 ++ gv0), (c :: gv0 = gv0 ++ gv1), (c :: gv0 = gv0 ++ gv0)
(c :: gv0 = []), (merge gv1 gv1 = gv1), (merge gv1 gv1 = gv0), (merge gv1 gv1 = heap_delete_max c), (merge gv1 gv1 = join gv1 gv1 c), (merge gv1 gv1 = join gv1 gv0 c), (merge gv1 gv1 = join gv0 gv1 c), (merge gv1 gv1 = join gv0 gv0 c), (merge gv1 gv1 = insert n gv1), (merge gv1 gv1 = insert n gv0)
(merge gv1 gv1 = carry gv1 c), (merge gv1 gv1 = carry gv0 c), (merge gv1 gv1 = gv1 ++ gv1), (merge gv1 gv1 = gv1 ++ gv0), (merge gv1 gv1 = gv0 ++ gv1), (merge gv1 gv1 = gv0 ++ gv0), (merge gv1 gv0 = gv1), (merge gv1 gv0 = gv0), (merge gv1 gv0 = heap_delete_max c), (merge gv1 gv0 = join gv1 gv1 c)
(merge gv1 gv0 = join gv1 gv0 c), (merge gv1 gv0 = join gv0 gv1 c), (merge gv1 gv0 = join gv0 gv0 c), (merge gv1 gv0 = insert n gv1), (merge gv1 gv0 = insert n gv0), (merge gv1 gv0 = carry gv1 c), (merge gv1 gv0 = carry gv0 c), (merge gv1 gv0 = gv1 ++ gv1), (merge gv1 gv0 = gv1 ++ gv0), (merge gv1 gv0 = gv0 ++ gv1)
(merge gv1 gv0 = gv0 ++ gv0), (merge gv0 gv1 = gv1), (merge gv0 gv1 = gv0), (merge gv0 gv1 = heap_delete_max c), (merge gv0 gv1 = join gv1 gv1 c), (merge gv0 gv1 = join gv1 gv0 c), (merge gv0 gv1 = join gv0 gv1 c), (merge gv0 gv1 = join gv0 gv0 c), (merge gv0 gv1 = insert n gv1), (merge gv0 gv1 = insert n gv0)
(merge gv0 gv1 = carry gv1 c), (merge gv0 gv1 = carry gv0 c), (merge gv0 gv1 = gv1 ++ gv1), (merge gv0 gv1 = gv1 ++ gv0), (merge gv0 gv1 = gv0 ++ gv1), (merge gv0 gv1 = gv0 ++ gv0), (merge gv0 gv0 = gv1), (merge gv0 gv0 = gv0), (merge gv0 gv0 = heap_delete_max c), (merge gv0 gv0 = join gv1 gv1 c)
(merge gv0 gv0 = join gv1 gv0 c), (merge gv0 gv0 = join gv0 gv1 c), (merge gv0 gv0 = join gv0 gv0 c), (merge gv0 gv0 = insert n gv1), (merge gv0 gv0 = insert n gv0), (merge gv0 gv0 = carry gv1 c), (merge gv0 gv0 = carry gv0 c), (merge gv0 gv0 = gv1 ++ gv1), (merge gv0 gv0 = gv1 ++ gv0), (merge gv0 gv0 = gv0 ++ gv1)
(merge gv0 gv0 = gv0 ++ gv0), (heap_delete_max c = gv1), (heap_delete_max c = gv0), (heap_delete_max c = carry gv1 c), (heap_delete_max c = carry gv0 c), (heap_delete_max c = gv1 ++ gv1), (heap_delete_max c = gv1 ++ gv0), (heap_delete_max c = gv0 ++ gv1), (heap_delete_max c = gv0 ++ gv0), (join gv1 gv1 c = gv1)
(join gv1 gv1 c = gv0), (join gv1 gv1 c = heap_delete_max c), (join gv1 gv1 c = insert n gv1), (join gv1 gv1 c = insert n gv0), (join gv1 gv1 c = carry gv1 c), (join gv1 gv1 c = carry gv0 c), (join gv1 gv1 c = gv1 ++ gv1), (join gv1 gv1 c = gv1 ++ gv0), (join gv1 gv1 c = gv0 ++ gv1), (join gv1 gv1 c = gv0 ++ gv0)
(join gv1 gv0 c = gv1), (join gv1 gv0 c = gv0), (join gv1 gv0 c = heap_delete_max c), (join gv1 gv0 c = insert n gv1), (join gv1 gv0 c = insert n gv0), (join gv1 gv0 c = carry gv1 c), (join gv1 gv0 c = carry gv0 c), (join gv1 gv0 c = gv1 ++ gv1), (join gv1 gv0 c = gv1 ++ gv0), (join gv1 gv0 c = gv0 ++ gv1)
(join gv1 gv0 c = gv0 ++ gv0), (join gv0 gv1 c = gv1), (join gv0 gv1 c = gv0), (join gv0 gv1 c = heap_delete_max c), (join gv0 gv1 c = insert n gv1), (join gv0 gv1 c = insert n gv0), (join gv0 gv1 c = carry gv1 c), (join gv0 gv1 c = carry gv0 c), (join gv0 gv1 c = gv1 ++ gv1), (join gv0 gv1 c = gv1 ++ gv0)
(join gv0 gv1 c = gv0 ++ gv1), (join gv0 gv1 c = gv0 ++ gv0), (join gv0 gv0 c = gv1), (join gv0 gv0 c = gv0), (join gv0 gv0 c = heap_delete_max c), (join gv0 gv0 c = insert n gv1), (join gv0 gv0 c = insert n gv0), (join gv0 gv0 c = carry gv1 c), (join gv0 gv0 c = carry gv0 c), (join gv0 gv0 c = gv1 ++ gv1)
(join gv0 gv0 c = gv1 ++ gv0), (join gv0 gv0 c = gv0 ++ gv1), (join gv0 gv0 c = gv0 ++ gv0), (insert n gv1 = gv1), (insert n gv1 = gv0), (insert n gv1 = heap_delete_max c), (insert n gv1 = carry gv1 c), (insert n gv1 = carry gv0 c), (insert n gv1 = gv1 ++ gv1), (insert n gv1 = gv1 ++ gv0)
(insert n gv1 = gv0 ++ gv1), (insert n gv1 = gv0 ++ gv0), (insert n gv0 = gv1), (insert n gv0 = gv0), (insert n gv0 = heap_delete_max c), (insert n gv0 = carry gv1 c), (insert n gv0 = carry gv0 c), (insert n gv0 = gv1 ++ gv1), (insert n gv0 = gv1 ++ gv0), (insert n gv0 = gv0 ++ gv1)
(insert n gv0 = gv0 ++ gv0), (carry gv1 c = gv1), (carry gv1 c = gv0), (carry gv1 c = gv1 ++ gv1), (carry gv1 c = gv1 ++ gv0), (carry gv1 c = gv0 ++ gv1), (carry gv1 c = gv0 ++ gv0), (carry gv0 c = gv1), (carry gv0 c = gv0), (carry gv0 c = gv1 ++ gv1)
(carry gv0 c = gv1 ++ gv0), (carry gv0 c = gv0 ++ gv1), (carry gv0 c = gv0 ++ gv0), (gv1 ++ gv1 = gv1), (gv1 ++ gv1 = gv0), (gv1 ++ gv0 = gv1), (gv1 ++ gv0 = gv0), (gv0 ++ gv1 = gv1), (gv0 ++ gv1 = gv0), (gv0 ++ gv0 = gv1)
(gv0 ++ gv0 = gv0), ([] = gv1), ([] = gv0), ([] = merge gv1 gv1), ([] = merge gv1 gv0), ([] = merge gv0 gv1), ([] = merge gv0 gv0), ([] = heap_delete_max c), ([] = join gv1 gv1 c), ([] = join gv1 gv0 c)
([] = join gv0 gv1 c), ([] = join gv0 gv0 c), ([] = insert n gv1), ([] = insert n gv0), ([] = carry gv1 c), ([] = carry gv0 c), ([] = gv1 ++ gv1), ([] = gv1 ++ gv0), ([] = gv0 ++ gv1), ([] = gv0 ++ gv0)
((gv1, gv1) = delete_max_aux n gv1), ((gv1, gv1) = delete_max_aux n gv0), ((gv1, gv0) = delete_max_aux n gv1), ((gv1, gv0) = delete_max_aux n gv0), ((gv0, gv1) = delete_max_aux n gv1), ((gv0, gv1) = delete_max_aux n gv0), ((gv0, gv0) = delete_max_aux n gv1), ((gv0, gv0) = delete_max_aux n gv0), (Node n c c = c), (Node n c c = smash c c)
(smash c c = c), (Leaf = Node n c c), (Leaf = smash c c), (find_max' n gv1 = n), (find_max' n gv0 = n), (length gv1 = n), (length gv1 = find_max' n gv1), (length gv1 = find_max' n gv0), (length gv0 = n), (length gv0 = find_max' n gv1)
(length gv0 = find_max' n gv0), (Some n = find_max gv1), (Some n = find_max gv0), (None = Some n), (None = find_max gv1), (None = find_max gv0), (None = Some c), ((n >? n) = (n >=? n))

Label: 4 (4)
(priq p), (priq gv0), (priqq n p), (priqq n gv0), (pow2heap n gv2), (pow2heap n c), (pow2heapp n n gv2), (pow2heapp n n c), (Permutation p p), (Permutation p gv0)
(Permutation gv0 p), (Permutation gv0 gv0), (In gv2 p), (In gv2 gv0), (In c p), (In c gv0), (n < n), (n <= n), (gv2 = gv2), (gv2 = c)
(c = gv2), (c = c), (p = p), (p = gv0), (gv0 = p), (gv0 = gv0), (n = n), (false = (n >? n)), (false = (n >=? n)), (true = (n >? n))
(true = (n >=? n)), (Abs p []), (Abs gv0 []), (Abs (gv2 :: p) []), (Abs (gv2 :: gv0) []), (Abs (c :: p) []), (Abs (c :: gv0) []), (Abs (merge p p) []), (Abs (merge p gv0) []), (Abs (merge gv0 p) [])
(Abs (merge gv0 gv0) []), (Abs (heap_delete_max gv2) []), (Abs (heap_delete_max c) []), (Abs (join p p gv2) []), (Abs (join p p c) []), (Abs (join p gv0 gv2) []), (Abs (join p gv0 c) []), (Abs (join gv0 p gv2) []), (Abs (join gv0 p c) []), (Abs (join gv0 gv0 gv2) [])
(Abs (join gv0 gv0 c) []), (Abs (insert n p) []), (Abs (insert n gv0) []), (Abs (carry p gv2) []), (Abs (carry p c) []), (Abs (carry gv0 gv2) []), (Abs (carry gv0 c) []), (Abs (p ++ p) []), (Abs (p ++ gv0) []), (Abs (gv0 ++ p) [])
(Abs (gv0 ++ gv0) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems gv0 []), (priqueue_elems (gv2 :: p) []), (priqueue_elems (gv2 :: gv0) []), (priqueue_elems (c :: p) []), (priqueue_elems (c :: gv0) []), (priqueue_elems (merge p p) []), (priqueue_elems (merge p gv0) [])
(priqueue_elems (merge gv0 p) []), (priqueue_elems (merge gv0 gv0) []), (priqueue_elems (heap_delete_max gv2) []), (priqueue_elems (heap_delete_max c) []), (priqueue_elems (join p p gv2) []), (priqueue_elems (join p p c) []), (priqueue_elems (join p gv0 gv2) []), (priqueue_elems (join p gv0 c) []), (priqueue_elems (join gv0 p gv2) []), (priqueue_elems (join gv0 p c) [])
(priqueue_elems (join gv0 gv0 gv2) []), (priqueue_elems (join gv0 gv0 c) []), (priqueue_elems (insert n p) []), (priqueue_elems (insert n gv0) []), (priqueue_elems (carry p gv2) []), (priqueue_elems (carry p c) []), (priqueue_elems (carry gv0 gv2) []), (priqueue_elems (carry gv0 c) []), (priqueue_elems (p ++ p) []), (priqueue_elems (p ++ gv0) [])
(priqueue_elems (gv0 ++ p) []), (priqueue_elems (gv0 ++ gv0) []), (priqueue_elems [] []), (tree_elems gv2 []), (tree_elems c []), (tree_elems (Node n gv2 gv2) []), (tree_elems (Node n gv2 c) []), (tree_elems (Node n c gv2) []), (tree_elems (Node n c c) []), (tree_elems (smash gv2 gv2) [])
(tree_elems (smash gv2 c) []), (tree_elems (smash c gv2) []), (tree_elems (smash c c) []), (tree_elems Leaf []), (priq (gv2 :: p)), (priq (gv2 :: gv0)), (priq (c :: p)), (priq (c :: gv0)), (priq (merge p p)), (priq (merge p gv0))
(priq (merge gv0 p)), (priq (merge gv0 gv0)), (priq (heap_delete_max gv2)), (priq (heap_delete_max c)), (priq (join p p gv2)), (priq (join p p c)), (priq (join p gv0 gv2)), (priq (join p gv0 c)), (priq (join gv0 p gv2)), (priq (join gv0 p c))
(priq (join gv0 gv0 gv2)), (priq (join gv0 gv0 c)), (priq (insert n p)), (priq (insert n gv0)), (priq (carry p gv2)), (priq (carry p c)), (priq (carry gv0 gv2)), (priq (carry gv0 c)), (priq (p ++ p)), (priq (p ++ gv0))
(priq (gv0 ++ p)), (priq (gv0 ++ gv0)), (priqq n (gv2 :: p)), (priqq n (gv2 :: gv0)), (priqq n (c :: p)), (priqq n (c :: gv0)), (priqq n (merge p p)), (priqq n (merge p gv0)), (priqq n (merge gv0 p)), (priqq n (merge gv0 gv0))
(priqq n (heap_delete_max gv2)), (priqq n (heap_delete_max c)), (priqq n (join p p gv2)), (priqq n (join p p c)), (priqq n (join p gv0 gv2)), (priqq n (join p gv0 c)), (priqq n (join gv0 p gv2)), (priqq n (join gv0 p c)), (priqq n (join gv0 gv0 gv2)), (priqq n (join gv0 gv0 c))
(priqq n (insert n p)), (priqq n (insert n gv0)), (priqq n (carry p gv2)), (priqq n (carry p c)), (priqq n (carry gv0 gv2)), (priqq n (carry gv0 c)), (priqq n (p ++ p)), (priqq n (p ++ gv0)), (priqq n (gv0 ++ p)), (priqq n (gv0 ++ gv0))
(priqq (find_max' n p) p), (priqq (find_max' n p) gv0), (priqq (find_max' n p) (gv2 :: p)), (priqq (find_max' n p) (gv2 :: gv0)), (priqq (find_max' n p) (c :: p)), (priqq (find_max' n p) (c :: gv0)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (merge p gv0)), (priqq (find_max' n p) (merge gv0 p)), (priqq (find_max' n p) (merge gv0 gv0))
(priqq (find_max' n p) (heap_delete_max gv2)), (priqq (find_max' n p) (heap_delete_max c)), (priqq (find_max' n p) (join p p gv2)), (priqq (find_max' n p) (join p p c)), (priqq (find_max' n p) (join p gv0 gv2)), (priqq (find_max' n p) (join p gv0 c)), (priqq (find_max' n p) (join gv0 p gv2)), (priqq (find_max' n p) (join gv0 p c)), (priqq (find_max' n p) (join gv0 gv0 gv2)), (priqq (find_max' n p) (join gv0 gv0 c))
(priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (insert n gv0)), (priqq (find_max' n p) (carry p gv2)), (priqq (find_max' n p) (carry p c)), (priqq (find_max' n p) (carry gv0 gv2)), (priqq (find_max' n p) (carry gv0 c)), (priqq (find_max' n p) (p ++ p)), (priqq (find_max' n p) (p ++ gv0)), (priqq (find_max' n p) (gv0 ++ p)), (priqq (find_max' n p) (gv0 ++ gv0))
(priqq (find_max' n gv0) p), (priqq (find_max' n gv0) gv0), (priqq (find_max' n gv0) (gv2 :: p)), (priqq (find_max' n gv0) (gv2 :: gv0)), (priqq (find_max' n gv0) (c :: p)), (priqq (find_max' n gv0) (c :: gv0)), (priqq (find_max' n gv0) (merge p p)), (priqq (find_max' n gv0) (merge p gv0)), (priqq (find_max' n gv0) (merge gv0 p)), (priqq (find_max' n gv0) (merge gv0 gv0))
(priqq (find_max' n gv0) (heap_delete_max gv2)), (priqq (find_max' n gv0) (heap_delete_max c)), (priqq (find_max' n gv0) (join p p gv2)), (priqq (find_max' n gv0) (join p p c)), (priqq (find_max' n gv0) (join p gv0 gv2)), (priqq (find_max' n gv0) (join p gv0 c)), (priqq (find_max' n gv0) (join gv0 p gv2)), (priqq (find_max' n gv0) (join gv0 p c)), (priqq (find_max' n gv0) (join gv0 gv0 gv2)), (priqq (find_max' n gv0) (join gv0 gv0 c))
(priqq (find_max' n gv0) (insert n p)), (priqq (find_max' n gv0) (insert n gv0)), (priqq (find_max' n gv0) (carry p gv2)), (priqq (find_max' n gv0) (carry p c)), (priqq (find_max' n gv0) (carry gv0 gv2)), (priqq (find_max' n gv0) (carry gv0 c)), (priqq (find_max' n gv0) (p ++ p)), (priqq (find_max' n gv0) (p ++ gv0)), (priqq (find_max' n gv0) (gv0 ++ p)), (priqq (find_max' n gv0) (gv0 ++ gv0))
(priqq (length p) p), (priqq (length p) gv0), (priqq (length p) (gv2 :: p)), (priqq (length p) (gv2 :: gv0)), (priqq (length p) (c :: p)), (priqq (length p) (c :: gv0)), (priqq (length p) (merge p p)), (priqq (length p) (merge p gv0)), (priqq (length p) (merge gv0 p)), (priqq (length p) (merge gv0 gv0))
(priqq (length p) (heap_delete_max gv2)), (priqq (length p) (heap_delete_max c)), (priqq (length p) (join p p gv2)), (priqq (length p) (join p p c)), (priqq (length p) (join p gv0 gv2)), (priqq (length p) (join p gv0 c)), (priqq (length p) (join gv0 p gv2)), (priqq (length p) (join gv0 p c)), (priqq (length p) (join gv0 gv0 gv2)), (priqq (length p) (join gv0 gv0 c))
(priqq (length p) (insert n p)), (priqq (length p) (insert n gv0)), (priqq (length p) (carry p gv2)), (priqq (length p) (carry p c)), (priqq (length p) (carry gv0 gv2)), (priqq (length p) (carry gv0 c)), (priqq (length p) (p ++ p)), (priqq (length p) (p ++ gv0)), (priqq (length p) (gv0 ++ p)), (priqq (length p) (gv0 ++ gv0))
(priqq (length gv0) p), (priqq (length gv0) gv0), (priqq (length gv0) (gv2 :: p)), (priqq (length gv0) (gv2 :: gv0)), (priqq (length gv0) (c :: p)), (priqq (length gv0) (c :: gv0)), (priqq (length gv0) (merge p p)), (priqq (length gv0) (merge p gv0)), (priqq (length gv0) (merge gv0 p)), (priqq (length gv0) (merge gv0 gv0))
(priqq (length gv0) (heap_delete_max gv2)), (priqq (length gv0) (heap_delete_max c)), (priqq (length gv0) (join p p gv2)), (priqq (length gv0) (join p p c)), (priqq (length gv0) (join p gv0 gv2)), (priqq (length gv0) (join p gv0 c)), (priqq (length gv0) (join gv0 p gv2)), (priqq (length gv0) (join gv0 p c)), (priqq (length gv0) (join gv0 gv0 gv2)), (priqq (length gv0) (join gv0 gv0 c))
(priqq (length gv0) (insert n p)), (priqq (length gv0) (insert n gv0)), (priqq (length gv0) (carry p gv2)), (priqq (length gv0) (carry p c)), (priqq (length gv0) (carry gv0 gv2)), (priqq (length gv0) (carry gv0 c)), (priqq (length gv0) (p ++ p)), (priqq (length gv0) (p ++ gv0)), (priqq (length gv0) (gv0 ++ p)), (priqq (length gv0) (gv0 ++ gv0))
(pow2heap n (Node n gv2 gv2)), (pow2heap n (Node n gv2 c)), (pow2heap n (Node n c gv2)), (pow2heap n (Node n c c)), (pow2heap n (smash gv2 gv2)), (pow2heap n (smash gv2 c)), (pow2heap n (smash c gv2)), (pow2heap n (smash c c)), (pow2heap (find_max' n p) gv2), (pow2heap (find_max' n p) c)
(pow2heap (find_max' n p) (Node n gv2 gv2)), (pow2heap (find_max' n p) (Node n gv2 c)), (pow2heap (find_max' n p) (Node n c gv2)), (pow2heap (find_max' n p) (Node n c c)), (pow2heap (find_max' n p) (smash gv2 gv2)), (pow2heap (find_max' n p) (smash gv2 c)), (pow2heap (find_max' n p) (smash c gv2)), (pow2heap (find_max' n p) (smash c c)), (pow2heap (find_max' n gv0) gv2), (pow2heap (find_max' n gv0) c)
(pow2heap (find_max' n gv0) (Node n gv2 gv2)), (pow2heap (find_max' n gv0) (Node n gv2 c)), (pow2heap (find_max' n gv0) (Node n c gv2)), (pow2heap (find_max' n gv0) (Node n c c)), (pow2heap (find_max' n gv0) (smash gv2 gv2)), (pow2heap (find_max' n gv0) (smash gv2 c)), (pow2heap (find_max' n gv0) (smash c gv2)), (pow2heap (find_max' n gv0) (smash c c)), (pow2heap (length p) gv2), (pow2heap (length p) c)
(pow2heap (length p) (Node n gv2 gv2)), (pow2heap (length p) (Node n gv2 c)), (pow2heap (length p) (Node n c gv2)), (pow2heap (length p) (Node n c c)), (pow2heap (length p) (smash gv2 gv2)), (pow2heap (length p) (smash gv2 c)), (pow2heap (length p) (smash c gv2)), (pow2heap (length p) (smash c c)), (pow2heap (length gv0) gv2), (pow2heap (length gv0) c)
(pow2heap (length gv0) (Node n gv2 gv2)), (pow2heap (length gv0) (Node n gv2 c)), (pow2heap (length gv0) (Node n c gv2)), (pow2heap (length gv0) (Node n c c)), (pow2heap (length gv0) (smash gv2 gv2)), (pow2heap (length gv0) (smash gv2 c)), (pow2heap (length gv0) (smash c gv2)), (pow2heap (length gv0) (smash c c)), (pow2heapp n n (Node n gv2 gv2)), (pow2heapp n n (Node n gv2 c))
(pow2heapp n n (Node n c gv2)), (pow2heapp n n (Node n c c)), (pow2heapp n n (smash gv2 gv2)), (pow2heapp n n (smash gv2 c)), (pow2heapp n n (smash c gv2)), (pow2heapp n n (smash c c)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n p) gv2), (pow2heapp n (find_max' n p) c), (pow2heapp n (find_max' n p) (Node n gv2 gv2))
(pow2heapp n (find_max' n p) (Node n gv2 c)), (pow2heapp n (find_max' n p) (Node n c gv2)), (pow2heapp n (find_max' n p) (Node n c c)), (pow2heapp n (find_max' n p) (smash gv2 gv2)), (pow2heapp n (find_max' n p) (smash gv2 c)), (pow2heapp n (find_max' n p) (smash c gv2)), (pow2heapp n (find_max' n p) (smash c c)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (find_max' n gv0) gv2), (pow2heapp n (find_max' n gv0) c)
(pow2heapp n (find_max' n gv0) (Node n gv2 gv2)), (pow2heapp n (find_max' n gv0) (Node n gv2 c)), (pow2heapp n (find_max' n gv0) (Node n c gv2)), (pow2heapp n (find_max' n gv0) (Node n c c)), (pow2heapp n (find_max' n gv0) (smash gv2 gv2)), (pow2heapp n (find_max' n gv0) (smash gv2 c)), (pow2heapp n (find_max' n gv0) (smash c gv2)), (pow2heapp n (find_max' n gv0) (smash c c)), (pow2heapp n (find_max' n gv0) Leaf), (pow2heapp n (length p) gv2)
(pow2heapp n (length p) c), (pow2heapp n (length p) (Node n gv2 gv2)), (pow2heapp n (length p) (Node n gv2 c)), (pow2heapp n (length p) (Node n c gv2)), (pow2heapp n (length p) (Node n c c)), (pow2heapp n (length p) (smash gv2 gv2)), (pow2heapp n (length p) (smash gv2 c)), (pow2heapp n (length p) (smash c gv2)), (pow2heapp n (length p) (smash c c)), (pow2heapp n (length p) Leaf)
(pow2heapp n (length gv0) gv2), (pow2heapp n (length gv0) c), (pow2heapp n (length gv0) (Node n gv2 gv2)), (pow2heapp n (length gv0) (Node n gv2 c)), (pow2heapp n (length gv0) (Node n c gv2)), (pow2heapp n (length gv0) (Node n c c)), (pow2heapp n (length gv0) (smash gv2 gv2)), (pow2heapp n (length gv0) (smash gv2 c)), (pow2heapp n (length gv0) (smash c gv2)), (pow2heapp n (length gv0) (smash c c))
(pow2heapp n (length gv0) Leaf), (pow2heapp (find_max' n p) n gv2), (pow2heapp (find_max' n p) n c), (pow2heapp (find_max' n p) n (Node n gv2 gv2)), (pow2heapp (find_max' n p) n (Node n gv2 c)), (pow2heapp (find_max' n p) n (Node n c gv2)), (pow2heapp (find_max' n p) n (Node n c c)), (pow2heapp (find_max' n p) n (smash gv2 gv2)), (pow2heapp (find_max' n p) n (smash gv2 c)), (pow2heapp (find_max' n p) n (smash c gv2))
(pow2heapp (find_max' n p) n (smash c c)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n p) gv2), (pow2heapp (find_max' n p) (find_max' n p) c), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 c)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 c))
(pow2heapp (find_max' n p) (find_max' n p) (smash c gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c c)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (find_max' n gv0) gv2), (pow2heapp (find_max' n p) (find_max' n gv0) c), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n gv2 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n c gv2)), (pow2heapp (find_max' n p) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash gv2 gv2))
(pow2heapp (find_max' n p) (find_max' n gv0) (smash gv2 c)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash c gv2)), (pow2heapp (find_max' n p) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n p) (find_max' n gv0) Leaf), (pow2heapp (find_max' n p) (length p) gv2), (pow2heapp (find_max' n p) (length p) c), (pow2heapp (find_max' n p) (length p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n gv2 c)), (pow2heapp (find_max' n p) (length p) (Node n c gv2)), (pow2heapp (find_max' n p) (length p) (Node n c c))
(pow2heapp (find_max' n p) (length p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (length p) (smash gv2 c)), (pow2heapp (find_max' n p) (length p) (smash c gv2)), (pow2heapp (find_max' n p) (length p) (smash c c)), (pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (find_max' n p) (length gv0) gv2), (pow2heapp (find_max' n p) (length gv0) c), (pow2heapp (find_max' n p) (length gv0) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (length gv0) (Node n gv2 c)), (pow2heapp (find_max' n p) (length gv0) (Node n c gv2))
(pow2heapp (find_max' n p) (length gv0) (Node n c c)), (pow2heapp (find_max' n p) (length gv0) (smash gv2 gv2)), (pow2heapp (find_max' n p) (length gv0) (smash gv2 c)), (pow2heapp (find_max' n p) (length gv0) (smash c gv2)), (pow2heapp (find_max' n p) (length gv0) (smash c c)), (pow2heapp (find_max' n p) (length gv0) Leaf), (pow2heapp (find_max' n gv0) n gv2), (pow2heapp (find_max' n gv0) n c), (pow2heapp (find_max' n gv0) n (Node n gv2 gv2)), (pow2heapp (find_max' n gv0) n (Node n gv2 c))
(pow2heapp (find_max' n gv0) n (Node n c gv2)), (pow2heapp (find_max' n gv0) n (Node n c c)), (pow2heapp (find_max' n gv0) n (smash gv2 gv2)), (pow2heapp (find_max' n gv0) n (smash gv2 c)), (pow2heapp (find_max' n gv0) n (smash c gv2)), (pow2heapp (find_max' n gv0) n (smash c c)), (pow2heapp (find_max' n gv0) n Leaf), (pow2heapp (find_max' n gv0) (find_max' n p) gv2), (pow2heapp (find_max' n gv0) (find_max' n p) c), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n gv2 gv2))
(pow2heapp (find_max' n gv0) (find_max' n p) (Node n gv2 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n c gv2)), (pow2heapp (find_max' n gv0) (find_max' n p) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash gv2 gv2)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash gv2 c)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash c gv2)), (pow2heapp (find_max' n gv0) (find_max' n p) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n p) Leaf), (pow2heapp (find_max' n gv0) (find_max' n gv0) gv2), (pow2heapp (find_max' n gv0) (find_max' n gv0) c)
(pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n gv2 gv2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n gv2 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c gv2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash gv2 gv2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash gv2 c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c gv2)), (pow2heapp (find_max' n gv0) (find_max' n gv0) (smash c c)), (pow2heapp (find_max' n gv0) (find_max' n gv0) Leaf), (pow2heapp (find_max' n gv0) (length p) gv2)
(pow2heapp (find_max' n gv0) (length p) c), (pow2heapp (find_max' n gv0) (length p) (Node n gv2 gv2)), (pow2heapp (find_max' n gv0) (length p) (Node n gv2 c)), (pow2heapp (find_max' n gv0) (length p) (Node n c gv2)), (pow2heapp (find_max' n gv0) (length p) (Node n c c)), (pow2heapp (find_max' n gv0) (length p) (smash gv2 gv2)), (pow2heapp (find_max' n gv0) (length p) (smash gv2 c)), (pow2heapp (find_max' n gv0) (length p) (smash c gv2)), (pow2heapp (find_max' n gv0) (length p) (smash c c)), (pow2heapp (find_max' n gv0) (length p) Leaf)
(pow2heapp (find_max' n gv0) (length gv0) gv2), (pow2heapp (find_max' n gv0) (length gv0) c), (pow2heapp (find_max' n gv0) (length gv0) (Node n gv2 gv2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n gv2 c)), (pow2heapp (find_max' n gv0) (length gv0) (Node n c gv2)), (pow2heapp (find_max' n gv0) (length gv0) (Node n c c)), (pow2heapp (find_max' n gv0) (length gv0) (smash gv2 gv2)), (pow2heapp (find_max' n gv0) (length gv0) (smash gv2 c)), (pow2heapp (find_max' n gv0) (length gv0) (smash c gv2)), (pow2heapp (find_max' n gv0) (length gv0) (smash c c))
(pow2heapp (find_max' n gv0) (length gv0) Leaf), (pow2heapp (length p) n gv2), (pow2heapp (length p) n c), (pow2heapp (length p) n (Node n gv2 gv2)), (pow2heapp (length p) n (Node n gv2 c)), (pow2heapp (length p) n (Node n c gv2)), (pow2heapp (length p) n (Node n c c)), (pow2heapp (length p) n (smash gv2 gv2)), (pow2heapp (length p) n (smash gv2 c)), (pow2heapp (length p) n (smash c gv2))
(pow2heapp (length p) n (smash c c)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n p) gv2), (pow2heapp (length p) (find_max' n p) c), (pow2heapp (length p) (find_max' n p) (Node n gv2 gv2)), (pow2heapp (length p) (find_max' n p) (Node n gv2 c)), (pow2heapp (length p) (find_max' n p) (Node n c gv2)), (pow2heapp (length p) (find_max' n p) (Node n c c)), (pow2heapp (length p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (length p) (find_max' n p) (smash gv2 c))
(pow2heapp (length p) (find_max' n p) (smash c gv2)), (pow2heapp (length p) (find_max' n p) (smash c c)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (find_max' n gv0) gv2), (pow2heapp (length p) (find_max' n gv0) c), (pow2heapp (length p) (find_max' n gv0) (Node n gv2 gv2)), (pow2heapp (length p) (find_max' n gv0) (Node n gv2 c)), (pow2heapp (length p) (find_max' n gv0) (Node n c gv2)), (pow2heapp (length p) (find_max' n gv0) (Node n c c)), (pow2heapp (length p) (find_max' n gv0) (smash gv2 gv2))
(pow2heapp (length p) (find_max' n gv0) (smash gv2 c)), (pow2heapp (length p) (find_max' n gv0) (smash c gv2)), (pow2heapp (length p) (find_max' n gv0) (smash c c)), (pow2heapp (length p) (find_max' n gv0) Leaf), (pow2heapp (length p) (length p) gv2), (pow2heapp (length p) (length p) c), (pow2heapp (length p) (length p) (Node n gv2 gv2)), (pow2heapp (length p) (length p) (Node n gv2 c)), (pow2heapp (length p) (length p) (Node n c gv2)), (pow2heapp (length p) (length p) (Node n c c))
(pow2heapp (length p) (length p) (smash gv2 gv2)), (pow2heapp (length p) (length p) (smash gv2 c)), (pow2heapp (length p) (length p) (smash c gv2)), (pow2heapp (length p) (length p) (smash c c)), (pow2heapp (length p) (length p) Leaf), (pow2heapp (length p) (length gv0) gv2), (pow2heapp (length p) (length gv0) c), (pow2heapp (length p) (length gv0) (Node n gv2 gv2)), (pow2heapp (length p) (length gv0) (Node n gv2 c)), (pow2heapp (length p) (length gv0) (Node n c gv2))
(pow2heapp (length p) (length gv0) (Node n c c)), (pow2heapp (length p) (length gv0) (smash gv2 gv2)), (pow2heapp (length p) (length gv0) (smash gv2 c)), (pow2heapp (length p) (length gv0) (smash c gv2)), (pow2heapp (length p) (length gv0) (smash c c)), (pow2heapp (length p) (length gv0) Leaf), (pow2heapp (length gv0) n gv2), (pow2heapp (length gv0) n c), (pow2heapp (length gv0) n (Node n gv2 gv2)), (pow2heapp (length gv0) n (Node n gv2 c))
(pow2heapp (length gv0) n (Node n c gv2)), (pow2heapp (length gv0) n (Node n c c)), (pow2heapp (length gv0) n (smash gv2 gv2)), (pow2heapp (length gv0) n (smash gv2 c)), (pow2heapp (length gv0) n (smash c gv2)), (pow2heapp (length gv0) n (smash c c)), (pow2heapp (length gv0) n Leaf), (pow2heapp (length gv0) (find_max' n p) gv2), (pow2heapp (length gv0) (find_max' n p) c), (pow2heapp (length gv0) (find_max' n p) (Node n gv2 gv2))
(pow2heapp (length gv0) (find_max' n p) (Node n gv2 c)), (pow2heapp (length gv0) (find_max' n p) (Node n c gv2)), (pow2heapp (length gv0) (find_max' n p) (Node n c c)), (pow2heapp (length gv0) (find_max' n p) (smash gv2 gv2)), (pow2heapp (length gv0) (find_max' n p) (smash gv2 c)), (pow2heapp (length gv0) (find_max' n p) (smash c gv2)), (pow2heapp (length gv0) (find_max' n p) (smash c c)), (pow2heapp (length gv0) (find_max' n p) Leaf), (pow2heapp (length gv0) (find_max' n gv0) gv2), (pow2heapp (length gv0) (find_max' n gv0) c)
(pow2heapp (length gv0) (find_max' n gv0) (Node n gv2 gv2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n gv2 c)), (pow2heapp (length gv0) (find_max' n gv0) (Node n c gv2)), (pow2heapp (length gv0) (find_max' n gv0) (Node n c c)), (pow2heapp (length gv0) (find_max' n gv0) (smash gv2 gv2)), (pow2heapp (length gv0) (find_max' n gv0) (smash gv2 c)), (pow2heapp (length gv0) (find_max' n gv0) (smash c gv2)), (pow2heapp (length gv0) (find_max' n gv0) (smash c c)), (pow2heapp (length gv0) (find_max' n gv0) Leaf), (pow2heapp (length gv0) (length p) gv2)
(pow2heapp (length gv0) (length p) c), (pow2heapp (length gv0) (length p) (Node n gv2 gv2)), (pow2heapp (length gv0) (length p) (Node n gv2 c)), (pow2heapp (length gv0) (length p) (Node n c gv2)), (pow2heapp (length gv0) (length p) (Node n c c)), (pow2heapp (length gv0) (length p) (smash gv2 gv2)), (pow2heapp (length gv0) (length p) (smash gv2 c)), (pow2heapp (length gv0) (length p) (smash c gv2)), (pow2heapp (length gv0) (length p) (smash c c)), (pow2heapp (length gv0) (length p) Leaf)
(pow2heapp (length gv0) (length gv0) gv2), (pow2heapp (length gv0) (length gv0) c), (pow2heapp (length gv0) (length gv0) (Node n gv2 gv2)), (pow2heapp (length gv0) (length gv0) (Node n gv2 c)), (pow2heapp (length gv0) (length gv0) (Node n c gv2)), (pow2heapp (length gv0) (length gv0) (Node n c c)), (pow2heapp (length gv0) (length gv0) (smash gv2 gv2)), (pow2heapp (length gv0) (length gv0) (smash gv2 c)), (pow2heapp (length gv0) (length gv0) (smash c gv2)), (pow2heapp (length gv0) (length gv0) (smash c c))
(pow2heapp (length gv0) (length gv0) Leaf), (Permutation p (gv2 :: p)), (Permutation p (gv2 :: gv0)), (Permutation p (c :: p)), (Permutation p (c :: gv0)), (Permutation p (merge p p)), (Permutation p (merge p gv0)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 gv0)), (Permutation p (heap_delete_max gv2))
(Permutation p (heap_delete_max c)), (Permutation p (join p p gv2)), (Permutation p (join p p c)), (Permutation p (join p gv0 gv2)), (Permutation p (join p gv0 c)), (Permutation p (join gv0 p gv2)), (Permutation p (join gv0 p c)), (Permutation p (join gv0 gv0 gv2)), (Permutation p (join gv0 gv0 c)), (Permutation p (insert n p))
(Permutation p (insert n gv0)), (Permutation p (carry p gv2)), (Permutation p (carry p c)), (Permutation p (carry gv0 gv2)), (Permutation p (carry gv0 c)), (Permutation p (p ++ p)), (Permutation p (p ++ gv0)), (Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ gv0)), (Permutation p [])
(Permutation gv0 (gv2 :: p)), (Permutation gv0 (gv2 :: gv0)), (Permutation gv0 (c :: p)), (Permutation gv0 (c :: gv0)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p gv0)), (Permutation gv0 (merge gv0 p)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (heap_delete_max gv2)), (Permutation gv0 (heap_delete_max c))
(Permutation gv0 (join p p gv2)), (Permutation gv0 (join p p c)), (Permutation gv0 (join p gv0 gv2)), (Permutation gv0 (join p gv0 c)), (Permutation gv0 (join gv0 p gv2)), (Permutation gv0 (join gv0 p c)), (Permutation gv0 (join gv0 gv0 gv2)), (Permutation gv0 (join gv0 gv0 c)), (Permutation gv0 (insert n p)), (Permutation gv0 (insert n gv0))
(Permutation gv0 (carry p gv2)), (Permutation gv0 (carry p c)), (Permutation gv0 (carry gv0 gv2)), (Permutation gv0 (carry gv0 c)), (Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (gv0 ++ p)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (gv2 :: p) p)
(Permutation (gv2 :: p) gv0), (Permutation (gv2 :: p) (gv2 :: gv0)), (Permutation (gv2 :: p) (c :: p)), (Permutation (gv2 :: p) (c :: gv0)), (Permutation (gv2 :: p) (merge p p)), (Permutation (gv2 :: p) (merge p gv0)), (Permutation (gv2 :: p) (merge gv0 p)), (Permutation (gv2 :: p) (merge gv0 gv0)), (Permutation (gv2 :: p) (heap_delete_max gv2)), (Permutation (gv2 :: p) (heap_delete_max c))
(Permutation (gv2 :: p) (join p p gv2)), (Permutation (gv2 :: p) (join p p c)), (Permutation (gv2 :: p) (join p gv0 gv2)), (Permutation (gv2 :: p) (join p gv0 c)), (Permutation (gv2 :: p) (join gv0 p gv2)), (Permutation (gv2 :: p) (join gv0 p c)), (Permutation (gv2 :: p) (join gv0 gv0 gv2)), (Permutation (gv2 :: p) (join gv0 gv0 c)), (Permutation (gv2 :: p) (insert n p)), (Permutation (gv2 :: p) (insert n gv0))
(Permutation (gv2 :: p) (carry p gv2)), (Permutation (gv2 :: p) (carry p c)), (Permutation (gv2 :: p) (carry gv0 gv2)), (Permutation (gv2 :: p) (carry gv0 c)), (Permutation (gv2 :: p) (p ++ p)), (Permutation (gv2 :: p) (p ++ gv0)), (Permutation (gv2 :: p) (gv0 ++ p)), (Permutation (gv2 :: p) (gv0 ++ gv0)), (Permutation (gv2 :: p) []), (Permutation (gv2 :: gv0) p)
(Permutation (gv2 :: gv0) gv0), (Permutation (gv2 :: gv0) (gv2 :: p)), (Permutation (gv2 :: gv0) (c :: p)), (Permutation (gv2 :: gv0) (c :: gv0)), (Permutation (gv2 :: gv0) (merge p p)), (Permutation (gv2 :: gv0) (merge p gv0)), (Permutation (gv2 :: gv0) (merge gv0 p)), (Permutation (gv2 :: gv0) (merge gv0 gv0)), (Permutation (gv2 :: gv0) (heap_delete_max gv2)), (Permutation (gv2 :: gv0) (heap_delete_max c))
(Permutation (gv2 :: gv0) (join p p gv2)), (Permutation (gv2 :: gv0) (join p p c)), (Permutation (gv2 :: gv0) (join p gv0 gv2)), (Permutation (gv2 :: gv0) (join p gv0 c)), (Permutation (gv2 :: gv0) (join gv0 p gv2)), (Permutation (gv2 :: gv0) (join gv0 p c)), (Permutation (gv2 :: gv0) (join gv0 gv0 gv2)), (Permutation (gv2 :: gv0) (join gv0 gv0 c)), (Permutation (gv2 :: gv0) (insert n p)), (Permutation (gv2 :: gv0) (insert n gv0))
(Permutation (gv2 :: gv0) (carry p gv2)), (Permutation (gv2 :: gv0) (carry p c)), (Permutation (gv2 :: gv0) (carry gv0 gv2)), (Permutation (gv2 :: gv0) (carry gv0 c)), (Permutation (gv2 :: gv0) (p ++ p)), (Permutation (gv2 :: gv0) (p ++ gv0)), (Permutation (gv2 :: gv0) (gv0 ++ p)), (Permutation (gv2 :: gv0) (gv0 ++ gv0)), (Permutation (gv2 :: gv0) []), (Permutation (c :: p) p)
(Permutation (c :: p) gv0), (Permutation (c :: p) (gv2 :: p)), (Permutation (c :: p) (gv2 :: gv0)), (Permutation (c :: p) (c :: gv0)), (Permutation (c :: p) (merge p p)), (Permutation (c :: p) (merge p gv0)), (Permutation (c :: p) (merge gv0 p)), (Permutation (c :: p) (merge gv0 gv0)), (Permutation (c :: p) (heap_delete_max gv2)), (Permutation (c :: p) (heap_delete_max c))
(Permutation (c :: p) (join p p gv2)), (Permutation (c :: p) (join p p c)), (Permutation (c :: p) (join p gv0 gv2)), (Permutation (c :: p) (join p gv0 c)), (Permutation (c :: p) (join gv0 p gv2)), (Permutation (c :: p) (join gv0 p c)), (Permutation (c :: p) (join gv0 gv0 gv2)), (Permutation (c :: p) (join gv0 gv0 c)), (Permutation (c :: p) (insert n p)), (Permutation (c :: p) (insert n gv0))
(Permutation (c :: p) (carry p gv2)), (Permutation (c :: p) (carry p c)), (Permutation (c :: p) (carry gv0 gv2)), (Permutation (c :: p) (carry gv0 c)), (Permutation (c :: p) (p ++ p)), (Permutation (c :: p) (p ++ gv0)), (Permutation (c :: p) (gv0 ++ p)), (Permutation (c :: p) (gv0 ++ gv0)), (Permutation (c :: p) []), (Permutation (c :: gv0) p)
(Permutation (c :: gv0) gv0), (Permutation (c :: gv0) (gv2 :: p)), (Permutation (c :: gv0) (gv2 :: gv0)), (Permutation (c :: gv0) (c :: p)), (Permutation (c :: gv0) (merge p p)), (Permutation (c :: gv0) (merge p gv0)), (Permutation (c :: gv0) (merge gv0 p)), (Permutation (c :: gv0) (merge gv0 gv0)), (Permutation (c :: gv0) (heap_delete_max gv2)), (Permutation (c :: gv0) (heap_delete_max c))
(Permutation (c :: gv0) (join p p gv2)), (Permutation (c :: gv0) (join p p c)), (Permutation (c :: gv0) (join p gv0 gv2)), (Permutation (c :: gv0) (join p gv0 c)), (Permutation (c :: gv0) (join gv0 p gv2)), (Permutation (c :: gv0) (join gv0 p c)), (Permutation (c :: gv0) (join gv0 gv0 gv2)), (Permutation (c :: gv0) (join gv0 gv0 c)), (Permutation (c :: gv0) (insert n p)), (Permutation (c :: gv0) (insert n gv0))
(Permutation (c :: gv0) (carry p gv2)), (Permutation (c :: gv0) (carry p c)), (Permutation (c :: gv0) (carry gv0 gv2)), (Permutation (c :: gv0) (carry gv0 c)), (Permutation (c :: gv0) (p ++ p)), (Permutation (c :: gv0) (p ++ gv0)), (Permutation (c :: gv0) (gv0 ++ p)), (Permutation (c :: gv0) (gv0 ++ gv0)), (Permutation (c :: gv0) []), (Permutation (merge p p) p)
(Permutation (merge p p) gv0), (Permutation (merge p p) (gv2 :: p)), (Permutation (merge p p) (gv2 :: gv0)), (Permutation (merge p p) (c :: p)), (Permutation (merge p p) (c :: gv0)), (Permutation (merge p p) (merge p gv0)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (heap_delete_max gv2)), (Permutation (merge p p) (heap_delete_max c))
(Permutation (merge p p) (join p p gv2)), (Permutation (merge p p) (join p p c)), (Permutation (merge p p) (join p gv0 gv2)), (Permutation (merge p p) (join p gv0 c)), (Permutation (merge p p) (join gv0 p gv2)), (Permutation (merge p p) (join gv0 p c)), (Permutation (merge p p) (join gv0 gv0 gv2)), (Permutation (merge p p) (join gv0 gv0 c)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (insert n gv0))
(Permutation (merge p p) (carry p gv2)), (Permutation (merge p p) (carry p c)), (Permutation (merge p p) (carry gv0 gv2)), (Permutation (merge p p) (carry gv0 c)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) []), (Permutation (merge p gv0) p)
(Permutation (merge p gv0) gv0), (Permutation (merge p gv0) (gv2 :: p)), (Permutation (merge p gv0) (gv2 :: gv0)), (Permutation (merge p gv0) (c :: p)), (Permutation (merge p gv0) (c :: gv0)), (Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge gv0 p)), (Permutation (merge p gv0) (merge gv0 gv0)), (Permutation (merge p gv0) (heap_delete_max gv2)), (Permutation (merge p gv0) (heap_delete_max c))
(Permutation (merge p gv0) (join p p gv2)), (Permutation (merge p gv0) (join p p c)), (Permutation (merge p gv0) (join p gv0 gv2)), (Permutation (merge p gv0) (join p gv0 c)), (Permutation (merge p gv0) (join gv0 p gv2)), (Permutation (merge p gv0) (join gv0 p c)), (Permutation (merge p gv0) (join gv0 gv0 gv2)), (Permutation (merge p gv0) (join gv0 gv0 c)), (Permutation (merge p gv0) (insert n p)), (Permutation (merge p gv0) (insert n gv0))
(Permutation (merge p gv0) (carry p gv2)), (Permutation (merge p gv0) (carry p c)), (Permutation (merge p gv0) (carry gv0 gv2)), (Permutation (merge p gv0) (carry gv0 c)), (Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ gv0)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) []), (Permutation (merge gv0 p) p)
(Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) (gv2 :: p)), (Permutation (merge gv0 p) (gv2 :: gv0)), (Permutation (merge gv0 p) (c :: p)), (Permutation (merge gv0 p) (c :: gv0)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p gv0)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (heap_delete_max gv2)), (Permutation (merge gv0 p) (heap_delete_max c))
(Permutation (merge gv0 p) (join p p gv2)), (Permutation (merge gv0 p) (join p p c)), (Permutation (merge gv0 p) (join p gv0 gv2)), (Permutation (merge gv0 p) (join p gv0 c)), (Permutation (merge gv0 p) (join gv0 p gv2)), (Permutation (merge gv0 p) (join gv0 p c)), (Permutation (merge gv0 p) (join gv0 gv0 gv2)), (Permutation (merge gv0 p) (join gv0 gv0 c)), (Permutation (merge gv0 p) (insert n p)), (Permutation (merge gv0 p) (insert n gv0))
(Permutation (merge gv0 p) (carry p gv2)), (Permutation (merge gv0 p) (carry p c)), (Permutation (merge gv0 p) (carry gv0 gv2)), (Permutation (merge gv0 p) (carry gv0 c)), (Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) []), (Permutation (merge gv0 gv0) p)
(Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (gv2 :: p)), (Permutation (merge gv0 gv0) (gv2 :: gv0)), (Permutation (merge gv0 gv0) (c :: p)), (Permutation (merge gv0 gv0) (c :: gv0)), (Permutation (merge gv0 gv0) (merge p p)), (Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (heap_delete_max gv2)), (Permutation (merge gv0 gv0) (heap_delete_max c))
(Permutation (merge gv0 gv0) (join p p gv2)), (Permutation (merge gv0 gv0) (join p p c)), (Permutation (merge gv0 gv0) (join p gv0 gv2)), (Permutation (merge gv0 gv0) (join p gv0 c)), (Permutation (merge gv0 gv0) (join gv0 p gv2)), (Permutation (merge gv0 gv0) (join gv0 p c)), (Permutation (merge gv0 gv0) (join gv0 gv0 gv2)), (Permutation (merge gv0 gv0) (join gv0 gv0 c)), (Permutation (merge gv0 gv0) (insert n p)), (Permutation (merge gv0 gv0) (insert n gv0))
(Permutation (merge gv0 gv0) (carry p gv2)), (Permutation (merge gv0 gv0) (carry p c)), (Permutation (merge gv0 gv0) (carry gv0 gv2)), (Permutation (merge gv0 gv0) (carry gv0 c)), (Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (heap_delete_max gv2) p)
(Permutation (heap_delete_max gv2) gv0), (Permutation (heap_delete_max gv2) (gv2 :: p)), (Permutation (heap_delete_max gv2) (gv2 :: gv0)), (Permutation (heap_delete_max gv2) (c :: p)), (Permutation (heap_delete_max gv2) (c :: gv0)), (Permutation (heap_delete_max gv2) (merge p p)), (Permutation (heap_delete_max gv2) (merge p gv0)), (Permutation (heap_delete_max gv2) (merge gv0 p)), (Permutation (heap_delete_max gv2) (merge gv0 gv0)), (Permutation (heap_delete_max gv2) (heap_delete_max c))
(Permutation (heap_delete_max gv2) (join p p gv2)), (Permutation (heap_delete_max gv2) (join p p c)), (Permutation (heap_delete_max gv2) (join p gv0 gv2)), (Permutation (heap_delete_max gv2) (join p gv0 c)), (Permutation (heap_delete_max gv2) (join gv0 p gv2)), (Permutation (heap_delete_max gv2) (join gv0 p c)), (Permutation (heap_delete_max gv2) (join gv0 gv0 gv2)), (Permutation (heap_delete_max gv2) (join gv0 gv0 c)), (Permutation (heap_delete_max gv2) (insert n p)), (Permutation (heap_delete_max gv2) (insert n gv0))
(Permutation (heap_delete_max gv2) (carry p gv2)), (Permutation (heap_delete_max gv2) (carry p c)), (Permutation (heap_delete_max gv2) (carry gv0 gv2)), (Permutation (heap_delete_max gv2) (carry gv0 c)), (Permutation (heap_delete_max gv2) (p ++ p)), (Permutation (heap_delete_max gv2) (p ++ gv0)), (Permutation (heap_delete_max gv2) (gv0 ++ p)), (Permutation (heap_delete_max gv2) (gv0 ++ gv0)), (Permutation (heap_delete_max gv2) []), (Permutation (heap_delete_max c) p)
(Permutation (heap_delete_max c) gv0), (Permutation (heap_delete_max c) (gv2 :: p)), (Permutation (heap_delete_max c) (gv2 :: gv0)), (Permutation (heap_delete_max c) (c :: p)), (Permutation (heap_delete_max c) (c :: gv0)), (Permutation (heap_delete_max c) (merge p p)), (Permutation (heap_delete_max c) (merge p gv0)), (Permutation (heap_delete_max c) (merge gv0 p)), (Permutation (heap_delete_max c) (merge gv0 gv0)), (Permutation (heap_delete_max c) (heap_delete_max gv2))
(Permutation (heap_delete_max c) (join p p gv2)), (Permutation (heap_delete_max c) (join p p c)), (Permutation (heap_delete_max c) (join p gv0 gv2)), (Permutation (heap_delete_max c) (join p gv0 c)), (Permutation (heap_delete_max c) (join gv0 p gv2)), (Permutation (heap_delete_max c) (join gv0 p c)), (Permutation (heap_delete_max c) (join gv0 gv0 gv2)), (Permutation (heap_delete_max c) (join gv0 gv0 c)), (Permutation (heap_delete_max c) (insert n p)), (Permutation (heap_delete_max c) (insert n gv0))
(Permutation (heap_delete_max c) (carry p gv2)), (Permutation (heap_delete_max c) (carry p c)), (Permutation (heap_delete_max c) (carry gv0 gv2)), (Permutation (heap_delete_max c) (carry gv0 c)), (Permutation (heap_delete_max c) (p ++ p)), (Permutation (heap_delete_max c) (p ++ gv0)), (Permutation (heap_delete_max c) (gv0 ++ p)), (Permutation (heap_delete_max c) (gv0 ++ gv0)), (Permutation (heap_delete_max c) []), (Permutation (join p p gv2) p)
(Permutation (join p p gv2) gv0), (Permutation (join p p gv2) (gv2 :: p)), (Permutation (join p p gv2) (gv2 :: gv0)), (Permutation (join p p gv2) (c :: p)), (Permutation (join p p gv2) (c :: gv0)), (Permutation (join p p gv2) (merge p p)), (Permutation (join p p gv2) (merge p gv0)), (Permutation (join p p gv2) (merge gv0 p)), (Permutation (join p p gv2) (merge gv0 gv0)), (Permutation (join p p gv2) (heap_delete_max gv2))
(Permutation (join p p gv2) (heap_delete_max c)), (Permutation (join p p gv2) (join p p c)), (Permutation (join p p gv2) (join p gv0 gv2)), (Permutation (join p p gv2) (join p gv0 c)), (Permutation (join p p gv2) (join gv0 p gv2)), (Permutation (join p p gv2) (join gv0 p c)), (Permutation (join p p gv2) (join gv0 gv0 gv2)), (Permutation (join p p gv2) (join gv0 gv0 c)), (Permutation (join p p gv2) (insert n p)), (Permutation (join p p gv2) (insert n gv0))
(Permutation (join p p gv2) (carry p gv2)), (Permutation (join p p gv2) (carry p c)), (Permutation (join p p gv2) (carry gv0 gv2)), (Permutation (join p p gv2) (carry gv0 c)), (Permutation (join p p gv2) (p ++ p)), (Permutation (join p p gv2) (p ++ gv0)), (Permutation (join p p gv2) (gv0 ++ p)), (Permutation (join p p gv2) (gv0 ++ gv0)), (Permutation (join p p gv2) []), (Permutation (join p p c) p)
(Permutation (join p p c) gv0), (Permutation (join p p c) (gv2 :: p)), (Permutation (join p p c) (gv2 :: gv0)), (Permutation (join p p c) (c :: p)), (Permutation (join p p c) (c :: gv0)), (Permutation (join p p c) (merge p p)), (Permutation (join p p c) (merge p gv0)), (Permutation (join p p c) (merge gv0 p)), (Permutation (join p p c) (merge gv0 gv0)), (Permutation (join p p c) (heap_delete_max gv2))
(Permutation (join p p c) (heap_delete_max c)), (Permutation (join p p c) (join p p gv2)), (Permutation (join p p c) (join p gv0 gv2)), (Permutation (join p p c) (join p gv0 c)), (Permutation (join p p c) (join gv0 p gv2)), (Permutation (join p p c) (join gv0 p c)), (Permutation (join p p c) (join gv0 gv0 gv2)), (Permutation (join p p c) (join gv0 gv0 c)), (Permutation (join p p c) (insert n p)), (Permutation (join p p c) (insert n gv0))
(Permutation (join p p c) (carry p gv2)), (Permutation (join p p c) (carry p c)), (Permutation (join p p c) (carry gv0 gv2)), (Permutation (join p p c) (carry gv0 c)), (Permutation (join p p c) (p ++ p)), (Permutation (join p p c) (p ++ gv0)), (Permutation (join p p c) (gv0 ++ p)), (Permutation (join p p c) (gv0 ++ gv0)), (Permutation (join p p c) []), (Permutation (join p gv0 gv2) p)
(Permutation (join p gv0 gv2) gv0), (Permutation (join p gv0 gv2) (gv2 :: p)), (Permutation (join p gv0 gv2) (gv2 :: gv0)), (Permutation (join p gv0 gv2) (c :: p)), (Permutation (join p gv0 gv2) (c :: gv0)), (Permutation (join p gv0 gv2) (merge p p)), (Permutation (join p gv0 gv2) (merge p gv0)), (Permutation (join p gv0 gv2) (merge gv0 p)), (Permutation (join p gv0 gv2) (merge gv0 gv0)), (Permutation (join p gv0 gv2) (heap_delete_max gv2))
(Permutation (join p gv0 gv2) (heap_delete_max c)), (Permutation (join p gv0 gv2) (join p p gv2)), (Permutation (join p gv0 gv2) (join p p c)), (Permutation (join p gv0 gv2) (join p gv0 c)), (Permutation (join p gv0 gv2) (join gv0 p gv2)), (Permutation (join p gv0 gv2) (join gv0 p c)), (Permutation (join p gv0 gv2) (join gv0 gv0 gv2)), (Permutation (join p gv0 gv2) (join gv0 gv0 c)), (Permutation (join p gv0 gv2) (insert n p)), (Permutation (join p gv0 gv2) (insert n gv0))
(Permutation (join p gv0 gv2) (carry p gv2)), (Permutation (join p gv0 gv2) (carry p c)), (Permutation (join p gv0 gv2) (carry gv0 gv2)), (Permutation (join p gv0 gv2) (carry gv0 c)), (Permutation (join p gv0 gv2) (p ++ p)), (Permutation (join p gv0 gv2) (p ++ gv0)), (Permutation (join p gv0 gv2) (gv0 ++ p)), (Permutation (join p gv0 gv2) (gv0 ++ gv0)), (Permutation (join p gv0 gv2) []), (Permutation (join p gv0 c) p)
(Permutation (join p gv0 c) gv0), (Permutation (join p gv0 c) (gv2 :: p)), (Permutation (join p gv0 c) (gv2 :: gv0)), (Permutation (join p gv0 c) (c :: p)), (Permutation (join p gv0 c) (c :: gv0)), (Permutation (join p gv0 c) (merge p p)), (Permutation (join p gv0 c) (merge p gv0)), (Permutation (join p gv0 c) (merge gv0 p)), (Permutation (join p gv0 c) (merge gv0 gv0)), (Permutation (join p gv0 c) (heap_delete_max gv2))
(Permutation (join p gv0 c) (heap_delete_max c)), (Permutation (join p gv0 c) (join p p gv2)), (Permutation (join p gv0 c) (join p p c)), (Permutation (join p gv0 c) (join p gv0 gv2)), (Permutation (join p gv0 c) (join gv0 p gv2)), (Permutation (join p gv0 c) (join gv0 p c)), (Permutation (join p gv0 c) (join gv0 gv0 gv2)), (Permutation (join p gv0 c) (join gv0 gv0 c)), (Permutation (join p gv0 c) (insert n p)), (Permutation (join p gv0 c) (insert n gv0))
(Permutation (join p gv0 c) (carry p gv2)), (Permutation (join p gv0 c) (carry p c)), (Permutation (join p gv0 c) (carry gv0 gv2)), (Permutation (join p gv0 c) (carry gv0 c)), (Permutation (join p gv0 c) (p ++ p)), (Permutation (join p gv0 c) (p ++ gv0)), (Permutation (join p gv0 c) (gv0 ++ p)), (Permutation (join p gv0 c) (gv0 ++ gv0)), (Permutation (join p gv0 c) []), (Permutation (join gv0 p gv2) p)
(Permutation (join gv0 p gv2) gv0), (Permutation (join gv0 p gv2) (gv2 :: p)), (Permutation (join gv0 p gv2) (gv2 :: gv0)), (Permutation (join gv0 p gv2) (c :: p)), (Permutation (join gv0 p gv2) (c :: gv0)), (Permutation (join gv0 p gv2) (merge p p)), (Permutation (join gv0 p gv2) (merge p gv0)), (Permutation (join gv0 p gv2) (merge gv0 p)), (Permutation (join gv0 p gv2) (merge gv0 gv0)), (Permutation (join gv0 p gv2) (heap_delete_max gv2))
(Permutation (join gv0 p gv2) (heap_delete_max c)), (Permutation (join gv0 p gv2) (join p p gv2)), (Permutation (join gv0 p gv2) (join p p c)), (Permutation (join gv0 p gv2) (join p gv0 gv2)), (Permutation (join gv0 p gv2) (join p gv0 c)), (Permutation (join gv0 p gv2) (join gv0 p c)), (Permutation (join gv0 p gv2) (join gv0 gv0 gv2)), (Permutation (join gv0 p gv2) (join gv0 gv0 c)), (Permutation (join gv0 p gv2) (insert n p)), (Permutation (join gv0 p gv2) (insert n gv0))
(Permutation (join gv0 p gv2) (carry p gv2)), (Permutation (join gv0 p gv2) (carry p c)), (Permutation (join gv0 p gv2) (carry gv0 gv2)), (Permutation (join gv0 p gv2) (carry gv0 c)), (Permutation (join gv0 p gv2) (p ++ p)), (Permutation (join gv0 p gv2) (p ++ gv0)), (Permutation (join gv0 p gv2) (gv0 ++ p)), (Permutation (join gv0 p gv2) (gv0 ++ gv0)), (Permutation (join gv0 p gv2) []), (Permutation (join gv0 p c) p)
(Permutation (join gv0 p c) gv0), (Permutation (join gv0 p c) (gv2 :: p)), (Permutation (join gv0 p c) (gv2 :: gv0)), (Permutation (join gv0 p c) (c :: p)), (Permutation (join gv0 p c) (c :: gv0)), (Permutation (join gv0 p c) (merge p p)), (Permutation (join gv0 p c) (merge p gv0)), (Permutation (join gv0 p c) (merge gv0 p)), (Permutation (join gv0 p c) (merge gv0 gv0)), (Permutation (join gv0 p c) (heap_delete_max gv2))
(Permutation (join gv0 p c) (heap_delete_max c)), (Permutation (join gv0 p c) (join p p gv2)), (Permutation (join gv0 p c) (join p p c)), (Permutation (join gv0 p c) (join p gv0 gv2)), (Permutation (join gv0 p c) (join p gv0 c)), (Permutation (join gv0 p c) (join gv0 p gv2)), (Permutation (join gv0 p c) (join gv0 gv0 gv2)), (Permutation (join gv0 p c) (join gv0 gv0 c)), (Permutation (join gv0 p c) (insert n p)), (Permutation (join gv0 p c) (insert n gv0))
(Permutation (join gv0 p c) (carry p gv2)), (Permutation (join gv0 p c) (carry p c)), (Permutation (join gv0 p c) (carry gv0 gv2)), (Permutation (join gv0 p c) (carry gv0 c)), (Permutation (join gv0 p c) (p ++ p)), (Permutation (join gv0 p c) (p ++ gv0)), (Permutation (join gv0 p c) (gv0 ++ p)), (Permutation (join gv0 p c) (gv0 ++ gv0)), (Permutation (join gv0 p c) []), (Permutation (join gv0 gv0 gv2) p)
(Permutation (join gv0 gv0 gv2) gv0), (Permutation (join gv0 gv0 gv2) (gv2 :: p)), (Permutation (join gv0 gv0 gv2) (gv2 :: gv0)), (Permutation (join gv0 gv0 gv2) (c :: p)), (Permutation (join gv0 gv0 gv2) (c :: gv0)), (Permutation (join gv0 gv0 gv2) (merge p p)), (Permutation (join gv0 gv0 gv2) (merge p gv0)), (Permutation (join gv0 gv0 gv2) (merge gv0 p)), (Permutation (join gv0 gv0 gv2) (merge gv0 gv0)), (Permutation (join gv0 gv0 gv2) (heap_delete_max gv2))
(Permutation (join gv0 gv0 gv2) (heap_delete_max c)), (Permutation (join gv0 gv0 gv2) (join p p gv2)), (Permutation (join gv0 gv0 gv2) (join p p c)), (Permutation (join gv0 gv0 gv2) (join p gv0 gv2)), (Permutation (join gv0 gv0 gv2) (join p gv0 c)), (Permutation (join gv0 gv0 gv2) (join gv0 p gv2)), (Permutation (join gv0 gv0 gv2) (join gv0 p c)), (Permutation (join gv0 gv0 gv2) (join gv0 gv0 c)), (Permutation (join gv0 gv0 gv2) (insert n p)), (Permutation (join gv0 gv0 gv2) (insert n gv0))
(Permutation (join gv0 gv0 gv2) (carry p gv2)), (Permutation (join gv0 gv0 gv2) (carry p c)), (Permutation (join gv0 gv0 gv2) (carry gv0 gv2)), (Permutation (join gv0 gv0 gv2) (carry gv0 c)), (Permutation (join gv0 gv0 gv2) (p ++ p)), (Permutation (join gv0 gv0 gv2) (p ++ gv0)), (Permutation (join gv0 gv0 gv2) (gv0 ++ p)), (Permutation (join gv0 gv0 gv2) (gv0 ++ gv0)), (Permutation (join gv0 gv0 gv2) []), (Permutation (join gv0 gv0 c) p)
(Permutation (join gv0 gv0 c) gv0), (Permutation (join gv0 gv0 c) (gv2 :: p)), (Permutation (join gv0 gv0 c) (gv2 :: gv0)), (Permutation (join gv0 gv0 c) (c :: p)), (Permutation (join gv0 gv0 c) (c :: gv0)), (Permutation (join gv0 gv0 c) (merge p p)), (Permutation (join gv0 gv0 c) (merge p gv0)), (Permutation (join gv0 gv0 c) (merge gv0 p)), (Permutation (join gv0 gv0 c) (merge gv0 gv0)), (Permutation (join gv0 gv0 c) (heap_delete_max gv2))
(Permutation (join gv0 gv0 c) (heap_delete_max c)), (Permutation (join gv0 gv0 c) (join p p gv2)), (Permutation (join gv0 gv0 c) (join p p c)), (Permutation (join gv0 gv0 c) (join p gv0 gv2)), (Permutation (join gv0 gv0 c) (join p gv0 c)), (Permutation (join gv0 gv0 c) (join gv0 p gv2)), (Permutation (join gv0 gv0 c) (join gv0 p c)), (Permutation (join gv0 gv0 c) (join gv0 gv0 gv2)), (Permutation (join gv0 gv0 c) (insert n p)), (Permutation (join gv0 gv0 c) (insert n gv0))
(Permutation (join gv0 gv0 c) (carry p gv2)), (Permutation (join gv0 gv0 c) (carry p c)), (Permutation (join gv0 gv0 c) (carry gv0 gv2)), (Permutation (join gv0 gv0 c) (carry gv0 c)), (Permutation (join gv0 gv0 c) (p ++ p)), (Permutation (join gv0 gv0 c) (p ++ gv0)), (Permutation (join gv0 gv0 c) (gv0 ++ p)), (Permutation (join gv0 gv0 c) (gv0 ++ gv0)), (Permutation (join gv0 gv0 c) []), (Permutation (insert n p) p)
(Permutation (insert n p) gv0), (Permutation (insert n p) (gv2 :: p)), (Permutation (insert n p) (gv2 :: gv0)), (Permutation (insert n p) (c :: p)), (Permutation (insert n p) (c :: gv0)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (merge p gv0)), (Permutation (insert n p) (merge gv0 p)), (Permutation (insert n p) (merge gv0 gv0)), (Permutation (insert n p) (heap_delete_max gv2))
(Permutation (insert n p) (heap_delete_max c)), (Permutation (insert n p) (join p p gv2)), (Permutation (insert n p) (join p p c)), (Permutation (insert n p) (join p gv0 gv2)), (Permutation (insert n p) (join p gv0 c)), (Permutation (insert n p) (join gv0 p gv2)), (Permutation (insert n p) (join gv0 p c)), (Permutation (insert n p) (join gv0 gv0 gv2)), (Permutation (insert n p) (join gv0 gv0 c)), (Permutation (insert n p) (insert n gv0))
(Permutation (insert n p) (carry p gv2)), (Permutation (insert n p) (carry p c)), (Permutation (insert n p) (carry gv0 gv2)), (Permutation (insert n p) (carry gv0 c)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) (p ++ gv0)), (Permutation (insert n p) (gv0 ++ p)), (Permutation (insert n p) (gv0 ++ gv0)), (Permutation (insert n p) []), (Permutation (insert n gv0) p)
(Permutation (insert n gv0) gv0), (Permutation (insert n gv0) (gv2 :: p)), (Permutation (insert n gv0) (gv2 :: gv0)), (Permutation (insert n gv0) (c :: p)), (Permutation (insert n gv0) (c :: gv0)), (Permutation (insert n gv0) (merge p p)), (Permutation (insert n gv0) (merge p gv0)), (Permutation (insert n gv0) (merge gv0 p)), (Permutation (insert n gv0) (merge gv0 gv0)), (Permutation (insert n gv0) (heap_delete_max gv2))
(Permutation (insert n gv0) (heap_delete_max c)), (Permutation (insert n gv0) (join p p gv2)), (Permutation (insert n gv0) (join p p c)), (Permutation (insert n gv0) (join p gv0 gv2)), (Permutation (insert n gv0) (join p gv0 c)), (Permutation (insert n gv0) (join gv0 p gv2)), (Permutation (insert n gv0) (join gv0 p c)), (Permutation (insert n gv0) (join gv0 gv0 gv2)), (Permutation (insert n gv0) (join gv0 gv0 c)), (Permutation (insert n gv0) (insert n p))
(Permutation (insert n gv0) (carry p gv2)), (Permutation (insert n gv0) (carry p c)), (Permutation (insert n gv0) (carry gv0 gv2)), (Permutation (insert n gv0) (carry gv0 c)), (Permutation (insert n gv0) (p ++ p)), (Permutation (insert n gv0) (p ++ gv0)), (Permutation (insert n gv0) (gv0 ++ p)), (Permutation (insert n gv0) (gv0 ++ gv0)), (Permutation (insert n gv0) []), (Permutation (carry p gv2) p)
(Permutation (carry p gv2) gv0), (Permutation (carry p gv2) (gv2 :: p)), (Permutation (carry p gv2) (gv2 :: gv0)), (Permutation (carry p gv2) (c :: p)), (Permutation (carry p gv2) (c :: gv0)), (Permutation (carry p gv2) (merge p p)), (Permutation (carry p gv2) (merge p gv0)), (Permutation (carry p gv2) (merge gv0 p)), (Permutation (carry p gv2) (merge gv0 gv0)), (Permutation (carry p gv2) (heap_delete_max gv2))
(Permutation (carry p gv2) (heap_delete_max c)), (Permutation (carry p gv2) (join p p gv2)), (Permutation (carry p gv2) (join p p c)), (Permutation (carry p gv2) (join p gv0 gv2)), (Permutation (carry p gv2) (join p gv0 c)), (Permutation (carry p gv2) (join gv0 p gv2)), (Permutation (carry p gv2) (join gv0 p c)), (Permutation (carry p gv2) (join gv0 gv0 gv2)), (Permutation (carry p gv2) (join gv0 gv0 c)), (Permutation (carry p gv2) (insert n p))
(Permutation (carry p gv2) (insert n gv0)), (Permutation (carry p gv2) (carry p c)), (Permutation (carry p gv2) (carry gv0 gv2)), (Permutation (carry p gv2) (carry gv0 c)), (Permutation (carry p gv2) (p ++ p)), (Permutation (carry p gv2) (p ++ gv0)), (Permutation (carry p gv2) (gv0 ++ p)), (Permutation (carry p gv2) (gv0 ++ gv0)), (Permutation (carry p gv2) []), (Permutation (carry p c) p)
(Permutation (carry p c) gv0), (Permutation (carry p c) (gv2 :: p)), (Permutation (carry p c) (gv2 :: gv0)), (Permutation (carry p c) (c :: p)), (Permutation (carry p c) (c :: gv0)), (Permutation (carry p c) (merge p p)), (Permutation (carry p c) (merge p gv0)), (Permutation (carry p c) (merge gv0 p)), (Permutation (carry p c) (merge gv0 gv0)), (Permutation (carry p c) (heap_delete_max gv2))
(Permutation (carry p c) (heap_delete_max c)), (Permutation (carry p c) (join p p gv2)), (Permutation (carry p c) (join p p c)), (Permutation (carry p c) (join p gv0 gv2)), (Permutation (carry p c) (join p gv0 c)), (Permutation (carry p c) (join gv0 p gv2)), (Permutation (carry p c) (join gv0 p c)), (Permutation (carry p c) (join gv0 gv0 gv2)), (Permutation (carry p c) (join gv0 gv0 c)), (Permutation (carry p c) (insert n p))
(Permutation (carry p c) (insert n gv0)), (Permutation (carry p c) (carry p gv2)), (Permutation (carry p c) (carry gv0 gv2)), (Permutation (carry p c) (carry gv0 c)), (Permutation (carry p c) (p ++ p)), (Permutation (carry p c) (p ++ gv0)), (Permutation (carry p c) (gv0 ++ p)), (Permutation (carry p c) (gv0 ++ gv0)), (Permutation (carry p c) []), (Permutation (carry gv0 gv2) p)
(Permutation (carry gv0 gv2) gv0), (Permutation (carry gv0 gv2) (gv2 :: p)), (Permutation (carry gv0 gv2) (gv2 :: gv0)), (Permutation (carry gv0 gv2) (c :: p)), (Permutation (carry gv0 gv2) (c :: gv0)), (Permutation (carry gv0 gv2) (merge p p)), (Permutation (carry gv0 gv2) (merge p gv0)), (Permutation (carry gv0 gv2) (merge gv0 p)), (Permutation (carry gv0 gv2) (merge gv0 gv0)), (Permutation (carry gv0 gv2) (heap_delete_max gv2))
(Permutation (carry gv0 gv2) (heap_delete_max c)), (Permutation (carry gv0 gv2) (join p p gv2)), (Permutation (carry gv0 gv2) (join p p c)), (Permutation (carry gv0 gv2) (join p gv0 gv2)), (Permutation (carry gv0 gv2) (join p gv0 c)), (Permutation (carry gv0 gv2) (join gv0 p gv2)), (Permutation (carry gv0 gv2) (join gv0 p c)), (Permutation (carry gv0 gv2) (join gv0 gv0 gv2)), (Permutation (carry gv0 gv2) (join gv0 gv0 c)), (Permutation (carry gv0 gv2) (insert n p))
(Permutation (carry gv0 gv2) (insert n gv0)), (Permutation (carry gv0 gv2) (carry p gv2)), (Permutation (carry gv0 gv2) (carry p c)), (Permutation (carry gv0 gv2) (carry gv0 c)), (Permutation (carry gv0 gv2) (p ++ p)), (Permutation (carry gv0 gv2) (p ++ gv0)), (Permutation (carry gv0 gv2) (gv0 ++ p)), (Permutation (carry gv0 gv2) (gv0 ++ gv0)), (Permutation (carry gv0 gv2) []), (Permutation (carry gv0 c) p)
(Permutation (carry gv0 c) gv0), (Permutation (carry gv0 c) (gv2 :: p)), (Permutation (carry gv0 c) (gv2 :: gv0)), (Permutation (carry gv0 c) (c :: p)), (Permutation (carry gv0 c) (c :: gv0)), (Permutation (carry gv0 c) (merge p p)), (Permutation (carry gv0 c) (merge p gv0)), (Permutation (carry gv0 c) (merge gv0 p)), (Permutation (carry gv0 c) (merge gv0 gv0)), (Permutation (carry gv0 c) (heap_delete_max gv2))
(Permutation (carry gv0 c) (heap_delete_max c)), (Permutation (carry gv0 c) (join p p gv2)), (Permutation (carry gv0 c) (join p p c)), (Permutation (carry gv0 c) (join p gv0 gv2)), (Permutation (carry gv0 c) (join p gv0 c)), (Permutation (carry gv0 c) (join gv0 p gv2)), (Permutation (carry gv0 c) (join gv0 p c)), (Permutation (carry gv0 c) (join gv0 gv0 gv2)), (Permutation (carry gv0 c) (join gv0 gv0 c)), (Permutation (carry gv0 c) (insert n p))
(Permutation (carry gv0 c) (insert n gv0)), (Permutation (carry gv0 c) (carry p gv2)), (Permutation (carry gv0 c) (carry p c)), (Permutation (carry gv0 c) (carry gv0 gv2)), (Permutation (carry gv0 c) (p ++ p)), (Permutation (carry gv0 c) (p ++ gv0)), (Permutation (carry gv0 c) (gv0 ++ p)), (Permutation (carry gv0 c) (gv0 ++ gv0)), (Permutation (carry gv0 c) []), (Permutation (p ++ p) p)
(Permutation (p ++ p) gv0), (Permutation (p ++ p) (gv2 :: p)), (Permutation (p ++ p) (gv2 :: gv0)), (Permutation (p ++ p) (c :: p)), (Permutation (p ++ p) (c :: gv0)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (heap_delete_max gv2))
(Permutation (p ++ p) (heap_delete_max c)), (Permutation (p ++ p) (join p p gv2)), (Permutation (p ++ p) (join p p c)), (Permutation (p ++ p) (join p gv0 gv2)), (Permutation (p ++ p) (join p gv0 c)), (Permutation (p ++ p) (join gv0 p gv2)), (Permutation (p ++ p) (join gv0 p c)), (Permutation (p ++ p) (join gv0 gv0 gv2)), (Permutation (p ++ p) (join gv0 gv0 c)), (Permutation (p ++ p) (insert n p))
(Permutation (p ++ p) (insert n gv0)), (Permutation (p ++ p) (carry p gv2)), (Permutation (p ++ p) (carry p c)), (Permutation (p ++ p) (carry gv0 gv2)), (Permutation (p ++ p) (carry gv0 c)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) []), (Permutation (p ++ gv0) p)
(Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) (gv2 :: p)), (Permutation (p ++ gv0) (gv2 :: gv0)), (Permutation (p ++ gv0) (c :: p)), (Permutation (p ++ gv0) (c :: gv0)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 gv0)), (Permutation (p ++ gv0) (heap_delete_max gv2))
(Permutation (p ++ gv0) (heap_delete_max c)), (Permutation (p ++ gv0) (join p p gv2)), (Permutation (p ++ gv0) (join p p c)), (Permutation (p ++ gv0) (join p gv0 gv2)), (Permutation (p ++ gv0) (join p gv0 c)), (Permutation (p ++ gv0) (join gv0 p gv2)), (Permutation (p ++ gv0) (join gv0 p c)), (Permutation (p ++ gv0) (join gv0 gv0 gv2)), (Permutation (p ++ gv0) (join gv0 gv0 c)), (Permutation (p ++ gv0) (insert n p))
(Permutation (p ++ gv0) (insert n gv0)), (Permutation (p ++ gv0) (carry p gv2)), (Permutation (p ++ gv0) (carry p c)), (Permutation (p ++ gv0) (carry gv0 gv2)), (Permutation (p ++ gv0) (carry gv0 c)), (Permutation (p ++ gv0) (p ++ p)), (Permutation (p ++ gv0) (gv0 ++ p)), (Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) []), (Permutation (gv0 ++ p) p)
(Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) (gv2 :: p)), (Permutation (gv0 ++ p) (gv2 :: gv0)), (Permutation (gv0 ++ p) (c :: p)), (Permutation (gv0 ++ p) (c :: gv0)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 gv0)), (Permutation (gv0 ++ p) (heap_delete_max gv2))
(Permutation (gv0 ++ p) (heap_delete_max c)), (Permutation (gv0 ++ p) (join p p gv2)), (Permutation (gv0 ++ p) (join p p c)), (Permutation (gv0 ++ p) (join p gv0 gv2)), (Permutation (gv0 ++ p) (join p gv0 c)), (Permutation (gv0 ++ p) (join gv0 p gv2)), (Permutation (gv0 ++ p) (join gv0 p c)), (Permutation (gv0 ++ p) (join gv0 gv0 gv2)), (Permutation (gv0 ++ p) (join gv0 gv0 c)), (Permutation (gv0 ++ p) (insert n p))
(Permutation (gv0 ++ p) (insert n gv0)), (Permutation (gv0 ++ p) (carry p gv2)), (Permutation (gv0 ++ p) (carry p c)), (Permutation (gv0 ++ p) (carry gv0 gv2)), (Permutation (gv0 ++ p) (carry gv0 c)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ gv0) p)
(Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (gv2 :: p)), (Permutation (gv0 ++ gv0) (gv2 :: gv0)), (Permutation (gv0 ++ gv0) (c :: p)), (Permutation (gv0 ++ gv0) (c :: gv0)), (Permutation (gv0 ++ gv0) (merge p p)), (Permutation (gv0 ++ gv0) (merge p gv0)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (heap_delete_max gv2))
(Permutation (gv0 ++ gv0) (heap_delete_max c)), (Permutation (gv0 ++ gv0) (join p p gv2)), (Permutation (gv0 ++ gv0) (join p p c)), (Permutation (gv0 ++ gv0) (join p gv0 gv2)), (Permutation (gv0 ++ gv0) (join p gv0 c)), (Permutation (gv0 ++ gv0) (join gv0 p gv2)), (Permutation (gv0 ++ gv0) (join gv0 p c)), (Permutation (gv0 ++ gv0) (join gv0 gv0 gv2)), (Permutation (gv0 ++ gv0) (join gv0 gv0 c)), (Permutation (gv0 ++ gv0) (insert n p))
(Permutation (gv0 ++ gv0) (insert n gv0)), (Permutation (gv0 ++ gv0) (carry p gv2)), (Permutation (gv0 ++ gv0) (carry p c)), (Permutation (gv0 ++ gv0) (carry gv0 gv2)), (Permutation (gv0 ++ gv0) (carry gv0 c)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) []), (Permutation [] p)
(Permutation [] gv0), (Permutation [] (gv2 :: p)), (Permutation [] (gv2 :: gv0)), (Permutation [] (c :: p)), (Permutation [] (c :: gv0)), (Permutation [] (merge p p)), (Permutation [] (merge p gv0)), (Permutation [] (merge gv0 p)), (Permutation [] (merge gv0 gv0)), (Permutation [] (heap_delete_max gv2))
(Permutation [] (heap_delete_max c)), (Permutation [] (join p p gv2)), (Permutation [] (join p p c)), (Permutation [] (join p gv0 gv2)), (Permutation [] (join p gv0 c)), (Permutation [] (join gv0 p gv2)), (Permutation [] (join gv0 p c)), (Permutation [] (join gv0 gv0 gv2)), (Permutation [] (join gv0 gv0 c)), (Permutation [] (insert n p))
(Permutation [] (insert n gv0)), (Permutation [] (carry p gv2)), (Permutation [] (carry p c)), (Permutation [] (carry gv0 gv2)), (Permutation [] (carry gv0 c)), (Permutation [] (p ++ p)), (Permutation [] (p ++ gv0)), (Permutation [] (gv0 ++ p)), (Permutation [] (gv0 ++ gv0)), (In gv2 (gv2 :: p))
(In gv2 (gv2 :: gv0)), (In gv2 (c :: p)), (In gv2 (c :: gv0)), (In gv2 (merge p p)), (In gv2 (merge p gv0)), (In gv2 (merge gv0 p)), (In gv2 (merge gv0 gv0)), (In gv2 (heap_delete_max gv2)), (In gv2 (heap_delete_max c)), (In gv2 (join p p gv2))
(In gv2 (join p p c)), (In gv2 (join p gv0 gv2)), (In gv2 (join p gv0 c)), (In gv2 (join gv0 p gv2)), (In gv2 (join gv0 p c)), (In gv2 (join gv0 gv0 gv2)), (In gv2 (join gv0 gv0 c)), (In gv2 (insert n p)), (In gv2 (insert n gv0)), (In gv2 (carry p gv2))
(In gv2 (carry p c)), (In gv2 (carry gv0 gv2)), (In gv2 (carry gv0 c)), (In gv2 (p ++ p)), (In gv2 (p ++ gv0)), (In gv2 (gv0 ++ p)), (In gv2 (gv0 ++ gv0)), (In c (gv2 :: p)), (In c (gv2 :: gv0)), (In c (c :: p))
(In c (c :: gv0)), (In c (merge p p)), (In c (merge p gv0)), (In c (merge gv0 p)), (In c (merge gv0 gv0)), (In c (heap_delete_max gv2)), (In c (heap_delete_max c)), (In c (join p p gv2)), (In c (join p p c)), (In c (join p gv0 gv2))
(In c (join p gv0 c)), (In c (join gv0 p gv2)), (In c (join gv0 p c)), (In c (join gv0 gv0 gv2)), (In c (join gv0 gv0 c)), (In c (insert n p)), (In c (insert n gv0)), (In c (carry p gv2)), (In c (carry p c)), (In c (carry gv0 gv2))
(In c (carry gv0 c)), (In c (p ++ p)), (In c (p ++ gv0)), (In c (gv0 ++ p)), (In c (gv0 ++ gv0)), (In (Node n gv2 gv2) p), (In (Node n gv2 gv2) gv0), (In (Node n gv2 gv2) (gv2 :: p)), (In (Node n gv2 gv2) (gv2 :: gv0)), (In (Node n gv2 gv2) (c :: p))
(In (Node n gv2 gv2) (c :: gv0)), (In (Node n gv2 gv2) (merge p p)), (In (Node n gv2 gv2) (merge p gv0)), (In (Node n gv2 gv2) (merge gv0 p)), (In (Node n gv2 gv2) (merge gv0 gv0)), (In (Node n gv2 gv2) (heap_delete_max gv2)), (In (Node n gv2 gv2) (heap_delete_max c)), (In (Node n gv2 gv2) (join p p gv2)), (In (Node n gv2 gv2) (join p p c)), (In (Node n gv2 gv2) (join p gv0 gv2))
(In (Node n gv2 gv2) (join p gv0 c)), (In (Node n gv2 gv2) (join gv0 p gv2)), (In (Node n gv2 gv2) (join gv0 p c)), (In (Node n gv2 gv2) (join gv0 gv0 gv2)), (In (Node n gv2 gv2) (join gv0 gv0 c)), (In (Node n gv2 gv2) (insert n p)), (In (Node n gv2 gv2) (insert n gv0)), (In (Node n gv2 gv2) (carry p gv2)), (In (Node n gv2 gv2) (carry p c)), (In (Node n gv2 gv2) (carry gv0 gv2))
(In (Node n gv2 gv2) (carry gv0 c)), (In (Node n gv2 gv2) (p ++ p)), (In (Node n gv2 gv2) (p ++ gv0)), (In (Node n gv2 gv2) (gv0 ++ p)), (In (Node n gv2 gv2) (gv0 ++ gv0)), (In (Node n gv2 c) p), (In (Node n gv2 c) gv0), (In (Node n gv2 c) (gv2 :: p)), (In (Node n gv2 c) (gv2 :: gv0)), (In (Node n gv2 c) (c :: p))
(In (Node n gv2 c) (c :: gv0)), (In (Node n gv2 c) (merge p p)), (In (Node n gv2 c) (merge p gv0)), (In (Node n gv2 c) (merge gv0 p)), (In (Node n gv2 c) (merge gv0 gv0)), (In (Node n gv2 c) (heap_delete_max gv2)), (In (Node n gv2 c) (heap_delete_max c)), (In (Node n gv2 c) (join p p gv2)), (In (Node n gv2 c) (join p p c)), (In (Node n gv2 c) (join p gv0 gv2))
(In (Node n gv2 c) (join p gv0 c)), (In (Node n gv2 c) (join gv0 p gv2)), (In (Node n gv2 c) (join gv0 p c)), (In (Node n gv2 c) (join gv0 gv0 gv2)), (In (Node n gv2 c) (join gv0 gv0 c)), (In (Node n gv2 c) (insert n p)), (In (Node n gv2 c) (insert n gv0)), (In (Node n gv2 c) (carry p gv2)), (In (Node n gv2 c) (carry p c)), (In (Node n gv2 c) (carry gv0 gv2))
(In (Node n gv2 c) (carry gv0 c)), (In (Node n gv2 c) (p ++ p)), (In (Node n gv2 c) (p ++ gv0)), (In (Node n gv2 c) (gv0 ++ p)), (In (Node n gv2 c) (gv0 ++ gv0)), (In (Node n c gv2) p), (In (Node n c gv2) gv0), (In (Node n c gv2) (gv2 :: p)), (In (Node n c gv2) (gv2 :: gv0)), (In (Node n c gv2) (c :: p))
(In (Node n c gv2) (c :: gv0)), (In (Node n c gv2) (merge p p)), (In (Node n c gv2) (merge p gv0)), (In (Node n c gv2) (merge gv0 p)), (In (Node n c gv2) (merge gv0 gv0)), (In (Node n c gv2) (heap_delete_max gv2)), (In (Node n c gv2) (heap_delete_max c)), (In (Node n c gv2) (join p p gv2)), (In (Node n c gv2) (join p p c)), (In (Node n c gv2) (join p gv0 gv2))
(In (Node n c gv2) (join p gv0 c)), (In (Node n c gv2) (join gv0 p gv2)), (In (Node n c gv2) (join gv0 p c)), (In (Node n c gv2) (join gv0 gv0 gv2)), (In (Node n c gv2) (join gv0 gv0 c)), (In (Node n c gv2) (insert n p)), (In (Node n c gv2) (insert n gv0)), (In (Node n c gv2) (carry p gv2)), (In (Node n c gv2) (carry p c)), (In (Node n c gv2) (carry gv0 gv2))
(In (Node n c gv2) (carry gv0 c)), (In (Node n c gv2) (p ++ p)), (In (Node n c gv2) (p ++ gv0)), (In (Node n c gv2) (gv0 ++ p)), (In (Node n c gv2) (gv0 ++ gv0)), (In (Node n c c) p), (In (Node n c c) gv0), (In (Node n c c) (gv2 :: p)), (In (Node n c c) (gv2 :: gv0)), (In (Node n c c) (c :: p))
(In (Node n c c) (c :: gv0)), (In (Node n c c) (merge p p)), (In (Node n c c) (merge p gv0)), (In (Node n c c) (merge gv0 p)), (In (Node n c c) (merge gv0 gv0)), (In (Node n c c) (heap_delete_max gv2)), (In (Node n c c) (heap_delete_max c)), (In (Node n c c) (join p p gv2)), (In (Node n c c) (join p p c)), (In (Node n c c) (join p gv0 gv2))
(In (Node n c c) (join p gv0 c)), (In (Node n c c) (join gv0 p gv2)), (In (Node n c c) (join gv0 p c)), (In (Node n c c) (join gv0 gv0 gv2)), (In (Node n c c) (join gv0 gv0 c)), (In (Node n c c) (insert n p)), (In (Node n c c) (insert n gv0)), (In (Node n c c) (carry p gv2)), (In (Node n c c) (carry p c)), (In (Node n c c) (carry gv0 gv2))
(In (Node n c c) (carry gv0 c)), (In (Node n c c) (p ++ p)), (In (Node n c c) (p ++ gv0)), (In (Node n c c) (gv0 ++ p)), (In (Node n c c) (gv0 ++ gv0)), (In (smash gv2 gv2) p), (In (smash gv2 gv2) gv0), (In (smash gv2 gv2) (gv2 :: p)), (In (smash gv2 gv2) (gv2 :: gv0)), (In (smash gv2 gv2) (c :: p))
(In (smash gv2 gv2) (c :: gv0)), (In (smash gv2 gv2) (merge p p)), (In (smash gv2 gv2) (merge p gv0)), (In (smash gv2 gv2) (merge gv0 p)), (In (smash gv2 gv2) (merge gv0 gv0)), (In (smash gv2 gv2) (heap_delete_max gv2)), (In (smash gv2 gv2) (heap_delete_max c)), (In (smash gv2 gv2) (join p p gv2)), (In (smash gv2 gv2) (join p p c)), (In (smash gv2 gv2) (join p gv0 gv2))
(In (smash gv2 gv2) (join p gv0 c)), (In (smash gv2 gv2) (join gv0 p gv2)), (In (smash gv2 gv2) (join gv0 p c)), (In (smash gv2 gv2) (join gv0 gv0 gv2)), (In (smash gv2 gv2) (join gv0 gv0 c)), (In (smash gv2 gv2) (insert n p)), (In (smash gv2 gv2) (insert n gv0)), (In (smash gv2 gv2) (carry p gv2)), (In (smash gv2 gv2) (carry p c)), (In (smash gv2 gv2) (carry gv0 gv2))
(In (smash gv2 gv2) (carry gv0 c)), (In (smash gv2 gv2) (p ++ p)), (In (smash gv2 gv2) (p ++ gv0)), (In (smash gv2 gv2) (gv0 ++ p)), (In (smash gv2 gv2) (gv0 ++ gv0)), (In (smash gv2 c) p), (In (smash gv2 c) gv0), (In (smash gv2 c) (gv2 :: p)), (In (smash gv2 c) (gv2 :: gv0)), (In (smash gv2 c) (c :: p))
(In (smash gv2 c) (c :: gv0)), (In (smash gv2 c) (merge p p)), (In (smash gv2 c) (merge p gv0)), (In (smash gv2 c) (merge gv0 p)), (In (smash gv2 c) (merge gv0 gv0)), (In (smash gv2 c) (heap_delete_max gv2)), (In (smash gv2 c) (heap_delete_max c)), (In (smash gv2 c) (join p p gv2)), (In (smash gv2 c) (join p p c)), (In (smash gv2 c) (join p gv0 gv2))
(In (smash gv2 c) (join p gv0 c)), (In (smash gv2 c) (join gv0 p gv2)), (In (smash gv2 c) (join gv0 p c)), (In (smash gv2 c) (join gv0 gv0 gv2)), (In (smash gv2 c) (join gv0 gv0 c)), (In (smash gv2 c) (insert n p)), (In (smash gv2 c) (insert n gv0)), (In (smash gv2 c) (carry p gv2)), (In (smash gv2 c) (carry p c)), (In (smash gv2 c) (carry gv0 gv2))
(In (smash gv2 c) (carry gv0 c)), (In (smash gv2 c) (p ++ p)), (In (smash gv2 c) (p ++ gv0)), (In (smash gv2 c) (gv0 ++ p)), (In (smash gv2 c) (gv0 ++ gv0)), (In (smash c gv2) p), (In (smash c gv2) gv0), (In (smash c gv2) (gv2 :: p)), (In (smash c gv2) (gv2 :: gv0)), (In (smash c gv2) (c :: p))
(In (smash c gv2) (c :: gv0)), (In (smash c gv2) (merge p p)), (In (smash c gv2) (merge p gv0)), (In (smash c gv2) (merge gv0 p)), (In (smash c gv2) (merge gv0 gv0)), (In (smash c gv2) (heap_delete_max gv2)), (In (smash c gv2) (heap_delete_max c)), (In (smash c gv2) (join p p gv2)), (In (smash c gv2) (join p p c)), (In (smash c gv2) (join p gv0 gv2))
(In (smash c gv2) (join p gv0 c)), (In (smash c gv2) (join gv0 p gv2)), (In (smash c gv2) (join gv0 p c)), (In (smash c gv2) (join gv0 gv0 gv2)), (In (smash c gv2) (join gv0 gv0 c)), (In (smash c gv2) (insert n p)), (In (smash c gv2) (insert n gv0)), (In (smash c gv2) (carry p gv2)), (In (smash c gv2) (carry p c)), (In (smash c gv2) (carry gv0 gv2))
(In (smash c gv2) (carry gv0 c)), (In (smash c gv2) (p ++ p)), (In (smash c gv2) (p ++ gv0)), (In (smash c gv2) (gv0 ++ p)), (In (smash c gv2) (gv0 ++ gv0)), (In (smash c c) p), (In (smash c c) gv0), (In (smash c c) (gv2 :: p)), (In (smash c c) (gv2 :: gv0)), (In (smash c c) (c :: p))
(In (smash c c) (c :: gv0)), (In (smash c c) (merge p p)), (In (smash c c) (merge p gv0)), (In (smash c c) (merge gv0 p)), (In (smash c c) (merge gv0 gv0)), (In (smash c c) (heap_delete_max gv2)), (In (smash c c) (heap_delete_max c)), (In (smash c c) (join p p gv2)), (In (smash c c) (join p p c)), (In (smash c c) (join p gv0 gv2))
(In (smash c c) (join p gv0 c)), (In (smash c c) (join gv0 p gv2)), (In (smash c c) (join gv0 p c)), (In (smash c c) (join gv0 gv0 gv2)), (In (smash c c) (join gv0 gv0 c)), (In (smash c c) (insert n p)), (In (smash c c) (insert n gv0)), (In (smash c c) (carry p gv2)), (In (smash c c) (carry p c)), (In (smash c c) (carry gv0 gv2))
(In (smash c c) (carry gv0 c)), (In (smash c c) (p ++ p)), (In (smash c c) (p ++ gv0)), (In (smash c c) (gv0 ++ p)), (In (smash c c) (gv0 ++ gv0)), (In Leaf p), (In Leaf gv0), (In Leaf (gv2 :: p)), (In Leaf (gv2 :: gv0)), (In Leaf (c :: p))
(In Leaf (c :: gv0)), (In Leaf (merge p p)), (In Leaf (merge p gv0)), (In Leaf (merge gv0 p)), (In Leaf (merge gv0 gv0)), (In Leaf (heap_delete_max gv2)), (In Leaf (heap_delete_max c)), (In Leaf (join p p gv2)), (In Leaf (join p p c)), (In Leaf (join p gv0 gv2))
(In Leaf (join p gv0 c)), (In Leaf (join gv0 p gv2)), (In Leaf (join gv0 p c)), (In Leaf (join gv0 gv0 gv2)), (In Leaf (join gv0 gv0 c)), (In Leaf (insert n p)), (In Leaf (insert n gv0)), (In Leaf (carry p gv2)), (In Leaf (carry p c)), (In Leaf (carry gv0 gv2))
(In Leaf (carry gv0 c)), (In Leaf (p ++ p)), (In Leaf (p ++ gv0)), (In Leaf (gv0 ++ p)), (In Leaf (gv0 ++ gv0)), (n < find_max' n p), (n < find_max' n gv0), (n < length p), (n < length gv0), (find_max' n p < n)
(find_max' n p < find_max' n gv0), (find_max' n p < length p), (find_max' n p < length gv0), (find_max' n gv0 < n), (find_max' n gv0 < find_max' n p), (find_max' n gv0 < length p), (find_max' n gv0 < length gv0), (length p < n), (length p < find_max' n p), (length p < find_max' n gv0)
(length p < length gv0), (length gv0 < n), (length gv0 < find_max' n p), (length gv0 < find_max' n gv0), (length gv0 < length p), (n <= find_max' n p), (n <= find_max' n gv0), (n <= length p), (n <= length gv0), (find_max' n p <= n)
(find_max' n p <= find_max' n gv0), (find_max' n p <= length p), (find_max' n p <= length gv0), (find_max' n gv0 <= n), (find_max' n gv0 <= find_max' n p), (find_max' n gv0 <= length p), (find_max' n gv0 <= length gv0), (length p <= n), (length p <= find_max' n p), (length p <= find_max' n gv0)
(length p <= length gv0), (length gv0 <= n), (length gv0 <= find_max' n p), (length gv0 <= find_max' n gv0), (length gv0 <= length p), (~ priq p), (~ priq gv0), (~ priqq n p), (~ priqq n gv0), (~ pow2heap n gv2)
(~ pow2heap n c), (~ pow2heapp n n gv2), (~ pow2heapp n n c), (~ Permutation p p), (~ Permutation p gv0), (~ Permutation gv0 p), (~ Permutation gv0 gv0), (~ In gv2 p), (~ In gv2 gv0), (~ In c p)
(~ In c gv0), (~ n < n), (~ n <= n), (gv2 <> gv2), (gv2 <> c), (c <> gv2), (c <> c), (p <> p), (p <> gv0), (gv0 <> p)
(gv0 <> gv0), (n <> n), (None = Some p), (None = Some gv0), (gv2 :: p = p), (gv2 :: p = gv0), (gv2 :: p = merge p p), (gv2 :: p = merge p gv0), (gv2 :: p = merge gv0 p), (gv2 :: p = merge gv0 gv0)
(gv2 :: p = heap_delete_max gv2), (gv2 :: p = heap_delete_max c), (gv2 :: p = join p p gv2), (gv2 :: p = join p p c), (gv2 :: p = join p gv0 gv2), (gv2 :: p = join p gv0 c), (gv2 :: p = join gv0 p gv2), (gv2 :: p = join gv0 p c), (gv2 :: p = join gv0 gv0 gv2), (gv2 :: p = join gv0 gv0 c)
(gv2 :: p = insert n p), (gv2 :: p = insert n gv0), (gv2 :: p = carry p gv2), (gv2 :: p = carry p c), (gv2 :: p = carry gv0 gv2), (gv2 :: p = carry gv0 c), (gv2 :: p = p ++ p), (gv2 :: p = p ++ gv0), (gv2 :: p = gv0 ++ p), (gv2 :: p = gv0 ++ gv0)
(gv2 :: p = []), (gv2 :: gv0 = p), (gv2 :: gv0 = gv0), (gv2 :: gv0 = merge p p), (gv2 :: gv0 = merge p gv0), (gv2 :: gv0 = merge gv0 p), (gv2 :: gv0 = merge gv0 gv0), (gv2 :: gv0 = heap_delete_max gv2), (gv2 :: gv0 = heap_delete_max c), (gv2 :: gv0 = join p p gv2)
(gv2 :: gv0 = join p p c), (gv2 :: gv0 = join p gv0 gv2), (gv2 :: gv0 = join p gv0 c), (gv2 :: gv0 = join gv0 p gv2), (gv2 :: gv0 = join gv0 p c), (gv2 :: gv0 = join gv0 gv0 gv2), (gv2 :: gv0 = join gv0 gv0 c), (gv2 :: gv0 = insert n p), (gv2 :: gv0 = insert n gv0), (gv2 :: gv0 = carry p gv2)
(gv2 :: gv0 = carry p c), (gv2 :: gv0 = carry gv0 gv2), (gv2 :: gv0 = carry gv0 c), (gv2 :: gv0 = p ++ p), (gv2 :: gv0 = p ++ gv0), (gv2 :: gv0 = gv0 ++ p), (gv2 :: gv0 = gv0 ++ gv0), (gv2 :: gv0 = []), (c :: p = p), (c :: p = gv0)
(c :: p = merge p p), (c :: p = merge p gv0), (c :: p = merge gv0 p), (c :: p = merge gv0 gv0), (c :: p = heap_delete_max gv2), (c :: p = heap_delete_max c), (c :: p = join p p gv2), (c :: p = join p p c), (c :: p = join p gv0 gv2), (c :: p = join p gv0 c)
(c :: p = join gv0 p gv2), (c :: p = join gv0 p c), (c :: p = join gv0 gv0 gv2), (c :: p = join gv0 gv0 c), (c :: p = insert n p), (c :: p = insert n gv0), (c :: p = carry p gv2), (c :: p = carry p c), (c :: p = carry gv0 gv2), (c :: p = carry gv0 c)
(c :: p = p ++ p), (c :: p = p ++ gv0), (c :: p = gv0 ++ p), (c :: p = gv0 ++ gv0), (c :: p = []), (c :: gv0 = p), (c :: gv0 = gv0), (c :: gv0 = merge p p), (c :: gv0 = merge p gv0), (c :: gv0 = merge gv0 p)
(c :: gv0 = merge gv0 gv0), (c :: gv0 = heap_delete_max gv2), (c :: gv0 = heap_delete_max c), (c :: gv0 = join p p gv2), (c :: gv0 = join p p c), (c :: gv0 = join p gv0 gv2), (c :: gv0 = join p gv0 c), (c :: gv0 = join gv0 p gv2), (c :: gv0 = join gv0 p c), (c :: gv0 = join gv0 gv0 gv2)
(c :: gv0 = join gv0 gv0 c), (c :: gv0 = insert n p), (c :: gv0 = insert n gv0), (c :: gv0 = carry p gv2), (c :: gv0 = carry p c), (c :: gv0 = carry gv0 gv2), (c :: gv0 = carry gv0 c), (c :: gv0 = p ++ p), (c :: gv0 = p ++ gv0), (c :: gv0 = gv0 ++ p)
(c :: gv0 = gv0 ++ gv0), (c :: gv0 = []), (merge p p = p), (merge p p = gv0), (merge p p = heap_delete_max gv2), (merge p p = heap_delete_max c), (merge p p = join p p gv2), (merge p p = join p p c), (merge p p = join p gv0 gv2), (merge p p = join p gv0 c)
(merge p p = join gv0 p gv2), (merge p p = join gv0 p c), (merge p p = join gv0 gv0 gv2), (merge p p = join gv0 gv0 c), (merge p p = insert n p), (merge p p = insert n gv0), (merge p p = carry p gv2), (merge p p = carry p c), (merge p p = carry gv0 gv2), (merge p p = carry gv0 c)
(merge p p = p ++ p), (merge p p = p ++ gv0), (merge p p = gv0 ++ p), (merge p p = gv0 ++ gv0), (merge p gv0 = p), (merge p gv0 = gv0), (merge p gv0 = heap_delete_max gv2), (merge p gv0 = heap_delete_max c), (merge p gv0 = join p p gv2), (merge p gv0 = join p p c)
(merge p gv0 = join p gv0 gv2), (merge p gv0 = join p gv0 c), (merge p gv0 = join gv0 p gv2), (merge p gv0 = join gv0 p c), (merge p gv0 = join gv0 gv0 gv2), (merge p gv0 = join gv0 gv0 c), (merge p gv0 = insert n p), (merge p gv0 = insert n gv0), (merge p gv0 = carry p gv2), (merge p gv0 = carry p c)
(merge p gv0 = carry gv0 gv2), (merge p gv0 = carry gv0 c), (merge p gv0 = p ++ p), (merge p gv0 = p ++ gv0), (merge p gv0 = gv0 ++ p), (merge p gv0 = gv0 ++ gv0), (merge gv0 p = p), (merge gv0 p = gv0), (merge gv0 p = heap_delete_max gv2), (merge gv0 p = heap_delete_max c)
(merge gv0 p = join p p gv2), (merge gv0 p = join p p c), (merge gv0 p = join p gv0 gv2), (merge gv0 p = join p gv0 c), (merge gv0 p = join gv0 p gv2), (merge gv0 p = join gv0 p c), (merge gv0 p = join gv0 gv0 gv2), (merge gv0 p = join gv0 gv0 c), (merge gv0 p = insert n p), (merge gv0 p = insert n gv0)
(merge gv0 p = carry p gv2), (merge gv0 p = carry p c), (merge gv0 p = carry gv0 gv2), (merge gv0 p = carry gv0 c), (merge gv0 p = p ++ p), (merge gv0 p = p ++ gv0), (merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ gv0), (merge gv0 gv0 = p), (merge gv0 gv0 = gv0)
(merge gv0 gv0 = heap_delete_max gv2), (merge gv0 gv0 = heap_delete_max c), (merge gv0 gv0 = join p p gv2), (merge gv0 gv0 = join p p c), (merge gv0 gv0 = join p gv0 gv2), (merge gv0 gv0 = join p gv0 c), (merge gv0 gv0 = join gv0 p gv2), (merge gv0 gv0 = join gv0 p c), (merge gv0 gv0 = join gv0 gv0 gv2), (merge gv0 gv0 = join gv0 gv0 c)
(merge gv0 gv0 = insert n p), (merge gv0 gv0 = insert n gv0), (merge gv0 gv0 = carry p gv2), (merge gv0 gv0 = carry p c), (merge gv0 gv0 = carry gv0 gv2), (merge gv0 gv0 = carry gv0 c), (merge gv0 gv0 = p ++ p), (merge gv0 gv0 = p ++ gv0), (merge gv0 gv0 = gv0 ++ p), (merge gv0 gv0 = gv0 ++ gv0)
(heap_delete_max gv2 = p), (heap_delete_max gv2 = gv0), (heap_delete_max gv2 = carry p gv2), (heap_delete_max gv2 = carry p c), (heap_delete_max gv2 = carry gv0 gv2), (heap_delete_max gv2 = carry gv0 c), (heap_delete_max gv2 = p ++ p), (heap_delete_max gv2 = p ++ gv0), (heap_delete_max gv2 = gv0 ++ p), (heap_delete_max gv2 = gv0 ++ gv0)
(heap_delete_max c = p), (heap_delete_max c = gv0), (heap_delete_max c = carry p gv2), (heap_delete_max c = carry p c), (heap_delete_max c = carry gv0 gv2), (heap_delete_max c = carry gv0 c), (heap_delete_max c = p ++ p), (heap_delete_max c = p ++ gv0), (heap_delete_max c = gv0 ++ p), (heap_delete_max c = gv0 ++ gv0)
(join p p gv2 = p), (join p p gv2 = gv0), (join p p gv2 = heap_delete_max gv2), (join p p gv2 = heap_delete_max c), (join p p gv2 = insert n p), (join p p gv2 = insert n gv0), (join p p gv2 = carry p gv2), (join p p gv2 = carry p c), (join p p gv2 = carry gv0 gv2), (join p p gv2 = carry gv0 c)
(join p p gv2 = p ++ p), (join p p gv2 = p ++ gv0), (join p p gv2 = gv0 ++ p), (join p p gv2 = gv0 ++ gv0), (join p p c = p), (join p p c = gv0), (join p p c = heap_delete_max gv2), (join p p c = heap_delete_max c), (join p p c = insert n p), (join p p c = insert n gv0)
(join p p c = carry p gv2), (join p p c = carry p c), (join p p c = carry gv0 gv2), (join p p c = carry gv0 c), (join p p c = p ++ p), (join p p c = p ++ gv0), (join p p c = gv0 ++ p), (join p p c = gv0 ++ gv0), (join p gv0 gv2 = p), (join p gv0 gv2 = gv0)
(join p gv0 gv2 = heap_delete_max gv2), (join p gv0 gv2 = heap_delete_max c), (join p gv0 gv2 = insert n p), (join p gv0 gv2 = insert n gv0), (join p gv0 gv2 = carry p gv2), (join p gv0 gv2 = carry p c), (join p gv0 gv2 = carry gv0 gv2), (join p gv0 gv2 = carry gv0 c), (join p gv0 gv2 = p ++ p), (join p gv0 gv2 = p ++ gv0)
(join p gv0 gv2 = gv0 ++ p), (join p gv0 gv2 = gv0 ++ gv0), (join p gv0 c = p), (join p gv0 c = gv0), (join p gv0 c = heap_delete_max gv2), (join p gv0 c = heap_delete_max c), (join p gv0 c = insert n p), (join p gv0 c = insert n gv0), (join p gv0 c = carry p gv2), (join p gv0 c = carry p c)
(join p gv0 c = carry gv0 gv2), (join p gv0 c = carry gv0 c), (join p gv0 c = p ++ p), (join p gv0 c = p ++ gv0), (join p gv0 c = gv0 ++ p), (join p gv0 c = gv0 ++ gv0), (join gv0 p gv2 = p), (join gv0 p gv2 = gv0), (join gv0 p gv2 = heap_delete_max gv2), (join gv0 p gv2 = heap_delete_max c)
(join gv0 p gv2 = insert n p), (join gv0 p gv2 = insert n gv0), (join gv0 p gv2 = carry p gv2), (join gv0 p gv2 = carry p c), (join gv0 p gv2 = carry gv0 gv2), (join gv0 p gv2 = carry gv0 c), (join gv0 p gv2 = p ++ p), (join gv0 p gv2 = p ++ gv0), (join gv0 p gv2 = gv0 ++ p), (join gv0 p gv2 = gv0 ++ gv0)
(join gv0 p c = p), (join gv0 p c = gv0), (join gv0 p c = heap_delete_max gv2), (join gv0 p c = heap_delete_max c), (join gv0 p c = insert n p), (join gv0 p c = insert n gv0), (join gv0 p c = carry p gv2), (join gv0 p c = carry p c), (join gv0 p c = carry gv0 gv2), (join gv0 p c = carry gv0 c)
(join gv0 p c = p ++ p), (join gv0 p c = p ++ gv0), (join gv0 p c = gv0 ++ p), (join gv0 p c = gv0 ++ gv0), (join gv0 gv0 gv2 = p), (join gv0 gv0 gv2 = gv0), (join gv0 gv0 gv2 = heap_delete_max gv2), (join gv0 gv0 gv2 = heap_delete_max c), (join gv0 gv0 gv2 = insert n p), (join gv0 gv0 gv2 = insert n gv0)
(join gv0 gv0 gv2 = carry p gv2), (join gv0 gv0 gv2 = carry p c), (join gv0 gv0 gv2 = carry gv0 gv2), (join gv0 gv0 gv2 = carry gv0 c), (join gv0 gv0 gv2 = p ++ p), (join gv0 gv0 gv2 = p ++ gv0), (join gv0 gv0 gv2 = gv0 ++ p), (join gv0 gv0 gv2 = gv0 ++ gv0), (join gv0 gv0 c = p), (join gv0 gv0 c = gv0)
(join gv0 gv0 c = heap_delete_max gv2), (join gv0 gv0 c = heap_delete_max c), (join gv0 gv0 c = insert n p), (join gv0 gv0 c = insert n gv0), (join gv0 gv0 c = carry p gv2), (join gv0 gv0 c = carry p c), (join gv0 gv0 c = carry gv0 gv2), (join gv0 gv0 c = carry gv0 c), (join gv0 gv0 c = p ++ p), (join gv0 gv0 c = p ++ gv0)
(join gv0 gv0 c = gv0 ++ p), (join gv0 gv0 c = gv0 ++ gv0), (insert n p = p), (insert n p = gv0), (insert n p = heap_delete_max gv2), (insert n p = heap_delete_max c), (insert n p = carry p gv2), (insert n p = carry p c), (insert n p = carry gv0 gv2), (insert n p = carry gv0 c)
(insert n p = p ++ p), (insert n p = p ++ gv0), (insert n p = gv0 ++ p), (insert n p = gv0 ++ gv0), (insert n gv0 = p), (insert n gv0 = gv0), (insert n gv0 = heap_delete_max gv2), (insert n gv0 = heap_delete_max c), (insert n gv0 = carry p gv2), (insert n gv0 = carry p c)
(insert n gv0 = carry gv0 gv2), (insert n gv0 = carry gv0 c), (insert n gv0 = p ++ p), (insert n gv0 = p ++ gv0), (insert n gv0 = gv0 ++ p), (insert n gv0 = gv0 ++ gv0), (carry p gv2 = p), (carry p gv2 = gv0), (carry p gv2 = p ++ p), (carry p gv2 = p ++ gv0)
(carry p gv2 = gv0 ++ p), (carry p gv2 = gv0 ++ gv0), (carry p c = p), (carry p c = gv0), (carry p c = p ++ p), (carry p c = p ++ gv0), (carry p c = gv0 ++ p), (carry p c = gv0 ++ gv0), (carry gv0 gv2 = p), (carry gv0 gv2 = gv0)
(carry gv0 gv2 = p ++ p), (carry gv0 gv2 = p ++ gv0), (carry gv0 gv2 = gv0 ++ p), (carry gv0 gv2 = gv0 ++ gv0), (carry gv0 c = p), (carry gv0 c = gv0), (carry gv0 c = p ++ p), (carry gv0 c = p ++ gv0), (carry gv0 c = gv0 ++ p), (carry gv0 c = gv0 ++ gv0)
(p ++ p = p), (p ++ p = gv0), (p ++ gv0 = p), (p ++ gv0 = gv0), (gv0 ++ p = p), (gv0 ++ p = gv0), (gv0 ++ gv0 = p), (gv0 ++ gv0 = gv0), ([] = p), ([] = gv0)
([] = merge p p), ([] = merge p gv0), ([] = merge gv0 p), ([] = merge gv0 gv0), ([] = heap_delete_max gv2), ([] = heap_delete_max c), ([] = join p p gv2), ([] = join p p c), ([] = join p gv0 gv2), ([] = join p gv0 c)
([] = join gv0 p gv2), ([] = join gv0 p c), ([] = join gv0 gv0 gv2), ([] = join gv0 gv0 c), ([] = insert n p), ([] = insert n gv0), ([] = carry p gv2), ([] = carry p c), ([] = carry gv0 gv2), ([] = carry gv0 c)
([] = p ++ p), ([] = p ++ gv0), ([] = gv0 ++ p), ([] = gv0 ++ gv0), ((p, p) = delete_max_aux n p), ((p, p) = delete_max_aux n gv0), ((p, gv0) = delete_max_aux n p), ((p, gv0) = delete_max_aux n gv0), ((gv0, p) = delete_max_aux n p), ((gv0, p) = delete_max_aux n gv0)
((gv0, gv0) = delete_max_aux n p), ((gv0, gv0) = delete_max_aux n gv0), (Node n gv2 gv2 = gv2), (Node n gv2 gv2 = c), (Node n gv2 gv2 = smash gv2 gv2), (Node n gv2 gv2 = smash gv2 c), (Node n gv2 gv2 = smash c gv2), (Node n gv2 gv2 = smash c c), (Node n gv2 c = gv2), (Node n gv2 c = c)
(Node n gv2 c = smash gv2 gv2), (Node n gv2 c = smash gv2 c), (Node n gv2 c = smash c gv2), (Node n gv2 c = smash c c), (Node n c gv2 = gv2), (Node n c gv2 = c), (Node n c gv2 = smash gv2 gv2), (Node n c gv2 = smash gv2 c), (Node n c gv2 = smash c gv2), (Node n c gv2 = smash c c)
(Node n c c = gv2), (Node n c c = c), (Node n c c = smash gv2 gv2), (Node n c c = smash gv2 c), (Node n c c = smash c gv2), (Node n c c = smash c c), (smash gv2 gv2 = gv2), (smash gv2 gv2 = c), (smash gv2 c = gv2), (smash gv2 c = c)
(smash c gv2 = gv2), (smash c gv2 = c), (smash c c = gv2), (smash c c = c), (Leaf = Node n gv2 gv2), (Leaf = Node n gv2 c), (Leaf = Node n c gv2), (Leaf = Node n c c), (Leaf = smash gv2 gv2), (Leaf = smash gv2 c)
(Leaf = smash c gv2), (Leaf = smash c c), (find_max' n p = n), (find_max' n gv0 = n), (length p = n), (length p = find_max' n p), (length p = find_max' n gv0), (length gv0 = n), (length gv0 = find_max' n p), (length gv0 = find_max' n gv0)
(Some n = find_max p), (Some n = find_max gv0), (None = Some n), (None = find_max p), (None = find_max gv0), (None = Some gv2), (None = Some c), ((n >? n) = (n >=? n))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 211.038 seconds


Label: 0 (0)

Label: 1 (1)

Label: 2 (2)
(priqq n gv0), (priqq n (carry gv0 a2))

Label: 3 (3)
(priqq n gv0), (Permutation gv0 (carry gv1 c)), (Permutation (carry gv1 c) gv0), (carry gv1 c = gv0)

Label: 4 (4)
(priqq n gv0)


------------------------------ ALL RESULTS ------------------------------
1. (c = Leaf \/ pow2heap n c -> priqq n gv1 -> priqq n (carry gv1 c))

2. (c = Leaf \/ pow2heap n c ->  priqq n (gv2 :: p) -> priqq n (carry (gv2 :: p) c))

3. (priqq n (Node n0 a1 a2 :: p) ->  c = Leaf \/ pow2heap n c -> priqq n (carry (Node n0 a1 a2 :: p) c))

4. (priqq n gv1 ->  Permutation gv0 (carry gv1 c) -> c = Leaf \/ pow2heap n c -> priqq n gv0)

5. (priqq n gv1 ->  Permutation (carry gv1 c) gv0 -> c = Leaf \/ pow2heap n c -> priqq n gv0)

6. (priqq n (carry gv0 a2) ->  priqq n (Node n0 a1 a2 :: p) -> c = Leaf \/ pow2heap n c -> priqq n gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 259.216 seconds

Number of Result Pairs Returned: 6

1. (c = Leaf \/ pow2heap n c -> priqq n gv1 -> priqq n (carry gv1 c))

2. (c = Leaf \/ pow2heap n c ->  priqq n (gv2 :: p) -> priqq n (carry (gv2 :: p) c))

3. (priqq n (Node n0 a1 a2 :: p) ->  c = Leaf \/ pow2heap n c -> priqq n (carry (Node n0 a1 a2 :: p) c))

4. (priqq n gv1 ->  Permutation gv0 (carry gv1 c) -> c = Leaf \/ pow2heap n c -> priqq n gv0)

5. (priqq n gv1 ->  Permutation (carry gv1 c) gv0 -> c = Leaf \/ pow2heap n c -> priqq n gv0)
