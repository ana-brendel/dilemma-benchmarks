Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
 -- (priqq n (Leaf :: q))
 -- (forall (q : list tree) (c : tree) (n : nat),
 priqq n p -> priqq n q -> c = Leaf \/ pow2heap n c -> priqq n (join p q c))
 -- (priqq n (Node n0 a1 a2 :: p))

----------------------------------
Goal: (pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.482 seconds

gv2 : tree = (Node n1 c1 c2)
gv1 : tree = (smash (Node n1 c1 c2) (Node n0 a1 a2))
gv0 : nat = (S n)
gv3 : tree = (Node n0 a1 a2)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 128.075 seconds

Label: Generalization #0
Assumptions: 
 -- (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
 -- (priqq n (Node n0 a1 a2 :: p))

----------------------------------
Goal: (pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
 -- (Node n0 a1 a2 = gv3)
 -- (priqq n (gv3 :: p))

----------------------------------
Goal: (pow2heap (S n) (smash (Node n1 c1 c2) gv3))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
 -- (S n = gv0)
 -- (priqq n (Node n0 a1 a2 :: p))

----------------------------------
Goal: (pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (gv2 = Leaf \/ pow2heap n gv2)
 -- (Node n1 c1 c2 = gv2)
 -- (priqq n (Node n0 a1 a2 :: p))

----------------------------------
Goal: (pow2heap (S n) (smash gv2 (Node n0 a1 a2)))
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
 -- (smash (Node n1 c1 c2) (Node n0 a1 a2) = gv1)
 -- (priqq n (Node n0 a1 a2 :: p))

----------------------------------
Goal: (pow2heap (S n) gv1)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 128.239 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2))
Positive Examples: 280
Negative Examples: 153

Label: 1 (1)
Abducted Assumption: (priqq n (Node n0 a1 a2 :: p))
Positive Examples: 171
Negative Examples: 246

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 8
Negative Examples: 81

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 22
Negative Examples: 22

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 9
Negative Examples: 76

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 13
Negative Examples: 36


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 138.29 seconds


Label: 0 (0)
(priq p), (priqq n0 p), (priqq n1 p), (priqq n p), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 c2), (pow2heap n0 c1), (pow2heap n1 a2), (pow2heap n1 a1)
(pow2heap n1 c2), (pow2heap n1 c1), (pow2heap n a2), (pow2heap n a1), (pow2heap n c2), (pow2heap n c1), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 c2), (pow2heapp n0 n0 c1)
(pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n c2), (pow2heapp n0 n c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1)
(pow2heapp n1 n0 c2), (pow2heapp n1 n0 c1), (pow2heapp n1 n1 a2), (pow2heapp n1 n1 a1), (pow2heapp n1 n1 c2), (pow2heapp n1 n1 c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n c2), (pow2heapp n1 n c1)
(pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n1 a2), (pow2heapp n n1 a1), (pow2heapp n n1 c2), (pow2heapp n n1 c1), (pow2heapp n n a2), (pow2heapp n n a1)
(pow2heapp n n c2), (pow2heapp n n c1), (Permutation p p), (In a2 p), (In a1 p), (In c2 p), (In c1 p), (n0 < n0), (n0 < n1), (n0 < n)
(n1 < n0), (n1 < n1), (n1 < n), (n < n0), (n < n1), (n < n), (n0 <= n0), (n0 <= n1), (n0 <= n), (n1 <= n0)
(n1 <= n1), (n1 <= n), (n <= n0), (n <= n1), (n <= n), (p = p), (a2 = a2), (a2 = a1), (a2 = c2), (a2 = c1)
(a1 = a2), (a1 = a1), (a1 = c2), (a1 = c1), (c2 = a2), (c2 = a1), (c2 = c2), (c2 = c1), (c1 = a2), (c1 = a1)
(c1 = c2), (c1 = c1), (n0 = n0), (n0 = n1), (n0 = n), (n1 = n0), (n1 = n1), (n1 = n), (n = n0), (n = n1)
(n = n), (false = (n0 >? n0)), (false = (n0 >? n1)), (false = (n0 >? n)), (false = (n1 >? n0)), (false = (n1 >? n1)), (false = (n1 >? n)), (false = (n >? n0)), (false = (n >? n1)), (false = (n >? n))
(false = (n0 >=? n0)), (false = (n0 >=? n1)), (false = (n0 >=? n)), (false = (n1 >=? n0)), (false = (n1 >=? n1)), (false = (n1 >=? n)), (false = (n >=? n0)), (false = (n >=? n1)), (false = (n >=? n)), (true = (n0 >? n0))
(true = (n0 >? n1)), (true = (n0 >? n)), (true = (n1 >? n0)), (true = (n1 >? n1)), (true = (n1 >? n)), (true = (n >? n0)), (true = (n >? n1)), (true = (n >? n)), (true = (n0 >=? n0)), (true = (n0 >=? n1))
(true = (n0 >=? n)), (true = (n1 >=? n0)), (true = (n1 >=? n1)), (true = (n1 >=? n)), (true = (n >=? n0)), (true = (n >=? n1)), (true = (n >=? n)), (Abs p []), (Abs (a2 :: p) []), (Abs (a1 :: p) [])
(Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max c2) []), (Abs (heap_delete_max c1) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p c2) [])
(Abs (join p p c1) []), (Abs (insert n0 p) []), (Abs (insert n1 p) []), (Abs (insert n p) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p c2) []), (Abs (carry p c1) []), (Abs (p ++ p) []), (Abs [] [])
(priqueue_elems p []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n1 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (carry p c2) [])
(priqueue_elems (carry p c1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems c2 []), (tree_elems c1 []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 c2) [])
(tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c1 a2) [])
(tree_elems (Node n0 c1 a1) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) []), (tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) []), (tree_elems (Node n1 a1 c2) [])
(tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node n a2 a2) [])
(tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n c2 a2) []), (tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 c2) [])
(tree_elems (Node n c2 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a1 a2) [])
(tree_elems (smash a1 a1) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 c2) [])
(tree_elems (smash c1 c1) []), (tree_elems Leaf []), (priq (a2 :: p)), (priq (a1 :: p)), (priq (c2 :: p)), (priq (c1 :: p)), (priq (merge p p)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max c2))
(priq (heap_delete_max c1)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p c2)), (priq (join p p c1)), (priq (insert n0 p)), (priq (insert n1 p)), (priq (insert n p)), (priq (carry p a2)), (priq (carry p a1))
(priq (carry p c2)), (priq (carry p c1)), (priq (p ++ p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (c2 :: p)), (priqq n0 (c1 :: p)), (priqq n0 (merge p p)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1))
(priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p c2)), (priqq n0 (join p p c1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n1 p)), (priqq n0 (insert n p)), (priqq n0 (carry p a2))
(priqq n0 (carry p a1)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1)), (priqq n0 (p ++ p)), (priqq n1 (a2 :: p)), (priqq n1 (a1 :: p)), (priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (merge p p)), (priqq n1 (heap_delete_max a2))
(priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1)), (priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p c2)), (priqq n1 (join p p c1)), (priqq n1 (insert n0 p)), (priqq n1 (insert n1 p)), (priqq n1 (insert n p))
(priqq n1 (carry p a2)), (priqq n1 (carry p a1)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (p ++ p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (merge p p))
(priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p c2)), (priqq n (join p p c1)), (priqq n (insert n0 p)), (priqq n (insert n1 p))
(priqq n (insert n p)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (c2 :: p))
(priqq (find_max' n0 p) (c1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max c2)), (priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1))
(priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n1 p) p), (priqq (find_max' n1 p) (a2 :: p))
(priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (c2 :: p)), (priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1))
(priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p c2)), (priqq (find_max' n1 p) (carry p c1)), (priqq (find_max' n1 p) (p ++ p))
(priqq (find_max' n p) p), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1))
(priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n1 p)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p c2))
(priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1))
(priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p c2)), (priqq (length p) (join p p c1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n1 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p a2))
(priqq (length p) (carry p a1)), (priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1))
(pow2heap n0 (Node n0 a1 c2)), (pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1))
(pow2heap n0 (Node n1 a2 a2)), (pow2heap n0 (Node n1 a2 a1)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1))
(pow2heap n0 (Node n1 c2 c2)), (pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 c2)), (pow2heap n0 (Node n a2 c1))
(pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c1 a2)), (pow2heap n0 (Node n c1 a1))
(pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1))
(pow2heap n0 (smash c2 a2)), (pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1))
(pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1)), (pow2heap n1 (Node n0 a1 c2)), (pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1))
(pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n1 a2 a2)), (pow2heap n1 (Node n1 a2 a1)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1))
(pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 c2)), (pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1))
(pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 c2)), (pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1))
(pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c1 a2)), (pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1)), (pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1))
(pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash c2 a2)), (pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1))
(pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 c2)), (pow2heap n (Node n0 a1 c1))
(pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n1 a2 a2)), (pow2heap n (Node n1 a2 a1))
(pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 c2)), (pow2heap n (Node n1 c2 c1))
(pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 c2)), (pow2heap n (Node n a2 c1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1))
(pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c1 a2)), (pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1))
(pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash c2 a2)), (pow2heap n (smash c2 a1))
(pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1)
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 c2 a2)), (pow2heap (find_max' n0 p) (Node n0 c2 a1))
(pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 c2)), (pow2heap (find_max' n0 p) (Node n1 a2 c1))
(pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1)), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c1 a2)), (pow2heap (find_max' n0 p) (Node n1 c1 a1))
(pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1)), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1))
(pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1)), (pow2heap (find_max' n0 p) (Node n c1 c2)), (pow2heap (find_max' n0 p) (Node n c1 c1)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1))
(pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1)), (pow2heap (find_max' n0 p) (smash c2 c2)), (pow2heap (find_max' n0 p) (smash c2 c1))
(pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1))
(pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a1 a2)), (pow2heap (find_max' n1 p) (Node n0 a1 a1)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1))
(pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 c2)), (pow2heap (find_max' n1 p) (Node n0 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1))
(pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 c2 a2)), (pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1))
(pow2heap (find_max' n1 p) (Node n a2 a2)), (pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1))
(pow2heap (find_max' n1 p) (Node n c2 c2)), (pow2heap (find_max' n1 p) (Node n c2 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1))
(pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 c2)), (pow2heap (find_max' n1 p) (smash a1 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1))
(pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1)), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) c2), (pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 c2)), (pow2heap (find_max' n p) (Node n0 a2 c1))
(pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c1 a2)), (pow2heap (find_max' n p) (Node n0 c1 a1))
(pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1)), (pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1)), (pow2heap (find_max' n p) (Node n1 a1 c2)), (pow2heap (find_max' n p) (Node n1 a1 c1))
(pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1)), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1))
(pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n c2 a2)), (pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1))
(pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1))
(pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 c2)), (pow2heap (find_max' n p) (smash c1 c1))
(pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) c2), (pow2heap (length p) c1), (pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1))
(pow2heap (length p) (Node n0 a1 c2)), (pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1))
(pow2heap (length p) (Node n1 a2 a2)), (pow2heap (length p) (Node n1 a2 a1)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1))
(pow2heap (length p) (Node n1 c2 c2)), (pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1)), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 c2)), (pow2heap (length p) (Node n a2 c1))
(pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c1 a2)), (pow2heap (length p) (Node n c1 a1))
(pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1))
(pow2heap (length p) (smash c2 a2)), (pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1))
(pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 c2)), (pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1))
(pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n1 a2 a2)), (pow2heapp n0 n0 (Node n1 a2 a1)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1))
(pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 c2)), (pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1))
(pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 c2)), (pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1))
(pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c1 a2)), (pow2heapp n0 n0 (Node n c1 a1)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1))
(pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash c2 a2)), (pow2heapp n0 n0 (smash c2 a1)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1))
(pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a1 a2)), (pow2heapp n0 n1 (Node n0 a1 a1)), (pow2heapp n0 n1 (Node n0 a1 c2))
(pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 c2 a2)), (pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1)), (pow2heapp n0 n1 (Node n1 a2 a2))
(pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1)), (pow2heapp n0 n1 (Node n1 c2 c2))
(pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c1 a2)), (pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1)), (pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a1 a2))
(pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n c2 a2)), (pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1)), (pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 c2))
(pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (smash a2 a2)), (pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1)), (pow2heapp n0 n1 (smash c2 a2))
(pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c1 a2)), (pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 Leaf), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1))
(pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1)), (pow2heapp n0 n (Node n0 c2 a2)), (pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1))
(pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1)), (pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1)), (pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a1 a2)), (pow2heapp n0 n (Node n1 a1 a1))
(pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1)), (pow2heapp n0 n (Node n1 c1 a2)), (pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1))
(pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1)), (pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1))
(pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c1 a2)), (pow2heapp n0 n (Node n c1 a1)), (pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1)), (pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1))
(pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1)), (pow2heapp n0 n (smash c2 a2)), (pow2heapp n0 n (smash c2 a1)), (pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1)), (pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1))
(pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) c2), (pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2))
(pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2)), (pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2))
(pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2)), (pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2))
(pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1))
(pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1))
(pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1)), (pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1))
(pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1)), (pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1))
(pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c2))
(pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2))
(pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c2))
(pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1)), (pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2))
(pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c2))
(pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1)), (pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1)), (pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) Leaf)
(pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1))
(pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1)), (pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2)), (pow2heapp n0 (length p) (Node n0 c1 a1)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1))
(pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1)), (pow2heapp n0 (length p) (Node n1 a1 a2)), (pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2)), (pow2heapp n0 (length p) (Node n1 c2 a1))
(pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1)), (pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1))
(pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c1 a2)), (pow2heapp n0 (length p) (Node n c1 a1))
(pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1))
(pow2heapp n0 (length p) (smash c2 a2)), (pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1)), (pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n1 n0 (Node n0 a2 a2))
(pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 c2)), (pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1)), (pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 c2))
(pow2heapp n1 n0 (Node n0 c2 c1)), (pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1)), (pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1)), (pow2heapp n1 n0 (Node n1 a1 a2))
(pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 c2)), (pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1)), (pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 c2))
(pow2heapp n1 n0 (Node n1 c1 c1)), (pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1)), (pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 c2)), (pow2heapp n1 n0 (Node n a1 c1)), (pow2heapp n1 n0 (Node n c2 a2))
(pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1)), (pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1)), (pow2heapp n1 n0 (Node n c1 c2)), (pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 c2))
(pow2heapp n1 n0 (smash a2 c1)), (pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1)), (pow2heapp n1 n0 (smash c2 c2)), (pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c1 a2))
(pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1)), (pow2heapp n1 n0 Leaf), (pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1))
(pow2heapp n1 n1 (Node n0 a1 c2)), (pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 c2)), (pow2heapp n1 n1 (Node n0 c2 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1))
(pow2heapp n1 n1 (Node n1 a2 a2)), (pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 c2)), (pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1))
(pow2heapp n1 n1 (Node n1 c2 c2)), (pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 c2)), (pow2heapp n1 n1 (Node n1 c1 c1)), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 c2)), (pow2heapp n1 n1 (Node n a2 c1))
(pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 c2)), (pow2heapp n1 n1 (Node n a1 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 c2)), (pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c1 a2)), (pow2heapp n1 n1 (Node n c1 a1))
(pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1)), (pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 c2)), (pow2heapp n1 n1 (smash a2 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1))
(pow2heapp n1 n1 (smash c2 a2)), (pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 c2)), (pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 n (Node n0 a2 a2))
(pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 c2 a2)), (pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 c2))
(pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 c2)), (pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a1 a2))
(pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c1 a2)), (pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 c2))
(pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a1 a2)), (pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n c2 a2))
(pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 c2)), (pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (smash a2 a2)), (pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 c2))
(pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 c2)), (pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c1 a2))
(pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n Leaf), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp n1 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1))
(pow2heapp n1 (find_max' n0 p) (smash a1 a2)), (pow2heapp n1 (find_max' n0 p) (smash a1 a1)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1)), (pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2)), (pow2heapp n1 (find_max' n0 p) (smash c1 a1))
(pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n1 p) a2), (pow2heapp n1 (find_max' n1 p) a1), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2))
(pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2))
(pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2))
(pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2)), (pow2heapp n1 (find_max' n1 p) (smash a2 a1)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2))
(pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2)), (pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2))
(pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' n p) a2), (pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1), (pow2heapp n1 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1))
(pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1))
(pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 c2)), (pow2heapp n1 (find_max' n p) (Node n a1 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1))
(pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1)), (pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 c2)), (pow2heapp n1 (find_max' n p) (smash a2 c1)), (pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1))
(pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2)), (pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1))
(pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (length p) a2), (pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) (Node n0 a2 a2)), (pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 c2)), (pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2))
(pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 c2)), (pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 c2)), (pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 c2))
(pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 c2)), (pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2)), (pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 c2)), (pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2))
(pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 c2)), (pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 c2)), (pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 c2))
(pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 c2)), (pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 c2)), (pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c1 a2))
(pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 c2)), (pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 c2)), (pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 c2))
(pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 c2)), (pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c1 a2)), (pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 c2)), (pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) Leaf)
(pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1))
(pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1)), (pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1))
(pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1)), (pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1))
(pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1))
(pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1)), (pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1))
(pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1)), (pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1))
(pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1)), (pow2heapp n n0 Leaf), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a1 a2))
(pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c1 a2)), (pow2heapp n n1 (Node n0 c1 a1)), (pow2heapp n n1 (Node n0 c1 c2))
(pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n1 a2 a2)), (pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 c2 a2))
(pow2heapp n n1 (Node n1 c2 a1)), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node n a2 a2)), (pow2heapp n n1 (Node n a2 a1)), (pow2heapp n n1 (Node n a2 c2))
(pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n c2 a2)), (pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 c2)), (pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c1 a2))
(pow2heapp n n1 (Node n c1 a1)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a1 a2)), (pow2heapp n n1 (smash a1 a1)), (pow2heapp n n1 (smash a1 c2))
(pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c1 a2)), (pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 Leaf)
(pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 c2)), (pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1))
(pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c1 a2)), (pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 c2)), (pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n1 a2 a2)), (pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 c2)), (pow2heapp n n (Node n1 a2 c1))
(pow2heapp n n (Node n1 a1 a2)), (pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 c2 a2)), (pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 c2)), (pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1))
(pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 c2)), (pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1))
(pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 c2)), (pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c1 a2)), (pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1))
(pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 c2)), (pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash c2 a2)), (pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1))
(pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 c2)), (pow2heapp n n (smash c1 c1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2))
(pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2))
(pow2heapp n (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n c2 a2))
(pow2heapp n (find_max' n0 p) (Node n c2 a1)), (pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a2 c2))
(pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1)), (pow2heapp n (find_max' n0 p) (smash c1 a2))
(pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) c2), (pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2)), (pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 c2)), (pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1))
(pow2heapp n (find_max' n1 p) (Node n c2 c2)), (pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 c2)), (pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2)), (pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 c2)), (pow2heapp n (find_max' n1 p) (smash a2 c1))
(pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 c2)), (pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1))
(pow2heapp n (find_max' n1 p) (smash c1 c2)), (pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c2))
(pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2)), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2)), (pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2))
(pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2)), (pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 c2)), (pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 c2))
(pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2)), (pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2)), (pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node n a2 a2))
(pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2)), (pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 c2))
(pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 c2)), (pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a1 a2))
(pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 c2)), (pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c1 a2)), (pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 c2))
(pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1))
(pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 c2 a2)), (pow2heapp n (length p) (Node n0 c2 a1)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1))
(pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1)), (pow2heapp n (length p) (Node n1 a2 c2)), (pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1))
(pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c1 a2)), (pow2heapp n (length p) (Node n1 c1 a1)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1))
(pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1))
(pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 c2)), (pow2heapp n (length p) (Node n c1 c1)), (pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1))
(pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 c2)), (pow2heapp n (length p) (smash c2 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1))
(pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2))
(pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2))
(pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2)), (pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2)), (pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 Leaf)
(pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1), (pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1)), (pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1))
(pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1)), (pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1)), (pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) n a2)
(pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n c2), (pow2heapp (find_max' n0 p) n c1), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a1 a2))
(pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 c2)), (pow2heapp (find_max' n0 p) n (Node n a1 c1)), (pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 c2)), (pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 c2))
(pow2heapp (find_max' n0 p) n (Node n c1 c1)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 c2)), (pow2heapp (find_max' n0 p) n (smash a2 c1)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash c2 a2))
(pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1)), (pow2heapp (find_max' n0 p) n (smash c1 c2)), (pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1)
(pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1), (pow2heapp (find_max' n0 p) (find_max' n1 p) c2)
(pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1)
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2))
(pow2heapp (find_max' n0 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1), (pow2heapp (find_max' n1 p) n0 c2), (pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1))
(pow2heapp (find_max' n1 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 c2)), (pow2heapp (find_max' n1 p) n0 (smash a2 c1))
(pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1))
(pow2heapp (find_max' n1 p) n0 (smash c1 c2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2))
(pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2))
(pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2))
(pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 c2)), (pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2)), (pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2))
(pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 Leaf), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1))
(pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1))
(pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1))
(pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1))
(pow2heapp (find_max' n1 p) n (Node n a2 c2)), (pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1))
(pow2heapp (find_max' n1 p) n (Node n c1 a2)), (pow2heapp (find_max' n1 p) n (Node n c1 a1)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1))
(pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2)), (pow2heapp (find_max' n1 p) n (smash c2 a1)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1))
(pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1), (pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf)
(pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) a2)
(pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) c2), (pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1)
(pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1))
(pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1))
(pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1))
(pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a1))
(pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 c2)
(pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2))
(pow2heapp (find_max' n p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2))
(pow2heapp (find_max' n p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c2)), (pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c2))
(pow2heapp (find_max' n p) n0 (Node n a1 c1)), (pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1)), (pow2heapp (find_max' n p) n0 (Node n c2 c2)), (pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2))
(pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c2)), (pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 c2))
(pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1)), (pow2heapp (find_max' n p) n0 (smash c1 c2)), (pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1)
(pow2heapp (find_max' n p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1))
(pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1))
(pow2heapp (find_max' n p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1))
(pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n a2 a2)), (pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 c2)), (pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1))
(pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c1 a2)), (pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1)), (pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1))
(pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2)), (pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash c2 a2)), (pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1))
(pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 Leaf), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n (Node n0 a2 a2))
(pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c2)), (pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 c2))
(pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1)), (pow2heapp (find_max' n p) n (Node n1 a2 a2)), (pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2))
(pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 c2)), (pow2heapp (find_max' n p) n (Node n1 c2 c1)), (pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 c2))
(pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 c2)), (pow2heapp (find_max' n p) n (Node n a2 c1)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n c2 a2))
(pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2)), (pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 c2))
(pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1)), (pow2heapp (find_max' n p) n (smash c2 a2)), (pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1)), (pow2heapp (find_max' n p) n (smash c1 a2))
(pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) c2), (pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2))
(pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c2))
(pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2)), (pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 c2)), (pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) Leaf)
(pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1)), (pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1))
(pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1)), (pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1))
(pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1)), (pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1))
(pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1)), (pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1))
(pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1)), (pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1))
(pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1))
(pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1)), (pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1)), (pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n1 a2)
(pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 c2), (pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 c2))
(pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 c2)), (pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2))
(pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 c2)), (pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 c2))
(pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 c2)), (pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 c2)), (pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a1 a2))
(pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 c2)), (pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 c2)), (pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c1 a2)), (pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 c2))
(pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 c2)), (pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash c2 a2))
(pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 c2)), (pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1)
(pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 c2)), (pow2heapp (length p) n (Node n0 a1 c1))
(pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c1 a2)), (pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n1 a2 a2)), (pow2heapp (length p) n (Node n1 a2 a1))
(pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 c2 a2)), (pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 c2)), (pow2heapp (length p) n (Node n1 c2 c1))
(pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 c2)), (pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1))
(pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n c2 a2)), (pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c1 a2)), (pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1))
(pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash c2 a2)), (pow2heapp (length p) n (smash c2 a1))
(pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c1 a2)), (pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) c2)
(pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2))
(pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2))
(pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1)
(pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1))
(pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) Leaf), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c2))
(pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2))
(pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c2))
(pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n c2 a2))
(pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 c2))
(pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2)), (pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1)), (pow2heapp (length p) (find_max' n p) (smash c1 a2))
(pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) c2), (pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1))
(pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c2)), (pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1)), (pow2heapp (length p) (length p) (Node n0 c2 c2)), (pow2heapp (length p) (length p) (Node n0 c2 c1))
(pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2)), (pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 c2)), (pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1))
(pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 c2)), (pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1)), (pow2heapp (length p) (length p) (Node n1 c1 c2)), (pow2heapp (length p) (length p) (Node n1 c1 c1))
(pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 c2)), (pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (Node n a1 c2)), (pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1))
(pow2heapp (length p) (length p) (Node n c2 c2)), (pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c1 a2)), (pow2heapp (length p) (length p) (Node n c1 a1)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a2 c2)), (pow2heapp (length p) (length p) (smash a2 c1))
(pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash c2 a2)), (pow2heapp (length p) (length p) (smash c2 a1)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1))
(pow2heapp (length p) (length p) (smash c1 c2)), (pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1))
(Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p c2)), (Permutation p (join p p c1)), (Permutation p (insert n0 p)), (Permutation p (insert n1 p)), (Permutation p (insert n p)), (Permutation p (carry p a2))
(Permutation p (carry p a1)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a2 :: p) p), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (merge p p))
(Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n1 p))
(Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p c2)), (Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (a2 :: p)), (Permutation (a1 :: p) (c2 :: p))
(Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1))
(Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n1 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (c2 :: p) p)
(Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p)), (Permutation (c2 :: p) (c1 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1))
(Permutation (c2 :: p) (join p p c2)), (Permutation (c2 :: p) (join p p c1)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (carry p a2)), (Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1)), (Permutation (c2 :: p) (p ++ p))
(Permutation (c2 :: p) []), (Permutation (c1 :: p) p), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (merge p p)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1)), (Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1))
(Permutation (c1 :: p) (join p p a2)), (Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n1 p)), (Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p c2))
(Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (c2 :: p)), (Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1))
(Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p c2)), (Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p a2))
(Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (c2 :: p)), (Permutation (heap_delete_max a2) (c1 :: p))
(Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n1 p))
(Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p))
(Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max c2)), (Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1))
(Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max c2) p)
(Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max a2)), (Permutation (heap_delete_max c2) (heap_delete_max a1)), (Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1))
(Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n1 p)), (Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (carry p a2)), (Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (p ++ p))
(Permutation (heap_delete_max c2) []), (Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (a2 :: p)), (Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p)), (Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1)), (Permutation (heap_delete_max c1) (heap_delete_max c2))
(Permutation (heap_delete_max c1) (join p p a2)), (Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (insert n0 p)), (Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p c2))
(Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max a2))
(Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p c2)), (Permutation (join p p a2) (join p p c1)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p a2))
(Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p))
(Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max c2)), (Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n1 p))
(Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p))
(Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (merge p p)), (Permutation (join p p c2) (heap_delete_max a2)), (Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p c1))
(Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n1 p)), (Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) []), (Permutation (join p p c1) p)
(Permutation (join p p c1) (a2 :: p)), (Permutation (join p p c1) (a1 :: p)), (Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max a2)), (Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1)), (Permutation (join p p c1) (join p p a2))
(Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p c2)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p c2)), (Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (p ++ p))
(Permutation (join p p c1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max a2)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max c2))
(Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p c2)), (Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p c2))
(Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) []), (Permutation (insert n1 p) p), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (c2 :: p)), (Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max a2))
(Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (carry p a2))
(Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) []), (Permutation (insert n p) p), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p))
(Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1)), (Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1)), (Permutation (insert n p) (insert n0 p))
(Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p c2)), (Permutation (insert n p) (carry p c1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p))
(Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (join p p c2))
(Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) []), (Permutation (carry p a1) p)
(Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1)), (Permutation (carry p a1) (join p p a2))
(Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (p ++ p))
(Permutation (carry p a1) []), (Permutation (carry p c2) p), (Permutation (carry p c2) (a2 :: p)), (Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max c2))
(Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1)), (Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n1 p)), (Permutation (carry p c2) (insert n p)), (Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1))
(Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (p ++ p)), (Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (c2 :: p)), (Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max a2))
(Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max c2)), (Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1)), (Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert n p))
(Permutation (carry p c1) (carry p a2)), (Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p c2)), (Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p))
(Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max c2)), (Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n1 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p))
(Permutation [] (c2 :: p)), (Permutation [] (c1 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p c2))
(Permutation [] (join p p c1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n1 p)), (Permutation [] (insert n p)), (Permutation [] (carry p a2)), (Permutation [] (carry p a1)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1)), (Permutation [] (p ++ p)), (In a2 (a2 :: p))
(In a2 (a1 :: p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (merge p p)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (join p p a2)), (In a2 (join p p a1))
(In a2 (join p p c2)), (In a2 (join p p c1)), (In a2 (insert n0 p)), (In a2 (insert n1 p)), (In a2 (insert n p)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p c2)), (In a2 (carry p c1)), (In a2 (p ++ p))
(In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (c2 :: p)), (In a1 (c1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max c2)), (In a1 (heap_delete_max c1)), (In a1 (join p p a2))
(In a1 (join p p a1)), (In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (insert n0 p)), (In a1 (insert n1 p)), (In a1 (insert n p)), (In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (carry p c2)), (In a1 (carry p c1))
(In a1 (p ++ p)), (In c2 (a2 :: p)), (In c2 (a1 :: p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (merge p p)), (In c2 (heap_delete_max a2)), (In c2 (heap_delete_max a1)), (In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1))
(In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (insert n0 p)), (In c2 (insert n1 p)), (In c2 (insert n p)), (In c2 (carry p a2)), (In c2 (carry p a1)), (In c2 (carry p c2))
(In c2 (carry p c1)), (In c2 (p ++ p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (c2 :: p)), (In c1 (c1 :: p)), (In c1 (merge p p)), (In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max c2))
(In c1 (heap_delete_max c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p c2)), (In c1 (join p p c1)), (In c1 (insert n0 p)), (In c1 (insert n1 p)), (In c1 (insert n p)), (In c1 (carry p a2)), (In c1 (carry p a1))
(In c1 (carry p c2)), (In c1 (carry p c1)), (In c1 (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (c2 :: p)), (In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max a2))
(In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max c2)), (In (Node n0 a2 a2) (heap_delete_max c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1)), (In (Node n0 a2 a2) (insert n0 p)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert n p))
(In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (c2 :: p)), (In (Node n0 a2 a1) (c1 :: p))
(In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p c2)), (In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (insert n0 p))
(In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p a2)), (In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p c2)), (In (Node n0 a2 a1) (carry p c1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 c2) p), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p))
(In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1)), (In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (join p p a2)), (In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p c2))
(In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p c2)), (In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p)
(In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p)), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p)), (In (Node n0 a2 c1) (merge p p)), (In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (join p p a2))
(In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1)), (In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert n p)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1))
(In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a1 a2) p), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max c2))
(In (Node n0 a1 a2) (heap_delete_max c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1))
(In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (c2 :: p)), (In (Node n0 a1 a1) (c1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max a2))
(In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max c2)), (In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p c2)), (In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert n p))
(In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 c2) p), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p)), (In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p))
(In (Node n0 a1 c2) (merge p p)), (In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (join p p a2)), (In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (insert n0 p))
(In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p c2)), (In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p))
(In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (merge p p)), (In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (join p p a2)), (In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p c2))
(In (Node n0 a1 c1) (join p p c1)), (In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (p ++ p)), (In (Node n0 c2 a2) p)
(In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max c2)), (In (Node n0 c2 a2) (heap_delete_max c1)), (In (Node n0 c2 a2) (join p p a2))
(In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (insert n0 p)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (carry p a2)), (In (Node n0 c2 a2) (carry p a1)), (In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1))
(In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (c2 :: p)), (In (Node n0 c2 a1) (c1 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max a2)), (In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max c2))
(In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p c2)), (In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n1 p)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (carry p a2)), (In (Node n0 c2 a1) (carry p a1))
(In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1)), (In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 c2) p), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p)), (In (Node n0 c2 c2) (c2 :: p)), (In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max a2))
(In (Node n0 c2 c2) (heap_delete_max a1)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (join p p a2)), (In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert n p))
(In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p c2)), (In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p), (In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p)), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p))
(In (Node n0 c2 c1) (merge p p)), (In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (join p p a2)), (In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1)), (In (Node n0 c2 c1) (insert n0 p))
(In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p c2)), (In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c1 a2) p), (In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p))
(In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1)), (In (Node n0 c1 a2) (heap_delete_max c2)), (In (Node n0 c1 a2) (heap_delete_max c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p c2))
(In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (insert n0 p)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (carry p a2)), (In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p)
(In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (c2 :: p)), (In (Node n0 c1 a1) (c1 :: p)), (In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (join p p a2))
(In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p c2)), (In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert n p)), (In (Node n0 c1 a1) (carry p a2)), (In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1))
(In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 c2) p), (In (Node n0 c1 c2) (a2 :: p)), (In (Node n0 c1 c2) (a1 :: p)), (In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1)), (In (Node n0 c1 c2) (heap_delete_max c2))
(In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (join p p a2)), (In (Node n0 c1 c2) (join p p a1)), (In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1))
(In (Node n0 c1 c2) (carry p c2)), (In (Node n0 c1 c2) (carry p c1)), (In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p)), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (merge p p)), (In (Node n0 c1 c1) (heap_delete_max a2))
(In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max c2)), (In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (join p p a2)), (In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1)), (In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert n p))
(In (Node n0 c1 c1) (carry p a2)), (In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (p ++ p)), (In (Node n1 a2 a2) p), (In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p))
(In (Node n1 a2 a2) (merge p p)), (In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max c2)), (In (Node n1 a2 a2) (heap_delete_max c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (insert n0 p))
(In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (carry p a2)), (In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p))
(In (Node n1 a2 a1) (c2 :: p)), (In (Node n1 a2 a1) (c1 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p c2))
(In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (carry p a2)), (In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1)), (In (Node n1 a2 a1) (p ++ p)), (In (Node n1 a2 c2) p)
(In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p)), (In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1)), (In (Node n1 a2 c2) (join p p a2))
(In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1)), (In (Node n1 a2 c2) (carry p c2)), (In (Node n1 a2 c2) (carry p c1))
(In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p)), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (merge p p)), (In (Node n1 a2 c1) (heap_delete_max a2)), (In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max c2))
(In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (join p p a2)), (In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1)), (In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n1 p)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1))
(In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a1 a2) p), (In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (c2 :: p)), (In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max a2))
(In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max c2)), (In (Node n1 a1 a2) (heap_delete_max c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1)), (In (Node n1 a1 a2) (insert n0 p)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert n p))
(In (Node n1 a1 a2) (carry p a2)), (In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p), (In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (c2 :: p)), (In (Node n1 a1 a1) (c1 :: p))
(In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (join p p a2)), (In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p c2)), (In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (insert n0 p))
(In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (carry p a2)), (In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p c2)), (In (Node n1 a1 a1) (carry p c1)), (In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 c2) p), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p))
(In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1)), (In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (join p p a2)), (In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p c2))
(In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p c2)), (In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p)
(In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p)), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p)), (In (Node n1 a1 c1) (merge p p)), (In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (join p p a2))
(In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1)), (In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert n p)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1))
(In (Node n1 a1 c1) (p ++ p)), (In (Node n1 c2 a2) p), (In (Node n1 c2 a2) (a2 :: p)), (In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max c2))
(In (Node n1 c2 a2) (heap_delete_max c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1)), (In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (insert n0 p)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (carry p a2)), (In (Node n1 c2 a2) (carry p a1))
(In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1)), (In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (c2 :: p)), (In (Node n1 c2 a1) (c1 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max a2))
(In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max c2)), (In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p c2)), (In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert n p))
(In (Node n1 c2 a1) (carry p a2)), (In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1)), (In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 c2) p), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p)), (In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p))
(In (Node n1 c2 c2) (merge p p)), (In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (join p p a2)), (In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (insert n0 p))
(In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p c2)), (In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p))
(In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (merge p p)), (In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (join p p a2)), (In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p c2))
(In (Node n1 c2 c1) (join p p c1)), (In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (p ++ p)), (In (Node n1 c1 a2) p)
(In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max c2)), (In (Node n1 c1 a2) (heap_delete_max c1)), (In (Node n1 c1 a2) (join p p a2))
(In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (insert n0 p)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (carry p a2)), (In (Node n1 c1 a2) (carry p a1)), (In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1))
(In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (c2 :: p)), (In (Node n1 c1 a1) (c1 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max a2)), (In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max c2))
(In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p c2)), (In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n1 p)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (carry p a2)), (In (Node n1 c1 a1) (carry p a1))
(In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1)), (In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 c2) p), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p)), (In (Node n1 c1 c2) (c2 :: p)), (In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max a2))
(In (Node n1 c1 c2) (heap_delete_max a1)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (join p p a2)), (In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert n p))
(In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p c2)), (In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p), (In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p)), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p))
(In (Node n1 c1 c1) (merge p p)), (In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (join p p a2)), (In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1)), (In (Node n1 c1 c1) (insert n0 p))
(In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p c2)), (In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p))
(In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max c2)), (In (Node n a2 a2) (heap_delete_max c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p c2))
(In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p)
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (c2 :: p)), (In (Node n a2 a1) (c1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max c2)), (In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (join p p a2))
(In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p c2)), (In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1))
(In (Node n a2 a1) (p ++ p)), (In (Node n a2 c2) p), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p)), (In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (merge p p)), (In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1)), (In (Node n a2 c2) (heap_delete_max c2))
(In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (join p p a2)), (In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (insert n0 p)), (In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1))
(In (Node n a2 c2) (carry p c2)), (In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p)), (In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (merge p p)), (In (Node n a2 c1) (heap_delete_max a2))
(In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (join p p a2)), (In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p c2)), (In (Node n a2 c1) (join p p c1)), (In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert n p))
(In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p))
(In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max c2)), (In (Node n a1 a2) (heap_delete_max c1)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (insert n0 p))
(In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p))
(In (Node n a1 a1) (c2 :: p)), (In (Node n a1 a1) (c1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p c2))
(In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n1 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 c2) p)
(In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p)), (In (Node n a1 c2) (c2 :: p)), (In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (join p p a2))
(In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p c2)), (In (Node n a1 c2) (carry p c1))
(In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p), (In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p)), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (merge p p)), (In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max c2))
(In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (join p p a2)), (In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1)), (In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1))
(In (Node n a1 c1) (carry p c2)), (In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (p ++ p)), (In (Node n c2 a2) p), (In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max a2))
(In (Node n c2 a2) (heap_delete_max a1)), (In (Node n c2 a2) (heap_delete_max c2)), (In (Node n c2 a2) (heap_delete_max c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (insert n0 p)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert n p))
(In (Node n c2 a2) (carry p a2)), (In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (c2 :: p)), (In (Node n c2 a1) (c1 :: p))
(In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p c2)), (In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (insert n0 p))
(In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert n p)), (In (Node n c2 a1) (carry p a2)), (In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1)), (In (Node n c2 a1) (p ++ p)), (In (Node n c2 c2) p), (In (Node n c2 c2) (a2 :: p)), (In (Node n c2 c2) (a1 :: p))
(In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (join p p a2)), (In (Node n c2 c2) (join p p a1)), (In (Node n c2 c2) (join p p c2))
(In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p c2)), (In (Node n c2 c2) (carry p c1)), (In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p)
(In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p)), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (merge p p)), (In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max c2)), (In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (join p p a2))
(In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1)), (In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (carry p a2)), (In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1))
(In (Node n c2 c1) (p ++ p)), (In (Node n c1 a2) p), (In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (merge p p)), (In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max c2))
(In (Node n c1 a2) (heap_delete_max c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (insert n0 p)), (In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (carry p a2)), (In (Node n c1 a2) (carry p a1))
(In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p)), (In (Node n c1 a1) (c2 :: p)), (In (Node n c1 a1) (c1 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max a2))
(In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p c2)), (In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert n p))
(In (Node n c1 a1) (carry p a2)), (In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1)), (In (Node n c1 a1) (p ++ p)), (In (Node n c1 c2) p), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p)), (In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p))
(In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1)), (In (Node n c1 c2) (join p p a2)), (In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (insert n0 p))
(In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1)), (In (Node n c1 c2) (carry p c2)), (In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p))
(In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (merge p p)), (In (Node n c1 c1) (heap_delete_max a2)), (In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (join p p a2)), (In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p c2))
(In (Node n c1 c1) (join p p c1)), (In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n1 p)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (p ++ p)), (In (smash a2 a2) p)
(In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max c2)), (In (smash a2 a2) (heap_delete_max c1)), (In (smash a2 a2) (join p p a2))
(In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1))
(In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (c2 :: p)), (In (smash a2 a1) (c1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max c2))
(In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p c2)), (In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n1 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1))
(In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1)), (In (smash a2 a1) (p ++ p)), (In (smash a2 c2) p), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p)), (In (smash a2 c2) (c2 :: p)), (In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max a2))
(In (smash a2 c2) (heap_delete_max a1)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (join p p a2)), (In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert n p))
(In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p c2)), (In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p), (In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p)), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p))
(In (smash a2 c1) (merge p p)), (In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (join p p a2)), (In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1)), (In (smash a2 c1) (insert n0 p))
(In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p c2)), (In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p))
(In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max c2)), (In (smash a1 a2) (heap_delete_max c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p c2))
(In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p)
(In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (c2 :: p)), (In (smash a1 a1) (c1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (join p p a2))
(In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p c2)), (In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1))
(In (smash a1 a1) (p ++ p)), (In (smash a1 c2) p), (In (smash a1 c2) (a2 :: p)), (In (smash a1 c2) (a1 :: p)), (In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1)), (In (smash a1 c2) (heap_delete_max c2))
(In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (join p p a2)), (In (smash a1 c2) (join p p a1)), (In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1))
(In (smash a1 c2) (carry p c2)), (In (smash a1 c2) (carry p c1)), (In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p)), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (merge p p)), (In (smash a1 c1) (heap_delete_max a2))
(In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max c2)), (In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (join p p a2)), (In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1)), (In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert n p))
(In (smash a1 c1) (carry p a2)), (In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (p ++ p)), (In (smash c2 a2) p), (In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p))
(In (smash c2 a2) (merge p p)), (In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max c2)), (In (smash c2 a2) (heap_delete_max c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (insert n0 p))
(In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert n p)), (In (smash c2 a2) (carry p a2)), (In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p))
(In (smash c2 a1) (c2 :: p)), (In (smash c2 a1) (c1 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p c2))
(In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (carry p a2)), (In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1)), (In (smash c2 a1) (p ++ p)), (In (smash c2 c2) p)
(In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p)), (In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1)), (In (smash c2 c2) (join p p a2))
(In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1)), (In (smash c2 c2) (carry p c2)), (In (smash c2 c2) (carry p c1))
(In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p)), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (merge p p)), (In (smash c2 c1) (heap_delete_max a2)), (In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max c2))
(In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (join p p a2)), (In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1)), (In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n1 p)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1))
(In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (p ++ p)), (In (smash c1 a2) p), (In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (c2 :: p)), (In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max a2))
(In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max c2)), (In (smash c1 a2) (heap_delete_max c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1)), (In (smash c1 a2) (insert n0 p)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert n p))
(In (smash c1 a2) (carry p a2)), (In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p), (In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (c2 :: p)), (In (smash c1 a1) (c1 :: p))
(In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (join p p a2)), (In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p c2)), (In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (insert n0 p))
(In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (carry p a2)), (In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p c2)), (In (smash c1 a1) (carry p c1)), (In (smash c1 a1) (p ++ p)), (In (smash c1 c2) p), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p))
(In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1)), (In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (join p p a2)), (In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p c2))
(In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p c2)), (In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p)
(In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p)), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p)), (In (smash c1 c1) (merge p p)), (In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (join p p a2))
(In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1)), (In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert n p)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1))
(In (smash c1 c1) (p ++ p)), (In Leaf p), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max c2))
(In Leaf (heap_delete_max c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1)), (In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (insert n0 p)), (In Leaf (insert n1 p)), (In Leaf (insert n p)), (In Leaf (carry p a2)), (In Leaf (carry p a1))
(In Leaf (carry p c2)), (In Leaf (carry p c1)), (In Leaf (p ++ p)), (n0 < find_max' n0 p), (n0 < find_max' n1 p), (n0 < find_max' n p), (n0 < length p), (n1 < find_max' n0 p), (n1 < find_max' n1 p), (n1 < find_max' n p)
(n1 < length p), (n < find_max' n0 p), (n < find_max' n1 p), (n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n1), (find_max' n0 p < n), (find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' n p)
(find_max' n0 p < length p), (find_max' n1 p < n0), (find_max' n1 p < n1), (find_max' n1 p < n), (find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' n p), (find_max' n1 p < length p), (find_max' n p < n0), (find_max' n p < n1), (find_max' n p < n)
(find_max' n p < find_max' n0 p), (find_max' n p < find_max' n1 p), (find_max' n p < length p), (length p < n0), (length p < n1), (length p < n), (length p < find_max' n0 p), (length p < find_max' n1 p), (length p < find_max' n p), (n0 <= find_max' n0 p)
(n0 <= find_max' n1 p), (n0 <= find_max' n p), (n0 <= length p), (n1 <= find_max' n0 p), (n1 <= find_max' n1 p), (n1 <= find_max' n p), (n1 <= length p), (n <= find_max' n0 p), (n <= find_max' n1 p), (n <= find_max' n p)
(n <= length p), (find_max' n0 p <= n0), (find_max' n0 p <= n1), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n1 p <= n0), (find_max' n1 p <= n1), (find_max' n1 p <= n)
(find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= length p), (find_max' n p <= n0), (find_max' n p <= n1), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n1 p), (find_max' n p <= length p), (length p <= n0)
(length p <= n1), (length p <= n), (length p <= find_max' n0 p), (length p <= find_max' n1 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n1 p), (~ priqq n p), (~ pow2heap n0 a2)
(~ pow2heap n0 a1), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 c2), (~ pow2heap n1 c1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n c2)
(~ pow2heap n c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n0 c2), (~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1), (~ pow2heapp n0 n a2)
(~ pow2heapp n0 n a1), (~ pow2heapp n0 n c2), (~ pow2heapp n0 n c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1), (~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1), (~ pow2heapp n1 n1 c2)
(~ pow2heapp n1 n1 c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 c2), (~ pow2heapp n n0 c1), (~ pow2heapp n n1 a2)
(~ pow2heapp n n1 a1), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n c2), (~ pow2heapp n n c1), (~ Permutation p p), (~ In a2 p), (~ In a1 p)
(~ In c2 p), (~ In c1 p), (~ n0 < n0), (~ n0 < n1), (~ n0 < n), (~ n1 < n0), (~ n1 < n1), (~ n1 < n), (~ n < n0), (~ n < n1)
(~ n < n), (~ n0 <= n0), (~ n0 <= n1), (~ n0 <= n), (~ n1 <= n0), (~ n1 <= n1), (~ n1 <= n), (~ n <= n0), (~ n <= n1), (~ n <= n)
(p <> p), (a2 <> a2), (a2 <> a1), (a2 <> c2), (a2 <> c1), (a1 <> a2), (a1 <> a1), (a1 <> c2), (a1 <> c1), (c2 <> a2)
(c2 <> a1), (c2 <> c2), (c2 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> c2), (c1 <> c1), (n0 <> n0), (n0 <> n1), (n0 <> n)
(n1 <> n0), (n1 <> n1), (n1 <> n), (n <> n0), (n <> n1), (n <> n), (None = Some p), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = insert n0 p), (a2 :: p = insert n1 p), (a2 :: p = insert n p)
(a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p c2), (a2 :: p = carry p c1), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1)
(a1 :: p = heap_delete_max c2), (a1 :: p = heap_delete_max c1), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = insert n0 p), (a1 :: p = insert n1 p), (a1 :: p = insert n p), (a1 :: p = carry p a2)
(a1 :: p = carry p a1), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = p ++ p), (a1 :: p = []), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max a2), (c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max c2)
(c2 :: p = heap_delete_max c1), (c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p c2), (c2 :: p = join p p c1), (c2 :: p = insert n0 p), (c2 :: p = insert n1 p), (c2 :: p = insert n p), (c2 :: p = carry p a2), (c2 :: p = carry p a1)
(c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p), (c1 :: p = merge p p), (c1 :: p = heap_delete_max a2), (c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1)
(c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p c2), (c1 :: p = join p p c1), (c1 :: p = insert n0 p), (c1 :: p = insert n1 p), (c1 :: p = insert n p), (c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p c2)
(c1 :: p = carry p c1), (c1 :: p = p ++ p), (c1 :: p = []), (merge p p = p), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = join p p a2), (merge p p = join p p a1)
(merge p p = join p p c2), (merge p p = join p p c1), (merge p p = insert n0 p), (merge p p = insert n1 p), (merge p p = insert n p), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p c2), (merge p p = carry p c1), (merge p p = p ++ p)
(heap_delete_max a2 = p), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p c2)
(heap_delete_max a1 = carry p c1), (heap_delete_max a1 = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1), (heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p), (heap_delete_max c1 = carry p a2)
(heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p c2), (heap_delete_max c1 = carry p c1), (heap_delete_max c1 = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = insert n0 p)
(join p p a2 = insert n1 p), (join p p a2 = insert n p), (join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = carry p c2), (join p p a2 = carry p c1), (join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1)
(join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = insert n0 p), (join p p a1 = insert n1 p), (join p p a1 = insert n p), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = p ++ p)
(join p p c2 = p), (join p p c2 = heap_delete_max a2), (join p p c2 = heap_delete_max a1), (join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = insert n0 p), (join p p c2 = insert n1 p), (join p p c2 = insert n p), (join p p c2 = carry p a2), (join p p c2 = carry p a1)
(join p p c2 = carry p c2), (join p p c2 = carry p c1), (join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = insert n0 p), (join p p c1 = insert n1 p)
(join p p c1 = insert n p), (join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p c2), (join p p c1 = carry p c1), (join p p c1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max c2)
(insert n0 p = heap_delete_max c1), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p c2), (insert n0 p = carry p c1), (insert n0 p = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max c2)
(insert n1 p = heap_delete_max c1), (insert n1 p = carry p a2), (insert n1 p = carry p a1), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = heap_delete_max c2)
(insert n p = heap_delete_max c1), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p)
(carry p c2 = p), (carry p c2 = p ++ p), (carry p c1 = p), (carry p c1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max c2)
([] = heap_delete_max c1), ([] = join p p a2), ([] = join p p a1), ([] = join p p c2), ([] = join p p c1), ([] = insert n0 p), ([] = insert n1 p), ([] = insert n p), ([] = carry p a2), ([] = carry p a1)
([] = carry p c2), ([] = carry p c1), ([] = p ++ p), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n1 p), ((p, p) = delete_max_aux n p), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = c2), (Node n0 a2 a2 = c1)
(Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash c2 a2), (Node n0 a2 a2 = smash c2 a1)
(Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = c2), (Node n0 a2 a1 = c1)
(Node n0 a2 a1 = smash a2 a2), (Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash c2 a2), (Node n0 a2 a1 = smash c2 a1)
(Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = c2), (Node n0 a2 c2 = c1)
(Node n0 a2 c2 = smash a2 a2), (Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash c2 a2), (Node n0 a2 c2 = smash c2 a1)
(Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = c2), (Node n0 a2 c1 = c1)
(Node n0 a2 c1 = smash a2 a2), (Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash c2 a2), (Node n0 a2 c1 = smash c2 a1)
(Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = c2), (Node n0 a1 a2 = c1)
(Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash c2 a2), (Node n0 a1 a2 = smash c2 a1)
(Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = c2), (Node n0 a1 a1 = c1)
(Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash c2 a2), (Node n0 a1 a1 = smash c2 a1)
(Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = c2), (Node n0 a1 c2 = c1)
(Node n0 a1 c2 = smash a2 a2), (Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash c2 a2), (Node n0 a1 c2 = smash c2 a1)
(Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = c2), (Node n0 a1 c1 = c1)
(Node n0 a1 c1 = smash a2 a2), (Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash c2 a2), (Node n0 a1 c1 = smash c2 a1)
(Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = c2), (Node n0 c2 a2 = c1)
(Node n0 c2 a2 = smash a2 a2), (Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash c2 a2), (Node n0 c2 a2 = smash c2 a1)
(Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = c2), (Node n0 c2 a1 = c1)
(Node n0 c2 a1 = smash a2 a2), (Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash c2 a2), (Node n0 c2 a1 = smash c2 a1)
(Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = c2), (Node n0 c2 c2 = c1)
(Node n0 c2 c2 = smash a2 a2), (Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash c2 a2), (Node n0 c2 c2 = smash c2 a1)
(Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = c2), (Node n0 c2 c1 = c1)
(Node n0 c2 c1 = smash a2 a2), (Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash c2 a2), (Node n0 c2 c1 = smash c2 a1)
(Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = c2), (Node n0 c1 a2 = c1)
(Node n0 c1 a2 = smash a2 a2), (Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash c2 a2), (Node n0 c1 a2 = smash c2 a1)
(Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = c2), (Node n0 c1 a1 = c1)
(Node n0 c1 a1 = smash a2 a2), (Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash c2 a2), (Node n0 c1 a1 = smash c2 a1)
(Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = c2), (Node n0 c1 c2 = c1)
(Node n0 c1 c2 = smash a2 a2), (Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash c2 a2), (Node n0 c1 c2 = smash c2 a1)
(Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = c2), (Node n0 c1 c1 = c1)
(Node n0 c1 c1 = smash a2 a2), (Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash c2 a2), (Node n0 c1 c1 = smash c2 a1)
(Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = c2), (Node n1 a2 a2 = c1)
(Node n1 a2 a2 = smash a2 a2), (Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash c2 a2), (Node n1 a2 a2 = smash c2 a1)
(Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = c2), (Node n1 a2 a1 = c1)
(Node n1 a2 a1 = smash a2 a2), (Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash c2 a2), (Node n1 a2 a1 = smash c2 a1)
(Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = c2), (Node n1 a2 c2 = c1)
(Node n1 a2 c2 = smash a2 a2), (Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash c2 a2), (Node n1 a2 c2 = smash c2 a1)
(Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = c2), (Node n1 a2 c1 = c1)
(Node n1 a2 c1 = smash a2 a2), (Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash c2 a2), (Node n1 a2 c1 = smash c2 a1)
(Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = c2), (Node n1 a1 a2 = c1)
(Node n1 a1 a2 = smash a2 a2), (Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash c2 a2), (Node n1 a1 a2 = smash c2 a1)
(Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = c2), (Node n1 a1 a1 = c1)
(Node n1 a1 a1 = smash a2 a2), (Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash c2 a2), (Node n1 a1 a1 = smash c2 a1)
(Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = c2), (Node n1 a1 c2 = c1)
(Node n1 a1 c2 = smash a2 a2), (Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash c2 a2), (Node n1 a1 c2 = smash c2 a1)
(Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = c2), (Node n1 a1 c1 = c1)
(Node n1 a1 c1 = smash a2 a2), (Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash c2 a2), (Node n1 a1 c1 = smash c2 a1)
(Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = c2), (Node n1 c2 a2 = c1)
(Node n1 c2 a2 = smash a2 a2), (Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash c2 a2), (Node n1 c2 a2 = smash c2 a1)
(Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = c2), (Node n1 c2 a1 = c1)
(Node n1 c2 a1 = smash a2 a2), (Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash c2 a2), (Node n1 c2 a1 = smash c2 a1)
(Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = c2), (Node n1 c2 c2 = c1)
(Node n1 c2 c2 = smash a2 a2), (Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash c2 a2), (Node n1 c2 c2 = smash c2 a1)
(Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = c2), (Node n1 c2 c1 = c1)
(Node n1 c2 c1 = smash a2 a2), (Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash c2 a2), (Node n1 c2 c1 = smash c2 a1)
(Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = c2), (Node n1 c1 a2 = c1)
(Node n1 c1 a2 = smash a2 a2), (Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash c2 a2), (Node n1 c1 a2 = smash c2 a1)
(Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = c2), (Node n1 c1 a1 = c1)
(Node n1 c1 a1 = smash a2 a2), (Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash c2 a2), (Node n1 c1 a1 = smash c2 a1)
(Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = c2), (Node n1 c1 c2 = c1)
(Node n1 c1 c2 = smash a2 a2), (Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash c2 a2), (Node n1 c1 c2 = smash c2 a1)
(Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = c2), (Node n1 c1 c1 = c1)
(Node n1 c1 c1 = smash a2 a2), (Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash c2 a2), (Node n1 c1 c1 = smash c2 a1)
(Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = c2), (Node n a2 a2 = c1)
(Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash c2 a2), (Node n a2 a2 = smash c2 a1)
(Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = c2), (Node n a2 a1 = c1)
(Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash c2 a2), (Node n a2 a1 = smash c2 a1)
(Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = c2), (Node n a2 c2 = c1)
(Node n a2 c2 = smash a2 a2), (Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash c2 a2), (Node n a2 c2 = smash c2 a1)
(Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = c2), (Node n a2 c1 = c1)
(Node n a2 c1 = smash a2 a2), (Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash c2 a2), (Node n a2 c1 = smash c2 a1)
(Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = c2), (Node n a1 a2 = c1)
(Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash c2 a2), (Node n a1 a2 = smash c2 a1)
(Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = c2), (Node n a1 a1 = c1)
(Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash c2 a2), (Node n a1 a1 = smash c2 a1)
(Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = c2), (Node n a1 c2 = c1)
(Node n a1 c2 = smash a2 a2), (Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash c2 a2), (Node n a1 c2 = smash c2 a1)
(Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = c2), (Node n a1 c1 = c1)
(Node n a1 c1 = smash a2 a2), (Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash c2 a2), (Node n a1 c1 = smash c2 a1)
(Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = c2), (Node n c2 a2 = c1)
(Node n c2 a2 = smash a2 a2), (Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash c2 a2), (Node n c2 a2 = smash c2 a1)
(Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = c2), (Node n c2 a1 = c1)
(Node n c2 a1 = smash a2 a2), (Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash c2 a2), (Node n c2 a1 = smash c2 a1)
(Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = c2), (Node n c2 c2 = c1)
(Node n c2 c2 = smash a2 a2), (Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash c2 a2), (Node n c2 c2 = smash c2 a1)
(Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = c2), (Node n c2 c1 = c1)
(Node n c2 c1 = smash a2 a2), (Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash c2 a2), (Node n c2 c1 = smash c2 a1)
(Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = c2), (Node n c1 a2 = c1)
(Node n c1 a2 = smash a2 a2), (Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash c2 a2), (Node n c1 a2 = smash c2 a1)
(Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = c2), (Node n c1 a1 = c1)
(Node n c1 a1 = smash a2 a2), (Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash c2 a2), (Node n c1 a1 = smash c2 a1)
(Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = c2), (Node n c1 c2 = c1)
(Node n c1 c2 = smash a2 a2), (Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash c2 a2), (Node n c1 c2 = smash c2 a1)
(Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = c2), (Node n c1 c1 = c1)
(Node n c1 c1 = smash a2 a2), (Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash c2 a2), (Node n c1 c1 = smash c2 a1)
(Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = c2), (smash a2 a2 = c1)
(smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c1 = a2), (smash a2 c1 = a1)
(smash a2 c1 = c2), (smash a2 c1 = c1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = c2), (smash a1 a1 = c1)
(smash a1 c2 = a2), (smash a1 c2 = a1), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = c2), (smash a1 c1 = c1), (smash c2 a2 = a2), (smash c2 a2 = a1)
(smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a1 = a2), (smash c2 a1 = a1), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = c2), (smash c2 c2 = c1)
(smash c2 c1 = a2), (smash c2 c1 = a1), (smash c2 c1 = c2), (smash c2 c1 = c1), (smash c1 a2 = a2), (smash c1 a2 = a1), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a1 = a2), (smash c1 a1 = a1)
(smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 c2 = a2), (smash c1 c2 = a1), (smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = c2), (smash c1 c1 = c1)
(Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 c2), (Leaf = Node n0 a2 c1), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1)
(Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c1 a2), (Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n1 a2 a2), (Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1)
(Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 c2), (Leaf = Node n1 a1 c1), (Leaf = Node n1 c2 a2), (Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1)
(Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1)
(Leaf = Node n c2 a2), (Leaf = Node n c2 a1), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1)
(Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 c2), (Leaf = smash c2 c1)
(Leaf = smash c1 a2), (Leaf = smash c1 a1), (Leaf = smash c1 c2), (Leaf = smash c1 c1), (find_max' n0 p = n0), (find_max' n0 p = n1), (find_max' n0 p = n), (find_max' n1 p = n0), (find_max' n1 p = n1), (find_max' n1 p = n)
(find_max' n p = n0), (find_max' n p = n1), (find_max' n p = n), (length p = n0), (length p = n1), (length p = n), (length p = find_max' n0 p), (length p = find_max' n1 p), (length p = find_max' n p), (Some n0 = find_max p)
(Some n1 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n1), (None = Some n), (None = find_max p), (None = Some a2), (None = Some a1), (None = Some c2), (None = Some c1)
((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? n)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? n)), ((n0 >? n1) = (n0 >=? n0))
((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n >=? n0)), ((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n1))
((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n1)), ((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n1)), ((n0 >? n) = (n >=? n)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n))
((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n1)), ((n1 >? n0) = (n >=? n)), ((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? n)), ((n1 >? n1) = (n1 >=? n0))
((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n >=? n0)), ((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? n)), ((n1 >? n) = (n0 >=? n0)), ((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n1))
((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n >=? n0)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n1)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? n))
((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? n)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? n)), ((n >? n1) = (n1 >=? n0)), ((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? n)), ((n >? n1) = (n >=? n0))
((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n1)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n1 >=? n0)), ((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n1))
((n >? n) = (n >=? n))

Label: 1 (1)
(priq p), (priqq n0 p), (priqq n1 p), (priqq n p), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 c2), (pow2heap n0 c1), (pow2heap n1 a2), (pow2heap n1 a1)
(pow2heap n1 c2), (pow2heap n1 c1), (pow2heap n a2), (pow2heap n a1), (pow2heap n c2), (pow2heap n c1), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 c2), (pow2heapp n0 n0 c1)
(pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n c2), (pow2heapp n0 n c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1)
(pow2heapp n1 n0 c2), (pow2heapp n1 n0 c1), (pow2heapp n1 n1 a2), (pow2heapp n1 n1 a1), (pow2heapp n1 n1 c2), (pow2heapp n1 n1 c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n c2), (pow2heapp n1 n c1)
(pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n1 a2), (pow2heapp n n1 a1), (pow2heapp n n1 c2), (pow2heapp n n1 c1), (pow2heapp n n a2), (pow2heapp n n a1)
(pow2heapp n n c2), (pow2heapp n n c1), (Permutation p p), (In a2 p), (In a1 p), (In c2 p), (In c1 p), (n0 < n0), (n0 < n1), (n0 < n)
(n1 < n0), (n1 < n1), (n1 < n), (n < n0), (n < n1), (n < n), (n0 <= n0), (n0 <= n1), (n0 <= n), (n1 <= n0)
(n1 <= n1), (n1 <= n), (n <= n0), (n <= n1), (n <= n), (p = p), (a2 = a2), (a2 = a1), (a2 = c2), (a2 = c1)
(a1 = a2), (a1 = a1), (a1 = c2), (a1 = c1), (c2 = a2), (c2 = a1), (c2 = c2), (c2 = c1), (c1 = a2), (c1 = a1)
(c1 = c2), (c1 = c1), (n0 = n0), (n0 = n1), (n0 = n), (n1 = n0), (n1 = n1), (n1 = n), (n = n0), (n = n1)
(n = n), (false = (n0 >? n0)), (false = (n0 >? n1)), (false = (n0 >? n)), (false = (n1 >? n0)), (false = (n1 >? n1)), (false = (n1 >? n)), (false = (n >? n0)), (false = (n >? n1)), (false = (n >? n))
(false = (n0 >=? n0)), (false = (n0 >=? n1)), (false = (n0 >=? n)), (false = (n1 >=? n0)), (false = (n1 >=? n1)), (false = (n1 >=? n)), (false = (n >=? n0)), (false = (n >=? n1)), (false = (n >=? n)), (true = (n0 >? n0))
(true = (n0 >? n1)), (true = (n0 >? n)), (true = (n1 >? n0)), (true = (n1 >? n1)), (true = (n1 >? n)), (true = (n >? n0)), (true = (n >? n1)), (true = (n >? n)), (true = (n0 >=? n0)), (true = (n0 >=? n1))
(true = (n0 >=? n)), (true = (n1 >=? n0)), (true = (n1 >=? n1)), (true = (n1 >=? n)), (true = (n >=? n0)), (true = (n >=? n1)), (true = (n >=? n)), (Abs p []), (Abs (a2 :: p) []), (Abs (a1 :: p) [])
(Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max c2) []), (Abs (heap_delete_max c1) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p c2) [])
(Abs (join p p c1) []), (Abs (insert n0 p) []), (Abs (insert n1 p) []), (Abs (insert n p) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p c2) []), (Abs (carry p c1) []), (Abs (p ++ p) []), (Abs [] [])
(priqueue_elems p []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n1 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (carry p c2) [])
(priqueue_elems (carry p c1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems c2 []), (tree_elems c1 []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 c2) [])
(tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c1 a2) [])
(tree_elems (Node n0 c1 a1) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) []), (tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) []), (tree_elems (Node n1 a1 c2) [])
(tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node n a2 a2) [])
(tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n c2 a2) []), (tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 c2) [])
(tree_elems (Node n c2 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a1 a2) [])
(tree_elems (smash a1 a1) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 c2) [])
(tree_elems (smash c1 c1) []), (tree_elems Leaf []), (priq (a2 :: p)), (priq (a1 :: p)), (priq (c2 :: p)), (priq (c1 :: p)), (priq (merge p p)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max c2))
(priq (heap_delete_max c1)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p c2)), (priq (join p p c1)), (priq (insert n0 p)), (priq (insert n1 p)), (priq (insert n p)), (priq (carry p a2)), (priq (carry p a1))
(priq (carry p c2)), (priq (carry p c1)), (priq (p ++ p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (c2 :: p)), (priqq n0 (c1 :: p)), (priqq n0 (merge p p)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1))
(priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p c2)), (priqq n0 (join p p c1)), (priqq n0 (insert n0 p)), (priqq n0 (insert n1 p)), (priqq n0 (insert n p)), (priqq n0 (carry p a2))
(priqq n0 (carry p a1)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1)), (priqq n0 (p ++ p)), (priqq n1 (a2 :: p)), (priqq n1 (a1 :: p)), (priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (merge p p)), (priqq n1 (heap_delete_max a2))
(priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1)), (priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p c2)), (priqq n1 (join p p c1)), (priqq n1 (insert n0 p)), (priqq n1 (insert n1 p)), (priqq n1 (insert n p))
(priqq n1 (carry p a2)), (priqq n1 (carry p a1)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (p ++ p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (merge p p))
(priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p c2)), (priqq n (join p p c1)), (priqq n (insert n0 p)), (priqq n (insert n1 p))
(priqq n (insert n p)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (c2 :: p))
(priqq (find_max' n0 p) (c1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max c2)), (priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1))
(priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n1 p) p), (priqq (find_max' n1 p) (a2 :: p))
(priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (c2 :: p)), (priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1))
(priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p c2)), (priqq (find_max' n1 p) (carry p c1)), (priqq (find_max' n1 p) (p ++ p))
(priqq (find_max' n p) p), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1))
(priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n1 p)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p c2))
(priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1))
(priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p c2)), (priqq (length p) (join p p c1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n1 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p a2))
(priqq (length p) (carry p a1)), (priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1))
(pow2heap n0 (Node n0 a1 c2)), (pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1))
(pow2heap n0 (Node n1 a2 a2)), (pow2heap n0 (Node n1 a2 a1)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1))
(pow2heap n0 (Node n1 c2 c2)), (pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 c2)), (pow2heap n0 (Node n a2 c1))
(pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c1 a2)), (pow2heap n0 (Node n c1 a1))
(pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1))
(pow2heap n0 (smash c2 a2)), (pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1))
(pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1)), (pow2heap n1 (Node n0 a1 c2)), (pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1))
(pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n1 a2 a2)), (pow2heap n1 (Node n1 a2 a1)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1))
(pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 c2)), (pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1))
(pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 c2)), (pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1))
(pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c1 a2)), (pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1)), (pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1))
(pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash c2 a2)), (pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1))
(pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 c2)), (pow2heap n (Node n0 a1 c1))
(pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n1 a2 a2)), (pow2heap n (Node n1 a2 a1))
(pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 c2)), (pow2heap n (Node n1 c2 c1))
(pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 c2)), (pow2heap n (Node n a2 c1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1))
(pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c1 a2)), (pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1))
(pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash c2 a2)), (pow2heap n (smash c2 a1))
(pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1)
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 c2 a2)), (pow2heap (find_max' n0 p) (Node n0 c2 a1))
(pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 c2)), (pow2heap (find_max' n0 p) (Node n1 a2 c1))
(pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1)), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c1 a2)), (pow2heap (find_max' n0 p) (Node n1 c1 a1))
(pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1)), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1))
(pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1)), (pow2heap (find_max' n0 p) (Node n c1 c2)), (pow2heap (find_max' n0 p) (Node n c1 c1)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1))
(pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1)), (pow2heap (find_max' n0 p) (smash c2 c2)), (pow2heap (find_max' n0 p) (smash c2 c1))
(pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1))
(pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a1 a2)), (pow2heap (find_max' n1 p) (Node n0 a1 a1)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1))
(pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 c2)), (pow2heap (find_max' n1 p) (Node n0 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1))
(pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 c2 a2)), (pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1))
(pow2heap (find_max' n1 p) (Node n a2 a2)), (pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1))
(pow2heap (find_max' n1 p) (Node n c2 c2)), (pow2heap (find_max' n1 p) (Node n c2 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1))
(pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 c2)), (pow2heap (find_max' n1 p) (smash a1 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1))
(pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1)), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) c2), (pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 c2)), (pow2heap (find_max' n p) (Node n0 a2 c1))
(pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c1 a2)), (pow2heap (find_max' n p) (Node n0 c1 a1))
(pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1)), (pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1)), (pow2heap (find_max' n p) (Node n1 a1 c2)), (pow2heap (find_max' n p) (Node n1 a1 c1))
(pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1)), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1))
(pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n c2 a2)), (pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1))
(pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1))
(pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 c2)), (pow2heap (find_max' n p) (smash c1 c1))
(pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) c2), (pow2heap (length p) c1), (pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1))
(pow2heap (length p) (Node n0 a1 c2)), (pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1))
(pow2heap (length p) (Node n1 a2 a2)), (pow2heap (length p) (Node n1 a2 a1)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1))
(pow2heap (length p) (Node n1 c2 c2)), (pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1)), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 c2)), (pow2heap (length p) (Node n a2 c1))
(pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c1 a2)), (pow2heap (length p) (Node n c1 a1))
(pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1))
(pow2heap (length p) (smash c2 a2)), (pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1))
(pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 c2)), (pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1))
(pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n1 a2 a2)), (pow2heapp n0 n0 (Node n1 a2 a1)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1))
(pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 c2)), (pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1))
(pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 c2)), (pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1))
(pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c1 a2)), (pow2heapp n0 n0 (Node n c1 a1)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1))
(pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash c2 a2)), (pow2heapp n0 n0 (smash c2 a1)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1))
(pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a1 a2)), (pow2heapp n0 n1 (Node n0 a1 a1)), (pow2heapp n0 n1 (Node n0 a1 c2))
(pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 c2 a2)), (pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1)), (pow2heapp n0 n1 (Node n1 a2 a2))
(pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1)), (pow2heapp n0 n1 (Node n1 c2 c2))
(pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c1 a2)), (pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1)), (pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a1 a2))
(pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n c2 a2)), (pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1)), (pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 c2))
(pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (smash a2 a2)), (pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1)), (pow2heapp n0 n1 (smash c2 a2))
(pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c1 a2)), (pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 Leaf), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1))
(pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1)), (pow2heapp n0 n (Node n0 c2 a2)), (pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1))
(pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1)), (pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1)), (pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a1 a2)), (pow2heapp n0 n (Node n1 a1 a1))
(pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1)), (pow2heapp n0 n (Node n1 c1 a2)), (pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1))
(pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1)), (pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1))
(pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c1 a2)), (pow2heapp n0 n (Node n c1 a1)), (pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1)), (pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1))
(pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1)), (pow2heapp n0 n (smash c2 a2)), (pow2heapp n0 n (smash c2 a1)), (pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1)), (pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1))
(pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) c2), (pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2))
(pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2)), (pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2))
(pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2)), (pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2))
(pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1))
(pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1))
(pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1)), (pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1))
(pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1)), (pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1))
(pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c2))
(pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2))
(pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c2))
(pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1)), (pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2))
(pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c2))
(pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1)), (pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1)), (pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) Leaf)
(pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1))
(pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1)), (pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2)), (pow2heapp n0 (length p) (Node n0 c1 a1)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1))
(pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1)), (pow2heapp n0 (length p) (Node n1 a1 a2)), (pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2)), (pow2heapp n0 (length p) (Node n1 c2 a1))
(pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1)), (pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1))
(pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c1 a2)), (pow2heapp n0 (length p) (Node n c1 a1))
(pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1))
(pow2heapp n0 (length p) (smash c2 a2)), (pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1)), (pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n1 n0 (Node n0 a2 a2))
(pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 c2)), (pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1)), (pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 c2))
(pow2heapp n1 n0 (Node n0 c2 c1)), (pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1)), (pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1)), (pow2heapp n1 n0 (Node n1 a1 a2))
(pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 c2)), (pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1)), (pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 c2))
(pow2heapp n1 n0 (Node n1 c1 c1)), (pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1)), (pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 c2)), (pow2heapp n1 n0 (Node n a1 c1)), (pow2heapp n1 n0 (Node n c2 a2))
(pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1)), (pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1)), (pow2heapp n1 n0 (Node n c1 c2)), (pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 c2))
(pow2heapp n1 n0 (smash a2 c1)), (pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1)), (pow2heapp n1 n0 (smash c2 c2)), (pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c1 a2))
(pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1)), (pow2heapp n1 n0 Leaf), (pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1))
(pow2heapp n1 n1 (Node n0 a1 c2)), (pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 c2)), (pow2heapp n1 n1 (Node n0 c2 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1))
(pow2heapp n1 n1 (Node n1 a2 a2)), (pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 c2)), (pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1))
(pow2heapp n1 n1 (Node n1 c2 c2)), (pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 c2)), (pow2heapp n1 n1 (Node n1 c1 c1)), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 c2)), (pow2heapp n1 n1 (Node n a2 c1))
(pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 c2)), (pow2heapp n1 n1 (Node n a1 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 c2)), (pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c1 a2)), (pow2heapp n1 n1 (Node n c1 a1))
(pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1)), (pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 c2)), (pow2heapp n1 n1 (smash a2 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1))
(pow2heapp n1 n1 (smash c2 a2)), (pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 c2)), (pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 n (Node n0 a2 a2))
(pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 c2 a2)), (pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 c2))
(pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 c2)), (pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a1 a2))
(pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c1 a2)), (pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 c2))
(pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a1 a2)), (pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n c2 a2))
(pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 c2)), (pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (smash a2 a2)), (pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 c2))
(pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 c2)), (pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c1 a2))
(pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n Leaf), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp n1 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1))
(pow2heapp n1 (find_max' n0 p) (smash a1 a2)), (pow2heapp n1 (find_max' n0 p) (smash a1 a1)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1)), (pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2)), (pow2heapp n1 (find_max' n0 p) (smash c1 a1))
(pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n1 p) a2), (pow2heapp n1 (find_max' n1 p) a1), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2))
(pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2))
(pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2))
(pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2)), (pow2heapp n1 (find_max' n1 p) (smash a2 a1)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2))
(pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2)), (pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2))
(pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' n p) a2), (pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1), (pow2heapp n1 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1))
(pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1))
(pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 c2)), (pow2heapp n1 (find_max' n p) (Node n a1 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1))
(pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1)), (pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 c2)), (pow2heapp n1 (find_max' n p) (smash a2 c1)), (pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1))
(pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2)), (pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1))
(pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (length p) a2), (pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) (Node n0 a2 a2)), (pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 c2)), (pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2))
(pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 c2)), (pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 c2)), (pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 c2))
(pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 c2)), (pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2)), (pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 c2)), (pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2))
(pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 c2)), (pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 c2)), (pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 c2))
(pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 c2)), (pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 c2)), (pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c1 a2))
(pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 c2)), (pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 c2)), (pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 c2))
(pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 c2)), (pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c1 a2)), (pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 c2)), (pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) Leaf)
(pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1))
(pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1)), (pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1))
(pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1)), (pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1))
(pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1))
(pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1)), (pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1))
(pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1)), (pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1))
(pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1)), (pow2heapp n n0 Leaf), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a1 a2))
(pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c1 a2)), (pow2heapp n n1 (Node n0 c1 a1)), (pow2heapp n n1 (Node n0 c1 c2))
(pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n1 a2 a2)), (pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 c2 a2))
(pow2heapp n n1 (Node n1 c2 a1)), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node n a2 a2)), (pow2heapp n n1 (Node n a2 a1)), (pow2heapp n n1 (Node n a2 c2))
(pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n c2 a2)), (pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 c2)), (pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c1 a2))
(pow2heapp n n1 (Node n c1 a1)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a1 a2)), (pow2heapp n n1 (smash a1 a1)), (pow2heapp n n1 (smash a1 c2))
(pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c1 a2)), (pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 Leaf)
(pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 c2)), (pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1))
(pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c1 a2)), (pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 c2)), (pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n1 a2 a2)), (pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 c2)), (pow2heapp n n (Node n1 a2 c1))
(pow2heapp n n (Node n1 a1 a2)), (pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 c2 a2)), (pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 c2)), (pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1))
(pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 c2)), (pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1))
(pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 c2)), (pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c1 a2)), (pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1))
(pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 c2)), (pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash c2 a2)), (pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1))
(pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 c2)), (pow2heapp n n (smash c1 c1)), (pow2heapp n n Leaf), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2))
(pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2))
(pow2heapp n (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n c2 a2))
(pow2heapp n (find_max' n0 p) (Node n c2 a1)), (pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a2 c2))
(pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1)), (pow2heapp n (find_max' n0 p) (smash c1 a2))
(pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) c2), (pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2)), (pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 c2)), (pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1))
(pow2heapp n (find_max' n1 p) (Node n c2 c2)), (pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 c2)), (pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2)), (pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 c2)), (pow2heapp n (find_max' n1 p) (smash a2 c1))
(pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 c2)), (pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1))
(pow2heapp n (find_max' n1 p) (smash c1 c2)), (pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c2))
(pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2)), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2)), (pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2))
(pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2)), (pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 c2)), (pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 c2))
(pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2)), (pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2)), (pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node n a2 a2))
(pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2)), (pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 c2))
(pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 c2)), (pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a1 a2))
(pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 c2)), (pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c1 a2)), (pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 c2))
(pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1))
(pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 c2 a2)), (pow2heapp n (length p) (Node n0 c2 a1)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1))
(pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1)), (pow2heapp n (length p) (Node n1 a2 c2)), (pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1))
(pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c1 a2)), (pow2heapp n (length p) (Node n1 c1 a1)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1))
(pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1))
(pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 c2)), (pow2heapp n (length p) (Node n c1 c1)), (pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1))
(pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 c2)), (pow2heapp n (length p) (smash c2 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1))
(pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2))
(pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2))
(pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2)), (pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2)), (pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 Leaf)
(pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1), (pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1)), (pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1))
(pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1)), (pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1)), (pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) n a2)
(pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n c2), (pow2heapp (find_max' n0 p) n c1), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a1 a2))
(pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 c2)), (pow2heapp (find_max' n0 p) n (Node n a1 c1)), (pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 c2)), (pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 c2))
(pow2heapp (find_max' n0 p) n (Node n c1 c1)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 c2)), (pow2heapp (find_max' n0 p) n (smash a2 c1)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash c2 a2))
(pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1)), (pow2heapp (find_max' n0 p) n (smash c1 c2)), (pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1)
(pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1), (pow2heapp (find_max' n0 p) (find_max' n1 p) c2)
(pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1)
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2))
(pow2heapp (find_max' n0 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1), (pow2heapp (find_max' n1 p) n0 c2), (pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1))
(pow2heapp (find_max' n1 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 c2)), (pow2heapp (find_max' n1 p) n0 (smash a2 c1))
(pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1))
(pow2heapp (find_max' n1 p) n0 (smash c1 c2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2))
(pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2))
(pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2))
(pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 c2)), (pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2)), (pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2))
(pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 Leaf), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1))
(pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1))
(pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1))
(pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1))
(pow2heapp (find_max' n1 p) n (Node n a2 c2)), (pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1))
(pow2heapp (find_max' n1 p) n (Node n c1 a2)), (pow2heapp (find_max' n1 p) n (Node n c1 a1)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1))
(pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2)), (pow2heapp (find_max' n1 p) n (smash c2 a1)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1))
(pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1), (pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf)
(pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) a2)
(pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) c2), (pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1)
(pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1))
(pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1))
(pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1))
(pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a1))
(pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 c2)
(pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2))
(pow2heapp (find_max' n p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2))
(pow2heapp (find_max' n p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c2)), (pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c2))
(pow2heapp (find_max' n p) n0 (Node n a1 c1)), (pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1)), (pow2heapp (find_max' n p) n0 (Node n c2 c2)), (pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2))
(pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c2)), (pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 c2))
(pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1)), (pow2heapp (find_max' n p) n0 (smash c1 c2)), (pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1)
(pow2heapp (find_max' n p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1))
(pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1))
(pow2heapp (find_max' n p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1))
(pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n a2 a2)), (pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 c2)), (pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1))
(pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c1 a2)), (pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1)), (pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1))
(pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2)), (pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash c2 a2)), (pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1))
(pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 Leaf), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n (Node n0 a2 a2))
(pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c2)), (pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 c2))
(pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1)), (pow2heapp (find_max' n p) n (Node n1 a2 a2)), (pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2))
(pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 c2)), (pow2heapp (find_max' n p) n (Node n1 c2 c1)), (pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 c2))
(pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 c2)), (pow2heapp (find_max' n p) n (Node n a2 c1)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n c2 a2))
(pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2)), (pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 c2))
(pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1)), (pow2heapp (find_max' n p) n (smash c2 a2)), (pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1)), (pow2heapp (find_max' n p) n (smash c1 a2))
(pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) c2), (pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2))
(pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c2))
(pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2)), (pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 c2)), (pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) Leaf)
(pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1)), (pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1))
(pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1)), (pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1))
(pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1)), (pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1))
(pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1)), (pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1))
(pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1)), (pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1))
(pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1))
(pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1)), (pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1)), (pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n1 a2)
(pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 c2), (pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 c2))
(pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 c2)), (pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2))
(pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 c2)), (pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 c2))
(pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 c2)), (pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 c2)), (pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a1 a2))
(pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 c2)), (pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 c2)), (pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c1 a2)), (pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 c2))
(pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 c2)), (pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash c2 a2))
(pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 c2)), (pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1)
(pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 c2)), (pow2heapp (length p) n (Node n0 a1 c1))
(pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c1 a2)), (pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n1 a2 a2)), (pow2heapp (length p) n (Node n1 a2 a1))
(pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 c2 a2)), (pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 c2)), (pow2heapp (length p) n (Node n1 c2 c1))
(pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 c2)), (pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1))
(pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n c2 a2)), (pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c1 a2)), (pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1))
(pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash c2 a2)), (pow2heapp (length p) n (smash c2 a1))
(pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c1 a2)), (pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) c2)
(pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2))
(pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2))
(pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1)
(pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1))
(pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) Leaf), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c2))
(pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2))
(pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c2))
(pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n c2 a2))
(pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 c2))
(pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2)), (pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1)), (pow2heapp (length p) (find_max' n p) (smash c1 a2))
(pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) c2), (pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1))
(pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c2)), (pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1)), (pow2heapp (length p) (length p) (Node n0 c2 c2)), (pow2heapp (length p) (length p) (Node n0 c2 c1))
(pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2)), (pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 c2)), (pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1))
(pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 c2)), (pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1)), (pow2heapp (length p) (length p) (Node n1 c1 c2)), (pow2heapp (length p) (length p) (Node n1 c1 c1))
(pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 c2)), (pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (Node n a1 c2)), (pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1))
(pow2heapp (length p) (length p) (Node n c2 c2)), (pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c1 a2)), (pow2heapp (length p) (length p) (Node n c1 a1)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a2 c2)), (pow2heapp (length p) (length p) (smash a2 c1))
(pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash c2 a2)), (pow2heapp (length p) (length p) (smash c2 a1)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1))
(pow2heapp (length p) (length p) (smash c1 c2)), (pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1))
(Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p c2)), (Permutation p (join p p c1)), (Permutation p (insert n0 p)), (Permutation p (insert n1 p)), (Permutation p (insert n p)), (Permutation p (carry p a2))
(Permutation p (carry p a1)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a2 :: p) p), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (merge p p))
(Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n1 p))
(Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p c2)), (Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (a2 :: p)), (Permutation (a1 :: p) (c2 :: p))
(Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1))
(Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n1 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (c2 :: p) p)
(Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p)), (Permutation (c2 :: p) (c1 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1))
(Permutation (c2 :: p) (join p p c2)), (Permutation (c2 :: p) (join p p c1)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (carry p a2)), (Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1)), (Permutation (c2 :: p) (p ++ p))
(Permutation (c2 :: p) []), (Permutation (c1 :: p) p), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (merge p p)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1)), (Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1))
(Permutation (c1 :: p) (join p p a2)), (Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n1 p)), (Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p c2))
(Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (c2 :: p)), (Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1))
(Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p c2)), (Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p a2))
(Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (c2 :: p)), (Permutation (heap_delete_max a2) (c1 :: p))
(Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n1 p))
(Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p))
(Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max c2)), (Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1))
(Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max c2) p)
(Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max a2)), (Permutation (heap_delete_max c2) (heap_delete_max a1)), (Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1))
(Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n1 p)), (Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (carry p a2)), (Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (p ++ p))
(Permutation (heap_delete_max c2) []), (Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (a2 :: p)), (Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p)), (Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1)), (Permutation (heap_delete_max c1) (heap_delete_max c2))
(Permutation (heap_delete_max c1) (join p p a2)), (Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (insert n0 p)), (Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p c2))
(Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max a2))
(Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p c2)), (Permutation (join p p a2) (join p p c1)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p a2))
(Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p))
(Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max c2)), (Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n1 p))
(Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p))
(Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (merge p p)), (Permutation (join p p c2) (heap_delete_max a2)), (Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p c1))
(Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n1 p)), (Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) []), (Permutation (join p p c1) p)
(Permutation (join p p c1) (a2 :: p)), (Permutation (join p p c1) (a1 :: p)), (Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max a2)), (Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1)), (Permutation (join p p c1) (join p p a2))
(Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p c2)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p c2)), (Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (p ++ p))
(Permutation (join p p c1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max a2)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max c2))
(Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p c2)), (Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p c2))
(Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) []), (Permutation (insert n1 p) p), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (c2 :: p)), (Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max a2))
(Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (carry p a2))
(Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) []), (Permutation (insert n p) p), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p))
(Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1)), (Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1)), (Permutation (insert n p) (insert n0 p))
(Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p c2)), (Permutation (insert n p) (carry p c1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p))
(Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (join p p c2))
(Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) []), (Permutation (carry p a1) p)
(Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1)), (Permutation (carry p a1) (join p p a2))
(Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (p ++ p))
(Permutation (carry p a1) []), (Permutation (carry p c2) p), (Permutation (carry p c2) (a2 :: p)), (Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max c2))
(Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1)), (Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n1 p)), (Permutation (carry p c2) (insert n p)), (Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1))
(Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (p ++ p)), (Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (c2 :: p)), (Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max a2))
(Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max c2)), (Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1)), (Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert n p))
(Permutation (carry p c1) (carry p a2)), (Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p c2)), (Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p))
(Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max c2)), (Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n1 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p))
(Permutation [] (c2 :: p)), (Permutation [] (c1 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p c2))
(Permutation [] (join p p c1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n1 p)), (Permutation [] (insert n p)), (Permutation [] (carry p a2)), (Permutation [] (carry p a1)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1)), (Permutation [] (p ++ p)), (In a2 (a2 :: p))
(In a2 (a1 :: p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (merge p p)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (join p p a2)), (In a2 (join p p a1))
(In a2 (join p p c2)), (In a2 (join p p c1)), (In a2 (insert n0 p)), (In a2 (insert n1 p)), (In a2 (insert n p)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p c2)), (In a2 (carry p c1)), (In a2 (p ++ p))
(In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (c2 :: p)), (In a1 (c1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max c2)), (In a1 (heap_delete_max c1)), (In a1 (join p p a2))
(In a1 (join p p a1)), (In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (insert n0 p)), (In a1 (insert n1 p)), (In a1 (insert n p)), (In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (carry p c2)), (In a1 (carry p c1))
(In a1 (p ++ p)), (In c2 (a2 :: p)), (In c2 (a1 :: p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (merge p p)), (In c2 (heap_delete_max a2)), (In c2 (heap_delete_max a1)), (In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1))
(In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (insert n0 p)), (In c2 (insert n1 p)), (In c2 (insert n p)), (In c2 (carry p a2)), (In c2 (carry p a1)), (In c2 (carry p c2))
(In c2 (carry p c1)), (In c2 (p ++ p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (c2 :: p)), (In c1 (c1 :: p)), (In c1 (merge p p)), (In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max c2))
(In c1 (heap_delete_max c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p c2)), (In c1 (join p p c1)), (In c1 (insert n0 p)), (In c1 (insert n1 p)), (In c1 (insert n p)), (In c1 (carry p a2)), (In c1 (carry p a1))
(In c1 (carry p c2)), (In c1 (carry p c1)), (In c1 (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (c2 :: p)), (In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max a2))
(In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max c2)), (In (Node n0 a2 a2) (heap_delete_max c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1)), (In (Node n0 a2 a2) (insert n0 p)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert n p))
(In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (c2 :: p)), (In (Node n0 a2 a1) (c1 :: p))
(In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p c2)), (In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (insert n0 p))
(In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p a2)), (In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p c2)), (In (Node n0 a2 a1) (carry p c1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 c2) p), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p))
(In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1)), (In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (join p p a2)), (In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p c2))
(In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p c2)), (In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p)
(In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p)), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p)), (In (Node n0 a2 c1) (merge p p)), (In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (join p p a2))
(In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1)), (In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert n p)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1))
(In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a1 a2) p), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max c2))
(In (Node n0 a1 a2) (heap_delete_max c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1))
(In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (c2 :: p)), (In (Node n0 a1 a1) (c1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max a2))
(In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max c2)), (In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p c2)), (In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert n p))
(In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 c2) p), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p)), (In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p))
(In (Node n0 a1 c2) (merge p p)), (In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (join p p a2)), (In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (insert n0 p))
(In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p c2)), (In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p))
(In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (merge p p)), (In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (join p p a2)), (In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p c2))
(In (Node n0 a1 c1) (join p p c1)), (In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (p ++ p)), (In (Node n0 c2 a2) p)
(In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max c2)), (In (Node n0 c2 a2) (heap_delete_max c1)), (In (Node n0 c2 a2) (join p p a2))
(In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (insert n0 p)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (carry p a2)), (In (Node n0 c2 a2) (carry p a1)), (In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1))
(In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (c2 :: p)), (In (Node n0 c2 a1) (c1 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max a2)), (In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max c2))
(In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p c2)), (In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n1 p)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (carry p a2)), (In (Node n0 c2 a1) (carry p a1))
(In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1)), (In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 c2) p), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p)), (In (Node n0 c2 c2) (c2 :: p)), (In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max a2))
(In (Node n0 c2 c2) (heap_delete_max a1)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (join p p a2)), (In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert n p))
(In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p c2)), (In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p), (In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p)), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p))
(In (Node n0 c2 c1) (merge p p)), (In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (join p p a2)), (In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1)), (In (Node n0 c2 c1) (insert n0 p))
(In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p c2)), (In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c1 a2) p), (In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p))
(In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1)), (In (Node n0 c1 a2) (heap_delete_max c2)), (In (Node n0 c1 a2) (heap_delete_max c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p c2))
(In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (insert n0 p)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (carry p a2)), (In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p)
(In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (c2 :: p)), (In (Node n0 c1 a1) (c1 :: p)), (In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (join p p a2))
(In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p c2)), (In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert n p)), (In (Node n0 c1 a1) (carry p a2)), (In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1))
(In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 c2) p), (In (Node n0 c1 c2) (a2 :: p)), (In (Node n0 c1 c2) (a1 :: p)), (In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1)), (In (Node n0 c1 c2) (heap_delete_max c2))
(In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (join p p a2)), (In (Node n0 c1 c2) (join p p a1)), (In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1))
(In (Node n0 c1 c2) (carry p c2)), (In (Node n0 c1 c2) (carry p c1)), (In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p)), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (merge p p)), (In (Node n0 c1 c1) (heap_delete_max a2))
(In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max c2)), (In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (join p p a2)), (In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1)), (In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert n p))
(In (Node n0 c1 c1) (carry p a2)), (In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (p ++ p)), (In (Node n1 a2 a2) p), (In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p))
(In (Node n1 a2 a2) (merge p p)), (In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max c2)), (In (Node n1 a2 a2) (heap_delete_max c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (insert n0 p))
(In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (carry p a2)), (In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p))
(In (Node n1 a2 a1) (c2 :: p)), (In (Node n1 a2 a1) (c1 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p c2))
(In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (carry p a2)), (In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1)), (In (Node n1 a2 a1) (p ++ p)), (In (Node n1 a2 c2) p)
(In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p)), (In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1)), (In (Node n1 a2 c2) (join p p a2))
(In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1)), (In (Node n1 a2 c2) (carry p c2)), (In (Node n1 a2 c2) (carry p c1))
(In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p)), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (merge p p)), (In (Node n1 a2 c1) (heap_delete_max a2)), (In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max c2))
(In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (join p p a2)), (In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1)), (In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n1 p)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1))
(In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a1 a2) p), (In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (c2 :: p)), (In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max a2))
(In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max c2)), (In (Node n1 a1 a2) (heap_delete_max c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1)), (In (Node n1 a1 a2) (insert n0 p)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert n p))
(In (Node n1 a1 a2) (carry p a2)), (In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p), (In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (c2 :: p)), (In (Node n1 a1 a1) (c1 :: p))
(In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (join p p a2)), (In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p c2)), (In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (insert n0 p))
(In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (carry p a2)), (In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p c2)), (In (Node n1 a1 a1) (carry p c1)), (In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 c2) p), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p))
(In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1)), (In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (join p p a2)), (In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p c2))
(In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p c2)), (In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p)
(In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p)), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p)), (In (Node n1 a1 c1) (merge p p)), (In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (join p p a2))
(In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1)), (In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert n p)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1))
(In (Node n1 a1 c1) (p ++ p)), (In (Node n1 c2 a2) p), (In (Node n1 c2 a2) (a2 :: p)), (In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max c2))
(In (Node n1 c2 a2) (heap_delete_max c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1)), (In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (insert n0 p)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (carry p a2)), (In (Node n1 c2 a2) (carry p a1))
(In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1)), (In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (c2 :: p)), (In (Node n1 c2 a1) (c1 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max a2))
(In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max c2)), (In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p c2)), (In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert n p))
(In (Node n1 c2 a1) (carry p a2)), (In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1)), (In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 c2) p), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p)), (In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p))
(In (Node n1 c2 c2) (merge p p)), (In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (join p p a2)), (In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (insert n0 p))
(In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p c2)), (In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p))
(In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (merge p p)), (In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (join p p a2)), (In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p c2))
(In (Node n1 c2 c1) (join p p c1)), (In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (p ++ p)), (In (Node n1 c1 a2) p)
(In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max c2)), (In (Node n1 c1 a2) (heap_delete_max c1)), (In (Node n1 c1 a2) (join p p a2))
(In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (insert n0 p)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (carry p a2)), (In (Node n1 c1 a2) (carry p a1)), (In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1))
(In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (c2 :: p)), (In (Node n1 c1 a1) (c1 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max a2)), (In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max c2))
(In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p c2)), (In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n1 p)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (carry p a2)), (In (Node n1 c1 a1) (carry p a1))
(In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1)), (In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 c2) p), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p)), (In (Node n1 c1 c2) (c2 :: p)), (In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max a2))
(In (Node n1 c1 c2) (heap_delete_max a1)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (join p p a2)), (In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert n p))
(In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p c2)), (In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p), (In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p)), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p))
(In (Node n1 c1 c1) (merge p p)), (In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (join p p a2)), (In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1)), (In (Node n1 c1 c1) (insert n0 p))
(In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p c2)), (In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p))
(In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max c2)), (In (Node n a2 a2) (heap_delete_max c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p c2))
(In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p)
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (c2 :: p)), (In (Node n a2 a1) (c1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max c2)), (In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (join p p a2))
(In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p c2)), (In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1))
(In (Node n a2 a1) (p ++ p)), (In (Node n a2 c2) p), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p)), (In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (merge p p)), (In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1)), (In (Node n a2 c2) (heap_delete_max c2))
(In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (join p p a2)), (In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (insert n0 p)), (In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1))
(In (Node n a2 c2) (carry p c2)), (In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p)), (In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (merge p p)), (In (Node n a2 c1) (heap_delete_max a2))
(In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (join p p a2)), (In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p c2)), (In (Node n a2 c1) (join p p c1)), (In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert n p))
(In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p))
(In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max c2)), (In (Node n a1 a2) (heap_delete_max c1)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (insert n0 p))
(In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p))
(In (Node n a1 a1) (c2 :: p)), (In (Node n a1 a1) (c1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p c2))
(In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n1 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 c2) p)
(In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p)), (In (Node n a1 c2) (c2 :: p)), (In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (join p p a2))
(In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p c2)), (In (Node n a1 c2) (carry p c1))
(In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p), (In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p)), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (merge p p)), (In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max c2))
(In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (join p p a2)), (In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1)), (In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1))
(In (Node n a1 c1) (carry p c2)), (In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (p ++ p)), (In (Node n c2 a2) p), (In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max a2))
(In (Node n c2 a2) (heap_delete_max a1)), (In (Node n c2 a2) (heap_delete_max c2)), (In (Node n c2 a2) (heap_delete_max c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (insert n0 p)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert n p))
(In (Node n c2 a2) (carry p a2)), (In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (c2 :: p)), (In (Node n c2 a1) (c1 :: p))
(In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p c2)), (In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (insert n0 p))
(In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert n p)), (In (Node n c2 a1) (carry p a2)), (In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1)), (In (Node n c2 a1) (p ++ p)), (In (Node n c2 c2) p), (In (Node n c2 c2) (a2 :: p)), (In (Node n c2 c2) (a1 :: p))
(In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (join p p a2)), (In (Node n c2 c2) (join p p a1)), (In (Node n c2 c2) (join p p c2))
(In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p c2)), (In (Node n c2 c2) (carry p c1)), (In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p)
(In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p)), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (merge p p)), (In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max c2)), (In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (join p p a2))
(In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1)), (In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (carry p a2)), (In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1))
(In (Node n c2 c1) (p ++ p)), (In (Node n c1 a2) p), (In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (merge p p)), (In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max c2))
(In (Node n c1 a2) (heap_delete_max c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (insert n0 p)), (In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (carry p a2)), (In (Node n c1 a2) (carry p a1))
(In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p)), (In (Node n c1 a1) (c2 :: p)), (In (Node n c1 a1) (c1 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max a2))
(In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p c2)), (In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert n p))
(In (Node n c1 a1) (carry p a2)), (In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1)), (In (Node n c1 a1) (p ++ p)), (In (Node n c1 c2) p), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p)), (In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p))
(In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1)), (In (Node n c1 c2) (join p p a2)), (In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (insert n0 p))
(In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1)), (In (Node n c1 c2) (carry p c2)), (In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p))
(In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (merge p p)), (In (Node n c1 c1) (heap_delete_max a2)), (In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (join p p a2)), (In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p c2))
(In (Node n c1 c1) (join p p c1)), (In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n1 p)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (p ++ p)), (In (smash a2 a2) p)
(In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max c2)), (In (smash a2 a2) (heap_delete_max c1)), (In (smash a2 a2) (join p p a2))
(In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1))
(In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (c2 :: p)), (In (smash a2 a1) (c1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max c2))
(In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p c2)), (In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n1 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1))
(In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1)), (In (smash a2 a1) (p ++ p)), (In (smash a2 c2) p), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p)), (In (smash a2 c2) (c2 :: p)), (In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max a2))
(In (smash a2 c2) (heap_delete_max a1)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (join p p a2)), (In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert n p))
(In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p c2)), (In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p), (In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p)), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p))
(In (smash a2 c1) (merge p p)), (In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (join p p a2)), (In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1)), (In (smash a2 c1) (insert n0 p))
(In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p c2)), (In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p))
(In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max c2)), (In (smash a1 a2) (heap_delete_max c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p c2))
(In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p)
(In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (c2 :: p)), (In (smash a1 a1) (c1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (join p p a2))
(In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p c2)), (In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1))
(In (smash a1 a1) (p ++ p)), (In (smash a1 c2) p), (In (smash a1 c2) (a2 :: p)), (In (smash a1 c2) (a1 :: p)), (In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1)), (In (smash a1 c2) (heap_delete_max c2))
(In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (join p p a2)), (In (smash a1 c2) (join p p a1)), (In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1))
(In (smash a1 c2) (carry p c2)), (In (smash a1 c2) (carry p c1)), (In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p)), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (merge p p)), (In (smash a1 c1) (heap_delete_max a2))
(In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max c2)), (In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (join p p a2)), (In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1)), (In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert n p))
(In (smash a1 c1) (carry p a2)), (In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (p ++ p)), (In (smash c2 a2) p), (In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p))
(In (smash c2 a2) (merge p p)), (In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max c2)), (In (smash c2 a2) (heap_delete_max c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (insert n0 p))
(In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert n p)), (In (smash c2 a2) (carry p a2)), (In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p))
(In (smash c2 a1) (c2 :: p)), (In (smash c2 a1) (c1 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p c2))
(In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (carry p a2)), (In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1)), (In (smash c2 a1) (p ++ p)), (In (smash c2 c2) p)
(In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p)), (In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1)), (In (smash c2 c2) (join p p a2))
(In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1)), (In (smash c2 c2) (carry p c2)), (In (smash c2 c2) (carry p c1))
(In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p)), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (merge p p)), (In (smash c2 c1) (heap_delete_max a2)), (In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max c2))
(In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (join p p a2)), (In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1)), (In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n1 p)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1))
(In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (p ++ p)), (In (smash c1 a2) p), (In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (c2 :: p)), (In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max a2))
(In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max c2)), (In (smash c1 a2) (heap_delete_max c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1)), (In (smash c1 a2) (insert n0 p)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert n p))
(In (smash c1 a2) (carry p a2)), (In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p), (In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (c2 :: p)), (In (smash c1 a1) (c1 :: p))
(In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (join p p a2)), (In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p c2)), (In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (insert n0 p))
(In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (carry p a2)), (In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p c2)), (In (smash c1 a1) (carry p c1)), (In (smash c1 a1) (p ++ p)), (In (smash c1 c2) p), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p))
(In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1)), (In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (join p p a2)), (In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p c2))
(In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p c2)), (In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p)
(In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p)), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p)), (In (smash c1 c1) (merge p p)), (In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (join p p a2))
(In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1)), (In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert n p)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1))
(In (smash c1 c1) (p ++ p)), (In Leaf p), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max c2))
(In Leaf (heap_delete_max c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1)), (In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (insert n0 p)), (In Leaf (insert n1 p)), (In Leaf (insert n p)), (In Leaf (carry p a2)), (In Leaf (carry p a1))
(In Leaf (carry p c2)), (In Leaf (carry p c1)), (In Leaf (p ++ p)), (n0 < find_max' n0 p), (n0 < find_max' n1 p), (n0 < find_max' n p), (n0 < length p), (n1 < find_max' n0 p), (n1 < find_max' n1 p), (n1 < find_max' n p)
(n1 < length p), (n < find_max' n0 p), (n < find_max' n1 p), (n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n1), (find_max' n0 p < n), (find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' n p)
(find_max' n0 p < length p), (find_max' n1 p < n0), (find_max' n1 p < n1), (find_max' n1 p < n), (find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' n p), (find_max' n1 p < length p), (find_max' n p < n0), (find_max' n p < n1), (find_max' n p < n)
(find_max' n p < find_max' n0 p), (find_max' n p < find_max' n1 p), (find_max' n p < length p), (length p < n0), (length p < n1), (length p < n), (length p < find_max' n0 p), (length p < find_max' n1 p), (length p < find_max' n p), (n0 <= find_max' n0 p)
(n0 <= find_max' n1 p), (n0 <= find_max' n p), (n0 <= length p), (n1 <= find_max' n0 p), (n1 <= find_max' n1 p), (n1 <= find_max' n p), (n1 <= length p), (n <= find_max' n0 p), (n <= find_max' n1 p), (n <= find_max' n p)
(n <= length p), (find_max' n0 p <= n0), (find_max' n0 p <= n1), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n1 p <= n0), (find_max' n1 p <= n1), (find_max' n1 p <= n)
(find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= length p), (find_max' n p <= n0), (find_max' n p <= n1), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n1 p), (find_max' n p <= length p), (length p <= n0)
(length p <= n1), (length p <= n), (length p <= find_max' n0 p), (length p <= find_max' n1 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n1 p), (~ priqq n p), (~ pow2heap n0 a2)
(~ pow2heap n0 a1), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 c2), (~ pow2heap n1 c1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n c2)
(~ pow2heap n c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n0 c2), (~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1), (~ pow2heapp n0 n a2)
(~ pow2heapp n0 n a1), (~ pow2heapp n0 n c2), (~ pow2heapp n0 n c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1), (~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1), (~ pow2heapp n1 n1 c2)
(~ pow2heapp n1 n1 c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 c2), (~ pow2heapp n n0 c1), (~ pow2heapp n n1 a2)
(~ pow2heapp n n1 a1), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n c2), (~ pow2heapp n n c1), (~ Permutation p p), (~ In a2 p), (~ In a1 p)
(~ In c2 p), (~ In c1 p), (~ n0 < n0), (~ n0 < n1), (~ n0 < n), (~ n1 < n0), (~ n1 < n1), (~ n1 < n), (~ n < n0), (~ n < n1)
(~ n < n), (~ n0 <= n0), (~ n0 <= n1), (~ n0 <= n), (~ n1 <= n0), (~ n1 <= n1), (~ n1 <= n), (~ n <= n0), (~ n <= n1), (~ n <= n)
(p <> p), (a2 <> a2), (a2 <> a1), (a2 <> c2), (a2 <> c1), (a1 <> a2), (a1 <> a1), (a1 <> c2), (a1 <> c1), (c2 <> a2)
(c2 <> a1), (c2 <> c2), (c2 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> c2), (c1 <> c1), (n0 <> n0), (n0 <> n1), (n0 <> n)
(n1 <> n0), (n1 <> n1), (n1 <> n), (n <> n0), (n <> n1), (n <> n), (None = Some p), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = insert n0 p), (a2 :: p = insert n1 p), (a2 :: p = insert n p)
(a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p c2), (a2 :: p = carry p c1), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1)
(a1 :: p = heap_delete_max c2), (a1 :: p = heap_delete_max c1), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = insert n0 p), (a1 :: p = insert n1 p), (a1 :: p = insert n p), (a1 :: p = carry p a2)
(a1 :: p = carry p a1), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = p ++ p), (a1 :: p = []), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max a2), (c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max c2)
(c2 :: p = heap_delete_max c1), (c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p c2), (c2 :: p = join p p c1), (c2 :: p = insert n0 p), (c2 :: p = insert n1 p), (c2 :: p = insert n p), (c2 :: p = carry p a2), (c2 :: p = carry p a1)
(c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p), (c1 :: p = merge p p), (c1 :: p = heap_delete_max a2), (c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1)
(c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p c2), (c1 :: p = join p p c1), (c1 :: p = insert n0 p), (c1 :: p = insert n1 p), (c1 :: p = insert n p), (c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p c2)
(c1 :: p = carry p c1), (c1 :: p = p ++ p), (c1 :: p = []), (merge p p = p), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = join p p a2), (merge p p = join p p a1)
(merge p p = join p p c2), (merge p p = join p p c1), (merge p p = insert n0 p), (merge p p = insert n1 p), (merge p p = insert n p), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p c2), (merge p p = carry p c1), (merge p p = p ++ p)
(heap_delete_max a2 = p), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p c2)
(heap_delete_max a1 = carry p c1), (heap_delete_max a1 = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1), (heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p), (heap_delete_max c1 = carry p a2)
(heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p c2), (heap_delete_max c1 = carry p c1), (heap_delete_max c1 = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = insert n0 p)
(join p p a2 = insert n1 p), (join p p a2 = insert n p), (join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = carry p c2), (join p p a2 = carry p c1), (join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1)
(join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = insert n0 p), (join p p a1 = insert n1 p), (join p p a1 = insert n p), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = p ++ p)
(join p p c2 = p), (join p p c2 = heap_delete_max a2), (join p p c2 = heap_delete_max a1), (join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = insert n0 p), (join p p c2 = insert n1 p), (join p p c2 = insert n p), (join p p c2 = carry p a2), (join p p c2 = carry p a1)
(join p p c2 = carry p c2), (join p p c2 = carry p c1), (join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = insert n0 p), (join p p c1 = insert n1 p)
(join p p c1 = insert n p), (join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p c2), (join p p c1 = carry p c1), (join p p c1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max c2)
(insert n0 p = heap_delete_max c1), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p c2), (insert n0 p = carry p c1), (insert n0 p = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max c2)
(insert n1 p = heap_delete_max c1), (insert n1 p = carry p a2), (insert n1 p = carry p a1), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = heap_delete_max c2)
(insert n p = heap_delete_max c1), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p)
(carry p c2 = p), (carry p c2 = p ++ p), (carry p c1 = p), (carry p c1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max c2)
([] = heap_delete_max c1), ([] = join p p a2), ([] = join p p a1), ([] = join p p c2), ([] = join p p c1), ([] = insert n0 p), ([] = insert n1 p), ([] = insert n p), ([] = carry p a2), ([] = carry p a1)
([] = carry p c2), ([] = carry p c1), ([] = p ++ p), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n1 p), ((p, p) = delete_max_aux n p), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = c2), (Node n0 a2 a2 = c1)
(Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash c2 a2), (Node n0 a2 a2 = smash c2 a1)
(Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = c2), (Node n0 a2 a1 = c1)
(Node n0 a2 a1 = smash a2 a2), (Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash c2 a2), (Node n0 a2 a1 = smash c2 a1)
(Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = c2), (Node n0 a2 c2 = c1)
(Node n0 a2 c2 = smash a2 a2), (Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash c2 a2), (Node n0 a2 c2 = smash c2 a1)
(Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = c2), (Node n0 a2 c1 = c1)
(Node n0 a2 c1 = smash a2 a2), (Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash c2 a2), (Node n0 a2 c1 = smash c2 a1)
(Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = c2), (Node n0 a1 a2 = c1)
(Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash c2 a2), (Node n0 a1 a2 = smash c2 a1)
(Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = c2), (Node n0 a1 a1 = c1)
(Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash c2 a2), (Node n0 a1 a1 = smash c2 a1)
(Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = c2), (Node n0 a1 c2 = c1)
(Node n0 a1 c2 = smash a2 a2), (Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash c2 a2), (Node n0 a1 c2 = smash c2 a1)
(Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = c2), (Node n0 a1 c1 = c1)
(Node n0 a1 c1 = smash a2 a2), (Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash c2 a2), (Node n0 a1 c1 = smash c2 a1)
(Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = c2), (Node n0 c2 a2 = c1)
(Node n0 c2 a2 = smash a2 a2), (Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash c2 a2), (Node n0 c2 a2 = smash c2 a1)
(Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = c2), (Node n0 c2 a1 = c1)
(Node n0 c2 a1 = smash a2 a2), (Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash c2 a2), (Node n0 c2 a1 = smash c2 a1)
(Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = c2), (Node n0 c2 c2 = c1)
(Node n0 c2 c2 = smash a2 a2), (Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash c2 a2), (Node n0 c2 c2 = smash c2 a1)
(Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = c2), (Node n0 c2 c1 = c1)
(Node n0 c2 c1 = smash a2 a2), (Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash c2 a2), (Node n0 c2 c1 = smash c2 a1)
(Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = c2), (Node n0 c1 a2 = c1)
(Node n0 c1 a2 = smash a2 a2), (Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash c2 a2), (Node n0 c1 a2 = smash c2 a1)
(Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = c2), (Node n0 c1 a1 = c1)
(Node n0 c1 a1 = smash a2 a2), (Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash c2 a2), (Node n0 c1 a1 = smash c2 a1)
(Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = c2), (Node n0 c1 c2 = c1)
(Node n0 c1 c2 = smash a2 a2), (Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash c2 a2), (Node n0 c1 c2 = smash c2 a1)
(Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = c2), (Node n0 c1 c1 = c1)
(Node n0 c1 c1 = smash a2 a2), (Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash c2 a2), (Node n0 c1 c1 = smash c2 a1)
(Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = c2), (Node n1 a2 a2 = c1)
(Node n1 a2 a2 = smash a2 a2), (Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash c2 a2), (Node n1 a2 a2 = smash c2 a1)
(Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = c2), (Node n1 a2 a1 = c1)
(Node n1 a2 a1 = smash a2 a2), (Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash c2 a2), (Node n1 a2 a1 = smash c2 a1)
(Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = c2), (Node n1 a2 c2 = c1)
(Node n1 a2 c2 = smash a2 a2), (Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash c2 a2), (Node n1 a2 c2 = smash c2 a1)
(Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = c2), (Node n1 a2 c1 = c1)
(Node n1 a2 c1 = smash a2 a2), (Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash c2 a2), (Node n1 a2 c1 = smash c2 a1)
(Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = c2), (Node n1 a1 a2 = c1)
(Node n1 a1 a2 = smash a2 a2), (Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash c2 a2), (Node n1 a1 a2 = smash c2 a1)
(Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = c2), (Node n1 a1 a1 = c1)
(Node n1 a1 a1 = smash a2 a2), (Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash c2 a2), (Node n1 a1 a1 = smash c2 a1)
(Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = c2), (Node n1 a1 c2 = c1)
(Node n1 a1 c2 = smash a2 a2), (Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash c2 a2), (Node n1 a1 c2 = smash c2 a1)
(Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = c2), (Node n1 a1 c1 = c1)
(Node n1 a1 c1 = smash a2 a2), (Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash c2 a2), (Node n1 a1 c1 = smash c2 a1)
(Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = c2), (Node n1 c2 a2 = c1)
(Node n1 c2 a2 = smash a2 a2), (Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash c2 a2), (Node n1 c2 a2 = smash c2 a1)
(Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = c2), (Node n1 c2 a1 = c1)
(Node n1 c2 a1 = smash a2 a2), (Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash c2 a2), (Node n1 c2 a1 = smash c2 a1)
(Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = c2), (Node n1 c2 c2 = c1)
(Node n1 c2 c2 = smash a2 a2), (Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash c2 a2), (Node n1 c2 c2 = smash c2 a1)
(Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = c2), (Node n1 c2 c1 = c1)
(Node n1 c2 c1 = smash a2 a2), (Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash c2 a2), (Node n1 c2 c1 = smash c2 a1)
(Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = c2), (Node n1 c1 a2 = c1)
(Node n1 c1 a2 = smash a2 a2), (Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash c2 a2), (Node n1 c1 a2 = smash c2 a1)
(Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = c2), (Node n1 c1 a1 = c1)
(Node n1 c1 a1 = smash a2 a2), (Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash c2 a2), (Node n1 c1 a1 = smash c2 a1)
(Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = c2), (Node n1 c1 c2 = c1)
(Node n1 c1 c2 = smash a2 a2), (Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash c2 a2), (Node n1 c1 c2 = smash c2 a1)
(Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = c2), (Node n1 c1 c1 = c1)
(Node n1 c1 c1 = smash a2 a2), (Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash c2 a2), (Node n1 c1 c1 = smash c2 a1)
(Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = c2), (Node n a2 a2 = c1)
(Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash c2 a2), (Node n a2 a2 = smash c2 a1)
(Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = c2), (Node n a2 a1 = c1)
(Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash c2 a2), (Node n a2 a1 = smash c2 a1)
(Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = c2), (Node n a2 c2 = c1)
(Node n a2 c2 = smash a2 a2), (Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash c2 a2), (Node n a2 c2 = smash c2 a1)
(Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = c2), (Node n a2 c1 = c1)
(Node n a2 c1 = smash a2 a2), (Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash c2 a2), (Node n a2 c1 = smash c2 a1)
(Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = c2), (Node n a1 a2 = c1)
(Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash c2 a2), (Node n a1 a2 = smash c2 a1)
(Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = c2), (Node n a1 a1 = c1)
(Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash c2 a2), (Node n a1 a1 = smash c2 a1)
(Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = c2), (Node n a1 c2 = c1)
(Node n a1 c2 = smash a2 a2), (Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash c2 a2), (Node n a1 c2 = smash c2 a1)
(Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = c2), (Node n a1 c1 = c1)
(Node n a1 c1 = smash a2 a2), (Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash c2 a2), (Node n a1 c1 = smash c2 a1)
(Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = c2), (Node n c2 a2 = c1)
(Node n c2 a2 = smash a2 a2), (Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash c2 a2), (Node n c2 a2 = smash c2 a1)
(Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = c2), (Node n c2 a1 = c1)
(Node n c2 a1 = smash a2 a2), (Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash c2 a2), (Node n c2 a1 = smash c2 a1)
(Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = c2), (Node n c2 c2 = c1)
(Node n c2 c2 = smash a2 a2), (Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash c2 a2), (Node n c2 c2 = smash c2 a1)
(Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = c2), (Node n c2 c1 = c1)
(Node n c2 c1 = smash a2 a2), (Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash c2 a2), (Node n c2 c1 = smash c2 a1)
(Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = c2), (Node n c1 a2 = c1)
(Node n c1 a2 = smash a2 a2), (Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash c2 a2), (Node n c1 a2 = smash c2 a1)
(Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = c2), (Node n c1 a1 = c1)
(Node n c1 a1 = smash a2 a2), (Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash c2 a2), (Node n c1 a1 = smash c2 a1)
(Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = c2), (Node n c1 c2 = c1)
(Node n c1 c2 = smash a2 a2), (Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash c2 a2), (Node n c1 c2 = smash c2 a1)
(Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = c2), (Node n c1 c1 = c1)
(Node n c1 c1 = smash a2 a2), (Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash c2 a2), (Node n c1 c1 = smash c2 a1)
(Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = c2), (smash a2 a2 = c1)
(smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c1 = a2), (smash a2 c1 = a1)
(smash a2 c1 = c2), (smash a2 c1 = c1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = c2), (smash a1 a1 = c1)
(smash a1 c2 = a2), (smash a1 c2 = a1), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = c2), (smash a1 c1 = c1), (smash c2 a2 = a2), (smash c2 a2 = a1)
(smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a1 = a2), (smash c2 a1 = a1), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = c2), (smash c2 c2 = c1)
(smash c2 c1 = a2), (smash c2 c1 = a1), (smash c2 c1 = c2), (smash c2 c1 = c1), (smash c1 a2 = a2), (smash c1 a2 = a1), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a1 = a2), (smash c1 a1 = a1)
(smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 c2 = a2), (smash c1 c2 = a1), (smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = c2), (smash c1 c1 = c1)
(Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 c2), (Leaf = Node n0 a2 c1), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1)
(Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c1 a2), (Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n1 a2 a2), (Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1)
(Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 c2), (Leaf = Node n1 a1 c1), (Leaf = Node n1 c2 a2), (Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1)
(Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1)
(Leaf = Node n c2 a2), (Leaf = Node n c2 a1), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1)
(Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 c2), (Leaf = smash c2 c1)
(Leaf = smash c1 a2), (Leaf = smash c1 a1), (Leaf = smash c1 c2), (Leaf = smash c1 c1), (find_max' n0 p = n0), (find_max' n0 p = n1), (find_max' n0 p = n), (find_max' n1 p = n0), (find_max' n1 p = n1), (find_max' n1 p = n)
(find_max' n p = n0), (find_max' n p = n1), (find_max' n p = n), (length p = n0), (length p = n1), (length p = n), (length p = find_max' n0 p), (length p = find_max' n1 p), (length p = find_max' n p), (Some n0 = find_max p)
(Some n1 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n1), (None = Some n), (None = find_max p), (None = Some a2), (None = Some a1), (None = Some c2), (None = Some c1)
((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? n)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? n)), ((n0 >? n1) = (n0 >=? n0))
((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n >=? n0)), ((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n1))
((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n1)), ((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n1)), ((n0 >? n) = (n >=? n)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n))
((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n1)), ((n1 >? n0) = (n >=? n)), ((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? n)), ((n1 >? n1) = (n1 >=? n0))
((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n >=? n0)), ((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? n)), ((n1 >? n) = (n0 >=? n0)), ((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n1))
((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n >=? n0)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n1)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? n))
((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? n)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? n)), ((n >? n1) = (n1 >=? n0)), ((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? n)), ((n >? n1) = (n >=? n0))
((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n1)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n1 >=? n0)), ((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n1))
((n >? n) = (n >=? n))

Label: 2 (2)
(priq p), (priqq n0 p), (priqq n1 p), (priqq n p), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 gv3), (pow2heap n0 c2), (pow2heap n0 c1), (pow2heap n1 a2)
(pow2heap n1 a1), (pow2heap n1 gv3), (pow2heap n1 c2), (pow2heap n1 c1), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv3), (pow2heap n c2), (pow2heap n c1), (pow2heapp n0 n0 a2)
(pow2heapp n0 n0 a1), (pow2heapp n0 n0 gv3), (pow2heapp n0 n0 c2), (pow2heapp n0 n0 c1), (pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 gv3), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 n a2)
(pow2heapp n0 n a1), (pow2heapp n0 n gv3), (pow2heapp n0 n c2), (pow2heapp n0 n c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1), (pow2heapp n1 n0 gv3), (pow2heapp n1 n0 c2), (pow2heapp n1 n0 c1), (pow2heapp n1 n1 a2)
(pow2heapp n1 n1 a1), (pow2heapp n1 n1 gv3), (pow2heapp n1 n1 c2), (pow2heapp n1 n1 c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n gv3), (pow2heapp n1 n c2), (pow2heapp n1 n c1), (pow2heapp n n0 a2)
(pow2heapp n n0 a1), (pow2heapp n n0 gv3), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n1 a2), (pow2heapp n n1 a1), (pow2heapp n n1 gv3), (pow2heapp n n1 c2), (pow2heapp n n1 c1), (pow2heapp n n a2)
(pow2heapp n n a1), (pow2heapp n n gv3), (pow2heapp n n c2), (pow2heapp n n c1), (Permutation p p), (In a2 p), (In a1 p), (In gv3 p), (In c2 p), (In c1 p)
(n0 < n0), (n0 < n1), (n0 < n), (n1 < n0), (n1 < n1), (n1 < n), (n < n0), (n < n1), (n < n), (n0 <= n0)
(n0 <= n1), (n0 <= n), (n1 <= n0), (n1 <= n1), (n1 <= n), (n <= n0), (n <= n1), (n <= n), (p = p), (a2 = a2)
(a2 = a1), (a2 = gv3), (a2 = c2), (a2 = c1), (a1 = a2), (a1 = a1), (a1 = gv3), (a1 = c2), (a1 = c1), (gv3 = a2)
(gv3 = a1), (gv3 = gv3), (gv3 = c2), (gv3 = c1), (c2 = a2), (c2 = a1), (c2 = gv3), (c2 = c2), (c2 = c1), (c1 = a2)
(c1 = a1), (c1 = gv3), (c1 = c2), (c1 = c1), (n0 = n0), (n0 = n1), (n0 = n), (n1 = n0), (n1 = n1), (n1 = n)
(n = n0), (n = n1), (n = n), (false = (n0 >? n0)), (false = (n0 >? n1)), (false = (n0 >? n)), (false = (n1 >? n0)), (false = (n1 >? n1)), (false = (n1 >? n)), (false = (n >? n0))
(false = (n >? n1)), (false = (n >? n)), (false = (n0 >=? n0)), (false = (n0 >=? n1)), (false = (n0 >=? n)), (false = (n1 >=? n0)), (false = (n1 >=? n1)), (false = (n1 >=? n)), (false = (n >=? n0)), (false = (n >=? n1))
(false = (n >=? n)), (true = (n0 >? n0)), (true = (n0 >? n1)), (true = (n0 >? n)), (true = (n1 >? n0)), (true = (n1 >? n1)), (true = (n1 >? n)), (true = (n >? n0)), (true = (n >? n1)), (true = (n >? n))
(true = (n0 >=? n0)), (true = (n0 >=? n1)), (true = (n0 >=? n)), (true = (n1 >=? n0)), (true = (n1 >=? n1)), (true = (n1 >=? n)), (true = (n >=? n0)), (true = (n >=? n1)), (true = (n >=? n)), (Abs p [])
(Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (gv3 :: p) []), (Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max gv3) []), (Abs (heap_delete_max c2) [])
(Abs (heap_delete_max c1) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p gv3) []), (Abs (join p p c2) []), (Abs (join p p c1) []), (Abs (insert n0 p) []), (Abs (insert n1 p) []), (Abs (insert n p) []), (Abs (carry p a2) [])
(Abs (carry p a1) []), (Abs (carry p gv3) []), (Abs (carry p c2) []), (Abs (carry p c1) []), (Abs (p ++ p) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (gv3 :: p) [])
(priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) []), (priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) [])
(priqueue_elems (join p p gv3) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n1 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (carry p gv3) []), (priqueue_elems (carry p c2) [])
(priqueue_elems (carry p c1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems gv3 []), (tree_elems c2 []), (tree_elems c1 []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) [])
(tree_elems (Node n0 a2 gv3) []), (tree_elems (Node n0 a2 c2) []), (tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 gv3) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) []), (tree_elems (Node n0 gv3 a2) []), (tree_elems (Node n0 gv3 a1) [])
(tree_elems (Node n0 gv3 gv3) []), (tree_elems (Node n0 gv3 c2) []), (tree_elems (Node n0 gv3 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 gv3) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c1 a2) []), (tree_elems (Node n0 c1 a1) [])
(tree_elems (Node n0 c1 gv3) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) []), (tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 gv3) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) [])
(tree_elems (Node n1 a1 gv3) []), (tree_elems (Node n1 a1 c2) []), (tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 gv3 a2) []), (tree_elems (Node n1 gv3 a1) []), (tree_elems (Node n1 gv3 gv3) []), (tree_elems (Node n1 gv3 c2) []), (tree_elems (Node n1 gv3 c1) []), (tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) [])
(tree_elems (Node n1 c2 gv3) []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 gv3) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) [])
(tree_elems (Node n a2 gv3) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv3) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n gv3 a2) []), (tree_elems (Node n gv3 a1) [])
(tree_elems (Node n gv3 gv3) []), (tree_elems (Node n gv3 c2) []), (tree_elems (Node n gv3 c1) []), (tree_elems (Node n c2 a2) []), (tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 gv3) []), (tree_elems (Node n c2 c2) []), (tree_elems (Node n c2 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) [])
(tree_elems (Node n c1 gv3) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv3) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) [])
(tree_elems (smash a1 gv3) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) []), (tree_elems (smash gv3 a2) []), (tree_elems (smash gv3 a1) []), (tree_elems (smash gv3 gv3) []), (tree_elems (smash gv3 c2) []), (tree_elems (smash gv3 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) [])
(tree_elems (smash c2 gv3) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 gv3) []), (tree_elems (smash c1 c2) []), (tree_elems (smash c1 c1) []), (tree_elems Leaf []), (priq (a2 :: p))
(priq (a1 :: p)), (priq (gv3 :: p)), (priq (c2 :: p)), (priq (c1 :: p)), (priq (merge p p)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max gv3)), (priq (heap_delete_max c2)), (priq (heap_delete_max c1))
(priq (join p p a2)), (priq (join p p a1)), (priq (join p p gv3)), (priq (join p p c2)), (priq (join p p c1)), (priq (insert n0 p)), (priq (insert n1 p)), (priq (insert n p)), (priq (carry p a2)), (priq (carry p a1))
(priq (carry p gv3)), (priq (carry p c2)), (priq (carry p c1)), (priq (p ++ p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (gv3 :: p)), (priqq n0 (c2 :: p)), (priqq n0 (c1 :: p)), (priqq n0 (merge p p))
(priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (heap_delete_max gv3)), (priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p gv3)), (priqq n0 (join p p c2)), (priqq n0 (join p p c1))
(priqq n0 (insert n0 p)), (priqq n0 (insert n1 p)), (priqq n0 (insert n p)), (priqq n0 (carry p a2)), (priqq n0 (carry p a1)), (priqq n0 (carry p gv3)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1)), (priqq n0 (p ++ p)), (priqq n1 (a2 :: p))
(priqq n1 (a1 :: p)), (priqq n1 (gv3 :: p)), (priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (merge p p)), (priqq n1 (heap_delete_max a2)), (priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max gv3)), (priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1))
(priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p gv3)), (priqq n1 (join p p c2)), (priqq n1 (join p p c1)), (priqq n1 (insert n0 p)), (priqq n1 (insert n1 p)), (priqq n1 (insert n p)), (priqq n1 (carry p a2)), (priqq n1 (carry p a1))
(priqq n1 (carry p gv3)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (p ++ p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (gv3 :: p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (merge p p))
(priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv3)), (priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p gv3)), (priqq n (join p p c2)), (priqq n (join p p c1))
(priqq n (insert n0 p)), (priqq n (insert n1 p)), (priqq n (insert n p)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p gv3)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (p ++ p)), (priqq (find_max' n0 p) p)
(priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (gv3 :: p)), (priqq (find_max' n0 p) (c2 :: p)), (priqq (find_max' n0 p) (c1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max gv3)), (priqq (find_max' n0 p) (heap_delete_max c2))
(priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p gv3)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1)), (priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p a2))
(priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p gv3)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n1 p) p), (priqq (find_max' n1 p) (a2 :: p)), (priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (gv3 :: p)), (priqq (find_max' n1 p) (c2 :: p))
(priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1)), (priqq (find_max' n1 p) (heap_delete_max gv3)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1)), (priqq (find_max' n1 p) (join p p gv3))
(priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p gv3)), (priqq (find_max' n1 p) (carry p c2)), (priqq (find_max' n1 p) (carry p c1))
(priqq (find_max' n1 p) (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (gv3 :: p)), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1))
(priqq (find_max' n p) (heap_delete_max gv3)), (priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p gv3)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n1 p))
(priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p gv3)), (priqq (find_max' n p) (carry p c2)), (priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p))
(priqq (length p) (gv3 :: p)), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (heap_delete_max gv3)), (priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (join p p a2))
(priqq (length p) (join p p a1)), (priqq (length p) (join p p gv3)), (priqq (length p) (join p p c2)), (priqq (length p) (join p p c1)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n1 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p a2)), (priqq (length p) (carry p a1)), (priqq (length p) (carry p gv3))
(priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (p ++ p)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 gv3)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1))
(pow2heap n0 (Node n0 a1 gv3)), (pow2heap n0 (Node n0 a1 c2)), (pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 gv3 a2)), (pow2heap n0 (Node n0 gv3 a1)), (pow2heap n0 (Node n0 gv3 gv3)), (pow2heap n0 (Node n0 gv3 c2)), (pow2heap n0 (Node n0 gv3 c1)), (pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1))
(pow2heap n0 (Node n0 c2 gv3)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 gv3)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1)), (pow2heap n0 (Node n1 a2 a2)), (pow2heap n0 (Node n1 a2 a1))
(pow2heap n0 (Node n1 a2 gv3)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 gv3)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1)), (pow2heap n0 (Node n1 gv3 a2)), (pow2heap n0 (Node n1 gv3 a1))
(pow2heap n0 (Node n1 gv3 gv3)), (pow2heap n0 (Node n1 gv3 c2)), (pow2heap n0 (Node n1 gv3 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1)), (pow2heap n0 (Node n1 c2 gv3)), (pow2heap n0 (Node n1 c2 c2)), (pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1))
(pow2heap n0 (Node n1 c1 gv3)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 gv3)), (pow2heap n0 (Node n a2 c2)), (pow2heap n0 (Node n a2 c1)), (pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1))
(pow2heap n0 (Node n a1 gv3)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1)), (pow2heap n0 (Node n gv3 a2)), (pow2heap n0 (Node n gv3 a1)), (pow2heap n0 (Node n gv3 gv3)), (pow2heap n0 (Node n gv3 c2)), (pow2heap n0 (Node n gv3 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1))
(pow2heap n0 (Node n c2 gv3)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c1 a2)), (pow2heap n0 (Node n c1 a1)), (pow2heap n0 (Node n c1 gv3)), (pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1))
(pow2heap n0 (smash a2 gv3)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 gv3)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1)), (pow2heap n0 (smash gv3 a2)), (pow2heap n0 (smash gv3 a1))
(pow2heap n0 (smash gv3 gv3)), (pow2heap n0 (smash gv3 c2)), (pow2heap n0 (smash gv3 c1)), (pow2heap n0 (smash c2 a2)), (pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 gv3)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1))
(pow2heap n0 (smash c1 gv3)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1)), (pow2heap n1 (Node n0 a2 gv3)), (pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1))
(pow2heap n1 (Node n0 a1 gv3)), (pow2heap n1 (Node n0 a1 c2)), (pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 gv3 a2)), (pow2heap n1 (Node n0 gv3 a1)), (pow2heap n1 (Node n0 gv3 gv3)), (pow2heap n1 (Node n0 gv3 c2)), (pow2heap n1 (Node n0 gv3 c1)), (pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1))
(pow2heap n1 (Node n0 c2 gv3)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1)), (pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 gv3)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n1 a2 a2)), (pow2heap n1 (Node n1 a2 a1))
(pow2heap n1 (Node n1 a2 gv3)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1)), (pow2heap n1 (Node n1 a1 gv3)), (pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1)), (pow2heap n1 (Node n1 gv3 a2)), (pow2heap n1 (Node n1 gv3 a1))
(pow2heap n1 (Node n1 gv3 gv3)), (pow2heap n1 (Node n1 gv3 c2)), (pow2heap n1 (Node n1 gv3 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 gv3)), (pow2heap n1 (Node n1 c2 c2)), (pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1))
(pow2heap n1 (Node n1 c1 gv3)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1)), (pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 gv3)), (pow2heap n1 (Node n a2 c2)), (pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1))
(pow2heap n1 (Node n a1 gv3)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1)), (pow2heap n1 (Node n gv3 a2)), (pow2heap n1 (Node n gv3 a1)), (pow2heap n1 (Node n gv3 gv3)), (pow2heap n1 (Node n gv3 c2)), (pow2heap n1 (Node n gv3 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1))
(pow2heap n1 (Node n c2 gv3)), (pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c1 a2)), (pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 gv3)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1)), (pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1))
(pow2heap n1 (smash a2 gv3)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1)), (pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 gv3)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash gv3 a2)), (pow2heap n1 (smash gv3 a1))
(pow2heap n1 (smash gv3 gv3)), (pow2heap n1 (smash gv3 c2)), (pow2heap n1 (smash gv3 c1)), (pow2heap n1 (smash c2 a2)), (pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 gv3)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1))
(pow2heap n1 (smash c1 gv3)), (pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 gv3)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1))
(pow2heap n (Node n0 a1 gv3)), (pow2heap n (Node n0 a1 c2)), (pow2heap n (Node n0 a1 c1)), (pow2heap n (Node n0 gv3 a2)), (pow2heap n (Node n0 gv3 a1)), (pow2heap n (Node n0 gv3 gv3)), (pow2heap n (Node n0 gv3 c2)), (pow2heap n (Node n0 gv3 c1)), (pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1))
(pow2heap n (Node n0 c2 gv3)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 gv3)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n1 a2 a2)), (pow2heap n (Node n1 a2 a1))
(pow2heap n (Node n1 a2 gv3)), (pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 gv3)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1)), (pow2heap n (Node n1 gv3 a2)), (pow2heap n (Node n1 gv3 a1))
(pow2heap n (Node n1 gv3 gv3)), (pow2heap n (Node n1 gv3 c2)), (pow2heap n (Node n1 gv3 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 gv3)), (pow2heap n (Node n1 c2 c2)), (pow2heap n (Node n1 c2 c1)), (pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1))
(pow2heap n (Node n1 c1 gv3)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv3)), (pow2heap n (Node n a2 c2)), (pow2heap n (Node n a2 c1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1))
(pow2heap n (Node n a1 gv3)), (pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1)), (pow2heap n (Node n gv3 a2)), (pow2heap n (Node n gv3 a1)), (pow2heap n (Node n gv3 gv3)), (pow2heap n (Node n gv3 c2)), (pow2heap n (Node n gv3 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1))
(pow2heap n (Node n c2 gv3)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c1 a2)), (pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 gv3)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1))
(pow2heap n (smash a2 gv3)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv3)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash gv3 a2)), (pow2heap n (smash gv3 a1))
(pow2heap n (smash gv3 gv3)), (pow2heap n (smash gv3 c2)), (pow2heap n (smash gv3 c1)), (pow2heap n (smash c2 a2)), (pow2heap n (smash c2 a1)), (pow2heap n (smash c2 gv3)), (pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1))
(pow2heap n (smash c1 gv3)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) gv3), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1), (pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1))
(pow2heap (find_max' n0 p) (Node n0 a2 gv3)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 gv3)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 gv3 a2)), (pow2heap (find_max' n0 p) (Node n0 gv3 a1))
(pow2heap (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heap (find_max' n0 p) (Node n0 gv3 c2)), (pow2heap (find_max' n0 p) (Node n0 gv3 c1)), (pow2heap (find_max' n0 p) (Node n0 c2 a2)), (pow2heap (find_max' n0 p) (Node n0 c2 a1)), (pow2heap (find_max' n0 p) (Node n0 c2 gv3)), (pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1))
(pow2heap (find_max' n0 p) (Node n0 c1 gv3)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 gv3)), (pow2heap (find_max' n0 p) (Node n1 a2 c2)), (pow2heap (find_max' n0 p) (Node n1 a2 c1)), (pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1))
(pow2heap (find_max' n0 p) (Node n1 a1 gv3)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1)), (pow2heap (find_max' n0 p) (Node n1 gv3 a2)), (pow2heap (find_max' n0 p) (Node n1 gv3 a1)), (pow2heap (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heap (find_max' n0 p) (Node n1 gv3 c2)), (pow2heap (find_max' n0 p) (Node n1 gv3 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1))
(pow2heap (find_max' n0 p) (Node n1 c2 gv3)), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c1 a2)), (pow2heap (find_max' n0 p) (Node n1 c1 a1)), (pow2heap (find_max' n0 p) (Node n1 c1 gv3)), (pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1)), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1))
(pow2heap (find_max' n0 p) (Node n a2 gv3)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 gv3)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1)), (pow2heap (find_max' n0 p) (Node n gv3 a2)), (pow2heap (find_max' n0 p) (Node n gv3 a1))
(pow2heap (find_max' n0 p) (Node n gv3 gv3)), (pow2heap (find_max' n0 p) (Node n gv3 c2)), (pow2heap (find_max' n0 p) (Node n gv3 c1)), (pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 gv3)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1))
(pow2heap (find_max' n0 p) (Node n c1 gv3)), (pow2heap (find_max' n0 p) (Node n c1 c2)), (pow2heap (find_max' n0 p) (Node n c1 c1)), (pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1)), (pow2heap (find_max' n0 p) (smash a2 gv3)), (pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1))
(pow2heap (find_max' n0 p) (smash a1 gv3)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash gv3 a2)), (pow2heap (find_max' n0 p) (smash gv3 a1)), (pow2heap (find_max' n0 p) (smash gv3 gv3)), (pow2heap (find_max' n0 p) (smash gv3 c2)), (pow2heap (find_max' n0 p) (smash gv3 c1)), (pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1))
(pow2heap (find_max' n0 p) (smash c2 gv3)), (pow2heap (find_max' n0 p) (smash c2 c2)), (pow2heap (find_max' n0 p) (smash c2 c1)), (pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 gv3)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1)
(pow2heap (find_max' n1 p) gv3), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1)), (pow2heap (find_max' n1 p) (Node n0 a2 gv3)), (pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a1 a2)), (pow2heap (find_max' n1 p) (Node n0 a1 a1))
(pow2heap (find_max' n1 p) (Node n0 a1 gv3)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1)), (pow2heap (find_max' n1 p) (Node n0 gv3 a2)), (pow2heap (find_max' n1 p) (Node n0 gv3 a1)), (pow2heap (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heap (find_max' n1 p) (Node n0 gv3 c2)), (pow2heap (find_max' n1 p) (Node n0 gv3 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1))
(pow2heap (find_max' n1 p) (Node n0 c2 gv3)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1)), (pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 gv3)), (pow2heap (find_max' n1 p) (Node n0 c1 c2)), (pow2heap (find_max' n1 p) (Node n0 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1))
(pow2heap (find_max' n1 p) (Node n1 a2 gv3)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1)), (pow2heap (find_max' n1 p) (Node n1 a1 gv3)), (pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 gv3 a2)), (pow2heap (find_max' n1 p) (Node n1 gv3 a1))
(pow2heap (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heap (find_max' n1 p) (Node n1 gv3 c2)), (pow2heap (find_max' n1 p) (Node n1 gv3 c1)), (pow2heap (find_max' n1 p) (Node n1 c2 a2)), (pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 gv3)), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1))
(pow2heap (find_max' n1 p) (Node n1 c1 gv3)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1)), (pow2heap (find_max' n1 p) (Node n a2 a2)), (pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 gv3)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1))
(pow2heap (find_max' n1 p) (Node n a1 gv3)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n gv3 a2)), (pow2heap (find_max' n1 p) (Node n gv3 a1)), (pow2heap (find_max' n1 p) (Node n gv3 gv3)), (pow2heap (find_max' n1 p) (Node n gv3 c2)), (pow2heap (find_max' n1 p) (Node n gv3 c1)), (pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1))
(pow2heap (find_max' n1 p) (Node n c2 gv3)), (pow2heap (find_max' n1 p) (Node n c2 c2)), (pow2heap (find_max' n1 p) (Node n c2 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 gv3)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1))
(pow2heap (find_max' n1 p) (smash a2 gv3)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1)), (pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 gv3)), (pow2heap (find_max' n1 p) (smash a1 c2)), (pow2heap (find_max' n1 p) (smash a1 c1)), (pow2heap (find_max' n1 p) (smash gv3 a2)), (pow2heap (find_max' n1 p) (smash gv3 a1))
(pow2heap (find_max' n1 p) (smash gv3 gv3)), (pow2heap (find_max' n1 p) (smash gv3 c2)), (pow2heap (find_max' n1 p) (smash gv3 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 gv3)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1))
(pow2heap (find_max' n1 p) (smash c1 gv3)), (pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1)), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) gv3), (pow2heap (find_max' n p) c2), (pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1))
(pow2heap (find_max' n p) (Node n0 a2 gv3)), (pow2heap (find_max' n p) (Node n0 a2 c2)), (pow2heap (find_max' n p) (Node n0 a2 c1)), (pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 gv3)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1)), (pow2heap (find_max' n p) (Node n0 gv3 a2)), (pow2heap (find_max' n p) (Node n0 gv3 a1))
(pow2heap (find_max' n p) (Node n0 gv3 gv3)), (pow2heap (find_max' n p) (Node n0 gv3 c2)), (pow2heap (find_max' n p) (Node n0 gv3 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 gv3)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c1 a2)), (pow2heap (find_max' n p) (Node n0 c1 a1))
(pow2heap (find_max' n p) (Node n0 c1 gv3)), (pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1)), (pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 gv3)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1))
(pow2heap (find_max' n p) (Node n1 a1 gv3)), (pow2heap (find_max' n p) (Node n1 a1 c2)), (pow2heap (find_max' n p) (Node n1 a1 c1)), (pow2heap (find_max' n p) (Node n1 gv3 a2)), (pow2heap (find_max' n p) (Node n1 gv3 a1)), (pow2heap (find_max' n p) (Node n1 gv3 gv3)), (pow2heap (find_max' n p) (Node n1 gv3 c2)), (pow2heap (find_max' n p) (Node n1 gv3 c1)), (pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1))
(pow2heap (find_max' n p) (Node n1 c2 gv3)), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 gv3)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1))
(pow2heap (find_max' n p) (Node n a2 gv3)), (pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 gv3)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n gv3 a2)), (pow2heap (find_max' n p) (Node n gv3 a1))
(pow2heap (find_max' n p) (Node n gv3 gv3)), (pow2heap (find_max' n p) (Node n gv3 c2)), (pow2heap (find_max' n p) (Node n gv3 c1)), (pow2heap (find_max' n p) (Node n c2 a2)), (pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 gv3)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1)), (pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1))
(pow2heap (find_max' n p) (Node n c1 gv3)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 gv3)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1))
(pow2heap (find_max' n p) (smash a1 gv3)), (pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1)), (pow2heap (find_max' n p) (smash gv3 a2)), (pow2heap (find_max' n p) (smash gv3 a1)), (pow2heap (find_max' n p) (smash gv3 gv3)), (pow2heap (find_max' n p) (smash gv3 c2)), (pow2heap (find_max' n p) (smash gv3 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1))
(pow2heap (find_max' n p) (smash c2 gv3)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 gv3)), (pow2heap (find_max' n p) (smash c1 c2)), (pow2heap (find_max' n p) (smash c1 c1)), (pow2heap (length p) a2), (pow2heap (length p) a1)
(pow2heap (length p) gv3), (pow2heap (length p) c2), (pow2heap (length p) c1), (pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 gv3)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1))
(pow2heap (length p) (Node n0 a1 gv3)), (pow2heap (length p) (Node n0 a1 c2)), (pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 gv3 a2)), (pow2heap (length p) (Node n0 gv3 a1)), (pow2heap (length p) (Node n0 gv3 gv3)), (pow2heap (length p) (Node n0 gv3 c2)), (pow2heap (length p) (Node n0 gv3 c1)), (pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1))
(pow2heap (length p) (Node n0 c2 gv3)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 gv3)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1)), (pow2heap (length p) (Node n1 a2 a2)), (pow2heap (length p) (Node n1 a2 a1))
(pow2heap (length p) (Node n1 a2 gv3)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 gv3)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1)), (pow2heap (length p) (Node n1 gv3 a2)), (pow2heap (length p) (Node n1 gv3 a1))
(pow2heap (length p) (Node n1 gv3 gv3)), (pow2heap (length p) (Node n1 gv3 c2)), (pow2heap (length p) (Node n1 gv3 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1)), (pow2heap (length p) (Node n1 c2 gv3)), (pow2heap (length p) (Node n1 c2 c2)), (pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1))
(pow2heap (length p) (Node n1 c1 gv3)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1)), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 gv3)), (pow2heap (length p) (Node n a2 c2)), (pow2heap (length p) (Node n a2 c1)), (pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1))
(pow2heap (length p) (Node n a1 gv3)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1)), (pow2heap (length p) (Node n gv3 a2)), (pow2heap (length p) (Node n gv3 a1)), (pow2heap (length p) (Node n gv3 gv3)), (pow2heap (length p) (Node n gv3 c2)), (pow2heap (length p) (Node n gv3 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1))
(pow2heap (length p) (Node n c2 gv3)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c1 a2)), (pow2heap (length p) (Node n c1 a1)), (pow2heap (length p) (Node n c1 gv3)), (pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1))
(pow2heap (length p) (smash a2 gv3)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 gv3)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1)), (pow2heap (length p) (smash gv3 a2)), (pow2heap (length p) (smash gv3 a1))
(pow2heap (length p) (smash gv3 gv3)), (pow2heap (length p) (smash gv3 c2)), (pow2heap (length p) (smash gv3 c1)), (pow2heap (length p) (smash c2 a2)), (pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 gv3)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1))
(pow2heap (length p) (smash c1 gv3)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1)), (pow2heapp n0 n0 (Node n0 a2 gv3)), (pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1))
(pow2heapp n0 n0 (Node n0 a1 gv3)), (pow2heapp n0 n0 (Node n0 a1 c2)), (pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 gv3 a2)), (pow2heapp n0 n0 (Node n0 gv3 a1)), (pow2heapp n0 n0 (Node n0 gv3 gv3)), (pow2heapp n0 n0 (Node n0 gv3 c2)), (pow2heapp n0 n0 (Node n0 gv3 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1))
(pow2heapp n0 n0 (Node n0 c2 gv3)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1)), (pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 gv3)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n1 a2 a2)), (pow2heapp n0 n0 (Node n1 a2 a1))
(pow2heapp n0 n0 (Node n1 a2 gv3)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1)), (pow2heapp n0 n0 (Node n1 a1 gv3)), (pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 gv3 a2)), (pow2heapp n0 n0 (Node n1 gv3 a1))
(pow2heapp n0 n0 (Node n1 gv3 gv3)), (pow2heapp n0 n0 (Node n1 gv3 c2)), (pow2heapp n0 n0 (Node n1 gv3 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 gv3)), (pow2heapp n0 n0 (Node n1 c2 c2)), (pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1))
(pow2heapp n0 n0 (Node n1 c1 gv3)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 gv3)), (pow2heapp n0 n0 (Node n a2 c2)), (pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1))
(pow2heapp n0 n0 (Node n a1 gv3)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n gv3 a2)), (pow2heapp n0 n0 (Node n gv3 a1)), (pow2heapp n0 n0 (Node n gv3 gv3)), (pow2heapp n0 n0 (Node n gv3 c2)), (pow2heapp n0 n0 (Node n gv3 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1))
(pow2heapp n0 n0 (Node n c2 gv3)), (pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c1 a2)), (pow2heapp n0 n0 (Node n c1 a1)), (pow2heapp n0 n0 (Node n c1 gv3)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1))
(pow2heapp n0 n0 (smash a2 gv3)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 gv3)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash gv3 a2)), (pow2heapp n0 n0 (smash gv3 a1))
(pow2heapp n0 n0 (smash gv3 gv3)), (pow2heapp n0 n0 (smash gv3 c2)), (pow2heapp n0 n0 (smash gv3 c1)), (pow2heapp n0 n0 (smash c2 a2)), (pow2heapp n0 n0 (smash c2 a1)), (pow2heapp n0 n0 (smash c2 gv3)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1))
(pow2heapp n0 n0 (smash c1 gv3)), (pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 gv3)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a1 a2))
(pow2heapp n0 n1 (Node n0 a1 a1)), (pow2heapp n0 n1 (Node n0 a1 gv3)), (pow2heapp n0 n1 (Node n0 a1 c2)), (pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 gv3 a2)), (pow2heapp n0 n1 (Node n0 gv3 a1)), (pow2heapp n0 n1 (Node n0 gv3 gv3)), (pow2heapp n0 n1 (Node n0 gv3 c2)), (pow2heapp n0 n1 (Node n0 gv3 c1)), (pow2heapp n0 n1 (Node n0 c2 a2))
(pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 gv3)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 gv3)), (pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1)), (pow2heapp n0 n1 (Node n1 a2 a2))
(pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 gv3)), (pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 gv3)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 gv3 a2))
(pow2heapp n0 n1 (Node n1 gv3 a1)), (pow2heapp n0 n1 (Node n1 gv3 gv3)), (pow2heapp n0 n1 (Node n1 gv3 c2)), (pow2heapp n0 n1 (Node n1 gv3 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1)), (pow2heapp n0 n1 (Node n1 c2 gv3)), (pow2heapp n0 n1 (Node n1 c2 c2)), (pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c1 a2))
(pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 gv3)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1)), (pow2heapp n0 n1 (Node n a2 gv3)), (pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a1 a2))
(pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 gv3)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n gv3 a2)), (pow2heapp n0 n1 (Node n gv3 a1)), (pow2heapp n0 n1 (Node n gv3 gv3)), (pow2heapp n0 n1 (Node n gv3 c2)), (pow2heapp n0 n1 (Node n gv3 c1)), (pow2heapp n0 n1 (Node n c2 a2))
(pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 gv3)), (pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1)), (pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 gv3)), (pow2heapp n0 n1 (Node n c1 c2)), (pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (smash a2 a2))
(pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 gv3)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 gv3)), (pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1)), (pow2heapp n0 n1 (smash gv3 a2))
(pow2heapp n0 n1 (smash gv3 a1)), (pow2heapp n0 n1 (smash gv3 gv3)), (pow2heapp n0 n1 (smash gv3 c2)), (pow2heapp n0 n1 (smash gv3 c1)), (pow2heapp n0 n1 (smash c2 a2)), (pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 gv3)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c1 a2))
(pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 gv3)), (pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 Leaf), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a2 gv3)), (pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1))
(pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 gv3)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1)), (pow2heapp n0 n (Node n0 gv3 a2)), (pow2heapp n0 n (Node n0 gv3 a1)), (pow2heapp n0 n (Node n0 gv3 gv3)), (pow2heapp n0 n (Node n0 gv3 c2)), (pow2heapp n0 n (Node n0 gv3 c1))
(pow2heapp n0 n (Node n0 c2 a2)), (pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 gv3)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1)), (pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 gv3)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1))
(pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1)), (pow2heapp n0 n (Node n1 a2 gv3)), (pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a1 a2)), (pow2heapp n0 n (Node n1 a1 a1)), (pow2heapp n0 n (Node n1 a1 gv3)), (pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1))
(pow2heapp n0 n (Node n1 gv3 a2)), (pow2heapp n0 n (Node n1 gv3 a1)), (pow2heapp n0 n (Node n1 gv3 gv3)), (pow2heapp n0 n (Node n1 gv3 c2)), (pow2heapp n0 n (Node n1 gv3 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 gv3)), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1))
(pow2heapp n0 n (Node n1 c1 a2)), (pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 gv3)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 gv3)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1))
(pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 gv3)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n gv3 a2)), (pow2heapp n0 n (Node n gv3 a1)), (pow2heapp n0 n (Node n gv3 gv3)), (pow2heapp n0 n (Node n gv3 c2)), (pow2heapp n0 n (Node n gv3 c1))
(pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1)), (pow2heapp n0 n (Node n c2 gv3)), (pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c1 a2)), (pow2heapp n0 n (Node n c1 a1)), (pow2heapp n0 n (Node n c1 gv3)), (pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1))
(pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 gv3)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 gv3)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1))
(pow2heapp n0 n (smash gv3 a2)), (pow2heapp n0 n (smash gv3 a1)), (pow2heapp n0 n (smash gv3 gv3)), (pow2heapp n0 n (smash gv3 c2)), (pow2heapp n0 n (smash gv3 c1)), (pow2heapp n0 n (smash c2 a2)), (pow2heapp n0 n (smash c2 a1)), (pow2heapp n0 n (smash c2 gv3)), (pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1))
(pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1)), (pow2heapp n0 n (smash c1 gv3)), (pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) gv3), (pow2heapp n0 (find_max' n0 p) c2)
(pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv3 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n gv3 a2)), (pow2heapp n0 (find_max' n0 p) (Node n gv3 a1)), (pow2heapp n0 (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n gv3 c2)), (pow2heapp n0 (find_max' n0 p) (Node n gv3 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 gv3)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 gv3)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2))
(pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 gv3)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash gv3 a2)), (pow2heapp n0 (find_max' n0 p) (smash gv3 a1)), (pow2heapp n0 (find_max' n0 p) (smash gv3 gv3)), (pow2heapp n0 (find_max' n0 p) (smash gv3 c2))
(pow2heapp n0 (find_max' n0 p) (smash gv3 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 gv3)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2)), (pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 gv3)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2))
(pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) gv3), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv3 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n gv3 a2)), (pow2heapp n0 (find_max' n1 p) (Node n gv3 a1)), (pow2heapp n0 (find_max' n1 p) (Node n gv3 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n gv3 c2)), (pow2heapp n0 (find_max' n1 p) (Node n gv3 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 gv3)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 gv3))
(pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1)), (pow2heapp n0 (find_max' n1 p) (smash a2 gv3)), (pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1)), (pow2heapp n0 (find_max' n1 p) (smash a1 gv3))
(pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1)), (pow2heapp n0 (find_max' n1 p) (smash gv3 a2)), (pow2heapp n0 (find_max' n1 p) (smash gv3 a1)), (pow2heapp n0 (find_max' n1 p) (smash gv3 gv3)), (pow2heapp n0 (find_max' n1 p) (smash gv3 c2)), (pow2heapp n0 (find_max' n1 p) (smash gv3 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 gv3))
(pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1)), (pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 gv3)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1)), (pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1)
(pow2heapp n0 (find_max' n p) gv3), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 gv3)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1))
(pow2heapp n0 (find_max' n p) (Node n0 a1 gv3)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 gv3 a2)), (pow2heapp n0 (find_max' n p) (Node n0 gv3 a1)), (pow2heapp n0 (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp n0 (find_max' n p) (Node n0 gv3 c2)), (pow2heapp n0 (find_max' n p) (Node n0 gv3 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1))
(pow2heapp n0 (find_max' n p) (Node n0 c2 gv3)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 gv3)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1))
(pow2heapp n0 (find_max' n p) (Node n1 a2 gv3)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 gv3)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 gv3 a2)), (pow2heapp n0 (find_max' n p) (Node n1 gv3 a1))
(pow2heapp n0 (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp n0 (find_max' n p) (Node n1 gv3 c2)), (pow2heapp n0 (find_max' n p) (Node n1 gv3 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 gv3)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1))
(pow2heapp n0 (find_max' n p) (Node n1 c1 gv3)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 gv3)), (pow2heapp n0 (find_max' n p) (Node n a2 c2)), (pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1))
(pow2heapp n0 (find_max' n p) (Node n a1 gv3)), (pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n gv3 a2)), (pow2heapp n0 (find_max' n p) (Node n gv3 a1)), (pow2heapp n0 (find_max' n p) (Node n gv3 gv3)), (pow2heapp n0 (find_max' n p) (Node n gv3 c2)), (pow2heapp n0 (find_max' n p) (Node n gv3 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1))
(pow2heapp n0 (find_max' n p) (Node n c2 gv3)), (pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2)), (pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 gv3)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1))
(pow2heapp n0 (find_max' n p) (smash a2 gv3)), (pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 gv3)), (pow2heapp n0 (find_max' n p) (smash a1 c2)), (pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash gv3 a2)), (pow2heapp n0 (find_max' n p) (smash gv3 a1))
(pow2heapp n0 (find_max' n p) (smash gv3 gv3)), (pow2heapp n0 (find_max' n p) (smash gv3 c2)), (pow2heapp n0 (find_max' n p) (smash gv3 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 gv3)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1)), (pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1))
(pow2heapp n0 (find_max' n p) (smash c1 gv3)), (pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) gv3), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) (Node n0 a2 a2))
(pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 gv3)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n0 a1 gv3)), (pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 gv3 a2))
(pow2heapp n0 (length p) (Node n0 gv3 a1)), (pow2heapp n0 (length p) (Node n0 gv3 gv3)), (pow2heapp n0 (length p) (Node n0 gv3 c2)), (pow2heapp n0 (length p) (Node n0 gv3 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1)), (pow2heapp n0 (length p) (Node n0 c2 gv3)), (pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2))
(pow2heapp n0 (length p) (Node n0 c1 a1)), (pow2heapp n0 (length p) (Node n0 c1 gv3)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1)), (pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1)), (pow2heapp n0 (length p) (Node n1 a2 gv3)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1)), (pow2heapp n0 (length p) (Node n1 a1 a2))
(pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 gv3)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 gv3 a2)), (pow2heapp n0 (length p) (Node n1 gv3 a1)), (pow2heapp n0 (length p) (Node n1 gv3 gv3)), (pow2heapp n0 (length p) (Node n1 gv3 c2)), (pow2heapp n0 (length p) (Node n1 gv3 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2))
(pow2heapp n0 (length p) (Node n1 c2 a1)), (pow2heapp n0 (length p) (Node n1 c2 gv3)), (pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1)), (pow2heapp n0 (length p) (Node n1 c1 gv3)), (pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node n a2 a2))
(pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a2 gv3)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1)), (pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 gv3)), (pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n gv3 a2))
(pow2heapp n0 (length p) (Node n gv3 a1)), (pow2heapp n0 (length p) (Node n gv3 gv3)), (pow2heapp n0 (length p) (Node n gv3 c2)), (pow2heapp n0 (length p) (Node n gv3 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1)), (pow2heapp n0 (length p) (Node n c2 gv3)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c1 a2))
(pow2heapp n0 (length p) (Node n c1 a1)), (pow2heapp n0 (length p) (Node n c1 gv3)), (pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a2 gv3)), (pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a1 a2))
(pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) (smash a1 gv3)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1)), (pow2heapp n0 (length p) (smash gv3 a2)), (pow2heapp n0 (length p) (smash gv3 a1)), (pow2heapp n0 (length p) (smash gv3 gv3)), (pow2heapp n0 (length p) (smash gv3 c2)), (pow2heapp n0 (length p) (smash gv3 c1)), (pow2heapp n0 (length p) (smash c2 a2))
(pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 gv3)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1)), (pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1)), (pow2heapp n0 (length p) (smash c1 gv3)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) Leaf)
(pow2heapp n1 n0 (Node n0 a2 a2)), (pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 gv3)), (pow2heapp n1 n0 (Node n0 a2 c2)), (pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 gv3)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1))
(pow2heapp n1 n0 (Node n0 gv3 a2)), (pow2heapp n1 n0 (Node n0 gv3 a1)), (pow2heapp n1 n0 (Node n0 gv3 gv3)), (pow2heapp n1 n0 (Node n0 gv3 c2)), (pow2heapp n1 n0 (Node n0 gv3 c1)), (pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 gv3)), (pow2heapp n1 n0 (Node n0 c2 c2)), (pow2heapp n1 n0 (Node n0 c2 c1))
(pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 gv3)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1)), (pow2heapp n1 n0 (Node n1 a2 gv3)), (pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1))
(pow2heapp n1 n0 (Node n1 a1 a2)), (pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 gv3)), (pow2heapp n1 n0 (Node n1 a1 c2)), (pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 gv3 a2)), (pow2heapp n1 n0 (Node n1 gv3 a1)), (pow2heapp n1 n0 (Node n1 gv3 gv3)), (pow2heapp n1 n0 (Node n1 gv3 c2)), (pow2heapp n1 n0 (Node n1 gv3 c1))
(pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 gv3)), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1)), (pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 gv3)), (pow2heapp n1 n0 (Node n1 c1 c2)), (pow2heapp n1 n0 (Node n1 c1 c1))
(pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 gv3)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1)), (pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 gv3)), (pow2heapp n1 n0 (Node n a1 c2)), (pow2heapp n1 n0 (Node n a1 c1))
(pow2heapp n1 n0 (Node n gv3 a2)), (pow2heapp n1 n0 (Node n gv3 a1)), (pow2heapp n1 n0 (Node n gv3 gv3)), (pow2heapp n1 n0 (Node n gv3 c2)), (pow2heapp n1 n0 (Node n gv3 c1)), (pow2heapp n1 n0 (Node n c2 a2)), (pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 gv3)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1))
(pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1)), (pow2heapp n1 n0 (Node n c1 gv3)), (pow2heapp n1 n0 (Node n c1 c2)), (pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 gv3)), (pow2heapp n1 n0 (smash a2 c2)), (pow2heapp n1 n0 (smash a2 c1))
(pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 gv3)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash gv3 a2)), (pow2heapp n1 n0 (smash gv3 a1)), (pow2heapp n1 n0 (smash gv3 gv3)), (pow2heapp n1 n0 (smash gv3 c2)), (pow2heapp n1 n0 (smash gv3 c1))
(pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1)), (pow2heapp n1 n0 (smash c2 gv3)), (pow2heapp n1 n0 (smash c2 c2)), (pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c1 a2)), (pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 gv3)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1))
(pow2heapp n1 n0 Leaf), (pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 gv3)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1)), (pow2heapp n1 n1 (Node n0 a1 gv3)), (pow2heapp n1 n1 (Node n0 a1 c2))
(pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 gv3 a2)), (pow2heapp n1 n1 (Node n0 gv3 a1)), (pow2heapp n1 n1 (Node n0 gv3 gv3)), (pow2heapp n1 n1 (Node n0 gv3 c2)), (pow2heapp n1 n1 (Node n0 gv3 c1)), (pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 gv3)), (pow2heapp n1 n1 (Node n0 c2 c2))
(pow2heapp n1 n1 (Node n0 c2 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 gv3)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1)), (pow2heapp n1 n1 (Node n1 a2 a2)), (pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 gv3)), (pow2heapp n1 n1 (Node n1 a2 c2))
(pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 gv3)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1)), (pow2heapp n1 n1 (Node n1 gv3 a2)), (pow2heapp n1 n1 (Node n1 gv3 a1)), (pow2heapp n1 n1 (Node n1 gv3 gv3)), (pow2heapp n1 n1 (Node n1 gv3 c2))
(pow2heapp n1 n1 (Node n1 gv3 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1)), (pow2heapp n1 n1 (Node n1 c2 gv3)), (pow2heapp n1 n1 (Node n1 c2 c2)), (pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 gv3)), (pow2heapp n1 n1 (Node n1 c1 c2))
(pow2heapp n1 n1 (Node n1 c1 c1)), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 gv3)), (pow2heapp n1 n1 (Node n a2 c2)), (pow2heapp n1 n1 (Node n a2 c1)), (pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 gv3)), (pow2heapp n1 n1 (Node n a1 c2))
(pow2heapp n1 n1 (Node n a1 c1)), (pow2heapp n1 n1 (Node n gv3 a2)), (pow2heapp n1 n1 (Node n gv3 a1)), (pow2heapp n1 n1 (Node n gv3 gv3)), (pow2heapp n1 n1 (Node n gv3 c2)), (pow2heapp n1 n1 (Node n gv3 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 gv3)), (pow2heapp n1 n1 (Node n c2 c2))
(pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c1 a2)), (pow2heapp n1 n1 (Node n c1 a1)), (pow2heapp n1 n1 (Node n c1 gv3)), (pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1)), (pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 gv3)), (pow2heapp n1 n1 (smash a2 c2))
(pow2heapp n1 n1 (smash a2 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 gv3)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1)), (pow2heapp n1 n1 (smash gv3 a2)), (pow2heapp n1 n1 (smash gv3 a1)), (pow2heapp n1 n1 (smash gv3 gv3)), (pow2heapp n1 n1 (smash gv3 c2))
(pow2heapp n1 n1 (smash gv3 c1)), (pow2heapp n1 n1 (smash c2 a2)), (pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 gv3)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 gv3)), (pow2heapp n1 n1 (smash c1 c2))
(pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 n (Node n0 a2 a2)), (pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 gv3)), (pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 gv3))
(pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 gv3 a2)), (pow2heapp n1 n (Node n0 gv3 a1)), (pow2heapp n1 n (Node n0 gv3 gv3)), (pow2heapp n1 n (Node n0 gv3 c2)), (pow2heapp n1 n (Node n0 gv3 c1)), (pow2heapp n1 n (Node n0 c2 a2)), (pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 gv3))
(pow2heapp n1 n (Node n0 c2 c2)), (pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 gv3)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 gv3))
(pow2heapp n1 n (Node n1 a2 c2)), (pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a1 a2)), (pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 gv3)), (pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 gv3 a2)), (pow2heapp n1 n (Node n1 gv3 a1)), (pow2heapp n1 n (Node n1 gv3 gv3))
(pow2heapp n1 n (Node n1 gv3 c2)), (pow2heapp n1 n (Node n1 gv3 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 gv3)), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c1 a2)), (pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 gv3))
(pow2heapp n1 n (Node n1 c1 c2)), (pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 gv3)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a1 a2)), (pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 gv3))
(pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n gv3 a2)), (pow2heapp n1 n (Node n gv3 a1)), (pow2heapp n1 n (Node n gv3 gv3)), (pow2heapp n1 n (Node n gv3 c2)), (pow2heapp n1 n (Node n gv3 c1)), (pow2heapp n1 n (Node n c2 a2)), (pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 gv3))
(pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 gv3)), (pow2heapp n1 n (Node n c1 c2)), (pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (smash a2 a2)), (pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 gv3))
(pow2heapp n1 n (smash a2 c2)), (pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 gv3)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash gv3 a2)), (pow2heapp n1 n (smash gv3 a1)), (pow2heapp n1 n (smash gv3 gv3))
(pow2heapp n1 n (smash gv3 c2)), (pow2heapp n1 n (smash gv3 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 gv3)), (pow2heapp n1 n (smash c2 c2)), (pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c1 a2)), (pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 gv3))
(pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n Leaf), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) gv3), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv3 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv3 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n a2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n gv3 a2)), (pow2heapp n1 (find_max' n0 p) (Node n gv3 a1))
(pow2heapp n1 (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n gv3 c2)), (pow2heapp n1 (find_max' n0 p) (Node n gv3 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n c1 gv3)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 gv3)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1)), (pow2heapp n1 (find_max' n0 p) (smash a1 a2)), (pow2heapp n1 (find_max' n0 p) (smash a1 a1))
(pow2heapp n1 (find_max' n0 p) (smash a1 gv3)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1)), (pow2heapp n1 (find_max' n0 p) (smash gv3 a2)), (pow2heapp n1 (find_max' n0 p) (smash gv3 a1)), (pow2heapp n1 (find_max' n0 p) (smash gv3 gv3)), (pow2heapp n1 (find_max' n0 p) (smash gv3 c2)), (pow2heapp n1 (find_max' n0 p) (smash gv3 c1)), (pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1))
(pow2heapp n1 (find_max' n0 p) (smash c2 gv3)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2)), (pow2heapp n1 (find_max' n0 p) (smash c1 a1)), (pow2heapp n1 (find_max' n0 p) (smash c1 gv3)), (pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n1 p) a2)
(pow2heapp n1 (find_max' n1 p) a1), (pow2heapp n1 (find_max' n1 p) gv3), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv3 a2))
(pow2heapp n1 (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n gv3 a2)), (pow2heapp n1 (find_max' n1 p) (Node n gv3 a1)), (pow2heapp n1 (find_max' n1 p) (Node n gv3 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n gv3 c2)), (pow2heapp n1 (find_max' n1 p) (Node n gv3 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 gv3)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2))
(pow2heapp n1 (find_max' n1 p) (smash a2 a1)), (pow2heapp n1 (find_max' n1 p) (smash a2 gv3)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2)), (pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 gv3)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash gv3 a2))
(pow2heapp n1 (find_max' n1 p) (smash gv3 a1)), (pow2heapp n1 (find_max' n1 p) (smash gv3 gv3)), (pow2heapp n1 (find_max' n1 p) (smash gv3 c2)), (pow2heapp n1 (find_max' n1 p) (smash gv3 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1)), (pow2heapp n1 (find_max' n1 p) (smash c2 gv3)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2))
(pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 gv3)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2)), (pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' n p) a2), (pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) gv3), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1)
(pow2heapp n1 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 gv3)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 gv3)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1))
(pow2heapp n1 (find_max' n p) (Node n0 gv3 a2)), (pow2heapp n1 (find_max' n p) (Node n0 gv3 a1)), (pow2heapp n1 (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp n1 (find_max' n p) (Node n0 gv3 c2)), (pow2heapp n1 (find_max' n p) (Node n0 gv3 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 gv3)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 gv3)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 gv3)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1))
(pow2heapp n1 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 gv3)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 gv3 a2)), (pow2heapp n1 (find_max' n p) (Node n1 gv3 a1)), (pow2heapp n1 (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp n1 (find_max' n p) (Node n1 gv3 c2)), (pow2heapp n1 (find_max' n p) (Node n1 gv3 c1))
(pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 gv3)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 gv3)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c1))
(pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1)), (pow2heapp n1 (find_max' n p) (Node n a2 gv3)), (pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 gv3)), (pow2heapp n1 (find_max' n p) (Node n a1 c2)), (pow2heapp n1 (find_max' n p) (Node n a1 c1))
(pow2heapp n1 (find_max' n p) (Node n gv3 a2)), (pow2heapp n1 (find_max' n p) (Node n gv3 a1)), (pow2heapp n1 (find_max' n p) (Node n gv3 gv3)), (pow2heapp n1 (find_max' n p) (Node n gv3 c2)), (pow2heapp n1 (find_max' n p) (Node n gv3 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 gv3)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1))
(pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 gv3)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1)), (pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 gv3)), (pow2heapp n1 (find_max' n p) (smash a2 c2)), (pow2heapp n1 (find_max' n p) (smash a2 c1))
(pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1)), (pow2heapp n1 (find_max' n p) (smash a1 gv3)), (pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash gv3 a2)), (pow2heapp n1 (find_max' n p) (smash gv3 a1)), (pow2heapp n1 (find_max' n p) (smash gv3 gv3)), (pow2heapp n1 (find_max' n p) (smash gv3 c2)), (pow2heapp n1 (find_max' n p) (smash gv3 c1))
(pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 gv3)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2)), (pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 gv3)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1))
(pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (length p) a2), (pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) gv3), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) (Node n0 a2 a2)), (pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 gv3)), (pow2heapp n1 (length p) (Node n0 a2 c2))
(pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2)), (pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 gv3)), (pow2heapp n1 (length p) (Node n0 a1 c2)), (pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 gv3 a2)), (pow2heapp n1 (length p) (Node n0 gv3 a1)), (pow2heapp n1 (length p) (Node n0 gv3 gv3)), (pow2heapp n1 (length p) (Node n0 gv3 c2))
(pow2heapp n1 (length p) (Node n0 gv3 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 gv3)), (pow2heapp n1 (length p) (Node n0 c2 c2)), (pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 gv3)), (pow2heapp n1 (length p) (Node n0 c1 c2))
(pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 gv3)), (pow2heapp n1 (length p) (Node n1 a2 c2)), (pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2)), (pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 gv3)), (pow2heapp n1 (length p) (Node n1 a1 c2))
(pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 gv3 a2)), (pow2heapp n1 (length p) (Node n1 gv3 a1)), (pow2heapp n1 (length p) (Node n1 gv3 gv3)), (pow2heapp n1 (length p) (Node n1 gv3 c2)), (pow2heapp n1 (length p) (Node n1 gv3 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2)), (pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 gv3)), (pow2heapp n1 (length p) (Node n1 c2 c2))
(pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 gv3)), (pow2heapp n1 (length p) (Node n1 c1 c2)), (pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 gv3)), (pow2heapp n1 (length p) (Node n a2 c2))
(pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 gv3)), (pow2heapp n1 (length p) (Node n a1 c2)), (pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n gv3 a2)), (pow2heapp n1 (length p) (Node n gv3 a1)), (pow2heapp n1 (length p) (Node n gv3 gv3)), (pow2heapp n1 (length p) (Node n gv3 c2))
(pow2heapp n1 (length p) (Node n gv3 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 gv3)), (pow2heapp n1 (length p) (Node n c2 c2)), (pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c1 a2)), (pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 gv3)), (pow2heapp n1 (length p) (Node n c1 c2))
(pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 gv3)), (pow2heapp n1 (length p) (smash a2 c2)), (pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 gv3)), (pow2heapp n1 (length p) (smash a1 c2))
(pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash gv3 a2)), (pow2heapp n1 (length p) (smash gv3 a1)), (pow2heapp n1 (length p) (smash gv3 gv3)), (pow2heapp n1 (length p) (smash gv3 c2)), (pow2heapp n1 (length p) (smash gv3 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 gv3)), (pow2heapp n1 (length p) (smash c2 c2))
(pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c1 a2)), (pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 gv3)), (pow2heapp n1 (length p) (smash c1 c2)), (pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) Leaf), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 gv3))
(pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 gv3)), (pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1)), (pow2heapp n n0 (Node n0 gv3 a2)), (pow2heapp n n0 (Node n0 gv3 a1)), (pow2heapp n n0 (Node n0 gv3 gv3))
(pow2heapp n n0 (Node n0 gv3 c2)), (pow2heapp n n0 (Node n0 gv3 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1)), (pow2heapp n n0 (Node n0 c2 gv3)), (pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 gv3))
(pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1)), (pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 gv3)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1)), (pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 gv3))
(pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 gv3 a2)), (pow2heapp n n0 (Node n1 gv3 a1)), (pow2heapp n n0 (Node n1 gv3 gv3)), (pow2heapp n n0 (Node n1 gv3 c2)), (pow2heapp n n0 (Node n1 gv3 c1)), (pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1)), (pow2heapp n n0 (Node n1 c2 gv3))
(pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1)), (pow2heapp n n0 (Node n1 c1 gv3)), (pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a2 gv3))
(pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 gv3)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1)), (pow2heapp n n0 (Node n gv3 a2)), (pow2heapp n n0 (Node n gv3 a1)), (pow2heapp n n0 (Node n gv3 gv3))
(pow2heapp n n0 (Node n gv3 c2)), (pow2heapp n n0 (Node n gv3 c1)), (pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 gv3)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1)), (pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 gv3))
(pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a2 gv3)), (pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 gv3))
(pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1)), (pow2heapp n n0 (smash gv3 a2)), (pow2heapp n n0 (smash gv3 a1)), (pow2heapp n n0 (smash gv3 gv3)), (pow2heapp n n0 (smash gv3 c2)), (pow2heapp n n0 (smash gv3 c1)), (pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 gv3))
(pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1)), (pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 gv3)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1)), (pow2heapp n n0 Leaf), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1))
(pow2heapp n n1 (Node n0 a2 gv3)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a1 a2)), (pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 gv3)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 gv3 a2)), (pow2heapp n n1 (Node n0 gv3 a1))
(pow2heapp n n1 (Node n0 gv3 gv3)), (pow2heapp n n1 (Node n0 gv3 c2)), (pow2heapp n n1 (Node n0 gv3 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 gv3)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c1 a2)), (pow2heapp n n1 (Node n0 c1 a1))
(pow2heapp n n1 (Node n0 c1 gv3)), (pow2heapp n n1 (Node n0 c1 c2)), (pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n1 a2 a2)), (pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 gv3)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1))
(pow2heapp n n1 (Node n1 a1 gv3)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 gv3 a2)), (pow2heapp n n1 (Node n1 gv3 a1)), (pow2heapp n n1 (Node n1 gv3 gv3)), (pow2heapp n n1 (Node n1 gv3 c2)), (pow2heapp n n1 (Node n1 gv3 c1)), (pow2heapp n n1 (Node n1 c2 a2)), (pow2heapp n n1 (Node n1 c2 a1))
(pow2heapp n n1 (Node n1 c2 gv3)), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 gv3)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node n a2 a2)), (pow2heapp n n1 (Node n a2 a1))
(pow2heapp n n1 (Node n a2 gv3)), (pow2heapp n n1 (Node n a2 c2)), (pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 gv3)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n gv3 a2)), (pow2heapp n n1 (Node n gv3 a1))
(pow2heapp n n1 (Node n gv3 gv3)), (pow2heapp n n1 (Node n gv3 c2)), (pow2heapp n n1 (Node n gv3 c1)), (pow2heapp n n1 (Node n c2 a2)), (pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 gv3)), (pow2heapp n n1 (Node n c2 c2)), (pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c1 a2)), (pow2heapp n n1 (Node n c1 a1))
(pow2heapp n n1 (Node n c1 gv3)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 gv3)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a1 a2)), (pow2heapp n n1 (smash a1 a1))
(pow2heapp n n1 (smash a1 gv3)), (pow2heapp n n1 (smash a1 c2)), (pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash gv3 a2)), (pow2heapp n n1 (smash gv3 a1)), (pow2heapp n n1 (smash gv3 gv3)), (pow2heapp n n1 (smash gv3 c2)), (pow2heapp n n1 (smash gv3 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1))
(pow2heapp n n1 (smash c2 gv3)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c1 a2)), (pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 gv3)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 Leaf), (pow2heapp n n (Node n0 a2 a2))
(pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 gv3)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 gv3)), (pow2heapp n n (Node n0 a1 c2)), (pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 gv3 a2))
(pow2heapp n n (Node n0 gv3 a1)), (pow2heapp n n (Node n0 gv3 gv3)), (pow2heapp n n (Node n0 gv3 c2)), (pow2heapp n n (Node n0 gv3 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1)), (pow2heapp n n (Node n0 c2 gv3)), (pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c1 a2))
(pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 gv3)), (pow2heapp n n (Node n0 c1 c2)), (pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n1 a2 a2)), (pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 gv3)), (pow2heapp n n (Node n1 a2 c2)), (pow2heapp n n (Node n1 a2 c1)), (pow2heapp n n (Node n1 a1 a2))
(pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 gv3)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 gv3 a2)), (pow2heapp n n (Node n1 gv3 a1)), (pow2heapp n n (Node n1 gv3 gv3)), (pow2heapp n n (Node n1 gv3 c2)), (pow2heapp n n (Node n1 gv3 c1)), (pow2heapp n n (Node n1 c2 a2))
(pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 gv3)), (pow2heapp n n (Node n1 c2 c2)), (pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1)), (pow2heapp n n (Node n1 c1 gv3)), (pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node n a2 a2))
(pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv3)), (pow2heapp n n (Node n a2 c2)), (pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv3)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1)), (pow2heapp n n (Node n gv3 a2))
(pow2heapp n n (Node n gv3 a1)), (pow2heapp n n (Node n gv3 gv3)), (pow2heapp n n (Node n gv3 c2)), (pow2heapp n n (Node n gv3 c1)), (pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 gv3)), (pow2heapp n n (Node n c2 c2)), (pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c1 a2))
(pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 gv3)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv3)), (pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a1 a2))
(pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 gv3)), (pow2heapp n n (smash a1 c2)), (pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash gv3 a2)), (pow2heapp n n (smash gv3 a1)), (pow2heapp n n (smash gv3 gv3)), (pow2heapp n n (smash gv3 c2)), (pow2heapp n n (smash gv3 c1)), (pow2heapp n n (smash c2 a2))
(pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 gv3)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1)), (pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 gv3)), (pow2heapp n n (smash c1 c2)), (pow2heapp n n (smash c1 c1)), (pow2heapp n n Leaf)
(pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) gv3), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1))
(pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp n (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp n (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp n (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp n (find_max' n0 p) (Node n0 gv3 c1))
(pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1))
(pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1))
(pow2heapp n (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp n (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp n (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp n (find_max' n0 p) (Node n1 gv3 c2)), (pow2heapp n (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1))
(pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 gv3)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1))
(pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 gv3)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n gv3 a2)), (pow2heapp n (find_max' n0 p) (Node n gv3 a1)), (pow2heapp n (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp n (find_max' n0 p) (Node n gv3 c2)), (pow2heapp n (find_max' n0 p) (Node n gv3 c1))
(pow2heapp n (find_max' n0 p) (Node n c2 a2)), (pow2heapp n (find_max' n0 p) (Node n c2 a1)), (pow2heapp n (find_max' n0 p) (Node n c2 gv3)), (pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1)), (pow2heapp n (find_max' n0 p) (Node n c1 gv3)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1))
(pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a2 gv3)), (pow2heapp n (find_max' n0 p) (smash a2 c2)), (pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 gv3)), (pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1))
(pow2heapp n (find_max' n0 p) (smash gv3 a2)), (pow2heapp n (find_max' n0 p) (smash gv3 a1)), (pow2heapp n (find_max' n0 p) (smash gv3 gv3)), (pow2heapp n (find_max' n0 p) (smash gv3 c2)), (pow2heapp n (find_max' n0 p) (smash gv3 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1)), (pow2heapp n (find_max' n0 p) (smash c2 gv3)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1))
(pow2heapp n (find_max' n0 p) (smash c1 a2)), (pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 gv3)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) gv3), (pow2heapp n (find_max' n1 p) c2)
(pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 gv3)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp n (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp n (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heapp n (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp n (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c2))
(pow2heapp n (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 gv3)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 gv3)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp n (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp n (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp n (find_max' n1 p) (Node n1 gv3 c2))
(pow2heapp n (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 gv3)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c2))
(pow2heapp n (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 gv3)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2)), (pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 gv3)), (pow2heapp n (find_max' n1 p) (Node n a1 c2))
(pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n gv3 a2)), (pow2heapp n (find_max' n1 p) (Node n gv3 a1)), (pow2heapp n (find_max' n1 p) (Node n gv3 gv3)), (pow2heapp n (find_max' n1 p) (Node n gv3 c2)), (pow2heapp n (find_max' n1 p) (Node n gv3 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1)), (pow2heapp n (find_max' n1 p) (Node n c2 gv3)), (pow2heapp n (find_max' n1 p) (Node n c2 c2))
(pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 gv3)), (pow2heapp n (find_max' n1 p) (Node n c1 c2)), (pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2)), (pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 gv3)), (pow2heapp n (find_max' n1 p) (smash a2 c2))
(pow2heapp n (find_max' n1 p) (smash a2 c1)), (pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 gv3)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash gv3 a2)), (pow2heapp n (find_max' n1 p) (smash gv3 a1)), (pow2heapp n (find_max' n1 p) (smash gv3 gv3)), (pow2heapp n (find_max' n1 p) (smash gv3 c2))
(pow2heapp n (find_max' n1 p) (smash gv3 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 gv3)), (pow2heapp n (find_max' n1 p) (smash c2 c2)), (pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1)), (pow2heapp n (find_max' n1 p) (smash c1 gv3)), (pow2heapp n (find_max' n1 p) (smash c1 c2))
(pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) gv3), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 gv3))
(pow2heapp n (find_max' n p) (Node n0 a2 c2)), (pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2)), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 gv3)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 gv3 a2)), (pow2heapp n (find_max' n p) (Node n0 gv3 a1)), (pow2heapp n (find_max' n p) (Node n0 gv3 gv3))
(pow2heapp n (find_max' n p) (Node n0 gv3 c2)), (pow2heapp n (find_max' n p) (Node n0 gv3 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2)), (pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 gv3)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2)), (pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 gv3))
(pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2)), (pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 gv3)), (pow2heapp n (find_max' n p) (Node n1 a2 c2)), (pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 gv3))
(pow2heapp n (find_max' n p) (Node n1 a1 c2)), (pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 gv3 a2)), (pow2heapp n (find_max' n p) (Node n1 gv3 a1)), (pow2heapp n (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp n (find_max' n p) (Node n1 gv3 c2)), (pow2heapp n (find_max' n p) (Node n1 gv3 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2)), (pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 gv3))
(pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2)), (pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 gv3)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node n a2 a2)), (pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 gv3))
(pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 gv3)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n gv3 a2)), (pow2heapp n (find_max' n p) (Node n gv3 a1)), (pow2heapp n (find_max' n p) (Node n gv3 gv3))
(pow2heapp n (find_max' n p) (Node n gv3 c2)), (pow2heapp n (find_max' n p) (Node n gv3 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2)), (pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 gv3)), (pow2heapp n (find_max' n p) (Node n c2 c2)), (pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 gv3))
(pow2heapp n (find_max' n p) (Node n c1 c2)), (pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 gv3)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a1 a2)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 gv3))
(pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash gv3 a2)), (pow2heapp n (find_max' n p) (smash gv3 a1)), (pow2heapp n (find_max' n p) (smash gv3 gv3)), (pow2heapp n (find_max' n p) (smash gv3 c2)), (pow2heapp n (find_max' n p) (smash gv3 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 gv3))
(pow2heapp n (find_max' n p) (smash c2 c2)), (pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c1 a2)), (pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 gv3)), (pow2heapp n (find_max' n p) (smash c1 c2)), (pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1)
(pow2heapp n (length p) gv3), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 gv3)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1)), (pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1))
(pow2heapp n (length p) (Node n0 a1 gv3)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 gv3 a2)), (pow2heapp n (length p) (Node n0 gv3 a1)), (pow2heapp n (length p) (Node n0 gv3 gv3)), (pow2heapp n (length p) (Node n0 gv3 c2)), (pow2heapp n (length p) (Node n0 gv3 c1)), (pow2heapp n (length p) (Node n0 c2 a2)), (pow2heapp n (length p) (Node n0 c2 a1))
(pow2heapp n (length p) (Node n0 c2 gv3)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1)), (pow2heapp n (length p) (Node n0 c1 gv3)), (pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1))
(pow2heapp n (length p) (Node n1 a2 gv3)), (pow2heapp n (length p) (Node n1 a2 c2)), (pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 gv3)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1)), (pow2heapp n (length p) (Node n1 gv3 a2)), (pow2heapp n (length p) (Node n1 gv3 a1))
(pow2heapp n (length p) (Node n1 gv3 gv3)), (pow2heapp n (length p) (Node n1 gv3 c2)), (pow2heapp n (length p) (Node n1 gv3 c1)), (pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 gv3)), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c1 a2)), (pow2heapp n (length p) (Node n1 c1 a1))
(pow2heapp n (length p) (Node n1 c1 gv3)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a2 gv3)), (pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1))
(pow2heapp n (length p) (Node n a1 gv3)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1)), (pow2heapp n (length p) (Node n gv3 a2)), (pow2heapp n (length p) (Node n gv3 a1)), (pow2heapp n (length p) (Node n gv3 gv3)), (pow2heapp n (length p) (Node n gv3 c2)), (pow2heapp n (length p) (Node n gv3 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1))
(pow2heapp n (length p) (Node n c2 gv3)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1)), (pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 gv3)), (pow2heapp n (length p) (Node n c1 c2)), (pow2heapp n (length p) (Node n c1 c1)), (pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1))
(pow2heapp n (length p) (smash a2 gv3)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) (smash a1 gv3)), (pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash gv3 a2)), (pow2heapp n (length p) (smash gv3 a1))
(pow2heapp n (length p) (smash gv3 gv3)), (pow2heapp n (length p) (smash gv3 c2)), (pow2heapp n (length p) (smash gv3 c1)), (pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 gv3)), (pow2heapp n (length p) (smash c2 c2)), (pow2heapp n (length p) (smash c2 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1))
(pow2heapp n (length p) (smash c1 gv3)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1)), (pow2heapp n (length p) Leaf), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 gv3), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv3 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv3 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n gv3 a2))
(pow2heapp (find_max' n0 p) n0 (Node n gv3 a1)), (pow2heapp (find_max' n0 p) n0 (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n gv3 c2)), (pow2heapp (find_max' n0 p) n0 (Node n gv3 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 gv3)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 gv3)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2))
(pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 gv3)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2)), (pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash gv3 a2)), (pow2heapp (find_max' n0 p) n0 (smash gv3 a1)), (pow2heapp (find_max' n0 p) n0 (smash gv3 gv3)), (pow2heapp (find_max' n0 p) n0 (smash gv3 c2)), (pow2heapp (find_max' n0 p) n0 (smash gv3 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2))
(pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 gv3)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2)), (pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 gv3)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 Leaf)
(pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1), (pow2heapp (find_max' n0 p) n1 gv3), (pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv3 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv3 c1))
(pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1))
(pow2heapp (find_max' n0 p) n1 (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n gv3 a2)), (pow2heapp (find_max' n0 p) n1 (Node n gv3 a1)), (pow2heapp (find_max' n0 p) n1 (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n gv3 c2)), (pow2heapp (find_max' n0 p) n1 (Node n gv3 c1))
(pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 gv3)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1))
(pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1)), (pow2heapp (find_max' n0 p) n1 (smash a2 gv3)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1)), (pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 gv3)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1))
(pow2heapp (find_max' n0 p) n1 (smash gv3 a2)), (pow2heapp (find_max' n0 p) n1 (smash gv3 a1)), (pow2heapp (find_max' n0 p) n1 (smash gv3 gv3)), (pow2heapp (find_max' n0 p) n1 (smash gv3 c2)), (pow2heapp (find_max' n0 p) n1 (smash gv3 c1)), (pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1)), (pow2heapp (find_max' n0 p) n1 (smash c2 gv3)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1))
(pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1)), (pow2heapp (find_max' n0 p) n1 (smash c1 gv3)), (pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n gv3), (pow2heapp (find_max' n0 p) n c2)
(pow2heapp (find_max' n0 p) n c1), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 gv3 a2)), (pow2heapp (find_max' n0 p) n (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) n (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) n (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) n (Node n0 gv3 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2))
(pow2heapp (find_max' n0 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2))
(pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) n (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) n (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) n (Node n1 gv3 c2))
(pow2heapp (find_max' n0 p) n (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2))
(pow2heapp (find_max' n0 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 gv3)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 gv3)), (pow2heapp (find_max' n0 p) n (Node n a1 c2))
(pow2heapp (find_max' n0 p) n (Node n a1 c1)), (pow2heapp (find_max' n0 p) n (Node n gv3 a2)), (pow2heapp (find_max' n0 p) n (Node n gv3 a1)), (pow2heapp (find_max' n0 p) n (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) n (Node n gv3 c2)), (pow2heapp (find_max' n0 p) n (Node n gv3 c1)), (pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 gv3)), (pow2heapp (find_max' n0 p) n (Node n c2 c2))
(pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 gv3)), (pow2heapp (find_max' n0 p) n (Node n c1 c2)), (pow2heapp (find_max' n0 p) n (Node n c1 c1)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 gv3)), (pow2heapp (find_max' n0 p) n (smash a2 c2))
(pow2heapp (find_max' n0 p) n (smash a2 c1)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 gv3)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash gv3 a2)), (pow2heapp (find_max' n0 p) n (smash gv3 a1)), (pow2heapp (find_max' n0 p) n (smash gv3 gv3)), (pow2heapp (find_max' n0 p) n (smash gv3 c2))
(pow2heapp (find_max' n0 p) n (smash gv3 c1)), (pow2heapp (find_max' n0 p) n (smash c2 a2)), (pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 gv3)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1)), (pow2heapp (find_max' n0 p) n (smash c1 gv3)), (pow2heapp (find_max' n0 p) n (smash c1 c2))
(pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) gv3), (pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv3 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv3 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 gv3))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1)
(pow2heapp (find_max' n0 p) (find_max' n1 p) gv3), (pow2heapp (find_max' n0 p) (find_max' n1 p) c2), (pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv3 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv3 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1), (pow2heapp (find_max' n0 p) (find_max' n p) gv3), (pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv3 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv3 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv3 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv3 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv3 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv3 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv3 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 gv3)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf)
(pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) gv3), (pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv3 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv3 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv3 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv3 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n1 gv3 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv3 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv3 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv3 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv3 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n gv3 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv3 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n gv3 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n gv3 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 gv3)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1))
(pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 gv3)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 gv3)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1))
(pow2heapp (find_max' n0 p) (length p) (smash gv3 a2)), (pow2heapp (find_max' n0 p) (length p) (smash gv3 a1)), (pow2heapp (find_max' n0 p) (length p) (smash gv3 gv3)), (pow2heapp (find_max' n0 p) (length p) (smash gv3 c2)), (pow2heapp (find_max' n0 p) (length p) (smash gv3 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 gv3)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1))
(pow2heapp (find_max' n0 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 gv3)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1), (pow2heapp (find_max' n1 p) n0 gv3), (pow2heapp (find_max' n1 p) n0 c2)
(pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv3 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2))
(pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv3 c2))
(pow2heapp (find_max' n1 p) n0 (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2))
(pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c2))
(pow2heapp (find_max' n1 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n gv3 a2)), (pow2heapp (find_max' n1 p) n0 (Node n gv3 a1)), (pow2heapp (find_max' n1 p) n0 (Node n gv3 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n gv3 c2)), (pow2heapp (find_max' n1 p) n0 (Node n gv3 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c2))
(pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 gv3)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 gv3)), (pow2heapp (find_max' n1 p) n0 (smash a2 c2))
(pow2heapp (find_max' n1 p) n0 (smash a2 c1)), (pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 gv3)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash gv3 a2)), (pow2heapp (find_max' n1 p) n0 (smash gv3 a1)), (pow2heapp (find_max' n1 p) n0 (smash gv3 gv3)), (pow2heapp (find_max' n1 p) n0 (smash gv3 c2))
(pow2heapp (find_max' n1 p) n0 (smash gv3 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 gv3)), (pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1)), (pow2heapp (find_max' n1 p) n0 (smash c1 gv3)), (pow2heapp (find_max' n1 p) n0 (smash c1 c2))
(pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 gv3), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv3 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv3 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n gv3 a2)), (pow2heapp (find_max' n1 p) n1 (Node n gv3 a1)), (pow2heapp (find_max' n1 p) n1 (Node n gv3 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n gv3 c2)), (pow2heapp (find_max' n1 p) n1 (Node n gv3 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 gv3)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 gv3))
(pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 gv3)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2)), (pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 gv3))
(pow2heapp (find_max' n1 p) n1 (smash a1 c2)), (pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash gv3 a2)), (pow2heapp (find_max' n1 p) n1 (smash gv3 a1)), (pow2heapp (find_max' n1 p) n1 (smash gv3 gv3)), (pow2heapp (find_max' n1 p) n1 (smash gv3 c2)), (pow2heapp (find_max' n1 p) n1 (smash gv3 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2)), (pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 gv3))
(pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 gv3)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2)), (pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 Leaf), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1)
(pow2heapp (find_max' n1 p) n gv3), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 gv3)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1))
(pow2heapp (find_max' n1 p) n (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) n (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) n (Node n0 gv3 gv3)), (pow2heapp (find_max' n1 p) n (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) n (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 gv3)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a1))
(pow2heapp (find_max' n1 p) n (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 gv3)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) n (Node n1 gv3 a1))
(pow2heapp (find_max' n1 p) n (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) n (Node n1 gv3 c2)), (pow2heapp (find_max' n1 p) n (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 gv3)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1))
(pow2heapp (find_max' n1 p) n (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1)), (pow2heapp (find_max' n1 p) n (Node n a2 gv3)), (pow2heapp (find_max' n1 p) n (Node n a2 c2)), (pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1))
(pow2heapp (find_max' n1 p) n (Node n a1 gv3)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n gv3 a2)), (pow2heapp (find_max' n1 p) n (Node n gv3 a1)), (pow2heapp (find_max' n1 p) n (Node n gv3 gv3)), (pow2heapp (find_max' n1 p) n (Node n gv3 c2)), (pow2heapp (find_max' n1 p) n (Node n gv3 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1))
(pow2heapp (find_max' n1 p) n (Node n c2 gv3)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1)), (pow2heapp (find_max' n1 p) n (Node n c1 a2)), (pow2heapp (find_max' n1 p) n (Node n c1 a1)), (pow2heapp (find_max' n1 p) n (Node n c1 gv3)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1))
(pow2heapp (find_max' n1 p) n (smash a2 gv3)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1)), (pow2heapp (find_max' n1 p) n (smash a1 gv3)), (pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash gv3 a2)), (pow2heapp (find_max' n1 p) n (smash gv3 a1))
(pow2heapp (find_max' n1 p) n (smash gv3 gv3)), (pow2heapp (find_max' n1 p) n (smash gv3 c2)), (pow2heapp (find_max' n1 p) n (smash gv3 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2)), (pow2heapp (find_max' n1 p) n (smash c2 a1)), (pow2heapp (find_max' n1 p) n (smash c2 gv3)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1))
(pow2heapp (find_max' n1 p) n (smash c1 gv3)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1)), (pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1), (pow2heapp (find_max' n1 p) (find_max' n0 p) gv3), (pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv3 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv3 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf)
(pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) gv3), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv3 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv3 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) a2), (pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) gv3), (pow2heapp (find_max' n1 p) (find_max' n p) c2)
(pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv3 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv3 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv3 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv3 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv3 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv3 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash gv3 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 gv3)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1), (pow2heapp (find_max' n1 p) (length p) gv3), (pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv3 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv3 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv3 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n0 gv3 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv3 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv3 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv3 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv3 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv3 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv3 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv3 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv3 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n gv3 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv3 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 gv3)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 gv3))
(pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 gv3)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 gv3))
(pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash gv3 a2)), (pow2heapp (find_max' n1 p) (length p) (smash gv3 a1)), (pow2heapp (find_max' n1 p) (length p) (smash gv3 gv3)), (pow2heapp (find_max' n1 p) (length p) (smash gv3 c2)), (pow2heapp (find_max' n1 p) (length p) (smash gv3 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 gv3))
(pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 gv3)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1)
(pow2heapp (find_max' n p) n0 gv3), (pow2heapp (find_max' n p) n0 c2), (pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 gv3)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1))
(pow2heapp (find_max' n p) n0 (Node n0 a1 gv3)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 gv3 a2)), (pow2heapp (find_max' n p) n0 (Node n0 gv3 a1)), (pow2heapp (find_max' n p) n0 (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) n0 (Node n0 gv3 c2)), (pow2heapp (find_max' n p) n0 (Node n0 gv3 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a1))
(pow2heapp (find_max' n p) n0 (Node n0 c2 gv3)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 gv3)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1))
(pow2heapp (find_max' n p) n0 (Node n1 a2 gv3)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 gv3)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 gv3 a2)), (pow2heapp (find_max' n p) n0 (Node n1 gv3 a1))
(pow2heapp (find_max' n p) n0 (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) n0 (Node n1 gv3 c2)), (pow2heapp (find_max' n p) n0 (Node n1 gv3 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 gv3)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a1))
(pow2heapp (find_max' n p) n0 (Node n1 c1 gv3)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 gv3)), (pow2heapp (find_max' n p) n0 (Node n a2 c2)), (pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1))
(pow2heapp (find_max' n p) n0 (Node n a1 gv3)), (pow2heapp (find_max' n p) n0 (Node n a1 c2)), (pow2heapp (find_max' n p) n0 (Node n a1 c1)), (pow2heapp (find_max' n p) n0 (Node n gv3 a2)), (pow2heapp (find_max' n p) n0 (Node n gv3 a1)), (pow2heapp (find_max' n p) n0 (Node n gv3 gv3)), (pow2heapp (find_max' n p) n0 (Node n gv3 c2)), (pow2heapp (find_max' n p) n0 (Node n gv3 c1)), (pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1))
(pow2heapp (find_max' n p) n0 (Node n c2 gv3)), (pow2heapp (find_max' n p) n0 (Node n c2 c2)), (pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 gv3)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1))
(pow2heapp (find_max' n p) n0 (smash a2 gv3)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 gv3)), (pow2heapp (find_max' n p) n0 (smash a1 c2)), (pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash gv3 a2)), (pow2heapp (find_max' n p) n0 (smash gv3 a1))
(pow2heapp (find_max' n p) n0 (smash gv3 gv3)), (pow2heapp (find_max' n p) n0 (smash gv3 c2)), (pow2heapp (find_max' n p) n0 (smash gv3 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 gv3)), (pow2heapp (find_max' n p) n0 (smash c2 c2)), (pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1))
(pow2heapp (find_max' n p) n0 (smash c1 gv3)), (pow2heapp (find_max' n p) n0 (smash c1 c2)), (pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 gv3), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1), (pow2heapp (find_max' n p) n1 (Node n0 a2 a2))
(pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 gv3)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 gv3)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 gv3 a2))
(pow2heapp (find_max' n p) n1 (Node n0 gv3 a1)), (pow2heapp (find_max' n p) n1 (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) n1 (Node n0 gv3 c2)), (pow2heapp (find_max' n p) n1 (Node n0 gv3 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 gv3)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2))
(pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 gv3)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 gv3)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a2))
(pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 gv3)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 gv3 a2)), (pow2heapp (find_max' n p) n1 (Node n1 gv3 a1)), (pow2heapp (find_max' n p) n1 (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) n1 (Node n1 gv3 c2)), (pow2heapp (find_max' n p) n1 (Node n1 gv3 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2))
(pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 gv3)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 gv3)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n a2 a2))
(pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 gv3)), (pow2heapp (find_max' n p) n1 (Node n a2 c2)), (pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 gv3)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1)), (pow2heapp (find_max' n p) n1 (Node n gv3 a2))
(pow2heapp (find_max' n p) n1 (Node n gv3 a1)), (pow2heapp (find_max' n p) n1 (Node n gv3 gv3)), (pow2heapp (find_max' n p) n1 (Node n gv3 c2)), (pow2heapp (find_max' n p) n1 (Node n gv3 c1)), (pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 gv3)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c1 a2))
(pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 gv3)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1)), (pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1)), (pow2heapp (find_max' n p) n1 (smash a2 gv3)), (pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2))
(pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 gv3)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash gv3 a2)), (pow2heapp (find_max' n p) n1 (smash gv3 a1)), (pow2heapp (find_max' n p) n1 (smash gv3 gv3)), (pow2heapp (find_max' n p) n1 (smash gv3 c2)), (pow2heapp (find_max' n p) n1 (smash gv3 c1)), (pow2heapp (find_max' n p) n1 (smash c2 a2))
(pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 gv3)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1)), (pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 gv3)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 Leaf)
(pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n gv3), (pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 gv3)), (pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1))
(pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 gv3)), (pow2heapp (find_max' n p) n (Node n0 a1 c2)), (pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 gv3 a2)), (pow2heapp (find_max' n p) n (Node n0 gv3 a1)), (pow2heapp (find_max' n p) n (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) n (Node n0 gv3 c2)), (pow2heapp (find_max' n p) n (Node n0 gv3 c1))
(pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 gv3)), (pow2heapp (find_max' n p) n (Node n0 c2 c2)), (pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 gv3)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1))
(pow2heapp (find_max' n p) n (Node n1 a2 a2)), (pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 gv3)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2)), (pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 gv3)), (pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1))
(pow2heapp (find_max' n p) n (Node n1 gv3 a2)), (pow2heapp (find_max' n p) n (Node n1 gv3 a1)), (pow2heapp (find_max' n p) n (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) n (Node n1 gv3 c2)), (pow2heapp (find_max' n p) n (Node n1 gv3 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 gv3)), (pow2heapp (find_max' n p) n (Node n1 c2 c2)), (pow2heapp (find_max' n p) n (Node n1 c2 c1))
(pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 gv3)), (pow2heapp (find_max' n p) n (Node n1 c1 c2)), (pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 gv3)), (pow2heapp (find_max' n p) n (Node n a2 c2)), (pow2heapp (find_max' n p) n (Node n a2 c1))
(pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 gv3)), (pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n gv3 a2)), (pow2heapp (find_max' n p) n (Node n gv3 a1)), (pow2heapp (find_max' n p) n (Node n gv3 gv3)), (pow2heapp (find_max' n p) n (Node n gv3 c2)), (pow2heapp (find_max' n p) n (Node n gv3 c1))
(pow2heapp (find_max' n p) n (Node n c2 a2)), (pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 gv3)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2)), (pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 gv3)), (pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1))
(pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 gv3)), (pow2heapp (find_max' n p) n (smash a2 c2)), (pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 gv3)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1))
(pow2heapp (find_max' n p) n (smash gv3 a2)), (pow2heapp (find_max' n p) n (smash gv3 a1)), (pow2heapp (find_max' n p) n (smash gv3 gv3)), (pow2heapp (find_max' n p) n (smash gv3 c2)), (pow2heapp (find_max' n p) n (smash gv3 c1)), (pow2heapp (find_max' n p) n (smash c2 a2)), (pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 gv3)), (pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1))
(pow2heapp (find_max' n p) n (smash c1 a2)), (pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 gv3)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) gv3), (pow2heapp (find_max' n p) (find_max' n0 p) c2)
(pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv3 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv3 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv3 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv3 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv3 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv3 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv3 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv3 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv3 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash gv3 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 gv3)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1), (pow2heapp (find_max' n p) (find_max' n1 p) gv3), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv3 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv3 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv3 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv3 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv3 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv3 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv3 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv3 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv3 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv3 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 gv3))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 gv3)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1)
(pow2heapp (find_max' n p) (find_max' n p) gv3), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv3 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv3 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv3 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv3 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv3 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv3 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv3 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv3 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv3 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv3 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash a2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv3 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv3 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash gv3 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv3 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv3 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c1 gv3)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) gv3), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv3 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 gv3 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv3 gv3)), (pow2heapp (find_max' n p) (length p) (Node n0 gv3 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv3 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2))
(pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2))
(pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv3 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 gv3 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv3 gv3)), (pow2heapp (find_max' n p) (length p) (Node n1 gv3 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 gv3 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2))
(pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n gv3 a2))
(pow2heapp (find_max' n p) (length p) (Node n gv3 a1)), (pow2heapp (find_max' n p) (length p) (Node n gv3 gv3)), (pow2heapp (find_max' n p) (length p) (Node n gv3 c2)), (pow2heapp (find_max' n p) (length p) (Node n gv3 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 gv3)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2))
(pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 gv3)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 gv3)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2))
(pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 gv3)), (pow2heapp (find_max' n p) (length p) (smash a1 c2)), (pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash gv3 a2)), (pow2heapp (find_max' n p) (length p) (smash gv3 a1)), (pow2heapp (find_max' n p) (length p) (smash gv3 gv3)), (pow2heapp (find_max' n p) (length p) (smash gv3 c2)), (pow2heapp (find_max' n p) (length p) (smash gv3 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2))
(pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 gv3)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 gv3)), (pow2heapp (find_max' n p) (length p) (smash c1 c2)), (pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) Leaf)
(pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1), (pow2heapp (length p) n0 gv3), (pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1)), (pow2heapp (length p) n0 (Node n0 a2 gv3)), (pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1))
(pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n0 a1 gv3)), (pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 gv3 a2)), (pow2heapp (length p) n0 (Node n0 gv3 a1)), (pow2heapp (length p) n0 (Node n0 gv3 gv3)), (pow2heapp (length p) n0 (Node n0 gv3 c2)), (pow2heapp (length p) n0 (Node n0 gv3 c1))
(pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1)), (pow2heapp (length p) n0 (Node n0 c2 gv3)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1)), (pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 gv3)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1))
(pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 gv3)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1)), (pow2heapp (length p) n0 (Node n1 a1 gv3)), (pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1))
(pow2heapp (length p) n0 (Node n1 gv3 a2)), (pow2heapp (length p) n0 (Node n1 gv3 a1)), (pow2heapp (length p) n0 (Node n1 gv3 gv3)), (pow2heapp (length p) n0 (Node n1 gv3 c2)), (pow2heapp (length p) n0 (Node n1 gv3 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1)), (pow2heapp (length p) n0 (Node n1 c2 gv3)), (pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1))
(pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1)), (pow2heapp (length p) n0 (Node n1 c1 gv3)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 gv3)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1))
(pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (Node n a1 gv3)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1)), (pow2heapp (length p) n0 (Node n gv3 a2)), (pow2heapp (length p) n0 (Node n gv3 a1)), (pow2heapp (length p) n0 (Node n gv3 gv3)), (pow2heapp (length p) n0 (Node n gv3 c2)), (pow2heapp (length p) n0 (Node n gv3 c1))
(pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 gv3)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1)), (pow2heapp (length p) n0 (Node n c1 gv3)), (pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1))
(pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a2 gv3)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 gv3)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1))
(pow2heapp (length p) n0 (smash gv3 a2)), (pow2heapp (length p) n0 (smash gv3 a1)), (pow2heapp (length p) n0 (smash gv3 gv3)), (pow2heapp (length p) n0 (smash gv3 c2)), (pow2heapp (length p) n0 (smash gv3 c1)), (pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1)), (pow2heapp (length p) n0 (smash c2 gv3)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1))
(pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1)), (pow2heapp (length p) n0 (smash c1 gv3)), (pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n1 a2), (pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 gv3), (pow2heapp (length p) n1 c2)
(pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 gv3)), (pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 gv3)), (pow2heapp (length p) n1 (Node n0 a1 c2))
(pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 gv3 a2)), (pow2heapp (length p) n1 (Node n0 gv3 a1)), (pow2heapp (length p) n1 (Node n0 gv3 gv3)), (pow2heapp (length p) n1 (Node n0 gv3 c2)), (pow2heapp (length p) n1 (Node n0 gv3 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 gv3)), (pow2heapp (length p) n1 (Node n0 c2 c2))
(pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 gv3)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2)), (pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 gv3)), (pow2heapp (length p) n1 (Node n1 a2 c2))
(pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 gv3)), (pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 gv3 a2)), (pow2heapp (length p) n1 (Node n1 gv3 a1)), (pow2heapp (length p) n1 (Node n1 gv3 gv3)), (pow2heapp (length p) n1 (Node n1 gv3 c2))
(pow2heapp (length p) n1 (Node n1 gv3 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 gv3)), (pow2heapp (length p) n1 (Node n1 c2 c2)), (pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 gv3)), (pow2heapp (length p) n1 (Node n1 c1 c2))
(pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 gv3)), (pow2heapp (length p) n1 (Node n a2 c2)), (pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a1 a2)), (pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 gv3)), (pow2heapp (length p) n1 (Node n a1 c2))
(pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n gv3 a2)), (pow2heapp (length p) n1 (Node n gv3 a1)), (pow2heapp (length p) n1 (Node n gv3 gv3)), (pow2heapp (length p) n1 (Node n gv3 c2)), (pow2heapp (length p) n1 (Node n gv3 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 gv3)), (pow2heapp (length p) n1 (Node n c2 c2))
(pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c1 a2)), (pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 gv3)), (pow2heapp (length p) n1 (Node n c1 c2)), (pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 gv3)), (pow2heapp (length p) n1 (smash a2 c2))
(pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 gv3)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash gv3 a2)), (pow2heapp (length p) n1 (smash gv3 a1)), (pow2heapp (length p) n1 (smash gv3 gv3)), (pow2heapp (length p) n1 (smash gv3 c2))
(pow2heapp (length p) n1 (smash gv3 c1)), (pow2heapp (length p) n1 (smash c2 a2)), (pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 gv3)), (pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 gv3)), (pow2heapp (length p) n1 (smash c1 c2))
(pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n gv3), (pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 gv3))
(pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 gv3)), (pow2heapp (length p) n (Node n0 a1 c2)), (pow2heapp (length p) n (Node n0 a1 c1)), (pow2heapp (length p) n (Node n0 gv3 a2)), (pow2heapp (length p) n (Node n0 gv3 a1)), (pow2heapp (length p) n (Node n0 gv3 gv3))
(pow2heapp (length p) n (Node n0 gv3 c2)), (pow2heapp (length p) n (Node n0 gv3 c1)), (pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 gv3)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c1 a2)), (pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 gv3))
(pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n1 a2 a2)), (pow2heapp (length p) n (Node n1 a2 a1)), (pow2heapp (length p) n (Node n1 a2 gv3)), (pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 gv3))
(pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 gv3 a2)), (pow2heapp (length p) n (Node n1 gv3 a1)), (pow2heapp (length p) n (Node n1 gv3 gv3)), (pow2heapp (length p) n (Node n1 gv3 c2)), (pow2heapp (length p) n (Node n1 gv3 c1)), (pow2heapp (length p) n (Node n1 c2 a2)), (pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 gv3))
(pow2heapp (length p) n (Node n1 c2 c2)), (pow2heapp (length p) n (Node n1 c2 c1)), (pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 gv3)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 gv3))
(pow2heapp (length p) n (Node n a2 c2)), (pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (Node n a1 gv3)), (pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n gv3 a2)), (pow2heapp (length p) n (Node n gv3 a1)), (pow2heapp (length p) n (Node n gv3 gv3))
(pow2heapp (length p) n (Node n gv3 c2)), (pow2heapp (length p) n (Node n gv3 c1)), (pow2heapp (length p) n (Node n c2 a2)), (pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 gv3)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c1 a2)), (pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 gv3))
(pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 gv3)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 gv3))
(pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash gv3 a2)), (pow2heapp (length p) n (smash gv3 a1)), (pow2heapp (length p) n (smash gv3 gv3)), (pow2heapp (length p) n (smash gv3 c2)), (pow2heapp (length p) n (smash gv3 c1)), (pow2heapp (length p) n (smash c2 a2)), (pow2heapp (length p) n (smash c2 a1)), (pow2heapp (length p) n (smash c2 gv3))
(pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c1 a2)), (pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 gv3)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1)
(pow2heapp (length p) (find_max' n0 p) gv3), (pow2heapp (length p) (find_max' n0 p) c2), (pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv3 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv3 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv3 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv3 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv3 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv3 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv3 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n1 gv3 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv3 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv3 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n1 c1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n a1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv3 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n gv3 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv3 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n gv3 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n gv3 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n c2 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 gv3)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1))
(pow2heapp (length p) (find_max' n0 p) (smash a2 gv3)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 gv3)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash gv3 a2)), (pow2heapp (length p) (find_max' n0 p) (smash gv3 a1))
(pow2heapp (length p) (find_max' n0 p) (smash gv3 gv3)), (pow2heapp (length p) (find_max' n0 p) (smash gv3 c2)), (pow2heapp (length p) (find_max' n0 p) (smash gv3 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 gv3)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (length p) (find_max' n0 p) (smash c1 gv3)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) gv3), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv3 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n0 gv3 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv3 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv3 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv3 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv3 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv3 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv3 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv3 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv3 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv3 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n gv3 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv3 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n gv3 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv3 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 gv3)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 gv3)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2))
(pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 gv3)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash gv3 a2)), (pow2heapp (length p) (find_max' n1 p) (smash gv3 a1)), (pow2heapp (length p) (find_max' n1 p) (smash gv3 gv3)), (pow2heapp (length p) (find_max' n1 p) (smash gv3 c2)), (pow2heapp (length p) (find_max' n1 p) (smash gv3 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a2))
(pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 gv3)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 gv3)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) Leaf)
(pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) gv3), (pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1))
(pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv3 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv3 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv3 gv3)), (pow2heapp (length p) (find_max' n p) (Node n0 gv3 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv3 c1))
(pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1))
(pow2heapp (length p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1))
(pow2heapp (length p) (find_max' n p) (Node n1 gv3 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv3 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv3 gv3)), (pow2heapp (length p) (find_max' n p) (Node n1 gv3 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv3 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c1))
(pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c1))
(pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n gv3 a2)), (pow2heapp (length p) (find_max' n p) (Node n gv3 a1)), (pow2heapp (length p) (find_max' n p) (Node n gv3 gv3)), (pow2heapp (length p) (find_max' n p) (Node n gv3 c2)), (pow2heapp (length p) (find_max' n p) (Node n gv3 c1))
(pow2heapp (length p) (find_max' n p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 gv3)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 gv3)), (pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1))
(pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 gv3)), (pow2heapp (length p) (find_max' n p) (smash a2 c2)), (pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 gv3)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1))
(pow2heapp (length p) (find_max' n p) (smash gv3 a2)), (pow2heapp (length p) (find_max' n p) (smash gv3 a1)), (pow2heapp (length p) (find_max' n p) (smash gv3 gv3)), (pow2heapp (length p) (find_max' n p) (smash gv3 c2)), (pow2heapp (length p) (find_max' n p) (smash gv3 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2)), (pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 gv3)), (pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1))
(pow2heapp (length p) (find_max' n p) (smash c1 a2)), (pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 gv3)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) gv3), (pow2heapp (length p) (length p) c2)
(pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1)), (pow2heapp (length p) (length p) (Node n0 a2 gv3)), (pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 gv3)), (pow2heapp (length p) (length p) (Node n0 a1 c2))
(pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 gv3 a2)), (pow2heapp (length p) (length p) (Node n0 gv3 a1)), (pow2heapp (length p) (length p) (Node n0 gv3 gv3)), (pow2heapp (length p) (length p) (Node n0 gv3 c2)), (pow2heapp (length p) (length p) (Node n0 gv3 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1)), (pow2heapp (length p) (length p) (Node n0 c2 gv3)), (pow2heapp (length p) (length p) (Node n0 c2 c2))
(pow2heapp (length p) (length p) (Node n0 c2 c1)), (pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 gv3)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2)), (pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 gv3)), (pow2heapp (length p) (length p) (Node n1 a2 c2))
(pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1)), (pow2heapp (length p) (length p) (Node n1 a1 gv3)), (pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 gv3 a2)), (pow2heapp (length p) (length p) (Node n1 gv3 a1)), (pow2heapp (length p) (length p) (Node n1 gv3 gv3)), (pow2heapp (length p) (length p) (Node n1 gv3 c2))
(pow2heapp (length p) (length p) (Node n1 gv3 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 gv3)), (pow2heapp (length p) (length p) (Node n1 c2 c2)), (pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1)), (pow2heapp (length p) (length p) (Node n1 c1 gv3)), (pow2heapp (length p) (length p) (Node n1 c1 c2))
(pow2heapp (length p) (length p) (Node n1 c1 c1)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 gv3)), (pow2heapp (length p) (length p) (Node n a2 c2)), (pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (Node n a1 gv3)), (pow2heapp (length p) (length p) (Node n a1 c2))
(pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n gv3 a2)), (pow2heapp (length p) (length p) (Node n gv3 a1)), (pow2heapp (length p) (length p) (Node n gv3 gv3)), (pow2heapp (length p) (length p) (Node n gv3 c2)), (pow2heapp (length p) (length p) (Node n gv3 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1)), (pow2heapp (length p) (length p) (Node n c2 gv3)), (pow2heapp (length p) (length p) (Node n c2 c2))
(pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c1 a2)), (pow2heapp (length p) (length p) (Node n c1 a1)), (pow2heapp (length p) (length p) (Node n c1 gv3)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a2 gv3)), (pow2heapp (length p) (length p) (smash a2 c2))
(pow2heapp (length p) (length p) (smash a2 c1)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 gv3)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash gv3 a2)), (pow2heapp (length p) (length p) (smash gv3 a1)), (pow2heapp (length p) (length p) (smash gv3 gv3)), (pow2heapp (length p) (length p) (smash gv3 c2))
(pow2heapp (length p) (length p) (smash gv3 c1)), (pow2heapp (length p) (length p) (smash c2 a2)), (pow2heapp (length p) (length p) (smash c2 a1)), (pow2heapp (length p) (length p) (smash c2 gv3)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1)), (pow2heapp (length p) (length p) (smash c1 gv3)), (pow2heapp (length p) (length p) (smash c1 c2))
(pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (gv3 :: p)), (Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1))
(Permutation p (heap_delete_max gv3)), (Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p gv3)), (Permutation p (join p p c2)), (Permutation p (join p p c1)), (Permutation p (insert n0 p)), (Permutation p (insert n1 p))
(Permutation p (insert n p)), (Permutation p (carry p a2)), (Permutation p (carry p a1)), (Permutation p (carry p gv3)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a2 :: p) p), (Permutation (a2 :: p) (a1 :: p))
(Permutation (a2 :: p) (gv3 :: p)), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (heap_delete_max gv3)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1)), (Permutation (a2 :: p) (join p p a2))
(Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p gv3)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n1 p)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p gv3))
(Permutation (a2 :: p) (carry p c2)), (Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (a2 :: p)), (Permutation (a1 :: p) (gv3 :: p)), (Permutation (a1 :: p) (c2 :: p)), (Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (merge p p))
(Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max gv3)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p gv3)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1))
(Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n1 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p gv3)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) [])
(Permutation (gv3 :: p) p), (Permutation (gv3 :: p) (a2 :: p)), (Permutation (gv3 :: p) (a1 :: p)), (Permutation (gv3 :: p) (c2 :: p)), (Permutation (gv3 :: p) (c1 :: p)), (Permutation (gv3 :: p) (merge p p)), (Permutation (gv3 :: p) (heap_delete_max a2)), (Permutation (gv3 :: p) (heap_delete_max a1)), (Permutation (gv3 :: p) (heap_delete_max gv3)), (Permutation (gv3 :: p) (heap_delete_max c2))
(Permutation (gv3 :: p) (heap_delete_max c1)), (Permutation (gv3 :: p) (join p p a2)), (Permutation (gv3 :: p) (join p p a1)), (Permutation (gv3 :: p) (join p p gv3)), (Permutation (gv3 :: p) (join p p c2)), (Permutation (gv3 :: p) (join p p c1)), (Permutation (gv3 :: p) (insert n0 p)), (Permutation (gv3 :: p) (insert n1 p)), (Permutation (gv3 :: p) (insert n p)), (Permutation (gv3 :: p) (carry p a2))
(Permutation (gv3 :: p) (carry p a1)), (Permutation (gv3 :: p) (carry p gv3)), (Permutation (gv3 :: p) (carry p c2)), (Permutation (gv3 :: p) (carry p c1)), (Permutation (gv3 :: p) (p ++ p)), (Permutation (gv3 :: p) []), (Permutation (c2 :: p) p), (Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p)), (Permutation (c2 :: p) (gv3 :: p))
(Permutation (c2 :: p) (c1 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max gv3)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1)), (Permutation (c2 :: p) (join p p gv3))
(Permutation (c2 :: p) (join p p c2)), (Permutation (c2 :: p) (join p p c1)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (carry p a2)), (Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p gv3)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1))
(Permutation (c2 :: p) (p ++ p)), (Permutation (c2 :: p) []), (Permutation (c1 :: p) p), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (gv3 :: p)), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (merge p p)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1))
(Permutation (c1 :: p) (heap_delete_max gv3)), (Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1)), (Permutation (c1 :: p) (join p p a2)), (Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p gv3)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n1 p))
(Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p gv3)), (Permutation (c1 :: p) (carry p c2)), (Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a2 :: p))
(Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (gv3 :: p)), (Permutation (merge p p) (c2 :: p)), (Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (heap_delete_max gv3)), (Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (join p p a2))
(Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p gv3)), (Permutation (merge p p) (join p p c2)), (Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p a2)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p gv3))
(Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (gv3 :: p)), (Permutation (heap_delete_max a2) (c2 :: p)), (Permutation (heap_delete_max a2) (c1 :: p))
(Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv3)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p gv3)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1))
(Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n1 p)), (Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p gv3)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) [])
(Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (gv3 :: p)), (Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv3)), (Permutation (heap_delete_max a1) (heap_delete_max c2))
(Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p gv3)), (Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p a2))
(Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p gv3)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv3) p), (Permutation (heap_delete_max gv3) (a2 :: p)), (Permutation (heap_delete_max gv3) (a1 :: p)), (Permutation (heap_delete_max gv3) (gv3 :: p))
(Permutation (heap_delete_max gv3) (c2 :: p)), (Permutation (heap_delete_max gv3) (c1 :: p)), (Permutation (heap_delete_max gv3) (merge p p)), (Permutation (heap_delete_max gv3) (heap_delete_max a2)), (Permutation (heap_delete_max gv3) (heap_delete_max a1)), (Permutation (heap_delete_max gv3) (heap_delete_max c2)), (Permutation (heap_delete_max gv3) (heap_delete_max c1)), (Permutation (heap_delete_max gv3) (join p p a2)), (Permutation (heap_delete_max gv3) (join p p a1)), (Permutation (heap_delete_max gv3) (join p p gv3))
(Permutation (heap_delete_max gv3) (join p p c2)), (Permutation (heap_delete_max gv3) (join p p c1)), (Permutation (heap_delete_max gv3) (insert n0 p)), (Permutation (heap_delete_max gv3) (insert n1 p)), (Permutation (heap_delete_max gv3) (insert n p)), (Permutation (heap_delete_max gv3) (carry p a2)), (Permutation (heap_delete_max gv3) (carry p a1)), (Permutation (heap_delete_max gv3) (carry p gv3)), (Permutation (heap_delete_max gv3) (carry p c2)), (Permutation (heap_delete_max gv3) (carry p c1))
(Permutation (heap_delete_max gv3) (p ++ p)), (Permutation (heap_delete_max gv3) []), (Permutation (heap_delete_max c2) p), (Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (gv3 :: p)), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max a2))
(Permutation (heap_delete_max c2) (heap_delete_max a1)), (Permutation (heap_delete_max c2) (heap_delete_max gv3)), (Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1)), (Permutation (heap_delete_max c2) (join p p gv3)), (Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n1 p))
(Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (carry p a2)), (Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p gv3)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (p ++ p)), (Permutation (heap_delete_max c2) []), (Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (a2 :: p))
(Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (gv3 :: p)), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p)), (Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1)), (Permutation (heap_delete_max c1) (heap_delete_max gv3)), (Permutation (heap_delete_max c1) (heap_delete_max c2)), (Permutation (heap_delete_max c1) (join p p a2))
(Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p gv3)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (insert n0 p)), (Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p gv3))
(Permutation (heap_delete_max c1) (carry p c2)), (Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (a2 :: p)), (Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (gv3 :: p)), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p))
(Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max gv3)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p gv3)), (Permutation (join p p a2) (join p p c2)), (Permutation (join p p a2) (join p p c1))
(Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p gv3)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) [])
(Permutation (join p p a1) p), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (gv3 :: p)), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max gv3))
(Permutation (join p p a1) (heap_delete_max c2)), (Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p gv3)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n1 p)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p a2))
(Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p gv3)), (Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p gv3) p), (Permutation (join p p gv3) (a2 :: p)), (Permutation (join p p gv3) (a1 :: p)), (Permutation (join p p gv3) (gv3 :: p))
(Permutation (join p p gv3) (c2 :: p)), (Permutation (join p p gv3) (c1 :: p)), (Permutation (join p p gv3) (merge p p)), (Permutation (join p p gv3) (heap_delete_max a2)), (Permutation (join p p gv3) (heap_delete_max a1)), (Permutation (join p p gv3) (heap_delete_max gv3)), (Permutation (join p p gv3) (heap_delete_max c2)), (Permutation (join p p gv3) (heap_delete_max c1)), (Permutation (join p p gv3) (join p p a2)), (Permutation (join p p gv3) (join p p a1))
(Permutation (join p p gv3) (join p p c2)), (Permutation (join p p gv3) (join p p c1)), (Permutation (join p p gv3) (insert n0 p)), (Permutation (join p p gv3) (insert n1 p)), (Permutation (join p p gv3) (insert n p)), (Permutation (join p p gv3) (carry p a2)), (Permutation (join p p gv3) (carry p a1)), (Permutation (join p p gv3) (carry p gv3)), (Permutation (join p p gv3) (carry p c2)), (Permutation (join p p gv3) (carry p c1))
(Permutation (join p p gv3) (p ++ p)), (Permutation (join p p gv3) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p)), (Permutation (join p p c2) (gv3 :: p)), (Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (merge p p)), (Permutation (join p p c2) (heap_delete_max a2))
(Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max gv3)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p gv3)), (Permutation (join p p c2) (join p p c1)), (Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n1 p))
(Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p gv3)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) []), (Permutation (join p p c1) p), (Permutation (join p p c1) (a2 :: p))
(Permutation (join p p c1) (a1 :: p)), (Permutation (join p p c1) (gv3 :: p)), (Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max a2)), (Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max gv3)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1))
(Permutation (join p p c1) (join p p a2)), (Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p gv3)), (Permutation (join p p c1) (join p p c2)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p gv3))
(Permutation (join p p c1) (carry p c2)), (Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (p ++ p)), (Permutation (join p p c1) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (gv3 :: p)), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p))
(Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max a2)), (Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max gv3)), (Permutation (insert n0 p) (heap_delete_max c2)), (Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p gv3)), (Permutation (insert n0 p) (join p p c2))
(Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p gv3)), (Permutation (insert n0 p) (carry p c2)), (Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) [])
(Permutation (insert n1 p) p), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (gv3 :: p)), (Permutation (insert n1 p) (c2 :: p)), (Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max a2)), (Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max gv3))
(Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1)), (Permutation (insert n1 p) (join p p gv3)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (carry p a2))
(Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p gv3)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) []), (Permutation (insert n p) p), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (gv3 :: p))
(Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max gv3)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1)), (Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1))
(Permutation (insert n p) (join p p gv3)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p gv3)), (Permutation (insert n p) (carry p c2)), (Permutation (insert n p) (carry p c1))
(Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (gv3 :: p)), (Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max a2))
(Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max gv3)), (Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (join p p gv3)), (Permutation (carry p a2) (join p p c2)), (Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (insert n0 p))
(Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p gv3)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) []), (Permutation (carry p a1) p), (Permutation (carry p a1) (a2 :: p))
(Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (gv3 :: p)), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max gv3)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1))
(Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p gv3)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert n p)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p gv3))
(Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (carry p gv3) p), (Permutation (carry p gv3) (a2 :: p)), (Permutation (carry p gv3) (a1 :: p)), (Permutation (carry p gv3) (gv3 :: p)), (Permutation (carry p gv3) (c2 :: p)), (Permutation (carry p gv3) (c1 :: p))
(Permutation (carry p gv3) (merge p p)), (Permutation (carry p gv3) (heap_delete_max a2)), (Permutation (carry p gv3) (heap_delete_max a1)), (Permutation (carry p gv3) (heap_delete_max gv3)), (Permutation (carry p gv3) (heap_delete_max c2)), (Permutation (carry p gv3) (heap_delete_max c1)), (Permutation (carry p gv3) (join p p a2)), (Permutation (carry p gv3) (join p p a1)), (Permutation (carry p gv3) (join p p gv3)), (Permutation (carry p gv3) (join p p c2))
(Permutation (carry p gv3) (join p p c1)), (Permutation (carry p gv3) (insert n0 p)), (Permutation (carry p gv3) (insert n1 p)), (Permutation (carry p gv3) (insert n p)), (Permutation (carry p gv3) (carry p a2)), (Permutation (carry p gv3) (carry p a1)), (Permutation (carry p gv3) (carry p c2)), (Permutation (carry p gv3) (carry p c1)), (Permutation (carry p gv3) (p ++ p)), (Permutation (carry p gv3) [])
(Permutation (carry p c2) p), (Permutation (carry p c2) (a2 :: p)), (Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (gv3 :: p)), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max gv3))
(Permutation (carry p c2) (heap_delete_max c2)), (Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1)), (Permutation (carry p c2) (join p p gv3)), (Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n1 p)), (Permutation (carry p c2) (insert n p))
(Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1)), (Permutation (carry p c2) (carry p gv3)), (Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (p ++ p)), (Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (gv3 :: p))
(Permutation (carry p c1) (c2 :: p)), (Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max a2)), (Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max gv3)), (Permutation (carry p c1) (heap_delete_max c2)), (Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1))
(Permutation (carry p c1) (join p p gv3)), (Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert n p)), (Permutation (carry p c1) (carry p a2)), (Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p gv3)), (Permutation (carry p c1) (carry p c2))
(Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (gv3 :: p)), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a2))
(Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max gv3)), (Permutation (p ++ p) (heap_delete_max c2)), (Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p gv3)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n1 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p gv3)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a2 :: p))
(Permutation [] (a1 :: p)), (Permutation [] (gv3 :: p)), (Permutation [] (c2 :: p)), (Permutation [] (c1 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1))
(Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p gv3)), (Permutation [] (join p p c2)), (Permutation [] (join p p c1)), (Permutation [] (insert n0 p)), (Permutation [] (insert n1 p)), (Permutation [] (insert n p)), (Permutation [] (carry p a2)), (Permutation [] (carry p a1))
(Permutation [] (carry p gv3)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1)), (Permutation [] (p ++ p)), (In a2 (a2 :: p)), (In a2 (a1 :: p)), (In a2 (gv3 :: p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (merge p p))
(In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv3)), (In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (join p p gv3)), (In a2 (join p p c2)), (In a2 (join p p c1))
(In a2 (insert n0 p)), (In a2 (insert n1 p)), (In a2 (insert n p)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p gv3)), (In a2 (carry p c2)), (In a2 (carry p c1)), (In a2 (p ++ p)), (In a1 (a2 :: p))
(In a1 (a1 :: p)), (In a1 (gv3 :: p)), (In a1 (c2 :: p)), (In a1 (c1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max gv3)), (In a1 (heap_delete_max c2)), (In a1 (heap_delete_max c1))
(In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (join p p gv3)), (In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (insert n0 p)), (In a1 (insert n1 p)), (In a1 (insert n p)), (In a1 (carry p a2)), (In a1 (carry p a1))
(In a1 (carry p gv3)), (In a1 (carry p c2)), (In a1 (carry p c1)), (In a1 (p ++ p)), (In gv3 (a2 :: p)), (In gv3 (a1 :: p)), (In gv3 (gv3 :: p)), (In gv3 (c2 :: p)), (In gv3 (c1 :: p)), (In gv3 (merge p p))
(In gv3 (heap_delete_max a2)), (In gv3 (heap_delete_max a1)), (In gv3 (heap_delete_max gv3)), (In gv3 (heap_delete_max c2)), (In gv3 (heap_delete_max c1)), (In gv3 (join p p a2)), (In gv3 (join p p a1)), (In gv3 (join p p gv3)), (In gv3 (join p p c2)), (In gv3 (join p p c1))
(In gv3 (insert n0 p)), (In gv3 (insert n1 p)), (In gv3 (insert n p)), (In gv3 (carry p a2)), (In gv3 (carry p a1)), (In gv3 (carry p gv3)), (In gv3 (carry p c2)), (In gv3 (carry p c1)), (In gv3 (p ++ p)), (In c2 (a2 :: p))
(In c2 (a1 :: p)), (In c2 (gv3 :: p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (merge p p)), (In c2 (heap_delete_max a2)), (In c2 (heap_delete_max a1)), (In c2 (heap_delete_max gv3)), (In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1))
(In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p gv3)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (insert n0 p)), (In c2 (insert n1 p)), (In c2 (insert n p)), (In c2 (carry p a2)), (In c2 (carry p a1))
(In c2 (carry p gv3)), (In c2 (carry p c2)), (In c2 (carry p c1)), (In c2 (p ++ p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (gv3 :: p)), (In c1 (c2 :: p)), (In c1 (c1 :: p)), (In c1 (merge p p))
(In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max gv3)), (In c1 (heap_delete_max c2)), (In c1 (heap_delete_max c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p gv3)), (In c1 (join p p c2)), (In c1 (join p p c1))
(In c1 (insert n0 p)), (In c1 (insert n1 p)), (In c1 (insert n p)), (In c1 (carry p a2)), (In c1 (carry p a1)), (In c1 (carry p gv3)), (In c1 (carry p c2)), (In c1 (carry p c1)), (In c1 (p ++ p)), (In (Node n0 a2 a2) p)
(In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (gv3 :: p)), (In (Node n0 a2 a2) (c2 :: p)), (In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max gv3)), (In (Node n0 a2 a2) (heap_delete_max c2))
(In (Node n0 a2 a2) (heap_delete_max c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p gv3)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1)), (In (Node n0 a2 a2) (insert n0 p)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (carry p a2))
(In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p gv3)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (gv3 :: p)), (In (Node n0 a2 a1) (c2 :: p))
(In (Node n0 a2 a1) (c1 :: p)), (In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max gv3)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p gv3))
(In (Node n0 a2 a1) (join p p c2)), (In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p a2)), (In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p gv3)), (In (Node n0 a2 a1) (carry p c2)), (In (Node n0 a2 a1) (carry p c1))
(In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 gv3) p), (In (Node n0 a2 gv3) (a2 :: p)), (In (Node n0 a2 gv3) (a1 :: p)), (In (Node n0 a2 gv3) (gv3 :: p)), (In (Node n0 a2 gv3) (c2 :: p)), (In (Node n0 a2 gv3) (c1 :: p)), (In (Node n0 a2 gv3) (merge p p)), (In (Node n0 a2 gv3) (heap_delete_max a2)), (In (Node n0 a2 gv3) (heap_delete_max a1))
(In (Node n0 a2 gv3) (heap_delete_max gv3)), (In (Node n0 a2 gv3) (heap_delete_max c2)), (In (Node n0 a2 gv3) (heap_delete_max c1)), (In (Node n0 a2 gv3) (join p p a2)), (In (Node n0 a2 gv3) (join p p a1)), (In (Node n0 a2 gv3) (join p p gv3)), (In (Node n0 a2 gv3) (join p p c2)), (In (Node n0 a2 gv3) (join p p c1)), (In (Node n0 a2 gv3) (insert n0 p)), (In (Node n0 a2 gv3) (insert n1 p))
(In (Node n0 a2 gv3) (insert n p)), (In (Node n0 a2 gv3) (carry p a2)), (In (Node n0 a2 gv3) (carry p a1)), (In (Node n0 a2 gv3) (carry p gv3)), (In (Node n0 a2 gv3) (carry p c2)), (In (Node n0 a2 gv3) (carry p c1)), (In (Node n0 a2 gv3) (p ++ p)), (In (Node n0 a2 c2) p), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p))
(In (Node n0 a2 c2) (gv3 :: p)), (In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1)), (In (Node n0 a2 c2) (heap_delete_max gv3)), (In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (join p p a2))
(In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p gv3)), (In (Node n0 a2 c2) (join p p c2)), (In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p gv3))
(In (Node n0 a2 c2) (carry p c2)), (In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p), (In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p)), (In (Node n0 a2 c1) (gv3 :: p)), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p)), (In (Node n0 a2 c1) (merge p p))
(In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max gv3)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (join p p a2)), (In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p gv3)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1))
(In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert n p)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p gv3)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1)), (In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a1 a2) p)
(In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (gv3 :: p)), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max gv3)), (In (Node n0 a1 a2) (heap_delete_max c2))
(In (Node n0 a1 a2) (heap_delete_max c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p gv3)), (In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p a2))
(In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (carry p gv3)), (In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (gv3 :: p)), (In (Node n0 a1 a1) (c2 :: p))
(In (Node n0 a1 a1) (c1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max gv3)), (In (Node n0 a1 a1) (heap_delete_max c2)), (In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p gv3))
(In (Node n0 a1 a1) (join p p c2)), (In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p a2)), (In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p gv3)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1))
(In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 gv3) p), (In (Node n0 a1 gv3) (a2 :: p)), (In (Node n0 a1 gv3) (a1 :: p)), (In (Node n0 a1 gv3) (gv3 :: p)), (In (Node n0 a1 gv3) (c2 :: p)), (In (Node n0 a1 gv3) (c1 :: p)), (In (Node n0 a1 gv3) (merge p p)), (In (Node n0 a1 gv3) (heap_delete_max a2)), (In (Node n0 a1 gv3) (heap_delete_max a1))
(In (Node n0 a1 gv3) (heap_delete_max gv3)), (In (Node n0 a1 gv3) (heap_delete_max c2)), (In (Node n0 a1 gv3) (heap_delete_max c1)), (In (Node n0 a1 gv3) (join p p a2)), (In (Node n0 a1 gv3) (join p p a1)), (In (Node n0 a1 gv3) (join p p gv3)), (In (Node n0 a1 gv3) (join p p c2)), (In (Node n0 a1 gv3) (join p p c1)), (In (Node n0 a1 gv3) (insert n0 p)), (In (Node n0 a1 gv3) (insert n1 p))
(In (Node n0 a1 gv3) (insert n p)), (In (Node n0 a1 gv3) (carry p a2)), (In (Node n0 a1 gv3) (carry p a1)), (In (Node n0 a1 gv3) (carry p gv3)), (In (Node n0 a1 gv3) (carry p c2)), (In (Node n0 a1 gv3) (carry p c1)), (In (Node n0 a1 gv3) (p ++ p)), (In (Node n0 a1 c2) p), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p))
(In (Node n0 a1 c2) (gv3 :: p)), (In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p)), (In (Node n0 a1 c2) (merge p p)), (In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1)), (In (Node n0 a1 c2) (heap_delete_max gv3)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (join p p a2))
(In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p gv3)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (insert n0 p)), (In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p gv3))
(In (Node n0 a1 c2) (carry p c2)), (In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p)), (In (Node n0 a1 c1) (gv3 :: p)), (In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (merge p p))
(In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max gv3)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (join p p a2)), (In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p gv3)), (In (Node n0 a1 c1) (join p p c2)), (In (Node n0 a1 c1) (join p p c1))
(In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p gv3)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (p ++ p)), (In (Node n0 gv3 a2) p)
(In (Node n0 gv3 a2) (a2 :: p)), (In (Node n0 gv3 a2) (a1 :: p)), (In (Node n0 gv3 a2) (gv3 :: p)), (In (Node n0 gv3 a2) (c2 :: p)), (In (Node n0 gv3 a2) (c1 :: p)), (In (Node n0 gv3 a2) (merge p p)), (In (Node n0 gv3 a2) (heap_delete_max a2)), (In (Node n0 gv3 a2) (heap_delete_max a1)), (In (Node n0 gv3 a2) (heap_delete_max gv3)), (In (Node n0 gv3 a2) (heap_delete_max c2))
(In (Node n0 gv3 a2) (heap_delete_max c1)), (In (Node n0 gv3 a2) (join p p a2)), (In (Node n0 gv3 a2) (join p p a1)), (In (Node n0 gv3 a2) (join p p gv3)), (In (Node n0 gv3 a2) (join p p c2)), (In (Node n0 gv3 a2) (join p p c1)), (In (Node n0 gv3 a2) (insert n0 p)), (In (Node n0 gv3 a2) (insert n1 p)), (In (Node n0 gv3 a2) (insert n p)), (In (Node n0 gv3 a2) (carry p a2))
(In (Node n0 gv3 a2) (carry p a1)), (In (Node n0 gv3 a2) (carry p gv3)), (In (Node n0 gv3 a2) (carry p c2)), (In (Node n0 gv3 a2) (carry p c1)), (In (Node n0 gv3 a2) (p ++ p)), (In (Node n0 gv3 a1) p), (In (Node n0 gv3 a1) (a2 :: p)), (In (Node n0 gv3 a1) (a1 :: p)), (In (Node n0 gv3 a1) (gv3 :: p)), (In (Node n0 gv3 a1) (c2 :: p))
(In (Node n0 gv3 a1) (c1 :: p)), (In (Node n0 gv3 a1) (merge p p)), (In (Node n0 gv3 a1) (heap_delete_max a2)), (In (Node n0 gv3 a1) (heap_delete_max a1)), (In (Node n0 gv3 a1) (heap_delete_max gv3)), (In (Node n0 gv3 a1) (heap_delete_max c2)), (In (Node n0 gv3 a1) (heap_delete_max c1)), (In (Node n0 gv3 a1) (join p p a2)), (In (Node n0 gv3 a1) (join p p a1)), (In (Node n0 gv3 a1) (join p p gv3))
(In (Node n0 gv3 a1) (join p p c2)), (In (Node n0 gv3 a1) (join p p c1)), (In (Node n0 gv3 a1) (insert n0 p)), (In (Node n0 gv3 a1) (insert n1 p)), (In (Node n0 gv3 a1) (insert n p)), (In (Node n0 gv3 a1) (carry p a2)), (In (Node n0 gv3 a1) (carry p a1)), (In (Node n0 gv3 a1) (carry p gv3)), (In (Node n0 gv3 a1) (carry p c2)), (In (Node n0 gv3 a1) (carry p c1))
(In (Node n0 gv3 a1) (p ++ p)), (In (Node n0 gv3 gv3) p), (In (Node n0 gv3 gv3) (a2 :: p)), (In (Node n0 gv3 gv3) (a1 :: p)), (In (Node n0 gv3 gv3) (gv3 :: p)), (In (Node n0 gv3 gv3) (c2 :: p)), (In (Node n0 gv3 gv3) (c1 :: p)), (In (Node n0 gv3 gv3) (merge p p)), (In (Node n0 gv3 gv3) (heap_delete_max a2)), (In (Node n0 gv3 gv3) (heap_delete_max a1))
(In (Node n0 gv3 gv3) (heap_delete_max gv3)), (In (Node n0 gv3 gv3) (heap_delete_max c2)), (In (Node n0 gv3 gv3) (heap_delete_max c1)), (In (Node n0 gv3 gv3) (join p p a2)), (In (Node n0 gv3 gv3) (join p p a1)), (In (Node n0 gv3 gv3) (join p p gv3)), (In (Node n0 gv3 gv3) (join p p c2)), (In (Node n0 gv3 gv3) (join p p c1)), (In (Node n0 gv3 gv3) (insert n0 p)), (In (Node n0 gv3 gv3) (insert n1 p))
(In (Node n0 gv3 gv3) (insert n p)), (In (Node n0 gv3 gv3) (carry p a2)), (In (Node n0 gv3 gv3) (carry p a1)), (In (Node n0 gv3 gv3) (carry p gv3)), (In (Node n0 gv3 gv3) (carry p c2)), (In (Node n0 gv3 gv3) (carry p c1)), (In (Node n0 gv3 gv3) (p ++ p)), (In (Node n0 gv3 c2) p), (In (Node n0 gv3 c2) (a2 :: p)), (In (Node n0 gv3 c2) (a1 :: p))
(In (Node n0 gv3 c2) (gv3 :: p)), (In (Node n0 gv3 c2) (c2 :: p)), (In (Node n0 gv3 c2) (c1 :: p)), (In (Node n0 gv3 c2) (merge p p)), (In (Node n0 gv3 c2) (heap_delete_max a2)), (In (Node n0 gv3 c2) (heap_delete_max a1)), (In (Node n0 gv3 c2) (heap_delete_max gv3)), (In (Node n0 gv3 c2) (heap_delete_max c2)), (In (Node n0 gv3 c2) (heap_delete_max c1)), (In (Node n0 gv3 c2) (join p p a2))
(In (Node n0 gv3 c2) (join p p a1)), (In (Node n0 gv3 c2) (join p p gv3)), (In (Node n0 gv3 c2) (join p p c2)), (In (Node n0 gv3 c2) (join p p c1)), (In (Node n0 gv3 c2) (insert n0 p)), (In (Node n0 gv3 c2) (insert n1 p)), (In (Node n0 gv3 c2) (insert n p)), (In (Node n0 gv3 c2) (carry p a2)), (In (Node n0 gv3 c2) (carry p a1)), (In (Node n0 gv3 c2) (carry p gv3))
(In (Node n0 gv3 c2) (carry p c2)), (In (Node n0 gv3 c2) (carry p c1)), (In (Node n0 gv3 c2) (p ++ p)), (In (Node n0 gv3 c1) p), (In (Node n0 gv3 c1) (a2 :: p)), (In (Node n0 gv3 c1) (a1 :: p)), (In (Node n0 gv3 c1) (gv3 :: p)), (In (Node n0 gv3 c1) (c2 :: p)), (In (Node n0 gv3 c1) (c1 :: p)), (In (Node n0 gv3 c1) (merge p p))
(In (Node n0 gv3 c1) (heap_delete_max a2)), (In (Node n0 gv3 c1) (heap_delete_max a1)), (In (Node n0 gv3 c1) (heap_delete_max gv3)), (In (Node n0 gv3 c1) (heap_delete_max c2)), (In (Node n0 gv3 c1) (heap_delete_max c1)), (In (Node n0 gv3 c1) (join p p a2)), (In (Node n0 gv3 c1) (join p p a1)), (In (Node n0 gv3 c1) (join p p gv3)), (In (Node n0 gv3 c1) (join p p c2)), (In (Node n0 gv3 c1) (join p p c1))
(In (Node n0 gv3 c1) (insert n0 p)), (In (Node n0 gv3 c1) (insert n1 p)), (In (Node n0 gv3 c1) (insert n p)), (In (Node n0 gv3 c1) (carry p a2)), (In (Node n0 gv3 c1) (carry p a1)), (In (Node n0 gv3 c1) (carry p gv3)), (In (Node n0 gv3 c1) (carry p c2)), (In (Node n0 gv3 c1) (carry p c1)), (In (Node n0 gv3 c1) (p ++ p)), (In (Node n0 c2 a2) p)
(In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (gv3 :: p)), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max gv3)), (In (Node n0 c2 a2) (heap_delete_max c2))
(In (Node n0 c2 a2) (heap_delete_max c1)), (In (Node n0 c2 a2) (join p p a2)), (In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p gv3)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (insert n0 p)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (carry p a2))
(In (Node n0 c2 a2) (carry p a1)), (In (Node n0 c2 a2) (carry p gv3)), (In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1)), (In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (gv3 :: p)), (In (Node n0 c2 a1) (c2 :: p))
(In (Node n0 c2 a1) (c1 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max a2)), (In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max gv3)), (In (Node n0 c2 a1) (heap_delete_max c2)), (In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p gv3))
(In (Node n0 c2 a1) (join p p c2)), (In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n1 p)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (carry p a2)), (In (Node n0 c2 a1) (carry p a1)), (In (Node n0 c2 a1) (carry p gv3)), (In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1))
(In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 gv3) p), (In (Node n0 c2 gv3) (a2 :: p)), (In (Node n0 c2 gv3) (a1 :: p)), (In (Node n0 c2 gv3) (gv3 :: p)), (In (Node n0 c2 gv3) (c2 :: p)), (In (Node n0 c2 gv3) (c1 :: p)), (In (Node n0 c2 gv3) (merge p p)), (In (Node n0 c2 gv3) (heap_delete_max a2)), (In (Node n0 c2 gv3) (heap_delete_max a1))
(In (Node n0 c2 gv3) (heap_delete_max gv3)), (In (Node n0 c2 gv3) (heap_delete_max c2)), (In (Node n0 c2 gv3) (heap_delete_max c1)), (In (Node n0 c2 gv3) (join p p a2)), (In (Node n0 c2 gv3) (join p p a1)), (In (Node n0 c2 gv3) (join p p gv3)), (In (Node n0 c2 gv3) (join p p c2)), (In (Node n0 c2 gv3) (join p p c1)), (In (Node n0 c2 gv3) (insert n0 p)), (In (Node n0 c2 gv3) (insert n1 p))
(In (Node n0 c2 gv3) (insert n p)), (In (Node n0 c2 gv3) (carry p a2)), (In (Node n0 c2 gv3) (carry p a1)), (In (Node n0 c2 gv3) (carry p gv3)), (In (Node n0 c2 gv3) (carry p c2)), (In (Node n0 c2 gv3) (carry p c1)), (In (Node n0 c2 gv3) (p ++ p)), (In (Node n0 c2 c2) p), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p))
(In (Node n0 c2 c2) (gv3 :: p)), (In (Node n0 c2 c2) (c2 :: p)), (In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max a2)), (In (Node n0 c2 c2) (heap_delete_max a1)), (In (Node n0 c2 c2) (heap_delete_max gv3)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (join p p a2))
(In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p gv3)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert n p)), (In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p gv3))
(In (Node n0 c2 c2) (carry p c2)), (In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p), (In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p)), (In (Node n0 c2 c1) (gv3 :: p)), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p)), (In (Node n0 c2 c1) (merge p p))
(In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max gv3)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (join p p a2)), (In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p gv3)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1))
(In (Node n0 c2 c1) (insert n0 p)), (In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p gv3)), (In (Node n0 c2 c1) (carry p c2)), (In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c1 a2) p)
(In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p)), (In (Node n0 c1 a2) (gv3 :: p)), (In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1)), (In (Node n0 c1 a2) (heap_delete_max gv3)), (In (Node n0 c1 a2) (heap_delete_max c2))
(In (Node n0 c1 a2) (heap_delete_max c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p gv3)), (In (Node n0 c1 a2) (join p p c2)), (In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (insert n0 p)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (carry p a2))
(In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p gv3)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p), (In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (gv3 :: p)), (In (Node n0 c1 a1) (c2 :: p))
(In (Node n0 c1 a1) (c1 :: p)), (In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max gv3)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (join p p a2)), (In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p gv3))
(In (Node n0 c1 a1) (join p p c2)), (In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert n p)), (In (Node n0 c1 a1) (carry p a2)), (In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p gv3)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1))
(In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 gv3) p), (In (Node n0 c1 gv3) (a2 :: p)), (In (Node n0 c1 gv3) (a1 :: p)), (In (Node n0 c1 gv3) (gv3 :: p)), (In (Node n0 c1 gv3) (c2 :: p)), (In (Node n0 c1 gv3) (c1 :: p)), (In (Node n0 c1 gv3) (merge p p)), (In (Node n0 c1 gv3) (heap_delete_max a2)), (In (Node n0 c1 gv3) (heap_delete_max a1))
(In (Node n0 c1 gv3) (heap_delete_max gv3)), (In (Node n0 c1 gv3) (heap_delete_max c2)), (In (Node n0 c1 gv3) (heap_delete_max c1)), (In (Node n0 c1 gv3) (join p p a2)), (In (Node n0 c1 gv3) (join p p a1)), (In (Node n0 c1 gv3) (join p p gv3)), (In (Node n0 c1 gv3) (join p p c2)), (In (Node n0 c1 gv3) (join p p c1)), (In (Node n0 c1 gv3) (insert n0 p)), (In (Node n0 c1 gv3) (insert n1 p))
(In (Node n0 c1 gv3) (insert n p)), (In (Node n0 c1 gv3) (carry p a2)), (In (Node n0 c1 gv3) (carry p a1)), (In (Node n0 c1 gv3) (carry p gv3)), (In (Node n0 c1 gv3) (carry p c2)), (In (Node n0 c1 gv3) (carry p c1)), (In (Node n0 c1 gv3) (p ++ p)), (In (Node n0 c1 c2) p), (In (Node n0 c1 c2) (a2 :: p)), (In (Node n0 c1 c2) (a1 :: p))
(In (Node n0 c1 c2) (gv3 :: p)), (In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1)), (In (Node n0 c1 c2) (heap_delete_max gv3)), (In (Node n0 c1 c2) (heap_delete_max c2)), (In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (join p p a2))
(In (Node n0 c1 c2) (join p p a1)), (In (Node n0 c1 c2) (join p p gv3)), (In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1)), (In (Node n0 c1 c2) (carry p gv3))
(In (Node n0 c1 c2) (carry p c2)), (In (Node n0 c1 c2) (carry p c1)), (In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p)), (In (Node n0 c1 c1) (gv3 :: p)), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (merge p p))
(In (Node n0 c1 c1) (heap_delete_max a2)), (In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max gv3)), (In (Node n0 c1 c1) (heap_delete_max c2)), (In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (join p p a2)), (In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p gv3)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1))
(In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert n p)), (In (Node n0 c1 c1) (carry p a2)), (In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p gv3)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (p ++ p)), (In (Node n1 a2 a2) p)
(In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (gv3 :: p)), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p)), (In (Node n1 a2 a2) (merge p p)), (In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max gv3)), (In (Node n1 a2 a2) (heap_delete_max c2))
(In (Node n1 a2 a2) (heap_delete_max c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p gv3)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (insert n0 p)), (In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (carry p a2))
(In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p gv3)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p)), (In (Node n1 a2 a1) (gv3 :: p)), (In (Node n1 a2 a1) (c2 :: p))
(In (Node n1 a2 a1) (c1 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max gv3)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p gv3))
(In (Node n1 a2 a1) (join p p c2)), (In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (carry p a2)), (In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p gv3)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1))
(In (Node n1 a2 a1) (p ++ p)), (In (Node n1 a2 gv3) p), (In (Node n1 a2 gv3) (a2 :: p)), (In (Node n1 a2 gv3) (a1 :: p)), (In (Node n1 a2 gv3) (gv3 :: p)), (In (Node n1 a2 gv3) (c2 :: p)), (In (Node n1 a2 gv3) (c1 :: p)), (In (Node n1 a2 gv3) (merge p p)), (In (Node n1 a2 gv3) (heap_delete_max a2)), (In (Node n1 a2 gv3) (heap_delete_max a1))
(In (Node n1 a2 gv3) (heap_delete_max gv3)), (In (Node n1 a2 gv3) (heap_delete_max c2)), (In (Node n1 a2 gv3) (heap_delete_max c1)), (In (Node n1 a2 gv3) (join p p a2)), (In (Node n1 a2 gv3) (join p p a1)), (In (Node n1 a2 gv3) (join p p gv3)), (In (Node n1 a2 gv3) (join p p c2)), (In (Node n1 a2 gv3) (join p p c1)), (In (Node n1 a2 gv3) (insert n0 p)), (In (Node n1 a2 gv3) (insert n1 p))
(In (Node n1 a2 gv3) (insert n p)), (In (Node n1 a2 gv3) (carry p a2)), (In (Node n1 a2 gv3) (carry p a1)), (In (Node n1 a2 gv3) (carry p gv3)), (In (Node n1 a2 gv3) (carry p c2)), (In (Node n1 a2 gv3) (carry p c1)), (In (Node n1 a2 gv3) (p ++ p)), (In (Node n1 a2 c2) p), (In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p))
(In (Node n1 a2 c2) (gv3 :: p)), (In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1)), (In (Node n1 a2 c2) (heap_delete_max gv3)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1)), (In (Node n1 a2 c2) (join p p a2))
(In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p gv3)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1)), (In (Node n1 a2 c2) (carry p gv3))
(In (Node n1 a2 c2) (carry p c2)), (In (Node n1 a2 c2) (carry p c1)), (In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p)), (In (Node n1 a2 c1) (gv3 :: p)), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (merge p p))
(In (Node n1 a2 c1) (heap_delete_max a2)), (In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max gv3)), (In (Node n1 a2 c1) (heap_delete_max c2)), (In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (join p p a2)), (In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p gv3)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1))
(In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n1 p)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1)), (In (Node n1 a2 c1) (carry p gv3)), (In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a1 a2) p)
(In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (gv3 :: p)), (In (Node n1 a1 a2) (c2 :: p)), (In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max a2)), (In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max gv3)), (In (Node n1 a1 a2) (heap_delete_max c2))
(In (Node n1 a1 a2) (heap_delete_max c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p gv3)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1)), (In (Node n1 a1 a2) (insert n0 p)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert n p)), (In (Node n1 a1 a2) (carry p a2))
(In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p gv3)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p), (In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (gv3 :: p)), (In (Node n1 a1 a1) (c2 :: p))
(In (Node n1 a1 a1) (c1 :: p)), (In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max gv3)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (join p p a2)), (In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p gv3))
(In (Node n1 a1 a1) (join p p c2)), (In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (insert n0 p)), (In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (carry p a2)), (In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p gv3)), (In (Node n1 a1 a1) (carry p c2)), (In (Node n1 a1 a1) (carry p c1))
(In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 gv3) p), (In (Node n1 a1 gv3) (a2 :: p)), (In (Node n1 a1 gv3) (a1 :: p)), (In (Node n1 a1 gv3) (gv3 :: p)), (In (Node n1 a1 gv3) (c2 :: p)), (In (Node n1 a1 gv3) (c1 :: p)), (In (Node n1 a1 gv3) (merge p p)), (In (Node n1 a1 gv3) (heap_delete_max a2)), (In (Node n1 a1 gv3) (heap_delete_max a1))
(In (Node n1 a1 gv3) (heap_delete_max gv3)), (In (Node n1 a1 gv3) (heap_delete_max c2)), (In (Node n1 a1 gv3) (heap_delete_max c1)), (In (Node n1 a1 gv3) (join p p a2)), (In (Node n1 a1 gv3) (join p p a1)), (In (Node n1 a1 gv3) (join p p gv3)), (In (Node n1 a1 gv3) (join p p c2)), (In (Node n1 a1 gv3) (join p p c1)), (In (Node n1 a1 gv3) (insert n0 p)), (In (Node n1 a1 gv3) (insert n1 p))
(In (Node n1 a1 gv3) (insert n p)), (In (Node n1 a1 gv3) (carry p a2)), (In (Node n1 a1 gv3) (carry p a1)), (In (Node n1 a1 gv3) (carry p gv3)), (In (Node n1 a1 gv3) (carry p c2)), (In (Node n1 a1 gv3) (carry p c1)), (In (Node n1 a1 gv3) (p ++ p)), (In (Node n1 a1 c2) p), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p))
(In (Node n1 a1 c2) (gv3 :: p)), (In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1)), (In (Node n1 a1 c2) (heap_delete_max gv3)), (In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (join p p a2))
(In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p gv3)), (In (Node n1 a1 c2) (join p p c2)), (In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p gv3))
(In (Node n1 a1 c2) (carry p c2)), (In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p), (In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p)), (In (Node n1 a1 c1) (gv3 :: p)), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p)), (In (Node n1 a1 c1) (merge p p))
(In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max gv3)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (join p p a2)), (In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p gv3)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1))
(In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert n p)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p gv3)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1)), (In (Node n1 a1 c1) (p ++ p)), (In (Node n1 gv3 a2) p)
(In (Node n1 gv3 a2) (a2 :: p)), (In (Node n1 gv3 a2) (a1 :: p)), (In (Node n1 gv3 a2) (gv3 :: p)), (In (Node n1 gv3 a2) (c2 :: p)), (In (Node n1 gv3 a2) (c1 :: p)), (In (Node n1 gv3 a2) (merge p p)), (In (Node n1 gv3 a2) (heap_delete_max a2)), (In (Node n1 gv3 a2) (heap_delete_max a1)), (In (Node n1 gv3 a2) (heap_delete_max gv3)), (In (Node n1 gv3 a2) (heap_delete_max c2))
(In (Node n1 gv3 a2) (heap_delete_max c1)), (In (Node n1 gv3 a2) (join p p a2)), (In (Node n1 gv3 a2) (join p p a1)), (In (Node n1 gv3 a2) (join p p gv3)), (In (Node n1 gv3 a2) (join p p c2)), (In (Node n1 gv3 a2) (join p p c1)), (In (Node n1 gv3 a2) (insert n0 p)), (In (Node n1 gv3 a2) (insert n1 p)), (In (Node n1 gv3 a2) (insert n p)), (In (Node n1 gv3 a2) (carry p a2))
(In (Node n1 gv3 a2) (carry p a1)), (In (Node n1 gv3 a2) (carry p gv3)), (In (Node n1 gv3 a2) (carry p c2)), (In (Node n1 gv3 a2) (carry p c1)), (In (Node n1 gv3 a2) (p ++ p)), (In (Node n1 gv3 a1) p), (In (Node n1 gv3 a1) (a2 :: p)), (In (Node n1 gv3 a1) (a1 :: p)), (In (Node n1 gv3 a1) (gv3 :: p)), (In (Node n1 gv3 a1) (c2 :: p))
(In (Node n1 gv3 a1) (c1 :: p)), (In (Node n1 gv3 a1) (merge p p)), (In (Node n1 gv3 a1) (heap_delete_max a2)), (In (Node n1 gv3 a1) (heap_delete_max a1)), (In (Node n1 gv3 a1) (heap_delete_max gv3)), (In (Node n1 gv3 a1) (heap_delete_max c2)), (In (Node n1 gv3 a1) (heap_delete_max c1)), (In (Node n1 gv3 a1) (join p p a2)), (In (Node n1 gv3 a1) (join p p a1)), (In (Node n1 gv3 a1) (join p p gv3))
(In (Node n1 gv3 a1) (join p p c2)), (In (Node n1 gv3 a1) (join p p c1)), (In (Node n1 gv3 a1) (insert n0 p)), (In (Node n1 gv3 a1) (insert n1 p)), (In (Node n1 gv3 a1) (insert n p)), (In (Node n1 gv3 a1) (carry p a2)), (In (Node n1 gv3 a1) (carry p a1)), (In (Node n1 gv3 a1) (carry p gv3)), (In (Node n1 gv3 a1) (carry p c2)), (In (Node n1 gv3 a1) (carry p c1))
(In (Node n1 gv3 a1) (p ++ p)), (In (Node n1 gv3 gv3) p), (In (Node n1 gv3 gv3) (a2 :: p)), (In (Node n1 gv3 gv3) (a1 :: p)), (In (Node n1 gv3 gv3) (gv3 :: p)), (In (Node n1 gv3 gv3) (c2 :: p)), (In (Node n1 gv3 gv3) (c1 :: p)), (In (Node n1 gv3 gv3) (merge p p)), (In (Node n1 gv3 gv3) (heap_delete_max a2)), (In (Node n1 gv3 gv3) (heap_delete_max a1))
(In (Node n1 gv3 gv3) (heap_delete_max gv3)), (In (Node n1 gv3 gv3) (heap_delete_max c2)), (In (Node n1 gv3 gv3) (heap_delete_max c1)), (In (Node n1 gv3 gv3) (join p p a2)), (In (Node n1 gv3 gv3) (join p p a1)), (In (Node n1 gv3 gv3) (join p p gv3)), (In (Node n1 gv3 gv3) (join p p c2)), (In (Node n1 gv3 gv3) (join p p c1)), (In (Node n1 gv3 gv3) (insert n0 p)), (In (Node n1 gv3 gv3) (insert n1 p))
(In (Node n1 gv3 gv3) (insert n p)), (In (Node n1 gv3 gv3) (carry p a2)), (In (Node n1 gv3 gv3) (carry p a1)), (In (Node n1 gv3 gv3) (carry p gv3)), (In (Node n1 gv3 gv3) (carry p c2)), (In (Node n1 gv3 gv3) (carry p c1)), (In (Node n1 gv3 gv3) (p ++ p)), (In (Node n1 gv3 c2) p), (In (Node n1 gv3 c2) (a2 :: p)), (In (Node n1 gv3 c2) (a1 :: p))
(In (Node n1 gv3 c2) (gv3 :: p)), (In (Node n1 gv3 c2) (c2 :: p)), (In (Node n1 gv3 c2) (c1 :: p)), (In (Node n1 gv3 c2) (merge p p)), (In (Node n1 gv3 c2) (heap_delete_max a2)), (In (Node n1 gv3 c2) (heap_delete_max a1)), (In (Node n1 gv3 c2) (heap_delete_max gv3)), (In (Node n1 gv3 c2) (heap_delete_max c2)), (In (Node n1 gv3 c2) (heap_delete_max c1)), (In (Node n1 gv3 c2) (join p p a2))
(In (Node n1 gv3 c2) (join p p a1)), (In (Node n1 gv3 c2) (join p p gv3)), (In (Node n1 gv3 c2) (join p p c2)), (In (Node n1 gv3 c2) (join p p c1)), (In (Node n1 gv3 c2) (insert n0 p)), (In (Node n1 gv3 c2) (insert n1 p)), (In (Node n1 gv3 c2) (insert n p)), (In (Node n1 gv3 c2) (carry p a2)), (In (Node n1 gv3 c2) (carry p a1)), (In (Node n1 gv3 c2) (carry p gv3))
(In (Node n1 gv3 c2) (carry p c2)), (In (Node n1 gv3 c2) (carry p c1)), (In (Node n1 gv3 c2) (p ++ p)), (In (Node n1 gv3 c1) p), (In (Node n1 gv3 c1) (a2 :: p)), (In (Node n1 gv3 c1) (a1 :: p)), (In (Node n1 gv3 c1) (gv3 :: p)), (In (Node n1 gv3 c1) (c2 :: p)), (In (Node n1 gv3 c1) (c1 :: p)), (In (Node n1 gv3 c1) (merge p p))
(In (Node n1 gv3 c1) (heap_delete_max a2)), (In (Node n1 gv3 c1) (heap_delete_max a1)), (In (Node n1 gv3 c1) (heap_delete_max gv3)), (In (Node n1 gv3 c1) (heap_delete_max c2)), (In (Node n1 gv3 c1) (heap_delete_max c1)), (In (Node n1 gv3 c1) (join p p a2)), (In (Node n1 gv3 c1) (join p p a1)), (In (Node n1 gv3 c1) (join p p gv3)), (In (Node n1 gv3 c1) (join p p c2)), (In (Node n1 gv3 c1) (join p p c1))
(In (Node n1 gv3 c1) (insert n0 p)), (In (Node n1 gv3 c1) (insert n1 p)), (In (Node n1 gv3 c1) (insert n p)), (In (Node n1 gv3 c1) (carry p a2)), (In (Node n1 gv3 c1) (carry p a1)), (In (Node n1 gv3 c1) (carry p gv3)), (In (Node n1 gv3 c1) (carry p c2)), (In (Node n1 gv3 c1) (carry p c1)), (In (Node n1 gv3 c1) (p ++ p)), (In (Node n1 c2 a2) p)
(In (Node n1 c2 a2) (a2 :: p)), (In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (gv3 :: p)), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max gv3)), (In (Node n1 c2 a2) (heap_delete_max c2))
(In (Node n1 c2 a2) (heap_delete_max c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1)), (In (Node n1 c2 a2) (join p p gv3)), (In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (insert n0 p)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (carry p a2))
(In (Node n1 c2 a2) (carry p a1)), (In (Node n1 c2 a2) (carry p gv3)), (In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1)), (In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (gv3 :: p)), (In (Node n1 c2 a1) (c2 :: p))
(In (Node n1 c2 a1) (c1 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max a2)), (In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max gv3)), (In (Node n1 c2 a1) (heap_delete_max c2)), (In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p gv3))
(In (Node n1 c2 a1) (join p p c2)), (In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert n p)), (In (Node n1 c2 a1) (carry p a2)), (In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p gv3)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1))
(In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 gv3) p), (In (Node n1 c2 gv3) (a2 :: p)), (In (Node n1 c2 gv3) (a1 :: p)), (In (Node n1 c2 gv3) (gv3 :: p)), (In (Node n1 c2 gv3) (c2 :: p)), (In (Node n1 c2 gv3) (c1 :: p)), (In (Node n1 c2 gv3) (merge p p)), (In (Node n1 c2 gv3) (heap_delete_max a2)), (In (Node n1 c2 gv3) (heap_delete_max a1))
(In (Node n1 c2 gv3) (heap_delete_max gv3)), (In (Node n1 c2 gv3) (heap_delete_max c2)), (In (Node n1 c2 gv3) (heap_delete_max c1)), (In (Node n1 c2 gv3) (join p p a2)), (In (Node n1 c2 gv3) (join p p a1)), (In (Node n1 c2 gv3) (join p p gv3)), (In (Node n1 c2 gv3) (join p p c2)), (In (Node n1 c2 gv3) (join p p c1)), (In (Node n1 c2 gv3) (insert n0 p)), (In (Node n1 c2 gv3) (insert n1 p))
(In (Node n1 c2 gv3) (insert n p)), (In (Node n1 c2 gv3) (carry p a2)), (In (Node n1 c2 gv3) (carry p a1)), (In (Node n1 c2 gv3) (carry p gv3)), (In (Node n1 c2 gv3) (carry p c2)), (In (Node n1 c2 gv3) (carry p c1)), (In (Node n1 c2 gv3) (p ++ p)), (In (Node n1 c2 c2) p), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p))
(In (Node n1 c2 c2) (gv3 :: p)), (In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p)), (In (Node n1 c2 c2) (merge p p)), (In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1)), (In (Node n1 c2 c2) (heap_delete_max gv3)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (join p p a2))
(In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p gv3)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (insert n0 p)), (In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p gv3))
(In (Node n1 c2 c2) (carry p c2)), (In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p)), (In (Node n1 c2 c1) (gv3 :: p)), (In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (merge p p))
(In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max gv3)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (join p p a2)), (In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p gv3)), (In (Node n1 c2 c1) (join p p c2)), (In (Node n1 c2 c1) (join p p c1))
(In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p gv3)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (p ++ p)), (In (Node n1 c1 a2) p)
(In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (gv3 :: p)), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max gv3)), (In (Node n1 c1 a2) (heap_delete_max c2))
(In (Node n1 c1 a2) (heap_delete_max c1)), (In (Node n1 c1 a2) (join p p a2)), (In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p gv3)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (insert n0 p)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (carry p a2))
(In (Node n1 c1 a2) (carry p a1)), (In (Node n1 c1 a2) (carry p gv3)), (In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1)), (In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (gv3 :: p)), (In (Node n1 c1 a1) (c2 :: p))
(In (Node n1 c1 a1) (c1 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max a2)), (In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max gv3)), (In (Node n1 c1 a1) (heap_delete_max c2)), (In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p gv3))
(In (Node n1 c1 a1) (join p p c2)), (In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n1 p)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (carry p a2)), (In (Node n1 c1 a1) (carry p a1)), (In (Node n1 c1 a1) (carry p gv3)), (In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1))
(In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 gv3) p), (In (Node n1 c1 gv3) (a2 :: p)), (In (Node n1 c1 gv3) (a1 :: p)), (In (Node n1 c1 gv3) (gv3 :: p)), (In (Node n1 c1 gv3) (c2 :: p)), (In (Node n1 c1 gv3) (c1 :: p)), (In (Node n1 c1 gv3) (merge p p)), (In (Node n1 c1 gv3) (heap_delete_max a2)), (In (Node n1 c1 gv3) (heap_delete_max a1))
(In (Node n1 c1 gv3) (heap_delete_max gv3)), (In (Node n1 c1 gv3) (heap_delete_max c2)), (In (Node n1 c1 gv3) (heap_delete_max c1)), (In (Node n1 c1 gv3) (join p p a2)), (In (Node n1 c1 gv3) (join p p a1)), (In (Node n1 c1 gv3) (join p p gv3)), (In (Node n1 c1 gv3) (join p p c2)), (In (Node n1 c1 gv3) (join p p c1)), (In (Node n1 c1 gv3) (insert n0 p)), (In (Node n1 c1 gv3) (insert n1 p))
(In (Node n1 c1 gv3) (insert n p)), (In (Node n1 c1 gv3) (carry p a2)), (In (Node n1 c1 gv3) (carry p a1)), (In (Node n1 c1 gv3) (carry p gv3)), (In (Node n1 c1 gv3) (carry p c2)), (In (Node n1 c1 gv3) (carry p c1)), (In (Node n1 c1 gv3) (p ++ p)), (In (Node n1 c1 c2) p), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p))
(In (Node n1 c1 c2) (gv3 :: p)), (In (Node n1 c1 c2) (c2 :: p)), (In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max a2)), (In (Node n1 c1 c2) (heap_delete_max a1)), (In (Node n1 c1 c2) (heap_delete_max gv3)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (join p p a2))
(In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p gv3)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert n p)), (In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p gv3))
(In (Node n1 c1 c2) (carry p c2)), (In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p), (In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p)), (In (Node n1 c1 c1) (gv3 :: p)), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p)), (In (Node n1 c1 c1) (merge p p))
(In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max gv3)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (join p p a2)), (In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p gv3)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1))
(In (Node n1 c1 c1) (insert n0 p)), (In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p gv3)), (In (Node n1 c1 c1) (carry p c2)), (In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (p ++ p)), (In (Node n a2 a2) p)
(In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (gv3 :: p)), (In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv3)), (In (Node n a2 a2) (heap_delete_max c2))
(In (Node n a2 a2) (heap_delete_max c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p gv3)), (In (Node n a2 a2) (join p p c2)), (In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p a2))
(In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p gv3)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (gv3 :: p)), (In (Node n a2 a1) (c2 :: p))
(In (Node n a2 a1) (c1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv3)), (In (Node n a2 a1) (heap_delete_max c2)), (In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p gv3))
(In (Node n a2 a1) (join p p c2)), (In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p a2)), (In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p gv3)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1))
(In (Node n a2 a1) (p ++ p)), (In (Node n a2 gv3) p), (In (Node n a2 gv3) (a2 :: p)), (In (Node n a2 gv3) (a1 :: p)), (In (Node n a2 gv3) (gv3 :: p)), (In (Node n a2 gv3) (c2 :: p)), (In (Node n a2 gv3) (c1 :: p)), (In (Node n a2 gv3) (merge p p)), (In (Node n a2 gv3) (heap_delete_max a2)), (In (Node n a2 gv3) (heap_delete_max a1))
(In (Node n a2 gv3) (heap_delete_max gv3)), (In (Node n a2 gv3) (heap_delete_max c2)), (In (Node n a2 gv3) (heap_delete_max c1)), (In (Node n a2 gv3) (join p p a2)), (In (Node n a2 gv3) (join p p a1)), (In (Node n a2 gv3) (join p p gv3)), (In (Node n a2 gv3) (join p p c2)), (In (Node n a2 gv3) (join p p c1)), (In (Node n a2 gv3) (insert n0 p)), (In (Node n a2 gv3) (insert n1 p))
(In (Node n a2 gv3) (insert n p)), (In (Node n a2 gv3) (carry p a2)), (In (Node n a2 gv3) (carry p a1)), (In (Node n a2 gv3) (carry p gv3)), (In (Node n a2 gv3) (carry p c2)), (In (Node n a2 gv3) (carry p c1)), (In (Node n a2 gv3) (p ++ p)), (In (Node n a2 c2) p), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p))
(In (Node n a2 c2) (gv3 :: p)), (In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (merge p p)), (In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1)), (In (Node n a2 c2) (heap_delete_max gv3)), (In (Node n a2 c2) (heap_delete_max c2)), (In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (join p p a2))
(In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p gv3)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (insert n0 p)), (In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1)), (In (Node n a2 c2) (carry p gv3))
(In (Node n a2 c2) (carry p c2)), (In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p)), (In (Node n a2 c1) (gv3 :: p)), (In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (merge p p))
(In (Node n a2 c1) (heap_delete_max a2)), (In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max gv3)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (join p p a2)), (In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p gv3)), (In (Node n a2 c1) (join p p c2)), (In (Node n a2 c1) (join p p c1))
(In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert n p)), (In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p gv3)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (p ++ p)), (In (Node n a1 a2) p)
(In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (gv3 :: p)), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv3)), (In (Node n a1 a2) (heap_delete_max c2))
(In (Node n a1 a2) (heap_delete_max c1)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p gv3)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (insert n0 p)), (In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p a2))
(In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p gv3)), (In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (gv3 :: p)), (In (Node n a1 a1) (c2 :: p))
(In (Node n a1 a1) (c1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv3)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p gv3))
(In (Node n a1 a1) (join p p c2)), (In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n1 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p gv3)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1))
(In (Node n a1 a1) (p ++ p)), (In (Node n a1 gv3) p), (In (Node n a1 gv3) (a2 :: p)), (In (Node n a1 gv3) (a1 :: p)), (In (Node n a1 gv3) (gv3 :: p)), (In (Node n a1 gv3) (c2 :: p)), (In (Node n a1 gv3) (c1 :: p)), (In (Node n a1 gv3) (merge p p)), (In (Node n a1 gv3) (heap_delete_max a2)), (In (Node n a1 gv3) (heap_delete_max a1))
(In (Node n a1 gv3) (heap_delete_max gv3)), (In (Node n a1 gv3) (heap_delete_max c2)), (In (Node n a1 gv3) (heap_delete_max c1)), (In (Node n a1 gv3) (join p p a2)), (In (Node n a1 gv3) (join p p a1)), (In (Node n a1 gv3) (join p p gv3)), (In (Node n a1 gv3) (join p p c2)), (In (Node n a1 gv3) (join p p c1)), (In (Node n a1 gv3) (insert n0 p)), (In (Node n a1 gv3) (insert n1 p))
(In (Node n a1 gv3) (insert n p)), (In (Node n a1 gv3) (carry p a2)), (In (Node n a1 gv3) (carry p a1)), (In (Node n a1 gv3) (carry p gv3)), (In (Node n a1 gv3) (carry p c2)), (In (Node n a1 gv3) (carry p c1)), (In (Node n a1 gv3) (p ++ p)), (In (Node n a1 c2) p), (In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p))
(In (Node n a1 c2) (gv3 :: p)), (In (Node n a1 c2) (c2 :: p)), (In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1)), (In (Node n a1 c2) (heap_delete_max gv3)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (join p p a2))
(In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p gv3)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p gv3))
(In (Node n a1 c2) (carry p c2)), (In (Node n a1 c2) (carry p c1)), (In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p), (In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p)), (In (Node n a1 c1) (gv3 :: p)), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (merge p p))
(In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max gv3)), (In (Node n a1 c1) (heap_delete_max c2)), (In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (join p p a2)), (In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p gv3)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1))
(In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1)), (In (Node n a1 c1) (carry p gv3)), (In (Node n a1 c1) (carry p c2)), (In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (p ++ p)), (In (Node n gv3 a2) p)
(In (Node n gv3 a2) (a2 :: p)), (In (Node n gv3 a2) (a1 :: p)), (In (Node n gv3 a2) (gv3 :: p)), (In (Node n gv3 a2) (c2 :: p)), (In (Node n gv3 a2) (c1 :: p)), (In (Node n gv3 a2) (merge p p)), (In (Node n gv3 a2) (heap_delete_max a2)), (In (Node n gv3 a2) (heap_delete_max a1)), (In (Node n gv3 a2) (heap_delete_max gv3)), (In (Node n gv3 a2) (heap_delete_max c2))
(In (Node n gv3 a2) (heap_delete_max c1)), (In (Node n gv3 a2) (join p p a2)), (In (Node n gv3 a2) (join p p a1)), (In (Node n gv3 a2) (join p p gv3)), (In (Node n gv3 a2) (join p p c2)), (In (Node n gv3 a2) (join p p c1)), (In (Node n gv3 a2) (insert n0 p)), (In (Node n gv3 a2) (insert n1 p)), (In (Node n gv3 a2) (insert n p)), (In (Node n gv3 a2) (carry p a2))
(In (Node n gv3 a2) (carry p a1)), (In (Node n gv3 a2) (carry p gv3)), (In (Node n gv3 a2) (carry p c2)), (In (Node n gv3 a2) (carry p c1)), (In (Node n gv3 a2) (p ++ p)), (In (Node n gv3 a1) p), (In (Node n gv3 a1) (a2 :: p)), (In (Node n gv3 a1) (a1 :: p)), (In (Node n gv3 a1) (gv3 :: p)), (In (Node n gv3 a1) (c2 :: p))
(In (Node n gv3 a1) (c1 :: p)), (In (Node n gv3 a1) (merge p p)), (In (Node n gv3 a1) (heap_delete_max a2)), (In (Node n gv3 a1) (heap_delete_max a1)), (In (Node n gv3 a1) (heap_delete_max gv3)), (In (Node n gv3 a1) (heap_delete_max c2)), (In (Node n gv3 a1) (heap_delete_max c1)), (In (Node n gv3 a1) (join p p a2)), (In (Node n gv3 a1) (join p p a1)), (In (Node n gv3 a1) (join p p gv3))
(In (Node n gv3 a1) (join p p c2)), (In (Node n gv3 a1) (join p p c1)), (In (Node n gv3 a1) (insert n0 p)), (In (Node n gv3 a1) (insert n1 p)), (In (Node n gv3 a1) (insert n p)), (In (Node n gv3 a1) (carry p a2)), (In (Node n gv3 a1) (carry p a1)), (In (Node n gv3 a1) (carry p gv3)), (In (Node n gv3 a1) (carry p c2)), (In (Node n gv3 a1) (carry p c1))
(In (Node n gv3 a1) (p ++ p)), (In (Node n gv3 gv3) p), (In (Node n gv3 gv3) (a2 :: p)), (In (Node n gv3 gv3) (a1 :: p)), (In (Node n gv3 gv3) (gv3 :: p)), (In (Node n gv3 gv3) (c2 :: p)), (In (Node n gv3 gv3) (c1 :: p)), (In (Node n gv3 gv3) (merge p p)), (In (Node n gv3 gv3) (heap_delete_max a2)), (In (Node n gv3 gv3) (heap_delete_max a1))
(In (Node n gv3 gv3) (heap_delete_max gv3)), (In (Node n gv3 gv3) (heap_delete_max c2)), (In (Node n gv3 gv3) (heap_delete_max c1)), (In (Node n gv3 gv3) (join p p a2)), (In (Node n gv3 gv3) (join p p a1)), (In (Node n gv3 gv3) (join p p gv3)), (In (Node n gv3 gv3) (join p p c2)), (In (Node n gv3 gv3) (join p p c1)), (In (Node n gv3 gv3) (insert n0 p)), (In (Node n gv3 gv3) (insert n1 p))
(In (Node n gv3 gv3) (insert n p)), (In (Node n gv3 gv3) (carry p a2)), (In (Node n gv3 gv3) (carry p a1)), (In (Node n gv3 gv3) (carry p gv3)), (In (Node n gv3 gv3) (carry p c2)), (In (Node n gv3 gv3) (carry p c1)), (In (Node n gv3 gv3) (p ++ p)), (In (Node n gv3 c2) p), (In (Node n gv3 c2) (a2 :: p)), (In (Node n gv3 c2) (a1 :: p))
(In (Node n gv3 c2) (gv3 :: p)), (In (Node n gv3 c2) (c2 :: p)), (In (Node n gv3 c2) (c1 :: p)), (In (Node n gv3 c2) (merge p p)), (In (Node n gv3 c2) (heap_delete_max a2)), (In (Node n gv3 c2) (heap_delete_max a1)), (In (Node n gv3 c2) (heap_delete_max gv3)), (In (Node n gv3 c2) (heap_delete_max c2)), (In (Node n gv3 c2) (heap_delete_max c1)), (In (Node n gv3 c2) (join p p a2))
(In (Node n gv3 c2) (join p p a1)), (In (Node n gv3 c2) (join p p gv3)), (In (Node n gv3 c2) (join p p c2)), (In (Node n gv3 c2) (join p p c1)), (In (Node n gv3 c2) (insert n0 p)), (In (Node n gv3 c2) (insert n1 p)), (In (Node n gv3 c2) (insert n p)), (In (Node n gv3 c2) (carry p a2)), (In (Node n gv3 c2) (carry p a1)), (In (Node n gv3 c2) (carry p gv3))
(In (Node n gv3 c2) (carry p c2)), (In (Node n gv3 c2) (carry p c1)), (In (Node n gv3 c2) (p ++ p)), (In (Node n gv3 c1) p), (In (Node n gv3 c1) (a2 :: p)), (In (Node n gv3 c1) (a1 :: p)), (In (Node n gv3 c1) (gv3 :: p)), (In (Node n gv3 c1) (c2 :: p)), (In (Node n gv3 c1) (c1 :: p)), (In (Node n gv3 c1) (merge p p))
(In (Node n gv3 c1) (heap_delete_max a2)), (In (Node n gv3 c1) (heap_delete_max a1)), (In (Node n gv3 c1) (heap_delete_max gv3)), (In (Node n gv3 c1) (heap_delete_max c2)), (In (Node n gv3 c1) (heap_delete_max c1)), (In (Node n gv3 c1) (join p p a2)), (In (Node n gv3 c1) (join p p a1)), (In (Node n gv3 c1) (join p p gv3)), (In (Node n gv3 c1) (join p p c2)), (In (Node n gv3 c1) (join p p c1))
(In (Node n gv3 c1) (insert n0 p)), (In (Node n gv3 c1) (insert n1 p)), (In (Node n gv3 c1) (insert n p)), (In (Node n gv3 c1) (carry p a2)), (In (Node n gv3 c1) (carry p a1)), (In (Node n gv3 c1) (carry p gv3)), (In (Node n gv3 c1) (carry p c2)), (In (Node n gv3 c1) (carry p c1)), (In (Node n gv3 c1) (p ++ p)), (In (Node n c2 a2) p)
(In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (gv3 :: p)), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max a2)), (In (Node n c2 a2) (heap_delete_max a1)), (In (Node n c2 a2) (heap_delete_max gv3)), (In (Node n c2 a2) (heap_delete_max c2))
(In (Node n c2 a2) (heap_delete_max c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p gv3)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (insert n0 p)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert n p)), (In (Node n c2 a2) (carry p a2))
(In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p gv3)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (gv3 :: p)), (In (Node n c2 a1) (c2 :: p))
(In (Node n c2 a1) (c1 :: p)), (In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max gv3)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p gv3))
(In (Node n c2 a1) (join p p c2)), (In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (insert n0 p)), (In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert n p)), (In (Node n c2 a1) (carry p a2)), (In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p gv3)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1))
(In (Node n c2 a1) (p ++ p)), (In (Node n c2 gv3) p), (In (Node n c2 gv3) (a2 :: p)), (In (Node n c2 gv3) (a1 :: p)), (In (Node n c2 gv3) (gv3 :: p)), (In (Node n c2 gv3) (c2 :: p)), (In (Node n c2 gv3) (c1 :: p)), (In (Node n c2 gv3) (merge p p)), (In (Node n c2 gv3) (heap_delete_max a2)), (In (Node n c2 gv3) (heap_delete_max a1))
(In (Node n c2 gv3) (heap_delete_max gv3)), (In (Node n c2 gv3) (heap_delete_max c2)), (In (Node n c2 gv3) (heap_delete_max c1)), (In (Node n c2 gv3) (join p p a2)), (In (Node n c2 gv3) (join p p a1)), (In (Node n c2 gv3) (join p p gv3)), (In (Node n c2 gv3) (join p p c2)), (In (Node n c2 gv3) (join p p c1)), (In (Node n c2 gv3) (insert n0 p)), (In (Node n c2 gv3) (insert n1 p))
(In (Node n c2 gv3) (insert n p)), (In (Node n c2 gv3) (carry p a2)), (In (Node n c2 gv3) (carry p a1)), (In (Node n c2 gv3) (carry p gv3)), (In (Node n c2 gv3) (carry p c2)), (In (Node n c2 gv3) (carry p c1)), (In (Node n c2 gv3) (p ++ p)), (In (Node n c2 c2) p), (In (Node n c2 c2) (a2 :: p)), (In (Node n c2 c2) (a1 :: p))
(In (Node n c2 c2) (gv3 :: p)), (In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1)), (In (Node n c2 c2) (heap_delete_max gv3)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (join p p a2))
(In (Node n c2 c2) (join p p a1)), (In (Node n c2 c2) (join p p gv3)), (In (Node n c2 c2) (join p p c2)), (In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p gv3))
(In (Node n c2 c2) (carry p c2)), (In (Node n c2 c2) (carry p c1)), (In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p), (In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p)), (In (Node n c2 c1) (gv3 :: p)), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (merge p p))
(In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max gv3)), (In (Node n c2 c1) (heap_delete_max c2)), (In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (join p p a2)), (In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p gv3)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1))
(In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (carry p a2)), (In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p gv3)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1)), (In (Node n c2 c1) (p ++ p)), (In (Node n c1 a2) p)
(In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (gv3 :: p)), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (merge p p)), (In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max gv3)), (In (Node n c1 a2) (heap_delete_max c2))
(In (Node n c1 a2) (heap_delete_max c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p gv3)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (insert n0 p)), (In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (carry p a2))
(In (Node n c1 a2) (carry p a1)), (In (Node n c1 a2) (carry p gv3)), (In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p)), (In (Node n c1 a1) (gv3 :: p)), (In (Node n c1 a1) (c2 :: p))
(In (Node n c1 a1) (c1 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max a2)), (In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max gv3)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p gv3))
(In (Node n c1 a1) (join p p c2)), (In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert n p)), (In (Node n c1 a1) (carry p a2)), (In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p gv3)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1))
(In (Node n c1 a1) (p ++ p)), (In (Node n c1 gv3) p), (In (Node n c1 gv3) (a2 :: p)), (In (Node n c1 gv3) (a1 :: p)), (In (Node n c1 gv3) (gv3 :: p)), (In (Node n c1 gv3) (c2 :: p)), (In (Node n c1 gv3) (c1 :: p)), (In (Node n c1 gv3) (merge p p)), (In (Node n c1 gv3) (heap_delete_max a2)), (In (Node n c1 gv3) (heap_delete_max a1))
(In (Node n c1 gv3) (heap_delete_max gv3)), (In (Node n c1 gv3) (heap_delete_max c2)), (In (Node n c1 gv3) (heap_delete_max c1)), (In (Node n c1 gv3) (join p p a2)), (In (Node n c1 gv3) (join p p a1)), (In (Node n c1 gv3) (join p p gv3)), (In (Node n c1 gv3) (join p p c2)), (In (Node n c1 gv3) (join p p c1)), (In (Node n c1 gv3) (insert n0 p)), (In (Node n c1 gv3) (insert n1 p))
(In (Node n c1 gv3) (insert n p)), (In (Node n c1 gv3) (carry p a2)), (In (Node n c1 gv3) (carry p a1)), (In (Node n c1 gv3) (carry p gv3)), (In (Node n c1 gv3) (carry p c2)), (In (Node n c1 gv3) (carry p c1)), (In (Node n c1 gv3) (p ++ p)), (In (Node n c1 c2) p), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p))
(In (Node n c1 c2) (gv3 :: p)), (In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p)), (In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1)), (In (Node n c1 c2) (heap_delete_max gv3)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1)), (In (Node n c1 c2) (join p p a2))
(In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p gv3)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (insert n0 p)), (In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1)), (In (Node n c1 c2) (carry p gv3))
(In (Node n c1 c2) (carry p c2)), (In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p)), (In (Node n c1 c1) (gv3 :: p)), (In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (merge p p))
(In (Node n c1 c1) (heap_delete_max a2)), (In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max gv3)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (join p p a2)), (In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p gv3)), (In (Node n c1 c1) (join p p c2)), (In (Node n c1 c1) (join p p c1))
(In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n1 p)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p gv3)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (p ++ p)), (In (smash a2 a2) p)
(In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (gv3 :: p)), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max gv3)), (In (smash a2 a2) (heap_delete_max c2))
(In (smash a2 a2) (heap_delete_max c1)), (In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p gv3)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p a2))
(In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p gv3)), (In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1)), (In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (gv3 :: p)), (In (smash a2 a1) (c2 :: p))
(In (smash a2 a1) (c1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv3)), (In (smash a2 a1) (heap_delete_max c2)), (In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p gv3))
(In (smash a2 a1) (join p p c2)), (In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n1 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (carry p gv3)), (In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1))
(In (smash a2 a1) (p ++ p)), (In (smash a2 gv3) p), (In (smash a2 gv3) (a2 :: p)), (In (smash a2 gv3) (a1 :: p)), (In (smash a2 gv3) (gv3 :: p)), (In (smash a2 gv3) (c2 :: p)), (In (smash a2 gv3) (c1 :: p)), (In (smash a2 gv3) (merge p p)), (In (smash a2 gv3) (heap_delete_max a2)), (In (smash a2 gv3) (heap_delete_max a1))
(In (smash a2 gv3) (heap_delete_max gv3)), (In (smash a2 gv3) (heap_delete_max c2)), (In (smash a2 gv3) (heap_delete_max c1)), (In (smash a2 gv3) (join p p a2)), (In (smash a2 gv3) (join p p a1)), (In (smash a2 gv3) (join p p gv3)), (In (smash a2 gv3) (join p p c2)), (In (smash a2 gv3) (join p p c1)), (In (smash a2 gv3) (insert n0 p)), (In (smash a2 gv3) (insert n1 p))
(In (smash a2 gv3) (insert n p)), (In (smash a2 gv3) (carry p a2)), (In (smash a2 gv3) (carry p a1)), (In (smash a2 gv3) (carry p gv3)), (In (smash a2 gv3) (carry p c2)), (In (smash a2 gv3) (carry p c1)), (In (smash a2 gv3) (p ++ p)), (In (smash a2 c2) p), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p))
(In (smash a2 c2) (gv3 :: p)), (In (smash a2 c2) (c2 :: p)), (In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max a2)), (In (smash a2 c2) (heap_delete_max a1)), (In (smash a2 c2) (heap_delete_max gv3)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (join p p a2))
(In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p gv3)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert n p)), (In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p gv3))
(In (smash a2 c2) (carry p c2)), (In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p), (In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p)), (In (smash a2 c1) (gv3 :: p)), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p)), (In (smash a2 c1) (merge p p))
(In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max gv3)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (join p p a2)), (In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p gv3)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1))
(In (smash a2 c1) (insert n0 p)), (In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p gv3)), (In (smash a2 c1) (carry p c2)), (In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (p ++ p)), (In (smash a1 a2) p)
(In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (gv3 :: p)), (In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv3)), (In (smash a1 a2) (heap_delete_max c2))
(In (smash a1 a2) (heap_delete_max c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p gv3)), (In (smash a1 a2) (join p p c2)), (In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p a2))
(In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p gv3)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (gv3 :: p)), (In (smash a1 a1) (c2 :: p))
(In (smash a1 a1) (c1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv3)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p gv3))
(In (smash a1 a1) (join p p c2)), (In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p gv3)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1))
(In (smash a1 a1) (p ++ p)), (In (smash a1 gv3) p), (In (smash a1 gv3) (a2 :: p)), (In (smash a1 gv3) (a1 :: p)), (In (smash a1 gv3) (gv3 :: p)), (In (smash a1 gv3) (c2 :: p)), (In (smash a1 gv3) (c1 :: p)), (In (smash a1 gv3) (merge p p)), (In (smash a1 gv3) (heap_delete_max a2)), (In (smash a1 gv3) (heap_delete_max a1))
(In (smash a1 gv3) (heap_delete_max gv3)), (In (smash a1 gv3) (heap_delete_max c2)), (In (smash a1 gv3) (heap_delete_max c1)), (In (smash a1 gv3) (join p p a2)), (In (smash a1 gv3) (join p p a1)), (In (smash a1 gv3) (join p p gv3)), (In (smash a1 gv3) (join p p c2)), (In (smash a1 gv3) (join p p c1)), (In (smash a1 gv3) (insert n0 p)), (In (smash a1 gv3) (insert n1 p))
(In (smash a1 gv3) (insert n p)), (In (smash a1 gv3) (carry p a2)), (In (smash a1 gv3) (carry p a1)), (In (smash a1 gv3) (carry p gv3)), (In (smash a1 gv3) (carry p c2)), (In (smash a1 gv3) (carry p c1)), (In (smash a1 gv3) (p ++ p)), (In (smash a1 c2) p), (In (smash a1 c2) (a2 :: p)), (In (smash a1 c2) (a1 :: p))
(In (smash a1 c2) (gv3 :: p)), (In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1)), (In (smash a1 c2) (heap_delete_max gv3)), (In (smash a1 c2) (heap_delete_max c2)), (In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (join p p a2))
(In (smash a1 c2) (join p p a1)), (In (smash a1 c2) (join p p gv3)), (In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1)), (In (smash a1 c2) (carry p gv3))
(In (smash a1 c2) (carry p c2)), (In (smash a1 c2) (carry p c1)), (In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p)), (In (smash a1 c1) (gv3 :: p)), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (merge p p))
(In (smash a1 c1) (heap_delete_max a2)), (In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max gv3)), (In (smash a1 c1) (heap_delete_max c2)), (In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (join p p a2)), (In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p gv3)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1))
(In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert n p)), (In (smash a1 c1) (carry p a2)), (In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p gv3)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (p ++ p)), (In (smash gv3 a2) p)
(In (smash gv3 a2) (a2 :: p)), (In (smash gv3 a2) (a1 :: p)), (In (smash gv3 a2) (gv3 :: p)), (In (smash gv3 a2) (c2 :: p)), (In (smash gv3 a2) (c1 :: p)), (In (smash gv3 a2) (merge p p)), (In (smash gv3 a2) (heap_delete_max a2)), (In (smash gv3 a2) (heap_delete_max a1)), (In (smash gv3 a2) (heap_delete_max gv3)), (In (smash gv3 a2) (heap_delete_max c2))
(In (smash gv3 a2) (heap_delete_max c1)), (In (smash gv3 a2) (join p p a2)), (In (smash gv3 a2) (join p p a1)), (In (smash gv3 a2) (join p p gv3)), (In (smash gv3 a2) (join p p c2)), (In (smash gv3 a2) (join p p c1)), (In (smash gv3 a2) (insert n0 p)), (In (smash gv3 a2) (insert n1 p)), (In (smash gv3 a2) (insert n p)), (In (smash gv3 a2) (carry p a2))
(In (smash gv3 a2) (carry p a1)), (In (smash gv3 a2) (carry p gv3)), (In (smash gv3 a2) (carry p c2)), (In (smash gv3 a2) (carry p c1)), (In (smash gv3 a2) (p ++ p)), (In (smash gv3 a1) p), (In (smash gv3 a1) (a2 :: p)), (In (smash gv3 a1) (a1 :: p)), (In (smash gv3 a1) (gv3 :: p)), (In (smash gv3 a1) (c2 :: p))
(In (smash gv3 a1) (c1 :: p)), (In (smash gv3 a1) (merge p p)), (In (smash gv3 a1) (heap_delete_max a2)), (In (smash gv3 a1) (heap_delete_max a1)), (In (smash gv3 a1) (heap_delete_max gv3)), (In (smash gv3 a1) (heap_delete_max c2)), (In (smash gv3 a1) (heap_delete_max c1)), (In (smash gv3 a1) (join p p a2)), (In (smash gv3 a1) (join p p a1)), (In (smash gv3 a1) (join p p gv3))
(In (smash gv3 a1) (join p p c2)), (In (smash gv3 a1) (join p p c1)), (In (smash gv3 a1) (insert n0 p)), (In (smash gv3 a1) (insert n1 p)), (In (smash gv3 a1) (insert n p)), (In (smash gv3 a1) (carry p a2)), (In (smash gv3 a1) (carry p a1)), (In (smash gv3 a1) (carry p gv3)), (In (smash gv3 a1) (carry p c2)), (In (smash gv3 a1) (carry p c1))
(In (smash gv3 a1) (p ++ p)), (In (smash gv3 gv3) p), (In (smash gv3 gv3) (a2 :: p)), (In (smash gv3 gv3) (a1 :: p)), (In (smash gv3 gv3) (gv3 :: p)), (In (smash gv3 gv3) (c2 :: p)), (In (smash gv3 gv3) (c1 :: p)), (In (smash gv3 gv3) (merge p p)), (In (smash gv3 gv3) (heap_delete_max a2)), (In (smash gv3 gv3) (heap_delete_max a1))
(In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (heap_delete_max c2)), (In (smash gv3 gv3) (heap_delete_max c1)), (In (smash gv3 gv3) (join p p a2)), (In (smash gv3 gv3) (join p p a1)), (In (smash gv3 gv3) (join p p gv3)), (In (smash gv3 gv3) (join p p c2)), (In (smash gv3 gv3) (join p p c1)), (In (smash gv3 gv3) (insert n0 p)), (In (smash gv3 gv3) (insert n1 p))
(In (smash gv3 gv3) (insert n p)), (In (smash gv3 gv3) (carry p a2)), (In (smash gv3 gv3) (carry p a1)), (In (smash gv3 gv3) (carry p gv3)), (In (smash gv3 gv3) (carry p c2)), (In (smash gv3 gv3) (carry p c1)), (In (smash gv3 gv3) (p ++ p)), (In (smash gv3 c2) p), (In (smash gv3 c2) (a2 :: p)), (In (smash gv3 c2) (a1 :: p))
(In (smash gv3 c2) (gv3 :: p)), (In (smash gv3 c2) (c2 :: p)), (In (smash gv3 c2) (c1 :: p)), (In (smash gv3 c2) (merge p p)), (In (smash gv3 c2) (heap_delete_max a2)), (In (smash gv3 c2) (heap_delete_max a1)), (In (smash gv3 c2) (heap_delete_max gv3)), (In (smash gv3 c2) (heap_delete_max c2)), (In (smash gv3 c2) (heap_delete_max c1)), (In (smash gv3 c2) (join p p a2))
(In (smash gv3 c2) (join p p a1)), (In (smash gv3 c2) (join p p gv3)), (In (smash gv3 c2) (join p p c2)), (In (smash gv3 c2) (join p p c1)), (In (smash gv3 c2) (insert n0 p)), (In (smash gv3 c2) (insert n1 p)), (In (smash gv3 c2) (insert n p)), (In (smash gv3 c2) (carry p a2)), (In (smash gv3 c2) (carry p a1)), (In (smash gv3 c2) (carry p gv3))
(In (smash gv3 c2) (carry p c2)), (In (smash gv3 c2) (carry p c1)), (In (smash gv3 c2) (p ++ p)), (In (smash gv3 c1) p), (In (smash gv3 c1) (a2 :: p)), (In (smash gv3 c1) (a1 :: p)), (In (smash gv3 c1) (gv3 :: p)), (In (smash gv3 c1) (c2 :: p)), (In (smash gv3 c1) (c1 :: p)), (In (smash gv3 c1) (merge p p))
(In (smash gv3 c1) (heap_delete_max a2)), (In (smash gv3 c1) (heap_delete_max a1)), (In (smash gv3 c1) (heap_delete_max gv3)), (In (smash gv3 c1) (heap_delete_max c2)), (In (smash gv3 c1) (heap_delete_max c1)), (In (smash gv3 c1) (join p p a2)), (In (smash gv3 c1) (join p p a1)), (In (smash gv3 c1) (join p p gv3)), (In (smash gv3 c1) (join p p c2)), (In (smash gv3 c1) (join p p c1))
(In (smash gv3 c1) (insert n0 p)), (In (smash gv3 c1) (insert n1 p)), (In (smash gv3 c1) (insert n p)), (In (smash gv3 c1) (carry p a2)), (In (smash gv3 c1) (carry p a1)), (In (smash gv3 c1) (carry p gv3)), (In (smash gv3 c1) (carry p c2)), (In (smash gv3 c1) (carry p c1)), (In (smash gv3 c1) (p ++ p)), (In (smash c2 a2) p)
(In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (gv3 :: p)), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p)), (In (smash c2 a2) (merge p p)), (In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max gv3)), (In (smash c2 a2) (heap_delete_max c2))
(In (smash c2 a2) (heap_delete_max c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p gv3)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (insert n0 p)), (In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert n p)), (In (smash c2 a2) (carry p a2))
(In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p gv3)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p)), (In (smash c2 a1) (gv3 :: p)), (In (smash c2 a1) (c2 :: p))
(In (smash c2 a1) (c1 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max gv3)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p gv3))
(In (smash c2 a1) (join p p c2)), (In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (carry p a2)), (In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p gv3)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1))
(In (smash c2 a1) (p ++ p)), (In (smash c2 gv3) p), (In (smash c2 gv3) (a2 :: p)), (In (smash c2 gv3) (a1 :: p)), (In (smash c2 gv3) (gv3 :: p)), (In (smash c2 gv3) (c2 :: p)), (In (smash c2 gv3) (c1 :: p)), (In (smash c2 gv3) (merge p p)), (In (smash c2 gv3) (heap_delete_max a2)), (In (smash c2 gv3) (heap_delete_max a1))
(In (smash c2 gv3) (heap_delete_max gv3)), (In (smash c2 gv3) (heap_delete_max c2)), (In (smash c2 gv3) (heap_delete_max c1)), (In (smash c2 gv3) (join p p a2)), (In (smash c2 gv3) (join p p a1)), (In (smash c2 gv3) (join p p gv3)), (In (smash c2 gv3) (join p p c2)), (In (smash c2 gv3) (join p p c1)), (In (smash c2 gv3) (insert n0 p)), (In (smash c2 gv3) (insert n1 p))
(In (smash c2 gv3) (insert n p)), (In (smash c2 gv3) (carry p a2)), (In (smash c2 gv3) (carry p a1)), (In (smash c2 gv3) (carry p gv3)), (In (smash c2 gv3) (carry p c2)), (In (smash c2 gv3) (carry p c1)), (In (smash c2 gv3) (p ++ p)), (In (smash c2 c2) p), (In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p))
(In (smash c2 c2) (gv3 :: p)), (In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1)), (In (smash c2 c2) (heap_delete_max gv3)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1)), (In (smash c2 c2) (join p p a2))
(In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p gv3)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1)), (In (smash c2 c2) (carry p gv3))
(In (smash c2 c2) (carry p c2)), (In (smash c2 c2) (carry p c1)), (In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p)), (In (smash c2 c1) (gv3 :: p)), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (merge p p))
(In (smash c2 c1) (heap_delete_max a2)), (In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max gv3)), (In (smash c2 c1) (heap_delete_max c2)), (In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (join p p a2)), (In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p gv3)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1))
(In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n1 p)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1)), (In (smash c2 c1) (carry p gv3)), (In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (p ++ p)), (In (smash c1 a2) p)
(In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (gv3 :: p)), (In (smash c1 a2) (c2 :: p)), (In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max a2)), (In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max gv3)), (In (smash c1 a2) (heap_delete_max c2))
(In (smash c1 a2) (heap_delete_max c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p gv3)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1)), (In (smash c1 a2) (insert n0 p)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert n p)), (In (smash c1 a2) (carry p a2))
(In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p gv3)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p), (In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (gv3 :: p)), (In (smash c1 a1) (c2 :: p))
(In (smash c1 a1) (c1 :: p)), (In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max gv3)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (join p p a2)), (In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p gv3))
(In (smash c1 a1) (join p p c2)), (In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (insert n0 p)), (In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (carry p a2)), (In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p gv3)), (In (smash c1 a1) (carry p c2)), (In (smash c1 a1) (carry p c1))
(In (smash c1 a1) (p ++ p)), (In (smash c1 gv3) p), (In (smash c1 gv3) (a2 :: p)), (In (smash c1 gv3) (a1 :: p)), (In (smash c1 gv3) (gv3 :: p)), (In (smash c1 gv3) (c2 :: p)), (In (smash c1 gv3) (c1 :: p)), (In (smash c1 gv3) (merge p p)), (In (smash c1 gv3) (heap_delete_max a2)), (In (smash c1 gv3) (heap_delete_max a1))
(In (smash c1 gv3) (heap_delete_max gv3)), (In (smash c1 gv3) (heap_delete_max c2)), (In (smash c1 gv3) (heap_delete_max c1)), (In (smash c1 gv3) (join p p a2)), (In (smash c1 gv3) (join p p a1)), (In (smash c1 gv3) (join p p gv3)), (In (smash c1 gv3) (join p p c2)), (In (smash c1 gv3) (join p p c1)), (In (smash c1 gv3) (insert n0 p)), (In (smash c1 gv3) (insert n1 p))
(In (smash c1 gv3) (insert n p)), (In (smash c1 gv3) (carry p a2)), (In (smash c1 gv3) (carry p a1)), (In (smash c1 gv3) (carry p gv3)), (In (smash c1 gv3) (carry p c2)), (In (smash c1 gv3) (carry p c1)), (In (smash c1 gv3) (p ++ p)), (In (smash c1 c2) p), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p))
(In (smash c1 c2) (gv3 :: p)), (In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1)), (In (smash c1 c2) (heap_delete_max gv3)), (In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (join p p a2))
(In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p gv3)), (In (smash c1 c2) (join p p c2)), (In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p gv3))
(In (smash c1 c2) (carry p c2)), (In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p), (In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p)), (In (smash c1 c1) (gv3 :: p)), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p)), (In (smash c1 c1) (merge p p))
(In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max gv3)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (join p p a2)), (In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p gv3)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1))
(In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert n p)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p gv3)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1)), (In (smash c1 c1) (p ++ p)), (In Leaf p)
(In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (gv3 :: p)), (In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max gv3)), (In Leaf (heap_delete_max c2))
(In Leaf (heap_delete_max c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1)), (In Leaf (join p p gv3)), (In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (insert n0 p)), (In Leaf (insert n1 p)), (In Leaf (insert n p)), (In Leaf (carry p a2))
(In Leaf (carry p a1)), (In Leaf (carry p gv3)), (In Leaf (carry p c2)), (In Leaf (carry p c1)), (In Leaf (p ++ p)), (n0 < find_max' n0 p), (n0 < find_max' n1 p), (n0 < find_max' n p), (n0 < length p), (n1 < find_max' n0 p)
(n1 < find_max' n1 p), (n1 < find_max' n p), (n1 < length p), (n < find_max' n0 p), (n < find_max' n1 p), (n < find_max' n p), (n < length p), (find_max' n0 p < n0), (find_max' n0 p < n1), (find_max' n0 p < n)
(find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p), (find_max' n1 p < n0), (find_max' n1 p < n1), (find_max' n1 p < n), (find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' n p), (find_max' n1 p < length p), (find_max' n p < n0)
(find_max' n p < n1), (find_max' n p < n), (find_max' n p < find_max' n0 p), (find_max' n p < find_max' n1 p), (find_max' n p < length p), (length p < n0), (length p < n1), (length p < n), (length p < find_max' n0 p), (length p < find_max' n1 p)
(length p < find_max' n p), (n0 <= find_max' n0 p), (n0 <= find_max' n1 p), (n0 <= find_max' n p), (n0 <= length p), (n1 <= find_max' n0 p), (n1 <= find_max' n1 p), (n1 <= find_max' n p), (n1 <= length p), (n <= find_max' n0 p)
(n <= find_max' n1 p), (n <= find_max' n p), (n <= length p), (find_max' n0 p <= n0), (find_max' n0 p <= n1), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n1 p <= n0)
(find_max' n1 p <= n1), (find_max' n1 p <= n), (find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= length p), (find_max' n p <= n0), (find_max' n p <= n1), (find_max' n p <= n), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n1 p)
(find_max' n p <= length p), (length p <= n0), (length p <= n1), (length p <= n), (length p <= find_max' n0 p), (length p <= find_max' n1 p), (length p <= find_max' n p), (~ priq p), (~ priqq n0 p), (~ priqq n1 p)
(~ priqq n p), (~ pow2heap n0 a2), (~ pow2heap n0 a1), (~ pow2heap n0 gv3), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 gv3), (~ pow2heap n1 c2)
(~ pow2heap n1 c1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n gv3), (~ pow2heap n c2), (~ pow2heap n c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n0 gv3), (~ pow2heapp n0 n0 c2)
(~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 gv3), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n0 n gv3), (~ pow2heapp n0 n c2)
(~ pow2heapp n0 n c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1), (~ pow2heapp n1 n0 gv3), (~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1), (~ pow2heapp n1 n1 gv3), (~ pow2heapp n1 n1 c2)
(~ pow2heapp n1 n1 c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1), (~ pow2heapp n1 n gv3), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 gv3), (~ pow2heapp n n0 c2)
(~ pow2heapp n n0 c1), (~ pow2heapp n n1 a2), (~ pow2heapp n n1 a1), (~ pow2heapp n n1 gv3), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n gv3), (~ pow2heapp n n c2)
(~ pow2heapp n n c1), (~ Permutation p p), (~ In a2 p), (~ In a1 p), (~ In gv3 p), (~ In c2 p), (~ In c1 p), (~ n0 < n0), (~ n0 < n1), (~ n0 < n)
(~ n1 < n0), (~ n1 < n1), (~ n1 < n), (~ n < n0), (~ n < n1), (~ n < n), (~ n0 <= n0), (~ n0 <= n1), (~ n0 <= n), (~ n1 <= n0)
(~ n1 <= n1), (~ n1 <= n), (~ n <= n0), (~ n <= n1), (~ n <= n), (p <> p), (a2 <> a2), (a2 <> a1), (a2 <> gv3), (a2 <> c2)
(a2 <> c1), (a1 <> a2), (a1 <> a1), (a1 <> gv3), (a1 <> c2), (a1 <> c1), (gv3 <> a2), (gv3 <> a1), (gv3 <> gv3), (gv3 <> c2)
(gv3 <> c1), (c2 <> a2), (c2 <> a1), (c2 <> gv3), (c2 <> c2), (c2 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> gv3), (c1 <> c2)
(c1 <> c1), (n0 <> n0), (n0 <> n1), (n0 <> n), (n1 <> n0), (n1 <> n1), (n1 <> n), (n <> n0), (n <> n1), (n <> n)
(None = Some p), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max a2), (a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max gv3), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1)
(a2 :: p = join p p gv3), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = insert n0 p), (a2 :: p = insert n1 p), (a2 :: p = insert n p), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p gv3), (a2 :: p = carry p c2)
(a2 :: p = carry p c1), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = heap_delete_max gv3), (a1 :: p = heap_delete_max c2), (a1 :: p = heap_delete_max c1)
(a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p gv3), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = insert n0 p), (a1 :: p = insert n1 p), (a1 :: p = insert n p), (a1 :: p = carry p a2), (a1 :: p = carry p a1)
(a1 :: p = carry p gv3), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = p ++ p), (a1 :: p = []), (gv3 :: p = p), (gv3 :: p = merge p p), (gv3 :: p = heap_delete_max a2), (gv3 :: p = heap_delete_max a1), (gv3 :: p = heap_delete_max gv3)
(gv3 :: p = heap_delete_max c2), (gv3 :: p = heap_delete_max c1), (gv3 :: p = join p p a2), (gv3 :: p = join p p a1), (gv3 :: p = join p p gv3), (gv3 :: p = join p p c2), (gv3 :: p = join p p c1), (gv3 :: p = insert n0 p), (gv3 :: p = insert n1 p), (gv3 :: p = insert n p)
(gv3 :: p = carry p a2), (gv3 :: p = carry p a1), (gv3 :: p = carry p gv3), (gv3 :: p = carry p c2), (gv3 :: p = carry p c1), (gv3 :: p = p ++ p), (gv3 :: p = []), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max a2)
(c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max gv3), (c2 :: p = heap_delete_max c2), (c2 :: p = heap_delete_max c1), (c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p gv3), (c2 :: p = join p p c2), (c2 :: p = join p p c1), (c2 :: p = insert n0 p)
(c2 :: p = insert n1 p), (c2 :: p = insert n p), (c2 :: p = carry p a2), (c2 :: p = carry p a1), (c2 :: p = carry p gv3), (c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p)
(c1 :: p = merge p p), (c1 :: p = heap_delete_max a2), (c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max gv3), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1), (c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p gv3), (c1 :: p = join p p c2)
(c1 :: p = join p p c1), (c1 :: p = insert n0 p), (c1 :: p = insert n1 p), (c1 :: p = insert n p), (c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p gv3), (c1 :: p = carry p c2), (c1 :: p = carry p c1), (c1 :: p = p ++ p)
(c1 :: p = []), (merge p p = p), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max gv3), (merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = join p p a2), (merge p p = join p p a1), (merge p p = join p p gv3)
(merge p p = join p p c2), (merge p p = join p p c1), (merge p p = insert n0 p), (merge p p = insert n1 p), (merge p p = insert n p), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p gv3), (merge p p = carry p c2), (merge p p = carry p c1)
(merge p p = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = carry p gv3), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p a2)
(heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p gv3), (heap_delete_max a1 = carry p c2), (heap_delete_max a1 = carry p c1), (heap_delete_max a1 = p ++ p), (heap_delete_max gv3 = p), (heap_delete_max gv3 = carry p a2), (heap_delete_max gv3 = carry p a1), (heap_delete_max gv3 = carry p gv3), (heap_delete_max gv3 = carry p c2)
(heap_delete_max gv3 = carry p c1), (heap_delete_max gv3 = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1), (heap_delete_max c2 = carry p gv3), (heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p)
(heap_delete_max c1 = carry p a2), (heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p gv3), (heap_delete_max c1 = carry p c2), (heap_delete_max c1 = carry p c1), (heap_delete_max c1 = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max gv3)
(join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = insert n0 p), (join p p a2 = insert n1 p), (join p p a2 = insert n p), (join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = carry p gv3), (join p p a2 = carry p c2), (join p p a2 = carry p c1)
(join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = heap_delete_max gv3), (join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = insert n0 p), (join p p a1 = insert n1 p), (join p p a1 = insert n p)
(join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p gv3), (join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = p ++ p), (join p p gv3 = p), (join p p gv3 = heap_delete_max a2), (join p p gv3 = heap_delete_max a1), (join p p gv3 = heap_delete_max gv3)
(join p p gv3 = heap_delete_max c2), (join p p gv3 = heap_delete_max c1), (join p p gv3 = insert n0 p), (join p p gv3 = insert n1 p), (join p p gv3 = insert n p), (join p p gv3 = carry p a2), (join p p gv3 = carry p a1), (join p p gv3 = carry p gv3), (join p p gv3 = carry p c2), (join p p gv3 = carry p c1)
(join p p gv3 = p ++ p), (join p p c2 = p), (join p p c2 = heap_delete_max a2), (join p p c2 = heap_delete_max a1), (join p p c2 = heap_delete_max gv3), (join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = insert n0 p), (join p p c2 = insert n1 p), (join p p c2 = insert n p)
(join p p c2 = carry p a2), (join p p c2 = carry p a1), (join p p c2 = carry p gv3), (join p p c2 = carry p c2), (join p p c2 = carry p c1), (join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max gv3)
(join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = insert n0 p), (join p p c1 = insert n1 p), (join p p c1 = insert n p), (join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p gv3), (join p p c1 = carry p c2), (join p p c1 = carry p c1)
(join p p c1 = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max gv3), (insert n0 p = heap_delete_max c2), (insert n0 p = heap_delete_max c1), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p gv3)
(insert n0 p = carry p c2), (insert n0 p = carry p c1), (insert n0 p = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max gv3), (insert n1 p = heap_delete_max c2), (insert n1 p = heap_delete_max c1), (insert n1 p = carry p a2)
(insert n1 p = carry p a1), (insert n1 p = carry p gv3), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = heap_delete_max gv3), (insert n p = heap_delete_max c2)
(insert n p = heap_delete_max c1), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p gv3), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p)
(carry p a1 = p ++ p), (carry p gv3 = p), (carry p gv3 = p ++ p), (carry p c2 = p), (carry p c2 = p ++ p), (carry p c1 = p), (carry p c1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p)
([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max gv3), ([] = heap_delete_max c2), ([] = heap_delete_max c1), ([] = join p p a2), ([] = join p p a1), ([] = join p p gv3), ([] = join p p c2), ([] = join p p c1)
([] = insert n0 p), ([] = insert n1 p), ([] = insert n p), ([] = carry p a2), ([] = carry p a1), ([] = carry p gv3), ([] = carry p c2), ([] = carry p c1), ([] = p ++ p), ((p, p) = delete_max_aux n0 p)
((p, p) = delete_max_aux n1 p), ((p, p) = delete_max_aux n p), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = gv3), (Node n0 a2 a2 = c2), (Node n0 a2 a2 = c1), (Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 gv3)
(Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 gv3), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash gv3 a2), (Node n0 a2 a2 = smash gv3 a1), (Node n0 a2 a2 = smash gv3 gv3)
(Node n0 a2 a2 = smash gv3 c2), (Node n0 a2 a2 = smash gv3 c1), (Node n0 a2 a2 = smash c2 a2), (Node n0 a2 a2 = smash c2 a1), (Node n0 a2 a2 = smash c2 gv3), (Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 gv3)
(Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = gv3), (Node n0 a2 a1 = c2), (Node n0 a2 a1 = c1), (Node n0 a2 a1 = smash a2 a2), (Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 gv3)
(Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 gv3), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash gv3 a2), (Node n0 a2 a1 = smash gv3 a1), (Node n0 a2 a1 = smash gv3 gv3)
(Node n0 a2 a1 = smash gv3 c2), (Node n0 a2 a1 = smash gv3 c1), (Node n0 a2 a1 = smash c2 a2), (Node n0 a2 a1 = smash c2 a1), (Node n0 a2 a1 = smash c2 gv3), (Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 gv3)
(Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 gv3 = a2), (Node n0 a2 gv3 = a1), (Node n0 a2 gv3 = gv3), (Node n0 a2 gv3 = c2), (Node n0 a2 gv3 = c1), (Node n0 a2 gv3 = smash a2 a2), (Node n0 a2 gv3 = smash a2 a1), (Node n0 a2 gv3 = smash a2 gv3)
(Node n0 a2 gv3 = smash a2 c2), (Node n0 a2 gv3 = smash a2 c1), (Node n0 a2 gv3 = smash a1 a2), (Node n0 a2 gv3 = smash a1 a1), (Node n0 a2 gv3 = smash a1 gv3), (Node n0 a2 gv3 = smash a1 c2), (Node n0 a2 gv3 = smash a1 c1), (Node n0 a2 gv3 = smash gv3 a2), (Node n0 a2 gv3 = smash gv3 a1), (Node n0 a2 gv3 = smash gv3 gv3)
(Node n0 a2 gv3 = smash gv3 c2), (Node n0 a2 gv3 = smash gv3 c1), (Node n0 a2 gv3 = smash c2 a2), (Node n0 a2 gv3 = smash c2 a1), (Node n0 a2 gv3 = smash c2 gv3), (Node n0 a2 gv3 = smash c2 c2), (Node n0 a2 gv3 = smash c2 c1), (Node n0 a2 gv3 = smash c1 a2), (Node n0 a2 gv3 = smash c1 a1), (Node n0 a2 gv3 = smash c1 gv3)
(Node n0 a2 gv3 = smash c1 c2), (Node n0 a2 gv3 = smash c1 c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = gv3), (Node n0 a2 c2 = c2), (Node n0 a2 c2 = c1), (Node n0 a2 c2 = smash a2 a2), (Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 gv3)
(Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 gv3), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash gv3 a2), (Node n0 a2 c2 = smash gv3 a1), (Node n0 a2 c2 = smash gv3 gv3)
(Node n0 a2 c2 = smash gv3 c2), (Node n0 a2 c2 = smash gv3 c1), (Node n0 a2 c2 = smash c2 a2), (Node n0 a2 c2 = smash c2 a1), (Node n0 a2 c2 = smash c2 gv3), (Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 gv3)
(Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = gv3), (Node n0 a2 c1 = c2), (Node n0 a2 c1 = c1), (Node n0 a2 c1 = smash a2 a2), (Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 gv3)
(Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 gv3), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash gv3 a2), (Node n0 a2 c1 = smash gv3 a1), (Node n0 a2 c1 = smash gv3 gv3)
(Node n0 a2 c1 = smash gv3 c2), (Node n0 a2 c1 = smash gv3 c1), (Node n0 a2 c1 = smash c2 a2), (Node n0 a2 c1 = smash c2 a1), (Node n0 a2 c1 = smash c2 gv3), (Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 gv3)
(Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = gv3), (Node n0 a1 a2 = c2), (Node n0 a1 a2 = c1), (Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 gv3)
(Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 gv3), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash gv3 a2), (Node n0 a1 a2 = smash gv3 a1), (Node n0 a1 a2 = smash gv3 gv3)
(Node n0 a1 a2 = smash gv3 c2), (Node n0 a1 a2 = smash gv3 c1), (Node n0 a1 a2 = smash c2 a2), (Node n0 a1 a2 = smash c2 a1), (Node n0 a1 a2 = smash c2 gv3), (Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 gv3)
(Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = gv3), (Node n0 a1 a1 = c2), (Node n0 a1 a1 = c1), (Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 gv3)
(Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 gv3), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash gv3 a2), (Node n0 a1 a1 = smash gv3 a1), (Node n0 a1 a1 = smash gv3 gv3)
(Node n0 a1 a1 = smash gv3 c2), (Node n0 a1 a1 = smash gv3 c1), (Node n0 a1 a1 = smash c2 a2), (Node n0 a1 a1 = smash c2 a1), (Node n0 a1 a1 = smash c2 gv3), (Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 gv3)
(Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 gv3 = a2), (Node n0 a1 gv3 = a1), (Node n0 a1 gv3 = gv3), (Node n0 a1 gv3 = c2), (Node n0 a1 gv3 = c1), (Node n0 a1 gv3 = smash a2 a2), (Node n0 a1 gv3 = smash a2 a1), (Node n0 a1 gv3 = smash a2 gv3)
(Node n0 a1 gv3 = smash a2 c2), (Node n0 a1 gv3 = smash a2 c1), (Node n0 a1 gv3 = smash a1 a2), (Node n0 a1 gv3 = smash a1 a1), (Node n0 a1 gv3 = smash a1 gv3), (Node n0 a1 gv3 = smash a1 c2), (Node n0 a1 gv3 = smash a1 c1), (Node n0 a1 gv3 = smash gv3 a2), (Node n0 a1 gv3 = smash gv3 a1), (Node n0 a1 gv3 = smash gv3 gv3)
(Node n0 a1 gv3 = smash gv3 c2), (Node n0 a1 gv3 = smash gv3 c1), (Node n0 a1 gv3 = smash c2 a2), (Node n0 a1 gv3 = smash c2 a1), (Node n0 a1 gv3 = smash c2 gv3), (Node n0 a1 gv3 = smash c2 c2), (Node n0 a1 gv3 = smash c2 c1), (Node n0 a1 gv3 = smash c1 a2), (Node n0 a1 gv3 = smash c1 a1), (Node n0 a1 gv3 = smash c1 gv3)
(Node n0 a1 gv3 = smash c1 c2), (Node n0 a1 gv3 = smash c1 c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = gv3), (Node n0 a1 c2 = c2), (Node n0 a1 c2 = c1), (Node n0 a1 c2 = smash a2 a2), (Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 gv3)
(Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 gv3), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash gv3 a2), (Node n0 a1 c2 = smash gv3 a1), (Node n0 a1 c2 = smash gv3 gv3)
(Node n0 a1 c2 = smash gv3 c2), (Node n0 a1 c2 = smash gv3 c1), (Node n0 a1 c2 = smash c2 a2), (Node n0 a1 c2 = smash c2 a1), (Node n0 a1 c2 = smash c2 gv3), (Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 gv3)
(Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = gv3), (Node n0 a1 c1 = c2), (Node n0 a1 c1 = c1), (Node n0 a1 c1 = smash a2 a2), (Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 gv3)
(Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 gv3), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash gv3 a2), (Node n0 a1 c1 = smash gv3 a1), (Node n0 a1 c1 = smash gv3 gv3)
(Node n0 a1 c1 = smash gv3 c2), (Node n0 a1 c1 = smash gv3 c1), (Node n0 a1 c1 = smash c2 a2), (Node n0 a1 c1 = smash c2 a1), (Node n0 a1 c1 = smash c2 gv3), (Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 gv3)
(Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 gv3 a2 = a2), (Node n0 gv3 a2 = a1), (Node n0 gv3 a2 = gv3), (Node n0 gv3 a2 = c2), (Node n0 gv3 a2 = c1), (Node n0 gv3 a2 = smash a2 a2), (Node n0 gv3 a2 = smash a2 a1), (Node n0 gv3 a2 = smash a2 gv3)
(Node n0 gv3 a2 = smash a2 c2), (Node n0 gv3 a2 = smash a2 c1), (Node n0 gv3 a2 = smash a1 a2), (Node n0 gv3 a2 = smash a1 a1), (Node n0 gv3 a2 = smash a1 gv3), (Node n0 gv3 a2 = smash a1 c2), (Node n0 gv3 a2 = smash a1 c1), (Node n0 gv3 a2 = smash gv3 a2), (Node n0 gv3 a2 = smash gv3 a1), (Node n0 gv3 a2 = smash gv3 gv3)
(Node n0 gv3 a2 = smash gv3 c2), (Node n0 gv3 a2 = smash gv3 c1), (Node n0 gv3 a2 = smash c2 a2), (Node n0 gv3 a2 = smash c2 a1), (Node n0 gv3 a2 = smash c2 gv3), (Node n0 gv3 a2 = smash c2 c2), (Node n0 gv3 a2 = smash c2 c1), (Node n0 gv3 a2 = smash c1 a2), (Node n0 gv3 a2 = smash c1 a1), (Node n0 gv3 a2 = smash c1 gv3)
(Node n0 gv3 a2 = smash c1 c2), (Node n0 gv3 a2 = smash c1 c1), (Node n0 gv3 a1 = a2), (Node n0 gv3 a1 = a1), (Node n0 gv3 a1 = gv3), (Node n0 gv3 a1 = c2), (Node n0 gv3 a1 = c1), (Node n0 gv3 a1 = smash a2 a2), (Node n0 gv3 a1 = smash a2 a1), (Node n0 gv3 a1 = smash a2 gv3)
(Node n0 gv3 a1 = smash a2 c2), (Node n0 gv3 a1 = smash a2 c1), (Node n0 gv3 a1 = smash a1 a2), (Node n0 gv3 a1 = smash a1 a1), (Node n0 gv3 a1 = smash a1 gv3), (Node n0 gv3 a1 = smash a1 c2), (Node n0 gv3 a1 = smash a1 c1), (Node n0 gv3 a1 = smash gv3 a2), (Node n0 gv3 a1 = smash gv3 a1), (Node n0 gv3 a1 = smash gv3 gv3)
(Node n0 gv3 a1 = smash gv3 c2), (Node n0 gv3 a1 = smash gv3 c1), (Node n0 gv3 a1 = smash c2 a2), (Node n0 gv3 a1 = smash c2 a1), (Node n0 gv3 a1 = smash c2 gv3), (Node n0 gv3 a1 = smash c2 c2), (Node n0 gv3 a1 = smash c2 c1), (Node n0 gv3 a1 = smash c1 a2), (Node n0 gv3 a1 = smash c1 a1), (Node n0 gv3 a1 = smash c1 gv3)
(Node n0 gv3 a1 = smash c1 c2), (Node n0 gv3 a1 = smash c1 c1), (Node n0 gv3 gv3 = a2), (Node n0 gv3 gv3 = a1), (Node n0 gv3 gv3 = gv3), (Node n0 gv3 gv3 = c2), (Node n0 gv3 gv3 = c1), (Node n0 gv3 gv3 = smash a2 a2), (Node n0 gv3 gv3 = smash a2 a1), (Node n0 gv3 gv3 = smash a2 gv3)
(Node n0 gv3 gv3 = smash a2 c2), (Node n0 gv3 gv3 = smash a2 c1), (Node n0 gv3 gv3 = smash a1 a2), (Node n0 gv3 gv3 = smash a1 a1), (Node n0 gv3 gv3 = smash a1 gv3), (Node n0 gv3 gv3 = smash a1 c2), (Node n0 gv3 gv3 = smash a1 c1), (Node n0 gv3 gv3 = smash gv3 a2), (Node n0 gv3 gv3 = smash gv3 a1), (Node n0 gv3 gv3 = smash gv3 gv3)
(Node n0 gv3 gv3 = smash gv3 c2), (Node n0 gv3 gv3 = smash gv3 c1), (Node n0 gv3 gv3 = smash c2 a2), (Node n0 gv3 gv3 = smash c2 a1), (Node n0 gv3 gv3 = smash c2 gv3), (Node n0 gv3 gv3 = smash c2 c2), (Node n0 gv3 gv3 = smash c2 c1), (Node n0 gv3 gv3 = smash c1 a2), (Node n0 gv3 gv3 = smash c1 a1), (Node n0 gv3 gv3 = smash c1 gv3)
(Node n0 gv3 gv3 = smash c1 c2), (Node n0 gv3 gv3 = smash c1 c1), (Node n0 gv3 c2 = a2), (Node n0 gv3 c2 = a1), (Node n0 gv3 c2 = gv3), (Node n0 gv3 c2 = c2), (Node n0 gv3 c2 = c1), (Node n0 gv3 c2 = smash a2 a2), (Node n0 gv3 c2 = smash a2 a1), (Node n0 gv3 c2 = smash a2 gv3)
(Node n0 gv3 c2 = smash a2 c2), (Node n0 gv3 c2 = smash a2 c1), (Node n0 gv3 c2 = smash a1 a2), (Node n0 gv3 c2 = smash a1 a1), (Node n0 gv3 c2 = smash a1 gv3), (Node n0 gv3 c2 = smash a1 c2), (Node n0 gv3 c2 = smash a1 c1), (Node n0 gv3 c2 = smash gv3 a2), (Node n0 gv3 c2 = smash gv3 a1), (Node n0 gv3 c2 = smash gv3 gv3)
(Node n0 gv3 c2 = smash gv3 c2), (Node n0 gv3 c2 = smash gv3 c1), (Node n0 gv3 c2 = smash c2 a2), (Node n0 gv3 c2 = smash c2 a1), (Node n0 gv3 c2 = smash c2 gv3), (Node n0 gv3 c2 = smash c2 c2), (Node n0 gv3 c2 = smash c2 c1), (Node n0 gv3 c2 = smash c1 a2), (Node n0 gv3 c2 = smash c1 a1), (Node n0 gv3 c2 = smash c1 gv3)
(Node n0 gv3 c2 = smash c1 c2), (Node n0 gv3 c2 = smash c1 c1), (Node n0 gv3 c1 = a2), (Node n0 gv3 c1 = a1), (Node n0 gv3 c1 = gv3), (Node n0 gv3 c1 = c2), (Node n0 gv3 c1 = c1), (Node n0 gv3 c1 = smash a2 a2), (Node n0 gv3 c1 = smash a2 a1), (Node n0 gv3 c1 = smash a2 gv3)
(Node n0 gv3 c1 = smash a2 c2), (Node n0 gv3 c1 = smash a2 c1), (Node n0 gv3 c1 = smash a1 a2), (Node n0 gv3 c1 = smash a1 a1), (Node n0 gv3 c1 = smash a1 gv3), (Node n0 gv3 c1 = smash a1 c2), (Node n0 gv3 c1 = smash a1 c1), (Node n0 gv3 c1 = smash gv3 a2), (Node n0 gv3 c1 = smash gv3 a1), (Node n0 gv3 c1 = smash gv3 gv3)
(Node n0 gv3 c1 = smash gv3 c2), (Node n0 gv3 c1 = smash gv3 c1), (Node n0 gv3 c1 = smash c2 a2), (Node n0 gv3 c1 = smash c2 a1), (Node n0 gv3 c1 = smash c2 gv3), (Node n0 gv3 c1 = smash c2 c2), (Node n0 gv3 c1 = smash c2 c1), (Node n0 gv3 c1 = smash c1 a2), (Node n0 gv3 c1 = smash c1 a1), (Node n0 gv3 c1 = smash c1 gv3)
(Node n0 gv3 c1 = smash c1 c2), (Node n0 gv3 c1 = smash c1 c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = gv3), (Node n0 c2 a2 = c2), (Node n0 c2 a2 = c1), (Node n0 c2 a2 = smash a2 a2), (Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 gv3)
(Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 gv3), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash gv3 a2), (Node n0 c2 a2 = smash gv3 a1), (Node n0 c2 a2 = smash gv3 gv3)
(Node n0 c2 a2 = smash gv3 c2), (Node n0 c2 a2 = smash gv3 c1), (Node n0 c2 a2 = smash c2 a2), (Node n0 c2 a2 = smash c2 a1), (Node n0 c2 a2 = smash c2 gv3), (Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 gv3)
(Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = gv3), (Node n0 c2 a1 = c2), (Node n0 c2 a1 = c1), (Node n0 c2 a1 = smash a2 a2), (Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 gv3)
(Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 gv3), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash gv3 a2), (Node n0 c2 a1 = smash gv3 a1), (Node n0 c2 a1 = smash gv3 gv3)
(Node n0 c2 a1 = smash gv3 c2), (Node n0 c2 a1 = smash gv3 c1), (Node n0 c2 a1 = smash c2 a2), (Node n0 c2 a1 = smash c2 a1), (Node n0 c2 a1 = smash c2 gv3), (Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 gv3)
(Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 gv3 = a2), (Node n0 c2 gv3 = a1), (Node n0 c2 gv3 = gv3), (Node n0 c2 gv3 = c2), (Node n0 c2 gv3 = c1), (Node n0 c2 gv3 = smash a2 a2), (Node n0 c2 gv3 = smash a2 a1), (Node n0 c2 gv3 = smash a2 gv3)
(Node n0 c2 gv3 = smash a2 c2), (Node n0 c2 gv3 = smash a2 c1), (Node n0 c2 gv3 = smash a1 a2), (Node n0 c2 gv3 = smash a1 a1), (Node n0 c2 gv3 = smash a1 gv3), (Node n0 c2 gv3 = smash a1 c2), (Node n0 c2 gv3 = smash a1 c1), (Node n0 c2 gv3 = smash gv3 a2), (Node n0 c2 gv3 = smash gv3 a1), (Node n0 c2 gv3 = smash gv3 gv3)
(Node n0 c2 gv3 = smash gv3 c2), (Node n0 c2 gv3 = smash gv3 c1), (Node n0 c2 gv3 = smash c2 a2), (Node n0 c2 gv3 = smash c2 a1), (Node n0 c2 gv3 = smash c2 gv3), (Node n0 c2 gv3 = smash c2 c2), (Node n0 c2 gv3 = smash c2 c1), (Node n0 c2 gv3 = smash c1 a2), (Node n0 c2 gv3 = smash c1 a1), (Node n0 c2 gv3 = smash c1 gv3)
(Node n0 c2 gv3 = smash c1 c2), (Node n0 c2 gv3 = smash c1 c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = gv3), (Node n0 c2 c2 = c2), (Node n0 c2 c2 = c1), (Node n0 c2 c2 = smash a2 a2), (Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 gv3)
(Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 gv3), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash gv3 a2), (Node n0 c2 c2 = smash gv3 a1), (Node n0 c2 c2 = smash gv3 gv3)
(Node n0 c2 c2 = smash gv3 c2), (Node n0 c2 c2 = smash gv3 c1), (Node n0 c2 c2 = smash c2 a2), (Node n0 c2 c2 = smash c2 a1), (Node n0 c2 c2 = smash c2 gv3), (Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 gv3)
(Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = gv3), (Node n0 c2 c1 = c2), (Node n0 c2 c1 = c1), (Node n0 c2 c1 = smash a2 a2), (Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 gv3)
(Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 gv3), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash gv3 a2), (Node n0 c2 c1 = smash gv3 a1), (Node n0 c2 c1 = smash gv3 gv3)
(Node n0 c2 c1 = smash gv3 c2), (Node n0 c2 c1 = smash gv3 c1), (Node n0 c2 c1 = smash c2 a2), (Node n0 c2 c1 = smash c2 a1), (Node n0 c2 c1 = smash c2 gv3), (Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 gv3)
(Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = gv3), (Node n0 c1 a2 = c2), (Node n0 c1 a2 = c1), (Node n0 c1 a2 = smash a2 a2), (Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 gv3)
(Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 gv3), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash gv3 a2), (Node n0 c1 a2 = smash gv3 a1), (Node n0 c1 a2 = smash gv3 gv3)
(Node n0 c1 a2 = smash gv3 c2), (Node n0 c1 a2 = smash gv3 c1), (Node n0 c1 a2 = smash c2 a2), (Node n0 c1 a2 = smash c2 a1), (Node n0 c1 a2 = smash c2 gv3), (Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 gv3)
(Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = gv3), (Node n0 c1 a1 = c2), (Node n0 c1 a1 = c1), (Node n0 c1 a1 = smash a2 a2), (Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 gv3)
(Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 gv3), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash gv3 a2), (Node n0 c1 a1 = smash gv3 a1), (Node n0 c1 a1 = smash gv3 gv3)
(Node n0 c1 a1 = smash gv3 c2), (Node n0 c1 a1 = smash gv3 c1), (Node n0 c1 a1 = smash c2 a2), (Node n0 c1 a1 = smash c2 a1), (Node n0 c1 a1 = smash c2 gv3), (Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 gv3)
(Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 gv3 = a2), (Node n0 c1 gv3 = a1), (Node n0 c1 gv3 = gv3), (Node n0 c1 gv3 = c2), (Node n0 c1 gv3 = c1), (Node n0 c1 gv3 = smash a2 a2), (Node n0 c1 gv3 = smash a2 a1), (Node n0 c1 gv3 = smash a2 gv3)
(Node n0 c1 gv3 = smash a2 c2), (Node n0 c1 gv3 = smash a2 c1), (Node n0 c1 gv3 = smash a1 a2), (Node n0 c1 gv3 = smash a1 a1), (Node n0 c1 gv3 = smash a1 gv3), (Node n0 c1 gv3 = smash a1 c2), (Node n0 c1 gv3 = smash a1 c1), (Node n0 c1 gv3 = smash gv3 a2), (Node n0 c1 gv3 = smash gv3 a1), (Node n0 c1 gv3 = smash gv3 gv3)
(Node n0 c1 gv3 = smash gv3 c2), (Node n0 c1 gv3 = smash gv3 c1), (Node n0 c1 gv3 = smash c2 a2), (Node n0 c1 gv3 = smash c2 a1), (Node n0 c1 gv3 = smash c2 gv3), (Node n0 c1 gv3 = smash c2 c2), (Node n0 c1 gv3 = smash c2 c1), (Node n0 c1 gv3 = smash c1 a2), (Node n0 c1 gv3 = smash c1 a1), (Node n0 c1 gv3 = smash c1 gv3)
(Node n0 c1 gv3 = smash c1 c2), (Node n0 c1 gv3 = smash c1 c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = gv3), (Node n0 c1 c2 = c2), (Node n0 c1 c2 = c1), (Node n0 c1 c2 = smash a2 a2), (Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 gv3)
(Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 gv3), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash gv3 a2), (Node n0 c1 c2 = smash gv3 a1), (Node n0 c1 c2 = smash gv3 gv3)
(Node n0 c1 c2 = smash gv3 c2), (Node n0 c1 c2 = smash gv3 c1), (Node n0 c1 c2 = smash c2 a2), (Node n0 c1 c2 = smash c2 a1), (Node n0 c1 c2 = smash c2 gv3), (Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 gv3)
(Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = gv3), (Node n0 c1 c1 = c2), (Node n0 c1 c1 = c1), (Node n0 c1 c1 = smash a2 a2), (Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 gv3)
(Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 gv3), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash gv3 a2), (Node n0 c1 c1 = smash gv3 a1), (Node n0 c1 c1 = smash gv3 gv3)
(Node n0 c1 c1 = smash gv3 c2), (Node n0 c1 c1 = smash gv3 c1), (Node n0 c1 c1 = smash c2 a2), (Node n0 c1 c1 = smash c2 a1), (Node n0 c1 c1 = smash c2 gv3), (Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 gv3)
(Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = gv3), (Node n1 a2 a2 = c2), (Node n1 a2 a2 = c1), (Node n1 a2 a2 = smash a2 a2), (Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 gv3)
(Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 gv3), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash gv3 a2), (Node n1 a2 a2 = smash gv3 a1), (Node n1 a2 a2 = smash gv3 gv3)
(Node n1 a2 a2 = smash gv3 c2), (Node n1 a2 a2 = smash gv3 c1), (Node n1 a2 a2 = smash c2 a2), (Node n1 a2 a2 = smash c2 a1), (Node n1 a2 a2 = smash c2 gv3), (Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 gv3)
(Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = gv3), (Node n1 a2 a1 = c2), (Node n1 a2 a1 = c1), (Node n1 a2 a1 = smash a2 a2), (Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 gv3)
(Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 gv3), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash gv3 a2), (Node n1 a2 a1 = smash gv3 a1), (Node n1 a2 a1 = smash gv3 gv3)
(Node n1 a2 a1 = smash gv3 c2), (Node n1 a2 a1 = smash gv3 c1), (Node n1 a2 a1 = smash c2 a2), (Node n1 a2 a1 = smash c2 a1), (Node n1 a2 a1 = smash c2 gv3), (Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 gv3)
(Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 gv3 = a2), (Node n1 a2 gv3 = a1), (Node n1 a2 gv3 = gv3), (Node n1 a2 gv3 = c2), (Node n1 a2 gv3 = c1), (Node n1 a2 gv3 = smash a2 a2), (Node n1 a2 gv3 = smash a2 a1), (Node n1 a2 gv3 = smash a2 gv3)
(Node n1 a2 gv3 = smash a2 c2), (Node n1 a2 gv3 = smash a2 c1), (Node n1 a2 gv3 = smash a1 a2), (Node n1 a2 gv3 = smash a1 a1), (Node n1 a2 gv3 = smash a1 gv3), (Node n1 a2 gv3 = smash a1 c2), (Node n1 a2 gv3 = smash a1 c1), (Node n1 a2 gv3 = smash gv3 a2), (Node n1 a2 gv3 = smash gv3 a1), (Node n1 a2 gv3 = smash gv3 gv3)
(Node n1 a2 gv3 = smash gv3 c2), (Node n1 a2 gv3 = smash gv3 c1), (Node n1 a2 gv3 = smash c2 a2), (Node n1 a2 gv3 = smash c2 a1), (Node n1 a2 gv3 = smash c2 gv3), (Node n1 a2 gv3 = smash c2 c2), (Node n1 a2 gv3 = smash c2 c1), (Node n1 a2 gv3 = smash c1 a2), (Node n1 a2 gv3 = smash c1 a1), (Node n1 a2 gv3 = smash c1 gv3)
(Node n1 a2 gv3 = smash c1 c2), (Node n1 a2 gv3 = smash c1 c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = gv3), (Node n1 a2 c2 = c2), (Node n1 a2 c2 = c1), (Node n1 a2 c2 = smash a2 a2), (Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 gv3)
(Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 gv3), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash gv3 a2), (Node n1 a2 c2 = smash gv3 a1), (Node n1 a2 c2 = smash gv3 gv3)
(Node n1 a2 c2 = smash gv3 c2), (Node n1 a2 c2 = smash gv3 c1), (Node n1 a2 c2 = smash c2 a2), (Node n1 a2 c2 = smash c2 a1), (Node n1 a2 c2 = smash c2 gv3), (Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 gv3)
(Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = gv3), (Node n1 a2 c1 = c2), (Node n1 a2 c1 = c1), (Node n1 a2 c1 = smash a2 a2), (Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 gv3)
(Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 gv3), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash gv3 a2), (Node n1 a2 c1 = smash gv3 a1), (Node n1 a2 c1 = smash gv3 gv3)
(Node n1 a2 c1 = smash gv3 c2), (Node n1 a2 c1 = smash gv3 c1), (Node n1 a2 c1 = smash c2 a2), (Node n1 a2 c1 = smash c2 a1), (Node n1 a2 c1 = smash c2 gv3), (Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 gv3)
(Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = gv3), (Node n1 a1 a2 = c2), (Node n1 a1 a2 = c1), (Node n1 a1 a2 = smash a2 a2), (Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 gv3)
(Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 gv3), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash gv3 a2), (Node n1 a1 a2 = smash gv3 a1), (Node n1 a1 a2 = smash gv3 gv3)
(Node n1 a1 a2 = smash gv3 c2), (Node n1 a1 a2 = smash gv3 c1), (Node n1 a1 a2 = smash c2 a2), (Node n1 a1 a2 = smash c2 a1), (Node n1 a1 a2 = smash c2 gv3), (Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 gv3)
(Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = gv3), (Node n1 a1 a1 = c2), (Node n1 a1 a1 = c1), (Node n1 a1 a1 = smash a2 a2), (Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 gv3)
(Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 gv3), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash gv3 a2), (Node n1 a1 a1 = smash gv3 a1), (Node n1 a1 a1 = smash gv3 gv3)
(Node n1 a1 a1 = smash gv3 c2), (Node n1 a1 a1 = smash gv3 c1), (Node n1 a1 a1 = smash c2 a2), (Node n1 a1 a1 = smash c2 a1), (Node n1 a1 a1 = smash c2 gv3), (Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 gv3)
(Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 gv3 = a2), (Node n1 a1 gv3 = a1), (Node n1 a1 gv3 = gv3), (Node n1 a1 gv3 = c2), (Node n1 a1 gv3 = c1), (Node n1 a1 gv3 = smash a2 a2), (Node n1 a1 gv3 = smash a2 a1), (Node n1 a1 gv3 = smash a2 gv3)
(Node n1 a1 gv3 = smash a2 c2), (Node n1 a1 gv3 = smash a2 c1), (Node n1 a1 gv3 = smash a1 a2), (Node n1 a1 gv3 = smash a1 a1), (Node n1 a1 gv3 = smash a1 gv3), (Node n1 a1 gv3 = smash a1 c2), (Node n1 a1 gv3 = smash a1 c1), (Node n1 a1 gv3 = smash gv3 a2), (Node n1 a1 gv3 = smash gv3 a1), (Node n1 a1 gv3 = smash gv3 gv3)
(Node n1 a1 gv3 = smash gv3 c2), (Node n1 a1 gv3 = smash gv3 c1), (Node n1 a1 gv3 = smash c2 a2), (Node n1 a1 gv3 = smash c2 a1), (Node n1 a1 gv3 = smash c2 gv3), (Node n1 a1 gv3 = smash c2 c2), (Node n1 a1 gv3 = smash c2 c1), (Node n1 a1 gv3 = smash c1 a2), (Node n1 a1 gv3 = smash c1 a1), (Node n1 a1 gv3 = smash c1 gv3)
(Node n1 a1 gv3 = smash c1 c2), (Node n1 a1 gv3 = smash c1 c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = gv3), (Node n1 a1 c2 = c2), (Node n1 a1 c2 = c1), (Node n1 a1 c2 = smash a2 a2), (Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 gv3)
(Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 gv3), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash gv3 a2), (Node n1 a1 c2 = smash gv3 a1), (Node n1 a1 c2 = smash gv3 gv3)
(Node n1 a1 c2 = smash gv3 c2), (Node n1 a1 c2 = smash gv3 c1), (Node n1 a1 c2 = smash c2 a2), (Node n1 a1 c2 = smash c2 a1), (Node n1 a1 c2 = smash c2 gv3), (Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 gv3)
(Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = gv3), (Node n1 a1 c1 = c2), (Node n1 a1 c1 = c1), (Node n1 a1 c1 = smash a2 a2), (Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 gv3)
(Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 gv3), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash gv3 a2), (Node n1 a1 c1 = smash gv3 a1), (Node n1 a1 c1 = smash gv3 gv3)
(Node n1 a1 c1 = smash gv3 c2), (Node n1 a1 c1 = smash gv3 c1), (Node n1 a1 c1 = smash c2 a2), (Node n1 a1 c1 = smash c2 a1), (Node n1 a1 c1 = smash c2 gv3), (Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 gv3)
(Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 gv3 a2 = a2), (Node n1 gv3 a2 = a1), (Node n1 gv3 a2 = gv3), (Node n1 gv3 a2 = c2), (Node n1 gv3 a2 = c1), (Node n1 gv3 a2 = smash a2 a2), (Node n1 gv3 a2 = smash a2 a1), (Node n1 gv3 a2 = smash a2 gv3)
(Node n1 gv3 a2 = smash a2 c2), (Node n1 gv3 a2 = smash a2 c1), (Node n1 gv3 a2 = smash a1 a2), (Node n1 gv3 a2 = smash a1 a1), (Node n1 gv3 a2 = smash a1 gv3), (Node n1 gv3 a2 = smash a1 c2), (Node n1 gv3 a2 = smash a1 c1), (Node n1 gv3 a2 = smash gv3 a2), (Node n1 gv3 a2 = smash gv3 a1), (Node n1 gv3 a2 = smash gv3 gv3)
(Node n1 gv3 a2 = smash gv3 c2), (Node n1 gv3 a2 = smash gv3 c1), (Node n1 gv3 a2 = smash c2 a2), (Node n1 gv3 a2 = smash c2 a1), (Node n1 gv3 a2 = smash c2 gv3), (Node n1 gv3 a2 = smash c2 c2), (Node n1 gv3 a2 = smash c2 c1), (Node n1 gv3 a2 = smash c1 a2), (Node n1 gv3 a2 = smash c1 a1), (Node n1 gv3 a2 = smash c1 gv3)
(Node n1 gv3 a2 = smash c1 c2), (Node n1 gv3 a2 = smash c1 c1), (Node n1 gv3 a1 = a2), (Node n1 gv3 a1 = a1), (Node n1 gv3 a1 = gv3), (Node n1 gv3 a1 = c2), (Node n1 gv3 a1 = c1), (Node n1 gv3 a1 = smash a2 a2), (Node n1 gv3 a1 = smash a2 a1), (Node n1 gv3 a1 = smash a2 gv3)
(Node n1 gv3 a1 = smash a2 c2), (Node n1 gv3 a1 = smash a2 c1), (Node n1 gv3 a1 = smash a1 a2), (Node n1 gv3 a1 = smash a1 a1), (Node n1 gv3 a1 = smash a1 gv3), (Node n1 gv3 a1 = smash a1 c2), (Node n1 gv3 a1 = smash a1 c1), (Node n1 gv3 a1 = smash gv3 a2), (Node n1 gv3 a1 = smash gv3 a1), (Node n1 gv3 a1 = smash gv3 gv3)
(Node n1 gv3 a1 = smash gv3 c2), (Node n1 gv3 a1 = smash gv3 c1), (Node n1 gv3 a1 = smash c2 a2), (Node n1 gv3 a1 = smash c2 a1), (Node n1 gv3 a1 = smash c2 gv3), (Node n1 gv3 a1 = smash c2 c2), (Node n1 gv3 a1 = smash c2 c1), (Node n1 gv3 a1 = smash c1 a2), (Node n1 gv3 a1 = smash c1 a1), (Node n1 gv3 a1 = smash c1 gv3)
(Node n1 gv3 a1 = smash c1 c2), (Node n1 gv3 a1 = smash c1 c1), (Node n1 gv3 gv3 = a2), (Node n1 gv3 gv3 = a1), (Node n1 gv3 gv3 = gv3), (Node n1 gv3 gv3 = c2), (Node n1 gv3 gv3 = c1), (Node n1 gv3 gv3 = smash a2 a2), (Node n1 gv3 gv3 = smash a2 a1), (Node n1 gv3 gv3 = smash a2 gv3)
(Node n1 gv3 gv3 = smash a2 c2), (Node n1 gv3 gv3 = smash a2 c1), (Node n1 gv3 gv3 = smash a1 a2), (Node n1 gv3 gv3 = smash a1 a1), (Node n1 gv3 gv3 = smash a1 gv3), (Node n1 gv3 gv3 = smash a1 c2), (Node n1 gv3 gv3 = smash a1 c1), (Node n1 gv3 gv3 = smash gv3 a2), (Node n1 gv3 gv3 = smash gv3 a1), (Node n1 gv3 gv3 = smash gv3 gv3)
(Node n1 gv3 gv3 = smash gv3 c2), (Node n1 gv3 gv3 = smash gv3 c1), (Node n1 gv3 gv3 = smash c2 a2), (Node n1 gv3 gv3 = smash c2 a1), (Node n1 gv3 gv3 = smash c2 gv3), (Node n1 gv3 gv3 = smash c2 c2), (Node n1 gv3 gv3 = smash c2 c1), (Node n1 gv3 gv3 = smash c1 a2), (Node n1 gv3 gv3 = smash c1 a1), (Node n1 gv3 gv3 = smash c1 gv3)
(Node n1 gv3 gv3 = smash c1 c2), (Node n1 gv3 gv3 = smash c1 c1), (Node n1 gv3 c2 = a2), (Node n1 gv3 c2 = a1), (Node n1 gv3 c2 = gv3), (Node n1 gv3 c2 = c2), (Node n1 gv3 c2 = c1), (Node n1 gv3 c2 = smash a2 a2), (Node n1 gv3 c2 = smash a2 a1), (Node n1 gv3 c2 = smash a2 gv3)
(Node n1 gv3 c2 = smash a2 c2), (Node n1 gv3 c2 = smash a2 c1), (Node n1 gv3 c2 = smash a1 a2), (Node n1 gv3 c2 = smash a1 a1), (Node n1 gv3 c2 = smash a1 gv3), (Node n1 gv3 c2 = smash a1 c2), (Node n1 gv3 c2 = smash a1 c1), (Node n1 gv3 c2 = smash gv3 a2), (Node n1 gv3 c2 = smash gv3 a1), (Node n1 gv3 c2 = smash gv3 gv3)
(Node n1 gv3 c2 = smash gv3 c2), (Node n1 gv3 c2 = smash gv3 c1), (Node n1 gv3 c2 = smash c2 a2), (Node n1 gv3 c2 = smash c2 a1), (Node n1 gv3 c2 = smash c2 gv3), (Node n1 gv3 c2 = smash c2 c2), (Node n1 gv3 c2 = smash c2 c1), (Node n1 gv3 c2 = smash c1 a2), (Node n1 gv3 c2 = smash c1 a1), (Node n1 gv3 c2 = smash c1 gv3)
(Node n1 gv3 c2 = smash c1 c2), (Node n1 gv3 c2 = smash c1 c1), (Node n1 gv3 c1 = a2), (Node n1 gv3 c1 = a1), (Node n1 gv3 c1 = gv3), (Node n1 gv3 c1 = c2), (Node n1 gv3 c1 = c1), (Node n1 gv3 c1 = smash a2 a2), (Node n1 gv3 c1 = smash a2 a1), (Node n1 gv3 c1 = smash a2 gv3)
(Node n1 gv3 c1 = smash a2 c2), (Node n1 gv3 c1 = smash a2 c1), (Node n1 gv3 c1 = smash a1 a2), (Node n1 gv3 c1 = smash a1 a1), (Node n1 gv3 c1 = smash a1 gv3), (Node n1 gv3 c1 = smash a1 c2), (Node n1 gv3 c1 = smash a1 c1), (Node n1 gv3 c1 = smash gv3 a2), (Node n1 gv3 c1 = smash gv3 a1), (Node n1 gv3 c1 = smash gv3 gv3)
(Node n1 gv3 c1 = smash gv3 c2), (Node n1 gv3 c1 = smash gv3 c1), (Node n1 gv3 c1 = smash c2 a2), (Node n1 gv3 c1 = smash c2 a1), (Node n1 gv3 c1 = smash c2 gv3), (Node n1 gv3 c1 = smash c2 c2), (Node n1 gv3 c1 = smash c2 c1), (Node n1 gv3 c1 = smash c1 a2), (Node n1 gv3 c1 = smash c1 a1), (Node n1 gv3 c1 = smash c1 gv3)
(Node n1 gv3 c1 = smash c1 c2), (Node n1 gv3 c1 = smash c1 c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = gv3), (Node n1 c2 a2 = c2), (Node n1 c2 a2 = c1), (Node n1 c2 a2 = smash a2 a2), (Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 gv3)
(Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 gv3), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash gv3 a2), (Node n1 c2 a2 = smash gv3 a1), (Node n1 c2 a2 = smash gv3 gv3)
(Node n1 c2 a2 = smash gv3 c2), (Node n1 c2 a2 = smash gv3 c1), (Node n1 c2 a2 = smash c2 a2), (Node n1 c2 a2 = smash c2 a1), (Node n1 c2 a2 = smash c2 gv3), (Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 gv3)
(Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = gv3), (Node n1 c2 a1 = c2), (Node n1 c2 a1 = c1), (Node n1 c2 a1 = smash a2 a2), (Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 gv3)
(Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 gv3), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash gv3 a2), (Node n1 c2 a1 = smash gv3 a1), (Node n1 c2 a1 = smash gv3 gv3)
(Node n1 c2 a1 = smash gv3 c2), (Node n1 c2 a1 = smash gv3 c1), (Node n1 c2 a1 = smash c2 a2), (Node n1 c2 a1 = smash c2 a1), (Node n1 c2 a1 = smash c2 gv3), (Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 gv3)
(Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 gv3 = a2), (Node n1 c2 gv3 = a1), (Node n1 c2 gv3 = gv3), (Node n1 c2 gv3 = c2), (Node n1 c2 gv3 = c1), (Node n1 c2 gv3 = smash a2 a2), (Node n1 c2 gv3 = smash a2 a1), (Node n1 c2 gv3 = smash a2 gv3)
(Node n1 c2 gv3 = smash a2 c2), (Node n1 c2 gv3 = smash a2 c1), (Node n1 c2 gv3 = smash a1 a2), (Node n1 c2 gv3 = smash a1 a1), (Node n1 c2 gv3 = smash a1 gv3), (Node n1 c2 gv3 = smash a1 c2), (Node n1 c2 gv3 = smash a1 c1), (Node n1 c2 gv3 = smash gv3 a2), (Node n1 c2 gv3 = smash gv3 a1), (Node n1 c2 gv3 = smash gv3 gv3)
(Node n1 c2 gv3 = smash gv3 c2), (Node n1 c2 gv3 = smash gv3 c1), (Node n1 c2 gv3 = smash c2 a2), (Node n1 c2 gv3 = smash c2 a1), (Node n1 c2 gv3 = smash c2 gv3), (Node n1 c2 gv3 = smash c2 c2), (Node n1 c2 gv3 = smash c2 c1), (Node n1 c2 gv3 = smash c1 a2), (Node n1 c2 gv3 = smash c1 a1), (Node n1 c2 gv3 = smash c1 gv3)
(Node n1 c2 gv3 = smash c1 c2), (Node n1 c2 gv3 = smash c1 c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = gv3), (Node n1 c2 c2 = c2), (Node n1 c2 c2 = c1), (Node n1 c2 c2 = smash a2 a2), (Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 gv3)
(Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 gv3), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash gv3 a2), (Node n1 c2 c2 = smash gv3 a1), (Node n1 c2 c2 = smash gv3 gv3)
(Node n1 c2 c2 = smash gv3 c2), (Node n1 c2 c2 = smash gv3 c1), (Node n1 c2 c2 = smash c2 a2), (Node n1 c2 c2 = smash c2 a1), (Node n1 c2 c2 = smash c2 gv3), (Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 gv3)
(Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = gv3), (Node n1 c2 c1 = c2), (Node n1 c2 c1 = c1), (Node n1 c2 c1 = smash a2 a2), (Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 gv3)
(Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 gv3), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash gv3 a2), (Node n1 c2 c1 = smash gv3 a1), (Node n1 c2 c1 = smash gv3 gv3)
(Node n1 c2 c1 = smash gv3 c2), (Node n1 c2 c1 = smash gv3 c1), (Node n1 c2 c1 = smash c2 a2), (Node n1 c2 c1 = smash c2 a1), (Node n1 c2 c1 = smash c2 gv3), (Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 gv3)
(Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = gv3), (Node n1 c1 a2 = c2), (Node n1 c1 a2 = c1), (Node n1 c1 a2 = smash a2 a2), (Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 gv3)
(Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 gv3), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash gv3 a2), (Node n1 c1 a2 = smash gv3 a1), (Node n1 c1 a2 = smash gv3 gv3)
(Node n1 c1 a2 = smash gv3 c2), (Node n1 c1 a2 = smash gv3 c1), (Node n1 c1 a2 = smash c2 a2), (Node n1 c1 a2 = smash c2 a1), (Node n1 c1 a2 = smash c2 gv3), (Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 gv3)
(Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = gv3), (Node n1 c1 a1 = c2), (Node n1 c1 a1 = c1), (Node n1 c1 a1 = smash a2 a2), (Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 gv3)
(Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 gv3), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash gv3 a2), (Node n1 c1 a1 = smash gv3 a1), (Node n1 c1 a1 = smash gv3 gv3)
(Node n1 c1 a1 = smash gv3 c2), (Node n1 c1 a1 = smash gv3 c1), (Node n1 c1 a1 = smash c2 a2), (Node n1 c1 a1 = smash c2 a1), (Node n1 c1 a1 = smash c2 gv3), (Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 gv3)
(Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 gv3 = a2), (Node n1 c1 gv3 = a1), (Node n1 c1 gv3 = gv3), (Node n1 c1 gv3 = c2), (Node n1 c1 gv3 = c1), (Node n1 c1 gv3 = smash a2 a2), (Node n1 c1 gv3 = smash a2 a1), (Node n1 c1 gv3 = smash a2 gv3)
(Node n1 c1 gv3 = smash a2 c2), (Node n1 c1 gv3 = smash a2 c1), (Node n1 c1 gv3 = smash a1 a2), (Node n1 c1 gv3 = smash a1 a1), (Node n1 c1 gv3 = smash a1 gv3), (Node n1 c1 gv3 = smash a1 c2), (Node n1 c1 gv3 = smash a1 c1), (Node n1 c1 gv3 = smash gv3 a2), (Node n1 c1 gv3 = smash gv3 a1), (Node n1 c1 gv3 = smash gv3 gv3)
(Node n1 c1 gv3 = smash gv3 c2), (Node n1 c1 gv3 = smash gv3 c1), (Node n1 c1 gv3 = smash c2 a2), (Node n1 c1 gv3 = smash c2 a1), (Node n1 c1 gv3 = smash c2 gv3), (Node n1 c1 gv3 = smash c2 c2), (Node n1 c1 gv3 = smash c2 c1), (Node n1 c1 gv3 = smash c1 a2), (Node n1 c1 gv3 = smash c1 a1), (Node n1 c1 gv3 = smash c1 gv3)
(Node n1 c1 gv3 = smash c1 c2), (Node n1 c1 gv3 = smash c1 c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = gv3), (Node n1 c1 c2 = c2), (Node n1 c1 c2 = c1), (Node n1 c1 c2 = smash a2 a2), (Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 gv3)
(Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 gv3), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash gv3 a2), (Node n1 c1 c2 = smash gv3 a1), (Node n1 c1 c2 = smash gv3 gv3)
(Node n1 c1 c2 = smash gv3 c2), (Node n1 c1 c2 = smash gv3 c1), (Node n1 c1 c2 = smash c2 a2), (Node n1 c1 c2 = smash c2 a1), (Node n1 c1 c2 = smash c2 gv3), (Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 gv3)
(Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = gv3), (Node n1 c1 c1 = c2), (Node n1 c1 c1 = c1), (Node n1 c1 c1 = smash a2 a2), (Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 gv3)
(Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 gv3), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash gv3 a2), (Node n1 c1 c1 = smash gv3 a1), (Node n1 c1 c1 = smash gv3 gv3)
(Node n1 c1 c1 = smash gv3 c2), (Node n1 c1 c1 = smash gv3 c1), (Node n1 c1 c1 = smash c2 a2), (Node n1 c1 c1 = smash c2 a1), (Node n1 c1 c1 = smash c2 gv3), (Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 gv3)
(Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv3), (Node n a2 a2 = c2), (Node n a2 a2 = c1), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv3)
(Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv3), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash gv3 a2), (Node n a2 a2 = smash gv3 a1), (Node n a2 a2 = smash gv3 gv3)
(Node n a2 a2 = smash gv3 c2), (Node n a2 a2 = smash gv3 c1), (Node n a2 a2 = smash c2 a2), (Node n a2 a2 = smash c2 a1), (Node n a2 a2 = smash c2 gv3), (Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 gv3)
(Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv3), (Node n a2 a1 = c2), (Node n a2 a1 = c1), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv3)
(Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv3), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash gv3 a2), (Node n a2 a1 = smash gv3 a1), (Node n a2 a1 = smash gv3 gv3)
(Node n a2 a1 = smash gv3 c2), (Node n a2 a1 = smash gv3 c1), (Node n a2 a1 = smash c2 a2), (Node n a2 a1 = smash c2 a1), (Node n a2 a1 = smash c2 gv3), (Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 gv3)
(Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 gv3 = a2), (Node n a2 gv3 = a1), (Node n a2 gv3 = gv3), (Node n a2 gv3 = c2), (Node n a2 gv3 = c1), (Node n a2 gv3 = smash a2 a2), (Node n a2 gv3 = smash a2 a1), (Node n a2 gv3 = smash a2 gv3)
(Node n a2 gv3 = smash a2 c2), (Node n a2 gv3 = smash a2 c1), (Node n a2 gv3 = smash a1 a2), (Node n a2 gv3 = smash a1 a1), (Node n a2 gv3 = smash a1 gv3), (Node n a2 gv3 = smash a1 c2), (Node n a2 gv3 = smash a1 c1), (Node n a2 gv3 = smash gv3 a2), (Node n a2 gv3 = smash gv3 a1), (Node n a2 gv3 = smash gv3 gv3)
(Node n a2 gv3 = smash gv3 c2), (Node n a2 gv3 = smash gv3 c1), (Node n a2 gv3 = smash c2 a2), (Node n a2 gv3 = smash c2 a1), (Node n a2 gv3 = smash c2 gv3), (Node n a2 gv3 = smash c2 c2), (Node n a2 gv3 = smash c2 c1), (Node n a2 gv3 = smash c1 a2), (Node n a2 gv3 = smash c1 a1), (Node n a2 gv3 = smash c1 gv3)
(Node n a2 gv3 = smash c1 c2), (Node n a2 gv3 = smash c1 c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = gv3), (Node n a2 c2 = c2), (Node n a2 c2 = c1), (Node n a2 c2 = smash a2 a2), (Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 gv3)
(Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 gv3), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash gv3 a2), (Node n a2 c2 = smash gv3 a1), (Node n a2 c2 = smash gv3 gv3)
(Node n a2 c2 = smash gv3 c2), (Node n a2 c2 = smash gv3 c1), (Node n a2 c2 = smash c2 a2), (Node n a2 c2 = smash c2 a1), (Node n a2 c2 = smash c2 gv3), (Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 gv3)
(Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = gv3), (Node n a2 c1 = c2), (Node n a2 c1 = c1), (Node n a2 c1 = smash a2 a2), (Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 gv3)
(Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 gv3), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash gv3 a2), (Node n a2 c1 = smash gv3 a1), (Node n a2 c1 = smash gv3 gv3)
(Node n a2 c1 = smash gv3 c2), (Node n a2 c1 = smash gv3 c1), (Node n a2 c1 = smash c2 a2), (Node n a2 c1 = smash c2 a1), (Node n a2 c1 = smash c2 gv3), (Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 gv3)
(Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv3), (Node n a1 a2 = c2), (Node n a1 a2 = c1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv3)
(Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv3), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash gv3 a2), (Node n a1 a2 = smash gv3 a1), (Node n a1 a2 = smash gv3 gv3)
(Node n a1 a2 = smash gv3 c2), (Node n a1 a2 = smash gv3 c1), (Node n a1 a2 = smash c2 a2), (Node n a1 a2 = smash c2 a1), (Node n a1 a2 = smash c2 gv3), (Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 gv3)
(Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv3), (Node n a1 a1 = c2), (Node n a1 a1 = c1), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv3)
(Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv3), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash gv3 a2), (Node n a1 a1 = smash gv3 a1), (Node n a1 a1 = smash gv3 gv3)
(Node n a1 a1 = smash gv3 c2), (Node n a1 a1 = smash gv3 c1), (Node n a1 a1 = smash c2 a2), (Node n a1 a1 = smash c2 a1), (Node n a1 a1 = smash c2 gv3), (Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 gv3)
(Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 gv3 = a2), (Node n a1 gv3 = a1), (Node n a1 gv3 = gv3), (Node n a1 gv3 = c2), (Node n a1 gv3 = c1), (Node n a1 gv3 = smash a2 a2), (Node n a1 gv3 = smash a2 a1), (Node n a1 gv3 = smash a2 gv3)
(Node n a1 gv3 = smash a2 c2), (Node n a1 gv3 = smash a2 c1), (Node n a1 gv3 = smash a1 a2), (Node n a1 gv3 = smash a1 a1), (Node n a1 gv3 = smash a1 gv3), (Node n a1 gv3 = smash a1 c2), (Node n a1 gv3 = smash a1 c1), (Node n a1 gv3 = smash gv3 a2), (Node n a1 gv3 = smash gv3 a1), (Node n a1 gv3 = smash gv3 gv3)
(Node n a1 gv3 = smash gv3 c2), (Node n a1 gv3 = smash gv3 c1), (Node n a1 gv3 = smash c2 a2), (Node n a1 gv3 = smash c2 a1), (Node n a1 gv3 = smash c2 gv3), (Node n a1 gv3 = smash c2 c2), (Node n a1 gv3 = smash c2 c1), (Node n a1 gv3 = smash c1 a2), (Node n a1 gv3 = smash c1 a1), (Node n a1 gv3 = smash c1 gv3)
(Node n a1 gv3 = smash c1 c2), (Node n a1 gv3 = smash c1 c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = gv3), (Node n a1 c2 = c2), (Node n a1 c2 = c1), (Node n a1 c2 = smash a2 a2), (Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 gv3)
(Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 gv3), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash gv3 a2), (Node n a1 c2 = smash gv3 a1), (Node n a1 c2 = smash gv3 gv3)
(Node n a1 c2 = smash gv3 c2), (Node n a1 c2 = smash gv3 c1), (Node n a1 c2 = smash c2 a2), (Node n a1 c2 = smash c2 a1), (Node n a1 c2 = smash c2 gv3), (Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 gv3)
(Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = gv3), (Node n a1 c1 = c2), (Node n a1 c1 = c1), (Node n a1 c1 = smash a2 a2), (Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 gv3)
(Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 gv3), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash gv3 a2), (Node n a1 c1 = smash gv3 a1), (Node n a1 c1 = smash gv3 gv3)
(Node n a1 c1 = smash gv3 c2), (Node n a1 c1 = smash gv3 c1), (Node n a1 c1 = smash c2 a2), (Node n a1 c1 = smash c2 a1), (Node n a1 c1 = smash c2 gv3), (Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 gv3)
(Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n gv3 a2 = a2), (Node n gv3 a2 = a1), (Node n gv3 a2 = gv3), (Node n gv3 a2 = c2), (Node n gv3 a2 = c1), (Node n gv3 a2 = smash a2 a2), (Node n gv3 a2 = smash a2 a1), (Node n gv3 a2 = smash a2 gv3)
(Node n gv3 a2 = smash a2 c2), (Node n gv3 a2 = smash a2 c1), (Node n gv3 a2 = smash a1 a2), (Node n gv3 a2 = smash a1 a1), (Node n gv3 a2 = smash a1 gv3), (Node n gv3 a2 = smash a1 c2), (Node n gv3 a2 = smash a1 c1), (Node n gv3 a2 = smash gv3 a2), (Node n gv3 a2 = smash gv3 a1), (Node n gv3 a2 = smash gv3 gv3)
(Node n gv3 a2 = smash gv3 c2), (Node n gv3 a2 = smash gv3 c1), (Node n gv3 a2 = smash c2 a2), (Node n gv3 a2 = smash c2 a1), (Node n gv3 a2 = smash c2 gv3), (Node n gv3 a2 = smash c2 c2), (Node n gv3 a2 = smash c2 c1), (Node n gv3 a2 = smash c1 a2), (Node n gv3 a2 = smash c1 a1), (Node n gv3 a2 = smash c1 gv3)
(Node n gv3 a2 = smash c1 c2), (Node n gv3 a2 = smash c1 c1), (Node n gv3 a1 = a2), (Node n gv3 a1 = a1), (Node n gv3 a1 = gv3), (Node n gv3 a1 = c2), (Node n gv3 a1 = c1), (Node n gv3 a1 = smash a2 a2), (Node n gv3 a1 = smash a2 a1), (Node n gv3 a1 = smash a2 gv3)
(Node n gv3 a1 = smash a2 c2), (Node n gv3 a1 = smash a2 c1), (Node n gv3 a1 = smash a1 a2), (Node n gv3 a1 = smash a1 a1), (Node n gv3 a1 = smash a1 gv3), (Node n gv3 a1 = smash a1 c2), (Node n gv3 a1 = smash a1 c1), (Node n gv3 a1 = smash gv3 a2), (Node n gv3 a1 = smash gv3 a1), (Node n gv3 a1 = smash gv3 gv3)
(Node n gv3 a1 = smash gv3 c2), (Node n gv3 a1 = smash gv3 c1), (Node n gv3 a1 = smash c2 a2), (Node n gv3 a1 = smash c2 a1), (Node n gv3 a1 = smash c2 gv3), (Node n gv3 a1 = smash c2 c2), (Node n gv3 a1 = smash c2 c1), (Node n gv3 a1 = smash c1 a2), (Node n gv3 a1 = smash c1 a1), (Node n gv3 a1 = smash c1 gv3)
(Node n gv3 a1 = smash c1 c2), (Node n gv3 a1 = smash c1 c1), (Node n gv3 gv3 = a2), (Node n gv3 gv3 = a1), (Node n gv3 gv3 = gv3), (Node n gv3 gv3 = c2), (Node n gv3 gv3 = c1), (Node n gv3 gv3 = smash a2 a2), (Node n gv3 gv3 = smash a2 a1), (Node n gv3 gv3 = smash a2 gv3)
(Node n gv3 gv3 = smash a2 c2), (Node n gv3 gv3 = smash a2 c1), (Node n gv3 gv3 = smash a1 a2), (Node n gv3 gv3 = smash a1 a1), (Node n gv3 gv3 = smash a1 gv3), (Node n gv3 gv3 = smash a1 c2), (Node n gv3 gv3 = smash a1 c1), (Node n gv3 gv3 = smash gv3 a2), (Node n gv3 gv3 = smash gv3 a1), (Node n gv3 gv3 = smash gv3 gv3)
(Node n gv3 gv3 = smash gv3 c2), (Node n gv3 gv3 = smash gv3 c1), (Node n gv3 gv3 = smash c2 a2), (Node n gv3 gv3 = smash c2 a1), (Node n gv3 gv3 = smash c2 gv3), (Node n gv3 gv3 = smash c2 c2), (Node n gv3 gv3 = smash c2 c1), (Node n gv3 gv3 = smash c1 a2), (Node n gv3 gv3 = smash c1 a1), (Node n gv3 gv3 = smash c1 gv3)
(Node n gv3 gv3 = smash c1 c2), (Node n gv3 gv3 = smash c1 c1), (Node n gv3 c2 = a2), (Node n gv3 c2 = a1), (Node n gv3 c2 = gv3), (Node n gv3 c2 = c2), (Node n gv3 c2 = c1), (Node n gv3 c2 = smash a2 a2), (Node n gv3 c2 = smash a2 a1), (Node n gv3 c2 = smash a2 gv3)
(Node n gv3 c2 = smash a2 c2), (Node n gv3 c2 = smash a2 c1), (Node n gv3 c2 = smash a1 a2), (Node n gv3 c2 = smash a1 a1), (Node n gv3 c2 = smash a1 gv3), (Node n gv3 c2 = smash a1 c2), (Node n gv3 c2 = smash a1 c1), (Node n gv3 c2 = smash gv3 a2), (Node n gv3 c2 = smash gv3 a1), (Node n gv3 c2 = smash gv3 gv3)
(Node n gv3 c2 = smash gv3 c2), (Node n gv3 c2 = smash gv3 c1), (Node n gv3 c2 = smash c2 a2), (Node n gv3 c2 = smash c2 a1), (Node n gv3 c2 = smash c2 gv3), (Node n gv3 c2 = smash c2 c2), (Node n gv3 c2 = smash c2 c1), (Node n gv3 c2 = smash c1 a2), (Node n gv3 c2 = smash c1 a1), (Node n gv3 c2 = smash c1 gv3)
(Node n gv3 c2 = smash c1 c2), (Node n gv3 c2 = smash c1 c1), (Node n gv3 c1 = a2), (Node n gv3 c1 = a1), (Node n gv3 c1 = gv3), (Node n gv3 c1 = c2), (Node n gv3 c1 = c1), (Node n gv3 c1 = smash a2 a2), (Node n gv3 c1 = smash a2 a1), (Node n gv3 c1 = smash a2 gv3)
(Node n gv3 c1 = smash a2 c2), (Node n gv3 c1 = smash a2 c1), (Node n gv3 c1 = smash a1 a2), (Node n gv3 c1 = smash a1 a1), (Node n gv3 c1 = smash a1 gv3), (Node n gv3 c1 = smash a1 c2), (Node n gv3 c1 = smash a1 c1), (Node n gv3 c1 = smash gv3 a2), (Node n gv3 c1 = smash gv3 a1), (Node n gv3 c1 = smash gv3 gv3)
(Node n gv3 c1 = smash gv3 c2), (Node n gv3 c1 = smash gv3 c1), (Node n gv3 c1 = smash c2 a2), (Node n gv3 c1 = smash c2 a1), (Node n gv3 c1 = smash c2 gv3), (Node n gv3 c1 = smash c2 c2), (Node n gv3 c1 = smash c2 c1), (Node n gv3 c1 = smash c1 a2), (Node n gv3 c1 = smash c1 a1), (Node n gv3 c1 = smash c1 gv3)
(Node n gv3 c1 = smash c1 c2), (Node n gv3 c1 = smash c1 c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = gv3), (Node n c2 a2 = c2), (Node n c2 a2 = c1), (Node n c2 a2 = smash a2 a2), (Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 gv3)
(Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 gv3), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash gv3 a2), (Node n c2 a2 = smash gv3 a1), (Node n c2 a2 = smash gv3 gv3)
(Node n c2 a2 = smash gv3 c2), (Node n c2 a2 = smash gv3 c1), (Node n c2 a2 = smash c2 a2), (Node n c2 a2 = smash c2 a1), (Node n c2 a2 = smash c2 gv3), (Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 gv3)
(Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = gv3), (Node n c2 a1 = c2), (Node n c2 a1 = c1), (Node n c2 a1 = smash a2 a2), (Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 gv3)
(Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 gv3), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash gv3 a2), (Node n c2 a1 = smash gv3 a1), (Node n c2 a1 = smash gv3 gv3)
(Node n c2 a1 = smash gv3 c2), (Node n c2 a1 = smash gv3 c1), (Node n c2 a1 = smash c2 a2), (Node n c2 a1 = smash c2 a1), (Node n c2 a1 = smash c2 gv3), (Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 gv3)
(Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 gv3 = a2), (Node n c2 gv3 = a1), (Node n c2 gv3 = gv3), (Node n c2 gv3 = c2), (Node n c2 gv3 = c1), (Node n c2 gv3 = smash a2 a2), (Node n c2 gv3 = smash a2 a1), (Node n c2 gv3 = smash a2 gv3)
(Node n c2 gv3 = smash a2 c2), (Node n c2 gv3 = smash a2 c1), (Node n c2 gv3 = smash a1 a2), (Node n c2 gv3 = smash a1 a1), (Node n c2 gv3 = smash a1 gv3), (Node n c2 gv3 = smash a1 c2), (Node n c2 gv3 = smash a1 c1), (Node n c2 gv3 = smash gv3 a2), (Node n c2 gv3 = smash gv3 a1), (Node n c2 gv3 = smash gv3 gv3)
(Node n c2 gv3 = smash gv3 c2), (Node n c2 gv3 = smash gv3 c1), (Node n c2 gv3 = smash c2 a2), (Node n c2 gv3 = smash c2 a1), (Node n c2 gv3 = smash c2 gv3), (Node n c2 gv3 = smash c2 c2), (Node n c2 gv3 = smash c2 c1), (Node n c2 gv3 = smash c1 a2), (Node n c2 gv3 = smash c1 a1), (Node n c2 gv3 = smash c1 gv3)
(Node n c2 gv3 = smash c1 c2), (Node n c2 gv3 = smash c1 c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = gv3), (Node n c2 c2 = c2), (Node n c2 c2 = c1), (Node n c2 c2 = smash a2 a2), (Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 gv3)
(Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 gv3), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash gv3 a2), (Node n c2 c2 = smash gv3 a1), (Node n c2 c2 = smash gv3 gv3)
(Node n c2 c2 = smash gv3 c2), (Node n c2 c2 = smash gv3 c1), (Node n c2 c2 = smash c2 a2), (Node n c2 c2 = smash c2 a1), (Node n c2 c2 = smash c2 gv3), (Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 gv3)
(Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = gv3), (Node n c2 c1 = c2), (Node n c2 c1 = c1), (Node n c2 c1 = smash a2 a2), (Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 gv3)
(Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 gv3), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash gv3 a2), (Node n c2 c1 = smash gv3 a1), (Node n c2 c1 = smash gv3 gv3)
(Node n c2 c1 = smash gv3 c2), (Node n c2 c1 = smash gv3 c1), (Node n c2 c1 = smash c2 a2), (Node n c2 c1 = smash c2 a1), (Node n c2 c1 = smash c2 gv3), (Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 gv3)
(Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = gv3), (Node n c1 a2 = c2), (Node n c1 a2 = c1), (Node n c1 a2 = smash a2 a2), (Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 gv3)
(Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 gv3), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash gv3 a2), (Node n c1 a2 = smash gv3 a1), (Node n c1 a2 = smash gv3 gv3)
(Node n c1 a2 = smash gv3 c2), (Node n c1 a2 = smash gv3 c1), (Node n c1 a2 = smash c2 a2), (Node n c1 a2 = smash c2 a1), (Node n c1 a2 = smash c2 gv3), (Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 gv3)
(Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = gv3), (Node n c1 a1 = c2), (Node n c1 a1 = c1), (Node n c1 a1 = smash a2 a2), (Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 gv3)
(Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 gv3), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash gv3 a2), (Node n c1 a1 = smash gv3 a1), (Node n c1 a1 = smash gv3 gv3)
(Node n c1 a1 = smash gv3 c2), (Node n c1 a1 = smash gv3 c1), (Node n c1 a1 = smash c2 a2), (Node n c1 a1 = smash c2 a1), (Node n c1 a1 = smash c2 gv3), (Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 gv3)
(Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 gv3 = a2), (Node n c1 gv3 = a1), (Node n c1 gv3 = gv3), (Node n c1 gv3 = c2), (Node n c1 gv3 = c1), (Node n c1 gv3 = smash a2 a2), (Node n c1 gv3 = smash a2 a1), (Node n c1 gv3 = smash a2 gv3)
(Node n c1 gv3 = smash a2 c2), (Node n c1 gv3 = smash a2 c1), (Node n c1 gv3 = smash a1 a2), (Node n c1 gv3 = smash a1 a1), (Node n c1 gv3 = smash a1 gv3), (Node n c1 gv3 = smash a1 c2), (Node n c1 gv3 = smash a1 c1), (Node n c1 gv3 = smash gv3 a2), (Node n c1 gv3 = smash gv3 a1), (Node n c1 gv3 = smash gv3 gv3)
(Node n c1 gv3 = smash gv3 c2), (Node n c1 gv3 = smash gv3 c1), (Node n c1 gv3 = smash c2 a2), (Node n c1 gv3 = smash c2 a1), (Node n c1 gv3 = smash c2 gv3), (Node n c1 gv3 = smash c2 c2), (Node n c1 gv3 = smash c2 c1), (Node n c1 gv3 = smash c1 a2), (Node n c1 gv3 = smash c1 a1), (Node n c1 gv3 = smash c1 gv3)
(Node n c1 gv3 = smash c1 c2), (Node n c1 gv3 = smash c1 c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = gv3), (Node n c1 c2 = c2), (Node n c1 c2 = c1), (Node n c1 c2 = smash a2 a2), (Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 gv3)
(Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 gv3), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash gv3 a2), (Node n c1 c2 = smash gv3 a1), (Node n c1 c2 = smash gv3 gv3)
(Node n c1 c2 = smash gv3 c2), (Node n c1 c2 = smash gv3 c1), (Node n c1 c2 = smash c2 a2), (Node n c1 c2 = smash c2 a1), (Node n c1 c2 = smash c2 gv3), (Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 gv3)
(Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = gv3), (Node n c1 c1 = c2), (Node n c1 c1 = c1), (Node n c1 c1 = smash a2 a2), (Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 gv3)
(Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 gv3), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash gv3 a2), (Node n c1 c1 = smash gv3 a1), (Node n c1 c1 = smash gv3 gv3)
(Node n c1 c1 = smash gv3 c2), (Node n c1 c1 = smash gv3 c1), (Node n c1 c1 = smash c2 a2), (Node n c1 c1 = smash c2 a1), (Node n c1 c1 = smash c2 gv3), (Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 gv3)
(Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = gv3), (smash a2 a2 = c2), (smash a2 a2 = c1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = gv3)
(smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 gv3 = a2), (smash a2 gv3 = a1), (smash a2 gv3 = gv3), (smash a2 gv3 = c2), (smash a2 gv3 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = gv3)
(smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c1 = a2), (smash a2 c1 = a1), (smash a2 c1 = gv3), (smash a2 c1 = c2), (smash a2 c1 = c1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = gv3)
(smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv3), (smash a1 a1 = c2), (smash a1 a1 = c1), (smash a1 gv3 = a2), (smash a1 gv3 = a1), (smash a1 gv3 = gv3)
(smash a1 gv3 = c2), (smash a1 gv3 = c1), (smash a1 c2 = a2), (smash a1 c2 = a1), (smash a1 c2 = gv3), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = gv3)
(smash a1 c1 = c2), (smash a1 c1 = c1), (smash gv3 a2 = a2), (smash gv3 a2 = a1), (smash gv3 a2 = gv3), (smash gv3 a2 = c2), (smash gv3 a2 = c1), (smash gv3 a1 = a2), (smash gv3 a1 = a1), (smash gv3 a1 = gv3)
(smash gv3 a1 = c2), (smash gv3 a1 = c1), (smash gv3 gv3 = a2), (smash gv3 gv3 = a1), (smash gv3 gv3 = gv3), (smash gv3 gv3 = c2), (smash gv3 gv3 = c1), (smash gv3 c2 = a2), (smash gv3 c2 = a1), (smash gv3 c2 = gv3)
(smash gv3 c2 = c2), (smash gv3 c2 = c1), (smash gv3 c1 = a2), (smash gv3 c1 = a1), (smash gv3 c1 = gv3), (smash gv3 c1 = c2), (smash gv3 c1 = c1), (smash c2 a2 = a2), (smash c2 a2 = a1), (smash c2 a2 = gv3)
(smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a1 = a2), (smash c2 a1 = a1), (smash c2 a1 = gv3), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 gv3 = a2), (smash c2 gv3 = a1), (smash c2 gv3 = gv3)
(smash c2 gv3 = c2), (smash c2 gv3 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = gv3), (smash c2 c2 = c2), (smash c2 c2 = c1), (smash c2 c1 = a2), (smash c2 c1 = a1), (smash c2 c1 = gv3)
(smash c2 c1 = c2), (smash c2 c1 = c1), (smash c1 a2 = a2), (smash c1 a2 = a1), (smash c1 a2 = gv3), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a1 = a2), (smash c1 a1 = a1), (smash c1 a1 = gv3)
(smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 gv3 = a2), (smash c1 gv3 = a1), (smash c1 gv3 = gv3), (smash c1 gv3 = c2), (smash c1 gv3 = c1), (smash c1 c2 = a2), (smash c1 c2 = a1), (smash c1 c2 = gv3)
(smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = gv3), (smash c1 c1 = c2), (smash c1 c1 = c1), (Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 gv3)
(Leaf = Node n0 a2 c2), (Leaf = Node n0 a2 c1), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 gv3), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 gv3 a2), (Leaf = Node n0 gv3 a1), (Leaf = Node n0 gv3 gv3)
(Leaf = Node n0 gv3 c2), (Leaf = Node n0 gv3 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1), (Leaf = Node n0 c2 gv3), (Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c1 a2), (Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 gv3)
(Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n1 a2 a2), (Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 gv3), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1), (Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 gv3)
(Leaf = Node n1 a1 c2), (Leaf = Node n1 a1 c1), (Leaf = Node n1 gv3 a2), (Leaf = Node n1 gv3 a1), (Leaf = Node n1 gv3 gv3), (Leaf = Node n1 gv3 c2), (Leaf = Node n1 gv3 c1), (Leaf = Node n1 c2 a2), (Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 gv3)
(Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1), (Leaf = Node n1 c1 gv3), (Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 gv3)
(Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 gv3), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1), (Leaf = Node n gv3 a2), (Leaf = Node n gv3 a1), (Leaf = Node n gv3 gv3)
(Leaf = Node n gv3 c2), (Leaf = Node n gv3 c1), (Leaf = Node n c2 a2), (Leaf = Node n c2 a1), (Leaf = Node n c2 gv3), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 gv3)
(Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv3), (Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a1 a2), (Leaf = smash a1 a1), (Leaf = smash a1 gv3)
(Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash gv3 a2), (Leaf = smash gv3 a1), (Leaf = smash gv3 gv3), (Leaf = smash gv3 c2), (Leaf = smash gv3 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 gv3)
(Leaf = smash c2 c2), (Leaf = smash c2 c1), (Leaf = smash c1 a2), (Leaf = smash c1 a1), (Leaf = smash c1 gv3), (Leaf = smash c1 c2), (Leaf = smash c1 c1), (find_max' n0 p = n0), (find_max' n0 p = n1), (find_max' n0 p = n)
(find_max' n1 p = n0), (find_max' n1 p = n1), (find_max' n1 p = n), (find_max' n p = n0), (find_max' n p = n1), (find_max' n p = n), (length p = n0), (length p = n1), (length p = n), (length p = find_max' n0 p)
(length p = find_max' n1 p), (length p = find_max' n p), (Some n0 = find_max p), (Some n1 = find_max p), (Some n = find_max p), (None = Some n0), (None = Some n1), (None = Some n), (None = find_max p), (None = Some a2)
(None = Some a1), (None = Some gv3), (None = Some c2), (None = Some c1), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? n))
((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? n)), ((n0 >? n1) = (n0 >=? n0)), ((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n >=? n0))
((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n1)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n1)), ((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n1))
((n0 >? n) = (n >=? n)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n)), ((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n1)), ((n1 >? n0) = (n >=? n))
((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? n)), ((n1 >? n1) = (n1 >=? n0)), ((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n >=? n0)), ((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? n)), ((n1 >? n) = (n0 >=? n0))
((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n1)), ((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n >=? n0)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? n)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n1))
((n >? n0) = (n0 >=? n)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? n)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? n))
((n >? n1) = (n1 >=? n0)), ((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? n)), ((n >? n1) = (n >=? n0)), ((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n1)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n1 >=? n0))
((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n1)), ((n >? n) = (n >=? n))

Label: 3 (3)
(priq p), (priqq n p), (priqq n0 p), (priqq n1 p), (priqq gv0 p), (pow2heap n a2), (pow2heap n a1), (pow2heap n c2), (pow2heap n c1), (pow2heap n0 a2)
(pow2heap n0 a1), (pow2heap n0 c2), (pow2heap n0 c1), (pow2heap n1 a2), (pow2heap n1 a1), (pow2heap n1 c2), (pow2heap n1 c1), (pow2heap gv0 a2), (pow2heap gv0 a1), (pow2heap gv0 c2)
(pow2heap gv0 c1), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n c2), (pow2heapp n n c1), (pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n1 a2)
(pow2heapp n n1 a1), (pow2heapp n n1 c2), (pow2heapp n n1 c1), (pow2heapp n gv0 a2), (pow2heapp n gv0 a1), (pow2heapp n gv0 c2), (pow2heapp n gv0 c1), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n c2)
(pow2heapp n0 n c1), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 c2), (pow2heapp n0 n0 c1), (pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 gv0 a2)
(pow2heapp n0 gv0 a1), (pow2heapp n0 gv0 c2), (pow2heapp n0 gv0 c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n c2), (pow2heapp n1 n c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1), (pow2heapp n1 n0 c2)
(pow2heapp n1 n0 c1), (pow2heapp n1 n1 a2), (pow2heapp n1 n1 a1), (pow2heapp n1 n1 c2), (pow2heapp n1 n1 c1), (pow2heapp n1 gv0 a2), (pow2heapp n1 gv0 a1), (pow2heapp n1 gv0 c2), (pow2heapp n1 gv0 c1), (pow2heapp gv0 n a2)
(pow2heapp gv0 n a1), (pow2heapp gv0 n c2), (pow2heapp gv0 n c1), (pow2heapp gv0 n0 a2), (pow2heapp gv0 n0 a1), (pow2heapp gv0 n0 c2), (pow2heapp gv0 n0 c1), (pow2heapp gv0 n1 a2), (pow2heapp gv0 n1 a1), (pow2heapp gv0 n1 c2)
(pow2heapp gv0 n1 c1), (pow2heapp gv0 gv0 a2), (pow2heapp gv0 gv0 a1), (pow2heapp gv0 gv0 c2), (pow2heapp gv0 gv0 c1), (Permutation p p), (In a2 p), (In a1 p), (In c2 p), (In c1 p)
(n < n), (n < n0), (n < n1), (n < gv0), (n0 < n), (n0 < n0), (n0 < n1), (n0 < gv0), (n1 < n), (n1 < n0)
(n1 < n1), (n1 < gv0), (gv0 < n), (gv0 < n0), (gv0 < n1), (gv0 < gv0), (n <= n), (n <= n0), (n <= n1), (n <= gv0)
(n0 <= n), (n0 <= n0), (n0 <= n1), (n0 <= gv0), (n1 <= n), (n1 <= n0), (n1 <= n1), (n1 <= gv0), (gv0 <= n), (gv0 <= n0)
(gv0 <= n1), (gv0 <= gv0), (p = p), (a2 = a2), (a2 = a1), (a2 = c2), (a2 = c1), (a1 = a2), (a1 = a1), (a1 = c2)
(a1 = c1), (c2 = a2), (c2 = a1), (c2 = c2), (c2 = c1), (c1 = a2), (c1 = a1), (c1 = c2), (c1 = c1), (n = n)
(n = n0), (n = n1), (n = gv0), (n0 = n), (n0 = n0), (n0 = n1), (n0 = gv0), (n1 = n), (n1 = n0), (n1 = n1)
(n1 = gv0), (gv0 = n), (gv0 = n0), (gv0 = n1), (gv0 = gv0), (false = (n >? n)), (false = (n >? n0)), (false = (n >? n1)), (false = (n >? gv0)), (false = (n0 >? n))
(false = (n0 >? n0)), (false = (n0 >? n1)), (false = (n0 >? gv0)), (false = (n1 >? n)), (false = (n1 >? n0)), (false = (n1 >? n1)), (false = (n1 >? gv0)), (false = (gv0 >? n)), (false = (gv0 >? n0)), (false = (gv0 >? n1))
(false = (gv0 >? gv0)), (false = (n >=? n)), (false = (n >=? n0)), (false = (n >=? n1)), (false = (n >=? gv0)), (false = (n0 >=? n)), (false = (n0 >=? n0)), (false = (n0 >=? n1)), (false = (n0 >=? gv0)), (false = (n1 >=? n))
(false = (n1 >=? n0)), (false = (n1 >=? n1)), (false = (n1 >=? gv0)), (false = (gv0 >=? n)), (false = (gv0 >=? n0)), (false = (gv0 >=? n1)), (false = (gv0 >=? gv0)), (true = (n >? n)), (true = (n >? n0)), (true = (n >? n1))
(true = (n >? gv0)), (true = (n0 >? n)), (true = (n0 >? n0)), (true = (n0 >? n1)), (true = (n0 >? gv0)), (true = (n1 >? n)), (true = (n1 >? n0)), (true = (n1 >? n1)), (true = (n1 >? gv0)), (true = (gv0 >? n))
(true = (gv0 >? n0)), (true = (gv0 >? n1)), (true = (gv0 >? gv0)), (true = (n >=? n)), (true = (n >=? n0)), (true = (n >=? n1)), (true = (n >=? gv0)), (true = (n0 >=? n)), (true = (n0 >=? n0)), (true = (n0 >=? n1))
(true = (n0 >=? gv0)), (true = (n1 >=? n)), (true = (n1 >=? n0)), (true = (n1 >=? n1)), (true = (n1 >=? gv0)), (true = (gv0 >=? n)), (true = (gv0 >=? n0)), (true = (gv0 >=? n1)), (true = (gv0 >=? gv0)), (Abs p [])
(Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) []), (Abs (heap_delete_max c2) []), (Abs (heap_delete_max c1) []), (Abs (join p p a2) [])
(Abs (join p p a1) []), (Abs (join p p c2) []), (Abs (join p p c1) []), (Abs (insert n p) []), (Abs (insert n0 p) []), (Abs (insert n1 p) []), (Abs (insert gv0 p) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p c2) [])
(Abs (carry p c1) []), (Abs (p ++ p) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems (a2 :: p) []), (priqueue_elems (a1 :: p) []), (priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a2) [])
(priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) []), (priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) []), (priqueue_elems (insert n p) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n1 p) [])
(priqueue_elems (insert gv0 p) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) []), (priqueue_elems (carry p c2) []), (priqueue_elems (carry p c1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems c2 [])
(tree_elems c1 []), (tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n c2 a2) [])
(tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 c2) []), (tree_elems (Node n c2 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 c2) [])
(tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c1 a2) [])
(tree_elems (Node n0 c1 a1) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) []), (tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) []), (tree_elems (Node n1 a1 c2) [])
(tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node gv0 a2 a2) [])
(tree_elems (Node gv0 a2 a1) []), (tree_elems (Node gv0 a2 c2) []), (tree_elems (Node gv0 a2 c1) []), (tree_elems (Node gv0 a1 a2) []), (tree_elems (Node gv0 a1 a1) []), (tree_elems (Node gv0 a1 c2) []), (tree_elems (Node gv0 a1 c1) []), (tree_elems (Node gv0 c2 a2) []), (tree_elems (Node gv0 c2 a1) []), (tree_elems (Node gv0 c2 c2) [])
(tree_elems (Node gv0 c2 c1) []), (tree_elems (Node gv0 c1 a2) []), (tree_elems (Node gv0 c1 a1) []), (tree_elems (Node gv0 c1 c2) []), (tree_elems (Node gv0 c1 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a1 a2) [])
(tree_elems (smash a1 a1) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 c2) [])
(tree_elems (smash c1 c1) []), (tree_elems Leaf []), (priq (a2 :: p)), (priq (a1 :: p)), (priq (c2 :: p)), (priq (c1 :: p)), (priq (merge p p)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max c2))
(priq (heap_delete_max c1)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p c2)), (priq (join p p c1)), (priq (insert n p)), (priq (insert n0 p)), (priq (insert n1 p)), (priq (insert gv0 p)), (priq (carry p a2))
(priq (carry p a1)), (priq (carry p c2)), (priq (carry p c1)), (priq (p ++ p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (merge p p)), (priqq n (heap_delete_max a2))
(priqq n (heap_delete_max a1)), (priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p c2)), (priqq n (join p p c1)), (priqq n (insert n p)), (priqq n (insert n0 p)), (priqq n (insert n1 p))
(priqq n (insert gv0 p)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (p ++ p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (c2 :: p)), (priqq n0 (c1 :: p))
(priqq n0 (merge p p)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p c2)), (priqq n0 (join p p c1)), (priqq n0 (insert n p))
(priqq n0 (insert n0 p)), (priqq n0 (insert n1 p)), (priqq n0 (insert gv0 p)), (priqq n0 (carry p a2)), (priqq n0 (carry p a1)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1)), (priqq n0 (p ++ p)), (priqq n1 (a2 :: p)), (priqq n1 (a1 :: p))
(priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (merge p p)), (priqq n1 (heap_delete_max a2)), (priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1)), (priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p c2))
(priqq n1 (join p p c1)), (priqq n1 (insert n p)), (priqq n1 (insert n0 p)), (priqq n1 (insert n1 p)), (priqq n1 (insert gv0 p)), (priqq n1 (carry p a2)), (priqq n1 (carry p a1)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (p ++ p))
(priqq gv0 (a2 :: p)), (priqq gv0 (a1 :: p)), (priqq gv0 (c2 :: p)), (priqq gv0 (c1 :: p)), (priqq gv0 (merge p p)), (priqq gv0 (heap_delete_max a2)), (priqq gv0 (heap_delete_max a1)), (priqq gv0 (heap_delete_max c2)), (priqq gv0 (heap_delete_max c1)), (priqq gv0 (join p p a2))
(priqq gv0 (join p p a1)), (priqq gv0 (join p p c2)), (priqq gv0 (join p p c1)), (priqq gv0 (insert n p)), (priqq gv0 (insert n0 p)), (priqq gv0 (insert n1 p)), (priqq gv0 (insert gv0 p)), (priqq gv0 (carry p a2)), (priqq gv0 (carry p a1)), (priqq gv0 (carry p c2))
(priqq gv0 (carry p c1)), (priqq gv0 (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1))
(priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (insert n0 p)), (priqq (find_max' n p) (insert n1 p)), (priqq (find_max' n p) (insert gv0 p))
(priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p c2)), (priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p)), (priqq (find_max' n0 p) (c2 :: p)), (priqq (find_max' n0 p) (c1 :: p))
(priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max c2)), (priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (join p p a2)), (priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1)), (priqq (find_max' n0 p) (insert n p))
(priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert gv0 p)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n1 p) p), (priqq (find_max' n1 p) (a2 :: p))
(priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (c2 :: p)), (priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1))
(priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert gv0 p)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p c2)), (priqq (find_max' n1 p) (carry p c1))
(priqq (find_max' n1 p) (p ++ p)), (priqq (find_max' gv0 p) p), (priqq (find_max' gv0 p) (a2 :: p)), (priqq (find_max' gv0 p) (a1 :: p)), (priqq (find_max' gv0 p) (c2 :: p)), (priqq (find_max' gv0 p) (c1 :: p)), (priqq (find_max' gv0 p) (merge p p)), (priqq (find_max' gv0 p) (heap_delete_max a2)), (priqq (find_max' gv0 p) (heap_delete_max a1)), (priqq (find_max' gv0 p) (heap_delete_max c2))
(priqq (find_max' gv0 p) (heap_delete_max c1)), (priqq (find_max' gv0 p) (join p p a2)), (priqq (find_max' gv0 p) (join p p a1)), (priqq (find_max' gv0 p) (join p p c2)), (priqq (find_max' gv0 p) (join p p c1)), (priqq (find_max' gv0 p) (insert n p)), (priqq (find_max' gv0 p) (insert n0 p)), (priqq (find_max' gv0 p) (insert n1 p)), (priqq (find_max' gv0 p) (insert gv0 p)), (priqq (find_max' gv0 p) (carry p a2))
(priqq (find_max' gv0 p) (carry p a1)), (priqq (find_max' gv0 p) (carry p c2)), (priqq (find_max' gv0 p) (carry p c1)), (priqq (find_max' gv0 p) (p ++ p)), (priqq (length p) p), (priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p)), (priqq (length p) (merge p p))
(priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p c2)), (priqq (length p) (join p p c1)), (priqq (length p) (insert n p)), (priqq (length p) (insert n0 p))
(priqq (length p) (insert n1 p)), (priqq (length p) (insert gv0 p)), (priqq (length p) (carry p a2)), (priqq (length p) (carry p a1)), (priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (p ++ p)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 c2))
(pow2heap n (Node n a2 c1)), (pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c1 a2))
(pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1)), (pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 c2))
(pow2heap n (Node n0 a1 c1)), (pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n1 a2 a2))
(pow2heap n (Node n1 a2 a1)), (pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 c2))
(pow2heap n (Node n1 c2 c1)), (pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1)), (pow2heap n (Node gv0 a2 a2)), (pow2heap n (Node gv0 a2 a1)), (pow2heap n (Node gv0 a2 c2)), (pow2heap n (Node gv0 a2 c1)), (pow2heap n (Node gv0 a1 a2))
(pow2heap n (Node gv0 a1 a1)), (pow2heap n (Node gv0 a1 c2)), (pow2heap n (Node gv0 a1 c1)), (pow2heap n (Node gv0 c2 a2)), (pow2heap n (Node gv0 c2 a1)), (pow2heap n (Node gv0 c2 c2)), (pow2heap n (Node gv0 c2 c1)), (pow2heap n (Node gv0 c1 a2)), (pow2heap n (Node gv0 c1 a1)), (pow2heap n (Node gv0 c1 c2))
(pow2heap n (Node gv0 c1 c1)), (pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash c2 a2))
(pow2heap n (smash c2 a1)), (pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 c2))
(pow2heap n0 (Node n a2 c1)), (pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c1 a2))
(pow2heap n0 (Node n c1 a1)), (pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1)), (pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n0 a1 c2))
(pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1)), (pow2heap n0 (Node n1 a2 a2))
(pow2heap n0 (Node n1 a2 a1)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1)), (pow2heap n0 (Node n1 c2 c2))
(pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1)), (pow2heap n0 (Node gv0 a2 a2)), (pow2heap n0 (Node gv0 a2 a1)), (pow2heap n0 (Node gv0 a2 c2)), (pow2heap n0 (Node gv0 a2 c1)), (pow2heap n0 (Node gv0 a1 a2))
(pow2heap n0 (Node gv0 a1 a1)), (pow2heap n0 (Node gv0 a1 c2)), (pow2heap n0 (Node gv0 a1 c1)), (pow2heap n0 (Node gv0 c2 a2)), (pow2heap n0 (Node gv0 c2 a1)), (pow2heap n0 (Node gv0 c2 c2)), (pow2heap n0 (Node gv0 c2 c1)), (pow2heap n0 (Node gv0 c1 a2)), (pow2heap n0 (Node gv0 c1 a1)), (pow2heap n0 (Node gv0 c1 c2))
(pow2heap n0 (Node gv0 c1 c1)), (pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1)), (pow2heap n0 (smash c2 a2))
(pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 c2))
(pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1)), (pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c1 a2))
(pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1)), (pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1)), (pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1)), (pow2heap n1 (Node n0 a1 c2))
(pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1)), (pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n1 a2 a2))
(pow2heap n1 (Node n1 a2 a1)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1)), (pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 c2))
(pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1)), (pow2heap n1 (Node gv0 a2 a2)), (pow2heap n1 (Node gv0 a2 a1)), (pow2heap n1 (Node gv0 a2 c2)), (pow2heap n1 (Node gv0 a2 c1)), (pow2heap n1 (Node gv0 a1 a2))
(pow2heap n1 (Node gv0 a1 a1)), (pow2heap n1 (Node gv0 a1 c2)), (pow2heap n1 (Node gv0 a1 c1)), (pow2heap n1 (Node gv0 c2 a2)), (pow2heap n1 (Node gv0 c2 a1)), (pow2heap n1 (Node gv0 c2 c2)), (pow2heap n1 (Node gv0 c2 c1)), (pow2heap n1 (Node gv0 c1 a2)), (pow2heap n1 (Node gv0 c1 a1)), (pow2heap n1 (Node gv0 c1 c2))
(pow2heap n1 (Node gv0 c1 c1)), (pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1)), (pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash c2 a2))
(pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1)), (pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap gv0 (Node n a2 a2)), (pow2heap gv0 (Node n a2 a1)), (pow2heap gv0 (Node n a2 c2))
(pow2heap gv0 (Node n a2 c1)), (pow2heap gv0 (Node n a1 a2)), (pow2heap gv0 (Node n a1 a1)), (pow2heap gv0 (Node n a1 c2)), (pow2heap gv0 (Node n a1 c1)), (pow2heap gv0 (Node n c2 a2)), (pow2heap gv0 (Node n c2 a1)), (pow2heap gv0 (Node n c2 c2)), (pow2heap gv0 (Node n c2 c1)), (pow2heap gv0 (Node n c1 a2))
(pow2heap gv0 (Node n c1 a1)), (pow2heap gv0 (Node n c1 c2)), (pow2heap gv0 (Node n c1 c1)), (pow2heap gv0 (Node n0 a2 a2)), (pow2heap gv0 (Node n0 a2 a1)), (pow2heap gv0 (Node n0 a2 c2)), (pow2heap gv0 (Node n0 a2 c1)), (pow2heap gv0 (Node n0 a1 a2)), (pow2heap gv0 (Node n0 a1 a1)), (pow2heap gv0 (Node n0 a1 c2))
(pow2heap gv0 (Node n0 a1 c1)), (pow2heap gv0 (Node n0 c2 a2)), (pow2heap gv0 (Node n0 c2 a1)), (pow2heap gv0 (Node n0 c2 c2)), (pow2heap gv0 (Node n0 c2 c1)), (pow2heap gv0 (Node n0 c1 a2)), (pow2heap gv0 (Node n0 c1 a1)), (pow2heap gv0 (Node n0 c1 c2)), (pow2heap gv0 (Node n0 c1 c1)), (pow2heap gv0 (Node n1 a2 a2))
(pow2heap gv0 (Node n1 a2 a1)), (pow2heap gv0 (Node n1 a2 c2)), (pow2heap gv0 (Node n1 a2 c1)), (pow2heap gv0 (Node n1 a1 a2)), (pow2heap gv0 (Node n1 a1 a1)), (pow2heap gv0 (Node n1 a1 c2)), (pow2heap gv0 (Node n1 a1 c1)), (pow2heap gv0 (Node n1 c2 a2)), (pow2heap gv0 (Node n1 c2 a1)), (pow2heap gv0 (Node n1 c2 c2))
(pow2heap gv0 (Node n1 c2 c1)), (pow2heap gv0 (Node n1 c1 a2)), (pow2heap gv0 (Node n1 c1 a1)), (pow2heap gv0 (Node n1 c1 c2)), (pow2heap gv0 (Node n1 c1 c1)), (pow2heap gv0 (Node gv0 a2 a2)), (pow2heap gv0 (Node gv0 a2 a1)), (pow2heap gv0 (Node gv0 a2 c2)), (pow2heap gv0 (Node gv0 a2 c1)), (pow2heap gv0 (Node gv0 a1 a2))
(pow2heap gv0 (Node gv0 a1 a1)), (pow2heap gv0 (Node gv0 a1 c2)), (pow2heap gv0 (Node gv0 a1 c1)), (pow2heap gv0 (Node gv0 c2 a2)), (pow2heap gv0 (Node gv0 c2 a1)), (pow2heap gv0 (Node gv0 c2 c2)), (pow2heap gv0 (Node gv0 c2 c1)), (pow2heap gv0 (Node gv0 c1 a2)), (pow2heap gv0 (Node gv0 c1 a1)), (pow2heap gv0 (Node gv0 c1 c2))
(pow2heap gv0 (Node gv0 c1 c1)), (pow2heap gv0 (smash a2 a2)), (pow2heap gv0 (smash a2 a1)), (pow2heap gv0 (smash a2 c2)), (pow2heap gv0 (smash a2 c1)), (pow2heap gv0 (smash a1 a2)), (pow2heap gv0 (smash a1 a1)), (pow2heap gv0 (smash a1 c2)), (pow2heap gv0 (smash a1 c1)), (pow2heap gv0 (smash c2 a2))
(pow2heap gv0 (smash c2 a1)), (pow2heap gv0 (smash c2 c2)), (pow2heap gv0 (smash c2 c1)), (pow2heap gv0 (smash c1 a2)), (pow2heap gv0 (smash c1 a1)), (pow2heap gv0 (smash c1 c2)), (pow2heap gv0 (smash c1 c1)), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) c2)
(pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n c2 a2))
(pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1)), (pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 c2))
(pow2heap (find_max' n p) (Node n0 a2 c1)), (pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c1 a2))
(pow2heap (find_max' n p) (Node n0 c1 a1)), (pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1)), (pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1)), (pow2heap (find_max' n p) (Node n1 a1 c2))
(pow2heap (find_max' n p) (Node n1 a1 c1)), (pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1)), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node gv0 a2 a2))
(pow2heap (find_max' n p) (Node gv0 a2 a1)), (pow2heap (find_max' n p) (Node gv0 a2 c2)), (pow2heap (find_max' n p) (Node gv0 a2 c1)), (pow2heap (find_max' n p) (Node gv0 a1 a2)), (pow2heap (find_max' n p) (Node gv0 a1 a1)), (pow2heap (find_max' n p) (Node gv0 a1 c2)), (pow2heap (find_max' n p) (Node gv0 a1 c1)), (pow2heap (find_max' n p) (Node gv0 c2 a2)), (pow2heap (find_max' n p) (Node gv0 c2 a1)), (pow2heap (find_max' n p) (Node gv0 c2 c2))
(pow2heap (find_max' n p) (Node gv0 c2 c1)), (pow2heap (find_max' n p) (Node gv0 c1 a2)), (pow2heap (find_max' n p) (Node gv0 c1 a1)), (pow2heap (find_max' n p) (Node gv0 c1 c2)), (pow2heap (find_max' n p) (Node gv0 c1 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a1 a2))
(pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 c2))
(pow2heap (find_max' n p) (smash c1 c1)), (pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a1 a2))
(pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1)), (pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1)), (pow2heap (find_max' n0 p) (Node n c1 c2))
(pow2heap (find_max' n0 p) (Node n c1 c1)), (pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 c2 a2))
(pow2heap (find_max' n0 p) (Node n0 c2 a1)), (pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 c2))
(pow2heap (find_max' n0 p) (Node n1 a2 c1)), (pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1)), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c1 a2))
(pow2heap (find_max' n0 p) (Node n1 c1 a1)), (pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1)), (pow2heap (find_max' n0 p) (Node gv0 a2 a2)), (pow2heap (find_max' n0 p) (Node gv0 a2 a1)), (pow2heap (find_max' n0 p) (Node gv0 a2 c2)), (pow2heap (find_max' n0 p) (Node gv0 a2 c1)), (pow2heap (find_max' n0 p) (Node gv0 a1 a2)), (pow2heap (find_max' n0 p) (Node gv0 a1 a1)), (pow2heap (find_max' n0 p) (Node gv0 a1 c2))
(pow2heap (find_max' n0 p) (Node gv0 a1 c1)), (pow2heap (find_max' n0 p) (Node gv0 c2 a2)), (pow2heap (find_max' n0 p) (Node gv0 c2 a1)), (pow2heap (find_max' n0 p) (Node gv0 c2 c2)), (pow2heap (find_max' n0 p) (Node gv0 c2 c1)), (pow2heap (find_max' n0 p) (Node gv0 c1 a2)), (pow2heap (find_max' n0 p) (Node gv0 c1 a1)), (pow2heap (find_max' n0 p) (Node gv0 c1 c2)), (pow2heap (find_max' n0 p) (Node gv0 c1 c1)), (pow2heap (find_max' n0 p) (smash a2 a2))
(pow2heap (find_max' n0 p) (smash a2 a1)), (pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1)), (pow2heap (find_max' n0 p) (smash c2 c2))
(pow2heap (find_max' n0 p) (smash c2 c1)), (pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) (Node n a2 a2))
(pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1)), (pow2heap (find_max' n1 p) (Node n c2 c2))
(pow2heap (find_max' n1 p) (Node n c2 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1)), (pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a1 a2))
(pow2heap (find_max' n1 p) (Node n0 a1 a1)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1)), (pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 c2))
(pow2heap (find_max' n1 p) (Node n0 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1)), (pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 c2 a2))
(pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1)), (pow2heap (find_max' n1 p) (Node gv0 a2 a2)), (pow2heap (find_max' n1 p) (Node gv0 a2 a1)), (pow2heap (find_max' n1 p) (Node gv0 a2 c2))
(pow2heap (find_max' n1 p) (Node gv0 a2 c1)), (pow2heap (find_max' n1 p) (Node gv0 a1 a2)), (pow2heap (find_max' n1 p) (Node gv0 a1 a1)), (pow2heap (find_max' n1 p) (Node gv0 a1 c2)), (pow2heap (find_max' n1 p) (Node gv0 a1 c1)), (pow2heap (find_max' n1 p) (Node gv0 c2 a2)), (pow2heap (find_max' n1 p) (Node gv0 c2 a1)), (pow2heap (find_max' n1 p) (Node gv0 c2 c2)), (pow2heap (find_max' n1 p) (Node gv0 c2 c1)), (pow2heap (find_max' n1 p) (Node gv0 c1 a2))
(pow2heap (find_max' n1 p) (Node gv0 c1 a1)), (pow2heap (find_max' n1 p) (Node gv0 c1 c2)), (pow2heap (find_max' n1 p) (Node gv0 c1 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1)), (pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 c2))
(pow2heap (find_max' n1 p) (smash a1 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1)), (pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1)), (pow2heap (find_max' gv0 p) a2)
(pow2heap (find_max' gv0 p) a1), (pow2heap (find_max' gv0 p) c2), (pow2heap (find_max' gv0 p) c1), (pow2heap (find_max' gv0 p) (Node n a2 a2)), (pow2heap (find_max' gv0 p) (Node n a2 a1)), (pow2heap (find_max' gv0 p) (Node n a2 c2)), (pow2heap (find_max' gv0 p) (Node n a2 c1)), (pow2heap (find_max' gv0 p) (Node n a1 a2)), (pow2heap (find_max' gv0 p) (Node n a1 a1)), (pow2heap (find_max' gv0 p) (Node n a1 c2))
(pow2heap (find_max' gv0 p) (Node n a1 c1)), (pow2heap (find_max' gv0 p) (Node n c2 a2)), (pow2heap (find_max' gv0 p) (Node n c2 a1)), (pow2heap (find_max' gv0 p) (Node n c2 c2)), (pow2heap (find_max' gv0 p) (Node n c2 c1)), (pow2heap (find_max' gv0 p) (Node n c1 a2)), (pow2heap (find_max' gv0 p) (Node n c1 a1)), (pow2heap (find_max' gv0 p) (Node n c1 c2)), (pow2heap (find_max' gv0 p) (Node n c1 c1)), (pow2heap (find_max' gv0 p) (Node n0 a2 a2))
(pow2heap (find_max' gv0 p) (Node n0 a2 a1)), (pow2heap (find_max' gv0 p) (Node n0 a2 c2)), (pow2heap (find_max' gv0 p) (Node n0 a2 c1)), (pow2heap (find_max' gv0 p) (Node n0 a1 a2)), (pow2heap (find_max' gv0 p) (Node n0 a1 a1)), (pow2heap (find_max' gv0 p) (Node n0 a1 c2)), (pow2heap (find_max' gv0 p) (Node n0 a1 c1)), (pow2heap (find_max' gv0 p) (Node n0 c2 a2)), (pow2heap (find_max' gv0 p) (Node n0 c2 a1)), (pow2heap (find_max' gv0 p) (Node n0 c2 c2))
(pow2heap (find_max' gv0 p) (Node n0 c2 c1)), (pow2heap (find_max' gv0 p) (Node n0 c1 a2)), (pow2heap (find_max' gv0 p) (Node n0 c1 a1)), (pow2heap (find_max' gv0 p) (Node n0 c1 c2)), (pow2heap (find_max' gv0 p) (Node n0 c1 c1)), (pow2heap (find_max' gv0 p) (Node n1 a2 a2)), (pow2heap (find_max' gv0 p) (Node n1 a2 a1)), (pow2heap (find_max' gv0 p) (Node n1 a2 c2)), (pow2heap (find_max' gv0 p) (Node n1 a2 c1)), (pow2heap (find_max' gv0 p) (Node n1 a1 a2))
(pow2heap (find_max' gv0 p) (Node n1 a1 a1)), (pow2heap (find_max' gv0 p) (Node n1 a1 c2)), (pow2heap (find_max' gv0 p) (Node n1 a1 c1)), (pow2heap (find_max' gv0 p) (Node n1 c2 a2)), (pow2heap (find_max' gv0 p) (Node n1 c2 a1)), (pow2heap (find_max' gv0 p) (Node n1 c2 c2)), (pow2heap (find_max' gv0 p) (Node n1 c2 c1)), (pow2heap (find_max' gv0 p) (Node n1 c1 a2)), (pow2heap (find_max' gv0 p) (Node n1 c1 a1)), (pow2heap (find_max' gv0 p) (Node n1 c1 c2))
(pow2heap (find_max' gv0 p) (Node n1 c1 c1)), (pow2heap (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heap (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heap (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heap (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heap (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heap (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heap (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heap (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heap (find_max' gv0 p) (Node gv0 c2 a2))
(pow2heap (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heap (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heap (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heap (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heap (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heap (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heap (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heap (find_max' gv0 p) (smash a2 a2)), (pow2heap (find_max' gv0 p) (smash a2 a1)), (pow2heap (find_max' gv0 p) (smash a2 c2))
(pow2heap (find_max' gv0 p) (smash a2 c1)), (pow2heap (find_max' gv0 p) (smash a1 a2)), (pow2heap (find_max' gv0 p) (smash a1 a1)), (pow2heap (find_max' gv0 p) (smash a1 c2)), (pow2heap (find_max' gv0 p) (smash a1 c1)), (pow2heap (find_max' gv0 p) (smash c2 a2)), (pow2heap (find_max' gv0 p) (smash c2 a1)), (pow2heap (find_max' gv0 p) (smash c2 c2)), (pow2heap (find_max' gv0 p) (smash c2 c1)), (pow2heap (find_max' gv0 p) (smash c1 a2))
(pow2heap (find_max' gv0 p) (smash c1 a1)), (pow2heap (find_max' gv0 p) (smash c1 c2)), (pow2heap (find_max' gv0 p) (smash c1 c1)), (pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) c2), (pow2heap (length p) c1), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 c2))
(pow2heap (length p) (Node n a2 c1)), (pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c1 a2))
(pow2heap (length p) (Node n c1 a1)), (pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1)), (pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n0 a1 c2))
(pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1)), (pow2heap (length p) (Node n1 a2 a2))
(pow2heap (length p) (Node n1 a2 a1)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1)), (pow2heap (length p) (Node n1 c2 c2))
(pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1)), (pow2heap (length p) (Node gv0 a2 a2)), (pow2heap (length p) (Node gv0 a2 a1)), (pow2heap (length p) (Node gv0 a2 c2)), (pow2heap (length p) (Node gv0 a2 c1)), (pow2heap (length p) (Node gv0 a1 a2))
(pow2heap (length p) (Node gv0 a1 a1)), (pow2heap (length p) (Node gv0 a1 c2)), (pow2heap (length p) (Node gv0 a1 c1)), (pow2heap (length p) (Node gv0 c2 a2)), (pow2heap (length p) (Node gv0 c2 a1)), (pow2heap (length p) (Node gv0 c2 c2)), (pow2heap (length p) (Node gv0 c2 c1)), (pow2heap (length p) (Node gv0 c1 a2)), (pow2heap (length p) (Node gv0 c1 a1)), (pow2heap (length p) (Node gv0 c1 c2))
(pow2heap (length p) (Node gv0 c1 c1)), (pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1)), (pow2heap (length p) (smash c2 a2))
(pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 c2))
(pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1)), (pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 c2)), (pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c1 a2))
(pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 c2))
(pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1)), (pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c1 a2)), (pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 c2)), (pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n1 a2 a2))
(pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 c2)), (pow2heapp n n (Node n1 a2 c1)), (pow2heapp n n (Node n1 a1 a2)), (pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 c2 a2)), (pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 c2))
(pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1)), (pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node gv0 a2 a2)), (pow2heapp n n (Node gv0 a2 a1)), (pow2heapp n n (Node gv0 a2 c2)), (pow2heapp n n (Node gv0 a2 c1)), (pow2heapp n n (Node gv0 a1 a2))
(pow2heapp n n (Node gv0 a1 a1)), (pow2heapp n n (Node gv0 a1 c2)), (pow2heapp n n (Node gv0 a1 c1)), (pow2heapp n n (Node gv0 c2 a2)), (pow2heapp n n (Node gv0 c2 a1)), (pow2heapp n n (Node gv0 c2 c2)), (pow2heapp n n (Node gv0 c2 c1)), (pow2heapp n n (Node gv0 c1 a2)), (pow2heapp n n (Node gv0 c1 a1)), (pow2heapp n n (Node gv0 c1 c2))
(pow2heapp n n (Node gv0 c1 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 c2)), (pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash c2 a2))
(pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1)), (pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 c2)), (pow2heapp n n (smash c1 c1)), (pow2heapp n n Leaf), (pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1))
(pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1)), (pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1))
(pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1))
(pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1)), (pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1))
(pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1)), (pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1))
(pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1)), (pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node gv0 a2 a2)), (pow2heapp n n0 (Node gv0 a2 a1)), (pow2heapp n n0 (Node gv0 a2 c2)), (pow2heapp n n0 (Node gv0 a2 c1))
(pow2heapp n n0 (Node gv0 a1 a2)), (pow2heapp n n0 (Node gv0 a1 a1)), (pow2heapp n n0 (Node gv0 a1 c2)), (pow2heapp n n0 (Node gv0 a1 c1)), (pow2heapp n n0 (Node gv0 c2 a2)), (pow2heapp n n0 (Node gv0 c2 a1)), (pow2heapp n n0 (Node gv0 c2 c2)), (pow2heapp n n0 (Node gv0 c2 c1)), (pow2heapp n n0 (Node gv0 c1 a2)), (pow2heapp n n0 (Node gv0 c1 a1))
(pow2heapp n n0 (Node gv0 c1 c2)), (pow2heapp n n0 (Node gv0 c1 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1))
(pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1)), (pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1)), (pow2heapp n n0 Leaf), (pow2heapp n n1 (Node n a2 a2))
(pow2heapp n n1 (Node n a2 a1)), (pow2heapp n n1 (Node n a2 c2)), (pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n c2 a2)), (pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 c2))
(pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c1 a2)), (pow2heapp n n1 (Node n c1 a1)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a1 a2))
(pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c1 a2)), (pow2heapp n n1 (Node n0 c1 a1)), (pow2heapp n n1 (Node n0 c1 c2))
(pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n1 a2 a2)), (pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 c2 a2))
(pow2heapp n n1 (Node n1 c2 a1)), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node gv0 a2 a2)), (pow2heapp n n1 (Node gv0 a2 a1)), (pow2heapp n n1 (Node gv0 a2 c2))
(pow2heapp n n1 (Node gv0 a2 c1)), (pow2heapp n n1 (Node gv0 a1 a2)), (pow2heapp n n1 (Node gv0 a1 a1)), (pow2heapp n n1 (Node gv0 a1 c2)), (pow2heapp n n1 (Node gv0 a1 c1)), (pow2heapp n n1 (Node gv0 c2 a2)), (pow2heapp n n1 (Node gv0 c2 a1)), (pow2heapp n n1 (Node gv0 c2 c2)), (pow2heapp n n1 (Node gv0 c2 c1)), (pow2heapp n n1 (Node gv0 c1 a2))
(pow2heapp n n1 (Node gv0 c1 a1)), (pow2heapp n n1 (Node gv0 c1 c2)), (pow2heapp n n1 (Node gv0 c1 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a1 a2)), (pow2heapp n n1 (smash a1 a1)), (pow2heapp n n1 (smash a1 c2))
(pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c1 a2)), (pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 Leaf)
(pow2heapp n gv0 (Node n a2 a2)), (pow2heapp n gv0 (Node n a2 a1)), (pow2heapp n gv0 (Node n a2 c2)), (pow2heapp n gv0 (Node n a2 c1)), (pow2heapp n gv0 (Node n a1 a2)), (pow2heapp n gv0 (Node n a1 a1)), (pow2heapp n gv0 (Node n a1 c2)), (pow2heapp n gv0 (Node n a1 c1)), (pow2heapp n gv0 (Node n c2 a2)), (pow2heapp n gv0 (Node n c2 a1))
(pow2heapp n gv0 (Node n c2 c2)), (pow2heapp n gv0 (Node n c2 c1)), (pow2heapp n gv0 (Node n c1 a2)), (pow2heapp n gv0 (Node n c1 a1)), (pow2heapp n gv0 (Node n c1 c2)), (pow2heapp n gv0 (Node n c1 c1)), (pow2heapp n gv0 (Node n0 a2 a2)), (pow2heapp n gv0 (Node n0 a2 a1)), (pow2heapp n gv0 (Node n0 a2 c2)), (pow2heapp n gv0 (Node n0 a2 c1))
(pow2heapp n gv0 (Node n0 a1 a2)), (pow2heapp n gv0 (Node n0 a1 a1)), (pow2heapp n gv0 (Node n0 a1 c2)), (pow2heapp n gv0 (Node n0 a1 c1)), (pow2heapp n gv0 (Node n0 c2 a2)), (pow2heapp n gv0 (Node n0 c2 a1)), (pow2heapp n gv0 (Node n0 c2 c2)), (pow2heapp n gv0 (Node n0 c2 c1)), (pow2heapp n gv0 (Node n0 c1 a2)), (pow2heapp n gv0 (Node n0 c1 a1))
(pow2heapp n gv0 (Node n0 c1 c2)), (pow2heapp n gv0 (Node n0 c1 c1)), (pow2heapp n gv0 (Node n1 a2 a2)), (pow2heapp n gv0 (Node n1 a2 a1)), (pow2heapp n gv0 (Node n1 a2 c2)), (pow2heapp n gv0 (Node n1 a2 c1)), (pow2heapp n gv0 (Node n1 a1 a2)), (pow2heapp n gv0 (Node n1 a1 a1)), (pow2heapp n gv0 (Node n1 a1 c2)), (pow2heapp n gv0 (Node n1 a1 c1))
(pow2heapp n gv0 (Node n1 c2 a2)), (pow2heapp n gv0 (Node n1 c2 a1)), (pow2heapp n gv0 (Node n1 c2 c2)), (pow2heapp n gv0 (Node n1 c2 c1)), (pow2heapp n gv0 (Node n1 c1 a2)), (pow2heapp n gv0 (Node n1 c1 a1)), (pow2heapp n gv0 (Node n1 c1 c2)), (pow2heapp n gv0 (Node n1 c1 c1)), (pow2heapp n gv0 (Node gv0 a2 a2)), (pow2heapp n gv0 (Node gv0 a2 a1))
(pow2heapp n gv0 (Node gv0 a2 c2)), (pow2heapp n gv0 (Node gv0 a2 c1)), (pow2heapp n gv0 (Node gv0 a1 a2)), (pow2heapp n gv0 (Node gv0 a1 a1)), (pow2heapp n gv0 (Node gv0 a1 c2)), (pow2heapp n gv0 (Node gv0 a1 c1)), (pow2heapp n gv0 (Node gv0 c2 a2)), (pow2heapp n gv0 (Node gv0 c2 a1)), (pow2heapp n gv0 (Node gv0 c2 c2)), (pow2heapp n gv0 (Node gv0 c2 c1))
(pow2heapp n gv0 (Node gv0 c1 a2)), (pow2heapp n gv0 (Node gv0 c1 a1)), (pow2heapp n gv0 (Node gv0 c1 c2)), (pow2heapp n gv0 (Node gv0 c1 c1)), (pow2heapp n gv0 (smash a2 a2)), (pow2heapp n gv0 (smash a2 a1)), (pow2heapp n gv0 (smash a2 c2)), (pow2heapp n gv0 (smash a2 c1)), (pow2heapp n gv0 (smash a1 a2)), (pow2heapp n gv0 (smash a1 a1))
(pow2heapp n gv0 (smash a1 c2)), (pow2heapp n gv0 (smash a1 c1)), (pow2heapp n gv0 (smash c2 a2)), (pow2heapp n gv0 (smash c2 a1)), (pow2heapp n gv0 (smash c2 c2)), (pow2heapp n gv0 (smash c2 c1)), (pow2heapp n gv0 (smash c1 a2)), (pow2heapp n gv0 (smash c1 a1)), (pow2heapp n gv0 (smash c1 c2)), (pow2heapp n gv0 (smash c1 c1))
(pow2heapp n gv0 Leaf), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) (Node n a2 a2)), (pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2))
(pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2)), (pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 c2)), (pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 c2))
(pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 c2)), (pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2)), (pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2))
(pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2)), (pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2)), (pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 c2))
(pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 c2)), (pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2)), (pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2))
(pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node gv0 a2 a2)), (pow2heapp n (find_max' n p) (Node gv0 a2 a1)), (pow2heapp n (find_max' n p) (Node gv0 a2 c2)), (pow2heapp n (find_max' n p) (Node gv0 a2 c1)), (pow2heapp n (find_max' n p) (Node gv0 a1 a2)), (pow2heapp n (find_max' n p) (Node gv0 a1 a1)), (pow2heapp n (find_max' n p) (Node gv0 a1 c2))
(pow2heapp n (find_max' n p) (Node gv0 a1 c1)), (pow2heapp n (find_max' n p) (Node gv0 c2 a2)), (pow2heapp n (find_max' n p) (Node gv0 c2 a1)), (pow2heapp n (find_max' n p) (Node gv0 c2 c2)), (pow2heapp n (find_max' n p) (Node gv0 c2 c1)), (pow2heapp n (find_max' n p) (Node gv0 c1 a2)), (pow2heapp n (find_max' n p) (Node gv0 c1 a1)), (pow2heapp n (find_max' n p) (Node gv0 c1 c2)), (pow2heapp n (find_max' n p) (Node gv0 c1 c1)), (pow2heapp n (find_max' n p) (smash a2 a2))
(pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a1 a2)), (pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 c2))
(pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c1 a2)), (pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 c2)), (pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1)
(pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n c2 a2)), (pow2heapp n (find_max' n0 p) (Node n c2 a1))
(pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1))
(pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1))
(pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1))
(pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node gv0 a2 a1))
(pow2heapp n (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp n (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp n (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp n (find_max' n0 p) (Node gv0 c2 c1))
(pow2heapp n (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1)), (pow2heapp n (find_max' n0 p) (smash a2 c2)), (pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1))
(pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1)), (pow2heapp n (find_max' n0 p) (smash c1 a2)), (pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1))
(pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) c2), (pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2))
(pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 c2)), (pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1)), (pow2heapp n (find_max' n1 p) (Node n c2 c2)), (pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 c2))
(pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2))
(pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2))
(pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp n (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node gv0 a1 c2))
(pow2heapp n (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp n (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2))
(pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 c2)), (pow2heapp n (find_max' n1 p) (smash a2 c1)), (pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 c2))
(pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1)), (pow2heapp n (find_max' n1 p) (smash c1 c2)), (pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' gv0 p) a2), (pow2heapp n (find_max' gv0 p) a1), (pow2heapp n (find_max' gv0 p) c2), (pow2heapp n (find_max' gv0 p) c1)
(pow2heapp n (find_max' gv0 p) (Node n a2 a2)), (pow2heapp n (find_max' gv0 p) (Node n a2 a1)), (pow2heapp n (find_max' gv0 p) (Node n a2 c2)), (pow2heapp n (find_max' gv0 p) (Node n a2 c1)), (pow2heapp n (find_max' gv0 p) (Node n a1 a2)), (pow2heapp n (find_max' gv0 p) (Node n a1 a1)), (pow2heapp n (find_max' gv0 p) (Node n a1 c2)), (pow2heapp n (find_max' gv0 p) (Node n a1 c1)), (pow2heapp n (find_max' gv0 p) (Node n c2 a2)), (pow2heapp n (find_max' gv0 p) (Node n c2 a1))
(pow2heapp n (find_max' gv0 p) (Node n c2 c2)), (pow2heapp n (find_max' gv0 p) (Node n c2 c1)), (pow2heapp n (find_max' gv0 p) (Node n c1 a2)), (pow2heapp n (find_max' gv0 p) (Node n c1 a1)), (pow2heapp n (find_max' gv0 p) (Node n c1 c2)), (pow2heapp n (find_max' gv0 p) (Node n c1 c1)), (pow2heapp n (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp n (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' gv0 p) (Node n0 a2 c1))
(pow2heapp n (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp n (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp n (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' gv0 p) (Node n0 c1 a1))
(pow2heapp n (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp n (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp n (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' gv0 p) (Node n1 a1 c1))
(pow2heapp n (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp n (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp n (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp n (find_max' gv0 p) (Node gv0 a2 a1))
(pow2heapp n (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp n (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp n (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp n (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp n (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp n (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp n (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp n (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp n (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp n (find_max' gv0 p) (Node gv0 c2 c1))
(pow2heapp n (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp n (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp n (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp n (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp n (find_max' gv0 p) (smash a2 a2)), (pow2heapp n (find_max' gv0 p) (smash a2 a1)), (pow2heapp n (find_max' gv0 p) (smash a2 c2)), (pow2heapp n (find_max' gv0 p) (smash a2 c1)), (pow2heapp n (find_max' gv0 p) (smash a1 a2)), (pow2heapp n (find_max' gv0 p) (smash a1 a1))
(pow2heapp n (find_max' gv0 p) (smash a1 c2)), (pow2heapp n (find_max' gv0 p) (smash a1 c1)), (pow2heapp n (find_max' gv0 p) (smash c2 a2)), (pow2heapp n (find_max' gv0 p) (smash c2 a1)), (pow2heapp n (find_max' gv0 p) (smash c2 c2)), (pow2heapp n (find_max' gv0 p) (smash c2 c1)), (pow2heapp n (find_max' gv0 p) (smash c1 a2)), (pow2heapp n (find_max' gv0 p) (smash c1 a1)), (pow2heapp n (find_max' gv0 p) (smash c1 c2)), (pow2heapp n (find_max' gv0 p) (smash c1 c1))
(pow2heapp n (find_max' gv0 p) Leaf), (pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a1 a2))
(pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1)), (pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 c2))
(pow2heapp n (length p) (Node n c1 c1)), (pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1)), (pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 c2 a2))
(pow2heapp n (length p) (Node n0 c2 a1)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1)), (pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1)), (pow2heapp n (length p) (Node n1 a2 c2))
(pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1)), (pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c1 a2))
(pow2heapp n (length p) (Node n1 c1 a1)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1)), (pow2heapp n (length p) (Node gv0 a2 a2)), (pow2heapp n (length p) (Node gv0 a2 a1)), (pow2heapp n (length p) (Node gv0 a2 c2)), (pow2heapp n (length p) (Node gv0 a2 c1)), (pow2heapp n (length p) (Node gv0 a1 a2)), (pow2heapp n (length p) (Node gv0 a1 a1)), (pow2heapp n (length p) (Node gv0 a1 c2))
(pow2heapp n (length p) (Node gv0 a1 c1)), (pow2heapp n (length p) (Node gv0 c2 a2)), (pow2heapp n (length p) (Node gv0 c2 a1)), (pow2heapp n (length p) (Node gv0 c2 c2)), (pow2heapp n (length p) (Node gv0 c2 c1)), (pow2heapp n (length p) (Node gv0 c1 a2)), (pow2heapp n (length p) (Node gv0 c1 a1)), (pow2heapp n (length p) (Node gv0 c1 c2)), (pow2heapp n (length p) (Node gv0 c1 c1)), (pow2heapp n (length p) (smash a2 a2))
(pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 c2))
(pow2heapp n (length p) (smash c2 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1)), (pow2heapp n (length p) Leaf), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1))
(pow2heapp n0 n (Node n a1 a2)), (pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1)), (pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c1 a2)), (pow2heapp n0 n (Node n c1 a1))
(pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1)), (pow2heapp n0 n (Node n0 a2 a2)), (pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1))
(pow2heapp n0 n (Node n0 c2 a2)), (pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1)), (pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1)), (pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1))
(pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a1 a2)), (pow2heapp n0 n (Node n1 a1 a1)), (pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1))
(pow2heapp n0 n (Node n1 c1 a2)), (pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1)), (pow2heapp n0 n (Node gv0 a2 a2)), (pow2heapp n0 n (Node gv0 a2 a1)), (pow2heapp n0 n (Node gv0 a2 c2)), (pow2heapp n0 n (Node gv0 a2 c1)), (pow2heapp n0 n (Node gv0 a1 a2)), (pow2heapp n0 n (Node gv0 a1 a1))
(pow2heapp n0 n (Node gv0 a1 c2)), (pow2heapp n0 n (Node gv0 a1 c1)), (pow2heapp n0 n (Node gv0 c2 a2)), (pow2heapp n0 n (Node gv0 c2 a1)), (pow2heapp n0 n (Node gv0 c2 c2)), (pow2heapp n0 n (Node gv0 c2 c1)), (pow2heapp n0 n (Node gv0 c1 a2)), (pow2heapp n0 n (Node gv0 c1 a1)), (pow2heapp n0 n (Node gv0 c1 c2)), (pow2heapp n0 n (Node gv0 c1 c1))
(pow2heapp n0 n (smash a2 a2)), (pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1)), (pow2heapp n0 n (smash c2 a2)), (pow2heapp n0 n (smash c2 a1))
(pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1)), (pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1)), (pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n Leaf), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 c2))
(pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1)), (pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c1 a2))
(pow2heapp n0 n0 (Node n c1 a1)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1)), (pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 c2))
(pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1)), (pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n1 a2 a2))
(pow2heapp n0 n0 (Node n1 a2 a1)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1)), (pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 c2))
(pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1)), (pow2heapp n0 n0 (Node gv0 a2 a2)), (pow2heapp n0 n0 (Node gv0 a2 a1)), (pow2heapp n0 n0 (Node gv0 a2 c2)), (pow2heapp n0 n0 (Node gv0 a2 c1)), (pow2heapp n0 n0 (Node gv0 a1 a2))
(pow2heapp n0 n0 (Node gv0 a1 a1)), (pow2heapp n0 n0 (Node gv0 a1 c2)), (pow2heapp n0 n0 (Node gv0 a1 c1)), (pow2heapp n0 n0 (Node gv0 c2 a2)), (pow2heapp n0 n0 (Node gv0 c2 a1)), (pow2heapp n0 n0 (Node gv0 c2 c2)), (pow2heapp n0 n0 (Node gv0 c2 c1)), (pow2heapp n0 n0 (Node gv0 c1 a2)), (pow2heapp n0 n0 (Node gv0 c1 a1)), (pow2heapp n0 n0 (Node gv0 c1 c2))
(pow2heapp n0 n0 (Node gv0 c1 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash c2 a2))
(pow2heapp n0 n0 (smash c2 a1)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1)), (pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1))
(pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a1 a2)), (pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n c2 a2)), (pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1))
(pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 c2)), (pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a1 a2)), (pow2heapp n0 n1 (Node n0 a1 a1))
(pow2heapp n0 n1 (Node n0 a1 c2)), (pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 c2 a2)), (pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1))
(pow2heapp n0 n1 (Node n1 a2 a2)), (pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1))
(pow2heapp n0 n1 (Node n1 c2 c2)), (pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c1 a2)), (pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node gv0 a2 a2)), (pow2heapp n0 n1 (Node gv0 a2 a1)), (pow2heapp n0 n1 (Node gv0 a2 c2)), (pow2heapp n0 n1 (Node gv0 a2 c1))
(pow2heapp n0 n1 (Node gv0 a1 a2)), (pow2heapp n0 n1 (Node gv0 a1 a1)), (pow2heapp n0 n1 (Node gv0 a1 c2)), (pow2heapp n0 n1 (Node gv0 a1 c1)), (pow2heapp n0 n1 (Node gv0 c2 a2)), (pow2heapp n0 n1 (Node gv0 c2 a1)), (pow2heapp n0 n1 (Node gv0 c2 c2)), (pow2heapp n0 n1 (Node gv0 c2 c1)), (pow2heapp n0 n1 (Node gv0 c1 a2)), (pow2heapp n0 n1 (Node gv0 c1 a1))
(pow2heapp n0 n1 (Node gv0 c1 c2)), (pow2heapp n0 n1 (Node gv0 c1 c1)), (pow2heapp n0 n1 (smash a2 a2)), (pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1))
(pow2heapp n0 n1 (smash c2 a2)), (pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c1 a2)), (pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 Leaf), (pow2heapp n0 gv0 (Node n a2 a2))
(pow2heapp n0 gv0 (Node n a2 a1)), (pow2heapp n0 gv0 (Node n a2 c2)), (pow2heapp n0 gv0 (Node n a2 c1)), (pow2heapp n0 gv0 (Node n a1 a2)), (pow2heapp n0 gv0 (Node n a1 a1)), (pow2heapp n0 gv0 (Node n a1 c2)), (pow2heapp n0 gv0 (Node n a1 c1)), (pow2heapp n0 gv0 (Node n c2 a2)), (pow2heapp n0 gv0 (Node n c2 a1)), (pow2heapp n0 gv0 (Node n c2 c2))
(pow2heapp n0 gv0 (Node n c2 c1)), (pow2heapp n0 gv0 (Node n c1 a2)), (pow2heapp n0 gv0 (Node n c1 a1)), (pow2heapp n0 gv0 (Node n c1 c2)), (pow2heapp n0 gv0 (Node n c1 c1)), (pow2heapp n0 gv0 (Node n0 a2 a2)), (pow2heapp n0 gv0 (Node n0 a2 a1)), (pow2heapp n0 gv0 (Node n0 a2 c2)), (pow2heapp n0 gv0 (Node n0 a2 c1)), (pow2heapp n0 gv0 (Node n0 a1 a2))
(pow2heapp n0 gv0 (Node n0 a1 a1)), (pow2heapp n0 gv0 (Node n0 a1 c2)), (pow2heapp n0 gv0 (Node n0 a1 c1)), (pow2heapp n0 gv0 (Node n0 c2 a2)), (pow2heapp n0 gv0 (Node n0 c2 a1)), (pow2heapp n0 gv0 (Node n0 c2 c2)), (pow2heapp n0 gv0 (Node n0 c2 c1)), (pow2heapp n0 gv0 (Node n0 c1 a2)), (pow2heapp n0 gv0 (Node n0 c1 a1)), (pow2heapp n0 gv0 (Node n0 c1 c2))
(pow2heapp n0 gv0 (Node n0 c1 c1)), (pow2heapp n0 gv0 (Node n1 a2 a2)), (pow2heapp n0 gv0 (Node n1 a2 a1)), (pow2heapp n0 gv0 (Node n1 a2 c2)), (pow2heapp n0 gv0 (Node n1 a2 c1)), (pow2heapp n0 gv0 (Node n1 a1 a2)), (pow2heapp n0 gv0 (Node n1 a1 a1)), (pow2heapp n0 gv0 (Node n1 a1 c2)), (pow2heapp n0 gv0 (Node n1 a1 c1)), (pow2heapp n0 gv0 (Node n1 c2 a2))
(pow2heapp n0 gv0 (Node n1 c2 a1)), (pow2heapp n0 gv0 (Node n1 c2 c2)), (pow2heapp n0 gv0 (Node n1 c2 c1)), (pow2heapp n0 gv0 (Node n1 c1 a2)), (pow2heapp n0 gv0 (Node n1 c1 a1)), (pow2heapp n0 gv0 (Node n1 c1 c2)), (pow2heapp n0 gv0 (Node n1 c1 c1)), (pow2heapp n0 gv0 (Node gv0 a2 a2)), (pow2heapp n0 gv0 (Node gv0 a2 a1)), (pow2heapp n0 gv0 (Node gv0 a2 c2))
(pow2heapp n0 gv0 (Node gv0 a2 c1)), (pow2heapp n0 gv0 (Node gv0 a1 a2)), (pow2heapp n0 gv0 (Node gv0 a1 a1)), (pow2heapp n0 gv0 (Node gv0 a1 c2)), (pow2heapp n0 gv0 (Node gv0 a1 c1)), (pow2heapp n0 gv0 (Node gv0 c2 a2)), (pow2heapp n0 gv0 (Node gv0 c2 a1)), (pow2heapp n0 gv0 (Node gv0 c2 c2)), (pow2heapp n0 gv0 (Node gv0 c2 c1)), (pow2heapp n0 gv0 (Node gv0 c1 a2))
(pow2heapp n0 gv0 (Node gv0 c1 a1)), (pow2heapp n0 gv0 (Node gv0 c1 c2)), (pow2heapp n0 gv0 (Node gv0 c1 c1)), (pow2heapp n0 gv0 (smash a2 a2)), (pow2heapp n0 gv0 (smash a2 a1)), (pow2heapp n0 gv0 (smash a2 c2)), (pow2heapp n0 gv0 (smash a2 c1)), (pow2heapp n0 gv0 (smash a1 a2)), (pow2heapp n0 gv0 (smash a1 a1)), (pow2heapp n0 gv0 (smash a1 c2))
(pow2heapp n0 gv0 (smash a1 c1)), (pow2heapp n0 gv0 (smash c2 a2)), (pow2heapp n0 gv0 (smash c2 a1)), (pow2heapp n0 gv0 (smash c2 c2)), (pow2heapp n0 gv0 (smash c2 c1)), (pow2heapp n0 gv0 (smash c1 a2)), (pow2heapp n0 gv0 (smash c1 a1)), (pow2heapp n0 gv0 (smash c1 c2)), (pow2heapp n0 gv0 (smash c1 c1)), (pow2heapp n0 gv0 Leaf)
(pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 c2)), (pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1))
(pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1)), (pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2)), (pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1))
(pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1))
(pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1))
(pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1))
(pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node gv0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node gv0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node gv0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node gv0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node gv0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node gv0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node gv0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node gv0 a1 c1))
(pow2heapp n0 (find_max' n p) (Node gv0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node gv0 c2 a1)), (pow2heapp n0 (find_max' n p) (Node gv0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node gv0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node gv0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node gv0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node gv0 c1 c2)), (pow2heapp n0 (find_max' n p) (Node gv0 c1 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1))
(pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 c2)), (pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1))
(pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1)), (pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) c2), (pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2))
(pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c1 a2))
(pow2heapp n0 (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2)), (pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2))
(pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2)), (pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2)), (pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) Leaf)
(pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1))
(pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 a1 c1))
(pow2heapp n0 (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1))
(pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1)), (pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1))
(pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1)), (pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' gv0 p) a2), (pow2heapp n0 (find_max' gv0 p) a1), (pow2heapp n0 (find_max' gv0 p) c2), (pow2heapp n0 (find_max' gv0 p) c1), (pow2heapp n0 (find_max' gv0 p) (Node n a2 a2))
(pow2heapp n0 (find_max' gv0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n a1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n c2 c2))
(pow2heapp n0 (find_max' gv0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n c1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a1 a2))
(pow2heapp n0 (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n0 c1 c2))
(pow2heapp n0 (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c2 a2))
(pow2heapp n0 (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a2 c2))
(pow2heapp n0 (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c1 a2))
(pow2heapp n0 (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp n0 (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp n0 (find_max' gv0 p) (smash a2 a2)), (pow2heapp n0 (find_max' gv0 p) (smash a2 a1)), (pow2heapp n0 (find_max' gv0 p) (smash a2 c2)), (pow2heapp n0 (find_max' gv0 p) (smash a2 c1)), (pow2heapp n0 (find_max' gv0 p) (smash a1 a2)), (pow2heapp n0 (find_max' gv0 p) (smash a1 a1)), (pow2heapp n0 (find_max' gv0 p) (smash a1 c2))
(pow2heapp n0 (find_max' gv0 p) (smash a1 c1)), (pow2heapp n0 (find_max' gv0 p) (smash c2 a2)), (pow2heapp n0 (find_max' gv0 p) (smash c2 a1)), (pow2heapp n0 (find_max' gv0 p) (smash c2 c2)), (pow2heapp n0 (find_max' gv0 p) (smash c2 c1)), (pow2heapp n0 (find_max' gv0 p) (smash c1 a2)), (pow2heapp n0 (find_max' gv0 p) (smash c1 a1)), (pow2heapp n0 (find_max' gv0 p) (smash c1 c2)), (pow2heapp n0 (find_max' gv0 p) (smash c1 c1)), (pow2heapp n0 (find_max' gv0 p) Leaf)
(pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1)), (pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1))
(pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c1 a2)), (pow2heapp n0 (length p) (Node n c1 a1)), (pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1))
(pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1)), (pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1))
(pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2)), (pow2heapp n0 (length p) (Node n0 c1 a1)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1)), (pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1))
(pow2heapp n0 (length p) (Node n1 a1 a2)), (pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2)), (pow2heapp n0 (length p) (Node n1 c2 a1)), (pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1))
(pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node gv0 a2 a2)), (pow2heapp n0 (length p) (Node gv0 a2 a1)), (pow2heapp n0 (length p) (Node gv0 a2 c2)), (pow2heapp n0 (length p) (Node gv0 a2 c1)), (pow2heapp n0 (length p) (Node gv0 a1 a2)), (pow2heapp n0 (length p) (Node gv0 a1 a1)), (pow2heapp n0 (length p) (Node gv0 a1 c2)), (pow2heapp n0 (length p) (Node gv0 a1 c1))
(pow2heapp n0 (length p) (Node gv0 c2 a2)), (pow2heapp n0 (length p) (Node gv0 c2 a1)), (pow2heapp n0 (length p) (Node gv0 c2 c2)), (pow2heapp n0 (length p) (Node gv0 c2 c1)), (pow2heapp n0 (length p) (Node gv0 c1 a2)), (pow2heapp n0 (length p) (Node gv0 c1 a1)), (pow2heapp n0 (length p) (Node gv0 c1 c2)), (pow2heapp n0 (length p) (Node gv0 c1 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1))
(pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1)), (pow2heapp n0 (length p) (smash c2 a2)), (pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1))
(pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a1 a2))
(pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n c2 a2)), (pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 c2))
(pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (Node n0 a2 a2)), (pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 c2 a2))
(pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 c2)), (pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 c2))
(pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a1 a2)), (pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c1 a2))
(pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 c2)), (pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node gv0 a2 a2)), (pow2heapp n1 n (Node gv0 a2 a1)), (pow2heapp n1 n (Node gv0 a2 c2)), (pow2heapp n1 n (Node gv0 a2 c1)), (pow2heapp n1 n (Node gv0 a1 a2)), (pow2heapp n1 n (Node gv0 a1 a1)), (pow2heapp n1 n (Node gv0 a1 c2))
(pow2heapp n1 n (Node gv0 a1 c1)), (pow2heapp n1 n (Node gv0 c2 a2)), (pow2heapp n1 n (Node gv0 c2 a1)), (pow2heapp n1 n (Node gv0 c2 c2)), (pow2heapp n1 n (Node gv0 c2 c1)), (pow2heapp n1 n (Node gv0 c1 a2)), (pow2heapp n1 n (Node gv0 c1 a1)), (pow2heapp n1 n (Node gv0 c1 c2)), (pow2heapp n1 n (Node gv0 c1 c1)), (pow2heapp n1 n (smash a2 a2))
(pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 c2)), (pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 c2))
(pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c1 a2)), (pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n Leaf), (pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1))
(pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 c2)), (pow2heapp n1 n0 (Node n a1 c1)), (pow2heapp n1 n0 (Node n c2 a2)), (pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1)), (pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1))
(pow2heapp n1 n0 (Node n c1 c2)), (pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (Node n0 a2 a2)), (pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 c2)), (pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1))
(pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 c2)), (pow2heapp n1 n0 (Node n0 c2 c1)), (pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1))
(pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1)), (pow2heapp n1 n0 (Node n1 a1 a2)), (pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 c2)), (pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1))
(pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 c2)), (pow2heapp n1 n0 (Node n1 c1 c1)), (pow2heapp n1 n0 (Node gv0 a2 a2)), (pow2heapp n1 n0 (Node gv0 a2 a1)), (pow2heapp n1 n0 (Node gv0 a2 c2)), (pow2heapp n1 n0 (Node gv0 a2 c1)), (pow2heapp n1 n0 (Node gv0 a1 a2)), (pow2heapp n1 n0 (Node gv0 a1 a1))
(pow2heapp n1 n0 (Node gv0 a1 c2)), (pow2heapp n1 n0 (Node gv0 a1 c1)), (pow2heapp n1 n0 (Node gv0 c2 a2)), (pow2heapp n1 n0 (Node gv0 c2 a1)), (pow2heapp n1 n0 (Node gv0 c2 c2)), (pow2heapp n1 n0 (Node gv0 c2 c1)), (pow2heapp n1 n0 (Node gv0 c1 a2)), (pow2heapp n1 n0 (Node gv0 c1 a1)), (pow2heapp n1 n0 (Node gv0 c1 c2)), (pow2heapp n1 n0 (Node gv0 c1 c1))
(pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 c2)), (pow2heapp n1 n0 (smash a2 c1)), (pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1))
(pow2heapp n1 n0 (smash c2 c2)), (pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c1 a2)), (pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1)), (pow2heapp n1 n0 Leaf), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 c2))
(pow2heapp n1 n1 (Node n a2 c1)), (pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 c2)), (pow2heapp n1 n1 (Node n a1 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 c2)), (pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c1 a2))
(pow2heapp n1 n1 (Node n c1 a1)), (pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1)), (pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1)), (pow2heapp n1 n1 (Node n0 a1 c2))
(pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 c2)), (pow2heapp n1 n1 (Node n0 c2 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1)), (pow2heapp n1 n1 (Node n1 a2 a2))
(pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 c2)), (pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1)), (pow2heapp n1 n1 (Node n1 c2 c2))
(pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 c2)), (pow2heapp n1 n1 (Node n1 c1 c1)), (pow2heapp n1 n1 (Node gv0 a2 a2)), (pow2heapp n1 n1 (Node gv0 a2 a1)), (pow2heapp n1 n1 (Node gv0 a2 c2)), (pow2heapp n1 n1 (Node gv0 a2 c1)), (pow2heapp n1 n1 (Node gv0 a1 a2))
(pow2heapp n1 n1 (Node gv0 a1 a1)), (pow2heapp n1 n1 (Node gv0 a1 c2)), (pow2heapp n1 n1 (Node gv0 a1 c1)), (pow2heapp n1 n1 (Node gv0 c2 a2)), (pow2heapp n1 n1 (Node gv0 c2 a1)), (pow2heapp n1 n1 (Node gv0 c2 c2)), (pow2heapp n1 n1 (Node gv0 c2 c1)), (pow2heapp n1 n1 (Node gv0 c1 a2)), (pow2heapp n1 n1 (Node gv0 c1 a1)), (pow2heapp n1 n1 (Node gv0 c1 c2))
(pow2heapp n1 n1 (Node gv0 c1 c1)), (pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 c2)), (pow2heapp n1 n1 (smash a2 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1)), (pow2heapp n1 n1 (smash c2 a2))
(pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 c2)), (pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 gv0 (Node n a2 a2)), (pow2heapp n1 gv0 (Node n a2 a1))
(pow2heapp n1 gv0 (Node n a2 c2)), (pow2heapp n1 gv0 (Node n a2 c1)), (pow2heapp n1 gv0 (Node n a1 a2)), (pow2heapp n1 gv0 (Node n a1 a1)), (pow2heapp n1 gv0 (Node n a1 c2)), (pow2heapp n1 gv0 (Node n a1 c1)), (pow2heapp n1 gv0 (Node n c2 a2)), (pow2heapp n1 gv0 (Node n c2 a1)), (pow2heapp n1 gv0 (Node n c2 c2)), (pow2heapp n1 gv0 (Node n c2 c1))
(pow2heapp n1 gv0 (Node n c1 a2)), (pow2heapp n1 gv0 (Node n c1 a1)), (pow2heapp n1 gv0 (Node n c1 c2)), (pow2heapp n1 gv0 (Node n c1 c1)), (pow2heapp n1 gv0 (Node n0 a2 a2)), (pow2heapp n1 gv0 (Node n0 a2 a1)), (pow2heapp n1 gv0 (Node n0 a2 c2)), (pow2heapp n1 gv0 (Node n0 a2 c1)), (pow2heapp n1 gv0 (Node n0 a1 a2)), (pow2heapp n1 gv0 (Node n0 a1 a1))
(pow2heapp n1 gv0 (Node n0 a1 c2)), (pow2heapp n1 gv0 (Node n0 a1 c1)), (pow2heapp n1 gv0 (Node n0 c2 a2)), (pow2heapp n1 gv0 (Node n0 c2 a1)), (pow2heapp n1 gv0 (Node n0 c2 c2)), (pow2heapp n1 gv0 (Node n0 c2 c1)), (pow2heapp n1 gv0 (Node n0 c1 a2)), (pow2heapp n1 gv0 (Node n0 c1 a1)), (pow2heapp n1 gv0 (Node n0 c1 c2)), (pow2heapp n1 gv0 (Node n0 c1 c1))
(pow2heapp n1 gv0 (Node n1 a2 a2)), (pow2heapp n1 gv0 (Node n1 a2 a1)), (pow2heapp n1 gv0 (Node n1 a2 c2)), (pow2heapp n1 gv0 (Node n1 a2 c1)), (pow2heapp n1 gv0 (Node n1 a1 a2)), (pow2heapp n1 gv0 (Node n1 a1 a1)), (pow2heapp n1 gv0 (Node n1 a1 c2)), (pow2heapp n1 gv0 (Node n1 a1 c1)), (pow2heapp n1 gv0 (Node n1 c2 a2)), (pow2heapp n1 gv0 (Node n1 c2 a1))
(pow2heapp n1 gv0 (Node n1 c2 c2)), (pow2heapp n1 gv0 (Node n1 c2 c1)), (pow2heapp n1 gv0 (Node n1 c1 a2)), (pow2heapp n1 gv0 (Node n1 c1 a1)), (pow2heapp n1 gv0 (Node n1 c1 c2)), (pow2heapp n1 gv0 (Node n1 c1 c1)), (pow2heapp n1 gv0 (Node gv0 a2 a2)), (pow2heapp n1 gv0 (Node gv0 a2 a1)), (pow2heapp n1 gv0 (Node gv0 a2 c2)), (pow2heapp n1 gv0 (Node gv0 a2 c1))
(pow2heapp n1 gv0 (Node gv0 a1 a2)), (pow2heapp n1 gv0 (Node gv0 a1 a1)), (pow2heapp n1 gv0 (Node gv0 a1 c2)), (pow2heapp n1 gv0 (Node gv0 a1 c1)), (pow2heapp n1 gv0 (Node gv0 c2 a2)), (pow2heapp n1 gv0 (Node gv0 c2 a1)), (pow2heapp n1 gv0 (Node gv0 c2 c2)), (pow2heapp n1 gv0 (Node gv0 c2 c1)), (pow2heapp n1 gv0 (Node gv0 c1 a2)), (pow2heapp n1 gv0 (Node gv0 c1 a1))
(pow2heapp n1 gv0 (Node gv0 c1 c2)), (pow2heapp n1 gv0 (Node gv0 c1 c1)), (pow2heapp n1 gv0 (smash a2 a2)), (pow2heapp n1 gv0 (smash a2 a1)), (pow2heapp n1 gv0 (smash a2 c2)), (pow2heapp n1 gv0 (smash a2 c1)), (pow2heapp n1 gv0 (smash a1 a2)), (pow2heapp n1 gv0 (smash a1 a1)), (pow2heapp n1 gv0 (smash a1 c2)), (pow2heapp n1 gv0 (smash a1 c1))
(pow2heapp n1 gv0 (smash c2 a2)), (pow2heapp n1 gv0 (smash c2 a1)), (pow2heapp n1 gv0 (smash c2 c2)), (pow2heapp n1 gv0 (smash c2 c1)), (pow2heapp n1 gv0 (smash c1 a2)), (pow2heapp n1 gv0 (smash c1 a1)), (pow2heapp n1 gv0 (smash c1 c2)), (pow2heapp n1 gv0 (smash c1 c1)), (pow2heapp n1 gv0 Leaf), (pow2heapp n1 (find_max' n p) a2)
(pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1), (pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1)), (pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 c2))
(pow2heapp n1 (find_max' n p) (Node n a1 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1)), (pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a2))
(pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2))
(pow2heapp n1 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a2))
(pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2))
(pow2heapp n1 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n p) (Node gv0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node gv0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node gv0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node gv0 a2 c1)), (pow2heapp n1 (find_max' n p) (Node gv0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node gv0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node gv0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node gv0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node gv0 c2 a2))
(pow2heapp n1 (find_max' n p) (Node gv0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node gv0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node gv0 c2 c1)), (pow2heapp n1 (find_max' n p) (Node gv0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node gv0 c1 a1)), (pow2heapp n1 (find_max' n p) (Node gv0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node gv0 c1 c1)), (pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 c2))
(pow2heapp n1 (find_max' n p) (smash a2 c1)), (pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1)), (pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2))
(pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1)), (pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1))
(pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1))
(pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1))
(pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1))
(pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a2 c1))
(pow2heapp n1 (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c1 a1))
(pow2heapp n1 (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1)), (pow2heapp n1 (find_max' n0 p) (smash a1 a2)), (pow2heapp n1 (find_max' n0 p) (smash a1 a1)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1))
(pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2)), (pow2heapp n1 (find_max' n0 p) (smash c1 a1)), (pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n1 p) a2)
(pow2heapp n1 (find_max' n1 p) a1), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2))
(pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2))
(pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2))
(pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2))
(pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2))
(pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c2 a2))
(pow2heapp n1 (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2)), (pow2heapp n1 (find_max' n1 p) (smash a2 a1)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2))
(pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2)), (pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2))
(pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2)), (pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' gv0 p) a2), (pow2heapp n1 (find_max' gv0 p) a1), (pow2heapp n1 (find_max' gv0 p) c2), (pow2heapp n1 (find_max' gv0 p) c1), (pow2heapp n1 (find_max' gv0 p) (Node n a2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n a2 a1))
(pow2heapp n1 (find_max' gv0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n c2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n c2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n c2 c1))
(pow2heapp n1 (find_max' gv0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a1 a1))
(pow2heapp n1 (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n0 c1 c1))
(pow2heapp n1 (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c2 a1))
(pow2heapp n1 (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a2 c1))
(pow2heapp n1 (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c1 a1))
(pow2heapp n1 (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp n1 (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp n1 (find_max' gv0 p) (smash a2 a2)), (pow2heapp n1 (find_max' gv0 p) (smash a2 a1)), (pow2heapp n1 (find_max' gv0 p) (smash a2 c2)), (pow2heapp n1 (find_max' gv0 p) (smash a2 c1)), (pow2heapp n1 (find_max' gv0 p) (smash a1 a2)), (pow2heapp n1 (find_max' gv0 p) (smash a1 a1)), (pow2heapp n1 (find_max' gv0 p) (smash a1 c2)), (pow2heapp n1 (find_max' gv0 p) (smash a1 c1))
(pow2heapp n1 (find_max' gv0 p) (smash c2 a2)), (pow2heapp n1 (find_max' gv0 p) (smash c2 a1)), (pow2heapp n1 (find_max' gv0 p) (smash c2 c2)), (pow2heapp n1 (find_max' gv0 p) (smash c2 c1)), (pow2heapp n1 (find_max' gv0 p) (smash c1 a2)), (pow2heapp n1 (find_max' gv0 p) (smash c1 a1)), (pow2heapp n1 (find_max' gv0 p) (smash c1 c2)), (pow2heapp n1 (find_max' gv0 p) (smash c1 c1)), (pow2heapp n1 (find_max' gv0 p) Leaf), (pow2heapp n1 (length p) a2)
(pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 c2)), (pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 c2))
(pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 c2)), (pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c1 a2)), (pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 c2)), (pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (Node n0 a2 a2))
(pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 c2)), (pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2)), (pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 c2)), (pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 c2))
(pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 c2)), (pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 c2)), (pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2))
(pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 c2)), (pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2)), (pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 c2)), (pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 c2))
(pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node gv0 a2 a2)), (pow2heapp n1 (length p) (Node gv0 a2 a1)), (pow2heapp n1 (length p) (Node gv0 a2 c2)), (pow2heapp n1 (length p) (Node gv0 a2 c1)), (pow2heapp n1 (length p) (Node gv0 a1 a2)), (pow2heapp n1 (length p) (Node gv0 a1 a1)), (pow2heapp n1 (length p) (Node gv0 a1 c2)), (pow2heapp n1 (length p) (Node gv0 a1 c1)), (pow2heapp n1 (length p) (Node gv0 c2 a2))
(pow2heapp n1 (length p) (Node gv0 c2 a1)), (pow2heapp n1 (length p) (Node gv0 c2 c2)), (pow2heapp n1 (length p) (Node gv0 c2 c1)), (pow2heapp n1 (length p) (Node gv0 c1 a2)), (pow2heapp n1 (length p) (Node gv0 c1 a1)), (pow2heapp n1 (length p) (Node gv0 c1 c2)), (pow2heapp n1 (length p) (Node gv0 c1 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 c2))
(pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 c2)), (pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 c2)), (pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c1 a2))
(pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 c2)), (pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) Leaf), (pow2heapp gv0 n (Node n a2 a2)), (pow2heapp gv0 n (Node n a2 a1)), (pow2heapp gv0 n (Node n a2 c2)), (pow2heapp gv0 n (Node n a2 c1)), (pow2heapp gv0 n (Node n a1 a2)), (pow2heapp gv0 n (Node n a1 a1))
(pow2heapp gv0 n (Node n a1 c2)), (pow2heapp gv0 n (Node n a1 c1)), (pow2heapp gv0 n (Node n c2 a2)), (pow2heapp gv0 n (Node n c2 a1)), (pow2heapp gv0 n (Node n c2 c2)), (pow2heapp gv0 n (Node n c2 c1)), (pow2heapp gv0 n (Node n c1 a2)), (pow2heapp gv0 n (Node n c1 a1)), (pow2heapp gv0 n (Node n c1 c2)), (pow2heapp gv0 n (Node n c1 c1))
(pow2heapp gv0 n (Node n0 a2 a2)), (pow2heapp gv0 n (Node n0 a2 a1)), (pow2heapp gv0 n (Node n0 a2 c2)), (pow2heapp gv0 n (Node n0 a2 c1)), (pow2heapp gv0 n (Node n0 a1 a2)), (pow2heapp gv0 n (Node n0 a1 a1)), (pow2heapp gv0 n (Node n0 a1 c2)), (pow2heapp gv0 n (Node n0 a1 c1)), (pow2heapp gv0 n (Node n0 c2 a2)), (pow2heapp gv0 n (Node n0 c2 a1))
(pow2heapp gv0 n (Node n0 c2 c2)), (pow2heapp gv0 n (Node n0 c2 c1)), (pow2heapp gv0 n (Node n0 c1 a2)), (pow2heapp gv0 n (Node n0 c1 a1)), (pow2heapp gv0 n (Node n0 c1 c2)), (pow2heapp gv0 n (Node n0 c1 c1)), (pow2heapp gv0 n (Node n1 a2 a2)), (pow2heapp gv0 n (Node n1 a2 a1)), (pow2heapp gv0 n (Node n1 a2 c2)), (pow2heapp gv0 n (Node n1 a2 c1))
(pow2heapp gv0 n (Node n1 a1 a2)), (pow2heapp gv0 n (Node n1 a1 a1)), (pow2heapp gv0 n (Node n1 a1 c2)), (pow2heapp gv0 n (Node n1 a1 c1)), (pow2heapp gv0 n (Node n1 c2 a2)), (pow2heapp gv0 n (Node n1 c2 a1)), (pow2heapp gv0 n (Node n1 c2 c2)), (pow2heapp gv0 n (Node n1 c2 c1)), (pow2heapp gv0 n (Node n1 c1 a2)), (pow2heapp gv0 n (Node n1 c1 a1))
(pow2heapp gv0 n (Node n1 c1 c2)), (pow2heapp gv0 n (Node n1 c1 c1)), (pow2heapp gv0 n (Node gv0 a2 a2)), (pow2heapp gv0 n (Node gv0 a2 a1)), (pow2heapp gv0 n (Node gv0 a2 c2)), (pow2heapp gv0 n (Node gv0 a2 c1)), (pow2heapp gv0 n (Node gv0 a1 a2)), (pow2heapp gv0 n (Node gv0 a1 a1)), (pow2heapp gv0 n (Node gv0 a1 c2)), (pow2heapp gv0 n (Node gv0 a1 c1))
(pow2heapp gv0 n (Node gv0 c2 a2)), (pow2heapp gv0 n (Node gv0 c2 a1)), (pow2heapp gv0 n (Node gv0 c2 c2)), (pow2heapp gv0 n (Node gv0 c2 c1)), (pow2heapp gv0 n (Node gv0 c1 a2)), (pow2heapp gv0 n (Node gv0 c1 a1)), (pow2heapp gv0 n (Node gv0 c1 c2)), (pow2heapp gv0 n (Node gv0 c1 c1)), (pow2heapp gv0 n (smash a2 a2)), (pow2heapp gv0 n (smash a2 a1))
(pow2heapp gv0 n (smash a2 c2)), (pow2heapp gv0 n (smash a2 c1)), (pow2heapp gv0 n (smash a1 a2)), (pow2heapp gv0 n (smash a1 a1)), (pow2heapp gv0 n (smash a1 c2)), (pow2heapp gv0 n (smash a1 c1)), (pow2heapp gv0 n (smash c2 a2)), (pow2heapp gv0 n (smash c2 a1)), (pow2heapp gv0 n (smash c2 c2)), (pow2heapp gv0 n (smash c2 c1))
(pow2heapp gv0 n (smash c1 a2)), (pow2heapp gv0 n (smash c1 a1)), (pow2heapp gv0 n (smash c1 c2)), (pow2heapp gv0 n (smash c1 c1)), (pow2heapp gv0 n Leaf), (pow2heapp gv0 n0 (Node n a2 a2)), (pow2heapp gv0 n0 (Node n a2 a1)), (pow2heapp gv0 n0 (Node n a2 c2)), (pow2heapp gv0 n0 (Node n a2 c1)), (pow2heapp gv0 n0 (Node n a1 a2))
(pow2heapp gv0 n0 (Node n a1 a1)), (pow2heapp gv0 n0 (Node n a1 c2)), (pow2heapp gv0 n0 (Node n a1 c1)), (pow2heapp gv0 n0 (Node n c2 a2)), (pow2heapp gv0 n0 (Node n c2 a1)), (pow2heapp gv0 n0 (Node n c2 c2)), (pow2heapp gv0 n0 (Node n c2 c1)), (pow2heapp gv0 n0 (Node n c1 a2)), (pow2heapp gv0 n0 (Node n c1 a1)), (pow2heapp gv0 n0 (Node n c1 c2))
(pow2heapp gv0 n0 (Node n c1 c1)), (pow2heapp gv0 n0 (Node n0 a2 a2)), (pow2heapp gv0 n0 (Node n0 a2 a1)), (pow2heapp gv0 n0 (Node n0 a2 c2)), (pow2heapp gv0 n0 (Node n0 a2 c1)), (pow2heapp gv0 n0 (Node n0 a1 a2)), (pow2heapp gv0 n0 (Node n0 a1 a1)), (pow2heapp gv0 n0 (Node n0 a1 c2)), (pow2heapp gv0 n0 (Node n0 a1 c1)), (pow2heapp gv0 n0 (Node n0 c2 a2))
(pow2heapp gv0 n0 (Node n0 c2 a1)), (pow2heapp gv0 n0 (Node n0 c2 c2)), (pow2heapp gv0 n0 (Node n0 c2 c1)), (pow2heapp gv0 n0 (Node n0 c1 a2)), (pow2heapp gv0 n0 (Node n0 c1 a1)), (pow2heapp gv0 n0 (Node n0 c1 c2)), (pow2heapp gv0 n0 (Node n0 c1 c1)), (pow2heapp gv0 n0 (Node n1 a2 a2)), (pow2heapp gv0 n0 (Node n1 a2 a1)), (pow2heapp gv0 n0 (Node n1 a2 c2))
(pow2heapp gv0 n0 (Node n1 a2 c1)), (pow2heapp gv0 n0 (Node n1 a1 a2)), (pow2heapp gv0 n0 (Node n1 a1 a1)), (pow2heapp gv0 n0 (Node n1 a1 c2)), (pow2heapp gv0 n0 (Node n1 a1 c1)), (pow2heapp gv0 n0 (Node n1 c2 a2)), (pow2heapp gv0 n0 (Node n1 c2 a1)), (pow2heapp gv0 n0 (Node n1 c2 c2)), (pow2heapp gv0 n0 (Node n1 c2 c1)), (pow2heapp gv0 n0 (Node n1 c1 a2))
(pow2heapp gv0 n0 (Node n1 c1 a1)), (pow2heapp gv0 n0 (Node n1 c1 c2)), (pow2heapp gv0 n0 (Node n1 c1 c1)), (pow2heapp gv0 n0 (Node gv0 a2 a2)), (pow2heapp gv0 n0 (Node gv0 a2 a1)), (pow2heapp gv0 n0 (Node gv0 a2 c2)), (pow2heapp gv0 n0 (Node gv0 a2 c1)), (pow2heapp gv0 n0 (Node gv0 a1 a2)), (pow2heapp gv0 n0 (Node gv0 a1 a1)), (pow2heapp gv0 n0 (Node gv0 a1 c2))
(pow2heapp gv0 n0 (Node gv0 a1 c1)), (pow2heapp gv0 n0 (Node gv0 c2 a2)), (pow2heapp gv0 n0 (Node gv0 c2 a1)), (pow2heapp gv0 n0 (Node gv0 c2 c2)), (pow2heapp gv0 n0 (Node gv0 c2 c1)), (pow2heapp gv0 n0 (Node gv0 c1 a2)), (pow2heapp gv0 n0 (Node gv0 c1 a1)), (pow2heapp gv0 n0 (Node gv0 c1 c2)), (pow2heapp gv0 n0 (Node gv0 c1 c1)), (pow2heapp gv0 n0 (smash a2 a2))
(pow2heapp gv0 n0 (smash a2 a1)), (pow2heapp gv0 n0 (smash a2 c2)), (pow2heapp gv0 n0 (smash a2 c1)), (pow2heapp gv0 n0 (smash a1 a2)), (pow2heapp gv0 n0 (smash a1 a1)), (pow2heapp gv0 n0 (smash a1 c2)), (pow2heapp gv0 n0 (smash a1 c1)), (pow2heapp gv0 n0 (smash c2 a2)), (pow2heapp gv0 n0 (smash c2 a1)), (pow2heapp gv0 n0 (smash c2 c2))
(pow2heapp gv0 n0 (smash c2 c1)), (pow2heapp gv0 n0 (smash c1 a2)), (pow2heapp gv0 n0 (smash c1 a1)), (pow2heapp gv0 n0 (smash c1 c2)), (pow2heapp gv0 n0 (smash c1 c1)), (pow2heapp gv0 n0 Leaf), (pow2heapp gv0 n1 (Node n a2 a2)), (pow2heapp gv0 n1 (Node n a2 a1)), (pow2heapp gv0 n1 (Node n a2 c2)), (pow2heapp gv0 n1 (Node n a2 c1))
(pow2heapp gv0 n1 (Node n a1 a2)), (pow2heapp gv0 n1 (Node n a1 a1)), (pow2heapp gv0 n1 (Node n a1 c2)), (pow2heapp gv0 n1 (Node n a1 c1)), (pow2heapp gv0 n1 (Node n c2 a2)), (pow2heapp gv0 n1 (Node n c2 a1)), (pow2heapp gv0 n1 (Node n c2 c2)), (pow2heapp gv0 n1 (Node n c2 c1)), (pow2heapp gv0 n1 (Node n c1 a2)), (pow2heapp gv0 n1 (Node n c1 a1))
(pow2heapp gv0 n1 (Node n c1 c2)), (pow2heapp gv0 n1 (Node n c1 c1)), (pow2heapp gv0 n1 (Node n0 a2 a2)), (pow2heapp gv0 n1 (Node n0 a2 a1)), (pow2heapp gv0 n1 (Node n0 a2 c2)), (pow2heapp gv0 n1 (Node n0 a2 c1)), (pow2heapp gv0 n1 (Node n0 a1 a2)), (pow2heapp gv0 n1 (Node n0 a1 a1)), (pow2heapp gv0 n1 (Node n0 a1 c2)), (pow2heapp gv0 n1 (Node n0 a1 c1))
(pow2heapp gv0 n1 (Node n0 c2 a2)), (pow2heapp gv0 n1 (Node n0 c2 a1)), (pow2heapp gv0 n1 (Node n0 c2 c2)), (pow2heapp gv0 n1 (Node n0 c2 c1)), (pow2heapp gv0 n1 (Node n0 c1 a2)), (pow2heapp gv0 n1 (Node n0 c1 a1)), (pow2heapp gv0 n1 (Node n0 c1 c2)), (pow2heapp gv0 n1 (Node n0 c1 c1)), (pow2heapp gv0 n1 (Node n1 a2 a2)), (pow2heapp gv0 n1 (Node n1 a2 a1))
(pow2heapp gv0 n1 (Node n1 a2 c2)), (pow2heapp gv0 n1 (Node n1 a2 c1)), (pow2heapp gv0 n1 (Node n1 a1 a2)), (pow2heapp gv0 n1 (Node n1 a1 a1)), (pow2heapp gv0 n1 (Node n1 a1 c2)), (pow2heapp gv0 n1 (Node n1 a1 c1)), (pow2heapp gv0 n1 (Node n1 c2 a2)), (pow2heapp gv0 n1 (Node n1 c2 a1)), (pow2heapp gv0 n1 (Node n1 c2 c2)), (pow2heapp gv0 n1 (Node n1 c2 c1))
(pow2heapp gv0 n1 (Node n1 c1 a2)), (pow2heapp gv0 n1 (Node n1 c1 a1)), (pow2heapp gv0 n1 (Node n1 c1 c2)), (pow2heapp gv0 n1 (Node n1 c1 c1)), (pow2heapp gv0 n1 (Node gv0 a2 a2)), (pow2heapp gv0 n1 (Node gv0 a2 a1)), (pow2heapp gv0 n1 (Node gv0 a2 c2)), (pow2heapp gv0 n1 (Node gv0 a2 c1)), (pow2heapp gv0 n1 (Node gv0 a1 a2)), (pow2heapp gv0 n1 (Node gv0 a1 a1))
(pow2heapp gv0 n1 (Node gv0 a1 c2)), (pow2heapp gv0 n1 (Node gv0 a1 c1)), (pow2heapp gv0 n1 (Node gv0 c2 a2)), (pow2heapp gv0 n1 (Node gv0 c2 a1)), (pow2heapp gv0 n1 (Node gv0 c2 c2)), (pow2heapp gv0 n1 (Node gv0 c2 c1)), (pow2heapp gv0 n1 (Node gv0 c1 a2)), (pow2heapp gv0 n1 (Node gv0 c1 a1)), (pow2heapp gv0 n1 (Node gv0 c1 c2)), (pow2heapp gv0 n1 (Node gv0 c1 c1))
(pow2heapp gv0 n1 (smash a2 a2)), (pow2heapp gv0 n1 (smash a2 a1)), (pow2heapp gv0 n1 (smash a2 c2)), (pow2heapp gv0 n1 (smash a2 c1)), (pow2heapp gv0 n1 (smash a1 a2)), (pow2heapp gv0 n1 (smash a1 a1)), (pow2heapp gv0 n1 (smash a1 c2)), (pow2heapp gv0 n1 (smash a1 c1)), (pow2heapp gv0 n1 (smash c2 a2)), (pow2heapp gv0 n1 (smash c2 a1))
(pow2heapp gv0 n1 (smash c2 c2)), (pow2heapp gv0 n1 (smash c2 c1)), (pow2heapp gv0 n1 (smash c1 a2)), (pow2heapp gv0 n1 (smash c1 a1)), (pow2heapp gv0 n1 (smash c1 c2)), (pow2heapp gv0 n1 (smash c1 c1)), (pow2heapp gv0 n1 Leaf), (pow2heapp gv0 gv0 (Node n a2 a2)), (pow2heapp gv0 gv0 (Node n a2 a1)), (pow2heapp gv0 gv0 (Node n a2 c2))
(pow2heapp gv0 gv0 (Node n a2 c1)), (pow2heapp gv0 gv0 (Node n a1 a2)), (pow2heapp gv0 gv0 (Node n a1 a1)), (pow2heapp gv0 gv0 (Node n a1 c2)), (pow2heapp gv0 gv0 (Node n a1 c1)), (pow2heapp gv0 gv0 (Node n c2 a2)), (pow2heapp gv0 gv0 (Node n c2 a1)), (pow2heapp gv0 gv0 (Node n c2 c2)), (pow2heapp gv0 gv0 (Node n c2 c1)), (pow2heapp gv0 gv0 (Node n c1 a2))
(pow2heapp gv0 gv0 (Node n c1 a1)), (pow2heapp gv0 gv0 (Node n c1 c2)), (pow2heapp gv0 gv0 (Node n c1 c1)), (pow2heapp gv0 gv0 (Node n0 a2 a2)), (pow2heapp gv0 gv0 (Node n0 a2 a1)), (pow2heapp gv0 gv0 (Node n0 a2 c2)), (pow2heapp gv0 gv0 (Node n0 a2 c1)), (pow2heapp gv0 gv0 (Node n0 a1 a2)), (pow2heapp gv0 gv0 (Node n0 a1 a1)), (pow2heapp gv0 gv0 (Node n0 a1 c2))
(pow2heapp gv0 gv0 (Node n0 a1 c1)), (pow2heapp gv0 gv0 (Node n0 c2 a2)), (pow2heapp gv0 gv0 (Node n0 c2 a1)), (pow2heapp gv0 gv0 (Node n0 c2 c2)), (pow2heapp gv0 gv0 (Node n0 c2 c1)), (pow2heapp gv0 gv0 (Node n0 c1 a2)), (pow2heapp gv0 gv0 (Node n0 c1 a1)), (pow2heapp gv0 gv0 (Node n0 c1 c2)), (pow2heapp gv0 gv0 (Node n0 c1 c1)), (pow2heapp gv0 gv0 (Node n1 a2 a2))
(pow2heapp gv0 gv0 (Node n1 a2 a1)), (pow2heapp gv0 gv0 (Node n1 a2 c2)), (pow2heapp gv0 gv0 (Node n1 a2 c1)), (pow2heapp gv0 gv0 (Node n1 a1 a2)), (pow2heapp gv0 gv0 (Node n1 a1 a1)), (pow2heapp gv0 gv0 (Node n1 a1 c2)), (pow2heapp gv0 gv0 (Node n1 a1 c1)), (pow2heapp gv0 gv0 (Node n1 c2 a2)), (pow2heapp gv0 gv0 (Node n1 c2 a1)), (pow2heapp gv0 gv0 (Node n1 c2 c2))
(pow2heapp gv0 gv0 (Node n1 c2 c1)), (pow2heapp gv0 gv0 (Node n1 c1 a2)), (pow2heapp gv0 gv0 (Node n1 c1 a1)), (pow2heapp gv0 gv0 (Node n1 c1 c2)), (pow2heapp gv0 gv0 (Node n1 c1 c1)), (pow2heapp gv0 gv0 (Node gv0 a2 a2)), (pow2heapp gv0 gv0 (Node gv0 a2 a1)), (pow2heapp gv0 gv0 (Node gv0 a2 c2)), (pow2heapp gv0 gv0 (Node gv0 a2 c1)), (pow2heapp gv0 gv0 (Node gv0 a1 a2))
(pow2heapp gv0 gv0 (Node gv0 a1 a1)), (pow2heapp gv0 gv0 (Node gv0 a1 c2)), (pow2heapp gv0 gv0 (Node gv0 a1 c1)), (pow2heapp gv0 gv0 (Node gv0 c2 a2)), (pow2heapp gv0 gv0 (Node gv0 c2 a1)), (pow2heapp gv0 gv0 (Node gv0 c2 c2)), (pow2heapp gv0 gv0 (Node gv0 c2 c1)), (pow2heapp gv0 gv0 (Node gv0 c1 a2)), (pow2heapp gv0 gv0 (Node gv0 c1 a1)), (pow2heapp gv0 gv0 (Node gv0 c1 c2))
(pow2heapp gv0 gv0 (Node gv0 c1 c1)), (pow2heapp gv0 gv0 (smash a2 a2)), (pow2heapp gv0 gv0 (smash a2 a1)), (pow2heapp gv0 gv0 (smash a2 c2)), (pow2heapp gv0 gv0 (smash a2 c1)), (pow2heapp gv0 gv0 (smash a1 a2)), (pow2heapp gv0 gv0 (smash a1 a1)), (pow2heapp gv0 gv0 (smash a1 c2)), (pow2heapp gv0 gv0 (smash a1 c1)), (pow2heapp gv0 gv0 (smash c2 a2))
(pow2heapp gv0 gv0 (smash c2 a1)), (pow2heapp gv0 gv0 (smash c2 c2)), (pow2heapp gv0 gv0 (smash c2 c1)), (pow2heapp gv0 gv0 (smash c1 a2)), (pow2heapp gv0 gv0 (smash c1 a1)), (pow2heapp gv0 gv0 (smash c1 c2)), (pow2heapp gv0 gv0 (smash c1 c1)), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (find_max' n p) a2), (pow2heapp gv0 (find_max' n p) a1)
(pow2heapp gv0 (find_max' n p) c2), (pow2heapp gv0 (find_max' n p) c1), (pow2heapp gv0 (find_max' n p) (Node n a2 a2)), (pow2heapp gv0 (find_max' n p) (Node n a2 a1)), (pow2heapp gv0 (find_max' n p) (Node n a2 c2)), (pow2heapp gv0 (find_max' n p) (Node n a2 c1)), (pow2heapp gv0 (find_max' n p) (Node n a1 a2)), (pow2heapp gv0 (find_max' n p) (Node n a1 a1)), (pow2heapp gv0 (find_max' n p) (Node n a1 c2)), (pow2heapp gv0 (find_max' n p) (Node n a1 c1))
(pow2heapp gv0 (find_max' n p) (Node n c2 a2)), (pow2heapp gv0 (find_max' n p) (Node n c2 a1)), (pow2heapp gv0 (find_max' n p) (Node n c2 c2)), (pow2heapp gv0 (find_max' n p) (Node n c2 c1)), (pow2heapp gv0 (find_max' n p) (Node n c1 a2)), (pow2heapp gv0 (find_max' n p) (Node n c1 a1)), (pow2heapp gv0 (find_max' n p) (Node n c1 c2)), (pow2heapp gv0 (find_max' n p) (Node n c1 c1)), (pow2heapp gv0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp gv0 (find_max' n p) (Node n0 a2 a1))
(pow2heapp gv0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp gv0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp gv0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp gv0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp gv0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp gv0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp gv0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp gv0 (find_max' n p) (Node n0 c2 a1)), (pow2heapp gv0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp gv0 (find_max' n p) (Node n0 c2 c1))
(pow2heapp gv0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp gv0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp gv0 (find_max' n p) (Node n0 c1 c2)), (pow2heapp gv0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp gv0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp gv0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp gv0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp gv0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp gv0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp gv0 (find_max' n p) (Node n1 a1 a1))
(pow2heapp gv0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp gv0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp gv0 (find_max' n p) (Node n1 c2 a2)), (pow2heapp gv0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp gv0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp gv0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp gv0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp gv0 (find_max' n p) (Node n1 c1 a1)), (pow2heapp gv0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp gv0 (find_max' n p) (Node n1 c1 c1))
(pow2heapp gv0 (find_max' n p) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n p) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n p) (Node gv0 a2 c2)), (pow2heapp gv0 (find_max' n p) (Node gv0 a2 c1)), (pow2heapp gv0 (find_max' n p) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' n p) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n p) (Node gv0 a1 c2)), (pow2heapp gv0 (find_max' n p) (Node gv0 a1 c1)), (pow2heapp gv0 (find_max' n p) (Node gv0 c2 a2)), (pow2heapp gv0 (find_max' n p) (Node gv0 c2 a1))
(pow2heapp gv0 (find_max' n p) (Node gv0 c2 c2)), (pow2heapp gv0 (find_max' n p) (Node gv0 c2 c1)), (pow2heapp gv0 (find_max' n p) (Node gv0 c1 a2)), (pow2heapp gv0 (find_max' n p) (Node gv0 c1 a1)), (pow2heapp gv0 (find_max' n p) (Node gv0 c1 c2)), (pow2heapp gv0 (find_max' n p) (Node gv0 c1 c1)), (pow2heapp gv0 (find_max' n p) (smash a2 a2)), (pow2heapp gv0 (find_max' n p) (smash a2 a1)), (pow2heapp gv0 (find_max' n p) (smash a2 c2)), (pow2heapp gv0 (find_max' n p) (smash a2 c1))
(pow2heapp gv0 (find_max' n p) (smash a1 a2)), (pow2heapp gv0 (find_max' n p) (smash a1 a1)), (pow2heapp gv0 (find_max' n p) (smash a1 c2)), (pow2heapp gv0 (find_max' n p) (smash a1 c1)), (pow2heapp gv0 (find_max' n p) (smash c2 a2)), (pow2heapp gv0 (find_max' n p) (smash c2 a1)), (pow2heapp gv0 (find_max' n p) (smash c2 c2)), (pow2heapp gv0 (find_max' n p) (smash c2 c1)), (pow2heapp gv0 (find_max' n p) (smash c1 a2)), (pow2heapp gv0 (find_max' n p) (smash c1 a1))
(pow2heapp gv0 (find_max' n p) (smash c1 c2)), (pow2heapp gv0 (find_max' n p) (smash c1 c1)), (pow2heapp gv0 (find_max' n p) Leaf), (pow2heapp gv0 (find_max' n0 p) a2), (pow2heapp gv0 (find_max' n0 p) a1), (pow2heapp gv0 (find_max' n0 p) c2), (pow2heapp gv0 (find_max' n0 p) c1), (pow2heapp gv0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n a2 c2))
(pow2heapp gv0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n a1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n c2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n c1 a2))
(pow2heapp gv0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n c1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp gv0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp gv0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c2 c2))
(pow2heapp gv0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a1 a2))
(pow2heapp gv0 (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node gv0 c1 c2))
(pow2heapp gv0 (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp gv0 (find_max' n0 p) (smash a2 a2)), (pow2heapp gv0 (find_max' n0 p) (smash a2 a1)), (pow2heapp gv0 (find_max' n0 p) (smash a2 c2)), (pow2heapp gv0 (find_max' n0 p) (smash a2 c1)), (pow2heapp gv0 (find_max' n0 p) (smash a1 a2)), (pow2heapp gv0 (find_max' n0 p) (smash a1 a1)), (pow2heapp gv0 (find_max' n0 p) (smash a1 c2)), (pow2heapp gv0 (find_max' n0 p) (smash a1 c1)), (pow2heapp gv0 (find_max' n0 p) (smash c2 a2))
(pow2heapp gv0 (find_max' n0 p) (smash c2 a1)), (pow2heapp gv0 (find_max' n0 p) (smash c2 c2)), (pow2heapp gv0 (find_max' n0 p) (smash c2 c1)), (pow2heapp gv0 (find_max' n0 p) (smash c1 a2)), (pow2heapp gv0 (find_max' n0 p) (smash c1 a1)), (pow2heapp gv0 (find_max' n0 p) (smash c1 c2)), (pow2heapp gv0 (find_max' n0 p) (smash c1 c1)), (pow2heapp gv0 (find_max' n0 p) Leaf), (pow2heapp gv0 (find_max' n1 p) a2), (pow2heapp gv0 (find_max' n1 p) a1)
(pow2heapp gv0 (find_max' n1 p) c2), (pow2heapp gv0 (find_max' n1 p) c1), (pow2heapp gv0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n a2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n a2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n a1 c1))
(pow2heapp gv0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n c2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp gv0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp gv0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp gv0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp gv0 (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c2 a1))
(pow2heapp gv0 (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp gv0 (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp gv0 (find_max' n1 p) (smash a2 a2)), (pow2heapp gv0 (find_max' n1 p) (smash a2 a1)), (pow2heapp gv0 (find_max' n1 p) (smash a2 c2)), (pow2heapp gv0 (find_max' n1 p) (smash a2 c1))
(pow2heapp gv0 (find_max' n1 p) (smash a1 a2)), (pow2heapp gv0 (find_max' n1 p) (smash a1 a1)), (pow2heapp gv0 (find_max' n1 p) (smash a1 c2)), (pow2heapp gv0 (find_max' n1 p) (smash a1 c1)), (pow2heapp gv0 (find_max' n1 p) (smash c2 a2)), (pow2heapp gv0 (find_max' n1 p) (smash c2 a1)), (pow2heapp gv0 (find_max' n1 p) (smash c2 c2)), (pow2heapp gv0 (find_max' n1 p) (smash c2 c1)), (pow2heapp gv0 (find_max' n1 p) (smash c1 a2)), (pow2heapp gv0 (find_max' n1 p) (smash c1 a1))
(pow2heapp gv0 (find_max' n1 p) (smash c1 c2)), (pow2heapp gv0 (find_max' n1 p) (smash c1 c1)), (pow2heapp gv0 (find_max' n1 p) Leaf), (pow2heapp gv0 (find_max' gv0 p) a2), (pow2heapp gv0 (find_max' gv0 p) a1), (pow2heapp gv0 (find_max' gv0 p) c2), (pow2heapp gv0 (find_max' gv0 p) c1), (pow2heapp gv0 (find_max' gv0 p) (Node n a2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n a2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n a2 c2))
(pow2heapp gv0 (find_max' gv0 p) (Node n a2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n a1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n a1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n a1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n a1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n c2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n c2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n c2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n c2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n c1 a2))
(pow2heapp gv0 (find_max' gv0 p) (Node n c1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n c1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n c1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 a1 c2))
(pow2heapp gv0 (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a2 a2))
(pow2heapp gv0 (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c2 c2))
(pow2heapp gv0 (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a1 a2))
(pow2heapp gv0 (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp gv0 (find_max' gv0 p) (Node gv0 c1 c2))
(pow2heapp gv0 (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp gv0 (find_max' gv0 p) (smash a2 a2)), (pow2heapp gv0 (find_max' gv0 p) (smash a2 a1)), (pow2heapp gv0 (find_max' gv0 p) (smash a2 c2)), (pow2heapp gv0 (find_max' gv0 p) (smash a2 c1)), (pow2heapp gv0 (find_max' gv0 p) (smash a1 a2)), (pow2heapp gv0 (find_max' gv0 p) (smash a1 a1)), (pow2heapp gv0 (find_max' gv0 p) (smash a1 c2)), (pow2heapp gv0 (find_max' gv0 p) (smash a1 c1)), (pow2heapp gv0 (find_max' gv0 p) (smash c2 a2))
(pow2heapp gv0 (find_max' gv0 p) (smash c2 a1)), (pow2heapp gv0 (find_max' gv0 p) (smash c2 c2)), (pow2heapp gv0 (find_max' gv0 p) (smash c2 c1)), (pow2heapp gv0 (find_max' gv0 p) (smash c1 a2)), (pow2heapp gv0 (find_max' gv0 p) (smash c1 a1)), (pow2heapp gv0 (find_max' gv0 p) (smash c1 c2)), (pow2heapp gv0 (find_max' gv0 p) (smash c1 c1)), (pow2heapp gv0 (find_max' gv0 p) Leaf), (pow2heapp gv0 (length p) a2), (pow2heapp gv0 (length p) a1)
(pow2heapp gv0 (length p) c2), (pow2heapp gv0 (length p) c1), (pow2heapp gv0 (length p) (Node n a2 a2)), (pow2heapp gv0 (length p) (Node n a2 a1)), (pow2heapp gv0 (length p) (Node n a2 c2)), (pow2heapp gv0 (length p) (Node n a2 c1)), (pow2heapp gv0 (length p) (Node n a1 a2)), (pow2heapp gv0 (length p) (Node n a1 a1)), (pow2heapp gv0 (length p) (Node n a1 c2)), (pow2heapp gv0 (length p) (Node n a1 c1))
(pow2heapp gv0 (length p) (Node n c2 a2)), (pow2heapp gv0 (length p) (Node n c2 a1)), (pow2heapp gv0 (length p) (Node n c2 c2)), (pow2heapp gv0 (length p) (Node n c2 c1)), (pow2heapp gv0 (length p) (Node n c1 a2)), (pow2heapp gv0 (length p) (Node n c1 a1)), (pow2heapp gv0 (length p) (Node n c1 c2)), (pow2heapp gv0 (length p) (Node n c1 c1)), (pow2heapp gv0 (length p) (Node n0 a2 a2)), (pow2heapp gv0 (length p) (Node n0 a2 a1))
(pow2heapp gv0 (length p) (Node n0 a2 c2)), (pow2heapp gv0 (length p) (Node n0 a2 c1)), (pow2heapp gv0 (length p) (Node n0 a1 a2)), (pow2heapp gv0 (length p) (Node n0 a1 a1)), (pow2heapp gv0 (length p) (Node n0 a1 c2)), (pow2heapp gv0 (length p) (Node n0 a1 c1)), (pow2heapp gv0 (length p) (Node n0 c2 a2)), (pow2heapp gv0 (length p) (Node n0 c2 a1)), (pow2heapp gv0 (length p) (Node n0 c2 c2)), (pow2heapp gv0 (length p) (Node n0 c2 c1))
(pow2heapp gv0 (length p) (Node n0 c1 a2)), (pow2heapp gv0 (length p) (Node n0 c1 a1)), (pow2heapp gv0 (length p) (Node n0 c1 c2)), (pow2heapp gv0 (length p) (Node n0 c1 c1)), (pow2heapp gv0 (length p) (Node n1 a2 a2)), (pow2heapp gv0 (length p) (Node n1 a2 a1)), (pow2heapp gv0 (length p) (Node n1 a2 c2)), (pow2heapp gv0 (length p) (Node n1 a2 c1)), (pow2heapp gv0 (length p) (Node n1 a1 a2)), (pow2heapp gv0 (length p) (Node n1 a1 a1))
(pow2heapp gv0 (length p) (Node n1 a1 c2)), (pow2heapp gv0 (length p) (Node n1 a1 c1)), (pow2heapp gv0 (length p) (Node n1 c2 a2)), (pow2heapp gv0 (length p) (Node n1 c2 a1)), (pow2heapp gv0 (length p) (Node n1 c2 c2)), (pow2heapp gv0 (length p) (Node n1 c2 c1)), (pow2heapp gv0 (length p) (Node n1 c1 a2)), (pow2heapp gv0 (length p) (Node n1 c1 a1)), (pow2heapp gv0 (length p) (Node n1 c1 c2)), (pow2heapp gv0 (length p) (Node n1 c1 c1))
(pow2heapp gv0 (length p) (Node gv0 a2 a2)), (pow2heapp gv0 (length p) (Node gv0 a2 a1)), (pow2heapp gv0 (length p) (Node gv0 a2 c2)), (pow2heapp gv0 (length p) (Node gv0 a2 c1)), (pow2heapp gv0 (length p) (Node gv0 a1 a2)), (pow2heapp gv0 (length p) (Node gv0 a1 a1)), (pow2heapp gv0 (length p) (Node gv0 a1 c2)), (pow2heapp gv0 (length p) (Node gv0 a1 c1)), (pow2heapp gv0 (length p) (Node gv0 c2 a2)), (pow2heapp gv0 (length p) (Node gv0 c2 a1))
(pow2heapp gv0 (length p) (Node gv0 c2 c2)), (pow2heapp gv0 (length p) (Node gv0 c2 c1)), (pow2heapp gv0 (length p) (Node gv0 c1 a2)), (pow2heapp gv0 (length p) (Node gv0 c1 a1)), (pow2heapp gv0 (length p) (Node gv0 c1 c2)), (pow2heapp gv0 (length p) (Node gv0 c1 c1)), (pow2heapp gv0 (length p) (smash a2 a2)), (pow2heapp gv0 (length p) (smash a2 a1)), (pow2heapp gv0 (length p) (smash a2 c2)), (pow2heapp gv0 (length p) (smash a2 c1))
(pow2heapp gv0 (length p) (smash a1 a2)), (pow2heapp gv0 (length p) (smash a1 a1)), (pow2heapp gv0 (length p) (smash a1 c2)), (pow2heapp gv0 (length p) (smash a1 c1)), (pow2heapp gv0 (length p) (smash c2 a2)), (pow2heapp gv0 (length p) (smash c2 a1)), (pow2heapp gv0 (length p) (smash c2 c2)), (pow2heapp gv0 (length p) (smash c2 c1)), (pow2heapp gv0 (length p) (smash c1 a2)), (pow2heapp gv0 (length p) (smash c1 a1))
(pow2heapp gv0 (length p) (smash c1 c2)), (pow2heapp gv0 (length p) (smash c1 c1)), (pow2heapp gv0 (length p) Leaf), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 c2))
(pow2heapp (find_max' n p) n (Node n a2 c1)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n c2 a2)), (pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2))
(pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1)), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 c2))
(pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 c2)), (pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1)), (pow2heapp (find_max' n p) n (Node n1 a2 a2))
(pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2)), (pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 c2))
(pow2heapp (find_max' n p) n (Node n1 c2 c1)), (pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 c2)), (pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node gv0 a2 a2)), (pow2heapp (find_max' n p) n (Node gv0 a2 a1)), (pow2heapp (find_max' n p) n (Node gv0 a2 c2)), (pow2heapp (find_max' n p) n (Node gv0 a2 c1)), (pow2heapp (find_max' n p) n (Node gv0 a1 a2))
(pow2heapp (find_max' n p) n (Node gv0 a1 a1)), (pow2heapp (find_max' n p) n (Node gv0 a1 c2)), (pow2heapp (find_max' n p) n (Node gv0 a1 c1)), (pow2heapp (find_max' n p) n (Node gv0 c2 a2)), (pow2heapp (find_max' n p) n (Node gv0 c2 a1)), (pow2heapp (find_max' n p) n (Node gv0 c2 c2)), (pow2heapp (find_max' n p) n (Node gv0 c2 c1)), (pow2heapp (find_max' n p) n (Node gv0 c1 a2)), (pow2heapp (find_max' n p) n (Node gv0 c1 a1)), (pow2heapp (find_max' n p) n (Node gv0 c1 c2))
(pow2heapp (find_max' n p) n (Node gv0 c1 c1)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 c2)), (pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1)), (pow2heapp (find_max' n p) n (smash c2 a2))
(pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1)), (pow2heapp (find_max' n p) n (smash c1 a2)), (pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1)
(pow2heapp (find_max' n p) n0 c2), (pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 c2)), (pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 c2)), (pow2heapp (find_max' n p) n0 (Node n a1 c1))
(pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1)), (pow2heapp (find_max' n p) n0 (Node n c2 c2)), (pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1))
(pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1))
(pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1))
(pow2heapp (find_max' n p) n0 (Node gv0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node gv0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node gv0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node gv0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node gv0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node gv0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node gv0 a1 c2)), (pow2heapp (find_max' n p) n0 (Node gv0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node gv0 c2 a2)), (pow2heapp (find_max' n p) n0 (Node gv0 c2 a1))
(pow2heapp (find_max' n p) n0 (Node gv0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node gv0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node gv0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node gv0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node gv0 c1 c2)), (pow2heapp (find_max' n p) n0 (Node gv0 c1 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1))
(pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 c2)), (pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 c2)), (pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1))
(pow2heapp (find_max' n p) n0 (smash c1 c2)), (pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 Leaf), (pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1), (pow2heapp (find_max' n p) n1 (Node n a2 a2)), (pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 c2))
(pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1)), (pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c1 a2))
(pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2))
(pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2))
(pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2))
(pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n1 (Node gv0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node gv0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node gv0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node gv0 a2 c1)), (pow2heapp (find_max' n p) n1 (Node gv0 a1 a2))
(pow2heapp (find_max' n p) n1 (Node gv0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node gv0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node gv0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node gv0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node gv0 c2 a1)), (pow2heapp (find_max' n p) n1 (Node gv0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node gv0 c2 c1)), (pow2heapp (find_max' n p) n1 (Node gv0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node gv0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node gv0 c1 c2))
(pow2heapp (find_max' n p) n1 (Node gv0 c1 c1)), (pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1)), (pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2)), (pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash c2 a2))
(pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1)), (pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 Leaf), (pow2heapp (find_max' n p) gv0 a2), (pow2heapp (find_max' n p) gv0 a1)
(pow2heapp (find_max' n p) gv0 c2), (pow2heapp (find_max' n p) gv0 c1), (pow2heapp (find_max' n p) gv0 (Node n a2 a2)), (pow2heapp (find_max' n p) gv0 (Node n a2 a1)), (pow2heapp (find_max' n p) gv0 (Node n a2 c2)), (pow2heapp (find_max' n p) gv0 (Node n a2 c1)), (pow2heapp (find_max' n p) gv0 (Node n a1 a2)), (pow2heapp (find_max' n p) gv0 (Node n a1 a1)), (pow2heapp (find_max' n p) gv0 (Node n a1 c2)), (pow2heapp (find_max' n p) gv0 (Node n a1 c1))
(pow2heapp (find_max' n p) gv0 (Node n c2 a2)), (pow2heapp (find_max' n p) gv0 (Node n c2 a1)), (pow2heapp (find_max' n p) gv0 (Node n c2 c2)), (pow2heapp (find_max' n p) gv0 (Node n c2 c1)), (pow2heapp (find_max' n p) gv0 (Node n c1 a2)), (pow2heapp (find_max' n p) gv0 (Node n c1 a1)), (pow2heapp (find_max' n p) gv0 (Node n c1 c2)), (pow2heapp (find_max' n p) gv0 (Node n c1 c1)), (pow2heapp (find_max' n p) gv0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) gv0 (Node n0 a2 a1))
(pow2heapp (find_max' n p) gv0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) gv0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) gv0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) gv0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) gv0 (Node n0 a1 c2)), (pow2heapp (find_max' n p) gv0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) gv0 (Node n0 c2 a2)), (pow2heapp (find_max' n p) gv0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) gv0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) gv0 (Node n0 c2 c1))
(pow2heapp (find_max' n p) gv0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) gv0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) gv0 (Node n0 c1 c2)), (pow2heapp (find_max' n p) gv0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) gv0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) gv0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) gv0 (Node n1 a2 c2)), (pow2heapp (find_max' n p) gv0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) gv0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) gv0 (Node n1 a1 a1))
(pow2heapp (find_max' n p) gv0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) gv0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) gv0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) gv0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) gv0 (Node n1 c2 c2)), (pow2heapp (find_max' n p) gv0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) gv0 (Node n1 c1 a2)), (pow2heapp (find_max' n p) gv0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) gv0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) gv0 (Node n1 c1 c1))
(pow2heapp (find_max' n p) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n p) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n p) gv0 (Node gv0 a2 c2)), (pow2heapp (find_max' n p) gv0 (Node gv0 a2 c1)), (pow2heapp (find_max' n p) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' n p) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n p) gv0 (Node gv0 a1 c2)), (pow2heapp (find_max' n p) gv0 (Node gv0 a1 c1)), (pow2heapp (find_max' n p) gv0 (Node gv0 c2 a2)), (pow2heapp (find_max' n p) gv0 (Node gv0 c2 a1))
(pow2heapp (find_max' n p) gv0 (Node gv0 c2 c2)), (pow2heapp (find_max' n p) gv0 (Node gv0 c2 c1)), (pow2heapp (find_max' n p) gv0 (Node gv0 c1 a2)), (pow2heapp (find_max' n p) gv0 (Node gv0 c1 a1)), (pow2heapp (find_max' n p) gv0 (Node gv0 c1 c2)), (pow2heapp (find_max' n p) gv0 (Node gv0 c1 c1)), (pow2heapp (find_max' n p) gv0 (smash a2 a2)), (pow2heapp (find_max' n p) gv0 (smash a2 a1)), (pow2heapp (find_max' n p) gv0 (smash a2 c2)), (pow2heapp (find_max' n p) gv0 (smash a2 c1))
(pow2heapp (find_max' n p) gv0 (smash a1 a2)), (pow2heapp (find_max' n p) gv0 (smash a1 a1)), (pow2heapp (find_max' n p) gv0 (smash a1 c2)), (pow2heapp (find_max' n p) gv0 (smash a1 c1)), (pow2heapp (find_max' n p) gv0 (smash c2 a2)), (pow2heapp (find_max' n p) gv0 (smash c2 a1)), (pow2heapp (find_max' n p) gv0 (smash c2 c2)), (pow2heapp (find_max' n p) gv0 (smash c2 c1)), (pow2heapp (find_max' n p) gv0 (smash c1 a2)), (pow2heapp (find_max' n p) gv0 (smash c1 a1))
(pow2heapp (find_max' n p) gv0 (smash c1 c2)), (pow2heapp (find_max' n p) gv0 (smash c1 c1)), (pow2heapp (find_max' n p) gv0 Leaf), (pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c1 c2))
(pow2heapp (find_max' n p) (find_max' n p) (Node gv0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2))
(pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1)
(pow2heapp (find_max' n p) (find_max' n0 p) c2), (pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c2 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c1 c2))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' gv0 p) a2), (pow2heapp (find_max' n p) (find_max' gv0 p) a1)
(pow2heapp (find_max' n p) (find_max' gv0 p) c2), (pow2heapp (find_max' n p) (find_max' gv0 p) c1), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n a1 c1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c2 a1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c1 a1))
(pow2heapp (find_max' n p) (find_max' gv0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' gv0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' gv0 p) Leaf), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2))
(pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2))
(pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node gv0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node gv0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node gv0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node gv0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node gv0 a1 a2))
(pow2heapp (find_max' n p) (length p) (Node gv0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node gv0 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node gv0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node gv0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node gv0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node gv0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node gv0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node gv0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node gv0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node gv0 c1 c2))
(pow2heapp (find_max' n p) (length p) (Node gv0 c1 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 c2)), (pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2))
(pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 c2)), (pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) Leaf), (pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1)
(pow2heapp (find_max' n0 p) n c2), (pow2heapp (find_max' n0 p) n c1), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 c2)), (pow2heapp (find_max' n0 p) n (Node n a1 c1))
(pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 c2)), (pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 c2)), (pow2heapp (find_max' n0 p) n (Node n c1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) n (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) n (Node gv0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) n (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node gv0 c2 a1))
(pow2heapp (find_max' n0 p) n (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) n (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node gv0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 c2)), (pow2heapp (find_max' n0 p) n (smash a2 c1))
(pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash c2 a2)), (pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1))
(pow2heapp (find_max' n0 p) n (smash c1 c2)), (pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node gv0 c1 c2))
(pow2heapp (find_max' n0 p) n0 (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2)), (pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2)), (pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2))
(pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2)), (pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1)
(pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1))
(pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) n1 (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c2 a1))
(pow2heapp (find_max' n0 p) n1 (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1))
(pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1)), (pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1)), (pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1))
(pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) gv0 a2), (pow2heapp (find_max' n0 p) gv0 a1), (pow2heapp (find_max' n0 p) gv0 c2), (pow2heapp (find_max' n0 p) gv0 c1), (pow2heapp (find_max' n0 p) gv0 (Node n a2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n a2 c2))
(pow2heapp (find_max' n0 p) gv0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n c2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n c1 a2))
(pow2heapp (find_max' n0 p) gv0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) gv0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) gv0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) gv0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a1 a2))
(pow2heapp (find_max' n0 p) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c2 a1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) gv0 (Node gv0 c1 c2))
(pow2heapp (find_max' n0 p) gv0 (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) gv0 (smash a2 a2)), (pow2heapp (find_max' n0 p) gv0 (smash a2 a1)), (pow2heapp (find_max' n0 p) gv0 (smash a2 c2)), (pow2heapp (find_max' n0 p) gv0 (smash a2 c1)), (pow2heapp (find_max' n0 p) gv0 (smash a1 a2)), (pow2heapp (find_max' n0 p) gv0 (smash a1 a1)), (pow2heapp (find_max' n0 p) gv0 (smash a1 c2)), (pow2heapp (find_max' n0 p) gv0 (smash a1 c1)), (pow2heapp (find_max' n0 p) gv0 (smash c2 a2))
(pow2heapp (find_max' n0 p) gv0 (smash c2 a1)), (pow2heapp (find_max' n0 p) gv0 (smash c2 c2)), (pow2heapp (find_max' n0 p) gv0 (smash c2 c1)), (pow2heapp (find_max' n0 p) gv0 (smash c1 a2)), (pow2heapp (find_max' n0 p) gv0 (smash c1 a1)), (pow2heapp (find_max' n0 p) gv0 (smash c1 c2)), (pow2heapp (find_max' n0 p) gv0 (smash c1 c1)), (pow2heapp (find_max' n0 p) gv0 Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1)
(pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a1 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c1 c2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1)
(pow2heapp (find_max' n0 p) (find_max' n1 p) c2), (pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' gv0 p) a2), (pow2heapp (find_max' n0 p) (find_max' gv0 p) a1), (pow2heapp (find_max' n0 p) (find_max' gv0 p) c2), (pow2heapp (find_max' n0 p) (find_max' gv0 p) c1), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a2 c2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c1 a2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a1 a2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c1 c2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c2 a2))
(pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' gv0 p) Leaf), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1)
(pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) (length p) (Node gv0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c2 a1))
(pow2heapp (find_max' n0 p) (length p) (Node gv0 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node gv0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c1))
(pow2heapp (find_max' n0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a1))
(pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1)), (pow2heapp (find_max' n1 p) n (Node n a2 c2))
(pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1)), (pow2heapp (find_max' n1 p) n (Node n c1 a2))
(pow2heapp (find_max' n1 p) n (Node n c1 a1)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) n (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) n (Node gv0 a1 a2))
(pow2heapp (find_max' n1 p) n (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node gv0 c2 a1)), (pow2heapp (find_max' n1 p) n (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) n (Node gv0 c1 c2))
(pow2heapp (find_max' n1 p) n (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1)), (pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2))
(pow2heapp (find_max' n1 p) n (smash c2 a1)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1)), (pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1)
(pow2heapp (find_max' n1 p) n0 c2), (pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c1))
(pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) n0 (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c2 a1))
(pow2heapp (find_max' n1 p) n0 (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 c2)), (pow2heapp (find_max' n1 p) n0 (smash a2 c1))
(pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1))
(pow2heapp (find_max' n1 p) n0 (smash c1 c2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2))
(pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a1 a2))
(pow2heapp (find_max' n1 p) n1 (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node gv0 c1 c2))
(pow2heapp (find_max' n1 p) n1 (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2)), (pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 c2)), (pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2))
(pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2)), (pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 Leaf), (pow2heapp (find_max' n1 p) gv0 a2), (pow2heapp (find_max' n1 p) gv0 a1)
(pow2heapp (find_max' n1 p) gv0 c2), (pow2heapp (find_max' n1 p) gv0 c1), (pow2heapp (find_max' n1 p) gv0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n a1 c1))
(pow2heapp (find_max' n1 p) gv0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n c2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) gv0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) gv0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) gv0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c2 a1))
(pow2heapp (find_max' n1 p) gv0 (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c1 c2)), (pow2heapp (find_max' n1 p) gv0 (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) gv0 (smash a2 a2)), (pow2heapp (find_max' n1 p) gv0 (smash a2 a1)), (pow2heapp (find_max' n1 p) gv0 (smash a2 c2)), (pow2heapp (find_max' n1 p) gv0 (smash a2 c1))
(pow2heapp (find_max' n1 p) gv0 (smash a1 a2)), (pow2heapp (find_max' n1 p) gv0 (smash a1 a1)), (pow2heapp (find_max' n1 p) gv0 (smash a1 c2)), (pow2heapp (find_max' n1 p) gv0 (smash a1 c1)), (pow2heapp (find_max' n1 p) gv0 (smash c2 a2)), (pow2heapp (find_max' n1 p) gv0 (smash c2 a1)), (pow2heapp (find_max' n1 p) gv0 (smash c2 c2)), (pow2heapp (find_max' n1 p) gv0 (smash c2 c1)), (pow2heapp (find_max' n1 p) gv0 (smash c1 a2)), (pow2heapp (find_max' n1 p) gv0 (smash c1 a1))
(pow2heapp (find_max' n1 p) gv0 (smash c1 c2)), (pow2heapp (find_max' n1 p) gv0 (smash c1 c1)), (pow2heapp (find_max' n1 p) gv0 Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) a2), (pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) c2), (pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1)
(pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c2 a1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' gv0 p) a2), (pow2heapp (find_max' n1 p) (find_max' gv0 p) a1)
(pow2heapp (find_max' n1 p) (find_max' gv0 p) c2), (pow2heapp (find_max' n1 p) (find_max' gv0 p) c1), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n a1 c1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c2 a1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a2 c1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c1 a1))
(pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' gv0 p) Leaf), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1), (pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2))
(pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a1 a2))
(pow2heapp (find_max' n1 p) (length p) (Node gv0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node gv0 c1 c2))
(pow2heapp (find_max' n1 p) (length p) (Node gv0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2))
(pow2heapp (find_max' n1 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' gv0 p) n a2), (pow2heapp (find_max' gv0 p) n a1)
(pow2heapp (find_max' gv0 p) n c2), (pow2heapp (find_max' gv0 p) n c1), (pow2heapp (find_max' gv0 p) n (Node n a2 a2)), (pow2heapp (find_max' gv0 p) n (Node n a2 a1)), (pow2heapp (find_max' gv0 p) n (Node n a2 c2)), (pow2heapp (find_max' gv0 p) n (Node n a2 c1)), (pow2heapp (find_max' gv0 p) n (Node n a1 a2)), (pow2heapp (find_max' gv0 p) n (Node n a1 a1)), (pow2heapp (find_max' gv0 p) n (Node n a1 c2)), (pow2heapp (find_max' gv0 p) n (Node n a1 c1))
(pow2heapp (find_max' gv0 p) n (Node n c2 a2)), (pow2heapp (find_max' gv0 p) n (Node n c2 a1)), (pow2heapp (find_max' gv0 p) n (Node n c2 c2)), (pow2heapp (find_max' gv0 p) n (Node n c2 c1)), (pow2heapp (find_max' gv0 p) n (Node n c1 a2)), (pow2heapp (find_max' gv0 p) n (Node n c1 a1)), (pow2heapp (find_max' gv0 p) n (Node n c1 c2)), (pow2heapp (find_max' gv0 p) n (Node n c1 c1)), (pow2heapp (find_max' gv0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) n (Node n0 a2 a1))
(pow2heapp (find_max' gv0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) n (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) n (Node n0 a1 c2)), (pow2heapp (find_max' gv0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) n (Node n0 c2 c1))
(pow2heapp (find_max' gv0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) n (Node n1 a2 a2)), (pow2heapp (find_max' gv0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) n (Node n1 a1 a1))
(pow2heapp (find_max' gv0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) n (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) n (Node n1 c2 c2)), (pow2heapp (find_max' gv0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) n (Node n1 c1 c1))
(pow2heapp (find_max' gv0 p) n (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) n (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) n (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) n (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) n (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 p) n (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) n (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) n (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) n (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) n (Node gv0 c2 a1))
(pow2heapp (find_max' gv0 p) n (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) n (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) n (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) n (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) n (Node gv0 c1 c2)), (pow2heapp (find_max' gv0 p) n (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) n (smash a2 a2)), (pow2heapp (find_max' gv0 p) n (smash a2 a1)), (pow2heapp (find_max' gv0 p) n (smash a2 c2)), (pow2heapp (find_max' gv0 p) n (smash a2 c1))
(pow2heapp (find_max' gv0 p) n (smash a1 a2)), (pow2heapp (find_max' gv0 p) n (smash a1 a1)), (pow2heapp (find_max' gv0 p) n (smash a1 c2)), (pow2heapp (find_max' gv0 p) n (smash a1 c1)), (pow2heapp (find_max' gv0 p) n (smash c2 a2)), (pow2heapp (find_max' gv0 p) n (smash c2 a1)), (pow2heapp (find_max' gv0 p) n (smash c2 c2)), (pow2heapp (find_max' gv0 p) n (smash c2 c1)), (pow2heapp (find_max' gv0 p) n (smash c1 a2)), (pow2heapp (find_max' gv0 p) n (smash c1 a1))
(pow2heapp (find_max' gv0 p) n (smash c1 c2)), (pow2heapp (find_max' gv0 p) n (smash c1 c1)), (pow2heapp (find_max' gv0 p) n Leaf), (pow2heapp (find_max' gv0 p) n0 a2), (pow2heapp (find_max' gv0 p) n0 a1), (pow2heapp (find_max' gv0 p) n0 c2), (pow2heapp (find_max' gv0 p) n0 c1), (pow2heapp (find_max' gv0 p) n0 (Node n a2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n a2 c2))
(pow2heapp (find_max' gv0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n c2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n c1 a2))
(pow2heapp (find_max' gv0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 a1 c2))
(pow2heapp (find_max' gv0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a2 a2))
(pow2heapp (find_max' gv0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c2 c2))
(pow2heapp (find_max' gv0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 p) n0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c2 a1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) n0 (Node gv0 c1 c2))
(pow2heapp (find_max' gv0 p) n0 (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) n0 (smash a2 a2)), (pow2heapp (find_max' gv0 p) n0 (smash a2 a1)), (pow2heapp (find_max' gv0 p) n0 (smash a2 c2)), (pow2heapp (find_max' gv0 p) n0 (smash a2 c1)), (pow2heapp (find_max' gv0 p) n0 (smash a1 a2)), (pow2heapp (find_max' gv0 p) n0 (smash a1 a1)), (pow2heapp (find_max' gv0 p) n0 (smash a1 c2)), (pow2heapp (find_max' gv0 p) n0 (smash a1 c1)), (pow2heapp (find_max' gv0 p) n0 (smash c2 a2))
(pow2heapp (find_max' gv0 p) n0 (smash c2 a1)), (pow2heapp (find_max' gv0 p) n0 (smash c2 c2)), (pow2heapp (find_max' gv0 p) n0 (smash c2 c1)), (pow2heapp (find_max' gv0 p) n0 (smash c1 a2)), (pow2heapp (find_max' gv0 p) n0 (smash c1 a1)), (pow2heapp (find_max' gv0 p) n0 (smash c1 c2)), (pow2heapp (find_max' gv0 p) n0 (smash c1 c1)), (pow2heapp (find_max' gv0 p) n0 Leaf), (pow2heapp (find_max' gv0 p) n1 a2), (pow2heapp (find_max' gv0 p) n1 a1)
(pow2heapp (find_max' gv0 p) n1 c2), (pow2heapp (find_max' gv0 p) n1 c1), (pow2heapp (find_max' gv0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n a2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n a1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n a1 c1))
(pow2heapp (find_max' gv0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n c1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a2 a1))
(pow2heapp (find_max' gv0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c2 c1))
(pow2heapp (find_max' gv0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a1 a1))
(pow2heapp (find_max' gv0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node n1 c1 c1))
(pow2heapp (find_max' gv0 p) n1 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c2 a1))
(pow2heapp (find_max' gv0 p) n1 (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c1 c2)), (pow2heapp (find_max' gv0 p) n1 (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) n1 (smash a2 a2)), (pow2heapp (find_max' gv0 p) n1 (smash a2 a1)), (pow2heapp (find_max' gv0 p) n1 (smash a2 c2)), (pow2heapp (find_max' gv0 p) n1 (smash a2 c1))
(pow2heapp (find_max' gv0 p) n1 (smash a1 a2)), (pow2heapp (find_max' gv0 p) n1 (smash a1 a1)), (pow2heapp (find_max' gv0 p) n1 (smash a1 c2)), (pow2heapp (find_max' gv0 p) n1 (smash a1 c1)), (pow2heapp (find_max' gv0 p) n1 (smash c2 a2)), (pow2heapp (find_max' gv0 p) n1 (smash c2 a1)), (pow2heapp (find_max' gv0 p) n1 (smash c2 c2)), (pow2heapp (find_max' gv0 p) n1 (smash c2 c1)), (pow2heapp (find_max' gv0 p) n1 (smash c1 a2)), (pow2heapp (find_max' gv0 p) n1 (smash c1 a1))
(pow2heapp (find_max' gv0 p) n1 (smash c1 c2)), (pow2heapp (find_max' gv0 p) n1 (smash c1 c1)), (pow2heapp (find_max' gv0 p) n1 Leaf), (pow2heapp (find_max' gv0 p) gv0 a2), (pow2heapp (find_max' gv0 p) gv0 a1), (pow2heapp (find_max' gv0 p) gv0 c2), (pow2heapp (find_max' gv0 p) gv0 c1), (pow2heapp (find_max' gv0 p) gv0 (Node n a2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n a2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n a2 c2))
(pow2heapp (find_max' gv0 p) gv0 (Node n a2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n a1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n a1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n a1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n a1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n c2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n c2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n c2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n c2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n c1 a2))
(pow2heapp (find_max' gv0 p) gv0 (Node n c1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n c1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n c1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 a1 c2))
(pow2heapp (find_max' gv0 p) gv0 (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a2 a2))
(pow2heapp (find_max' gv0 p) gv0 (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c2 c2))
(pow2heapp (find_max' gv0 p) gv0 (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node n1 c1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 p) gv0 (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c2 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) gv0 (Node gv0 c1 c2))
(pow2heapp (find_max' gv0 p) gv0 (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) gv0 (smash a2 a2)), (pow2heapp (find_max' gv0 p) gv0 (smash a2 a1)), (pow2heapp (find_max' gv0 p) gv0 (smash a2 c2)), (pow2heapp (find_max' gv0 p) gv0 (smash a2 c1)), (pow2heapp (find_max' gv0 p) gv0 (smash a1 a2)), (pow2heapp (find_max' gv0 p) gv0 (smash a1 a1)), (pow2heapp (find_max' gv0 p) gv0 (smash a1 c2)), (pow2heapp (find_max' gv0 p) gv0 (smash a1 c1)), (pow2heapp (find_max' gv0 p) gv0 (smash c2 a2))
(pow2heapp (find_max' gv0 p) gv0 (smash c2 a1)), (pow2heapp (find_max' gv0 p) gv0 (smash c2 c2)), (pow2heapp (find_max' gv0 p) gv0 (smash c2 c1)), (pow2heapp (find_max' gv0 p) gv0 (smash c1 a2)), (pow2heapp (find_max' gv0 p) gv0 (smash c1 a1)), (pow2heapp (find_max' gv0 p) gv0 (smash c1 c2)), (pow2heapp (find_max' gv0 p) gv0 (smash c1 c1)), (pow2heapp (find_max' gv0 p) gv0 Leaf), (pow2heapp (find_max' gv0 p) (find_max' n p) a2), (pow2heapp (find_max' gv0 p) (find_max' n p) a1)
(pow2heapp (find_max' gv0 p) (find_max' n p) c2), (pow2heapp (find_max' gv0 p) (find_max' n p) c1), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c2 c1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a1 a1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node n1 c1 c1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c2 a1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a2 c1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c1 a1))
(pow2heapp (find_max' gv0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n p) Leaf), (pow2heapp (find_max' gv0 p) (find_max' n0 p) a2), (pow2heapp (find_max' gv0 p) (find_max' n0 p) a1), (pow2heapp (find_max' gv0 p) (find_max' n0 p) c2), (pow2heapp (find_max' gv0 p) (find_max' n0 p) c1), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c1 a2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c2 c2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c1 c2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c2 a2))
(pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' gv0 p) (find_max' n1 p) a2), (pow2heapp (find_max' gv0 p) (find_max' n1 p) a1)
(pow2heapp (find_max' gv0 p) (find_max' n1 p) c2), (pow2heapp (find_max' gv0 p) (find_max' n1 p) c1), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c2 a1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a2 c1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c1 a1))
(pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) a2), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) a1), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) c2), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) c1), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a2 c2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c1 a2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a1 c2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a2 a2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c2 c2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node n1 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a1 a2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c1 c2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a2 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash a1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c2 a2))
(pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c2 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c2 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c2 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c1 a2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c1 a1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c1 c2)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) (smash c1 c1)), (pow2heapp (find_max' gv0 p) (find_max' gv0 p) Leaf), (pow2heapp (find_max' gv0 p) (length p) a2), (pow2heapp (find_max' gv0 p) (length p) a1)
(pow2heapp (find_max' gv0 p) (length p) c2), (pow2heapp (find_max' gv0 p) (length p) c1), (pow2heapp (find_max' gv0 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n a1 c1))
(pow2heapp (find_max' gv0 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a2 a1))
(pow2heapp (find_max' gv0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c2 c1))
(pow2heapp (find_max' gv0 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a1 a1))
(pow2heapp (find_max' gv0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node n1 c1 c1))
(pow2heapp (find_max' gv0 p) (length p) (Node gv0 a2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a2 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 a1 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c2 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c2 a1))
(pow2heapp (find_max' gv0 p) (length p) (Node gv0 c2 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c2 c1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c1 a2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c1 a1)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c1 c2)), (pow2heapp (find_max' gv0 p) (length p) (Node gv0 c1 c1)), (pow2heapp (find_max' gv0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' gv0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' gv0 p) (length p) (smash a2 c2)), (pow2heapp (find_max' gv0 p) (length p) (smash a2 c1))
(pow2heapp (find_max' gv0 p) (length p) (smash a1 a2)), (pow2heapp (find_max' gv0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' gv0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' gv0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' gv0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' gv0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' gv0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' gv0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' gv0 p) (length p) (smash c1 a2)), (pow2heapp (find_max' gv0 p) (length p) (smash c1 a1))
(pow2heapp (find_max' gv0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' gv0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' gv0 p) (length p) Leaf), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n (Node n a2 a2)), (pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 c2))
(pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n c2 a2)), (pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c1 a2))
(pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1)), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a1 a2)), (pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 c2))
(pow2heapp (length p) n (Node n0 a1 c1)), (pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c1 a2)), (pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n1 a2 a2))
(pow2heapp (length p) n (Node n1 a2 a1)), (pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 c2 a2)), (pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 c2))
(pow2heapp (length p) n (Node n1 c2 c1)), (pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node gv0 a2 a2)), (pow2heapp (length p) n (Node gv0 a2 a1)), (pow2heapp (length p) n (Node gv0 a2 c2)), (pow2heapp (length p) n (Node gv0 a2 c1)), (pow2heapp (length p) n (Node gv0 a1 a2))
(pow2heapp (length p) n (Node gv0 a1 a1)), (pow2heapp (length p) n (Node gv0 a1 c2)), (pow2heapp (length p) n (Node gv0 a1 c1)), (pow2heapp (length p) n (Node gv0 c2 a2)), (pow2heapp (length p) n (Node gv0 c2 a1)), (pow2heapp (length p) n (Node gv0 c2 c2)), (pow2heapp (length p) n (Node gv0 c2 c1)), (pow2heapp (length p) n (Node gv0 c1 a2)), (pow2heapp (length p) n (Node gv0 c1 a1)), (pow2heapp (length p) n (Node gv0 c1 c2))
(pow2heapp (length p) n (Node gv0 c1 c1)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a1 a2)), (pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash c2 a2))
(pow2heapp (length p) n (smash c2 a1)), (pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c1 a2)), (pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1)
(pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1)), (pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1))
(pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1)), (pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1)), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1))
(pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1))
(pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1)), (pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1))
(pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1)), (pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1)), (pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1))
(pow2heapp (length p) n0 (Node gv0 a2 a2)), (pow2heapp (length p) n0 (Node gv0 a2 a1)), (pow2heapp (length p) n0 (Node gv0 a2 c2)), (pow2heapp (length p) n0 (Node gv0 a2 c1)), (pow2heapp (length p) n0 (Node gv0 a1 a2)), (pow2heapp (length p) n0 (Node gv0 a1 a1)), (pow2heapp (length p) n0 (Node gv0 a1 c2)), (pow2heapp (length p) n0 (Node gv0 a1 c1)), (pow2heapp (length p) n0 (Node gv0 c2 a2)), (pow2heapp (length p) n0 (Node gv0 c2 a1))
(pow2heapp (length p) n0 (Node gv0 c2 c2)), (pow2heapp (length p) n0 (Node gv0 c2 c1)), (pow2heapp (length p) n0 (Node gv0 c1 a2)), (pow2heapp (length p) n0 (Node gv0 c1 a1)), (pow2heapp (length p) n0 (Node gv0 c1 c2)), (pow2heapp (length p) n0 (Node gv0 c1 c1)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1))
(pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1)), (pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1)), (pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1))
(pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n1 a2), (pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 c2), (pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 c2))
(pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a1 a2)), (pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 c2)), (pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 c2)), (pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c1 a2))
(pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 c2)), (pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 c2))
(pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 c2)), (pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2))
(pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 c2)), (pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 c2))
(pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 c2)), (pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node gv0 a2 a2)), (pow2heapp (length p) n1 (Node gv0 a2 a1)), (pow2heapp (length p) n1 (Node gv0 a2 c2)), (pow2heapp (length p) n1 (Node gv0 a2 c1)), (pow2heapp (length p) n1 (Node gv0 a1 a2))
(pow2heapp (length p) n1 (Node gv0 a1 a1)), (pow2heapp (length p) n1 (Node gv0 a1 c2)), (pow2heapp (length p) n1 (Node gv0 a1 c1)), (pow2heapp (length p) n1 (Node gv0 c2 a2)), (pow2heapp (length p) n1 (Node gv0 c2 a1)), (pow2heapp (length p) n1 (Node gv0 c2 c2)), (pow2heapp (length p) n1 (Node gv0 c2 c1)), (pow2heapp (length p) n1 (Node gv0 c1 a2)), (pow2heapp (length p) n1 (Node gv0 c1 a1)), (pow2heapp (length p) n1 (Node gv0 c1 c2))
(pow2heapp (length p) n1 (Node gv0 c1 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 c2)), (pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash c2 a2))
(pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 c2)), (pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) gv0 a2), (pow2heapp (length p) gv0 a1)
(pow2heapp (length p) gv0 c2), (pow2heapp (length p) gv0 c1), (pow2heapp (length p) gv0 (Node n a2 a2)), (pow2heapp (length p) gv0 (Node n a2 a1)), (pow2heapp (length p) gv0 (Node n a2 c2)), (pow2heapp (length p) gv0 (Node n a2 c1)), (pow2heapp (length p) gv0 (Node n a1 a2)), (pow2heapp (length p) gv0 (Node n a1 a1)), (pow2heapp (length p) gv0 (Node n a1 c2)), (pow2heapp (length p) gv0 (Node n a1 c1))
(pow2heapp (length p) gv0 (Node n c2 a2)), (pow2heapp (length p) gv0 (Node n c2 a1)), (pow2heapp (length p) gv0 (Node n c2 c2)), (pow2heapp (length p) gv0 (Node n c2 c1)), (pow2heapp (length p) gv0 (Node n c1 a2)), (pow2heapp (length p) gv0 (Node n c1 a1)), (pow2heapp (length p) gv0 (Node n c1 c2)), (pow2heapp (length p) gv0 (Node n c1 c1)), (pow2heapp (length p) gv0 (Node n0 a2 a2)), (pow2heapp (length p) gv0 (Node n0 a2 a1))
(pow2heapp (length p) gv0 (Node n0 a2 c2)), (pow2heapp (length p) gv0 (Node n0 a2 c1)), (pow2heapp (length p) gv0 (Node n0 a1 a2)), (pow2heapp (length p) gv0 (Node n0 a1 a1)), (pow2heapp (length p) gv0 (Node n0 a1 c2)), (pow2heapp (length p) gv0 (Node n0 a1 c1)), (pow2heapp (length p) gv0 (Node n0 c2 a2)), (pow2heapp (length p) gv0 (Node n0 c2 a1)), (pow2heapp (length p) gv0 (Node n0 c2 c2)), (pow2heapp (length p) gv0 (Node n0 c2 c1))
(pow2heapp (length p) gv0 (Node n0 c1 a2)), (pow2heapp (length p) gv0 (Node n0 c1 a1)), (pow2heapp (length p) gv0 (Node n0 c1 c2)), (pow2heapp (length p) gv0 (Node n0 c1 c1)), (pow2heapp (length p) gv0 (Node n1 a2 a2)), (pow2heapp (length p) gv0 (Node n1 a2 a1)), (pow2heapp (length p) gv0 (Node n1 a2 c2)), (pow2heapp (length p) gv0 (Node n1 a2 c1)), (pow2heapp (length p) gv0 (Node n1 a1 a2)), (pow2heapp (length p) gv0 (Node n1 a1 a1))
(pow2heapp (length p) gv0 (Node n1 a1 c2)), (pow2heapp (length p) gv0 (Node n1 a1 c1)), (pow2heapp (length p) gv0 (Node n1 c2 a2)), (pow2heapp (length p) gv0 (Node n1 c2 a1)), (pow2heapp (length p) gv0 (Node n1 c2 c2)), (pow2heapp (length p) gv0 (Node n1 c2 c1)), (pow2heapp (length p) gv0 (Node n1 c1 a2)), (pow2heapp (length p) gv0 (Node n1 c1 a1)), (pow2heapp (length p) gv0 (Node n1 c1 c2)), (pow2heapp (length p) gv0 (Node n1 c1 c1))
(pow2heapp (length p) gv0 (Node gv0 a2 a2)), (pow2heapp (length p) gv0 (Node gv0 a2 a1)), (pow2heapp (length p) gv0 (Node gv0 a2 c2)), (pow2heapp (length p) gv0 (Node gv0 a2 c1)), (pow2heapp (length p) gv0 (Node gv0 a1 a2)), (pow2heapp (length p) gv0 (Node gv0 a1 a1)), (pow2heapp (length p) gv0 (Node gv0 a1 c2)), (pow2heapp (length p) gv0 (Node gv0 a1 c1)), (pow2heapp (length p) gv0 (Node gv0 c2 a2)), (pow2heapp (length p) gv0 (Node gv0 c2 a1))
(pow2heapp (length p) gv0 (Node gv0 c2 c2)), (pow2heapp (length p) gv0 (Node gv0 c2 c1)), (pow2heapp (length p) gv0 (Node gv0 c1 a2)), (pow2heapp (length p) gv0 (Node gv0 c1 a1)), (pow2heapp (length p) gv0 (Node gv0 c1 c2)), (pow2heapp (length p) gv0 (Node gv0 c1 c1)), (pow2heapp (length p) gv0 (smash a2 a2)), (pow2heapp (length p) gv0 (smash a2 a1)), (pow2heapp (length p) gv0 (smash a2 c2)), (pow2heapp (length p) gv0 (smash a2 c1))
(pow2heapp (length p) gv0 (smash a1 a2)), (pow2heapp (length p) gv0 (smash a1 a1)), (pow2heapp (length p) gv0 (smash a1 c2)), (pow2heapp (length p) gv0 (smash a1 c1)), (pow2heapp (length p) gv0 (smash c2 a2)), (pow2heapp (length p) gv0 (smash c2 a1)), (pow2heapp (length p) gv0 (smash c2 c2)), (pow2heapp (length p) gv0 (smash c2 c1)), (pow2heapp (length p) gv0 (smash c1 a2)), (pow2heapp (length p) gv0 (smash c1 a1))
(pow2heapp (length p) gv0 (smash c1 c2)), (pow2heapp (length p) gv0 (smash c1 c1)), (pow2heapp (length p) gv0 Leaf), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2))
(pow2heapp (length p) (find_max' n p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2))
(pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a2))
(pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (length p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node gv0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node gv0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node gv0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node gv0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node gv0 a1 a2))
(pow2heapp (length p) (find_max' n p) (Node gv0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node gv0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node gv0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node gv0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node gv0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node gv0 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node gv0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node gv0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node gv0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node gv0 c1 c2))
(pow2heapp (length p) (find_max' n p) (Node gv0 c1 c1)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 c2)), (pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2))
(pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1)), (pow2heapp (length p) (find_max' n p) (smash c1 a2)), (pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1)
(pow2heapp (length p) (find_max' n0 p) c2), (pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (length p) (find_max' n0 p) (Node gv0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c2 a1))
(pow2heapp (length p) (find_max' n0 p) (Node gv0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node gv0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1))
(pow2heapp (length p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) Leaf), (pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2))
(pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a1 a2))
(pow2heapp (length p) (find_max' n1 p) (Node gv0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node gv0 c1 c2))
(pow2heapp (length p) (find_max' n1 p) (Node gv0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a2))
(pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) Leaf), (pow2heapp (length p) (find_max' gv0 p) a2), (pow2heapp (length p) (find_max' gv0 p) a1)
(pow2heapp (length p) (find_max' gv0 p) c2), (pow2heapp (length p) (find_max' gv0 p) c1), (pow2heapp (length p) (find_max' gv0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' gv0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a2 a1))
(pow2heapp (length p) (find_max' gv0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c2 c1))
(pow2heapp (length p) (find_max' gv0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a1 a1))
(pow2heapp (length p) (find_max' gv0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node n1 c1 c1))
(pow2heapp (length p) (find_max' gv0 p) (Node gv0 a2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a2 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 a1 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c2 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c2 a1))
(pow2heapp (length p) (find_max' gv0 p) (Node gv0 c2 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c2 c1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c1 a2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c1 a1)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c1 c2)), (pow2heapp (length p) (find_max' gv0 p) (Node gv0 c1 c1)), (pow2heapp (length p) (find_max' gv0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' gv0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' gv0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' gv0 p) (smash a2 c1))
(pow2heapp (length p) (find_max' gv0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' gv0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' gv0 p) (smash a1 c2)), (pow2heapp (length p) (find_max' gv0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' gv0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' gv0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' gv0 p) (smash c2 c2)), (pow2heapp (length p) (find_max' gv0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' gv0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' gv0 p) (smash c1 a1))
(pow2heapp (length p) (find_max' gv0 p) (smash c1 c2)), (pow2heapp (length p) (find_max' gv0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' gv0 p) Leaf), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1), (pow2heapp (length p) (length p) c2), (pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 c2))
(pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1)), (pow2heapp (length p) (length p) (Node n a1 c2)), (pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1)), (pow2heapp (length p) (length p) (Node n c2 c2)), (pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c1 a2))
(pow2heapp (length p) (length p) (Node n c1 a1)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1)), (pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 c2))
(pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1)), (pow2heapp (length p) (length p) (Node n0 c2 c2)), (pow2heapp (length p) (length p) (Node n0 c2 c1)), (pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2))
(pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 c2)), (pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1)), (pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 c2))
(pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1)), (pow2heapp (length p) (length p) (Node n1 c1 c2)), (pow2heapp (length p) (length p) (Node n1 c1 c1)), (pow2heapp (length p) (length p) (Node gv0 a2 a2)), (pow2heapp (length p) (length p) (Node gv0 a2 a1)), (pow2heapp (length p) (length p) (Node gv0 a2 c2)), (pow2heapp (length p) (length p) (Node gv0 a2 c1)), (pow2heapp (length p) (length p) (Node gv0 a1 a2))
(pow2heapp (length p) (length p) (Node gv0 a1 a1)), (pow2heapp (length p) (length p) (Node gv0 a1 c2)), (pow2heapp (length p) (length p) (Node gv0 a1 c1)), (pow2heapp (length p) (length p) (Node gv0 c2 a2)), (pow2heapp (length p) (length p) (Node gv0 c2 a1)), (pow2heapp (length p) (length p) (Node gv0 c2 c2)), (pow2heapp (length p) (length p) (Node gv0 c2 c1)), (pow2heapp (length p) (length p) (Node gv0 c1 a2)), (pow2heapp (length p) (length p) (Node gv0 c1 a1)), (pow2heapp (length p) (length p) (Node gv0 c1 c2))
(pow2heapp (length p) (length p) (Node gv0 c1 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1)), (pow2heapp (length p) (length p) (smash a2 c2)), (pow2heapp (length p) (length p) (smash a2 c1)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash c2 a2))
(pow2heapp (length p) (length p) (smash c2 a1)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1)), (pow2heapp (length p) (length p) (smash c1 c2)), (pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a2 :: p)), (Permutation p (a1 :: p))
(Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1)), (Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p c2))
(Permutation p (join p p c1)), (Permutation p (insert n p)), (Permutation p (insert n0 p)), (Permutation p (insert n1 p)), (Permutation p (insert gv0 p)), (Permutation p (carry p a2)), (Permutation p (carry p a1)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (p ++ p))
(Permutation p []), (Permutation (a2 :: p) p), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1))
(Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n1 p)), (Permutation (a2 :: p) (insert gv0 p)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1))
(Permutation (a2 :: p) (carry p c2)), (Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (a2 :: p)), (Permutation (a1 :: p) (c2 :: p)), (Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max a2))
(Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (join p p a2)), (Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n1 p))
(Permutation (a1 :: p) (insert gv0 p)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (c2 :: p) p), (Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p))
(Permutation (c2 :: p) (c1 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1)), (Permutation (c2 :: p) (join p p c2)), (Permutation (c2 :: p) (join p p c1))
(Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert gv0 p)), (Permutation (c2 :: p) (carry p a2)), (Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1)), (Permutation (c2 :: p) (p ++ p)), (Permutation (c2 :: p) [])
(Permutation (c1 :: p) p), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (merge p p)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1)), (Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1)), (Permutation (c1 :: p) (join p p a2))
(Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n1 p)), (Permutation (c1 :: p) (insert gv0 p)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p c2))
(Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (c2 :: p)), (Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1))
(Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p c2)), (Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert gv0 p))
(Permutation (merge p p) (carry p a2)), (Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (a2 :: p)), (Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (c2 :: p))
(Permutation (heap_delete_max a2) (c1 :: p)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (join p p a2)), (Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1)), (Permutation (heap_delete_max a2) (insert n p))
(Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n1 p)), (Permutation (heap_delete_max a2) (insert gv0 p)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p)
(Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max c2)), (Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1))
(Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1)), (Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (insert n0 p)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert gv0 p)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1))
(Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max c2) p), (Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max a2)), (Permutation (heap_delete_max c2) (heap_delete_max a1))
(Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1)), (Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n1 p)), (Permutation (heap_delete_max c2) (insert gv0 p)), (Permutation (heap_delete_max c2) (carry p a2))
(Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (p ++ p)), (Permutation (heap_delete_max c2) []), (Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (a2 :: p)), (Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p))
(Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1)), (Permutation (heap_delete_max c1) (heap_delete_max c2)), (Permutation (heap_delete_max c1) (join p p a2)), (Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (insert n0 p))
(Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert gv0 p)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p c2)), (Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (a2 :: p))
(Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p c2))
(Permutation (join p p a2) (join p p c1)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert gv0 p)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (p ++ p))
(Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max c2))
(Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (insert n0 p)), (Permutation (join p p a1) (insert n1 p)), (Permutation (join p p a1) (insert gv0 p)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1))
(Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p)), (Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (merge p p))
(Permutation (join p p c2) (heap_delete_max a2)), (Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p c1)), (Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n1 p))
(Permutation (join p p c2) (insert gv0 p)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) []), (Permutation (join p p c1) p), (Permutation (join p p c1) (a2 :: p)), (Permutation (join p p c1) (a1 :: p))
(Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max a2)), (Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1)), (Permutation (join p p c1) (join p p a2)), (Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p c2))
(Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert gv0 p)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p c2)), (Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (p ++ p)), (Permutation (join p p c1) [])
(Permutation (insert n p) p), (Permutation (insert n p) (a2 :: p)), (Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1))
(Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (insert gv0 p)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p c2))
(Permutation (insert n p) (carry p c1)), (Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (insert n0 p) p), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max a2))
(Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max c2)), (Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p c2)), (Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert gv0 p))
(Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p c2)), (Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) []), (Permutation (insert n1 p) p), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (c2 :: p))
(Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max a2)), (Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1))
(Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert gv0 p)), (Permutation (insert n1 p) (carry p a2)), (Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) []), (Permutation (insert gv0 p) p)
(Permutation (insert gv0 p) (a2 :: p)), (Permutation (insert gv0 p) (a1 :: p)), (Permutation (insert gv0 p) (c2 :: p)), (Permutation (insert gv0 p) (c1 :: p)), (Permutation (insert gv0 p) (merge p p)), (Permutation (insert gv0 p) (heap_delete_max a2)), (Permutation (insert gv0 p) (heap_delete_max a1)), (Permutation (insert gv0 p) (heap_delete_max c2)), (Permutation (insert gv0 p) (heap_delete_max c1)), (Permutation (insert gv0 p) (join p p a2))
(Permutation (insert gv0 p) (join p p a1)), (Permutation (insert gv0 p) (join p p c2)), (Permutation (insert gv0 p) (join p p c1)), (Permutation (insert gv0 p) (insert n p)), (Permutation (insert gv0 p) (insert n0 p)), (Permutation (insert gv0 p) (insert n1 p)), (Permutation (insert gv0 p) (carry p a2)), (Permutation (insert gv0 p) (carry p a1)), (Permutation (insert gv0 p) (carry p c2)), (Permutation (insert gv0 p) (carry p c1))
(Permutation (insert gv0 p) (p ++ p)), (Permutation (insert gv0 p) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1))
(Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1)), (Permutation (carry p a2) (join p p c2)), (Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert gv0 p))
(Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) []), (Permutation (carry p a1) p), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p))
(Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max a2)), (Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1)), (Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (insert n p))
(Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert gv0 p)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (carry p c2) p), (Permutation (carry p c2) (a2 :: p))
(Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max c2)), (Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1))
(Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (insert n p)), (Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n1 p)), (Permutation (carry p c2) (insert gv0 p)), (Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1)), (Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (p ++ p))
(Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (c2 :: p)), (Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max a2)), (Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max c2))
(Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1)), (Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (insert n p)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert gv0 p)), (Permutation (carry p c1) (carry p a2))
(Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p c2)), (Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p)), (Permutation (p ++ p) (merge p p))
(Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max c2)), (Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (insert n0 p))
(Permutation (p ++ p) (insert n1 p)), (Permutation (p ++ p) (insert gv0 p)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p))
(Permutation [] (c2 :: p)), (Permutation [] (c1 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p c2))
(Permutation [] (join p p c1)), (Permutation [] (insert n p)), (Permutation [] (insert n0 p)), (Permutation [] (insert n1 p)), (Permutation [] (insert gv0 p)), (Permutation [] (carry p a2)), (Permutation [] (carry p a1)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1)), (Permutation [] (p ++ p))
(In a2 (a2 :: p)), (In a2 (a1 :: p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (merge p p)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (join p p a2))
(In a2 (join p p a1)), (In a2 (join p p c2)), (In a2 (join p p c1)), (In a2 (insert n p)), (In a2 (insert n0 p)), (In a2 (insert n1 p)), (In a2 (insert gv0 p)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p c2))
(In a2 (carry p c1)), (In a2 (p ++ p)), (In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (c2 :: p)), (In a1 (c1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max c2))
(In a1 (heap_delete_max c1)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (insert n p)), (In a1 (insert n0 p)), (In a1 (insert n1 p)), (In a1 (insert gv0 p)), (In a1 (carry p a2))
(In a1 (carry p a1)), (In a1 (carry p c2)), (In a1 (carry p c1)), (In a1 (p ++ p)), (In c2 (a2 :: p)), (In c2 (a1 :: p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (merge p p)), (In c2 (heap_delete_max a2))
(In c2 (heap_delete_max a1)), (In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1)), (In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (insert n p)), (In c2 (insert n0 p)), (In c2 (insert n1 p))
(In c2 (insert gv0 p)), (In c2 (carry p a2)), (In c2 (carry p a1)), (In c2 (carry p c2)), (In c2 (carry p c1)), (In c2 (p ++ p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (c2 :: p)), (In c1 (c1 :: p))
(In c1 (merge p p)), (In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max c2)), (In c1 (heap_delete_max c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p c2)), (In c1 (join p p c1)), (In c1 (insert n p))
(In c1 (insert n0 p)), (In c1 (insert n1 p)), (In c1 (insert gv0 p)), (In c1 (carry p a2)), (In c1 (carry p a1)), (In c1 (carry p c2)), (In c1 (carry p c1)), (In c1 (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (a2 :: p))
(In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max c2)), (In (Node n a2 a2) (heap_delete_max c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1))
(In (Node n a2 a2) (join p p c2)), (In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (insert n0 p)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert gv0 p)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1))
(In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (c2 :: p)), (In (Node n a2 a1) (c1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max c2))
(In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p c2)), (In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert gv0 p)), (In (Node n a2 a1) (carry p a2))
(In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1)), (In (Node n a2 a1) (p ++ p)), (In (Node n a2 c2) p), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p)), (In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (merge p p))
(In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1)), (In (Node n a2 c2) (heap_delete_max c2)), (In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (join p p a2)), (In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (insert n0 p))
(In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert gv0 p)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1)), (In (Node n a2 c2) (carry p c2)), (In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p))
(In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (merge p p)), (In (Node n a2 c1) (heap_delete_max a2)), (In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (join p p a2)), (In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p c2))
(In (Node n a2 c1) (join p p c1)), (In (Node n a2 c1) (insert n p)), (In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert gv0 p)), (In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (p ++ p))
(In (Node n a1 a2) p), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max c2)), (In (Node n a1 a2) (heap_delete_max c1))
(In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (insert n0 p)), (In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert gv0 p)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1))
(In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (c2 :: p)), (In (Node n a1 a1) (c1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max a2))
(In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p c2)), (In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n1 p))
(In (Node n a1 a1) (insert gv0 p)), (In (Node n a1 a1) (carry p a2)), (In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 c2) p), (In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p)), (In (Node n a1 c2) (c2 :: p))
(In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (join p p a2)), (In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1))
(In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert gv0 p)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p c2)), (In (Node n a1 c2) (carry p c1)), (In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p)
(In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p)), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (merge p p)), (In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max c2)), (In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (join p p a2))
(In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert gv0 p)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1)), (In (Node n a1 c1) (carry p c2))
(In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (p ++ p)), (In (Node n c2 a2) p), (In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max a2)), (In (Node n c2 a2) (heap_delete_max a1))
(In (Node n c2 a2) (heap_delete_max c2)), (In (Node n c2 a2) (heap_delete_max c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (insert n p)), (In (Node n c2 a2) (insert n0 p)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert gv0 p))
(In (Node n c2 a2) (carry p a2)), (In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (c2 :: p)), (In (Node n c2 a1) (c1 :: p))
(In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p c2)), (In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (insert n p))
(In (Node n c2 a1) (insert n0 p)), (In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert gv0 p)), (In (Node n c2 a1) (carry p a2)), (In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1)), (In (Node n c2 a1) (p ++ p)), (In (Node n c2 c2) p), (In (Node n c2 c2) (a2 :: p))
(In (Node n c2 c2) (a1 :: p)), (In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (join p p a2)), (In (Node n c2 c2) (join p p a1))
(In (Node n c2 c2) (join p p c2)), (In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert gv0 p)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p c2)), (In (Node n c2 c2) (carry p c1))
(In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p), (In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p)), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (merge p p)), (In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max c2))
(In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (join p p a2)), (In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert gv0 p)), (In (Node n c2 c1) (carry p a2))
(In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1)), (In (Node n c2 c1) (p ++ p)), (In (Node n c1 a2) p), (In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (merge p p))
(In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max c2)), (In (Node n c1 a2) (heap_delete_max c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (insert n0 p))
(In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert gv0 p)), (In (Node n c1 a2) (carry p a2)), (In (Node n c1 a2) (carry p a1)), (In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p))
(In (Node n c1 a1) (c2 :: p)), (In (Node n c1 a1) (c1 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max a2)), (In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p c2))
(In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (insert n p)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert gv0 p)), (In (Node n c1 a1) (carry p a2)), (In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1)), (In (Node n c1 a1) (p ++ p))
(In (Node n c1 c2) p), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p)), (In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p)), (In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1))
(In (Node n c1 c2) (join p p a2)), (In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (insert n0 p)), (In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert gv0 p)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1))
(In (Node n c1 c2) (carry p c2)), (In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p)), (In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (merge p p)), (In (Node n c1 c1) (heap_delete_max a2))
(In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (join p p a2)), (In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p c2)), (In (Node n c1 c1) (join p p c1)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n1 p))
(In (Node n c1 c1) (insert gv0 p)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (c2 :: p))
(In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max c2)), (In (Node n0 a2 a2) (heap_delete_max c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1))
(In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (insert n0 p)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert gv0 p)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p)
(In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (c2 :: p)), (In (Node n0 a2 a1) (c1 :: p)), (In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (join p p a2))
(In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p c2)), (In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert gv0 p)), (In (Node n0 a2 a1) (carry p a2)), (In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p c2))
(In (Node n0 a2 a1) (carry p c1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 c2) p), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p)), (In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1))
(In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (join p p a2)), (In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p c2)), (In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert gv0 p))
(In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p c2)), (In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p), (In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p)), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p))
(In (Node n0 a2 c1) (merge p p)), (In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (join p p a2)), (In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1)), (In (Node n0 a2 c1) (insert n p))
(In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert gv0 p)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1)), (In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a1 a2) p), (In (Node n0 a1 a2) (a2 :: p))
(In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max c2)), (In (Node n0 a1 a2) (heap_delete_max c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1))
(In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (insert n0 p)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert gv0 p)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1))
(In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (c2 :: p)), (In (Node n0 a1 a1) (c1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max c2))
(In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p c2)), (In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert gv0 p)), (In (Node n0 a1 a1) (carry p a2))
(In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 c2) p), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p)), (In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p)), (In (Node n0 a1 c2) (merge p p))
(In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (join p p a2)), (In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (insert n0 p))
(In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert gv0 p)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p c2)), (In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p))
(In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (merge p p)), (In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (join p p a2)), (In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p c2))
(In (Node n0 a1 c1) (join p p c1)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert gv0 p)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (p ++ p))
(In (Node n0 c2 a2) p), (In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max c2)), (In (Node n0 c2 a2) (heap_delete_max c1))
(In (Node n0 c2 a2) (join p p a2)), (In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (insert n0 p)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert gv0 p)), (In (Node n0 c2 a2) (carry p a2)), (In (Node n0 c2 a2) (carry p a1))
(In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1)), (In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (c2 :: p)), (In (Node n0 c2 a1) (c1 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max a2))
(In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max c2)), (In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p c2)), (In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n1 p))
(In (Node n0 c2 a1) (insert gv0 p)), (In (Node n0 c2 a1) (carry p a2)), (In (Node n0 c2 a1) (carry p a1)), (In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1)), (In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 c2) p), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p)), (In (Node n0 c2 c2) (c2 :: p))
(In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max a2)), (In (Node n0 c2 c2) (heap_delete_max a1)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (join p p a2)), (In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1))
(In (Node n0 c2 c2) (insert n p)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert gv0 p)), (In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p c2)), (In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p)
(In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p)), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p)), (In (Node n0 c2 c1) (merge p p)), (In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (join p p a2))
(In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (insert n0 p)), (In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert gv0 p)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p c2))
(In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c1 a2) p), (In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p)), (In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1))
(In (Node n0 c1 a2) (heap_delete_max c2)), (In (Node n0 c1 a2) (heap_delete_max c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p c2)), (In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (insert n0 p)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert gv0 p))
(In (Node n0 c1 a2) (carry p a2)), (In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p), (In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (c2 :: p)), (In (Node n0 c1 a1) (c1 :: p))
(In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (join p p a2)), (In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p c2)), (In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (insert n p))
(In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert gv0 p)), (In (Node n0 c1 a1) (carry p a2)), (In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1)), (In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 c2) p), (In (Node n0 c1 c2) (a2 :: p))
(In (Node n0 c1 c2) (a1 :: p)), (In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1)), (In (Node n0 c1 c2) (heap_delete_max c2)), (In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (join p p a2)), (In (Node n0 c1 c2) (join p p a1))
(In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert gv0 p)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1)), (In (Node n0 c1 c2) (carry p c2)), (In (Node n0 c1 c2) (carry p c1))
(In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p)), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (merge p p)), (In (Node n0 c1 c1) (heap_delete_max a2)), (In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max c2))
(In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (join p p a2)), (In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1)), (In (Node n0 c1 c1) (insert n p)), (In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert gv0 p)), (In (Node n0 c1 c1) (carry p a2))
(In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (p ++ p)), (In (Node n1 a2 a2) p), (In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p)), (In (Node n1 a2 a2) (merge p p))
(In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max c2)), (In (Node n1 a2 a2) (heap_delete_max c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (insert n0 p))
(In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert gv0 p)), (In (Node n1 a2 a2) (carry p a2)), (In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p))
(In (Node n1 a2 a1) (c2 :: p)), (In (Node n1 a2 a1) (c1 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p c2))
(In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert gv0 p)), (In (Node n1 a2 a1) (carry p a2)), (In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1)), (In (Node n1 a2 a1) (p ++ p))
(In (Node n1 a2 c2) p), (In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p)), (In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1))
(In (Node n1 a2 c2) (join p p a2)), (In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert gv0 p)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1))
(In (Node n1 a2 c2) (carry p c2)), (In (Node n1 a2 c2) (carry p c1)), (In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p)), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (merge p p)), (In (Node n1 a2 c1) (heap_delete_max a2))
(In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max c2)), (In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (join p p a2)), (In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n1 p))
(In (Node n1 a2 c1) (insert gv0 p)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1)), (In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a1 a2) p), (In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (c2 :: p))
(In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max a2)), (In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max c2)), (In (Node n1 a1 a2) (heap_delete_max c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1))
(In (Node n1 a1 a2) (insert n p)), (In (Node n1 a1 a2) (insert n0 p)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert gv0 p)), (In (Node n1 a1 a2) (carry p a2)), (In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p)
(In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (c2 :: p)), (In (Node n1 a1 a1) (c1 :: p)), (In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (join p p a2))
(In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p c2)), (In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (insert n0 p)), (In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert gv0 p)), (In (Node n1 a1 a1) (carry p a2)), (In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p c2))
(In (Node n1 a1 a1) (carry p c1)), (In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 c2) p), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p)), (In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1))
(In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (join p p a2)), (In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p c2)), (In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert gv0 p))
(In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p c2)), (In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p), (In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p)), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p))
(In (Node n1 a1 c1) (merge p p)), (In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (join p p a2)), (In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1)), (In (Node n1 a1 c1) (insert n p))
(In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert gv0 p)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1)), (In (Node n1 a1 c1) (p ++ p)), (In (Node n1 c2 a2) p), (In (Node n1 c2 a2) (a2 :: p))
(In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max c2)), (In (Node n1 c2 a2) (heap_delete_max c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1))
(In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (insert n0 p)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert gv0 p)), (In (Node n1 c2 a2) (carry p a2)), (In (Node n1 c2 a2) (carry p a1)), (In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1))
(In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (c2 :: p)), (In (Node n1 c2 a1) (c1 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max a2)), (In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max c2))
(In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p c2)), (In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (insert n p)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert gv0 p)), (In (Node n1 c2 a1) (carry p a2))
(In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1)), (In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 c2) p), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p)), (In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p)), (In (Node n1 c2 c2) (merge p p))
(In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (join p p a2)), (In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (insert n0 p))
(In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert gv0 p)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p c2)), (In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p))
(In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (merge p p)), (In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (join p p a2)), (In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p c2))
(In (Node n1 c2 c1) (join p p c1)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert gv0 p)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (p ++ p))
(In (Node n1 c1 a2) p), (In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max c2)), (In (Node n1 c1 a2) (heap_delete_max c1))
(In (Node n1 c1 a2) (join p p a2)), (In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (insert n0 p)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert gv0 p)), (In (Node n1 c1 a2) (carry p a2)), (In (Node n1 c1 a2) (carry p a1))
(In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1)), (In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (c2 :: p)), (In (Node n1 c1 a1) (c1 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max a2))
(In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max c2)), (In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p c2)), (In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n1 p))
(In (Node n1 c1 a1) (insert gv0 p)), (In (Node n1 c1 a1) (carry p a2)), (In (Node n1 c1 a1) (carry p a1)), (In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1)), (In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 c2) p), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p)), (In (Node n1 c1 c2) (c2 :: p))
(In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max a2)), (In (Node n1 c1 c2) (heap_delete_max a1)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (join p p a2)), (In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1))
(In (Node n1 c1 c2) (insert n p)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert gv0 p)), (In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p c2)), (In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p)
(In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p)), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p)), (In (Node n1 c1 c1) (merge p p)), (In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (join p p a2))
(In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (insert n0 p)), (In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert gv0 p)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p c2))
(In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (p ++ p)), (In (Node gv0 a2 a2) p), (In (Node gv0 a2 a2) (a2 :: p)), (In (Node gv0 a2 a2) (a1 :: p)), (In (Node gv0 a2 a2) (c2 :: p)), (In (Node gv0 a2 a2) (c1 :: p)), (In (Node gv0 a2 a2) (merge p p)), (In (Node gv0 a2 a2) (heap_delete_max a2)), (In (Node gv0 a2 a2) (heap_delete_max a1))
(In (Node gv0 a2 a2) (heap_delete_max c2)), (In (Node gv0 a2 a2) (heap_delete_max c1)), (In (Node gv0 a2 a2) (join p p a2)), (In (Node gv0 a2 a2) (join p p a1)), (In (Node gv0 a2 a2) (join p p c2)), (In (Node gv0 a2 a2) (join p p c1)), (In (Node gv0 a2 a2) (insert n p)), (In (Node gv0 a2 a2) (insert n0 p)), (In (Node gv0 a2 a2) (insert n1 p)), (In (Node gv0 a2 a2) (insert gv0 p))
(In (Node gv0 a2 a2) (carry p a2)), (In (Node gv0 a2 a2) (carry p a1)), (In (Node gv0 a2 a2) (carry p c2)), (In (Node gv0 a2 a2) (carry p c1)), (In (Node gv0 a2 a2) (p ++ p)), (In (Node gv0 a2 a1) p), (In (Node gv0 a2 a1) (a2 :: p)), (In (Node gv0 a2 a1) (a1 :: p)), (In (Node gv0 a2 a1) (c2 :: p)), (In (Node gv0 a2 a1) (c1 :: p))
(In (Node gv0 a2 a1) (merge p p)), (In (Node gv0 a2 a1) (heap_delete_max a2)), (In (Node gv0 a2 a1) (heap_delete_max a1)), (In (Node gv0 a2 a1) (heap_delete_max c2)), (In (Node gv0 a2 a1) (heap_delete_max c1)), (In (Node gv0 a2 a1) (join p p a2)), (In (Node gv0 a2 a1) (join p p a1)), (In (Node gv0 a2 a1) (join p p c2)), (In (Node gv0 a2 a1) (join p p c1)), (In (Node gv0 a2 a1) (insert n p))
(In (Node gv0 a2 a1) (insert n0 p)), (In (Node gv0 a2 a1) (insert n1 p)), (In (Node gv0 a2 a1) (insert gv0 p)), (In (Node gv0 a2 a1) (carry p a2)), (In (Node gv0 a2 a1) (carry p a1)), (In (Node gv0 a2 a1) (carry p c2)), (In (Node gv0 a2 a1) (carry p c1)), (In (Node gv0 a2 a1) (p ++ p)), (In (Node gv0 a2 c2) p), (In (Node gv0 a2 c2) (a2 :: p))
(In (Node gv0 a2 c2) (a1 :: p)), (In (Node gv0 a2 c2) (c2 :: p)), (In (Node gv0 a2 c2) (c1 :: p)), (In (Node gv0 a2 c2) (merge p p)), (In (Node gv0 a2 c2) (heap_delete_max a2)), (In (Node gv0 a2 c2) (heap_delete_max a1)), (In (Node gv0 a2 c2) (heap_delete_max c2)), (In (Node gv0 a2 c2) (heap_delete_max c1)), (In (Node gv0 a2 c2) (join p p a2)), (In (Node gv0 a2 c2) (join p p a1))
(In (Node gv0 a2 c2) (join p p c2)), (In (Node gv0 a2 c2) (join p p c1)), (In (Node gv0 a2 c2) (insert n p)), (In (Node gv0 a2 c2) (insert n0 p)), (In (Node gv0 a2 c2) (insert n1 p)), (In (Node gv0 a2 c2) (insert gv0 p)), (In (Node gv0 a2 c2) (carry p a2)), (In (Node gv0 a2 c2) (carry p a1)), (In (Node gv0 a2 c2) (carry p c2)), (In (Node gv0 a2 c2) (carry p c1))
(In (Node gv0 a2 c2) (p ++ p)), (In (Node gv0 a2 c1) p), (In (Node gv0 a2 c1) (a2 :: p)), (In (Node gv0 a2 c1) (a1 :: p)), (In (Node gv0 a2 c1) (c2 :: p)), (In (Node gv0 a2 c1) (c1 :: p)), (In (Node gv0 a2 c1) (merge p p)), (In (Node gv0 a2 c1) (heap_delete_max a2)), (In (Node gv0 a2 c1) (heap_delete_max a1)), (In (Node gv0 a2 c1) (heap_delete_max c2))
(In (Node gv0 a2 c1) (heap_delete_max c1)), (In (Node gv0 a2 c1) (join p p a2)), (In (Node gv0 a2 c1) (join p p a1)), (In (Node gv0 a2 c1) (join p p c2)), (In (Node gv0 a2 c1) (join p p c1)), (In (Node gv0 a2 c1) (insert n p)), (In (Node gv0 a2 c1) (insert n0 p)), (In (Node gv0 a2 c1) (insert n1 p)), (In (Node gv0 a2 c1) (insert gv0 p)), (In (Node gv0 a2 c1) (carry p a2))
(In (Node gv0 a2 c1) (carry p a1)), (In (Node gv0 a2 c1) (carry p c2)), (In (Node gv0 a2 c1) (carry p c1)), (In (Node gv0 a2 c1) (p ++ p)), (In (Node gv0 a1 a2) p), (In (Node gv0 a1 a2) (a2 :: p)), (In (Node gv0 a1 a2) (a1 :: p)), (In (Node gv0 a1 a2) (c2 :: p)), (In (Node gv0 a1 a2) (c1 :: p)), (In (Node gv0 a1 a2) (merge p p))
(In (Node gv0 a1 a2) (heap_delete_max a2)), (In (Node gv0 a1 a2) (heap_delete_max a1)), (In (Node gv0 a1 a2) (heap_delete_max c2)), (In (Node gv0 a1 a2) (heap_delete_max c1)), (In (Node gv0 a1 a2) (join p p a2)), (In (Node gv0 a1 a2) (join p p a1)), (In (Node gv0 a1 a2) (join p p c2)), (In (Node gv0 a1 a2) (join p p c1)), (In (Node gv0 a1 a2) (insert n p)), (In (Node gv0 a1 a2) (insert n0 p))
(In (Node gv0 a1 a2) (insert n1 p)), (In (Node gv0 a1 a2) (insert gv0 p)), (In (Node gv0 a1 a2) (carry p a2)), (In (Node gv0 a1 a2) (carry p a1)), (In (Node gv0 a1 a2) (carry p c2)), (In (Node gv0 a1 a2) (carry p c1)), (In (Node gv0 a1 a2) (p ++ p)), (In (Node gv0 a1 a1) p), (In (Node gv0 a1 a1) (a2 :: p)), (In (Node gv0 a1 a1) (a1 :: p))
(In (Node gv0 a1 a1) (c2 :: p)), (In (Node gv0 a1 a1) (c1 :: p)), (In (Node gv0 a1 a1) (merge p p)), (In (Node gv0 a1 a1) (heap_delete_max a2)), (In (Node gv0 a1 a1) (heap_delete_max a1)), (In (Node gv0 a1 a1) (heap_delete_max c2)), (In (Node gv0 a1 a1) (heap_delete_max c1)), (In (Node gv0 a1 a1) (join p p a2)), (In (Node gv0 a1 a1) (join p p a1)), (In (Node gv0 a1 a1) (join p p c2))
(In (Node gv0 a1 a1) (join p p c1)), (In (Node gv0 a1 a1) (insert n p)), (In (Node gv0 a1 a1) (insert n0 p)), (In (Node gv0 a1 a1) (insert n1 p)), (In (Node gv0 a1 a1) (insert gv0 p)), (In (Node gv0 a1 a1) (carry p a2)), (In (Node gv0 a1 a1) (carry p a1)), (In (Node gv0 a1 a1) (carry p c2)), (In (Node gv0 a1 a1) (carry p c1)), (In (Node gv0 a1 a1) (p ++ p))
(In (Node gv0 a1 c2) p), (In (Node gv0 a1 c2) (a2 :: p)), (In (Node gv0 a1 c2) (a1 :: p)), (In (Node gv0 a1 c2) (c2 :: p)), (In (Node gv0 a1 c2) (c1 :: p)), (In (Node gv0 a1 c2) (merge p p)), (In (Node gv0 a1 c2) (heap_delete_max a2)), (In (Node gv0 a1 c2) (heap_delete_max a1)), (In (Node gv0 a1 c2) (heap_delete_max c2)), (In (Node gv0 a1 c2) (heap_delete_max c1))
(In (Node gv0 a1 c2) (join p p a2)), (In (Node gv0 a1 c2) (join p p a1)), (In (Node gv0 a1 c2) (join p p c2)), (In (Node gv0 a1 c2) (join p p c1)), (In (Node gv0 a1 c2) (insert n p)), (In (Node gv0 a1 c2) (insert n0 p)), (In (Node gv0 a1 c2) (insert n1 p)), (In (Node gv0 a1 c2) (insert gv0 p)), (In (Node gv0 a1 c2) (carry p a2)), (In (Node gv0 a1 c2) (carry p a1))
(In (Node gv0 a1 c2) (carry p c2)), (In (Node gv0 a1 c2) (carry p c1)), (In (Node gv0 a1 c2) (p ++ p)), (In (Node gv0 a1 c1) p), (In (Node gv0 a1 c1) (a2 :: p)), (In (Node gv0 a1 c1) (a1 :: p)), (In (Node gv0 a1 c1) (c2 :: p)), (In (Node gv0 a1 c1) (c1 :: p)), (In (Node gv0 a1 c1) (merge p p)), (In (Node gv0 a1 c1) (heap_delete_max a2))
(In (Node gv0 a1 c1) (heap_delete_max a1)), (In (Node gv0 a1 c1) (heap_delete_max c2)), (In (Node gv0 a1 c1) (heap_delete_max c1)), (In (Node gv0 a1 c1) (join p p a2)), (In (Node gv0 a1 c1) (join p p a1)), (In (Node gv0 a1 c1) (join p p c2)), (In (Node gv0 a1 c1) (join p p c1)), (In (Node gv0 a1 c1) (insert n p)), (In (Node gv0 a1 c1) (insert n0 p)), (In (Node gv0 a1 c1) (insert n1 p))
(In (Node gv0 a1 c1) (insert gv0 p)), (In (Node gv0 a1 c1) (carry p a2)), (In (Node gv0 a1 c1) (carry p a1)), (In (Node gv0 a1 c1) (carry p c2)), (In (Node gv0 a1 c1) (carry p c1)), (In (Node gv0 a1 c1) (p ++ p)), (In (Node gv0 c2 a2) p), (In (Node gv0 c2 a2) (a2 :: p)), (In (Node gv0 c2 a2) (a1 :: p)), (In (Node gv0 c2 a2) (c2 :: p))
(In (Node gv0 c2 a2) (c1 :: p)), (In (Node gv0 c2 a2) (merge p p)), (In (Node gv0 c2 a2) (heap_delete_max a2)), (In (Node gv0 c2 a2) (heap_delete_max a1)), (In (Node gv0 c2 a2) (heap_delete_max c2)), (In (Node gv0 c2 a2) (heap_delete_max c1)), (In (Node gv0 c2 a2) (join p p a2)), (In (Node gv0 c2 a2) (join p p a1)), (In (Node gv0 c2 a2) (join p p c2)), (In (Node gv0 c2 a2) (join p p c1))
(In (Node gv0 c2 a2) (insert n p)), (In (Node gv0 c2 a2) (insert n0 p)), (In (Node gv0 c2 a2) (insert n1 p)), (In (Node gv0 c2 a2) (insert gv0 p)), (In (Node gv0 c2 a2) (carry p a2)), (In (Node gv0 c2 a2) (carry p a1)), (In (Node gv0 c2 a2) (carry p c2)), (In (Node gv0 c2 a2) (carry p c1)), (In (Node gv0 c2 a2) (p ++ p)), (In (Node gv0 c2 a1) p)
(In (Node gv0 c2 a1) (a2 :: p)), (In (Node gv0 c2 a1) (a1 :: p)), (In (Node gv0 c2 a1) (c2 :: p)), (In (Node gv0 c2 a1) (c1 :: p)), (In (Node gv0 c2 a1) (merge p p)), (In (Node gv0 c2 a1) (heap_delete_max a2)), (In (Node gv0 c2 a1) (heap_delete_max a1)), (In (Node gv0 c2 a1) (heap_delete_max c2)), (In (Node gv0 c2 a1) (heap_delete_max c1)), (In (Node gv0 c2 a1) (join p p a2))
(In (Node gv0 c2 a1) (join p p a1)), (In (Node gv0 c2 a1) (join p p c2)), (In (Node gv0 c2 a1) (join p p c1)), (In (Node gv0 c2 a1) (insert n p)), (In (Node gv0 c2 a1) (insert n0 p)), (In (Node gv0 c2 a1) (insert n1 p)), (In (Node gv0 c2 a1) (insert gv0 p)), (In (Node gv0 c2 a1) (carry p a2)), (In (Node gv0 c2 a1) (carry p a1)), (In (Node gv0 c2 a1) (carry p c2))
(In (Node gv0 c2 a1) (carry p c1)), (In (Node gv0 c2 a1) (p ++ p)), (In (Node gv0 c2 c2) p), (In (Node gv0 c2 c2) (a2 :: p)), (In (Node gv0 c2 c2) (a1 :: p)), (In (Node gv0 c2 c2) (c2 :: p)), (In (Node gv0 c2 c2) (c1 :: p)), (In (Node gv0 c2 c2) (merge p p)), (In (Node gv0 c2 c2) (heap_delete_max a2)), (In (Node gv0 c2 c2) (heap_delete_max a1))
(In (Node gv0 c2 c2) (heap_delete_max c2)), (In (Node gv0 c2 c2) (heap_delete_max c1)), (In (Node gv0 c2 c2) (join p p a2)), (In (Node gv0 c2 c2) (join p p a1)), (In (Node gv0 c2 c2) (join p p c2)), (In (Node gv0 c2 c2) (join p p c1)), (In (Node gv0 c2 c2) (insert n p)), (In (Node gv0 c2 c2) (insert n0 p)), (In (Node gv0 c2 c2) (insert n1 p)), (In (Node gv0 c2 c2) (insert gv0 p))
(In (Node gv0 c2 c2) (carry p a2)), (In (Node gv0 c2 c2) (carry p a1)), (In (Node gv0 c2 c2) (carry p c2)), (In (Node gv0 c2 c2) (carry p c1)), (In (Node gv0 c2 c2) (p ++ p)), (In (Node gv0 c2 c1) p), (In (Node gv0 c2 c1) (a2 :: p)), (In (Node gv0 c2 c1) (a1 :: p)), (In (Node gv0 c2 c1) (c2 :: p)), (In (Node gv0 c2 c1) (c1 :: p))
(In (Node gv0 c2 c1) (merge p p)), (In (Node gv0 c2 c1) (heap_delete_max a2)), (In (Node gv0 c2 c1) (heap_delete_max a1)), (In (Node gv0 c2 c1) (heap_delete_max c2)), (In (Node gv0 c2 c1) (heap_delete_max c1)), (In (Node gv0 c2 c1) (join p p a2)), (In (Node gv0 c2 c1) (join p p a1)), (In (Node gv0 c2 c1) (join p p c2)), (In (Node gv0 c2 c1) (join p p c1)), (In (Node gv0 c2 c1) (insert n p))
(In (Node gv0 c2 c1) (insert n0 p)), (In (Node gv0 c2 c1) (insert n1 p)), (In (Node gv0 c2 c1) (insert gv0 p)), (In (Node gv0 c2 c1) (carry p a2)), (In (Node gv0 c2 c1) (carry p a1)), (In (Node gv0 c2 c1) (carry p c2)), (In (Node gv0 c2 c1) (carry p c1)), (In (Node gv0 c2 c1) (p ++ p)), (In (Node gv0 c1 a2) p), (In (Node gv0 c1 a2) (a2 :: p))
(In (Node gv0 c1 a2) (a1 :: p)), (In (Node gv0 c1 a2) (c2 :: p)), (In (Node gv0 c1 a2) (c1 :: p)), (In (Node gv0 c1 a2) (merge p p)), (In (Node gv0 c1 a2) (heap_delete_max a2)), (In (Node gv0 c1 a2) (heap_delete_max a1)), (In (Node gv0 c1 a2) (heap_delete_max c2)), (In (Node gv0 c1 a2) (heap_delete_max c1)), (In (Node gv0 c1 a2) (join p p a2)), (In (Node gv0 c1 a2) (join p p a1))
(In (Node gv0 c1 a2) (join p p c2)), (In (Node gv0 c1 a2) (join p p c1)), (In (Node gv0 c1 a2) (insert n p)), (In (Node gv0 c1 a2) (insert n0 p)), (In (Node gv0 c1 a2) (insert n1 p)), (In (Node gv0 c1 a2) (insert gv0 p)), (In (Node gv0 c1 a2) (carry p a2)), (In (Node gv0 c1 a2) (carry p a1)), (In (Node gv0 c1 a2) (carry p c2)), (In (Node gv0 c1 a2) (carry p c1))
(In (Node gv0 c1 a2) (p ++ p)), (In (Node gv0 c1 a1) p), (In (Node gv0 c1 a1) (a2 :: p)), (In (Node gv0 c1 a1) (a1 :: p)), (In (Node gv0 c1 a1) (c2 :: p)), (In (Node gv0 c1 a1) (c1 :: p)), (In (Node gv0 c1 a1) (merge p p)), (In (Node gv0 c1 a1) (heap_delete_max a2)), (In (Node gv0 c1 a1) (heap_delete_max a1)), (In (Node gv0 c1 a1) (heap_delete_max c2))
(In (Node gv0 c1 a1) (heap_delete_max c1)), (In (Node gv0 c1 a1) (join p p a2)), (In (Node gv0 c1 a1) (join p p a1)), (In (Node gv0 c1 a1) (join p p c2)), (In (Node gv0 c1 a1) (join p p c1)), (In (Node gv0 c1 a1) (insert n p)), (In (Node gv0 c1 a1) (insert n0 p)), (In (Node gv0 c1 a1) (insert n1 p)), (In (Node gv0 c1 a1) (insert gv0 p)), (In (Node gv0 c1 a1) (carry p a2))
(In (Node gv0 c1 a1) (carry p a1)), (In (Node gv0 c1 a1) (carry p c2)), (In (Node gv0 c1 a1) (carry p c1)), (In (Node gv0 c1 a1) (p ++ p)), (In (Node gv0 c1 c2) p), (In (Node gv0 c1 c2) (a2 :: p)), (In (Node gv0 c1 c2) (a1 :: p)), (In (Node gv0 c1 c2) (c2 :: p)), (In (Node gv0 c1 c2) (c1 :: p)), (In (Node gv0 c1 c2) (merge p p))
(In (Node gv0 c1 c2) (heap_delete_max a2)), (In (Node gv0 c1 c2) (heap_delete_max a1)), (In (Node gv0 c1 c2) (heap_delete_max c2)), (In (Node gv0 c1 c2) (heap_delete_max c1)), (In (Node gv0 c1 c2) (join p p a2)), (In (Node gv0 c1 c2) (join p p a1)), (In (Node gv0 c1 c2) (join p p c2)), (In (Node gv0 c1 c2) (join p p c1)), (In (Node gv0 c1 c2) (insert n p)), (In (Node gv0 c1 c2) (insert n0 p))
(In (Node gv0 c1 c2) (insert n1 p)), (In (Node gv0 c1 c2) (insert gv0 p)), (In (Node gv0 c1 c2) (carry p a2)), (In (Node gv0 c1 c2) (carry p a1)), (In (Node gv0 c1 c2) (carry p c2)), (In (Node gv0 c1 c2) (carry p c1)), (In (Node gv0 c1 c2) (p ++ p)), (In (Node gv0 c1 c1) p), (In (Node gv0 c1 c1) (a2 :: p)), (In (Node gv0 c1 c1) (a1 :: p))
(In (Node gv0 c1 c1) (c2 :: p)), (In (Node gv0 c1 c1) (c1 :: p)), (In (Node gv0 c1 c1) (merge p p)), (In (Node gv0 c1 c1) (heap_delete_max a2)), (In (Node gv0 c1 c1) (heap_delete_max a1)), (In (Node gv0 c1 c1) (heap_delete_max c2)), (In (Node gv0 c1 c1) (heap_delete_max c1)), (In (Node gv0 c1 c1) (join p p a2)), (In (Node gv0 c1 c1) (join p p a1)), (In (Node gv0 c1 c1) (join p p c2))
(In (Node gv0 c1 c1) (join p p c1)), (In (Node gv0 c1 c1) (insert n p)), (In (Node gv0 c1 c1) (insert n0 p)), (In (Node gv0 c1 c1) (insert n1 p)), (In (Node gv0 c1 c1) (insert gv0 p)), (In (Node gv0 c1 c1) (carry p a2)), (In (Node gv0 c1 c1) (carry p a1)), (In (Node gv0 c1 c1) (carry p c2)), (In (Node gv0 c1 c1) (carry p c1)), (In (Node gv0 c1 c1) (p ++ p))
(In (smash a2 a2) p), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max c2)), (In (smash a2 a2) (heap_delete_max c1))
(In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (insert n p)), (In (smash a2 a2) (insert n0 p)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert gv0 p)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1))
(In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1)), (In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (c2 :: p)), (In (smash a2 a1) (c1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max a2))
(In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max c2)), (In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p c2)), (In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n1 p))
(In (smash a2 a1) (insert gv0 p)), (In (smash a2 a1) (carry p a2)), (In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1)), (In (smash a2 a1) (p ++ p)), (In (smash a2 c2) p), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p)), (In (smash a2 c2) (c2 :: p))
(In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max a2)), (In (smash a2 c2) (heap_delete_max a1)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (join p p a2)), (In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1))
(In (smash a2 c2) (insert n p)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert gv0 p)), (In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p c2)), (In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p)
(In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p)), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p)), (In (smash a2 c1) (merge p p)), (In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (join p p a2))
(In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (insert n0 p)), (In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert gv0 p)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p c2))
(In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1))
(In (smash a1 a2) (heap_delete_max c2)), (In (smash a1 a2) (heap_delete_max c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p c2)), (In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (insert n p)), (In (smash a1 a2) (insert n0 p)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert gv0 p))
(In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (c2 :: p)), (In (smash a1 a1) (c1 :: p))
(In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p c2)), (In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (insert n p))
(In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert gv0 p)), (In (smash a1 a1) (carry p a2)), (In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1)), (In (smash a1 a1) (p ++ p)), (In (smash a1 c2) p), (In (smash a1 c2) (a2 :: p))
(In (smash a1 c2) (a1 :: p)), (In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1)), (In (smash a1 c2) (heap_delete_max c2)), (In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (join p p a2)), (In (smash a1 c2) (join p p a1))
(In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert gv0 p)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1)), (In (smash a1 c2) (carry p c2)), (In (smash a1 c2) (carry p c1))
(In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p)), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (merge p p)), (In (smash a1 c1) (heap_delete_max a2)), (In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max c2))
(In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (join p p a2)), (In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1)), (In (smash a1 c1) (insert n p)), (In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert gv0 p)), (In (smash a1 c1) (carry p a2))
(In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (p ++ p)), (In (smash c2 a2) p), (In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p)), (In (smash c2 a2) (merge p p))
(In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max c2)), (In (smash c2 a2) (heap_delete_max c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (insert n p)), (In (smash c2 a2) (insert n0 p))
(In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert gv0 p)), (In (smash c2 a2) (carry p a2)), (In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p))
(In (smash c2 a1) (c2 :: p)), (In (smash c2 a1) (c1 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p c2))
(In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert gv0 p)), (In (smash c2 a1) (carry p a2)), (In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1)), (In (smash c2 a1) (p ++ p))
(In (smash c2 c2) p), (In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p)), (In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1))
(In (smash c2 c2) (join p p a2)), (In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert gv0 p)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1))
(In (smash c2 c2) (carry p c2)), (In (smash c2 c2) (carry p c1)), (In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p)), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (merge p p)), (In (smash c2 c1) (heap_delete_max a2))
(In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max c2)), (In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (join p p a2)), (In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n1 p))
(In (smash c2 c1) (insert gv0 p)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1)), (In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (p ++ p)), (In (smash c1 a2) p), (In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (c2 :: p))
(In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max a2)), (In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max c2)), (In (smash c1 a2) (heap_delete_max c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1))
(In (smash c1 a2) (insert n p)), (In (smash c1 a2) (insert n0 p)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert gv0 p)), (In (smash c1 a2) (carry p a2)), (In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p)
(In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (c2 :: p)), (In (smash c1 a1) (c1 :: p)), (In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (join p p a2))
(In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p c2)), (In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (insert n0 p)), (In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert gv0 p)), (In (smash c1 a1) (carry p a2)), (In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p c2))
(In (smash c1 a1) (carry p c1)), (In (smash c1 a1) (p ++ p)), (In (smash c1 c2) p), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p)), (In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1))
(In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (join p p a2)), (In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p c2)), (In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert gv0 p))
(In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p c2)), (In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p), (In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p)), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p))
(In (smash c1 c1) (merge p p)), (In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (join p p a2)), (In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1)), (In (smash c1 c1) (insert n p))
(In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert gv0 p)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1)), (In (smash c1 c1) (p ++ p)), (In Leaf p), (In Leaf (a2 :: p))
(In Leaf (a1 :: p)), (In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1)), (In Leaf (heap_delete_max c2)), (In Leaf (heap_delete_max c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1))
(In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (insert n p)), (In Leaf (insert n0 p)), (In Leaf (insert n1 p)), (In Leaf (insert gv0 p)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (carry p c2)), (In Leaf (carry p c1))
(In Leaf (p ++ p)), (n < find_max' n p), (n < find_max' n0 p), (n < find_max' n1 p), (n < find_max' gv0 p), (n < length p), (n0 < find_max' n p), (n0 < find_max' n0 p), (n0 < find_max' n1 p), (n0 < find_max' gv0 p)
(n0 < length p), (n1 < find_max' n p), (n1 < find_max' n0 p), (n1 < find_max' n1 p), (n1 < find_max' gv0 p), (n1 < length p), (gv0 < find_max' n p), (gv0 < find_max' n0 p), (gv0 < find_max' n1 p), (gv0 < find_max' gv0 p)
(gv0 < length p), (find_max' n p < n), (find_max' n p < n0), (find_max' n p < n1), (find_max' n p < gv0), (find_max' n p < find_max' n0 p), (find_max' n p < find_max' n1 p), (find_max' n p < find_max' gv0 p), (find_max' n p < length p), (find_max' n0 p < n)
(find_max' n0 p < n0), (find_max' n0 p < n1), (find_max' n0 p < gv0), (find_max' n0 p < find_max' n p), (find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' gv0 p), (find_max' n0 p < length p), (find_max' n1 p < n), (find_max' n1 p < n0), (find_max' n1 p < n1)
(find_max' n1 p < gv0), (find_max' n1 p < find_max' n p), (find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' gv0 p), (find_max' n1 p < length p), (find_max' gv0 p < n), (find_max' gv0 p < n0), (find_max' gv0 p < n1), (find_max' gv0 p < gv0), (find_max' gv0 p < find_max' n p)
(find_max' gv0 p < find_max' n0 p), (find_max' gv0 p < find_max' n1 p), (find_max' gv0 p < length p), (length p < n), (length p < n0), (length p < n1), (length p < gv0), (length p < find_max' n p), (length p < find_max' n0 p), (length p < find_max' n1 p)
(length p < find_max' gv0 p), (n <= find_max' n p), (n <= find_max' n0 p), (n <= find_max' n1 p), (n <= find_max' gv0 p), (n <= length p), (n0 <= find_max' n p), (n0 <= find_max' n0 p), (n0 <= find_max' n1 p), (n0 <= find_max' gv0 p)
(n0 <= length p), (n1 <= find_max' n p), (n1 <= find_max' n0 p), (n1 <= find_max' n1 p), (n1 <= find_max' gv0 p), (n1 <= length p), (gv0 <= find_max' n p), (gv0 <= find_max' n0 p), (gv0 <= find_max' n1 p), (gv0 <= find_max' gv0 p)
(gv0 <= length p), (find_max' n p <= n), (find_max' n p <= n0), (find_max' n p <= n1), (find_max' n p <= gv0), (find_max' n p <= find_max' n0 p), (find_max' n p <= find_max' n1 p), (find_max' n p <= find_max' gv0 p), (find_max' n p <= length p), (find_max' n0 p <= n)
(find_max' n0 p <= n0), (find_max' n0 p <= n1), (find_max' n0 p <= gv0), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' gv0 p), (find_max' n0 p <= length p), (find_max' n1 p <= n), (find_max' n1 p <= n0), (find_max' n1 p <= n1)
(find_max' n1 p <= gv0), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' gv0 p), (find_max' n1 p <= length p), (find_max' gv0 p <= n), (find_max' gv0 p <= n0), (find_max' gv0 p <= n1), (find_max' gv0 p <= gv0), (find_max' gv0 p <= find_max' n p)
(find_max' gv0 p <= find_max' n0 p), (find_max' gv0 p <= find_max' n1 p), (find_max' gv0 p <= length p), (length p <= n), (length p <= n0), (length p <= n1), (length p <= gv0), (length p <= find_max' n p), (length p <= find_max' n0 p), (length p <= find_max' n1 p)
(length p <= find_max' gv0 p), (~ priq p), (~ priqq n p), (~ priqq n0 p), (~ priqq n1 p), (~ priqq gv0 p), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n c2), (~ pow2heap n c1)
(~ pow2heap n0 a2), (~ pow2heap n0 a1), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 c2), (~ pow2heap n1 c1), (~ pow2heap gv0 a2), (~ pow2heap gv0 a1)
(~ pow2heap gv0 c2), (~ pow2heap gv0 c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1), (~ pow2heapp n n c2), (~ pow2heapp n n c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 c2), (~ pow2heapp n n0 c1)
(~ pow2heapp n n1 a2), (~ pow2heapp n n1 a1), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n gv0 a2), (~ pow2heapp n gv0 a1), (~ pow2heapp n gv0 c2), (~ pow2heapp n gv0 c1), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1)
(~ pow2heapp n0 n c2), (~ pow2heapp n0 n c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1), (~ pow2heapp n0 n0 c2), (~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1)
(~ pow2heapp n0 gv0 a2), (~ pow2heapp n0 gv0 a1), (~ pow2heapp n0 gv0 c2), (~ pow2heapp n0 gv0 c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1)
(~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1), (~ pow2heapp n1 n1 c2), (~ pow2heapp n1 n1 c1), (~ pow2heapp n1 gv0 a2), (~ pow2heapp n1 gv0 a1), (~ pow2heapp n1 gv0 c2), (~ pow2heapp n1 gv0 c1)
(~ pow2heapp gv0 n a2), (~ pow2heapp gv0 n a1), (~ pow2heapp gv0 n c2), (~ pow2heapp gv0 n c1), (~ pow2heapp gv0 n0 a2), (~ pow2heapp gv0 n0 a1), (~ pow2heapp gv0 n0 c2), (~ pow2heapp gv0 n0 c1), (~ pow2heapp gv0 n1 a2), (~ pow2heapp gv0 n1 a1)
(~ pow2heapp gv0 n1 c2), (~ pow2heapp gv0 n1 c1), (~ pow2heapp gv0 gv0 a2), (~ pow2heapp gv0 gv0 a1), (~ pow2heapp gv0 gv0 c2), (~ pow2heapp gv0 gv0 c1), (~ Permutation p p), (~ In a2 p), (~ In a1 p), (~ In c2 p)
(~ In c1 p), (~ n < n), (~ n < n0), (~ n < n1), (~ n < gv0), (~ n0 < n), (~ n0 < n0), (~ n0 < n1), (~ n0 < gv0), (~ n1 < n)
(~ n1 < n0), (~ n1 < n1), (~ n1 < gv0), (~ gv0 < n), (~ gv0 < n0), (~ gv0 < n1), (~ gv0 < gv0), (~ n <= n), (~ n <= n0), (~ n <= n1)
(~ n <= gv0), (~ n0 <= n), (~ n0 <= n0), (~ n0 <= n1), (~ n0 <= gv0), (~ n1 <= n), (~ n1 <= n0), (~ n1 <= n1), (~ n1 <= gv0), (~ gv0 <= n)
(~ gv0 <= n0), (~ gv0 <= n1), (~ gv0 <= gv0), (p <> p), (a2 <> a2), (a2 <> a1), (a2 <> c2), (a2 <> c1), (a1 <> a2), (a1 <> a1)
(a1 <> c2), (a1 <> c1), (c2 <> a2), (c2 <> a1), (c2 <> c2), (c2 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> c2), (c1 <> c1)
(n <> n), (n <> n0), (n <> n1), (n <> gv0), (n0 <> n), (n0 <> n0), (n0 <> n1), (n0 <> gv0), (n1 <> n), (n1 <> n0)
(n1 <> n1), (n1 <> gv0), (gv0 <> n), (gv0 <> n0), (gv0 <> n1), (gv0 <> gv0), (None = Some p), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = insert n p), (a2 :: p = insert n0 p), (a2 :: p = insert n1 p)
(a2 :: p = insert gv0 p), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p c2), (a2 :: p = carry p c1), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max a2)
(a1 :: p = heap_delete_max a1), (a1 :: p = heap_delete_max c2), (a1 :: p = heap_delete_max c1), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = insert n p), (a1 :: p = insert n0 p), (a1 :: p = insert n1 p)
(a1 :: p = insert gv0 p), (a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = p ++ p), (a1 :: p = []), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max a2)
(c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max c2), (c2 :: p = heap_delete_max c1), (c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p c2), (c2 :: p = join p p c1), (c2 :: p = insert n p), (c2 :: p = insert n0 p), (c2 :: p = insert n1 p)
(c2 :: p = insert gv0 p), (c2 :: p = carry p a2), (c2 :: p = carry p a1), (c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p), (c1 :: p = merge p p), (c1 :: p = heap_delete_max a2)
(c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1), (c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p c2), (c1 :: p = join p p c1), (c1 :: p = insert n p), (c1 :: p = insert n0 p), (c1 :: p = insert n1 p)
(c1 :: p = insert gv0 p), (c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p c2), (c1 :: p = carry p c1), (c1 :: p = p ++ p), (c1 :: p = []), (merge p p = p), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1)
(merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = join p p a2), (merge p p = join p p a1), (merge p p = join p p c2), (merge p p = join p p c1), (merge p p = insert n p), (merge p p = insert n0 p), (merge p p = insert n1 p), (merge p p = insert gv0 p)
(merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p c2), (merge p p = carry p c1), (merge p p = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1)
(heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p c2), (heap_delete_max a1 = carry p c1), (heap_delete_max a1 = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1)
(heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p), (heap_delete_max c1 = carry p a2), (heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p c2), (heap_delete_max c1 = carry p c1), (heap_delete_max c1 = p ++ p), (join p p a2 = p)
(join p p a2 = heap_delete_max a2), (join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = insert n p), (join p p a2 = insert n0 p), (join p p a2 = insert n1 p), (join p p a2 = insert gv0 p), (join p p a2 = carry p a2), (join p p a2 = carry p a1)
(join p p a2 = carry p c2), (join p p a2 = carry p c1), (join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = insert n p), (join p p a1 = insert n0 p)
(join p p a1 = insert n1 p), (join p p a1 = insert gv0 p), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = p ++ p), (join p p c2 = p), (join p p c2 = heap_delete_max a2), (join p p c2 = heap_delete_max a1)
(join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = insert n p), (join p p c2 = insert n0 p), (join p p c2 = insert n1 p), (join p p c2 = insert gv0 p), (join p p c2 = carry p a2), (join p p c2 = carry p a1), (join p p c2 = carry p c2), (join p p c2 = carry p c1)
(join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = insert n p), (join p p c1 = insert n0 p), (join p p c1 = insert n1 p), (join p p c1 = insert gv0 p)
(join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p c2), (join p p c1 = carry p c1), (join p p c1 = p ++ p), (insert n p = p), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1), (insert n p = heap_delete_max c2), (insert n p = heap_delete_max c1)
(insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max c2), (insert n0 p = heap_delete_max c1)
(insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p c2), (insert n0 p = carry p c1), (insert n0 p = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max c2), (insert n1 p = heap_delete_max c1)
(insert n1 p = carry p a2), (insert n1 p = carry p a1), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = p ++ p), (insert gv0 p = p), (insert gv0 p = heap_delete_max a2), (insert gv0 p = heap_delete_max a1), (insert gv0 p = heap_delete_max c2), (insert gv0 p = heap_delete_max c1)
(insert gv0 p = carry p a2), (insert gv0 p = carry p a1), (insert gv0 p = carry p c2), (insert gv0 p = carry p c1), (insert gv0 p = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (carry p c2 = p)
(carry p c2 = p ++ p), (carry p c1 = p), (carry p c1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max c2), ([] = heap_delete_max c1)
([] = join p p a2), ([] = join p p a1), ([] = join p p c2), ([] = join p p c1), ([] = insert n p), ([] = insert n0 p), ([] = insert n1 p), ([] = insert gv0 p), ([] = carry p a2), ([] = carry p a1)
([] = carry p c2), ([] = carry p c1), ([] = p ++ p), ((p, p) = delete_max_aux n p), ((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n1 p), ((p, p) = delete_max_aux gv0 p), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = c2)
(Node n a2 a2 = c1), (Node n a2 a2 = smash a2 a2), (Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash c2 a2)
(Node n a2 a2 = smash c2 a1), (Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = c2)
(Node n a2 a1 = c1), (Node n a2 a1 = smash a2 a2), (Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash c2 a2)
(Node n a2 a1 = smash c2 a1), (Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = c2)
(Node n a2 c2 = c1), (Node n a2 c2 = smash a2 a2), (Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash c2 a2)
(Node n a2 c2 = smash c2 a1), (Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = c2)
(Node n a2 c1 = c1), (Node n a2 c1 = smash a2 a2), (Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash c2 a2)
(Node n a2 c1 = smash c2 a1), (Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = c2)
(Node n a1 a2 = c1), (Node n a1 a2 = smash a2 a2), (Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash c2 a2)
(Node n a1 a2 = smash c2 a1), (Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = c2)
(Node n a1 a1 = c1), (Node n a1 a1 = smash a2 a2), (Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash c2 a2)
(Node n a1 a1 = smash c2 a1), (Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = c2)
(Node n a1 c2 = c1), (Node n a1 c2 = smash a2 a2), (Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash c2 a2)
(Node n a1 c2 = smash c2 a1), (Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = c2)
(Node n a1 c1 = c1), (Node n a1 c1 = smash a2 a2), (Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash c2 a2)
(Node n a1 c1 = smash c2 a1), (Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = c2)
(Node n c2 a2 = c1), (Node n c2 a2 = smash a2 a2), (Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash c2 a2)
(Node n c2 a2 = smash c2 a1), (Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = c2)
(Node n c2 a1 = c1), (Node n c2 a1 = smash a2 a2), (Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash c2 a2)
(Node n c2 a1 = smash c2 a1), (Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = c2)
(Node n c2 c2 = c1), (Node n c2 c2 = smash a2 a2), (Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash c2 a2)
(Node n c2 c2 = smash c2 a1), (Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = c2)
(Node n c2 c1 = c1), (Node n c2 c1 = smash a2 a2), (Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash c2 a2)
(Node n c2 c1 = smash c2 a1), (Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = c2)
(Node n c1 a2 = c1), (Node n c1 a2 = smash a2 a2), (Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash c2 a2)
(Node n c1 a2 = smash c2 a1), (Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = c2)
(Node n c1 a1 = c1), (Node n c1 a1 = smash a2 a2), (Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash c2 a2)
(Node n c1 a1 = smash c2 a1), (Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = c2)
(Node n c1 c2 = c1), (Node n c1 c2 = smash a2 a2), (Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash c2 a2)
(Node n c1 c2 = smash c2 a1), (Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = c2)
(Node n c1 c1 = c1), (Node n c1 c1 = smash a2 a2), (Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash c2 a2)
(Node n c1 c1 = smash c2 a1), (Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = c2)
(Node n0 a2 a2 = c1), (Node n0 a2 a2 = smash a2 a2), (Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash c2 a2)
(Node n0 a2 a2 = smash c2 a1), (Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = c2)
(Node n0 a2 a1 = c1), (Node n0 a2 a1 = smash a2 a2), (Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash c2 a2)
(Node n0 a2 a1 = smash c2 a1), (Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = c2)
(Node n0 a2 c2 = c1), (Node n0 a2 c2 = smash a2 a2), (Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash c2 a2)
(Node n0 a2 c2 = smash c2 a1), (Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = c2)
(Node n0 a2 c1 = c1), (Node n0 a2 c1 = smash a2 a2), (Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash c2 a2)
(Node n0 a2 c1 = smash c2 a1), (Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = c2)
(Node n0 a1 a2 = c1), (Node n0 a1 a2 = smash a2 a2), (Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash c2 a2)
(Node n0 a1 a2 = smash c2 a1), (Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = c2)
(Node n0 a1 a1 = c1), (Node n0 a1 a1 = smash a2 a2), (Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash c2 a2)
(Node n0 a1 a1 = smash c2 a1), (Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = c2)
(Node n0 a1 c2 = c1), (Node n0 a1 c2 = smash a2 a2), (Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash c2 a2)
(Node n0 a1 c2 = smash c2 a1), (Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = c2)
(Node n0 a1 c1 = c1), (Node n0 a1 c1 = smash a2 a2), (Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash c2 a2)
(Node n0 a1 c1 = smash c2 a1), (Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = c2)
(Node n0 c2 a2 = c1), (Node n0 c2 a2 = smash a2 a2), (Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash c2 a2)
(Node n0 c2 a2 = smash c2 a1), (Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = c2)
(Node n0 c2 a1 = c1), (Node n0 c2 a1 = smash a2 a2), (Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash c2 a2)
(Node n0 c2 a1 = smash c2 a1), (Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = c2)
(Node n0 c2 c2 = c1), (Node n0 c2 c2 = smash a2 a2), (Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash c2 a2)
(Node n0 c2 c2 = smash c2 a1), (Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = c2)
(Node n0 c2 c1 = c1), (Node n0 c2 c1 = smash a2 a2), (Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash c2 a2)
(Node n0 c2 c1 = smash c2 a1), (Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = c2)
(Node n0 c1 a2 = c1), (Node n0 c1 a2 = smash a2 a2), (Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash c2 a2)
(Node n0 c1 a2 = smash c2 a1), (Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = c2)
(Node n0 c1 a1 = c1), (Node n0 c1 a1 = smash a2 a2), (Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash c2 a2)
(Node n0 c1 a1 = smash c2 a1), (Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = c2)
(Node n0 c1 c2 = c1), (Node n0 c1 c2 = smash a2 a2), (Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash c2 a2)
(Node n0 c1 c2 = smash c2 a1), (Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = c2)
(Node n0 c1 c1 = c1), (Node n0 c1 c1 = smash a2 a2), (Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash c2 a2)
(Node n0 c1 c1 = smash c2 a1), (Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = c2)
(Node n1 a2 a2 = c1), (Node n1 a2 a2 = smash a2 a2), (Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash c2 a2)
(Node n1 a2 a2 = smash c2 a1), (Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = c2)
(Node n1 a2 a1 = c1), (Node n1 a2 a1 = smash a2 a2), (Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash c2 a2)
(Node n1 a2 a1 = smash c2 a1), (Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = c2)
(Node n1 a2 c2 = c1), (Node n1 a2 c2 = smash a2 a2), (Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash c2 a2)
(Node n1 a2 c2 = smash c2 a1), (Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = c2)
(Node n1 a2 c1 = c1), (Node n1 a2 c1 = smash a2 a2), (Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash c2 a2)
(Node n1 a2 c1 = smash c2 a1), (Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = c2)
(Node n1 a1 a2 = c1), (Node n1 a1 a2 = smash a2 a2), (Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash c2 a2)
(Node n1 a1 a2 = smash c2 a1), (Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = c2)
(Node n1 a1 a1 = c1), (Node n1 a1 a1 = smash a2 a2), (Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash c2 a2)
(Node n1 a1 a1 = smash c2 a1), (Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = c2)
(Node n1 a1 c2 = c1), (Node n1 a1 c2 = smash a2 a2), (Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash c2 a2)
(Node n1 a1 c2 = smash c2 a1), (Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = c2)
(Node n1 a1 c1 = c1), (Node n1 a1 c1 = smash a2 a2), (Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash c2 a2)
(Node n1 a1 c1 = smash c2 a1), (Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = c2)
(Node n1 c2 a2 = c1), (Node n1 c2 a2 = smash a2 a2), (Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash c2 a2)
(Node n1 c2 a2 = smash c2 a1), (Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = c2)
(Node n1 c2 a1 = c1), (Node n1 c2 a1 = smash a2 a2), (Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash c2 a2)
(Node n1 c2 a1 = smash c2 a1), (Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = c2)
(Node n1 c2 c2 = c1), (Node n1 c2 c2 = smash a2 a2), (Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash c2 a2)
(Node n1 c2 c2 = smash c2 a1), (Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = c2)
(Node n1 c2 c1 = c1), (Node n1 c2 c1 = smash a2 a2), (Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash c2 a2)
(Node n1 c2 c1 = smash c2 a1), (Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = c2)
(Node n1 c1 a2 = c1), (Node n1 c1 a2 = smash a2 a2), (Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash c2 a2)
(Node n1 c1 a2 = smash c2 a1), (Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = c2)
(Node n1 c1 a1 = c1), (Node n1 c1 a1 = smash a2 a2), (Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash c2 a2)
(Node n1 c1 a1 = smash c2 a1), (Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = c2)
(Node n1 c1 c2 = c1), (Node n1 c1 c2 = smash a2 a2), (Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash c2 a2)
(Node n1 c1 c2 = smash c2 a1), (Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = c2)
(Node n1 c1 c1 = c1), (Node n1 c1 c1 = smash a2 a2), (Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash c2 a2)
(Node n1 c1 c1 = smash c2 a1), (Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node gv0 a2 a2 = a2), (Node gv0 a2 a2 = a1), (Node gv0 a2 a2 = c2)
(Node gv0 a2 a2 = c1), (Node gv0 a2 a2 = smash a2 a2), (Node gv0 a2 a2 = smash a2 a1), (Node gv0 a2 a2 = smash a2 c2), (Node gv0 a2 a2 = smash a2 c1), (Node gv0 a2 a2 = smash a1 a2), (Node gv0 a2 a2 = smash a1 a1), (Node gv0 a2 a2 = smash a1 c2), (Node gv0 a2 a2 = smash a1 c1), (Node gv0 a2 a2 = smash c2 a2)
(Node gv0 a2 a2 = smash c2 a1), (Node gv0 a2 a2 = smash c2 c2), (Node gv0 a2 a2 = smash c2 c1), (Node gv0 a2 a2 = smash c1 a2), (Node gv0 a2 a2 = smash c1 a1), (Node gv0 a2 a2 = smash c1 c2), (Node gv0 a2 a2 = smash c1 c1), (Node gv0 a2 a1 = a2), (Node gv0 a2 a1 = a1), (Node gv0 a2 a1 = c2)
(Node gv0 a2 a1 = c1), (Node gv0 a2 a1 = smash a2 a2), (Node gv0 a2 a1 = smash a2 a1), (Node gv0 a2 a1 = smash a2 c2), (Node gv0 a2 a1 = smash a2 c1), (Node gv0 a2 a1 = smash a1 a2), (Node gv0 a2 a1 = smash a1 a1), (Node gv0 a2 a1 = smash a1 c2), (Node gv0 a2 a1 = smash a1 c1), (Node gv0 a2 a1 = smash c2 a2)
(Node gv0 a2 a1 = smash c2 a1), (Node gv0 a2 a1 = smash c2 c2), (Node gv0 a2 a1 = smash c2 c1), (Node gv0 a2 a1 = smash c1 a2), (Node gv0 a2 a1 = smash c1 a1), (Node gv0 a2 a1 = smash c1 c2), (Node gv0 a2 a1 = smash c1 c1), (Node gv0 a2 c2 = a2), (Node gv0 a2 c2 = a1), (Node gv0 a2 c2 = c2)
(Node gv0 a2 c2 = c1), (Node gv0 a2 c2 = smash a2 a2), (Node gv0 a2 c2 = smash a2 a1), (Node gv0 a2 c2 = smash a2 c2), (Node gv0 a2 c2 = smash a2 c1), (Node gv0 a2 c2 = smash a1 a2), (Node gv0 a2 c2 = smash a1 a1), (Node gv0 a2 c2 = smash a1 c2), (Node gv0 a2 c2 = smash a1 c1), (Node gv0 a2 c2 = smash c2 a2)
(Node gv0 a2 c2 = smash c2 a1), (Node gv0 a2 c2 = smash c2 c2), (Node gv0 a2 c2 = smash c2 c1), (Node gv0 a2 c2 = smash c1 a2), (Node gv0 a2 c2 = smash c1 a1), (Node gv0 a2 c2 = smash c1 c2), (Node gv0 a2 c2 = smash c1 c1), (Node gv0 a2 c1 = a2), (Node gv0 a2 c1 = a1), (Node gv0 a2 c1 = c2)
(Node gv0 a2 c1 = c1), (Node gv0 a2 c1 = smash a2 a2), (Node gv0 a2 c1 = smash a2 a1), (Node gv0 a2 c1 = smash a2 c2), (Node gv0 a2 c1 = smash a2 c1), (Node gv0 a2 c1 = smash a1 a2), (Node gv0 a2 c1 = smash a1 a1), (Node gv0 a2 c1 = smash a1 c2), (Node gv0 a2 c1 = smash a1 c1), (Node gv0 a2 c1 = smash c2 a2)
(Node gv0 a2 c1 = smash c2 a1), (Node gv0 a2 c1 = smash c2 c2), (Node gv0 a2 c1 = smash c2 c1), (Node gv0 a2 c1 = smash c1 a2), (Node gv0 a2 c1 = smash c1 a1), (Node gv0 a2 c1 = smash c1 c2), (Node gv0 a2 c1 = smash c1 c1), (Node gv0 a1 a2 = a2), (Node gv0 a1 a2 = a1), (Node gv0 a1 a2 = c2)
(Node gv0 a1 a2 = c1), (Node gv0 a1 a2 = smash a2 a2), (Node gv0 a1 a2 = smash a2 a1), (Node gv0 a1 a2 = smash a2 c2), (Node gv0 a1 a2 = smash a2 c1), (Node gv0 a1 a2 = smash a1 a2), (Node gv0 a1 a2 = smash a1 a1), (Node gv0 a1 a2 = smash a1 c2), (Node gv0 a1 a2 = smash a1 c1), (Node gv0 a1 a2 = smash c2 a2)
(Node gv0 a1 a2 = smash c2 a1), (Node gv0 a1 a2 = smash c2 c2), (Node gv0 a1 a2 = smash c2 c1), (Node gv0 a1 a2 = smash c1 a2), (Node gv0 a1 a2 = smash c1 a1), (Node gv0 a1 a2 = smash c1 c2), (Node gv0 a1 a2 = smash c1 c1), (Node gv0 a1 a1 = a2), (Node gv0 a1 a1 = a1), (Node gv0 a1 a1 = c2)
(Node gv0 a1 a1 = c1), (Node gv0 a1 a1 = smash a2 a2), (Node gv0 a1 a1 = smash a2 a1), (Node gv0 a1 a1 = smash a2 c2), (Node gv0 a1 a1 = smash a2 c1), (Node gv0 a1 a1 = smash a1 a2), (Node gv0 a1 a1 = smash a1 a1), (Node gv0 a1 a1 = smash a1 c2), (Node gv0 a1 a1 = smash a1 c1), (Node gv0 a1 a1 = smash c2 a2)
(Node gv0 a1 a1 = smash c2 a1), (Node gv0 a1 a1 = smash c2 c2), (Node gv0 a1 a1 = smash c2 c1), (Node gv0 a1 a1 = smash c1 a2), (Node gv0 a1 a1 = smash c1 a1), (Node gv0 a1 a1 = smash c1 c2), (Node gv0 a1 a1 = smash c1 c1), (Node gv0 a1 c2 = a2), (Node gv0 a1 c2 = a1), (Node gv0 a1 c2 = c2)
(Node gv0 a1 c2 = c1), (Node gv0 a1 c2 = smash a2 a2), (Node gv0 a1 c2 = smash a2 a1), (Node gv0 a1 c2 = smash a2 c2), (Node gv0 a1 c2 = smash a2 c1), (Node gv0 a1 c2 = smash a1 a2), (Node gv0 a1 c2 = smash a1 a1), (Node gv0 a1 c2 = smash a1 c2), (Node gv0 a1 c2 = smash a1 c1), (Node gv0 a1 c2 = smash c2 a2)
(Node gv0 a1 c2 = smash c2 a1), (Node gv0 a1 c2 = smash c2 c2), (Node gv0 a1 c2 = smash c2 c1), (Node gv0 a1 c2 = smash c1 a2), (Node gv0 a1 c2 = smash c1 a1), (Node gv0 a1 c2 = smash c1 c2), (Node gv0 a1 c2 = smash c1 c1), (Node gv0 a1 c1 = a2), (Node gv0 a1 c1 = a1), (Node gv0 a1 c1 = c2)
(Node gv0 a1 c1 = c1), (Node gv0 a1 c1 = smash a2 a2), (Node gv0 a1 c1 = smash a2 a1), (Node gv0 a1 c1 = smash a2 c2), (Node gv0 a1 c1 = smash a2 c1), (Node gv0 a1 c1 = smash a1 a2), (Node gv0 a1 c1 = smash a1 a1), (Node gv0 a1 c1 = smash a1 c2), (Node gv0 a1 c1 = smash a1 c1), (Node gv0 a1 c1 = smash c2 a2)
(Node gv0 a1 c1 = smash c2 a1), (Node gv0 a1 c1 = smash c2 c2), (Node gv0 a1 c1 = smash c2 c1), (Node gv0 a1 c1 = smash c1 a2), (Node gv0 a1 c1 = smash c1 a1), (Node gv0 a1 c1 = smash c1 c2), (Node gv0 a1 c1 = smash c1 c1), (Node gv0 c2 a2 = a2), (Node gv0 c2 a2 = a1), (Node gv0 c2 a2 = c2)
(Node gv0 c2 a2 = c1), (Node gv0 c2 a2 = smash a2 a2), (Node gv0 c2 a2 = smash a2 a1), (Node gv0 c2 a2 = smash a2 c2), (Node gv0 c2 a2 = smash a2 c1), (Node gv0 c2 a2 = smash a1 a2), (Node gv0 c2 a2 = smash a1 a1), (Node gv0 c2 a2 = smash a1 c2), (Node gv0 c2 a2 = smash a1 c1), (Node gv0 c2 a2 = smash c2 a2)
(Node gv0 c2 a2 = smash c2 a1), (Node gv0 c2 a2 = smash c2 c2), (Node gv0 c2 a2 = smash c2 c1), (Node gv0 c2 a2 = smash c1 a2), (Node gv0 c2 a2 = smash c1 a1), (Node gv0 c2 a2 = smash c1 c2), (Node gv0 c2 a2 = smash c1 c1), (Node gv0 c2 a1 = a2), (Node gv0 c2 a1 = a1), (Node gv0 c2 a1 = c2)
(Node gv0 c2 a1 = c1), (Node gv0 c2 a1 = smash a2 a2), (Node gv0 c2 a1 = smash a2 a1), (Node gv0 c2 a1 = smash a2 c2), (Node gv0 c2 a1 = smash a2 c1), (Node gv0 c2 a1 = smash a1 a2), (Node gv0 c2 a1 = smash a1 a1), (Node gv0 c2 a1 = smash a1 c2), (Node gv0 c2 a1 = smash a1 c1), (Node gv0 c2 a1 = smash c2 a2)
(Node gv0 c2 a1 = smash c2 a1), (Node gv0 c2 a1 = smash c2 c2), (Node gv0 c2 a1 = smash c2 c1), (Node gv0 c2 a1 = smash c1 a2), (Node gv0 c2 a1 = smash c1 a1), (Node gv0 c2 a1 = smash c1 c2), (Node gv0 c2 a1 = smash c1 c1), (Node gv0 c2 c2 = a2), (Node gv0 c2 c2 = a1), (Node gv0 c2 c2 = c2)
(Node gv0 c2 c2 = c1), (Node gv0 c2 c2 = smash a2 a2), (Node gv0 c2 c2 = smash a2 a1), (Node gv0 c2 c2 = smash a2 c2), (Node gv0 c2 c2 = smash a2 c1), (Node gv0 c2 c2 = smash a1 a2), (Node gv0 c2 c2 = smash a1 a1), (Node gv0 c2 c2 = smash a1 c2), (Node gv0 c2 c2 = smash a1 c1), (Node gv0 c2 c2 = smash c2 a2)
(Node gv0 c2 c2 = smash c2 a1), (Node gv0 c2 c2 = smash c2 c2), (Node gv0 c2 c2 = smash c2 c1), (Node gv0 c2 c2 = smash c1 a2), (Node gv0 c2 c2 = smash c1 a1), (Node gv0 c2 c2 = smash c1 c2), (Node gv0 c2 c2 = smash c1 c1), (Node gv0 c2 c1 = a2), (Node gv0 c2 c1 = a1), (Node gv0 c2 c1 = c2)
(Node gv0 c2 c1 = c1), (Node gv0 c2 c1 = smash a2 a2), (Node gv0 c2 c1 = smash a2 a1), (Node gv0 c2 c1 = smash a2 c2), (Node gv0 c2 c1 = smash a2 c1), (Node gv0 c2 c1 = smash a1 a2), (Node gv0 c2 c1 = smash a1 a1), (Node gv0 c2 c1 = smash a1 c2), (Node gv0 c2 c1 = smash a1 c1), (Node gv0 c2 c1 = smash c2 a2)
(Node gv0 c2 c1 = smash c2 a1), (Node gv0 c2 c1 = smash c2 c2), (Node gv0 c2 c1 = smash c2 c1), (Node gv0 c2 c1 = smash c1 a2), (Node gv0 c2 c1 = smash c1 a1), (Node gv0 c2 c1 = smash c1 c2), (Node gv0 c2 c1 = smash c1 c1), (Node gv0 c1 a2 = a2), (Node gv0 c1 a2 = a1), (Node gv0 c1 a2 = c2)
(Node gv0 c1 a2 = c1), (Node gv0 c1 a2 = smash a2 a2), (Node gv0 c1 a2 = smash a2 a1), (Node gv0 c1 a2 = smash a2 c2), (Node gv0 c1 a2 = smash a2 c1), (Node gv0 c1 a2 = smash a1 a2), (Node gv0 c1 a2 = smash a1 a1), (Node gv0 c1 a2 = smash a1 c2), (Node gv0 c1 a2 = smash a1 c1), (Node gv0 c1 a2 = smash c2 a2)
(Node gv0 c1 a2 = smash c2 a1), (Node gv0 c1 a2 = smash c2 c2), (Node gv0 c1 a2 = smash c2 c1), (Node gv0 c1 a2 = smash c1 a2), (Node gv0 c1 a2 = smash c1 a1), (Node gv0 c1 a2 = smash c1 c2), (Node gv0 c1 a2 = smash c1 c1), (Node gv0 c1 a1 = a2), (Node gv0 c1 a1 = a1), (Node gv0 c1 a1 = c2)
(Node gv0 c1 a1 = c1), (Node gv0 c1 a1 = smash a2 a2), (Node gv0 c1 a1 = smash a2 a1), (Node gv0 c1 a1 = smash a2 c2), (Node gv0 c1 a1 = smash a2 c1), (Node gv0 c1 a1 = smash a1 a2), (Node gv0 c1 a1 = smash a1 a1), (Node gv0 c1 a1 = smash a1 c2), (Node gv0 c1 a1 = smash a1 c1), (Node gv0 c1 a1 = smash c2 a2)
(Node gv0 c1 a1 = smash c2 a1), (Node gv0 c1 a1 = smash c2 c2), (Node gv0 c1 a1 = smash c2 c1), (Node gv0 c1 a1 = smash c1 a2), (Node gv0 c1 a1 = smash c1 a1), (Node gv0 c1 a1 = smash c1 c2), (Node gv0 c1 a1 = smash c1 c1), (Node gv0 c1 c2 = a2), (Node gv0 c1 c2 = a1), (Node gv0 c1 c2 = c2)
(Node gv0 c1 c2 = c1), (Node gv0 c1 c2 = smash a2 a2), (Node gv0 c1 c2 = smash a2 a1), (Node gv0 c1 c2 = smash a2 c2), (Node gv0 c1 c2 = smash a2 c1), (Node gv0 c1 c2 = smash a1 a2), (Node gv0 c1 c2 = smash a1 a1), (Node gv0 c1 c2 = smash a1 c2), (Node gv0 c1 c2 = smash a1 c1), (Node gv0 c1 c2 = smash c2 a2)
(Node gv0 c1 c2 = smash c2 a1), (Node gv0 c1 c2 = smash c2 c2), (Node gv0 c1 c2 = smash c2 c1), (Node gv0 c1 c2 = smash c1 a2), (Node gv0 c1 c2 = smash c1 a1), (Node gv0 c1 c2 = smash c1 c2), (Node gv0 c1 c2 = smash c1 c1), (Node gv0 c1 c1 = a2), (Node gv0 c1 c1 = a1), (Node gv0 c1 c1 = c2)
(Node gv0 c1 c1 = c1), (Node gv0 c1 c1 = smash a2 a2), (Node gv0 c1 c1 = smash a2 a1), (Node gv0 c1 c1 = smash a2 c2), (Node gv0 c1 c1 = smash a2 c1), (Node gv0 c1 c1 = smash a1 a2), (Node gv0 c1 c1 = smash a1 a1), (Node gv0 c1 c1 = smash a1 c2), (Node gv0 c1 c1 = smash a1 c1), (Node gv0 c1 c1 = smash c2 a2)
(Node gv0 c1 c1 = smash c2 a1), (Node gv0 c1 c1 = smash c2 c2), (Node gv0 c1 c1 = smash c2 c1), (Node gv0 c1 c1 = smash c1 a2), (Node gv0 c1 c1 = smash c1 a1), (Node gv0 c1 c1 = smash c1 c2), (Node gv0 c1 c1 = smash c1 c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = c2)
(smash a2 a2 = c1), (smash a2 a1 = a2), (smash a2 a1 = a1), (smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c1 = a2)
(smash a2 c1 = a1), (smash a2 c1 = c2), (smash a2 c1 = c1), (smash a1 a2 = a2), (smash a1 a2 = a1), (smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = c2)
(smash a1 a1 = c1), (smash a1 c2 = a2), (smash a1 c2 = a1), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = c2), (smash a1 c1 = c1), (smash c2 a2 = a2)
(smash c2 a2 = a1), (smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a1 = a2), (smash c2 a1 = a1), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = c2)
(smash c2 c2 = c1), (smash c2 c1 = a2), (smash c2 c1 = a1), (smash c2 c1 = c2), (smash c2 c1 = c1), (smash c1 a2 = a2), (smash c1 a2 = a1), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a1 = a2)
(smash c1 a1 = a1), (smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 c2 = a2), (smash c1 c2 = a1), (smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = c2)
(smash c1 c1 = c1), (Leaf = Node n a2 a2), (Leaf = Node n a2 a1), (Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1), (Leaf = Node n c2 a2)
(Leaf = Node n c2 a1), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 c2)
(Leaf = Node n0 a2 c1), (Leaf = Node n0 a1 a2), (Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1), (Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c1 a2)
(Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n1 a2 a2), (Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1), (Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 c2)
(Leaf = Node n1 a1 c1), (Leaf = Node n1 c2 a2), (Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1), (Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node gv0 a2 a2)
(Leaf = Node gv0 a2 a1), (Leaf = Node gv0 a2 c2), (Leaf = Node gv0 a2 c1), (Leaf = Node gv0 a1 a2), (Leaf = Node gv0 a1 a1), (Leaf = Node gv0 a1 c2), (Leaf = Node gv0 a1 c1), (Leaf = Node gv0 c2 a2), (Leaf = Node gv0 c2 a1), (Leaf = Node gv0 c2 c2)
(Leaf = Node gv0 c2 c1), (Leaf = Node gv0 c1 a2), (Leaf = Node gv0 c1 a1), (Leaf = Node gv0 c1 c2), (Leaf = Node gv0 c1 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a1 a2)
(Leaf = smash a1 a1), (Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 c2), (Leaf = smash c2 c1), (Leaf = smash c1 a2), (Leaf = smash c1 a1), (Leaf = smash c1 c2)
(Leaf = smash c1 c1), (find_max' n p = n), (find_max' n p = n0), (find_max' n p = n1), (find_max' n p = gv0), (find_max' n0 p = n), (find_max' n0 p = n0), (find_max' n0 p = n1), (find_max' n0 p = gv0), (find_max' n1 p = n)
(find_max' n1 p = n0), (find_max' n1 p = n1), (find_max' n1 p = gv0), (find_max' gv0 p = n), (find_max' gv0 p = n0), (find_max' gv0 p = n1), (find_max' gv0 p = gv0), (length p = n), (length p = n0), (length p = n1)
(length p = gv0), (length p = find_max' n p), (length p = find_max' n0 p), (length p = find_max' n1 p), (length p = find_max' gv0 p), (Some n = find_max p), (Some n0 = find_max p), (Some n1 = find_max p), (Some gv0 = find_max p), (None = Some n)
(None = Some n0), (None = Some n1), (None = Some gv0), (None = find_max p), (None = Some a2), (None = Some a1), (None = Some c2), (None = Some c1), ((n >? n) = (n >=? n)), ((n >? n) = (n >=? n0))
((n >? n) = (n >=? n1)), ((n >? n) = (n >=? gv0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n1)), ((n >? n) = (n0 >=? gv0)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n1 >=? n0)), ((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? gv0))
((n >? n) = (gv0 >=? n)), ((n >? n) = (gv0 >=? n0)), ((n >? n) = (gv0 >=? n1)), ((n >? n) = (gv0 >=? gv0)), ((n >? n0) = (n >=? n)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? gv0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n0 >=? n0))
((n >? n0) = (n0 >=? n1)), ((n >? n0) = (n0 >=? gv0)), ((n >? n0) = (n1 >=? n)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? gv0)), ((n >? n0) = (gv0 >=? n)), ((n >? n0) = (gv0 >=? n0)), ((n >? n0) = (gv0 >=? n1)), ((n >? n0) = (gv0 >=? gv0))
((n >? n1) = (n >=? n)), ((n >? n1) = (n >=? n0)), ((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? gv0)), ((n >? n1) = (n0 >=? n)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? gv0)), ((n >? n1) = (n1 >=? n)), ((n >? n1) = (n1 >=? n0))
((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? gv0)), ((n >? n1) = (gv0 >=? n)), ((n >? n1) = (gv0 >=? n0)), ((n >? n1) = (gv0 >=? n1)), ((n >? n1) = (gv0 >=? gv0)), ((n >? gv0) = (n >=? n)), ((n >? gv0) = (n >=? n0)), ((n >? gv0) = (n >=? n1)), ((n >? gv0) = (n >=? gv0))
((n >? gv0) = (n0 >=? n)), ((n >? gv0) = (n0 >=? n0)), ((n >? gv0) = (n0 >=? n1)), ((n >? gv0) = (n0 >=? gv0)), ((n >? gv0) = (n1 >=? n)), ((n >? gv0) = (n1 >=? n0)), ((n >? gv0) = (n1 >=? n1)), ((n >? gv0) = (n1 >=? gv0)), ((n >? gv0) = (gv0 >=? n)), ((n >? gv0) = (gv0 >=? n0))
((n >? gv0) = (gv0 >=? n1)), ((n >? gv0) = (gv0 >=? gv0)), ((n0 >? n) = (n >=? n)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n1)), ((n0 >? n) = (n >=? gv0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n1)), ((n0 >? n) = (n0 >=? gv0))
((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n1)), ((n0 >? n) = (n1 >=? gv0)), ((n0 >? n) = (gv0 >=? n)), ((n0 >? n) = (gv0 >=? n0)), ((n0 >? n) = (gv0 >=? n1)), ((n0 >? n) = (gv0 >=? gv0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n0) = (n >=? n0))
((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? gv0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? gv0)), ((n0 >? n0) = (n1 >=? n)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? gv0))
((n0 >? n0) = (gv0 >=? n)), ((n0 >? n0) = (gv0 >=? n0)), ((n0 >? n0) = (gv0 >=? n1)), ((n0 >? n0) = (gv0 >=? gv0)), ((n0 >? n1) = (n >=? n)), ((n0 >? n1) = (n >=? n0)), ((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? gv0)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n0 >=? n0))
((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? gv0)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? gv0)), ((n0 >? n1) = (gv0 >=? n)), ((n0 >? n1) = (gv0 >=? n0)), ((n0 >? n1) = (gv0 >=? n1)), ((n0 >? n1) = (gv0 >=? gv0))
((n0 >? gv0) = (n >=? n)), ((n0 >? gv0) = (n >=? n0)), ((n0 >? gv0) = (n >=? n1)), ((n0 >? gv0) = (n >=? gv0)), ((n0 >? gv0) = (n0 >=? n)), ((n0 >? gv0) = (n0 >=? n0)), ((n0 >? gv0) = (n0 >=? n1)), ((n0 >? gv0) = (n0 >=? gv0)), ((n0 >? gv0) = (n1 >=? n)), ((n0 >? gv0) = (n1 >=? n0))
((n0 >? gv0) = (n1 >=? n1)), ((n0 >? gv0) = (n1 >=? gv0)), ((n0 >? gv0) = (gv0 >=? n)), ((n0 >? gv0) = (gv0 >=? n0)), ((n0 >? gv0) = (gv0 >=? n1)), ((n0 >? gv0) = (gv0 >=? gv0)), ((n1 >? n) = (n >=? n)), ((n1 >? n) = (n >=? n0)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? gv0))
((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n0 >=? n0)), ((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? gv0)), ((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n1)), ((n1 >? n) = (n1 >=? gv0)), ((n1 >? n) = (gv0 >=? n)), ((n1 >? n) = (gv0 >=? n0))
((n1 >? n) = (gv0 >=? n1)), ((n1 >? n) = (gv0 >=? gv0)), ((n1 >? n0) = (n >=? n)), ((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n1)), ((n1 >? n0) = (n >=? gv0)), ((n1 >? n0) = (n0 >=? n)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? gv0))
((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? gv0)), ((n1 >? n0) = (gv0 >=? n)), ((n1 >? n0) = (gv0 >=? n0)), ((n1 >? n0) = (gv0 >=? n1)), ((n1 >? n0) = (gv0 >=? gv0)), ((n1 >? n1) = (n >=? n)), ((n1 >? n1) = (n >=? n0))
((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? gv0)), ((n1 >? n1) = (n0 >=? n)), ((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? gv0)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n1 >=? n0)), ((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? gv0))
((n1 >? n1) = (gv0 >=? n)), ((n1 >? n1) = (gv0 >=? n0)), ((n1 >? n1) = (gv0 >=? n1)), ((n1 >? n1) = (gv0 >=? gv0)), ((n1 >? gv0) = (n >=? n)), ((n1 >? gv0) = (n >=? n0)), ((n1 >? gv0) = (n >=? n1)), ((n1 >? gv0) = (n >=? gv0)), ((n1 >? gv0) = (n0 >=? n)), ((n1 >? gv0) = (n0 >=? n0))
((n1 >? gv0) = (n0 >=? n1)), ((n1 >? gv0) = (n0 >=? gv0)), ((n1 >? gv0) = (n1 >=? n)), ((n1 >? gv0) = (n1 >=? n0)), ((n1 >? gv0) = (n1 >=? n1)), ((n1 >? gv0) = (n1 >=? gv0)), ((n1 >? gv0) = (gv0 >=? n)), ((n1 >? gv0) = (gv0 >=? n0)), ((n1 >? gv0) = (gv0 >=? n1)), ((n1 >? gv0) = (gv0 >=? gv0))
((gv0 >? n) = (n >=? n)), ((gv0 >? n) = (n >=? n0)), ((gv0 >? n) = (n >=? n1)), ((gv0 >? n) = (n >=? gv0)), ((gv0 >? n) = (n0 >=? n)), ((gv0 >? n) = (n0 >=? n0)), ((gv0 >? n) = (n0 >=? n1)), ((gv0 >? n) = (n0 >=? gv0)), ((gv0 >? n) = (n1 >=? n)), ((gv0 >? n) = (n1 >=? n0))
((gv0 >? n) = (n1 >=? n1)), ((gv0 >? n) = (n1 >=? gv0)), ((gv0 >? n) = (gv0 >=? n)), ((gv0 >? n) = (gv0 >=? n0)), ((gv0 >? n) = (gv0 >=? n1)), ((gv0 >? n) = (gv0 >=? gv0)), ((gv0 >? n0) = (n >=? n)), ((gv0 >? n0) = (n >=? n0)), ((gv0 >? n0) = (n >=? n1)), ((gv0 >? n0) = (n >=? gv0))
((gv0 >? n0) = (n0 >=? n)), ((gv0 >? n0) = (n0 >=? n0)), ((gv0 >? n0) = (n0 >=? n1)), ((gv0 >? n0) = (n0 >=? gv0)), ((gv0 >? n0) = (n1 >=? n)), ((gv0 >? n0) = (n1 >=? n0)), ((gv0 >? n0) = (n1 >=? n1)), ((gv0 >? n0) = (n1 >=? gv0)), ((gv0 >? n0) = (gv0 >=? n)), ((gv0 >? n0) = (gv0 >=? n0))
((gv0 >? n0) = (gv0 >=? n1)), ((gv0 >? n0) = (gv0 >=? gv0)), ((gv0 >? n1) = (n >=? n)), ((gv0 >? n1) = (n >=? n0)), ((gv0 >? n1) = (n >=? n1)), ((gv0 >? n1) = (n >=? gv0)), ((gv0 >? n1) = (n0 >=? n)), ((gv0 >? n1) = (n0 >=? n0)), ((gv0 >? n1) = (n0 >=? n1)), ((gv0 >? n1) = (n0 >=? gv0))
((gv0 >? n1) = (n1 >=? n)), ((gv0 >? n1) = (n1 >=? n0)), ((gv0 >? n1) = (n1 >=? n1)), ((gv0 >? n1) = (n1 >=? gv0)), ((gv0 >? n1) = (gv0 >=? n)), ((gv0 >? n1) = (gv0 >=? n0)), ((gv0 >? n1) = (gv0 >=? n1)), ((gv0 >? n1) = (gv0 >=? gv0)), ((gv0 >? gv0) = (n >=? n)), ((gv0 >? gv0) = (n >=? n0))
((gv0 >? gv0) = (n >=? n1)), ((gv0 >? gv0) = (n >=? gv0)), ((gv0 >? gv0) = (n0 >=? n)), ((gv0 >? gv0) = (n0 >=? n0)), ((gv0 >? gv0) = (n0 >=? n1)), ((gv0 >? gv0) = (n0 >=? gv0)), ((gv0 >? gv0) = (n1 >=? n)), ((gv0 >? gv0) = (n1 >=? n0)), ((gv0 >? gv0) = (n1 >=? n1)), ((gv0 >? gv0) = (n1 >=? gv0))
((gv0 >? gv0) = (gv0 >=? n)), ((gv0 >? gv0) = (gv0 >=? n0)), ((gv0 >? gv0) = (gv0 >=? n1)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 4 (4)
(priq p), (priqq n1 p), (priqq n0 p), (priqq n p), (pow2heap n1 c2), (pow2heap n1 c1), (pow2heap n1 a2), (pow2heap n1 a1), (pow2heap n1 gv2), (pow2heap n0 c2)
(pow2heap n0 c1), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 gv2), (pow2heap n c2), (pow2heap n c1), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv2), (pow2heapp n1 n1 c2)
(pow2heapp n1 n1 c1), (pow2heapp n1 n1 a2), (pow2heapp n1 n1 a1), (pow2heapp n1 n1 gv2), (pow2heapp n1 n0 c2), (pow2heapp n1 n0 c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1), (pow2heapp n1 n0 gv2), (pow2heapp n1 n c2)
(pow2heapp n1 n c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n gv2), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 gv2), (pow2heapp n0 n0 c2)
(pow2heapp n0 n0 c1), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 gv2), (pow2heapp n0 n c2), (pow2heapp n0 n c1), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n gv2), (pow2heapp n n1 c2)
(pow2heapp n n1 c1), (pow2heapp n n1 a2), (pow2heapp n n1 a1), (pow2heapp n n1 gv2), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n0 gv2), (pow2heapp n n c2)
(pow2heapp n n c1), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv2), (Permutation p p), (In c2 p), (In c1 p), (In a2 p), (In a1 p), (In gv2 p)
(n1 < n1), (n1 < n0), (n1 < n), (n0 < n1), (n0 < n0), (n0 < n), (n < n1), (n < n0), (n < n), (n1 <= n1)
(n1 <= n0), (n1 <= n), (n0 <= n1), (n0 <= n0), (n0 <= n), (n <= n1), (n <= n0), (n <= n), (p = p), (c2 = c2)
(c2 = c1), (c2 = a2), (c2 = a1), (c2 = gv2), (c1 = c2), (c1 = c1), (c1 = a2), (c1 = a1), (c1 = gv2), (a2 = c2)
(a2 = c1), (a2 = a2), (a2 = a1), (a2 = gv2), (a1 = c2), (a1 = c1), (a1 = a2), (a1 = a1), (a1 = gv2), (gv2 = c2)
(gv2 = c1), (gv2 = a2), (gv2 = a1), (gv2 = gv2), (n1 = n1), (n1 = n0), (n1 = n), (n0 = n1), (n0 = n0), (n0 = n)
(n = n1), (n = n0), (n = n), (false = (n1 >? n1)), (false = (n1 >? n0)), (false = (n1 >? n)), (false = (n0 >? n1)), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n1))
(false = (n >? n0)), (false = (n >? n)), (false = (n1 >=? n1)), (false = (n1 >=? n0)), (false = (n1 >=? n)), (false = (n0 >=? n1)), (false = (n0 >=? n0)), (false = (n0 >=? n)), (false = (n >=? n1)), (false = (n >=? n0))
(false = (n >=? n)), (true = (n1 >? n1)), (true = (n1 >? n0)), (true = (n1 >? n)), (true = (n0 >? n1)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n1)), (true = (n >? n0)), (true = (n >? n))
(true = (n1 >=? n1)), (true = (n1 >=? n0)), (true = (n1 >=? n)), (true = (n0 >=? n1)), (true = (n0 >=? n0)), (true = (n0 >=? n)), (true = (n >=? n1)), (true = (n >=? n0)), (true = (n >=? n)), (Abs p [])
(Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (gv2 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max c2) []), (Abs (heap_delete_max c1) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) [])
(Abs (heap_delete_max gv2) []), (Abs (join p p c2) []), (Abs (join p p c1) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p gv2) []), (Abs (insert n1 p) []), (Abs (insert n0 p) []), (Abs (insert n p) []), (Abs (carry p c2) [])
(Abs (carry p c1) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p gv2) []), (Abs (p ++ p) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (a2 :: p) [])
(priqueue_elems (a1 :: p) []), (priqueue_elems (gv2 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv2) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p gv2) []), (priqueue_elems (insert n1 p) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p c2) []), (priqueue_elems (carry p c1) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) [])
(priqueue_elems (carry p gv2) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems c2 []), (tree_elems c1 []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems gv2 []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) [])
(tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) []), (tree_elems (Node n1 c2 gv2) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 gv2) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) [])
(tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 gv2) []), (tree_elems (Node n1 a1 c2) []), (tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) []), (tree_elems (Node n1 a1 gv2) []), (tree_elems (Node n1 gv2 c2) []), (tree_elems (Node n1 gv2 c1) [])
(tree_elems (Node n1 gv2 a2) []), (tree_elems (Node n1 gv2 a1) []), (tree_elems (Node n1 gv2 gv2) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 gv2) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) [])
(tree_elems (Node n0 c1 a2) []), (tree_elems (Node n0 c1 a1) []), (tree_elems (Node n0 c1 gv2) []), (tree_elems (Node n0 a2 c2) []), (tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 gv2) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) [])
(tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 gv2) []), (tree_elems (Node n0 gv2 c2) []), (tree_elems (Node n0 gv2 c1) []), (tree_elems (Node n0 gv2 a2) []), (tree_elems (Node n0 gv2 a1) []), (tree_elems (Node n0 gv2 gv2) []), (tree_elems (Node n c2 c2) []), (tree_elems (Node n c2 c1) [])
(tree_elems (Node n c2 a2) []), (tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 gv2) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) []), (tree_elems (Node n c1 gv2) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) [])
(tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv2) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv2) []), (tree_elems (Node n gv2 c2) []), (tree_elems (Node n gv2 c1) [])
(tree_elems (Node n gv2 a2) []), (tree_elems (Node n gv2 a1) []), (tree_elems (Node n gv2 gv2) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) []), (tree_elems (smash c2 gv2) []), (tree_elems (smash c1 c2) []), (tree_elems (smash c1 c1) [])
(tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 gv2) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv2) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) [])
(tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv2) []), (tree_elems (smash gv2 c2) []), (tree_elems (smash gv2 c1) []), (tree_elems (smash gv2 a2) []), (tree_elems (smash gv2 a1) []), (tree_elems (smash gv2 gv2) []), (tree_elems Leaf []), (priq (c2 :: p))
(priq (c1 :: p)), (priq (a2 :: p)), (priq (a1 :: p)), (priq (gv2 :: p)), (priq (merge p p)), (priq (heap_delete_max c2)), (priq (heap_delete_max c1)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max gv2))
(priq (join p p c2)), (priq (join p p c1)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p gv2)), (priq (insert n1 p)), (priq (insert n0 p)), (priq (insert n p)), (priq (carry p c2)), (priq (carry p c1))
(priq (carry p a2)), (priq (carry p a1)), (priq (carry p gv2)), (priq (p ++ p)), (priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (a2 :: p)), (priqq n1 (a1 :: p)), (priqq n1 (gv2 :: p)), (priqq n1 (merge p p))
(priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1)), (priqq n1 (heap_delete_max a2)), (priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max gv2)), (priqq n1 (join p p c2)), (priqq n1 (join p p c1)), (priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p gv2))
(priqq n1 (insert n1 p)), (priqq n1 (insert n0 p)), (priqq n1 (insert n p)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (carry p a2)), (priqq n1 (carry p a1)), (priqq n1 (carry p gv2)), (priqq n1 (p ++ p)), (priqq n0 (c2 :: p))
(priqq n0 (c1 :: p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (gv2 :: p)), (priqq n0 (merge p p)), (priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (heap_delete_max gv2))
(priqq n0 (join p p c2)), (priqq n0 (join p p c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p gv2)), (priqq n0 (insert n1 p)), (priqq n0 (insert n0 p)), (priqq n0 (insert n p)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1))
(priqq n0 (carry p a2)), (priqq n0 (carry p a1)), (priqq n0 (carry p gv2)), (priqq n0 (p ++ p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (gv2 :: p)), (priqq n (merge p p))
(priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv2)), (priqq n (join p p c2)), (priqq n (join p p c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p gv2))
(priqq n (insert n1 p)), (priqq n (insert n0 p)), (priqq n (insert n p)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p gv2)), (priqq n (p ++ p)), (priqq (find_max' n1 p) p)
(priqq (find_max' n1 p) (c2 :: p)), (priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (a2 :: p)), (priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (gv2 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1))
(priqq (find_max' n1 p) (heap_delete_max gv2)), (priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1)), (priqq (find_max' n1 p) (join p p gv2)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (carry p c2))
(priqq (find_max' n1 p) (carry p c1)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p gv2)), (priqq (find_max' n1 p) (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (c2 :: p)), (priqq (find_max' n0 p) (c1 :: p)), (priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p))
(priqq (find_max' n0 p) (gv2 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max c2)), (priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max gv2)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1)), (priqq (find_max' n0 p) (join p p a2))
(priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p gv2)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p gv2))
(priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (gv2 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1))
(priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (heap_delete_max gv2)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p gv2)), (priqq (find_max' n p) (insert n1 p)), (priqq (find_max' n p) (insert n0 p))
(priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p c2)), (priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p gv2)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p))
(priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (gv2 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (heap_delete_max gv2)), (priqq (length p) (join p p c2))
(priqq (length p) (join p p c1)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p gv2)), (priqq (length p) (insert n1 p)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (carry p a2))
(priqq (length p) (carry p a1)), (priqq (length p) (carry p gv2)), (priqq (length p) (p ++ p)), (pow2heap n1 (Node n1 c2 c2)), (pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 gv2)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1))
(pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1)), (pow2heap n1 (Node n1 c1 gv2)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a2 a2)), (pow2heap n1 (Node n1 a2 a1)), (pow2heap n1 (Node n1 a2 gv2)), (pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1))
(pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1)), (pow2heap n1 (Node n1 a1 gv2)), (pow2heap n1 (Node n1 gv2 c2)), (pow2heap n1 (Node n1 gv2 c1)), (pow2heap n1 (Node n1 gv2 a2)), (pow2heap n1 (Node n1 gv2 a1)), (pow2heap n1 (Node n1 gv2 gv2)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1))
(pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1)), (pow2heap n1 (Node n0 c2 gv2)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 gv2)), (pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1))
(pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1)), (pow2heap n1 (Node n0 a2 gv2)), (pow2heap n1 (Node n0 a1 c2)), (pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1)), (pow2heap n1 (Node n0 a1 gv2)), (pow2heap n1 (Node n0 gv2 c2)), (pow2heap n1 (Node n0 gv2 c1))
(pow2heap n1 (Node n0 gv2 a2)), (pow2heap n1 (Node n0 gv2 a1)), (pow2heap n1 (Node n0 gv2 gv2)), (pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1)), (pow2heap n1 (Node n c2 gv2)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1))
(pow2heap n1 (Node n c1 a2)), (pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 gv2)), (pow2heap n1 (Node n a2 c2)), (pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 gv2)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1))
(pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1)), (pow2heap n1 (Node n a1 gv2)), (pow2heap n1 (Node n gv2 c2)), (pow2heap n1 (Node n gv2 c1)), (pow2heap n1 (Node n gv2 a2)), (pow2heap n1 (Node n gv2 a1)), (pow2heap n1 (Node n gv2 gv2)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1))
(pow2heap n1 (smash c2 a2)), (pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 gv2)), (pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1)), (pow2heap n1 (smash c1 gv2)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1))
(pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1)), (pow2heap n1 (smash a2 gv2)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 gv2)), (pow2heap n1 (smash gv2 c2)), (pow2heap n1 (smash gv2 c1))
(pow2heap n1 (smash gv2 a2)), (pow2heap n1 (smash gv2 a1)), (pow2heap n1 (smash gv2 gv2)), (pow2heap n0 (Node n1 c2 c2)), (pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1)), (pow2heap n0 (Node n1 c2 gv2)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1))
(pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1)), (pow2heap n0 (Node n1 c1 gv2)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a2 a2)), (pow2heap n0 (Node n1 a2 a1)), (pow2heap n0 (Node n1 a2 gv2)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1))
(pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 gv2)), (pow2heap n0 (Node n1 gv2 c2)), (pow2heap n0 (Node n1 gv2 c1)), (pow2heap n0 (Node n1 gv2 a2)), (pow2heap n0 (Node n1 gv2 a1)), (pow2heap n0 (Node n1 gv2 gv2)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1))
(pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1)), (pow2heap n0 (Node n0 c2 gv2)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 gv2)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1))
(pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 gv2)), (pow2heap n0 (Node n0 a1 c2)), (pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n0 a1 gv2)), (pow2heap n0 (Node n0 gv2 c2)), (pow2heap n0 (Node n0 gv2 c1))
(pow2heap n0 (Node n0 gv2 a2)), (pow2heap n0 (Node n0 gv2 a1)), (pow2heap n0 (Node n0 gv2 gv2)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1)), (pow2heap n0 (Node n c2 gv2)), (pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1))
(pow2heap n0 (Node n c1 a2)), (pow2heap n0 (Node n c1 a1)), (pow2heap n0 (Node n c1 gv2)), (pow2heap n0 (Node n a2 c2)), (pow2heap n0 (Node n a2 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 gv2)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1))
(pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 gv2)), (pow2heap n0 (Node n gv2 c2)), (pow2heap n0 (Node n gv2 c1)), (pow2heap n0 (Node n gv2 a2)), (pow2heap n0 (Node n gv2 a1)), (pow2heap n0 (Node n gv2 gv2)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1))
(pow2heap n0 (smash c2 a2)), (pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 gv2)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1)), (pow2heap n0 (smash c1 gv2)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1))
(pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 gv2)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 gv2)), (pow2heap n0 (smash gv2 c2)), (pow2heap n0 (smash gv2 c1))
(pow2heap n0 (smash gv2 a2)), (pow2heap n0 (smash gv2 a1)), (pow2heap n0 (smash gv2 gv2)), (pow2heap n (Node n1 c2 c2)), (pow2heap n (Node n1 c2 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 gv2)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1))
(pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1)), (pow2heap n (Node n1 c1 gv2)), (pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a2 a2)), (pow2heap n (Node n1 a2 a1)), (pow2heap n (Node n1 a2 gv2)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1))
(pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 gv2)), (pow2heap n (Node n1 gv2 c2)), (pow2heap n (Node n1 gv2 c1)), (pow2heap n (Node n1 gv2 a2)), (pow2heap n (Node n1 gv2 a1)), (pow2heap n (Node n1 gv2 gv2)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1))
(pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1)), (pow2heap n (Node n0 c2 gv2)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 gv2)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1))
(pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 gv2)), (pow2heap n (Node n0 a1 c2)), (pow2heap n (Node n0 a1 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 gv2)), (pow2heap n (Node n0 gv2 c2)), (pow2heap n (Node n0 gv2 c1))
(pow2heap n (Node n0 gv2 a2)), (pow2heap n (Node n0 gv2 a1)), (pow2heap n (Node n0 gv2 gv2)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1)), (pow2heap n (Node n c2 gv2)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1))
(pow2heap n (Node n c1 a2)), (pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 gv2)), (pow2heap n (Node n a2 c2)), (pow2heap n (Node n a2 c1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv2)), (pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1))
(pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv2)), (pow2heap n (Node n gv2 c2)), (pow2heap n (Node n gv2 c1)), (pow2heap n (Node n gv2 a2)), (pow2heap n (Node n gv2 a1)), (pow2heap n (Node n gv2 gv2)), (pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1))
(pow2heap n (smash c2 a2)), (pow2heap n (smash c2 a1)), (pow2heap n (smash c2 gv2)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1)), (pow2heap n (smash c1 gv2)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1))
(pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 gv2)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv2)), (pow2heap n (smash gv2 c2)), (pow2heap n (smash gv2 c1))
(pow2heap n (smash gv2 a2)), (pow2heap n (smash gv2 a1)), (pow2heap n (smash gv2 gv2)), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1), (pow2heap (find_max' n1 p) gv2), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1))
(pow2heap (find_max' n1 p) (Node n1 c2 a2)), (pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 gv2)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1)), (pow2heap (find_max' n1 p) (Node n1 c1 gv2)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1))
(pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1)), (pow2heap (find_max' n1 p) (Node n1 a2 gv2)), (pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1)), (pow2heap (find_max' n1 p) (Node n1 a1 gv2)), (pow2heap (find_max' n1 p) (Node n1 gv2 c2)), (pow2heap (find_max' n1 p) (Node n1 gv2 c1))
(pow2heap (find_max' n1 p) (Node n1 gv2 a2)), (pow2heap (find_max' n1 p) (Node n1 gv2 a1)), (pow2heap (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1)), (pow2heap (find_max' n1 p) (Node n0 c2 gv2)), (pow2heap (find_max' n1 p) (Node n0 c1 c2)), (pow2heap (find_max' n1 p) (Node n0 c1 c1))
(pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 gv2)), (pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1)), (pow2heap (find_max' n1 p) (Node n0 a2 gv2)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1))
(pow2heap (find_max' n1 p) (Node n0 a1 a2)), (pow2heap (find_max' n1 p) (Node n0 a1 a1)), (pow2heap (find_max' n1 p) (Node n0 a1 gv2)), (pow2heap (find_max' n1 p) (Node n0 gv2 c2)), (pow2heap (find_max' n1 p) (Node n0 gv2 c1)), (pow2heap (find_max' n1 p) (Node n0 gv2 a2)), (pow2heap (find_max' n1 p) (Node n0 gv2 a1)), (pow2heap (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heap (find_max' n1 p) (Node n c2 c2)), (pow2heap (find_max' n1 p) (Node n c2 c1))
(pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1)), (pow2heap (find_max' n1 p) (Node n c2 gv2)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 gv2)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1))
(pow2heap (find_max' n1 p) (Node n a2 a2)), (pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 gv2)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1)), (pow2heap (find_max' n1 p) (Node n a1 gv2)), (pow2heap (find_max' n1 p) (Node n gv2 c2)), (pow2heap (find_max' n1 p) (Node n gv2 c1))
(pow2heap (find_max' n1 p) (Node n gv2 a2)), (pow2heap (find_max' n1 p) (Node n gv2 a1)), (pow2heap (find_max' n1 p) (Node n gv2 gv2)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 gv2)), (pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1))
(pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1)), (pow2heap (find_max' n1 p) (smash c1 gv2)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1)), (pow2heap (find_max' n1 p) (smash a2 gv2)), (pow2heap (find_max' n1 p) (smash a1 c2)), (pow2heap (find_max' n1 p) (smash a1 c1))
(pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 gv2)), (pow2heap (find_max' n1 p) (smash gv2 c2)), (pow2heap (find_max' n1 p) (smash gv2 c1)), (pow2heap (find_max' n1 p) (smash gv2 a2)), (pow2heap (find_max' n1 p) (smash gv2 a1)), (pow2heap (find_max' n1 p) (smash gv2 gv2)), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1)
(pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) gv2), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1)), (pow2heap (find_max' n0 p) (Node n1 c2 gv2)), (pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1))
(pow2heap (find_max' n0 p) (Node n1 c1 a2)), (pow2heap (find_max' n0 p) (Node n1 c1 a1)), (pow2heap (find_max' n0 p) (Node n1 c1 gv2)), (pow2heap (find_max' n0 p) (Node n1 a2 c2)), (pow2heap (find_max' n0 p) (Node n1 a2 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 gv2)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1))
(pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1)), (pow2heap (find_max' n0 p) (Node n1 a1 gv2)), (pow2heap (find_max' n0 p) (Node n1 gv2 c2)), (pow2heap (find_max' n0 p) (Node n1 gv2 c1)), (pow2heap (find_max' n0 p) (Node n1 gv2 a2)), (pow2heap (find_max' n0 p) (Node n1 gv2 a1)), (pow2heap (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1))
(pow2heap (find_max' n0 p) (Node n0 c2 a2)), (pow2heap (find_max' n0 p) (Node n0 c2 a1)), (pow2heap (find_max' n0 p) (Node n0 c2 gv2)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1)), (pow2heap (find_max' n0 p) (Node n0 c1 gv2)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1))
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 gv2)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 gv2)), (pow2heap (find_max' n0 p) (Node n0 gv2 c2)), (pow2heap (find_max' n0 p) (Node n0 gv2 c1))
(pow2heap (find_max' n0 p) (Node n0 gv2 a2)), (pow2heap (find_max' n0 p) (Node n0 gv2 a1)), (pow2heap (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 gv2)), (pow2heap (find_max' n0 p) (Node n c1 c2)), (pow2heap (find_max' n0 p) (Node n c1 c1))
(pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1)), (pow2heap (find_max' n0 p) (Node n c1 gv2)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 gv2)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1))
(pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 gv2)), (pow2heap (find_max' n0 p) (Node n gv2 c2)), (pow2heap (find_max' n0 p) (Node n gv2 c1)), (pow2heap (find_max' n0 p) (Node n gv2 a2)), (pow2heap (find_max' n0 p) (Node n gv2 a1)), (pow2heap (find_max' n0 p) (Node n gv2 gv2)), (pow2heap (find_max' n0 p) (smash c2 c2)), (pow2heap (find_max' n0 p) (smash c2 c1))
(pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1)), (pow2heap (find_max' n0 p) (smash c2 gv2)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 gv2)), (pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1))
(pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1)), (pow2heap (find_max' n0 p) (smash a2 gv2)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 gv2)), (pow2heap (find_max' n0 p) (smash gv2 c2)), (pow2heap (find_max' n0 p) (smash gv2 c1))
(pow2heap (find_max' n0 p) (smash gv2 a2)), (pow2heap (find_max' n0 p) (smash gv2 a1)), (pow2heap (find_max' n0 p) (smash gv2 gv2)), (pow2heap (find_max' n p) c2), (pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) gv2), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1))
(pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1)), (pow2heap (find_max' n p) (Node n1 c2 gv2)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 gv2)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1))
(pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 gv2)), (pow2heap (find_max' n p) (Node n1 a1 c2)), (pow2heap (find_max' n p) (Node n1 a1 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1)), (pow2heap (find_max' n p) (Node n1 a1 gv2)), (pow2heap (find_max' n p) (Node n1 gv2 c2)), (pow2heap (find_max' n p) (Node n1 gv2 c1))
(pow2heap (find_max' n p) (Node n1 gv2 a2)), (pow2heap (find_max' n p) (Node n1 gv2 a1)), (pow2heap (find_max' n p) (Node n1 gv2 gv2)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 gv2)), (pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1))
(pow2heap (find_max' n p) (Node n0 c1 a2)), (pow2heap (find_max' n p) (Node n0 c1 a1)), (pow2heap (find_max' n p) (Node n0 c1 gv2)), (pow2heap (find_max' n p) (Node n0 a2 c2)), (pow2heap (find_max' n p) (Node n0 a2 c1)), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 gv2)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1))
(pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 gv2)), (pow2heap (find_max' n p) (Node n0 gv2 c2)), (pow2heap (find_max' n p) (Node n0 gv2 c1)), (pow2heap (find_max' n p) (Node n0 gv2 a2)), (pow2heap (find_max' n p) (Node n0 gv2 a1)), (pow2heap (find_max' n p) (Node n0 gv2 gv2)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1))
(pow2heap (find_max' n p) (Node n c2 a2)), (pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 gv2)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1)), (pow2heap (find_max' n p) (Node n c1 gv2)), (pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1))
(pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a2 gv2)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 gv2)), (pow2heap (find_max' n p) (Node n gv2 c2)), (pow2heap (find_max' n p) (Node n gv2 c1))
(pow2heap (find_max' n p) (Node n gv2 a2)), (pow2heap (find_max' n p) (Node n gv2 a1)), (pow2heap (find_max' n p) (Node n gv2 gv2)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1)), (pow2heap (find_max' n p) (smash c2 gv2)), (pow2heap (find_max' n p) (smash c1 c2)), (pow2heap (find_max' n p) (smash c1 c1))
(pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 gv2)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 gv2)), (pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1))
(pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (find_max' n p) (smash a1 gv2)), (pow2heap (find_max' n p) (smash gv2 c2)), (pow2heap (find_max' n p) (smash gv2 c1)), (pow2heap (find_max' n p) (smash gv2 a2)), (pow2heap (find_max' n p) (smash gv2 a1)), (pow2heap (find_max' n p) (smash gv2 gv2)), (pow2heap (length p) c2), (pow2heap (length p) c1)
(pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) gv2), (pow2heap (length p) (Node n1 c2 c2)), (pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1)), (pow2heap (length p) (Node n1 c2 gv2)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1))
(pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1)), (pow2heap (length p) (Node n1 c1 gv2)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a2 a2)), (pow2heap (length p) (Node n1 a2 a1)), (pow2heap (length p) (Node n1 a2 gv2)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1))
(pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 gv2)), (pow2heap (length p) (Node n1 gv2 c2)), (pow2heap (length p) (Node n1 gv2 c1)), (pow2heap (length p) (Node n1 gv2 a2)), (pow2heap (length p) (Node n1 gv2 a1)), (pow2heap (length p) (Node n1 gv2 gv2)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1))
(pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1)), (pow2heap (length p) (Node n0 c2 gv2)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 gv2)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1))
(pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 gv2)), (pow2heap (length p) (Node n0 a1 c2)), (pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n0 a1 gv2)), (pow2heap (length p) (Node n0 gv2 c2)), (pow2heap (length p) (Node n0 gv2 c1))
(pow2heap (length p) (Node n0 gv2 a2)), (pow2heap (length p) (Node n0 gv2 a1)), (pow2heap (length p) (Node n0 gv2 gv2)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1)), (pow2heap (length p) (Node n c2 gv2)), (pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1))
(pow2heap (length p) (Node n c1 a2)), (pow2heap (length p) (Node n c1 a1)), (pow2heap (length p) (Node n c1 gv2)), (pow2heap (length p) (Node n a2 c2)), (pow2heap (length p) (Node n a2 c1)), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 gv2)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1))
(pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 gv2)), (pow2heap (length p) (Node n gv2 c2)), (pow2heap (length p) (Node n gv2 c1)), (pow2heap (length p) (Node n gv2 a2)), (pow2heap (length p) (Node n gv2 a1)), (pow2heap (length p) (Node n gv2 gv2)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1))
(pow2heap (length p) (smash c2 a2)), (pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 gv2)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1)), (pow2heap (length p) (smash c1 gv2)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1))
(pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1)), (pow2heap (length p) (smash a2 gv2)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 gv2)), (pow2heap (length p) (smash gv2 c2)), (pow2heap (length p) (smash gv2 c1))
(pow2heap (length p) (smash gv2 a2)), (pow2heap (length p) (smash gv2 a1)), (pow2heap (length p) (smash gv2 gv2)), (pow2heapp n1 n1 (Node n1 c2 c2)), (pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1)), (pow2heapp n1 n1 (Node n1 c2 gv2)), (pow2heapp n1 n1 (Node n1 c1 c2)), (pow2heapp n1 n1 (Node n1 c1 c1))
(pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 gv2)), (pow2heapp n1 n1 (Node n1 a2 c2)), (pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a2 a2)), (pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 gv2)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1))
(pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 gv2)), (pow2heapp n1 n1 (Node n1 gv2 c2)), (pow2heapp n1 n1 (Node n1 gv2 c1)), (pow2heapp n1 n1 (Node n1 gv2 a2)), (pow2heapp n1 n1 (Node n1 gv2 a1)), (pow2heapp n1 n1 (Node n1 gv2 gv2)), (pow2heapp n1 n1 (Node n0 c2 c2)), (pow2heapp n1 n1 (Node n0 c2 c1))
(pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 gv2)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 gv2)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1))
(pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 gv2)), (pow2heapp n1 n1 (Node n0 a1 c2)), (pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1)), (pow2heapp n1 n1 (Node n0 a1 gv2)), (pow2heapp n1 n1 (Node n0 gv2 c2)), (pow2heapp n1 n1 (Node n0 gv2 c1))
(pow2heapp n1 n1 (Node n0 gv2 a2)), (pow2heapp n1 n1 (Node n0 gv2 a1)), (pow2heapp n1 n1 (Node n0 gv2 gv2)), (pow2heapp n1 n1 (Node n c2 c2)), (pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 gv2)), (pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1))
(pow2heapp n1 n1 (Node n c1 a2)), (pow2heapp n1 n1 (Node n c1 a1)), (pow2heapp n1 n1 (Node n c1 gv2)), (pow2heapp n1 n1 (Node n a2 c2)), (pow2heapp n1 n1 (Node n a2 c1)), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 gv2)), (pow2heapp n1 n1 (Node n a1 c2)), (pow2heapp n1 n1 (Node n a1 c1))
(pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 gv2)), (pow2heapp n1 n1 (Node n gv2 c2)), (pow2heapp n1 n1 (Node n gv2 c1)), (pow2heapp n1 n1 (Node n gv2 a2)), (pow2heapp n1 n1 (Node n gv2 a1)), (pow2heapp n1 n1 (Node n gv2 gv2)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1))
(pow2heapp n1 n1 (smash c2 a2)), (pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 gv2)), (pow2heapp n1 n1 (smash c1 c2)), (pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 gv2)), (pow2heapp n1 n1 (smash a2 c2)), (pow2heapp n1 n1 (smash a2 c1))
(pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 gv2)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 gv2)), (pow2heapp n1 n1 (smash gv2 c2)), (pow2heapp n1 n1 (smash gv2 c1))
(pow2heapp n1 n1 (smash gv2 a2)), (pow2heapp n1 n1 (smash gv2 a1)), (pow2heapp n1 n1 (smash gv2 gv2)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1)), (pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 gv2)), (pow2heapp n1 n0 (Node n1 c1 c2))
(pow2heapp n1 n0 (Node n1 c1 c1)), (pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 gv2)), (pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1)), (pow2heapp n1 n0 (Node n1 a2 gv2)), (pow2heapp n1 n0 (Node n1 a1 c2))
(pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 a1 a2)), (pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 gv2)), (pow2heapp n1 n0 (Node n1 gv2 c2)), (pow2heapp n1 n0 (Node n1 gv2 c1)), (pow2heapp n1 n0 (Node n1 gv2 a2)), (pow2heapp n1 n0 (Node n1 gv2 a1)), (pow2heapp n1 n0 (Node n1 gv2 gv2)), (pow2heapp n1 n0 (Node n0 c2 c2))
(pow2heapp n1 n0 (Node n0 c2 c1)), (pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 gv2)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 gv2)), (pow2heapp n1 n0 (Node n0 a2 c2))
(pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a2 a2)), (pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 gv2)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 gv2)), (pow2heapp n1 n0 (Node n0 gv2 c2))
(pow2heapp n1 n0 (Node n0 gv2 c1)), (pow2heapp n1 n0 (Node n0 gv2 a2)), (pow2heapp n1 n0 (Node n0 gv2 a1)), (pow2heapp n1 n0 (Node n0 gv2 gv2)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1)), (pow2heapp n1 n0 (Node n c2 a2)), (pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 gv2)), (pow2heapp n1 n0 (Node n c1 c2))
(pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1)), (pow2heapp n1 n0 (Node n c1 gv2)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1)), (pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 gv2)), (pow2heapp n1 n0 (Node n a1 c2))
(pow2heapp n1 n0 (Node n a1 c1)), (pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 gv2)), (pow2heapp n1 n0 (Node n gv2 c2)), (pow2heapp n1 n0 (Node n gv2 c1)), (pow2heapp n1 n0 (Node n gv2 a2)), (pow2heapp n1 n0 (Node n gv2 a1)), (pow2heapp n1 n0 (Node n gv2 gv2)), (pow2heapp n1 n0 (smash c2 c2))
(pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1)), (pow2heapp n1 n0 (smash c2 gv2)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1)), (pow2heapp n1 n0 (smash c1 a2)), (pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 gv2)), (pow2heapp n1 n0 (smash a2 c2))
(pow2heapp n1 n0 (smash a2 c1)), (pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 gv2)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 gv2)), (pow2heapp n1 n0 (smash gv2 c2))
(pow2heapp n1 n0 (smash gv2 c1)), (pow2heapp n1 n0 (smash gv2 a2)), (pow2heapp n1 n0 (smash gv2 a1)), (pow2heapp n1 n0 (smash gv2 gv2)), (pow2heapp n1 n0 Leaf), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 gv2))
(pow2heapp n1 n (Node n1 c1 c2)), (pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node n1 c1 a2)), (pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 gv2)), (pow2heapp n1 n (Node n1 a2 c2)), (pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 gv2))
(pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 a1 a2)), (pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 gv2)), (pow2heapp n1 n (Node n1 gv2 c2)), (pow2heapp n1 n (Node n1 gv2 c1)), (pow2heapp n1 n (Node n1 gv2 a2)), (pow2heapp n1 n (Node n1 gv2 a1)), (pow2heapp n1 n (Node n1 gv2 gv2))
(pow2heapp n1 n (Node n0 c2 c2)), (pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c2 a2)), (pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 gv2)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 gv2))
(pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a2 a2)), (pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 gv2)), (pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 gv2))
(pow2heapp n1 n (Node n0 gv2 c2)), (pow2heapp n1 n (Node n0 gv2 c1)), (pow2heapp n1 n (Node n0 gv2 a2)), (pow2heapp n1 n (Node n0 gv2 a1)), (pow2heapp n1 n (Node n0 gv2 gv2)), (pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c2 a2)), (pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 gv2))
(pow2heapp n1 n (Node n c1 c2)), (pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 gv2)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 gv2))
(pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n a1 a2)), (pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 gv2)), (pow2heapp n1 n (Node n gv2 c2)), (pow2heapp n1 n (Node n gv2 c1)), (pow2heapp n1 n (Node n gv2 a2)), (pow2heapp n1 n (Node n gv2 a1)), (pow2heapp n1 n (Node n gv2 gv2))
(pow2heapp n1 n (smash c2 c2)), (pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 gv2)), (pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n (smash c1 a2)), (pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 gv2))
(pow2heapp n1 n (smash a2 c2)), (pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a2 a2)), (pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 gv2)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 gv2))
(pow2heapp n1 n (smash gv2 c2)), (pow2heapp n1 n (smash gv2 c1)), (pow2heapp n1 n (smash gv2 a2)), (pow2heapp n1 n (smash gv2 a1)), (pow2heapp n1 n (smash gv2 gv2)), (pow2heapp n1 n Leaf), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) a2), (pow2heapp n1 (find_max' n1 p) a1)
(pow2heapp n1 (find_max' n1 p) gv2), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv2 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n c1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n a1 gv2)), (pow2heapp n1 (find_max' n1 p) (Node n gv2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n gv2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n gv2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n gv2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1))
(pow2heapp n1 (find_max' n1 p) (smash c2 gv2)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2)), (pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2)), (pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 gv2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2)), (pow2heapp n1 (find_max' n1 p) (smash a2 a1))
(pow2heapp n1 (find_max' n1 p) (smash a2 gv2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2)), (pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 gv2)), (pow2heapp n1 (find_max' n1 p) (smash gv2 c2)), (pow2heapp n1 (find_max' n1 p) (smash gv2 c1)), (pow2heapp n1 (find_max' n1 p) (smash gv2 a2)), (pow2heapp n1 (find_max' n1 p) (smash gv2 a1))
(pow2heapp n1 (find_max' n1 p) (smash gv2 gv2)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) gv2), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 gv2)), (pow2heapp n1 (find_max' n0 p) (Node n gv2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n gv2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n gv2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n gv2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1)), (pow2heapp n1 (find_max' n0 p) (smash c2 gv2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2))
(pow2heapp n1 (find_max' n0 p) (smash c1 a1)), (pow2heapp n1 (find_max' n0 p) (smash c1 gv2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 gv2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a1 a2))
(pow2heapp n1 (find_max' n0 p) (smash a1 a1)), (pow2heapp n1 (find_max' n0 p) (smash a1 gv2)), (pow2heapp n1 (find_max' n0 p) (smash gv2 c2)), (pow2heapp n1 (find_max' n0 p) (smash gv2 c1)), (pow2heapp n1 (find_max' n0 p) (smash gv2 a2)), (pow2heapp n1 (find_max' n0 p) (smash gv2 a1)), (pow2heapp n1 (find_max' n0 p) (smash gv2 gv2)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1)
(pow2heapp n1 (find_max' n p) a2), (pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) gv2), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 gv2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 gv2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 gv2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 gv2)), (pow2heapp n1 (find_max' n p) (Node n1 gv2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 gv2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 gv2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 gv2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 gv2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 gv2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 gv2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 gv2)), (pow2heapp n1 (find_max' n p) (Node n0 gv2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 gv2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 gv2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 gv2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 gv2)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1))
(pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 gv2)), (pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1)), (pow2heapp n1 (find_max' n p) (Node n a2 gv2)), (pow2heapp n1 (find_max' n p) (Node n a1 c2)), (pow2heapp n1 (find_max' n p) (Node n a1 c1))
(pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 gv2)), (pow2heapp n1 (find_max' n p) (Node n gv2 c2)), (pow2heapp n1 (find_max' n p) (Node n gv2 c1)), (pow2heapp n1 (find_max' n p) (Node n gv2 a2)), (pow2heapp n1 (find_max' n p) (Node n gv2 a1)), (pow2heapp n1 (find_max' n p) (Node n gv2 gv2)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1))
(pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 gv2)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2)), (pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 gv2)), (pow2heapp n1 (find_max' n p) (smash a2 c2)), (pow2heapp n1 (find_max' n p) (smash a2 c1))
(pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 gv2)), (pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1)), (pow2heapp n1 (find_max' n p) (smash a1 gv2)), (pow2heapp n1 (find_max' n p) (smash gv2 c2)), (pow2heapp n1 (find_max' n p) (smash gv2 c1))
(pow2heapp n1 (find_max' n p) (smash gv2 a2)), (pow2heapp n1 (find_max' n p) (smash gv2 a1)), (pow2heapp n1 (find_max' n p) (smash gv2 gv2)), (pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) a2), (pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) gv2), (pow2heapp n1 (length p) (Node n1 c2 c2))
(pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2)), (pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 gv2)), (pow2heapp n1 (length p) (Node n1 c1 c2)), (pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 gv2)), (pow2heapp n1 (length p) (Node n1 a2 c2))
(pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 gv2)), (pow2heapp n1 (length p) (Node n1 a1 c2)), (pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2)), (pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 gv2)), (pow2heapp n1 (length p) (Node n1 gv2 c2))
(pow2heapp n1 (length p) (Node n1 gv2 c1)), (pow2heapp n1 (length p) (Node n1 gv2 a2)), (pow2heapp n1 (length p) (Node n1 gv2 a1)), (pow2heapp n1 (length p) (Node n1 gv2 gv2)), (pow2heapp n1 (length p) (Node n0 c2 c2)), (pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 gv2)), (pow2heapp n1 (length p) (Node n0 c1 c2))
(pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 gv2)), (pow2heapp n1 (length p) (Node n0 a2 c2)), (pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a2 a2)), (pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 gv2)), (pow2heapp n1 (length p) (Node n0 a1 c2))
(pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2)), (pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 gv2)), (pow2heapp n1 (length p) (Node n0 gv2 c2)), (pow2heapp n1 (length p) (Node n0 gv2 c1)), (pow2heapp n1 (length p) (Node n0 gv2 a2)), (pow2heapp n1 (length p) (Node n0 gv2 a1)), (pow2heapp n1 (length p) (Node n0 gv2 gv2)), (pow2heapp n1 (length p) (Node n c2 c2))
(pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 gv2)), (pow2heapp n1 (length p) (Node n c1 c2)), (pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (Node n c1 a2)), (pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 gv2)), (pow2heapp n1 (length p) (Node n a2 c2))
(pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 gv2)), (pow2heapp n1 (length p) (Node n a1 c2)), (pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 gv2)), (pow2heapp n1 (length p) (Node n gv2 c2))
(pow2heapp n1 (length p) (Node n gv2 c1)), (pow2heapp n1 (length p) (Node n gv2 a2)), (pow2heapp n1 (length p) (Node n gv2 a1)), (pow2heapp n1 (length p) (Node n gv2 gv2)), (pow2heapp n1 (length p) (smash c2 c2)), (pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 gv2)), (pow2heapp n1 (length p) (smash c1 c2))
(pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) (smash c1 a2)), (pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 gv2)), (pow2heapp n1 (length p) (smash a2 c2)), (pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 gv2)), (pow2heapp n1 (length p) (smash a1 c2))
(pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 gv2)), (pow2heapp n1 (length p) (smash gv2 c2)), (pow2heapp n1 (length p) (smash gv2 c1)), (pow2heapp n1 (length p) (smash gv2 a2)), (pow2heapp n1 (length p) (smash gv2 a1)), (pow2heapp n1 (length p) (smash gv2 gv2)), (pow2heapp n1 (length p) Leaf)
(pow2heapp n0 n1 (Node n1 c2 c2)), (pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1)), (pow2heapp n0 n1 (Node n1 c2 gv2)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node n1 c1 a2)), (pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 gv2))
(pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a2 a2)), (pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 gv2)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 gv2))
(pow2heapp n0 n1 (Node n1 gv2 c2)), (pow2heapp n0 n1 (Node n1 gv2 c1)), (pow2heapp n0 n1 (Node n1 gv2 a2)), (pow2heapp n0 n1 (Node n1 gv2 a1)), (pow2heapp n0 n1 (Node n1 gv2 gv2)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c2 a2)), (pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 gv2))
(pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 gv2)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 gv2))
(pow2heapp n0 n1 (Node n0 a1 c2)), (pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 a1 a2)), (pow2heapp n0 n1 (Node n0 a1 a1)), (pow2heapp n0 n1 (Node n0 a1 gv2)), (pow2heapp n0 n1 (Node n0 gv2 c2)), (pow2heapp n0 n1 (Node n0 gv2 c1)), (pow2heapp n0 n1 (Node n0 gv2 a2)), (pow2heapp n0 n1 (Node n0 gv2 a1)), (pow2heapp n0 n1 (Node n0 gv2 gv2))
(pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1)), (pow2heapp n0 n1 (Node n c2 a2)), (pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 gv2)), (pow2heapp n0 n1 (Node n c1 c2)), (pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 gv2))
(pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1)), (pow2heapp n0 n1 (Node n a2 gv2)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n a1 a2)), (pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 gv2))
(pow2heapp n0 n1 (Node n gv2 c2)), (pow2heapp n0 n1 (Node n gv2 c1)), (pow2heapp n0 n1 (Node n gv2 a2)), (pow2heapp n0 n1 (Node n gv2 a1)), (pow2heapp n0 n1 (Node n gv2 gv2)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c2 a2)), (pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 gv2))
(pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 (smash c1 a2)), (pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 gv2)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a2 a2)), (pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 gv2))
(pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 gv2)), (pow2heapp n0 n1 (smash gv2 c2)), (pow2heapp n0 n1 (smash gv2 c1)), (pow2heapp n0 n1 (smash gv2 a2)), (pow2heapp n0 n1 (smash gv2 a1)), (pow2heapp n0 n1 (smash gv2 gv2))
(pow2heapp n0 n1 Leaf), (pow2heapp n0 n0 (Node n1 c2 c2)), (pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 gv2)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1))
(pow2heapp n0 n0 (Node n1 c1 gv2)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a2 a2)), (pow2heapp n0 n0 (Node n1 a2 a1)), (pow2heapp n0 n0 (Node n1 a2 gv2)), (pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1))
(pow2heapp n0 n0 (Node n1 a1 gv2)), (pow2heapp n0 n0 (Node n1 gv2 c2)), (pow2heapp n0 n0 (Node n1 gv2 c1)), (pow2heapp n0 n0 (Node n1 gv2 a2)), (pow2heapp n0 n0 (Node n1 gv2 a1)), (pow2heapp n0 n0 (Node n1 gv2 gv2)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1))
(pow2heapp n0 n0 (Node n0 c2 gv2)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 gv2)), (pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1))
(pow2heapp n0 n0 (Node n0 a2 gv2)), (pow2heapp n0 n0 (Node n0 a1 c2)), (pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 gv2)), (pow2heapp n0 n0 (Node n0 gv2 c2)), (pow2heapp n0 n0 (Node n0 gv2 c1)), (pow2heapp n0 n0 (Node n0 gv2 a2)), (pow2heapp n0 n0 (Node n0 gv2 a1))
(pow2heapp n0 n0 (Node n0 gv2 gv2)), (pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1)), (pow2heapp n0 n0 (Node n c2 gv2)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (Node n c1 a2)), (pow2heapp n0 n0 (Node n c1 a1))
(pow2heapp n0 n0 (Node n c1 gv2)), (pow2heapp n0 n0 (Node n a2 c2)), (pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 gv2)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1))
(pow2heapp n0 n0 (Node n a1 gv2)), (pow2heapp n0 n0 (Node n gv2 c2)), (pow2heapp n0 n0 (Node n gv2 c1)), (pow2heapp n0 n0 (Node n gv2 a2)), (pow2heapp n0 n0 (Node n gv2 a1)), (pow2heapp n0 n0 (Node n gv2 gv2)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c2 a2)), (pow2heapp n0 n0 (smash c2 a1))
(pow2heapp n0 n0 (smash c2 gv2)), (pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1)), (pow2heapp n0 n0 (smash c1 gv2)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1))
(pow2heapp n0 n0 (smash a2 gv2)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 gv2)), (pow2heapp n0 n0 (smash gv2 c2)), (pow2heapp n0 n0 (smash gv2 c1)), (pow2heapp n0 n0 (smash gv2 a2)), (pow2heapp n0 n0 (smash gv2 a1))
(pow2heapp n0 n0 (smash gv2 gv2)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 gv2)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1)), (pow2heapp n0 n (Node n1 c1 a2))
(pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 gv2)), (pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1)), (pow2heapp n0 n (Node n1 a2 gv2)), (pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1)), (pow2heapp n0 n (Node n1 a1 a2))
(pow2heapp n0 n (Node n1 a1 a1)), (pow2heapp n0 n (Node n1 a1 gv2)), (pow2heapp n0 n (Node n1 gv2 c2)), (pow2heapp n0 n (Node n1 gv2 c1)), (pow2heapp n0 n (Node n1 gv2 a2)), (pow2heapp n0 n (Node n1 gv2 a1)), (pow2heapp n0 n (Node n1 gv2 gv2)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1)), (pow2heapp n0 n (Node n0 c2 a2))
(pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 gv2)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1)), (pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 gv2)), (pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1)), (pow2heapp n0 n (Node n0 a2 a2))
(pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a2 gv2)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 gv2)), (pow2heapp n0 n (Node n0 gv2 c2)), (pow2heapp n0 n (Node n0 gv2 c1)), (pow2heapp n0 n (Node n0 gv2 a2))
(pow2heapp n0 n (Node n0 gv2 a1)), (pow2heapp n0 n (Node n0 gv2 gv2)), (pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1)), (pow2heapp n0 n (Node n c2 gv2)), (pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1)), (pow2heapp n0 n (Node n c1 a2))
(pow2heapp n0 n (Node n c1 a1)), (pow2heapp n0 n (Node n c1 gv2)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 gv2)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n a1 a2))
(pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 gv2)), (pow2heapp n0 n (Node n gv2 c2)), (pow2heapp n0 n (Node n gv2 c1)), (pow2heapp n0 n (Node n gv2 a2)), (pow2heapp n0 n (Node n gv2 a1)), (pow2heapp n0 n (Node n gv2 gv2)), (pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1)), (pow2heapp n0 n (smash c2 a2))
(pow2heapp n0 n (smash c2 a1)), (pow2heapp n0 n (smash c2 gv2)), (pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1)), (pow2heapp n0 n (smash c1 gv2)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1)), (pow2heapp n0 n (smash a2 a2))
(pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 gv2)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 gv2)), (pow2heapp n0 n (smash gv2 c2)), (pow2heapp n0 n (smash gv2 c1)), (pow2heapp n0 n (smash gv2 a2))
(pow2heapp n0 n (smash gv2 a1)), (pow2heapp n0 n (smash gv2 gv2)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) gv2), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 gv2)), (pow2heapp n0 (find_max' n1 p) (Node n gv2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n gv2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n gv2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n gv2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 gv2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1))
(pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 gv2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1)), (pow2heapp n0 (find_max' n1 p) (smash a2 gv2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1))
(pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1)), (pow2heapp n0 (find_max' n1 p) (smash a1 gv2)), (pow2heapp n0 (find_max' n1 p) (smash gv2 c2)), (pow2heapp n0 (find_max' n1 p) (smash gv2 c1)), (pow2heapp n0 (find_max' n1 p) (smash gv2 a2)), (pow2heapp n0 (find_max' n1 p) (smash gv2 a1)), (pow2heapp n0 (find_max' n1 p) (smash gv2 gv2)), (pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' n0 p) c2)
(pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) gv2), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 gv2)), (pow2heapp n0 (find_max' n0 p) (Node n gv2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n gv2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n gv2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n gv2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2))
(pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 gv2)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2)), (pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 gv2)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2))
(pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 gv2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 gv2)), (pow2heapp n0 (find_max' n0 p) (smash gv2 c2))
(pow2heapp n0 (find_max' n0 p) (smash gv2 c1)), (pow2heapp n0 (find_max' n0 p) (smash gv2 a2)), (pow2heapp n0 (find_max' n0 p) (smash gv2 a1)), (pow2heapp n0 (find_max' n0 p) (smash gv2 gv2)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) gv2)
(pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 gv2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 gv2))
(pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 gv2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 gv2))
(pow2heapp n0 (find_max' n p) (Node n1 gv2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 gv2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 gv2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 gv2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 gv2))
(pow2heapp n0 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 gv2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 gv2))
(pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 gv2)), (pow2heapp n0 (find_max' n p) (Node n0 gv2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 gv2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 gv2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 gv2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 gv2 gv2))
(pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1)), (pow2heapp n0 (find_max' n p) (Node n c2 gv2)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2)), (pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 gv2))
(pow2heapp n0 (find_max' n p) (Node n a2 c2)), (pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 gv2)), (pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 gv2))
(pow2heapp n0 (find_max' n p) (Node n gv2 c2)), (pow2heapp n0 (find_max' n p) (Node n gv2 c1)), (pow2heapp n0 (find_max' n p) (Node n gv2 a2)), (pow2heapp n0 (find_max' n p) (Node n gv2 a1)), (pow2heapp n0 (find_max' n p) (Node n gv2 gv2)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 gv2))
(pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1)), (pow2heapp n0 (find_max' n p) (smash c1 gv2)), (pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a2 gv2))
(pow2heapp n0 (find_max' n p) (smash a1 c2)), (pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 gv2)), (pow2heapp n0 (find_max' n p) (smash gv2 c2)), (pow2heapp n0 (find_max' n p) (smash gv2 c1)), (pow2heapp n0 (find_max' n p) (smash gv2 a2)), (pow2heapp n0 (find_max' n p) (smash gv2 a1)), (pow2heapp n0 (find_max' n p) (smash gv2 gv2))
(pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) gv2), (pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2)), (pow2heapp n0 (length p) (Node n1 c2 a1))
(pow2heapp n0 (length p) (Node n1 c2 gv2)), (pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1)), (pow2heapp n0 (length p) (Node n1 c1 gv2)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1)), (pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1))
(pow2heapp n0 (length p) (Node n1 a2 gv2)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 a1 a2)), (pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 gv2)), (pow2heapp n0 (length p) (Node n1 gv2 c2)), (pow2heapp n0 (length p) (Node n1 gv2 c1)), (pow2heapp n0 (length p) (Node n1 gv2 a2)), (pow2heapp n0 (length p) (Node n1 gv2 a1))
(pow2heapp n0 (length p) (Node n1 gv2 gv2)), (pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1)), (pow2heapp n0 (length p) (Node n0 c2 gv2)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2)), (pow2heapp n0 (length p) (Node n0 c1 a1))
(pow2heapp n0 (length p) (Node n0 c1 gv2)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 gv2)), (pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1))
(pow2heapp n0 (length p) (Node n0 a1 gv2)), (pow2heapp n0 (length p) (Node n0 gv2 c2)), (pow2heapp n0 (length p) (Node n0 gv2 c1)), (pow2heapp n0 (length p) (Node n0 gv2 a2)), (pow2heapp n0 (length p) (Node n0 gv2 a1)), (pow2heapp n0 (length p) (Node n0 gv2 gv2)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1))
(pow2heapp n0 (length p) (Node n c2 gv2)), (pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1)), (pow2heapp n0 (length p) (Node n c1 a2)), (pow2heapp n0 (length p) (Node n c1 a1)), (pow2heapp n0 (length p) (Node n c1 gv2)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1))
(pow2heapp n0 (length p) (Node n a2 gv2)), (pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 gv2)), (pow2heapp n0 (length p) (Node n gv2 c2)), (pow2heapp n0 (length p) (Node n gv2 c1)), (pow2heapp n0 (length p) (Node n gv2 a2)), (pow2heapp n0 (length p) (Node n gv2 a1))
(pow2heapp n0 (length p) (Node n gv2 gv2)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1)), (pow2heapp n0 (length p) (smash c2 a2)), (pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 gv2)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1))
(pow2heapp n0 (length p) (smash c1 gv2)), (pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a2 gv2)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1))
(pow2heapp n0 (length p) (smash a1 gv2)), (pow2heapp n0 (length p) (smash gv2 c2)), (pow2heapp n0 (length p) (smash gv2 c1)), (pow2heapp n0 (length p) (smash gv2 a2)), (pow2heapp n0 (length p) (smash gv2 a1)), (pow2heapp n0 (length p) (smash gv2 gv2)), (pow2heapp n0 (length p) Leaf), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c2 a2))
(pow2heapp n n1 (Node n1 c2 a1)), (pow2heapp n n1 (Node n1 c2 gv2)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 gv2)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a2 a2))
(pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 gv2)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1)), (pow2heapp n n1 (Node n1 a1 gv2)), (pow2heapp n n1 (Node n1 gv2 c2)), (pow2heapp n n1 (Node n1 gv2 c1)), (pow2heapp n n1 (Node n1 gv2 a2))
(pow2heapp n n1 (Node n1 gv2 a1)), (pow2heapp n n1 (Node n1 gv2 gv2)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 gv2)), (pow2heapp n n1 (Node n0 c1 c2)), (pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n0 c1 a2))
(pow2heapp n n1 (Node n0 c1 a1)), (pow2heapp n n1 (Node n0 c1 gv2)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1)), (pow2heapp n n1 (Node n0 a2 gv2)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 a1 a2))
(pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 gv2)), (pow2heapp n n1 (Node n0 gv2 c2)), (pow2heapp n n1 (Node n0 gv2 c1)), (pow2heapp n n1 (Node n0 gv2 a2)), (pow2heapp n n1 (Node n0 gv2 a1)), (pow2heapp n n1 (Node n0 gv2 gv2)), (pow2heapp n n1 (Node n c2 c2)), (pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c2 a2))
(pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 gv2)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (Node n c1 a2)), (pow2heapp n n1 (Node n c1 a1)), (pow2heapp n n1 (Node n c1 gv2)), (pow2heapp n n1 (Node n a2 c2)), (pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a2 a2))
(pow2heapp n n1 (Node n a2 a1)), (pow2heapp n n1 (Node n a2 gv2)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 gv2)), (pow2heapp n n1 (Node n gv2 c2)), (pow2heapp n n1 (Node n gv2 c1)), (pow2heapp n n1 (Node n gv2 a2))
(pow2heapp n n1 (Node n gv2 a1)), (pow2heapp n n1 (Node n gv2 gv2)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1)), (pow2heapp n n1 (smash c2 gv2)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 (smash c1 a2))
(pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 gv2)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 gv2)), (pow2heapp n n1 (smash a1 c2)), (pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash a1 a2))
(pow2heapp n n1 (smash a1 a1)), (pow2heapp n n1 (smash a1 gv2)), (pow2heapp n n1 (smash gv2 c2)), (pow2heapp n n1 (smash gv2 c1)), (pow2heapp n n1 (smash gv2 a2)), (pow2heapp n n1 (smash gv2 a1)), (pow2heapp n n1 (smash gv2 gv2)), (pow2heapp n n1 Leaf), (pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1))
(pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1)), (pow2heapp n n0 (Node n1 c2 gv2)), (pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1)), (pow2heapp n n0 (Node n1 c1 gv2)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1))
(pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 gv2)), (pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 gv2)), (pow2heapp n n0 (Node n1 gv2 c2)), (pow2heapp n n0 (Node n1 gv2 c1))
(pow2heapp n n0 (Node n1 gv2 a2)), (pow2heapp n n0 (Node n1 gv2 a1)), (pow2heapp n n0 (Node n1 gv2 gv2)), (pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1)), (pow2heapp n n0 (Node n0 c2 gv2)), (pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1))
(pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 gv2)), (pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 gv2)), (pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1))
(pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 gv2)), (pow2heapp n n0 (Node n0 gv2 c2)), (pow2heapp n n0 (Node n0 gv2 c1)), (pow2heapp n n0 (Node n0 gv2 a2)), (pow2heapp n n0 (Node n0 gv2 a1)), (pow2heapp n n0 (Node n0 gv2 gv2)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1))
(pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 gv2)), (pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 gv2)), (pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1))
(pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a2 gv2)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 gv2)), (pow2heapp n n0 (Node n gv2 c2)), (pow2heapp n n0 (Node n gv2 c1))
(pow2heapp n n0 (Node n gv2 a2)), (pow2heapp n n0 (Node n gv2 a1)), (pow2heapp n n0 (Node n gv2 gv2)), (pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1)), (pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 gv2)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1))
(pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 gv2)), (pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a2 gv2)), (pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1))
(pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 gv2)), (pow2heapp n n0 (smash gv2 c2)), (pow2heapp n n0 (smash gv2 c1)), (pow2heapp n n0 (smash gv2 a2)), (pow2heapp n n0 (smash gv2 a1)), (pow2heapp n n0 (smash gv2 gv2)), (pow2heapp n n0 Leaf), (pow2heapp n n (Node n1 c2 c2))
(pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c2 a2)), (pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 gv2)), (pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1)), (pow2heapp n n (Node n1 c1 gv2)), (pow2heapp n n (Node n1 a2 c2))
(pow2heapp n n (Node n1 a2 c1)), (pow2heapp n n (Node n1 a2 a2)), (pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 gv2)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 a1 a2)), (pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 gv2)), (pow2heapp n n (Node n1 gv2 c2))
(pow2heapp n n (Node n1 gv2 c1)), (pow2heapp n n (Node n1 gv2 a2)), (pow2heapp n n (Node n1 gv2 a1)), (pow2heapp n n (Node n1 gv2 gv2)), (pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1)), (pow2heapp n n (Node n0 c2 gv2)), (pow2heapp n n (Node n0 c1 c2))
(pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n0 c1 a2)), (pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 gv2)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 gv2)), (pow2heapp n n (Node n0 a1 c2))
(pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 gv2)), (pow2heapp n n (Node n0 gv2 c2)), (pow2heapp n n (Node n0 gv2 c1)), (pow2heapp n n (Node n0 gv2 a2)), (pow2heapp n n (Node n0 gv2 a1)), (pow2heapp n n (Node n0 gv2 gv2)), (pow2heapp n n (Node n c2 c2))
(pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 gv2)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (Node n c1 a2)), (pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 gv2)), (pow2heapp n n (Node n a2 c2))
(pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv2)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv2)), (pow2heapp n n (Node n gv2 c2))
(pow2heapp n n (Node n gv2 c1)), (pow2heapp n n (Node n gv2 a2)), (pow2heapp n n (Node n gv2 a1)), (pow2heapp n n (Node n gv2 gv2)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1)), (pow2heapp n n (smash c2 a2)), (pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 gv2)), (pow2heapp n n (smash c1 c2))
(pow2heapp n n (smash c1 c1)), (pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 gv2)), (pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv2)), (pow2heapp n n (smash a1 c2))
(pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 gv2)), (pow2heapp n n (smash gv2 c2)), (pow2heapp n n (smash gv2 c1)), (pow2heapp n n (smash gv2 a2)), (pow2heapp n n (smash gv2 a1)), (pow2heapp n n (smash gv2 gv2)), (pow2heapp n n Leaf)
(pow2heapp n (find_max' n1 p) c2), (pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) gv2), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 gv2))
(pow2heapp n (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 gv2))
(pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp n (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 gv2 gv2))
(pow2heapp n (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 gv2))
(pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 gv2))
(pow2heapp n (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 gv2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp n (find_max' n1 p) (Node n c2 c2)), (pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1)), (pow2heapp n (find_max' n1 p) (Node n c2 gv2))
(pow2heapp n (find_max' n1 p) (Node n c1 c2)), (pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 gv2)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 gv2))
(pow2heapp n (find_max' n1 p) (Node n a1 c2)), (pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2)), (pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 gv2)), (pow2heapp n (find_max' n1 p) (Node n gv2 c2)), (pow2heapp n (find_max' n1 p) (Node n gv2 c1)), (pow2heapp n (find_max' n1 p) (Node n gv2 a2)), (pow2heapp n (find_max' n1 p) (Node n gv2 a1)), (pow2heapp n (find_max' n1 p) (Node n gv2 gv2))
(pow2heapp n (find_max' n1 p) (smash c2 c2)), (pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 gv2)), (pow2heapp n (find_max' n1 p) (smash c1 c2)), (pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1)), (pow2heapp n (find_max' n1 p) (smash c1 gv2))
(pow2heapp n (find_max' n1 p) (smash a2 c2)), (pow2heapp n (find_max' n1 p) (smash a2 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2)), (pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 gv2)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 gv2))
(pow2heapp n (find_max' n1 p) (smash gv2 c2)), (pow2heapp n (find_max' n1 p) (smash gv2 c1)), (pow2heapp n (find_max' n1 p) (smash gv2 a2)), (pow2heapp n (find_max' n1 p) (smash gv2 a1)), (pow2heapp n (find_max' n1 p) (smash gv2 gv2)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1)
(pow2heapp n (find_max' n0 p) gv2), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1))
(pow2heapp n (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp n (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp n (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 gv2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp n (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 gv2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c2 a2)), (pow2heapp n (find_max' n0 p) (Node n c2 a1)), (pow2heapp n (find_max' n0 p) (Node n c2 gv2)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1))
(pow2heapp n (find_max' n0 p) (Node n c1 gv2)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 gv2)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1))
(pow2heapp n (find_max' n0 p) (Node n a1 gv2)), (pow2heapp n (find_max' n0 p) (Node n gv2 c2)), (pow2heapp n (find_max' n0 p) (Node n gv2 c1)), (pow2heapp n (find_max' n0 p) (Node n gv2 a2)), (pow2heapp n (find_max' n0 p) (Node n gv2 a1)), (pow2heapp n (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1))
(pow2heapp n (find_max' n0 p) (smash c2 gv2)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1)), (pow2heapp n (find_max' n0 p) (smash c1 a2)), (pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 gv2)), (pow2heapp n (find_max' n0 p) (smash a2 c2)), (pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1))
(pow2heapp n (find_max' n0 p) (smash a2 gv2)), (pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 gv2)), (pow2heapp n (find_max' n0 p) (smash gv2 c2)), (pow2heapp n (find_max' n0 p) (smash gv2 c1)), (pow2heapp n (find_max' n0 p) (smash gv2 a2)), (pow2heapp n (find_max' n0 p) (smash gv2 a1))
(pow2heapp n (find_max' n0 p) (smash gv2 gv2)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) gv2), (pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2))
(pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 gv2)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2)), (pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 gv2)), (pow2heapp n (find_max' n p) (Node n1 a2 c2)), (pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2))
(pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 gv2)), (pow2heapp n (find_max' n p) (Node n1 a1 c2)), (pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 gv2)), (pow2heapp n (find_max' n p) (Node n1 gv2 c2)), (pow2heapp n (find_max' n p) (Node n1 gv2 c1)), (pow2heapp n (find_max' n p) (Node n1 gv2 a2))
(pow2heapp n (find_max' n p) (Node n1 gv2 a1)), (pow2heapp n (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2)), (pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 gv2)), (pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2))
(pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 gv2)), (pow2heapp n (find_max' n p) (Node n0 a2 c2)), (pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 gv2)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2))
(pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 gv2)), (pow2heapp n (find_max' n p) (Node n0 gv2 c2)), (pow2heapp n (find_max' n p) (Node n0 gv2 c1)), (pow2heapp n (find_max' n p) (Node n0 gv2 a2)), (pow2heapp n (find_max' n p) (Node n0 gv2 a1)), (pow2heapp n (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp n (find_max' n p) (Node n c2 c2)), (pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2))
(pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 gv2)), (pow2heapp n (find_max' n p) (Node n c1 c2)), (pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 gv2)), (pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a2 a2))
(pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 gv2)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 gv2)), (pow2heapp n (find_max' n p) (Node n gv2 c2)), (pow2heapp n (find_max' n p) (Node n gv2 c1)), (pow2heapp n (find_max' n p) (Node n gv2 a2))
(pow2heapp n (find_max' n p) (Node n gv2 a1)), (pow2heapp n (find_max' n p) (Node n gv2 gv2)), (pow2heapp n (find_max' n p) (smash c2 c2)), (pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 gv2)), (pow2heapp n (find_max' n p) (smash c1 c2)), (pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) (smash c1 a2))
(pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 gv2)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 gv2)), (pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash a1 a2))
(pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 gv2)), (pow2heapp n (find_max' n p) (smash gv2 c2)), (pow2heapp n (find_max' n p) (smash gv2 c1)), (pow2heapp n (find_max' n p) (smash gv2 a2)), (pow2heapp n (find_max' n p) (smash gv2 a1)), (pow2heapp n (find_max' n p) (smash gv2 gv2)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1)
(pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) gv2), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 gv2)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1))
(pow2heapp n (length p) (Node n1 c1 a2)), (pow2heapp n (length p) (Node n1 c1 a1)), (pow2heapp n (length p) (Node n1 c1 gv2)), (pow2heapp n (length p) (Node n1 a2 c2)), (pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1)), (pow2heapp n (length p) (Node n1 a2 gv2)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1))
(pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 gv2)), (pow2heapp n (length p) (Node n1 gv2 c2)), (pow2heapp n (length p) (Node n1 gv2 c1)), (pow2heapp n (length p) (Node n1 gv2 a2)), (pow2heapp n (length p) (Node n1 gv2 a1)), (pow2heapp n (length p) (Node n1 gv2 gv2)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1))
(pow2heapp n (length p) (Node n0 c2 a2)), (pow2heapp n (length p) (Node n0 c2 a1)), (pow2heapp n (length p) (Node n0 c2 gv2)), (pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1)), (pow2heapp n (length p) (Node n0 c1 gv2)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1))
(pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 gv2)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 gv2)), (pow2heapp n (length p) (Node n0 gv2 c2)), (pow2heapp n (length p) (Node n0 gv2 c1))
(pow2heapp n (length p) (Node n0 gv2 a2)), (pow2heapp n (length p) (Node n0 gv2 a1)), (pow2heapp n (length p) (Node n0 gv2 gv2)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1)), (pow2heapp n (length p) (Node n c2 gv2)), (pow2heapp n (length p) (Node n c1 c2)), (pow2heapp n (length p) (Node n c1 c1))
(pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 gv2)), (pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a2 gv2)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1))
(pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 gv2)), (pow2heapp n (length p) (Node n gv2 c2)), (pow2heapp n (length p) (Node n gv2 c1)), (pow2heapp n (length p) (Node n gv2 a2)), (pow2heapp n (length p) (Node n gv2 a1)), (pow2heapp n (length p) (Node n gv2 gv2)), (pow2heapp n (length p) (smash c2 c2)), (pow2heapp n (length p) (smash c2 c1))
(pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 gv2)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1)), (pow2heapp n (length p) (smash c1 gv2)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1))
(pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 gv2)), (pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) (smash a1 gv2)), (pow2heapp n (length p) (smash gv2 c2)), (pow2heapp n (length p) (smash gv2 c1))
(pow2heapp n (length p) (smash gv2 a2)), (pow2heapp n (length p) (smash gv2 a1)), (pow2heapp n (length p) (smash gv2 gv2)), (pow2heapp n (length p) Leaf), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 gv2), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 gv2)), (pow2heapp (find_max' n1 p) n1 (Node n gv2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n gv2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n gv2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n gv2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n gv2 gv2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2)), (pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 gv2)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2))
(pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 gv2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 gv2)), (pow2heapp (find_max' n1 p) n1 (smash a1 c2))
(pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2)), (pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 gv2)), (pow2heapp (find_max' n1 p) n1 (smash gv2 c2)), (pow2heapp (find_max' n1 p) n1 (smash gv2 c1)), (pow2heapp (find_max' n1 p) n1 (smash gv2 a2)), (pow2heapp (find_max' n1 p) n1 (smash gv2 a1)), (pow2heapp (find_max' n1 p) n1 (smash gv2 gv2)), (pow2heapp (find_max' n1 p) n1 Leaf)
(pow2heapp (find_max' n1 p) n0 c2), (pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1), (pow2heapp (find_max' n1 p) n0 gv2), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv2 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 gv2))
(pow2heapp (find_max' n1 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 gv2)), (pow2heapp (find_max' n1 p) n0 (Node n gv2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n gv2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n gv2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n gv2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n gv2 gv2))
(pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 gv2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1)), (pow2heapp (find_max' n1 p) n0 (smash c1 gv2))
(pow2heapp (find_max' n1 p) n0 (smash a2 c2)), (pow2heapp (find_max' n1 p) n0 (smash a2 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 gv2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 gv2))
(pow2heapp (find_max' n1 p) n0 (smash gv2 c2)), (pow2heapp (find_max' n1 p) n0 (smash gv2 c1)), (pow2heapp (find_max' n1 p) n0 (smash gv2 a2)), (pow2heapp (find_max' n1 p) n0 (smash gv2 a1)), (pow2heapp (find_max' n1 p) n0 (smash gv2 gv2)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1)
(pow2heapp (find_max' n1 p) n gv2), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 gv2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1))
(pow2heapp (find_max' n1 p) n (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 gv2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) n (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) n (Node n1 gv2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 gv2 gv2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 gv2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 gv2)), (pow2heapp (find_max' n1 p) n (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 gv2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1)), (pow2heapp (find_max' n1 p) n (Node n c2 gv2)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (Node n c1 a2)), (pow2heapp (find_max' n1 p) n (Node n c1 a1))
(pow2heapp (find_max' n1 p) n (Node n c1 gv2)), (pow2heapp (find_max' n1 p) n (Node n a2 c2)), (pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1)), (pow2heapp (find_max' n1 p) n (Node n a2 gv2)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1))
(pow2heapp (find_max' n1 p) n (Node n a1 gv2)), (pow2heapp (find_max' n1 p) n (Node n gv2 c2)), (pow2heapp (find_max' n1 p) n (Node n gv2 c1)), (pow2heapp (find_max' n1 p) n (Node n gv2 a2)), (pow2heapp (find_max' n1 p) n (Node n gv2 a1)), (pow2heapp (find_max' n1 p) n (Node n gv2 gv2)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2)), (pow2heapp (find_max' n1 p) n (smash c2 a1))
(pow2heapp (find_max' n1 p) n (smash c2 gv2)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1)), (pow2heapp (find_max' n1 p) n (smash c1 gv2)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1))
(pow2heapp (find_max' n1 p) n (smash a2 gv2)), (pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1)), (pow2heapp (find_max' n1 p) n (smash a1 gv2)), (pow2heapp (find_max' n1 p) n (smash gv2 c2)), (pow2heapp (find_max' n1 p) n (smash gv2 c1)), (pow2heapp (find_max' n1 p) n (smash gv2 a2)), (pow2heapp (find_max' n1 p) n (smash gv2 a1))
(pow2heapp (find_max' n1 p) n (smash gv2 gv2)), (pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) gv2), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1)
(pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1), (pow2heapp (find_max' n1 p) (find_max' n0 p) gv2), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) c2), (pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) a2), (pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) gv2), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf)
(pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1), (pow2heapp (find_max' n1 p) (length p) gv2), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv2 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n0 gv2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 gv2))
(pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 gv2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv2 gv2))
(pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 gv2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 gv2))
(pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 gv2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 gv2))
(pow2heapp (find_max' n1 p) (length p) (smash gv2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash gv2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash gv2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash gv2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash gv2 gv2)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1)
(pow2heapp (find_max' n0 p) n1 gv2), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n c1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n a1 gv2)), (pow2heapp (find_max' n0 p) n1 (Node n gv2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n gv2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n gv2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n gv2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1)), (pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1))
(pow2heapp (find_max' n0 p) n1 (smash c2 gv2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1)), (pow2heapp (find_max' n0 p) n1 (smash c1 gv2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1)), (pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1))
(pow2heapp (find_max' n0 p) n1 (smash a2 gv2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1)), (pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 gv2)), (pow2heapp (find_max' n0 p) n1 (smash gv2 c2)), (pow2heapp (find_max' n0 p) n1 (smash gv2 c1)), (pow2heapp (find_max' n0 p) n1 (smash gv2 a2)), (pow2heapp (find_max' n0 p) n1 (smash gv2 a1))
(pow2heapp (find_max' n0 p) n1 (smash gv2 gv2)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 gv2), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 gv2)), (pow2heapp (find_max' n0 p) n0 (Node n gv2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n gv2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n gv2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n gv2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2)), (pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 gv2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2))
(pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 gv2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 gv2)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2)), (pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2))
(pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 gv2)), (pow2heapp (find_max' n0 p) n0 (smash gv2 c2)), (pow2heapp (find_max' n0 p) n0 (smash gv2 c1)), (pow2heapp (find_max' n0 p) n0 (smash gv2 a2)), (pow2heapp (find_max' n0 p) n0 (smash gv2 a1)), (pow2heapp (find_max' n0 p) n0 (smash gv2 gv2)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n c2), (pow2heapp (find_max' n0 p) n c1)
(pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n gv2), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1))
(pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) n (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 gv2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) n (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 gv2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 gv2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) n (Node n c2 c2)), (pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 gv2)), (pow2heapp (find_max' n0 p) n (Node n c1 c2)), (pow2heapp (find_max' n0 p) n (Node n c1 c1))
(pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 gv2)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 gv2)), (pow2heapp (find_max' n0 p) n (Node n a1 c2)), (pow2heapp (find_max' n0 p) n (Node n a1 c1))
(pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 gv2)), (pow2heapp (find_max' n0 p) n (Node n gv2 c2)), (pow2heapp (find_max' n0 p) n (Node n gv2 c1)), (pow2heapp (find_max' n0 p) n (Node n gv2 a2)), (pow2heapp (find_max' n0 p) n (Node n gv2 a1)), (pow2heapp (find_max' n0 p) n (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1))
(pow2heapp (find_max' n0 p) n (smash c2 a2)), (pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 gv2)), (pow2heapp (find_max' n0 p) n (smash c1 c2)), (pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1)), (pow2heapp (find_max' n0 p) n (smash c1 gv2)), (pow2heapp (find_max' n0 p) n (smash a2 c2)), (pow2heapp (find_max' n0 p) n (smash a2 c1))
(pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 gv2)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 gv2)), (pow2heapp (find_max' n0 p) n (smash gv2 c2)), (pow2heapp (find_max' n0 p) n (smash gv2 c1))
(pow2heapp (find_max' n0 p) n (smash gv2 a2)), (pow2heapp (find_max' n0 p) n (smash gv2 a1)), (pow2heapp (find_max' n0 p) n (smash gv2 gv2)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) c2), (pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1), (pow2heapp (find_max' n0 p) (find_max' n1 p) gv2), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf)
(pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) gv2), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv2 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 gv2))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1)
(pow2heapp (find_max' n0 p) (find_max' n p) gv2), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) gv2), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 gv2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 gv2)), (pow2heapp (find_max' n0 p) (length p) (Node n gv2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n gv2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n gv2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv2 gv2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 gv2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 gv2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 gv2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 gv2)), (pow2heapp (find_max' n0 p) (length p) (smash gv2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash gv2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash gv2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash gv2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash gv2 gv2)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1)
(pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 gv2), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 gv2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1))
(pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 gv2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 gv2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1))
(pow2heapp (find_max' n p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 gv2)), (pow2heapp (find_max' n p) n1 (Node n1 gv2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 gv2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 gv2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 gv2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1))
(pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 gv2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 gv2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1))
(pow2heapp (find_max' n p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 gv2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 gv2)), (pow2heapp (find_max' n p) n1 (Node n0 gv2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 gv2 c1))
(pow2heapp (find_max' n p) n1 (Node n0 gv2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 gv2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 gv2)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1))
(pow2heapp (find_max' n p) n1 (Node n c1 a2)), (pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 gv2)), (pow2heapp (find_max' n p) n1 (Node n a2 c2)), (pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a2 a2)), (pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 gv2)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1))
(pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 gv2)), (pow2heapp (find_max' n p) n1 (Node n gv2 c2)), (pow2heapp (find_max' n p) n1 (Node n gv2 c1)), (pow2heapp (find_max' n p) n1 (Node n gv2 a2)), (pow2heapp (find_max' n p) n1 (Node n gv2 a1)), (pow2heapp (find_max' n p) n1 (Node n gv2 gv2)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1))
(pow2heapp (find_max' n p) n1 (smash c2 a2)), (pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 gv2)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 gv2)), (pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1))
(pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1)), (pow2heapp (find_max' n p) n1 (smash a2 gv2)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2)), (pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 gv2)), (pow2heapp (find_max' n p) n1 (smash gv2 c2)), (pow2heapp (find_max' n p) n1 (smash gv2 c1))
(pow2heapp (find_max' n p) n1 (smash gv2 a2)), (pow2heapp (find_max' n p) n1 (smash gv2 a1)), (pow2heapp (find_max' n p) n1 (smash gv2 gv2)), (pow2heapp (find_max' n p) n1 Leaf), (pow2heapp (find_max' n p) n0 c2), (pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 gv2), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 gv2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 gv2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 gv2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 gv2)), (pow2heapp (find_max' n p) n0 (Node n1 gv2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 gv2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 gv2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 gv2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 gv2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2))
(pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 gv2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 gv2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2))
(pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 gv2)), (pow2heapp (find_max' n p) n0 (Node n0 gv2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 gv2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 gv2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 gv2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) n0 (Node n c2 c2))
(pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1)), (pow2heapp (find_max' n p) n0 (Node n c2 gv2)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 gv2)), (pow2heapp (find_max' n p) n0 (Node n a2 c2))
(pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 gv2)), (pow2heapp (find_max' n p) n0 (Node n a1 c2)), (pow2heapp (find_max' n p) n0 (Node n a1 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 gv2)), (pow2heapp (find_max' n p) n0 (Node n gv2 c2))
(pow2heapp (find_max' n p) n0 (Node n gv2 c1)), (pow2heapp (find_max' n p) n0 (Node n gv2 a2)), (pow2heapp (find_max' n p) n0 (Node n gv2 a1)), (pow2heapp (find_max' n p) n0 (Node n gv2 gv2)), (pow2heapp (find_max' n p) n0 (smash c2 c2)), (pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 gv2)), (pow2heapp (find_max' n p) n0 (smash c1 c2))
(pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1)), (pow2heapp (find_max' n p) n0 (smash c1 gv2)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a2 gv2)), (pow2heapp (find_max' n p) n0 (smash a1 c2))
(pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 gv2)), (pow2heapp (find_max' n p) n0 (smash gv2 c2)), (pow2heapp (find_max' n p) n0 (smash gv2 c1)), (pow2heapp (find_max' n p) n0 (smash gv2 a2)), (pow2heapp (find_max' n p) n0 (smash gv2 a1)), (pow2heapp (find_max' n p) n0 (smash gv2 gv2)), (pow2heapp (find_max' n p) n0 Leaf)
(pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n gv2), (pow2heapp (find_max' n p) n (Node n1 c2 c2)), (pow2heapp (find_max' n p) n (Node n1 c2 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 gv2))
(pow2heapp (find_max' n p) n (Node n1 c1 c2)), (pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 gv2)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a2 a2)), (pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 gv2))
(pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2)), (pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 gv2)), (pow2heapp (find_max' n p) n (Node n1 gv2 c2)), (pow2heapp (find_max' n p) n (Node n1 gv2 c1)), (pow2heapp (find_max' n p) n (Node n1 gv2 a2)), (pow2heapp (find_max' n p) n (Node n1 gv2 a1)), (pow2heapp (find_max' n p) n (Node n1 gv2 gv2))
(pow2heapp (find_max' n p) n (Node n0 c2 c2)), (pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 gv2)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 gv2))
(pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1)), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 gv2)), (pow2heapp (find_max' n p) n (Node n0 a1 c2)), (pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 gv2))
(pow2heapp (find_max' n p) n (Node n0 gv2 c2)), (pow2heapp (find_max' n p) n (Node n0 gv2 c1)), (pow2heapp (find_max' n p) n (Node n0 gv2 a2)), (pow2heapp (find_max' n p) n (Node n0 gv2 a1)), (pow2heapp (find_max' n p) n (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c2 a2)), (pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 gv2))
(pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2)), (pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 gv2)), (pow2heapp (find_max' n p) n (Node n a2 c2)), (pow2heapp (find_max' n p) n (Node n a2 c1)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 gv2))
(pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 gv2)), (pow2heapp (find_max' n p) n (Node n gv2 c2)), (pow2heapp (find_max' n p) n (Node n gv2 c1)), (pow2heapp (find_max' n p) n (Node n gv2 a2)), (pow2heapp (find_max' n p) n (Node n gv2 a1)), (pow2heapp (find_max' n p) n (Node n gv2 gv2))
(pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1)), (pow2heapp (find_max' n p) n (smash c2 a2)), (pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 gv2)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n (smash c1 a2)), (pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 gv2))
(pow2heapp (find_max' n p) n (smash a2 c2)), (pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 gv2)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 gv2))
(pow2heapp (find_max' n p) n (smash gv2 c2)), (pow2heapp (find_max' n p) n (smash gv2 c1)), (pow2heapp (find_max' n p) n (smash gv2 a2)), (pow2heapp (find_max' n p) n (smash gv2 a1)), (pow2heapp (find_max' n p) n (smash gv2 gv2)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1)
(pow2heapp (find_max' n p) (find_max' n1 p) gv2), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) c2), (pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) gv2), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1)
(pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) gv2), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 gv2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash gv2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) gv2), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n1 gv2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 gv2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 gv2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2))
(pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 gv2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 gv2)), (pow2heapp (find_max' n p) (length p) (Node n gv2 c2))
(pow2heapp (find_max' n p) (length p) (Node n gv2 c1)), (pow2heapp (find_max' n p) (length p) (Node n gv2 a2)), (pow2heapp (find_max' n p) (length p) (Node n gv2 a1)), (pow2heapp (find_max' n p) (length p) (Node n gv2 gv2)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2)), (pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 gv2)), (pow2heapp (find_max' n p) (length p) (smash c1 c2))
(pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 gv2)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 gv2)), (pow2heapp (find_max' n p) (length p) (smash a1 c2))
(pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 gv2)), (pow2heapp (find_max' n p) (length p) (smash gv2 c2)), (pow2heapp (find_max' n p) (length p) (smash gv2 c1)), (pow2heapp (find_max' n p) (length p) (smash gv2 a2)), (pow2heapp (find_max' n p) (length p) (smash gv2 a1)), (pow2heapp (find_max' n p) (length p) (smash gv2 gv2)), (pow2heapp (find_max' n p) (length p) Leaf)
(pow2heapp (length p) n1 c2), (pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 a2), (pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 gv2), (pow2heapp (length p) n1 (Node n1 c2 c2)), (pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 gv2))
(pow2heapp (length p) n1 (Node n1 c1 c2)), (pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 gv2)), (pow2heapp (length p) n1 (Node n1 a2 c2)), (pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2)), (pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 gv2))
(pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 gv2)), (pow2heapp (length p) n1 (Node n1 gv2 c2)), (pow2heapp (length p) n1 (Node n1 gv2 c1)), (pow2heapp (length p) n1 (Node n1 gv2 a2)), (pow2heapp (length p) n1 (Node n1 gv2 a1)), (pow2heapp (length p) n1 (Node n1 gv2 gv2))
(pow2heapp (length p) n1 (Node n0 c2 c2)), (pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 gv2)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 gv2))
(pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 gv2)), (pow2heapp (length p) n1 (Node n0 a1 c2)), (pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 gv2))
(pow2heapp (length p) n1 (Node n0 gv2 c2)), (pow2heapp (length p) n1 (Node n0 gv2 c1)), (pow2heapp (length p) n1 (Node n0 gv2 a2)), (pow2heapp (length p) n1 (Node n0 gv2 a1)), (pow2heapp (length p) n1 (Node n0 gv2 gv2)), (pow2heapp (length p) n1 (Node n c2 c2)), (pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 gv2))
(pow2heapp (length p) n1 (Node n c1 c2)), (pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (Node n c1 a2)), (pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 gv2)), (pow2heapp (length p) n1 (Node n a2 c2)), (pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 gv2))
(pow2heapp (length p) n1 (Node n a1 c2)), (pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n a1 a2)), (pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 gv2)), (pow2heapp (length p) n1 (Node n gv2 c2)), (pow2heapp (length p) n1 (Node n gv2 c1)), (pow2heapp (length p) n1 (Node n gv2 a2)), (pow2heapp (length p) n1 (Node n gv2 a1)), (pow2heapp (length p) n1 (Node n gv2 gv2))
(pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c2 a2)), (pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 gv2)), (pow2heapp (length p) n1 (smash c1 c2)), (pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 gv2))
(pow2heapp (length p) n1 (smash a2 c2)), (pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 gv2)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 gv2))
(pow2heapp (length p) n1 (smash gv2 c2)), (pow2heapp (length p) n1 (smash gv2 c1)), (pow2heapp (length p) n1 (smash gv2 a2)), (pow2heapp (length p) n1 (smash gv2 a1)), (pow2heapp (length p) n1 (smash gv2 gv2)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1)
(pow2heapp (length p) n0 gv2), (pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1)), (pow2heapp (length p) n0 (Node n1 c2 gv2)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1)), (pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1))
(pow2heapp (length p) n0 (Node n1 c1 gv2)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 gv2)), (pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1))
(pow2heapp (length p) n0 (Node n1 a1 gv2)), (pow2heapp (length p) n0 (Node n1 gv2 c2)), (pow2heapp (length p) n0 (Node n1 gv2 c1)), (pow2heapp (length p) n0 (Node n1 gv2 a2)), (pow2heapp (length p) n0 (Node n1 gv2 a1)), (pow2heapp (length p) n0 (Node n1 gv2 gv2)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1)), (pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1))
(pow2heapp (length p) n0 (Node n0 c2 gv2)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1)), (pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 gv2)), (pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1)), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1))
(pow2heapp (length p) n0 (Node n0 a2 gv2)), (pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n0 a1 gv2)), (pow2heapp (length p) n0 (Node n0 gv2 c2)), (pow2heapp (length p) n0 (Node n0 gv2 c1)), (pow2heapp (length p) n0 (Node n0 gv2 a2)), (pow2heapp (length p) n0 (Node n0 gv2 a1))
(pow2heapp (length p) n0 (Node n0 gv2 gv2)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 gv2)), (pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1))
(pow2heapp (length p) n0 (Node n c1 gv2)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 gv2)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1)), (pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1))
(pow2heapp (length p) n0 (Node n a1 gv2)), (pow2heapp (length p) n0 (Node n gv2 c2)), (pow2heapp (length p) n0 (Node n gv2 c1)), (pow2heapp (length p) n0 (Node n gv2 a2)), (pow2heapp (length p) n0 (Node n gv2 a1)), (pow2heapp (length p) n0 (Node n gv2 gv2)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1)), (pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1))
(pow2heapp (length p) n0 (smash c2 gv2)), (pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1)), (pow2heapp (length p) n0 (smash c1 gv2)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1))
(pow2heapp (length p) n0 (smash a2 gv2)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 gv2)), (pow2heapp (length p) n0 (smash gv2 c2)), (pow2heapp (length p) n0 (smash gv2 c1)), (pow2heapp (length p) n0 (smash gv2 a2)), (pow2heapp (length p) n0 (smash gv2 a1))
(pow2heapp (length p) n0 (smash gv2 gv2)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n gv2), (pow2heapp (length p) n (Node n1 c2 c2)), (pow2heapp (length p) n (Node n1 c2 c1)), (pow2heapp (length p) n (Node n1 c2 a2))
(pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 gv2)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 gv2)), (pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a2 a2))
(pow2heapp (length p) n (Node n1 a2 a1)), (pow2heapp (length p) n (Node n1 a2 gv2)), (pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 gv2)), (pow2heapp (length p) n (Node n1 gv2 c2)), (pow2heapp (length p) n (Node n1 gv2 c1)), (pow2heapp (length p) n (Node n1 gv2 a2))
(pow2heapp (length p) n (Node n1 gv2 a1)), (pow2heapp (length p) n (Node n1 gv2 gv2)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 gv2)), (pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n0 c1 a2))
(pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 gv2)), (pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 gv2)), (pow2heapp (length p) n (Node n0 a1 c2)), (pow2heapp (length p) n (Node n0 a1 c1)), (pow2heapp (length p) n (Node n0 a1 a2))
(pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 gv2)), (pow2heapp (length p) n (Node n0 gv2 c2)), (pow2heapp (length p) n (Node n0 gv2 c1)), (pow2heapp (length p) n (Node n0 gv2 a2)), (pow2heapp (length p) n (Node n0 gv2 a1)), (pow2heapp (length p) n (Node n0 gv2 gv2)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c2 a2))
(pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 gv2)), (pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1)), (pow2heapp (length p) n (Node n c1 a2)), (pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 gv2)), (pow2heapp (length p) n (Node n a2 c2)), (pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a2 a2))
(pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 gv2)), (pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (Node n a1 gv2)), (pow2heapp (length p) n (Node n gv2 c2)), (pow2heapp (length p) n (Node n gv2 c1)), (pow2heapp (length p) n (Node n gv2 a2))
(pow2heapp (length p) n (Node n gv2 a1)), (pow2heapp (length p) n (Node n gv2 gv2)), (pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c2 a2)), (pow2heapp (length p) n (smash c2 a1)), (pow2heapp (length p) n (smash c2 gv2)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n (smash c1 a2))
(pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 gv2)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 gv2)), (pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash a1 a2))
(pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 gv2)), (pow2heapp (length p) n (smash gv2 c2)), (pow2heapp (length p) n (smash gv2 c1)), (pow2heapp (length p) n (smash gv2 a2)), (pow2heapp (length p) n (smash gv2 a1)), (pow2heapp (length p) n (smash gv2 gv2)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1)
(pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) gv2), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 gv2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 gv2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv2 gv2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 gv2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 gv2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 gv2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 gv2)), (pow2heapp (length p) (find_max' n1 p) (smash gv2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash gv2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash gv2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash gv2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash gv2 gv2)), (pow2heapp (length p) (find_max' n1 p) Leaf), (pow2heapp (length p) (find_max' n0 p) c2), (pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) gv2), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 gv2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 gv2)), (pow2heapp (length p) (find_max' n0 p) (Node n gv2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n gv2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n gv2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv2 gv2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 gv2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c2))
(pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 gv2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 gv2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2))
(pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 gv2)), (pow2heapp (length p) (find_max' n0 p) (smash gv2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash gv2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash gv2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash gv2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash gv2 gv2)), (pow2heapp (length p) (find_max' n0 p) Leaf)
(pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) gv2), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 gv2))
(pow2heapp (length p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 gv2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 gv2))
(pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 gv2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv2 gv2))
(pow2heapp (length p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 gv2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 gv2))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 gv2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 gv2))
(pow2heapp (length p) (find_max' n p) (Node n0 gv2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv2 gv2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 gv2))
(pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 gv2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 gv2))
(pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 gv2)), (pow2heapp (length p) (find_max' n p) (Node n gv2 c2)), (pow2heapp (length p) (find_max' n p) (Node n gv2 c1)), (pow2heapp (length p) (find_max' n p) (Node n gv2 a2)), (pow2heapp (length p) (find_max' n p) (Node n gv2 a1)), (pow2heapp (length p) (find_max' n p) (Node n gv2 gv2))
(pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2)), (pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 gv2)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) (smash c1 a2)), (pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 gv2))
(pow2heapp (length p) (find_max' n p) (smash a2 c2)), (pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 gv2)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 gv2))
(pow2heapp (length p) (find_max' n p) (smash gv2 c2)), (pow2heapp (length p) (find_max' n p) (smash gv2 c1)), (pow2heapp (length p) (find_max' n p) (smash gv2 a2)), (pow2heapp (length p) (find_max' n p) (smash gv2 a1)), (pow2heapp (length p) (find_max' n p) (smash gv2 gv2)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) c2), (pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1)
(pow2heapp (length p) (length p) gv2), (pow2heapp (length p) (length p) (Node n1 c2 c2)), (pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 gv2)), (pow2heapp (length p) (length p) (Node n1 c1 c2)), (pow2heapp (length p) (length p) (Node n1 c1 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1))
(pow2heapp (length p) (length p) (Node n1 c1 gv2)), (pow2heapp (length p) (length p) (Node n1 a2 c2)), (pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2)), (pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 gv2)), (pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1))
(pow2heapp (length p) (length p) (Node n1 a1 gv2)), (pow2heapp (length p) (length p) (Node n1 gv2 c2)), (pow2heapp (length p) (length p) (Node n1 gv2 c1)), (pow2heapp (length p) (length p) (Node n1 gv2 a2)), (pow2heapp (length p) (length p) (Node n1 gv2 a1)), (pow2heapp (length p) (length p) (Node n1 gv2 gv2)), (pow2heapp (length p) (length p) (Node n0 c2 c2)), (pow2heapp (length p) (length p) (Node n0 c2 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1))
(pow2heapp (length p) (length p) (Node n0 c2 gv2)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 gv2)), (pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1))
(pow2heapp (length p) (length p) (Node n0 a2 gv2)), (pow2heapp (length p) (length p) (Node n0 a1 c2)), (pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 gv2)), (pow2heapp (length p) (length p) (Node n0 gv2 c2)), (pow2heapp (length p) (length p) (Node n0 gv2 c1)), (pow2heapp (length p) (length p) (Node n0 gv2 a2)), (pow2heapp (length p) (length p) (Node n0 gv2 a1))
(pow2heapp (length p) (length p) (Node n0 gv2 gv2)), (pow2heapp (length p) (length p) (Node n c2 c2)), (pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1)), (pow2heapp (length p) (length p) (Node n c2 gv2)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (Node n c1 a2)), (pow2heapp (length p) (length p) (Node n c1 a1))
(pow2heapp (length p) (length p) (Node n c1 gv2)), (pow2heapp (length p) (length p) (Node n a2 c2)), (pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 gv2)), (pow2heapp (length p) (length p) (Node n a1 c2)), (pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1))
(pow2heapp (length p) (length p) (Node n a1 gv2)), (pow2heapp (length p) (length p) (Node n gv2 c2)), (pow2heapp (length p) (length p) (Node n gv2 c1)), (pow2heapp (length p) (length p) (Node n gv2 a2)), (pow2heapp (length p) (length p) (Node n gv2 a1)), (pow2heapp (length p) (length p) (Node n gv2 gv2)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c2 a2)), (pow2heapp (length p) (length p) (smash c2 a1))
(pow2heapp (length p) (length p) (smash c2 gv2)), (pow2heapp (length p) (length p) (smash c1 c2)), (pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1)), (pow2heapp (length p) (length p) (smash c1 gv2)), (pow2heapp (length p) (length p) (smash a2 c2)), (pow2heapp (length p) (length p) (smash a2 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1))
(pow2heapp (length p) (length p) (smash a2 gv2)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 gv2)), (pow2heapp (length p) (length p) (smash gv2 c2)), (pow2heapp (length p) (length p) (smash gv2 c1)), (pow2heapp (length p) (length p) (smash gv2 a2)), (pow2heapp (length p) (length p) (smash gv2 a1))
(pow2heapp (length p) (length p) (smash gv2 gv2)), (pow2heapp (length p) (length p) Leaf), (Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (gv2 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1))
(Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1)), (Permutation p (heap_delete_max gv2)), (Permutation p (join p p c2)), (Permutation p (join p p c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p gv2)), (Permutation p (insert n1 p)), (Permutation p (insert n0 p))
(Permutation p (insert n p)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (carry p a2)), (Permutation p (carry p a1)), (Permutation p (carry p gv2)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (c2 :: p) p), (Permutation (c2 :: p) (c1 :: p))
(Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p)), (Permutation (c2 :: p) (gv2 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max gv2)), (Permutation (c2 :: p) (join p p c2))
(Permutation (c2 :: p) (join p p c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1)), (Permutation (c2 :: p) (join p p gv2)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1)), (Permutation (c2 :: p) (carry p a2))
(Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p gv2)), (Permutation (c2 :: p) (p ++ p)), (Permutation (c2 :: p) []), (Permutation (c1 :: p) p), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (gv2 :: p)), (Permutation (c1 :: p) (merge p p))
(Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1)), (Permutation (c1 :: p) (heap_delete_max gv2)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (join p p a2)), (Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p gv2))
(Permutation (c1 :: p) (insert n1 p)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (carry p c2)), (Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p gv2)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) [])
(Permutation (a2 :: p) p), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (gv2 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1))
(Permutation (a2 :: p) (heap_delete_max gv2)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p gv2)), (Permutation (a2 :: p) (insert n1 p)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p c2))
(Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p gv2)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (c2 :: p)), (Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (a2 :: p))
(Permutation (a1 :: p) (gv2 :: p)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max gv2)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1)), (Permutation (a1 :: p) (join p p a2))
(Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p gv2)), (Permutation (a1 :: p) (insert n1 p)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p gv2))
(Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (gv2 :: p) p), (Permutation (gv2 :: p) (c2 :: p)), (Permutation (gv2 :: p) (c1 :: p)), (Permutation (gv2 :: p) (a2 :: p)), (Permutation (gv2 :: p) (a1 :: p)), (Permutation (gv2 :: p) (merge p p)), (Permutation (gv2 :: p) (heap_delete_max c2)), (Permutation (gv2 :: p) (heap_delete_max c1))
(Permutation (gv2 :: p) (heap_delete_max a2)), (Permutation (gv2 :: p) (heap_delete_max a1)), (Permutation (gv2 :: p) (heap_delete_max gv2)), (Permutation (gv2 :: p) (join p p c2)), (Permutation (gv2 :: p) (join p p c1)), (Permutation (gv2 :: p) (join p p a2)), (Permutation (gv2 :: p) (join p p a1)), (Permutation (gv2 :: p) (join p p gv2)), (Permutation (gv2 :: p) (insert n1 p)), (Permutation (gv2 :: p) (insert n0 p))
(Permutation (gv2 :: p) (insert n p)), (Permutation (gv2 :: p) (carry p c2)), (Permutation (gv2 :: p) (carry p c1)), (Permutation (gv2 :: p) (carry p a2)), (Permutation (gv2 :: p) (carry p a1)), (Permutation (gv2 :: p) (carry p gv2)), (Permutation (gv2 :: p) (p ++ p)), (Permutation (gv2 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (c2 :: p))
(Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (gv2 :: p)), (Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (heap_delete_max gv2)), (Permutation (merge p p) (join p p c2))
(Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p gv2)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (carry p a2))
(Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p gv2)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max c2) p), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (gv2 :: p))
(Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (heap_delete_max a2)), (Permutation (heap_delete_max c2) (heap_delete_max a1)), (Permutation (heap_delete_max c2) (heap_delete_max gv2)), (Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1)), (Permutation (heap_delete_max c2) (join p p gv2))
(Permutation (heap_delete_max c2) (insert n1 p)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (carry p a2)), (Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p gv2)), (Permutation (heap_delete_max c2) (p ++ p)), (Permutation (heap_delete_max c2) [])
(Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p)), (Permutation (heap_delete_max c1) (a2 :: p)), (Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (gv2 :: p)), (Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max c2)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1))
(Permutation (heap_delete_max c1) (heap_delete_max gv2)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (join p p a2)), (Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p gv2)), (Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert n0 p)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (carry p c2))
(Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p gv2)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (c2 :: p)), (Permutation (heap_delete_max a2) (c1 :: p)), (Permutation (heap_delete_max a2) (a2 :: p))
(Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (gv2 :: p)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv2)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1)), (Permutation (heap_delete_max a2) (join p p a2))
(Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p gv2)), (Permutation (heap_delete_max a2) (insert n1 p)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p gv2))
(Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (gv2 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max c2))
(Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv2)), (Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p gv2)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert n0 p))
(Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p gv2)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv2) p), (Permutation (heap_delete_max gv2) (c2 :: p))
(Permutation (heap_delete_max gv2) (c1 :: p)), (Permutation (heap_delete_max gv2) (a2 :: p)), (Permutation (heap_delete_max gv2) (a1 :: p)), (Permutation (heap_delete_max gv2) (gv2 :: p)), (Permutation (heap_delete_max gv2) (merge p p)), (Permutation (heap_delete_max gv2) (heap_delete_max c2)), (Permutation (heap_delete_max gv2) (heap_delete_max c1)), (Permutation (heap_delete_max gv2) (heap_delete_max a2)), (Permutation (heap_delete_max gv2) (heap_delete_max a1)), (Permutation (heap_delete_max gv2) (join p p c2))
(Permutation (heap_delete_max gv2) (join p p c1)), (Permutation (heap_delete_max gv2) (join p p a2)), (Permutation (heap_delete_max gv2) (join p p a1)), (Permutation (heap_delete_max gv2) (join p p gv2)), (Permutation (heap_delete_max gv2) (insert n1 p)), (Permutation (heap_delete_max gv2) (insert n0 p)), (Permutation (heap_delete_max gv2) (insert n p)), (Permutation (heap_delete_max gv2) (carry p c2)), (Permutation (heap_delete_max gv2) (carry p c1)), (Permutation (heap_delete_max gv2) (carry p a2))
(Permutation (heap_delete_max gv2) (carry p a1)), (Permutation (heap_delete_max gv2) (carry p gv2)), (Permutation (heap_delete_max gv2) (p ++ p)), (Permutation (heap_delete_max gv2) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p)), (Permutation (join p p c2) (gv2 :: p))
(Permutation (join p p c2) (merge p p)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (heap_delete_max a2)), (Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max gv2)), (Permutation (join p p c2) (join p p c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p gv2))
(Permutation (join p p c2) (insert n1 p)), (Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p gv2)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) [])
(Permutation (join p p c1) p), (Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (a2 :: p)), (Permutation (join p p c1) (a1 :: p)), (Permutation (join p p c1) (gv2 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1)), (Permutation (join p p c1) (heap_delete_max a2))
(Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max gv2)), (Permutation (join p p c1) (join p p c2)), (Permutation (join p p c1) (join p p a2)), (Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p gv2)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (carry p c2))
(Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p gv2)), (Permutation (join p p c1) (p ++ p)), (Permutation (join p p c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p)), (Permutation (join p p a2) (a2 :: p))
(Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (gv2 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max gv2)), (Permutation (join p p a2) (join p p c2)), (Permutation (join p p a2) (join p p c1))
(Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p gv2)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p gv2))
(Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p)), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (gv2 :: p)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max c2))
(Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max gv2)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p gv2)), (Permutation (join p p a1) (insert n1 p)), (Permutation (join p p a1) (insert n0 p))
(Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p gv2)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p gv2) p), (Permutation (join p p gv2) (c2 :: p))
(Permutation (join p p gv2) (c1 :: p)), (Permutation (join p p gv2) (a2 :: p)), (Permutation (join p p gv2) (a1 :: p)), (Permutation (join p p gv2) (gv2 :: p)), (Permutation (join p p gv2) (merge p p)), (Permutation (join p p gv2) (heap_delete_max c2)), (Permutation (join p p gv2) (heap_delete_max c1)), (Permutation (join p p gv2) (heap_delete_max a2)), (Permutation (join p p gv2) (heap_delete_max a1)), (Permutation (join p p gv2) (heap_delete_max gv2))
(Permutation (join p p gv2) (join p p c2)), (Permutation (join p p gv2) (join p p c1)), (Permutation (join p p gv2) (join p p a2)), (Permutation (join p p gv2) (join p p a1)), (Permutation (join p p gv2) (insert n1 p)), (Permutation (join p p gv2) (insert n0 p)), (Permutation (join p p gv2) (insert n p)), (Permutation (join p p gv2) (carry p c2)), (Permutation (join p p gv2) (carry p c1)), (Permutation (join p p gv2) (carry p a2))
(Permutation (join p p gv2) (carry p a1)), (Permutation (join p p gv2) (carry p gv2)), (Permutation (join p p gv2) (p ++ p)), (Permutation (join p p gv2) []), (Permutation (insert n1 p) p), (Permutation (insert n1 p) (c2 :: p)), (Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (gv2 :: p))
(Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (heap_delete_max a2)), (Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max gv2)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1))
(Permutation (insert n1 p) (join p p gv2)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (carry p a2)), (Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p gv2)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) [])
(Permutation (insert n0 p) p), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p)), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (gv2 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max c2)), (Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (heap_delete_max a2))
(Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max gv2)), (Permutation (insert n0 p) (join p p c2)), (Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p gv2)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p c2))
(Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p gv2)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) []), (Permutation (insert n p) p), (Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p)), (Permutation (insert n p) (a2 :: p))
(Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (gv2 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max gv2)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1))
(Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p gv2)), (Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (carry p c2)), (Permutation (insert n p) (carry p c1)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p gv2))
(Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p c2) p), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (a2 :: p)), (Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (gv2 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max c2))
(Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max gv2)), (Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1)), (Permutation (carry p c2) (join p p gv2)), (Permutation (carry p c2) (insert n1 p))
(Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n p)), (Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1)), (Permutation (carry p c2) (carry p gv2)), (Permutation (carry p c2) (p ++ p)), (Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (c2 :: p))
(Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (gv2 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max c2)), (Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (heap_delete_max a2)), (Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max gv2))
(Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1)), (Permutation (carry p c1) (join p p gv2)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n p)), (Permutation (carry p c1) (carry p c2)), (Permutation (carry p c1) (carry p a2))
(Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p gv2)), (Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (gv2 :: p))
(Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max gv2)), (Permutation (carry p a2) (join p p c2)), (Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1))
(Permutation (carry p a2) (join p p gv2)), (Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p gv2)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) [])
(Permutation (carry p a1) p), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p)), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (gv2 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1)), (Permutation (carry p a1) (heap_delete_max a2))
(Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max gv2)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p gv2)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n p))
(Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p gv2)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (carry p gv2) p), (Permutation (carry p gv2) (c2 :: p)), (Permutation (carry p gv2) (c1 :: p)), (Permutation (carry p gv2) (a2 :: p))
(Permutation (carry p gv2) (a1 :: p)), (Permutation (carry p gv2) (gv2 :: p)), (Permutation (carry p gv2) (merge p p)), (Permutation (carry p gv2) (heap_delete_max c2)), (Permutation (carry p gv2) (heap_delete_max c1)), (Permutation (carry p gv2) (heap_delete_max a2)), (Permutation (carry p gv2) (heap_delete_max a1)), (Permutation (carry p gv2) (heap_delete_max gv2)), (Permutation (carry p gv2) (join p p c2)), (Permutation (carry p gv2) (join p p c1))
(Permutation (carry p gv2) (join p p a2)), (Permutation (carry p gv2) (join p p a1)), (Permutation (carry p gv2) (join p p gv2)), (Permutation (carry p gv2) (insert n1 p)), (Permutation (carry p gv2) (insert n0 p)), (Permutation (carry p gv2) (insert n p)), (Permutation (carry p gv2) (carry p c2)), (Permutation (carry p gv2) (carry p c1)), (Permutation (carry p gv2) (carry p a2)), (Permutation (carry p gv2) (carry p a1))
(Permutation (carry p gv2) (p ++ p)), (Permutation (carry p gv2) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p)), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (gv2 :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max c2))
(Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max gv2)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p gv2)), (Permutation (p ++ p) (insert n1 p))
(Permutation (p ++ p) (insert n0 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p gv2)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (c2 :: p))
(Permutation [] (c1 :: p)), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p)), (Permutation [] (gv2 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv2))
(Permutation [] (join p p c2)), (Permutation [] (join p p c1)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p gv2)), (Permutation [] (insert n1 p)), (Permutation [] (insert n0 p)), (Permutation [] (insert n p)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1))
(Permutation [] (carry p a2)), (Permutation [] (carry p a1)), (Permutation [] (carry p gv2)), (Permutation [] (p ++ p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (a2 :: p)), (In c2 (a1 :: p)), (In c2 (gv2 :: p)), (In c2 (merge p p))
(In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1)), (In c2 (heap_delete_max a2)), (In c2 (heap_delete_max a1)), (In c2 (heap_delete_max gv2)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p gv2))
(In c2 (insert n1 p)), (In c2 (insert n0 p)), (In c2 (insert n p)), (In c2 (carry p c2)), (In c2 (carry p c1)), (In c2 (carry p a2)), (In c2 (carry p a1)), (In c2 (carry p gv2)), (In c2 (p ++ p)), (In c1 (c2 :: p))
(In c1 (c1 :: p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (gv2 :: p)), (In c1 (merge p p)), (In c1 (heap_delete_max c2)), (In c1 (heap_delete_max c1)), (In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max gv2))
(In c1 (join p p c2)), (In c1 (join p p c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p gv2)), (In c1 (insert n1 p)), (In c1 (insert n0 p)), (In c1 (insert n p)), (In c1 (carry p c2)), (In c1 (carry p c1))
(In c1 (carry p a2)), (In c1 (carry p a1)), (In c1 (carry p gv2)), (In c1 (p ++ p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (a2 :: p)), (In a2 (a1 :: p)), (In a2 (gv2 :: p)), (In a2 (merge p p))
(In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv2)), (In a2 (join p p c2)), (In a2 (join p p c1)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (join p p gv2))
(In a2 (insert n1 p)), (In a2 (insert n0 p)), (In a2 (insert n p)), (In a2 (carry p c2)), (In a2 (carry p c1)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p gv2)), (In a2 (p ++ p)), (In a1 (c2 :: p))
(In a1 (c1 :: p)), (In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (gv2 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max c2)), (In a1 (heap_delete_max c1)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max gv2))
(In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (join p p gv2)), (In a1 (insert n1 p)), (In a1 (insert n0 p)), (In a1 (insert n p)), (In a1 (carry p c2)), (In a1 (carry p c1))
(In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (carry p gv2)), (In a1 (p ++ p)), (In gv2 (c2 :: p)), (In gv2 (c1 :: p)), (In gv2 (a2 :: p)), (In gv2 (a1 :: p)), (In gv2 (gv2 :: p)), (In gv2 (merge p p))
(In gv2 (heap_delete_max c2)), (In gv2 (heap_delete_max c1)), (In gv2 (heap_delete_max a2)), (In gv2 (heap_delete_max a1)), (In gv2 (heap_delete_max gv2)), (In gv2 (join p p c2)), (In gv2 (join p p c1)), (In gv2 (join p p a2)), (In gv2 (join p p a1)), (In gv2 (join p p gv2))
(In gv2 (insert n1 p)), (In gv2 (insert n0 p)), (In gv2 (insert n p)), (In gv2 (carry p c2)), (In gv2 (carry p c1)), (In gv2 (carry p a2)), (In gv2 (carry p a1)), (In gv2 (carry p gv2)), (In gv2 (p ++ p)), (In (Node n1 c2 c2) p)
(In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p)), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p)), (In (Node n1 c2 c2) (gv2 :: p)), (In (Node n1 c2 c2) (merge p p)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1))
(In (Node n1 c2 c2) (heap_delete_max gv2)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (join p p a2)), (In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p gv2)), (In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert n0 p)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (carry p c2))
(In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p gv2)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p))
(In (Node n1 c2 c1) (gv2 :: p)), (In (Node n1 c2 c1) (merge p p)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max gv2)), (In (Node n1 c2 c1) (join p p c2)), (In (Node n1 c2 c1) (join p p c1)), (In (Node n1 c2 c1) (join p p a2))
(In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p gv2)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p gv2))
(In (Node n1 c2 c1) (p ++ p)), (In (Node n1 c2 a2) p), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (a2 :: p)), (In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (gv2 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max c2)), (In (Node n1 c2 a2) (heap_delete_max c1))
(In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max gv2)), (In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1)), (In (Node n1 c2 a2) (join p p gv2)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert n0 p))
(In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1)), (In (Node n1 c2 a2) (carry p a2)), (In (Node n1 c2 a2) (carry p a1)), (In (Node n1 c2 a2) (carry p gv2)), (In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (c2 :: p)), (In (Node n1 c2 a1) (c1 :: p))
(In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (gv2 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max c2)), (In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (heap_delete_max a2)), (In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max gv2)), (In (Node n1 c2 a1) (join p p c2))
(In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p gv2)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n p)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1)), (In (Node n1 c2 a1) (carry p a2))
(In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p gv2)), (In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 gv2) p), (In (Node n1 c2 gv2) (c2 :: p)), (In (Node n1 c2 gv2) (c1 :: p)), (In (Node n1 c2 gv2) (a2 :: p)), (In (Node n1 c2 gv2) (a1 :: p)), (In (Node n1 c2 gv2) (gv2 :: p)), (In (Node n1 c2 gv2) (merge p p))
(In (Node n1 c2 gv2) (heap_delete_max c2)), (In (Node n1 c2 gv2) (heap_delete_max c1)), (In (Node n1 c2 gv2) (heap_delete_max a2)), (In (Node n1 c2 gv2) (heap_delete_max a1)), (In (Node n1 c2 gv2) (heap_delete_max gv2)), (In (Node n1 c2 gv2) (join p p c2)), (In (Node n1 c2 gv2) (join p p c1)), (In (Node n1 c2 gv2) (join p p a2)), (In (Node n1 c2 gv2) (join p p a1)), (In (Node n1 c2 gv2) (join p p gv2))
(In (Node n1 c2 gv2) (insert n1 p)), (In (Node n1 c2 gv2) (insert n0 p)), (In (Node n1 c2 gv2) (insert n p)), (In (Node n1 c2 gv2) (carry p c2)), (In (Node n1 c2 gv2) (carry p c1)), (In (Node n1 c2 gv2) (carry p a2)), (In (Node n1 c2 gv2) (carry p a1)), (In (Node n1 c2 gv2) (carry p gv2)), (In (Node n1 c2 gv2) (p ++ p)), (In (Node n1 c1 c2) p)
(In (Node n1 c1 c2) (c2 :: p)), (In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p)), (In (Node n1 c1 c2) (gv2 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (heap_delete_max a2)), (In (Node n1 c1 c2) (heap_delete_max a1))
(In (Node n1 c1 c2) (heap_delete_max gv2)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1)), (In (Node n1 c1 c2) (join p p a2)), (In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p gv2)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n p)), (In (Node n1 c1 c2) (carry p c2))
(In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p gv2)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p)), (In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p))
(In (Node n1 c1 c1) (gv2 :: p)), (In (Node n1 c1 c1) (merge p p)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max gv2)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1)), (In (Node n1 c1 c1) (join p p a2))
(In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p gv2)), (In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert n0 p)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (carry p c2)), (In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p gv2))
(In (Node n1 c1 c1) (p ++ p)), (In (Node n1 c1 a2) p), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (gv2 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max c2)), (In (Node n1 c1 a2) (heap_delete_max c1))
(In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max gv2)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (join p p a2)), (In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p gv2)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert n0 p))
(In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1)), (In (Node n1 c1 a2) (carry p a2)), (In (Node n1 c1 a2) (carry p a1)), (In (Node n1 c1 a2) (carry p gv2)), (In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (c2 :: p)), (In (Node n1 c1 a1) (c1 :: p))
(In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (gv2 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max c2)), (In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (heap_delete_max a2)), (In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max gv2)), (In (Node n1 c1 a1) (join p p c2))
(In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p gv2)), (In (Node n1 c1 a1) (insert n1 p)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1)), (In (Node n1 c1 a1) (carry p a2))
(In (Node n1 c1 a1) (carry p a1)), (In (Node n1 c1 a1) (carry p gv2)), (In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 gv2) p), (In (Node n1 c1 gv2) (c2 :: p)), (In (Node n1 c1 gv2) (c1 :: p)), (In (Node n1 c1 gv2) (a2 :: p)), (In (Node n1 c1 gv2) (a1 :: p)), (In (Node n1 c1 gv2) (gv2 :: p)), (In (Node n1 c1 gv2) (merge p p))
(In (Node n1 c1 gv2) (heap_delete_max c2)), (In (Node n1 c1 gv2) (heap_delete_max c1)), (In (Node n1 c1 gv2) (heap_delete_max a2)), (In (Node n1 c1 gv2) (heap_delete_max a1)), (In (Node n1 c1 gv2) (heap_delete_max gv2)), (In (Node n1 c1 gv2) (join p p c2)), (In (Node n1 c1 gv2) (join p p c1)), (In (Node n1 c1 gv2) (join p p a2)), (In (Node n1 c1 gv2) (join p p a1)), (In (Node n1 c1 gv2) (join p p gv2))
(In (Node n1 c1 gv2) (insert n1 p)), (In (Node n1 c1 gv2) (insert n0 p)), (In (Node n1 c1 gv2) (insert n p)), (In (Node n1 c1 gv2) (carry p c2)), (In (Node n1 c1 gv2) (carry p c1)), (In (Node n1 c1 gv2) (carry p a2)), (In (Node n1 c1 gv2) (carry p a1)), (In (Node n1 c1 gv2) (carry p gv2)), (In (Node n1 c1 gv2) (p ++ p)), (In (Node n1 a2 c2) p)
(In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p)), (In (Node n1 a2 c2) (gv2 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1))
(In (Node n1 a2 c2) (heap_delete_max gv2)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (join p p a2)), (In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p gv2)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (carry p c2))
(In (Node n1 a2 c2) (carry p c1)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1)), (In (Node n1 a2 c2) (carry p gv2)), (In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p))
(In (Node n1 a2 c1) (gv2 :: p)), (In (Node n1 a2 c1) (merge p p)), (In (Node n1 a2 c1) (heap_delete_max c2)), (In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (heap_delete_max a2)), (In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max gv2)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1)), (In (Node n1 a2 c1) (join p p a2))
(In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p gv2)), (In (Node n1 a2 c1) (insert n1 p)), (In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1)), (In (Node n1 a2 c1) (carry p gv2))
(In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a2 a2) p), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p)), (In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (gv2 :: p)), (In (Node n1 a2 a2) (merge p p)), (In (Node n1 a2 a2) (heap_delete_max c2)), (In (Node n1 a2 a2) (heap_delete_max c1))
(In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max gv2)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p gv2)), (In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert n0 p))
(In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (carry p a2)), (In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p gv2)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (c2 :: p)), (In (Node n1 a2 a1) (c1 :: p))
(In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p)), (In (Node n1 a2 a1) (gv2 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max gv2)), (In (Node n1 a2 a1) (join p p c2))
(In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p gv2)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1)), (In (Node n1 a2 a1) (carry p a2))
(In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p gv2)), (In (Node n1 a2 a1) (p ++ p)), (In (Node n1 a2 gv2) p), (In (Node n1 a2 gv2) (c2 :: p)), (In (Node n1 a2 gv2) (c1 :: p)), (In (Node n1 a2 gv2) (a2 :: p)), (In (Node n1 a2 gv2) (a1 :: p)), (In (Node n1 a2 gv2) (gv2 :: p)), (In (Node n1 a2 gv2) (merge p p))
(In (Node n1 a2 gv2) (heap_delete_max c2)), (In (Node n1 a2 gv2) (heap_delete_max c1)), (In (Node n1 a2 gv2) (heap_delete_max a2)), (In (Node n1 a2 gv2) (heap_delete_max a1)), (In (Node n1 a2 gv2) (heap_delete_max gv2)), (In (Node n1 a2 gv2) (join p p c2)), (In (Node n1 a2 gv2) (join p p c1)), (In (Node n1 a2 gv2) (join p p a2)), (In (Node n1 a2 gv2) (join p p a1)), (In (Node n1 a2 gv2) (join p p gv2))
(In (Node n1 a2 gv2) (insert n1 p)), (In (Node n1 a2 gv2) (insert n0 p)), (In (Node n1 a2 gv2) (insert n p)), (In (Node n1 a2 gv2) (carry p c2)), (In (Node n1 a2 gv2) (carry p c1)), (In (Node n1 a2 gv2) (carry p a2)), (In (Node n1 a2 gv2) (carry p a1)), (In (Node n1 a2 gv2) (carry p gv2)), (In (Node n1 a2 gv2) (p ++ p)), (In (Node n1 a1 c2) p)
(In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p)), (In (Node n1 a1 c2) (gv2 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1))
(In (Node n1 a1 c2) (heap_delete_max gv2)), (In (Node n1 a1 c2) (join p p c2)), (In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (join p p a2)), (In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p gv2)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (carry p c2))
(In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p gv2)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p)), (In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p))
(In (Node n1 a1 c1) (gv2 :: p)), (In (Node n1 a1 c1) (merge p p)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max gv2)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1)), (In (Node n1 a1 c1) (join p p a2))
(In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p gv2)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n p)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p gv2))
(In (Node n1 a1 c1) (p ++ p)), (In (Node n1 a1 a2) p), (In (Node n1 a1 a2) (c2 :: p)), (In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (gv2 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max c2)), (In (Node n1 a1 a2) (heap_delete_max c1))
(In (Node n1 a1 a2) (heap_delete_max a2)), (In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max gv2)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p gv2)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert n0 p))
(In (Node n1 a1 a2) (insert n p)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (carry p a2)), (In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p gv2)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p), (In (Node n1 a1 a1) (c2 :: p)), (In (Node n1 a1 a1) (c1 :: p))
(In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (gv2 :: p)), (In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max gv2)), (In (Node n1 a1 a1) (join p p c2))
(In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (join p p a2)), (In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p gv2)), (In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert n0 p)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (carry p c2)), (In (Node n1 a1 a1) (carry p c1)), (In (Node n1 a1 a1) (carry p a2))
(In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p gv2)), (In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 gv2) p), (In (Node n1 a1 gv2) (c2 :: p)), (In (Node n1 a1 gv2) (c1 :: p)), (In (Node n1 a1 gv2) (a2 :: p)), (In (Node n1 a1 gv2) (a1 :: p)), (In (Node n1 a1 gv2) (gv2 :: p)), (In (Node n1 a1 gv2) (merge p p))
(In (Node n1 a1 gv2) (heap_delete_max c2)), (In (Node n1 a1 gv2) (heap_delete_max c1)), (In (Node n1 a1 gv2) (heap_delete_max a2)), (In (Node n1 a1 gv2) (heap_delete_max a1)), (In (Node n1 a1 gv2) (heap_delete_max gv2)), (In (Node n1 a1 gv2) (join p p c2)), (In (Node n1 a1 gv2) (join p p c1)), (In (Node n1 a1 gv2) (join p p a2)), (In (Node n1 a1 gv2) (join p p a1)), (In (Node n1 a1 gv2) (join p p gv2))
(In (Node n1 a1 gv2) (insert n1 p)), (In (Node n1 a1 gv2) (insert n0 p)), (In (Node n1 a1 gv2) (insert n p)), (In (Node n1 a1 gv2) (carry p c2)), (In (Node n1 a1 gv2) (carry p c1)), (In (Node n1 a1 gv2) (carry p a2)), (In (Node n1 a1 gv2) (carry p a1)), (In (Node n1 a1 gv2) (carry p gv2)), (In (Node n1 a1 gv2) (p ++ p)), (In (Node n1 gv2 c2) p)
(In (Node n1 gv2 c2) (c2 :: p)), (In (Node n1 gv2 c2) (c1 :: p)), (In (Node n1 gv2 c2) (a2 :: p)), (In (Node n1 gv2 c2) (a1 :: p)), (In (Node n1 gv2 c2) (gv2 :: p)), (In (Node n1 gv2 c2) (merge p p)), (In (Node n1 gv2 c2) (heap_delete_max c2)), (In (Node n1 gv2 c2) (heap_delete_max c1)), (In (Node n1 gv2 c2) (heap_delete_max a2)), (In (Node n1 gv2 c2) (heap_delete_max a1))
(In (Node n1 gv2 c2) (heap_delete_max gv2)), (In (Node n1 gv2 c2) (join p p c2)), (In (Node n1 gv2 c2) (join p p c1)), (In (Node n1 gv2 c2) (join p p a2)), (In (Node n1 gv2 c2) (join p p a1)), (In (Node n1 gv2 c2) (join p p gv2)), (In (Node n1 gv2 c2) (insert n1 p)), (In (Node n1 gv2 c2) (insert n0 p)), (In (Node n1 gv2 c2) (insert n p)), (In (Node n1 gv2 c2) (carry p c2))
(In (Node n1 gv2 c2) (carry p c1)), (In (Node n1 gv2 c2) (carry p a2)), (In (Node n1 gv2 c2) (carry p a1)), (In (Node n1 gv2 c2) (carry p gv2)), (In (Node n1 gv2 c2) (p ++ p)), (In (Node n1 gv2 c1) p), (In (Node n1 gv2 c1) (c2 :: p)), (In (Node n1 gv2 c1) (c1 :: p)), (In (Node n1 gv2 c1) (a2 :: p)), (In (Node n1 gv2 c1) (a1 :: p))
(In (Node n1 gv2 c1) (gv2 :: p)), (In (Node n1 gv2 c1) (merge p p)), (In (Node n1 gv2 c1) (heap_delete_max c2)), (In (Node n1 gv2 c1) (heap_delete_max c1)), (In (Node n1 gv2 c1) (heap_delete_max a2)), (In (Node n1 gv2 c1) (heap_delete_max a1)), (In (Node n1 gv2 c1) (heap_delete_max gv2)), (In (Node n1 gv2 c1) (join p p c2)), (In (Node n1 gv2 c1) (join p p c1)), (In (Node n1 gv2 c1) (join p p a2))
(In (Node n1 gv2 c1) (join p p a1)), (In (Node n1 gv2 c1) (join p p gv2)), (In (Node n1 gv2 c1) (insert n1 p)), (In (Node n1 gv2 c1) (insert n0 p)), (In (Node n1 gv2 c1) (insert n p)), (In (Node n1 gv2 c1) (carry p c2)), (In (Node n1 gv2 c1) (carry p c1)), (In (Node n1 gv2 c1) (carry p a2)), (In (Node n1 gv2 c1) (carry p a1)), (In (Node n1 gv2 c1) (carry p gv2))
(In (Node n1 gv2 c1) (p ++ p)), (In (Node n1 gv2 a2) p), (In (Node n1 gv2 a2) (c2 :: p)), (In (Node n1 gv2 a2) (c1 :: p)), (In (Node n1 gv2 a2) (a2 :: p)), (In (Node n1 gv2 a2) (a1 :: p)), (In (Node n1 gv2 a2) (gv2 :: p)), (In (Node n1 gv2 a2) (merge p p)), (In (Node n1 gv2 a2) (heap_delete_max c2)), (In (Node n1 gv2 a2) (heap_delete_max c1))
(In (Node n1 gv2 a2) (heap_delete_max a2)), (In (Node n1 gv2 a2) (heap_delete_max a1)), (In (Node n1 gv2 a2) (heap_delete_max gv2)), (In (Node n1 gv2 a2) (join p p c2)), (In (Node n1 gv2 a2) (join p p c1)), (In (Node n1 gv2 a2) (join p p a2)), (In (Node n1 gv2 a2) (join p p a1)), (In (Node n1 gv2 a2) (join p p gv2)), (In (Node n1 gv2 a2) (insert n1 p)), (In (Node n1 gv2 a2) (insert n0 p))
(In (Node n1 gv2 a2) (insert n p)), (In (Node n1 gv2 a2) (carry p c2)), (In (Node n1 gv2 a2) (carry p c1)), (In (Node n1 gv2 a2) (carry p a2)), (In (Node n1 gv2 a2) (carry p a1)), (In (Node n1 gv2 a2) (carry p gv2)), (In (Node n1 gv2 a2) (p ++ p)), (In (Node n1 gv2 a1) p), (In (Node n1 gv2 a1) (c2 :: p)), (In (Node n1 gv2 a1) (c1 :: p))
(In (Node n1 gv2 a1) (a2 :: p)), (In (Node n1 gv2 a1) (a1 :: p)), (In (Node n1 gv2 a1) (gv2 :: p)), (In (Node n1 gv2 a1) (merge p p)), (In (Node n1 gv2 a1) (heap_delete_max c2)), (In (Node n1 gv2 a1) (heap_delete_max c1)), (In (Node n1 gv2 a1) (heap_delete_max a2)), (In (Node n1 gv2 a1) (heap_delete_max a1)), (In (Node n1 gv2 a1) (heap_delete_max gv2)), (In (Node n1 gv2 a1) (join p p c2))
(In (Node n1 gv2 a1) (join p p c1)), (In (Node n1 gv2 a1) (join p p a2)), (In (Node n1 gv2 a1) (join p p a1)), (In (Node n1 gv2 a1) (join p p gv2)), (In (Node n1 gv2 a1) (insert n1 p)), (In (Node n1 gv2 a1) (insert n0 p)), (In (Node n1 gv2 a1) (insert n p)), (In (Node n1 gv2 a1) (carry p c2)), (In (Node n1 gv2 a1) (carry p c1)), (In (Node n1 gv2 a1) (carry p a2))
(In (Node n1 gv2 a1) (carry p a1)), (In (Node n1 gv2 a1) (carry p gv2)), (In (Node n1 gv2 a1) (p ++ p)), (In (Node n1 gv2 gv2) p), (In (Node n1 gv2 gv2) (c2 :: p)), (In (Node n1 gv2 gv2) (c1 :: p)), (In (Node n1 gv2 gv2) (a2 :: p)), (In (Node n1 gv2 gv2) (a1 :: p)), (In (Node n1 gv2 gv2) (gv2 :: p)), (In (Node n1 gv2 gv2) (merge p p))
(In (Node n1 gv2 gv2) (heap_delete_max c2)), (In (Node n1 gv2 gv2) (heap_delete_max c1)), (In (Node n1 gv2 gv2) (heap_delete_max a2)), (In (Node n1 gv2 gv2) (heap_delete_max a1)), (In (Node n1 gv2 gv2) (heap_delete_max gv2)), (In (Node n1 gv2 gv2) (join p p c2)), (In (Node n1 gv2 gv2) (join p p c1)), (In (Node n1 gv2 gv2) (join p p a2)), (In (Node n1 gv2 gv2) (join p p a1)), (In (Node n1 gv2 gv2) (join p p gv2))
(In (Node n1 gv2 gv2) (insert n1 p)), (In (Node n1 gv2 gv2) (insert n0 p)), (In (Node n1 gv2 gv2) (insert n p)), (In (Node n1 gv2 gv2) (carry p c2)), (In (Node n1 gv2 gv2) (carry p c1)), (In (Node n1 gv2 gv2) (carry p a2)), (In (Node n1 gv2 gv2) (carry p a1)), (In (Node n1 gv2 gv2) (carry p gv2)), (In (Node n1 gv2 gv2) (p ++ p)), (In (Node n0 c2 c2) p)
(In (Node n0 c2 c2) (c2 :: p)), (In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p)), (In (Node n0 c2 c2) (gv2 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (heap_delete_max a2)), (In (Node n0 c2 c2) (heap_delete_max a1))
(In (Node n0 c2 c2) (heap_delete_max gv2)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1)), (In (Node n0 c2 c2) (join p p a2)), (In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p gv2)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n p)), (In (Node n0 c2 c2) (carry p c2))
(In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p gv2)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p)), (In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p))
(In (Node n0 c2 c1) (gv2 :: p)), (In (Node n0 c2 c1) (merge p p)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max gv2)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1)), (In (Node n0 c2 c1) (join p p a2))
(In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p gv2)), (In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert n0 p)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (carry p c2)), (In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p gv2))
(In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c2 a2) p), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (gv2 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max c2)), (In (Node n0 c2 a2) (heap_delete_max c1))
(In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max gv2)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (join p p a2)), (In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p gv2)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert n0 p))
(In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1)), (In (Node n0 c2 a2) (carry p a2)), (In (Node n0 c2 a2) (carry p a1)), (In (Node n0 c2 a2) (carry p gv2)), (In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (c2 :: p)), (In (Node n0 c2 a1) (c1 :: p))
(In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (gv2 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max c2)), (In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (heap_delete_max a2)), (In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max gv2)), (In (Node n0 c2 a1) (join p p c2))
(In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p gv2)), (In (Node n0 c2 a1) (insert n1 p)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1)), (In (Node n0 c2 a1) (carry p a2))
(In (Node n0 c2 a1) (carry p a1)), (In (Node n0 c2 a1) (carry p gv2)), (In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 gv2) p), (In (Node n0 c2 gv2) (c2 :: p)), (In (Node n0 c2 gv2) (c1 :: p)), (In (Node n0 c2 gv2) (a2 :: p)), (In (Node n0 c2 gv2) (a1 :: p)), (In (Node n0 c2 gv2) (gv2 :: p)), (In (Node n0 c2 gv2) (merge p p))
(In (Node n0 c2 gv2) (heap_delete_max c2)), (In (Node n0 c2 gv2) (heap_delete_max c1)), (In (Node n0 c2 gv2) (heap_delete_max a2)), (In (Node n0 c2 gv2) (heap_delete_max a1)), (In (Node n0 c2 gv2) (heap_delete_max gv2)), (In (Node n0 c2 gv2) (join p p c2)), (In (Node n0 c2 gv2) (join p p c1)), (In (Node n0 c2 gv2) (join p p a2)), (In (Node n0 c2 gv2) (join p p a1)), (In (Node n0 c2 gv2) (join p p gv2))
(In (Node n0 c2 gv2) (insert n1 p)), (In (Node n0 c2 gv2) (insert n0 p)), (In (Node n0 c2 gv2) (insert n p)), (In (Node n0 c2 gv2) (carry p c2)), (In (Node n0 c2 gv2) (carry p c1)), (In (Node n0 c2 gv2) (carry p a2)), (In (Node n0 c2 gv2) (carry p a1)), (In (Node n0 c2 gv2) (carry p gv2)), (In (Node n0 c2 gv2) (p ++ p)), (In (Node n0 c1 c2) p)
(In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (a2 :: p)), (In (Node n0 c1 c2) (a1 :: p)), (In (Node n0 c1 c2) (gv2 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max c2)), (In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1))
(In (Node n0 c1 c2) (heap_delete_max gv2)), (In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (join p p a2)), (In (Node n0 c1 c2) (join p p a1)), (In (Node n0 c1 c2) (join p p gv2)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (carry p c2))
(In (Node n0 c1 c2) (carry p c1)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1)), (In (Node n0 c1 c2) (carry p gv2)), (In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p))
(In (Node n0 c1 c1) (gv2 :: p)), (In (Node n0 c1 c1) (merge p p)), (In (Node n0 c1 c1) (heap_delete_max c2)), (In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (heap_delete_max a2)), (In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max gv2)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1)), (In (Node n0 c1 c1) (join p p a2))
(In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p gv2)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n p)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (carry p a2)), (In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p gv2))
(In (Node n0 c1 c1) (p ++ p)), (In (Node n0 c1 a2) p), (In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p)), (In (Node n0 c1 a2) (gv2 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max c2)), (In (Node n0 c1 a2) (heap_delete_max c1))
(In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1)), (In (Node n0 c1 a2) (heap_delete_max gv2)), (In (Node n0 c1 a2) (join p p c2)), (In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p gv2)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert n0 p))
(In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (carry p a2)), (In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p gv2)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p), (In (Node n0 c1 a1) (c2 :: p)), (In (Node n0 c1 a1) (c1 :: p))
(In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (gv2 :: p)), (In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max gv2)), (In (Node n0 c1 a1) (join p p c2))
(In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (join p p a2)), (In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p gv2)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n p)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1)), (In (Node n0 c1 a1) (carry p a2))
(In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p gv2)), (In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 gv2) p), (In (Node n0 c1 gv2) (c2 :: p)), (In (Node n0 c1 gv2) (c1 :: p)), (In (Node n0 c1 gv2) (a2 :: p)), (In (Node n0 c1 gv2) (a1 :: p)), (In (Node n0 c1 gv2) (gv2 :: p)), (In (Node n0 c1 gv2) (merge p p))
(In (Node n0 c1 gv2) (heap_delete_max c2)), (In (Node n0 c1 gv2) (heap_delete_max c1)), (In (Node n0 c1 gv2) (heap_delete_max a2)), (In (Node n0 c1 gv2) (heap_delete_max a1)), (In (Node n0 c1 gv2) (heap_delete_max gv2)), (In (Node n0 c1 gv2) (join p p c2)), (In (Node n0 c1 gv2) (join p p c1)), (In (Node n0 c1 gv2) (join p p a2)), (In (Node n0 c1 gv2) (join p p a1)), (In (Node n0 c1 gv2) (join p p gv2))
(In (Node n0 c1 gv2) (insert n1 p)), (In (Node n0 c1 gv2) (insert n0 p)), (In (Node n0 c1 gv2) (insert n p)), (In (Node n0 c1 gv2) (carry p c2)), (In (Node n0 c1 gv2) (carry p c1)), (In (Node n0 c1 gv2) (carry p a2)), (In (Node n0 c1 gv2) (carry p a1)), (In (Node n0 c1 gv2) (carry p gv2)), (In (Node n0 c1 gv2) (p ++ p)), (In (Node n0 a2 c2) p)
(In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p)), (In (Node n0 a2 c2) (gv2 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1))
(In (Node n0 a2 c2) (heap_delete_max gv2)), (In (Node n0 a2 c2) (join p p c2)), (In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (join p p a2)), (In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p gv2)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (carry p c2))
(In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p gv2)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p)), (In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p))
(In (Node n0 a2 c1) (gv2 :: p)), (In (Node n0 a2 c1) (merge p p)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max gv2)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1)), (In (Node n0 a2 c1) (join p p a2))
(In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p gv2)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n p)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p gv2))
(In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (c2 :: p)), (In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (gv2 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max c2)), (In (Node n0 a2 a2) (heap_delete_max c1))
(In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max gv2)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p gv2)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert n0 p))
(In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p gv2)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (c2 :: p)), (In (Node n0 a2 a1) (c1 :: p))
(In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (gv2 :: p)), (In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max gv2)), (In (Node n0 a2 a1) (join p p c2))
(In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p gv2)), (In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p c2)), (In (Node n0 a2 a1) (carry p c1)), (In (Node n0 a2 a1) (carry p a2))
(In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p gv2)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 gv2) p), (In (Node n0 a2 gv2) (c2 :: p)), (In (Node n0 a2 gv2) (c1 :: p)), (In (Node n0 a2 gv2) (a2 :: p)), (In (Node n0 a2 gv2) (a1 :: p)), (In (Node n0 a2 gv2) (gv2 :: p)), (In (Node n0 a2 gv2) (merge p p))
(In (Node n0 a2 gv2) (heap_delete_max c2)), (In (Node n0 a2 gv2) (heap_delete_max c1)), (In (Node n0 a2 gv2) (heap_delete_max a2)), (In (Node n0 a2 gv2) (heap_delete_max a1)), (In (Node n0 a2 gv2) (heap_delete_max gv2)), (In (Node n0 a2 gv2) (join p p c2)), (In (Node n0 a2 gv2) (join p p c1)), (In (Node n0 a2 gv2) (join p p a2)), (In (Node n0 a2 gv2) (join p p a1)), (In (Node n0 a2 gv2) (join p p gv2))
(In (Node n0 a2 gv2) (insert n1 p)), (In (Node n0 a2 gv2) (insert n0 p)), (In (Node n0 a2 gv2) (insert n p)), (In (Node n0 a2 gv2) (carry p c2)), (In (Node n0 a2 gv2) (carry p c1)), (In (Node n0 a2 gv2) (carry p a2)), (In (Node n0 a2 gv2) (carry p a1)), (In (Node n0 a2 gv2) (carry p gv2)), (In (Node n0 a2 gv2) (p ++ p)), (In (Node n0 a1 c2) p)
(In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p)), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p)), (In (Node n0 a1 c2) (gv2 :: p)), (In (Node n0 a1 c2) (merge p p)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1))
(In (Node n0 a1 c2) (heap_delete_max gv2)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (join p p a2)), (In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p gv2)), (In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert n0 p)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (carry p c2))
(In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p gv2)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p))
(In (Node n0 a1 c1) (gv2 :: p)), (In (Node n0 a1 c1) (merge p p)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max gv2)), (In (Node n0 a1 c1) (join p p c2)), (In (Node n0 a1 c1) (join p p c1)), (In (Node n0 a1 c1) (join p p a2))
(In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p gv2)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p gv2))
(In (Node n0 a1 c1) (p ++ p)), (In (Node n0 a1 a2) p), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (gv2 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max c2)), (In (Node n0 a1 a2) (heap_delete_max c1))
(In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max gv2)), (In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p gv2)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert n0 p))
(In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (carry p gv2)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (c2 :: p)), (In (Node n0 a1 a1) (c1 :: p))
(In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (gv2 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max c2)), (In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max gv2)), (In (Node n0 a1 a1) (join p p c2))
(In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p gv2)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1)), (In (Node n0 a1 a1) (carry p a2))
(In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p gv2)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 gv2) p), (In (Node n0 a1 gv2) (c2 :: p)), (In (Node n0 a1 gv2) (c1 :: p)), (In (Node n0 a1 gv2) (a2 :: p)), (In (Node n0 a1 gv2) (a1 :: p)), (In (Node n0 a1 gv2) (gv2 :: p)), (In (Node n0 a1 gv2) (merge p p))
(In (Node n0 a1 gv2) (heap_delete_max c2)), (In (Node n0 a1 gv2) (heap_delete_max c1)), (In (Node n0 a1 gv2) (heap_delete_max a2)), (In (Node n0 a1 gv2) (heap_delete_max a1)), (In (Node n0 a1 gv2) (heap_delete_max gv2)), (In (Node n0 a1 gv2) (join p p c2)), (In (Node n0 a1 gv2) (join p p c1)), (In (Node n0 a1 gv2) (join p p a2)), (In (Node n0 a1 gv2) (join p p a1)), (In (Node n0 a1 gv2) (join p p gv2))
(In (Node n0 a1 gv2) (insert n1 p)), (In (Node n0 a1 gv2) (insert n0 p)), (In (Node n0 a1 gv2) (insert n p)), (In (Node n0 a1 gv2) (carry p c2)), (In (Node n0 a1 gv2) (carry p c1)), (In (Node n0 a1 gv2) (carry p a2)), (In (Node n0 a1 gv2) (carry p a1)), (In (Node n0 a1 gv2) (carry p gv2)), (In (Node n0 a1 gv2) (p ++ p)), (In (Node n0 gv2 c2) p)
(In (Node n0 gv2 c2) (c2 :: p)), (In (Node n0 gv2 c2) (c1 :: p)), (In (Node n0 gv2 c2) (a2 :: p)), (In (Node n0 gv2 c2) (a1 :: p)), (In (Node n0 gv2 c2) (gv2 :: p)), (In (Node n0 gv2 c2) (merge p p)), (In (Node n0 gv2 c2) (heap_delete_max c2)), (In (Node n0 gv2 c2) (heap_delete_max c1)), (In (Node n0 gv2 c2) (heap_delete_max a2)), (In (Node n0 gv2 c2) (heap_delete_max a1))
(In (Node n0 gv2 c2) (heap_delete_max gv2)), (In (Node n0 gv2 c2) (join p p c2)), (In (Node n0 gv2 c2) (join p p c1)), (In (Node n0 gv2 c2) (join p p a2)), (In (Node n0 gv2 c2) (join p p a1)), (In (Node n0 gv2 c2) (join p p gv2)), (In (Node n0 gv2 c2) (insert n1 p)), (In (Node n0 gv2 c2) (insert n0 p)), (In (Node n0 gv2 c2) (insert n p)), (In (Node n0 gv2 c2) (carry p c2))
(In (Node n0 gv2 c2) (carry p c1)), (In (Node n0 gv2 c2) (carry p a2)), (In (Node n0 gv2 c2) (carry p a1)), (In (Node n0 gv2 c2) (carry p gv2)), (In (Node n0 gv2 c2) (p ++ p)), (In (Node n0 gv2 c1) p), (In (Node n0 gv2 c1) (c2 :: p)), (In (Node n0 gv2 c1) (c1 :: p)), (In (Node n0 gv2 c1) (a2 :: p)), (In (Node n0 gv2 c1) (a1 :: p))
(In (Node n0 gv2 c1) (gv2 :: p)), (In (Node n0 gv2 c1) (merge p p)), (In (Node n0 gv2 c1) (heap_delete_max c2)), (In (Node n0 gv2 c1) (heap_delete_max c1)), (In (Node n0 gv2 c1) (heap_delete_max a2)), (In (Node n0 gv2 c1) (heap_delete_max a1)), (In (Node n0 gv2 c1) (heap_delete_max gv2)), (In (Node n0 gv2 c1) (join p p c2)), (In (Node n0 gv2 c1) (join p p c1)), (In (Node n0 gv2 c1) (join p p a2))
(In (Node n0 gv2 c1) (join p p a1)), (In (Node n0 gv2 c1) (join p p gv2)), (In (Node n0 gv2 c1) (insert n1 p)), (In (Node n0 gv2 c1) (insert n0 p)), (In (Node n0 gv2 c1) (insert n p)), (In (Node n0 gv2 c1) (carry p c2)), (In (Node n0 gv2 c1) (carry p c1)), (In (Node n0 gv2 c1) (carry p a2)), (In (Node n0 gv2 c1) (carry p a1)), (In (Node n0 gv2 c1) (carry p gv2))
(In (Node n0 gv2 c1) (p ++ p)), (In (Node n0 gv2 a2) p), (In (Node n0 gv2 a2) (c2 :: p)), (In (Node n0 gv2 a2) (c1 :: p)), (In (Node n0 gv2 a2) (a2 :: p)), (In (Node n0 gv2 a2) (a1 :: p)), (In (Node n0 gv2 a2) (gv2 :: p)), (In (Node n0 gv2 a2) (merge p p)), (In (Node n0 gv2 a2) (heap_delete_max c2)), (In (Node n0 gv2 a2) (heap_delete_max c1))
(In (Node n0 gv2 a2) (heap_delete_max a2)), (In (Node n0 gv2 a2) (heap_delete_max a1)), (In (Node n0 gv2 a2) (heap_delete_max gv2)), (In (Node n0 gv2 a2) (join p p c2)), (In (Node n0 gv2 a2) (join p p c1)), (In (Node n0 gv2 a2) (join p p a2)), (In (Node n0 gv2 a2) (join p p a1)), (In (Node n0 gv2 a2) (join p p gv2)), (In (Node n0 gv2 a2) (insert n1 p)), (In (Node n0 gv2 a2) (insert n0 p))
(In (Node n0 gv2 a2) (insert n p)), (In (Node n0 gv2 a2) (carry p c2)), (In (Node n0 gv2 a2) (carry p c1)), (In (Node n0 gv2 a2) (carry p a2)), (In (Node n0 gv2 a2) (carry p a1)), (In (Node n0 gv2 a2) (carry p gv2)), (In (Node n0 gv2 a2) (p ++ p)), (In (Node n0 gv2 a1) p), (In (Node n0 gv2 a1) (c2 :: p)), (In (Node n0 gv2 a1) (c1 :: p))
(In (Node n0 gv2 a1) (a2 :: p)), (In (Node n0 gv2 a1) (a1 :: p)), (In (Node n0 gv2 a1) (gv2 :: p)), (In (Node n0 gv2 a1) (merge p p)), (In (Node n0 gv2 a1) (heap_delete_max c2)), (In (Node n0 gv2 a1) (heap_delete_max c1)), (In (Node n0 gv2 a1) (heap_delete_max a2)), (In (Node n0 gv2 a1) (heap_delete_max a1)), (In (Node n0 gv2 a1) (heap_delete_max gv2)), (In (Node n0 gv2 a1) (join p p c2))
(In (Node n0 gv2 a1) (join p p c1)), (In (Node n0 gv2 a1) (join p p a2)), (In (Node n0 gv2 a1) (join p p a1)), (In (Node n0 gv2 a1) (join p p gv2)), (In (Node n0 gv2 a1) (insert n1 p)), (In (Node n0 gv2 a1) (insert n0 p)), (In (Node n0 gv2 a1) (insert n p)), (In (Node n0 gv2 a1) (carry p c2)), (In (Node n0 gv2 a1) (carry p c1)), (In (Node n0 gv2 a1) (carry p a2))
(In (Node n0 gv2 a1) (carry p a1)), (In (Node n0 gv2 a1) (carry p gv2)), (In (Node n0 gv2 a1) (p ++ p)), (In (Node n0 gv2 gv2) p), (In (Node n0 gv2 gv2) (c2 :: p)), (In (Node n0 gv2 gv2) (c1 :: p)), (In (Node n0 gv2 gv2) (a2 :: p)), (In (Node n0 gv2 gv2) (a1 :: p)), (In (Node n0 gv2 gv2) (gv2 :: p)), (In (Node n0 gv2 gv2) (merge p p))
(In (Node n0 gv2 gv2) (heap_delete_max c2)), (In (Node n0 gv2 gv2) (heap_delete_max c1)), (In (Node n0 gv2 gv2) (heap_delete_max a2)), (In (Node n0 gv2 gv2) (heap_delete_max a1)), (In (Node n0 gv2 gv2) (heap_delete_max gv2)), (In (Node n0 gv2 gv2) (join p p c2)), (In (Node n0 gv2 gv2) (join p p c1)), (In (Node n0 gv2 gv2) (join p p a2)), (In (Node n0 gv2 gv2) (join p p a1)), (In (Node n0 gv2 gv2) (join p p gv2))
(In (Node n0 gv2 gv2) (insert n1 p)), (In (Node n0 gv2 gv2) (insert n0 p)), (In (Node n0 gv2 gv2) (insert n p)), (In (Node n0 gv2 gv2) (carry p c2)), (In (Node n0 gv2 gv2) (carry p c1)), (In (Node n0 gv2 gv2) (carry p a2)), (In (Node n0 gv2 gv2) (carry p a1)), (In (Node n0 gv2 gv2) (carry p gv2)), (In (Node n0 gv2 gv2) (p ++ p)), (In (Node n c2 c2) p)
(In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (a2 :: p)), (In (Node n c2 c2) (a1 :: p)), (In (Node n c2 c2) (gv2 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1))
(In (Node n c2 c2) (heap_delete_max gv2)), (In (Node n c2 c2) (join p p c2)), (In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (join p p a2)), (In (Node n c2 c2) (join p p a1)), (In (Node n c2 c2) (join p p gv2)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (carry p c2))
(In (Node n c2 c2) (carry p c1)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p gv2)), (In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p))
(In (Node n c2 c1) (gv2 :: p)), (In (Node n c2 c1) (merge p p)), (In (Node n c2 c1) (heap_delete_max c2)), (In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max gv2)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1)), (In (Node n c2 c1) (join p p a2))
(In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p gv2)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1)), (In (Node n c2 c1) (carry p a2)), (In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p gv2))
(In (Node n c2 c1) (p ++ p)), (In (Node n c2 a2) p), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (gv2 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max c2)), (In (Node n c2 a2) (heap_delete_max c1))
(In (Node n c2 a2) (heap_delete_max a2)), (In (Node n c2 a2) (heap_delete_max a1)), (In (Node n c2 a2) (heap_delete_max gv2)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p gv2)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert n0 p))
(In (Node n c2 a2) (insert n p)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (carry p a2)), (In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p gv2)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (c2 :: p)), (In (Node n c2 a1) (c1 :: p))
(In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (gv2 :: p)), (In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max gv2)), (In (Node n c2 a1) (join p p c2))
(In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p gv2)), (In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert n0 p)), (In (Node n c2 a1) (insert n p)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1)), (In (Node n c2 a1) (carry p a2))
(In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p gv2)), (In (Node n c2 a1) (p ++ p)), (In (Node n c2 gv2) p), (In (Node n c2 gv2) (c2 :: p)), (In (Node n c2 gv2) (c1 :: p)), (In (Node n c2 gv2) (a2 :: p)), (In (Node n c2 gv2) (a1 :: p)), (In (Node n c2 gv2) (gv2 :: p)), (In (Node n c2 gv2) (merge p p))
(In (Node n c2 gv2) (heap_delete_max c2)), (In (Node n c2 gv2) (heap_delete_max c1)), (In (Node n c2 gv2) (heap_delete_max a2)), (In (Node n c2 gv2) (heap_delete_max a1)), (In (Node n c2 gv2) (heap_delete_max gv2)), (In (Node n c2 gv2) (join p p c2)), (In (Node n c2 gv2) (join p p c1)), (In (Node n c2 gv2) (join p p a2)), (In (Node n c2 gv2) (join p p a1)), (In (Node n c2 gv2) (join p p gv2))
(In (Node n c2 gv2) (insert n1 p)), (In (Node n c2 gv2) (insert n0 p)), (In (Node n c2 gv2) (insert n p)), (In (Node n c2 gv2) (carry p c2)), (In (Node n c2 gv2) (carry p c1)), (In (Node n c2 gv2) (carry p a2)), (In (Node n c2 gv2) (carry p a1)), (In (Node n c2 gv2) (carry p gv2)), (In (Node n c2 gv2) (p ++ p)), (In (Node n c1 c2) p)
(In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p)), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p)), (In (Node n c1 c2) (gv2 :: p)), (In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1))
(In (Node n c1 c2) (heap_delete_max gv2)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (join p p a2)), (In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p gv2)), (In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert n0 p)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (carry p c2))
(In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1)), (In (Node n c1 c2) (carry p gv2)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p))
(In (Node n c1 c1) (gv2 :: p)), (In (Node n c1 c1) (merge p p)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (heap_delete_max a2)), (In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max gv2)), (In (Node n c1 c1) (join p p c2)), (In (Node n c1 c1) (join p p c1)), (In (Node n c1 c1) (join p p a2))
(In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p gv2)), (In (Node n c1 c1) (insert n1 p)), (In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p gv2))
(In (Node n c1 c1) (p ++ p)), (In (Node n c1 a2) p), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (gv2 :: p)), (In (Node n c1 a2) (merge p p)), (In (Node n c1 a2) (heap_delete_max c2)), (In (Node n c1 a2) (heap_delete_max c1))
(In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max gv2)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p gv2)), (In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert n0 p))
(In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (carry p a2)), (In (Node n c1 a2) (carry p a1)), (In (Node n c1 a2) (carry p gv2)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (c2 :: p)), (In (Node n c1 a1) (c1 :: p))
(In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p)), (In (Node n c1 a1) (gv2 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (heap_delete_max a2)), (In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max gv2)), (In (Node n c1 a1) (join p p c2))
(In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p gv2)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n p)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1)), (In (Node n c1 a1) (carry p a2))
(In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p gv2)), (In (Node n c1 a1) (p ++ p)), (In (Node n c1 gv2) p), (In (Node n c1 gv2) (c2 :: p)), (In (Node n c1 gv2) (c1 :: p)), (In (Node n c1 gv2) (a2 :: p)), (In (Node n c1 gv2) (a1 :: p)), (In (Node n c1 gv2) (gv2 :: p)), (In (Node n c1 gv2) (merge p p))
(In (Node n c1 gv2) (heap_delete_max c2)), (In (Node n c1 gv2) (heap_delete_max c1)), (In (Node n c1 gv2) (heap_delete_max a2)), (In (Node n c1 gv2) (heap_delete_max a1)), (In (Node n c1 gv2) (heap_delete_max gv2)), (In (Node n c1 gv2) (join p p c2)), (In (Node n c1 gv2) (join p p c1)), (In (Node n c1 gv2) (join p p a2)), (In (Node n c1 gv2) (join p p a1)), (In (Node n c1 gv2) (join p p gv2))
(In (Node n c1 gv2) (insert n1 p)), (In (Node n c1 gv2) (insert n0 p)), (In (Node n c1 gv2) (insert n p)), (In (Node n c1 gv2) (carry p c2)), (In (Node n c1 gv2) (carry p c1)), (In (Node n c1 gv2) (carry p a2)), (In (Node n c1 gv2) (carry p a1)), (In (Node n c1 gv2) (carry p gv2)), (In (Node n c1 gv2) (p ++ p)), (In (Node n a2 c2) p)
(In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p)), (In (Node n a2 c2) (gv2 :: p)), (In (Node n a2 c2) (merge p p)), (In (Node n a2 c2) (heap_delete_max c2)), (In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1))
(In (Node n a2 c2) (heap_delete_max gv2)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (join p p a2)), (In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p gv2)), (In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert n0 p)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (carry p c2))
(In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1)), (In (Node n a2 c2) (carry p gv2)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p))
(In (Node n a2 c1) (gv2 :: p)), (In (Node n a2 c1) (merge p p)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (heap_delete_max a2)), (In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max gv2)), (In (Node n a2 c1) (join p p c2)), (In (Node n a2 c1) (join p p c1)), (In (Node n a2 c1) (join p p a2))
(In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p gv2)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n p)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p gv2))
(In (Node n a2 c1) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (gv2 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max c2)), (In (Node n a2 a2) (heap_delete_max c1))
(In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv2)), (In (Node n a2 a2) (join p p c2)), (In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p gv2)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert n0 p))
(In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p gv2)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (c2 :: p)), (In (Node n a2 a1) (c1 :: p))
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (gv2 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max c2)), (In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv2)), (In (Node n a2 a1) (join p p c2))
(In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p gv2)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1)), (In (Node n a2 a1) (carry p a2))
(In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p gv2)), (In (Node n a2 a1) (p ++ p)), (In (Node n a2 gv2) p), (In (Node n a2 gv2) (c2 :: p)), (In (Node n a2 gv2) (c1 :: p)), (In (Node n a2 gv2) (a2 :: p)), (In (Node n a2 gv2) (a1 :: p)), (In (Node n a2 gv2) (gv2 :: p)), (In (Node n a2 gv2) (merge p p))
(In (Node n a2 gv2) (heap_delete_max c2)), (In (Node n a2 gv2) (heap_delete_max c1)), (In (Node n a2 gv2) (heap_delete_max a2)), (In (Node n a2 gv2) (heap_delete_max a1)), (In (Node n a2 gv2) (heap_delete_max gv2)), (In (Node n a2 gv2) (join p p c2)), (In (Node n a2 gv2) (join p p c1)), (In (Node n a2 gv2) (join p p a2)), (In (Node n a2 gv2) (join p p a1)), (In (Node n a2 gv2) (join p p gv2))
(In (Node n a2 gv2) (insert n1 p)), (In (Node n a2 gv2) (insert n0 p)), (In (Node n a2 gv2) (insert n p)), (In (Node n a2 gv2) (carry p c2)), (In (Node n a2 gv2) (carry p c1)), (In (Node n a2 gv2) (carry p a2)), (In (Node n a2 gv2) (carry p a1)), (In (Node n a2 gv2) (carry p gv2)), (In (Node n a2 gv2) (p ++ p)), (In (Node n a1 c2) p)
(In (Node n a1 c2) (c2 :: p)), (In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p)), (In (Node n a1 c2) (gv2 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1))
(In (Node n a1 c2) (heap_delete_max gv2)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1)), (In (Node n a1 c2) (join p p a2)), (In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p gv2)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (carry p c2))
(In (Node n a1 c2) (carry p c1)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p gv2)), (In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p))
(In (Node n a1 c1) (gv2 :: p)), (In (Node n a1 c1) (merge p p)), (In (Node n a1 c1) (heap_delete_max c2)), (In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max gv2)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1)), (In (Node n a1 c1) (join p p a2))
(In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p gv2)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (carry p c2)), (In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1)), (In (Node n a1 c1) (carry p gv2))
(In (Node n a1 c1) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p)), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (gv2 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max c2)), (In (Node n a1 a2) (heap_delete_max c1))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv2)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p gv2)), (In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert n0 p))
(In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p gv2)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (c2 :: p)), (In (Node n a1 a1) (c1 :: p))
(In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (gv2 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv2)), (In (Node n a1 a1) (join p p c2))
(In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p gv2)), (In (Node n a1 a1) (insert n1 p)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1)), (In (Node n a1 a1) (carry p a2))
(In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p gv2)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 gv2) p), (In (Node n a1 gv2) (c2 :: p)), (In (Node n a1 gv2) (c1 :: p)), (In (Node n a1 gv2) (a2 :: p)), (In (Node n a1 gv2) (a1 :: p)), (In (Node n a1 gv2) (gv2 :: p)), (In (Node n a1 gv2) (merge p p))
(In (Node n a1 gv2) (heap_delete_max c2)), (In (Node n a1 gv2) (heap_delete_max c1)), (In (Node n a1 gv2) (heap_delete_max a2)), (In (Node n a1 gv2) (heap_delete_max a1)), (In (Node n a1 gv2) (heap_delete_max gv2)), (In (Node n a1 gv2) (join p p c2)), (In (Node n a1 gv2) (join p p c1)), (In (Node n a1 gv2) (join p p a2)), (In (Node n a1 gv2) (join p p a1)), (In (Node n a1 gv2) (join p p gv2))
(In (Node n a1 gv2) (insert n1 p)), (In (Node n a1 gv2) (insert n0 p)), (In (Node n a1 gv2) (insert n p)), (In (Node n a1 gv2) (carry p c2)), (In (Node n a1 gv2) (carry p c1)), (In (Node n a1 gv2) (carry p a2)), (In (Node n a1 gv2) (carry p a1)), (In (Node n a1 gv2) (carry p gv2)), (In (Node n a1 gv2) (p ++ p)), (In (Node n gv2 c2) p)
(In (Node n gv2 c2) (c2 :: p)), (In (Node n gv2 c2) (c1 :: p)), (In (Node n gv2 c2) (a2 :: p)), (In (Node n gv2 c2) (a1 :: p)), (In (Node n gv2 c2) (gv2 :: p)), (In (Node n gv2 c2) (merge p p)), (In (Node n gv2 c2) (heap_delete_max c2)), (In (Node n gv2 c2) (heap_delete_max c1)), (In (Node n gv2 c2) (heap_delete_max a2)), (In (Node n gv2 c2) (heap_delete_max a1))
(In (Node n gv2 c2) (heap_delete_max gv2)), (In (Node n gv2 c2) (join p p c2)), (In (Node n gv2 c2) (join p p c1)), (In (Node n gv2 c2) (join p p a2)), (In (Node n gv2 c2) (join p p a1)), (In (Node n gv2 c2) (join p p gv2)), (In (Node n gv2 c2) (insert n1 p)), (In (Node n gv2 c2) (insert n0 p)), (In (Node n gv2 c2) (insert n p)), (In (Node n gv2 c2) (carry p c2))
(In (Node n gv2 c2) (carry p c1)), (In (Node n gv2 c2) (carry p a2)), (In (Node n gv2 c2) (carry p a1)), (In (Node n gv2 c2) (carry p gv2)), (In (Node n gv2 c2) (p ++ p)), (In (Node n gv2 c1) p), (In (Node n gv2 c1) (c2 :: p)), (In (Node n gv2 c1) (c1 :: p)), (In (Node n gv2 c1) (a2 :: p)), (In (Node n gv2 c1) (a1 :: p))
(In (Node n gv2 c1) (gv2 :: p)), (In (Node n gv2 c1) (merge p p)), (In (Node n gv2 c1) (heap_delete_max c2)), (In (Node n gv2 c1) (heap_delete_max c1)), (In (Node n gv2 c1) (heap_delete_max a2)), (In (Node n gv2 c1) (heap_delete_max a1)), (In (Node n gv2 c1) (heap_delete_max gv2)), (In (Node n gv2 c1) (join p p c2)), (In (Node n gv2 c1) (join p p c1)), (In (Node n gv2 c1) (join p p a2))
(In (Node n gv2 c1) (join p p a1)), (In (Node n gv2 c1) (join p p gv2)), (In (Node n gv2 c1) (insert n1 p)), (In (Node n gv2 c1) (insert n0 p)), (In (Node n gv2 c1) (insert n p)), (In (Node n gv2 c1) (carry p c2)), (In (Node n gv2 c1) (carry p c1)), (In (Node n gv2 c1) (carry p a2)), (In (Node n gv2 c1) (carry p a1)), (In (Node n gv2 c1) (carry p gv2))
(In (Node n gv2 c1) (p ++ p)), (In (Node n gv2 a2) p), (In (Node n gv2 a2) (c2 :: p)), (In (Node n gv2 a2) (c1 :: p)), (In (Node n gv2 a2) (a2 :: p)), (In (Node n gv2 a2) (a1 :: p)), (In (Node n gv2 a2) (gv2 :: p)), (In (Node n gv2 a2) (merge p p)), (In (Node n gv2 a2) (heap_delete_max c2)), (In (Node n gv2 a2) (heap_delete_max c1))
(In (Node n gv2 a2) (heap_delete_max a2)), (In (Node n gv2 a2) (heap_delete_max a1)), (In (Node n gv2 a2) (heap_delete_max gv2)), (In (Node n gv2 a2) (join p p c2)), (In (Node n gv2 a2) (join p p c1)), (In (Node n gv2 a2) (join p p a2)), (In (Node n gv2 a2) (join p p a1)), (In (Node n gv2 a2) (join p p gv2)), (In (Node n gv2 a2) (insert n1 p)), (In (Node n gv2 a2) (insert n0 p))
(In (Node n gv2 a2) (insert n p)), (In (Node n gv2 a2) (carry p c2)), (In (Node n gv2 a2) (carry p c1)), (In (Node n gv2 a2) (carry p a2)), (In (Node n gv2 a2) (carry p a1)), (In (Node n gv2 a2) (carry p gv2)), (In (Node n gv2 a2) (p ++ p)), (In (Node n gv2 a1) p), (In (Node n gv2 a1) (c2 :: p)), (In (Node n gv2 a1) (c1 :: p))
(In (Node n gv2 a1) (a2 :: p)), (In (Node n gv2 a1) (a1 :: p)), (In (Node n gv2 a1) (gv2 :: p)), (In (Node n gv2 a1) (merge p p)), (In (Node n gv2 a1) (heap_delete_max c2)), (In (Node n gv2 a1) (heap_delete_max c1)), (In (Node n gv2 a1) (heap_delete_max a2)), (In (Node n gv2 a1) (heap_delete_max a1)), (In (Node n gv2 a1) (heap_delete_max gv2)), (In (Node n gv2 a1) (join p p c2))
(In (Node n gv2 a1) (join p p c1)), (In (Node n gv2 a1) (join p p a2)), (In (Node n gv2 a1) (join p p a1)), (In (Node n gv2 a1) (join p p gv2)), (In (Node n gv2 a1) (insert n1 p)), (In (Node n gv2 a1) (insert n0 p)), (In (Node n gv2 a1) (insert n p)), (In (Node n gv2 a1) (carry p c2)), (In (Node n gv2 a1) (carry p c1)), (In (Node n gv2 a1) (carry p a2))
(In (Node n gv2 a1) (carry p a1)), (In (Node n gv2 a1) (carry p gv2)), (In (Node n gv2 a1) (p ++ p)), (In (Node n gv2 gv2) p), (In (Node n gv2 gv2) (c2 :: p)), (In (Node n gv2 gv2) (c1 :: p)), (In (Node n gv2 gv2) (a2 :: p)), (In (Node n gv2 gv2) (a1 :: p)), (In (Node n gv2 gv2) (gv2 :: p)), (In (Node n gv2 gv2) (merge p p))
(In (Node n gv2 gv2) (heap_delete_max c2)), (In (Node n gv2 gv2) (heap_delete_max c1)), (In (Node n gv2 gv2) (heap_delete_max a2)), (In (Node n gv2 gv2) (heap_delete_max a1)), (In (Node n gv2 gv2) (heap_delete_max gv2)), (In (Node n gv2 gv2) (join p p c2)), (In (Node n gv2 gv2) (join p p c1)), (In (Node n gv2 gv2) (join p p a2)), (In (Node n gv2 gv2) (join p p a1)), (In (Node n gv2 gv2) (join p p gv2))
(In (Node n gv2 gv2) (insert n1 p)), (In (Node n gv2 gv2) (insert n0 p)), (In (Node n gv2 gv2) (insert n p)), (In (Node n gv2 gv2) (carry p c2)), (In (Node n gv2 gv2) (carry p c1)), (In (Node n gv2 gv2) (carry p a2)), (In (Node n gv2 gv2) (carry p a1)), (In (Node n gv2 gv2) (carry p gv2)), (In (Node n gv2 gv2) (p ++ p)), (In (smash c2 c2) p)
(In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p)), (In (smash c2 c2) (gv2 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1))
(In (smash c2 c2) (heap_delete_max gv2)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (join p p a2)), (In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p gv2)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (carry p c2))
(In (smash c2 c2) (carry p c1)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1)), (In (smash c2 c2) (carry p gv2)), (In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p))
(In (smash c2 c1) (gv2 :: p)), (In (smash c2 c1) (merge p p)), (In (smash c2 c1) (heap_delete_max c2)), (In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (heap_delete_max a2)), (In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max gv2)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1)), (In (smash c2 c1) (join p p a2))
(In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p gv2)), (In (smash c2 c1) (insert n1 p)), (In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1)), (In (smash c2 c1) (carry p gv2))
(In (smash c2 c1) (p ++ p)), (In (smash c2 a2) p), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p)), (In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (gv2 :: p)), (In (smash c2 a2) (merge p p)), (In (smash c2 a2) (heap_delete_max c2)), (In (smash c2 a2) (heap_delete_max c1))
(In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max gv2)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p gv2)), (In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert n0 p))
(In (smash c2 a2) (insert n p)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (carry p a2)), (In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p gv2)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (c2 :: p)), (In (smash c2 a1) (c1 :: p))
(In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p)), (In (smash c2 a1) (gv2 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max gv2)), (In (smash c2 a1) (join p p c2))
(In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p gv2)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1)), (In (smash c2 a1) (carry p a2))
(In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p gv2)), (In (smash c2 a1) (p ++ p)), (In (smash c2 gv2) p), (In (smash c2 gv2) (c2 :: p)), (In (smash c2 gv2) (c1 :: p)), (In (smash c2 gv2) (a2 :: p)), (In (smash c2 gv2) (a1 :: p)), (In (smash c2 gv2) (gv2 :: p)), (In (smash c2 gv2) (merge p p))
(In (smash c2 gv2) (heap_delete_max c2)), (In (smash c2 gv2) (heap_delete_max c1)), (In (smash c2 gv2) (heap_delete_max a2)), (In (smash c2 gv2) (heap_delete_max a1)), (In (smash c2 gv2) (heap_delete_max gv2)), (In (smash c2 gv2) (join p p c2)), (In (smash c2 gv2) (join p p c1)), (In (smash c2 gv2) (join p p a2)), (In (smash c2 gv2) (join p p a1)), (In (smash c2 gv2) (join p p gv2))
(In (smash c2 gv2) (insert n1 p)), (In (smash c2 gv2) (insert n0 p)), (In (smash c2 gv2) (insert n p)), (In (smash c2 gv2) (carry p c2)), (In (smash c2 gv2) (carry p c1)), (In (smash c2 gv2) (carry p a2)), (In (smash c2 gv2) (carry p a1)), (In (smash c2 gv2) (carry p gv2)), (In (smash c2 gv2) (p ++ p)), (In (smash c1 c2) p)
(In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p)), (In (smash c1 c2) (gv2 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1))
(In (smash c1 c2) (heap_delete_max gv2)), (In (smash c1 c2) (join p p c2)), (In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (join p p a2)), (In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p gv2)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (carry p c2))
(In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p gv2)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p)), (In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p))
(In (smash c1 c1) (gv2 :: p)), (In (smash c1 c1) (merge p p)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max gv2)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1)), (In (smash c1 c1) (join p p a2))
(In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p gv2)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n p)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p gv2))
(In (smash c1 c1) (p ++ p)), (In (smash c1 a2) p), (In (smash c1 a2) (c2 :: p)), (In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (gv2 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max c2)), (In (smash c1 a2) (heap_delete_max c1))
(In (smash c1 a2) (heap_delete_max a2)), (In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max gv2)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p gv2)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert n0 p))
(In (smash c1 a2) (insert n p)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (carry p a2)), (In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p gv2)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p), (In (smash c1 a1) (c2 :: p)), (In (smash c1 a1) (c1 :: p))
(In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (gv2 :: p)), (In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max gv2)), (In (smash c1 a1) (join p p c2))
(In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (join p p a2)), (In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p gv2)), (In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert n0 p)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (carry p c2)), (In (smash c1 a1) (carry p c1)), (In (smash c1 a1) (carry p a2))
(In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p gv2)), (In (smash c1 a1) (p ++ p)), (In (smash c1 gv2) p), (In (smash c1 gv2) (c2 :: p)), (In (smash c1 gv2) (c1 :: p)), (In (smash c1 gv2) (a2 :: p)), (In (smash c1 gv2) (a1 :: p)), (In (smash c1 gv2) (gv2 :: p)), (In (smash c1 gv2) (merge p p))
(In (smash c1 gv2) (heap_delete_max c2)), (In (smash c1 gv2) (heap_delete_max c1)), (In (smash c1 gv2) (heap_delete_max a2)), (In (smash c1 gv2) (heap_delete_max a1)), (In (smash c1 gv2) (heap_delete_max gv2)), (In (smash c1 gv2) (join p p c2)), (In (smash c1 gv2) (join p p c1)), (In (smash c1 gv2) (join p p a2)), (In (smash c1 gv2) (join p p a1)), (In (smash c1 gv2) (join p p gv2))
(In (smash c1 gv2) (insert n1 p)), (In (smash c1 gv2) (insert n0 p)), (In (smash c1 gv2) (insert n p)), (In (smash c1 gv2) (carry p c2)), (In (smash c1 gv2) (carry p c1)), (In (smash c1 gv2) (carry p a2)), (In (smash c1 gv2) (carry p a1)), (In (smash c1 gv2) (carry p gv2)), (In (smash c1 gv2) (p ++ p)), (In (smash a2 c2) p)
(In (smash a2 c2) (c2 :: p)), (In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p)), (In (smash a2 c2) (gv2 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (heap_delete_max a2)), (In (smash a2 c2) (heap_delete_max a1))
(In (smash a2 c2) (heap_delete_max gv2)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1)), (In (smash a2 c2) (join p p a2)), (In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p gv2)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n p)), (In (smash a2 c2) (carry p c2))
(In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p gv2)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p)), (In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p))
(In (smash a2 c1) (gv2 :: p)), (In (smash a2 c1) (merge p p)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max gv2)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1)), (In (smash a2 c1) (join p p a2))
(In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p gv2)), (In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert n0 p)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (carry p c2)), (In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p gv2))
(In (smash a2 c1) (p ++ p)), (In (smash a2 a2) p), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (gv2 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max c2)), (In (smash a2 a2) (heap_delete_max c1))
(In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max gv2)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p gv2)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert n0 p))
(In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p gv2)), (In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (c2 :: p)), (In (smash a2 a1) (c1 :: p))
(In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (gv2 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max c2)), (In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv2)), (In (smash a2 a1) (join p p c2))
(In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p gv2)), (In (smash a2 a1) (insert n1 p)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1)), (In (smash a2 a1) (carry p a2))
(In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (carry p gv2)), (In (smash a2 a1) (p ++ p)), (In (smash a2 gv2) p), (In (smash a2 gv2) (c2 :: p)), (In (smash a2 gv2) (c1 :: p)), (In (smash a2 gv2) (a2 :: p)), (In (smash a2 gv2) (a1 :: p)), (In (smash a2 gv2) (gv2 :: p)), (In (smash a2 gv2) (merge p p))
(In (smash a2 gv2) (heap_delete_max c2)), (In (smash a2 gv2) (heap_delete_max c1)), (In (smash a2 gv2) (heap_delete_max a2)), (In (smash a2 gv2) (heap_delete_max a1)), (In (smash a2 gv2) (heap_delete_max gv2)), (In (smash a2 gv2) (join p p c2)), (In (smash a2 gv2) (join p p c1)), (In (smash a2 gv2) (join p p a2)), (In (smash a2 gv2) (join p p a1)), (In (smash a2 gv2) (join p p gv2))
(In (smash a2 gv2) (insert n1 p)), (In (smash a2 gv2) (insert n0 p)), (In (smash a2 gv2) (insert n p)), (In (smash a2 gv2) (carry p c2)), (In (smash a2 gv2) (carry p c1)), (In (smash a2 gv2) (carry p a2)), (In (smash a2 gv2) (carry p a1)), (In (smash a2 gv2) (carry p gv2)), (In (smash a2 gv2) (p ++ p)), (In (smash a1 c2) p)
(In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (a2 :: p)), (In (smash a1 c2) (a1 :: p)), (In (smash a1 c2) (gv2 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max c2)), (In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1))
(In (smash a1 c2) (heap_delete_max gv2)), (In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (join p p a2)), (In (smash a1 c2) (join p p a1)), (In (smash a1 c2) (join p p gv2)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (carry p c2))
(In (smash a1 c2) (carry p c1)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1)), (In (smash a1 c2) (carry p gv2)), (In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p))
(In (smash a1 c1) (gv2 :: p)), (In (smash a1 c1) (merge p p)), (In (smash a1 c1) (heap_delete_max c2)), (In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (heap_delete_max a2)), (In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max gv2)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1)), (In (smash a1 c1) (join p p a2))
(In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p gv2)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n p)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (carry p a2)), (In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p gv2))
(In (smash a1 c1) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (gv2 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max c2)), (In (smash a1 a2) (heap_delete_max c1))
(In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv2)), (In (smash a1 a2) (join p p c2)), (In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p gv2)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert n0 p))
(In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p gv2)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (c2 :: p)), (In (smash a1 a1) (c1 :: p))
(In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (gv2 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv2)), (In (smash a1 a1) (join p p c2))
(In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p gv2)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1)), (In (smash a1 a1) (carry p a2))
(In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p gv2)), (In (smash a1 a1) (p ++ p)), (In (smash a1 gv2) p), (In (smash a1 gv2) (c2 :: p)), (In (smash a1 gv2) (c1 :: p)), (In (smash a1 gv2) (a2 :: p)), (In (smash a1 gv2) (a1 :: p)), (In (smash a1 gv2) (gv2 :: p)), (In (smash a1 gv2) (merge p p))
(In (smash a1 gv2) (heap_delete_max c2)), (In (smash a1 gv2) (heap_delete_max c1)), (In (smash a1 gv2) (heap_delete_max a2)), (In (smash a1 gv2) (heap_delete_max a1)), (In (smash a1 gv2) (heap_delete_max gv2)), (In (smash a1 gv2) (join p p c2)), (In (smash a1 gv2) (join p p c1)), (In (smash a1 gv2) (join p p a2)), (In (smash a1 gv2) (join p p a1)), (In (smash a1 gv2) (join p p gv2))
(In (smash a1 gv2) (insert n1 p)), (In (smash a1 gv2) (insert n0 p)), (In (smash a1 gv2) (insert n p)), (In (smash a1 gv2) (carry p c2)), (In (smash a1 gv2) (carry p c1)), (In (smash a1 gv2) (carry p a2)), (In (smash a1 gv2) (carry p a1)), (In (smash a1 gv2) (carry p gv2)), (In (smash a1 gv2) (p ++ p)), (In (smash gv2 c2) p)
(In (smash gv2 c2) (c2 :: p)), (In (smash gv2 c2) (c1 :: p)), (In (smash gv2 c2) (a2 :: p)), (In (smash gv2 c2) (a1 :: p)), (In (smash gv2 c2) (gv2 :: p)), (In (smash gv2 c2) (merge p p)), (In (smash gv2 c2) (heap_delete_max c2)), (In (smash gv2 c2) (heap_delete_max c1)), (In (smash gv2 c2) (heap_delete_max a2)), (In (smash gv2 c2) (heap_delete_max a1))
(In (smash gv2 c2) (heap_delete_max gv2)), (In (smash gv2 c2) (join p p c2)), (In (smash gv2 c2) (join p p c1)), (In (smash gv2 c2) (join p p a2)), (In (smash gv2 c2) (join p p a1)), (In (smash gv2 c2) (join p p gv2)), (In (smash gv2 c2) (insert n1 p)), (In (smash gv2 c2) (insert n0 p)), (In (smash gv2 c2) (insert n p)), (In (smash gv2 c2) (carry p c2))
(In (smash gv2 c2) (carry p c1)), (In (smash gv2 c2) (carry p a2)), (In (smash gv2 c2) (carry p a1)), (In (smash gv2 c2) (carry p gv2)), (In (smash gv2 c2) (p ++ p)), (In (smash gv2 c1) p), (In (smash gv2 c1) (c2 :: p)), (In (smash gv2 c1) (c1 :: p)), (In (smash gv2 c1) (a2 :: p)), (In (smash gv2 c1) (a1 :: p))
(In (smash gv2 c1) (gv2 :: p)), (In (smash gv2 c1) (merge p p)), (In (smash gv2 c1) (heap_delete_max c2)), (In (smash gv2 c1) (heap_delete_max c1)), (In (smash gv2 c1) (heap_delete_max a2)), (In (smash gv2 c1) (heap_delete_max a1)), (In (smash gv2 c1) (heap_delete_max gv2)), (In (smash gv2 c1) (join p p c2)), (In (smash gv2 c1) (join p p c1)), (In (smash gv2 c1) (join p p a2))
(In (smash gv2 c1) (join p p a1)), (In (smash gv2 c1) (join p p gv2)), (In (smash gv2 c1) (insert n1 p)), (In (smash gv2 c1) (insert n0 p)), (In (smash gv2 c1) (insert n p)), (In (smash gv2 c1) (carry p c2)), (In (smash gv2 c1) (carry p c1)), (In (smash gv2 c1) (carry p a2)), (In (smash gv2 c1) (carry p a1)), (In (smash gv2 c1) (carry p gv2))
(In (smash gv2 c1) (p ++ p)), (In (smash gv2 a2) p), (In (smash gv2 a2) (c2 :: p)), (In (smash gv2 a2) (c1 :: p)), (In (smash gv2 a2) (a2 :: p)), (In (smash gv2 a2) (a1 :: p)), (In (smash gv2 a2) (gv2 :: p)), (In (smash gv2 a2) (merge p p)), (In (smash gv2 a2) (heap_delete_max c2)), (In (smash gv2 a2) (heap_delete_max c1))
(In (smash gv2 a2) (heap_delete_max a2)), (In (smash gv2 a2) (heap_delete_max a1)), (In (smash gv2 a2) (heap_delete_max gv2)), (In (smash gv2 a2) (join p p c2)), (In (smash gv2 a2) (join p p c1)), (In (smash gv2 a2) (join p p a2)), (In (smash gv2 a2) (join p p a1)), (In (smash gv2 a2) (join p p gv2)), (In (smash gv2 a2) (insert n1 p)), (In (smash gv2 a2) (insert n0 p))
(In (smash gv2 a2) (insert n p)), (In (smash gv2 a2) (carry p c2)), (In (smash gv2 a2) (carry p c1)), (In (smash gv2 a2) (carry p a2)), (In (smash gv2 a2) (carry p a1)), (In (smash gv2 a2) (carry p gv2)), (In (smash gv2 a2) (p ++ p)), (In (smash gv2 a1) p), (In (smash gv2 a1) (c2 :: p)), (In (smash gv2 a1) (c1 :: p))
(In (smash gv2 a1) (a2 :: p)), (In (smash gv2 a1) (a1 :: p)), (In (smash gv2 a1) (gv2 :: p)), (In (smash gv2 a1) (merge p p)), (In (smash gv2 a1) (heap_delete_max c2)), (In (smash gv2 a1) (heap_delete_max c1)), (In (smash gv2 a1) (heap_delete_max a2)), (In (smash gv2 a1) (heap_delete_max a1)), (In (smash gv2 a1) (heap_delete_max gv2)), (In (smash gv2 a1) (join p p c2))
(In (smash gv2 a1) (join p p c1)), (In (smash gv2 a1) (join p p a2)), (In (smash gv2 a1) (join p p a1)), (In (smash gv2 a1) (join p p gv2)), (In (smash gv2 a1) (insert n1 p)), (In (smash gv2 a1) (insert n0 p)), (In (smash gv2 a1) (insert n p)), (In (smash gv2 a1) (carry p c2)), (In (smash gv2 a1) (carry p c1)), (In (smash gv2 a1) (carry p a2))
(In (smash gv2 a1) (carry p a1)), (In (smash gv2 a1) (carry p gv2)), (In (smash gv2 a1) (p ++ p)), (In (smash gv2 gv2) p), (In (smash gv2 gv2) (c2 :: p)), (In (smash gv2 gv2) (c1 :: p)), (In (smash gv2 gv2) (a2 :: p)), (In (smash gv2 gv2) (a1 :: p)), (In (smash gv2 gv2) (gv2 :: p)), (In (smash gv2 gv2) (merge p p))
(In (smash gv2 gv2) (heap_delete_max c2)), (In (smash gv2 gv2) (heap_delete_max c1)), (In (smash gv2 gv2) (heap_delete_max a2)), (In (smash gv2 gv2) (heap_delete_max a1)), (In (smash gv2 gv2) (heap_delete_max gv2)), (In (smash gv2 gv2) (join p p c2)), (In (smash gv2 gv2) (join p p c1)), (In (smash gv2 gv2) (join p p a2)), (In (smash gv2 gv2) (join p p a1)), (In (smash gv2 gv2) (join p p gv2))
(In (smash gv2 gv2) (insert n1 p)), (In (smash gv2 gv2) (insert n0 p)), (In (smash gv2 gv2) (insert n p)), (In (smash gv2 gv2) (carry p c2)), (In (smash gv2 gv2) (carry p c1)), (In (smash gv2 gv2) (carry p a2)), (In (smash gv2 gv2) (carry p a1)), (In (smash gv2 gv2) (carry p gv2)), (In (smash gv2 gv2) (p ++ p)), (In Leaf p)
(In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (gv2 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max c2)), (In Leaf (heap_delete_max c1)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1))
(In Leaf (heap_delete_max gv2)), (In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1)), (In Leaf (join p p gv2)), (In Leaf (insert n1 p)), (In Leaf (insert n0 p)), (In Leaf (insert n p)), (In Leaf (carry p c2))
(In Leaf (carry p c1)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (carry p gv2)), (In Leaf (p ++ p)), (n1 < find_max' n1 p), (n1 < find_max' n0 p), (n1 < find_max' n p), (n1 < length p), (n0 < find_max' n1 p)
(n0 < find_max' n0 p), (n0 < find_max' n p), (n0 < length p), (n < find_max' n1 p), (n < find_max' n0 p), (n < find_max' n p), (n < length p), (find_max' n1 p < n1), (find_max' n1 p < n0), (find_max' n1 p < n)
(find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' n p), (find_max' n1 p < length p), (find_max' n0 p < n1), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p), (find_max' n p < n1)
(find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n1 p), (find_max' n p < find_max' n0 p), (find_max' n p < length p), (length p < n1), (length p < n0), (length p < n), (length p < find_max' n1 p), (length p < find_max' n0 p)
(length p < find_max' n p), (n1 <= find_max' n1 p), (n1 <= find_max' n0 p), (n1 <= find_max' n p), (n1 <= length p), (n0 <= find_max' n1 p), (n0 <= find_max' n0 p), (n0 <= find_max' n p), (n0 <= length p), (n <= find_max' n1 p)
(n <= find_max' n0 p), (n <= find_max' n p), (n <= length p), (find_max' n1 p <= n1), (find_max' n1 p <= n0), (find_max' n1 p <= n), (find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= length p), (find_max' n0 p <= n1)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n p <= n1), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n1 p), (find_max' n p <= find_max' n0 p)
(find_max' n p <= length p), (length p <= n1), (length p <= n0), (length p <= n), (length p <= find_max' n1 p), (length p <= find_max' n0 p), (length p <= find_max' n p), (~ priq p), (~ priqq n1 p), (~ priqq n0 p)
(~ priqq n p), (~ pow2heap n1 c2), (~ pow2heap n1 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 gv2), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n0 a2), (~ pow2heap n0 a1)
(~ pow2heap n0 gv2), (~ pow2heap n c2), (~ pow2heap n c1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n gv2), (~ pow2heapp n1 n1 c2), (~ pow2heapp n1 n1 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1)
(~ pow2heapp n1 n1 gv2), (~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1), (~ pow2heapp n1 n0 gv2), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1)
(~ pow2heapp n1 n gv2), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 gv2), (~ pow2heapp n0 n0 c2), (~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1)
(~ pow2heapp n0 n0 gv2), (~ pow2heapp n0 n c2), (~ pow2heapp n0 n c1), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n0 n gv2), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n n1 a2), (~ pow2heapp n n1 a1)
(~ pow2heapp n n1 gv2), (~ pow2heapp n n0 c2), (~ pow2heapp n n0 c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 gv2), (~ pow2heapp n n c2), (~ pow2heapp n n c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1)
(~ pow2heapp n n gv2), (~ Permutation p p), (~ In c2 p), (~ In c1 p), (~ In a2 p), (~ In a1 p), (~ In gv2 p), (~ n1 < n1), (~ n1 < n0), (~ n1 < n)
(~ n0 < n1), (~ n0 < n0), (~ n0 < n), (~ n < n1), (~ n < n0), (~ n < n), (~ n1 <= n1), (~ n1 <= n0), (~ n1 <= n), (~ n0 <= n1)
(~ n0 <= n0), (~ n0 <= n), (~ n <= n1), (~ n <= n0), (~ n <= n), (p <> p), (c2 <> c2), (c2 <> c1), (c2 <> a2), (c2 <> a1)
(c2 <> gv2), (c1 <> c2), (c1 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> gv2), (a2 <> c2), (a2 <> c1), (a2 <> a2), (a2 <> a1)
(a2 <> gv2), (a1 <> c2), (a1 <> c1), (a1 <> a2), (a1 <> a1), (a1 <> gv2), (gv2 <> c2), (gv2 <> c1), (gv2 <> a2), (gv2 <> a1)
(gv2 <> gv2), (n1 <> n1), (n1 <> n0), (n1 <> n), (n0 <> n1), (n0 <> n0), (n0 <> n), (n <> n1), (n <> n0), (n <> n)
(None = Some p), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max c2), (c2 :: p = heap_delete_max c1), (c2 :: p = heap_delete_max a2), (c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max gv2), (c2 :: p = join p p c2), (c2 :: p = join p p c1)
(c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p gv2), (c2 :: p = insert n1 p), (c2 :: p = insert n0 p), (c2 :: p = insert n p), (c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = carry p a2), (c2 :: p = carry p a1)
(c2 :: p = carry p gv2), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p), (c1 :: p = merge p p), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1), (c1 :: p = heap_delete_max a2), (c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max gv2)
(c1 :: p = join p p c2), (c1 :: p = join p p c1), (c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p gv2), (c1 :: p = insert n1 p), (c1 :: p = insert n0 p), (c1 :: p = insert n p), (c1 :: p = carry p c2), (c1 :: p = carry p c1)
(c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p gv2), (c1 :: p = p ++ p), (c1 :: p = []), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max gv2), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p gv2), (a2 :: p = insert n1 p), (a2 :: p = insert n0 p), (a2 :: p = insert n p)
(a2 :: p = carry p c2), (a2 :: p = carry p c1), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p gv2), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max c2)
(a1 :: p = heap_delete_max c1), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = heap_delete_max gv2), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p gv2), (a1 :: p = insert n1 p)
(a1 :: p = insert n0 p), (a1 :: p = insert n p), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = carry p gv2), (a1 :: p = p ++ p), (a1 :: p = []), (gv2 :: p = p)
(gv2 :: p = merge p p), (gv2 :: p = heap_delete_max c2), (gv2 :: p = heap_delete_max c1), (gv2 :: p = heap_delete_max a2), (gv2 :: p = heap_delete_max a1), (gv2 :: p = heap_delete_max gv2), (gv2 :: p = join p p c2), (gv2 :: p = join p p c1), (gv2 :: p = join p p a2), (gv2 :: p = join p p a1)
(gv2 :: p = join p p gv2), (gv2 :: p = insert n1 p), (gv2 :: p = insert n0 p), (gv2 :: p = insert n p), (gv2 :: p = carry p c2), (gv2 :: p = carry p c1), (gv2 :: p = carry p a2), (gv2 :: p = carry p a1), (gv2 :: p = carry p gv2), (gv2 :: p = p ++ p)
(gv2 :: p = []), (merge p p = p), (merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max gv2), (merge p p = join p p c2), (merge p p = join p p c1), (merge p p = join p p a2)
(merge p p = join p p a1), (merge p p = join p p gv2), (merge p p = insert n1 p), (merge p p = insert n0 p), (merge p p = insert n p), (merge p p = carry p c2), (merge p p = carry p c1), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p gv2)
(merge p p = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1), (heap_delete_max c2 = carry p gv2), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p), (heap_delete_max c1 = carry p c2)
(heap_delete_max c1 = carry p c1), (heap_delete_max c1 = carry p a2), (heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p gv2), (heap_delete_max c1 = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1)
(heap_delete_max a2 = carry p gv2), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p c2), (heap_delete_max a1 = carry p c1), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p gv2), (heap_delete_max a1 = p ++ p), (heap_delete_max gv2 = p)
(heap_delete_max gv2 = carry p c2), (heap_delete_max gv2 = carry p c1), (heap_delete_max gv2 = carry p a2), (heap_delete_max gv2 = carry p a1), (heap_delete_max gv2 = carry p gv2), (heap_delete_max gv2 = p ++ p), (join p p c2 = p), (join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = heap_delete_max a2)
(join p p c2 = heap_delete_max a1), (join p p c2 = heap_delete_max gv2), (join p p c2 = insert n1 p), (join p p c2 = insert n0 p), (join p p c2 = insert n p), (join p p c2 = carry p c2), (join p p c2 = carry p c1), (join p p c2 = carry p a2), (join p p c2 = carry p a1), (join p p c2 = carry p gv2)
(join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max gv2), (join p p c1 = insert n1 p), (join p p c1 = insert n0 p), (join p p c1 = insert n p)
(join p p c1 = carry p c2), (join p p c1 = carry p c1), (join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p gv2), (join p p c1 = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = heap_delete_max a2)
(join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max gv2), (join p p a2 = insert n1 p), (join p p a2 = insert n0 p), (join p p a2 = insert n p), (join p p a2 = carry p c2), (join p p a2 = carry p c1), (join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = carry p gv2)
(join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = heap_delete_max gv2), (join p p a1 = insert n1 p), (join p p a1 = insert n0 p), (join p p a1 = insert n p)
(join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p gv2), (join p p a1 = p ++ p), (join p p gv2 = p), (join p p gv2 = heap_delete_max c2), (join p p gv2 = heap_delete_max c1), (join p p gv2 = heap_delete_max a2)
(join p p gv2 = heap_delete_max a1), (join p p gv2 = heap_delete_max gv2), (join p p gv2 = insert n1 p), (join p p gv2 = insert n0 p), (join p p gv2 = insert n p), (join p p gv2 = carry p c2), (join p p gv2 = carry p c1), (join p p gv2 = carry p a2), (join p p gv2 = carry p a1), (join p p gv2 = carry p gv2)
(join p p gv2 = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max c2), (insert n1 p = heap_delete_max c1), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max gv2), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = carry p a2)
(insert n1 p = carry p a1), (insert n1 p = carry p gv2), (insert n1 p = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max c2), (insert n0 p = heap_delete_max c1), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max gv2), (insert n0 p = carry p c2)
(insert n0 p = carry p c1), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p gv2), (insert n0 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max c2), (insert n p = heap_delete_max c1), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1)
(insert n p = heap_delete_max gv2), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p gv2), (insert n p = p ++ p), (carry p c2 = p), (carry p c2 = p ++ p), (carry p c1 = p)
(carry p c1 = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (carry p gv2 = p), (carry p gv2 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p)
([] = heap_delete_max c2), ([] = heap_delete_max c1), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max gv2), ([] = join p p c2), ([] = join p p c1), ([] = join p p a2), ([] = join p p a1), ([] = join p p gv2)
([] = insert n1 p), ([] = insert n0 p), ([] = insert n p), ([] = carry p c2), ([] = carry p c1), ([] = carry p a2), ([] = carry p a1), ([] = carry p gv2), ([] = p ++ p), ((p, p) = delete_max_aux n1 p)
((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n p), (Node n1 c2 c2 = c2), (Node n1 c2 c2 = c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = gv2), (Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c2 a2)
(Node n1 c2 c2 = smash c2 a1), (Node n1 c2 c2 = smash c2 gv2), (Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 gv2), (Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a2 a2)
(Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 gv2), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 gv2), (Node n1 c2 c2 = smash gv2 c2), (Node n1 c2 c2 = smash gv2 c1), (Node n1 c2 c2 = smash gv2 a2)
(Node n1 c2 c2 = smash gv2 a1), (Node n1 c2 c2 = smash gv2 gv2), (Node n1 c2 c1 = c2), (Node n1 c2 c1 = c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = gv2), (Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c2 a2)
(Node n1 c2 c1 = smash c2 a1), (Node n1 c2 c1 = smash c2 gv2), (Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 gv2), (Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a2 a2)
(Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 gv2), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 gv2), (Node n1 c2 c1 = smash gv2 c2), (Node n1 c2 c1 = smash gv2 c1), (Node n1 c2 c1 = smash gv2 a2)
(Node n1 c2 c1 = smash gv2 a1), (Node n1 c2 c1 = smash gv2 gv2), (Node n1 c2 a2 = c2), (Node n1 c2 a2 = c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = gv2), (Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c2 a2)
(Node n1 c2 a2 = smash c2 a1), (Node n1 c2 a2 = smash c2 gv2), (Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 gv2), (Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a2 a2)
(Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 gv2), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 gv2), (Node n1 c2 a2 = smash gv2 c2), (Node n1 c2 a2 = smash gv2 c1), (Node n1 c2 a2 = smash gv2 a2)
(Node n1 c2 a2 = smash gv2 a1), (Node n1 c2 a2 = smash gv2 gv2), (Node n1 c2 a1 = c2), (Node n1 c2 a1 = c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = gv2), (Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c2 a2)
(Node n1 c2 a1 = smash c2 a1), (Node n1 c2 a1 = smash c2 gv2), (Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 gv2), (Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a2 a2)
(Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 gv2), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 gv2), (Node n1 c2 a1 = smash gv2 c2), (Node n1 c2 a1 = smash gv2 c1), (Node n1 c2 a1 = smash gv2 a2)
(Node n1 c2 a1 = smash gv2 a1), (Node n1 c2 a1 = smash gv2 gv2), (Node n1 c2 gv2 = c2), (Node n1 c2 gv2 = c1), (Node n1 c2 gv2 = a2), (Node n1 c2 gv2 = a1), (Node n1 c2 gv2 = gv2), (Node n1 c2 gv2 = smash c2 c2), (Node n1 c2 gv2 = smash c2 c1), (Node n1 c2 gv2 = smash c2 a2)
(Node n1 c2 gv2 = smash c2 a1), (Node n1 c2 gv2 = smash c2 gv2), (Node n1 c2 gv2 = smash c1 c2), (Node n1 c2 gv2 = smash c1 c1), (Node n1 c2 gv2 = smash c1 a2), (Node n1 c2 gv2 = smash c1 a1), (Node n1 c2 gv2 = smash c1 gv2), (Node n1 c2 gv2 = smash a2 c2), (Node n1 c2 gv2 = smash a2 c1), (Node n1 c2 gv2 = smash a2 a2)
(Node n1 c2 gv2 = smash a2 a1), (Node n1 c2 gv2 = smash a2 gv2), (Node n1 c2 gv2 = smash a1 c2), (Node n1 c2 gv2 = smash a1 c1), (Node n1 c2 gv2 = smash a1 a2), (Node n1 c2 gv2 = smash a1 a1), (Node n1 c2 gv2 = smash a1 gv2), (Node n1 c2 gv2 = smash gv2 c2), (Node n1 c2 gv2 = smash gv2 c1), (Node n1 c2 gv2 = smash gv2 a2)
(Node n1 c2 gv2 = smash gv2 a1), (Node n1 c2 gv2 = smash gv2 gv2), (Node n1 c1 c2 = c2), (Node n1 c1 c2 = c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = gv2), (Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c2 a2)
(Node n1 c1 c2 = smash c2 a1), (Node n1 c1 c2 = smash c2 gv2), (Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 gv2), (Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a2 a2)
(Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 gv2), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 gv2), (Node n1 c1 c2 = smash gv2 c2), (Node n1 c1 c2 = smash gv2 c1), (Node n1 c1 c2 = smash gv2 a2)
(Node n1 c1 c2 = smash gv2 a1), (Node n1 c1 c2 = smash gv2 gv2), (Node n1 c1 c1 = c2), (Node n1 c1 c1 = c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = gv2), (Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c2 a2)
(Node n1 c1 c1 = smash c2 a1), (Node n1 c1 c1 = smash c2 gv2), (Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 gv2), (Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a2 a2)
(Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 gv2), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 gv2), (Node n1 c1 c1 = smash gv2 c2), (Node n1 c1 c1 = smash gv2 c1), (Node n1 c1 c1 = smash gv2 a2)
(Node n1 c1 c1 = smash gv2 a1), (Node n1 c1 c1 = smash gv2 gv2), (Node n1 c1 a2 = c2), (Node n1 c1 a2 = c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = gv2), (Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c2 a2)
(Node n1 c1 a2 = smash c2 a1), (Node n1 c1 a2 = smash c2 gv2), (Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 gv2), (Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a2 a2)
(Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 gv2), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 gv2), (Node n1 c1 a2 = smash gv2 c2), (Node n1 c1 a2 = smash gv2 c1), (Node n1 c1 a2 = smash gv2 a2)
(Node n1 c1 a2 = smash gv2 a1), (Node n1 c1 a2 = smash gv2 gv2), (Node n1 c1 a1 = c2), (Node n1 c1 a1 = c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = gv2), (Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c2 a2)
(Node n1 c1 a1 = smash c2 a1), (Node n1 c1 a1 = smash c2 gv2), (Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 gv2), (Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a2 a2)
(Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 gv2), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 gv2), (Node n1 c1 a1 = smash gv2 c2), (Node n1 c1 a1 = smash gv2 c1), (Node n1 c1 a1 = smash gv2 a2)
(Node n1 c1 a1 = smash gv2 a1), (Node n1 c1 a1 = smash gv2 gv2), (Node n1 c1 gv2 = c2), (Node n1 c1 gv2 = c1), (Node n1 c1 gv2 = a2), (Node n1 c1 gv2 = a1), (Node n1 c1 gv2 = gv2), (Node n1 c1 gv2 = smash c2 c2), (Node n1 c1 gv2 = smash c2 c1), (Node n1 c1 gv2 = smash c2 a2)
(Node n1 c1 gv2 = smash c2 a1), (Node n1 c1 gv2 = smash c2 gv2), (Node n1 c1 gv2 = smash c1 c2), (Node n1 c1 gv2 = smash c1 c1), (Node n1 c1 gv2 = smash c1 a2), (Node n1 c1 gv2 = smash c1 a1), (Node n1 c1 gv2 = smash c1 gv2), (Node n1 c1 gv2 = smash a2 c2), (Node n1 c1 gv2 = smash a2 c1), (Node n1 c1 gv2 = smash a2 a2)
(Node n1 c1 gv2 = smash a2 a1), (Node n1 c1 gv2 = smash a2 gv2), (Node n1 c1 gv2 = smash a1 c2), (Node n1 c1 gv2 = smash a1 c1), (Node n1 c1 gv2 = smash a1 a2), (Node n1 c1 gv2 = smash a1 a1), (Node n1 c1 gv2 = smash a1 gv2), (Node n1 c1 gv2 = smash gv2 c2), (Node n1 c1 gv2 = smash gv2 c1), (Node n1 c1 gv2 = smash gv2 a2)
(Node n1 c1 gv2 = smash gv2 a1), (Node n1 c1 gv2 = smash gv2 gv2), (Node n1 a2 c2 = c2), (Node n1 a2 c2 = c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = gv2), (Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c2 a2)
(Node n1 a2 c2 = smash c2 a1), (Node n1 a2 c2 = smash c2 gv2), (Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 gv2), (Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a2 a2)
(Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 gv2), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 gv2), (Node n1 a2 c2 = smash gv2 c2), (Node n1 a2 c2 = smash gv2 c1), (Node n1 a2 c2 = smash gv2 a2)
(Node n1 a2 c2 = smash gv2 a1), (Node n1 a2 c2 = smash gv2 gv2), (Node n1 a2 c1 = c2), (Node n1 a2 c1 = c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = gv2), (Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c2 a2)
(Node n1 a2 c1 = smash c2 a1), (Node n1 a2 c1 = smash c2 gv2), (Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 gv2), (Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a2 a2)
(Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 gv2), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 gv2), (Node n1 a2 c1 = smash gv2 c2), (Node n1 a2 c1 = smash gv2 c1), (Node n1 a2 c1 = smash gv2 a2)
(Node n1 a2 c1 = smash gv2 a1), (Node n1 a2 c1 = smash gv2 gv2), (Node n1 a2 a2 = c2), (Node n1 a2 a2 = c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = gv2), (Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c2 a2)
(Node n1 a2 a2 = smash c2 a1), (Node n1 a2 a2 = smash c2 gv2), (Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 gv2), (Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a2 a2)
(Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 gv2), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 gv2), (Node n1 a2 a2 = smash gv2 c2), (Node n1 a2 a2 = smash gv2 c1), (Node n1 a2 a2 = smash gv2 a2)
(Node n1 a2 a2 = smash gv2 a1), (Node n1 a2 a2 = smash gv2 gv2), (Node n1 a2 a1 = c2), (Node n1 a2 a1 = c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = gv2), (Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c2 a2)
(Node n1 a2 a1 = smash c2 a1), (Node n1 a2 a1 = smash c2 gv2), (Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 gv2), (Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a2 a2)
(Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 gv2), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 gv2), (Node n1 a2 a1 = smash gv2 c2), (Node n1 a2 a1 = smash gv2 c1), (Node n1 a2 a1 = smash gv2 a2)
(Node n1 a2 a1 = smash gv2 a1), (Node n1 a2 a1 = smash gv2 gv2), (Node n1 a2 gv2 = c2), (Node n1 a2 gv2 = c1), (Node n1 a2 gv2 = a2), (Node n1 a2 gv2 = a1), (Node n1 a2 gv2 = gv2), (Node n1 a2 gv2 = smash c2 c2), (Node n1 a2 gv2 = smash c2 c1), (Node n1 a2 gv2 = smash c2 a2)
(Node n1 a2 gv2 = smash c2 a1), (Node n1 a2 gv2 = smash c2 gv2), (Node n1 a2 gv2 = smash c1 c2), (Node n1 a2 gv2 = smash c1 c1), (Node n1 a2 gv2 = smash c1 a2), (Node n1 a2 gv2 = smash c1 a1), (Node n1 a2 gv2 = smash c1 gv2), (Node n1 a2 gv2 = smash a2 c2), (Node n1 a2 gv2 = smash a2 c1), (Node n1 a2 gv2 = smash a2 a2)
(Node n1 a2 gv2 = smash a2 a1), (Node n1 a2 gv2 = smash a2 gv2), (Node n1 a2 gv2 = smash a1 c2), (Node n1 a2 gv2 = smash a1 c1), (Node n1 a2 gv2 = smash a1 a2), (Node n1 a2 gv2 = smash a1 a1), (Node n1 a2 gv2 = smash a1 gv2), (Node n1 a2 gv2 = smash gv2 c2), (Node n1 a2 gv2 = smash gv2 c1), (Node n1 a2 gv2 = smash gv2 a2)
(Node n1 a2 gv2 = smash gv2 a1), (Node n1 a2 gv2 = smash gv2 gv2), (Node n1 a1 c2 = c2), (Node n1 a1 c2 = c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = gv2), (Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c2 a2)
(Node n1 a1 c2 = smash c2 a1), (Node n1 a1 c2 = smash c2 gv2), (Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 gv2), (Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a2 a2)
(Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 gv2), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 gv2), (Node n1 a1 c2 = smash gv2 c2), (Node n1 a1 c2 = smash gv2 c1), (Node n1 a1 c2 = smash gv2 a2)
(Node n1 a1 c2 = smash gv2 a1), (Node n1 a1 c2 = smash gv2 gv2), (Node n1 a1 c1 = c2), (Node n1 a1 c1 = c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = gv2), (Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c2 a2)
(Node n1 a1 c1 = smash c2 a1), (Node n1 a1 c1 = smash c2 gv2), (Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 gv2), (Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a2 a2)
(Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 gv2), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 gv2), (Node n1 a1 c1 = smash gv2 c2), (Node n1 a1 c1 = smash gv2 c1), (Node n1 a1 c1 = smash gv2 a2)
(Node n1 a1 c1 = smash gv2 a1), (Node n1 a1 c1 = smash gv2 gv2), (Node n1 a1 a2 = c2), (Node n1 a1 a2 = c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = gv2), (Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c2 a2)
(Node n1 a1 a2 = smash c2 a1), (Node n1 a1 a2 = smash c2 gv2), (Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 gv2), (Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a2 a2)
(Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 gv2), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 gv2), (Node n1 a1 a2 = smash gv2 c2), (Node n1 a1 a2 = smash gv2 c1), (Node n1 a1 a2 = smash gv2 a2)
(Node n1 a1 a2 = smash gv2 a1), (Node n1 a1 a2 = smash gv2 gv2), (Node n1 a1 a1 = c2), (Node n1 a1 a1 = c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = gv2), (Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c2 a2)
(Node n1 a1 a1 = smash c2 a1), (Node n1 a1 a1 = smash c2 gv2), (Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 gv2), (Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a2 a2)
(Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 gv2), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 gv2), (Node n1 a1 a1 = smash gv2 c2), (Node n1 a1 a1 = smash gv2 c1), (Node n1 a1 a1 = smash gv2 a2)
(Node n1 a1 a1 = smash gv2 a1), (Node n1 a1 a1 = smash gv2 gv2), (Node n1 a1 gv2 = c2), (Node n1 a1 gv2 = c1), (Node n1 a1 gv2 = a2), (Node n1 a1 gv2 = a1), (Node n1 a1 gv2 = gv2), (Node n1 a1 gv2 = smash c2 c2), (Node n1 a1 gv2 = smash c2 c1), (Node n1 a1 gv2 = smash c2 a2)
(Node n1 a1 gv2 = smash c2 a1), (Node n1 a1 gv2 = smash c2 gv2), (Node n1 a1 gv2 = smash c1 c2), (Node n1 a1 gv2 = smash c1 c1), (Node n1 a1 gv2 = smash c1 a2), (Node n1 a1 gv2 = smash c1 a1), (Node n1 a1 gv2 = smash c1 gv2), (Node n1 a1 gv2 = smash a2 c2), (Node n1 a1 gv2 = smash a2 c1), (Node n1 a1 gv2 = smash a2 a2)
(Node n1 a1 gv2 = smash a2 a1), (Node n1 a1 gv2 = smash a2 gv2), (Node n1 a1 gv2 = smash a1 c2), (Node n1 a1 gv2 = smash a1 c1), (Node n1 a1 gv2 = smash a1 a2), (Node n1 a1 gv2 = smash a1 a1), (Node n1 a1 gv2 = smash a1 gv2), (Node n1 a1 gv2 = smash gv2 c2), (Node n1 a1 gv2 = smash gv2 c1), (Node n1 a1 gv2 = smash gv2 a2)
(Node n1 a1 gv2 = smash gv2 a1), (Node n1 a1 gv2 = smash gv2 gv2), (Node n1 gv2 c2 = c2), (Node n1 gv2 c2 = c1), (Node n1 gv2 c2 = a2), (Node n1 gv2 c2 = a1), (Node n1 gv2 c2 = gv2), (Node n1 gv2 c2 = smash c2 c2), (Node n1 gv2 c2 = smash c2 c1), (Node n1 gv2 c2 = smash c2 a2)
(Node n1 gv2 c2 = smash c2 a1), (Node n1 gv2 c2 = smash c2 gv2), (Node n1 gv2 c2 = smash c1 c2), (Node n1 gv2 c2 = smash c1 c1), (Node n1 gv2 c2 = smash c1 a2), (Node n1 gv2 c2 = smash c1 a1), (Node n1 gv2 c2 = smash c1 gv2), (Node n1 gv2 c2 = smash a2 c2), (Node n1 gv2 c2 = smash a2 c1), (Node n1 gv2 c2 = smash a2 a2)
(Node n1 gv2 c2 = smash a2 a1), (Node n1 gv2 c2 = smash a2 gv2), (Node n1 gv2 c2 = smash a1 c2), (Node n1 gv2 c2 = smash a1 c1), (Node n1 gv2 c2 = smash a1 a2), (Node n1 gv2 c2 = smash a1 a1), (Node n1 gv2 c2 = smash a1 gv2), (Node n1 gv2 c2 = smash gv2 c2), (Node n1 gv2 c2 = smash gv2 c1), (Node n1 gv2 c2 = smash gv2 a2)
(Node n1 gv2 c2 = smash gv2 a1), (Node n1 gv2 c2 = smash gv2 gv2), (Node n1 gv2 c1 = c2), (Node n1 gv2 c1 = c1), (Node n1 gv2 c1 = a2), (Node n1 gv2 c1 = a1), (Node n1 gv2 c1 = gv2), (Node n1 gv2 c1 = smash c2 c2), (Node n1 gv2 c1 = smash c2 c1), (Node n1 gv2 c1 = smash c2 a2)
(Node n1 gv2 c1 = smash c2 a1), (Node n1 gv2 c1 = smash c2 gv2), (Node n1 gv2 c1 = smash c1 c2), (Node n1 gv2 c1 = smash c1 c1), (Node n1 gv2 c1 = smash c1 a2), (Node n1 gv2 c1 = smash c1 a1), (Node n1 gv2 c1 = smash c1 gv2), (Node n1 gv2 c1 = smash a2 c2), (Node n1 gv2 c1 = smash a2 c1), (Node n1 gv2 c1 = smash a2 a2)
(Node n1 gv2 c1 = smash a2 a1), (Node n1 gv2 c1 = smash a2 gv2), (Node n1 gv2 c1 = smash a1 c2), (Node n1 gv2 c1 = smash a1 c1), (Node n1 gv2 c1 = smash a1 a2), (Node n1 gv2 c1 = smash a1 a1), (Node n1 gv2 c1 = smash a1 gv2), (Node n1 gv2 c1 = smash gv2 c2), (Node n1 gv2 c1 = smash gv2 c1), (Node n1 gv2 c1 = smash gv2 a2)
(Node n1 gv2 c1 = smash gv2 a1), (Node n1 gv2 c1 = smash gv2 gv2), (Node n1 gv2 a2 = c2), (Node n1 gv2 a2 = c1), (Node n1 gv2 a2 = a2), (Node n1 gv2 a2 = a1), (Node n1 gv2 a2 = gv2), (Node n1 gv2 a2 = smash c2 c2), (Node n1 gv2 a2 = smash c2 c1), (Node n1 gv2 a2 = smash c2 a2)
(Node n1 gv2 a2 = smash c2 a1), (Node n1 gv2 a2 = smash c2 gv2), (Node n1 gv2 a2 = smash c1 c2), (Node n1 gv2 a2 = smash c1 c1), (Node n1 gv2 a2 = smash c1 a2), (Node n1 gv2 a2 = smash c1 a1), (Node n1 gv2 a2 = smash c1 gv2), (Node n1 gv2 a2 = smash a2 c2), (Node n1 gv2 a2 = smash a2 c1), (Node n1 gv2 a2 = smash a2 a2)
(Node n1 gv2 a2 = smash a2 a1), (Node n1 gv2 a2 = smash a2 gv2), (Node n1 gv2 a2 = smash a1 c2), (Node n1 gv2 a2 = smash a1 c1), (Node n1 gv2 a2 = smash a1 a2), (Node n1 gv2 a2 = smash a1 a1), (Node n1 gv2 a2 = smash a1 gv2), (Node n1 gv2 a2 = smash gv2 c2), (Node n1 gv2 a2 = smash gv2 c1), (Node n1 gv2 a2 = smash gv2 a2)
(Node n1 gv2 a2 = smash gv2 a1), (Node n1 gv2 a2 = smash gv2 gv2), (Node n1 gv2 a1 = c2), (Node n1 gv2 a1 = c1), (Node n1 gv2 a1 = a2), (Node n1 gv2 a1 = a1), (Node n1 gv2 a1 = gv2), (Node n1 gv2 a1 = smash c2 c2), (Node n1 gv2 a1 = smash c2 c1), (Node n1 gv2 a1 = smash c2 a2)
(Node n1 gv2 a1 = smash c2 a1), (Node n1 gv2 a1 = smash c2 gv2), (Node n1 gv2 a1 = smash c1 c2), (Node n1 gv2 a1 = smash c1 c1), (Node n1 gv2 a1 = smash c1 a2), (Node n1 gv2 a1 = smash c1 a1), (Node n1 gv2 a1 = smash c1 gv2), (Node n1 gv2 a1 = smash a2 c2), (Node n1 gv2 a1 = smash a2 c1), (Node n1 gv2 a1 = smash a2 a2)
(Node n1 gv2 a1 = smash a2 a1), (Node n1 gv2 a1 = smash a2 gv2), (Node n1 gv2 a1 = smash a1 c2), (Node n1 gv2 a1 = smash a1 c1), (Node n1 gv2 a1 = smash a1 a2), (Node n1 gv2 a1 = smash a1 a1), (Node n1 gv2 a1 = smash a1 gv2), (Node n1 gv2 a1 = smash gv2 c2), (Node n1 gv2 a1 = smash gv2 c1), (Node n1 gv2 a1 = smash gv2 a2)
(Node n1 gv2 a1 = smash gv2 a1), (Node n1 gv2 a1 = smash gv2 gv2), (Node n1 gv2 gv2 = c2), (Node n1 gv2 gv2 = c1), (Node n1 gv2 gv2 = a2), (Node n1 gv2 gv2 = a1), (Node n1 gv2 gv2 = gv2), (Node n1 gv2 gv2 = smash c2 c2), (Node n1 gv2 gv2 = smash c2 c1), (Node n1 gv2 gv2 = smash c2 a2)
(Node n1 gv2 gv2 = smash c2 a1), (Node n1 gv2 gv2 = smash c2 gv2), (Node n1 gv2 gv2 = smash c1 c2), (Node n1 gv2 gv2 = smash c1 c1), (Node n1 gv2 gv2 = smash c1 a2), (Node n1 gv2 gv2 = smash c1 a1), (Node n1 gv2 gv2 = smash c1 gv2), (Node n1 gv2 gv2 = smash a2 c2), (Node n1 gv2 gv2 = smash a2 c1), (Node n1 gv2 gv2 = smash a2 a2)
(Node n1 gv2 gv2 = smash a2 a1), (Node n1 gv2 gv2 = smash a2 gv2), (Node n1 gv2 gv2 = smash a1 c2), (Node n1 gv2 gv2 = smash a1 c1), (Node n1 gv2 gv2 = smash a1 a2), (Node n1 gv2 gv2 = smash a1 a1), (Node n1 gv2 gv2 = smash a1 gv2), (Node n1 gv2 gv2 = smash gv2 c2), (Node n1 gv2 gv2 = smash gv2 c1), (Node n1 gv2 gv2 = smash gv2 a2)
(Node n1 gv2 gv2 = smash gv2 a1), (Node n1 gv2 gv2 = smash gv2 gv2), (Node n0 c2 c2 = c2), (Node n0 c2 c2 = c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = gv2), (Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c2 a2)
(Node n0 c2 c2 = smash c2 a1), (Node n0 c2 c2 = smash c2 gv2), (Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 gv2), (Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a2 a2)
(Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 gv2), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 gv2), (Node n0 c2 c2 = smash gv2 c2), (Node n0 c2 c2 = smash gv2 c1), (Node n0 c2 c2 = smash gv2 a2)
(Node n0 c2 c2 = smash gv2 a1), (Node n0 c2 c2 = smash gv2 gv2), (Node n0 c2 c1 = c2), (Node n0 c2 c1 = c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = gv2), (Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c2 a2)
(Node n0 c2 c1 = smash c2 a1), (Node n0 c2 c1 = smash c2 gv2), (Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 gv2), (Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a2 a2)
(Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 gv2), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 gv2), (Node n0 c2 c1 = smash gv2 c2), (Node n0 c2 c1 = smash gv2 c1), (Node n0 c2 c1 = smash gv2 a2)
(Node n0 c2 c1 = smash gv2 a1), (Node n0 c2 c1 = smash gv2 gv2), (Node n0 c2 a2 = c2), (Node n0 c2 a2 = c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = gv2), (Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c2 a2)
(Node n0 c2 a2 = smash c2 a1), (Node n0 c2 a2 = smash c2 gv2), (Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 gv2), (Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a2 a2)
(Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 gv2), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 gv2), (Node n0 c2 a2 = smash gv2 c2), (Node n0 c2 a2 = smash gv2 c1), (Node n0 c2 a2 = smash gv2 a2)
(Node n0 c2 a2 = smash gv2 a1), (Node n0 c2 a2 = smash gv2 gv2), (Node n0 c2 a1 = c2), (Node n0 c2 a1 = c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = gv2), (Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c2 a2)
(Node n0 c2 a1 = smash c2 a1), (Node n0 c2 a1 = smash c2 gv2), (Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 gv2), (Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a2 a2)
(Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 gv2), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 gv2), (Node n0 c2 a1 = smash gv2 c2), (Node n0 c2 a1 = smash gv2 c1), (Node n0 c2 a1 = smash gv2 a2)
(Node n0 c2 a1 = smash gv2 a1), (Node n0 c2 a1 = smash gv2 gv2), (Node n0 c2 gv2 = c2), (Node n0 c2 gv2 = c1), (Node n0 c2 gv2 = a2), (Node n0 c2 gv2 = a1), (Node n0 c2 gv2 = gv2), (Node n0 c2 gv2 = smash c2 c2), (Node n0 c2 gv2 = smash c2 c1), (Node n0 c2 gv2 = smash c2 a2)
(Node n0 c2 gv2 = smash c2 a1), (Node n0 c2 gv2 = smash c2 gv2), (Node n0 c2 gv2 = smash c1 c2), (Node n0 c2 gv2 = smash c1 c1), (Node n0 c2 gv2 = smash c1 a2), (Node n0 c2 gv2 = smash c1 a1), (Node n0 c2 gv2 = smash c1 gv2), (Node n0 c2 gv2 = smash a2 c2), (Node n0 c2 gv2 = smash a2 c1), (Node n0 c2 gv2 = smash a2 a2)
(Node n0 c2 gv2 = smash a2 a1), (Node n0 c2 gv2 = smash a2 gv2), (Node n0 c2 gv2 = smash a1 c2), (Node n0 c2 gv2 = smash a1 c1), (Node n0 c2 gv2 = smash a1 a2), (Node n0 c2 gv2 = smash a1 a1), (Node n0 c2 gv2 = smash a1 gv2), (Node n0 c2 gv2 = smash gv2 c2), (Node n0 c2 gv2 = smash gv2 c1), (Node n0 c2 gv2 = smash gv2 a2)
(Node n0 c2 gv2 = smash gv2 a1), (Node n0 c2 gv2 = smash gv2 gv2), (Node n0 c1 c2 = c2), (Node n0 c1 c2 = c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = gv2), (Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c2 a2)
(Node n0 c1 c2 = smash c2 a1), (Node n0 c1 c2 = smash c2 gv2), (Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 gv2), (Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a2 a2)
(Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 gv2), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 gv2), (Node n0 c1 c2 = smash gv2 c2), (Node n0 c1 c2 = smash gv2 c1), (Node n0 c1 c2 = smash gv2 a2)
(Node n0 c1 c2 = smash gv2 a1), (Node n0 c1 c2 = smash gv2 gv2), (Node n0 c1 c1 = c2), (Node n0 c1 c1 = c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = gv2), (Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c2 a2)
(Node n0 c1 c1 = smash c2 a1), (Node n0 c1 c1 = smash c2 gv2), (Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 gv2), (Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a2 a2)
(Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 gv2), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 gv2), (Node n0 c1 c1 = smash gv2 c2), (Node n0 c1 c1 = smash gv2 c1), (Node n0 c1 c1 = smash gv2 a2)
(Node n0 c1 c1 = smash gv2 a1), (Node n0 c1 c1 = smash gv2 gv2), (Node n0 c1 a2 = c2), (Node n0 c1 a2 = c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = gv2), (Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c2 a2)
(Node n0 c1 a2 = smash c2 a1), (Node n0 c1 a2 = smash c2 gv2), (Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 gv2), (Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a2 a2)
(Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 gv2), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 gv2), (Node n0 c1 a2 = smash gv2 c2), (Node n0 c1 a2 = smash gv2 c1), (Node n0 c1 a2 = smash gv2 a2)
(Node n0 c1 a2 = smash gv2 a1), (Node n0 c1 a2 = smash gv2 gv2), (Node n0 c1 a1 = c2), (Node n0 c1 a1 = c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = gv2), (Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c2 a2)
(Node n0 c1 a1 = smash c2 a1), (Node n0 c1 a1 = smash c2 gv2), (Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 gv2), (Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a2 a2)
(Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 gv2), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 gv2), (Node n0 c1 a1 = smash gv2 c2), (Node n0 c1 a1 = smash gv2 c1), (Node n0 c1 a1 = smash gv2 a2)
(Node n0 c1 a1 = smash gv2 a1), (Node n0 c1 a1 = smash gv2 gv2), (Node n0 c1 gv2 = c2), (Node n0 c1 gv2 = c1), (Node n0 c1 gv2 = a2), (Node n0 c1 gv2 = a1), (Node n0 c1 gv2 = gv2), (Node n0 c1 gv2 = smash c2 c2), (Node n0 c1 gv2 = smash c2 c1), (Node n0 c1 gv2 = smash c2 a2)
(Node n0 c1 gv2 = smash c2 a1), (Node n0 c1 gv2 = smash c2 gv2), (Node n0 c1 gv2 = smash c1 c2), (Node n0 c1 gv2 = smash c1 c1), (Node n0 c1 gv2 = smash c1 a2), (Node n0 c1 gv2 = smash c1 a1), (Node n0 c1 gv2 = smash c1 gv2), (Node n0 c1 gv2 = smash a2 c2), (Node n0 c1 gv2 = smash a2 c1), (Node n0 c1 gv2 = smash a2 a2)
(Node n0 c1 gv2 = smash a2 a1), (Node n0 c1 gv2 = smash a2 gv2), (Node n0 c1 gv2 = smash a1 c2), (Node n0 c1 gv2 = smash a1 c1), (Node n0 c1 gv2 = smash a1 a2), (Node n0 c1 gv2 = smash a1 a1), (Node n0 c1 gv2 = smash a1 gv2), (Node n0 c1 gv2 = smash gv2 c2), (Node n0 c1 gv2 = smash gv2 c1), (Node n0 c1 gv2 = smash gv2 a2)
(Node n0 c1 gv2 = smash gv2 a1), (Node n0 c1 gv2 = smash gv2 gv2), (Node n0 a2 c2 = c2), (Node n0 a2 c2 = c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = gv2), (Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c2 a2)
(Node n0 a2 c2 = smash c2 a1), (Node n0 a2 c2 = smash c2 gv2), (Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 gv2), (Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a2 a2)
(Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 gv2), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 gv2), (Node n0 a2 c2 = smash gv2 c2), (Node n0 a2 c2 = smash gv2 c1), (Node n0 a2 c2 = smash gv2 a2)
(Node n0 a2 c2 = smash gv2 a1), (Node n0 a2 c2 = smash gv2 gv2), (Node n0 a2 c1 = c2), (Node n0 a2 c1 = c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = gv2), (Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c2 a2)
(Node n0 a2 c1 = smash c2 a1), (Node n0 a2 c1 = smash c2 gv2), (Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 gv2), (Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a2 a2)
(Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 gv2), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 gv2), (Node n0 a2 c1 = smash gv2 c2), (Node n0 a2 c1 = smash gv2 c1), (Node n0 a2 c1 = smash gv2 a2)
(Node n0 a2 c1 = smash gv2 a1), (Node n0 a2 c1 = smash gv2 gv2), (Node n0 a2 a2 = c2), (Node n0 a2 a2 = c1), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = gv2), (Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c2 a2)
(Node n0 a2 a2 = smash c2 a1), (Node n0 a2 a2 = smash c2 gv2), (Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 gv2), (Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a2 a2)
(Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 gv2), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 gv2), (Node n0 a2 a2 = smash gv2 c2), (Node n0 a2 a2 = smash gv2 c1), (Node n0 a2 a2 = smash gv2 a2)
(Node n0 a2 a2 = smash gv2 a1), (Node n0 a2 a2 = smash gv2 gv2), (Node n0 a2 a1 = c2), (Node n0 a2 a1 = c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = gv2), (Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c2 a2)
(Node n0 a2 a1 = smash c2 a1), (Node n0 a2 a1 = smash c2 gv2), (Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 gv2), (Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a2 a2)
(Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 gv2), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 gv2), (Node n0 a2 a1 = smash gv2 c2), (Node n0 a2 a1 = smash gv2 c1), (Node n0 a2 a1 = smash gv2 a2)
(Node n0 a2 a1 = smash gv2 a1), (Node n0 a2 a1 = smash gv2 gv2), (Node n0 a2 gv2 = c2), (Node n0 a2 gv2 = c1), (Node n0 a2 gv2 = a2), (Node n0 a2 gv2 = a1), (Node n0 a2 gv2 = gv2), (Node n0 a2 gv2 = smash c2 c2), (Node n0 a2 gv2 = smash c2 c1), (Node n0 a2 gv2 = smash c2 a2)
(Node n0 a2 gv2 = smash c2 a1), (Node n0 a2 gv2 = smash c2 gv2), (Node n0 a2 gv2 = smash c1 c2), (Node n0 a2 gv2 = smash c1 c1), (Node n0 a2 gv2 = smash c1 a2), (Node n0 a2 gv2 = smash c1 a1), (Node n0 a2 gv2 = smash c1 gv2), (Node n0 a2 gv2 = smash a2 c2), (Node n0 a2 gv2 = smash a2 c1), (Node n0 a2 gv2 = smash a2 a2)
(Node n0 a2 gv2 = smash a2 a1), (Node n0 a2 gv2 = smash a2 gv2), (Node n0 a2 gv2 = smash a1 c2), (Node n0 a2 gv2 = smash a1 c1), (Node n0 a2 gv2 = smash a1 a2), (Node n0 a2 gv2 = smash a1 a1), (Node n0 a2 gv2 = smash a1 gv2), (Node n0 a2 gv2 = smash gv2 c2), (Node n0 a2 gv2 = smash gv2 c1), (Node n0 a2 gv2 = smash gv2 a2)
(Node n0 a2 gv2 = smash gv2 a1), (Node n0 a2 gv2 = smash gv2 gv2), (Node n0 a1 c2 = c2), (Node n0 a1 c2 = c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = gv2), (Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c2 a2)
(Node n0 a1 c2 = smash c2 a1), (Node n0 a1 c2 = smash c2 gv2), (Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 gv2), (Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a2 a2)
(Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 gv2), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 gv2), (Node n0 a1 c2 = smash gv2 c2), (Node n0 a1 c2 = smash gv2 c1), (Node n0 a1 c2 = smash gv2 a2)
(Node n0 a1 c2 = smash gv2 a1), (Node n0 a1 c2 = smash gv2 gv2), (Node n0 a1 c1 = c2), (Node n0 a1 c1 = c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = gv2), (Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c2 a2)
(Node n0 a1 c1 = smash c2 a1), (Node n0 a1 c1 = smash c2 gv2), (Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 gv2), (Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a2 a2)
(Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 gv2), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 gv2), (Node n0 a1 c1 = smash gv2 c2), (Node n0 a1 c1 = smash gv2 c1), (Node n0 a1 c1 = smash gv2 a2)
(Node n0 a1 c1 = smash gv2 a1), (Node n0 a1 c1 = smash gv2 gv2), (Node n0 a1 a2 = c2), (Node n0 a1 a2 = c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = gv2), (Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c2 a2)
(Node n0 a1 a2 = smash c2 a1), (Node n0 a1 a2 = smash c2 gv2), (Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 gv2), (Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a2 a2)
(Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 gv2), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 gv2), (Node n0 a1 a2 = smash gv2 c2), (Node n0 a1 a2 = smash gv2 c1), (Node n0 a1 a2 = smash gv2 a2)
(Node n0 a1 a2 = smash gv2 a1), (Node n0 a1 a2 = smash gv2 gv2), (Node n0 a1 a1 = c2), (Node n0 a1 a1 = c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = gv2), (Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c2 a2)
(Node n0 a1 a1 = smash c2 a1), (Node n0 a1 a1 = smash c2 gv2), (Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 gv2), (Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a2 a2)
(Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 gv2), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 gv2), (Node n0 a1 a1 = smash gv2 c2), (Node n0 a1 a1 = smash gv2 c1), (Node n0 a1 a1 = smash gv2 a2)
(Node n0 a1 a1 = smash gv2 a1), (Node n0 a1 a1 = smash gv2 gv2), (Node n0 a1 gv2 = c2), (Node n0 a1 gv2 = c1), (Node n0 a1 gv2 = a2), (Node n0 a1 gv2 = a1), (Node n0 a1 gv2 = gv2), (Node n0 a1 gv2 = smash c2 c2), (Node n0 a1 gv2 = smash c2 c1), (Node n0 a1 gv2 = smash c2 a2)
(Node n0 a1 gv2 = smash c2 a1), (Node n0 a1 gv2 = smash c2 gv2), (Node n0 a1 gv2 = smash c1 c2), (Node n0 a1 gv2 = smash c1 c1), (Node n0 a1 gv2 = smash c1 a2), (Node n0 a1 gv2 = smash c1 a1), (Node n0 a1 gv2 = smash c1 gv2), (Node n0 a1 gv2 = smash a2 c2), (Node n0 a1 gv2 = smash a2 c1), (Node n0 a1 gv2 = smash a2 a2)
(Node n0 a1 gv2 = smash a2 a1), (Node n0 a1 gv2 = smash a2 gv2), (Node n0 a1 gv2 = smash a1 c2), (Node n0 a1 gv2 = smash a1 c1), (Node n0 a1 gv2 = smash a1 a2), (Node n0 a1 gv2 = smash a1 a1), (Node n0 a1 gv2 = smash a1 gv2), (Node n0 a1 gv2 = smash gv2 c2), (Node n0 a1 gv2 = smash gv2 c1), (Node n0 a1 gv2 = smash gv2 a2)
(Node n0 a1 gv2 = smash gv2 a1), (Node n0 a1 gv2 = smash gv2 gv2), (Node n0 gv2 c2 = c2), (Node n0 gv2 c2 = c1), (Node n0 gv2 c2 = a2), (Node n0 gv2 c2 = a1), (Node n0 gv2 c2 = gv2), (Node n0 gv2 c2 = smash c2 c2), (Node n0 gv2 c2 = smash c2 c1), (Node n0 gv2 c2 = smash c2 a2)
(Node n0 gv2 c2 = smash c2 a1), (Node n0 gv2 c2 = smash c2 gv2), (Node n0 gv2 c2 = smash c1 c2), (Node n0 gv2 c2 = smash c1 c1), (Node n0 gv2 c2 = smash c1 a2), (Node n0 gv2 c2 = smash c1 a1), (Node n0 gv2 c2 = smash c1 gv2), (Node n0 gv2 c2 = smash a2 c2), (Node n0 gv2 c2 = smash a2 c1), (Node n0 gv2 c2 = smash a2 a2)
(Node n0 gv2 c2 = smash a2 a1), (Node n0 gv2 c2 = smash a2 gv2), (Node n0 gv2 c2 = smash a1 c2), (Node n0 gv2 c2 = smash a1 c1), (Node n0 gv2 c2 = smash a1 a2), (Node n0 gv2 c2 = smash a1 a1), (Node n0 gv2 c2 = smash a1 gv2), (Node n0 gv2 c2 = smash gv2 c2), (Node n0 gv2 c2 = smash gv2 c1), (Node n0 gv2 c2 = smash gv2 a2)
(Node n0 gv2 c2 = smash gv2 a1), (Node n0 gv2 c2 = smash gv2 gv2), (Node n0 gv2 c1 = c2), (Node n0 gv2 c1 = c1), (Node n0 gv2 c1 = a2), (Node n0 gv2 c1 = a1), (Node n0 gv2 c1 = gv2), (Node n0 gv2 c1 = smash c2 c2), (Node n0 gv2 c1 = smash c2 c1), (Node n0 gv2 c1 = smash c2 a2)
(Node n0 gv2 c1 = smash c2 a1), (Node n0 gv2 c1 = smash c2 gv2), (Node n0 gv2 c1 = smash c1 c2), (Node n0 gv2 c1 = smash c1 c1), (Node n0 gv2 c1 = smash c1 a2), (Node n0 gv2 c1 = smash c1 a1), (Node n0 gv2 c1 = smash c1 gv2), (Node n0 gv2 c1 = smash a2 c2), (Node n0 gv2 c1 = smash a2 c1), (Node n0 gv2 c1 = smash a2 a2)
(Node n0 gv2 c1 = smash a2 a1), (Node n0 gv2 c1 = smash a2 gv2), (Node n0 gv2 c1 = smash a1 c2), (Node n0 gv2 c1 = smash a1 c1), (Node n0 gv2 c1 = smash a1 a2), (Node n0 gv2 c1 = smash a1 a1), (Node n0 gv2 c1 = smash a1 gv2), (Node n0 gv2 c1 = smash gv2 c2), (Node n0 gv2 c1 = smash gv2 c1), (Node n0 gv2 c1 = smash gv2 a2)
(Node n0 gv2 c1 = smash gv2 a1), (Node n0 gv2 c1 = smash gv2 gv2), (Node n0 gv2 a2 = c2), (Node n0 gv2 a2 = c1), (Node n0 gv2 a2 = a2), (Node n0 gv2 a2 = a1), (Node n0 gv2 a2 = gv2), (Node n0 gv2 a2 = smash c2 c2), (Node n0 gv2 a2 = smash c2 c1), (Node n0 gv2 a2 = smash c2 a2)
(Node n0 gv2 a2 = smash c2 a1), (Node n0 gv2 a2 = smash c2 gv2), (Node n0 gv2 a2 = smash c1 c2), (Node n0 gv2 a2 = smash c1 c1), (Node n0 gv2 a2 = smash c1 a2), (Node n0 gv2 a2 = smash c1 a1), (Node n0 gv2 a2 = smash c1 gv2), (Node n0 gv2 a2 = smash a2 c2), (Node n0 gv2 a2 = smash a2 c1), (Node n0 gv2 a2 = smash a2 a2)
(Node n0 gv2 a2 = smash a2 a1), (Node n0 gv2 a2 = smash a2 gv2), (Node n0 gv2 a2 = smash a1 c2), (Node n0 gv2 a2 = smash a1 c1), (Node n0 gv2 a2 = smash a1 a2), (Node n0 gv2 a2 = smash a1 a1), (Node n0 gv2 a2 = smash a1 gv2), (Node n0 gv2 a2 = smash gv2 c2), (Node n0 gv2 a2 = smash gv2 c1), (Node n0 gv2 a2 = smash gv2 a2)
(Node n0 gv2 a2 = smash gv2 a1), (Node n0 gv2 a2 = smash gv2 gv2), (Node n0 gv2 a1 = c2), (Node n0 gv2 a1 = c1), (Node n0 gv2 a1 = a2), (Node n0 gv2 a1 = a1), (Node n0 gv2 a1 = gv2), (Node n0 gv2 a1 = smash c2 c2), (Node n0 gv2 a1 = smash c2 c1), (Node n0 gv2 a1 = smash c2 a2)
(Node n0 gv2 a1 = smash c2 a1), (Node n0 gv2 a1 = smash c2 gv2), (Node n0 gv2 a1 = smash c1 c2), (Node n0 gv2 a1 = smash c1 c1), (Node n0 gv2 a1 = smash c1 a2), (Node n0 gv2 a1 = smash c1 a1), (Node n0 gv2 a1 = smash c1 gv2), (Node n0 gv2 a1 = smash a2 c2), (Node n0 gv2 a1 = smash a2 c1), (Node n0 gv2 a1 = smash a2 a2)
(Node n0 gv2 a1 = smash a2 a1), (Node n0 gv2 a1 = smash a2 gv2), (Node n0 gv2 a1 = smash a1 c2), (Node n0 gv2 a1 = smash a1 c1), (Node n0 gv2 a1 = smash a1 a2), (Node n0 gv2 a1 = smash a1 a1), (Node n0 gv2 a1 = smash a1 gv2), (Node n0 gv2 a1 = smash gv2 c2), (Node n0 gv2 a1 = smash gv2 c1), (Node n0 gv2 a1 = smash gv2 a2)
(Node n0 gv2 a1 = smash gv2 a1), (Node n0 gv2 a1 = smash gv2 gv2), (Node n0 gv2 gv2 = c2), (Node n0 gv2 gv2 = c1), (Node n0 gv2 gv2 = a2), (Node n0 gv2 gv2 = a1), (Node n0 gv2 gv2 = gv2), (Node n0 gv2 gv2 = smash c2 c2), (Node n0 gv2 gv2 = smash c2 c1), (Node n0 gv2 gv2 = smash c2 a2)
(Node n0 gv2 gv2 = smash c2 a1), (Node n0 gv2 gv2 = smash c2 gv2), (Node n0 gv2 gv2 = smash c1 c2), (Node n0 gv2 gv2 = smash c1 c1), (Node n0 gv2 gv2 = smash c1 a2), (Node n0 gv2 gv2 = smash c1 a1), (Node n0 gv2 gv2 = smash c1 gv2), (Node n0 gv2 gv2 = smash a2 c2), (Node n0 gv2 gv2 = smash a2 c1), (Node n0 gv2 gv2 = smash a2 a2)
(Node n0 gv2 gv2 = smash a2 a1), (Node n0 gv2 gv2 = smash a2 gv2), (Node n0 gv2 gv2 = smash a1 c2), (Node n0 gv2 gv2 = smash a1 c1), (Node n0 gv2 gv2 = smash a1 a2), (Node n0 gv2 gv2 = smash a1 a1), (Node n0 gv2 gv2 = smash a1 gv2), (Node n0 gv2 gv2 = smash gv2 c2), (Node n0 gv2 gv2 = smash gv2 c1), (Node n0 gv2 gv2 = smash gv2 a2)
(Node n0 gv2 gv2 = smash gv2 a1), (Node n0 gv2 gv2 = smash gv2 gv2), (Node n c2 c2 = c2), (Node n c2 c2 = c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = gv2), (Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c2 a2)
(Node n c2 c2 = smash c2 a1), (Node n c2 c2 = smash c2 gv2), (Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 gv2), (Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a2 a2)
(Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 gv2), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 gv2), (Node n c2 c2 = smash gv2 c2), (Node n c2 c2 = smash gv2 c1), (Node n c2 c2 = smash gv2 a2)
(Node n c2 c2 = smash gv2 a1), (Node n c2 c2 = smash gv2 gv2), (Node n c2 c1 = c2), (Node n c2 c1 = c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = gv2), (Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c2 a2)
(Node n c2 c1 = smash c2 a1), (Node n c2 c1 = smash c2 gv2), (Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 gv2), (Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a2 a2)
(Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 gv2), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 gv2), (Node n c2 c1 = smash gv2 c2), (Node n c2 c1 = smash gv2 c1), (Node n c2 c1 = smash gv2 a2)
(Node n c2 c1 = smash gv2 a1), (Node n c2 c1 = smash gv2 gv2), (Node n c2 a2 = c2), (Node n c2 a2 = c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = gv2), (Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c2 a2)
(Node n c2 a2 = smash c2 a1), (Node n c2 a2 = smash c2 gv2), (Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 gv2), (Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a2 a2)
(Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 gv2), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 gv2), (Node n c2 a2 = smash gv2 c2), (Node n c2 a2 = smash gv2 c1), (Node n c2 a2 = smash gv2 a2)
(Node n c2 a2 = smash gv2 a1), (Node n c2 a2 = smash gv2 gv2), (Node n c2 a1 = c2), (Node n c2 a1 = c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = gv2), (Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c2 a2)
(Node n c2 a1 = smash c2 a1), (Node n c2 a1 = smash c2 gv2), (Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 gv2), (Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a2 a2)
(Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 gv2), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 gv2), (Node n c2 a1 = smash gv2 c2), (Node n c2 a1 = smash gv2 c1), (Node n c2 a1 = smash gv2 a2)
(Node n c2 a1 = smash gv2 a1), (Node n c2 a1 = smash gv2 gv2), (Node n c2 gv2 = c2), (Node n c2 gv2 = c1), (Node n c2 gv2 = a2), (Node n c2 gv2 = a1), (Node n c2 gv2 = gv2), (Node n c2 gv2 = smash c2 c2), (Node n c2 gv2 = smash c2 c1), (Node n c2 gv2 = smash c2 a2)
(Node n c2 gv2 = smash c2 a1), (Node n c2 gv2 = smash c2 gv2), (Node n c2 gv2 = smash c1 c2), (Node n c2 gv2 = smash c1 c1), (Node n c2 gv2 = smash c1 a2), (Node n c2 gv2 = smash c1 a1), (Node n c2 gv2 = smash c1 gv2), (Node n c2 gv2 = smash a2 c2), (Node n c2 gv2 = smash a2 c1), (Node n c2 gv2 = smash a2 a2)
(Node n c2 gv2 = smash a2 a1), (Node n c2 gv2 = smash a2 gv2), (Node n c2 gv2 = smash a1 c2), (Node n c2 gv2 = smash a1 c1), (Node n c2 gv2 = smash a1 a2), (Node n c2 gv2 = smash a1 a1), (Node n c2 gv2 = smash a1 gv2), (Node n c2 gv2 = smash gv2 c2), (Node n c2 gv2 = smash gv2 c1), (Node n c2 gv2 = smash gv2 a2)
(Node n c2 gv2 = smash gv2 a1), (Node n c2 gv2 = smash gv2 gv2), (Node n c1 c2 = c2), (Node n c1 c2 = c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = gv2), (Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c2 a2)
(Node n c1 c2 = smash c2 a1), (Node n c1 c2 = smash c2 gv2), (Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 gv2), (Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a2 a2)
(Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 gv2), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 gv2), (Node n c1 c2 = smash gv2 c2), (Node n c1 c2 = smash gv2 c1), (Node n c1 c2 = smash gv2 a2)
(Node n c1 c2 = smash gv2 a1), (Node n c1 c2 = smash gv2 gv2), (Node n c1 c1 = c2), (Node n c1 c1 = c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = gv2), (Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c2 a2)
(Node n c1 c1 = smash c2 a1), (Node n c1 c1 = smash c2 gv2), (Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 gv2), (Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a2 a2)
(Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 gv2), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 gv2), (Node n c1 c1 = smash gv2 c2), (Node n c1 c1 = smash gv2 c1), (Node n c1 c1 = smash gv2 a2)
(Node n c1 c1 = smash gv2 a1), (Node n c1 c1 = smash gv2 gv2), (Node n c1 a2 = c2), (Node n c1 a2 = c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = gv2), (Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c2 a2)
(Node n c1 a2 = smash c2 a1), (Node n c1 a2 = smash c2 gv2), (Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 gv2), (Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a2 a2)
(Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 gv2), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 gv2), (Node n c1 a2 = smash gv2 c2), (Node n c1 a2 = smash gv2 c1), (Node n c1 a2 = smash gv2 a2)
(Node n c1 a2 = smash gv2 a1), (Node n c1 a2 = smash gv2 gv2), (Node n c1 a1 = c2), (Node n c1 a1 = c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = gv2), (Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c2 a2)
(Node n c1 a1 = smash c2 a1), (Node n c1 a1 = smash c2 gv2), (Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 gv2), (Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a2 a2)
(Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 gv2), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 gv2), (Node n c1 a1 = smash gv2 c2), (Node n c1 a1 = smash gv2 c1), (Node n c1 a1 = smash gv2 a2)
(Node n c1 a1 = smash gv2 a1), (Node n c1 a1 = smash gv2 gv2), (Node n c1 gv2 = c2), (Node n c1 gv2 = c1), (Node n c1 gv2 = a2), (Node n c1 gv2 = a1), (Node n c1 gv2 = gv2), (Node n c1 gv2 = smash c2 c2), (Node n c1 gv2 = smash c2 c1), (Node n c1 gv2 = smash c2 a2)
(Node n c1 gv2 = smash c2 a1), (Node n c1 gv2 = smash c2 gv2), (Node n c1 gv2 = smash c1 c2), (Node n c1 gv2 = smash c1 c1), (Node n c1 gv2 = smash c1 a2), (Node n c1 gv2 = smash c1 a1), (Node n c1 gv2 = smash c1 gv2), (Node n c1 gv2 = smash a2 c2), (Node n c1 gv2 = smash a2 c1), (Node n c1 gv2 = smash a2 a2)
(Node n c1 gv2 = smash a2 a1), (Node n c1 gv2 = smash a2 gv2), (Node n c1 gv2 = smash a1 c2), (Node n c1 gv2 = smash a1 c1), (Node n c1 gv2 = smash a1 a2), (Node n c1 gv2 = smash a1 a1), (Node n c1 gv2 = smash a1 gv2), (Node n c1 gv2 = smash gv2 c2), (Node n c1 gv2 = smash gv2 c1), (Node n c1 gv2 = smash gv2 a2)
(Node n c1 gv2 = smash gv2 a1), (Node n c1 gv2 = smash gv2 gv2), (Node n a2 c2 = c2), (Node n a2 c2 = c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = gv2), (Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c2 a2)
(Node n a2 c2 = smash c2 a1), (Node n a2 c2 = smash c2 gv2), (Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 gv2), (Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a2 a2)
(Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 gv2), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 gv2), (Node n a2 c2 = smash gv2 c2), (Node n a2 c2 = smash gv2 c1), (Node n a2 c2 = smash gv2 a2)
(Node n a2 c2 = smash gv2 a1), (Node n a2 c2 = smash gv2 gv2), (Node n a2 c1 = c2), (Node n a2 c1 = c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = gv2), (Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c2 a2)
(Node n a2 c1 = smash c2 a1), (Node n a2 c1 = smash c2 gv2), (Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 gv2), (Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a2 a2)
(Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 gv2), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 gv2), (Node n a2 c1 = smash gv2 c2), (Node n a2 c1 = smash gv2 c1), (Node n a2 c1 = smash gv2 a2)
(Node n a2 c1 = smash gv2 a1), (Node n a2 c1 = smash gv2 gv2), (Node n a2 a2 = c2), (Node n a2 a2 = c1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv2), (Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c2 a2)
(Node n a2 a2 = smash c2 a1), (Node n a2 a2 = smash c2 gv2), (Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 gv2), (Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a2 a2)
(Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv2), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv2), (Node n a2 a2 = smash gv2 c2), (Node n a2 a2 = smash gv2 c1), (Node n a2 a2 = smash gv2 a2)
(Node n a2 a2 = smash gv2 a1), (Node n a2 a2 = smash gv2 gv2), (Node n a2 a1 = c2), (Node n a2 a1 = c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv2), (Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c2 a2)
(Node n a2 a1 = smash c2 a1), (Node n a2 a1 = smash c2 gv2), (Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 gv2), (Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a2 a2)
(Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv2), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv2), (Node n a2 a1 = smash gv2 c2), (Node n a2 a1 = smash gv2 c1), (Node n a2 a1 = smash gv2 a2)
(Node n a2 a1 = smash gv2 a1), (Node n a2 a1 = smash gv2 gv2), (Node n a2 gv2 = c2), (Node n a2 gv2 = c1), (Node n a2 gv2 = a2), (Node n a2 gv2 = a1), (Node n a2 gv2 = gv2), (Node n a2 gv2 = smash c2 c2), (Node n a2 gv2 = smash c2 c1), (Node n a2 gv2 = smash c2 a2)
(Node n a2 gv2 = smash c2 a1), (Node n a2 gv2 = smash c2 gv2), (Node n a2 gv2 = smash c1 c2), (Node n a2 gv2 = smash c1 c1), (Node n a2 gv2 = smash c1 a2), (Node n a2 gv2 = smash c1 a1), (Node n a2 gv2 = smash c1 gv2), (Node n a2 gv2 = smash a2 c2), (Node n a2 gv2 = smash a2 c1), (Node n a2 gv2 = smash a2 a2)
(Node n a2 gv2 = smash a2 a1), (Node n a2 gv2 = smash a2 gv2), (Node n a2 gv2 = smash a1 c2), (Node n a2 gv2 = smash a1 c1), (Node n a2 gv2 = smash a1 a2), (Node n a2 gv2 = smash a1 a1), (Node n a2 gv2 = smash a1 gv2), (Node n a2 gv2 = smash gv2 c2), (Node n a2 gv2 = smash gv2 c1), (Node n a2 gv2 = smash gv2 a2)
(Node n a2 gv2 = smash gv2 a1), (Node n a2 gv2 = smash gv2 gv2), (Node n a1 c2 = c2), (Node n a1 c2 = c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = gv2), (Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c2 a2)
(Node n a1 c2 = smash c2 a1), (Node n a1 c2 = smash c2 gv2), (Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 gv2), (Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a2 a2)
(Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 gv2), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 gv2), (Node n a1 c2 = smash gv2 c2), (Node n a1 c2 = smash gv2 c1), (Node n a1 c2 = smash gv2 a2)
(Node n a1 c2 = smash gv2 a1), (Node n a1 c2 = smash gv2 gv2), (Node n a1 c1 = c2), (Node n a1 c1 = c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = gv2), (Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c2 a2)
(Node n a1 c1 = smash c2 a1), (Node n a1 c1 = smash c2 gv2), (Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 gv2), (Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a2 a2)
(Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 gv2), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 gv2), (Node n a1 c1 = smash gv2 c2), (Node n a1 c1 = smash gv2 c1), (Node n a1 c1 = smash gv2 a2)
(Node n a1 c1 = smash gv2 a1), (Node n a1 c1 = smash gv2 gv2), (Node n a1 a2 = c2), (Node n a1 a2 = c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv2), (Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c2 a2)
(Node n a1 a2 = smash c2 a1), (Node n a1 a2 = smash c2 gv2), (Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 gv2), (Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv2), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv2), (Node n a1 a2 = smash gv2 c2), (Node n a1 a2 = smash gv2 c1), (Node n a1 a2 = smash gv2 a2)
(Node n a1 a2 = smash gv2 a1), (Node n a1 a2 = smash gv2 gv2), (Node n a1 a1 = c2), (Node n a1 a1 = c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv2), (Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c2 a2)
(Node n a1 a1 = smash c2 a1), (Node n a1 a1 = smash c2 gv2), (Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 gv2), (Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a2 a2)
(Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv2), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv2), (Node n a1 a1 = smash gv2 c2), (Node n a1 a1 = smash gv2 c1), (Node n a1 a1 = smash gv2 a2)
(Node n a1 a1 = smash gv2 a1), (Node n a1 a1 = smash gv2 gv2), (Node n a1 gv2 = c2), (Node n a1 gv2 = c1), (Node n a1 gv2 = a2), (Node n a1 gv2 = a1), (Node n a1 gv2 = gv2), (Node n a1 gv2 = smash c2 c2), (Node n a1 gv2 = smash c2 c1), (Node n a1 gv2 = smash c2 a2)
(Node n a1 gv2 = smash c2 a1), (Node n a1 gv2 = smash c2 gv2), (Node n a1 gv2 = smash c1 c2), (Node n a1 gv2 = smash c1 c1), (Node n a1 gv2 = smash c1 a2), (Node n a1 gv2 = smash c1 a1), (Node n a1 gv2 = smash c1 gv2), (Node n a1 gv2 = smash a2 c2), (Node n a1 gv2 = smash a2 c1), (Node n a1 gv2 = smash a2 a2)
(Node n a1 gv2 = smash a2 a1), (Node n a1 gv2 = smash a2 gv2), (Node n a1 gv2 = smash a1 c2), (Node n a1 gv2 = smash a1 c1), (Node n a1 gv2 = smash a1 a2), (Node n a1 gv2 = smash a1 a1), (Node n a1 gv2 = smash a1 gv2), (Node n a1 gv2 = smash gv2 c2), (Node n a1 gv2 = smash gv2 c1), (Node n a1 gv2 = smash gv2 a2)
(Node n a1 gv2 = smash gv2 a1), (Node n a1 gv2 = smash gv2 gv2), (Node n gv2 c2 = c2), (Node n gv2 c2 = c1), (Node n gv2 c2 = a2), (Node n gv2 c2 = a1), (Node n gv2 c2 = gv2), (Node n gv2 c2 = smash c2 c2), (Node n gv2 c2 = smash c2 c1), (Node n gv2 c2 = smash c2 a2)
(Node n gv2 c2 = smash c2 a1), (Node n gv2 c2 = smash c2 gv2), (Node n gv2 c2 = smash c1 c2), (Node n gv2 c2 = smash c1 c1), (Node n gv2 c2 = smash c1 a2), (Node n gv2 c2 = smash c1 a1), (Node n gv2 c2 = smash c1 gv2), (Node n gv2 c2 = smash a2 c2), (Node n gv2 c2 = smash a2 c1), (Node n gv2 c2 = smash a2 a2)
(Node n gv2 c2 = smash a2 a1), (Node n gv2 c2 = smash a2 gv2), (Node n gv2 c2 = smash a1 c2), (Node n gv2 c2 = smash a1 c1), (Node n gv2 c2 = smash a1 a2), (Node n gv2 c2 = smash a1 a1), (Node n gv2 c2 = smash a1 gv2), (Node n gv2 c2 = smash gv2 c2), (Node n gv2 c2 = smash gv2 c1), (Node n gv2 c2 = smash gv2 a2)
(Node n gv2 c2 = smash gv2 a1), (Node n gv2 c2 = smash gv2 gv2), (Node n gv2 c1 = c2), (Node n gv2 c1 = c1), (Node n gv2 c1 = a2), (Node n gv2 c1 = a1), (Node n gv2 c1 = gv2), (Node n gv2 c1 = smash c2 c2), (Node n gv2 c1 = smash c2 c1), (Node n gv2 c1 = smash c2 a2)
(Node n gv2 c1 = smash c2 a1), (Node n gv2 c1 = smash c2 gv2), (Node n gv2 c1 = smash c1 c2), (Node n gv2 c1 = smash c1 c1), (Node n gv2 c1 = smash c1 a2), (Node n gv2 c1 = smash c1 a1), (Node n gv2 c1 = smash c1 gv2), (Node n gv2 c1 = smash a2 c2), (Node n gv2 c1 = smash a2 c1), (Node n gv2 c1 = smash a2 a2)
(Node n gv2 c1 = smash a2 a1), (Node n gv2 c1 = smash a2 gv2), (Node n gv2 c1 = smash a1 c2), (Node n gv2 c1 = smash a1 c1), (Node n gv2 c1 = smash a1 a2), (Node n gv2 c1 = smash a1 a1), (Node n gv2 c1 = smash a1 gv2), (Node n gv2 c1 = smash gv2 c2), (Node n gv2 c1 = smash gv2 c1), (Node n gv2 c1 = smash gv2 a2)
(Node n gv2 c1 = smash gv2 a1), (Node n gv2 c1 = smash gv2 gv2), (Node n gv2 a2 = c2), (Node n gv2 a2 = c1), (Node n gv2 a2 = a2), (Node n gv2 a2 = a1), (Node n gv2 a2 = gv2), (Node n gv2 a2 = smash c2 c2), (Node n gv2 a2 = smash c2 c1), (Node n gv2 a2 = smash c2 a2)
(Node n gv2 a2 = smash c2 a1), (Node n gv2 a2 = smash c2 gv2), (Node n gv2 a2 = smash c1 c2), (Node n gv2 a2 = smash c1 c1), (Node n gv2 a2 = smash c1 a2), (Node n gv2 a2 = smash c1 a1), (Node n gv2 a2 = smash c1 gv2), (Node n gv2 a2 = smash a2 c2), (Node n gv2 a2 = smash a2 c1), (Node n gv2 a2 = smash a2 a2)
(Node n gv2 a2 = smash a2 a1), (Node n gv2 a2 = smash a2 gv2), (Node n gv2 a2 = smash a1 c2), (Node n gv2 a2 = smash a1 c1), (Node n gv2 a2 = smash a1 a2), (Node n gv2 a2 = smash a1 a1), (Node n gv2 a2 = smash a1 gv2), (Node n gv2 a2 = smash gv2 c2), (Node n gv2 a2 = smash gv2 c1), (Node n gv2 a2 = smash gv2 a2)
(Node n gv2 a2 = smash gv2 a1), (Node n gv2 a2 = smash gv2 gv2), (Node n gv2 a1 = c2), (Node n gv2 a1 = c1), (Node n gv2 a1 = a2), (Node n gv2 a1 = a1), (Node n gv2 a1 = gv2), (Node n gv2 a1 = smash c2 c2), (Node n gv2 a1 = smash c2 c1), (Node n gv2 a1 = smash c2 a2)
(Node n gv2 a1 = smash c2 a1), (Node n gv2 a1 = smash c2 gv2), (Node n gv2 a1 = smash c1 c2), (Node n gv2 a1 = smash c1 c1), (Node n gv2 a1 = smash c1 a2), (Node n gv2 a1 = smash c1 a1), (Node n gv2 a1 = smash c1 gv2), (Node n gv2 a1 = smash a2 c2), (Node n gv2 a1 = smash a2 c1), (Node n gv2 a1 = smash a2 a2)
(Node n gv2 a1 = smash a2 a1), (Node n gv2 a1 = smash a2 gv2), (Node n gv2 a1 = smash a1 c2), (Node n gv2 a1 = smash a1 c1), (Node n gv2 a1 = smash a1 a2), (Node n gv2 a1 = smash a1 a1), (Node n gv2 a1 = smash a1 gv2), (Node n gv2 a1 = smash gv2 c2), (Node n gv2 a1 = smash gv2 c1), (Node n gv2 a1 = smash gv2 a2)
(Node n gv2 a1 = smash gv2 a1), (Node n gv2 a1 = smash gv2 gv2), (Node n gv2 gv2 = c2), (Node n gv2 gv2 = c1), (Node n gv2 gv2 = a2), (Node n gv2 gv2 = a1), (Node n gv2 gv2 = gv2), (Node n gv2 gv2 = smash c2 c2), (Node n gv2 gv2 = smash c2 c1), (Node n gv2 gv2 = smash c2 a2)
(Node n gv2 gv2 = smash c2 a1), (Node n gv2 gv2 = smash c2 gv2), (Node n gv2 gv2 = smash c1 c2), (Node n gv2 gv2 = smash c1 c1), (Node n gv2 gv2 = smash c1 a2), (Node n gv2 gv2 = smash c1 a1), (Node n gv2 gv2 = smash c1 gv2), (Node n gv2 gv2 = smash a2 c2), (Node n gv2 gv2 = smash a2 c1), (Node n gv2 gv2 = smash a2 a2)
(Node n gv2 gv2 = smash a2 a1), (Node n gv2 gv2 = smash a2 gv2), (Node n gv2 gv2 = smash a1 c2), (Node n gv2 gv2 = smash a1 c1), (Node n gv2 gv2 = smash a1 a2), (Node n gv2 gv2 = smash a1 a1), (Node n gv2 gv2 = smash a1 gv2), (Node n gv2 gv2 = smash gv2 c2), (Node n gv2 gv2 = smash gv2 c1), (Node n gv2 gv2 = smash gv2 a2)
(Node n gv2 gv2 = smash gv2 a1), (Node n gv2 gv2 = smash gv2 gv2), (smash c2 c2 = c2), (smash c2 c2 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = gv2), (smash c2 c1 = c2), (smash c2 c1 = c1), (smash c2 c1 = a2)
(smash c2 c1 = a1), (smash c2 c1 = gv2), (smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a2 = a2), (smash c2 a2 = a1), (smash c2 a2 = gv2), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 a1 = a2)
(smash c2 a1 = a1), (smash c2 a1 = gv2), (smash c2 gv2 = c2), (smash c2 gv2 = c1), (smash c2 gv2 = a2), (smash c2 gv2 = a1), (smash c2 gv2 = gv2), (smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c2 = a2)
(smash c1 c2 = a1), (smash c1 c2 = gv2), (smash c1 c1 = c2), (smash c1 c1 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = gv2), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a2 = a2)
(smash c1 a2 = a1), (smash c1 a2 = gv2), (smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 a1 = a2), (smash c1 a1 = a1), (smash c1 a1 = gv2), (smash c1 gv2 = c2), (smash c1 gv2 = c1), (smash c1 gv2 = a2)
(smash c1 gv2 = a1), (smash c1 gv2 = gv2), (smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = gv2), (smash a2 c1 = c2), (smash a2 c1 = c1), (smash a2 c1 = a2)
(smash a2 c1 = a1), (smash a2 c1 = gv2), (smash a2 a2 = c2), (smash a2 a2 = c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = gv2), (smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 a1 = a2)
(smash a2 a1 = a1), (smash a2 a1 = gv2), (smash a2 gv2 = c2), (smash a2 gv2 = c1), (smash a2 gv2 = a2), (smash a2 gv2 = a1), (smash a2 gv2 = gv2), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c2 = a2)
(smash a1 c2 = a1), (smash a1 c2 = gv2), (smash a1 c1 = c2), (smash a1 c1 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = gv2), (smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a2 = a2)
(smash a1 a2 = a1), (smash a1 a2 = gv2), (smash a1 a1 = c2), (smash a1 a1 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv2), (smash a1 gv2 = c2), (smash a1 gv2 = c1), (smash a1 gv2 = a2)
(smash a1 gv2 = a1), (smash a1 gv2 = gv2), (smash gv2 c2 = c2), (smash gv2 c2 = c1), (smash gv2 c2 = a2), (smash gv2 c2 = a1), (smash gv2 c2 = gv2), (smash gv2 c1 = c2), (smash gv2 c1 = c1), (smash gv2 c1 = a2)
(smash gv2 c1 = a1), (smash gv2 c1 = gv2), (smash gv2 a2 = c2), (smash gv2 a2 = c1), (smash gv2 a2 = a2), (smash gv2 a2 = a1), (smash gv2 a2 = gv2), (smash gv2 a1 = c2), (smash gv2 a1 = c1), (smash gv2 a1 = a2)
(smash gv2 a1 = a1), (smash gv2 a1 = gv2), (smash gv2 gv2 = c2), (smash gv2 gv2 = c1), (smash gv2 gv2 = a2), (smash gv2 gv2 = a1), (smash gv2 gv2 = gv2), (Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c2 a2)
(Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 gv2), (Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1), (Leaf = Node n1 c1 gv2), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1), (Leaf = Node n1 a2 a2)
(Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 gv2), (Leaf = Node n1 a1 c2), (Leaf = Node n1 a1 c1), (Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 gv2), (Leaf = Node n1 gv2 c2), (Leaf = Node n1 gv2 c1), (Leaf = Node n1 gv2 a2)
(Leaf = Node n1 gv2 a1), (Leaf = Node n1 gv2 gv2), (Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1), (Leaf = Node n0 c2 gv2), (Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n0 c1 a2)
(Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 gv2), (Leaf = Node n0 a2 c2), (Leaf = Node n0 a2 c1), (Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 gv2), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 a1 a2)
(Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 gv2), (Leaf = Node n0 gv2 c2), (Leaf = Node n0 gv2 c1), (Leaf = Node n0 gv2 a2), (Leaf = Node n0 gv2 a1), (Leaf = Node n0 gv2 gv2), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c2 a2)
(Leaf = Node n c2 a1), (Leaf = Node n c2 gv2), (Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 gv2), (Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a2 a2)
(Leaf = Node n a2 a1), (Leaf = Node n a2 gv2), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 gv2), (Leaf = Node n gv2 c2), (Leaf = Node n gv2 c1), (Leaf = Node n gv2 a2)
(Leaf = Node n gv2 a1), (Leaf = Node n gv2 gv2), (Leaf = smash c2 c2), (Leaf = smash c2 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 gv2), (Leaf = smash c1 c2), (Leaf = smash c1 c1), (Leaf = smash c1 a2)
(Leaf = smash c1 a1), (Leaf = smash c1 gv2), (Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv2), (Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash a1 a2)
(Leaf = smash a1 a1), (Leaf = smash a1 gv2), (Leaf = smash gv2 c2), (Leaf = smash gv2 c1), (Leaf = smash gv2 a2), (Leaf = smash gv2 a1), (Leaf = smash gv2 gv2), (find_max' n1 p = n1), (find_max' n1 p = n0), (find_max' n1 p = n)
(find_max' n0 p = n1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n p = n1), (find_max' n p = n0), (find_max' n p = n), (length p = n1), (length p = n0), (length p = n), (length p = find_max' n1 p)
(length p = find_max' n0 p), (length p = find_max' n p), (Some n1 = find_max p), (Some n0 = find_max p), (Some n = find_max p), (None = Some n1), (None = Some n0), (None = Some n), (None = find_max p), (None = Some c2)
(None = Some c1), (None = Some a2), (None = Some a1), (None = Some gv2), ((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n0)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n))
((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? n0)), ((n1 >? n1) = (n >=? n)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n)), ((n1 >? n0) = (n >=? n1))
((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n)), ((n1 >? n) = (n1 >=? n1)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? n0)), ((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? n0))
((n1 >? n) = (n >=? n)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n0)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? n0)), ((n0 >? n1) = (n >=? n))
((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n1 >=? n1))
((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n0 >=? n1)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n1)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? n0))
((n >? n1) = (n1 >=? n)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n)), ((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? n0)), ((n >? n1) = (n >=? n)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n))
((n >? n0) = (n0 >=? n1)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n)), ((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? n0)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n0 >=? n1))
((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n1)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))

Label: 5 (5)
(priq p), (priqq n1 p), (priqq n0 p), (priqq n p), (pow2heap n1 c2), (pow2heap n1 c1), (pow2heap n1 a2), (pow2heap n1 a1), (pow2heap n1 gv1), (pow2heap n0 c2)
(pow2heap n0 c1), (pow2heap n0 a2), (pow2heap n0 a1), (pow2heap n0 gv1), (pow2heap n c2), (pow2heap n c1), (pow2heap n a2), (pow2heap n a1), (pow2heap n gv1), (pow2heapp n1 n1 c2)
(pow2heapp n1 n1 c1), (pow2heapp n1 n1 a2), (pow2heapp n1 n1 a1), (pow2heapp n1 n1 gv1), (pow2heapp n1 n0 c2), (pow2heapp n1 n0 c1), (pow2heapp n1 n0 a2), (pow2heapp n1 n0 a1), (pow2heapp n1 n0 gv1), (pow2heapp n1 n c2)
(pow2heapp n1 n c1), (pow2heapp n1 n a2), (pow2heapp n1 n a1), (pow2heapp n1 n gv1), (pow2heapp n0 n1 c2), (pow2heapp n0 n1 c1), (pow2heapp n0 n1 a2), (pow2heapp n0 n1 a1), (pow2heapp n0 n1 gv1), (pow2heapp n0 n0 c2)
(pow2heapp n0 n0 c1), (pow2heapp n0 n0 a2), (pow2heapp n0 n0 a1), (pow2heapp n0 n0 gv1), (pow2heapp n0 n c2), (pow2heapp n0 n c1), (pow2heapp n0 n a2), (pow2heapp n0 n a1), (pow2heapp n0 n gv1), (pow2heapp n n1 c2)
(pow2heapp n n1 c1), (pow2heapp n n1 a2), (pow2heapp n n1 a1), (pow2heapp n n1 gv1), (pow2heapp n n0 c2), (pow2heapp n n0 c1), (pow2heapp n n0 a2), (pow2heapp n n0 a1), (pow2heapp n n0 gv1), (pow2heapp n n c2)
(pow2heapp n n c1), (pow2heapp n n a2), (pow2heapp n n a1), (pow2heapp n n gv1), (Permutation p p), (In c2 p), (In c1 p), (In a2 p), (In a1 p), (In gv1 p)
(n1 < n1), (n1 < n0), (n1 < n), (n0 < n1), (n0 < n0), (n0 < n), (n < n1), (n < n0), (n < n), (n1 <= n1)
(n1 <= n0), (n1 <= n), (n0 <= n1), (n0 <= n0), (n0 <= n), (n <= n1), (n <= n0), (n <= n), (p = p), (c2 = c2)
(c2 = c1), (c2 = a2), (c2 = a1), (c2 = gv1), (c1 = c2), (c1 = c1), (c1 = a2), (c1 = a1), (c1 = gv1), (a2 = c2)
(a2 = c1), (a2 = a2), (a2 = a1), (a2 = gv1), (a1 = c2), (a1 = c1), (a1 = a2), (a1 = a1), (a1 = gv1), (gv1 = c2)
(gv1 = c1), (gv1 = a2), (gv1 = a1), (gv1 = gv1), (n1 = n1), (n1 = n0), (n1 = n), (n0 = n1), (n0 = n0), (n0 = n)
(n = n1), (n = n0), (n = n), (false = (n1 >? n1)), (false = (n1 >? n0)), (false = (n1 >? n)), (false = (n0 >? n1)), (false = (n0 >? n0)), (false = (n0 >? n)), (false = (n >? n1))
(false = (n >? n0)), (false = (n >? n)), (false = (n1 >=? n1)), (false = (n1 >=? n0)), (false = (n1 >=? n)), (false = (n0 >=? n1)), (false = (n0 >=? n0)), (false = (n0 >=? n)), (false = (n >=? n1)), (false = (n >=? n0))
(false = (n >=? n)), (true = (n1 >? n1)), (true = (n1 >? n0)), (true = (n1 >? n)), (true = (n0 >? n1)), (true = (n0 >? n0)), (true = (n0 >? n)), (true = (n >? n1)), (true = (n >? n0)), (true = (n >? n))
(true = (n1 >=? n1)), (true = (n1 >=? n0)), (true = (n1 >=? n)), (true = (n0 >=? n1)), (true = (n0 >=? n0)), (true = (n0 >=? n)), (true = (n >=? n1)), (true = (n >=? n0)), (true = (n >=? n)), (Abs p [])
(Abs (c2 :: p) []), (Abs (c1 :: p) []), (Abs (a2 :: p) []), (Abs (a1 :: p) []), (Abs (gv1 :: p) []), (Abs (merge p p) []), (Abs (heap_delete_max c2) []), (Abs (heap_delete_max c1) []), (Abs (heap_delete_max a2) []), (Abs (heap_delete_max a1) [])
(Abs (heap_delete_max gv1) []), (Abs (join p p c2) []), (Abs (join p p c1) []), (Abs (join p p a2) []), (Abs (join p p a1) []), (Abs (join p p gv1) []), (Abs (insert n1 p) []), (Abs (insert n0 p) []), (Abs (insert n p) []), (Abs (carry p c2) [])
(Abs (carry p c1) []), (Abs (carry p a2) []), (Abs (carry p a1) []), (Abs (carry p gv1) []), (Abs (p ++ p) []), (Abs [] []), (priqueue_elems p []), (priqueue_elems (c2 :: p) []), (priqueue_elems (c1 :: p) []), (priqueue_elems (a2 :: p) [])
(priqueue_elems (a1 :: p) []), (priqueue_elems (gv1 :: p) []), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max c2) []), (priqueue_elems (heap_delete_max c1) []), (priqueue_elems (heap_delete_max a2) []), (priqueue_elems (heap_delete_max a1) []), (priqueue_elems (heap_delete_max gv1) []), (priqueue_elems (join p p c2) []), (priqueue_elems (join p p c1) [])
(priqueue_elems (join p p a2) []), (priqueue_elems (join p p a1) []), (priqueue_elems (join p p gv1) []), (priqueue_elems (insert n1 p) []), (priqueue_elems (insert n0 p) []), (priqueue_elems (insert n p) []), (priqueue_elems (carry p c2) []), (priqueue_elems (carry p c1) []), (priqueue_elems (carry p a2) []), (priqueue_elems (carry p a1) [])
(priqueue_elems (carry p gv1) []), (priqueue_elems (p ++ p) []), (priqueue_elems [] []), (tree_elems c2 []), (tree_elems c1 []), (tree_elems a2 []), (tree_elems a1 []), (tree_elems gv1 []), (tree_elems (Node n1 c2 c2) []), (tree_elems (Node n1 c2 c1) [])
(tree_elems (Node n1 c2 a2) []), (tree_elems (Node n1 c2 a1) []), (tree_elems (Node n1 c2 gv1) []), (tree_elems (Node n1 c1 c2) []), (tree_elems (Node n1 c1 c1) []), (tree_elems (Node n1 c1 a2) []), (tree_elems (Node n1 c1 a1) []), (tree_elems (Node n1 c1 gv1) []), (tree_elems (Node n1 a2 c2) []), (tree_elems (Node n1 a2 c1) [])
(tree_elems (Node n1 a2 a2) []), (tree_elems (Node n1 a2 a1) []), (tree_elems (Node n1 a2 gv1) []), (tree_elems (Node n1 a1 c2) []), (tree_elems (Node n1 a1 c1) []), (tree_elems (Node n1 a1 a2) []), (tree_elems (Node n1 a1 a1) []), (tree_elems (Node n1 a1 gv1) []), (tree_elems (Node n1 gv1 c2) []), (tree_elems (Node n1 gv1 c1) [])
(tree_elems (Node n1 gv1 a2) []), (tree_elems (Node n1 gv1 a1) []), (tree_elems (Node n1 gv1 gv1) []), (tree_elems (Node n0 c2 c2) []), (tree_elems (Node n0 c2 c1) []), (tree_elems (Node n0 c2 a2) []), (tree_elems (Node n0 c2 a1) []), (tree_elems (Node n0 c2 gv1) []), (tree_elems (Node n0 c1 c2) []), (tree_elems (Node n0 c1 c1) [])
(tree_elems (Node n0 c1 a2) []), (tree_elems (Node n0 c1 a1) []), (tree_elems (Node n0 c1 gv1) []), (tree_elems (Node n0 a2 c2) []), (tree_elems (Node n0 a2 c1) []), (tree_elems (Node n0 a2 a2) []), (tree_elems (Node n0 a2 a1) []), (tree_elems (Node n0 a2 gv1) []), (tree_elems (Node n0 a1 c2) []), (tree_elems (Node n0 a1 c1) [])
(tree_elems (Node n0 a1 a2) []), (tree_elems (Node n0 a1 a1) []), (tree_elems (Node n0 a1 gv1) []), (tree_elems (Node n0 gv1 c2) []), (tree_elems (Node n0 gv1 c1) []), (tree_elems (Node n0 gv1 a2) []), (tree_elems (Node n0 gv1 a1) []), (tree_elems (Node n0 gv1 gv1) []), (tree_elems (Node n c2 c2) []), (tree_elems (Node n c2 c1) [])
(tree_elems (Node n c2 a2) []), (tree_elems (Node n c2 a1) []), (tree_elems (Node n c2 gv1) []), (tree_elems (Node n c1 c2) []), (tree_elems (Node n c1 c1) []), (tree_elems (Node n c1 a2) []), (tree_elems (Node n c1 a1) []), (tree_elems (Node n c1 gv1) []), (tree_elems (Node n a2 c2) []), (tree_elems (Node n a2 c1) [])
(tree_elems (Node n a2 a2) []), (tree_elems (Node n a2 a1) []), (tree_elems (Node n a2 gv1) []), (tree_elems (Node n a1 c2) []), (tree_elems (Node n a1 c1) []), (tree_elems (Node n a1 a2) []), (tree_elems (Node n a1 a1) []), (tree_elems (Node n a1 gv1) []), (tree_elems (Node n gv1 c2) []), (tree_elems (Node n gv1 c1) [])
(tree_elems (Node n gv1 a2) []), (tree_elems (Node n gv1 a1) []), (tree_elems (Node n gv1 gv1) []), (tree_elems (smash c2 c2) []), (tree_elems (smash c2 c1) []), (tree_elems (smash c2 a2) []), (tree_elems (smash c2 a1) []), (tree_elems (smash c2 gv1) []), (tree_elems (smash c1 c2) []), (tree_elems (smash c1 c1) [])
(tree_elems (smash c1 a2) []), (tree_elems (smash c1 a1) []), (tree_elems (smash c1 gv1) []), (tree_elems (smash a2 c2) []), (tree_elems (smash a2 c1) []), (tree_elems (smash a2 a2) []), (tree_elems (smash a2 a1) []), (tree_elems (smash a2 gv1) []), (tree_elems (smash a1 c2) []), (tree_elems (smash a1 c1) [])
(tree_elems (smash a1 a2) []), (tree_elems (smash a1 a1) []), (tree_elems (smash a1 gv1) []), (tree_elems (smash gv1 c2) []), (tree_elems (smash gv1 c1) []), (tree_elems (smash gv1 a2) []), (tree_elems (smash gv1 a1) []), (tree_elems (smash gv1 gv1) []), (tree_elems Leaf []), (priq (c2 :: p))
(priq (c1 :: p)), (priq (a2 :: p)), (priq (a1 :: p)), (priq (gv1 :: p)), (priq (merge p p)), (priq (heap_delete_max c2)), (priq (heap_delete_max c1)), (priq (heap_delete_max a2)), (priq (heap_delete_max a1)), (priq (heap_delete_max gv1))
(priq (join p p c2)), (priq (join p p c1)), (priq (join p p a2)), (priq (join p p a1)), (priq (join p p gv1)), (priq (insert n1 p)), (priq (insert n0 p)), (priq (insert n p)), (priq (carry p c2)), (priq (carry p c1))
(priq (carry p a2)), (priq (carry p a1)), (priq (carry p gv1)), (priq (p ++ p)), (priqq n1 (c2 :: p)), (priqq n1 (c1 :: p)), (priqq n1 (a2 :: p)), (priqq n1 (a1 :: p)), (priqq n1 (gv1 :: p)), (priqq n1 (merge p p))
(priqq n1 (heap_delete_max c2)), (priqq n1 (heap_delete_max c1)), (priqq n1 (heap_delete_max a2)), (priqq n1 (heap_delete_max a1)), (priqq n1 (heap_delete_max gv1)), (priqq n1 (join p p c2)), (priqq n1 (join p p c1)), (priqq n1 (join p p a2)), (priqq n1 (join p p a1)), (priqq n1 (join p p gv1))
(priqq n1 (insert n1 p)), (priqq n1 (insert n0 p)), (priqq n1 (insert n p)), (priqq n1 (carry p c2)), (priqq n1 (carry p c1)), (priqq n1 (carry p a2)), (priqq n1 (carry p a1)), (priqq n1 (carry p gv1)), (priqq n1 (p ++ p)), (priqq n0 (c2 :: p))
(priqq n0 (c1 :: p)), (priqq n0 (a2 :: p)), (priqq n0 (a1 :: p)), (priqq n0 (gv1 :: p)), (priqq n0 (merge p p)), (priqq n0 (heap_delete_max c2)), (priqq n0 (heap_delete_max c1)), (priqq n0 (heap_delete_max a2)), (priqq n0 (heap_delete_max a1)), (priqq n0 (heap_delete_max gv1))
(priqq n0 (join p p c2)), (priqq n0 (join p p c1)), (priqq n0 (join p p a2)), (priqq n0 (join p p a1)), (priqq n0 (join p p gv1)), (priqq n0 (insert n1 p)), (priqq n0 (insert n0 p)), (priqq n0 (insert n p)), (priqq n0 (carry p c2)), (priqq n0 (carry p c1))
(priqq n0 (carry p a2)), (priqq n0 (carry p a1)), (priqq n0 (carry p gv1)), (priqq n0 (p ++ p)), (priqq n (c2 :: p)), (priqq n (c1 :: p)), (priqq n (a2 :: p)), (priqq n (a1 :: p)), (priqq n (gv1 :: p)), (priqq n (merge p p))
(priqq n (heap_delete_max c2)), (priqq n (heap_delete_max c1)), (priqq n (heap_delete_max a2)), (priqq n (heap_delete_max a1)), (priqq n (heap_delete_max gv1)), (priqq n (join p p c2)), (priqq n (join p p c1)), (priqq n (join p p a2)), (priqq n (join p p a1)), (priqq n (join p p gv1))
(priqq n (insert n1 p)), (priqq n (insert n0 p)), (priqq n (insert n p)), (priqq n (carry p c2)), (priqq n (carry p c1)), (priqq n (carry p a2)), (priqq n (carry p a1)), (priqq n (carry p gv1)), (priqq n (p ++ p)), (priqq (find_max' n1 p) p)
(priqq (find_max' n1 p) (c2 :: p)), (priqq (find_max' n1 p) (c1 :: p)), (priqq (find_max' n1 p) (a2 :: p)), (priqq (find_max' n1 p) (a1 :: p)), (priqq (find_max' n1 p) (gv1 :: p)), (priqq (find_max' n1 p) (merge p p)), (priqq (find_max' n1 p) (heap_delete_max c2)), (priqq (find_max' n1 p) (heap_delete_max c1)), (priqq (find_max' n1 p) (heap_delete_max a2)), (priqq (find_max' n1 p) (heap_delete_max a1))
(priqq (find_max' n1 p) (heap_delete_max gv1)), (priqq (find_max' n1 p) (join p p c2)), (priqq (find_max' n1 p) (join p p c1)), (priqq (find_max' n1 p) (join p p a2)), (priqq (find_max' n1 p) (join p p a1)), (priqq (find_max' n1 p) (join p p gv1)), (priqq (find_max' n1 p) (insert n1 p)), (priqq (find_max' n1 p) (insert n0 p)), (priqq (find_max' n1 p) (insert n p)), (priqq (find_max' n1 p) (carry p c2))
(priqq (find_max' n1 p) (carry p c1)), (priqq (find_max' n1 p) (carry p a2)), (priqq (find_max' n1 p) (carry p a1)), (priqq (find_max' n1 p) (carry p gv1)), (priqq (find_max' n1 p) (p ++ p)), (priqq (find_max' n0 p) p), (priqq (find_max' n0 p) (c2 :: p)), (priqq (find_max' n0 p) (c1 :: p)), (priqq (find_max' n0 p) (a2 :: p)), (priqq (find_max' n0 p) (a1 :: p))
(priqq (find_max' n0 p) (gv1 :: p)), (priqq (find_max' n0 p) (merge p p)), (priqq (find_max' n0 p) (heap_delete_max c2)), (priqq (find_max' n0 p) (heap_delete_max c1)), (priqq (find_max' n0 p) (heap_delete_max a2)), (priqq (find_max' n0 p) (heap_delete_max a1)), (priqq (find_max' n0 p) (heap_delete_max gv1)), (priqq (find_max' n0 p) (join p p c2)), (priqq (find_max' n0 p) (join p p c1)), (priqq (find_max' n0 p) (join p p a2))
(priqq (find_max' n0 p) (join p p a1)), (priqq (find_max' n0 p) (join p p gv1)), (priqq (find_max' n0 p) (insert n1 p)), (priqq (find_max' n0 p) (insert n0 p)), (priqq (find_max' n0 p) (insert n p)), (priqq (find_max' n0 p) (carry p c2)), (priqq (find_max' n0 p) (carry p c1)), (priqq (find_max' n0 p) (carry p a2)), (priqq (find_max' n0 p) (carry p a1)), (priqq (find_max' n0 p) (carry p gv1))
(priqq (find_max' n0 p) (p ++ p)), (priqq (find_max' n p) p), (priqq (find_max' n p) (c2 :: p)), (priqq (find_max' n p) (c1 :: p)), (priqq (find_max' n p) (a2 :: p)), (priqq (find_max' n p) (a1 :: p)), (priqq (find_max' n p) (gv1 :: p)), (priqq (find_max' n p) (merge p p)), (priqq (find_max' n p) (heap_delete_max c2)), (priqq (find_max' n p) (heap_delete_max c1))
(priqq (find_max' n p) (heap_delete_max a2)), (priqq (find_max' n p) (heap_delete_max a1)), (priqq (find_max' n p) (heap_delete_max gv1)), (priqq (find_max' n p) (join p p c2)), (priqq (find_max' n p) (join p p c1)), (priqq (find_max' n p) (join p p a2)), (priqq (find_max' n p) (join p p a1)), (priqq (find_max' n p) (join p p gv1)), (priqq (find_max' n p) (insert n1 p)), (priqq (find_max' n p) (insert n0 p))
(priqq (find_max' n p) (insert n p)), (priqq (find_max' n p) (carry p c2)), (priqq (find_max' n p) (carry p c1)), (priqq (find_max' n p) (carry p a2)), (priqq (find_max' n p) (carry p a1)), (priqq (find_max' n p) (carry p gv1)), (priqq (find_max' n p) (p ++ p)), (priqq (length p) p), (priqq (length p) (c2 :: p)), (priqq (length p) (c1 :: p))
(priqq (length p) (a2 :: p)), (priqq (length p) (a1 :: p)), (priqq (length p) (gv1 :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max c2)), (priqq (length p) (heap_delete_max c1)), (priqq (length p) (heap_delete_max a2)), (priqq (length p) (heap_delete_max a1)), (priqq (length p) (heap_delete_max gv1)), (priqq (length p) (join p p c2))
(priqq (length p) (join p p c1)), (priqq (length p) (join p p a2)), (priqq (length p) (join p p a1)), (priqq (length p) (join p p gv1)), (priqq (length p) (insert n1 p)), (priqq (length p) (insert n0 p)), (priqq (length p) (insert n p)), (priqq (length p) (carry p c2)), (priqq (length p) (carry p c1)), (priqq (length p) (carry p a2))
(priqq (length p) (carry p a1)), (priqq (length p) (carry p gv1)), (priqq (length p) (p ++ p)), (pow2heap n1 (Node n1 c2 c2)), (pow2heap n1 (Node n1 c2 c1)), (pow2heap n1 (Node n1 c2 a2)), (pow2heap n1 (Node n1 c2 a1)), (pow2heap n1 (Node n1 c2 gv1)), (pow2heap n1 (Node n1 c1 c2)), (pow2heap n1 (Node n1 c1 c1))
(pow2heap n1 (Node n1 c1 a2)), (pow2heap n1 (Node n1 c1 a1)), (pow2heap n1 (Node n1 c1 gv1)), (pow2heap n1 (Node n1 a2 c2)), (pow2heap n1 (Node n1 a2 c1)), (pow2heap n1 (Node n1 a2 a2)), (pow2heap n1 (Node n1 a2 a1)), (pow2heap n1 (Node n1 a2 gv1)), (pow2heap n1 (Node n1 a1 c2)), (pow2heap n1 (Node n1 a1 c1))
(pow2heap n1 (Node n1 a1 a2)), (pow2heap n1 (Node n1 a1 a1)), (pow2heap n1 (Node n1 a1 gv1)), (pow2heap n1 (Node n1 gv1 c2)), (pow2heap n1 (Node n1 gv1 c1)), (pow2heap n1 (Node n1 gv1 a2)), (pow2heap n1 (Node n1 gv1 a1)), (pow2heap n1 (Node n1 gv1 gv1)), (pow2heap n1 (Node n0 c2 c2)), (pow2heap n1 (Node n0 c2 c1))
(pow2heap n1 (Node n0 c2 a2)), (pow2heap n1 (Node n0 c2 a1)), (pow2heap n1 (Node n0 c2 gv1)), (pow2heap n1 (Node n0 c1 c2)), (pow2heap n1 (Node n0 c1 c1)), (pow2heap n1 (Node n0 c1 a2)), (pow2heap n1 (Node n0 c1 a1)), (pow2heap n1 (Node n0 c1 gv1)), (pow2heap n1 (Node n0 a2 c2)), (pow2heap n1 (Node n0 a2 c1))
(pow2heap n1 (Node n0 a2 a2)), (pow2heap n1 (Node n0 a2 a1)), (pow2heap n1 (Node n0 a2 gv1)), (pow2heap n1 (Node n0 a1 c2)), (pow2heap n1 (Node n0 a1 c1)), (pow2heap n1 (Node n0 a1 a2)), (pow2heap n1 (Node n0 a1 a1)), (pow2heap n1 (Node n0 a1 gv1)), (pow2heap n1 (Node n0 gv1 c2)), (pow2heap n1 (Node n0 gv1 c1))
(pow2heap n1 (Node n0 gv1 a2)), (pow2heap n1 (Node n0 gv1 a1)), (pow2heap n1 (Node n0 gv1 gv1)), (pow2heap n1 (Node n c2 c2)), (pow2heap n1 (Node n c2 c1)), (pow2heap n1 (Node n c2 a2)), (pow2heap n1 (Node n c2 a1)), (pow2heap n1 (Node n c2 gv1)), (pow2heap n1 (Node n c1 c2)), (pow2heap n1 (Node n c1 c1))
(pow2heap n1 (Node n c1 a2)), (pow2heap n1 (Node n c1 a1)), (pow2heap n1 (Node n c1 gv1)), (pow2heap n1 (Node n a2 c2)), (pow2heap n1 (Node n a2 c1)), (pow2heap n1 (Node n a2 a2)), (pow2heap n1 (Node n a2 a1)), (pow2heap n1 (Node n a2 gv1)), (pow2heap n1 (Node n a1 c2)), (pow2heap n1 (Node n a1 c1))
(pow2heap n1 (Node n a1 a2)), (pow2heap n1 (Node n a1 a1)), (pow2heap n1 (Node n a1 gv1)), (pow2heap n1 (Node n gv1 c2)), (pow2heap n1 (Node n gv1 c1)), (pow2heap n1 (Node n gv1 a2)), (pow2heap n1 (Node n gv1 a1)), (pow2heap n1 (Node n gv1 gv1)), (pow2heap n1 (smash c2 c2)), (pow2heap n1 (smash c2 c1))
(pow2heap n1 (smash c2 a2)), (pow2heap n1 (smash c2 a1)), (pow2heap n1 (smash c2 gv1)), (pow2heap n1 (smash c1 c2)), (pow2heap n1 (smash c1 c1)), (pow2heap n1 (smash c1 a2)), (pow2heap n1 (smash c1 a1)), (pow2heap n1 (smash c1 gv1)), (pow2heap n1 (smash a2 c2)), (pow2heap n1 (smash a2 c1))
(pow2heap n1 (smash a2 a2)), (pow2heap n1 (smash a2 a1)), (pow2heap n1 (smash a2 gv1)), (pow2heap n1 (smash a1 c2)), (pow2heap n1 (smash a1 c1)), (pow2heap n1 (smash a1 a2)), (pow2heap n1 (smash a1 a1)), (pow2heap n1 (smash a1 gv1)), (pow2heap n1 (smash gv1 c2)), (pow2heap n1 (smash gv1 c1))
(pow2heap n1 (smash gv1 a2)), (pow2heap n1 (smash gv1 a1)), (pow2heap n1 (smash gv1 gv1)), (pow2heap n0 (Node n1 c2 c2)), (pow2heap n0 (Node n1 c2 c1)), (pow2heap n0 (Node n1 c2 a2)), (pow2heap n0 (Node n1 c2 a1)), (pow2heap n0 (Node n1 c2 gv1)), (pow2heap n0 (Node n1 c1 c2)), (pow2heap n0 (Node n1 c1 c1))
(pow2heap n0 (Node n1 c1 a2)), (pow2heap n0 (Node n1 c1 a1)), (pow2heap n0 (Node n1 c1 gv1)), (pow2heap n0 (Node n1 a2 c2)), (pow2heap n0 (Node n1 a2 c1)), (pow2heap n0 (Node n1 a2 a2)), (pow2heap n0 (Node n1 a2 a1)), (pow2heap n0 (Node n1 a2 gv1)), (pow2heap n0 (Node n1 a1 c2)), (pow2heap n0 (Node n1 a1 c1))
(pow2heap n0 (Node n1 a1 a2)), (pow2heap n0 (Node n1 a1 a1)), (pow2heap n0 (Node n1 a1 gv1)), (pow2heap n0 (Node n1 gv1 c2)), (pow2heap n0 (Node n1 gv1 c1)), (pow2heap n0 (Node n1 gv1 a2)), (pow2heap n0 (Node n1 gv1 a1)), (pow2heap n0 (Node n1 gv1 gv1)), (pow2heap n0 (Node n0 c2 c2)), (pow2heap n0 (Node n0 c2 c1))
(pow2heap n0 (Node n0 c2 a2)), (pow2heap n0 (Node n0 c2 a1)), (pow2heap n0 (Node n0 c2 gv1)), (pow2heap n0 (Node n0 c1 c2)), (pow2heap n0 (Node n0 c1 c1)), (pow2heap n0 (Node n0 c1 a2)), (pow2heap n0 (Node n0 c1 a1)), (pow2heap n0 (Node n0 c1 gv1)), (pow2heap n0 (Node n0 a2 c2)), (pow2heap n0 (Node n0 a2 c1))
(pow2heap n0 (Node n0 a2 a2)), (pow2heap n0 (Node n0 a2 a1)), (pow2heap n0 (Node n0 a2 gv1)), (pow2heap n0 (Node n0 a1 c2)), (pow2heap n0 (Node n0 a1 c1)), (pow2heap n0 (Node n0 a1 a2)), (pow2heap n0 (Node n0 a1 a1)), (pow2heap n0 (Node n0 a1 gv1)), (pow2heap n0 (Node n0 gv1 c2)), (pow2heap n0 (Node n0 gv1 c1))
(pow2heap n0 (Node n0 gv1 a2)), (pow2heap n0 (Node n0 gv1 a1)), (pow2heap n0 (Node n0 gv1 gv1)), (pow2heap n0 (Node n c2 c2)), (pow2heap n0 (Node n c2 c1)), (pow2heap n0 (Node n c2 a2)), (pow2heap n0 (Node n c2 a1)), (pow2heap n0 (Node n c2 gv1)), (pow2heap n0 (Node n c1 c2)), (pow2heap n0 (Node n c1 c1))
(pow2heap n0 (Node n c1 a2)), (pow2heap n0 (Node n c1 a1)), (pow2heap n0 (Node n c1 gv1)), (pow2heap n0 (Node n a2 c2)), (pow2heap n0 (Node n a2 c1)), (pow2heap n0 (Node n a2 a2)), (pow2heap n0 (Node n a2 a1)), (pow2heap n0 (Node n a2 gv1)), (pow2heap n0 (Node n a1 c2)), (pow2heap n0 (Node n a1 c1))
(pow2heap n0 (Node n a1 a2)), (pow2heap n0 (Node n a1 a1)), (pow2heap n0 (Node n a1 gv1)), (pow2heap n0 (Node n gv1 c2)), (pow2heap n0 (Node n gv1 c1)), (pow2heap n0 (Node n gv1 a2)), (pow2heap n0 (Node n gv1 a1)), (pow2heap n0 (Node n gv1 gv1)), (pow2heap n0 (smash c2 c2)), (pow2heap n0 (smash c2 c1))
(pow2heap n0 (smash c2 a2)), (pow2heap n0 (smash c2 a1)), (pow2heap n0 (smash c2 gv1)), (pow2heap n0 (smash c1 c2)), (pow2heap n0 (smash c1 c1)), (pow2heap n0 (smash c1 a2)), (pow2heap n0 (smash c1 a1)), (pow2heap n0 (smash c1 gv1)), (pow2heap n0 (smash a2 c2)), (pow2heap n0 (smash a2 c1))
(pow2heap n0 (smash a2 a2)), (pow2heap n0 (smash a2 a1)), (pow2heap n0 (smash a2 gv1)), (pow2heap n0 (smash a1 c2)), (pow2heap n0 (smash a1 c1)), (pow2heap n0 (smash a1 a2)), (pow2heap n0 (smash a1 a1)), (pow2heap n0 (smash a1 gv1)), (pow2heap n0 (smash gv1 c2)), (pow2heap n0 (smash gv1 c1))
(pow2heap n0 (smash gv1 a2)), (pow2heap n0 (smash gv1 a1)), (pow2heap n0 (smash gv1 gv1)), (pow2heap n (Node n1 c2 c2)), (pow2heap n (Node n1 c2 c1)), (pow2heap n (Node n1 c2 a2)), (pow2heap n (Node n1 c2 a1)), (pow2heap n (Node n1 c2 gv1)), (pow2heap n (Node n1 c1 c2)), (pow2heap n (Node n1 c1 c1))
(pow2heap n (Node n1 c1 a2)), (pow2heap n (Node n1 c1 a1)), (pow2heap n (Node n1 c1 gv1)), (pow2heap n (Node n1 a2 c2)), (pow2heap n (Node n1 a2 c1)), (pow2heap n (Node n1 a2 a2)), (pow2heap n (Node n1 a2 a1)), (pow2heap n (Node n1 a2 gv1)), (pow2heap n (Node n1 a1 c2)), (pow2heap n (Node n1 a1 c1))
(pow2heap n (Node n1 a1 a2)), (pow2heap n (Node n1 a1 a1)), (pow2heap n (Node n1 a1 gv1)), (pow2heap n (Node n1 gv1 c2)), (pow2heap n (Node n1 gv1 c1)), (pow2heap n (Node n1 gv1 a2)), (pow2heap n (Node n1 gv1 a1)), (pow2heap n (Node n1 gv1 gv1)), (pow2heap n (Node n0 c2 c2)), (pow2heap n (Node n0 c2 c1))
(pow2heap n (Node n0 c2 a2)), (pow2heap n (Node n0 c2 a1)), (pow2heap n (Node n0 c2 gv1)), (pow2heap n (Node n0 c1 c2)), (pow2heap n (Node n0 c1 c1)), (pow2heap n (Node n0 c1 a2)), (pow2heap n (Node n0 c1 a1)), (pow2heap n (Node n0 c1 gv1)), (pow2heap n (Node n0 a2 c2)), (pow2heap n (Node n0 a2 c1))
(pow2heap n (Node n0 a2 a2)), (pow2heap n (Node n0 a2 a1)), (pow2heap n (Node n0 a2 gv1)), (pow2heap n (Node n0 a1 c2)), (pow2heap n (Node n0 a1 c1)), (pow2heap n (Node n0 a1 a2)), (pow2heap n (Node n0 a1 a1)), (pow2heap n (Node n0 a1 gv1)), (pow2heap n (Node n0 gv1 c2)), (pow2heap n (Node n0 gv1 c1))
(pow2heap n (Node n0 gv1 a2)), (pow2heap n (Node n0 gv1 a1)), (pow2heap n (Node n0 gv1 gv1)), (pow2heap n (Node n c2 c2)), (pow2heap n (Node n c2 c1)), (pow2heap n (Node n c2 a2)), (pow2heap n (Node n c2 a1)), (pow2heap n (Node n c2 gv1)), (pow2heap n (Node n c1 c2)), (pow2heap n (Node n c1 c1))
(pow2heap n (Node n c1 a2)), (pow2heap n (Node n c1 a1)), (pow2heap n (Node n c1 gv1)), (pow2heap n (Node n a2 c2)), (pow2heap n (Node n a2 c1)), (pow2heap n (Node n a2 a2)), (pow2heap n (Node n a2 a1)), (pow2heap n (Node n a2 gv1)), (pow2heap n (Node n a1 c2)), (pow2heap n (Node n a1 c1))
(pow2heap n (Node n a1 a2)), (pow2heap n (Node n a1 a1)), (pow2heap n (Node n a1 gv1)), (pow2heap n (Node n gv1 c2)), (pow2heap n (Node n gv1 c1)), (pow2heap n (Node n gv1 a2)), (pow2heap n (Node n gv1 a1)), (pow2heap n (Node n gv1 gv1)), (pow2heap n (smash c2 c2)), (pow2heap n (smash c2 c1))
(pow2heap n (smash c2 a2)), (pow2heap n (smash c2 a1)), (pow2heap n (smash c2 gv1)), (pow2heap n (smash c1 c2)), (pow2heap n (smash c1 c1)), (pow2heap n (smash c1 a2)), (pow2heap n (smash c1 a1)), (pow2heap n (smash c1 gv1)), (pow2heap n (smash a2 c2)), (pow2heap n (smash a2 c1))
(pow2heap n (smash a2 a2)), (pow2heap n (smash a2 a1)), (pow2heap n (smash a2 gv1)), (pow2heap n (smash a1 c2)), (pow2heap n (smash a1 c1)), (pow2heap n (smash a1 a2)), (pow2heap n (smash a1 a1)), (pow2heap n (smash a1 gv1)), (pow2heap n (smash gv1 c2)), (pow2heap n (smash gv1 c1))
(pow2heap n (smash gv1 a2)), (pow2heap n (smash gv1 a1)), (pow2heap n (smash gv1 gv1)), (pow2heap (find_max' n1 p) c2), (pow2heap (find_max' n1 p) c1), (pow2heap (find_max' n1 p) a2), (pow2heap (find_max' n1 p) a1), (pow2heap (find_max' n1 p) gv1), (pow2heap (find_max' n1 p) (Node n1 c2 c2)), (pow2heap (find_max' n1 p) (Node n1 c2 c1))
(pow2heap (find_max' n1 p) (Node n1 c2 a2)), (pow2heap (find_max' n1 p) (Node n1 c2 a1)), (pow2heap (find_max' n1 p) (Node n1 c2 gv1)), (pow2heap (find_max' n1 p) (Node n1 c1 c2)), (pow2heap (find_max' n1 p) (Node n1 c1 c1)), (pow2heap (find_max' n1 p) (Node n1 c1 a2)), (pow2heap (find_max' n1 p) (Node n1 c1 a1)), (pow2heap (find_max' n1 p) (Node n1 c1 gv1)), (pow2heap (find_max' n1 p) (Node n1 a2 c2)), (pow2heap (find_max' n1 p) (Node n1 a2 c1))
(pow2heap (find_max' n1 p) (Node n1 a2 a2)), (pow2heap (find_max' n1 p) (Node n1 a2 a1)), (pow2heap (find_max' n1 p) (Node n1 a2 gv1)), (pow2heap (find_max' n1 p) (Node n1 a1 c2)), (pow2heap (find_max' n1 p) (Node n1 a1 c1)), (pow2heap (find_max' n1 p) (Node n1 a1 a2)), (pow2heap (find_max' n1 p) (Node n1 a1 a1)), (pow2heap (find_max' n1 p) (Node n1 a1 gv1)), (pow2heap (find_max' n1 p) (Node n1 gv1 c2)), (pow2heap (find_max' n1 p) (Node n1 gv1 c1))
(pow2heap (find_max' n1 p) (Node n1 gv1 a2)), (pow2heap (find_max' n1 p) (Node n1 gv1 a1)), (pow2heap (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heap (find_max' n1 p) (Node n0 c2 c2)), (pow2heap (find_max' n1 p) (Node n0 c2 c1)), (pow2heap (find_max' n1 p) (Node n0 c2 a2)), (pow2heap (find_max' n1 p) (Node n0 c2 a1)), (pow2heap (find_max' n1 p) (Node n0 c2 gv1)), (pow2heap (find_max' n1 p) (Node n0 c1 c2)), (pow2heap (find_max' n1 p) (Node n0 c1 c1))
(pow2heap (find_max' n1 p) (Node n0 c1 a2)), (pow2heap (find_max' n1 p) (Node n0 c1 a1)), (pow2heap (find_max' n1 p) (Node n0 c1 gv1)), (pow2heap (find_max' n1 p) (Node n0 a2 c2)), (pow2heap (find_max' n1 p) (Node n0 a2 c1)), (pow2heap (find_max' n1 p) (Node n0 a2 a2)), (pow2heap (find_max' n1 p) (Node n0 a2 a1)), (pow2heap (find_max' n1 p) (Node n0 a2 gv1)), (pow2heap (find_max' n1 p) (Node n0 a1 c2)), (pow2heap (find_max' n1 p) (Node n0 a1 c1))
(pow2heap (find_max' n1 p) (Node n0 a1 a2)), (pow2heap (find_max' n1 p) (Node n0 a1 a1)), (pow2heap (find_max' n1 p) (Node n0 a1 gv1)), (pow2heap (find_max' n1 p) (Node n0 gv1 c2)), (pow2heap (find_max' n1 p) (Node n0 gv1 c1)), (pow2heap (find_max' n1 p) (Node n0 gv1 a2)), (pow2heap (find_max' n1 p) (Node n0 gv1 a1)), (pow2heap (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heap (find_max' n1 p) (Node n c2 c2)), (pow2heap (find_max' n1 p) (Node n c2 c1))
(pow2heap (find_max' n1 p) (Node n c2 a2)), (pow2heap (find_max' n1 p) (Node n c2 a1)), (pow2heap (find_max' n1 p) (Node n c2 gv1)), (pow2heap (find_max' n1 p) (Node n c1 c2)), (pow2heap (find_max' n1 p) (Node n c1 c1)), (pow2heap (find_max' n1 p) (Node n c1 a2)), (pow2heap (find_max' n1 p) (Node n c1 a1)), (pow2heap (find_max' n1 p) (Node n c1 gv1)), (pow2heap (find_max' n1 p) (Node n a2 c2)), (pow2heap (find_max' n1 p) (Node n a2 c1))
(pow2heap (find_max' n1 p) (Node n a2 a2)), (pow2heap (find_max' n1 p) (Node n a2 a1)), (pow2heap (find_max' n1 p) (Node n a2 gv1)), (pow2heap (find_max' n1 p) (Node n a1 c2)), (pow2heap (find_max' n1 p) (Node n a1 c1)), (pow2heap (find_max' n1 p) (Node n a1 a2)), (pow2heap (find_max' n1 p) (Node n a1 a1)), (pow2heap (find_max' n1 p) (Node n a1 gv1)), (pow2heap (find_max' n1 p) (Node n gv1 c2)), (pow2heap (find_max' n1 p) (Node n gv1 c1))
(pow2heap (find_max' n1 p) (Node n gv1 a2)), (pow2heap (find_max' n1 p) (Node n gv1 a1)), (pow2heap (find_max' n1 p) (Node n gv1 gv1)), (pow2heap (find_max' n1 p) (smash c2 c2)), (pow2heap (find_max' n1 p) (smash c2 c1)), (pow2heap (find_max' n1 p) (smash c2 a2)), (pow2heap (find_max' n1 p) (smash c2 a1)), (pow2heap (find_max' n1 p) (smash c2 gv1)), (pow2heap (find_max' n1 p) (smash c1 c2)), (pow2heap (find_max' n1 p) (smash c1 c1))
(pow2heap (find_max' n1 p) (smash c1 a2)), (pow2heap (find_max' n1 p) (smash c1 a1)), (pow2heap (find_max' n1 p) (smash c1 gv1)), (pow2heap (find_max' n1 p) (smash a2 c2)), (pow2heap (find_max' n1 p) (smash a2 c1)), (pow2heap (find_max' n1 p) (smash a2 a2)), (pow2heap (find_max' n1 p) (smash a2 a1)), (pow2heap (find_max' n1 p) (smash a2 gv1)), (pow2heap (find_max' n1 p) (smash a1 c2)), (pow2heap (find_max' n1 p) (smash a1 c1))
(pow2heap (find_max' n1 p) (smash a1 a2)), (pow2heap (find_max' n1 p) (smash a1 a1)), (pow2heap (find_max' n1 p) (smash a1 gv1)), (pow2heap (find_max' n1 p) (smash gv1 c2)), (pow2heap (find_max' n1 p) (smash gv1 c1)), (pow2heap (find_max' n1 p) (smash gv1 a2)), (pow2heap (find_max' n1 p) (smash gv1 a1)), (pow2heap (find_max' n1 p) (smash gv1 gv1)), (pow2heap (find_max' n0 p) c2), (pow2heap (find_max' n0 p) c1)
(pow2heap (find_max' n0 p) a2), (pow2heap (find_max' n0 p) a1), (pow2heap (find_max' n0 p) gv1), (pow2heap (find_max' n0 p) (Node n1 c2 c2)), (pow2heap (find_max' n0 p) (Node n1 c2 c1)), (pow2heap (find_max' n0 p) (Node n1 c2 a2)), (pow2heap (find_max' n0 p) (Node n1 c2 a1)), (pow2heap (find_max' n0 p) (Node n1 c2 gv1)), (pow2heap (find_max' n0 p) (Node n1 c1 c2)), (pow2heap (find_max' n0 p) (Node n1 c1 c1))
(pow2heap (find_max' n0 p) (Node n1 c1 a2)), (pow2heap (find_max' n0 p) (Node n1 c1 a1)), (pow2heap (find_max' n0 p) (Node n1 c1 gv1)), (pow2heap (find_max' n0 p) (Node n1 a2 c2)), (pow2heap (find_max' n0 p) (Node n1 a2 c1)), (pow2heap (find_max' n0 p) (Node n1 a2 a2)), (pow2heap (find_max' n0 p) (Node n1 a2 a1)), (pow2heap (find_max' n0 p) (Node n1 a2 gv1)), (pow2heap (find_max' n0 p) (Node n1 a1 c2)), (pow2heap (find_max' n0 p) (Node n1 a1 c1))
(pow2heap (find_max' n0 p) (Node n1 a1 a2)), (pow2heap (find_max' n0 p) (Node n1 a1 a1)), (pow2heap (find_max' n0 p) (Node n1 a1 gv1)), (pow2heap (find_max' n0 p) (Node n1 gv1 c2)), (pow2heap (find_max' n0 p) (Node n1 gv1 c1)), (pow2heap (find_max' n0 p) (Node n1 gv1 a2)), (pow2heap (find_max' n0 p) (Node n1 gv1 a1)), (pow2heap (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heap (find_max' n0 p) (Node n0 c2 c2)), (pow2heap (find_max' n0 p) (Node n0 c2 c1))
(pow2heap (find_max' n0 p) (Node n0 c2 a2)), (pow2heap (find_max' n0 p) (Node n0 c2 a1)), (pow2heap (find_max' n0 p) (Node n0 c2 gv1)), (pow2heap (find_max' n0 p) (Node n0 c1 c2)), (pow2heap (find_max' n0 p) (Node n0 c1 c1)), (pow2heap (find_max' n0 p) (Node n0 c1 a2)), (pow2heap (find_max' n0 p) (Node n0 c1 a1)), (pow2heap (find_max' n0 p) (Node n0 c1 gv1)), (pow2heap (find_max' n0 p) (Node n0 a2 c2)), (pow2heap (find_max' n0 p) (Node n0 a2 c1))
(pow2heap (find_max' n0 p) (Node n0 a2 a2)), (pow2heap (find_max' n0 p) (Node n0 a2 a1)), (pow2heap (find_max' n0 p) (Node n0 a2 gv1)), (pow2heap (find_max' n0 p) (Node n0 a1 c2)), (pow2heap (find_max' n0 p) (Node n0 a1 c1)), (pow2heap (find_max' n0 p) (Node n0 a1 a2)), (pow2heap (find_max' n0 p) (Node n0 a1 a1)), (pow2heap (find_max' n0 p) (Node n0 a1 gv1)), (pow2heap (find_max' n0 p) (Node n0 gv1 c2)), (pow2heap (find_max' n0 p) (Node n0 gv1 c1))
(pow2heap (find_max' n0 p) (Node n0 gv1 a2)), (pow2heap (find_max' n0 p) (Node n0 gv1 a1)), (pow2heap (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heap (find_max' n0 p) (Node n c2 c2)), (pow2heap (find_max' n0 p) (Node n c2 c1)), (pow2heap (find_max' n0 p) (Node n c2 a2)), (pow2heap (find_max' n0 p) (Node n c2 a1)), (pow2heap (find_max' n0 p) (Node n c2 gv1)), (pow2heap (find_max' n0 p) (Node n c1 c2)), (pow2heap (find_max' n0 p) (Node n c1 c1))
(pow2heap (find_max' n0 p) (Node n c1 a2)), (pow2heap (find_max' n0 p) (Node n c1 a1)), (pow2heap (find_max' n0 p) (Node n c1 gv1)), (pow2heap (find_max' n0 p) (Node n a2 c2)), (pow2heap (find_max' n0 p) (Node n a2 c1)), (pow2heap (find_max' n0 p) (Node n a2 a2)), (pow2heap (find_max' n0 p) (Node n a2 a1)), (pow2heap (find_max' n0 p) (Node n a2 gv1)), (pow2heap (find_max' n0 p) (Node n a1 c2)), (pow2heap (find_max' n0 p) (Node n a1 c1))
(pow2heap (find_max' n0 p) (Node n a1 a2)), (pow2heap (find_max' n0 p) (Node n a1 a1)), (pow2heap (find_max' n0 p) (Node n a1 gv1)), (pow2heap (find_max' n0 p) (Node n gv1 c2)), (pow2heap (find_max' n0 p) (Node n gv1 c1)), (pow2heap (find_max' n0 p) (Node n gv1 a2)), (pow2heap (find_max' n0 p) (Node n gv1 a1)), (pow2heap (find_max' n0 p) (Node n gv1 gv1)), (pow2heap (find_max' n0 p) (smash c2 c2)), (pow2heap (find_max' n0 p) (smash c2 c1))
(pow2heap (find_max' n0 p) (smash c2 a2)), (pow2heap (find_max' n0 p) (smash c2 a1)), (pow2heap (find_max' n0 p) (smash c2 gv1)), (pow2heap (find_max' n0 p) (smash c1 c2)), (pow2heap (find_max' n0 p) (smash c1 c1)), (pow2heap (find_max' n0 p) (smash c1 a2)), (pow2heap (find_max' n0 p) (smash c1 a1)), (pow2heap (find_max' n0 p) (smash c1 gv1)), (pow2heap (find_max' n0 p) (smash a2 c2)), (pow2heap (find_max' n0 p) (smash a2 c1))
(pow2heap (find_max' n0 p) (smash a2 a2)), (pow2heap (find_max' n0 p) (smash a2 a1)), (pow2heap (find_max' n0 p) (smash a2 gv1)), (pow2heap (find_max' n0 p) (smash a1 c2)), (pow2heap (find_max' n0 p) (smash a1 c1)), (pow2heap (find_max' n0 p) (smash a1 a2)), (pow2heap (find_max' n0 p) (smash a1 a1)), (pow2heap (find_max' n0 p) (smash a1 gv1)), (pow2heap (find_max' n0 p) (smash gv1 c2)), (pow2heap (find_max' n0 p) (smash gv1 c1))
(pow2heap (find_max' n0 p) (smash gv1 a2)), (pow2heap (find_max' n0 p) (smash gv1 a1)), (pow2heap (find_max' n0 p) (smash gv1 gv1)), (pow2heap (find_max' n p) c2), (pow2heap (find_max' n p) c1), (pow2heap (find_max' n p) a2), (pow2heap (find_max' n p) a1), (pow2heap (find_max' n p) gv1), (pow2heap (find_max' n p) (Node n1 c2 c2)), (pow2heap (find_max' n p) (Node n1 c2 c1))
(pow2heap (find_max' n p) (Node n1 c2 a2)), (pow2heap (find_max' n p) (Node n1 c2 a1)), (pow2heap (find_max' n p) (Node n1 c2 gv1)), (pow2heap (find_max' n p) (Node n1 c1 c2)), (pow2heap (find_max' n p) (Node n1 c1 c1)), (pow2heap (find_max' n p) (Node n1 c1 a2)), (pow2heap (find_max' n p) (Node n1 c1 a1)), (pow2heap (find_max' n p) (Node n1 c1 gv1)), (pow2heap (find_max' n p) (Node n1 a2 c2)), (pow2heap (find_max' n p) (Node n1 a2 c1))
(pow2heap (find_max' n p) (Node n1 a2 a2)), (pow2heap (find_max' n p) (Node n1 a2 a1)), (pow2heap (find_max' n p) (Node n1 a2 gv1)), (pow2heap (find_max' n p) (Node n1 a1 c2)), (pow2heap (find_max' n p) (Node n1 a1 c1)), (pow2heap (find_max' n p) (Node n1 a1 a2)), (pow2heap (find_max' n p) (Node n1 a1 a1)), (pow2heap (find_max' n p) (Node n1 a1 gv1)), (pow2heap (find_max' n p) (Node n1 gv1 c2)), (pow2heap (find_max' n p) (Node n1 gv1 c1))
(pow2heap (find_max' n p) (Node n1 gv1 a2)), (pow2heap (find_max' n p) (Node n1 gv1 a1)), (pow2heap (find_max' n p) (Node n1 gv1 gv1)), (pow2heap (find_max' n p) (Node n0 c2 c2)), (pow2heap (find_max' n p) (Node n0 c2 c1)), (pow2heap (find_max' n p) (Node n0 c2 a2)), (pow2heap (find_max' n p) (Node n0 c2 a1)), (pow2heap (find_max' n p) (Node n0 c2 gv1)), (pow2heap (find_max' n p) (Node n0 c1 c2)), (pow2heap (find_max' n p) (Node n0 c1 c1))
(pow2heap (find_max' n p) (Node n0 c1 a2)), (pow2heap (find_max' n p) (Node n0 c1 a1)), (pow2heap (find_max' n p) (Node n0 c1 gv1)), (pow2heap (find_max' n p) (Node n0 a2 c2)), (pow2heap (find_max' n p) (Node n0 a2 c1)), (pow2heap (find_max' n p) (Node n0 a2 a2)), (pow2heap (find_max' n p) (Node n0 a2 a1)), (pow2heap (find_max' n p) (Node n0 a2 gv1)), (pow2heap (find_max' n p) (Node n0 a1 c2)), (pow2heap (find_max' n p) (Node n0 a1 c1))
(pow2heap (find_max' n p) (Node n0 a1 a2)), (pow2heap (find_max' n p) (Node n0 a1 a1)), (pow2heap (find_max' n p) (Node n0 a1 gv1)), (pow2heap (find_max' n p) (Node n0 gv1 c2)), (pow2heap (find_max' n p) (Node n0 gv1 c1)), (pow2heap (find_max' n p) (Node n0 gv1 a2)), (pow2heap (find_max' n p) (Node n0 gv1 a1)), (pow2heap (find_max' n p) (Node n0 gv1 gv1)), (pow2heap (find_max' n p) (Node n c2 c2)), (pow2heap (find_max' n p) (Node n c2 c1))
(pow2heap (find_max' n p) (Node n c2 a2)), (pow2heap (find_max' n p) (Node n c2 a1)), (pow2heap (find_max' n p) (Node n c2 gv1)), (pow2heap (find_max' n p) (Node n c1 c2)), (pow2heap (find_max' n p) (Node n c1 c1)), (pow2heap (find_max' n p) (Node n c1 a2)), (pow2heap (find_max' n p) (Node n c1 a1)), (pow2heap (find_max' n p) (Node n c1 gv1)), (pow2heap (find_max' n p) (Node n a2 c2)), (pow2heap (find_max' n p) (Node n a2 c1))
(pow2heap (find_max' n p) (Node n a2 a2)), (pow2heap (find_max' n p) (Node n a2 a1)), (pow2heap (find_max' n p) (Node n a2 gv1)), (pow2heap (find_max' n p) (Node n a1 c2)), (pow2heap (find_max' n p) (Node n a1 c1)), (pow2heap (find_max' n p) (Node n a1 a2)), (pow2heap (find_max' n p) (Node n a1 a1)), (pow2heap (find_max' n p) (Node n a1 gv1)), (pow2heap (find_max' n p) (Node n gv1 c2)), (pow2heap (find_max' n p) (Node n gv1 c1))
(pow2heap (find_max' n p) (Node n gv1 a2)), (pow2heap (find_max' n p) (Node n gv1 a1)), (pow2heap (find_max' n p) (Node n gv1 gv1)), (pow2heap (find_max' n p) (smash c2 c2)), (pow2heap (find_max' n p) (smash c2 c1)), (pow2heap (find_max' n p) (smash c2 a2)), (pow2heap (find_max' n p) (smash c2 a1)), (pow2heap (find_max' n p) (smash c2 gv1)), (pow2heap (find_max' n p) (smash c1 c2)), (pow2heap (find_max' n p) (smash c1 c1))
(pow2heap (find_max' n p) (smash c1 a2)), (pow2heap (find_max' n p) (smash c1 a1)), (pow2heap (find_max' n p) (smash c1 gv1)), (pow2heap (find_max' n p) (smash a2 c2)), (pow2heap (find_max' n p) (smash a2 c1)), (pow2heap (find_max' n p) (smash a2 a2)), (pow2heap (find_max' n p) (smash a2 a1)), (pow2heap (find_max' n p) (smash a2 gv1)), (pow2heap (find_max' n p) (smash a1 c2)), (pow2heap (find_max' n p) (smash a1 c1))
(pow2heap (find_max' n p) (smash a1 a2)), (pow2heap (find_max' n p) (smash a1 a1)), (pow2heap (find_max' n p) (smash a1 gv1)), (pow2heap (find_max' n p) (smash gv1 c2)), (pow2heap (find_max' n p) (smash gv1 c1)), (pow2heap (find_max' n p) (smash gv1 a2)), (pow2heap (find_max' n p) (smash gv1 a1)), (pow2heap (find_max' n p) (smash gv1 gv1)), (pow2heap (length p) c2), (pow2heap (length p) c1)
(pow2heap (length p) a2), (pow2heap (length p) a1), (pow2heap (length p) gv1), (pow2heap (length p) (Node n1 c2 c2)), (pow2heap (length p) (Node n1 c2 c1)), (pow2heap (length p) (Node n1 c2 a2)), (pow2heap (length p) (Node n1 c2 a1)), (pow2heap (length p) (Node n1 c2 gv1)), (pow2heap (length p) (Node n1 c1 c2)), (pow2heap (length p) (Node n1 c1 c1))
(pow2heap (length p) (Node n1 c1 a2)), (pow2heap (length p) (Node n1 c1 a1)), (pow2heap (length p) (Node n1 c1 gv1)), (pow2heap (length p) (Node n1 a2 c2)), (pow2heap (length p) (Node n1 a2 c1)), (pow2heap (length p) (Node n1 a2 a2)), (pow2heap (length p) (Node n1 a2 a1)), (pow2heap (length p) (Node n1 a2 gv1)), (pow2heap (length p) (Node n1 a1 c2)), (pow2heap (length p) (Node n1 a1 c1))
(pow2heap (length p) (Node n1 a1 a2)), (pow2heap (length p) (Node n1 a1 a1)), (pow2heap (length p) (Node n1 a1 gv1)), (pow2heap (length p) (Node n1 gv1 c2)), (pow2heap (length p) (Node n1 gv1 c1)), (pow2heap (length p) (Node n1 gv1 a2)), (pow2heap (length p) (Node n1 gv1 a1)), (pow2heap (length p) (Node n1 gv1 gv1)), (pow2heap (length p) (Node n0 c2 c2)), (pow2heap (length p) (Node n0 c2 c1))
(pow2heap (length p) (Node n0 c2 a2)), (pow2heap (length p) (Node n0 c2 a1)), (pow2heap (length p) (Node n0 c2 gv1)), (pow2heap (length p) (Node n0 c1 c2)), (pow2heap (length p) (Node n0 c1 c1)), (pow2heap (length p) (Node n0 c1 a2)), (pow2heap (length p) (Node n0 c1 a1)), (pow2heap (length p) (Node n0 c1 gv1)), (pow2heap (length p) (Node n0 a2 c2)), (pow2heap (length p) (Node n0 a2 c1))
(pow2heap (length p) (Node n0 a2 a2)), (pow2heap (length p) (Node n0 a2 a1)), (pow2heap (length p) (Node n0 a2 gv1)), (pow2heap (length p) (Node n0 a1 c2)), (pow2heap (length p) (Node n0 a1 c1)), (pow2heap (length p) (Node n0 a1 a2)), (pow2heap (length p) (Node n0 a1 a1)), (pow2heap (length p) (Node n0 a1 gv1)), (pow2heap (length p) (Node n0 gv1 c2)), (pow2heap (length p) (Node n0 gv1 c1))
(pow2heap (length p) (Node n0 gv1 a2)), (pow2heap (length p) (Node n0 gv1 a1)), (pow2heap (length p) (Node n0 gv1 gv1)), (pow2heap (length p) (Node n c2 c2)), (pow2heap (length p) (Node n c2 c1)), (pow2heap (length p) (Node n c2 a2)), (pow2heap (length p) (Node n c2 a1)), (pow2heap (length p) (Node n c2 gv1)), (pow2heap (length p) (Node n c1 c2)), (pow2heap (length p) (Node n c1 c1))
(pow2heap (length p) (Node n c1 a2)), (pow2heap (length p) (Node n c1 a1)), (pow2heap (length p) (Node n c1 gv1)), (pow2heap (length p) (Node n a2 c2)), (pow2heap (length p) (Node n a2 c1)), (pow2heap (length p) (Node n a2 a2)), (pow2heap (length p) (Node n a2 a1)), (pow2heap (length p) (Node n a2 gv1)), (pow2heap (length p) (Node n a1 c2)), (pow2heap (length p) (Node n a1 c1))
(pow2heap (length p) (Node n a1 a2)), (pow2heap (length p) (Node n a1 a1)), (pow2heap (length p) (Node n a1 gv1)), (pow2heap (length p) (Node n gv1 c2)), (pow2heap (length p) (Node n gv1 c1)), (pow2heap (length p) (Node n gv1 a2)), (pow2heap (length p) (Node n gv1 a1)), (pow2heap (length p) (Node n gv1 gv1)), (pow2heap (length p) (smash c2 c2)), (pow2heap (length p) (smash c2 c1))
(pow2heap (length p) (smash c2 a2)), (pow2heap (length p) (smash c2 a1)), (pow2heap (length p) (smash c2 gv1)), (pow2heap (length p) (smash c1 c2)), (pow2heap (length p) (smash c1 c1)), (pow2heap (length p) (smash c1 a2)), (pow2heap (length p) (smash c1 a1)), (pow2heap (length p) (smash c1 gv1)), (pow2heap (length p) (smash a2 c2)), (pow2heap (length p) (smash a2 c1))
(pow2heap (length p) (smash a2 a2)), (pow2heap (length p) (smash a2 a1)), (pow2heap (length p) (smash a2 gv1)), (pow2heap (length p) (smash a1 c2)), (pow2heap (length p) (smash a1 c1)), (pow2heap (length p) (smash a1 a2)), (pow2heap (length p) (smash a1 a1)), (pow2heap (length p) (smash a1 gv1)), (pow2heap (length p) (smash gv1 c2)), (pow2heap (length p) (smash gv1 c1))
(pow2heap (length p) (smash gv1 a2)), (pow2heap (length p) (smash gv1 a1)), (pow2heap (length p) (smash gv1 gv1)), (pow2heapp n1 n1 (Node n1 c2 c2)), (pow2heapp n1 n1 (Node n1 c2 c1)), (pow2heapp n1 n1 (Node n1 c2 a2)), (pow2heapp n1 n1 (Node n1 c2 a1)), (pow2heapp n1 n1 (Node n1 c2 gv1)), (pow2heapp n1 n1 (Node n1 c1 c2)), (pow2heapp n1 n1 (Node n1 c1 c1))
(pow2heapp n1 n1 (Node n1 c1 a2)), (pow2heapp n1 n1 (Node n1 c1 a1)), (pow2heapp n1 n1 (Node n1 c1 gv1)), (pow2heapp n1 n1 (Node n1 a2 c2)), (pow2heapp n1 n1 (Node n1 a2 c1)), (pow2heapp n1 n1 (Node n1 a2 a2)), (pow2heapp n1 n1 (Node n1 a2 a1)), (pow2heapp n1 n1 (Node n1 a2 gv1)), (pow2heapp n1 n1 (Node n1 a1 c2)), (pow2heapp n1 n1 (Node n1 a1 c1))
(pow2heapp n1 n1 (Node n1 a1 a2)), (pow2heapp n1 n1 (Node n1 a1 a1)), (pow2heapp n1 n1 (Node n1 a1 gv1)), (pow2heapp n1 n1 (Node n1 gv1 c2)), (pow2heapp n1 n1 (Node n1 gv1 c1)), (pow2heapp n1 n1 (Node n1 gv1 a2)), (pow2heapp n1 n1 (Node n1 gv1 a1)), (pow2heapp n1 n1 (Node n1 gv1 gv1)), (pow2heapp n1 n1 (Node n0 c2 c2)), (pow2heapp n1 n1 (Node n0 c2 c1))
(pow2heapp n1 n1 (Node n0 c2 a2)), (pow2heapp n1 n1 (Node n0 c2 a1)), (pow2heapp n1 n1 (Node n0 c2 gv1)), (pow2heapp n1 n1 (Node n0 c1 c2)), (pow2heapp n1 n1 (Node n0 c1 c1)), (pow2heapp n1 n1 (Node n0 c1 a2)), (pow2heapp n1 n1 (Node n0 c1 a1)), (pow2heapp n1 n1 (Node n0 c1 gv1)), (pow2heapp n1 n1 (Node n0 a2 c2)), (pow2heapp n1 n1 (Node n0 a2 c1))
(pow2heapp n1 n1 (Node n0 a2 a2)), (pow2heapp n1 n1 (Node n0 a2 a1)), (pow2heapp n1 n1 (Node n0 a2 gv1)), (pow2heapp n1 n1 (Node n0 a1 c2)), (pow2heapp n1 n1 (Node n0 a1 c1)), (pow2heapp n1 n1 (Node n0 a1 a2)), (pow2heapp n1 n1 (Node n0 a1 a1)), (pow2heapp n1 n1 (Node n0 a1 gv1)), (pow2heapp n1 n1 (Node n0 gv1 c2)), (pow2heapp n1 n1 (Node n0 gv1 c1))
(pow2heapp n1 n1 (Node n0 gv1 a2)), (pow2heapp n1 n1 (Node n0 gv1 a1)), (pow2heapp n1 n1 (Node n0 gv1 gv1)), (pow2heapp n1 n1 (Node n c2 c2)), (pow2heapp n1 n1 (Node n c2 c1)), (pow2heapp n1 n1 (Node n c2 a2)), (pow2heapp n1 n1 (Node n c2 a1)), (pow2heapp n1 n1 (Node n c2 gv1)), (pow2heapp n1 n1 (Node n c1 c2)), (pow2heapp n1 n1 (Node n c1 c1))
(pow2heapp n1 n1 (Node n c1 a2)), (pow2heapp n1 n1 (Node n c1 a1)), (pow2heapp n1 n1 (Node n c1 gv1)), (pow2heapp n1 n1 (Node n a2 c2)), (pow2heapp n1 n1 (Node n a2 c1)), (pow2heapp n1 n1 (Node n a2 a2)), (pow2heapp n1 n1 (Node n a2 a1)), (pow2heapp n1 n1 (Node n a2 gv1)), (pow2heapp n1 n1 (Node n a1 c2)), (pow2heapp n1 n1 (Node n a1 c1))
(pow2heapp n1 n1 (Node n a1 a2)), (pow2heapp n1 n1 (Node n a1 a1)), (pow2heapp n1 n1 (Node n a1 gv1)), (pow2heapp n1 n1 (Node n gv1 c2)), (pow2heapp n1 n1 (Node n gv1 c1)), (pow2heapp n1 n1 (Node n gv1 a2)), (pow2heapp n1 n1 (Node n gv1 a1)), (pow2heapp n1 n1 (Node n gv1 gv1)), (pow2heapp n1 n1 (smash c2 c2)), (pow2heapp n1 n1 (smash c2 c1))
(pow2heapp n1 n1 (smash c2 a2)), (pow2heapp n1 n1 (smash c2 a1)), (pow2heapp n1 n1 (smash c2 gv1)), (pow2heapp n1 n1 (smash c1 c2)), (pow2heapp n1 n1 (smash c1 c1)), (pow2heapp n1 n1 (smash c1 a2)), (pow2heapp n1 n1 (smash c1 a1)), (pow2heapp n1 n1 (smash c1 gv1)), (pow2heapp n1 n1 (smash a2 c2)), (pow2heapp n1 n1 (smash a2 c1))
(pow2heapp n1 n1 (smash a2 a2)), (pow2heapp n1 n1 (smash a2 a1)), (pow2heapp n1 n1 (smash a2 gv1)), (pow2heapp n1 n1 (smash a1 c2)), (pow2heapp n1 n1 (smash a1 c1)), (pow2heapp n1 n1 (smash a1 a2)), (pow2heapp n1 n1 (smash a1 a1)), (pow2heapp n1 n1 (smash a1 gv1)), (pow2heapp n1 n1 (smash gv1 c2)), (pow2heapp n1 n1 (smash gv1 c1))
(pow2heapp n1 n1 (smash gv1 a2)), (pow2heapp n1 n1 (smash gv1 a1)), (pow2heapp n1 n1 (smash gv1 gv1)), (pow2heapp n1 n1 Leaf), (pow2heapp n1 n0 (Node n1 c2 c2)), (pow2heapp n1 n0 (Node n1 c2 c1)), (pow2heapp n1 n0 (Node n1 c2 a2)), (pow2heapp n1 n0 (Node n1 c2 a1)), (pow2heapp n1 n0 (Node n1 c2 gv1)), (pow2heapp n1 n0 (Node n1 c1 c2))
(pow2heapp n1 n0 (Node n1 c1 c1)), (pow2heapp n1 n0 (Node n1 c1 a2)), (pow2heapp n1 n0 (Node n1 c1 a1)), (pow2heapp n1 n0 (Node n1 c1 gv1)), (pow2heapp n1 n0 (Node n1 a2 c2)), (pow2heapp n1 n0 (Node n1 a2 c1)), (pow2heapp n1 n0 (Node n1 a2 a2)), (pow2heapp n1 n0 (Node n1 a2 a1)), (pow2heapp n1 n0 (Node n1 a2 gv1)), (pow2heapp n1 n0 (Node n1 a1 c2))
(pow2heapp n1 n0 (Node n1 a1 c1)), (pow2heapp n1 n0 (Node n1 a1 a2)), (pow2heapp n1 n0 (Node n1 a1 a1)), (pow2heapp n1 n0 (Node n1 a1 gv1)), (pow2heapp n1 n0 (Node n1 gv1 c2)), (pow2heapp n1 n0 (Node n1 gv1 c1)), (pow2heapp n1 n0 (Node n1 gv1 a2)), (pow2heapp n1 n0 (Node n1 gv1 a1)), (pow2heapp n1 n0 (Node n1 gv1 gv1)), (pow2heapp n1 n0 (Node n0 c2 c2))
(pow2heapp n1 n0 (Node n0 c2 c1)), (pow2heapp n1 n0 (Node n0 c2 a2)), (pow2heapp n1 n0 (Node n0 c2 a1)), (pow2heapp n1 n0 (Node n0 c2 gv1)), (pow2heapp n1 n0 (Node n0 c1 c2)), (pow2heapp n1 n0 (Node n0 c1 c1)), (pow2heapp n1 n0 (Node n0 c1 a2)), (pow2heapp n1 n0 (Node n0 c1 a1)), (pow2heapp n1 n0 (Node n0 c1 gv1)), (pow2heapp n1 n0 (Node n0 a2 c2))
(pow2heapp n1 n0 (Node n0 a2 c1)), (pow2heapp n1 n0 (Node n0 a2 a2)), (pow2heapp n1 n0 (Node n0 a2 a1)), (pow2heapp n1 n0 (Node n0 a2 gv1)), (pow2heapp n1 n0 (Node n0 a1 c2)), (pow2heapp n1 n0 (Node n0 a1 c1)), (pow2heapp n1 n0 (Node n0 a1 a2)), (pow2heapp n1 n0 (Node n0 a1 a1)), (pow2heapp n1 n0 (Node n0 a1 gv1)), (pow2heapp n1 n0 (Node n0 gv1 c2))
(pow2heapp n1 n0 (Node n0 gv1 c1)), (pow2heapp n1 n0 (Node n0 gv1 a2)), (pow2heapp n1 n0 (Node n0 gv1 a1)), (pow2heapp n1 n0 (Node n0 gv1 gv1)), (pow2heapp n1 n0 (Node n c2 c2)), (pow2heapp n1 n0 (Node n c2 c1)), (pow2heapp n1 n0 (Node n c2 a2)), (pow2heapp n1 n0 (Node n c2 a1)), (pow2heapp n1 n0 (Node n c2 gv1)), (pow2heapp n1 n0 (Node n c1 c2))
(pow2heapp n1 n0 (Node n c1 c1)), (pow2heapp n1 n0 (Node n c1 a2)), (pow2heapp n1 n0 (Node n c1 a1)), (pow2heapp n1 n0 (Node n c1 gv1)), (pow2heapp n1 n0 (Node n a2 c2)), (pow2heapp n1 n0 (Node n a2 c1)), (pow2heapp n1 n0 (Node n a2 a2)), (pow2heapp n1 n0 (Node n a2 a1)), (pow2heapp n1 n0 (Node n a2 gv1)), (pow2heapp n1 n0 (Node n a1 c2))
(pow2heapp n1 n0 (Node n a1 c1)), (pow2heapp n1 n0 (Node n a1 a2)), (pow2heapp n1 n0 (Node n a1 a1)), (pow2heapp n1 n0 (Node n a1 gv1)), (pow2heapp n1 n0 (Node n gv1 c2)), (pow2heapp n1 n0 (Node n gv1 c1)), (pow2heapp n1 n0 (Node n gv1 a2)), (pow2heapp n1 n0 (Node n gv1 a1)), (pow2heapp n1 n0 (Node n gv1 gv1)), (pow2heapp n1 n0 (smash c2 c2))
(pow2heapp n1 n0 (smash c2 c1)), (pow2heapp n1 n0 (smash c2 a2)), (pow2heapp n1 n0 (smash c2 a1)), (pow2heapp n1 n0 (smash c2 gv1)), (pow2heapp n1 n0 (smash c1 c2)), (pow2heapp n1 n0 (smash c1 c1)), (pow2heapp n1 n0 (smash c1 a2)), (pow2heapp n1 n0 (smash c1 a1)), (pow2heapp n1 n0 (smash c1 gv1)), (pow2heapp n1 n0 (smash a2 c2))
(pow2heapp n1 n0 (smash a2 c1)), (pow2heapp n1 n0 (smash a2 a2)), (pow2heapp n1 n0 (smash a2 a1)), (pow2heapp n1 n0 (smash a2 gv1)), (pow2heapp n1 n0 (smash a1 c2)), (pow2heapp n1 n0 (smash a1 c1)), (pow2heapp n1 n0 (smash a1 a2)), (pow2heapp n1 n0 (smash a1 a1)), (pow2heapp n1 n0 (smash a1 gv1)), (pow2heapp n1 n0 (smash gv1 c2))
(pow2heapp n1 n0 (smash gv1 c1)), (pow2heapp n1 n0 (smash gv1 a2)), (pow2heapp n1 n0 (smash gv1 a1)), (pow2heapp n1 n0 (smash gv1 gv1)), (pow2heapp n1 n0 Leaf), (pow2heapp n1 n (Node n1 c2 c2)), (pow2heapp n1 n (Node n1 c2 c1)), (pow2heapp n1 n (Node n1 c2 a2)), (pow2heapp n1 n (Node n1 c2 a1)), (pow2heapp n1 n (Node n1 c2 gv1))
(pow2heapp n1 n (Node n1 c1 c2)), (pow2heapp n1 n (Node n1 c1 c1)), (pow2heapp n1 n (Node n1 c1 a2)), (pow2heapp n1 n (Node n1 c1 a1)), (pow2heapp n1 n (Node n1 c1 gv1)), (pow2heapp n1 n (Node n1 a2 c2)), (pow2heapp n1 n (Node n1 a2 c1)), (pow2heapp n1 n (Node n1 a2 a2)), (pow2heapp n1 n (Node n1 a2 a1)), (pow2heapp n1 n (Node n1 a2 gv1))
(pow2heapp n1 n (Node n1 a1 c2)), (pow2heapp n1 n (Node n1 a1 c1)), (pow2heapp n1 n (Node n1 a1 a2)), (pow2heapp n1 n (Node n1 a1 a1)), (pow2heapp n1 n (Node n1 a1 gv1)), (pow2heapp n1 n (Node n1 gv1 c2)), (pow2heapp n1 n (Node n1 gv1 c1)), (pow2heapp n1 n (Node n1 gv1 a2)), (pow2heapp n1 n (Node n1 gv1 a1)), (pow2heapp n1 n (Node n1 gv1 gv1))
(pow2heapp n1 n (Node n0 c2 c2)), (pow2heapp n1 n (Node n0 c2 c1)), (pow2heapp n1 n (Node n0 c2 a2)), (pow2heapp n1 n (Node n0 c2 a1)), (pow2heapp n1 n (Node n0 c2 gv1)), (pow2heapp n1 n (Node n0 c1 c2)), (pow2heapp n1 n (Node n0 c1 c1)), (pow2heapp n1 n (Node n0 c1 a2)), (pow2heapp n1 n (Node n0 c1 a1)), (pow2heapp n1 n (Node n0 c1 gv1))
(pow2heapp n1 n (Node n0 a2 c2)), (pow2heapp n1 n (Node n0 a2 c1)), (pow2heapp n1 n (Node n0 a2 a2)), (pow2heapp n1 n (Node n0 a2 a1)), (pow2heapp n1 n (Node n0 a2 gv1)), (pow2heapp n1 n (Node n0 a1 c2)), (pow2heapp n1 n (Node n0 a1 c1)), (pow2heapp n1 n (Node n0 a1 a2)), (pow2heapp n1 n (Node n0 a1 a1)), (pow2heapp n1 n (Node n0 a1 gv1))
(pow2heapp n1 n (Node n0 gv1 c2)), (pow2heapp n1 n (Node n0 gv1 c1)), (pow2heapp n1 n (Node n0 gv1 a2)), (pow2heapp n1 n (Node n0 gv1 a1)), (pow2heapp n1 n (Node n0 gv1 gv1)), (pow2heapp n1 n (Node n c2 c2)), (pow2heapp n1 n (Node n c2 c1)), (pow2heapp n1 n (Node n c2 a2)), (pow2heapp n1 n (Node n c2 a1)), (pow2heapp n1 n (Node n c2 gv1))
(pow2heapp n1 n (Node n c1 c2)), (pow2heapp n1 n (Node n c1 c1)), (pow2heapp n1 n (Node n c1 a2)), (pow2heapp n1 n (Node n c1 a1)), (pow2heapp n1 n (Node n c1 gv1)), (pow2heapp n1 n (Node n a2 c2)), (pow2heapp n1 n (Node n a2 c1)), (pow2heapp n1 n (Node n a2 a2)), (pow2heapp n1 n (Node n a2 a1)), (pow2heapp n1 n (Node n a2 gv1))
(pow2heapp n1 n (Node n a1 c2)), (pow2heapp n1 n (Node n a1 c1)), (pow2heapp n1 n (Node n a1 a2)), (pow2heapp n1 n (Node n a1 a1)), (pow2heapp n1 n (Node n a1 gv1)), (pow2heapp n1 n (Node n gv1 c2)), (pow2heapp n1 n (Node n gv1 c1)), (pow2heapp n1 n (Node n gv1 a2)), (pow2heapp n1 n (Node n gv1 a1)), (pow2heapp n1 n (Node n gv1 gv1))
(pow2heapp n1 n (smash c2 c2)), (pow2heapp n1 n (smash c2 c1)), (pow2heapp n1 n (smash c2 a2)), (pow2heapp n1 n (smash c2 a1)), (pow2heapp n1 n (smash c2 gv1)), (pow2heapp n1 n (smash c1 c2)), (pow2heapp n1 n (smash c1 c1)), (pow2heapp n1 n (smash c1 a2)), (pow2heapp n1 n (smash c1 a1)), (pow2heapp n1 n (smash c1 gv1))
(pow2heapp n1 n (smash a2 c2)), (pow2heapp n1 n (smash a2 c1)), (pow2heapp n1 n (smash a2 a2)), (pow2heapp n1 n (smash a2 a1)), (pow2heapp n1 n (smash a2 gv1)), (pow2heapp n1 n (smash a1 c2)), (pow2heapp n1 n (smash a1 c1)), (pow2heapp n1 n (smash a1 a2)), (pow2heapp n1 n (smash a1 a1)), (pow2heapp n1 n (smash a1 gv1))
(pow2heapp n1 n (smash gv1 c2)), (pow2heapp n1 n (smash gv1 c1)), (pow2heapp n1 n (smash gv1 a2)), (pow2heapp n1 n (smash gv1 a1)), (pow2heapp n1 n (smash gv1 gv1)), (pow2heapp n1 n Leaf), (pow2heapp n1 (find_max' n1 p) c2), (pow2heapp n1 (find_max' n1 p) c1), (pow2heapp n1 (find_max' n1 p) a2), (pow2heapp n1 (find_max' n1 p) a1)
(pow2heapp n1 (find_max' n1 p) gv1), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n0 gv1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n c2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n c1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n c1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n1 p) (Node n a2 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n a1 a1))
(pow2heapp n1 (find_max' n1 p) (Node n a1 gv1)), (pow2heapp n1 (find_max' n1 p) (Node n gv1 c2)), (pow2heapp n1 (find_max' n1 p) (Node n gv1 c1)), (pow2heapp n1 (find_max' n1 p) (Node n gv1 a2)), (pow2heapp n1 (find_max' n1 p) (Node n gv1 a1)), (pow2heapp n1 (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp n1 (find_max' n1 p) (smash c2 c2)), (pow2heapp n1 (find_max' n1 p) (smash c2 c1)), (pow2heapp n1 (find_max' n1 p) (smash c2 a2)), (pow2heapp n1 (find_max' n1 p) (smash c2 a1))
(pow2heapp n1 (find_max' n1 p) (smash c2 gv1)), (pow2heapp n1 (find_max' n1 p) (smash c1 c2)), (pow2heapp n1 (find_max' n1 p) (smash c1 c1)), (pow2heapp n1 (find_max' n1 p) (smash c1 a2)), (pow2heapp n1 (find_max' n1 p) (smash c1 a1)), (pow2heapp n1 (find_max' n1 p) (smash c1 gv1)), (pow2heapp n1 (find_max' n1 p) (smash a2 c2)), (pow2heapp n1 (find_max' n1 p) (smash a2 c1)), (pow2heapp n1 (find_max' n1 p) (smash a2 a2)), (pow2heapp n1 (find_max' n1 p) (smash a2 a1))
(pow2heapp n1 (find_max' n1 p) (smash a2 gv1)), (pow2heapp n1 (find_max' n1 p) (smash a1 c2)), (pow2heapp n1 (find_max' n1 p) (smash a1 c1)), (pow2heapp n1 (find_max' n1 p) (smash a1 a2)), (pow2heapp n1 (find_max' n1 p) (smash a1 a1)), (pow2heapp n1 (find_max' n1 p) (smash a1 gv1)), (pow2heapp n1 (find_max' n1 p) (smash gv1 c2)), (pow2heapp n1 (find_max' n1 p) (smash gv1 c1)), (pow2heapp n1 (find_max' n1 p) (smash gv1 a2)), (pow2heapp n1 (find_max' n1 p) (smash gv1 a1))
(pow2heapp n1 (find_max' n1 p) (smash gv1 gv1)), (pow2heapp n1 (find_max' n1 p) Leaf), (pow2heapp n1 (find_max' n0 p) c2), (pow2heapp n1 (find_max' n0 p) c1), (pow2heapp n1 (find_max' n0 p) a2), (pow2heapp n1 (find_max' n0 p) a1), (pow2heapp n1 (find_max' n0 p) gv1), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n c1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 a2))
(pow2heapp n1 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a2 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n1 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n a1 gv1)), (pow2heapp n1 (find_max' n0 p) (Node n gv1 c2)), (pow2heapp n1 (find_max' n0 p) (Node n gv1 c1)), (pow2heapp n1 (find_max' n0 p) (Node n gv1 a2))
(pow2heapp n1 (find_max' n0 p) (Node n gv1 a1)), (pow2heapp n1 (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp n1 (find_max' n0 p) (smash c2 c2)), (pow2heapp n1 (find_max' n0 p) (smash c2 c1)), (pow2heapp n1 (find_max' n0 p) (smash c2 a2)), (pow2heapp n1 (find_max' n0 p) (smash c2 a1)), (pow2heapp n1 (find_max' n0 p) (smash c2 gv1)), (pow2heapp n1 (find_max' n0 p) (smash c1 c2)), (pow2heapp n1 (find_max' n0 p) (smash c1 c1)), (pow2heapp n1 (find_max' n0 p) (smash c1 a2))
(pow2heapp n1 (find_max' n0 p) (smash c1 a1)), (pow2heapp n1 (find_max' n0 p) (smash c1 gv1)), (pow2heapp n1 (find_max' n0 p) (smash a2 c2)), (pow2heapp n1 (find_max' n0 p) (smash a2 c1)), (pow2heapp n1 (find_max' n0 p) (smash a2 a2)), (pow2heapp n1 (find_max' n0 p) (smash a2 a1)), (pow2heapp n1 (find_max' n0 p) (smash a2 gv1)), (pow2heapp n1 (find_max' n0 p) (smash a1 c2)), (pow2heapp n1 (find_max' n0 p) (smash a1 c1)), (pow2heapp n1 (find_max' n0 p) (smash a1 a2))
(pow2heapp n1 (find_max' n0 p) (smash a1 a1)), (pow2heapp n1 (find_max' n0 p) (smash a1 gv1)), (pow2heapp n1 (find_max' n0 p) (smash gv1 c2)), (pow2heapp n1 (find_max' n0 p) (smash gv1 c1)), (pow2heapp n1 (find_max' n0 p) (smash gv1 a2)), (pow2heapp n1 (find_max' n0 p) (smash gv1 a1)), (pow2heapp n1 (find_max' n0 p) (smash gv1 gv1)), (pow2heapp n1 (find_max' n0 p) Leaf), (pow2heapp n1 (find_max' n p) c2), (pow2heapp n1 (find_max' n p) c1)
(pow2heapp n1 (find_max' n p) a2), (pow2heapp n1 (find_max' n p) a1), (pow2heapp n1 (find_max' n p) gv1), (pow2heapp n1 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c2 gv1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 c1 gv1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a2 gv1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 c1))
(pow2heapp n1 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 a1 gv1)), (pow2heapp n1 (find_max' n p) (Node n1 gv1 c2)), (pow2heapp n1 (find_max' n p) (Node n1 gv1 c1)), (pow2heapp n1 (find_max' n p) (Node n1 gv1 a2)), (pow2heapp n1 (find_max' n p) (Node n1 gv1 a1)), (pow2heapp n1 (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c2 gv1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 c1 gv1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 c1))
(pow2heapp n1 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a2 gv1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 a1 gv1)), (pow2heapp n1 (find_max' n p) (Node n0 gv1 c2)), (pow2heapp n1 (find_max' n p) (Node n0 gv1 c1))
(pow2heapp n1 (find_max' n p) (Node n0 gv1 a2)), (pow2heapp n1 (find_max' n p) (Node n0 gv1 a1)), (pow2heapp n1 (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp n1 (find_max' n p) (Node n c2 c2)), (pow2heapp n1 (find_max' n p) (Node n c2 c1)), (pow2heapp n1 (find_max' n p) (Node n c2 a2)), (pow2heapp n1 (find_max' n p) (Node n c2 a1)), (pow2heapp n1 (find_max' n p) (Node n c2 gv1)), (pow2heapp n1 (find_max' n p) (Node n c1 c2)), (pow2heapp n1 (find_max' n p) (Node n c1 c1))
(pow2heapp n1 (find_max' n p) (Node n c1 a2)), (pow2heapp n1 (find_max' n p) (Node n c1 a1)), (pow2heapp n1 (find_max' n p) (Node n c1 gv1)), (pow2heapp n1 (find_max' n p) (Node n a2 c2)), (pow2heapp n1 (find_max' n p) (Node n a2 c1)), (pow2heapp n1 (find_max' n p) (Node n a2 a2)), (pow2heapp n1 (find_max' n p) (Node n a2 a1)), (pow2heapp n1 (find_max' n p) (Node n a2 gv1)), (pow2heapp n1 (find_max' n p) (Node n a1 c2)), (pow2heapp n1 (find_max' n p) (Node n a1 c1))
(pow2heapp n1 (find_max' n p) (Node n a1 a2)), (pow2heapp n1 (find_max' n p) (Node n a1 a1)), (pow2heapp n1 (find_max' n p) (Node n a1 gv1)), (pow2heapp n1 (find_max' n p) (Node n gv1 c2)), (pow2heapp n1 (find_max' n p) (Node n gv1 c1)), (pow2heapp n1 (find_max' n p) (Node n gv1 a2)), (pow2heapp n1 (find_max' n p) (Node n gv1 a1)), (pow2heapp n1 (find_max' n p) (Node n gv1 gv1)), (pow2heapp n1 (find_max' n p) (smash c2 c2)), (pow2heapp n1 (find_max' n p) (smash c2 c1))
(pow2heapp n1 (find_max' n p) (smash c2 a2)), (pow2heapp n1 (find_max' n p) (smash c2 a1)), (pow2heapp n1 (find_max' n p) (smash c2 gv1)), (pow2heapp n1 (find_max' n p) (smash c1 c2)), (pow2heapp n1 (find_max' n p) (smash c1 c1)), (pow2heapp n1 (find_max' n p) (smash c1 a2)), (pow2heapp n1 (find_max' n p) (smash c1 a1)), (pow2heapp n1 (find_max' n p) (smash c1 gv1)), (pow2heapp n1 (find_max' n p) (smash a2 c2)), (pow2heapp n1 (find_max' n p) (smash a2 c1))
(pow2heapp n1 (find_max' n p) (smash a2 a2)), (pow2heapp n1 (find_max' n p) (smash a2 a1)), (pow2heapp n1 (find_max' n p) (smash a2 gv1)), (pow2heapp n1 (find_max' n p) (smash a1 c2)), (pow2heapp n1 (find_max' n p) (smash a1 c1)), (pow2heapp n1 (find_max' n p) (smash a1 a2)), (pow2heapp n1 (find_max' n p) (smash a1 a1)), (pow2heapp n1 (find_max' n p) (smash a1 gv1)), (pow2heapp n1 (find_max' n p) (smash gv1 c2)), (pow2heapp n1 (find_max' n p) (smash gv1 c1))
(pow2heapp n1 (find_max' n p) (smash gv1 a2)), (pow2heapp n1 (find_max' n p) (smash gv1 a1)), (pow2heapp n1 (find_max' n p) (smash gv1 gv1)), (pow2heapp n1 (find_max' n p) Leaf), (pow2heapp n1 (length p) c2), (pow2heapp n1 (length p) c1), (pow2heapp n1 (length p) a2), (pow2heapp n1 (length p) a1), (pow2heapp n1 (length p) gv1), (pow2heapp n1 (length p) (Node n1 c2 c2))
(pow2heapp n1 (length p) (Node n1 c2 c1)), (pow2heapp n1 (length p) (Node n1 c2 a2)), (pow2heapp n1 (length p) (Node n1 c2 a1)), (pow2heapp n1 (length p) (Node n1 c2 gv1)), (pow2heapp n1 (length p) (Node n1 c1 c2)), (pow2heapp n1 (length p) (Node n1 c1 c1)), (pow2heapp n1 (length p) (Node n1 c1 a2)), (pow2heapp n1 (length p) (Node n1 c1 a1)), (pow2heapp n1 (length p) (Node n1 c1 gv1)), (pow2heapp n1 (length p) (Node n1 a2 c2))
(pow2heapp n1 (length p) (Node n1 a2 c1)), (pow2heapp n1 (length p) (Node n1 a2 a2)), (pow2heapp n1 (length p) (Node n1 a2 a1)), (pow2heapp n1 (length p) (Node n1 a2 gv1)), (pow2heapp n1 (length p) (Node n1 a1 c2)), (pow2heapp n1 (length p) (Node n1 a1 c1)), (pow2heapp n1 (length p) (Node n1 a1 a2)), (pow2heapp n1 (length p) (Node n1 a1 a1)), (pow2heapp n1 (length p) (Node n1 a1 gv1)), (pow2heapp n1 (length p) (Node n1 gv1 c2))
(pow2heapp n1 (length p) (Node n1 gv1 c1)), (pow2heapp n1 (length p) (Node n1 gv1 a2)), (pow2heapp n1 (length p) (Node n1 gv1 a1)), (pow2heapp n1 (length p) (Node n1 gv1 gv1)), (pow2heapp n1 (length p) (Node n0 c2 c2)), (pow2heapp n1 (length p) (Node n0 c2 c1)), (pow2heapp n1 (length p) (Node n0 c2 a2)), (pow2heapp n1 (length p) (Node n0 c2 a1)), (pow2heapp n1 (length p) (Node n0 c2 gv1)), (pow2heapp n1 (length p) (Node n0 c1 c2))
(pow2heapp n1 (length p) (Node n0 c1 c1)), (pow2heapp n1 (length p) (Node n0 c1 a2)), (pow2heapp n1 (length p) (Node n0 c1 a1)), (pow2heapp n1 (length p) (Node n0 c1 gv1)), (pow2heapp n1 (length p) (Node n0 a2 c2)), (pow2heapp n1 (length p) (Node n0 a2 c1)), (pow2heapp n1 (length p) (Node n0 a2 a2)), (pow2heapp n1 (length p) (Node n0 a2 a1)), (pow2heapp n1 (length p) (Node n0 a2 gv1)), (pow2heapp n1 (length p) (Node n0 a1 c2))
(pow2heapp n1 (length p) (Node n0 a1 c1)), (pow2heapp n1 (length p) (Node n0 a1 a2)), (pow2heapp n1 (length p) (Node n0 a1 a1)), (pow2heapp n1 (length p) (Node n0 a1 gv1)), (pow2heapp n1 (length p) (Node n0 gv1 c2)), (pow2heapp n1 (length p) (Node n0 gv1 c1)), (pow2heapp n1 (length p) (Node n0 gv1 a2)), (pow2heapp n1 (length p) (Node n0 gv1 a1)), (pow2heapp n1 (length p) (Node n0 gv1 gv1)), (pow2heapp n1 (length p) (Node n c2 c2))
(pow2heapp n1 (length p) (Node n c2 c1)), (pow2heapp n1 (length p) (Node n c2 a2)), (pow2heapp n1 (length p) (Node n c2 a1)), (pow2heapp n1 (length p) (Node n c2 gv1)), (pow2heapp n1 (length p) (Node n c1 c2)), (pow2heapp n1 (length p) (Node n c1 c1)), (pow2heapp n1 (length p) (Node n c1 a2)), (pow2heapp n1 (length p) (Node n c1 a1)), (pow2heapp n1 (length p) (Node n c1 gv1)), (pow2heapp n1 (length p) (Node n a2 c2))
(pow2heapp n1 (length p) (Node n a2 c1)), (pow2heapp n1 (length p) (Node n a2 a2)), (pow2heapp n1 (length p) (Node n a2 a1)), (pow2heapp n1 (length p) (Node n a2 gv1)), (pow2heapp n1 (length p) (Node n a1 c2)), (pow2heapp n1 (length p) (Node n a1 c1)), (pow2heapp n1 (length p) (Node n a1 a2)), (pow2heapp n1 (length p) (Node n a1 a1)), (pow2heapp n1 (length p) (Node n a1 gv1)), (pow2heapp n1 (length p) (Node n gv1 c2))
(pow2heapp n1 (length p) (Node n gv1 c1)), (pow2heapp n1 (length p) (Node n gv1 a2)), (pow2heapp n1 (length p) (Node n gv1 a1)), (pow2heapp n1 (length p) (Node n gv1 gv1)), (pow2heapp n1 (length p) (smash c2 c2)), (pow2heapp n1 (length p) (smash c2 c1)), (pow2heapp n1 (length p) (smash c2 a2)), (pow2heapp n1 (length p) (smash c2 a1)), (pow2heapp n1 (length p) (smash c2 gv1)), (pow2heapp n1 (length p) (smash c1 c2))
(pow2heapp n1 (length p) (smash c1 c1)), (pow2heapp n1 (length p) (smash c1 a2)), (pow2heapp n1 (length p) (smash c1 a1)), (pow2heapp n1 (length p) (smash c1 gv1)), (pow2heapp n1 (length p) (smash a2 c2)), (pow2heapp n1 (length p) (smash a2 c1)), (pow2heapp n1 (length p) (smash a2 a2)), (pow2heapp n1 (length p) (smash a2 a1)), (pow2heapp n1 (length p) (smash a2 gv1)), (pow2heapp n1 (length p) (smash a1 c2))
(pow2heapp n1 (length p) (smash a1 c1)), (pow2heapp n1 (length p) (smash a1 a2)), (pow2heapp n1 (length p) (smash a1 a1)), (pow2heapp n1 (length p) (smash a1 gv1)), (pow2heapp n1 (length p) (smash gv1 c2)), (pow2heapp n1 (length p) (smash gv1 c1)), (pow2heapp n1 (length p) (smash gv1 a2)), (pow2heapp n1 (length p) (smash gv1 a1)), (pow2heapp n1 (length p) (smash gv1 gv1)), (pow2heapp n1 (length p) Leaf)
(pow2heapp n0 n1 (Node n1 c2 c2)), (pow2heapp n0 n1 (Node n1 c2 c1)), (pow2heapp n0 n1 (Node n1 c2 a2)), (pow2heapp n0 n1 (Node n1 c2 a1)), (pow2heapp n0 n1 (Node n1 c2 gv1)), (pow2heapp n0 n1 (Node n1 c1 c2)), (pow2heapp n0 n1 (Node n1 c1 c1)), (pow2heapp n0 n1 (Node n1 c1 a2)), (pow2heapp n0 n1 (Node n1 c1 a1)), (pow2heapp n0 n1 (Node n1 c1 gv1))
(pow2heapp n0 n1 (Node n1 a2 c2)), (pow2heapp n0 n1 (Node n1 a2 c1)), (pow2heapp n0 n1 (Node n1 a2 a2)), (pow2heapp n0 n1 (Node n1 a2 a1)), (pow2heapp n0 n1 (Node n1 a2 gv1)), (pow2heapp n0 n1 (Node n1 a1 c2)), (pow2heapp n0 n1 (Node n1 a1 c1)), (pow2heapp n0 n1 (Node n1 a1 a2)), (pow2heapp n0 n1 (Node n1 a1 a1)), (pow2heapp n0 n1 (Node n1 a1 gv1))
(pow2heapp n0 n1 (Node n1 gv1 c2)), (pow2heapp n0 n1 (Node n1 gv1 c1)), (pow2heapp n0 n1 (Node n1 gv1 a2)), (pow2heapp n0 n1 (Node n1 gv1 a1)), (pow2heapp n0 n1 (Node n1 gv1 gv1)), (pow2heapp n0 n1 (Node n0 c2 c2)), (pow2heapp n0 n1 (Node n0 c2 c1)), (pow2heapp n0 n1 (Node n0 c2 a2)), (pow2heapp n0 n1 (Node n0 c2 a1)), (pow2heapp n0 n1 (Node n0 c2 gv1))
(pow2heapp n0 n1 (Node n0 c1 c2)), (pow2heapp n0 n1 (Node n0 c1 c1)), (pow2heapp n0 n1 (Node n0 c1 a2)), (pow2heapp n0 n1 (Node n0 c1 a1)), (pow2heapp n0 n1 (Node n0 c1 gv1)), (pow2heapp n0 n1 (Node n0 a2 c2)), (pow2heapp n0 n1 (Node n0 a2 c1)), (pow2heapp n0 n1 (Node n0 a2 a2)), (pow2heapp n0 n1 (Node n0 a2 a1)), (pow2heapp n0 n1 (Node n0 a2 gv1))
(pow2heapp n0 n1 (Node n0 a1 c2)), (pow2heapp n0 n1 (Node n0 a1 c1)), (pow2heapp n0 n1 (Node n0 a1 a2)), (pow2heapp n0 n1 (Node n0 a1 a1)), (pow2heapp n0 n1 (Node n0 a1 gv1)), (pow2heapp n0 n1 (Node n0 gv1 c2)), (pow2heapp n0 n1 (Node n0 gv1 c1)), (pow2heapp n0 n1 (Node n0 gv1 a2)), (pow2heapp n0 n1 (Node n0 gv1 a1)), (pow2heapp n0 n1 (Node n0 gv1 gv1))
(pow2heapp n0 n1 (Node n c2 c2)), (pow2heapp n0 n1 (Node n c2 c1)), (pow2heapp n0 n1 (Node n c2 a2)), (pow2heapp n0 n1 (Node n c2 a1)), (pow2heapp n0 n1 (Node n c2 gv1)), (pow2heapp n0 n1 (Node n c1 c2)), (pow2heapp n0 n1 (Node n c1 c1)), (pow2heapp n0 n1 (Node n c1 a2)), (pow2heapp n0 n1 (Node n c1 a1)), (pow2heapp n0 n1 (Node n c1 gv1))
(pow2heapp n0 n1 (Node n a2 c2)), (pow2heapp n0 n1 (Node n a2 c1)), (pow2heapp n0 n1 (Node n a2 a2)), (pow2heapp n0 n1 (Node n a2 a1)), (pow2heapp n0 n1 (Node n a2 gv1)), (pow2heapp n0 n1 (Node n a1 c2)), (pow2heapp n0 n1 (Node n a1 c1)), (pow2heapp n0 n1 (Node n a1 a2)), (pow2heapp n0 n1 (Node n a1 a1)), (pow2heapp n0 n1 (Node n a1 gv1))
(pow2heapp n0 n1 (Node n gv1 c2)), (pow2heapp n0 n1 (Node n gv1 c1)), (pow2heapp n0 n1 (Node n gv1 a2)), (pow2heapp n0 n1 (Node n gv1 a1)), (pow2heapp n0 n1 (Node n gv1 gv1)), (pow2heapp n0 n1 (smash c2 c2)), (pow2heapp n0 n1 (smash c2 c1)), (pow2heapp n0 n1 (smash c2 a2)), (pow2heapp n0 n1 (smash c2 a1)), (pow2heapp n0 n1 (smash c2 gv1))
(pow2heapp n0 n1 (smash c1 c2)), (pow2heapp n0 n1 (smash c1 c1)), (pow2heapp n0 n1 (smash c1 a2)), (pow2heapp n0 n1 (smash c1 a1)), (pow2heapp n0 n1 (smash c1 gv1)), (pow2heapp n0 n1 (smash a2 c2)), (pow2heapp n0 n1 (smash a2 c1)), (pow2heapp n0 n1 (smash a2 a2)), (pow2heapp n0 n1 (smash a2 a1)), (pow2heapp n0 n1 (smash a2 gv1))
(pow2heapp n0 n1 (smash a1 c2)), (pow2heapp n0 n1 (smash a1 c1)), (pow2heapp n0 n1 (smash a1 a2)), (pow2heapp n0 n1 (smash a1 a1)), (pow2heapp n0 n1 (smash a1 gv1)), (pow2heapp n0 n1 (smash gv1 c2)), (pow2heapp n0 n1 (smash gv1 c1)), (pow2heapp n0 n1 (smash gv1 a2)), (pow2heapp n0 n1 (smash gv1 a1)), (pow2heapp n0 n1 (smash gv1 gv1))
(pow2heapp n0 n1 Leaf), (pow2heapp n0 n0 (Node n1 c2 c2)), (pow2heapp n0 n0 (Node n1 c2 c1)), (pow2heapp n0 n0 (Node n1 c2 a2)), (pow2heapp n0 n0 (Node n1 c2 a1)), (pow2heapp n0 n0 (Node n1 c2 gv1)), (pow2heapp n0 n0 (Node n1 c1 c2)), (pow2heapp n0 n0 (Node n1 c1 c1)), (pow2heapp n0 n0 (Node n1 c1 a2)), (pow2heapp n0 n0 (Node n1 c1 a1))
(pow2heapp n0 n0 (Node n1 c1 gv1)), (pow2heapp n0 n0 (Node n1 a2 c2)), (pow2heapp n0 n0 (Node n1 a2 c1)), (pow2heapp n0 n0 (Node n1 a2 a2)), (pow2heapp n0 n0 (Node n1 a2 a1)), (pow2heapp n0 n0 (Node n1 a2 gv1)), (pow2heapp n0 n0 (Node n1 a1 c2)), (pow2heapp n0 n0 (Node n1 a1 c1)), (pow2heapp n0 n0 (Node n1 a1 a2)), (pow2heapp n0 n0 (Node n1 a1 a1))
(pow2heapp n0 n0 (Node n1 a1 gv1)), (pow2heapp n0 n0 (Node n1 gv1 c2)), (pow2heapp n0 n0 (Node n1 gv1 c1)), (pow2heapp n0 n0 (Node n1 gv1 a2)), (pow2heapp n0 n0 (Node n1 gv1 a1)), (pow2heapp n0 n0 (Node n1 gv1 gv1)), (pow2heapp n0 n0 (Node n0 c2 c2)), (pow2heapp n0 n0 (Node n0 c2 c1)), (pow2heapp n0 n0 (Node n0 c2 a2)), (pow2heapp n0 n0 (Node n0 c2 a1))
(pow2heapp n0 n0 (Node n0 c2 gv1)), (pow2heapp n0 n0 (Node n0 c1 c2)), (pow2heapp n0 n0 (Node n0 c1 c1)), (pow2heapp n0 n0 (Node n0 c1 a2)), (pow2heapp n0 n0 (Node n0 c1 a1)), (pow2heapp n0 n0 (Node n0 c1 gv1)), (pow2heapp n0 n0 (Node n0 a2 c2)), (pow2heapp n0 n0 (Node n0 a2 c1)), (pow2heapp n0 n0 (Node n0 a2 a2)), (pow2heapp n0 n0 (Node n0 a2 a1))
(pow2heapp n0 n0 (Node n0 a2 gv1)), (pow2heapp n0 n0 (Node n0 a1 c2)), (pow2heapp n0 n0 (Node n0 a1 c1)), (pow2heapp n0 n0 (Node n0 a1 a2)), (pow2heapp n0 n0 (Node n0 a1 a1)), (pow2heapp n0 n0 (Node n0 a1 gv1)), (pow2heapp n0 n0 (Node n0 gv1 c2)), (pow2heapp n0 n0 (Node n0 gv1 c1)), (pow2heapp n0 n0 (Node n0 gv1 a2)), (pow2heapp n0 n0 (Node n0 gv1 a1))
(pow2heapp n0 n0 (Node n0 gv1 gv1)), (pow2heapp n0 n0 (Node n c2 c2)), (pow2heapp n0 n0 (Node n c2 c1)), (pow2heapp n0 n0 (Node n c2 a2)), (pow2heapp n0 n0 (Node n c2 a1)), (pow2heapp n0 n0 (Node n c2 gv1)), (pow2heapp n0 n0 (Node n c1 c2)), (pow2heapp n0 n0 (Node n c1 c1)), (pow2heapp n0 n0 (Node n c1 a2)), (pow2heapp n0 n0 (Node n c1 a1))
(pow2heapp n0 n0 (Node n c1 gv1)), (pow2heapp n0 n0 (Node n a2 c2)), (pow2heapp n0 n0 (Node n a2 c1)), (pow2heapp n0 n0 (Node n a2 a2)), (pow2heapp n0 n0 (Node n a2 a1)), (pow2heapp n0 n0 (Node n a2 gv1)), (pow2heapp n0 n0 (Node n a1 c2)), (pow2heapp n0 n0 (Node n a1 c1)), (pow2heapp n0 n0 (Node n a1 a2)), (pow2heapp n0 n0 (Node n a1 a1))
(pow2heapp n0 n0 (Node n a1 gv1)), (pow2heapp n0 n0 (Node n gv1 c2)), (pow2heapp n0 n0 (Node n gv1 c1)), (pow2heapp n0 n0 (Node n gv1 a2)), (pow2heapp n0 n0 (Node n gv1 a1)), (pow2heapp n0 n0 (Node n gv1 gv1)), (pow2heapp n0 n0 (smash c2 c2)), (pow2heapp n0 n0 (smash c2 c1)), (pow2heapp n0 n0 (smash c2 a2)), (pow2heapp n0 n0 (smash c2 a1))
(pow2heapp n0 n0 (smash c2 gv1)), (pow2heapp n0 n0 (smash c1 c2)), (pow2heapp n0 n0 (smash c1 c1)), (pow2heapp n0 n0 (smash c1 a2)), (pow2heapp n0 n0 (smash c1 a1)), (pow2heapp n0 n0 (smash c1 gv1)), (pow2heapp n0 n0 (smash a2 c2)), (pow2heapp n0 n0 (smash a2 c1)), (pow2heapp n0 n0 (smash a2 a2)), (pow2heapp n0 n0 (smash a2 a1))
(pow2heapp n0 n0 (smash a2 gv1)), (pow2heapp n0 n0 (smash a1 c2)), (pow2heapp n0 n0 (smash a1 c1)), (pow2heapp n0 n0 (smash a1 a2)), (pow2heapp n0 n0 (smash a1 a1)), (pow2heapp n0 n0 (smash a1 gv1)), (pow2heapp n0 n0 (smash gv1 c2)), (pow2heapp n0 n0 (smash gv1 c1)), (pow2heapp n0 n0 (smash gv1 a2)), (pow2heapp n0 n0 (smash gv1 a1))
(pow2heapp n0 n0 (smash gv1 gv1)), (pow2heapp n0 n0 Leaf), (pow2heapp n0 n (Node n1 c2 c2)), (pow2heapp n0 n (Node n1 c2 c1)), (pow2heapp n0 n (Node n1 c2 a2)), (pow2heapp n0 n (Node n1 c2 a1)), (pow2heapp n0 n (Node n1 c2 gv1)), (pow2heapp n0 n (Node n1 c1 c2)), (pow2heapp n0 n (Node n1 c1 c1)), (pow2heapp n0 n (Node n1 c1 a2))
(pow2heapp n0 n (Node n1 c1 a1)), (pow2heapp n0 n (Node n1 c1 gv1)), (pow2heapp n0 n (Node n1 a2 c2)), (pow2heapp n0 n (Node n1 a2 c1)), (pow2heapp n0 n (Node n1 a2 a2)), (pow2heapp n0 n (Node n1 a2 a1)), (pow2heapp n0 n (Node n1 a2 gv1)), (pow2heapp n0 n (Node n1 a1 c2)), (pow2heapp n0 n (Node n1 a1 c1)), (pow2heapp n0 n (Node n1 a1 a2))
(pow2heapp n0 n (Node n1 a1 a1)), (pow2heapp n0 n (Node n1 a1 gv1)), (pow2heapp n0 n (Node n1 gv1 c2)), (pow2heapp n0 n (Node n1 gv1 c1)), (pow2heapp n0 n (Node n1 gv1 a2)), (pow2heapp n0 n (Node n1 gv1 a1)), (pow2heapp n0 n (Node n1 gv1 gv1)), (pow2heapp n0 n (Node n0 c2 c2)), (pow2heapp n0 n (Node n0 c2 c1)), (pow2heapp n0 n (Node n0 c2 a2))
(pow2heapp n0 n (Node n0 c2 a1)), (pow2heapp n0 n (Node n0 c2 gv1)), (pow2heapp n0 n (Node n0 c1 c2)), (pow2heapp n0 n (Node n0 c1 c1)), (pow2heapp n0 n (Node n0 c1 a2)), (pow2heapp n0 n (Node n0 c1 a1)), (pow2heapp n0 n (Node n0 c1 gv1)), (pow2heapp n0 n (Node n0 a2 c2)), (pow2heapp n0 n (Node n0 a2 c1)), (pow2heapp n0 n (Node n0 a2 a2))
(pow2heapp n0 n (Node n0 a2 a1)), (pow2heapp n0 n (Node n0 a2 gv1)), (pow2heapp n0 n (Node n0 a1 c2)), (pow2heapp n0 n (Node n0 a1 c1)), (pow2heapp n0 n (Node n0 a1 a2)), (pow2heapp n0 n (Node n0 a1 a1)), (pow2heapp n0 n (Node n0 a1 gv1)), (pow2heapp n0 n (Node n0 gv1 c2)), (pow2heapp n0 n (Node n0 gv1 c1)), (pow2heapp n0 n (Node n0 gv1 a2))
(pow2heapp n0 n (Node n0 gv1 a1)), (pow2heapp n0 n (Node n0 gv1 gv1)), (pow2heapp n0 n (Node n c2 c2)), (pow2heapp n0 n (Node n c2 c1)), (pow2heapp n0 n (Node n c2 a2)), (pow2heapp n0 n (Node n c2 a1)), (pow2heapp n0 n (Node n c2 gv1)), (pow2heapp n0 n (Node n c1 c2)), (pow2heapp n0 n (Node n c1 c1)), (pow2heapp n0 n (Node n c1 a2))
(pow2heapp n0 n (Node n c1 a1)), (pow2heapp n0 n (Node n c1 gv1)), (pow2heapp n0 n (Node n a2 c2)), (pow2heapp n0 n (Node n a2 c1)), (pow2heapp n0 n (Node n a2 a2)), (pow2heapp n0 n (Node n a2 a1)), (pow2heapp n0 n (Node n a2 gv1)), (pow2heapp n0 n (Node n a1 c2)), (pow2heapp n0 n (Node n a1 c1)), (pow2heapp n0 n (Node n a1 a2))
(pow2heapp n0 n (Node n a1 a1)), (pow2heapp n0 n (Node n a1 gv1)), (pow2heapp n0 n (Node n gv1 c2)), (pow2heapp n0 n (Node n gv1 c1)), (pow2heapp n0 n (Node n gv1 a2)), (pow2heapp n0 n (Node n gv1 a1)), (pow2heapp n0 n (Node n gv1 gv1)), (pow2heapp n0 n (smash c2 c2)), (pow2heapp n0 n (smash c2 c1)), (pow2heapp n0 n (smash c2 a2))
(pow2heapp n0 n (smash c2 a1)), (pow2heapp n0 n (smash c2 gv1)), (pow2heapp n0 n (smash c1 c2)), (pow2heapp n0 n (smash c1 c1)), (pow2heapp n0 n (smash c1 a2)), (pow2heapp n0 n (smash c1 a1)), (pow2heapp n0 n (smash c1 gv1)), (pow2heapp n0 n (smash a2 c2)), (pow2heapp n0 n (smash a2 c1)), (pow2heapp n0 n (smash a2 a2))
(pow2heapp n0 n (smash a2 a1)), (pow2heapp n0 n (smash a2 gv1)), (pow2heapp n0 n (smash a1 c2)), (pow2heapp n0 n (smash a1 c1)), (pow2heapp n0 n (smash a1 a2)), (pow2heapp n0 n (smash a1 a1)), (pow2heapp n0 n (smash a1 gv1)), (pow2heapp n0 n (smash gv1 c2)), (pow2heapp n0 n (smash gv1 c1)), (pow2heapp n0 n (smash gv1 a2))
(pow2heapp n0 n (smash gv1 a1)), (pow2heapp n0 n (smash gv1 gv1)), (pow2heapp n0 n Leaf), (pow2heapp n0 (find_max' n1 p) c2), (pow2heapp n0 (find_max' n1 p) c1), (pow2heapp n0 (find_max' n1 p) a2), (pow2heapp n0 (find_max' n1 p) a1), (pow2heapp n0 (find_max' n1 p) gv1), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n c1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 c1))
(pow2heapp n0 (find_max' n1 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a2 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n a1 gv1)), (pow2heapp n0 (find_max' n1 p) (Node n gv1 c2)), (pow2heapp n0 (find_max' n1 p) (Node n gv1 c1))
(pow2heapp n0 (find_max' n1 p) (Node n gv1 a2)), (pow2heapp n0 (find_max' n1 p) (Node n gv1 a1)), (pow2heapp n0 (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp n0 (find_max' n1 p) (smash c2 c2)), (pow2heapp n0 (find_max' n1 p) (smash c2 c1)), (pow2heapp n0 (find_max' n1 p) (smash c2 a2)), (pow2heapp n0 (find_max' n1 p) (smash c2 a1)), (pow2heapp n0 (find_max' n1 p) (smash c2 gv1)), (pow2heapp n0 (find_max' n1 p) (smash c1 c2)), (pow2heapp n0 (find_max' n1 p) (smash c1 c1))
(pow2heapp n0 (find_max' n1 p) (smash c1 a2)), (pow2heapp n0 (find_max' n1 p) (smash c1 a1)), (pow2heapp n0 (find_max' n1 p) (smash c1 gv1)), (pow2heapp n0 (find_max' n1 p) (smash a2 c2)), (pow2heapp n0 (find_max' n1 p) (smash a2 c1)), (pow2heapp n0 (find_max' n1 p) (smash a2 a2)), (pow2heapp n0 (find_max' n1 p) (smash a2 a1)), (pow2heapp n0 (find_max' n1 p) (smash a2 gv1)), (pow2heapp n0 (find_max' n1 p) (smash a1 c2)), (pow2heapp n0 (find_max' n1 p) (smash a1 c1))
(pow2heapp n0 (find_max' n1 p) (smash a1 a2)), (pow2heapp n0 (find_max' n1 p) (smash a1 a1)), (pow2heapp n0 (find_max' n1 p) (smash a1 gv1)), (pow2heapp n0 (find_max' n1 p) (smash gv1 c2)), (pow2heapp n0 (find_max' n1 p) (smash gv1 c1)), (pow2heapp n0 (find_max' n1 p) (smash gv1 a2)), (pow2heapp n0 (find_max' n1 p) (smash gv1 a1)), (pow2heapp n0 (find_max' n1 p) (smash gv1 gv1)), (pow2heapp n0 (find_max' n1 p) Leaf), (pow2heapp n0 (find_max' n0 p) c2)
(pow2heapp n0 (find_max' n0 p) c1), (pow2heapp n0 (find_max' n0 p) a2), (pow2heapp n0 (find_max' n0 p) a1), (pow2heapp n0 (find_max' n0 p) gv1), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n c1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n c1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n c1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a2 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a2 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 c2))
(pow2heapp n0 (find_max' n0 p) (Node n a1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n a1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n a1 gv1)), (pow2heapp n0 (find_max' n0 p) (Node n gv1 c2)), (pow2heapp n0 (find_max' n0 p) (Node n gv1 c1)), (pow2heapp n0 (find_max' n0 p) (Node n gv1 a2)), (pow2heapp n0 (find_max' n0 p) (Node n gv1 a1)), (pow2heapp n0 (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp n0 (find_max' n0 p) (smash c2 c2))
(pow2heapp n0 (find_max' n0 p) (smash c2 c1)), (pow2heapp n0 (find_max' n0 p) (smash c2 a2)), (pow2heapp n0 (find_max' n0 p) (smash c2 a1)), (pow2heapp n0 (find_max' n0 p) (smash c2 gv1)), (pow2heapp n0 (find_max' n0 p) (smash c1 c2)), (pow2heapp n0 (find_max' n0 p) (smash c1 c1)), (pow2heapp n0 (find_max' n0 p) (smash c1 a2)), (pow2heapp n0 (find_max' n0 p) (smash c1 a1)), (pow2heapp n0 (find_max' n0 p) (smash c1 gv1)), (pow2heapp n0 (find_max' n0 p) (smash a2 c2))
(pow2heapp n0 (find_max' n0 p) (smash a2 c1)), (pow2heapp n0 (find_max' n0 p) (smash a2 a2)), (pow2heapp n0 (find_max' n0 p) (smash a2 a1)), (pow2heapp n0 (find_max' n0 p) (smash a2 gv1)), (pow2heapp n0 (find_max' n0 p) (smash a1 c2)), (pow2heapp n0 (find_max' n0 p) (smash a1 c1)), (pow2heapp n0 (find_max' n0 p) (smash a1 a2)), (pow2heapp n0 (find_max' n0 p) (smash a1 a1)), (pow2heapp n0 (find_max' n0 p) (smash a1 gv1)), (pow2heapp n0 (find_max' n0 p) (smash gv1 c2))
(pow2heapp n0 (find_max' n0 p) (smash gv1 c1)), (pow2heapp n0 (find_max' n0 p) (smash gv1 a2)), (pow2heapp n0 (find_max' n0 p) (smash gv1 a1)), (pow2heapp n0 (find_max' n0 p) (smash gv1 gv1)), (pow2heapp n0 (find_max' n0 p) Leaf), (pow2heapp n0 (find_max' n p) c2), (pow2heapp n0 (find_max' n p) c1), (pow2heapp n0 (find_max' n p) a2), (pow2heapp n0 (find_max' n p) a1), (pow2heapp n0 (find_max' n p) gv1)
(pow2heapp n0 (find_max' n p) (Node n1 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c2 gv1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 c1 gv1))
(pow2heapp n0 (find_max' n p) (Node n1 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a2 gv1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 a1 gv1))
(pow2heapp n0 (find_max' n p) (Node n1 gv1 c2)), (pow2heapp n0 (find_max' n p) (Node n1 gv1 c1)), (pow2heapp n0 (find_max' n p) (Node n1 gv1 a2)), (pow2heapp n0 (find_max' n p) (Node n1 gv1 a1)), (pow2heapp n0 (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c2 gv1))
(pow2heapp n0 (find_max' n p) (Node n0 c1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 c1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 c1 gv1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a2 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a2 gv1))
(pow2heapp n0 (find_max' n p) (Node n0 a1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 a1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 a1 gv1)), (pow2heapp n0 (find_max' n p) (Node n0 gv1 c2)), (pow2heapp n0 (find_max' n p) (Node n0 gv1 c1)), (pow2heapp n0 (find_max' n p) (Node n0 gv1 a2)), (pow2heapp n0 (find_max' n p) (Node n0 gv1 a1)), (pow2heapp n0 (find_max' n p) (Node n0 gv1 gv1))
(pow2heapp n0 (find_max' n p) (Node n c2 c2)), (pow2heapp n0 (find_max' n p) (Node n c2 c1)), (pow2heapp n0 (find_max' n p) (Node n c2 a2)), (pow2heapp n0 (find_max' n p) (Node n c2 a1)), (pow2heapp n0 (find_max' n p) (Node n c2 gv1)), (pow2heapp n0 (find_max' n p) (Node n c1 c2)), (pow2heapp n0 (find_max' n p) (Node n c1 c1)), (pow2heapp n0 (find_max' n p) (Node n c1 a2)), (pow2heapp n0 (find_max' n p) (Node n c1 a1)), (pow2heapp n0 (find_max' n p) (Node n c1 gv1))
(pow2heapp n0 (find_max' n p) (Node n a2 c2)), (pow2heapp n0 (find_max' n p) (Node n a2 c1)), (pow2heapp n0 (find_max' n p) (Node n a2 a2)), (pow2heapp n0 (find_max' n p) (Node n a2 a1)), (pow2heapp n0 (find_max' n p) (Node n a2 gv1)), (pow2heapp n0 (find_max' n p) (Node n a1 c2)), (pow2heapp n0 (find_max' n p) (Node n a1 c1)), (pow2heapp n0 (find_max' n p) (Node n a1 a2)), (pow2heapp n0 (find_max' n p) (Node n a1 a1)), (pow2heapp n0 (find_max' n p) (Node n a1 gv1))
(pow2heapp n0 (find_max' n p) (Node n gv1 c2)), (pow2heapp n0 (find_max' n p) (Node n gv1 c1)), (pow2heapp n0 (find_max' n p) (Node n gv1 a2)), (pow2heapp n0 (find_max' n p) (Node n gv1 a1)), (pow2heapp n0 (find_max' n p) (Node n gv1 gv1)), (pow2heapp n0 (find_max' n p) (smash c2 c2)), (pow2heapp n0 (find_max' n p) (smash c2 c1)), (pow2heapp n0 (find_max' n p) (smash c2 a2)), (pow2heapp n0 (find_max' n p) (smash c2 a1)), (pow2heapp n0 (find_max' n p) (smash c2 gv1))
(pow2heapp n0 (find_max' n p) (smash c1 c2)), (pow2heapp n0 (find_max' n p) (smash c1 c1)), (pow2heapp n0 (find_max' n p) (smash c1 a2)), (pow2heapp n0 (find_max' n p) (smash c1 a1)), (pow2heapp n0 (find_max' n p) (smash c1 gv1)), (pow2heapp n0 (find_max' n p) (smash a2 c2)), (pow2heapp n0 (find_max' n p) (smash a2 c1)), (pow2heapp n0 (find_max' n p) (smash a2 a2)), (pow2heapp n0 (find_max' n p) (smash a2 a1)), (pow2heapp n0 (find_max' n p) (smash a2 gv1))
(pow2heapp n0 (find_max' n p) (smash a1 c2)), (pow2heapp n0 (find_max' n p) (smash a1 c1)), (pow2heapp n0 (find_max' n p) (smash a1 a2)), (pow2heapp n0 (find_max' n p) (smash a1 a1)), (pow2heapp n0 (find_max' n p) (smash a1 gv1)), (pow2heapp n0 (find_max' n p) (smash gv1 c2)), (pow2heapp n0 (find_max' n p) (smash gv1 c1)), (pow2heapp n0 (find_max' n p) (smash gv1 a2)), (pow2heapp n0 (find_max' n p) (smash gv1 a1)), (pow2heapp n0 (find_max' n p) (smash gv1 gv1))
(pow2heapp n0 (find_max' n p) Leaf), (pow2heapp n0 (length p) c2), (pow2heapp n0 (length p) c1), (pow2heapp n0 (length p) a2), (pow2heapp n0 (length p) a1), (pow2heapp n0 (length p) gv1), (pow2heapp n0 (length p) (Node n1 c2 c2)), (pow2heapp n0 (length p) (Node n1 c2 c1)), (pow2heapp n0 (length p) (Node n1 c2 a2)), (pow2heapp n0 (length p) (Node n1 c2 a1))
(pow2heapp n0 (length p) (Node n1 c2 gv1)), (pow2heapp n0 (length p) (Node n1 c1 c2)), (pow2heapp n0 (length p) (Node n1 c1 c1)), (pow2heapp n0 (length p) (Node n1 c1 a2)), (pow2heapp n0 (length p) (Node n1 c1 a1)), (pow2heapp n0 (length p) (Node n1 c1 gv1)), (pow2heapp n0 (length p) (Node n1 a2 c2)), (pow2heapp n0 (length p) (Node n1 a2 c1)), (pow2heapp n0 (length p) (Node n1 a2 a2)), (pow2heapp n0 (length p) (Node n1 a2 a1))
(pow2heapp n0 (length p) (Node n1 a2 gv1)), (pow2heapp n0 (length p) (Node n1 a1 c2)), (pow2heapp n0 (length p) (Node n1 a1 c1)), (pow2heapp n0 (length p) (Node n1 a1 a2)), (pow2heapp n0 (length p) (Node n1 a1 a1)), (pow2heapp n0 (length p) (Node n1 a1 gv1)), (pow2heapp n0 (length p) (Node n1 gv1 c2)), (pow2heapp n0 (length p) (Node n1 gv1 c1)), (pow2heapp n0 (length p) (Node n1 gv1 a2)), (pow2heapp n0 (length p) (Node n1 gv1 a1))
(pow2heapp n0 (length p) (Node n1 gv1 gv1)), (pow2heapp n0 (length p) (Node n0 c2 c2)), (pow2heapp n0 (length p) (Node n0 c2 c1)), (pow2heapp n0 (length p) (Node n0 c2 a2)), (pow2heapp n0 (length p) (Node n0 c2 a1)), (pow2heapp n0 (length p) (Node n0 c2 gv1)), (pow2heapp n0 (length p) (Node n0 c1 c2)), (pow2heapp n0 (length p) (Node n0 c1 c1)), (pow2heapp n0 (length p) (Node n0 c1 a2)), (pow2heapp n0 (length p) (Node n0 c1 a1))
(pow2heapp n0 (length p) (Node n0 c1 gv1)), (pow2heapp n0 (length p) (Node n0 a2 c2)), (pow2heapp n0 (length p) (Node n0 a2 c1)), (pow2heapp n0 (length p) (Node n0 a2 a2)), (pow2heapp n0 (length p) (Node n0 a2 a1)), (pow2heapp n0 (length p) (Node n0 a2 gv1)), (pow2heapp n0 (length p) (Node n0 a1 c2)), (pow2heapp n0 (length p) (Node n0 a1 c1)), (pow2heapp n0 (length p) (Node n0 a1 a2)), (pow2heapp n0 (length p) (Node n0 a1 a1))
(pow2heapp n0 (length p) (Node n0 a1 gv1)), (pow2heapp n0 (length p) (Node n0 gv1 c2)), (pow2heapp n0 (length p) (Node n0 gv1 c1)), (pow2heapp n0 (length p) (Node n0 gv1 a2)), (pow2heapp n0 (length p) (Node n0 gv1 a1)), (pow2heapp n0 (length p) (Node n0 gv1 gv1)), (pow2heapp n0 (length p) (Node n c2 c2)), (pow2heapp n0 (length p) (Node n c2 c1)), (pow2heapp n0 (length p) (Node n c2 a2)), (pow2heapp n0 (length p) (Node n c2 a1))
(pow2heapp n0 (length p) (Node n c2 gv1)), (pow2heapp n0 (length p) (Node n c1 c2)), (pow2heapp n0 (length p) (Node n c1 c1)), (pow2heapp n0 (length p) (Node n c1 a2)), (pow2heapp n0 (length p) (Node n c1 a1)), (pow2heapp n0 (length p) (Node n c1 gv1)), (pow2heapp n0 (length p) (Node n a2 c2)), (pow2heapp n0 (length p) (Node n a2 c1)), (pow2heapp n0 (length p) (Node n a2 a2)), (pow2heapp n0 (length p) (Node n a2 a1))
(pow2heapp n0 (length p) (Node n a2 gv1)), (pow2heapp n0 (length p) (Node n a1 c2)), (pow2heapp n0 (length p) (Node n a1 c1)), (pow2heapp n0 (length p) (Node n a1 a2)), (pow2heapp n0 (length p) (Node n a1 a1)), (pow2heapp n0 (length p) (Node n a1 gv1)), (pow2heapp n0 (length p) (Node n gv1 c2)), (pow2heapp n0 (length p) (Node n gv1 c1)), (pow2heapp n0 (length p) (Node n gv1 a2)), (pow2heapp n0 (length p) (Node n gv1 a1))
(pow2heapp n0 (length p) (Node n gv1 gv1)), (pow2heapp n0 (length p) (smash c2 c2)), (pow2heapp n0 (length p) (smash c2 c1)), (pow2heapp n0 (length p) (smash c2 a2)), (pow2heapp n0 (length p) (smash c2 a1)), (pow2heapp n0 (length p) (smash c2 gv1)), (pow2heapp n0 (length p) (smash c1 c2)), (pow2heapp n0 (length p) (smash c1 c1)), (pow2heapp n0 (length p) (smash c1 a2)), (pow2heapp n0 (length p) (smash c1 a1))
(pow2heapp n0 (length p) (smash c1 gv1)), (pow2heapp n0 (length p) (smash a2 c2)), (pow2heapp n0 (length p) (smash a2 c1)), (pow2heapp n0 (length p) (smash a2 a2)), (pow2heapp n0 (length p) (smash a2 a1)), (pow2heapp n0 (length p) (smash a2 gv1)), (pow2heapp n0 (length p) (smash a1 c2)), (pow2heapp n0 (length p) (smash a1 c1)), (pow2heapp n0 (length p) (smash a1 a2)), (pow2heapp n0 (length p) (smash a1 a1))
(pow2heapp n0 (length p) (smash a1 gv1)), (pow2heapp n0 (length p) (smash gv1 c2)), (pow2heapp n0 (length p) (smash gv1 c1)), (pow2heapp n0 (length p) (smash gv1 a2)), (pow2heapp n0 (length p) (smash gv1 a1)), (pow2heapp n0 (length p) (smash gv1 gv1)), (pow2heapp n0 (length p) Leaf), (pow2heapp n n1 (Node n1 c2 c2)), (pow2heapp n n1 (Node n1 c2 c1)), (pow2heapp n n1 (Node n1 c2 a2))
(pow2heapp n n1 (Node n1 c2 a1)), (pow2heapp n n1 (Node n1 c2 gv1)), (pow2heapp n n1 (Node n1 c1 c2)), (pow2heapp n n1 (Node n1 c1 c1)), (pow2heapp n n1 (Node n1 c1 a2)), (pow2heapp n n1 (Node n1 c1 a1)), (pow2heapp n n1 (Node n1 c1 gv1)), (pow2heapp n n1 (Node n1 a2 c2)), (pow2heapp n n1 (Node n1 a2 c1)), (pow2heapp n n1 (Node n1 a2 a2))
(pow2heapp n n1 (Node n1 a2 a1)), (pow2heapp n n1 (Node n1 a2 gv1)), (pow2heapp n n1 (Node n1 a1 c2)), (pow2heapp n n1 (Node n1 a1 c1)), (pow2heapp n n1 (Node n1 a1 a2)), (pow2heapp n n1 (Node n1 a1 a1)), (pow2heapp n n1 (Node n1 a1 gv1)), (pow2heapp n n1 (Node n1 gv1 c2)), (pow2heapp n n1 (Node n1 gv1 c1)), (pow2heapp n n1 (Node n1 gv1 a2))
(pow2heapp n n1 (Node n1 gv1 a1)), (pow2heapp n n1 (Node n1 gv1 gv1)), (pow2heapp n n1 (Node n0 c2 c2)), (pow2heapp n n1 (Node n0 c2 c1)), (pow2heapp n n1 (Node n0 c2 a2)), (pow2heapp n n1 (Node n0 c2 a1)), (pow2heapp n n1 (Node n0 c2 gv1)), (pow2heapp n n1 (Node n0 c1 c2)), (pow2heapp n n1 (Node n0 c1 c1)), (pow2heapp n n1 (Node n0 c1 a2))
(pow2heapp n n1 (Node n0 c1 a1)), (pow2heapp n n1 (Node n0 c1 gv1)), (pow2heapp n n1 (Node n0 a2 c2)), (pow2heapp n n1 (Node n0 a2 c1)), (pow2heapp n n1 (Node n0 a2 a2)), (pow2heapp n n1 (Node n0 a2 a1)), (pow2heapp n n1 (Node n0 a2 gv1)), (pow2heapp n n1 (Node n0 a1 c2)), (pow2heapp n n1 (Node n0 a1 c1)), (pow2heapp n n1 (Node n0 a1 a2))
(pow2heapp n n1 (Node n0 a1 a1)), (pow2heapp n n1 (Node n0 a1 gv1)), (pow2heapp n n1 (Node n0 gv1 c2)), (pow2heapp n n1 (Node n0 gv1 c1)), (pow2heapp n n1 (Node n0 gv1 a2)), (pow2heapp n n1 (Node n0 gv1 a1)), (pow2heapp n n1 (Node n0 gv1 gv1)), (pow2heapp n n1 (Node n c2 c2)), (pow2heapp n n1 (Node n c2 c1)), (pow2heapp n n1 (Node n c2 a2))
(pow2heapp n n1 (Node n c2 a1)), (pow2heapp n n1 (Node n c2 gv1)), (pow2heapp n n1 (Node n c1 c2)), (pow2heapp n n1 (Node n c1 c1)), (pow2heapp n n1 (Node n c1 a2)), (pow2heapp n n1 (Node n c1 a1)), (pow2heapp n n1 (Node n c1 gv1)), (pow2heapp n n1 (Node n a2 c2)), (pow2heapp n n1 (Node n a2 c1)), (pow2heapp n n1 (Node n a2 a2))
(pow2heapp n n1 (Node n a2 a1)), (pow2heapp n n1 (Node n a2 gv1)), (pow2heapp n n1 (Node n a1 c2)), (pow2heapp n n1 (Node n a1 c1)), (pow2heapp n n1 (Node n a1 a2)), (pow2heapp n n1 (Node n a1 a1)), (pow2heapp n n1 (Node n a1 gv1)), (pow2heapp n n1 (Node n gv1 c2)), (pow2heapp n n1 (Node n gv1 c1)), (pow2heapp n n1 (Node n gv1 a2))
(pow2heapp n n1 (Node n gv1 a1)), (pow2heapp n n1 (Node n gv1 gv1)), (pow2heapp n n1 (smash c2 c2)), (pow2heapp n n1 (smash c2 c1)), (pow2heapp n n1 (smash c2 a2)), (pow2heapp n n1 (smash c2 a1)), (pow2heapp n n1 (smash c2 gv1)), (pow2heapp n n1 (smash c1 c2)), (pow2heapp n n1 (smash c1 c1)), (pow2heapp n n1 (smash c1 a2))
(pow2heapp n n1 (smash c1 a1)), (pow2heapp n n1 (smash c1 gv1)), (pow2heapp n n1 (smash a2 c2)), (pow2heapp n n1 (smash a2 c1)), (pow2heapp n n1 (smash a2 a2)), (pow2heapp n n1 (smash a2 a1)), (pow2heapp n n1 (smash a2 gv1)), (pow2heapp n n1 (smash a1 c2)), (pow2heapp n n1 (smash a1 c1)), (pow2heapp n n1 (smash a1 a2))
(pow2heapp n n1 (smash a1 a1)), (pow2heapp n n1 (smash a1 gv1)), (pow2heapp n n1 (smash gv1 c2)), (pow2heapp n n1 (smash gv1 c1)), (pow2heapp n n1 (smash gv1 a2)), (pow2heapp n n1 (smash gv1 a1)), (pow2heapp n n1 (smash gv1 gv1)), (pow2heapp n n1 Leaf), (pow2heapp n n0 (Node n1 c2 c2)), (pow2heapp n n0 (Node n1 c2 c1))
(pow2heapp n n0 (Node n1 c2 a2)), (pow2heapp n n0 (Node n1 c2 a1)), (pow2heapp n n0 (Node n1 c2 gv1)), (pow2heapp n n0 (Node n1 c1 c2)), (pow2heapp n n0 (Node n1 c1 c1)), (pow2heapp n n0 (Node n1 c1 a2)), (pow2heapp n n0 (Node n1 c1 a1)), (pow2heapp n n0 (Node n1 c1 gv1)), (pow2heapp n n0 (Node n1 a2 c2)), (pow2heapp n n0 (Node n1 a2 c1))
(pow2heapp n n0 (Node n1 a2 a2)), (pow2heapp n n0 (Node n1 a2 a1)), (pow2heapp n n0 (Node n1 a2 gv1)), (pow2heapp n n0 (Node n1 a1 c2)), (pow2heapp n n0 (Node n1 a1 c1)), (pow2heapp n n0 (Node n1 a1 a2)), (pow2heapp n n0 (Node n1 a1 a1)), (pow2heapp n n0 (Node n1 a1 gv1)), (pow2heapp n n0 (Node n1 gv1 c2)), (pow2heapp n n0 (Node n1 gv1 c1))
(pow2heapp n n0 (Node n1 gv1 a2)), (pow2heapp n n0 (Node n1 gv1 a1)), (pow2heapp n n0 (Node n1 gv1 gv1)), (pow2heapp n n0 (Node n0 c2 c2)), (pow2heapp n n0 (Node n0 c2 c1)), (pow2heapp n n0 (Node n0 c2 a2)), (pow2heapp n n0 (Node n0 c2 a1)), (pow2heapp n n0 (Node n0 c2 gv1)), (pow2heapp n n0 (Node n0 c1 c2)), (pow2heapp n n0 (Node n0 c1 c1))
(pow2heapp n n0 (Node n0 c1 a2)), (pow2heapp n n0 (Node n0 c1 a1)), (pow2heapp n n0 (Node n0 c1 gv1)), (pow2heapp n n0 (Node n0 a2 c2)), (pow2heapp n n0 (Node n0 a2 c1)), (pow2heapp n n0 (Node n0 a2 a2)), (pow2heapp n n0 (Node n0 a2 a1)), (pow2heapp n n0 (Node n0 a2 gv1)), (pow2heapp n n0 (Node n0 a1 c2)), (pow2heapp n n0 (Node n0 a1 c1))
(pow2heapp n n0 (Node n0 a1 a2)), (pow2heapp n n0 (Node n0 a1 a1)), (pow2heapp n n0 (Node n0 a1 gv1)), (pow2heapp n n0 (Node n0 gv1 c2)), (pow2heapp n n0 (Node n0 gv1 c1)), (pow2heapp n n0 (Node n0 gv1 a2)), (pow2heapp n n0 (Node n0 gv1 a1)), (pow2heapp n n0 (Node n0 gv1 gv1)), (pow2heapp n n0 (Node n c2 c2)), (pow2heapp n n0 (Node n c2 c1))
(pow2heapp n n0 (Node n c2 a2)), (pow2heapp n n0 (Node n c2 a1)), (pow2heapp n n0 (Node n c2 gv1)), (pow2heapp n n0 (Node n c1 c2)), (pow2heapp n n0 (Node n c1 c1)), (pow2heapp n n0 (Node n c1 a2)), (pow2heapp n n0 (Node n c1 a1)), (pow2heapp n n0 (Node n c1 gv1)), (pow2heapp n n0 (Node n a2 c2)), (pow2heapp n n0 (Node n a2 c1))
(pow2heapp n n0 (Node n a2 a2)), (pow2heapp n n0 (Node n a2 a1)), (pow2heapp n n0 (Node n a2 gv1)), (pow2heapp n n0 (Node n a1 c2)), (pow2heapp n n0 (Node n a1 c1)), (pow2heapp n n0 (Node n a1 a2)), (pow2heapp n n0 (Node n a1 a1)), (pow2heapp n n0 (Node n a1 gv1)), (pow2heapp n n0 (Node n gv1 c2)), (pow2heapp n n0 (Node n gv1 c1))
(pow2heapp n n0 (Node n gv1 a2)), (pow2heapp n n0 (Node n gv1 a1)), (pow2heapp n n0 (Node n gv1 gv1)), (pow2heapp n n0 (smash c2 c2)), (pow2heapp n n0 (smash c2 c1)), (pow2heapp n n0 (smash c2 a2)), (pow2heapp n n0 (smash c2 a1)), (pow2heapp n n0 (smash c2 gv1)), (pow2heapp n n0 (smash c1 c2)), (pow2heapp n n0 (smash c1 c1))
(pow2heapp n n0 (smash c1 a2)), (pow2heapp n n0 (smash c1 a1)), (pow2heapp n n0 (smash c1 gv1)), (pow2heapp n n0 (smash a2 c2)), (pow2heapp n n0 (smash a2 c1)), (pow2heapp n n0 (smash a2 a2)), (pow2heapp n n0 (smash a2 a1)), (pow2heapp n n0 (smash a2 gv1)), (pow2heapp n n0 (smash a1 c2)), (pow2heapp n n0 (smash a1 c1))
(pow2heapp n n0 (smash a1 a2)), (pow2heapp n n0 (smash a1 a1)), (pow2heapp n n0 (smash a1 gv1)), (pow2heapp n n0 (smash gv1 c2)), (pow2heapp n n0 (smash gv1 c1)), (pow2heapp n n0 (smash gv1 a2)), (pow2heapp n n0 (smash gv1 a1)), (pow2heapp n n0 (smash gv1 gv1)), (pow2heapp n n0 Leaf), (pow2heapp n n (Node n1 c2 c2))
(pow2heapp n n (Node n1 c2 c1)), (pow2heapp n n (Node n1 c2 a2)), (pow2heapp n n (Node n1 c2 a1)), (pow2heapp n n (Node n1 c2 gv1)), (pow2heapp n n (Node n1 c1 c2)), (pow2heapp n n (Node n1 c1 c1)), (pow2heapp n n (Node n1 c1 a2)), (pow2heapp n n (Node n1 c1 a1)), (pow2heapp n n (Node n1 c1 gv1)), (pow2heapp n n (Node n1 a2 c2))
(pow2heapp n n (Node n1 a2 c1)), (pow2heapp n n (Node n1 a2 a2)), (pow2heapp n n (Node n1 a2 a1)), (pow2heapp n n (Node n1 a2 gv1)), (pow2heapp n n (Node n1 a1 c2)), (pow2heapp n n (Node n1 a1 c1)), (pow2heapp n n (Node n1 a1 a2)), (pow2heapp n n (Node n1 a1 a1)), (pow2heapp n n (Node n1 a1 gv1)), (pow2heapp n n (Node n1 gv1 c2))
(pow2heapp n n (Node n1 gv1 c1)), (pow2heapp n n (Node n1 gv1 a2)), (pow2heapp n n (Node n1 gv1 a1)), (pow2heapp n n (Node n1 gv1 gv1)), (pow2heapp n n (Node n0 c2 c2)), (pow2heapp n n (Node n0 c2 c1)), (pow2heapp n n (Node n0 c2 a2)), (pow2heapp n n (Node n0 c2 a1)), (pow2heapp n n (Node n0 c2 gv1)), (pow2heapp n n (Node n0 c1 c2))
(pow2heapp n n (Node n0 c1 c1)), (pow2heapp n n (Node n0 c1 a2)), (pow2heapp n n (Node n0 c1 a1)), (pow2heapp n n (Node n0 c1 gv1)), (pow2heapp n n (Node n0 a2 c2)), (pow2heapp n n (Node n0 a2 c1)), (pow2heapp n n (Node n0 a2 a2)), (pow2heapp n n (Node n0 a2 a1)), (pow2heapp n n (Node n0 a2 gv1)), (pow2heapp n n (Node n0 a1 c2))
(pow2heapp n n (Node n0 a1 c1)), (pow2heapp n n (Node n0 a1 a2)), (pow2heapp n n (Node n0 a1 a1)), (pow2heapp n n (Node n0 a1 gv1)), (pow2heapp n n (Node n0 gv1 c2)), (pow2heapp n n (Node n0 gv1 c1)), (pow2heapp n n (Node n0 gv1 a2)), (pow2heapp n n (Node n0 gv1 a1)), (pow2heapp n n (Node n0 gv1 gv1)), (pow2heapp n n (Node n c2 c2))
(pow2heapp n n (Node n c2 c1)), (pow2heapp n n (Node n c2 a2)), (pow2heapp n n (Node n c2 a1)), (pow2heapp n n (Node n c2 gv1)), (pow2heapp n n (Node n c1 c2)), (pow2heapp n n (Node n c1 c1)), (pow2heapp n n (Node n c1 a2)), (pow2heapp n n (Node n c1 a1)), (pow2heapp n n (Node n c1 gv1)), (pow2heapp n n (Node n a2 c2))
(pow2heapp n n (Node n a2 c1)), (pow2heapp n n (Node n a2 a2)), (pow2heapp n n (Node n a2 a1)), (pow2heapp n n (Node n a2 gv1)), (pow2heapp n n (Node n a1 c2)), (pow2heapp n n (Node n a1 c1)), (pow2heapp n n (Node n a1 a2)), (pow2heapp n n (Node n a1 a1)), (pow2heapp n n (Node n a1 gv1)), (pow2heapp n n (Node n gv1 c2))
(pow2heapp n n (Node n gv1 c1)), (pow2heapp n n (Node n gv1 a2)), (pow2heapp n n (Node n gv1 a1)), (pow2heapp n n (Node n gv1 gv1)), (pow2heapp n n (smash c2 c2)), (pow2heapp n n (smash c2 c1)), (pow2heapp n n (smash c2 a2)), (pow2heapp n n (smash c2 a1)), (pow2heapp n n (smash c2 gv1)), (pow2heapp n n (smash c1 c2))
(pow2heapp n n (smash c1 c1)), (pow2heapp n n (smash c1 a2)), (pow2heapp n n (smash c1 a1)), (pow2heapp n n (smash c1 gv1)), (pow2heapp n n (smash a2 c2)), (pow2heapp n n (smash a2 c1)), (pow2heapp n n (smash a2 a2)), (pow2heapp n n (smash a2 a1)), (pow2heapp n n (smash a2 gv1)), (pow2heapp n n (smash a1 c2))
(pow2heapp n n (smash a1 c1)), (pow2heapp n n (smash a1 a2)), (pow2heapp n n (smash a1 a1)), (pow2heapp n n (smash a1 gv1)), (pow2heapp n n (smash gv1 c2)), (pow2heapp n n (smash gv1 c1)), (pow2heapp n n (smash gv1 a2)), (pow2heapp n n (smash gv1 a1)), (pow2heapp n n (smash gv1 gv1)), (pow2heapp n n Leaf)
(pow2heapp n (find_max' n1 p) c2), (pow2heapp n (find_max' n1 p) c1), (pow2heapp n (find_max' n1 p) a2), (pow2heapp n (find_max' n1 p) a1), (pow2heapp n (find_max' n1 p) gv1), (pow2heapp n (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c2 gv1))
(pow2heapp n (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a2 gv1))
(pow2heapp n (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp n (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp n (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp n (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp n (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp n (find_max' n1 p) (Node n1 gv1 gv1))
(pow2heapp n (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 c1 gv1))
(pow2heapp n (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 a1 gv1))
(pow2heapp n (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp n (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp n (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp n (find_max' n1 p) (Node n0 gv1 a1)), (pow2heapp n (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp n (find_max' n1 p) (Node n c2 c2)), (pow2heapp n (find_max' n1 p) (Node n c2 c1)), (pow2heapp n (find_max' n1 p) (Node n c2 a2)), (pow2heapp n (find_max' n1 p) (Node n c2 a1)), (pow2heapp n (find_max' n1 p) (Node n c2 gv1))
(pow2heapp n (find_max' n1 p) (Node n c1 c2)), (pow2heapp n (find_max' n1 p) (Node n c1 c1)), (pow2heapp n (find_max' n1 p) (Node n c1 a2)), (pow2heapp n (find_max' n1 p) (Node n c1 a1)), (pow2heapp n (find_max' n1 p) (Node n c1 gv1)), (pow2heapp n (find_max' n1 p) (Node n a2 c2)), (pow2heapp n (find_max' n1 p) (Node n a2 c1)), (pow2heapp n (find_max' n1 p) (Node n a2 a2)), (pow2heapp n (find_max' n1 p) (Node n a2 a1)), (pow2heapp n (find_max' n1 p) (Node n a2 gv1))
(pow2heapp n (find_max' n1 p) (Node n a1 c2)), (pow2heapp n (find_max' n1 p) (Node n a1 c1)), (pow2heapp n (find_max' n1 p) (Node n a1 a2)), (pow2heapp n (find_max' n1 p) (Node n a1 a1)), (pow2heapp n (find_max' n1 p) (Node n a1 gv1)), (pow2heapp n (find_max' n1 p) (Node n gv1 c2)), (pow2heapp n (find_max' n1 p) (Node n gv1 c1)), (pow2heapp n (find_max' n1 p) (Node n gv1 a2)), (pow2heapp n (find_max' n1 p) (Node n gv1 a1)), (pow2heapp n (find_max' n1 p) (Node n gv1 gv1))
(pow2heapp n (find_max' n1 p) (smash c2 c2)), (pow2heapp n (find_max' n1 p) (smash c2 c1)), (pow2heapp n (find_max' n1 p) (smash c2 a2)), (pow2heapp n (find_max' n1 p) (smash c2 a1)), (pow2heapp n (find_max' n1 p) (smash c2 gv1)), (pow2heapp n (find_max' n1 p) (smash c1 c2)), (pow2heapp n (find_max' n1 p) (smash c1 c1)), (pow2heapp n (find_max' n1 p) (smash c1 a2)), (pow2heapp n (find_max' n1 p) (smash c1 a1)), (pow2heapp n (find_max' n1 p) (smash c1 gv1))
(pow2heapp n (find_max' n1 p) (smash a2 c2)), (pow2heapp n (find_max' n1 p) (smash a2 c1)), (pow2heapp n (find_max' n1 p) (smash a2 a2)), (pow2heapp n (find_max' n1 p) (smash a2 a1)), (pow2heapp n (find_max' n1 p) (smash a2 gv1)), (pow2heapp n (find_max' n1 p) (smash a1 c2)), (pow2heapp n (find_max' n1 p) (smash a1 c1)), (pow2heapp n (find_max' n1 p) (smash a1 a2)), (pow2heapp n (find_max' n1 p) (smash a1 a1)), (pow2heapp n (find_max' n1 p) (smash a1 gv1))
(pow2heapp n (find_max' n1 p) (smash gv1 c2)), (pow2heapp n (find_max' n1 p) (smash gv1 c1)), (pow2heapp n (find_max' n1 p) (smash gv1 a2)), (pow2heapp n (find_max' n1 p) (smash gv1 a1)), (pow2heapp n (find_max' n1 p) (smash gv1 gv1)), (pow2heapp n (find_max' n1 p) Leaf), (pow2heapp n (find_max' n0 p) c2), (pow2heapp n (find_max' n0 p) c1), (pow2heapp n (find_max' n0 p) a2), (pow2heapp n (find_max' n0 p) a1)
(pow2heapp n (find_max' n0 p) gv1), (pow2heapp n (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 c1 a1))
(pow2heapp n (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp n (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 a1 a1))
(pow2heapp n (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp n (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp n (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp n (find_max' n0 p) (Node n1 gv1 a2)), (pow2heapp n (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp n (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a2 a1))
(pow2heapp n (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp n (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp n (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp n (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp n (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp n (find_max' n0 p) (Node n0 gv1 a1))
(pow2heapp n (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp n (find_max' n0 p) (Node n c2 c2)), (pow2heapp n (find_max' n0 p) (Node n c2 c1)), (pow2heapp n (find_max' n0 p) (Node n c2 a2)), (pow2heapp n (find_max' n0 p) (Node n c2 a1)), (pow2heapp n (find_max' n0 p) (Node n c2 gv1)), (pow2heapp n (find_max' n0 p) (Node n c1 c2)), (pow2heapp n (find_max' n0 p) (Node n c1 c1)), (pow2heapp n (find_max' n0 p) (Node n c1 a2)), (pow2heapp n (find_max' n0 p) (Node n c1 a1))
(pow2heapp n (find_max' n0 p) (Node n c1 gv1)), (pow2heapp n (find_max' n0 p) (Node n a2 c2)), (pow2heapp n (find_max' n0 p) (Node n a2 c1)), (pow2heapp n (find_max' n0 p) (Node n a2 a2)), (pow2heapp n (find_max' n0 p) (Node n a2 a1)), (pow2heapp n (find_max' n0 p) (Node n a2 gv1)), (pow2heapp n (find_max' n0 p) (Node n a1 c2)), (pow2heapp n (find_max' n0 p) (Node n a1 c1)), (pow2heapp n (find_max' n0 p) (Node n a1 a2)), (pow2heapp n (find_max' n0 p) (Node n a1 a1))
(pow2heapp n (find_max' n0 p) (Node n a1 gv1)), (pow2heapp n (find_max' n0 p) (Node n gv1 c2)), (pow2heapp n (find_max' n0 p) (Node n gv1 c1)), (pow2heapp n (find_max' n0 p) (Node n gv1 a2)), (pow2heapp n (find_max' n0 p) (Node n gv1 a1)), (pow2heapp n (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp n (find_max' n0 p) (smash c2 c2)), (pow2heapp n (find_max' n0 p) (smash c2 c1)), (pow2heapp n (find_max' n0 p) (smash c2 a2)), (pow2heapp n (find_max' n0 p) (smash c2 a1))
(pow2heapp n (find_max' n0 p) (smash c2 gv1)), (pow2heapp n (find_max' n0 p) (smash c1 c2)), (pow2heapp n (find_max' n0 p) (smash c1 c1)), (pow2heapp n (find_max' n0 p) (smash c1 a2)), (pow2heapp n (find_max' n0 p) (smash c1 a1)), (pow2heapp n (find_max' n0 p) (smash c1 gv1)), (pow2heapp n (find_max' n0 p) (smash a2 c2)), (pow2heapp n (find_max' n0 p) (smash a2 c1)), (pow2heapp n (find_max' n0 p) (smash a2 a2)), (pow2heapp n (find_max' n0 p) (smash a2 a1))
(pow2heapp n (find_max' n0 p) (smash a2 gv1)), (pow2heapp n (find_max' n0 p) (smash a1 c2)), (pow2heapp n (find_max' n0 p) (smash a1 c1)), (pow2heapp n (find_max' n0 p) (smash a1 a2)), (pow2heapp n (find_max' n0 p) (smash a1 a1)), (pow2heapp n (find_max' n0 p) (smash a1 gv1)), (pow2heapp n (find_max' n0 p) (smash gv1 c2)), (pow2heapp n (find_max' n0 p) (smash gv1 c1)), (pow2heapp n (find_max' n0 p) (smash gv1 a2)), (pow2heapp n (find_max' n0 p) (smash gv1 a1))
(pow2heapp n (find_max' n0 p) (smash gv1 gv1)), (pow2heapp n (find_max' n0 p) Leaf), (pow2heapp n (find_max' n p) c2), (pow2heapp n (find_max' n p) c1), (pow2heapp n (find_max' n p) a2), (pow2heapp n (find_max' n p) a1), (pow2heapp n (find_max' n p) gv1), (pow2heapp n (find_max' n p) (Node n1 c2 c2)), (pow2heapp n (find_max' n p) (Node n1 c2 c1)), (pow2heapp n (find_max' n p) (Node n1 c2 a2))
(pow2heapp n (find_max' n p) (Node n1 c2 a1)), (pow2heapp n (find_max' n p) (Node n1 c2 gv1)), (pow2heapp n (find_max' n p) (Node n1 c1 c2)), (pow2heapp n (find_max' n p) (Node n1 c1 c1)), (pow2heapp n (find_max' n p) (Node n1 c1 a2)), (pow2heapp n (find_max' n p) (Node n1 c1 a1)), (pow2heapp n (find_max' n p) (Node n1 c1 gv1)), (pow2heapp n (find_max' n p) (Node n1 a2 c2)), (pow2heapp n (find_max' n p) (Node n1 a2 c1)), (pow2heapp n (find_max' n p) (Node n1 a2 a2))
(pow2heapp n (find_max' n p) (Node n1 a2 a1)), (pow2heapp n (find_max' n p) (Node n1 a2 gv1)), (pow2heapp n (find_max' n p) (Node n1 a1 c2)), (pow2heapp n (find_max' n p) (Node n1 a1 c1)), (pow2heapp n (find_max' n p) (Node n1 a1 a2)), (pow2heapp n (find_max' n p) (Node n1 a1 a1)), (pow2heapp n (find_max' n p) (Node n1 a1 gv1)), (pow2heapp n (find_max' n p) (Node n1 gv1 c2)), (pow2heapp n (find_max' n p) (Node n1 gv1 c1)), (pow2heapp n (find_max' n p) (Node n1 gv1 a2))
(pow2heapp n (find_max' n p) (Node n1 gv1 a1)), (pow2heapp n (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp n (find_max' n p) (Node n0 c2 c2)), (pow2heapp n (find_max' n p) (Node n0 c2 c1)), (pow2heapp n (find_max' n p) (Node n0 c2 a2)), (pow2heapp n (find_max' n p) (Node n0 c2 a1)), (pow2heapp n (find_max' n p) (Node n0 c2 gv1)), (pow2heapp n (find_max' n p) (Node n0 c1 c2)), (pow2heapp n (find_max' n p) (Node n0 c1 c1)), (pow2heapp n (find_max' n p) (Node n0 c1 a2))
(pow2heapp n (find_max' n p) (Node n0 c1 a1)), (pow2heapp n (find_max' n p) (Node n0 c1 gv1)), (pow2heapp n (find_max' n p) (Node n0 a2 c2)), (pow2heapp n (find_max' n p) (Node n0 a2 c1)), (pow2heapp n (find_max' n p) (Node n0 a2 a2)), (pow2heapp n (find_max' n p) (Node n0 a2 a1)), (pow2heapp n (find_max' n p) (Node n0 a2 gv1)), (pow2heapp n (find_max' n p) (Node n0 a1 c2)), (pow2heapp n (find_max' n p) (Node n0 a1 c1)), (pow2heapp n (find_max' n p) (Node n0 a1 a2))
(pow2heapp n (find_max' n p) (Node n0 a1 a1)), (pow2heapp n (find_max' n p) (Node n0 a1 gv1)), (pow2heapp n (find_max' n p) (Node n0 gv1 c2)), (pow2heapp n (find_max' n p) (Node n0 gv1 c1)), (pow2heapp n (find_max' n p) (Node n0 gv1 a2)), (pow2heapp n (find_max' n p) (Node n0 gv1 a1)), (pow2heapp n (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp n (find_max' n p) (Node n c2 c2)), (pow2heapp n (find_max' n p) (Node n c2 c1)), (pow2heapp n (find_max' n p) (Node n c2 a2))
(pow2heapp n (find_max' n p) (Node n c2 a1)), (pow2heapp n (find_max' n p) (Node n c2 gv1)), (pow2heapp n (find_max' n p) (Node n c1 c2)), (pow2heapp n (find_max' n p) (Node n c1 c1)), (pow2heapp n (find_max' n p) (Node n c1 a2)), (pow2heapp n (find_max' n p) (Node n c1 a1)), (pow2heapp n (find_max' n p) (Node n c1 gv1)), (pow2heapp n (find_max' n p) (Node n a2 c2)), (pow2heapp n (find_max' n p) (Node n a2 c1)), (pow2heapp n (find_max' n p) (Node n a2 a2))
(pow2heapp n (find_max' n p) (Node n a2 a1)), (pow2heapp n (find_max' n p) (Node n a2 gv1)), (pow2heapp n (find_max' n p) (Node n a1 c2)), (pow2heapp n (find_max' n p) (Node n a1 c1)), (pow2heapp n (find_max' n p) (Node n a1 a2)), (pow2heapp n (find_max' n p) (Node n a1 a1)), (pow2heapp n (find_max' n p) (Node n a1 gv1)), (pow2heapp n (find_max' n p) (Node n gv1 c2)), (pow2heapp n (find_max' n p) (Node n gv1 c1)), (pow2heapp n (find_max' n p) (Node n gv1 a2))
(pow2heapp n (find_max' n p) (Node n gv1 a1)), (pow2heapp n (find_max' n p) (Node n gv1 gv1)), (pow2heapp n (find_max' n p) (smash c2 c2)), (pow2heapp n (find_max' n p) (smash c2 c1)), (pow2heapp n (find_max' n p) (smash c2 a2)), (pow2heapp n (find_max' n p) (smash c2 a1)), (pow2heapp n (find_max' n p) (smash c2 gv1)), (pow2heapp n (find_max' n p) (smash c1 c2)), (pow2heapp n (find_max' n p) (smash c1 c1)), (pow2heapp n (find_max' n p) (smash c1 a2))
(pow2heapp n (find_max' n p) (smash c1 a1)), (pow2heapp n (find_max' n p) (smash c1 gv1)), (pow2heapp n (find_max' n p) (smash a2 c2)), (pow2heapp n (find_max' n p) (smash a2 c1)), (pow2heapp n (find_max' n p) (smash a2 a2)), (pow2heapp n (find_max' n p) (smash a2 a1)), (pow2heapp n (find_max' n p) (smash a2 gv1)), (pow2heapp n (find_max' n p) (smash a1 c2)), (pow2heapp n (find_max' n p) (smash a1 c1)), (pow2heapp n (find_max' n p) (smash a1 a2))
(pow2heapp n (find_max' n p) (smash a1 a1)), (pow2heapp n (find_max' n p) (smash a1 gv1)), (pow2heapp n (find_max' n p) (smash gv1 c2)), (pow2heapp n (find_max' n p) (smash gv1 c1)), (pow2heapp n (find_max' n p) (smash gv1 a2)), (pow2heapp n (find_max' n p) (smash gv1 a1)), (pow2heapp n (find_max' n p) (smash gv1 gv1)), (pow2heapp n (find_max' n p) Leaf), (pow2heapp n (length p) c2), (pow2heapp n (length p) c1)
(pow2heapp n (length p) a2), (pow2heapp n (length p) a1), (pow2heapp n (length p) gv1), (pow2heapp n (length p) (Node n1 c2 c2)), (pow2heapp n (length p) (Node n1 c2 c1)), (pow2heapp n (length p) (Node n1 c2 a2)), (pow2heapp n (length p) (Node n1 c2 a1)), (pow2heapp n (length p) (Node n1 c2 gv1)), (pow2heapp n (length p) (Node n1 c1 c2)), (pow2heapp n (length p) (Node n1 c1 c1))
(pow2heapp n (length p) (Node n1 c1 a2)), (pow2heapp n (length p) (Node n1 c1 a1)), (pow2heapp n (length p) (Node n1 c1 gv1)), (pow2heapp n (length p) (Node n1 a2 c2)), (pow2heapp n (length p) (Node n1 a2 c1)), (pow2heapp n (length p) (Node n1 a2 a2)), (pow2heapp n (length p) (Node n1 a2 a1)), (pow2heapp n (length p) (Node n1 a2 gv1)), (pow2heapp n (length p) (Node n1 a1 c2)), (pow2heapp n (length p) (Node n1 a1 c1))
(pow2heapp n (length p) (Node n1 a1 a2)), (pow2heapp n (length p) (Node n1 a1 a1)), (pow2heapp n (length p) (Node n1 a1 gv1)), (pow2heapp n (length p) (Node n1 gv1 c2)), (pow2heapp n (length p) (Node n1 gv1 c1)), (pow2heapp n (length p) (Node n1 gv1 a2)), (pow2heapp n (length p) (Node n1 gv1 a1)), (pow2heapp n (length p) (Node n1 gv1 gv1)), (pow2heapp n (length p) (Node n0 c2 c2)), (pow2heapp n (length p) (Node n0 c2 c1))
(pow2heapp n (length p) (Node n0 c2 a2)), (pow2heapp n (length p) (Node n0 c2 a1)), (pow2heapp n (length p) (Node n0 c2 gv1)), (pow2heapp n (length p) (Node n0 c1 c2)), (pow2heapp n (length p) (Node n0 c1 c1)), (pow2heapp n (length p) (Node n0 c1 a2)), (pow2heapp n (length p) (Node n0 c1 a1)), (pow2heapp n (length p) (Node n0 c1 gv1)), (pow2heapp n (length p) (Node n0 a2 c2)), (pow2heapp n (length p) (Node n0 a2 c1))
(pow2heapp n (length p) (Node n0 a2 a2)), (pow2heapp n (length p) (Node n0 a2 a1)), (pow2heapp n (length p) (Node n0 a2 gv1)), (pow2heapp n (length p) (Node n0 a1 c2)), (pow2heapp n (length p) (Node n0 a1 c1)), (pow2heapp n (length p) (Node n0 a1 a2)), (pow2heapp n (length p) (Node n0 a1 a1)), (pow2heapp n (length p) (Node n0 a1 gv1)), (pow2heapp n (length p) (Node n0 gv1 c2)), (pow2heapp n (length p) (Node n0 gv1 c1))
(pow2heapp n (length p) (Node n0 gv1 a2)), (pow2heapp n (length p) (Node n0 gv1 a1)), (pow2heapp n (length p) (Node n0 gv1 gv1)), (pow2heapp n (length p) (Node n c2 c2)), (pow2heapp n (length p) (Node n c2 c1)), (pow2heapp n (length p) (Node n c2 a2)), (pow2heapp n (length p) (Node n c2 a1)), (pow2heapp n (length p) (Node n c2 gv1)), (pow2heapp n (length p) (Node n c1 c2)), (pow2heapp n (length p) (Node n c1 c1))
(pow2heapp n (length p) (Node n c1 a2)), (pow2heapp n (length p) (Node n c1 a1)), (pow2heapp n (length p) (Node n c1 gv1)), (pow2heapp n (length p) (Node n a2 c2)), (pow2heapp n (length p) (Node n a2 c1)), (pow2heapp n (length p) (Node n a2 a2)), (pow2heapp n (length p) (Node n a2 a1)), (pow2heapp n (length p) (Node n a2 gv1)), (pow2heapp n (length p) (Node n a1 c2)), (pow2heapp n (length p) (Node n a1 c1))
(pow2heapp n (length p) (Node n a1 a2)), (pow2heapp n (length p) (Node n a1 a1)), (pow2heapp n (length p) (Node n a1 gv1)), (pow2heapp n (length p) (Node n gv1 c2)), (pow2heapp n (length p) (Node n gv1 c1)), (pow2heapp n (length p) (Node n gv1 a2)), (pow2heapp n (length p) (Node n gv1 a1)), (pow2heapp n (length p) (Node n gv1 gv1)), (pow2heapp n (length p) (smash c2 c2)), (pow2heapp n (length p) (smash c2 c1))
(pow2heapp n (length p) (smash c2 a2)), (pow2heapp n (length p) (smash c2 a1)), (pow2heapp n (length p) (smash c2 gv1)), (pow2heapp n (length p) (smash c1 c2)), (pow2heapp n (length p) (smash c1 c1)), (pow2heapp n (length p) (smash c1 a2)), (pow2heapp n (length p) (smash c1 a1)), (pow2heapp n (length p) (smash c1 gv1)), (pow2heapp n (length p) (smash a2 c2)), (pow2heapp n (length p) (smash a2 c1))
(pow2heapp n (length p) (smash a2 a2)), (pow2heapp n (length p) (smash a2 a1)), (pow2heapp n (length p) (smash a2 gv1)), (pow2heapp n (length p) (smash a1 c2)), (pow2heapp n (length p) (smash a1 c1)), (pow2heapp n (length p) (smash a1 a2)), (pow2heapp n (length p) (smash a1 a1)), (pow2heapp n (length p) (smash a1 gv1)), (pow2heapp n (length p) (smash gv1 c2)), (pow2heapp n (length p) (smash gv1 c1))
(pow2heapp n (length p) (smash gv1 a2)), (pow2heapp n (length p) (smash gv1 a1)), (pow2heapp n (length p) (smash gv1 gv1)), (pow2heapp n (length p) Leaf), (pow2heapp (find_max' n1 p) n1 c2), (pow2heapp (find_max' n1 p) n1 c1), (pow2heapp (find_max' n1 p) n1 a2), (pow2heapp (find_max' n1 p) n1 a1), (pow2heapp (find_max' n1 p) n1 gv1), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n1 gv1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 c1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 a1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n c1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 c2))
(pow2heapp (find_max' n1 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a2 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n a1 gv1)), (pow2heapp (find_max' n1 p) n1 (Node n gv1 c2))
(pow2heapp (find_max' n1 p) n1 (Node n gv1 c1)), (pow2heapp (find_max' n1 p) n1 (Node n gv1 a2)), (pow2heapp (find_max' n1 p) n1 (Node n gv1 a1)), (pow2heapp (find_max' n1 p) n1 (Node n gv1 gv1)), (pow2heapp (find_max' n1 p) n1 (smash c2 c2)), (pow2heapp (find_max' n1 p) n1 (smash c2 c1)), (pow2heapp (find_max' n1 p) n1 (smash c2 a2)), (pow2heapp (find_max' n1 p) n1 (smash c2 a1)), (pow2heapp (find_max' n1 p) n1 (smash c2 gv1)), (pow2heapp (find_max' n1 p) n1 (smash c1 c2))
(pow2heapp (find_max' n1 p) n1 (smash c1 c1)), (pow2heapp (find_max' n1 p) n1 (smash c1 a2)), (pow2heapp (find_max' n1 p) n1 (smash c1 a1)), (pow2heapp (find_max' n1 p) n1 (smash c1 gv1)), (pow2heapp (find_max' n1 p) n1 (smash a2 c2)), (pow2heapp (find_max' n1 p) n1 (smash a2 c1)), (pow2heapp (find_max' n1 p) n1 (smash a2 a2)), (pow2heapp (find_max' n1 p) n1 (smash a2 a1)), (pow2heapp (find_max' n1 p) n1 (smash a2 gv1)), (pow2heapp (find_max' n1 p) n1 (smash a1 c2))
(pow2heapp (find_max' n1 p) n1 (smash a1 c1)), (pow2heapp (find_max' n1 p) n1 (smash a1 a2)), (pow2heapp (find_max' n1 p) n1 (smash a1 a1)), (pow2heapp (find_max' n1 p) n1 (smash a1 gv1)), (pow2heapp (find_max' n1 p) n1 (smash gv1 c2)), (pow2heapp (find_max' n1 p) n1 (smash gv1 c1)), (pow2heapp (find_max' n1 p) n1 (smash gv1 a2)), (pow2heapp (find_max' n1 p) n1 (smash gv1 a1)), (pow2heapp (find_max' n1 p) n1 (smash gv1 gv1)), (pow2heapp (find_max' n1 p) n1 Leaf)
(pow2heapp (find_max' n1 p) n0 c2), (pow2heapp (find_max' n1 p) n0 c1), (pow2heapp (find_max' n1 p) n0 a2), (pow2heapp (find_max' n1 p) n0 a1), (pow2heapp (find_max' n1 p) n0 gv1), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c2 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a2 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n1 gv1 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 c1 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 a1 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c2 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n c1 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a2 gv1))
(pow2heapp (find_max' n1 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n a1 gv1)), (pow2heapp (find_max' n1 p) n0 (Node n gv1 c2)), (pow2heapp (find_max' n1 p) n0 (Node n gv1 c1)), (pow2heapp (find_max' n1 p) n0 (Node n gv1 a2)), (pow2heapp (find_max' n1 p) n0 (Node n gv1 a1)), (pow2heapp (find_max' n1 p) n0 (Node n gv1 gv1))
(pow2heapp (find_max' n1 p) n0 (smash c2 c2)), (pow2heapp (find_max' n1 p) n0 (smash c2 c1)), (pow2heapp (find_max' n1 p) n0 (smash c2 a2)), (pow2heapp (find_max' n1 p) n0 (smash c2 a1)), (pow2heapp (find_max' n1 p) n0 (smash c2 gv1)), (pow2heapp (find_max' n1 p) n0 (smash c1 c2)), (pow2heapp (find_max' n1 p) n0 (smash c1 c1)), (pow2heapp (find_max' n1 p) n0 (smash c1 a2)), (pow2heapp (find_max' n1 p) n0 (smash c1 a1)), (pow2heapp (find_max' n1 p) n0 (smash c1 gv1))
(pow2heapp (find_max' n1 p) n0 (smash a2 c2)), (pow2heapp (find_max' n1 p) n0 (smash a2 c1)), (pow2heapp (find_max' n1 p) n0 (smash a2 a2)), (pow2heapp (find_max' n1 p) n0 (smash a2 a1)), (pow2heapp (find_max' n1 p) n0 (smash a2 gv1)), (pow2heapp (find_max' n1 p) n0 (smash a1 c2)), (pow2heapp (find_max' n1 p) n0 (smash a1 c1)), (pow2heapp (find_max' n1 p) n0 (smash a1 a2)), (pow2heapp (find_max' n1 p) n0 (smash a1 a1)), (pow2heapp (find_max' n1 p) n0 (smash a1 gv1))
(pow2heapp (find_max' n1 p) n0 (smash gv1 c2)), (pow2heapp (find_max' n1 p) n0 (smash gv1 c1)), (pow2heapp (find_max' n1 p) n0 (smash gv1 a2)), (pow2heapp (find_max' n1 p) n0 (smash gv1 a1)), (pow2heapp (find_max' n1 p) n0 (smash gv1 gv1)), (pow2heapp (find_max' n1 p) n0 Leaf), (pow2heapp (find_max' n1 p) n c2), (pow2heapp (find_max' n1 p) n c1), (pow2heapp (find_max' n1 p) n a2), (pow2heapp (find_max' n1 p) n a1)
(pow2heapp (find_max' n1 p) n gv1), (pow2heapp (find_max' n1 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 c2 gv1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 c1 a1))
(pow2heapp (find_max' n1 p) n (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) n (Node n1 a2 gv1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 a1 a1))
(pow2heapp (find_max' n1 p) n (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) n (Node n1 gv1 c2)), (pow2heapp (find_max' n1 p) n (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) n (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) n (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) n (Node n1 gv1 gv1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 c1 gv1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a2 a1))
(pow2heapp (find_max' n1 p) n (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) n (Node n0 a1 gv1)), (pow2heapp (find_max' n1 p) n (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) n (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) n (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) n (Node n0 gv1 a1))
(pow2heapp (find_max' n1 p) n (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) n (Node n c2 c2)), (pow2heapp (find_max' n1 p) n (Node n c2 c1)), (pow2heapp (find_max' n1 p) n (Node n c2 a2)), (pow2heapp (find_max' n1 p) n (Node n c2 a1)), (pow2heapp (find_max' n1 p) n (Node n c2 gv1)), (pow2heapp (find_max' n1 p) n (Node n c1 c2)), (pow2heapp (find_max' n1 p) n (Node n c1 c1)), (pow2heapp (find_max' n1 p) n (Node n c1 a2)), (pow2heapp (find_max' n1 p) n (Node n c1 a1))
(pow2heapp (find_max' n1 p) n (Node n c1 gv1)), (pow2heapp (find_max' n1 p) n (Node n a2 c2)), (pow2heapp (find_max' n1 p) n (Node n a2 c1)), (pow2heapp (find_max' n1 p) n (Node n a2 a2)), (pow2heapp (find_max' n1 p) n (Node n a2 a1)), (pow2heapp (find_max' n1 p) n (Node n a2 gv1)), (pow2heapp (find_max' n1 p) n (Node n a1 c2)), (pow2heapp (find_max' n1 p) n (Node n a1 c1)), (pow2heapp (find_max' n1 p) n (Node n a1 a2)), (pow2heapp (find_max' n1 p) n (Node n a1 a1))
(pow2heapp (find_max' n1 p) n (Node n a1 gv1)), (pow2heapp (find_max' n1 p) n (Node n gv1 c2)), (pow2heapp (find_max' n1 p) n (Node n gv1 c1)), (pow2heapp (find_max' n1 p) n (Node n gv1 a2)), (pow2heapp (find_max' n1 p) n (Node n gv1 a1)), (pow2heapp (find_max' n1 p) n (Node n gv1 gv1)), (pow2heapp (find_max' n1 p) n (smash c2 c2)), (pow2heapp (find_max' n1 p) n (smash c2 c1)), (pow2heapp (find_max' n1 p) n (smash c2 a2)), (pow2heapp (find_max' n1 p) n (smash c2 a1))
(pow2heapp (find_max' n1 p) n (smash c2 gv1)), (pow2heapp (find_max' n1 p) n (smash c1 c2)), (pow2heapp (find_max' n1 p) n (smash c1 c1)), (pow2heapp (find_max' n1 p) n (smash c1 a2)), (pow2heapp (find_max' n1 p) n (smash c1 a1)), (pow2heapp (find_max' n1 p) n (smash c1 gv1)), (pow2heapp (find_max' n1 p) n (smash a2 c2)), (pow2heapp (find_max' n1 p) n (smash a2 c1)), (pow2heapp (find_max' n1 p) n (smash a2 a2)), (pow2heapp (find_max' n1 p) n (smash a2 a1))
(pow2heapp (find_max' n1 p) n (smash a2 gv1)), (pow2heapp (find_max' n1 p) n (smash a1 c2)), (pow2heapp (find_max' n1 p) n (smash a1 c1)), (pow2heapp (find_max' n1 p) n (smash a1 a2)), (pow2heapp (find_max' n1 p) n (smash a1 a1)), (pow2heapp (find_max' n1 p) n (smash a1 gv1)), (pow2heapp (find_max' n1 p) n (smash gv1 c2)), (pow2heapp (find_max' n1 p) n (smash gv1 c1)), (pow2heapp (find_max' n1 p) n (smash gv1 a2)), (pow2heapp (find_max' n1 p) n (smash gv1 a1))
(pow2heapp (find_max' n1 p) n (smash gv1 gv1)), (pow2heapp (find_max' n1 p) n Leaf), (pow2heapp (find_max' n1 p) (find_max' n1 p) c2), (pow2heapp (find_max' n1 p) (find_max' n1 p) c1), (pow2heapp (find_max' n1 p) (find_max' n1 p) a2), (pow2heapp (find_max' n1 p) (find_max' n1 p) a1), (pow2heapp (find_max' n1 p) (find_max' n1 p) gv1), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a2))
(pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) (smash gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n0 p) c2), (pow2heapp (find_max' n1 p) (find_max' n0 p) c1)
(pow2heapp (find_max' n1 p) (find_max' n0 p) a2), (pow2heapp (find_max' n1 p) (find_max' n0 p) a1), (pow2heapp (find_max' n1 p) (find_max' n0 p) gv1), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv1 c1))
(pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) (smash gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n1 p) (find_max' n p) c2), (pow2heapp (find_max' n1 p) (find_max' n p) c1), (pow2heapp (find_max' n1 p) (find_max' n p) a2), (pow2heapp (find_max' n1 p) (find_max' n p) a1), (pow2heapp (find_max' n1 p) (find_max' n p) gv1), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (Node n gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash c1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a2 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c2))
(pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash a1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv1 c2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv1 c1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv1 a2)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv1 a1)), (pow2heapp (find_max' n1 p) (find_max' n p) (smash gv1 gv1)), (pow2heapp (find_max' n1 p) (find_max' n p) Leaf)
(pow2heapp (find_max' n1 p) (length p) c2), (pow2heapp (find_max' n1 p) (length p) c1), (pow2heapp (find_max' n1 p) (length p) a2), (pow2heapp (find_max' n1 p) (length p) a1), (pow2heapp (find_max' n1 p) (length p) gv1), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c2 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 c1 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a2 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 a1 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n1 gv1 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c2 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 c1 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a2 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 a1 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n0 gv1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c2 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n c1 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a2 gv1))
(pow2heapp (find_max' n1 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n a1 gv1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv1 c2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv1 c1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv1 a2)), (pow2heapp (find_max' n1 p) (length p) (Node n gv1 a1)), (pow2heapp (find_max' n1 p) (length p) (Node n gv1 gv1))
(pow2heapp (find_max' n1 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c2 gv1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash c1 gv1))
(pow2heapp (find_max' n1 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a2 gv1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash a1 gv1))
(pow2heapp (find_max' n1 p) (length p) (smash gv1 c2)), (pow2heapp (find_max' n1 p) (length p) (smash gv1 c1)), (pow2heapp (find_max' n1 p) (length p) (smash gv1 a2)), (pow2heapp (find_max' n1 p) (length p) (smash gv1 a1)), (pow2heapp (find_max' n1 p) (length p) (smash gv1 gv1)), (pow2heapp (find_max' n1 p) (length p) Leaf), (pow2heapp (find_max' n0 p) n1 c2), (pow2heapp (find_max' n0 p) n1 c1), (pow2heapp (find_max' n0 p) n1 a2), (pow2heapp (find_max' n0 p) n1 a1)
(pow2heapp (find_max' n0 p) n1 gv1), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n0 gv1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n c2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n c1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n c1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n1 (Node n a2 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n a1 a1))
(pow2heapp (find_max' n0 p) n1 (Node n a1 gv1)), (pow2heapp (find_max' n0 p) n1 (Node n gv1 c2)), (pow2heapp (find_max' n0 p) n1 (Node n gv1 c1)), (pow2heapp (find_max' n0 p) n1 (Node n gv1 a2)), (pow2heapp (find_max' n0 p) n1 (Node n gv1 a1)), (pow2heapp (find_max' n0 p) n1 (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) n1 (smash c2 c2)), (pow2heapp (find_max' n0 p) n1 (smash c2 c1)), (pow2heapp (find_max' n0 p) n1 (smash c2 a2)), (pow2heapp (find_max' n0 p) n1 (smash c2 a1))
(pow2heapp (find_max' n0 p) n1 (smash c2 gv1)), (pow2heapp (find_max' n0 p) n1 (smash c1 c2)), (pow2heapp (find_max' n0 p) n1 (smash c1 c1)), (pow2heapp (find_max' n0 p) n1 (smash c1 a2)), (pow2heapp (find_max' n0 p) n1 (smash c1 a1)), (pow2heapp (find_max' n0 p) n1 (smash c1 gv1)), (pow2heapp (find_max' n0 p) n1 (smash a2 c2)), (pow2heapp (find_max' n0 p) n1 (smash a2 c1)), (pow2heapp (find_max' n0 p) n1 (smash a2 a2)), (pow2heapp (find_max' n0 p) n1 (smash a2 a1))
(pow2heapp (find_max' n0 p) n1 (smash a2 gv1)), (pow2heapp (find_max' n0 p) n1 (smash a1 c2)), (pow2heapp (find_max' n0 p) n1 (smash a1 c1)), (pow2heapp (find_max' n0 p) n1 (smash a1 a2)), (pow2heapp (find_max' n0 p) n1 (smash a1 a1)), (pow2heapp (find_max' n0 p) n1 (smash a1 gv1)), (pow2heapp (find_max' n0 p) n1 (smash gv1 c2)), (pow2heapp (find_max' n0 p) n1 (smash gv1 c1)), (pow2heapp (find_max' n0 p) n1 (smash gv1 a2)), (pow2heapp (find_max' n0 p) n1 (smash gv1 a1))
(pow2heapp (find_max' n0 p) n1 (smash gv1 gv1)), (pow2heapp (find_max' n0 p) n1 Leaf), (pow2heapp (find_max' n0 p) n0 c2), (pow2heapp (find_max' n0 p) n0 c1), (pow2heapp (find_max' n0 p) n0 a2), (pow2heapp (find_max' n0 p) n0 a1), (pow2heapp (find_max' n0 p) n0 gv1), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n c2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n c1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n c1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a2 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 a2))
(pow2heapp (find_max' n0 p) n0 (Node n a2 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a2 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a2)), (pow2heapp (find_max' n0 p) n0 (Node n a1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n a1 gv1)), (pow2heapp (find_max' n0 p) n0 (Node n gv1 c2)), (pow2heapp (find_max' n0 p) n0 (Node n gv1 c1)), (pow2heapp (find_max' n0 p) n0 (Node n gv1 a2))
(pow2heapp (find_max' n0 p) n0 (Node n gv1 a1)), (pow2heapp (find_max' n0 p) n0 (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) n0 (smash c2 c2)), (pow2heapp (find_max' n0 p) n0 (smash c2 c1)), (pow2heapp (find_max' n0 p) n0 (smash c2 a2)), (pow2heapp (find_max' n0 p) n0 (smash c2 a1)), (pow2heapp (find_max' n0 p) n0 (smash c2 gv1)), (pow2heapp (find_max' n0 p) n0 (smash c1 c2)), (pow2heapp (find_max' n0 p) n0 (smash c1 c1)), (pow2heapp (find_max' n0 p) n0 (smash c1 a2))
(pow2heapp (find_max' n0 p) n0 (smash c1 a1)), (pow2heapp (find_max' n0 p) n0 (smash c1 gv1)), (pow2heapp (find_max' n0 p) n0 (smash a2 c2)), (pow2heapp (find_max' n0 p) n0 (smash a2 c1)), (pow2heapp (find_max' n0 p) n0 (smash a2 a2)), (pow2heapp (find_max' n0 p) n0 (smash a2 a1)), (pow2heapp (find_max' n0 p) n0 (smash a2 gv1)), (pow2heapp (find_max' n0 p) n0 (smash a1 c2)), (pow2heapp (find_max' n0 p) n0 (smash a1 c1)), (pow2heapp (find_max' n0 p) n0 (smash a1 a2))
(pow2heapp (find_max' n0 p) n0 (smash a1 a1)), (pow2heapp (find_max' n0 p) n0 (smash a1 gv1)), (pow2heapp (find_max' n0 p) n0 (smash gv1 c2)), (pow2heapp (find_max' n0 p) n0 (smash gv1 c1)), (pow2heapp (find_max' n0 p) n0 (smash gv1 a2)), (pow2heapp (find_max' n0 p) n0 (smash gv1 a1)), (pow2heapp (find_max' n0 p) n0 (smash gv1 gv1)), (pow2heapp (find_max' n0 p) n0 Leaf), (pow2heapp (find_max' n0 p) n c2), (pow2heapp (find_max' n0 p) n c1)
(pow2heapp (find_max' n0 p) n a2), (pow2heapp (find_max' n0 p) n a1), (pow2heapp (find_max' n0 p) n gv1), (pow2heapp (find_max' n0 p) n (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 c1))
(pow2heapp (find_max' n0 p) n (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 c1))
(pow2heapp (find_max' n0 p) n (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) n (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) n (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) n (Node n1 gv1 a2)), (pow2heapp (find_max' n0 p) n (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) n (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 c1))
(pow2heapp (find_max' n0 p) n (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) n (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) n (Node n0 gv1 c1))
(pow2heapp (find_max' n0 p) n (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) n (Node n0 gv1 a1)), (pow2heapp (find_max' n0 p) n (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) n (Node n c2 c2)), (pow2heapp (find_max' n0 p) n (Node n c2 c1)), (pow2heapp (find_max' n0 p) n (Node n c2 a2)), (pow2heapp (find_max' n0 p) n (Node n c2 a1)), (pow2heapp (find_max' n0 p) n (Node n c2 gv1)), (pow2heapp (find_max' n0 p) n (Node n c1 c2)), (pow2heapp (find_max' n0 p) n (Node n c1 c1))
(pow2heapp (find_max' n0 p) n (Node n c1 a2)), (pow2heapp (find_max' n0 p) n (Node n c1 a1)), (pow2heapp (find_max' n0 p) n (Node n c1 gv1)), (pow2heapp (find_max' n0 p) n (Node n a2 c2)), (pow2heapp (find_max' n0 p) n (Node n a2 c1)), (pow2heapp (find_max' n0 p) n (Node n a2 a2)), (pow2heapp (find_max' n0 p) n (Node n a2 a1)), (pow2heapp (find_max' n0 p) n (Node n a2 gv1)), (pow2heapp (find_max' n0 p) n (Node n a1 c2)), (pow2heapp (find_max' n0 p) n (Node n a1 c1))
(pow2heapp (find_max' n0 p) n (Node n a1 a2)), (pow2heapp (find_max' n0 p) n (Node n a1 a1)), (pow2heapp (find_max' n0 p) n (Node n a1 gv1)), (pow2heapp (find_max' n0 p) n (Node n gv1 c2)), (pow2heapp (find_max' n0 p) n (Node n gv1 c1)), (pow2heapp (find_max' n0 p) n (Node n gv1 a2)), (pow2heapp (find_max' n0 p) n (Node n gv1 a1)), (pow2heapp (find_max' n0 p) n (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) n (smash c2 c2)), (pow2heapp (find_max' n0 p) n (smash c2 c1))
(pow2heapp (find_max' n0 p) n (smash c2 a2)), (pow2heapp (find_max' n0 p) n (smash c2 a1)), (pow2heapp (find_max' n0 p) n (smash c2 gv1)), (pow2heapp (find_max' n0 p) n (smash c1 c2)), (pow2heapp (find_max' n0 p) n (smash c1 c1)), (pow2heapp (find_max' n0 p) n (smash c1 a2)), (pow2heapp (find_max' n0 p) n (smash c1 a1)), (pow2heapp (find_max' n0 p) n (smash c1 gv1)), (pow2heapp (find_max' n0 p) n (smash a2 c2)), (pow2heapp (find_max' n0 p) n (smash a2 c1))
(pow2heapp (find_max' n0 p) n (smash a2 a2)), (pow2heapp (find_max' n0 p) n (smash a2 a1)), (pow2heapp (find_max' n0 p) n (smash a2 gv1)), (pow2heapp (find_max' n0 p) n (smash a1 c2)), (pow2heapp (find_max' n0 p) n (smash a1 c1)), (pow2heapp (find_max' n0 p) n (smash a1 a2)), (pow2heapp (find_max' n0 p) n (smash a1 a1)), (pow2heapp (find_max' n0 p) n (smash a1 gv1)), (pow2heapp (find_max' n0 p) n (smash gv1 c2)), (pow2heapp (find_max' n0 p) n (smash gv1 c1))
(pow2heapp (find_max' n0 p) n (smash gv1 a2)), (pow2heapp (find_max' n0 p) n (smash gv1 a1)), (pow2heapp (find_max' n0 p) n (smash gv1 gv1)), (pow2heapp (find_max' n0 p) n Leaf), (pow2heapp (find_max' n0 p) (find_max' n1 p) c2), (pow2heapp (find_max' n0 p) (find_max' n1 p) c1), (pow2heapp (find_max' n0 p) (find_max' n1 p) a2), (pow2heapp (find_max' n0 p) (find_max' n1 p) a1), (pow2heapp (find_max' n0 p) (find_max' n1 p) gv1), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c2))
(pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) (smash gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n1 p) Leaf)
(pow2heapp (find_max' n0 p) (find_max' n0 p) c2), (pow2heapp (find_max' n0 p) (find_max' n0 p) c1), (pow2heapp (find_max' n0 p) (find_max' n0 p) a2), (pow2heapp (find_max' n0 p) (find_max' n0 p) a1), (pow2heapp (find_max' n0 p) (find_max' n0 p) gv1), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c2 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a2 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n1 gv1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 c1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 a1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c2 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a2 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (Node n gv1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash c1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash a1 gv1))
(pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) (smash gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n0 p) (find_max' n p) c2), (pow2heapp (find_max' n0 p) (find_max' n p) c1), (pow2heapp (find_max' n0 p) (find_max' n p) a2), (pow2heapp (find_max' n0 p) (find_max' n p) a1)
(pow2heapp (find_max' n0 p) (find_max' n p) gv1), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (Node n a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash c2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash c1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash a2 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash a1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv1 c2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv1 c1)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv1 a2)), (pow2heapp (find_max' n0 p) (find_max' n p) (smash gv1 a1))
(pow2heapp (find_max' n0 p) (find_max' n p) (smash gv1 gv1)), (pow2heapp (find_max' n0 p) (find_max' n p) Leaf), (pow2heapp (find_max' n0 p) (length p) c2), (pow2heapp (find_max' n0 p) (length p) c1), (pow2heapp (find_max' n0 p) (length p) a2), (pow2heapp (find_max' n0 p) (length p) a1), (pow2heapp (find_max' n0 p) (length p) gv1), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 c1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 a1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n1 gv1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 c1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 a1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n c1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a2 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n a1 gv1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv1 c2)), (pow2heapp (find_max' n0 p) (length p) (Node n gv1 c1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv1 a2))
(pow2heapp (find_max' n0 p) (length p) (Node n gv1 a1)), (pow2heapp (find_max' n0 p) (length p) (Node n gv1 gv1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash c2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c2 gv1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash c1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash c1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash c1 gv1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a2)), (pow2heapp (find_max' n0 p) (length p) (smash a2 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a2 gv1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash a1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 a2))
(pow2heapp (find_max' n0 p) (length p) (smash a1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash a1 gv1)), (pow2heapp (find_max' n0 p) (length p) (smash gv1 c2)), (pow2heapp (find_max' n0 p) (length p) (smash gv1 c1)), (pow2heapp (find_max' n0 p) (length p) (smash gv1 a2)), (pow2heapp (find_max' n0 p) (length p) (smash gv1 a1)), (pow2heapp (find_max' n0 p) (length p) (smash gv1 gv1)), (pow2heapp (find_max' n0 p) (length p) Leaf), (pow2heapp (find_max' n p) n1 c2), (pow2heapp (find_max' n p) n1 c1)
(pow2heapp (find_max' n p) n1 a2), (pow2heapp (find_max' n p) n1 a1), (pow2heapp (find_max' n p) n1 gv1), (pow2heapp (find_max' n p) n1 (Node n1 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c2 gv1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 c1))
(pow2heapp (find_max' n p) n1 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 c1 gv1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a2 gv1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 c1))
(pow2heapp (find_max' n p) n1 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 a1 gv1)), (pow2heapp (find_max' n p) n1 (Node n1 gv1 c2)), (pow2heapp (find_max' n p) n1 (Node n1 gv1 c1)), (pow2heapp (find_max' n p) n1 (Node n1 gv1 a2)), (pow2heapp (find_max' n p) n1 (Node n1 gv1 a1)), (pow2heapp (find_max' n p) n1 (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 c1))
(pow2heapp (find_max' n p) n1 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c2 gv1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 c1 gv1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 c1))
(pow2heapp (find_max' n p) n1 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a2 gv1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 a1 gv1)), (pow2heapp (find_max' n p) n1 (Node n0 gv1 c2)), (pow2heapp (find_max' n p) n1 (Node n0 gv1 c1))
(pow2heapp (find_max' n p) n1 (Node n0 gv1 a2)), (pow2heapp (find_max' n p) n1 (Node n0 gv1 a1)), (pow2heapp (find_max' n p) n1 (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) n1 (Node n c2 c2)), (pow2heapp (find_max' n p) n1 (Node n c2 c1)), (pow2heapp (find_max' n p) n1 (Node n c2 a2)), (pow2heapp (find_max' n p) n1 (Node n c2 a1)), (pow2heapp (find_max' n p) n1 (Node n c2 gv1)), (pow2heapp (find_max' n p) n1 (Node n c1 c2)), (pow2heapp (find_max' n p) n1 (Node n c1 c1))
(pow2heapp (find_max' n p) n1 (Node n c1 a2)), (pow2heapp (find_max' n p) n1 (Node n c1 a1)), (pow2heapp (find_max' n p) n1 (Node n c1 gv1)), (pow2heapp (find_max' n p) n1 (Node n a2 c2)), (pow2heapp (find_max' n p) n1 (Node n a2 c1)), (pow2heapp (find_max' n p) n1 (Node n a2 a2)), (pow2heapp (find_max' n p) n1 (Node n a2 a1)), (pow2heapp (find_max' n p) n1 (Node n a2 gv1)), (pow2heapp (find_max' n p) n1 (Node n a1 c2)), (pow2heapp (find_max' n p) n1 (Node n a1 c1))
(pow2heapp (find_max' n p) n1 (Node n a1 a2)), (pow2heapp (find_max' n p) n1 (Node n a1 a1)), (pow2heapp (find_max' n p) n1 (Node n a1 gv1)), (pow2heapp (find_max' n p) n1 (Node n gv1 c2)), (pow2heapp (find_max' n p) n1 (Node n gv1 c1)), (pow2heapp (find_max' n p) n1 (Node n gv1 a2)), (pow2heapp (find_max' n p) n1 (Node n gv1 a1)), (pow2heapp (find_max' n p) n1 (Node n gv1 gv1)), (pow2heapp (find_max' n p) n1 (smash c2 c2)), (pow2heapp (find_max' n p) n1 (smash c2 c1))
(pow2heapp (find_max' n p) n1 (smash c2 a2)), (pow2heapp (find_max' n p) n1 (smash c2 a1)), (pow2heapp (find_max' n p) n1 (smash c2 gv1)), (pow2heapp (find_max' n p) n1 (smash c1 c2)), (pow2heapp (find_max' n p) n1 (smash c1 c1)), (pow2heapp (find_max' n p) n1 (smash c1 a2)), (pow2heapp (find_max' n p) n1 (smash c1 a1)), (pow2heapp (find_max' n p) n1 (smash c1 gv1)), (pow2heapp (find_max' n p) n1 (smash a2 c2)), (pow2heapp (find_max' n p) n1 (smash a2 c1))
(pow2heapp (find_max' n p) n1 (smash a2 a2)), (pow2heapp (find_max' n p) n1 (smash a2 a1)), (pow2heapp (find_max' n p) n1 (smash a2 gv1)), (pow2heapp (find_max' n p) n1 (smash a1 c2)), (pow2heapp (find_max' n p) n1 (smash a1 c1)), (pow2heapp (find_max' n p) n1 (smash a1 a2)), (pow2heapp (find_max' n p) n1 (smash a1 a1)), (pow2heapp (find_max' n p) n1 (smash a1 gv1)), (pow2heapp (find_max' n p) n1 (smash gv1 c2)), (pow2heapp (find_max' n p) n1 (smash gv1 c1))
(pow2heapp (find_max' n p) n1 (smash gv1 a2)), (pow2heapp (find_max' n p) n1 (smash gv1 a1)), (pow2heapp (find_max' n p) n1 (smash gv1 gv1)), (pow2heapp (find_max' n p) n1 Leaf), (pow2heapp (find_max' n p) n0 c2), (pow2heapp (find_max' n p) n0 c1), (pow2heapp (find_max' n p) n0 a2), (pow2heapp (find_max' n p) n0 a1), (pow2heapp (find_max' n p) n0 gv1), (pow2heapp (find_max' n p) n0 (Node n1 c2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c2 gv1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 c1 gv1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 c2))
(pow2heapp (find_max' n p) n0 (Node n1 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a2 gv1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 a1 gv1)), (pow2heapp (find_max' n p) n0 (Node n1 gv1 c2))
(pow2heapp (find_max' n p) n0 (Node n1 gv1 c1)), (pow2heapp (find_max' n p) n0 (Node n1 gv1 a2)), (pow2heapp (find_max' n p) n0 (Node n1 gv1 a1)), (pow2heapp (find_max' n p) n0 (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c2 gv1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 c2))
(pow2heapp (find_max' n p) n0 (Node n0 c1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 c1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 c1 gv1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a2 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a2 gv1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 c2))
(pow2heapp (find_max' n p) n0 (Node n0 a1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 a1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 a1 gv1)), (pow2heapp (find_max' n p) n0 (Node n0 gv1 c2)), (pow2heapp (find_max' n p) n0 (Node n0 gv1 c1)), (pow2heapp (find_max' n p) n0 (Node n0 gv1 a2)), (pow2heapp (find_max' n p) n0 (Node n0 gv1 a1)), (pow2heapp (find_max' n p) n0 (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) n0 (Node n c2 c2))
(pow2heapp (find_max' n p) n0 (Node n c2 c1)), (pow2heapp (find_max' n p) n0 (Node n c2 a2)), (pow2heapp (find_max' n p) n0 (Node n c2 a1)), (pow2heapp (find_max' n p) n0 (Node n c2 gv1)), (pow2heapp (find_max' n p) n0 (Node n c1 c2)), (pow2heapp (find_max' n p) n0 (Node n c1 c1)), (pow2heapp (find_max' n p) n0 (Node n c1 a2)), (pow2heapp (find_max' n p) n0 (Node n c1 a1)), (pow2heapp (find_max' n p) n0 (Node n c1 gv1)), (pow2heapp (find_max' n p) n0 (Node n a2 c2))
(pow2heapp (find_max' n p) n0 (Node n a2 c1)), (pow2heapp (find_max' n p) n0 (Node n a2 a2)), (pow2heapp (find_max' n p) n0 (Node n a2 a1)), (pow2heapp (find_max' n p) n0 (Node n a2 gv1)), (pow2heapp (find_max' n p) n0 (Node n a1 c2)), (pow2heapp (find_max' n p) n0 (Node n a1 c1)), (pow2heapp (find_max' n p) n0 (Node n a1 a2)), (pow2heapp (find_max' n p) n0 (Node n a1 a1)), (pow2heapp (find_max' n p) n0 (Node n a1 gv1)), (pow2heapp (find_max' n p) n0 (Node n gv1 c2))
(pow2heapp (find_max' n p) n0 (Node n gv1 c1)), (pow2heapp (find_max' n p) n0 (Node n gv1 a2)), (pow2heapp (find_max' n p) n0 (Node n gv1 a1)), (pow2heapp (find_max' n p) n0 (Node n gv1 gv1)), (pow2heapp (find_max' n p) n0 (smash c2 c2)), (pow2heapp (find_max' n p) n0 (smash c2 c1)), (pow2heapp (find_max' n p) n0 (smash c2 a2)), (pow2heapp (find_max' n p) n0 (smash c2 a1)), (pow2heapp (find_max' n p) n0 (smash c2 gv1)), (pow2heapp (find_max' n p) n0 (smash c1 c2))
(pow2heapp (find_max' n p) n0 (smash c1 c1)), (pow2heapp (find_max' n p) n0 (smash c1 a2)), (pow2heapp (find_max' n p) n0 (smash c1 a1)), (pow2heapp (find_max' n p) n0 (smash c1 gv1)), (pow2heapp (find_max' n p) n0 (smash a2 c2)), (pow2heapp (find_max' n p) n0 (smash a2 c1)), (pow2heapp (find_max' n p) n0 (smash a2 a2)), (pow2heapp (find_max' n p) n0 (smash a2 a1)), (pow2heapp (find_max' n p) n0 (smash a2 gv1)), (pow2heapp (find_max' n p) n0 (smash a1 c2))
(pow2heapp (find_max' n p) n0 (smash a1 c1)), (pow2heapp (find_max' n p) n0 (smash a1 a2)), (pow2heapp (find_max' n p) n0 (smash a1 a1)), (pow2heapp (find_max' n p) n0 (smash a1 gv1)), (pow2heapp (find_max' n p) n0 (smash gv1 c2)), (pow2heapp (find_max' n p) n0 (smash gv1 c1)), (pow2heapp (find_max' n p) n0 (smash gv1 a2)), (pow2heapp (find_max' n p) n0 (smash gv1 a1)), (pow2heapp (find_max' n p) n0 (smash gv1 gv1)), (pow2heapp (find_max' n p) n0 Leaf)
(pow2heapp (find_max' n p) n c2), (pow2heapp (find_max' n p) n c1), (pow2heapp (find_max' n p) n a2), (pow2heapp (find_max' n p) n a1), (pow2heapp (find_max' n p) n gv1), (pow2heapp (find_max' n p) n (Node n1 c2 c2)), (pow2heapp (find_max' n p) n (Node n1 c2 c1)), (pow2heapp (find_max' n p) n (Node n1 c2 a2)), (pow2heapp (find_max' n p) n (Node n1 c2 a1)), (pow2heapp (find_max' n p) n (Node n1 c2 gv1))
(pow2heapp (find_max' n p) n (Node n1 c1 c2)), (pow2heapp (find_max' n p) n (Node n1 c1 c1)), (pow2heapp (find_max' n p) n (Node n1 c1 a2)), (pow2heapp (find_max' n p) n (Node n1 c1 a1)), (pow2heapp (find_max' n p) n (Node n1 c1 gv1)), (pow2heapp (find_max' n p) n (Node n1 a2 c2)), (pow2heapp (find_max' n p) n (Node n1 a2 c1)), (pow2heapp (find_max' n p) n (Node n1 a2 a2)), (pow2heapp (find_max' n p) n (Node n1 a2 a1)), (pow2heapp (find_max' n p) n (Node n1 a2 gv1))
(pow2heapp (find_max' n p) n (Node n1 a1 c2)), (pow2heapp (find_max' n p) n (Node n1 a1 c1)), (pow2heapp (find_max' n p) n (Node n1 a1 a2)), (pow2heapp (find_max' n p) n (Node n1 a1 a1)), (pow2heapp (find_max' n p) n (Node n1 a1 gv1)), (pow2heapp (find_max' n p) n (Node n1 gv1 c2)), (pow2heapp (find_max' n p) n (Node n1 gv1 c1)), (pow2heapp (find_max' n p) n (Node n1 gv1 a2)), (pow2heapp (find_max' n p) n (Node n1 gv1 a1)), (pow2heapp (find_max' n p) n (Node n1 gv1 gv1))
(pow2heapp (find_max' n p) n (Node n0 c2 c2)), (pow2heapp (find_max' n p) n (Node n0 c2 c1)), (pow2heapp (find_max' n p) n (Node n0 c2 a2)), (pow2heapp (find_max' n p) n (Node n0 c2 a1)), (pow2heapp (find_max' n p) n (Node n0 c2 gv1)), (pow2heapp (find_max' n p) n (Node n0 c1 c2)), (pow2heapp (find_max' n p) n (Node n0 c1 c1)), (pow2heapp (find_max' n p) n (Node n0 c1 a2)), (pow2heapp (find_max' n p) n (Node n0 c1 a1)), (pow2heapp (find_max' n p) n (Node n0 c1 gv1))
(pow2heapp (find_max' n p) n (Node n0 a2 c2)), (pow2heapp (find_max' n p) n (Node n0 a2 c1)), (pow2heapp (find_max' n p) n (Node n0 a2 a2)), (pow2heapp (find_max' n p) n (Node n0 a2 a1)), (pow2heapp (find_max' n p) n (Node n0 a2 gv1)), (pow2heapp (find_max' n p) n (Node n0 a1 c2)), (pow2heapp (find_max' n p) n (Node n0 a1 c1)), (pow2heapp (find_max' n p) n (Node n0 a1 a2)), (pow2heapp (find_max' n p) n (Node n0 a1 a1)), (pow2heapp (find_max' n p) n (Node n0 a1 gv1))
(pow2heapp (find_max' n p) n (Node n0 gv1 c2)), (pow2heapp (find_max' n p) n (Node n0 gv1 c1)), (pow2heapp (find_max' n p) n (Node n0 gv1 a2)), (pow2heapp (find_max' n p) n (Node n0 gv1 a1)), (pow2heapp (find_max' n p) n (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) n (Node n c2 c2)), (pow2heapp (find_max' n p) n (Node n c2 c1)), (pow2heapp (find_max' n p) n (Node n c2 a2)), (pow2heapp (find_max' n p) n (Node n c2 a1)), (pow2heapp (find_max' n p) n (Node n c2 gv1))
(pow2heapp (find_max' n p) n (Node n c1 c2)), (pow2heapp (find_max' n p) n (Node n c1 c1)), (pow2heapp (find_max' n p) n (Node n c1 a2)), (pow2heapp (find_max' n p) n (Node n c1 a1)), (pow2heapp (find_max' n p) n (Node n c1 gv1)), (pow2heapp (find_max' n p) n (Node n a2 c2)), (pow2heapp (find_max' n p) n (Node n a2 c1)), (pow2heapp (find_max' n p) n (Node n a2 a2)), (pow2heapp (find_max' n p) n (Node n a2 a1)), (pow2heapp (find_max' n p) n (Node n a2 gv1))
(pow2heapp (find_max' n p) n (Node n a1 c2)), (pow2heapp (find_max' n p) n (Node n a1 c1)), (pow2heapp (find_max' n p) n (Node n a1 a2)), (pow2heapp (find_max' n p) n (Node n a1 a1)), (pow2heapp (find_max' n p) n (Node n a1 gv1)), (pow2heapp (find_max' n p) n (Node n gv1 c2)), (pow2heapp (find_max' n p) n (Node n gv1 c1)), (pow2heapp (find_max' n p) n (Node n gv1 a2)), (pow2heapp (find_max' n p) n (Node n gv1 a1)), (pow2heapp (find_max' n p) n (Node n gv1 gv1))
(pow2heapp (find_max' n p) n (smash c2 c2)), (pow2heapp (find_max' n p) n (smash c2 c1)), (pow2heapp (find_max' n p) n (smash c2 a2)), (pow2heapp (find_max' n p) n (smash c2 a1)), (pow2heapp (find_max' n p) n (smash c2 gv1)), (pow2heapp (find_max' n p) n (smash c1 c2)), (pow2heapp (find_max' n p) n (smash c1 c1)), (pow2heapp (find_max' n p) n (smash c1 a2)), (pow2heapp (find_max' n p) n (smash c1 a1)), (pow2heapp (find_max' n p) n (smash c1 gv1))
(pow2heapp (find_max' n p) n (smash a2 c2)), (pow2heapp (find_max' n p) n (smash a2 c1)), (pow2heapp (find_max' n p) n (smash a2 a2)), (pow2heapp (find_max' n p) n (smash a2 a1)), (pow2heapp (find_max' n p) n (smash a2 gv1)), (pow2heapp (find_max' n p) n (smash a1 c2)), (pow2heapp (find_max' n p) n (smash a1 c1)), (pow2heapp (find_max' n p) n (smash a1 a2)), (pow2heapp (find_max' n p) n (smash a1 a1)), (pow2heapp (find_max' n p) n (smash a1 gv1))
(pow2heapp (find_max' n p) n (smash gv1 c2)), (pow2heapp (find_max' n p) n (smash gv1 c1)), (pow2heapp (find_max' n p) n (smash gv1 a2)), (pow2heapp (find_max' n p) n (smash gv1 a1)), (pow2heapp (find_max' n p) n (smash gv1 gv1)), (pow2heapp (find_max' n p) n Leaf), (pow2heapp (find_max' n p) (find_max' n1 p) c2), (pow2heapp (find_max' n p) (find_max' n1 p) c1), (pow2heapp (find_max' n p) (find_max' n1 p) a2), (pow2heapp (find_max' n p) (find_max' n1 p) a1)
(pow2heapp (find_max' n p) (find_max' n1 p) gv1), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n c1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (Node n a1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash c2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash c1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash a2 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash a1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv1 c2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv1 c1)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv1 a2)), (pow2heapp (find_max' n p) (find_max' n1 p) (smash gv1 a1))
(pow2heapp (find_max' n p) (find_max' n1 p) (smash gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n1 p) Leaf), (pow2heapp (find_max' n p) (find_max' n0 p) c2), (pow2heapp (find_max' n p) (find_max' n0 p) c1), (pow2heapp (find_max' n p) (find_max' n0 p) a2), (pow2heapp (find_max' n p) (find_max' n0 p) a1), (pow2heapp (find_max' n p) (find_max' n0 p) gv1), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n c1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n a1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash c1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a2 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a2))
(pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash a1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv1 c2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv1 c1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv1 a2)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv1 a1)), (pow2heapp (find_max' n p) (find_max' n0 p) (smash gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n0 p) Leaf), (pow2heapp (find_max' n p) (find_max' n p) c2), (pow2heapp (find_max' n p) (find_max' n p) c1)
(pow2heapp (find_max' n p) (find_max' n p) a2), (pow2heapp (find_max' n p) (find_max' n p) a1), (pow2heapp (find_max' n p) (find_max' n p) gv1), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 c1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 a1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n c1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n a1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (Node n gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash c2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash c1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash a2 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a2 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 c1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash a1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv1 c2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv1 c1))
(pow2heapp (find_max' n p) (find_max' n p) (smash gv1 a2)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv1 a1)), (pow2heapp (find_max' n p) (find_max' n p) (smash gv1 gv1)), (pow2heapp (find_max' n p) (find_max' n p) Leaf), (pow2heapp (find_max' n p) (length p) c2), (pow2heapp (find_max' n p) (length p) c1), (pow2heapp (find_max' n p) (length p) a2), (pow2heapp (find_max' n p) (length p) a1), (pow2heapp (find_max' n p) (length p) gv1), (pow2heapp (find_max' n p) (length p) (Node n1 c2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 c1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 a1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv1 c2))
(pow2heapp (find_max' n p) (length p) (Node n1 gv1 c1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv1 a2)), (pow2heapp (find_max' n p) (length p) (Node n1 gv1 a1)), (pow2heapp (find_max' n p) (length p) (Node n1 gv1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 c1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 c2))
(pow2heapp (find_max' n p) (length p) (Node n0 a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 a1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv1 c2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv1 c1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv1 a2)), (pow2heapp (find_max' n p) (length p) (Node n0 gv1 a1)), (pow2heapp (find_max' n p) (length p) (Node n0 gv1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n c2 c2))
(pow2heapp (find_max' n p) (length p) (Node n c2 c1)), (pow2heapp (find_max' n p) (length p) (Node n c2 a2)), (pow2heapp (find_max' n p) (length p) (Node n c2 a1)), (pow2heapp (find_max' n p) (length p) (Node n c2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n c1 c2)), (pow2heapp (find_max' n p) (length p) (Node n c1 c1)), (pow2heapp (find_max' n p) (length p) (Node n c1 a2)), (pow2heapp (find_max' n p) (length p) (Node n c1 a1)), (pow2heapp (find_max' n p) (length p) (Node n c1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n a2 c2))
(pow2heapp (find_max' n p) (length p) (Node n a2 c1)), (pow2heapp (find_max' n p) (length p) (Node n a2 a2)), (pow2heapp (find_max' n p) (length p) (Node n a2 a1)), (pow2heapp (find_max' n p) (length p) (Node n a2 gv1)), (pow2heapp (find_max' n p) (length p) (Node n a1 c2)), (pow2heapp (find_max' n p) (length p) (Node n a1 c1)), (pow2heapp (find_max' n p) (length p) (Node n a1 a2)), (pow2heapp (find_max' n p) (length p) (Node n a1 a1)), (pow2heapp (find_max' n p) (length p) (Node n a1 gv1)), (pow2heapp (find_max' n p) (length p) (Node n gv1 c2))
(pow2heapp (find_max' n p) (length p) (Node n gv1 c1)), (pow2heapp (find_max' n p) (length p) (Node n gv1 a2)), (pow2heapp (find_max' n p) (length p) (Node n gv1 a1)), (pow2heapp (find_max' n p) (length p) (Node n gv1 gv1)), (pow2heapp (find_max' n p) (length p) (smash c2 c2)), (pow2heapp (find_max' n p) (length p) (smash c2 c1)), (pow2heapp (find_max' n p) (length p) (smash c2 a2)), (pow2heapp (find_max' n p) (length p) (smash c2 a1)), (pow2heapp (find_max' n p) (length p) (smash c2 gv1)), (pow2heapp (find_max' n p) (length p) (smash c1 c2))
(pow2heapp (find_max' n p) (length p) (smash c1 c1)), (pow2heapp (find_max' n p) (length p) (smash c1 a2)), (pow2heapp (find_max' n p) (length p) (smash c1 a1)), (pow2heapp (find_max' n p) (length p) (smash c1 gv1)), (pow2heapp (find_max' n p) (length p) (smash a2 c2)), (pow2heapp (find_max' n p) (length p) (smash a2 c1)), (pow2heapp (find_max' n p) (length p) (smash a2 a2)), (pow2heapp (find_max' n p) (length p) (smash a2 a1)), (pow2heapp (find_max' n p) (length p) (smash a2 gv1)), (pow2heapp (find_max' n p) (length p) (smash a1 c2))
(pow2heapp (find_max' n p) (length p) (smash a1 c1)), (pow2heapp (find_max' n p) (length p) (smash a1 a2)), (pow2heapp (find_max' n p) (length p) (smash a1 a1)), (pow2heapp (find_max' n p) (length p) (smash a1 gv1)), (pow2heapp (find_max' n p) (length p) (smash gv1 c2)), (pow2heapp (find_max' n p) (length p) (smash gv1 c1)), (pow2heapp (find_max' n p) (length p) (smash gv1 a2)), (pow2heapp (find_max' n p) (length p) (smash gv1 a1)), (pow2heapp (find_max' n p) (length p) (smash gv1 gv1)), (pow2heapp (find_max' n p) (length p) Leaf)
(pow2heapp (length p) n1 c2), (pow2heapp (length p) n1 c1), (pow2heapp (length p) n1 a2), (pow2heapp (length p) n1 a1), (pow2heapp (length p) n1 gv1), (pow2heapp (length p) n1 (Node n1 c2 c2)), (pow2heapp (length p) n1 (Node n1 c2 c1)), (pow2heapp (length p) n1 (Node n1 c2 a2)), (pow2heapp (length p) n1 (Node n1 c2 a1)), (pow2heapp (length p) n1 (Node n1 c2 gv1))
(pow2heapp (length p) n1 (Node n1 c1 c2)), (pow2heapp (length p) n1 (Node n1 c1 c1)), (pow2heapp (length p) n1 (Node n1 c1 a2)), (pow2heapp (length p) n1 (Node n1 c1 a1)), (pow2heapp (length p) n1 (Node n1 c1 gv1)), (pow2heapp (length p) n1 (Node n1 a2 c2)), (pow2heapp (length p) n1 (Node n1 a2 c1)), (pow2heapp (length p) n1 (Node n1 a2 a2)), (pow2heapp (length p) n1 (Node n1 a2 a1)), (pow2heapp (length p) n1 (Node n1 a2 gv1))
(pow2heapp (length p) n1 (Node n1 a1 c2)), (pow2heapp (length p) n1 (Node n1 a1 c1)), (pow2heapp (length p) n1 (Node n1 a1 a2)), (pow2heapp (length p) n1 (Node n1 a1 a1)), (pow2heapp (length p) n1 (Node n1 a1 gv1)), (pow2heapp (length p) n1 (Node n1 gv1 c2)), (pow2heapp (length p) n1 (Node n1 gv1 c1)), (pow2heapp (length p) n1 (Node n1 gv1 a2)), (pow2heapp (length p) n1 (Node n1 gv1 a1)), (pow2heapp (length p) n1 (Node n1 gv1 gv1))
(pow2heapp (length p) n1 (Node n0 c2 c2)), (pow2heapp (length p) n1 (Node n0 c2 c1)), (pow2heapp (length p) n1 (Node n0 c2 a2)), (pow2heapp (length p) n1 (Node n0 c2 a1)), (pow2heapp (length p) n1 (Node n0 c2 gv1)), (pow2heapp (length p) n1 (Node n0 c1 c2)), (pow2heapp (length p) n1 (Node n0 c1 c1)), (pow2heapp (length p) n1 (Node n0 c1 a2)), (pow2heapp (length p) n1 (Node n0 c1 a1)), (pow2heapp (length p) n1 (Node n0 c1 gv1))
(pow2heapp (length p) n1 (Node n0 a2 c2)), (pow2heapp (length p) n1 (Node n0 a2 c1)), (pow2heapp (length p) n1 (Node n0 a2 a2)), (pow2heapp (length p) n1 (Node n0 a2 a1)), (pow2heapp (length p) n1 (Node n0 a2 gv1)), (pow2heapp (length p) n1 (Node n0 a1 c2)), (pow2heapp (length p) n1 (Node n0 a1 c1)), (pow2heapp (length p) n1 (Node n0 a1 a2)), (pow2heapp (length p) n1 (Node n0 a1 a1)), (pow2heapp (length p) n1 (Node n0 a1 gv1))
(pow2heapp (length p) n1 (Node n0 gv1 c2)), (pow2heapp (length p) n1 (Node n0 gv1 c1)), (pow2heapp (length p) n1 (Node n0 gv1 a2)), (pow2heapp (length p) n1 (Node n0 gv1 a1)), (pow2heapp (length p) n1 (Node n0 gv1 gv1)), (pow2heapp (length p) n1 (Node n c2 c2)), (pow2heapp (length p) n1 (Node n c2 c1)), (pow2heapp (length p) n1 (Node n c2 a2)), (pow2heapp (length p) n1 (Node n c2 a1)), (pow2heapp (length p) n1 (Node n c2 gv1))
(pow2heapp (length p) n1 (Node n c1 c2)), (pow2heapp (length p) n1 (Node n c1 c1)), (pow2heapp (length p) n1 (Node n c1 a2)), (pow2heapp (length p) n1 (Node n c1 a1)), (pow2heapp (length p) n1 (Node n c1 gv1)), (pow2heapp (length p) n1 (Node n a2 c2)), (pow2heapp (length p) n1 (Node n a2 c1)), (pow2heapp (length p) n1 (Node n a2 a2)), (pow2heapp (length p) n1 (Node n a2 a1)), (pow2heapp (length p) n1 (Node n a2 gv1))
(pow2heapp (length p) n1 (Node n a1 c2)), (pow2heapp (length p) n1 (Node n a1 c1)), (pow2heapp (length p) n1 (Node n a1 a2)), (pow2heapp (length p) n1 (Node n a1 a1)), (pow2heapp (length p) n1 (Node n a1 gv1)), (pow2heapp (length p) n1 (Node n gv1 c2)), (pow2heapp (length p) n1 (Node n gv1 c1)), (pow2heapp (length p) n1 (Node n gv1 a2)), (pow2heapp (length p) n1 (Node n gv1 a1)), (pow2heapp (length p) n1 (Node n gv1 gv1))
(pow2heapp (length p) n1 (smash c2 c2)), (pow2heapp (length p) n1 (smash c2 c1)), (pow2heapp (length p) n1 (smash c2 a2)), (pow2heapp (length p) n1 (smash c2 a1)), (pow2heapp (length p) n1 (smash c2 gv1)), (pow2heapp (length p) n1 (smash c1 c2)), (pow2heapp (length p) n1 (smash c1 c1)), (pow2heapp (length p) n1 (smash c1 a2)), (pow2heapp (length p) n1 (smash c1 a1)), (pow2heapp (length p) n1 (smash c1 gv1))
(pow2heapp (length p) n1 (smash a2 c2)), (pow2heapp (length p) n1 (smash a2 c1)), (pow2heapp (length p) n1 (smash a2 a2)), (pow2heapp (length p) n1 (smash a2 a1)), (pow2heapp (length p) n1 (smash a2 gv1)), (pow2heapp (length p) n1 (smash a1 c2)), (pow2heapp (length p) n1 (smash a1 c1)), (pow2heapp (length p) n1 (smash a1 a2)), (pow2heapp (length p) n1 (smash a1 a1)), (pow2heapp (length p) n1 (smash a1 gv1))
(pow2heapp (length p) n1 (smash gv1 c2)), (pow2heapp (length p) n1 (smash gv1 c1)), (pow2heapp (length p) n1 (smash gv1 a2)), (pow2heapp (length p) n1 (smash gv1 a1)), (pow2heapp (length p) n1 (smash gv1 gv1)), (pow2heapp (length p) n1 Leaf), (pow2heapp (length p) n0 c2), (pow2heapp (length p) n0 c1), (pow2heapp (length p) n0 a2), (pow2heapp (length p) n0 a1)
(pow2heapp (length p) n0 gv1), (pow2heapp (length p) n0 (Node n1 c2 c2)), (pow2heapp (length p) n0 (Node n1 c2 c1)), (pow2heapp (length p) n0 (Node n1 c2 a2)), (pow2heapp (length p) n0 (Node n1 c2 a1)), (pow2heapp (length p) n0 (Node n1 c2 gv1)), (pow2heapp (length p) n0 (Node n1 c1 c2)), (pow2heapp (length p) n0 (Node n1 c1 c1)), (pow2heapp (length p) n0 (Node n1 c1 a2)), (pow2heapp (length p) n0 (Node n1 c1 a1))
(pow2heapp (length p) n0 (Node n1 c1 gv1)), (pow2heapp (length p) n0 (Node n1 a2 c2)), (pow2heapp (length p) n0 (Node n1 a2 c1)), (pow2heapp (length p) n0 (Node n1 a2 a2)), (pow2heapp (length p) n0 (Node n1 a2 a1)), (pow2heapp (length p) n0 (Node n1 a2 gv1)), (pow2heapp (length p) n0 (Node n1 a1 c2)), (pow2heapp (length p) n0 (Node n1 a1 c1)), (pow2heapp (length p) n0 (Node n1 a1 a2)), (pow2heapp (length p) n0 (Node n1 a1 a1))
(pow2heapp (length p) n0 (Node n1 a1 gv1)), (pow2heapp (length p) n0 (Node n1 gv1 c2)), (pow2heapp (length p) n0 (Node n1 gv1 c1)), (pow2heapp (length p) n0 (Node n1 gv1 a2)), (pow2heapp (length p) n0 (Node n1 gv1 a1)), (pow2heapp (length p) n0 (Node n1 gv1 gv1)), (pow2heapp (length p) n0 (Node n0 c2 c2)), (pow2heapp (length p) n0 (Node n0 c2 c1)), (pow2heapp (length p) n0 (Node n0 c2 a2)), (pow2heapp (length p) n0 (Node n0 c2 a1))
(pow2heapp (length p) n0 (Node n0 c2 gv1)), (pow2heapp (length p) n0 (Node n0 c1 c2)), (pow2heapp (length p) n0 (Node n0 c1 c1)), (pow2heapp (length p) n0 (Node n0 c1 a2)), (pow2heapp (length p) n0 (Node n0 c1 a1)), (pow2heapp (length p) n0 (Node n0 c1 gv1)), (pow2heapp (length p) n0 (Node n0 a2 c2)), (pow2heapp (length p) n0 (Node n0 a2 c1)), (pow2heapp (length p) n0 (Node n0 a2 a2)), (pow2heapp (length p) n0 (Node n0 a2 a1))
(pow2heapp (length p) n0 (Node n0 a2 gv1)), (pow2heapp (length p) n0 (Node n0 a1 c2)), (pow2heapp (length p) n0 (Node n0 a1 c1)), (pow2heapp (length p) n0 (Node n0 a1 a2)), (pow2heapp (length p) n0 (Node n0 a1 a1)), (pow2heapp (length p) n0 (Node n0 a1 gv1)), (pow2heapp (length p) n0 (Node n0 gv1 c2)), (pow2heapp (length p) n0 (Node n0 gv1 c1)), (pow2heapp (length p) n0 (Node n0 gv1 a2)), (pow2heapp (length p) n0 (Node n0 gv1 a1))
(pow2heapp (length p) n0 (Node n0 gv1 gv1)), (pow2heapp (length p) n0 (Node n c2 c2)), (pow2heapp (length p) n0 (Node n c2 c1)), (pow2heapp (length p) n0 (Node n c2 a2)), (pow2heapp (length p) n0 (Node n c2 a1)), (pow2heapp (length p) n0 (Node n c2 gv1)), (pow2heapp (length p) n0 (Node n c1 c2)), (pow2heapp (length p) n0 (Node n c1 c1)), (pow2heapp (length p) n0 (Node n c1 a2)), (pow2heapp (length p) n0 (Node n c1 a1))
(pow2heapp (length p) n0 (Node n c1 gv1)), (pow2heapp (length p) n0 (Node n a2 c2)), (pow2heapp (length p) n0 (Node n a2 c1)), (pow2heapp (length p) n0 (Node n a2 a2)), (pow2heapp (length p) n0 (Node n a2 a1)), (pow2heapp (length p) n0 (Node n a2 gv1)), (pow2heapp (length p) n0 (Node n a1 c2)), (pow2heapp (length p) n0 (Node n a1 c1)), (pow2heapp (length p) n0 (Node n a1 a2)), (pow2heapp (length p) n0 (Node n a1 a1))
(pow2heapp (length p) n0 (Node n a1 gv1)), (pow2heapp (length p) n0 (Node n gv1 c2)), (pow2heapp (length p) n0 (Node n gv1 c1)), (pow2heapp (length p) n0 (Node n gv1 a2)), (pow2heapp (length p) n0 (Node n gv1 a1)), (pow2heapp (length p) n0 (Node n gv1 gv1)), (pow2heapp (length p) n0 (smash c2 c2)), (pow2heapp (length p) n0 (smash c2 c1)), (pow2heapp (length p) n0 (smash c2 a2)), (pow2heapp (length p) n0 (smash c2 a1))
(pow2heapp (length p) n0 (smash c2 gv1)), (pow2heapp (length p) n0 (smash c1 c2)), (pow2heapp (length p) n0 (smash c1 c1)), (pow2heapp (length p) n0 (smash c1 a2)), (pow2heapp (length p) n0 (smash c1 a1)), (pow2heapp (length p) n0 (smash c1 gv1)), (pow2heapp (length p) n0 (smash a2 c2)), (pow2heapp (length p) n0 (smash a2 c1)), (pow2heapp (length p) n0 (smash a2 a2)), (pow2heapp (length p) n0 (smash a2 a1))
(pow2heapp (length p) n0 (smash a2 gv1)), (pow2heapp (length p) n0 (smash a1 c2)), (pow2heapp (length p) n0 (smash a1 c1)), (pow2heapp (length p) n0 (smash a1 a2)), (pow2heapp (length p) n0 (smash a1 a1)), (pow2heapp (length p) n0 (smash a1 gv1)), (pow2heapp (length p) n0 (smash gv1 c2)), (pow2heapp (length p) n0 (smash gv1 c1)), (pow2heapp (length p) n0 (smash gv1 a2)), (pow2heapp (length p) n0 (smash gv1 a1))
(pow2heapp (length p) n0 (smash gv1 gv1)), (pow2heapp (length p) n0 Leaf), (pow2heapp (length p) n c2), (pow2heapp (length p) n c1), (pow2heapp (length p) n a2), (pow2heapp (length p) n a1), (pow2heapp (length p) n gv1), (pow2heapp (length p) n (Node n1 c2 c2)), (pow2heapp (length p) n (Node n1 c2 c1)), (pow2heapp (length p) n (Node n1 c2 a2))
(pow2heapp (length p) n (Node n1 c2 a1)), (pow2heapp (length p) n (Node n1 c2 gv1)), (pow2heapp (length p) n (Node n1 c1 c2)), (pow2heapp (length p) n (Node n1 c1 c1)), (pow2heapp (length p) n (Node n1 c1 a2)), (pow2heapp (length p) n (Node n1 c1 a1)), (pow2heapp (length p) n (Node n1 c1 gv1)), (pow2heapp (length p) n (Node n1 a2 c2)), (pow2heapp (length p) n (Node n1 a2 c1)), (pow2heapp (length p) n (Node n1 a2 a2))
(pow2heapp (length p) n (Node n1 a2 a1)), (pow2heapp (length p) n (Node n1 a2 gv1)), (pow2heapp (length p) n (Node n1 a1 c2)), (pow2heapp (length p) n (Node n1 a1 c1)), (pow2heapp (length p) n (Node n1 a1 a2)), (pow2heapp (length p) n (Node n1 a1 a1)), (pow2heapp (length p) n (Node n1 a1 gv1)), (pow2heapp (length p) n (Node n1 gv1 c2)), (pow2heapp (length p) n (Node n1 gv1 c1)), (pow2heapp (length p) n (Node n1 gv1 a2))
(pow2heapp (length p) n (Node n1 gv1 a1)), (pow2heapp (length p) n (Node n1 gv1 gv1)), (pow2heapp (length p) n (Node n0 c2 c2)), (pow2heapp (length p) n (Node n0 c2 c1)), (pow2heapp (length p) n (Node n0 c2 a2)), (pow2heapp (length p) n (Node n0 c2 a1)), (pow2heapp (length p) n (Node n0 c2 gv1)), (pow2heapp (length p) n (Node n0 c1 c2)), (pow2heapp (length p) n (Node n0 c1 c1)), (pow2heapp (length p) n (Node n0 c1 a2))
(pow2heapp (length p) n (Node n0 c1 a1)), (pow2heapp (length p) n (Node n0 c1 gv1)), (pow2heapp (length p) n (Node n0 a2 c2)), (pow2heapp (length p) n (Node n0 a2 c1)), (pow2heapp (length p) n (Node n0 a2 a2)), (pow2heapp (length p) n (Node n0 a2 a1)), (pow2heapp (length p) n (Node n0 a2 gv1)), (pow2heapp (length p) n (Node n0 a1 c2)), (pow2heapp (length p) n (Node n0 a1 c1)), (pow2heapp (length p) n (Node n0 a1 a2))
(pow2heapp (length p) n (Node n0 a1 a1)), (pow2heapp (length p) n (Node n0 a1 gv1)), (pow2heapp (length p) n (Node n0 gv1 c2)), (pow2heapp (length p) n (Node n0 gv1 c1)), (pow2heapp (length p) n (Node n0 gv1 a2)), (pow2heapp (length p) n (Node n0 gv1 a1)), (pow2heapp (length p) n (Node n0 gv1 gv1)), (pow2heapp (length p) n (Node n c2 c2)), (pow2heapp (length p) n (Node n c2 c1)), (pow2heapp (length p) n (Node n c2 a2))
(pow2heapp (length p) n (Node n c2 a1)), (pow2heapp (length p) n (Node n c2 gv1)), (pow2heapp (length p) n (Node n c1 c2)), (pow2heapp (length p) n (Node n c1 c1)), (pow2heapp (length p) n (Node n c1 a2)), (pow2heapp (length p) n (Node n c1 a1)), (pow2heapp (length p) n (Node n c1 gv1)), (pow2heapp (length p) n (Node n a2 c2)), (pow2heapp (length p) n (Node n a2 c1)), (pow2heapp (length p) n (Node n a2 a2))
(pow2heapp (length p) n (Node n a2 a1)), (pow2heapp (length p) n (Node n a2 gv1)), (pow2heapp (length p) n (Node n a1 c2)), (pow2heapp (length p) n (Node n a1 c1)), (pow2heapp (length p) n (Node n a1 a2)), (pow2heapp (length p) n (Node n a1 a1)), (pow2heapp (length p) n (Node n a1 gv1)), (pow2heapp (length p) n (Node n gv1 c2)), (pow2heapp (length p) n (Node n gv1 c1)), (pow2heapp (length p) n (Node n gv1 a2))
(pow2heapp (length p) n (Node n gv1 a1)), (pow2heapp (length p) n (Node n gv1 gv1)), (pow2heapp (length p) n (smash c2 c2)), (pow2heapp (length p) n (smash c2 c1)), (pow2heapp (length p) n (smash c2 a2)), (pow2heapp (length p) n (smash c2 a1)), (pow2heapp (length p) n (smash c2 gv1)), (pow2heapp (length p) n (smash c1 c2)), (pow2heapp (length p) n (smash c1 c1)), (pow2heapp (length p) n (smash c1 a2))
(pow2heapp (length p) n (smash c1 a1)), (pow2heapp (length p) n (smash c1 gv1)), (pow2heapp (length p) n (smash a2 c2)), (pow2heapp (length p) n (smash a2 c1)), (pow2heapp (length p) n (smash a2 a2)), (pow2heapp (length p) n (smash a2 a1)), (pow2heapp (length p) n (smash a2 gv1)), (pow2heapp (length p) n (smash a1 c2)), (pow2heapp (length p) n (smash a1 c1)), (pow2heapp (length p) n (smash a1 a2))
(pow2heapp (length p) n (smash a1 a1)), (pow2heapp (length p) n (smash a1 gv1)), (pow2heapp (length p) n (smash gv1 c2)), (pow2heapp (length p) n (smash gv1 c1)), (pow2heapp (length p) n (smash gv1 a2)), (pow2heapp (length p) n (smash gv1 a1)), (pow2heapp (length p) n (smash gv1 gv1)), (pow2heapp (length p) n Leaf), (pow2heapp (length p) (find_max' n1 p) c2), (pow2heapp (length p) (find_max' n1 p) c1)
(pow2heapp (length p) (find_max' n1 p) a2), (pow2heapp (length p) (find_max' n1 p) a1), (pow2heapp (length p) (find_max' n1 p) gv1), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 c1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 a1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n1 gv1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 c1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 a1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n0 gv1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n0 gv1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n c1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a2 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 c1))
(pow2heapp (length p) (find_max' n1 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n a1 gv1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv1 c2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv1 c1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv1 a2)), (pow2heapp (length p) (find_max' n1 p) (Node n gv1 a1)), (pow2heapp (length p) (find_max' n1 p) (Node n gv1 gv1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c2 gv1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash c1 gv1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 c1))
(pow2heapp (length p) (find_max' n1 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a2 gv1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash a1 gv1)), (pow2heapp (length p) (find_max' n1 p) (smash gv1 c2)), (pow2heapp (length p) (find_max' n1 p) (smash gv1 c1))
(pow2heapp (length p) (find_max' n1 p) (smash gv1 a2)), (pow2heapp (length p) (find_max' n1 p) (smash gv1 a1)), (pow2heapp (length p) (find_max' n1 p) (smash gv1 gv1)), (pow2heapp (length p) (find_max' n1 p) Leaf), (pow2heapp (length p) (find_max' n0 p) c2), (pow2heapp (length p) (find_max' n0 p) c1), (pow2heapp (length p) (find_max' n0 p) a2), (pow2heapp (length p) (find_max' n0 p) a1), (pow2heapp (length p) (find_max' n0 p) gv1), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 c1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 a1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n1 gv1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n1 gv1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 c1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 a1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n0 gv1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n c1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a2 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n a1 gv1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv1 c2))
(pow2heapp (length p) (find_max' n0 p) (Node n gv1 c1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv1 a2)), (pow2heapp (length p) (find_max' n0 p) (Node n gv1 a1)), (pow2heapp (length p) (find_max' n0 p) (Node n gv1 gv1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c2 gv1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 c2))
(pow2heapp (length p) (find_max' n0 p) (smash c1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash c1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash c1 gv1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a2 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a2 gv1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 c2))
(pow2heapp (length p) (find_max' n0 p) (smash a1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash a1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash a1 gv1)), (pow2heapp (length p) (find_max' n0 p) (smash gv1 c2)), (pow2heapp (length p) (find_max' n0 p) (smash gv1 c1)), (pow2heapp (length p) (find_max' n0 p) (smash gv1 a2)), (pow2heapp (length p) (find_max' n0 p) (smash gv1 a1)), (pow2heapp (length p) (find_max' n0 p) (smash gv1 gv1)), (pow2heapp (length p) (find_max' n0 p) Leaf)
(pow2heapp (length p) (find_max' n p) c2), (pow2heapp (length p) (find_max' n p) c1), (pow2heapp (length p) (find_max' n p) a2), (pow2heapp (length p) (find_max' n p) a1), (pow2heapp (length p) (find_max' n p) gv1), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c2 gv1))
(pow2heapp (length p) (find_max' n p) (Node n1 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 c1 gv1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a2 gv1))
(pow2heapp (length p) (find_max' n p) (Node n1 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 a1 gv1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv1 c2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv1 c1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv1 a2)), (pow2heapp (length p) (find_max' n p) (Node n1 gv1 a1)), (pow2heapp (length p) (find_max' n p) (Node n1 gv1 gv1))
(pow2heapp (length p) (find_max' n p) (Node n0 c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c2 gv1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 c1 gv1))
(pow2heapp (length p) (find_max' n p) (Node n0 a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a2 gv1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 a1 gv1))
(pow2heapp (length p) (find_max' n p) (Node n0 gv1 c2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv1 c1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv1 a2)), (pow2heapp (length p) (find_max' n p) (Node n0 gv1 a1)), (pow2heapp (length p) (find_max' n p) (Node n0 gv1 gv1)), (pow2heapp (length p) (find_max' n p) (Node n c2 c2)), (pow2heapp (length p) (find_max' n p) (Node n c2 c1)), (pow2heapp (length p) (find_max' n p) (Node n c2 a2)), (pow2heapp (length p) (find_max' n p) (Node n c2 a1)), (pow2heapp (length p) (find_max' n p) (Node n c2 gv1))
(pow2heapp (length p) (find_max' n p) (Node n c1 c2)), (pow2heapp (length p) (find_max' n p) (Node n c1 c1)), (pow2heapp (length p) (find_max' n p) (Node n c1 a2)), (pow2heapp (length p) (find_max' n p) (Node n c1 a1)), (pow2heapp (length p) (find_max' n p) (Node n c1 gv1)), (pow2heapp (length p) (find_max' n p) (Node n a2 c2)), (pow2heapp (length p) (find_max' n p) (Node n a2 c1)), (pow2heapp (length p) (find_max' n p) (Node n a2 a2)), (pow2heapp (length p) (find_max' n p) (Node n a2 a1)), (pow2heapp (length p) (find_max' n p) (Node n a2 gv1))
(pow2heapp (length p) (find_max' n p) (Node n a1 c2)), (pow2heapp (length p) (find_max' n p) (Node n a1 c1)), (pow2heapp (length p) (find_max' n p) (Node n a1 a2)), (pow2heapp (length p) (find_max' n p) (Node n a1 a1)), (pow2heapp (length p) (find_max' n p) (Node n a1 gv1)), (pow2heapp (length p) (find_max' n p) (Node n gv1 c2)), (pow2heapp (length p) (find_max' n p) (Node n gv1 c1)), (pow2heapp (length p) (find_max' n p) (Node n gv1 a2)), (pow2heapp (length p) (find_max' n p) (Node n gv1 a1)), (pow2heapp (length p) (find_max' n p) (Node n gv1 gv1))
(pow2heapp (length p) (find_max' n p) (smash c2 c2)), (pow2heapp (length p) (find_max' n p) (smash c2 c1)), (pow2heapp (length p) (find_max' n p) (smash c2 a2)), (pow2heapp (length p) (find_max' n p) (smash c2 a1)), (pow2heapp (length p) (find_max' n p) (smash c2 gv1)), (pow2heapp (length p) (find_max' n p) (smash c1 c2)), (pow2heapp (length p) (find_max' n p) (smash c1 c1)), (pow2heapp (length p) (find_max' n p) (smash c1 a2)), (pow2heapp (length p) (find_max' n p) (smash c1 a1)), (pow2heapp (length p) (find_max' n p) (smash c1 gv1))
(pow2heapp (length p) (find_max' n p) (smash a2 c2)), (pow2heapp (length p) (find_max' n p) (smash a2 c1)), (pow2heapp (length p) (find_max' n p) (smash a2 a2)), (pow2heapp (length p) (find_max' n p) (smash a2 a1)), (pow2heapp (length p) (find_max' n p) (smash a2 gv1)), (pow2heapp (length p) (find_max' n p) (smash a1 c2)), (pow2heapp (length p) (find_max' n p) (smash a1 c1)), (pow2heapp (length p) (find_max' n p) (smash a1 a2)), (pow2heapp (length p) (find_max' n p) (smash a1 a1)), (pow2heapp (length p) (find_max' n p) (smash a1 gv1))
(pow2heapp (length p) (find_max' n p) (smash gv1 c2)), (pow2heapp (length p) (find_max' n p) (smash gv1 c1)), (pow2heapp (length p) (find_max' n p) (smash gv1 a2)), (pow2heapp (length p) (find_max' n p) (smash gv1 a1)), (pow2heapp (length p) (find_max' n p) (smash gv1 gv1)), (pow2heapp (length p) (find_max' n p) Leaf), (pow2heapp (length p) (length p) c2), (pow2heapp (length p) (length p) c1), (pow2heapp (length p) (length p) a2), (pow2heapp (length p) (length p) a1)
(pow2heapp (length p) (length p) gv1), (pow2heapp (length p) (length p) (Node n1 c2 c2)), (pow2heapp (length p) (length p) (Node n1 c2 c1)), (pow2heapp (length p) (length p) (Node n1 c2 a2)), (pow2heapp (length p) (length p) (Node n1 c2 a1)), (pow2heapp (length p) (length p) (Node n1 c2 gv1)), (pow2heapp (length p) (length p) (Node n1 c1 c2)), (pow2heapp (length p) (length p) (Node n1 c1 c1)), (pow2heapp (length p) (length p) (Node n1 c1 a2)), (pow2heapp (length p) (length p) (Node n1 c1 a1))
(pow2heapp (length p) (length p) (Node n1 c1 gv1)), (pow2heapp (length p) (length p) (Node n1 a2 c2)), (pow2heapp (length p) (length p) (Node n1 a2 c1)), (pow2heapp (length p) (length p) (Node n1 a2 a2)), (pow2heapp (length p) (length p) (Node n1 a2 a1)), (pow2heapp (length p) (length p) (Node n1 a2 gv1)), (pow2heapp (length p) (length p) (Node n1 a1 c2)), (pow2heapp (length p) (length p) (Node n1 a1 c1)), (pow2heapp (length p) (length p) (Node n1 a1 a2)), (pow2heapp (length p) (length p) (Node n1 a1 a1))
(pow2heapp (length p) (length p) (Node n1 a1 gv1)), (pow2heapp (length p) (length p) (Node n1 gv1 c2)), (pow2heapp (length p) (length p) (Node n1 gv1 c1)), (pow2heapp (length p) (length p) (Node n1 gv1 a2)), (pow2heapp (length p) (length p) (Node n1 gv1 a1)), (pow2heapp (length p) (length p) (Node n1 gv1 gv1)), (pow2heapp (length p) (length p) (Node n0 c2 c2)), (pow2heapp (length p) (length p) (Node n0 c2 c1)), (pow2heapp (length p) (length p) (Node n0 c2 a2)), (pow2heapp (length p) (length p) (Node n0 c2 a1))
(pow2heapp (length p) (length p) (Node n0 c2 gv1)), (pow2heapp (length p) (length p) (Node n0 c1 c2)), (pow2heapp (length p) (length p) (Node n0 c1 c1)), (pow2heapp (length p) (length p) (Node n0 c1 a2)), (pow2heapp (length p) (length p) (Node n0 c1 a1)), (pow2heapp (length p) (length p) (Node n0 c1 gv1)), (pow2heapp (length p) (length p) (Node n0 a2 c2)), (pow2heapp (length p) (length p) (Node n0 a2 c1)), (pow2heapp (length p) (length p) (Node n0 a2 a2)), (pow2heapp (length p) (length p) (Node n0 a2 a1))
(pow2heapp (length p) (length p) (Node n0 a2 gv1)), (pow2heapp (length p) (length p) (Node n0 a1 c2)), (pow2heapp (length p) (length p) (Node n0 a1 c1)), (pow2heapp (length p) (length p) (Node n0 a1 a2)), (pow2heapp (length p) (length p) (Node n0 a1 a1)), (pow2heapp (length p) (length p) (Node n0 a1 gv1)), (pow2heapp (length p) (length p) (Node n0 gv1 c2)), (pow2heapp (length p) (length p) (Node n0 gv1 c1)), (pow2heapp (length p) (length p) (Node n0 gv1 a2)), (pow2heapp (length p) (length p) (Node n0 gv1 a1))
(pow2heapp (length p) (length p) (Node n0 gv1 gv1)), (pow2heapp (length p) (length p) (Node n c2 c2)), (pow2heapp (length p) (length p) (Node n c2 c1)), (pow2heapp (length p) (length p) (Node n c2 a2)), (pow2heapp (length p) (length p) (Node n c2 a1)), (pow2heapp (length p) (length p) (Node n c2 gv1)), (pow2heapp (length p) (length p) (Node n c1 c2)), (pow2heapp (length p) (length p) (Node n c1 c1)), (pow2heapp (length p) (length p) (Node n c1 a2)), (pow2heapp (length p) (length p) (Node n c1 a1))
(pow2heapp (length p) (length p) (Node n c1 gv1)), (pow2heapp (length p) (length p) (Node n a2 c2)), (pow2heapp (length p) (length p) (Node n a2 c1)), (pow2heapp (length p) (length p) (Node n a2 a2)), (pow2heapp (length p) (length p) (Node n a2 a1)), (pow2heapp (length p) (length p) (Node n a2 gv1)), (pow2heapp (length p) (length p) (Node n a1 c2)), (pow2heapp (length p) (length p) (Node n a1 c1)), (pow2heapp (length p) (length p) (Node n a1 a2)), (pow2heapp (length p) (length p) (Node n a1 a1))
(pow2heapp (length p) (length p) (Node n a1 gv1)), (pow2heapp (length p) (length p) (Node n gv1 c2)), (pow2heapp (length p) (length p) (Node n gv1 c1)), (pow2heapp (length p) (length p) (Node n gv1 a2)), (pow2heapp (length p) (length p) (Node n gv1 a1)), (pow2heapp (length p) (length p) (Node n gv1 gv1)), (pow2heapp (length p) (length p) (smash c2 c2)), (pow2heapp (length p) (length p) (smash c2 c1)), (pow2heapp (length p) (length p) (smash c2 a2)), (pow2heapp (length p) (length p) (smash c2 a1))
(pow2heapp (length p) (length p) (smash c2 gv1)), (pow2heapp (length p) (length p) (smash c1 c2)), (pow2heapp (length p) (length p) (smash c1 c1)), (pow2heapp (length p) (length p) (smash c1 a2)), (pow2heapp (length p) (length p) (smash c1 a1)), (pow2heapp (length p) (length p) (smash c1 gv1)), (pow2heapp (length p) (length p) (smash a2 c2)), (pow2heapp (length p) (length p) (smash a2 c1)), (pow2heapp (length p) (length p) (smash a2 a2)), (pow2heapp (length p) (length p) (smash a2 a1))
(pow2heapp (length p) (length p) (smash a2 gv1)), (pow2heapp (length p) (length p) (smash a1 c2)), (pow2heapp (length p) (length p) (smash a1 c1)), (pow2heapp (length p) (length p) (smash a1 a2)), (pow2heapp (length p) (length p) (smash a1 a1)), (pow2heapp (length p) (length p) (smash a1 gv1)), (pow2heapp (length p) (length p) (smash gv1 c2)), (pow2heapp (length p) (length p) (smash gv1 c1)), (pow2heapp (length p) (length p) (smash gv1 a2)), (pow2heapp (length p) (length p) (smash gv1 a1))
(pow2heapp (length p) (length p) (smash gv1 gv1)), (pow2heapp (length p) (length p) Leaf), (Permutation p (c2 :: p)), (Permutation p (c1 :: p)), (Permutation p (a2 :: p)), (Permutation p (a1 :: p)), (Permutation p (gv1 :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max c2)), (Permutation p (heap_delete_max c1))
(Permutation p (heap_delete_max a2)), (Permutation p (heap_delete_max a1)), (Permutation p (heap_delete_max gv1)), (Permutation p (join p p c2)), (Permutation p (join p p c1)), (Permutation p (join p p a2)), (Permutation p (join p p a1)), (Permutation p (join p p gv1)), (Permutation p (insert n1 p)), (Permutation p (insert n0 p))
(Permutation p (insert n p)), (Permutation p (carry p c2)), (Permutation p (carry p c1)), (Permutation p (carry p a2)), (Permutation p (carry p a1)), (Permutation p (carry p gv1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (c2 :: p) p), (Permutation (c2 :: p) (c1 :: p))
(Permutation (c2 :: p) (a2 :: p)), (Permutation (c2 :: p) (a1 :: p)), (Permutation (c2 :: p) (gv1 :: p)), (Permutation (c2 :: p) (merge p p)), (Permutation (c2 :: p) (heap_delete_max c2)), (Permutation (c2 :: p) (heap_delete_max c1)), (Permutation (c2 :: p) (heap_delete_max a2)), (Permutation (c2 :: p) (heap_delete_max a1)), (Permutation (c2 :: p) (heap_delete_max gv1)), (Permutation (c2 :: p) (join p p c2))
(Permutation (c2 :: p) (join p p c1)), (Permutation (c2 :: p) (join p p a2)), (Permutation (c2 :: p) (join p p a1)), (Permutation (c2 :: p) (join p p gv1)), (Permutation (c2 :: p) (insert n1 p)), (Permutation (c2 :: p) (insert n0 p)), (Permutation (c2 :: p) (insert n p)), (Permutation (c2 :: p) (carry p c2)), (Permutation (c2 :: p) (carry p c1)), (Permutation (c2 :: p) (carry p a2))
(Permutation (c2 :: p) (carry p a1)), (Permutation (c2 :: p) (carry p gv1)), (Permutation (c2 :: p) (p ++ p)), (Permutation (c2 :: p) []), (Permutation (c1 :: p) p), (Permutation (c1 :: p) (c2 :: p)), (Permutation (c1 :: p) (a2 :: p)), (Permutation (c1 :: p) (a1 :: p)), (Permutation (c1 :: p) (gv1 :: p)), (Permutation (c1 :: p) (merge p p))
(Permutation (c1 :: p) (heap_delete_max c2)), (Permutation (c1 :: p) (heap_delete_max c1)), (Permutation (c1 :: p) (heap_delete_max a2)), (Permutation (c1 :: p) (heap_delete_max a1)), (Permutation (c1 :: p) (heap_delete_max gv1)), (Permutation (c1 :: p) (join p p c2)), (Permutation (c1 :: p) (join p p c1)), (Permutation (c1 :: p) (join p p a2)), (Permutation (c1 :: p) (join p p a1)), (Permutation (c1 :: p) (join p p gv1))
(Permutation (c1 :: p) (insert n1 p)), (Permutation (c1 :: p) (insert n0 p)), (Permutation (c1 :: p) (insert n p)), (Permutation (c1 :: p) (carry p c2)), (Permutation (c1 :: p) (carry p c1)), (Permutation (c1 :: p) (carry p a2)), (Permutation (c1 :: p) (carry p a1)), (Permutation (c1 :: p) (carry p gv1)), (Permutation (c1 :: p) (p ++ p)), (Permutation (c1 :: p) [])
(Permutation (a2 :: p) p), (Permutation (a2 :: p) (c2 :: p)), (Permutation (a2 :: p) (c1 :: p)), (Permutation (a2 :: p) (a1 :: p)), (Permutation (a2 :: p) (gv1 :: p)), (Permutation (a2 :: p) (merge p p)), (Permutation (a2 :: p) (heap_delete_max c2)), (Permutation (a2 :: p) (heap_delete_max c1)), (Permutation (a2 :: p) (heap_delete_max a2)), (Permutation (a2 :: p) (heap_delete_max a1))
(Permutation (a2 :: p) (heap_delete_max gv1)), (Permutation (a2 :: p) (join p p c2)), (Permutation (a2 :: p) (join p p c1)), (Permutation (a2 :: p) (join p p a2)), (Permutation (a2 :: p) (join p p a1)), (Permutation (a2 :: p) (join p p gv1)), (Permutation (a2 :: p) (insert n1 p)), (Permutation (a2 :: p) (insert n0 p)), (Permutation (a2 :: p) (insert n p)), (Permutation (a2 :: p) (carry p c2))
(Permutation (a2 :: p) (carry p c1)), (Permutation (a2 :: p) (carry p a2)), (Permutation (a2 :: p) (carry p a1)), (Permutation (a2 :: p) (carry p gv1)), (Permutation (a2 :: p) (p ++ p)), (Permutation (a2 :: p) []), (Permutation (a1 :: p) p), (Permutation (a1 :: p) (c2 :: p)), (Permutation (a1 :: p) (c1 :: p)), (Permutation (a1 :: p) (a2 :: p))
(Permutation (a1 :: p) (gv1 :: p)), (Permutation (a1 :: p) (merge p p)), (Permutation (a1 :: p) (heap_delete_max c2)), (Permutation (a1 :: p) (heap_delete_max c1)), (Permutation (a1 :: p) (heap_delete_max a2)), (Permutation (a1 :: p) (heap_delete_max a1)), (Permutation (a1 :: p) (heap_delete_max gv1)), (Permutation (a1 :: p) (join p p c2)), (Permutation (a1 :: p) (join p p c1)), (Permutation (a1 :: p) (join p p a2))
(Permutation (a1 :: p) (join p p a1)), (Permutation (a1 :: p) (join p p gv1)), (Permutation (a1 :: p) (insert n1 p)), (Permutation (a1 :: p) (insert n0 p)), (Permutation (a1 :: p) (insert n p)), (Permutation (a1 :: p) (carry p c2)), (Permutation (a1 :: p) (carry p c1)), (Permutation (a1 :: p) (carry p a2)), (Permutation (a1 :: p) (carry p a1)), (Permutation (a1 :: p) (carry p gv1))
(Permutation (a1 :: p) (p ++ p)), (Permutation (a1 :: p) []), (Permutation (gv1 :: p) p), (Permutation (gv1 :: p) (c2 :: p)), (Permutation (gv1 :: p) (c1 :: p)), (Permutation (gv1 :: p) (a2 :: p)), (Permutation (gv1 :: p) (a1 :: p)), (Permutation (gv1 :: p) (merge p p)), (Permutation (gv1 :: p) (heap_delete_max c2)), (Permutation (gv1 :: p) (heap_delete_max c1))
(Permutation (gv1 :: p) (heap_delete_max a2)), (Permutation (gv1 :: p) (heap_delete_max a1)), (Permutation (gv1 :: p) (heap_delete_max gv1)), (Permutation (gv1 :: p) (join p p c2)), (Permutation (gv1 :: p) (join p p c1)), (Permutation (gv1 :: p) (join p p a2)), (Permutation (gv1 :: p) (join p p a1)), (Permutation (gv1 :: p) (join p p gv1)), (Permutation (gv1 :: p) (insert n1 p)), (Permutation (gv1 :: p) (insert n0 p))
(Permutation (gv1 :: p) (insert n p)), (Permutation (gv1 :: p) (carry p c2)), (Permutation (gv1 :: p) (carry p c1)), (Permutation (gv1 :: p) (carry p a2)), (Permutation (gv1 :: p) (carry p a1)), (Permutation (gv1 :: p) (carry p gv1)), (Permutation (gv1 :: p) (p ++ p)), (Permutation (gv1 :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (c2 :: p))
(Permutation (merge p p) (c1 :: p)), (Permutation (merge p p) (a2 :: p)), (Permutation (merge p p) (a1 :: p)), (Permutation (merge p p) (gv1 :: p)), (Permutation (merge p p) (heap_delete_max c2)), (Permutation (merge p p) (heap_delete_max c1)), (Permutation (merge p p) (heap_delete_max a2)), (Permutation (merge p p) (heap_delete_max a1)), (Permutation (merge p p) (heap_delete_max gv1)), (Permutation (merge p p) (join p p c2))
(Permutation (merge p p) (join p p c1)), (Permutation (merge p p) (join p p a2)), (Permutation (merge p p) (join p p a1)), (Permutation (merge p p) (join p p gv1)), (Permutation (merge p p) (insert n1 p)), (Permutation (merge p p) (insert n0 p)), (Permutation (merge p p) (insert n p)), (Permutation (merge p p) (carry p c2)), (Permutation (merge p p) (carry p c1)), (Permutation (merge p p) (carry p a2))
(Permutation (merge p p) (carry p a1)), (Permutation (merge p p) (carry p gv1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max c2) p), (Permutation (heap_delete_max c2) (c2 :: p)), (Permutation (heap_delete_max c2) (c1 :: p)), (Permutation (heap_delete_max c2) (a2 :: p)), (Permutation (heap_delete_max c2) (a1 :: p)), (Permutation (heap_delete_max c2) (gv1 :: p))
(Permutation (heap_delete_max c2) (merge p p)), (Permutation (heap_delete_max c2) (heap_delete_max c1)), (Permutation (heap_delete_max c2) (heap_delete_max a2)), (Permutation (heap_delete_max c2) (heap_delete_max a1)), (Permutation (heap_delete_max c2) (heap_delete_max gv1)), (Permutation (heap_delete_max c2) (join p p c2)), (Permutation (heap_delete_max c2) (join p p c1)), (Permutation (heap_delete_max c2) (join p p a2)), (Permutation (heap_delete_max c2) (join p p a1)), (Permutation (heap_delete_max c2) (join p p gv1))
(Permutation (heap_delete_max c2) (insert n1 p)), (Permutation (heap_delete_max c2) (insert n0 p)), (Permutation (heap_delete_max c2) (insert n p)), (Permutation (heap_delete_max c2) (carry p c2)), (Permutation (heap_delete_max c2) (carry p c1)), (Permutation (heap_delete_max c2) (carry p a2)), (Permutation (heap_delete_max c2) (carry p a1)), (Permutation (heap_delete_max c2) (carry p gv1)), (Permutation (heap_delete_max c2) (p ++ p)), (Permutation (heap_delete_max c2) [])
(Permutation (heap_delete_max c1) p), (Permutation (heap_delete_max c1) (c2 :: p)), (Permutation (heap_delete_max c1) (c1 :: p)), (Permutation (heap_delete_max c1) (a2 :: p)), (Permutation (heap_delete_max c1) (a1 :: p)), (Permutation (heap_delete_max c1) (gv1 :: p)), (Permutation (heap_delete_max c1) (merge p p)), (Permutation (heap_delete_max c1) (heap_delete_max c2)), (Permutation (heap_delete_max c1) (heap_delete_max a2)), (Permutation (heap_delete_max c1) (heap_delete_max a1))
(Permutation (heap_delete_max c1) (heap_delete_max gv1)), (Permutation (heap_delete_max c1) (join p p c2)), (Permutation (heap_delete_max c1) (join p p c1)), (Permutation (heap_delete_max c1) (join p p a2)), (Permutation (heap_delete_max c1) (join p p a1)), (Permutation (heap_delete_max c1) (join p p gv1)), (Permutation (heap_delete_max c1) (insert n1 p)), (Permutation (heap_delete_max c1) (insert n0 p)), (Permutation (heap_delete_max c1) (insert n p)), (Permutation (heap_delete_max c1) (carry p c2))
(Permutation (heap_delete_max c1) (carry p c1)), (Permutation (heap_delete_max c1) (carry p a2)), (Permutation (heap_delete_max c1) (carry p a1)), (Permutation (heap_delete_max c1) (carry p gv1)), (Permutation (heap_delete_max c1) (p ++ p)), (Permutation (heap_delete_max c1) []), (Permutation (heap_delete_max a2) p), (Permutation (heap_delete_max a2) (c2 :: p)), (Permutation (heap_delete_max a2) (c1 :: p)), (Permutation (heap_delete_max a2) (a2 :: p))
(Permutation (heap_delete_max a2) (a1 :: p)), (Permutation (heap_delete_max a2) (gv1 :: p)), (Permutation (heap_delete_max a2) (merge p p)), (Permutation (heap_delete_max a2) (heap_delete_max c2)), (Permutation (heap_delete_max a2) (heap_delete_max c1)), (Permutation (heap_delete_max a2) (heap_delete_max a1)), (Permutation (heap_delete_max a2) (heap_delete_max gv1)), (Permutation (heap_delete_max a2) (join p p c2)), (Permutation (heap_delete_max a2) (join p p c1)), (Permutation (heap_delete_max a2) (join p p a2))
(Permutation (heap_delete_max a2) (join p p a1)), (Permutation (heap_delete_max a2) (join p p gv1)), (Permutation (heap_delete_max a2) (insert n1 p)), (Permutation (heap_delete_max a2) (insert n0 p)), (Permutation (heap_delete_max a2) (insert n p)), (Permutation (heap_delete_max a2) (carry p c2)), (Permutation (heap_delete_max a2) (carry p c1)), (Permutation (heap_delete_max a2) (carry p a2)), (Permutation (heap_delete_max a2) (carry p a1)), (Permutation (heap_delete_max a2) (carry p gv1))
(Permutation (heap_delete_max a2) (p ++ p)), (Permutation (heap_delete_max a2) []), (Permutation (heap_delete_max a1) p), (Permutation (heap_delete_max a1) (c2 :: p)), (Permutation (heap_delete_max a1) (c1 :: p)), (Permutation (heap_delete_max a1) (a2 :: p)), (Permutation (heap_delete_max a1) (a1 :: p)), (Permutation (heap_delete_max a1) (gv1 :: p)), (Permutation (heap_delete_max a1) (merge p p)), (Permutation (heap_delete_max a1) (heap_delete_max c2))
(Permutation (heap_delete_max a1) (heap_delete_max c1)), (Permutation (heap_delete_max a1) (heap_delete_max a2)), (Permutation (heap_delete_max a1) (heap_delete_max gv1)), (Permutation (heap_delete_max a1) (join p p c2)), (Permutation (heap_delete_max a1) (join p p c1)), (Permutation (heap_delete_max a1) (join p p a2)), (Permutation (heap_delete_max a1) (join p p a1)), (Permutation (heap_delete_max a1) (join p p gv1)), (Permutation (heap_delete_max a1) (insert n1 p)), (Permutation (heap_delete_max a1) (insert n0 p))
(Permutation (heap_delete_max a1) (insert n p)), (Permutation (heap_delete_max a1) (carry p c2)), (Permutation (heap_delete_max a1) (carry p c1)), (Permutation (heap_delete_max a1) (carry p a2)), (Permutation (heap_delete_max a1) (carry p a1)), (Permutation (heap_delete_max a1) (carry p gv1)), (Permutation (heap_delete_max a1) (p ++ p)), (Permutation (heap_delete_max a1) []), (Permutation (heap_delete_max gv1) p), (Permutation (heap_delete_max gv1) (c2 :: p))
(Permutation (heap_delete_max gv1) (c1 :: p)), (Permutation (heap_delete_max gv1) (a2 :: p)), (Permutation (heap_delete_max gv1) (a1 :: p)), (Permutation (heap_delete_max gv1) (gv1 :: p)), (Permutation (heap_delete_max gv1) (merge p p)), (Permutation (heap_delete_max gv1) (heap_delete_max c2)), (Permutation (heap_delete_max gv1) (heap_delete_max c1)), (Permutation (heap_delete_max gv1) (heap_delete_max a2)), (Permutation (heap_delete_max gv1) (heap_delete_max a1)), (Permutation (heap_delete_max gv1) (join p p c2))
(Permutation (heap_delete_max gv1) (join p p c1)), (Permutation (heap_delete_max gv1) (join p p a2)), (Permutation (heap_delete_max gv1) (join p p a1)), (Permutation (heap_delete_max gv1) (join p p gv1)), (Permutation (heap_delete_max gv1) (insert n1 p)), (Permutation (heap_delete_max gv1) (insert n0 p)), (Permutation (heap_delete_max gv1) (insert n p)), (Permutation (heap_delete_max gv1) (carry p c2)), (Permutation (heap_delete_max gv1) (carry p c1)), (Permutation (heap_delete_max gv1) (carry p a2))
(Permutation (heap_delete_max gv1) (carry p a1)), (Permutation (heap_delete_max gv1) (carry p gv1)), (Permutation (heap_delete_max gv1) (p ++ p)), (Permutation (heap_delete_max gv1) []), (Permutation (join p p c2) p), (Permutation (join p p c2) (c2 :: p)), (Permutation (join p p c2) (c1 :: p)), (Permutation (join p p c2) (a2 :: p)), (Permutation (join p p c2) (a1 :: p)), (Permutation (join p p c2) (gv1 :: p))
(Permutation (join p p c2) (merge p p)), (Permutation (join p p c2) (heap_delete_max c2)), (Permutation (join p p c2) (heap_delete_max c1)), (Permutation (join p p c2) (heap_delete_max a2)), (Permutation (join p p c2) (heap_delete_max a1)), (Permutation (join p p c2) (heap_delete_max gv1)), (Permutation (join p p c2) (join p p c1)), (Permutation (join p p c2) (join p p a2)), (Permutation (join p p c2) (join p p a1)), (Permutation (join p p c2) (join p p gv1))
(Permutation (join p p c2) (insert n1 p)), (Permutation (join p p c2) (insert n0 p)), (Permutation (join p p c2) (insert n p)), (Permutation (join p p c2) (carry p c2)), (Permutation (join p p c2) (carry p c1)), (Permutation (join p p c2) (carry p a2)), (Permutation (join p p c2) (carry p a1)), (Permutation (join p p c2) (carry p gv1)), (Permutation (join p p c2) (p ++ p)), (Permutation (join p p c2) [])
(Permutation (join p p c1) p), (Permutation (join p p c1) (c2 :: p)), (Permutation (join p p c1) (c1 :: p)), (Permutation (join p p c1) (a2 :: p)), (Permutation (join p p c1) (a1 :: p)), (Permutation (join p p c1) (gv1 :: p)), (Permutation (join p p c1) (merge p p)), (Permutation (join p p c1) (heap_delete_max c2)), (Permutation (join p p c1) (heap_delete_max c1)), (Permutation (join p p c1) (heap_delete_max a2))
(Permutation (join p p c1) (heap_delete_max a1)), (Permutation (join p p c1) (heap_delete_max gv1)), (Permutation (join p p c1) (join p p c2)), (Permutation (join p p c1) (join p p a2)), (Permutation (join p p c1) (join p p a1)), (Permutation (join p p c1) (join p p gv1)), (Permutation (join p p c1) (insert n1 p)), (Permutation (join p p c1) (insert n0 p)), (Permutation (join p p c1) (insert n p)), (Permutation (join p p c1) (carry p c2))
(Permutation (join p p c1) (carry p c1)), (Permutation (join p p c1) (carry p a2)), (Permutation (join p p c1) (carry p a1)), (Permutation (join p p c1) (carry p gv1)), (Permutation (join p p c1) (p ++ p)), (Permutation (join p p c1) []), (Permutation (join p p a2) p), (Permutation (join p p a2) (c2 :: p)), (Permutation (join p p a2) (c1 :: p)), (Permutation (join p p a2) (a2 :: p))
(Permutation (join p p a2) (a1 :: p)), (Permutation (join p p a2) (gv1 :: p)), (Permutation (join p p a2) (merge p p)), (Permutation (join p p a2) (heap_delete_max c2)), (Permutation (join p p a2) (heap_delete_max c1)), (Permutation (join p p a2) (heap_delete_max a2)), (Permutation (join p p a2) (heap_delete_max a1)), (Permutation (join p p a2) (heap_delete_max gv1)), (Permutation (join p p a2) (join p p c2)), (Permutation (join p p a2) (join p p c1))
(Permutation (join p p a2) (join p p a1)), (Permutation (join p p a2) (join p p gv1)), (Permutation (join p p a2) (insert n1 p)), (Permutation (join p p a2) (insert n0 p)), (Permutation (join p p a2) (insert n p)), (Permutation (join p p a2) (carry p c2)), (Permutation (join p p a2) (carry p c1)), (Permutation (join p p a2) (carry p a2)), (Permutation (join p p a2) (carry p a1)), (Permutation (join p p a2) (carry p gv1))
(Permutation (join p p a2) (p ++ p)), (Permutation (join p p a2) []), (Permutation (join p p a1) p), (Permutation (join p p a1) (c2 :: p)), (Permutation (join p p a1) (c1 :: p)), (Permutation (join p p a1) (a2 :: p)), (Permutation (join p p a1) (a1 :: p)), (Permutation (join p p a1) (gv1 :: p)), (Permutation (join p p a1) (merge p p)), (Permutation (join p p a1) (heap_delete_max c2))
(Permutation (join p p a1) (heap_delete_max c1)), (Permutation (join p p a1) (heap_delete_max a2)), (Permutation (join p p a1) (heap_delete_max a1)), (Permutation (join p p a1) (heap_delete_max gv1)), (Permutation (join p p a1) (join p p c2)), (Permutation (join p p a1) (join p p c1)), (Permutation (join p p a1) (join p p a2)), (Permutation (join p p a1) (join p p gv1)), (Permutation (join p p a1) (insert n1 p)), (Permutation (join p p a1) (insert n0 p))
(Permutation (join p p a1) (insert n p)), (Permutation (join p p a1) (carry p c2)), (Permutation (join p p a1) (carry p c1)), (Permutation (join p p a1) (carry p a2)), (Permutation (join p p a1) (carry p a1)), (Permutation (join p p a1) (carry p gv1)), (Permutation (join p p a1) (p ++ p)), (Permutation (join p p a1) []), (Permutation (join p p gv1) p), (Permutation (join p p gv1) (c2 :: p))
(Permutation (join p p gv1) (c1 :: p)), (Permutation (join p p gv1) (a2 :: p)), (Permutation (join p p gv1) (a1 :: p)), (Permutation (join p p gv1) (gv1 :: p)), (Permutation (join p p gv1) (merge p p)), (Permutation (join p p gv1) (heap_delete_max c2)), (Permutation (join p p gv1) (heap_delete_max c1)), (Permutation (join p p gv1) (heap_delete_max a2)), (Permutation (join p p gv1) (heap_delete_max a1)), (Permutation (join p p gv1) (heap_delete_max gv1))
(Permutation (join p p gv1) (join p p c2)), (Permutation (join p p gv1) (join p p c1)), (Permutation (join p p gv1) (join p p a2)), (Permutation (join p p gv1) (join p p a1)), (Permutation (join p p gv1) (insert n1 p)), (Permutation (join p p gv1) (insert n0 p)), (Permutation (join p p gv1) (insert n p)), (Permutation (join p p gv1) (carry p c2)), (Permutation (join p p gv1) (carry p c1)), (Permutation (join p p gv1) (carry p a2))
(Permutation (join p p gv1) (carry p a1)), (Permutation (join p p gv1) (carry p gv1)), (Permutation (join p p gv1) (p ++ p)), (Permutation (join p p gv1) []), (Permutation (insert n1 p) p), (Permutation (insert n1 p) (c2 :: p)), (Permutation (insert n1 p) (c1 :: p)), (Permutation (insert n1 p) (a2 :: p)), (Permutation (insert n1 p) (a1 :: p)), (Permutation (insert n1 p) (gv1 :: p))
(Permutation (insert n1 p) (merge p p)), (Permutation (insert n1 p) (heap_delete_max c2)), (Permutation (insert n1 p) (heap_delete_max c1)), (Permutation (insert n1 p) (heap_delete_max a2)), (Permutation (insert n1 p) (heap_delete_max a1)), (Permutation (insert n1 p) (heap_delete_max gv1)), (Permutation (insert n1 p) (join p p c2)), (Permutation (insert n1 p) (join p p c1)), (Permutation (insert n1 p) (join p p a2)), (Permutation (insert n1 p) (join p p a1))
(Permutation (insert n1 p) (join p p gv1)), (Permutation (insert n1 p) (insert n0 p)), (Permutation (insert n1 p) (insert n p)), (Permutation (insert n1 p) (carry p c2)), (Permutation (insert n1 p) (carry p c1)), (Permutation (insert n1 p) (carry p a2)), (Permutation (insert n1 p) (carry p a1)), (Permutation (insert n1 p) (carry p gv1)), (Permutation (insert n1 p) (p ++ p)), (Permutation (insert n1 p) [])
(Permutation (insert n0 p) p), (Permutation (insert n0 p) (c2 :: p)), (Permutation (insert n0 p) (c1 :: p)), (Permutation (insert n0 p) (a2 :: p)), (Permutation (insert n0 p) (a1 :: p)), (Permutation (insert n0 p) (gv1 :: p)), (Permutation (insert n0 p) (merge p p)), (Permutation (insert n0 p) (heap_delete_max c2)), (Permutation (insert n0 p) (heap_delete_max c1)), (Permutation (insert n0 p) (heap_delete_max a2))
(Permutation (insert n0 p) (heap_delete_max a1)), (Permutation (insert n0 p) (heap_delete_max gv1)), (Permutation (insert n0 p) (join p p c2)), (Permutation (insert n0 p) (join p p c1)), (Permutation (insert n0 p) (join p p a2)), (Permutation (insert n0 p) (join p p a1)), (Permutation (insert n0 p) (join p p gv1)), (Permutation (insert n0 p) (insert n1 p)), (Permutation (insert n0 p) (insert n p)), (Permutation (insert n0 p) (carry p c2))
(Permutation (insert n0 p) (carry p c1)), (Permutation (insert n0 p) (carry p a2)), (Permutation (insert n0 p) (carry p a1)), (Permutation (insert n0 p) (carry p gv1)), (Permutation (insert n0 p) (p ++ p)), (Permutation (insert n0 p) []), (Permutation (insert n p) p), (Permutation (insert n p) (c2 :: p)), (Permutation (insert n p) (c1 :: p)), (Permutation (insert n p) (a2 :: p))
(Permutation (insert n p) (a1 :: p)), (Permutation (insert n p) (gv1 :: p)), (Permutation (insert n p) (merge p p)), (Permutation (insert n p) (heap_delete_max c2)), (Permutation (insert n p) (heap_delete_max c1)), (Permutation (insert n p) (heap_delete_max a2)), (Permutation (insert n p) (heap_delete_max a1)), (Permutation (insert n p) (heap_delete_max gv1)), (Permutation (insert n p) (join p p c2)), (Permutation (insert n p) (join p p c1))
(Permutation (insert n p) (join p p a2)), (Permutation (insert n p) (join p p a1)), (Permutation (insert n p) (join p p gv1)), (Permutation (insert n p) (insert n1 p)), (Permutation (insert n p) (insert n0 p)), (Permutation (insert n p) (carry p c2)), (Permutation (insert n p) (carry p c1)), (Permutation (insert n p) (carry p a2)), (Permutation (insert n p) (carry p a1)), (Permutation (insert n p) (carry p gv1))
(Permutation (insert n p) (p ++ p)), (Permutation (insert n p) []), (Permutation (carry p c2) p), (Permutation (carry p c2) (c2 :: p)), (Permutation (carry p c2) (c1 :: p)), (Permutation (carry p c2) (a2 :: p)), (Permutation (carry p c2) (a1 :: p)), (Permutation (carry p c2) (gv1 :: p)), (Permutation (carry p c2) (merge p p)), (Permutation (carry p c2) (heap_delete_max c2))
(Permutation (carry p c2) (heap_delete_max c1)), (Permutation (carry p c2) (heap_delete_max a2)), (Permutation (carry p c2) (heap_delete_max a1)), (Permutation (carry p c2) (heap_delete_max gv1)), (Permutation (carry p c2) (join p p c2)), (Permutation (carry p c2) (join p p c1)), (Permutation (carry p c2) (join p p a2)), (Permutation (carry p c2) (join p p a1)), (Permutation (carry p c2) (join p p gv1)), (Permutation (carry p c2) (insert n1 p))
(Permutation (carry p c2) (insert n0 p)), (Permutation (carry p c2) (insert n p)), (Permutation (carry p c2) (carry p c1)), (Permutation (carry p c2) (carry p a2)), (Permutation (carry p c2) (carry p a1)), (Permutation (carry p c2) (carry p gv1)), (Permutation (carry p c2) (p ++ p)), (Permutation (carry p c2) []), (Permutation (carry p c1) p), (Permutation (carry p c1) (c2 :: p))
(Permutation (carry p c1) (c1 :: p)), (Permutation (carry p c1) (a2 :: p)), (Permutation (carry p c1) (a1 :: p)), (Permutation (carry p c1) (gv1 :: p)), (Permutation (carry p c1) (merge p p)), (Permutation (carry p c1) (heap_delete_max c2)), (Permutation (carry p c1) (heap_delete_max c1)), (Permutation (carry p c1) (heap_delete_max a2)), (Permutation (carry p c1) (heap_delete_max a1)), (Permutation (carry p c1) (heap_delete_max gv1))
(Permutation (carry p c1) (join p p c2)), (Permutation (carry p c1) (join p p c1)), (Permutation (carry p c1) (join p p a2)), (Permutation (carry p c1) (join p p a1)), (Permutation (carry p c1) (join p p gv1)), (Permutation (carry p c1) (insert n1 p)), (Permutation (carry p c1) (insert n0 p)), (Permutation (carry p c1) (insert n p)), (Permutation (carry p c1) (carry p c2)), (Permutation (carry p c1) (carry p a2))
(Permutation (carry p c1) (carry p a1)), (Permutation (carry p c1) (carry p gv1)), (Permutation (carry p c1) (p ++ p)), (Permutation (carry p c1) []), (Permutation (carry p a2) p), (Permutation (carry p a2) (c2 :: p)), (Permutation (carry p a2) (c1 :: p)), (Permutation (carry p a2) (a2 :: p)), (Permutation (carry p a2) (a1 :: p)), (Permutation (carry p a2) (gv1 :: p))
(Permutation (carry p a2) (merge p p)), (Permutation (carry p a2) (heap_delete_max c2)), (Permutation (carry p a2) (heap_delete_max c1)), (Permutation (carry p a2) (heap_delete_max a2)), (Permutation (carry p a2) (heap_delete_max a1)), (Permutation (carry p a2) (heap_delete_max gv1)), (Permutation (carry p a2) (join p p c2)), (Permutation (carry p a2) (join p p c1)), (Permutation (carry p a2) (join p p a2)), (Permutation (carry p a2) (join p p a1))
(Permutation (carry p a2) (join p p gv1)), (Permutation (carry p a2) (insert n1 p)), (Permutation (carry p a2) (insert n0 p)), (Permutation (carry p a2) (insert n p)), (Permutation (carry p a2) (carry p c2)), (Permutation (carry p a2) (carry p c1)), (Permutation (carry p a2) (carry p a1)), (Permutation (carry p a2) (carry p gv1)), (Permutation (carry p a2) (p ++ p)), (Permutation (carry p a2) [])
(Permutation (carry p a1) p), (Permutation (carry p a1) (c2 :: p)), (Permutation (carry p a1) (c1 :: p)), (Permutation (carry p a1) (a2 :: p)), (Permutation (carry p a1) (a1 :: p)), (Permutation (carry p a1) (gv1 :: p)), (Permutation (carry p a1) (merge p p)), (Permutation (carry p a1) (heap_delete_max c2)), (Permutation (carry p a1) (heap_delete_max c1)), (Permutation (carry p a1) (heap_delete_max a2))
(Permutation (carry p a1) (heap_delete_max a1)), (Permutation (carry p a1) (heap_delete_max gv1)), (Permutation (carry p a1) (join p p c2)), (Permutation (carry p a1) (join p p c1)), (Permutation (carry p a1) (join p p a2)), (Permutation (carry p a1) (join p p a1)), (Permutation (carry p a1) (join p p gv1)), (Permutation (carry p a1) (insert n1 p)), (Permutation (carry p a1) (insert n0 p)), (Permutation (carry p a1) (insert n p))
(Permutation (carry p a1) (carry p c2)), (Permutation (carry p a1) (carry p c1)), (Permutation (carry p a1) (carry p a2)), (Permutation (carry p a1) (carry p gv1)), (Permutation (carry p a1) (p ++ p)), (Permutation (carry p a1) []), (Permutation (carry p gv1) p), (Permutation (carry p gv1) (c2 :: p)), (Permutation (carry p gv1) (c1 :: p)), (Permutation (carry p gv1) (a2 :: p))
(Permutation (carry p gv1) (a1 :: p)), (Permutation (carry p gv1) (gv1 :: p)), (Permutation (carry p gv1) (merge p p)), (Permutation (carry p gv1) (heap_delete_max c2)), (Permutation (carry p gv1) (heap_delete_max c1)), (Permutation (carry p gv1) (heap_delete_max a2)), (Permutation (carry p gv1) (heap_delete_max a1)), (Permutation (carry p gv1) (heap_delete_max gv1)), (Permutation (carry p gv1) (join p p c2)), (Permutation (carry p gv1) (join p p c1))
(Permutation (carry p gv1) (join p p a2)), (Permutation (carry p gv1) (join p p a1)), (Permutation (carry p gv1) (join p p gv1)), (Permutation (carry p gv1) (insert n1 p)), (Permutation (carry p gv1) (insert n0 p)), (Permutation (carry p gv1) (insert n p)), (Permutation (carry p gv1) (carry p c2)), (Permutation (carry p gv1) (carry p c1)), (Permutation (carry p gv1) (carry p a2)), (Permutation (carry p gv1) (carry p a1))
(Permutation (carry p gv1) (p ++ p)), (Permutation (carry p gv1) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (c2 :: p)), (Permutation (p ++ p) (c1 :: p)), (Permutation (p ++ p) (a2 :: p)), (Permutation (p ++ p) (a1 :: p)), (Permutation (p ++ p) (gv1 :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max c2))
(Permutation (p ++ p) (heap_delete_max c1)), (Permutation (p ++ p) (heap_delete_max a2)), (Permutation (p ++ p) (heap_delete_max a1)), (Permutation (p ++ p) (heap_delete_max gv1)), (Permutation (p ++ p) (join p p c2)), (Permutation (p ++ p) (join p p c1)), (Permutation (p ++ p) (join p p a2)), (Permutation (p ++ p) (join p p a1)), (Permutation (p ++ p) (join p p gv1)), (Permutation (p ++ p) (insert n1 p))
(Permutation (p ++ p) (insert n0 p)), (Permutation (p ++ p) (insert n p)), (Permutation (p ++ p) (carry p c2)), (Permutation (p ++ p) (carry p c1)), (Permutation (p ++ p) (carry p a2)), (Permutation (p ++ p) (carry p a1)), (Permutation (p ++ p) (carry p gv1)), (Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (c2 :: p))
(Permutation [] (c1 :: p)), (Permutation [] (a2 :: p)), (Permutation [] (a1 :: p)), (Permutation [] (gv1 :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max c2)), (Permutation [] (heap_delete_max c1)), (Permutation [] (heap_delete_max a2)), (Permutation [] (heap_delete_max a1)), (Permutation [] (heap_delete_max gv1))
(Permutation [] (join p p c2)), (Permutation [] (join p p c1)), (Permutation [] (join p p a2)), (Permutation [] (join p p a1)), (Permutation [] (join p p gv1)), (Permutation [] (insert n1 p)), (Permutation [] (insert n0 p)), (Permutation [] (insert n p)), (Permutation [] (carry p c2)), (Permutation [] (carry p c1))
(Permutation [] (carry p a2)), (Permutation [] (carry p a1)), (Permutation [] (carry p gv1)), (Permutation [] (p ++ p)), (In c2 (c2 :: p)), (In c2 (c1 :: p)), (In c2 (a2 :: p)), (In c2 (a1 :: p)), (In c2 (gv1 :: p)), (In c2 (merge p p))
(In c2 (heap_delete_max c2)), (In c2 (heap_delete_max c1)), (In c2 (heap_delete_max a2)), (In c2 (heap_delete_max a1)), (In c2 (heap_delete_max gv1)), (In c2 (join p p c2)), (In c2 (join p p c1)), (In c2 (join p p a2)), (In c2 (join p p a1)), (In c2 (join p p gv1))
(In c2 (insert n1 p)), (In c2 (insert n0 p)), (In c2 (insert n p)), (In c2 (carry p c2)), (In c2 (carry p c1)), (In c2 (carry p a2)), (In c2 (carry p a1)), (In c2 (carry p gv1)), (In c2 (p ++ p)), (In c1 (c2 :: p))
(In c1 (c1 :: p)), (In c1 (a2 :: p)), (In c1 (a1 :: p)), (In c1 (gv1 :: p)), (In c1 (merge p p)), (In c1 (heap_delete_max c2)), (In c1 (heap_delete_max c1)), (In c1 (heap_delete_max a2)), (In c1 (heap_delete_max a1)), (In c1 (heap_delete_max gv1))
(In c1 (join p p c2)), (In c1 (join p p c1)), (In c1 (join p p a2)), (In c1 (join p p a1)), (In c1 (join p p gv1)), (In c1 (insert n1 p)), (In c1 (insert n0 p)), (In c1 (insert n p)), (In c1 (carry p c2)), (In c1 (carry p c1))
(In c1 (carry p a2)), (In c1 (carry p a1)), (In c1 (carry p gv1)), (In c1 (p ++ p)), (In a2 (c2 :: p)), (In a2 (c1 :: p)), (In a2 (a2 :: p)), (In a2 (a1 :: p)), (In a2 (gv1 :: p)), (In a2 (merge p p))
(In a2 (heap_delete_max c2)), (In a2 (heap_delete_max c1)), (In a2 (heap_delete_max a2)), (In a2 (heap_delete_max a1)), (In a2 (heap_delete_max gv1)), (In a2 (join p p c2)), (In a2 (join p p c1)), (In a2 (join p p a2)), (In a2 (join p p a1)), (In a2 (join p p gv1))
(In a2 (insert n1 p)), (In a2 (insert n0 p)), (In a2 (insert n p)), (In a2 (carry p c2)), (In a2 (carry p c1)), (In a2 (carry p a2)), (In a2 (carry p a1)), (In a2 (carry p gv1)), (In a2 (p ++ p)), (In a1 (c2 :: p))
(In a1 (c1 :: p)), (In a1 (a2 :: p)), (In a1 (a1 :: p)), (In a1 (gv1 :: p)), (In a1 (merge p p)), (In a1 (heap_delete_max c2)), (In a1 (heap_delete_max c1)), (In a1 (heap_delete_max a2)), (In a1 (heap_delete_max a1)), (In a1 (heap_delete_max gv1))
(In a1 (join p p c2)), (In a1 (join p p c1)), (In a1 (join p p a2)), (In a1 (join p p a1)), (In a1 (join p p gv1)), (In a1 (insert n1 p)), (In a1 (insert n0 p)), (In a1 (insert n p)), (In a1 (carry p c2)), (In a1 (carry p c1))
(In a1 (carry p a2)), (In a1 (carry p a1)), (In a1 (carry p gv1)), (In a1 (p ++ p)), (In gv1 (c2 :: p)), (In gv1 (c1 :: p)), (In gv1 (a2 :: p)), (In gv1 (a1 :: p)), (In gv1 (gv1 :: p)), (In gv1 (merge p p))
(In gv1 (heap_delete_max c2)), (In gv1 (heap_delete_max c1)), (In gv1 (heap_delete_max a2)), (In gv1 (heap_delete_max a1)), (In gv1 (heap_delete_max gv1)), (In gv1 (join p p c2)), (In gv1 (join p p c1)), (In gv1 (join p p a2)), (In gv1 (join p p a1)), (In gv1 (join p p gv1))
(In gv1 (insert n1 p)), (In gv1 (insert n0 p)), (In gv1 (insert n p)), (In gv1 (carry p c2)), (In gv1 (carry p c1)), (In gv1 (carry p a2)), (In gv1 (carry p a1)), (In gv1 (carry p gv1)), (In gv1 (p ++ p)), (In (Node n1 c2 c2) p)
(In (Node n1 c2 c2) (c2 :: p)), (In (Node n1 c2 c2) (c1 :: p)), (In (Node n1 c2 c2) (a2 :: p)), (In (Node n1 c2 c2) (a1 :: p)), (In (Node n1 c2 c2) (gv1 :: p)), (In (Node n1 c2 c2) (merge p p)), (In (Node n1 c2 c2) (heap_delete_max c2)), (In (Node n1 c2 c2) (heap_delete_max c1)), (In (Node n1 c2 c2) (heap_delete_max a2)), (In (Node n1 c2 c2) (heap_delete_max a1))
(In (Node n1 c2 c2) (heap_delete_max gv1)), (In (Node n1 c2 c2) (join p p c2)), (In (Node n1 c2 c2) (join p p c1)), (In (Node n1 c2 c2) (join p p a2)), (In (Node n1 c2 c2) (join p p a1)), (In (Node n1 c2 c2) (join p p gv1)), (In (Node n1 c2 c2) (insert n1 p)), (In (Node n1 c2 c2) (insert n0 p)), (In (Node n1 c2 c2) (insert n p)), (In (Node n1 c2 c2) (carry p c2))
(In (Node n1 c2 c2) (carry p c1)), (In (Node n1 c2 c2) (carry p a2)), (In (Node n1 c2 c2) (carry p a1)), (In (Node n1 c2 c2) (carry p gv1)), (In (Node n1 c2 c2) (p ++ p)), (In (Node n1 c2 c1) p), (In (Node n1 c2 c1) (c2 :: p)), (In (Node n1 c2 c1) (c1 :: p)), (In (Node n1 c2 c1) (a2 :: p)), (In (Node n1 c2 c1) (a1 :: p))
(In (Node n1 c2 c1) (gv1 :: p)), (In (Node n1 c2 c1) (merge p p)), (In (Node n1 c2 c1) (heap_delete_max c2)), (In (Node n1 c2 c1) (heap_delete_max c1)), (In (Node n1 c2 c1) (heap_delete_max a2)), (In (Node n1 c2 c1) (heap_delete_max a1)), (In (Node n1 c2 c1) (heap_delete_max gv1)), (In (Node n1 c2 c1) (join p p c2)), (In (Node n1 c2 c1) (join p p c1)), (In (Node n1 c2 c1) (join p p a2))
(In (Node n1 c2 c1) (join p p a1)), (In (Node n1 c2 c1) (join p p gv1)), (In (Node n1 c2 c1) (insert n1 p)), (In (Node n1 c2 c1) (insert n0 p)), (In (Node n1 c2 c1) (insert n p)), (In (Node n1 c2 c1) (carry p c2)), (In (Node n1 c2 c1) (carry p c1)), (In (Node n1 c2 c1) (carry p a2)), (In (Node n1 c2 c1) (carry p a1)), (In (Node n1 c2 c1) (carry p gv1))
(In (Node n1 c2 c1) (p ++ p)), (In (Node n1 c2 a2) p), (In (Node n1 c2 a2) (c2 :: p)), (In (Node n1 c2 a2) (c1 :: p)), (In (Node n1 c2 a2) (a2 :: p)), (In (Node n1 c2 a2) (a1 :: p)), (In (Node n1 c2 a2) (gv1 :: p)), (In (Node n1 c2 a2) (merge p p)), (In (Node n1 c2 a2) (heap_delete_max c2)), (In (Node n1 c2 a2) (heap_delete_max c1))
(In (Node n1 c2 a2) (heap_delete_max a2)), (In (Node n1 c2 a2) (heap_delete_max a1)), (In (Node n1 c2 a2) (heap_delete_max gv1)), (In (Node n1 c2 a2) (join p p c2)), (In (Node n1 c2 a2) (join p p c1)), (In (Node n1 c2 a2) (join p p a2)), (In (Node n1 c2 a2) (join p p a1)), (In (Node n1 c2 a2) (join p p gv1)), (In (Node n1 c2 a2) (insert n1 p)), (In (Node n1 c2 a2) (insert n0 p))
(In (Node n1 c2 a2) (insert n p)), (In (Node n1 c2 a2) (carry p c2)), (In (Node n1 c2 a2) (carry p c1)), (In (Node n1 c2 a2) (carry p a2)), (In (Node n1 c2 a2) (carry p a1)), (In (Node n1 c2 a2) (carry p gv1)), (In (Node n1 c2 a2) (p ++ p)), (In (Node n1 c2 a1) p), (In (Node n1 c2 a1) (c2 :: p)), (In (Node n1 c2 a1) (c1 :: p))
(In (Node n1 c2 a1) (a2 :: p)), (In (Node n1 c2 a1) (a1 :: p)), (In (Node n1 c2 a1) (gv1 :: p)), (In (Node n1 c2 a1) (merge p p)), (In (Node n1 c2 a1) (heap_delete_max c2)), (In (Node n1 c2 a1) (heap_delete_max c1)), (In (Node n1 c2 a1) (heap_delete_max a2)), (In (Node n1 c2 a1) (heap_delete_max a1)), (In (Node n1 c2 a1) (heap_delete_max gv1)), (In (Node n1 c2 a1) (join p p c2))
(In (Node n1 c2 a1) (join p p c1)), (In (Node n1 c2 a1) (join p p a2)), (In (Node n1 c2 a1) (join p p a1)), (In (Node n1 c2 a1) (join p p gv1)), (In (Node n1 c2 a1) (insert n1 p)), (In (Node n1 c2 a1) (insert n0 p)), (In (Node n1 c2 a1) (insert n p)), (In (Node n1 c2 a1) (carry p c2)), (In (Node n1 c2 a1) (carry p c1)), (In (Node n1 c2 a1) (carry p a2))
(In (Node n1 c2 a1) (carry p a1)), (In (Node n1 c2 a1) (carry p gv1)), (In (Node n1 c2 a1) (p ++ p)), (In (Node n1 c2 gv1) p), (In (Node n1 c2 gv1) (c2 :: p)), (In (Node n1 c2 gv1) (c1 :: p)), (In (Node n1 c2 gv1) (a2 :: p)), (In (Node n1 c2 gv1) (a1 :: p)), (In (Node n1 c2 gv1) (gv1 :: p)), (In (Node n1 c2 gv1) (merge p p))
(In (Node n1 c2 gv1) (heap_delete_max c2)), (In (Node n1 c2 gv1) (heap_delete_max c1)), (In (Node n1 c2 gv1) (heap_delete_max a2)), (In (Node n1 c2 gv1) (heap_delete_max a1)), (In (Node n1 c2 gv1) (heap_delete_max gv1)), (In (Node n1 c2 gv1) (join p p c2)), (In (Node n1 c2 gv1) (join p p c1)), (In (Node n1 c2 gv1) (join p p a2)), (In (Node n1 c2 gv1) (join p p a1)), (In (Node n1 c2 gv1) (join p p gv1))
(In (Node n1 c2 gv1) (insert n1 p)), (In (Node n1 c2 gv1) (insert n0 p)), (In (Node n1 c2 gv1) (insert n p)), (In (Node n1 c2 gv1) (carry p c2)), (In (Node n1 c2 gv1) (carry p c1)), (In (Node n1 c2 gv1) (carry p a2)), (In (Node n1 c2 gv1) (carry p a1)), (In (Node n1 c2 gv1) (carry p gv1)), (In (Node n1 c2 gv1) (p ++ p)), (In (Node n1 c1 c2) p)
(In (Node n1 c1 c2) (c2 :: p)), (In (Node n1 c1 c2) (c1 :: p)), (In (Node n1 c1 c2) (a2 :: p)), (In (Node n1 c1 c2) (a1 :: p)), (In (Node n1 c1 c2) (gv1 :: p)), (In (Node n1 c1 c2) (merge p p)), (In (Node n1 c1 c2) (heap_delete_max c2)), (In (Node n1 c1 c2) (heap_delete_max c1)), (In (Node n1 c1 c2) (heap_delete_max a2)), (In (Node n1 c1 c2) (heap_delete_max a1))
(In (Node n1 c1 c2) (heap_delete_max gv1)), (In (Node n1 c1 c2) (join p p c2)), (In (Node n1 c1 c2) (join p p c1)), (In (Node n1 c1 c2) (join p p a2)), (In (Node n1 c1 c2) (join p p a1)), (In (Node n1 c1 c2) (join p p gv1)), (In (Node n1 c1 c2) (insert n1 p)), (In (Node n1 c1 c2) (insert n0 p)), (In (Node n1 c1 c2) (insert n p)), (In (Node n1 c1 c2) (carry p c2))
(In (Node n1 c1 c2) (carry p c1)), (In (Node n1 c1 c2) (carry p a2)), (In (Node n1 c1 c2) (carry p a1)), (In (Node n1 c1 c2) (carry p gv1)), (In (Node n1 c1 c2) (p ++ p)), (In (Node n1 c1 c1) p), (In (Node n1 c1 c1) (c2 :: p)), (In (Node n1 c1 c1) (c1 :: p)), (In (Node n1 c1 c1) (a2 :: p)), (In (Node n1 c1 c1) (a1 :: p))
(In (Node n1 c1 c1) (gv1 :: p)), (In (Node n1 c1 c1) (merge p p)), (In (Node n1 c1 c1) (heap_delete_max c2)), (In (Node n1 c1 c1) (heap_delete_max c1)), (In (Node n1 c1 c1) (heap_delete_max a2)), (In (Node n1 c1 c1) (heap_delete_max a1)), (In (Node n1 c1 c1) (heap_delete_max gv1)), (In (Node n1 c1 c1) (join p p c2)), (In (Node n1 c1 c1) (join p p c1)), (In (Node n1 c1 c1) (join p p a2))
(In (Node n1 c1 c1) (join p p a1)), (In (Node n1 c1 c1) (join p p gv1)), (In (Node n1 c1 c1) (insert n1 p)), (In (Node n1 c1 c1) (insert n0 p)), (In (Node n1 c1 c1) (insert n p)), (In (Node n1 c1 c1) (carry p c2)), (In (Node n1 c1 c1) (carry p c1)), (In (Node n1 c1 c1) (carry p a2)), (In (Node n1 c1 c1) (carry p a1)), (In (Node n1 c1 c1) (carry p gv1))
(In (Node n1 c1 c1) (p ++ p)), (In (Node n1 c1 a2) p), (In (Node n1 c1 a2) (c2 :: p)), (In (Node n1 c1 a2) (c1 :: p)), (In (Node n1 c1 a2) (a2 :: p)), (In (Node n1 c1 a2) (a1 :: p)), (In (Node n1 c1 a2) (gv1 :: p)), (In (Node n1 c1 a2) (merge p p)), (In (Node n1 c1 a2) (heap_delete_max c2)), (In (Node n1 c1 a2) (heap_delete_max c1))
(In (Node n1 c1 a2) (heap_delete_max a2)), (In (Node n1 c1 a2) (heap_delete_max a1)), (In (Node n1 c1 a2) (heap_delete_max gv1)), (In (Node n1 c1 a2) (join p p c2)), (In (Node n1 c1 a2) (join p p c1)), (In (Node n1 c1 a2) (join p p a2)), (In (Node n1 c1 a2) (join p p a1)), (In (Node n1 c1 a2) (join p p gv1)), (In (Node n1 c1 a2) (insert n1 p)), (In (Node n1 c1 a2) (insert n0 p))
(In (Node n1 c1 a2) (insert n p)), (In (Node n1 c1 a2) (carry p c2)), (In (Node n1 c1 a2) (carry p c1)), (In (Node n1 c1 a2) (carry p a2)), (In (Node n1 c1 a2) (carry p a1)), (In (Node n1 c1 a2) (carry p gv1)), (In (Node n1 c1 a2) (p ++ p)), (In (Node n1 c1 a1) p), (In (Node n1 c1 a1) (c2 :: p)), (In (Node n1 c1 a1) (c1 :: p))
(In (Node n1 c1 a1) (a2 :: p)), (In (Node n1 c1 a1) (a1 :: p)), (In (Node n1 c1 a1) (gv1 :: p)), (In (Node n1 c1 a1) (merge p p)), (In (Node n1 c1 a1) (heap_delete_max c2)), (In (Node n1 c1 a1) (heap_delete_max c1)), (In (Node n1 c1 a1) (heap_delete_max a2)), (In (Node n1 c1 a1) (heap_delete_max a1)), (In (Node n1 c1 a1) (heap_delete_max gv1)), (In (Node n1 c1 a1) (join p p c2))
(In (Node n1 c1 a1) (join p p c1)), (In (Node n1 c1 a1) (join p p a2)), (In (Node n1 c1 a1) (join p p a1)), (In (Node n1 c1 a1) (join p p gv1)), (In (Node n1 c1 a1) (insert n1 p)), (In (Node n1 c1 a1) (insert n0 p)), (In (Node n1 c1 a1) (insert n p)), (In (Node n1 c1 a1) (carry p c2)), (In (Node n1 c1 a1) (carry p c1)), (In (Node n1 c1 a1) (carry p a2))
(In (Node n1 c1 a1) (carry p a1)), (In (Node n1 c1 a1) (carry p gv1)), (In (Node n1 c1 a1) (p ++ p)), (In (Node n1 c1 gv1) p), (In (Node n1 c1 gv1) (c2 :: p)), (In (Node n1 c1 gv1) (c1 :: p)), (In (Node n1 c1 gv1) (a2 :: p)), (In (Node n1 c1 gv1) (a1 :: p)), (In (Node n1 c1 gv1) (gv1 :: p)), (In (Node n1 c1 gv1) (merge p p))
(In (Node n1 c1 gv1) (heap_delete_max c2)), (In (Node n1 c1 gv1) (heap_delete_max c1)), (In (Node n1 c1 gv1) (heap_delete_max a2)), (In (Node n1 c1 gv1) (heap_delete_max a1)), (In (Node n1 c1 gv1) (heap_delete_max gv1)), (In (Node n1 c1 gv1) (join p p c2)), (In (Node n1 c1 gv1) (join p p c1)), (In (Node n1 c1 gv1) (join p p a2)), (In (Node n1 c1 gv1) (join p p a1)), (In (Node n1 c1 gv1) (join p p gv1))
(In (Node n1 c1 gv1) (insert n1 p)), (In (Node n1 c1 gv1) (insert n0 p)), (In (Node n1 c1 gv1) (insert n p)), (In (Node n1 c1 gv1) (carry p c2)), (In (Node n1 c1 gv1) (carry p c1)), (In (Node n1 c1 gv1) (carry p a2)), (In (Node n1 c1 gv1) (carry p a1)), (In (Node n1 c1 gv1) (carry p gv1)), (In (Node n1 c1 gv1) (p ++ p)), (In (Node n1 a2 c2) p)
(In (Node n1 a2 c2) (c2 :: p)), (In (Node n1 a2 c2) (c1 :: p)), (In (Node n1 a2 c2) (a2 :: p)), (In (Node n1 a2 c2) (a1 :: p)), (In (Node n1 a2 c2) (gv1 :: p)), (In (Node n1 a2 c2) (merge p p)), (In (Node n1 a2 c2) (heap_delete_max c2)), (In (Node n1 a2 c2) (heap_delete_max c1)), (In (Node n1 a2 c2) (heap_delete_max a2)), (In (Node n1 a2 c2) (heap_delete_max a1))
(In (Node n1 a2 c2) (heap_delete_max gv1)), (In (Node n1 a2 c2) (join p p c2)), (In (Node n1 a2 c2) (join p p c1)), (In (Node n1 a2 c2) (join p p a2)), (In (Node n1 a2 c2) (join p p a1)), (In (Node n1 a2 c2) (join p p gv1)), (In (Node n1 a2 c2) (insert n1 p)), (In (Node n1 a2 c2) (insert n0 p)), (In (Node n1 a2 c2) (insert n p)), (In (Node n1 a2 c2) (carry p c2))
(In (Node n1 a2 c2) (carry p c1)), (In (Node n1 a2 c2) (carry p a2)), (In (Node n1 a2 c2) (carry p a1)), (In (Node n1 a2 c2) (carry p gv1)), (In (Node n1 a2 c2) (p ++ p)), (In (Node n1 a2 c1) p), (In (Node n1 a2 c1) (c2 :: p)), (In (Node n1 a2 c1) (c1 :: p)), (In (Node n1 a2 c1) (a2 :: p)), (In (Node n1 a2 c1) (a1 :: p))
(In (Node n1 a2 c1) (gv1 :: p)), (In (Node n1 a2 c1) (merge p p)), (In (Node n1 a2 c1) (heap_delete_max c2)), (In (Node n1 a2 c1) (heap_delete_max c1)), (In (Node n1 a2 c1) (heap_delete_max a2)), (In (Node n1 a2 c1) (heap_delete_max a1)), (In (Node n1 a2 c1) (heap_delete_max gv1)), (In (Node n1 a2 c1) (join p p c2)), (In (Node n1 a2 c1) (join p p c1)), (In (Node n1 a2 c1) (join p p a2))
(In (Node n1 a2 c1) (join p p a1)), (In (Node n1 a2 c1) (join p p gv1)), (In (Node n1 a2 c1) (insert n1 p)), (In (Node n1 a2 c1) (insert n0 p)), (In (Node n1 a2 c1) (insert n p)), (In (Node n1 a2 c1) (carry p c2)), (In (Node n1 a2 c1) (carry p c1)), (In (Node n1 a2 c1) (carry p a2)), (In (Node n1 a2 c1) (carry p a1)), (In (Node n1 a2 c1) (carry p gv1))
(In (Node n1 a2 c1) (p ++ p)), (In (Node n1 a2 a2) p), (In (Node n1 a2 a2) (c2 :: p)), (In (Node n1 a2 a2) (c1 :: p)), (In (Node n1 a2 a2) (a2 :: p)), (In (Node n1 a2 a2) (a1 :: p)), (In (Node n1 a2 a2) (gv1 :: p)), (In (Node n1 a2 a2) (merge p p)), (In (Node n1 a2 a2) (heap_delete_max c2)), (In (Node n1 a2 a2) (heap_delete_max c1))
(In (Node n1 a2 a2) (heap_delete_max a2)), (In (Node n1 a2 a2) (heap_delete_max a1)), (In (Node n1 a2 a2) (heap_delete_max gv1)), (In (Node n1 a2 a2) (join p p c2)), (In (Node n1 a2 a2) (join p p c1)), (In (Node n1 a2 a2) (join p p a2)), (In (Node n1 a2 a2) (join p p a1)), (In (Node n1 a2 a2) (join p p gv1)), (In (Node n1 a2 a2) (insert n1 p)), (In (Node n1 a2 a2) (insert n0 p))
(In (Node n1 a2 a2) (insert n p)), (In (Node n1 a2 a2) (carry p c2)), (In (Node n1 a2 a2) (carry p c1)), (In (Node n1 a2 a2) (carry p a2)), (In (Node n1 a2 a2) (carry p a1)), (In (Node n1 a2 a2) (carry p gv1)), (In (Node n1 a2 a2) (p ++ p)), (In (Node n1 a2 a1) p), (In (Node n1 a2 a1) (c2 :: p)), (In (Node n1 a2 a1) (c1 :: p))
(In (Node n1 a2 a1) (a2 :: p)), (In (Node n1 a2 a1) (a1 :: p)), (In (Node n1 a2 a1) (gv1 :: p)), (In (Node n1 a2 a1) (merge p p)), (In (Node n1 a2 a1) (heap_delete_max c2)), (In (Node n1 a2 a1) (heap_delete_max c1)), (In (Node n1 a2 a1) (heap_delete_max a2)), (In (Node n1 a2 a1) (heap_delete_max a1)), (In (Node n1 a2 a1) (heap_delete_max gv1)), (In (Node n1 a2 a1) (join p p c2))
(In (Node n1 a2 a1) (join p p c1)), (In (Node n1 a2 a1) (join p p a2)), (In (Node n1 a2 a1) (join p p a1)), (In (Node n1 a2 a1) (join p p gv1)), (In (Node n1 a2 a1) (insert n1 p)), (In (Node n1 a2 a1) (insert n0 p)), (In (Node n1 a2 a1) (insert n p)), (In (Node n1 a2 a1) (carry p c2)), (In (Node n1 a2 a1) (carry p c1)), (In (Node n1 a2 a1) (carry p a2))
(In (Node n1 a2 a1) (carry p a1)), (In (Node n1 a2 a1) (carry p gv1)), (In (Node n1 a2 a1) (p ++ p)), (In (Node n1 a2 gv1) p), (In (Node n1 a2 gv1) (c2 :: p)), (In (Node n1 a2 gv1) (c1 :: p)), (In (Node n1 a2 gv1) (a2 :: p)), (In (Node n1 a2 gv1) (a1 :: p)), (In (Node n1 a2 gv1) (gv1 :: p)), (In (Node n1 a2 gv1) (merge p p))
(In (Node n1 a2 gv1) (heap_delete_max c2)), (In (Node n1 a2 gv1) (heap_delete_max c1)), (In (Node n1 a2 gv1) (heap_delete_max a2)), (In (Node n1 a2 gv1) (heap_delete_max a1)), (In (Node n1 a2 gv1) (heap_delete_max gv1)), (In (Node n1 a2 gv1) (join p p c2)), (In (Node n1 a2 gv1) (join p p c1)), (In (Node n1 a2 gv1) (join p p a2)), (In (Node n1 a2 gv1) (join p p a1)), (In (Node n1 a2 gv1) (join p p gv1))
(In (Node n1 a2 gv1) (insert n1 p)), (In (Node n1 a2 gv1) (insert n0 p)), (In (Node n1 a2 gv1) (insert n p)), (In (Node n1 a2 gv1) (carry p c2)), (In (Node n1 a2 gv1) (carry p c1)), (In (Node n1 a2 gv1) (carry p a2)), (In (Node n1 a2 gv1) (carry p a1)), (In (Node n1 a2 gv1) (carry p gv1)), (In (Node n1 a2 gv1) (p ++ p)), (In (Node n1 a1 c2) p)
(In (Node n1 a1 c2) (c2 :: p)), (In (Node n1 a1 c2) (c1 :: p)), (In (Node n1 a1 c2) (a2 :: p)), (In (Node n1 a1 c2) (a1 :: p)), (In (Node n1 a1 c2) (gv1 :: p)), (In (Node n1 a1 c2) (merge p p)), (In (Node n1 a1 c2) (heap_delete_max c2)), (In (Node n1 a1 c2) (heap_delete_max c1)), (In (Node n1 a1 c2) (heap_delete_max a2)), (In (Node n1 a1 c2) (heap_delete_max a1))
(In (Node n1 a1 c2) (heap_delete_max gv1)), (In (Node n1 a1 c2) (join p p c2)), (In (Node n1 a1 c2) (join p p c1)), (In (Node n1 a1 c2) (join p p a2)), (In (Node n1 a1 c2) (join p p a1)), (In (Node n1 a1 c2) (join p p gv1)), (In (Node n1 a1 c2) (insert n1 p)), (In (Node n1 a1 c2) (insert n0 p)), (In (Node n1 a1 c2) (insert n p)), (In (Node n1 a1 c2) (carry p c2))
(In (Node n1 a1 c2) (carry p c1)), (In (Node n1 a1 c2) (carry p a2)), (In (Node n1 a1 c2) (carry p a1)), (In (Node n1 a1 c2) (carry p gv1)), (In (Node n1 a1 c2) (p ++ p)), (In (Node n1 a1 c1) p), (In (Node n1 a1 c1) (c2 :: p)), (In (Node n1 a1 c1) (c1 :: p)), (In (Node n1 a1 c1) (a2 :: p)), (In (Node n1 a1 c1) (a1 :: p))
(In (Node n1 a1 c1) (gv1 :: p)), (In (Node n1 a1 c1) (merge p p)), (In (Node n1 a1 c1) (heap_delete_max c2)), (In (Node n1 a1 c1) (heap_delete_max c1)), (In (Node n1 a1 c1) (heap_delete_max a2)), (In (Node n1 a1 c1) (heap_delete_max a1)), (In (Node n1 a1 c1) (heap_delete_max gv1)), (In (Node n1 a1 c1) (join p p c2)), (In (Node n1 a1 c1) (join p p c1)), (In (Node n1 a1 c1) (join p p a2))
(In (Node n1 a1 c1) (join p p a1)), (In (Node n1 a1 c1) (join p p gv1)), (In (Node n1 a1 c1) (insert n1 p)), (In (Node n1 a1 c1) (insert n0 p)), (In (Node n1 a1 c1) (insert n p)), (In (Node n1 a1 c1) (carry p c2)), (In (Node n1 a1 c1) (carry p c1)), (In (Node n1 a1 c1) (carry p a2)), (In (Node n1 a1 c1) (carry p a1)), (In (Node n1 a1 c1) (carry p gv1))
(In (Node n1 a1 c1) (p ++ p)), (In (Node n1 a1 a2) p), (In (Node n1 a1 a2) (c2 :: p)), (In (Node n1 a1 a2) (c1 :: p)), (In (Node n1 a1 a2) (a2 :: p)), (In (Node n1 a1 a2) (a1 :: p)), (In (Node n1 a1 a2) (gv1 :: p)), (In (Node n1 a1 a2) (merge p p)), (In (Node n1 a1 a2) (heap_delete_max c2)), (In (Node n1 a1 a2) (heap_delete_max c1))
(In (Node n1 a1 a2) (heap_delete_max a2)), (In (Node n1 a1 a2) (heap_delete_max a1)), (In (Node n1 a1 a2) (heap_delete_max gv1)), (In (Node n1 a1 a2) (join p p c2)), (In (Node n1 a1 a2) (join p p c1)), (In (Node n1 a1 a2) (join p p a2)), (In (Node n1 a1 a2) (join p p a1)), (In (Node n1 a1 a2) (join p p gv1)), (In (Node n1 a1 a2) (insert n1 p)), (In (Node n1 a1 a2) (insert n0 p))
(In (Node n1 a1 a2) (insert n p)), (In (Node n1 a1 a2) (carry p c2)), (In (Node n1 a1 a2) (carry p c1)), (In (Node n1 a1 a2) (carry p a2)), (In (Node n1 a1 a2) (carry p a1)), (In (Node n1 a1 a2) (carry p gv1)), (In (Node n1 a1 a2) (p ++ p)), (In (Node n1 a1 a1) p), (In (Node n1 a1 a1) (c2 :: p)), (In (Node n1 a1 a1) (c1 :: p))
(In (Node n1 a1 a1) (a2 :: p)), (In (Node n1 a1 a1) (a1 :: p)), (In (Node n1 a1 a1) (gv1 :: p)), (In (Node n1 a1 a1) (merge p p)), (In (Node n1 a1 a1) (heap_delete_max c2)), (In (Node n1 a1 a1) (heap_delete_max c1)), (In (Node n1 a1 a1) (heap_delete_max a2)), (In (Node n1 a1 a1) (heap_delete_max a1)), (In (Node n1 a1 a1) (heap_delete_max gv1)), (In (Node n1 a1 a1) (join p p c2))
(In (Node n1 a1 a1) (join p p c1)), (In (Node n1 a1 a1) (join p p a2)), (In (Node n1 a1 a1) (join p p a1)), (In (Node n1 a1 a1) (join p p gv1)), (In (Node n1 a1 a1) (insert n1 p)), (In (Node n1 a1 a1) (insert n0 p)), (In (Node n1 a1 a1) (insert n p)), (In (Node n1 a1 a1) (carry p c2)), (In (Node n1 a1 a1) (carry p c1)), (In (Node n1 a1 a1) (carry p a2))
(In (Node n1 a1 a1) (carry p a1)), (In (Node n1 a1 a1) (carry p gv1)), (In (Node n1 a1 a1) (p ++ p)), (In (Node n1 a1 gv1) p), (In (Node n1 a1 gv1) (c2 :: p)), (In (Node n1 a1 gv1) (c1 :: p)), (In (Node n1 a1 gv1) (a2 :: p)), (In (Node n1 a1 gv1) (a1 :: p)), (In (Node n1 a1 gv1) (gv1 :: p)), (In (Node n1 a1 gv1) (merge p p))
(In (Node n1 a1 gv1) (heap_delete_max c2)), (In (Node n1 a1 gv1) (heap_delete_max c1)), (In (Node n1 a1 gv1) (heap_delete_max a2)), (In (Node n1 a1 gv1) (heap_delete_max a1)), (In (Node n1 a1 gv1) (heap_delete_max gv1)), (In (Node n1 a1 gv1) (join p p c2)), (In (Node n1 a1 gv1) (join p p c1)), (In (Node n1 a1 gv1) (join p p a2)), (In (Node n1 a1 gv1) (join p p a1)), (In (Node n1 a1 gv1) (join p p gv1))
(In (Node n1 a1 gv1) (insert n1 p)), (In (Node n1 a1 gv1) (insert n0 p)), (In (Node n1 a1 gv1) (insert n p)), (In (Node n1 a1 gv1) (carry p c2)), (In (Node n1 a1 gv1) (carry p c1)), (In (Node n1 a1 gv1) (carry p a2)), (In (Node n1 a1 gv1) (carry p a1)), (In (Node n1 a1 gv1) (carry p gv1)), (In (Node n1 a1 gv1) (p ++ p)), (In (Node n1 gv1 c2) p)
(In (Node n1 gv1 c2) (c2 :: p)), (In (Node n1 gv1 c2) (c1 :: p)), (In (Node n1 gv1 c2) (a2 :: p)), (In (Node n1 gv1 c2) (a1 :: p)), (In (Node n1 gv1 c2) (gv1 :: p)), (In (Node n1 gv1 c2) (merge p p)), (In (Node n1 gv1 c2) (heap_delete_max c2)), (In (Node n1 gv1 c2) (heap_delete_max c1)), (In (Node n1 gv1 c2) (heap_delete_max a2)), (In (Node n1 gv1 c2) (heap_delete_max a1))
(In (Node n1 gv1 c2) (heap_delete_max gv1)), (In (Node n1 gv1 c2) (join p p c2)), (In (Node n1 gv1 c2) (join p p c1)), (In (Node n1 gv1 c2) (join p p a2)), (In (Node n1 gv1 c2) (join p p a1)), (In (Node n1 gv1 c2) (join p p gv1)), (In (Node n1 gv1 c2) (insert n1 p)), (In (Node n1 gv1 c2) (insert n0 p)), (In (Node n1 gv1 c2) (insert n p)), (In (Node n1 gv1 c2) (carry p c2))
(In (Node n1 gv1 c2) (carry p c1)), (In (Node n1 gv1 c2) (carry p a2)), (In (Node n1 gv1 c2) (carry p a1)), (In (Node n1 gv1 c2) (carry p gv1)), (In (Node n1 gv1 c2) (p ++ p)), (In (Node n1 gv1 c1) p), (In (Node n1 gv1 c1) (c2 :: p)), (In (Node n1 gv1 c1) (c1 :: p)), (In (Node n1 gv1 c1) (a2 :: p)), (In (Node n1 gv1 c1) (a1 :: p))
(In (Node n1 gv1 c1) (gv1 :: p)), (In (Node n1 gv1 c1) (merge p p)), (In (Node n1 gv1 c1) (heap_delete_max c2)), (In (Node n1 gv1 c1) (heap_delete_max c1)), (In (Node n1 gv1 c1) (heap_delete_max a2)), (In (Node n1 gv1 c1) (heap_delete_max a1)), (In (Node n1 gv1 c1) (heap_delete_max gv1)), (In (Node n1 gv1 c1) (join p p c2)), (In (Node n1 gv1 c1) (join p p c1)), (In (Node n1 gv1 c1) (join p p a2))
(In (Node n1 gv1 c1) (join p p a1)), (In (Node n1 gv1 c1) (join p p gv1)), (In (Node n1 gv1 c1) (insert n1 p)), (In (Node n1 gv1 c1) (insert n0 p)), (In (Node n1 gv1 c1) (insert n p)), (In (Node n1 gv1 c1) (carry p c2)), (In (Node n1 gv1 c1) (carry p c1)), (In (Node n1 gv1 c1) (carry p a2)), (In (Node n1 gv1 c1) (carry p a1)), (In (Node n1 gv1 c1) (carry p gv1))
(In (Node n1 gv1 c1) (p ++ p)), (In (Node n1 gv1 a2) p), (In (Node n1 gv1 a2) (c2 :: p)), (In (Node n1 gv1 a2) (c1 :: p)), (In (Node n1 gv1 a2) (a2 :: p)), (In (Node n1 gv1 a2) (a1 :: p)), (In (Node n1 gv1 a2) (gv1 :: p)), (In (Node n1 gv1 a2) (merge p p)), (In (Node n1 gv1 a2) (heap_delete_max c2)), (In (Node n1 gv1 a2) (heap_delete_max c1))
(In (Node n1 gv1 a2) (heap_delete_max a2)), (In (Node n1 gv1 a2) (heap_delete_max a1)), (In (Node n1 gv1 a2) (heap_delete_max gv1)), (In (Node n1 gv1 a2) (join p p c2)), (In (Node n1 gv1 a2) (join p p c1)), (In (Node n1 gv1 a2) (join p p a2)), (In (Node n1 gv1 a2) (join p p a1)), (In (Node n1 gv1 a2) (join p p gv1)), (In (Node n1 gv1 a2) (insert n1 p)), (In (Node n1 gv1 a2) (insert n0 p))
(In (Node n1 gv1 a2) (insert n p)), (In (Node n1 gv1 a2) (carry p c2)), (In (Node n1 gv1 a2) (carry p c1)), (In (Node n1 gv1 a2) (carry p a2)), (In (Node n1 gv1 a2) (carry p a1)), (In (Node n1 gv1 a2) (carry p gv1)), (In (Node n1 gv1 a2) (p ++ p)), (In (Node n1 gv1 a1) p), (In (Node n1 gv1 a1) (c2 :: p)), (In (Node n1 gv1 a1) (c1 :: p))
(In (Node n1 gv1 a1) (a2 :: p)), (In (Node n1 gv1 a1) (a1 :: p)), (In (Node n1 gv1 a1) (gv1 :: p)), (In (Node n1 gv1 a1) (merge p p)), (In (Node n1 gv1 a1) (heap_delete_max c2)), (In (Node n1 gv1 a1) (heap_delete_max c1)), (In (Node n1 gv1 a1) (heap_delete_max a2)), (In (Node n1 gv1 a1) (heap_delete_max a1)), (In (Node n1 gv1 a1) (heap_delete_max gv1)), (In (Node n1 gv1 a1) (join p p c2))
(In (Node n1 gv1 a1) (join p p c1)), (In (Node n1 gv1 a1) (join p p a2)), (In (Node n1 gv1 a1) (join p p a1)), (In (Node n1 gv1 a1) (join p p gv1)), (In (Node n1 gv1 a1) (insert n1 p)), (In (Node n1 gv1 a1) (insert n0 p)), (In (Node n1 gv1 a1) (insert n p)), (In (Node n1 gv1 a1) (carry p c2)), (In (Node n1 gv1 a1) (carry p c1)), (In (Node n1 gv1 a1) (carry p a2))
(In (Node n1 gv1 a1) (carry p a1)), (In (Node n1 gv1 a1) (carry p gv1)), (In (Node n1 gv1 a1) (p ++ p)), (In (Node n1 gv1 gv1) p), (In (Node n1 gv1 gv1) (c2 :: p)), (In (Node n1 gv1 gv1) (c1 :: p)), (In (Node n1 gv1 gv1) (a2 :: p)), (In (Node n1 gv1 gv1) (a1 :: p)), (In (Node n1 gv1 gv1) (gv1 :: p)), (In (Node n1 gv1 gv1) (merge p p))
(In (Node n1 gv1 gv1) (heap_delete_max c2)), (In (Node n1 gv1 gv1) (heap_delete_max c1)), (In (Node n1 gv1 gv1) (heap_delete_max a2)), (In (Node n1 gv1 gv1) (heap_delete_max a1)), (In (Node n1 gv1 gv1) (heap_delete_max gv1)), (In (Node n1 gv1 gv1) (join p p c2)), (In (Node n1 gv1 gv1) (join p p c1)), (In (Node n1 gv1 gv1) (join p p a2)), (In (Node n1 gv1 gv1) (join p p a1)), (In (Node n1 gv1 gv1) (join p p gv1))
(In (Node n1 gv1 gv1) (insert n1 p)), (In (Node n1 gv1 gv1) (insert n0 p)), (In (Node n1 gv1 gv1) (insert n p)), (In (Node n1 gv1 gv1) (carry p c2)), (In (Node n1 gv1 gv1) (carry p c1)), (In (Node n1 gv1 gv1) (carry p a2)), (In (Node n1 gv1 gv1) (carry p a1)), (In (Node n1 gv1 gv1) (carry p gv1)), (In (Node n1 gv1 gv1) (p ++ p)), (In (Node n0 c2 c2) p)
(In (Node n0 c2 c2) (c2 :: p)), (In (Node n0 c2 c2) (c1 :: p)), (In (Node n0 c2 c2) (a2 :: p)), (In (Node n0 c2 c2) (a1 :: p)), (In (Node n0 c2 c2) (gv1 :: p)), (In (Node n0 c2 c2) (merge p p)), (In (Node n0 c2 c2) (heap_delete_max c2)), (In (Node n0 c2 c2) (heap_delete_max c1)), (In (Node n0 c2 c2) (heap_delete_max a2)), (In (Node n0 c2 c2) (heap_delete_max a1))
(In (Node n0 c2 c2) (heap_delete_max gv1)), (In (Node n0 c2 c2) (join p p c2)), (In (Node n0 c2 c2) (join p p c1)), (In (Node n0 c2 c2) (join p p a2)), (In (Node n0 c2 c2) (join p p a1)), (In (Node n0 c2 c2) (join p p gv1)), (In (Node n0 c2 c2) (insert n1 p)), (In (Node n0 c2 c2) (insert n0 p)), (In (Node n0 c2 c2) (insert n p)), (In (Node n0 c2 c2) (carry p c2))
(In (Node n0 c2 c2) (carry p c1)), (In (Node n0 c2 c2) (carry p a2)), (In (Node n0 c2 c2) (carry p a1)), (In (Node n0 c2 c2) (carry p gv1)), (In (Node n0 c2 c2) (p ++ p)), (In (Node n0 c2 c1) p), (In (Node n0 c2 c1) (c2 :: p)), (In (Node n0 c2 c1) (c1 :: p)), (In (Node n0 c2 c1) (a2 :: p)), (In (Node n0 c2 c1) (a1 :: p))
(In (Node n0 c2 c1) (gv1 :: p)), (In (Node n0 c2 c1) (merge p p)), (In (Node n0 c2 c1) (heap_delete_max c2)), (In (Node n0 c2 c1) (heap_delete_max c1)), (In (Node n0 c2 c1) (heap_delete_max a2)), (In (Node n0 c2 c1) (heap_delete_max a1)), (In (Node n0 c2 c1) (heap_delete_max gv1)), (In (Node n0 c2 c1) (join p p c2)), (In (Node n0 c2 c1) (join p p c1)), (In (Node n0 c2 c1) (join p p a2))
(In (Node n0 c2 c1) (join p p a1)), (In (Node n0 c2 c1) (join p p gv1)), (In (Node n0 c2 c1) (insert n1 p)), (In (Node n0 c2 c1) (insert n0 p)), (In (Node n0 c2 c1) (insert n p)), (In (Node n0 c2 c1) (carry p c2)), (In (Node n0 c2 c1) (carry p c1)), (In (Node n0 c2 c1) (carry p a2)), (In (Node n0 c2 c1) (carry p a1)), (In (Node n0 c2 c1) (carry p gv1))
(In (Node n0 c2 c1) (p ++ p)), (In (Node n0 c2 a2) p), (In (Node n0 c2 a2) (c2 :: p)), (In (Node n0 c2 a2) (c1 :: p)), (In (Node n0 c2 a2) (a2 :: p)), (In (Node n0 c2 a2) (a1 :: p)), (In (Node n0 c2 a2) (gv1 :: p)), (In (Node n0 c2 a2) (merge p p)), (In (Node n0 c2 a2) (heap_delete_max c2)), (In (Node n0 c2 a2) (heap_delete_max c1))
(In (Node n0 c2 a2) (heap_delete_max a2)), (In (Node n0 c2 a2) (heap_delete_max a1)), (In (Node n0 c2 a2) (heap_delete_max gv1)), (In (Node n0 c2 a2) (join p p c2)), (In (Node n0 c2 a2) (join p p c1)), (In (Node n0 c2 a2) (join p p a2)), (In (Node n0 c2 a2) (join p p a1)), (In (Node n0 c2 a2) (join p p gv1)), (In (Node n0 c2 a2) (insert n1 p)), (In (Node n0 c2 a2) (insert n0 p))
(In (Node n0 c2 a2) (insert n p)), (In (Node n0 c2 a2) (carry p c2)), (In (Node n0 c2 a2) (carry p c1)), (In (Node n0 c2 a2) (carry p a2)), (In (Node n0 c2 a2) (carry p a1)), (In (Node n0 c2 a2) (carry p gv1)), (In (Node n0 c2 a2) (p ++ p)), (In (Node n0 c2 a1) p), (In (Node n0 c2 a1) (c2 :: p)), (In (Node n0 c2 a1) (c1 :: p))
(In (Node n0 c2 a1) (a2 :: p)), (In (Node n0 c2 a1) (a1 :: p)), (In (Node n0 c2 a1) (gv1 :: p)), (In (Node n0 c2 a1) (merge p p)), (In (Node n0 c2 a1) (heap_delete_max c2)), (In (Node n0 c2 a1) (heap_delete_max c1)), (In (Node n0 c2 a1) (heap_delete_max a2)), (In (Node n0 c2 a1) (heap_delete_max a1)), (In (Node n0 c2 a1) (heap_delete_max gv1)), (In (Node n0 c2 a1) (join p p c2))
(In (Node n0 c2 a1) (join p p c1)), (In (Node n0 c2 a1) (join p p a2)), (In (Node n0 c2 a1) (join p p a1)), (In (Node n0 c2 a1) (join p p gv1)), (In (Node n0 c2 a1) (insert n1 p)), (In (Node n0 c2 a1) (insert n0 p)), (In (Node n0 c2 a1) (insert n p)), (In (Node n0 c2 a1) (carry p c2)), (In (Node n0 c2 a1) (carry p c1)), (In (Node n0 c2 a1) (carry p a2))
(In (Node n0 c2 a1) (carry p a1)), (In (Node n0 c2 a1) (carry p gv1)), (In (Node n0 c2 a1) (p ++ p)), (In (Node n0 c2 gv1) p), (In (Node n0 c2 gv1) (c2 :: p)), (In (Node n0 c2 gv1) (c1 :: p)), (In (Node n0 c2 gv1) (a2 :: p)), (In (Node n0 c2 gv1) (a1 :: p)), (In (Node n0 c2 gv1) (gv1 :: p)), (In (Node n0 c2 gv1) (merge p p))
(In (Node n0 c2 gv1) (heap_delete_max c2)), (In (Node n0 c2 gv1) (heap_delete_max c1)), (In (Node n0 c2 gv1) (heap_delete_max a2)), (In (Node n0 c2 gv1) (heap_delete_max a1)), (In (Node n0 c2 gv1) (heap_delete_max gv1)), (In (Node n0 c2 gv1) (join p p c2)), (In (Node n0 c2 gv1) (join p p c1)), (In (Node n0 c2 gv1) (join p p a2)), (In (Node n0 c2 gv1) (join p p a1)), (In (Node n0 c2 gv1) (join p p gv1))
(In (Node n0 c2 gv1) (insert n1 p)), (In (Node n0 c2 gv1) (insert n0 p)), (In (Node n0 c2 gv1) (insert n p)), (In (Node n0 c2 gv1) (carry p c2)), (In (Node n0 c2 gv1) (carry p c1)), (In (Node n0 c2 gv1) (carry p a2)), (In (Node n0 c2 gv1) (carry p a1)), (In (Node n0 c2 gv1) (carry p gv1)), (In (Node n0 c2 gv1) (p ++ p)), (In (Node n0 c1 c2) p)
(In (Node n0 c1 c2) (c2 :: p)), (In (Node n0 c1 c2) (c1 :: p)), (In (Node n0 c1 c2) (a2 :: p)), (In (Node n0 c1 c2) (a1 :: p)), (In (Node n0 c1 c2) (gv1 :: p)), (In (Node n0 c1 c2) (merge p p)), (In (Node n0 c1 c2) (heap_delete_max c2)), (In (Node n0 c1 c2) (heap_delete_max c1)), (In (Node n0 c1 c2) (heap_delete_max a2)), (In (Node n0 c1 c2) (heap_delete_max a1))
(In (Node n0 c1 c2) (heap_delete_max gv1)), (In (Node n0 c1 c2) (join p p c2)), (In (Node n0 c1 c2) (join p p c1)), (In (Node n0 c1 c2) (join p p a2)), (In (Node n0 c1 c2) (join p p a1)), (In (Node n0 c1 c2) (join p p gv1)), (In (Node n0 c1 c2) (insert n1 p)), (In (Node n0 c1 c2) (insert n0 p)), (In (Node n0 c1 c2) (insert n p)), (In (Node n0 c1 c2) (carry p c2))
(In (Node n0 c1 c2) (carry p c1)), (In (Node n0 c1 c2) (carry p a2)), (In (Node n0 c1 c2) (carry p a1)), (In (Node n0 c1 c2) (carry p gv1)), (In (Node n0 c1 c2) (p ++ p)), (In (Node n0 c1 c1) p), (In (Node n0 c1 c1) (c2 :: p)), (In (Node n0 c1 c1) (c1 :: p)), (In (Node n0 c1 c1) (a2 :: p)), (In (Node n0 c1 c1) (a1 :: p))
(In (Node n0 c1 c1) (gv1 :: p)), (In (Node n0 c1 c1) (merge p p)), (In (Node n0 c1 c1) (heap_delete_max c2)), (In (Node n0 c1 c1) (heap_delete_max c1)), (In (Node n0 c1 c1) (heap_delete_max a2)), (In (Node n0 c1 c1) (heap_delete_max a1)), (In (Node n0 c1 c1) (heap_delete_max gv1)), (In (Node n0 c1 c1) (join p p c2)), (In (Node n0 c1 c1) (join p p c1)), (In (Node n0 c1 c1) (join p p a2))
(In (Node n0 c1 c1) (join p p a1)), (In (Node n0 c1 c1) (join p p gv1)), (In (Node n0 c1 c1) (insert n1 p)), (In (Node n0 c1 c1) (insert n0 p)), (In (Node n0 c1 c1) (insert n p)), (In (Node n0 c1 c1) (carry p c2)), (In (Node n0 c1 c1) (carry p c1)), (In (Node n0 c1 c1) (carry p a2)), (In (Node n0 c1 c1) (carry p a1)), (In (Node n0 c1 c1) (carry p gv1))
(In (Node n0 c1 c1) (p ++ p)), (In (Node n0 c1 a2) p), (In (Node n0 c1 a2) (c2 :: p)), (In (Node n0 c1 a2) (c1 :: p)), (In (Node n0 c1 a2) (a2 :: p)), (In (Node n0 c1 a2) (a1 :: p)), (In (Node n0 c1 a2) (gv1 :: p)), (In (Node n0 c1 a2) (merge p p)), (In (Node n0 c1 a2) (heap_delete_max c2)), (In (Node n0 c1 a2) (heap_delete_max c1))
(In (Node n0 c1 a2) (heap_delete_max a2)), (In (Node n0 c1 a2) (heap_delete_max a1)), (In (Node n0 c1 a2) (heap_delete_max gv1)), (In (Node n0 c1 a2) (join p p c2)), (In (Node n0 c1 a2) (join p p c1)), (In (Node n0 c1 a2) (join p p a2)), (In (Node n0 c1 a2) (join p p a1)), (In (Node n0 c1 a2) (join p p gv1)), (In (Node n0 c1 a2) (insert n1 p)), (In (Node n0 c1 a2) (insert n0 p))
(In (Node n0 c1 a2) (insert n p)), (In (Node n0 c1 a2) (carry p c2)), (In (Node n0 c1 a2) (carry p c1)), (In (Node n0 c1 a2) (carry p a2)), (In (Node n0 c1 a2) (carry p a1)), (In (Node n0 c1 a2) (carry p gv1)), (In (Node n0 c1 a2) (p ++ p)), (In (Node n0 c1 a1) p), (In (Node n0 c1 a1) (c2 :: p)), (In (Node n0 c1 a1) (c1 :: p))
(In (Node n0 c1 a1) (a2 :: p)), (In (Node n0 c1 a1) (a1 :: p)), (In (Node n0 c1 a1) (gv1 :: p)), (In (Node n0 c1 a1) (merge p p)), (In (Node n0 c1 a1) (heap_delete_max c2)), (In (Node n0 c1 a1) (heap_delete_max c1)), (In (Node n0 c1 a1) (heap_delete_max a2)), (In (Node n0 c1 a1) (heap_delete_max a1)), (In (Node n0 c1 a1) (heap_delete_max gv1)), (In (Node n0 c1 a1) (join p p c2))
(In (Node n0 c1 a1) (join p p c1)), (In (Node n0 c1 a1) (join p p a2)), (In (Node n0 c1 a1) (join p p a1)), (In (Node n0 c1 a1) (join p p gv1)), (In (Node n0 c1 a1) (insert n1 p)), (In (Node n0 c1 a1) (insert n0 p)), (In (Node n0 c1 a1) (insert n p)), (In (Node n0 c1 a1) (carry p c2)), (In (Node n0 c1 a1) (carry p c1)), (In (Node n0 c1 a1) (carry p a2))
(In (Node n0 c1 a1) (carry p a1)), (In (Node n0 c1 a1) (carry p gv1)), (In (Node n0 c1 a1) (p ++ p)), (In (Node n0 c1 gv1) p), (In (Node n0 c1 gv1) (c2 :: p)), (In (Node n0 c1 gv1) (c1 :: p)), (In (Node n0 c1 gv1) (a2 :: p)), (In (Node n0 c1 gv1) (a1 :: p)), (In (Node n0 c1 gv1) (gv1 :: p)), (In (Node n0 c1 gv1) (merge p p))
(In (Node n0 c1 gv1) (heap_delete_max c2)), (In (Node n0 c1 gv1) (heap_delete_max c1)), (In (Node n0 c1 gv1) (heap_delete_max a2)), (In (Node n0 c1 gv1) (heap_delete_max a1)), (In (Node n0 c1 gv1) (heap_delete_max gv1)), (In (Node n0 c1 gv1) (join p p c2)), (In (Node n0 c1 gv1) (join p p c1)), (In (Node n0 c1 gv1) (join p p a2)), (In (Node n0 c1 gv1) (join p p a1)), (In (Node n0 c1 gv1) (join p p gv1))
(In (Node n0 c1 gv1) (insert n1 p)), (In (Node n0 c1 gv1) (insert n0 p)), (In (Node n0 c1 gv1) (insert n p)), (In (Node n0 c1 gv1) (carry p c2)), (In (Node n0 c1 gv1) (carry p c1)), (In (Node n0 c1 gv1) (carry p a2)), (In (Node n0 c1 gv1) (carry p a1)), (In (Node n0 c1 gv1) (carry p gv1)), (In (Node n0 c1 gv1) (p ++ p)), (In (Node n0 a2 c2) p)
(In (Node n0 a2 c2) (c2 :: p)), (In (Node n0 a2 c2) (c1 :: p)), (In (Node n0 a2 c2) (a2 :: p)), (In (Node n0 a2 c2) (a1 :: p)), (In (Node n0 a2 c2) (gv1 :: p)), (In (Node n0 a2 c2) (merge p p)), (In (Node n0 a2 c2) (heap_delete_max c2)), (In (Node n0 a2 c2) (heap_delete_max c1)), (In (Node n0 a2 c2) (heap_delete_max a2)), (In (Node n0 a2 c2) (heap_delete_max a1))
(In (Node n0 a2 c2) (heap_delete_max gv1)), (In (Node n0 a2 c2) (join p p c2)), (In (Node n0 a2 c2) (join p p c1)), (In (Node n0 a2 c2) (join p p a2)), (In (Node n0 a2 c2) (join p p a1)), (In (Node n0 a2 c2) (join p p gv1)), (In (Node n0 a2 c2) (insert n1 p)), (In (Node n0 a2 c2) (insert n0 p)), (In (Node n0 a2 c2) (insert n p)), (In (Node n0 a2 c2) (carry p c2))
(In (Node n0 a2 c2) (carry p c1)), (In (Node n0 a2 c2) (carry p a2)), (In (Node n0 a2 c2) (carry p a1)), (In (Node n0 a2 c2) (carry p gv1)), (In (Node n0 a2 c2) (p ++ p)), (In (Node n0 a2 c1) p), (In (Node n0 a2 c1) (c2 :: p)), (In (Node n0 a2 c1) (c1 :: p)), (In (Node n0 a2 c1) (a2 :: p)), (In (Node n0 a2 c1) (a1 :: p))
(In (Node n0 a2 c1) (gv1 :: p)), (In (Node n0 a2 c1) (merge p p)), (In (Node n0 a2 c1) (heap_delete_max c2)), (In (Node n0 a2 c1) (heap_delete_max c1)), (In (Node n0 a2 c1) (heap_delete_max a2)), (In (Node n0 a2 c1) (heap_delete_max a1)), (In (Node n0 a2 c1) (heap_delete_max gv1)), (In (Node n0 a2 c1) (join p p c2)), (In (Node n0 a2 c1) (join p p c1)), (In (Node n0 a2 c1) (join p p a2))
(In (Node n0 a2 c1) (join p p a1)), (In (Node n0 a2 c1) (join p p gv1)), (In (Node n0 a2 c1) (insert n1 p)), (In (Node n0 a2 c1) (insert n0 p)), (In (Node n0 a2 c1) (insert n p)), (In (Node n0 a2 c1) (carry p c2)), (In (Node n0 a2 c1) (carry p c1)), (In (Node n0 a2 c1) (carry p a2)), (In (Node n0 a2 c1) (carry p a1)), (In (Node n0 a2 c1) (carry p gv1))
(In (Node n0 a2 c1) (p ++ p)), (In (Node n0 a2 a2) p), (In (Node n0 a2 a2) (c2 :: p)), (In (Node n0 a2 a2) (c1 :: p)), (In (Node n0 a2 a2) (a2 :: p)), (In (Node n0 a2 a2) (a1 :: p)), (In (Node n0 a2 a2) (gv1 :: p)), (In (Node n0 a2 a2) (merge p p)), (In (Node n0 a2 a2) (heap_delete_max c2)), (In (Node n0 a2 a2) (heap_delete_max c1))
(In (Node n0 a2 a2) (heap_delete_max a2)), (In (Node n0 a2 a2) (heap_delete_max a1)), (In (Node n0 a2 a2) (heap_delete_max gv1)), (In (Node n0 a2 a2) (join p p c2)), (In (Node n0 a2 a2) (join p p c1)), (In (Node n0 a2 a2) (join p p a2)), (In (Node n0 a2 a2) (join p p a1)), (In (Node n0 a2 a2) (join p p gv1)), (In (Node n0 a2 a2) (insert n1 p)), (In (Node n0 a2 a2) (insert n0 p))
(In (Node n0 a2 a2) (insert n p)), (In (Node n0 a2 a2) (carry p c2)), (In (Node n0 a2 a2) (carry p c1)), (In (Node n0 a2 a2) (carry p a2)), (In (Node n0 a2 a2) (carry p a1)), (In (Node n0 a2 a2) (carry p gv1)), (In (Node n0 a2 a2) (p ++ p)), (In (Node n0 a2 a1) p), (In (Node n0 a2 a1) (c2 :: p)), (In (Node n0 a2 a1) (c1 :: p))
(In (Node n0 a2 a1) (a2 :: p)), (In (Node n0 a2 a1) (a1 :: p)), (In (Node n0 a2 a1) (gv1 :: p)), (In (Node n0 a2 a1) (merge p p)), (In (Node n0 a2 a1) (heap_delete_max c2)), (In (Node n0 a2 a1) (heap_delete_max c1)), (In (Node n0 a2 a1) (heap_delete_max a2)), (In (Node n0 a2 a1) (heap_delete_max a1)), (In (Node n0 a2 a1) (heap_delete_max gv1)), (In (Node n0 a2 a1) (join p p c2))
(In (Node n0 a2 a1) (join p p c1)), (In (Node n0 a2 a1) (join p p a2)), (In (Node n0 a2 a1) (join p p a1)), (In (Node n0 a2 a1) (join p p gv1)), (In (Node n0 a2 a1) (insert n1 p)), (In (Node n0 a2 a1) (insert n0 p)), (In (Node n0 a2 a1) (insert n p)), (In (Node n0 a2 a1) (carry p c2)), (In (Node n0 a2 a1) (carry p c1)), (In (Node n0 a2 a1) (carry p a2))
(In (Node n0 a2 a1) (carry p a1)), (In (Node n0 a2 a1) (carry p gv1)), (In (Node n0 a2 a1) (p ++ p)), (In (Node n0 a2 gv1) p), (In (Node n0 a2 gv1) (c2 :: p)), (In (Node n0 a2 gv1) (c1 :: p)), (In (Node n0 a2 gv1) (a2 :: p)), (In (Node n0 a2 gv1) (a1 :: p)), (In (Node n0 a2 gv1) (gv1 :: p)), (In (Node n0 a2 gv1) (merge p p))
(In (Node n0 a2 gv1) (heap_delete_max c2)), (In (Node n0 a2 gv1) (heap_delete_max c1)), (In (Node n0 a2 gv1) (heap_delete_max a2)), (In (Node n0 a2 gv1) (heap_delete_max a1)), (In (Node n0 a2 gv1) (heap_delete_max gv1)), (In (Node n0 a2 gv1) (join p p c2)), (In (Node n0 a2 gv1) (join p p c1)), (In (Node n0 a2 gv1) (join p p a2)), (In (Node n0 a2 gv1) (join p p a1)), (In (Node n0 a2 gv1) (join p p gv1))
(In (Node n0 a2 gv1) (insert n1 p)), (In (Node n0 a2 gv1) (insert n0 p)), (In (Node n0 a2 gv1) (insert n p)), (In (Node n0 a2 gv1) (carry p c2)), (In (Node n0 a2 gv1) (carry p c1)), (In (Node n0 a2 gv1) (carry p a2)), (In (Node n0 a2 gv1) (carry p a1)), (In (Node n0 a2 gv1) (carry p gv1)), (In (Node n0 a2 gv1) (p ++ p)), (In (Node n0 a1 c2) p)
(In (Node n0 a1 c2) (c2 :: p)), (In (Node n0 a1 c2) (c1 :: p)), (In (Node n0 a1 c2) (a2 :: p)), (In (Node n0 a1 c2) (a1 :: p)), (In (Node n0 a1 c2) (gv1 :: p)), (In (Node n0 a1 c2) (merge p p)), (In (Node n0 a1 c2) (heap_delete_max c2)), (In (Node n0 a1 c2) (heap_delete_max c1)), (In (Node n0 a1 c2) (heap_delete_max a2)), (In (Node n0 a1 c2) (heap_delete_max a1))
(In (Node n0 a1 c2) (heap_delete_max gv1)), (In (Node n0 a1 c2) (join p p c2)), (In (Node n0 a1 c2) (join p p c1)), (In (Node n0 a1 c2) (join p p a2)), (In (Node n0 a1 c2) (join p p a1)), (In (Node n0 a1 c2) (join p p gv1)), (In (Node n0 a1 c2) (insert n1 p)), (In (Node n0 a1 c2) (insert n0 p)), (In (Node n0 a1 c2) (insert n p)), (In (Node n0 a1 c2) (carry p c2))
(In (Node n0 a1 c2) (carry p c1)), (In (Node n0 a1 c2) (carry p a2)), (In (Node n0 a1 c2) (carry p a1)), (In (Node n0 a1 c2) (carry p gv1)), (In (Node n0 a1 c2) (p ++ p)), (In (Node n0 a1 c1) p), (In (Node n0 a1 c1) (c2 :: p)), (In (Node n0 a1 c1) (c1 :: p)), (In (Node n0 a1 c1) (a2 :: p)), (In (Node n0 a1 c1) (a1 :: p))
(In (Node n0 a1 c1) (gv1 :: p)), (In (Node n0 a1 c1) (merge p p)), (In (Node n0 a1 c1) (heap_delete_max c2)), (In (Node n0 a1 c1) (heap_delete_max c1)), (In (Node n0 a1 c1) (heap_delete_max a2)), (In (Node n0 a1 c1) (heap_delete_max a1)), (In (Node n0 a1 c1) (heap_delete_max gv1)), (In (Node n0 a1 c1) (join p p c2)), (In (Node n0 a1 c1) (join p p c1)), (In (Node n0 a1 c1) (join p p a2))
(In (Node n0 a1 c1) (join p p a1)), (In (Node n0 a1 c1) (join p p gv1)), (In (Node n0 a1 c1) (insert n1 p)), (In (Node n0 a1 c1) (insert n0 p)), (In (Node n0 a1 c1) (insert n p)), (In (Node n0 a1 c1) (carry p c2)), (In (Node n0 a1 c1) (carry p c1)), (In (Node n0 a1 c1) (carry p a2)), (In (Node n0 a1 c1) (carry p a1)), (In (Node n0 a1 c1) (carry p gv1))
(In (Node n0 a1 c1) (p ++ p)), (In (Node n0 a1 a2) p), (In (Node n0 a1 a2) (c2 :: p)), (In (Node n0 a1 a2) (c1 :: p)), (In (Node n0 a1 a2) (a2 :: p)), (In (Node n0 a1 a2) (a1 :: p)), (In (Node n0 a1 a2) (gv1 :: p)), (In (Node n0 a1 a2) (merge p p)), (In (Node n0 a1 a2) (heap_delete_max c2)), (In (Node n0 a1 a2) (heap_delete_max c1))
(In (Node n0 a1 a2) (heap_delete_max a2)), (In (Node n0 a1 a2) (heap_delete_max a1)), (In (Node n0 a1 a2) (heap_delete_max gv1)), (In (Node n0 a1 a2) (join p p c2)), (In (Node n0 a1 a2) (join p p c1)), (In (Node n0 a1 a2) (join p p a2)), (In (Node n0 a1 a2) (join p p a1)), (In (Node n0 a1 a2) (join p p gv1)), (In (Node n0 a1 a2) (insert n1 p)), (In (Node n0 a1 a2) (insert n0 p))
(In (Node n0 a1 a2) (insert n p)), (In (Node n0 a1 a2) (carry p c2)), (In (Node n0 a1 a2) (carry p c1)), (In (Node n0 a1 a2) (carry p a2)), (In (Node n0 a1 a2) (carry p a1)), (In (Node n0 a1 a2) (carry p gv1)), (In (Node n0 a1 a2) (p ++ p)), (In (Node n0 a1 a1) p), (In (Node n0 a1 a1) (c2 :: p)), (In (Node n0 a1 a1) (c1 :: p))
(In (Node n0 a1 a1) (a2 :: p)), (In (Node n0 a1 a1) (a1 :: p)), (In (Node n0 a1 a1) (gv1 :: p)), (In (Node n0 a1 a1) (merge p p)), (In (Node n0 a1 a1) (heap_delete_max c2)), (In (Node n0 a1 a1) (heap_delete_max c1)), (In (Node n0 a1 a1) (heap_delete_max a2)), (In (Node n0 a1 a1) (heap_delete_max a1)), (In (Node n0 a1 a1) (heap_delete_max gv1)), (In (Node n0 a1 a1) (join p p c2))
(In (Node n0 a1 a1) (join p p c1)), (In (Node n0 a1 a1) (join p p a2)), (In (Node n0 a1 a1) (join p p a1)), (In (Node n0 a1 a1) (join p p gv1)), (In (Node n0 a1 a1) (insert n1 p)), (In (Node n0 a1 a1) (insert n0 p)), (In (Node n0 a1 a1) (insert n p)), (In (Node n0 a1 a1) (carry p c2)), (In (Node n0 a1 a1) (carry p c1)), (In (Node n0 a1 a1) (carry p a2))
(In (Node n0 a1 a1) (carry p a1)), (In (Node n0 a1 a1) (carry p gv1)), (In (Node n0 a1 a1) (p ++ p)), (In (Node n0 a1 gv1) p), (In (Node n0 a1 gv1) (c2 :: p)), (In (Node n0 a1 gv1) (c1 :: p)), (In (Node n0 a1 gv1) (a2 :: p)), (In (Node n0 a1 gv1) (a1 :: p)), (In (Node n0 a1 gv1) (gv1 :: p)), (In (Node n0 a1 gv1) (merge p p))
(In (Node n0 a1 gv1) (heap_delete_max c2)), (In (Node n0 a1 gv1) (heap_delete_max c1)), (In (Node n0 a1 gv1) (heap_delete_max a2)), (In (Node n0 a1 gv1) (heap_delete_max a1)), (In (Node n0 a1 gv1) (heap_delete_max gv1)), (In (Node n0 a1 gv1) (join p p c2)), (In (Node n0 a1 gv1) (join p p c1)), (In (Node n0 a1 gv1) (join p p a2)), (In (Node n0 a1 gv1) (join p p a1)), (In (Node n0 a1 gv1) (join p p gv1))
(In (Node n0 a1 gv1) (insert n1 p)), (In (Node n0 a1 gv1) (insert n0 p)), (In (Node n0 a1 gv1) (insert n p)), (In (Node n0 a1 gv1) (carry p c2)), (In (Node n0 a1 gv1) (carry p c1)), (In (Node n0 a1 gv1) (carry p a2)), (In (Node n0 a1 gv1) (carry p a1)), (In (Node n0 a1 gv1) (carry p gv1)), (In (Node n0 a1 gv1) (p ++ p)), (In (Node n0 gv1 c2) p)
(In (Node n0 gv1 c2) (c2 :: p)), (In (Node n0 gv1 c2) (c1 :: p)), (In (Node n0 gv1 c2) (a2 :: p)), (In (Node n0 gv1 c2) (a1 :: p)), (In (Node n0 gv1 c2) (gv1 :: p)), (In (Node n0 gv1 c2) (merge p p)), (In (Node n0 gv1 c2) (heap_delete_max c2)), (In (Node n0 gv1 c2) (heap_delete_max c1)), (In (Node n0 gv1 c2) (heap_delete_max a2)), (In (Node n0 gv1 c2) (heap_delete_max a1))
(In (Node n0 gv1 c2) (heap_delete_max gv1)), (In (Node n0 gv1 c2) (join p p c2)), (In (Node n0 gv1 c2) (join p p c1)), (In (Node n0 gv1 c2) (join p p a2)), (In (Node n0 gv1 c2) (join p p a1)), (In (Node n0 gv1 c2) (join p p gv1)), (In (Node n0 gv1 c2) (insert n1 p)), (In (Node n0 gv1 c2) (insert n0 p)), (In (Node n0 gv1 c2) (insert n p)), (In (Node n0 gv1 c2) (carry p c2))
(In (Node n0 gv1 c2) (carry p c1)), (In (Node n0 gv1 c2) (carry p a2)), (In (Node n0 gv1 c2) (carry p a1)), (In (Node n0 gv1 c2) (carry p gv1)), (In (Node n0 gv1 c2) (p ++ p)), (In (Node n0 gv1 c1) p), (In (Node n0 gv1 c1) (c2 :: p)), (In (Node n0 gv1 c1) (c1 :: p)), (In (Node n0 gv1 c1) (a2 :: p)), (In (Node n0 gv1 c1) (a1 :: p))
(In (Node n0 gv1 c1) (gv1 :: p)), (In (Node n0 gv1 c1) (merge p p)), (In (Node n0 gv1 c1) (heap_delete_max c2)), (In (Node n0 gv1 c1) (heap_delete_max c1)), (In (Node n0 gv1 c1) (heap_delete_max a2)), (In (Node n0 gv1 c1) (heap_delete_max a1)), (In (Node n0 gv1 c1) (heap_delete_max gv1)), (In (Node n0 gv1 c1) (join p p c2)), (In (Node n0 gv1 c1) (join p p c1)), (In (Node n0 gv1 c1) (join p p a2))
(In (Node n0 gv1 c1) (join p p a1)), (In (Node n0 gv1 c1) (join p p gv1)), (In (Node n0 gv1 c1) (insert n1 p)), (In (Node n0 gv1 c1) (insert n0 p)), (In (Node n0 gv1 c1) (insert n p)), (In (Node n0 gv1 c1) (carry p c2)), (In (Node n0 gv1 c1) (carry p c1)), (In (Node n0 gv1 c1) (carry p a2)), (In (Node n0 gv1 c1) (carry p a1)), (In (Node n0 gv1 c1) (carry p gv1))
(In (Node n0 gv1 c1) (p ++ p)), (In (Node n0 gv1 a2) p), (In (Node n0 gv1 a2) (c2 :: p)), (In (Node n0 gv1 a2) (c1 :: p)), (In (Node n0 gv1 a2) (a2 :: p)), (In (Node n0 gv1 a2) (a1 :: p)), (In (Node n0 gv1 a2) (gv1 :: p)), (In (Node n0 gv1 a2) (merge p p)), (In (Node n0 gv1 a2) (heap_delete_max c2)), (In (Node n0 gv1 a2) (heap_delete_max c1))
(In (Node n0 gv1 a2) (heap_delete_max a2)), (In (Node n0 gv1 a2) (heap_delete_max a1)), (In (Node n0 gv1 a2) (heap_delete_max gv1)), (In (Node n0 gv1 a2) (join p p c2)), (In (Node n0 gv1 a2) (join p p c1)), (In (Node n0 gv1 a2) (join p p a2)), (In (Node n0 gv1 a2) (join p p a1)), (In (Node n0 gv1 a2) (join p p gv1)), (In (Node n0 gv1 a2) (insert n1 p)), (In (Node n0 gv1 a2) (insert n0 p))
(In (Node n0 gv1 a2) (insert n p)), (In (Node n0 gv1 a2) (carry p c2)), (In (Node n0 gv1 a2) (carry p c1)), (In (Node n0 gv1 a2) (carry p a2)), (In (Node n0 gv1 a2) (carry p a1)), (In (Node n0 gv1 a2) (carry p gv1)), (In (Node n0 gv1 a2) (p ++ p)), (In (Node n0 gv1 a1) p), (In (Node n0 gv1 a1) (c2 :: p)), (In (Node n0 gv1 a1) (c1 :: p))
(In (Node n0 gv1 a1) (a2 :: p)), (In (Node n0 gv1 a1) (a1 :: p)), (In (Node n0 gv1 a1) (gv1 :: p)), (In (Node n0 gv1 a1) (merge p p)), (In (Node n0 gv1 a1) (heap_delete_max c2)), (In (Node n0 gv1 a1) (heap_delete_max c1)), (In (Node n0 gv1 a1) (heap_delete_max a2)), (In (Node n0 gv1 a1) (heap_delete_max a1)), (In (Node n0 gv1 a1) (heap_delete_max gv1)), (In (Node n0 gv1 a1) (join p p c2))
(In (Node n0 gv1 a1) (join p p c1)), (In (Node n0 gv1 a1) (join p p a2)), (In (Node n0 gv1 a1) (join p p a1)), (In (Node n0 gv1 a1) (join p p gv1)), (In (Node n0 gv1 a1) (insert n1 p)), (In (Node n0 gv1 a1) (insert n0 p)), (In (Node n0 gv1 a1) (insert n p)), (In (Node n0 gv1 a1) (carry p c2)), (In (Node n0 gv1 a1) (carry p c1)), (In (Node n0 gv1 a1) (carry p a2))
(In (Node n0 gv1 a1) (carry p a1)), (In (Node n0 gv1 a1) (carry p gv1)), (In (Node n0 gv1 a1) (p ++ p)), (In (Node n0 gv1 gv1) p), (In (Node n0 gv1 gv1) (c2 :: p)), (In (Node n0 gv1 gv1) (c1 :: p)), (In (Node n0 gv1 gv1) (a2 :: p)), (In (Node n0 gv1 gv1) (a1 :: p)), (In (Node n0 gv1 gv1) (gv1 :: p)), (In (Node n0 gv1 gv1) (merge p p))
(In (Node n0 gv1 gv1) (heap_delete_max c2)), (In (Node n0 gv1 gv1) (heap_delete_max c1)), (In (Node n0 gv1 gv1) (heap_delete_max a2)), (In (Node n0 gv1 gv1) (heap_delete_max a1)), (In (Node n0 gv1 gv1) (heap_delete_max gv1)), (In (Node n0 gv1 gv1) (join p p c2)), (In (Node n0 gv1 gv1) (join p p c1)), (In (Node n0 gv1 gv1) (join p p a2)), (In (Node n0 gv1 gv1) (join p p a1)), (In (Node n0 gv1 gv1) (join p p gv1))
(In (Node n0 gv1 gv1) (insert n1 p)), (In (Node n0 gv1 gv1) (insert n0 p)), (In (Node n0 gv1 gv1) (insert n p)), (In (Node n0 gv1 gv1) (carry p c2)), (In (Node n0 gv1 gv1) (carry p c1)), (In (Node n0 gv1 gv1) (carry p a2)), (In (Node n0 gv1 gv1) (carry p a1)), (In (Node n0 gv1 gv1) (carry p gv1)), (In (Node n0 gv1 gv1) (p ++ p)), (In (Node n c2 c2) p)
(In (Node n c2 c2) (c2 :: p)), (In (Node n c2 c2) (c1 :: p)), (In (Node n c2 c2) (a2 :: p)), (In (Node n c2 c2) (a1 :: p)), (In (Node n c2 c2) (gv1 :: p)), (In (Node n c2 c2) (merge p p)), (In (Node n c2 c2) (heap_delete_max c2)), (In (Node n c2 c2) (heap_delete_max c1)), (In (Node n c2 c2) (heap_delete_max a2)), (In (Node n c2 c2) (heap_delete_max a1))
(In (Node n c2 c2) (heap_delete_max gv1)), (In (Node n c2 c2) (join p p c2)), (In (Node n c2 c2) (join p p c1)), (In (Node n c2 c2) (join p p a2)), (In (Node n c2 c2) (join p p a1)), (In (Node n c2 c2) (join p p gv1)), (In (Node n c2 c2) (insert n1 p)), (In (Node n c2 c2) (insert n0 p)), (In (Node n c2 c2) (insert n p)), (In (Node n c2 c2) (carry p c2))
(In (Node n c2 c2) (carry p c1)), (In (Node n c2 c2) (carry p a2)), (In (Node n c2 c2) (carry p a1)), (In (Node n c2 c2) (carry p gv1)), (In (Node n c2 c2) (p ++ p)), (In (Node n c2 c1) p), (In (Node n c2 c1) (c2 :: p)), (In (Node n c2 c1) (c1 :: p)), (In (Node n c2 c1) (a2 :: p)), (In (Node n c2 c1) (a1 :: p))
(In (Node n c2 c1) (gv1 :: p)), (In (Node n c2 c1) (merge p p)), (In (Node n c2 c1) (heap_delete_max c2)), (In (Node n c2 c1) (heap_delete_max c1)), (In (Node n c2 c1) (heap_delete_max a2)), (In (Node n c2 c1) (heap_delete_max a1)), (In (Node n c2 c1) (heap_delete_max gv1)), (In (Node n c2 c1) (join p p c2)), (In (Node n c2 c1) (join p p c1)), (In (Node n c2 c1) (join p p a2))
(In (Node n c2 c1) (join p p a1)), (In (Node n c2 c1) (join p p gv1)), (In (Node n c2 c1) (insert n1 p)), (In (Node n c2 c1) (insert n0 p)), (In (Node n c2 c1) (insert n p)), (In (Node n c2 c1) (carry p c2)), (In (Node n c2 c1) (carry p c1)), (In (Node n c2 c1) (carry p a2)), (In (Node n c2 c1) (carry p a1)), (In (Node n c2 c1) (carry p gv1))
(In (Node n c2 c1) (p ++ p)), (In (Node n c2 a2) p), (In (Node n c2 a2) (c2 :: p)), (In (Node n c2 a2) (c1 :: p)), (In (Node n c2 a2) (a2 :: p)), (In (Node n c2 a2) (a1 :: p)), (In (Node n c2 a2) (gv1 :: p)), (In (Node n c2 a2) (merge p p)), (In (Node n c2 a2) (heap_delete_max c2)), (In (Node n c2 a2) (heap_delete_max c1))
(In (Node n c2 a2) (heap_delete_max a2)), (In (Node n c2 a2) (heap_delete_max a1)), (In (Node n c2 a2) (heap_delete_max gv1)), (In (Node n c2 a2) (join p p c2)), (In (Node n c2 a2) (join p p c1)), (In (Node n c2 a2) (join p p a2)), (In (Node n c2 a2) (join p p a1)), (In (Node n c2 a2) (join p p gv1)), (In (Node n c2 a2) (insert n1 p)), (In (Node n c2 a2) (insert n0 p))
(In (Node n c2 a2) (insert n p)), (In (Node n c2 a2) (carry p c2)), (In (Node n c2 a2) (carry p c1)), (In (Node n c2 a2) (carry p a2)), (In (Node n c2 a2) (carry p a1)), (In (Node n c2 a2) (carry p gv1)), (In (Node n c2 a2) (p ++ p)), (In (Node n c2 a1) p), (In (Node n c2 a1) (c2 :: p)), (In (Node n c2 a1) (c1 :: p))
(In (Node n c2 a1) (a2 :: p)), (In (Node n c2 a1) (a1 :: p)), (In (Node n c2 a1) (gv1 :: p)), (In (Node n c2 a1) (merge p p)), (In (Node n c2 a1) (heap_delete_max c2)), (In (Node n c2 a1) (heap_delete_max c1)), (In (Node n c2 a1) (heap_delete_max a2)), (In (Node n c2 a1) (heap_delete_max a1)), (In (Node n c2 a1) (heap_delete_max gv1)), (In (Node n c2 a1) (join p p c2))
(In (Node n c2 a1) (join p p c1)), (In (Node n c2 a1) (join p p a2)), (In (Node n c2 a1) (join p p a1)), (In (Node n c2 a1) (join p p gv1)), (In (Node n c2 a1) (insert n1 p)), (In (Node n c2 a1) (insert n0 p)), (In (Node n c2 a1) (insert n p)), (In (Node n c2 a1) (carry p c2)), (In (Node n c2 a1) (carry p c1)), (In (Node n c2 a1) (carry p a2))
(In (Node n c2 a1) (carry p a1)), (In (Node n c2 a1) (carry p gv1)), (In (Node n c2 a1) (p ++ p)), (In (Node n c2 gv1) p), (In (Node n c2 gv1) (c2 :: p)), (In (Node n c2 gv1) (c1 :: p)), (In (Node n c2 gv1) (a2 :: p)), (In (Node n c2 gv1) (a1 :: p)), (In (Node n c2 gv1) (gv1 :: p)), (In (Node n c2 gv1) (merge p p))
(In (Node n c2 gv1) (heap_delete_max c2)), (In (Node n c2 gv1) (heap_delete_max c1)), (In (Node n c2 gv1) (heap_delete_max a2)), (In (Node n c2 gv1) (heap_delete_max a1)), (In (Node n c2 gv1) (heap_delete_max gv1)), (In (Node n c2 gv1) (join p p c2)), (In (Node n c2 gv1) (join p p c1)), (In (Node n c2 gv1) (join p p a2)), (In (Node n c2 gv1) (join p p a1)), (In (Node n c2 gv1) (join p p gv1))
(In (Node n c2 gv1) (insert n1 p)), (In (Node n c2 gv1) (insert n0 p)), (In (Node n c2 gv1) (insert n p)), (In (Node n c2 gv1) (carry p c2)), (In (Node n c2 gv1) (carry p c1)), (In (Node n c2 gv1) (carry p a2)), (In (Node n c2 gv1) (carry p a1)), (In (Node n c2 gv1) (carry p gv1)), (In (Node n c2 gv1) (p ++ p)), (In (Node n c1 c2) p)
(In (Node n c1 c2) (c2 :: p)), (In (Node n c1 c2) (c1 :: p)), (In (Node n c1 c2) (a2 :: p)), (In (Node n c1 c2) (a1 :: p)), (In (Node n c1 c2) (gv1 :: p)), (In (Node n c1 c2) (merge p p)), (In (Node n c1 c2) (heap_delete_max c2)), (In (Node n c1 c2) (heap_delete_max c1)), (In (Node n c1 c2) (heap_delete_max a2)), (In (Node n c1 c2) (heap_delete_max a1))
(In (Node n c1 c2) (heap_delete_max gv1)), (In (Node n c1 c2) (join p p c2)), (In (Node n c1 c2) (join p p c1)), (In (Node n c1 c2) (join p p a2)), (In (Node n c1 c2) (join p p a1)), (In (Node n c1 c2) (join p p gv1)), (In (Node n c1 c2) (insert n1 p)), (In (Node n c1 c2) (insert n0 p)), (In (Node n c1 c2) (insert n p)), (In (Node n c1 c2) (carry p c2))
(In (Node n c1 c2) (carry p c1)), (In (Node n c1 c2) (carry p a2)), (In (Node n c1 c2) (carry p a1)), (In (Node n c1 c2) (carry p gv1)), (In (Node n c1 c2) (p ++ p)), (In (Node n c1 c1) p), (In (Node n c1 c1) (c2 :: p)), (In (Node n c1 c1) (c1 :: p)), (In (Node n c1 c1) (a2 :: p)), (In (Node n c1 c1) (a1 :: p))
(In (Node n c1 c1) (gv1 :: p)), (In (Node n c1 c1) (merge p p)), (In (Node n c1 c1) (heap_delete_max c2)), (In (Node n c1 c1) (heap_delete_max c1)), (In (Node n c1 c1) (heap_delete_max a2)), (In (Node n c1 c1) (heap_delete_max a1)), (In (Node n c1 c1) (heap_delete_max gv1)), (In (Node n c1 c1) (join p p c2)), (In (Node n c1 c1) (join p p c1)), (In (Node n c1 c1) (join p p a2))
(In (Node n c1 c1) (join p p a1)), (In (Node n c1 c1) (join p p gv1)), (In (Node n c1 c1) (insert n1 p)), (In (Node n c1 c1) (insert n0 p)), (In (Node n c1 c1) (insert n p)), (In (Node n c1 c1) (carry p c2)), (In (Node n c1 c1) (carry p c1)), (In (Node n c1 c1) (carry p a2)), (In (Node n c1 c1) (carry p a1)), (In (Node n c1 c1) (carry p gv1))
(In (Node n c1 c1) (p ++ p)), (In (Node n c1 a2) p), (In (Node n c1 a2) (c2 :: p)), (In (Node n c1 a2) (c1 :: p)), (In (Node n c1 a2) (a2 :: p)), (In (Node n c1 a2) (a1 :: p)), (In (Node n c1 a2) (gv1 :: p)), (In (Node n c1 a2) (merge p p)), (In (Node n c1 a2) (heap_delete_max c2)), (In (Node n c1 a2) (heap_delete_max c1))
(In (Node n c1 a2) (heap_delete_max a2)), (In (Node n c1 a2) (heap_delete_max a1)), (In (Node n c1 a2) (heap_delete_max gv1)), (In (Node n c1 a2) (join p p c2)), (In (Node n c1 a2) (join p p c1)), (In (Node n c1 a2) (join p p a2)), (In (Node n c1 a2) (join p p a1)), (In (Node n c1 a2) (join p p gv1)), (In (Node n c1 a2) (insert n1 p)), (In (Node n c1 a2) (insert n0 p))
(In (Node n c1 a2) (insert n p)), (In (Node n c1 a2) (carry p c2)), (In (Node n c1 a2) (carry p c1)), (In (Node n c1 a2) (carry p a2)), (In (Node n c1 a2) (carry p a1)), (In (Node n c1 a2) (carry p gv1)), (In (Node n c1 a2) (p ++ p)), (In (Node n c1 a1) p), (In (Node n c1 a1) (c2 :: p)), (In (Node n c1 a1) (c1 :: p))
(In (Node n c1 a1) (a2 :: p)), (In (Node n c1 a1) (a1 :: p)), (In (Node n c1 a1) (gv1 :: p)), (In (Node n c1 a1) (merge p p)), (In (Node n c1 a1) (heap_delete_max c2)), (In (Node n c1 a1) (heap_delete_max c1)), (In (Node n c1 a1) (heap_delete_max a2)), (In (Node n c1 a1) (heap_delete_max a1)), (In (Node n c1 a1) (heap_delete_max gv1)), (In (Node n c1 a1) (join p p c2))
(In (Node n c1 a1) (join p p c1)), (In (Node n c1 a1) (join p p a2)), (In (Node n c1 a1) (join p p a1)), (In (Node n c1 a1) (join p p gv1)), (In (Node n c1 a1) (insert n1 p)), (In (Node n c1 a1) (insert n0 p)), (In (Node n c1 a1) (insert n p)), (In (Node n c1 a1) (carry p c2)), (In (Node n c1 a1) (carry p c1)), (In (Node n c1 a1) (carry p a2))
(In (Node n c1 a1) (carry p a1)), (In (Node n c1 a1) (carry p gv1)), (In (Node n c1 a1) (p ++ p)), (In (Node n c1 gv1) p), (In (Node n c1 gv1) (c2 :: p)), (In (Node n c1 gv1) (c1 :: p)), (In (Node n c1 gv1) (a2 :: p)), (In (Node n c1 gv1) (a1 :: p)), (In (Node n c1 gv1) (gv1 :: p)), (In (Node n c1 gv1) (merge p p))
(In (Node n c1 gv1) (heap_delete_max c2)), (In (Node n c1 gv1) (heap_delete_max c1)), (In (Node n c1 gv1) (heap_delete_max a2)), (In (Node n c1 gv1) (heap_delete_max a1)), (In (Node n c1 gv1) (heap_delete_max gv1)), (In (Node n c1 gv1) (join p p c2)), (In (Node n c1 gv1) (join p p c1)), (In (Node n c1 gv1) (join p p a2)), (In (Node n c1 gv1) (join p p a1)), (In (Node n c1 gv1) (join p p gv1))
(In (Node n c1 gv1) (insert n1 p)), (In (Node n c1 gv1) (insert n0 p)), (In (Node n c1 gv1) (insert n p)), (In (Node n c1 gv1) (carry p c2)), (In (Node n c1 gv1) (carry p c1)), (In (Node n c1 gv1) (carry p a2)), (In (Node n c1 gv1) (carry p a1)), (In (Node n c1 gv1) (carry p gv1)), (In (Node n c1 gv1) (p ++ p)), (In (Node n a2 c2) p)
(In (Node n a2 c2) (c2 :: p)), (In (Node n a2 c2) (c1 :: p)), (In (Node n a2 c2) (a2 :: p)), (In (Node n a2 c2) (a1 :: p)), (In (Node n a2 c2) (gv1 :: p)), (In (Node n a2 c2) (merge p p)), (In (Node n a2 c2) (heap_delete_max c2)), (In (Node n a2 c2) (heap_delete_max c1)), (In (Node n a2 c2) (heap_delete_max a2)), (In (Node n a2 c2) (heap_delete_max a1))
(In (Node n a2 c2) (heap_delete_max gv1)), (In (Node n a2 c2) (join p p c2)), (In (Node n a2 c2) (join p p c1)), (In (Node n a2 c2) (join p p a2)), (In (Node n a2 c2) (join p p a1)), (In (Node n a2 c2) (join p p gv1)), (In (Node n a2 c2) (insert n1 p)), (In (Node n a2 c2) (insert n0 p)), (In (Node n a2 c2) (insert n p)), (In (Node n a2 c2) (carry p c2))
(In (Node n a2 c2) (carry p c1)), (In (Node n a2 c2) (carry p a2)), (In (Node n a2 c2) (carry p a1)), (In (Node n a2 c2) (carry p gv1)), (In (Node n a2 c2) (p ++ p)), (In (Node n a2 c1) p), (In (Node n a2 c1) (c2 :: p)), (In (Node n a2 c1) (c1 :: p)), (In (Node n a2 c1) (a2 :: p)), (In (Node n a2 c1) (a1 :: p))
(In (Node n a2 c1) (gv1 :: p)), (In (Node n a2 c1) (merge p p)), (In (Node n a2 c1) (heap_delete_max c2)), (In (Node n a2 c1) (heap_delete_max c1)), (In (Node n a2 c1) (heap_delete_max a2)), (In (Node n a2 c1) (heap_delete_max a1)), (In (Node n a2 c1) (heap_delete_max gv1)), (In (Node n a2 c1) (join p p c2)), (In (Node n a2 c1) (join p p c1)), (In (Node n a2 c1) (join p p a2))
(In (Node n a2 c1) (join p p a1)), (In (Node n a2 c1) (join p p gv1)), (In (Node n a2 c1) (insert n1 p)), (In (Node n a2 c1) (insert n0 p)), (In (Node n a2 c1) (insert n p)), (In (Node n a2 c1) (carry p c2)), (In (Node n a2 c1) (carry p c1)), (In (Node n a2 c1) (carry p a2)), (In (Node n a2 c1) (carry p a1)), (In (Node n a2 c1) (carry p gv1))
(In (Node n a2 c1) (p ++ p)), (In (Node n a2 a2) p), (In (Node n a2 a2) (c2 :: p)), (In (Node n a2 a2) (c1 :: p)), (In (Node n a2 a2) (a2 :: p)), (In (Node n a2 a2) (a1 :: p)), (In (Node n a2 a2) (gv1 :: p)), (In (Node n a2 a2) (merge p p)), (In (Node n a2 a2) (heap_delete_max c2)), (In (Node n a2 a2) (heap_delete_max c1))
(In (Node n a2 a2) (heap_delete_max a2)), (In (Node n a2 a2) (heap_delete_max a1)), (In (Node n a2 a2) (heap_delete_max gv1)), (In (Node n a2 a2) (join p p c2)), (In (Node n a2 a2) (join p p c1)), (In (Node n a2 a2) (join p p a2)), (In (Node n a2 a2) (join p p a1)), (In (Node n a2 a2) (join p p gv1)), (In (Node n a2 a2) (insert n1 p)), (In (Node n a2 a2) (insert n0 p))
(In (Node n a2 a2) (insert n p)), (In (Node n a2 a2) (carry p c2)), (In (Node n a2 a2) (carry p c1)), (In (Node n a2 a2) (carry p a2)), (In (Node n a2 a2) (carry p a1)), (In (Node n a2 a2) (carry p gv1)), (In (Node n a2 a2) (p ++ p)), (In (Node n a2 a1) p), (In (Node n a2 a1) (c2 :: p)), (In (Node n a2 a1) (c1 :: p))
(In (Node n a2 a1) (a2 :: p)), (In (Node n a2 a1) (a1 :: p)), (In (Node n a2 a1) (gv1 :: p)), (In (Node n a2 a1) (merge p p)), (In (Node n a2 a1) (heap_delete_max c2)), (In (Node n a2 a1) (heap_delete_max c1)), (In (Node n a2 a1) (heap_delete_max a2)), (In (Node n a2 a1) (heap_delete_max a1)), (In (Node n a2 a1) (heap_delete_max gv1)), (In (Node n a2 a1) (join p p c2))
(In (Node n a2 a1) (join p p c1)), (In (Node n a2 a1) (join p p a2)), (In (Node n a2 a1) (join p p a1)), (In (Node n a2 a1) (join p p gv1)), (In (Node n a2 a1) (insert n1 p)), (In (Node n a2 a1) (insert n0 p)), (In (Node n a2 a1) (insert n p)), (In (Node n a2 a1) (carry p c2)), (In (Node n a2 a1) (carry p c1)), (In (Node n a2 a1) (carry p a2))
(In (Node n a2 a1) (carry p a1)), (In (Node n a2 a1) (carry p gv1)), (In (Node n a2 a1) (p ++ p)), (In (Node n a2 gv1) p), (In (Node n a2 gv1) (c2 :: p)), (In (Node n a2 gv1) (c1 :: p)), (In (Node n a2 gv1) (a2 :: p)), (In (Node n a2 gv1) (a1 :: p)), (In (Node n a2 gv1) (gv1 :: p)), (In (Node n a2 gv1) (merge p p))
(In (Node n a2 gv1) (heap_delete_max c2)), (In (Node n a2 gv1) (heap_delete_max c1)), (In (Node n a2 gv1) (heap_delete_max a2)), (In (Node n a2 gv1) (heap_delete_max a1)), (In (Node n a2 gv1) (heap_delete_max gv1)), (In (Node n a2 gv1) (join p p c2)), (In (Node n a2 gv1) (join p p c1)), (In (Node n a2 gv1) (join p p a2)), (In (Node n a2 gv1) (join p p a1)), (In (Node n a2 gv1) (join p p gv1))
(In (Node n a2 gv1) (insert n1 p)), (In (Node n a2 gv1) (insert n0 p)), (In (Node n a2 gv1) (insert n p)), (In (Node n a2 gv1) (carry p c2)), (In (Node n a2 gv1) (carry p c1)), (In (Node n a2 gv1) (carry p a2)), (In (Node n a2 gv1) (carry p a1)), (In (Node n a2 gv1) (carry p gv1)), (In (Node n a2 gv1) (p ++ p)), (In (Node n a1 c2) p)
(In (Node n a1 c2) (c2 :: p)), (In (Node n a1 c2) (c1 :: p)), (In (Node n a1 c2) (a2 :: p)), (In (Node n a1 c2) (a1 :: p)), (In (Node n a1 c2) (gv1 :: p)), (In (Node n a1 c2) (merge p p)), (In (Node n a1 c2) (heap_delete_max c2)), (In (Node n a1 c2) (heap_delete_max c1)), (In (Node n a1 c2) (heap_delete_max a2)), (In (Node n a1 c2) (heap_delete_max a1))
(In (Node n a1 c2) (heap_delete_max gv1)), (In (Node n a1 c2) (join p p c2)), (In (Node n a1 c2) (join p p c1)), (In (Node n a1 c2) (join p p a2)), (In (Node n a1 c2) (join p p a1)), (In (Node n a1 c2) (join p p gv1)), (In (Node n a1 c2) (insert n1 p)), (In (Node n a1 c2) (insert n0 p)), (In (Node n a1 c2) (insert n p)), (In (Node n a1 c2) (carry p c2))
(In (Node n a1 c2) (carry p c1)), (In (Node n a1 c2) (carry p a2)), (In (Node n a1 c2) (carry p a1)), (In (Node n a1 c2) (carry p gv1)), (In (Node n a1 c2) (p ++ p)), (In (Node n a1 c1) p), (In (Node n a1 c1) (c2 :: p)), (In (Node n a1 c1) (c1 :: p)), (In (Node n a1 c1) (a2 :: p)), (In (Node n a1 c1) (a1 :: p))
(In (Node n a1 c1) (gv1 :: p)), (In (Node n a1 c1) (merge p p)), (In (Node n a1 c1) (heap_delete_max c2)), (In (Node n a1 c1) (heap_delete_max c1)), (In (Node n a1 c1) (heap_delete_max a2)), (In (Node n a1 c1) (heap_delete_max a1)), (In (Node n a1 c1) (heap_delete_max gv1)), (In (Node n a1 c1) (join p p c2)), (In (Node n a1 c1) (join p p c1)), (In (Node n a1 c1) (join p p a2))
(In (Node n a1 c1) (join p p a1)), (In (Node n a1 c1) (join p p gv1)), (In (Node n a1 c1) (insert n1 p)), (In (Node n a1 c1) (insert n0 p)), (In (Node n a1 c1) (insert n p)), (In (Node n a1 c1) (carry p c2)), (In (Node n a1 c1) (carry p c1)), (In (Node n a1 c1) (carry p a2)), (In (Node n a1 c1) (carry p a1)), (In (Node n a1 c1) (carry p gv1))
(In (Node n a1 c1) (p ++ p)), (In (Node n a1 a2) p), (In (Node n a1 a2) (c2 :: p)), (In (Node n a1 a2) (c1 :: p)), (In (Node n a1 a2) (a2 :: p)), (In (Node n a1 a2) (a1 :: p)), (In (Node n a1 a2) (gv1 :: p)), (In (Node n a1 a2) (merge p p)), (In (Node n a1 a2) (heap_delete_max c2)), (In (Node n a1 a2) (heap_delete_max c1))
(In (Node n a1 a2) (heap_delete_max a2)), (In (Node n a1 a2) (heap_delete_max a1)), (In (Node n a1 a2) (heap_delete_max gv1)), (In (Node n a1 a2) (join p p c2)), (In (Node n a1 a2) (join p p c1)), (In (Node n a1 a2) (join p p a2)), (In (Node n a1 a2) (join p p a1)), (In (Node n a1 a2) (join p p gv1)), (In (Node n a1 a2) (insert n1 p)), (In (Node n a1 a2) (insert n0 p))
(In (Node n a1 a2) (insert n p)), (In (Node n a1 a2) (carry p c2)), (In (Node n a1 a2) (carry p c1)), (In (Node n a1 a2) (carry p a2)), (In (Node n a1 a2) (carry p a1)), (In (Node n a1 a2) (carry p gv1)), (In (Node n a1 a2) (p ++ p)), (In (Node n a1 a1) p), (In (Node n a1 a1) (c2 :: p)), (In (Node n a1 a1) (c1 :: p))
(In (Node n a1 a1) (a2 :: p)), (In (Node n a1 a1) (a1 :: p)), (In (Node n a1 a1) (gv1 :: p)), (In (Node n a1 a1) (merge p p)), (In (Node n a1 a1) (heap_delete_max c2)), (In (Node n a1 a1) (heap_delete_max c1)), (In (Node n a1 a1) (heap_delete_max a2)), (In (Node n a1 a1) (heap_delete_max a1)), (In (Node n a1 a1) (heap_delete_max gv1)), (In (Node n a1 a1) (join p p c2))
(In (Node n a1 a1) (join p p c1)), (In (Node n a1 a1) (join p p a2)), (In (Node n a1 a1) (join p p a1)), (In (Node n a1 a1) (join p p gv1)), (In (Node n a1 a1) (insert n1 p)), (In (Node n a1 a1) (insert n0 p)), (In (Node n a1 a1) (insert n p)), (In (Node n a1 a1) (carry p c2)), (In (Node n a1 a1) (carry p c1)), (In (Node n a1 a1) (carry p a2))
(In (Node n a1 a1) (carry p a1)), (In (Node n a1 a1) (carry p gv1)), (In (Node n a1 a1) (p ++ p)), (In (Node n a1 gv1) p), (In (Node n a1 gv1) (c2 :: p)), (In (Node n a1 gv1) (c1 :: p)), (In (Node n a1 gv1) (a2 :: p)), (In (Node n a1 gv1) (a1 :: p)), (In (Node n a1 gv1) (gv1 :: p)), (In (Node n a1 gv1) (merge p p))
(In (Node n a1 gv1) (heap_delete_max c2)), (In (Node n a1 gv1) (heap_delete_max c1)), (In (Node n a1 gv1) (heap_delete_max a2)), (In (Node n a1 gv1) (heap_delete_max a1)), (In (Node n a1 gv1) (heap_delete_max gv1)), (In (Node n a1 gv1) (join p p c2)), (In (Node n a1 gv1) (join p p c1)), (In (Node n a1 gv1) (join p p a2)), (In (Node n a1 gv1) (join p p a1)), (In (Node n a1 gv1) (join p p gv1))
(In (Node n a1 gv1) (insert n1 p)), (In (Node n a1 gv1) (insert n0 p)), (In (Node n a1 gv1) (insert n p)), (In (Node n a1 gv1) (carry p c2)), (In (Node n a1 gv1) (carry p c1)), (In (Node n a1 gv1) (carry p a2)), (In (Node n a1 gv1) (carry p a1)), (In (Node n a1 gv1) (carry p gv1)), (In (Node n a1 gv1) (p ++ p)), (In (Node n gv1 c2) p)
(In (Node n gv1 c2) (c2 :: p)), (In (Node n gv1 c2) (c1 :: p)), (In (Node n gv1 c2) (a2 :: p)), (In (Node n gv1 c2) (a1 :: p)), (In (Node n gv1 c2) (gv1 :: p)), (In (Node n gv1 c2) (merge p p)), (In (Node n gv1 c2) (heap_delete_max c2)), (In (Node n gv1 c2) (heap_delete_max c1)), (In (Node n gv1 c2) (heap_delete_max a2)), (In (Node n gv1 c2) (heap_delete_max a1))
(In (Node n gv1 c2) (heap_delete_max gv1)), (In (Node n gv1 c2) (join p p c2)), (In (Node n gv1 c2) (join p p c1)), (In (Node n gv1 c2) (join p p a2)), (In (Node n gv1 c2) (join p p a1)), (In (Node n gv1 c2) (join p p gv1)), (In (Node n gv1 c2) (insert n1 p)), (In (Node n gv1 c2) (insert n0 p)), (In (Node n gv1 c2) (insert n p)), (In (Node n gv1 c2) (carry p c2))
(In (Node n gv1 c2) (carry p c1)), (In (Node n gv1 c2) (carry p a2)), (In (Node n gv1 c2) (carry p a1)), (In (Node n gv1 c2) (carry p gv1)), (In (Node n gv1 c2) (p ++ p)), (In (Node n gv1 c1) p), (In (Node n gv1 c1) (c2 :: p)), (In (Node n gv1 c1) (c1 :: p)), (In (Node n gv1 c1) (a2 :: p)), (In (Node n gv1 c1) (a1 :: p))
(In (Node n gv1 c1) (gv1 :: p)), (In (Node n gv1 c1) (merge p p)), (In (Node n gv1 c1) (heap_delete_max c2)), (In (Node n gv1 c1) (heap_delete_max c1)), (In (Node n gv1 c1) (heap_delete_max a2)), (In (Node n gv1 c1) (heap_delete_max a1)), (In (Node n gv1 c1) (heap_delete_max gv1)), (In (Node n gv1 c1) (join p p c2)), (In (Node n gv1 c1) (join p p c1)), (In (Node n gv1 c1) (join p p a2))
(In (Node n gv1 c1) (join p p a1)), (In (Node n gv1 c1) (join p p gv1)), (In (Node n gv1 c1) (insert n1 p)), (In (Node n gv1 c1) (insert n0 p)), (In (Node n gv1 c1) (insert n p)), (In (Node n gv1 c1) (carry p c2)), (In (Node n gv1 c1) (carry p c1)), (In (Node n gv1 c1) (carry p a2)), (In (Node n gv1 c1) (carry p a1)), (In (Node n gv1 c1) (carry p gv1))
(In (Node n gv1 c1) (p ++ p)), (In (Node n gv1 a2) p), (In (Node n gv1 a2) (c2 :: p)), (In (Node n gv1 a2) (c1 :: p)), (In (Node n gv1 a2) (a2 :: p)), (In (Node n gv1 a2) (a1 :: p)), (In (Node n gv1 a2) (gv1 :: p)), (In (Node n gv1 a2) (merge p p)), (In (Node n gv1 a2) (heap_delete_max c2)), (In (Node n gv1 a2) (heap_delete_max c1))
(In (Node n gv1 a2) (heap_delete_max a2)), (In (Node n gv1 a2) (heap_delete_max a1)), (In (Node n gv1 a2) (heap_delete_max gv1)), (In (Node n gv1 a2) (join p p c2)), (In (Node n gv1 a2) (join p p c1)), (In (Node n gv1 a2) (join p p a2)), (In (Node n gv1 a2) (join p p a1)), (In (Node n gv1 a2) (join p p gv1)), (In (Node n gv1 a2) (insert n1 p)), (In (Node n gv1 a2) (insert n0 p))
(In (Node n gv1 a2) (insert n p)), (In (Node n gv1 a2) (carry p c2)), (In (Node n gv1 a2) (carry p c1)), (In (Node n gv1 a2) (carry p a2)), (In (Node n gv1 a2) (carry p a1)), (In (Node n gv1 a2) (carry p gv1)), (In (Node n gv1 a2) (p ++ p)), (In (Node n gv1 a1) p), (In (Node n gv1 a1) (c2 :: p)), (In (Node n gv1 a1) (c1 :: p))
(In (Node n gv1 a1) (a2 :: p)), (In (Node n gv1 a1) (a1 :: p)), (In (Node n gv1 a1) (gv1 :: p)), (In (Node n gv1 a1) (merge p p)), (In (Node n gv1 a1) (heap_delete_max c2)), (In (Node n gv1 a1) (heap_delete_max c1)), (In (Node n gv1 a1) (heap_delete_max a2)), (In (Node n gv1 a1) (heap_delete_max a1)), (In (Node n gv1 a1) (heap_delete_max gv1)), (In (Node n gv1 a1) (join p p c2))
(In (Node n gv1 a1) (join p p c1)), (In (Node n gv1 a1) (join p p a2)), (In (Node n gv1 a1) (join p p a1)), (In (Node n gv1 a1) (join p p gv1)), (In (Node n gv1 a1) (insert n1 p)), (In (Node n gv1 a1) (insert n0 p)), (In (Node n gv1 a1) (insert n p)), (In (Node n gv1 a1) (carry p c2)), (In (Node n gv1 a1) (carry p c1)), (In (Node n gv1 a1) (carry p a2))
(In (Node n gv1 a1) (carry p a1)), (In (Node n gv1 a1) (carry p gv1)), (In (Node n gv1 a1) (p ++ p)), (In (Node n gv1 gv1) p), (In (Node n gv1 gv1) (c2 :: p)), (In (Node n gv1 gv1) (c1 :: p)), (In (Node n gv1 gv1) (a2 :: p)), (In (Node n gv1 gv1) (a1 :: p)), (In (Node n gv1 gv1) (gv1 :: p)), (In (Node n gv1 gv1) (merge p p))
(In (Node n gv1 gv1) (heap_delete_max c2)), (In (Node n gv1 gv1) (heap_delete_max c1)), (In (Node n gv1 gv1) (heap_delete_max a2)), (In (Node n gv1 gv1) (heap_delete_max a1)), (In (Node n gv1 gv1) (heap_delete_max gv1)), (In (Node n gv1 gv1) (join p p c2)), (In (Node n gv1 gv1) (join p p c1)), (In (Node n gv1 gv1) (join p p a2)), (In (Node n gv1 gv1) (join p p a1)), (In (Node n gv1 gv1) (join p p gv1))
(In (Node n gv1 gv1) (insert n1 p)), (In (Node n gv1 gv1) (insert n0 p)), (In (Node n gv1 gv1) (insert n p)), (In (Node n gv1 gv1) (carry p c2)), (In (Node n gv1 gv1) (carry p c1)), (In (Node n gv1 gv1) (carry p a2)), (In (Node n gv1 gv1) (carry p a1)), (In (Node n gv1 gv1) (carry p gv1)), (In (Node n gv1 gv1) (p ++ p)), (In (smash c2 c2) p)
(In (smash c2 c2) (c2 :: p)), (In (smash c2 c2) (c1 :: p)), (In (smash c2 c2) (a2 :: p)), (In (smash c2 c2) (a1 :: p)), (In (smash c2 c2) (gv1 :: p)), (In (smash c2 c2) (merge p p)), (In (smash c2 c2) (heap_delete_max c2)), (In (smash c2 c2) (heap_delete_max c1)), (In (smash c2 c2) (heap_delete_max a2)), (In (smash c2 c2) (heap_delete_max a1))
(In (smash c2 c2) (heap_delete_max gv1)), (In (smash c2 c2) (join p p c2)), (In (smash c2 c2) (join p p c1)), (In (smash c2 c2) (join p p a2)), (In (smash c2 c2) (join p p a1)), (In (smash c2 c2) (join p p gv1)), (In (smash c2 c2) (insert n1 p)), (In (smash c2 c2) (insert n0 p)), (In (smash c2 c2) (insert n p)), (In (smash c2 c2) (carry p c2))
(In (smash c2 c2) (carry p c1)), (In (smash c2 c2) (carry p a2)), (In (smash c2 c2) (carry p a1)), (In (smash c2 c2) (carry p gv1)), (In (smash c2 c2) (p ++ p)), (In (smash c2 c1) p), (In (smash c2 c1) (c2 :: p)), (In (smash c2 c1) (c1 :: p)), (In (smash c2 c1) (a2 :: p)), (In (smash c2 c1) (a1 :: p))
(In (smash c2 c1) (gv1 :: p)), (In (smash c2 c1) (merge p p)), (In (smash c2 c1) (heap_delete_max c2)), (In (smash c2 c1) (heap_delete_max c1)), (In (smash c2 c1) (heap_delete_max a2)), (In (smash c2 c1) (heap_delete_max a1)), (In (smash c2 c1) (heap_delete_max gv1)), (In (smash c2 c1) (join p p c2)), (In (smash c2 c1) (join p p c1)), (In (smash c2 c1) (join p p a2))
(In (smash c2 c1) (join p p a1)), (In (smash c2 c1) (join p p gv1)), (In (smash c2 c1) (insert n1 p)), (In (smash c2 c1) (insert n0 p)), (In (smash c2 c1) (insert n p)), (In (smash c2 c1) (carry p c2)), (In (smash c2 c1) (carry p c1)), (In (smash c2 c1) (carry p a2)), (In (smash c2 c1) (carry p a1)), (In (smash c2 c1) (carry p gv1))
(In (smash c2 c1) (p ++ p)), (In (smash c2 a2) p), (In (smash c2 a2) (c2 :: p)), (In (smash c2 a2) (c1 :: p)), (In (smash c2 a2) (a2 :: p)), (In (smash c2 a2) (a1 :: p)), (In (smash c2 a2) (gv1 :: p)), (In (smash c2 a2) (merge p p)), (In (smash c2 a2) (heap_delete_max c2)), (In (smash c2 a2) (heap_delete_max c1))
(In (smash c2 a2) (heap_delete_max a2)), (In (smash c2 a2) (heap_delete_max a1)), (In (smash c2 a2) (heap_delete_max gv1)), (In (smash c2 a2) (join p p c2)), (In (smash c2 a2) (join p p c1)), (In (smash c2 a2) (join p p a2)), (In (smash c2 a2) (join p p a1)), (In (smash c2 a2) (join p p gv1)), (In (smash c2 a2) (insert n1 p)), (In (smash c2 a2) (insert n0 p))
(In (smash c2 a2) (insert n p)), (In (smash c2 a2) (carry p c2)), (In (smash c2 a2) (carry p c1)), (In (smash c2 a2) (carry p a2)), (In (smash c2 a2) (carry p a1)), (In (smash c2 a2) (carry p gv1)), (In (smash c2 a2) (p ++ p)), (In (smash c2 a1) p), (In (smash c2 a1) (c2 :: p)), (In (smash c2 a1) (c1 :: p))
(In (smash c2 a1) (a2 :: p)), (In (smash c2 a1) (a1 :: p)), (In (smash c2 a1) (gv1 :: p)), (In (smash c2 a1) (merge p p)), (In (smash c2 a1) (heap_delete_max c2)), (In (smash c2 a1) (heap_delete_max c1)), (In (smash c2 a1) (heap_delete_max a2)), (In (smash c2 a1) (heap_delete_max a1)), (In (smash c2 a1) (heap_delete_max gv1)), (In (smash c2 a1) (join p p c2))
(In (smash c2 a1) (join p p c1)), (In (smash c2 a1) (join p p a2)), (In (smash c2 a1) (join p p a1)), (In (smash c2 a1) (join p p gv1)), (In (smash c2 a1) (insert n1 p)), (In (smash c2 a1) (insert n0 p)), (In (smash c2 a1) (insert n p)), (In (smash c2 a1) (carry p c2)), (In (smash c2 a1) (carry p c1)), (In (smash c2 a1) (carry p a2))
(In (smash c2 a1) (carry p a1)), (In (smash c2 a1) (carry p gv1)), (In (smash c2 a1) (p ++ p)), (In (smash c2 gv1) p), (In (smash c2 gv1) (c2 :: p)), (In (smash c2 gv1) (c1 :: p)), (In (smash c2 gv1) (a2 :: p)), (In (smash c2 gv1) (a1 :: p)), (In (smash c2 gv1) (gv1 :: p)), (In (smash c2 gv1) (merge p p))
(In (smash c2 gv1) (heap_delete_max c2)), (In (smash c2 gv1) (heap_delete_max c1)), (In (smash c2 gv1) (heap_delete_max a2)), (In (smash c2 gv1) (heap_delete_max a1)), (In (smash c2 gv1) (heap_delete_max gv1)), (In (smash c2 gv1) (join p p c2)), (In (smash c2 gv1) (join p p c1)), (In (smash c2 gv1) (join p p a2)), (In (smash c2 gv1) (join p p a1)), (In (smash c2 gv1) (join p p gv1))
(In (smash c2 gv1) (insert n1 p)), (In (smash c2 gv1) (insert n0 p)), (In (smash c2 gv1) (insert n p)), (In (smash c2 gv1) (carry p c2)), (In (smash c2 gv1) (carry p c1)), (In (smash c2 gv1) (carry p a2)), (In (smash c2 gv1) (carry p a1)), (In (smash c2 gv1) (carry p gv1)), (In (smash c2 gv1) (p ++ p)), (In (smash c1 c2) p)
(In (smash c1 c2) (c2 :: p)), (In (smash c1 c2) (c1 :: p)), (In (smash c1 c2) (a2 :: p)), (In (smash c1 c2) (a1 :: p)), (In (smash c1 c2) (gv1 :: p)), (In (smash c1 c2) (merge p p)), (In (smash c1 c2) (heap_delete_max c2)), (In (smash c1 c2) (heap_delete_max c1)), (In (smash c1 c2) (heap_delete_max a2)), (In (smash c1 c2) (heap_delete_max a1))
(In (smash c1 c2) (heap_delete_max gv1)), (In (smash c1 c2) (join p p c2)), (In (smash c1 c2) (join p p c1)), (In (smash c1 c2) (join p p a2)), (In (smash c1 c2) (join p p a1)), (In (smash c1 c2) (join p p gv1)), (In (smash c1 c2) (insert n1 p)), (In (smash c1 c2) (insert n0 p)), (In (smash c1 c2) (insert n p)), (In (smash c1 c2) (carry p c2))
(In (smash c1 c2) (carry p c1)), (In (smash c1 c2) (carry p a2)), (In (smash c1 c2) (carry p a1)), (In (smash c1 c2) (carry p gv1)), (In (smash c1 c2) (p ++ p)), (In (smash c1 c1) p), (In (smash c1 c1) (c2 :: p)), (In (smash c1 c1) (c1 :: p)), (In (smash c1 c1) (a2 :: p)), (In (smash c1 c1) (a1 :: p))
(In (smash c1 c1) (gv1 :: p)), (In (smash c1 c1) (merge p p)), (In (smash c1 c1) (heap_delete_max c2)), (In (smash c1 c1) (heap_delete_max c1)), (In (smash c1 c1) (heap_delete_max a2)), (In (smash c1 c1) (heap_delete_max a1)), (In (smash c1 c1) (heap_delete_max gv1)), (In (smash c1 c1) (join p p c2)), (In (smash c1 c1) (join p p c1)), (In (smash c1 c1) (join p p a2))
(In (smash c1 c1) (join p p a1)), (In (smash c1 c1) (join p p gv1)), (In (smash c1 c1) (insert n1 p)), (In (smash c1 c1) (insert n0 p)), (In (smash c1 c1) (insert n p)), (In (smash c1 c1) (carry p c2)), (In (smash c1 c1) (carry p c1)), (In (smash c1 c1) (carry p a2)), (In (smash c1 c1) (carry p a1)), (In (smash c1 c1) (carry p gv1))
(In (smash c1 c1) (p ++ p)), (In (smash c1 a2) p), (In (smash c1 a2) (c2 :: p)), (In (smash c1 a2) (c1 :: p)), (In (smash c1 a2) (a2 :: p)), (In (smash c1 a2) (a1 :: p)), (In (smash c1 a2) (gv1 :: p)), (In (smash c1 a2) (merge p p)), (In (smash c1 a2) (heap_delete_max c2)), (In (smash c1 a2) (heap_delete_max c1))
(In (smash c1 a2) (heap_delete_max a2)), (In (smash c1 a2) (heap_delete_max a1)), (In (smash c1 a2) (heap_delete_max gv1)), (In (smash c1 a2) (join p p c2)), (In (smash c1 a2) (join p p c1)), (In (smash c1 a2) (join p p a2)), (In (smash c1 a2) (join p p a1)), (In (smash c1 a2) (join p p gv1)), (In (smash c1 a2) (insert n1 p)), (In (smash c1 a2) (insert n0 p))
(In (smash c1 a2) (insert n p)), (In (smash c1 a2) (carry p c2)), (In (smash c1 a2) (carry p c1)), (In (smash c1 a2) (carry p a2)), (In (smash c1 a2) (carry p a1)), (In (smash c1 a2) (carry p gv1)), (In (smash c1 a2) (p ++ p)), (In (smash c1 a1) p), (In (smash c1 a1) (c2 :: p)), (In (smash c1 a1) (c1 :: p))
(In (smash c1 a1) (a2 :: p)), (In (smash c1 a1) (a1 :: p)), (In (smash c1 a1) (gv1 :: p)), (In (smash c1 a1) (merge p p)), (In (smash c1 a1) (heap_delete_max c2)), (In (smash c1 a1) (heap_delete_max c1)), (In (smash c1 a1) (heap_delete_max a2)), (In (smash c1 a1) (heap_delete_max a1)), (In (smash c1 a1) (heap_delete_max gv1)), (In (smash c1 a1) (join p p c2))
(In (smash c1 a1) (join p p c1)), (In (smash c1 a1) (join p p a2)), (In (smash c1 a1) (join p p a1)), (In (smash c1 a1) (join p p gv1)), (In (smash c1 a1) (insert n1 p)), (In (smash c1 a1) (insert n0 p)), (In (smash c1 a1) (insert n p)), (In (smash c1 a1) (carry p c2)), (In (smash c1 a1) (carry p c1)), (In (smash c1 a1) (carry p a2))
(In (smash c1 a1) (carry p a1)), (In (smash c1 a1) (carry p gv1)), (In (smash c1 a1) (p ++ p)), (In (smash c1 gv1) p), (In (smash c1 gv1) (c2 :: p)), (In (smash c1 gv1) (c1 :: p)), (In (smash c1 gv1) (a2 :: p)), (In (smash c1 gv1) (a1 :: p)), (In (smash c1 gv1) (gv1 :: p)), (In (smash c1 gv1) (merge p p))
(In (smash c1 gv1) (heap_delete_max c2)), (In (smash c1 gv1) (heap_delete_max c1)), (In (smash c1 gv1) (heap_delete_max a2)), (In (smash c1 gv1) (heap_delete_max a1)), (In (smash c1 gv1) (heap_delete_max gv1)), (In (smash c1 gv1) (join p p c2)), (In (smash c1 gv1) (join p p c1)), (In (smash c1 gv1) (join p p a2)), (In (smash c1 gv1) (join p p a1)), (In (smash c1 gv1) (join p p gv1))
(In (smash c1 gv1) (insert n1 p)), (In (smash c1 gv1) (insert n0 p)), (In (smash c1 gv1) (insert n p)), (In (smash c1 gv1) (carry p c2)), (In (smash c1 gv1) (carry p c1)), (In (smash c1 gv1) (carry p a2)), (In (smash c1 gv1) (carry p a1)), (In (smash c1 gv1) (carry p gv1)), (In (smash c1 gv1) (p ++ p)), (In (smash a2 c2) p)
(In (smash a2 c2) (c2 :: p)), (In (smash a2 c2) (c1 :: p)), (In (smash a2 c2) (a2 :: p)), (In (smash a2 c2) (a1 :: p)), (In (smash a2 c2) (gv1 :: p)), (In (smash a2 c2) (merge p p)), (In (smash a2 c2) (heap_delete_max c2)), (In (smash a2 c2) (heap_delete_max c1)), (In (smash a2 c2) (heap_delete_max a2)), (In (smash a2 c2) (heap_delete_max a1))
(In (smash a2 c2) (heap_delete_max gv1)), (In (smash a2 c2) (join p p c2)), (In (smash a2 c2) (join p p c1)), (In (smash a2 c2) (join p p a2)), (In (smash a2 c2) (join p p a1)), (In (smash a2 c2) (join p p gv1)), (In (smash a2 c2) (insert n1 p)), (In (smash a2 c2) (insert n0 p)), (In (smash a2 c2) (insert n p)), (In (smash a2 c2) (carry p c2))
(In (smash a2 c2) (carry p c1)), (In (smash a2 c2) (carry p a2)), (In (smash a2 c2) (carry p a1)), (In (smash a2 c2) (carry p gv1)), (In (smash a2 c2) (p ++ p)), (In (smash a2 c1) p), (In (smash a2 c1) (c2 :: p)), (In (smash a2 c1) (c1 :: p)), (In (smash a2 c1) (a2 :: p)), (In (smash a2 c1) (a1 :: p))
(In (smash a2 c1) (gv1 :: p)), (In (smash a2 c1) (merge p p)), (In (smash a2 c1) (heap_delete_max c2)), (In (smash a2 c1) (heap_delete_max c1)), (In (smash a2 c1) (heap_delete_max a2)), (In (smash a2 c1) (heap_delete_max a1)), (In (smash a2 c1) (heap_delete_max gv1)), (In (smash a2 c1) (join p p c2)), (In (smash a2 c1) (join p p c1)), (In (smash a2 c1) (join p p a2))
(In (smash a2 c1) (join p p a1)), (In (smash a2 c1) (join p p gv1)), (In (smash a2 c1) (insert n1 p)), (In (smash a2 c1) (insert n0 p)), (In (smash a2 c1) (insert n p)), (In (smash a2 c1) (carry p c2)), (In (smash a2 c1) (carry p c1)), (In (smash a2 c1) (carry p a2)), (In (smash a2 c1) (carry p a1)), (In (smash a2 c1) (carry p gv1))
(In (smash a2 c1) (p ++ p)), (In (smash a2 a2) p), (In (smash a2 a2) (c2 :: p)), (In (smash a2 a2) (c1 :: p)), (In (smash a2 a2) (a2 :: p)), (In (smash a2 a2) (a1 :: p)), (In (smash a2 a2) (gv1 :: p)), (In (smash a2 a2) (merge p p)), (In (smash a2 a2) (heap_delete_max c2)), (In (smash a2 a2) (heap_delete_max c1))
(In (smash a2 a2) (heap_delete_max a2)), (In (smash a2 a2) (heap_delete_max a1)), (In (smash a2 a2) (heap_delete_max gv1)), (In (smash a2 a2) (join p p c2)), (In (smash a2 a2) (join p p c1)), (In (smash a2 a2) (join p p a2)), (In (smash a2 a2) (join p p a1)), (In (smash a2 a2) (join p p gv1)), (In (smash a2 a2) (insert n1 p)), (In (smash a2 a2) (insert n0 p))
(In (smash a2 a2) (insert n p)), (In (smash a2 a2) (carry p c2)), (In (smash a2 a2) (carry p c1)), (In (smash a2 a2) (carry p a2)), (In (smash a2 a2) (carry p a1)), (In (smash a2 a2) (carry p gv1)), (In (smash a2 a2) (p ++ p)), (In (smash a2 a1) p), (In (smash a2 a1) (c2 :: p)), (In (smash a2 a1) (c1 :: p))
(In (smash a2 a1) (a2 :: p)), (In (smash a2 a1) (a1 :: p)), (In (smash a2 a1) (gv1 :: p)), (In (smash a2 a1) (merge p p)), (In (smash a2 a1) (heap_delete_max c2)), (In (smash a2 a1) (heap_delete_max c1)), (In (smash a2 a1) (heap_delete_max a2)), (In (smash a2 a1) (heap_delete_max a1)), (In (smash a2 a1) (heap_delete_max gv1)), (In (smash a2 a1) (join p p c2))
(In (smash a2 a1) (join p p c1)), (In (smash a2 a1) (join p p a2)), (In (smash a2 a1) (join p p a1)), (In (smash a2 a1) (join p p gv1)), (In (smash a2 a1) (insert n1 p)), (In (smash a2 a1) (insert n0 p)), (In (smash a2 a1) (insert n p)), (In (smash a2 a1) (carry p c2)), (In (smash a2 a1) (carry p c1)), (In (smash a2 a1) (carry p a2))
(In (smash a2 a1) (carry p a1)), (In (smash a2 a1) (carry p gv1)), (In (smash a2 a1) (p ++ p)), (In (smash a2 gv1) p), (In (smash a2 gv1) (c2 :: p)), (In (smash a2 gv1) (c1 :: p)), (In (smash a2 gv1) (a2 :: p)), (In (smash a2 gv1) (a1 :: p)), (In (smash a2 gv1) (gv1 :: p)), (In (smash a2 gv1) (merge p p))
(In (smash a2 gv1) (heap_delete_max c2)), (In (smash a2 gv1) (heap_delete_max c1)), (In (smash a2 gv1) (heap_delete_max a2)), (In (smash a2 gv1) (heap_delete_max a1)), (In (smash a2 gv1) (heap_delete_max gv1)), (In (smash a2 gv1) (join p p c2)), (In (smash a2 gv1) (join p p c1)), (In (smash a2 gv1) (join p p a2)), (In (smash a2 gv1) (join p p a1)), (In (smash a2 gv1) (join p p gv1))
(In (smash a2 gv1) (insert n1 p)), (In (smash a2 gv1) (insert n0 p)), (In (smash a2 gv1) (insert n p)), (In (smash a2 gv1) (carry p c2)), (In (smash a2 gv1) (carry p c1)), (In (smash a2 gv1) (carry p a2)), (In (smash a2 gv1) (carry p a1)), (In (smash a2 gv1) (carry p gv1)), (In (smash a2 gv1) (p ++ p)), (In (smash a1 c2) p)
(In (smash a1 c2) (c2 :: p)), (In (smash a1 c2) (c1 :: p)), (In (smash a1 c2) (a2 :: p)), (In (smash a1 c2) (a1 :: p)), (In (smash a1 c2) (gv1 :: p)), (In (smash a1 c2) (merge p p)), (In (smash a1 c2) (heap_delete_max c2)), (In (smash a1 c2) (heap_delete_max c1)), (In (smash a1 c2) (heap_delete_max a2)), (In (smash a1 c2) (heap_delete_max a1))
(In (smash a1 c2) (heap_delete_max gv1)), (In (smash a1 c2) (join p p c2)), (In (smash a1 c2) (join p p c1)), (In (smash a1 c2) (join p p a2)), (In (smash a1 c2) (join p p a1)), (In (smash a1 c2) (join p p gv1)), (In (smash a1 c2) (insert n1 p)), (In (smash a1 c2) (insert n0 p)), (In (smash a1 c2) (insert n p)), (In (smash a1 c2) (carry p c2))
(In (smash a1 c2) (carry p c1)), (In (smash a1 c2) (carry p a2)), (In (smash a1 c2) (carry p a1)), (In (smash a1 c2) (carry p gv1)), (In (smash a1 c2) (p ++ p)), (In (smash a1 c1) p), (In (smash a1 c1) (c2 :: p)), (In (smash a1 c1) (c1 :: p)), (In (smash a1 c1) (a2 :: p)), (In (smash a1 c1) (a1 :: p))
(In (smash a1 c1) (gv1 :: p)), (In (smash a1 c1) (merge p p)), (In (smash a1 c1) (heap_delete_max c2)), (In (smash a1 c1) (heap_delete_max c1)), (In (smash a1 c1) (heap_delete_max a2)), (In (smash a1 c1) (heap_delete_max a1)), (In (smash a1 c1) (heap_delete_max gv1)), (In (smash a1 c1) (join p p c2)), (In (smash a1 c1) (join p p c1)), (In (smash a1 c1) (join p p a2))
(In (smash a1 c1) (join p p a1)), (In (smash a1 c1) (join p p gv1)), (In (smash a1 c1) (insert n1 p)), (In (smash a1 c1) (insert n0 p)), (In (smash a1 c1) (insert n p)), (In (smash a1 c1) (carry p c2)), (In (smash a1 c1) (carry p c1)), (In (smash a1 c1) (carry p a2)), (In (smash a1 c1) (carry p a1)), (In (smash a1 c1) (carry p gv1))
(In (smash a1 c1) (p ++ p)), (In (smash a1 a2) p), (In (smash a1 a2) (c2 :: p)), (In (smash a1 a2) (c1 :: p)), (In (smash a1 a2) (a2 :: p)), (In (smash a1 a2) (a1 :: p)), (In (smash a1 a2) (gv1 :: p)), (In (smash a1 a2) (merge p p)), (In (smash a1 a2) (heap_delete_max c2)), (In (smash a1 a2) (heap_delete_max c1))
(In (smash a1 a2) (heap_delete_max a2)), (In (smash a1 a2) (heap_delete_max a1)), (In (smash a1 a2) (heap_delete_max gv1)), (In (smash a1 a2) (join p p c2)), (In (smash a1 a2) (join p p c1)), (In (smash a1 a2) (join p p a2)), (In (smash a1 a2) (join p p a1)), (In (smash a1 a2) (join p p gv1)), (In (smash a1 a2) (insert n1 p)), (In (smash a1 a2) (insert n0 p))
(In (smash a1 a2) (insert n p)), (In (smash a1 a2) (carry p c2)), (In (smash a1 a2) (carry p c1)), (In (smash a1 a2) (carry p a2)), (In (smash a1 a2) (carry p a1)), (In (smash a1 a2) (carry p gv1)), (In (smash a1 a2) (p ++ p)), (In (smash a1 a1) p), (In (smash a1 a1) (c2 :: p)), (In (smash a1 a1) (c1 :: p))
(In (smash a1 a1) (a2 :: p)), (In (smash a1 a1) (a1 :: p)), (In (smash a1 a1) (gv1 :: p)), (In (smash a1 a1) (merge p p)), (In (smash a1 a1) (heap_delete_max c2)), (In (smash a1 a1) (heap_delete_max c1)), (In (smash a1 a1) (heap_delete_max a2)), (In (smash a1 a1) (heap_delete_max a1)), (In (smash a1 a1) (heap_delete_max gv1)), (In (smash a1 a1) (join p p c2))
(In (smash a1 a1) (join p p c1)), (In (smash a1 a1) (join p p a2)), (In (smash a1 a1) (join p p a1)), (In (smash a1 a1) (join p p gv1)), (In (smash a1 a1) (insert n1 p)), (In (smash a1 a1) (insert n0 p)), (In (smash a1 a1) (insert n p)), (In (smash a1 a1) (carry p c2)), (In (smash a1 a1) (carry p c1)), (In (smash a1 a1) (carry p a2))
(In (smash a1 a1) (carry p a1)), (In (smash a1 a1) (carry p gv1)), (In (smash a1 a1) (p ++ p)), (In (smash a1 gv1) p), (In (smash a1 gv1) (c2 :: p)), (In (smash a1 gv1) (c1 :: p)), (In (smash a1 gv1) (a2 :: p)), (In (smash a1 gv1) (a1 :: p)), (In (smash a1 gv1) (gv1 :: p)), (In (smash a1 gv1) (merge p p))
(In (smash a1 gv1) (heap_delete_max c2)), (In (smash a1 gv1) (heap_delete_max c1)), (In (smash a1 gv1) (heap_delete_max a2)), (In (smash a1 gv1) (heap_delete_max a1)), (In (smash a1 gv1) (heap_delete_max gv1)), (In (smash a1 gv1) (join p p c2)), (In (smash a1 gv1) (join p p c1)), (In (smash a1 gv1) (join p p a2)), (In (smash a1 gv1) (join p p a1)), (In (smash a1 gv1) (join p p gv1))
(In (smash a1 gv1) (insert n1 p)), (In (smash a1 gv1) (insert n0 p)), (In (smash a1 gv1) (insert n p)), (In (smash a1 gv1) (carry p c2)), (In (smash a1 gv1) (carry p c1)), (In (smash a1 gv1) (carry p a2)), (In (smash a1 gv1) (carry p a1)), (In (smash a1 gv1) (carry p gv1)), (In (smash a1 gv1) (p ++ p)), (In (smash gv1 c2) p)
(In (smash gv1 c2) (c2 :: p)), (In (smash gv1 c2) (c1 :: p)), (In (smash gv1 c2) (a2 :: p)), (In (smash gv1 c2) (a1 :: p)), (In (smash gv1 c2) (gv1 :: p)), (In (smash gv1 c2) (merge p p)), (In (smash gv1 c2) (heap_delete_max c2)), (In (smash gv1 c2) (heap_delete_max c1)), (In (smash gv1 c2) (heap_delete_max a2)), (In (smash gv1 c2) (heap_delete_max a1))
(In (smash gv1 c2) (heap_delete_max gv1)), (In (smash gv1 c2) (join p p c2)), (In (smash gv1 c2) (join p p c1)), (In (smash gv1 c2) (join p p a2)), (In (smash gv1 c2) (join p p a1)), (In (smash gv1 c2) (join p p gv1)), (In (smash gv1 c2) (insert n1 p)), (In (smash gv1 c2) (insert n0 p)), (In (smash gv1 c2) (insert n p)), (In (smash gv1 c2) (carry p c2))
(In (smash gv1 c2) (carry p c1)), (In (smash gv1 c2) (carry p a2)), (In (smash gv1 c2) (carry p a1)), (In (smash gv1 c2) (carry p gv1)), (In (smash gv1 c2) (p ++ p)), (In (smash gv1 c1) p), (In (smash gv1 c1) (c2 :: p)), (In (smash gv1 c1) (c1 :: p)), (In (smash gv1 c1) (a2 :: p)), (In (smash gv1 c1) (a1 :: p))
(In (smash gv1 c1) (gv1 :: p)), (In (smash gv1 c1) (merge p p)), (In (smash gv1 c1) (heap_delete_max c2)), (In (smash gv1 c1) (heap_delete_max c1)), (In (smash gv1 c1) (heap_delete_max a2)), (In (smash gv1 c1) (heap_delete_max a1)), (In (smash gv1 c1) (heap_delete_max gv1)), (In (smash gv1 c1) (join p p c2)), (In (smash gv1 c1) (join p p c1)), (In (smash gv1 c1) (join p p a2))
(In (smash gv1 c1) (join p p a1)), (In (smash gv1 c1) (join p p gv1)), (In (smash gv1 c1) (insert n1 p)), (In (smash gv1 c1) (insert n0 p)), (In (smash gv1 c1) (insert n p)), (In (smash gv1 c1) (carry p c2)), (In (smash gv1 c1) (carry p c1)), (In (smash gv1 c1) (carry p a2)), (In (smash gv1 c1) (carry p a1)), (In (smash gv1 c1) (carry p gv1))
(In (smash gv1 c1) (p ++ p)), (In (smash gv1 a2) p), (In (smash gv1 a2) (c2 :: p)), (In (smash gv1 a2) (c1 :: p)), (In (smash gv1 a2) (a2 :: p)), (In (smash gv1 a2) (a1 :: p)), (In (smash gv1 a2) (gv1 :: p)), (In (smash gv1 a2) (merge p p)), (In (smash gv1 a2) (heap_delete_max c2)), (In (smash gv1 a2) (heap_delete_max c1))
(In (smash gv1 a2) (heap_delete_max a2)), (In (smash gv1 a2) (heap_delete_max a1)), (In (smash gv1 a2) (heap_delete_max gv1)), (In (smash gv1 a2) (join p p c2)), (In (smash gv1 a2) (join p p c1)), (In (smash gv1 a2) (join p p a2)), (In (smash gv1 a2) (join p p a1)), (In (smash gv1 a2) (join p p gv1)), (In (smash gv1 a2) (insert n1 p)), (In (smash gv1 a2) (insert n0 p))
(In (smash gv1 a2) (insert n p)), (In (smash gv1 a2) (carry p c2)), (In (smash gv1 a2) (carry p c1)), (In (smash gv1 a2) (carry p a2)), (In (smash gv1 a2) (carry p a1)), (In (smash gv1 a2) (carry p gv1)), (In (smash gv1 a2) (p ++ p)), (In (smash gv1 a1) p), (In (smash gv1 a1) (c2 :: p)), (In (smash gv1 a1) (c1 :: p))
(In (smash gv1 a1) (a2 :: p)), (In (smash gv1 a1) (a1 :: p)), (In (smash gv1 a1) (gv1 :: p)), (In (smash gv1 a1) (merge p p)), (In (smash gv1 a1) (heap_delete_max c2)), (In (smash gv1 a1) (heap_delete_max c1)), (In (smash gv1 a1) (heap_delete_max a2)), (In (smash gv1 a1) (heap_delete_max a1)), (In (smash gv1 a1) (heap_delete_max gv1)), (In (smash gv1 a1) (join p p c2))
(In (smash gv1 a1) (join p p c1)), (In (smash gv1 a1) (join p p a2)), (In (smash gv1 a1) (join p p a1)), (In (smash gv1 a1) (join p p gv1)), (In (smash gv1 a1) (insert n1 p)), (In (smash gv1 a1) (insert n0 p)), (In (smash gv1 a1) (insert n p)), (In (smash gv1 a1) (carry p c2)), (In (smash gv1 a1) (carry p c1)), (In (smash gv1 a1) (carry p a2))
(In (smash gv1 a1) (carry p a1)), (In (smash gv1 a1) (carry p gv1)), (In (smash gv1 a1) (p ++ p)), (In (smash gv1 gv1) p), (In (smash gv1 gv1) (c2 :: p)), (In (smash gv1 gv1) (c1 :: p)), (In (smash gv1 gv1) (a2 :: p)), (In (smash gv1 gv1) (a1 :: p)), (In (smash gv1 gv1) (gv1 :: p)), (In (smash gv1 gv1) (merge p p))
(In (smash gv1 gv1) (heap_delete_max c2)), (In (smash gv1 gv1) (heap_delete_max c1)), (In (smash gv1 gv1) (heap_delete_max a2)), (In (smash gv1 gv1) (heap_delete_max a1)), (In (smash gv1 gv1) (heap_delete_max gv1)), (In (smash gv1 gv1) (join p p c2)), (In (smash gv1 gv1) (join p p c1)), (In (smash gv1 gv1) (join p p a2)), (In (smash gv1 gv1) (join p p a1)), (In (smash gv1 gv1) (join p p gv1))
(In (smash gv1 gv1) (insert n1 p)), (In (smash gv1 gv1) (insert n0 p)), (In (smash gv1 gv1) (insert n p)), (In (smash gv1 gv1) (carry p c2)), (In (smash gv1 gv1) (carry p c1)), (In (smash gv1 gv1) (carry p a2)), (In (smash gv1 gv1) (carry p a1)), (In (smash gv1 gv1) (carry p gv1)), (In (smash gv1 gv1) (p ++ p)), (In Leaf p)
(In Leaf (c2 :: p)), (In Leaf (c1 :: p)), (In Leaf (a2 :: p)), (In Leaf (a1 :: p)), (In Leaf (gv1 :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max c2)), (In Leaf (heap_delete_max c1)), (In Leaf (heap_delete_max a2)), (In Leaf (heap_delete_max a1))
(In Leaf (heap_delete_max gv1)), (In Leaf (join p p c2)), (In Leaf (join p p c1)), (In Leaf (join p p a2)), (In Leaf (join p p a1)), (In Leaf (join p p gv1)), (In Leaf (insert n1 p)), (In Leaf (insert n0 p)), (In Leaf (insert n p)), (In Leaf (carry p c2))
(In Leaf (carry p c1)), (In Leaf (carry p a2)), (In Leaf (carry p a1)), (In Leaf (carry p gv1)), (In Leaf (p ++ p)), (n1 < find_max' n1 p), (n1 < find_max' n0 p), (n1 < find_max' n p), (n1 < length p), (n0 < find_max' n1 p)
(n0 < find_max' n0 p), (n0 < find_max' n p), (n0 < length p), (n < find_max' n1 p), (n < find_max' n0 p), (n < find_max' n p), (n < length p), (find_max' n1 p < n1), (find_max' n1 p < n0), (find_max' n1 p < n)
(find_max' n1 p < find_max' n0 p), (find_max' n1 p < find_max' n p), (find_max' n1 p < length p), (find_max' n0 p < n1), (find_max' n0 p < n0), (find_max' n0 p < n), (find_max' n0 p < find_max' n1 p), (find_max' n0 p < find_max' n p), (find_max' n0 p < length p), (find_max' n p < n1)
(find_max' n p < n0), (find_max' n p < n), (find_max' n p < find_max' n1 p), (find_max' n p < find_max' n0 p), (find_max' n p < length p), (length p < n1), (length p < n0), (length p < n), (length p < find_max' n1 p), (length p < find_max' n0 p)
(length p < find_max' n p), (n1 <= find_max' n1 p), (n1 <= find_max' n0 p), (n1 <= find_max' n p), (n1 <= length p), (n0 <= find_max' n1 p), (n0 <= find_max' n0 p), (n0 <= find_max' n p), (n0 <= length p), (n <= find_max' n1 p)
(n <= find_max' n0 p), (n <= find_max' n p), (n <= length p), (find_max' n1 p <= n1), (find_max' n1 p <= n0), (find_max' n1 p <= n), (find_max' n1 p <= find_max' n0 p), (find_max' n1 p <= find_max' n p), (find_max' n1 p <= length p), (find_max' n0 p <= n1)
(find_max' n0 p <= n0), (find_max' n0 p <= n), (find_max' n0 p <= find_max' n1 p), (find_max' n0 p <= find_max' n p), (find_max' n0 p <= length p), (find_max' n p <= n1), (find_max' n p <= n0), (find_max' n p <= n), (find_max' n p <= find_max' n1 p), (find_max' n p <= find_max' n0 p)
(find_max' n p <= length p), (length p <= n1), (length p <= n0), (length p <= n), (length p <= find_max' n1 p), (length p <= find_max' n0 p), (length p <= find_max' n p), (~ priq p), (~ priqq n1 p), (~ priqq n0 p)
(~ priqq n p), (~ pow2heap n1 c2), (~ pow2heap n1 c1), (~ pow2heap n1 a2), (~ pow2heap n1 a1), (~ pow2heap n1 gv1), (~ pow2heap n0 c2), (~ pow2heap n0 c1), (~ pow2heap n0 a2), (~ pow2heap n0 a1)
(~ pow2heap n0 gv1), (~ pow2heap n c2), (~ pow2heap n c1), (~ pow2heap n a2), (~ pow2heap n a1), (~ pow2heap n gv1), (~ pow2heapp n1 n1 c2), (~ pow2heapp n1 n1 c1), (~ pow2heapp n1 n1 a2), (~ pow2heapp n1 n1 a1)
(~ pow2heapp n1 n1 gv1), (~ pow2heapp n1 n0 c2), (~ pow2heapp n1 n0 c1), (~ pow2heapp n1 n0 a2), (~ pow2heapp n1 n0 a1), (~ pow2heapp n1 n0 gv1), (~ pow2heapp n1 n c2), (~ pow2heapp n1 n c1), (~ pow2heapp n1 n a2), (~ pow2heapp n1 n a1)
(~ pow2heapp n1 n gv1), (~ pow2heapp n0 n1 c2), (~ pow2heapp n0 n1 c1), (~ pow2heapp n0 n1 a2), (~ pow2heapp n0 n1 a1), (~ pow2heapp n0 n1 gv1), (~ pow2heapp n0 n0 c2), (~ pow2heapp n0 n0 c1), (~ pow2heapp n0 n0 a2), (~ pow2heapp n0 n0 a1)
(~ pow2heapp n0 n0 gv1), (~ pow2heapp n0 n c2), (~ pow2heapp n0 n c1), (~ pow2heapp n0 n a2), (~ pow2heapp n0 n a1), (~ pow2heapp n0 n gv1), (~ pow2heapp n n1 c2), (~ pow2heapp n n1 c1), (~ pow2heapp n n1 a2), (~ pow2heapp n n1 a1)
(~ pow2heapp n n1 gv1), (~ pow2heapp n n0 c2), (~ pow2heapp n n0 c1), (~ pow2heapp n n0 a2), (~ pow2heapp n n0 a1), (~ pow2heapp n n0 gv1), (~ pow2heapp n n c2), (~ pow2heapp n n c1), (~ pow2heapp n n a2), (~ pow2heapp n n a1)
(~ pow2heapp n n gv1), (~ Permutation p p), (~ In c2 p), (~ In c1 p), (~ In a2 p), (~ In a1 p), (~ In gv1 p), (~ n1 < n1), (~ n1 < n0), (~ n1 < n)
(~ n0 < n1), (~ n0 < n0), (~ n0 < n), (~ n < n1), (~ n < n0), (~ n < n), (~ n1 <= n1), (~ n1 <= n0), (~ n1 <= n), (~ n0 <= n1)
(~ n0 <= n0), (~ n0 <= n), (~ n <= n1), (~ n <= n0), (~ n <= n), (p <> p), (c2 <> c2), (c2 <> c1), (c2 <> a2), (c2 <> a1)
(c2 <> gv1), (c1 <> c2), (c1 <> c1), (c1 <> a2), (c1 <> a1), (c1 <> gv1), (a2 <> c2), (a2 <> c1), (a2 <> a2), (a2 <> a1)
(a2 <> gv1), (a1 <> c2), (a1 <> c1), (a1 <> a2), (a1 <> a1), (a1 <> gv1), (gv1 <> c2), (gv1 <> c1), (gv1 <> a2), (gv1 <> a1)
(gv1 <> gv1), (n1 <> n1), (n1 <> n0), (n1 <> n), (n0 <> n1), (n0 <> n0), (n0 <> n), (n <> n1), (n <> n0), (n <> n)
(None = Some p), (c2 :: p = p), (c2 :: p = merge p p), (c2 :: p = heap_delete_max c2), (c2 :: p = heap_delete_max c1), (c2 :: p = heap_delete_max a2), (c2 :: p = heap_delete_max a1), (c2 :: p = heap_delete_max gv1), (c2 :: p = join p p c2), (c2 :: p = join p p c1)
(c2 :: p = join p p a2), (c2 :: p = join p p a1), (c2 :: p = join p p gv1), (c2 :: p = insert n1 p), (c2 :: p = insert n0 p), (c2 :: p = insert n p), (c2 :: p = carry p c2), (c2 :: p = carry p c1), (c2 :: p = carry p a2), (c2 :: p = carry p a1)
(c2 :: p = carry p gv1), (c2 :: p = p ++ p), (c2 :: p = []), (c1 :: p = p), (c1 :: p = merge p p), (c1 :: p = heap_delete_max c2), (c1 :: p = heap_delete_max c1), (c1 :: p = heap_delete_max a2), (c1 :: p = heap_delete_max a1), (c1 :: p = heap_delete_max gv1)
(c1 :: p = join p p c2), (c1 :: p = join p p c1), (c1 :: p = join p p a2), (c1 :: p = join p p a1), (c1 :: p = join p p gv1), (c1 :: p = insert n1 p), (c1 :: p = insert n0 p), (c1 :: p = insert n p), (c1 :: p = carry p c2), (c1 :: p = carry p c1)
(c1 :: p = carry p a2), (c1 :: p = carry p a1), (c1 :: p = carry p gv1), (c1 :: p = p ++ p), (c1 :: p = []), (a2 :: p = p), (a2 :: p = merge p p), (a2 :: p = heap_delete_max c2), (a2 :: p = heap_delete_max c1), (a2 :: p = heap_delete_max a2)
(a2 :: p = heap_delete_max a1), (a2 :: p = heap_delete_max gv1), (a2 :: p = join p p c2), (a2 :: p = join p p c1), (a2 :: p = join p p a2), (a2 :: p = join p p a1), (a2 :: p = join p p gv1), (a2 :: p = insert n1 p), (a2 :: p = insert n0 p), (a2 :: p = insert n p)
(a2 :: p = carry p c2), (a2 :: p = carry p c1), (a2 :: p = carry p a2), (a2 :: p = carry p a1), (a2 :: p = carry p gv1), (a2 :: p = p ++ p), (a2 :: p = []), (a1 :: p = p), (a1 :: p = merge p p), (a1 :: p = heap_delete_max c2)
(a1 :: p = heap_delete_max c1), (a1 :: p = heap_delete_max a2), (a1 :: p = heap_delete_max a1), (a1 :: p = heap_delete_max gv1), (a1 :: p = join p p c2), (a1 :: p = join p p c1), (a1 :: p = join p p a2), (a1 :: p = join p p a1), (a1 :: p = join p p gv1), (a1 :: p = insert n1 p)
(a1 :: p = insert n0 p), (a1 :: p = insert n p), (a1 :: p = carry p c2), (a1 :: p = carry p c1), (a1 :: p = carry p a2), (a1 :: p = carry p a1), (a1 :: p = carry p gv1), (a1 :: p = p ++ p), (a1 :: p = []), (gv1 :: p = p)
(gv1 :: p = merge p p), (gv1 :: p = heap_delete_max c2), (gv1 :: p = heap_delete_max c1), (gv1 :: p = heap_delete_max a2), (gv1 :: p = heap_delete_max a1), (gv1 :: p = heap_delete_max gv1), (gv1 :: p = join p p c2), (gv1 :: p = join p p c1), (gv1 :: p = join p p a2), (gv1 :: p = join p p a1)
(gv1 :: p = join p p gv1), (gv1 :: p = insert n1 p), (gv1 :: p = insert n0 p), (gv1 :: p = insert n p), (gv1 :: p = carry p c2), (gv1 :: p = carry p c1), (gv1 :: p = carry p a2), (gv1 :: p = carry p a1), (gv1 :: p = carry p gv1), (gv1 :: p = p ++ p)
(gv1 :: p = []), (merge p p = p), (merge p p = heap_delete_max c2), (merge p p = heap_delete_max c1), (merge p p = heap_delete_max a2), (merge p p = heap_delete_max a1), (merge p p = heap_delete_max gv1), (merge p p = join p p c2), (merge p p = join p p c1), (merge p p = join p p a2)
(merge p p = join p p a1), (merge p p = join p p gv1), (merge p p = insert n1 p), (merge p p = insert n0 p), (merge p p = insert n p), (merge p p = carry p c2), (merge p p = carry p c1), (merge p p = carry p a2), (merge p p = carry p a1), (merge p p = carry p gv1)
(merge p p = p ++ p), (heap_delete_max c2 = p), (heap_delete_max c2 = carry p c2), (heap_delete_max c2 = carry p c1), (heap_delete_max c2 = carry p a2), (heap_delete_max c2 = carry p a1), (heap_delete_max c2 = carry p gv1), (heap_delete_max c2 = p ++ p), (heap_delete_max c1 = p), (heap_delete_max c1 = carry p c2)
(heap_delete_max c1 = carry p c1), (heap_delete_max c1 = carry p a2), (heap_delete_max c1 = carry p a1), (heap_delete_max c1 = carry p gv1), (heap_delete_max c1 = p ++ p), (heap_delete_max a2 = p), (heap_delete_max a2 = carry p c2), (heap_delete_max a2 = carry p c1), (heap_delete_max a2 = carry p a2), (heap_delete_max a2 = carry p a1)
(heap_delete_max a2 = carry p gv1), (heap_delete_max a2 = p ++ p), (heap_delete_max a1 = p), (heap_delete_max a1 = carry p c2), (heap_delete_max a1 = carry p c1), (heap_delete_max a1 = carry p a2), (heap_delete_max a1 = carry p a1), (heap_delete_max a1 = carry p gv1), (heap_delete_max a1 = p ++ p), (heap_delete_max gv1 = p)
(heap_delete_max gv1 = carry p c2), (heap_delete_max gv1 = carry p c1), (heap_delete_max gv1 = carry p a2), (heap_delete_max gv1 = carry p a1), (heap_delete_max gv1 = carry p gv1), (heap_delete_max gv1 = p ++ p), (join p p c2 = p), (join p p c2 = heap_delete_max c2), (join p p c2 = heap_delete_max c1), (join p p c2 = heap_delete_max a2)
(join p p c2 = heap_delete_max a1), (join p p c2 = heap_delete_max gv1), (join p p c2 = insert n1 p), (join p p c2 = insert n0 p), (join p p c2 = insert n p), (join p p c2 = carry p c2), (join p p c2 = carry p c1), (join p p c2 = carry p a2), (join p p c2 = carry p a1), (join p p c2 = carry p gv1)
(join p p c2 = p ++ p), (join p p c1 = p), (join p p c1 = heap_delete_max c2), (join p p c1 = heap_delete_max c1), (join p p c1 = heap_delete_max a2), (join p p c1 = heap_delete_max a1), (join p p c1 = heap_delete_max gv1), (join p p c1 = insert n1 p), (join p p c1 = insert n0 p), (join p p c1 = insert n p)
(join p p c1 = carry p c2), (join p p c1 = carry p c1), (join p p c1 = carry p a2), (join p p c1 = carry p a1), (join p p c1 = carry p gv1), (join p p c1 = p ++ p), (join p p a2 = p), (join p p a2 = heap_delete_max c2), (join p p a2 = heap_delete_max c1), (join p p a2 = heap_delete_max a2)
(join p p a2 = heap_delete_max a1), (join p p a2 = heap_delete_max gv1), (join p p a2 = insert n1 p), (join p p a2 = insert n0 p), (join p p a2 = insert n p), (join p p a2 = carry p c2), (join p p a2 = carry p c1), (join p p a2 = carry p a2), (join p p a2 = carry p a1), (join p p a2 = carry p gv1)
(join p p a2 = p ++ p), (join p p a1 = p), (join p p a1 = heap_delete_max c2), (join p p a1 = heap_delete_max c1), (join p p a1 = heap_delete_max a2), (join p p a1 = heap_delete_max a1), (join p p a1 = heap_delete_max gv1), (join p p a1 = insert n1 p), (join p p a1 = insert n0 p), (join p p a1 = insert n p)
(join p p a1 = carry p c2), (join p p a1 = carry p c1), (join p p a1 = carry p a2), (join p p a1 = carry p a1), (join p p a1 = carry p gv1), (join p p a1 = p ++ p), (join p p gv1 = p), (join p p gv1 = heap_delete_max c2), (join p p gv1 = heap_delete_max c1), (join p p gv1 = heap_delete_max a2)
(join p p gv1 = heap_delete_max a1), (join p p gv1 = heap_delete_max gv1), (join p p gv1 = insert n1 p), (join p p gv1 = insert n0 p), (join p p gv1 = insert n p), (join p p gv1 = carry p c2), (join p p gv1 = carry p c1), (join p p gv1 = carry p a2), (join p p gv1 = carry p a1), (join p p gv1 = carry p gv1)
(join p p gv1 = p ++ p), (insert n1 p = p), (insert n1 p = heap_delete_max c2), (insert n1 p = heap_delete_max c1), (insert n1 p = heap_delete_max a2), (insert n1 p = heap_delete_max a1), (insert n1 p = heap_delete_max gv1), (insert n1 p = carry p c2), (insert n1 p = carry p c1), (insert n1 p = carry p a2)
(insert n1 p = carry p a1), (insert n1 p = carry p gv1), (insert n1 p = p ++ p), (insert n0 p = p), (insert n0 p = heap_delete_max c2), (insert n0 p = heap_delete_max c1), (insert n0 p = heap_delete_max a2), (insert n0 p = heap_delete_max a1), (insert n0 p = heap_delete_max gv1), (insert n0 p = carry p c2)
(insert n0 p = carry p c1), (insert n0 p = carry p a2), (insert n0 p = carry p a1), (insert n0 p = carry p gv1), (insert n0 p = p ++ p), (insert n p = p), (insert n p = heap_delete_max c2), (insert n p = heap_delete_max c1), (insert n p = heap_delete_max a2), (insert n p = heap_delete_max a1)
(insert n p = heap_delete_max gv1), (insert n p = carry p c2), (insert n p = carry p c1), (insert n p = carry p a2), (insert n p = carry p a1), (insert n p = carry p gv1), (insert n p = p ++ p), (carry p c2 = p), (carry p c2 = p ++ p), (carry p c1 = p)
(carry p c1 = p ++ p), (carry p a2 = p), (carry p a2 = p ++ p), (carry p a1 = p), (carry p a1 = p ++ p), (carry p gv1 = p), (carry p gv1 = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p)
([] = heap_delete_max c2), ([] = heap_delete_max c1), ([] = heap_delete_max a2), ([] = heap_delete_max a1), ([] = heap_delete_max gv1), ([] = join p p c2), ([] = join p p c1), ([] = join p p a2), ([] = join p p a1), ([] = join p p gv1)
([] = insert n1 p), ([] = insert n0 p), ([] = insert n p), ([] = carry p c2), ([] = carry p c1), ([] = carry p a2), ([] = carry p a1), ([] = carry p gv1), ([] = p ++ p), ((p, p) = delete_max_aux n1 p)
((p, p) = delete_max_aux n0 p), ((p, p) = delete_max_aux n p), (Node n1 c2 c2 = c2), (Node n1 c2 c2 = c1), (Node n1 c2 c2 = a2), (Node n1 c2 c2 = a1), (Node n1 c2 c2 = gv1), (Node n1 c2 c2 = smash c2 c2), (Node n1 c2 c2 = smash c2 c1), (Node n1 c2 c2 = smash c2 a2)
(Node n1 c2 c2 = smash c2 a1), (Node n1 c2 c2 = smash c2 gv1), (Node n1 c2 c2 = smash c1 c2), (Node n1 c2 c2 = smash c1 c1), (Node n1 c2 c2 = smash c1 a2), (Node n1 c2 c2 = smash c1 a1), (Node n1 c2 c2 = smash c1 gv1), (Node n1 c2 c2 = smash a2 c2), (Node n1 c2 c2 = smash a2 c1), (Node n1 c2 c2 = smash a2 a2)
(Node n1 c2 c2 = smash a2 a1), (Node n1 c2 c2 = smash a2 gv1), (Node n1 c2 c2 = smash a1 c2), (Node n1 c2 c2 = smash a1 c1), (Node n1 c2 c2 = smash a1 a2), (Node n1 c2 c2 = smash a1 a1), (Node n1 c2 c2 = smash a1 gv1), (Node n1 c2 c2 = smash gv1 c2), (Node n1 c2 c2 = smash gv1 c1), (Node n1 c2 c2 = smash gv1 a2)
(Node n1 c2 c2 = smash gv1 a1), (Node n1 c2 c2 = smash gv1 gv1), (Node n1 c2 c1 = c2), (Node n1 c2 c1 = c1), (Node n1 c2 c1 = a2), (Node n1 c2 c1 = a1), (Node n1 c2 c1 = gv1), (Node n1 c2 c1 = smash c2 c2), (Node n1 c2 c1 = smash c2 c1), (Node n1 c2 c1 = smash c2 a2)
(Node n1 c2 c1 = smash c2 a1), (Node n1 c2 c1 = smash c2 gv1), (Node n1 c2 c1 = smash c1 c2), (Node n1 c2 c1 = smash c1 c1), (Node n1 c2 c1 = smash c1 a2), (Node n1 c2 c1 = smash c1 a1), (Node n1 c2 c1 = smash c1 gv1), (Node n1 c2 c1 = smash a2 c2), (Node n1 c2 c1 = smash a2 c1), (Node n1 c2 c1 = smash a2 a2)
(Node n1 c2 c1 = smash a2 a1), (Node n1 c2 c1 = smash a2 gv1), (Node n1 c2 c1 = smash a1 c2), (Node n1 c2 c1 = smash a1 c1), (Node n1 c2 c1 = smash a1 a2), (Node n1 c2 c1 = smash a1 a1), (Node n1 c2 c1 = smash a1 gv1), (Node n1 c2 c1 = smash gv1 c2), (Node n1 c2 c1 = smash gv1 c1), (Node n1 c2 c1 = smash gv1 a2)
(Node n1 c2 c1 = smash gv1 a1), (Node n1 c2 c1 = smash gv1 gv1), (Node n1 c2 a2 = c2), (Node n1 c2 a2 = c1), (Node n1 c2 a2 = a2), (Node n1 c2 a2 = a1), (Node n1 c2 a2 = gv1), (Node n1 c2 a2 = smash c2 c2), (Node n1 c2 a2 = smash c2 c1), (Node n1 c2 a2 = smash c2 a2)
(Node n1 c2 a2 = smash c2 a1), (Node n1 c2 a2 = smash c2 gv1), (Node n1 c2 a2 = smash c1 c2), (Node n1 c2 a2 = smash c1 c1), (Node n1 c2 a2 = smash c1 a2), (Node n1 c2 a2 = smash c1 a1), (Node n1 c2 a2 = smash c1 gv1), (Node n1 c2 a2 = smash a2 c2), (Node n1 c2 a2 = smash a2 c1), (Node n1 c2 a2 = smash a2 a2)
(Node n1 c2 a2 = smash a2 a1), (Node n1 c2 a2 = smash a2 gv1), (Node n1 c2 a2 = smash a1 c2), (Node n1 c2 a2 = smash a1 c1), (Node n1 c2 a2 = smash a1 a2), (Node n1 c2 a2 = smash a1 a1), (Node n1 c2 a2 = smash a1 gv1), (Node n1 c2 a2 = smash gv1 c2), (Node n1 c2 a2 = smash gv1 c1), (Node n1 c2 a2 = smash gv1 a2)
(Node n1 c2 a2 = smash gv1 a1), (Node n1 c2 a2 = smash gv1 gv1), (Node n1 c2 a1 = c2), (Node n1 c2 a1 = c1), (Node n1 c2 a1 = a2), (Node n1 c2 a1 = a1), (Node n1 c2 a1 = gv1), (Node n1 c2 a1 = smash c2 c2), (Node n1 c2 a1 = smash c2 c1), (Node n1 c2 a1 = smash c2 a2)
(Node n1 c2 a1 = smash c2 a1), (Node n1 c2 a1 = smash c2 gv1), (Node n1 c2 a1 = smash c1 c2), (Node n1 c2 a1 = smash c1 c1), (Node n1 c2 a1 = smash c1 a2), (Node n1 c2 a1 = smash c1 a1), (Node n1 c2 a1 = smash c1 gv1), (Node n1 c2 a1 = smash a2 c2), (Node n1 c2 a1 = smash a2 c1), (Node n1 c2 a1 = smash a2 a2)
(Node n1 c2 a1 = smash a2 a1), (Node n1 c2 a1 = smash a2 gv1), (Node n1 c2 a1 = smash a1 c2), (Node n1 c2 a1 = smash a1 c1), (Node n1 c2 a1 = smash a1 a2), (Node n1 c2 a1 = smash a1 a1), (Node n1 c2 a1 = smash a1 gv1), (Node n1 c2 a1 = smash gv1 c2), (Node n1 c2 a1 = smash gv1 c1), (Node n1 c2 a1 = smash gv1 a2)
(Node n1 c2 a1 = smash gv1 a1), (Node n1 c2 a1 = smash gv1 gv1), (Node n1 c2 gv1 = c2), (Node n1 c2 gv1 = c1), (Node n1 c2 gv1 = a2), (Node n1 c2 gv1 = a1), (Node n1 c2 gv1 = gv1), (Node n1 c2 gv1 = smash c2 c2), (Node n1 c2 gv1 = smash c2 c1), (Node n1 c2 gv1 = smash c2 a2)
(Node n1 c2 gv1 = smash c2 a1), (Node n1 c2 gv1 = smash c2 gv1), (Node n1 c2 gv1 = smash c1 c2), (Node n1 c2 gv1 = smash c1 c1), (Node n1 c2 gv1 = smash c1 a2), (Node n1 c2 gv1 = smash c1 a1), (Node n1 c2 gv1 = smash c1 gv1), (Node n1 c2 gv1 = smash a2 c2), (Node n1 c2 gv1 = smash a2 c1), (Node n1 c2 gv1 = smash a2 a2)
(Node n1 c2 gv1 = smash a2 a1), (Node n1 c2 gv1 = smash a2 gv1), (Node n1 c2 gv1 = smash a1 c2), (Node n1 c2 gv1 = smash a1 c1), (Node n1 c2 gv1 = smash a1 a2), (Node n1 c2 gv1 = smash a1 a1), (Node n1 c2 gv1 = smash a1 gv1), (Node n1 c2 gv1 = smash gv1 c2), (Node n1 c2 gv1 = smash gv1 c1), (Node n1 c2 gv1 = smash gv1 a2)
(Node n1 c2 gv1 = smash gv1 a1), (Node n1 c2 gv1 = smash gv1 gv1), (Node n1 c1 c2 = c2), (Node n1 c1 c2 = c1), (Node n1 c1 c2 = a2), (Node n1 c1 c2 = a1), (Node n1 c1 c2 = gv1), (Node n1 c1 c2 = smash c2 c2), (Node n1 c1 c2 = smash c2 c1), (Node n1 c1 c2 = smash c2 a2)
(Node n1 c1 c2 = smash c2 a1), (Node n1 c1 c2 = smash c2 gv1), (Node n1 c1 c2 = smash c1 c2), (Node n1 c1 c2 = smash c1 c1), (Node n1 c1 c2 = smash c1 a2), (Node n1 c1 c2 = smash c1 a1), (Node n1 c1 c2 = smash c1 gv1), (Node n1 c1 c2 = smash a2 c2), (Node n1 c1 c2 = smash a2 c1), (Node n1 c1 c2 = smash a2 a2)
(Node n1 c1 c2 = smash a2 a1), (Node n1 c1 c2 = smash a2 gv1), (Node n1 c1 c2 = smash a1 c2), (Node n1 c1 c2 = smash a1 c1), (Node n1 c1 c2 = smash a1 a2), (Node n1 c1 c2 = smash a1 a1), (Node n1 c1 c2 = smash a1 gv1), (Node n1 c1 c2 = smash gv1 c2), (Node n1 c1 c2 = smash gv1 c1), (Node n1 c1 c2 = smash gv1 a2)
(Node n1 c1 c2 = smash gv1 a1), (Node n1 c1 c2 = smash gv1 gv1), (Node n1 c1 c1 = c2), (Node n1 c1 c1 = c1), (Node n1 c1 c1 = a2), (Node n1 c1 c1 = a1), (Node n1 c1 c1 = gv1), (Node n1 c1 c1 = smash c2 c2), (Node n1 c1 c1 = smash c2 c1), (Node n1 c1 c1 = smash c2 a2)
(Node n1 c1 c1 = smash c2 a1), (Node n1 c1 c1 = smash c2 gv1), (Node n1 c1 c1 = smash c1 c2), (Node n1 c1 c1 = smash c1 c1), (Node n1 c1 c1 = smash c1 a2), (Node n1 c1 c1 = smash c1 a1), (Node n1 c1 c1 = smash c1 gv1), (Node n1 c1 c1 = smash a2 c2), (Node n1 c1 c1 = smash a2 c1), (Node n1 c1 c1 = smash a2 a2)
(Node n1 c1 c1 = smash a2 a1), (Node n1 c1 c1 = smash a2 gv1), (Node n1 c1 c1 = smash a1 c2), (Node n1 c1 c1 = smash a1 c1), (Node n1 c1 c1 = smash a1 a2), (Node n1 c1 c1 = smash a1 a1), (Node n1 c1 c1 = smash a1 gv1), (Node n1 c1 c1 = smash gv1 c2), (Node n1 c1 c1 = smash gv1 c1), (Node n1 c1 c1 = smash gv1 a2)
(Node n1 c1 c1 = smash gv1 a1), (Node n1 c1 c1 = smash gv1 gv1), (Node n1 c1 a2 = c2), (Node n1 c1 a2 = c1), (Node n1 c1 a2 = a2), (Node n1 c1 a2 = a1), (Node n1 c1 a2 = gv1), (Node n1 c1 a2 = smash c2 c2), (Node n1 c1 a2 = smash c2 c1), (Node n1 c1 a2 = smash c2 a2)
(Node n1 c1 a2 = smash c2 a1), (Node n1 c1 a2 = smash c2 gv1), (Node n1 c1 a2 = smash c1 c2), (Node n1 c1 a2 = smash c1 c1), (Node n1 c1 a2 = smash c1 a2), (Node n1 c1 a2 = smash c1 a1), (Node n1 c1 a2 = smash c1 gv1), (Node n1 c1 a2 = smash a2 c2), (Node n1 c1 a2 = smash a2 c1), (Node n1 c1 a2 = smash a2 a2)
(Node n1 c1 a2 = smash a2 a1), (Node n1 c1 a2 = smash a2 gv1), (Node n1 c1 a2 = smash a1 c2), (Node n1 c1 a2 = smash a1 c1), (Node n1 c1 a2 = smash a1 a2), (Node n1 c1 a2 = smash a1 a1), (Node n1 c1 a2 = smash a1 gv1), (Node n1 c1 a2 = smash gv1 c2), (Node n1 c1 a2 = smash gv1 c1), (Node n1 c1 a2 = smash gv1 a2)
(Node n1 c1 a2 = smash gv1 a1), (Node n1 c1 a2 = smash gv1 gv1), (Node n1 c1 a1 = c2), (Node n1 c1 a1 = c1), (Node n1 c1 a1 = a2), (Node n1 c1 a1 = a1), (Node n1 c1 a1 = gv1), (Node n1 c1 a1 = smash c2 c2), (Node n1 c1 a1 = smash c2 c1), (Node n1 c1 a1 = smash c2 a2)
(Node n1 c1 a1 = smash c2 a1), (Node n1 c1 a1 = smash c2 gv1), (Node n1 c1 a1 = smash c1 c2), (Node n1 c1 a1 = smash c1 c1), (Node n1 c1 a1 = smash c1 a2), (Node n1 c1 a1 = smash c1 a1), (Node n1 c1 a1 = smash c1 gv1), (Node n1 c1 a1 = smash a2 c2), (Node n1 c1 a1 = smash a2 c1), (Node n1 c1 a1 = smash a2 a2)
(Node n1 c1 a1 = smash a2 a1), (Node n1 c1 a1 = smash a2 gv1), (Node n1 c1 a1 = smash a1 c2), (Node n1 c1 a1 = smash a1 c1), (Node n1 c1 a1 = smash a1 a2), (Node n1 c1 a1 = smash a1 a1), (Node n1 c1 a1 = smash a1 gv1), (Node n1 c1 a1 = smash gv1 c2), (Node n1 c1 a1 = smash gv1 c1), (Node n1 c1 a1 = smash gv1 a2)
(Node n1 c1 a1 = smash gv1 a1), (Node n1 c1 a1 = smash gv1 gv1), (Node n1 c1 gv1 = c2), (Node n1 c1 gv1 = c1), (Node n1 c1 gv1 = a2), (Node n1 c1 gv1 = a1), (Node n1 c1 gv1 = gv1), (Node n1 c1 gv1 = smash c2 c2), (Node n1 c1 gv1 = smash c2 c1), (Node n1 c1 gv1 = smash c2 a2)
(Node n1 c1 gv1 = smash c2 a1), (Node n1 c1 gv1 = smash c2 gv1), (Node n1 c1 gv1 = smash c1 c2), (Node n1 c1 gv1 = smash c1 c1), (Node n1 c1 gv1 = smash c1 a2), (Node n1 c1 gv1 = smash c1 a1), (Node n1 c1 gv1 = smash c1 gv1), (Node n1 c1 gv1 = smash a2 c2), (Node n1 c1 gv1 = smash a2 c1), (Node n1 c1 gv1 = smash a2 a2)
(Node n1 c1 gv1 = smash a2 a1), (Node n1 c1 gv1 = smash a2 gv1), (Node n1 c1 gv1 = smash a1 c2), (Node n1 c1 gv1 = smash a1 c1), (Node n1 c1 gv1 = smash a1 a2), (Node n1 c1 gv1 = smash a1 a1), (Node n1 c1 gv1 = smash a1 gv1), (Node n1 c1 gv1 = smash gv1 c2), (Node n1 c1 gv1 = smash gv1 c1), (Node n1 c1 gv1 = smash gv1 a2)
(Node n1 c1 gv1 = smash gv1 a1), (Node n1 c1 gv1 = smash gv1 gv1), (Node n1 a2 c2 = c2), (Node n1 a2 c2 = c1), (Node n1 a2 c2 = a2), (Node n1 a2 c2 = a1), (Node n1 a2 c2 = gv1), (Node n1 a2 c2 = smash c2 c2), (Node n1 a2 c2 = smash c2 c1), (Node n1 a2 c2 = smash c2 a2)
(Node n1 a2 c2 = smash c2 a1), (Node n1 a2 c2 = smash c2 gv1), (Node n1 a2 c2 = smash c1 c2), (Node n1 a2 c2 = smash c1 c1), (Node n1 a2 c2 = smash c1 a2), (Node n1 a2 c2 = smash c1 a1), (Node n1 a2 c2 = smash c1 gv1), (Node n1 a2 c2 = smash a2 c2), (Node n1 a2 c2 = smash a2 c1), (Node n1 a2 c2 = smash a2 a2)
(Node n1 a2 c2 = smash a2 a1), (Node n1 a2 c2 = smash a2 gv1), (Node n1 a2 c2 = smash a1 c2), (Node n1 a2 c2 = smash a1 c1), (Node n1 a2 c2 = smash a1 a2), (Node n1 a2 c2 = smash a1 a1), (Node n1 a2 c2 = smash a1 gv1), (Node n1 a2 c2 = smash gv1 c2), (Node n1 a2 c2 = smash gv1 c1), (Node n1 a2 c2 = smash gv1 a2)
(Node n1 a2 c2 = smash gv1 a1), (Node n1 a2 c2 = smash gv1 gv1), (Node n1 a2 c1 = c2), (Node n1 a2 c1 = c1), (Node n1 a2 c1 = a2), (Node n1 a2 c1 = a1), (Node n1 a2 c1 = gv1), (Node n1 a2 c1 = smash c2 c2), (Node n1 a2 c1 = smash c2 c1), (Node n1 a2 c1 = smash c2 a2)
(Node n1 a2 c1 = smash c2 a1), (Node n1 a2 c1 = smash c2 gv1), (Node n1 a2 c1 = smash c1 c2), (Node n1 a2 c1 = smash c1 c1), (Node n1 a2 c1 = smash c1 a2), (Node n1 a2 c1 = smash c1 a1), (Node n1 a2 c1 = smash c1 gv1), (Node n1 a2 c1 = smash a2 c2), (Node n1 a2 c1 = smash a2 c1), (Node n1 a2 c1 = smash a2 a2)
(Node n1 a2 c1 = smash a2 a1), (Node n1 a2 c1 = smash a2 gv1), (Node n1 a2 c1 = smash a1 c2), (Node n1 a2 c1 = smash a1 c1), (Node n1 a2 c1 = smash a1 a2), (Node n1 a2 c1 = smash a1 a1), (Node n1 a2 c1 = smash a1 gv1), (Node n1 a2 c1 = smash gv1 c2), (Node n1 a2 c1 = smash gv1 c1), (Node n1 a2 c1 = smash gv1 a2)
(Node n1 a2 c1 = smash gv1 a1), (Node n1 a2 c1 = smash gv1 gv1), (Node n1 a2 a2 = c2), (Node n1 a2 a2 = c1), (Node n1 a2 a2 = a2), (Node n1 a2 a2 = a1), (Node n1 a2 a2 = gv1), (Node n1 a2 a2 = smash c2 c2), (Node n1 a2 a2 = smash c2 c1), (Node n1 a2 a2 = smash c2 a2)
(Node n1 a2 a2 = smash c2 a1), (Node n1 a2 a2 = smash c2 gv1), (Node n1 a2 a2 = smash c1 c2), (Node n1 a2 a2 = smash c1 c1), (Node n1 a2 a2 = smash c1 a2), (Node n1 a2 a2 = smash c1 a1), (Node n1 a2 a2 = smash c1 gv1), (Node n1 a2 a2 = smash a2 c2), (Node n1 a2 a2 = smash a2 c1), (Node n1 a2 a2 = smash a2 a2)
(Node n1 a2 a2 = smash a2 a1), (Node n1 a2 a2 = smash a2 gv1), (Node n1 a2 a2 = smash a1 c2), (Node n1 a2 a2 = smash a1 c1), (Node n1 a2 a2 = smash a1 a2), (Node n1 a2 a2 = smash a1 a1), (Node n1 a2 a2 = smash a1 gv1), (Node n1 a2 a2 = smash gv1 c2), (Node n1 a2 a2 = smash gv1 c1), (Node n1 a2 a2 = smash gv1 a2)
(Node n1 a2 a2 = smash gv1 a1), (Node n1 a2 a2 = smash gv1 gv1), (Node n1 a2 a1 = c2), (Node n1 a2 a1 = c1), (Node n1 a2 a1 = a2), (Node n1 a2 a1 = a1), (Node n1 a2 a1 = gv1), (Node n1 a2 a1 = smash c2 c2), (Node n1 a2 a1 = smash c2 c1), (Node n1 a2 a1 = smash c2 a2)
(Node n1 a2 a1 = smash c2 a1), (Node n1 a2 a1 = smash c2 gv1), (Node n1 a2 a1 = smash c1 c2), (Node n1 a2 a1 = smash c1 c1), (Node n1 a2 a1 = smash c1 a2), (Node n1 a2 a1 = smash c1 a1), (Node n1 a2 a1 = smash c1 gv1), (Node n1 a2 a1 = smash a2 c2), (Node n1 a2 a1 = smash a2 c1), (Node n1 a2 a1 = smash a2 a2)
(Node n1 a2 a1 = smash a2 a1), (Node n1 a2 a1 = smash a2 gv1), (Node n1 a2 a1 = smash a1 c2), (Node n1 a2 a1 = smash a1 c1), (Node n1 a2 a1 = smash a1 a2), (Node n1 a2 a1 = smash a1 a1), (Node n1 a2 a1 = smash a1 gv1), (Node n1 a2 a1 = smash gv1 c2), (Node n1 a2 a1 = smash gv1 c1), (Node n1 a2 a1 = smash gv1 a2)
(Node n1 a2 a1 = smash gv1 a1), (Node n1 a2 a1 = smash gv1 gv1), (Node n1 a2 gv1 = c2), (Node n1 a2 gv1 = c1), (Node n1 a2 gv1 = a2), (Node n1 a2 gv1 = a1), (Node n1 a2 gv1 = gv1), (Node n1 a2 gv1 = smash c2 c2), (Node n1 a2 gv1 = smash c2 c1), (Node n1 a2 gv1 = smash c2 a2)
(Node n1 a2 gv1 = smash c2 a1), (Node n1 a2 gv1 = smash c2 gv1), (Node n1 a2 gv1 = smash c1 c2), (Node n1 a2 gv1 = smash c1 c1), (Node n1 a2 gv1 = smash c1 a2), (Node n1 a2 gv1 = smash c1 a1), (Node n1 a2 gv1 = smash c1 gv1), (Node n1 a2 gv1 = smash a2 c2), (Node n1 a2 gv1 = smash a2 c1), (Node n1 a2 gv1 = smash a2 a2)
(Node n1 a2 gv1 = smash a2 a1), (Node n1 a2 gv1 = smash a2 gv1), (Node n1 a2 gv1 = smash a1 c2), (Node n1 a2 gv1 = smash a1 c1), (Node n1 a2 gv1 = smash a1 a2), (Node n1 a2 gv1 = smash a1 a1), (Node n1 a2 gv1 = smash a1 gv1), (Node n1 a2 gv1 = smash gv1 c2), (Node n1 a2 gv1 = smash gv1 c1), (Node n1 a2 gv1 = smash gv1 a2)
(Node n1 a2 gv1 = smash gv1 a1), (Node n1 a2 gv1 = smash gv1 gv1), (Node n1 a1 c2 = c2), (Node n1 a1 c2 = c1), (Node n1 a1 c2 = a2), (Node n1 a1 c2 = a1), (Node n1 a1 c2 = gv1), (Node n1 a1 c2 = smash c2 c2), (Node n1 a1 c2 = smash c2 c1), (Node n1 a1 c2 = smash c2 a2)
(Node n1 a1 c2 = smash c2 a1), (Node n1 a1 c2 = smash c2 gv1), (Node n1 a1 c2 = smash c1 c2), (Node n1 a1 c2 = smash c1 c1), (Node n1 a1 c2 = smash c1 a2), (Node n1 a1 c2 = smash c1 a1), (Node n1 a1 c2 = smash c1 gv1), (Node n1 a1 c2 = smash a2 c2), (Node n1 a1 c2 = smash a2 c1), (Node n1 a1 c2 = smash a2 a2)
(Node n1 a1 c2 = smash a2 a1), (Node n1 a1 c2 = smash a2 gv1), (Node n1 a1 c2 = smash a1 c2), (Node n1 a1 c2 = smash a1 c1), (Node n1 a1 c2 = smash a1 a2), (Node n1 a1 c2 = smash a1 a1), (Node n1 a1 c2 = smash a1 gv1), (Node n1 a1 c2 = smash gv1 c2), (Node n1 a1 c2 = smash gv1 c1), (Node n1 a1 c2 = smash gv1 a2)
(Node n1 a1 c2 = smash gv1 a1), (Node n1 a1 c2 = smash gv1 gv1), (Node n1 a1 c1 = c2), (Node n1 a1 c1 = c1), (Node n1 a1 c1 = a2), (Node n1 a1 c1 = a1), (Node n1 a1 c1 = gv1), (Node n1 a1 c1 = smash c2 c2), (Node n1 a1 c1 = smash c2 c1), (Node n1 a1 c1 = smash c2 a2)
(Node n1 a1 c1 = smash c2 a1), (Node n1 a1 c1 = smash c2 gv1), (Node n1 a1 c1 = smash c1 c2), (Node n1 a1 c1 = smash c1 c1), (Node n1 a1 c1 = smash c1 a2), (Node n1 a1 c1 = smash c1 a1), (Node n1 a1 c1 = smash c1 gv1), (Node n1 a1 c1 = smash a2 c2), (Node n1 a1 c1 = smash a2 c1), (Node n1 a1 c1 = smash a2 a2)
(Node n1 a1 c1 = smash a2 a1), (Node n1 a1 c1 = smash a2 gv1), (Node n1 a1 c1 = smash a1 c2), (Node n1 a1 c1 = smash a1 c1), (Node n1 a1 c1 = smash a1 a2), (Node n1 a1 c1 = smash a1 a1), (Node n1 a1 c1 = smash a1 gv1), (Node n1 a1 c1 = smash gv1 c2), (Node n1 a1 c1 = smash gv1 c1), (Node n1 a1 c1 = smash gv1 a2)
(Node n1 a1 c1 = smash gv1 a1), (Node n1 a1 c1 = smash gv1 gv1), (Node n1 a1 a2 = c2), (Node n1 a1 a2 = c1), (Node n1 a1 a2 = a2), (Node n1 a1 a2 = a1), (Node n1 a1 a2 = gv1), (Node n1 a1 a2 = smash c2 c2), (Node n1 a1 a2 = smash c2 c1), (Node n1 a1 a2 = smash c2 a2)
(Node n1 a1 a2 = smash c2 a1), (Node n1 a1 a2 = smash c2 gv1), (Node n1 a1 a2 = smash c1 c2), (Node n1 a1 a2 = smash c1 c1), (Node n1 a1 a2 = smash c1 a2), (Node n1 a1 a2 = smash c1 a1), (Node n1 a1 a2 = smash c1 gv1), (Node n1 a1 a2 = smash a2 c2), (Node n1 a1 a2 = smash a2 c1), (Node n1 a1 a2 = smash a2 a2)
(Node n1 a1 a2 = smash a2 a1), (Node n1 a1 a2 = smash a2 gv1), (Node n1 a1 a2 = smash a1 c2), (Node n1 a1 a2 = smash a1 c1), (Node n1 a1 a2 = smash a1 a2), (Node n1 a1 a2 = smash a1 a1), (Node n1 a1 a2 = smash a1 gv1), (Node n1 a1 a2 = smash gv1 c2), (Node n1 a1 a2 = smash gv1 c1), (Node n1 a1 a2 = smash gv1 a2)
(Node n1 a1 a2 = smash gv1 a1), (Node n1 a1 a2 = smash gv1 gv1), (Node n1 a1 a1 = c2), (Node n1 a1 a1 = c1), (Node n1 a1 a1 = a2), (Node n1 a1 a1 = a1), (Node n1 a1 a1 = gv1), (Node n1 a1 a1 = smash c2 c2), (Node n1 a1 a1 = smash c2 c1), (Node n1 a1 a1 = smash c2 a2)
(Node n1 a1 a1 = smash c2 a1), (Node n1 a1 a1 = smash c2 gv1), (Node n1 a1 a1 = smash c1 c2), (Node n1 a1 a1 = smash c1 c1), (Node n1 a1 a1 = smash c1 a2), (Node n1 a1 a1 = smash c1 a1), (Node n1 a1 a1 = smash c1 gv1), (Node n1 a1 a1 = smash a2 c2), (Node n1 a1 a1 = smash a2 c1), (Node n1 a1 a1 = smash a2 a2)
(Node n1 a1 a1 = smash a2 a1), (Node n1 a1 a1 = smash a2 gv1), (Node n1 a1 a1 = smash a1 c2), (Node n1 a1 a1 = smash a1 c1), (Node n1 a1 a1 = smash a1 a2), (Node n1 a1 a1 = smash a1 a1), (Node n1 a1 a1 = smash a1 gv1), (Node n1 a1 a1 = smash gv1 c2), (Node n1 a1 a1 = smash gv1 c1), (Node n1 a1 a1 = smash gv1 a2)
(Node n1 a1 a1 = smash gv1 a1), (Node n1 a1 a1 = smash gv1 gv1), (Node n1 a1 gv1 = c2), (Node n1 a1 gv1 = c1), (Node n1 a1 gv1 = a2), (Node n1 a1 gv1 = a1), (Node n1 a1 gv1 = gv1), (Node n1 a1 gv1 = smash c2 c2), (Node n1 a1 gv1 = smash c2 c1), (Node n1 a1 gv1 = smash c2 a2)
(Node n1 a1 gv1 = smash c2 a1), (Node n1 a1 gv1 = smash c2 gv1), (Node n1 a1 gv1 = smash c1 c2), (Node n1 a1 gv1 = smash c1 c1), (Node n1 a1 gv1 = smash c1 a2), (Node n1 a1 gv1 = smash c1 a1), (Node n1 a1 gv1 = smash c1 gv1), (Node n1 a1 gv1 = smash a2 c2), (Node n1 a1 gv1 = smash a2 c1), (Node n1 a1 gv1 = smash a2 a2)
(Node n1 a1 gv1 = smash a2 a1), (Node n1 a1 gv1 = smash a2 gv1), (Node n1 a1 gv1 = smash a1 c2), (Node n1 a1 gv1 = smash a1 c1), (Node n1 a1 gv1 = smash a1 a2), (Node n1 a1 gv1 = smash a1 a1), (Node n1 a1 gv1 = smash a1 gv1), (Node n1 a1 gv1 = smash gv1 c2), (Node n1 a1 gv1 = smash gv1 c1), (Node n1 a1 gv1 = smash gv1 a2)
(Node n1 a1 gv1 = smash gv1 a1), (Node n1 a1 gv1 = smash gv1 gv1), (Node n1 gv1 c2 = c2), (Node n1 gv1 c2 = c1), (Node n1 gv1 c2 = a2), (Node n1 gv1 c2 = a1), (Node n1 gv1 c2 = gv1), (Node n1 gv1 c2 = smash c2 c2), (Node n1 gv1 c2 = smash c2 c1), (Node n1 gv1 c2 = smash c2 a2)
(Node n1 gv1 c2 = smash c2 a1), (Node n1 gv1 c2 = smash c2 gv1), (Node n1 gv1 c2 = smash c1 c2), (Node n1 gv1 c2 = smash c1 c1), (Node n1 gv1 c2 = smash c1 a2), (Node n1 gv1 c2 = smash c1 a1), (Node n1 gv1 c2 = smash c1 gv1), (Node n1 gv1 c2 = smash a2 c2), (Node n1 gv1 c2 = smash a2 c1), (Node n1 gv1 c2 = smash a2 a2)
(Node n1 gv1 c2 = smash a2 a1), (Node n1 gv1 c2 = smash a2 gv1), (Node n1 gv1 c2 = smash a1 c2), (Node n1 gv1 c2 = smash a1 c1), (Node n1 gv1 c2 = smash a1 a2), (Node n1 gv1 c2 = smash a1 a1), (Node n1 gv1 c2 = smash a1 gv1), (Node n1 gv1 c2 = smash gv1 c2), (Node n1 gv1 c2 = smash gv1 c1), (Node n1 gv1 c2 = smash gv1 a2)
(Node n1 gv1 c2 = smash gv1 a1), (Node n1 gv1 c2 = smash gv1 gv1), (Node n1 gv1 c1 = c2), (Node n1 gv1 c1 = c1), (Node n1 gv1 c1 = a2), (Node n1 gv1 c1 = a1), (Node n1 gv1 c1 = gv1), (Node n1 gv1 c1 = smash c2 c2), (Node n1 gv1 c1 = smash c2 c1), (Node n1 gv1 c1 = smash c2 a2)
(Node n1 gv1 c1 = smash c2 a1), (Node n1 gv1 c1 = smash c2 gv1), (Node n1 gv1 c1 = smash c1 c2), (Node n1 gv1 c1 = smash c1 c1), (Node n1 gv1 c1 = smash c1 a2), (Node n1 gv1 c1 = smash c1 a1), (Node n1 gv1 c1 = smash c1 gv1), (Node n1 gv1 c1 = smash a2 c2), (Node n1 gv1 c1 = smash a2 c1), (Node n1 gv1 c1 = smash a2 a2)
(Node n1 gv1 c1 = smash a2 a1), (Node n1 gv1 c1 = smash a2 gv1), (Node n1 gv1 c1 = smash a1 c2), (Node n1 gv1 c1 = smash a1 c1), (Node n1 gv1 c1 = smash a1 a2), (Node n1 gv1 c1 = smash a1 a1), (Node n1 gv1 c1 = smash a1 gv1), (Node n1 gv1 c1 = smash gv1 c2), (Node n1 gv1 c1 = smash gv1 c1), (Node n1 gv1 c1 = smash gv1 a2)
(Node n1 gv1 c1 = smash gv1 a1), (Node n1 gv1 c1 = smash gv1 gv1), (Node n1 gv1 a2 = c2), (Node n1 gv1 a2 = c1), (Node n1 gv1 a2 = a2), (Node n1 gv1 a2 = a1), (Node n1 gv1 a2 = gv1), (Node n1 gv1 a2 = smash c2 c2), (Node n1 gv1 a2 = smash c2 c1), (Node n1 gv1 a2 = smash c2 a2)
(Node n1 gv1 a2 = smash c2 a1), (Node n1 gv1 a2 = smash c2 gv1), (Node n1 gv1 a2 = smash c1 c2), (Node n1 gv1 a2 = smash c1 c1), (Node n1 gv1 a2 = smash c1 a2), (Node n1 gv1 a2 = smash c1 a1), (Node n1 gv1 a2 = smash c1 gv1), (Node n1 gv1 a2 = smash a2 c2), (Node n1 gv1 a2 = smash a2 c1), (Node n1 gv1 a2 = smash a2 a2)
(Node n1 gv1 a2 = smash a2 a1), (Node n1 gv1 a2 = smash a2 gv1), (Node n1 gv1 a2 = smash a1 c2), (Node n1 gv1 a2 = smash a1 c1), (Node n1 gv1 a2 = smash a1 a2), (Node n1 gv1 a2 = smash a1 a1), (Node n1 gv1 a2 = smash a1 gv1), (Node n1 gv1 a2 = smash gv1 c2), (Node n1 gv1 a2 = smash gv1 c1), (Node n1 gv1 a2 = smash gv1 a2)
(Node n1 gv1 a2 = smash gv1 a1), (Node n1 gv1 a2 = smash gv1 gv1), (Node n1 gv1 a1 = c2), (Node n1 gv1 a1 = c1), (Node n1 gv1 a1 = a2), (Node n1 gv1 a1 = a1), (Node n1 gv1 a1 = gv1), (Node n1 gv1 a1 = smash c2 c2), (Node n1 gv1 a1 = smash c2 c1), (Node n1 gv1 a1 = smash c2 a2)
(Node n1 gv1 a1 = smash c2 a1), (Node n1 gv1 a1 = smash c2 gv1), (Node n1 gv1 a1 = smash c1 c2), (Node n1 gv1 a1 = smash c1 c1), (Node n1 gv1 a1 = smash c1 a2), (Node n1 gv1 a1 = smash c1 a1), (Node n1 gv1 a1 = smash c1 gv1), (Node n1 gv1 a1 = smash a2 c2), (Node n1 gv1 a1 = smash a2 c1), (Node n1 gv1 a1 = smash a2 a2)
(Node n1 gv1 a1 = smash a2 a1), (Node n1 gv1 a1 = smash a2 gv1), (Node n1 gv1 a1 = smash a1 c2), (Node n1 gv1 a1 = smash a1 c1), (Node n1 gv1 a1 = smash a1 a2), (Node n1 gv1 a1 = smash a1 a1), (Node n1 gv1 a1 = smash a1 gv1), (Node n1 gv1 a1 = smash gv1 c2), (Node n1 gv1 a1 = smash gv1 c1), (Node n1 gv1 a1 = smash gv1 a2)
(Node n1 gv1 a1 = smash gv1 a1), (Node n1 gv1 a1 = smash gv1 gv1), (Node n1 gv1 gv1 = c2), (Node n1 gv1 gv1 = c1), (Node n1 gv1 gv1 = a2), (Node n1 gv1 gv1 = a1), (Node n1 gv1 gv1 = gv1), (Node n1 gv1 gv1 = smash c2 c2), (Node n1 gv1 gv1 = smash c2 c1), (Node n1 gv1 gv1 = smash c2 a2)
(Node n1 gv1 gv1 = smash c2 a1), (Node n1 gv1 gv1 = smash c2 gv1), (Node n1 gv1 gv1 = smash c1 c2), (Node n1 gv1 gv1 = smash c1 c1), (Node n1 gv1 gv1 = smash c1 a2), (Node n1 gv1 gv1 = smash c1 a1), (Node n1 gv1 gv1 = smash c1 gv1), (Node n1 gv1 gv1 = smash a2 c2), (Node n1 gv1 gv1 = smash a2 c1), (Node n1 gv1 gv1 = smash a2 a2)
(Node n1 gv1 gv1 = smash a2 a1), (Node n1 gv1 gv1 = smash a2 gv1), (Node n1 gv1 gv1 = smash a1 c2), (Node n1 gv1 gv1 = smash a1 c1), (Node n1 gv1 gv1 = smash a1 a2), (Node n1 gv1 gv1 = smash a1 a1), (Node n1 gv1 gv1 = smash a1 gv1), (Node n1 gv1 gv1 = smash gv1 c2), (Node n1 gv1 gv1 = smash gv1 c1), (Node n1 gv1 gv1 = smash gv1 a2)
(Node n1 gv1 gv1 = smash gv1 a1), (Node n1 gv1 gv1 = smash gv1 gv1), (Node n0 c2 c2 = c2), (Node n0 c2 c2 = c1), (Node n0 c2 c2 = a2), (Node n0 c2 c2 = a1), (Node n0 c2 c2 = gv1), (Node n0 c2 c2 = smash c2 c2), (Node n0 c2 c2 = smash c2 c1), (Node n0 c2 c2 = smash c2 a2)
(Node n0 c2 c2 = smash c2 a1), (Node n0 c2 c2 = smash c2 gv1), (Node n0 c2 c2 = smash c1 c2), (Node n0 c2 c2 = smash c1 c1), (Node n0 c2 c2 = smash c1 a2), (Node n0 c2 c2 = smash c1 a1), (Node n0 c2 c2 = smash c1 gv1), (Node n0 c2 c2 = smash a2 c2), (Node n0 c2 c2 = smash a2 c1), (Node n0 c2 c2 = smash a2 a2)
(Node n0 c2 c2 = smash a2 a1), (Node n0 c2 c2 = smash a2 gv1), (Node n0 c2 c2 = smash a1 c2), (Node n0 c2 c2 = smash a1 c1), (Node n0 c2 c2 = smash a1 a2), (Node n0 c2 c2 = smash a1 a1), (Node n0 c2 c2 = smash a1 gv1), (Node n0 c2 c2 = smash gv1 c2), (Node n0 c2 c2 = smash gv1 c1), (Node n0 c2 c2 = smash gv1 a2)
(Node n0 c2 c2 = smash gv1 a1), (Node n0 c2 c2 = smash gv1 gv1), (Node n0 c2 c1 = c2), (Node n0 c2 c1 = c1), (Node n0 c2 c1 = a2), (Node n0 c2 c1 = a1), (Node n0 c2 c1 = gv1), (Node n0 c2 c1 = smash c2 c2), (Node n0 c2 c1 = smash c2 c1), (Node n0 c2 c1 = smash c2 a2)
(Node n0 c2 c1 = smash c2 a1), (Node n0 c2 c1 = smash c2 gv1), (Node n0 c2 c1 = smash c1 c2), (Node n0 c2 c1 = smash c1 c1), (Node n0 c2 c1 = smash c1 a2), (Node n0 c2 c1 = smash c1 a1), (Node n0 c2 c1 = smash c1 gv1), (Node n0 c2 c1 = smash a2 c2), (Node n0 c2 c1 = smash a2 c1), (Node n0 c2 c1 = smash a2 a2)
(Node n0 c2 c1 = smash a2 a1), (Node n0 c2 c1 = smash a2 gv1), (Node n0 c2 c1 = smash a1 c2), (Node n0 c2 c1 = smash a1 c1), (Node n0 c2 c1 = smash a1 a2), (Node n0 c2 c1 = smash a1 a1), (Node n0 c2 c1 = smash a1 gv1), (Node n0 c2 c1 = smash gv1 c2), (Node n0 c2 c1 = smash gv1 c1), (Node n0 c2 c1 = smash gv1 a2)
(Node n0 c2 c1 = smash gv1 a1), (Node n0 c2 c1 = smash gv1 gv1), (Node n0 c2 a2 = c2), (Node n0 c2 a2 = c1), (Node n0 c2 a2 = a2), (Node n0 c2 a2 = a1), (Node n0 c2 a2 = gv1), (Node n0 c2 a2 = smash c2 c2), (Node n0 c2 a2 = smash c2 c1), (Node n0 c2 a2 = smash c2 a2)
(Node n0 c2 a2 = smash c2 a1), (Node n0 c2 a2 = smash c2 gv1), (Node n0 c2 a2 = smash c1 c2), (Node n0 c2 a2 = smash c1 c1), (Node n0 c2 a2 = smash c1 a2), (Node n0 c2 a2 = smash c1 a1), (Node n0 c2 a2 = smash c1 gv1), (Node n0 c2 a2 = smash a2 c2), (Node n0 c2 a2 = smash a2 c1), (Node n0 c2 a2 = smash a2 a2)
(Node n0 c2 a2 = smash a2 a1), (Node n0 c2 a2 = smash a2 gv1), (Node n0 c2 a2 = smash a1 c2), (Node n0 c2 a2 = smash a1 c1), (Node n0 c2 a2 = smash a1 a2), (Node n0 c2 a2 = smash a1 a1), (Node n0 c2 a2 = smash a1 gv1), (Node n0 c2 a2 = smash gv1 c2), (Node n0 c2 a2 = smash gv1 c1), (Node n0 c2 a2 = smash gv1 a2)
(Node n0 c2 a2 = smash gv1 a1), (Node n0 c2 a2 = smash gv1 gv1), (Node n0 c2 a1 = c2), (Node n0 c2 a1 = c1), (Node n0 c2 a1 = a2), (Node n0 c2 a1 = a1), (Node n0 c2 a1 = gv1), (Node n0 c2 a1 = smash c2 c2), (Node n0 c2 a1 = smash c2 c1), (Node n0 c2 a1 = smash c2 a2)
(Node n0 c2 a1 = smash c2 a1), (Node n0 c2 a1 = smash c2 gv1), (Node n0 c2 a1 = smash c1 c2), (Node n0 c2 a1 = smash c1 c1), (Node n0 c2 a1 = smash c1 a2), (Node n0 c2 a1 = smash c1 a1), (Node n0 c2 a1 = smash c1 gv1), (Node n0 c2 a1 = smash a2 c2), (Node n0 c2 a1 = smash a2 c1), (Node n0 c2 a1 = smash a2 a2)
(Node n0 c2 a1 = smash a2 a1), (Node n0 c2 a1 = smash a2 gv1), (Node n0 c2 a1 = smash a1 c2), (Node n0 c2 a1 = smash a1 c1), (Node n0 c2 a1 = smash a1 a2), (Node n0 c2 a1 = smash a1 a1), (Node n0 c2 a1 = smash a1 gv1), (Node n0 c2 a1 = smash gv1 c2), (Node n0 c2 a1 = smash gv1 c1), (Node n0 c2 a1 = smash gv1 a2)
(Node n0 c2 a1 = smash gv1 a1), (Node n0 c2 a1 = smash gv1 gv1), (Node n0 c2 gv1 = c2), (Node n0 c2 gv1 = c1), (Node n0 c2 gv1 = a2), (Node n0 c2 gv1 = a1), (Node n0 c2 gv1 = gv1), (Node n0 c2 gv1 = smash c2 c2), (Node n0 c2 gv1 = smash c2 c1), (Node n0 c2 gv1 = smash c2 a2)
(Node n0 c2 gv1 = smash c2 a1), (Node n0 c2 gv1 = smash c2 gv1), (Node n0 c2 gv1 = smash c1 c2), (Node n0 c2 gv1 = smash c1 c1), (Node n0 c2 gv1 = smash c1 a2), (Node n0 c2 gv1 = smash c1 a1), (Node n0 c2 gv1 = smash c1 gv1), (Node n0 c2 gv1 = smash a2 c2), (Node n0 c2 gv1 = smash a2 c1), (Node n0 c2 gv1 = smash a2 a2)
(Node n0 c2 gv1 = smash a2 a1), (Node n0 c2 gv1 = smash a2 gv1), (Node n0 c2 gv1 = smash a1 c2), (Node n0 c2 gv1 = smash a1 c1), (Node n0 c2 gv1 = smash a1 a2), (Node n0 c2 gv1 = smash a1 a1), (Node n0 c2 gv1 = smash a1 gv1), (Node n0 c2 gv1 = smash gv1 c2), (Node n0 c2 gv1 = smash gv1 c1), (Node n0 c2 gv1 = smash gv1 a2)
(Node n0 c2 gv1 = smash gv1 a1), (Node n0 c2 gv1 = smash gv1 gv1), (Node n0 c1 c2 = c2), (Node n0 c1 c2 = c1), (Node n0 c1 c2 = a2), (Node n0 c1 c2 = a1), (Node n0 c1 c2 = gv1), (Node n0 c1 c2 = smash c2 c2), (Node n0 c1 c2 = smash c2 c1), (Node n0 c1 c2 = smash c2 a2)
(Node n0 c1 c2 = smash c2 a1), (Node n0 c1 c2 = smash c2 gv1), (Node n0 c1 c2 = smash c1 c2), (Node n0 c1 c2 = smash c1 c1), (Node n0 c1 c2 = smash c1 a2), (Node n0 c1 c2 = smash c1 a1), (Node n0 c1 c2 = smash c1 gv1), (Node n0 c1 c2 = smash a2 c2), (Node n0 c1 c2 = smash a2 c1), (Node n0 c1 c2 = smash a2 a2)
(Node n0 c1 c2 = smash a2 a1), (Node n0 c1 c2 = smash a2 gv1), (Node n0 c1 c2 = smash a1 c2), (Node n0 c1 c2 = smash a1 c1), (Node n0 c1 c2 = smash a1 a2), (Node n0 c1 c2 = smash a1 a1), (Node n0 c1 c2 = smash a1 gv1), (Node n0 c1 c2 = smash gv1 c2), (Node n0 c1 c2 = smash gv1 c1), (Node n0 c1 c2 = smash gv1 a2)
(Node n0 c1 c2 = smash gv1 a1), (Node n0 c1 c2 = smash gv1 gv1), (Node n0 c1 c1 = c2), (Node n0 c1 c1 = c1), (Node n0 c1 c1 = a2), (Node n0 c1 c1 = a1), (Node n0 c1 c1 = gv1), (Node n0 c1 c1 = smash c2 c2), (Node n0 c1 c1 = smash c2 c1), (Node n0 c1 c1 = smash c2 a2)
(Node n0 c1 c1 = smash c2 a1), (Node n0 c1 c1 = smash c2 gv1), (Node n0 c1 c1 = smash c1 c2), (Node n0 c1 c1 = smash c1 c1), (Node n0 c1 c1 = smash c1 a2), (Node n0 c1 c1 = smash c1 a1), (Node n0 c1 c1 = smash c1 gv1), (Node n0 c1 c1 = smash a2 c2), (Node n0 c1 c1 = smash a2 c1), (Node n0 c1 c1 = smash a2 a2)
(Node n0 c1 c1 = smash a2 a1), (Node n0 c1 c1 = smash a2 gv1), (Node n0 c1 c1 = smash a1 c2), (Node n0 c1 c1 = smash a1 c1), (Node n0 c1 c1 = smash a1 a2), (Node n0 c1 c1 = smash a1 a1), (Node n0 c1 c1 = smash a1 gv1), (Node n0 c1 c1 = smash gv1 c2), (Node n0 c1 c1 = smash gv1 c1), (Node n0 c1 c1 = smash gv1 a2)
(Node n0 c1 c1 = smash gv1 a1), (Node n0 c1 c1 = smash gv1 gv1), (Node n0 c1 a2 = c2), (Node n0 c1 a2 = c1), (Node n0 c1 a2 = a2), (Node n0 c1 a2 = a1), (Node n0 c1 a2 = gv1), (Node n0 c1 a2 = smash c2 c2), (Node n0 c1 a2 = smash c2 c1), (Node n0 c1 a2 = smash c2 a2)
(Node n0 c1 a2 = smash c2 a1), (Node n0 c1 a2 = smash c2 gv1), (Node n0 c1 a2 = smash c1 c2), (Node n0 c1 a2 = smash c1 c1), (Node n0 c1 a2 = smash c1 a2), (Node n0 c1 a2 = smash c1 a1), (Node n0 c1 a2 = smash c1 gv1), (Node n0 c1 a2 = smash a2 c2), (Node n0 c1 a2 = smash a2 c1), (Node n0 c1 a2 = smash a2 a2)
(Node n0 c1 a2 = smash a2 a1), (Node n0 c1 a2 = smash a2 gv1), (Node n0 c1 a2 = smash a1 c2), (Node n0 c1 a2 = smash a1 c1), (Node n0 c1 a2 = smash a1 a2), (Node n0 c1 a2 = smash a1 a1), (Node n0 c1 a2 = smash a1 gv1), (Node n0 c1 a2 = smash gv1 c2), (Node n0 c1 a2 = smash gv1 c1), (Node n0 c1 a2 = smash gv1 a2)
(Node n0 c1 a2 = smash gv1 a1), (Node n0 c1 a2 = smash gv1 gv1), (Node n0 c1 a1 = c2), (Node n0 c1 a1 = c1), (Node n0 c1 a1 = a2), (Node n0 c1 a1 = a1), (Node n0 c1 a1 = gv1), (Node n0 c1 a1 = smash c2 c2), (Node n0 c1 a1 = smash c2 c1), (Node n0 c1 a1 = smash c2 a2)
(Node n0 c1 a1 = smash c2 a1), (Node n0 c1 a1 = smash c2 gv1), (Node n0 c1 a1 = smash c1 c2), (Node n0 c1 a1 = smash c1 c1), (Node n0 c1 a1 = smash c1 a2), (Node n0 c1 a1 = smash c1 a1), (Node n0 c1 a1 = smash c1 gv1), (Node n0 c1 a1 = smash a2 c2), (Node n0 c1 a1 = smash a2 c1), (Node n0 c1 a1 = smash a2 a2)
(Node n0 c1 a1 = smash a2 a1), (Node n0 c1 a1 = smash a2 gv1), (Node n0 c1 a1 = smash a1 c2), (Node n0 c1 a1 = smash a1 c1), (Node n0 c1 a1 = smash a1 a2), (Node n0 c1 a1 = smash a1 a1), (Node n0 c1 a1 = smash a1 gv1), (Node n0 c1 a1 = smash gv1 c2), (Node n0 c1 a1 = smash gv1 c1), (Node n0 c1 a1 = smash gv1 a2)
(Node n0 c1 a1 = smash gv1 a1), (Node n0 c1 a1 = smash gv1 gv1), (Node n0 c1 gv1 = c2), (Node n0 c1 gv1 = c1), (Node n0 c1 gv1 = a2), (Node n0 c1 gv1 = a1), (Node n0 c1 gv1 = gv1), (Node n0 c1 gv1 = smash c2 c2), (Node n0 c1 gv1 = smash c2 c1), (Node n0 c1 gv1 = smash c2 a2)
(Node n0 c1 gv1 = smash c2 a1), (Node n0 c1 gv1 = smash c2 gv1), (Node n0 c1 gv1 = smash c1 c2), (Node n0 c1 gv1 = smash c1 c1), (Node n0 c1 gv1 = smash c1 a2), (Node n0 c1 gv1 = smash c1 a1), (Node n0 c1 gv1 = smash c1 gv1), (Node n0 c1 gv1 = smash a2 c2), (Node n0 c1 gv1 = smash a2 c1), (Node n0 c1 gv1 = smash a2 a2)
(Node n0 c1 gv1 = smash a2 a1), (Node n0 c1 gv1 = smash a2 gv1), (Node n0 c1 gv1 = smash a1 c2), (Node n0 c1 gv1 = smash a1 c1), (Node n0 c1 gv1 = smash a1 a2), (Node n0 c1 gv1 = smash a1 a1), (Node n0 c1 gv1 = smash a1 gv1), (Node n0 c1 gv1 = smash gv1 c2), (Node n0 c1 gv1 = smash gv1 c1), (Node n0 c1 gv1 = smash gv1 a2)
(Node n0 c1 gv1 = smash gv1 a1), (Node n0 c1 gv1 = smash gv1 gv1), (Node n0 a2 c2 = c2), (Node n0 a2 c2 = c1), (Node n0 a2 c2 = a2), (Node n0 a2 c2 = a1), (Node n0 a2 c2 = gv1), (Node n0 a2 c2 = smash c2 c2), (Node n0 a2 c2 = smash c2 c1), (Node n0 a2 c2 = smash c2 a2)
(Node n0 a2 c2 = smash c2 a1), (Node n0 a2 c2 = smash c2 gv1), (Node n0 a2 c2 = smash c1 c2), (Node n0 a2 c2 = smash c1 c1), (Node n0 a2 c2 = smash c1 a2), (Node n0 a2 c2 = smash c1 a1), (Node n0 a2 c2 = smash c1 gv1), (Node n0 a2 c2 = smash a2 c2), (Node n0 a2 c2 = smash a2 c1), (Node n0 a2 c2 = smash a2 a2)
(Node n0 a2 c2 = smash a2 a1), (Node n0 a2 c2 = smash a2 gv1), (Node n0 a2 c2 = smash a1 c2), (Node n0 a2 c2 = smash a1 c1), (Node n0 a2 c2 = smash a1 a2), (Node n0 a2 c2 = smash a1 a1), (Node n0 a2 c2 = smash a1 gv1), (Node n0 a2 c2 = smash gv1 c2), (Node n0 a2 c2 = smash gv1 c1), (Node n0 a2 c2 = smash gv1 a2)
(Node n0 a2 c2 = smash gv1 a1), (Node n0 a2 c2 = smash gv1 gv1), (Node n0 a2 c1 = c2), (Node n0 a2 c1 = c1), (Node n0 a2 c1 = a2), (Node n0 a2 c1 = a1), (Node n0 a2 c1 = gv1), (Node n0 a2 c1 = smash c2 c2), (Node n0 a2 c1 = smash c2 c1), (Node n0 a2 c1 = smash c2 a2)
(Node n0 a2 c1 = smash c2 a1), (Node n0 a2 c1 = smash c2 gv1), (Node n0 a2 c1 = smash c1 c2), (Node n0 a2 c1 = smash c1 c1), (Node n0 a2 c1 = smash c1 a2), (Node n0 a2 c1 = smash c1 a1), (Node n0 a2 c1 = smash c1 gv1), (Node n0 a2 c1 = smash a2 c2), (Node n0 a2 c1 = smash a2 c1), (Node n0 a2 c1 = smash a2 a2)
(Node n0 a2 c1 = smash a2 a1), (Node n0 a2 c1 = smash a2 gv1), (Node n0 a2 c1 = smash a1 c2), (Node n0 a2 c1 = smash a1 c1), (Node n0 a2 c1 = smash a1 a2), (Node n0 a2 c1 = smash a1 a1), (Node n0 a2 c1 = smash a1 gv1), (Node n0 a2 c1 = smash gv1 c2), (Node n0 a2 c1 = smash gv1 c1), (Node n0 a2 c1 = smash gv1 a2)
(Node n0 a2 c1 = smash gv1 a1), (Node n0 a2 c1 = smash gv1 gv1), (Node n0 a2 a2 = c2), (Node n0 a2 a2 = c1), (Node n0 a2 a2 = a2), (Node n0 a2 a2 = a1), (Node n0 a2 a2 = gv1), (Node n0 a2 a2 = smash c2 c2), (Node n0 a2 a2 = smash c2 c1), (Node n0 a2 a2 = smash c2 a2)
(Node n0 a2 a2 = smash c2 a1), (Node n0 a2 a2 = smash c2 gv1), (Node n0 a2 a2 = smash c1 c2), (Node n0 a2 a2 = smash c1 c1), (Node n0 a2 a2 = smash c1 a2), (Node n0 a2 a2 = smash c1 a1), (Node n0 a2 a2 = smash c1 gv1), (Node n0 a2 a2 = smash a2 c2), (Node n0 a2 a2 = smash a2 c1), (Node n0 a2 a2 = smash a2 a2)
(Node n0 a2 a2 = smash a2 a1), (Node n0 a2 a2 = smash a2 gv1), (Node n0 a2 a2 = smash a1 c2), (Node n0 a2 a2 = smash a1 c1), (Node n0 a2 a2 = smash a1 a2), (Node n0 a2 a2 = smash a1 a1), (Node n0 a2 a2 = smash a1 gv1), (Node n0 a2 a2 = smash gv1 c2), (Node n0 a2 a2 = smash gv1 c1), (Node n0 a2 a2 = smash gv1 a2)
(Node n0 a2 a2 = smash gv1 a1), (Node n0 a2 a2 = smash gv1 gv1), (Node n0 a2 a1 = c2), (Node n0 a2 a1 = c1), (Node n0 a2 a1 = a2), (Node n0 a2 a1 = a1), (Node n0 a2 a1 = gv1), (Node n0 a2 a1 = smash c2 c2), (Node n0 a2 a1 = smash c2 c1), (Node n0 a2 a1 = smash c2 a2)
(Node n0 a2 a1 = smash c2 a1), (Node n0 a2 a1 = smash c2 gv1), (Node n0 a2 a1 = smash c1 c2), (Node n0 a2 a1 = smash c1 c1), (Node n0 a2 a1 = smash c1 a2), (Node n0 a2 a1 = smash c1 a1), (Node n0 a2 a1 = smash c1 gv1), (Node n0 a2 a1 = smash a2 c2), (Node n0 a2 a1 = smash a2 c1), (Node n0 a2 a1 = smash a2 a2)
(Node n0 a2 a1 = smash a2 a1), (Node n0 a2 a1 = smash a2 gv1), (Node n0 a2 a1 = smash a1 c2), (Node n0 a2 a1 = smash a1 c1), (Node n0 a2 a1 = smash a1 a2), (Node n0 a2 a1 = smash a1 a1), (Node n0 a2 a1 = smash a1 gv1), (Node n0 a2 a1 = smash gv1 c2), (Node n0 a2 a1 = smash gv1 c1), (Node n0 a2 a1 = smash gv1 a2)
(Node n0 a2 a1 = smash gv1 a1), (Node n0 a2 a1 = smash gv1 gv1), (Node n0 a2 gv1 = c2), (Node n0 a2 gv1 = c1), (Node n0 a2 gv1 = a2), (Node n0 a2 gv1 = a1), (Node n0 a2 gv1 = gv1), (Node n0 a2 gv1 = smash c2 c2), (Node n0 a2 gv1 = smash c2 c1), (Node n0 a2 gv1 = smash c2 a2)
(Node n0 a2 gv1 = smash c2 a1), (Node n0 a2 gv1 = smash c2 gv1), (Node n0 a2 gv1 = smash c1 c2), (Node n0 a2 gv1 = smash c1 c1), (Node n0 a2 gv1 = smash c1 a2), (Node n0 a2 gv1 = smash c1 a1), (Node n0 a2 gv1 = smash c1 gv1), (Node n0 a2 gv1 = smash a2 c2), (Node n0 a2 gv1 = smash a2 c1), (Node n0 a2 gv1 = smash a2 a2)
(Node n0 a2 gv1 = smash a2 a1), (Node n0 a2 gv1 = smash a2 gv1), (Node n0 a2 gv1 = smash a1 c2), (Node n0 a2 gv1 = smash a1 c1), (Node n0 a2 gv1 = smash a1 a2), (Node n0 a2 gv1 = smash a1 a1), (Node n0 a2 gv1 = smash a1 gv1), (Node n0 a2 gv1 = smash gv1 c2), (Node n0 a2 gv1 = smash gv1 c1), (Node n0 a2 gv1 = smash gv1 a2)
(Node n0 a2 gv1 = smash gv1 a1), (Node n0 a2 gv1 = smash gv1 gv1), (Node n0 a1 c2 = c2), (Node n0 a1 c2 = c1), (Node n0 a1 c2 = a2), (Node n0 a1 c2 = a1), (Node n0 a1 c2 = gv1), (Node n0 a1 c2 = smash c2 c2), (Node n0 a1 c2 = smash c2 c1), (Node n0 a1 c2 = smash c2 a2)
(Node n0 a1 c2 = smash c2 a1), (Node n0 a1 c2 = smash c2 gv1), (Node n0 a1 c2 = smash c1 c2), (Node n0 a1 c2 = smash c1 c1), (Node n0 a1 c2 = smash c1 a2), (Node n0 a1 c2 = smash c1 a1), (Node n0 a1 c2 = smash c1 gv1), (Node n0 a1 c2 = smash a2 c2), (Node n0 a1 c2 = smash a2 c1), (Node n0 a1 c2 = smash a2 a2)
(Node n0 a1 c2 = smash a2 a1), (Node n0 a1 c2 = smash a2 gv1), (Node n0 a1 c2 = smash a1 c2), (Node n0 a1 c2 = smash a1 c1), (Node n0 a1 c2 = smash a1 a2), (Node n0 a1 c2 = smash a1 a1), (Node n0 a1 c2 = smash a1 gv1), (Node n0 a1 c2 = smash gv1 c2), (Node n0 a1 c2 = smash gv1 c1), (Node n0 a1 c2 = smash gv1 a2)
(Node n0 a1 c2 = smash gv1 a1), (Node n0 a1 c2 = smash gv1 gv1), (Node n0 a1 c1 = c2), (Node n0 a1 c1 = c1), (Node n0 a1 c1 = a2), (Node n0 a1 c1 = a1), (Node n0 a1 c1 = gv1), (Node n0 a1 c1 = smash c2 c2), (Node n0 a1 c1 = smash c2 c1), (Node n0 a1 c1 = smash c2 a2)
(Node n0 a1 c1 = smash c2 a1), (Node n0 a1 c1 = smash c2 gv1), (Node n0 a1 c1 = smash c1 c2), (Node n0 a1 c1 = smash c1 c1), (Node n0 a1 c1 = smash c1 a2), (Node n0 a1 c1 = smash c1 a1), (Node n0 a1 c1 = smash c1 gv1), (Node n0 a1 c1 = smash a2 c2), (Node n0 a1 c1 = smash a2 c1), (Node n0 a1 c1 = smash a2 a2)
(Node n0 a1 c1 = smash a2 a1), (Node n0 a1 c1 = smash a2 gv1), (Node n0 a1 c1 = smash a1 c2), (Node n0 a1 c1 = smash a1 c1), (Node n0 a1 c1 = smash a1 a2), (Node n0 a1 c1 = smash a1 a1), (Node n0 a1 c1 = smash a1 gv1), (Node n0 a1 c1 = smash gv1 c2), (Node n0 a1 c1 = smash gv1 c1), (Node n0 a1 c1 = smash gv1 a2)
(Node n0 a1 c1 = smash gv1 a1), (Node n0 a1 c1 = smash gv1 gv1), (Node n0 a1 a2 = c2), (Node n0 a1 a2 = c1), (Node n0 a1 a2 = a2), (Node n0 a1 a2 = a1), (Node n0 a1 a2 = gv1), (Node n0 a1 a2 = smash c2 c2), (Node n0 a1 a2 = smash c2 c1), (Node n0 a1 a2 = smash c2 a2)
(Node n0 a1 a2 = smash c2 a1), (Node n0 a1 a2 = smash c2 gv1), (Node n0 a1 a2 = smash c1 c2), (Node n0 a1 a2 = smash c1 c1), (Node n0 a1 a2 = smash c1 a2), (Node n0 a1 a2 = smash c1 a1), (Node n0 a1 a2 = smash c1 gv1), (Node n0 a1 a2 = smash a2 c2), (Node n0 a1 a2 = smash a2 c1), (Node n0 a1 a2 = smash a2 a2)
(Node n0 a1 a2 = smash a2 a1), (Node n0 a1 a2 = smash a2 gv1), (Node n0 a1 a2 = smash a1 c2), (Node n0 a1 a2 = smash a1 c1), (Node n0 a1 a2 = smash a1 a2), (Node n0 a1 a2 = smash a1 a1), (Node n0 a1 a2 = smash a1 gv1), (Node n0 a1 a2 = smash gv1 c2), (Node n0 a1 a2 = smash gv1 c1), (Node n0 a1 a2 = smash gv1 a2)
(Node n0 a1 a2 = smash gv1 a1), (Node n0 a1 a2 = smash gv1 gv1), (Node n0 a1 a1 = c2), (Node n0 a1 a1 = c1), (Node n0 a1 a1 = a2), (Node n0 a1 a1 = a1), (Node n0 a1 a1 = gv1), (Node n0 a1 a1 = smash c2 c2), (Node n0 a1 a1 = smash c2 c1), (Node n0 a1 a1 = smash c2 a2)
(Node n0 a1 a1 = smash c2 a1), (Node n0 a1 a1 = smash c2 gv1), (Node n0 a1 a1 = smash c1 c2), (Node n0 a1 a1 = smash c1 c1), (Node n0 a1 a1 = smash c1 a2), (Node n0 a1 a1 = smash c1 a1), (Node n0 a1 a1 = smash c1 gv1), (Node n0 a1 a1 = smash a2 c2), (Node n0 a1 a1 = smash a2 c1), (Node n0 a1 a1 = smash a2 a2)
(Node n0 a1 a1 = smash a2 a1), (Node n0 a1 a1 = smash a2 gv1), (Node n0 a1 a1 = smash a1 c2), (Node n0 a1 a1 = smash a1 c1), (Node n0 a1 a1 = smash a1 a2), (Node n0 a1 a1 = smash a1 a1), (Node n0 a1 a1 = smash a1 gv1), (Node n0 a1 a1 = smash gv1 c2), (Node n0 a1 a1 = smash gv1 c1), (Node n0 a1 a1 = smash gv1 a2)
(Node n0 a1 a1 = smash gv1 a1), (Node n0 a1 a1 = smash gv1 gv1), (Node n0 a1 gv1 = c2), (Node n0 a1 gv1 = c1), (Node n0 a1 gv1 = a2), (Node n0 a1 gv1 = a1), (Node n0 a1 gv1 = gv1), (Node n0 a1 gv1 = smash c2 c2), (Node n0 a1 gv1 = smash c2 c1), (Node n0 a1 gv1 = smash c2 a2)
(Node n0 a1 gv1 = smash c2 a1), (Node n0 a1 gv1 = smash c2 gv1), (Node n0 a1 gv1 = smash c1 c2), (Node n0 a1 gv1 = smash c1 c1), (Node n0 a1 gv1 = smash c1 a2), (Node n0 a1 gv1 = smash c1 a1), (Node n0 a1 gv1 = smash c1 gv1), (Node n0 a1 gv1 = smash a2 c2), (Node n0 a1 gv1 = smash a2 c1), (Node n0 a1 gv1 = smash a2 a2)
(Node n0 a1 gv1 = smash a2 a1), (Node n0 a1 gv1 = smash a2 gv1), (Node n0 a1 gv1 = smash a1 c2), (Node n0 a1 gv1 = smash a1 c1), (Node n0 a1 gv1 = smash a1 a2), (Node n0 a1 gv1 = smash a1 a1), (Node n0 a1 gv1 = smash a1 gv1), (Node n0 a1 gv1 = smash gv1 c2), (Node n0 a1 gv1 = smash gv1 c1), (Node n0 a1 gv1 = smash gv1 a2)
(Node n0 a1 gv1 = smash gv1 a1), (Node n0 a1 gv1 = smash gv1 gv1), (Node n0 gv1 c2 = c2), (Node n0 gv1 c2 = c1), (Node n0 gv1 c2 = a2), (Node n0 gv1 c2 = a1), (Node n0 gv1 c2 = gv1), (Node n0 gv1 c2 = smash c2 c2), (Node n0 gv1 c2 = smash c2 c1), (Node n0 gv1 c2 = smash c2 a2)
(Node n0 gv1 c2 = smash c2 a1), (Node n0 gv1 c2 = smash c2 gv1), (Node n0 gv1 c2 = smash c1 c2), (Node n0 gv1 c2 = smash c1 c1), (Node n0 gv1 c2 = smash c1 a2), (Node n0 gv1 c2 = smash c1 a1), (Node n0 gv1 c2 = smash c1 gv1), (Node n0 gv1 c2 = smash a2 c2), (Node n0 gv1 c2 = smash a2 c1), (Node n0 gv1 c2 = smash a2 a2)
(Node n0 gv1 c2 = smash a2 a1), (Node n0 gv1 c2 = smash a2 gv1), (Node n0 gv1 c2 = smash a1 c2), (Node n0 gv1 c2 = smash a1 c1), (Node n0 gv1 c2 = smash a1 a2), (Node n0 gv1 c2 = smash a1 a1), (Node n0 gv1 c2 = smash a1 gv1), (Node n0 gv1 c2 = smash gv1 c2), (Node n0 gv1 c2 = smash gv1 c1), (Node n0 gv1 c2 = smash gv1 a2)
(Node n0 gv1 c2 = smash gv1 a1), (Node n0 gv1 c2 = smash gv1 gv1), (Node n0 gv1 c1 = c2), (Node n0 gv1 c1 = c1), (Node n0 gv1 c1 = a2), (Node n0 gv1 c1 = a1), (Node n0 gv1 c1 = gv1), (Node n0 gv1 c1 = smash c2 c2), (Node n0 gv1 c1 = smash c2 c1), (Node n0 gv1 c1 = smash c2 a2)
(Node n0 gv1 c1 = smash c2 a1), (Node n0 gv1 c1 = smash c2 gv1), (Node n0 gv1 c1 = smash c1 c2), (Node n0 gv1 c1 = smash c1 c1), (Node n0 gv1 c1 = smash c1 a2), (Node n0 gv1 c1 = smash c1 a1), (Node n0 gv1 c1 = smash c1 gv1), (Node n0 gv1 c1 = smash a2 c2), (Node n0 gv1 c1 = smash a2 c1), (Node n0 gv1 c1 = smash a2 a2)
(Node n0 gv1 c1 = smash a2 a1), (Node n0 gv1 c1 = smash a2 gv1), (Node n0 gv1 c1 = smash a1 c2), (Node n0 gv1 c1 = smash a1 c1), (Node n0 gv1 c1 = smash a1 a2), (Node n0 gv1 c1 = smash a1 a1), (Node n0 gv1 c1 = smash a1 gv1), (Node n0 gv1 c1 = smash gv1 c2), (Node n0 gv1 c1 = smash gv1 c1), (Node n0 gv1 c1 = smash gv1 a2)
(Node n0 gv1 c1 = smash gv1 a1), (Node n0 gv1 c1 = smash gv1 gv1), (Node n0 gv1 a2 = c2), (Node n0 gv1 a2 = c1), (Node n0 gv1 a2 = a2), (Node n0 gv1 a2 = a1), (Node n0 gv1 a2 = gv1), (Node n0 gv1 a2 = smash c2 c2), (Node n0 gv1 a2 = smash c2 c1), (Node n0 gv1 a2 = smash c2 a2)
(Node n0 gv1 a2 = smash c2 a1), (Node n0 gv1 a2 = smash c2 gv1), (Node n0 gv1 a2 = smash c1 c2), (Node n0 gv1 a2 = smash c1 c1), (Node n0 gv1 a2 = smash c1 a2), (Node n0 gv1 a2 = smash c1 a1), (Node n0 gv1 a2 = smash c1 gv1), (Node n0 gv1 a2 = smash a2 c2), (Node n0 gv1 a2 = smash a2 c1), (Node n0 gv1 a2 = smash a2 a2)
(Node n0 gv1 a2 = smash a2 a1), (Node n0 gv1 a2 = smash a2 gv1), (Node n0 gv1 a2 = smash a1 c2), (Node n0 gv1 a2 = smash a1 c1), (Node n0 gv1 a2 = smash a1 a2), (Node n0 gv1 a2 = smash a1 a1), (Node n0 gv1 a2 = smash a1 gv1), (Node n0 gv1 a2 = smash gv1 c2), (Node n0 gv1 a2 = smash gv1 c1), (Node n0 gv1 a2 = smash gv1 a2)
(Node n0 gv1 a2 = smash gv1 a1), (Node n0 gv1 a2 = smash gv1 gv1), (Node n0 gv1 a1 = c2), (Node n0 gv1 a1 = c1), (Node n0 gv1 a1 = a2), (Node n0 gv1 a1 = a1), (Node n0 gv1 a1 = gv1), (Node n0 gv1 a1 = smash c2 c2), (Node n0 gv1 a1 = smash c2 c1), (Node n0 gv1 a1 = smash c2 a2)
(Node n0 gv1 a1 = smash c2 a1), (Node n0 gv1 a1 = smash c2 gv1), (Node n0 gv1 a1 = smash c1 c2), (Node n0 gv1 a1 = smash c1 c1), (Node n0 gv1 a1 = smash c1 a2), (Node n0 gv1 a1 = smash c1 a1), (Node n0 gv1 a1 = smash c1 gv1), (Node n0 gv1 a1 = smash a2 c2), (Node n0 gv1 a1 = smash a2 c1), (Node n0 gv1 a1 = smash a2 a2)
(Node n0 gv1 a1 = smash a2 a1), (Node n0 gv1 a1 = smash a2 gv1), (Node n0 gv1 a1 = smash a1 c2), (Node n0 gv1 a1 = smash a1 c1), (Node n0 gv1 a1 = smash a1 a2), (Node n0 gv1 a1 = smash a1 a1), (Node n0 gv1 a1 = smash a1 gv1), (Node n0 gv1 a1 = smash gv1 c2), (Node n0 gv1 a1 = smash gv1 c1), (Node n0 gv1 a1 = smash gv1 a2)
(Node n0 gv1 a1 = smash gv1 a1), (Node n0 gv1 a1 = smash gv1 gv1), (Node n0 gv1 gv1 = c2), (Node n0 gv1 gv1 = c1), (Node n0 gv1 gv1 = a2), (Node n0 gv1 gv1 = a1), (Node n0 gv1 gv1 = gv1), (Node n0 gv1 gv1 = smash c2 c2), (Node n0 gv1 gv1 = smash c2 c1), (Node n0 gv1 gv1 = smash c2 a2)
(Node n0 gv1 gv1 = smash c2 a1), (Node n0 gv1 gv1 = smash c2 gv1), (Node n0 gv1 gv1 = smash c1 c2), (Node n0 gv1 gv1 = smash c1 c1), (Node n0 gv1 gv1 = smash c1 a2), (Node n0 gv1 gv1 = smash c1 a1), (Node n0 gv1 gv1 = smash c1 gv1), (Node n0 gv1 gv1 = smash a2 c2), (Node n0 gv1 gv1 = smash a2 c1), (Node n0 gv1 gv1 = smash a2 a2)
(Node n0 gv1 gv1 = smash a2 a1), (Node n0 gv1 gv1 = smash a2 gv1), (Node n0 gv1 gv1 = smash a1 c2), (Node n0 gv1 gv1 = smash a1 c1), (Node n0 gv1 gv1 = smash a1 a2), (Node n0 gv1 gv1 = smash a1 a1), (Node n0 gv1 gv1 = smash a1 gv1), (Node n0 gv1 gv1 = smash gv1 c2), (Node n0 gv1 gv1 = smash gv1 c1), (Node n0 gv1 gv1 = smash gv1 a2)
(Node n0 gv1 gv1 = smash gv1 a1), (Node n0 gv1 gv1 = smash gv1 gv1), (Node n c2 c2 = c2), (Node n c2 c2 = c1), (Node n c2 c2 = a2), (Node n c2 c2 = a1), (Node n c2 c2 = gv1), (Node n c2 c2 = smash c2 c2), (Node n c2 c2 = smash c2 c1), (Node n c2 c2 = smash c2 a2)
(Node n c2 c2 = smash c2 a1), (Node n c2 c2 = smash c2 gv1), (Node n c2 c2 = smash c1 c2), (Node n c2 c2 = smash c1 c1), (Node n c2 c2 = smash c1 a2), (Node n c2 c2 = smash c1 a1), (Node n c2 c2 = smash c1 gv1), (Node n c2 c2 = smash a2 c2), (Node n c2 c2 = smash a2 c1), (Node n c2 c2 = smash a2 a2)
(Node n c2 c2 = smash a2 a1), (Node n c2 c2 = smash a2 gv1), (Node n c2 c2 = smash a1 c2), (Node n c2 c2 = smash a1 c1), (Node n c2 c2 = smash a1 a2), (Node n c2 c2 = smash a1 a1), (Node n c2 c2 = smash a1 gv1), (Node n c2 c2 = smash gv1 c2), (Node n c2 c2 = smash gv1 c1), (Node n c2 c2 = smash gv1 a2)
(Node n c2 c2 = smash gv1 a1), (Node n c2 c2 = smash gv1 gv1), (Node n c2 c1 = c2), (Node n c2 c1 = c1), (Node n c2 c1 = a2), (Node n c2 c1 = a1), (Node n c2 c1 = gv1), (Node n c2 c1 = smash c2 c2), (Node n c2 c1 = smash c2 c1), (Node n c2 c1 = smash c2 a2)
(Node n c2 c1 = smash c2 a1), (Node n c2 c1 = smash c2 gv1), (Node n c2 c1 = smash c1 c2), (Node n c2 c1 = smash c1 c1), (Node n c2 c1 = smash c1 a2), (Node n c2 c1 = smash c1 a1), (Node n c2 c1 = smash c1 gv1), (Node n c2 c1 = smash a2 c2), (Node n c2 c1 = smash a2 c1), (Node n c2 c1 = smash a2 a2)
(Node n c2 c1 = smash a2 a1), (Node n c2 c1 = smash a2 gv1), (Node n c2 c1 = smash a1 c2), (Node n c2 c1 = smash a1 c1), (Node n c2 c1 = smash a1 a2), (Node n c2 c1 = smash a1 a1), (Node n c2 c1 = smash a1 gv1), (Node n c2 c1 = smash gv1 c2), (Node n c2 c1 = smash gv1 c1), (Node n c2 c1 = smash gv1 a2)
(Node n c2 c1 = smash gv1 a1), (Node n c2 c1 = smash gv1 gv1), (Node n c2 a2 = c2), (Node n c2 a2 = c1), (Node n c2 a2 = a2), (Node n c2 a2 = a1), (Node n c2 a2 = gv1), (Node n c2 a2 = smash c2 c2), (Node n c2 a2 = smash c2 c1), (Node n c2 a2 = smash c2 a2)
(Node n c2 a2 = smash c2 a1), (Node n c2 a2 = smash c2 gv1), (Node n c2 a2 = smash c1 c2), (Node n c2 a2 = smash c1 c1), (Node n c2 a2 = smash c1 a2), (Node n c2 a2 = smash c1 a1), (Node n c2 a2 = smash c1 gv1), (Node n c2 a2 = smash a2 c2), (Node n c2 a2 = smash a2 c1), (Node n c2 a2 = smash a2 a2)
(Node n c2 a2 = smash a2 a1), (Node n c2 a2 = smash a2 gv1), (Node n c2 a2 = smash a1 c2), (Node n c2 a2 = smash a1 c1), (Node n c2 a2 = smash a1 a2), (Node n c2 a2 = smash a1 a1), (Node n c2 a2 = smash a1 gv1), (Node n c2 a2 = smash gv1 c2), (Node n c2 a2 = smash gv1 c1), (Node n c2 a2 = smash gv1 a2)
(Node n c2 a2 = smash gv1 a1), (Node n c2 a2 = smash gv1 gv1), (Node n c2 a1 = c2), (Node n c2 a1 = c1), (Node n c2 a1 = a2), (Node n c2 a1 = a1), (Node n c2 a1 = gv1), (Node n c2 a1 = smash c2 c2), (Node n c2 a1 = smash c2 c1), (Node n c2 a1 = smash c2 a2)
(Node n c2 a1 = smash c2 a1), (Node n c2 a1 = smash c2 gv1), (Node n c2 a1 = smash c1 c2), (Node n c2 a1 = smash c1 c1), (Node n c2 a1 = smash c1 a2), (Node n c2 a1 = smash c1 a1), (Node n c2 a1 = smash c1 gv1), (Node n c2 a1 = smash a2 c2), (Node n c2 a1 = smash a2 c1), (Node n c2 a1 = smash a2 a2)
(Node n c2 a1 = smash a2 a1), (Node n c2 a1 = smash a2 gv1), (Node n c2 a1 = smash a1 c2), (Node n c2 a1 = smash a1 c1), (Node n c2 a1 = smash a1 a2), (Node n c2 a1 = smash a1 a1), (Node n c2 a1 = smash a1 gv1), (Node n c2 a1 = smash gv1 c2), (Node n c2 a1 = smash gv1 c1), (Node n c2 a1 = smash gv1 a2)
(Node n c2 a1 = smash gv1 a1), (Node n c2 a1 = smash gv1 gv1), (Node n c2 gv1 = c2), (Node n c2 gv1 = c1), (Node n c2 gv1 = a2), (Node n c2 gv1 = a1), (Node n c2 gv1 = gv1), (Node n c2 gv1 = smash c2 c2), (Node n c2 gv1 = smash c2 c1), (Node n c2 gv1 = smash c2 a2)
(Node n c2 gv1 = smash c2 a1), (Node n c2 gv1 = smash c2 gv1), (Node n c2 gv1 = smash c1 c2), (Node n c2 gv1 = smash c1 c1), (Node n c2 gv1 = smash c1 a2), (Node n c2 gv1 = smash c1 a1), (Node n c2 gv1 = smash c1 gv1), (Node n c2 gv1 = smash a2 c2), (Node n c2 gv1 = smash a2 c1), (Node n c2 gv1 = smash a2 a2)
(Node n c2 gv1 = smash a2 a1), (Node n c2 gv1 = smash a2 gv1), (Node n c2 gv1 = smash a1 c2), (Node n c2 gv1 = smash a1 c1), (Node n c2 gv1 = smash a1 a2), (Node n c2 gv1 = smash a1 a1), (Node n c2 gv1 = smash a1 gv1), (Node n c2 gv1 = smash gv1 c2), (Node n c2 gv1 = smash gv1 c1), (Node n c2 gv1 = smash gv1 a2)
(Node n c2 gv1 = smash gv1 a1), (Node n c2 gv1 = smash gv1 gv1), (Node n c1 c2 = c2), (Node n c1 c2 = c1), (Node n c1 c2 = a2), (Node n c1 c2 = a1), (Node n c1 c2 = gv1), (Node n c1 c2 = smash c2 c2), (Node n c1 c2 = smash c2 c1), (Node n c1 c2 = smash c2 a2)
(Node n c1 c2 = smash c2 a1), (Node n c1 c2 = smash c2 gv1), (Node n c1 c2 = smash c1 c2), (Node n c1 c2 = smash c1 c1), (Node n c1 c2 = smash c1 a2), (Node n c1 c2 = smash c1 a1), (Node n c1 c2 = smash c1 gv1), (Node n c1 c2 = smash a2 c2), (Node n c1 c2 = smash a2 c1), (Node n c1 c2 = smash a2 a2)
(Node n c1 c2 = smash a2 a1), (Node n c1 c2 = smash a2 gv1), (Node n c1 c2 = smash a1 c2), (Node n c1 c2 = smash a1 c1), (Node n c1 c2 = smash a1 a2), (Node n c1 c2 = smash a1 a1), (Node n c1 c2 = smash a1 gv1), (Node n c1 c2 = smash gv1 c2), (Node n c1 c2 = smash gv1 c1), (Node n c1 c2 = smash gv1 a2)
(Node n c1 c2 = smash gv1 a1), (Node n c1 c2 = smash gv1 gv1), (Node n c1 c1 = c2), (Node n c1 c1 = c1), (Node n c1 c1 = a2), (Node n c1 c1 = a1), (Node n c1 c1 = gv1), (Node n c1 c1 = smash c2 c2), (Node n c1 c1 = smash c2 c1), (Node n c1 c1 = smash c2 a2)
(Node n c1 c1 = smash c2 a1), (Node n c1 c1 = smash c2 gv1), (Node n c1 c1 = smash c1 c2), (Node n c1 c1 = smash c1 c1), (Node n c1 c1 = smash c1 a2), (Node n c1 c1 = smash c1 a1), (Node n c1 c1 = smash c1 gv1), (Node n c1 c1 = smash a2 c2), (Node n c1 c1 = smash a2 c1), (Node n c1 c1 = smash a2 a2)
(Node n c1 c1 = smash a2 a1), (Node n c1 c1 = smash a2 gv1), (Node n c1 c1 = smash a1 c2), (Node n c1 c1 = smash a1 c1), (Node n c1 c1 = smash a1 a2), (Node n c1 c1 = smash a1 a1), (Node n c1 c1 = smash a1 gv1), (Node n c1 c1 = smash gv1 c2), (Node n c1 c1 = smash gv1 c1), (Node n c1 c1 = smash gv1 a2)
(Node n c1 c1 = smash gv1 a1), (Node n c1 c1 = smash gv1 gv1), (Node n c1 a2 = c2), (Node n c1 a2 = c1), (Node n c1 a2 = a2), (Node n c1 a2 = a1), (Node n c1 a2 = gv1), (Node n c1 a2 = smash c2 c2), (Node n c1 a2 = smash c2 c1), (Node n c1 a2 = smash c2 a2)
(Node n c1 a2 = smash c2 a1), (Node n c1 a2 = smash c2 gv1), (Node n c1 a2 = smash c1 c2), (Node n c1 a2 = smash c1 c1), (Node n c1 a2 = smash c1 a2), (Node n c1 a2 = smash c1 a1), (Node n c1 a2 = smash c1 gv1), (Node n c1 a2 = smash a2 c2), (Node n c1 a2 = smash a2 c1), (Node n c1 a2 = smash a2 a2)
(Node n c1 a2 = smash a2 a1), (Node n c1 a2 = smash a2 gv1), (Node n c1 a2 = smash a1 c2), (Node n c1 a2 = smash a1 c1), (Node n c1 a2 = smash a1 a2), (Node n c1 a2 = smash a1 a1), (Node n c1 a2 = smash a1 gv1), (Node n c1 a2 = smash gv1 c2), (Node n c1 a2 = smash gv1 c1), (Node n c1 a2 = smash gv1 a2)
(Node n c1 a2 = smash gv1 a1), (Node n c1 a2 = smash gv1 gv1), (Node n c1 a1 = c2), (Node n c1 a1 = c1), (Node n c1 a1 = a2), (Node n c1 a1 = a1), (Node n c1 a1 = gv1), (Node n c1 a1 = smash c2 c2), (Node n c1 a1 = smash c2 c1), (Node n c1 a1 = smash c2 a2)
(Node n c1 a1 = smash c2 a1), (Node n c1 a1 = smash c2 gv1), (Node n c1 a1 = smash c1 c2), (Node n c1 a1 = smash c1 c1), (Node n c1 a1 = smash c1 a2), (Node n c1 a1 = smash c1 a1), (Node n c1 a1 = smash c1 gv1), (Node n c1 a1 = smash a2 c2), (Node n c1 a1 = smash a2 c1), (Node n c1 a1 = smash a2 a2)
(Node n c1 a1 = smash a2 a1), (Node n c1 a1 = smash a2 gv1), (Node n c1 a1 = smash a1 c2), (Node n c1 a1 = smash a1 c1), (Node n c1 a1 = smash a1 a2), (Node n c1 a1 = smash a1 a1), (Node n c1 a1 = smash a1 gv1), (Node n c1 a1 = smash gv1 c2), (Node n c1 a1 = smash gv1 c1), (Node n c1 a1 = smash gv1 a2)
(Node n c1 a1 = smash gv1 a1), (Node n c1 a1 = smash gv1 gv1), (Node n c1 gv1 = c2), (Node n c1 gv1 = c1), (Node n c1 gv1 = a2), (Node n c1 gv1 = a1), (Node n c1 gv1 = gv1), (Node n c1 gv1 = smash c2 c2), (Node n c1 gv1 = smash c2 c1), (Node n c1 gv1 = smash c2 a2)
(Node n c1 gv1 = smash c2 a1), (Node n c1 gv1 = smash c2 gv1), (Node n c1 gv1 = smash c1 c2), (Node n c1 gv1 = smash c1 c1), (Node n c1 gv1 = smash c1 a2), (Node n c1 gv1 = smash c1 a1), (Node n c1 gv1 = smash c1 gv1), (Node n c1 gv1 = smash a2 c2), (Node n c1 gv1 = smash a2 c1), (Node n c1 gv1 = smash a2 a2)
(Node n c1 gv1 = smash a2 a1), (Node n c1 gv1 = smash a2 gv1), (Node n c1 gv1 = smash a1 c2), (Node n c1 gv1 = smash a1 c1), (Node n c1 gv1 = smash a1 a2), (Node n c1 gv1 = smash a1 a1), (Node n c1 gv1 = smash a1 gv1), (Node n c1 gv1 = smash gv1 c2), (Node n c1 gv1 = smash gv1 c1), (Node n c1 gv1 = smash gv1 a2)
(Node n c1 gv1 = smash gv1 a1), (Node n c1 gv1 = smash gv1 gv1), (Node n a2 c2 = c2), (Node n a2 c2 = c1), (Node n a2 c2 = a2), (Node n a2 c2 = a1), (Node n a2 c2 = gv1), (Node n a2 c2 = smash c2 c2), (Node n a2 c2 = smash c2 c1), (Node n a2 c2 = smash c2 a2)
(Node n a2 c2 = smash c2 a1), (Node n a2 c2 = smash c2 gv1), (Node n a2 c2 = smash c1 c2), (Node n a2 c2 = smash c1 c1), (Node n a2 c2 = smash c1 a2), (Node n a2 c2 = smash c1 a1), (Node n a2 c2 = smash c1 gv1), (Node n a2 c2 = smash a2 c2), (Node n a2 c2 = smash a2 c1), (Node n a2 c2 = smash a2 a2)
(Node n a2 c2 = smash a2 a1), (Node n a2 c2 = smash a2 gv1), (Node n a2 c2 = smash a1 c2), (Node n a2 c2 = smash a1 c1), (Node n a2 c2 = smash a1 a2), (Node n a2 c2 = smash a1 a1), (Node n a2 c2 = smash a1 gv1), (Node n a2 c2 = smash gv1 c2), (Node n a2 c2 = smash gv1 c1), (Node n a2 c2 = smash gv1 a2)
(Node n a2 c2 = smash gv1 a1), (Node n a2 c2 = smash gv1 gv1), (Node n a2 c1 = c2), (Node n a2 c1 = c1), (Node n a2 c1 = a2), (Node n a2 c1 = a1), (Node n a2 c1 = gv1), (Node n a2 c1 = smash c2 c2), (Node n a2 c1 = smash c2 c1), (Node n a2 c1 = smash c2 a2)
(Node n a2 c1 = smash c2 a1), (Node n a2 c1 = smash c2 gv1), (Node n a2 c1 = smash c1 c2), (Node n a2 c1 = smash c1 c1), (Node n a2 c1 = smash c1 a2), (Node n a2 c1 = smash c1 a1), (Node n a2 c1 = smash c1 gv1), (Node n a2 c1 = smash a2 c2), (Node n a2 c1 = smash a2 c1), (Node n a2 c1 = smash a2 a2)
(Node n a2 c1 = smash a2 a1), (Node n a2 c1 = smash a2 gv1), (Node n a2 c1 = smash a1 c2), (Node n a2 c1 = smash a1 c1), (Node n a2 c1 = smash a1 a2), (Node n a2 c1 = smash a1 a1), (Node n a2 c1 = smash a1 gv1), (Node n a2 c1 = smash gv1 c2), (Node n a2 c1 = smash gv1 c1), (Node n a2 c1 = smash gv1 a2)
(Node n a2 c1 = smash gv1 a1), (Node n a2 c1 = smash gv1 gv1), (Node n a2 a2 = c2), (Node n a2 a2 = c1), (Node n a2 a2 = a2), (Node n a2 a2 = a1), (Node n a2 a2 = gv1), (Node n a2 a2 = smash c2 c2), (Node n a2 a2 = smash c2 c1), (Node n a2 a2 = smash c2 a2)
(Node n a2 a2 = smash c2 a1), (Node n a2 a2 = smash c2 gv1), (Node n a2 a2 = smash c1 c2), (Node n a2 a2 = smash c1 c1), (Node n a2 a2 = smash c1 a2), (Node n a2 a2 = smash c1 a1), (Node n a2 a2 = smash c1 gv1), (Node n a2 a2 = smash a2 c2), (Node n a2 a2 = smash a2 c1), (Node n a2 a2 = smash a2 a2)
(Node n a2 a2 = smash a2 a1), (Node n a2 a2 = smash a2 gv1), (Node n a2 a2 = smash a1 c2), (Node n a2 a2 = smash a1 c1), (Node n a2 a2 = smash a1 a2), (Node n a2 a2 = smash a1 a1), (Node n a2 a2 = smash a1 gv1), (Node n a2 a2 = smash gv1 c2), (Node n a2 a2 = smash gv1 c1), (Node n a2 a2 = smash gv1 a2)
(Node n a2 a2 = smash gv1 a1), (Node n a2 a2 = smash gv1 gv1), (Node n a2 a1 = c2), (Node n a2 a1 = c1), (Node n a2 a1 = a2), (Node n a2 a1 = a1), (Node n a2 a1 = gv1), (Node n a2 a1 = smash c2 c2), (Node n a2 a1 = smash c2 c1), (Node n a2 a1 = smash c2 a2)
(Node n a2 a1 = smash c2 a1), (Node n a2 a1 = smash c2 gv1), (Node n a2 a1 = smash c1 c2), (Node n a2 a1 = smash c1 c1), (Node n a2 a1 = smash c1 a2), (Node n a2 a1 = smash c1 a1), (Node n a2 a1 = smash c1 gv1), (Node n a2 a1 = smash a2 c2), (Node n a2 a1 = smash a2 c1), (Node n a2 a1 = smash a2 a2)
(Node n a2 a1 = smash a2 a1), (Node n a2 a1 = smash a2 gv1), (Node n a2 a1 = smash a1 c2), (Node n a2 a1 = smash a1 c1), (Node n a2 a1 = smash a1 a2), (Node n a2 a1 = smash a1 a1), (Node n a2 a1 = smash a1 gv1), (Node n a2 a1 = smash gv1 c2), (Node n a2 a1 = smash gv1 c1), (Node n a2 a1 = smash gv1 a2)
(Node n a2 a1 = smash gv1 a1), (Node n a2 a1 = smash gv1 gv1), (Node n a2 gv1 = c2), (Node n a2 gv1 = c1), (Node n a2 gv1 = a2), (Node n a2 gv1 = a1), (Node n a2 gv1 = gv1), (Node n a2 gv1 = smash c2 c2), (Node n a2 gv1 = smash c2 c1), (Node n a2 gv1 = smash c2 a2)
(Node n a2 gv1 = smash c2 a1), (Node n a2 gv1 = smash c2 gv1), (Node n a2 gv1 = smash c1 c2), (Node n a2 gv1 = smash c1 c1), (Node n a2 gv1 = smash c1 a2), (Node n a2 gv1 = smash c1 a1), (Node n a2 gv1 = smash c1 gv1), (Node n a2 gv1 = smash a2 c2), (Node n a2 gv1 = smash a2 c1), (Node n a2 gv1 = smash a2 a2)
(Node n a2 gv1 = smash a2 a1), (Node n a2 gv1 = smash a2 gv1), (Node n a2 gv1 = smash a1 c2), (Node n a2 gv1 = smash a1 c1), (Node n a2 gv1 = smash a1 a2), (Node n a2 gv1 = smash a1 a1), (Node n a2 gv1 = smash a1 gv1), (Node n a2 gv1 = smash gv1 c2), (Node n a2 gv1 = smash gv1 c1), (Node n a2 gv1 = smash gv1 a2)
(Node n a2 gv1 = smash gv1 a1), (Node n a2 gv1 = smash gv1 gv1), (Node n a1 c2 = c2), (Node n a1 c2 = c1), (Node n a1 c2 = a2), (Node n a1 c2 = a1), (Node n a1 c2 = gv1), (Node n a1 c2 = smash c2 c2), (Node n a1 c2 = smash c2 c1), (Node n a1 c2 = smash c2 a2)
(Node n a1 c2 = smash c2 a1), (Node n a1 c2 = smash c2 gv1), (Node n a1 c2 = smash c1 c2), (Node n a1 c2 = smash c1 c1), (Node n a1 c2 = smash c1 a2), (Node n a1 c2 = smash c1 a1), (Node n a1 c2 = smash c1 gv1), (Node n a1 c2 = smash a2 c2), (Node n a1 c2 = smash a2 c1), (Node n a1 c2 = smash a2 a2)
(Node n a1 c2 = smash a2 a1), (Node n a1 c2 = smash a2 gv1), (Node n a1 c2 = smash a1 c2), (Node n a1 c2 = smash a1 c1), (Node n a1 c2 = smash a1 a2), (Node n a1 c2 = smash a1 a1), (Node n a1 c2 = smash a1 gv1), (Node n a1 c2 = smash gv1 c2), (Node n a1 c2 = smash gv1 c1), (Node n a1 c2 = smash gv1 a2)
(Node n a1 c2 = smash gv1 a1), (Node n a1 c2 = smash gv1 gv1), (Node n a1 c1 = c2), (Node n a1 c1 = c1), (Node n a1 c1 = a2), (Node n a1 c1 = a1), (Node n a1 c1 = gv1), (Node n a1 c1 = smash c2 c2), (Node n a1 c1 = smash c2 c1), (Node n a1 c1 = smash c2 a2)
(Node n a1 c1 = smash c2 a1), (Node n a1 c1 = smash c2 gv1), (Node n a1 c1 = smash c1 c2), (Node n a1 c1 = smash c1 c1), (Node n a1 c1 = smash c1 a2), (Node n a1 c1 = smash c1 a1), (Node n a1 c1 = smash c1 gv1), (Node n a1 c1 = smash a2 c2), (Node n a1 c1 = smash a2 c1), (Node n a1 c1 = smash a2 a2)
(Node n a1 c1 = smash a2 a1), (Node n a1 c1 = smash a2 gv1), (Node n a1 c1 = smash a1 c2), (Node n a1 c1 = smash a1 c1), (Node n a1 c1 = smash a1 a2), (Node n a1 c1 = smash a1 a1), (Node n a1 c1 = smash a1 gv1), (Node n a1 c1 = smash gv1 c2), (Node n a1 c1 = smash gv1 c1), (Node n a1 c1 = smash gv1 a2)
(Node n a1 c1 = smash gv1 a1), (Node n a1 c1 = smash gv1 gv1), (Node n a1 a2 = c2), (Node n a1 a2 = c1), (Node n a1 a2 = a2), (Node n a1 a2 = a1), (Node n a1 a2 = gv1), (Node n a1 a2 = smash c2 c2), (Node n a1 a2 = smash c2 c1), (Node n a1 a2 = smash c2 a2)
(Node n a1 a2 = smash c2 a1), (Node n a1 a2 = smash c2 gv1), (Node n a1 a2 = smash c1 c2), (Node n a1 a2 = smash c1 c1), (Node n a1 a2 = smash c1 a2), (Node n a1 a2 = smash c1 a1), (Node n a1 a2 = smash c1 gv1), (Node n a1 a2 = smash a2 c2), (Node n a1 a2 = smash a2 c1), (Node n a1 a2 = smash a2 a2)
(Node n a1 a2 = smash a2 a1), (Node n a1 a2 = smash a2 gv1), (Node n a1 a2 = smash a1 c2), (Node n a1 a2 = smash a1 c1), (Node n a1 a2 = smash a1 a2), (Node n a1 a2 = smash a1 a1), (Node n a1 a2 = smash a1 gv1), (Node n a1 a2 = smash gv1 c2), (Node n a1 a2 = smash gv1 c1), (Node n a1 a2 = smash gv1 a2)
(Node n a1 a2 = smash gv1 a1), (Node n a1 a2 = smash gv1 gv1), (Node n a1 a1 = c2), (Node n a1 a1 = c1), (Node n a1 a1 = a2), (Node n a1 a1 = a1), (Node n a1 a1 = gv1), (Node n a1 a1 = smash c2 c2), (Node n a1 a1 = smash c2 c1), (Node n a1 a1 = smash c2 a2)
(Node n a1 a1 = smash c2 a1), (Node n a1 a1 = smash c2 gv1), (Node n a1 a1 = smash c1 c2), (Node n a1 a1 = smash c1 c1), (Node n a1 a1 = smash c1 a2), (Node n a1 a1 = smash c1 a1), (Node n a1 a1 = smash c1 gv1), (Node n a1 a1 = smash a2 c2), (Node n a1 a1 = smash a2 c1), (Node n a1 a1 = smash a2 a2)
(Node n a1 a1 = smash a2 a1), (Node n a1 a1 = smash a2 gv1), (Node n a1 a1 = smash a1 c2), (Node n a1 a1 = smash a1 c1), (Node n a1 a1 = smash a1 a2), (Node n a1 a1 = smash a1 a1), (Node n a1 a1 = smash a1 gv1), (Node n a1 a1 = smash gv1 c2), (Node n a1 a1 = smash gv1 c1), (Node n a1 a1 = smash gv1 a2)
(Node n a1 a1 = smash gv1 a1), (Node n a1 a1 = smash gv1 gv1), (Node n a1 gv1 = c2), (Node n a1 gv1 = c1), (Node n a1 gv1 = a2), (Node n a1 gv1 = a1), (Node n a1 gv1 = gv1), (Node n a1 gv1 = smash c2 c2), (Node n a1 gv1 = smash c2 c1), (Node n a1 gv1 = smash c2 a2)
(Node n a1 gv1 = smash c2 a1), (Node n a1 gv1 = smash c2 gv1), (Node n a1 gv1 = smash c1 c2), (Node n a1 gv1 = smash c1 c1), (Node n a1 gv1 = smash c1 a2), (Node n a1 gv1 = smash c1 a1), (Node n a1 gv1 = smash c1 gv1), (Node n a1 gv1 = smash a2 c2), (Node n a1 gv1 = smash a2 c1), (Node n a1 gv1 = smash a2 a2)
(Node n a1 gv1 = smash a2 a1), (Node n a1 gv1 = smash a2 gv1), (Node n a1 gv1 = smash a1 c2), (Node n a1 gv1 = smash a1 c1), (Node n a1 gv1 = smash a1 a2), (Node n a1 gv1 = smash a1 a1), (Node n a1 gv1 = smash a1 gv1), (Node n a1 gv1 = smash gv1 c2), (Node n a1 gv1 = smash gv1 c1), (Node n a1 gv1 = smash gv1 a2)
(Node n a1 gv1 = smash gv1 a1), (Node n a1 gv1 = smash gv1 gv1), (Node n gv1 c2 = c2), (Node n gv1 c2 = c1), (Node n gv1 c2 = a2), (Node n gv1 c2 = a1), (Node n gv1 c2 = gv1), (Node n gv1 c2 = smash c2 c2), (Node n gv1 c2 = smash c2 c1), (Node n gv1 c2 = smash c2 a2)
(Node n gv1 c2 = smash c2 a1), (Node n gv1 c2 = smash c2 gv1), (Node n gv1 c2 = smash c1 c2), (Node n gv1 c2 = smash c1 c1), (Node n gv1 c2 = smash c1 a2), (Node n gv1 c2 = smash c1 a1), (Node n gv1 c2 = smash c1 gv1), (Node n gv1 c2 = smash a2 c2), (Node n gv1 c2 = smash a2 c1), (Node n gv1 c2 = smash a2 a2)
(Node n gv1 c2 = smash a2 a1), (Node n gv1 c2 = smash a2 gv1), (Node n gv1 c2 = smash a1 c2), (Node n gv1 c2 = smash a1 c1), (Node n gv1 c2 = smash a1 a2), (Node n gv1 c2 = smash a1 a1), (Node n gv1 c2 = smash a1 gv1), (Node n gv1 c2 = smash gv1 c2), (Node n gv1 c2 = smash gv1 c1), (Node n gv1 c2 = smash gv1 a2)
(Node n gv1 c2 = smash gv1 a1), (Node n gv1 c2 = smash gv1 gv1), (Node n gv1 c1 = c2), (Node n gv1 c1 = c1), (Node n gv1 c1 = a2), (Node n gv1 c1 = a1), (Node n gv1 c1 = gv1), (Node n gv1 c1 = smash c2 c2), (Node n gv1 c1 = smash c2 c1), (Node n gv1 c1 = smash c2 a2)
(Node n gv1 c1 = smash c2 a1), (Node n gv1 c1 = smash c2 gv1), (Node n gv1 c1 = smash c1 c2), (Node n gv1 c1 = smash c1 c1), (Node n gv1 c1 = smash c1 a2), (Node n gv1 c1 = smash c1 a1), (Node n gv1 c1 = smash c1 gv1), (Node n gv1 c1 = smash a2 c2), (Node n gv1 c1 = smash a2 c1), (Node n gv1 c1 = smash a2 a2)
(Node n gv1 c1 = smash a2 a1), (Node n gv1 c1 = smash a2 gv1), (Node n gv1 c1 = smash a1 c2), (Node n gv1 c1 = smash a1 c1), (Node n gv1 c1 = smash a1 a2), (Node n gv1 c1 = smash a1 a1), (Node n gv1 c1 = smash a1 gv1), (Node n gv1 c1 = smash gv1 c2), (Node n gv1 c1 = smash gv1 c1), (Node n gv1 c1 = smash gv1 a2)
(Node n gv1 c1 = smash gv1 a1), (Node n gv1 c1 = smash gv1 gv1), (Node n gv1 a2 = c2), (Node n gv1 a2 = c1), (Node n gv1 a2 = a2), (Node n gv1 a2 = a1), (Node n gv1 a2 = gv1), (Node n gv1 a2 = smash c2 c2), (Node n gv1 a2 = smash c2 c1), (Node n gv1 a2 = smash c2 a2)
(Node n gv1 a2 = smash c2 a1), (Node n gv1 a2 = smash c2 gv1), (Node n gv1 a2 = smash c1 c2), (Node n gv1 a2 = smash c1 c1), (Node n gv1 a2 = smash c1 a2), (Node n gv1 a2 = smash c1 a1), (Node n gv1 a2 = smash c1 gv1), (Node n gv1 a2 = smash a2 c2), (Node n gv1 a2 = smash a2 c1), (Node n gv1 a2 = smash a2 a2)
(Node n gv1 a2 = smash a2 a1), (Node n gv1 a2 = smash a2 gv1), (Node n gv1 a2 = smash a1 c2), (Node n gv1 a2 = smash a1 c1), (Node n gv1 a2 = smash a1 a2), (Node n gv1 a2 = smash a1 a1), (Node n gv1 a2 = smash a1 gv1), (Node n gv1 a2 = smash gv1 c2), (Node n gv1 a2 = smash gv1 c1), (Node n gv1 a2 = smash gv1 a2)
(Node n gv1 a2 = smash gv1 a1), (Node n gv1 a2 = smash gv1 gv1), (Node n gv1 a1 = c2), (Node n gv1 a1 = c1), (Node n gv1 a1 = a2), (Node n gv1 a1 = a1), (Node n gv1 a1 = gv1), (Node n gv1 a1 = smash c2 c2), (Node n gv1 a1 = smash c2 c1), (Node n gv1 a1 = smash c2 a2)
(Node n gv1 a1 = smash c2 a1), (Node n gv1 a1 = smash c2 gv1), (Node n gv1 a1 = smash c1 c2), (Node n gv1 a1 = smash c1 c1), (Node n gv1 a1 = smash c1 a2), (Node n gv1 a1 = smash c1 a1), (Node n gv1 a1 = smash c1 gv1), (Node n gv1 a1 = smash a2 c2), (Node n gv1 a1 = smash a2 c1), (Node n gv1 a1 = smash a2 a2)
(Node n gv1 a1 = smash a2 a1), (Node n gv1 a1 = smash a2 gv1), (Node n gv1 a1 = smash a1 c2), (Node n gv1 a1 = smash a1 c1), (Node n gv1 a1 = smash a1 a2), (Node n gv1 a1 = smash a1 a1), (Node n gv1 a1 = smash a1 gv1), (Node n gv1 a1 = smash gv1 c2), (Node n gv1 a1 = smash gv1 c1), (Node n gv1 a1 = smash gv1 a2)
(Node n gv1 a1 = smash gv1 a1), (Node n gv1 a1 = smash gv1 gv1), (Node n gv1 gv1 = c2), (Node n gv1 gv1 = c1), (Node n gv1 gv1 = a2), (Node n gv1 gv1 = a1), (Node n gv1 gv1 = gv1), (Node n gv1 gv1 = smash c2 c2), (Node n gv1 gv1 = smash c2 c1), (Node n gv1 gv1 = smash c2 a2)
(Node n gv1 gv1 = smash c2 a1), (Node n gv1 gv1 = smash c2 gv1), (Node n gv1 gv1 = smash c1 c2), (Node n gv1 gv1 = smash c1 c1), (Node n gv1 gv1 = smash c1 a2), (Node n gv1 gv1 = smash c1 a1), (Node n gv1 gv1 = smash c1 gv1), (Node n gv1 gv1 = smash a2 c2), (Node n gv1 gv1 = smash a2 c1), (Node n gv1 gv1 = smash a2 a2)
(Node n gv1 gv1 = smash a2 a1), (Node n gv1 gv1 = smash a2 gv1), (Node n gv1 gv1 = smash a1 c2), (Node n gv1 gv1 = smash a1 c1), (Node n gv1 gv1 = smash a1 a2), (Node n gv1 gv1 = smash a1 a1), (Node n gv1 gv1 = smash a1 gv1), (Node n gv1 gv1 = smash gv1 c2), (Node n gv1 gv1 = smash gv1 c1), (Node n gv1 gv1 = smash gv1 a2)
(Node n gv1 gv1 = smash gv1 a1), (Node n gv1 gv1 = smash gv1 gv1), (smash c2 c2 = c2), (smash c2 c2 = c1), (smash c2 c2 = a2), (smash c2 c2 = a1), (smash c2 c2 = gv1), (smash c2 c1 = c2), (smash c2 c1 = c1), (smash c2 c1 = a2)
(smash c2 c1 = a1), (smash c2 c1 = gv1), (smash c2 a2 = c2), (smash c2 a2 = c1), (smash c2 a2 = a2), (smash c2 a2 = a1), (smash c2 a2 = gv1), (smash c2 a1 = c2), (smash c2 a1 = c1), (smash c2 a1 = a2)
(smash c2 a1 = a1), (smash c2 a1 = gv1), (smash c2 gv1 = c2), (smash c2 gv1 = c1), (smash c2 gv1 = a2), (smash c2 gv1 = a1), (smash c2 gv1 = gv1), (smash c1 c2 = c2), (smash c1 c2 = c1), (smash c1 c2 = a2)
(smash c1 c2 = a1), (smash c1 c2 = gv1), (smash c1 c1 = c2), (smash c1 c1 = c1), (smash c1 c1 = a2), (smash c1 c1 = a1), (smash c1 c1 = gv1), (smash c1 a2 = c2), (smash c1 a2 = c1), (smash c1 a2 = a2)
(smash c1 a2 = a1), (smash c1 a2 = gv1), (smash c1 a1 = c2), (smash c1 a1 = c1), (smash c1 a1 = a2), (smash c1 a1 = a1), (smash c1 a1 = gv1), (smash c1 gv1 = c2), (smash c1 gv1 = c1), (smash c1 gv1 = a2)
(smash c1 gv1 = a1), (smash c1 gv1 = gv1), (smash a2 c2 = c2), (smash a2 c2 = c1), (smash a2 c2 = a2), (smash a2 c2 = a1), (smash a2 c2 = gv1), (smash a2 c1 = c2), (smash a2 c1 = c1), (smash a2 c1 = a2)
(smash a2 c1 = a1), (smash a2 c1 = gv1), (smash a2 a2 = c2), (smash a2 a2 = c1), (smash a2 a2 = a2), (smash a2 a2 = a1), (smash a2 a2 = gv1), (smash a2 a1 = c2), (smash a2 a1 = c1), (smash a2 a1 = a2)
(smash a2 a1 = a1), (smash a2 a1 = gv1), (smash a2 gv1 = c2), (smash a2 gv1 = c1), (smash a2 gv1 = a2), (smash a2 gv1 = a1), (smash a2 gv1 = gv1), (smash a1 c2 = c2), (smash a1 c2 = c1), (smash a1 c2 = a2)
(smash a1 c2 = a1), (smash a1 c2 = gv1), (smash a1 c1 = c2), (smash a1 c1 = c1), (smash a1 c1 = a2), (smash a1 c1 = a1), (smash a1 c1 = gv1), (smash a1 a2 = c2), (smash a1 a2 = c1), (smash a1 a2 = a2)
(smash a1 a2 = a1), (smash a1 a2 = gv1), (smash a1 a1 = c2), (smash a1 a1 = c1), (smash a1 a1 = a2), (smash a1 a1 = a1), (smash a1 a1 = gv1), (smash a1 gv1 = c2), (smash a1 gv1 = c1), (smash a1 gv1 = a2)
(smash a1 gv1 = a1), (smash a1 gv1 = gv1), (smash gv1 c2 = c2), (smash gv1 c2 = c1), (smash gv1 c2 = a2), (smash gv1 c2 = a1), (smash gv1 c2 = gv1), (smash gv1 c1 = c2), (smash gv1 c1 = c1), (smash gv1 c1 = a2)
(smash gv1 c1 = a1), (smash gv1 c1 = gv1), (smash gv1 a2 = c2), (smash gv1 a2 = c1), (smash gv1 a2 = a2), (smash gv1 a2 = a1), (smash gv1 a2 = gv1), (smash gv1 a1 = c2), (smash gv1 a1 = c1), (smash gv1 a1 = a2)
(smash gv1 a1 = a1), (smash gv1 a1 = gv1), (smash gv1 gv1 = c2), (smash gv1 gv1 = c1), (smash gv1 gv1 = a2), (smash gv1 gv1 = a1), (smash gv1 gv1 = gv1), (Leaf = Node n1 c2 c2), (Leaf = Node n1 c2 c1), (Leaf = Node n1 c2 a2)
(Leaf = Node n1 c2 a1), (Leaf = Node n1 c2 gv1), (Leaf = Node n1 c1 c2), (Leaf = Node n1 c1 c1), (Leaf = Node n1 c1 a2), (Leaf = Node n1 c1 a1), (Leaf = Node n1 c1 gv1), (Leaf = Node n1 a2 c2), (Leaf = Node n1 a2 c1), (Leaf = Node n1 a2 a2)
(Leaf = Node n1 a2 a1), (Leaf = Node n1 a2 gv1), (Leaf = Node n1 a1 c2), (Leaf = Node n1 a1 c1), (Leaf = Node n1 a1 a2), (Leaf = Node n1 a1 a1), (Leaf = Node n1 a1 gv1), (Leaf = Node n1 gv1 c2), (Leaf = Node n1 gv1 c1), (Leaf = Node n1 gv1 a2)
(Leaf = Node n1 gv1 a1), (Leaf = Node n1 gv1 gv1), (Leaf = Node n0 c2 c2), (Leaf = Node n0 c2 c1), (Leaf = Node n0 c2 a2), (Leaf = Node n0 c2 a1), (Leaf = Node n0 c2 gv1), (Leaf = Node n0 c1 c2), (Leaf = Node n0 c1 c1), (Leaf = Node n0 c1 a2)
(Leaf = Node n0 c1 a1), (Leaf = Node n0 c1 gv1), (Leaf = Node n0 a2 c2), (Leaf = Node n0 a2 c1), (Leaf = Node n0 a2 a2), (Leaf = Node n0 a2 a1), (Leaf = Node n0 a2 gv1), (Leaf = Node n0 a1 c2), (Leaf = Node n0 a1 c1), (Leaf = Node n0 a1 a2)
(Leaf = Node n0 a1 a1), (Leaf = Node n0 a1 gv1), (Leaf = Node n0 gv1 c2), (Leaf = Node n0 gv1 c1), (Leaf = Node n0 gv1 a2), (Leaf = Node n0 gv1 a1), (Leaf = Node n0 gv1 gv1), (Leaf = Node n c2 c2), (Leaf = Node n c2 c1), (Leaf = Node n c2 a2)
(Leaf = Node n c2 a1), (Leaf = Node n c2 gv1), (Leaf = Node n c1 c2), (Leaf = Node n c1 c1), (Leaf = Node n c1 a2), (Leaf = Node n c1 a1), (Leaf = Node n c1 gv1), (Leaf = Node n a2 c2), (Leaf = Node n a2 c1), (Leaf = Node n a2 a2)
(Leaf = Node n a2 a1), (Leaf = Node n a2 gv1), (Leaf = Node n a1 c2), (Leaf = Node n a1 c1), (Leaf = Node n a1 a2), (Leaf = Node n a1 a1), (Leaf = Node n a1 gv1), (Leaf = Node n gv1 c2), (Leaf = Node n gv1 c1), (Leaf = Node n gv1 a2)
(Leaf = Node n gv1 a1), (Leaf = Node n gv1 gv1), (Leaf = smash c2 c2), (Leaf = smash c2 c1), (Leaf = smash c2 a2), (Leaf = smash c2 a1), (Leaf = smash c2 gv1), (Leaf = smash c1 c2), (Leaf = smash c1 c1), (Leaf = smash c1 a2)
(Leaf = smash c1 a1), (Leaf = smash c1 gv1), (Leaf = smash a2 c2), (Leaf = smash a2 c1), (Leaf = smash a2 a2), (Leaf = smash a2 a1), (Leaf = smash a2 gv1), (Leaf = smash a1 c2), (Leaf = smash a1 c1), (Leaf = smash a1 a2)
(Leaf = smash a1 a1), (Leaf = smash a1 gv1), (Leaf = smash gv1 c2), (Leaf = smash gv1 c1), (Leaf = smash gv1 a2), (Leaf = smash gv1 a1), (Leaf = smash gv1 gv1), (find_max' n1 p = n1), (find_max' n1 p = n0), (find_max' n1 p = n)
(find_max' n0 p = n1), (find_max' n0 p = n0), (find_max' n0 p = n), (find_max' n p = n1), (find_max' n p = n0), (find_max' n p = n), (length p = n1), (length p = n0), (length p = n), (length p = find_max' n1 p)
(length p = find_max' n0 p), (length p = find_max' n p), (Some n1 = find_max p), (Some n0 = find_max p), (Some n = find_max p), (None = Some n1), (None = Some n0), (None = Some n), (None = find_max p), (None = Some c2)
(None = Some c1), (None = Some a2), (None = Some a1), (None = Some gv1), ((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n0)), ((n1 >? n1) = (n1 >=? n)), ((n1 >? n1) = (n0 >=? n1)), ((n1 >? n1) = (n0 >=? n0)), ((n1 >? n1) = (n0 >=? n))
((n1 >? n1) = (n >=? n1)), ((n1 >? n1) = (n >=? n0)), ((n1 >? n1) = (n >=? n)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n1 >=? n)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n0)), ((n1 >? n0) = (n0 >=? n)), ((n1 >? n0) = (n >=? n1))
((n1 >? n0) = (n >=? n0)), ((n1 >? n0) = (n >=? n)), ((n1 >? n) = (n1 >=? n1)), ((n1 >? n) = (n1 >=? n0)), ((n1 >? n) = (n1 >=? n)), ((n1 >? n) = (n0 >=? n1)), ((n1 >? n) = (n0 >=? n0)), ((n1 >? n) = (n0 >=? n)), ((n1 >? n) = (n >=? n1)), ((n1 >? n) = (n >=? n0))
((n1 >? n) = (n >=? n)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n)), ((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n0)), ((n0 >? n1) = (n0 >=? n)), ((n0 >? n1) = (n >=? n1)), ((n0 >? n1) = (n >=? n0)), ((n0 >? n1) = (n >=? n))
((n0 >? n0) = (n1 >=? n1)), ((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n1 >=? n)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n0)), ((n0 >? n0) = (n0 >=? n)), ((n0 >? n0) = (n >=? n1)), ((n0 >? n0) = (n >=? n0)), ((n0 >? n0) = (n >=? n)), ((n0 >? n) = (n1 >=? n1))
((n0 >? n) = (n1 >=? n0)), ((n0 >? n) = (n1 >=? n)), ((n0 >? n) = (n0 >=? n1)), ((n0 >? n) = (n0 >=? n0)), ((n0 >? n) = (n0 >=? n)), ((n0 >? n) = (n >=? n1)), ((n0 >? n) = (n >=? n0)), ((n0 >? n) = (n >=? n)), ((n >? n1) = (n1 >=? n1)), ((n >? n1) = (n1 >=? n0))
((n >? n1) = (n1 >=? n)), ((n >? n1) = (n0 >=? n1)), ((n >? n1) = (n0 >=? n0)), ((n >? n1) = (n0 >=? n)), ((n >? n1) = (n >=? n1)), ((n >? n1) = (n >=? n0)), ((n >? n1) = (n >=? n)), ((n >? n0) = (n1 >=? n1)), ((n >? n0) = (n1 >=? n0)), ((n >? n0) = (n1 >=? n))
((n >? n0) = (n0 >=? n1)), ((n >? n0) = (n0 >=? n0)), ((n >? n0) = (n0 >=? n)), ((n >? n0) = (n >=? n1)), ((n >? n0) = (n >=? n0)), ((n >? n0) = (n >=? n)), ((n >? n) = (n1 >=? n1)), ((n >? n) = (n1 >=? n0)), ((n >? n) = (n1 >=? n)), ((n >? n) = (n0 >=? n1))
((n >? n) = (n0 >=? n0)), ((n >? n) = (n0 >=? n)), ((n >? n) = (n >=? n1)), ((n >? n) = (n >=? n0)), ((n >? n) = (n >=? n))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 413.78 seconds


Label: 0 (0)
(pow2heap n (Node n1 c1 c2))

Label: 1 (1)
(pow2heap n (Node n0 a1 a2))

Label: 2 (2)
(pow2heap n gv3), (gv3 <> c2), (c2 <> gv3), (pow2heap (find_max' n p) gv3), (Node n0 a2 a2 = gv3), (Node n0 a2 a1 = gv3), (Node n0 a2 c2 = gv3), (Node n0 a2 c1 = gv3), (Node n0 a1 a2 = gv3), (Node n0 a1 a1 = gv3)
(Node n0 a1 c2 = gv3), (Node n0 a1 c1 = gv3), (Node n0 c2 a2 = gv3), (Node n0 c2 a1 = gv3), (Node n0 c2 c2 = gv3), (Node n0 c2 c1 = gv3), (Node n0 c1 a2 = gv3), (Node n0 c1 a1 = gv3), (Node n0 c1 c2 = gv3), (Node n0 c1 c1 = gv3)

Label: 3 (3)
(pow2heapp gv0 n (Node n c1 c1)), (pow2heapp gv0 n0 (Node n0 a1 a1)), (pow2heapp gv0 n0 (Node n0 a1 c1)), (pow2heapp gv0 n0 (Node n0 c1 a1)), (pow2heapp gv0 n0 (Node n0 c1 c1)), (pow2heapp gv0 n1 (Node n1 c1 c1)), (pow2heapp gv0 gv0 (Node n c1 a1)), (pow2heapp gv0 gv0 (Node n c1 c1)), (pow2heapp gv0 gv0 (Node gv0 a1 a1)), (pow2heapp gv0 gv0 (Node gv0 a1 c1))
(pow2heapp gv0 gv0 (Node gv0 c1 a1)), (pow2heapp gv0 gv0 (Node gv0 c1 c1)), (pow2heapp gv0 (find_max' n p) (Node n c1 c1)), (pow2heapp (find_max' gv0 p) n (Node n c1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 c1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 a1)), (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 c1)), (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 c1)), (pow2heapp gv0 (find_max' gv0 p) (Node n c1 a1))

Label: 4 (4)
(pow2heap n gv2), (a2 <> gv2), (gv2 <> a2), (pow2heap (find_max' n p) gv2), (Node n1 c2 c2 = gv2), (Node n1 c2 c1 = gv2), (Node n1 c2 a2 = gv2), (Node n1 c2 a1 = gv2), (Node n1 c1 c2 = gv2), (Node n1 c1 c1 = gv2)
(Node n1 c1 a2 = gv2), (Node n1 c1 a1 = gv2), (Node n1 a2 c2 = gv2), (Node n1 a2 c1 = gv2), (Node n1 a2 a2 = gv2), (Node n1 a2 a1 = gv2), (Node n1 a1 c2 = gv2), (Node n1 a1 c1 = gv2), (Node n1 a1 a2 = gv2), (Node n1 a1 a1 = gv2)

Label: 5 (5)


------------------------------ ALL RESULTS ------------------------------
1. (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  priqq n (Node n0 a1 a2 :: p) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

2. (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap n (Node n1 c1 c2))
(pow2heap n (Node n1 c1 c2) ->  priqq n (Node n0 a1 a2 :: p) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

3. (priqq n (Node n0 a1 a2 :: p) -> pow2heap n (Node n0 a1 a2))
(pow2heap n (Node n0 a1 a2) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

4. (pow2heap n gv2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

5. (a2 <> gv2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

6. (gv2 <> a2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

7. (pow2heap (find_max' n p) gv2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

8. (pow2heap n gv3 ->  priqq n (gv3 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

9. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c2 c2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

10. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c2 c1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

11. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c2 a2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

12. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c2 a1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

13. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

14. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 a2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

15. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 a1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

16. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a2 c2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

17. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a2 c1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

18. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a2 a2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

19. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a2 a1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

20. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a1 c2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

21. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a1 c1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

22. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a1 a2 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

23. (priqq n (Node n0 a1 a2 :: p) ->  Node n1 a1 a1 = gv2 ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

24. (gv3 <> c2 ->  priqq n (gv3 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

25. (c2 <> gv3 ->  priqq n (gv3 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

26. (pow2heap (find_max' n p) gv3 ->  priqq n (gv3 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

27. (priqq n (gv3 :: p) ->  Node n0 a2 a2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

28. (priqq n (gv3 :: p) ->  Node n0 a2 a1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

29. (priqq n (gv3 :: p) ->  Node n0 a2 c2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

30. (priqq n (gv3 :: p) ->  Node n0 a2 c1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

31. (priqq n (gv3 :: p) ->  Node n0 a1 a1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

32. (priqq n (gv3 :: p) ->  Node n0 a1 c2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

33. (priqq n (gv3 :: p) ->  Node n0 a1 c1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

34. (priqq n (gv3 :: p) ->  Node n0 c2 a2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

35. (priqq n (gv3 :: p) ->  Node n0 c2 a1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

36. (priqq n (gv3 :: p) ->  Node n0 c2 c2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

37. (priqq n (gv3 :: p) ->  Node n0 c2 c1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

38. (priqq n (gv3 :: p) ->  Node n0 c1 a2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

39. (priqq n (gv3 :: p) ->  Node n0 c1 a1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

40. (priqq n (gv3 :: p) ->  Node n0 c1 c2 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

41. (priqq n (gv3 :: p) ->  Node n0 c1 c1 = gv3 ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) gv3))

42. (pow2heapp gv0 n (Node n c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

43. (pow2heapp gv0 n0 (Node n0 a1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

44. (pow2heapp gv0 n0 (Node n0 a1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

45. (pow2heapp gv0 n0 (Node n0 c1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

46. (pow2heapp gv0 n0 (Node n0 c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

47. (pow2heapp gv0 n1 (Node n1 c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

48. (pow2heapp gv0 gv0 (Node n c1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

49. (pow2heapp gv0 gv0 (Node n c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

50. (pow2heapp gv0 gv0 (Node gv0 a1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

51. (pow2heapp gv0 gv0 (Node gv0 a1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

52. (pow2heapp gv0 gv0 (Node gv0 c1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

53. (pow2heapp gv0 gv0 (Node gv0 c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

54. (pow2heapp gv0 (find_max' n p) (Node n c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

55. (pow2heapp (find_max' gv0 p) n (Node n c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

56. (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

57. (pow2heapp gv0 (find_max' n0 p) (Node n0 a1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

58. (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

59. (pow2heapp gv0 (find_max' n0 p) (Node n0 c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

60. (pow2heapp gv0 (find_max' n1 p) (Node n1 c1 c1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))

61. (pow2heapp gv0 (find_max' gv0 p) (Node n c1 a1) ->  priqq n (Node n0 a1 a2 :: p) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap gv0 (smash (Node n1 c1 c2) (Node n0 a1 a2)))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 530.519 seconds

Number of Result Pairs Returned: 61

1. (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  priqq n (Node n0 a1 a2 :: p) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

2. (Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap n (Node n1 c1 c2))
(pow2heap n (Node n1 c1 c2) ->  priqq n (Node n0 a1 a2 :: p) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

3. (priqq n (Node n0 a1 a2 :: p) -> pow2heap n (Node n0 a1 a2))
(pow2heap n (Node n0 a1 a2) ->  Node n1 c1 c2 = Leaf \/ pow2heap n (Node n1 c1 c2) ->  pow2heap (S n) (smash (Node n1 c1 c2) (Node n0 a1 a2)))

4. (pow2heap n gv2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))

5. (a2 <> gv2 ->  priqq n (Node n0 a1 a2 :: p) ->  gv2 = Leaf \/ pow2heap n gv2 -> pow2heap (S n) (smash gv2 (Node n0 a1 a2)))
