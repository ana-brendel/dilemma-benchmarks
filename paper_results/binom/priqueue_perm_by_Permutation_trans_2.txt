Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Permutation elems2 (cons_elems0 ++ rest_elems0))
 -- (priqueue_elems p rest_elems)
 -- (Permutation elems1 (cons_elems ++ rest_elems))
 -- (priqueue_elems p rest_elems0)
 -- (forall elems1 elems2 : list nat,
 priqueue_elems p elems1 ->
 priqueue_elems p elems2 -> Permutation elems1 elems2)
 -- (tree_elems a cons_elems0)
 -- (tree_elems a cons_elems)
 -- (priqueue_elems (a :: p) elems1)
 -- (priqueue_elems (a :: p) elems2)

----------------------------------
Goal: (Permutation (cons_elems ++ rest_elems) elems2)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.674 seconds

gv0 : (list nat) = (cons_elems ++ rest_elems)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 195.004 seconds

Label: Generalization #0
Assumptions: 
 -- (priqueue_elems p rest_elems)
 -- (tree_elems a cons_elems)
 -- (priqueue_elems (a :: p) elems2)

----------------------------------
Goal: (Permutation (cons_elems ++ rest_elems) elems2)
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (priqueue_elems p rest_elems)
 -- (cons_elems ++ rest_elems = gv0)
 -- (tree_elems a cons_elems)
 -- (priqueue_elems (a :: p) elems2)

----------------------------------
Goal: (Permutation gv0 elems2)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 195.139 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqueue_elems p rest_elems)
Positive Examples: 500
Negative Examples: 35

Label: 1 (1)
Abducted Assumption: (tree_elems a cons_elems)
Positive Examples: 500
Negative Examples: 34

Label: 2 (2)
Abducted Assumption: (priqueue_elems (a :: p) elems2)
Positive Examples: 177
Negative Examples: 55

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 15
Negative Examples: 17


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 195.456 seconds


Label: 0 (0)
(Abs p elems2), (Abs p rest_elems), (Abs p cons_elems), (priqueue_elems p elems2), (priqueue_elems p rest_elems), (priqueue_elems p cons_elems), (tree_elems a elems2), (tree_elems a rest_elems), (tree_elems a cons_elems), (priq p)
(Permutation elems2 elems2), (Permutation elems2 rest_elems), (Permutation elems2 cons_elems), (Permutation rest_elems elems2), (Permutation rest_elems rest_elems), (Permutation rest_elems cons_elems), (Permutation cons_elems elems2), (Permutation cons_elems rest_elems), (Permutation cons_elems cons_elems), (Permutation p p)
(In a p), (p = p), (a = a), (elems2 = elems2), (elems2 = rest_elems), (elems2 = cons_elems), (rest_elems = elems2), (rest_elems = rest_elems), (rest_elems = cons_elems), (cons_elems = elems2)
(cons_elems = rest_elems), (cons_elems = cons_elems), (Abs p (elems2 ++ elems2)), (Abs p (elems2 ++ rest_elems)), (Abs p (elems2 ++ cons_elems)), (Abs p (rest_elems ++ elems2)), (Abs p (rest_elems ++ rest_elems)), (Abs p (rest_elems ++ cons_elems)), (Abs p (cons_elems ++ elems2)), (Abs p (cons_elems ++ rest_elems))
(Abs p (cons_elems ++ cons_elems)), (Abs p []), (Abs (a :: p) elems2), (Abs (a :: p) rest_elems), (Abs (a :: p) cons_elems), (Abs (a :: p) (elems2 ++ elems2)), (Abs (a :: p) (elems2 ++ rest_elems)), (Abs (a :: p) (elems2 ++ cons_elems)), (Abs (a :: p) (rest_elems ++ elems2)), (Abs (a :: p) (rest_elems ++ rest_elems))
(Abs (a :: p) (rest_elems ++ cons_elems)), (Abs (a :: p) (cons_elems ++ elems2)), (Abs (a :: p) (cons_elems ++ rest_elems)), (Abs (a :: p) (cons_elems ++ cons_elems)), (Abs (a :: p) []), (Abs (merge p p) elems2), (Abs (merge p p) rest_elems), (Abs (merge p p) cons_elems), (Abs (merge p p) (elems2 ++ elems2)), (Abs (merge p p) (elems2 ++ rest_elems))
(Abs (merge p p) (elems2 ++ cons_elems)), (Abs (merge p p) (rest_elems ++ elems2)), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) (rest_elems ++ cons_elems)), (Abs (merge p p) (cons_elems ++ elems2)), (Abs (merge p p) (cons_elems ++ rest_elems)), (Abs (merge p p) (cons_elems ++ cons_elems)), (Abs (merge p p) []), (Abs (heap_delete_max a) elems2), (Abs (heap_delete_max a) rest_elems)
(Abs (heap_delete_max a) cons_elems), (Abs (heap_delete_max a) (elems2 ++ elems2)), (Abs (heap_delete_max a) (elems2 ++ rest_elems)), (Abs (heap_delete_max a) (elems2 ++ cons_elems)), (Abs (heap_delete_max a) (rest_elems ++ elems2)), (Abs (heap_delete_max a) (rest_elems ++ rest_elems)), (Abs (heap_delete_max a) (rest_elems ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ elems2)), (Abs (heap_delete_max a) (cons_elems ++ rest_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems))
(Abs (heap_delete_max a) []), (Abs (join p p a) elems2), (Abs (join p p a) rest_elems), (Abs (join p p a) cons_elems), (Abs (join p p a) (elems2 ++ elems2)), (Abs (join p p a) (elems2 ++ rest_elems)), (Abs (join p p a) (elems2 ++ cons_elems)), (Abs (join p p a) (rest_elems ++ elems2)), (Abs (join p p a) (rest_elems ++ rest_elems)), (Abs (join p p a) (rest_elems ++ cons_elems))
(Abs (join p p a) (cons_elems ++ elems2)), (Abs (join p p a) (cons_elems ++ rest_elems)), (Abs (join p p a) (cons_elems ++ cons_elems)), (Abs (join p p a) []), (Abs (carry p a) elems2), (Abs (carry p a) rest_elems), (Abs (carry p a) cons_elems), (Abs (carry p a) (elems2 ++ elems2)), (Abs (carry p a) (elems2 ++ rest_elems)), (Abs (carry p a) (elems2 ++ cons_elems))
(Abs (carry p a) (rest_elems ++ elems2)), (Abs (carry p a) (rest_elems ++ rest_elems)), (Abs (carry p a) (rest_elems ++ cons_elems)), (Abs (carry p a) (cons_elems ++ elems2)), (Abs (carry p a) (cons_elems ++ rest_elems)), (Abs (carry p a) (cons_elems ++ cons_elems)), (Abs (carry p a) []), (Abs (p ++ p) elems2), (Abs (p ++ p) rest_elems), (Abs (p ++ p) cons_elems)
(Abs (p ++ p) (elems2 ++ elems2)), (Abs (p ++ p) (elems2 ++ rest_elems)), (Abs (p ++ p) (elems2 ++ cons_elems)), (Abs (p ++ p) (rest_elems ++ elems2)), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ cons_elems)), (Abs (p ++ p) (cons_elems ++ elems2)), (Abs (p ++ p) (cons_elems ++ rest_elems)), (Abs (p ++ p) (cons_elems ++ cons_elems)), (Abs (p ++ p) [])
(Abs [] elems2), (Abs [] rest_elems), (Abs [] cons_elems), (Abs [] (elems2 ++ elems2)), (Abs [] (elems2 ++ rest_elems)), (Abs [] (elems2 ++ cons_elems)), (Abs [] (rest_elems ++ elems2)), (Abs [] (rest_elems ++ rest_elems)), (Abs [] (rest_elems ++ cons_elems)), (Abs [] (cons_elems ++ elems2))
(Abs [] (cons_elems ++ rest_elems)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] []), (priqueue_elems p (elems2 ++ elems2)), (priqueue_elems p (elems2 ++ rest_elems)), (priqueue_elems p (elems2 ++ cons_elems)), (priqueue_elems p (rest_elems ++ elems2)), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p (rest_elems ++ cons_elems)), (priqueue_elems p (cons_elems ++ elems2))
(priqueue_elems p (cons_elems ++ rest_elems)), (priqueue_elems p (cons_elems ++ cons_elems)), (priqueue_elems p []), (priqueue_elems (a :: p) elems2), (priqueue_elems (a :: p) rest_elems), (priqueue_elems (a :: p) cons_elems), (priqueue_elems (a :: p) (elems2 ++ elems2)), (priqueue_elems (a :: p) (elems2 ++ rest_elems)), (priqueue_elems (a :: p) (elems2 ++ cons_elems)), (priqueue_elems (a :: p) (rest_elems ++ elems2))
(priqueue_elems (a :: p) (rest_elems ++ rest_elems)), (priqueue_elems (a :: p) (rest_elems ++ cons_elems)), (priqueue_elems (a :: p) (cons_elems ++ elems2)), (priqueue_elems (a :: p) (cons_elems ++ rest_elems)), (priqueue_elems (a :: p) (cons_elems ++ cons_elems)), (priqueue_elems (a :: p) []), (priqueue_elems (merge p p) elems2), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) cons_elems), (priqueue_elems (merge p p) (elems2 ++ elems2))
(priqueue_elems (merge p p) (elems2 ++ rest_elems)), (priqueue_elems (merge p p) (elems2 ++ cons_elems)), (priqueue_elems (merge p p) (rest_elems ++ elems2)), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) (rest_elems ++ cons_elems)), (priqueue_elems (merge p p) (cons_elems ++ elems2)), (priqueue_elems (merge p p) (cons_elems ++ rest_elems)), (priqueue_elems (merge p p) (cons_elems ++ cons_elems)), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a) elems2)
(priqueue_elems (heap_delete_max a) rest_elems), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) (elems2 ++ elems2)), (priqueue_elems (heap_delete_max a) (elems2 ++ rest_elems)), (priqueue_elems (heap_delete_max a) (elems2 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (rest_elems ++ rest_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (cons_elems ++ rest_elems))
(priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems (join p p a) elems2), (priqueue_elems (join p p a) rest_elems), (priqueue_elems (join p p a) cons_elems), (priqueue_elems (join p p a) (elems2 ++ elems2)), (priqueue_elems (join p p a) (elems2 ++ rest_elems)), (priqueue_elems (join p p a) (elems2 ++ cons_elems)), (priqueue_elems (join p p a) (rest_elems ++ elems2)), (priqueue_elems (join p p a) (rest_elems ++ rest_elems))
(priqueue_elems (join p p a) (rest_elems ++ cons_elems)), (priqueue_elems (join p p a) (cons_elems ++ elems2)), (priqueue_elems (join p p a) (cons_elems ++ rest_elems)), (priqueue_elems (join p p a) (cons_elems ++ cons_elems)), (priqueue_elems (join p p a) []), (priqueue_elems (carry p a) elems2), (priqueue_elems (carry p a) rest_elems), (priqueue_elems (carry p a) cons_elems), (priqueue_elems (carry p a) (elems2 ++ elems2)), (priqueue_elems (carry p a) (elems2 ++ rest_elems))
(priqueue_elems (carry p a) (elems2 ++ cons_elems)), (priqueue_elems (carry p a) (rest_elems ++ elems2)), (priqueue_elems (carry p a) (rest_elems ++ rest_elems)), (priqueue_elems (carry p a) (rest_elems ++ cons_elems)), (priqueue_elems (carry p a) (cons_elems ++ elems2)), (priqueue_elems (carry p a) (cons_elems ++ rest_elems)), (priqueue_elems (carry p a) (cons_elems ++ cons_elems)), (priqueue_elems (carry p a) []), (priqueue_elems (p ++ p) elems2), (priqueue_elems (p ++ p) rest_elems)
(priqueue_elems (p ++ p) cons_elems), (priqueue_elems (p ++ p) (elems2 ++ elems2)), (priqueue_elems (p ++ p) (elems2 ++ rest_elems)), (priqueue_elems (p ++ p) (elems2 ++ cons_elems)), (priqueue_elems (p ++ p) (rest_elems ++ elems2)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ cons_elems)), (priqueue_elems (p ++ p) (cons_elems ++ elems2)), (priqueue_elems (p ++ p) (cons_elems ++ rest_elems)), (priqueue_elems (p ++ p) (cons_elems ++ cons_elems))
(priqueue_elems (p ++ p) []), (priqueue_elems [] elems2), (priqueue_elems [] rest_elems), (priqueue_elems [] cons_elems), (priqueue_elems [] (elems2 ++ elems2)), (priqueue_elems [] (elems2 ++ rest_elems)), (priqueue_elems [] (elems2 ++ cons_elems)), (priqueue_elems [] (rest_elems ++ elems2)), (priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] (rest_elems ++ cons_elems))
(priqueue_elems [] (cons_elems ++ elems2)), (priqueue_elems [] (cons_elems ++ rest_elems)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] []), (tree_elems a (elems2 ++ elems2)), (tree_elems a (elems2 ++ rest_elems)), (tree_elems a (elems2 ++ cons_elems)), (tree_elems a (rest_elems ++ elems2)), (tree_elems a (rest_elems ++ rest_elems)), (tree_elems a (rest_elems ++ cons_elems))
(tree_elems a (cons_elems ++ elems2)), (tree_elems a (cons_elems ++ rest_elems)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a []), (tree_elems (smash a a) elems2), (tree_elems (smash a a) rest_elems), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) (elems2 ++ elems2)), (tree_elems (smash a a) (elems2 ++ rest_elems)), (tree_elems (smash a a) (elems2 ++ cons_elems))
(tree_elems (smash a a) (rest_elems ++ elems2)), (tree_elems (smash a a) (rest_elems ++ rest_elems)), (tree_elems (smash a a) (rest_elems ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ elems2)), (tree_elems (smash a a) (cons_elems ++ rest_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems)), (tree_elems (smash a a) []), (tree_elems Leaf elems2), (tree_elems Leaf rest_elems), (tree_elems Leaf cons_elems)
(tree_elems Leaf (elems2 ++ elems2)), (tree_elems Leaf (elems2 ++ rest_elems)), (tree_elems Leaf (elems2 ++ cons_elems)), (tree_elems Leaf (rest_elems ++ elems2)), (tree_elems Leaf (rest_elems ++ rest_elems)), (tree_elems Leaf (rest_elems ++ cons_elems)), (tree_elems Leaf (cons_elems ++ elems2)), (tree_elems Leaf (cons_elems ++ rest_elems)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf [])
(priq (a :: p)), (priq (merge p p)), (priq (heap_delete_max a)), (priq (join p p a)), (priq (carry p a)), (priq (p ++ p)), (priqq (length elems2) p), (priqq (length elems2) (a :: p)), (priqq (length elems2) (merge p p)), (priqq (length elems2) (heap_delete_max a))
(priqq (length elems2) (join p p a)), (priqq (length elems2) (carry p a)), (priqq (length elems2) (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (a :: p)), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (heap_delete_max a)), (priqq (length rest_elems) (join p p a)), (priqq (length rest_elems) (carry p a)), (priqq (length rest_elems) (p ++ p))
(priqq (length cons_elems) p), (priqq (length cons_elems) (a :: p)), (priqq (length cons_elems) (merge p p)), (priqq (length cons_elems) (heap_delete_max a)), (priqq (length cons_elems) (join p p a)), (priqq (length cons_elems) (carry p a)), (priqq (length cons_elems) (p ++ p)), (priqq (length p) p), (priqq (length p) (a :: p)), (priqq (length p) (merge p p))
(priqq (length p) (heap_delete_max a)), (priqq (length p) (join p p a)), (priqq (length p) (carry p a)), (priqq (length p) (p ++ p)), (pow2heap (length elems2) a), (pow2heap (length elems2) (smash a a)), (pow2heap (length rest_elems) a), (pow2heap (length rest_elems) (smash a a)), (pow2heap (length cons_elems) a), (pow2heap (length cons_elems) (smash a a))
(pow2heap (length p) a), (pow2heap (length p) (smash a a)), (pow2heapp (length elems2) (length elems2) a), (pow2heapp (length elems2) (length elems2) (smash a a)), (pow2heapp (length elems2) (length elems2) Leaf), (pow2heapp (length elems2) (length rest_elems) a), (pow2heapp (length elems2) (length rest_elems) (smash a a)), (pow2heapp (length elems2) (length rest_elems) Leaf), (pow2heapp (length elems2) (length cons_elems) a), (pow2heapp (length elems2) (length cons_elems) (smash a a))
(pow2heapp (length elems2) (length cons_elems) Leaf), (pow2heapp (length elems2) (length p) a), (pow2heapp (length elems2) (length p) (smash a a)), (pow2heapp (length elems2) (length p) Leaf), (pow2heapp (length rest_elems) (length elems2) a), (pow2heapp (length rest_elems) (length elems2) (smash a a)), (pow2heapp (length rest_elems) (length elems2) Leaf), (pow2heapp (length rest_elems) (length rest_elems) a), (pow2heapp (length rest_elems) (length rest_elems) (smash a a)), (pow2heapp (length rest_elems) (length rest_elems) Leaf)
(pow2heapp (length rest_elems) (length cons_elems) a), (pow2heapp (length rest_elems) (length cons_elems) (smash a a)), (pow2heapp (length rest_elems) (length cons_elems) Leaf), (pow2heapp (length rest_elems) (length p) a), (pow2heapp (length rest_elems) (length p) (smash a a)), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length cons_elems) (length elems2) a), (pow2heapp (length cons_elems) (length elems2) (smash a a)), (pow2heapp (length cons_elems) (length elems2) Leaf), (pow2heapp (length cons_elems) (length rest_elems) a)
(pow2heapp (length cons_elems) (length rest_elems) (smash a a)), (pow2heapp (length cons_elems) (length rest_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length p) a), (pow2heapp (length cons_elems) (length p) (smash a a)), (pow2heapp (length cons_elems) (length p) Leaf), (pow2heapp (length p) (length elems2) a), (pow2heapp (length p) (length elems2) (smash a a))
(pow2heapp (length p) (length elems2) Leaf), (pow2heapp (length p) (length rest_elems) a), (pow2heapp (length p) (length rest_elems) (smash a a)), (pow2heapp (length p) (length rest_elems) Leaf), (pow2heapp (length p) (length cons_elems) a), (pow2heapp (length p) (length cons_elems) (smash a a)), (pow2heapp (length p) (length cons_elems) Leaf), (pow2heapp (length p) (length p) a), (pow2heapp (length p) (length p) (smash a a)), (pow2heapp (length p) (length p) Leaf)
(Permutation p (a :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a)), (Permutation p (join p p a)), (Permutation p (carry p a)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a :: p) p), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (heap_delete_max a))
(Permutation (a :: p) (join p p a)), (Permutation (a :: p) (carry p a)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (heap_delete_max a)), (Permutation (merge p p) (join p p a)), (Permutation (merge p p) (carry p a)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (heap_delete_max a) p), (Permutation (heap_delete_max a) (a :: p)), (Permutation (heap_delete_max a) (merge p p)), (Permutation (heap_delete_max a) (join p p a)), (Permutation (heap_delete_max a) (carry p a)), (Permutation (heap_delete_max a) (p ++ p)), (Permutation (heap_delete_max a) []), (Permutation (join p p a) p), (Permutation (join p p a) (a :: p))
(Permutation (join p p a) (merge p p)), (Permutation (join p p a) (heap_delete_max a)), (Permutation (join p p a) (carry p a)), (Permutation (join p p a) (p ++ p)), (Permutation (join p p a) []), (Permutation (carry p a) p), (Permutation (carry p a) (a :: p)), (Permutation (carry p a) (merge p p)), (Permutation (carry p a) (heap_delete_max a)), (Permutation (carry p a) (join p p a))
(Permutation (carry p a) (p ++ p)), (Permutation (carry p a) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a)), (Permutation (p ++ p) (join p p a)), (Permutation (p ++ p) (carry p a)), (Permutation (p ++ p) []), (Permutation [] p)
(Permutation [] (a :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a)), (Permutation [] (join p p a)), (Permutation [] (carry p a)), (Permutation [] (p ++ p)), (Permutation elems2 (elems2 ++ elems2)), (Permutation elems2 (elems2 ++ rest_elems)), (Permutation elems2 (elems2 ++ cons_elems)), (Permutation elems2 (rest_elems ++ elems2))
(Permutation elems2 (rest_elems ++ rest_elems)), (Permutation elems2 (rest_elems ++ cons_elems)), (Permutation elems2 (cons_elems ++ elems2)), (Permutation elems2 (cons_elems ++ rest_elems)), (Permutation elems2 (cons_elems ++ cons_elems)), (Permutation elems2 []), (Permutation rest_elems (elems2 ++ elems2)), (Permutation rest_elems (elems2 ++ rest_elems)), (Permutation rest_elems (elems2 ++ cons_elems)), (Permutation rest_elems (rest_elems ++ elems2))
(Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems (rest_elems ++ cons_elems)), (Permutation rest_elems (cons_elems ++ elems2)), (Permutation rest_elems (cons_elems ++ rest_elems)), (Permutation rest_elems (cons_elems ++ cons_elems)), (Permutation rest_elems []), (Permutation cons_elems (elems2 ++ elems2)), (Permutation cons_elems (elems2 ++ rest_elems)), (Permutation cons_elems (elems2 ++ cons_elems)), (Permutation cons_elems (rest_elems ++ elems2))
(Permutation cons_elems (rest_elems ++ rest_elems)), (Permutation cons_elems (rest_elems ++ cons_elems)), (Permutation cons_elems (cons_elems ++ elems2)), (Permutation cons_elems (cons_elems ++ rest_elems)), (Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems []), (Permutation (elems2 ++ elems2) elems2), (Permutation (elems2 ++ elems2) rest_elems), (Permutation (elems2 ++ elems2) cons_elems), (Permutation (elems2 ++ elems2) (elems2 ++ rest_elems))
(Permutation (elems2 ++ elems2) (elems2 ++ cons_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ elems2)), (Permutation (elems2 ++ elems2) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ elems2)), (Permutation (elems2 ++ elems2) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) []), (Permutation (elems2 ++ rest_elems) elems2), (Permutation (elems2 ++ rest_elems) rest_elems)
(Permutation (elems2 ++ rest_elems) cons_elems), (Permutation (elems2 ++ rest_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) [])
(Permutation (elems2 ++ cons_elems) elems2), (Permutation (elems2 ++ cons_elems) rest_elems), (Permutation (elems2 ++ cons_elems) cons_elems), (Permutation (elems2 ++ cons_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ rest_elems))
(Permutation (elems2 ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) []), (Permutation (rest_elems ++ elems2) elems2), (Permutation (rest_elems ++ elems2) rest_elems), (Permutation (rest_elems ++ elems2) cons_elems), (Permutation (rest_elems ++ elems2) (elems2 ++ elems2)), (Permutation (rest_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ cons_elems))
(Permutation (rest_elems ++ elems2) (cons_elems ++ elems2)), (Permutation (rest_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ elems2) []), (Permutation (rest_elems ++ rest_elems) elems2), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) cons_elems), (Permutation (rest_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ cons_elems))
(Permutation (rest_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) []), (Permutation (rest_elems ++ cons_elems) elems2), (Permutation (rest_elems ++ cons_elems) rest_elems), (Permutation (rest_elems ++ cons_elems) cons_elems), (Permutation (rest_elems ++ cons_elems) (elems2 ++ elems2))
(Permutation (rest_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) []), (Permutation (cons_elems ++ elems2) elems2), (Permutation (cons_elems ++ elems2) rest_elems)
(Permutation (cons_elems ++ elems2) cons_elems), (Permutation (cons_elems ++ elems2) (elems2 ++ elems2)), (Permutation (cons_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ elems2)), (Permutation (cons_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) [])
(Permutation (cons_elems ++ rest_elems) elems2), (Permutation (cons_elems ++ rest_elems) rest_elems), (Permutation (cons_elems ++ rest_elems) cons_elems), (Permutation (cons_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ elems2))
(Permutation (cons_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) []), (Permutation (cons_elems ++ cons_elems) elems2), (Permutation (cons_elems ++ cons_elems) rest_elems), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ rest_elems))
(Permutation (cons_elems ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) []), (Permutation [] elems2), (Permutation [] rest_elems), (Permutation [] cons_elems), (Permutation [] (elems2 ++ elems2)), (Permutation [] (elems2 ++ rest_elems)), (Permutation [] (elems2 ++ cons_elems))
(Permutation [] (rest_elems ++ elems2)), (Permutation [] (rest_elems ++ rest_elems)), (Permutation [] (rest_elems ++ cons_elems)), (Permutation [] (cons_elems ++ elems2)), (Permutation [] (cons_elems ++ rest_elems)), (Permutation [] (cons_elems ++ cons_elems)), (In a (a :: p)), (In a (merge p p)), (In a (heap_delete_max a)), (In a (join p p a))
(In a (carry p a)), (In a (p ++ p)), (In (smash a a) p), (In (smash a a) (a :: p)), (In (smash a a) (merge p p)), (In (smash a a) (heap_delete_max a)), (In (smash a a) (join p p a)), (In (smash a a) (carry p a)), (In (smash a a) (p ++ p)), (In Leaf p)
(In Leaf (a :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a)), (In Leaf (join p p a)), (In Leaf (carry p a)), (In Leaf (p ++ p)), (In (length elems2) elems2), (In (length elems2) rest_elems), (In (length elems2) cons_elems), (In (length elems2) (elems2 ++ elems2))
(In (length elems2) (elems2 ++ rest_elems)), (In (length elems2) (elems2 ++ cons_elems)), (In (length elems2) (rest_elems ++ elems2)), (In (length elems2) (rest_elems ++ rest_elems)), (In (length elems2) (rest_elems ++ cons_elems)), (In (length elems2) (cons_elems ++ elems2)), (In (length elems2) (cons_elems ++ rest_elems)), (In (length elems2) (cons_elems ++ cons_elems)), (In (length rest_elems) elems2), (In (length rest_elems) rest_elems)
(In (length rest_elems) cons_elems), (In (length rest_elems) (elems2 ++ elems2)), (In (length rest_elems) (elems2 ++ rest_elems)), (In (length rest_elems) (elems2 ++ cons_elems)), (In (length rest_elems) (rest_elems ++ elems2)), (In (length rest_elems) (rest_elems ++ rest_elems)), (In (length rest_elems) (rest_elems ++ cons_elems)), (In (length rest_elems) (cons_elems ++ elems2)), (In (length rest_elems) (cons_elems ++ rest_elems)), (In (length rest_elems) (cons_elems ++ cons_elems))
(In (length cons_elems) elems2), (In (length cons_elems) rest_elems), (In (length cons_elems) cons_elems), (In (length cons_elems) (elems2 ++ elems2)), (In (length cons_elems) (elems2 ++ rest_elems)), (In (length cons_elems) (elems2 ++ cons_elems)), (In (length cons_elems) (rest_elems ++ elems2)), (In (length cons_elems) (rest_elems ++ rest_elems)), (In (length cons_elems) (rest_elems ++ cons_elems)), (In (length cons_elems) (cons_elems ++ elems2))
(In (length cons_elems) (cons_elems ++ rest_elems)), (In (length cons_elems) (cons_elems ++ cons_elems)), (In (length p) elems2), (In (length p) rest_elems), (In (length p) cons_elems), (In (length p) (elems2 ++ elems2)), (In (length p) (elems2 ++ rest_elems)), (In (length p) (elems2 ++ cons_elems)), (In (length p) (rest_elems ++ elems2)), (In (length p) (rest_elems ++ rest_elems))
(In (length p) (rest_elems ++ cons_elems)), (In (length p) (cons_elems ++ elems2)), (In (length p) (cons_elems ++ rest_elems)), (In (length p) (cons_elems ++ cons_elems)), (length elems2 < length rest_elems), (length elems2 < length cons_elems), (length elems2 < length p), (length rest_elems < length elems2), (length rest_elems < length cons_elems), (length rest_elems < length p)
(length cons_elems < length elems2), (length cons_elems < length rest_elems), (length cons_elems < length p), (length p < length elems2), (length p < length rest_elems), (length p < length cons_elems), (length elems2 <= length rest_elems), (length elems2 <= length cons_elems), (length elems2 <= length p), (length rest_elems <= length elems2)
(length rest_elems <= length cons_elems), (length rest_elems <= length p), (length cons_elems <= length elems2), (length cons_elems <= length rest_elems), (length cons_elems <= length p), (length p <= length elems2), (length p <= length rest_elems), (length p <= length cons_elems), (~ Abs p elems2), (~ Abs p rest_elems)
(~ Abs p cons_elems), (~ priqueue_elems p elems2), (~ priqueue_elems p rest_elems), (~ priqueue_elems p cons_elems), (~ tree_elems a elems2), (~ tree_elems a rest_elems), (~ tree_elems a cons_elems), (~ priq p), (~ Permutation elems2 elems2), (~ Permutation elems2 rest_elems)
(~ Permutation elems2 cons_elems), (~ Permutation rest_elems elems2), (~ Permutation rest_elems rest_elems), (~ Permutation rest_elems cons_elems), (~ Permutation cons_elems elems2), (~ Permutation cons_elems rest_elems), (~ Permutation cons_elems cons_elems), (~ Permutation p p), (~ In a p), (p <> p)
(a <> a), (elems2 <> elems2), (elems2 <> rest_elems), (elems2 <> cons_elems), (rest_elems <> elems2), (rest_elems <> rest_elems), (rest_elems <> cons_elems), (cons_elems <> elems2), (cons_elems <> rest_elems), (cons_elems <> cons_elems)
(None = Some elems2), (None = Some rest_elems), (None = Some cons_elems), (None = Some p), (a :: p = p), (a :: p = merge p p), (a :: p = heap_delete_max a), (a :: p = join p p a), (a :: p = carry p a), (a :: p = p ++ p)
(a :: p = []), (merge p p = p), (merge p p = heap_delete_max a), (merge p p = join p p a), (merge p p = carry p a), (merge p p = p ++ p), (heap_delete_max a = p), (heap_delete_max a = carry p a), (heap_delete_max a = p ++ p), (join p p a = p)
(join p p a = heap_delete_max a), (join p p a = carry p a), (join p p a = p ++ p), (carry p a = p), (carry p a = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a), ([] = join p p a)
([] = carry p a), ([] = p ++ p), (smash a a = a), (Leaf = smash a a), (elems2 ++ elems2 = elems2), (elems2 ++ elems2 = rest_elems), (elems2 ++ elems2 = cons_elems), (elems2 ++ rest_elems = elems2), (elems2 ++ rest_elems = rest_elems), (elems2 ++ rest_elems = cons_elems)
(elems2 ++ cons_elems = elems2), (elems2 ++ cons_elems = rest_elems), (elems2 ++ cons_elems = cons_elems), (rest_elems ++ elems2 = elems2), (rest_elems ++ elems2 = rest_elems), (rest_elems ++ elems2 = cons_elems), (rest_elems ++ rest_elems = elems2), (rest_elems ++ rest_elems = rest_elems), (rest_elems ++ rest_elems = cons_elems), (rest_elems ++ cons_elems = elems2)
(rest_elems ++ cons_elems = rest_elems), (rest_elems ++ cons_elems = cons_elems), (cons_elems ++ elems2 = elems2), (cons_elems ++ elems2 = rest_elems), (cons_elems ++ elems2 = cons_elems), (cons_elems ++ rest_elems = elems2), (cons_elems ++ rest_elems = rest_elems), (cons_elems ++ rest_elems = cons_elems), (cons_elems ++ cons_elems = elems2), (cons_elems ++ cons_elems = rest_elems)
(cons_elems ++ cons_elems = cons_elems), ([] = elems2), ([] = rest_elems), ([] = cons_elems), ([] = elems2 ++ elems2), ([] = elems2 ++ rest_elems), ([] = elems2 ++ cons_elems), ([] = rest_elems ++ elems2), ([] = rest_elems ++ rest_elems), ([] = rest_elems ++ cons_elems)
([] = cons_elems ++ elems2), ([] = cons_elems ++ rest_elems), ([] = cons_elems ++ cons_elems), (None = find_max p), (None = Some a)

Label: 1 (1)
(Abs p elems2), (Abs p rest_elems), (Abs p cons_elems), (priqueue_elems p elems2), (priqueue_elems p rest_elems), (priqueue_elems p cons_elems), (tree_elems a elems2), (tree_elems a rest_elems), (tree_elems a cons_elems), (priq p)
(Permutation elems2 elems2), (Permutation elems2 rest_elems), (Permutation elems2 cons_elems), (Permutation rest_elems elems2), (Permutation rest_elems rest_elems), (Permutation rest_elems cons_elems), (Permutation cons_elems elems2), (Permutation cons_elems rest_elems), (Permutation cons_elems cons_elems), (Permutation p p)
(In a p), (p = p), (a = a), (elems2 = elems2), (elems2 = rest_elems), (elems2 = cons_elems), (rest_elems = elems2), (rest_elems = rest_elems), (rest_elems = cons_elems), (cons_elems = elems2)
(cons_elems = rest_elems), (cons_elems = cons_elems), (Abs p (elems2 ++ elems2)), (Abs p (elems2 ++ rest_elems)), (Abs p (elems2 ++ cons_elems)), (Abs p (rest_elems ++ elems2)), (Abs p (rest_elems ++ rest_elems)), (Abs p (rest_elems ++ cons_elems)), (Abs p (cons_elems ++ elems2)), (Abs p (cons_elems ++ rest_elems))
(Abs p (cons_elems ++ cons_elems)), (Abs p []), (Abs (a :: p) elems2), (Abs (a :: p) rest_elems), (Abs (a :: p) cons_elems), (Abs (a :: p) (elems2 ++ elems2)), (Abs (a :: p) (elems2 ++ rest_elems)), (Abs (a :: p) (elems2 ++ cons_elems)), (Abs (a :: p) (rest_elems ++ elems2)), (Abs (a :: p) (rest_elems ++ rest_elems))
(Abs (a :: p) (rest_elems ++ cons_elems)), (Abs (a :: p) (cons_elems ++ elems2)), (Abs (a :: p) (cons_elems ++ rest_elems)), (Abs (a :: p) (cons_elems ++ cons_elems)), (Abs (a :: p) []), (Abs (merge p p) elems2), (Abs (merge p p) rest_elems), (Abs (merge p p) cons_elems), (Abs (merge p p) (elems2 ++ elems2)), (Abs (merge p p) (elems2 ++ rest_elems))
(Abs (merge p p) (elems2 ++ cons_elems)), (Abs (merge p p) (rest_elems ++ elems2)), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) (rest_elems ++ cons_elems)), (Abs (merge p p) (cons_elems ++ elems2)), (Abs (merge p p) (cons_elems ++ rest_elems)), (Abs (merge p p) (cons_elems ++ cons_elems)), (Abs (merge p p) []), (Abs (heap_delete_max a) elems2), (Abs (heap_delete_max a) rest_elems)
(Abs (heap_delete_max a) cons_elems), (Abs (heap_delete_max a) (elems2 ++ elems2)), (Abs (heap_delete_max a) (elems2 ++ rest_elems)), (Abs (heap_delete_max a) (elems2 ++ cons_elems)), (Abs (heap_delete_max a) (rest_elems ++ elems2)), (Abs (heap_delete_max a) (rest_elems ++ rest_elems)), (Abs (heap_delete_max a) (rest_elems ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ elems2)), (Abs (heap_delete_max a) (cons_elems ++ rest_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems))
(Abs (heap_delete_max a) []), (Abs (join p p a) elems2), (Abs (join p p a) rest_elems), (Abs (join p p a) cons_elems), (Abs (join p p a) (elems2 ++ elems2)), (Abs (join p p a) (elems2 ++ rest_elems)), (Abs (join p p a) (elems2 ++ cons_elems)), (Abs (join p p a) (rest_elems ++ elems2)), (Abs (join p p a) (rest_elems ++ rest_elems)), (Abs (join p p a) (rest_elems ++ cons_elems))
(Abs (join p p a) (cons_elems ++ elems2)), (Abs (join p p a) (cons_elems ++ rest_elems)), (Abs (join p p a) (cons_elems ++ cons_elems)), (Abs (join p p a) []), (Abs (carry p a) elems2), (Abs (carry p a) rest_elems), (Abs (carry p a) cons_elems), (Abs (carry p a) (elems2 ++ elems2)), (Abs (carry p a) (elems2 ++ rest_elems)), (Abs (carry p a) (elems2 ++ cons_elems))
(Abs (carry p a) (rest_elems ++ elems2)), (Abs (carry p a) (rest_elems ++ rest_elems)), (Abs (carry p a) (rest_elems ++ cons_elems)), (Abs (carry p a) (cons_elems ++ elems2)), (Abs (carry p a) (cons_elems ++ rest_elems)), (Abs (carry p a) (cons_elems ++ cons_elems)), (Abs (carry p a) []), (Abs (p ++ p) elems2), (Abs (p ++ p) rest_elems), (Abs (p ++ p) cons_elems)
(Abs (p ++ p) (elems2 ++ elems2)), (Abs (p ++ p) (elems2 ++ rest_elems)), (Abs (p ++ p) (elems2 ++ cons_elems)), (Abs (p ++ p) (rest_elems ++ elems2)), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ cons_elems)), (Abs (p ++ p) (cons_elems ++ elems2)), (Abs (p ++ p) (cons_elems ++ rest_elems)), (Abs (p ++ p) (cons_elems ++ cons_elems)), (Abs (p ++ p) [])
(Abs [] elems2), (Abs [] rest_elems), (Abs [] cons_elems), (Abs [] (elems2 ++ elems2)), (Abs [] (elems2 ++ rest_elems)), (Abs [] (elems2 ++ cons_elems)), (Abs [] (rest_elems ++ elems2)), (Abs [] (rest_elems ++ rest_elems)), (Abs [] (rest_elems ++ cons_elems)), (Abs [] (cons_elems ++ elems2))
(Abs [] (cons_elems ++ rest_elems)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] []), (priqueue_elems p (elems2 ++ elems2)), (priqueue_elems p (elems2 ++ rest_elems)), (priqueue_elems p (elems2 ++ cons_elems)), (priqueue_elems p (rest_elems ++ elems2)), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p (rest_elems ++ cons_elems)), (priqueue_elems p (cons_elems ++ elems2))
(priqueue_elems p (cons_elems ++ rest_elems)), (priqueue_elems p (cons_elems ++ cons_elems)), (priqueue_elems p []), (priqueue_elems (a :: p) elems2), (priqueue_elems (a :: p) rest_elems), (priqueue_elems (a :: p) cons_elems), (priqueue_elems (a :: p) (elems2 ++ elems2)), (priqueue_elems (a :: p) (elems2 ++ rest_elems)), (priqueue_elems (a :: p) (elems2 ++ cons_elems)), (priqueue_elems (a :: p) (rest_elems ++ elems2))
(priqueue_elems (a :: p) (rest_elems ++ rest_elems)), (priqueue_elems (a :: p) (rest_elems ++ cons_elems)), (priqueue_elems (a :: p) (cons_elems ++ elems2)), (priqueue_elems (a :: p) (cons_elems ++ rest_elems)), (priqueue_elems (a :: p) (cons_elems ++ cons_elems)), (priqueue_elems (a :: p) []), (priqueue_elems (merge p p) elems2), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) cons_elems), (priqueue_elems (merge p p) (elems2 ++ elems2))
(priqueue_elems (merge p p) (elems2 ++ rest_elems)), (priqueue_elems (merge p p) (elems2 ++ cons_elems)), (priqueue_elems (merge p p) (rest_elems ++ elems2)), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) (rest_elems ++ cons_elems)), (priqueue_elems (merge p p) (cons_elems ++ elems2)), (priqueue_elems (merge p p) (cons_elems ++ rest_elems)), (priqueue_elems (merge p p) (cons_elems ++ cons_elems)), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a) elems2)
(priqueue_elems (heap_delete_max a) rest_elems), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) (elems2 ++ elems2)), (priqueue_elems (heap_delete_max a) (elems2 ++ rest_elems)), (priqueue_elems (heap_delete_max a) (elems2 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (rest_elems ++ rest_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (cons_elems ++ rest_elems))
(priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems (join p p a) elems2), (priqueue_elems (join p p a) rest_elems), (priqueue_elems (join p p a) cons_elems), (priqueue_elems (join p p a) (elems2 ++ elems2)), (priqueue_elems (join p p a) (elems2 ++ rest_elems)), (priqueue_elems (join p p a) (elems2 ++ cons_elems)), (priqueue_elems (join p p a) (rest_elems ++ elems2)), (priqueue_elems (join p p a) (rest_elems ++ rest_elems))
(priqueue_elems (join p p a) (rest_elems ++ cons_elems)), (priqueue_elems (join p p a) (cons_elems ++ elems2)), (priqueue_elems (join p p a) (cons_elems ++ rest_elems)), (priqueue_elems (join p p a) (cons_elems ++ cons_elems)), (priqueue_elems (join p p a) []), (priqueue_elems (carry p a) elems2), (priqueue_elems (carry p a) rest_elems), (priqueue_elems (carry p a) cons_elems), (priqueue_elems (carry p a) (elems2 ++ elems2)), (priqueue_elems (carry p a) (elems2 ++ rest_elems))
(priqueue_elems (carry p a) (elems2 ++ cons_elems)), (priqueue_elems (carry p a) (rest_elems ++ elems2)), (priqueue_elems (carry p a) (rest_elems ++ rest_elems)), (priqueue_elems (carry p a) (rest_elems ++ cons_elems)), (priqueue_elems (carry p a) (cons_elems ++ elems2)), (priqueue_elems (carry p a) (cons_elems ++ rest_elems)), (priqueue_elems (carry p a) (cons_elems ++ cons_elems)), (priqueue_elems (carry p a) []), (priqueue_elems (p ++ p) elems2), (priqueue_elems (p ++ p) rest_elems)
(priqueue_elems (p ++ p) cons_elems), (priqueue_elems (p ++ p) (elems2 ++ elems2)), (priqueue_elems (p ++ p) (elems2 ++ rest_elems)), (priqueue_elems (p ++ p) (elems2 ++ cons_elems)), (priqueue_elems (p ++ p) (rest_elems ++ elems2)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ cons_elems)), (priqueue_elems (p ++ p) (cons_elems ++ elems2)), (priqueue_elems (p ++ p) (cons_elems ++ rest_elems)), (priqueue_elems (p ++ p) (cons_elems ++ cons_elems))
(priqueue_elems (p ++ p) []), (priqueue_elems [] elems2), (priqueue_elems [] rest_elems), (priqueue_elems [] cons_elems), (priqueue_elems [] (elems2 ++ elems2)), (priqueue_elems [] (elems2 ++ rest_elems)), (priqueue_elems [] (elems2 ++ cons_elems)), (priqueue_elems [] (rest_elems ++ elems2)), (priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] (rest_elems ++ cons_elems))
(priqueue_elems [] (cons_elems ++ elems2)), (priqueue_elems [] (cons_elems ++ rest_elems)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] []), (tree_elems a (elems2 ++ elems2)), (tree_elems a (elems2 ++ rest_elems)), (tree_elems a (elems2 ++ cons_elems)), (tree_elems a (rest_elems ++ elems2)), (tree_elems a (rest_elems ++ rest_elems)), (tree_elems a (rest_elems ++ cons_elems))
(tree_elems a (cons_elems ++ elems2)), (tree_elems a (cons_elems ++ rest_elems)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a []), (tree_elems (smash a a) elems2), (tree_elems (smash a a) rest_elems), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) (elems2 ++ elems2)), (tree_elems (smash a a) (elems2 ++ rest_elems)), (tree_elems (smash a a) (elems2 ++ cons_elems))
(tree_elems (smash a a) (rest_elems ++ elems2)), (tree_elems (smash a a) (rest_elems ++ rest_elems)), (tree_elems (smash a a) (rest_elems ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ elems2)), (tree_elems (smash a a) (cons_elems ++ rest_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems)), (tree_elems (smash a a) []), (tree_elems Leaf elems2), (tree_elems Leaf rest_elems), (tree_elems Leaf cons_elems)
(tree_elems Leaf (elems2 ++ elems2)), (tree_elems Leaf (elems2 ++ rest_elems)), (tree_elems Leaf (elems2 ++ cons_elems)), (tree_elems Leaf (rest_elems ++ elems2)), (tree_elems Leaf (rest_elems ++ rest_elems)), (tree_elems Leaf (rest_elems ++ cons_elems)), (tree_elems Leaf (cons_elems ++ elems2)), (tree_elems Leaf (cons_elems ++ rest_elems)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf [])
(priq (a :: p)), (priq (merge p p)), (priq (heap_delete_max a)), (priq (join p p a)), (priq (carry p a)), (priq (p ++ p)), (priqq (length elems2) p), (priqq (length elems2) (a :: p)), (priqq (length elems2) (merge p p)), (priqq (length elems2) (heap_delete_max a))
(priqq (length elems2) (join p p a)), (priqq (length elems2) (carry p a)), (priqq (length elems2) (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (a :: p)), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (heap_delete_max a)), (priqq (length rest_elems) (join p p a)), (priqq (length rest_elems) (carry p a)), (priqq (length rest_elems) (p ++ p))
(priqq (length cons_elems) p), (priqq (length cons_elems) (a :: p)), (priqq (length cons_elems) (merge p p)), (priqq (length cons_elems) (heap_delete_max a)), (priqq (length cons_elems) (join p p a)), (priqq (length cons_elems) (carry p a)), (priqq (length cons_elems) (p ++ p)), (priqq (length p) p), (priqq (length p) (a :: p)), (priqq (length p) (merge p p))
(priqq (length p) (heap_delete_max a)), (priqq (length p) (join p p a)), (priqq (length p) (carry p a)), (priqq (length p) (p ++ p)), (pow2heap (length elems2) a), (pow2heap (length elems2) (smash a a)), (pow2heap (length rest_elems) a), (pow2heap (length rest_elems) (smash a a)), (pow2heap (length cons_elems) a), (pow2heap (length cons_elems) (smash a a))
(pow2heap (length p) a), (pow2heap (length p) (smash a a)), (pow2heapp (length elems2) (length elems2) a), (pow2heapp (length elems2) (length elems2) (smash a a)), (pow2heapp (length elems2) (length elems2) Leaf), (pow2heapp (length elems2) (length rest_elems) a), (pow2heapp (length elems2) (length rest_elems) (smash a a)), (pow2heapp (length elems2) (length rest_elems) Leaf), (pow2heapp (length elems2) (length cons_elems) a), (pow2heapp (length elems2) (length cons_elems) (smash a a))
(pow2heapp (length elems2) (length cons_elems) Leaf), (pow2heapp (length elems2) (length p) a), (pow2heapp (length elems2) (length p) (smash a a)), (pow2heapp (length elems2) (length p) Leaf), (pow2heapp (length rest_elems) (length elems2) a), (pow2heapp (length rest_elems) (length elems2) (smash a a)), (pow2heapp (length rest_elems) (length elems2) Leaf), (pow2heapp (length rest_elems) (length rest_elems) a), (pow2heapp (length rest_elems) (length rest_elems) (smash a a)), (pow2heapp (length rest_elems) (length rest_elems) Leaf)
(pow2heapp (length rest_elems) (length cons_elems) a), (pow2heapp (length rest_elems) (length cons_elems) (smash a a)), (pow2heapp (length rest_elems) (length cons_elems) Leaf), (pow2heapp (length rest_elems) (length p) a), (pow2heapp (length rest_elems) (length p) (smash a a)), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length cons_elems) (length elems2) a), (pow2heapp (length cons_elems) (length elems2) (smash a a)), (pow2heapp (length cons_elems) (length elems2) Leaf), (pow2heapp (length cons_elems) (length rest_elems) a)
(pow2heapp (length cons_elems) (length rest_elems) (smash a a)), (pow2heapp (length cons_elems) (length rest_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length p) a), (pow2heapp (length cons_elems) (length p) (smash a a)), (pow2heapp (length cons_elems) (length p) Leaf), (pow2heapp (length p) (length elems2) a), (pow2heapp (length p) (length elems2) (smash a a))
(pow2heapp (length p) (length elems2) Leaf), (pow2heapp (length p) (length rest_elems) a), (pow2heapp (length p) (length rest_elems) (smash a a)), (pow2heapp (length p) (length rest_elems) Leaf), (pow2heapp (length p) (length cons_elems) a), (pow2heapp (length p) (length cons_elems) (smash a a)), (pow2heapp (length p) (length cons_elems) Leaf), (pow2heapp (length p) (length p) a), (pow2heapp (length p) (length p) (smash a a)), (pow2heapp (length p) (length p) Leaf)
(Permutation p (a :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a)), (Permutation p (join p p a)), (Permutation p (carry p a)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a :: p) p), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (heap_delete_max a))
(Permutation (a :: p) (join p p a)), (Permutation (a :: p) (carry p a)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (heap_delete_max a)), (Permutation (merge p p) (join p p a)), (Permutation (merge p p) (carry p a)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (heap_delete_max a) p), (Permutation (heap_delete_max a) (a :: p)), (Permutation (heap_delete_max a) (merge p p)), (Permutation (heap_delete_max a) (join p p a)), (Permutation (heap_delete_max a) (carry p a)), (Permutation (heap_delete_max a) (p ++ p)), (Permutation (heap_delete_max a) []), (Permutation (join p p a) p), (Permutation (join p p a) (a :: p))
(Permutation (join p p a) (merge p p)), (Permutation (join p p a) (heap_delete_max a)), (Permutation (join p p a) (carry p a)), (Permutation (join p p a) (p ++ p)), (Permutation (join p p a) []), (Permutation (carry p a) p), (Permutation (carry p a) (a :: p)), (Permutation (carry p a) (merge p p)), (Permutation (carry p a) (heap_delete_max a)), (Permutation (carry p a) (join p p a))
(Permutation (carry p a) (p ++ p)), (Permutation (carry p a) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a)), (Permutation (p ++ p) (join p p a)), (Permutation (p ++ p) (carry p a)), (Permutation (p ++ p) []), (Permutation [] p)
(Permutation [] (a :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a)), (Permutation [] (join p p a)), (Permutation [] (carry p a)), (Permutation [] (p ++ p)), (Permutation elems2 (elems2 ++ elems2)), (Permutation elems2 (elems2 ++ rest_elems)), (Permutation elems2 (elems2 ++ cons_elems)), (Permutation elems2 (rest_elems ++ elems2))
(Permutation elems2 (rest_elems ++ rest_elems)), (Permutation elems2 (rest_elems ++ cons_elems)), (Permutation elems2 (cons_elems ++ elems2)), (Permutation elems2 (cons_elems ++ rest_elems)), (Permutation elems2 (cons_elems ++ cons_elems)), (Permutation elems2 []), (Permutation rest_elems (elems2 ++ elems2)), (Permutation rest_elems (elems2 ++ rest_elems)), (Permutation rest_elems (elems2 ++ cons_elems)), (Permutation rest_elems (rest_elems ++ elems2))
(Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems (rest_elems ++ cons_elems)), (Permutation rest_elems (cons_elems ++ elems2)), (Permutation rest_elems (cons_elems ++ rest_elems)), (Permutation rest_elems (cons_elems ++ cons_elems)), (Permutation rest_elems []), (Permutation cons_elems (elems2 ++ elems2)), (Permutation cons_elems (elems2 ++ rest_elems)), (Permutation cons_elems (elems2 ++ cons_elems)), (Permutation cons_elems (rest_elems ++ elems2))
(Permutation cons_elems (rest_elems ++ rest_elems)), (Permutation cons_elems (rest_elems ++ cons_elems)), (Permutation cons_elems (cons_elems ++ elems2)), (Permutation cons_elems (cons_elems ++ rest_elems)), (Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems []), (Permutation (elems2 ++ elems2) elems2), (Permutation (elems2 ++ elems2) rest_elems), (Permutation (elems2 ++ elems2) cons_elems), (Permutation (elems2 ++ elems2) (elems2 ++ rest_elems))
(Permutation (elems2 ++ elems2) (elems2 ++ cons_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ elems2)), (Permutation (elems2 ++ elems2) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ elems2)), (Permutation (elems2 ++ elems2) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) []), (Permutation (elems2 ++ rest_elems) elems2), (Permutation (elems2 ++ rest_elems) rest_elems)
(Permutation (elems2 ++ rest_elems) cons_elems), (Permutation (elems2 ++ rest_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) [])
(Permutation (elems2 ++ cons_elems) elems2), (Permutation (elems2 ++ cons_elems) rest_elems), (Permutation (elems2 ++ cons_elems) cons_elems), (Permutation (elems2 ++ cons_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ rest_elems))
(Permutation (elems2 ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) []), (Permutation (rest_elems ++ elems2) elems2), (Permutation (rest_elems ++ elems2) rest_elems), (Permutation (rest_elems ++ elems2) cons_elems), (Permutation (rest_elems ++ elems2) (elems2 ++ elems2)), (Permutation (rest_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ cons_elems))
(Permutation (rest_elems ++ elems2) (cons_elems ++ elems2)), (Permutation (rest_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ elems2) []), (Permutation (rest_elems ++ rest_elems) elems2), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) cons_elems), (Permutation (rest_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ cons_elems))
(Permutation (rest_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) []), (Permutation (rest_elems ++ cons_elems) elems2), (Permutation (rest_elems ++ cons_elems) rest_elems), (Permutation (rest_elems ++ cons_elems) cons_elems), (Permutation (rest_elems ++ cons_elems) (elems2 ++ elems2))
(Permutation (rest_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) []), (Permutation (cons_elems ++ elems2) elems2), (Permutation (cons_elems ++ elems2) rest_elems)
(Permutation (cons_elems ++ elems2) cons_elems), (Permutation (cons_elems ++ elems2) (elems2 ++ elems2)), (Permutation (cons_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ elems2)), (Permutation (cons_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) [])
(Permutation (cons_elems ++ rest_elems) elems2), (Permutation (cons_elems ++ rest_elems) rest_elems), (Permutation (cons_elems ++ rest_elems) cons_elems), (Permutation (cons_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ elems2))
(Permutation (cons_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) []), (Permutation (cons_elems ++ cons_elems) elems2), (Permutation (cons_elems ++ cons_elems) rest_elems), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ rest_elems))
(Permutation (cons_elems ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) []), (Permutation [] elems2), (Permutation [] rest_elems), (Permutation [] cons_elems), (Permutation [] (elems2 ++ elems2)), (Permutation [] (elems2 ++ rest_elems)), (Permutation [] (elems2 ++ cons_elems))
(Permutation [] (rest_elems ++ elems2)), (Permutation [] (rest_elems ++ rest_elems)), (Permutation [] (rest_elems ++ cons_elems)), (Permutation [] (cons_elems ++ elems2)), (Permutation [] (cons_elems ++ rest_elems)), (Permutation [] (cons_elems ++ cons_elems)), (In a (a :: p)), (In a (merge p p)), (In a (heap_delete_max a)), (In a (join p p a))
(In a (carry p a)), (In a (p ++ p)), (In (smash a a) p), (In (smash a a) (a :: p)), (In (smash a a) (merge p p)), (In (smash a a) (heap_delete_max a)), (In (smash a a) (join p p a)), (In (smash a a) (carry p a)), (In (smash a a) (p ++ p)), (In Leaf p)
(In Leaf (a :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a)), (In Leaf (join p p a)), (In Leaf (carry p a)), (In Leaf (p ++ p)), (In (length elems2) elems2), (In (length elems2) rest_elems), (In (length elems2) cons_elems), (In (length elems2) (elems2 ++ elems2))
(In (length elems2) (elems2 ++ rest_elems)), (In (length elems2) (elems2 ++ cons_elems)), (In (length elems2) (rest_elems ++ elems2)), (In (length elems2) (rest_elems ++ rest_elems)), (In (length elems2) (rest_elems ++ cons_elems)), (In (length elems2) (cons_elems ++ elems2)), (In (length elems2) (cons_elems ++ rest_elems)), (In (length elems2) (cons_elems ++ cons_elems)), (In (length rest_elems) elems2), (In (length rest_elems) rest_elems)
(In (length rest_elems) cons_elems), (In (length rest_elems) (elems2 ++ elems2)), (In (length rest_elems) (elems2 ++ rest_elems)), (In (length rest_elems) (elems2 ++ cons_elems)), (In (length rest_elems) (rest_elems ++ elems2)), (In (length rest_elems) (rest_elems ++ rest_elems)), (In (length rest_elems) (rest_elems ++ cons_elems)), (In (length rest_elems) (cons_elems ++ elems2)), (In (length rest_elems) (cons_elems ++ rest_elems)), (In (length rest_elems) (cons_elems ++ cons_elems))
(In (length cons_elems) elems2), (In (length cons_elems) rest_elems), (In (length cons_elems) cons_elems), (In (length cons_elems) (elems2 ++ elems2)), (In (length cons_elems) (elems2 ++ rest_elems)), (In (length cons_elems) (elems2 ++ cons_elems)), (In (length cons_elems) (rest_elems ++ elems2)), (In (length cons_elems) (rest_elems ++ rest_elems)), (In (length cons_elems) (rest_elems ++ cons_elems)), (In (length cons_elems) (cons_elems ++ elems2))
(In (length cons_elems) (cons_elems ++ rest_elems)), (In (length cons_elems) (cons_elems ++ cons_elems)), (In (length p) elems2), (In (length p) rest_elems), (In (length p) cons_elems), (In (length p) (elems2 ++ elems2)), (In (length p) (elems2 ++ rest_elems)), (In (length p) (elems2 ++ cons_elems)), (In (length p) (rest_elems ++ elems2)), (In (length p) (rest_elems ++ rest_elems))
(In (length p) (rest_elems ++ cons_elems)), (In (length p) (cons_elems ++ elems2)), (In (length p) (cons_elems ++ rest_elems)), (In (length p) (cons_elems ++ cons_elems)), (length elems2 < length rest_elems), (length elems2 < length cons_elems), (length elems2 < length p), (length rest_elems < length elems2), (length rest_elems < length cons_elems), (length rest_elems < length p)
(length cons_elems < length elems2), (length cons_elems < length rest_elems), (length cons_elems < length p), (length p < length elems2), (length p < length rest_elems), (length p < length cons_elems), (length elems2 <= length rest_elems), (length elems2 <= length cons_elems), (length elems2 <= length p), (length rest_elems <= length elems2)
(length rest_elems <= length cons_elems), (length rest_elems <= length p), (length cons_elems <= length elems2), (length cons_elems <= length rest_elems), (length cons_elems <= length p), (length p <= length elems2), (length p <= length rest_elems), (length p <= length cons_elems), (~ Abs p elems2), (~ Abs p rest_elems)
(~ Abs p cons_elems), (~ priqueue_elems p elems2), (~ priqueue_elems p rest_elems), (~ priqueue_elems p cons_elems), (~ tree_elems a elems2), (~ tree_elems a rest_elems), (~ tree_elems a cons_elems), (~ priq p), (~ Permutation elems2 elems2), (~ Permutation elems2 rest_elems)
(~ Permutation elems2 cons_elems), (~ Permutation rest_elems elems2), (~ Permutation rest_elems rest_elems), (~ Permutation rest_elems cons_elems), (~ Permutation cons_elems elems2), (~ Permutation cons_elems rest_elems), (~ Permutation cons_elems cons_elems), (~ Permutation p p), (~ In a p), (p <> p)
(a <> a), (elems2 <> elems2), (elems2 <> rest_elems), (elems2 <> cons_elems), (rest_elems <> elems2), (rest_elems <> rest_elems), (rest_elems <> cons_elems), (cons_elems <> elems2), (cons_elems <> rest_elems), (cons_elems <> cons_elems)
(None = Some elems2), (None = Some rest_elems), (None = Some cons_elems), (None = Some p), (a :: p = p), (a :: p = merge p p), (a :: p = heap_delete_max a), (a :: p = join p p a), (a :: p = carry p a), (a :: p = p ++ p)
(a :: p = []), (merge p p = p), (merge p p = heap_delete_max a), (merge p p = join p p a), (merge p p = carry p a), (merge p p = p ++ p), (heap_delete_max a = p), (heap_delete_max a = carry p a), (heap_delete_max a = p ++ p), (join p p a = p)
(join p p a = heap_delete_max a), (join p p a = carry p a), (join p p a = p ++ p), (carry p a = p), (carry p a = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a), ([] = join p p a)
([] = carry p a), ([] = p ++ p), (smash a a = a), (Leaf = smash a a), (elems2 ++ elems2 = elems2), (elems2 ++ elems2 = rest_elems), (elems2 ++ elems2 = cons_elems), (elems2 ++ rest_elems = elems2), (elems2 ++ rest_elems = rest_elems), (elems2 ++ rest_elems = cons_elems)
(elems2 ++ cons_elems = elems2), (elems2 ++ cons_elems = rest_elems), (elems2 ++ cons_elems = cons_elems), (rest_elems ++ elems2 = elems2), (rest_elems ++ elems2 = rest_elems), (rest_elems ++ elems2 = cons_elems), (rest_elems ++ rest_elems = elems2), (rest_elems ++ rest_elems = rest_elems), (rest_elems ++ rest_elems = cons_elems), (rest_elems ++ cons_elems = elems2)
(rest_elems ++ cons_elems = rest_elems), (rest_elems ++ cons_elems = cons_elems), (cons_elems ++ elems2 = elems2), (cons_elems ++ elems2 = rest_elems), (cons_elems ++ elems2 = cons_elems), (cons_elems ++ rest_elems = elems2), (cons_elems ++ rest_elems = rest_elems), (cons_elems ++ rest_elems = cons_elems), (cons_elems ++ cons_elems = elems2), (cons_elems ++ cons_elems = rest_elems)
(cons_elems ++ cons_elems = cons_elems), ([] = elems2), ([] = rest_elems), ([] = cons_elems), ([] = elems2 ++ elems2), ([] = elems2 ++ rest_elems), ([] = elems2 ++ cons_elems), ([] = rest_elems ++ elems2), ([] = rest_elems ++ rest_elems), ([] = rest_elems ++ cons_elems)
([] = cons_elems ++ elems2), ([] = cons_elems ++ rest_elems), ([] = cons_elems ++ cons_elems), (None = find_max p), (None = Some a)

Label: 2 (2)
(Abs p elems2), (Abs p rest_elems), (Abs p cons_elems), (priqueue_elems p elems2), (priqueue_elems p rest_elems), (priqueue_elems p cons_elems), (tree_elems a elems2), (tree_elems a rest_elems), (tree_elems a cons_elems), (priq p)
(Permutation elems2 elems2), (Permutation elems2 rest_elems), (Permutation elems2 cons_elems), (Permutation rest_elems elems2), (Permutation rest_elems rest_elems), (Permutation rest_elems cons_elems), (Permutation cons_elems elems2), (Permutation cons_elems rest_elems), (Permutation cons_elems cons_elems), (Permutation p p)
(In a p), (p = p), (a = a), (elems2 = elems2), (elems2 = rest_elems), (elems2 = cons_elems), (rest_elems = elems2), (rest_elems = rest_elems), (rest_elems = cons_elems), (cons_elems = elems2)
(cons_elems = rest_elems), (cons_elems = cons_elems), (Abs p (elems2 ++ elems2)), (Abs p (elems2 ++ rest_elems)), (Abs p (elems2 ++ cons_elems)), (Abs p (rest_elems ++ elems2)), (Abs p (rest_elems ++ rest_elems)), (Abs p (rest_elems ++ cons_elems)), (Abs p (cons_elems ++ elems2)), (Abs p (cons_elems ++ rest_elems))
(Abs p (cons_elems ++ cons_elems)), (Abs p []), (Abs (a :: p) elems2), (Abs (a :: p) rest_elems), (Abs (a :: p) cons_elems), (Abs (a :: p) (elems2 ++ elems2)), (Abs (a :: p) (elems2 ++ rest_elems)), (Abs (a :: p) (elems2 ++ cons_elems)), (Abs (a :: p) (rest_elems ++ elems2)), (Abs (a :: p) (rest_elems ++ rest_elems))
(Abs (a :: p) (rest_elems ++ cons_elems)), (Abs (a :: p) (cons_elems ++ elems2)), (Abs (a :: p) (cons_elems ++ rest_elems)), (Abs (a :: p) (cons_elems ++ cons_elems)), (Abs (a :: p) []), (Abs (merge p p) elems2), (Abs (merge p p) rest_elems), (Abs (merge p p) cons_elems), (Abs (merge p p) (elems2 ++ elems2)), (Abs (merge p p) (elems2 ++ rest_elems))
(Abs (merge p p) (elems2 ++ cons_elems)), (Abs (merge p p) (rest_elems ++ elems2)), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) (rest_elems ++ cons_elems)), (Abs (merge p p) (cons_elems ++ elems2)), (Abs (merge p p) (cons_elems ++ rest_elems)), (Abs (merge p p) (cons_elems ++ cons_elems)), (Abs (merge p p) []), (Abs (heap_delete_max a) elems2), (Abs (heap_delete_max a) rest_elems)
(Abs (heap_delete_max a) cons_elems), (Abs (heap_delete_max a) (elems2 ++ elems2)), (Abs (heap_delete_max a) (elems2 ++ rest_elems)), (Abs (heap_delete_max a) (elems2 ++ cons_elems)), (Abs (heap_delete_max a) (rest_elems ++ elems2)), (Abs (heap_delete_max a) (rest_elems ++ rest_elems)), (Abs (heap_delete_max a) (rest_elems ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ elems2)), (Abs (heap_delete_max a) (cons_elems ++ rest_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems))
(Abs (heap_delete_max a) []), (Abs (join p p a) elems2), (Abs (join p p a) rest_elems), (Abs (join p p a) cons_elems), (Abs (join p p a) (elems2 ++ elems2)), (Abs (join p p a) (elems2 ++ rest_elems)), (Abs (join p p a) (elems2 ++ cons_elems)), (Abs (join p p a) (rest_elems ++ elems2)), (Abs (join p p a) (rest_elems ++ rest_elems)), (Abs (join p p a) (rest_elems ++ cons_elems))
(Abs (join p p a) (cons_elems ++ elems2)), (Abs (join p p a) (cons_elems ++ rest_elems)), (Abs (join p p a) (cons_elems ++ cons_elems)), (Abs (join p p a) []), (Abs (carry p a) elems2), (Abs (carry p a) rest_elems), (Abs (carry p a) cons_elems), (Abs (carry p a) (elems2 ++ elems2)), (Abs (carry p a) (elems2 ++ rest_elems)), (Abs (carry p a) (elems2 ++ cons_elems))
(Abs (carry p a) (rest_elems ++ elems2)), (Abs (carry p a) (rest_elems ++ rest_elems)), (Abs (carry p a) (rest_elems ++ cons_elems)), (Abs (carry p a) (cons_elems ++ elems2)), (Abs (carry p a) (cons_elems ++ rest_elems)), (Abs (carry p a) (cons_elems ++ cons_elems)), (Abs (carry p a) []), (Abs (p ++ p) elems2), (Abs (p ++ p) rest_elems), (Abs (p ++ p) cons_elems)
(Abs (p ++ p) (elems2 ++ elems2)), (Abs (p ++ p) (elems2 ++ rest_elems)), (Abs (p ++ p) (elems2 ++ cons_elems)), (Abs (p ++ p) (rest_elems ++ elems2)), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ cons_elems)), (Abs (p ++ p) (cons_elems ++ elems2)), (Abs (p ++ p) (cons_elems ++ rest_elems)), (Abs (p ++ p) (cons_elems ++ cons_elems)), (Abs (p ++ p) [])
(Abs [] elems2), (Abs [] rest_elems), (Abs [] cons_elems), (Abs [] (elems2 ++ elems2)), (Abs [] (elems2 ++ rest_elems)), (Abs [] (elems2 ++ cons_elems)), (Abs [] (rest_elems ++ elems2)), (Abs [] (rest_elems ++ rest_elems)), (Abs [] (rest_elems ++ cons_elems)), (Abs [] (cons_elems ++ elems2))
(Abs [] (cons_elems ++ rest_elems)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] []), (priqueue_elems p (elems2 ++ elems2)), (priqueue_elems p (elems2 ++ rest_elems)), (priqueue_elems p (elems2 ++ cons_elems)), (priqueue_elems p (rest_elems ++ elems2)), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p (rest_elems ++ cons_elems)), (priqueue_elems p (cons_elems ++ elems2))
(priqueue_elems p (cons_elems ++ rest_elems)), (priqueue_elems p (cons_elems ++ cons_elems)), (priqueue_elems p []), (priqueue_elems (a :: p) elems2), (priqueue_elems (a :: p) rest_elems), (priqueue_elems (a :: p) cons_elems), (priqueue_elems (a :: p) (elems2 ++ elems2)), (priqueue_elems (a :: p) (elems2 ++ rest_elems)), (priqueue_elems (a :: p) (elems2 ++ cons_elems)), (priqueue_elems (a :: p) (rest_elems ++ elems2))
(priqueue_elems (a :: p) (rest_elems ++ rest_elems)), (priqueue_elems (a :: p) (rest_elems ++ cons_elems)), (priqueue_elems (a :: p) (cons_elems ++ elems2)), (priqueue_elems (a :: p) (cons_elems ++ rest_elems)), (priqueue_elems (a :: p) (cons_elems ++ cons_elems)), (priqueue_elems (a :: p) []), (priqueue_elems (merge p p) elems2), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) cons_elems), (priqueue_elems (merge p p) (elems2 ++ elems2))
(priqueue_elems (merge p p) (elems2 ++ rest_elems)), (priqueue_elems (merge p p) (elems2 ++ cons_elems)), (priqueue_elems (merge p p) (rest_elems ++ elems2)), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) (rest_elems ++ cons_elems)), (priqueue_elems (merge p p) (cons_elems ++ elems2)), (priqueue_elems (merge p p) (cons_elems ++ rest_elems)), (priqueue_elems (merge p p) (cons_elems ++ cons_elems)), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a) elems2)
(priqueue_elems (heap_delete_max a) rest_elems), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) (elems2 ++ elems2)), (priqueue_elems (heap_delete_max a) (elems2 ++ rest_elems)), (priqueue_elems (heap_delete_max a) (elems2 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (rest_elems ++ rest_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (cons_elems ++ rest_elems))
(priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems (join p p a) elems2), (priqueue_elems (join p p a) rest_elems), (priqueue_elems (join p p a) cons_elems), (priqueue_elems (join p p a) (elems2 ++ elems2)), (priqueue_elems (join p p a) (elems2 ++ rest_elems)), (priqueue_elems (join p p a) (elems2 ++ cons_elems)), (priqueue_elems (join p p a) (rest_elems ++ elems2)), (priqueue_elems (join p p a) (rest_elems ++ rest_elems))
(priqueue_elems (join p p a) (rest_elems ++ cons_elems)), (priqueue_elems (join p p a) (cons_elems ++ elems2)), (priqueue_elems (join p p a) (cons_elems ++ rest_elems)), (priqueue_elems (join p p a) (cons_elems ++ cons_elems)), (priqueue_elems (join p p a) []), (priqueue_elems (carry p a) elems2), (priqueue_elems (carry p a) rest_elems), (priqueue_elems (carry p a) cons_elems), (priqueue_elems (carry p a) (elems2 ++ elems2)), (priqueue_elems (carry p a) (elems2 ++ rest_elems))
(priqueue_elems (carry p a) (elems2 ++ cons_elems)), (priqueue_elems (carry p a) (rest_elems ++ elems2)), (priqueue_elems (carry p a) (rest_elems ++ rest_elems)), (priqueue_elems (carry p a) (rest_elems ++ cons_elems)), (priqueue_elems (carry p a) (cons_elems ++ elems2)), (priqueue_elems (carry p a) (cons_elems ++ rest_elems)), (priqueue_elems (carry p a) (cons_elems ++ cons_elems)), (priqueue_elems (carry p a) []), (priqueue_elems (p ++ p) elems2), (priqueue_elems (p ++ p) rest_elems)
(priqueue_elems (p ++ p) cons_elems), (priqueue_elems (p ++ p) (elems2 ++ elems2)), (priqueue_elems (p ++ p) (elems2 ++ rest_elems)), (priqueue_elems (p ++ p) (elems2 ++ cons_elems)), (priqueue_elems (p ++ p) (rest_elems ++ elems2)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ cons_elems)), (priqueue_elems (p ++ p) (cons_elems ++ elems2)), (priqueue_elems (p ++ p) (cons_elems ++ rest_elems)), (priqueue_elems (p ++ p) (cons_elems ++ cons_elems))
(priqueue_elems (p ++ p) []), (priqueue_elems [] elems2), (priqueue_elems [] rest_elems), (priqueue_elems [] cons_elems), (priqueue_elems [] (elems2 ++ elems2)), (priqueue_elems [] (elems2 ++ rest_elems)), (priqueue_elems [] (elems2 ++ cons_elems)), (priqueue_elems [] (rest_elems ++ elems2)), (priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] (rest_elems ++ cons_elems))
(priqueue_elems [] (cons_elems ++ elems2)), (priqueue_elems [] (cons_elems ++ rest_elems)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] []), (tree_elems a (elems2 ++ elems2)), (tree_elems a (elems2 ++ rest_elems)), (tree_elems a (elems2 ++ cons_elems)), (tree_elems a (rest_elems ++ elems2)), (tree_elems a (rest_elems ++ rest_elems)), (tree_elems a (rest_elems ++ cons_elems))
(tree_elems a (cons_elems ++ elems2)), (tree_elems a (cons_elems ++ rest_elems)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a []), (tree_elems (smash a a) elems2), (tree_elems (smash a a) rest_elems), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) (elems2 ++ elems2)), (tree_elems (smash a a) (elems2 ++ rest_elems)), (tree_elems (smash a a) (elems2 ++ cons_elems))
(tree_elems (smash a a) (rest_elems ++ elems2)), (tree_elems (smash a a) (rest_elems ++ rest_elems)), (tree_elems (smash a a) (rest_elems ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ elems2)), (tree_elems (smash a a) (cons_elems ++ rest_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems)), (tree_elems (smash a a) []), (tree_elems Leaf elems2), (tree_elems Leaf rest_elems), (tree_elems Leaf cons_elems)
(tree_elems Leaf (elems2 ++ elems2)), (tree_elems Leaf (elems2 ++ rest_elems)), (tree_elems Leaf (elems2 ++ cons_elems)), (tree_elems Leaf (rest_elems ++ elems2)), (tree_elems Leaf (rest_elems ++ rest_elems)), (tree_elems Leaf (rest_elems ++ cons_elems)), (tree_elems Leaf (cons_elems ++ elems2)), (tree_elems Leaf (cons_elems ++ rest_elems)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf [])
(priq (a :: p)), (priq (merge p p)), (priq (heap_delete_max a)), (priq (join p p a)), (priq (carry p a)), (priq (p ++ p)), (priqq (length elems2) p), (priqq (length elems2) (a :: p)), (priqq (length elems2) (merge p p)), (priqq (length elems2) (heap_delete_max a))
(priqq (length elems2) (join p p a)), (priqq (length elems2) (carry p a)), (priqq (length elems2) (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (a :: p)), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (heap_delete_max a)), (priqq (length rest_elems) (join p p a)), (priqq (length rest_elems) (carry p a)), (priqq (length rest_elems) (p ++ p))
(priqq (length cons_elems) p), (priqq (length cons_elems) (a :: p)), (priqq (length cons_elems) (merge p p)), (priqq (length cons_elems) (heap_delete_max a)), (priqq (length cons_elems) (join p p a)), (priqq (length cons_elems) (carry p a)), (priqq (length cons_elems) (p ++ p)), (priqq (length p) p), (priqq (length p) (a :: p)), (priqq (length p) (merge p p))
(priqq (length p) (heap_delete_max a)), (priqq (length p) (join p p a)), (priqq (length p) (carry p a)), (priqq (length p) (p ++ p)), (pow2heap (length elems2) a), (pow2heap (length elems2) (smash a a)), (pow2heap (length rest_elems) a), (pow2heap (length rest_elems) (smash a a)), (pow2heap (length cons_elems) a), (pow2heap (length cons_elems) (smash a a))
(pow2heap (length p) a), (pow2heap (length p) (smash a a)), (pow2heapp (length elems2) (length elems2) a), (pow2heapp (length elems2) (length elems2) (smash a a)), (pow2heapp (length elems2) (length elems2) Leaf), (pow2heapp (length elems2) (length rest_elems) a), (pow2heapp (length elems2) (length rest_elems) (smash a a)), (pow2heapp (length elems2) (length rest_elems) Leaf), (pow2heapp (length elems2) (length cons_elems) a), (pow2heapp (length elems2) (length cons_elems) (smash a a))
(pow2heapp (length elems2) (length cons_elems) Leaf), (pow2heapp (length elems2) (length p) a), (pow2heapp (length elems2) (length p) (smash a a)), (pow2heapp (length elems2) (length p) Leaf), (pow2heapp (length rest_elems) (length elems2) a), (pow2heapp (length rest_elems) (length elems2) (smash a a)), (pow2heapp (length rest_elems) (length elems2) Leaf), (pow2heapp (length rest_elems) (length rest_elems) a), (pow2heapp (length rest_elems) (length rest_elems) (smash a a)), (pow2heapp (length rest_elems) (length rest_elems) Leaf)
(pow2heapp (length rest_elems) (length cons_elems) a), (pow2heapp (length rest_elems) (length cons_elems) (smash a a)), (pow2heapp (length rest_elems) (length cons_elems) Leaf), (pow2heapp (length rest_elems) (length p) a), (pow2heapp (length rest_elems) (length p) (smash a a)), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length cons_elems) (length elems2) a), (pow2heapp (length cons_elems) (length elems2) (smash a a)), (pow2heapp (length cons_elems) (length elems2) Leaf), (pow2heapp (length cons_elems) (length rest_elems) a)
(pow2heapp (length cons_elems) (length rest_elems) (smash a a)), (pow2heapp (length cons_elems) (length rest_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length p) a), (pow2heapp (length cons_elems) (length p) (smash a a)), (pow2heapp (length cons_elems) (length p) Leaf), (pow2heapp (length p) (length elems2) a), (pow2heapp (length p) (length elems2) (smash a a))
(pow2heapp (length p) (length elems2) Leaf), (pow2heapp (length p) (length rest_elems) a), (pow2heapp (length p) (length rest_elems) (smash a a)), (pow2heapp (length p) (length rest_elems) Leaf), (pow2heapp (length p) (length cons_elems) a), (pow2heapp (length p) (length cons_elems) (smash a a)), (pow2heapp (length p) (length cons_elems) Leaf), (pow2heapp (length p) (length p) a), (pow2heapp (length p) (length p) (smash a a)), (pow2heapp (length p) (length p) Leaf)
(Permutation p (a :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a)), (Permutation p (join p p a)), (Permutation p (carry p a)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a :: p) p), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (heap_delete_max a))
(Permutation (a :: p) (join p p a)), (Permutation (a :: p) (carry p a)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (heap_delete_max a)), (Permutation (merge p p) (join p p a)), (Permutation (merge p p) (carry p a)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (heap_delete_max a) p), (Permutation (heap_delete_max a) (a :: p)), (Permutation (heap_delete_max a) (merge p p)), (Permutation (heap_delete_max a) (join p p a)), (Permutation (heap_delete_max a) (carry p a)), (Permutation (heap_delete_max a) (p ++ p)), (Permutation (heap_delete_max a) []), (Permutation (join p p a) p), (Permutation (join p p a) (a :: p))
(Permutation (join p p a) (merge p p)), (Permutation (join p p a) (heap_delete_max a)), (Permutation (join p p a) (carry p a)), (Permutation (join p p a) (p ++ p)), (Permutation (join p p a) []), (Permutation (carry p a) p), (Permutation (carry p a) (a :: p)), (Permutation (carry p a) (merge p p)), (Permutation (carry p a) (heap_delete_max a)), (Permutation (carry p a) (join p p a))
(Permutation (carry p a) (p ++ p)), (Permutation (carry p a) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a)), (Permutation (p ++ p) (join p p a)), (Permutation (p ++ p) (carry p a)), (Permutation (p ++ p) []), (Permutation [] p)
(Permutation [] (a :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a)), (Permutation [] (join p p a)), (Permutation [] (carry p a)), (Permutation [] (p ++ p)), (Permutation elems2 (elems2 ++ elems2)), (Permutation elems2 (elems2 ++ rest_elems)), (Permutation elems2 (elems2 ++ cons_elems)), (Permutation elems2 (rest_elems ++ elems2))
(Permutation elems2 (rest_elems ++ rest_elems)), (Permutation elems2 (rest_elems ++ cons_elems)), (Permutation elems2 (cons_elems ++ elems2)), (Permutation elems2 (cons_elems ++ rest_elems)), (Permutation elems2 (cons_elems ++ cons_elems)), (Permutation elems2 []), (Permutation rest_elems (elems2 ++ elems2)), (Permutation rest_elems (elems2 ++ rest_elems)), (Permutation rest_elems (elems2 ++ cons_elems)), (Permutation rest_elems (rest_elems ++ elems2))
(Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems (rest_elems ++ cons_elems)), (Permutation rest_elems (cons_elems ++ elems2)), (Permutation rest_elems (cons_elems ++ rest_elems)), (Permutation rest_elems (cons_elems ++ cons_elems)), (Permutation rest_elems []), (Permutation cons_elems (elems2 ++ elems2)), (Permutation cons_elems (elems2 ++ rest_elems)), (Permutation cons_elems (elems2 ++ cons_elems)), (Permutation cons_elems (rest_elems ++ elems2))
(Permutation cons_elems (rest_elems ++ rest_elems)), (Permutation cons_elems (rest_elems ++ cons_elems)), (Permutation cons_elems (cons_elems ++ elems2)), (Permutation cons_elems (cons_elems ++ rest_elems)), (Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems []), (Permutation (elems2 ++ elems2) elems2), (Permutation (elems2 ++ elems2) rest_elems), (Permutation (elems2 ++ elems2) cons_elems), (Permutation (elems2 ++ elems2) (elems2 ++ rest_elems))
(Permutation (elems2 ++ elems2) (elems2 ++ cons_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ elems2)), (Permutation (elems2 ++ elems2) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ elems2)), (Permutation (elems2 ++ elems2) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) []), (Permutation (elems2 ++ rest_elems) elems2), (Permutation (elems2 ++ rest_elems) rest_elems)
(Permutation (elems2 ++ rest_elems) cons_elems), (Permutation (elems2 ++ rest_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) [])
(Permutation (elems2 ++ cons_elems) elems2), (Permutation (elems2 ++ cons_elems) rest_elems), (Permutation (elems2 ++ cons_elems) cons_elems), (Permutation (elems2 ++ cons_elems) (elems2 ++ elems2)), (Permutation (elems2 ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ rest_elems))
(Permutation (elems2 ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) []), (Permutation (rest_elems ++ elems2) elems2), (Permutation (rest_elems ++ elems2) rest_elems), (Permutation (rest_elems ++ elems2) cons_elems), (Permutation (rest_elems ++ elems2) (elems2 ++ elems2)), (Permutation (rest_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ cons_elems))
(Permutation (rest_elems ++ elems2) (cons_elems ++ elems2)), (Permutation (rest_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ elems2) []), (Permutation (rest_elems ++ rest_elems) elems2), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) cons_elems), (Permutation (rest_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ cons_elems))
(Permutation (rest_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) []), (Permutation (rest_elems ++ cons_elems) elems2), (Permutation (rest_elems ++ cons_elems) rest_elems), (Permutation (rest_elems ++ cons_elems) cons_elems), (Permutation (rest_elems ++ cons_elems) (elems2 ++ elems2))
(Permutation (rest_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) []), (Permutation (cons_elems ++ elems2) elems2), (Permutation (cons_elems ++ elems2) rest_elems)
(Permutation (cons_elems ++ elems2) cons_elems), (Permutation (cons_elems ++ elems2) (elems2 ++ elems2)), (Permutation (cons_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ elems2)), (Permutation (cons_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) [])
(Permutation (cons_elems ++ rest_elems) elems2), (Permutation (cons_elems ++ rest_elems) rest_elems), (Permutation (cons_elems ++ rest_elems) cons_elems), (Permutation (cons_elems ++ rest_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ elems2))
(Permutation (cons_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) []), (Permutation (cons_elems ++ cons_elems) elems2), (Permutation (cons_elems ++ cons_elems) rest_elems), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) (elems2 ++ elems2)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ rest_elems))
(Permutation (cons_elems ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) []), (Permutation [] elems2), (Permutation [] rest_elems), (Permutation [] cons_elems), (Permutation [] (elems2 ++ elems2)), (Permutation [] (elems2 ++ rest_elems)), (Permutation [] (elems2 ++ cons_elems))
(Permutation [] (rest_elems ++ elems2)), (Permutation [] (rest_elems ++ rest_elems)), (Permutation [] (rest_elems ++ cons_elems)), (Permutation [] (cons_elems ++ elems2)), (Permutation [] (cons_elems ++ rest_elems)), (Permutation [] (cons_elems ++ cons_elems)), (In a (a :: p)), (In a (merge p p)), (In a (heap_delete_max a)), (In a (join p p a))
(In a (carry p a)), (In a (p ++ p)), (In (smash a a) p), (In (smash a a) (a :: p)), (In (smash a a) (merge p p)), (In (smash a a) (heap_delete_max a)), (In (smash a a) (join p p a)), (In (smash a a) (carry p a)), (In (smash a a) (p ++ p)), (In Leaf p)
(In Leaf (a :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a)), (In Leaf (join p p a)), (In Leaf (carry p a)), (In Leaf (p ++ p)), (In (length elems2) elems2), (In (length elems2) rest_elems), (In (length elems2) cons_elems), (In (length elems2) (elems2 ++ elems2))
(In (length elems2) (elems2 ++ rest_elems)), (In (length elems2) (elems2 ++ cons_elems)), (In (length elems2) (rest_elems ++ elems2)), (In (length elems2) (rest_elems ++ rest_elems)), (In (length elems2) (rest_elems ++ cons_elems)), (In (length elems2) (cons_elems ++ elems2)), (In (length elems2) (cons_elems ++ rest_elems)), (In (length elems2) (cons_elems ++ cons_elems)), (In (length rest_elems) elems2), (In (length rest_elems) rest_elems)
(In (length rest_elems) cons_elems), (In (length rest_elems) (elems2 ++ elems2)), (In (length rest_elems) (elems2 ++ rest_elems)), (In (length rest_elems) (elems2 ++ cons_elems)), (In (length rest_elems) (rest_elems ++ elems2)), (In (length rest_elems) (rest_elems ++ rest_elems)), (In (length rest_elems) (rest_elems ++ cons_elems)), (In (length rest_elems) (cons_elems ++ elems2)), (In (length rest_elems) (cons_elems ++ rest_elems)), (In (length rest_elems) (cons_elems ++ cons_elems))
(In (length cons_elems) elems2), (In (length cons_elems) rest_elems), (In (length cons_elems) cons_elems), (In (length cons_elems) (elems2 ++ elems2)), (In (length cons_elems) (elems2 ++ rest_elems)), (In (length cons_elems) (elems2 ++ cons_elems)), (In (length cons_elems) (rest_elems ++ elems2)), (In (length cons_elems) (rest_elems ++ rest_elems)), (In (length cons_elems) (rest_elems ++ cons_elems)), (In (length cons_elems) (cons_elems ++ elems2))
(In (length cons_elems) (cons_elems ++ rest_elems)), (In (length cons_elems) (cons_elems ++ cons_elems)), (In (length p) elems2), (In (length p) rest_elems), (In (length p) cons_elems), (In (length p) (elems2 ++ elems2)), (In (length p) (elems2 ++ rest_elems)), (In (length p) (elems2 ++ cons_elems)), (In (length p) (rest_elems ++ elems2)), (In (length p) (rest_elems ++ rest_elems))
(In (length p) (rest_elems ++ cons_elems)), (In (length p) (cons_elems ++ elems2)), (In (length p) (cons_elems ++ rest_elems)), (In (length p) (cons_elems ++ cons_elems)), (length elems2 < length rest_elems), (length elems2 < length cons_elems), (length elems2 < length p), (length rest_elems < length elems2), (length rest_elems < length cons_elems), (length rest_elems < length p)
(length cons_elems < length elems2), (length cons_elems < length rest_elems), (length cons_elems < length p), (length p < length elems2), (length p < length rest_elems), (length p < length cons_elems), (length elems2 <= length rest_elems), (length elems2 <= length cons_elems), (length elems2 <= length p), (length rest_elems <= length elems2)
(length rest_elems <= length cons_elems), (length rest_elems <= length p), (length cons_elems <= length elems2), (length cons_elems <= length rest_elems), (length cons_elems <= length p), (length p <= length elems2), (length p <= length rest_elems), (length p <= length cons_elems), (~ Abs p elems2), (~ Abs p rest_elems)
(~ Abs p cons_elems), (~ priqueue_elems p elems2), (~ priqueue_elems p rest_elems), (~ priqueue_elems p cons_elems), (~ tree_elems a elems2), (~ tree_elems a rest_elems), (~ tree_elems a cons_elems), (~ priq p), (~ Permutation elems2 elems2), (~ Permutation elems2 rest_elems)
(~ Permutation elems2 cons_elems), (~ Permutation rest_elems elems2), (~ Permutation rest_elems rest_elems), (~ Permutation rest_elems cons_elems), (~ Permutation cons_elems elems2), (~ Permutation cons_elems rest_elems), (~ Permutation cons_elems cons_elems), (~ Permutation p p), (~ In a p), (p <> p)
(a <> a), (elems2 <> elems2), (elems2 <> rest_elems), (elems2 <> cons_elems), (rest_elems <> elems2), (rest_elems <> rest_elems), (rest_elems <> cons_elems), (cons_elems <> elems2), (cons_elems <> rest_elems), (cons_elems <> cons_elems)
(None = Some elems2), (None = Some rest_elems), (None = Some cons_elems), (None = Some p), (a :: p = p), (a :: p = merge p p), (a :: p = heap_delete_max a), (a :: p = join p p a), (a :: p = carry p a), (a :: p = p ++ p)
(a :: p = []), (merge p p = p), (merge p p = heap_delete_max a), (merge p p = join p p a), (merge p p = carry p a), (merge p p = p ++ p), (heap_delete_max a = p), (heap_delete_max a = carry p a), (heap_delete_max a = p ++ p), (join p p a = p)
(join p p a = heap_delete_max a), (join p p a = carry p a), (join p p a = p ++ p), (carry p a = p), (carry p a = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a), ([] = join p p a)
([] = carry p a), ([] = p ++ p), (smash a a = a), (Leaf = smash a a), (elems2 ++ elems2 = elems2), (elems2 ++ elems2 = rest_elems), (elems2 ++ elems2 = cons_elems), (elems2 ++ rest_elems = elems2), (elems2 ++ rest_elems = rest_elems), (elems2 ++ rest_elems = cons_elems)
(elems2 ++ cons_elems = elems2), (elems2 ++ cons_elems = rest_elems), (elems2 ++ cons_elems = cons_elems), (rest_elems ++ elems2 = elems2), (rest_elems ++ elems2 = rest_elems), (rest_elems ++ elems2 = cons_elems), (rest_elems ++ rest_elems = elems2), (rest_elems ++ rest_elems = rest_elems), (rest_elems ++ rest_elems = cons_elems), (rest_elems ++ cons_elems = elems2)
(rest_elems ++ cons_elems = rest_elems), (rest_elems ++ cons_elems = cons_elems), (cons_elems ++ elems2 = elems2), (cons_elems ++ elems2 = rest_elems), (cons_elems ++ elems2 = cons_elems), (cons_elems ++ rest_elems = elems2), (cons_elems ++ rest_elems = rest_elems), (cons_elems ++ rest_elems = cons_elems), (cons_elems ++ cons_elems = elems2), (cons_elems ++ cons_elems = rest_elems)
(cons_elems ++ cons_elems = cons_elems), ([] = elems2), ([] = rest_elems), ([] = cons_elems), ([] = elems2 ++ elems2), ([] = elems2 ++ rest_elems), ([] = elems2 ++ cons_elems), ([] = rest_elems ++ elems2), ([] = rest_elems ++ rest_elems), ([] = rest_elems ++ cons_elems)
([] = cons_elems ++ elems2), ([] = cons_elems ++ rest_elems), ([] = cons_elems ++ cons_elems), (None = find_max p), (None = Some a)

Label: 3 (3)
(Abs p rest_elems), (Abs p cons_elems), (Abs p elems2), (Abs p gv0), (priqueue_elems p rest_elems), (priqueue_elems p cons_elems), (priqueue_elems p elems2), (priqueue_elems p gv0), (tree_elems a rest_elems), (tree_elems a cons_elems)
(tree_elems a elems2), (tree_elems a gv0), (priq p), (Permutation rest_elems rest_elems), (Permutation rest_elems cons_elems), (Permutation rest_elems elems2), (Permutation rest_elems gv0), (Permutation cons_elems rest_elems), (Permutation cons_elems cons_elems), (Permutation cons_elems elems2)
(Permutation cons_elems gv0), (Permutation elems2 rest_elems), (Permutation elems2 cons_elems), (Permutation elems2 elems2), (Permutation elems2 gv0), (Permutation gv0 rest_elems), (Permutation gv0 cons_elems), (Permutation gv0 elems2), (Permutation gv0 gv0), (Permutation p p)
(In a p), (p = p), (a = a), (rest_elems = rest_elems), (rest_elems = cons_elems), (rest_elems = elems2), (rest_elems = gv0), (cons_elems = rest_elems), (cons_elems = cons_elems), (cons_elems = elems2)
(cons_elems = gv0), (elems2 = rest_elems), (elems2 = cons_elems), (elems2 = elems2), (elems2 = gv0), (gv0 = rest_elems), (gv0 = cons_elems), (gv0 = elems2), (gv0 = gv0), (Abs p (rest_elems ++ rest_elems))
(Abs p (rest_elems ++ cons_elems)), (Abs p (rest_elems ++ elems2)), (Abs p (rest_elems ++ gv0)), (Abs p (cons_elems ++ rest_elems)), (Abs p (cons_elems ++ cons_elems)), (Abs p (cons_elems ++ elems2)), (Abs p (cons_elems ++ gv0)), (Abs p (elems2 ++ rest_elems)), (Abs p (elems2 ++ cons_elems)), (Abs p (elems2 ++ elems2))
(Abs p (elems2 ++ gv0)), (Abs p (gv0 ++ rest_elems)), (Abs p (gv0 ++ cons_elems)), (Abs p (gv0 ++ elems2)), (Abs p (gv0 ++ gv0)), (Abs p []), (Abs (a :: p) rest_elems), (Abs (a :: p) cons_elems), (Abs (a :: p) elems2), (Abs (a :: p) gv0)
(Abs (a :: p) (rest_elems ++ rest_elems)), (Abs (a :: p) (rest_elems ++ cons_elems)), (Abs (a :: p) (rest_elems ++ elems2)), (Abs (a :: p) (rest_elems ++ gv0)), (Abs (a :: p) (cons_elems ++ rest_elems)), (Abs (a :: p) (cons_elems ++ cons_elems)), (Abs (a :: p) (cons_elems ++ elems2)), (Abs (a :: p) (cons_elems ++ gv0)), (Abs (a :: p) (elems2 ++ rest_elems)), (Abs (a :: p) (elems2 ++ cons_elems))
(Abs (a :: p) (elems2 ++ elems2)), (Abs (a :: p) (elems2 ++ gv0)), (Abs (a :: p) (gv0 ++ rest_elems)), (Abs (a :: p) (gv0 ++ cons_elems)), (Abs (a :: p) (gv0 ++ elems2)), (Abs (a :: p) (gv0 ++ gv0)), (Abs (a :: p) []), (Abs (merge p p) rest_elems), (Abs (merge p p) cons_elems), (Abs (merge p p) elems2)
(Abs (merge p p) gv0), (Abs (merge p p) (rest_elems ++ rest_elems)), (Abs (merge p p) (rest_elems ++ cons_elems)), (Abs (merge p p) (rest_elems ++ elems2)), (Abs (merge p p) (rest_elems ++ gv0)), (Abs (merge p p) (cons_elems ++ rest_elems)), (Abs (merge p p) (cons_elems ++ cons_elems)), (Abs (merge p p) (cons_elems ++ elems2)), (Abs (merge p p) (cons_elems ++ gv0)), (Abs (merge p p) (elems2 ++ rest_elems))
(Abs (merge p p) (elems2 ++ cons_elems)), (Abs (merge p p) (elems2 ++ elems2)), (Abs (merge p p) (elems2 ++ gv0)), (Abs (merge p p) (gv0 ++ rest_elems)), (Abs (merge p p) (gv0 ++ cons_elems)), (Abs (merge p p) (gv0 ++ elems2)), (Abs (merge p p) (gv0 ++ gv0)), (Abs (merge p p) []), (Abs (heap_delete_max a) rest_elems), (Abs (heap_delete_max a) cons_elems)
(Abs (heap_delete_max a) elems2), (Abs (heap_delete_max a) gv0), (Abs (heap_delete_max a) (rest_elems ++ rest_elems)), (Abs (heap_delete_max a) (rest_elems ++ cons_elems)), (Abs (heap_delete_max a) (rest_elems ++ elems2)), (Abs (heap_delete_max a) (rest_elems ++ gv0)), (Abs (heap_delete_max a) (cons_elems ++ rest_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ elems2)), (Abs (heap_delete_max a) (cons_elems ++ gv0))
(Abs (heap_delete_max a) (elems2 ++ rest_elems)), (Abs (heap_delete_max a) (elems2 ++ cons_elems)), (Abs (heap_delete_max a) (elems2 ++ elems2)), (Abs (heap_delete_max a) (elems2 ++ gv0)), (Abs (heap_delete_max a) (gv0 ++ rest_elems)), (Abs (heap_delete_max a) (gv0 ++ cons_elems)), (Abs (heap_delete_max a) (gv0 ++ elems2)), (Abs (heap_delete_max a) (gv0 ++ gv0)), (Abs (heap_delete_max a) []), (Abs (join p p a) rest_elems)
(Abs (join p p a) cons_elems), (Abs (join p p a) elems2), (Abs (join p p a) gv0), (Abs (join p p a) (rest_elems ++ rest_elems)), (Abs (join p p a) (rest_elems ++ cons_elems)), (Abs (join p p a) (rest_elems ++ elems2)), (Abs (join p p a) (rest_elems ++ gv0)), (Abs (join p p a) (cons_elems ++ rest_elems)), (Abs (join p p a) (cons_elems ++ cons_elems)), (Abs (join p p a) (cons_elems ++ elems2))
(Abs (join p p a) (cons_elems ++ gv0)), (Abs (join p p a) (elems2 ++ rest_elems)), (Abs (join p p a) (elems2 ++ cons_elems)), (Abs (join p p a) (elems2 ++ elems2)), (Abs (join p p a) (elems2 ++ gv0)), (Abs (join p p a) (gv0 ++ rest_elems)), (Abs (join p p a) (gv0 ++ cons_elems)), (Abs (join p p a) (gv0 ++ elems2)), (Abs (join p p a) (gv0 ++ gv0)), (Abs (join p p a) [])
(Abs (carry p a) rest_elems), (Abs (carry p a) cons_elems), (Abs (carry p a) elems2), (Abs (carry p a) gv0), (Abs (carry p a) (rest_elems ++ rest_elems)), (Abs (carry p a) (rest_elems ++ cons_elems)), (Abs (carry p a) (rest_elems ++ elems2)), (Abs (carry p a) (rest_elems ++ gv0)), (Abs (carry p a) (cons_elems ++ rest_elems)), (Abs (carry p a) (cons_elems ++ cons_elems))
(Abs (carry p a) (cons_elems ++ elems2)), (Abs (carry p a) (cons_elems ++ gv0)), (Abs (carry p a) (elems2 ++ rest_elems)), (Abs (carry p a) (elems2 ++ cons_elems)), (Abs (carry p a) (elems2 ++ elems2)), (Abs (carry p a) (elems2 ++ gv0)), (Abs (carry p a) (gv0 ++ rest_elems)), (Abs (carry p a) (gv0 ++ cons_elems)), (Abs (carry p a) (gv0 ++ elems2)), (Abs (carry p a) (gv0 ++ gv0))
(Abs (carry p a) []), (Abs (p ++ p) rest_elems), (Abs (p ++ p) cons_elems), (Abs (p ++ p) elems2), (Abs (p ++ p) gv0), (Abs (p ++ p) (rest_elems ++ rest_elems)), (Abs (p ++ p) (rest_elems ++ cons_elems)), (Abs (p ++ p) (rest_elems ++ elems2)), (Abs (p ++ p) (rest_elems ++ gv0)), (Abs (p ++ p) (cons_elems ++ rest_elems))
(Abs (p ++ p) (cons_elems ++ cons_elems)), (Abs (p ++ p) (cons_elems ++ elems2)), (Abs (p ++ p) (cons_elems ++ gv0)), (Abs (p ++ p) (elems2 ++ rest_elems)), (Abs (p ++ p) (elems2 ++ cons_elems)), (Abs (p ++ p) (elems2 ++ elems2)), (Abs (p ++ p) (elems2 ++ gv0)), (Abs (p ++ p) (gv0 ++ rest_elems)), (Abs (p ++ p) (gv0 ++ cons_elems)), (Abs (p ++ p) (gv0 ++ elems2))
(Abs (p ++ p) (gv0 ++ gv0)), (Abs (p ++ p) []), (Abs [] rest_elems), (Abs [] cons_elems), (Abs [] elems2), (Abs [] gv0), (Abs [] (rest_elems ++ rest_elems)), (Abs [] (rest_elems ++ cons_elems)), (Abs [] (rest_elems ++ elems2)), (Abs [] (rest_elems ++ gv0))
(Abs [] (cons_elems ++ rest_elems)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] (cons_elems ++ elems2)), (Abs [] (cons_elems ++ gv0)), (Abs [] (elems2 ++ rest_elems)), (Abs [] (elems2 ++ cons_elems)), (Abs [] (elems2 ++ elems2)), (Abs [] (elems2 ++ gv0)), (Abs [] (gv0 ++ rest_elems)), (Abs [] (gv0 ++ cons_elems))
(Abs [] (gv0 ++ elems2)), (Abs [] (gv0 ++ gv0)), (Abs [] []), (priqueue_elems p (rest_elems ++ rest_elems)), (priqueue_elems p (rest_elems ++ cons_elems)), (priqueue_elems p (rest_elems ++ elems2)), (priqueue_elems p (rest_elems ++ gv0)), (priqueue_elems p (cons_elems ++ rest_elems)), (priqueue_elems p (cons_elems ++ cons_elems)), (priqueue_elems p (cons_elems ++ elems2))
(priqueue_elems p (cons_elems ++ gv0)), (priqueue_elems p (elems2 ++ rest_elems)), (priqueue_elems p (elems2 ++ cons_elems)), (priqueue_elems p (elems2 ++ elems2)), (priqueue_elems p (elems2 ++ gv0)), (priqueue_elems p (gv0 ++ rest_elems)), (priqueue_elems p (gv0 ++ cons_elems)), (priqueue_elems p (gv0 ++ elems2)), (priqueue_elems p (gv0 ++ gv0)), (priqueue_elems p [])
(priqueue_elems (a :: p) rest_elems), (priqueue_elems (a :: p) cons_elems), (priqueue_elems (a :: p) elems2), (priqueue_elems (a :: p) gv0), (priqueue_elems (a :: p) (rest_elems ++ rest_elems)), (priqueue_elems (a :: p) (rest_elems ++ cons_elems)), (priqueue_elems (a :: p) (rest_elems ++ elems2)), (priqueue_elems (a :: p) (rest_elems ++ gv0)), (priqueue_elems (a :: p) (cons_elems ++ rest_elems)), (priqueue_elems (a :: p) (cons_elems ++ cons_elems))
(priqueue_elems (a :: p) (cons_elems ++ elems2)), (priqueue_elems (a :: p) (cons_elems ++ gv0)), (priqueue_elems (a :: p) (elems2 ++ rest_elems)), (priqueue_elems (a :: p) (elems2 ++ cons_elems)), (priqueue_elems (a :: p) (elems2 ++ elems2)), (priqueue_elems (a :: p) (elems2 ++ gv0)), (priqueue_elems (a :: p) (gv0 ++ rest_elems)), (priqueue_elems (a :: p) (gv0 ++ cons_elems)), (priqueue_elems (a :: p) (gv0 ++ elems2)), (priqueue_elems (a :: p) (gv0 ++ gv0))
(priqueue_elems (a :: p) []), (priqueue_elems (merge p p) rest_elems), (priqueue_elems (merge p p) cons_elems), (priqueue_elems (merge p p) elems2), (priqueue_elems (merge p p) gv0), (priqueue_elems (merge p p) (rest_elems ++ rest_elems)), (priqueue_elems (merge p p) (rest_elems ++ cons_elems)), (priqueue_elems (merge p p) (rest_elems ++ elems2)), (priqueue_elems (merge p p) (rest_elems ++ gv0)), (priqueue_elems (merge p p) (cons_elems ++ rest_elems))
(priqueue_elems (merge p p) (cons_elems ++ cons_elems)), (priqueue_elems (merge p p) (cons_elems ++ elems2)), (priqueue_elems (merge p p) (cons_elems ++ gv0)), (priqueue_elems (merge p p) (elems2 ++ rest_elems)), (priqueue_elems (merge p p) (elems2 ++ cons_elems)), (priqueue_elems (merge p p) (elems2 ++ elems2)), (priqueue_elems (merge p p) (elems2 ++ gv0)), (priqueue_elems (merge p p) (gv0 ++ rest_elems)), (priqueue_elems (merge p p) (gv0 ++ cons_elems)), (priqueue_elems (merge p p) (gv0 ++ elems2))
(priqueue_elems (merge p p) (gv0 ++ gv0)), (priqueue_elems (merge p p) []), (priqueue_elems (heap_delete_max a) rest_elems), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) elems2), (priqueue_elems (heap_delete_max a) gv0), (priqueue_elems (heap_delete_max a) (rest_elems ++ rest_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) (rest_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (rest_elems ++ gv0))
(priqueue_elems (heap_delete_max a) (cons_elems ++ rest_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ elems2)), (priqueue_elems (heap_delete_max a) (cons_elems ++ gv0)), (priqueue_elems (heap_delete_max a) (elems2 ++ rest_elems)), (priqueue_elems (heap_delete_max a) (elems2 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (elems2 ++ elems2)), (priqueue_elems (heap_delete_max a) (elems2 ++ gv0)), (priqueue_elems (heap_delete_max a) (gv0 ++ rest_elems)), (priqueue_elems (heap_delete_max a) (gv0 ++ cons_elems))
(priqueue_elems (heap_delete_max a) (gv0 ++ elems2)), (priqueue_elems (heap_delete_max a) (gv0 ++ gv0)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems (join p p a) rest_elems), (priqueue_elems (join p p a) cons_elems), (priqueue_elems (join p p a) elems2), (priqueue_elems (join p p a) gv0), (priqueue_elems (join p p a) (rest_elems ++ rest_elems)), (priqueue_elems (join p p a) (rest_elems ++ cons_elems)), (priqueue_elems (join p p a) (rest_elems ++ elems2))
(priqueue_elems (join p p a) (rest_elems ++ gv0)), (priqueue_elems (join p p a) (cons_elems ++ rest_elems)), (priqueue_elems (join p p a) (cons_elems ++ cons_elems)), (priqueue_elems (join p p a) (cons_elems ++ elems2)), (priqueue_elems (join p p a) (cons_elems ++ gv0)), (priqueue_elems (join p p a) (elems2 ++ rest_elems)), (priqueue_elems (join p p a) (elems2 ++ cons_elems)), (priqueue_elems (join p p a) (elems2 ++ elems2)), (priqueue_elems (join p p a) (elems2 ++ gv0)), (priqueue_elems (join p p a) (gv0 ++ rest_elems))
(priqueue_elems (join p p a) (gv0 ++ cons_elems)), (priqueue_elems (join p p a) (gv0 ++ elems2)), (priqueue_elems (join p p a) (gv0 ++ gv0)), (priqueue_elems (join p p a) []), (priqueue_elems (carry p a) rest_elems), (priqueue_elems (carry p a) cons_elems), (priqueue_elems (carry p a) elems2), (priqueue_elems (carry p a) gv0), (priqueue_elems (carry p a) (rest_elems ++ rest_elems)), (priqueue_elems (carry p a) (rest_elems ++ cons_elems))
(priqueue_elems (carry p a) (rest_elems ++ elems2)), (priqueue_elems (carry p a) (rest_elems ++ gv0)), (priqueue_elems (carry p a) (cons_elems ++ rest_elems)), (priqueue_elems (carry p a) (cons_elems ++ cons_elems)), (priqueue_elems (carry p a) (cons_elems ++ elems2)), (priqueue_elems (carry p a) (cons_elems ++ gv0)), (priqueue_elems (carry p a) (elems2 ++ rest_elems)), (priqueue_elems (carry p a) (elems2 ++ cons_elems)), (priqueue_elems (carry p a) (elems2 ++ elems2)), (priqueue_elems (carry p a) (elems2 ++ gv0))
(priqueue_elems (carry p a) (gv0 ++ rest_elems)), (priqueue_elems (carry p a) (gv0 ++ cons_elems)), (priqueue_elems (carry p a) (gv0 ++ elems2)), (priqueue_elems (carry p a) (gv0 ++ gv0)), (priqueue_elems (carry p a) []), (priqueue_elems (p ++ p) rest_elems), (priqueue_elems (p ++ p) cons_elems), (priqueue_elems (p ++ p) elems2), (priqueue_elems (p ++ p) gv0), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems))
(priqueue_elems (p ++ p) (rest_elems ++ cons_elems)), (priqueue_elems (p ++ p) (rest_elems ++ elems2)), (priqueue_elems (p ++ p) (rest_elems ++ gv0)), (priqueue_elems (p ++ p) (cons_elems ++ rest_elems)), (priqueue_elems (p ++ p) (cons_elems ++ cons_elems)), (priqueue_elems (p ++ p) (cons_elems ++ elems2)), (priqueue_elems (p ++ p) (cons_elems ++ gv0)), (priqueue_elems (p ++ p) (elems2 ++ rest_elems)), (priqueue_elems (p ++ p) (elems2 ++ cons_elems)), (priqueue_elems (p ++ p) (elems2 ++ elems2))
(priqueue_elems (p ++ p) (elems2 ++ gv0)), (priqueue_elems (p ++ p) (gv0 ++ rest_elems)), (priqueue_elems (p ++ p) (gv0 ++ cons_elems)), (priqueue_elems (p ++ p) (gv0 ++ elems2)), (priqueue_elems (p ++ p) (gv0 ++ gv0)), (priqueue_elems (p ++ p) []), (priqueue_elems [] rest_elems), (priqueue_elems [] cons_elems), (priqueue_elems [] elems2), (priqueue_elems [] gv0)
(priqueue_elems [] (rest_elems ++ rest_elems)), (priqueue_elems [] (rest_elems ++ cons_elems)), (priqueue_elems [] (rest_elems ++ elems2)), (priqueue_elems [] (rest_elems ++ gv0)), (priqueue_elems [] (cons_elems ++ rest_elems)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] (cons_elems ++ elems2)), (priqueue_elems [] (cons_elems ++ gv0)), (priqueue_elems [] (elems2 ++ rest_elems)), (priqueue_elems [] (elems2 ++ cons_elems))
(priqueue_elems [] (elems2 ++ elems2)), (priqueue_elems [] (elems2 ++ gv0)), (priqueue_elems [] (gv0 ++ rest_elems)), (priqueue_elems [] (gv0 ++ cons_elems)), (priqueue_elems [] (gv0 ++ elems2)), (priqueue_elems [] (gv0 ++ gv0)), (priqueue_elems [] []), (tree_elems a (rest_elems ++ rest_elems)), (tree_elems a (rest_elems ++ cons_elems)), (tree_elems a (rest_elems ++ elems2))
(tree_elems a (rest_elems ++ gv0)), (tree_elems a (cons_elems ++ rest_elems)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a (cons_elems ++ elems2)), (tree_elems a (cons_elems ++ gv0)), (tree_elems a (elems2 ++ rest_elems)), (tree_elems a (elems2 ++ cons_elems)), (tree_elems a (elems2 ++ elems2)), (tree_elems a (elems2 ++ gv0)), (tree_elems a (gv0 ++ rest_elems))
(tree_elems a (gv0 ++ cons_elems)), (tree_elems a (gv0 ++ elems2)), (tree_elems a (gv0 ++ gv0)), (tree_elems a []), (tree_elems (smash a a) rest_elems), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) elems2), (tree_elems (smash a a) gv0), (tree_elems (smash a a) (rest_elems ++ rest_elems)), (tree_elems (smash a a) (rest_elems ++ cons_elems))
(tree_elems (smash a a) (rest_elems ++ elems2)), (tree_elems (smash a a) (rest_elems ++ gv0)), (tree_elems (smash a a) (cons_elems ++ rest_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ elems2)), (tree_elems (smash a a) (cons_elems ++ gv0)), (tree_elems (smash a a) (elems2 ++ rest_elems)), (tree_elems (smash a a) (elems2 ++ cons_elems)), (tree_elems (smash a a) (elems2 ++ elems2)), (tree_elems (smash a a) (elems2 ++ gv0))
(tree_elems (smash a a) (gv0 ++ rest_elems)), (tree_elems (smash a a) (gv0 ++ cons_elems)), (tree_elems (smash a a) (gv0 ++ elems2)), (tree_elems (smash a a) (gv0 ++ gv0)), (tree_elems (smash a a) []), (tree_elems Leaf rest_elems), (tree_elems Leaf cons_elems), (tree_elems Leaf elems2), (tree_elems Leaf gv0), (tree_elems Leaf (rest_elems ++ rest_elems))
(tree_elems Leaf (rest_elems ++ cons_elems)), (tree_elems Leaf (rest_elems ++ elems2)), (tree_elems Leaf (rest_elems ++ gv0)), (tree_elems Leaf (cons_elems ++ rest_elems)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf (cons_elems ++ elems2)), (tree_elems Leaf (cons_elems ++ gv0)), (tree_elems Leaf (elems2 ++ rest_elems)), (tree_elems Leaf (elems2 ++ cons_elems)), (tree_elems Leaf (elems2 ++ elems2))
(tree_elems Leaf (elems2 ++ gv0)), (tree_elems Leaf (gv0 ++ rest_elems)), (tree_elems Leaf (gv0 ++ cons_elems)), (tree_elems Leaf (gv0 ++ elems2)), (tree_elems Leaf (gv0 ++ gv0)), (tree_elems Leaf []), (priq (a :: p)), (priq (merge p p)), (priq (heap_delete_max a)), (priq (join p p a))
(priq (carry p a)), (priq (p ++ p)), (priqq (length rest_elems) p), (priqq (length rest_elems) (a :: p)), (priqq (length rest_elems) (merge p p)), (priqq (length rest_elems) (heap_delete_max a)), (priqq (length rest_elems) (join p p a)), (priqq (length rest_elems) (carry p a)), (priqq (length rest_elems) (p ++ p)), (priqq (length cons_elems) p)
(priqq (length cons_elems) (a :: p)), (priqq (length cons_elems) (merge p p)), (priqq (length cons_elems) (heap_delete_max a)), (priqq (length cons_elems) (join p p a)), (priqq (length cons_elems) (carry p a)), (priqq (length cons_elems) (p ++ p)), (priqq (length elems2) p), (priqq (length elems2) (a :: p)), (priqq (length elems2) (merge p p)), (priqq (length elems2) (heap_delete_max a))
(priqq (length elems2) (join p p a)), (priqq (length elems2) (carry p a)), (priqq (length elems2) (p ++ p)), (priqq (length gv0) p), (priqq (length gv0) (a :: p)), (priqq (length gv0) (merge p p)), (priqq (length gv0) (heap_delete_max a)), (priqq (length gv0) (join p p a)), (priqq (length gv0) (carry p a)), (priqq (length gv0) (p ++ p))
(priqq (length p) p), (priqq (length p) (a :: p)), (priqq (length p) (merge p p)), (priqq (length p) (heap_delete_max a)), (priqq (length p) (join p p a)), (priqq (length p) (carry p a)), (priqq (length p) (p ++ p)), (pow2heap (length rest_elems) a), (pow2heap (length rest_elems) (smash a a)), (pow2heap (length cons_elems) a)
(pow2heap (length cons_elems) (smash a a)), (pow2heap (length elems2) a), (pow2heap (length elems2) (smash a a)), (pow2heap (length gv0) a), (pow2heap (length gv0) (smash a a)), (pow2heap (length p) a), (pow2heap (length p) (smash a a)), (pow2heapp (length rest_elems) (length rest_elems) a), (pow2heapp (length rest_elems) (length rest_elems) (smash a a)), (pow2heapp (length rest_elems) (length rest_elems) Leaf)
(pow2heapp (length rest_elems) (length cons_elems) a), (pow2heapp (length rest_elems) (length cons_elems) (smash a a)), (pow2heapp (length rest_elems) (length cons_elems) Leaf), (pow2heapp (length rest_elems) (length elems2) a), (pow2heapp (length rest_elems) (length elems2) (smash a a)), (pow2heapp (length rest_elems) (length elems2) Leaf), (pow2heapp (length rest_elems) (length gv0) a), (pow2heapp (length rest_elems) (length gv0) (smash a a)), (pow2heapp (length rest_elems) (length gv0) Leaf), (pow2heapp (length rest_elems) (length p) a)
(pow2heapp (length rest_elems) (length p) (smash a a)), (pow2heapp (length rest_elems) (length p) Leaf), (pow2heapp (length cons_elems) (length rest_elems) a), (pow2heapp (length cons_elems) (length rest_elems) (smash a a)), (pow2heapp (length cons_elems) (length rest_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length elems2) a), (pow2heapp (length cons_elems) (length elems2) (smash a a))
(pow2heapp (length cons_elems) (length elems2) Leaf), (pow2heapp (length cons_elems) (length gv0) a), (pow2heapp (length cons_elems) (length gv0) (smash a a)), (pow2heapp (length cons_elems) (length gv0) Leaf), (pow2heapp (length cons_elems) (length p) a), (pow2heapp (length cons_elems) (length p) (smash a a)), (pow2heapp (length cons_elems) (length p) Leaf), (pow2heapp (length elems2) (length rest_elems) a), (pow2heapp (length elems2) (length rest_elems) (smash a a)), (pow2heapp (length elems2) (length rest_elems) Leaf)
(pow2heapp (length elems2) (length cons_elems) a), (pow2heapp (length elems2) (length cons_elems) (smash a a)), (pow2heapp (length elems2) (length cons_elems) Leaf), (pow2heapp (length elems2) (length elems2) a), (pow2heapp (length elems2) (length elems2) (smash a a)), (pow2heapp (length elems2) (length elems2) Leaf), (pow2heapp (length elems2) (length gv0) a), (pow2heapp (length elems2) (length gv0) (smash a a)), (pow2heapp (length elems2) (length gv0) Leaf), (pow2heapp (length elems2) (length p) a)
(pow2heapp (length elems2) (length p) (smash a a)), (pow2heapp (length elems2) (length p) Leaf), (pow2heapp (length gv0) (length rest_elems) a), (pow2heapp (length gv0) (length rest_elems) (smash a a)), (pow2heapp (length gv0) (length rest_elems) Leaf), (pow2heapp (length gv0) (length cons_elems) a), (pow2heapp (length gv0) (length cons_elems) (smash a a)), (pow2heapp (length gv0) (length cons_elems) Leaf), (pow2heapp (length gv0) (length elems2) a), (pow2heapp (length gv0) (length elems2) (smash a a))
(pow2heapp (length gv0) (length elems2) Leaf), (pow2heapp (length gv0) (length gv0) a), (pow2heapp (length gv0) (length gv0) (smash a a)), (pow2heapp (length gv0) (length gv0) Leaf), (pow2heapp (length gv0) (length p) a), (pow2heapp (length gv0) (length p) (smash a a)), (pow2heapp (length gv0) (length p) Leaf), (pow2heapp (length p) (length rest_elems) a), (pow2heapp (length p) (length rest_elems) (smash a a)), (pow2heapp (length p) (length rest_elems) Leaf)
(pow2heapp (length p) (length cons_elems) a), (pow2heapp (length p) (length cons_elems) (smash a a)), (pow2heapp (length p) (length cons_elems) Leaf), (pow2heapp (length p) (length elems2) a), (pow2heapp (length p) (length elems2) (smash a a)), (pow2heapp (length p) (length elems2) Leaf), (pow2heapp (length p) (length gv0) a), (pow2heapp (length p) (length gv0) (smash a a)), (pow2heapp (length p) (length gv0) Leaf), (pow2heapp (length p) (length p) a)
(pow2heapp (length p) (length p) (smash a a)), (pow2heapp (length p) (length p) Leaf), (Permutation p (a :: p)), (Permutation p (merge p p)), (Permutation p (heap_delete_max a)), (Permutation p (join p p a)), (Permutation p (carry p a)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (a :: p) p)
(Permutation (a :: p) (merge p p)), (Permutation (a :: p) (heap_delete_max a)), (Permutation (a :: p) (join p p a)), (Permutation (a :: p) (carry p a)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge p p) p), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (heap_delete_max a)), (Permutation (merge p p) (join p p a))
(Permutation (merge p p) (carry p a)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (heap_delete_max a) p), (Permutation (heap_delete_max a) (a :: p)), (Permutation (heap_delete_max a) (merge p p)), (Permutation (heap_delete_max a) (join p p a)), (Permutation (heap_delete_max a) (carry p a)), (Permutation (heap_delete_max a) (p ++ p)), (Permutation (heap_delete_max a) [])
(Permutation (join p p a) p), (Permutation (join p p a) (a :: p)), (Permutation (join p p a) (merge p p)), (Permutation (join p p a) (heap_delete_max a)), (Permutation (join p p a) (carry p a)), (Permutation (join p p a) (p ++ p)), (Permutation (join p p a) []), (Permutation (carry p a) p), (Permutation (carry p a) (a :: p)), (Permutation (carry p a) (merge p p))
(Permutation (carry p a) (heap_delete_max a)), (Permutation (carry p a) (join p p a)), (Permutation (carry p a) (p ++ p)), (Permutation (carry p a) []), (Permutation (p ++ p) p), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (heap_delete_max a)), (Permutation (p ++ p) (join p p a)), (Permutation (p ++ p) (carry p a))
(Permutation (p ++ p) []), (Permutation [] p), (Permutation [] (a :: p)), (Permutation [] (merge p p)), (Permutation [] (heap_delete_max a)), (Permutation [] (join p p a)), (Permutation [] (carry p a)), (Permutation [] (p ++ p)), (Permutation rest_elems (rest_elems ++ rest_elems)), (Permutation rest_elems (rest_elems ++ cons_elems))
(Permutation rest_elems (rest_elems ++ elems2)), (Permutation rest_elems (rest_elems ++ gv0)), (Permutation rest_elems (cons_elems ++ rest_elems)), (Permutation rest_elems (cons_elems ++ cons_elems)), (Permutation rest_elems (cons_elems ++ elems2)), (Permutation rest_elems (cons_elems ++ gv0)), (Permutation rest_elems (elems2 ++ rest_elems)), (Permutation rest_elems (elems2 ++ cons_elems)), (Permutation rest_elems (elems2 ++ elems2)), (Permutation rest_elems (elems2 ++ gv0))
(Permutation rest_elems (gv0 ++ rest_elems)), (Permutation rest_elems (gv0 ++ cons_elems)), (Permutation rest_elems (gv0 ++ elems2)), (Permutation rest_elems (gv0 ++ gv0)), (Permutation rest_elems []), (Permutation cons_elems (rest_elems ++ rest_elems)), (Permutation cons_elems (rest_elems ++ cons_elems)), (Permutation cons_elems (rest_elems ++ elems2)), (Permutation cons_elems (rest_elems ++ gv0)), (Permutation cons_elems (cons_elems ++ rest_elems))
(Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems (cons_elems ++ elems2)), (Permutation cons_elems (cons_elems ++ gv0)), (Permutation cons_elems (elems2 ++ rest_elems)), (Permutation cons_elems (elems2 ++ cons_elems)), (Permutation cons_elems (elems2 ++ elems2)), (Permutation cons_elems (elems2 ++ gv0)), (Permutation cons_elems (gv0 ++ rest_elems)), (Permutation cons_elems (gv0 ++ cons_elems)), (Permutation cons_elems (gv0 ++ elems2))
(Permutation cons_elems (gv0 ++ gv0)), (Permutation cons_elems []), (Permutation elems2 (rest_elems ++ rest_elems)), (Permutation elems2 (rest_elems ++ cons_elems)), (Permutation elems2 (rest_elems ++ elems2)), (Permutation elems2 (rest_elems ++ gv0)), (Permutation elems2 (cons_elems ++ rest_elems)), (Permutation elems2 (cons_elems ++ cons_elems)), (Permutation elems2 (cons_elems ++ elems2)), (Permutation elems2 (cons_elems ++ gv0))
(Permutation elems2 (elems2 ++ rest_elems)), (Permutation elems2 (elems2 ++ cons_elems)), (Permutation elems2 (elems2 ++ elems2)), (Permutation elems2 (elems2 ++ gv0)), (Permutation elems2 (gv0 ++ rest_elems)), (Permutation elems2 (gv0 ++ cons_elems)), (Permutation elems2 (gv0 ++ elems2)), (Permutation elems2 (gv0 ++ gv0)), (Permutation elems2 []), (Permutation gv0 (rest_elems ++ rest_elems))
(Permutation gv0 (rest_elems ++ cons_elems)), (Permutation gv0 (rest_elems ++ elems2)), (Permutation gv0 (rest_elems ++ gv0)), (Permutation gv0 (cons_elems ++ rest_elems)), (Permutation gv0 (cons_elems ++ cons_elems)), (Permutation gv0 (cons_elems ++ elems2)), (Permutation gv0 (cons_elems ++ gv0)), (Permutation gv0 (elems2 ++ rest_elems)), (Permutation gv0 (elems2 ++ cons_elems)), (Permutation gv0 (elems2 ++ elems2))
(Permutation gv0 (elems2 ++ gv0)), (Permutation gv0 (gv0 ++ rest_elems)), (Permutation gv0 (gv0 ++ cons_elems)), (Permutation gv0 (gv0 ++ elems2)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (rest_elems ++ rest_elems) rest_elems), (Permutation (rest_elems ++ rest_elems) cons_elems), (Permutation (rest_elems ++ rest_elems) elems2), (Permutation (rest_elems ++ rest_elems) gv0)
(Permutation (rest_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (rest_elems ++ gv0)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ rest_elems) (cons_elems ++ gv0)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (elems2 ++ elems2))
(Permutation (rest_elems ++ rest_elems) (elems2 ++ gv0)), (Permutation (rest_elems ++ rest_elems) (gv0 ++ rest_elems)), (Permutation (rest_elems ++ rest_elems) (gv0 ++ cons_elems)), (Permutation (rest_elems ++ rest_elems) (gv0 ++ elems2)), (Permutation (rest_elems ++ rest_elems) (gv0 ++ gv0)), (Permutation (rest_elems ++ rest_elems) []), (Permutation (rest_elems ++ cons_elems) rest_elems), (Permutation (rest_elems ++ cons_elems) cons_elems), (Permutation (rest_elems ++ cons_elems) elems2), (Permutation (rest_elems ++ cons_elems) gv0)
(Permutation (rest_elems ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (rest_elems ++ gv0)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (rest_elems ++ cons_elems) (cons_elems ++ gv0)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (elems2 ++ elems2))
(Permutation (rest_elems ++ cons_elems) (elems2 ++ gv0)), (Permutation (rest_elems ++ cons_elems) (gv0 ++ rest_elems)), (Permutation (rest_elems ++ cons_elems) (gv0 ++ cons_elems)), (Permutation (rest_elems ++ cons_elems) (gv0 ++ elems2)), (Permutation (rest_elems ++ cons_elems) (gv0 ++ gv0)), (Permutation (rest_elems ++ cons_elems) []), (Permutation (rest_elems ++ elems2) rest_elems), (Permutation (rest_elems ++ elems2) cons_elems), (Permutation (rest_elems ++ elems2) elems2), (Permutation (rest_elems ++ elems2) gv0)
(Permutation (rest_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ elems2) (rest_elems ++ gv0)), (Permutation (rest_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ elems2) (cons_elems ++ elems2)), (Permutation (rest_elems ++ elems2) (cons_elems ++ gv0)), (Permutation (rest_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ elems2) (elems2 ++ elems2))
(Permutation (rest_elems ++ elems2) (elems2 ++ gv0)), (Permutation (rest_elems ++ elems2) (gv0 ++ rest_elems)), (Permutation (rest_elems ++ elems2) (gv0 ++ cons_elems)), (Permutation (rest_elems ++ elems2) (gv0 ++ elems2)), (Permutation (rest_elems ++ elems2) (gv0 ++ gv0)), (Permutation (rest_elems ++ elems2) []), (Permutation (rest_elems ++ gv0) rest_elems), (Permutation (rest_elems ++ gv0) cons_elems), (Permutation (rest_elems ++ gv0) elems2), (Permutation (rest_elems ++ gv0) gv0)
(Permutation (rest_elems ++ gv0) (rest_elems ++ rest_elems)), (Permutation (rest_elems ++ gv0) (rest_elems ++ cons_elems)), (Permutation (rest_elems ++ gv0) (rest_elems ++ elems2)), (Permutation (rest_elems ++ gv0) (cons_elems ++ rest_elems)), (Permutation (rest_elems ++ gv0) (cons_elems ++ cons_elems)), (Permutation (rest_elems ++ gv0) (cons_elems ++ elems2)), (Permutation (rest_elems ++ gv0) (cons_elems ++ gv0)), (Permutation (rest_elems ++ gv0) (elems2 ++ rest_elems)), (Permutation (rest_elems ++ gv0) (elems2 ++ cons_elems)), (Permutation (rest_elems ++ gv0) (elems2 ++ elems2))
(Permutation (rest_elems ++ gv0) (elems2 ++ gv0)), (Permutation (rest_elems ++ gv0) (gv0 ++ rest_elems)), (Permutation (rest_elems ++ gv0) (gv0 ++ cons_elems)), (Permutation (rest_elems ++ gv0) (gv0 ++ elems2)), (Permutation (rest_elems ++ gv0) (gv0 ++ gv0)), (Permutation (rest_elems ++ gv0) []), (Permutation (cons_elems ++ rest_elems) rest_elems), (Permutation (cons_elems ++ rest_elems) cons_elems), (Permutation (cons_elems ++ rest_elems) elems2), (Permutation (cons_elems ++ rest_elems) gv0)
(Permutation (cons_elems ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ rest_elems) (rest_elems ++ gv0)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ elems2)), (Permutation (cons_elems ++ rest_elems) (cons_elems ++ gv0)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (elems2 ++ elems2))
(Permutation (cons_elems ++ rest_elems) (elems2 ++ gv0)), (Permutation (cons_elems ++ rest_elems) (gv0 ++ rest_elems)), (Permutation (cons_elems ++ rest_elems) (gv0 ++ cons_elems)), (Permutation (cons_elems ++ rest_elems) (gv0 ++ elems2)), (Permutation (cons_elems ++ rest_elems) (gv0 ++ gv0)), (Permutation (cons_elems ++ rest_elems) []), (Permutation (cons_elems ++ cons_elems) rest_elems), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) elems2), (Permutation (cons_elems ++ cons_elems) gv0)
(Permutation (cons_elems ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (rest_elems ++ gv0)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ elems2)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ gv0)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (elems2 ++ elems2))
(Permutation (cons_elems ++ cons_elems) (elems2 ++ gv0)), (Permutation (cons_elems ++ cons_elems) (gv0 ++ rest_elems)), (Permutation (cons_elems ++ cons_elems) (gv0 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (gv0 ++ elems2)), (Permutation (cons_elems ++ cons_elems) (gv0 ++ gv0)), (Permutation (cons_elems ++ cons_elems) []), (Permutation (cons_elems ++ elems2) rest_elems), (Permutation (cons_elems ++ elems2) cons_elems), (Permutation (cons_elems ++ elems2) elems2), (Permutation (cons_elems ++ elems2) gv0)
(Permutation (cons_elems ++ elems2) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) (rest_elems ++ elems2)), (Permutation (cons_elems ++ elems2) (rest_elems ++ gv0)), (Permutation (cons_elems ++ elems2) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ elems2) (cons_elems ++ gv0)), (Permutation (cons_elems ++ elems2) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ elems2) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ elems2) (elems2 ++ elems2))
(Permutation (cons_elems ++ elems2) (elems2 ++ gv0)), (Permutation (cons_elems ++ elems2) (gv0 ++ rest_elems)), (Permutation (cons_elems ++ elems2) (gv0 ++ cons_elems)), (Permutation (cons_elems ++ elems2) (gv0 ++ elems2)), (Permutation (cons_elems ++ elems2) (gv0 ++ gv0)), (Permutation (cons_elems ++ elems2) []), (Permutation (cons_elems ++ gv0) rest_elems), (Permutation (cons_elems ++ gv0) cons_elems), (Permutation (cons_elems ++ gv0) elems2), (Permutation (cons_elems ++ gv0) gv0)
(Permutation (cons_elems ++ gv0) (rest_elems ++ rest_elems)), (Permutation (cons_elems ++ gv0) (rest_elems ++ cons_elems)), (Permutation (cons_elems ++ gv0) (rest_elems ++ elems2)), (Permutation (cons_elems ++ gv0) (rest_elems ++ gv0)), (Permutation (cons_elems ++ gv0) (cons_elems ++ rest_elems)), (Permutation (cons_elems ++ gv0) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ gv0) (cons_elems ++ elems2)), (Permutation (cons_elems ++ gv0) (elems2 ++ rest_elems)), (Permutation (cons_elems ++ gv0) (elems2 ++ cons_elems)), (Permutation (cons_elems ++ gv0) (elems2 ++ elems2))
(Permutation (cons_elems ++ gv0) (elems2 ++ gv0)), (Permutation (cons_elems ++ gv0) (gv0 ++ rest_elems)), (Permutation (cons_elems ++ gv0) (gv0 ++ cons_elems)), (Permutation (cons_elems ++ gv0) (gv0 ++ elems2)), (Permutation (cons_elems ++ gv0) (gv0 ++ gv0)), (Permutation (cons_elems ++ gv0) []), (Permutation (elems2 ++ rest_elems) rest_elems), (Permutation (elems2 ++ rest_elems) cons_elems), (Permutation (elems2 ++ rest_elems) elems2), (Permutation (elems2 ++ rest_elems) gv0)
(Permutation (elems2 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (rest_elems ++ gv0)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ rest_elems) (cons_elems ++ gv0)), (Permutation (elems2 ++ rest_elems) (elems2 ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (elems2 ++ elems2))
(Permutation (elems2 ++ rest_elems) (elems2 ++ gv0)), (Permutation (elems2 ++ rest_elems) (gv0 ++ rest_elems)), (Permutation (elems2 ++ rest_elems) (gv0 ++ cons_elems)), (Permutation (elems2 ++ rest_elems) (gv0 ++ elems2)), (Permutation (elems2 ++ rest_elems) (gv0 ++ gv0)), (Permutation (elems2 ++ rest_elems) []), (Permutation (elems2 ++ cons_elems) rest_elems), (Permutation (elems2 ++ cons_elems) cons_elems), (Permutation (elems2 ++ cons_elems) elems2), (Permutation (elems2 ++ cons_elems) gv0)
(Permutation (elems2 ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (rest_elems ++ gv0)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ elems2)), (Permutation (elems2 ++ cons_elems) (cons_elems ++ gv0)), (Permutation (elems2 ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (elems2 ++ elems2))
(Permutation (elems2 ++ cons_elems) (elems2 ++ gv0)), (Permutation (elems2 ++ cons_elems) (gv0 ++ rest_elems)), (Permutation (elems2 ++ cons_elems) (gv0 ++ cons_elems)), (Permutation (elems2 ++ cons_elems) (gv0 ++ elems2)), (Permutation (elems2 ++ cons_elems) (gv0 ++ gv0)), (Permutation (elems2 ++ cons_elems) []), (Permutation (elems2 ++ elems2) rest_elems), (Permutation (elems2 ++ elems2) cons_elems), (Permutation (elems2 ++ elems2) elems2), (Permutation (elems2 ++ elems2) gv0)
(Permutation (elems2 ++ elems2) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) (rest_elems ++ elems2)), (Permutation (elems2 ++ elems2) (rest_elems ++ gv0)), (Permutation (elems2 ++ elems2) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ elems2) (cons_elems ++ elems2)), (Permutation (elems2 ++ elems2) (cons_elems ++ gv0)), (Permutation (elems2 ++ elems2) (elems2 ++ rest_elems)), (Permutation (elems2 ++ elems2) (elems2 ++ cons_elems))
(Permutation (elems2 ++ elems2) (elems2 ++ gv0)), (Permutation (elems2 ++ elems2) (gv0 ++ rest_elems)), (Permutation (elems2 ++ elems2) (gv0 ++ cons_elems)), (Permutation (elems2 ++ elems2) (gv0 ++ elems2)), (Permutation (elems2 ++ elems2) (gv0 ++ gv0)), (Permutation (elems2 ++ elems2) []), (Permutation (elems2 ++ gv0) rest_elems), (Permutation (elems2 ++ gv0) cons_elems), (Permutation (elems2 ++ gv0) elems2), (Permutation (elems2 ++ gv0) gv0)
(Permutation (elems2 ++ gv0) (rest_elems ++ rest_elems)), (Permutation (elems2 ++ gv0) (rest_elems ++ cons_elems)), (Permutation (elems2 ++ gv0) (rest_elems ++ elems2)), (Permutation (elems2 ++ gv0) (rest_elems ++ gv0)), (Permutation (elems2 ++ gv0) (cons_elems ++ rest_elems)), (Permutation (elems2 ++ gv0) (cons_elems ++ cons_elems)), (Permutation (elems2 ++ gv0) (cons_elems ++ elems2)), (Permutation (elems2 ++ gv0) (cons_elems ++ gv0)), (Permutation (elems2 ++ gv0) (elems2 ++ rest_elems)), (Permutation (elems2 ++ gv0) (elems2 ++ cons_elems))
(Permutation (elems2 ++ gv0) (elems2 ++ elems2)), (Permutation (elems2 ++ gv0) (gv0 ++ rest_elems)), (Permutation (elems2 ++ gv0) (gv0 ++ cons_elems)), (Permutation (elems2 ++ gv0) (gv0 ++ elems2)), (Permutation (elems2 ++ gv0) (gv0 ++ gv0)), (Permutation (elems2 ++ gv0) []), (Permutation (gv0 ++ rest_elems) rest_elems), (Permutation (gv0 ++ rest_elems) cons_elems), (Permutation (gv0 ++ rest_elems) elems2), (Permutation (gv0 ++ rest_elems) gv0)
(Permutation (gv0 ++ rest_elems) (rest_elems ++ rest_elems)), (Permutation (gv0 ++ rest_elems) (rest_elems ++ cons_elems)), (Permutation (gv0 ++ rest_elems) (rest_elems ++ elems2)), (Permutation (gv0 ++ rest_elems) (rest_elems ++ gv0)), (Permutation (gv0 ++ rest_elems) (cons_elems ++ rest_elems)), (Permutation (gv0 ++ rest_elems) (cons_elems ++ cons_elems)), (Permutation (gv0 ++ rest_elems) (cons_elems ++ elems2)), (Permutation (gv0 ++ rest_elems) (cons_elems ++ gv0)), (Permutation (gv0 ++ rest_elems) (elems2 ++ rest_elems)), (Permutation (gv0 ++ rest_elems) (elems2 ++ cons_elems))
(Permutation (gv0 ++ rest_elems) (elems2 ++ elems2)), (Permutation (gv0 ++ rest_elems) (elems2 ++ gv0)), (Permutation (gv0 ++ rest_elems) (gv0 ++ cons_elems)), (Permutation (gv0 ++ rest_elems) (gv0 ++ elems2)), (Permutation (gv0 ++ rest_elems) (gv0 ++ gv0)), (Permutation (gv0 ++ rest_elems) []), (Permutation (gv0 ++ cons_elems) rest_elems), (Permutation (gv0 ++ cons_elems) cons_elems), (Permutation (gv0 ++ cons_elems) elems2), (Permutation (gv0 ++ cons_elems) gv0)
(Permutation (gv0 ++ cons_elems) (rest_elems ++ rest_elems)), (Permutation (gv0 ++ cons_elems) (rest_elems ++ cons_elems)), (Permutation (gv0 ++ cons_elems) (rest_elems ++ elems2)), (Permutation (gv0 ++ cons_elems) (rest_elems ++ gv0)), (Permutation (gv0 ++ cons_elems) (cons_elems ++ rest_elems)), (Permutation (gv0 ++ cons_elems) (cons_elems ++ cons_elems)), (Permutation (gv0 ++ cons_elems) (cons_elems ++ elems2)), (Permutation (gv0 ++ cons_elems) (cons_elems ++ gv0)), (Permutation (gv0 ++ cons_elems) (elems2 ++ rest_elems)), (Permutation (gv0 ++ cons_elems) (elems2 ++ cons_elems))
(Permutation (gv0 ++ cons_elems) (elems2 ++ elems2)), (Permutation (gv0 ++ cons_elems) (elems2 ++ gv0)), (Permutation (gv0 ++ cons_elems) (gv0 ++ rest_elems)), (Permutation (gv0 ++ cons_elems) (gv0 ++ elems2)), (Permutation (gv0 ++ cons_elems) (gv0 ++ gv0)), (Permutation (gv0 ++ cons_elems) []), (Permutation (gv0 ++ elems2) rest_elems), (Permutation (gv0 ++ elems2) cons_elems), (Permutation (gv0 ++ elems2) elems2), (Permutation (gv0 ++ elems2) gv0)
(Permutation (gv0 ++ elems2) (rest_elems ++ rest_elems)), (Permutation (gv0 ++ elems2) (rest_elems ++ cons_elems)), (Permutation (gv0 ++ elems2) (rest_elems ++ elems2)), (Permutation (gv0 ++ elems2) (rest_elems ++ gv0)), (Permutation (gv0 ++ elems2) (cons_elems ++ rest_elems)), (Permutation (gv0 ++ elems2) (cons_elems ++ cons_elems)), (Permutation (gv0 ++ elems2) (cons_elems ++ elems2)), (Permutation (gv0 ++ elems2) (cons_elems ++ gv0)), (Permutation (gv0 ++ elems2) (elems2 ++ rest_elems)), (Permutation (gv0 ++ elems2) (elems2 ++ cons_elems))
(Permutation (gv0 ++ elems2) (elems2 ++ elems2)), (Permutation (gv0 ++ elems2) (elems2 ++ gv0)), (Permutation (gv0 ++ elems2) (gv0 ++ rest_elems)), (Permutation (gv0 ++ elems2) (gv0 ++ cons_elems)), (Permutation (gv0 ++ elems2) (gv0 ++ gv0)), (Permutation (gv0 ++ elems2) []), (Permutation (gv0 ++ gv0) rest_elems), (Permutation (gv0 ++ gv0) cons_elems), (Permutation (gv0 ++ gv0) elems2), (Permutation (gv0 ++ gv0) gv0)
(Permutation (gv0 ++ gv0) (rest_elems ++ rest_elems)), (Permutation (gv0 ++ gv0) (rest_elems ++ cons_elems)), (Permutation (gv0 ++ gv0) (rest_elems ++ elems2)), (Permutation (gv0 ++ gv0) (rest_elems ++ gv0)), (Permutation (gv0 ++ gv0) (cons_elems ++ rest_elems)), (Permutation (gv0 ++ gv0) (cons_elems ++ cons_elems)), (Permutation (gv0 ++ gv0) (cons_elems ++ elems2)), (Permutation (gv0 ++ gv0) (cons_elems ++ gv0)), (Permutation (gv0 ++ gv0) (elems2 ++ rest_elems)), (Permutation (gv0 ++ gv0) (elems2 ++ cons_elems))
(Permutation (gv0 ++ gv0) (elems2 ++ elems2)), (Permutation (gv0 ++ gv0) (elems2 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ rest_elems)), (Permutation (gv0 ++ gv0) (gv0 ++ cons_elems)), (Permutation (gv0 ++ gv0) (gv0 ++ elems2)), (Permutation (gv0 ++ gv0) []), (Permutation [] rest_elems), (Permutation [] cons_elems), (Permutation [] elems2), (Permutation [] gv0)
(Permutation [] (rest_elems ++ rest_elems)), (Permutation [] (rest_elems ++ cons_elems)), (Permutation [] (rest_elems ++ elems2)), (Permutation [] (rest_elems ++ gv0)), (Permutation [] (cons_elems ++ rest_elems)), (Permutation [] (cons_elems ++ cons_elems)), (Permutation [] (cons_elems ++ elems2)), (Permutation [] (cons_elems ++ gv0)), (Permutation [] (elems2 ++ rest_elems)), (Permutation [] (elems2 ++ cons_elems))
(Permutation [] (elems2 ++ elems2)), (Permutation [] (elems2 ++ gv0)), (Permutation [] (gv0 ++ rest_elems)), (Permutation [] (gv0 ++ cons_elems)), (Permutation [] (gv0 ++ elems2)), (Permutation [] (gv0 ++ gv0)), (In a (a :: p)), (In a (merge p p)), (In a (heap_delete_max a)), (In a (join p p a))
(In a (carry p a)), (In a (p ++ p)), (In (smash a a) p), (In (smash a a) (a :: p)), (In (smash a a) (merge p p)), (In (smash a a) (heap_delete_max a)), (In (smash a a) (join p p a)), (In (smash a a) (carry p a)), (In (smash a a) (p ++ p)), (In Leaf p)
(In Leaf (a :: p)), (In Leaf (merge p p)), (In Leaf (heap_delete_max a)), (In Leaf (join p p a)), (In Leaf (carry p a)), (In Leaf (p ++ p)), (In (length rest_elems) rest_elems), (In (length rest_elems) cons_elems), (In (length rest_elems) elems2), (In (length rest_elems) gv0)
(In (length rest_elems) (rest_elems ++ rest_elems)), (In (length rest_elems) (rest_elems ++ cons_elems)), (In (length rest_elems) (rest_elems ++ elems2)), (In (length rest_elems) (rest_elems ++ gv0)), (In (length rest_elems) (cons_elems ++ rest_elems)), (In (length rest_elems) (cons_elems ++ cons_elems)), (In (length rest_elems) (cons_elems ++ elems2)), (In (length rest_elems) (cons_elems ++ gv0)), (In (length rest_elems) (elems2 ++ rest_elems)), (In (length rest_elems) (elems2 ++ cons_elems))
(In (length rest_elems) (elems2 ++ elems2)), (In (length rest_elems) (elems2 ++ gv0)), (In (length rest_elems) (gv0 ++ rest_elems)), (In (length rest_elems) (gv0 ++ cons_elems)), (In (length rest_elems) (gv0 ++ elems2)), (In (length rest_elems) (gv0 ++ gv0)), (In (length cons_elems) rest_elems), (In (length cons_elems) cons_elems), (In (length cons_elems) elems2), (In (length cons_elems) gv0)
(In (length cons_elems) (rest_elems ++ rest_elems)), (In (length cons_elems) (rest_elems ++ cons_elems)), (In (length cons_elems) (rest_elems ++ elems2)), (In (length cons_elems) (rest_elems ++ gv0)), (In (length cons_elems) (cons_elems ++ rest_elems)), (In (length cons_elems) (cons_elems ++ cons_elems)), (In (length cons_elems) (cons_elems ++ elems2)), (In (length cons_elems) (cons_elems ++ gv0)), (In (length cons_elems) (elems2 ++ rest_elems)), (In (length cons_elems) (elems2 ++ cons_elems))
(In (length cons_elems) (elems2 ++ elems2)), (In (length cons_elems) (elems2 ++ gv0)), (In (length cons_elems) (gv0 ++ rest_elems)), (In (length cons_elems) (gv0 ++ cons_elems)), (In (length cons_elems) (gv0 ++ elems2)), (In (length cons_elems) (gv0 ++ gv0)), (In (length elems2) rest_elems), (In (length elems2) cons_elems), (In (length elems2) elems2), (In (length elems2) gv0)
(In (length elems2) (rest_elems ++ rest_elems)), (In (length elems2) (rest_elems ++ cons_elems)), (In (length elems2) (rest_elems ++ elems2)), (In (length elems2) (rest_elems ++ gv0)), (In (length elems2) (cons_elems ++ rest_elems)), (In (length elems2) (cons_elems ++ cons_elems)), (In (length elems2) (cons_elems ++ elems2)), (In (length elems2) (cons_elems ++ gv0)), (In (length elems2) (elems2 ++ rest_elems)), (In (length elems2) (elems2 ++ cons_elems))
(In (length elems2) (elems2 ++ elems2)), (In (length elems2) (elems2 ++ gv0)), (In (length elems2) (gv0 ++ rest_elems)), (In (length elems2) (gv0 ++ cons_elems)), (In (length elems2) (gv0 ++ elems2)), (In (length elems2) (gv0 ++ gv0)), (In (length gv0) rest_elems), (In (length gv0) cons_elems), (In (length gv0) elems2), (In (length gv0) gv0)
(In (length gv0) (rest_elems ++ rest_elems)), (In (length gv0) (rest_elems ++ cons_elems)), (In (length gv0) (rest_elems ++ elems2)), (In (length gv0) (rest_elems ++ gv0)), (In (length gv0) (cons_elems ++ rest_elems)), (In (length gv0) (cons_elems ++ cons_elems)), (In (length gv0) (cons_elems ++ elems2)), (In (length gv0) (cons_elems ++ gv0)), (In (length gv0) (elems2 ++ rest_elems)), (In (length gv0) (elems2 ++ cons_elems))
(In (length gv0) (elems2 ++ elems2)), (In (length gv0) (elems2 ++ gv0)), (In (length gv0) (gv0 ++ rest_elems)), (In (length gv0) (gv0 ++ cons_elems)), (In (length gv0) (gv0 ++ elems2)), (In (length gv0) (gv0 ++ gv0)), (In (length p) rest_elems), (In (length p) cons_elems), (In (length p) elems2), (In (length p) gv0)
(In (length p) (rest_elems ++ rest_elems)), (In (length p) (rest_elems ++ cons_elems)), (In (length p) (rest_elems ++ elems2)), (In (length p) (rest_elems ++ gv0)), (In (length p) (cons_elems ++ rest_elems)), (In (length p) (cons_elems ++ cons_elems)), (In (length p) (cons_elems ++ elems2)), (In (length p) (cons_elems ++ gv0)), (In (length p) (elems2 ++ rest_elems)), (In (length p) (elems2 ++ cons_elems))
(In (length p) (elems2 ++ elems2)), (In (length p) (elems2 ++ gv0)), (In (length p) (gv0 ++ rest_elems)), (In (length p) (gv0 ++ cons_elems)), (In (length p) (gv0 ++ elems2)), (In (length p) (gv0 ++ gv0)), (length rest_elems < length cons_elems), (length rest_elems < length elems2), (length rest_elems < length gv0), (length rest_elems < length p)
(length cons_elems < length rest_elems), (length cons_elems < length elems2), (length cons_elems < length gv0), (length cons_elems < length p), (length elems2 < length rest_elems), (length elems2 < length cons_elems), (length elems2 < length gv0), (length elems2 < length p), (length gv0 < length rest_elems), (length gv0 < length cons_elems)
(length gv0 < length elems2), (length gv0 < length p), (length p < length rest_elems), (length p < length cons_elems), (length p < length elems2), (length p < length gv0), (length rest_elems <= length cons_elems), (length rest_elems <= length elems2), (length rest_elems <= length gv0), (length rest_elems <= length p)
(length cons_elems <= length rest_elems), (length cons_elems <= length elems2), (length cons_elems <= length gv0), (length cons_elems <= length p), (length elems2 <= length rest_elems), (length elems2 <= length cons_elems), (length elems2 <= length gv0), (length elems2 <= length p), (length gv0 <= length rest_elems), (length gv0 <= length cons_elems)
(length gv0 <= length elems2), (length gv0 <= length p), (length p <= length rest_elems), (length p <= length cons_elems), (length p <= length elems2), (length p <= length gv0), (~ Abs p rest_elems), (~ Abs p cons_elems), (~ Abs p elems2), (~ Abs p gv0)
(~ priqueue_elems p rest_elems), (~ priqueue_elems p cons_elems), (~ priqueue_elems p elems2), (~ priqueue_elems p gv0), (~ tree_elems a rest_elems), (~ tree_elems a cons_elems), (~ tree_elems a elems2), (~ tree_elems a gv0), (~ priq p), (~ Permutation rest_elems rest_elems)
(~ Permutation rest_elems cons_elems), (~ Permutation rest_elems elems2), (~ Permutation rest_elems gv0), (~ Permutation cons_elems rest_elems), (~ Permutation cons_elems cons_elems), (~ Permutation cons_elems elems2), (~ Permutation cons_elems gv0), (~ Permutation elems2 rest_elems), (~ Permutation elems2 cons_elems), (~ Permutation elems2 elems2)
(~ Permutation elems2 gv0), (~ Permutation gv0 rest_elems), (~ Permutation gv0 cons_elems), (~ Permutation gv0 elems2), (~ Permutation gv0 gv0), (~ Permutation p p), (~ In a p), (p <> p), (a <> a), (rest_elems <> rest_elems)
(rest_elems <> cons_elems), (rest_elems <> elems2), (rest_elems <> gv0), (cons_elems <> rest_elems), (cons_elems <> cons_elems), (cons_elems <> elems2), (cons_elems <> gv0), (elems2 <> rest_elems), (elems2 <> cons_elems), (elems2 <> elems2)
(elems2 <> gv0), (gv0 <> rest_elems), (gv0 <> cons_elems), (gv0 <> elems2), (gv0 <> gv0), (None = Some rest_elems), (None = Some cons_elems), (None = Some elems2), (None = Some gv0), (None = Some p)
(a :: p = p), (a :: p = merge p p), (a :: p = heap_delete_max a), (a :: p = join p p a), (a :: p = carry p a), (a :: p = p ++ p), (a :: p = []), (merge p p = p), (merge p p = heap_delete_max a), (merge p p = join p p a)
(merge p p = carry p a), (merge p p = p ++ p), (heap_delete_max a = p), (heap_delete_max a = carry p a), (heap_delete_max a = p ++ p), (join p p a = p), (join p p a = heap_delete_max a), (join p p a = carry p a), (join p p a = p ++ p), (carry p a = p)
(carry p a = p ++ p), (p ++ p = p), ([] = p), ([] = merge p p), ([] = heap_delete_max a), ([] = join p p a), ([] = carry p a), ([] = p ++ p), (smash a a = a), (Leaf = smash a a)
(rest_elems ++ rest_elems = rest_elems), (rest_elems ++ rest_elems = cons_elems), (rest_elems ++ rest_elems = elems2), (rest_elems ++ rest_elems = gv0), (rest_elems ++ cons_elems = rest_elems), (rest_elems ++ cons_elems = cons_elems), (rest_elems ++ cons_elems = elems2), (rest_elems ++ cons_elems = gv0), (rest_elems ++ elems2 = rest_elems), (rest_elems ++ elems2 = cons_elems)
(rest_elems ++ elems2 = elems2), (rest_elems ++ elems2 = gv0), (rest_elems ++ gv0 = rest_elems), (rest_elems ++ gv0 = cons_elems), (rest_elems ++ gv0 = elems2), (rest_elems ++ gv0 = gv0), (cons_elems ++ rest_elems = rest_elems), (cons_elems ++ rest_elems = cons_elems), (cons_elems ++ rest_elems = elems2), (cons_elems ++ rest_elems = gv0)
(cons_elems ++ cons_elems = rest_elems), (cons_elems ++ cons_elems = cons_elems), (cons_elems ++ cons_elems = elems2), (cons_elems ++ cons_elems = gv0), (cons_elems ++ elems2 = rest_elems), (cons_elems ++ elems2 = cons_elems), (cons_elems ++ elems2 = elems2), (cons_elems ++ elems2 = gv0), (cons_elems ++ gv0 = rest_elems), (cons_elems ++ gv0 = cons_elems)
(cons_elems ++ gv0 = elems2), (cons_elems ++ gv0 = gv0), (elems2 ++ rest_elems = rest_elems), (elems2 ++ rest_elems = cons_elems), (elems2 ++ rest_elems = elems2), (elems2 ++ rest_elems = gv0), (elems2 ++ cons_elems = rest_elems), (elems2 ++ cons_elems = cons_elems), (elems2 ++ cons_elems = elems2), (elems2 ++ cons_elems = gv0)
(elems2 ++ elems2 = rest_elems), (elems2 ++ elems2 = cons_elems), (elems2 ++ elems2 = elems2), (elems2 ++ elems2 = gv0), (elems2 ++ gv0 = rest_elems), (elems2 ++ gv0 = cons_elems), (elems2 ++ gv0 = elems2), (elems2 ++ gv0 = gv0), (gv0 ++ rest_elems = rest_elems), (gv0 ++ rest_elems = cons_elems)
(gv0 ++ rest_elems = elems2), (gv0 ++ rest_elems = gv0), (gv0 ++ cons_elems = rest_elems), (gv0 ++ cons_elems = cons_elems), (gv0 ++ cons_elems = elems2), (gv0 ++ cons_elems = gv0), (gv0 ++ elems2 = rest_elems), (gv0 ++ elems2 = cons_elems), (gv0 ++ elems2 = elems2), (gv0 ++ elems2 = gv0)
(gv0 ++ gv0 = rest_elems), (gv0 ++ gv0 = cons_elems), (gv0 ++ gv0 = elems2), (gv0 ++ gv0 = gv0), ([] = rest_elems), ([] = cons_elems), ([] = elems2), ([] = gv0), ([] = rest_elems ++ rest_elems), ([] = rest_elems ++ cons_elems)
([] = rest_elems ++ elems2), ([] = rest_elems ++ gv0), ([] = cons_elems ++ rest_elems), ([] = cons_elems ++ cons_elems), ([] = cons_elems ++ elems2), ([] = cons_elems ++ gv0), ([] = elems2 ++ rest_elems), ([] = elems2 ++ cons_elems), ([] = elems2 ++ elems2), ([] = elems2 ++ gv0)
([] = gv0 ++ rest_elems), ([] = gv0 ++ cons_elems), ([] = gv0 ++ elems2), ([] = gv0 ++ gv0), (None = find_max p), (None = Some a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 220.338 seconds


Label: 0 (0)
(Abs p rest_elems), (priqueue_elems p rest_elems), (Abs (p ++ p) (rest_elems ++ rest_elems)), (priqueue_elems (p ++ p) (rest_elems ++ rest_elems))

Label: 1 (1)
(tree_elems a cons_elems)

Label: 2 (2)
(Abs (carry p a) elems2), (priqueue_elems (carry p a) elems2), (Abs (a :: p) elems2), (priqueue_elems (a :: p) elems2)

Label: 3 (3)
(Permutation elems2 gv0), (Permutation gv0 elems2), (elems2 = gv0), (gv0 = elems2), (Abs (carry p a) gv0), (priqueue_elems (carry p a) gv0), (Abs (a :: p) gv0), (priqueue_elems (a :: p) gv0), (Permutation gv0 (rest_elems ++ cons_elems)), (Permutation gv0 (cons_elems ++ rest_elems))
(Permutation (rest_elems ++ cons_elems) gv0), (Permutation (cons_elems ++ rest_elems) gv0), (rest_elems ++ cons_elems = gv0), (cons_elems ++ rest_elems = gv0), (Abs (join p p a) (rest_elems ++ gv0)), (Abs (join p p a) (gv0 ++ rest_elems)), (priqueue_elems (join p p a) (rest_elems ++ gv0)), (priqueue_elems (join p p a) (gv0 ++ rest_elems)), (Permutation (elems2 ++ gv0) (gv0 ++ gv0)), (Permutation (gv0 ++ elems2) (gv0 ++ gv0))


------------------------------ ALL RESULTS ------------------------------
1. (priqueue_elems p rest_elems ->  tree_elems a cons_elems ->  priqueue_elems (a :: p) elems2 ->  Permutation (cons_elems ++ rest_elems) elems2)

2. (priqueue_elems (a :: p) elems2 -> Abs (carry p a) elems2)
(Abs (carry p a) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

3. (priqueue_elems (a :: p) elems2 -> priqueue_elems (carry p a) elems2)
(priqueue_elems (carry p a) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

4. (priqueue_elems p rest_elems -> Abs (p ++ p) (rest_elems ++ rest_elems))
(Abs (p ++ p) (rest_elems ++ rest_elems) ->  priqueue_elems (a :: p) elems2 ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

5. (priqueue_elems p rest_elems ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems))
(priqueue_elems (a :: p) elems2 ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems) ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

6. (elems2 = gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

7. (gv0 = elems2 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

8. (Abs (carry p a) gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

9. (priqueue_elems (a :: p) elems2 ->  priqueue_elems (carry p a) gv0 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

10. (Abs (a :: p) gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

11. (priqueue_elems (a :: p) elems2 ->  priqueue_elems (a :: p) gv0 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

12. (Permutation gv0 (rest_elems ++ cons_elems) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

13. (Permutation gv0 (cons_elems ++ rest_elems) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

14. (Permutation (rest_elems ++ cons_elems) gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

15. (Permutation (cons_elems ++ rest_elems) gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

16. (rest_elems ++ cons_elems = gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

17. (Abs (join p p a) (rest_elems ++ gv0) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

18. (Abs (join p p a) (gv0 ++ rest_elems) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

19. (priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  priqueue_elems (join p p a) (rest_elems ++ gv0) ->  tree_elems a cons_elems -> Permutation gv0 elems2)

20. (priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  priqueue_elems (join p p a) (gv0 ++ rest_elems) ->  tree_elems a cons_elems -> Permutation gv0 elems2)

21. (Permutation (elems2 ++ gv0) (gv0 ++ gv0) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)

22. (Permutation (gv0 ++ elems2) (gv0 ++ gv0) ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 291.531 seconds

Number of Result Pairs Returned: 22

1. (priqueue_elems p rest_elems ->  tree_elems a cons_elems ->  priqueue_elems (a :: p) elems2 ->  Permutation (cons_elems ++ rest_elems) elems2)

2. (priqueue_elems (a :: p) elems2 -> Abs (carry p a) elems2)
(Abs (carry p a) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

3. (priqueue_elems p rest_elems -> Abs (p ++ p) (rest_elems ++ rest_elems))
(Abs (p ++ p) (rest_elems ++ rest_elems) ->  priqueue_elems (a :: p) elems2 ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

4. (priqueue_elems p rest_elems ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems))
(priqueue_elems (a :: p) elems2 ->  priqueue_elems (p ++ p) (rest_elems ++ rest_elems) ->  tree_elems a cons_elems -> Permutation (cons_elems ++ rest_elems) elems2)

5. (elems2 = gv0 ->  priqueue_elems (a :: p) elems2 ->  priqueue_elems p rest_elems ->  tree_elems a cons_elems -> Permutation gv0 elems2)
