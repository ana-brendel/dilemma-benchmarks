Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Permutation elems2 (cons_elems0 ++ rest_elems0))
 -- (priqueue_elems p rest_elems)
 -- (Permutation elems1 (cons_elems ++ rest_elems))
 -- (priqueue_elems p rest_elems0)
 -- (forall elems1 elems2 : list nat,
 priqueue_elems p elems1 ->
 priqueue_elems p elems2 -> Permutation elems1 elems2)
 -- (tree_elems a cons_elems0)
 -- (tree_elems a cons_elems)
 -- (priqueue_elems (a :: p) elems1)
 -- (priqueue_elems (a :: p) elems2)

----------------------------------
Goal: (Permutation cons_elems cons_elems0)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.717 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 72.254 seconds

Label: Generalization #0
Assumptions: 
 -- (tree_elems a cons_elems0)
 -- (tree_elems a cons_elems)

----------------------------------
Goal: (Permutation cons_elems cons_elems0)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 72.39 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (tree_elems a cons_elems0)
Positive Examples: 154
Negative Examples: 160

Label: 1 (1)
Abducted Assumption: (tree_elems a cons_elems)
Positive Examples: 168
Negative Examples: 146


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 72.532 seconds


Label: 0 (0)
(tree_elems a cons_elems0), (tree_elems a cons_elems), (Permutation cons_elems0 cons_elems0), (Permutation cons_elems0 cons_elems), (Permutation cons_elems cons_elems0), (Permutation cons_elems cons_elems), (a = a), (cons_elems0 = cons_elems0), (cons_elems0 = cons_elems), (cons_elems = cons_elems0)
(cons_elems = cons_elems), (Abs (heap_delete_max a) cons_elems0), (Abs (heap_delete_max a) cons_elems), (Abs (heap_delete_max a) (cons_elems0 ++ cons_elems0)), (Abs (heap_delete_max a) (cons_elems0 ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems0)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems)), (Abs (heap_delete_max a) []), (Abs [] cons_elems0), (Abs [] cons_elems)
(Abs [] (cons_elems0 ++ cons_elems0)), (Abs [] (cons_elems0 ++ cons_elems)), (Abs [] (cons_elems ++ cons_elems0)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] []), (priqueue_elems (heap_delete_max a) cons_elems0), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) (cons_elems0 ++ cons_elems0)), (priqueue_elems (heap_delete_max a) (cons_elems0 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems0))
(priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems [] cons_elems0), (priqueue_elems [] cons_elems), (priqueue_elems [] (cons_elems0 ++ cons_elems0)), (priqueue_elems [] (cons_elems0 ++ cons_elems)), (priqueue_elems [] (cons_elems ++ cons_elems0)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] []), (tree_elems a (cons_elems0 ++ cons_elems0))
(tree_elems a (cons_elems0 ++ cons_elems)), (tree_elems a (cons_elems ++ cons_elems0)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a []), (tree_elems (smash a a) cons_elems0), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) (cons_elems0 ++ cons_elems0)), (tree_elems (smash a a) (cons_elems0 ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems0)), (tree_elems (smash a a) (cons_elems ++ cons_elems))
(tree_elems (smash a a) []), (tree_elems Leaf cons_elems0), (tree_elems Leaf cons_elems), (tree_elems Leaf (cons_elems0 ++ cons_elems0)), (tree_elems Leaf (cons_elems0 ++ cons_elems)), (tree_elems Leaf (cons_elems ++ cons_elems0)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf []), (priq (heap_delete_max a)), (priqq (length cons_elems0) (heap_delete_max a))
(priqq (length cons_elems) (heap_delete_max a)), (pow2heap (length cons_elems0) a), (pow2heap (length cons_elems0) (smash a a)), (pow2heap (length cons_elems) a), (pow2heap (length cons_elems) (smash a a)), (pow2heapp (length cons_elems0) (length cons_elems0) a), (pow2heapp (length cons_elems0) (length cons_elems0) (smash a a)), (pow2heapp (length cons_elems0) (length cons_elems0) Leaf), (pow2heapp (length cons_elems0) (length cons_elems) a), (pow2heapp (length cons_elems0) (length cons_elems) (smash a a))
(pow2heapp (length cons_elems0) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems0) a), (pow2heapp (length cons_elems) (length cons_elems0) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems0) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (Permutation (heap_delete_max a) []), (Permutation [] (heap_delete_max a)), (Permutation cons_elems0 (cons_elems0 ++ cons_elems0))
(Permutation cons_elems0 (cons_elems0 ++ cons_elems)), (Permutation cons_elems0 (cons_elems ++ cons_elems0)), (Permutation cons_elems0 (cons_elems ++ cons_elems)), (Permutation cons_elems0 []), (Permutation cons_elems (cons_elems0 ++ cons_elems0)), (Permutation cons_elems (cons_elems0 ++ cons_elems)), (Permutation cons_elems (cons_elems ++ cons_elems0)), (Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems []), (Permutation (cons_elems0 ++ cons_elems0) cons_elems0)
(Permutation (cons_elems0 ++ cons_elems0) cons_elems), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems ++ cons_elems)), (Permutation (cons_elems0 ++ cons_elems0) []), (Permutation (cons_elems0 ++ cons_elems) cons_elems0), (Permutation (cons_elems0 ++ cons_elems) cons_elems), (Permutation (cons_elems0 ++ cons_elems) (cons_elems0 ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems) (cons_elems ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems) (cons_elems ++ cons_elems))
(Permutation (cons_elems0 ++ cons_elems) []), (Permutation (cons_elems ++ cons_elems0) cons_elems0), (Permutation (cons_elems ++ cons_elems0) cons_elems), (Permutation (cons_elems ++ cons_elems0) (cons_elems0 ++ cons_elems0)), (Permutation (cons_elems ++ cons_elems0) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems0) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems0) []), (Permutation (cons_elems ++ cons_elems) cons_elems0), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) (cons_elems0 ++ cons_elems0))
(Permutation (cons_elems ++ cons_elems) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ cons_elems0)), (Permutation (cons_elems ++ cons_elems) []), (Permutation [] cons_elems0), (Permutation [] cons_elems), (Permutation [] (cons_elems0 ++ cons_elems0)), (Permutation [] (cons_elems0 ++ cons_elems)), (Permutation [] (cons_elems ++ cons_elems0)), (Permutation [] (cons_elems ++ cons_elems)), (In a (heap_delete_max a))
(In (smash a a) (heap_delete_max a)), (In Leaf (heap_delete_max a)), (In (length cons_elems0) cons_elems0), (In (length cons_elems0) cons_elems), (In (length cons_elems0) (cons_elems0 ++ cons_elems0)), (In (length cons_elems0) (cons_elems0 ++ cons_elems)), (In (length cons_elems0) (cons_elems ++ cons_elems0)), (In (length cons_elems0) (cons_elems ++ cons_elems)), (In (length cons_elems) cons_elems0), (In (length cons_elems) cons_elems)
(In (length cons_elems) (cons_elems0 ++ cons_elems0)), (In (length cons_elems) (cons_elems0 ++ cons_elems)), (In (length cons_elems) (cons_elems ++ cons_elems0)), (In (length cons_elems) (cons_elems ++ cons_elems)), (length cons_elems0 < length cons_elems), (length cons_elems < length cons_elems0), (length cons_elems0 <= length cons_elems), (length cons_elems <= length cons_elems0), (~ tree_elems a cons_elems0), (~ tree_elems a cons_elems)
(~ Permutation cons_elems0 cons_elems0), (~ Permutation cons_elems0 cons_elems), (~ Permutation cons_elems cons_elems0), (~ Permutation cons_elems cons_elems), (a <> a), (cons_elems0 <> cons_elems0), (cons_elems0 <> cons_elems), (cons_elems <> cons_elems0), (cons_elems <> cons_elems), (None = Some cons_elems0)
(None = Some cons_elems), ([] = heap_delete_max a), (smash a a = a), (Leaf = smash a a), (cons_elems0 ++ cons_elems0 = cons_elems0), (cons_elems0 ++ cons_elems0 = cons_elems), (cons_elems0 ++ cons_elems = cons_elems0), (cons_elems0 ++ cons_elems = cons_elems), (cons_elems ++ cons_elems0 = cons_elems0), (cons_elems ++ cons_elems0 = cons_elems)
(cons_elems ++ cons_elems = cons_elems0), (cons_elems ++ cons_elems = cons_elems), ([] = cons_elems0), ([] = cons_elems), ([] = cons_elems0 ++ cons_elems0), ([] = cons_elems0 ++ cons_elems), ([] = cons_elems ++ cons_elems0), ([] = cons_elems ++ cons_elems), (None = Some a)

Label: 1 (1)
(tree_elems a cons_elems0), (tree_elems a cons_elems), (Permutation cons_elems0 cons_elems0), (Permutation cons_elems0 cons_elems), (Permutation cons_elems cons_elems0), (Permutation cons_elems cons_elems), (a = a), (cons_elems0 = cons_elems0), (cons_elems0 = cons_elems), (cons_elems = cons_elems0)
(cons_elems = cons_elems), (Abs (heap_delete_max a) cons_elems0), (Abs (heap_delete_max a) cons_elems), (Abs (heap_delete_max a) (cons_elems0 ++ cons_elems0)), (Abs (heap_delete_max a) (cons_elems0 ++ cons_elems)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems0)), (Abs (heap_delete_max a) (cons_elems ++ cons_elems)), (Abs (heap_delete_max a) []), (Abs [] cons_elems0), (Abs [] cons_elems)
(Abs [] (cons_elems0 ++ cons_elems0)), (Abs [] (cons_elems0 ++ cons_elems)), (Abs [] (cons_elems ++ cons_elems0)), (Abs [] (cons_elems ++ cons_elems)), (Abs [] []), (priqueue_elems (heap_delete_max a) cons_elems0), (priqueue_elems (heap_delete_max a) cons_elems), (priqueue_elems (heap_delete_max a) (cons_elems0 ++ cons_elems0)), (priqueue_elems (heap_delete_max a) (cons_elems0 ++ cons_elems)), (priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems0))
(priqueue_elems (heap_delete_max a) (cons_elems ++ cons_elems)), (priqueue_elems (heap_delete_max a) []), (priqueue_elems [] cons_elems0), (priqueue_elems [] cons_elems), (priqueue_elems [] (cons_elems0 ++ cons_elems0)), (priqueue_elems [] (cons_elems0 ++ cons_elems)), (priqueue_elems [] (cons_elems ++ cons_elems0)), (priqueue_elems [] (cons_elems ++ cons_elems)), (priqueue_elems [] []), (tree_elems a (cons_elems0 ++ cons_elems0))
(tree_elems a (cons_elems0 ++ cons_elems)), (tree_elems a (cons_elems ++ cons_elems0)), (tree_elems a (cons_elems ++ cons_elems)), (tree_elems a []), (tree_elems (smash a a) cons_elems0), (tree_elems (smash a a) cons_elems), (tree_elems (smash a a) (cons_elems0 ++ cons_elems0)), (tree_elems (smash a a) (cons_elems0 ++ cons_elems)), (tree_elems (smash a a) (cons_elems ++ cons_elems0)), (tree_elems (smash a a) (cons_elems ++ cons_elems))
(tree_elems (smash a a) []), (tree_elems Leaf cons_elems0), (tree_elems Leaf cons_elems), (tree_elems Leaf (cons_elems0 ++ cons_elems0)), (tree_elems Leaf (cons_elems0 ++ cons_elems)), (tree_elems Leaf (cons_elems ++ cons_elems0)), (tree_elems Leaf (cons_elems ++ cons_elems)), (tree_elems Leaf []), (priq (heap_delete_max a)), (priqq (length cons_elems0) (heap_delete_max a))
(priqq (length cons_elems) (heap_delete_max a)), (pow2heap (length cons_elems0) a), (pow2heap (length cons_elems0) (smash a a)), (pow2heap (length cons_elems) a), (pow2heap (length cons_elems) (smash a a)), (pow2heapp (length cons_elems0) (length cons_elems0) a), (pow2heapp (length cons_elems0) (length cons_elems0) (smash a a)), (pow2heapp (length cons_elems0) (length cons_elems0) Leaf), (pow2heapp (length cons_elems0) (length cons_elems) a), (pow2heapp (length cons_elems0) (length cons_elems) (smash a a))
(pow2heapp (length cons_elems0) (length cons_elems) Leaf), (pow2heapp (length cons_elems) (length cons_elems0) a), (pow2heapp (length cons_elems) (length cons_elems0) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems0) Leaf), (pow2heapp (length cons_elems) (length cons_elems) a), (pow2heapp (length cons_elems) (length cons_elems) (smash a a)), (pow2heapp (length cons_elems) (length cons_elems) Leaf), (Permutation (heap_delete_max a) []), (Permutation [] (heap_delete_max a)), (Permutation cons_elems0 (cons_elems0 ++ cons_elems0))
(Permutation cons_elems0 (cons_elems0 ++ cons_elems)), (Permutation cons_elems0 (cons_elems ++ cons_elems0)), (Permutation cons_elems0 (cons_elems ++ cons_elems)), (Permutation cons_elems0 []), (Permutation cons_elems (cons_elems0 ++ cons_elems0)), (Permutation cons_elems (cons_elems0 ++ cons_elems)), (Permutation cons_elems (cons_elems ++ cons_elems0)), (Permutation cons_elems (cons_elems ++ cons_elems)), (Permutation cons_elems []), (Permutation (cons_elems0 ++ cons_elems0) cons_elems0)
(Permutation (cons_elems0 ++ cons_elems0) cons_elems), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems0) (cons_elems ++ cons_elems)), (Permutation (cons_elems0 ++ cons_elems0) []), (Permutation (cons_elems0 ++ cons_elems) cons_elems0), (Permutation (cons_elems0 ++ cons_elems) cons_elems), (Permutation (cons_elems0 ++ cons_elems) (cons_elems0 ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems) (cons_elems ++ cons_elems0)), (Permutation (cons_elems0 ++ cons_elems) (cons_elems ++ cons_elems))
(Permutation (cons_elems0 ++ cons_elems) []), (Permutation (cons_elems ++ cons_elems0) cons_elems0), (Permutation (cons_elems ++ cons_elems0) cons_elems), (Permutation (cons_elems ++ cons_elems0) (cons_elems0 ++ cons_elems0)), (Permutation (cons_elems ++ cons_elems0) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems0) (cons_elems ++ cons_elems)), (Permutation (cons_elems ++ cons_elems0) []), (Permutation (cons_elems ++ cons_elems) cons_elems0), (Permutation (cons_elems ++ cons_elems) cons_elems), (Permutation (cons_elems ++ cons_elems) (cons_elems0 ++ cons_elems0))
(Permutation (cons_elems ++ cons_elems) (cons_elems0 ++ cons_elems)), (Permutation (cons_elems ++ cons_elems) (cons_elems ++ cons_elems0)), (Permutation (cons_elems ++ cons_elems) []), (Permutation [] cons_elems0), (Permutation [] cons_elems), (Permutation [] (cons_elems0 ++ cons_elems0)), (Permutation [] (cons_elems0 ++ cons_elems)), (Permutation [] (cons_elems ++ cons_elems0)), (Permutation [] (cons_elems ++ cons_elems)), (In a (heap_delete_max a))
(In (smash a a) (heap_delete_max a)), (In Leaf (heap_delete_max a)), (In (length cons_elems0) cons_elems0), (In (length cons_elems0) cons_elems), (In (length cons_elems0) (cons_elems0 ++ cons_elems0)), (In (length cons_elems0) (cons_elems0 ++ cons_elems)), (In (length cons_elems0) (cons_elems ++ cons_elems0)), (In (length cons_elems0) (cons_elems ++ cons_elems)), (In (length cons_elems) cons_elems0), (In (length cons_elems) cons_elems)
(In (length cons_elems) (cons_elems0 ++ cons_elems0)), (In (length cons_elems) (cons_elems0 ++ cons_elems)), (In (length cons_elems) (cons_elems ++ cons_elems0)), (In (length cons_elems) (cons_elems ++ cons_elems)), (length cons_elems0 < length cons_elems), (length cons_elems < length cons_elems0), (length cons_elems0 <= length cons_elems), (length cons_elems <= length cons_elems0), (~ tree_elems a cons_elems0), (~ tree_elems a cons_elems)
(~ Permutation cons_elems0 cons_elems0), (~ Permutation cons_elems0 cons_elems), (~ Permutation cons_elems cons_elems0), (~ Permutation cons_elems cons_elems), (a <> a), (cons_elems0 <> cons_elems0), (cons_elems0 <> cons_elems), (cons_elems <> cons_elems0), (cons_elems <> cons_elems), (None = Some cons_elems0)
(None = Some cons_elems), ([] = heap_delete_max a), (smash a a = a), (Leaf = smash a a), (cons_elems0 ++ cons_elems0 = cons_elems0), (cons_elems0 ++ cons_elems0 = cons_elems), (cons_elems0 ++ cons_elems = cons_elems0), (cons_elems0 ++ cons_elems = cons_elems), (cons_elems ++ cons_elems0 = cons_elems0), (cons_elems ++ cons_elems0 = cons_elems)
(cons_elems ++ cons_elems = cons_elems0), (cons_elems ++ cons_elems = cons_elems), ([] = cons_elems0), ([] = cons_elems), ([] = cons_elems0 ++ cons_elems0), ([] = cons_elems0 ++ cons_elems), ([] = cons_elems ++ cons_elems0), ([] = cons_elems ++ cons_elems), (None = Some a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 80.481 seconds


Label: 0 (0)
(tree_elems a cons_elems0)

Label: 1 (1)
(tree_elems a cons_elems)






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 91.242 seconds

Number of Result Pairs Returned: 1

1. (tree_elems a cons_elems0 ->  tree_elems a cons_elems -> Permutation cons_elems cons_elems0)
