Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (priqq 0 (Leaf :: q))
 -- (priqq 0 q -> priqq 0 (carry q (Node x Leaf Leaf)))

----------------------------------
Goal: (priqq 0 (carry (Leaf :: q) (Node x Leaf Leaf)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.454 seconds

gv1 : (list tree) = (carry (Leaf :: q) (Node x Leaf Leaf))
gv2 : (list tree) = (Leaf :: q)
gv0 : nat = 0
gv4 : tree = (Node x Leaf Leaf)
gv3 : tree = Leaf


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 223.518 seconds

Label: Generalization #0
Assumptions: 
 -- (priqq 0 (Leaf :: q))

----------------------------------
Goal: (priqq 0 (carry (Leaf :: q) (Node x Leaf Leaf)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (priqq 0 (Leaf :: q))
 -- (Node x Leaf Leaf = gv4)

----------------------------------
Goal: (priqq 0 (carry (Leaf :: q) gv4))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (priqq 0 (gv3 :: q))

----------------------------------
Goal: (priqq 0 (carry (gv3 :: q) (Node x gv3 gv3)))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (priqq 0 (gv3 :: q))
 -- (Node x gv3 gv3 = gv4)
 -- (Leaf = gv3)

----------------------------------
Goal: (priqq 0 (carry (gv3 :: q) gv4))
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (priqq gv0 (gv3 :: q))
 -- (Leaf = gv3)
 -- (0 = gv0)

----------------------------------
Goal: (priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))
Case: Invalid and Generalized

Label: Generalization #8
Assumptions: 
 -- (priqq 0 gv2)
 -- (Leaf = gv3)
 -- (gv3 :: q = gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 (Node x gv3 gv3)))
Case: Invalid and Generalized

Label: Generalization #9
Assumptions: 
 -- (priqq 0 (gv3 :: q))
 -- (carry (gv3 :: q) (Node x gv3 gv3) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized

Label: Generalization #10
Assumptions: 
 -- (priqq gv0 (Leaf :: q))
 -- (0 = gv0)

----------------------------------
Goal: (priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))
Case: Invalid and Generalized

Label: Generalization #11
Assumptions: 
 -- (priqq 0 gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 (Node x Leaf Leaf)))
Case: Valid and Generalized

Label: Generalization #12
Assumptions: 
 -- (priqq 0 gv2)
 -- (Node x Leaf Leaf = gv4)
 -- (Leaf :: q = gv2)

----------------------------------
Goal: (priqq 0 (carry gv2 gv4))
Case: Invalid and Generalized

Label: Generalization #13
Assumptions: 
 -- (priqq gv0 gv2)
 -- (0 = gv0)
 -- (Leaf :: q = gv2)

----------------------------------
Goal: (priqq gv0 (carry gv2 (Node x Leaf Leaf)))
Case: Invalid and Generalized

Label: Generalization #14
Assumptions: 
 -- (priqq 0 gv2)
 -- (carry gv2 (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized

Label: Generalization #15
Assumptions: 
 -- (priqq 0 (Leaf :: q))
 -- (carry (Leaf :: q) (Node x Leaf Leaf) = gv1)

----------------------------------
Goal: (priqq 0 gv1)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 223.775 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (priqq 0 (Leaf :: q))
Positive Examples: 63
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 256
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 297
Negative Examples: 304

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 283
Negative Examples: 62

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 68
Negative Examples: 500

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 74
Negative Examples: 390

Label: 6 (6)
Inferring Condition About Generalization
Positive Examples: 120
Negative Examples: 96

Label: 7 (7)
Inferring Condition About Generalization
Positive Examples: 313
Negative Examples: 500

Label: 8 (8)
Inferring Condition About Generalization
Positive Examples: 272
Negative Examples: 500

Label: 9 (9)
Inferring Condition About Generalization
Positive Examples: 265
Negative Examples: 500

Label: 10 (10)
Inferring Condition About Generalization
Positive Examples: 243
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 224.093 seconds


Label: 0 (0)
(priq q), (priqq x q), (Permutation q q), (x < x), (x <= x), (x = x), (q = q), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x))
(true = (x >=? x)), (Abs q []), (Abs (merge q q) []), (Abs (insert x q) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems (merge q q) []), (priqueue_elems (insert x q) []), (priqueue_elems (q ++ q) [])
(priqueue_elems [] []), (tree_elems Leaf []), (priq (merge q q)), (priq (insert x q)), (priq (q ++ q)), (priqq x (merge q q)), (priqq x (insert x q)), (priqq x (q ++ q)), (priqq (find_max' x q) q), (priqq (find_max' x q) (merge q q))
(priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (q ++ q)), (priqq (length q) q), (priqq (length q) (merge q q)), (priqq (length q) (insert x q)), (priqq (length q) (q ++ q)), (pow2heapp x x Leaf), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (length q) Leaf), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (length q) Leaf), (Permutation q (merge q q)), (Permutation q (insert x q)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (merge q q) q)
(Permutation (merge q q) (insert x q)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (insert x q) q), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (insert x q))
(Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (merge q q)), (Permutation [] (insert x q)), (Permutation [] (q ++ q)), (In Leaf q), (In Leaf (merge q q)), (In Leaf (insert x q)), (In Leaf (q ++ q)), (x < find_max' x q)
(x < length q), (find_max' x q < x), (find_max' x q < length q), (length q < x), (length q < find_max' x q), (x <= find_max' x q), (x <= length q), (find_max' x q <= x), (find_max' x q <= length q), (length q <= x)
(length q <= find_max' x q), (~ priq q), (~ priqq x q), (~ Permutation q q), (~ x < x), (~ x <= x), (x <> x), (q <> q), (None = Some q), (merge q q = q)
(merge q q = insert x q), (merge q q = q ++ q), (insert x q = q), (insert x q = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = insert x q), ([] = q ++ q), ((q, q) = delete_max_aux x q)
(find_max' x q = x), (length q = x), (length q = find_max' x q), (Some x = find_max q), (None = Some x), (None = find_max q), ((x >? x) = (x >=? x))

Label: 1 (1)
(priq q), (priqq x q), (pow2heap x gv4), (pow2heapp x x gv4), (Permutation q q), (In gv4 q), (x < x), (x <= x), (x = x), (gv4 = gv4)
(q = q), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q []), (Abs (gv4 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max gv4) []), (Abs (join q q gv4) [])
(Abs (insert x q) []), (Abs (carry q gv4) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems (gv4 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max gv4) []), (priqueue_elems (join q q gv4) []), (priqueue_elems (insert x q) [])
(priqueue_elems (carry q gv4) []), (priqueue_elems (q ++ q) []), (priqueue_elems [] []), (tree_elems gv4 []), (tree_elems (Node x gv4 gv4) []), (tree_elems (smash gv4 gv4) []), (tree_elems Leaf []), (priq (gv4 :: q)), (priq (merge q q)), (priq (heap_delete_max gv4))
(priq (join q q gv4)), (priq (insert x q)), (priq (carry q gv4)), (priq (q ++ q)), (priqq x (gv4 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max gv4)), (priqq x (join q q gv4)), (priqq x (insert x q)), (priqq x (carry q gv4))
(priqq x (q ++ q)), (priqq (find_max' x q) q), (priqq (find_max' x q) (gv4 :: q)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (heap_delete_max gv4)), (priqq (find_max' x q) (join q q gv4)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (carry q gv4)), (priqq (find_max' x q) (q ++ q)), (priqq (length q) q)
(priqq (length q) (gv4 :: q)), (priqq (length q) (merge q q)), (priqq (length q) (heap_delete_max gv4)), (priqq (length q) (join q q gv4)), (priqq (length q) (insert x q)), (priqq (length q) (carry q gv4)), (priqq (length q) (q ++ q)), (pow2heap x (Node x gv4 gv4)), (pow2heap x (smash gv4 gv4)), (pow2heap (find_max' x q) gv4)
(pow2heap (find_max' x q) (Node x gv4 gv4)), (pow2heap (find_max' x q) (smash gv4 gv4)), (pow2heap (length q) gv4), (pow2heap (length q) (Node x gv4 gv4)), (pow2heap (length q) (smash gv4 gv4)), (pow2heapp x x (Node x gv4 gv4)), (pow2heapp x x (smash gv4 gv4)), (pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv4), (pow2heapp x (find_max' x q) (Node x gv4 gv4))
(pow2heapp x (find_max' x q) (smash gv4 gv4)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (length q) gv4), (pow2heapp x (length q) (Node x gv4 gv4)), (pow2heapp x (length q) (smash gv4 gv4)), (pow2heapp x (length q) Leaf), (pow2heapp (find_max' x q) x gv4), (pow2heapp (find_max' x q) x (Node x gv4 gv4)), (pow2heapp (find_max' x q) x (smash gv4 gv4)), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) (find_max' x q) gv4), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (length q) gv4), (pow2heapp (find_max' x q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (length q) x gv4), (pow2heapp (length q) x (Node x gv4 gv4))
(pow2heapp (length q) x (smash gv4 gv4)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv4), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (length q) gv4), (pow2heapp (length q) (length q) (Node x gv4 gv4)), (pow2heapp (length q) (length q) (smash gv4 gv4)), (pow2heapp (length q) (length q) Leaf)
(Permutation q (gv4 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max gv4)), (Permutation q (join q q gv4)), (Permutation q (insert x q)), (Permutation q (carry q gv4)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (gv4 :: q) q), (Permutation (gv4 :: q) (merge q q))
(Permutation (gv4 :: q) (heap_delete_max gv4)), (Permutation (gv4 :: q) (join q q gv4)), (Permutation (gv4 :: q) (insert x q)), (Permutation (gv4 :: q) (carry q gv4)), (Permutation (gv4 :: q) (q ++ q)), (Permutation (gv4 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (gv4 :: q)), (Permutation (merge q q) (heap_delete_max gv4)), (Permutation (merge q q) (join q q gv4))
(Permutation (merge q q) (insert x q)), (Permutation (merge q q) (carry q gv4)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max gv4) q), (Permutation (heap_delete_max gv4) (gv4 :: q)), (Permutation (heap_delete_max gv4) (merge q q)), (Permutation (heap_delete_max gv4) (join q q gv4)), (Permutation (heap_delete_max gv4) (insert x q)), (Permutation (heap_delete_max gv4) (carry q gv4))
(Permutation (heap_delete_max gv4) (q ++ q)), (Permutation (heap_delete_max gv4) []), (Permutation (join q q gv4) q), (Permutation (join q q gv4) (gv4 :: q)), (Permutation (join q q gv4) (merge q q)), (Permutation (join q q gv4) (heap_delete_max gv4)), (Permutation (join q q gv4) (insert x q)), (Permutation (join q q gv4) (carry q gv4)), (Permutation (join q q gv4) (q ++ q)), (Permutation (join q q gv4) [])
(Permutation (insert x q) q), (Permutation (insert x q) (gv4 :: q)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (heap_delete_max gv4)), (Permutation (insert x q) (join q q gv4)), (Permutation (insert x q) (carry q gv4)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (carry q gv4) q), (Permutation (carry q gv4) (gv4 :: q))
(Permutation (carry q gv4) (merge q q)), (Permutation (carry q gv4) (heap_delete_max gv4)), (Permutation (carry q gv4) (join q q gv4)), (Permutation (carry q gv4) (insert x q)), (Permutation (carry q gv4) (q ++ q)), (Permutation (carry q gv4) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (gv4 :: q)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max gv4))
(Permutation (q ++ q) (join q q gv4)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (carry q gv4)), (Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (gv4 :: q)), (Permutation [] (merge q q)), (Permutation [] (heap_delete_max gv4)), (Permutation [] (join q q gv4)), (Permutation [] (insert x q))
(Permutation [] (carry q gv4)), (Permutation [] (q ++ q)), (In gv4 (gv4 :: q)), (In gv4 (merge q q)), (In gv4 (heap_delete_max gv4)), (In gv4 (join q q gv4)), (In gv4 (insert x q)), (In gv4 (carry q gv4)), (In gv4 (q ++ q)), (In (Node x gv4 gv4) q)
(In (Node x gv4 gv4) (gv4 :: q)), (In (Node x gv4 gv4) (merge q q)), (In (Node x gv4 gv4) (heap_delete_max gv4)), (In (Node x gv4 gv4) (join q q gv4)), (In (Node x gv4 gv4) (insert x q)), (In (Node x gv4 gv4) (carry q gv4)), (In (Node x gv4 gv4) (q ++ q)), (In (smash gv4 gv4) q), (In (smash gv4 gv4) (gv4 :: q)), (In (smash gv4 gv4) (merge q q))
(In (smash gv4 gv4) (heap_delete_max gv4)), (In (smash gv4 gv4) (join q q gv4)), (In (smash gv4 gv4) (insert x q)), (In (smash gv4 gv4) (carry q gv4)), (In (smash gv4 gv4) (q ++ q)), (In Leaf q), (In Leaf (gv4 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max gv4)), (In Leaf (join q q gv4))
(In Leaf (insert x q)), (In Leaf (carry q gv4)), (In Leaf (q ++ q)), (x < find_max' x q), (x < length q), (find_max' x q < x), (find_max' x q < length q), (length q < x), (length q < find_max' x q), (x <= find_max' x q)
(x <= length q), (find_max' x q <= x), (find_max' x q <= length q), (length q <= x), (length q <= find_max' x q), (~ priq q), (~ priqq x q), (~ pow2heap x gv4), (~ pow2heapp x x gv4), (~ Permutation q q)
(~ In gv4 q), (~ x < x), (~ x <= x), (x <> x), (gv4 <> gv4), (q <> q), (None = Some q), (gv4 :: q = q), (gv4 :: q = merge q q), (gv4 :: q = heap_delete_max gv4)
(gv4 :: q = join q q gv4), (gv4 :: q = insert x q), (gv4 :: q = carry q gv4), (gv4 :: q = q ++ q), (gv4 :: q = []), (merge q q = q), (merge q q = heap_delete_max gv4), (merge q q = join q q gv4), (merge q q = insert x q), (merge q q = carry q gv4)
(merge q q = q ++ q), (heap_delete_max gv4 = q), (heap_delete_max gv4 = carry q gv4), (heap_delete_max gv4 = q ++ q), (join q q gv4 = q), (join q q gv4 = heap_delete_max gv4), (join q q gv4 = insert x q), (join q q gv4 = carry q gv4), (join q q gv4 = q ++ q), (insert x q = q)
(insert x q = heap_delete_max gv4), (insert x q = carry q gv4), (insert x q = q ++ q), (carry q gv4 = q), (carry q gv4 = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = heap_delete_max gv4), ([] = join q q gv4)
([] = insert x q), ([] = carry q gv4), ([] = q ++ q), ((q, q) = delete_max_aux x q), (Node x gv4 gv4 = gv4), (Node x gv4 gv4 = smash gv4 gv4), (smash gv4 gv4 = gv4), (Leaf = Node x gv4 gv4), (Leaf = smash gv4 gv4), (find_max' x q = x)
(length q = x), (length q = find_max' x q), (Some x = find_max q), (None = Some x), (None = find_max q), (None = Some gv4), ((x >? x) = (x >=? x))

Label: 2 (2)
(priq q), (priqq x q), (pow2heap x gv4), (pow2heap x gv3), (pow2heapp x x gv4), (pow2heapp x x gv3), (Permutation q q), (In gv4 q), (In gv3 q), (x < x)
(x <= x), (x = x), (q = q), (gv4 = gv4), (gv4 = gv3), (gv3 = gv4), (gv3 = gv3), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x))
(true = (x >=? x)), (Abs q []), (Abs (gv4 :: q) []), (Abs (gv3 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max gv4) []), (Abs (heap_delete_max gv3) []), (Abs (join q q gv4) []), (Abs (join q q gv3) []), (Abs (insert x q) [])
(Abs (carry q gv4) []), (Abs (carry q gv3) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems (gv4 :: q) []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max gv4) []), (priqueue_elems (heap_delete_max gv3) [])
(priqueue_elems (join q q gv4) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (insert x q) []), (priqueue_elems (carry q gv4) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (q ++ q) []), (priqueue_elems [] []), (tree_elems gv4 []), (tree_elems gv3 []), (tree_elems (Node x gv4 gv4) [])
(tree_elems (Node x gv4 gv3) []), (tree_elems (Node x gv3 gv4) []), (tree_elems (Node x gv3 gv3) []), (tree_elems (smash gv4 gv4) []), (tree_elems (smash gv4 gv3) []), (tree_elems (smash gv3 gv4) []), (tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (gv4 :: q)), (priq (gv3 :: q))
(priq (merge q q)), (priq (heap_delete_max gv4)), (priq (heap_delete_max gv3)), (priq (join q q gv4)), (priq (join q q gv3)), (priq (insert x q)), (priq (carry q gv4)), (priq (carry q gv3)), (priq (q ++ q)), (priqq x (gv4 :: q))
(priqq x (gv3 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max gv4)), (priqq x (heap_delete_max gv3)), (priqq x (join q q gv4)), (priqq x (join q q gv3)), (priqq x (insert x q)), (priqq x (carry q gv4)), (priqq x (carry q gv3)), (priqq x (q ++ q))
(priqq (find_max' x q) q), (priqq (find_max' x q) (gv4 :: q)), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (heap_delete_max gv4)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q gv4)), (priqq (find_max' x q) (join q q gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (carry q gv4))
(priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (length q) q), (priqq (length q) (gv4 :: q)), (priqq (length q) (gv3 :: q)), (priqq (length q) (merge q q)), (priqq (length q) (heap_delete_max gv4)), (priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q gv4)), (priqq (length q) (join q q gv3))
(priqq (length q) (insert x q)), (priqq (length q) (carry q gv4)), (priqq (length q) (carry q gv3)), (priqq (length q) (q ++ q)), (pow2heap x (Node x gv4 gv4)), (pow2heap x (Node x gv4 gv3)), (pow2heap x (Node x gv3 gv4)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (smash gv4 gv4)), (pow2heap x (smash gv4 gv3))
(pow2heap x (smash gv3 gv4)), (pow2heap x (smash gv3 gv3)), (pow2heap (find_max' x q) gv4), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x gv4 gv4)), (pow2heap (find_max' x q) (Node x gv4 gv3)), (pow2heap (find_max' x q) (Node x gv3 gv4)), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (smash gv4 gv4)), (pow2heap (find_max' x q) (smash gv4 gv3))
(pow2heap (find_max' x q) (smash gv3 gv4)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (length q) gv4), (pow2heap (length q) gv3), (pow2heap (length q) (Node x gv4 gv4)), (pow2heap (length q) (Node x gv4 gv3)), (pow2heap (length q) (Node x gv3 gv4)), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (smash gv4 gv4)), (pow2heap (length q) (smash gv4 gv3))
(pow2heap (length q) (smash gv3 gv4)), (pow2heap (length q) (smash gv3 gv3)), (pow2heapp x x (Node x gv4 gv4)), (pow2heapp x x (Node x gv4 gv3)), (pow2heapp x x (Node x gv3 gv4)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (smash gv4 gv4)), (pow2heapp x x (smash gv4 gv3)), (pow2heapp x x (smash gv3 gv4)), (pow2heapp x x (smash gv3 gv3))
(pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv4), (pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x gv4 gv4)), (pow2heapp x (find_max' x q) (Node x gv4 gv3)), (pow2heapp x (find_max' x q) (Node x gv3 gv4)), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (smash gv4 gv4)), (pow2heapp x (find_max' x q) (smash gv4 gv3)), (pow2heapp x (find_max' x q) (smash gv3 gv4))
(pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (length q) gv4), (pow2heapp x (length q) gv3), (pow2heapp x (length q) (Node x gv4 gv4)), (pow2heapp x (length q) (Node x gv4 gv3)), (pow2heapp x (length q) (Node x gv3 gv4)), (pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (smash gv4 gv4)), (pow2heapp x (length q) (smash gv4 gv3))
(pow2heapp x (length q) (smash gv3 gv4)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp (find_max' x q) x gv4), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x gv4 gv4)), (pow2heapp (find_max' x q) x (Node x gv4 gv3)), (pow2heapp (find_max' x q) x (Node x gv3 gv4)), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (smash gv4 gv4))
(pow2heapp (find_max' x q) x (smash gv4 gv3)), (pow2heapp (find_max' x q) x (smash gv3 gv4)), (pow2heapp (find_max' x q) x (smash gv3 gv3)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv4), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3))
(pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (length q) gv4), (pow2heapp (find_max' x q) (length q) gv3), (pow2heapp (find_max' x q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (length q) (Node x gv4 gv3)), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv4))
(pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (length q) x gv4), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x gv4 gv4)), (pow2heapp (length q) x (Node x gv4 gv3))
(pow2heapp (length q) x (Node x gv3 gv4)), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (smash gv4 gv4)), (pow2heapp (length q) x (smash gv4 gv3)), (pow2heapp (length q) x (smash gv3 gv4)), (pow2heapp (length q) x (smash gv3 gv3)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv4), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv4))
(pow2heapp (length q) (find_max' x q) (Node x gv4 gv3)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv4)), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (length q) gv4), (pow2heapp (length q) (length q) gv3)
(pow2heapp (length q) (length q) (Node x gv4 gv4)), (pow2heapp (length q) (length q) (Node x gv4 gv3)), (pow2heapp (length q) (length q) (Node x gv3 gv4)), (pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (smash gv4 gv4)), (pow2heapp (length q) (length q) (smash gv4 gv3)), (pow2heapp (length q) (length q) (smash gv3 gv4)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (Permutation q (gv4 :: q))
(Permutation q (gv3 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max gv4)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q gv4)), (Permutation q (join q q gv3)), (Permutation q (insert x q)), (Permutation q (carry q gv4)), (Permutation q (carry q gv3)), (Permutation q (q ++ q))
(Permutation q []), (Permutation (gv4 :: q) q), (Permutation (gv4 :: q) (gv3 :: q)), (Permutation (gv4 :: q) (merge q q)), (Permutation (gv4 :: q) (heap_delete_max gv4)), (Permutation (gv4 :: q) (heap_delete_max gv3)), (Permutation (gv4 :: q) (join q q gv4)), (Permutation (gv4 :: q) (join q q gv3)), (Permutation (gv4 :: q) (insert x q)), (Permutation (gv4 :: q) (carry q gv4))
(Permutation (gv4 :: q) (carry q gv3)), (Permutation (gv4 :: q) (q ++ q)), (Permutation (gv4 :: q) []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) (gv4 :: q)), (Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (heap_delete_max gv4)), (Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q gv4)), (Permutation (gv3 :: q) (join q q gv3))
(Permutation (gv3 :: q) (insert x q)), (Permutation (gv3 :: q) (carry q gv4)), (Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (gv4 :: q)), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (heap_delete_max gv4)), (Permutation (merge q q) (heap_delete_max gv3))
(Permutation (merge q q) (join q q gv4)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (carry q gv4)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max gv4) q), (Permutation (heap_delete_max gv4) (gv4 :: q)), (Permutation (heap_delete_max gv4) (gv3 :: q))
(Permutation (heap_delete_max gv4) (merge q q)), (Permutation (heap_delete_max gv4) (heap_delete_max gv3)), (Permutation (heap_delete_max gv4) (join q q gv4)), (Permutation (heap_delete_max gv4) (join q q gv3)), (Permutation (heap_delete_max gv4) (insert x q)), (Permutation (heap_delete_max gv4) (carry q gv4)), (Permutation (heap_delete_max gv4) (carry q gv3)), (Permutation (heap_delete_max gv4) (q ++ q)), (Permutation (heap_delete_max gv4) []), (Permutation (heap_delete_max gv3) q)
(Permutation (heap_delete_max gv3) (gv4 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (heap_delete_max gv4)), (Permutation (heap_delete_max gv3) (join q q gv4)), (Permutation (heap_delete_max gv3) (join q q gv3)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (carry q gv4)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (q ++ q))
(Permutation (heap_delete_max gv3) []), (Permutation (join q q gv4) q), (Permutation (join q q gv4) (gv4 :: q)), (Permutation (join q q gv4) (gv3 :: q)), (Permutation (join q q gv4) (merge q q)), (Permutation (join q q gv4) (heap_delete_max gv4)), (Permutation (join q q gv4) (heap_delete_max gv3)), (Permutation (join q q gv4) (join q q gv3)), (Permutation (join q q gv4) (insert x q)), (Permutation (join q q gv4) (carry q gv4))
(Permutation (join q q gv4) (carry q gv3)), (Permutation (join q q gv4) (q ++ q)), (Permutation (join q q gv4) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) (gv4 :: q)), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (heap_delete_max gv4)), (Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q q gv4))
(Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (carry q gv4)), (Permutation (join q q gv3) (carry q gv3)), (Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) (gv4 :: q)), (Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (heap_delete_max gv4))
(Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q gv4)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (carry q gv4)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (carry q gv4) q), (Permutation (carry q gv4) (gv4 :: q)), (Permutation (carry q gv4) (gv3 :: q))
(Permutation (carry q gv4) (merge q q)), (Permutation (carry q gv4) (heap_delete_max gv4)), (Permutation (carry q gv4) (heap_delete_max gv3)), (Permutation (carry q gv4) (join q q gv4)), (Permutation (carry q gv4) (join q q gv3)), (Permutation (carry q gv4) (insert x q)), (Permutation (carry q gv4) (carry q gv3)), (Permutation (carry q gv4) (q ++ q)), (Permutation (carry q gv4) []), (Permutation (carry q gv3) q)
(Permutation (carry q gv3) (gv4 :: q)), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (heap_delete_max gv4)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q gv4)), (Permutation (carry q gv3) (join q q gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (carry q gv4)), (Permutation (carry q gv3) (q ++ q))
(Permutation (carry q gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (gv4 :: q)), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max gv4)), (Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q gv4)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (insert x q))
(Permutation (q ++ q) (carry q gv4)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (gv4 :: q)), (Permutation [] (gv3 :: q)), (Permutation [] (merge q q)), (Permutation [] (heap_delete_max gv4)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q gv4))
(Permutation [] (join q q gv3)), (Permutation [] (insert x q)), (Permutation [] (carry q gv4)), (Permutation [] (carry q gv3)), (Permutation [] (q ++ q)), (In gv4 (gv4 :: q)), (In gv4 (gv3 :: q)), (In gv4 (merge q q)), (In gv4 (heap_delete_max gv4)), (In gv4 (heap_delete_max gv3))
(In gv4 (join q q gv4)), (In gv4 (join q q gv3)), (In gv4 (insert x q)), (In gv4 (carry q gv4)), (In gv4 (carry q gv3)), (In gv4 (q ++ q)), (In gv3 (gv4 :: q)), (In gv3 (gv3 :: q)), (In gv3 (merge q q)), (In gv3 (heap_delete_max gv4))
(In gv3 (heap_delete_max gv3)), (In gv3 (join q q gv4)), (In gv3 (join q q gv3)), (In gv3 (insert x q)), (In gv3 (carry q gv4)), (In gv3 (carry q gv3)), (In gv3 (q ++ q)), (In (Node x gv4 gv4) q), (In (Node x gv4 gv4) (gv4 :: q)), (In (Node x gv4 gv4) (gv3 :: q))
(In (Node x gv4 gv4) (merge q q)), (In (Node x gv4 gv4) (heap_delete_max gv4)), (In (Node x gv4 gv4) (heap_delete_max gv3)), (In (Node x gv4 gv4) (join q q gv4)), (In (Node x gv4 gv4) (join q q gv3)), (In (Node x gv4 gv4) (insert x q)), (In (Node x gv4 gv4) (carry q gv4)), (In (Node x gv4 gv4) (carry q gv3)), (In (Node x gv4 gv4) (q ++ q)), (In (Node x gv4 gv3) q)
(In (Node x gv4 gv3) (gv4 :: q)), (In (Node x gv4 gv3) (gv3 :: q)), (In (Node x gv4 gv3) (merge q q)), (In (Node x gv4 gv3) (heap_delete_max gv4)), (In (Node x gv4 gv3) (heap_delete_max gv3)), (In (Node x gv4 gv3) (join q q gv4)), (In (Node x gv4 gv3) (join q q gv3)), (In (Node x gv4 gv3) (insert x q)), (In (Node x gv4 gv3) (carry q gv4)), (In (Node x gv4 gv3) (carry q gv3))
(In (Node x gv4 gv3) (q ++ q)), (In (Node x gv3 gv4) q), (In (Node x gv3 gv4) (gv4 :: q)), (In (Node x gv3 gv4) (gv3 :: q)), (In (Node x gv3 gv4) (merge q q)), (In (Node x gv3 gv4) (heap_delete_max gv4)), (In (Node x gv3 gv4) (heap_delete_max gv3)), (In (Node x gv3 gv4) (join q q gv4)), (In (Node x gv3 gv4) (join q q gv3)), (In (Node x gv3 gv4) (insert x q))
(In (Node x gv3 gv4) (carry q gv4)), (In (Node x gv3 gv4) (carry q gv3)), (In (Node x gv3 gv4) (q ++ q)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) (gv4 :: q)), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (heap_delete_max gv4)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q gv4))
(In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (insert x q)), (In (Node x gv3 gv3) (carry q gv4)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (smash gv4 gv4) q), (In (smash gv4 gv4) (gv4 :: q)), (In (smash gv4 gv4) (gv3 :: q)), (In (smash gv4 gv4) (merge q q)), (In (smash gv4 gv4) (heap_delete_max gv4))
(In (smash gv4 gv4) (heap_delete_max gv3)), (In (smash gv4 gv4) (join q q gv4)), (In (smash gv4 gv4) (join q q gv3)), (In (smash gv4 gv4) (insert x q)), (In (smash gv4 gv4) (carry q gv4)), (In (smash gv4 gv4) (carry q gv3)), (In (smash gv4 gv4) (q ++ q)), (In (smash gv4 gv3) q), (In (smash gv4 gv3) (gv4 :: q)), (In (smash gv4 gv3) (gv3 :: q))
(In (smash gv4 gv3) (merge q q)), (In (smash gv4 gv3) (heap_delete_max gv4)), (In (smash gv4 gv3) (heap_delete_max gv3)), (In (smash gv4 gv3) (join q q gv4)), (In (smash gv4 gv3) (join q q gv3)), (In (smash gv4 gv3) (insert x q)), (In (smash gv4 gv3) (carry q gv4)), (In (smash gv4 gv3) (carry q gv3)), (In (smash gv4 gv3) (q ++ q)), (In (smash gv3 gv4) q)
(In (smash gv3 gv4) (gv4 :: q)), (In (smash gv3 gv4) (gv3 :: q)), (In (smash gv3 gv4) (merge q q)), (In (smash gv3 gv4) (heap_delete_max gv4)), (In (smash gv3 gv4) (heap_delete_max gv3)), (In (smash gv3 gv4) (join q q gv4)), (In (smash gv3 gv4) (join q q gv3)), (In (smash gv3 gv4) (insert x q)), (In (smash gv3 gv4) (carry q gv4)), (In (smash gv3 gv4) (carry q gv3))
(In (smash gv3 gv4) (q ++ q)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) (gv4 :: q)), (In (smash gv3 gv3) (gv3 :: q)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (heap_delete_max gv4)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q gv4)), (In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (insert x q))
(In (smash gv3 gv3) (carry q gv4)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (q ++ q)), (In Leaf q), (In Leaf (gv4 :: q)), (In Leaf (gv3 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max gv4)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q gv4))
(In Leaf (join q q gv3)), (In Leaf (insert x q)), (In Leaf (carry q gv4)), (In Leaf (carry q gv3)), (In Leaf (q ++ q)), (x < find_max' x q), (x < length q), (find_max' x q < x), (find_max' x q < length q), (length q < x)
(length q < find_max' x q), (x <= find_max' x q), (x <= length q), (find_max' x q <= x), (find_max' x q <= length q), (length q <= x), (length q <= find_max' x q), (~ priq q), (~ priqq x q), (~ pow2heap x gv4)
(~ pow2heap x gv3), (~ pow2heapp x x gv4), (~ pow2heapp x x gv3), (~ Permutation q q), (~ In gv4 q), (~ In gv3 q), (~ x < x), (~ x <= x), (x <> x), (q <> q)
(gv4 <> gv4), (gv4 <> gv3), (gv3 <> gv4), (gv3 <> gv3), (None = Some q), (gv4 :: q = q), (gv4 :: q = merge q q), (gv4 :: q = heap_delete_max gv4), (gv4 :: q = heap_delete_max gv3), (gv4 :: q = join q q gv4)
(gv4 :: q = join q q gv3), (gv4 :: q = insert x q), (gv4 :: q = carry q gv4), (gv4 :: q = carry q gv3), (gv4 :: q = q ++ q), (gv4 :: q = []), (gv3 :: q = q), (gv3 :: q = merge q q), (gv3 :: q = heap_delete_max gv4), (gv3 :: q = heap_delete_max gv3)
(gv3 :: q = join q q gv4), (gv3 :: q = join q q gv3), (gv3 :: q = insert x q), (gv3 :: q = carry q gv4), (gv3 :: q = carry q gv3), (gv3 :: q = q ++ q), (gv3 :: q = []), (merge q q = q), (merge q q = heap_delete_max gv4), (merge q q = heap_delete_max gv3)
(merge q q = join q q gv4), (merge q q = join q q gv3), (merge q q = insert x q), (merge q q = carry q gv4), (merge q q = carry q gv3), (merge q q = q ++ q), (heap_delete_max gv4 = q), (heap_delete_max gv4 = carry q gv4), (heap_delete_max gv4 = carry q gv3), (heap_delete_max gv4 = q ++ q)
(heap_delete_max gv3 = q), (heap_delete_max gv3 = carry q gv4), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = q ++ q), (join q q gv4 = q), (join q q gv4 = heap_delete_max gv4), (join q q gv4 = heap_delete_max gv3), (join q q gv4 = insert x q), (join q q gv4 = carry q gv4), (join q q gv4 = carry q gv3)
(join q q gv4 = q ++ q), (join q q gv3 = q), (join q q gv3 = heap_delete_max gv4), (join q q gv3 = heap_delete_max gv3), (join q q gv3 = insert x q), (join q q gv3 = carry q gv4), (join q q gv3 = carry q gv3), (join q q gv3 = q ++ q), (insert x q = q), (insert x q = heap_delete_max gv4)
(insert x q = heap_delete_max gv3), (insert x q = carry q gv4), (insert x q = carry q gv3), (insert x q = q ++ q), (carry q gv4 = q), (carry q gv4 = q ++ q), (carry q gv3 = q), (carry q gv3 = q ++ q), (q ++ q = q), ([] = q)
([] = merge q q), ([] = heap_delete_max gv4), ([] = heap_delete_max gv3), ([] = join q q gv4), ([] = join q q gv3), ([] = insert x q), ([] = carry q gv4), ([] = carry q gv3), ([] = q ++ q), ((q, q) = delete_max_aux x q)
(Node x gv4 gv4 = gv4), (Node x gv4 gv4 = gv3), (Node x gv4 gv4 = smash gv4 gv4), (Node x gv4 gv4 = smash gv4 gv3), (Node x gv4 gv4 = smash gv3 gv4), (Node x gv4 gv4 = smash gv3 gv3), (Node x gv4 gv3 = gv4), (Node x gv4 gv3 = gv3), (Node x gv4 gv3 = smash gv4 gv4), (Node x gv4 gv3 = smash gv4 gv3)
(Node x gv4 gv3 = smash gv3 gv4), (Node x gv4 gv3 = smash gv3 gv3), (Node x gv3 gv4 = gv4), (Node x gv3 gv4 = gv3), (Node x gv3 gv4 = smash gv4 gv4), (Node x gv3 gv4 = smash gv4 gv3), (Node x gv3 gv4 = smash gv3 gv4), (Node x gv3 gv4 = smash gv3 gv3), (Node x gv3 gv3 = gv4), (Node x gv3 gv3 = gv3)
(Node x gv3 gv3 = smash gv4 gv4), (Node x gv3 gv3 = smash gv4 gv3), (Node x gv3 gv3 = smash gv3 gv4), (Node x gv3 gv3 = smash gv3 gv3), (smash gv4 gv4 = gv4), (smash gv4 gv4 = gv3), (smash gv4 gv3 = gv4), (smash gv4 gv3 = gv3), (smash gv3 gv4 = gv4), (smash gv3 gv4 = gv3)
(smash gv3 gv3 = gv4), (smash gv3 gv3 = gv3), (Leaf = Node x gv4 gv4), (Leaf = Node x gv4 gv3), (Leaf = Node x gv3 gv4), (Leaf = Node x gv3 gv3), (Leaf = smash gv4 gv4), (Leaf = smash gv4 gv3), (Leaf = smash gv3 gv4), (Leaf = smash gv3 gv3)
(find_max' x q = x), (length q = x), (length q = find_max' x q), (Some x = find_max q), (None = Some x), (None = find_max q), (None = Some gv4), (None = Some gv3), ((x >? x) = (x >=? x))

Label: 3 (3)
(priq q), (priqq x q), (priqq gv0 q), (pow2heap x gv3), (pow2heap gv0 gv3), (pow2heapp x x gv3), (pow2heapp x gv0 gv3), (pow2heapp gv0 x gv3), (pow2heapp gv0 gv0 gv3), (Permutation q q)
(In gv3 q), (x < x), (x < gv0), (gv0 < x), (gv0 < gv0), (x <= x), (x <= gv0), (gv0 <= x), (gv0 <= gv0), (q = q)
(gv3 = gv3), (x = x), (x = gv0), (gv0 = x), (gv0 = gv0), (false = (x >? x)), (false = (x >? gv0)), (false = (gv0 >? x)), (false = (gv0 >? gv0)), (false = (x >=? x))
(false = (x >=? gv0)), (false = (gv0 >=? x)), (false = (gv0 >=? gv0)), (true = (x >? x)), (true = (x >? gv0)), (true = (gv0 >? x)), (true = (gv0 >? gv0)), (true = (x >=? x)), (true = (x >=? gv0)), (true = (gv0 >=? x))
(true = (gv0 >=? gv0)), (Abs q []), (Abs (gv3 :: q) []), (Abs (merge q q) []), (Abs (heap_delete_max gv3) []), (Abs (join q q gv3) []), (Abs (insert x q) []), (Abs (insert gv0 q) []), (Abs (carry q gv3) []), (Abs (q ++ q) [])
(Abs [] []), (priqueue_elems q []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (merge q q) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert gv0 q) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (q ++ q) [])
(priqueue_elems [] []), (tree_elems gv3 []), (tree_elems (Node x gv3 gv3) []), (tree_elems (Node gv0 gv3 gv3) []), (tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (gv3 :: q)), (priq (merge q q)), (priq (heap_delete_max gv3)), (priq (join q q gv3))
(priq (insert x q)), (priq (insert gv0 q)), (priq (carry q gv3)), (priq (q ++ q)), (priqq x (gv3 :: q)), (priqq x (merge q q)), (priqq x (heap_delete_max gv3)), (priqq x (join q q gv3)), (priqq x (insert x q)), (priqq x (insert gv0 q))
(priqq x (carry q gv3)), (priqq x (q ++ q)), (priqq gv0 (gv3 :: q)), (priqq gv0 (merge q q)), (priqq gv0 (heap_delete_max gv3)), (priqq gv0 (join q q gv3)), (priqq gv0 (insert x q)), (priqq gv0 (insert gv0 q)), (priqq gv0 (carry q gv3)), (priqq gv0 (q ++ q))
(priqq (find_max' x q) q), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert gv0 q)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' gv0 q) q)
(priqq (find_max' gv0 q) (gv3 :: q)), (priqq (find_max' gv0 q) (merge q q)), (priqq (find_max' gv0 q) (heap_delete_max gv3)), (priqq (find_max' gv0 q) (join q q gv3)), (priqq (find_max' gv0 q) (insert x q)), (priqq (find_max' gv0 q) (insert gv0 q)), (priqq (find_max' gv0 q) (carry q gv3)), (priqq (find_max' gv0 q) (q ++ q)), (priqq (length q) q), (priqq (length q) (gv3 :: q))
(priqq (length q) (merge q q)), (priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q gv3)), (priqq (length q) (insert x q)), (priqq (length q) (insert gv0 q)), (priqq (length q) (carry q gv3)), (priqq (length q) (q ++ q)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (Node gv0 gv3 gv3)), (pow2heap x (smash gv3 gv3))
(pow2heap gv0 (Node x gv3 gv3)), (pow2heap gv0 (Node gv0 gv3 gv3)), (pow2heap gv0 (smash gv3 gv3)), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (Node gv0 gv3 gv3)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (find_max' gv0 q) gv3), (pow2heap (find_max' gv0 q) (Node x gv3 gv3)), (pow2heap (find_max' gv0 q) (Node gv0 gv3 gv3))
(pow2heap (find_max' gv0 q) (smash gv3 gv3)), (pow2heap (length q) gv3), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (Node gv0 gv3 gv3)), (pow2heap (length q) (smash gv3 gv3)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (Node gv0 gv3 gv3)), (pow2heapp x x (smash gv3 gv3)), (pow2heapp x x Leaf), (pow2heapp x gv0 (Node x gv3 gv3))
(pow2heapp x gv0 (Node gv0 gv3 gv3)), (pow2heapp x gv0 (smash gv3 gv3)), (pow2heapp x gv0 Leaf), (pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (Node gv0 gv3 gv3)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' gv0 q) gv3), (pow2heapp x (find_max' gv0 q) (Node x gv3 gv3))
(pow2heapp x (find_max' gv0 q) (Node gv0 gv3 gv3)), (pow2heapp x (find_max' gv0 q) (smash gv3 gv3)), (pow2heapp x (find_max' gv0 q) Leaf), (pow2heapp x (length q) gv3), (pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (Node gv0 gv3 gv3)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp gv0 x (Node x gv3 gv3)), (pow2heapp gv0 x (Node gv0 gv3 gv3))
(pow2heapp gv0 x (smash gv3 gv3)), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 (Node x gv3 gv3)), (pow2heapp gv0 gv0 (Node gv0 gv3 gv3)), (pow2heapp gv0 gv0 (smash gv3 gv3)), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (find_max' x q) gv3), (pow2heapp gv0 (find_max' x q) (Node x gv3 gv3)), (pow2heapp gv0 (find_max' x q) (Node gv0 gv3 gv3)), (pow2heapp gv0 (find_max' x q) (smash gv3 gv3))
(pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' gv0 q) gv3), (pow2heapp gv0 (find_max' gv0 q) (Node x gv3 gv3)), (pow2heapp gv0 (find_max' gv0 q) (Node gv0 gv3 gv3)), (pow2heapp gv0 (find_max' gv0 q) (smash gv3 gv3)), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (length q) gv3), (pow2heapp gv0 (length q) (Node x gv3 gv3)), (pow2heapp gv0 (length q) (Node gv0 gv3 gv3)), (pow2heapp gv0 (length q) (smash gv3 gv3))
(pow2heapp gv0 (length q) Leaf), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (Node gv0 gv3 gv3)), (pow2heapp (find_max' x q) x (smash gv3 gv3)), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) gv0 gv3), (pow2heapp (find_max' x q) gv0 (Node x gv3 gv3)), (pow2heapp (find_max' x q) gv0 (Node gv0 gv3 gv3)), (pow2heapp (find_max' x q) gv0 (smash gv3 gv3))
(pow2heapp (find_max' x q) gv0 Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 q) gv3), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' gv0 q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' x q) (find_max' gv0 q) (smash gv3 gv3))
(pow2heapp (find_max' x q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x q) (length q) gv3), (pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' gv0 q) x gv3), (pow2heapp (find_max' gv0 q) x (Node x gv3 gv3)), (pow2heapp (find_max' gv0 q) x (Node gv0 gv3 gv3)), (pow2heapp (find_max' gv0 q) x (smash gv3 gv3))
(pow2heapp (find_max' gv0 q) x Leaf), (pow2heapp (find_max' gv0 q) gv0 gv3), (pow2heapp (find_max' gv0 q) gv0 (Node x gv3 gv3)), (pow2heapp (find_max' gv0 q) gv0 (Node gv0 gv3 gv3)), (pow2heapp (find_max' gv0 q) gv0 (smash gv3 gv3)), (pow2heapp (find_max' gv0 q) gv0 Leaf), (pow2heapp (find_max' gv0 q) (find_max' x q) gv3), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' gv0 q) (find_max' x q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' gv0 q) (find_max' x q) (smash gv3 gv3))
(pow2heapp (find_max' gv0 q) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) gv3), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node x gv3 gv3)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) (smash gv3 gv3)), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 q) (length q) gv3), (pow2heapp (find_max' gv0 q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' gv0 q) (length q) (Node gv0 gv3 gv3)), (pow2heapp (find_max' gv0 q) (length q) (smash gv3 gv3))
(pow2heapp (find_max' gv0 q) (length q) Leaf), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (Node gv0 gv3 gv3)), (pow2heapp (length q) x (smash gv3 gv3)), (pow2heapp (length q) x Leaf), (pow2heapp (length q) gv0 gv3), (pow2heapp (length q) gv0 (Node x gv3 gv3)), (pow2heapp (length q) gv0 (Node gv0 gv3 gv3)), (pow2heapp (length q) gv0 (smash gv3 gv3))
(pow2heapp (length q) gv0 Leaf), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (Node gv0 gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' gv0 q) gv3), (pow2heapp (length q) (find_max' gv0 q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' gv0 q) (Node gv0 gv3 gv3)), (pow2heapp (length q) (find_max' gv0 q) (smash gv3 gv3))
(pow2heapp (length q) (find_max' gv0 q) Leaf), (pow2heapp (length q) (length q) gv3), (pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (Node gv0 gv3 gv3)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (Permutation q (gv3 :: q)), (Permutation q (merge q q)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q gv3))
(Permutation q (insert x q)), (Permutation q (insert gv0 q)), (Permutation q (carry q gv3)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (insert x q))
(Permutation (gv3 :: q) (insert gv0 q)), (Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) []), (Permutation (merge q q) q), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert gv0 q))
(Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (join q q gv3)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (insert gv0 q)), (Permutation (heap_delete_max gv3) (carry q gv3))
(Permutation (heap_delete_max gv3) (q ++ q)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (insert gv0 q)), (Permutation (join q q gv3) (carry q gv3)), (Permutation (join q q gv3) (q ++ q))
(Permutation (join q q gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (insert gv0 q)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) [])
(Permutation (insert gv0 q) q), (Permutation (insert gv0 q) (gv3 :: q)), (Permutation (insert gv0 q) (merge q q)), (Permutation (insert gv0 q) (heap_delete_max gv3)), (Permutation (insert gv0 q) (join q q gv3)), (Permutation (insert gv0 q) (insert x q)), (Permutation (insert gv0 q) (carry q gv3)), (Permutation (insert gv0 q) (q ++ q)), (Permutation (insert gv0 q) []), (Permutation (carry q gv3) q)
(Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (insert gv0 q)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (gv3 :: q))
(Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert gv0 q)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (gv3 :: q)), (Permutation [] (merge q q))
(Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q gv3)), (Permutation [] (insert x q)), (Permutation [] (insert gv0 q)), (Permutation [] (carry q gv3)), (Permutation [] (q ++ q)), (In gv3 (gv3 :: q)), (In gv3 (merge q q)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q gv3))
(In gv3 (insert x q)), (In gv3 (insert gv0 q)), (In gv3 (carry q gv3)), (In gv3 (q ++ q)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (insert x q))
(In (Node x gv3 gv3) (insert gv0 q)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (Node gv0 gv3 gv3) q), (In (Node gv0 gv3 gv3) (gv3 :: q)), (In (Node gv0 gv3 gv3) (merge q q)), (In (Node gv0 gv3 gv3) (heap_delete_max gv3)), (In (Node gv0 gv3 gv3) (join q q gv3)), (In (Node gv0 gv3 gv3) (insert x q)), (In (Node gv0 gv3 gv3) (insert gv0 q))
(In (Node gv0 gv3 gv3) (carry q gv3)), (In (Node gv0 gv3 gv3) (q ++ q)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) (gv3 :: q)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (insert gv0 q)), (In (smash gv3 gv3) (carry q gv3))
(In (smash gv3 gv3) (q ++ q)), (In Leaf q), (In Leaf (gv3 :: q)), (In Leaf (merge q q)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q gv3)), (In Leaf (insert x q)), (In Leaf (insert gv0 q)), (In Leaf (carry q gv3)), (In Leaf (q ++ q))
(x < find_max' x q), (x < find_max' gv0 q), (x < length q), (gv0 < find_max' x q), (gv0 < find_max' gv0 q), (gv0 < length q), (find_max' x q < x), (find_max' x q < gv0), (find_max' x q < find_max' gv0 q), (find_max' x q < length q)
(find_max' gv0 q < x), (find_max' gv0 q < gv0), (find_max' gv0 q < find_max' x q), (find_max' gv0 q < length q), (length q < x), (length q < gv0), (length q < find_max' x q), (length q < find_max' gv0 q), (x <= find_max' x q), (x <= find_max' gv0 q)
(x <= length q), (gv0 <= find_max' x q), (gv0 <= find_max' gv0 q), (gv0 <= length q), (find_max' x q <= x), (find_max' x q <= gv0), (find_max' x q <= find_max' gv0 q), (find_max' x q <= length q), (find_max' gv0 q <= x), (find_max' gv0 q <= gv0)
(find_max' gv0 q <= find_max' x q), (find_max' gv0 q <= length q), (length q <= x), (length q <= gv0), (length q <= find_max' x q), (length q <= find_max' gv0 q), (~ priq q), (~ priqq x q), (~ priqq gv0 q), (~ pow2heap x gv3)
(~ pow2heap gv0 gv3), (~ pow2heapp x x gv3), (~ pow2heapp x gv0 gv3), (~ pow2heapp gv0 x gv3), (~ pow2heapp gv0 gv0 gv3), (~ Permutation q q), (~ In gv3 q), (~ x < x), (~ x < gv0), (~ gv0 < x)
(~ gv0 < gv0), (~ x <= x), (~ x <= gv0), (~ gv0 <= x), (~ gv0 <= gv0), (q <> q), (gv3 <> gv3), (x <> x), (x <> gv0), (gv0 <> x)
(gv0 <> gv0), (None = Some q), (gv3 :: q = q), (gv3 :: q = merge q q), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q gv3), (gv3 :: q = insert x q), (gv3 :: q = insert gv0 q), (gv3 :: q = carry q gv3), (gv3 :: q = q ++ q)
(gv3 :: q = []), (merge q q = q), (merge q q = heap_delete_max gv3), (merge q q = join q q gv3), (merge q q = insert x q), (merge q q = insert gv0 q), (merge q q = carry q gv3), (merge q q = q ++ q), (heap_delete_max gv3 = q), (heap_delete_max gv3 = carry q gv3)
(heap_delete_max gv3 = q ++ q), (join q q gv3 = q), (join q q gv3 = heap_delete_max gv3), (join q q gv3 = insert x q), (join q q gv3 = insert gv0 q), (join q q gv3 = carry q gv3), (join q q gv3 = q ++ q), (insert x q = q), (insert x q = heap_delete_max gv3), (insert x q = carry q gv3)
(insert x q = q ++ q), (insert gv0 q = q), (insert gv0 q = heap_delete_max gv3), (insert gv0 q = carry q gv3), (insert gv0 q = q ++ q), (carry q gv3 = q), (carry q gv3 = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q)
([] = heap_delete_max gv3), ([] = join q q gv3), ([] = insert x q), ([] = insert gv0 q), ([] = carry q gv3), ([] = q ++ q), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux gv0 q), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash gv3 gv3)
(Node gv0 gv3 gv3 = gv3), (Node gv0 gv3 gv3 = smash gv3 gv3), (smash gv3 gv3 = gv3), (Leaf = Node x gv3 gv3), (Leaf = Node gv0 gv3 gv3), (Leaf = smash gv3 gv3), (find_max' x q = x), (find_max' x q = gv0), (find_max' gv0 q = x), (find_max' gv0 q = gv0)
(length q = x), (length q = gv0), (length q = find_max' x q), (length q = find_max' gv0 q), (Some x = find_max q), (Some gv0 = find_max q), (None = Some x), (None = Some gv0), (None = find_max q), (None = Some gv3)
((x >? x) = (x >=? x)), ((x >? x) = (x >=? gv0)), ((x >? x) = (gv0 >=? x)), ((x >? x) = (gv0 >=? gv0)), ((x >? gv0) = (x >=? x)), ((x >? gv0) = (x >=? gv0)), ((x >? gv0) = (gv0 >=? x)), ((x >? gv0) = (gv0 >=? gv0)), ((gv0 >? x) = (x >=? x)), ((gv0 >? x) = (x >=? gv0))
((gv0 >? x) = (gv0 >=? x)), ((gv0 >? x) = (gv0 >=? gv0)), ((gv0 >? gv0) = (x >=? x)), ((gv0 >? gv0) = (x >=? gv0)), ((gv0 >? gv0) = (gv0 >=? x)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 4 (4)
(priq q), (priq gv2), (priqq x q), (priqq x gv2), (pow2heap x gv3), (pow2heapp x x gv3), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2)
(In gv3 q), (In gv3 gv2), (x < x), (x <= x), (gv3 = gv3), (x = x), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2)
(false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q []), (Abs gv2 []), (Abs (gv3 :: q) []), (Abs (gv3 :: gv2) []), (Abs (merge q q) []), (Abs (merge q gv2) [])
(Abs (merge gv2 q) []), (Abs (merge gv2 gv2) []), (Abs (heap_delete_max gv3) []), (Abs (join q q gv3) []), (Abs (join q gv2 gv3) []), (Abs (join gv2 q gv3) []), (Abs (join gv2 gv2 gv3) []), (Abs (insert x q) []), (Abs (insert x gv2) []), (Abs (carry q gv3) [])
(Abs (carry gv2 gv3) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (gv3 :: gv2) [])
(priqueue_elems (merge q q) []), (priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (join q gv2 gv3) []), (priqueue_elems (join gv2 q gv3) []), (priqueue_elems (join gv2 gv2 gv3) []), (priqueue_elems (insert x q) [])
(priqueue_elems (insert x gv2) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (carry gv2 gv3) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) []), (priqueue_elems (gv2 ++ gv2) []), (priqueue_elems [] []), (tree_elems gv3 []), (tree_elems (Node x gv3 gv3) [])
(tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (gv3 :: q)), (priq (gv3 :: gv2)), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2)), (priq (heap_delete_max gv3)), (priq (join q q gv3))
(priq (join q gv2 gv3)), (priq (join gv2 q gv3)), (priq (join gv2 gv2 gv3)), (priq (insert x q)), (priq (insert x gv2)), (priq (carry q gv3)), (priq (carry gv2 gv3)), (priq (q ++ q)), (priq (q ++ gv2)), (priq (gv2 ++ q))
(priq (gv2 ++ gv2)), (priqq x (gv3 :: q)), (priqq x (gv3 :: gv2)), (priqq x (merge q q)), (priqq x (merge q gv2)), (priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (heap_delete_max gv3)), (priqq x (join q q gv3)), (priqq x (join q gv2 gv3))
(priqq x (join gv2 q gv3)), (priqq x (join gv2 gv2 gv3)), (priqq x (insert x q)), (priqq x (insert x gv2)), (priqq x (carry q gv3)), (priqq x (carry gv2 gv3)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2))
(priqq (find_max' x q) q), (priqq (find_max' x q) gv2), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (gv3 :: gv2)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q)), (priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q gv3))
(priqq (find_max' x q) (join q gv2 gv3)), (priqq (find_max' x q) (join gv2 q gv3)), (priqq (find_max' x q) (join gv2 gv2 gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (carry gv2 gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q))
(priqq (find_max' x q) (gv2 ++ gv2)), (priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) (gv3 :: q)), (priqq (find_max' x gv2) (gv3 :: gv2)), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2)), (priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (heap_delete_max gv3))
(priqq (find_max' x gv2) (join q q gv3)), (priqq (find_max' x gv2) (join q gv2 gv3)), (priqq (find_max' x gv2) (join gv2 q gv3)), (priqq (find_max' x gv2) (join gv2 gv2 gv3)), (priqq (find_max' x gv2) (insert x q)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (carry q gv3)), (priqq (find_max' x gv2) (carry gv2 gv3)), (priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2))
(priqq (find_max' x gv2) (gv2 ++ q)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (gv3 :: q)), (priqq (length q) (gv3 :: gv2)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv2)), (priqq (length q) (merge gv2 q)), (priqq (length q) (merge gv2 gv2))
(priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q gv3)), (priqq (length q) (join q gv2 gv3)), (priqq (length q) (join gv2 q gv3)), (priqq (length q) (join gv2 gv2 gv3)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv2)), (priqq (length q) (carry q gv3)), (priqq (length q) (carry gv2 gv3)), (priqq (length q) (q ++ q))
(priqq (length q) (q ++ gv2)), (priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q), (priqq (length gv2) gv2), (priqq (length gv2) (gv3 :: q)), (priqq (length gv2) (gv3 :: gv2)), (priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q))
(priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (heap_delete_max gv3)), (priqq (length gv2) (join q q gv3)), (priqq (length gv2) (join q gv2 gv3)), (priqq (length gv2) (join gv2 q gv3)), (priqq (length gv2) (join gv2 gv2 gv3)), (priqq (length gv2) (insert x q)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (carry q gv3)), (priqq (length gv2) (carry gv2 gv3))
(priqq (length gv2) (q ++ q)), (priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (smash gv3 gv3)), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (find_max' x gv2) gv3)
(pow2heap (find_max' x gv2) (Node x gv3 gv3)), (pow2heap (find_max' x gv2) (smash gv3 gv3)), (pow2heap (length q) gv3), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (smash gv3 gv3)), (pow2heap (length gv2) gv3), (pow2heap (length gv2) (Node x gv3 gv3)), (pow2heap (length gv2) (smash gv3 gv3)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (smash gv3 gv3))
(pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) gv3), (pow2heapp x (find_max' x gv2) (Node x gv3 gv3)), (pow2heapp x (find_max' x gv2) (smash gv3 gv3)), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (length q) gv3)
(pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv2) gv3), (pow2heapp x (length gv2) (Node x gv3 gv3)), (pow2heapp x (length gv2) (smash gv3 gv3)), (pow2heapp x (length gv2) Leaf), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (smash gv3 gv3))
(pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) gv3), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (length q) gv3)
(pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) gv3), (pow2heapp (find_max' x q) (length gv2) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length gv2) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) x gv3), (pow2heapp (find_max' x gv2) x (Node x gv3 gv3)), (pow2heapp (find_max' x gv2) x (smash gv3 gv3))
(pow2heapp (find_max' x gv2) x Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) gv3), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv2) gv3), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv3 gv3)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv3 gv3)), (pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) gv3)
(pow2heapp (find_max' x gv2) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv2) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) gv3), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv3 gv3)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv3 gv3)), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (smash gv3 gv3))
(pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) gv3), (pow2heapp (length q) (find_max' x gv2) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x gv2) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (length q) gv3)
(pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv2) gv3), (pow2heapp (length q) (length gv2) (Node x gv3 gv3)), (pow2heapp (length q) (length gv2) (smash gv3 gv3)), (pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) x gv3), (pow2heapp (length gv2) x (Node x gv3 gv3)), (pow2heapp (length gv2) x (smash gv3 gv3))
(pow2heapp (length gv2) x Leaf), (pow2heapp (length gv2) (find_max' x q) gv3), (pow2heapp (length gv2) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length gv2) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) gv3), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv3 gv3)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv3 gv3)), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (length q) gv3)
(pow2heapp (length gv2) (length q) (Node x gv3 gv3)), (pow2heapp (length gv2) (length q) (smash gv3 gv3)), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) gv3), (pow2heapp (length gv2) (length gv2) (Node x gv3 gv3)), (pow2heapp (length gv2) (length gv2) (smash gv3 gv3)), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (gv3 :: q)), (Permutation q (gv3 :: gv2)), (Permutation q (merge q q))
(Permutation q (merge q gv2)), (Permutation q (merge gv2 q)), (Permutation q (merge gv2 gv2)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q gv3)), (Permutation q (join q gv2 gv3)), (Permutation q (join gv2 q gv3)), (Permutation q (join gv2 gv2 gv3)), (Permutation q (insert x q)), (Permutation q (insert x gv2))
(Permutation q (carry q gv3)), (Permutation q (carry gv2 gv3)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q []), (Permutation gv2 (gv3 :: q)), (Permutation gv2 (gv3 :: gv2)), (Permutation gv2 (merge q q))
(Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (heap_delete_max gv3)), (Permutation gv2 (join q q gv3)), (Permutation gv2 (join q gv2 gv3)), (Permutation gv2 (join gv2 q gv3)), (Permutation gv2 (join gv2 gv2 gv3)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2))
(Permutation gv2 (carry q gv3)), (Permutation gv2 (carry gv2 gv3)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2)), (Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) gv2), (Permutation (gv3 :: q) (gv3 :: gv2))
(Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (merge q gv2)), (Permutation (gv3 :: q) (merge gv2 q)), (Permutation (gv3 :: q) (merge gv2 gv2)), (Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (join q gv2 gv3)), (Permutation (gv3 :: q) (join gv2 q gv3)), (Permutation (gv3 :: q) (join gv2 gv2 gv3)), (Permutation (gv3 :: q) (insert x q))
(Permutation (gv3 :: q) (insert x gv2)), (Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (carry gv2 gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) (q ++ gv2)), (Permutation (gv3 :: q) (gv2 ++ q)), (Permutation (gv3 :: q) (gv2 ++ gv2)), (Permutation (gv3 :: q) []), (Permutation (gv3 :: gv2) q), (Permutation (gv3 :: gv2) gv2)
(Permutation (gv3 :: gv2) (gv3 :: q)), (Permutation (gv3 :: gv2) (merge q q)), (Permutation (gv3 :: gv2) (merge q gv2)), (Permutation (gv3 :: gv2) (merge gv2 q)), (Permutation (gv3 :: gv2) (merge gv2 gv2)), (Permutation (gv3 :: gv2) (heap_delete_max gv3)), (Permutation (gv3 :: gv2) (join q q gv3)), (Permutation (gv3 :: gv2) (join q gv2 gv3)), (Permutation (gv3 :: gv2) (join gv2 q gv3)), (Permutation (gv3 :: gv2) (join gv2 gv2 gv3))
(Permutation (gv3 :: gv2) (insert x q)), (Permutation (gv3 :: gv2) (insert x gv2)), (Permutation (gv3 :: gv2) (carry q gv3)), (Permutation (gv3 :: gv2) (carry gv2 gv3)), (Permutation (gv3 :: gv2) (q ++ q)), (Permutation (gv3 :: gv2) (q ++ gv2)), (Permutation (gv3 :: gv2) (gv2 ++ q)), (Permutation (gv3 :: gv2) (gv2 ++ gv2)), (Permutation (gv3 :: gv2) []), (Permutation (merge q q) q)
(Permutation (merge q q) gv2), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (gv3 :: gv2)), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (join q gv2 gv3)), (Permutation (merge q q) (join gv2 q gv3))
(Permutation (merge q q) (join gv2 gv2 gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (carry gv2 gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) [])
(Permutation (merge q gv2) q), (Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (gv3 :: q)), (Permutation (merge q gv2) (gv3 :: gv2)), (Permutation (merge q gv2) (merge q q)), (Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (heap_delete_max gv3)), (Permutation (merge q gv2) (join q q gv3)), (Permutation (merge q gv2) (join q gv2 gv3))
(Permutation (merge q gv2) (join gv2 q gv3)), (Permutation (merge q gv2) (join gv2 gv2 gv3)), (Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (carry q gv3)), (Permutation (merge q gv2) (carry gv2 gv3)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2)), (Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2))
(Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (gv3 :: q)), (Permutation (merge gv2 q) (gv3 :: gv2)), (Permutation (merge gv2 q) (merge q q)), (Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (heap_delete_max gv3)), (Permutation (merge gv2 q) (join q q gv3))
(Permutation (merge gv2 q) (join q gv2 gv3)), (Permutation (merge gv2 q) (join gv2 q gv3)), (Permutation (merge gv2 q) (join gv2 gv2 gv3)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (carry q gv3)), (Permutation (merge gv2 q) (carry gv2 gv3)), (Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q))
(Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (gv3 :: q)), (Permutation (merge gv2 gv2) (gv3 :: gv2)), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q)), (Permutation (merge gv2 gv2) (heap_delete_max gv3))
(Permutation (merge gv2 gv2) (join q q gv3)), (Permutation (merge gv2 gv2) (join q gv2 gv3)), (Permutation (merge gv2 gv2) (join gv2 q gv3)), (Permutation (merge gv2 gv2) (join gv2 gv2 gv3)), (Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (carry q gv3)), (Permutation (merge gv2 gv2) (carry gv2 gv3)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2))
(Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) gv2), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: gv2)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (merge q gv2)), (Permutation (heap_delete_max gv3) (merge gv2 q))
(Permutation (heap_delete_max gv3) (merge gv2 gv2)), (Permutation (heap_delete_max gv3) (join q q gv3)), (Permutation (heap_delete_max gv3) (join q gv2 gv3)), (Permutation (heap_delete_max gv3) (join gv2 q gv3)), (Permutation (heap_delete_max gv3) (join gv2 gv2 gv3)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (insert x gv2)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (carry gv2 gv3)), (Permutation (heap_delete_max gv3) (q ++ q))
(Permutation (heap_delete_max gv3) (q ++ gv2)), (Permutation (heap_delete_max gv3) (gv2 ++ q)), (Permutation (heap_delete_max gv3) (gv2 ++ gv2)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) gv2), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (gv3 :: gv2)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (merge q gv2))
(Permutation (join q q gv3) (merge gv2 q)), (Permutation (join q q gv3) (merge gv2 gv2)), (Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q gv2 gv3)), (Permutation (join q q gv3) (join gv2 q gv3)), (Permutation (join q q gv3) (join gv2 gv2 gv3)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (insert x gv2)), (Permutation (join q q gv3) (carry q gv3)), (Permutation (join q q gv3) (carry gv2 gv3))
(Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) (q ++ gv2)), (Permutation (join q q gv3) (gv2 ++ q)), (Permutation (join q q gv3) (gv2 ++ gv2)), (Permutation (join q q gv3) []), (Permutation (join q gv2 gv3) q), (Permutation (join q gv2 gv3) gv2), (Permutation (join q gv2 gv3) (gv3 :: q)), (Permutation (join q gv2 gv3) (gv3 :: gv2)), (Permutation (join q gv2 gv3) (merge q q))
(Permutation (join q gv2 gv3) (merge q gv2)), (Permutation (join q gv2 gv3) (merge gv2 q)), (Permutation (join q gv2 gv3) (merge gv2 gv2)), (Permutation (join q gv2 gv3) (heap_delete_max gv3)), (Permutation (join q gv2 gv3) (join q q gv3)), (Permutation (join q gv2 gv3) (join gv2 q gv3)), (Permutation (join q gv2 gv3) (join gv2 gv2 gv3)), (Permutation (join q gv2 gv3) (insert x q)), (Permutation (join q gv2 gv3) (insert x gv2)), (Permutation (join q gv2 gv3) (carry q gv3))
(Permutation (join q gv2 gv3) (carry gv2 gv3)), (Permutation (join q gv2 gv3) (q ++ q)), (Permutation (join q gv2 gv3) (q ++ gv2)), (Permutation (join q gv2 gv3) (gv2 ++ q)), (Permutation (join q gv2 gv3) (gv2 ++ gv2)), (Permutation (join q gv2 gv3) []), (Permutation (join gv2 q gv3) q), (Permutation (join gv2 q gv3) gv2), (Permutation (join gv2 q gv3) (gv3 :: q)), (Permutation (join gv2 q gv3) (gv3 :: gv2))
(Permutation (join gv2 q gv3) (merge q q)), (Permutation (join gv2 q gv3) (merge q gv2)), (Permutation (join gv2 q gv3) (merge gv2 q)), (Permutation (join gv2 q gv3) (merge gv2 gv2)), (Permutation (join gv2 q gv3) (heap_delete_max gv3)), (Permutation (join gv2 q gv3) (join q q gv3)), (Permutation (join gv2 q gv3) (join q gv2 gv3)), (Permutation (join gv2 q gv3) (join gv2 gv2 gv3)), (Permutation (join gv2 q gv3) (insert x q)), (Permutation (join gv2 q gv3) (insert x gv2))
(Permutation (join gv2 q gv3) (carry q gv3)), (Permutation (join gv2 q gv3) (carry gv2 gv3)), (Permutation (join gv2 q gv3) (q ++ q)), (Permutation (join gv2 q gv3) (q ++ gv2)), (Permutation (join gv2 q gv3) (gv2 ++ q)), (Permutation (join gv2 q gv3) (gv2 ++ gv2)), (Permutation (join gv2 q gv3) []), (Permutation (join gv2 gv2 gv3) q), (Permutation (join gv2 gv2 gv3) gv2), (Permutation (join gv2 gv2 gv3) (gv3 :: q))
(Permutation (join gv2 gv2 gv3) (gv3 :: gv2)), (Permutation (join gv2 gv2 gv3) (merge q q)), (Permutation (join gv2 gv2 gv3) (merge q gv2)), (Permutation (join gv2 gv2 gv3) (merge gv2 q)), (Permutation (join gv2 gv2 gv3) (merge gv2 gv2)), (Permutation (join gv2 gv2 gv3) (heap_delete_max gv3)), (Permutation (join gv2 gv2 gv3) (join q q gv3)), (Permutation (join gv2 gv2 gv3) (join q gv2 gv3)), (Permutation (join gv2 gv2 gv3) (join gv2 q gv3)), (Permutation (join gv2 gv2 gv3) (insert x q))
(Permutation (join gv2 gv2 gv3) (insert x gv2)), (Permutation (join gv2 gv2 gv3) (carry q gv3)), (Permutation (join gv2 gv2 gv3) (carry gv2 gv3)), (Permutation (join gv2 gv2 gv3) (q ++ q)), (Permutation (join gv2 gv2 gv3) (q ++ gv2)), (Permutation (join gv2 gv2 gv3) (gv2 ++ q)), (Permutation (join gv2 gv2 gv3) (gv2 ++ gv2)), (Permutation (join gv2 gv2 gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) gv2)
(Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (gv3 :: gv2)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (join q gv2 gv3)), (Permutation (insert x q) (join gv2 q gv3))
(Permutation (insert x q) (join gv2 gv2 gv3)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (carry gv2 gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2)), (Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q)
(Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (gv3 :: q)), (Permutation (insert x gv2) (gv3 :: gv2)), (Permutation (insert x gv2) (merge q q)), (Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (heap_delete_max gv3)), (Permutation (insert x gv2) (join q q gv3)), (Permutation (insert x gv2) (join q gv2 gv3))
(Permutation (insert x gv2) (join gv2 q gv3)), (Permutation (insert x gv2) (join gv2 gv2 gv3)), (Permutation (insert x gv2) (insert x q)), (Permutation (insert x gv2) (carry q gv3)), (Permutation (insert x gv2) (carry gv2 gv3)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) [])
(Permutation (carry q gv3) q), (Permutation (carry q gv3) gv2), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (gv3 :: gv2)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (merge q gv2)), (Permutation (carry q gv3) (merge gv2 q)), (Permutation (carry q gv3) (merge gv2 gv2)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q gv3))
(Permutation (carry q gv3) (join q gv2 gv3)), (Permutation (carry q gv3) (join gv2 q gv3)), (Permutation (carry q gv3) (join gv2 gv2 gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (insert x gv2)), (Permutation (carry q gv3) (carry gv2 gv3)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) (q ++ gv2)), (Permutation (carry q gv3) (gv2 ++ q)), (Permutation (carry q gv3) (gv2 ++ gv2))
(Permutation (carry q gv3) []), (Permutation (carry gv2 gv3) q), (Permutation (carry gv2 gv3) gv2), (Permutation (carry gv2 gv3) (gv3 :: q)), (Permutation (carry gv2 gv3) (gv3 :: gv2)), (Permutation (carry gv2 gv3) (merge q q)), (Permutation (carry gv2 gv3) (merge q gv2)), (Permutation (carry gv2 gv3) (merge gv2 q)), (Permutation (carry gv2 gv3) (merge gv2 gv2)), (Permutation (carry gv2 gv3) (heap_delete_max gv3))
(Permutation (carry gv2 gv3) (join q q gv3)), (Permutation (carry gv2 gv3) (join q gv2 gv3)), (Permutation (carry gv2 gv3) (join gv2 q gv3)), (Permutation (carry gv2 gv3) (join gv2 gv2 gv3)), (Permutation (carry gv2 gv3) (insert x q)), (Permutation (carry gv2 gv3) (insert x gv2)), (Permutation (carry gv2 gv3) (carry q gv3)), (Permutation (carry gv2 gv3) (q ++ q)), (Permutation (carry gv2 gv3) (q ++ gv2)), (Permutation (carry gv2 gv3) (gv2 ++ q))
(Permutation (carry gv2 gv3) (gv2 ++ gv2)), (Permutation (carry gv2 gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (gv3 :: gv2)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q)), (Permutation (q ++ q) (merge gv2 gv2))
(Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (join q gv2 gv3)), (Permutation (q ++ q) (join gv2 q gv3)), (Permutation (q ++ q) (join gv2 gv2 gv3)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) (carry gv2 gv3)), (Permutation (q ++ q) (q ++ gv2))
(Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q), (Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (gv3 :: q)), (Permutation (q ++ gv2) (gv3 :: gv2)), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q))
(Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (heap_delete_max gv3)), (Permutation (q ++ gv2) (join q q gv3)), (Permutation (q ++ gv2) (join q gv2 gv3)), (Permutation (q ++ gv2) (join gv2 q gv3)), (Permutation (q ++ gv2) (join gv2 gv2 gv3)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (carry q gv3)), (Permutation (q ++ gv2) (carry gv2 gv3))
(Permutation (q ++ gv2) (q ++ q)), (Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q), (Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (gv3 :: q)), (Permutation (gv2 ++ q) (gv3 :: gv2)), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2))
(Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (heap_delete_max gv3)), (Permutation (gv2 ++ q) (join q q gv3)), (Permutation (gv2 ++ q) (join q gv2 gv3)), (Permutation (gv2 ++ q) (join gv2 q gv3)), (Permutation (gv2 ++ q) (join gv2 gv2 gv3)), (Permutation (gv2 ++ q) (insert x q)), (Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (carry q gv3))
(Permutation (gv2 ++ q) (carry gv2 gv3)), (Permutation (gv2 ++ q) (q ++ q)), (Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (gv3 :: q)), (Permutation (gv2 ++ gv2) (gv3 :: gv2)), (Permutation (gv2 ++ gv2) (merge q q))
(Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (heap_delete_max gv3)), (Permutation (gv2 ++ gv2) (join q q gv3)), (Permutation (gv2 ++ gv2) (join q gv2 gv3)), (Permutation (gv2 ++ gv2) (join gv2 q gv3)), (Permutation (gv2 ++ gv2) (join gv2 gv2 gv3)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2))
(Permutation (gv2 ++ gv2) (carry q gv3)), (Permutation (gv2 ++ gv2) (carry gv2 gv3)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q)), (Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2), (Permutation [] (gv3 :: q)), (Permutation [] (gv3 :: gv2))
(Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q gv3)), (Permutation [] (join q gv2 gv3)), (Permutation [] (join gv2 q gv3)), (Permutation [] (join gv2 gv2 gv3)), (Permutation [] (insert x q))
(Permutation [] (insert x gv2)), (Permutation [] (carry q gv3)), (Permutation [] (carry gv2 gv3)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q)), (Permutation [] (gv2 ++ gv2)), (In gv3 (gv3 :: q)), (In gv3 (gv3 :: gv2)), (In gv3 (merge q q))
(In gv3 (merge q gv2)), (In gv3 (merge gv2 q)), (In gv3 (merge gv2 gv2)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q gv3)), (In gv3 (join q gv2 gv3)), (In gv3 (join gv2 q gv3)), (In gv3 (join gv2 gv2 gv3)), (In gv3 (insert x q)), (In gv3 (insert x gv2))
(In gv3 (carry q gv3)), (In gv3 (carry gv2 gv3)), (In gv3 (q ++ q)), (In gv3 (q ++ gv2)), (In gv3 (gv2 ++ q)), (In gv3 (gv2 ++ gv2)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) gv2), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (gv3 :: gv2))
(In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (merge q gv2)), (In (Node x gv3 gv3) (merge gv2 q)), (In (Node x gv3 gv3) (merge gv2 gv2)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (join q gv2 gv3)), (In (Node x gv3 gv3) (join gv2 q gv3)), (In (Node x gv3 gv3) (join gv2 gv2 gv3)), (In (Node x gv3 gv3) (insert x q))
(In (Node x gv3 gv3) (insert x gv2)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (carry gv2 gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (Node x gv3 gv3) (q ++ gv2)), (In (Node x gv3 gv3) (gv2 ++ q)), (In (Node x gv3 gv3) (gv2 ++ gv2)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) gv2), (In (smash gv3 gv3) (gv3 :: q))
(In (smash gv3 gv3) (gv3 :: gv2)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (merge q gv2)), (In (smash gv3 gv3) (merge gv2 q)), (In (smash gv3 gv3) (merge gv2 gv2)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (join q gv2 gv3)), (In (smash gv3 gv3) (join gv2 q gv3)), (In (smash gv3 gv3) (join gv2 gv2 gv3))
(In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (insert x gv2)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (carry gv2 gv3)), (In (smash gv3 gv3) (q ++ q)), (In (smash gv3 gv3) (q ++ gv2)), (In (smash gv3 gv3) (gv2 ++ q)), (In (smash gv3 gv3) (gv2 ++ gv2)), (In Leaf q), (In Leaf gv2)
(In Leaf (gv3 :: q)), (In Leaf (gv3 :: gv2)), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q)), (In Leaf (merge gv2 gv2)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q gv3)), (In Leaf (join q gv2 gv3)), (In Leaf (join gv2 q gv3))
(In Leaf (join gv2 gv2 gv3)), (In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (carry q gv3)), (In Leaf (carry gv2 gv3)), (In Leaf (q ++ q)), (In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (x < find_max' x q)
(x < find_max' x gv2), (x < length q), (x < length gv2), (find_max' x q < x), (find_max' x q < find_max' x gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < x), (find_max' x gv2 < find_max' x q), (find_max' x gv2 < length q)
(find_max' x gv2 < length gv2), (length q < x), (length q < find_max' x q), (length q < find_max' x gv2), (length q < length gv2), (length gv2 < x), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2), (length gv2 < length q), (x <= find_max' x q)
(x <= find_max' x gv2), (x <= length q), (x <= length gv2), (find_max' x q <= x), (find_max' x q <= find_max' x gv2), (find_max' x q <= length q), (find_max' x q <= length gv2), (find_max' x gv2 <= x), (find_max' x gv2 <= find_max' x q), (find_max' x gv2 <= length q)
(find_max' x gv2 <= length gv2), (length q <= x), (length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= length gv2), (length gv2 <= x), (length gv2 <= find_max' x q), (length gv2 <= find_max' x gv2), (length gv2 <= length q), (~ priq q)
(~ priq gv2), (~ priqq x q), (~ priqq x gv2), (~ pow2heap x gv3), (~ pow2heapp x x gv3), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2), (~ In gv3 q)
(~ In gv3 gv2), (~ x < x), (~ x <= x), (gv3 <> gv3), (x <> x), (q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2), (None = Some q)
(None = Some gv2), (gv3 :: q = q), (gv3 :: q = gv2), (gv3 :: q = merge q q), (gv3 :: q = merge q gv2), (gv3 :: q = merge gv2 q), (gv3 :: q = merge gv2 gv2), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q gv3), (gv3 :: q = join q gv2 gv3)
(gv3 :: q = join gv2 q gv3), (gv3 :: q = join gv2 gv2 gv3), (gv3 :: q = insert x q), (gv3 :: q = insert x gv2), (gv3 :: q = carry q gv3), (gv3 :: q = carry gv2 gv3), (gv3 :: q = q ++ q), (gv3 :: q = q ++ gv2), (gv3 :: q = gv2 ++ q), (gv3 :: q = gv2 ++ gv2)
(gv3 :: q = []), (gv3 :: gv2 = q), (gv3 :: gv2 = gv2), (gv3 :: gv2 = merge q q), (gv3 :: gv2 = merge q gv2), (gv3 :: gv2 = merge gv2 q), (gv3 :: gv2 = merge gv2 gv2), (gv3 :: gv2 = heap_delete_max gv3), (gv3 :: gv2 = join q q gv3), (gv3 :: gv2 = join q gv2 gv3)
(gv3 :: gv2 = join gv2 q gv3), (gv3 :: gv2 = join gv2 gv2 gv3), (gv3 :: gv2 = insert x q), (gv3 :: gv2 = insert x gv2), (gv3 :: gv2 = carry q gv3), (gv3 :: gv2 = carry gv2 gv3), (gv3 :: gv2 = q ++ q), (gv3 :: gv2 = q ++ gv2), (gv3 :: gv2 = gv2 ++ q), (gv3 :: gv2 = gv2 ++ gv2)
(gv3 :: gv2 = []), (merge q q = q), (merge q q = gv2), (merge q q = heap_delete_max gv3), (merge q q = join q q gv3), (merge q q = join q gv2 gv3), (merge q q = join gv2 q gv3), (merge q q = join gv2 gv2 gv3), (merge q q = insert x q), (merge q q = insert x gv2)
(merge q q = carry q gv3), (merge q q = carry gv2 gv3), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2), (merge q gv2 = q), (merge q gv2 = gv2), (merge q gv2 = heap_delete_max gv3), (merge q gv2 = join q q gv3)
(merge q gv2 = join q gv2 gv3), (merge q gv2 = join gv2 q gv3), (merge q gv2 = join gv2 gv2 gv3), (merge q gv2 = insert x q), (merge q gv2 = insert x gv2), (merge q gv2 = carry q gv3), (merge q gv2 = carry gv2 gv3), (merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q)
(merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = heap_delete_max gv3), (merge gv2 q = join q q gv3), (merge gv2 q = join q gv2 gv3), (merge gv2 q = join gv2 q gv3), (merge gv2 q = join gv2 gv2 gv3), (merge gv2 q = insert x q), (merge gv2 q = insert x gv2)
(merge gv2 q = carry q gv3), (merge gv2 q = carry gv2 gv3), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2), (merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2), (merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = heap_delete_max gv3), (merge gv2 gv2 = join q q gv3)
(merge gv2 gv2 = join q gv2 gv3), (merge gv2 gv2 = join gv2 q gv3), (merge gv2 gv2 = join gv2 gv2 gv3), (merge gv2 gv2 = insert x q), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = carry q gv3), (merge gv2 gv2 = carry gv2 gv3), (merge gv2 gv2 = q ++ q), (merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q)
(merge gv2 gv2 = gv2 ++ gv2), (heap_delete_max gv3 = q), (heap_delete_max gv3 = gv2), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = carry gv2 gv3), (heap_delete_max gv3 = q ++ q), (heap_delete_max gv3 = q ++ gv2), (heap_delete_max gv3 = gv2 ++ q), (heap_delete_max gv3 = gv2 ++ gv2), (join q q gv3 = q)
(join q q gv3 = gv2), (join q q gv3 = heap_delete_max gv3), (join q q gv3 = insert x q), (join q q gv3 = insert x gv2), (join q q gv3 = carry q gv3), (join q q gv3 = carry gv2 gv3), (join q q gv3 = q ++ q), (join q q gv3 = q ++ gv2), (join q q gv3 = gv2 ++ q), (join q q gv3 = gv2 ++ gv2)
(join q gv2 gv3 = q), (join q gv2 gv3 = gv2), (join q gv2 gv3 = heap_delete_max gv3), (join q gv2 gv3 = insert x q), (join q gv2 gv3 = insert x gv2), (join q gv2 gv3 = carry q gv3), (join q gv2 gv3 = carry gv2 gv3), (join q gv2 gv3 = q ++ q), (join q gv2 gv3 = q ++ gv2), (join q gv2 gv3 = gv2 ++ q)
(join q gv2 gv3 = gv2 ++ gv2), (join gv2 q gv3 = q), (join gv2 q gv3 = gv2), (join gv2 q gv3 = heap_delete_max gv3), (join gv2 q gv3 = insert x q), (join gv2 q gv3 = insert x gv2), (join gv2 q gv3 = carry q gv3), (join gv2 q gv3 = carry gv2 gv3), (join gv2 q gv3 = q ++ q), (join gv2 q gv3 = q ++ gv2)
(join gv2 q gv3 = gv2 ++ q), (join gv2 q gv3 = gv2 ++ gv2), (join gv2 gv2 gv3 = q), (join gv2 gv2 gv3 = gv2), (join gv2 gv2 gv3 = heap_delete_max gv3), (join gv2 gv2 gv3 = insert x q), (join gv2 gv2 gv3 = insert x gv2), (join gv2 gv2 gv3 = carry q gv3), (join gv2 gv2 gv3 = carry gv2 gv3), (join gv2 gv2 gv3 = q ++ q)
(join gv2 gv2 gv3 = q ++ gv2), (join gv2 gv2 gv3 = gv2 ++ q), (join gv2 gv2 gv3 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = heap_delete_max gv3), (insert x q = carry q gv3), (insert x q = carry gv2 gv3), (insert x q = q ++ q), (insert x q = q ++ gv2)
(insert x q = gv2 ++ q), (insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = heap_delete_max gv3), (insert x gv2 = carry q gv3), (insert x gv2 = carry gv2 gv3), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q)
(insert x gv2 = gv2 ++ gv2), (carry q gv3 = q), (carry q gv3 = gv2), (carry q gv3 = q ++ q), (carry q gv3 = q ++ gv2), (carry q gv3 = gv2 ++ q), (carry q gv3 = gv2 ++ gv2), (carry gv2 gv3 = q), (carry gv2 gv3 = gv2), (carry gv2 gv3 = q ++ q)
(carry gv2 gv3 = q ++ gv2), (carry gv2 gv3 = gv2 ++ q), (carry gv2 gv3 = gv2 ++ gv2), (q ++ q = q), (q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2), (gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q)
(gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q), ([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2), ([] = heap_delete_max gv3), ([] = join q q gv3), ([] = join q gv2 gv3)
([] = join gv2 q gv3), ([] = join gv2 gv2 gv3), ([] = insert x q), ([] = insert x gv2), ([] = carry q gv3), ([] = carry gv2 gv3), ([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q), ([] = gv2 ++ gv2)
((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2), ((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((gv2, q) = delete_max_aux x q), ((gv2, q) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash gv3 gv3)
(smash gv3 gv3 = gv3), (Leaf = Node x gv3 gv3), (Leaf = smash gv3 gv3), (find_max' x q = x), (find_max' x gv2 = x), (length q = x), (length q = find_max' x q), (length q = find_max' x gv2), (length gv2 = x), (length gv2 = find_max' x q)
(length gv2 = find_max' x gv2), (Some x = find_max q), (Some x = find_max gv2), (None = Some x), (None = find_max q), (None = find_max gv2), (None = Some gv3), ((x >? x) = (x >=? x))

Label: 5 (5)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (pow2heap x gv3), (pow2heapp x x gv3), (Permutation q q), (Permutation q gv1), (Permutation gv1 q), (Permutation gv1 gv1)
(In gv3 q), (In gv3 gv1), (x < x), (x <= x), (x = x), (gv3 = gv3), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1)
(false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q []), (Abs gv1 []), (Abs (gv3 :: q) []), (Abs (gv3 :: gv1) []), (Abs (merge q q) []), (Abs (merge q gv1) [])
(Abs (merge gv1 q) []), (Abs (merge gv1 gv1) []), (Abs (heap_delete_max gv3) []), (Abs (join q q gv3) []), (Abs (join q gv1 gv3) []), (Abs (join gv1 q gv3) []), (Abs (join gv1 gv1 gv3) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (carry q gv3) [])
(Abs (carry gv1 gv3) []), (Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (gv3 :: q) []), (priqueue_elems (gv3 :: gv1) [])
(priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (heap_delete_max gv3) []), (priqueue_elems (join q q gv3) []), (priqueue_elems (join q gv1 gv3) []), (priqueue_elems (join gv1 q gv3) []), (priqueue_elems (join gv1 gv1 gv3) []), (priqueue_elems (insert x q) [])
(priqueue_elems (insert x gv1) []), (priqueue_elems (carry q gv3) []), (priqueue_elems (carry gv1 gv3) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems gv3 []), (tree_elems (Node x gv3 gv3) [])
(tree_elems (smash gv3 gv3) []), (tree_elems Leaf []), (priq (gv3 :: q)), (priq (gv3 :: gv1)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (merge gv1 gv1)), (priq (heap_delete_max gv3)), (priq (join q q gv3))
(priq (join q gv1 gv3)), (priq (join gv1 q gv3)), (priq (join gv1 gv1 gv3)), (priq (insert x q)), (priq (insert x gv1)), (priq (carry q gv3)), (priq (carry gv1 gv3)), (priq (q ++ q)), (priq (q ++ gv1)), (priq (gv1 ++ q))
(priq (gv1 ++ gv1)), (priqq x (gv3 :: q)), (priqq x (gv3 :: gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q)), (priqq x (merge gv1 gv1)), (priqq x (heap_delete_max gv3)), (priqq x (join q q gv3)), (priqq x (join q gv1 gv3))
(priqq x (join gv1 q gv3)), (priqq x (join gv1 gv1 gv3)), (priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (carry q gv3)), (priqq x (carry gv1 gv3)), (priqq x (q ++ q)), (priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1))
(priqq (find_max' x q) q), (priqq (find_max' x q) gv1), (priqq (find_max' x q) (gv3 :: q)), (priqq (find_max' x q) (gv3 :: gv1)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv1)), (priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (heap_delete_max gv3)), (priqq (find_max' x q) (join q q gv3))
(priqq (find_max' x q) (join q gv1 gv3)), (priqq (find_max' x q) (join gv1 q gv3)), (priqq (find_max' x q) (join gv1 gv1 gv3)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1)), (priqq (find_max' x q) (carry q gv3)), (priqq (find_max' x q) (carry gv1 gv3)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1)), (priqq (find_max' x q) (gv1 ++ q))
(priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1), (priqq (find_max' x gv1) (gv3 :: q)), (priqq (find_max' x gv1) (gv3 :: gv1)), (priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1)), (priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (heap_delete_max gv3))
(priqq (find_max' x gv1) (join q q gv3)), (priqq (find_max' x gv1) (join q gv1 gv3)), (priqq (find_max' x gv1) (join gv1 q gv3)), (priqq (find_max' x gv1) (join gv1 gv1 gv3)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (carry q gv3)), (priqq (find_max' x gv1) (carry gv1 gv3)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1))
(priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1)), (priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (gv3 :: q)), (priqq (length q) (gv3 :: gv1)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv1)), (priqq (length q) (merge gv1 q)), (priqq (length q) (merge gv1 gv1))
(priqq (length q) (heap_delete_max gv3)), (priqq (length q) (join q q gv3)), (priqq (length q) (join q gv1 gv3)), (priqq (length q) (join gv1 q gv3)), (priqq (length q) (join gv1 gv1 gv3)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1)), (priqq (length q) (carry q gv3)), (priqq (length q) (carry gv1 gv3)), (priqq (length q) (q ++ q))
(priqq (length q) (q ++ gv1)), (priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (gv3 :: q)), (priqq (length gv1) (gv3 :: gv1)), (priqq (length gv1) (merge q q)), (priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q))
(priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (heap_delete_max gv3)), (priqq (length gv1) (join q q gv3)), (priqq (length gv1) (join q gv1 gv3)), (priqq (length gv1) (join gv1 q gv3)), (priqq (length gv1) (join gv1 gv1 gv3)), (priqq (length gv1) (insert x q)), (priqq (length gv1) (insert x gv1)), (priqq (length gv1) (carry q gv3)), (priqq (length gv1) (carry gv1 gv3))
(priqq (length gv1) (q ++ q)), (priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heap x (Node x gv3 gv3)), (pow2heap x (smash gv3 gv3)), (pow2heap (find_max' x q) gv3), (pow2heap (find_max' x q) (Node x gv3 gv3)), (pow2heap (find_max' x q) (smash gv3 gv3)), (pow2heap (find_max' x gv1) gv3)
(pow2heap (find_max' x gv1) (Node x gv3 gv3)), (pow2heap (find_max' x gv1) (smash gv3 gv3)), (pow2heap (length q) gv3), (pow2heap (length q) (Node x gv3 gv3)), (pow2heap (length q) (smash gv3 gv3)), (pow2heap (length gv1) gv3), (pow2heap (length gv1) (Node x gv3 gv3)), (pow2heap (length gv1) (smash gv3 gv3)), (pow2heapp x x (Node x gv3 gv3)), (pow2heapp x x (smash gv3 gv3))
(pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv3), (pow2heapp x (find_max' x q) (Node x gv3 gv3)), (pow2heapp x (find_max' x q) (smash gv3 gv3)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) gv3), (pow2heapp x (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp x (find_max' x gv1) (smash gv3 gv3)), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (length q) gv3)
(pow2heapp x (length q) (Node x gv3 gv3)), (pow2heapp x (length q) (smash gv3 gv3)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) gv3), (pow2heapp x (length gv1) (Node x gv3 gv3)), (pow2heapp x (length gv1) (smash gv3 gv3)), (pow2heapp x (length gv1) Leaf), (pow2heapp (find_max' x q) x gv3), (pow2heapp (find_max' x q) x (Node x gv3 gv3)), (pow2heapp (find_max' x q) x (smash gv3 gv3))
(pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv3), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv1) gv3), (pow2heapp (find_max' x q) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (length q) gv3)
(pow2heapp (find_max' x q) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv1) gv3), (pow2heapp (find_max' x q) (length gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x q) (length gv1) (smash gv3 gv3)), (pow2heapp (find_max' x q) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x gv3), (pow2heapp (find_max' x gv1) x (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) x (smash gv3 gv3))
(pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) gv3), (pow2heapp (find_max' x gv1) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x q) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) gv3), (pow2heapp (find_max' x gv1) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) gv3)
(pow2heapp (find_max' x gv1) (length q) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (length q) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (length q) Leaf), (pow2heapp (find_max' x gv1) (length gv1) gv3), (pow2heapp (find_max' x gv1) (length gv1) (Node x gv3 gv3)), (pow2heapp (find_max' x gv1) (length gv1) (smash gv3 gv3)), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (length q) x gv3), (pow2heapp (length q) x (Node x gv3 gv3)), (pow2heapp (length q) x (smash gv3 gv3))
(pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv3), (pow2heapp (length q) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv1) gv3), (pow2heapp (length q) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (length q) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (length q) (find_max' x gv1) Leaf), (pow2heapp (length q) (length q) gv3)
(pow2heapp (length q) (length q) (Node x gv3 gv3)), (pow2heapp (length q) (length q) (smash gv3 gv3)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv1) gv3), (pow2heapp (length q) (length gv1) (Node x gv3 gv3)), (pow2heapp (length q) (length gv1) (smash gv3 gv3)), (pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x gv3), (pow2heapp (length gv1) x (Node x gv3 gv3)), (pow2heapp (length gv1) x (smash gv3 gv3))
(pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) (find_max' x q) gv3), (pow2heapp (length gv1) (find_max' x q) (Node x gv3 gv3)), (pow2heapp (length gv1) (find_max' x q) (smash gv3 gv3)), (pow2heapp (length gv1) (find_max' x q) Leaf), (pow2heapp (length gv1) (find_max' x gv1) gv3), (pow2heapp (length gv1) (find_max' x gv1) (Node x gv3 gv3)), (pow2heapp (length gv1) (find_max' x gv1) (smash gv3 gv3)), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (length q) gv3)
(pow2heapp (length gv1) (length q) (Node x gv3 gv3)), (pow2heapp (length gv1) (length q) (smash gv3 gv3)), (pow2heapp (length gv1) (length q) Leaf), (pow2heapp (length gv1) (length gv1) gv3), (pow2heapp (length gv1) (length gv1) (Node x gv3 gv3)), (pow2heapp (length gv1) (length gv1) (smash gv3 gv3)), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (gv3 :: q)), (Permutation q (gv3 :: gv1)), (Permutation q (merge q q))
(Permutation q (merge q gv1)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (heap_delete_max gv3)), (Permutation q (join q q gv3)), (Permutation q (join q gv1 gv3)), (Permutation q (join gv1 q gv3)), (Permutation q (join gv1 gv1 gv3)), (Permutation q (insert x q)), (Permutation q (insert x gv1))
(Permutation q (carry q gv3)), (Permutation q (carry gv1 gv3)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q []), (Permutation gv1 (gv3 :: q)), (Permutation gv1 (gv3 :: gv1)), (Permutation gv1 (merge q q))
(Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (heap_delete_max gv3)), (Permutation gv1 (join q q gv3)), (Permutation gv1 (join q gv1 gv3)), (Permutation gv1 (join gv1 q gv3)), (Permutation gv1 (join gv1 gv1 gv3)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1))
(Permutation gv1 (carry q gv3)), (Permutation gv1 (carry gv1 gv3)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (gv3 :: q) q), (Permutation (gv3 :: q) gv1), (Permutation (gv3 :: q) (gv3 :: gv1))
(Permutation (gv3 :: q) (merge q q)), (Permutation (gv3 :: q) (merge q gv1)), (Permutation (gv3 :: q) (merge gv1 q)), (Permutation (gv3 :: q) (merge gv1 gv1)), (Permutation (gv3 :: q) (heap_delete_max gv3)), (Permutation (gv3 :: q) (join q q gv3)), (Permutation (gv3 :: q) (join q gv1 gv3)), (Permutation (gv3 :: q) (join gv1 q gv3)), (Permutation (gv3 :: q) (join gv1 gv1 gv3)), (Permutation (gv3 :: q) (insert x q))
(Permutation (gv3 :: q) (insert x gv1)), (Permutation (gv3 :: q) (carry q gv3)), (Permutation (gv3 :: q) (carry gv1 gv3)), (Permutation (gv3 :: q) (q ++ q)), (Permutation (gv3 :: q) (q ++ gv1)), (Permutation (gv3 :: q) (gv1 ++ q)), (Permutation (gv3 :: q) (gv1 ++ gv1)), (Permutation (gv3 :: q) []), (Permutation (gv3 :: gv1) q), (Permutation (gv3 :: gv1) gv1)
(Permutation (gv3 :: gv1) (gv3 :: q)), (Permutation (gv3 :: gv1) (merge q q)), (Permutation (gv3 :: gv1) (merge q gv1)), (Permutation (gv3 :: gv1) (merge gv1 q)), (Permutation (gv3 :: gv1) (merge gv1 gv1)), (Permutation (gv3 :: gv1) (heap_delete_max gv3)), (Permutation (gv3 :: gv1) (join q q gv3)), (Permutation (gv3 :: gv1) (join q gv1 gv3)), (Permutation (gv3 :: gv1) (join gv1 q gv3)), (Permutation (gv3 :: gv1) (join gv1 gv1 gv3))
(Permutation (gv3 :: gv1) (insert x q)), (Permutation (gv3 :: gv1) (insert x gv1)), (Permutation (gv3 :: gv1) (carry q gv3)), (Permutation (gv3 :: gv1) (carry gv1 gv3)), (Permutation (gv3 :: gv1) (q ++ q)), (Permutation (gv3 :: gv1) (q ++ gv1)), (Permutation (gv3 :: gv1) (gv1 ++ q)), (Permutation (gv3 :: gv1) (gv1 ++ gv1)), (Permutation (gv3 :: gv1) []), (Permutation (merge q q) q)
(Permutation (merge q q) gv1), (Permutation (merge q q) (gv3 :: q)), (Permutation (merge q q) (gv3 :: gv1)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (heap_delete_max gv3)), (Permutation (merge q q) (join q q gv3)), (Permutation (merge q q) (join q gv1 gv3)), (Permutation (merge q q) (join gv1 q gv3))
(Permutation (merge q q) (join gv1 gv1 gv3)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (carry q gv3)), (Permutation (merge q q) (carry gv1 gv3)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) [])
(Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (gv3 :: q)), (Permutation (merge q gv1) (gv3 :: gv1)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (heap_delete_max gv3)), (Permutation (merge q gv1) (join q q gv3)), (Permutation (merge q gv1) (join q gv1 gv3))
(Permutation (merge q gv1) (join gv1 q gv3)), (Permutation (merge q gv1) (join gv1 gv1 gv3)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1)), (Permutation (merge q gv1) (carry q gv3)), (Permutation (merge q gv1) (carry gv1 gv3)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1))
(Permutation (merge q gv1) []), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (gv3 :: q)), (Permutation (merge gv1 q) (gv3 :: gv1)), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (heap_delete_max gv3)), (Permutation (merge gv1 q) (join q q gv3))
(Permutation (merge gv1 q) (join q gv1 gv3)), (Permutation (merge gv1 q) (join gv1 q gv3)), (Permutation (merge gv1 q) (join gv1 gv1 gv3)), (Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1)), (Permutation (merge gv1 q) (carry q gv3)), (Permutation (merge gv1 q) (carry gv1 gv3)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q))
(Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (gv3 :: q)), (Permutation (merge gv1 gv1) (gv3 :: gv1)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (heap_delete_max gv3))
(Permutation (merge gv1 gv1) (join q q gv3)), (Permutation (merge gv1 gv1) (join q gv1 gv3)), (Permutation (merge gv1 gv1) (join gv1 q gv3)), (Permutation (merge gv1 gv1) (join gv1 gv1 gv3)), (Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (carry q gv3)), (Permutation (merge gv1 gv1) (carry gv1 gv3)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1))
(Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (heap_delete_max gv3) q), (Permutation (heap_delete_max gv3) gv1), (Permutation (heap_delete_max gv3) (gv3 :: q)), (Permutation (heap_delete_max gv3) (gv3 :: gv1)), (Permutation (heap_delete_max gv3) (merge q q)), (Permutation (heap_delete_max gv3) (merge q gv1)), (Permutation (heap_delete_max gv3) (merge gv1 q))
(Permutation (heap_delete_max gv3) (merge gv1 gv1)), (Permutation (heap_delete_max gv3) (join q q gv3)), (Permutation (heap_delete_max gv3) (join q gv1 gv3)), (Permutation (heap_delete_max gv3) (join gv1 q gv3)), (Permutation (heap_delete_max gv3) (join gv1 gv1 gv3)), (Permutation (heap_delete_max gv3) (insert x q)), (Permutation (heap_delete_max gv3) (insert x gv1)), (Permutation (heap_delete_max gv3) (carry q gv3)), (Permutation (heap_delete_max gv3) (carry gv1 gv3)), (Permutation (heap_delete_max gv3) (q ++ q))
(Permutation (heap_delete_max gv3) (q ++ gv1)), (Permutation (heap_delete_max gv3) (gv1 ++ q)), (Permutation (heap_delete_max gv3) (gv1 ++ gv1)), (Permutation (heap_delete_max gv3) []), (Permutation (join q q gv3) q), (Permutation (join q q gv3) gv1), (Permutation (join q q gv3) (gv3 :: q)), (Permutation (join q q gv3) (gv3 :: gv1)), (Permutation (join q q gv3) (merge q q)), (Permutation (join q q gv3) (merge q gv1))
(Permutation (join q q gv3) (merge gv1 q)), (Permutation (join q q gv3) (merge gv1 gv1)), (Permutation (join q q gv3) (heap_delete_max gv3)), (Permutation (join q q gv3) (join q gv1 gv3)), (Permutation (join q q gv3) (join gv1 q gv3)), (Permutation (join q q gv3) (join gv1 gv1 gv3)), (Permutation (join q q gv3) (insert x q)), (Permutation (join q q gv3) (insert x gv1)), (Permutation (join q q gv3) (carry q gv3)), (Permutation (join q q gv3) (carry gv1 gv3))
(Permutation (join q q gv3) (q ++ q)), (Permutation (join q q gv3) (q ++ gv1)), (Permutation (join q q gv3) (gv1 ++ q)), (Permutation (join q q gv3) (gv1 ++ gv1)), (Permutation (join q q gv3) []), (Permutation (join q gv1 gv3) q), (Permutation (join q gv1 gv3) gv1), (Permutation (join q gv1 gv3) (gv3 :: q)), (Permutation (join q gv1 gv3) (gv3 :: gv1)), (Permutation (join q gv1 gv3) (merge q q))
(Permutation (join q gv1 gv3) (merge q gv1)), (Permutation (join q gv1 gv3) (merge gv1 q)), (Permutation (join q gv1 gv3) (merge gv1 gv1)), (Permutation (join q gv1 gv3) (heap_delete_max gv3)), (Permutation (join q gv1 gv3) (join q q gv3)), (Permutation (join q gv1 gv3) (join gv1 q gv3)), (Permutation (join q gv1 gv3) (join gv1 gv1 gv3)), (Permutation (join q gv1 gv3) (insert x q)), (Permutation (join q gv1 gv3) (insert x gv1)), (Permutation (join q gv1 gv3) (carry q gv3))
(Permutation (join q gv1 gv3) (carry gv1 gv3)), (Permutation (join q gv1 gv3) (q ++ q)), (Permutation (join q gv1 gv3) (q ++ gv1)), (Permutation (join q gv1 gv3) (gv1 ++ q)), (Permutation (join q gv1 gv3) (gv1 ++ gv1)), (Permutation (join q gv1 gv3) []), (Permutation (join gv1 q gv3) q), (Permutation (join gv1 q gv3) gv1), (Permutation (join gv1 q gv3) (gv3 :: q)), (Permutation (join gv1 q gv3) (gv3 :: gv1))
(Permutation (join gv1 q gv3) (merge q q)), (Permutation (join gv1 q gv3) (merge q gv1)), (Permutation (join gv1 q gv3) (merge gv1 q)), (Permutation (join gv1 q gv3) (merge gv1 gv1)), (Permutation (join gv1 q gv3) (heap_delete_max gv3)), (Permutation (join gv1 q gv3) (join q q gv3)), (Permutation (join gv1 q gv3) (join q gv1 gv3)), (Permutation (join gv1 q gv3) (join gv1 gv1 gv3)), (Permutation (join gv1 q gv3) (insert x q)), (Permutation (join gv1 q gv3) (insert x gv1))
(Permutation (join gv1 q gv3) (carry q gv3)), (Permutation (join gv1 q gv3) (carry gv1 gv3)), (Permutation (join gv1 q gv3) (q ++ q)), (Permutation (join gv1 q gv3) (q ++ gv1)), (Permutation (join gv1 q gv3) (gv1 ++ q)), (Permutation (join gv1 q gv3) (gv1 ++ gv1)), (Permutation (join gv1 q gv3) []), (Permutation (join gv1 gv1 gv3) q), (Permutation (join gv1 gv1 gv3) gv1), (Permutation (join gv1 gv1 gv3) (gv3 :: q))
(Permutation (join gv1 gv1 gv3) (gv3 :: gv1)), (Permutation (join gv1 gv1 gv3) (merge q q)), (Permutation (join gv1 gv1 gv3) (merge q gv1)), (Permutation (join gv1 gv1 gv3) (merge gv1 q)), (Permutation (join gv1 gv1 gv3) (merge gv1 gv1)), (Permutation (join gv1 gv1 gv3) (heap_delete_max gv3)), (Permutation (join gv1 gv1 gv3) (join q q gv3)), (Permutation (join gv1 gv1 gv3) (join q gv1 gv3)), (Permutation (join gv1 gv1 gv3) (join gv1 q gv3)), (Permutation (join gv1 gv1 gv3) (insert x q))
(Permutation (join gv1 gv1 gv3) (insert x gv1)), (Permutation (join gv1 gv1 gv3) (carry q gv3)), (Permutation (join gv1 gv1 gv3) (carry gv1 gv3)), (Permutation (join gv1 gv1 gv3) (q ++ q)), (Permutation (join gv1 gv1 gv3) (q ++ gv1)), (Permutation (join gv1 gv1 gv3) (gv1 ++ q)), (Permutation (join gv1 gv1 gv3) (gv1 ++ gv1)), (Permutation (join gv1 gv1 gv3) []), (Permutation (insert x q) q), (Permutation (insert x q) gv1)
(Permutation (insert x q) (gv3 :: q)), (Permutation (insert x q) (gv3 :: gv1)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q)), (Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (heap_delete_max gv3)), (Permutation (insert x q) (join q q gv3)), (Permutation (insert x q) (join q gv1 gv3)), (Permutation (insert x q) (join gv1 q gv3))
(Permutation (insert x q) (join gv1 gv1 gv3)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (carry q gv3)), (Permutation (insert x q) (carry gv1 gv3)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1)), (Permutation (insert x q) []), (Permutation (insert x gv1) q)
(Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (gv3 :: q)), (Permutation (insert x gv1) (gv3 :: gv1)), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (heap_delete_max gv3)), (Permutation (insert x gv1) (join q q gv3)), (Permutation (insert x gv1) (join q gv1 gv3))
(Permutation (insert x gv1) (join gv1 q gv3)), (Permutation (insert x gv1) (join gv1 gv1 gv3)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (carry q gv3)), (Permutation (insert x gv1) (carry gv1 gv3)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1)), (Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) [])
(Permutation (carry q gv3) q), (Permutation (carry q gv3) gv1), (Permutation (carry q gv3) (gv3 :: q)), (Permutation (carry q gv3) (gv3 :: gv1)), (Permutation (carry q gv3) (merge q q)), (Permutation (carry q gv3) (merge q gv1)), (Permutation (carry q gv3) (merge gv1 q)), (Permutation (carry q gv3) (merge gv1 gv1)), (Permutation (carry q gv3) (heap_delete_max gv3)), (Permutation (carry q gv3) (join q q gv3))
(Permutation (carry q gv3) (join q gv1 gv3)), (Permutation (carry q gv3) (join gv1 q gv3)), (Permutation (carry q gv3) (join gv1 gv1 gv3)), (Permutation (carry q gv3) (insert x q)), (Permutation (carry q gv3) (insert x gv1)), (Permutation (carry q gv3) (carry gv1 gv3)), (Permutation (carry q gv3) (q ++ q)), (Permutation (carry q gv3) (q ++ gv1)), (Permutation (carry q gv3) (gv1 ++ q)), (Permutation (carry q gv3) (gv1 ++ gv1))
(Permutation (carry q gv3) []), (Permutation (carry gv1 gv3) q), (Permutation (carry gv1 gv3) gv1), (Permutation (carry gv1 gv3) (gv3 :: q)), (Permutation (carry gv1 gv3) (gv3 :: gv1)), (Permutation (carry gv1 gv3) (merge q q)), (Permutation (carry gv1 gv3) (merge q gv1)), (Permutation (carry gv1 gv3) (merge gv1 q)), (Permutation (carry gv1 gv3) (merge gv1 gv1)), (Permutation (carry gv1 gv3) (heap_delete_max gv3))
(Permutation (carry gv1 gv3) (join q q gv3)), (Permutation (carry gv1 gv3) (join q gv1 gv3)), (Permutation (carry gv1 gv3) (join gv1 q gv3)), (Permutation (carry gv1 gv3) (join gv1 gv1 gv3)), (Permutation (carry gv1 gv3) (insert x q)), (Permutation (carry gv1 gv3) (insert x gv1)), (Permutation (carry gv1 gv3) (carry q gv3)), (Permutation (carry gv1 gv3) (q ++ q)), (Permutation (carry gv1 gv3) (q ++ gv1)), (Permutation (carry gv1 gv3) (gv1 ++ q))
(Permutation (carry gv1 gv3) (gv1 ++ gv1)), (Permutation (carry gv1 gv3) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) (gv3 :: q)), (Permutation (q ++ q) (gv3 :: gv1)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1))
(Permutation (q ++ q) (heap_delete_max gv3)), (Permutation (q ++ q) (join q q gv3)), (Permutation (q ++ q) (join q gv1 gv3)), (Permutation (q ++ q) (join gv1 q gv3)), (Permutation (q ++ q) (join gv1 gv1 gv3)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (carry q gv3)), (Permutation (q ++ q) (carry gv1 gv3)), (Permutation (q ++ q) (q ++ gv1))
(Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (gv3 :: q)), (Permutation (q ++ gv1) (gv3 :: gv1)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q))
(Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (heap_delete_max gv3)), (Permutation (q ++ gv1) (join q q gv3)), (Permutation (q ++ gv1) (join q gv1 gv3)), (Permutation (q ++ gv1) (join gv1 q gv3)), (Permutation (q ++ gv1) (join gv1 gv1 gv3)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (carry q gv3)), (Permutation (q ++ gv1) (carry gv1 gv3))
(Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (gv3 :: q)), (Permutation (gv1 ++ q) (gv3 :: gv1)), (Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1))
(Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (heap_delete_max gv3)), (Permutation (gv1 ++ q) (join q q gv3)), (Permutation (gv1 ++ q) (join q gv1 gv3)), (Permutation (gv1 ++ q) (join gv1 q gv3)), (Permutation (gv1 ++ q) (join gv1 gv1 gv3)), (Permutation (gv1 ++ q) (insert x q)), (Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (carry q gv3))
(Permutation (gv1 ++ q) (carry gv1 gv3)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (gv3 :: q)), (Permutation (gv1 ++ gv1) (gv3 :: gv1)), (Permutation (gv1 ++ gv1) (merge q q))
(Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (heap_delete_max gv3)), (Permutation (gv1 ++ gv1) (join q q gv3)), (Permutation (gv1 ++ gv1) (join q gv1 gv3)), (Permutation (gv1 ++ gv1) (join gv1 q gv3)), (Permutation (gv1 ++ gv1) (join gv1 gv1 gv3)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1))
(Permutation (gv1 ++ gv1) (carry q gv3)), (Permutation (gv1 ++ gv1) (carry gv1 gv3)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] (gv3 :: q)), (Permutation [] (gv3 :: gv1))
(Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (heap_delete_max gv3)), (Permutation [] (join q q gv3)), (Permutation [] (join q gv1 gv3)), (Permutation [] (join gv1 q gv3)), (Permutation [] (join gv1 gv1 gv3)), (Permutation [] (insert x q))
(Permutation [] (insert x gv1)), (Permutation [] (carry q gv3)), (Permutation [] (carry gv1 gv3)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (In gv3 (gv3 :: q)), (In gv3 (gv3 :: gv1)), (In gv3 (merge q q))
(In gv3 (merge q gv1)), (In gv3 (merge gv1 q)), (In gv3 (merge gv1 gv1)), (In gv3 (heap_delete_max gv3)), (In gv3 (join q q gv3)), (In gv3 (join q gv1 gv3)), (In gv3 (join gv1 q gv3)), (In gv3 (join gv1 gv1 gv3)), (In gv3 (insert x q)), (In gv3 (insert x gv1))
(In gv3 (carry q gv3)), (In gv3 (carry gv1 gv3)), (In gv3 (q ++ q)), (In gv3 (q ++ gv1)), (In gv3 (gv1 ++ q)), (In gv3 (gv1 ++ gv1)), (In (Node x gv3 gv3) q), (In (Node x gv3 gv3) gv1), (In (Node x gv3 gv3) (gv3 :: q)), (In (Node x gv3 gv3) (gv3 :: gv1))
(In (Node x gv3 gv3) (merge q q)), (In (Node x gv3 gv3) (merge q gv1)), (In (Node x gv3 gv3) (merge gv1 q)), (In (Node x gv3 gv3) (merge gv1 gv1)), (In (Node x gv3 gv3) (heap_delete_max gv3)), (In (Node x gv3 gv3) (join q q gv3)), (In (Node x gv3 gv3) (join q gv1 gv3)), (In (Node x gv3 gv3) (join gv1 q gv3)), (In (Node x gv3 gv3) (join gv1 gv1 gv3)), (In (Node x gv3 gv3) (insert x q))
(In (Node x gv3 gv3) (insert x gv1)), (In (Node x gv3 gv3) (carry q gv3)), (In (Node x gv3 gv3) (carry gv1 gv3)), (In (Node x gv3 gv3) (q ++ q)), (In (Node x gv3 gv3) (q ++ gv1)), (In (Node x gv3 gv3) (gv1 ++ q)), (In (Node x gv3 gv3) (gv1 ++ gv1)), (In (smash gv3 gv3) q), (In (smash gv3 gv3) gv1), (In (smash gv3 gv3) (gv3 :: q))
(In (smash gv3 gv3) (gv3 :: gv1)), (In (smash gv3 gv3) (merge q q)), (In (smash gv3 gv3) (merge q gv1)), (In (smash gv3 gv3) (merge gv1 q)), (In (smash gv3 gv3) (merge gv1 gv1)), (In (smash gv3 gv3) (heap_delete_max gv3)), (In (smash gv3 gv3) (join q q gv3)), (In (smash gv3 gv3) (join q gv1 gv3)), (In (smash gv3 gv3) (join gv1 q gv3)), (In (smash gv3 gv3) (join gv1 gv1 gv3))
(In (smash gv3 gv3) (insert x q)), (In (smash gv3 gv3) (insert x gv1)), (In (smash gv3 gv3) (carry q gv3)), (In (smash gv3 gv3) (carry gv1 gv3)), (In (smash gv3 gv3) (q ++ q)), (In (smash gv3 gv3) (q ++ gv1)), (In (smash gv3 gv3) (gv1 ++ q)), (In (smash gv3 gv3) (gv1 ++ gv1)), (In Leaf q), (In Leaf gv1)
(In Leaf (gv3 :: q)), (In Leaf (gv3 :: gv1)), (In Leaf (merge q q)), (In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (heap_delete_max gv3)), (In Leaf (join q q gv3)), (In Leaf (join q gv1 gv3)), (In Leaf (join gv1 q gv3))
(In Leaf (join gv1 gv1 gv3)), (In Leaf (insert x q)), (In Leaf (insert x gv1)), (In Leaf (carry q gv3)), (In Leaf (carry gv1 gv3)), (In Leaf (q ++ q)), (In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q)
(x < find_max' x gv1), (x < length q), (x < length gv1), (find_max' x q < x), (find_max' x q < find_max' x gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < find_max' x q), (find_max' x gv1 < length q)
(find_max' x gv1 < length gv1), (length q < x), (length q < find_max' x q), (length q < find_max' x gv1), (length q < length gv1), (length gv1 < x), (length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < length q), (x <= find_max' x q)
(x <= find_max' x gv1), (x <= length q), (x <= length gv1), (find_max' x q <= x), (find_max' x q <= find_max' x gv1), (find_max' x q <= length q), (find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= find_max' x q), (find_max' x gv1 <= length q)
(find_max' x gv1 <= length gv1), (length q <= x), (length q <= find_max' x q), (length q <= find_max' x gv1), (length q <= length gv1), (length gv1 <= x), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1), (length gv1 <= length q), (~ priq q)
(~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ pow2heap x gv3), (~ pow2heapp x x gv3), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ In gv3 q)
(~ In gv3 gv1), (~ x < x), (~ x <= x), (x <> x), (gv3 <> gv3), (q <> q), (q <> gv1), (gv1 <> q), (gv1 <> gv1), (None = Some q)
(None = Some gv1), (gv3 :: q = q), (gv3 :: q = gv1), (gv3 :: q = merge q q), (gv3 :: q = merge q gv1), (gv3 :: q = merge gv1 q), (gv3 :: q = merge gv1 gv1), (gv3 :: q = heap_delete_max gv3), (gv3 :: q = join q q gv3), (gv3 :: q = join q gv1 gv3)
(gv3 :: q = join gv1 q gv3), (gv3 :: q = join gv1 gv1 gv3), (gv3 :: q = insert x q), (gv3 :: q = insert x gv1), (gv3 :: q = carry q gv3), (gv3 :: q = carry gv1 gv3), (gv3 :: q = q ++ q), (gv3 :: q = q ++ gv1), (gv3 :: q = gv1 ++ q), (gv3 :: q = gv1 ++ gv1)
(gv3 :: q = []), (gv3 :: gv1 = q), (gv3 :: gv1 = gv1), (gv3 :: gv1 = merge q q), (gv3 :: gv1 = merge q gv1), (gv3 :: gv1 = merge gv1 q), (gv3 :: gv1 = merge gv1 gv1), (gv3 :: gv1 = heap_delete_max gv3), (gv3 :: gv1 = join q q gv3), (gv3 :: gv1 = join q gv1 gv3)
(gv3 :: gv1 = join gv1 q gv3), (gv3 :: gv1 = join gv1 gv1 gv3), (gv3 :: gv1 = insert x q), (gv3 :: gv1 = insert x gv1), (gv3 :: gv1 = carry q gv3), (gv3 :: gv1 = carry gv1 gv3), (gv3 :: gv1 = q ++ q), (gv3 :: gv1 = q ++ gv1), (gv3 :: gv1 = gv1 ++ q), (gv3 :: gv1 = gv1 ++ gv1)
(gv3 :: gv1 = []), (merge q q = q), (merge q q = gv1), (merge q q = heap_delete_max gv3), (merge q q = join q q gv3), (merge q q = join q gv1 gv3), (merge q q = join gv1 q gv3), (merge q q = join gv1 gv1 gv3), (merge q q = insert x q), (merge q q = insert x gv1)
(merge q q = carry q gv3), (merge q q = carry gv1 gv3), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1), (merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = heap_delete_max gv3), (merge q gv1 = join q q gv3)
(merge q gv1 = join q gv1 gv3), (merge q gv1 = join gv1 q gv3), (merge q gv1 = join gv1 gv1 gv3), (merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = carry q gv3), (merge q gv1 = carry gv1 gv3), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q)
(merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = heap_delete_max gv3), (merge gv1 q = join q q gv3), (merge gv1 q = join q gv1 gv3), (merge gv1 q = join gv1 q gv3), (merge gv1 q = join gv1 gv1 gv3), (merge gv1 q = insert x q), (merge gv1 q = insert x gv1)
(merge gv1 q = carry q gv3), (merge gv1 q = carry gv1 gv3), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = heap_delete_max gv3), (merge gv1 gv1 = join q q gv3)
(merge gv1 gv1 = join q gv1 gv3), (merge gv1 gv1 = join gv1 q gv3), (merge gv1 gv1 = join gv1 gv1 gv3), (merge gv1 gv1 = insert x q), (merge gv1 gv1 = insert x gv1), (merge gv1 gv1 = carry q gv3), (merge gv1 gv1 = carry gv1 gv3), (merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q)
(merge gv1 gv1 = gv1 ++ gv1), (heap_delete_max gv3 = q), (heap_delete_max gv3 = gv1), (heap_delete_max gv3 = carry q gv3), (heap_delete_max gv3 = carry gv1 gv3), (heap_delete_max gv3 = q ++ q), (heap_delete_max gv3 = q ++ gv1), (heap_delete_max gv3 = gv1 ++ q), (heap_delete_max gv3 = gv1 ++ gv1), (join q q gv3 = q)
(join q q gv3 = gv1), (join q q gv3 = heap_delete_max gv3), (join q q gv3 = insert x q), (join q q gv3 = insert x gv1), (join q q gv3 = carry q gv3), (join q q gv3 = carry gv1 gv3), (join q q gv3 = q ++ q), (join q q gv3 = q ++ gv1), (join q q gv3 = gv1 ++ q), (join q q gv3 = gv1 ++ gv1)
(join q gv1 gv3 = q), (join q gv1 gv3 = gv1), (join q gv1 gv3 = heap_delete_max gv3), (join q gv1 gv3 = insert x q), (join q gv1 gv3 = insert x gv1), (join q gv1 gv3 = carry q gv3), (join q gv1 gv3 = carry gv1 gv3), (join q gv1 gv3 = q ++ q), (join q gv1 gv3 = q ++ gv1), (join q gv1 gv3 = gv1 ++ q)
(join q gv1 gv3 = gv1 ++ gv1), (join gv1 q gv3 = q), (join gv1 q gv3 = gv1), (join gv1 q gv3 = heap_delete_max gv3), (join gv1 q gv3 = insert x q), (join gv1 q gv3 = insert x gv1), (join gv1 q gv3 = carry q gv3), (join gv1 q gv3 = carry gv1 gv3), (join gv1 q gv3 = q ++ q), (join gv1 q gv3 = q ++ gv1)
(join gv1 q gv3 = gv1 ++ q), (join gv1 q gv3 = gv1 ++ gv1), (join gv1 gv1 gv3 = q), (join gv1 gv1 gv3 = gv1), (join gv1 gv1 gv3 = heap_delete_max gv3), (join gv1 gv1 gv3 = insert x q), (join gv1 gv1 gv3 = insert x gv1), (join gv1 gv1 gv3 = carry q gv3), (join gv1 gv1 gv3 = carry gv1 gv3), (join gv1 gv1 gv3 = q ++ q)
(join gv1 gv1 gv3 = q ++ gv1), (join gv1 gv1 gv3 = gv1 ++ q), (join gv1 gv1 gv3 = gv1 ++ gv1), (insert x q = q), (insert x q = gv1), (insert x q = heap_delete_max gv3), (insert x q = carry q gv3), (insert x q = carry gv1 gv3), (insert x q = q ++ q), (insert x q = q ++ gv1)
(insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1), (insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = heap_delete_max gv3), (insert x gv1 = carry q gv3), (insert x gv1 = carry gv1 gv3), (insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q)
(insert x gv1 = gv1 ++ gv1), (carry q gv3 = q), (carry q gv3 = gv1), (carry q gv3 = q ++ q), (carry q gv3 = q ++ gv1), (carry q gv3 = gv1 ++ q), (carry q gv3 = gv1 ++ gv1), (carry gv1 gv3 = q), (carry gv1 gv3 = gv1), (carry gv1 gv3 = q ++ q)
(carry gv1 gv3 = q ++ gv1), (carry gv1 gv3 = gv1 ++ q), (carry gv1 gv3 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q)
(gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = heap_delete_max gv3), ([] = join q q gv3), ([] = join q gv1 gv3)
([] = join gv1 q gv3), ([] = join gv1 gv1 gv3), ([] = insert x q), ([] = insert x gv1), ([] = carry q gv3), ([] = carry gv1 gv3), ([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1)
((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1), ((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1), (Node x gv3 gv3 = gv3), (Node x gv3 gv3 = smash gv3 gv3)
(smash gv3 gv3 = gv3), (Leaf = Node x gv3 gv3), (Leaf = smash gv3 gv3), (find_max' x q = x), (find_max' x gv1 = x), (length q = x), (length q = find_max' x q), (length q = find_max' x gv1), (length gv1 = x), (length gv1 = find_max' x q)
(length gv1 = find_max' x gv1), (Some x = find_max q), (Some x = find_max gv1), (None = Some x), (None = find_max q), (None = find_max gv1), (None = Some gv3), ((x >? x) = (x >=? x))

Label: 6 (6)
(priq q), (priqq x q), (priqq gv0 q), (Permutation q q), (x < x), (x < gv0), (gv0 < x), (gv0 < gv0), (x <= x), (x <= gv0)
(gv0 <= x), (gv0 <= gv0), (q = q), (x = x), (x = gv0), (gv0 = x), (gv0 = gv0), (false = (x >? x)), (false = (x >? gv0)), (false = (gv0 >? x))
(false = (gv0 >? gv0)), (false = (x >=? x)), (false = (x >=? gv0)), (false = (gv0 >=? x)), (false = (gv0 >=? gv0)), (true = (x >? x)), (true = (x >? gv0)), (true = (gv0 >? x)), (true = (gv0 >? gv0)), (true = (x >=? x))
(true = (x >=? gv0)), (true = (gv0 >=? x)), (true = (gv0 >=? gv0)), (Abs q []), (Abs (merge q q) []), (Abs (insert x q) []), (Abs (insert gv0 q) []), (Abs (q ++ q) []), (Abs [] []), (priqueue_elems q [])
(priqueue_elems (merge q q) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert gv0 q) []), (priqueue_elems (q ++ q) []), (priqueue_elems [] []), (tree_elems Leaf []), (priq (merge q q)), (priq (insert x q)), (priq (insert gv0 q)), (priq (q ++ q))
(priqq x (merge q q)), (priqq x (insert x q)), (priqq x (insert gv0 q)), (priqq x (q ++ q)), (priqq gv0 (merge q q)), (priqq gv0 (insert x q)), (priqq gv0 (insert gv0 q)), (priqq gv0 (q ++ q)), (priqq (find_max' x q) q), (priqq (find_max' x q) (merge q q))
(priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert gv0 q)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' gv0 q) q), (priqq (find_max' gv0 q) (merge q q)), (priqq (find_max' gv0 q) (insert x q)), (priqq (find_max' gv0 q) (insert gv0 q)), (priqq (find_max' gv0 q) (q ++ q)), (priqq (length q) q), (priqq (length q) (merge q q))
(priqq (length q) (insert x q)), (priqq (length q) (insert gv0 q)), (priqq (length q) (q ++ q)), (pow2heapp x x Leaf), (pow2heapp x gv0 Leaf), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' gv0 q) Leaf), (pow2heapp x (length q) Leaf), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 Leaf)
(pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (length q) Leaf), (pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) gv0 Leaf), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' gv0 q) x Leaf), (pow2heapp (find_max' gv0 q) gv0 Leaf)
(pow2heapp (find_max' gv0 q) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 q) (length q) Leaf), (pow2heapp (length q) x Leaf), (pow2heapp (length q) gv0 Leaf), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' gv0 q) Leaf), (pow2heapp (length q) (length q) Leaf), (Permutation q (merge q q)), (Permutation q (insert x q))
(Permutation q (insert gv0 q)), (Permutation q (q ++ q)), (Permutation q []), (Permutation (merge q q) q), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert gv0 q)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) []), (Permutation (insert x q) q), (Permutation (insert x q) (merge q q))
(Permutation (insert x q) (insert gv0 q)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) []), (Permutation (insert gv0 q) q), (Permutation (insert gv0 q) (merge q q)), (Permutation (insert gv0 q) (insert x q)), (Permutation (insert gv0 q) (q ++ q)), (Permutation (insert gv0 q) []), (Permutation (q ++ q) q), (Permutation (q ++ q) (merge q q))
(Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert gv0 q)), (Permutation (q ++ q) []), (Permutation [] q), (Permutation [] (merge q q)), (Permutation [] (insert x q)), (Permutation [] (insert gv0 q)), (Permutation [] (q ++ q)), (In Leaf q), (In Leaf (merge q q))
(In Leaf (insert x q)), (In Leaf (insert gv0 q)), (In Leaf (q ++ q)), (x < find_max' x q), (x < find_max' gv0 q), (x < length q), (gv0 < find_max' x q), (gv0 < find_max' gv0 q), (gv0 < length q), (find_max' x q < x)
(find_max' x q < gv0), (find_max' x q < find_max' gv0 q), (find_max' x q < length q), (find_max' gv0 q < x), (find_max' gv0 q < gv0), (find_max' gv0 q < find_max' x q), (find_max' gv0 q < length q), (length q < x), (length q < gv0), (length q < find_max' x q)
(length q < find_max' gv0 q), (x <= find_max' x q), (x <= find_max' gv0 q), (x <= length q), (gv0 <= find_max' x q), (gv0 <= find_max' gv0 q), (gv0 <= length q), (find_max' x q <= x), (find_max' x q <= gv0), (find_max' x q <= find_max' gv0 q)
(find_max' x q <= length q), (find_max' gv0 q <= x), (find_max' gv0 q <= gv0), (find_max' gv0 q <= find_max' x q), (find_max' gv0 q <= length q), (length q <= x), (length q <= gv0), (length q <= find_max' x q), (length q <= find_max' gv0 q), (~ priq q)
(~ priqq x q), (~ priqq gv0 q), (~ Permutation q q), (~ x < x), (~ x < gv0), (~ gv0 < x), (~ gv0 < gv0), (~ x <= x), (~ x <= gv0), (~ gv0 <= x)
(~ gv0 <= gv0), (q <> q), (x <> x), (x <> gv0), (gv0 <> x), (gv0 <> gv0), (None = Some q), (merge q q = q), (merge q q = insert x q), (merge q q = insert gv0 q)
(merge q q = q ++ q), (insert x q = q), (insert x q = q ++ q), (insert gv0 q = q), (insert gv0 q = q ++ q), (q ++ q = q), ([] = q), ([] = merge q q), ([] = insert x q), ([] = insert gv0 q)
([] = q ++ q), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux gv0 q), (find_max' x q = x), (find_max' x q = gv0), (find_max' gv0 q = x), (find_max' gv0 q = gv0), (length q = x), (length q = gv0), (length q = find_max' x q)
(length q = find_max' gv0 q), (Some x = find_max q), (Some gv0 = find_max q), (None = Some x), (None = Some gv0), (None = find_max q), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? gv0)), ((x >? x) = (gv0 >=? x)), ((x >? x) = (gv0 >=? gv0))
((x >? gv0) = (x >=? x)), ((x >? gv0) = (x >=? gv0)), ((x >? gv0) = (gv0 >=? x)), ((x >? gv0) = (gv0 >=? gv0)), ((gv0 >? x) = (x >=? x)), ((gv0 >? x) = (x >=? gv0)), ((gv0 >? x) = (gv0 >=? x)), ((gv0 >? x) = (gv0 >=? gv0)), ((gv0 >? gv0) = (x >=? x)), ((gv0 >? gv0) = (x >=? gv0))
((gv0 >? gv0) = (gv0 >=? x)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 7 (7)
(priq q), (priq gv2), (priqq x q), (priqq x gv2), (pow2heap x gv4), (pow2heapp x x gv4), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2)
(In gv4 q), (In gv4 gv2), (x < x), (x <= x), (x = x), (gv4 = gv4), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2)
(false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q []), (Abs gv2 []), (Abs (gv4 :: q) []), (Abs (gv4 :: gv2) []), (Abs (merge q q) []), (Abs (merge q gv2) [])
(Abs (merge gv2 q) []), (Abs (merge gv2 gv2) []), (Abs (heap_delete_max gv4) []), (Abs (join q q gv4) []), (Abs (join q gv2 gv4) []), (Abs (join gv2 q gv4) []), (Abs (join gv2 gv2 gv4) []), (Abs (insert x q) []), (Abs (insert x gv2) []), (Abs (carry q gv4) [])
(Abs (carry gv2 gv4) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (gv4 :: q) []), (priqueue_elems (gv4 :: gv2) [])
(priqueue_elems (merge q q) []), (priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (heap_delete_max gv4) []), (priqueue_elems (join q q gv4) []), (priqueue_elems (join q gv2 gv4) []), (priqueue_elems (join gv2 q gv4) []), (priqueue_elems (join gv2 gv2 gv4) []), (priqueue_elems (insert x q) [])
(priqueue_elems (insert x gv2) []), (priqueue_elems (carry q gv4) []), (priqueue_elems (carry gv2 gv4) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) []), (priqueue_elems (gv2 ++ gv2) []), (priqueue_elems [] []), (tree_elems gv4 []), (tree_elems (Node x gv4 gv4) [])
(tree_elems (smash gv4 gv4) []), (tree_elems Leaf []), (priq (gv4 :: q)), (priq (gv4 :: gv2)), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2)), (priq (heap_delete_max gv4)), (priq (join q q gv4))
(priq (join q gv2 gv4)), (priq (join gv2 q gv4)), (priq (join gv2 gv2 gv4)), (priq (insert x q)), (priq (insert x gv2)), (priq (carry q gv4)), (priq (carry gv2 gv4)), (priq (q ++ q)), (priq (q ++ gv2)), (priq (gv2 ++ q))
(priq (gv2 ++ gv2)), (priqq x (gv4 :: q)), (priqq x (gv4 :: gv2)), (priqq x (merge q q)), (priqq x (merge q gv2)), (priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (heap_delete_max gv4)), (priqq x (join q q gv4)), (priqq x (join q gv2 gv4))
(priqq x (join gv2 q gv4)), (priqq x (join gv2 gv2 gv4)), (priqq x (insert x q)), (priqq x (insert x gv2)), (priqq x (carry q gv4)), (priqq x (carry gv2 gv4)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2))
(priqq (find_max' x q) q), (priqq (find_max' x q) gv2), (priqq (find_max' x q) (gv4 :: q)), (priqq (find_max' x q) (gv4 :: gv2)), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q)), (priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (heap_delete_max gv4)), (priqq (find_max' x q) (join q q gv4))
(priqq (find_max' x q) (join q gv2 gv4)), (priqq (find_max' x q) (join gv2 q gv4)), (priqq (find_max' x q) (join gv2 gv2 gv4)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2)), (priqq (find_max' x q) (carry q gv4)), (priqq (find_max' x q) (carry gv2 gv4)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q))
(priqq (find_max' x q) (gv2 ++ gv2)), (priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) (gv4 :: q)), (priqq (find_max' x gv2) (gv4 :: gv2)), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2)), (priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (heap_delete_max gv4))
(priqq (find_max' x gv2) (join q q gv4)), (priqq (find_max' x gv2) (join q gv2 gv4)), (priqq (find_max' x gv2) (join gv2 q gv4)), (priqq (find_max' x gv2) (join gv2 gv2 gv4)), (priqq (find_max' x gv2) (insert x q)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (carry q gv4)), (priqq (find_max' x gv2) (carry gv2 gv4)), (priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2))
(priqq (find_max' x gv2) (gv2 ++ q)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (gv4 :: q)), (priqq (length q) (gv4 :: gv2)), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv2)), (priqq (length q) (merge gv2 q)), (priqq (length q) (merge gv2 gv2))
(priqq (length q) (heap_delete_max gv4)), (priqq (length q) (join q q gv4)), (priqq (length q) (join q gv2 gv4)), (priqq (length q) (join gv2 q gv4)), (priqq (length q) (join gv2 gv2 gv4)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv2)), (priqq (length q) (carry q gv4)), (priqq (length q) (carry gv2 gv4)), (priqq (length q) (q ++ q))
(priqq (length q) (q ++ gv2)), (priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q), (priqq (length gv2) gv2), (priqq (length gv2) (gv4 :: q)), (priqq (length gv2) (gv4 :: gv2)), (priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q))
(priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (heap_delete_max gv4)), (priqq (length gv2) (join q q gv4)), (priqq (length gv2) (join q gv2 gv4)), (priqq (length gv2) (join gv2 q gv4)), (priqq (length gv2) (join gv2 gv2 gv4)), (priqq (length gv2) (insert x q)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (carry q gv4)), (priqq (length gv2) (carry gv2 gv4))
(priqq (length gv2) (q ++ q)), (priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2)), (pow2heap x (Node x gv4 gv4)), (pow2heap x (smash gv4 gv4)), (pow2heap (find_max' x q) gv4), (pow2heap (find_max' x q) (Node x gv4 gv4)), (pow2heap (find_max' x q) (smash gv4 gv4)), (pow2heap (find_max' x gv2) gv4)
(pow2heap (find_max' x gv2) (Node x gv4 gv4)), (pow2heap (find_max' x gv2) (smash gv4 gv4)), (pow2heap (length q) gv4), (pow2heap (length q) (Node x gv4 gv4)), (pow2heap (length q) (smash gv4 gv4)), (pow2heap (length gv2) gv4), (pow2heap (length gv2) (Node x gv4 gv4)), (pow2heap (length gv2) (smash gv4 gv4)), (pow2heapp x x (Node x gv4 gv4)), (pow2heapp x x (smash gv4 gv4))
(pow2heapp x x Leaf), (pow2heapp x (find_max' x q) gv4), (pow2heapp x (find_max' x q) (Node x gv4 gv4)), (pow2heapp x (find_max' x q) (smash gv4 gv4)), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) gv4), (pow2heapp x (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp x (find_max' x gv2) (smash gv4 gv4)), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (length q) gv4)
(pow2heapp x (length q) (Node x gv4 gv4)), (pow2heapp x (length q) (smash gv4 gv4)), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv2) gv4), (pow2heapp x (length gv2) (Node x gv4 gv4)), (pow2heapp x (length gv2) (smash gv4 gv4)), (pow2heapp x (length gv2) Leaf), (pow2heapp (find_max' x q) x gv4), (pow2heapp (find_max' x q) x (Node x gv4 gv4)), (pow2heapp (find_max' x q) x (smash gv4 gv4))
(pow2heapp (find_max' x q) x Leaf), (pow2heapp (find_max' x q) (find_max' x q) gv4), (pow2heapp (find_max' x q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) gv4), (pow2heapp (find_max' x q) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (length q) gv4)
(pow2heapp (find_max' x q) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) gv4), (pow2heapp (find_max' x q) (length gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x q) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) x gv4), (pow2heapp (find_max' x gv2) x (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) x (smash gv4 gv4))
(pow2heapp (find_max' x gv2) x Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) gv4), (pow2heapp (find_max' x gv2) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv2) gv4), (pow2heapp (find_max' x gv2) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) gv4)
(pow2heapp (find_max' x gv2) (length q) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (length q) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) gv4), (pow2heapp (find_max' x gv2) (length gv2) (Node x gv4 gv4)), (pow2heapp (find_max' x gv2) (length gv2) (smash gv4 gv4)), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (length q) x gv4), (pow2heapp (length q) x (Node x gv4 gv4)), (pow2heapp (length q) x (smash gv4 gv4))
(pow2heapp (length q) x Leaf), (pow2heapp (length q) (find_max' x q) gv4), (pow2heapp (length q) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) gv4), (pow2heapp (length q) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (length q) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (length q) gv4)
(pow2heapp (length q) (length q) (Node x gv4 gv4)), (pow2heapp (length q) (length q) (smash gv4 gv4)), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv2) gv4), (pow2heapp (length q) (length gv2) (Node x gv4 gv4)), (pow2heapp (length q) (length gv2) (smash gv4 gv4)), (pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) x gv4), (pow2heapp (length gv2) x (Node x gv4 gv4)), (pow2heapp (length gv2) x (smash gv4 gv4))
(pow2heapp (length gv2) x Leaf), (pow2heapp (length gv2) (find_max' x q) gv4), (pow2heapp (length gv2) (find_max' x q) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' x q) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) gv4), (pow2heapp (length gv2) (find_max' x gv2) (Node x gv4 gv4)), (pow2heapp (length gv2) (find_max' x gv2) (smash gv4 gv4)), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (length q) gv4)
(pow2heapp (length gv2) (length q) (Node x gv4 gv4)), (pow2heapp (length gv2) (length q) (smash gv4 gv4)), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) gv4), (pow2heapp (length gv2) (length gv2) (Node x gv4 gv4)), (pow2heapp (length gv2) (length gv2) (smash gv4 gv4)), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (gv4 :: q)), (Permutation q (gv4 :: gv2)), (Permutation q (merge q q))
(Permutation q (merge q gv2)), (Permutation q (merge gv2 q)), (Permutation q (merge gv2 gv2)), (Permutation q (heap_delete_max gv4)), (Permutation q (join q q gv4)), (Permutation q (join q gv2 gv4)), (Permutation q (join gv2 q gv4)), (Permutation q (join gv2 gv2 gv4)), (Permutation q (insert x q)), (Permutation q (insert x gv2))
(Permutation q (carry q gv4)), (Permutation q (carry gv2 gv4)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q []), (Permutation gv2 (gv4 :: q)), (Permutation gv2 (gv4 :: gv2)), (Permutation gv2 (merge q q))
(Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (heap_delete_max gv4)), (Permutation gv2 (join q q gv4)), (Permutation gv2 (join q gv2 gv4)), (Permutation gv2 (join gv2 q gv4)), (Permutation gv2 (join gv2 gv2 gv4)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2))
(Permutation gv2 (carry q gv4)), (Permutation gv2 (carry gv2 gv4)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2)), (Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (gv4 :: q) q), (Permutation (gv4 :: q) gv2), (Permutation (gv4 :: q) (gv4 :: gv2))
(Permutation (gv4 :: q) (merge q q)), (Permutation (gv4 :: q) (merge q gv2)), (Permutation (gv4 :: q) (merge gv2 q)), (Permutation (gv4 :: q) (merge gv2 gv2)), (Permutation (gv4 :: q) (heap_delete_max gv4)), (Permutation (gv4 :: q) (join q q gv4)), (Permutation (gv4 :: q) (join q gv2 gv4)), (Permutation (gv4 :: q) (join gv2 q gv4)), (Permutation (gv4 :: q) (join gv2 gv2 gv4)), (Permutation (gv4 :: q) (insert x q))
(Permutation (gv4 :: q) (insert x gv2)), (Permutation (gv4 :: q) (carry q gv4)), (Permutation (gv4 :: q) (carry gv2 gv4)), (Permutation (gv4 :: q) (q ++ q)), (Permutation (gv4 :: q) (q ++ gv2)), (Permutation (gv4 :: q) (gv2 ++ q)), (Permutation (gv4 :: q) (gv2 ++ gv2)), (Permutation (gv4 :: q) []), (Permutation (gv4 :: gv2) q), (Permutation (gv4 :: gv2) gv2)
(Permutation (gv4 :: gv2) (gv4 :: q)), (Permutation (gv4 :: gv2) (merge q q)), (Permutation (gv4 :: gv2) (merge q gv2)), (Permutation (gv4 :: gv2) (merge gv2 q)), (Permutation (gv4 :: gv2) (merge gv2 gv2)), (Permutation (gv4 :: gv2) (heap_delete_max gv4)), (Permutation (gv4 :: gv2) (join q q gv4)), (Permutation (gv4 :: gv2) (join q gv2 gv4)), (Permutation (gv4 :: gv2) (join gv2 q gv4)), (Permutation (gv4 :: gv2) (join gv2 gv2 gv4))
(Permutation (gv4 :: gv2) (insert x q)), (Permutation (gv4 :: gv2) (insert x gv2)), (Permutation (gv4 :: gv2) (carry q gv4)), (Permutation (gv4 :: gv2) (carry gv2 gv4)), (Permutation (gv4 :: gv2) (q ++ q)), (Permutation (gv4 :: gv2) (q ++ gv2)), (Permutation (gv4 :: gv2) (gv2 ++ q)), (Permutation (gv4 :: gv2) (gv2 ++ gv2)), (Permutation (gv4 :: gv2) []), (Permutation (merge q q) q)
(Permutation (merge q q) gv2), (Permutation (merge q q) (gv4 :: q)), (Permutation (merge q q) (gv4 :: gv2)), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (heap_delete_max gv4)), (Permutation (merge q q) (join q q gv4)), (Permutation (merge q q) (join q gv2 gv4)), (Permutation (merge q q) (join gv2 q gv4))
(Permutation (merge q q) (join gv2 gv2 gv4)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2)), (Permutation (merge q q) (carry q gv4)), (Permutation (merge q q) (carry gv2 gv4)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) [])
(Permutation (merge q gv2) q), (Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (gv4 :: q)), (Permutation (merge q gv2) (gv4 :: gv2)), (Permutation (merge q gv2) (merge q q)), (Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (heap_delete_max gv4)), (Permutation (merge q gv2) (join q q gv4)), (Permutation (merge q gv2) (join q gv2 gv4))
(Permutation (merge q gv2) (join gv2 q gv4)), (Permutation (merge q gv2) (join gv2 gv2 gv4)), (Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (carry q gv4)), (Permutation (merge q gv2) (carry gv2 gv4)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2)), (Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2))
(Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (gv4 :: q)), (Permutation (merge gv2 q) (gv4 :: gv2)), (Permutation (merge gv2 q) (merge q q)), (Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (heap_delete_max gv4)), (Permutation (merge gv2 q) (join q q gv4))
(Permutation (merge gv2 q) (join q gv2 gv4)), (Permutation (merge gv2 q) (join gv2 q gv4)), (Permutation (merge gv2 q) (join gv2 gv2 gv4)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (carry q gv4)), (Permutation (merge gv2 q) (carry gv2 gv4)), (Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q))
(Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (gv4 :: q)), (Permutation (merge gv2 gv2) (gv4 :: gv2)), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q)), (Permutation (merge gv2 gv2) (heap_delete_max gv4))
(Permutation (merge gv2 gv2) (join q q gv4)), (Permutation (merge gv2 gv2) (join q gv2 gv4)), (Permutation (merge gv2 gv2) (join gv2 q gv4)), (Permutation (merge gv2 gv2) (join gv2 gv2 gv4)), (Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (carry q gv4)), (Permutation (merge gv2 gv2) (carry gv2 gv4)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2))
(Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (heap_delete_max gv4) q), (Permutation (heap_delete_max gv4) gv2), (Permutation (heap_delete_max gv4) (gv4 :: q)), (Permutation (heap_delete_max gv4) (gv4 :: gv2)), (Permutation (heap_delete_max gv4) (merge q q)), (Permutation (heap_delete_max gv4) (merge q gv2)), (Permutation (heap_delete_max gv4) (merge gv2 q))
(Permutation (heap_delete_max gv4) (merge gv2 gv2)), (Permutation (heap_delete_max gv4) (join q q gv4)), (Permutation (heap_delete_max gv4) (join q gv2 gv4)), (Permutation (heap_delete_max gv4) (join gv2 q gv4)), (Permutation (heap_delete_max gv4) (join gv2 gv2 gv4)), (Permutation (heap_delete_max gv4) (insert x q)), (Permutation (heap_delete_max gv4) (insert x gv2)), (Permutation (heap_delete_max gv4) (carry q gv4)), (Permutation (heap_delete_max gv4) (carry gv2 gv4)), (Permutation (heap_delete_max gv4) (q ++ q))
(Permutation (heap_delete_max gv4) (q ++ gv2)), (Permutation (heap_delete_max gv4) (gv2 ++ q)), (Permutation (heap_delete_max gv4) (gv2 ++ gv2)), (Permutation (heap_delete_max gv4) []), (Permutation (join q q gv4) q), (Permutation (join q q gv4) gv2), (Permutation (join q q gv4) (gv4 :: q)), (Permutation (join q q gv4) (gv4 :: gv2)), (Permutation (join q q gv4) (merge q q)), (Permutation (join q q gv4) (merge q gv2))
(Permutation (join q q gv4) (merge gv2 q)), (Permutation (join q q gv4) (merge gv2 gv2)), (Permutation (join q q gv4) (heap_delete_max gv4)), (Permutation (join q q gv4) (join q gv2 gv4)), (Permutation (join q q gv4) (join gv2 q gv4)), (Permutation (join q q gv4) (join gv2 gv2 gv4)), (Permutation (join q q gv4) (insert x q)), (Permutation (join q q gv4) (insert x gv2)), (Permutation (join q q gv4) (carry q gv4)), (Permutation (join q q gv4) (carry gv2 gv4))
(Permutation (join q q gv4) (q ++ q)), (Permutation (join q q gv4) (q ++ gv2)), (Permutation (join q q gv4) (gv2 ++ q)), (Permutation (join q q gv4) (gv2 ++ gv2)), (Permutation (join q q gv4) []), (Permutation (join q gv2 gv4) q), (Permutation (join q gv2 gv4) gv2), (Permutation (join q gv2 gv4) (gv4 :: q)), (Permutation (join q gv2 gv4) (gv4 :: gv2)), (Permutation (join q gv2 gv4) (merge q q))
(Permutation (join q gv2 gv4) (merge q gv2)), (Permutation (join q gv2 gv4) (merge gv2 q)), (Permutation (join q gv2 gv4) (merge gv2 gv2)), (Permutation (join q gv2 gv4) (heap_delete_max gv4)), (Permutation (join q gv2 gv4) (join q q gv4)), (Permutation (join q gv2 gv4) (join gv2 q gv4)), (Permutation (join q gv2 gv4) (join gv2 gv2 gv4)), (Permutation (join q gv2 gv4) (insert x q)), (Permutation (join q gv2 gv4) (insert x gv2)), (Permutation (join q gv2 gv4) (carry q gv4))
(Permutation (join q gv2 gv4) (carry gv2 gv4)), (Permutation (join q gv2 gv4) (q ++ q)), (Permutation (join q gv2 gv4) (q ++ gv2)), (Permutation (join q gv2 gv4) (gv2 ++ q)), (Permutation (join q gv2 gv4) (gv2 ++ gv2)), (Permutation (join q gv2 gv4) []), (Permutation (join gv2 q gv4) q), (Permutation (join gv2 q gv4) gv2), (Permutation (join gv2 q gv4) (gv4 :: q)), (Permutation (join gv2 q gv4) (gv4 :: gv2))
(Permutation (join gv2 q gv4) (merge q q)), (Permutation (join gv2 q gv4) (merge q gv2)), (Permutation (join gv2 q gv4) (merge gv2 q)), (Permutation (join gv2 q gv4) (merge gv2 gv2)), (Permutation (join gv2 q gv4) (heap_delete_max gv4)), (Permutation (join gv2 q gv4) (join q q gv4)), (Permutation (join gv2 q gv4) (join q gv2 gv4)), (Permutation (join gv2 q gv4) (join gv2 gv2 gv4)), (Permutation (join gv2 q gv4) (insert x q)), (Permutation (join gv2 q gv4) (insert x gv2))
(Permutation (join gv2 q gv4) (carry q gv4)), (Permutation (join gv2 q gv4) (carry gv2 gv4)), (Permutation (join gv2 q gv4) (q ++ q)), (Permutation (join gv2 q gv4) (q ++ gv2)), (Permutation (join gv2 q gv4) (gv2 ++ q)), (Permutation (join gv2 q gv4) (gv2 ++ gv2)), (Permutation (join gv2 q gv4) []), (Permutation (join gv2 gv2 gv4) q), (Permutation (join gv2 gv2 gv4) gv2), (Permutation (join gv2 gv2 gv4) (gv4 :: q))
(Permutation (join gv2 gv2 gv4) (gv4 :: gv2)), (Permutation (join gv2 gv2 gv4) (merge q q)), (Permutation (join gv2 gv2 gv4) (merge q gv2)), (Permutation (join gv2 gv2 gv4) (merge gv2 q)), (Permutation (join gv2 gv2 gv4) (merge gv2 gv2)), (Permutation (join gv2 gv2 gv4) (heap_delete_max gv4)), (Permutation (join gv2 gv2 gv4) (join q q gv4)), (Permutation (join gv2 gv2 gv4) (join q gv2 gv4)), (Permutation (join gv2 gv2 gv4) (join gv2 q gv4)), (Permutation (join gv2 gv2 gv4) (insert x q))
(Permutation (join gv2 gv2 gv4) (insert x gv2)), (Permutation (join gv2 gv2 gv4) (carry q gv4)), (Permutation (join gv2 gv2 gv4) (carry gv2 gv4)), (Permutation (join gv2 gv2 gv4) (q ++ q)), (Permutation (join gv2 gv2 gv4) (q ++ gv2)), (Permutation (join gv2 gv2 gv4) (gv2 ++ q)), (Permutation (join gv2 gv2 gv4) (gv2 ++ gv2)), (Permutation (join gv2 gv2 gv4) []), (Permutation (insert x q) q), (Permutation (insert x q) gv2)
(Permutation (insert x q) (gv4 :: q)), (Permutation (insert x q) (gv4 :: gv2)), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (heap_delete_max gv4)), (Permutation (insert x q) (join q q gv4)), (Permutation (insert x q) (join q gv2 gv4)), (Permutation (insert x q) (join gv2 q gv4))
(Permutation (insert x q) (join gv2 gv2 gv4)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (carry q gv4)), (Permutation (insert x q) (carry gv2 gv4)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2)), (Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q)
(Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (gv4 :: q)), (Permutation (insert x gv2) (gv4 :: gv2)), (Permutation (insert x gv2) (merge q q)), (Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (heap_delete_max gv4)), (Permutation (insert x gv2) (join q q gv4)), (Permutation (insert x gv2) (join q gv2 gv4))
(Permutation (insert x gv2) (join gv2 q gv4)), (Permutation (insert x gv2) (join gv2 gv2 gv4)), (Permutation (insert x gv2) (insert x q)), (Permutation (insert x gv2) (carry q gv4)), (Permutation (insert x gv2) (carry gv2 gv4)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) [])
(Permutation (carry q gv4) q), (Permutation (carry q gv4) gv2), (Permutation (carry q gv4) (gv4 :: q)), (Permutation (carry q gv4) (gv4 :: gv2)), (Permutation (carry q gv4) (merge q q)), (Permutation (carry q gv4) (merge q gv2)), (Permutation (carry q gv4) (merge gv2 q)), (Permutation (carry q gv4) (merge gv2 gv2)), (Permutation (carry q gv4) (heap_delete_max gv4)), (Permutation (carry q gv4) (join q q gv4))
(Permutation (carry q gv4) (join q gv2 gv4)), (Permutation (carry q gv4) (join gv2 q gv4)), (Permutation (carry q gv4) (join gv2 gv2 gv4)), (Permutation (carry q gv4) (insert x q)), (Permutation (carry q gv4) (insert x gv2)), (Permutation (carry q gv4) (carry gv2 gv4)), (Permutation (carry q gv4) (q ++ q)), (Permutation (carry q gv4) (q ++ gv2)), (Permutation (carry q gv4) (gv2 ++ q)), (Permutation (carry q gv4) (gv2 ++ gv2))
(Permutation (carry q gv4) []), (Permutation (carry gv2 gv4) q), (Permutation (carry gv2 gv4) gv2), (Permutation (carry gv2 gv4) (gv4 :: q)), (Permutation (carry gv2 gv4) (gv4 :: gv2)), (Permutation (carry gv2 gv4) (merge q q)), (Permutation (carry gv2 gv4) (merge q gv2)), (Permutation (carry gv2 gv4) (merge gv2 q)), (Permutation (carry gv2 gv4) (merge gv2 gv2)), (Permutation (carry gv2 gv4) (heap_delete_max gv4))
(Permutation (carry gv2 gv4) (join q q gv4)), (Permutation (carry gv2 gv4) (join q gv2 gv4)), (Permutation (carry gv2 gv4) (join gv2 q gv4)), (Permutation (carry gv2 gv4) (join gv2 gv2 gv4)), (Permutation (carry gv2 gv4) (insert x q)), (Permutation (carry gv2 gv4) (insert x gv2)), (Permutation (carry gv2 gv4) (carry q gv4)), (Permutation (carry gv2 gv4) (q ++ q)), (Permutation (carry gv2 gv4) (q ++ gv2)), (Permutation (carry gv2 gv4) (gv2 ++ q))
(Permutation (carry gv2 gv4) (gv2 ++ gv2)), (Permutation (carry gv2 gv4) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (gv4 :: q)), (Permutation (q ++ q) (gv4 :: gv2)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q)), (Permutation (q ++ q) (merge gv2 gv2))
(Permutation (q ++ q) (heap_delete_max gv4)), (Permutation (q ++ q) (join q q gv4)), (Permutation (q ++ q) (join q gv2 gv4)), (Permutation (q ++ q) (join gv2 q gv4)), (Permutation (q ++ q) (join gv2 gv2 gv4)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (carry q gv4)), (Permutation (q ++ q) (carry gv2 gv4)), (Permutation (q ++ q) (q ++ gv2))
(Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q), (Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (gv4 :: q)), (Permutation (q ++ gv2) (gv4 :: gv2)), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q))
(Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (heap_delete_max gv4)), (Permutation (q ++ gv2) (join q q gv4)), (Permutation (q ++ gv2) (join q gv2 gv4)), (Permutation (q ++ gv2) (join gv2 q gv4)), (Permutation (q ++ gv2) (join gv2 gv2 gv4)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (carry q gv4)), (Permutation (q ++ gv2) (carry gv2 gv4))
(Permutation (q ++ gv2) (q ++ q)), (Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q), (Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (gv4 :: q)), (Permutation (gv2 ++ q) (gv4 :: gv2)), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2))
(Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (heap_delete_max gv4)), (Permutation (gv2 ++ q) (join q q gv4)), (Permutation (gv2 ++ q) (join q gv2 gv4)), (Permutation (gv2 ++ q) (join gv2 q gv4)), (Permutation (gv2 ++ q) (join gv2 gv2 gv4)), (Permutation (gv2 ++ q) (insert x q)), (Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (carry q gv4))
(Permutation (gv2 ++ q) (carry gv2 gv4)), (Permutation (gv2 ++ q) (q ++ q)), (Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (gv4 :: q)), (Permutation (gv2 ++ gv2) (gv4 :: gv2)), (Permutation (gv2 ++ gv2) (merge q q))
(Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (heap_delete_max gv4)), (Permutation (gv2 ++ gv2) (join q q gv4)), (Permutation (gv2 ++ gv2) (join q gv2 gv4)), (Permutation (gv2 ++ gv2) (join gv2 q gv4)), (Permutation (gv2 ++ gv2) (join gv2 gv2 gv4)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2))
(Permutation (gv2 ++ gv2) (carry q gv4)), (Permutation (gv2 ++ gv2) (carry gv2 gv4)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q)), (Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2), (Permutation [] (gv4 :: q)), (Permutation [] (gv4 :: gv2))
(Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2)), (Permutation [] (heap_delete_max gv4)), (Permutation [] (join q q gv4)), (Permutation [] (join q gv2 gv4)), (Permutation [] (join gv2 q gv4)), (Permutation [] (join gv2 gv2 gv4)), (Permutation [] (insert x q))
(Permutation [] (insert x gv2)), (Permutation [] (carry q gv4)), (Permutation [] (carry gv2 gv4)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q)), (Permutation [] (gv2 ++ gv2)), (In gv4 (gv4 :: q)), (In gv4 (gv4 :: gv2)), (In gv4 (merge q q))
(In gv4 (merge q gv2)), (In gv4 (merge gv2 q)), (In gv4 (merge gv2 gv2)), (In gv4 (heap_delete_max gv4)), (In gv4 (join q q gv4)), (In gv4 (join q gv2 gv4)), (In gv4 (join gv2 q gv4)), (In gv4 (join gv2 gv2 gv4)), (In gv4 (insert x q)), (In gv4 (insert x gv2))
(In gv4 (carry q gv4)), (In gv4 (carry gv2 gv4)), (In gv4 (q ++ q)), (In gv4 (q ++ gv2)), (In gv4 (gv2 ++ q)), (In gv4 (gv2 ++ gv2)), (In (Node x gv4 gv4) q), (In (Node x gv4 gv4) gv2), (In (Node x gv4 gv4) (gv4 :: q)), (In (Node x gv4 gv4) (gv4 :: gv2))
(In (Node x gv4 gv4) (merge q q)), (In (Node x gv4 gv4) (merge q gv2)), (In (Node x gv4 gv4) (merge gv2 q)), (In (Node x gv4 gv4) (merge gv2 gv2)), (In (Node x gv4 gv4) (heap_delete_max gv4)), (In (Node x gv4 gv4) (join q q gv4)), (In (Node x gv4 gv4) (join q gv2 gv4)), (In (Node x gv4 gv4) (join gv2 q gv4)), (In (Node x gv4 gv4) (join gv2 gv2 gv4)), (In (Node x gv4 gv4) (insert x q))
(In (Node x gv4 gv4) (insert x gv2)), (In (Node x gv4 gv4) (carry q gv4)), (In (Node x gv4 gv4) (carry gv2 gv4)), (In (Node x gv4 gv4) (q ++ q)), (In (Node x gv4 gv4) (q ++ gv2)), (In (Node x gv4 gv4) (gv2 ++ q)), (In (Node x gv4 gv4) (gv2 ++ gv2)), (In (smash gv4 gv4) q), (In (smash gv4 gv4) gv2), (In (smash gv4 gv4) (gv4 :: q))
(In (smash gv4 gv4) (gv4 :: gv2)), (In (smash gv4 gv4) (merge q q)), (In (smash gv4 gv4) (merge q gv2)), (In (smash gv4 gv4) (merge gv2 q)), (In (smash gv4 gv4) (merge gv2 gv2)), (In (smash gv4 gv4) (heap_delete_max gv4)), (In (smash gv4 gv4) (join q q gv4)), (In (smash gv4 gv4) (join q gv2 gv4)), (In (smash gv4 gv4) (join gv2 q gv4)), (In (smash gv4 gv4) (join gv2 gv2 gv4))
(In (smash gv4 gv4) (insert x q)), (In (smash gv4 gv4) (insert x gv2)), (In (smash gv4 gv4) (carry q gv4)), (In (smash gv4 gv4) (carry gv2 gv4)), (In (smash gv4 gv4) (q ++ q)), (In (smash gv4 gv4) (q ++ gv2)), (In (smash gv4 gv4) (gv2 ++ q)), (In (smash gv4 gv4) (gv2 ++ gv2)), (In Leaf q), (In Leaf gv2)
(In Leaf (gv4 :: q)), (In Leaf (gv4 :: gv2)), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q)), (In Leaf (merge gv2 gv2)), (In Leaf (heap_delete_max gv4)), (In Leaf (join q q gv4)), (In Leaf (join q gv2 gv4)), (In Leaf (join gv2 q gv4))
(In Leaf (join gv2 gv2 gv4)), (In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (carry q gv4)), (In Leaf (carry gv2 gv4)), (In Leaf (q ++ q)), (In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (x < find_max' x q)
(x < find_max' x gv2), (x < length q), (x < length gv2), (find_max' x q < x), (find_max' x q < find_max' x gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < x), (find_max' x gv2 < find_max' x q), (find_max' x gv2 < length q)
(find_max' x gv2 < length gv2), (length q < x), (length q < find_max' x q), (length q < find_max' x gv2), (length q < length gv2), (length gv2 < x), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2), (length gv2 < length q), (x <= find_max' x q)
(x <= find_max' x gv2), (x <= length q), (x <= length gv2), (find_max' x q <= x), (find_max' x q <= find_max' x gv2), (find_max' x q <= length q), (find_max' x q <= length gv2), (find_max' x gv2 <= x), (find_max' x gv2 <= find_max' x q), (find_max' x gv2 <= length q)
(find_max' x gv2 <= length gv2), (length q <= x), (length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= length gv2), (length gv2 <= x), (length gv2 <= find_max' x q), (length gv2 <= find_max' x gv2), (length gv2 <= length q), (~ priq q)
(~ priq gv2), (~ priqq x q), (~ priqq x gv2), (~ pow2heap x gv4), (~ pow2heapp x x gv4), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2), (~ In gv4 q)
(~ In gv4 gv2), (~ x < x), (~ x <= x), (x <> x), (gv4 <> gv4), (q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2), (None = Some q)
(None = Some gv2), (gv4 :: q = q), (gv4 :: q = gv2), (gv4 :: q = merge q q), (gv4 :: q = merge q gv2), (gv4 :: q = merge gv2 q), (gv4 :: q = merge gv2 gv2), (gv4 :: q = heap_delete_max gv4), (gv4 :: q = join q q gv4), (gv4 :: q = join q gv2 gv4)
(gv4 :: q = join gv2 q gv4), (gv4 :: q = join gv2 gv2 gv4), (gv4 :: q = insert x q), (gv4 :: q = insert x gv2), (gv4 :: q = carry q gv4), (gv4 :: q = carry gv2 gv4), (gv4 :: q = q ++ q), (gv4 :: q = q ++ gv2), (gv4 :: q = gv2 ++ q), (gv4 :: q = gv2 ++ gv2)
(gv4 :: q = []), (gv4 :: gv2 = q), (gv4 :: gv2 = gv2), (gv4 :: gv2 = merge q q), (gv4 :: gv2 = merge q gv2), (gv4 :: gv2 = merge gv2 q), (gv4 :: gv2 = merge gv2 gv2), (gv4 :: gv2 = heap_delete_max gv4), (gv4 :: gv2 = join q q gv4), (gv4 :: gv2 = join q gv2 gv4)
(gv4 :: gv2 = join gv2 q gv4), (gv4 :: gv2 = join gv2 gv2 gv4), (gv4 :: gv2 = insert x q), (gv4 :: gv2 = insert x gv2), (gv4 :: gv2 = carry q gv4), (gv4 :: gv2 = carry gv2 gv4), (gv4 :: gv2 = q ++ q), (gv4 :: gv2 = q ++ gv2), (gv4 :: gv2 = gv2 ++ q), (gv4 :: gv2 = gv2 ++ gv2)
(gv4 :: gv2 = []), (merge q q = q), (merge q q = gv2), (merge q q = heap_delete_max gv4), (merge q q = join q q gv4), (merge q q = join q gv2 gv4), (merge q q = join gv2 q gv4), (merge q q = join gv2 gv2 gv4), (merge q q = insert x q), (merge q q = insert x gv2)
(merge q q = carry q gv4), (merge q q = carry gv2 gv4), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2), (merge q gv2 = q), (merge q gv2 = gv2), (merge q gv2 = heap_delete_max gv4), (merge q gv2 = join q q gv4)
(merge q gv2 = join q gv2 gv4), (merge q gv2 = join gv2 q gv4), (merge q gv2 = join gv2 gv2 gv4), (merge q gv2 = insert x q), (merge q gv2 = insert x gv2), (merge q gv2 = carry q gv4), (merge q gv2 = carry gv2 gv4), (merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q)
(merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = heap_delete_max gv4), (merge gv2 q = join q q gv4), (merge gv2 q = join q gv2 gv4), (merge gv2 q = join gv2 q gv4), (merge gv2 q = join gv2 gv2 gv4), (merge gv2 q = insert x q), (merge gv2 q = insert x gv2)
(merge gv2 q = carry q gv4), (merge gv2 q = carry gv2 gv4), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2), (merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2), (merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = heap_delete_max gv4), (merge gv2 gv2 = join q q gv4)
(merge gv2 gv2 = join q gv2 gv4), (merge gv2 gv2 = join gv2 q gv4), (merge gv2 gv2 = join gv2 gv2 gv4), (merge gv2 gv2 = insert x q), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = carry q gv4), (merge gv2 gv2 = carry gv2 gv4), (merge gv2 gv2 = q ++ q), (merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q)
(merge gv2 gv2 = gv2 ++ gv2), (heap_delete_max gv4 = q), (heap_delete_max gv4 = gv2), (heap_delete_max gv4 = carry q gv4), (heap_delete_max gv4 = carry gv2 gv4), (heap_delete_max gv4 = q ++ q), (heap_delete_max gv4 = q ++ gv2), (heap_delete_max gv4 = gv2 ++ q), (heap_delete_max gv4 = gv2 ++ gv2), (join q q gv4 = q)
(join q q gv4 = gv2), (join q q gv4 = heap_delete_max gv4), (join q q gv4 = insert x q), (join q q gv4 = insert x gv2), (join q q gv4 = carry q gv4), (join q q gv4 = carry gv2 gv4), (join q q gv4 = q ++ q), (join q q gv4 = q ++ gv2), (join q q gv4 = gv2 ++ q), (join q q gv4 = gv2 ++ gv2)
(join q gv2 gv4 = q), (join q gv2 gv4 = gv2), (join q gv2 gv4 = heap_delete_max gv4), (join q gv2 gv4 = insert x q), (join q gv2 gv4 = insert x gv2), (join q gv2 gv4 = carry q gv4), (join q gv2 gv4 = carry gv2 gv4), (join q gv2 gv4 = q ++ q), (join q gv2 gv4 = q ++ gv2), (join q gv2 gv4 = gv2 ++ q)
(join q gv2 gv4 = gv2 ++ gv2), (join gv2 q gv4 = q), (join gv2 q gv4 = gv2), (join gv2 q gv4 = heap_delete_max gv4), (join gv2 q gv4 = insert x q), (join gv2 q gv4 = insert x gv2), (join gv2 q gv4 = carry q gv4), (join gv2 q gv4 = carry gv2 gv4), (join gv2 q gv4 = q ++ q), (join gv2 q gv4 = q ++ gv2)
(join gv2 q gv4 = gv2 ++ q), (join gv2 q gv4 = gv2 ++ gv2), (join gv2 gv2 gv4 = q), (join gv2 gv2 gv4 = gv2), (join gv2 gv2 gv4 = heap_delete_max gv4), (join gv2 gv2 gv4 = insert x q), (join gv2 gv2 gv4 = insert x gv2), (join gv2 gv2 gv4 = carry q gv4), (join gv2 gv2 gv4 = carry gv2 gv4), (join gv2 gv2 gv4 = q ++ q)
(join gv2 gv2 gv4 = q ++ gv2), (join gv2 gv2 gv4 = gv2 ++ q), (join gv2 gv2 gv4 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = heap_delete_max gv4), (insert x q = carry q gv4), (insert x q = carry gv2 gv4), (insert x q = q ++ q), (insert x q = q ++ gv2)
(insert x q = gv2 ++ q), (insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = heap_delete_max gv4), (insert x gv2 = carry q gv4), (insert x gv2 = carry gv2 gv4), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q)
(insert x gv2 = gv2 ++ gv2), (carry q gv4 = q), (carry q gv4 = gv2), (carry q gv4 = q ++ q), (carry q gv4 = q ++ gv2), (carry q gv4 = gv2 ++ q), (carry q gv4 = gv2 ++ gv2), (carry gv2 gv4 = q), (carry gv2 gv4 = gv2), (carry gv2 gv4 = q ++ q)
(carry gv2 gv4 = q ++ gv2), (carry gv2 gv4 = gv2 ++ q), (carry gv2 gv4 = gv2 ++ gv2), (q ++ q = q), (q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2), (gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q)
(gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q), ([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2), ([] = heap_delete_max gv4), ([] = join q q gv4), ([] = join q gv2 gv4)
([] = join gv2 q gv4), ([] = join gv2 gv2 gv4), ([] = insert x q), ([] = insert x gv2), ([] = carry q gv4), ([] = carry gv2 gv4), ([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q), ([] = gv2 ++ gv2)
((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2), ((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((gv2, q) = delete_max_aux x q), ((gv2, q) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2), (Node x gv4 gv4 = gv4), (Node x gv4 gv4 = smash gv4 gv4)
(smash gv4 gv4 = gv4), (Leaf = Node x gv4 gv4), (Leaf = smash gv4 gv4), (find_max' x q = x), (find_max' x gv2 = x), (length q = x), (length q = find_max' x q), (length q = find_max' x gv2), (length gv2 = x), (length gv2 = find_max' x q)
(length gv2 = find_max' x gv2), (Some x = find_max q), (Some x = find_max gv2), (None = Some x), (None = find_max q), (None = find_max gv2), (None = Some gv4), ((x >? x) = (x >=? x))

Label: 8 (8)
(priq q), (priq gv2), (priqq x q), (priqq x gv2), (priqq gv0 q), (priqq gv0 gv2), (Permutation q q), (Permutation q gv2), (Permutation gv2 q), (Permutation gv2 gv2)
(x < x), (x < gv0), (gv0 < x), (gv0 < gv0), (x <= x), (x <= gv0), (gv0 <= x), (gv0 <= gv0), (q = q), (q = gv2)
(gv2 = q), (gv2 = gv2), (x = x), (x = gv0), (gv0 = x), (gv0 = gv0), (false = (x >? x)), (false = (x >? gv0)), (false = (gv0 >? x)), (false = (gv0 >? gv0))
(false = (x >=? x)), (false = (x >=? gv0)), (false = (gv0 >=? x)), (false = (gv0 >=? gv0)), (true = (x >? x)), (true = (x >? gv0)), (true = (gv0 >? x)), (true = (gv0 >? gv0)), (true = (x >=? x)), (true = (x >=? gv0))
(true = (gv0 >=? x)), (true = (gv0 >=? gv0)), (Abs q []), (Abs gv2 []), (Abs (merge q q) []), (Abs (merge q gv2) []), (Abs (merge gv2 q) []), (Abs (merge gv2 gv2) []), (Abs (insert x q) []), (Abs (insert x gv2) [])
(Abs (insert gv0 q) []), (Abs (insert gv0 gv2) []), (Abs (q ++ q) []), (Abs (q ++ gv2) []), (Abs (gv2 ++ q) []), (Abs (gv2 ++ gv2) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv2 []), (priqueue_elems (merge q q) [])
(priqueue_elems (merge q gv2) []), (priqueue_elems (merge gv2 q) []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv2) []), (priqueue_elems (insert gv0 q) []), (priqueue_elems (insert gv0 gv2) []), (priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv2) []), (priqueue_elems (gv2 ++ q) [])
(priqueue_elems (gv2 ++ gv2) []), (priqueue_elems [] []), (tree_elems Leaf []), (priq (merge q q)), (priq (merge q gv2)), (priq (merge gv2 q)), (priq (merge gv2 gv2)), (priq (insert x q)), (priq (insert x gv2)), (priq (insert gv0 q))
(priq (insert gv0 gv2)), (priq (q ++ q)), (priq (q ++ gv2)), (priq (gv2 ++ q)), (priq (gv2 ++ gv2)), (priqq x (merge q q)), (priqq x (merge q gv2)), (priqq x (merge gv2 q)), (priqq x (merge gv2 gv2)), (priqq x (insert x q))
(priqq x (insert x gv2)), (priqq x (insert gv0 q)), (priqq x (insert gv0 gv2)), (priqq x (q ++ q)), (priqq x (q ++ gv2)), (priqq x (gv2 ++ q)), (priqq x (gv2 ++ gv2)), (priqq gv0 (merge q q)), (priqq gv0 (merge q gv2)), (priqq gv0 (merge gv2 q))
(priqq gv0 (merge gv2 gv2)), (priqq gv0 (insert x q)), (priqq gv0 (insert x gv2)), (priqq gv0 (insert gv0 q)), (priqq gv0 (insert gv0 gv2)), (priqq gv0 (q ++ q)), (priqq gv0 (q ++ gv2)), (priqq gv0 (gv2 ++ q)), (priqq gv0 (gv2 ++ gv2)), (priqq (find_max' x q) q)
(priqq (find_max' x q) gv2), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv2)), (priqq (find_max' x q) (merge gv2 q)), (priqq (find_max' x q) (merge gv2 gv2)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv2)), (priqq (find_max' x q) (insert gv0 q)), (priqq (find_max' x q) (insert gv0 gv2)), (priqq (find_max' x q) (q ++ q))
(priqq (find_max' x q) (q ++ gv2)), (priqq (find_max' x q) (gv2 ++ q)), (priqq (find_max' x q) (gv2 ++ gv2)), (priqq (find_max' x gv2) q), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) (merge q q)), (priqq (find_max' x gv2) (merge q gv2)), (priqq (find_max' x gv2) (merge gv2 q)), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (insert x q))
(priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (insert gv0 q)), (priqq (find_max' x gv2) (insert gv0 gv2)), (priqq (find_max' x gv2) (q ++ q)), (priqq (find_max' x gv2) (q ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ q)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (find_max' gv0 q) q), (priqq (find_max' gv0 q) gv2), (priqq (find_max' gv0 q) (merge q q))
(priqq (find_max' gv0 q) (merge q gv2)), (priqq (find_max' gv0 q) (merge gv2 q)), (priqq (find_max' gv0 q) (merge gv2 gv2)), (priqq (find_max' gv0 q) (insert x q)), (priqq (find_max' gv0 q) (insert x gv2)), (priqq (find_max' gv0 q) (insert gv0 q)), (priqq (find_max' gv0 q) (insert gv0 gv2)), (priqq (find_max' gv0 q) (q ++ q)), (priqq (find_max' gv0 q) (q ++ gv2)), (priqq (find_max' gv0 q) (gv2 ++ q))
(priqq (find_max' gv0 q) (gv2 ++ gv2)), (priqq (find_max' gv0 gv2) q), (priqq (find_max' gv0 gv2) gv2), (priqq (find_max' gv0 gv2) (merge q q)), (priqq (find_max' gv0 gv2) (merge q gv2)), (priqq (find_max' gv0 gv2) (merge gv2 q)), (priqq (find_max' gv0 gv2) (merge gv2 gv2)), (priqq (find_max' gv0 gv2) (insert x q)), (priqq (find_max' gv0 gv2) (insert x gv2)), (priqq (find_max' gv0 gv2) (insert gv0 q))
(priqq (find_max' gv0 gv2) (insert gv0 gv2)), (priqq (find_max' gv0 gv2) (q ++ q)), (priqq (find_max' gv0 gv2) (q ++ gv2)), (priqq (find_max' gv0 gv2) (gv2 ++ q)), (priqq (find_max' gv0 gv2) (gv2 ++ gv2)), (priqq (length q) q), (priqq (length q) gv2), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv2)), (priqq (length q) (merge gv2 q))
(priqq (length q) (merge gv2 gv2)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv2)), (priqq (length q) (insert gv0 q)), (priqq (length q) (insert gv0 gv2)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv2)), (priqq (length q) (gv2 ++ q)), (priqq (length q) (gv2 ++ gv2)), (priqq (length gv2) q)
(priqq (length gv2) gv2), (priqq (length gv2) (merge q q)), (priqq (length gv2) (merge q gv2)), (priqq (length gv2) (merge gv2 q)), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (insert x q)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (insert gv0 q)), (priqq (length gv2) (insert gv0 gv2)), (priqq (length gv2) (q ++ q))
(priqq (length gv2) (q ++ gv2)), (priqq (length gv2) (gv2 ++ q)), (priqq (length gv2) (gv2 ++ gv2)), (pow2heapp x x Leaf), (pow2heapp x gv0 Leaf), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (find_max' gv0 q) Leaf), (pow2heapp x (find_max' gv0 gv2) Leaf), (pow2heapp x (length q) Leaf)
(pow2heapp x (length gv2) Leaf), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' x gv2) Leaf), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (find_max' gv0 gv2) Leaf), (pow2heapp gv0 (length q) Leaf), (pow2heapp gv0 (length gv2) Leaf), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) gv0 Leaf), (pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv2) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x q) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv2) Leaf), (pow2heapp (find_max' x gv2) x Leaf), (pow2heapp (find_max' x gv2) gv0 Leaf), (pow2heapp (find_max' x gv2) (find_max' x q) Leaf)
(pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' gv0 q) Leaf), (pow2heapp (find_max' x gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' x gv2) (length q) Leaf), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (find_max' gv0 q) x Leaf), (pow2heapp (find_max' gv0 q) gv0 Leaf), (pow2heapp (find_max' gv0 q) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 q) (find_max' x gv2) Leaf), (pow2heapp (find_max' gv0 q) (find_max' gv0 q) Leaf)
(pow2heapp (find_max' gv0 q) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' gv0 q) (length q) Leaf), (pow2heapp (find_max' gv0 q) (length gv2) Leaf), (pow2heapp (find_max' gv0 gv2) x Leaf), (pow2heapp (find_max' gv0 gv2) gv0 Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' x q) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 q) Leaf), (pow2heapp (find_max' gv0 gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (find_max' gv0 gv2) (length q) Leaf)
(pow2heapp (find_max' gv0 gv2) (length gv2) Leaf), (pow2heapp (length q) x Leaf), (pow2heapp (length q) gv0 Leaf), (pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv2) Leaf), (pow2heapp (length q) (find_max' gv0 q) Leaf), (pow2heapp (length q) (find_max' gv0 gv2) Leaf), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv2) Leaf), (pow2heapp (length gv2) x Leaf)
(pow2heapp (length gv2) gv0 Leaf), (pow2heapp (length gv2) (find_max' x q) Leaf), (pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (find_max' gv0 q) Leaf), (pow2heapp (length gv2) (find_max' gv0 gv2) Leaf), (pow2heapp (length gv2) (length q) Leaf), (pow2heapp (length gv2) (length gv2) Leaf), (Permutation q (merge q q)), (Permutation q (merge q gv2)), (Permutation q (merge gv2 q))
(Permutation q (merge gv2 gv2)), (Permutation q (insert x q)), (Permutation q (insert x gv2)), (Permutation q (insert gv0 q)), (Permutation q (insert gv0 gv2)), (Permutation q (q ++ q)), (Permutation q (q ++ gv2)), (Permutation q (gv2 ++ q)), (Permutation q (gv2 ++ gv2)), (Permutation q [])
(Permutation gv2 (merge q q)), (Permutation gv2 (merge q gv2)), (Permutation gv2 (merge gv2 q)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (insert x q)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (insert gv0 q)), (Permutation gv2 (insert gv0 gv2)), (Permutation gv2 (q ++ q)), (Permutation gv2 (q ++ gv2))
(Permutation gv2 (gv2 ++ q)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (merge q q) q), (Permutation (merge q q) gv2), (Permutation (merge q q) (merge q gv2)), (Permutation (merge q q) (merge gv2 q)), (Permutation (merge q q) (merge gv2 gv2)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv2))
(Permutation (merge q q) (insert gv0 q)), (Permutation (merge q q) (insert gv0 gv2)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv2)), (Permutation (merge q q) (gv2 ++ q)), (Permutation (merge q q) (gv2 ++ gv2)), (Permutation (merge q q) []), (Permutation (merge q gv2) q), (Permutation (merge q gv2) gv2), (Permutation (merge q gv2) (merge q q))
(Permutation (merge q gv2) (merge gv2 q)), (Permutation (merge q gv2) (merge gv2 gv2)), (Permutation (merge q gv2) (insert x q)), (Permutation (merge q gv2) (insert x gv2)), (Permutation (merge q gv2) (insert gv0 q)), (Permutation (merge q gv2) (insert gv0 gv2)), (Permutation (merge q gv2) (q ++ q)), (Permutation (merge q gv2) (q ++ gv2)), (Permutation (merge q gv2) (gv2 ++ q)), (Permutation (merge q gv2) (gv2 ++ gv2))
(Permutation (merge q gv2) []), (Permutation (merge gv2 q) q), (Permutation (merge gv2 q) gv2), (Permutation (merge gv2 q) (merge q q)), (Permutation (merge gv2 q) (merge q gv2)), (Permutation (merge gv2 q) (merge gv2 gv2)), (Permutation (merge gv2 q) (insert x q)), (Permutation (merge gv2 q) (insert x gv2)), (Permutation (merge gv2 q) (insert gv0 q)), (Permutation (merge gv2 q) (insert gv0 gv2))
(Permutation (merge gv2 q) (q ++ q)), (Permutation (merge gv2 q) (q ++ gv2)), (Permutation (merge gv2 q) (gv2 ++ q)), (Permutation (merge gv2 q) (gv2 ++ gv2)), (Permutation (merge gv2 q) []), (Permutation (merge gv2 gv2) q), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (merge q q)), (Permutation (merge gv2 gv2) (merge q gv2)), (Permutation (merge gv2 gv2) (merge gv2 q))
(Permutation (merge gv2 gv2) (insert x q)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (insert gv0 q)), (Permutation (merge gv2 gv2) (insert gv0 gv2)), (Permutation (merge gv2 gv2) (q ++ q)), (Permutation (merge gv2 gv2) (q ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ q)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (insert x q) q)
(Permutation (insert x q) gv2), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv2)), (Permutation (insert x q) (merge gv2 q)), (Permutation (insert x q) (merge gv2 gv2)), (Permutation (insert x q) (insert x gv2)), (Permutation (insert x q) (insert gv0 q)), (Permutation (insert x q) (insert gv0 gv2)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv2))
(Permutation (insert x q) (gv2 ++ q)), (Permutation (insert x q) (gv2 ++ gv2)), (Permutation (insert x q) []), (Permutation (insert x gv2) q), (Permutation (insert x gv2) gv2), (Permutation (insert x gv2) (merge q q)), (Permutation (insert x gv2) (merge q gv2)), (Permutation (insert x gv2) (merge gv2 q)), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (insert x q))
(Permutation (insert x gv2) (insert gv0 q)), (Permutation (insert x gv2) (insert gv0 gv2)), (Permutation (insert x gv2) (q ++ q)), (Permutation (insert x gv2) (q ++ gv2)), (Permutation (insert x gv2) (gv2 ++ q)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) []), (Permutation (insert gv0 q) q), (Permutation (insert gv0 q) gv2), (Permutation (insert gv0 q) (merge q q))
(Permutation (insert gv0 q) (merge q gv2)), (Permutation (insert gv0 q) (merge gv2 q)), (Permutation (insert gv0 q) (merge gv2 gv2)), (Permutation (insert gv0 q) (insert x q)), (Permutation (insert gv0 q) (insert x gv2)), (Permutation (insert gv0 q) (insert gv0 gv2)), (Permutation (insert gv0 q) (q ++ q)), (Permutation (insert gv0 q) (q ++ gv2)), (Permutation (insert gv0 q) (gv2 ++ q)), (Permutation (insert gv0 q) (gv2 ++ gv2))
(Permutation (insert gv0 q) []), (Permutation (insert gv0 gv2) q), (Permutation (insert gv0 gv2) gv2), (Permutation (insert gv0 gv2) (merge q q)), (Permutation (insert gv0 gv2) (merge q gv2)), (Permutation (insert gv0 gv2) (merge gv2 q)), (Permutation (insert gv0 gv2) (merge gv2 gv2)), (Permutation (insert gv0 gv2) (insert x q)), (Permutation (insert gv0 gv2) (insert x gv2)), (Permutation (insert gv0 gv2) (insert gv0 q))
(Permutation (insert gv0 gv2) (q ++ q)), (Permutation (insert gv0 gv2) (q ++ gv2)), (Permutation (insert gv0 gv2) (gv2 ++ q)), (Permutation (insert gv0 gv2) (gv2 ++ gv2)), (Permutation (insert gv0 gv2) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv2), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv2)), (Permutation (q ++ q) (merge gv2 q))
(Permutation (q ++ q) (merge gv2 gv2)), (Permutation (q ++ q) (insert x q)), (Permutation (q ++ q) (insert x gv2)), (Permutation (q ++ q) (insert gv0 q)), (Permutation (q ++ q) (insert gv0 gv2)), (Permutation (q ++ q) (q ++ gv2)), (Permutation (q ++ q) (gv2 ++ q)), (Permutation (q ++ q) (gv2 ++ gv2)), (Permutation (q ++ q) []), (Permutation (q ++ gv2) q)
(Permutation (q ++ gv2) gv2), (Permutation (q ++ gv2) (merge q q)), (Permutation (q ++ gv2) (merge q gv2)), (Permutation (q ++ gv2) (merge gv2 q)), (Permutation (q ++ gv2) (merge gv2 gv2)), (Permutation (q ++ gv2) (insert x q)), (Permutation (q ++ gv2) (insert x gv2)), (Permutation (q ++ gv2) (insert gv0 q)), (Permutation (q ++ gv2) (insert gv0 gv2)), (Permutation (q ++ gv2) (q ++ q))
(Permutation (q ++ gv2) (gv2 ++ q)), (Permutation (q ++ gv2) (gv2 ++ gv2)), (Permutation (q ++ gv2) []), (Permutation (gv2 ++ q) q), (Permutation (gv2 ++ q) gv2), (Permutation (gv2 ++ q) (merge q q)), (Permutation (gv2 ++ q) (merge q gv2)), (Permutation (gv2 ++ q) (merge gv2 q)), (Permutation (gv2 ++ q) (merge gv2 gv2)), (Permutation (gv2 ++ q) (insert x q))
(Permutation (gv2 ++ q) (insert x gv2)), (Permutation (gv2 ++ q) (insert gv0 q)), (Permutation (gv2 ++ q) (insert gv0 gv2)), (Permutation (gv2 ++ q) (q ++ q)), (Permutation (gv2 ++ q) (q ++ gv2)), (Permutation (gv2 ++ q) (gv2 ++ gv2)), (Permutation (gv2 ++ q) []), (Permutation (gv2 ++ gv2) q), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (merge q q))
(Permutation (gv2 ++ gv2) (merge q gv2)), (Permutation (gv2 ++ gv2) (merge gv2 q)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (insert x q)), (Permutation (gv2 ++ gv2) (insert x gv2)), (Permutation (gv2 ++ gv2) (insert gv0 q)), (Permutation (gv2 ++ gv2) (insert gv0 gv2)), (Permutation (gv2 ++ gv2) (q ++ q)), (Permutation (gv2 ++ gv2) (q ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ q))
(Permutation (gv2 ++ gv2) []), (Permutation [] q), (Permutation [] gv2), (Permutation [] (merge q q)), (Permutation [] (merge q gv2)), (Permutation [] (merge gv2 q)), (Permutation [] (merge gv2 gv2)), (Permutation [] (insert x q)), (Permutation [] (insert x gv2)), (Permutation [] (insert gv0 q))
(Permutation [] (insert gv0 gv2)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv2)), (Permutation [] (gv2 ++ q)), (Permutation [] (gv2 ++ gv2)), (In Leaf q), (In Leaf gv2), (In Leaf (merge q q)), (In Leaf (merge q gv2)), (In Leaf (merge gv2 q))
(In Leaf (merge gv2 gv2)), (In Leaf (insert x q)), (In Leaf (insert x gv2)), (In Leaf (insert gv0 q)), (In Leaf (insert gv0 gv2)), (In Leaf (q ++ q)), (In Leaf (q ++ gv2)), (In Leaf (gv2 ++ q)), (In Leaf (gv2 ++ gv2)), (x < find_max' x q)
(x < find_max' x gv2), (x < find_max' gv0 q), (x < find_max' gv0 gv2), (x < length q), (x < length gv2), (gv0 < find_max' x q), (gv0 < find_max' x gv2), (gv0 < find_max' gv0 q), (gv0 < find_max' gv0 gv2), (gv0 < length q)
(gv0 < length gv2), (find_max' x q < x), (find_max' x q < gv0), (find_max' x q < find_max' x gv2), (find_max' x q < find_max' gv0 q), (find_max' x q < find_max' gv0 gv2), (find_max' x q < length q), (find_max' x q < length gv2), (find_max' x gv2 < x), (find_max' x gv2 < gv0)
(find_max' x gv2 < find_max' x q), (find_max' x gv2 < find_max' gv0 q), (find_max' x gv2 < find_max' gv0 gv2), (find_max' x gv2 < length q), (find_max' x gv2 < length gv2), (find_max' gv0 q < x), (find_max' gv0 q < gv0), (find_max' gv0 q < find_max' x q), (find_max' gv0 q < find_max' x gv2), (find_max' gv0 q < find_max' gv0 gv2)
(find_max' gv0 q < length q), (find_max' gv0 q < length gv2), (find_max' gv0 gv2 < x), (find_max' gv0 gv2 < gv0), (find_max' gv0 gv2 < find_max' x q), (find_max' gv0 gv2 < find_max' x gv2), (find_max' gv0 gv2 < find_max' gv0 q), (find_max' gv0 gv2 < length q), (find_max' gv0 gv2 < length gv2), (length q < x)
(length q < gv0), (length q < find_max' x q), (length q < find_max' x gv2), (length q < find_max' gv0 q), (length q < find_max' gv0 gv2), (length q < length gv2), (length gv2 < x), (length gv2 < gv0), (length gv2 < find_max' x q), (length gv2 < find_max' x gv2)
(length gv2 < find_max' gv0 q), (length gv2 < find_max' gv0 gv2), (length gv2 < length q), (x <= find_max' x q), (x <= find_max' x gv2), (x <= find_max' gv0 q), (x <= find_max' gv0 gv2), (x <= length q), (x <= length gv2), (gv0 <= find_max' x q)
(gv0 <= find_max' x gv2), (gv0 <= find_max' gv0 q), (gv0 <= find_max' gv0 gv2), (gv0 <= length q), (gv0 <= length gv2), (find_max' x q <= x), (find_max' x q <= gv0), (find_max' x q <= find_max' x gv2), (find_max' x q <= find_max' gv0 q), (find_max' x q <= find_max' gv0 gv2)
(find_max' x q <= length q), (find_max' x q <= length gv2), (find_max' x gv2 <= x), (find_max' x gv2 <= gv0), (find_max' x gv2 <= find_max' x q), (find_max' x gv2 <= find_max' gv0 q), (find_max' x gv2 <= find_max' gv0 gv2), (find_max' x gv2 <= length q), (find_max' x gv2 <= length gv2), (find_max' gv0 q <= x)
(find_max' gv0 q <= gv0), (find_max' gv0 q <= find_max' x q), (find_max' gv0 q <= find_max' x gv2), (find_max' gv0 q <= find_max' gv0 gv2), (find_max' gv0 q <= length q), (find_max' gv0 q <= length gv2), (find_max' gv0 gv2 <= x), (find_max' gv0 gv2 <= gv0), (find_max' gv0 gv2 <= find_max' x q), (find_max' gv0 gv2 <= find_max' x gv2)
(find_max' gv0 gv2 <= find_max' gv0 q), (find_max' gv0 gv2 <= length q), (find_max' gv0 gv2 <= length gv2), (length q <= x), (length q <= gv0), (length q <= find_max' x q), (length q <= find_max' x gv2), (length q <= find_max' gv0 q), (length q <= find_max' gv0 gv2), (length q <= length gv2)
(length gv2 <= x), (length gv2 <= gv0), (length gv2 <= find_max' x q), (length gv2 <= find_max' x gv2), (length gv2 <= find_max' gv0 q), (length gv2 <= find_max' gv0 gv2), (length gv2 <= length q), (~ priq q), (~ priq gv2), (~ priqq x q)
(~ priqq x gv2), (~ priqq gv0 q), (~ priqq gv0 gv2), (~ Permutation q q), (~ Permutation q gv2), (~ Permutation gv2 q), (~ Permutation gv2 gv2), (~ x < x), (~ x < gv0), (~ gv0 < x)
(~ gv0 < gv0), (~ x <= x), (~ x <= gv0), (~ gv0 <= x), (~ gv0 <= gv0), (q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2), (x <> x)
(x <> gv0), (gv0 <> x), (gv0 <> gv0), (None = Some q), (None = Some gv2), (merge q q = q), (merge q q = gv2), (merge q q = insert x q), (merge q q = insert x gv2), (merge q q = insert gv0 q)
(merge q q = insert gv0 gv2), (merge q q = q ++ q), (merge q q = q ++ gv2), (merge q q = gv2 ++ q), (merge q q = gv2 ++ gv2), (merge q gv2 = q), (merge q gv2 = gv2), (merge q gv2 = insert x q), (merge q gv2 = insert x gv2), (merge q gv2 = insert gv0 q)
(merge q gv2 = insert gv0 gv2), (merge q gv2 = q ++ q), (merge q gv2 = q ++ gv2), (merge q gv2 = gv2 ++ q), (merge q gv2 = gv2 ++ gv2), (merge gv2 q = q), (merge gv2 q = gv2), (merge gv2 q = insert x q), (merge gv2 q = insert x gv2), (merge gv2 q = insert gv0 q)
(merge gv2 q = insert gv0 gv2), (merge gv2 q = q ++ q), (merge gv2 q = q ++ gv2), (merge gv2 q = gv2 ++ q), (merge gv2 q = gv2 ++ gv2), (merge gv2 gv2 = q), (merge gv2 gv2 = gv2), (merge gv2 gv2 = insert x q), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = insert gv0 q)
(merge gv2 gv2 = insert gv0 gv2), (merge gv2 gv2 = q ++ q), (merge gv2 gv2 = q ++ gv2), (merge gv2 gv2 = gv2 ++ q), (merge gv2 gv2 = gv2 ++ gv2), (insert x q = q), (insert x q = gv2), (insert x q = q ++ q), (insert x q = q ++ gv2), (insert x q = gv2 ++ q)
(insert x q = gv2 ++ gv2), (insert x gv2 = q), (insert x gv2 = gv2), (insert x gv2 = q ++ q), (insert x gv2 = q ++ gv2), (insert x gv2 = gv2 ++ q), (insert x gv2 = gv2 ++ gv2), (insert gv0 q = q), (insert gv0 q = gv2), (insert gv0 q = q ++ q)
(insert gv0 q = q ++ gv2), (insert gv0 q = gv2 ++ q), (insert gv0 q = gv2 ++ gv2), (insert gv0 gv2 = q), (insert gv0 gv2 = gv2), (insert gv0 gv2 = q ++ q), (insert gv0 gv2 = q ++ gv2), (insert gv0 gv2 = gv2 ++ q), (insert gv0 gv2 = gv2 ++ gv2), (q ++ q = q)
(q ++ q = gv2), (q ++ gv2 = q), (q ++ gv2 = gv2), (gv2 ++ q = q), (gv2 ++ q = gv2), (gv2 ++ gv2 = q), (gv2 ++ gv2 = gv2), ([] = q), ([] = gv2), ([] = merge q q)
([] = merge q gv2), ([] = merge gv2 q), ([] = merge gv2 gv2), ([] = insert x q), ([] = insert x gv2), ([] = insert gv0 q), ([] = insert gv0 gv2), ([] = q ++ q), ([] = q ++ gv2), ([] = gv2 ++ q)
([] = gv2 ++ gv2), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv2), ((q, q) = delete_max_aux gv0 q), ((q, q) = delete_max_aux gv0 gv2), ((q, gv2) = delete_max_aux x q), ((q, gv2) = delete_max_aux x gv2), ((q, gv2) = delete_max_aux gv0 q), ((q, gv2) = delete_max_aux gv0 gv2), ((gv2, q) = delete_max_aux x q)
((gv2, q) = delete_max_aux x gv2), ((gv2, q) = delete_max_aux gv0 q), ((gv2, q) = delete_max_aux gv0 gv2), ((gv2, gv2) = delete_max_aux x q), ((gv2, gv2) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux gv0 q), ((gv2, gv2) = delete_max_aux gv0 gv2), (find_max' x q = x), (find_max' x q = gv0), (find_max' x gv2 = x)
(find_max' x gv2 = gv0), (find_max' gv0 q = x), (find_max' gv0 q = gv0), (find_max' gv0 gv2 = x), (find_max' gv0 gv2 = gv0), (length q = x), (length q = gv0), (length q = find_max' x q), (length q = find_max' x gv2), (length q = find_max' gv0 q)
(length q = find_max' gv0 gv2), (length gv2 = x), (length gv2 = gv0), (length gv2 = find_max' x q), (length gv2 = find_max' x gv2), (length gv2 = find_max' gv0 q), (length gv2 = find_max' gv0 gv2), (Some x = find_max q), (Some x = find_max gv2), (Some gv0 = find_max q)
(Some gv0 = find_max gv2), (None = Some x), (None = Some gv0), (None = find_max q), (None = find_max gv2), ((x >? x) = (x >=? x)), ((x >? x) = (x >=? gv0)), ((x >? x) = (gv0 >=? x)), ((x >? x) = (gv0 >=? gv0)), ((x >? gv0) = (x >=? x))
((x >? gv0) = (x >=? gv0)), ((x >? gv0) = (gv0 >=? x)), ((x >? gv0) = (gv0 >=? gv0)), ((gv0 >? x) = (x >=? x)), ((gv0 >? x) = (x >=? gv0)), ((gv0 >? x) = (gv0 >=? x)), ((gv0 >? x) = (gv0 >=? gv0)), ((gv0 >? gv0) = (x >=? x)), ((gv0 >? gv0) = (x >=? gv0)), ((gv0 >? gv0) = (gv0 >=? x))
((gv0 >? gv0) = (gv0 >=? gv0))

Label: 9 (9)
(priq gv2), (priq gv1), (priqq x gv2), (priqq x gv1), (Permutation gv2 gv2), (Permutation gv2 gv1), (Permutation gv1 gv2), (Permutation gv1 gv1), (x < x), (x <= x)
(x = x), (gv2 = gv2), (gv2 = gv1), (gv1 = gv2), (gv1 = gv1), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs gv2 [])
(Abs gv1 []), (Abs (merge gv2 gv2) []), (Abs (merge gv2 gv1) []), (Abs (merge gv1 gv2) []), (Abs (merge gv1 gv1) []), (Abs (insert x gv2) []), (Abs (insert x gv1) []), (Abs (gv2 ++ gv2) []), (Abs (gv2 ++ gv1) []), (Abs (gv1 ++ gv2) [])
(Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems gv2 []), (priqueue_elems gv1 []), (priqueue_elems (merge gv2 gv2) []), (priqueue_elems (merge gv2 gv1) []), (priqueue_elems (merge gv1 gv2) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (insert x gv2) []), (priqueue_elems (insert x gv1) [])
(priqueue_elems (gv2 ++ gv2) []), (priqueue_elems (gv2 ++ gv1) []), (priqueue_elems (gv1 ++ gv2) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems Leaf []), (priq (merge gv2 gv2)), (priq (merge gv2 gv1)), (priq (merge gv1 gv2)), (priq (merge gv1 gv1))
(priq (insert x gv2)), (priq (insert x gv1)), (priq (gv2 ++ gv2)), (priq (gv2 ++ gv1)), (priq (gv1 ++ gv2)), (priq (gv1 ++ gv1)), (priqq x (merge gv2 gv2)), (priqq x (merge gv2 gv1)), (priqq x (merge gv1 gv2)), (priqq x (merge gv1 gv1))
(priqq x (insert x gv2)), (priqq x (insert x gv1)), (priqq x (gv2 ++ gv2)), (priqq x (gv2 ++ gv1)), (priqq x (gv1 ++ gv2)), (priqq x (gv1 ++ gv1)), (priqq (find_max' x gv2) gv2), (priqq (find_max' x gv2) gv1), (priqq (find_max' x gv2) (merge gv2 gv2)), (priqq (find_max' x gv2) (merge gv2 gv1))
(priqq (find_max' x gv2) (merge gv1 gv2)), (priqq (find_max' x gv2) (merge gv1 gv1)), (priqq (find_max' x gv2) (insert x gv2)), (priqq (find_max' x gv2) (insert x gv1)), (priqq (find_max' x gv2) (gv2 ++ gv2)), (priqq (find_max' x gv2) (gv2 ++ gv1)), (priqq (find_max' x gv2) (gv1 ++ gv2)), (priqq (find_max' x gv2) (gv1 ++ gv1)), (priqq (find_max' x gv1) gv2), (priqq (find_max' x gv1) gv1)
(priqq (find_max' x gv1) (merge gv2 gv2)), (priqq (find_max' x gv1) (merge gv2 gv1)), (priqq (find_max' x gv1) (merge gv1 gv2)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (insert x gv2)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (gv2 ++ gv2)), (priqq (find_max' x gv1) (gv2 ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ gv2)), (priqq (find_max' x gv1) (gv1 ++ gv1))
(priqq (length gv2) gv2), (priqq (length gv2) gv1), (priqq (length gv2) (merge gv2 gv2)), (priqq (length gv2) (merge gv2 gv1)), (priqq (length gv2) (merge gv1 gv2)), (priqq (length gv2) (merge gv1 gv1)), (priqq (length gv2) (insert x gv2)), (priqq (length gv2) (insert x gv1)), (priqq (length gv2) (gv2 ++ gv2)), (priqq (length gv2) (gv2 ++ gv1))
(priqq (length gv2) (gv1 ++ gv2)), (priqq (length gv2) (gv1 ++ gv1)), (priqq (length gv1) gv2), (priqq (length gv1) gv1), (priqq (length gv1) (merge gv2 gv2)), (priqq (length gv1) (merge gv2 gv1)), (priqq (length gv1) (merge gv1 gv2)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (insert x gv2)), (priqq (length gv1) (insert x gv1))
(priqq (length gv1) (gv2 ++ gv2)), (priqq (length gv1) (gv2 ++ gv1)), (priqq (length gv1) (gv1 ++ gv2)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heapp x x Leaf), (pow2heapp x (find_max' x gv2) Leaf), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (length gv2) Leaf), (pow2heapp x (length gv1) Leaf), (pow2heapp (find_max' x gv2) x Leaf)
(pow2heapp (find_max' x gv2) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv2) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv2) (length gv2) Leaf), (pow2heapp (find_max' x gv2) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv2) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (length gv2) Leaf), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (length gv2) x Leaf)
(pow2heapp (length gv2) (find_max' x gv2) Leaf), (pow2heapp (length gv2) (find_max' x gv1) Leaf), (pow2heapp (length gv2) (length gv2) Leaf), (pow2heapp (length gv2) (length gv1) Leaf), (pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) (find_max' x gv2) Leaf), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (length gv2) Leaf), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (merge gv2 gv1)), (Permutation gv2 (merge gv1 gv2)), (Permutation gv2 (merge gv1 gv1)), (Permutation gv2 (insert x gv2)), (Permutation gv2 (insert x gv1)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ gv1)), (Permutation gv2 (gv1 ++ gv2)), (Permutation gv2 (gv1 ++ gv1)), (Permutation gv2 [])
(Permutation gv1 (merge gv2 gv2)), (Permutation gv1 (merge gv2 gv1)), (Permutation gv1 (merge gv1 gv2)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (insert x gv2)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (gv2 ++ gv2)), (Permutation gv1 (gv2 ++ gv1)), (Permutation gv1 (gv1 ++ gv2)), (Permutation gv1 (gv1 ++ gv1))
(Permutation gv1 []), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) gv1), (Permutation (merge gv2 gv2) (merge gv2 gv1)), (Permutation (merge gv2 gv2) (merge gv1 gv2)), (Permutation (merge gv2 gv2) (merge gv1 gv1)), (Permutation (merge gv2 gv2) (insert x gv2)), (Permutation (merge gv2 gv2) (insert x gv1)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ gv1))
(Permutation (merge gv2 gv2) (gv1 ++ gv2)), (Permutation (merge gv2 gv2) (gv1 ++ gv1)), (Permutation (merge gv2 gv2) []), (Permutation (merge gv2 gv1) gv2), (Permutation (merge gv2 gv1) gv1), (Permutation (merge gv2 gv1) (merge gv2 gv2)), (Permutation (merge gv2 gv1) (merge gv1 gv2)), (Permutation (merge gv2 gv1) (merge gv1 gv1)), (Permutation (merge gv2 gv1) (insert x gv2)), (Permutation (merge gv2 gv1) (insert x gv1))
(Permutation (merge gv2 gv1) (gv2 ++ gv2)), (Permutation (merge gv2 gv1) (gv2 ++ gv1)), (Permutation (merge gv2 gv1) (gv1 ++ gv2)), (Permutation (merge gv2 gv1) (gv1 ++ gv1)), (Permutation (merge gv2 gv1) []), (Permutation (merge gv1 gv2) gv2), (Permutation (merge gv1 gv2) gv1), (Permutation (merge gv1 gv2) (merge gv2 gv2)), (Permutation (merge gv1 gv2) (merge gv2 gv1)), (Permutation (merge gv1 gv2) (merge gv1 gv1))
(Permutation (merge gv1 gv2) (insert x gv2)), (Permutation (merge gv1 gv2) (insert x gv1)), (Permutation (merge gv1 gv2) (gv2 ++ gv2)), (Permutation (merge gv1 gv2) (gv2 ++ gv1)), (Permutation (merge gv1 gv2) (gv1 ++ gv2)), (Permutation (merge gv1 gv2) (gv1 ++ gv1)), (Permutation (merge gv1 gv2) []), (Permutation (merge gv1 gv1) gv2), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge gv2 gv2))
(Permutation (merge gv1 gv1) (merge gv2 gv1)), (Permutation (merge gv1 gv1) (merge gv1 gv2)), (Permutation (merge gv1 gv1) (insert x gv2)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (gv2 ++ gv2)), (Permutation (merge gv1 gv1) (gv2 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ gv2)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (insert x gv2) gv2)
(Permutation (insert x gv2) gv1), (Permutation (insert x gv2) (merge gv2 gv2)), (Permutation (insert x gv2) (merge gv2 gv1)), (Permutation (insert x gv2) (merge gv1 gv2)), (Permutation (insert x gv2) (merge gv1 gv1)), (Permutation (insert x gv2) (insert x gv1)), (Permutation (insert x gv2) (gv2 ++ gv2)), (Permutation (insert x gv2) (gv2 ++ gv1)), (Permutation (insert x gv2) (gv1 ++ gv2)), (Permutation (insert x gv2) (gv1 ++ gv1))
(Permutation (insert x gv2) []), (Permutation (insert x gv1) gv2), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (merge gv2 gv2)), (Permutation (insert x gv1) (merge gv2 gv1)), (Permutation (insert x gv1) (merge gv1 gv2)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (insert x gv2)), (Permutation (insert x gv1) (gv2 ++ gv2)), (Permutation (insert x gv1) (gv2 ++ gv1))
(Permutation (insert x gv1) (gv1 ++ gv2)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) gv1), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 gv1)), (Permutation (gv2 ++ gv2) (merge gv1 gv2)), (Permutation (gv2 ++ gv2) (merge gv1 gv1)), (Permutation (gv2 ++ gv2) (insert x gv2))
(Permutation (gv2 ++ gv2) (insert x gv1)), (Permutation (gv2 ++ gv2) (gv2 ++ gv1)), (Permutation (gv2 ++ gv2) (gv1 ++ gv2)), (Permutation (gv2 ++ gv2) (gv1 ++ gv1)), (Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ gv1) gv2), (Permutation (gv2 ++ gv1) gv1), (Permutation (gv2 ++ gv1) (merge gv2 gv2)), (Permutation (gv2 ++ gv1) (merge gv2 gv1)), (Permutation (gv2 ++ gv1) (merge gv1 gv2))
(Permutation (gv2 ++ gv1) (merge gv1 gv1)), (Permutation (gv2 ++ gv1) (insert x gv2)), (Permutation (gv2 ++ gv1) (insert x gv1)), (Permutation (gv2 ++ gv1) (gv2 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ gv1)), (Permutation (gv2 ++ gv1) []), (Permutation (gv1 ++ gv2) gv2), (Permutation (gv1 ++ gv2) gv1), (Permutation (gv1 ++ gv2) (merge gv2 gv2))
(Permutation (gv1 ++ gv2) (merge gv2 gv1)), (Permutation (gv1 ++ gv2) (merge gv1 gv2)), (Permutation (gv1 ++ gv2) (merge gv1 gv1)), (Permutation (gv1 ++ gv2) (insert x gv2)), (Permutation (gv1 ++ gv2) (insert x gv1)), (Permutation (gv1 ++ gv2) (gv2 ++ gv2)), (Permutation (gv1 ++ gv2) (gv2 ++ gv1)), (Permutation (gv1 ++ gv2) (gv1 ++ gv1)), (Permutation (gv1 ++ gv2) []), (Permutation (gv1 ++ gv1) gv2)
(Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (merge gv2 gv2)), (Permutation (gv1 ++ gv1) (merge gv2 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 gv2)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (insert x gv2)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (gv2 ++ gv2)), (Permutation (gv1 ++ gv1) (gv2 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ gv2))
(Permutation (gv1 ++ gv1) []), (Permutation [] gv2), (Permutation [] gv1), (Permutation [] (merge gv2 gv2)), (Permutation [] (merge gv2 gv1)), (Permutation [] (merge gv1 gv2)), (Permutation [] (merge gv1 gv1)), (Permutation [] (insert x gv2)), (Permutation [] (insert x gv1)), (Permutation [] (gv2 ++ gv2))
(Permutation [] (gv2 ++ gv1)), (Permutation [] (gv1 ++ gv2)), (Permutation [] (gv1 ++ gv1)), (In Leaf gv2), (In Leaf gv1), (In Leaf (merge gv2 gv2)), (In Leaf (merge gv2 gv1)), (In Leaf (merge gv1 gv2)), (In Leaf (merge gv1 gv1)), (In Leaf (insert x gv2))
(In Leaf (insert x gv1)), (In Leaf (gv2 ++ gv2)), (In Leaf (gv2 ++ gv1)), (In Leaf (gv1 ++ gv2)), (In Leaf (gv1 ++ gv1)), (x < find_max' x gv2), (x < find_max' x gv1), (x < length gv2), (x < length gv1), (find_max' x gv2 < x)
(find_max' x gv2 < find_max' x gv1), (find_max' x gv2 < length gv2), (find_max' x gv2 < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < find_max' x gv2), (find_max' x gv1 < length gv2), (find_max' x gv1 < length gv1), (length gv2 < x), (length gv2 < find_max' x gv2), (length gv2 < find_max' x gv1)
(length gv2 < length gv1), (length gv1 < x), (length gv1 < find_max' x gv2), (length gv1 < find_max' x gv1), (length gv1 < length gv2), (x <= find_max' x gv2), (x <= find_max' x gv1), (x <= length gv2), (x <= length gv1), (find_max' x gv2 <= x)
(find_max' x gv2 <= find_max' x gv1), (find_max' x gv2 <= length gv2), (find_max' x gv2 <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= find_max' x gv2), (find_max' x gv1 <= length gv2), (find_max' x gv1 <= length gv1), (length gv2 <= x), (length gv2 <= find_max' x gv2), (length gv2 <= find_max' x gv1)
(length gv2 <= length gv1), (length gv1 <= x), (length gv1 <= find_max' x gv2), (length gv1 <= find_max' x gv1), (length gv1 <= length gv2), (~ priq gv2), (~ priq gv1), (~ priqq x gv2), (~ priqq x gv1), (~ Permutation gv2 gv2)
(~ Permutation gv2 gv1), (~ Permutation gv1 gv2), (~ Permutation gv1 gv1), (~ x < x), (~ x <= x), (x <> x), (gv2 <> gv2), (gv2 <> gv1), (gv1 <> gv2), (gv1 <> gv1)
(None = Some gv2), (None = Some gv1), (merge gv2 gv2 = gv2), (merge gv2 gv2 = gv1), (merge gv2 gv2 = insert x gv2), (merge gv2 gv2 = insert x gv1), (merge gv2 gv2 = gv2 ++ gv2), (merge gv2 gv2 = gv2 ++ gv1), (merge gv2 gv2 = gv1 ++ gv2), (merge gv2 gv2 = gv1 ++ gv1)
(merge gv2 gv1 = gv2), (merge gv2 gv1 = gv1), (merge gv2 gv1 = insert x gv2), (merge gv2 gv1 = insert x gv1), (merge gv2 gv1 = gv2 ++ gv2), (merge gv2 gv1 = gv2 ++ gv1), (merge gv2 gv1 = gv1 ++ gv2), (merge gv2 gv1 = gv1 ++ gv1), (merge gv1 gv2 = gv2), (merge gv1 gv2 = gv1)
(merge gv1 gv2 = insert x gv2), (merge gv1 gv2 = insert x gv1), (merge gv1 gv2 = gv2 ++ gv2), (merge gv1 gv2 = gv2 ++ gv1), (merge gv1 gv2 = gv1 ++ gv2), (merge gv1 gv2 = gv1 ++ gv1), (merge gv1 gv1 = gv2), (merge gv1 gv1 = gv1), (merge gv1 gv1 = insert x gv2), (merge gv1 gv1 = insert x gv1)
(merge gv1 gv1 = gv2 ++ gv2), (merge gv1 gv1 = gv2 ++ gv1), (merge gv1 gv1 = gv1 ++ gv2), (merge gv1 gv1 = gv1 ++ gv1), (insert x gv2 = gv2), (insert x gv2 = gv1), (insert x gv2 = gv2 ++ gv2), (insert x gv2 = gv2 ++ gv1), (insert x gv2 = gv1 ++ gv2), (insert x gv2 = gv1 ++ gv1)
(insert x gv1 = gv2), (insert x gv1 = gv1), (insert x gv1 = gv2 ++ gv2), (insert x gv1 = gv2 ++ gv1), (insert x gv1 = gv1 ++ gv2), (insert x gv1 = gv1 ++ gv1), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = gv1), (gv2 ++ gv1 = gv2), (gv2 ++ gv1 = gv1)
(gv1 ++ gv2 = gv2), (gv1 ++ gv2 = gv1), (gv1 ++ gv1 = gv2), (gv1 ++ gv1 = gv1), ([] = gv2), ([] = gv1), ([] = merge gv2 gv2), ([] = merge gv2 gv1), ([] = merge gv1 gv2), ([] = merge gv1 gv1)
([] = insert x gv2), ([] = insert x gv1), ([] = gv2 ++ gv2), ([] = gv2 ++ gv1), ([] = gv1 ++ gv2), ([] = gv1 ++ gv1), ((gv2, gv2) = delete_max_aux x gv2), ((gv2, gv2) = delete_max_aux x gv1), ((gv2, gv1) = delete_max_aux x gv2), ((gv2, gv1) = delete_max_aux x gv1)
((gv1, gv2) = delete_max_aux x gv2), ((gv1, gv2) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux x gv2), ((gv1, gv1) = delete_max_aux x gv1), (find_max' x gv2 = x), (find_max' x gv1 = x), (length gv2 = x), (length gv2 = find_max' x gv2), (length gv2 = find_max' x gv1), (length gv1 = x)
(length gv1 = find_max' x gv2), (length gv1 = find_max' x gv1), (Some x = find_max gv2), (Some x = find_max gv1), (None = Some x), (None = find_max gv2), (None = find_max gv1), ((x >? x) = (x >=? x))

Label: 10 (10)
(priq q), (priq gv1), (priqq x q), (priqq x gv1), (Permutation q q), (Permutation q gv1), (Permutation gv1 q), (Permutation gv1 gv1), (x < x), (x <= x)
(x = x), (q = q), (q = gv1), (gv1 = q), (gv1 = gv1), (false = (x >? x)), (false = (x >=? x)), (true = (x >? x)), (true = (x >=? x)), (Abs q [])
(Abs gv1 []), (Abs (merge q q) []), (Abs (merge q gv1) []), (Abs (merge gv1 q) []), (Abs (merge gv1 gv1) []), (Abs (insert x q) []), (Abs (insert x gv1) []), (Abs (q ++ q) []), (Abs (q ++ gv1) []), (Abs (gv1 ++ q) [])
(Abs (gv1 ++ gv1) []), (Abs [] []), (priqueue_elems q []), (priqueue_elems gv1 []), (priqueue_elems (merge q q) []), (priqueue_elems (merge q gv1) []), (priqueue_elems (merge gv1 q) []), (priqueue_elems (merge gv1 gv1) []), (priqueue_elems (insert x q) []), (priqueue_elems (insert x gv1) [])
(priqueue_elems (q ++ q) []), (priqueue_elems (q ++ gv1) []), (priqueue_elems (gv1 ++ q) []), (priqueue_elems (gv1 ++ gv1) []), (priqueue_elems [] []), (tree_elems Leaf []), (priq (merge q q)), (priq (merge q gv1)), (priq (merge gv1 q)), (priq (merge gv1 gv1))
(priq (insert x q)), (priq (insert x gv1)), (priq (q ++ q)), (priq (q ++ gv1)), (priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priqq x (merge q q)), (priqq x (merge q gv1)), (priqq x (merge gv1 q)), (priqq x (merge gv1 gv1))
(priqq x (insert x q)), (priqq x (insert x gv1)), (priqq x (q ++ q)), (priqq x (q ++ gv1)), (priqq x (gv1 ++ q)), (priqq x (gv1 ++ gv1)), (priqq (find_max' x q) q), (priqq (find_max' x q) gv1), (priqq (find_max' x q) (merge q q)), (priqq (find_max' x q) (merge q gv1))
(priqq (find_max' x q) (merge gv1 q)), (priqq (find_max' x q) (merge gv1 gv1)), (priqq (find_max' x q) (insert x q)), (priqq (find_max' x q) (insert x gv1)), (priqq (find_max' x q) (q ++ q)), (priqq (find_max' x q) (q ++ gv1)), (priqq (find_max' x q) (gv1 ++ q)), (priqq (find_max' x q) (gv1 ++ gv1)), (priqq (find_max' x gv1) q), (priqq (find_max' x gv1) gv1)
(priqq (find_max' x gv1) (merge q q)), (priqq (find_max' x gv1) (merge q gv1)), (priqq (find_max' x gv1) (merge gv1 q)), (priqq (find_max' x gv1) (merge gv1 gv1)), (priqq (find_max' x gv1) (insert x q)), (priqq (find_max' x gv1) (insert x gv1)), (priqq (find_max' x gv1) (q ++ q)), (priqq (find_max' x gv1) (q ++ gv1)), (priqq (find_max' x gv1) (gv1 ++ q)), (priqq (find_max' x gv1) (gv1 ++ gv1))
(priqq (length q) q), (priqq (length q) gv1), (priqq (length q) (merge q q)), (priqq (length q) (merge q gv1)), (priqq (length q) (merge gv1 q)), (priqq (length q) (merge gv1 gv1)), (priqq (length q) (insert x q)), (priqq (length q) (insert x gv1)), (priqq (length q) (q ++ q)), (priqq (length q) (q ++ gv1))
(priqq (length q) (gv1 ++ q)), (priqq (length q) (gv1 ++ gv1)), (priqq (length gv1) q), (priqq (length gv1) gv1), (priqq (length gv1) (merge q q)), (priqq (length gv1) (merge q gv1)), (priqq (length gv1) (merge gv1 q)), (priqq (length gv1) (merge gv1 gv1)), (priqq (length gv1) (insert x q)), (priqq (length gv1) (insert x gv1))
(priqq (length gv1) (q ++ q)), (priqq (length gv1) (q ++ gv1)), (priqq (length gv1) (gv1 ++ q)), (priqq (length gv1) (gv1 ++ gv1)), (pow2heapp x x Leaf), (pow2heapp x (find_max' x q) Leaf), (pow2heapp x (find_max' x gv1) Leaf), (pow2heapp x (length q) Leaf), (pow2heapp x (length gv1) Leaf), (pow2heapp (find_max' x q) x Leaf)
(pow2heapp (find_max' x q) (find_max' x q) Leaf), (pow2heapp (find_max' x q) (find_max' x gv1) Leaf), (pow2heapp (find_max' x q) (length q) Leaf), (pow2heapp (find_max' x q) (length gv1) Leaf), (pow2heapp (find_max' x gv1) x Leaf), (pow2heapp (find_max' x gv1) (find_max' x q) Leaf), (pow2heapp (find_max' x gv1) (find_max' x gv1) Leaf), (pow2heapp (find_max' x gv1) (length q) Leaf), (pow2heapp (find_max' x gv1) (length gv1) Leaf), (pow2heapp (length q) x Leaf)
(pow2heapp (length q) (find_max' x q) Leaf), (pow2heapp (length q) (find_max' x gv1) Leaf), (pow2heapp (length q) (length q) Leaf), (pow2heapp (length q) (length gv1) Leaf), (pow2heapp (length gv1) x Leaf), (pow2heapp (length gv1) (find_max' x q) Leaf), (pow2heapp (length gv1) (find_max' x gv1) Leaf), (pow2heapp (length gv1) (length q) Leaf), (pow2heapp (length gv1) (length gv1) Leaf), (Permutation q (merge q q))
(Permutation q (merge q gv1)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (insert x q)), (Permutation q (insert x gv1)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q [])
(Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (insert x q)), (Permutation gv1 (insert x gv1)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1))
(Permutation gv1 []), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (insert x q)), (Permutation (merge q q) (insert x gv1)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1))
(Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) []), (Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (insert x q)), (Permutation (merge q gv1) (insert x gv1))
(Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) []), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge gv1 gv1))
(Permutation (merge gv1 q) (insert x q)), (Permutation (merge gv1 q) (insert x gv1)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ q)), (Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge q q))
(Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (insert x q)), (Permutation (merge gv1 gv1) (insert x gv1)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (insert x q) q)
(Permutation (insert x q) gv1), (Permutation (insert x q) (merge q q)), (Permutation (insert x q) (merge q gv1)), (Permutation (insert x q) (merge gv1 q)), (Permutation (insert x q) (merge gv1 gv1)), (Permutation (insert x q) (insert x gv1)), (Permutation (insert x q) (q ++ q)), (Permutation (insert x q) (q ++ gv1)), (Permutation (insert x q) (gv1 ++ q)), (Permutation (insert x q) (gv1 ++ gv1))
(Permutation (insert x q) []), (Permutation (insert x gv1) q), (Permutation (insert x gv1) gv1), (Permutation (insert x gv1) (merge q q)), (Permutation (insert x gv1) (merge q gv1)), (Permutation (insert x gv1) (merge gv1 q)), (Permutation (insert x gv1) (merge gv1 gv1)), (Permutation (insert x gv1) (insert x q)), (Permutation (insert x gv1) (q ++ q)), (Permutation (insert x gv1) (q ++ gv1))
(Permutation (insert x gv1) (gv1 ++ q)), (Permutation (insert x gv1) (gv1 ++ gv1)), (Permutation (insert x gv1) []), (Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (insert x q))
(Permutation (q ++ q) (insert x gv1)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge gv1 q))
(Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (insert x q)), (Permutation (q ++ gv1) (insert x gv1)), (Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) (merge q q))
(Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (insert x q)), (Permutation (gv1 ++ q) (insert x gv1)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q)
(Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (merge q q)), (Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (insert x q)), (Permutation (gv1 ++ gv1) (insert x gv1)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ q))
(Permutation (gv1 ++ gv1) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (insert x q)), (Permutation [] (insert x gv1)), (Permutation [] (q ++ q))
(Permutation [] (q ++ gv1)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (In Leaf q), (In Leaf gv1), (In Leaf (merge q q)), (In Leaf (merge q gv1)), (In Leaf (merge gv1 q)), (In Leaf (merge gv1 gv1)), (In Leaf (insert x q))
(In Leaf (insert x gv1)), (In Leaf (q ++ q)), (In Leaf (q ++ gv1)), (In Leaf (gv1 ++ q)), (In Leaf (gv1 ++ gv1)), (x < find_max' x q), (x < find_max' x gv1), (x < length q), (x < length gv1), (find_max' x q < x)
(find_max' x q < find_max' x gv1), (find_max' x q < length q), (find_max' x q < length gv1), (find_max' x gv1 < x), (find_max' x gv1 < find_max' x q), (find_max' x gv1 < length q), (find_max' x gv1 < length gv1), (length q < x), (length q < find_max' x q), (length q < find_max' x gv1)
(length q < length gv1), (length gv1 < x), (length gv1 < find_max' x q), (length gv1 < find_max' x gv1), (length gv1 < length q), (x <= find_max' x q), (x <= find_max' x gv1), (x <= length q), (x <= length gv1), (find_max' x q <= x)
(find_max' x q <= find_max' x gv1), (find_max' x q <= length q), (find_max' x q <= length gv1), (find_max' x gv1 <= x), (find_max' x gv1 <= find_max' x q), (find_max' x gv1 <= length q), (find_max' x gv1 <= length gv1), (length q <= x), (length q <= find_max' x q), (length q <= find_max' x gv1)
(length q <= length gv1), (length gv1 <= x), (length gv1 <= find_max' x q), (length gv1 <= find_max' x gv1), (length gv1 <= length q), (~ priq q), (~ priq gv1), (~ priqq x q), (~ priqq x gv1), (~ Permutation q q)
(~ Permutation q gv1), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ x < x), (~ x <= x), (x <> x), (q <> q), (q <> gv1), (gv1 <> q), (gv1 <> gv1)
(None = Some q), (None = Some gv1), (merge q q = q), (merge q q = gv1), (merge q q = insert x q), (merge q q = insert x gv1), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1)
(merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = insert x q), (merge q gv1 = insert x gv1), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = gv1 ++ q), (merge q gv1 = gv1 ++ gv1), (merge gv1 q = q), (merge gv1 q = gv1)
(merge gv1 q = insert x q), (merge gv1 q = insert x gv1), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = insert x q), (merge gv1 gv1 = insert x gv1)
(merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1), (insert x q = q), (insert x q = gv1), (insert x q = q ++ q), (insert x q = q ++ gv1), (insert x q = gv1 ++ q), (insert x q = gv1 ++ gv1)
(insert x gv1 = q), (insert x gv1 = gv1), (insert x gv1 = q ++ q), (insert x gv1 = q ++ gv1), (insert x gv1 = gv1 ++ q), (insert x gv1 = gv1 ++ gv1), (q ++ q = q), (q ++ q = gv1), (q ++ gv1 = q), (q ++ gv1 = gv1)
(gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ gv1 = q), (gv1 ++ gv1 = gv1), ([] = q), ([] = gv1), ([] = merge q q), ([] = merge q gv1), ([] = merge gv1 q), ([] = merge gv1 gv1)
([] = insert x q), ([] = insert x gv1), ([] = q ++ q), ([] = q ++ gv1), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ((q, q) = delete_max_aux x q), ((q, q) = delete_max_aux x gv1), ((q, gv1) = delete_max_aux x q), ((q, gv1) = delete_max_aux x gv1)
((gv1, q) = delete_max_aux x q), ((gv1, q) = delete_max_aux x gv1), ((gv1, gv1) = delete_max_aux x q), ((gv1, gv1) = delete_max_aux x gv1), (find_max' x q = x), (find_max' x gv1 = x), (length q = x), (length q = find_max' x q), (length q = find_max' x gv1), (length gv1 = x)
(length gv1 = find_max' x q), (length gv1 = find_max' x gv1), (Some x = find_max q), (Some x = find_max gv1), (None = Some x), (None = find_max q), (None = find_max gv1), ((x >? x) = (x >=? x))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 298.489 seconds


Label: 0 (0)

Label: 1 (1)
(priq (gv4 :: q)), (Permutation (insert x q) (carry q gv4)), (Permutation (carry q gv4) (insert x q)), (insert x q = carry q gv4)

Label: 2 (2)
(priq (gv4 :: q)), (Node x gv3 gv3 = gv4), (Permutation (insert x q) (carry q gv4)), (Permutation (carry q gv4) (insert x q)), (insert x q = carry q gv4), (Node x gv4 gv3 = smash gv4 gv4), (In (Node x gv3 gv3) (gv4 :: q)), (In (Node x gv3 gv3) (join q q gv4))

Label: 3 (3)
(pow2heapp gv0 x gv3), (pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 gv3), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (length q) gv3), (pow2heap gv0 (Node x gv3 gv3)), (pow2heapp gv0 (length q) Leaf), (pow2heap gv0 (Node gv0 gv3 gv3)), (pow2heapp gv0 x (smash gv3 gv3)), (pow2heapp gv0 gv0 (smash gv3 gv3))
(pow2heapp gv0 (find_max' x q) gv3), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' gv0 q) gv3), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (length q) (smash gv3 gv3)), (pow2heapp gv0 (find_max' x q) (smash gv3 gv3)), (pow2heapp gv0 (find_max' gv0 q) (smash gv3 gv3))

Label: 4 (4)
(tree_elems gv3 []), (smash gv3 gv3 = gv3), (In gv3 (merge gv2 gv2)), (Permutation q (carry q gv3)), (Permutation (carry q gv3) q), (Permutation gv2 (carry gv2 gv3)), (Permutation (carry gv2 gv3) gv2), (carry q gv3 = q), (carry gv2 gv3 = gv2), (Permutation gv2 (gv3 :: q))
(Permutation (gv3 :: q) gv2), (gv3 :: q = gv2), (In (Node x gv3 gv3) (insert x gv2)), (Permutation (merge q q) (join q q gv3)), (Permutation (join q q gv3) (merge q q)), (Permutation (merge q gv2) (join q gv2 gv3)), (Permutation (merge q gv2) (join gv2 q gv3)), (Permutation (merge gv2 q) (join q gv2 gv3)), (Permutation (merge gv2 q) (join gv2 q gv3)), (Permutation (join q gv2 gv3) (merge q gv2))

Label: 5 (5)
(priq gv1)

Label: 6 (6)
(pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 Leaf), (pow2heapp gv0 (length q) Leaf), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' gv0 q) Leaf)

Label: 7 (7)
(priq (carry gv2 gv4)), (priq (gv4 :: q)), (priq (join gv2 gv2 gv4)), (In gv4 (insert x gv2)), (Permutation (insert x gv2) (carry gv2 gv4)), (Permutation (carry gv2 gv4) (insert x gv2)), (insert x gv2 = carry gv2 gv4), (Permutation (gv4 :: q) (insert x gv2)), (Permutation (insert x gv2) (gv4 :: q)), (gv4 :: q = insert x gv2)

Label: 8 (8)
(pow2heapp gv0 x Leaf), (pow2heapp gv0 gv0 Leaf), (priqq gv0 (insert x gv2)), (priqq gv0 (insert gv0 gv2)), (pow2heapp gv0 (length q) Leaf), (pow2heapp gv0 (length gv2) Leaf), (pow2heapp gv0 (find_max' x q) Leaf), (pow2heapp gv0 (find_max' x gv2) Leaf), (pow2heapp gv0 (find_max' gv0 q) Leaf), (pow2heapp gv0 (find_max' gv0 gv2) Leaf)

Label: 9 (9)
(priq gv1), (Permutation gv1 (insert x gv2)), (Permutation (insert x gv2) gv1), (insert x gv2 = gv1)

Label: 10 (10)
(priq gv1)


------------------------------ ALL RESULTS ------------------------------
1. (priqq 0 gv2 -> priqq 0 (carry gv2 (Node x Leaf Leaf)))

2. (priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) (Node x gv3 gv3)))

3. (priqq 0 (Leaf :: q) -> priqq 0 (carry (Leaf :: q) (Node x Leaf Leaf)))

4. (smash Leaf Leaf = Leaf)

5. (insert x gv2 = carry gv2 (Node x Leaf Leaf))

6. (priqq 0 gv2 -> tree_elems gv3 [] -> priqq 0 (carry gv2 (Node x gv3 gv3)))

7. (pow2heapp gv0 x Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

8. (pow2heapp gv0 gv0 Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

9. (priq (gv4 :: q) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

10. (priq (join gv2 gv2 gv4) -> priqq 0 gv2 -> priqq 0 (carry gv2 gv4))

11. (priqq gv0 gv2 ->  priqq gv0 (insert gv0 gv2) -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

12. (priqq 0 gv2 -> smash gv3 gv3 = gv3 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

13. (In gv3 (merge gv2 gv2) ->  priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

14. (priqq 0 gv2 ->  Permutation q (carry q gv3) -> priqq 0 (carry gv2 (Node x gv3 gv3)))

15. (priqq 0 gv2 ->  Permutation (carry q gv3) q -> priqq 0 (carry gv2 (Node x gv3 gv3)))

16. (priqq 0 gv2 ->  Permutation gv2 (carry gv2 gv3) -> priqq 0 (carry gv2 (Node x gv3 gv3)))

17. (priqq 0 gv2 ->  Permutation (carry gv2 gv3) gv2 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

18. (pow2heapp gv0 (length q) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

19. (pow2heapp gv0 (length gv2) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

20. (pow2heapp gv0 (find_max' x q) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

21. (pow2heapp gv0 (find_max' x gv2) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

22. (pow2heapp gv0 (find_max' gv0 q) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

23. (pow2heapp gv0 (find_max' gv0 gv2) Leaf ->  priqq gv0 gv2 -> priqq gv0 (carry gv2 (Node x Leaf Leaf)))

24. (pow2heapp gv0 x gv3 ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

25. (pow2heapp gv0 x Leaf ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

26. (pow2heapp gv0 gv0 gv3 ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

27. (pow2heapp gv0 gv0 Leaf ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

28. (priqq 0 gv2 -> carry q gv3 = q -> priqq 0 (carry gv2 (Node x gv3 gv3)))

29. (priqq 0 gv2 -> carry gv2 gv3 = gv2 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

30. (priqq 0 gv2 ->  Permutation gv2 (gv3 :: q) -> priqq 0 (carry gv2 (Node x gv3 gv3)))

31. (priqq 0 gv2 ->  Permutation (gv3 :: q) gv2 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

32. (pow2heapp gv0 x Leaf ->  priqq gv0 (Leaf :: q) -> priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))

33. (pow2heapp gv0 gv0 Leaf ->  priqq gv0 (Leaf :: q) -> priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))

34. (priq (gv4 :: q) -> priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

35. (priqq 0 gv2 ->  Permutation (insert x gv2) (carry gv2 gv4) -> priqq 0 (carry gv2 gv4))

36. (priqq 0 gv2 ->  Permutation (carry gv2 gv4) (insert x gv2) -> priqq 0 (carry gv2 gv4))

37. (pow2heapp gv0 (length q) gv3 ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

38. (pow2heap gv0 (Node x gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

39. (pow2heapp gv0 (length q) Leaf ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

40. (pow2heap gv0 (Node gv0 gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

41. (pow2heapp gv0 x (smash gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

42. (pow2heapp gv0 gv0 (smash gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

43. (pow2heapp gv0 (find_max' x q) gv3 ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

44. (pow2heapp gv0 (find_max' x q) Leaf ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

45. (pow2heapp gv0 (find_max' gv0 q) gv3 ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

46. (pow2heapp gv0 (find_max' gv0 q) Leaf ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

47. (In (Node x gv3 gv3) (insert x gv2) ->  priqq 0 gv2 -> priqq 0 (carry gv2 (Node x gv3 gv3)))

48. (priqq 0 gv2 ->  Permutation (merge q q) (join q q gv3) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

49. (priqq 0 gv2 ->  Permutation (join q q gv3) (merge q q) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

50. (priqq 0 gv2 ->  Permutation (merge q gv2) (join q gv2 gv3) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

51. (priqq 0 gv2 ->  Permutation (merge q gv2) (join gv2 q gv3) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

52. (priqq 0 gv2 ->  Permutation (merge gv2 q) (join q gv2 gv3) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

53. (priqq 0 gv2 ->  Permutation (merge gv2 q) (join gv2 q gv3) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

54. (priqq 0 gv2 ->  Permutation (join q gv2 gv3) (merge q gv2) ->  priqq 0 (carry gv2 (Node x gv3 gv3)))

55. (pow2heapp gv0 (length q) Leaf ->  priqq gv0 (Leaf :: q) -> priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))

56. (pow2heapp gv0 (find_max' x q) Leaf ->  priqq gv0 (Leaf :: q) -> priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))

57. (pow2heapp gv0 (find_max' gv0 q) Leaf ->  priqq gv0 (Leaf :: q) -> priqq gv0 (carry (Leaf :: q) (Node x Leaf Leaf)))

58. (priqq 0 gv2 -> insert x gv2 = carry gv2 gv4 -> priqq 0 (carry gv2 gv4))

59. (priqq 0 gv2 ->  Permutation (gv4 :: q) (insert x gv2) -> priqq 0 (carry gv2 gv4))

60. (priqq 0 gv2 ->  Permutation (insert x gv2) (gv4 :: q) -> priqq 0 (carry gv2 gv4))

61. (priqq 0 gv2 -> gv4 :: q = insert x gv2 -> priqq 0 (carry gv2 gv4))

62. (priqq 0 (Leaf :: q) ->  Permutation (insert x q) (carry q gv4) -> priqq 0 (carry (Leaf :: q) gv4))

63. (priqq 0 (Leaf :: q) ->  Permutation (carry q gv4) (insert x q) -> priqq 0 (carry (Leaf :: q) gv4))

64. (priqq 0 (gv3 :: q) ->  Permutation (insert x q) (carry q gv4) -> priqq 0 (carry (gv3 :: q) gv4))

65. (priqq 0 (gv3 :: q) ->  Permutation (carry q gv4) (insert x q) -> priqq 0 (carry (gv3 :: q) gv4))

66. (pow2heapp gv0 (length q) (smash gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

67. (pow2heapp gv0 (find_max' x q) (smash gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

68. (pow2heapp gv0 (find_max' gv0 q) (smash gv3 gv3) ->  priqq gv0 (gv3 :: q) -> priqq gv0 (carry (gv3 :: q) (Node x gv3 gv3)))

69. (priqq 0 (Leaf :: q) ->  insert x q = carry q gv4 -> priqq 0 (carry (Leaf :: q) gv4))

70. (priqq 0 (gv3 :: q) ->  insert x q = carry q gv4 -> priqq 0 (carry (gv3 :: q) gv4))

71. (priqq 0 (gv3 :: q) ->  Node x gv4 gv3 = smash gv4 gv4 -> priqq 0 (carry (gv3 :: q) gv4))

72. (In (Node x gv3 gv3) (gv4 :: q) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))

73. (In (Node x gv3 gv3) (join q q gv4) ->  priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) gv4))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 439.26 seconds

Number of Result Pairs Returned: 73

1. (priqq 0 gv2 -> priqq 0 (carry gv2 (Node x Leaf Leaf)))

2. (priqq 0 (gv3 :: q) -> priqq 0 (carry (gv3 :: q) (Node x gv3 gv3)))

3. (priqq 0 (Leaf :: q) -> priqq 0 (carry (Leaf :: q) (Node x Leaf Leaf)))

4. (insert x gv2 = carry gv2 (Node x Leaf Leaf))

5. (priqq 0 gv2 -> tree_elems gv3 [] -> priqq 0 (carry gv2 (Node x gv3 gv3)))
