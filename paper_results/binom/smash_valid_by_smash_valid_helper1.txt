Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- ((n0 >? n1) = true)
 -- (pow2heap n (Node n1 u1 Leaf))
 -- (pow2heap n (Node n0 t1 Leaf))

----------------------------------
Goal: (n0 >= n1)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.416 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 18.266 seconds

Label: Generalization #0
Assumptions: 
 -- ((n0 >? n1) = true)

----------------------------------
Goal: (n0 >= n1)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 18.41 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: ((n0 >? n1) = true)
Positive Examples: 21
Negative Examples: 21


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 18.543 seconds


Label: 0 (0)
(n1 < n1), (n1 < n0), (n0 < n1), (n0 < n0), (n1 <= n1), (n1 <= n0), (n0 <= n1), (n0 <= n0), (n1 = n1), (n1 = n0)
(n0 = n1), (n0 = n0), (false = (n1 >? n1)), (false = (n1 >? n0)), (false = (n0 >? n1)), (false = (n0 >? n0)), (false = (n1 >=? n1)), (false = (n1 >=? n0)), (false = (n0 >=? n1)), (false = (n0 >=? n0))
(true = (n1 >? n1)), (true = (n1 >? n0)), (true = (n0 >? n1)), (true = (n0 >? n0)), (true = (n1 >=? n1)), (true = (n1 >=? n0)), (true = (n0 >=? n1)), (true = (n0 >=? n0)), (tree_elems Leaf []), (pow2heapp n1 n1 Leaf)
(pow2heapp n1 n0 Leaf), (pow2heapp n0 n1 Leaf), (pow2heapp n0 n0 Leaf), (~ n1 < n1), (~ n1 < n0), (~ n0 < n1), (~ n0 < n0), (~ n1 <= n1), (~ n1 <= n0), (~ n0 <= n1)
(~ n0 <= n0), (n1 <> n1), (n1 <> n0), (n0 <> n1), (n0 <> n0), (None = Some n1), (None = Some n0), ((n1 >? n1) = (n1 >=? n1)), ((n1 >? n1) = (n1 >=? n0)), ((n1 >? n1) = (n0 >=? n1))
((n1 >? n1) = (n0 >=? n0)), ((n1 >? n0) = (n1 >=? n1)), ((n1 >? n0) = (n1 >=? n0)), ((n1 >? n0) = (n0 >=? n1)), ((n1 >? n0) = (n0 >=? n0)), ((n0 >? n1) = (n1 >=? n1)), ((n0 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n0 >=? n1)), ((n0 >? n1) = (n0 >=? n0)), ((n0 >? n0) = (n1 >=? n1))
((n0 >? n0) = (n1 >=? n0)), ((n0 >? n0) = (n0 >=? n1)), ((n0 >? n0) = (n0 >=? n0))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 19.855 seconds


Label: 0 (0)
(n1 < n0), (n1 <= n0), (~ n0 < n1), (~ n0 <= n1), (true = (n0 >? n1)), (false = (n1 >? n0)), (true = (n0 >=? n1)), (false = (n1 >=? n0)), ((n1 >? n1) = (n1 >=? n0)), ((n0 >? n1) = (n1 >=? n1))
((n0 >? n1) = (n0 >=? n0)), ((n0 >? n0) = (n1 >=? n0))


------------------------------ ALL RESULTS ------------------------------
1. ((n0 >? n1) = true -> n0 >= n1)

2. ((n0 >? n1) = true -> n1 < n0)
(n1 < n0 -> n0 >= n1)

3. ((n0 >? n1) = true -> ~ n0 < n1)
(~ n0 < n1 -> n0 >= n1)

4. ((n0 >? n1) = true -> ~ n0 <= n1)
(~ n0 <= n1 -> n0 >= n1)

5. ((n0 >? n1) = true -> false = (n1 >=? n0))
(false = (n1 >=? n0) -> n0 >= n1)

6. ((n0 >? n1) = true -> true = (n0 >=? n1))
(true = (n0 >=? n1) -> n0 >= n1)

7. ((n0 >? n1) = true -> false = (n1 >? n0))
(false = (n1 >? n0) -> n0 >= n1)

8. ((n0 >? n1) = true -> (n0 >? n1) = (n0 >=? n0))
((n0 >? n1) = (n0 >=? n0) -> n0 >= n1)

9. ((n0 >? n1) = true -> (n0 >? n0) = (n1 >=? n0))
((n0 >? n0) = (n1 >=? n0) -> n0 >= n1)

10. ((n0 >? n1) = true -> (n1 >? n1) = (n1 >=? n0))
((n1 >? n1) = (n1 >=? n0) -> n0 >= n1)

11. ((n0 >? n1) = true -> (n0 >? n1) = (n1 >=? n1))
((n0 >? n1) = (n1 >=? n1) -> n0 >= n1)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 39.51 seconds

Number of Result Pairs Returned: 11

1. ((n0 >? n1) = true -> n0 >= n1)

2. ((n0 >? n1) = true -> n1 < n0)
(n1 < n0 -> n0 >= n1)

3. ((n0 >? n1) = true -> ~ n0 < n1)
(~ n0 < n1 -> n0 >= n1)

4. ((n0 >? n1) = true -> ~ n0 <= n1)
(~ n0 <= n1 -> n0 >= n1)

5. ((n0 >? n1) = true -> false = (n1 >=? n0))
(false = (n1 >=? n0) -> n0 >= n1)
