Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (tree_elems t2 br0)
 -- (tree_elems (Node n t1 t2) e1)
 -- (forall e1 e2 : list nat,
 tree_elems t1 e1 -> tree_elems t1 e2 -> Permutation e1 e2)
 -- (tree_elems t1 bl0)
 -- (Permutation e1 (n :: bl ++ br))
 -- (Permutation bl bl0)
 -- (Permutation e2 (n :: bl0 ++ br0))
 -- (Permutation br br0)
 -- (tree_elems (Node n t1 t2) e2)
 -- (forall e1 e2 : list nat,
 tree_elems t2 e1 -> tree_elems t2 e2 -> Permutation e1 e2)

----------------------------------
Goal: (Permutation e1 e2)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.64 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 81.258 seconds

Label: Generalization #0
Assumptions: 
 -- (tree_elems (Node n t1 t2) e1)
 -- (tree_elems (Node n t1 t2) e2)

----------------------------------
Goal: (Permutation e1 e2)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 81.392 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
tree : Set
tree_rect : (forall P : tree -> Type,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 (forall (n : nat) (t : tree),
  P t -> forall t0 : tree, P t0 -> P (Node n t t0)) ->
 P Leaf -> forall t : tree, P t)
smash : (tree -> tree -> tree)
carry : (list tree -> tree -> list tree)
insert : (nat -> list tree -> list tree)
join : (list tree -> list tree -> tree -> list tree)
unzip : (tree -> (list tree -> list tree) -> list tree)
heap_delete_max : (tree -> list tree)
find_max' : (nat -> list tree -> nat)
find_max : (list tree -> option nat)
delete_max_aux : (nat -> list tree -> list tree * list tree)
delete_max : (list tree -> option (nat * list tree))
merge : (list tree -> list tree -> list tree)
pow2heapp : (nat -> nat -> tree -> Prop)
pow2heap : (nat -> tree -> Prop)
priqq : (nat -> list tree -> Prop)
priq : (list tree -> Prop)
tree_elems : (tree -> list nat -> Prop)
priqueue_elems : (list tree -> list nat -> Prop)
Abs : (list tree -> list nat -> Prop)
Node : (nat -> tree -> tree -> tree)
Leaf : tree

Label: 0 (0)
Abducted Assumption: (tree_elems (Node n t1 t2) e1)
Positive Examples: 35
Negative Examples: 31

Label: 1 (1)
Abducted Assumption: (tree_elems (Node n t1 t2) e2)
Positive Examples: 35
Negative Examples: 31


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 81.589 seconds


Label: 0 (0)
(tree_elems t2 e2), (tree_elems t2 e1), (tree_elems t1 e2), (tree_elems t1 e1), (pow2heap n t2), (pow2heap n t1), (pow2heapp n n t2), (pow2heapp n n t1), (Permutation e2 e2), (Permutation e2 e1)
(Permutation e1 e2), (Permutation e1 e1), (In n e2), (In n e1), (n < n), (n <= n), (t2 = t2), (t2 = t1), (t1 = t2), (t1 = t1)
(n = n), (e2 = e2), (e2 = e1), (e1 = e2), (e1 = e1), (false = (n >? n)), (false = (n >=? n)), (true = (n >? n)), (true = (n >=? n)), (Abs (heap_delete_max t2) e2)
(Abs (heap_delete_max t2) e1), (Abs (heap_delete_max t2) (n :: e2)), (Abs (heap_delete_max t2) (n :: e1)), (Abs (heap_delete_max t2) (e2 ++ e2)), (Abs (heap_delete_max t2) (e2 ++ e1)), (Abs (heap_delete_max t2) (e1 ++ e2)), (Abs (heap_delete_max t2) (e1 ++ e1)), (Abs (heap_delete_max t2) []), (Abs (heap_delete_max t1) e2), (Abs (heap_delete_max t1) e1)
(Abs (heap_delete_max t1) (n :: e2)), (Abs (heap_delete_max t1) (n :: e1)), (Abs (heap_delete_max t1) (e2 ++ e2)), (Abs (heap_delete_max t1) (e2 ++ e1)), (Abs (heap_delete_max t1) (e1 ++ e2)), (Abs (heap_delete_max t1) (e1 ++ e1)), (Abs (heap_delete_max t1) []), (Abs [] e2), (Abs [] e1), (Abs [] (n :: e2))
(Abs [] (n :: e1)), (Abs [] (e2 ++ e2)), (Abs [] (e2 ++ e1)), (Abs [] (e1 ++ e2)), (Abs [] (e1 ++ e1)), (Abs [] []), (priqueue_elems (heap_delete_max t2) e2), (priqueue_elems (heap_delete_max t2) e1), (priqueue_elems (heap_delete_max t2) (n :: e2)), (priqueue_elems (heap_delete_max t2) (n :: e1))
(priqueue_elems (heap_delete_max t2) (e2 ++ e2)), (priqueue_elems (heap_delete_max t2) (e2 ++ e1)), (priqueue_elems (heap_delete_max t2) (e1 ++ e2)), (priqueue_elems (heap_delete_max t2) (e1 ++ e1)), (priqueue_elems (heap_delete_max t2) []), (priqueue_elems (heap_delete_max t1) e2), (priqueue_elems (heap_delete_max t1) e1), (priqueue_elems (heap_delete_max t1) (n :: e2)), (priqueue_elems (heap_delete_max t1) (n :: e1)), (priqueue_elems (heap_delete_max t1) (e2 ++ e2))
(priqueue_elems (heap_delete_max t1) (e2 ++ e1)), (priqueue_elems (heap_delete_max t1) (e1 ++ e2)), (priqueue_elems (heap_delete_max t1) (e1 ++ e1)), (priqueue_elems (heap_delete_max t1) []), (priqueue_elems [] e2), (priqueue_elems [] e1), (priqueue_elems [] (n :: e2)), (priqueue_elems [] (n :: e1)), (priqueue_elems [] (e2 ++ e2)), (priqueue_elems [] (e2 ++ e1))
(priqueue_elems [] (e1 ++ e2)), (priqueue_elems [] (e1 ++ e1)), (priqueue_elems [] []), (tree_elems t2 (n :: e2)), (tree_elems t2 (n :: e1)), (tree_elems t2 (e2 ++ e2)), (tree_elems t2 (e2 ++ e1)), (tree_elems t2 (e1 ++ e2)), (tree_elems t2 (e1 ++ e1)), (tree_elems t2 [])
(tree_elems t1 (n :: e2)), (tree_elems t1 (n :: e1)), (tree_elems t1 (e2 ++ e2)), (tree_elems t1 (e2 ++ e1)), (tree_elems t1 (e1 ++ e2)), (tree_elems t1 (e1 ++ e1)), (tree_elems t1 []), (tree_elems (Node n t2 t2) e2), (tree_elems (Node n t2 t2) e1), (tree_elems (Node n t2 t2) (n :: e2))
(tree_elems (Node n t2 t2) (n :: e1)), (tree_elems (Node n t2 t2) (e2 ++ e2)), (tree_elems (Node n t2 t2) (e2 ++ e1)), (tree_elems (Node n t2 t2) (e1 ++ e2)), (tree_elems (Node n t2 t2) (e1 ++ e1)), (tree_elems (Node n t2 t2) []), (tree_elems (Node n t2 t1) e2), (tree_elems (Node n t2 t1) e1), (tree_elems (Node n t2 t1) (n :: e2)), (tree_elems (Node n t2 t1) (n :: e1))
(tree_elems (Node n t2 t1) (e2 ++ e2)), (tree_elems (Node n t2 t1) (e2 ++ e1)), (tree_elems (Node n t2 t1) (e1 ++ e2)), (tree_elems (Node n t2 t1) (e1 ++ e1)), (tree_elems (Node n t2 t1) []), (tree_elems (Node n t1 t2) e2), (tree_elems (Node n t1 t2) e1), (tree_elems (Node n t1 t2) (n :: e2)), (tree_elems (Node n t1 t2) (n :: e1)), (tree_elems (Node n t1 t2) (e2 ++ e2))
(tree_elems (Node n t1 t2) (e2 ++ e1)), (tree_elems (Node n t1 t2) (e1 ++ e2)), (tree_elems (Node n t1 t2) (e1 ++ e1)), (tree_elems (Node n t1 t2) []), (tree_elems (Node n t1 t1) e2), (tree_elems (Node n t1 t1) e1), (tree_elems (Node n t1 t1) (n :: e2)), (tree_elems (Node n t1 t1) (n :: e1)), (tree_elems (Node n t1 t1) (e2 ++ e2)), (tree_elems (Node n t1 t1) (e2 ++ e1))
(tree_elems (Node n t1 t1) (e1 ++ e2)), (tree_elems (Node n t1 t1) (e1 ++ e1)), (tree_elems (Node n t1 t1) []), (tree_elems (smash t2 t2) e2), (tree_elems (smash t2 t2) e1), (tree_elems (smash t2 t2) (n :: e2)), (tree_elems (smash t2 t2) (n :: e1)), (tree_elems (smash t2 t2) (e2 ++ e2)), (tree_elems (smash t2 t2) (e2 ++ e1)), (tree_elems (smash t2 t2) (e1 ++ e2))
(tree_elems (smash t2 t2) (e1 ++ e1)), (tree_elems (smash t2 t2) []), (tree_elems (smash t2 t1) e2), (tree_elems (smash t2 t1) e1), (tree_elems (smash t2 t1) (n :: e2)), (tree_elems (smash t2 t1) (n :: e1)), (tree_elems (smash t2 t1) (e2 ++ e2)), (tree_elems (smash t2 t1) (e2 ++ e1)), (tree_elems (smash t2 t1) (e1 ++ e2)), (tree_elems (smash t2 t1) (e1 ++ e1))
(tree_elems (smash t2 t1) []), (tree_elems (smash t1 t2) e2), (tree_elems (smash t1 t2) e1), (tree_elems (smash t1 t2) (n :: e2)), (tree_elems (smash t1 t2) (n :: e1)), (tree_elems (smash t1 t2) (e2 ++ e2)), (tree_elems (smash t1 t2) (e2 ++ e1)), (tree_elems (smash t1 t2) (e1 ++ e2)), (tree_elems (smash t1 t2) (e1 ++ e1)), (tree_elems (smash t1 t2) [])
(tree_elems (smash t1 t1) e2), (tree_elems (smash t1 t1) e1), (tree_elems (smash t1 t1) (n :: e2)), (tree_elems (smash t1 t1) (n :: e1)), (tree_elems (smash t1 t1) (e2 ++ e2)), (tree_elems (smash t1 t1) (e2 ++ e1)), (tree_elems (smash t1 t1) (e1 ++ e2)), (tree_elems (smash t1 t1) (e1 ++ e1)), (tree_elems (smash t1 t1) []), (tree_elems Leaf e2)
(tree_elems Leaf e1), (tree_elems Leaf (n :: e2)), (tree_elems Leaf (n :: e1)), (tree_elems Leaf (e2 ++ e2)), (tree_elems Leaf (e2 ++ e1)), (tree_elems Leaf (e1 ++ e2)), (tree_elems Leaf (e1 ++ e1)), (tree_elems Leaf []), (priq (heap_delete_max t2)), (priq (heap_delete_max t1))
(priqq n (heap_delete_max t2)), (priqq n (heap_delete_max t1)), (priqq (length e2) (heap_delete_max t2)), (priqq (length e2) (heap_delete_max t1)), (priqq (length e1) (heap_delete_max t2)), (priqq (length e1) (heap_delete_max t1)), (pow2heap n (Node n t2 t2)), (pow2heap n (Node n t2 t1)), (pow2heap n (Node n t1 t2)), (pow2heap n (Node n t1 t1))
(pow2heap n (smash t2 t2)), (pow2heap n (smash t2 t1)), (pow2heap n (smash t1 t2)), (pow2heap n (smash t1 t1)), (pow2heap (length e2) t2), (pow2heap (length e2) t1), (pow2heap (length e2) (Node n t2 t2)), (pow2heap (length e2) (Node n t2 t1)), (pow2heap (length e2) (Node n t1 t2)), (pow2heap (length e2) (Node n t1 t1))
(pow2heap (length e2) (smash t2 t2)), (pow2heap (length e2) (smash t2 t1)), (pow2heap (length e2) (smash t1 t2)), (pow2heap (length e2) (smash t1 t1)), (pow2heap (length e1) t2), (pow2heap (length e1) t1), (pow2heap (length e1) (Node n t2 t2)), (pow2heap (length e1) (Node n t2 t1)), (pow2heap (length e1) (Node n t1 t2)), (pow2heap (length e1) (Node n t1 t1))
(pow2heap (length e1) (smash t2 t2)), (pow2heap (length e1) (smash t2 t1)), (pow2heap (length e1) (smash t1 t2)), (pow2heap (length e1) (smash t1 t1)), (pow2heapp n n (Node n t2 t2)), (pow2heapp n n (Node n t2 t1)), (pow2heapp n n (Node n t1 t2)), (pow2heapp n n (Node n t1 t1)), (pow2heapp n n (smash t2 t2)), (pow2heapp n n (smash t2 t1))
(pow2heapp n n (smash t1 t2)), (pow2heapp n n (smash t1 t1)), (pow2heapp n n Leaf), (pow2heapp n (length e2) t2), (pow2heapp n (length e2) t1), (pow2heapp n (length e2) (Node n t2 t2)), (pow2heapp n (length e2) (Node n t2 t1)), (pow2heapp n (length e2) (Node n t1 t2)), (pow2heapp n (length e2) (Node n t1 t1)), (pow2heapp n (length e2) (smash t2 t2))
(pow2heapp n (length e2) (smash t2 t1)), (pow2heapp n (length e2) (smash t1 t2)), (pow2heapp n (length e2) (smash t1 t1)), (pow2heapp n (length e2) Leaf), (pow2heapp n (length e1) t2), (pow2heapp n (length e1) t1), (pow2heapp n (length e1) (Node n t2 t2)), (pow2heapp n (length e1) (Node n t2 t1)), (pow2heapp n (length e1) (Node n t1 t2)), (pow2heapp n (length e1) (Node n t1 t1))
(pow2heapp n (length e1) (smash t2 t2)), (pow2heapp n (length e1) (smash t2 t1)), (pow2heapp n (length e1) (smash t1 t2)), (pow2heapp n (length e1) (smash t1 t1)), (pow2heapp n (length e1) Leaf), (pow2heapp (length e2) n t2), (pow2heapp (length e2) n t1), (pow2heapp (length e2) n (Node n t2 t2)), (pow2heapp (length e2) n (Node n t2 t1)), (pow2heapp (length e2) n (Node n t1 t2))
(pow2heapp (length e2) n (Node n t1 t1)), (pow2heapp (length e2) n (smash t2 t2)), (pow2heapp (length e2) n (smash t2 t1)), (pow2heapp (length e2) n (smash t1 t2)), (pow2heapp (length e2) n (smash t1 t1)), (pow2heapp (length e2) n Leaf), (pow2heapp (length e2) (length e2) t2), (pow2heapp (length e2) (length e2) t1), (pow2heapp (length e2) (length e2) (Node n t2 t2)), (pow2heapp (length e2) (length e2) (Node n t2 t1))
(pow2heapp (length e2) (length e2) (Node n t1 t2)), (pow2heapp (length e2) (length e2) (Node n t1 t1)), (pow2heapp (length e2) (length e2) (smash t2 t2)), (pow2heapp (length e2) (length e2) (smash t2 t1)), (pow2heapp (length e2) (length e2) (smash t1 t2)), (pow2heapp (length e2) (length e2) (smash t1 t1)), (pow2heapp (length e2) (length e2) Leaf), (pow2heapp (length e2) (length e1) t2), (pow2heapp (length e2) (length e1) t1), (pow2heapp (length e2) (length e1) (Node n t2 t2))
(pow2heapp (length e2) (length e1) (Node n t2 t1)), (pow2heapp (length e2) (length e1) (Node n t1 t2)), (pow2heapp (length e2) (length e1) (Node n t1 t1)), (pow2heapp (length e2) (length e1) (smash t2 t2)), (pow2heapp (length e2) (length e1) (smash t2 t1)), (pow2heapp (length e2) (length e1) (smash t1 t2)), (pow2heapp (length e2) (length e1) (smash t1 t1)), (pow2heapp (length e2) (length e1) Leaf), (pow2heapp (length e1) n t2), (pow2heapp (length e1) n t1)
(pow2heapp (length e1) n (Node n t2 t2)), (pow2heapp (length e1) n (Node n t2 t1)), (pow2heapp (length e1) n (Node n t1 t2)), (pow2heapp (length e1) n (Node n t1 t1)), (pow2heapp (length e1) n (smash t2 t2)), (pow2heapp (length e1) n (smash t2 t1)), (pow2heapp (length e1) n (smash t1 t2)), (pow2heapp (length e1) n (smash t1 t1)), (pow2heapp (length e1) n Leaf), (pow2heapp (length e1) (length e2) t2)
(pow2heapp (length e1) (length e2) t1), (pow2heapp (length e1) (length e2) (Node n t2 t2)), (pow2heapp (length e1) (length e2) (Node n t2 t1)), (pow2heapp (length e1) (length e2) (Node n t1 t2)), (pow2heapp (length e1) (length e2) (Node n t1 t1)), (pow2heapp (length e1) (length e2) (smash t2 t2)), (pow2heapp (length e1) (length e2) (smash t2 t1)), (pow2heapp (length e1) (length e2) (smash t1 t2)), (pow2heapp (length e1) (length e2) (smash t1 t1)), (pow2heapp (length e1) (length e2) Leaf)
(pow2heapp (length e1) (length e1) t2), (pow2heapp (length e1) (length e1) t1), (pow2heapp (length e1) (length e1) (Node n t2 t2)), (pow2heapp (length e1) (length e1) (Node n t2 t1)), (pow2heapp (length e1) (length e1) (Node n t1 t2)), (pow2heapp (length e1) (length e1) (Node n t1 t1)), (pow2heapp (length e1) (length e1) (smash t2 t2)), (pow2heapp (length e1) (length e1) (smash t2 t1)), (pow2heapp (length e1) (length e1) (smash t1 t2)), (pow2heapp (length e1) (length e1) (smash t1 t1))
(pow2heapp (length e1) (length e1) Leaf), (Permutation (heap_delete_max t2) (heap_delete_max t1)), (Permutation (heap_delete_max t2) []), (Permutation (heap_delete_max t1) (heap_delete_max t2)), (Permutation (heap_delete_max t1) []), (Permutation [] (heap_delete_max t2)), (Permutation [] (heap_delete_max t1)), (Permutation e2 (n :: e2)), (Permutation e2 (n :: e1)), (Permutation e2 (e2 ++ e2))
(Permutation e2 (e2 ++ e1)), (Permutation e2 (e1 ++ e2)), (Permutation e2 (e1 ++ e1)), (Permutation e2 []), (Permutation e1 (n :: e2)), (Permutation e1 (n :: e1)), (Permutation e1 (e2 ++ e2)), (Permutation e1 (e2 ++ e1)), (Permutation e1 (e1 ++ e2)), (Permutation e1 (e1 ++ e1))
(Permutation e1 []), (Permutation (n :: e2) e2), (Permutation (n :: e2) e1), (Permutation (n :: e2) (n :: e1)), (Permutation (n :: e2) (e2 ++ e2)), (Permutation (n :: e2) (e2 ++ e1)), (Permutation (n :: e2) (e1 ++ e2)), (Permutation (n :: e2) (e1 ++ e1)), (Permutation (n :: e2) []), (Permutation (n :: e1) e2)
(Permutation (n :: e1) e1), (Permutation (n :: e1) (n :: e2)), (Permutation (n :: e1) (e2 ++ e2)), (Permutation (n :: e1) (e2 ++ e1)), (Permutation (n :: e1) (e1 ++ e2)), (Permutation (n :: e1) (e1 ++ e1)), (Permutation (n :: e1) []), (Permutation (e2 ++ e2) e2), (Permutation (e2 ++ e2) e1), (Permutation (e2 ++ e2) (n :: e2))
(Permutation (e2 ++ e2) (n :: e1)), (Permutation (e2 ++ e2) (e2 ++ e1)), (Permutation (e2 ++ e2) (e1 ++ e2)), (Permutation (e2 ++ e2) (e1 ++ e1)), (Permutation (e2 ++ e2) []), (Permutation (e2 ++ e1) e2), (Permutation (e2 ++ e1) e1), (Permutation (e2 ++ e1) (n :: e2)), (Permutation (e2 ++ e1) (n :: e1)), (Permutation (e2 ++ e1) (e2 ++ e2))
(Permutation (e2 ++ e1) (e1 ++ e2)), (Permutation (e2 ++ e1) (e1 ++ e1)), (Permutation (e2 ++ e1) []), (Permutation (e1 ++ e2) e2), (Permutation (e1 ++ e2) e1), (Permutation (e1 ++ e2) (n :: e2)), (Permutation (e1 ++ e2) (n :: e1)), (Permutation (e1 ++ e2) (e2 ++ e2)), (Permutation (e1 ++ e2) (e2 ++ e1)), (Permutation (e1 ++ e2) (e1 ++ e1))
(Permutation (e1 ++ e2) []), (Permutation (e1 ++ e1) e2), (Permutation (e1 ++ e1) e1), (Permutation (e1 ++ e1) (n :: e2)), (Permutation (e1 ++ e1) (n :: e1)), (Permutation (e1 ++ e1) (e2 ++ e2)), (Permutation (e1 ++ e1) (e2 ++ e1)), (Permutation (e1 ++ e1) (e1 ++ e2)), (Permutation (e1 ++ e1) []), (Permutation [] e2)
(Permutation [] e1), (Permutation [] (n :: e2)), (Permutation [] (n :: e1)), (Permutation [] (e2 ++ e2)), (Permutation [] (e2 ++ e1)), (Permutation [] (e1 ++ e2)), (Permutation [] (e1 ++ e1)), (In t2 (heap_delete_max t2)), (In t2 (heap_delete_max t1)), (In t1 (heap_delete_max t2))
(In t1 (heap_delete_max t1)), (In (Node n t2 t2) (heap_delete_max t2)), (In (Node n t2 t2) (heap_delete_max t1)), (In (Node n t2 t1) (heap_delete_max t2)), (In (Node n t2 t1) (heap_delete_max t1)), (In (Node n t1 t2) (heap_delete_max t2)), (In (Node n t1 t2) (heap_delete_max t1)), (In (Node n t1 t1) (heap_delete_max t2)), (In (Node n t1 t1) (heap_delete_max t1)), (In (smash t2 t2) (heap_delete_max t2))
(In (smash t2 t2) (heap_delete_max t1)), (In (smash t2 t1) (heap_delete_max t2)), (In (smash t2 t1) (heap_delete_max t1)), (In (smash t1 t2) (heap_delete_max t2)), (In (smash t1 t2) (heap_delete_max t1)), (In (smash t1 t1) (heap_delete_max t2)), (In (smash t1 t1) (heap_delete_max t1)), (In Leaf (heap_delete_max t2)), (In Leaf (heap_delete_max t1)), (In n (n :: e2))
(In n (n :: e1)), (In n (e2 ++ e2)), (In n (e2 ++ e1)), (In n (e1 ++ e2)), (In n (e1 ++ e1)), (In (length e2) e2), (In (length e2) e1), (In (length e2) (n :: e2)), (In (length e2) (n :: e1)), (In (length e2) (e2 ++ e2))
(In (length e2) (e2 ++ e1)), (In (length e2) (e1 ++ e2)), (In (length e2) (e1 ++ e1)), (In (length e1) e2), (In (length e1) e1), (In (length e1) (n :: e2)), (In (length e1) (n :: e1)), (In (length e1) (e2 ++ e2)), (In (length e1) (e2 ++ e1)), (In (length e1) (e1 ++ e2))
(In (length e1) (e1 ++ e1)), (n < length e2), (n < length e1), (length e2 < n), (length e2 < length e1), (length e1 < n), (length e1 < length e2), (n <= length e2), (n <= length e1), (length e2 <= n)
(length e2 <= length e1), (length e1 <= n), (length e1 <= length e2), (~ tree_elems t2 e2), (~ tree_elems t2 e1), (~ tree_elems t1 e2), (~ tree_elems t1 e1), (~ pow2heap n t2), (~ pow2heap n t1), (~ pow2heapp n n t2)
(~ pow2heapp n n t1), (~ Permutation e2 e2), (~ Permutation e2 e1), (~ Permutation e1 e2), (~ Permutation e1 e1), (~ In n e2), (~ In n e1), (~ n < n), (~ n <= n), (t2 <> t2)
(t2 <> t1), (t1 <> t2), (t1 <> t1), (n <> n), (e2 <> e2), (e2 <> e1), (e1 <> e2), (e1 <> e1), (None = Some e2), (None = Some e1)
([] = heap_delete_max t2), ([] = heap_delete_max t1), (Node n t2 t2 = t2), (Node n t2 t2 = t1), (Node n t2 t2 = smash t2 t2), (Node n t2 t2 = smash t2 t1), (Node n t2 t2 = smash t1 t2), (Node n t2 t2 = smash t1 t1), (Node n t2 t1 = t2), (Node n t2 t1 = t1)
(Node n t2 t1 = smash t2 t2), (Node n t2 t1 = smash t2 t1), (Node n t2 t1 = smash t1 t2), (Node n t2 t1 = smash t1 t1), (Node n t1 t2 = t2), (Node n t1 t2 = t1), (Node n t1 t2 = smash t2 t2), (Node n t1 t2 = smash t2 t1), (Node n t1 t2 = smash t1 t2), (Node n t1 t2 = smash t1 t1)
(Node n t1 t1 = t2), (Node n t1 t1 = t1), (Node n t1 t1 = smash t2 t2), (Node n t1 t1 = smash t2 t1), (Node n t1 t1 = smash t1 t2), (Node n t1 t1 = smash t1 t1), (smash t2 t2 = t2), (smash t2 t2 = t1), (smash t2 t1 = t2), (smash t2 t1 = t1)
(smash t1 t2 = t2), (smash t1 t2 = t1), (smash t1 t1 = t2), (smash t1 t1 = t1), (Leaf = Node n t2 t2), (Leaf = Node n t2 t1), (Leaf = Node n t1 t2), (Leaf = Node n t1 t1), (Leaf = smash t2 t2), (Leaf = smash t2 t1)
(Leaf = smash t1 t2), (Leaf = smash t1 t1), (length e2 = n), (length e1 = n), (n :: e2 = e2), (n :: e2 = e1), (n :: e2 = e2 ++ e2), (n :: e2 = e2 ++ e1), (n :: e2 = e1 ++ e2), (n :: e2 = e1 ++ e1)
(n :: e2 = []), (n :: e1 = e2), (n :: e1 = e1), (n :: e1 = e2 ++ e2), (n :: e1 = e2 ++ e1), (n :: e1 = e1 ++ e2), (n :: e1 = e1 ++ e1), (n :: e1 = []), (e2 ++ e2 = e2), (e2 ++ e2 = e1)
(e2 ++ e1 = e2), (e2 ++ e1 = e1), (e1 ++ e2 = e2), (e1 ++ e2 = e1), (e1 ++ e1 = e2), (e1 ++ e1 = e1), ([] = e2), ([] = e1), ([] = e2 ++ e2), ([] = e2 ++ e1)
([] = e1 ++ e2), ([] = e1 ++ e1), (None = Some n), (None = Some t2), (None = Some t1), ((n >? n) = (n >=? n))

Label: 1 (1)
(tree_elems t2 e2), (tree_elems t2 e1), (tree_elems t1 e2), (tree_elems t1 e1), (pow2heap n t2), (pow2heap n t1), (pow2heapp n n t2), (pow2heapp n n t1), (Permutation e2 e2), (Permutation e2 e1)
(Permutation e1 e2), (Permutation e1 e1), (In n e2), (In n e1), (n < n), (n <= n), (t2 = t2), (t2 = t1), (t1 = t2), (t1 = t1)
(n = n), (e2 = e2), (e2 = e1), (e1 = e2), (e1 = e1), (false = (n >? n)), (false = (n >=? n)), (true = (n >? n)), (true = (n >=? n)), (Abs (heap_delete_max t2) e2)
(Abs (heap_delete_max t2) e1), (Abs (heap_delete_max t2) (n :: e2)), (Abs (heap_delete_max t2) (n :: e1)), (Abs (heap_delete_max t2) (e2 ++ e2)), (Abs (heap_delete_max t2) (e2 ++ e1)), (Abs (heap_delete_max t2) (e1 ++ e2)), (Abs (heap_delete_max t2) (e1 ++ e1)), (Abs (heap_delete_max t2) []), (Abs (heap_delete_max t1) e2), (Abs (heap_delete_max t1) e1)
(Abs (heap_delete_max t1) (n :: e2)), (Abs (heap_delete_max t1) (n :: e1)), (Abs (heap_delete_max t1) (e2 ++ e2)), (Abs (heap_delete_max t1) (e2 ++ e1)), (Abs (heap_delete_max t1) (e1 ++ e2)), (Abs (heap_delete_max t1) (e1 ++ e1)), (Abs (heap_delete_max t1) []), (Abs [] e2), (Abs [] e1), (Abs [] (n :: e2))
(Abs [] (n :: e1)), (Abs [] (e2 ++ e2)), (Abs [] (e2 ++ e1)), (Abs [] (e1 ++ e2)), (Abs [] (e1 ++ e1)), (Abs [] []), (priqueue_elems (heap_delete_max t2) e2), (priqueue_elems (heap_delete_max t2) e1), (priqueue_elems (heap_delete_max t2) (n :: e2)), (priqueue_elems (heap_delete_max t2) (n :: e1))
(priqueue_elems (heap_delete_max t2) (e2 ++ e2)), (priqueue_elems (heap_delete_max t2) (e2 ++ e1)), (priqueue_elems (heap_delete_max t2) (e1 ++ e2)), (priqueue_elems (heap_delete_max t2) (e1 ++ e1)), (priqueue_elems (heap_delete_max t2) []), (priqueue_elems (heap_delete_max t1) e2), (priqueue_elems (heap_delete_max t1) e1), (priqueue_elems (heap_delete_max t1) (n :: e2)), (priqueue_elems (heap_delete_max t1) (n :: e1)), (priqueue_elems (heap_delete_max t1) (e2 ++ e2))
(priqueue_elems (heap_delete_max t1) (e2 ++ e1)), (priqueue_elems (heap_delete_max t1) (e1 ++ e2)), (priqueue_elems (heap_delete_max t1) (e1 ++ e1)), (priqueue_elems (heap_delete_max t1) []), (priqueue_elems [] e2), (priqueue_elems [] e1), (priqueue_elems [] (n :: e2)), (priqueue_elems [] (n :: e1)), (priqueue_elems [] (e2 ++ e2)), (priqueue_elems [] (e2 ++ e1))
(priqueue_elems [] (e1 ++ e2)), (priqueue_elems [] (e1 ++ e1)), (priqueue_elems [] []), (tree_elems t2 (n :: e2)), (tree_elems t2 (n :: e1)), (tree_elems t2 (e2 ++ e2)), (tree_elems t2 (e2 ++ e1)), (tree_elems t2 (e1 ++ e2)), (tree_elems t2 (e1 ++ e1)), (tree_elems t2 [])
(tree_elems t1 (n :: e2)), (tree_elems t1 (n :: e1)), (tree_elems t1 (e2 ++ e2)), (tree_elems t1 (e2 ++ e1)), (tree_elems t1 (e1 ++ e2)), (tree_elems t1 (e1 ++ e1)), (tree_elems t1 []), (tree_elems (Node n t2 t2) e2), (tree_elems (Node n t2 t2) e1), (tree_elems (Node n t2 t2) (n :: e2))
(tree_elems (Node n t2 t2) (n :: e1)), (tree_elems (Node n t2 t2) (e2 ++ e2)), (tree_elems (Node n t2 t2) (e2 ++ e1)), (tree_elems (Node n t2 t2) (e1 ++ e2)), (tree_elems (Node n t2 t2) (e1 ++ e1)), (tree_elems (Node n t2 t2) []), (tree_elems (Node n t2 t1) e2), (tree_elems (Node n t2 t1) e1), (tree_elems (Node n t2 t1) (n :: e2)), (tree_elems (Node n t2 t1) (n :: e1))
(tree_elems (Node n t2 t1) (e2 ++ e2)), (tree_elems (Node n t2 t1) (e2 ++ e1)), (tree_elems (Node n t2 t1) (e1 ++ e2)), (tree_elems (Node n t2 t1) (e1 ++ e1)), (tree_elems (Node n t2 t1) []), (tree_elems (Node n t1 t2) e2), (tree_elems (Node n t1 t2) e1), (tree_elems (Node n t1 t2) (n :: e2)), (tree_elems (Node n t1 t2) (n :: e1)), (tree_elems (Node n t1 t2) (e2 ++ e2))
(tree_elems (Node n t1 t2) (e2 ++ e1)), (tree_elems (Node n t1 t2) (e1 ++ e2)), (tree_elems (Node n t1 t2) (e1 ++ e1)), (tree_elems (Node n t1 t2) []), (tree_elems (Node n t1 t1) e2), (tree_elems (Node n t1 t1) e1), (tree_elems (Node n t1 t1) (n :: e2)), (tree_elems (Node n t1 t1) (n :: e1)), (tree_elems (Node n t1 t1) (e2 ++ e2)), (tree_elems (Node n t1 t1) (e2 ++ e1))
(tree_elems (Node n t1 t1) (e1 ++ e2)), (tree_elems (Node n t1 t1) (e1 ++ e1)), (tree_elems (Node n t1 t1) []), (tree_elems (smash t2 t2) e2), (tree_elems (smash t2 t2) e1), (tree_elems (smash t2 t2) (n :: e2)), (tree_elems (smash t2 t2) (n :: e1)), (tree_elems (smash t2 t2) (e2 ++ e2)), (tree_elems (smash t2 t2) (e2 ++ e1)), (tree_elems (smash t2 t2) (e1 ++ e2))
(tree_elems (smash t2 t2) (e1 ++ e1)), (tree_elems (smash t2 t2) []), (tree_elems (smash t2 t1) e2), (tree_elems (smash t2 t1) e1), (tree_elems (smash t2 t1) (n :: e2)), (tree_elems (smash t2 t1) (n :: e1)), (tree_elems (smash t2 t1) (e2 ++ e2)), (tree_elems (smash t2 t1) (e2 ++ e1)), (tree_elems (smash t2 t1) (e1 ++ e2)), (tree_elems (smash t2 t1) (e1 ++ e1))
(tree_elems (smash t2 t1) []), (tree_elems (smash t1 t2) e2), (tree_elems (smash t1 t2) e1), (tree_elems (smash t1 t2) (n :: e2)), (tree_elems (smash t1 t2) (n :: e1)), (tree_elems (smash t1 t2) (e2 ++ e2)), (tree_elems (smash t1 t2) (e2 ++ e1)), (tree_elems (smash t1 t2) (e1 ++ e2)), (tree_elems (smash t1 t2) (e1 ++ e1)), (tree_elems (smash t1 t2) [])
(tree_elems (smash t1 t1) e2), (tree_elems (smash t1 t1) e1), (tree_elems (smash t1 t1) (n :: e2)), (tree_elems (smash t1 t1) (n :: e1)), (tree_elems (smash t1 t1) (e2 ++ e2)), (tree_elems (smash t1 t1) (e2 ++ e1)), (tree_elems (smash t1 t1) (e1 ++ e2)), (tree_elems (smash t1 t1) (e1 ++ e1)), (tree_elems (smash t1 t1) []), (tree_elems Leaf e2)
(tree_elems Leaf e1), (tree_elems Leaf (n :: e2)), (tree_elems Leaf (n :: e1)), (tree_elems Leaf (e2 ++ e2)), (tree_elems Leaf (e2 ++ e1)), (tree_elems Leaf (e1 ++ e2)), (tree_elems Leaf (e1 ++ e1)), (tree_elems Leaf []), (priq (heap_delete_max t2)), (priq (heap_delete_max t1))
(priqq n (heap_delete_max t2)), (priqq n (heap_delete_max t1)), (priqq (length e2) (heap_delete_max t2)), (priqq (length e2) (heap_delete_max t1)), (priqq (length e1) (heap_delete_max t2)), (priqq (length e1) (heap_delete_max t1)), (pow2heap n (Node n t2 t2)), (pow2heap n (Node n t2 t1)), (pow2heap n (Node n t1 t2)), (pow2heap n (Node n t1 t1))
(pow2heap n (smash t2 t2)), (pow2heap n (smash t2 t1)), (pow2heap n (smash t1 t2)), (pow2heap n (smash t1 t1)), (pow2heap (length e2) t2), (pow2heap (length e2) t1), (pow2heap (length e2) (Node n t2 t2)), (pow2heap (length e2) (Node n t2 t1)), (pow2heap (length e2) (Node n t1 t2)), (pow2heap (length e2) (Node n t1 t1))
(pow2heap (length e2) (smash t2 t2)), (pow2heap (length e2) (smash t2 t1)), (pow2heap (length e2) (smash t1 t2)), (pow2heap (length e2) (smash t1 t1)), (pow2heap (length e1) t2), (pow2heap (length e1) t1), (pow2heap (length e1) (Node n t2 t2)), (pow2heap (length e1) (Node n t2 t1)), (pow2heap (length e1) (Node n t1 t2)), (pow2heap (length e1) (Node n t1 t1))
(pow2heap (length e1) (smash t2 t2)), (pow2heap (length e1) (smash t2 t1)), (pow2heap (length e1) (smash t1 t2)), (pow2heap (length e1) (smash t1 t1)), (pow2heapp n n (Node n t2 t2)), (pow2heapp n n (Node n t2 t1)), (pow2heapp n n (Node n t1 t2)), (pow2heapp n n (Node n t1 t1)), (pow2heapp n n (smash t2 t2)), (pow2heapp n n (smash t2 t1))
(pow2heapp n n (smash t1 t2)), (pow2heapp n n (smash t1 t1)), (pow2heapp n n Leaf), (pow2heapp n (length e2) t2), (pow2heapp n (length e2) t1), (pow2heapp n (length e2) (Node n t2 t2)), (pow2heapp n (length e2) (Node n t2 t1)), (pow2heapp n (length e2) (Node n t1 t2)), (pow2heapp n (length e2) (Node n t1 t1)), (pow2heapp n (length e2) (smash t2 t2))
(pow2heapp n (length e2) (smash t2 t1)), (pow2heapp n (length e2) (smash t1 t2)), (pow2heapp n (length e2) (smash t1 t1)), (pow2heapp n (length e2) Leaf), (pow2heapp n (length e1) t2), (pow2heapp n (length e1) t1), (pow2heapp n (length e1) (Node n t2 t2)), (pow2heapp n (length e1) (Node n t2 t1)), (pow2heapp n (length e1) (Node n t1 t2)), (pow2heapp n (length e1) (Node n t1 t1))
(pow2heapp n (length e1) (smash t2 t2)), (pow2heapp n (length e1) (smash t2 t1)), (pow2heapp n (length e1) (smash t1 t2)), (pow2heapp n (length e1) (smash t1 t1)), (pow2heapp n (length e1) Leaf), (pow2heapp (length e2) n t2), (pow2heapp (length e2) n t1), (pow2heapp (length e2) n (Node n t2 t2)), (pow2heapp (length e2) n (Node n t2 t1)), (pow2heapp (length e2) n (Node n t1 t2))
(pow2heapp (length e2) n (Node n t1 t1)), (pow2heapp (length e2) n (smash t2 t2)), (pow2heapp (length e2) n (smash t2 t1)), (pow2heapp (length e2) n (smash t1 t2)), (pow2heapp (length e2) n (smash t1 t1)), (pow2heapp (length e2) n Leaf), (pow2heapp (length e2) (length e2) t2), (pow2heapp (length e2) (length e2) t1), (pow2heapp (length e2) (length e2) (Node n t2 t2)), (pow2heapp (length e2) (length e2) (Node n t2 t1))
(pow2heapp (length e2) (length e2) (Node n t1 t2)), (pow2heapp (length e2) (length e2) (Node n t1 t1)), (pow2heapp (length e2) (length e2) (smash t2 t2)), (pow2heapp (length e2) (length e2) (smash t2 t1)), (pow2heapp (length e2) (length e2) (smash t1 t2)), (pow2heapp (length e2) (length e2) (smash t1 t1)), (pow2heapp (length e2) (length e2) Leaf), (pow2heapp (length e2) (length e1) t2), (pow2heapp (length e2) (length e1) t1), (pow2heapp (length e2) (length e1) (Node n t2 t2))
(pow2heapp (length e2) (length e1) (Node n t2 t1)), (pow2heapp (length e2) (length e1) (Node n t1 t2)), (pow2heapp (length e2) (length e1) (Node n t1 t1)), (pow2heapp (length e2) (length e1) (smash t2 t2)), (pow2heapp (length e2) (length e1) (smash t2 t1)), (pow2heapp (length e2) (length e1) (smash t1 t2)), (pow2heapp (length e2) (length e1) (smash t1 t1)), (pow2heapp (length e2) (length e1) Leaf), (pow2heapp (length e1) n t2), (pow2heapp (length e1) n t1)
(pow2heapp (length e1) n (Node n t2 t2)), (pow2heapp (length e1) n (Node n t2 t1)), (pow2heapp (length e1) n (Node n t1 t2)), (pow2heapp (length e1) n (Node n t1 t1)), (pow2heapp (length e1) n (smash t2 t2)), (pow2heapp (length e1) n (smash t2 t1)), (pow2heapp (length e1) n (smash t1 t2)), (pow2heapp (length e1) n (smash t1 t1)), (pow2heapp (length e1) n Leaf), (pow2heapp (length e1) (length e2) t2)
(pow2heapp (length e1) (length e2) t1), (pow2heapp (length e1) (length e2) (Node n t2 t2)), (pow2heapp (length e1) (length e2) (Node n t2 t1)), (pow2heapp (length e1) (length e2) (Node n t1 t2)), (pow2heapp (length e1) (length e2) (Node n t1 t1)), (pow2heapp (length e1) (length e2) (smash t2 t2)), (pow2heapp (length e1) (length e2) (smash t2 t1)), (pow2heapp (length e1) (length e2) (smash t1 t2)), (pow2heapp (length e1) (length e2) (smash t1 t1)), (pow2heapp (length e1) (length e2) Leaf)
(pow2heapp (length e1) (length e1) t2), (pow2heapp (length e1) (length e1) t1), (pow2heapp (length e1) (length e1) (Node n t2 t2)), (pow2heapp (length e1) (length e1) (Node n t2 t1)), (pow2heapp (length e1) (length e1) (Node n t1 t2)), (pow2heapp (length e1) (length e1) (Node n t1 t1)), (pow2heapp (length e1) (length e1) (smash t2 t2)), (pow2heapp (length e1) (length e1) (smash t2 t1)), (pow2heapp (length e1) (length e1) (smash t1 t2)), (pow2heapp (length e1) (length e1) (smash t1 t1))
(pow2heapp (length e1) (length e1) Leaf), (Permutation (heap_delete_max t2) (heap_delete_max t1)), (Permutation (heap_delete_max t2) []), (Permutation (heap_delete_max t1) (heap_delete_max t2)), (Permutation (heap_delete_max t1) []), (Permutation [] (heap_delete_max t2)), (Permutation [] (heap_delete_max t1)), (Permutation e2 (n :: e2)), (Permutation e2 (n :: e1)), (Permutation e2 (e2 ++ e2))
(Permutation e2 (e2 ++ e1)), (Permutation e2 (e1 ++ e2)), (Permutation e2 (e1 ++ e1)), (Permutation e2 []), (Permutation e1 (n :: e2)), (Permutation e1 (n :: e1)), (Permutation e1 (e2 ++ e2)), (Permutation e1 (e2 ++ e1)), (Permutation e1 (e1 ++ e2)), (Permutation e1 (e1 ++ e1))
(Permutation e1 []), (Permutation (n :: e2) e2), (Permutation (n :: e2) e1), (Permutation (n :: e2) (n :: e1)), (Permutation (n :: e2) (e2 ++ e2)), (Permutation (n :: e2) (e2 ++ e1)), (Permutation (n :: e2) (e1 ++ e2)), (Permutation (n :: e2) (e1 ++ e1)), (Permutation (n :: e2) []), (Permutation (n :: e1) e2)
(Permutation (n :: e1) e1), (Permutation (n :: e1) (n :: e2)), (Permutation (n :: e1) (e2 ++ e2)), (Permutation (n :: e1) (e2 ++ e1)), (Permutation (n :: e1) (e1 ++ e2)), (Permutation (n :: e1) (e1 ++ e1)), (Permutation (n :: e1) []), (Permutation (e2 ++ e2) e2), (Permutation (e2 ++ e2) e1), (Permutation (e2 ++ e2) (n :: e2))
(Permutation (e2 ++ e2) (n :: e1)), (Permutation (e2 ++ e2) (e2 ++ e1)), (Permutation (e2 ++ e2) (e1 ++ e2)), (Permutation (e2 ++ e2) (e1 ++ e1)), (Permutation (e2 ++ e2) []), (Permutation (e2 ++ e1) e2), (Permutation (e2 ++ e1) e1), (Permutation (e2 ++ e1) (n :: e2)), (Permutation (e2 ++ e1) (n :: e1)), (Permutation (e2 ++ e1) (e2 ++ e2))
(Permutation (e2 ++ e1) (e1 ++ e2)), (Permutation (e2 ++ e1) (e1 ++ e1)), (Permutation (e2 ++ e1) []), (Permutation (e1 ++ e2) e2), (Permutation (e1 ++ e2) e1), (Permutation (e1 ++ e2) (n :: e2)), (Permutation (e1 ++ e2) (n :: e1)), (Permutation (e1 ++ e2) (e2 ++ e2)), (Permutation (e1 ++ e2) (e2 ++ e1)), (Permutation (e1 ++ e2) (e1 ++ e1))
(Permutation (e1 ++ e2) []), (Permutation (e1 ++ e1) e2), (Permutation (e1 ++ e1) e1), (Permutation (e1 ++ e1) (n :: e2)), (Permutation (e1 ++ e1) (n :: e1)), (Permutation (e1 ++ e1) (e2 ++ e2)), (Permutation (e1 ++ e1) (e2 ++ e1)), (Permutation (e1 ++ e1) (e1 ++ e2)), (Permutation (e1 ++ e1) []), (Permutation [] e2)
(Permutation [] e1), (Permutation [] (n :: e2)), (Permutation [] (n :: e1)), (Permutation [] (e2 ++ e2)), (Permutation [] (e2 ++ e1)), (Permutation [] (e1 ++ e2)), (Permutation [] (e1 ++ e1)), (In t2 (heap_delete_max t2)), (In t2 (heap_delete_max t1)), (In t1 (heap_delete_max t2))
(In t1 (heap_delete_max t1)), (In (Node n t2 t2) (heap_delete_max t2)), (In (Node n t2 t2) (heap_delete_max t1)), (In (Node n t2 t1) (heap_delete_max t2)), (In (Node n t2 t1) (heap_delete_max t1)), (In (Node n t1 t2) (heap_delete_max t2)), (In (Node n t1 t2) (heap_delete_max t1)), (In (Node n t1 t1) (heap_delete_max t2)), (In (Node n t1 t1) (heap_delete_max t1)), (In (smash t2 t2) (heap_delete_max t2))
(In (smash t2 t2) (heap_delete_max t1)), (In (smash t2 t1) (heap_delete_max t2)), (In (smash t2 t1) (heap_delete_max t1)), (In (smash t1 t2) (heap_delete_max t2)), (In (smash t1 t2) (heap_delete_max t1)), (In (smash t1 t1) (heap_delete_max t2)), (In (smash t1 t1) (heap_delete_max t1)), (In Leaf (heap_delete_max t2)), (In Leaf (heap_delete_max t1)), (In n (n :: e2))
(In n (n :: e1)), (In n (e2 ++ e2)), (In n (e2 ++ e1)), (In n (e1 ++ e2)), (In n (e1 ++ e1)), (In (length e2) e2), (In (length e2) e1), (In (length e2) (n :: e2)), (In (length e2) (n :: e1)), (In (length e2) (e2 ++ e2))
(In (length e2) (e2 ++ e1)), (In (length e2) (e1 ++ e2)), (In (length e2) (e1 ++ e1)), (In (length e1) e2), (In (length e1) e1), (In (length e1) (n :: e2)), (In (length e1) (n :: e1)), (In (length e1) (e2 ++ e2)), (In (length e1) (e2 ++ e1)), (In (length e1) (e1 ++ e2))
(In (length e1) (e1 ++ e1)), (n < length e2), (n < length e1), (length e2 < n), (length e2 < length e1), (length e1 < n), (length e1 < length e2), (n <= length e2), (n <= length e1), (length e2 <= n)
(length e2 <= length e1), (length e1 <= n), (length e1 <= length e2), (~ tree_elems t2 e2), (~ tree_elems t2 e1), (~ tree_elems t1 e2), (~ tree_elems t1 e1), (~ pow2heap n t2), (~ pow2heap n t1), (~ pow2heapp n n t2)
(~ pow2heapp n n t1), (~ Permutation e2 e2), (~ Permutation e2 e1), (~ Permutation e1 e2), (~ Permutation e1 e1), (~ In n e2), (~ In n e1), (~ n < n), (~ n <= n), (t2 <> t2)
(t2 <> t1), (t1 <> t2), (t1 <> t1), (n <> n), (e2 <> e2), (e2 <> e1), (e1 <> e2), (e1 <> e1), (None = Some e2), (None = Some e1)
([] = heap_delete_max t2), ([] = heap_delete_max t1), (Node n t2 t2 = t2), (Node n t2 t2 = t1), (Node n t2 t2 = smash t2 t2), (Node n t2 t2 = smash t2 t1), (Node n t2 t2 = smash t1 t2), (Node n t2 t2 = smash t1 t1), (Node n t2 t1 = t2), (Node n t2 t1 = t1)
(Node n t2 t1 = smash t2 t2), (Node n t2 t1 = smash t2 t1), (Node n t2 t1 = smash t1 t2), (Node n t2 t1 = smash t1 t1), (Node n t1 t2 = t2), (Node n t1 t2 = t1), (Node n t1 t2 = smash t2 t2), (Node n t1 t2 = smash t2 t1), (Node n t1 t2 = smash t1 t2), (Node n t1 t2 = smash t1 t1)
(Node n t1 t1 = t2), (Node n t1 t1 = t1), (Node n t1 t1 = smash t2 t2), (Node n t1 t1 = smash t2 t1), (Node n t1 t1 = smash t1 t2), (Node n t1 t1 = smash t1 t1), (smash t2 t2 = t2), (smash t2 t2 = t1), (smash t2 t1 = t2), (smash t2 t1 = t1)
(smash t1 t2 = t2), (smash t1 t2 = t1), (smash t1 t1 = t2), (smash t1 t1 = t1), (Leaf = Node n t2 t2), (Leaf = Node n t2 t1), (Leaf = Node n t1 t2), (Leaf = Node n t1 t1), (Leaf = smash t2 t2), (Leaf = smash t2 t1)
(Leaf = smash t1 t2), (Leaf = smash t1 t1), (length e2 = n), (length e1 = n), (n :: e2 = e2), (n :: e2 = e1), (n :: e2 = e2 ++ e2), (n :: e2 = e2 ++ e1), (n :: e2 = e1 ++ e2), (n :: e2 = e1 ++ e1)
(n :: e2 = []), (n :: e1 = e2), (n :: e1 = e1), (n :: e1 = e2 ++ e2), (n :: e1 = e2 ++ e1), (n :: e1 = e1 ++ e2), (n :: e1 = e1 ++ e1), (n :: e1 = []), (e2 ++ e2 = e2), (e2 ++ e2 = e1)
(e2 ++ e1 = e2), (e2 ++ e1 = e1), (e1 ++ e2 = e2), (e1 ++ e2 = e1), (e1 ++ e1 = e2), (e1 ++ e1 = e1), ([] = e2), ([] = e1), ([] = e2 ++ e2), ([] = e2 ++ e1)
([] = e1 ++ e2), ([] = e1 ++ e1), (None = Some n), (None = Some t2), (None = Some t1), ((n >? n) = (n >=? n))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 94.147 seconds


Label: 0 (0)
(tree_elems (Node n t2 t1) e1), (tree_elems (Node n t1 t2) e1)

Label: 1 (1)
(tree_elems (Node n t2 t1) e2), (tree_elems (Node n t1 t2) e2)






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 112.754 seconds

Number of Result Pairs Returned: 3

1. (tree_elems (Node n t1 t2) e1 ->  tree_elems (Node n t1 t2) e2 -> Permutation e1 e2)

2. (tree_elems (Node n t1 t2) e2 -> tree_elems (Node n t2 t1) e2)
(tree_elems (Node n t1 t2) e1 ->  tree_elems (Node n t2 t1) e2 -> Permutation e1 e2)

3. (tree_elems (Node n t1 t2) e1 -> tree_elems (Node n t2 t1) e1)
(tree_elems (Node n t2 t1) e1 ->  tree_elems (Node n t1 t2) e2 -> Permutation e1 e2)
