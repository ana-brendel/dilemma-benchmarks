Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (rotate (len x) x = x)

----------------------------------
Goal: (rotate (len x) (append x (cons n nil)) = cons n x)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.042 seconds

gv1 : Nat = (len x)
gv4 : Lst = nil
gv2 : Lst = (append x (cons n nil))
gv5 : Lst = (cons n x)
gv3 : Lst = (cons n nil)
gv0 : Lst = (rotate (len x) (append x (cons n nil)))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 31.951 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (rotate (len x) (append x (cons n nil)) = cons n x)
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (cons n nil = gv3)

----------------------------------
Goal: (rotate (len x) (append x gv3) = cons n x)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (rotate (len x) (append x (cons n nil)) = gv0)

----------------------------------
Goal: (gv0 = cons n x)
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (cons n x = gv5)

----------------------------------
Goal: (rotate (len x) (append x (cons n nil)) = gv5)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (append x (cons n nil) = gv2)

----------------------------------
Goal: (rotate (len x) gv2 = cons n x)
Case: Invalid and Generalized

Label: Generalization #5
Assumptions: 
 -- (nil = gv4)

----------------------------------
Goal: (rotate (len x) (append x (cons n gv4)) = cons n x)
Case: Invalid and Generalized

Label: Generalization #6
Assumptions: 
 -- (len x = gv1)

----------------------------------
Goal: (rotate gv1 (append x (cons n nil)) = cons n x)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 32.087 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
append : (Lst -> Lst -> Lst)
len : (Lst -> Nat)
rotate : (Nat -> Lst -> Lst)
succ : (Nat -> Nat)
zero : Nat
nil : Lst
cons : (Nat -> Lst -> Lst)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 32.231 seconds


Label: 0 (0)
(n = n), (gv3 = gv3), (gv3 = x), (x = gv3), (x = x), (n <> n), (gv3 <> gv3), (gv3 <> x), (x <> gv3), (x <> x)
(None = Some n), (succ n = n), (succ n = len gv3), (succ n = len x), (len gv3 = n), (len x = n), (zero = succ n), (zero = len gv3), (zero = len x), (None = Some gv3)
(None = Some x), (cons n gv3 = gv3), (cons n gv3 = x), (cons n gv3 = rotate n gv3), (cons n gv3 = rotate n x), (cons n gv3 = append gv3 gv3), (cons n gv3 = append gv3 x), (cons n gv3 = append x gv3), (cons n gv3 = append x x), (cons n x = gv3)
(cons n x = x), (cons n x = rotate n gv3), (cons n x = rotate n x), (cons n x = append gv3 gv3), (cons n x = append gv3 x), (cons n x = append x gv3), (cons n x = append x x), (rotate n gv3 = gv3), (rotate n gv3 = x), (rotate n gv3 = append gv3 gv3)
(rotate n gv3 = append gv3 x), (rotate n gv3 = append x gv3), (rotate n gv3 = append x x), (rotate n x = gv3), (rotate n x = x), (rotate n x = append gv3 gv3), (rotate n x = append gv3 x), (rotate n x = append x gv3), (rotate n x = append x x), (append gv3 gv3 = gv3)
(append gv3 gv3 = x), (append gv3 x = gv3), (append gv3 x = x), (append x gv3 = gv3), (append x gv3 = x), (append x x = gv3), (append x x = x), (nil = cons n gv3), (nil = cons n x), (nil = rotate n gv3)
(nil = rotate n x), (nil = append gv3 gv3), (nil = append gv3 x), (nil = append x gv3), (nil = append x x)

Label: 1 (1)
(n = n), (x = x), (x = gv0), (gv0 = x), (gv0 = gv0), (n <> n), (x <> x), (x <> gv0), (gv0 <> x), (gv0 <> gv0)
(None = Some n), (succ n = n), (succ n = len x), (succ n = len gv0), (len x = n), (len gv0 = n), (zero = succ n), (zero = len x), (zero = len gv0), (None = Some x)
(None = Some gv0), (cons n x = x), (cons n x = gv0), (cons n x = rotate n x), (cons n x = rotate n gv0), (cons n x = append x x), (cons n x = append x gv0), (cons n x = append gv0 x), (cons n x = append gv0 gv0), (cons n gv0 = x)
(cons n gv0 = gv0), (cons n gv0 = rotate n x), (cons n gv0 = rotate n gv0), (cons n gv0 = append x x), (cons n gv0 = append x gv0), (cons n gv0 = append gv0 x), (cons n gv0 = append gv0 gv0), (rotate n x = x), (rotate n x = gv0), (rotate n x = append x x)
(rotate n x = append x gv0), (rotate n x = append gv0 x), (rotate n x = append gv0 gv0), (rotate n gv0 = x), (rotate n gv0 = gv0), (rotate n gv0 = append x x), (rotate n gv0 = append x gv0), (rotate n gv0 = append gv0 x), (rotate n gv0 = append gv0 gv0), (append x x = x)
(append x x = gv0), (append x gv0 = x), (append x gv0 = gv0), (append gv0 x = x), (append gv0 x = gv0), (append gv0 gv0 = x), (append gv0 gv0 = gv0), (nil = cons n x), (nil = cons n gv0), (nil = rotate n x)
(nil = rotate n gv0), (nil = append x x), (nil = append x gv0), (nil = append gv0 x), (nil = append gv0 gv0)

Label: 2 (2)
(n = n), (gv5 = gv5), (gv5 = x), (x = gv5), (x = x), (n <> n), (gv5 <> gv5), (gv5 <> x), (x <> gv5), (x <> x)
(None = Some n), (succ n = n), (succ n = len gv5), (succ n = len x), (len gv5 = n), (len x = n), (zero = succ n), (zero = len gv5), (zero = len x), (None = Some gv5)
(None = Some x), (cons n gv5 = gv5), (cons n gv5 = x), (cons n gv5 = rotate n gv5), (cons n gv5 = rotate n x), (cons n gv5 = append gv5 gv5), (cons n gv5 = append gv5 x), (cons n gv5 = append x gv5), (cons n gv5 = append x x), (cons n x = gv5)
(cons n x = x), (cons n x = rotate n gv5), (cons n x = rotate n x), (cons n x = append gv5 gv5), (cons n x = append gv5 x), (cons n x = append x gv5), (cons n x = append x x), (rotate n gv5 = gv5), (rotate n gv5 = x), (rotate n gv5 = append gv5 gv5)
(rotate n gv5 = append gv5 x), (rotate n gv5 = append x gv5), (rotate n gv5 = append x x), (rotate n x = gv5), (rotate n x = x), (rotate n x = append gv5 gv5), (rotate n x = append gv5 x), (rotate n x = append x gv5), (rotate n x = append x x), (append gv5 gv5 = gv5)
(append gv5 gv5 = x), (append gv5 x = gv5), (append gv5 x = x), (append x gv5 = gv5), (append x gv5 = x), (append x x = gv5), (append x x = x), (nil = cons n gv5), (nil = cons n x), (nil = rotate n gv5)
(nil = rotate n x), (nil = append gv5 gv5), (nil = append gv5 x), (nil = append x gv5), (nil = append x x)

Label: 3 (3)
(n = n), (gv2 = gv2), (gv2 = x), (x = gv2), (x = x), (n <> n), (gv2 <> gv2), (gv2 <> x), (x <> gv2), (x <> x)
(None = Some n), (succ n = n), (succ n = len gv2), (succ n = len x), (len gv2 = n), (len x = n), (zero = succ n), (zero = len gv2), (zero = len x), (None = Some gv2)
(None = Some x), (cons n gv2 = gv2), (cons n gv2 = x), (cons n gv2 = rotate n gv2), (cons n gv2 = rotate n x), (cons n gv2 = append gv2 gv2), (cons n gv2 = append gv2 x), (cons n gv2 = append x gv2), (cons n gv2 = append x x), (cons n x = gv2)
(cons n x = x), (cons n x = rotate n gv2), (cons n x = rotate n x), (cons n x = append gv2 gv2), (cons n x = append gv2 x), (cons n x = append x gv2), (cons n x = append x x), (rotate n gv2 = gv2), (rotate n gv2 = x), (rotate n gv2 = append gv2 gv2)
(rotate n gv2 = append gv2 x), (rotate n gv2 = append x gv2), (rotate n gv2 = append x x), (rotate n x = gv2), (rotate n x = x), (rotate n x = append gv2 gv2), (rotate n x = append gv2 x), (rotate n x = append x gv2), (rotate n x = append x x), (append gv2 gv2 = gv2)
(append gv2 gv2 = x), (append gv2 x = gv2), (append gv2 x = x), (append x gv2 = gv2), (append x gv2 = x), (append x x = gv2), (append x x = x), (nil = cons n gv2), (nil = cons n x), (nil = rotate n gv2)
(nil = rotate n x), (nil = append gv2 gv2), (nil = append gv2 x), (nil = append x gv2), (nil = append x x)

Label: 4 (4)
(n = n), (gv4 = gv4), (gv4 = x), (x = gv4), (x = x), (n <> n), (gv4 <> gv4), (gv4 <> x), (x <> gv4), (x <> x)
(None = Some n), (succ n = n), (succ n = len gv4), (succ n = len x), (len gv4 = n), (len x = n), (zero = succ n), (zero = len gv4), (zero = len x), (None = Some gv4)
(None = Some x), (cons n gv4 = gv4), (cons n gv4 = x), (cons n gv4 = rotate n gv4), (cons n gv4 = rotate n x), (cons n gv4 = append gv4 gv4), (cons n gv4 = append gv4 x), (cons n gv4 = append x gv4), (cons n gv4 = append x x), (cons n x = gv4)
(cons n x = x), (cons n x = rotate n gv4), (cons n x = rotate n x), (cons n x = append gv4 gv4), (cons n x = append gv4 x), (cons n x = append x gv4), (cons n x = append x x), (rotate n gv4 = gv4), (rotate n gv4 = x), (rotate n gv4 = append gv4 gv4)
(rotate n gv4 = append gv4 x), (rotate n gv4 = append x gv4), (rotate n gv4 = append x x), (rotate n x = gv4), (rotate n x = x), (rotate n x = append gv4 gv4), (rotate n x = append gv4 x), (rotate n x = append x gv4), (rotate n x = append x x), (append gv4 gv4 = gv4)
(append gv4 gv4 = x), (append gv4 x = gv4), (append gv4 x = x), (append x gv4 = gv4), (append x gv4 = x), (append x x = gv4), (append x x = x), (nil = cons n gv4), (nil = cons n x), (nil = rotate n gv4)
(nil = rotate n x), (nil = append gv4 gv4), (nil = append gv4 x), (nil = append x gv4), (nil = append x x)

Label: 5 (5)
(x = x), (n = n), (n = gv1), (gv1 = n), (gv1 = gv1), (x <> x), (n <> n), (n <> gv1), (gv1 <> n), (gv1 <> gv1)
(None = Some n), (None = Some gv1), (succ n = n), (succ n = gv1), (succ n = len x), (succ gv1 = n), (succ gv1 = gv1), (succ gv1 = len x), (len x = n), (len x = gv1)
(zero = succ n), (zero = succ gv1), (zero = len x), (None = Some x), (cons n x = x), (cons n x = rotate n x), (cons n x = rotate gv1 x), (cons n x = append x x), (cons gv1 x = x), (cons gv1 x = rotate n x)
(cons gv1 x = rotate gv1 x), (cons gv1 x = append x x), (rotate n x = x), (rotate n x = append x x), (rotate gv1 x = x), (rotate gv1 x = append x x), (append x x = x), (nil = cons n x), (nil = cons gv1 x), (nil = rotate n x)
(nil = rotate gv1 x), (nil = append x x)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 37.638 seconds


Label: 0 (0)
(cons n x = append gv3 x), (cons n gv3 = append gv3 gv3)

Label: 1 (1)
(cons n x = gv0)

Label: 2 (2)
(cons n x = gv5)

Label: 3 (3)

Label: 4 (4)
(zero = len gv4), (append gv4 x = x), (append x gv4 = x), (nil = rotate n gv4), (append gv4 gv4 = gv4), (nil = append gv4 gv4), (rotate n gv4 = append gv4 gv4)

Label: 5 (5)
(len x = gv1)


------------------------------ ALL RESULTS ------------------------------
1. (rotate (len x) (append x (cons n nil)) = cons n x)

2. (append nil nil = nil)

3. (zero = len gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)

4. (append gv4 x = x -> rotate (len x) (append x (cons n gv4)) = cons n x)

5. (append x gv4 = x -> rotate (len x) (append x (cons n gv4)) = cons n x)

6. (nil = rotate n gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)

7. (append gv4 gv4 = gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)

8. (nil = append gv4 gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)

9. (cons n x = append gv3 x -> rotate (len x) (append x gv3) = cons n x)

10. (cons n gv3 = append gv3 gv3 -> rotate (len x) (append x gv3) = cons n x)

11. (rotate n gv4 = append gv4 gv4 ->  rotate (len x) (append x (cons n gv4)) = cons n x)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 60.844 seconds

Number of Result Pairs Returned: 11

1. (rotate (len x) (append x (cons n nil)) = cons n x)

2. (zero = len gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)

3. (append gv4 x = x -> rotate (len x) (append x (cons n gv4)) = cons n x)

4. (append x gv4 = x -> rotate (len x) (append x (cons n gv4)) = cons n x)

5. (nil = rotate n gv4 -> rotate (len x) (append x (cons n gv4)) = cons n x)
