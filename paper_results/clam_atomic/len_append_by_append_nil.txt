Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (len l2 = len (append l2 nil))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 1.524 seconds

gv3 : Lst = nil
gv0 : Nat = (len l2)
gv2 : Lst = (append l2 nil)
gv1 : Nat = (len (append l2 nil))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 21.064 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (len l2 = len (append l2 nil))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (len (append l2 nil) = gv1)

----------------------------------
Goal: (len l2 = gv1)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (append l2 nil = gv2)

----------------------------------
Goal: (len l2 = len gv2)
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (len l2 = gv0)

----------------------------------
Goal: (gv0 = len (append l2 nil))
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (nil = gv3)

----------------------------------
Goal: (len l2 = len (append l2 gv3))
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 21.199 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
Nat : Set
Lst : Set
plus : (Nat -> Nat -> Nat)
mult : (Nat -> Nat -> Nat)
append : (Lst -> Lst -> Lst)
rev : (Lst -> Lst)
qreva : (Lst -> Lst -> Lst)
exp : (Nat -> Nat -> Nat)
qexp : (Nat -> Nat -> Nat -> Nat)
less : (Nat -> Nat -> bool)
drop : (Nat -> Lst -> Lst)
len : (Lst -> Nat)
zero : Nat
succ : (Nat -> Nat)
nil : Lst
cons : (Nat -> Lst -> Lst)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 21.336 seconds


Label: 0 (0)
(gv1 = gv1), (l2 = l2), (false = less gv1 gv1), (true = less gv1 gv1), (gv1 <> gv1), (l2 <> l2), (cons gv1 l2 = l2), (cons gv1 l2 = drop gv1 l2), (cons gv1 l2 = qreva l2 l2), (cons gv1 l2 = rev l2)
(cons gv1 l2 = append l2 l2), (drop gv1 l2 = l2), (drop gv1 l2 = append l2 l2), (qreva l2 l2 = l2), (qreva l2 l2 = drop gv1 l2), (qreva l2 l2 = append l2 l2), (rev l2 = l2), (rev l2 = drop gv1 l2), (rev l2 = qreva l2 l2), (rev l2 = append l2 l2)
(append l2 l2 = l2), (nil = cons gv1 l2), (nil = drop gv1 l2), (nil = qreva l2 l2), (nil = rev l2), (nil = append l2 l2), (None = Some gv1), (succ gv1 = gv1), (succ gv1 = len l2), (succ gv1 = qexp gv1 gv1 gv1)
(succ gv1 = exp gv1 gv1), (succ gv1 = mult gv1 gv1), (succ gv1 = plus gv1 gv1), (len l2 = gv1), (len l2 = exp gv1 gv1), (qexp gv1 gv1 gv1 = gv1), (qexp gv1 gv1 gv1 = len l2), (qexp gv1 gv1 gv1 = exp gv1 gv1), (qexp gv1 gv1 gv1 = mult gv1 gv1), (qexp gv1 gv1 gv1 = plus gv1 gv1)
(exp gv1 gv1 = gv1), (mult gv1 gv1 = gv1), (mult gv1 gv1 = len l2), (mult gv1 gv1 = exp gv1 gv1), (plus gv1 gv1 = gv1), (plus gv1 gv1 = len l2), (plus gv1 gv1 = exp gv1 gv1), (plus gv1 gv1 = mult gv1 gv1), (zero = succ gv1), (zero = len l2)
(zero = qexp gv1 gv1 gv1), (zero = exp gv1 gv1), (zero = mult gv1 gv1), (zero = plus gv1 gv1), (None = Some l2)

Label: 1 (1)
(gv2 = gv2), (gv2 = l2), (l2 = gv2), (l2 = l2), (gv2 <> gv2), (gv2 <> l2), (l2 <> gv2), (l2 <> l2), (qreva gv2 gv2 = gv2), (qreva gv2 gv2 = l2)
(qreva gv2 gv2 = append gv2 gv2), (qreva gv2 gv2 = append gv2 l2), (qreva gv2 gv2 = append l2 gv2), (qreva gv2 gv2 = append l2 l2), (qreva gv2 l2 = gv2), (qreva gv2 l2 = l2), (qreva gv2 l2 = append gv2 gv2), (qreva gv2 l2 = append gv2 l2), (qreva gv2 l2 = append l2 gv2), (qreva gv2 l2 = append l2 l2)
(qreva l2 gv2 = gv2), (qreva l2 gv2 = l2), (qreva l2 gv2 = append gv2 gv2), (qreva l2 gv2 = append gv2 l2), (qreva l2 gv2 = append l2 gv2), (qreva l2 gv2 = append l2 l2), (qreva l2 l2 = gv2), (qreva l2 l2 = l2), (qreva l2 l2 = append gv2 gv2), (qreva l2 l2 = append gv2 l2)
(qreva l2 l2 = append l2 gv2), (qreva l2 l2 = append l2 l2), (rev gv2 = gv2), (rev gv2 = l2), (rev gv2 = qreva gv2 gv2), (rev gv2 = qreva gv2 l2), (rev gv2 = qreva l2 gv2), (rev gv2 = qreva l2 l2), (rev gv2 = append gv2 gv2), (rev gv2 = append gv2 l2)
(rev gv2 = append l2 gv2), (rev gv2 = append l2 l2), (rev l2 = gv2), (rev l2 = l2), (rev l2 = qreva gv2 gv2), (rev l2 = qreva gv2 l2), (rev l2 = qreva l2 gv2), (rev l2 = qreva l2 l2), (rev l2 = append gv2 gv2), (rev l2 = append gv2 l2)
(rev l2 = append l2 gv2), (rev l2 = append l2 l2), (append gv2 gv2 = gv2), (append gv2 gv2 = l2), (append gv2 l2 = gv2), (append gv2 l2 = l2), (append l2 gv2 = gv2), (append l2 gv2 = l2), (append l2 l2 = gv2), (append l2 l2 = l2)
(nil = qreva gv2 gv2), (nil = qreva gv2 l2), (nil = qreva l2 gv2), (nil = qreva l2 l2), (nil = rev gv2), (nil = rev l2), (nil = append gv2 gv2), (nil = append gv2 l2), (nil = append l2 gv2), (nil = append l2 l2)
(zero = len gv2), (zero = len l2), (None = Some gv2), (None = Some l2)

Label: 2 (2)
(l2 = l2), (gv0 = gv0), (false = less gv0 gv0), (true = less gv0 gv0), (l2 <> l2), (gv0 <> gv0), (cons gv0 l2 = l2), (cons gv0 l2 = drop gv0 l2), (cons gv0 l2 = qreva l2 l2), (cons gv0 l2 = rev l2)
(cons gv0 l2 = append l2 l2), (drop gv0 l2 = l2), (drop gv0 l2 = append l2 l2), (qreva l2 l2 = l2), (qreva l2 l2 = drop gv0 l2), (qreva l2 l2 = append l2 l2), (rev l2 = l2), (rev l2 = drop gv0 l2), (rev l2 = qreva l2 l2), (rev l2 = append l2 l2)
(append l2 l2 = l2), (nil = cons gv0 l2), (nil = drop gv0 l2), (nil = qreva l2 l2), (nil = rev l2), (nil = append l2 l2), (None = Some gv0), (succ gv0 = gv0), (succ gv0 = len l2), (succ gv0 = qexp gv0 gv0 gv0)
(succ gv0 = exp gv0 gv0), (succ gv0 = mult gv0 gv0), (succ gv0 = plus gv0 gv0), (len l2 = gv0), (len l2 = exp gv0 gv0), (qexp gv0 gv0 gv0 = gv0), (qexp gv0 gv0 gv0 = len l2), (qexp gv0 gv0 gv0 = exp gv0 gv0), (qexp gv0 gv0 gv0 = mult gv0 gv0), (qexp gv0 gv0 gv0 = plus gv0 gv0)
(exp gv0 gv0 = gv0), (mult gv0 gv0 = gv0), (mult gv0 gv0 = len l2), (mult gv0 gv0 = exp gv0 gv0), (plus gv0 gv0 = gv0), (plus gv0 gv0 = len l2), (plus gv0 gv0 = exp gv0 gv0), (plus gv0 gv0 = mult gv0 gv0), (zero = succ gv0), (zero = len l2)
(zero = qexp gv0 gv0 gv0), (zero = exp gv0 gv0), (zero = mult gv0 gv0), (zero = plus gv0 gv0), (None = Some l2)

Label: 3 (3)
(gv3 = gv3), (gv3 = l2), (l2 = gv3), (l2 = l2), (gv3 <> gv3), (gv3 <> l2), (l2 <> gv3), (l2 <> l2), (qreva gv3 gv3 = gv3), (qreva gv3 gv3 = l2)
(qreva gv3 gv3 = append gv3 gv3), (qreva gv3 gv3 = append gv3 l2), (qreva gv3 gv3 = append l2 gv3), (qreva gv3 gv3 = append l2 l2), (qreva gv3 l2 = gv3), (qreva gv3 l2 = l2), (qreva gv3 l2 = append gv3 gv3), (qreva gv3 l2 = append gv3 l2), (qreva gv3 l2 = append l2 gv3), (qreva gv3 l2 = append l2 l2)
(qreva l2 gv3 = gv3), (qreva l2 gv3 = l2), (qreva l2 gv3 = append gv3 gv3), (qreva l2 gv3 = append gv3 l2), (qreva l2 gv3 = append l2 gv3), (qreva l2 gv3 = append l2 l2), (qreva l2 l2 = gv3), (qreva l2 l2 = l2), (qreva l2 l2 = append gv3 gv3), (qreva l2 l2 = append gv3 l2)
(qreva l2 l2 = append l2 gv3), (qreva l2 l2 = append l2 l2), (rev gv3 = gv3), (rev gv3 = l2), (rev gv3 = qreva gv3 gv3), (rev gv3 = qreva gv3 l2), (rev gv3 = qreva l2 gv3), (rev gv3 = qreva l2 l2), (rev gv3 = append gv3 gv3), (rev gv3 = append gv3 l2)
(rev gv3 = append l2 gv3), (rev gv3 = append l2 l2), (rev l2 = gv3), (rev l2 = l2), (rev l2 = qreva gv3 gv3), (rev l2 = qreva gv3 l2), (rev l2 = qreva l2 gv3), (rev l2 = qreva l2 l2), (rev l2 = append gv3 gv3), (rev l2 = append gv3 l2)
(rev l2 = append l2 gv3), (rev l2 = append l2 l2), (append gv3 gv3 = gv3), (append gv3 gv3 = l2), (append gv3 l2 = gv3), (append gv3 l2 = l2), (append l2 gv3 = gv3), (append l2 gv3 = l2), (append l2 l2 = gv3), (append l2 l2 = l2)
(nil = qreva gv3 gv3), (nil = qreva gv3 l2), (nil = qreva l2 gv3), (nil = qreva l2 l2), (nil = rev gv3), (nil = rev l2), (nil = append gv3 gv3), (nil = append gv3 l2), (nil = append l2 gv3), (nil = append l2 l2)
(zero = len gv3), (zero = len l2), (None = Some gv3), (None = Some l2)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 25.58 seconds


Label: 0 (0)
(len l2 = gv1)

Label: 1 (1)
(gv2 = l2), (l2 = gv2)

Label: 2 (2)
(len l2 = gv0)

Label: 3 (3)
(nil = rev gv3), (zero = len gv3), (qreva gv3 l2 = l2), (append gv3 l2 = l2), (append l2 gv3 = l2), (qreva gv3 gv3 = gv3), (nil = qreva gv3 gv3), (append gv3 gv3 = gv3), (nil = append gv3 gv3), (rev l2 = qreva l2 gv3)
(rev gv3 = qreva gv3 gv3), (rev gv3 = append gv3 gv3)


------------------------------ ALL RESULTS ------------------------------
1. (len l2 = len (append l2 nil))

2. (append l2 nil = l2)

3. (qreva nil nil = nil)

4. (append nil nil = nil)

5. (gv2 = l2 -> len l2 = len gv2)

6. (l2 = gv2 -> len l2 = len gv2)

7. (nil = rev gv3 -> len l2 = len (append l2 gv3))

8. (zero = len gv3 -> len l2 = len (append l2 gv3))

9. (qreva gv3 l2 = l2 -> len l2 = len (append l2 gv3))

10. (append gv3 l2 = l2 -> len l2 = len (append l2 gv3))

11. (append l2 gv3 = l2 -> len l2 = len (append l2 gv3))

12. (qreva gv3 gv3 = gv3 -> len l2 = len (append l2 gv3))

13. (nil = qreva gv3 gv3 -> len l2 = len (append l2 gv3))

14. (append gv3 gv3 = gv3 -> len l2 = len (append l2 gv3))

15. (nil = append gv3 gv3 -> len l2 = len (append l2 gv3))

16. (rev l2 = qreva l2 gv3 -> len l2 = len (append l2 gv3))

17. (rev gv3 = qreva gv3 gv3 -> len l2 = len (append l2 gv3))

18. (rev gv3 = append gv3 gv3 -> len l2 = len (append l2 gv3))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 59.582 seconds

Number of Result Pairs Returned: 18

1. (len l2 = len (append l2 nil))

2. (append l2 nil = l2)

3. (gv2 = l2 -> len l2 = len gv2)

4. (l2 = gv2 -> len l2 = len gv2)

5. (nil = rev gv3 -> len l2 = len (append l2 gv3))
