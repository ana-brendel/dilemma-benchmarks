Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (len (rev l) = len l)

----------------------------------
Goal: (len (rev l) + 1 = S (len l))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 2.734 seconds

gv4 : nat = 0
gv6 : nat = (len l)
gv2 : lst = (rev l)
gv0 : nat = (len (rev l) + 1)
gv3 : nat = 1
gv5 : nat = (S (len l))
gv1 : nat = (len (rev l))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 128.108 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (len (rev l) + 1 = S (len l))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (S (len l) = gv5)

----------------------------------
Goal: (len (rev l) + 1 = gv5)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (gv1 = len l)

----------------------------------
Goal: (gv1 + 1 = S (len l))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (len (rev l) = gv1)
 -- (S (len l) = gv5)

----------------------------------
Goal: (gv1 + 1 = gv5)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (len (rev l) = gv1)
 -- (1 = gv3)

----------------------------------
Goal: (gv1 + gv3 = S (len l))
Case: Invalid and Generalized

Label: Generalization #5
Assumptions: 
 -- (gv1 + 1 = gv0)

----------------------------------
Goal: (gv0 = S (len l))
Case: Not Stable

Label: Generalization #6
Assumptions: 
 -- (gv1 = gv6)

----------------------------------
Goal: (gv1 + 1 = S gv6)
Case: Valid and Generalized

Label: Generalization #11
Assumptions: 
 -- (len (rev l) = gv1)
 -- (0 = gv4)

----------------------------------
Goal: (gv1 + S gv4 = S (len l))
Case: Invalid and Generalized

Label: Generalization #12
Assumptions: 
 -- (1 = gv3)

----------------------------------
Goal: (len (rev l) + gv3 = S (len l))
Case: Invalid and Generalized

Label: Generalization #13
Assumptions: 
 -- (len (rev l) + 1 = gv0)

----------------------------------
Goal: (gv0 = S (len l))
Case: Invalid and Generalized

Label: Generalization #14
Assumptions: 
 -- (len gv2 = len l)

----------------------------------
Goal: (len gv2 + 1 = S (len l))
Case: Valid and Generalized

Label: Generalization #15
Assumptions: 
 -- (S (len l) = gv5)
 -- (rev l = gv2)

----------------------------------
Goal: (len gv2 + 1 = gv5)
Case: Invalid and Generalized

Label: Generalization #16
Assumptions: 
 -- (gv1 = len l)

----------------------------------
Goal: (gv1 + 1 = S (len l))
Case: Valid and Generalized

Label: Generalization #19
Assumptions: 
 -- (gv1 + 1 = gv0)

----------------------------------
Goal: (gv0 = S (len l))
Case: Not Stable

Label: Generalization #20
Assumptions: 
 -- (gv1 = gv6)

----------------------------------
Goal: (gv1 + 1 = S gv6)
Case: Valid and Generalized

Label: Generalization #22
Assumptions: 
 -- (1 = gv3)
 -- (rev l = gv2)

----------------------------------
Goal: (len gv2 + gv3 = S (len l))
Case: Invalid and Generalized

Label: Generalization #23
Assumptions: 
 -- (len gv2 + 1 = gv0)

----------------------------------
Goal: (gv0 = S (len l))
Case: Not Stable

Label: Generalization #24
Assumptions: 
 -- (len gv2 = gv6)

----------------------------------
Goal: (len gv2 + 1 = S gv6)
Case: Valid and Generalized

Label: Generalization #29
Assumptions: 
 -- (0 = gv4)
 -- (rev l = gv2)

----------------------------------
Goal: (len gv2 + S gv4 = S (len l))
Case: Invalid and Generalized

Label: Generalization #30
Assumptions: 
 -- (len (rev l) = gv6)

----------------------------------
Goal: (len (rev l) + 1 = S gv6)
Case: Valid and Generalized

Label: Generalization #31
Assumptions: 
 -- (S gv6 = gv5)

----------------------------------
Goal: (len (rev l) + 1 = gv5)
Case: Not Stable

Label: Generalization #32
Assumptions: 
 -- (1 = gv3)
 -- (len l = gv6)

----------------------------------
Goal: (len (rev l) + gv3 = S gv6)
Case: Invalid and Generalized

Label: Generalization #33
Assumptions: 
 -- (len (rev l) + 1 = gv0)
 -- (len l = gv6)

----------------------------------
Goal: (gv0 = S gv6)
Case: Invalid and Generalized

Label: Generalization #34
Assumptions: 
 -- (0 = gv4)
 -- (len l = gv6)

----------------------------------
Goal: (len (rev l) + S gv4 = S gv6)
Case: Invalid and Generalized

Label: Generalization #35
Assumptions: 
 -- (0 = gv4)

----------------------------------
Goal: (len (rev l) + S gv4 = S (len l))
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 128.272 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
Datatypes.app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
lst : Set
queue : Set
len : (lst -> nat)
qlen : (queue -> nat)
app : (lst -> lst -> lst)
rev : (lst -> lst)
leb : (nat -> nat -> bool)
amortizeQueue : (lst -> lst -> queue)
qpush : (queue -> nat -> queue)
Nil : lst
Cons : (nat -> lst -> lst)
Queue : (lst -> lst -> queue)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 6 (6)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 7 (7)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 8 (8)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 9 (9)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 10 (10)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 11 (11)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 12 (12)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 128.43 seconds


Label: 0 (0)
(gv5 < gv5), (gv5 <= gv5), (gv5 = gv5), (l = l), (false = leb gv5 gv5), (true = leb gv5 gv5), (gv5 < len l), (len l < gv5), (gv5 <= len l), (len l <= gv5)
(~ gv5 < gv5), (~ gv5 <= gv5), (gv5 <> gv5), (l <> l), (Cons gv5 l = l), (Cons gv5 l = rev l), (Cons gv5 l = app l l), (rev l = l), (rev l = app l l), (app l l = l)
(Nil = Cons gv5 l), (Nil = rev l), (Nil = app l l), (None = Some gv5), (len l = gv5), (Queue l l = amortizeQueue l l), (None = Some l)

Label: 1 (1)
(gv5 < gv5), (gv5 < gv1), (gv1 < gv5), (gv1 < gv1), (gv5 <= gv5), (gv5 <= gv1), (gv1 <= gv5), (gv1 <= gv1), (l = l), (gv5 = gv5)
(gv5 = gv1), (gv1 = gv5), (gv1 = gv1), (false = leb gv5 gv5), (false = leb gv5 gv1), (false = leb gv1 gv5), (false = leb gv1 gv1), (true = leb gv5 gv5), (true = leb gv5 gv1), (true = leb gv1 gv5)
(true = leb gv1 gv1), (gv5 < len l), (gv1 < len l), (len l < gv5), (len l < gv1), (gv5 <= len l), (gv1 <= len l), (len l <= gv5), (len l <= gv1), (~ gv5 < gv5)
(~ gv5 < gv1), (~ gv1 < gv5), (~ gv1 < gv1), (~ gv5 <= gv5), (~ gv5 <= gv1), (~ gv1 <= gv5), (~ gv1 <= gv1), (l <> l), (gv5 <> gv5), (gv5 <> gv1)
(gv1 <> gv5), (gv1 <> gv1), (Cons gv5 l = l), (Cons gv5 l = rev l), (Cons gv5 l = app l l), (Cons gv1 l = l), (Cons gv1 l = rev l), (Cons gv1 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv5 l), (Nil = Cons gv1 l), (Nil = rev l), (Nil = app l l), (None = Some gv5), (None = Some gv1), (len l = gv5), (len l = gv1), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 2 (2)
(gv3 < gv3), (gv3 < gv1), (gv1 < gv3), (gv1 < gv1), (gv3 <= gv3), (gv3 <= gv1), (gv1 <= gv3), (gv1 <= gv1), (l = l), (gv3 = gv3)
(gv3 = gv1), (gv1 = gv3), (gv1 = gv1), (false = leb gv3 gv3), (false = leb gv3 gv1), (false = leb gv1 gv3), (false = leb gv1 gv1), (true = leb gv3 gv3), (true = leb gv3 gv1), (true = leb gv1 gv3)
(true = leb gv1 gv1), (gv3 < len l), (gv1 < len l), (len l < gv3), (len l < gv1), (gv3 <= len l), (gv1 <= len l), (len l <= gv3), (len l <= gv1), (~ gv3 < gv3)
(~ gv3 < gv1), (~ gv1 < gv3), (~ gv1 < gv1), (~ gv3 <= gv3), (~ gv3 <= gv1), (~ gv1 <= gv3), (~ gv1 <= gv1), (l <> l), (gv3 <> gv3), (gv3 <> gv1)
(gv1 <> gv3), (gv1 <> gv1), (Cons gv3 l = l), (Cons gv3 l = rev l), (Cons gv3 l = app l l), (Cons gv1 l = l), (Cons gv1 l = rev l), (Cons gv1 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv3 l), (Nil = Cons gv1 l), (Nil = rev l), (Nil = app l l), (None = Some gv3), (None = Some gv1), (len l = gv3), (len l = gv1), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 3 (3)
(gv4 < gv4), (gv4 < gv1), (gv1 < gv4), (gv1 < gv1), (gv4 <= gv4), (gv4 <= gv1), (gv1 <= gv4), (gv1 <= gv1), (l = l), (gv4 = gv4)
(gv4 = gv1), (gv1 = gv4), (gv1 = gv1), (false = leb gv4 gv4), (false = leb gv4 gv1), (false = leb gv1 gv4), (false = leb gv1 gv1), (true = leb gv4 gv4), (true = leb gv4 gv1), (true = leb gv1 gv4)
(true = leb gv1 gv1), (gv4 < len l), (gv1 < len l), (len l < gv4), (len l < gv1), (gv4 <= len l), (gv1 <= len l), (len l <= gv4), (len l <= gv1), (~ gv4 < gv4)
(~ gv4 < gv1), (~ gv1 < gv4), (~ gv1 < gv1), (~ gv4 <= gv4), (~ gv4 <= gv1), (~ gv1 <= gv4), (~ gv1 <= gv1), (l <> l), (gv4 <> gv4), (gv4 <> gv1)
(gv1 <> gv4), (gv1 <> gv1), (Cons gv4 l = l), (Cons gv4 l = rev l), (Cons gv4 l = app l l), (Cons gv1 l = l), (Cons gv1 l = rev l), (Cons gv1 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv4 l), (Nil = Cons gv1 l), (Nil = rev l), (Nil = app l l), (None = Some gv4), (None = Some gv1), (len l = gv4), (len l = gv1), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 4 (4)
(gv3 < gv3), (gv3 <= gv3), (gv3 = gv3), (l = l), (false = leb gv3 gv3), (true = leb gv3 gv3), (gv3 < len l), (len l < gv3), (gv3 <= len l), (len l <= gv3)
(~ gv3 < gv3), (~ gv3 <= gv3), (gv3 <> gv3), (l <> l), (Cons gv3 l = l), (Cons gv3 l = rev l), (Cons gv3 l = app l l), (rev l = l), (rev l = app l l), (app l l = l)
(Nil = Cons gv3 l), (Nil = rev l), (Nil = app l l), (None = Some gv3), (len l = gv3), (Queue l l = amortizeQueue l l), (None = Some l)

Label: 5 (5)
(gv0 < gv0), (gv0 <= gv0), (l = l), (gv0 = gv0), (false = leb gv0 gv0), (true = leb gv0 gv0), (gv0 < len l), (len l < gv0), (gv0 <= len l), (len l <= gv0)
(~ gv0 < gv0), (~ gv0 <= gv0), (l <> l), (gv0 <> gv0), (Cons gv0 l = l), (Cons gv0 l = rev l), (Cons gv0 l = app l l), (rev l = l), (rev l = app l l), (app l l = l)
(Nil = Cons gv0 l), (Nil = rev l), (Nil = app l l), (None = Some gv0), (len l = gv0), (Queue l l = amortizeQueue l l), (None = Some l)

Label: 6 (6)
(gv5 < gv5), (gv5 <= gv5), (gv5 = gv5), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (false = leb gv5 gv5), (true = leb gv5 gv5), (gv5 < len l)
(gv5 < len gv2), (len l < gv5), (len l < len gv2), (len gv2 < gv5), (len gv2 < len l), (gv5 <= len l), (gv5 <= len gv2), (len l <= gv5), (len l <= len gv2), (len gv2 <= gv5)
(len gv2 <= len l), (~ gv5 < gv5), (~ gv5 <= gv5), (gv5 <> gv5), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (Cons gv5 l = l), (Cons gv5 l = gv2)
(Cons gv5 l = rev l), (Cons gv5 l = rev gv2), (Cons gv5 l = app l l), (Cons gv5 l = app l gv2), (Cons gv5 l = app gv2 l), (Cons gv5 l = app gv2 gv2), (Cons gv5 gv2 = l), (Cons gv5 gv2 = gv2), (Cons gv5 gv2 = rev l), (Cons gv5 gv2 = rev gv2)
(Cons gv5 gv2 = app l l), (Cons gv5 gv2 = app l gv2), (Cons gv5 gv2 = app gv2 l), (Cons gv5 gv2 = app gv2 gv2), (rev l = l), (rev l = gv2), (rev l = app l l), (rev l = app l gv2), (rev l = app gv2 l), (rev l = app gv2 gv2)
(rev gv2 = l), (rev gv2 = gv2), (rev gv2 = app l l), (rev gv2 = app l gv2), (rev gv2 = app gv2 l), (rev gv2 = app gv2 gv2), (app l l = l), (app l l = gv2), (app l gv2 = l), (app l gv2 = gv2)
(app gv2 l = l), (app gv2 l = gv2), (app gv2 gv2 = l), (app gv2 gv2 = gv2), (Nil = Cons gv5 l), (Nil = Cons gv5 gv2), (Nil = rev l), (Nil = rev gv2), (Nil = app l l), (Nil = app l gv2)
(Nil = app gv2 l), (Nil = app gv2 gv2), (None = Some gv5), (len l = gv5), (len gv2 = gv5), (Queue l l = amortizeQueue l l), (Queue l l = amortizeQueue l gv2), (Queue l l = amortizeQueue gv2 l), (Queue l l = amortizeQueue gv2 gv2), (Queue l gv2 = amortizeQueue l l)
(Queue l gv2 = amortizeQueue l gv2), (Queue l gv2 = amortizeQueue gv2 l), (Queue l gv2 = amortizeQueue gv2 gv2), (Queue gv2 l = amortizeQueue l l), (Queue gv2 l = amortizeQueue l gv2), (Queue gv2 l = amortizeQueue gv2 l), (Queue gv2 l = amortizeQueue gv2 gv2), (Queue gv2 gv2 = amortizeQueue l l), (Queue gv2 gv2 = amortizeQueue l gv2), (Queue gv2 gv2 = amortizeQueue gv2 l)
(Queue gv2 gv2 = amortizeQueue gv2 gv2), (None = Some l), (None = Some gv2)

Label: 7 (7)
(gv3 < gv3), (gv3 <= gv3), (gv3 = gv3), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (false = leb gv3 gv3), (true = leb gv3 gv3), (gv3 < len l)
(gv3 < len gv2), (len l < gv3), (len l < len gv2), (len gv2 < gv3), (len gv2 < len l), (gv3 <= len l), (gv3 <= len gv2), (len l <= gv3), (len l <= len gv2), (len gv2 <= gv3)
(len gv2 <= len l), (~ gv3 < gv3), (~ gv3 <= gv3), (gv3 <> gv3), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (Cons gv3 l = l), (Cons gv3 l = gv2)
(Cons gv3 l = rev l), (Cons gv3 l = rev gv2), (Cons gv3 l = app l l), (Cons gv3 l = app l gv2), (Cons gv3 l = app gv2 l), (Cons gv3 l = app gv2 gv2), (Cons gv3 gv2 = l), (Cons gv3 gv2 = gv2), (Cons gv3 gv2 = rev l), (Cons gv3 gv2 = rev gv2)
(Cons gv3 gv2 = app l l), (Cons gv3 gv2 = app l gv2), (Cons gv3 gv2 = app gv2 l), (Cons gv3 gv2 = app gv2 gv2), (rev l = l), (rev l = gv2), (rev l = app l l), (rev l = app l gv2), (rev l = app gv2 l), (rev l = app gv2 gv2)
(rev gv2 = l), (rev gv2 = gv2), (rev gv2 = app l l), (rev gv2 = app l gv2), (rev gv2 = app gv2 l), (rev gv2 = app gv2 gv2), (app l l = l), (app l l = gv2), (app l gv2 = l), (app l gv2 = gv2)
(app gv2 l = l), (app gv2 l = gv2), (app gv2 gv2 = l), (app gv2 gv2 = gv2), (Nil = Cons gv3 l), (Nil = Cons gv3 gv2), (Nil = rev l), (Nil = rev gv2), (Nil = app l l), (Nil = app l gv2)
(Nil = app gv2 l), (Nil = app gv2 gv2), (None = Some gv3), (len l = gv3), (len gv2 = gv3), (Queue l l = amortizeQueue l l), (Queue l l = amortizeQueue l gv2), (Queue l l = amortizeQueue gv2 l), (Queue l l = amortizeQueue gv2 gv2), (Queue l gv2 = amortizeQueue l l)
(Queue l gv2 = amortizeQueue l gv2), (Queue l gv2 = amortizeQueue gv2 l), (Queue l gv2 = amortizeQueue gv2 gv2), (Queue gv2 l = amortizeQueue l l), (Queue gv2 l = amortizeQueue l gv2), (Queue gv2 l = amortizeQueue gv2 l), (Queue gv2 l = amortizeQueue gv2 gv2), (Queue gv2 gv2 = amortizeQueue l l), (Queue gv2 gv2 = amortizeQueue l gv2), (Queue gv2 gv2 = amortizeQueue gv2 l)
(Queue gv2 gv2 = amortizeQueue gv2 gv2), (None = Some l), (None = Some gv2)

Label: 8 (8)
(gv4 < gv4), (gv4 <= gv4), (gv4 = gv4), (l = l), (l = gv2), (gv2 = l), (gv2 = gv2), (false = leb gv4 gv4), (true = leb gv4 gv4), (gv4 < len l)
(gv4 < len gv2), (len l < gv4), (len l < len gv2), (len gv2 < gv4), (len gv2 < len l), (gv4 <= len l), (gv4 <= len gv2), (len l <= gv4), (len l <= len gv2), (len gv2 <= gv4)
(len gv2 <= len l), (~ gv4 < gv4), (~ gv4 <= gv4), (gv4 <> gv4), (l <> l), (l <> gv2), (gv2 <> l), (gv2 <> gv2), (Cons gv4 l = l), (Cons gv4 l = gv2)
(Cons gv4 l = rev l), (Cons gv4 l = rev gv2), (Cons gv4 l = app l l), (Cons gv4 l = app l gv2), (Cons gv4 l = app gv2 l), (Cons gv4 l = app gv2 gv2), (Cons gv4 gv2 = l), (Cons gv4 gv2 = gv2), (Cons gv4 gv2 = rev l), (Cons gv4 gv2 = rev gv2)
(Cons gv4 gv2 = app l l), (Cons gv4 gv2 = app l gv2), (Cons gv4 gv2 = app gv2 l), (Cons gv4 gv2 = app gv2 gv2), (rev l = l), (rev l = gv2), (rev l = app l l), (rev l = app l gv2), (rev l = app gv2 l), (rev l = app gv2 gv2)
(rev gv2 = l), (rev gv2 = gv2), (rev gv2 = app l l), (rev gv2 = app l gv2), (rev gv2 = app gv2 l), (rev gv2 = app gv2 gv2), (app l l = l), (app l l = gv2), (app l gv2 = l), (app l gv2 = gv2)
(app gv2 l = l), (app gv2 l = gv2), (app gv2 gv2 = l), (app gv2 gv2 = gv2), (Nil = Cons gv4 l), (Nil = Cons gv4 gv2), (Nil = rev l), (Nil = rev gv2), (Nil = app l l), (Nil = app l gv2)
(Nil = app gv2 l), (Nil = app gv2 gv2), (None = Some gv4), (len l = gv4), (len gv2 = gv4), (Queue l l = amortizeQueue l l), (Queue l l = amortizeQueue l gv2), (Queue l l = amortizeQueue gv2 l), (Queue l l = amortizeQueue gv2 gv2), (Queue l gv2 = amortizeQueue l l)
(Queue l gv2 = amortizeQueue l gv2), (Queue l gv2 = amortizeQueue gv2 l), (Queue l gv2 = amortizeQueue gv2 gv2), (Queue gv2 l = amortizeQueue l l), (Queue gv2 l = amortizeQueue l gv2), (Queue gv2 l = amortizeQueue gv2 l), (Queue gv2 l = amortizeQueue gv2 gv2), (Queue gv2 gv2 = amortizeQueue l l), (Queue gv2 gv2 = amortizeQueue l gv2), (Queue gv2 gv2 = amortizeQueue gv2 l)
(Queue gv2 gv2 = amortizeQueue gv2 gv2), (None = Some l), (None = Some gv2)

Label: 9 (9)
(gv6 < gv6), (gv6 < gv3), (gv3 < gv6), (gv3 < gv3), (gv6 <= gv6), (gv6 <= gv3), (gv3 <= gv6), (gv3 <= gv3), (gv6 = gv6), (gv6 = gv3)
(gv3 = gv6), (gv3 = gv3), (l = l), (false = leb gv6 gv6), (false = leb gv6 gv3), (false = leb gv3 gv6), (false = leb gv3 gv3), (true = leb gv6 gv6), (true = leb gv6 gv3), (true = leb gv3 gv6)
(true = leb gv3 gv3), (gv6 < len l), (gv3 < len l), (len l < gv6), (len l < gv3), (gv6 <= len l), (gv3 <= len l), (len l <= gv6), (len l <= gv3), (~ gv6 < gv6)
(~ gv6 < gv3), (~ gv3 < gv6), (~ gv3 < gv3), (~ gv6 <= gv6), (~ gv6 <= gv3), (~ gv3 <= gv6), (~ gv3 <= gv3), (gv6 <> gv6), (gv6 <> gv3), (gv3 <> gv6)
(gv3 <> gv3), (l <> l), (Cons gv6 l = l), (Cons gv6 l = rev l), (Cons gv6 l = app l l), (Cons gv3 l = l), (Cons gv3 l = rev l), (Cons gv3 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv6 l), (Nil = Cons gv3 l), (Nil = rev l), (Nil = app l l), (None = Some gv6), (None = Some gv3), (len l = gv6), (len l = gv3), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 10 (10)
(gv6 < gv6), (gv6 < gv0), (gv0 < gv6), (gv0 < gv0), (gv6 <= gv6), (gv6 <= gv0), (gv0 <= gv6), (gv0 <= gv0), (l = l), (gv6 = gv6)
(gv6 = gv0), (gv0 = gv6), (gv0 = gv0), (false = leb gv6 gv6), (false = leb gv6 gv0), (false = leb gv0 gv6), (false = leb gv0 gv0), (true = leb gv6 gv6), (true = leb gv6 gv0), (true = leb gv0 gv6)
(true = leb gv0 gv0), (gv6 < len l), (gv0 < len l), (len l < gv6), (len l < gv0), (gv6 <= len l), (gv0 <= len l), (len l <= gv6), (len l <= gv0), (~ gv6 < gv6)
(~ gv6 < gv0), (~ gv0 < gv6), (~ gv0 < gv0), (~ gv6 <= gv6), (~ gv6 <= gv0), (~ gv0 <= gv6), (~ gv0 <= gv0), (l <> l), (gv6 <> gv6), (gv6 <> gv0)
(gv0 <> gv6), (gv0 <> gv0), (Cons gv6 l = l), (Cons gv6 l = rev l), (Cons gv6 l = app l l), (Cons gv0 l = l), (Cons gv0 l = rev l), (Cons gv0 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv6 l), (Nil = Cons gv0 l), (Nil = rev l), (Nil = app l l), (None = Some gv6), (None = Some gv0), (len l = gv6), (len l = gv0), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 11 (11)
(gv6 < gv6), (gv6 < gv4), (gv4 < gv6), (gv4 < gv4), (gv6 <= gv6), (gv6 <= gv4), (gv4 <= gv6), (gv4 <= gv4), (gv6 = gv6), (gv6 = gv4)
(gv4 = gv6), (gv4 = gv4), (l = l), (false = leb gv6 gv6), (false = leb gv6 gv4), (false = leb gv4 gv6), (false = leb gv4 gv4), (true = leb gv6 gv6), (true = leb gv6 gv4), (true = leb gv4 gv6)
(true = leb gv4 gv4), (gv6 < len l), (gv4 < len l), (len l < gv6), (len l < gv4), (gv6 <= len l), (gv4 <= len l), (len l <= gv6), (len l <= gv4), (~ gv6 < gv6)
(~ gv6 < gv4), (~ gv4 < gv6), (~ gv4 < gv4), (~ gv6 <= gv6), (~ gv6 <= gv4), (~ gv4 <= gv6), (~ gv4 <= gv4), (gv6 <> gv6), (gv6 <> gv4), (gv4 <> gv6)
(gv4 <> gv4), (l <> l), (Cons gv6 l = l), (Cons gv6 l = rev l), (Cons gv6 l = app l l), (Cons gv4 l = l), (Cons gv4 l = rev l), (Cons gv4 l = app l l), (rev l = l), (rev l = app l l)
(app l l = l), (Nil = Cons gv6 l), (Nil = Cons gv4 l), (Nil = rev l), (Nil = app l l), (None = Some gv6), (None = Some gv4), (len l = gv6), (len l = gv4), (Queue l l = amortizeQueue l l)
(None = Some l)

Label: 12 (12)
(gv4 < gv4), (gv4 <= gv4), (gv4 = gv4), (l = l), (false = leb gv4 gv4), (true = leb gv4 gv4), (gv4 < len l), (len l < gv4), (gv4 <= len l), (len l <= gv4)
(~ gv4 < gv4), (~ gv4 <= gv4), (gv4 <> gv4), (l <> l), (Cons gv4 l = l), (Cons gv4 l = rev l), (Cons gv4 l = app l l), (rev l = l), (rev l = app l l), (app l l = l)
(Nil = Cons gv4 l), (Nil = rev l), (Nil = app l l), (None = Some gv4), (len l = gv4), (Queue l l = amortizeQueue l l), (None = Some l)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 144.579 seconds


Label: 0 (0)

Label: 1 (1)

Label: 2 (2)

Label: 3 (3)

Label: 4 (4)

Label: 5 (5)

Label: 6 (6)

Label: 7 (7)

Label: 8 (8)

Label: 9 (9)

Label: 10 (10)

Label: 11 (11)

Label: 12 (12)


------------------------------ ALL RESULTS ------------------------------
1. (gv1 = gv6 -> gv1 + 1 = S gv6)

2. (gv1 = len l -> gv1 + 1 = S (len l))

3. (len gv2 = gv6 -> len gv2 + 1 = S gv6)

4. (len gv2 = len l -> len gv2 + 1 = S (len l))

5. (len (rev l) = gv6 -> len (rev l) + 1 = S gv6)

6. (len (rev l) + 1 = S (len l))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 150.827 seconds

Number of Result Pairs Returned: 6

1. (gv1 = gv6 -> gv1 + 1 = S gv6)

2. (gv1 = len l -> gv1 + 1 = S (len l))

3. (len gv2 = gv6 -> len gv2 + 1 = S gv6)

4. (len gv2 = len l -> len gv2 + 1 = S (len l))

5. (len (rev l) = gv6 -> len (rev l) + 1 = S gv6)
