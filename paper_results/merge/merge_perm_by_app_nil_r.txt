Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall l2 : list nat, Permutation (l1 ++ l2) (merge l1 l2))

----------------------------------
Goal: (Permutation (a :: l1 ++ []) (a :: l1))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 2.132 seconds

gv1 : (list nat) = (l1 ++ [])
gv3 : (list nat) = (a :: l1)
gv2 : (list nat) = []
gv0 : (list nat) = (a :: l1 ++ [])


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 24.632 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (Permutation (a :: l1 ++ []) (a :: l1))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- ([] = gv2)

----------------------------------
Goal: (Permutation (a :: l1 ++ gv2) (a :: l1))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (a :: l1 ++ [] = gv0)

----------------------------------
Goal: (Permutation gv0 (a :: l1))
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (a :: l1 = gv3)

----------------------------------
Goal: (Permutation (a :: l1 ++ []) gv3)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (l1 ++ [] = gv1)

----------------------------------
Goal: (Permutation (a :: gv1) (a :: l1))
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 24.769 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 24.948 seconds


Label: 0 (0)
(a <=* gv2), (a <=* l1), (sorted gv2), (sorted l1), (Permutation gv2 gv2), (Permutation gv2 l1), (Permutation l1 gv2), (Permutation l1 l1), (In a gv2), (In a l1)
(a < a), (a <= a), (gv2 = gv2), (gv2 = l1), (l1 = gv2), (l1 = l1), (a = a), (a <=* a :: gv2), (a <=* a :: l1), (a <=* merge gv2 gv2)
(a <=* merge gv2 l1), (a <=* merge l1 gv2), (a <=* merge l1 l1), (a <=* gv2 ++ gv2), (a <=* gv2 ++ l1), (a <=* l1 ++ gv2), (a <=* l1 ++ l1), (a <=* []), (length gv2 <=* gv2), (length gv2 <=* l1)
(length gv2 <=* a :: gv2), (length gv2 <=* a :: l1), (length gv2 <=* merge gv2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l1 l1), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* l1 ++ gv2), (length gv2 <=* l1 ++ l1)
(length gv2 <=* []), (length l1 <=* gv2), (length l1 <=* l1), (length l1 <=* a :: gv2), (length l1 <=* a :: l1), (length l1 <=* merge gv2 gv2), (length l1 <=* merge gv2 l1), (length l1 <=* merge l1 gv2), (length l1 <=* merge l1 l1), (length l1 <=* gv2 ++ gv2)
(length l1 <=* gv2 ++ l1), (length l1 <=* l1 ++ gv2), (length l1 <=* l1 ++ l1), (length l1 <=* []), (sorted (a :: gv2)), (sorted (a :: l1)), (sorted (merge gv2 gv2)), (sorted (merge gv2 l1)), (sorted (merge l1 gv2)), (sorted (merge l1 l1))
(sorted (gv2 ++ gv2)), (sorted (gv2 ++ l1)), (sorted (l1 ++ gv2)), (sorted (l1 ++ l1)), (sorted []), (Permutation gv2 (a :: gv2)), (Permutation gv2 (a :: l1)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge l1 gv2))
(Permutation gv2 (merge l1 l1)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l1 ++ l1)), (Permutation gv2 []), (Permutation l1 (a :: gv2)), (Permutation l1 (a :: l1)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (merge gv2 l1))
(Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (gv2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (l1 ++ gv2)), (Permutation l1 (l1 ++ l1)), (Permutation l1 []), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) (a :: l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (merge gv2 l1)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) []), (Permutation (a :: l1) gv2)
(Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (l1 ++ gv2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (a :: l1) []), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (merge gv2 l1)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1))
(Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) []), (Permutation (merge gv2 l1) gv2), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l1 l1))
(Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) []), (Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) l1), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (merge gv2 gv2))
(Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge l1 l1)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) []), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (merge gv2 l1)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (gv2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (gv2 ++ gv2) gv2)
(Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1))
(Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (merge gv2 l1)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (gv2 ++ gv2))
(Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) []), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) (a :: gv2)), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge l1 gv2))
(Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (gv2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) []), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (merge gv2 gv2))
(Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ gv2)), (Permutation (l1 ++ l1) []), (Permutation [] gv2), (Permutation [] l1), (Permutation [] (a :: gv2))
(Permutation [] (a :: l1)), (Permutation [] (merge gv2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l1 l1)), (Permutation [] (gv2 ++ gv2)), (Permutation [] (gv2 ++ l1)), (Permutation [] (l1 ++ gv2)), (Permutation [] (l1 ++ l1)), (In a (a :: gv2))
(In a (a :: l1)), (In a (merge gv2 gv2)), (In a (merge gv2 l1)), (In a (merge l1 gv2)), (In a (merge l1 l1)), (In a (gv2 ++ gv2)), (In a (gv2 ++ l1)), (In a (l1 ++ gv2)), (In a (l1 ++ l1)), (In (length gv2) gv2)
(In (length gv2) l1), (In (length gv2) (a :: gv2)), (In (length gv2) (a :: l1)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (gv2 ++ gv2)), (In (length gv2) (gv2 ++ l1)), (In (length gv2) (l1 ++ gv2))
(In (length gv2) (l1 ++ l1)), (In (length l1) gv2), (In (length l1) l1), (In (length l1) (a :: gv2)), (In (length l1) (a :: l1)), (In (length l1) (merge gv2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge l1 gv2)), (In (length l1) (merge l1 l1)), (In (length l1) (gv2 ++ gv2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l1 ++ l1)), (a < length gv2), (a < length l1), (length gv2 < a), (length gv2 < length l1), (length l1 < a), (length l1 < length gv2), (a <= length gv2)
(a <= length l1), (length gv2 <= a), (length gv2 <= length l1), (length l1 <= a), (length l1 <= length gv2), (~ a <=* gv2), (~ a <=* l1), (~ sorted gv2), (~ sorted l1), (~ Permutation gv2 gv2)
(~ Permutation gv2 l1), (~ Permutation l1 gv2), (~ Permutation l1 l1), (~ In a gv2), (~ In a l1), (~ a < a), (~ a <= a), (gv2 <> gv2), (gv2 <> l1), (l1 <> gv2)
(l1 <> l1), (a <> a), (None = Some gv2), (None = Some l1), (a :: gv2 = gv2), (a :: gv2 = l1), (a :: gv2 = merge gv2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge l1 gv2), (a :: gv2 = merge l1 l1)
(a :: gv2 = gv2 ++ gv2), (a :: gv2 = gv2 ++ l1), (a :: gv2 = l1 ++ gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = []), (a :: l1 = gv2), (a :: l1 = l1), (a :: l1 = merge gv2 gv2), (a :: l1 = merge gv2 l1), (a :: l1 = merge l1 gv2)
(a :: l1 = merge l1 l1), (a :: l1 = gv2 ++ gv2), (a :: l1 = gv2 ++ l1), (a :: l1 = l1 ++ gv2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = gv2 ++ gv2), (merge gv2 gv2 = gv2 ++ l1)
(merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 l1 = gv2), (merge gv2 l1 = l1), (merge gv2 l1 = gv2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l1 ++ l1), (merge l1 gv2 = gv2), (merge l1 gv2 = l1)
(merge l1 gv2 = gv2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l1 ++ l1), (merge l1 l1 = gv2), (merge l1 l1 = l1), (merge l1 l1 = gv2 ++ gv2), (merge l1 l1 = gv2 ++ l1), (merge l1 l1 = l1 ++ gv2), (merge l1 l1 = l1 ++ l1)
(gv2 ++ gv2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ l1 = gv2), (gv2 ++ l1 = l1), (l1 ++ gv2 = gv2), (l1 ++ gv2 = l1), (l1 ++ l1 = gv2), (l1 ++ l1 = l1), ([] = gv2), ([] = l1)
([] = merge gv2 gv2), ([] = merge gv2 l1), ([] = merge l1 gv2), ([] = merge l1 l1), ([] = gv2 ++ gv2), ([] = gv2 ++ l1), ([] = l1 ++ gv2), ([] = l1 ++ l1), (None = Some a), ((gv2, gv2) = split gv2)
((gv2, gv2) = split l1), ((gv2, l1) = split gv2), ((gv2, l1) = split l1), ((l1, gv2) = split gv2), ((l1, gv2) = split l1), ((l1, l1) = split gv2), ((l1, l1) = split l1), (length gv2 = a), (length l1 = a)

Label: 1 (1)
(a <=* l1), (a <=* gv0), (sorted l1), (sorted gv0), (Permutation l1 l1), (Permutation l1 gv0), (Permutation gv0 l1), (Permutation gv0 gv0), (In a l1), (In a gv0)
(a < a), (a <= a), (a = a), (l1 = l1), (l1 = gv0), (gv0 = l1), (gv0 = gv0), (a <=* a :: l1), (a <=* a :: gv0), (a <=* merge l1 l1)
(a <=* merge l1 gv0), (a <=* merge gv0 l1), (a <=* merge gv0 gv0), (a <=* l1 ++ l1), (a <=* l1 ++ gv0), (a <=* gv0 ++ l1), (a <=* gv0 ++ gv0), (a <=* []), (length l1 <=* l1), (length l1 <=* gv0)
(length l1 <=* a :: l1), (length l1 <=* a :: gv0), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 gv0), (length l1 <=* merge gv0 l1), (length l1 <=* merge gv0 gv0), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ gv0), (length l1 <=* gv0 ++ l1), (length l1 <=* gv0 ++ gv0)
(length l1 <=* []), (length gv0 <=* l1), (length gv0 <=* gv0), (length gv0 <=* a :: l1), (length gv0 <=* a :: gv0), (length gv0 <=* merge l1 l1), (length gv0 <=* merge l1 gv0), (length gv0 <=* merge gv0 l1), (length gv0 <=* merge gv0 gv0), (length gv0 <=* l1 ++ l1)
(length gv0 <=* l1 ++ gv0), (length gv0 <=* gv0 ++ l1), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* []), (sorted (a :: l1)), (sorted (a :: gv0)), (sorted (merge l1 l1)), (sorted (merge l1 gv0)), (sorted (merge gv0 l1)), (sorted (merge gv0 gv0))
(sorted (l1 ++ l1)), (sorted (l1 ++ gv0)), (sorted (gv0 ++ l1)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: gv0)), (Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 gv0)), (Permutation l1 (merge gv0 l1))
(Permutation l1 (merge gv0 gv0)), (Permutation l1 (l1 ++ l1)), (Permutation l1 (l1 ++ gv0)), (Permutation l1 (gv0 ++ l1)), (Permutation l1 (gv0 ++ gv0)), (Permutation l1 []), (Permutation gv0 (a :: l1)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (merge l1 l1)), (Permutation gv0 (merge l1 gv0))
(Permutation gv0 (merge gv0 l1)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (l1 ++ l1)), (Permutation gv0 (l1 ++ gv0)), (Permutation gv0 (gv0 ++ l1)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a :: l1) l1), (Permutation (a :: l1) gv0), (Permutation (a :: l1) (a :: gv0))
(Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (merge l1 gv0)), (Permutation (a :: l1) (merge gv0 l1)), (Permutation (a :: l1) (merge gv0 gv0)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ gv0)), (Permutation (a :: l1) (gv0 ++ l1)), (Permutation (a :: l1) (gv0 ++ gv0)), (Permutation (a :: l1) []), (Permutation (a :: gv0) l1)
(Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a :: l1)), (Permutation (a :: gv0) (merge l1 l1)), (Permutation (a :: gv0) (merge l1 gv0)), (Permutation (a :: gv0) (merge gv0 l1)), (Permutation (a :: gv0) (merge gv0 gv0)), (Permutation (a :: gv0) (l1 ++ l1)), (Permutation (a :: gv0) (l1 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l1)), (Permutation (a :: gv0) (gv0 ++ gv0))
(Permutation (a :: gv0) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv0), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: gv0)), (Permutation (merge l1 l1) (merge l1 gv0)), (Permutation (merge l1 l1) (merge gv0 l1)), (Permutation (merge l1 l1) (merge gv0 gv0)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv0))
(Permutation (merge l1 l1) (gv0 ++ l1)), (Permutation (merge l1 l1) (gv0 ++ gv0)), (Permutation (merge l1 l1) []), (Permutation (merge l1 gv0) l1), (Permutation (merge l1 gv0) gv0), (Permutation (merge l1 gv0) (a :: l1)), (Permutation (merge l1 gv0) (a :: gv0)), (Permutation (merge l1 gv0) (merge l1 l1)), (Permutation (merge l1 gv0) (merge gv0 l1)), (Permutation (merge l1 gv0) (merge gv0 gv0))
(Permutation (merge l1 gv0) (l1 ++ l1)), (Permutation (merge l1 gv0) (l1 ++ gv0)), (Permutation (merge l1 gv0) (gv0 ++ l1)), (Permutation (merge l1 gv0) (gv0 ++ gv0)), (Permutation (merge l1 gv0) []), (Permutation (merge gv0 l1) l1), (Permutation (merge gv0 l1) gv0), (Permutation (merge gv0 l1) (a :: l1)), (Permutation (merge gv0 l1) (a :: gv0)), (Permutation (merge gv0 l1) (merge l1 l1))
(Permutation (merge gv0 l1) (merge l1 gv0)), (Permutation (merge gv0 l1) (merge gv0 gv0)), (Permutation (merge gv0 l1) (l1 ++ l1)), (Permutation (merge gv0 l1) (l1 ++ gv0)), (Permutation (merge gv0 l1) (gv0 ++ l1)), (Permutation (merge gv0 l1) (gv0 ++ gv0)), (Permutation (merge gv0 l1) []), (Permutation (merge gv0 gv0) l1), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (a :: l1))
(Permutation (merge gv0 gv0) (a :: gv0)), (Permutation (merge gv0 gv0) (merge l1 l1)), (Permutation (merge gv0 gv0) (merge l1 gv0)), (Permutation (merge gv0 gv0) (merge gv0 l1)), (Permutation (merge gv0 gv0) (l1 ++ l1)), (Permutation (merge gv0 gv0) (l1 ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ l1)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (l1 ++ l1) l1)
(Permutation (l1 ++ l1) gv0), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: gv0)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 gv0)), (Permutation (l1 ++ l1) (merge gv0 l1)), (Permutation (l1 ++ l1) (merge gv0 gv0)), (Permutation (l1 ++ l1) (l1 ++ gv0)), (Permutation (l1 ++ l1) (gv0 ++ l1)), (Permutation (l1 ++ l1) (gv0 ++ gv0))
(Permutation (l1 ++ l1) []), (Permutation (l1 ++ gv0) l1), (Permutation (l1 ++ gv0) gv0), (Permutation (l1 ++ gv0) (a :: l1)), (Permutation (l1 ++ gv0) (a :: gv0)), (Permutation (l1 ++ gv0) (merge l1 l1)), (Permutation (l1 ++ gv0) (merge l1 gv0)), (Permutation (l1 ++ gv0) (merge gv0 l1)), (Permutation (l1 ++ gv0) (merge gv0 gv0)), (Permutation (l1 ++ gv0) (l1 ++ l1))
(Permutation (l1 ++ gv0) (gv0 ++ l1)), (Permutation (l1 ++ gv0) (gv0 ++ gv0)), (Permutation (l1 ++ gv0) []), (Permutation (gv0 ++ l1) l1), (Permutation (gv0 ++ l1) gv0), (Permutation (gv0 ++ l1) (a :: l1)), (Permutation (gv0 ++ l1) (a :: gv0)), (Permutation (gv0 ++ l1) (merge l1 l1)), (Permutation (gv0 ++ l1) (merge l1 gv0)), (Permutation (gv0 ++ l1) (merge gv0 l1))
(Permutation (gv0 ++ l1) (merge gv0 gv0)), (Permutation (gv0 ++ l1) (l1 ++ l1)), (Permutation (gv0 ++ l1) (l1 ++ gv0)), (Permutation (gv0 ++ l1) (gv0 ++ gv0)), (Permutation (gv0 ++ l1) []), (Permutation (gv0 ++ gv0) l1), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: l1)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (merge l1 l1))
(Permutation (gv0 ++ gv0) (merge l1 gv0)), (Permutation (gv0 ++ gv0) (merge gv0 l1)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (l1 ++ l1)), (Permutation (gv0 ++ gv0) (l1 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l1)), (Permutation (gv0 ++ gv0) []), (Permutation [] l1), (Permutation [] gv0), (Permutation [] (a :: l1))
(Permutation [] (a :: gv0)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 gv0)), (Permutation [] (merge gv0 l1)), (Permutation [] (merge gv0 gv0)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ gv0)), (Permutation [] (gv0 ++ l1)), (Permutation [] (gv0 ++ gv0)), (In a (a :: l1))
(In a (a :: gv0)), (In a (merge l1 l1)), (In a (merge l1 gv0)), (In a (merge gv0 l1)), (In a (merge gv0 gv0)), (In a (l1 ++ l1)), (In a (l1 ++ gv0)), (In a (gv0 ++ l1)), (In a (gv0 ++ gv0)), (In (length l1) l1)
(In (length l1) gv0), (In (length l1) (a :: l1)), (In (length l1) (a :: gv0)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 gv0)), (In (length l1) (merge gv0 l1)), (In (length l1) (merge gv0 gv0)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ gv0)), (In (length l1) (gv0 ++ l1))
(In (length l1) (gv0 ++ gv0)), (In (length gv0) l1), (In (length gv0) gv0), (In (length gv0) (a :: l1)), (In (length gv0) (a :: gv0)), (In (length gv0) (merge l1 l1)), (In (length gv0) (merge l1 gv0)), (In (length gv0) (merge gv0 l1)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (l1 ++ l1))
(In (length gv0) (l1 ++ gv0)), (In (length gv0) (gv0 ++ l1)), (In (length gv0) (gv0 ++ gv0)), (a < length l1), (a < length gv0), (length l1 < a), (length l1 < length gv0), (length gv0 < a), (length gv0 < length l1), (a <= length l1)
(a <= length gv0), (length l1 <= a), (length l1 <= length gv0), (length gv0 <= a), (length gv0 <= length l1), (~ a <=* l1), (~ a <=* gv0), (~ sorted l1), (~ sorted gv0), (~ Permutation l1 l1)
(~ Permutation l1 gv0), (~ Permutation gv0 l1), (~ Permutation gv0 gv0), (~ In a l1), (~ In a gv0), (~ a < a), (~ a <= a), (a <> a), (l1 <> l1), (l1 <> gv0)
(gv0 <> l1), (gv0 <> gv0), (None = Some l1), (None = Some gv0), (a :: l1 = l1), (a :: l1 = gv0), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 gv0), (a :: l1 = merge gv0 l1), (a :: l1 = merge gv0 gv0)
(a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ gv0), (a :: l1 = gv0 ++ l1), (a :: l1 = gv0 ++ gv0), (a :: l1 = []), (a :: gv0 = l1), (a :: gv0 = gv0), (a :: gv0 = merge l1 l1), (a :: gv0 = merge l1 gv0), (a :: gv0 = merge gv0 l1)
(a :: gv0 = merge gv0 gv0), (a :: gv0 = l1 ++ l1), (a :: gv0 = l1 ++ gv0), (a :: gv0 = gv0 ++ l1), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (merge l1 l1 = l1), (merge l1 l1 = gv0), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ gv0)
(merge l1 l1 = gv0 ++ l1), (merge l1 l1 = gv0 ++ gv0), (merge l1 gv0 = l1), (merge l1 gv0 = gv0), (merge l1 gv0 = l1 ++ l1), (merge l1 gv0 = l1 ++ gv0), (merge l1 gv0 = gv0 ++ l1), (merge l1 gv0 = gv0 ++ gv0), (merge gv0 l1 = l1), (merge gv0 l1 = gv0)
(merge gv0 l1 = l1 ++ l1), (merge gv0 l1 = l1 ++ gv0), (merge gv0 l1 = gv0 ++ l1), (merge gv0 l1 = gv0 ++ gv0), (merge gv0 gv0 = l1), (merge gv0 gv0 = gv0), (merge gv0 gv0 = l1 ++ l1), (merge gv0 gv0 = l1 ++ gv0), (merge gv0 gv0 = gv0 ++ l1), (merge gv0 gv0 = gv0 ++ gv0)
(l1 ++ l1 = l1), (l1 ++ l1 = gv0), (l1 ++ gv0 = l1), (l1 ++ gv0 = gv0), (gv0 ++ l1 = l1), (gv0 ++ l1 = gv0), (gv0 ++ gv0 = l1), (gv0 ++ gv0 = gv0), ([] = l1), ([] = gv0)
([] = merge l1 l1), ([] = merge l1 gv0), ([] = merge gv0 l1), ([] = merge gv0 gv0), ([] = l1 ++ l1), ([] = l1 ++ gv0), ([] = gv0 ++ l1), ([] = gv0 ++ gv0), (None = Some a), ((l1, l1) = split l1)
((l1, l1) = split gv0), ((l1, gv0) = split l1), ((l1, gv0) = split gv0), ((gv0, l1) = split l1), ((gv0, l1) = split gv0), ((gv0, gv0) = split l1), ((gv0, gv0) = split gv0), (length l1 = a), (length gv0 = a)

Label: 2 (2)
(a <=* gv3), (a <=* l1), (sorted gv3), (sorted l1), (Permutation gv3 gv3), (Permutation gv3 l1), (Permutation l1 gv3), (Permutation l1 l1), (In a gv3), (In a l1)
(a < a), (a <= a), (gv3 = gv3), (gv3 = l1), (l1 = gv3), (l1 = l1), (a = a), (a <=* a :: gv3), (a <=* a :: l1), (a <=* merge gv3 gv3)
(a <=* merge gv3 l1), (a <=* merge l1 gv3), (a <=* merge l1 l1), (a <=* gv3 ++ gv3), (a <=* gv3 ++ l1), (a <=* l1 ++ gv3), (a <=* l1 ++ l1), (a <=* []), (length gv3 <=* gv3), (length gv3 <=* l1)
(length gv3 <=* a :: gv3), (length gv3 <=* a :: l1), (length gv3 <=* merge gv3 gv3), (length gv3 <=* merge gv3 l1), (length gv3 <=* merge l1 gv3), (length gv3 <=* merge l1 l1), (length gv3 <=* gv3 ++ gv3), (length gv3 <=* gv3 ++ l1), (length gv3 <=* l1 ++ gv3), (length gv3 <=* l1 ++ l1)
(length gv3 <=* []), (length l1 <=* gv3), (length l1 <=* l1), (length l1 <=* a :: gv3), (length l1 <=* a :: l1), (length l1 <=* merge gv3 gv3), (length l1 <=* merge gv3 l1), (length l1 <=* merge l1 gv3), (length l1 <=* merge l1 l1), (length l1 <=* gv3 ++ gv3)
(length l1 <=* gv3 ++ l1), (length l1 <=* l1 ++ gv3), (length l1 <=* l1 ++ l1), (length l1 <=* []), (sorted (a :: gv3)), (sorted (a :: l1)), (sorted (merge gv3 gv3)), (sorted (merge gv3 l1)), (sorted (merge l1 gv3)), (sorted (merge l1 l1))
(sorted (gv3 ++ gv3)), (sorted (gv3 ++ l1)), (sorted (l1 ++ gv3)), (sorted (l1 ++ l1)), (sorted []), (Permutation gv3 (a :: gv3)), (Permutation gv3 (a :: l1)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (merge gv3 l1)), (Permutation gv3 (merge l1 gv3))
(Permutation gv3 (merge l1 l1)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 (gv3 ++ l1)), (Permutation gv3 (l1 ++ gv3)), (Permutation gv3 (l1 ++ l1)), (Permutation gv3 []), (Permutation l1 (a :: gv3)), (Permutation l1 (a :: l1)), (Permutation l1 (merge gv3 gv3)), (Permutation l1 (merge gv3 l1))
(Permutation l1 (merge l1 gv3)), (Permutation l1 (merge l1 l1)), (Permutation l1 (gv3 ++ gv3)), (Permutation l1 (gv3 ++ l1)), (Permutation l1 (l1 ++ gv3)), (Permutation l1 (l1 ++ l1)), (Permutation l1 []), (Permutation (a :: gv3) gv3), (Permutation (a :: gv3) l1), (Permutation (a :: gv3) (a :: l1))
(Permutation (a :: gv3) (merge gv3 gv3)), (Permutation (a :: gv3) (merge gv3 l1)), (Permutation (a :: gv3) (merge l1 gv3)), (Permutation (a :: gv3) (merge l1 l1)), (Permutation (a :: gv3) (gv3 ++ gv3)), (Permutation (a :: gv3) (gv3 ++ l1)), (Permutation (a :: gv3) (l1 ++ gv3)), (Permutation (a :: gv3) (l1 ++ l1)), (Permutation (a :: gv3) []), (Permutation (a :: l1) gv3)
(Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: gv3)), (Permutation (a :: l1) (merge gv3 gv3)), (Permutation (a :: l1) (merge gv3 l1)), (Permutation (a :: l1) (merge l1 gv3)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (gv3 ++ gv3)), (Permutation (a :: l1) (gv3 ++ l1)), (Permutation (a :: l1) (l1 ++ gv3)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (a :: l1) []), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) l1), (Permutation (merge gv3 gv3) (a :: gv3)), (Permutation (merge gv3 gv3) (a :: l1)), (Permutation (merge gv3 gv3) (merge gv3 l1)), (Permutation (merge gv3 gv3) (merge l1 gv3)), (Permutation (merge gv3 gv3) (merge l1 l1)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l1))
(Permutation (merge gv3 gv3) (l1 ++ gv3)), (Permutation (merge gv3 gv3) (l1 ++ l1)), (Permutation (merge gv3 gv3) []), (Permutation (merge gv3 l1) gv3), (Permutation (merge gv3 l1) l1), (Permutation (merge gv3 l1) (a :: gv3)), (Permutation (merge gv3 l1) (a :: l1)), (Permutation (merge gv3 l1) (merge gv3 gv3)), (Permutation (merge gv3 l1) (merge l1 gv3)), (Permutation (merge gv3 l1) (merge l1 l1))
(Permutation (merge gv3 l1) (gv3 ++ gv3)), (Permutation (merge gv3 l1) (gv3 ++ l1)), (Permutation (merge gv3 l1) (l1 ++ gv3)), (Permutation (merge gv3 l1) (l1 ++ l1)), (Permutation (merge gv3 l1) []), (Permutation (merge l1 gv3) gv3), (Permutation (merge l1 gv3) l1), (Permutation (merge l1 gv3) (a :: gv3)), (Permutation (merge l1 gv3) (a :: l1)), (Permutation (merge l1 gv3) (merge gv3 gv3))
(Permutation (merge l1 gv3) (merge gv3 l1)), (Permutation (merge l1 gv3) (merge l1 l1)), (Permutation (merge l1 gv3) (gv3 ++ gv3)), (Permutation (merge l1 gv3) (gv3 ++ l1)), (Permutation (merge l1 gv3) (l1 ++ gv3)), (Permutation (merge l1 gv3) (l1 ++ l1)), (Permutation (merge l1 gv3) []), (Permutation (merge l1 l1) gv3), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: gv3))
(Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (merge gv3 gv3)), (Permutation (merge l1 l1) (merge gv3 l1)), (Permutation (merge l1 l1) (merge l1 gv3)), (Permutation (merge l1 l1) (gv3 ++ gv3)), (Permutation (merge l1 l1) (gv3 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv3)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) l1), (Permutation (gv3 ++ gv3) (a :: gv3)), (Permutation (gv3 ++ gv3) (a :: l1)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l1)), (Permutation (gv3 ++ gv3) (merge l1 gv3)), (Permutation (gv3 ++ gv3) (merge l1 l1)), (Permutation (gv3 ++ gv3) (gv3 ++ l1)), (Permutation (gv3 ++ gv3) (l1 ++ gv3)), (Permutation (gv3 ++ gv3) (l1 ++ l1))
(Permutation (gv3 ++ gv3) []), (Permutation (gv3 ++ l1) gv3), (Permutation (gv3 ++ l1) l1), (Permutation (gv3 ++ l1) (a :: gv3)), (Permutation (gv3 ++ l1) (a :: l1)), (Permutation (gv3 ++ l1) (merge gv3 gv3)), (Permutation (gv3 ++ l1) (merge gv3 l1)), (Permutation (gv3 ++ l1) (merge l1 gv3)), (Permutation (gv3 ++ l1) (merge l1 l1)), (Permutation (gv3 ++ l1) (gv3 ++ gv3))
(Permutation (gv3 ++ l1) (l1 ++ gv3)), (Permutation (gv3 ++ l1) (l1 ++ l1)), (Permutation (gv3 ++ l1) []), (Permutation (l1 ++ gv3) gv3), (Permutation (l1 ++ gv3) l1), (Permutation (l1 ++ gv3) (a :: gv3)), (Permutation (l1 ++ gv3) (a :: l1)), (Permutation (l1 ++ gv3) (merge gv3 gv3)), (Permutation (l1 ++ gv3) (merge gv3 l1)), (Permutation (l1 ++ gv3) (merge l1 gv3))
(Permutation (l1 ++ gv3) (merge l1 l1)), (Permutation (l1 ++ gv3) (gv3 ++ gv3)), (Permutation (l1 ++ gv3) (gv3 ++ l1)), (Permutation (l1 ++ gv3) (l1 ++ l1)), (Permutation (l1 ++ gv3) []), (Permutation (l1 ++ l1) gv3), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: gv3)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (merge gv3 gv3))
(Permutation (l1 ++ l1) (merge gv3 l1)), (Permutation (l1 ++ l1) (merge l1 gv3)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (gv3 ++ gv3)), (Permutation (l1 ++ l1) (gv3 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ gv3)), (Permutation (l1 ++ l1) []), (Permutation [] gv3), (Permutation [] l1), (Permutation [] (a :: gv3))
(Permutation [] (a :: l1)), (Permutation [] (merge gv3 gv3)), (Permutation [] (merge gv3 l1)), (Permutation [] (merge l1 gv3)), (Permutation [] (merge l1 l1)), (Permutation [] (gv3 ++ gv3)), (Permutation [] (gv3 ++ l1)), (Permutation [] (l1 ++ gv3)), (Permutation [] (l1 ++ l1)), (In a (a :: gv3))
(In a (a :: l1)), (In a (merge gv3 gv3)), (In a (merge gv3 l1)), (In a (merge l1 gv3)), (In a (merge l1 l1)), (In a (gv3 ++ gv3)), (In a (gv3 ++ l1)), (In a (l1 ++ gv3)), (In a (l1 ++ l1)), (In (length gv3) gv3)
(In (length gv3) l1), (In (length gv3) (a :: gv3)), (In (length gv3) (a :: l1)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (merge gv3 l1)), (In (length gv3) (merge l1 gv3)), (In (length gv3) (merge l1 l1)), (In (length gv3) (gv3 ++ gv3)), (In (length gv3) (gv3 ++ l1)), (In (length gv3) (l1 ++ gv3))
(In (length gv3) (l1 ++ l1)), (In (length l1) gv3), (In (length l1) l1), (In (length l1) (a :: gv3)), (In (length l1) (a :: l1)), (In (length l1) (merge gv3 gv3)), (In (length l1) (merge gv3 l1)), (In (length l1) (merge l1 gv3)), (In (length l1) (merge l1 l1)), (In (length l1) (gv3 ++ gv3))
(In (length l1) (gv3 ++ l1)), (In (length l1) (l1 ++ gv3)), (In (length l1) (l1 ++ l1)), (a < length gv3), (a < length l1), (length gv3 < a), (length gv3 < length l1), (length l1 < a), (length l1 < length gv3), (a <= length gv3)
(a <= length l1), (length gv3 <= a), (length gv3 <= length l1), (length l1 <= a), (length l1 <= length gv3), (~ a <=* gv3), (~ a <=* l1), (~ sorted gv3), (~ sorted l1), (~ Permutation gv3 gv3)
(~ Permutation gv3 l1), (~ Permutation l1 gv3), (~ Permutation l1 l1), (~ In a gv3), (~ In a l1), (~ a < a), (~ a <= a), (gv3 <> gv3), (gv3 <> l1), (l1 <> gv3)
(l1 <> l1), (a <> a), (None = Some gv3), (None = Some l1), (a :: gv3 = gv3), (a :: gv3 = l1), (a :: gv3 = merge gv3 gv3), (a :: gv3 = merge gv3 l1), (a :: gv3 = merge l1 gv3), (a :: gv3 = merge l1 l1)
(a :: gv3 = gv3 ++ gv3), (a :: gv3 = gv3 ++ l1), (a :: gv3 = l1 ++ gv3), (a :: gv3 = l1 ++ l1), (a :: gv3 = []), (a :: l1 = gv3), (a :: l1 = l1), (a :: l1 = merge gv3 gv3), (a :: l1 = merge gv3 l1), (a :: l1 = merge l1 gv3)
(a :: l1 = merge l1 l1), (a :: l1 = gv3 ++ gv3), (a :: l1 = gv3 ++ l1), (a :: l1 = l1 ++ gv3), (a :: l1 = l1 ++ l1), (a :: l1 = []), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l1), (merge gv3 gv3 = gv3 ++ gv3), (merge gv3 gv3 = gv3 ++ l1)
(merge gv3 gv3 = l1 ++ gv3), (merge gv3 gv3 = l1 ++ l1), (merge gv3 l1 = gv3), (merge gv3 l1 = l1), (merge gv3 l1 = gv3 ++ gv3), (merge gv3 l1 = gv3 ++ l1), (merge gv3 l1 = l1 ++ gv3), (merge gv3 l1 = l1 ++ l1), (merge l1 gv3 = gv3), (merge l1 gv3 = l1)
(merge l1 gv3 = gv3 ++ gv3), (merge l1 gv3 = gv3 ++ l1), (merge l1 gv3 = l1 ++ gv3), (merge l1 gv3 = l1 ++ l1), (merge l1 l1 = gv3), (merge l1 l1 = l1), (merge l1 l1 = gv3 ++ gv3), (merge l1 l1 = gv3 ++ l1), (merge l1 l1 = l1 ++ gv3), (merge l1 l1 = l1 ++ l1)
(gv3 ++ gv3 = gv3), (gv3 ++ gv3 = l1), (gv3 ++ l1 = gv3), (gv3 ++ l1 = l1), (l1 ++ gv3 = gv3), (l1 ++ gv3 = l1), (l1 ++ l1 = gv3), (l1 ++ l1 = l1), ([] = gv3), ([] = l1)
([] = merge gv3 gv3), ([] = merge gv3 l1), ([] = merge l1 gv3), ([] = merge l1 l1), ([] = gv3 ++ gv3), ([] = gv3 ++ l1), ([] = l1 ++ gv3), ([] = l1 ++ l1), (None = Some a), ((gv3, gv3) = split gv3)
((gv3, gv3) = split l1), ((gv3, l1) = split gv3), ((gv3, l1) = split l1), ((l1, gv3) = split gv3), ((l1, gv3) = split l1), ((l1, l1) = split gv3), ((l1, l1) = split l1), (length gv3 = a), (length l1 = a)

Label: 3 (3)
(a <=* l1), (a <=* gv1), (sorted l1), (sorted gv1), (Permutation l1 l1), (Permutation l1 gv1), (Permutation gv1 l1), (Permutation gv1 gv1), (In a l1), (In a gv1)
(a < a), (a <= a), (l1 = l1), (l1 = gv1), (gv1 = l1), (gv1 = gv1), (a = a), (a <=* a :: l1), (a <=* a :: gv1), (a <=* merge l1 l1)
(a <=* merge l1 gv1), (a <=* merge gv1 l1), (a <=* merge gv1 gv1), (a <=* l1 ++ l1), (a <=* l1 ++ gv1), (a <=* gv1 ++ l1), (a <=* gv1 ++ gv1), (a <=* []), (length l1 <=* l1), (length l1 <=* gv1)
(length l1 <=* a :: l1), (length l1 <=* a :: gv1), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 gv1), (length l1 <=* merge gv1 l1), (length l1 <=* merge gv1 gv1), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ gv1), (length l1 <=* gv1 ++ l1), (length l1 <=* gv1 ++ gv1)
(length l1 <=* []), (length gv1 <=* l1), (length gv1 <=* gv1), (length gv1 <=* a :: l1), (length gv1 <=* a :: gv1), (length gv1 <=* merge l1 l1), (length gv1 <=* merge l1 gv1), (length gv1 <=* merge gv1 l1), (length gv1 <=* merge gv1 gv1), (length gv1 <=* l1 ++ l1)
(length gv1 <=* l1 ++ gv1), (length gv1 <=* gv1 ++ l1), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* []), (sorted (a :: l1)), (sorted (a :: gv1)), (sorted (merge l1 l1)), (sorted (merge l1 gv1)), (sorted (merge gv1 l1)), (sorted (merge gv1 gv1))
(sorted (l1 ++ l1)), (sorted (l1 ++ gv1)), (sorted (gv1 ++ l1)), (sorted (gv1 ++ gv1)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: gv1)), (Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 gv1)), (Permutation l1 (merge gv1 l1))
(Permutation l1 (merge gv1 gv1)), (Permutation l1 (l1 ++ l1)), (Permutation l1 (l1 ++ gv1)), (Permutation l1 (gv1 ++ l1)), (Permutation l1 (gv1 ++ gv1)), (Permutation l1 []), (Permutation gv1 (a :: l1)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (merge l1 l1)), (Permutation gv1 (merge l1 gv1))
(Permutation gv1 (merge gv1 l1)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (l1 ++ l1)), (Permutation gv1 (l1 ++ gv1)), (Permutation gv1 (gv1 ++ l1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a :: l1) l1), (Permutation (a :: l1) gv1), (Permutation (a :: l1) (a :: gv1))
(Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (merge l1 gv1)), (Permutation (a :: l1) (merge gv1 l1)), (Permutation (a :: l1) (merge gv1 gv1)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ gv1)), (Permutation (a :: l1) (gv1 ++ l1)), (Permutation (a :: l1) (gv1 ++ gv1)), (Permutation (a :: l1) []), (Permutation (a :: gv1) l1)
(Permutation (a :: gv1) gv1), (Permutation (a :: gv1) (a :: l1)), (Permutation (a :: gv1) (merge l1 l1)), (Permutation (a :: gv1) (merge l1 gv1)), (Permutation (a :: gv1) (merge gv1 l1)), (Permutation (a :: gv1) (merge gv1 gv1)), (Permutation (a :: gv1) (l1 ++ l1)), (Permutation (a :: gv1) (l1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ l1)), (Permutation (a :: gv1) (gv1 ++ gv1))
(Permutation (a :: gv1) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv1), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: gv1)), (Permutation (merge l1 l1) (merge l1 gv1)), (Permutation (merge l1 l1) (merge gv1 l1)), (Permutation (merge l1 l1) (merge gv1 gv1)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv1))
(Permutation (merge l1 l1) (gv1 ++ l1)), (Permutation (merge l1 l1) (gv1 ++ gv1)), (Permutation (merge l1 l1) []), (Permutation (merge l1 gv1) l1), (Permutation (merge l1 gv1) gv1), (Permutation (merge l1 gv1) (a :: l1)), (Permutation (merge l1 gv1) (a :: gv1)), (Permutation (merge l1 gv1) (merge l1 l1)), (Permutation (merge l1 gv1) (merge gv1 l1)), (Permutation (merge l1 gv1) (merge gv1 gv1))
(Permutation (merge l1 gv1) (l1 ++ l1)), (Permutation (merge l1 gv1) (l1 ++ gv1)), (Permutation (merge l1 gv1) (gv1 ++ l1)), (Permutation (merge l1 gv1) (gv1 ++ gv1)), (Permutation (merge l1 gv1) []), (Permutation (merge gv1 l1) l1), (Permutation (merge gv1 l1) gv1), (Permutation (merge gv1 l1) (a :: l1)), (Permutation (merge gv1 l1) (a :: gv1)), (Permutation (merge gv1 l1) (merge l1 l1))
(Permutation (merge gv1 l1) (merge l1 gv1)), (Permutation (merge gv1 l1) (merge gv1 gv1)), (Permutation (merge gv1 l1) (l1 ++ l1)), (Permutation (merge gv1 l1) (l1 ++ gv1)), (Permutation (merge gv1 l1) (gv1 ++ l1)), (Permutation (merge gv1 l1) (gv1 ++ gv1)), (Permutation (merge gv1 l1) []), (Permutation (merge gv1 gv1) l1), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (a :: l1))
(Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (merge l1 l1)), (Permutation (merge gv1 gv1) (merge l1 gv1)), (Permutation (merge gv1 gv1) (merge gv1 l1)), (Permutation (merge gv1 gv1) (l1 ++ l1)), (Permutation (merge gv1 gv1) (l1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ l1)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (l1 ++ l1) l1)
(Permutation (l1 ++ l1) gv1), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: gv1)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 gv1)), (Permutation (l1 ++ l1) (merge gv1 l1)), (Permutation (l1 ++ l1) (merge gv1 gv1)), (Permutation (l1 ++ l1) (l1 ++ gv1)), (Permutation (l1 ++ l1) (gv1 ++ l1)), (Permutation (l1 ++ l1) (gv1 ++ gv1))
(Permutation (l1 ++ l1) []), (Permutation (l1 ++ gv1) l1), (Permutation (l1 ++ gv1) gv1), (Permutation (l1 ++ gv1) (a :: l1)), (Permutation (l1 ++ gv1) (a :: gv1)), (Permutation (l1 ++ gv1) (merge l1 l1)), (Permutation (l1 ++ gv1) (merge l1 gv1)), (Permutation (l1 ++ gv1) (merge gv1 l1)), (Permutation (l1 ++ gv1) (merge gv1 gv1)), (Permutation (l1 ++ gv1) (l1 ++ l1))
(Permutation (l1 ++ gv1) (gv1 ++ l1)), (Permutation (l1 ++ gv1) (gv1 ++ gv1)), (Permutation (l1 ++ gv1) []), (Permutation (gv1 ++ l1) l1), (Permutation (gv1 ++ l1) gv1), (Permutation (gv1 ++ l1) (a :: l1)), (Permutation (gv1 ++ l1) (a :: gv1)), (Permutation (gv1 ++ l1) (merge l1 l1)), (Permutation (gv1 ++ l1) (merge l1 gv1)), (Permutation (gv1 ++ l1) (merge gv1 l1))
(Permutation (gv1 ++ l1) (merge gv1 gv1)), (Permutation (gv1 ++ l1) (l1 ++ l1)), (Permutation (gv1 ++ l1) (l1 ++ gv1)), (Permutation (gv1 ++ l1) (gv1 ++ gv1)), (Permutation (gv1 ++ l1) []), (Permutation (gv1 ++ gv1) l1), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (a :: l1)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (merge l1 l1))
(Permutation (gv1 ++ gv1) (merge l1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 l1)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (l1 ++ l1)), (Permutation (gv1 ++ gv1) (l1 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ l1)), (Permutation (gv1 ++ gv1) []), (Permutation [] l1), (Permutation [] gv1), (Permutation [] (a :: l1))
(Permutation [] (a :: gv1)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 gv1)), (Permutation [] (merge gv1 l1)), (Permutation [] (merge gv1 gv1)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ gv1)), (Permutation [] (gv1 ++ l1)), (Permutation [] (gv1 ++ gv1)), (In a (a :: l1))
(In a (a :: gv1)), (In a (merge l1 l1)), (In a (merge l1 gv1)), (In a (merge gv1 l1)), (In a (merge gv1 gv1)), (In a (l1 ++ l1)), (In a (l1 ++ gv1)), (In a (gv1 ++ l1)), (In a (gv1 ++ gv1)), (In (length l1) l1)
(In (length l1) gv1), (In (length l1) (a :: l1)), (In (length l1) (a :: gv1)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 gv1)), (In (length l1) (merge gv1 l1)), (In (length l1) (merge gv1 gv1)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ gv1)), (In (length l1) (gv1 ++ l1))
(In (length l1) (gv1 ++ gv1)), (In (length gv1) l1), (In (length gv1) gv1), (In (length gv1) (a :: l1)), (In (length gv1) (a :: gv1)), (In (length gv1) (merge l1 l1)), (In (length gv1) (merge l1 gv1)), (In (length gv1) (merge gv1 l1)), (In (length gv1) (merge gv1 gv1)), (In (length gv1) (l1 ++ l1))
(In (length gv1) (l1 ++ gv1)), (In (length gv1) (gv1 ++ l1)), (In (length gv1) (gv1 ++ gv1)), (a < length l1), (a < length gv1), (length l1 < a), (length l1 < length gv1), (length gv1 < a), (length gv1 < length l1), (a <= length l1)
(a <= length gv1), (length l1 <= a), (length l1 <= length gv1), (length gv1 <= a), (length gv1 <= length l1), (~ a <=* l1), (~ a <=* gv1), (~ sorted l1), (~ sorted gv1), (~ Permutation l1 l1)
(~ Permutation l1 gv1), (~ Permutation gv1 l1), (~ Permutation gv1 gv1), (~ In a l1), (~ In a gv1), (~ a < a), (~ a <= a), (l1 <> l1), (l1 <> gv1), (gv1 <> l1)
(gv1 <> gv1), (a <> a), (None = Some l1), (None = Some gv1), (a :: l1 = l1), (a :: l1 = gv1), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 gv1), (a :: l1 = merge gv1 l1), (a :: l1 = merge gv1 gv1)
(a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ gv1), (a :: l1 = gv1 ++ l1), (a :: l1 = gv1 ++ gv1), (a :: l1 = []), (a :: gv1 = l1), (a :: gv1 = gv1), (a :: gv1 = merge l1 l1), (a :: gv1 = merge l1 gv1), (a :: gv1 = merge gv1 l1)
(a :: gv1 = merge gv1 gv1), (a :: gv1 = l1 ++ l1), (a :: gv1 = l1 ++ gv1), (a :: gv1 = gv1 ++ l1), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = []), (merge l1 l1 = l1), (merge l1 l1 = gv1), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ gv1)
(merge l1 l1 = gv1 ++ l1), (merge l1 l1 = gv1 ++ gv1), (merge l1 gv1 = l1), (merge l1 gv1 = gv1), (merge l1 gv1 = l1 ++ l1), (merge l1 gv1 = l1 ++ gv1), (merge l1 gv1 = gv1 ++ l1), (merge l1 gv1 = gv1 ++ gv1), (merge gv1 l1 = l1), (merge gv1 l1 = gv1)
(merge gv1 l1 = l1 ++ l1), (merge gv1 l1 = l1 ++ gv1), (merge gv1 l1 = gv1 ++ l1), (merge gv1 l1 = gv1 ++ gv1), (merge gv1 gv1 = l1), (merge gv1 gv1 = gv1), (merge gv1 gv1 = l1 ++ l1), (merge gv1 gv1 = l1 ++ gv1), (merge gv1 gv1 = gv1 ++ l1), (merge gv1 gv1 = gv1 ++ gv1)
(l1 ++ l1 = l1), (l1 ++ l1 = gv1), (l1 ++ gv1 = l1), (l1 ++ gv1 = gv1), (gv1 ++ l1 = l1), (gv1 ++ l1 = gv1), (gv1 ++ gv1 = l1), (gv1 ++ gv1 = gv1), ([] = l1), ([] = gv1)
([] = merge l1 l1), ([] = merge l1 gv1), ([] = merge gv1 l1), ([] = merge gv1 gv1), ([] = l1 ++ l1), ([] = l1 ++ gv1), ([] = gv1 ++ l1), ([] = gv1 ++ gv1), (None = Some a), ((l1, l1) = split l1)
((l1, l1) = split gv1), ((l1, gv1) = split l1), ((l1, gv1) = split gv1), ((gv1, l1) = split l1), ((gv1, l1) = split gv1), ((gv1, gv1) = split l1), ((gv1, gv1) = split gv1), (length l1 = a), (length gv1 = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 31.227 seconds


Label: 0 (0)
(Permutation gv2 []), (Permutation [] gv2), ([] = gv2), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge l1 gv2)), (Permutation (merge gv2 l1) l1), (Permutation (merge l1 gv2) l1), (Permutation gv2 (merge gv2 gv2)), (Permutation (merge gv2 gv2) gv2), (merge gv2 l1 = l1)
(merge l1 gv2 = l1), (merge gv2 gv2 = gv2), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (l1 ++ gv2)), (Permutation (gv2 ++ l1) l1), (Permutation (l1 ++ gv2) l1), (Permutation gv2 (gv2 ++ gv2)), (Permutation (gv2 ++ gv2) gv2), (Permutation (merge gv2 gv2) []), (Permutation [] (merge gv2 gv2))

Label: 1 (1)
(Permutation gv0 (a :: l1)), (Permutation (a :: l1) gv0), (a :: l1 = gv0)

Label: 2 (2)
(Permutation gv3 (a :: l1)), (Permutation (a :: l1) gv3), (a :: l1 = gv3)

Label: 3 (3)
(Permutation l1 gv1), (Permutation gv1 l1), (l1 = gv1), (gv1 = l1), (Permutation (merge l1 l1) (merge l1 gv1)), (Permutation (merge l1 l1) (merge gv1 l1)), (Permutation (merge l1 gv1) (merge l1 l1)), (Permutation (merge gv1 l1) (merge l1 l1)), (Permutation (merge l1 l1) (merge gv1 gv1)), (Permutation (merge gv1 gv1) (merge l1 l1))
(Permutation (merge l1 gv1) (merge gv1 gv1)), (Permutation (merge gv1 l1) (merge gv1 gv1)), (Permutation (merge gv1 gv1) (merge l1 gv1)), (Permutation (merge gv1 gv1) (merge gv1 l1)), (Permutation (merge l1 l1) (l1 ++ gv1)), (Permutation (merge l1 l1) (gv1 ++ l1)), (Permutation (merge l1 gv1) (l1 ++ l1)), (Permutation (merge gv1 l1) (l1 ++ l1)), (Permutation (l1 ++ l1) (merge l1 gv1)), (Permutation (l1 ++ l1) (merge gv1 l1))


------------------------------ ALL RESULTS ------------------------------
1. (Permutation (a :: l1 ++ []) (a :: l1))

2. (merge [] [] = [])

3. (a :: l1 = a :: l1 ++ [])

4. (l1 ++ [] = l1)

5. (Permutation l1 gv1 -> Permutation (a :: gv1) (a :: l1))

6. (Permutation gv1 l1 -> Permutation (a :: gv1) (a :: l1))

7. (Permutation gv2 [] -> Permutation (a :: l1 ++ gv2) (a :: l1))

8. (Permutation [] gv2 -> Permutation (a :: l1 ++ gv2) (a :: l1))

9. (l1 = gv1 -> Permutation (a :: gv1) (a :: l1))

10. (gv1 = l1 -> Permutation (a :: gv1) (a :: l1))

11. (Permutation l1 (merge gv2 l1) -> Permutation (a :: l1 ++ gv2) (a :: l1))

12. (Permutation l1 (merge l1 gv2) -> Permutation (a :: l1 ++ gv2) (a :: l1))

13. (Permutation (merge gv2 l1) l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

14. (Permutation (merge l1 gv2) l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

15. (Permutation gv2 (merge gv2 gv2) -> Permutation (a :: l1 ++ gv2) (a :: l1))

16. (Permutation (merge gv2 gv2) gv2 -> Permutation (a :: l1 ++ gv2) (a :: l1))

17. (merge gv2 l1 = l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

18. (merge l1 gv2 = l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

19. (merge gv2 gv2 = gv2 -> Permutation (a :: l1 ++ gv2) (a :: l1))

20. (Permutation l1 (gv2 ++ l1) -> Permutation (a :: l1 ++ gv2) (a :: l1))

21. (Permutation l1 (l1 ++ gv2) -> Permutation (a :: l1 ++ gv2) (a :: l1))

22. (Permutation (gv2 ++ l1) l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

23. (Permutation (l1 ++ gv2) l1 -> Permutation (a :: l1 ++ gv2) (a :: l1))

24. (Permutation gv2 (gv2 ++ gv2) -> Permutation (a :: l1 ++ gv2) (a :: l1))

25. (Permutation (gv2 ++ gv2) gv2 -> Permutation (a :: l1 ++ gv2) (a :: l1))

26. (Permutation (merge gv2 gv2) [] -> Permutation (a :: l1 ++ gv2) (a :: l1))

27. (Permutation [] (merge gv2 gv2) -> Permutation (a :: l1 ++ gv2) (a :: l1))

28. (Permutation gv3 (a :: l1) -> Permutation (a :: l1 ++ []) gv3)

29. (Permutation (a :: l1) gv3 -> Permutation (a :: l1 ++ []) gv3)

30. (a :: l1 = gv0 -> Permutation gv0 (a :: l1))

31. (Permutation (merge l1 l1) (merge l1 gv1) -> Permutation (a :: gv1) (a :: l1))

32. (Permutation (merge l1 l1) (merge gv1 l1) -> Permutation (a :: gv1) (a :: l1))

33. (Permutation (merge l1 gv1) (merge l1 l1) -> Permutation (a :: gv1) (a :: l1))

34. (Permutation (merge gv1 l1) (merge l1 l1) -> Permutation (a :: gv1) (a :: l1))

35. (Permutation (merge l1 l1) (merge gv1 gv1) ->  Permutation (a :: gv1) (a :: l1))

36. (Permutation (merge gv1 gv1) (merge l1 l1) ->  Permutation (a :: gv1) (a :: l1))

37. (Permutation (merge l1 gv1) (merge gv1 gv1) ->  Permutation (a :: gv1) (a :: l1))

38. (Permutation (merge gv1 l1) (merge gv1 gv1) ->  Permutation (a :: gv1) (a :: l1))

39. (Permutation (merge gv1 gv1) (merge l1 gv1) ->  Permutation (a :: gv1) (a :: l1))

40. (Permutation (merge gv1 gv1) (merge gv1 l1) ->  Permutation (a :: gv1) (a :: l1))

41. (Permutation (merge l1 l1) (l1 ++ gv1) -> Permutation (a :: gv1) (a :: l1))

42. (Permutation (merge l1 l1) (gv1 ++ l1) -> Permutation (a :: gv1) (a :: l1))

43. (Permutation (merge l1 gv1) (l1 ++ l1) -> Permutation (a :: gv1) (a :: l1))

44. (Permutation (merge gv1 l1) (l1 ++ l1) -> Permutation (a :: gv1) (a :: l1))

45. (Permutation (l1 ++ l1) (merge l1 gv1) -> Permutation (a :: gv1) (a :: l1))

46. (Permutation (l1 ++ l1) (merge gv1 l1) -> Permutation (a :: gv1) (a :: l1))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 89.034 seconds

Number of Result Pairs Returned: 46

1. (Permutation (a :: l1 ++ []) (a :: l1))

2. (a :: l1 = a :: l1 ++ [])

3. (l1 ++ [] = l1)

4. (Permutation l1 gv1 -> Permutation (a :: gv1) (a :: l1))

5. (Permutation gv1 l1 -> Permutation (a :: gv1) (a :: l1))
