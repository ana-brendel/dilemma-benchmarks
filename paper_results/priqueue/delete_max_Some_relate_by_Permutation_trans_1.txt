Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (q : list nat) (k : nat) (pl ql : list nat),
 priq p ->
 Abs p pl ->
 delete_max p = Some (k, q) ->
 Abs q ql -> Permutation pl (k :: ql) /\ Forall (ge k) ql)
 -- (Abs q ql)
 -- (priq (a :: p))
 -- (Abs (a :: p) pl)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation pl (k :: ql))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.562 seconds

gv0 : (list nat) = (k :: ql)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 52.696 seconds

Label: Generalization #0
Assumptions: 
 -- (Abs q ql)
 -- (Abs (a :: p) pl)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation pl (k :: ql))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (Abs q ql)
 -- (Abs (a :: p) pl)
 -- (k :: ql = gv0)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation pl gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 52.83 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
select : (nat -> list nat -> nat * list nat)
insert : (nat -> list nat -> list nat)
delete_max : (list nat -> option (nat * list nat))
merge : (list nat -> list nat -> list nat)
priq : (list nat -> Prop)
Abs : (list nat -> list nat -> Prop)

Label: 0 (0)
Abducted Assumption: (Abs q ql)
Positive Examples: 500
Negative Examples: 6

Label: 1 (1)
Abducted Assumption: (Abs (a :: p) pl)
Positive Examples: 168
Negative Examples: 33

Label: 2 (2)
Abducted Assumption: (select a p = (k, q))
Positive Examples: 149
Negative Examples: 17

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 4
Negative Examples: 4


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 65.04 seconds


Label: 0 (0)
(Abs q q), (Abs q p), (Abs q ql), (Abs q pl), (Abs p q), (Abs p p), (Abs p ql), (Abs p pl), (Abs ql q), (Abs ql p)
(Abs ql ql), (Abs ql pl), (Abs pl q), (Abs pl p), (Abs pl ql), (Abs pl pl), (priq q), (priq p), (priq ql), (priq pl)
(Permutation q q), (Permutation q p), (Permutation q ql), (Permutation q pl), (Permutation p q), (Permutation p p), (Permutation p ql), (Permutation p pl), (Permutation ql q), (Permutation ql p)
(Permutation ql ql), (Permutation ql pl), (Permutation pl q), (Permutation pl p), (Permutation pl ql), (Permutation pl pl), (In a q), (In a p), (In a ql), (In a pl)
(In k q), (In k p), (In k ql), (In k pl), (a < a), (a < k), (k < a), (k < k), (a <= a), (a <= k)
(k <= a), (k <= k), (a = a), (a = k), (k = a), (k = k), (q = q), (q = p), (q = ql), (q = pl)
(p = q), (p = p), (p = ql), (p = pl), (ql = q), (ql = p), (ql = ql), (ql = pl), (pl = q), (pl = p)
(pl = ql), (pl = pl), (false = (a >? a)), (false = (a >? k)), (false = (k >? a)), (false = (k >? k)), (false = (a >=? a)), (false = (a >=? k)), (false = (k >=? a)), (false = (k >=? k))
(true = (a >? a)), (true = (a >? k)), (true = (k >? a)), (true = (k >? k)), (true = (a >=? a)), (true = (a >=? k)), (true = (k >=? a)), (true = (k >=? k)), (Abs q (a :: q)), (Abs q (a :: p))
(Abs q (a :: ql)), (Abs q (a :: pl)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (k :: ql)), (Abs q (k :: pl)), (Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge q ql)), (Abs q (merge q pl))
(Abs q (merge p q)), (Abs q (merge p p)), (Abs q (merge p ql)), (Abs q (merge p pl)), (Abs q (merge ql q)), (Abs q (merge ql p)), (Abs q (merge ql ql)), (Abs q (merge ql pl)), (Abs q (merge pl q)), (Abs q (merge pl p))
(Abs q (merge pl ql)), (Abs q (merge pl pl)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (insert a ql)), (Abs q (insert a pl)), (Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert k ql)), (Abs q (insert k pl))
(Abs q (maybe_swap q)), (Abs q (maybe_swap p)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap pl)), (Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (q ++ ql)), (Abs q (q ++ pl)), (Abs q (p ++ q)), (Abs q (p ++ p))
(Abs q (p ++ ql)), (Abs q (p ++ pl)), (Abs q (ql ++ q)), (Abs q (ql ++ p)), (Abs q (ql ++ ql)), (Abs q (ql ++ pl)), (Abs q (pl ++ q)), (Abs q (pl ++ p)), (Abs q (pl ++ ql)), (Abs q (pl ++ pl))
(Abs q []), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (a :: ql)), (Abs p (a :: pl)), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (k :: ql)), (Abs p (k :: pl)), (Abs p (merge q q))
(Abs p (merge q p)), (Abs p (merge q ql)), (Abs p (merge q pl)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (merge p ql)), (Abs p (merge p pl)), (Abs p (merge ql q)), (Abs p (merge ql p)), (Abs p (merge ql ql))
(Abs p (merge ql pl)), (Abs p (merge pl q)), (Abs p (merge pl p)), (Abs p (merge pl ql)), (Abs p (merge pl pl)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (insert a ql)), (Abs p (insert a pl)), (Abs p (insert k q))
(Abs p (insert k p)), (Abs p (insert k ql)), (Abs p (insert k pl)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap pl)), (Abs p (q ++ q)), (Abs p (q ++ p)), (Abs p (q ++ ql))
(Abs p (q ++ pl)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p (p ++ ql)), (Abs p (p ++ pl)), (Abs p (ql ++ q)), (Abs p (ql ++ p)), (Abs p (ql ++ ql)), (Abs p (ql ++ pl)), (Abs p (pl ++ q))
(Abs p (pl ++ p)), (Abs p (pl ++ ql)), (Abs p (pl ++ pl)), (Abs p []), (Abs ql (a :: q)), (Abs ql (a :: p)), (Abs ql (a :: ql)), (Abs ql (a :: pl)), (Abs ql (k :: q)), (Abs ql (k :: p))
(Abs ql (k :: ql)), (Abs ql (k :: pl)), (Abs ql (merge q q)), (Abs ql (merge q p)), (Abs ql (merge q ql)), (Abs ql (merge q pl)), (Abs ql (merge p q)), (Abs ql (merge p p)), (Abs ql (merge p ql)), (Abs ql (merge p pl))
(Abs ql (merge ql q)), (Abs ql (merge ql p)), (Abs ql (merge ql ql)), (Abs ql (merge ql pl)), (Abs ql (merge pl q)), (Abs ql (merge pl p)), (Abs ql (merge pl ql)), (Abs ql (merge pl pl)), (Abs ql (insert a q)), (Abs ql (insert a p))
(Abs ql (insert a ql)), (Abs ql (insert a pl)), (Abs ql (insert k q)), (Abs ql (insert k p)), (Abs ql (insert k ql)), (Abs ql (insert k pl)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap p)), (Abs ql (maybe_swap ql)), (Abs ql (maybe_swap pl))
(Abs ql (q ++ q)), (Abs ql (q ++ p)), (Abs ql (q ++ ql)), (Abs ql (q ++ pl)), (Abs ql (p ++ q)), (Abs ql (p ++ p)), (Abs ql (p ++ ql)), (Abs ql (p ++ pl)), (Abs ql (ql ++ q)), (Abs ql (ql ++ p))
(Abs ql (ql ++ ql)), (Abs ql (ql ++ pl)), (Abs ql (pl ++ q)), (Abs ql (pl ++ p)), (Abs ql (pl ++ ql)), (Abs ql (pl ++ pl)), (Abs ql []), (Abs pl (a :: q)), (Abs pl (a :: p)), (Abs pl (a :: ql))
(Abs pl (a :: pl)), (Abs pl (k :: q)), (Abs pl (k :: p)), (Abs pl (k :: ql)), (Abs pl (k :: pl)), (Abs pl (merge q q)), (Abs pl (merge q p)), (Abs pl (merge q ql)), (Abs pl (merge q pl)), (Abs pl (merge p q))
(Abs pl (merge p p)), (Abs pl (merge p ql)), (Abs pl (merge p pl)), (Abs pl (merge ql q)), (Abs pl (merge ql p)), (Abs pl (merge ql ql)), (Abs pl (merge ql pl)), (Abs pl (merge pl q)), (Abs pl (merge pl p)), (Abs pl (merge pl ql))
(Abs pl (merge pl pl)), (Abs pl (insert a q)), (Abs pl (insert a p)), (Abs pl (insert a ql)), (Abs pl (insert a pl)), (Abs pl (insert k q)), (Abs pl (insert k p)), (Abs pl (insert k ql)), (Abs pl (insert k pl)), (Abs pl (maybe_swap q))
(Abs pl (maybe_swap p)), (Abs pl (maybe_swap ql)), (Abs pl (maybe_swap pl)), (Abs pl (q ++ q)), (Abs pl (q ++ p)), (Abs pl (q ++ ql)), (Abs pl (q ++ pl)), (Abs pl (p ++ q)), (Abs pl (p ++ p)), (Abs pl (p ++ ql))
(Abs pl (p ++ pl)), (Abs pl (ql ++ q)), (Abs pl (ql ++ p)), (Abs pl (ql ++ ql)), (Abs pl (ql ++ pl)), (Abs pl (pl ++ q)), (Abs pl (pl ++ p)), (Abs pl (pl ++ ql)), (Abs pl (pl ++ pl)), (Abs pl [])
(Abs (a :: q) q), (Abs (a :: q) p), (Abs (a :: q) ql), (Abs (a :: q) pl), (Abs (a :: q) (a :: p)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: pl)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: ql))
(Abs (a :: q) (k :: pl)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q pl)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p pl)), (Abs (a :: q) (merge ql q))
(Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql pl)), (Abs (a :: q) (merge pl q)), (Abs (a :: q) (merge pl p)), (Abs (a :: q) (merge pl ql)), (Abs (a :: q) (merge pl pl)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (insert a ql))
(Abs (a :: q) (insert a pl)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k pl)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap pl)), (Abs (a :: q) (q ++ q))
(Abs (a :: q) (q ++ p)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ pl)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ pl)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (ql ++ ql))
(Abs (a :: q) (ql ++ pl)), (Abs (a :: q) (pl ++ q)), (Abs (a :: q) (pl ++ p)), (Abs (a :: q) (pl ++ ql)), (Abs (a :: q) (pl ++ pl)), (Abs (a :: q) []), (Abs (a :: p) q), (Abs (a :: p) p), (Abs (a :: p) ql), (Abs (a :: p) pl)
(Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: pl)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: pl)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge q ql))
(Abs (a :: p) (merge q pl)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p pl)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql pl)), (Abs (a :: p) (merge pl q))
(Abs (a :: p) (merge pl p)), (Abs (a :: p) (merge pl ql)), (Abs (a :: p) (merge pl pl)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a pl)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert k ql))
(Abs (a :: p) (insert k pl)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap pl)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ pl)), (Abs (a :: p) (p ++ q))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ pl)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ pl)), (Abs (a :: p) (pl ++ q)), (Abs (a :: p) (pl ++ p)), (Abs (a :: p) (pl ++ ql))
(Abs (a :: p) (pl ++ pl)), (Abs (a :: p) []), (Abs (a :: ql) q), (Abs (a :: ql) p), (Abs (a :: ql) ql), (Abs (a :: ql) pl), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (a :: pl)), (Abs (a :: ql) (k :: q))
(Abs (a :: ql) (k :: p)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: pl)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge q ql)), (Abs (a :: ql) (merge q pl)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (merge p ql))
(Abs (a :: ql) (merge p pl)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql pl)), (Abs (a :: ql) (merge pl q)), (Abs (a :: ql) (merge pl p)), (Abs (a :: ql) (merge pl ql)), (Abs (a :: ql) (merge pl pl)), (Abs (a :: ql) (insert a q))
(Abs (a :: ql) (insert a p)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a pl)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k p)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k pl)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (maybe_swap ql))
(Abs (a :: ql) (maybe_swap pl)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ pl)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ pl)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ pl)), (Abs (a :: ql) (pl ++ q)), (Abs (a :: ql) (pl ++ p)), (Abs (a :: ql) (pl ++ ql)), (Abs (a :: ql) (pl ++ pl)), (Abs (a :: ql) []), (Abs (a :: pl) q), (Abs (a :: pl) p)
(Abs (a :: pl) ql), (Abs (a :: pl) pl), (Abs (a :: pl) (a :: q)), (Abs (a :: pl) (a :: p)), (Abs (a :: pl) (a :: ql)), (Abs (a :: pl) (k :: q)), (Abs (a :: pl) (k :: p)), (Abs (a :: pl) (k :: ql)), (Abs (a :: pl) (k :: pl)), (Abs (a :: pl) (merge q q))
(Abs (a :: pl) (merge q p)), (Abs (a :: pl) (merge q ql)), (Abs (a :: pl) (merge q pl)), (Abs (a :: pl) (merge p q)), (Abs (a :: pl) (merge p p)), (Abs (a :: pl) (merge p ql)), (Abs (a :: pl) (merge p pl)), (Abs (a :: pl) (merge ql q)), (Abs (a :: pl) (merge ql p)), (Abs (a :: pl) (merge ql ql))
(Abs (a :: pl) (merge ql pl)), (Abs (a :: pl) (merge pl q)), (Abs (a :: pl) (merge pl p)), (Abs (a :: pl) (merge pl ql)), (Abs (a :: pl) (merge pl pl)), (Abs (a :: pl) (insert a q)), (Abs (a :: pl) (insert a p)), (Abs (a :: pl) (insert a ql)), (Abs (a :: pl) (insert a pl)), (Abs (a :: pl) (insert k q))
(Abs (a :: pl) (insert k p)), (Abs (a :: pl) (insert k ql)), (Abs (a :: pl) (insert k pl)), (Abs (a :: pl) (maybe_swap q)), (Abs (a :: pl) (maybe_swap p)), (Abs (a :: pl) (maybe_swap ql)), (Abs (a :: pl) (maybe_swap pl)), (Abs (a :: pl) (q ++ q)), (Abs (a :: pl) (q ++ p)), (Abs (a :: pl) (q ++ ql))
(Abs (a :: pl) (q ++ pl)), (Abs (a :: pl) (p ++ q)), (Abs (a :: pl) (p ++ p)), (Abs (a :: pl) (p ++ ql)), (Abs (a :: pl) (p ++ pl)), (Abs (a :: pl) (ql ++ q)), (Abs (a :: pl) (ql ++ p)), (Abs (a :: pl) (ql ++ ql)), (Abs (a :: pl) (ql ++ pl)), (Abs (a :: pl) (pl ++ q))
(Abs (a :: pl) (pl ++ p)), (Abs (a :: pl) (pl ++ ql)), (Abs (a :: pl) (pl ++ pl)), (Abs (a :: pl) []), (Abs (k :: q) q), (Abs (k :: q) p), (Abs (k :: q) ql), (Abs (k :: q) pl), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p))
(Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: pl)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: pl)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q pl)), (Abs (k :: q) (merge p q))
(Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p pl)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql pl)), (Abs (k :: q) (merge pl q)), (Abs (k :: q) (merge pl p)), (Abs (k :: q) (merge pl ql))
(Abs (k :: q) (merge pl pl)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a pl)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k pl)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap pl)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ pl)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ pl)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ pl)), (Abs (k :: q) (pl ++ q)), (Abs (k :: q) (pl ++ p)), (Abs (k :: q) (pl ++ ql)), (Abs (k :: q) (pl ++ pl)), (Abs (k :: q) [])
(Abs (k :: p) q), (Abs (k :: p) p), (Abs (k :: p) ql), (Abs (k :: p) pl), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: pl)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql))
(Abs (k :: p) (k :: pl)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q pl)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p pl)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql pl)), (Abs (k :: p) (merge pl q)), (Abs (k :: p) (merge pl p)), (Abs (k :: p) (merge pl ql)), (Abs (k :: p) (merge pl pl)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a pl)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k pl)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap pl)), (Abs (k :: p) (q ++ q))
(Abs (k :: p) (q ++ p)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ pl)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ pl)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ p)), (Abs (k :: p) (ql ++ ql))
(Abs (k :: p) (ql ++ pl)), (Abs (k :: p) (pl ++ q)), (Abs (k :: p) (pl ++ p)), (Abs (k :: p) (pl ++ ql)), (Abs (k :: p) (pl ++ pl)), (Abs (k :: p) []), (Abs (k :: ql) q), (Abs (k :: ql) p), (Abs (k :: ql) ql), (Abs (k :: ql) pl)
(Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: p)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: pl)), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (k :: pl)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge q ql))
(Abs (k :: ql) (merge q pl)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p pl)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql pl)), (Abs (k :: ql) (merge pl q))
(Abs (k :: ql) (merge pl p)), (Abs (k :: ql) (merge pl ql)), (Abs (k :: ql) (merge pl pl)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a pl)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert k ql))
(Abs (k :: ql) (insert k pl)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap pl)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ pl)), (Abs (k :: ql) (p ++ q))
(Abs (k :: ql) (p ++ p)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ pl)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ pl)), (Abs (k :: ql) (pl ++ q)), (Abs (k :: ql) (pl ++ p)), (Abs (k :: ql) (pl ++ ql))
(Abs (k :: ql) (pl ++ pl)), (Abs (k :: ql) []), (Abs (k :: pl) q), (Abs (k :: pl) p), (Abs (k :: pl) ql), (Abs (k :: pl) pl), (Abs (k :: pl) (a :: q)), (Abs (k :: pl) (a :: p)), (Abs (k :: pl) (a :: ql)), (Abs (k :: pl) (a :: pl))
(Abs (k :: pl) (k :: q)), (Abs (k :: pl) (k :: p)), (Abs (k :: pl) (k :: ql)), (Abs (k :: pl) (merge q q)), (Abs (k :: pl) (merge q p)), (Abs (k :: pl) (merge q ql)), (Abs (k :: pl) (merge q pl)), (Abs (k :: pl) (merge p q)), (Abs (k :: pl) (merge p p)), (Abs (k :: pl) (merge p ql))
(Abs (k :: pl) (merge p pl)), (Abs (k :: pl) (merge ql q)), (Abs (k :: pl) (merge ql p)), (Abs (k :: pl) (merge ql ql)), (Abs (k :: pl) (merge ql pl)), (Abs (k :: pl) (merge pl q)), (Abs (k :: pl) (merge pl p)), (Abs (k :: pl) (merge pl ql)), (Abs (k :: pl) (merge pl pl)), (Abs (k :: pl) (insert a q))
(Abs (k :: pl) (insert a p)), (Abs (k :: pl) (insert a ql)), (Abs (k :: pl) (insert a pl)), (Abs (k :: pl) (insert k q)), (Abs (k :: pl) (insert k p)), (Abs (k :: pl) (insert k ql)), (Abs (k :: pl) (insert k pl)), (Abs (k :: pl) (maybe_swap q)), (Abs (k :: pl) (maybe_swap p)), (Abs (k :: pl) (maybe_swap ql))
(Abs (k :: pl) (maybe_swap pl)), (Abs (k :: pl) (q ++ q)), (Abs (k :: pl) (q ++ p)), (Abs (k :: pl) (q ++ ql)), (Abs (k :: pl) (q ++ pl)), (Abs (k :: pl) (p ++ q)), (Abs (k :: pl) (p ++ p)), (Abs (k :: pl) (p ++ ql)), (Abs (k :: pl) (p ++ pl)), (Abs (k :: pl) (ql ++ q))
(Abs (k :: pl) (ql ++ p)), (Abs (k :: pl) (ql ++ ql)), (Abs (k :: pl) (ql ++ pl)), (Abs (k :: pl) (pl ++ q)), (Abs (k :: pl) (pl ++ p)), (Abs (k :: pl) (pl ++ ql)), (Abs (k :: pl) (pl ++ pl)), (Abs (k :: pl) []), (Abs (merge q q) q), (Abs (merge q q) p)
(Abs (merge q q) ql), (Abs (merge q q) pl), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: p)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: pl)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: pl))
(Abs (merge q q) (merge q p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q pl)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p pl)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge ql ql))
(Abs (merge q q) (merge ql pl)), (Abs (merge q q) (merge pl q)), (Abs (merge q q) (merge pl p)), (Abs (merge q q) (merge pl ql)), (Abs (merge q q) (merge pl pl)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a pl)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k p)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k pl)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap pl)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ pl)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ pl)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ pl)), (Abs (merge q q) (pl ++ q))
(Abs (merge q q) (pl ++ p)), (Abs (merge q q) (pl ++ ql)), (Abs (merge q q) (pl ++ pl)), (Abs (merge q q) []), (Abs (merge q p) q), (Abs (merge q p) p), (Abs (merge q p) ql), (Abs (merge q p) pl), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: p))
(Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: pl)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: pl)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q pl)), (Abs (merge q p) (merge p q))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p pl)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql pl)), (Abs (merge q p) (merge pl q)), (Abs (merge q p) (merge pl p)), (Abs (merge q p) (merge pl ql))
(Abs (merge q p) (merge pl pl)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a pl)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k pl)), (Abs (merge q p) (maybe_swap q))
(Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap pl)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ pl)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ ql))
(Abs (merge q p) (p ++ pl)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ pl)), (Abs (merge q p) (pl ++ q)), (Abs (merge q p) (pl ++ p)), (Abs (merge q p) (pl ++ ql)), (Abs (merge q p) (pl ++ pl)), (Abs (merge q p) [])
(Abs (merge q ql) q), (Abs (merge q ql) p), (Abs (merge q ql) ql), (Abs (merge q ql) pl), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: pl)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: p))
(Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: pl)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge q pl)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p pl)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql pl)), (Abs (merge q ql) (merge pl q)), (Abs (merge q ql) (merge pl p)), (Abs (merge q ql) (merge pl ql)), (Abs (merge q ql) (merge pl pl)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a pl)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k pl)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap pl)), (Abs (merge q ql) (q ++ q))
(Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ pl)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ pl)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (ql ++ ql))
(Abs (merge q ql) (ql ++ pl)), (Abs (merge q ql) (pl ++ q)), (Abs (merge q ql) (pl ++ p)), (Abs (merge q ql) (pl ++ ql)), (Abs (merge q ql) (pl ++ pl)), (Abs (merge q ql) []), (Abs (merge q pl) q), (Abs (merge q pl) p), (Abs (merge q pl) ql), (Abs (merge q pl) pl)
(Abs (merge q pl) (a :: q)), (Abs (merge q pl) (a :: p)), (Abs (merge q pl) (a :: ql)), (Abs (merge q pl) (a :: pl)), (Abs (merge q pl) (k :: q)), (Abs (merge q pl) (k :: p)), (Abs (merge q pl) (k :: ql)), (Abs (merge q pl) (k :: pl)), (Abs (merge q pl) (merge q q)), (Abs (merge q pl) (merge q p))
(Abs (merge q pl) (merge q ql)), (Abs (merge q pl) (merge p q)), (Abs (merge q pl) (merge p p)), (Abs (merge q pl) (merge p ql)), (Abs (merge q pl) (merge p pl)), (Abs (merge q pl) (merge ql q)), (Abs (merge q pl) (merge ql p)), (Abs (merge q pl) (merge ql ql)), (Abs (merge q pl) (merge ql pl)), (Abs (merge q pl) (merge pl q))
(Abs (merge q pl) (merge pl p)), (Abs (merge q pl) (merge pl ql)), (Abs (merge q pl) (merge pl pl)), (Abs (merge q pl) (insert a q)), (Abs (merge q pl) (insert a p)), (Abs (merge q pl) (insert a ql)), (Abs (merge q pl) (insert a pl)), (Abs (merge q pl) (insert k q)), (Abs (merge q pl) (insert k p)), (Abs (merge q pl) (insert k ql))
(Abs (merge q pl) (insert k pl)), (Abs (merge q pl) (maybe_swap q)), (Abs (merge q pl) (maybe_swap p)), (Abs (merge q pl) (maybe_swap ql)), (Abs (merge q pl) (maybe_swap pl)), (Abs (merge q pl) (q ++ q)), (Abs (merge q pl) (q ++ p)), (Abs (merge q pl) (q ++ ql)), (Abs (merge q pl) (q ++ pl)), (Abs (merge q pl) (p ++ q))
(Abs (merge q pl) (p ++ p)), (Abs (merge q pl) (p ++ ql)), (Abs (merge q pl) (p ++ pl)), (Abs (merge q pl) (ql ++ q)), (Abs (merge q pl) (ql ++ p)), (Abs (merge q pl) (ql ++ ql)), (Abs (merge q pl) (ql ++ pl)), (Abs (merge q pl) (pl ++ q)), (Abs (merge q pl) (pl ++ p)), (Abs (merge q pl) (pl ++ ql))
(Abs (merge q pl) (pl ++ pl)), (Abs (merge q pl) []), (Abs (merge p q) q), (Abs (merge p q) p), (Abs (merge p q) ql), (Abs (merge p q) pl), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: pl))
(Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: pl)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q pl)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p ql))
(Abs (merge p q) (merge p pl)), (Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql pl)), (Abs (merge p q) (merge pl q)), (Abs (merge p q) (merge pl p)), (Abs (merge p q) (merge pl ql)), (Abs (merge p q) (merge pl pl)), (Abs (merge p q) (insert a q))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a pl)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k pl)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (maybe_swap ql))
(Abs (merge p q) (maybe_swap pl)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ pl)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ pl)), (Abs (merge p q) (ql ++ q))
(Abs (merge p q) (ql ++ p)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ pl)), (Abs (merge p q) (pl ++ q)), (Abs (merge p q) (pl ++ p)), (Abs (merge p q) (pl ++ ql)), (Abs (merge p q) (pl ++ pl)), (Abs (merge p q) []), (Abs (merge p p) q), (Abs (merge p p) p)
(Abs (merge p p) ql), (Abs (merge p p) pl), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: pl)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: pl))
(Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q pl)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p pl)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge ql ql))
(Abs (merge p p) (merge ql pl)), (Abs (merge p p) (merge pl q)), (Abs (merge p p) (merge pl p)), (Abs (merge p p) (merge pl ql)), (Abs (merge p p) (merge pl pl)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a pl)), (Abs (merge p p) (insert k q))
(Abs (merge p p) (insert k p)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k pl)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap pl)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (q ++ ql))
(Abs (merge p p) (q ++ pl)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ pl)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ pl)), (Abs (merge p p) (pl ++ q))
(Abs (merge p p) (pl ++ p)), (Abs (merge p p) (pl ++ ql)), (Abs (merge p p) (pl ++ pl)), (Abs (merge p p) []), (Abs (merge p ql) q), (Abs (merge p ql) p), (Abs (merge p ql) ql), (Abs (merge p ql) pl), (Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: p))
(Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: pl)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: pl)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q pl))
(Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (merge p pl)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql pl)), (Abs (merge p ql) (merge pl q)), (Abs (merge p ql) (merge pl p)), (Abs (merge p ql) (merge pl ql))
(Abs (merge p ql) (merge pl pl)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a pl)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k pl)), (Abs (merge p ql) (maybe_swap q))
(Abs (merge p ql) (maybe_swap p)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap pl)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ pl)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) (p ++ ql))
(Abs (merge p ql) (p ++ pl)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ pl)), (Abs (merge p ql) (pl ++ q)), (Abs (merge p ql) (pl ++ p)), (Abs (merge p ql) (pl ++ ql)), (Abs (merge p ql) (pl ++ pl)), (Abs (merge p ql) [])
(Abs (merge p pl) q), (Abs (merge p pl) p), (Abs (merge p pl) ql), (Abs (merge p pl) pl), (Abs (merge p pl) (a :: q)), (Abs (merge p pl) (a :: p)), (Abs (merge p pl) (a :: ql)), (Abs (merge p pl) (a :: pl)), (Abs (merge p pl) (k :: q)), (Abs (merge p pl) (k :: p))
(Abs (merge p pl) (k :: ql)), (Abs (merge p pl) (k :: pl)), (Abs (merge p pl) (merge q q)), (Abs (merge p pl) (merge q p)), (Abs (merge p pl) (merge q ql)), (Abs (merge p pl) (merge q pl)), (Abs (merge p pl) (merge p q)), (Abs (merge p pl) (merge p p)), (Abs (merge p pl) (merge p ql)), (Abs (merge p pl) (merge ql q))
(Abs (merge p pl) (merge ql p)), (Abs (merge p pl) (merge ql ql)), (Abs (merge p pl) (merge ql pl)), (Abs (merge p pl) (merge pl q)), (Abs (merge p pl) (merge pl p)), (Abs (merge p pl) (merge pl ql)), (Abs (merge p pl) (merge pl pl)), (Abs (merge p pl) (insert a q)), (Abs (merge p pl) (insert a p)), (Abs (merge p pl) (insert a ql))
(Abs (merge p pl) (insert a pl)), (Abs (merge p pl) (insert k q)), (Abs (merge p pl) (insert k p)), (Abs (merge p pl) (insert k ql)), (Abs (merge p pl) (insert k pl)), (Abs (merge p pl) (maybe_swap q)), (Abs (merge p pl) (maybe_swap p)), (Abs (merge p pl) (maybe_swap ql)), (Abs (merge p pl) (maybe_swap pl)), (Abs (merge p pl) (q ++ q))
(Abs (merge p pl) (q ++ p)), (Abs (merge p pl) (q ++ ql)), (Abs (merge p pl) (q ++ pl)), (Abs (merge p pl) (p ++ q)), (Abs (merge p pl) (p ++ p)), (Abs (merge p pl) (p ++ ql)), (Abs (merge p pl) (p ++ pl)), (Abs (merge p pl) (ql ++ q)), (Abs (merge p pl) (ql ++ p)), (Abs (merge p pl) (ql ++ ql))
(Abs (merge p pl) (ql ++ pl)), (Abs (merge p pl) (pl ++ q)), (Abs (merge p pl) (pl ++ p)), (Abs (merge p pl) (pl ++ ql)), (Abs (merge p pl) (pl ++ pl)), (Abs (merge p pl) []), (Abs (merge ql q) q), (Abs (merge ql q) p), (Abs (merge ql q) ql), (Abs (merge ql q) pl)
(Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: pl)), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: pl)), (Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q p))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q pl)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p pl)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql pl)), (Abs (merge ql q) (merge pl q))
(Abs (merge ql q) (merge pl p)), (Abs (merge ql q) (merge pl ql)), (Abs (merge ql q) (merge pl pl)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a pl)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k p)), (Abs (merge ql q) (insert k ql))
(Abs (merge ql q) (insert k pl)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap pl)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ pl)), (Abs (merge ql q) (p ++ q))
(Abs (merge ql q) (p ++ p)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ pl)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ pl)), (Abs (merge ql q) (pl ++ q)), (Abs (merge ql q) (pl ++ p)), (Abs (merge ql q) (pl ++ ql))
(Abs (merge ql q) (pl ++ pl)), (Abs (merge ql q) []), (Abs (merge ql p) q), (Abs (merge ql p) p), (Abs (merge ql p) ql), (Abs (merge ql p) pl), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: p)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: pl))
(Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: pl)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q pl)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p p))
(Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p pl)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql pl)), (Abs (merge ql p) (merge pl q)), (Abs (merge ql p) (merge pl p)), (Abs (merge ql p) (merge pl ql)), (Abs (merge ql p) (merge pl pl)), (Abs (merge ql p) (insert a q))
(Abs (merge ql p) (insert a p)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a pl)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k pl)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (maybe_swap ql))
(Abs (merge ql p) (maybe_swap pl)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (q ++ ql)), (Abs (merge ql p) (q ++ pl)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ pl)), (Abs (merge ql p) (ql ++ q))
(Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ pl)), (Abs (merge ql p) (pl ++ q)), (Abs (merge ql p) (pl ++ p)), (Abs (merge ql p) (pl ++ ql)), (Abs (merge ql p) (pl ++ pl)), (Abs (merge ql p) []), (Abs (merge ql ql) q), (Abs (merge ql ql) p)
(Abs (merge ql ql) ql), (Abs (merge ql ql) pl), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: pl)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: pl))
(Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q pl)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p pl)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge ql pl)), (Abs (merge ql ql) (merge pl q)), (Abs (merge ql ql) (merge pl p)), (Abs (merge ql ql) (merge pl ql)), (Abs (merge ql ql) (merge pl pl)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a pl)), (Abs (merge ql ql) (insert k q))
(Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k pl)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap pl)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (q ++ ql))
(Abs (merge ql ql) (q ++ pl)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) (p ++ ql)), (Abs (merge ql ql) (p ++ pl)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ pl)), (Abs (merge ql ql) (pl ++ q))
(Abs (merge ql ql) (pl ++ p)), (Abs (merge ql ql) (pl ++ ql)), (Abs (merge ql ql) (pl ++ pl)), (Abs (merge ql ql) []), (Abs (merge ql pl) q), (Abs (merge ql pl) p), (Abs (merge ql pl) ql), (Abs (merge ql pl) pl), (Abs (merge ql pl) (a :: q)), (Abs (merge ql pl) (a :: p))
(Abs (merge ql pl) (a :: ql)), (Abs (merge ql pl) (a :: pl)), (Abs (merge ql pl) (k :: q)), (Abs (merge ql pl) (k :: p)), (Abs (merge ql pl) (k :: ql)), (Abs (merge ql pl) (k :: pl)), (Abs (merge ql pl) (merge q q)), (Abs (merge ql pl) (merge q p)), (Abs (merge ql pl) (merge q ql)), (Abs (merge ql pl) (merge q pl))
(Abs (merge ql pl) (merge p q)), (Abs (merge ql pl) (merge p p)), (Abs (merge ql pl) (merge p ql)), (Abs (merge ql pl) (merge p pl)), (Abs (merge ql pl) (merge ql q)), (Abs (merge ql pl) (merge ql p)), (Abs (merge ql pl) (merge ql ql)), (Abs (merge ql pl) (merge pl q)), (Abs (merge ql pl) (merge pl p)), (Abs (merge ql pl) (merge pl ql))
(Abs (merge ql pl) (merge pl pl)), (Abs (merge ql pl) (insert a q)), (Abs (merge ql pl) (insert a p)), (Abs (merge ql pl) (insert a ql)), (Abs (merge ql pl) (insert a pl)), (Abs (merge ql pl) (insert k q)), (Abs (merge ql pl) (insert k p)), (Abs (merge ql pl) (insert k ql)), (Abs (merge ql pl) (insert k pl)), (Abs (merge ql pl) (maybe_swap q))
(Abs (merge ql pl) (maybe_swap p)), (Abs (merge ql pl) (maybe_swap ql)), (Abs (merge ql pl) (maybe_swap pl)), (Abs (merge ql pl) (q ++ q)), (Abs (merge ql pl) (q ++ p)), (Abs (merge ql pl) (q ++ ql)), (Abs (merge ql pl) (q ++ pl)), (Abs (merge ql pl) (p ++ q)), (Abs (merge ql pl) (p ++ p)), (Abs (merge ql pl) (p ++ ql))
(Abs (merge ql pl) (p ++ pl)), (Abs (merge ql pl) (ql ++ q)), (Abs (merge ql pl) (ql ++ p)), (Abs (merge ql pl) (ql ++ ql)), (Abs (merge ql pl) (ql ++ pl)), (Abs (merge ql pl) (pl ++ q)), (Abs (merge ql pl) (pl ++ p)), (Abs (merge ql pl) (pl ++ ql)), (Abs (merge ql pl) (pl ++ pl)), (Abs (merge ql pl) [])
(Abs (merge pl q) q), (Abs (merge pl q) p), (Abs (merge pl q) ql), (Abs (merge pl q) pl), (Abs (merge pl q) (a :: q)), (Abs (merge pl q) (a :: p)), (Abs (merge pl q) (a :: ql)), (Abs (merge pl q) (a :: pl)), (Abs (merge pl q) (k :: q)), (Abs (merge pl q) (k :: p))
(Abs (merge pl q) (k :: ql)), (Abs (merge pl q) (k :: pl)), (Abs (merge pl q) (merge q q)), (Abs (merge pl q) (merge q p)), (Abs (merge pl q) (merge q ql)), (Abs (merge pl q) (merge q pl)), (Abs (merge pl q) (merge p q)), (Abs (merge pl q) (merge p p)), (Abs (merge pl q) (merge p ql)), (Abs (merge pl q) (merge p pl))
(Abs (merge pl q) (merge ql q)), (Abs (merge pl q) (merge ql p)), (Abs (merge pl q) (merge ql ql)), (Abs (merge pl q) (merge ql pl)), (Abs (merge pl q) (merge pl p)), (Abs (merge pl q) (merge pl ql)), (Abs (merge pl q) (merge pl pl)), (Abs (merge pl q) (insert a q)), (Abs (merge pl q) (insert a p)), (Abs (merge pl q) (insert a ql))
(Abs (merge pl q) (insert a pl)), (Abs (merge pl q) (insert k q)), (Abs (merge pl q) (insert k p)), (Abs (merge pl q) (insert k ql)), (Abs (merge pl q) (insert k pl)), (Abs (merge pl q) (maybe_swap q)), (Abs (merge pl q) (maybe_swap p)), (Abs (merge pl q) (maybe_swap ql)), (Abs (merge pl q) (maybe_swap pl)), (Abs (merge pl q) (q ++ q))
(Abs (merge pl q) (q ++ p)), (Abs (merge pl q) (q ++ ql)), (Abs (merge pl q) (q ++ pl)), (Abs (merge pl q) (p ++ q)), (Abs (merge pl q) (p ++ p)), (Abs (merge pl q) (p ++ ql)), (Abs (merge pl q) (p ++ pl)), (Abs (merge pl q) (ql ++ q)), (Abs (merge pl q) (ql ++ p)), (Abs (merge pl q) (ql ++ ql))
(Abs (merge pl q) (ql ++ pl)), (Abs (merge pl q) (pl ++ q)), (Abs (merge pl q) (pl ++ p)), (Abs (merge pl q) (pl ++ ql)), (Abs (merge pl q) (pl ++ pl)), (Abs (merge pl q) []), (Abs (merge pl p) q), (Abs (merge pl p) p), (Abs (merge pl p) ql), (Abs (merge pl p) pl)
(Abs (merge pl p) (a :: q)), (Abs (merge pl p) (a :: p)), (Abs (merge pl p) (a :: ql)), (Abs (merge pl p) (a :: pl)), (Abs (merge pl p) (k :: q)), (Abs (merge pl p) (k :: p)), (Abs (merge pl p) (k :: ql)), (Abs (merge pl p) (k :: pl)), (Abs (merge pl p) (merge q q)), (Abs (merge pl p) (merge q p))
(Abs (merge pl p) (merge q ql)), (Abs (merge pl p) (merge q pl)), (Abs (merge pl p) (merge p q)), (Abs (merge pl p) (merge p p)), (Abs (merge pl p) (merge p ql)), (Abs (merge pl p) (merge p pl)), (Abs (merge pl p) (merge ql q)), (Abs (merge pl p) (merge ql p)), (Abs (merge pl p) (merge ql ql)), (Abs (merge pl p) (merge ql pl))
(Abs (merge pl p) (merge pl q)), (Abs (merge pl p) (merge pl ql)), (Abs (merge pl p) (merge pl pl)), (Abs (merge pl p) (insert a q)), (Abs (merge pl p) (insert a p)), (Abs (merge pl p) (insert a ql)), (Abs (merge pl p) (insert a pl)), (Abs (merge pl p) (insert k q)), (Abs (merge pl p) (insert k p)), (Abs (merge pl p) (insert k ql))
(Abs (merge pl p) (insert k pl)), (Abs (merge pl p) (maybe_swap q)), (Abs (merge pl p) (maybe_swap p)), (Abs (merge pl p) (maybe_swap ql)), (Abs (merge pl p) (maybe_swap pl)), (Abs (merge pl p) (q ++ q)), (Abs (merge pl p) (q ++ p)), (Abs (merge pl p) (q ++ ql)), (Abs (merge pl p) (q ++ pl)), (Abs (merge pl p) (p ++ q))
(Abs (merge pl p) (p ++ p)), (Abs (merge pl p) (p ++ ql)), (Abs (merge pl p) (p ++ pl)), (Abs (merge pl p) (ql ++ q)), (Abs (merge pl p) (ql ++ p)), (Abs (merge pl p) (ql ++ ql)), (Abs (merge pl p) (ql ++ pl)), (Abs (merge pl p) (pl ++ q)), (Abs (merge pl p) (pl ++ p)), (Abs (merge pl p) (pl ++ ql))
(Abs (merge pl p) (pl ++ pl)), (Abs (merge pl p) []), (Abs (merge pl ql) q), (Abs (merge pl ql) p), (Abs (merge pl ql) ql), (Abs (merge pl ql) pl), (Abs (merge pl ql) (a :: q)), (Abs (merge pl ql) (a :: p)), (Abs (merge pl ql) (a :: ql)), (Abs (merge pl ql) (a :: pl))
(Abs (merge pl ql) (k :: q)), (Abs (merge pl ql) (k :: p)), (Abs (merge pl ql) (k :: ql)), (Abs (merge pl ql) (k :: pl)), (Abs (merge pl ql) (merge q q)), (Abs (merge pl ql) (merge q p)), (Abs (merge pl ql) (merge q ql)), (Abs (merge pl ql) (merge q pl)), (Abs (merge pl ql) (merge p q)), (Abs (merge pl ql) (merge p p))
(Abs (merge pl ql) (merge p ql)), (Abs (merge pl ql) (merge p pl)), (Abs (merge pl ql) (merge ql q)), (Abs (merge pl ql) (merge ql p)), (Abs (merge pl ql) (merge ql ql)), (Abs (merge pl ql) (merge ql pl)), (Abs (merge pl ql) (merge pl q)), (Abs (merge pl ql) (merge pl p)), (Abs (merge pl ql) (merge pl pl)), (Abs (merge pl ql) (insert a q))
(Abs (merge pl ql) (insert a p)), (Abs (merge pl ql) (insert a ql)), (Abs (merge pl ql) (insert a pl)), (Abs (merge pl ql) (insert k q)), (Abs (merge pl ql) (insert k p)), (Abs (merge pl ql) (insert k ql)), (Abs (merge pl ql) (insert k pl)), (Abs (merge pl ql) (maybe_swap q)), (Abs (merge pl ql) (maybe_swap p)), (Abs (merge pl ql) (maybe_swap ql))
(Abs (merge pl ql) (maybe_swap pl)), (Abs (merge pl ql) (q ++ q)), (Abs (merge pl ql) (q ++ p)), (Abs (merge pl ql) (q ++ ql)), (Abs (merge pl ql) (q ++ pl)), (Abs (merge pl ql) (p ++ q)), (Abs (merge pl ql) (p ++ p)), (Abs (merge pl ql) (p ++ ql)), (Abs (merge pl ql) (p ++ pl)), (Abs (merge pl ql) (ql ++ q))
(Abs (merge pl ql) (ql ++ p)), (Abs (merge pl ql) (ql ++ ql)), (Abs (merge pl ql) (ql ++ pl)), (Abs (merge pl ql) (pl ++ q)), (Abs (merge pl ql) (pl ++ p)), (Abs (merge pl ql) (pl ++ ql)), (Abs (merge pl ql) (pl ++ pl)), (Abs (merge pl ql) []), (Abs (merge pl pl) q), (Abs (merge pl pl) p)
(Abs (merge pl pl) ql), (Abs (merge pl pl) pl), (Abs (merge pl pl) (a :: q)), (Abs (merge pl pl) (a :: p)), (Abs (merge pl pl) (a :: ql)), (Abs (merge pl pl) (a :: pl)), (Abs (merge pl pl) (k :: q)), (Abs (merge pl pl) (k :: p)), (Abs (merge pl pl) (k :: ql)), (Abs (merge pl pl) (k :: pl))
(Abs (merge pl pl) (merge q q)), (Abs (merge pl pl) (merge q p)), (Abs (merge pl pl) (merge q ql)), (Abs (merge pl pl) (merge q pl)), (Abs (merge pl pl) (merge p q)), (Abs (merge pl pl) (merge p p)), (Abs (merge pl pl) (merge p ql)), (Abs (merge pl pl) (merge p pl)), (Abs (merge pl pl) (merge ql q)), (Abs (merge pl pl) (merge ql p))
(Abs (merge pl pl) (merge ql ql)), (Abs (merge pl pl) (merge ql pl)), (Abs (merge pl pl) (merge pl q)), (Abs (merge pl pl) (merge pl p)), (Abs (merge pl pl) (merge pl ql)), (Abs (merge pl pl) (insert a q)), (Abs (merge pl pl) (insert a p)), (Abs (merge pl pl) (insert a ql)), (Abs (merge pl pl) (insert a pl)), (Abs (merge pl pl) (insert k q))
(Abs (merge pl pl) (insert k p)), (Abs (merge pl pl) (insert k ql)), (Abs (merge pl pl) (insert k pl)), (Abs (merge pl pl) (maybe_swap q)), (Abs (merge pl pl) (maybe_swap p)), (Abs (merge pl pl) (maybe_swap ql)), (Abs (merge pl pl) (maybe_swap pl)), (Abs (merge pl pl) (q ++ q)), (Abs (merge pl pl) (q ++ p)), (Abs (merge pl pl) (q ++ ql))
(Abs (merge pl pl) (q ++ pl)), (Abs (merge pl pl) (p ++ q)), (Abs (merge pl pl) (p ++ p)), (Abs (merge pl pl) (p ++ ql)), (Abs (merge pl pl) (p ++ pl)), (Abs (merge pl pl) (ql ++ q)), (Abs (merge pl pl) (ql ++ p)), (Abs (merge pl pl) (ql ++ ql)), (Abs (merge pl pl) (ql ++ pl)), (Abs (merge pl pl) (pl ++ q))
(Abs (merge pl pl) (pl ++ p)), (Abs (merge pl pl) (pl ++ ql)), (Abs (merge pl pl) (pl ++ pl)), (Abs (merge pl pl) []), (Abs (insert a q) q), (Abs (insert a q) p), (Abs (insert a q) ql), (Abs (insert a q) pl), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: p))
(Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: pl)), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: pl)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q pl))
(Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p pl)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql pl)), (Abs (insert a q) (merge pl q)), (Abs (insert a q) (merge pl p))
(Abs (insert a q) (merge pl ql)), (Abs (insert a q) (merge pl pl)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a pl)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k pl)), (Abs (insert a q) (maybe_swap q))
(Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap pl)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ pl)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ ql))
(Abs (insert a q) (p ++ pl)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ pl)), (Abs (insert a q) (pl ++ q)), (Abs (insert a q) (pl ++ p)), (Abs (insert a q) (pl ++ ql)), (Abs (insert a q) (pl ++ pl)), (Abs (insert a q) [])
(Abs (insert a p) q), (Abs (insert a p) p), (Abs (insert a p) ql), (Abs (insert a p) pl), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: pl)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: pl)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q pl)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p pl))
(Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql pl)), (Abs (insert a p) (merge pl q)), (Abs (insert a p) (merge pl p)), (Abs (insert a p) (merge pl ql)), (Abs (insert a p) (merge pl pl)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql))
(Abs (insert a p) (insert a pl)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k pl)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap pl)), (Abs (insert a p) (q ++ q))
(Abs (insert a p) (q ++ p)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ pl)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ pl)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (ql ++ ql))
(Abs (insert a p) (ql ++ pl)), (Abs (insert a p) (pl ++ q)), (Abs (insert a p) (pl ++ p)), (Abs (insert a p) (pl ++ ql)), (Abs (insert a p) (pl ++ pl)), (Abs (insert a p) []), (Abs (insert a ql) q), (Abs (insert a ql) p), (Abs (insert a ql) ql), (Abs (insert a ql) pl)
(Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: pl)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: pl)), (Abs (insert a ql) (merge q q)), (Abs (insert a ql) (merge q p))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q pl)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p pl)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql pl))
(Abs (insert a ql) (merge pl q)), (Abs (insert a ql) (merge pl p)), (Abs (insert a ql) (merge pl ql)), (Abs (insert a ql) (merge pl pl)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (insert a pl)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k pl)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap pl)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ pl)), (Abs (insert a ql) (p ++ q))
(Abs (insert a ql) (p ++ p)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ pl)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ pl)), (Abs (insert a ql) (pl ++ q)), (Abs (insert a ql) (pl ++ p)), (Abs (insert a ql) (pl ++ ql))
(Abs (insert a ql) (pl ++ pl)), (Abs (insert a ql) []), (Abs (insert a pl) q), (Abs (insert a pl) p), (Abs (insert a pl) ql), (Abs (insert a pl) pl), (Abs (insert a pl) (a :: q)), (Abs (insert a pl) (a :: p)), (Abs (insert a pl) (a :: ql)), (Abs (insert a pl) (a :: pl))
(Abs (insert a pl) (k :: q)), (Abs (insert a pl) (k :: p)), (Abs (insert a pl) (k :: ql)), (Abs (insert a pl) (k :: pl)), (Abs (insert a pl) (merge q q)), (Abs (insert a pl) (merge q p)), (Abs (insert a pl) (merge q ql)), (Abs (insert a pl) (merge q pl)), (Abs (insert a pl) (merge p q)), (Abs (insert a pl) (merge p p))
(Abs (insert a pl) (merge p ql)), (Abs (insert a pl) (merge p pl)), (Abs (insert a pl) (merge ql q)), (Abs (insert a pl) (merge ql p)), (Abs (insert a pl) (merge ql ql)), (Abs (insert a pl) (merge ql pl)), (Abs (insert a pl) (merge pl q)), (Abs (insert a pl) (merge pl p)), (Abs (insert a pl) (merge pl ql)), (Abs (insert a pl) (merge pl pl))
(Abs (insert a pl) (insert a q)), (Abs (insert a pl) (insert a p)), (Abs (insert a pl) (insert a ql)), (Abs (insert a pl) (insert k q)), (Abs (insert a pl) (insert k p)), (Abs (insert a pl) (insert k ql)), (Abs (insert a pl) (insert k pl)), (Abs (insert a pl) (maybe_swap q)), (Abs (insert a pl) (maybe_swap p)), (Abs (insert a pl) (maybe_swap ql))
(Abs (insert a pl) (maybe_swap pl)), (Abs (insert a pl) (q ++ q)), (Abs (insert a pl) (q ++ p)), (Abs (insert a pl) (q ++ ql)), (Abs (insert a pl) (q ++ pl)), (Abs (insert a pl) (p ++ q)), (Abs (insert a pl) (p ++ p)), (Abs (insert a pl) (p ++ ql)), (Abs (insert a pl) (p ++ pl)), (Abs (insert a pl) (ql ++ q))
(Abs (insert a pl) (ql ++ p)), (Abs (insert a pl) (ql ++ ql)), (Abs (insert a pl) (ql ++ pl)), (Abs (insert a pl) (pl ++ q)), (Abs (insert a pl) (pl ++ p)), (Abs (insert a pl) (pl ++ ql)), (Abs (insert a pl) (pl ++ pl)), (Abs (insert a pl) []), (Abs (insert k q) q), (Abs (insert k q) p)
(Abs (insert k q) ql), (Abs (insert k q) pl), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: pl)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: pl))
(Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q pl)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p pl)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql p))
(Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql pl)), (Abs (insert k q) (merge pl q)), (Abs (insert k q) (merge pl p)), (Abs (insert k q) (merge pl ql)), (Abs (insert k q) (merge pl pl)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a pl))
(Abs (insert k q) (insert k p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k pl)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap pl)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (q ++ ql))
(Abs (insert k q) (q ++ pl)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ pl)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ pl)), (Abs (insert k q) (pl ++ q))
(Abs (insert k q) (pl ++ p)), (Abs (insert k q) (pl ++ ql)), (Abs (insert k q) (pl ++ pl)), (Abs (insert k q) []), (Abs (insert k p) q), (Abs (insert k p) p), (Abs (insert k p) ql), (Abs (insert k p) pl), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: p))
(Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: pl)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: pl)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q pl))
(Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p pl)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql pl)), (Abs (insert k p) (merge pl q)), (Abs (insert k p) (merge pl p))
(Abs (insert k p) (merge pl ql)), (Abs (insert k p) (merge pl pl)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a pl)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k pl)), (Abs (insert k p) (maybe_swap q))
(Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap pl)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ pl)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ ql))
(Abs (insert k p) (p ++ pl)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ pl)), (Abs (insert k p) (pl ++ q)), (Abs (insert k p) (pl ++ p)), (Abs (insert k p) (pl ++ ql)), (Abs (insert k p) (pl ++ pl)), (Abs (insert k p) [])
(Abs (insert k ql) q), (Abs (insert k ql) p), (Abs (insert k ql) ql), (Abs (insert k ql) pl), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: p)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: pl)), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: p))
(Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: pl)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q pl)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p pl))
(Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql pl)), (Abs (insert k ql) (merge pl q)), (Abs (insert k ql) (merge pl p)), (Abs (insert k ql) (merge pl ql)), (Abs (insert k ql) (merge pl pl)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a p))
(Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a pl)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert k pl)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap pl)), (Abs (insert k ql) (q ++ q))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ pl)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ pl)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (ql ++ ql))
(Abs (insert k ql) (ql ++ pl)), (Abs (insert k ql) (pl ++ q)), (Abs (insert k ql) (pl ++ p)), (Abs (insert k ql) (pl ++ ql)), (Abs (insert k ql) (pl ++ pl)), (Abs (insert k ql) []), (Abs (insert k pl) q), (Abs (insert k pl) p), (Abs (insert k pl) ql), (Abs (insert k pl) pl)
(Abs (insert k pl) (a :: q)), (Abs (insert k pl) (a :: p)), (Abs (insert k pl) (a :: ql)), (Abs (insert k pl) (a :: pl)), (Abs (insert k pl) (k :: q)), (Abs (insert k pl) (k :: p)), (Abs (insert k pl) (k :: ql)), (Abs (insert k pl) (k :: pl)), (Abs (insert k pl) (merge q q)), (Abs (insert k pl) (merge q p))
(Abs (insert k pl) (merge q ql)), (Abs (insert k pl) (merge q pl)), (Abs (insert k pl) (merge p q)), (Abs (insert k pl) (merge p p)), (Abs (insert k pl) (merge p ql)), (Abs (insert k pl) (merge p pl)), (Abs (insert k pl) (merge ql q)), (Abs (insert k pl) (merge ql p)), (Abs (insert k pl) (merge ql ql)), (Abs (insert k pl) (merge ql pl))
(Abs (insert k pl) (merge pl q)), (Abs (insert k pl) (merge pl p)), (Abs (insert k pl) (merge pl ql)), (Abs (insert k pl) (merge pl pl)), (Abs (insert k pl) (insert a q)), (Abs (insert k pl) (insert a p)), (Abs (insert k pl) (insert a ql)), (Abs (insert k pl) (insert a pl)), (Abs (insert k pl) (insert k q)), (Abs (insert k pl) (insert k p))
(Abs (insert k pl) (insert k ql)), (Abs (insert k pl) (maybe_swap q)), (Abs (insert k pl) (maybe_swap p)), (Abs (insert k pl) (maybe_swap ql)), (Abs (insert k pl) (maybe_swap pl)), (Abs (insert k pl) (q ++ q)), (Abs (insert k pl) (q ++ p)), (Abs (insert k pl) (q ++ ql)), (Abs (insert k pl) (q ++ pl)), (Abs (insert k pl) (p ++ q))
(Abs (insert k pl) (p ++ p)), (Abs (insert k pl) (p ++ ql)), (Abs (insert k pl) (p ++ pl)), (Abs (insert k pl) (ql ++ q)), (Abs (insert k pl) (ql ++ p)), (Abs (insert k pl) (ql ++ ql)), (Abs (insert k pl) (ql ++ pl)), (Abs (insert k pl) (pl ++ q)), (Abs (insert k pl) (pl ++ p)), (Abs (insert k pl) (pl ++ ql))
(Abs (insert k pl) (pl ++ pl)), (Abs (insert k pl) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) p), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) pl), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: pl))
(Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: pl)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q pl)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p pl)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql pl)), (Abs (maybe_swap q) (merge pl q)), (Abs (maybe_swap q) (merge pl p)), (Abs (maybe_swap q) (merge pl ql)), (Abs (maybe_swap q) (merge pl pl))
(Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a pl)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k pl)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (maybe_swap ql))
(Abs (maybe_swap q) (maybe_swap pl)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ pl)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ pl)), (Abs (maybe_swap q) (ql ++ q))
(Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ pl)), (Abs (maybe_swap q) (pl ++ q)), (Abs (maybe_swap q) (pl ++ p)), (Abs (maybe_swap q) (pl ++ ql)), (Abs (maybe_swap q) (pl ++ pl)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) p)
(Abs (maybe_swap p) ql), (Abs (maybe_swap p) pl), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: pl)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: pl))
(Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q pl)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p pl)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql p))
(Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql pl)), (Abs (maybe_swap p) (merge pl q)), (Abs (maybe_swap p) (merge pl p)), (Abs (maybe_swap p) (merge pl ql)), (Abs (maybe_swap p) (merge pl pl)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a pl))
(Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k pl)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap pl)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (q ++ ql))
(Abs (maybe_swap p) (q ++ pl)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ pl)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ pl)), (Abs (maybe_swap p) (pl ++ q))
(Abs (maybe_swap p) (pl ++ p)), (Abs (maybe_swap p) (pl ++ ql)), (Abs (maybe_swap p) (pl ++ pl)), (Abs (maybe_swap p) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) p), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) pl), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: p))
(Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: pl)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: pl)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q pl))
(Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p pl)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql pl)), (Abs (maybe_swap ql) (merge pl q)), (Abs (maybe_swap ql) (merge pl p))
(Abs (maybe_swap ql) (merge pl ql)), (Abs (maybe_swap ql) (merge pl pl)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a pl)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k pl))
(Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (maybe_swap pl)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ pl)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) (p ++ ql))
(Abs (maybe_swap ql) (p ++ pl)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ pl)), (Abs (maybe_swap ql) (pl ++ q)), (Abs (maybe_swap ql) (pl ++ p)), (Abs (maybe_swap ql) (pl ++ ql)), (Abs (maybe_swap ql) (pl ++ pl)), (Abs (maybe_swap ql) [])
(Abs (maybe_swap pl) q), (Abs (maybe_swap pl) p), (Abs (maybe_swap pl) ql), (Abs (maybe_swap pl) pl), (Abs (maybe_swap pl) (a :: q)), (Abs (maybe_swap pl) (a :: p)), (Abs (maybe_swap pl) (a :: ql)), (Abs (maybe_swap pl) (a :: pl)), (Abs (maybe_swap pl) (k :: q)), (Abs (maybe_swap pl) (k :: p))
(Abs (maybe_swap pl) (k :: ql)), (Abs (maybe_swap pl) (k :: pl)), (Abs (maybe_swap pl) (merge q q)), (Abs (maybe_swap pl) (merge q p)), (Abs (maybe_swap pl) (merge q ql)), (Abs (maybe_swap pl) (merge q pl)), (Abs (maybe_swap pl) (merge p q)), (Abs (maybe_swap pl) (merge p p)), (Abs (maybe_swap pl) (merge p ql)), (Abs (maybe_swap pl) (merge p pl))
(Abs (maybe_swap pl) (merge ql q)), (Abs (maybe_swap pl) (merge ql p)), (Abs (maybe_swap pl) (merge ql ql)), (Abs (maybe_swap pl) (merge ql pl)), (Abs (maybe_swap pl) (merge pl q)), (Abs (maybe_swap pl) (merge pl p)), (Abs (maybe_swap pl) (merge pl ql)), (Abs (maybe_swap pl) (merge pl pl)), (Abs (maybe_swap pl) (insert a q)), (Abs (maybe_swap pl) (insert a p))
(Abs (maybe_swap pl) (insert a ql)), (Abs (maybe_swap pl) (insert a pl)), (Abs (maybe_swap pl) (insert k q)), (Abs (maybe_swap pl) (insert k p)), (Abs (maybe_swap pl) (insert k ql)), (Abs (maybe_swap pl) (insert k pl)), (Abs (maybe_swap pl) (maybe_swap q)), (Abs (maybe_swap pl) (maybe_swap p)), (Abs (maybe_swap pl) (maybe_swap ql)), (Abs (maybe_swap pl) (q ++ q))
(Abs (maybe_swap pl) (q ++ p)), (Abs (maybe_swap pl) (q ++ ql)), (Abs (maybe_swap pl) (q ++ pl)), (Abs (maybe_swap pl) (p ++ q)), (Abs (maybe_swap pl) (p ++ p)), (Abs (maybe_swap pl) (p ++ ql)), (Abs (maybe_swap pl) (p ++ pl)), (Abs (maybe_swap pl) (ql ++ q)), (Abs (maybe_swap pl) (ql ++ p)), (Abs (maybe_swap pl) (ql ++ ql))
(Abs (maybe_swap pl) (ql ++ pl)), (Abs (maybe_swap pl) (pl ++ q)), (Abs (maybe_swap pl) (pl ++ p)), (Abs (maybe_swap pl) (pl ++ ql)), (Abs (maybe_swap pl) (pl ++ pl)), (Abs (maybe_swap pl) []), (Abs (q ++ q) q), (Abs (q ++ q) p), (Abs (q ++ q) ql), (Abs (q ++ q) pl)
(Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: pl)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: pl)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q p))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q pl)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p pl)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql pl))
(Abs (q ++ q) (merge pl q)), (Abs (q ++ q) (merge pl p)), (Abs (q ++ q) (merge pl ql)), (Abs (q ++ q) (merge pl pl)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a pl)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k p))
(Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k pl)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap pl)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ pl)), (Abs (q ++ q) (p ++ q))
(Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ pl)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ pl)), (Abs (q ++ q) (pl ++ q)), (Abs (q ++ q) (pl ++ p)), (Abs (q ++ q) (pl ++ ql))
(Abs (q ++ q) (pl ++ pl)), (Abs (q ++ q) []), (Abs (q ++ p) q), (Abs (q ++ p) p), (Abs (q ++ p) ql), (Abs (q ++ p) pl), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: pl))
(Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: pl)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q pl)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p pl)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql pl)), (Abs (q ++ p) (merge pl q)), (Abs (q ++ p) (merge pl p)), (Abs (q ++ p) (merge pl ql)), (Abs (q ++ p) (merge pl pl))
(Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a pl)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k pl)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap p))
(Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap pl)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ pl)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ pl)), (Abs (q ++ p) (ql ++ q))
(Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ pl)), (Abs (q ++ p) (pl ++ q)), (Abs (q ++ p) (pl ++ p)), (Abs (q ++ p) (pl ++ ql)), (Abs (q ++ p) (pl ++ pl)), (Abs (q ++ p) []), (Abs (q ++ ql) q), (Abs (q ++ ql) p)
(Abs (q ++ ql) ql), (Abs (q ++ ql) pl), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: pl)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: pl))
(Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q pl)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p pl)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql p))
(Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql pl)), (Abs (q ++ ql) (merge pl q)), (Abs (q ++ ql) (merge pl p)), (Abs (q ++ ql) (merge pl ql)), (Abs (q ++ ql) (merge pl pl)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a pl))
(Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k pl)), (Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap pl)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p))
(Abs (q ++ ql) (q ++ pl)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ pl)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ pl)), (Abs (q ++ ql) (pl ++ q))
(Abs (q ++ ql) (pl ++ p)), (Abs (q ++ ql) (pl ++ ql)), (Abs (q ++ ql) (pl ++ pl)), (Abs (q ++ ql) []), (Abs (q ++ pl) q), (Abs (q ++ pl) p), (Abs (q ++ pl) ql), (Abs (q ++ pl) pl), (Abs (q ++ pl) (a :: q)), (Abs (q ++ pl) (a :: p))
(Abs (q ++ pl) (a :: ql)), (Abs (q ++ pl) (a :: pl)), (Abs (q ++ pl) (k :: q)), (Abs (q ++ pl) (k :: p)), (Abs (q ++ pl) (k :: ql)), (Abs (q ++ pl) (k :: pl)), (Abs (q ++ pl) (merge q q)), (Abs (q ++ pl) (merge q p)), (Abs (q ++ pl) (merge q ql)), (Abs (q ++ pl) (merge q pl))
(Abs (q ++ pl) (merge p q)), (Abs (q ++ pl) (merge p p)), (Abs (q ++ pl) (merge p ql)), (Abs (q ++ pl) (merge p pl)), (Abs (q ++ pl) (merge ql q)), (Abs (q ++ pl) (merge ql p)), (Abs (q ++ pl) (merge ql ql)), (Abs (q ++ pl) (merge ql pl)), (Abs (q ++ pl) (merge pl q)), (Abs (q ++ pl) (merge pl p))
(Abs (q ++ pl) (merge pl ql)), (Abs (q ++ pl) (merge pl pl)), (Abs (q ++ pl) (insert a q)), (Abs (q ++ pl) (insert a p)), (Abs (q ++ pl) (insert a ql)), (Abs (q ++ pl) (insert a pl)), (Abs (q ++ pl) (insert k q)), (Abs (q ++ pl) (insert k p)), (Abs (q ++ pl) (insert k ql)), (Abs (q ++ pl) (insert k pl))
(Abs (q ++ pl) (maybe_swap q)), (Abs (q ++ pl) (maybe_swap p)), (Abs (q ++ pl) (maybe_swap ql)), (Abs (q ++ pl) (maybe_swap pl)), (Abs (q ++ pl) (q ++ q)), (Abs (q ++ pl) (q ++ p)), (Abs (q ++ pl) (q ++ ql)), (Abs (q ++ pl) (p ++ q)), (Abs (q ++ pl) (p ++ p)), (Abs (q ++ pl) (p ++ ql))
(Abs (q ++ pl) (p ++ pl)), (Abs (q ++ pl) (ql ++ q)), (Abs (q ++ pl) (ql ++ p)), (Abs (q ++ pl) (ql ++ ql)), (Abs (q ++ pl) (ql ++ pl)), (Abs (q ++ pl) (pl ++ q)), (Abs (q ++ pl) (pl ++ p)), (Abs (q ++ pl) (pl ++ ql)), (Abs (q ++ pl) (pl ++ pl)), (Abs (q ++ pl) [])
(Abs (p ++ q) q), (Abs (p ++ q) p), (Abs (p ++ q) ql), (Abs (p ++ q) pl), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: pl)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: pl)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q pl)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p pl))
(Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql pl)), (Abs (p ++ q) (merge pl q)), (Abs (p ++ q) (merge pl p)), (Abs (p ++ q) (merge pl ql)), (Abs (p ++ q) (merge pl pl)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a pl)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k pl)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap pl))
(Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ pl)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ pl)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (ql ++ ql))
(Abs (p ++ q) (ql ++ pl)), (Abs (p ++ q) (pl ++ q)), (Abs (p ++ q) (pl ++ p)), (Abs (p ++ q) (pl ++ ql)), (Abs (p ++ q) (pl ++ pl)), (Abs (p ++ q) []), (Abs (p ++ p) q), (Abs (p ++ p) p), (Abs (p ++ p) ql), (Abs (p ++ p) pl)
(Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: pl)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: pl)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q pl)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p pl)), (Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql pl))
(Abs (p ++ p) (merge pl q)), (Abs (p ++ p) (merge pl p)), (Abs (p ++ p) (merge pl ql)), (Abs (p ++ p) (merge pl pl)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a pl)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k p))
(Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k pl)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap pl)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ pl))
(Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ pl)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ pl)), (Abs (p ++ p) (pl ++ q)), (Abs (p ++ p) (pl ++ p)), (Abs (p ++ p) (pl ++ ql))
(Abs (p ++ p) (pl ++ pl)), (Abs (p ++ p) []), (Abs (p ++ ql) q), (Abs (p ++ ql) p), (Abs (p ++ ql) ql), (Abs (p ++ ql) pl), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: pl))
(Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: pl)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q pl)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p pl)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql pl)), (Abs (p ++ ql) (merge pl q)), (Abs (p ++ ql) (merge pl p)), (Abs (p ++ ql) (merge pl ql)), (Abs (p ++ ql) (merge pl pl))
(Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a pl)), (Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k pl)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap p))
(Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap pl)), (Abs (p ++ ql) (q ++ q)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ pl)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) (p ++ pl)), (Abs (p ++ ql) (ql ++ q))
(Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ pl)), (Abs (p ++ ql) (pl ++ q)), (Abs (p ++ ql) (pl ++ p)), (Abs (p ++ ql) (pl ++ ql)), (Abs (p ++ ql) (pl ++ pl)), (Abs (p ++ ql) []), (Abs (p ++ pl) q), (Abs (p ++ pl) p)
(Abs (p ++ pl) ql), (Abs (p ++ pl) pl), (Abs (p ++ pl) (a :: q)), (Abs (p ++ pl) (a :: p)), (Abs (p ++ pl) (a :: ql)), (Abs (p ++ pl) (a :: pl)), (Abs (p ++ pl) (k :: q)), (Abs (p ++ pl) (k :: p)), (Abs (p ++ pl) (k :: ql)), (Abs (p ++ pl) (k :: pl))
(Abs (p ++ pl) (merge q q)), (Abs (p ++ pl) (merge q p)), (Abs (p ++ pl) (merge q ql)), (Abs (p ++ pl) (merge q pl)), (Abs (p ++ pl) (merge p q)), (Abs (p ++ pl) (merge p p)), (Abs (p ++ pl) (merge p ql)), (Abs (p ++ pl) (merge p pl)), (Abs (p ++ pl) (merge ql q)), (Abs (p ++ pl) (merge ql p))
(Abs (p ++ pl) (merge ql ql)), (Abs (p ++ pl) (merge ql pl)), (Abs (p ++ pl) (merge pl q)), (Abs (p ++ pl) (merge pl p)), (Abs (p ++ pl) (merge pl ql)), (Abs (p ++ pl) (merge pl pl)), (Abs (p ++ pl) (insert a q)), (Abs (p ++ pl) (insert a p)), (Abs (p ++ pl) (insert a ql)), (Abs (p ++ pl) (insert a pl))
(Abs (p ++ pl) (insert k q)), (Abs (p ++ pl) (insert k p)), (Abs (p ++ pl) (insert k ql)), (Abs (p ++ pl) (insert k pl)), (Abs (p ++ pl) (maybe_swap q)), (Abs (p ++ pl) (maybe_swap p)), (Abs (p ++ pl) (maybe_swap ql)), (Abs (p ++ pl) (maybe_swap pl)), (Abs (p ++ pl) (q ++ q)), (Abs (p ++ pl) (q ++ p))
(Abs (p ++ pl) (q ++ ql)), (Abs (p ++ pl) (q ++ pl)), (Abs (p ++ pl) (p ++ q)), (Abs (p ++ pl) (p ++ p)), (Abs (p ++ pl) (p ++ ql)), (Abs (p ++ pl) (ql ++ q)), (Abs (p ++ pl) (ql ++ p)), (Abs (p ++ pl) (ql ++ ql)), (Abs (p ++ pl) (ql ++ pl)), (Abs (p ++ pl) (pl ++ q))
(Abs (p ++ pl) (pl ++ p)), (Abs (p ++ pl) (pl ++ ql)), (Abs (p ++ pl) (pl ++ pl)), (Abs (p ++ pl) []), (Abs (ql ++ q) q), (Abs (ql ++ q) p), (Abs (ql ++ q) ql), (Abs (ql ++ q) pl), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: p))
(Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: pl)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: pl)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q pl))
(Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p pl)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql pl)), (Abs (ql ++ q) (merge pl q)), (Abs (ql ++ q) (merge pl p))
(Abs (ql ++ q) (merge pl ql)), (Abs (ql ++ q) (merge pl pl)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a pl)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k pl))
(Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap pl)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ pl)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ p))
(Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ pl)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ pl)), (Abs (ql ++ q) (pl ++ q)), (Abs (ql ++ q) (pl ++ p)), (Abs (ql ++ q) (pl ++ ql)), (Abs (ql ++ q) (pl ++ pl)), (Abs (ql ++ q) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) p), (Abs (ql ++ p) ql), (Abs (ql ++ p) pl), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: pl)), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: p))
(Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: pl)), (Abs (ql ++ p) (merge q q)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q pl)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p pl))
(Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql pl)), (Abs (ql ++ p) (merge pl q)), (Abs (ql ++ p) (merge pl p)), (Abs (ql ++ p) (merge pl ql)), (Abs (ql ++ p) (merge pl pl)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a p))
(Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a pl)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k pl)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap pl))
(Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ p)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ pl)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ pl)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql))
(Abs (ql ++ p) (ql ++ pl)), (Abs (ql ++ p) (pl ++ q)), (Abs (ql ++ p) (pl ++ p)), (Abs (ql ++ p) (pl ++ ql)), (Abs (ql ++ p) (pl ++ pl)), (Abs (ql ++ p) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) p), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) pl)
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: pl)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: pl)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q p))
(Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q pl)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p pl)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql pl))
(Abs (ql ++ ql) (merge pl q)), (Abs (ql ++ ql) (merge pl p)), (Abs (ql ++ ql) (merge pl ql)), (Abs (ql ++ ql) (merge pl pl)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a pl)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k p))
(Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k pl)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap pl)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ pl))
(Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ pl)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (ql ++ pl)), (Abs (ql ++ ql) (pl ++ q)), (Abs (ql ++ ql) (pl ++ p)), (Abs (ql ++ ql) (pl ++ ql))
(Abs (ql ++ ql) (pl ++ pl)), (Abs (ql ++ ql) []), (Abs (ql ++ pl) q), (Abs (ql ++ pl) p), (Abs (ql ++ pl) ql), (Abs (ql ++ pl) pl), (Abs (ql ++ pl) (a :: q)), (Abs (ql ++ pl) (a :: p)), (Abs (ql ++ pl) (a :: ql)), (Abs (ql ++ pl) (a :: pl))
(Abs (ql ++ pl) (k :: q)), (Abs (ql ++ pl) (k :: p)), (Abs (ql ++ pl) (k :: ql)), (Abs (ql ++ pl) (k :: pl)), (Abs (ql ++ pl) (merge q q)), (Abs (ql ++ pl) (merge q p)), (Abs (ql ++ pl) (merge q ql)), (Abs (ql ++ pl) (merge q pl)), (Abs (ql ++ pl) (merge p q)), (Abs (ql ++ pl) (merge p p))
(Abs (ql ++ pl) (merge p ql)), (Abs (ql ++ pl) (merge p pl)), (Abs (ql ++ pl) (merge ql q)), (Abs (ql ++ pl) (merge ql p)), (Abs (ql ++ pl) (merge ql ql)), (Abs (ql ++ pl) (merge ql pl)), (Abs (ql ++ pl) (merge pl q)), (Abs (ql ++ pl) (merge pl p)), (Abs (ql ++ pl) (merge pl ql)), (Abs (ql ++ pl) (merge pl pl))
(Abs (ql ++ pl) (insert a q)), (Abs (ql ++ pl) (insert a p)), (Abs (ql ++ pl) (insert a ql)), (Abs (ql ++ pl) (insert a pl)), (Abs (ql ++ pl) (insert k q)), (Abs (ql ++ pl) (insert k p)), (Abs (ql ++ pl) (insert k ql)), (Abs (ql ++ pl) (insert k pl)), (Abs (ql ++ pl) (maybe_swap q)), (Abs (ql ++ pl) (maybe_swap p))
(Abs (ql ++ pl) (maybe_swap ql)), (Abs (ql ++ pl) (maybe_swap pl)), (Abs (ql ++ pl) (q ++ q)), (Abs (ql ++ pl) (q ++ p)), (Abs (ql ++ pl) (q ++ ql)), (Abs (ql ++ pl) (q ++ pl)), (Abs (ql ++ pl) (p ++ q)), (Abs (ql ++ pl) (p ++ p)), (Abs (ql ++ pl) (p ++ ql)), (Abs (ql ++ pl) (p ++ pl))
(Abs (ql ++ pl) (ql ++ q)), (Abs (ql ++ pl) (ql ++ p)), (Abs (ql ++ pl) (ql ++ ql)), (Abs (ql ++ pl) (pl ++ q)), (Abs (ql ++ pl) (pl ++ p)), (Abs (ql ++ pl) (pl ++ ql)), (Abs (ql ++ pl) (pl ++ pl)), (Abs (ql ++ pl) []), (Abs (pl ++ q) q), (Abs (pl ++ q) p)
(Abs (pl ++ q) ql), (Abs (pl ++ q) pl), (Abs (pl ++ q) (a :: q)), (Abs (pl ++ q) (a :: p)), (Abs (pl ++ q) (a :: ql)), (Abs (pl ++ q) (a :: pl)), (Abs (pl ++ q) (k :: q)), (Abs (pl ++ q) (k :: p)), (Abs (pl ++ q) (k :: ql)), (Abs (pl ++ q) (k :: pl))
(Abs (pl ++ q) (merge q q)), (Abs (pl ++ q) (merge q p)), (Abs (pl ++ q) (merge q ql)), (Abs (pl ++ q) (merge q pl)), (Abs (pl ++ q) (merge p q)), (Abs (pl ++ q) (merge p p)), (Abs (pl ++ q) (merge p ql)), (Abs (pl ++ q) (merge p pl)), (Abs (pl ++ q) (merge ql q)), (Abs (pl ++ q) (merge ql p))
(Abs (pl ++ q) (merge ql ql)), (Abs (pl ++ q) (merge ql pl)), (Abs (pl ++ q) (merge pl q)), (Abs (pl ++ q) (merge pl p)), (Abs (pl ++ q) (merge pl ql)), (Abs (pl ++ q) (merge pl pl)), (Abs (pl ++ q) (insert a q)), (Abs (pl ++ q) (insert a p)), (Abs (pl ++ q) (insert a ql)), (Abs (pl ++ q) (insert a pl))
(Abs (pl ++ q) (insert k q)), (Abs (pl ++ q) (insert k p)), (Abs (pl ++ q) (insert k ql)), (Abs (pl ++ q) (insert k pl)), (Abs (pl ++ q) (maybe_swap q)), (Abs (pl ++ q) (maybe_swap p)), (Abs (pl ++ q) (maybe_swap ql)), (Abs (pl ++ q) (maybe_swap pl)), (Abs (pl ++ q) (q ++ q)), (Abs (pl ++ q) (q ++ p))
(Abs (pl ++ q) (q ++ ql)), (Abs (pl ++ q) (q ++ pl)), (Abs (pl ++ q) (p ++ q)), (Abs (pl ++ q) (p ++ p)), (Abs (pl ++ q) (p ++ ql)), (Abs (pl ++ q) (p ++ pl)), (Abs (pl ++ q) (ql ++ q)), (Abs (pl ++ q) (ql ++ p)), (Abs (pl ++ q) (ql ++ ql)), (Abs (pl ++ q) (ql ++ pl))
(Abs (pl ++ q) (pl ++ p)), (Abs (pl ++ q) (pl ++ ql)), (Abs (pl ++ q) (pl ++ pl)), (Abs (pl ++ q) []), (Abs (pl ++ p) q), (Abs (pl ++ p) p), (Abs (pl ++ p) ql), (Abs (pl ++ p) pl), (Abs (pl ++ p) (a :: q)), (Abs (pl ++ p) (a :: p))
(Abs (pl ++ p) (a :: ql)), (Abs (pl ++ p) (a :: pl)), (Abs (pl ++ p) (k :: q)), (Abs (pl ++ p) (k :: p)), (Abs (pl ++ p) (k :: ql)), (Abs (pl ++ p) (k :: pl)), (Abs (pl ++ p) (merge q q)), (Abs (pl ++ p) (merge q p)), (Abs (pl ++ p) (merge q ql)), (Abs (pl ++ p) (merge q pl))
(Abs (pl ++ p) (merge p q)), (Abs (pl ++ p) (merge p p)), (Abs (pl ++ p) (merge p ql)), (Abs (pl ++ p) (merge p pl)), (Abs (pl ++ p) (merge ql q)), (Abs (pl ++ p) (merge ql p)), (Abs (pl ++ p) (merge ql ql)), (Abs (pl ++ p) (merge ql pl)), (Abs (pl ++ p) (merge pl q)), (Abs (pl ++ p) (merge pl p))
(Abs (pl ++ p) (merge pl ql)), (Abs (pl ++ p) (merge pl pl)), (Abs (pl ++ p) (insert a q)), (Abs (pl ++ p) (insert a p)), (Abs (pl ++ p) (insert a ql)), (Abs (pl ++ p) (insert a pl)), (Abs (pl ++ p) (insert k q)), (Abs (pl ++ p) (insert k p)), (Abs (pl ++ p) (insert k ql)), (Abs (pl ++ p) (insert k pl))
(Abs (pl ++ p) (maybe_swap q)), (Abs (pl ++ p) (maybe_swap p)), (Abs (pl ++ p) (maybe_swap ql)), (Abs (pl ++ p) (maybe_swap pl)), (Abs (pl ++ p) (q ++ q)), (Abs (pl ++ p) (q ++ p)), (Abs (pl ++ p) (q ++ ql)), (Abs (pl ++ p) (q ++ pl)), (Abs (pl ++ p) (p ++ q)), (Abs (pl ++ p) (p ++ p))
(Abs (pl ++ p) (p ++ ql)), (Abs (pl ++ p) (p ++ pl)), (Abs (pl ++ p) (ql ++ q)), (Abs (pl ++ p) (ql ++ p)), (Abs (pl ++ p) (ql ++ ql)), (Abs (pl ++ p) (ql ++ pl)), (Abs (pl ++ p) (pl ++ q)), (Abs (pl ++ p) (pl ++ ql)), (Abs (pl ++ p) (pl ++ pl)), (Abs (pl ++ p) [])
(Abs (pl ++ ql) q), (Abs (pl ++ ql) p), (Abs (pl ++ ql) ql), (Abs (pl ++ ql) pl), (Abs (pl ++ ql) (a :: q)), (Abs (pl ++ ql) (a :: p)), (Abs (pl ++ ql) (a :: ql)), (Abs (pl ++ ql) (a :: pl)), (Abs (pl ++ ql) (k :: q)), (Abs (pl ++ ql) (k :: p))
(Abs (pl ++ ql) (k :: ql)), (Abs (pl ++ ql) (k :: pl)), (Abs (pl ++ ql) (merge q q)), (Abs (pl ++ ql) (merge q p)), (Abs (pl ++ ql) (merge q ql)), (Abs (pl ++ ql) (merge q pl)), (Abs (pl ++ ql) (merge p q)), (Abs (pl ++ ql) (merge p p)), (Abs (pl ++ ql) (merge p ql)), (Abs (pl ++ ql) (merge p pl))
(Abs (pl ++ ql) (merge ql q)), (Abs (pl ++ ql) (merge ql p)), (Abs (pl ++ ql) (merge ql ql)), (Abs (pl ++ ql) (merge ql pl)), (Abs (pl ++ ql) (merge pl q)), (Abs (pl ++ ql) (merge pl p)), (Abs (pl ++ ql) (merge pl ql)), (Abs (pl ++ ql) (merge pl pl)), (Abs (pl ++ ql) (insert a q)), (Abs (pl ++ ql) (insert a p))
(Abs (pl ++ ql) (insert a ql)), (Abs (pl ++ ql) (insert a pl)), (Abs (pl ++ ql) (insert k q)), (Abs (pl ++ ql) (insert k p)), (Abs (pl ++ ql) (insert k ql)), (Abs (pl ++ ql) (insert k pl)), (Abs (pl ++ ql) (maybe_swap q)), (Abs (pl ++ ql) (maybe_swap p)), (Abs (pl ++ ql) (maybe_swap ql)), (Abs (pl ++ ql) (maybe_swap pl))
(Abs (pl ++ ql) (q ++ q)), (Abs (pl ++ ql) (q ++ p)), (Abs (pl ++ ql) (q ++ ql)), (Abs (pl ++ ql) (q ++ pl)), (Abs (pl ++ ql) (p ++ q)), (Abs (pl ++ ql) (p ++ p)), (Abs (pl ++ ql) (p ++ ql)), (Abs (pl ++ ql) (p ++ pl)), (Abs (pl ++ ql) (ql ++ q)), (Abs (pl ++ ql) (ql ++ p))
(Abs (pl ++ ql) (ql ++ ql)), (Abs (pl ++ ql) (ql ++ pl)), (Abs (pl ++ ql) (pl ++ q)), (Abs (pl ++ ql) (pl ++ p)), (Abs (pl ++ ql) (pl ++ pl)), (Abs (pl ++ ql) []), (Abs (pl ++ pl) q), (Abs (pl ++ pl) p), (Abs (pl ++ pl) ql), (Abs (pl ++ pl) pl)
(Abs (pl ++ pl) (a :: q)), (Abs (pl ++ pl) (a :: p)), (Abs (pl ++ pl) (a :: ql)), (Abs (pl ++ pl) (a :: pl)), (Abs (pl ++ pl) (k :: q)), (Abs (pl ++ pl) (k :: p)), (Abs (pl ++ pl) (k :: ql)), (Abs (pl ++ pl) (k :: pl)), (Abs (pl ++ pl) (merge q q)), (Abs (pl ++ pl) (merge q p))
(Abs (pl ++ pl) (merge q ql)), (Abs (pl ++ pl) (merge q pl)), (Abs (pl ++ pl) (merge p q)), (Abs (pl ++ pl) (merge p p)), (Abs (pl ++ pl) (merge p ql)), (Abs (pl ++ pl) (merge p pl)), (Abs (pl ++ pl) (merge ql q)), (Abs (pl ++ pl) (merge ql p)), (Abs (pl ++ pl) (merge ql ql)), (Abs (pl ++ pl) (merge ql pl))
(Abs (pl ++ pl) (merge pl q)), (Abs (pl ++ pl) (merge pl p)), (Abs (pl ++ pl) (merge pl ql)), (Abs (pl ++ pl) (merge pl pl)), (Abs (pl ++ pl) (insert a q)), (Abs (pl ++ pl) (insert a p)), (Abs (pl ++ pl) (insert a ql)), (Abs (pl ++ pl) (insert a pl)), (Abs (pl ++ pl) (insert k q)), (Abs (pl ++ pl) (insert k p))
(Abs (pl ++ pl) (insert k ql)), (Abs (pl ++ pl) (insert k pl)), (Abs (pl ++ pl) (maybe_swap q)), (Abs (pl ++ pl) (maybe_swap p)), (Abs (pl ++ pl) (maybe_swap ql)), (Abs (pl ++ pl) (maybe_swap pl)), (Abs (pl ++ pl) (q ++ q)), (Abs (pl ++ pl) (q ++ p)), (Abs (pl ++ pl) (q ++ ql)), (Abs (pl ++ pl) (q ++ pl))
(Abs (pl ++ pl) (p ++ q)), (Abs (pl ++ pl) (p ++ p)), (Abs (pl ++ pl) (p ++ ql)), (Abs (pl ++ pl) (p ++ pl)), (Abs (pl ++ pl) (ql ++ q)), (Abs (pl ++ pl) (ql ++ p)), (Abs (pl ++ pl) (ql ++ ql)), (Abs (pl ++ pl) (ql ++ pl)), (Abs (pl ++ pl) (pl ++ q)), (Abs (pl ++ pl) (pl ++ p))
(Abs (pl ++ pl) (pl ++ ql)), (Abs (pl ++ pl) []), (Abs [] q), (Abs [] p), (Abs [] ql), (Abs [] pl), (Abs [] (a :: q)), (Abs [] (a :: p)), (Abs [] (a :: ql)), (Abs [] (a :: pl))
(Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (k :: ql)), (Abs [] (k :: pl)), (Abs [] (merge q q)), (Abs [] (merge q p)), (Abs [] (merge q ql)), (Abs [] (merge q pl)), (Abs [] (merge p q)), (Abs [] (merge p p))
(Abs [] (merge p ql)), (Abs [] (merge p pl)), (Abs [] (merge ql q)), (Abs [] (merge ql p)), (Abs [] (merge ql ql)), (Abs [] (merge ql pl)), (Abs [] (merge pl q)), (Abs [] (merge pl p)), (Abs [] (merge pl ql)), (Abs [] (merge pl pl))
(Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (insert a ql)), (Abs [] (insert a pl)), (Abs [] (insert k q)), (Abs [] (insert k p)), (Abs [] (insert k ql)), (Abs [] (insert k pl)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap p))
(Abs [] (maybe_swap ql)), (Abs [] (maybe_swap pl)), (Abs [] (q ++ q)), (Abs [] (q ++ p)), (Abs [] (q ++ ql)), (Abs [] (q ++ pl)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (Abs [] (p ++ ql)), (Abs [] (p ++ pl))
(Abs [] (ql ++ q)), (Abs [] (ql ++ p)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ pl)), (Abs [] (pl ++ q)), (Abs [] (pl ++ p)), (Abs [] (pl ++ ql)), (Abs [] (pl ++ pl)), (priq (a :: q)), (priq (a :: p))
(priq (a :: ql)), (priq (a :: pl)), (priq (k :: q)), (priq (k :: p)), (priq (k :: ql)), (priq (k :: pl)), (priq (merge q q)), (priq (merge q p)), (priq (merge q ql)), (priq (merge q pl))
(priq (merge p q)), (priq (merge p p)), (priq (merge p ql)), (priq (merge p pl)), (priq (merge ql q)), (priq (merge ql p)), (priq (merge ql ql)), (priq (merge ql pl)), (priq (merge pl q)), (priq (merge pl p))
(priq (merge pl ql)), (priq (merge pl pl)), (priq (insert a q)), (priq (insert a p)), (priq (insert a ql)), (priq (insert a pl)), (priq (insert k q)), (priq (insert k p)), (priq (insert k ql)), (priq (insert k pl))
(priq (maybe_swap q)), (priq (maybe_swap p)), (priq (maybe_swap ql)), (priq (maybe_swap pl)), (priq (q ++ q)), (priq (q ++ p)), (priq (q ++ ql)), (priq (q ++ pl)), (priq (p ++ q)), (priq (p ++ p))
(priq (p ++ ql)), (priq (p ++ pl)), (priq (ql ++ q)), (priq (ql ++ p)), (priq (ql ++ ql)), (priq (ql ++ pl)), (priq (pl ++ q)), (priq (pl ++ p)), (priq (pl ++ ql)), (priq (pl ++ pl))
(priq []), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (a :: ql)), (Permutation q (a :: pl)), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (k :: ql)), (Permutation q (k :: pl)), (Permutation q (merge q q))
(Permutation q (merge q p)), (Permutation q (merge q ql)), (Permutation q (merge q pl)), (Permutation q (merge p q)), (Permutation q (merge p p)), (Permutation q (merge p ql)), (Permutation q (merge p pl)), (Permutation q (merge ql q)), (Permutation q (merge ql p)), (Permutation q (merge ql ql))
(Permutation q (merge ql pl)), (Permutation q (merge pl q)), (Permutation q (merge pl p)), (Permutation q (merge pl ql)), (Permutation q (merge pl pl)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (insert a ql)), (Permutation q (insert a pl)), (Permutation q (insert k q))
(Permutation q (insert k p)), (Permutation q (insert k ql)), (Permutation q (insert k pl)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap pl)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (q ++ ql))
(Permutation q (q ++ pl)), (Permutation q (p ++ q)), (Permutation q (p ++ p)), (Permutation q (p ++ ql)), (Permutation q (p ++ pl)), (Permutation q (ql ++ q)), (Permutation q (ql ++ p)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ pl)), (Permutation q (pl ++ q))
(Permutation q (pl ++ p)), (Permutation q (pl ++ ql)), (Permutation q (pl ++ pl)), (Permutation q []), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (a :: ql)), (Permutation p (a :: pl)), (Permutation p (k :: q)), (Permutation p (k :: p))
(Permutation p (k :: ql)), (Permutation p (k :: pl)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge q ql)), (Permutation p (merge q pl)), (Permutation p (merge p q)), (Permutation p (merge p p)), (Permutation p (merge p ql)), (Permutation p (merge p pl))
(Permutation p (merge ql q)), (Permutation p (merge ql p)), (Permutation p (merge ql ql)), (Permutation p (merge ql pl)), (Permutation p (merge pl q)), (Permutation p (merge pl p)), (Permutation p (merge pl ql)), (Permutation p (merge pl pl)), (Permutation p (insert a q)), (Permutation p (insert a p))
(Permutation p (insert a ql)), (Permutation p (insert a pl)), (Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert k ql)), (Permutation p (insert k pl)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap pl))
(Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (q ++ ql)), (Permutation p (q ++ pl)), (Permutation p (p ++ q)), (Permutation p (p ++ p)), (Permutation p (p ++ ql)), (Permutation p (p ++ pl)), (Permutation p (ql ++ q)), (Permutation p (ql ++ p))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ pl)), (Permutation p (pl ++ q)), (Permutation p (pl ++ p)), (Permutation p (pl ++ ql)), (Permutation p (pl ++ pl)), (Permutation p []), (Permutation ql (a :: q)), (Permutation ql (a :: p)), (Permutation ql (a :: ql))
(Permutation ql (a :: pl)), (Permutation ql (k :: q)), (Permutation ql (k :: p)), (Permutation ql (k :: ql)), (Permutation ql (k :: pl)), (Permutation ql (merge q q)), (Permutation ql (merge q p)), (Permutation ql (merge q ql)), (Permutation ql (merge q pl)), (Permutation ql (merge p q))
(Permutation ql (merge p p)), (Permutation ql (merge p ql)), (Permutation ql (merge p pl)), (Permutation ql (merge ql q)), (Permutation ql (merge ql p)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql pl)), (Permutation ql (merge pl q)), (Permutation ql (merge pl p)), (Permutation ql (merge pl ql))
(Permutation ql (merge pl pl)), (Permutation ql (insert a q)), (Permutation ql (insert a p)), (Permutation ql (insert a ql)), (Permutation ql (insert a pl)), (Permutation ql (insert k q)), (Permutation ql (insert k p)), (Permutation ql (insert k ql)), (Permutation ql (insert k pl)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap p)), (Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap pl)), (Permutation ql (q ++ q)), (Permutation ql (q ++ p)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ pl)), (Permutation ql (p ++ q)), (Permutation ql (p ++ p)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ pl)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ p)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ pl)), (Permutation ql (pl ++ q)), (Permutation ql (pl ++ p)), (Permutation ql (pl ++ ql)), (Permutation ql (pl ++ pl)), (Permutation ql [])
(Permutation pl (a :: q)), (Permutation pl (a :: p)), (Permutation pl (a :: ql)), (Permutation pl (a :: pl)), (Permutation pl (k :: q)), (Permutation pl (k :: p)), (Permutation pl (k :: ql)), (Permutation pl (k :: pl)), (Permutation pl (merge q q)), (Permutation pl (merge q p))
(Permutation pl (merge q ql)), (Permutation pl (merge q pl)), (Permutation pl (merge p q)), (Permutation pl (merge p p)), (Permutation pl (merge p ql)), (Permutation pl (merge p pl)), (Permutation pl (merge ql q)), (Permutation pl (merge ql p)), (Permutation pl (merge ql ql)), (Permutation pl (merge ql pl))
(Permutation pl (merge pl q)), (Permutation pl (merge pl p)), (Permutation pl (merge pl ql)), (Permutation pl (merge pl pl)), (Permutation pl (insert a q)), (Permutation pl (insert a p)), (Permutation pl (insert a ql)), (Permutation pl (insert a pl)), (Permutation pl (insert k q)), (Permutation pl (insert k p))
(Permutation pl (insert k ql)), (Permutation pl (insert k pl)), (Permutation pl (maybe_swap q)), (Permutation pl (maybe_swap p)), (Permutation pl (maybe_swap ql)), (Permutation pl (maybe_swap pl)), (Permutation pl (q ++ q)), (Permutation pl (q ++ p)), (Permutation pl (q ++ ql)), (Permutation pl (q ++ pl))
(Permutation pl (p ++ q)), (Permutation pl (p ++ p)), (Permutation pl (p ++ ql)), (Permutation pl (p ++ pl)), (Permutation pl (ql ++ q)), (Permutation pl (ql ++ p)), (Permutation pl (ql ++ ql)), (Permutation pl (ql ++ pl)), (Permutation pl (pl ++ q)), (Permutation pl (pl ++ p))
(Permutation pl (pl ++ ql)), (Permutation pl (pl ++ pl)), (Permutation pl []), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) ql), (Permutation (a :: q) pl), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: pl))
(Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: pl)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q pl)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p pl)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql pl)), (Permutation (a :: q) (merge pl q)), (Permutation (a :: q) (merge pl p)), (Permutation (a :: q) (merge pl ql)), (Permutation (a :: q) (merge pl pl))
(Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a pl)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k pl)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap pl)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ pl)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ pl))
(Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ pl)), (Permutation (a :: q) (pl ++ q)), (Permutation (a :: q) (pl ++ p)), (Permutation (a :: q) (pl ++ ql)), (Permutation (a :: q) (pl ++ pl)), (Permutation (a :: q) []), (Permutation (a :: p) q)
(Permutation (a :: p) p), (Permutation (a :: p) ql), (Permutation (a :: p) pl), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: pl)), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: pl))
(Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q pl)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p pl)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql pl)), (Permutation (a :: p) (merge pl q)), (Permutation (a :: p) (merge pl p)), (Permutation (a :: p) (merge pl ql)), (Permutation (a :: p) (merge pl pl)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a pl))
(Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k pl)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap pl)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p))
(Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ pl)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ pl)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ pl))
(Permutation (a :: p) (pl ++ q)), (Permutation (a :: p) (pl ++ p)), (Permutation (a :: p) (pl ++ ql)), (Permutation (a :: p) (pl ++ pl)), (Permutation (a :: p) []), (Permutation (a :: ql) q), (Permutation (a :: ql) p), (Permutation (a :: ql) ql), (Permutation (a :: ql) pl), (Permutation (a :: ql) (a :: q))
(Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (a :: pl)), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: pl)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q pl))
(Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p pl)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql pl)), (Permutation (a :: ql) (merge pl q)), (Permutation (a :: ql) (merge pl p))
(Permutation (a :: ql) (merge pl ql)), (Permutation (a :: ql) (merge pl pl)), (Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a pl)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k pl))
(Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap pl)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ pl)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ p))
(Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ pl)), (Permutation (a :: ql) (ql ++ q)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ pl)), (Permutation (a :: ql) (pl ++ q)), (Permutation (a :: ql) (pl ++ p)), (Permutation (a :: ql) (pl ++ ql)), (Permutation (a :: ql) (pl ++ pl))
(Permutation (a :: ql) []), (Permutation (a :: pl) q), (Permutation (a :: pl) p), (Permutation (a :: pl) ql), (Permutation (a :: pl) pl), (Permutation (a :: pl) (a :: q)), (Permutation (a :: pl) (a :: p)), (Permutation (a :: pl) (a :: ql)), (Permutation (a :: pl) (k :: q)), (Permutation (a :: pl) (k :: p))
(Permutation (a :: pl) (k :: ql)), (Permutation (a :: pl) (k :: pl)), (Permutation (a :: pl) (merge q q)), (Permutation (a :: pl) (merge q p)), (Permutation (a :: pl) (merge q ql)), (Permutation (a :: pl) (merge q pl)), (Permutation (a :: pl) (merge p q)), (Permutation (a :: pl) (merge p p)), (Permutation (a :: pl) (merge p ql)), (Permutation (a :: pl) (merge p pl))
(Permutation (a :: pl) (merge ql q)), (Permutation (a :: pl) (merge ql p)), (Permutation (a :: pl) (merge ql ql)), (Permutation (a :: pl) (merge ql pl)), (Permutation (a :: pl) (merge pl q)), (Permutation (a :: pl) (merge pl p)), (Permutation (a :: pl) (merge pl ql)), (Permutation (a :: pl) (merge pl pl)), (Permutation (a :: pl) (insert a q)), (Permutation (a :: pl) (insert a p))
(Permutation (a :: pl) (insert a ql)), (Permutation (a :: pl) (insert a pl)), (Permutation (a :: pl) (insert k q)), (Permutation (a :: pl) (insert k p)), (Permutation (a :: pl) (insert k ql)), (Permutation (a :: pl) (insert k pl)), (Permutation (a :: pl) (maybe_swap q)), (Permutation (a :: pl) (maybe_swap p)), (Permutation (a :: pl) (maybe_swap ql)), (Permutation (a :: pl) (maybe_swap pl))
(Permutation (a :: pl) (q ++ q)), (Permutation (a :: pl) (q ++ p)), (Permutation (a :: pl) (q ++ ql)), (Permutation (a :: pl) (q ++ pl)), (Permutation (a :: pl) (p ++ q)), (Permutation (a :: pl) (p ++ p)), (Permutation (a :: pl) (p ++ ql)), (Permutation (a :: pl) (p ++ pl)), (Permutation (a :: pl) (ql ++ q)), (Permutation (a :: pl) (ql ++ p))
(Permutation (a :: pl) (ql ++ ql)), (Permutation (a :: pl) (ql ++ pl)), (Permutation (a :: pl) (pl ++ q)), (Permutation (a :: pl) (pl ++ p)), (Permutation (a :: pl) (pl ++ ql)), (Permutation (a :: pl) (pl ++ pl)), (Permutation (a :: pl) []), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) ql)
(Permutation (k :: q) pl), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: pl)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: ql)), (Permutation (k :: q) (k :: pl)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p))
(Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q pl)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p pl)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql pl))
(Permutation (k :: q) (merge pl q)), (Permutation (k :: q) (merge pl p)), (Permutation (k :: q) (merge pl ql)), (Permutation (k :: q) (merge pl pl)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a pl)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p))
(Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k pl)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap pl)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ pl))
(Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ pl)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ pl)), (Permutation (k :: q) (pl ++ q)), (Permutation (k :: q) (pl ++ p))
(Permutation (k :: q) (pl ++ ql)), (Permutation (k :: q) (pl ++ pl)), (Permutation (k :: q) []), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) ql), (Permutation (k :: p) pl), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: ql))
(Permutation (k :: p) (a :: pl)), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (k :: pl)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q pl)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p p))
(Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p pl)), (Permutation (k :: p) (merge ql q)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql pl)), (Permutation (k :: p) (merge pl q)), (Permutation (k :: p) (merge pl p)), (Permutation (k :: p) (merge pl ql)), (Permutation (k :: p) (merge pl pl))
(Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a pl)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k pl)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p))
(Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap pl)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ pl)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ pl))
(Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ pl)), (Permutation (k :: p) (pl ++ q)), (Permutation (k :: p) (pl ++ p)), (Permutation (k :: p) (pl ++ ql)), (Permutation (k :: p) (pl ++ pl)), (Permutation (k :: p) []), (Permutation (k :: ql) q)
(Permutation (k :: ql) p), (Permutation (k :: ql) ql), (Permutation (k :: ql) pl), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: pl)), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (k :: pl))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q pl)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p pl)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql p))
(Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql pl)), (Permutation (k :: ql) (merge pl q)), (Permutation (k :: ql) (merge pl p)), (Permutation (k :: ql) (merge pl ql)), (Permutation (k :: ql) (merge pl pl)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a pl))
(Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k pl)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap pl)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ p))
(Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ pl)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ pl)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ pl))
(Permutation (k :: ql) (pl ++ q)), (Permutation (k :: ql) (pl ++ p)), (Permutation (k :: ql) (pl ++ ql)), (Permutation (k :: ql) (pl ++ pl)), (Permutation (k :: ql) []), (Permutation (k :: pl) q), (Permutation (k :: pl) p), (Permutation (k :: pl) ql), (Permutation (k :: pl) pl), (Permutation (k :: pl) (a :: q))
(Permutation (k :: pl) (a :: p)), (Permutation (k :: pl) (a :: ql)), (Permutation (k :: pl) (a :: pl)), (Permutation (k :: pl) (k :: q)), (Permutation (k :: pl) (k :: p)), (Permutation (k :: pl) (k :: ql)), (Permutation (k :: pl) (merge q q)), (Permutation (k :: pl) (merge q p)), (Permutation (k :: pl) (merge q ql)), (Permutation (k :: pl) (merge q pl))
(Permutation (k :: pl) (merge p q)), (Permutation (k :: pl) (merge p p)), (Permutation (k :: pl) (merge p ql)), (Permutation (k :: pl) (merge p pl)), (Permutation (k :: pl) (merge ql q)), (Permutation (k :: pl) (merge ql p)), (Permutation (k :: pl) (merge ql ql)), (Permutation (k :: pl) (merge ql pl)), (Permutation (k :: pl) (merge pl q)), (Permutation (k :: pl) (merge pl p))
(Permutation (k :: pl) (merge pl ql)), (Permutation (k :: pl) (merge pl pl)), (Permutation (k :: pl) (insert a q)), (Permutation (k :: pl) (insert a p)), (Permutation (k :: pl) (insert a ql)), (Permutation (k :: pl) (insert a pl)), (Permutation (k :: pl) (insert k q)), (Permutation (k :: pl) (insert k p)), (Permutation (k :: pl) (insert k ql)), (Permutation (k :: pl) (insert k pl))
(Permutation (k :: pl) (maybe_swap q)), (Permutation (k :: pl) (maybe_swap p)), (Permutation (k :: pl) (maybe_swap ql)), (Permutation (k :: pl) (maybe_swap pl)), (Permutation (k :: pl) (q ++ q)), (Permutation (k :: pl) (q ++ p)), (Permutation (k :: pl) (q ++ ql)), (Permutation (k :: pl) (q ++ pl)), (Permutation (k :: pl) (p ++ q)), (Permutation (k :: pl) (p ++ p))
(Permutation (k :: pl) (p ++ ql)), (Permutation (k :: pl) (p ++ pl)), (Permutation (k :: pl) (ql ++ q)), (Permutation (k :: pl) (ql ++ p)), (Permutation (k :: pl) (ql ++ ql)), (Permutation (k :: pl) (ql ++ pl)), (Permutation (k :: pl) (pl ++ q)), (Permutation (k :: pl) (pl ++ p)), (Permutation (k :: pl) (pl ++ ql)), (Permutation (k :: pl) (pl ++ pl))
(Permutation (k :: pl) []), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) ql), (Permutation (merge q q) pl), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (a :: ql)), (Permutation (merge q q) (a :: pl)), (Permutation (merge q q) (k :: q))
(Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: pl)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q pl)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p pl))
(Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql pl)), (Permutation (merge q q) (merge pl q)), (Permutation (merge q q) (merge pl p)), (Permutation (merge q q) (merge pl ql)), (Permutation (merge q q) (merge pl pl)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a p))
(Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a pl)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k pl)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap pl))
(Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ pl)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ pl)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ p))
(Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ pl)), (Permutation (merge q q) (pl ++ q)), (Permutation (merge q q) (pl ++ p)), (Permutation (merge q q) (pl ++ ql)), (Permutation (merge q q) (pl ++ pl)), (Permutation (merge q q) []), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) ql)
(Permutation (merge q p) pl), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: pl)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: pl)), (Permutation (merge q p) (merge q q))
(Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge q pl)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p p)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p pl)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql pl))
(Permutation (merge q p) (merge pl q)), (Permutation (merge q p) (merge pl p)), (Permutation (merge q p) (merge pl ql)), (Permutation (merge q p) (merge pl pl)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a pl)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p))
(Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k pl)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap pl)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ pl))
(Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ pl)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ pl)), (Permutation (merge q p) (pl ++ q)), (Permutation (merge q p) (pl ++ p))
(Permutation (merge q p) (pl ++ ql)), (Permutation (merge q p) (pl ++ pl)), (Permutation (merge q p) []), (Permutation (merge q ql) q), (Permutation (merge q ql) p), (Permutation (merge q ql) ql), (Permutation (merge q ql) pl), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (a :: ql))
(Permutation (merge q ql) (a :: pl)), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: pl)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge q pl)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p p))
(Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p pl)), (Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql pl)), (Permutation (merge q ql) (merge pl q)), (Permutation (merge q ql) (merge pl p)), (Permutation (merge q ql) (merge pl ql)), (Permutation (merge q ql) (merge pl pl))
(Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a pl)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k pl)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap p))
(Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap pl)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ pl)), (Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ pl))
(Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ pl)), (Permutation (merge q ql) (pl ++ q)), (Permutation (merge q ql) (pl ++ p)), (Permutation (merge q ql) (pl ++ ql)), (Permutation (merge q ql) (pl ++ pl)), (Permutation (merge q ql) []), (Permutation (merge q pl) q)
(Permutation (merge q pl) p), (Permutation (merge q pl) ql), (Permutation (merge q pl) pl), (Permutation (merge q pl) (a :: q)), (Permutation (merge q pl) (a :: p)), (Permutation (merge q pl) (a :: ql)), (Permutation (merge q pl) (a :: pl)), (Permutation (merge q pl) (k :: q)), (Permutation (merge q pl) (k :: p)), (Permutation (merge q pl) (k :: ql))
(Permutation (merge q pl) (k :: pl)), (Permutation (merge q pl) (merge q q)), (Permutation (merge q pl) (merge q p)), (Permutation (merge q pl) (merge q ql)), (Permutation (merge q pl) (merge p q)), (Permutation (merge q pl) (merge p p)), (Permutation (merge q pl) (merge p ql)), (Permutation (merge q pl) (merge p pl)), (Permutation (merge q pl) (merge ql q)), (Permutation (merge q pl) (merge ql p))
(Permutation (merge q pl) (merge ql ql)), (Permutation (merge q pl) (merge ql pl)), (Permutation (merge q pl) (merge pl q)), (Permutation (merge q pl) (merge pl p)), (Permutation (merge q pl) (merge pl ql)), (Permutation (merge q pl) (merge pl pl)), (Permutation (merge q pl) (insert a q)), (Permutation (merge q pl) (insert a p)), (Permutation (merge q pl) (insert a ql)), (Permutation (merge q pl) (insert a pl))
(Permutation (merge q pl) (insert k q)), (Permutation (merge q pl) (insert k p)), (Permutation (merge q pl) (insert k ql)), (Permutation (merge q pl) (insert k pl)), (Permutation (merge q pl) (maybe_swap q)), (Permutation (merge q pl) (maybe_swap p)), (Permutation (merge q pl) (maybe_swap ql)), (Permutation (merge q pl) (maybe_swap pl)), (Permutation (merge q pl) (q ++ q)), (Permutation (merge q pl) (q ++ p))
(Permutation (merge q pl) (q ++ ql)), (Permutation (merge q pl) (q ++ pl)), (Permutation (merge q pl) (p ++ q)), (Permutation (merge q pl) (p ++ p)), (Permutation (merge q pl) (p ++ ql)), (Permutation (merge q pl) (p ++ pl)), (Permutation (merge q pl) (ql ++ q)), (Permutation (merge q pl) (ql ++ p)), (Permutation (merge q pl) (ql ++ ql)), (Permutation (merge q pl) (ql ++ pl))
(Permutation (merge q pl) (pl ++ q)), (Permutation (merge q pl) (pl ++ p)), (Permutation (merge q pl) (pl ++ ql)), (Permutation (merge q pl) (pl ++ pl)), (Permutation (merge q pl) []), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) ql), (Permutation (merge p q) pl), (Permutation (merge p q) (a :: q))
(Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: pl)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: pl)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge q ql))
(Permutation (merge p q) (merge q pl)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p pl)), (Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql pl)), (Permutation (merge p q) (merge pl q)), (Permutation (merge p q) (merge pl p))
(Permutation (merge p q) (merge pl ql)), (Permutation (merge p q) (merge pl pl)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a pl)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k pl))
(Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap pl)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ pl)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ p))
(Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ pl)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ pl)), (Permutation (merge p q) (pl ++ q)), (Permutation (merge p q) (pl ++ p)), (Permutation (merge p q) (pl ++ ql)), (Permutation (merge p q) (pl ++ pl))
(Permutation (merge p q) []), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) ql), (Permutation (merge p p) pl), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: pl)), (Permutation (merge p p) (k :: q))
(Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: pl)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q pl)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (merge p pl))
(Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql pl)), (Permutation (merge p p) (merge pl q)), (Permutation (merge p p) (merge pl p)), (Permutation (merge p p) (merge pl ql)), (Permutation (merge p p) (merge pl pl)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a p))
(Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a pl)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k pl)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap pl))
(Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ pl)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ pl)), (Permutation (merge p p) (ql ++ q)), (Permutation (merge p p) (ql ++ p))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ pl)), (Permutation (merge p p) (pl ++ q)), (Permutation (merge p p) (pl ++ p)), (Permutation (merge p p) (pl ++ ql)), (Permutation (merge p p) (pl ++ pl)), (Permutation (merge p p) []), (Permutation (merge p ql) q), (Permutation (merge p ql) p), (Permutation (merge p ql) ql)
(Permutation (merge p ql) pl), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: pl)), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: pl)), (Permutation (merge p ql) (merge q q))
(Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q pl)), (Permutation (merge p ql) (merge p q)), (Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (merge p pl)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql pl))
(Permutation (merge p ql) (merge pl q)), (Permutation (merge p ql) (merge pl p)), (Permutation (merge p ql) (merge pl ql)), (Permutation (merge p ql) (merge pl pl)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a pl)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k p))
(Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k pl)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap pl)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ pl))
(Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ pl)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ pl)), (Permutation (merge p ql) (pl ++ q)), (Permutation (merge p ql) (pl ++ p))
(Permutation (merge p ql) (pl ++ ql)), (Permutation (merge p ql) (pl ++ pl)), (Permutation (merge p ql) []), (Permutation (merge p pl) q), (Permutation (merge p pl) p), (Permutation (merge p pl) ql), (Permutation (merge p pl) pl), (Permutation (merge p pl) (a :: q)), (Permutation (merge p pl) (a :: p)), (Permutation (merge p pl) (a :: ql))
(Permutation (merge p pl) (a :: pl)), (Permutation (merge p pl) (k :: q)), (Permutation (merge p pl) (k :: p)), (Permutation (merge p pl) (k :: ql)), (Permutation (merge p pl) (k :: pl)), (Permutation (merge p pl) (merge q q)), (Permutation (merge p pl) (merge q p)), (Permutation (merge p pl) (merge q ql)), (Permutation (merge p pl) (merge q pl)), (Permutation (merge p pl) (merge p q))
(Permutation (merge p pl) (merge p p)), (Permutation (merge p pl) (merge p ql)), (Permutation (merge p pl) (merge ql q)), (Permutation (merge p pl) (merge ql p)), (Permutation (merge p pl) (merge ql ql)), (Permutation (merge p pl) (merge ql pl)), (Permutation (merge p pl) (merge pl q)), (Permutation (merge p pl) (merge pl p)), (Permutation (merge p pl) (merge pl ql)), (Permutation (merge p pl) (merge pl pl))
(Permutation (merge p pl) (insert a q)), (Permutation (merge p pl) (insert a p)), (Permutation (merge p pl) (insert a ql)), (Permutation (merge p pl) (insert a pl)), (Permutation (merge p pl) (insert k q)), (Permutation (merge p pl) (insert k p)), (Permutation (merge p pl) (insert k ql)), (Permutation (merge p pl) (insert k pl)), (Permutation (merge p pl) (maybe_swap q)), (Permutation (merge p pl) (maybe_swap p))
(Permutation (merge p pl) (maybe_swap ql)), (Permutation (merge p pl) (maybe_swap pl)), (Permutation (merge p pl) (q ++ q)), (Permutation (merge p pl) (q ++ p)), (Permutation (merge p pl) (q ++ ql)), (Permutation (merge p pl) (q ++ pl)), (Permutation (merge p pl) (p ++ q)), (Permutation (merge p pl) (p ++ p)), (Permutation (merge p pl) (p ++ ql)), (Permutation (merge p pl) (p ++ pl))
(Permutation (merge p pl) (ql ++ q)), (Permutation (merge p pl) (ql ++ p)), (Permutation (merge p pl) (ql ++ ql)), (Permutation (merge p pl) (ql ++ pl)), (Permutation (merge p pl) (pl ++ q)), (Permutation (merge p pl) (pl ++ p)), (Permutation (merge p pl) (pl ++ ql)), (Permutation (merge p pl) (pl ++ pl)), (Permutation (merge p pl) []), (Permutation (merge ql q) q)
(Permutation (merge ql q) p), (Permutation (merge ql q) ql), (Permutation (merge ql q) pl), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: pl)), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (k :: ql))
(Permutation (merge ql q) (k :: pl)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q pl)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p pl)), (Permutation (merge ql q) (merge ql p))
(Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql pl)), (Permutation (merge ql q) (merge pl q)), (Permutation (merge ql q) (merge pl p)), (Permutation (merge ql q) (merge pl ql)), (Permutation (merge ql q) (merge pl pl)), (Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a pl))
(Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k pl)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap pl)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ p))
(Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ pl)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ pl)), (Permutation (merge ql q) (ql ++ q)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ pl))
(Permutation (merge ql q) (pl ++ q)), (Permutation (merge ql q) (pl ++ p)), (Permutation (merge ql q) (pl ++ ql)), (Permutation (merge ql q) (pl ++ pl)), (Permutation (merge ql q) []), (Permutation (merge ql p) q), (Permutation (merge ql p) p), (Permutation (merge ql p) ql), (Permutation (merge ql p) pl), (Permutation (merge ql p) (a :: q))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: pl)), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: pl)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge q ql))
(Permutation (merge ql p) (merge q pl)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p pl)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge ql pl)), (Permutation (merge ql p) (merge pl q)), (Permutation (merge ql p) (merge pl p))
(Permutation (merge ql p) (merge pl ql)), (Permutation (merge ql p) (merge pl pl)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a pl)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k pl))
(Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap pl)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ pl)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ p))
(Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ pl)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ pl)), (Permutation (merge ql p) (pl ++ q)), (Permutation (merge ql p) (pl ++ p)), (Permutation (merge ql p) (pl ++ ql)), (Permutation (merge ql p) (pl ++ pl))
(Permutation (merge ql p) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) p), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) pl), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: pl)), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: pl)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q pl)), (Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (merge p ql))
(Permutation (merge ql ql) (merge p pl)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge ql pl)), (Permutation (merge ql ql) (merge pl q)), (Permutation (merge ql ql) (merge pl p)), (Permutation (merge ql ql) (merge pl ql)), (Permutation (merge ql ql) (merge pl pl)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a p))
(Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a pl)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k pl)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap pl))
(Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ pl)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ pl)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ p))
(Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ pl)), (Permutation (merge ql ql) (pl ++ q)), (Permutation (merge ql ql) (pl ++ p)), (Permutation (merge ql ql) (pl ++ ql)), (Permutation (merge ql ql) (pl ++ pl)), (Permutation (merge ql ql) []), (Permutation (merge ql pl) q), (Permutation (merge ql pl) p), (Permutation (merge ql pl) ql)
(Permutation (merge ql pl) pl), (Permutation (merge ql pl) (a :: q)), (Permutation (merge ql pl) (a :: p)), (Permutation (merge ql pl) (a :: ql)), (Permutation (merge ql pl) (a :: pl)), (Permutation (merge ql pl) (k :: q)), (Permutation (merge ql pl) (k :: p)), (Permutation (merge ql pl) (k :: ql)), (Permutation (merge ql pl) (k :: pl)), (Permutation (merge ql pl) (merge q q))
(Permutation (merge ql pl) (merge q p)), (Permutation (merge ql pl) (merge q ql)), (Permutation (merge ql pl) (merge q pl)), (Permutation (merge ql pl) (merge p q)), (Permutation (merge ql pl) (merge p p)), (Permutation (merge ql pl) (merge p ql)), (Permutation (merge ql pl) (merge p pl)), (Permutation (merge ql pl) (merge ql q)), (Permutation (merge ql pl) (merge ql p)), (Permutation (merge ql pl) (merge ql ql))
(Permutation (merge ql pl) (merge pl q)), (Permutation (merge ql pl) (merge pl p)), (Permutation (merge ql pl) (merge pl ql)), (Permutation (merge ql pl) (merge pl pl)), (Permutation (merge ql pl) (insert a q)), (Permutation (merge ql pl) (insert a p)), (Permutation (merge ql pl) (insert a ql)), (Permutation (merge ql pl) (insert a pl)), (Permutation (merge ql pl) (insert k q)), (Permutation (merge ql pl) (insert k p))
(Permutation (merge ql pl) (insert k ql)), (Permutation (merge ql pl) (insert k pl)), (Permutation (merge ql pl) (maybe_swap q)), (Permutation (merge ql pl) (maybe_swap p)), (Permutation (merge ql pl) (maybe_swap ql)), (Permutation (merge ql pl) (maybe_swap pl)), (Permutation (merge ql pl) (q ++ q)), (Permutation (merge ql pl) (q ++ p)), (Permutation (merge ql pl) (q ++ ql)), (Permutation (merge ql pl) (q ++ pl))
(Permutation (merge ql pl) (p ++ q)), (Permutation (merge ql pl) (p ++ p)), (Permutation (merge ql pl) (p ++ ql)), (Permutation (merge ql pl) (p ++ pl)), (Permutation (merge ql pl) (ql ++ q)), (Permutation (merge ql pl) (ql ++ p)), (Permutation (merge ql pl) (ql ++ ql)), (Permutation (merge ql pl) (ql ++ pl)), (Permutation (merge ql pl) (pl ++ q)), (Permutation (merge ql pl) (pl ++ p))
(Permutation (merge ql pl) (pl ++ ql)), (Permutation (merge ql pl) (pl ++ pl)), (Permutation (merge ql pl) []), (Permutation (merge pl q) q), (Permutation (merge pl q) p), (Permutation (merge pl q) ql), (Permutation (merge pl q) pl), (Permutation (merge pl q) (a :: q)), (Permutation (merge pl q) (a :: p)), (Permutation (merge pl q) (a :: ql))
(Permutation (merge pl q) (a :: pl)), (Permutation (merge pl q) (k :: q)), (Permutation (merge pl q) (k :: p)), (Permutation (merge pl q) (k :: ql)), (Permutation (merge pl q) (k :: pl)), (Permutation (merge pl q) (merge q q)), (Permutation (merge pl q) (merge q p)), (Permutation (merge pl q) (merge q ql)), (Permutation (merge pl q) (merge q pl)), (Permutation (merge pl q) (merge p q))
(Permutation (merge pl q) (merge p p)), (Permutation (merge pl q) (merge p ql)), (Permutation (merge pl q) (merge p pl)), (Permutation (merge pl q) (merge ql q)), (Permutation (merge pl q) (merge ql p)), (Permutation (merge pl q) (merge ql ql)), (Permutation (merge pl q) (merge ql pl)), (Permutation (merge pl q) (merge pl p)), (Permutation (merge pl q) (merge pl ql)), (Permutation (merge pl q) (merge pl pl))
(Permutation (merge pl q) (insert a q)), (Permutation (merge pl q) (insert a p)), (Permutation (merge pl q) (insert a ql)), (Permutation (merge pl q) (insert a pl)), (Permutation (merge pl q) (insert k q)), (Permutation (merge pl q) (insert k p)), (Permutation (merge pl q) (insert k ql)), (Permutation (merge pl q) (insert k pl)), (Permutation (merge pl q) (maybe_swap q)), (Permutation (merge pl q) (maybe_swap p))
(Permutation (merge pl q) (maybe_swap ql)), (Permutation (merge pl q) (maybe_swap pl)), (Permutation (merge pl q) (q ++ q)), (Permutation (merge pl q) (q ++ p)), (Permutation (merge pl q) (q ++ ql)), (Permutation (merge pl q) (q ++ pl)), (Permutation (merge pl q) (p ++ q)), (Permutation (merge pl q) (p ++ p)), (Permutation (merge pl q) (p ++ ql)), (Permutation (merge pl q) (p ++ pl))
(Permutation (merge pl q) (ql ++ q)), (Permutation (merge pl q) (ql ++ p)), (Permutation (merge pl q) (ql ++ ql)), (Permutation (merge pl q) (ql ++ pl)), (Permutation (merge pl q) (pl ++ q)), (Permutation (merge pl q) (pl ++ p)), (Permutation (merge pl q) (pl ++ ql)), (Permutation (merge pl q) (pl ++ pl)), (Permutation (merge pl q) []), (Permutation (merge pl p) q)
(Permutation (merge pl p) p), (Permutation (merge pl p) ql), (Permutation (merge pl p) pl), (Permutation (merge pl p) (a :: q)), (Permutation (merge pl p) (a :: p)), (Permutation (merge pl p) (a :: ql)), (Permutation (merge pl p) (a :: pl)), (Permutation (merge pl p) (k :: q)), (Permutation (merge pl p) (k :: p)), (Permutation (merge pl p) (k :: ql))
(Permutation (merge pl p) (k :: pl)), (Permutation (merge pl p) (merge q q)), (Permutation (merge pl p) (merge q p)), (Permutation (merge pl p) (merge q ql)), (Permutation (merge pl p) (merge q pl)), (Permutation (merge pl p) (merge p q)), (Permutation (merge pl p) (merge p p)), (Permutation (merge pl p) (merge p ql)), (Permutation (merge pl p) (merge p pl)), (Permutation (merge pl p) (merge ql q))
(Permutation (merge pl p) (merge ql p)), (Permutation (merge pl p) (merge ql ql)), (Permutation (merge pl p) (merge ql pl)), (Permutation (merge pl p) (merge pl q)), (Permutation (merge pl p) (merge pl ql)), (Permutation (merge pl p) (merge pl pl)), (Permutation (merge pl p) (insert a q)), (Permutation (merge pl p) (insert a p)), (Permutation (merge pl p) (insert a ql)), (Permutation (merge pl p) (insert a pl))
(Permutation (merge pl p) (insert k q)), (Permutation (merge pl p) (insert k p)), (Permutation (merge pl p) (insert k ql)), (Permutation (merge pl p) (insert k pl)), (Permutation (merge pl p) (maybe_swap q)), (Permutation (merge pl p) (maybe_swap p)), (Permutation (merge pl p) (maybe_swap ql)), (Permutation (merge pl p) (maybe_swap pl)), (Permutation (merge pl p) (q ++ q)), (Permutation (merge pl p) (q ++ p))
(Permutation (merge pl p) (q ++ ql)), (Permutation (merge pl p) (q ++ pl)), (Permutation (merge pl p) (p ++ q)), (Permutation (merge pl p) (p ++ p)), (Permutation (merge pl p) (p ++ ql)), (Permutation (merge pl p) (p ++ pl)), (Permutation (merge pl p) (ql ++ q)), (Permutation (merge pl p) (ql ++ p)), (Permutation (merge pl p) (ql ++ ql)), (Permutation (merge pl p) (ql ++ pl))
(Permutation (merge pl p) (pl ++ q)), (Permutation (merge pl p) (pl ++ p)), (Permutation (merge pl p) (pl ++ ql)), (Permutation (merge pl p) (pl ++ pl)), (Permutation (merge pl p) []), (Permutation (merge pl ql) q), (Permutation (merge pl ql) p), (Permutation (merge pl ql) ql), (Permutation (merge pl ql) pl), (Permutation (merge pl ql) (a :: q))
(Permutation (merge pl ql) (a :: p)), (Permutation (merge pl ql) (a :: ql)), (Permutation (merge pl ql) (a :: pl)), (Permutation (merge pl ql) (k :: q)), (Permutation (merge pl ql) (k :: p)), (Permutation (merge pl ql) (k :: ql)), (Permutation (merge pl ql) (k :: pl)), (Permutation (merge pl ql) (merge q q)), (Permutation (merge pl ql) (merge q p)), (Permutation (merge pl ql) (merge q ql))
(Permutation (merge pl ql) (merge q pl)), (Permutation (merge pl ql) (merge p q)), (Permutation (merge pl ql) (merge p p)), (Permutation (merge pl ql) (merge p ql)), (Permutation (merge pl ql) (merge p pl)), (Permutation (merge pl ql) (merge ql q)), (Permutation (merge pl ql) (merge ql p)), (Permutation (merge pl ql) (merge ql ql)), (Permutation (merge pl ql) (merge ql pl)), (Permutation (merge pl ql) (merge pl q))
(Permutation (merge pl ql) (merge pl p)), (Permutation (merge pl ql) (merge pl pl)), (Permutation (merge pl ql) (insert a q)), (Permutation (merge pl ql) (insert a p)), (Permutation (merge pl ql) (insert a ql)), (Permutation (merge pl ql) (insert a pl)), (Permutation (merge pl ql) (insert k q)), (Permutation (merge pl ql) (insert k p)), (Permutation (merge pl ql) (insert k ql)), (Permutation (merge pl ql) (insert k pl))
(Permutation (merge pl ql) (maybe_swap q)), (Permutation (merge pl ql) (maybe_swap p)), (Permutation (merge pl ql) (maybe_swap ql)), (Permutation (merge pl ql) (maybe_swap pl)), (Permutation (merge pl ql) (q ++ q)), (Permutation (merge pl ql) (q ++ p)), (Permutation (merge pl ql) (q ++ ql)), (Permutation (merge pl ql) (q ++ pl)), (Permutation (merge pl ql) (p ++ q)), (Permutation (merge pl ql) (p ++ p))
(Permutation (merge pl ql) (p ++ ql)), (Permutation (merge pl ql) (p ++ pl)), (Permutation (merge pl ql) (ql ++ q)), (Permutation (merge pl ql) (ql ++ p)), (Permutation (merge pl ql) (ql ++ ql)), (Permutation (merge pl ql) (ql ++ pl)), (Permutation (merge pl ql) (pl ++ q)), (Permutation (merge pl ql) (pl ++ p)), (Permutation (merge pl ql) (pl ++ ql)), (Permutation (merge pl ql) (pl ++ pl))
(Permutation (merge pl ql) []), (Permutation (merge pl pl) q), (Permutation (merge pl pl) p), (Permutation (merge pl pl) ql), (Permutation (merge pl pl) pl), (Permutation (merge pl pl) (a :: q)), (Permutation (merge pl pl) (a :: p)), (Permutation (merge pl pl) (a :: ql)), (Permutation (merge pl pl) (a :: pl)), (Permutation (merge pl pl) (k :: q))
(Permutation (merge pl pl) (k :: p)), (Permutation (merge pl pl) (k :: ql)), (Permutation (merge pl pl) (k :: pl)), (Permutation (merge pl pl) (merge q q)), (Permutation (merge pl pl) (merge q p)), (Permutation (merge pl pl) (merge q ql)), (Permutation (merge pl pl) (merge q pl)), (Permutation (merge pl pl) (merge p q)), (Permutation (merge pl pl) (merge p p)), (Permutation (merge pl pl) (merge p ql))
(Permutation (merge pl pl) (merge p pl)), (Permutation (merge pl pl) (merge ql q)), (Permutation (merge pl pl) (merge ql p)), (Permutation (merge pl pl) (merge ql ql)), (Permutation (merge pl pl) (merge ql pl)), (Permutation (merge pl pl) (merge pl q)), (Permutation (merge pl pl) (merge pl p)), (Permutation (merge pl pl) (merge pl ql)), (Permutation (merge pl pl) (insert a q)), (Permutation (merge pl pl) (insert a p))
(Permutation (merge pl pl) (insert a ql)), (Permutation (merge pl pl) (insert a pl)), (Permutation (merge pl pl) (insert k q)), (Permutation (merge pl pl) (insert k p)), (Permutation (merge pl pl) (insert k ql)), (Permutation (merge pl pl) (insert k pl)), (Permutation (merge pl pl) (maybe_swap q)), (Permutation (merge pl pl) (maybe_swap p)), (Permutation (merge pl pl) (maybe_swap ql)), (Permutation (merge pl pl) (maybe_swap pl))
(Permutation (merge pl pl) (q ++ q)), (Permutation (merge pl pl) (q ++ p)), (Permutation (merge pl pl) (q ++ ql)), (Permutation (merge pl pl) (q ++ pl)), (Permutation (merge pl pl) (p ++ q)), (Permutation (merge pl pl) (p ++ p)), (Permutation (merge pl pl) (p ++ ql)), (Permutation (merge pl pl) (p ++ pl)), (Permutation (merge pl pl) (ql ++ q)), (Permutation (merge pl pl) (ql ++ p))
(Permutation (merge pl pl) (ql ++ ql)), (Permutation (merge pl pl) (ql ++ pl)), (Permutation (merge pl pl) (pl ++ q)), (Permutation (merge pl pl) (pl ++ p)), (Permutation (merge pl pl) (pl ++ ql)), (Permutation (merge pl pl) (pl ++ pl)), (Permutation (merge pl pl) []), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) ql)
(Permutation (insert a q) pl), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: pl)), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: pl)), (Permutation (insert a q) (merge q q))
(Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q pl)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p pl)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql pl)), (Permutation (insert a q) (merge pl q)), (Permutation (insert a q) (merge pl p)), (Permutation (insert a q) (merge pl ql)), (Permutation (insert a q) (merge pl pl)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a pl)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p))
(Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k pl)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap pl)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ pl))
(Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ pl)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ pl)), (Permutation (insert a q) (pl ++ q)), (Permutation (insert a q) (pl ++ p))
(Permutation (insert a q) (pl ++ ql)), (Permutation (insert a q) (pl ++ pl)), (Permutation (insert a q) []), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) ql), (Permutation (insert a p) pl), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (a :: ql))
(Permutation (insert a p) (a :: pl)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: pl)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q pl)), (Permutation (insert a p) (merge p q))
(Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p pl)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge ql ql)), (Permutation (insert a p) (merge ql pl)), (Permutation (insert a p) (merge pl q)), (Permutation (insert a p) (merge pl p)), (Permutation (insert a p) (merge pl ql))
(Permutation (insert a p) (merge pl pl)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (insert a pl)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k pl)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap pl)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ pl)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ pl))
(Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ pl)), (Permutation (insert a p) (pl ++ q)), (Permutation (insert a p) (pl ++ p)), (Permutation (insert a p) (pl ++ ql)), (Permutation (insert a p) (pl ++ pl)), (Permutation (insert a p) []), (Permutation (insert a ql) q)
(Permutation (insert a ql) p), (Permutation (insert a ql) ql), (Permutation (insert a ql) pl), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: pl)), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (k :: ql))
(Permutation (insert a ql) (k :: pl)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q pl)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p pl)), (Permutation (insert a ql) (merge ql q))
(Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql pl)), (Permutation (insert a ql) (merge pl q)), (Permutation (insert a ql) (merge pl p)), (Permutation (insert a ql) (merge pl ql)), (Permutation (insert a ql) (merge pl pl)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (insert a pl))
(Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert k ql)), (Permutation (insert a ql) (insert k pl)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap pl)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ p))
(Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ pl)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ pl)), (Permutation (insert a ql) (ql ++ q)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ pl))
(Permutation (insert a ql) (pl ++ q)), (Permutation (insert a ql) (pl ++ p)), (Permutation (insert a ql) (pl ++ ql)), (Permutation (insert a ql) (pl ++ pl)), (Permutation (insert a ql) []), (Permutation (insert a pl) q), (Permutation (insert a pl) p), (Permutation (insert a pl) ql), (Permutation (insert a pl) pl), (Permutation (insert a pl) (a :: q))
(Permutation (insert a pl) (a :: p)), (Permutation (insert a pl) (a :: ql)), (Permutation (insert a pl) (a :: pl)), (Permutation (insert a pl) (k :: q)), (Permutation (insert a pl) (k :: p)), (Permutation (insert a pl) (k :: ql)), (Permutation (insert a pl) (k :: pl)), (Permutation (insert a pl) (merge q q)), (Permutation (insert a pl) (merge q p)), (Permutation (insert a pl) (merge q ql))
(Permutation (insert a pl) (merge q pl)), (Permutation (insert a pl) (merge p q)), (Permutation (insert a pl) (merge p p)), (Permutation (insert a pl) (merge p ql)), (Permutation (insert a pl) (merge p pl)), (Permutation (insert a pl) (merge ql q)), (Permutation (insert a pl) (merge ql p)), (Permutation (insert a pl) (merge ql ql)), (Permutation (insert a pl) (merge ql pl)), (Permutation (insert a pl) (merge pl q))
(Permutation (insert a pl) (merge pl p)), (Permutation (insert a pl) (merge pl ql)), (Permutation (insert a pl) (merge pl pl)), (Permutation (insert a pl) (insert a q)), (Permutation (insert a pl) (insert a p)), (Permutation (insert a pl) (insert a ql)), (Permutation (insert a pl) (insert k q)), (Permutation (insert a pl) (insert k p)), (Permutation (insert a pl) (insert k ql)), (Permutation (insert a pl) (insert k pl))
(Permutation (insert a pl) (maybe_swap q)), (Permutation (insert a pl) (maybe_swap p)), (Permutation (insert a pl) (maybe_swap ql)), (Permutation (insert a pl) (maybe_swap pl)), (Permutation (insert a pl) (q ++ q)), (Permutation (insert a pl) (q ++ p)), (Permutation (insert a pl) (q ++ ql)), (Permutation (insert a pl) (q ++ pl)), (Permutation (insert a pl) (p ++ q)), (Permutation (insert a pl) (p ++ p))
(Permutation (insert a pl) (p ++ ql)), (Permutation (insert a pl) (p ++ pl)), (Permutation (insert a pl) (ql ++ q)), (Permutation (insert a pl) (ql ++ p)), (Permutation (insert a pl) (ql ++ ql)), (Permutation (insert a pl) (ql ++ pl)), (Permutation (insert a pl) (pl ++ q)), (Permutation (insert a pl) (pl ++ p)), (Permutation (insert a pl) (pl ++ ql)), (Permutation (insert a pl) (pl ++ pl))
(Permutation (insert a pl) []), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) ql), (Permutation (insert k q) pl), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: pl)), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: pl)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q pl)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (merge p ql))
(Permutation (insert k q) (merge p pl)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge ql ql)), (Permutation (insert k q) (merge ql pl)), (Permutation (insert k q) (merge pl q)), (Permutation (insert k q) (merge pl p)), (Permutation (insert k q) (merge pl ql)), (Permutation (insert k q) (merge pl pl)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a pl)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k pl)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap pl))
(Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ pl)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ pl)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ p))
(Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ pl)), (Permutation (insert k q) (pl ++ q)), (Permutation (insert k q) (pl ++ p)), (Permutation (insert k q) (pl ++ ql)), (Permutation (insert k q) (pl ++ pl)), (Permutation (insert k q) []), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) ql)
(Permutation (insert k p) pl), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: pl)), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: pl)), (Permutation (insert k p) (merge q q))
(Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q pl)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p pl)), (Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge ql ql))
(Permutation (insert k p) (merge ql pl)), (Permutation (insert k p) (merge pl q)), (Permutation (insert k p) (merge pl p)), (Permutation (insert k p) (merge pl ql)), (Permutation (insert k p) (merge pl pl)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a pl)), (Permutation (insert k p) (insert k q))
(Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k pl)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap pl)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ pl))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ pl)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ pl)), (Permutation (insert k p) (pl ++ q)), (Permutation (insert k p) (pl ++ p))
(Permutation (insert k p) (pl ++ ql)), (Permutation (insert k p) (pl ++ pl)), (Permutation (insert k p) []), (Permutation (insert k ql) q), (Permutation (insert k ql) p), (Permutation (insert k ql) ql), (Permutation (insert k ql) pl), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: pl)), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: pl)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q pl)), (Permutation (insert k ql) (merge p q))
(Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p pl)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql pl)), (Permutation (insert k ql) (merge pl q)), (Permutation (insert k ql) (merge pl p)), (Permutation (insert k ql) (merge pl ql))
(Permutation (insert k ql) (merge pl pl)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a pl)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert k pl)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap p))
(Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap pl)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ pl)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ pl))
(Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ pl)), (Permutation (insert k ql) (pl ++ q)), (Permutation (insert k ql) (pl ++ p)), (Permutation (insert k ql) (pl ++ ql)), (Permutation (insert k ql) (pl ++ pl)), (Permutation (insert k ql) []), (Permutation (insert k pl) q)
(Permutation (insert k pl) p), (Permutation (insert k pl) ql), (Permutation (insert k pl) pl), (Permutation (insert k pl) (a :: q)), (Permutation (insert k pl) (a :: p)), (Permutation (insert k pl) (a :: ql)), (Permutation (insert k pl) (a :: pl)), (Permutation (insert k pl) (k :: q)), (Permutation (insert k pl) (k :: p)), (Permutation (insert k pl) (k :: ql))
(Permutation (insert k pl) (k :: pl)), (Permutation (insert k pl) (merge q q)), (Permutation (insert k pl) (merge q p)), (Permutation (insert k pl) (merge q ql)), (Permutation (insert k pl) (merge q pl)), (Permutation (insert k pl) (merge p q)), (Permutation (insert k pl) (merge p p)), (Permutation (insert k pl) (merge p ql)), (Permutation (insert k pl) (merge p pl)), (Permutation (insert k pl) (merge ql q))
(Permutation (insert k pl) (merge ql p)), (Permutation (insert k pl) (merge ql ql)), (Permutation (insert k pl) (merge ql pl)), (Permutation (insert k pl) (merge pl q)), (Permutation (insert k pl) (merge pl p)), (Permutation (insert k pl) (merge pl ql)), (Permutation (insert k pl) (merge pl pl)), (Permutation (insert k pl) (insert a q)), (Permutation (insert k pl) (insert a p)), (Permutation (insert k pl) (insert a ql))
(Permutation (insert k pl) (insert a pl)), (Permutation (insert k pl) (insert k q)), (Permutation (insert k pl) (insert k p)), (Permutation (insert k pl) (insert k ql)), (Permutation (insert k pl) (maybe_swap q)), (Permutation (insert k pl) (maybe_swap p)), (Permutation (insert k pl) (maybe_swap ql)), (Permutation (insert k pl) (maybe_swap pl)), (Permutation (insert k pl) (q ++ q)), (Permutation (insert k pl) (q ++ p))
(Permutation (insert k pl) (q ++ ql)), (Permutation (insert k pl) (q ++ pl)), (Permutation (insert k pl) (p ++ q)), (Permutation (insert k pl) (p ++ p)), (Permutation (insert k pl) (p ++ ql)), (Permutation (insert k pl) (p ++ pl)), (Permutation (insert k pl) (ql ++ q)), (Permutation (insert k pl) (ql ++ p)), (Permutation (insert k pl) (ql ++ ql)), (Permutation (insert k pl) (ql ++ pl))
(Permutation (insert k pl) (pl ++ q)), (Permutation (insert k pl) (pl ++ p)), (Permutation (insert k pl) (pl ++ ql)), (Permutation (insert k pl) (pl ++ pl)), (Permutation (insert k pl) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) pl), (Permutation (maybe_swap q) (a :: q))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: ql)), (Permutation (maybe_swap q) (a :: pl)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: pl)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q ql))
(Permutation (maybe_swap q) (merge q pl)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p pl)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql pl)), (Permutation (maybe_swap q) (merge pl q))
(Permutation (maybe_swap q) (merge pl p)), (Permutation (maybe_swap q) (merge pl ql)), (Permutation (maybe_swap q) (merge pl pl)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a pl)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert k ql))
(Permutation (maybe_swap q) (insert k pl)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap pl)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ pl)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ p))
(Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ pl)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ pl)), (Permutation (maybe_swap q) (pl ++ q)), (Permutation (maybe_swap q) (pl ++ p)), (Permutation (maybe_swap q) (pl ++ ql)), (Permutation (maybe_swap q) (pl ++ pl))
(Permutation (maybe_swap q) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) pl), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: pl)), (Permutation (maybe_swap p) (k :: q))
(Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: pl)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q pl)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p ql))
(Permutation (maybe_swap p) (merge p pl)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql pl)), (Permutation (maybe_swap p) (merge pl q)), (Permutation (maybe_swap p) (merge pl p)), (Permutation (maybe_swap p) (merge pl ql)), (Permutation (maybe_swap p) (merge pl pl)), (Permutation (maybe_swap p) (insert a q))
(Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a pl)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k pl)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql)), (Permutation (maybe_swap p) (maybe_swap pl))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ pl)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ pl)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ p))
(Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ pl)), (Permutation (maybe_swap p) (pl ++ q)), (Permutation (maybe_swap p) (pl ++ p)), (Permutation (maybe_swap p) (pl ++ ql)), (Permutation (maybe_swap p) (pl ++ pl)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) pl), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: pl)), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: pl)), (Permutation (maybe_swap ql) (merge q q))
(Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q pl)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p pl)), (Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge ql ql))
(Permutation (maybe_swap ql) (merge ql pl)), (Permutation (maybe_swap ql) (merge pl q)), (Permutation (maybe_swap ql) (merge pl p)), (Permutation (maybe_swap ql) (merge pl ql)), (Permutation (maybe_swap ql) (merge pl pl)), (Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a pl)), (Permutation (maybe_swap ql) (insert k q))
(Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k pl)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (maybe_swap pl)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ pl))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ pl)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ pl)), (Permutation (maybe_swap ql) (pl ++ q)), (Permutation (maybe_swap ql) (pl ++ p))
(Permutation (maybe_swap ql) (pl ++ ql)), (Permutation (maybe_swap ql) (pl ++ pl)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap pl) q), (Permutation (maybe_swap pl) p), (Permutation (maybe_swap pl) ql), (Permutation (maybe_swap pl) pl), (Permutation (maybe_swap pl) (a :: q)), (Permutation (maybe_swap pl) (a :: p)), (Permutation (maybe_swap pl) (a :: ql))
(Permutation (maybe_swap pl) (a :: pl)), (Permutation (maybe_swap pl) (k :: q)), (Permutation (maybe_swap pl) (k :: p)), (Permutation (maybe_swap pl) (k :: ql)), (Permutation (maybe_swap pl) (k :: pl)), (Permutation (maybe_swap pl) (merge q q)), (Permutation (maybe_swap pl) (merge q p)), (Permutation (maybe_swap pl) (merge q ql)), (Permutation (maybe_swap pl) (merge q pl)), (Permutation (maybe_swap pl) (merge p q))
(Permutation (maybe_swap pl) (merge p p)), (Permutation (maybe_swap pl) (merge p ql)), (Permutation (maybe_swap pl) (merge p pl)), (Permutation (maybe_swap pl) (merge ql q)), (Permutation (maybe_swap pl) (merge ql p)), (Permutation (maybe_swap pl) (merge ql ql)), (Permutation (maybe_swap pl) (merge ql pl)), (Permutation (maybe_swap pl) (merge pl q)), (Permutation (maybe_swap pl) (merge pl p)), (Permutation (maybe_swap pl) (merge pl ql))
(Permutation (maybe_swap pl) (merge pl pl)), (Permutation (maybe_swap pl) (insert a q)), (Permutation (maybe_swap pl) (insert a p)), (Permutation (maybe_swap pl) (insert a ql)), (Permutation (maybe_swap pl) (insert a pl)), (Permutation (maybe_swap pl) (insert k q)), (Permutation (maybe_swap pl) (insert k p)), (Permutation (maybe_swap pl) (insert k ql)), (Permutation (maybe_swap pl) (insert k pl)), (Permutation (maybe_swap pl) (maybe_swap q))
(Permutation (maybe_swap pl) (maybe_swap p)), (Permutation (maybe_swap pl) (maybe_swap ql)), (Permutation (maybe_swap pl) (q ++ q)), (Permutation (maybe_swap pl) (q ++ p)), (Permutation (maybe_swap pl) (q ++ ql)), (Permutation (maybe_swap pl) (q ++ pl)), (Permutation (maybe_swap pl) (p ++ q)), (Permutation (maybe_swap pl) (p ++ p)), (Permutation (maybe_swap pl) (p ++ ql)), (Permutation (maybe_swap pl) (p ++ pl))
(Permutation (maybe_swap pl) (ql ++ q)), (Permutation (maybe_swap pl) (ql ++ p)), (Permutation (maybe_swap pl) (ql ++ ql)), (Permutation (maybe_swap pl) (ql ++ pl)), (Permutation (maybe_swap pl) (pl ++ q)), (Permutation (maybe_swap pl) (pl ++ p)), (Permutation (maybe_swap pl) (pl ++ ql)), (Permutation (maybe_swap pl) (pl ++ pl)), (Permutation (maybe_swap pl) []), (Permutation (q ++ q) q)
(Permutation (q ++ q) p), (Permutation (q ++ q) ql), (Permutation (q ++ q) pl), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: pl)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: ql))
(Permutation (q ++ q) (k :: pl)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q pl)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p pl)), (Permutation (q ++ q) (merge ql q))
(Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql pl)), (Permutation (q ++ q) (merge pl q)), (Permutation (q ++ q) (merge pl p)), (Permutation (q ++ q) (merge pl ql)), (Permutation (q ++ q) (merge pl pl)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a ql))
(Permutation (q ++ q) (insert a pl)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k pl)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap pl)), (Permutation (q ++ q) (q ++ p))
(Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ pl)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ pl)), (Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ pl))
(Permutation (q ++ q) (pl ++ q)), (Permutation (q ++ q) (pl ++ p)), (Permutation (q ++ q) (pl ++ ql)), (Permutation (q ++ q) (pl ++ pl)), (Permutation (q ++ q) []), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) ql), (Permutation (q ++ p) pl), (Permutation (q ++ p) (a :: q))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: ql)), (Permutation (q ++ p) (a :: pl)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: pl)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q ql))
(Permutation (q ++ p) (merge q pl)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p pl)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql pl)), (Permutation (q ++ p) (merge pl q))
(Permutation (q ++ p) (merge pl p)), (Permutation (q ++ p) (merge pl ql)), (Permutation (q ++ p) (merge pl pl)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a pl)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert k ql))
(Permutation (q ++ p) (insert k pl)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap pl)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ pl)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ p))
(Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ pl)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ pl)), (Permutation (q ++ p) (pl ++ q)), (Permutation (q ++ p) (pl ++ p)), (Permutation (q ++ p) (pl ++ ql)), (Permutation (q ++ p) (pl ++ pl))
(Permutation (q ++ p) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) p), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) pl), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: pl)), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: pl)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q pl)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (merge p ql))
(Permutation (q ++ ql) (merge p pl)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge ql ql)), (Permutation (q ++ ql) (merge ql pl)), (Permutation (q ++ ql) (merge pl q)), (Permutation (q ++ ql) (merge pl p)), (Permutation (q ++ ql) (merge pl ql)), (Permutation (q ++ ql) (merge pl pl)), (Permutation (q ++ ql) (insert a q))
(Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a pl)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k pl)), (Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (maybe_swap ql))
(Permutation (q ++ ql) (maybe_swap pl)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (q ++ pl)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ pl)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ p))
(Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ pl)), (Permutation (q ++ ql) (pl ++ q)), (Permutation (q ++ ql) (pl ++ p)), (Permutation (q ++ ql) (pl ++ ql)), (Permutation (q ++ ql) (pl ++ pl)), (Permutation (q ++ ql) []), (Permutation (q ++ pl) q), (Permutation (q ++ pl) p), (Permutation (q ++ pl) ql)
(Permutation (q ++ pl) pl), (Permutation (q ++ pl) (a :: q)), (Permutation (q ++ pl) (a :: p)), (Permutation (q ++ pl) (a :: ql)), (Permutation (q ++ pl) (a :: pl)), (Permutation (q ++ pl) (k :: q)), (Permutation (q ++ pl) (k :: p)), (Permutation (q ++ pl) (k :: ql)), (Permutation (q ++ pl) (k :: pl)), (Permutation (q ++ pl) (merge q q))
(Permutation (q ++ pl) (merge q p)), (Permutation (q ++ pl) (merge q ql)), (Permutation (q ++ pl) (merge q pl)), (Permutation (q ++ pl) (merge p q)), (Permutation (q ++ pl) (merge p p)), (Permutation (q ++ pl) (merge p ql)), (Permutation (q ++ pl) (merge p pl)), (Permutation (q ++ pl) (merge ql q)), (Permutation (q ++ pl) (merge ql p)), (Permutation (q ++ pl) (merge ql ql))
(Permutation (q ++ pl) (merge ql pl)), (Permutation (q ++ pl) (merge pl q)), (Permutation (q ++ pl) (merge pl p)), (Permutation (q ++ pl) (merge pl ql)), (Permutation (q ++ pl) (merge pl pl)), (Permutation (q ++ pl) (insert a q)), (Permutation (q ++ pl) (insert a p)), (Permutation (q ++ pl) (insert a ql)), (Permutation (q ++ pl) (insert a pl)), (Permutation (q ++ pl) (insert k q))
(Permutation (q ++ pl) (insert k p)), (Permutation (q ++ pl) (insert k ql)), (Permutation (q ++ pl) (insert k pl)), (Permutation (q ++ pl) (maybe_swap q)), (Permutation (q ++ pl) (maybe_swap p)), (Permutation (q ++ pl) (maybe_swap ql)), (Permutation (q ++ pl) (maybe_swap pl)), (Permutation (q ++ pl) (q ++ q)), (Permutation (q ++ pl) (q ++ p)), (Permutation (q ++ pl) (q ++ ql))
(Permutation (q ++ pl) (p ++ q)), (Permutation (q ++ pl) (p ++ p)), (Permutation (q ++ pl) (p ++ ql)), (Permutation (q ++ pl) (p ++ pl)), (Permutation (q ++ pl) (ql ++ q)), (Permutation (q ++ pl) (ql ++ p)), (Permutation (q ++ pl) (ql ++ ql)), (Permutation (q ++ pl) (ql ++ pl)), (Permutation (q ++ pl) (pl ++ q)), (Permutation (q ++ pl) (pl ++ p))
(Permutation (q ++ pl) (pl ++ ql)), (Permutation (q ++ pl) (pl ++ pl)), (Permutation (q ++ pl) []), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) ql), (Permutation (p ++ q) pl), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (a :: ql))
(Permutation (p ++ q) (a :: pl)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: pl)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q pl)), (Permutation (p ++ q) (merge p q))
(Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p pl)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge ql ql)), (Permutation (p ++ q) (merge ql pl)), (Permutation (p ++ q) (merge pl q)), (Permutation (p ++ q) (merge pl p)), (Permutation (p ++ q) (merge pl ql))
(Permutation (p ++ q) (merge pl pl)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a pl)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k pl)), (Permutation (p ++ q) (maybe_swap q))
(Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap pl)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ pl)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ ql)), (Permutation (p ++ q) (p ++ pl))
(Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ pl)), (Permutation (p ++ q) (pl ++ q)), (Permutation (p ++ q) (pl ++ p)), (Permutation (p ++ q) (pl ++ ql)), (Permutation (p ++ q) (pl ++ pl)), (Permutation (p ++ q) []), (Permutation (p ++ p) q)
(Permutation (p ++ p) p), (Permutation (p ++ p) ql), (Permutation (p ++ p) pl), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: pl)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: ql))
(Permutation (p ++ p) (k :: pl)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q pl)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p pl)), (Permutation (p ++ p) (merge ql q))
(Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql pl)), (Permutation (p ++ p) (merge pl q)), (Permutation (p ++ p) (merge pl p)), (Permutation (p ++ p) (merge pl ql)), (Permutation (p ++ p) (merge pl pl)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a ql))
(Permutation (p ++ p) (insert a pl)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k pl)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap pl)), (Permutation (p ++ p) (q ++ q))
(Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ pl)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) (p ++ pl)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (ql ++ ql)), (Permutation (p ++ p) (ql ++ pl))
(Permutation (p ++ p) (pl ++ q)), (Permutation (p ++ p) (pl ++ p)), (Permutation (p ++ p) (pl ++ ql)), (Permutation (p ++ p) (pl ++ pl)), (Permutation (p ++ p) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) p), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) pl), (Permutation (p ++ ql) (a :: q))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (a :: ql)), (Permutation (p ++ ql) (a :: pl)), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: pl)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge q ql))
(Permutation (p ++ ql) (merge q pl)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p pl)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql pl)), (Permutation (p ++ ql) (merge pl q))
(Permutation (p ++ ql) (merge pl p)), (Permutation (p ++ ql) (merge pl ql)), (Permutation (p ++ ql) (merge pl pl)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a pl)), (Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert k ql))
(Permutation (p ++ ql) (insert k pl)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap pl)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ pl)), (Permutation (p ++ ql) (p ++ q))
(Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) (p ++ pl)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ pl)), (Permutation (p ++ ql) (pl ++ q)), (Permutation (p ++ ql) (pl ++ p)), (Permutation (p ++ ql) (pl ++ ql)), (Permutation (p ++ ql) (pl ++ pl))
(Permutation (p ++ ql) []), (Permutation (p ++ pl) q), (Permutation (p ++ pl) p), (Permutation (p ++ pl) ql), (Permutation (p ++ pl) pl), (Permutation (p ++ pl) (a :: q)), (Permutation (p ++ pl) (a :: p)), (Permutation (p ++ pl) (a :: ql)), (Permutation (p ++ pl) (a :: pl)), (Permutation (p ++ pl) (k :: q))
(Permutation (p ++ pl) (k :: p)), (Permutation (p ++ pl) (k :: ql)), (Permutation (p ++ pl) (k :: pl)), (Permutation (p ++ pl) (merge q q)), (Permutation (p ++ pl) (merge q p)), (Permutation (p ++ pl) (merge q ql)), (Permutation (p ++ pl) (merge q pl)), (Permutation (p ++ pl) (merge p q)), (Permutation (p ++ pl) (merge p p)), (Permutation (p ++ pl) (merge p ql))
(Permutation (p ++ pl) (merge p pl)), (Permutation (p ++ pl) (merge ql q)), (Permutation (p ++ pl) (merge ql p)), (Permutation (p ++ pl) (merge ql ql)), (Permutation (p ++ pl) (merge ql pl)), (Permutation (p ++ pl) (merge pl q)), (Permutation (p ++ pl) (merge pl p)), (Permutation (p ++ pl) (merge pl ql)), (Permutation (p ++ pl) (merge pl pl)), (Permutation (p ++ pl) (insert a q))
(Permutation (p ++ pl) (insert a p)), (Permutation (p ++ pl) (insert a ql)), (Permutation (p ++ pl) (insert a pl)), (Permutation (p ++ pl) (insert k q)), (Permutation (p ++ pl) (insert k p)), (Permutation (p ++ pl) (insert k ql)), (Permutation (p ++ pl) (insert k pl)), (Permutation (p ++ pl) (maybe_swap q)), (Permutation (p ++ pl) (maybe_swap p)), (Permutation (p ++ pl) (maybe_swap ql))
(Permutation (p ++ pl) (maybe_swap pl)), (Permutation (p ++ pl) (q ++ q)), (Permutation (p ++ pl) (q ++ p)), (Permutation (p ++ pl) (q ++ ql)), (Permutation (p ++ pl) (q ++ pl)), (Permutation (p ++ pl) (p ++ q)), (Permutation (p ++ pl) (p ++ p)), (Permutation (p ++ pl) (p ++ ql)), (Permutation (p ++ pl) (ql ++ q)), (Permutation (p ++ pl) (ql ++ p))
(Permutation (p ++ pl) (ql ++ ql)), (Permutation (p ++ pl) (ql ++ pl)), (Permutation (p ++ pl) (pl ++ q)), (Permutation (p ++ pl) (pl ++ p)), (Permutation (p ++ pl) (pl ++ ql)), (Permutation (p ++ pl) (pl ++ pl)), (Permutation (p ++ pl) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) p), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) pl), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: pl)), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: pl)), (Permutation (ql ++ q) (merge q q))
(Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q pl)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p pl)), (Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge ql ql))
(Permutation (ql ++ q) (merge ql pl)), (Permutation (ql ++ q) (merge pl q)), (Permutation (ql ++ q) (merge pl p)), (Permutation (ql ++ q) (merge pl ql)), (Permutation (ql ++ q) (merge pl pl)), (Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a pl)), (Permutation (ql ++ q) (insert k q))
(Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k pl)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap pl)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (q ++ ql))
(Permutation (ql ++ q) (q ++ pl)), (Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ pl)), (Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ pl)), (Permutation (ql ++ q) (pl ++ q)), (Permutation (ql ++ q) (pl ++ p))
(Permutation (ql ++ q) (pl ++ ql)), (Permutation (ql ++ q) (pl ++ pl)), (Permutation (ql ++ q) []), (Permutation (ql ++ p) q), (Permutation (ql ++ p) p), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) pl), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (a :: ql))
(Permutation (ql ++ p) (a :: pl)), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: pl)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q pl)), (Permutation (ql ++ p) (merge p q))
(Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p pl)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql pl)), (Permutation (ql ++ p) (merge pl q)), (Permutation (ql ++ p) (merge pl p)), (Permutation (ql ++ p) (merge pl ql))
(Permutation (ql ++ p) (merge pl pl)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a pl)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k pl)), (Permutation (ql ++ p) (maybe_swap q))
(Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap pl)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ pl)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) (p ++ ql))
(Permutation (ql ++ p) (p ++ pl)), (Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (ql ++ pl)), (Permutation (ql ++ p) (pl ++ q)), (Permutation (ql ++ p) (pl ++ p)), (Permutation (ql ++ p) (pl ++ ql)), (Permutation (ql ++ p) (pl ++ pl)), (Permutation (ql ++ p) []), (Permutation (ql ++ ql) q)
(Permutation (ql ++ ql) p), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) pl), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: pl)), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (k :: ql))
(Permutation (ql ++ ql) (k :: pl)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q pl)), (Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p pl)), (Permutation (ql ++ ql) (merge ql q))
(Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql pl)), (Permutation (ql ++ ql) (merge pl q)), (Permutation (ql ++ ql) (merge pl p)), (Permutation (ql ++ ql) (merge pl ql)), (Permutation (ql ++ ql) (merge pl pl)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (insert a ql))
(Permutation (ql ++ ql) (insert a pl)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k pl)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap pl)), (Permutation (ql ++ ql) (q ++ q))
(Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ pl)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ pl)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (ql ++ pl))
(Permutation (ql ++ ql) (pl ++ q)), (Permutation (ql ++ ql) (pl ++ p)), (Permutation (ql ++ ql) (pl ++ ql)), (Permutation (ql ++ ql) (pl ++ pl)), (Permutation (ql ++ ql) []), (Permutation (ql ++ pl) q), (Permutation (ql ++ pl) p), (Permutation (ql ++ pl) ql), (Permutation (ql ++ pl) pl), (Permutation (ql ++ pl) (a :: q))
(Permutation (ql ++ pl) (a :: p)), (Permutation (ql ++ pl) (a :: ql)), (Permutation (ql ++ pl) (a :: pl)), (Permutation (ql ++ pl) (k :: q)), (Permutation (ql ++ pl) (k :: p)), (Permutation (ql ++ pl) (k :: ql)), (Permutation (ql ++ pl) (k :: pl)), (Permutation (ql ++ pl) (merge q q)), (Permutation (ql ++ pl) (merge q p)), (Permutation (ql ++ pl) (merge q ql))
(Permutation (ql ++ pl) (merge q pl)), (Permutation (ql ++ pl) (merge p q)), (Permutation (ql ++ pl) (merge p p)), (Permutation (ql ++ pl) (merge p ql)), (Permutation (ql ++ pl) (merge p pl)), (Permutation (ql ++ pl) (merge ql q)), (Permutation (ql ++ pl) (merge ql p)), (Permutation (ql ++ pl) (merge ql ql)), (Permutation (ql ++ pl) (merge ql pl)), (Permutation (ql ++ pl) (merge pl q))
(Permutation (ql ++ pl) (merge pl p)), (Permutation (ql ++ pl) (merge pl ql)), (Permutation (ql ++ pl) (merge pl pl)), (Permutation (ql ++ pl) (insert a q)), (Permutation (ql ++ pl) (insert a p)), (Permutation (ql ++ pl) (insert a ql)), (Permutation (ql ++ pl) (insert a pl)), (Permutation (ql ++ pl) (insert k q)), (Permutation (ql ++ pl) (insert k p)), (Permutation (ql ++ pl) (insert k ql))
(Permutation (ql ++ pl) (insert k pl)), (Permutation (ql ++ pl) (maybe_swap q)), (Permutation (ql ++ pl) (maybe_swap p)), (Permutation (ql ++ pl) (maybe_swap ql)), (Permutation (ql ++ pl) (maybe_swap pl)), (Permutation (ql ++ pl) (q ++ q)), (Permutation (ql ++ pl) (q ++ p)), (Permutation (ql ++ pl) (q ++ ql)), (Permutation (ql ++ pl) (q ++ pl)), (Permutation (ql ++ pl) (p ++ q))
(Permutation (ql ++ pl) (p ++ p)), (Permutation (ql ++ pl) (p ++ ql)), (Permutation (ql ++ pl) (p ++ pl)), (Permutation (ql ++ pl) (ql ++ q)), (Permutation (ql ++ pl) (ql ++ p)), (Permutation (ql ++ pl) (ql ++ ql)), (Permutation (ql ++ pl) (pl ++ q)), (Permutation (ql ++ pl) (pl ++ p)), (Permutation (ql ++ pl) (pl ++ ql)), (Permutation (ql ++ pl) (pl ++ pl))
(Permutation (ql ++ pl) []), (Permutation (pl ++ q) q), (Permutation (pl ++ q) p), (Permutation (pl ++ q) ql), (Permutation (pl ++ q) pl), (Permutation (pl ++ q) (a :: q)), (Permutation (pl ++ q) (a :: p)), (Permutation (pl ++ q) (a :: ql)), (Permutation (pl ++ q) (a :: pl)), (Permutation (pl ++ q) (k :: q))
(Permutation (pl ++ q) (k :: p)), (Permutation (pl ++ q) (k :: ql)), (Permutation (pl ++ q) (k :: pl)), (Permutation (pl ++ q) (merge q q)), (Permutation (pl ++ q) (merge q p)), (Permutation (pl ++ q) (merge q ql)), (Permutation (pl ++ q) (merge q pl)), (Permutation (pl ++ q) (merge p q)), (Permutation (pl ++ q) (merge p p)), (Permutation (pl ++ q) (merge p ql))
(Permutation (pl ++ q) (merge p pl)), (Permutation (pl ++ q) (merge ql q)), (Permutation (pl ++ q) (merge ql p)), (Permutation (pl ++ q) (merge ql ql)), (Permutation (pl ++ q) (merge ql pl)), (Permutation (pl ++ q) (merge pl q)), (Permutation (pl ++ q) (merge pl p)), (Permutation (pl ++ q) (merge pl ql)), (Permutation (pl ++ q) (merge pl pl)), (Permutation (pl ++ q) (insert a q))
(Permutation (pl ++ q) (insert a p)), (Permutation (pl ++ q) (insert a ql)), (Permutation (pl ++ q) (insert a pl)), (Permutation (pl ++ q) (insert k q)), (Permutation (pl ++ q) (insert k p)), (Permutation (pl ++ q) (insert k ql)), (Permutation (pl ++ q) (insert k pl)), (Permutation (pl ++ q) (maybe_swap q)), (Permutation (pl ++ q) (maybe_swap p)), (Permutation (pl ++ q) (maybe_swap ql))
(Permutation (pl ++ q) (maybe_swap pl)), (Permutation (pl ++ q) (q ++ q)), (Permutation (pl ++ q) (q ++ p)), (Permutation (pl ++ q) (q ++ ql)), (Permutation (pl ++ q) (q ++ pl)), (Permutation (pl ++ q) (p ++ q)), (Permutation (pl ++ q) (p ++ p)), (Permutation (pl ++ q) (p ++ ql)), (Permutation (pl ++ q) (p ++ pl)), (Permutation (pl ++ q) (ql ++ q))
(Permutation (pl ++ q) (ql ++ p)), (Permutation (pl ++ q) (ql ++ ql)), (Permutation (pl ++ q) (ql ++ pl)), (Permutation (pl ++ q) (pl ++ p)), (Permutation (pl ++ q) (pl ++ ql)), (Permutation (pl ++ q) (pl ++ pl)), (Permutation (pl ++ q) []), (Permutation (pl ++ p) q), (Permutation (pl ++ p) p), (Permutation (pl ++ p) ql)
(Permutation (pl ++ p) pl), (Permutation (pl ++ p) (a :: q)), (Permutation (pl ++ p) (a :: p)), (Permutation (pl ++ p) (a :: ql)), (Permutation (pl ++ p) (a :: pl)), (Permutation (pl ++ p) (k :: q)), (Permutation (pl ++ p) (k :: p)), (Permutation (pl ++ p) (k :: ql)), (Permutation (pl ++ p) (k :: pl)), (Permutation (pl ++ p) (merge q q))
(Permutation (pl ++ p) (merge q p)), (Permutation (pl ++ p) (merge q ql)), (Permutation (pl ++ p) (merge q pl)), (Permutation (pl ++ p) (merge p q)), (Permutation (pl ++ p) (merge p p)), (Permutation (pl ++ p) (merge p ql)), (Permutation (pl ++ p) (merge p pl)), (Permutation (pl ++ p) (merge ql q)), (Permutation (pl ++ p) (merge ql p)), (Permutation (pl ++ p) (merge ql ql))
(Permutation (pl ++ p) (merge ql pl)), (Permutation (pl ++ p) (merge pl q)), (Permutation (pl ++ p) (merge pl p)), (Permutation (pl ++ p) (merge pl ql)), (Permutation (pl ++ p) (merge pl pl)), (Permutation (pl ++ p) (insert a q)), (Permutation (pl ++ p) (insert a p)), (Permutation (pl ++ p) (insert a ql)), (Permutation (pl ++ p) (insert a pl)), (Permutation (pl ++ p) (insert k q))
(Permutation (pl ++ p) (insert k p)), (Permutation (pl ++ p) (insert k ql)), (Permutation (pl ++ p) (insert k pl)), (Permutation (pl ++ p) (maybe_swap q)), (Permutation (pl ++ p) (maybe_swap p)), (Permutation (pl ++ p) (maybe_swap ql)), (Permutation (pl ++ p) (maybe_swap pl)), (Permutation (pl ++ p) (q ++ q)), (Permutation (pl ++ p) (q ++ p)), (Permutation (pl ++ p) (q ++ ql))
(Permutation (pl ++ p) (q ++ pl)), (Permutation (pl ++ p) (p ++ q)), (Permutation (pl ++ p) (p ++ p)), (Permutation (pl ++ p) (p ++ ql)), (Permutation (pl ++ p) (p ++ pl)), (Permutation (pl ++ p) (ql ++ q)), (Permutation (pl ++ p) (ql ++ p)), (Permutation (pl ++ p) (ql ++ ql)), (Permutation (pl ++ p) (ql ++ pl)), (Permutation (pl ++ p) (pl ++ q))
(Permutation (pl ++ p) (pl ++ ql)), (Permutation (pl ++ p) (pl ++ pl)), (Permutation (pl ++ p) []), (Permutation (pl ++ ql) q), (Permutation (pl ++ ql) p), (Permutation (pl ++ ql) ql), (Permutation (pl ++ ql) pl), (Permutation (pl ++ ql) (a :: q)), (Permutation (pl ++ ql) (a :: p)), (Permutation (pl ++ ql) (a :: ql))
(Permutation (pl ++ ql) (a :: pl)), (Permutation (pl ++ ql) (k :: q)), (Permutation (pl ++ ql) (k :: p)), (Permutation (pl ++ ql) (k :: ql)), (Permutation (pl ++ ql) (k :: pl)), (Permutation (pl ++ ql) (merge q q)), (Permutation (pl ++ ql) (merge q p)), (Permutation (pl ++ ql) (merge q ql)), (Permutation (pl ++ ql) (merge q pl)), (Permutation (pl ++ ql) (merge p q))
(Permutation (pl ++ ql) (merge p p)), (Permutation (pl ++ ql) (merge p ql)), (Permutation (pl ++ ql) (merge p pl)), (Permutation (pl ++ ql) (merge ql q)), (Permutation (pl ++ ql) (merge ql p)), (Permutation (pl ++ ql) (merge ql ql)), (Permutation (pl ++ ql) (merge ql pl)), (Permutation (pl ++ ql) (merge pl q)), (Permutation (pl ++ ql) (merge pl p)), (Permutation (pl ++ ql) (merge pl ql))
(Permutation (pl ++ ql) (merge pl pl)), (Permutation (pl ++ ql) (insert a q)), (Permutation (pl ++ ql) (insert a p)), (Permutation (pl ++ ql) (insert a ql)), (Permutation (pl ++ ql) (insert a pl)), (Permutation (pl ++ ql) (insert k q)), (Permutation (pl ++ ql) (insert k p)), (Permutation (pl ++ ql) (insert k ql)), (Permutation (pl ++ ql) (insert k pl)), (Permutation (pl ++ ql) (maybe_swap q))
(Permutation (pl ++ ql) (maybe_swap p)), (Permutation (pl ++ ql) (maybe_swap ql)), (Permutation (pl ++ ql) (maybe_swap pl)), (Permutation (pl ++ ql) (q ++ q)), (Permutation (pl ++ ql) (q ++ p)), (Permutation (pl ++ ql) (q ++ ql)), (Permutation (pl ++ ql) (q ++ pl)), (Permutation (pl ++ ql) (p ++ q)), (Permutation (pl ++ ql) (p ++ p)), (Permutation (pl ++ ql) (p ++ ql))
(Permutation (pl ++ ql) (p ++ pl)), (Permutation (pl ++ ql) (ql ++ q)), (Permutation (pl ++ ql) (ql ++ p)), (Permutation (pl ++ ql) (ql ++ ql)), (Permutation (pl ++ ql) (ql ++ pl)), (Permutation (pl ++ ql) (pl ++ q)), (Permutation (pl ++ ql) (pl ++ p)), (Permutation (pl ++ ql) (pl ++ pl)), (Permutation (pl ++ ql) []), (Permutation (pl ++ pl) q)
(Permutation (pl ++ pl) p), (Permutation (pl ++ pl) ql), (Permutation (pl ++ pl) pl), (Permutation (pl ++ pl) (a :: q)), (Permutation (pl ++ pl) (a :: p)), (Permutation (pl ++ pl) (a :: ql)), (Permutation (pl ++ pl) (a :: pl)), (Permutation (pl ++ pl) (k :: q)), (Permutation (pl ++ pl) (k :: p)), (Permutation (pl ++ pl) (k :: ql))
(Permutation (pl ++ pl) (k :: pl)), (Permutation (pl ++ pl) (merge q q)), (Permutation (pl ++ pl) (merge q p)), (Permutation (pl ++ pl) (merge q ql)), (Permutation (pl ++ pl) (merge q pl)), (Permutation (pl ++ pl) (merge p q)), (Permutation (pl ++ pl) (merge p p)), (Permutation (pl ++ pl) (merge p ql)), (Permutation (pl ++ pl) (merge p pl)), (Permutation (pl ++ pl) (merge ql q))
(Permutation (pl ++ pl) (merge ql p)), (Permutation (pl ++ pl) (merge ql ql)), (Permutation (pl ++ pl) (merge ql pl)), (Permutation (pl ++ pl) (merge pl q)), (Permutation (pl ++ pl) (merge pl p)), (Permutation (pl ++ pl) (merge pl ql)), (Permutation (pl ++ pl) (merge pl pl)), (Permutation (pl ++ pl) (insert a q)), (Permutation (pl ++ pl) (insert a p)), (Permutation (pl ++ pl) (insert a ql))
(Permutation (pl ++ pl) (insert a pl)), (Permutation (pl ++ pl) (insert k q)), (Permutation (pl ++ pl) (insert k p)), (Permutation (pl ++ pl) (insert k ql)), (Permutation (pl ++ pl) (insert k pl)), (Permutation (pl ++ pl) (maybe_swap q)), (Permutation (pl ++ pl) (maybe_swap p)), (Permutation (pl ++ pl) (maybe_swap ql)), (Permutation (pl ++ pl) (maybe_swap pl)), (Permutation (pl ++ pl) (q ++ q))
(Permutation (pl ++ pl) (q ++ p)), (Permutation (pl ++ pl) (q ++ ql)), (Permutation (pl ++ pl) (q ++ pl)), (Permutation (pl ++ pl) (p ++ q)), (Permutation (pl ++ pl) (p ++ p)), (Permutation (pl ++ pl) (p ++ ql)), (Permutation (pl ++ pl) (p ++ pl)), (Permutation (pl ++ pl) (ql ++ q)), (Permutation (pl ++ pl) (ql ++ p)), (Permutation (pl ++ pl) (ql ++ ql))
(Permutation (pl ++ pl) (ql ++ pl)), (Permutation (pl ++ pl) (pl ++ q)), (Permutation (pl ++ pl) (pl ++ p)), (Permutation (pl ++ pl) (pl ++ ql)), (Permutation (pl ++ pl) []), (Permutation [] q), (Permutation [] p), (Permutation [] ql), (Permutation [] pl), (Permutation [] (a :: q))
(Permutation [] (a :: p)), (Permutation [] (a :: ql)), (Permutation [] (a :: pl)), (Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (k :: ql)), (Permutation [] (k :: pl)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge q ql))
(Permutation [] (merge q pl)), (Permutation [] (merge p q)), (Permutation [] (merge p p)), (Permutation [] (merge p ql)), (Permutation [] (merge p pl)), (Permutation [] (merge ql q)), (Permutation [] (merge ql p)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql pl)), (Permutation [] (merge pl q))
(Permutation [] (merge pl p)), (Permutation [] (merge pl ql)), (Permutation [] (merge pl pl)), (Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (insert a ql)), (Permutation [] (insert a pl)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert k ql))
(Permutation [] (insert k pl)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap pl)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ pl)), (Permutation [] (p ++ q))
(Permutation [] (p ++ p)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ pl)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ p)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ pl)), (Permutation [] (pl ++ q)), (Permutation [] (pl ++ p)), (Permutation [] (pl ++ ql))
(Permutation [] (pl ++ pl)), (In a (a :: q)), (In a (a :: p)), (In a (a :: ql)), (In a (a :: pl)), (In a (k :: q)), (In a (k :: p)), (In a (k :: ql)), (In a (k :: pl)), (In a (merge q q))
(In a (merge q p)), (In a (merge q ql)), (In a (merge q pl)), (In a (merge p q)), (In a (merge p p)), (In a (merge p ql)), (In a (merge p pl)), (In a (merge ql q)), (In a (merge ql p)), (In a (merge ql ql))
(In a (merge ql pl)), (In a (merge pl q)), (In a (merge pl p)), (In a (merge pl ql)), (In a (merge pl pl)), (In a (insert a q)), (In a (insert a p)), (In a (insert a ql)), (In a (insert a pl)), (In a (insert k q))
(In a (insert k p)), (In a (insert k ql)), (In a (insert k pl)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (maybe_swap ql)), (In a (maybe_swap pl)), (In a (q ++ q)), (In a (q ++ p)), (In a (q ++ ql))
(In a (q ++ pl)), (In a (p ++ q)), (In a (p ++ p)), (In a (p ++ ql)), (In a (p ++ pl)), (In a (ql ++ q)), (In a (ql ++ p)), (In a (ql ++ ql)), (In a (ql ++ pl)), (In a (pl ++ q))
(In a (pl ++ p)), (In a (pl ++ ql)), (In a (pl ++ pl)), (In k (a :: q)), (In k (a :: p)), (In k (a :: ql)), (In k (a :: pl)), (In k (k :: q)), (In k (k :: p)), (In k (k :: ql))
(In k (k :: pl)), (In k (merge q q)), (In k (merge q p)), (In k (merge q ql)), (In k (merge q pl)), (In k (merge p q)), (In k (merge p p)), (In k (merge p ql)), (In k (merge p pl)), (In k (merge ql q))
(In k (merge ql p)), (In k (merge ql ql)), (In k (merge ql pl)), (In k (merge pl q)), (In k (merge pl p)), (In k (merge pl ql)), (In k (merge pl pl)), (In k (insert a q)), (In k (insert a p)), (In k (insert a ql))
(In k (insert a pl)), (In k (insert k q)), (In k (insert k p)), (In k (insert k ql)), (In k (insert k pl)), (In k (maybe_swap q)), (In k (maybe_swap p)), (In k (maybe_swap ql)), (In k (maybe_swap pl)), (In k (q ++ q))
(In k (q ++ p)), (In k (q ++ ql)), (In k (q ++ pl)), (In k (p ++ q)), (In k (p ++ p)), (In k (p ++ ql)), (In k (p ++ pl)), (In k (ql ++ q)), (In k (ql ++ p)), (In k (ql ++ ql))
(In k (ql ++ pl)), (In k (pl ++ q)), (In k (pl ++ p)), (In k (pl ++ ql)), (In k (pl ++ pl)), (In (length q) q), (In (length q) p), (In (length q) ql), (In (length q) pl), (In (length q) (a :: q))
(In (length q) (a :: p)), (In (length q) (a :: ql)), (In (length q) (a :: pl)), (In (length q) (k :: q)), (In (length q) (k :: p)), (In (length q) (k :: ql)), (In (length q) (k :: pl)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge q ql))
(In (length q) (merge q pl)), (In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (merge p ql)), (In (length q) (merge p pl)), (In (length q) (merge ql q)), (In (length q) (merge ql p)), (In (length q) (merge ql ql)), (In (length q) (merge ql pl)), (In (length q) (merge pl q))
(In (length q) (merge pl p)), (In (length q) (merge pl ql)), (In (length q) (merge pl pl)), (In (length q) (insert a q)), (In (length q) (insert a p)), (In (length q) (insert a ql)), (In (length q) (insert a pl)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert k ql))
(In (length q) (insert k pl)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap pl)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (q ++ ql)), (In (length q) (q ++ pl)), (In (length q) (p ++ q))
(In (length q) (p ++ p)), (In (length q) (p ++ ql)), (In (length q) (p ++ pl)), (In (length q) (ql ++ q)), (In (length q) (ql ++ p)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ pl)), (In (length q) (pl ++ q)), (In (length q) (pl ++ p)), (In (length q) (pl ++ ql))
(In (length q) (pl ++ pl)), (In (length p) q), (In (length p) p), (In (length p) ql), (In (length p) pl), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (a :: ql)), (In (length p) (a :: pl)), (In (length p) (k :: q))
(In (length p) (k :: p)), (In (length p) (k :: ql)), (In (length p) (k :: pl)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge q ql)), (In (length p) (merge q pl)), (In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (merge p ql))
(In (length p) (merge p pl)), (In (length p) (merge ql q)), (In (length p) (merge ql p)), (In (length p) (merge ql ql)), (In (length p) (merge ql pl)), (In (length p) (merge pl q)), (In (length p) (merge pl p)), (In (length p) (merge pl ql)), (In (length p) (merge pl pl)), (In (length p) (insert a q))
(In (length p) (insert a p)), (In (length p) (insert a ql)), (In (length p) (insert a pl)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert k ql)), (In (length p) (insert k pl)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (maybe_swap ql))
(In (length p) (maybe_swap pl)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (q ++ ql)), (In (length p) (q ++ pl)), (In (length p) (p ++ q)), (In (length p) (p ++ p)), (In (length p) (p ++ ql)), (In (length p) (p ++ pl)), (In (length p) (ql ++ q))
(In (length p) (ql ++ p)), (In (length p) (ql ++ ql)), (In (length p) (ql ++ pl)), (In (length p) (pl ++ q)), (In (length p) (pl ++ p)), (In (length p) (pl ++ ql)), (In (length p) (pl ++ pl)), (In (length ql) q), (In (length ql) p), (In (length ql) ql)
(In (length ql) pl), (In (length ql) (a :: q)), (In (length ql) (a :: p)), (In (length ql) (a :: ql)), (In (length ql) (a :: pl)), (In (length ql) (k :: q)), (In (length ql) (k :: p)), (In (length ql) (k :: ql)), (In (length ql) (k :: pl)), (In (length ql) (merge q q))
(In (length ql) (merge q p)), (In (length ql) (merge q ql)), (In (length ql) (merge q pl)), (In (length ql) (merge p q)), (In (length ql) (merge p p)), (In (length ql) (merge p ql)), (In (length ql) (merge p pl)), (In (length ql) (merge ql q)), (In (length ql) (merge ql p)), (In (length ql) (merge ql ql))
(In (length ql) (merge ql pl)), (In (length ql) (merge pl q)), (In (length ql) (merge pl p)), (In (length ql) (merge pl ql)), (In (length ql) (merge pl pl)), (In (length ql) (insert a q)), (In (length ql) (insert a p)), (In (length ql) (insert a ql)), (In (length ql) (insert a pl)), (In (length ql) (insert k q))
(In (length ql) (insert k p)), (In (length ql) (insert k ql)), (In (length ql) (insert k pl)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap p)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap pl)), (In (length ql) (q ++ q)), (In (length ql) (q ++ p)), (In (length ql) (q ++ ql))
(In (length ql) (q ++ pl)), (In (length ql) (p ++ q)), (In (length ql) (p ++ p)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ pl)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ p)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ pl)), (In (length ql) (pl ++ q))
(In (length ql) (pl ++ p)), (In (length ql) (pl ++ ql)), (In (length ql) (pl ++ pl)), (In (length pl) q), (In (length pl) p), (In (length pl) ql), (In (length pl) pl), (In (length pl) (a :: q)), (In (length pl) (a :: p)), (In (length pl) (a :: ql))
(In (length pl) (a :: pl)), (In (length pl) (k :: q)), (In (length pl) (k :: p)), (In (length pl) (k :: ql)), (In (length pl) (k :: pl)), (In (length pl) (merge q q)), (In (length pl) (merge q p)), (In (length pl) (merge q ql)), (In (length pl) (merge q pl)), (In (length pl) (merge p q))
(In (length pl) (merge p p)), (In (length pl) (merge p ql)), (In (length pl) (merge p pl)), (In (length pl) (merge ql q)), (In (length pl) (merge ql p)), (In (length pl) (merge ql ql)), (In (length pl) (merge ql pl)), (In (length pl) (merge pl q)), (In (length pl) (merge pl p)), (In (length pl) (merge pl ql))
(In (length pl) (merge pl pl)), (In (length pl) (insert a q)), (In (length pl) (insert a p)), (In (length pl) (insert a ql)), (In (length pl) (insert a pl)), (In (length pl) (insert k q)), (In (length pl) (insert k p)), (In (length pl) (insert k ql)), (In (length pl) (insert k pl)), (In (length pl) (maybe_swap q))
(In (length pl) (maybe_swap p)), (In (length pl) (maybe_swap ql)), (In (length pl) (maybe_swap pl)), (In (length pl) (q ++ q)), (In (length pl) (q ++ p)), (In (length pl) (q ++ ql)), (In (length pl) (q ++ pl)), (In (length pl) (p ++ q)), (In (length pl) (p ++ p)), (In (length pl) (p ++ ql))
(In (length pl) (p ++ pl)), (In (length pl) (ql ++ q)), (In (length pl) (ql ++ p)), (In (length pl) (ql ++ ql)), (In (length pl) (ql ++ pl)), (In (length pl) (pl ++ q)), (In (length pl) (pl ++ p)), (In (length pl) (pl ++ ql)), (In (length pl) (pl ++ pl)), (a < length q)
(a < length p), (a < length ql), (a < length pl), (k < length q), (k < length p), (k < length ql), (k < length pl), (length q < a), (length q < k), (length q < length p)
(length q < length ql), (length q < length pl), (length p < a), (length p < k), (length p < length q), (length p < length ql), (length p < length pl), (length ql < a), (length ql < k), (length ql < length q)
(length ql < length p), (length ql < length pl), (length pl < a), (length pl < k), (length pl < length q), (length pl < length p), (length pl < length ql), (a <= length q), (a <= length p), (a <= length ql)
(a <= length pl), (k <= length q), (k <= length p), (k <= length ql), (k <= length pl), (length q <= a), (length q <= k), (length q <= length p), (length q <= length ql), (length q <= length pl)
(length p <= a), (length p <= k), (length p <= length q), (length p <= length ql), (length p <= length pl), (length ql <= a), (length ql <= k), (length ql <= length q), (length ql <= length p), (length ql <= length pl)
(length pl <= a), (length pl <= k), (length pl <= length q), (length pl <= length p), (length pl <= length ql), (~ Abs q q), (~ Abs q p), (~ Abs q ql), (~ Abs q pl), (~ Abs p q)
(~ Abs p p), (~ Abs p ql), (~ Abs p pl), (~ Abs ql q), (~ Abs ql p), (~ Abs ql ql), (~ Abs ql pl), (~ Abs pl q), (~ Abs pl p), (~ Abs pl ql)
(~ Abs pl pl), (~ priq q), (~ priq p), (~ priq ql), (~ priq pl), (~ Permutation q q), (~ Permutation q p), (~ Permutation q ql), (~ Permutation q pl), (~ Permutation p q)
(~ Permutation p p), (~ Permutation p ql), (~ Permutation p pl), (~ Permutation ql q), (~ Permutation ql p), (~ Permutation ql ql), (~ Permutation ql pl), (~ Permutation pl q), (~ Permutation pl p), (~ Permutation pl ql)
(~ Permutation pl pl), (~ In a q), (~ In a p), (~ In a ql), (~ In a pl), (~ In k q), (~ In k p), (~ In k ql), (~ In k pl), (~ a < a)
(~ a < k), (~ k < a), (~ k < k), (~ a <= a), (~ a <= k), (~ k <= a), (~ k <= k), (a <> a), (a <> k), (k <> a)
(k <> k), (q <> q), (q <> p), (q <> ql), (q <> pl), (p <> q), (p <> p), (p <> ql), (p <> pl), (ql <> q)
(ql <> p), (ql <> ql), (ql <> pl), (pl <> q), (pl <> p), (pl <> ql), (pl <> pl), (None = Some q), (None = Some p), (None = Some ql)
(None = Some pl), (a :: q = q), (a :: q = p), (a :: q = ql), (a :: q = pl), (a :: q = merge q q), (a :: q = merge q p), (a :: q = merge q ql), (a :: q = merge q pl), (a :: q = merge p q)
(a :: q = merge p p), (a :: q = merge p ql), (a :: q = merge p pl), (a :: q = merge ql q), (a :: q = merge ql p), (a :: q = merge ql ql), (a :: q = merge ql pl), (a :: q = merge pl q), (a :: q = merge pl p), (a :: q = merge pl ql)
(a :: q = merge pl pl), (a :: q = insert a q), (a :: q = insert a p), (a :: q = insert a ql), (a :: q = insert a pl), (a :: q = insert k q), (a :: q = insert k p), (a :: q = insert k ql), (a :: q = insert k pl), (a :: q = maybe_swap q)
(a :: q = maybe_swap p), (a :: q = maybe_swap ql), (a :: q = maybe_swap pl), (a :: q = q ++ q), (a :: q = q ++ p), (a :: q = q ++ ql), (a :: q = q ++ pl), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = p ++ ql)
(a :: q = p ++ pl), (a :: q = ql ++ q), (a :: q = ql ++ p), (a :: q = ql ++ ql), (a :: q = ql ++ pl), (a :: q = pl ++ q), (a :: q = pl ++ p), (a :: q = pl ++ ql), (a :: q = pl ++ pl), (a :: q = [])
(a :: p = q), (a :: p = p), (a :: p = ql), (a :: p = pl), (a :: p = merge q q), (a :: p = merge q p), (a :: p = merge q ql), (a :: p = merge q pl), (a :: p = merge p q), (a :: p = merge p p)
(a :: p = merge p ql), (a :: p = merge p pl), (a :: p = merge ql q), (a :: p = merge ql p), (a :: p = merge ql ql), (a :: p = merge ql pl), (a :: p = merge pl q), (a :: p = merge pl p), (a :: p = merge pl ql), (a :: p = merge pl pl)
(a :: p = insert a q), (a :: p = insert a p), (a :: p = insert a ql), (a :: p = insert a pl), (a :: p = insert k q), (a :: p = insert k p), (a :: p = insert k ql), (a :: p = insert k pl), (a :: p = maybe_swap q), (a :: p = maybe_swap p)
(a :: p = maybe_swap ql), (a :: p = maybe_swap pl), (a :: p = q ++ q), (a :: p = q ++ p), (a :: p = q ++ ql), (a :: p = q ++ pl), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = p ++ ql), (a :: p = p ++ pl)
(a :: p = ql ++ q), (a :: p = ql ++ p), (a :: p = ql ++ ql), (a :: p = ql ++ pl), (a :: p = pl ++ q), (a :: p = pl ++ p), (a :: p = pl ++ ql), (a :: p = pl ++ pl), (a :: p = []), (a :: ql = q)
(a :: ql = p), (a :: ql = ql), (a :: ql = pl), (a :: ql = merge q q), (a :: ql = merge q p), (a :: ql = merge q ql), (a :: ql = merge q pl), (a :: ql = merge p q), (a :: ql = merge p p), (a :: ql = merge p ql)
(a :: ql = merge p pl), (a :: ql = merge ql q), (a :: ql = merge ql p), (a :: ql = merge ql ql), (a :: ql = merge ql pl), (a :: ql = merge pl q), (a :: ql = merge pl p), (a :: ql = merge pl ql), (a :: ql = merge pl pl), (a :: ql = insert a q)
(a :: ql = insert a p), (a :: ql = insert a ql), (a :: ql = insert a pl), (a :: ql = insert k q), (a :: ql = insert k p), (a :: ql = insert k ql), (a :: ql = insert k pl), (a :: ql = maybe_swap q), (a :: ql = maybe_swap p), (a :: ql = maybe_swap ql)
(a :: ql = maybe_swap pl), (a :: ql = q ++ q), (a :: ql = q ++ p), (a :: ql = q ++ ql), (a :: ql = q ++ pl), (a :: ql = p ++ q), (a :: ql = p ++ p), (a :: ql = p ++ ql), (a :: ql = p ++ pl), (a :: ql = ql ++ q)
(a :: ql = ql ++ p), (a :: ql = ql ++ ql), (a :: ql = ql ++ pl), (a :: ql = pl ++ q), (a :: ql = pl ++ p), (a :: ql = pl ++ ql), (a :: ql = pl ++ pl), (a :: ql = []), (a :: pl = q), (a :: pl = p)
(a :: pl = ql), (a :: pl = pl), (a :: pl = merge q q), (a :: pl = merge q p), (a :: pl = merge q ql), (a :: pl = merge q pl), (a :: pl = merge p q), (a :: pl = merge p p), (a :: pl = merge p ql), (a :: pl = merge p pl)
(a :: pl = merge ql q), (a :: pl = merge ql p), (a :: pl = merge ql ql), (a :: pl = merge ql pl), (a :: pl = merge pl q), (a :: pl = merge pl p), (a :: pl = merge pl ql), (a :: pl = merge pl pl), (a :: pl = insert a q), (a :: pl = insert a p)
(a :: pl = insert a ql), (a :: pl = insert a pl), (a :: pl = insert k q), (a :: pl = insert k p), (a :: pl = insert k ql), (a :: pl = insert k pl), (a :: pl = maybe_swap q), (a :: pl = maybe_swap p), (a :: pl = maybe_swap ql), (a :: pl = maybe_swap pl)
(a :: pl = q ++ q), (a :: pl = q ++ p), (a :: pl = q ++ ql), (a :: pl = q ++ pl), (a :: pl = p ++ q), (a :: pl = p ++ p), (a :: pl = p ++ ql), (a :: pl = p ++ pl), (a :: pl = ql ++ q), (a :: pl = ql ++ p)
(a :: pl = ql ++ ql), (a :: pl = ql ++ pl), (a :: pl = pl ++ q), (a :: pl = pl ++ p), (a :: pl = pl ++ ql), (a :: pl = pl ++ pl), (a :: pl = []), (k :: q = q), (k :: q = p), (k :: q = ql)
(k :: q = pl), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge q ql), (k :: q = merge q pl), (k :: q = merge p q), (k :: q = merge p p), (k :: q = merge p ql), (k :: q = merge p pl), (k :: q = merge ql q)
(k :: q = merge ql p), (k :: q = merge ql ql), (k :: q = merge ql pl), (k :: q = merge pl q), (k :: q = merge pl p), (k :: q = merge pl ql), (k :: q = merge pl pl), (k :: q = insert a q), (k :: q = insert a p), (k :: q = insert a ql)
(k :: q = insert a pl), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert k ql), (k :: q = insert k pl), (k :: q = maybe_swap q), (k :: q = maybe_swap p), (k :: q = maybe_swap ql), (k :: q = maybe_swap pl), (k :: q = q ++ q)
(k :: q = q ++ p), (k :: q = q ++ ql), (k :: q = q ++ pl), (k :: q = p ++ q), (k :: q = p ++ p), (k :: q = p ++ ql), (k :: q = p ++ pl), (k :: q = ql ++ q), (k :: q = ql ++ p), (k :: q = ql ++ ql)
(k :: q = ql ++ pl), (k :: q = pl ++ q), (k :: q = pl ++ p), (k :: q = pl ++ ql), (k :: q = pl ++ pl), (k :: q = []), (k :: p = q), (k :: p = p), (k :: p = ql), (k :: p = pl)
(k :: p = merge q q), (k :: p = merge q p), (k :: p = merge q ql), (k :: p = merge q pl), (k :: p = merge p q), (k :: p = merge p p), (k :: p = merge p ql), (k :: p = merge p pl), (k :: p = merge ql q), (k :: p = merge ql p)
(k :: p = merge ql ql), (k :: p = merge ql pl), (k :: p = merge pl q), (k :: p = merge pl p), (k :: p = merge pl ql), (k :: p = merge pl pl), (k :: p = insert a q), (k :: p = insert a p), (k :: p = insert a ql), (k :: p = insert a pl)
(k :: p = insert k q), (k :: p = insert k p), (k :: p = insert k ql), (k :: p = insert k pl), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = maybe_swap ql), (k :: p = maybe_swap pl), (k :: p = q ++ q), (k :: p = q ++ p)
(k :: p = q ++ ql), (k :: p = q ++ pl), (k :: p = p ++ q), (k :: p = p ++ p), (k :: p = p ++ ql), (k :: p = p ++ pl), (k :: p = ql ++ q), (k :: p = ql ++ p), (k :: p = ql ++ ql), (k :: p = ql ++ pl)
(k :: p = pl ++ q), (k :: p = pl ++ p), (k :: p = pl ++ ql), (k :: p = pl ++ pl), (k :: p = []), (k :: ql = q), (k :: ql = p), (k :: ql = ql), (k :: ql = pl), (k :: ql = merge q q)
(k :: ql = merge q p), (k :: ql = merge q ql), (k :: ql = merge q pl), (k :: ql = merge p q), (k :: ql = merge p p), (k :: ql = merge p ql), (k :: ql = merge p pl), (k :: ql = merge ql q), (k :: ql = merge ql p), (k :: ql = merge ql ql)
(k :: ql = merge ql pl), (k :: ql = merge pl q), (k :: ql = merge pl p), (k :: ql = merge pl ql), (k :: ql = merge pl pl), (k :: ql = insert a q), (k :: ql = insert a p), (k :: ql = insert a ql), (k :: ql = insert a pl), (k :: ql = insert k q)
(k :: ql = insert k p), (k :: ql = insert k ql), (k :: ql = insert k pl), (k :: ql = maybe_swap q), (k :: ql = maybe_swap p), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap pl), (k :: ql = q ++ q), (k :: ql = q ++ p), (k :: ql = q ++ ql)
(k :: ql = q ++ pl), (k :: ql = p ++ q), (k :: ql = p ++ p), (k :: ql = p ++ ql), (k :: ql = p ++ pl), (k :: ql = ql ++ q), (k :: ql = ql ++ p), (k :: ql = ql ++ ql), (k :: ql = ql ++ pl), (k :: ql = pl ++ q)
(k :: ql = pl ++ p), (k :: ql = pl ++ ql), (k :: ql = pl ++ pl), (k :: ql = []), (k :: pl = q), (k :: pl = p), (k :: pl = ql), (k :: pl = pl), (k :: pl = merge q q), (k :: pl = merge q p)
(k :: pl = merge q ql), (k :: pl = merge q pl), (k :: pl = merge p q), (k :: pl = merge p p), (k :: pl = merge p ql), (k :: pl = merge p pl), (k :: pl = merge ql q), (k :: pl = merge ql p), (k :: pl = merge ql ql), (k :: pl = merge ql pl)
(k :: pl = merge pl q), (k :: pl = merge pl p), (k :: pl = merge pl ql), (k :: pl = merge pl pl), (k :: pl = insert a q), (k :: pl = insert a p), (k :: pl = insert a ql), (k :: pl = insert a pl), (k :: pl = insert k q), (k :: pl = insert k p)
(k :: pl = insert k ql), (k :: pl = insert k pl), (k :: pl = maybe_swap q), (k :: pl = maybe_swap p), (k :: pl = maybe_swap ql), (k :: pl = maybe_swap pl), (k :: pl = q ++ q), (k :: pl = q ++ p), (k :: pl = q ++ ql), (k :: pl = q ++ pl)
(k :: pl = p ++ q), (k :: pl = p ++ p), (k :: pl = p ++ ql), (k :: pl = p ++ pl), (k :: pl = ql ++ q), (k :: pl = ql ++ p), (k :: pl = ql ++ ql), (k :: pl = ql ++ pl), (k :: pl = pl ++ q), (k :: pl = pl ++ p)
(k :: pl = pl ++ ql), (k :: pl = pl ++ pl), (k :: pl = []), (merge q q = q), (merge q q = p), (merge q q = ql), (merge q q = pl), (merge q q = insert a q), (merge q q = insert a p), (merge q q = insert a ql)
(merge q q = insert a pl), (merge q q = insert k q), (merge q q = insert k p), (merge q q = insert k ql), (merge q q = insert k pl), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = maybe_swap ql), (merge q q = maybe_swap pl), (merge q q = q ++ q)
(merge q q = q ++ p), (merge q q = q ++ ql), (merge q q = q ++ pl), (merge q q = p ++ q), (merge q q = p ++ p), (merge q q = p ++ ql), (merge q q = p ++ pl), (merge q q = ql ++ q), (merge q q = ql ++ p), (merge q q = ql ++ ql)
(merge q q = ql ++ pl), (merge q q = pl ++ q), (merge q q = pl ++ p), (merge q q = pl ++ ql), (merge q q = pl ++ pl), (merge q p = q), (merge q p = p), (merge q p = ql), (merge q p = pl), (merge q p = insert a q)
(merge q p = insert a p), (merge q p = insert a ql), (merge q p = insert a pl), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert k ql), (merge q p = insert k pl), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = maybe_swap ql)
(merge q p = maybe_swap pl), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = q ++ ql), (merge q p = q ++ pl), (merge q p = p ++ q), (merge q p = p ++ p), (merge q p = p ++ ql), (merge q p = p ++ pl), (merge q p = ql ++ q)
(merge q p = ql ++ p), (merge q p = ql ++ ql), (merge q p = ql ++ pl), (merge q p = pl ++ q), (merge q p = pl ++ p), (merge q p = pl ++ ql), (merge q p = pl ++ pl), (merge q ql = q), (merge q ql = p), (merge q ql = ql)
(merge q ql = pl), (merge q ql = insert a q), (merge q ql = insert a p), (merge q ql = insert a ql), (merge q ql = insert a pl), (merge q ql = insert k q), (merge q ql = insert k p), (merge q ql = insert k ql), (merge q ql = insert k pl), (merge q ql = maybe_swap q)
(merge q ql = maybe_swap p), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap pl), (merge q ql = q ++ q), (merge q ql = q ++ p), (merge q ql = q ++ ql), (merge q ql = q ++ pl), (merge q ql = p ++ q), (merge q ql = p ++ p), (merge q ql = p ++ ql)
(merge q ql = p ++ pl), (merge q ql = ql ++ q), (merge q ql = ql ++ p), (merge q ql = ql ++ ql), (merge q ql = ql ++ pl), (merge q ql = pl ++ q), (merge q ql = pl ++ p), (merge q ql = pl ++ ql), (merge q ql = pl ++ pl), (merge q pl = q)
(merge q pl = p), (merge q pl = ql), (merge q pl = pl), (merge q pl = insert a q), (merge q pl = insert a p), (merge q pl = insert a ql), (merge q pl = insert a pl), (merge q pl = insert k q), (merge q pl = insert k p), (merge q pl = insert k ql)
(merge q pl = insert k pl), (merge q pl = maybe_swap q), (merge q pl = maybe_swap p), (merge q pl = maybe_swap ql), (merge q pl = maybe_swap pl), (merge q pl = q ++ q), (merge q pl = q ++ p), (merge q pl = q ++ ql), (merge q pl = q ++ pl), (merge q pl = p ++ q)
(merge q pl = p ++ p), (merge q pl = p ++ ql), (merge q pl = p ++ pl), (merge q pl = ql ++ q), (merge q pl = ql ++ p), (merge q pl = ql ++ ql), (merge q pl = ql ++ pl), (merge q pl = pl ++ q), (merge q pl = pl ++ p), (merge q pl = pl ++ ql)
(merge q pl = pl ++ pl), (merge p q = q), (merge p q = p), (merge p q = ql), (merge p q = pl), (merge p q = insert a q), (merge p q = insert a p), (merge p q = insert a ql), (merge p q = insert a pl), (merge p q = insert k q)
(merge p q = insert k p), (merge p q = insert k ql), (merge p q = insert k pl), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = maybe_swap ql), (merge p q = maybe_swap pl), (merge p q = q ++ q), (merge p q = q ++ p), (merge p q = q ++ ql)
(merge p q = q ++ pl), (merge p q = p ++ q), (merge p q = p ++ p), (merge p q = p ++ ql), (merge p q = p ++ pl), (merge p q = ql ++ q), (merge p q = ql ++ p), (merge p q = ql ++ ql), (merge p q = ql ++ pl), (merge p q = pl ++ q)
(merge p q = pl ++ p), (merge p q = pl ++ ql), (merge p q = pl ++ pl), (merge p p = q), (merge p p = p), (merge p p = ql), (merge p p = pl), (merge p p = insert a q), (merge p p = insert a p), (merge p p = insert a ql)
(merge p p = insert a pl), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert k ql), (merge p p = insert k pl), (merge p p = maybe_swap q), (merge p p = maybe_swap p), (merge p p = maybe_swap ql), (merge p p = maybe_swap pl), (merge p p = q ++ q)
(merge p p = q ++ p), (merge p p = q ++ ql), (merge p p = q ++ pl), (merge p p = p ++ q), (merge p p = p ++ p), (merge p p = p ++ ql), (merge p p = p ++ pl), (merge p p = ql ++ q), (merge p p = ql ++ p), (merge p p = ql ++ ql)
(merge p p = ql ++ pl), (merge p p = pl ++ q), (merge p p = pl ++ p), (merge p p = pl ++ ql), (merge p p = pl ++ pl), (merge p ql = q), (merge p ql = p), (merge p ql = ql), (merge p ql = pl), (merge p ql = insert a q)
(merge p ql = insert a p), (merge p ql = insert a ql), (merge p ql = insert a pl), (merge p ql = insert k q), (merge p ql = insert k p), (merge p ql = insert k ql), (merge p ql = insert k pl), (merge p ql = maybe_swap q), (merge p ql = maybe_swap p), (merge p ql = maybe_swap ql)
(merge p ql = maybe_swap pl), (merge p ql = q ++ q), (merge p ql = q ++ p), (merge p ql = q ++ ql), (merge p ql = q ++ pl), (merge p ql = p ++ q), (merge p ql = p ++ p), (merge p ql = p ++ ql), (merge p ql = p ++ pl), (merge p ql = ql ++ q)
(merge p ql = ql ++ p), (merge p ql = ql ++ ql), (merge p ql = ql ++ pl), (merge p ql = pl ++ q), (merge p ql = pl ++ p), (merge p ql = pl ++ ql), (merge p ql = pl ++ pl), (merge p pl = q), (merge p pl = p), (merge p pl = ql)
(merge p pl = pl), (merge p pl = insert a q), (merge p pl = insert a p), (merge p pl = insert a ql), (merge p pl = insert a pl), (merge p pl = insert k q), (merge p pl = insert k p), (merge p pl = insert k ql), (merge p pl = insert k pl), (merge p pl = maybe_swap q)
(merge p pl = maybe_swap p), (merge p pl = maybe_swap ql), (merge p pl = maybe_swap pl), (merge p pl = q ++ q), (merge p pl = q ++ p), (merge p pl = q ++ ql), (merge p pl = q ++ pl), (merge p pl = p ++ q), (merge p pl = p ++ p), (merge p pl = p ++ ql)
(merge p pl = p ++ pl), (merge p pl = ql ++ q), (merge p pl = ql ++ p), (merge p pl = ql ++ ql), (merge p pl = ql ++ pl), (merge p pl = pl ++ q), (merge p pl = pl ++ p), (merge p pl = pl ++ ql), (merge p pl = pl ++ pl), (merge ql q = q)
(merge ql q = p), (merge ql q = ql), (merge ql q = pl), (merge ql q = insert a q), (merge ql q = insert a p), (merge ql q = insert a ql), (merge ql q = insert a pl), (merge ql q = insert k q), (merge ql q = insert k p), (merge ql q = insert k ql)
(merge ql q = insert k pl), (merge ql q = maybe_swap q), (merge ql q = maybe_swap p), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap pl), (merge ql q = q ++ q), (merge ql q = q ++ p), (merge ql q = q ++ ql), (merge ql q = q ++ pl), (merge ql q = p ++ q)
(merge ql q = p ++ p), (merge ql q = p ++ ql), (merge ql q = p ++ pl), (merge ql q = ql ++ q), (merge ql q = ql ++ p), (merge ql q = ql ++ ql), (merge ql q = ql ++ pl), (merge ql q = pl ++ q), (merge ql q = pl ++ p), (merge ql q = pl ++ ql)
(merge ql q = pl ++ pl), (merge ql p = q), (merge ql p = p), (merge ql p = ql), (merge ql p = pl), (merge ql p = insert a q), (merge ql p = insert a p), (merge ql p = insert a ql), (merge ql p = insert a pl), (merge ql p = insert k q)
(merge ql p = insert k p), (merge ql p = insert k ql), (merge ql p = insert k pl), (merge ql p = maybe_swap q), (merge ql p = maybe_swap p), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap pl), (merge ql p = q ++ q), (merge ql p = q ++ p), (merge ql p = q ++ ql)
(merge ql p = q ++ pl), (merge ql p = p ++ q), (merge ql p = p ++ p), (merge ql p = p ++ ql), (merge ql p = p ++ pl), (merge ql p = ql ++ q), (merge ql p = ql ++ p), (merge ql p = ql ++ ql), (merge ql p = ql ++ pl), (merge ql p = pl ++ q)
(merge ql p = pl ++ p), (merge ql p = pl ++ ql), (merge ql p = pl ++ pl), (merge ql ql = q), (merge ql ql = p), (merge ql ql = ql), (merge ql ql = pl), (merge ql ql = insert a q), (merge ql ql = insert a p), (merge ql ql = insert a ql)
(merge ql ql = insert a pl), (merge ql ql = insert k q), (merge ql ql = insert k p), (merge ql ql = insert k ql), (merge ql ql = insert k pl), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap p), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap pl), (merge ql ql = q ++ q)
(merge ql ql = q ++ p), (merge ql ql = q ++ ql), (merge ql ql = q ++ pl), (merge ql ql = p ++ q), (merge ql ql = p ++ p), (merge ql ql = p ++ ql), (merge ql ql = p ++ pl), (merge ql ql = ql ++ q), (merge ql ql = ql ++ p), (merge ql ql = ql ++ ql)
(merge ql ql = ql ++ pl), (merge ql ql = pl ++ q), (merge ql ql = pl ++ p), (merge ql ql = pl ++ ql), (merge ql ql = pl ++ pl), (merge ql pl = q), (merge ql pl = p), (merge ql pl = ql), (merge ql pl = pl), (merge ql pl = insert a q)
(merge ql pl = insert a p), (merge ql pl = insert a ql), (merge ql pl = insert a pl), (merge ql pl = insert k q), (merge ql pl = insert k p), (merge ql pl = insert k ql), (merge ql pl = insert k pl), (merge ql pl = maybe_swap q), (merge ql pl = maybe_swap p), (merge ql pl = maybe_swap ql)
(merge ql pl = maybe_swap pl), (merge ql pl = q ++ q), (merge ql pl = q ++ p), (merge ql pl = q ++ ql), (merge ql pl = q ++ pl), (merge ql pl = p ++ q), (merge ql pl = p ++ p), (merge ql pl = p ++ ql), (merge ql pl = p ++ pl), (merge ql pl = ql ++ q)
(merge ql pl = ql ++ p), (merge ql pl = ql ++ ql), (merge ql pl = ql ++ pl), (merge ql pl = pl ++ q), (merge ql pl = pl ++ p), (merge ql pl = pl ++ ql), (merge ql pl = pl ++ pl), (merge pl q = q), (merge pl q = p), (merge pl q = ql)
(merge pl q = pl), (merge pl q = insert a q), (merge pl q = insert a p), (merge pl q = insert a ql), (merge pl q = insert a pl), (merge pl q = insert k q), (merge pl q = insert k p), (merge pl q = insert k ql), (merge pl q = insert k pl), (merge pl q = maybe_swap q)
(merge pl q = maybe_swap p), (merge pl q = maybe_swap ql), (merge pl q = maybe_swap pl), (merge pl q = q ++ q), (merge pl q = q ++ p), (merge pl q = q ++ ql), (merge pl q = q ++ pl), (merge pl q = p ++ q), (merge pl q = p ++ p), (merge pl q = p ++ ql)
(merge pl q = p ++ pl), (merge pl q = ql ++ q), (merge pl q = ql ++ p), (merge pl q = ql ++ ql), (merge pl q = ql ++ pl), (merge pl q = pl ++ q), (merge pl q = pl ++ p), (merge pl q = pl ++ ql), (merge pl q = pl ++ pl), (merge pl p = q)
(merge pl p = p), (merge pl p = ql), (merge pl p = pl), (merge pl p = insert a q), (merge pl p = insert a p), (merge pl p = insert a ql), (merge pl p = insert a pl), (merge pl p = insert k q), (merge pl p = insert k p), (merge pl p = insert k ql)
(merge pl p = insert k pl), (merge pl p = maybe_swap q), (merge pl p = maybe_swap p), (merge pl p = maybe_swap ql), (merge pl p = maybe_swap pl), (merge pl p = q ++ q), (merge pl p = q ++ p), (merge pl p = q ++ ql), (merge pl p = q ++ pl), (merge pl p = p ++ q)
(merge pl p = p ++ p), (merge pl p = p ++ ql), (merge pl p = p ++ pl), (merge pl p = ql ++ q), (merge pl p = ql ++ p), (merge pl p = ql ++ ql), (merge pl p = ql ++ pl), (merge pl p = pl ++ q), (merge pl p = pl ++ p), (merge pl p = pl ++ ql)
(merge pl p = pl ++ pl), (merge pl ql = q), (merge pl ql = p), (merge pl ql = ql), (merge pl ql = pl), (merge pl ql = insert a q), (merge pl ql = insert a p), (merge pl ql = insert a ql), (merge pl ql = insert a pl), (merge pl ql = insert k q)
(merge pl ql = insert k p), (merge pl ql = insert k ql), (merge pl ql = insert k pl), (merge pl ql = maybe_swap q), (merge pl ql = maybe_swap p), (merge pl ql = maybe_swap ql), (merge pl ql = maybe_swap pl), (merge pl ql = q ++ q), (merge pl ql = q ++ p), (merge pl ql = q ++ ql)
(merge pl ql = q ++ pl), (merge pl ql = p ++ q), (merge pl ql = p ++ p), (merge pl ql = p ++ ql), (merge pl ql = p ++ pl), (merge pl ql = ql ++ q), (merge pl ql = ql ++ p), (merge pl ql = ql ++ ql), (merge pl ql = ql ++ pl), (merge pl ql = pl ++ q)
(merge pl ql = pl ++ p), (merge pl ql = pl ++ ql), (merge pl ql = pl ++ pl), (merge pl pl = q), (merge pl pl = p), (merge pl pl = ql), (merge pl pl = pl), (merge pl pl = insert a q), (merge pl pl = insert a p), (merge pl pl = insert a ql)
(merge pl pl = insert a pl), (merge pl pl = insert k q), (merge pl pl = insert k p), (merge pl pl = insert k ql), (merge pl pl = insert k pl), (merge pl pl = maybe_swap q), (merge pl pl = maybe_swap p), (merge pl pl = maybe_swap ql), (merge pl pl = maybe_swap pl), (merge pl pl = q ++ q)
(merge pl pl = q ++ p), (merge pl pl = q ++ ql), (merge pl pl = q ++ pl), (merge pl pl = p ++ q), (merge pl pl = p ++ p), (merge pl pl = p ++ ql), (merge pl pl = p ++ pl), (merge pl pl = ql ++ q), (merge pl pl = ql ++ p), (merge pl pl = ql ++ ql)
(merge pl pl = ql ++ pl), (merge pl pl = pl ++ q), (merge pl pl = pl ++ p), (merge pl pl = pl ++ ql), (merge pl pl = pl ++ pl), (insert a q = q), (insert a q = p), (insert a q = ql), (insert a q = pl), (insert a q = q ++ q)
(insert a q = q ++ p), (insert a q = q ++ ql), (insert a q = q ++ pl), (insert a q = p ++ q), (insert a q = p ++ p), (insert a q = p ++ ql), (insert a q = p ++ pl), (insert a q = ql ++ q), (insert a q = ql ++ p), (insert a q = ql ++ ql)
(insert a q = ql ++ pl), (insert a q = pl ++ q), (insert a q = pl ++ p), (insert a q = pl ++ ql), (insert a q = pl ++ pl), (insert a p = q), (insert a p = p), (insert a p = ql), (insert a p = pl), (insert a p = q ++ q)
(insert a p = q ++ p), (insert a p = q ++ ql), (insert a p = q ++ pl), (insert a p = p ++ q), (insert a p = p ++ p), (insert a p = p ++ ql), (insert a p = p ++ pl), (insert a p = ql ++ q), (insert a p = ql ++ p), (insert a p = ql ++ ql)
(insert a p = ql ++ pl), (insert a p = pl ++ q), (insert a p = pl ++ p), (insert a p = pl ++ ql), (insert a p = pl ++ pl), (insert a ql = q), (insert a ql = p), (insert a ql = ql), (insert a ql = pl), (insert a ql = q ++ q)
(insert a ql = q ++ p), (insert a ql = q ++ ql), (insert a ql = q ++ pl), (insert a ql = p ++ q), (insert a ql = p ++ p), (insert a ql = p ++ ql), (insert a ql = p ++ pl), (insert a ql = ql ++ q), (insert a ql = ql ++ p), (insert a ql = ql ++ ql)
(insert a ql = ql ++ pl), (insert a ql = pl ++ q), (insert a ql = pl ++ p), (insert a ql = pl ++ ql), (insert a ql = pl ++ pl), (insert a pl = q), (insert a pl = p), (insert a pl = ql), (insert a pl = pl), (insert a pl = q ++ q)
(insert a pl = q ++ p), (insert a pl = q ++ ql), (insert a pl = q ++ pl), (insert a pl = p ++ q), (insert a pl = p ++ p), (insert a pl = p ++ ql), (insert a pl = p ++ pl), (insert a pl = ql ++ q), (insert a pl = ql ++ p), (insert a pl = ql ++ ql)
(insert a pl = ql ++ pl), (insert a pl = pl ++ q), (insert a pl = pl ++ p), (insert a pl = pl ++ ql), (insert a pl = pl ++ pl), (insert k q = q), (insert k q = p), (insert k q = ql), (insert k q = pl), (insert k q = q ++ q)
(insert k q = q ++ p), (insert k q = q ++ ql), (insert k q = q ++ pl), (insert k q = p ++ q), (insert k q = p ++ p), (insert k q = p ++ ql), (insert k q = p ++ pl), (insert k q = ql ++ q), (insert k q = ql ++ p), (insert k q = ql ++ ql)
(insert k q = ql ++ pl), (insert k q = pl ++ q), (insert k q = pl ++ p), (insert k q = pl ++ ql), (insert k q = pl ++ pl), (insert k p = q), (insert k p = p), (insert k p = ql), (insert k p = pl), (insert k p = q ++ q)
(insert k p = q ++ p), (insert k p = q ++ ql), (insert k p = q ++ pl), (insert k p = p ++ q), (insert k p = p ++ p), (insert k p = p ++ ql), (insert k p = p ++ pl), (insert k p = ql ++ q), (insert k p = ql ++ p), (insert k p = ql ++ ql)
(insert k p = ql ++ pl), (insert k p = pl ++ q), (insert k p = pl ++ p), (insert k p = pl ++ ql), (insert k p = pl ++ pl), (insert k ql = q), (insert k ql = p), (insert k ql = ql), (insert k ql = pl), (insert k ql = q ++ q)
(insert k ql = q ++ p), (insert k ql = q ++ ql), (insert k ql = q ++ pl), (insert k ql = p ++ q), (insert k ql = p ++ p), (insert k ql = p ++ ql), (insert k ql = p ++ pl), (insert k ql = ql ++ q), (insert k ql = ql ++ p), (insert k ql = ql ++ ql)
(insert k ql = ql ++ pl), (insert k ql = pl ++ q), (insert k ql = pl ++ p), (insert k ql = pl ++ ql), (insert k ql = pl ++ pl), (insert k pl = q), (insert k pl = p), (insert k pl = ql), (insert k pl = pl), (insert k pl = q ++ q)
(insert k pl = q ++ p), (insert k pl = q ++ ql), (insert k pl = q ++ pl), (insert k pl = p ++ q), (insert k pl = p ++ p), (insert k pl = p ++ ql), (insert k pl = p ++ pl), (insert k pl = ql ++ q), (insert k pl = ql ++ p), (insert k pl = ql ++ ql)
(insert k pl = ql ++ pl), (insert k pl = pl ++ q), (insert k pl = pl ++ p), (insert k pl = pl ++ ql), (insert k pl = pl ++ pl), (maybe_swap q = q), (maybe_swap q = p), (maybe_swap q = ql), (maybe_swap q = pl), (maybe_swap q = insert a q)
(maybe_swap q = insert a p), (maybe_swap q = insert a ql), (maybe_swap q = insert a pl), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert k ql), (maybe_swap q = insert k pl), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = q ++ ql)
(maybe_swap q = q ++ pl), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ pl), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ p), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ pl), (maybe_swap q = pl ++ q)
(maybe_swap q = pl ++ p), (maybe_swap q = pl ++ ql), (maybe_swap q = pl ++ pl), (maybe_swap p = q), (maybe_swap p = p), (maybe_swap p = ql), (maybe_swap p = pl), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = insert a ql)
(maybe_swap p = insert a pl), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert k ql), (maybe_swap p = insert k pl), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ pl), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ p), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ pl), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ p), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ pl), (maybe_swap p = pl ++ q), (maybe_swap p = pl ++ p), (maybe_swap p = pl ++ ql)
(maybe_swap p = pl ++ pl), (maybe_swap ql = q), (maybe_swap ql = p), (maybe_swap ql = ql), (maybe_swap ql = pl), (maybe_swap ql = insert a q), (maybe_swap ql = insert a p), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a pl), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k p), (maybe_swap ql = insert k ql), (maybe_swap ql = insert k pl), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ p), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ pl), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ p), (maybe_swap ql = p ++ ql)
(maybe_swap ql = p ++ pl), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ p), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ pl), (maybe_swap ql = pl ++ q), (maybe_swap ql = pl ++ p), (maybe_swap ql = pl ++ ql), (maybe_swap ql = pl ++ pl), (maybe_swap pl = q)
(maybe_swap pl = p), (maybe_swap pl = ql), (maybe_swap pl = pl), (maybe_swap pl = insert a q), (maybe_swap pl = insert a p), (maybe_swap pl = insert a ql), (maybe_swap pl = insert a pl), (maybe_swap pl = insert k q), (maybe_swap pl = insert k p), (maybe_swap pl = insert k ql)
(maybe_swap pl = insert k pl), (maybe_swap pl = q ++ q), (maybe_swap pl = q ++ p), (maybe_swap pl = q ++ ql), (maybe_swap pl = q ++ pl), (maybe_swap pl = p ++ q), (maybe_swap pl = p ++ p), (maybe_swap pl = p ++ ql), (maybe_swap pl = p ++ pl), (maybe_swap pl = ql ++ q)
(maybe_swap pl = ql ++ p), (maybe_swap pl = ql ++ ql), (maybe_swap pl = ql ++ pl), (maybe_swap pl = pl ++ q), (maybe_swap pl = pl ++ p), (maybe_swap pl = pl ++ ql), (maybe_swap pl = pl ++ pl), (q ++ q = q), (q ++ q = p), (q ++ q = ql)
(q ++ q = pl), (q ++ p = q), (q ++ p = p), (q ++ p = ql), (q ++ p = pl), (q ++ ql = q), (q ++ ql = p), (q ++ ql = ql), (q ++ ql = pl), (q ++ pl = q)
(q ++ pl = p), (q ++ pl = ql), (q ++ pl = pl), (p ++ q = q), (p ++ q = p), (p ++ q = ql), (p ++ q = pl), (p ++ p = q), (p ++ p = p), (p ++ p = ql)
(p ++ p = pl), (p ++ ql = q), (p ++ ql = p), (p ++ ql = ql), (p ++ ql = pl), (p ++ pl = q), (p ++ pl = p), (p ++ pl = ql), (p ++ pl = pl), (ql ++ q = q)
(ql ++ q = p), (ql ++ q = ql), (ql ++ q = pl), (ql ++ p = q), (ql ++ p = p), (ql ++ p = ql), (ql ++ p = pl), (ql ++ ql = q), (ql ++ ql = p), (ql ++ ql = ql)
(ql ++ ql = pl), (ql ++ pl = q), (ql ++ pl = p), (ql ++ pl = ql), (ql ++ pl = pl), (pl ++ q = q), (pl ++ q = p), (pl ++ q = ql), (pl ++ q = pl), (pl ++ p = q)
(pl ++ p = p), (pl ++ p = ql), (pl ++ p = pl), (pl ++ ql = q), (pl ++ ql = p), (pl ++ ql = ql), (pl ++ ql = pl), (pl ++ pl = q), (pl ++ pl = p), (pl ++ pl = ql)
(pl ++ pl = pl), ([] = q), ([] = p), ([] = ql), ([] = pl), ([] = merge q q), ([] = merge q p), ([] = merge q ql), ([] = merge q pl), ([] = merge p q)
([] = merge p p), ([] = merge p ql), ([] = merge p pl), ([] = merge ql q), ([] = merge ql p), ([] = merge ql ql), ([] = merge ql pl), ([] = merge pl q), ([] = merge pl p), ([] = merge pl ql)
([] = merge pl pl), ([] = insert a q), ([] = insert a p), ([] = insert a ql), ([] = insert a pl), ([] = insert k q), ([] = insert k p), ([] = insert k ql), ([] = insert k pl), ([] = maybe_swap q)
([] = maybe_swap p), ([] = maybe_swap ql), ([] = maybe_swap pl), ([] = q ++ q), ([] = q ++ p), ([] = q ++ ql), ([] = q ++ pl), ([] = p ++ q), ([] = p ++ p), ([] = p ++ ql)
([] = p ++ pl), ([] = ql ++ q), ([] = ql ++ p), ([] = ql ++ ql), ([] = ql ++ pl), ([] = pl ++ q), ([] = pl ++ p), ([] = pl ++ ql), ([] = pl ++ pl), (None = Some a)
(None = Some k), ((a, q) = select a q), ((a, q) = select a p), ((a, q) = select a ql), ((a, q) = select a pl), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select k ql), ((a, q) = select k pl), ((a, p) = select a q)
((a, p) = select a p), ((a, p) = select a ql), ((a, p) = select a pl), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select k ql), ((a, p) = select k pl), ((a, ql) = select a q), ((a, ql) = select a p), ((a, ql) = select a ql)
((a, ql) = select a pl), ((a, ql) = select k q), ((a, ql) = select k p), ((a, ql) = select k ql), ((a, ql) = select k pl), ((a, pl) = select a q), ((a, pl) = select a p), ((a, pl) = select a ql), ((a, pl) = select a pl), ((a, pl) = select k q)
((a, pl) = select k p), ((a, pl) = select k ql), ((a, pl) = select k pl), ((k, q) = select a q), ((k, q) = select a p), ((k, q) = select a ql), ((k, q) = select a pl), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select k ql)
((k, q) = select k pl), ((k, p) = select a q), ((k, p) = select a p), ((k, p) = select a ql), ((k, p) = select a pl), ((k, p) = select k q), ((k, p) = select k p), ((k, p) = select k ql), ((k, p) = select k pl), ((k, ql) = select a q)
((k, ql) = select a p), ((k, ql) = select a ql), ((k, ql) = select a pl), ((k, ql) = select k q), ((k, ql) = select k p), ((k, ql) = select k ql), ((k, ql) = select k pl), ((k, pl) = select a q), ((k, pl) = select a p), ((k, pl) = select a ql)
((k, pl) = select a pl), ((k, pl) = select k q), ((k, pl) = select k p), ((k, pl) = select k ql), ((k, pl) = select k pl), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (k >=? k)), ((a >? k) = (a >=? a))
((a >? k) = (a >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (k >=? k)), ((k >? a) = (a >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (k >=? k)), ((k >? k) = (a >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (k >=? a))
((k >? k) = (k >=? k)), (length q = a), (length q = k), (length p = a), (length p = k), (length ql = a), (length ql = k), (length pl = a), (length pl = k)

Label: 1 (1)
(Abs q q), (Abs q p), (Abs q ql), (Abs q pl), (Abs p q), (Abs p p), (Abs p ql), (Abs p pl), (Abs ql q), (Abs ql p)
(Abs ql ql), (Abs ql pl), (Abs pl q), (Abs pl p), (Abs pl ql), (Abs pl pl), (priq q), (priq p), (priq ql), (priq pl)
(Permutation q q), (Permutation q p), (Permutation q ql), (Permutation q pl), (Permutation p q), (Permutation p p), (Permutation p ql), (Permutation p pl), (Permutation ql q), (Permutation ql p)
(Permutation ql ql), (Permutation ql pl), (Permutation pl q), (Permutation pl p), (Permutation pl ql), (Permutation pl pl), (In a q), (In a p), (In a ql), (In a pl)
(In k q), (In k p), (In k ql), (In k pl), (a < a), (a < k), (k < a), (k < k), (a <= a), (a <= k)
(k <= a), (k <= k), (a = a), (a = k), (k = a), (k = k), (q = q), (q = p), (q = ql), (q = pl)
(p = q), (p = p), (p = ql), (p = pl), (ql = q), (ql = p), (ql = ql), (ql = pl), (pl = q), (pl = p)
(pl = ql), (pl = pl), (false = (a >? a)), (false = (a >? k)), (false = (k >? a)), (false = (k >? k)), (false = (a >=? a)), (false = (a >=? k)), (false = (k >=? a)), (false = (k >=? k))
(true = (a >? a)), (true = (a >? k)), (true = (k >? a)), (true = (k >? k)), (true = (a >=? a)), (true = (a >=? k)), (true = (k >=? a)), (true = (k >=? k)), (Abs q (a :: q)), (Abs q (a :: p))
(Abs q (a :: ql)), (Abs q (a :: pl)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (k :: ql)), (Abs q (k :: pl)), (Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge q ql)), (Abs q (merge q pl))
(Abs q (merge p q)), (Abs q (merge p p)), (Abs q (merge p ql)), (Abs q (merge p pl)), (Abs q (merge ql q)), (Abs q (merge ql p)), (Abs q (merge ql ql)), (Abs q (merge ql pl)), (Abs q (merge pl q)), (Abs q (merge pl p))
(Abs q (merge pl ql)), (Abs q (merge pl pl)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (insert a ql)), (Abs q (insert a pl)), (Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert k ql)), (Abs q (insert k pl))
(Abs q (maybe_swap q)), (Abs q (maybe_swap p)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap pl)), (Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (q ++ ql)), (Abs q (q ++ pl)), (Abs q (p ++ q)), (Abs q (p ++ p))
(Abs q (p ++ ql)), (Abs q (p ++ pl)), (Abs q (ql ++ q)), (Abs q (ql ++ p)), (Abs q (ql ++ ql)), (Abs q (ql ++ pl)), (Abs q (pl ++ q)), (Abs q (pl ++ p)), (Abs q (pl ++ ql)), (Abs q (pl ++ pl))
(Abs q []), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (a :: ql)), (Abs p (a :: pl)), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (k :: ql)), (Abs p (k :: pl)), (Abs p (merge q q))
(Abs p (merge q p)), (Abs p (merge q ql)), (Abs p (merge q pl)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (merge p ql)), (Abs p (merge p pl)), (Abs p (merge ql q)), (Abs p (merge ql p)), (Abs p (merge ql ql))
(Abs p (merge ql pl)), (Abs p (merge pl q)), (Abs p (merge pl p)), (Abs p (merge pl ql)), (Abs p (merge pl pl)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (insert a ql)), (Abs p (insert a pl)), (Abs p (insert k q))
(Abs p (insert k p)), (Abs p (insert k ql)), (Abs p (insert k pl)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap pl)), (Abs p (q ++ q)), (Abs p (q ++ p)), (Abs p (q ++ ql))
(Abs p (q ++ pl)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p (p ++ ql)), (Abs p (p ++ pl)), (Abs p (ql ++ q)), (Abs p (ql ++ p)), (Abs p (ql ++ ql)), (Abs p (ql ++ pl)), (Abs p (pl ++ q))
(Abs p (pl ++ p)), (Abs p (pl ++ ql)), (Abs p (pl ++ pl)), (Abs p []), (Abs ql (a :: q)), (Abs ql (a :: p)), (Abs ql (a :: ql)), (Abs ql (a :: pl)), (Abs ql (k :: q)), (Abs ql (k :: p))
(Abs ql (k :: ql)), (Abs ql (k :: pl)), (Abs ql (merge q q)), (Abs ql (merge q p)), (Abs ql (merge q ql)), (Abs ql (merge q pl)), (Abs ql (merge p q)), (Abs ql (merge p p)), (Abs ql (merge p ql)), (Abs ql (merge p pl))
(Abs ql (merge ql q)), (Abs ql (merge ql p)), (Abs ql (merge ql ql)), (Abs ql (merge ql pl)), (Abs ql (merge pl q)), (Abs ql (merge pl p)), (Abs ql (merge pl ql)), (Abs ql (merge pl pl)), (Abs ql (insert a q)), (Abs ql (insert a p))
(Abs ql (insert a ql)), (Abs ql (insert a pl)), (Abs ql (insert k q)), (Abs ql (insert k p)), (Abs ql (insert k ql)), (Abs ql (insert k pl)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap p)), (Abs ql (maybe_swap ql)), (Abs ql (maybe_swap pl))
(Abs ql (q ++ q)), (Abs ql (q ++ p)), (Abs ql (q ++ ql)), (Abs ql (q ++ pl)), (Abs ql (p ++ q)), (Abs ql (p ++ p)), (Abs ql (p ++ ql)), (Abs ql (p ++ pl)), (Abs ql (ql ++ q)), (Abs ql (ql ++ p))
(Abs ql (ql ++ ql)), (Abs ql (ql ++ pl)), (Abs ql (pl ++ q)), (Abs ql (pl ++ p)), (Abs ql (pl ++ ql)), (Abs ql (pl ++ pl)), (Abs ql []), (Abs pl (a :: q)), (Abs pl (a :: p)), (Abs pl (a :: ql))
(Abs pl (a :: pl)), (Abs pl (k :: q)), (Abs pl (k :: p)), (Abs pl (k :: ql)), (Abs pl (k :: pl)), (Abs pl (merge q q)), (Abs pl (merge q p)), (Abs pl (merge q ql)), (Abs pl (merge q pl)), (Abs pl (merge p q))
(Abs pl (merge p p)), (Abs pl (merge p ql)), (Abs pl (merge p pl)), (Abs pl (merge ql q)), (Abs pl (merge ql p)), (Abs pl (merge ql ql)), (Abs pl (merge ql pl)), (Abs pl (merge pl q)), (Abs pl (merge pl p)), (Abs pl (merge pl ql))
(Abs pl (merge pl pl)), (Abs pl (insert a q)), (Abs pl (insert a p)), (Abs pl (insert a ql)), (Abs pl (insert a pl)), (Abs pl (insert k q)), (Abs pl (insert k p)), (Abs pl (insert k ql)), (Abs pl (insert k pl)), (Abs pl (maybe_swap q))
(Abs pl (maybe_swap p)), (Abs pl (maybe_swap ql)), (Abs pl (maybe_swap pl)), (Abs pl (q ++ q)), (Abs pl (q ++ p)), (Abs pl (q ++ ql)), (Abs pl (q ++ pl)), (Abs pl (p ++ q)), (Abs pl (p ++ p)), (Abs pl (p ++ ql))
(Abs pl (p ++ pl)), (Abs pl (ql ++ q)), (Abs pl (ql ++ p)), (Abs pl (ql ++ ql)), (Abs pl (ql ++ pl)), (Abs pl (pl ++ q)), (Abs pl (pl ++ p)), (Abs pl (pl ++ ql)), (Abs pl (pl ++ pl)), (Abs pl [])
(Abs (a :: q) q), (Abs (a :: q) p), (Abs (a :: q) ql), (Abs (a :: q) pl), (Abs (a :: q) (a :: p)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: pl)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: ql))
(Abs (a :: q) (k :: pl)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q pl)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p pl)), (Abs (a :: q) (merge ql q))
(Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql pl)), (Abs (a :: q) (merge pl q)), (Abs (a :: q) (merge pl p)), (Abs (a :: q) (merge pl ql)), (Abs (a :: q) (merge pl pl)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (insert a ql))
(Abs (a :: q) (insert a pl)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k pl)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap pl)), (Abs (a :: q) (q ++ q))
(Abs (a :: q) (q ++ p)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ pl)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ pl)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (ql ++ ql))
(Abs (a :: q) (ql ++ pl)), (Abs (a :: q) (pl ++ q)), (Abs (a :: q) (pl ++ p)), (Abs (a :: q) (pl ++ ql)), (Abs (a :: q) (pl ++ pl)), (Abs (a :: q) []), (Abs (a :: p) q), (Abs (a :: p) p), (Abs (a :: p) ql), (Abs (a :: p) pl)
(Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: pl)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: pl)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge q ql))
(Abs (a :: p) (merge q pl)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p pl)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql pl)), (Abs (a :: p) (merge pl q))
(Abs (a :: p) (merge pl p)), (Abs (a :: p) (merge pl ql)), (Abs (a :: p) (merge pl pl)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a pl)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert k ql))
(Abs (a :: p) (insert k pl)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap pl)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ pl)), (Abs (a :: p) (p ++ q))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ pl)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ pl)), (Abs (a :: p) (pl ++ q)), (Abs (a :: p) (pl ++ p)), (Abs (a :: p) (pl ++ ql))
(Abs (a :: p) (pl ++ pl)), (Abs (a :: p) []), (Abs (a :: ql) q), (Abs (a :: ql) p), (Abs (a :: ql) ql), (Abs (a :: ql) pl), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (a :: pl)), (Abs (a :: ql) (k :: q))
(Abs (a :: ql) (k :: p)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: pl)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge q ql)), (Abs (a :: ql) (merge q pl)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (merge p ql))
(Abs (a :: ql) (merge p pl)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql pl)), (Abs (a :: ql) (merge pl q)), (Abs (a :: ql) (merge pl p)), (Abs (a :: ql) (merge pl ql)), (Abs (a :: ql) (merge pl pl)), (Abs (a :: ql) (insert a q))
(Abs (a :: ql) (insert a p)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a pl)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k p)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k pl)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (maybe_swap ql))
(Abs (a :: ql) (maybe_swap pl)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ pl)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ pl)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ pl)), (Abs (a :: ql) (pl ++ q)), (Abs (a :: ql) (pl ++ p)), (Abs (a :: ql) (pl ++ ql)), (Abs (a :: ql) (pl ++ pl)), (Abs (a :: ql) []), (Abs (a :: pl) q), (Abs (a :: pl) p)
(Abs (a :: pl) ql), (Abs (a :: pl) pl), (Abs (a :: pl) (a :: q)), (Abs (a :: pl) (a :: p)), (Abs (a :: pl) (a :: ql)), (Abs (a :: pl) (k :: q)), (Abs (a :: pl) (k :: p)), (Abs (a :: pl) (k :: ql)), (Abs (a :: pl) (k :: pl)), (Abs (a :: pl) (merge q q))
(Abs (a :: pl) (merge q p)), (Abs (a :: pl) (merge q ql)), (Abs (a :: pl) (merge q pl)), (Abs (a :: pl) (merge p q)), (Abs (a :: pl) (merge p p)), (Abs (a :: pl) (merge p ql)), (Abs (a :: pl) (merge p pl)), (Abs (a :: pl) (merge ql q)), (Abs (a :: pl) (merge ql p)), (Abs (a :: pl) (merge ql ql))
(Abs (a :: pl) (merge ql pl)), (Abs (a :: pl) (merge pl q)), (Abs (a :: pl) (merge pl p)), (Abs (a :: pl) (merge pl ql)), (Abs (a :: pl) (merge pl pl)), (Abs (a :: pl) (insert a q)), (Abs (a :: pl) (insert a p)), (Abs (a :: pl) (insert a ql)), (Abs (a :: pl) (insert a pl)), (Abs (a :: pl) (insert k q))
(Abs (a :: pl) (insert k p)), (Abs (a :: pl) (insert k ql)), (Abs (a :: pl) (insert k pl)), (Abs (a :: pl) (maybe_swap q)), (Abs (a :: pl) (maybe_swap p)), (Abs (a :: pl) (maybe_swap ql)), (Abs (a :: pl) (maybe_swap pl)), (Abs (a :: pl) (q ++ q)), (Abs (a :: pl) (q ++ p)), (Abs (a :: pl) (q ++ ql))
(Abs (a :: pl) (q ++ pl)), (Abs (a :: pl) (p ++ q)), (Abs (a :: pl) (p ++ p)), (Abs (a :: pl) (p ++ ql)), (Abs (a :: pl) (p ++ pl)), (Abs (a :: pl) (ql ++ q)), (Abs (a :: pl) (ql ++ p)), (Abs (a :: pl) (ql ++ ql)), (Abs (a :: pl) (ql ++ pl)), (Abs (a :: pl) (pl ++ q))
(Abs (a :: pl) (pl ++ p)), (Abs (a :: pl) (pl ++ ql)), (Abs (a :: pl) (pl ++ pl)), (Abs (a :: pl) []), (Abs (k :: q) q), (Abs (k :: q) p), (Abs (k :: q) ql), (Abs (k :: q) pl), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p))
(Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: pl)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: pl)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q pl)), (Abs (k :: q) (merge p q))
(Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p pl)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql pl)), (Abs (k :: q) (merge pl q)), (Abs (k :: q) (merge pl p)), (Abs (k :: q) (merge pl ql))
(Abs (k :: q) (merge pl pl)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a pl)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k pl)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap pl)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ pl)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ pl)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ pl)), (Abs (k :: q) (pl ++ q)), (Abs (k :: q) (pl ++ p)), (Abs (k :: q) (pl ++ ql)), (Abs (k :: q) (pl ++ pl)), (Abs (k :: q) [])
(Abs (k :: p) q), (Abs (k :: p) p), (Abs (k :: p) ql), (Abs (k :: p) pl), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: pl)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql))
(Abs (k :: p) (k :: pl)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q pl)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p pl)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql pl)), (Abs (k :: p) (merge pl q)), (Abs (k :: p) (merge pl p)), (Abs (k :: p) (merge pl ql)), (Abs (k :: p) (merge pl pl)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a pl)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k pl)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap pl)), (Abs (k :: p) (q ++ q))
(Abs (k :: p) (q ++ p)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ pl)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ pl)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ p)), (Abs (k :: p) (ql ++ ql))
(Abs (k :: p) (ql ++ pl)), (Abs (k :: p) (pl ++ q)), (Abs (k :: p) (pl ++ p)), (Abs (k :: p) (pl ++ ql)), (Abs (k :: p) (pl ++ pl)), (Abs (k :: p) []), (Abs (k :: ql) q), (Abs (k :: ql) p), (Abs (k :: ql) ql), (Abs (k :: ql) pl)
(Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: p)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: pl)), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (k :: pl)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge q ql))
(Abs (k :: ql) (merge q pl)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p pl)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql pl)), (Abs (k :: ql) (merge pl q))
(Abs (k :: ql) (merge pl p)), (Abs (k :: ql) (merge pl ql)), (Abs (k :: ql) (merge pl pl)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a pl)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert k ql))
(Abs (k :: ql) (insert k pl)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap pl)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ pl)), (Abs (k :: ql) (p ++ q))
(Abs (k :: ql) (p ++ p)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ pl)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ pl)), (Abs (k :: ql) (pl ++ q)), (Abs (k :: ql) (pl ++ p)), (Abs (k :: ql) (pl ++ ql))
(Abs (k :: ql) (pl ++ pl)), (Abs (k :: ql) []), (Abs (k :: pl) q), (Abs (k :: pl) p), (Abs (k :: pl) ql), (Abs (k :: pl) pl), (Abs (k :: pl) (a :: q)), (Abs (k :: pl) (a :: p)), (Abs (k :: pl) (a :: ql)), (Abs (k :: pl) (a :: pl))
(Abs (k :: pl) (k :: q)), (Abs (k :: pl) (k :: p)), (Abs (k :: pl) (k :: ql)), (Abs (k :: pl) (merge q q)), (Abs (k :: pl) (merge q p)), (Abs (k :: pl) (merge q ql)), (Abs (k :: pl) (merge q pl)), (Abs (k :: pl) (merge p q)), (Abs (k :: pl) (merge p p)), (Abs (k :: pl) (merge p ql))
(Abs (k :: pl) (merge p pl)), (Abs (k :: pl) (merge ql q)), (Abs (k :: pl) (merge ql p)), (Abs (k :: pl) (merge ql ql)), (Abs (k :: pl) (merge ql pl)), (Abs (k :: pl) (merge pl q)), (Abs (k :: pl) (merge pl p)), (Abs (k :: pl) (merge pl ql)), (Abs (k :: pl) (merge pl pl)), (Abs (k :: pl) (insert a q))
(Abs (k :: pl) (insert a p)), (Abs (k :: pl) (insert a ql)), (Abs (k :: pl) (insert a pl)), (Abs (k :: pl) (insert k q)), (Abs (k :: pl) (insert k p)), (Abs (k :: pl) (insert k ql)), (Abs (k :: pl) (insert k pl)), (Abs (k :: pl) (maybe_swap q)), (Abs (k :: pl) (maybe_swap p)), (Abs (k :: pl) (maybe_swap ql))
(Abs (k :: pl) (maybe_swap pl)), (Abs (k :: pl) (q ++ q)), (Abs (k :: pl) (q ++ p)), (Abs (k :: pl) (q ++ ql)), (Abs (k :: pl) (q ++ pl)), (Abs (k :: pl) (p ++ q)), (Abs (k :: pl) (p ++ p)), (Abs (k :: pl) (p ++ ql)), (Abs (k :: pl) (p ++ pl)), (Abs (k :: pl) (ql ++ q))
(Abs (k :: pl) (ql ++ p)), (Abs (k :: pl) (ql ++ ql)), (Abs (k :: pl) (ql ++ pl)), (Abs (k :: pl) (pl ++ q)), (Abs (k :: pl) (pl ++ p)), (Abs (k :: pl) (pl ++ ql)), (Abs (k :: pl) (pl ++ pl)), (Abs (k :: pl) []), (Abs (merge q q) q), (Abs (merge q q) p)
(Abs (merge q q) ql), (Abs (merge q q) pl), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: p)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: pl)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: pl))
(Abs (merge q q) (merge q p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q pl)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p pl)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge ql ql))
(Abs (merge q q) (merge ql pl)), (Abs (merge q q) (merge pl q)), (Abs (merge q q) (merge pl p)), (Abs (merge q q) (merge pl ql)), (Abs (merge q q) (merge pl pl)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a pl)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k p)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k pl)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap pl)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ pl)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ pl)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ pl)), (Abs (merge q q) (pl ++ q))
(Abs (merge q q) (pl ++ p)), (Abs (merge q q) (pl ++ ql)), (Abs (merge q q) (pl ++ pl)), (Abs (merge q q) []), (Abs (merge q p) q), (Abs (merge q p) p), (Abs (merge q p) ql), (Abs (merge q p) pl), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: p))
(Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: pl)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: pl)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q pl)), (Abs (merge q p) (merge p q))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p pl)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql pl)), (Abs (merge q p) (merge pl q)), (Abs (merge q p) (merge pl p)), (Abs (merge q p) (merge pl ql))
(Abs (merge q p) (merge pl pl)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a pl)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k pl)), (Abs (merge q p) (maybe_swap q))
(Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap pl)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ pl)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ ql))
(Abs (merge q p) (p ++ pl)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ pl)), (Abs (merge q p) (pl ++ q)), (Abs (merge q p) (pl ++ p)), (Abs (merge q p) (pl ++ ql)), (Abs (merge q p) (pl ++ pl)), (Abs (merge q p) [])
(Abs (merge q ql) q), (Abs (merge q ql) p), (Abs (merge q ql) ql), (Abs (merge q ql) pl), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: pl)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: p))
(Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: pl)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge q pl)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p pl)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql pl)), (Abs (merge q ql) (merge pl q)), (Abs (merge q ql) (merge pl p)), (Abs (merge q ql) (merge pl ql)), (Abs (merge q ql) (merge pl pl)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a pl)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k pl)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap pl)), (Abs (merge q ql) (q ++ q))
(Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ pl)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ pl)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (ql ++ ql))
(Abs (merge q ql) (ql ++ pl)), (Abs (merge q ql) (pl ++ q)), (Abs (merge q ql) (pl ++ p)), (Abs (merge q ql) (pl ++ ql)), (Abs (merge q ql) (pl ++ pl)), (Abs (merge q ql) []), (Abs (merge q pl) q), (Abs (merge q pl) p), (Abs (merge q pl) ql), (Abs (merge q pl) pl)
(Abs (merge q pl) (a :: q)), (Abs (merge q pl) (a :: p)), (Abs (merge q pl) (a :: ql)), (Abs (merge q pl) (a :: pl)), (Abs (merge q pl) (k :: q)), (Abs (merge q pl) (k :: p)), (Abs (merge q pl) (k :: ql)), (Abs (merge q pl) (k :: pl)), (Abs (merge q pl) (merge q q)), (Abs (merge q pl) (merge q p))
(Abs (merge q pl) (merge q ql)), (Abs (merge q pl) (merge p q)), (Abs (merge q pl) (merge p p)), (Abs (merge q pl) (merge p ql)), (Abs (merge q pl) (merge p pl)), (Abs (merge q pl) (merge ql q)), (Abs (merge q pl) (merge ql p)), (Abs (merge q pl) (merge ql ql)), (Abs (merge q pl) (merge ql pl)), (Abs (merge q pl) (merge pl q))
(Abs (merge q pl) (merge pl p)), (Abs (merge q pl) (merge pl ql)), (Abs (merge q pl) (merge pl pl)), (Abs (merge q pl) (insert a q)), (Abs (merge q pl) (insert a p)), (Abs (merge q pl) (insert a ql)), (Abs (merge q pl) (insert a pl)), (Abs (merge q pl) (insert k q)), (Abs (merge q pl) (insert k p)), (Abs (merge q pl) (insert k ql))
(Abs (merge q pl) (insert k pl)), (Abs (merge q pl) (maybe_swap q)), (Abs (merge q pl) (maybe_swap p)), (Abs (merge q pl) (maybe_swap ql)), (Abs (merge q pl) (maybe_swap pl)), (Abs (merge q pl) (q ++ q)), (Abs (merge q pl) (q ++ p)), (Abs (merge q pl) (q ++ ql)), (Abs (merge q pl) (q ++ pl)), (Abs (merge q pl) (p ++ q))
(Abs (merge q pl) (p ++ p)), (Abs (merge q pl) (p ++ ql)), (Abs (merge q pl) (p ++ pl)), (Abs (merge q pl) (ql ++ q)), (Abs (merge q pl) (ql ++ p)), (Abs (merge q pl) (ql ++ ql)), (Abs (merge q pl) (ql ++ pl)), (Abs (merge q pl) (pl ++ q)), (Abs (merge q pl) (pl ++ p)), (Abs (merge q pl) (pl ++ ql))
(Abs (merge q pl) (pl ++ pl)), (Abs (merge q pl) []), (Abs (merge p q) q), (Abs (merge p q) p), (Abs (merge p q) ql), (Abs (merge p q) pl), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: pl))
(Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: pl)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q pl)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p ql))
(Abs (merge p q) (merge p pl)), (Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql pl)), (Abs (merge p q) (merge pl q)), (Abs (merge p q) (merge pl p)), (Abs (merge p q) (merge pl ql)), (Abs (merge p q) (merge pl pl)), (Abs (merge p q) (insert a q))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a pl)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k pl)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (maybe_swap ql))
(Abs (merge p q) (maybe_swap pl)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ pl)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ pl)), (Abs (merge p q) (ql ++ q))
(Abs (merge p q) (ql ++ p)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ pl)), (Abs (merge p q) (pl ++ q)), (Abs (merge p q) (pl ++ p)), (Abs (merge p q) (pl ++ ql)), (Abs (merge p q) (pl ++ pl)), (Abs (merge p q) []), (Abs (merge p p) q), (Abs (merge p p) p)
(Abs (merge p p) ql), (Abs (merge p p) pl), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: pl)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: pl))
(Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q pl)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p pl)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge ql ql))
(Abs (merge p p) (merge ql pl)), (Abs (merge p p) (merge pl q)), (Abs (merge p p) (merge pl p)), (Abs (merge p p) (merge pl ql)), (Abs (merge p p) (merge pl pl)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a pl)), (Abs (merge p p) (insert k q))
(Abs (merge p p) (insert k p)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k pl)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap pl)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (q ++ ql))
(Abs (merge p p) (q ++ pl)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ pl)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ pl)), (Abs (merge p p) (pl ++ q))
(Abs (merge p p) (pl ++ p)), (Abs (merge p p) (pl ++ ql)), (Abs (merge p p) (pl ++ pl)), (Abs (merge p p) []), (Abs (merge p ql) q), (Abs (merge p ql) p), (Abs (merge p ql) ql), (Abs (merge p ql) pl), (Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: p))
(Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: pl)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: pl)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q pl))
(Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (merge p pl)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql pl)), (Abs (merge p ql) (merge pl q)), (Abs (merge p ql) (merge pl p)), (Abs (merge p ql) (merge pl ql))
(Abs (merge p ql) (merge pl pl)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a pl)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k pl)), (Abs (merge p ql) (maybe_swap q))
(Abs (merge p ql) (maybe_swap p)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap pl)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ pl)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) (p ++ ql))
(Abs (merge p ql) (p ++ pl)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ pl)), (Abs (merge p ql) (pl ++ q)), (Abs (merge p ql) (pl ++ p)), (Abs (merge p ql) (pl ++ ql)), (Abs (merge p ql) (pl ++ pl)), (Abs (merge p ql) [])
(Abs (merge p pl) q), (Abs (merge p pl) p), (Abs (merge p pl) ql), (Abs (merge p pl) pl), (Abs (merge p pl) (a :: q)), (Abs (merge p pl) (a :: p)), (Abs (merge p pl) (a :: ql)), (Abs (merge p pl) (a :: pl)), (Abs (merge p pl) (k :: q)), (Abs (merge p pl) (k :: p))
(Abs (merge p pl) (k :: ql)), (Abs (merge p pl) (k :: pl)), (Abs (merge p pl) (merge q q)), (Abs (merge p pl) (merge q p)), (Abs (merge p pl) (merge q ql)), (Abs (merge p pl) (merge q pl)), (Abs (merge p pl) (merge p q)), (Abs (merge p pl) (merge p p)), (Abs (merge p pl) (merge p ql)), (Abs (merge p pl) (merge ql q))
(Abs (merge p pl) (merge ql p)), (Abs (merge p pl) (merge ql ql)), (Abs (merge p pl) (merge ql pl)), (Abs (merge p pl) (merge pl q)), (Abs (merge p pl) (merge pl p)), (Abs (merge p pl) (merge pl ql)), (Abs (merge p pl) (merge pl pl)), (Abs (merge p pl) (insert a q)), (Abs (merge p pl) (insert a p)), (Abs (merge p pl) (insert a ql))
(Abs (merge p pl) (insert a pl)), (Abs (merge p pl) (insert k q)), (Abs (merge p pl) (insert k p)), (Abs (merge p pl) (insert k ql)), (Abs (merge p pl) (insert k pl)), (Abs (merge p pl) (maybe_swap q)), (Abs (merge p pl) (maybe_swap p)), (Abs (merge p pl) (maybe_swap ql)), (Abs (merge p pl) (maybe_swap pl)), (Abs (merge p pl) (q ++ q))
(Abs (merge p pl) (q ++ p)), (Abs (merge p pl) (q ++ ql)), (Abs (merge p pl) (q ++ pl)), (Abs (merge p pl) (p ++ q)), (Abs (merge p pl) (p ++ p)), (Abs (merge p pl) (p ++ ql)), (Abs (merge p pl) (p ++ pl)), (Abs (merge p pl) (ql ++ q)), (Abs (merge p pl) (ql ++ p)), (Abs (merge p pl) (ql ++ ql))
(Abs (merge p pl) (ql ++ pl)), (Abs (merge p pl) (pl ++ q)), (Abs (merge p pl) (pl ++ p)), (Abs (merge p pl) (pl ++ ql)), (Abs (merge p pl) (pl ++ pl)), (Abs (merge p pl) []), (Abs (merge ql q) q), (Abs (merge ql q) p), (Abs (merge ql q) ql), (Abs (merge ql q) pl)
(Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: pl)), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: pl)), (Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q p))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q pl)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p pl)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql pl)), (Abs (merge ql q) (merge pl q))
(Abs (merge ql q) (merge pl p)), (Abs (merge ql q) (merge pl ql)), (Abs (merge ql q) (merge pl pl)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a pl)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k p)), (Abs (merge ql q) (insert k ql))
(Abs (merge ql q) (insert k pl)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap pl)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ pl)), (Abs (merge ql q) (p ++ q))
(Abs (merge ql q) (p ++ p)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ pl)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ pl)), (Abs (merge ql q) (pl ++ q)), (Abs (merge ql q) (pl ++ p)), (Abs (merge ql q) (pl ++ ql))
(Abs (merge ql q) (pl ++ pl)), (Abs (merge ql q) []), (Abs (merge ql p) q), (Abs (merge ql p) p), (Abs (merge ql p) ql), (Abs (merge ql p) pl), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: p)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: pl))
(Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: pl)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q pl)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p p))
(Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p pl)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql pl)), (Abs (merge ql p) (merge pl q)), (Abs (merge ql p) (merge pl p)), (Abs (merge ql p) (merge pl ql)), (Abs (merge ql p) (merge pl pl)), (Abs (merge ql p) (insert a q))
(Abs (merge ql p) (insert a p)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a pl)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k pl)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (maybe_swap ql))
(Abs (merge ql p) (maybe_swap pl)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (q ++ ql)), (Abs (merge ql p) (q ++ pl)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ pl)), (Abs (merge ql p) (ql ++ q))
(Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ pl)), (Abs (merge ql p) (pl ++ q)), (Abs (merge ql p) (pl ++ p)), (Abs (merge ql p) (pl ++ ql)), (Abs (merge ql p) (pl ++ pl)), (Abs (merge ql p) []), (Abs (merge ql ql) q), (Abs (merge ql ql) p)
(Abs (merge ql ql) ql), (Abs (merge ql ql) pl), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: pl)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: pl))
(Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q pl)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p pl)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge ql pl)), (Abs (merge ql ql) (merge pl q)), (Abs (merge ql ql) (merge pl p)), (Abs (merge ql ql) (merge pl ql)), (Abs (merge ql ql) (merge pl pl)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a pl)), (Abs (merge ql ql) (insert k q))
(Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k pl)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap pl)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (q ++ ql))
(Abs (merge ql ql) (q ++ pl)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) (p ++ ql)), (Abs (merge ql ql) (p ++ pl)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ pl)), (Abs (merge ql ql) (pl ++ q))
(Abs (merge ql ql) (pl ++ p)), (Abs (merge ql ql) (pl ++ ql)), (Abs (merge ql ql) (pl ++ pl)), (Abs (merge ql ql) []), (Abs (merge ql pl) q), (Abs (merge ql pl) p), (Abs (merge ql pl) ql), (Abs (merge ql pl) pl), (Abs (merge ql pl) (a :: q)), (Abs (merge ql pl) (a :: p))
(Abs (merge ql pl) (a :: ql)), (Abs (merge ql pl) (a :: pl)), (Abs (merge ql pl) (k :: q)), (Abs (merge ql pl) (k :: p)), (Abs (merge ql pl) (k :: ql)), (Abs (merge ql pl) (k :: pl)), (Abs (merge ql pl) (merge q q)), (Abs (merge ql pl) (merge q p)), (Abs (merge ql pl) (merge q ql)), (Abs (merge ql pl) (merge q pl))
(Abs (merge ql pl) (merge p q)), (Abs (merge ql pl) (merge p p)), (Abs (merge ql pl) (merge p ql)), (Abs (merge ql pl) (merge p pl)), (Abs (merge ql pl) (merge ql q)), (Abs (merge ql pl) (merge ql p)), (Abs (merge ql pl) (merge ql ql)), (Abs (merge ql pl) (merge pl q)), (Abs (merge ql pl) (merge pl p)), (Abs (merge ql pl) (merge pl ql))
(Abs (merge ql pl) (merge pl pl)), (Abs (merge ql pl) (insert a q)), (Abs (merge ql pl) (insert a p)), (Abs (merge ql pl) (insert a ql)), (Abs (merge ql pl) (insert a pl)), (Abs (merge ql pl) (insert k q)), (Abs (merge ql pl) (insert k p)), (Abs (merge ql pl) (insert k ql)), (Abs (merge ql pl) (insert k pl)), (Abs (merge ql pl) (maybe_swap q))
(Abs (merge ql pl) (maybe_swap p)), (Abs (merge ql pl) (maybe_swap ql)), (Abs (merge ql pl) (maybe_swap pl)), (Abs (merge ql pl) (q ++ q)), (Abs (merge ql pl) (q ++ p)), (Abs (merge ql pl) (q ++ ql)), (Abs (merge ql pl) (q ++ pl)), (Abs (merge ql pl) (p ++ q)), (Abs (merge ql pl) (p ++ p)), (Abs (merge ql pl) (p ++ ql))
(Abs (merge ql pl) (p ++ pl)), (Abs (merge ql pl) (ql ++ q)), (Abs (merge ql pl) (ql ++ p)), (Abs (merge ql pl) (ql ++ ql)), (Abs (merge ql pl) (ql ++ pl)), (Abs (merge ql pl) (pl ++ q)), (Abs (merge ql pl) (pl ++ p)), (Abs (merge ql pl) (pl ++ ql)), (Abs (merge ql pl) (pl ++ pl)), (Abs (merge ql pl) [])
(Abs (merge pl q) q), (Abs (merge pl q) p), (Abs (merge pl q) ql), (Abs (merge pl q) pl), (Abs (merge pl q) (a :: q)), (Abs (merge pl q) (a :: p)), (Abs (merge pl q) (a :: ql)), (Abs (merge pl q) (a :: pl)), (Abs (merge pl q) (k :: q)), (Abs (merge pl q) (k :: p))
(Abs (merge pl q) (k :: ql)), (Abs (merge pl q) (k :: pl)), (Abs (merge pl q) (merge q q)), (Abs (merge pl q) (merge q p)), (Abs (merge pl q) (merge q ql)), (Abs (merge pl q) (merge q pl)), (Abs (merge pl q) (merge p q)), (Abs (merge pl q) (merge p p)), (Abs (merge pl q) (merge p ql)), (Abs (merge pl q) (merge p pl))
(Abs (merge pl q) (merge ql q)), (Abs (merge pl q) (merge ql p)), (Abs (merge pl q) (merge ql ql)), (Abs (merge pl q) (merge ql pl)), (Abs (merge pl q) (merge pl p)), (Abs (merge pl q) (merge pl ql)), (Abs (merge pl q) (merge pl pl)), (Abs (merge pl q) (insert a q)), (Abs (merge pl q) (insert a p)), (Abs (merge pl q) (insert a ql))
(Abs (merge pl q) (insert a pl)), (Abs (merge pl q) (insert k q)), (Abs (merge pl q) (insert k p)), (Abs (merge pl q) (insert k ql)), (Abs (merge pl q) (insert k pl)), (Abs (merge pl q) (maybe_swap q)), (Abs (merge pl q) (maybe_swap p)), (Abs (merge pl q) (maybe_swap ql)), (Abs (merge pl q) (maybe_swap pl)), (Abs (merge pl q) (q ++ q))
(Abs (merge pl q) (q ++ p)), (Abs (merge pl q) (q ++ ql)), (Abs (merge pl q) (q ++ pl)), (Abs (merge pl q) (p ++ q)), (Abs (merge pl q) (p ++ p)), (Abs (merge pl q) (p ++ ql)), (Abs (merge pl q) (p ++ pl)), (Abs (merge pl q) (ql ++ q)), (Abs (merge pl q) (ql ++ p)), (Abs (merge pl q) (ql ++ ql))
(Abs (merge pl q) (ql ++ pl)), (Abs (merge pl q) (pl ++ q)), (Abs (merge pl q) (pl ++ p)), (Abs (merge pl q) (pl ++ ql)), (Abs (merge pl q) (pl ++ pl)), (Abs (merge pl q) []), (Abs (merge pl p) q), (Abs (merge pl p) p), (Abs (merge pl p) ql), (Abs (merge pl p) pl)
(Abs (merge pl p) (a :: q)), (Abs (merge pl p) (a :: p)), (Abs (merge pl p) (a :: ql)), (Abs (merge pl p) (a :: pl)), (Abs (merge pl p) (k :: q)), (Abs (merge pl p) (k :: p)), (Abs (merge pl p) (k :: ql)), (Abs (merge pl p) (k :: pl)), (Abs (merge pl p) (merge q q)), (Abs (merge pl p) (merge q p))
(Abs (merge pl p) (merge q ql)), (Abs (merge pl p) (merge q pl)), (Abs (merge pl p) (merge p q)), (Abs (merge pl p) (merge p p)), (Abs (merge pl p) (merge p ql)), (Abs (merge pl p) (merge p pl)), (Abs (merge pl p) (merge ql q)), (Abs (merge pl p) (merge ql p)), (Abs (merge pl p) (merge ql ql)), (Abs (merge pl p) (merge ql pl))
(Abs (merge pl p) (merge pl q)), (Abs (merge pl p) (merge pl ql)), (Abs (merge pl p) (merge pl pl)), (Abs (merge pl p) (insert a q)), (Abs (merge pl p) (insert a p)), (Abs (merge pl p) (insert a ql)), (Abs (merge pl p) (insert a pl)), (Abs (merge pl p) (insert k q)), (Abs (merge pl p) (insert k p)), (Abs (merge pl p) (insert k ql))
(Abs (merge pl p) (insert k pl)), (Abs (merge pl p) (maybe_swap q)), (Abs (merge pl p) (maybe_swap p)), (Abs (merge pl p) (maybe_swap ql)), (Abs (merge pl p) (maybe_swap pl)), (Abs (merge pl p) (q ++ q)), (Abs (merge pl p) (q ++ p)), (Abs (merge pl p) (q ++ ql)), (Abs (merge pl p) (q ++ pl)), (Abs (merge pl p) (p ++ q))
(Abs (merge pl p) (p ++ p)), (Abs (merge pl p) (p ++ ql)), (Abs (merge pl p) (p ++ pl)), (Abs (merge pl p) (ql ++ q)), (Abs (merge pl p) (ql ++ p)), (Abs (merge pl p) (ql ++ ql)), (Abs (merge pl p) (ql ++ pl)), (Abs (merge pl p) (pl ++ q)), (Abs (merge pl p) (pl ++ p)), (Abs (merge pl p) (pl ++ ql))
(Abs (merge pl p) (pl ++ pl)), (Abs (merge pl p) []), (Abs (merge pl ql) q), (Abs (merge pl ql) p), (Abs (merge pl ql) ql), (Abs (merge pl ql) pl), (Abs (merge pl ql) (a :: q)), (Abs (merge pl ql) (a :: p)), (Abs (merge pl ql) (a :: ql)), (Abs (merge pl ql) (a :: pl))
(Abs (merge pl ql) (k :: q)), (Abs (merge pl ql) (k :: p)), (Abs (merge pl ql) (k :: ql)), (Abs (merge pl ql) (k :: pl)), (Abs (merge pl ql) (merge q q)), (Abs (merge pl ql) (merge q p)), (Abs (merge pl ql) (merge q ql)), (Abs (merge pl ql) (merge q pl)), (Abs (merge pl ql) (merge p q)), (Abs (merge pl ql) (merge p p))
(Abs (merge pl ql) (merge p ql)), (Abs (merge pl ql) (merge p pl)), (Abs (merge pl ql) (merge ql q)), (Abs (merge pl ql) (merge ql p)), (Abs (merge pl ql) (merge ql ql)), (Abs (merge pl ql) (merge ql pl)), (Abs (merge pl ql) (merge pl q)), (Abs (merge pl ql) (merge pl p)), (Abs (merge pl ql) (merge pl pl)), (Abs (merge pl ql) (insert a q))
(Abs (merge pl ql) (insert a p)), (Abs (merge pl ql) (insert a ql)), (Abs (merge pl ql) (insert a pl)), (Abs (merge pl ql) (insert k q)), (Abs (merge pl ql) (insert k p)), (Abs (merge pl ql) (insert k ql)), (Abs (merge pl ql) (insert k pl)), (Abs (merge pl ql) (maybe_swap q)), (Abs (merge pl ql) (maybe_swap p)), (Abs (merge pl ql) (maybe_swap ql))
(Abs (merge pl ql) (maybe_swap pl)), (Abs (merge pl ql) (q ++ q)), (Abs (merge pl ql) (q ++ p)), (Abs (merge pl ql) (q ++ ql)), (Abs (merge pl ql) (q ++ pl)), (Abs (merge pl ql) (p ++ q)), (Abs (merge pl ql) (p ++ p)), (Abs (merge pl ql) (p ++ ql)), (Abs (merge pl ql) (p ++ pl)), (Abs (merge pl ql) (ql ++ q))
(Abs (merge pl ql) (ql ++ p)), (Abs (merge pl ql) (ql ++ ql)), (Abs (merge pl ql) (ql ++ pl)), (Abs (merge pl ql) (pl ++ q)), (Abs (merge pl ql) (pl ++ p)), (Abs (merge pl ql) (pl ++ ql)), (Abs (merge pl ql) (pl ++ pl)), (Abs (merge pl ql) []), (Abs (merge pl pl) q), (Abs (merge pl pl) p)
(Abs (merge pl pl) ql), (Abs (merge pl pl) pl), (Abs (merge pl pl) (a :: q)), (Abs (merge pl pl) (a :: p)), (Abs (merge pl pl) (a :: ql)), (Abs (merge pl pl) (a :: pl)), (Abs (merge pl pl) (k :: q)), (Abs (merge pl pl) (k :: p)), (Abs (merge pl pl) (k :: ql)), (Abs (merge pl pl) (k :: pl))
(Abs (merge pl pl) (merge q q)), (Abs (merge pl pl) (merge q p)), (Abs (merge pl pl) (merge q ql)), (Abs (merge pl pl) (merge q pl)), (Abs (merge pl pl) (merge p q)), (Abs (merge pl pl) (merge p p)), (Abs (merge pl pl) (merge p ql)), (Abs (merge pl pl) (merge p pl)), (Abs (merge pl pl) (merge ql q)), (Abs (merge pl pl) (merge ql p))
(Abs (merge pl pl) (merge ql ql)), (Abs (merge pl pl) (merge ql pl)), (Abs (merge pl pl) (merge pl q)), (Abs (merge pl pl) (merge pl p)), (Abs (merge pl pl) (merge pl ql)), (Abs (merge pl pl) (insert a q)), (Abs (merge pl pl) (insert a p)), (Abs (merge pl pl) (insert a ql)), (Abs (merge pl pl) (insert a pl)), (Abs (merge pl pl) (insert k q))
(Abs (merge pl pl) (insert k p)), (Abs (merge pl pl) (insert k ql)), (Abs (merge pl pl) (insert k pl)), (Abs (merge pl pl) (maybe_swap q)), (Abs (merge pl pl) (maybe_swap p)), (Abs (merge pl pl) (maybe_swap ql)), (Abs (merge pl pl) (maybe_swap pl)), (Abs (merge pl pl) (q ++ q)), (Abs (merge pl pl) (q ++ p)), (Abs (merge pl pl) (q ++ ql))
(Abs (merge pl pl) (q ++ pl)), (Abs (merge pl pl) (p ++ q)), (Abs (merge pl pl) (p ++ p)), (Abs (merge pl pl) (p ++ ql)), (Abs (merge pl pl) (p ++ pl)), (Abs (merge pl pl) (ql ++ q)), (Abs (merge pl pl) (ql ++ p)), (Abs (merge pl pl) (ql ++ ql)), (Abs (merge pl pl) (ql ++ pl)), (Abs (merge pl pl) (pl ++ q))
(Abs (merge pl pl) (pl ++ p)), (Abs (merge pl pl) (pl ++ ql)), (Abs (merge pl pl) (pl ++ pl)), (Abs (merge pl pl) []), (Abs (insert a q) q), (Abs (insert a q) p), (Abs (insert a q) ql), (Abs (insert a q) pl), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: p))
(Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: pl)), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: pl)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q pl))
(Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p pl)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql pl)), (Abs (insert a q) (merge pl q)), (Abs (insert a q) (merge pl p))
(Abs (insert a q) (merge pl ql)), (Abs (insert a q) (merge pl pl)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a pl)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k pl)), (Abs (insert a q) (maybe_swap q))
(Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap pl)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ pl)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ ql))
(Abs (insert a q) (p ++ pl)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ pl)), (Abs (insert a q) (pl ++ q)), (Abs (insert a q) (pl ++ p)), (Abs (insert a q) (pl ++ ql)), (Abs (insert a q) (pl ++ pl)), (Abs (insert a q) [])
(Abs (insert a p) q), (Abs (insert a p) p), (Abs (insert a p) ql), (Abs (insert a p) pl), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: pl)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: pl)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q pl)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p pl))
(Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql pl)), (Abs (insert a p) (merge pl q)), (Abs (insert a p) (merge pl p)), (Abs (insert a p) (merge pl ql)), (Abs (insert a p) (merge pl pl)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql))
(Abs (insert a p) (insert a pl)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k pl)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap pl)), (Abs (insert a p) (q ++ q))
(Abs (insert a p) (q ++ p)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ pl)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ pl)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (ql ++ ql))
(Abs (insert a p) (ql ++ pl)), (Abs (insert a p) (pl ++ q)), (Abs (insert a p) (pl ++ p)), (Abs (insert a p) (pl ++ ql)), (Abs (insert a p) (pl ++ pl)), (Abs (insert a p) []), (Abs (insert a ql) q), (Abs (insert a ql) p), (Abs (insert a ql) ql), (Abs (insert a ql) pl)
(Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: pl)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: pl)), (Abs (insert a ql) (merge q q)), (Abs (insert a ql) (merge q p))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q pl)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p pl)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql pl))
(Abs (insert a ql) (merge pl q)), (Abs (insert a ql) (merge pl p)), (Abs (insert a ql) (merge pl ql)), (Abs (insert a ql) (merge pl pl)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (insert a pl)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k pl)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap pl)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ pl)), (Abs (insert a ql) (p ++ q))
(Abs (insert a ql) (p ++ p)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ pl)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ pl)), (Abs (insert a ql) (pl ++ q)), (Abs (insert a ql) (pl ++ p)), (Abs (insert a ql) (pl ++ ql))
(Abs (insert a ql) (pl ++ pl)), (Abs (insert a ql) []), (Abs (insert a pl) q), (Abs (insert a pl) p), (Abs (insert a pl) ql), (Abs (insert a pl) pl), (Abs (insert a pl) (a :: q)), (Abs (insert a pl) (a :: p)), (Abs (insert a pl) (a :: ql)), (Abs (insert a pl) (a :: pl))
(Abs (insert a pl) (k :: q)), (Abs (insert a pl) (k :: p)), (Abs (insert a pl) (k :: ql)), (Abs (insert a pl) (k :: pl)), (Abs (insert a pl) (merge q q)), (Abs (insert a pl) (merge q p)), (Abs (insert a pl) (merge q ql)), (Abs (insert a pl) (merge q pl)), (Abs (insert a pl) (merge p q)), (Abs (insert a pl) (merge p p))
(Abs (insert a pl) (merge p ql)), (Abs (insert a pl) (merge p pl)), (Abs (insert a pl) (merge ql q)), (Abs (insert a pl) (merge ql p)), (Abs (insert a pl) (merge ql ql)), (Abs (insert a pl) (merge ql pl)), (Abs (insert a pl) (merge pl q)), (Abs (insert a pl) (merge pl p)), (Abs (insert a pl) (merge pl ql)), (Abs (insert a pl) (merge pl pl))
(Abs (insert a pl) (insert a q)), (Abs (insert a pl) (insert a p)), (Abs (insert a pl) (insert a ql)), (Abs (insert a pl) (insert k q)), (Abs (insert a pl) (insert k p)), (Abs (insert a pl) (insert k ql)), (Abs (insert a pl) (insert k pl)), (Abs (insert a pl) (maybe_swap q)), (Abs (insert a pl) (maybe_swap p)), (Abs (insert a pl) (maybe_swap ql))
(Abs (insert a pl) (maybe_swap pl)), (Abs (insert a pl) (q ++ q)), (Abs (insert a pl) (q ++ p)), (Abs (insert a pl) (q ++ ql)), (Abs (insert a pl) (q ++ pl)), (Abs (insert a pl) (p ++ q)), (Abs (insert a pl) (p ++ p)), (Abs (insert a pl) (p ++ ql)), (Abs (insert a pl) (p ++ pl)), (Abs (insert a pl) (ql ++ q))
(Abs (insert a pl) (ql ++ p)), (Abs (insert a pl) (ql ++ ql)), (Abs (insert a pl) (ql ++ pl)), (Abs (insert a pl) (pl ++ q)), (Abs (insert a pl) (pl ++ p)), (Abs (insert a pl) (pl ++ ql)), (Abs (insert a pl) (pl ++ pl)), (Abs (insert a pl) []), (Abs (insert k q) q), (Abs (insert k q) p)
(Abs (insert k q) ql), (Abs (insert k q) pl), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: pl)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: pl))
(Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q pl)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p pl)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql p))
(Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql pl)), (Abs (insert k q) (merge pl q)), (Abs (insert k q) (merge pl p)), (Abs (insert k q) (merge pl ql)), (Abs (insert k q) (merge pl pl)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a pl))
(Abs (insert k q) (insert k p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k pl)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap pl)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (q ++ ql))
(Abs (insert k q) (q ++ pl)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ pl)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ pl)), (Abs (insert k q) (pl ++ q))
(Abs (insert k q) (pl ++ p)), (Abs (insert k q) (pl ++ ql)), (Abs (insert k q) (pl ++ pl)), (Abs (insert k q) []), (Abs (insert k p) q), (Abs (insert k p) p), (Abs (insert k p) ql), (Abs (insert k p) pl), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: p))
(Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: pl)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: pl)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q pl))
(Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p pl)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql pl)), (Abs (insert k p) (merge pl q)), (Abs (insert k p) (merge pl p))
(Abs (insert k p) (merge pl ql)), (Abs (insert k p) (merge pl pl)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a pl)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k pl)), (Abs (insert k p) (maybe_swap q))
(Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap pl)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ pl)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ ql))
(Abs (insert k p) (p ++ pl)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ pl)), (Abs (insert k p) (pl ++ q)), (Abs (insert k p) (pl ++ p)), (Abs (insert k p) (pl ++ ql)), (Abs (insert k p) (pl ++ pl)), (Abs (insert k p) [])
(Abs (insert k ql) q), (Abs (insert k ql) p), (Abs (insert k ql) ql), (Abs (insert k ql) pl), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: p)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: pl)), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: p))
(Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: pl)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q pl)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p pl))
(Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql pl)), (Abs (insert k ql) (merge pl q)), (Abs (insert k ql) (merge pl p)), (Abs (insert k ql) (merge pl ql)), (Abs (insert k ql) (merge pl pl)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a p))
(Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a pl)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert k pl)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap pl)), (Abs (insert k ql) (q ++ q))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ pl)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ pl)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (ql ++ ql))
(Abs (insert k ql) (ql ++ pl)), (Abs (insert k ql) (pl ++ q)), (Abs (insert k ql) (pl ++ p)), (Abs (insert k ql) (pl ++ ql)), (Abs (insert k ql) (pl ++ pl)), (Abs (insert k ql) []), (Abs (insert k pl) q), (Abs (insert k pl) p), (Abs (insert k pl) ql), (Abs (insert k pl) pl)
(Abs (insert k pl) (a :: q)), (Abs (insert k pl) (a :: p)), (Abs (insert k pl) (a :: ql)), (Abs (insert k pl) (a :: pl)), (Abs (insert k pl) (k :: q)), (Abs (insert k pl) (k :: p)), (Abs (insert k pl) (k :: ql)), (Abs (insert k pl) (k :: pl)), (Abs (insert k pl) (merge q q)), (Abs (insert k pl) (merge q p))
(Abs (insert k pl) (merge q ql)), (Abs (insert k pl) (merge q pl)), (Abs (insert k pl) (merge p q)), (Abs (insert k pl) (merge p p)), (Abs (insert k pl) (merge p ql)), (Abs (insert k pl) (merge p pl)), (Abs (insert k pl) (merge ql q)), (Abs (insert k pl) (merge ql p)), (Abs (insert k pl) (merge ql ql)), (Abs (insert k pl) (merge ql pl))
(Abs (insert k pl) (merge pl q)), (Abs (insert k pl) (merge pl p)), (Abs (insert k pl) (merge pl ql)), (Abs (insert k pl) (merge pl pl)), (Abs (insert k pl) (insert a q)), (Abs (insert k pl) (insert a p)), (Abs (insert k pl) (insert a ql)), (Abs (insert k pl) (insert a pl)), (Abs (insert k pl) (insert k q)), (Abs (insert k pl) (insert k p))
(Abs (insert k pl) (insert k ql)), (Abs (insert k pl) (maybe_swap q)), (Abs (insert k pl) (maybe_swap p)), (Abs (insert k pl) (maybe_swap ql)), (Abs (insert k pl) (maybe_swap pl)), (Abs (insert k pl) (q ++ q)), (Abs (insert k pl) (q ++ p)), (Abs (insert k pl) (q ++ ql)), (Abs (insert k pl) (q ++ pl)), (Abs (insert k pl) (p ++ q))
(Abs (insert k pl) (p ++ p)), (Abs (insert k pl) (p ++ ql)), (Abs (insert k pl) (p ++ pl)), (Abs (insert k pl) (ql ++ q)), (Abs (insert k pl) (ql ++ p)), (Abs (insert k pl) (ql ++ ql)), (Abs (insert k pl) (ql ++ pl)), (Abs (insert k pl) (pl ++ q)), (Abs (insert k pl) (pl ++ p)), (Abs (insert k pl) (pl ++ ql))
(Abs (insert k pl) (pl ++ pl)), (Abs (insert k pl) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) p), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) pl), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: pl))
(Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: pl)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q pl)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p pl)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql pl)), (Abs (maybe_swap q) (merge pl q)), (Abs (maybe_swap q) (merge pl p)), (Abs (maybe_swap q) (merge pl ql)), (Abs (maybe_swap q) (merge pl pl))
(Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a pl)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k pl)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (maybe_swap ql))
(Abs (maybe_swap q) (maybe_swap pl)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ pl)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ pl)), (Abs (maybe_swap q) (ql ++ q))
(Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ pl)), (Abs (maybe_swap q) (pl ++ q)), (Abs (maybe_swap q) (pl ++ p)), (Abs (maybe_swap q) (pl ++ ql)), (Abs (maybe_swap q) (pl ++ pl)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) p)
(Abs (maybe_swap p) ql), (Abs (maybe_swap p) pl), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: pl)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: pl))
(Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q pl)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p pl)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql p))
(Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql pl)), (Abs (maybe_swap p) (merge pl q)), (Abs (maybe_swap p) (merge pl p)), (Abs (maybe_swap p) (merge pl ql)), (Abs (maybe_swap p) (merge pl pl)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a pl))
(Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k pl)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap pl)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (q ++ ql))
(Abs (maybe_swap p) (q ++ pl)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ pl)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ pl)), (Abs (maybe_swap p) (pl ++ q))
(Abs (maybe_swap p) (pl ++ p)), (Abs (maybe_swap p) (pl ++ ql)), (Abs (maybe_swap p) (pl ++ pl)), (Abs (maybe_swap p) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) p), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) pl), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: p))
(Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: pl)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: pl)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q pl))
(Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p pl)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql pl)), (Abs (maybe_swap ql) (merge pl q)), (Abs (maybe_swap ql) (merge pl p))
(Abs (maybe_swap ql) (merge pl ql)), (Abs (maybe_swap ql) (merge pl pl)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a pl)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k pl))
(Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (maybe_swap pl)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ pl)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) (p ++ ql))
(Abs (maybe_swap ql) (p ++ pl)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ pl)), (Abs (maybe_swap ql) (pl ++ q)), (Abs (maybe_swap ql) (pl ++ p)), (Abs (maybe_swap ql) (pl ++ ql)), (Abs (maybe_swap ql) (pl ++ pl)), (Abs (maybe_swap ql) [])
(Abs (maybe_swap pl) q), (Abs (maybe_swap pl) p), (Abs (maybe_swap pl) ql), (Abs (maybe_swap pl) pl), (Abs (maybe_swap pl) (a :: q)), (Abs (maybe_swap pl) (a :: p)), (Abs (maybe_swap pl) (a :: ql)), (Abs (maybe_swap pl) (a :: pl)), (Abs (maybe_swap pl) (k :: q)), (Abs (maybe_swap pl) (k :: p))
(Abs (maybe_swap pl) (k :: ql)), (Abs (maybe_swap pl) (k :: pl)), (Abs (maybe_swap pl) (merge q q)), (Abs (maybe_swap pl) (merge q p)), (Abs (maybe_swap pl) (merge q ql)), (Abs (maybe_swap pl) (merge q pl)), (Abs (maybe_swap pl) (merge p q)), (Abs (maybe_swap pl) (merge p p)), (Abs (maybe_swap pl) (merge p ql)), (Abs (maybe_swap pl) (merge p pl))
(Abs (maybe_swap pl) (merge ql q)), (Abs (maybe_swap pl) (merge ql p)), (Abs (maybe_swap pl) (merge ql ql)), (Abs (maybe_swap pl) (merge ql pl)), (Abs (maybe_swap pl) (merge pl q)), (Abs (maybe_swap pl) (merge pl p)), (Abs (maybe_swap pl) (merge pl ql)), (Abs (maybe_swap pl) (merge pl pl)), (Abs (maybe_swap pl) (insert a q)), (Abs (maybe_swap pl) (insert a p))
(Abs (maybe_swap pl) (insert a ql)), (Abs (maybe_swap pl) (insert a pl)), (Abs (maybe_swap pl) (insert k q)), (Abs (maybe_swap pl) (insert k p)), (Abs (maybe_swap pl) (insert k ql)), (Abs (maybe_swap pl) (insert k pl)), (Abs (maybe_swap pl) (maybe_swap q)), (Abs (maybe_swap pl) (maybe_swap p)), (Abs (maybe_swap pl) (maybe_swap ql)), (Abs (maybe_swap pl) (q ++ q))
(Abs (maybe_swap pl) (q ++ p)), (Abs (maybe_swap pl) (q ++ ql)), (Abs (maybe_swap pl) (q ++ pl)), (Abs (maybe_swap pl) (p ++ q)), (Abs (maybe_swap pl) (p ++ p)), (Abs (maybe_swap pl) (p ++ ql)), (Abs (maybe_swap pl) (p ++ pl)), (Abs (maybe_swap pl) (ql ++ q)), (Abs (maybe_swap pl) (ql ++ p)), (Abs (maybe_swap pl) (ql ++ ql))
(Abs (maybe_swap pl) (ql ++ pl)), (Abs (maybe_swap pl) (pl ++ q)), (Abs (maybe_swap pl) (pl ++ p)), (Abs (maybe_swap pl) (pl ++ ql)), (Abs (maybe_swap pl) (pl ++ pl)), (Abs (maybe_swap pl) []), (Abs (q ++ q) q), (Abs (q ++ q) p), (Abs (q ++ q) ql), (Abs (q ++ q) pl)
(Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: pl)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: pl)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q p))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q pl)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p pl)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql pl))
(Abs (q ++ q) (merge pl q)), (Abs (q ++ q) (merge pl p)), (Abs (q ++ q) (merge pl ql)), (Abs (q ++ q) (merge pl pl)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a pl)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k p))
(Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k pl)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap pl)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ pl)), (Abs (q ++ q) (p ++ q))
(Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ pl)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ pl)), (Abs (q ++ q) (pl ++ q)), (Abs (q ++ q) (pl ++ p)), (Abs (q ++ q) (pl ++ ql))
(Abs (q ++ q) (pl ++ pl)), (Abs (q ++ q) []), (Abs (q ++ p) q), (Abs (q ++ p) p), (Abs (q ++ p) ql), (Abs (q ++ p) pl), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: pl))
(Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: pl)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q pl)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p pl)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql pl)), (Abs (q ++ p) (merge pl q)), (Abs (q ++ p) (merge pl p)), (Abs (q ++ p) (merge pl ql)), (Abs (q ++ p) (merge pl pl))
(Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a pl)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k pl)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap p))
(Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap pl)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ pl)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ pl)), (Abs (q ++ p) (ql ++ q))
(Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ pl)), (Abs (q ++ p) (pl ++ q)), (Abs (q ++ p) (pl ++ p)), (Abs (q ++ p) (pl ++ ql)), (Abs (q ++ p) (pl ++ pl)), (Abs (q ++ p) []), (Abs (q ++ ql) q), (Abs (q ++ ql) p)
(Abs (q ++ ql) ql), (Abs (q ++ ql) pl), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: pl)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: pl))
(Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q pl)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p pl)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql p))
(Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql pl)), (Abs (q ++ ql) (merge pl q)), (Abs (q ++ ql) (merge pl p)), (Abs (q ++ ql) (merge pl ql)), (Abs (q ++ ql) (merge pl pl)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a pl))
(Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k pl)), (Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap pl)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p))
(Abs (q ++ ql) (q ++ pl)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ pl)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ pl)), (Abs (q ++ ql) (pl ++ q))
(Abs (q ++ ql) (pl ++ p)), (Abs (q ++ ql) (pl ++ ql)), (Abs (q ++ ql) (pl ++ pl)), (Abs (q ++ ql) []), (Abs (q ++ pl) q), (Abs (q ++ pl) p), (Abs (q ++ pl) ql), (Abs (q ++ pl) pl), (Abs (q ++ pl) (a :: q)), (Abs (q ++ pl) (a :: p))
(Abs (q ++ pl) (a :: ql)), (Abs (q ++ pl) (a :: pl)), (Abs (q ++ pl) (k :: q)), (Abs (q ++ pl) (k :: p)), (Abs (q ++ pl) (k :: ql)), (Abs (q ++ pl) (k :: pl)), (Abs (q ++ pl) (merge q q)), (Abs (q ++ pl) (merge q p)), (Abs (q ++ pl) (merge q ql)), (Abs (q ++ pl) (merge q pl))
(Abs (q ++ pl) (merge p q)), (Abs (q ++ pl) (merge p p)), (Abs (q ++ pl) (merge p ql)), (Abs (q ++ pl) (merge p pl)), (Abs (q ++ pl) (merge ql q)), (Abs (q ++ pl) (merge ql p)), (Abs (q ++ pl) (merge ql ql)), (Abs (q ++ pl) (merge ql pl)), (Abs (q ++ pl) (merge pl q)), (Abs (q ++ pl) (merge pl p))
(Abs (q ++ pl) (merge pl ql)), (Abs (q ++ pl) (merge pl pl)), (Abs (q ++ pl) (insert a q)), (Abs (q ++ pl) (insert a p)), (Abs (q ++ pl) (insert a ql)), (Abs (q ++ pl) (insert a pl)), (Abs (q ++ pl) (insert k q)), (Abs (q ++ pl) (insert k p)), (Abs (q ++ pl) (insert k ql)), (Abs (q ++ pl) (insert k pl))
(Abs (q ++ pl) (maybe_swap q)), (Abs (q ++ pl) (maybe_swap p)), (Abs (q ++ pl) (maybe_swap ql)), (Abs (q ++ pl) (maybe_swap pl)), (Abs (q ++ pl) (q ++ q)), (Abs (q ++ pl) (q ++ p)), (Abs (q ++ pl) (q ++ ql)), (Abs (q ++ pl) (p ++ q)), (Abs (q ++ pl) (p ++ p)), (Abs (q ++ pl) (p ++ ql))
(Abs (q ++ pl) (p ++ pl)), (Abs (q ++ pl) (ql ++ q)), (Abs (q ++ pl) (ql ++ p)), (Abs (q ++ pl) (ql ++ ql)), (Abs (q ++ pl) (ql ++ pl)), (Abs (q ++ pl) (pl ++ q)), (Abs (q ++ pl) (pl ++ p)), (Abs (q ++ pl) (pl ++ ql)), (Abs (q ++ pl) (pl ++ pl)), (Abs (q ++ pl) [])
(Abs (p ++ q) q), (Abs (p ++ q) p), (Abs (p ++ q) ql), (Abs (p ++ q) pl), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: pl)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: pl)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q pl)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p pl))
(Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql pl)), (Abs (p ++ q) (merge pl q)), (Abs (p ++ q) (merge pl p)), (Abs (p ++ q) (merge pl ql)), (Abs (p ++ q) (merge pl pl)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a pl)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k pl)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap pl))
(Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ pl)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ pl)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (ql ++ ql))
(Abs (p ++ q) (ql ++ pl)), (Abs (p ++ q) (pl ++ q)), (Abs (p ++ q) (pl ++ p)), (Abs (p ++ q) (pl ++ ql)), (Abs (p ++ q) (pl ++ pl)), (Abs (p ++ q) []), (Abs (p ++ p) q), (Abs (p ++ p) p), (Abs (p ++ p) ql), (Abs (p ++ p) pl)
(Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: pl)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: pl)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q pl)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p pl)), (Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql pl))
(Abs (p ++ p) (merge pl q)), (Abs (p ++ p) (merge pl p)), (Abs (p ++ p) (merge pl ql)), (Abs (p ++ p) (merge pl pl)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a pl)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k p))
(Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k pl)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap pl)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ pl))
(Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ pl)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ pl)), (Abs (p ++ p) (pl ++ q)), (Abs (p ++ p) (pl ++ p)), (Abs (p ++ p) (pl ++ ql))
(Abs (p ++ p) (pl ++ pl)), (Abs (p ++ p) []), (Abs (p ++ ql) q), (Abs (p ++ ql) p), (Abs (p ++ ql) ql), (Abs (p ++ ql) pl), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: pl))
(Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: pl)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q pl)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p pl)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql pl)), (Abs (p ++ ql) (merge pl q)), (Abs (p ++ ql) (merge pl p)), (Abs (p ++ ql) (merge pl ql)), (Abs (p ++ ql) (merge pl pl))
(Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a pl)), (Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k pl)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap p))
(Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap pl)), (Abs (p ++ ql) (q ++ q)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ pl)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) (p ++ pl)), (Abs (p ++ ql) (ql ++ q))
(Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ pl)), (Abs (p ++ ql) (pl ++ q)), (Abs (p ++ ql) (pl ++ p)), (Abs (p ++ ql) (pl ++ ql)), (Abs (p ++ ql) (pl ++ pl)), (Abs (p ++ ql) []), (Abs (p ++ pl) q), (Abs (p ++ pl) p)
(Abs (p ++ pl) ql), (Abs (p ++ pl) pl), (Abs (p ++ pl) (a :: q)), (Abs (p ++ pl) (a :: p)), (Abs (p ++ pl) (a :: ql)), (Abs (p ++ pl) (a :: pl)), (Abs (p ++ pl) (k :: q)), (Abs (p ++ pl) (k :: p)), (Abs (p ++ pl) (k :: ql)), (Abs (p ++ pl) (k :: pl))
(Abs (p ++ pl) (merge q q)), (Abs (p ++ pl) (merge q p)), (Abs (p ++ pl) (merge q ql)), (Abs (p ++ pl) (merge q pl)), (Abs (p ++ pl) (merge p q)), (Abs (p ++ pl) (merge p p)), (Abs (p ++ pl) (merge p ql)), (Abs (p ++ pl) (merge p pl)), (Abs (p ++ pl) (merge ql q)), (Abs (p ++ pl) (merge ql p))
(Abs (p ++ pl) (merge ql ql)), (Abs (p ++ pl) (merge ql pl)), (Abs (p ++ pl) (merge pl q)), (Abs (p ++ pl) (merge pl p)), (Abs (p ++ pl) (merge pl ql)), (Abs (p ++ pl) (merge pl pl)), (Abs (p ++ pl) (insert a q)), (Abs (p ++ pl) (insert a p)), (Abs (p ++ pl) (insert a ql)), (Abs (p ++ pl) (insert a pl))
(Abs (p ++ pl) (insert k q)), (Abs (p ++ pl) (insert k p)), (Abs (p ++ pl) (insert k ql)), (Abs (p ++ pl) (insert k pl)), (Abs (p ++ pl) (maybe_swap q)), (Abs (p ++ pl) (maybe_swap p)), (Abs (p ++ pl) (maybe_swap ql)), (Abs (p ++ pl) (maybe_swap pl)), (Abs (p ++ pl) (q ++ q)), (Abs (p ++ pl) (q ++ p))
(Abs (p ++ pl) (q ++ ql)), (Abs (p ++ pl) (q ++ pl)), (Abs (p ++ pl) (p ++ q)), (Abs (p ++ pl) (p ++ p)), (Abs (p ++ pl) (p ++ ql)), (Abs (p ++ pl) (ql ++ q)), (Abs (p ++ pl) (ql ++ p)), (Abs (p ++ pl) (ql ++ ql)), (Abs (p ++ pl) (ql ++ pl)), (Abs (p ++ pl) (pl ++ q))
(Abs (p ++ pl) (pl ++ p)), (Abs (p ++ pl) (pl ++ ql)), (Abs (p ++ pl) (pl ++ pl)), (Abs (p ++ pl) []), (Abs (ql ++ q) q), (Abs (ql ++ q) p), (Abs (ql ++ q) ql), (Abs (ql ++ q) pl), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: p))
(Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: pl)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: pl)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q pl))
(Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p pl)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql pl)), (Abs (ql ++ q) (merge pl q)), (Abs (ql ++ q) (merge pl p))
(Abs (ql ++ q) (merge pl ql)), (Abs (ql ++ q) (merge pl pl)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a pl)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k pl))
(Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap pl)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ pl)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ p))
(Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ pl)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ pl)), (Abs (ql ++ q) (pl ++ q)), (Abs (ql ++ q) (pl ++ p)), (Abs (ql ++ q) (pl ++ ql)), (Abs (ql ++ q) (pl ++ pl)), (Abs (ql ++ q) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) p), (Abs (ql ++ p) ql), (Abs (ql ++ p) pl), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: pl)), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: p))
(Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: pl)), (Abs (ql ++ p) (merge q q)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q pl)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p pl))
(Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql pl)), (Abs (ql ++ p) (merge pl q)), (Abs (ql ++ p) (merge pl p)), (Abs (ql ++ p) (merge pl ql)), (Abs (ql ++ p) (merge pl pl)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a p))
(Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a pl)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k pl)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap pl))
(Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ p)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ pl)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ pl)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql))
(Abs (ql ++ p) (ql ++ pl)), (Abs (ql ++ p) (pl ++ q)), (Abs (ql ++ p) (pl ++ p)), (Abs (ql ++ p) (pl ++ ql)), (Abs (ql ++ p) (pl ++ pl)), (Abs (ql ++ p) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) p), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) pl)
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: pl)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: pl)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q p))
(Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q pl)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p pl)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql pl))
(Abs (ql ++ ql) (merge pl q)), (Abs (ql ++ ql) (merge pl p)), (Abs (ql ++ ql) (merge pl ql)), (Abs (ql ++ ql) (merge pl pl)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a pl)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k p))
(Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k pl)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap pl)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ pl))
(Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ pl)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (ql ++ pl)), (Abs (ql ++ ql) (pl ++ q)), (Abs (ql ++ ql) (pl ++ p)), (Abs (ql ++ ql) (pl ++ ql))
(Abs (ql ++ ql) (pl ++ pl)), (Abs (ql ++ ql) []), (Abs (ql ++ pl) q), (Abs (ql ++ pl) p), (Abs (ql ++ pl) ql), (Abs (ql ++ pl) pl), (Abs (ql ++ pl) (a :: q)), (Abs (ql ++ pl) (a :: p)), (Abs (ql ++ pl) (a :: ql)), (Abs (ql ++ pl) (a :: pl))
(Abs (ql ++ pl) (k :: q)), (Abs (ql ++ pl) (k :: p)), (Abs (ql ++ pl) (k :: ql)), (Abs (ql ++ pl) (k :: pl)), (Abs (ql ++ pl) (merge q q)), (Abs (ql ++ pl) (merge q p)), (Abs (ql ++ pl) (merge q ql)), (Abs (ql ++ pl) (merge q pl)), (Abs (ql ++ pl) (merge p q)), (Abs (ql ++ pl) (merge p p))
(Abs (ql ++ pl) (merge p ql)), (Abs (ql ++ pl) (merge p pl)), (Abs (ql ++ pl) (merge ql q)), (Abs (ql ++ pl) (merge ql p)), (Abs (ql ++ pl) (merge ql ql)), (Abs (ql ++ pl) (merge ql pl)), (Abs (ql ++ pl) (merge pl q)), (Abs (ql ++ pl) (merge pl p)), (Abs (ql ++ pl) (merge pl ql)), (Abs (ql ++ pl) (merge pl pl))
(Abs (ql ++ pl) (insert a q)), (Abs (ql ++ pl) (insert a p)), (Abs (ql ++ pl) (insert a ql)), (Abs (ql ++ pl) (insert a pl)), (Abs (ql ++ pl) (insert k q)), (Abs (ql ++ pl) (insert k p)), (Abs (ql ++ pl) (insert k ql)), (Abs (ql ++ pl) (insert k pl)), (Abs (ql ++ pl) (maybe_swap q)), (Abs (ql ++ pl) (maybe_swap p))
(Abs (ql ++ pl) (maybe_swap ql)), (Abs (ql ++ pl) (maybe_swap pl)), (Abs (ql ++ pl) (q ++ q)), (Abs (ql ++ pl) (q ++ p)), (Abs (ql ++ pl) (q ++ ql)), (Abs (ql ++ pl) (q ++ pl)), (Abs (ql ++ pl) (p ++ q)), (Abs (ql ++ pl) (p ++ p)), (Abs (ql ++ pl) (p ++ ql)), (Abs (ql ++ pl) (p ++ pl))
(Abs (ql ++ pl) (ql ++ q)), (Abs (ql ++ pl) (ql ++ p)), (Abs (ql ++ pl) (ql ++ ql)), (Abs (ql ++ pl) (pl ++ q)), (Abs (ql ++ pl) (pl ++ p)), (Abs (ql ++ pl) (pl ++ ql)), (Abs (ql ++ pl) (pl ++ pl)), (Abs (ql ++ pl) []), (Abs (pl ++ q) q), (Abs (pl ++ q) p)
(Abs (pl ++ q) ql), (Abs (pl ++ q) pl), (Abs (pl ++ q) (a :: q)), (Abs (pl ++ q) (a :: p)), (Abs (pl ++ q) (a :: ql)), (Abs (pl ++ q) (a :: pl)), (Abs (pl ++ q) (k :: q)), (Abs (pl ++ q) (k :: p)), (Abs (pl ++ q) (k :: ql)), (Abs (pl ++ q) (k :: pl))
(Abs (pl ++ q) (merge q q)), (Abs (pl ++ q) (merge q p)), (Abs (pl ++ q) (merge q ql)), (Abs (pl ++ q) (merge q pl)), (Abs (pl ++ q) (merge p q)), (Abs (pl ++ q) (merge p p)), (Abs (pl ++ q) (merge p ql)), (Abs (pl ++ q) (merge p pl)), (Abs (pl ++ q) (merge ql q)), (Abs (pl ++ q) (merge ql p))
(Abs (pl ++ q) (merge ql ql)), (Abs (pl ++ q) (merge ql pl)), (Abs (pl ++ q) (merge pl q)), (Abs (pl ++ q) (merge pl p)), (Abs (pl ++ q) (merge pl ql)), (Abs (pl ++ q) (merge pl pl)), (Abs (pl ++ q) (insert a q)), (Abs (pl ++ q) (insert a p)), (Abs (pl ++ q) (insert a ql)), (Abs (pl ++ q) (insert a pl))
(Abs (pl ++ q) (insert k q)), (Abs (pl ++ q) (insert k p)), (Abs (pl ++ q) (insert k ql)), (Abs (pl ++ q) (insert k pl)), (Abs (pl ++ q) (maybe_swap q)), (Abs (pl ++ q) (maybe_swap p)), (Abs (pl ++ q) (maybe_swap ql)), (Abs (pl ++ q) (maybe_swap pl)), (Abs (pl ++ q) (q ++ q)), (Abs (pl ++ q) (q ++ p))
(Abs (pl ++ q) (q ++ ql)), (Abs (pl ++ q) (q ++ pl)), (Abs (pl ++ q) (p ++ q)), (Abs (pl ++ q) (p ++ p)), (Abs (pl ++ q) (p ++ ql)), (Abs (pl ++ q) (p ++ pl)), (Abs (pl ++ q) (ql ++ q)), (Abs (pl ++ q) (ql ++ p)), (Abs (pl ++ q) (ql ++ ql)), (Abs (pl ++ q) (ql ++ pl))
(Abs (pl ++ q) (pl ++ p)), (Abs (pl ++ q) (pl ++ ql)), (Abs (pl ++ q) (pl ++ pl)), (Abs (pl ++ q) []), (Abs (pl ++ p) q), (Abs (pl ++ p) p), (Abs (pl ++ p) ql), (Abs (pl ++ p) pl), (Abs (pl ++ p) (a :: q)), (Abs (pl ++ p) (a :: p))
(Abs (pl ++ p) (a :: ql)), (Abs (pl ++ p) (a :: pl)), (Abs (pl ++ p) (k :: q)), (Abs (pl ++ p) (k :: p)), (Abs (pl ++ p) (k :: ql)), (Abs (pl ++ p) (k :: pl)), (Abs (pl ++ p) (merge q q)), (Abs (pl ++ p) (merge q p)), (Abs (pl ++ p) (merge q ql)), (Abs (pl ++ p) (merge q pl))
(Abs (pl ++ p) (merge p q)), (Abs (pl ++ p) (merge p p)), (Abs (pl ++ p) (merge p ql)), (Abs (pl ++ p) (merge p pl)), (Abs (pl ++ p) (merge ql q)), (Abs (pl ++ p) (merge ql p)), (Abs (pl ++ p) (merge ql ql)), (Abs (pl ++ p) (merge ql pl)), (Abs (pl ++ p) (merge pl q)), (Abs (pl ++ p) (merge pl p))
(Abs (pl ++ p) (merge pl ql)), (Abs (pl ++ p) (merge pl pl)), (Abs (pl ++ p) (insert a q)), (Abs (pl ++ p) (insert a p)), (Abs (pl ++ p) (insert a ql)), (Abs (pl ++ p) (insert a pl)), (Abs (pl ++ p) (insert k q)), (Abs (pl ++ p) (insert k p)), (Abs (pl ++ p) (insert k ql)), (Abs (pl ++ p) (insert k pl))
(Abs (pl ++ p) (maybe_swap q)), (Abs (pl ++ p) (maybe_swap p)), (Abs (pl ++ p) (maybe_swap ql)), (Abs (pl ++ p) (maybe_swap pl)), (Abs (pl ++ p) (q ++ q)), (Abs (pl ++ p) (q ++ p)), (Abs (pl ++ p) (q ++ ql)), (Abs (pl ++ p) (q ++ pl)), (Abs (pl ++ p) (p ++ q)), (Abs (pl ++ p) (p ++ p))
(Abs (pl ++ p) (p ++ ql)), (Abs (pl ++ p) (p ++ pl)), (Abs (pl ++ p) (ql ++ q)), (Abs (pl ++ p) (ql ++ p)), (Abs (pl ++ p) (ql ++ ql)), (Abs (pl ++ p) (ql ++ pl)), (Abs (pl ++ p) (pl ++ q)), (Abs (pl ++ p) (pl ++ ql)), (Abs (pl ++ p) (pl ++ pl)), (Abs (pl ++ p) [])
(Abs (pl ++ ql) q), (Abs (pl ++ ql) p), (Abs (pl ++ ql) ql), (Abs (pl ++ ql) pl), (Abs (pl ++ ql) (a :: q)), (Abs (pl ++ ql) (a :: p)), (Abs (pl ++ ql) (a :: ql)), (Abs (pl ++ ql) (a :: pl)), (Abs (pl ++ ql) (k :: q)), (Abs (pl ++ ql) (k :: p))
(Abs (pl ++ ql) (k :: ql)), (Abs (pl ++ ql) (k :: pl)), (Abs (pl ++ ql) (merge q q)), (Abs (pl ++ ql) (merge q p)), (Abs (pl ++ ql) (merge q ql)), (Abs (pl ++ ql) (merge q pl)), (Abs (pl ++ ql) (merge p q)), (Abs (pl ++ ql) (merge p p)), (Abs (pl ++ ql) (merge p ql)), (Abs (pl ++ ql) (merge p pl))
(Abs (pl ++ ql) (merge ql q)), (Abs (pl ++ ql) (merge ql p)), (Abs (pl ++ ql) (merge ql ql)), (Abs (pl ++ ql) (merge ql pl)), (Abs (pl ++ ql) (merge pl q)), (Abs (pl ++ ql) (merge pl p)), (Abs (pl ++ ql) (merge pl ql)), (Abs (pl ++ ql) (merge pl pl)), (Abs (pl ++ ql) (insert a q)), (Abs (pl ++ ql) (insert a p))
(Abs (pl ++ ql) (insert a ql)), (Abs (pl ++ ql) (insert a pl)), (Abs (pl ++ ql) (insert k q)), (Abs (pl ++ ql) (insert k p)), (Abs (pl ++ ql) (insert k ql)), (Abs (pl ++ ql) (insert k pl)), (Abs (pl ++ ql) (maybe_swap q)), (Abs (pl ++ ql) (maybe_swap p)), (Abs (pl ++ ql) (maybe_swap ql)), (Abs (pl ++ ql) (maybe_swap pl))
(Abs (pl ++ ql) (q ++ q)), (Abs (pl ++ ql) (q ++ p)), (Abs (pl ++ ql) (q ++ ql)), (Abs (pl ++ ql) (q ++ pl)), (Abs (pl ++ ql) (p ++ q)), (Abs (pl ++ ql) (p ++ p)), (Abs (pl ++ ql) (p ++ ql)), (Abs (pl ++ ql) (p ++ pl)), (Abs (pl ++ ql) (ql ++ q)), (Abs (pl ++ ql) (ql ++ p))
(Abs (pl ++ ql) (ql ++ ql)), (Abs (pl ++ ql) (ql ++ pl)), (Abs (pl ++ ql) (pl ++ q)), (Abs (pl ++ ql) (pl ++ p)), (Abs (pl ++ ql) (pl ++ pl)), (Abs (pl ++ ql) []), (Abs (pl ++ pl) q), (Abs (pl ++ pl) p), (Abs (pl ++ pl) ql), (Abs (pl ++ pl) pl)
(Abs (pl ++ pl) (a :: q)), (Abs (pl ++ pl) (a :: p)), (Abs (pl ++ pl) (a :: ql)), (Abs (pl ++ pl) (a :: pl)), (Abs (pl ++ pl) (k :: q)), (Abs (pl ++ pl) (k :: p)), (Abs (pl ++ pl) (k :: ql)), (Abs (pl ++ pl) (k :: pl)), (Abs (pl ++ pl) (merge q q)), (Abs (pl ++ pl) (merge q p))
(Abs (pl ++ pl) (merge q ql)), (Abs (pl ++ pl) (merge q pl)), (Abs (pl ++ pl) (merge p q)), (Abs (pl ++ pl) (merge p p)), (Abs (pl ++ pl) (merge p ql)), (Abs (pl ++ pl) (merge p pl)), (Abs (pl ++ pl) (merge ql q)), (Abs (pl ++ pl) (merge ql p)), (Abs (pl ++ pl) (merge ql ql)), (Abs (pl ++ pl) (merge ql pl))
(Abs (pl ++ pl) (merge pl q)), (Abs (pl ++ pl) (merge pl p)), (Abs (pl ++ pl) (merge pl ql)), (Abs (pl ++ pl) (merge pl pl)), (Abs (pl ++ pl) (insert a q)), (Abs (pl ++ pl) (insert a p)), (Abs (pl ++ pl) (insert a ql)), (Abs (pl ++ pl) (insert a pl)), (Abs (pl ++ pl) (insert k q)), (Abs (pl ++ pl) (insert k p))
(Abs (pl ++ pl) (insert k ql)), (Abs (pl ++ pl) (insert k pl)), (Abs (pl ++ pl) (maybe_swap q)), (Abs (pl ++ pl) (maybe_swap p)), (Abs (pl ++ pl) (maybe_swap ql)), (Abs (pl ++ pl) (maybe_swap pl)), (Abs (pl ++ pl) (q ++ q)), (Abs (pl ++ pl) (q ++ p)), (Abs (pl ++ pl) (q ++ ql)), (Abs (pl ++ pl) (q ++ pl))
(Abs (pl ++ pl) (p ++ q)), (Abs (pl ++ pl) (p ++ p)), (Abs (pl ++ pl) (p ++ ql)), (Abs (pl ++ pl) (p ++ pl)), (Abs (pl ++ pl) (ql ++ q)), (Abs (pl ++ pl) (ql ++ p)), (Abs (pl ++ pl) (ql ++ ql)), (Abs (pl ++ pl) (ql ++ pl)), (Abs (pl ++ pl) (pl ++ q)), (Abs (pl ++ pl) (pl ++ p))
(Abs (pl ++ pl) (pl ++ ql)), (Abs (pl ++ pl) []), (Abs [] q), (Abs [] p), (Abs [] ql), (Abs [] pl), (Abs [] (a :: q)), (Abs [] (a :: p)), (Abs [] (a :: ql)), (Abs [] (a :: pl))
(Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (k :: ql)), (Abs [] (k :: pl)), (Abs [] (merge q q)), (Abs [] (merge q p)), (Abs [] (merge q ql)), (Abs [] (merge q pl)), (Abs [] (merge p q)), (Abs [] (merge p p))
(Abs [] (merge p ql)), (Abs [] (merge p pl)), (Abs [] (merge ql q)), (Abs [] (merge ql p)), (Abs [] (merge ql ql)), (Abs [] (merge ql pl)), (Abs [] (merge pl q)), (Abs [] (merge pl p)), (Abs [] (merge pl ql)), (Abs [] (merge pl pl))
(Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (insert a ql)), (Abs [] (insert a pl)), (Abs [] (insert k q)), (Abs [] (insert k p)), (Abs [] (insert k ql)), (Abs [] (insert k pl)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap p))
(Abs [] (maybe_swap ql)), (Abs [] (maybe_swap pl)), (Abs [] (q ++ q)), (Abs [] (q ++ p)), (Abs [] (q ++ ql)), (Abs [] (q ++ pl)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (Abs [] (p ++ ql)), (Abs [] (p ++ pl))
(Abs [] (ql ++ q)), (Abs [] (ql ++ p)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ pl)), (Abs [] (pl ++ q)), (Abs [] (pl ++ p)), (Abs [] (pl ++ ql)), (Abs [] (pl ++ pl)), (priq (a :: q)), (priq (a :: p))
(priq (a :: ql)), (priq (a :: pl)), (priq (k :: q)), (priq (k :: p)), (priq (k :: ql)), (priq (k :: pl)), (priq (merge q q)), (priq (merge q p)), (priq (merge q ql)), (priq (merge q pl))
(priq (merge p q)), (priq (merge p p)), (priq (merge p ql)), (priq (merge p pl)), (priq (merge ql q)), (priq (merge ql p)), (priq (merge ql ql)), (priq (merge ql pl)), (priq (merge pl q)), (priq (merge pl p))
(priq (merge pl ql)), (priq (merge pl pl)), (priq (insert a q)), (priq (insert a p)), (priq (insert a ql)), (priq (insert a pl)), (priq (insert k q)), (priq (insert k p)), (priq (insert k ql)), (priq (insert k pl))
(priq (maybe_swap q)), (priq (maybe_swap p)), (priq (maybe_swap ql)), (priq (maybe_swap pl)), (priq (q ++ q)), (priq (q ++ p)), (priq (q ++ ql)), (priq (q ++ pl)), (priq (p ++ q)), (priq (p ++ p))
(priq (p ++ ql)), (priq (p ++ pl)), (priq (ql ++ q)), (priq (ql ++ p)), (priq (ql ++ ql)), (priq (ql ++ pl)), (priq (pl ++ q)), (priq (pl ++ p)), (priq (pl ++ ql)), (priq (pl ++ pl))
(priq []), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (a :: ql)), (Permutation q (a :: pl)), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (k :: ql)), (Permutation q (k :: pl)), (Permutation q (merge q q))
(Permutation q (merge q p)), (Permutation q (merge q ql)), (Permutation q (merge q pl)), (Permutation q (merge p q)), (Permutation q (merge p p)), (Permutation q (merge p ql)), (Permutation q (merge p pl)), (Permutation q (merge ql q)), (Permutation q (merge ql p)), (Permutation q (merge ql ql))
(Permutation q (merge ql pl)), (Permutation q (merge pl q)), (Permutation q (merge pl p)), (Permutation q (merge pl ql)), (Permutation q (merge pl pl)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (insert a ql)), (Permutation q (insert a pl)), (Permutation q (insert k q))
(Permutation q (insert k p)), (Permutation q (insert k ql)), (Permutation q (insert k pl)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap pl)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (q ++ ql))
(Permutation q (q ++ pl)), (Permutation q (p ++ q)), (Permutation q (p ++ p)), (Permutation q (p ++ ql)), (Permutation q (p ++ pl)), (Permutation q (ql ++ q)), (Permutation q (ql ++ p)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ pl)), (Permutation q (pl ++ q))
(Permutation q (pl ++ p)), (Permutation q (pl ++ ql)), (Permutation q (pl ++ pl)), (Permutation q []), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (a :: ql)), (Permutation p (a :: pl)), (Permutation p (k :: q)), (Permutation p (k :: p))
(Permutation p (k :: ql)), (Permutation p (k :: pl)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge q ql)), (Permutation p (merge q pl)), (Permutation p (merge p q)), (Permutation p (merge p p)), (Permutation p (merge p ql)), (Permutation p (merge p pl))
(Permutation p (merge ql q)), (Permutation p (merge ql p)), (Permutation p (merge ql ql)), (Permutation p (merge ql pl)), (Permutation p (merge pl q)), (Permutation p (merge pl p)), (Permutation p (merge pl ql)), (Permutation p (merge pl pl)), (Permutation p (insert a q)), (Permutation p (insert a p))
(Permutation p (insert a ql)), (Permutation p (insert a pl)), (Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert k ql)), (Permutation p (insert k pl)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap pl))
(Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (q ++ ql)), (Permutation p (q ++ pl)), (Permutation p (p ++ q)), (Permutation p (p ++ p)), (Permutation p (p ++ ql)), (Permutation p (p ++ pl)), (Permutation p (ql ++ q)), (Permutation p (ql ++ p))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ pl)), (Permutation p (pl ++ q)), (Permutation p (pl ++ p)), (Permutation p (pl ++ ql)), (Permutation p (pl ++ pl)), (Permutation p []), (Permutation ql (a :: q)), (Permutation ql (a :: p)), (Permutation ql (a :: ql))
(Permutation ql (a :: pl)), (Permutation ql (k :: q)), (Permutation ql (k :: p)), (Permutation ql (k :: ql)), (Permutation ql (k :: pl)), (Permutation ql (merge q q)), (Permutation ql (merge q p)), (Permutation ql (merge q ql)), (Permutation ql (merge q pl)), (Permutation ql (merge p q))
(Permutation ql (merge p p)), (Permutation ql (merge p ql)), (Permutation ql (merge p pl)), (Permutation ql (merge ql q)), (Permutation ql (merge ql p)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql pl)), (Permutation ql (merge pl q)), (Permutation ql (merge pl p)), (Permutation ql (merge pl ql))
(Permutation ql (merge pl pl)), (Permutation ql (insert a q)), (Permutation ql (insert a p)), (Permutation ql (insert a ql)), (Permutation ql (insert a pl)), (Permutation ql (insert k q)), (Permutation ql (insert k p)), (Permutation ql (insert k ql)), (Permutation ql (insert k pl)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap p)), (Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap pl)), (Permutation ql (q ++ q)), (Permutation ql (q ++ p)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ pl)), (Permutation ql (p ++ q)), (Permutation ql (p ++ p)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ pl)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ p)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ pl)), (Permutation ql (pl ++ q)), (Permutation ql (pl ++ p)), (Permutation ql (pl ++ ql)), (Permutation ql (pl ++ pl)), (Permutation ql [])
(Permutation pl (a :: q)), (Permutation pl (a :: p)), (Permutation pl (a :: ql)), (Permutation pl (a :: pl)), (Permutation pl (k :: q)), (Permutation pl (k :: p)), (Permutation pl (k :: ql)), (Permutation pl (k :: pl)), (Permutation pl (merge q q)), (Permutation pl (merge q p))
(Permutation pl (merge q ql)), (Permutation pl (merge q pl)), (Permutation pl (merge p q)), (Permutation pl (merge p p)), (Permutation pl (merge p ql)), (Permutation pl (merge p pl)), (Permutation pl (merge ql q)), (Permutation pl (merge ql p)), (Permutation pl (merge ql ql)), (Permutation pl (merge ql pl))
(Permutation pl (merge pl q)), (Permutation pl (merge pl p)), (Permutation pl (merge pl ql)), (Permutation pl (merge pl pl)), (Permutation pl (insert a q)), (Permutation pl (insert a p)), (Permutation pl (insert a ql)), (Permutation pl (insert a pl)), (Permutation pl (insert k q)), (Permutation pl (insert k p))
(Permutation pl (insert k ql)), (Permutation pl (insert k pl)), (Permutation pl (maybe_swap q)), (Permutation pl (maybe_swap p)), (Permutation pl (maybe_swap ql)), (Permutation pl (maybe_swap pl)), (Permutation pl (q ++ q)), (Permutation pl (q ++ p)), (Permutation pl (q ++ ql)), (Permutation pl (q ++ pl))
(Permutation pl (p ++ q)), (Permutation pl (p ++ p)), (Permutation pl (p ++ ql)), (Permutation pl (p ++ pl)), (Permutation pl (ql ++ q)), (Permutation pl (ql ++ p)), (Permutation pl (ql ++ ql)), (Permutation pl (ql ++ pl)), (Permutation pl (pl ++ q)), (Permutation pl (pl ++ p))
(Permutation pl (pl ++ ql)), (Permutation pl (pl ++ pl)), (Permutation pl []), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) ql), (Permutation (a :: q) pl), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: pl))
(Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: pl)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q pl)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p pl)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql pl)), (Permutation (a :: q) (merge pl q)), (Permutation (a :: q) (merge pl p)), (Permutation (a :: q) (merge pl ql)), (Permutation (a :: q) (merge pl pl))
(Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a pl)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k pl)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap pl)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ pl)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ pl))
(Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ pl)), (Permutation (a :: q) (pl ++ q)), (Permutation (a :: q) (pl ++ p)), (Permutation (a :: q) (pl ++ ql)), (Permutation (a :: q) (pl ++ pl)), (Permutation (a :: q) []), (Permutation (a :: p) q)
(Permutation (a :: p) p), (Permutation (a :: p) ql), (Permutation (a :: p) pl), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: pl)), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: pl))
(Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q pl)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p pl)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql pl)), (Permutation (a :: p) (merge pl q)), (Permutation (a :: p) (merge pl p)), (Permutation (a :: p) (merge pl ql)), (Permutation (a :: p) (merge pl pl)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a pl))
(Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k pl)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap pl)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p))
(Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ pl)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ pl)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ pl))
(Permutation (a :: p) (pl ++ q)), (Permutation (a :: p) (pl ++ p)), (Permutation (a :: p) (pl ++ ql)), (Permutation (a :: p) (pl ++ pl)), (Permutation (a :: p) []), (Permutation (a :: ql) q), (Permutation (a :: ql) p), (Permutation (a :: ql) ql), (Permutation (a :: ql) pl), (Permutation (a :: ql) (a :: q))
(Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (a :: pl)), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: pl)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q pl))
(Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p pl)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql pl)), (Permutation (a :: ql) (merge pl q)), (Permutation (a :: ql) (merge pl p))
(Permutation (a :: ql) (merge pl ql)), (Permutation (a :: ql) (merge pl pl)), (Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a pl)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k pl))
(Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap pl)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ pl)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ p))
(Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ pl)), (Permutation (a :: ql) (ql ++ q)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ pl)), (Permutation (a :: ql) (pl ++ q)), (Permutation (a :: ql) (pl ++ p)), (Permutation (a :: ql) (pl ++ ql)), (Permutation (a :: ql) (pl ++ pl))
(Permutation (a :: ql) []), (Permutation (a :: pl) q), (Permutation (a :: pl) p), (Permutation (a :: pl) ql), (Permutation (a :: pl) pl), (Permutation (a :: pl) (a :: q)), (Permutation (a :: pl) (a :: p)), (Permutation (a :: pl) (a :: ql)), (Permutation (a :: pl) (k :: q)), (Permutation (a :: pl) (k :: p))
(Permutation (a :: pl) (k :: ql)), (Permutation (a :: pl) (k :: pl)), (Permutation (a :: pl) (merge q q)), (Permutation (a :: pl) (merge q p)), (Permutation (a :: pl) (merge q ql)), (Permutation (a :: pl) (merge q pl)), (Permutation (a :: pl) (merge p q)), (Permutation (a :: pl) (merge p p)), (Permutation (a :: pl) (merge p ql)), (Permutation (a :: pl) (merge p pl))
(Permutation (a :: pl) (merge ql q)), (Permutation (a :: pl) (merge ql p)), (Permutation (a :: pl) (merge ql ql)), (Permutation (a :: pl) (merge ql pl)), (Permutation (a :: pl) (merge pl q)), (Permutation (a :: pl) (merge pl p)), (Permutation (a :: pl) (merge pl ql)), (Permutation (a :: pl) (merge pl pl)), (Permutation (a :: pl) (insert a q)), (Permutation (a :: pl) (insert a p))
(Permutation (a :: pl) (insert a ql)), (Permutation (a :: pl) (insert a pl)), (Permutation (a :: pl) (insert k q)), (Permutation (a :: pl) (insert k p)), (Permutation (a :: pl) (insert k ql)), (Permutation (a :: pl) (insert k pl)), (Permutation (a :: pl) (maybe_swap q)), (Permutation (a :: pl) (maybe_swap p)), (Permutation (a :: pl) (maybe_swap ql)), (Permutation (a :: pl) (maybe_swap pl))
(Permutation (a :: pl) (q ++ q)), (Permutation (a :: pl) (q ++ p)), (Permutation (a :: pl) (q ++ ql)), (Permutation (a :: pl) (q ++ pl)), (Permutation (a :: pl) (p ++ q)), (Permutation (a :: pl) (p ++ p)), (Permutation (a :: pl) (p ++ ql)), (Permutation (a :: pl) (p ++ pl)), (Permutation (a :: pl) (ql ++ q)), (Permutation (a :: pl) (ql ++ p))
(Permutation (a :: pl) (ql ++ ql)), (Permutation (a :: pl) (ql ++ pl)), (Permutation (a :: pl) (pl ++ q)), (Permutation (a :: pl) (pl ++ p)), (Permutation (a :: pl) (pl ++ ql)), (Permutation (a :: pl) (pl ++ pl)), (Permutation (a :: pl) []), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) ql)
(Permutation (k :: q) pl), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: pl)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: ql)), (Permutation (k :: q) (k :: pl)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p))
(Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q pl)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p pl)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql pl))
(Permutation (k :: q) (merge pl q)), (Permutation (k :: q) (merge pl p)), (Permutation (k :: q) (merge pl ql)), (Permutation (k :: q) (merge pl pl)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a pl)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p))
(Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k pl)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap pl)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ pl))
(Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ pl)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ pl)), (Permutation (k :: q) (pl ++ q)), (Permutation (k :: q) (pl ++ p))
(Permutation (k :: q) (pl ++ ql)), (Permutation (k :: q) (pl ++ pl)), (Permutation (k :: q) []), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) ql), (Permutation (k :: p) pl), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: ql))
(Permutation (k :: p) (a :: pl)), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (k :: pl)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q pl)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p p))
(Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p pl)), (Permutation (k :: p) (merge ql q)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql pl)), (Permutation (k :: p) (merge pl q)), (Permutation (k :: p) (merge pl p)), (Permutation (k :: p) (merge pl ql)), (Permutation (k :: p) (merge pl pl))
(Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a pl)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k pl)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p))
(Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap pl)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ pl)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ pl))
(Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ pl)), (Permutation (k :: p) (pl ++ q)), (Permutation (k :: p) (pl ++ p)), (Permutation (k :: p) (pl ++ ql)), (Permutation (k :: p) (pl ++ pl)), (Permutation (k :: p) []), (Permutation (k :: ql) q)
(Permutation (k :: ql) p), (Permutation (k :: ql) ql), (Permutation (k :: ql) pl), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: pl)), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (k :: pl))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q pl)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p pl)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql p))
(Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql pl)), (Permutation (k :: ql) (merge pl q)), (Permutation (k :: ql) (merge pl p)), (Permutation (k :: ql) (merge pl ql)), (Permutation (k :: ql) (merge pl pl)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a pl))
(Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k pl)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap pl)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ p))
(Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ pl)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ pl)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ pl))
(Permutation (k :: ql) (pl ++ q)), (Permutation (k :: ql) (pl ++ p)), (Permutation (k :: ql) (pl ++ ql)), (Permutation (k :: ql) (pl ++ pl)), (Permutation (k :: ql) []), (Permutation (k :: pl) q), (Permutation (k :: pl) p), (Permutation (k :: pl) ql), (Permutation (k :: pl) pl), (Permutation (k :: pl) (a :: q))
(Permutation (k :: pl) (a :: p)), (Permutation (k :: pl) (a :: ql)), (Permutation (k :: pl) (a :: pl)), (Permutation (k :: pl) (k :: q)), (Permutation (k :: pl) (k :: p)), (Permutation (k :: pl) (k :: ql)), (Permutation (k :: pl) (merge q q)), (Permutation (k :: pl) (merge q p)), (Permutation (k :: pl) (merge q ql)), (Permutation (k :: pl) (merge q pl))
(Permutation (k :: pl) (merge p q)), (Permutation (k :: pl) (merge p p)), (Permutation (k :: pl) (merge p ql)), (Permutation (k :: pl) (merge p pl)), (Permutation (k :: pl) (merge ql q)), (Permutation (k :: pl) (merge ql p)), (Permutation (k :: pl) (merge ql ql)), (Permutation (k :: pl) (merge ql pl)), (Permutation (k :: pl) (merge pl q)), (Permutation (k :: pl) (merge pl p))
(Permutation (k :: pl) (merge pl ql)), (Permutation (k :: pl) (merge pl pl)), (Permutation (k :: pl) (insert a q)), (Permutation (k :: pl) (insert a p)), (Permutation (k :: pl) (insert a ql)), (Permutation (k :: pl) (insert a pl)), (Permutation (k :: pl) (insert k q)), (Permutation (k :: pl) (insert k p)), (Permutation (k :: pl) (insert k ql)), (Permutation (k :: pl) (insert k pl))
(Permutation (k :: pl) (maybe_swap q)), (Permutation (k :: pl) (maybe_swap p)), (Permutation (k :: pl) (maybe_swap ql)), (Permutation (k :: pl) (maybe_swap pl)), (Permutation (k :: pl) (q ++ q)), (Permutation (k :: pl) (q ++ p)), (Permutation (k :: pl) (q ++ ql)), (Permutation (k :: pl) (q ++ pl)), (Permutation (k :: pl) (p ++ q)), (Permutation (k :: pl) (p ++ p))
(Permutation (k :: pl) (p ++ ql)), (Permutation (k :: pl) (p ++ pl)), (Permutation (k :: pl) (ql ++ q)), (Permutation (k :: pl) (ql ++ p)), (Permutation (k :: pl) (ql ++ ql)), (Permutation (k :: pl) (ql ++ pl)), (Permutation (k :: pl) (pl ++ q)), (Permutation (k :: pl) (pl ++ p)), (Permutation (k :: pl) (pl ++ ql)), (Permutation (k :: pl) (pl ++ pl))
(Permutation (k :: pl) []), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) ql), (Permutation (merge q q) pl), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (a :: ql)), (Permutation (merge q q) (a :: pl)), (Permutation (merge q q) (k :: q))
(Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: pl)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q pl)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p pl))
(Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql pl)), (Permutation (merge q q) (merge pl q)), (Permutation (merge q q) (merge pl p)), (Permutation (merge q q) (merge pl ql)), (Permutation (merge q q) (merge pl pl)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a p))
(Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a pl)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k pl)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap pl))
(Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ pl)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ pl)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ p))
(Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ pl)), (Permutation (merge q q) (pl ++ q)), (Permutation (merge q q) (pl ++ p)), (Permutation (merge q q) (pl ++ ql)), (Permutation (merge q q) (pl ++ pl)), (Permutation (merge q q) []), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) ql)
(Permutation (merge q p) pl), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: pl)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: pl)), (Permutation (merge q p) (merge q q))
(Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge q pl)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p p)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p pl)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql pl))
(Permutation (merge q p) (merge pl q)), (Permutation (merge q p) (merge pl p)), (Permutation (merge q p) (merge pl ql)), (Permutation (merge q p) (merge pl pl)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a pl)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p))
(Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k pl)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap pl)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ pl))
(Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ pl)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ pl)), (Permutation (merge q p) (pl ++ q)), (Permutation (merge q p) (pl ++ p))
(Permutation (merge q p) (pl ++ ql)), (Permutation (merge q p) (pl ++ pl)), (Permutation (merge q p) []), (Permutation (merge q ql) q), (Permutation (merge q ql) p), (Permutation (merge q ql) ql), (Permutation (merge q ql) pl), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (a :: ql))
(Permutation (merge q ql) (a :: pl)), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: pl)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge q pl)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p p))
(Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p pl)), (Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql pl)), (Permutation (merge q ql) (merge pl q)), (Permutation (merge q ql) (merge pl p)), (Permutation (merge q ql) (merge pl ql)), (Permutation (merge q ql) (merge pl pl))
(Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a pl)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k pl)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap p))
(Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap pl)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ pl)), (Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ pl))
(Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ pl)), (Permutation (merge q ql) (pl ++ q)), (Permutation (merge q ql) (pl ++ p)), (Permutation (merge q ql) (pl ++ ql)), (Permutation (merge q ql) (pl ++ pl)), (Permutation (merge q ql) []), (Permutation (merge q pl) q)
(Permutation (merge q pl) p), (Permutation (merge q pl) ql), (Permutation (merge q pl) pl), (Permutation (merge q pl) (a :: q)), (Permutation (merge q pl) (a :: p)), (Permutation (merge q pl) (a :: ql)), (Permutation (merge q pl) (a :: pl)), (Permutation (merge q pl) (k :: q)), (Permutation (merge q pl) (k :: p)), (Permutation (merge q pl) (k :: ql))
(Permutation (merge q pl) (k :: pl)), (Permutation (merge q pl) (merge q q)), (Permutation (merge q pl) (merge q p)), (Permutation (merge q pl) (merge q ql)), (Permutation (merge q pl) (merge p q)), (Permutation (merge q pl) (merge p p)), (Permutation (merge q pl) (merge p ql)), (Permutation (merge q pl) (merge p pl)), (Permutation (merge q pl) (merge ql q)), (Permutation (merge q pl) (merge ql p))
(Permutation (merge q pl) (merge ql ql)), (Permutation (merge q pl) (merge ql pl)), (Permutation (merge q pl) (merge pl q)), (Permutation (merge q pl) (merge pl p)), (Permutation (merge q pl) (merge pl ql)), (Permutation (merge q pl) (merge pl pl)), (Permutation (merge q pl) (insert a q)), (Permutation (merge q pl) (insert a p)), (Permutation (merge q pl) (insert a ql)), (Permutation (merge q pl) (insert a pl))
(Permutation (merge q pl) (insert k q)), (Permutation (merge q pl) (insert k p)), (Permutation (merge q pl) (insert k ql)), (Permutation (merge q pl) (insert k pl)), (Permutation (merge q pl) (maybe_swap q)), (Permutation (merge q pl) (maybe_swap p)), (Permutation (merge q pl) (maybe_swap ql)), (Permutation (merge q pl) (maybe_swap pl)), (Permutation (merge q pl) (q ++ q)), (Permutation (merge q pl) (q ++ p))
(Permutation (merge q pl) (q ++ ql)), (Permutation (merge q pl) (q ++ pl)), (Permutation (merge q pl) (p ++ q)), (Permutation (merge q pl) (p ++ p)), (Permutation (merge q pl) (p ++ ql)), (Permutation (merge q pl) (p ++ pl)), (Permutation (merge q pl) (ql ++ q)), (Permutation (merge q pl) (ql ++ p)), (Permutation (merge q pl) (ql ++ ql)), (Permutation (merge q pl) (ql ++ pl))
(Permutation (merge q pl) (pl ++ q)), (Permutation (merge q pl) (pl ++ p)), (Permutation (merge q pl) (pl ++ ql)), (Permutation (merge q pl) (pl ++ pl)), (Permutation (merge q pl) []), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) ql), (Permutation (merge p q) pl), (Permutation (merge p q) (a :: q))
(Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: pl)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: pl)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge q ql))
(Permutation (merge p q) (merge q pl)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p pl)), (Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql pl)), (Permutation (merge p q) (merge pl q)), (Permutation (merge p q) (merge pl p))
(Permutation (merge p q) (merge pl ql)), (Permutation (merge p q) (merge pl pl)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a pl)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k pl))
(Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap pl)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ pl)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ p))
(Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ pl)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ pl)), (Permutation (merge p q) (pl ++ q)), (Permutation (merge p q) (pl ++ p)), (Permutation (merge p q) (pl ++ ql)), (Permutation (merge p q) (pl ++ pl))
(Permutation (merge p q) []), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) ql), (Permutation (merge p p) pl), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: pl)), (Permutation (merge p p) (k :: q))
(Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: pl)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q pl)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (merge p pl))
(Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql pl)), (Permutation (merge p p) (merge pl q)), (Permutation (merge p p) (merge pl p)), (Permutation (merge p p) (merge pl ql)), (Permutation (merge p p) (merge pl pl)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a p))
(Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a pl)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k pl)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap pl))
(Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ pl)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ pl)), (Permutation (merge p p) (ql ++ q)), (Permutation (merge p p) (ql ++ p))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ pl)), (Permutation (merge p p) (pl ++ q)), (Permutation (merge p p) (pl ++ p)), (Permutation (merge p p) (pl ++ ql)), (Permutation (merge p p) (pl ++ pl)), (Permutation (merge p p) []), (Permutation (merge p ql) q), (Permutation (merge p ql) p), (Permutation (merge p ql) ql)
(Permutation (merge p ql) pl), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: pl)), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: pl)), (Permutation (merge p ql) (merge q q))
(Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q pl)), (Permutation (merge p ql) (merge p q)), (Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (merge p pl)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql pl))
(Permutation (merge p ql) (merge pl q)), (Permutation (merge p ql) (merge pl p)), (Permutation (merge p ql) (merge pl ql)), (Permutation (merge p ql) (merge pl pl)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a pl)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k p))
(Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k pl)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap pl)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ pl))
(Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ pl)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ pl)), (Permutation (merge p ql) (pl ++ q)), (Permutation (merge p ql) (pl ++ p))
(Permutation (merge p ql) (pl ++ ql)), (Permutation (merge p ql) (pl ++ pl)), (Permutation (merge p ql) []), (Permutation (merge p pl) q), (Permutation (merge p pl) p), (Permutation (merge p pl) ql), (Permutation (merge p pl) pl), (Permutation (merge p pl) (a :: q)), (Permutation (merge p pl) (a :: p)), (Permutation (merge p pl) (a :: ql))
(Permutation (merge p pl) (a :: pl)), (Permutation (merge p pl) (k :: q)), (Permutation (merge p pl) (k :: p)), (Permutation (merge p pl) (k :: ql)), (Permutation (merge p pl) (k :: pl)), (Permutation (merge p pl) (merge q q)), (Permutation (merge p pl) (merge q p)), (Permutation (merge p pl) (merge q ql)), (Permutation (merge p pl) (merge q pl)), (Permutation (merge p pl) (merge p q))
(Permutation (merge p pl) (merge p p)), (Permutation (merge p pl) (merge p ql)), (Permutation (merge p pl) (merge ql q)), (Permutation (merge p pl) (merge ql p)), (Permutation (merge p pl) (merge ql ql)), (Permutation (merge p pl) (merge ql pl)), (Permutation (merge p pl) (merge pl q)), (Permutation (merge p pl) (merge pl p)), (Permutation (merge p pl) (merge pl ql)), (Permutation (merge p pl) (merge pl pl))
(Permutation (merge p pl) (insert a q)), (Permutation (merge p pl) (insert a p)), (Permutation (merge p pl) (insert a ql)), (Permutation (merge p pl) (insert a pl)), (Permutation (merge p pl) (insert k q)), (Permutation (merge p pl) (insert k p)), (Permutation (merge p pl) (insert k ql)), (Permutation (merge p pl) (insert k pl)), (Permutation (merge p pl) (maybe_swap q)), (Permutation (merge p pl) (maybe_swap p))
(Permutation (merge p pl) (maybe_swap ql)), (Permutation (merge p pl) (maybe_swap pl)), (Permutation (merge p pl) (q ++ q)), (Permutation (merge p pl) (q ++ p)), (Permutation (merge p pl) (q ++ ql)), (Permutation (merge p pl) (q ++ pl)), (Permutation (merge p pl) (p ++ q)), (Permutation (merge p pl) (p ++ p)), (Permutation (merge p pl) (p ++ ql)), (Permutation (merge p pl) (p ++ pl))
(Permutation (merge p pl) (ql ++ q)), (Permutation (merge p pl) (ql ++ p)), (Permutation (merge p pl) (ql ++ ql)), (Permutation (merge p pl) (ql ++ pl)), (Permutation (merge p pl) (pl ++ q)), (Permutation (merge p pl) (pl ++ p)), (Permutation (merge p pl) (pl ++ ql)), (Permutation (merge p pl) (pl ++ pl)), (Permutation (merge p pl) []), (Permutation (merge ql q) q)
(Permutation (merge ql q) p), (Permutation (merge ql q) ql), (Permutation (merge ql q) pl), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: pl)), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (k :: ql))
(Permutation (merge ql q) (k :: pl)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q pl)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p pl)), (Permutation (merge ql q) (merge ql p))
(Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql pl)), (Permutation (merge ql q) (merge pl q)), (Permutation (merge ql q) (merge pl p)), (Permutation (merge ql q) (merge pl ql)), (Permutation (merge ql q) (merge pl pl)), (Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a pl))
(Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k pl)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap pl)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ p))
(Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ pl)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ pl)), (Permutation (merge ql q) (ql ++ q)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ pl))
(Permutation (merge ql q) (pl ++ q)), (Permutation (merge ql q) (pl ++ p)), (Permutation (merge ql q) (pl ++ ql)), (Permutation (merge ql q) (pl ++ pl)), (Permutation (merge ql q) []), (Permutation (merge ql p) q), (Permutation (merge ql p) p), (Permutation (merge ql p) ql), (Permutation (merge ql p) pl), (Permutation (merge ql p) (a :: q))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: pl)), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: pl)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge q ql))
(Permutation (merge ql p) (merge q pl)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p pl)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge ql pl)), (Permutation (merge ql p) (merge pl q)), (Permutation (merge ql p) (merge pl p))
(Permutation (merge ql p) (merge pl ql)), (Permutation (merge ql p) (merge pl pl)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a pl)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k pl))
(Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap pl)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ pl)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ p))
(Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ pl)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ pl)), (Permutation (merge ql p) (pl ++ q)), (Permutation (merge ql p) (pl ++ p)), (Permutation (merge ql p) (pl ++ ql)), (Permutation (merge ql p) (pl ++ pl))
(Permutation (merge ql p) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) p), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) pl), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: pl)), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: pl)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q pl)), (Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (merge p ql))
(Permutation (merge ql ql) (merge p pl)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge ql pl)), (Permutation (merge ql ql) (merge pl q)), (Permutation (merge ql ql) (merge pl p)), (Permutation (merge ql ql) (merge pl ql)), (Permutation (merge ql ql) (merge pl pl)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a p))
(Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a pl)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k pl)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap pl))
(Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ pl)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ pl)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ p))
(Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ pl)), (Permutation (merge ql ql) (pl ++ q)), (Permutation (merge ql ql) (pl ++ p)), (Permutation (merge ql ql) (pl ++ ql)), (Permutation (merge ql ql) (pl ++ pl)), (Permutation (merge ql ql) []), (Permutation (merge ql pl) q), (Permutation (merge ql pl) p), (Permutation (merge ql pl) ql)
(Permutation (merge ql pl) pl), (Permutation (merge ql pl) (a :: q)), (Permutation (merge ql pl) (a :: p)), (Permutation (merge ql pl) (a :: ql)), (Permutation (merge ql pl) (a :: pl)), (Permutation (merge ql pl) (k :: q)), (Permutation (merge ql pl) (k :: p)), (Permutation (merge ql pl) (k :: ql)), (Permutation (merge ql pl) (k :: pl)), (Permutation (merge ql pl) (merge q q))
(Permutation (merge ql pl) (merge q p)), (Permutation (merge ql pl) (merge q ql)), (Permutation (merge ql pl) (merge q pl)), (Permutation (merge ql pl) (merge p q)), (Permutation (merge ql pl) (merge p p)), (Permutation (merge ql pl) (merge p ql)), (Permutation (merge ql pl) (merge p pl)), (Permutation (merge ql pl) (merge ql q)), (Permutation (merge ql pl) (merge ql p)), (Permutation (merge ql pl) (merge ql ql))
(Permutation (merge ql pl) (merge pl q)), (Permutation (merge ql pl) (merge pl p)), (Permutation (merge ql pl) (merge pl ql)), (Permutation (merge ql pl) (merge pl pl)), (Permutation (merge ql pl) (insert a q)), (Permutation (merge ql pl) (insert a p)), (Permutation (merge ql pl) (insert a ql)), (Permutation (merge ql pl) (insert a pl)), (Permutation (merge ql pl) (insert k q)), (Permutation (merge ql pl) (insert k p))
(Permutation (merge ql pl) (insert k ql)), (Permutation (merge ql pl) (insert k pl)), (Permutation (merge ql pl) (maybe_swap q)), (Permutation (merge ql pl) (maybe_swap p)), (Permutation (merge ql pl) (maybe_swap ql)), (Permutation (merge ql pl) (maybe_swap pl)), (Permutation (merge ql pl) (q ++ q)), (Permutation (merge ql pl) (q ++ p)), (Permutation (merge ql pl) (q ++ ql)), (Permutation (merge ql pl) (q ++ pl))
(Permutation (merge ql pl) (p ++ q)), (Permutation (merge ql pl) (p ++ p)), (Permutation (merge ql pl) (p ++ ql)), (Permutation (merge ql pl) (p ++ pl)), (Permutation (merge ql pl) (ql ++ q)), (Permutation (merge ql pl) (ql ++ p)), (Permutation (merge ql pl) (ql ++ ql)), (Permutation (merge ql pl) (ql ++ pl)), (Permutation (merge ql pl) (pl ++ q)), (Permutation (merge ql pl) (pl ++ p))
(Permutation (merge ql pl) (pl ++ ql)), (Permutation (merge ql pl) (pl ++ pl)), (Permutation (merge ql pl) []), (Permutation (merge pl q) q), (Permutation (merge pl q) p), (Permutation (merge pl q) ql), (Permutation (merge pl q) pl), (Permutation (merge pl q) (a :: q)), (Permutation (merge pl q) (a :: p)), (Permutation (merge pl q) (a :: ql))
(Permutation (merge pl q) (a :: pl)), (Permutation (merge pl q) (k :: q)), (Permutation (merge pl q) (k :: p)), (Permutation (merge pl q) (k :: ql)), (Permutation (merge pl q) (k :: pl)), (Permutation (merge pl q) (merge q q)), (Permutation (merge pl q) (merge q p)), (Permutation (merge pl q) (merge q ql)), (Permutation (merge pl q) (merge q pl)), (Permutation (merge pl q) (merge p q))
(Permutation (merge pl q) (merge p p)), (Permutation (merge pl q) (merge p ql)), (Permutation (merge pl q) (merge p pl)), (Permutation (merge pl q) (merge ql q)), (Permutation (merge pl q) (merge ql p)), (Permutation (merge pl q) (merge ql ql)), (Permutation (merge pl q) (merge ql pl)), (Permutation (merge pl q) (merge pl p)), (Permutation (merge pl q) (merge pl ql)), (Permutation (merge pl q) (merge pl pl))
(Permutation (merge pl q) (insert a q)), (Permutation (merge pl q) (insert a p)), (Permutation (merge pl q) (insert a ql)), (Permutation (merge pl q) (insert a pl)), (Permutation (merge pl q) (insert k q)), (Permutation (merge pl q) (insert k p)), (Permutation (merge pl q) (insert k ql)), (Permutation (merge pl q) (insert k pl)), (Permutation (merge pl q) (maybe_swap q)), (Permutation (merge pl q) (maybe_swap p))
(Permutation (merge pl q) (maybe_swap ql)), (Permutation (merge pl q) (maybe_swap pl)), (Permutation (merge pl q) (q ++ q)), (Permutation (merge pl q) (q ++ p)), (Permutation (merge pl q) (q ++ ql)), (Permutation (merge pl q) (q ++ pl)), (Permutation (merge pl q) (p ++ q)), (Permutation (merge pl q) (p ++ p)), (Permutation (merge pl q) (p ++ ql)), (Permutation (merge pl q) (p ++ pl))
(Permutation (merge pl q) (ql ++ q)), (Permutation (merge pl q) (ql ++ p)), (Permutation (merge pl q) (ql ++ ql)), (Permutation (merge pl q) (ql ++ pl)), (Permutation (merge pl q) (pl ++ q)), (Permutation (merge pl q) (pl ++ p)), (Permutation (merge pl q) (pl ++ ql)), (Permutation (merge pl q) (pl ++ pl)), (Permutation (merge pl q) []), (Permutation (merge pl p) q)
(Permutation (merge pl p) p), (Permutation (merge pl p) ql), (Permutation (merge pl p) pl), (Permutation (merge pl p) (a :: q)), (Permutation (merge pl p) (a :: p)), (Permutation (merge pl p) (a :: ql)), (Permutation (merge pl p) (a :: pl)), (Permutation (merge pl p) (k :: q)), (Permutation (merge pl p) (k :: p)), (Permutation (merge pl p) (k :: ql))
(Permutation (merge pl p) (k :: pl)), (Permutation (merge pl p) (merge q q)), (Permutation (merge pl p) (merge q p)), (Permutation (merge pl p) (merge q ql)), (Permutation (merge pl p) (merge q pl)), (Permutation (merge pl p) (merge p q)), (Permutation (merge pl p) (merge p p)), (Permutation (merge pl p) (merge p ql)), (Permutation (merge pl p) (merge p pl)), (Permutation (merge pl p) (merge ql q))
(Permutation (merge pl p) (merge ql p)), (Permutation (merge pl p) (merge ql ql)), (Permutation (merge pl p) (merge ql pl)), (Permutation (merge pl p) (merge pl q)), (Permutation (merge pl p) (merge pl ql)), (Permutation (merge pl p) (merge pl pl)), (Permutation (merge pl p) (insert a q)), (Permutation (merge pl p) (insert a p)), (Permutation (merge pl p) (insert a ql)), (Permutation (merge pl p) (insert a pl))
(Permutation (merge pl p) (insert k q)), (Permutation (merge pl p) (insert k p)), (Permutation (merge pl p) (insert k ql)), (Permutation (merge pl p) (insert k pl)), (Permutation (merge pl p) (maybe_swap q)), (Permutation (merge pl p) (maybe_swap p)), (Permutation (merge pl p) (maybe_swap ql)), (Permutation (merge pl p) (maybe_swap pl)), (Permutation (merge pl p) (q ++ q)), (Permutation (merge pl p) (q ++ p))
(Permutation (merge pl p) (q ++ ql)), (Permutation (merge pl p) (q ++ pl)), (Permutation (merge pl p) (p ++ q)), (Permutation (merge pl p) (p ++ p)), (Permutation (merge pl p) (p ++ ql)), (Permutation (merge pl p) (p ++ pl)), (Permutation (merge pl p) (ql ++ q)), (Permutation (merge pl p) (ql ++ p)), (Permutation (merge pl p) (ql ++ ql)), (Permutation (merge pl p) (ql ++ pl))
(Permutation (merge pl p) (pl ++ q)), (Permutation (merge pl p) (pl ++ p)), (Permutation (merge pl p) (pl ++ ql)), (Permutation (merge pl p) (pl ++ pl)), (Permutation (merge pl p) []), (Permutation (merge pl ql) q), (Permutation (merge pl ql) p), (Permutation (merge pl ql) ql), (Permutation (merge pl ql) pl), (Permutation (merge pl ql) (a :: q))
(Permutation (merge pl ql) (a :: p)), (Permutation (merge pl ql) (a :: ql)), (Permutation (merge pl ql) (a :: pl)), (Permutation (merge pl ql) (k :: q)), (Permutation (merge pl ql) (k :: p)), (Permutation (merge pl ql) (k :: ql)), (Permutation (merge pl ql) (k :: pl)), (Permutation (merge pl ql) (merge q q)), (Permutation (merge pl ql) (merge q p)), (Permutation (merge pl ql) (merge q ql))
(Permutation (merge pl ql) (merge q pl)), (Permutation (merge pl ql) (merge p q)), (Permutation (merge pl ql) (merge p p)), (Permutation (merge pl ql) (merge p ql)), (Permutation (merge pl ql) (merge p pl)), (Permutation (merge pl ql) (merge ql q)), (Permutation (merge pl ql) (merge ql p)), (Permutation (merge pl ql) (merge ql ql)), (Permutation (merge pl ql) (merge ql pl)), (Permutation (merge pl ql) (merge pl q))
(Permutation (merge pl ql) (merge pl p)), (Permutation (merge pl ql) (merge pl pl)), (Permutation (merge pl ql) (insert a q)), (Permutation (merge pl ql) (insert a p)), (Permutation (merge pl ql) (insert a ql)), (Permutation (merge pl ql) (insert a pl)), (Permutation (merge pl ql) (insert k q)), (Permutation (merge pl ql) (insert k p)), (Permutation (merge pl ql) (insert k ql)), (Permutation (merge pl ql) (insert k pl))
(Permutation (merge pl ql) (maybe_swap q)), (Permutation (merge pl ql) (maybe_swap p)), (Permutation (merge pl ql) (maybe_swap ql)), (Permutation (merge pl ql) (maybe_swap pl)), (Permutation (merge pl ql) (q ++ q)), (Permutation (merge pl ql) (q ++ p)), (Permutation (merge pl ql) (q ++ ql)), (Permutation (merge pl ql) (q ++ pl)), (Permutation (merge pl ql) (p ++ q)), (Permutation (merge pl ql) (p ++ p))
(Permutation (merge pl ql) (p ++ ql)), (Permutation (merge pl ql) (p ++ pl)), (Permutation (merge pl ql) (ql ++ q)), (Permutation (merge pl ql) (ql ++ p)), (Permutation (merge pl ql) (ql ++ ql)), (Permutation (merge pl ql) (ql ++ pl)), (Permutation (merge pl ql) (pl ++ q)), (Permutation (merge pl ql) (pl ++ p)), (Permutation (merge pl ql) (pl ++ ql)), (Permutation (merge pl ql) (pl ++ pl))
(Permutation (merge pl ql) []), (Permutation (merge pl pl) q), (Permutation (merge pl pl) p), (Permutation (merge pl pl) ql), (Permutation (merge pl pl) pl), (Permutation (merge pl pl) (a :: q)), (Permutation (merge pl pl) (a :: p)), (Permutation (merge pl pl) (a :: ql)), (Permutation (merge pl pl) (a :: pl)), (Permutation (merge pl pl) (k :: q))
(Permutation (merge pl pl) (k :: p)), (Permutation (merge pl pl) (k :: ql)), (Permutation (merge pl pl) (k :: pl)), (Permutation (merge pl pl) (merge q q)), (Permutation (merge pl pl) (merge q p)), (Permutation (merge pl pl) (merge q ql)), (Permutation (merge pl pl) (merge q pl)), (Permutation (merge pl pl) (merge p q)), (Permutation (merge pl pl) (merge p p)), (Permutation (merge pl pl) (merge p ql))
(Permutation (merge pl pl) (merge p pl)), (Permutation (merge pl pl) (merge ql q)), (Permutation (merge pl pl) (merge ql p)), (Permutation (merge pl pl) (merge ql ql)), (Permutation (merge pl pl) (merge ql pl)), (Permutation (merge pl pl) (merge pl q)), (Permutation (merge pl pl) (merge pl p)), (Permutation (merge pl pl) (merge pl ql)), (Permutation (merge pl pl) (insert a q)), (Permutation (merge pl pl) (insert a p))
(Permutation (merge pl pl) (insert a ql)), (Permutation (merge pl pl) (insert a pl)), (Permutation (merge pl pl) (insert k q)), (Permutation (merge pl pl) (insert k p)), (Permutation (merge pl pl) (insert k ql)), (Permutation (merge pl pl) (insert k pl)), (Permutation (merge pl pl) (maybe_swap q)), (Permutation (merge pl pl) (maybe_swap p)), (Permutation (merge pl pl) (maybe_swap ql)), (Permutation (merge pl pl) (maybe_swap pl))
(Permutation (merge pl pl) (q ++ q)), (Permutation (merge pl pl) (q ++ p)), (Permutation (merge pl pl) (q ++ ql)), (Permutation (merge pl pl) (q ++ pl)), (Permutation (merge pl pl) (p ++ q)), (Permutation (merge pl pl) (p ++ p)), (Permutation (merge pl pl) (p ++ ql)), (Permutation (merge pl pl) (p ++ pl)), (Permutation (merge pl pl) (ql ++ q)), (Permutation (merge pl pl) (ql ++ p))
(Permutation (merge pl pl) (ql ++ ql)), (Permutation (merge pl pl) (ql ++ pl)), (Permutation (merge pl pl) (pl ++ q)), (Permutation (merge pl pl) (pl ++ p)), (Permutation (merge pl pl) (pl ++ ql)), (Permutation (merge pl pl) (pl ++ pl)), (Permutation (merge pl pl) []), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) ql)
(Permutation (insert a q) pl), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: pl)), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: pl)), (Permutation (insert a q) (merge q q))
(Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q pl)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p pl)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql pl)), (Permutation (insert a q) (merge pl q)), (Permutation (insert a q) (merge pl p)), (Permutation (insert a q) (merge pl ql)), (Permutation (insert a q) (merge pl pl)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a pl)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p))
(Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k pl)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap pl)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ pl))
(Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ pl)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ pl)), (Permutation (insert a q) (pl ++ q)), (Permutation (insert a q) (pl ++ p))
(Permutation (insert a q) (pl ++ ql)), (Permutation (insert a q) (pl ++ pl)), (Permutation (insert a q) []), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) ql), (Permutation (insert a p) pl), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (a :: ql))
(Permutation (insert a p) (a :: pl)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: pl)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q pl)), (Permutation (insert a p) (merge p q))
(Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p pl)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge ql ql)), (Permutation (insert a p) (merge ql pl)), (Permutation (insert a p) (merge pl q)), (Permutation (insert a p) (merge pl p)), (Permutation (insert a p) (merge pl ql))
(Permutation (insert a p) (merge pl pl)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (insert a pl)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k pl)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap pl)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ pl)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ pl))
(Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ pl)), (Permutation (insert a p) (pl ++ q)), (Permutation (insert a p) (pl ++ p)), (Permutation (insert a p) (pl ++ ql)), (Permutation (insert a p) (pl ++ pl)), (Permutation (insert a p) []), (Permutation (insert a ql) q)
(Permutation (insert a ql) p), (Permutation (insert a ql) ql), (Permutation (insert a ql) pl), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: pl)), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (k :: ql))
(Permutation (insert a ql) (k :: pl)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q pl)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p pl)), (Permutation (insert a ql) (merge ql q))
(Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql pl)), (Permutation (insert a ql) (merge pl q)), (Permutation (insert a ql) (merge pl p)), (Permutation (insert a ql) (merge pl ql)), (Permutation (insert a ql) (merge pl pl)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (insert a pl))
(Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert k ql)), (Permutation (insert a ql) (insert k pl)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap pl)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ p))
(Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ pl)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ pl)), (Permutation (insert a ql) (ql ++ q)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ pl))
(Permutation (insert a ql) (pl ++ q)), (Permutation (insert a ql) (pl ++ p)), (Permutation (insert a ql) (pl ++ ql)), (Permutation (insert a ql) (pl ++ pl)), (Permutation (insert a ql) []), (Permutation (insert a pl) q), (Permutation (insert a pl) p), (Permutation (insert a pl) ql), (Permutation (insert a pl) pl), (Permutation (insert a pl) (a :: q))
(Permutation (insert a pl) (a :: p)), (Permutation (insert a pl) (a :: ql)), (Permutation (insert a pl) (a :: pl)), (Permutation (insert a pl) (k :: q)), (Permutation (insert a pl) (k :: p)), (Permutation (insert a pl) (k :: ql)), (Permutation (insert a pl) (k :: pl)), (Permutation (insert a pl) (merge q q)), (Permutation (insert a pl) (merge q p)), (Permutation (insert a pl) (merge q ql))
(Permutation (insert a pl) (merge q pl)), (Permutation (insert a pl) (merge p q)), (Permutation (insert a pl) (merge p p)), (Permutation (insert a pl) (merge p ql)), (Permutation (insert a pl) (merge p pl)), (Permutation (insert a pl) (merge ql q)), (Permutation (insert a pl) (merge ql p)), (Permutation (insert a pl) (merge ql ql)), (Permutation (insert a pl) (merge ql pl)), (Permutation (insert a pl) (merge pl q))
(Permutation (insert a pl) (merge pl p)), (Permutation (insert a pl) (merge pl ql)), (Permutation (insert a pl) (merge pl pl)), (Permutation (insert a pl) (insert a q)), (Permutation (insert a pl) (insert a p)), (Permutation (insert a pl) (insert a ql)), (Permutation (insert a pl) (insert k q)), (Permutation (insert a pl) (insert k p)), (Permutation (insert a pl) (insert k ql)), (Permutation (insert a pl) (insert k pl))
(Permutation (insert a pl) (maybe_swap q)), (Permutation (insert a pl) (maybe_swap p)), (Permutation (insert a pl) (maybe_swap ql)), (Permutation (insert a pl) (maybe_swap pl)), (Permutation (insert a pl) (q ++ q)), (Permutation (insert a pl) (q ++ p)), (Permutation (insert a pl) (q ++ ql)), (Permutation (insert a pl) (q ++ pl)), (Permutation (insert a pl) (p ++ q)), (Permutation (insert a pl) (p ++ p))
(Permutation (insert a pl) (p ++ ql)), (Permutation (insert a pl) (p ++ pl)), (Permutation (insert a pl) (ql ++ q)), (Permutation (insert a pl) (ql ++ p)), (Permutation (insert a pl) (ql ++ ql)), (Permutation (insert a pl) (ql ++ pl)), (Permutation (insert a pl) (pl ++ q)), (Permutation (insert a pl) (pl ++ p)), (Permutation (insert a pl) (pl ++ ql)), (Permutation (insert a pl) (pl ++ pl))
(Permutation (insert a pl) []), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) ql), (Permutation (insert k q) pl), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: pl)), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: pl)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q pl)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (merge p ql))
(Permutation (insert k q) (merge p pl)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge ql ql)), (Permutation (insert k q) (merge ql pl)), (Permutation (insert k q) (merge pl q)), (Permutation (insert k q) (merge pl p)), (Permutation (insert k q) (merge pl ql)), (Permutation (insert k q) (merge pl pl)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a pl)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k pl)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap pl))
(Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ pl)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ pl)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ p))
(Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ pl)), (Permutation (insert k q) (pl ++ q)), (Permutation (insert k q) (pl ++ p)), (Permutation (insert k q) (pl ++ ql)), (Permutation (insert k q) (pl ++ pl)), (Permutation (insert k q) []), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) ql)
(Permutation (insert k p) pl), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: pl)), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: pl)), (Permutation (insert k p) (merge q q))
(Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q pl)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p pl)), (Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge ql ql))
(Permutation (insert k p) (merge ql pl)), (Permutation (insert k p) (merge pl q)), (Permutation (insert k p) (merge pl p)), (Permutation (insert k p) (merge pl ql)), (Permutation (insert k p) (merge pl pl)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a pl)), (Permutation (insert k p) (insert k q))
(Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k pl)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap pl)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ pl))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ pl)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ pl)), (Permutation (insert k p) (pl ++ q)), (Permutation (insert k p) (pl ++ p))
(Permutation (insert k p) (pl ++ ql)), (Permutation (insert k p) (pl ++ pl)), (Permutation (insert k p) []), (Permutation (insert k ql) q), (Permutation (insert k ql) p), (Permutation (insert k ql) ql), (Permutation (insert k ql) pl), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: pl)), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: pl)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q pl)), (Permutation (insert k ql) (merge p q))
(Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p pl)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql pl)), (Permutation (insert k ql) (merge pl q)), (Permutation (insert k ql) (merge pl p)), (Permutation (insert k ql) (merge pl ql))
(Permutation (insert k ql) (merge pl pl)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a pl)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert k pl)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap p))
(Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap pl)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ pl)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ pl))
(Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ pl)), (Permutation (insert k ql) (pl ++ q)), (Permutation (insert k ql) (pl ++ p)), (Permutation (insert k ql) (pl ++ ql)), (Permutation (insert k ql) (pl ++ pl)), (Permutation (insert k ql) []), (Permutation (insert k pl) q)
(Permutation (insert k pl) p), (Permutation (insert k pl) ql), (Permutation (insert k pl) pl), (Permutation (insert k pl) (a :: q)), (Permutation (insert k pl) (a :: p)), (Permutation (insert k pl) (a :: ql)), (Permutation (insert k pl) (a :: pl)), (Permutation (insert k pl) (k :: q)), (Permutation (insert k pl) (k :: p)), (Permutation (insert k pl) (k :: ql))
(Permutation (insert k pl) (k :: pl)), (Permutation (insert k pl) (merge q q)), (Permutation (insert k pl) (merge q p)), (Permutation (insert k pl) (merge q ql)), (Permutation (insert k pl) (merge q pl)), (Permutation (insert k pl) (merge p q)), (Permutation (insert k pl) (merge p p)), (Permutation (insert k pl) (merge p ql)), (Permutation (insert k pl) (merge p pl)), (Permutation (insert k pl) (merge ql q))
(Permutation (insert k pl) (merge ql p)), (Permutation (insert k pl) (merge ql ql)), (Permutation (insert k pl) (merge ql pl)), (Permutation (insert k pl) (merge pl q)), (Permutation (insert k pl) (merge pl p)), (Permutation (insert k pl) (merge pl ql)), (Permutation (insert k pl) (merge pl pl)), (Permutation (insert k pl) (insert a q)), (Permutation (insert k pl) (insert a p)), (Permutation (insert k pl) (insert a ql))
(Permutation (insert k pl) (insert a pl)), (Permutation (insert k pl) (insert k q)), (Permutation (insert k pl) (insert k p)), (Permutation (insert k pl) (insert k ql)), (Permutation (insert k pl) (maybe_swap q)), (Permutation (insert k pl) (maybe_swap p)), (Permutation (insert k pl) (maybe_swap ql)), (Permutation (insert k pl) (maybe_swap pl)), (Permutation (insert k pl) (q ++ q)), (Permutation (insert k pl) (q ++ p))
(Permutation (insert k pl) (q ++ ql)), (Permutation (insert k pl) (q ++ pl)), (Permutation (insert k pl) (p ++ q)), (Permutation (insert k pl) (p ++ p)), (Permutation (insert k pl) (p ++ ql)), (Permutation (insert k pl) (p ++ pl)), (Permutation (insert k pl) (ql ++ q)), (Permutation (insert k pl) (ql ++ p)), (Permutation (insert k pl) (ql ++ ql)), (Permutation (insert k pl) (ql ++ pl))
(Permutation (insert k pl) (pl ++ q)), (Permutation (insert k pl) (pl ++ p)), (Permutation (insert k pl) (pl ++ ql)), (Permutation (insert k pl) (pl ++ pl)), (Permutation (insert k pl) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) pl), (Permutation (maybe_swap q) (a :: q))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: ql)), (Permutation (maybe_swap q) (a :: pl)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: pl)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q ql))
(Permutation (maybe_swap q) (merge q pl)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p pl)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql pl)), (Permutation (maybe_swap q) (merge pl q))
(Permutation (maybe_swap q) (merge pl p)), (Permutation (maybe_swap q) (merge pl ql)), (Permutation (maybe_swap q) (merge pl pl)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a pl)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert k ql))
(Permutation (maybe_swap q) (insert k pl)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap pl)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ pl)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ p))
(Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ pl)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ pl)), (Permutation (maybe_swap q) (pl ++ q)), (Permutation (maybe_swap q) (pl ++ p)), (Permutation (maybe_swap q) (pl ++ ql)), (Permutation (maybe_swap q) (pl ++ pl))
(Permutation (maybe_swap q) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) pl), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: pl)), (Permutation (maybe_swap p) (k :: q))
(Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: pl)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q pl)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p ql))
(Permutation (maybe_swap p) (merge p pl)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql pl)), (Permutation (maybe_swap p) (merge pl q)), (Permutation (maybe_swap p) (merge pl p)), (Permutation (maybe_swap p) (merge pl ql)), (Permutation (maybe_swap p) (merge pl pl)), (Permutation (maybe_swap p) (insert a q))
(Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a pl)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k pl)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql)), (Permutation (maybe_swap p) (maybe_swap pl))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ pl)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ pl)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ p))
(Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ pl)), (Permutation (maybe_swap p) (pl ++ q)), (Permutation (maybe_swap p) (pl ++ p)), (Permutation (maybe_swap p) (pl ++ ql)), (Permutation (maybe_swap p) (pl ++ pl)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) pl), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: pl)), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: pl)), (Permutation (maybe_swap ql) (merge q q))
(Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q pl)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p pl)), (Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge ql ql))
(Permutation (maybe_swap ql) (merge ql pl)), (Permutation (maybe_swap ql) (merge pl q)), (Permutation (maybe_swap ql) (merge pl p)), (Permutation (maybe_swap ql) (merge pl ql)), (Permutation (maybe_swap ql) (merge pl pl)), (Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a pl)), (Permutation (maybe_swap ql) (insert k q))
(Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k pl)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (maybe_swap pl)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ pl))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ pl)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ pl)), (Permutation (maybe_swap ql) (pl ++ q)), (Permutation (maybe_swap ql) (pl ++ p))
(Permutation (maybe_swap ql) (pl ++ ql)), (Permutation (maybe_swap ql) (pl ++ pl)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap pl) q), (Permutation (maybe_swap pl) p), (Permutation (maybe_swap pl) ql), (Permutation (maybe_swap pl) pl), (Permutation (maybe_swap pl) (a :: q)), (Permutation (maybe_swap pl) (a :: p)), (Permutation (maybe_swap pl) (a :: ql))
(Permutation (maybe_swap pl) (a :: pl)), (Permutation (maybe_swap pl) (k :: q)), (Permutation (maybe_swap pl) (k :: p)), (Permutation (maybe_swap pl) (k :: ql)), (Permutation (maybe_swap pl) (k :: pl)), (Permutation (maybe_swap pl) (merge q q)), (Permutation (maybe_swap pl) (merge q p)), (Permutation (maybe_swap pl) (merge q ql)), (Permutation (maybe_swap pl) (merge q pl)), (Permutation (maybe_swap pl) (merge p q))
(Permutation (maybe_swap pl) (merge p p)), (Permutation (maybe_swap pl) (merge p ql)), (Permutation (maybe_swap pl) (merge p pl)), (Permutation (maybe_swap pl) (merge ql q)), (Permutation (maybe_swap pl) (merge ql p)), (Permutation (maybe_swap pl) (merge ql ql)), (Permutation (maybe_swap pl) (merge ql pl)), (Permutation (maybe_swap pl) (merge pl q)), (Permutation (maybe_swap pl) (merge pl p)), (Permutation (maybe_swap pl) (merge pl ql))
(Permutation (maybe_swap pl) (merge pl pl)), (Permutation (maybe_swap pl) (insert a q)), (Permutation (maybe_swap pl) (insert a p)), (Permutation (maybe_swap pl) (insert a ql)), (Permutation (maybe_swap pl) (insert a pl)), (Permutation (maybe_swap pl) (insert k q)), (Permutation (maybe_swap pl) (insert k p)), (Permutation (maybe_swap pl) (insert k ql)), (Permutation (maybe_swap pl) (insert k pl)), (Permutation (maybe_swap pl) (maybe_swap q))
(Permutation (maybe_swap pl) (maybe_swap p)), (Permutation (maybe_swap pl) (maybe_swap ql)), (Permutation (maybe_swap pl) (q ++ q)), (Permutation (maybe_swap pl) (q ++ p)), (Permutation (maybe_swap pl) (q ++ ql)), (Permutation (maybe_swap pl) (q ++ pl)), (Permutation (maybe_swap pl) (p ++ q)), (Permutation (maybe_swap pl) (p ++ p)), (Permutation (maybe_swap pl) (p ++ ql)), (Permutation (maybe_swap pl) (p ++ pl))
(Permutation (maybe_swap pl) (ql ++ q)), (Permutation (maybe_swap pl) (ql ++ p)), (Permutation (maybe_swap pl) (ql ++ ql)), (Permutation (maybe_swap pl) (ql ++ pl)), (Permutation (maybe_swap pl) (pl ++ q)), (Permutation (maybe_swap pl) (pl ++ p)), (Permutation (maybe_swap pl) (pl ++ ql)), (Permutation (maybe_swap pl) (pl ++ pl)), (Permutation (maybe_swap pl) []), (Permutation (q ++ q) q)
(Permutation (q ++ q) p), (Permutation (q ++ q) ql), (Permutation (q ++ q) pl), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: pl)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: ql))
(Permutation (q ++ q) (k :: pl)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q pl)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p pl)), (Permutation (q ++ q) (merge ql q))
(Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql pl)), (Permutation (q ++ q) (merge pl q)), (Permutation (q ++ q) (merge pl p)), (Permutation (q ++ q) (merge pl ql)), (Permutation (q ++ q) (merge pl pl)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a ql))
(Permutation (q ++ q) (insert a pl)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k pl)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap pl)), (Permutation (q ++ q) (q ++ p))
(Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ pl)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ pl)), (Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ pl))
(Permutation (q ++ q) (pl ++ q)), (Permutation (q ++ q) (pl ++ p)), (Permutation (q ++ q) (pl ++ ql)), (Permutation (q ++ q) (pl ++ pl)), (Permutation (q ++ q) []), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) ql), (Permutation (q ++ p) pl), (Permutation (q ++ p) (a :: q))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: ql)), (Permutation (q ++ p) (a :: pl)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: pl)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q ql))
(Permutation (q ++ p) (merge q pl)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p pl)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql pl)), (Permutation (q ++ p) (merge pl q))
(Permutation (q ++ p) (merge pl p)), (Permutation (q ++ p) (merge pl ql)), (Permutation (q ++ p) (merge pl pl)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a pl)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert k ql))
(Permutation (q ++ p) (insert k pl)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap pl)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ pl)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ p))
(Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ pl)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ pl)), (Permutation (q ++ p) (pl ++ q)), (Permutation (q ++ p) (pl ++ p)), (Permutation (q ++ p) (pl ++ ql)), (Permutation (q ++ p) (pl ++ pl))
(Permutation (q ++ p) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) p), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) pl), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: pl)), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: pl)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q pl)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (merge p ql))
(Permutation (q ++ ql) (merge p pl)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge ql ql)), (Permutation (q ++ ql) (merge ql pl)), (Permutation (q ++ ql) (merge pl q)), (Permutation (q ++ ql) (merge pl p)), (Permutation (q ++ ql) (merge pl ql)), (Permutation (q ++ ql) (merge pl pl)), (Permutation (q ++ ql) (insert a q))
(Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a pl)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k pl)), (Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (maybe_swap ql))
(Permutation (q ++ ql) (maybe_swap pl)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (q ++ pl)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ pl)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ p))
(Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ pl)), (Permutation (q ++ ql) (pl ++ q)), (Permutation (q ++ ql) (pl ++ p)), (Permutation (q ++ ql) (pl ++ ql)), (Permutation (q ++ ql) (pl ++ pl)), (Permutation (q ++ ql) []), (Permutation (q ++ pl) q), (Permutation (q ++ pl) p), (Permutation (q ++ pl) ql)
(Permutation (q ++ pl) pl), (Permutation (q ++ pl) (a :: q)), (Permutation (q ++ pl) (a :: p)), (Permutation (q ++ pl) (a :: ql)), (Permutation (q ++ pl) (a :: pl)), (Permutation (q ++ pl) (k :: q)), (Permutation (q ++ pl) (k :: p)), (Permutation (q ++ pl) (k :: ql)), (Permutation (q ++ pl) (k :: pl)), (Permutation (q ++ pl) (merge q q))
(Permutation (q ++ pl) (merge q p)), (Permutation (q ++ pl) (merge q ql)), (Permutation (q ++ pl) (merge q pl)), (Permutation (q ++ pl) (merge p q)), (Permutation (q ++ pl) (merge p p)), (Permutation (q ++ pl) (merge p ql)), (Permutation (q ++ pl) (merge p pl)), (Permutation (q ++ pl) (merge ql q)), (Permutation (q ++ pl) (merge ql p)), (Permutation (q ++ pl) (merge ql ql))
(Permutation (q ++ pl) (merge ql pl)), (Permutation (q ++ pl) (merge pl q)), (Permutation (q ++ pl) (merge pl p)), (Permutation (q ++ pl) (merge pl ql)), (Permutation (q ++ pl) (merge pl pl)), (Permutation (q ++ pl) (insert a q)), (Permutation (q ++ pl) (insert a p)), (Permutation (q ++ pl) (insert a ql)), (Permutation (q ++ pl) (insert a pl)), (Permutation (q ++ pl) (insert k q))
(Permutation (q ++ pl) (insert k p)), (Permutation (q ++ pl) (insert k ql)), (Permutation (q ++ pl) (insert k pl)), (Permutation (q ++ pl) (maybe_swap q)), (Permutation (q ++ pl) (maybe_swap p)), (Permutation (q ++ pl) (maybe_swap ql)), (Permutation (q ++ pl) (maybe_swap pl)), (Permutation (q ++ pl) (q ++ q)), (Permutation (q ++ pl) (q ++ p)), (Permutation (q ++ pl) (q ++ ql))
(Permutation (q ++ pl) (p ++ q)), (Permutation (q ++ pl) (p ++ p)), (Permutation (q ++ pl) (p ++ ql)), (Permutation (q ++ pl) (p ++ pl)), (Permutation (q ++ pl) (ql ++ q)), (Permutation (q ++ pl) (ql ++ p)), (Permutation (q ++ pl) (ql ++ ql)), (Permutation (q ++ pl) (ql ++ pl)), (Permutation (q ++ pl) (pl ++ q)), (Permutation (q ++ pl) (pl ++ p))
(Permutation (q ++ pl) (pl ++ ql)), (Permutation (q ++ pl) (pl ++ pl)), (Permutation (q ++ pl) []), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) ql), (Permutation (p ++ q) pl), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (a :: ql))
(Permutation (p ++ q) (a :: pl)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: pl)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q pl)), (Permutation (p ++ q) (merge p q))
(Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p pl)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge ql ql)), (Permutation (p ++ q) (merge ql pl)), (Permutation (p ++ q) (merge pl q)), (Permutation (p ++ q) (merge pl p)), (Permutation (p ++ q) (merge pl ql))
(Permutation (p ++ q) (merge pl pl)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a pl)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k pl)), (Permutation (p ++ q) (maybe_swap q))
(Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap pl)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ pl)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ ql)), (Permutation (p ++ q) (p ++ pl))
(Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ pl)), (Permutation (p ++ q) (pl ++ q)), (Permutation (p ++ q) (pl ++ p)), (Permutation (p ++ q) (pl ++ ql)), (Permutation (p ++ q) (pl ++ pl)), (Permutation (p ++ q) []), (Permutation (p ++ p) q)
(Permutation (p ++ p) p), (Permutation (p ++ p) ql), (Permutation (p ++ p) pl), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: pl)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: ql))
(Permutation (p ++ p) (k :: pl)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q pl)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p pl)), (Permutation (p ++ p) (merge ql q))
(Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql pl)), (Permutation (p ++ p) (merge pl q)), (Permutation (p ++ p) (merge pl p)), (Permutation (p ++ p) (merge pl ql)), (Permutation (p ++ p) (merge pl pl)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a ql))
(Permutation (p ++ p) (insert a pl)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k pl)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap pl)), (Permutation (p ++ p) (q ++ q))
(Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ pl)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) (p ++ pl)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (ql ++ ql)), (Permutation (p ++ p) (ql ++ pl))
(Permutation (p ++ p) (pl ++ q)), (Permutation (p ++ p) (pl ++ p)), (Permutation (p ++ p) (pl ++ ql)), (Permutation (p ++ p) (pl ++ pl)), (Permutation (p ++ p) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) p), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) pl), (Permutation (p ++ ql) (a :: q))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (a :: ql)), (Permutation (p ++ ql) (a :: pl)), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: pl)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge q ql))
(Permutation (p ++ ql) (merge q pl)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p pl)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql pl)), (Permutation (p ++ ql) (merge pl q))
(Permutation (p ++ ql) (merge pl p)), (Permutation (p ++ ql) (merge pl ql)), (Permutation (p ++ ql) (merge pl pl)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a pl)), (Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert k ql))
(Permutation (p ++ ql) (insert k pl)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap pl)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ pl)), (Permutation (p ++ ql) (p ++ q))
(Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) (p ++ pl)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ pl)), (Permutation (p ++ ql) (pl ++ q)), (Permutation (p ++ ql) (pl ++ p)), (Permutation (p ++ ql) (pl ++ ql)), (Permutation (p ++ ql) (pl ++ pl))
(Permutation (p ++ ql) []), (Permutation (p ++ pl) q), (Permutation (p ++ pl) p), (Permutation (p ++ pl) ql), (Permutation (p ++ pl) pl), (Permutation (p ++ pl) (a :: q)), (Permutation (p ++ pl) (a :: p)), (Permutation (p ++ pl) (a :: ql)), (Permutation (p ++ pl) (a :: pl)), (Permutation (p ++ pl) (k :: q))
(Permutation (p ++ pl) (k :: p)), (Permutation (p ++ pl) (k :: ql)), (Permutation (p ++ pl) (k :: pl)), (Permutation (p ++ pl) (merge q q)), (Permutation (p ++ pl) (merge q p)), (Permutation (p ++ pl) (merge q ql)), (Permutation (p ++ pl) (merge q pl)), (Permutation (p ++ pl) (merge p q)), (Permutation (p ++ pl) (merge p p)), (Permutation (p ++ pl) (merge p ql))
(Permutation (p ++ pl) (merge p pl)), (Permutation (p ++ pl) (merge ql q)), (Permutation (p ++ pl) (merge ql p)), (Permutation (p ++ pl) (merge ql ql)), (Permutation (p ++ pl) (merge ql pl)), (Permutation (p ++ pl) (merge pl q)), (Permutation (p ++ pl) (merge pl p)), (Permutation (p ++ pl) (merge pl ql)), (Permutation (p ++ pl) (merge pl pl)), (Permutation (p ++ pl) (insert a q))
(Permutation (p ++ pl) (insert a p)), (Permutation (p ++ pl) (insert a ql)), (Permutation (p ++ pl) (insert a pl)), (Permutation (p ++ pl) (insert k q)), (Permutation (p ++ pl) (insert k p)), (Permutation (p ++ pl) (insert k ql)), (Permutation (p ++ pl) (insert k pl)), (Permutation (p ++ pl) (maybe_swap q)), (Permutation (p ++ pl) (maybe_swap p)), (Permutation (p ++ pl) (maybe_swap ql))
(Permutation (p ++ pl) (maybe_swap pl)), (Permutation (p ++ pl) (q ++ q)), (Permutation (p ++ pl) (q ++ p)), (Permutation (p ++ pl) (q ++ ql)), (Permutation (p ++ pl) (q ++ pl)), (Permutation (p ++ pl) (p ++ q)), (Permutation (p ++ pl) (p ++ p)), (Permutation (p ++ pl) (p ++ ql)), (Permutation (p ++ pl) (ql ++ q)), (Permutation (p ++ pl) (ql ++ p))
(Permutation (p ++ pl) (ql ++ ql)), (Permutation (p ++ pl) (ql ++ pl)), (Permutation (p ++ pl) (pl ++ q)), (Permutation (p ++ pl) (pl ++ p)), (Permutation (p ++ pl) (pl ++ ql)), (Permutation (p ++ pl) (pl ++ pl)), (Permutation (p ++ pl) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) p), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) pl), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: pl)), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: pl)), (Permutation (ql ++ q) (merge q q))
(Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q pl)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p pl)), (Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge ql ql))
(Permutation (ql ++ q) (merge ql pl)), (Permutation (ql ++ q) (merge pl q)), (Permutation (ql ++ q) (merge pl p)), (Permutation (ql ++ q) (merge pl ql)), (Permutation (ql ++ q) (merge pl pl)), (Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a pl)), (Permutation (ql ++ q) (insert k q))
(Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k pl)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap pl)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (q ++ ql))
(Permutation (ql ++ q) (q ++ pl)), (Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ pl)), (Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ pl)), (Permutation (ql ++ q) (pl ++ q)), (Permutation (ql ++ q) (pl ++ p))
(Permutation (ql ++ q) (pl ++ ql)), (Permutation (ql ++ q) (pl ++ pl)), (Permutation (ql ++ q) []), (Permutation (ql ++ p) q), (Permutation (ql ++ p) p), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) pl), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (a :: ql))
(Permutation (ql ++ p) (a :: pl)), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: pl)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q pl)), (Permutation (ql ++ p) (merge p q))
(Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p pl)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql pl)), (Permutation (ql ++ p) (merge pl q)), (Permutation (ql ++ p) (merge pl p)), (Permutation (ql ++ p) (merge pl ql))
(Permutation (ql ++ p) (merge pl pl)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a pl)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k pl)), (Permutation (ql ++ p) (maybe_swap q))
(Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap pl)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ pl)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) (p ++ ql))
(Permutation (ql ++ p) (p ++ pl)), (Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (ql ++ pl)), (Permutation (ql ++ p) (pl ++ q)), (Permutation (ql ++ p) (pl ++ p)), (Permutation (ql ++ p) (pl ++ ql)), (Permutation (ql ++ p) (pl ++ pl)), (Permutation (ql ++ p) []), (Permutation (ql ++ ql) q)
(Permutation (ql ++ ql) p), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) pl), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: pl)), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (k :: ql))
(Permutation (ql ++ ql) (k :: pl)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q pl)), (Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p pl)), (Permutation (ql ++ ql) (merge ql q))
(Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql pl)), (Permutation (ql ++ ql) (merge pl q)), (Permutation (ql ++ ql) (merge pl p)), (Permutation (ql ++ ql) (merge pl ql)), (Permutation (ql ++ ql) (merge pl pl)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (insert a ql))
(Permutation (ql ++ ql) (insert a pl)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k pl)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap pl)), (Permutation (ql ++ ql) (q ++ q))
(Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ pl)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ pl)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (ql ++ pl))
(Permutation (ql ++ ql) (pl ++ q)), (Permutation (ql ++ ql) (pl ++ p)), (Permutation (ql ++ ql) (pl ++ ql)), (Permutation (ql ++ ql) (pl ++ pl)), (Permutation (ql ++ ql) []), (Permutation (ql ++ pl) q), (Permutation (ql ++ pl) p), (Permutation (ql ++ pl) ql), (Permutation (ql ++ pl) pl), (Permutation (ql ++ pl) (a :: q))
(Permutation (ql ++ pl) (a :: p)), (Permutation (ql ++ pl) (a :: ql)), (Permutation (ql ++ pl) (a :: pl)), (Permutation (ql ++ pl) (k :: q)), (Permutation (ql ++ pl) (k :: p)), (Permutation (ql ++ pl) (k :: ql)), (Permutation (ql ++ pl) (k :: pl)), (Permutation (ql ++ pl) (merge q q)), (Permutation (ql ++ pl) (merge q p)), (Permutation (ql ++ pl) (merge q ql))
(Permutation (ql ++ pl) (merge q pl)), (Permutation (ql ++ pl) (merge p q)), (Permutation (ql ++ pl) (merge p p)), (Permutation (ql ++ pl) (merge p ql)), (Permutation (ql ++ pl) (merge p pl)), (Permutation (ql ++ pl) (merge ql q)), (Permutation (ql ++ pl) (merge ql p)), (Permutation (ql ++ pl) (merge ql ql)), (Permutation (ql ++ pl) (merge ql pl)), (Permutation (ql ++ pl) (merge pl q))
(Permutation (ql ++ pl) (merge pl p)), (Permutation (ql ++ pl) (merge pl ql)), (Permutation (ql ++ pl) (merge pl pl)), (Permutation (ql ++ pl) (insert a q)), (Permutation (ql ++ pl) (insert a p)), (Permutation (ql ++ pl) (insert a ql)), (Permutation (ql ++ pl) (insert a pl)), (Permutation (ql ++ pl) (insert k q)), (Permutation (ql ++ pl) (insert k p)), (Permutation (ql ++ pl) (insert k ql))
(Permutation (ql ++ pl) (insert k pl)), (Permutation (ql ++ pl) (maybe_swap q)), (Permutation (ql ++ pl) (maybe_swap p)), (Permutation (ql ++ pl) (maybe_swap ql)), (Permutation (ql ++ pl) (maybe_swap pl)), (Permutation (ql ++ pl) (q ++ q)), (Permutation (ql ++ pl) (q ++ p)), (Permutation (ql ++ pl) (q ++ ql)), (Permutation (ql ++ pl) (q ++ pl)), (Permutation (ql ++ pl) (p ++ q))
(Permutation (ql ++ pl) (p ++ p)), (Permutation (ql ++ pl) (p ++ ql)), (Permutation (ql ++ pl) (p ++ pl)), (Permutation (ql ++ pl) (ql ++ q)), (Permutation (ql ++ pl) (ql ++ p)), (Permutation (ql ++ pl) (ql ++ ql)), (Permutation (ql ++ pl) (pl ++ q)), (Permutation (ql ++ pl) (pl ++ p)), (Permutation (ql ++ pl) (pl ++ ql)), (Permutation (ql ++ pl) (pl ++ pl))
(Permutation (ql ++ pl) []), (Permutation (pl ++ q) q), (Permutation (pl ++ q) p), (Permutation (pl ++ q) ql), (Permutation (pl ++ q) pl), (Permutation (pl ++ q) (a :: q)), (Permutation (pl ++ q) (a :: p)), (Permutation (pl ++ q) (a :: ql)), (Permutation (pl ++ q) (a :: pl)), (Permutation (pl ++ q) (k :: q))
(Permutation (pl ++ q) (k :: p)), (Permutation (pl ++ q) (k :: ql)), (Permutation (pl ++ q) (k :: pl)), (Permutation (pl ++ q) (merge q q)), (Permutation (pl ++ q) (merge q p)), (Permutation (pl ++ q) (merge q ql)), (Permutation (pl ++ q) (merge q pl)), (Permutation (pl ++ q) (merge p q)), (Permutation (pl ++ q) (merge p p)), (Permutation (pl ++ q) (merge p ql))
(Permutation (pl ++ q) (merge p pl)), (Permutation (pl ++ q) (merge ql q)), (Permutation (pl ++ q) (merge ql p)), (Permutation (pl ++ q) (merge ql ql)), (Permutation (pl ++ q) (merge ql pl)), (Permutation (pl ++ q) (merge pl q)), (Permutation (pl ++ q) (merge pl p)), (Permutation (pl ++ q) (merge pl ql)), (Permutation (pl ++ q) (merge pl pl)), (Permutation (pl ++ q) (insert a q))
(Permutation (pl ++ q) (insert a p)), (Permutation (pl ++ q) (insert a ql)), (Permutation (pl ++ q) (insert a pl)), (Permutation (pl ++ q) (insert k q)), (Permutation (pl ++ q) (insert k p)), (Permutation (pl ++ q) (insert k ql)), (Permutation (pl ++ q) (insert k pl)), (Permutation (pl ++ q) (maybe_swap q)), (Permutation (pl ++ q) (maybe_swap p)), (Permutation (pl ++ q) (maybe_swap ql))
(Permutation (pl ++ q) (maybe_swap pl)), (Permutation (pl ++ q) (q ++ q)), (Permutation (pl ++ q) (q ++ p)), (Permutation (pl ++ q) (q ++ ql)), (Permutation (pl ++ q) (q ++ pl)), (Permutation (pl ++ q) (p ++ q)), (Permutation (pl ++ q) (p ++ p)), (Permutation (pl ++ q) (p ++ ql)), (Permutation (pl ++ q) (p ++ pl)), (Permutation (pl ++ q) (ql ++ q))
(Permutation (pl ++ q) (ql ++ p)), (Permutation (pl ++ q) (ql ++ ql)), (Permutation (pl ++ q) (ql ++ pl)), (Permutation (pl ++ q) (pl ++ p)), (Permutation (pl ++ q) (pl ++ ql)), (Permutation (pl ++ q) (pl ++ pl)), (Permutation (pl ++ q) []), (Permutation (pl ++ p) q), (Permutation (pl ++ p) p), (Permutation (pl ++ p) ql)
(Permutation (pl ++ p) pl), (Permutation (pl ++ p) (a :: q)), (Permutation (pl ++ p) (a :: p)), (Permutation (pl ++ p) (a :: ql)), (Permutation (pl ++ p) (a :: pl)), (Permutation (pl ++ p) (k :: q)), (Permutation (pl ++ p) (k :: p)), (Permutation (pl ++ p) (k :: ql)), (Permutation (pl ++ p) (k :: pl)), (Permutation (pl ++ p) (merge q q))
(Permutation (pl ++ p) (merge q p)), (Permutation (pl ++ p) (merge q ql)), (Permutation (pl ++ p) (merge q pl)), (Permutation (pl ++ p) (merge p q)), (Permutation (pl ++ p) (merge p p)), (Permutation (pl ++ p) (merge p ql)), (Permutation (pl ++ p) (merge p pl)), (Permutation (pl ++ p) (merge ql q)), (Permutation (pl ++ p) (merge ql p)), (Permutation (pl ++ p) (merge ql ql))
(Permutation (pl ++ p) (merge ql pl)), (Permutation (pl ++ p) (merge pl q)), (Permutation (pl ++ p) (merge pl p)), (Permutation (pl ++ p) (merge pl ql)), (Permutation (pl ++ p) (merge pl pl)), (Permutation (pl ++ p) (insert a q)), (Permutation (pl ++ p) (insert a p)), (Permutation (pl ++ p) (insert a ql)), (Permutation (pl ++ p) (insert a pl)), (Permutation (pl ++ p) (insert k q))
(Permutation (pl ++ p) (insert k p)), (Permutation (pl ++ p) (insert k ql)), (Permutation (pl ++ p) (insert k pl)), (Permutation (pl ++ p) (maybe_swap q)), (Permutation (pl ++ p) (maybe_swap p)), (Permutation (pl ++ p) (maybe_swap ql)), (Permutation (pl ++ p) (maybe_swap pl)), (Permutation (pl ++ p) (q ++ q)), (Permutation (pl ++ p) (q ++ p)), (Permutation (pl ++ p) (q ++ ql))
(Permutation (pl ++ p) (q ++ pl)), (Permutation (pl ++ p) (p ++ q)), (Permutation (pl ++ p) (p ++ p)), (Permutation (pl ++ p) (p ++ ql)), (Permutation (pl ++ p) (p ++ pl)), (Permutation (pl ++ p) (ql ++ q)), (Permutation (pl ++ p) (ql ++ p)), (Permutation (pl ++ p) (ql ++ ql)), (Permutation (pl ++ p) (ql ++ pl)), (Permutation (pl ++ p) (pl ++ q))
(Permutation (pl ++ p) (pl ++ ql)), (Permutation (pl ++ p) (pl ++ pl)), (Permutation (pl ++ p) []), (Permutation (pl ++ ql) q), (Permutation (pl ++ ql) p), (Permutation (pl ++ ql) ql), (Permutation (pl ++ ql) pl), (Permutation (pl ++ ql) (a :: q)), (Permutation (pl ++ ql) (a :: p)), (Permutation (pl ++ ql) (a :: ql))
(Permutation (pl ++ ql) (a :: pl)), (Permutation (pl ++ ql) (k :: q)), (Permutation (pl ++ ql) (k :: p)), (Permutation (pl ++ ql) (k :: ql)), (Permutation (pl ++ ql) (k :: pl)), (Permutation (pl ++ ql) (merge q q)), (Permutation (pl ++ ql) (merge q p)), (Permutation (pl ++ ql) (merge q ql)), (Permutation (pl ++ ql) (merge q pl)), (Permutation (pl ++ ql) (merge p q))
(Permutation (pl ++ ql) (merge p p)), (Permutation (pl ++ ql) (merge p ql)), (Permutation (pl ++ ql) (merge p pl)), (Permutation (pl ++ ql) (merge ql q)), (Permutation (pl ++ ql) (merge ql p)), (Permutation (pl ++ ql) (merge ql ql)), (Permutation (pl ++ ql) (merge ql pl)), (Permutation (pl ++ ql) (merge pl q)), (Permutation (pl ++ ql) (merge pl p)), (Permutation (pl ++ ql) (merge pl ql))
(Permutation (pl ++ ql) (merge pl pl)), (Permutation (pl ++ ql) (insert a q)), (Permutation (pl ++ ql) (insert a p)), (Permutation (pl ++ ql) (insert a ql)), (Permutation (pl ++ ql) (insert a pl)), (Permutation (pl ++ ql) (insert k q)), (Permutation (pl ++ ql) (insert k p)), (Permutation (pl ++ ql) (insert k ql)), (Permutation (pl ++ ql) (insert k pl)), (Permutation (pl ++ ql) (maybe_swap q))
(Permutation (pl ++ ql) (maybe_swap p)), (Permutation (pl ++ ql) (maybe_swap ql)), (Permutation (pl ++ ql) (maybe_swap pl)), (Permutation (pl ++ ql) (q ++ q)), (Permutation (pl ++ ql) (q ++ p)), (Permutation (pl ++ ql) (q ++ ql)), (Permutation (pl ++ ql) (q ++ pl)), (Permutation (pl ++ ql) (p ++ q)), (Permutation (pl ++ ql) (p ++ p)), (Permutation (pl ++ ql) (p ++ ql))
(Permutation (pl ++ ql) (p ++ pl)), (Permutation (pl ++ ql) (ql ++ q)), (Permutation (pl ++ ql) (ql ++ p)), (Permutation (pl ++ ql) (ql ++ ql)), (Permutation (pl ++ ql) (ql ++ pl)), (Permutation (pl ++ ql) (pl ++ q)), (Permutation (pl ++ ql) (pl ++ p)), (Permutation (pl ++ ql) (pl ++ pl)), (Permutation (pl ++ ql) []), (Permutation (pl ++ pl) q)
(Permutation (pl ++ pl) p), (Permutation (pl ++ pl) ql), (Permutation (pl ++ pl) pl), (Permutation (pl ++ pl) (a :: q)), (Permutation (pl ++ pl) (a :: p)), (Permutation (pl ++ pl) (a :: ql)), (Permutation (pl ++ pl) (a :: pl)), (Permutation (pl ++ pl) (k :: q)), (Permutation (pl ++ pl) (k :: p)), (Permutation (pl ++ pl) (k :: ql))
(Permutation (pl ++ pl) (k :: pl)), (Permutation (pl ++ pl) (merge q q)), (Permutation (pl ++ pl) (merge q p)), (Permutation (pl ++ pl) (merge q ql)), (Permutation (pl ++ pl) (merge q pl)), (Permutation (pl ++ pl) (merge p q)), (Permutation (pl ++ pl) (merge p p)), (Permutation (pl ++ pl) (merge p ql)), (Permutation (pl ++ pl) (merge p pl)), (Permutation (pl ++ pl) (merge ql q))
(Permutation (pl ++ pl) (merge ql p)), (Permutation (pl ++ pl) (merge ql ql)), (Permutation (pl ++ pl) (merge ql pl)), (Permutation (pl ++ pl) (merge pl q)), (Permutation (pl ++ pl) (merge pl p)), (Permutation (pl ++ pl) (merge pl ql)), (Permutation (pl ++ pl) (merge pl pl)), (Permutation (pl ++ pl) (insert a q)), (Permutation (pl ++ pl) (insert a p)), (Permutation (pl ++ pl) (insert a ql))
(Permutation (pl ++ pl) (insert a pl)), (Permutation (pl ++ pl) (insert k q)), (Permutation (pl ++ pl) (insert k p)), (Permutation (pl ++ pl) (insert k ql)), (Permutation (pl ++ pl) (insert k pl)), (Permutation (pl ++ pl) (maybe_swap q)), (Permutation (pl ++ pl) (maybe_swap p)), (Permutation (pl ++ pl) (maybe_swap ql)), (Permutation (pl ++ pl) (maybe_swap pl)), (Permutation (pl ++ pl) (q ++ q))
(Permutation (pl ++ pl) (q ++ p)), (Permutation (pl ++ pl) (q ++ ql)), (Permutation (pl ++ pl) (q ++ pl)), (Permutation (pl ++ pl) (p ++ q)), (Permutation (pl ++ pl) (p ++ p)), (Permutation (pl ++ pl) (p ++ ql)), (Permutation (pl ++ pl) (p ++ pl)), (Permutation (pl ++ pl) (ql ++ q)), (Permutation (pl ++ pl) (ql ++ p)), (Permutation (pl ++ pl) (ql ++ ql))
(Permutation (pl ++ pl) (ql ++ pl)), (Permutation (pl ++ pl) (pl ++ q)), (Permutation (pl ++ pl) (pl ++ p)), (Permutation (pl ++ pl) (pl ++ ql)), (Permutation (pl ++ pl) []), (Permutation [] q), (Permutation [] p), (Permutation [] ql), (Permutation [] pl), (Permutation [] (a :: q))
(Permutation [] (a :: p)), (Permutation [] (a :: ql)), (Permutation [] (a :: pl)), (Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (k :: ql)), (Permutation [] (k :: pl)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge q ql))
(Permutation [] (merge q pl)), (Permutation [] (merge p q)), (Permutation [] (merge p p)), (Permutation [] (merge p ql)), (Permutation [] (merge p pl)), (Permutation [] (merge ql q)), (Permutation [] (merge ql p)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql pl)), (Permutation [] (merge pl q))
(Permutation [] (merge pl p)), (Permutation [] (merge pl ql)), (Permutation [] (merge pl pl)), (Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (insert a ql)), (Permutation [] (insert a pl)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert k ql))
(Permutation [] (insert k pl)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap pl)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ pl)), (Permutation [] (p ++ q))
(Permutation [] (p ++ p)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ pl)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ p)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ pl)), (Permutation [] (pl ++ q)), (Permutation [] (pl ++ p)), (Permutation [] (pl ++ ql))
(Permutation [] (pl ++ pl)), (In a (a :: q)), (In a (a :: p)), (In a (a :: ql)), (In a (a :: pl)), (In a (k :: q)), (In a (k :: p)), (In a (k :: ql)), (In a (k :: pl)), (In a (merge q q))
(In a (merge q p)), (In a (merge q ql)), (In a (merge q pl)), (In a (merge p q)), (In a (merge p p)), (In a (merge p ql)), (In a (merge p pl)), (In a (merge ql q)), (In a (merge ql p)), (In a (merge ql ql))
(In a (merge ql pl)), (In a (merge pl q)), (In a (merge pl p)), (In a (merge pl ql)), (In a (merge pl pl)), (In a (insert a q)), (In a (insert a p)), (In a (insert a ql)), (In a (insert a pl)), (In a (insert k q))
(In a (insert k p)), (In a (insert k ql)), (In a (insert k pl)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (maybe_swap ql)), (In a (maybe_swap pl)), (In a (q ++ q)), (In a (q ++ p)), (In a (q ++ ql))
(In a (q ++ pl)), (In a (p ++ q)), (In a (p ++ p)), (In a (p ++ ql)), (In a (p ++ pl)), (In a (ql ++ q)), (In a (ql ++ p)), (In a (ql ++ ql)), (In a (ql ++ pl)), (In a (pl ++ q))
(In a (pl ++ p)), (In a (pl ++ ql)), (In a (pl ++ pl)), (In k (a :: q)), (In k (a :: p)), (In k (a :: ql)), (In k (a :: pl)), (In k (k :: q)), (In k (k :: p)), (In k (k :: ql))
(In k (k :: pl)), (In k (merge q q)), (In k (merge q p)), (In k (merge q ql)), (In k (merge q pl)), (In k (merge p q)), (In k (merge p p)), (In k (merge p ql)), (In k (merge p pl)), (In k (merge ql q))
(In k (merge ql p)), (In k (merge ql ql)), (In k (merge ql pl)), (In k (merge pl q)), (In k (merge pl p)), (In k (merge pl ql)), (In k (merge pl pl)), (In k (insert a q)), (In k (insert a p)), (In k (insert a ql))
(In k (insert a pl)), (In k (insert k q)), (In k (insert k p)), (In k (insert k ql)), (In k (insert k pl)), (In k (maybe_swap q)), (In k (maybe_swap p)), (In k (maybe_swap ql)), (In k (maybe_swap pl)), (In k (q ++ q))
(In k (q ++ p)), (In k (q ++ ql)), (In k (q ++ pl)), (In k (p ++ q)), (In k (p ++ p)), (In k (p ++ ql)), (In k (p ++ pl)), (In k (ql ++ q)), (In k (ql ++ p)), (In k (ql ++ ql))
(In k (ql ++ pl)), (In k (pl ++ q)), (In k (pl ++ p)), (In k (pl ++ ql)), (In k (pl ++ pl)), (In (length q) q), (In (length q) p), (In (length q) ql), (In (length q) pl), (In (length q) (a :: q))
(In (length q) (a :: p)), (In (length q) (a :: ql)), (In (length q) (a :: pl)), (In (length q) (k :: q)), (In (length q) (k :: p)), (In (length q) (k :: ql)), (In (length q) (k :: pl)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge q ql))
(In (length q) (merge q pl)), (In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (merge p ql)), (In (length q) (merge p pl)), (In (length q) (merge ql q)), (In (length q) (merge ql p)), (In (length q) (merge ql ql)), (In (length q) (merge ql pl)), (In (length q) (merge pl q))
(In (length q) (merge pl p)), (In (length q) (merge pl ql)), (In (length q) (merge pl pl)), (In (length q) (insert a q)), (In (length q) (insert a p)), (In (length q) (insert a ql)), (In (length q) (insert a pl)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert k ql))
(In (length q) (insert k pl)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap pl)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (q ++ ql)), (In (length q) (q ++ pl)), (In (length q) (p ++ q))
(In (length q) (p ++ p)), (In (length q) (p ++ ql)), (In (length q) (p ++ pl)), (In (length q) (ql ++ q)), (In (length q) (ql ++ p)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ pl)), (In (length q) (pl ++ q)), (In (length q) (pl ++ p)), (In (length q) (pl ++ ql))
(In (length q) (pl ++ pl)), (In (length p) q), (In (length p) p), (In (length p) ql), (In (length p) pl), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (a :: ql)), (In (length p) (a :: pl)), (In (length p) (k :: q))
(In (length p) (k :: p)), (In (length p) (k :: ql)), (In (length p) (k :: pl)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge q ql)), (In (length p) (merge q pl)), (In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (merge p ql))
(In (length p) (merge p pl)), (In (length p) (merge ql q)), (In (length p) (merge ql p)), (In (length p) (merge ql ql)), (In (length p) (merge ql pl)), (In (length p) (merge pl q)), (In (length p) (merge pl p)), (In (length p) (merge pl ql)), (In (length p) (merge pl pl)), (In (length p) (insert a q))
(In (length p) (insert a p)), (In (length p) (insert a ql)), (In (length p) (insert a pl)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert k ql)), (In (length p) (insert k pl)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (maybe_swap ql))
(In (length p) (maybe_swap pl)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (q ++ ql)), (In (length p) (q ++ pl)), (In (length p) (p ++ q)), (In (length p) (p ++ p)), (In (length p) (p ++ ql)), (In (length p) (p ++ pl)), (In (length p) (ql ++ q))
(In (length p) (ql ++ p)), (In (length p) (ql ++ ql)), (In (length p) (ql ++ pl)), (In (length p) (pl ++ q)), (In (length p) (pl ++ p)), (In (length p) (pl ++ ql)), (In (length p) (pl ++ pl)), (In (length ql) q), (In (length ql) p), (In (length ql) ql)
(In (length ql) pl), (In (length ql) (a :: q)), (In (length ql) (a :: p)), (In (length ql) (a :: ql)), (In (length ql) (a :: pl)), (In (length ql) (k :: q)), (In (length ql) (k :: p)), (In (length ql) (k :: ql)), (In (length ql) (k :: pl)), (In (length ql) (merge q q))
(In (length ql) (merge q p)), (In (length ql) (merge q ql)), (In (length ql) (merge q pl)), (In (length ql) (merge p q)), (In (length ql) (merge p p)), (In (length ql) (merge p ql)), (In (length ql) (merge p pl)), (In (length ql) (merge ql q)), (In (length ql) (merge ql p)), (In (length ql) (merge ql ql))
(In (length ql) (merge ql pl)), (In (length ql) (merge pl q)), (In (length ql) (merge pl p)), (In (length ql) (merge pl ql)), (In (length ql) (merge pl pl)), (In (length ql) (insert a q)), (In (length ql) (insert a p)), (In (length ql) (insert a ql)), (In (length ql) (insert a pl)), (In (length ql) (insert k q))
(In (length ql) (insert k p)), (In (length ql) (insert k ql)), (In (length ql) (insert k pl)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap p)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap pl)), (In (length ql) (q ++ q)), (In (length ql) (q ++ p)), (In (length ql) (q ++ ql))
(In (length ql) (q ++ pl)), (In (length ql) (p ++ q)), (In (length ql) (p ++ p)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ pl)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ p)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ pl)), (In (length ql) (pl ++ q))
(In (length ql) (pl ++ p)), (In (length ql) (pl ++ ql)), (In (length ql) (pl ++ pl)), (In (length pl) q), (In (length pl) p), (In (length pl) ql), (In (length pl) pl), (In (length pl) (a :: q)), (In (length pl) (a :: p)), (In (length pl) (a :: ql))
(In (length pl) (a :: pl)), (In (length pl) (k :: q)), (In (length pl) (k :: p)), (In (length pl) (k :: ql)), (In (length pl) (k :: pl)), (In (length pl) (merge q q)), (In (length pl) (merge q p)), (In (length pl) (merge q ql)), (In (length pl) (merge q pl)), (In (length pl) (merge p q))
(In (length pl) (merge p p)), (In (length pl) (merge p ql)), (In (length pl) (merge p pl)), (In (length pl) (merge ql q)), (In (length pl) (merge ql p)), (In (length pl) (merge ql ql)), (In (length pl) (merge ql pl)), (In (length pl) (merge pl q)), (In (length pl) (merge pl p)), (In (length pl) (merge pl ql))
(In (length pl) (merge pl pl)), (In (length pl) (insert a q)), (In (length pl) (insert a p)), (In (length pl) (insert a ql)), (In (length pl) (insert a pl)), (In (length pl) (insert k q)), (In (length pl) (insert k p)), (In (length pl) (insert k ql)), (In (length pl) (insert k pl)), (In (length pl) (maybe_swap q))
(In (length pl) (maybe_swap p)), (In (length pl) (maybe_swap ql)), (In (length pl) (maybe_swap pl)), (In (length pl) (q ++ q)), (In (length pl) (q ++ p)), (In (length pl) (q ++ ql)), (In (length pl) (q ++ pl)), (In (length pl) (p ++ q)), (In (length pl) (p ++ p)), (In (length pl) (p ++ ql))
(In (length pl) (p ++ pl)), (In (length pl) (ql ++ q)), (In (length pl) (ql ++ p)), (In (length pl) (ql ++ ql)), (In (length pl) (ql ++ pl)), (In (length pl) (pl ++ q)), (In (length pl) (pl ++ p)), (In (length pl) (pl ++ ql)), (In (length pl) (pl ++ pl)), (a < length q)
(a < length p), (a < length ql), (a < length pl), (k < length q), (k < length p), (k < length ql), (k < length pl), (length q < a), (length q < k), (length q < length p)
(length q < length ql), (length q < length pl), (length p < a), (length p < k), (length p < length q), (length p < length ql), (length p < length pl), (length ql < a), (length ql < k), (length ql < length q)
(length ql < length p), (length ql < length pl), (length pl < a), (length pl < k), (length pl < length q), (length pl < length p), (length pl < length ql), (a <= length q), (a <= length p), (a <= length ql)
(a <= length pl), (k <= length q), (k <= length p), (k <= length ql), (k <= length pl), (length q <= a), (length q <= k), (length q <= length p), (length q <= length ql), (length q <= length pl)
(length p <= a), (length p <= k), (length p <= length q), (length p <= length ql), (length p <= length pl), (length ql <= a), (length ql <= k), (length ql <= length q), (length ql <= length p), (length ql <= length pl)
(length pl <= a), (length pl <= k), (length pl <= length q), (length pl <= length p), (length pl <= length ql), (~ Abs q q), (~ Abs q p), (~ Abs q ql), (~ Abs q pl), (~ Abs p q)
(~ Abs p p), (~ Abs p ql), (~ Abs p pl), (~ Abs ql q), (~ Abs ql p), (~ Abs ql ql), (~ Abs ql pl), (~ Abs pl q), (~ Abs pl p), (~ Abs pl ql)
(~ Abs pl pl), (~ priq q), (~ priq p), (~ priq ql), (~ priq pl), (~ Permutation q q), (~ Permutation q p), (~ Permutation q ql), (~ Permutation q pl), (~ Permutation p q)
(~ Permutation p p), (~ Permutation p ql), (~ Permutation p pl), (~ Permutation ql q), (~ Permutation ql p), (~ Permutation ql ql), (~ Permutation ql pl), (~ Permutation pl q), (~ Permutation pl p), (~ Permutation pl ql)
(~ Permutation pl pl), (~ In a q), (~ In a p), (~ In a ql), (~ In a pl), (~ In k q), (~ In k p), (~ In k ql), (~ In k pl), (~ a < a)
(~ a < k), (~ k < a), (~ k < k), (~ a <= a), (~ a <= k), (~ k <= a), (~ k <= k), (a <> a), (a <> k), (k <> a)
(k <> k), (q <> q), (q <> p), (q <> ql), (q <> pl), (p <> q), (p <> p), (p <> ql), (p <> pl), (ql <> q)
(ql <> p), (ql <> ql), (ql <> pl), (pl <> q), (pl <> p), (pl <> ql), (pl <> pl), (None = Some q), (None = Some p), (None = Some ql)
(None = Some pl), (a :: q = q), (a :: q = p), (a :: q = ql), (a :: q = pl), (a :: q = merge q q), (a :: q = merge q p), (a :: q = merge q ql), (a :: q = merge q pl), (a :: q = merge p q)
(a :: q = merge p p), (a :: q = merge p ql), (a :: q = merge p pl), (a :: q = merge ql q), (a :: q = merge ql p), (a :: q = merge ql ql), (a :: q = merge ql pl), (a :: q = merge pl q), (a :: q = merge pl p), (a :: q = merge pl ql)
(a :: q = merge pl pl), (a :: q = insert a q), (a :: q = insert a p), (a :: q = insert a ql), (a :: q = insert a pl), (a :: q = insert k q), (a :: q = insert k p), (a :: q = insert k ql), (a :: q = insert k pl), (a :: q = maybe_swap q)
(a :: q = maybe_swap p), (a :: q = maybe_swap ql), (a :: q = maybe_swap pl), (a :: q = q ++ q), (a :: q = q ++ p), (a :: q = q ++ ql), (a :: q = q ++ pl), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = p ++ ql)
(a :: q = p ++ pl), (a :: q = ql ++ q), (a :: q = ql ++ p), (a :: q = ql ++ ql), (a :: q = ql ++ pl), (a :: q = pl ++ q), (a :: q = pl ++ p), (a :: q = pl ++ ql), (a :: q = pl ++ pl), (a :: q = [])
(a :: p = q), (a :: p = p), (a :: p = ql), (a :: p = pl), (a :: p = merge q q), (a :: p = merge q p), (a :: p = merge q ql), (a :: p = merge q pl), (a :: p = merge p q), (a :: p = merge p p)
(a :: p = merge p ql), (a :: p = merge p pl), (a :: p = merge ql q), (a :: p = merge ql p), (a :: p = merge ql ql), (a :: p = merge ql pl), (a :: p = merge pl q), (a :: p = merge pl p), (a :: p = merge pl ql), (a :: p = merge pl pl)
(a :: p = insert a q), (a :: p = insert a p), (a :: p = insert a ql), (a :: p = insert a pl), (a :: p = insert k q), (a :: p = insert k p), (a :: p = insert k ql), (a :: p = insert k pl), (a :: p = maybe_swap q), (a :: p = maybe_swap p)
(a :: p = maybe_swap ql), (a :: p = maybe_swap pl), (a :: p = q ++ q), (a :: p = q ++ p), (a :: p = q ++ ql), (a :: p = q ++ pl), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = p ++ ql), (a :: p = p ++ pl)
(a :: p = ql ++ q), (a :: p = ql ++ p), (a :: p = ql ++ ql), (a :: p = ql ++ pl), (a :: p = pl ++ q), (a :: p = pl ++ p), (a :: p = pl ++ ql), (a :: p = pl ++ pl), (a :: p = []), (a :: ql = q)
(a :: ql = p), (a :: ql = ql), (a :: ql = pl), (a :: ql = merge q q), (a :: ql = merge q p), (a :: ql = merge q ql), (a :: ql = merge q pl), (a :: ql = merge p q), (a :: ql = merge p p), (a :: ql = merge p ql)
(a :: ql = merge p pl), (a :: ql = merge ql q), (a :: ql = merge ql p), (a :: ql = merge ql ql), (a :: ql = merge ql pl), (a :: ql = merge pl q), (a :: ql = merge pl p), (a :: ql = merge pl ql), (a :: ql = merge pl pl), (a :: ql = insert a q)
(a :: ql = insert a p), (a :: ql = insert a ql), (a :: ql = insert a pl), (a :: ql = insert k q), (a :: ql = insert k p), (a :: ql = insert k ql), (a :: ql = insert k pl), (a :: ql = maybe_swap q), (a :: ql = maybe_swap p), (a :: ql = maybe_swap ql)
(a :: ql = maybe_swap pl), (a :: ql = q ++ q), (a :: ql = q ++ p), (a :: ql = q ++ ql), (a :: ql = q ++ pl), (a :: ql = p ++ q), (a :: ql = p ++ p), (a :: ql = p ++ ql), (a :: ql = p ++ pl), (a :: ql = ql ++ q)
(a :: ql = ql ++ p), (a :: ql = ql ++ ql), (a :: ql = ql ++ pl), (a :: ql = pl ++ q), (a :: ql = pl ++ p), (a :: ql = pl ++ ql), (a :: ql = pl ++ pl), (a :: ql = []), (a :: pl = q), (a :: pl = p)
(a :: pl = ql), (a :: pl = pl), (a :: pl = merge q q), (a :: pl = merge q p), (a :: pl = merge q ql), (a :: pl = merge q pl), (a :: pl = merge p q), (a :: pl = merge p p), (a :: pl = merge p ql), (a :: pl = merge p pl)
(a :: pl = merge ql q), (a :: pl = merge ql p), (a :: pl = merge ql ql), (a :: pl = merge ql pl), (a :: pl = merge pl q), (a :: pl = merge pl p), (a :: pl = merge pl ql), (a :: pl = merge pl pl), (a :: pl = insert a q), (a :: pl = insert a p)
(a :: pl = insert a ql), (a :: pl = insert a pl), (a :: pl = insert k q), (a :: pl = insert k p), (a :: pl = insert k ql), (a :: pl = insert k pl), (a :: pl = maybe_swap q), (a :: pl = maybe_swap p), (a :: pl = maybe_swap ql), (a :: pl = maybe_swap pl)
(a :: pl = q ++ q), (a :: pl = q ++ p), (a :: pl = q ++ ql), (a :: pl = q ++ pl), (a :: pl = p ++ q), (a :: pl = p ++ p), (a :: pl = p ++ ql), (a :: pl = p ++ pl), (a :: pl = ql ++ q), (a :: pl = ql ++ p)
(a :: pl = ql ++ ql), (a :: pl = ql ++ pl), (a :: pl = pl ++ q), (a :: pl = pl ++ p), (a :: pl = pl ++ ql), (a :: pl = pl ++ pl), (a :: pl = []), (k :: q = q), (k :: q = p), (k :: q = ql)
(k :: q = pl), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge q ql), (k :: q = merge q pl), (k :: q = merge p q), (k :: q = merge p p), (k :: q = merge p ql), (k :: q = merge p pl), (k :: q = merge ql q)
(k :: q = merge ql p), (k :: q = merge ql ql), (k :: q = merge ql pl), (k :: q = merge pl q), (k :: q = merge pl p), (k :: q = merge pl ql), (k :: q = merge pl pl), (k :: q = insert a q), (k :: q = insert a p), (k :: q = insert a ql)
(k :: q = insert a pl), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert k ql), (k :: q = insert k pl), (k :: q = maybe_swap q), (k :: q = maybe_swap p), (k :: q = maybe_swap ql), (k :: q = maybe_swap pl), (k :: q = q ++ q)
(k :: q = q ++ p), (k :: q = q ++ ql), (k :: q = q ++ pl), (k :: q = p ++ q), (k :: q = p ++ p), (k :: q = p ++ ql), (k :: q = p ++ pl), (k :: q = ql ++ q), (k :: q = ql ++ p), (k :: q = ql ++ ql)
(k :: q = ql ++ pl), (k :: q = pl ++ q), (k :: q = pl ++ p), (k :: q = pl ++ ql), (k :: q = pl ++ pl), (k :: q = []), (k :: p = q), (k :: p = p), (k :: p = ql), (k :: p = pl)
(k :: p = merge q q), (k :: p = merge q p), (k :: p = merge q ql), (k :: p = merge q pl), (k :: p = merge p q), (k :: p = merge p p), (k :: p = merge p ql), (k :: p = merge p pl), (k :: p = merge ql q), (k :: p = merge ql p)
(k :: p = merge ql ql), (k :: p = merge ql pl), (k :: p = merge pl q), (k :: p = merge pl p), (k :: p = merge pl ql), (k :: p = merge pl pl), (k :: p = insert a q), (k :: p = insert a p), (k :: p = insert a ql), (k :: p = insert a pl)
(k :: p = insert k q), (k :: p = insert k p), (k :: p = insert k ql), (k :: p = insert k pl), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = maybe_swap ql), (k :: p = maybe_swap pl), (k :: p = q ++ q), (k :: p = q ++ p)
(k :: p = q ++ ql), (k :: p = q ++ pl), (k :: p = p ++ q), (k :: p = p ++ p), (k :: p = p ++ ql), (k :: p = p ++ pl), (k :: p = ql ++ q), (k :: p = ql ++ p), (k :: p = ql ++ ql), (k :: p = ql ++ pl)
(k :: p = pl ++ q), (k :: p = pl ++ p), (k :: p = pl ++ ql), (k :: p = pl ++ pl), (k :: p = []), (k :: ql = q), (k :: ql = p), (k :: ql = ql), (k :: ql = pl), (k :: ql = merge q q)
(k :: ql = merge q p), (k :: ql = merge q ql), (k :: ql = merge q pl), (k :: ql = merge p q), (k :: ql = merge p p), (k :: ql = merge p ql), (k :: ql = merge p pl), (k :: ql = merge ql q), (k :: ql = merge ql p), (k :: ql = merge ql ql)
(k :: ql = merge ql pl), (k :: ql = merge pl q), (k :: ql = merge pl p), (k :: ql = merge pl ql), (k :: ql = merge pl pl), (k :: ql = insert a q), (k :: ql = insert a p), (k :: ql = insert a ql), (k :: ql = insert a pl), (k :: ql = insert k q)
(k :: ql = insert k p), (k :: ql = insert k ql), (k :: ql = insert k pl), (k :: ql = maybe_swap q), (k :: ql = maybe_swap p), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap pl), (k :: ql = q ++ q), (k :: ql = q ++ p), (k :: ql = q ++ ql)
(k :: ql = q ++ pl), (k :: ql = p ++ q), (k :: ql = p ++ p), (k :: ql = p ++ ql), (k :: ql = p ++ pl), (k :: ql = ql ++ q), (k :: ql = ql ++ p), (k :: ql = ql ++ ql), (k :: ql = ql ++ pl), (k :: ql = pl ++ q)
(k :: ql = pl ++ p), (k :: ql = pl ++ ql), (k :: ql = pl ++ pl), (k :: ql = []), (k :: pl = q), (k :: pl = p), (k :: pl = ql), (k :: pl = pl), (k :: pl = merge q q), (k :: pl = merge q p)
(k :: pl = merge q ql), (k :: pl = merge q pl), (k :: pl = merge p q), (k :: pl = merge p p), (k :: pl = merge p ql), (k :: pl = merge p pl), (k :: pl = merge ql q), (k :: pl = merge ql p), (k :: pl = merge ql ql), (k :: pl = merge ql pl)
(k :: pl = merge pl q), (k :: pl = merge pl p), (k :: pl = merge pl ql), (k :: pl = merge pl pl), (k :: pl = insert a q), (k :: pl = insert a p), (k :: pl = insert a ql), (k :: pl = insert a pl), (k :: pl = insert k q), (k :: pl = insert k p)
(k :: pl = insert k ql), (k :: pl = insert k pl), (k :: pl = maybe_swap q), (k :: pl = maybe_swap p), (k :: pl = maybe_swap ql), (k :: pl = maybe_swap pl), (k :: pl = q ++ q), (k :: pl = q ++ p), (k :: pl = q ++ ql), (k :: pl = q ++ pl)
(k :: pl = p ++ q), (k :: pl = p ++ p), (k :: pl = p ++ ql), (k :: pl = p ++ pl), (k :: pl = ql ++ q), (k :: pl = ql ++ p), (k :: pl = ql ++ ql), (k :: pl = ql ++ pl), (k :: pl = pl ++ q), (k :: pl = pl ++ p)
(k :: pl = pl ++ ql), (k :: pl = pl ++ pl), (k :: pl = []), (merge q q = q), (merge q q = p), (merge q q = ql), (merge q q = pl), (merge q q = insert a q), (merge q q = insert a p), (merge q q = insert a ql)
(merge q q = insert a pl), (merge q q = insert k q), (merge q q = insert k p), (merge q q = insert k ql), (merge q q = insert k pl), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = maybe_swap ql), (merge q q = maybe_swap pl), (merge q q = q ++ q)
(merge q q = q ++ p), (merge q q = q ++ ql), (merge q q = q ++ pl), (merge q q = p ++ q), (merge q q = p ++ p), (merge q q = p ++ ql), (merge q q = p ++ pl), (merge q q = ql ++ q), (merge q q = ql ++ p), (merge q q = ql ++ ql)
(merge q q = ql ++ pl), (merge q q = pl ++ q), (merge q q = pl ++ p), (merge q q = pl ++ ql), (merge q q = pl ++ pl), (merge q p = q), (merge q p = p), (merge q p = ql), (merge q p = pl), (merge q p = insert a q)
(merge q p = insert a p), (merge q p = insert a ql), (merge q p = insert a pl), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert k ql), (merge q p = insert k pl), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = maybe_swap ql)
(merge q p = maybe_swap pl), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = q ++ ql), (merge q p = q ++ pl), (merge q p = p ++ q), (merge q p = p ++ p), (merge q p = p ++ ql), (merge q p = p ++ pl), (merge q p = ql ++ q)
(merge q p = ql ++ p), (merge q p = ql ++ ql), (merge q p = ql ++ pl), (merge q p = pl ++ q), (merge q p = pl ++ p), (merge q p = pl ++ ql), (merge q p = pl ++ pl), (merge q ql = q), (merge q ql = p), (merge q ql = ql)
(merge q ql = pl), (merge q ql = insert a q), (merge q ql = insert a p), (merge q ql = insert a ql), (merge q ql = insert a pl), (merge q ql = insert k q), (merge q ql = insert k p), (merge q ql = insert k ql), (merge q ql = insert k pl), (merge q ql = maybe_swap q)
(merge q ql = maybe_swap p), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap pl), (merge q ql = q ++ q), (merge q ql = q ++ p), (merge q ql = q ++ ql), (merge q ql = q ++ pl), (merge q ql = p ++ q), (merge q ql = p ++ p), (merge q ql = p ++ ql)
(merge q ql = p ++ pl), (merge q ql = ql ++ q), (merge q ql = ql ++ p), (merge q ql = ql ++ ql), (merge q ql = ql ++ pl), (merge q ql = pl ++ q), (merge q ql = pl ++ p), (merge q ql = pl ++ ql), (merge q ql = pl ++ pl), (merge q pl = q)
(merge q pl = p), (merge q pl = ql), (merge q pl = pl), (merge q pl = insert a q), (merge q pl = insert a p), (merge q pl = insert a ql), (merge q pl = insert a pl), (merge q pl = insert k q), (merge q pl = insert k p), (merge q pl = insert k ql)
(merge q pl = insert k pl), (merge q pl = maybe_swap q), (merge q pl = maybe_swap p), (merge q pl = maybe_swap ql), (merge q pl = maybe_swap pl), (merge q pl = q ++ q), (merge q pl = q ++ p), (merge q pl = q ++ ql), (merge q pl = q ++ pl), (merge q pl = p ++ q)
(merge q pl = p ++ p), (merge q pl = p ++ ql), (merge q pl = p ++ pl), (merge q pl = ql ++ q), (merge q pl = ql ++ p), (merge q pl = ql ++ ql), (merge q pl = ql ++ pl), (merge q pl = pl ++ q), (merge q pl = pl ++ p), (merge q pl = pl ++ ql)
(merge q pl = pl ++ pl), (merge p q = q), (merge p q = p), (merge p q = ql), (merge p q = pl), (merge p q = insert a q), (merge p q = insert a p), (merge p q = insert a ql), (merge p q = insert a pl), (merge p q = insert k q)
(merge p q = insert k p), (merge p q = insert k ql), (merge p q = insert k pl), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = maybe_swap ql), (merge p q = maybe_swap pl), (merge p q = q ++ q), (merge p q = q ++ p), (merge p q = q ++ ql)
(merge p q = q ++ pl), (merge p q = p ++ q), (merge p q = p ++ p), (merge p q = p ++ ql), (merge p q = p ++ pl), (merge p q = ql ++ q), (merge p q = ql ++ p), (merge p q = ql ++ ql), (merge p q = ql ++ pl), (merge p q = pl ++ q)
(merge p q = pl ++ p), (merge p q = pl ++ ql), (merge p q = pl ++ pl), (merge p p = q), (merge p p = p), (merge p p = ql), (merge p p = pl), (merge p p = insert a q), (merge p p = insert a p), (merge p p = insert a ql)
(merge p p = insert a pl), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert k ql), (merge p p = insert k pl), (merge p p = maybe_swap q), (merge p p = maybe_swap p), (merge p p = maybe_swap ql), (merge p p = maybe_swap pl), (merge p p = q ++ q)
(merge p p = q ++ p), (merge p p = q ++ ql), (merge p p = q ++ pl), (merge p p = p ++ q), (merge p p = p ++ p), (merge p p = p ++ ql), (merge p p = p ++ pl), (merge p p = ql ++ q), (merge p p = ql ++ p), (merge p p = ql ++ ql)
(merge p p = ql ++ pl), (merge p p = pl ++ q), (merge p p = pl ++ p), (merge p p = pl ++ ql), (merge p p = pl ++ pl), (merge p ql = q), (merge p ql = p), (merge p ql = ql), (merge p ql = pl), (merge p ql = insert a q)
(merge p ql = insert a p), (merge p ql = insert a ql), (merge p ql = insert a pl), (merge p ql = insert k q), (merge p ql = insert k p), (merge p ql = insert k ql), (merge p ql = insert k pl), (merge p ql = maybe_swap q), (merge p ql = maybe_swap p), (merge p ql = maybe_swap ql)
(merge p ql = maybe_swap pl), (merge p ql = q ++ q), (merge p ql = q ++ p), (merge p ql = q ++ ql), (merge p ql = q ++ pl), (merge p ql = p ++ q), (merge p ql = p ++ p), (merge p ql = p ++ ql), (merge p ql = p ++ pl), (merge p ql = ql ++ q)
(merge p ql = ql ++ p), (merge p ql = ql ++ ql), (merge p ql = ql ++ pl), (merge p ql = pl ++ q), (merge p ql = pl ++ p), (merge p ql = pl ++ ql), (merge p ql = pl ++ pl), (merge p pl = q), (merge p pl = p), (merge p pl = ql)
(merge p pl = pl), (merge p pl = insert a q), (merge p pl = insert a p), (merge p pl = insert a ql), (merge p pl = insert a pl), (merge p pl = insert k q), (merge p pl = insert k p), (merge p pl = insert k ql), (merge p pl = insert k pl), (merge p pl = maybe_swap q)
(merge p pl = maybe_swap p), (merge p pl = maybe_swap ql), (merge p pl = maybe_swap pl), (merge p pl = q ++ q), (merge p pl = q ++ p), (merge p pl = q ++ ql), (merge p pl = q ++ pl), (merge p pl = p ++ q), (merge p pl = p ++ p), (merge p pl = p ++ ql)
(merge p pl = p ++ pl), (merge p pl = ql ++ q), (merge p pl = ql ++ p), (merge p pl = ql ++ ql), (merge p pl = ql ++ pl), (merge p pl = pl ++ q), (merge p pl = pl ++ p), (merge p pl = pl ++ ql), (merge p pl = pl ++ pl), (merge ql q = q)
(merge ql q = p), (merge ql q = ql), (merge ql q = pl), (merge ql q = insert a q), (merge ql q = insert a p), (merge ql q = insert a ql), (merge ql q = insert a pl), (merge ql q = insert k q), (merge ql q = insert k p), (merge ql q = insert k ql)
(merge ql q = insert k pl), (merge ql q = maybe_swap q), (merge ql q = maybe_swap p), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap pl), (merge ql q = q ++ q), (merge ql q = q ++ p), (merge ql q = q ++ ql), (merge ql q = q ++ pl), (merge ql q = p ++ q)
(merge ql q = p ++ p), (merge ql q = p ++ ql), (merge ql q = p ++ pl), (merge ql q = ql ++ q), (merge ql q = ql ++ p), (merge ql q = ql ++ ql), (merge ql q = ql ++ pl), (merge ql q = pl ++ q), (merge ql q = pl ++ p), (merge ql q = pl ++ ql)
(merge ql q = pl ++ pl), (merge ql p = q), (merge ql p = p), (merge ql p = ql), (merge ql p = pl), (merge ql p = insert a q), (merge ql p = insert a p), (merge ql p = insert a ql), (merge ql p = insert a pl), (merge ql p = insert k q)
(merge ql p = insert k p), (merge ql p = insert k ql), (merge ql p = insert k pl), (merge ql p = maybe_swap q), (merge ql p = maybe_swap p), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap pl), (merge ql p = q ++ q), (merge ql p = q ++ p), (merge ql p = q ++ ql)
(merge ql p = q ++ pl), (merge ql p = p ++ q), (merge ql p = p ++ p), (merge ql p = p ++ ql), (merge ql p = p ++ pl), (merge ql p = ql ++ q), (merge ql p = ql ++ p), (merge ql p = ql ++ ql), (merge ql p = ql ++ pl), (merge ql p = pl ++ q)
(merge ql p = pl ++ p), (merge ql p = pl ++ ql), (merge ql p = pl ++ pl), (merge ql ql = q), (merge ql ql = p), (merge ql ql = ql), (merge ql ql = pl), (merge ql ql = insert a q), (merge ql ql = insert a p), (merge ql ql = insert a ql)
(merge ql ql = insert a pl), (merge ql ql = insert k q), (merge ql ql = insert k p), (merge ql ql = insert k ql), (merge ql ql = insert k pl), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap p), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap pl), (merge ql ql = q ++ q)
(merge ql ql = q ++ p), (merge ql ql = q ++ ql), (merge ql ql = q ++ pl), (merge ql ql = p ++ q), (merge ql ql = p ++ p), (merge ql ql = p ++ ql), (merge ql ql = p ++ pl), (merge ql ql = ql ++ q), (merge ql ql = ql ++ p), (merge ql ql = ql ++ ql)
(merge ql ql = ql ++ pl), (merge ql ql = pl ++ q), (merge ql ql = pl ++ p), (merge ql ql = pl ++ ql), (merge ql ql = pl ++ pl), (merge ql pl = q), (merge ql pl = p), (merge ql pl = ql), (merge ql pl = pl), (merge ql pl = insert a q)
(merge ql pl = insert a p), (merge ql pl = insert a ql), (merge ql pl = insert a pl), (merge ql pl = insert k q), (merge ql pl = insert k p), (merge ql pl = insert k ql), (merge ql pl = insert k pl), (merge ql pl = maybe_swap q), (merge ql pl = maybe_swap p), (merge ql pl = maybe_swap ql)
(merge ql pl = maybe_swap pl), (merge ql pl = q ++ q), (merge ql pl = q ++ p), (merge ql pl = q ++ ql), (merge ql pl = q ++ pl), (merge ql pl = p ++ q), (merge ql pl = p ++ p), (merge ql pl = p ++ ql), (merge ql pl = p ++ pl), (merge ql pl = ql ++ q)
(merge ql pl = ql ++ p), (merge ql pl = ql ++ ql), (merge ql pl = ql ++ pl), (merge ql pl = pl ++ q), (merge ql pl = pl ++ p), (merge ql pl = pl ++ ql), (merge ql pl = pl ++ pl), (merge pl q = q), (merge pl q = p), (merge pl q = ql)
(merge pl q = pl), (merge pl q = insert a q), (merge pl q = insert a p), (merge pl q = insert a ql), (merge pl q = insert a pl), (merge pl q = insert k q), (merge pl q = insert k p), (merge pl q = insert k ql), (merge pl q = insert k pl), (merge pl q = maybe_swap q)
(merge pl q = maybe_swap p), (merge pl q = maybe_swap ql), (merge pl q = maybe_swap pl), (merge pl q = q ++ q), (merge pl q = q ++ p), (merge pl q = q ++ ql), (merge pl q = q ++ pl), (merge pl q = p ++ q), (merge pl q = p ++ p), (merge pl q = p ++ ql)
(merge pl q = p ++ pl), (merge pl q = ql ++ q), (merge pl q = ql ++ p), (merge pl q = ql ++ ql), (merge pl q = ql ++ pl), (merge pl q = pl ++ q), (merge pl q = pl ++ p), (merge pl q = pl ++ ql), (merge pl q = pl ++ pl), (merge pl p = q)
(merge pl p = p), (merge pl p = ql), (merge pl p = pl), (merge pl p = insert a q), (merge pl p = insert a p), (merge pl p = insert a ql), (merge pl p = insert a pl), (merge pl p = insert k q), (merge pl p = insert k p), (merge pl p = insert k ql)
(merge pl p = insert k pl), (merge pl p = maybe_swap q), (merge pl p = maybe_swap p), (merge pl p = maybe_swap ql), (merge pl p = maybe_swap pl), (merge pl p = q ++ q), (merge pl p = q ++ p), (merge pl p = q ++ ql), (merge pl p = q ++ pl), (merge pl p = p ++ q)
(merge pl p = p ++ p), (merge pl p = p ++ ql), (merge pl p = p ++ pl), (merge pl p = ql ++ q), (merge pl p = ql ++ p), (merge pl p = ql ++ ql), (merge pl p = ql ++ pl), (merge pl p = pl ++ q), (merge pl p = pl ++ p), (merge pl p = pl ++ ql)
(merge pl p = pl ++ pl), (merge pl ql = q), (merge pl ql = p), (merge pl ql = ql), (merge pl ql = pl), (merge pl ql = insert a q), (merge pl ql = insert a p), (merge pl ql = insert a ql), (merge pl ql = insert a pl), (merge pl ql = insert k q)
(merge pl ql = insert k p), (merge pl ql = insert k ql), (merge pl ql = insert k pl), (merge pl ql = maybe_swap q), (merge pl ql = maybe_swap p), (merge pl ql = maybe_swap ql), (merge pl ql = maybe_swap pl), (merge pl ql = q ++ q), (merge pl ql = q ++ p), (merge pl ql = q ++ ql)
(merge pl ql = q ++ pl), (merge pl ql = p ++ q), (merge pl ql = p ++ p), (merge pl ql = p ++ ql), (merge pl ql = p ++ pl), (merge pl ql = ql ++ q), (merge pl ql = ql ++ p), (merge pl ql = ql ++ ql), (merge pl ql = ql ++ pl), (merge pl ql = pl ++ q)
(merge pl ql = pl ++ p), (merge pl ql = pl ++ ql), (merge pl ql = pl ++ pl), (merge pl pl = q), (merge pl pl = p), (merge pl pl = ql), (merge pl pl = pl), (merge pl pl = insert a q), (merge pl pl = insert a p), (merge pl pl = insert a ql)
(merge pl pl = insert a pl), (merge pl pl = insert k q), (merge pl pl = insert k p), (merge pl pl = insert k ql), (merge pl pl = insert k pl), (merge pl pl = maybe_swap q), (merge pl pl = maybe_swap p), (merge pl pl = maybe_swap ql), (merge pl pl = maybe_swap pl), (merge pl pl = q ++ q)
(merge pl pl = q ++ p), (merge pl pl = q ++ ql), (merge pl pl = q ++ pl), (merge pl pl = p ++ q), (merge pl pl = p ++ p), (merge pl pl = p ++ ql), (merge pl pl = p ++ pl), (merge pl pl = ql ++ q), (merge pl pl = ql ++ p), (merge pl pl = ql ++ ql)
(merge pl pl = ql ++ pl), (merge pl pl = pl ++ q), (merge pl pl = pl ++ p), (merge pl pl = pl ++ ql), (merge pl pl = pl ++ pl), (insert a q = q), (insert a q = p), (insert a q = ql), (insert a q = pl), (insert a q = q ++ q)
(insert a q = q ++ p), (insert a q = q ++ ql), (insert a q = q ++ pl), (insert a q = p ++ q), (insert a q = p ++ p), (insert a q = p ++ ql), (insert a q = p ++ pl), (insert a q = ql ++ q), (insert a q = ql ++ p), (insert a q = ql ++ ql)
(insert a q = ql ++ pl), (insert a q = pl ++ q), (insert a q = pl ++ p), (insert a q = pl ++ ql), (insert a q = pl ++ pl), (insert a p = q), (insert a p = p), (insert a p = ql), (insert a p = pl), (insert a p = q ++ q)
(insert a p = q ++ p), (insert a p = q ++ ql), (insert a p = q ++ pl), (insert a p = p ++ q), (insert a p = p ++ p), (insert a p = p ++ ql), (insert a p = p ++ pl), (insert a p = ql ++ q), (insert a p = ql ++ p), (insert a p = ql ++ ql)
(insert a p = ql ++ pl), (insert a p = pl ++ q), (insert a p = pl ++ p), (insert a p = pl ++ ql), (insert a p = pl ++ pl), (insert a ql = q), (insert a ql = p), (insert a ql = ql), (insert a ql = pl), (insert a ql = q ++ q)
(insert a ql = q ++ p), (insert a ql = q ++ ql), (insert a ql = q ++ pl), (insert a ql = p ++ q), (insert a ql = p ++ p), (insert a ql = p ++ ql), (insert a ql = p ++ pl), (insert a ql = ql ++ q), (insert a ql = ql ++ p), (insert a ql = ql ++ ql)
(insert a ql = ql ++ pl), (insert a ql = pl ++ q), (insert a ql = pl ++ p), (insert a ql = pl ++ ql), (insert a ql = pl ++ pl), (insert a pl = q), (insert a pl = p), (insert a pl = ql), (insert a pl = pl), (insert a pl = q ++ q)
(insert a pl = q ++ p), (insert a pl = q ++ ql), (insert a pl = q ++ pl), (insert a pl = p ++ q), (insert a pl = p ++ p), (insert a pl = p ++ ql), (insert a pl = p ++ pl), (insert a pl = ql ++ q), (insert a pl = ql ++ p), (insert a pl = ql ++ ql)
(insert a pl = ql ++ pl), (insert a pl = pl ++ q), (insert a pl = pl ++ p), (insert a pl = pl ++ ql), (insert a pl = pl ++ pl), (insert k q = q), (insert k q = p), (insert k q = ql), (insert k q = pl), (insert k q = q ++ q)
(insert k q = q ++ p), (insert k q = q ++ ql), (insert k q = q ++ pl), (insert k q = p ++ q), (insert k q = p ++ p), (insert k q = p ++ ql), (insert k q = p ++ pl), (insert k q = ql ++ q), (insert k q = ql ++ p), (insert k q = ql ++ ql)
(insert k q = ql ++ pl), (insert k q = pl ++ q), (insert k q = pl ++ p), (insert k q = pl ++ ql), (insert k q = pl ++ pl), (insert k p = q), (insert k p = p), (insert k p = ql), (insert k p = pl), (insert k p = q ++ q)
(insert k p = q ++ p), (insert k p = q ++ ql), (insert k p = q ++ pl), (insert k p = p ++ q), (insert k p = p ++ p), (insert k p = p ++ ql), (insert k p = p ++ pl), (insert k p = ql ++ q), (insert k p = ql ++ p), (insert k p = ql ++ ql)
(insert k p = ql ++ pl), (insert k p = pl ++ q), (insert k p = pl ++ p), (insert k p = pl ++ ql), (insert k p = pl ++ pl), (insert k ql = q), (insert k ql = p), (insert k ql = ql), (insert k ql = pl), (insert k ql = q ++ q)
(insert k ql = q ++ p), (insert k ql = q ++ ql), (insert k ql = q ++ pl), (insert k ql = p ++ q), (insert k ql = p ++ p), (insert k ql = p ++ ql), (insert k ql = p ++ pl), (insert k ql = ql ++ q), (insert k ql = ql ++ p), (insert k ql = ql ++ ql)
(insert k ql = ql ++ pl), (insert k ql = pl ++ q), (insert k ql = pl ++ p), (insert k ql = pl ++ ql), (insert k ql = pl ++ pl), (insert k pl = q), (insert k pl = p), (insert k pl = ql), (insert k pl = pl), (insert k pl = q ++ q)
(insert k pl = q ++ p), (insert k pl = q ++ ql), (insert k pl = q ++ pl), (insert k pl = p ++ q), (insert k pl = p ++ p), (insert k pl = p ++ ql), (insert k pl = p ++ pl), (insert k pl = ql ++ q), (insert k pl = ql ++ p), (insert k pl = ql ++ ql)
(insert k pl = ql ++ pl), (insert k pl = pl ++ q), (insert k pl = pl ++ p), (insert k pl = pl ++ ql), (insert k pl = pl ++ pl), (maybe_swap q = q), (maybe_swap q = p), (maybe_swap q = ql), (maybe_swap q = pl), (maybe_swap q = insert a q)
(maybe_swap q = insert a p), (maybe_swap q = insert a ql), (maybe_swap q = insert a pl), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert k ql), (maybe_swap q = insert k pl), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = q ++ ql)
(maybe_swap q = q ++ pl), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ pl), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ p), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ pl), (maybe_swap q = pl ++ q)
(maybe_swap q = pl ++ p), (maybe_swap q = pl ++ ql), (maybe_swap q = pl ++ pl), (maybe_swap p = q), (maybe_swap p = p), (maybe_swap p = ql), (maybe_swap p = pl), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = insert a ql)
(maybe_swap p = insert a pl), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert k ql), (maybe_swap p = insert k pl), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ pl), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ p), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ pl), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ p), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ pl), (maybe_swap p = pl ++ q), (maybe_swap p = pl ++ p), (maybe_swap p = pl ++ ql)
(maybe_swap p = pl ++ pl), (maybe_swap ql = q), (maybe_swap ql = p), (maybe_swap ql = ql), (maybe_swap ql = pl), (maybe_swap ql = insert a q), (maybe_swap ql = insert a p), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a pl), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k p), (maybe_swap ql = insert k ql), (maybe_swap ql = insert k pl), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ p), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ pl), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ p), (maybe_swap ql = p ++ ql)
(maybe_swap ql = p ++ pl), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ p), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ pl), (maybe_swap ql = pl ++ q), (maybe_swap ql = pl ++ p), (maybe_swap ql = pl ++ ql), (maybe_swap ql = pl ++ pl), (maybe_swap pl = q)
(maybe_swap pl = p), (maybe_swap pl = ql), (maybe_swap pl = pl), (maybe_swap pl = insert a q), (maybe_swap pl = insert a p), (maybe_swap pl = insert a ql), (maybe_swap pl = insert a pl), (maybe_swap pl = insert k q), (maybe_swap pl = insert k p), (maybe_swap pl = insert k ql)
(maybe_swap pl = insert k pl), (maybe_swap pl = q ++ q), (maybe_swap pl = q ++ p), (maybe_swap pl = q ++ ql), (maybe_swap pl = q ++ pl), (maybe_swap pl = p ++ q), (maybe_swap pl = p ++ p), (maybe_swap pl = p ++ ql), (maybe_swap pl = p ++ pl), (maybe_swap pl = ql ++ q)
(maybe_swap pl = ql ++ p), (maybe_swap pl = ql ++ ql), (maybe_swap pl = ql ++ pl), (maybe_swap pl = pl ++ q), (maybe_swap pl = pl ++ p), (maybe_swap pl = pl ++ ql), (maybe_swap pl = pl ++ pl), (q ++ q = q), (q ++ q = p), (q ++ q = ql)
(q ++ q = pl), (q ++ p = q), (q ++ p = p), (q ++ p = ql), (q ++ p = pl), (q ++ ql = q), (q ++ ql = p), (q ++ ql = ql), (q ++ ql = pl), (q ++ pl = q)
(q ++ pl = p), (q ++ pl = ql), (q ++ pl = pl), (p ++ q = q), (p ++ q = p), (p ++ q = ql), (p ++ q = pl), (p ++ p = q), (p ++ p = p), (p ++ p = ql)
(p ++ p = pl), (p ++ ql = q), (p ++ ql = p), (p ++ ql = ql), (p ++ ql = pl), (p ++ pl = q), (p ++ pl = p), (p ++ pl = ql), (p ++ pl = pl), (ql ++ q = q)
(ql ++ q = p), (ql ++ q = ql), (ql ++ q = pl), (ql ++ p = q), (ql ++ p = p), (ql ++ p = ql), (ql ++ p = pl), (ql ++ ql = q), (ql ++ ql = p), (ql ++ ql = ql)
(ql ++ ql = pl), (ql ++ pl = q), (ql ++ pl = p), (ql ++ pl = ql), (ql ++ pl = pl), (pl ++ q = q), (pl ++ q = p), (pl ++ q = ql), (pl ++ q = pl), (pl ++ p = q)
(pl ++ p = p), (pl ++ p = ql), (pl ++ p = pl), (pl ++ ql = q), (pl ++ ql = p), (pl ++ ql = ql), (pl ++ ql = pl), (pl ++ pl = q), (pl ++ pl = p), (pl ++ pl = ql)
(pl ++ pl = pl), ([] = q), ([] = p), ([] = ql), ([] = pl), ([] = merge q q), ([] = merge q p), ([] = merge q ql), ([] = merge q pl), ([] = merge p q)
([] = merge p p), ([] = merge p ql), ([] = merge p pl), ([] = merge ql q), ([] = merge ql p), ([] = merge ql ql), ([] = merge ql pl), ([] = merge pl q), ([] = merge pl p), ([] = merge pl ql)
([] = merge pl pl), ([] = insert a q), ([] = insert a p), ([] = insert a ql), ([] = insert a pl), ([] = insert k q), ([] = insert k p), ([] = insert k ql), ([] = insert k pl), ([] = maybe_swap q)
([] = maybe_swap p), ([] = maybe_swap ql), ([] = maybe_swap pl), ([] = q ++ q), ([] = q ++ p), ([] = q ++ ql), ([] = q ++ pl), ([] = p ++ q), ([] = p ++ p), ([] = p ++ ql)
([] = p ++ pl), ([] = ql ++ q), ([] = ql ++ p), ([] = ql ++ ql), ([] = ql ++ pl), ([] = pl ++ q), ([] = pl ++ p), ([] = pl ++ ql), ([] = pl ++ pl), (None = Some a)
(None = Some k), ((a, q) = select a q), ((a, q) = select a p), ((a, q) = select a ql), ((a, q) = select a pl), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select k ql), ((a, q) = select k pl), ((a, p) = select a q)
((a, p) = select a p), ((a, p) = select a ql), ((a, p) = select a pl), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select k ql), ((a, p) = select k pl), ((a, ql) = select a q), ((a, ql) = select a p), ((a, ql) = select a ql)
((a, ql) = select a pl), ((a, ql) = select k q), ((a, ql) = select k p), ((a, ql) = select k ql), ((a, ql) = select k pl), ((a, pl) = select a q), ((a, pl) = select a p), ((a, pl) = select a ql), ((a, pl) = select a pl), ((a, pl) = select k q)
((a, pl) = select k p), ((a, pl) = select k ql), ((a, pl) = select k pl), ((k, q) = select a q), ((k, q) = select a p), ((k, q) = select a ql), ((k, q) = select a pl), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select k ql)
((k, q) = select k pl), ((k, p) = select a q), ((k, p) = select a p), ((k, p) = select a ql), ((k, p) = select a pl), ((k, p) = select k q), ((k, p) = select k p), ((k, p) = select k ql), ((k, p) = select k pl), ((k, ql) = select a q)
((k, ql) = select a p), ((k, ql) = select a ql), ((k, ql) = select a pl), ((k, ql) = select k q), ((k, ql) = select k p), ((k, ql) = select k ql), ((k, ql) = select k pl), ((k, pl) = select a q), ((k, pl) = select a p), ((k, pl) = select a ql)
((k, pl) = select a pl), ((k, pl) = select k q), ((k, pl) = select k p), ((k, pl) = select k ql), ((k, pl) = select k pl), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (k >=? k)), ((a >? k) = (a >=? a))
((a >? k) = (a >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (k >=? k)), ((k >? a) = (a >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (k >=? k)), ((k >? k) = (a >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (k >=? a))
((k >? k) = (k >=? k)), (length q = a), (length q = k), (length p = a), (length p = k), (length ql = a), (length ql = k), (length pl = a), (length pl = k)

Label: 2 (2)
(Abs q q), (Abs q p), (Abs q ql), (Abs q pl), (Abs p q), (Abs p p), (Abs p ql), (Abs p pl), (Abs ql q), (Abs ql p)
(Abs ql ql), (Abs ql pl), (Abs pl q), (Abs pl p), (Abs pl ql), (Abs pl pl), (priq q), (priq p), (priq ql), (priq pl)
(Permutation q q), (Permutation q p), (Permutation q ql), (Permutation q pl), (Permutation p q), (Permutation p p), (Permutation p ql), (Permutation p pl), (Permutation ql q), (Permutation ql p)
(Permutation ql ql), (Permutation ql pl), (Permutation pl q), (Permutation pl p), (Permutation pl ql), (Permutation pl pl), (In a q), (In a p), (In a ql), (In a pl)
(In k q), (In k p), (In k ql), (In k pl), (a < a), (a < k), (k < a), (k < k), (a <= a), (a <= k)
(k <= a), (k <= k), (a = a), (a = k), (k = a), (k = k), (q = q), (q = p), (q = ql), (q = pl)
(p = q), (p = p), (p = ql), (p = pl), (ql = q), (ql = p), (ql = ql), (ql = pl), (pl = q), (pl = p)
(pl = ql), (pl = pl), (false = (a >? a)), (false = (a >? k)), (false = (k >? a)), (false = (k >? k)), (false = (a >=? a)), (false = (a >=? k)), (false = (k >=? a)), (false = (k >=? k))
(true = (a >? a)), (true = (a >? k)), (true = (k >? a)), (true = (k >? k)), (true = (a >=? a)), (true = (a >=? k)), (true = (k >=? a)), (true = (k >=? k)), (Abs q (a :: q)), (Abs q (a :: p))
(Abs q (a :: ql)), (Abs q (a :: pl)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (k :: ql)), (Abs q (k :: pl)), (Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge q ql)), (Abs q (merge q pl))
(Abs q (merge p q)), (Abs q (merge p p)), (Abs q (merge p ql)), (Abs q (merge p pl)), (Abs q (merge ql q)), (Abs q (merge ql p)), (Abs q (merge ql ql)), (Abs q (merge ql pl)), (Abs q (merge pl q)), (Abs q (merge pl p))
(Abs q (merge pl ql)), (Abs q (merge pl pl)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (insert a ql)), (Abs q (insert a pl)), (Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert k ql)), (Abs q (insert k pl))
(Abs q (maybe_swap q)), (Abs q (maybe_swap p)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap pl)), (Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (q ++ ql)), (Abs q (q ++ pl)), (Abs q (p ++ q)), (Abs q (p ++ p))
(Abs q (p ++ ql)), (Abs q (p ++ pl)), (Abs q (ql ++ q)), (Abs q (ql ++ p)), (Abs q (ql ++ ql)), (Abs q (ql ++ pl)), (Abs q (pl ++ q)), (Abs q (pl ++ p)), (Abs q (pl ++ ql)), (Abs q (pl ++ pl))
(Abs q []), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (a :: ql)), (Abs p (a :: pl)), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (k :: ql)), (Abs p (k :: pl)), (Abs p (merge q q))
(Abs p (merge q p)), (Abs p (merge q ql)), (Abs p (merge q pl)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (merge p ql)), (Abs p (merge p pl)), (Abs p (merge ql q)), (Abs p (merge ql p)), (Abs p (merge ql ql))
(Abs p (merge ql pl)), (Abs p (merge pl q)), (Abs p (merge pl p)), (Abs p (merge pl ql)), (Abs p (merge pl pl)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (insert a ql)), (Abs p (insert a pl)), (Abs p (insert k q))
(Abs p (insert k p)), (Abs p (insert k ql)), (Abs p (insert k pl)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap pl)), (Abs p (q ++ q)), (Abs p (q ++ p)), (Abs p (q ++ ql))
(Abs p (q ++ pl)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p (p ++ ql)), (Abs p (p ++ pl)), (Abs p (ql ++ q)), (Abs p (ql ++ p)), (Abs p (ql ++ ql)), (Abs p (ql ++ pl)), (Abs p (pl ++ q))
(Abs p (pl ++ p)), (Abs p (pl ++ ql)), (Abs p (pl ++ pl)), (Abs p []), (Abs ql (a :: q)), (Abs ql (a :: p)), (Abs ql (a :: ql)), (Abs ql (a :: pl)), (Abs ql (k :: q)), (Abs ql (k :: p))
(Abs ql (k :: ql)), (Abs ql (k :: pl)), (Abs ql (merge q q)), (Abs ql (merge q p)), (Abs ql (merge q ql)), (Abs ql (merge q pl)), (Abs ql (merge p q)), (Abs ql (merge p p)), (Abs ql (merge p ql)), (Abs ql (merge p pl))
(Abs ql (merge ql q)), (Abs ql (merge ql p)), (Abs ql (merge ql ql)), (Abs ql (merge ql pl)), (Abs ql (merge pl q)), (Abs ql (merge pl p)), (Abs ql (merge pl ql)), (Abs ql (merge pl pl)), (Abs ql (insert a q)), (Abs ql (insert a p))
(Abs ql (insert a ql)), (Abs ql (insert a pl)), (Abs ql (insert k q)), (Abs ql (insert k p)), (Abs ql (insert k ql)), (Abs ql (insert k pl)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap p)), (Abs ql (maybe_swap ql)), (Abs ql (maybe_swap pl))
(Abs ql (q ++ q)), (Abs ql (q ++ p)), (Abs ql (q ++ ql)), (Abs ql (q ++ pl)), (Abs ql (p ++ q)), (Abs ql (p ++ p)), (Abs ql (p ++ ql)), (Abs ql (p ++ pl)), (Abs ql (ql ++ q)), (Abs ql (ql ++ p))
(Abs ql (ql ++ ql)), (Abs ql (ql ++ pl)), (Abs ql (pl ++ q)), (Abs ql (pl ++ p)), (Abs ql (pl ++ ql)), (Abs ql (pl ++ pl)), (Abs ql []), (Abs pl (a :: q)), (Abs pl (a :: p)), (Abs pl (a :: ql))
(Abs pl (a :: pl)), (Abs pl (k :: q)), (Abs pl (k :: p)), (Abs pl (k :: ql)), (Abs pl (k :: pl)), (Abs pl (merge q q)), (Abs pl (merge q p)), (Abs pl (merge q ql)), (Abs pl (merge q pl)), (Abs pl (merge p q))
(Abs pl (merge p p)), (Abs pl (merge p ql)), (Abs pl (merge p pl)), (Abs pl (merge ql q)), (Abs pl (merge ql p)), (Abs pl (merge ql ql)), (Abs pl (merge ql pl)), (Abs pl (merge pl q)), (Abs pl (merge pl p)), (Abs pl (merge pl ql))
(Abs pl (merge pl pl)), (Abs pl (insert a q)), (Abs pl (insert a p)), (Abs pl (insert a ql)), (Abs pl (insert a pl)), (Abs pl (insert k q)), (Abs pl (insert k p)), (Abs pl (insert k ql)), (Abs pl (insert k pl)), (Abs pl (maybe_swap q))
(Abs pl (maybe_swap p)), (Abs pl (maybe_swap ql)), (Abs pl (maybe_swap pl)), (Abs pl (q ++ q)), (Abs pl (q ++ p)), (Abs pl (q ++ ql)), (Abs pl (q ++ pl)), (Abs pl (p ++ q)), (Abs pl (p ++ p)), (Abs pl (p ++ ql))
(Abs pl (p ++ pl)), (Abs pl (ql ++ q)), (Abs pl (ql ++ p)), (Abs pl (ql ++ ql)), (Abs pl (ql ++ pl)), (Abs pl (pl ++ q)), (Abs pl (pl ++ p)), (Abs pl (pl ++ ql)), (Abs pl (pl ++ pl)), (Abs pl [])
(Abs (a :: q) q), (Abs (a :: q) p), (Abs (a :: q) ql), (Abs (a :: q) pl), (Abs (a :: q) (a :: p)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: pl)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: ql))
(Abs (a :: q) (k :: pl)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q pl)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p pl)), (Abs (a :: q) (merge ql q))
(Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql pl)), (Abs (a :: q) (merge pl q)), (Abs (a :: q) (merge pl p)), (Abs (a :: q) (merge pl ql)), (Abs (a :: q) (merge pl pl)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (insert a ql))
(Abs (a :: q) (insert a pl)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k pl)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap pl)), (Abs (a :: q) (q ++ q))
(Abs (a :: q) (q ++ p)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ pl)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ pl)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (ql ++ ql))
(Abs (a :: q) (ql ++ pl)), (Abs (a :: q) (pl ++ q)), (Abs (a :: q) (pl ++ p)), (Abs (a :: q) (pl ++ ql)), (Abs (a :: q) (pl ++ pl)), (Abs (a :: q) []), (Abs (a :: p) q), (Abs (a :: p) p), (Abs (a :: p) ql), (Abs (a :: p) pl)
(Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: pl)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: pl)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge q ql))
(Abs (a :: p) (merge q pl)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p pl)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql pl)), (Abs (a :: p) (merge pl q))
(Abs (a :: p) (merge pl p)), (Abs (a :: p) (merge pl ql)), (Abs (a :: p) (merge pl pl)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a pl)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert k ql))
(Abs (a :: p) (insert k pl)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap pl)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ pl)), (Abs (a :: p) (p ++ q))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ pl)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ pl)), (Abs (a :: p) (pl ++ q)), (Abs (a :: p) (pl ++ p)), (Abs (a :: p) (pl ++ ql))
(Abs (a :: p) (pl ++ pl)), (Abs (a :: p) []), (Abs (a :: ql) q), (Abs (a :: ql) p), (Abs (a :: ql) ql), (Abs (a :: ql) pl), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (a :: pl)), (Abs (a :: ql) (k :: q))
(Abs (a :: ql) (k :: p)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: pl)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge q ql)), (Abs (a :: ql) (merge q pl)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (merge p ql))
(Abs (a :: ql) (merge p pl)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql pl)), (Abs (a :: ql) (merge pl q)), (Abs (a :: ql) (merge pl p)), (Abs (a :: ql) (merge pl ql)), (Abs (a :: ql) (merge pl pl)), (Abs (a :: ql) (insert a q))
(Abs (a :: ql) (insert a p)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a pl)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k p)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k pl)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (maybe_swap ql))
(Abs (a :: ql) (maybe_swap pl)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ pl)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ pl)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ pl)), (Abs (a :: ql) (pl ++ q)), (Abs (a :: ql) (pl ++ p)), (Abs (a :: ql) (pl ++ ql)), (Abs (a :: ql) (pl ++ pl)), (Abs (a :: ql) []), (Abs (a :: pl) q), (Abs (a :: pl) p)
(Abs (a :: pl) ql), (Abs (a :: pl) pl), (Abs (a :: pl) (a :: q)), (Abs (a :: pl) (a :: p)), (Abs (a :: pl) (a :: ql)), (Abs (a :: pl) (k :: q)), (Abs (a :: pl) (k :: p)), (Abs (a :: pl) (k :: ql)), (Abs (a :: pl) (k :: pl)), (Abs (a :: pl) (merge q q))
(Abs (a :: pl) (merge q p)), (Abs (a :: pl) (merge q ql)), (Abs (a :: pl) (merge q pl)), (Abs (a :: pl) (merge p q)), (Abs (a :: pl) (merge p p)), (Abs (a :: pl) (merge p ql)), (Abs (a :: pl) (merge p pl)), (Abs (a :: pl) (merge ql q)), (Abs (a :: pl) (merge ql p)), (Abs (a :: pl) (merge ql ql))
(Abs (a :: pl) (merge ql pl)), (Abs (a :: pl) (merge pl q)), (Abs (a :: pl) (merge pl p)), (Abs (a :: pl) (merge pl ql)), (Abs (a :: pl) (merge pl pl)), (Abs (a :: pl) (insert a q)), (Abs (a :: pl) (insert a p)), (Abs (a :: pl) (insert a ql)), (Abs (a :: pl) (insert a pl)), (Abs (a :: pl) (insert k q))
(Abs (a :: pl) (insert k p)), (Abs (a :: pl) (insert k ql)), (Abs (a :: pl) (insert k pl)), (Abs (a :: pl) (maybe_swap q)), (Abs (a :: pl) (maybe_swap p)), (Abs (a :: pl) (maybe_swap ql)), (Abs (a :: pl) (maybe_swap pl)), (Abs (a :: pl) (q ++ q)), (Abs (a :: pl) (q ++ p)), (Abs (a :: pl) (q ++ ql))
(Abs (a :: pl) (q ++ pl)), (Abs (a :: pl) (p ++ q)), (Abs (a :: pl) (p ++ p)), (Abs (a :: pl) (p ++ ql)), (Abs (a :: pl) (p ++ pl)), (Abs (a :: pl) (ql ++ q)), (Abs (a :: pl) (ql ++ p)), (Abs (a :: pl) (ql ++ ql)), (Abs (a :: pl) (ql ++ pl)), (Abs (a :: pl) (pl ++ q))
(Abs (a :: pl) (pl ++ p)), (Abs (a :: pl) (pl ++ ql)), (Abs (a :: pl) (pl ++ pl)), (Abs (a :: pl) []), (Abs (k :: q) q), (Abs (k :: q) p), (Abs (k :: q) ql), (Abs (k :: q) pl), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p))
(Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: pl)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: pl)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q pl)), (Abs (k :: q) (merge p q))
(Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p pl)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql pl)), (Abs (k :: q) (merge pl q)), (Abs (k :: q) (merge pl p)), (Abs (k :: q) (merge pl ql))
(Abs (k :: q) (merge pl pl)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a pl)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k pl)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap pl)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ pl)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ pl)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ pl)), (Abs (k :: q) (pl ++ q)), (Abs (k :: q) (pl ++ p)), (Abs (k :: q) (pl ++ ql)), (Abs (k :: q) (pl ++ pl)), (Abs (k :: q) [])
(Abs (k :: p) q), (Abs (k :: p) p), (Abs (k :: p) ql), (Abs (k :: p) pl), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: pl)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql))
(Abs (k :: p) (k :: pl)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q pl)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p pl)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql pl)), (Abs (k :: p) (merge pl q)), (Abs (k :: p) (merge pl p)), (Abs (k :: p) (merge pl ql)), (Abs (k :: p) (merge pl pl)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a pl)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k pl)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap pl)), (Abs (k :: p) (q ++ q))
(Abs (k :: p) (q ++ p)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ pl)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ pl)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ p)), (Abs (k :: p) (ql ++ ql))
(Abs (k :: p) (ql ++ pl)), (Abs (k :: p) (pl ++ q)), (Abs (k :: p) (pl ++ p)), (Abs (k :: p) (pl ++ ql)), (Abs (k :: p) (pl ++ pl)), (Abs (k :: p) []), (Abs (k :: ql) q), (Abs (k :: ql) p), (Abs (k :: ql) ql), (Abs (k :: ql) pl)
(Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: p)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: pl)), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (k :: pl)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge q ql))
(Abs (k :: ql) (merge q pl)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p pl)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql pl)), (Abs (k :: ql) (merge pl q))
(Abs (k :: ql) (merge pl p)), (Abs (k :: ql) (merge pl ql)), (Abs (k :: ql) (merge pl pl)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a pl)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert k ql))
(Abs (k :: ql) (insert k pl)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap pl)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ pl)), (Abs (k :: ql) (p ++ q))
(Abs (k :: ql) (p ++ p)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ pl)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ pl)), (Abs (k :: ql) (pl ++ q)), (Abs (k :: ql) (pl ++ p)), (Abs (k :: ql) (pl ++ ql))
(Abs (k :: ql) (pl ++ pl)), (Abs (k :: ql) []), (Abs (k :: pl) q), (Abs (k :: pl) p), (Abs (k :: pl) ql), (Abs (k :: pl) pl), (Abs (k :: pl) (a :: q)), (Abs (k :: pl) (a :: p)), (Abs (k :: pl) (a :: ql)), (Abs (k :: pl) (a :: pl))
(Abs (k :: pl) (k :: q)), (Abs (k :: pl) (k :: p)), (Abs (k :: pl) (k :: ql)), (Abs (k :: pl) (merge q q)), (Abs (k :: pl) (merge q p)), (Abs (k :: pl) (merge q ql)), (Abs (k :: pl) (merge q pl)), (Abs (k :: pl) (merge p q)), (Abs (k :: pl) (merge p p)), (Abs (k :: pl) (merge p ql))
(Abs (k :: pl) (merge p pl)), (Abs (k :: pl) (merge ql q)), (Abs (k :: pl) (merge ql p)), (Abs (k :: pl) (merge ql ql)), (Abs (k :: pl) (merge ql pl)), (Abs (k :: pl) (merge pl q)), (Abs (k :: pl) (merge pl p)), (Abs (k :: pl) (merge pl ql)), (Abs (k :: pl) (merge pl pl)), (Abs (k :: pl) (insert a q))
(Abs (k :: pl) (insert a p)), (Abs (k :: pl) (insert a ql)), (Abs (k :: pl) (insert a pl)), (Abs (k :: pl) (insert k q)), (Abs (k :: pl) (insert k p)), (Abs (k :: pl) (insert k ql)), (Abs (k :: pl) (insert k pl)), (Abs (k :: pl) (maybe_swap q)), (Abs (k :: pl) (maybe_swap p)), (Abs (k :: pl) (maybe_swap ql))
(Abs (k :: pl) (maybe_swap pl)), (Abs (k :: pl) (q ++ q)), (Abs (k :: pl) (q ++ p)), (Abs (k :: pl) (q ++ ql)), (Abs (k :: pl) (q ++ pl)), (Abs (k :: pl) (p ++ q)), (Abs (k :: pl) (p ++ p)), (Abs (k :: pl) (p ++ ql)), (Abs (k :: pl) (p ++ pl)), (Abs (k :: pl) (ql ++ q))
(Abs (k :: pl) (ql ++ p)), (Abs (k :: pl) (ql ++ ql)), (Abs (k :: pl) (ql ++ pl)), (Abs (k :: pl) (pl ++ q)), (Abs (k :: pl) (pl ++ p)), (Abs (k :: pl) (pl ++ ql)), (Abs (k :: pl) (pl ++ pl)), (Abs (k :: pl) []), (Abs (merge q q) q), (Abs (merge q q) p)
(Abs (merge q q) ql), (Abs (merge q q) pl), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: p)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: pl)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: pl))
(Abs (merge q q) (merge q p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q pl)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p pl)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge ql ql))
(Abs (merge q q) (merge ql pl)), (Abs (merge q q) (merge pl q)), (Abs (merge q q) (merge pl p)), (Abs (merge q q) (merge pl ql)), (Abs (merge q q) (merge pl pl)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a pl)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k p)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k pl)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap pl)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ pl)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ pl)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ pl)), (Abs (merge q q) (pl ++ q))
(Abs (merge q q) (pl ++ p)), (Abs (merge q q) (pl ++ ql)), (Abs (merge q q) (pl ++ pl)), (Abs (merge q q) []), (Abs (merge q p) q), (Abs (merge q p) p), (Abs (merge q p) ql), (Abs (merge q p) pl), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: p))
(Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: pl)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: pl)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q pl)), (Abs (merge q p) (merge p q))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p pl)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql pl)), (Abs (merge q p) (merge pl q)), (Abs (merge q p) (merge pl p)), (Abs (merge q p) (merge pl ql))
(Abs (merge q p) (merge pl pl)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a pl)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k pl)), (Abs (merge q p) (maybe_swap q))
(Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap pl)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ pl)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ ql))
(Abs (merge q p) (p ++ pl)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ pl)), (Abs (merge q p) (pl ++ q)), (Abs (merge q p) (pl ++ p)), (Abs (merge q p) (pl ++ ql)), (Abs (merge q p) (pl ++ pl)), (Abs (merge q p) [])
(Abs (merge q ql) q), (Abs (merge q ql) p), (Abs (merge q ql) ql), (Abs (merge q ql) pl), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: pl)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: p))
(Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: pl)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge q pl)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p pl)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql pl)), (Abs (merge q ql) (merge pl q)), (Abs (merge q ql) (merge pl p)), (Abs (merge q ql) (merge pl ql)), (Abs (merge q ql) (merge pl pl)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a pl)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k pl)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap pl)), (Abs (merge q ql) (q ++ q))
(Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ pl)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ pl)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (ql ++ ql))
(Abs (merge q ql) (ql ++ pl)), (Abs (merge q ql) (pl ++ q)), (Abs (merge q ql) (pl ++ p)), (Abs (merge q ql) (pl ++ ql)), (Abs (merge q ql) (pl ++ pl)), (Abs (merge q ql) []), (Abs (merge q pl) q), (Abs (merge q pl) p), (Abs (merge q pl) ql), (Abs (merge q pl) pl)
(Abs (merge q pl) (a :: q)), (Abs (merge q pl) (a :: p)), (Abs (merge q pl) (a :: ql)), (Abs (merge q pl) (a :: pl)), (Abs (merge q pl) (k :: q)), (Abs (merge q pl) (k :: p)), (Abs (merge q pl) (k :: ql)), (Abs (merge q pl) (k :: pl)), (Abs (merge q pl) (merge q q)), (Abs (merge q pl) (merge q p))
(Abs (merge q pl) (merge q ql)), (Abs (merge q pl) (merge p q)), (Abs (merge q pl) (merge p p)), (Abs (merge q pl) (merge p ql)), (Abs (merge q pl) (merge p pl)), (Abs (merge q pl) (merge ql q)), (Abs (merge q pl) (merge ql p)), (Abs (merge q pl) (merge ql ql)), (Abs (merge q pl) (merge ql pl)), (Abs (merge q pl) (merge pl q))
(Abs (merge q pl) (merge pl p)), (Abs (merge q pl) (merge pl ql)), (Abs (merge q pl) (merge pl pl)), (Abs (merge q pl) (insert a q)), (Abs (merge q pl) (insert a p)), (Abs (merge q pl) (insert a ql)), (Abs (merge q pl) (insert a pl)), (Abs (merge q pl) (insert k q)), (Abs (merge q pl) (insert k p)), (Abs (merge q pl) (insert k ql))
(Abs (merge q pl) (insert k pl)), (Abs (merge q pl) (maybe_swap q)), (Abs (merge q pl) (maybe_swap p)), (Abs (merge q pl) (maybe_swap ql)), (Abs (merge q pl) (maybe_swap pl)), (Abs (merge q pl) (q ++ q)), (Abs (merge q pl) (q ++ p)), (Abs (merge q pl) (q ++ ql)), (Abs (merge q pl) (q ++ pl)), (Abs (merge q pl) (p ++ q))
(Abs (merge q pl) (p ++ p)), (Abs (merge q pl) (p ++ ql)), (Abs (merge q pl) (p ++ pl)), (Abs (merge q pl) (ql ++ q)), (Abs (merge q pl) (ql ++ p)), (Abs (merge q pl) (ql ++ ql)), (Abs (merge q pl) (ql ++ pl)), (Abs (merge q pl) (pl ++ q)), (Abs (merge q pl) (pl ++ p)), (Abs (merge q pl) (pl ++ ql))
(Abs (merge q pl) (pl ++ pl)), (Abs (merge q pl) []), (Abs (merge p q) q), (Abs (merge p q) p), (Abs (merge p q) ql), (Abs (merge p q) pl), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: pl))
(Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: pl)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q pl)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p ql))
(Abs (merge p q) (merge p pl)), (Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql pl)), (Abs (merge p q) (merge pl q)), (Abs (merge p q) (merge pl p)), (Abs (merge p q) (merge pl ql)), (Abs (merge p q) (merge pl pl)), (Abs (merge p q) (insert a q))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a pl)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k pl)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (maybe_swap ql))
(Abs (merge p q) (maybe_swap pl)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ pl)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ pl)), (Abs (merge p q) (ql ++ q))
(Abs (merge p q) (ql ++ p)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ pl)), (Abs (merge p q) (pl ++ q)), (Abs (merge p q) (pl ++ p)), (Abs (merge p q) (pl ++ ql)), (Abs (merge p q) (pl ++ pl)), (Abs (merge p q) []), (Abs (merge p p) q), (Abs (merge p p) p)
(Abs (merge p p) ql), (Abs (merge p p) pl), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: pl)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: pl))
(Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q pl)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p pl)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge ql ql))
(Abs (merge p p) (merge ql pl)), (Abs (merge p p) (merge pl q)), (Abs (merge p p) (merge pl p)), (Abs (merge p p) (merge pl ql)), (Abs (merge p p) (merge pl pl)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a pl)), (Abs (merge p p) (insert k q))
(Abs (merge p p) (insert k p)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k pl)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap pl)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (q ++ ql))
(Abs (merge p p) (q ++ pl)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ pl)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ pl)), (Abs (merge p p) (pl ++ q))
(Abs (merge p p) (pl ++ p)), (Abs (merge p p) (pl ++ ql)), (Abs (merge p p) (pl ++ pl)), (Abs (merge p p) []), (Abs (merge p ql) q), (Abs (merge p ql) p), (Abs (merge p ql) ql), (Abs (merge p ql) pl), (Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: p))
(Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: pl)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: pl)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q pl))
(Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (merge p pl)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql pl)), (Abs (merge p ql) (merge pl q)), (Abs (merge p ql) (merge pl p)), (Abs (merge p ql) (merge pl ql))
(Abs (merge p ql) (merge pl pl)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a pl)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k pl)), (Abs (merge p ql) (maybe_swap q))
(Abs (merge p ql) (maybe_swap p)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap pl)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ pl)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) (p ++ ql))
(Abs (merge p ql) (p ++ pl)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ pl)), (Abs (merge p ql) (pl ++ q)), (Abs (merge p ql) (pl ++ p)), (Abs (merge p ql) (pl ++ ql)), (Abs (merge p ql) (pl ++ pl)), (Abs (merge p ql) [])
(Abs (merge p pl) q), (Abs (merge p pl) p), (Abs (merge p pl) ql), (Abs (merge p pl) pl), (Abs (merge p pl) (a :: q)), (Abs (merge p pl) (a :: p)), (Abs (merge p pl) (a :: ql)), (Abs (merge p pl) (a :: pl)), (Abs (merge p pl) (k :: q)), (Abs (merge p pl) (k :: p))
(Abs (merge p pl) (k :: ql)), (Abs (merge p pl) (k :: pl)), (Abs (merge p pl) (merge q q)), (Abs (merge p pl) (merge q p)), (Abs (merge p pl) (merge q ql)), (Abs (merge p pl) (merge q pl)), (Abs (merge p pl) (merge p q)), (Abs (merge p pl) (merge p p)), (Abs (merge p pl) (merge p ql)), (Abs (merge p pl) (merge ql q))
(Abs (merge p pl) (merge ql p)), (Abs (merge p pl) (merge ql ql)), (Abs (merge p pl) (merge ql pl)), (Abs (merge p pl) (merge pl q)), (Abs (merge p pl) (merge pl p)), (Abs (merge p pl) (merge pl ql)), (Abs (merge p pl) (merge pl pl)), (Abs (merge p pl) (insert a q)), (Abs (merge p pl) (insert a p)), (Abs (merge p pl) (insert a ql))
(Abs (merge p pl) (insert a pl)), (Abs (merge p pl) (insert k q)), (Abs (merge p pl) (insert k p)), (Abs (merge p pl) (insert k ql)), (Abs (merge p pl) (insert k pl)), (Abs (merge p pl) (maybe_swap q)), (Abs (merge p pl) (maybe_swap p)), (Abs (merge p pl) (maybe_swap ql)), (Abs (merge p pl) (maybe_swap pl)), (Abs (merge p pl) (q ++ q))
(Abs (merge p pl) (q ++ p)), (Abs (merge p pl) (q ++ ql)), (Abs (merge p pl) (q ++ pl)), (Abs (merge p pl) (p ++ q)), (Abs (merge p pl) (p ++ p)), (Abs (merge p pl) (p ++ ql)), (Abs (merge p pl) (p ++ pl)), (Abs (merge p pl) (ql ++ q)), (Abs (merge p pl) (ql ++ p)), (Abs (merge p pl) (ql ++ ql))
(Abs (merge p pl) (ql ++ pl)), (Abs (merge p pl) (pl ++ q)), (Abs (merge p pl) (pl ++ p)), (Abs (merge p pl) (pl ++ ql)), (Abs (merge p pl) (pl ++ pl)), (Abs (merge p pl) []), (Abs (merge ql q) q), (Abs (merge ql q) p), (Abs (merge ql q) ql), (Abs (merge ql q) pl)
(Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: pl)), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: pl)), (Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q p))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q pl)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p pl)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql pl)), (Abs (merge ql q) (merge pl q))
(Abs (merge ql q) (merge pl p)), (Abs (merge ql q) (merge pl ql)), (Abs (merge ql q) (merge pl pl)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a pl)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k p)), (Abs (merge ql q) (insert k ql))
(Abs (merge ql q) (insert k pl)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap pl)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ pl)), (Abs (merge ql q) (p ++ q))
(Abs (merge ql q) (p ++ p)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ pl)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ pl)), (Abs (merge ql q) (pl ++ q)), (Abs (merge ql q) (pl ++ p)), (Abs (merge ql q) (pl ++ ql))
(Abs (merge ql q) (pl ++ pl)), (Abs (merge ql q) []), (Abs (merge ql p) q), (Abs (merge ql p) p), (Abs (merge ql p) ql), (Abs (merge ql p) pl), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: p)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: pl))
(Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: pl)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q pl)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p p))
(Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p pl)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql pl)), (Abs (merge ql p) (merge pl q)), (Abs (merge ql p) (merge pl p)), (Abs (merge ql p) (merge pl ql)), (Abs (merge ql p) (merge pl pl)), (Abs (merge ql p) (insert a q))
(Abs (merge ql p) (insert a p)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a pl)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k pl)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (maybe_swap ql))
(Abs (merge ql p) (maybe_swap pl)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (q ++ ql)), (Abs (merge ql p) (q ++ pl)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ pl)), (Abs (merge ql p) (ql ++ q))
(Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ pl)), (Abs (merge ql p) (pl ++ q)), (Abs (merge ql p) (pl ++ p)), (Abs (merge ql p) (pl ++ ql)), (Abs (merge ql p) (pl ++ pl)), (Abs (merge ql p) []), (Abs (merge ql ql) q), (Abs (merge ql ql) p)
(Abs (merge ql ql) ql), (Abs (merge ql ql) pl), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: pl)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: pl))
(Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q pl)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p pl)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge ql pl)), (Abs (merge ql ql) (merge pl q)), (Abs (merge ql ql) (merge pl p)), (Abs (merge ql ql) (merge pl ql)), (Abs (merge ql ql) (merge pl pl)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a pl)), (Abs (merge ql ql) (insert k q))
(Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k pl)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap pl)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (q ++ ql))
(Abs (merge ql ql) (q ++ pl)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) (p ++ ql)), (Abs (merge ql ql) (p ++ pl)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ pl)), (Abs (merge ql ql) (pl ++ q))
(Abs (merge ql ql) (pl ++ p)), (Abs (merge ql ql) (pl ++ ql)), (Abs (merge ql ql) (pl ++ pl)), (Abs (merge ql ql) []), (Abs (merge ql pl) q), (Abs (merge ql pl) p), (Abs (merge ql pl) ql), (Abs (merge ql pl) pl), (Abs (merge ql pl) (a :: q)), (Abs (merge ql pl) (a :: p))
(Abs (merge ql pl) (a :: ql)), (Abs (merge ql pl) (a :: pl)), (Abs (merge ql pl) (k :: q)), (Abs (merge ql pl) (k :: p)), (Abs (merge ql pl) (k :: ql)), (Abs (merge ql pl) (k :: pl)), (Abs (merge ql pl) (merge q q)), (Abs (merge ql pl) (merge q p)), (Abs (merge ql pl) (merge q ql)), (Abs (merge ql pl) (merge q pl))
(Abs (merge ql pl) (merge p q)), (Abs (merge ql pl) (merge p p)), (Abs (merge ql pl) (merge p ql)), (Abs (merge ql pl) (merge p pl)), (Abs (merge ql pl) (merge ql q)), (Abs (merge ql pl) (merge ql p)), (Abs (merge ql pl) (merge ql ql)), (Abs (merge ql pl) (merge pl q)), (Abs (merge ql pl) (merge pl p)), (Abs (merge ql pl) (merge pl ql))
(Abs (merge ql pl) (merge pl pl)), (Abs (merge ql pl) (insert a q)), (Abs (merge ql pl) (insert a p)), (Abs (merge ql pl) (insert a ql)), (Abs (merge ql pl) (insert a pl)), (Abs (merge ql pl) (insert k q)), (Abs (merge ql pl) (insert k p)), (Abs (merge ql pl) (insert k ql)), (Abs (merge ql pl) (insert k pl)), (Abs (merge ql pl) (maybe_swap q))
(Abs (merge ql pl) (maybe_swap p)), (Abs (merge ql pl) (maybe_swap ql)), (Abs (merge ql pl) (maybe_swap pl)), (Abs (merge ql pl) (q ++ q)), (Abs (merge ql pl) (q ++ p)), (Abs (merge ql pl) (q ++ ql)), (Abs (merge ql pl) (q ++ pl)), (Abs (merge ql pl) (p ++ q)), (Abs (merge ql pl) (p ++ p)), (Abs (merge ql pl) (p ++ ql))
(Abs (merge ql pl) (p ++ pl)), (Abs (merge ql pl) (ql ++ q)), (Abs (merge ql pl) (ql ++ p)), (Abs (merge ql pl) (ql ++ ql)), (Abs (merge ql pl) (ql ++ pl)), (Abs (merge ql pl) (pl ++ q)), (Abs (merge ql pl) (pl ++ p)), (Abs (merge ql pl) (pl ++ ql)), (Abs (merge ql pl) (pl ++ pl)), (Abs (merge ql pl) [])
(Abs (merge pl q) q), (Abs (merge pl q) p), (Abs (merge pl q) ql), (Abs (merge pl q) pl), (Abs (merge pl q) (a :: q)), (Abs (merge pl q) (a :: p)), (Abs (merge pl q) (a :: ql)), (Abs (merge pl q) (a :: pl)), (Abs (merge pl q) (k :: q)), (Abs (merge pl q) (k :: p))
(Abs (merge pl q) (k :: ql)), (Abs (merge pl q) (k :: pl)), (Abs (merge pl q) (merge q q)), (Abs (merge pl q) (merge q p)), (Abs (merge pl q) (merge q ql)), (Abs (merge pl q) (merge q pl)), (Abs (merge pl q) (merge p q)), (Abs (merge pl q) (merge p p)), (Abs (merge pl q) (merge p ql)), (Abs (merge pl q) (merge p pl))
(Abs (merge pl q) (merge ql q)), (Abs (merge pl q) (merge ql p)), (Abs (merge pl q) (merge ql ql)), (Abs (merge pl q) (merge ql pl)), (Abs (merge pl q) (merge pl p)), (Abs (merge pl q) (merge pl ql)), (Abs (merge pl q) (merge pl pl)), (Abs (merge pl q) (insert a q)), (Abs (merge pl q) (insert a p)), (Abs (merge pl q) (insert a ql))
(Abs (merge pl q) (insert a pl)), (Abs (merge pl q) (insert k q)), (Abs (merge pl q) (insert k p)), (Abs (merge pl q) (insert k ql)), (Abs (merge pl q) (insert k pl)), (Abs (merge pl q) (maybe_swap q)), (Abs (merge pl q) (maybe_swap p)), (Abs (merge pl q) (maybe_swap ql)), (Abs (merge pl q) (maybe_swap pl)), (Abs (merge pl q) (q ++ q))
(Abs (merge pl q) (q ++ p)), (Abs (merge pl q) (q ++ ql)), (Abs (merge pl q) (q ++ pl)), (Abs (merge pl q) (p ++ q)), (Abs (merge pl q) (p ++ p)), (Abs (merge pl q) (p ++ ql)), (Abs (merge pl q) (p ++ pl)), (Abs (merge pl q) (ql ++ q)), (Abs (merge pl q) (ql ++ p)), (Abs (merge pl q) (ql ++ ql))
(Abs (merge pl q) (ql ++ pl)), (Abs (merge pl q) (pl ++ q)), (Abs (merge pl q) (pl ++ p)), (Abs (merge pl q) (pl ++ ql)), (Abs (merge pl q) (pl ++ pl)), (Abs (merge pl q) []), (Abs (merge pl p) q), (Abs (merge pl p) p), (Abs (merge pl p) ql), (Abs (merge pl p) pl)
(Abs (merge pl p) (a :: q)), (Abs (merge pl p) (a :: p)), (Abs (merge pl p) (a :: ql)), (Abs (merge pl p) (a :: pl)), (Abs (merge pl p) (k :: q)), (Abs (merge pl p) (k :: p)), (Abs (merge pl p) (k :: ql)), (Abs (merge pl p) (k :: pl)), (Abs (merge pl p) (merge q q)), (Abs (merge pl p) (merge q p))
(Abs (merge pl p) (merge q ql)), (Abs (merge pl p) (merge q pl)), (Abs (merge pl p) (merge p q)), (Abs (merge pl p) (merge p p)), (Abs (merge pl p) (merge p ql)), (Abs (merge pl p) (merge p pl)), (Abs (merge pl p) (merge ql q)), (Abs (merge pl p) (merge ql p)), (Abs (merge pl p) (merge ql ql)), (Abs (merge pl p) (merge ql pl))
(Abs (merge pl p) (merge pl q)), (Abs (merge pl p) (merge pl ql)), (Abs (merge pl p) (merge pl pl)), (Abs (merge pl p) (insert a q)), (Abs (merge pl p) (insert a p)), (Abs (merge pl p) (insert a ql)), (Abs (merge pl p) (insert a pl)), (Abs (merge pl p) (insert k q)), (Abs (merge pl p) (insert k p)), (Abs (merge pl p) (insert k ql))
(Abs (merge pl p) (insert k pl)), (Abs (merge pl p) (maybe_swap q)), (Abs (merge pl p) (maybe_swap p)), (Abs (merge pl p) (maybe_swap ql)), (Abs (merge pl p) (maybe_swap pl)), (Abs (merge pl p) (q ++ q)), (Abs (merge pl p) (q ++ p)), (Abs (merge pl p) (q ++ ql)), (Abs (merge pl p) (q ++ pl)), (Abs (merge pl p) (p ++ q))
(Abs (merge pl p) (p ++ p)), (Abs (merge pl p) (p ++ ql)), (Abs (merge pl p) (p ++ pl)), (Abs (merge pl p) (ql ++ q)), (Abs (merge pl p) (ql ++ p)), (Abs (merge pl p) (ql ++ ql)), (Abs (merge pl p) (ql ++ pl)), (Abs (merge pl p) (pl ++ q)), (Abs (merge pl p) (pl ++ p)), (Abs (merge pl p) (pl ++ ql))
(Abs (merge pl p) (pl ++ pl)), (Abs (merge pl p) []), (Abs (merge pl ql) q), (Abs (merge pl ql) p), (Abs (merge pl ql) ql), (Abs (merge pl ql) pl), (Abs (merge pl ql) (a :: q)), (Abs (merge pl ql) (a :: p)), (Abs (merge pl ql) (a :: ql)), (Abs (merge pl ql) (a :: pl))
(Abs (merge pl ql) (k :: q)), (Abs (merge pl ql) (k :: p)), (Abs (merge pl ql) (k :: ql)), (Abs (merge pl ql) (k :: pl)), (Abs (merge pl ql) (merge q q)), (Abs (merge pl ql) (merge q p)), (Abs (merge pl ql) (merge q ql)), (Abs (merge pl ql) (merge q pl)), (Abs (merge pl ql) (merge p q)), (Abs (merge pl ql) (merge p p))
(Abs (merge pl ql) (merge p ql)), (Abs (merge pl ql) (merge p pl)), (Abs (merge pl ql) (merge ql q)), (Abs (merge pl ql) (merge ql p)), (Abs (merge pl ql) (merge ql ql)), (Abs (merge pl ql) (merge ql pl)), (Abs (merge pl ql) (merge pl q)), (Abs (merge pl ql) (merge pl p)), (Abs (merge pl ql) (merge pl pl)), (Abs (merge pl ql) (insert a q))
(Abs (merge pl ql) (insert a p)), (Abs (merge pl ql) (insert a ql)), (Abs (merge pl ql) (insert a pl)), (Abs (merge pl ql) (insert k q)), (Abs (merge pl ql) (insert k p)), (Abs (merge pl ql) (insert k ql)), (Abs (merge pl ql) (insert k pl)), (Abs (merge pl ql) (maybe_swap q)), (Abs (merge pl ql) (maybe_swap p)), (Abs (merge pl ql) (maybe_swap ql))
(Abs (merge pl ql) (maybe_swap pl)), (Abs (merge pl ql) (q ++ q)), (Abs (merge pl ql) (q ++ p)), (Abs (merge pl ql) (q ++ ql)), (Abs (merge pl ql) (q ++ pl)), (Abs (merge pl ql) (p ++ q)), (Abs (merge pl ql) (p ++ p)), (Abs (merge pl ql) (p ++ ql)), (Abs (merge pl ql) (p ++ pl)), (Abs (merge pl ql) (ql ++ q))
(Abs (merge pl ql) (ql ++ p)), (Abs (merge pl ql) (ql ++ ql)), (Abs (merge pl ql) (ql ++ pl)), (Abs (merge pl ql) (pl ++ q)), (Abs (merge pl ql) (pl ++ p)), (Abs (merge pl ql) (pl ++ ql)), (Abs (merge pl ql) (pl ++ pl)), (Abs (merge pl ql) []), (Abs (merge pl pl) q), (Abs (merge pl pl) p)
(Abs (merge pl pl) ql), (Abs (merge pl pl) pl), (Abs (merge pl pl) (a :: q)), (Abs (merge pl pl) (a :: p)), (Abs (merge pl pl) (a :: ql)), (Abs (merge pl pl) (a :: pl)), (Abs (merge pl pl) (k :: q)), (Abs (merge pl pl) (k :: p)), (Abs (merge pl pl) (k :: ql)), (Abs (merge pl pl) (k :: pl))
(Abs (merge pl pl) (merge q q)), (Abs (merge pl pl) (merge q p)), (Abs (merge pl pl) (merge q ql)), (Abs (merge pl pl) (merge q pl)), (Abs (merge pl pl) (merge p q)), (Abs (merge pl pl) (merge p p)), (Abs (merge pl pl) (merge p ql)), (Abs (merge pl pl) (merge p pl)), (Abs (merge pl pl) (merge ql q)), (Abs (merge pl pl) (merge ql p))
(Abs (merge pl pl) (merge ql ql)), (Abs (merge pl pl) (merge ql pl)), (Abs (merge pl pl) (merge pl q)), (Abs (merge pl pl) (merge pl p)), (Abs (merge pl pl) (merge pl ql)), (Abs (merge pl pl) (insert a q)), (Abs (merge pl pl) (insert a p)), (Abs (merge pl pl) (insert a ql)), (Abs (merge pl pl) (insert a pl)), (Abs (merge pl pl) (insert k q))
(Abs (merge pl pl) (insert k p)), (Abs (merge pl pl) (insert k ql)), (Abs (merge pl pl) (insert k pl)), (Abs (merge pl pl) (maybe_swap q)), (Abs (merge pl pl) (maybe_swap p)), (Abs (merge pl pl) (maybe_swap ql)), (Abs (merge pl pl) (maybe_swap pl)), (Abs (merge pl pl) (q ++ q)), (Abs (merge pl pl) (q ++ p)), (Abs (merge pl pl) (q ++ ql))
(Abs (merge pl pl) (q ++ pl)), (Abs (merge pl pl) (p ++ q)), (Abs (merge pl pl) (p ++ p)), (Abs (merge pl pl) (p ++ ql)), (Abs (merge pl pl) (p ++ pl)), (Abs (merge pl pl) (ql ++ q)), (Abs (merge pl pl) (ql ++ p)), (Abs (merge pl pl) (ql ++ ql)), (Abs (merge pl pl) (ql ++ pl)), (Abs (merge pl pl) (pl ++ q))
(Abs (merge pl pl) (pl ++ p)), (Abs (merge pl pl) (pl ++ ql)), (Abs (merge pl pl) (pl ++ pl)), (Abs (merge pl pl) []), (Abs (insert a q) q), (Abs (insert a q) p), (Abs (insert a q) ql), (Abs (insert a q) pl), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: p))
(Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: pl)), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: pl)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q pl))
(Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p pl)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql pl)), (Abs (insert a q) (merge pl q)), (Abs (insert a q) (merge pl p))
(Abs (insert a q) (merge pl ql)), (Abs (insert a q) (merge pl pl)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a pl)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k pl)), (Abs (insert a q) (maybe_swap q))
(Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap pl)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ pl)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ ql))
(Abs (insert a q) (p ++ pl)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ pl)), (Abs (insert a q) (pl ++ q)), (Abs (insert a q) (pl ++ p)), (Abs (insert a q) (pl ++ ql)), (Abs (insert a q) (pl ++ pl)), (Abs (insert a q) [])
(Abs (insert a p) q), (Abs (insert a p) p), (Abs (insert a p) ql), (Abs (insert a p) pl), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: pl)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: pl)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q pl)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p pl))
(Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql pl)), (Abs (insert a p) (merge pl q)), (Abs (insert a p) (merge pl p)), (Abs (insert a p) (merge pl ql)), (Abs (insert a p) (merge pl pl)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql))
(Abs (insert a p) (insert a pl)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k pl)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap pl)), (Abs (insert a p) (q ++ q))
(Abs (insert a p) (q ++ p)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ pl)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ pl)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (ql ++ ql))
(Abs (insert a p) (ql ++ pl)), (Abs (insert a p) (pl ++ q)), (Abs (insert a p) (pl ++ p)), (Abs (insert a p) (pl ++ ql)), (Abs (insert a p) (pl ++ pl)), (Abs (insert a p) []), (Abs (insert a ql) q), (Abs (insert a ql) p), (Abs (insert a ql) ql), (Abs (insert a ql) pl)
(Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: pl)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: pl)), (Abs (insert a ql) (merge q q)), (Abs (insert a ql) (merge q p))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q pl)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p pl)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql pl))
(Abs (insert a ql) (merge pl q)), (Abs (insert a ql) (merge pl p)), (Abs (insert a ql) (merge pl ql)), (Abs (insert a ql) (merge pl pl)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (insert a pl)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k pl)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap pl)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ pl)), (Abs (insert a ql) (p ++ q))
(Abs (insert a ql) (p ++ p)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ pl)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ pl)), (Abs (insert a ql) (pl ++ q)), (Abs (insert a ql) (pl ++ p)), (Abs (insert a ql) (pl ++ ql))
(Abs (insert a ql) (pl ++ pl)), (Abs (insert a ql) []), (Abs (insert a pl) q), (Abs (insert a pl) p), (Abs (insert a pl) ql), (Abs (insert a pl) pl), (Abs (insert a pl) (a :: q)), (Abs (insert a pl) (a :: p)), (Abs (insert a pl) (a :: ql)), (Abs (insert a pl) (a :: pl))
(Abs (insert a pl) (k :: q)), (Abs (insert a pl) (k :: p)), (Abs (insert a pl) (k :: ql)), (Abs (insert a pl) (k :: pl)), (Abs (insert a pl) (merge q q)), (Abs (insert a pl) (merge q p)), (Abs (insert a pl) (merge q ql)), (Abs (insert a pl) (merge q pl)), (Abs (insert a pl) (merge p q)), (Abs (insert a pl) (merge p p))
(Abs (insert a pl) (merge p ql)), (Abs (insert a pl) (merge p pl)), (Abs (insert a pl) (merge ql q)), (Abs (insert a pl) (merge ql p)), (Abs (insert a pl) (merge ql ql)), (Abs (insert a pl) (merge ql pl)), (Abs (insert a pl) (merge pl q)), (Abs (insert a pl) (merge pl p)), (Abs (insert a pl) (merge pl ql)), (Abs (insert a pl) (merge pl pl))
(Abs (insert a pl) (insert a q)), (Abs (insert a pl) (insert a p)), (Abs (insert a pl) (insert a ql)), (Abs (insert a pl) (insert k q)), (Abs (insert a pl) (insert k p)), (Abs (insert a pl) (insert k ql)), (Abs (insert a pl) (insert k pl)), (Abs (insert a pl) (maybe_swap q)), (Abs (insert a pl) (maybe_swap p)), (Abs (insert a pl) (maybe_swap ql))
(Abs (insert a pl) (maybe_swap pl)), (Abs (insert a pl) (q ++ q)), (Abs (insert a pl) (q ++ p)), (Abs (insert a pl) (q ++ ql)), (Abs (insert a pl) (q ++ pl)), (Abs (insert a pl) (p ++ q)), (Abs (insert a pl) (p ++ p)), (Abs (insert a pl) (p ++ ql)), (Abs (insert a pl) (p ++ pl)), (Abs (insert a pl) (ql ++ q))
(Abs (insert a pl) (ql ++ p)), (Abs (insert a pl) (ql ++ ql)), (Abs (insert a pl) (ql ++ pl)), (Abs (insert a pl) (pl ++ q)), (Abs (insert a pl) (pl ++ p)), (Abs (insert a pl) (pl ++ ql)), (Abs (insert a pl) (pl ++ pl)), (Abs (insert a pl) []), (Abs (insert k q) q), (Abs (insert k q) p)
(Abs (insert k q) ql), (Abs (insert k q) pl), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: pl)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: pl))
(Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q pl)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p pl)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql p))
(Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql pl)), (Abs (insert k q) (merge pl q)), (Abs (insert k q) (merge pl p)), (Abs (insert k q) (merge pl ql)), (Abs (insert k q) (merge pl pl)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a pl))
(Abs (insert k q) (insert k p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k pl)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap pl)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (q ++ ql))
(Abs (insert k q) (q ++ pl)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ pl)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ pl)), (Abs (insert k q) (pl ++ q))
(Abs (insert k q) (pl ++ p)), (Abs (insert k q) (pl ++ ql)), (Abs (insert k q) (pl ++ pl)), (Abs (insert k q) []), (Abs (insert k p) q), (Abs (insert k p) p), (Abs (insert k p) ql), (Abs (insert k p) pl), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: p))
(Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: pl)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: pl)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q pl))
(Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p pl)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql pl)), (Abs (insert k p) (merge pl q)), (Abs (insert k p) (merge pl p))
(Abs (insert k p) (merge pl ql)), (Abs (insert k p) (merge pl pl)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a pl)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k pl)), (Abs (insert k p) (maybe_swap q))
(Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap pl)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ pl)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ ql))
(Abs (insert k p) (p ++ pl)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ pl)), (Abs (insert k p) (pl ++ q)), (Abs (insert k p) (pl ++ p)), (Abs (insert k p) (pl ++ ql)), (Abs (insert k p) (pl ++ pl)), (Abs (insert k p) [])
(Abs (insert k ql) q), (Abs (insert k ql) p), (Abs (insert k ql) ql), (Abs (insert k ql) pl), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: p)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: pl)), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: p))
(Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: pl)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q pl)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p pl))
(Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql pl)), (Abs (insert k ql) (merge pl q)), (Abs (insert k ql) (merge pl p)), (Abs (insert k ql) (merge pl ql)), (Abs (insert k ql) (merge pl pl)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a p))
(Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a pl)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert k pl)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap pl)), (Abs (insert k ql) (q ++ q))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ pl)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ pl)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (ql ++ ql))
(Abs (insert k ql) (ql ++ pl)), (Abs (insert k ql) (pl ++ q)), (Abs (insert k ql) (pl ++ p)), (Abs (insert k ql) (pl ++ ql)), (Abs (insert k ql) (pl ++ pl)), (Abs (insert k ql) []), (Abs (insert k pl) q), (Abs (insert k pl) p), (Abs (insert k pl) ql), (Abs (insert k pl) pl)
(Abs (insert k pl) (a :: q)), (Abs (insert k pl) (a :: p)), (Abs (insert k pl) (a :: ql)), (Abs (insert k pl) (a :: pl)), (Abs (insert k pl) (k :: q)), (Abs (insert k pl) (k :: p)), (Abs (insert k pl) (k :: ql)), (Abs (insert k pl) (k :: pl)), (Abs (insert k pl) (merge q q)), (Abs (insert k pl) (merge q p))
(Abs (insert k pl) (merge q ql)), (Abs (insert k pl) (merge q pl)), (Abs (insert k pl) (merge p q)), (Abs (insert k pl) (merge p p)), (Abs (insert k pl) (merge p ql)), (Abs (insert k pl) (merge p pl)), (Abs (insert k pl) (merge ql q)), (Abs (insert k pl) (merge ql p)), (Abs (insert k pl) (merge ql ql)), (Abs (insert k pl) (merge ql pl))
(Abs (insert k pl) (merge pl q)), (Abs (insert k pl) (merge pl p)), (Abs (insert k pl) (merge pl ql)), (Abs (insert k pl) (merge pl pl)), (Abs (insert k pl) (insert a q)), (Abs (insert k pl) (insert a p)), (Abs (insert k pl) (insert a ql)), (Abs (insert k pl) (insert a pl)), (Abs (insert k pl) (insert k q)), (Abs (insert k pl) (insert k p))
(Abs (insert k pl) (insert k ql)), (Abs (insert k pl) (maybe_swap q)), (Abs (insert k pl) (maybe_swap p)), (Abs (insert k pl) (maybe_swap ql)), (Abs (insert k pl) (maybe_swap pl)), (Abs (insert k pl) (q ++ q)), (Abs (insert k pl) (q ++ p)), (Abs (insert k pl) (q ++ ql)), (Abs (insert k pl) (q ++ pl)), (Abs (insert k pl) (p ++ q))
(Abs (insert k pl) (p ++ p)), (Abs (insert k pl) (p ++ ql)), (Abs (insert k pl) (p ++ pl)), (Abs (insert k pl) (ql ++ q)), (Abs (insert k pl) (ql ++ p)), (Abs (insert k pl) (ql ++ ql)), (Abs (insert k pl) (ql ++ pl)), (Abs (insert k pl) (pl ++ q)), (Abs (insert k pl) (pl ++ p)), (Abs (insert k pl) (pl ++ ql))
(Abs (insert k pl) (pl ++ pl)), (Abs (insert k pl) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) p), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) pl), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: pl))
(Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: pl)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q pl)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p pl)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql pl)), (Abs (maybe_swap q) (merge pl q)), (Abs (maybe_swap q) (merge pl p)), (Abs (maybe_swap q) (merge pl ql)), (Abs (maybe_swap q) (merge pl pl))
(Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a pl)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k pl)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (maybe_swap ql))
(Abs (maybe_swap q) (maybe_swap pl)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ pl)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ pl)), (Abs (maybe_swap q) (ql ++ q))
(Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ pl)), (Abs (maybe_swap q) (pl ++ q)), (Abs (maybe_swap q) (pl ++ p)), (Abs (maybe_swap q) (pl ++ ql)), (Abs (maybe_swap q) (pl ++ pl)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) p)
(Abs (maybe_swap p) ql), (Abs (maybe_swap p) pl), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: pl)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: pl))
(Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q pl)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p pl)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql p))
(Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql pl)), (Abs (maybe_swap p) (merge pl q)), (Abs (maybe_swap p) (merge pl p)), (Abs (maybe_swap p) (merge pl ql)), (Abs (maybe_swap p) (merge pl pl)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a pl))
(Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k pl)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap pl)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (q ++ ql))
(Abs (maybe_swap p) (q ++ pl)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ pl)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ pl)), (Abs (maybe_swap p) (pl ++ q))
(Abs (maybe_swap p) (pl ++ p)), (Abs (maybe_swap p) (pl ++ ql)), (Abs (maybe_swap p) (pl ++ pl)), (Abs (maybe_swap p) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) p), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) pl), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: p))
(Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: pl)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: pl)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q pl))
(Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p pl)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql pl)), (Abs (maybe_swap ql) (merge pl q)), (Abs (maybe_swap ql) (merge pl p))
(Abs (maybe_swap ql) (merge pl ql)), (Abs (maybe_swap ql) (merge pl pl)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a pl)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k pl))
(Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (maybe_swap pl)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ pl)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) (p ++ ql))
(Abs (maybe_swap ql) (p ++ pl)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ pl)), (Abs (maybe_swap ql) (pl ++ q)), (Abs (maybe_swap ql) (pl ++ p)), (Abs (maybe_swap ql) (pl ++ ql)), (Abs (maybe_swap ql) (pl ++ pl)), (Abs (maybe_swap ql) [])
(Abs (maybe_swap pl) q), (Abs (maybe_swap pl) p), (Abs (maybe_swap pl) ql), (Abs (maybe_swap pl) pl), (Abs (maybe_swap pl) (a :: q)), (Abs (maybe_swap pl) (a :: p)), (Abs (maybe_swap pl) (a :: ql)), (Abs (maybe_swap pl) (a :: pl)), (Abs (maybe_swap pl) (k :: q)), (Abs (maybe_swap pl) (k :: p))
(Abs (maybe_swap pl) (k :: ql)), (Abs (maybe_swap pl) (k :: pl)), (Abs (maybe_swap pl) (merge q q)), (Abs (maybe_swap pl) (merge q p)), (Abs (maybe_swap pl) (merge q ql)), (Abs (maybe_swap pl) (merge q pl)), (Abs (maybe_swap pl) (merge p q)), (Abs (maybe_swap pl) (merge p p)), (Abs (maybe_swap pl) (merge p ql)), (Abs (maybe_swap pl) (merge p pl))
(Abs (maybe_swap pl) (merge ql q)), (Abs (maybe_swap pl) (merge ql p)), (Abs (maybe_swap pl) (merge ql ql)), (Abs (maybe_swap pl) (merge ql pl)), (Abs (maybe_swap pl) (merge pl q)), (Abs (maybe_swap pl) (merge pl p)), (Abs (maybe_swap pl) (merge pl ql)), (Abs (maybe_swap pl) (merge pl pl)), (Abs (maybe_swap pl) (insert a q)), (Abs (maybe_swap pl) (insert a p))
(Abs (maybe_swap pl) (insert a ql)), (Abs (maybe_swap pl) (insert a pl)), (Abs (maybe_swap pl) (insert k q)), (Abs (maybe_swap pl) (insert k p)), (Abs (maybe_swap pl) (insert k ql)), (Abs (maybe_swap pl) (insert k pl)), (Abs (maybe_swap pl) (maybe_swap q)), (Abs (maybe_swap pl) (maybe_swap p)), (Abs (maybe_swap pl) (maybe_swap ql)), (Abs (maybe_swap pl) (q ++ q))
(Abs (maybe_swap pl) (q ++ p)), (Abs (maybe_swap pl) (q ++ ql)), (Abs (maybe_swap pl) (q ++ pl)), (Abs (maybe_swap pl) (p ++ q)), (Abs (maybe_swap pl) (p ++ p)), (Abs (maybe_swap pl) (p ++ ql)), (Abs (maybe_swap pl) (p ++ pl)), (Abs (maybe_swap pl) (ql ++ q)), (Abs (maybe_swap pl) (ql ++ p)), (Abs (maybe_swap pl) (ql ++ ql))
(Abs (maybe_swap pl) (ql ++ pl)), (Abs (maybe_swap pl) (pl ++ q)), (Abs (maybe_swap pl) (pl ++ p)), (Abs (maybe_swap pl) (pl ++ ql)), (Abs (maybe_swap pl) (pl ++ pl)), (Abs (maybe_swap pl) []), (Abs (q ++ q) q), (Abs (q ++ q) p), (Abs (q ++ q) ql), (Abs (q ++ q) pl)
(Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: pl)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: pl)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q p))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q pl)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p pl)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql pl))
(Abs (q ++ q) (merge pl q)), (Abs (q ++ q) (merge pl p)), (Abs (q ++ q) (merge pl ql)), (Abs (q ++ q) (merge pl pl)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a pl)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k p))
(Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k pl)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap pl)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ pl)), (Abs (q ++ q) (p ++ q))
(Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ pl)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ pl)), (Abs (q ++ q) (pl ++ q)), (Abs (q ++ q) (pl ++ p)), (Abs (q ++ q) (pl ++ ql))
(Abs (q ++ q) (pl ++ pl)), (Abs (q ++ q) []), (Abs (q ++ p) q), (Abs (q ++ p) p), (Abs (q ++ p) ql), (Abs (q ++ p) pl), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: pl))
(Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: pl)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q pl)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p pl)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql pl)), (Abs (q ++ p) (merge pl q)), (Abs (q ++ p) (merge pl p)), (Abs (q ++ p) (merge pl ql)), (Abs (q ++ p) (merge pl pl))
(Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a pl)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k pl)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap p))
(Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap pl)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ pl)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ pl)), (Abs (q ++ p) (ql ++ q))
(Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ pl)), (Abs (q ++ p) (pl ++ q)), (Abs (q ++ p) (pl ++ p)), (Abs (q ++ p) (pl ++ ql)), (Abs (q ++ p) (pl ++ pl)), (Abs (q ++ p) []), (Abs (q ++ ql) q), (Abs (q ++ ql) p)
(Abs (q ++ ql) ql), (Abs (q ++ ql) pl), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: pl)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: pl))
(Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q pl)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p pl)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql p))
(Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql pl)), (Abs (q ++ ql) (merge pl q)), (Abs (q ++ ql) (merge pl p)), (Abs (q ++ ql) (merge pl ql)), (Abs (q ++ ql) (merge pl pl)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a pl))
(Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k pl)), (Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap pl)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p))
(Abs (q ++ ql) (q ++ pl)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ pl)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ pl)), (Abs (q ++ ql) (pl ++ q))
(Abs (q ++ ql) (pl ++ p)), (Abs (q ++ ql) (pl ++ ql)), (Abs (q ++ ql) (pl ++ pl)), (Abs (q ++ ql) []), (Abs (q ++ pl) q), (Abs (q ++ pl) p), (Abs (q ++ pl) ql), (Abs (q ++ pl) pl), (Abs (q ++ pl) (a :: q)), (Abs (q ++ pl) (a :: p))
(Abs (q ++ pl) (a :: ql)), (Abs (q ++ pl) (a :: pl)), (Abs (q ++ pl) (k :: q)), (Abs (q ++ pl) (k :: p)), (Abs (q ++ pl) (k :: ql)), (Abs (q ++ pl) (k :: pl)), (Abs (q ++ pl) (merge q q)), (Abs (q ++ pl) (merge q p)), (Abs (q ++ pl) (merge q ql)), (Abs (q ++ pl) (merge q pl))
(Abs (q ++ pl) (merge p q)), (Abs (q ++ pl) (merge p p)), (Abs (q ++ pl) (merge p ql)), (Abs (q ++ pl) (merge p pl)), (Abs (q ++ pl) (merge ql q)), (Abs (q ++ pl) (merge ql p)), (Abs (q ++ pl) (merge ql ql)), (Abs (q ++ pl) (merge ql pl)), (Abs (q ++ pl) (merge pl q)), (Abs (q ++ pl) (merge pl p))
(Abs (q ++ pl) (merge pl ql)), (Abs (q ++ pl) (merge pl pl)), (Abs (q ++ pl) (insert a q)), (Abs (q ++ pl) (insert a p)), (Abs (q ++ pl) (insert a ql)), (Abs (q ++ pl) (insert a pl)), (Abs (q ++ pl) (insert k q)), (Abs (q ++ pl) (insert k p)), (Abs (q ++ pl) (insert k ql)), (Abs (q ++ pl) (insert k pl))
(Abs (q ++ pl) (maybe_swap q)), (Abs (q ++ pl) (maybe_swap p)), (Abs (q ++ pl) (maybe_swap ql)), (Abs (q ++ pl) (maybe_swap pl)), (Abs (q ++ pl) (q ++ q)), (Abs (q ++ pl) (q ++ p)), (Abs (q ++ pl) (q ++ ql)), (Abs (q ++ pl) (p ++ q)), (Abs (q ++ pl) (p ++ p)), (Abs (q ++ pl) (p ++ ql))
(Abs (q ++ pl) (p ++ pl)), (Abs (q ++ pl) (ql ++ q)), (Abs (q ++ pl) (ql ++ p)), (Abs (q ++ pl) (ql ++ ql)), (Abs (q ++ pl) (ql ++ pl)), (Abs (q ++ pl) (pl ++ q)), (Abs (q ++ pl) (pl ++ p)), (Abs (q ++ pl) (pl ++ ql)), (Abs (q ++ pl) (pl ++ pl)), (Abs (q ++ pl) [])
(Abs (p ++ q) q), (Abs (p ++ q) p), (Abs (p ++ q) ql), (Abs (p ++ q) pl), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: pl)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: pl)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q pl)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p pl))
(Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql pl)), (Abs (p ++ q) (merge pl q)), (Abs (p ++ q) (merge pl p)), (Abs (p ++ q) (merge pl ql)), (Abs (p ++ q) (merge pl pl)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a pl)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k pl)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap pl))
(Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ pl)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ pl)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (ql ++ ql))
(Abs (p ++ q) (ql ++ pl)), (Abs (p ++ q) (pl ++ q)), (Abs (p ++ q) (pl ++ p)), (Abs (p ++ q) (pl ++ ql)), (Abs (p ++ q) (pl ++ pl)), (Abs (p ++ q) []), (Abs (p ++ p) q), (Abs (p ++ p) p), (Abs (p ++ p) ql), (Abs (p ++ p) pl)
(Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: pl)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: pl)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q pl)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p pl)), (Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql pl))
(Abs (p ++ p) (merge pl q)), (Abs (p ++ p) (merge pl p)), (Abs (p ++ p) (merge pl ql)), (Abs (p ++ p) (merge pl pl)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a pl)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k p))
(Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k pl)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap pl)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ pl))
(Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ pl)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ pl)), (Abs (p ++ p) (pl ++ q)), (Abs (p ++ p) (pl ++ p)), (Abs (p ++ p) (pl ++ ql))
(Abs (p ++ p) (pl ++ pl)), (Abs (p ++ p) []), (Abs (p ++ ql) q), (Abs (p ++ ql) p), (Abs (p ++ ql) ql), (Abs (p ++ ql) pl), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: pl))
(Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: pl)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q pl)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p pl)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql pl)), (Abs (p ++ ql) (merge pl q)), (Abs (p ++ ql) (merge pl p)), (Abs (p ++ ql) (merge pl ql)), (Abs (p ++ ql) (merge pl pl))
(Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a pl)), (Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k pl)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap p))
(Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap pl)), (Abs (p ++ ql) (q ++ q)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ pl)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) (p ++ pl)), (Abs (p ++ ql) (ql ++ q))
(Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ pl)), (Abs (p ++ ql) (pl ++ q)), (Abs (p ++ ql) (pl ++ p)), (Abs (p ++ ql) (pl ++ ql)), (Abs (p ++ ql) (pl ++ pl)), (Abs (p ++ ql) []), (Abs (p ++ pl) q), (Abs (p ++ pl) p)
(Abs (p ++ pl) ql), (Abs (p ++ pl) pl), (Abs (p ++ pl) (a :: q)), (Abs (p ++ pl) (a :: p)), (Abs (p ++ pl) (a :: ql)), (Abs (p ++ pl) (a :: pl)), (Abs (p ++ pl) (k :: q)), (Abs (p ++ pl) (k :: p)), (Abs (p ++ pl) (k :: ql)), (Abs (p ++ pl) (k :: pl))
(Abs (p ++ pl) (merge q q)), (Abs (p ++ pl) (merge q p)), (Abs (p ++ pl) (merge q ql)), (Abs (p ++ pl) (merge q pl)), (Abs (p ++ pl) (merge p q)), (Abs (p ++ pl) (merge p p)), (Abs (p ++ pl) (merge p ql)), (Abs (p ++ pl) (merge p pl)), (Abs (p ++ pl) (merge ql q)), (Abs (p ++ pl) (merge ql p))
(Abs (p ++ pl) (merge ql ql)), (Abs (p ++ pl) (merge ql pl)), (Abs (p ++ pl) (merge pl q)), (Abs (p ++ pl) (merge pl p)), (Abs (p ++ pl) (merge pl ql)), (Abs (p ++ pl) (merge pl pl)), (Abs (p ++ pl) (insert a q)), (Abs (p ++ pl) (insert a p)), (Abs (p ++ pl) (insert a ql)), (Abs (p ++ pl) (insert a pl))
(Abs (p ++ pl) (insert k q)), (Abs (p ++ pl) (insert k p)), (Abs (p ++ pl) (insert k ql)), (Abs (p ++ pl) (insert k pl)), (Abs (p ++ pl) (maybe_swap q)), (Abs (p ++ pl) (maybe_swap p)), (Abs (p ++ pl) (maybe_swap ql)), (Abs (p ++ pl) (maybe_swap pl)), (Abs (p ++ pl) (q ++ q)), (Abs (p ++ pl) (q ++ p))
(Abs (p ++ pl) (q ++ ql)), (Abs (p ++ pl) (q ++ pl)), (Abs (p ++ pl) (p ++ q)), (Abs (p ++ pl) (p ++ p)), (Abs (p ++ pl) (p ++ ql)), (Abs (p ++ pl) (ql ++ q)), (Abs (p ++ pl) (ql ++ p)), (Abs (p ++ pl) (ql ++ ql)), (Abs (p ++ pl) (ql ++ pl)), (Abs (p ++ pl) (pl ++ q))
(Abs (p ++ pl) (pl ++ p)), (Abs (p ++ pl) (pl ++ ql)), (Abs (p ++ pl) (pl ++ pl)), (Abs (p ++ pl) []), (Abs (ql ++ q) q), (Abs (ql ++ q) p), (Abs (ql ++ q) ql), (Abs (ql ++ q) pl), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: p))
(Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: pl)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: pl)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q pl))
(Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p pl)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql pl)), (Abs (ql ++ q) (merge pl q)), (Abs (ql ++ q) (merge pl p))
(Abs (ql ++ q) (merge pl ql)), (Abs (ql ++ q) (merge pl pl)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a pl)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k pl))
(Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap pl)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ pl)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ p))
(Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ pl)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ pl)), (Abs (ql ++ q) (pl ++ q)), (Abs (ql ++ q) (pl ++ p)), (Abs (ql ++ q) (pl ++ ql)), (Abs (ql ++ q) (pl ++ pl)), (Abs (ql ++ q) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) p), (Abs (ql ++ p) ql), (Abs (ql ++ p) pl), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: pl)), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: p))
(Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: pl)), (Abs (ql ++ p) (merge q q)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q pl)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p pl))
(Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql pl)), (Abs (ql ++ p) (merge pl q)), (Abs (ql ++ p) (merge pl p)), (Abs (ql ++ p) (merge pl ql)), (Abs (ql ++ p) (merge pl pl)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a p))
(Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a pl)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k pl)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap pl))
(Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ p)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ pl)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ pl)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql))
(Abs (ql ++ p) (ql ++ pl)), (Abs (ql ++ p) (pl ++ q)), (Abs (ql ++ p) (pl ++ p)), (Abs (ql ++ p) (pl ++ ql)), (Abs (ql ++ p) (pl ++ pl)), (Abs (ql ++ p) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) p), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) pl)
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: pl)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: pl)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q p))
(Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q pl)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p pl)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql pl))
(Abs (ql ++ ql) (merge pl q)), (Abs (ql ++ ql) (merge pl p)), (Abs (ql ++ ql) (merge pl ql)), (Abs (ql ++ ql) (merge pl pl)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a pl)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k p))
(Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k pl)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap pl)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ pl))
(Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ pl)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (ql ++ pl)), (Abs (ql ++ ql) (pl ++ q)), (Abs (ql ++ ql) (pl ++ p)), (Abs (ql ++ ql) (pl ++ ql))
(Abs (ql ++ ql) (pl ++ pl)), (Abs (ql ++ ql) []), (Abs (ql ++ pl) q), (Abs (ql ++ pl) p), (Abs (ql ++ pl) ql), (Abs (ql ++ pl) pl), (Abs (ql ++ pl) (a :: q)), (Abs (ql ++ pl) (a :: p)), (Abs (ql ++ pl) (a :: ql)), (Abs (ql ++ pl) (a :: pl))
(Abs (ql ++ pl) (k :: q)), (Abs (ql ++ pl) (k :: p)), (Abs (ql ++ pl) (k :: ql)), (Abs (ql ++ pl) (k :: pl)), (Abs (ql ++ pl) (merge q q)), (Abs (ql ++ pl) (merge q p)), (Abs (ql ++ pl) (merge q ql)), (Abs (ql ++ pl) (merge q pl)), (Abs (ql ++ pl) (merge p q)), (Abs (ql ++ pl) (merge p p))
(Abs (ql ++ pl) (merge p ql)), (Abs (ql ++ pl) (merge p pl)), (Abs (ql ++ pl) (merge ql q)), (Abs (ql ++ pl) (merge ql p)), (Abs (ql ++ pl) (merge ql ql)), (Abs (ql ++ pl) (merge ql pl)), (Abs (ql ++ pl) (merge pl q)), (Abs (ql ++ pl) (merge pl p)), (Abs (ql ++ pl) (merge pl ql)), (Abs (ql ++ pl) (merge pl pl))
(Abs (ql ++ pl) (insert a q)), (Abs (ql ++ pl) (insert a p)), (Abs (ql ++ pl) (insert a ql)), (Abs (ql ++ pl) (insert a pl)), (Abs (ql ++ pl) (insert k q)), (Abs (ql ++ pl) (insert k p)), (Abs (ql ++ pl) (insert k ql)), (Abs (ql ++ pl) (insert k pl)), (Abs (ql ++ pl) (maybe_swap q)), (Abs (ql ++ pl) (maybe_swap p))
(Abs (ql ++ pl) (maybe_swap ql)), (Abs (ql ++ pl) (maybe_swap pl)), (Abs (ql ++ pl) (q ++ q)), (Abs (ql ++ pl) (q ++ p)), (Abs (ql ++ pl) (q ++ ql)), (Abs (ql ++ pl) (q ++ pl)), (Abs (ql ++ pl) (p ++ q)), (Abs (ql ++ pl) (p ++ p)), (Abs (ql ++ pl) (p ++ ql)), (Abs (ql ++ pl) (p ++ pl))
(Abs (ql ++ pl) (ql ++ q)), (Abs (ql ++ pl) (ql ++ p)), (Abs (ql ++ pl) (ql ++ ql)), (Abs (ql ++ pl) (pl ++ q)), (Abs (ql ++ pl) (pl ++ p)), (Abs (ql ++ pl) (pl ++ ql)), (Abs (ql ++ pl) (pl ++ pl)), (Abs (ql ++ pl) []), (Abs (pl ++ q) q), (Abs (pl ++ q) p)
(Abs (pl ++ q) ql), (Abs (pl ++ q) pl), (Abs (pl ++ q) (a :: q)), (Abs (pl ++ q) (a :: p)), (Abs (pl ++ q) (a :: ql)), (Abs (pl ++ q) (a :: pl)), (Abs (pl ++ q) (k :: q)), (Abs (pl ++ q) (k :: p)), (Abs (pl ++ q) (k :: ql)), (Abs (pl ++ q) (k :: pl))
(Abs (pl ++ q) (merge q q)), (Abs (pl ++ q) (merge q p)), (Abs (pl ++ q) (merge q ql)), (Abs (pl ++ q) (merge q pl)), (Abs (pl ++ q) (merge p q)), (Abs (pl ++ q) (merge p p)), (Abs (pl ++ q) (merge p ql)), (Abs (pl ++ q) (merge p pl)), (Abs (pl ++ q) (merge ql q)), (Abs (pl ++ q) (merge ql p))
(Abs (pl ++ q) (merge ql ql)), (Abs (pl ++ q) (merge ql pl)), (Abs (pl ++ q) (merge pl q)), (Abs (pl ++ q) (merge pl p)), (Abs (pl ++ q) (merge pl ql)), (Abs (pl ++ q) (merge pl pl)), (Abs (pl ++ q) (insert a q)), (Abs (pl ++ q) (insert a p)), (Abs (pl ++ q) (insert a ql)), (Abs (pl ++ q) (insert a pl))
(Abs (pl ++ q) (insert k q)), (Abs (pl ++ q) (insert k p)), (Abs (pl ++ q) (insert k ql)), (Abs (pl ++ q) (insert k pl)), (Abs (pl ++ q) (maybe_swap q)), (Abs (pl ++ q) (maybe_swap p)), (Abs (pl ++ q) (maybe_swap ql)), (Abs (pl ++ q) (maybe_swap pl)), (Abs (pl ++ q) (q ++ q)), (Abs (pl ++ q) (q ++ p))
(Abs (pl ++ q) (q ++ ql)), (Abs (pl ++ q) (q ++ pl)), (Abs (pl ++ q) (p ++ q)), (Abs (pl ++ q) (p ++ p)), (Abs (pl ++ q) (p ++ ql)), (Abs (pl ++ q) (p ++ pl)), (Abs (pl ++ q) (ql ++ q)), (Abs (pl ++ q) (ql ++ p)), (Abs (pl ++ q) (ql ++ ql)), (Abs (pl ++ q) (ql ++ pl))
(Abs (pl ++ q) (pl ++ p)), (Abs (pl ++ q) (pl ++ ql)), (Abs (pl ++ q) (pl ++ pl)), (Abs (pl ++ q) []), (Abs (pl ++ p) q), (Abs (pl ++ p) p), (Abs (pl ++ p) ql), (Abs (pl ++ p) pl), (Abs (pl ++ p) (a :: q)), (Abs (pl ++ p) (a :: p))
(Abs (pl ++ p) (a :: ql)), (Abs (pl ++ p) (a :: pl)), (Abs (pl ++ p) (k :: q)), (Abs (pl ++ p) (k :: p)), (Abs (pl ++ p) (k :: ql)), (Abs (pl ++ p) (k :: pl)), (Abs (pl ++ p) (merge q q)), (Abs (pl ++ p) (merge q p)), (Abs (pl ++ p) (merge q ql)), (Abs (pl ++ p) (merge q pl))
(Abs (pl ++ p) (merge p q)), (Abs (pl ++ p) (merge p p)), (Abs (pl ++ p) (merge p ql)), (Abs (pl ++ p) (merge p pl)), (Abs (pl ++ p) (merge ql q)), (Abs (pl ++ p) (merge ql p)), (Abs (pl ++ p) (merge ql ql)), (Abs (pl ++ p) (merge ql pl)), (Abs (pl ++ p) (merge pl q)), (Abs (pl ++ p) (merge pl p))
(Abs (pl ++ p) (merge pl ql)), (Abs (pl ++ p) (merge pl pl)), (Abs (pl ++ p) (insert a q)), (Abs (pl ++ p) (insert a p)), (Abs (pl ++ p) (insert a ql)), (Abs (pl ++ p) (insert a pl)), (Abs (pl ++ p) (insert k q)), (Abs (pl ++ p) (insert k p)), (Abs (pl ++ p) (insert k ql)), (Abs (pl ++ p) (insert k pl))
(Abs (pl ++ p) (maybe_swap q)), (Abs (pl ++ p) (maybe_swap p)), (Abs (pl ++ p) (maybe_swap ql)), (Abs (pl ++ p) (maybe_swap pl)), (Abs (pl ++ p) (q ++ q)), (Abs (pl ++ p) (q ++ p)), (Abs (pl ++ p) (q ++ ql)), (Abs (pl ++ p) (q ++ pl)), (Abs (pl ++ p) (p ++ q)), (Abs (pl ++ p) (p ++ p))
(Abs (pl ++ p) (p ++ ql)), (Abs (pl ++ p) (p ++ pl)), (Abs (pl ++ p) (ql ++ q)), (Abs (pl ++ p) (ql ++ p)), (Abs (pl ++ p) (ql ++ ql)), (Abs (pl ++ p) (ql ++ pl)), (Abs (pl ++ p) (pl ++ q)), (Abs (pl ++ p) (pl ++ ql)), (Abs (pl ++ p) (pl ++ pl)), (Abs (pl ++ p) [])
(Abs (pl ++ ql) q), (Abs (pl ++ ql) p), (Abs (pl ++ ql) ql), (Abs (pl ++ ql) pl), (Abs (pl ++ ql) (a :: q)), (Abs (pl ++ ql) (a :: p)), (Abs (pl ++ ql) (a :: ql)), (Abs (pl ++ ql) (a :: pl)), (Abs (pl ++ ql) (k :: q)), (Abs (pl ++ ql) (k :: p))
(Abs (pl ++ ql) (k :: ql)), (Abs (pl ++ ql) (k :: pl)), (Abs (pl ++ ql) (merge q q)), (Abs (pl ++ ql) (merge q p)), (Abs (pl ++ ql) (merge q ql)), (Abs (pl ++ ql) (merge q pl)), (Abs (pl ++ ql) (merge p q)), (Abs (pl ++ ql) (merge p p)), (Abs (pl ++ ql) (merge p ql)), (Abs (pl ++ ql) (merge p pl))
(Abs (pl ++ ql) (merge ql q)), (Abs (pl ++ ql) (merge ql p)), (Abs (pl ++ ql) (merge ql ql)), (Abs (pl ++ ql) (merge ql pl)), (Abs (pl ++ ql) (merge pl q)), (Abs (pl ++ ql) (merge pl p)), (Abs (pl ++ ql) (merge pl ql)), (Abs (pl ++ ql) (merge pl pl)), (Abs (pl ++ ql) (insert a q)), (Abs (pl ++ ql) (insert a p))
(Abs (pl ++ ql) (insert a ql)), (Abs (pl ++ ql) (insert a pl)), (Abs (pl ++ ql) (insert k q)), (Abs (pl ++ ql) (insert k p)), (Abs (pl ++ ql) (insert k ql)), (Abs (pl ++ ql) (insert k pl)), (Abs (pl ++ ql) (maybe_swap q)), (Abs (pl ++ ql) (maybe_swap p)), (Abs (pl ++ ql) (maybe_swap ql)), (Abs (pl ++ ql) (maybe_swap pl))
(Abs (pl ++ ql) (q ++ q)), (Abs (pl ++ ql) (q ++ p)), (Abs (pl ++ ql) (q ++ ql)), (Abs (pl ++ ql) (q ++ pl)), (Abs (pl ++ ql) (p ++ q)), (Abs (pl ++ ql) (p ++ p)), (Abs (pl ++ ql) (p ++ ql)), (Abs (pl ++ ql) (p ++ pl)), (Abs (pl ++ ql) (ql ++ q)), (Abs (pl ++ ql) (ql ++ p))
(Abs (pl ++ ql) (ql ++ ql)), (Abs (pl ++ ql) (ql ++ pl)), (Abs (pl ++ ql) (pl ++ q)), (Abs (pl ++ ql) (pl ++ p)), (Abs (pl ++ ql) (pl ++ pl)), (Abs (pl ++ ql) []), (Abs (pl ++ pl) q), (Abs (pl ++ pl) p), (Abs (pl ++ pl) ql), (Abs (pl ++ pl) pl)
(Abs (pl ++ pl) (a :: q)), (Abs (pl ++ pl) (a :: p)), (Abs (pl ++ pl) (a :: ql)), (Abs (pl ++ pl) (a :: pl)), (Abs (pl ++ pl) (k :: q)), (Abs (pl ++ pl) (k :: p)), (Abs (pl ++ pl) (k :: ql)), (Abs (pl ++ pl) (k :: pl)), (Abs (pl ++ pl) (merge q q)), (Abs (pl ++ pl) (merge q p))
(Abs (pl ++ pl) (merge q ql)), (Abs (pl ++ pl) (merge q pl)), (Abs (pl ++ pl) (merge p q)), (Abs (pl ++ pl) (merge p p)), (Abs (pl ++ pl) (merge p ql)), (Abs (pl ++ pl) (merge p pl)), (Abs (pl ++ pl) (merge ql q)), (Abs (pl ++ pl) (merge ql p)), (Abs (pl ++ pl) (merge ql ql)), (Abs (pl ++ pl) (merge ql pl))
(Abs (pl ++ pl) (merge pl q)), (Abs (pl ++ pl) (merge pl p)), (Abs (pl ++ pl) (merge pl ql)), (Abs (pl ++ pl) (merge pl pl)), (Abs (pl ++ pl) (insert a q)), (Abs (pl ++ pl) (insert a p)), (Abs (pl ++ pl) (insert a ql)), (Abs (pl ++ pl) (insert a pl)), (Abs (pl ++ pl) (insert k q)), (Abs (pl ++ pl) (insert k p))
(Abs (pl ++ pl) (insert k ql)), (Abs (pl ++ pl) (insert k pl)), (Abs (pl ++ pl) (maybe_swap q)), (Abs (pl ++ pl) (maybe_swap p)), (Abs (pl ++ pl) (maybe_swap ql)), (Abs (pl ++ pl) (maybe_swap pl)), (Abs (pl ++ pl) (q ++ q)), (Abs (pl ++ pl) (q ++ p)), (Abs (pl ++ pl) (q ++ ql)), (Abs (pl ++ pl) (q ++ pl))
(Abs (pl ++ pl) (p ++ q)), (Abs (pl ++ pl) (p ++ p)), (Abs (pl ++ pl) (p ++ ql)), (Abs (pl ++ pl) (p ++ pl)), (Abs (pl ++ pl) (ql ++ q)), (Abs (pl ++ pl) (ql ++ p)), (Abs (pl ++ pl) (ql ++ ql)), (Abs (pl ++ pl) (ql ++ pl)), (Abs (pl ++ pl) (pl ++ q)), (Abs (pl ++ pl) (pl ++ p))
(Abs (pl ++ pl) (pl ++ ql)), (Abs (pl ++ pl) []), (Abs [] q), (Abs [] p), (Abs [] ql), (Abs [] pl), (Abs [] (a :: q)), (Abs [] (a :: p)), (Abs [] (a :: ql)), (Abs [] (a :: pl))
(Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (k :: ql)), (Abs [] (k :: pl)), (Abs [] (merge q q)), (Abs [] (merge q p)), (Abs [] (merge q ql)), (Abs [] (merge q pl)), (Abs [] (merge p q)), (Abs [] (merge p p))
(Abs [] (merge p ql)), (Abs [] (merge p pl)), (Abs [] (merge ql q)), (Abs [] (merge ql p)), (Abs [] (merge ql ql)), (Abs [] (merge ql pl)), (Abs [] (merge pl q)), (Abs [] (merge pl p)), (Abs [] (merge pl ql)), (Abs [] (merge pl pl))
(Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (insert a ql)), (Abs [] (insert a pl)), (Abs [] (insert k q)), (Abs [] (insert k p)), (Abs [] (insert k ql)), (Abs [] (insert k pl)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap p))
(Abs [] (maybe_swap ql)), (Abs [] (maybe_swap pl)), (Abs [] (q ++ q)), (Abs [] (q ++ p)), (Abs [] (q ++ ql)), (Abs [] (q ++ pl)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (Abs [] (p ++ ql)), (Abs [] (p ++ pl))
(Abs [] (ql ++ q)), (Abs [] (ql ++ p)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ pl)), (Abs [] (pl ++ q)), (Abs [] (pl ++ p)), (Abs [] (pl ++ ql)), (Abs [] (pl ++ pl)), (priq (a :: q)), (priq (a :: p))
(priq (a :: ql)), (priq (a :: pl)), (priq (k :: q)), (priq (k :: p)), (priq (k :: ql)), (priq (k :: pl)), (priq (merge q q)), (priq (merge q p)), (priq (merge q ql)), (priq (merge q pl))
(priq (merge p q)), (priq (merge p p)), (priq (merge p ql)), (priq (merge p pl)), (priq (merge ql q)), (priq (merge ql p)), (priq (merge ql ql)), (priq (merge ql pl)), (priq (merge pl q)), (priq (merge pl p))
(priq (merge pl ql)), (priq (merge pl pl)), (priq (insert a q)), (priq (insert a p)), (priq (insert a ql)), (priq (insert a pl)), (priq (insert k q)), (priq (insert k p)), (priq (insert k ql)), (priq (insert k pl))
(priq (maybe_swap q)), (priq (maybe_swap p)), (priq (maybe_swap ql)), (priq (maybe_swap pl)), (priq (q ++ q)), (priq (q ++ p)), (priq (q ++ ql)), (priq (q ++ pl)), (priq (p ++ q)), (priq (p ++ p))
(priq (p ++ ql)), (priq (p ++ pl)), (priq (ql ++ q)), (priq (ql ++ p)), (priq (ql ++ ql)), (priq (ql ++ pl)), (priq (pl ++ q)), (priq (pl ++ p)), (priq (pl ++ ql)), (priq (pl ++ pl))
(priq []), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (a :: ql)), (Permutation q (a :: pl)), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (k :: ql)), (Permutation q (k :: pl)), (Permutation q (merge q q))
(Permutation q (merge q p)), (Permutation q (merge q ql)), (Permutation q (merge q pl)), (Permutation q (merge p q)), (Permutation q (merge p p)), (Permutation q (merge p ql)), (Permutation q (merge p pl)), (Permutation q (merge ql q)), (Permutation q (merge ql p)), (Permutation q (merge ql ql))
(Permutation q (merge ql pl)), (Permutation q (merge pl q)), (Permutation q (merge pl p)), (Permutation q (merge pl ql)), (Permutation q (merge pl pl)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (insert a ql)), (Permutation q (insert a pl)), (Permutation q (insert k q))
(Permutation q (insert k p)), (Permutation q (insert k ql)), (Permutation q (insert k pl)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap pl)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (q ++ ql))
(Permutation q (q ++ pl)), (Permutation q (p ++ q)), (Permutation q (p ++ p)), (Permutation q (p ++ ql)), (Permutation q (p ++ pl)), (Permutation q (ql ++ q)), (Permutation q (ql ++ p)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ pl)), (Permutation q (pl ++ q))
(Permutation q (pl ++ p)), (Permutation q (pl ++ ql)), (Permutation q (pl ++ pl)), (Permutation q []), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (a :: ql)), (Permutation p (a :: pl)), (Permutation p (k :: q)), (Permutation p (k :: p))
(Permutation p (k :: ql)), (Permutation p (k :: pl)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge q ql)), (Permutation p (merge q pl)), (Permutation p (merge p q)), (Permutation p (merge p p)), (Permutation p (merge p ql)), (Permutation p (merge p pl))
(Permutation p (merge ql q)), (Permutation p (merge ql p)), (Permutation p (merge ql ql)), (Permutation p (merge ql pl)), (Permutation p (merge pl q)), (Permutation p (merge pl p)), (Permutation p (merge pl ql)), (Permutation p (merge pl pl)), (Permutation p (insert a q)), (Permutation p (insert a p))
(Permutation p (insert a ql)), (Permutation p (insert a pl)), (Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert k ql)), (Permutation p (insert k pl)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap pl))
(Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (q ++ ql)), (Permutation p (q ++ pl)), (Permutation p (p ++ q)), (Permutation p (p ++ p)), (Permutation p (p ++ ql)), (Permutation p (p ++ pl)), (Permutation p (ql ++ q)), (Permutation p (ql ++ p))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ pl)), (Permutation p (pl ++ q)), (Permutation p (pl ++ p)), (Permutation p (pl ++ ql)), (Permutation p (pl ++ pl)), (Permutation p []), (Permutation ql (a :: q)), (Permutation ql (a :: p)), (Permutation ql (a :: ql))
(Permutation ql (a :: pl)), (Permutation ql (k :: q)), (Permutation ql (k :: p)), (Permutation ql (k :: ql)), (Permutation ql (k :: pl)), (Permutation ql (merge q q)), (Permutation ql (merge q p)), (Permutation ql (merge q ql)), (Permutation ql (merge q pl)), (Permutation ql (merge p q))
(Permutation ql (merge p p)), (Permutation ql (merge p ql)), (Permutation ql (merge p pl)), (Permutation ql (merge ql q)), (Permutation ql (merge ql p)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql pl)), (Permutation ql (merge pl q)), (Permutation ql (merge pl p)), (Permutation ql (merge pl ql))
(Permutation ql (merge pl pl)), (Permutation ql (insert a q)), (Permutation ql (insert a p)), (Permutation ql (insert a ql)), (Permutation ql (insert a pl)), (Permutation ql (insert k q)), (Permutation ql (insert k p)), (Permutation ql (insert k ql)), (Permutation ql (insert k pl)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap p)), (Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap pl)), (Permutation ql (q ++ q)), (Permutation ql (q ++ p)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ pl)), (Permutation ql (p ++ q)), (Permutation ql (p ++ p)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ pl)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ p)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ pl)), (Permutation ql (pl ++ q)), (Permutation ql (pl ++ p)), (Permutation ql (pl ++ ql)), (Permutation ql (pl ++ pl)), (Permutation ql [])
(Permutation pl (a :: q)), (Permutation pl (a :: p)), (Permutation pl (a :: ql)), (Permutation pl (a :: pl)), (Permutation pl (k :: q)), (Permutation pl (k :: p)), (Permutation pl (k :: ql)), (Permutation pl (k :: pl)), (Permutation pl (merge q q)), (Permutation pl (merge q p))
(Permutation pl (merge q ql)), (Permutation pl (merge q pl)), (Permutation pl (merge p q)), (Permutation pl (merge p p)), (Permutation pl (merge p ql)), (Permutation pl (merge p pl)), (Permutation pl (merge ql q)), (Permutation pl (merge ql p)), (Permutation pl (merge ql ql)), (Permutation pl (merge ql pl))
(Permutation pl (merge pl q)), (Permutation pl (merge pl p)), (Permutation pl (merge pl ql)), (Permutation pl (merge pl pl)), (Permutation pl (insert a q)), (Permutation pl (insert a p)), (Permutation pl (insert a ql)), (Permutation pl (insert a pl)), (Permutation pl (insert k q)), (Permutation pl (insert k p))
(Permutation pl (insert k ql)), (Permutation pl (insert k pl)), (Permutation pl (maybe_swap q)), (Permutation pl (maybe_swap p)), (Permutation pl (maybe_swap ql)), (Permutation pl (maybe_swap pl)), (Permutation pl (q ++ q)), (Permutation pl (q ++ p)), (Permutation pl (q ++ ql)), (Permutation pl (q ++ pl))
(Permutation pl (p ++ q)), (Permutation pl (p ++ p)), (Permutation pl (p ++ ql)), (Permutation pl (p ++ pl)), (Permutation pl (ql ++ q)), (Permutation pl (ql ++ p)), (Permutation pl (ql ++ ql)), (Permutation pl (ql ++ pl)), (Permutation pl (pl ++ q)), (Permutation pl (pl ++ p))
(Permutation pl (pl ++ ql)), (Permutation pl (pl ++ pl)), (Permutation pl []), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) ql), (Permutation (a :: q) pl), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: pl))
(Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: pl)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q pl)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p pl)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql pl)), (Permutation (a :: q) (merge pl q)), (Permutation (a :: q) (merge pl p)), (Permutation (a :: q) (merge pl ql)), (Permutation (a :: q) (merge pl pl))
(Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a pl)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k pl)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap pl)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ pl)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ pl))
(Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ pl)), (Permutation (a :: q) (pl ++ q)), (Permutation (a :: q) (pl ++ p)), (Permutation (a :: q) (pl ++ ql)), (Permutation (a :: q) (pl ++ pl)), (Permutation (a :: q) []), (Permutation (a :: p) q)
(Permutation (a :: p) p), (Permutation (a :: p) ql), (Permutation (a :: p) pl), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: pl)), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: pl))
(Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q pl)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p pl)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql pl)), (Permutation (a :: p) (merge pl q)), (Permutation (a :: p) (merge pl p)), (Permutation (a :: p) (merge pl ql)), (Permutation (a :: p) (merge pl pl)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a pl))
(Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k pl)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap pl)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p))
(Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ pl)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ pl)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ pl))
(Permutation (a :: p) (pl ++ q)), (Permutation (a :: p) (pl ++ p)), (Permutation (a :: p) (pl ++ ql)), (Permutation (a :: p) (pl ++ pl)), (Permutation (a :: p) []), (Permutation (a :: ql) q), (Permutation (a :: ql) p), (Permutation (a :: ql) ql), (Permutation (a :: ql) pl), (Permutation (a :: ql) (a :: q))
(Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (a :: pl)), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: pl)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q pl))
(Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p pl)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql pl)), (Permutation (a :: ql) (merge pl q)), (Permutation (a :: ql) (merge pl p))
(Permutation (a :: ql) (merge pl ql)), (Permutation (a :: ql) (merge pl pl)), (Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a pl)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k pl))
(Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap pl)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ pl)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ p))
(Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ pl)), (Permutation (a :: ql) (ql ++ q)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ pl)), (Permutation (a :: ql) (pl ++ q)), (Permutation (a :: ql) (pl ++ p)), (Permutation (a :: ql) (pl ++ ql)), (Permutation (a :: ql) (pl ++ pl))
(Permutation (a :: ql) []), (Permutation (a :: pl) q), (Permutation (a :: pl) p), (Permutation (a :: pl) ql), (Permutation (a :: pl) pl), (Permutation (a :: pl) (a :: q)), (Permutation (a :: pl) (a :: p)), (Permutation (a :: pl) (a :: ql)), (Permutation (a :: pl) (k :: q)), (Permutation (a :: pl) (k :: p))
(Permutation (a :: pl) (k :: ql)), (Permutation (a :: pl) (k :: pl)), (Permutation (a :: pl) (merge q q)), (Permutation (a :: pl) (merge q p)), (Permutation (a :: pl) (merge q ql)), (Permutation (a :: pl) (merge q pl)), (Permutation (a :: pl) (merge p q)), (Permutation (a :: pl) (merge p p)), (Permutation (a :: pl) (merge p ql)), (Permutation (a :: pl) (merge p pl))
(Permutation (a :: pl) (merge ql q)), (Permutation (a :: pl) (merge ql p)), (Permutation (a :: pl) (merge ql ql)), (Permutation (a :: pl) (merge ql pl)), (Permutation (a :: pl) (merge pl q)), (Permutation (a :: pl) (merge pl p)), (Permutation (a :: pl) (merge pl ql)), (Permutation (a :: pl) (merge pl pl)), (Permutation (a :: pl) (insert a q)), (Permutation (a :: pl) (insert a p))
(Permutation (a :: pl) (insert a ql)), (Permutation (a :: pl) (insert a pl)), (Permutation (a :: pl) (insert k q)), (Permutation (a :: pl) (insert k p)), (Permutation (a :: pl) (insert k ql)), (Permutation (a :: pl) (insert k pl)), (Permutation (a :: pl) (maybe_swap q)), (Permutation (a :: pl) (maybe_swap p)), (Permutation (a :: pl) (maybe_swap ql)), (Permutation (a :: pl) (maybe_swap pl))
(Permutation (a :: pl) (q ++ q)), (Permutation (a :: pl) (q ++ p)), (Permutation (a :: pl) (q ++ ql)), (Permutation (a :: pl) (q ++ pl)), (Permutation (a :: pl) (p ++ q)), (Permutation (a :: pl) (p ++ p)), (Permutation (a :: pl) (p ++ ql)), (Permutation (a :: pl) (p ++ pl)), (Permutation (a :: pl) (ql ++ q)), (Permutation (a :: pl) (ql ++ p))
(Permutation (a :: pl) (ql ++ ql)), (Permutation (a :: pl) (ql ++ pl)), (Permutation (a :: pl) (pl ++ q)), (Permutation (a :: pl) (pl ++ p)), (Permutation (a :: pl) (pl ++ ql)), (Permutation (a :: pl) (pl ++ pl)), (Permutation (a :: pl) []), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) ql)
(Permutation (k :: q) pl), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: pl)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: ql)), (Permutation (k :: q) (k :: pl)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p))
(Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q pl)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p pl)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql pl))
(Permutation (k :: q) (merge pl q)), (Permutation (k :: q) (merge pl p)), (Permutation (k :: q) (merge pl ql)), (Permutation (k :: q) (merge pl pl)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a pl)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p))
(Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k pl)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap pl)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ pl))
(Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ pl)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ pl)), (Permutation (k :: q) (pl ++ q)), (Permutation (k :: q) (pl ++ p))
(Permutation (k :: q) (pl ++ ql)), (Permutation (k :: q) (pl ++ pl)), (Permutation (k :: q) []), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) ql), (Permutation (k :: p) pl), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: ql))
(Permutation (k :: p) (a :: pl)), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (k :: pl)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q pl)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p p))
(Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p pl)), (Permutation (k :: p) (merge ql q)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql pl)), (Permutation (k :: p) (merge pl q)), (Permutation (k :: p) (merge pl p)), (Permutation (k :: p) (merge pl ql)), (Permutation (k :: p) (merge pl pl))
(Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a pl)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k pl)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p))
(Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap pl)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ pl)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ pl))
(Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ pl)), (Permutation (k :: p) (pl ++ q)), (Permutation (k :: p) (pl ++ p)), (Permutation (k :: p) (pl ++ ql)), (Permutation (k :: p) (pl ++ pl)), (Permutation (k :: p) []), (Permutation (k :: ql) q)
(Permutation (k :: ql) p), (Permutation (k :: ql) ql), (Permutation (k :: ql) pl), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: pl)), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (k :: pl))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q pl)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p pl)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql p))
(Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql pl)), (Permutation (k :: ql) (merge pl q)), (Permutation (k :: ql) (merge pl p)), (Permutation (k :: ql) (merge pl ql)), (Permutation (k :: ql) (merge pl pl)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a pl))
(Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k pl)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap pl)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ p))
(Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ pl)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ pl)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ pl))
(Permutation (k :: ql) (pl ++ q)), (Permutation (k :: ql) (pl ++ p)), (Permutation (k :: ql) (pl ++ ql)), (Permutation (k :: ql) (pl ++ pl)), (Permutation (k :: ql) []), (Permutation (k :: pl) q), (Permutation (k :: pl) p), (Permutation (k :: pl) ql), (Permutation (k :: pl) pl), (Permutation (k :: pl) (a :: q))
(Permutation (k :: pl) (a :: p)), (Permutation (k :: pl) (a :: ql)), (Permutation (k :: pl) (a :: pl)), (Permutation (k :: pl) (k :: q)), (Permutation (k :: pl) (k :: p)), (Permutation (k :: pl) (k :: ql)), (Permutation (k :: pl) (merge q q)), (Permutation (k :: pl) (merge q p)), (Permutation (k :: pl) (merge q ql)), (Permutation (k :: pl) (merge q pl))
(Permutation (k :: pl) (merge p q)), (Permutation (k :: pl) (merge p p)), (Permutation (k :: pl) (merge p ql)), (Permutation (k :: pl) (merge p pl)), (Permutation (k :: pl) (merge ql q)), (Permutation (k :: pl) (merge ql p)), (Permutation (k :: pl) (merge ql ql)), (Permutation (k :: pl) (merge ql pl)), (Permutation (k :: pl) (merge pl q)), (Permutation (k :: pl) (merge pl p))
(Permutation (k :: pl) (merge pl ql)), (Permutation (k :: pl) (merge pl pl)), (Permutation (k :: pl) (insert a q)), (Permutation (k :: pl) (insert a p)), (Permutation (k :: pl) (insert a ql)), (Permutation (k :: pl) (insert a pl)), (Permutation (k :: pl) (insert k q)), (Permutation (k :: pl) (insert k p)), (Permutation (k :: pl) (insert k ql)), (Permutation (k :: pl) (insert k pl))
(Permutation (k :: pl) (maybe_swap q)), (Permutation (k :: pl) (maybe_swap p)), (Permutation (k :: pl) (maybe_swap ql)), (Permutation (k :: pl) (maybe_swap pl)), (Permutation (k :: pl) (q ++ q)), (Permutation (k :: pl) (q ++ p)), (Permutation (k :: pl) (q ++ ql)), (Permutation (k :: pl) (q ++ pl)), (Permutation (k :: pl) (p ++ q)), (Permutation (k :: pl) (p ++ p))
(Permutation (k :: pl) (p ++ ql)), (Permutation (k :: pl) (p ++ pl)), (Permutation (k :: pl) (ql ++ q)), (Permutation (k :: pl) (ql ++ p)), (Permutation (k :: pl) (ql ++ ql)), (Permutation (k :: pl) (ql ++ pl)), (Permutation (k :: pl) (pl ++ q)), (Permutation (k :: pl) (pl ++ p)), (Permutation (k :: pl) (pl ++ ql)), (Permutation (k :: pl) (pl ++ pl))
(Permutation (k :: pl) []), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) ql), (Permutation (merge q q) pl), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (a :: ql)), (Permutation (merge q q) (a :: pl)), (Permutation (merge q q) (k :: q))
(Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: pl)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q pl)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p pl))
(Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql pl)), (Permutation (merge q q) (merge pl q)), (Permutation (merge q q) (merge pl p)), (Permutation (merge q q) (merge pl ql)), (Permutation (merge q q) (merge pl pl)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a p))
(Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a pl)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k pl)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap pl))
(Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ pl)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ pl)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ p))
(Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ pl)), (Permutation (merge q q) (pl ++ q)), (Permutation (merge q q) (pl ++ p)), (Permutation (merge q q) (pl ++ ql)), (Permutation (merge q q) (pl ++ pl)), (Permutation (merge q q) []), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) ql)
(Permutation (merge q p) pl), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: pl)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: pl)), (Permutation (merge q p) (merge q q))
(Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge q pl)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p p)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p pl)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql pl))
(Permutation (merge q p) (merge pl q)), (Permutation (merge q p) (merge pl p)), (Permutation (merge q p) (merge pl ql)), (Permutation (merge q p) (merge pl pl)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a pl)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p))
(Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k pl)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap pl)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ pl))
(Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ pl)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ pl)), (Permutation (merge q p) (pl ++ q)), (Permutation (merge q p) (pl ++ p))
(Permutation (merge q p) (pl ++ ql)), (Permutation (merge q p) (pl ++ pl)), (Permutation (merge q p) []), (Permutation (merge q ql) q), (Permutation (merge q ql) p), (Permutation (merge q ql) ql), (Permutation (merge q ql) pl), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (a :: ql))
(Permutation (merge q ql) (a :: pl)), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: pl)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge q pl)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p p))
(Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p pl)), (Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql pl)), (Permutation (merge q ql) (merge pl q)), (Permutation (merge q ql) (merge pl p)), (Permutation (merge q ql) (merge pl ql)), (Permutation (merge q ql) (merge pl pl))
(Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a pl)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k pl)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap p))
(Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap pl)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ pl)), (Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ pl))
(Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ pl)), (Permutation (merge q ql) (pl ++ q)), (Permutation (merge q ql) (pl ++ p)), (Permutation (merge q ql) (pl ++ ql)), (Permutation (merge q ql) (pl ++ pl)), (Permutation (merge q ql) []), (Permutation (merge q pl) q)
(Permutation (merge q pl) p), (Permutation (merge q pl) ql), (Permutation (merge q pl) pl), (Permutation (merge q pl) (a :: q)), (Permutation (merge q pl) (a :: p)), (Permutation (merge q pl) (a :: ql)), (Permutation (merge q pl) (a :: pl)), (Permutation (merge q pl) (k :: q)), (Permutation (merge q pl) (k :: p)), (Permutation (merge q pl) (k :: ql))
(Permutation (merge q pl) (k :: pl)), (Permutation (merge q pl) (merge q q)), (Permutation (merge q pl) (merge q p)), (Permutation (merge q pl) (merge q ql)), (Permutation (merge q pl) (merge p q)), (Permutation (merge q pl) (merge p p)), (Permutation (merge q pl) (merge p ql)), (Permutation (merge q pl) (merge p pl)), (Permutation (merge q pl) (merge ql q)), (Permutation (merge q pl) (merge ql p))
(Permutation (merge q pl) (merge ql ql)), (Permutation (merge q pl) (merge ql pl)), (Permutation (merge q pl) (merge pl q)), (Permutation (merge q pl) (merge pl p)), (Permutation (merge q pl) (merge pl ql)), (Permutation (merge q pl) (merge pl pl)), (Permutation (merge q pl) (insert a q)), (Permutation (merge q pl) (insert a p)), (Permutation (merge q pl) (insert a ql)), (Permutation (merge q pl) (insert a pl))
(Permutation (merge q pl) (insert k q)), (Permutation (merge q pl) (insert k p)), (Permutation (merge q pl) (insert k ql)), (Permutation (merge q pl) (insert k pl)), (Permutation (merge q pl) (maybe_swap q)), (Permutation (merge q pl) (maybe_swap p)), (Permutation (merge q pl) (maybe_swap ql)), (Permutation (merge q pl) (maybe_swap pl)), (Permutation (merge q pl) (q ++ q)), (Permutation (merge q pl) (q ++ p))
(Permutation (merge q pl) (q ++ ql)), (Permutation (merge q pl) (q ++ pl)), (Permutation (merge q pl) (p ++ q)), (Permutation (merge q pl) (p ++ p)), (Permutation (merge q pl) (p ++ ql)), (Permutation (merge q pl) (p ++ pl)), (Permutation (merge q pl) (ql ++ q)), (Permutation (merge q pl) (ql ++ p)), (Permutation (merge q pl) (ql ++ ql)), (Permutation (merge q pl) (ql ++ pl))
(Permutation (merge q pl) (pl ++ q)), (Permutation (merge q pl) (pl ++ p)), (Permutation (merge q pl) (pl ++ ql)), (Permutation (merge q pl) (pl ++ pl)), (Permutation (merge q pl) []), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) ql), (Permutation (merge p q) pl), (Permutation (merge p q) (a :: q))
(Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: pl)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: pl)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge q ql))
(Permutation (merge p q) (merge q pl)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p pl)), (Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql pl)), (Permutation (merge p q) (merge pl q)), (Permutation (merge p q) (merge pl p))
(Permutation (merge p q) (merge pl ql)), (Permutation (merge p q) (merge pl pl)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a pl)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k pl))
(Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap pl)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ pl)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ p))
(Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ pl)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ pl)), (Permutation (merge p q) (pl ++ q)), (Permutation (merge p q) (pl ++ p)), (Permutation (merge p q) (pl ++ ql)), (Permutation (merge p q) (pl ++ pl))
(Permutation (merge p q) []), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) ql), (Permutation (merge p p) pl), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: pl)), (Permutation (merge p p) (k :: q))
(Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: pl)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q pl)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (merge p pl))
(Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql pl)), (Permutation (merge p p) (merge pl q)), (Permutation (merge p p) (merge pl p)), (Permutation (merge p p) (merge pl ql)), (Permutation (merge p p) (merge pl pl)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a p))
(Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a pl)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k pl)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap pl))
(Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ pl)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ pl)), (Permutation (merge p p) (ql ++ q)), (Permutation (merge p p) (ql ++ p))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ pl)), (Permutation (merge p p) (pl ++ q)), (Permutation (merge p p) (pl ++ p)), (Permutation (merge p p) (pl ++ ql)), (Permutation (merge p p) (pl ++ pl)), (Permutation (merge p p) []), (Permutation (merge p ql) q), (Permutation (merge p ql) p), (Permutation (merge p ql) ql)
(Permutation (merge p ql) pl), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: pl)), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: pl)), (Permutation (merge p ql) (merge q q))
(Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q pl)), (Permutation (merge p ql) (merge p q)), (Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (merge p pl)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql pl))
(Permutation (merge p ql) (merge pl q)), (Permutation (merge p ql) (merge pl p)), (Permutation (merge p ql) (merge pl ql)), (Permutation (merge p ql) (merge pl pl)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a pl)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k p))
(Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k pl)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap pl)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ pl))
(Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ pl)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ pl)), (Permutation (merge p ql) (pl ++ q)), (Permutation (merge p ql) (pl ++ p))
(Permutation (merge p ql) (pl ++ ql)), (Permutation (merge p ql) (pl ++ pl)), (Permutation (merge p ql) []), (Permutation (merge p pl) q), (Permutation (merge p pl) p), (Permutation (merge p pl) ql), (Permutation (merge p pl) pl), (Permutation (merge p pl) (a :: q)), (Permutation (merge p pl) (a :: p)), (Permutation (merge p pl) (a :: ql))
(Permutation (merge p pl) (a :: pl)), (Permutation (merge p pl) (k :: q)), (Permutation (merge p pl) (k :: p)), (Permutation (merge p pl) (k :: ql)), (Permutation (merge p pl) (k :: pl)), (Permutation (merge p pl) (merge q q)), (Permutation (merge p pl) (merge q p)), (Permutation (merge p pl) (merge q ql)), (Permutation (merge p pl) (merge q pl)), (Permutation (merge p pl) (merge p q))
(Permutation (merge p pl) (merge p p)), (Permutation (merge p pl) (merge p ql)), (Permutation (merge p pl) (merge ql q)), (Permutation (merge p pl) (merge ql p)), (Permutation (merge p pl) (merge ql ql)), (Permutation (merge p pl) (merge ql pl)), (Permutation (merge p pl) (merge pl q)), (Permutation (merge p pl) (merge pl p)), (Permutation (merge p pl) (merge pl ql)), (Permutation (merge p pl) (merge pl pl))
(Permutation (merge p pl) (insert a q)), (Permutation (merge p pl) (insert a p)), (Permutation (merge p pl) (insert a ql)), (Permutation (merge p pl) (insert a pl)), (Permutation (merge p pl) (insert k q)), (Permutation (merge p pl) (insert k p)), (Permutation (merge p pl) (insert k ql)), (Permutation (merge p pl) (insert k pl)), (Permutation (merge p pl) (maybe_swap q)), (Permutation (merge p pl) (maybe_swap p))
(Permutation (merge p pl) (maybe_swap ql)), (Permutation (merge p pl) (maybe_swap pl)), (Permutation (merge p pl) (q ++ q)), (Permutation (merge p pl) (q ++ p)), (Permutation (merge p pl) (q ++ ql)), (Permutation (merge p pl) (q ++ pl)), (Permutation (merge p pl) (p ++ q)), (Permutation (merge p pl) (p ++ p)), (Permutation (merge p pl) (p ++ ql)), (Permutation (merge p pl) (p ++ pl))
(Permutation (merge p pl) (ql ++ q)), (Permutation (merge p pl) (ql ++ p)), (Permutation (merge p pl) (ql ++ ql)), (Permutation (merge p pl) (ql ++ pl)), (Permutation (merge p pl) (pl ++ q)), (Permutation (merge p pl) (pl ++ p)), (Permutation (merge p pl) (pl ++ ql)), (Permutation (merge p pl) (pl ++ pl)), (Permutation (merge p pl) []), (Permutation (merge ql q) q)
(Permutation (merge ql q) p), (Permutation (merge ql q) ql), (Permutation (merge ql q) pl), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: pl)), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (k :: ql))
(Permutation (merge ql q) (k :: pl)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q pl)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p pl)), (Permutation (merge ql q) (merge ql p))
(Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql pl)), (Permutation (merge ql q) (merge pl q)), (Permutation (merge ql q) (merge pl p)), (Permutation (merge ql q) (merge pl ql)), (Permutation (merge ql q) (merge pl pl)), (Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a pl))
(Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k pl)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap pl)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ p))
(Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ pl)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ pl)), (Permutation (merge ql q) (ql ++ q)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ pl))
(Permutation (merge ql q) (pl ++ q)), (Permutation (merge ql q) (pl ++ p)), (Permutation (merge ql q) (pl ++ ql)), (Permutation (merge ql q) (pl ++ pl)), (Permutation (merge ql q) []), (Permutation (merge ql p) q), (Permutation (merge ql p) p), (Permutation (merge ql p) ql), (Permutation (merge ql p) pl), (Permutation (merge ql p) (a :: q))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: pl)), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: pl)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge q ql))
(Permutation (merge ql p) (merge q pl)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p pl)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge ql pl)), (Permutation (merge ql p) (merge pl q)), (Permutation (merge ql p) (merge pl p))
(Permutation (merge ql p) (merge pl ql)), (Permutation (merge ql p) (merge pl pl)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a pl)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k pl))
(Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap pl)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ pl)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ p))
(Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ pl)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ pl)), (Permutation (merge ql p) (pl ++ q)), (Permutation (merge ql p) (pl ++ p)), (Permutation (merge ql p) (pl ++ ql)), (Permutation (merge ql p) (pl ++ pl))
(Permutation (merge ql p) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) p), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) pl), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: pl)), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: pl)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q pl)), (Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (merge p ql))
(Permutation (merge ql ql) (merge p pl)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge ql pl)), (Permutation (merge ql ql) (merge pl q)), (Permutation (merge ql ql) (merge pl p)), (Permutation (merge ql ql) (merge pl ql)), (Permutation (merge ql ql) (merge pl pl)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a p))
(Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a pl)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k pl)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap pl))
(Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ pl)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ pl)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ p))
(Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ pl)), (Permutation (merge ql ql) (pl ++ q)), (Permutation (merge ql ql) (pl ++ p)), (Permutation (merge ql ql) (pl ++ ql)), (Permutation (merge ql ql) (pl ++ pl)), (Permutation (merge ql ql) []), (Permutation (merge ql pl) q), (Permutation (merge ql pl) p), (Permutation (merge ql pl) ql)
(Permutation (merge ql pl) pl), (Permutation (merge ql pl) (a :: q)), (Permutation (merge ql pl) (a :: p)), (Permutation (merge ql pl) (a :: ql)), (Permutation (merge ql pl) (a :: pl)), (Permutation (merge ql pl) (k :: q)), (Permutation (merge ql pl) (k :: p)), (Permutation (merge ql pl) (k :: ql)), (Permutation (merge ql pl) (k :: pl)), (Permutation (merge ql pl) (merge q q))
(Permutation (merge ql pl) (merge q p)), (Permutation (merge ql pl) (merge q ql)), (Permutation (merge ql pl) (merge q pl)), (Permutation (merge ql pl) (merge p q)), (Permutation (merge ql pl) (merge p p)), (Permutation (merge ql pl) (merge p ql)), (Permutation (merge ql pl) (merge p pl)), (Permutation (merge ql pl) (merge ql q)), (Permutation (merge ql pl) (merge ql p)), (Permutation (merge ql pl) (merge ql ql))
(Permutation (merge ql pl) (merge pl q)), (Permutation (merge ql pl) (merge pl p)), (Permutation (merge ql pl) (merge pl ql)), (Permutation (merge ql pl) (merge pl pl)), (Permutation (merge ql pl) (insert a q)), (Permutation (merge ql pl) (insert a p)), (Permutation (merge ql pl) (insert a ql)), (Permutation (merge ql pl) (insert a pl)), (Permutation (merge ql pl) (insert k q)), (Permutation (merge ql pl) (insert k p))
(Permutation (merge ql pl) (insert k ql)), (Permutation (merge ql pl) (insert k pl)), (Permutation (merge ql pl) (maybe_swap q)), (Permutation (merge ql pl) (maybe_swap p)), (Permutation (merge ql pl) (maybe_swap ql)), (Permutation (merge ql pl) (maybe_swap pl)), (Permutation (merge ql pl) (q ++ q)), (Permutation (merge ql pl) (q ++ p)), (Permutation (merge ql pl) (q ++ ql)), (Permutation (merge ql pl) (q ++ pl))
(Permutation (merge ql pl) (p ++ q)), (Permutation (merge ql pl) (p ++ p)), (Permutation (merge ql pl) (p ++ ql)), (Permutation (merge ql pl) (p ++ pl)), (Permutation (merge ql pl) (ql ++ q)), (Permutation (merge ql pl) (ql ++ p)), (Permutation (merge ql pl) (ql ++ ql)), (Permutation (merge ql pl) (ql ++ pl)), (Permutation (merge ql pl) (pl ++ q)), (Permutation (merge ql pl) (pl ++ p))
(Permutation (merge ql pl) (pl ++ ql)), (Permutation (merge ql pl) (pl ++ pl)), (Permutation (merge ql pl) []), (Permutation (merge pl q) q), (Permutation (merge pl q) p), (Permutation (merge pl q) ql), (Permutation (merge pl q) pl), (Permutation (merge pl q) (a :: q)), (Permutation (merge pl q) (a :: p)), (Permutation (merge pl q) (a :: ql))
(Permutation (merge pl q) (a :: pl)), (Permutation (merge pl q) (k :: q)), (Permutation (merge pl q) (k :: p)), (Permutation (merge pl q) (k :: ql)), (Permutation (merge pl q) (k :: pl)), (Permutation (merge pl q) (merge q q)), (Permutation (merge pl q) (merge q p)), (Permutation (merge pl q) (merge q ql)), (Permutation (merge pl q) (merge q pl)), (Permutation (merge pl q) (merge p q))
(Permutation (merge pl q) (merge p p)), (Permutation (merge pl q) (merge p ql)), (Permutation (merge pl q) (merge p pl)), (Permutation (merge pl q) (merge ql q)), (Permutation (merge pl q) (merge ql p)), (Permutation (merge pl q) (merge ql ql)), (Permutation (merge pl q) (merge ql pl)), (Permutation (merge pl q) (merge pl p)), (Permutation (merge pl q) (merge pl ql)), (Permutation (merge pl q) (merge pl pl))
(Permutation (merge pl q) (insert a q)), (Permutation (merge pl q) (insert a p)), (Permutation (merge pl q) (insert a ql)), (Permutation (merge pl q) (insert a pl)), (Permutation (merge pl q) (insert k q)), (Permutation (merge pl q) (insert k p)), (Permutation (merge pl q) (insert k ql)), (Permutation (merge pl q) (insert k pl)), (Permutation (merge pl q) (maybe_swap q)), (Permutation (merge pl q) (maybe_swap p))
(Permutation (merge pl q) (maybe_swap ql)), (Permutation (merge pl q) (maybe_swap pl)), (Permutation (merge pl q) (q ++ q)), (Permutation (merge pl q) (q ++ p)), (Permutation (merge pl q) (q ++ ql)), (Permutation (merge pl q) (q ++ pl)), (Permutation (merge pl q) (p ++ q)), (Permutation (merge pl q) (p ++ p)), (Permutation (merge pl q) (p ++ ql)), (Permutation (merge pl q) (p ++ pl))
(Permutation (merge pl q) (ql ++ q)), (Permutation (merge pl q) (ql ++ p)), (Permutation (merge pl q) (ql ++ ql)), (Permutation (merge pl q) (ql ++ pl)), (Permutation (merge pl q) (pl ++ q)), (Permutation (merge pl q) (pl ++ p)), (Permutation (merge pl q) (pl ++ ql)), (Permutation (merge pl q) (pl ++ pl)), (Permutation (merge pl q) []), (Permutation (merge pl p) q)
(Permutation (merge pl p) p), (Permutation (merge pl p) ql), (Permutation (merge pl p) pl), (Permutation (merge pl p) (a :: q)), (Permutation (merge pl p) (a :: p)), (Permutation (merge pl p) (a :: ql)), (Permutation (merge pl p) (a :: pl)), (Permutation (merge pl p) (k :: q)), (Permutation (merge pl p) (k :: p)), (Permutation (merge pl p) (k :: ql))
(Permutation (merge pl p) (k :: pl)), (Permutation (merge pl p) (merge q q)), (Permutation (merge pl p) (merge q p)), (Permutation (merge pl p) (merge q ql)), (Permutation (merge pl p) (merge q pl)), (Permutation (merge pl p) (merge p q)), (Permutation (merge pl p) (merge p p)), (Permutation (merge pl p) (merge p ql)), (Permutation (merge pl p) (merge p pl)), (Permutation (merge pl p) (merge ql q))
(Permutation (merge pl p) (merge ql p)), (Permutation (merge pl p) (merge ql ql)), (Permutation (merge pl p) (merge ql pl)), (Permutation (merge pl p) (merge pl q)), (Permutation (merge pl p) (merge pl ql)), (Permutation (merge pl p) (merge pl pl)), (Permutation (merge pl p) (insert a q)), (Permutation (merge pl p) (insert a p)), (Permutation (merge pl p) (insert a ql)), (Permutation (merge pl p) (insert a pl))
(Permutation (merge pl p) (insert k q)), (Permutation (merge pl p) (insert k p)), (Permutation (merge pl p) (insert k ql)), (Permutation (merge pl p) (insert k pl)), (Permutation (merge pl p) (maybe_swap q)), (Permutation (merge pl p) (maybe_swap p)), (Permutation (merge pl p) (maybe_swap ql)), (Permutation (merge pl p) (maybe_swap pl)), (Permutation (merge pl p) (q ++ q)), (Permutation (merge pl p) (q ++ p))
(Permutation (merge pl p) (q ++ ql)), (Permutation (merge pl p) (q ++ pl)), (Permutation (merge pl p) (p ++ q)), (Permutation (merge pl p) (p ++ p)), (Permutation (merge pl p) (p ++ ql)), (Permutation (merge pl p) (p ++ pl)), (Permutation (merge pl p) (ql ++ q)), (Permutation (merge pl p) (ql ++ p)), (Permutation (merge pl p) (ql ++ ql)), (Permutation (merge pl p) (ql ++ pl))
(Permutation (merge pl p) (pl ++ q)), (Permutation (merge pl p) (pl ++ p)), (Permutation (merge pl p) (pl ++ ql)), (Permutation (merge pl p) (pl ++ pl)), (Permutation (merge pl p) []), (Permutation (merge pl ql) q), (Permutation (merge pl ql) p), (Permutation (merge pl ql) ql), (Permutation (merge pl ql) pl), (Permutation (merge pl ql) (a :: q))
(Permutation (merge pl ql) (a :: p)), (Permutation (merge pl ql) (a :: ql)), (Permutation (merge pl ql) (a :: pl)), (Permutation (merge pl ql) (k :: q)), (Permutation (merge pl ql) (k :: p)), (Permutation (merge pl ql) (k :: ql)), (Permutation (merge pl ql) (k :: pl)), (Permutation (merge pl ql) (merge q q)), (Permutation (merge pl ql) (merge q p)), (Permutation (merge pl ql) (merge q ql))
(Permutation (merge pl ql) (merge q pl)), (Permutation (merge pl ql) (merge p q)), (Permutation (merge pl ql) (merge p p)), (Permutation (merge pl ql) (merge p ql)), (Permutation (merge pl ql) (merge p pl)), (Permutation (merge pl ql) (merge ql q)), (Permutation (merge pl ql) (merge ql p)), (Permutation (merge pl ql) (merge ql ql)), (Permutation (merge pl ql) (merge ql pl)), (Permutation (merge pl ql) (merge pl q))
(Permutation (merge pl ql) (merge pl p)), (Permutation (merge pl ql) (merge pl pl)), (Permutation (merge pl ql) (insert a q)), (Permutation (merge pl ql) (insert a p)), (Permutation (merge pl ql) (insert a ql)), (Permutation (merge pl ql) (insert a pl)), (Permutation (merge pl ql) (insert k q)), (Permutation (merge pl ql) (insert k p)), (Permutation (merge pl ql) (insert k ql)), (Permutation (merge pl ql) (insert k pl))
(Permutation (merge pl ql) (maybe_swap q)), (Permutation (merge pl ql) (maybe_swap p)), (Permutation (merge pl ql) (maybe_swap ql)), (Permutation (merge pl ql) (maybe_swap pl)), (Permutation (merge pl ql) (q ++ q)), (Permutation (merge pl ql) (q ++ p)), (Permutation (merge pl ql) (q ++ ql)), (Permutation (merge pl ql) (q ++ pl)), (Permutation (merge pl ql) (p ++ q)), (Permutation (merge pl ql) (p ++ p))
(Permutation (merge pl ql) (p ++ ql)), (Permutation (merge pl ql) (p ++ pl)), (Permutation (merge pl ql) (ql ++ q)), (Permutation (merge pl ql) (ql ++ p)), (Permutation (merge pl ql) (ql ++ ql)), (Permutation (merge pl ql) (ql ++ pl)), (Permutation (merge pl ql) (pl ++ q)), (Permutation (merge pl ql) (pl ++ p)), (Permutation (merge pl ql) (pl ++ ql)), (Permutation (merge pl ql) (pl ++ pl))
(Permutation (merge pl ql) []), (Permutation (merge pl pl) q), (Permutation (merge pl pl) p), (Permutation (merge pl pl) ql), (Permutation (merge pl pl) pl), (Permutation (merge pl pl) (a :: q)), (Permutation (merge pl pl) (a :: p)), (Permutation (merge pl pl) (a :: ql)), (Permutation (merge pl pl) (a :: pl)), (Permutation (merge pl pl) (k :: q))
(Permutation (merge pl pl) (k :: p)), (Permutation (merge pl pl) (k :: ql)), (Permutation (merge pl pl) (k :: pl)), (Permutation (merge pl pl) (merge q q)), (Permutation (merge pl pl) (merge q p)), (Permutation (merge pl pl) (merge q ql)), (Permutation (merge pl pl) (merge q pl)), (Permutation (merge pl pl) (merge p q)), (Permutation (merge pl pl) (merge p p)), (Permutation (merge pl pl) (merge p ql))
(Permutation (merge pl pl) (merge p pl)), (Permutation (merge pl pl) (merge ql q)), (Permutation (merge pl pl) (merge ql p)), (Permutation (merge pl pl) (merge ql ql)), (Permutation (merge pl pl) (merge ql pl)), (Permutation (merge pl pl) (merge pl q)), (Permutation (merge pl pl) (merge pl p)), (Permutation (merge pl pl) (merge pl ql)), (Permutation (merge pl pl) (insert a q)), (Permutation (merge pl pl) (insert a p))
(Permutation (merge pl pl) (insert a ql)), (Permutation (merge pl pl) (insert a pl)), (Permutation (merge pl pl) (insert k q)), (Permutation (merge pl pl) (insert k p)), (Permutation (merge pl pl) (insert k ql)), (Permutation (merge pl pl) (insert k pl)), (Permutation (merge pl pl) (maybe_swap q)), (Permutation (merge pl pl) (maybe_swap p)), (Permutation (merge pl pl) (maybe_swap ql)), (Permutation (merge pl pl) (maybe_swap pl))
(Permutation (merge pl pl) (q ++ q)), (Permutation (merge pl pl) (q ++ p)), (Permutation (merge pl pl) (q ++ ql)), (Permutation (merge pl pl) (q ++ pl)), (Permutation (merge pl pl) (p ++ q)), (Permutation (merge pl pl) (p ++ p)), (Permutation (merge pl pl) (p ++ ql)), (Permutation (merge pl pl) (p ++ pl)), (Permutation (merge pl pl) (ql ++ q)), (Permutation (merge pl pl) (ql ++ p))
(Permutation (merge pl pl) (ql ++ ql)), (Permutation (merge pl pl) (ql ++ pl)), (Permutation (merge pl pl) (pl ++ q)), (Permutation (merge pl pl) (pl ++ p)), (Permutation (merge pl pl) (pl ++ ql)), (Permutation (merge pl pl) (pl ++ pl)), (Permutation (merge pl pl) []), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) ql)
(Permutation (insert a q) pl), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: pl)), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: pl)), (Permutation (insert a q) (merge q q))
(Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q pl)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p pl)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql pl)), (Permutation (insert a q) (merge pl q)), (Permutation (insert a q) (merge pl p)), (Permutation (insert a q) (merge pl ql)), (Permutation (insert a q) (merge pl pl)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a pl)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p))
(Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k pl)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap pl)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ pl))
(Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ pl)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ pl)), (Permutation (insert a q) (pl ++ q)), (Permutation (insert a q) (pl ++ p))
(Permutation (insert a q) (pl ++ ql)), (Permutation (insert a q) (pl ++ pl)), (Permutation (insert a q) []), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) ql), (Permutation (insert a p) pl), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (a :: ql))
(Permutation (insert a p) (a :: pl)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: pl)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q pl)), (Permutation (insert a p) (merge p q))
(Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p pl)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge ql ql)), (Permutation (insert a p) (merge ql pl)), (Permutation (insert a p) (merge pl q)), (Permutation (insert a p) (merge pl p)), (Permutation (insert a p) (merge pl ql))
(Permutation (insert a p) (merge pl pl)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (insert a pl)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k pl)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap pl)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ pl)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ pl))
(Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ pl)), (Permutation (insert a p) (pl ++ q)), (Permutation (insert a p) (pl ++ p)), (Permutation (insert a p) (pl ++ ql)), (Permutation (insert a p) (pl ++ pl)), (Permutation (insert a p) []), (Permutation (insert a ql) q)
(Permutation (insert a ql) p), (Permutation (insert a ql) ql), (Permutation (insert a ql) pl), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: pl)), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (k :: ql))
(Permutation (insert a ql) (k :: pl)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q pl)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p pl)), (Permutation (insert a ql) (merge ql q))
(Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql pl)), (Permutation (insert a ql) (merge pl q)), (Permutation (insert a ql) (merge pl p)), (Permutation (insert a ql) (merge pl ql)), (Permutation (insert a ql) (merge pl pl)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (insert a pl))
(Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert k ql)), (Permutation (insert a ql) (insert k pl)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap pl)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ p))
(Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ pl)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ pl)), (Permutation (insert a ql) (ql ++ q)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ pl))
(Permutation (insert a ql) (pl ++ q)), (Permutation (insert a ql) (pl ++ p)), (Permutation (insert a ql) (pl ++ ql)), (Permutation (insert a ql) (pl ++ pl)), (Permutation (insert a ql) []), (Permutation (insert a pl) q), (Permutation (insert a pl) p), (Permutation (insert a pl) ql), (Permutation (insert a pl) pl), (Permutation (insert a pl) (a :: q))
(Permutation (insert a pl) (a :: p)), (Permutation (insert a pl) (a :: ql)), (Permutation (insert a pl) (a :: pl)), (Permutation (insert a pl) (k :: q)), (Permutation (insert a pl) (k :: p)), (Permutation (insert a pl) (k :: ql)), (Permutation (insert a pl) (k :: pl)), (Permutation (insert a pl) (merge q q)), (Permutation (insert a pl) (merge q p)), (Permutation (insert a pl) (merge q ql))
(Permutation (insert a pl) (merge q pl)), (Permutation (insert a pl) (merge p q)), (Permutation (insert a pl) (merge p p)), (Permutation (insert a pl) (merge p ql)), (Permutation (insert a pl) (merge p pl)), (Permutation (insert a pl) (merge ql q)), (Permutation (insert a pl) (merge ql p)), (Permutation (insert a pl) (merge ql ql)), (Permutation (insert a pl) (merge ql pl)), (Permutation (insert a pl) (merge pl q))
(Permutation (insert a pl) (merge pl p)), (Permutation (insert a pl) (merge pl ql)), (Permutation (insert a pl) (merge pl pl)), (Permutation (insert a pl) (insert a q)), (Permutation (insert a pl) (insert a p)), (Permutation (insert a pl) (insert a ql)), (Permutation (insert a pl) (insert k q)), (Permutation (insert a pl) (insert k p)), (Permutation (insert a pl) (insert k ql)), (Permutation (insert a pl) (insert k pl))
(Permutation (insert a pl) (maybe_swap q)), (Permutation (insert a pl) (maybe_swap p)), (Permutation (insert a pl) (maybe_swap ql)), (Permutation (insert a pl) (maybe_swap pl)), (Permutation (insert a pl) (q ++ q)), (Permutation (insert a pl) (q ++ p)), (Permutation (insert a pl) (q ++ ql)), (Permutation (insert a pl) (q ++ pl)), (Permutation (insert a pl) (p ++ q)), (Permutation (insert a pl) (p ++ p))
(Permutation (insert a pl) (p ++ ql)), (Permutation (insert a pl) (p ++ pl)), (Permutation (insert a pl) (ql ++ q)), (Permutation (insert a pl) (ql ++ p)), (Permutation (insert a pl) (ql ++ ql)), (Permutation (insert a pl) (ql ++ pl)), (Permutation (insert a pl) (pl ++ q)), (Permutation (insert a pl) (pl ++ p)), (Permutation (insert a pl) (pl ++ ql)), (Permutation (insert a pl) (pl ++ pl))
(Permutation (insert a pl) []), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) ql), (Permutation (insert k q) pl), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: pl)), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: pl)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q pl)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (merge p ql))
(Permutation (insert k q) (merge p pl)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge ql ql)), (Permutation (insert k q) (merge ql pl)), (Permutation (insert k q) (merge pl q)), (Permutation (insert k q) (merge pl p)), (Permutation (insert k q) (merge pl ql)), (Permutation (insert k q) (merge pl pl)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a pl)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k pl)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap pl))
(Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ pl)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ pl)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ p))
(Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ pl)), (Permutation (insert k q) (pl ++ q)), (Permutation (insert k q) (pl ++ p)), (Permutation (insert k q) (pl ++ ql)), (Permutation (insert k q) (pl ++ pl)), (Permutation (insert k q) []), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) ql)
(Permutation (insert k p) pl), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: pl)), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: pl)), (Permutation (insert k p) (merge q q))
(Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q pl)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p pl)), (Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge ql ql))
(Permutation (insert k p) (merge ql pl)), (Permutation (insert k p) (merge pl q)), (Permutation (insert k p) (merge pl p)), (Permutation (insert k p) (merge pl ql)), (Permutation (insert k p) (merge pl pl)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a pl)), (Permutation (insert k p) (insert k q))
(Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k pl)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap pl)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ pl))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ pl)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ pl)), (Permutation (insert k p) (pl ++ q)), (Permutation (insert k p) (pl ++ p))
(Permutation (insert k p) (pl ++ ql)), (Permutation (insert k p) (pl ++ pl)), (Permutation (insert k p) []), (Permutation (insert k ql) q), (Permutation (insert k ql) p), (Permutation (insert k ql) ql), (Permutation (insert k ql) pl), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: pl)), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: pl)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q pl)), (Permutation (insert k ql) (merge p q))
(Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p pl)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql pl)), (Permutation (insert k ql) (merge pl q)), (Permutation (insert k ql) (merge pl p)), (Permutation (insert k ql) (merge pl ql))
(Permutation (insert k ql) (merge pl pl)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a pl)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert k pl)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap p))
(Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap pl)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ pl)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ pl))
(Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ pl)), (Permutation (insert k ql) (pl ++ q)), (Permutation (insert k ql) (pl ++ p)), (Permutation (insert k ql) (pl ++ ql)), (Permutation (insert k ql) (pl ++ pl)), (Permutation (insert k ql) []), (Permutation (insert k pl) q)
(Permutation (insert k pl) p), (Permutation (insert k pl) ql), (Permutation (insert k pl) pl), (Permutation (insert k pl) (a :: q)), (Permutation (insert k pl) (a :: p)), (Permutation (insert k pl) (a :: ql)), (Permutation (insert k pl) (a :: pl)), (Permutation (insert k pl) (k :: q)), (Permutation (insert k pl) (k :: p)), (Permutation (insert k pl) (k :: ql))
(Permutation (insert k pl) (k :: pl)), (Permutation (insert k pl) (merge q q)), (Permutation (insert k pl) (merge q p)), (Permutation (insert k pl) (merge q ql)), (Permutation (insert k pl) (merge q pl)), (Permutation (insert k pl) (merge p q)), (Permutation (insert k pl) (merge p p)), (Permutation (insert k pl) (merge p ql)), (Permutation (insert k pl) (merge p pl)), (Permutation (insert k pl) (merge ql q))
(Permutation (insert k pl) (merge ql p)), (Permutation (insert k pl) (merge ql ql)), (Permutation (insert k pl) (merge ql pl)), (Permutation (insert k pl) (merge pl q)), (Permutation (insert k pl) (merge pl p)), (Permutation (insert k pl) (merge pl ql)), (Permutation (insert k pl) (merge pl pl)), (Permutation (insert k pl) (insert a q)), (Permutation (insert k pl) (insert a p)), (Permutation (insert k pl) (insert a ql))
(Permutation (insert k pl) (insert a pl)), (Permutation (insert k pl) (insert k q)), (Permutation (insert k pl) (insert k p)), (Permutation (insert k pl) (insert k ql)), (Permutation (insert k pl) (maybe_swap q)), (Permutation (insert k pl) (maybe_swap p)), (Permutation (insert k pl) (maybe_swap ql)), (Permutation (insert k pl) (maybe_swap pl)), (Permutation (insert k pl) (q ++ q)), (Permutation (insert k pl) (q ++ p))
(Permutation (insert k pl) (q ++ ql)), (Permutation (insert k pl) (q ++ pl)), (Permutation (insert k pl) (p ++ q)), (Permutation (insert k pl) (p ++ p)), (Permutation (insert k pl) (p ++ ql)), (Permutation (insert k pl) (p ++ pl)), (Permutation (insert k pl) (ql ++ q)), (Permutation (insert k pl) (ql ++ p)), (Permutation (insert k pl) (ql ++ ql)), (Permutation (insert k pl) (ql ++ pl))
(Permutation (insert k pl) (pl ++ q)), (Permutation (insert k pl) (pl ++ p)), (Permutation (insert k pl) (pl ++ ql)), (Permutation (insert k pl) (pl ++ pl)), (Permutation (insert k pl) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) pl), (Permutation (maybe_swap q) (a :: q))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: ql)), (Permutation (maybe_swap q) (a :: pl)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: pl)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q ql))
(Permutation (maybe_swap q) (merge q pl)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p pl)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql pl)), (Permutation (maybe_swap q) (merge pl q))
(Permutation (maybe_swap q) (merge pl p)), (Permutation (maybe_swap q) (merge pl ql)), (Permutation (maybe_swap q) (merge pl pl)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a pl)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert k ql))
(Permutation (maybe_swap q) (insert k pl)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap pl)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ pl)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ p))
(Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ pl)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ pl)), (Permutation (maybe_swap q) (pl ++ q)), (Permutation (maybe_swap q) (pl ++ p)), (Permutation (maybe_swap q) (pl ++ ql)), (Permutation (maybe_swap q) (pl ++ pl))
(Permutation (maybe_swap q) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) pl), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: pl)), (Permutation (maybe_swap p) (k :: q))
(Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: pl)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q pl)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p ql))
(Permutation (maybe_swap p) (merge p pl)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql pl)), (Permutation (maybe_swap p) (merge pl q)), (Permutation (maybe_swap p) (merge pl p)), (Permutation (maybe_swap p) (merge pl ql)), (Permutation (maybe_swap p) (merge pl pl)), (Permutation (maybe_swap p) (insert a q))
(Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a pl)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k pl)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql)), (Permutation (maybe_swap p) (maybe_swap pl))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ pl)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ pl)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ p))
(Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ pl)), (Permutation (maybe_swap p) (pl ++ q)), (Permutation (maybe_swap p) (pl ++ p)), (Permutation (maybe_swap p) (pl ++ ql)), (Permutation (maybe_swap p) (pl ++ pl)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) pl), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: pl)), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: pl)), (Permutation (maybe_swap ql) (merge q q))
(Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q pl)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p pl)), (Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge ql ql))
(Permutation (maybe_swap ql) (merge ql pl)), (Permutation (maybe_swap ql) (merge pl q)), (Permutation (maybe_swap ql) (merge pl p)), (Permutation (maybe_swap ql) (merge pl ql)), (Permutation (maybe_swap ql) (merge pl pl)), (Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a pl)), (Permutation (maybe_swap ql) (insert k q))
(Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k pl)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (maybe_swap pl)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ pl))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ pl)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ pl)), (Permutation (maybe_swap ql) (pl ++ q)), (Permutation (maybe_swap ql) (pl ++ p))
(Permutation (maybe_swap ql) (pl ++ ql)), (Permutation (maybe_swap ql) (pl ++ pl)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap pl) q), (Permutation (maybe_swap pl) p), (Permutation (maybe_swap pl) ql), (Permutation (maybe_swap pl) pl), (Permutation (maybe_swap pl) (a :: q)), (Permutation (maybe_swap pl) (a :: p)), (Permutation (maybe_swap pl) (a :: ql))
(Permutation (maybe_swap pl) (a :: pl)), (Permutation (maybe_swap pl) (k :: q)), (Permutation (maybe_swap pl) (k :: p)), (Permutation (maybe_swap pl) (k :: ql)), (Permutation (maybe_swap pl) (k :: pl)), (Permutation (maybe_swap pl) (merge q q)), (Permutation (maybe_swap pl) (merge q p)), (Permutation (maybe_swap pl) (merge q ql)), (Permutation (maybe_swap pl) (merge q pl)), (Permutation (maybe_swap pl) (merge p q))
(Permutation (maybe_swap pl) (merge p p)), (Permutation (maybe_swap pl) (merge p ql)), (Permutation (maybe_swap pl) (merge p pl)), (Permutation (maybe_swap pl) (merge ql q)), (Permutation (maybe_swap pl) (merge ql p)), (Permutation (maybe_swap pl) (merge ql ql)), (Permutation (maybe_swap pl) (merge ql pl)), (Permutation (maybe_swap pl) (merge pl q)), (Permutation (maybe_swap pl) (merge pl p)), (Permutation (maybe_swap pl) (merge pl ql))
(Permutation (maybe_swap pl) (merge pl pl)), (Permutation (maybe_swap pl) (insert a q)), (Permutation (maybe_swap pl) (insert a p)), (Permutation (maybe_swap pl) (insert a ql)), (Permutation (maybe_swap pl) (insert a pl)), (Permutation (maybe_swap pl) (insert k q)), (Permutation (maybe_swap pl) (insert k p)), (Permutation (maybe_swap pl) (insert k ql)), (Permutation (maybe_swap pl) (insert k pl)), (Permutation (maybe_swap pl) (maybe_swap q))
(Permutation (maybe_swap pl) (maybe_swap p)), (Permutation (maybe_swap pl) (maybe_swap ql)), (Permutation (maybe_swap pl) (q ++ q)), (Permutation (maybe_swap pl) (q ++ p)), (Permutation (maybe_swap pl) (q ++ ql)), (Permutation (maybe_swap pl) (q ++ pl)), (Permutation (maybe_swap pl) (p ++ q)), (Permutation (maybe_swap pl) (p ++ p)), (Permutation (maybe_swap pl) (p ++ ql)), (Permutation (maybe_swap pl) (p ++ pl))
(Permutation (maybe_swap pl) (ql ++ q)), (Permutation (maybe_swap pl) (ql ++ p)), (Permutation (maybe_swap pl) (ql ++ ql)), (Permutation (maybe_swap pl) (ql ++ pl)), (Permutation (maybe_swap pl) (pl ++ q)), (Permutation (maybe_swap pl) (pl ++ p)), (Permutation (maybe_swap pl) (pl ++ ql)), (Permutation (maybe_swap pl) (pl ++ pl)), (Permutation (maybe_swap pl) []), (Permutation (q ++ q) q)
(Permutation (q ++ q) p), (Permutation (q ++ q) ql), (Permutation (q ++ q) pl), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: pl)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: ql))
(Permutation (q ++ q) (k :: pl)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q pl)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p pl)), (Permutation (q ++ q) (merge ql q))
(Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql pl)), (Permutation (q ++ q) (merge pl q)), (Permutation (q ++ q) (merge pl p)), (Permutation (q ++ q) (merge pl ql)), (Permutation (q ++ q) (merge pl pl)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a ql))
(Permutation (q ++ q) (insert a pl)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k pl)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap pl)), (Permutation (q ++ q) (q ++ p))
(Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ pl)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ pl)), (Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ pl))
(Permutation (q ++ q) (pl ++ q)), (Permutation (q ++ q) (pl ++ p)), (Permutation (q ++ q) (pl ++ ql)), (Permutation (q ++ q) (pl ++ pl)), (Permutation (q ++ q) []), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) ql), (Permutation (q ++ p) pl), (Permutation (q ++ p) (a :: q))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: ql)), (Permutation (q ++ p) (a :: pl)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: pl)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q ql))
(Permutation (q ++ p) (merge q pl)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p pl)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql pl)), (Permutation (q ++ p) (merge pl q))
(Permutation (q ++ p) (merge pl p)), (Permutation (q ++ p) (merge pl ql)), (Permutation (q ++ p) (merge pl pl)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a pl)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert k ql))
(Permutation (q ++ p) (insert k pl)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap pl)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ pl)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ p))
(Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ pl)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ pl)), (Permutation (q ++ p) (pl ++ q)), (Permutation (q ++ p) (pl ++ p)), (Permutation (q ++ p) (pl ++ ql)), (Permutation (q ++ p) (pl ++ pl))
(Permutation (q ++ p) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) p), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) pl), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: pl)), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: pl)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q pl)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (merge p ql))
(Permutation (q ++ ql) (merge p pl)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge ql ql)), (Permutation (q ++ ql) (merge ql pl)), (Permutation (q ++ ql) (merge pl q)), (Permutation (q ++ ql) (merge pl p)), (Permutation (q ++ ql) (merge pl ql)), (Permutation (q ++ ql) (merge pl pl)), (Permutation (q ++ ql) (insert a q))
(Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a pl)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k pl)), (Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (maybe_swap ql))
(Permutation (q ++ ql) (maybe_swap pl)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (q ++ pl)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ pl)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ p))
(Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ pl)), (Permutation (q ++ ql) (pl ++ q)), (Permutation (q ++ ql) (pl ++ p)), (Permutation (q ++ ql) (pl ++ ql)), (Permutation (q ++ ql) (pl ++ pl)), (Permutation (q ++ ql) []), (Permutation (q ++ pl) q), (Permutation (q ++ pl) p), (Permutation (q ++ pl) ql)
(Permutation (q ++ pl) pl), (Permutation (q ++ pl) (a :: q)), (Permutation (q ++ pl) (a :: p)), (Permutation (q ++ pl) (a :: ql)), (Permutation (q ++ pl) (a :: pl)), (Permutation (q ++ pl) (k :: q)), (Permutation (q ++ pl) (k :: p)), (Permutation (q ++ pl) (k :: ql)), (Permutation (q ++ pl) (k :: pl)), (Permutation (q ++ pl) (merge q q))
(Permutation (q ++ pl) (merge q p)), (Permutation (q ++ pl) (merge q ql)), (Permutation (q ++ pl) (merge q pl)), (Permutation (q ++ pl) (merge p q)), (Permutation (q ++ pl) (merge p p)), (Permutation (q ++ pl) (merge p ql)), (Permutation (q ++ pl) (merge p pl)), (Permutation (q ++ pl) (merge ql q)), (Permutation (q ++ pl) (merge ql p)), (Permutation (q ++ pl) (merge ql ql))
(Permutation (q ++ pl) (merge ql pl)), (Permutation (q ++ pl) (merge pl q)), (Permutation (q ++ pl) (merge pl p)), (Permutation (q ++ pl) (merge pl ql)), (Permutation (q ++ pl) (merge pl pl)), (Permutation (q ++ pl) (insert a q)), (Permutation (q ++ pl) (insert a p)), (Permutation (q ++ pl) (insert a ql)), (Permutation (q ++ pl) (insert a pl)), (Permutation (q ++ pl) (insert k q))
(Permutation (q ++ pl) (insert k p)), (Permutation (q ++ pl) (insert k ql)), (Permutation (q ++ pl) (insert k pl)), (Permutation (q ++ pl) (maybe_swap q)), (Permutation (q ++ pl) (maybe_swap p)), (Permutation (q ++ pl) (maybe_swap ql)), (Permutation (q ++ pl) (maybe_swap pl)), (Permutation (q ++ pl) (q ++ q)), (Permutation (q ++ pl) (q ++ p)), (Permutation (q ++ pl) (q ++ ql))
(Permutation (q ++ pl) (p ++ q)), (Permutation (q ++ pl) (p ++ p)), (Permutation (q ++ pl) (p ++ ql)), (Permutation (q ++ pl) (p ++ pl)), (Permutation (q ++ pl) (ql ++ q)), (Permutation (q ++ pl) (ql ++ p)), (Permutation (q ++ pl) (ql ++ ql)), (Permutation (q ++ pl) (ql ++ pl)), (Permutation (q ++ pl) (pl ++ q)), (Permutation (q ++ pl) (pl ++ p))
(Permutation (q ++ pl) (pl ++ ql)), (Permutation (q ++ pl) (pl ++ pl)), (Permutation (q ++ pl) []), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) ql), (Permutation (p ++ q) pl), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (a :: ql))
(Permutation (p ++ q) (a :: pl)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: pl)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q pl)), (Permutation (p ++ q) (merge p q))
(Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p pl)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge ql ql)), (Permutation (p ++ q) (merge ql pl)), (Permutation (p ++ q) (merge pl q)), (Permutation (p ++ q) (merge pl p)), (Permutation (p ++ q) (merge pl ql))
(Permutation (p ++ q) (merge pl pl)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a pl)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k pl)), (Permutation (p ++ q) (maybe_swap q))
(Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap pl)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ pl)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ ql)), (Permutation (p ++ q) (p ++ pl))
(Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ pl)), (Permutation (p ++ q) (pl ++ q)), (Permutation (p ++ q) (pl ++ p)), (Permutation (p ++ q) (pl ++ ql)), (Permutation (p ++ q) (pl ++ pl)), (Permutation (p ++ q) []), (Permutation (p ++ p) q)
(Permutation (p ++ p) p), (Permutation (p ++ p) ql), (Permutation (p ++ p) pl), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: pl)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: ql))
(Permutation (p ++ p) (k :: pl)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q pl)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p pl)), (Permutation (p ++ p) (merge ql q))
(Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql pl)), (Permutation (p ++ p) (merge pl q)), (Permutation (p ++ p) (merge pl p)), (Permutation (p ++ p) (merge pl ql)), (Permutation (p ++ p) (merge pl pl)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a ql))
(Permutation (p ++ p) (insert a pl)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k pl)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap pl)), (Permutation (p ++ p) (q ++ q))
(Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ pl)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) (p ++ pl)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (ql ++ ql)), (Permutation (p ++ p) (ql ++ pl))
(Permutation (p ++ p) (pl ++ q)), (Permutation (p ++ p) (pl ++ p)), (Permutation (p ++ p) (pl ++ ql)), (Permutation (p ++ p) (pl ++ pl)), (Permutation (p ++ p) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) p), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) pl), (Permutation (p ++ ql) (a :: q))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (a :: ql)), (Permutation (p ++ ql) (a :: pl)), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: pl)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge q ql))
(Permutation (p ++ ql) (merge q pl)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p pl)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql pl)), (Permutation (p ++ ql) (merge pl q))
(Permutation (p ++ ql) (merge pl p)), (Permutation (p ++ ql) (merge pl ql)), (Permutation (p ++ ql) (merge pl pl)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a pl)), (Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert k ql))
(Permutation (p ++ ql) (insert k pl)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap pl)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ pl)), (Permutation (p ++ ql) (p ++ q))
(Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) (p ++ pl)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ pl)), (Permutation (p ++ ql) (pl ++ q)), (Permutation (p ++ ql) (pl ++ p)), (Permutation (p ++ ql) (pl ++ ql)), (Permutation (p ++ ql) (pl ++ pl))
(Permutation (p ++ ql) []), (Permutation (p ++ pl) q), (Permutation (p ++ pl) p), (Permutation (p ++ pl) ql), (Permutation (p ++ pl) pl), (Permutation (p ++ pl) (a :: q)), (Permutation (p ++ pl) (a :: p)), (Permutation (p ++ pl) (a :: ql)), (Permutation (p ++ pl) (a :: pl)), (Permutation (p ++ pl) (k :: q))
(Permutation (p ++ pl) (k :: p)), (Permutation (p ++ pl) (k :: ql)), (Permutation (p ++ pl) (k :: pl)), (Permutation (p ++ pl) (merge q q)), (Permutation (p ++ pl) (merge q p)), (Permutation (p ++ pl) (merge q ql)), (Permutation (p ++ pl) (merge q pl)), (Permutation (p ++ pl) (merge p q)), (Permutation (p ++ pl) (merge p p)), (Permutation (p ++ pl) (merge p ql))
(Permutation (p ++ pl) (merge p pl)), (Permutation (p ++ pl) (merge ql q)), (Permutation (p ++ pl) (merge ql p)), (Permutation (p ++ pl) (merge ql ql)), (Permutation (p ++ pl) (merge ql pl)), (Permutation (p ++ pl) (merge pl q)), (Permutation (p ++ pl) (merge pl p)), (Permutation (p ++ pl) (merge pl ql)), (Permutation (p ++ pl) (merge pl pl)), (Permutation (p ++ pl) (insert a q))
(Permutation (p ++ pl) (insert a p)), (Permutation (p ++ pl) (insert a ql)), (Permutation (p ++ pl) (insert a pl)), (Permutation (p ++ pl) (insert k q)), (Permutation (p ++ pl) (insert k p)), (Permutation (p ++ pl) (insert k ql)), (Permutation (p ++ pl) (insert k pl)), (Permutation (p ++ pl) (maybe_swap q)), (Permutation (p ++ pl) (maybe_swap p)), (Permutation (p ++ pl) (maybe_swap ql))
(Permutation (p ++ pl) (maybe_swap pl)), (Permutation (p ++ pl) (q ++ q)), (Permutation (p ++ pl) (q ++ p)), (Permutation (p ++ pl) (q ++ ql)), (Permutation (p ++ pl) (q ++ pl)), (Permutation (p ++ pl) (p ++ q)), (Permutation (p ++ pl) (p ++ p)), (Permutation (p ++ pl) (p ++ ql)), (Permutation (p ++ pl) (ql ++ q)), (Permutation (p ++ pl) (ql ++ p))
(Permutation (p ++ pl) (ql ++ ql)), (Permutation (p ++ pl) (ql ++ pl)), (Permutation (p ++ pl) (pl ++ q)), (Permutation (p ++ pl) (pl ++ p)), (Permutation (p ++ pl) (pl ++ ql)), (Permutation (p ++ pl) (pl ++ pl)), (Permutation (p ++ pl) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) p), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) pl), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: pl)), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: pl)), (Permutation (ql ++ q) (merge q q))
(Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q pl)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p pl)), (Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge ql ql))
(Permutation (ql ++ q) (merge ql pl)), (Permutation (ql ++ q) (merge pl q)), (Permutation (ql ++ q) (merge pl p)), (Permutation (ql ++ q) (merge pl ql)), (Permutation (ql ++ q) (merge pl pl)), (Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a pl)), (Permutation (ql ++ q) (insert k q))
(Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k pl)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap pl)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (q ++ ql))
(Permutation (ql ++ q) (q ++ pl)), (Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ pl)), (Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ pl)), (Permutation (ql ++ q) (pl ++ q)), (Permutation (ql ++ q) (pl ++ p))
(Permutation (ql ++ q) (pl ++ ql)), (Permutation (ql ++ q) (pl ++ pl)), (Permutation (ql ++ q) []), (Permutation (ql ++ p) q), (Permutation (ql ++ p) p), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) pl), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (a :: ql))
(Permutation (ql ++ p) (a :: pl)), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: pl)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q pl)), (Permutation (ql ++ p) (merge p q))
(Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p pl)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql pl)), (Permutation (ql ++ p) (merge pl q)), (Permutation (ql ++ p) (merge pl p)), (Permutation (ql ++ p) (merge pl ql))
(Permutation (ql ++ p) (merge pl pl)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a pl)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k pl)), (Permutation (ql ++ p) (maybe_swap q))
(Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap pl)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ pl)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) (p ++ ql))
(Permutation (ql ++ p) (p ++ pl)), (Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (ql ++ pl)), (Permutation (ql ++ p) (pl ++ q)), (Permutation (ql ++ p) (pl ++ p)), (Permutation (ql ++ p) (pl ++ ql)), (Permutation (ql ++ p) (pl ++ pl)), (Permutation (ql ++ p) []), (Permutation (ql ++ ql) q)
(Permutation (ql ++ ql) p), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) pl), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: pl)), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (k :: ql))
(Permutation (ql ++ ql) (k :: pl)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q pl)), (Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p pl)), (Permutation (ql ++ ql) (merge ql q))
(Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql pl)), (Permutation (ql ++ ql) (merge pl q)), (Permutation (ql ++ ql) (merge pl p)), (Permutation (ql ++ ql) (merge pl ql)), (Permutation (ql ++ ql) (merge pl pl)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (insert a ql))
(Permutation (ql ++ ql) (insert a pl)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k pl)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap pl)), (Permutation (ql ++ ql) (q ++ q))
(Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ pl)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ pl)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (ql ++ pl))
(Permutation (ql ++ ql) (pl ++ q)), (Permutation (ql ++ ql) (pl ++ p)), (Permutation (ql ++ ql) (pl ++ ql)), (Permutation (ql ++ ql) (pl ++ pl)), (Permutation (ql ++ ql) []), (Permutation (ql ++ pl) q), (Permutation (ql ++ pl) p), (Permutation (ql ++ pl) ql), (Permutation (ql ++ pl) pl), (Permutation (ql ++ pl) (a :: q))
(Permutation (ql ++ pl) (a :: p)), (Permutation (ql ++ pl) (a :: ql)), (Permutation (ql ++ pl) (a :: pl)), (Permutation (ql ++ pl) (k :: q)), (Permutation (ql ++ pl) (k :: p)), (Permutation (ql ++ pl) (k :: ql)), (Permutation (ql ++ pl) (k :: pl)), (Permutation (ql ++ pl) (merge q q)), (Permutation (ql ++ pl) (merge q p)), (Permutation (ql ++ pl) (merge q ql))
(Permutation (ql ++ pl) (merge q pl)), (Permutation (ql ++ pl) (merge p q)), (Permutation (ql ++ pl) (merge p p)), (Permutation (ql ++ pl) (merge p ql)), (Permutation (ql ++ pl) (merge p pl)), (Permutation (ql ++ pl) (merge ql q)), (Permutation (ql ++ pl) (merge ql p)), (Permutation (ql ++ pl) (merge ql ql)), (Permutation (ql ++ pl) (merge ql pl)), (Permutation (ql ++ pl) (merge pl q))
(Permutation (ql ++ pl) (merge pl p)), (Permutation (ql ++ pl) (merge pl ql)), (Permutation (ql ++ pl) (merge pl pl)), (Permutation (ql ++ pl) (insert a q)), (Permutation (ql ++ pl) (insert a p)), (Permutation (ql ++ pl) (insert a ql)), (Permutation (ql ++ pl) (insert a pl)), (Permutation (ql ++ pl) (insert k q)), (Permutation (ql ++ pl) (insert k p)), (Permutation (ql ++ pl) (insert k ql))
(Permutation (ql ++ pl) (insert k pl)), (Permutation (ql ++ pl) (maybe_swap q)), (Permutation (ql ++ pl) (maybe_swap p)), (Permutation (ql ++ pl) (maybe_swap ql)), (Permutation (ql ++ pl) (maybe_swap pl)), (Permutation (ql ++ pl) (q ++ q)), (Permutation (ql ++ pl) (q ++ p)), (Permutation (ql ++ pl) (q ++ ql)), (Permutation (ql ++ pl) (q ++ pl)), (Permutation (ql ++ pl) (p ++ q))
(Permutation (ql ++ pl) (p ++ p)), (Permutation (ql ++ pl) (p ++ ql)), (Permutation (ql ++ pl) (p ++ pl)), (Permutation (ql ++ pl) (ql ++ q)), (Permutation (ql ++ pl) (ql ++ p)), (Permutation (ql ++ pl) (ql ++ ql)), (Permutation (ql ++ pl) (pl ++ q)), (Permutation (ql ++ pl) (pl ++ p)), (Permutation (ql ++ pl) (pl ++ ql)), (Permutation (ql ++ pl) (pl ++ pl))
(Permutation (ql ++ pl) []), (Permutation (pl ++ q) q), (Permutation (pl ++ q) p), (Permutation (pl ++ q) ql), (Permutation (pl ++ q) pl), (Permutation (pl ++ q) (a :: q)), (Permutation (pl ++ q) (a :: p)), (Permutation (pl ++ q) (a :: ql)), (Permutation (pl ++ q) (a :: pl)), (Permutation (pl ++ q) (k :: q))
(Permutation (pl ++ q) (k :: p)), (Permutation (pl ++ q) (k :: ql)), (Permutation (pl ++ q) (k :: pl)), (Permutation (pl ++ q) (merge q q)), (Permutation (pl ++ q) (merge q p)), (Permutation (pl ++ q) (merge q ql)), (Permutation (pl ++ q) (merge q pl)), (Permutation (pl ++ q) (merge p q)), (Permutation (pl ++ q) (merge p p)), (Permutation (pl ++ q) (merge p ql))
(Permutation (pl ++ q) (merge p pl)), (Permutation (pl ++ q) (merge ql q)), (Permutation (pl ++ q) (merge ql p)), (Permutation (pl ++ q) (merge ql ql)), (Permutation (pl ++ q) (merge ql pl)), (Permutation (pl ++ q) (merge pl q)), (Permutation (pl ++ q) (merge pl p)), (Permutation (pl ++ q) (merge pl ql)), (Permutation (pl ++ q) (merge pl pl)), (Permutation (pl ++ q) (insert a q))
(Permutation (pl ++ q) (insert a p)), (Permutation (pl ++ q) (insert a ql)), (Permutation (pl ++ q) (insert a pl)), (Permutation (pl ++ q) (insert k q)), (Permutation (pl ++ q) (insert k p)), (Permutation (pl ++ q) (insert k ql)), (Permutation (pl ++ q) (insert k pl)), (Permutation (pl ++ q) (maybe_swap q)), (Permutation (pl ++ q) (maybe_swap p)), (Permutation (pl ++ q) (maybe_swap ql))
(Permutation (pl ++ q) (maybe_swap pl)), (Permutation (pl ++ q) (q ++ q)), (Permutation (pl ++ q) (q ++ p)), (Permutation (pl ++ q) (q ++ ql)), (Permutation (pl ++ q) (q ++ pl)), (Permutation (pl ++ q) (p ++ q)), (Permutation (pl ++ q) (p ++ p)), (Permutation (pl ++ q) (p ++ ql)), (Permutation (pl ++ q) (p ++ pl)), (Permutation (pl ++ q) (ql ++ q))
(Permutation (pl ++ q) (ql ++ p)), (Permutation (pl ++ q) (ql ++ ql)), (Permutation (pl ++ q) (ql ++ pl)), (Permutation (pl ++ q) (pl ++ p)), (Permutation (pl ++ q) (pl ++ ql)), (Permutation (pl ++ q) (pl ++ pl)), (Permutation (pl ++ q) []), (Permutation (pl ++ p) q), (Permutation (pl ++ p) p), (Permutation (pl ++ p) ql)
(Permutation (pl ++ p) pl), (Permutation (pl ++ p) (a :: q)), (Permutation (pl ++ p) (a :: p)), (Permutation (pl ++ p) (a :: ql)), (Permutation (pl ++ p) (a :: pl)), (Permutation (pl ++ p) (k :: q)), (Permutation (pl ++ p) (k :: p)), (Permutation (pl ++ p) (k :: ql)), (Permutation (pl ++ p) (k :: pl)), (Permutation (pl ++ p) (merge q q))
(Permutation (pl ++ p) (merge q p)), (Permutation (pl ++ p) (merge q ql)), (Permutation (pl ++ p) (merge q pl)), (Permutation (pl ++ p) (merge p q)), (Permutation (pl ++ p) (merge p p)), (Permutation (pl ++ p) (merge p ql)), (Permutation (pl ++ p) (merge p pl)), (Permutation (pl ++ p) (merge ql q)), (Permutation (pl ++ p) (merge ql p)), (Permutation (pl ++ p) (merge ql ql))
(Permutation (pl ++ p) (merge ql pl)), (Permutation (pl ++ p) (merge pl q)), (Permutation (pl ++ p) (merge pl p)), (Permutation (pl ++ p) (merge pl ql)), (Permutation (pl ++ p) (merge pl pl)), (Permutation (pl ++ p) (insert a q)), (Permutation (pl ++ p) (insert a p)), (Permutation (pl ++ p) (insert a ql)), (Permutation (pl ++ p) (insert a pl)), (Permutation (pl ++ p) (insert k q))
(Permutation (pl ++ p) (insert k p)), (Permutation (pl ++ p) (insert k ql)), (Permutation (pl ++ p) (insert k pl)), (Permutation (pl ++ p) (maybe_swap q)), (Permutation (pl ++ p) (maybe_swap p)), (Permutation (pl ++ p) (maybe_swap ql)), (Permutation (pl ++ p) (maybe_swap pl)), (Permutation (pl ++ p) (q ++ q)), (Permutation (pl ++ p) (q ++ p)), (Permutation (pl ++ p) (q ++ ql))
(Permutation (pl ++ p) (q ++ pl)), (Permutation (pl ++ p) (p ++ q)), (Permutation (pl ++ p) (p ++ p)), (Permutation (pl ++ p) (p ++ ql)), (Permutation (pl ++ p) (p ++ pl)), (Permutation (pl ++ p) (ql ++ q)), (Permutation (pl ++ p) (ql ++ p)), (Permutation (pl ++ p) (ql ++ ql)), (Permutation (pl ++ p) (ql ++ pl)), (Permutation (pl ++ p) (pl ++ q))
(Permutation (pl ++ p) (pl ++ ql)), (Permutation (pl ++ p) (pl ++ pl)), (Permutation (pl ++ p) []), (Permutation (pl ++ ql) q), (Permutation (pl ++ ql) p), (Permutation (pl ++ ql) ql), (Permutation (pl ++ ql) pl), (Permutation (pl ++ ql) (a :: q)), (Permutation (pl ++ ql) (a :: p)), (Permutation (pl ++ ql) (a :: ql))
(Permutation (pl ++ ql) (a :: pl)), (Permutation (pl ++ ql) (k :: q)), (Permutation (pl ++ ql) (k :: p)), (Permutation (pl ++ ql) (k :: ql)), (Permutation (pl ++ ql) (k :: pl)), (Permutation (pl ++ ql) (merge q q)), (Permutation (pl ++ ql) (merge q p)), (Permutation (pl ++ ql) (merge q ql)), (Permutation (pl ++ ql) (merge q pl)), (Permutation (pl ++ ql) (merge p q))
(Permutation (pl ++ ql) (merge p p)), (Permutation (pl ++ ql) (merge p ql)), (Permutation (pl ++ ql) (merge p pl)), (Permutation (pl ++ ql) (merge ql q)), (Permutation (pl ++ ql) (merge ql p)), (Permutation (pl ++ ql) (merge ql ql)), (Permutation (pl ++ ql) (merge ql pl)), (Permutation (pl ++ ql) (merge pl q)), (Permutation (pl ++ ql) (merge pl p)), (Permutation (pl ++ ql) (merge pl ql))
(Permutation (pl ++ ql) (merge pl pl)), (Permutation (pl ++ ql) (insert a q)), (Permutation (pl ++ ql) (insert a p)), (Permutation (pl ++ ql) (insert a ql)), (Permutation (pl ++ ql) (insert a pl)), (Permutation (pl ++ ql) (insert k q)), (Permutation (pl ++ ql) (insert k p)), (Permutation (pl ++ ql) (insert k ql)), (Permutation (pl ++ ql) (insert k pl)), (Permutation (pl ++ ql) (maybe_swap q))
(Permutation (pl ++ ql) (maybe_swap p)), (Permutation (pl ++ ql) (maybe_swap ql)), (Permutation (pl ++ ql) (maybe_swap pl)), (Permutation (pl ++ ql) (q ++ q)), (Permutation (pl ++ ql) (q ++ p)), (Permutation (pl ++ ql) (q ++ ql)), (Permutation (pl ++ ql) (q ++ pl)), (Permutation (pl ++ ql) (p ++ q)), (Permutation (pl ++ ql) (p ++ p)), (Permutation (pl ++ ql) (p ++ ql))
(Permutation (pl ++ ql) (p ++ pl)), (Permutation (pl ++ ql) (ql ++ q)), (Permutation (pl ++ ql) (ql ++ p)), (Permutation (pl ++ ql) (ql ++ ql)), (Permutation (pl ++ ql) (ql ++ pl)), (Permutation (pl ++ ql) (pl ++ q)), (Permutation (pl ++ ql) (pl ++ p)), (Permutation (pl ++ ql) (pl ++ pl)), (Permutation (pl ++ ql) []), (Permutation (pl ++ pl) q)
(Permutation (pl ++ pl) p), (Permutation (pl ++ pl) ql), (Permutation (pl ++ pl) pl), (Permutation (pl ++ pl) (a :: q)), (Permutation (pl ++ pl) (a :: p)), (Permutation (pl ++ pl) (a :: ql)), (Permutation (pl ++ pl) (a :: pl)), (Permutation (pl ++ pl) (k :: q)), (Permutation (pl ++ pl) (k :: p)), (Permutation (pl ++ pl) (k :: ql))
(Permutation (pl ++ pl) (k :: pl)), (Permutation (pl ++ pl) (merge q q)), (Permutation (pl ++ pl) (merge q p)), (Permutation (pl ++ pl) (merge q ql)), (Permutation (pl ++ pl) (merge q pl)), (Permutation (pl ++ pl) (merge p q)), (Permutation (pl ++ pl) (merge p p)), (Permutation (pl ++ pl) (merge p ql)), (Permutation (pl ++ pl) (merge p pl)), (Permutation (pl ++ pl) (merge ql q))
(Permutation (pl ++ pl) (merge ql p)), (Permutation (pl ++ pl) (merge ql ql)), (Permutation (pl ++ pl) (merge ql pl)), (Permutation (pl ++ pl) (merge pl q)), (Permutation (pl ++ pl) (merge pl p)), (Permutation (pl ++ pl) (merge pl ql)), (Permutation (pl ++ pl) (merge pl pl)), (Permutation (pl ++ pl) (insert a q)), (Permutation (pl ++ pl) (insert a p)), (Permutation (pl ++ pl) (insert a ql))
(Permutation (pl ++ pl) (insert a pl)), (Permutation (pl ++ pl) (insert k q)), (Permutation (pl ++ pl) (insert k p)), (Permutation (pl ++ pl) (insert k ql)), (Permutation (pl ++ pl) (insert k pl)), (Permutation (pl ++ pl) (maybe_swap q)), (Permutation (pl ++ pl) (maybe_swap p)), (Permutation (pl ++ pl) (maybe_swap ql)), (Permutation (pl ++ pl) (maybe_swap pl)), (Permutation (pl ++ pl) (q ++ q))
(Permutation (pl ++ pl) (q ++ p)), (Permutation (pl ++ pl) (q ++ ql)), (Permutation (pl ++ pl) (q ++ pl)), (Permutation (pl ++ pl) (p ++ q)), (Permutation (pl ++ pl) (p ++ p)), (Permutation (pl ++ pl) (p ++ ql)), (Permutation (pl ++ pl) (p ++ pl)), (Permutation (pl ++ pl) (ql ++ q)), (Permutation (pl ++ pl) (ql ++ p)), (Permutation (pl ++ pl) (ql ++ ql))
(Permutation (pl ++ pl) (ql ++ pl)), (Permutation (pl ++ pl) (pl ++ q)), (Permutation (pl ++ pl) (pl ++ p)), (Permutation (pl ++ pl) (pl ++ ql)), (Permutation (pl ++ pl) []), (Permutation [] q), (Permutation [] p), (Permutation [] ql), (Permutation [] pl), (Permutation [] (a :: q))
(Permutation [] (a :: p)), (Permutation [] (a :: ql)), (Permutation [] (a :: pl)), (Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (k :: ql)), (Permutation [] (k :: pl)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge q ql))
(Permutation [] (merge q pl)), (Permutation [] (merge p q)), (Permutation [] (merge p p)), (Permutation [] (merge p ql)), (Permutation [] (merge p pl)), (Permutation [] (merge ql q)), (Permutation [] (merge ql p)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql pl)), (Permutation [] (merge pl q))
(Permutation [] (merge pl p)), (Permutation [] (merge pl ql)), (Permutation [] (merge pl pl)), (Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (insert a ql)), (Permutation [] (insert a pl)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert k ql))
(Permutation [] (insert k pl)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap pl)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ pl)), (Permutation [] (p ++ q))
(Permutation [] (p ++ p)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ pl)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ p)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ pl)), (Permutation [] (pl ++ q)), (Permutation [] (pl ++ p)), (Permutation [] (pl ++ ql))
(Permutation [] (pl ++ pl)), (In a (a :: q)), (In a (a :: p)), (In a (a :: ql)), (In a (a :: pl)), (In a (k :: q)), (In a (k :: p)), (In a (k :: ql)), (In a (k :: pl)), (In a (merge q q))
(In a (merge q p)), (In a (merge q ql)), (In a (merge q pl)), (In a (merge p q)), (In a (merge p p)), (In a (merge p ql)), (In a (merge p pl)), (In a (merge ql q)), (In a (merge ql p)), (In a (merge ql ql))
(In a (merge ql pl)), (In a (merge pl q)), (In a (merge pl p)), (In a (merge pl ql)), (In a (merge pl pl)), (In a (insert a q)), (In a (insert a p)), (In a (insert a ql)), (In a (insert a pl)), (In a (insert k q))
(In a (insert k p)), (In a (insert k ql)), (In a (insert k pl)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (maybe_swap ql)), (In a (maybe_swap pl)), (In a (q ++ q)), (In a (q ++ p)), (In a (q ++ ql))
(In a (q ++ pl)), (In a (p ++ q)), (In a (p ++ p)), (In a (p ++ ql)), (In a (p ++ pl)), (In a (ql ++ q)), (In a (ql ++ p)), (In a (ql ++ ql)), (In a (ql ++ pl)), (In a (pl ++ q))
(In a (pl ++ p)), (In a (pl ++ ql)), (In a (pl ++ pl)), (In k (a :: q)), (In k (a :: p)), (In k (a :: ql)), (In k (a :: pl)), (In k (k :: q)), (In k (k :: p)), (In k (k :: ql))
(In k (k :: pl)), (In k (merge q q)), (In k (merge q p)), (In k (merge q ql)), (In k (merge q pl)), (In k (merge p q)), (In k (merge p p)), (In k (merge p ql)), (In k (merge p pl)), (In k (merge ql q))
(In k (merge ql p)), (In k (merge ql ql)), (In k (merge ql pl)), (In k (merge pl q)), (In k (merge pl p)), (In k (merge pl ql)), (In k (merge pl pl)), (In k (insert a q)), (In k (insert a p)), (In k (insert a ql))
(In k (insert a pl)), (In k (insert k q)), (In k (insert k p)), (In k (insert k ql)), (In k (insert k pl)), (In k (maybe_swap q)), (In k (maybe_swap p)), (In k (maybe_swap ql)), (In k (maybe_swap pl)), (In k (q ++ q))
(In k (q ++ p)), (In k (q ++ ql)), (In k (q ++ pl)), (In k (p ++ q)), (In k (p ++ p)), (In k (p ++ ql)), (In k (p ++ pl)), (In k (ql ++ q)), (In k (ql ++ p)), (In k (ql ++ ql))
(In k (ql ++ pl)), (In k (pl ++ q)), (In k (pl ++ p)), (In k (pl ++ ql)), (In k (pl ++ pl)), (In (length q) q), (In (length q) p), (In (length q) ql), (In (length q) pl), (In (length q) (a :: q))
(In (length q) (a :: p)), (In (length q) (a :: ql)), (In (length q) (a :: pl)), (In (length q) (k :: q)), (In (length q) (k :: p)), (In (length q) (k :: ql)), (In (length q) (k :: pl)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge q ql))
(In (length q) (merge q pl)), (In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (merge p ql)), (In (length q) (merge p pl)), (In (length q) (merge ql q)), (In (length q) (merge ql p)), (In (length q) (merge ql ql)), (In (length q) (merge ql pl)), (In (length q) (merge pl q))
(In (length q) (merge pl p)), (In (length q) (merge pl ql)), (In (length q) (merge pl pl)), (In (length q) (insert a q)), (In (length q) (insert a p)), (In (length q) (insert a ql)), (In (length q) (insert a pl)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert k ql))
(In (length q) (insert k pl)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap pl)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (q ++ ql)), (In (length q) (q ++ pl)), (In (length q) (p ++ q))
(In (length q) (p ++ p)), (In (length q) (p ++ ql)), (In (length q) (p ++ pl)), (In (length q) (ql ++ q)), (In (length q) (ql ++ p)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ pl)), (In (length q) (pl ++ q)), (In (length q) (pl ++ p)), (In (length q) (pl ++ ql))
(In (length q) (pl ++ pl)), (In (length p) q), (In (length p) p), (In (length p) ql), (In (length p) pl), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (a :: ql)), (In (length p) (a :: pl)), (In (length p) (k :: q))
(In (length p) (k :: p)), (In (length p) (k :: ql)), (In (length p) (k :: pl)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge q ql)), (In (length p) (merge q pl)), (In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (merge p ql))
(In (length p) (merge p pl)), (In (length p) (merge ql q)), (In (length p) (merge ql p)), (In (length p) (merge ql ql)), (In (length p) (merge ql pl)), (In (length p) (merge pl q)), (In (length p) (merge pl p)), (In (length p) (merge pl ql)), (In (length p) (merge pl pl)), (In (length p) (insert a q))
(In (length p) (insert a p)), (In (length p) (insert a ql)), (In (length p) (insert a pl)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert k ql)), (In (length p) (insert k pl)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (maybe_swap ql))
(In (length p) (maybe_swap pl)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (q ++ ql)), (In (length p) (q ++ pl)), (In (length p) (p ++ q)), (In (length p) (p ++ p)), (In (length p) (p ++ ql)), (In (length p) (p ++ pl)), (In (length p) (ql ++ q))
(In (length p) (ql ++ p)), (In (length p) (ql ++ ql)), (In (length p) (ql ++ pl)), (In (length p) (pl ++ q)), (In (length p) (pl ++ p)), (In (length p) (pl ++ ql)), (In (length p) (pl ++ pl)), (In (length ql) q), (In (length ql) p), (In (length ql) ql)
(In (length ql) pl), (In (length ql) (a :: q)), (In (length ql) (a :: p)), (In (length ql) (a :: ql)), (In (length ql) (a :: pl)), (In (length ql) (k :: q)), (In (length ql) (k :: p)), (In (length ql) (k :: ql)), (In (length ql) (k :: pl)), (In (length ql) (merge q q))
(In (length ql) (merge q p)), (In (length ql) (merge q ql)), (In (length ql) (merge q pl)), (In (length ql) (merge p q)), (In (length ql) (merge p p)), (In (length ql) (merge p ql)), (In (length ql) (merge p pl)), (In (length ql) (merge ql q)), (In (length ql) (merge ql p)), (In (length ql) (merge ql ql))
(In (length ql) (merge ql pl)), (In (length ql) (merge pl q)), (In (length ql) (merge pl p)), (In (length ql) (merge pl ql)), (In (length ql) (merge pl pl)), (In (length ql) (insert a q)), (In (length ql) (insert a p)), (In (length ql) (insert a ql)), (In (length ql) (insert a pl)), (In (length ql) (insert k q))
(In (length ql) (insert k p)), (In (length ql) (insert k ql)), (In (length ql) (insert k pl)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap p)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap pl)), (In (length ql) (q ++ q)), (In (length ql) (q ++ p)), (In (length ql) (q ++ ql))
(In (length ql) (q ++ pl)), (In (length ql) (p ++ q)), (In (length ql) (p ++ p)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ pl)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ p)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ pl)), (In (length ql) (pl ++ q))
(In (length ql) (pl ++ p)), (In (length ql) (pl ++ ql)), (In (length ql) (pl ++ pl)), (In (length pl) q), (In (length pl) p), (In (length pl) ql), (In (length pl) pl), (In (length pl) (a :: q)), (In (length pl) (a :: p)), (In (length pl) (a :: ql))
(In (length pl) (a :: pl)), (In (length pl) (k :: q)), (In (length pl) (k :: p)), (In (length pl) (k :: ql)), (In (length pl) (k :: pl)), (In (length pl) (merge q q)), (In (length pl) (merge q p)), (In (length pl) (merge q ql)), (In (length pl) (merge q pl)), (In (length pl) (merge p q))
(In (length pl) (merge p p)), (In (length pl) (merge p ql)), (In (length pl) (merge p pl)), (In (length pl) (merge ql q)), (In (length pl) (merge ql p)), (In (length pl) (merge ql ql)), (In (length pl) (merge ql pl)), (In (length pl) (merge pl q)), (In (length pl) (merge pl p)), (In (length pl) (merge pl ql))
(In (length pl) (merge pl pl)), (In (length pl) (insert a q)), (In (length pl) (insert a p)), (In (length pl) (insert a ql)), (In (length pl) (insert a pl)), (In (length pl) (insert k q)), (In (length pl) (insert k p)), (In (length pl) (insert k ql)), (In (length pl) (insert k pl)), (In (length pl) (maybe_swap q))
(In (length pl) (maybe_swap p)), (In (length pl) (maybe_swap ql)), (In (length pl) (maybe_swap pl)), (In (length pl) (q ++ q)), (In (length pl) (q ++ p)), (In (length pl) (q ++ ql)), (In (length pl) (q ++ pl)), (In (length pl) (p ++ q)), (In (length pl) (p ++ p)), (In (length pl) (p ++ ql))
(In (length pl) (p ++ pl)), (In (length pl) (ql ++ q)), (In (length pl) (ql ++ p)), (In (length pl) (ql ++ ql)), (In (length pl) (ql ++ pl)), (In (length pl) (pl ++ q)), (In (length pl) (pl ++ p)), (In (length pl) (pl ++ ql)), (In (length pl) (pl ++ pl)), (a < length q)
(a < length p), (a < length ql), (a < length pl), (k < length q), (k < length p), (k < length ql), (k < length pl), (length q < a), (length q < k), (length q < length p)
(length q < length ql), (length q < length pl), (length p < a), (length p < k), (length p < length q), (length p < length ql), (length p < length pl), (length ql < a), (length ql < k), (length ql < length q)
(length ql < length p), (length ql < length pl), (length pl < a), (length pl < k), (length pl < length q), (length pl < length p), (length pl < length ql), (a <= length q), (a <= length p), (a <= length ql)
(a <= length pl), (k <= length q), (k <= length p), (k <= length ql), (k <= length pl), (length q <= a), (length q <= k), (length q <= length p), (length q <= length ql), (length q <= length pl)
(length p <= a), (length p <= k), (length p <= length q), (length p <= length ql), (length p <= length pl), (length ql <= a), (length ql <= k), (length ql <= length q), (length ql <= length p), (length ql <= length pl)
(length pl <= a), (length pl <= k), (length pl <= length q), (length pl <= length p), (length pl <= length ql), (~ Abs q q), (~ Abs q p), (~ Abs q ql), (~ Abs q pl), (~ Abs p q)
(~ Abs p p), (~ Abs p ql), (~ Abs p pl), (~ Abs ql q), (~ Abs ql p), (~ Abs ql ql), (~ Abs ql pl), (~ Abs pl q), (~ Abs pl p), (~ Abs pl ql)
(~ Abs pl pl), (~ priq q), (~ priq p), (~ priq ql), (~ priq pl), (~ Permutation q q), (~ Permutation q p), (~ Permutation q ql), (~ Permutation q pl), (~ Permutation p q)
(~ Permutation p p), (~ Permutation p ql), (~ Permutation p pl), (~ Permutation ql q), (~ Permutation ql p), (~ Permutation ql ql), (~ Permutation ql pl), (~ Permutation pl q), (~ Permutation pl p), (~ Permutation pl ql)
(~ Permutation pl pl), (~ In a q), (~ In a p), (~ In a ql), (~ In a pl), (~ In k q), (~ In k p), (~ In k ql), (~ In k pl), (~ a < a)
(~ a < k), (~ k < a), (~ k < k), (~ a <= a), (~ a <= k), (~ k <= a), (~ k <= k), (a <> a), (a <> k), (k <> a)
(k <> k), (q <> q), (q <> p), (q <> ql), (q <> pl), (p <> q), (p <> p), (p <> ql), (p <> pl), (ql <> q)
(ql <> p), (ql <> ql), (ql <> pl), (pl <> q), (pl <> p), (pl <> ql), (pl <> pl), (None = Some q), (None = Some p), (None = Some ql)
(None = Some pl), (a :: q = q), (a :: q = p), (a :: q = ql), (a :: q = pl), (a :: q = merge q q), (a :: q = merge q p), (a :: q = merge q ql), (a :: q = merge q pl), (a :: q = merge p q)
(a :: q = merge p p), (a :: q = merge p ql), (a :: q = merge p pl), (a :: q = merge ql q), (a :: q = merge ql p), (a :: q = merge ql ql), (a :: q = merge ql pl), (a :: q = merge pl q), (a :: q = merge pl p), (a :: q = merge pl ql)
(a :: q = merge pl pl), (a :: q = insert a q), (a :: q = insert a p), (a :: q = insert a ql), (a :: q = insert a pl), (a :: q = insert k q), (a :: q = insert k p), (a :: q = insert k ql), (a :: q = insert k pl), (a :: q = maybe_swap q)
(a :: q = maybe_swap p), (a :: q = maybe_swap ql), (a :: q = maybe_swap pl), (a :: q = q ++ q), (a :: q = q ++ p), (a :: q = q ++ ql), (a :: q = q ++ pl), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = p ++ ql)
(a :: q = p ++ pl), (a :: q = ql ++ q), (a :: q = ql ++ p), (a :: q = ql ++ ql), (a :: q = ql ++ pl), (a :: q = pl ++ q), (a :: q = pl ++ p), (a :: q = pl ++ ql), (a :: q = pl ++ pl), (a :: q = [])
(a :: p = q), (a :: p = p), (a :: p = ql), (a :: p = pl), (a :: p = merge q q), (a :: p = merge q p), (a :: p = merge q ql), (a :: p = merge q pl), (a :: p = merge p q), (a :: p = merge p p)
(a :: p = merge p ql), (a :: p = merge p pl), (a :: p = merge ql q), (a :: p = merge ql p), (a :: p = merge ql ql), (a :: p = merge ql pl), (a :: p = merge pl q), (a :: p = merge pl p), (a :: p = merge pl ql), (a :: p = merge pl pl)
(a :: p = insert a q), (a :: p = insert a p), (a :: p = insert a ql), (a :: p = insert a pl), (a :: p = insert k q), (a :: p = insert k p), (a :: p = insert k ql), (a :: p = insert k pl), (a :: p = maybe_swap q), (a :: p = maybe_swap p)
(a :: p = maybe_swap ql), (a :: p = maybe_swap pl), (a :: p = q ++ q), (a :: p = q ++ p), (a :: p = q ++ ql), (a :: p = q ++ pl), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = p ++ ql), (a :: p = p ++ pl)
(a :: p = ql ++ q), (a :: p = ql ++ p), (a :: p = ql ++ ql), (a :: p = ql ++ pl), (a :: p = pl ++ q), (a :: p = pl ++ p), (a :: p = pl ++ ql), (a :: p = pl ++ pl), (a :: p = []), (a :: ql = q)
(a :: ql = p), (a :: ql = ql), (a :: ql = pl), (a :: ql = merge q q), (a :: ql = merge q p), (a :: ql = merge q ql), (a :: ql = merge q pl), (a :: ql = merge p q), (a :: ql = merge p p), (a :: ql = merge p ql)
(a :: ql = merge p pl), (a :: ql = merge ql q), (a :: ql = merge ql p), (a :: ql = merge ql ql), (a :: ql = merge ql pl), (a :: ql = merge pl q), (a :: ql = merge pl p), (a :: ql = merge pl ql), (a :: ql = merge pl pl), (a :: ql = insert a q)
(a :: ql = insert a p), (a :: ql = insert a ql), (a :: ql = insert a pl), (a :: ql = insert k q), (a :: ql = insert k p), (a :: ql = insert k ql), (a :: ql = insert k pl), (a :: ql = maybe_swap q), (a :: ql = maybe_swap p), (a :: ql = maybe_swap ql)
(a :: ql = maybe_swap pl), (a :: ql = q ++ q), (a :: ql = q ++ p), (a :: ql = q ++ ql), (a :: ql = q ++ pl), (a :: ql = p ++ q), (a :: ql = p ++ p), (a :: ql = p ++ ql), (a :: ql = p ++ pl), (a :: ql = ql ++ q)
(a :: ql = ql ++ p), (a :: ql = ql ++ ql), (a :: ql = ql ++ pl), (a :: ql = pl ++ q), (a :: ql = pl ++ p), (a :: ql = pl ++ ql), (a :: ql = pl ++ pl), (a :: ql = []), (a :: pl = q), (a :: pl = p)
(a :: pl = ql), (a :: pl = pl), (a :: pl = merge q q), (a :: pl = merge q p), (a :: pl = merge q ql), (a :: pl = merge q pl), (a :: pl = merge p q), (a :: pl = merge p p), (a :: pl = merge p ql), (a :: pl = merge p pl)
(a :: pl = merge ql q), (a :: pl = merge ql p), (a :: pl = merge ql ql), (a :: pl = merge ql pl), (a :: pl = merge pl q), (a :: pl = merge pl p), (a :: pl = merge pl ql), (a :: pl = merge pl pl), (a :: pl = insert a q), (a :: pl = insert a p)
(a :: pl = insert a ql), (a :: pl = insert a pl), (a :: pl = insert k q), (a :: pl = insert k p), (a :: pl = insert k ql), (a :: pl = insert k pl), (a :: pl = maybe_swap q), (a :: pl = maybe_swap p), (a :: pl = maybe_swap ql), (a :: pl = maybe_swap pl)
(a :: pl = q ++ q), (a :: pl = q ++ p), (a :: pl = q ++ ql), (a :: pl = q ++ pl), (a :: pl = p ++ q), (a :: pl = p ++ p), (a :: pl = p ++ ql), (a :: pl = p ++ pl), (a :: pl = ql ++ q), (a :: pl = ql ++ p)
(a :: pl = ql ++ ql), (a :: pl = ql ++ pl), (a :: pl = pl ++ q), (a :: pl = pl ++ p), (a :: pl = pl ++ ql), (a :: pl = pl ++ pl), (a :: pl = []), (k :: q = q), (k :: q = p), (k :: q = ql)
(k :: q = pl), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge q ql), (k :: q = merge q pl), (k :: q = merge p q), (k :: q = merge p p), (k :: q = merge p ql), (k :: q = merge p pl), (k :: q = merge ql q)
(k :: q = merge ql p), (k :: q = merge ql ql), (k :: q = merge ql pl), (k :: q = merge pl q), (k :: q = merge pl p), (k :: q = merge pl ql), (k :: q = merge pl pl), (k :: q = insert a q), (k :: q = insert a p), (k :: q = insert a ql)
(k :: q = insert a pl), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert k ql), (k :: q = insert k pl), (k :: q = maybe_swap q), (k :: q = maybe_swap p), (k :: q = maybe_swap ql), (k :: q = maybe_swap pl), (k :: q = q ++ q)
(k :: q = q ++ p), (k :: q = q ++ ql), (k :: q = q ++ pl), (k :: q = p ++ q), (k :: q = p ++ p), (k :: q = p ++ ql), (k :: q = p ++ pl), (k :: q = ql ++ q), (k :: q = ql ++ p), (k :: q = ql ++ ql)
(k :: q = ql ++ pl), (k :: q = pl ++ q), (k :: q = pl ++ p), (k :: q = pl ++ ql), (k :: q = pl ++ pl), (k :: q = []), (k :: p = q), (k :: p = p), (k :: p = ql), (k :: p = pl)
(k :: p = merge q q), (k :: p = merge q p), (k :: p = merge q ql), (k :: p = merge q pl), (k :: p = merge p q), (k :: p = merge p p), (k :: p = merge p ql), (k :: p = merge p pl), (k :: p = merge ql q), (k :: p = merge ql p)
(k :: p = merge ql ql), (k :: p = merge ql pl), (k :: p = merge pl q), (k :: p = merge pl p), (k :: p = merge pl ql), (k :: p = merge pl pl), (k :: p = insert a q), (k :: p = insert a p), (k :: p = insert a ql), (k :: p = insert a pl)
(k :: p = insert k q), (k :: p = insert k p), (k :: p = insert k ql), (k :: p = insert k pl), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = maybe_swap ql), (k :: p = maybe_swap pl), (k :: p = q ++ q), (k :: p = q ++ p)
(k :: p = q ++ ql), (k :: p = q ++ pl), (k :: p = p ++ q), (k :: p = p ++ p), (k :: p = p ++ ql), (k :: p = p ++ pl), (k :: p = ql ++ q), (k :: p = ql ++ p), (k :: p = ql ++ ql), (k :: p = ql ++ pl)
(k :: p = pl ++ q), (k :: p = pl ++ p), (k :: p = pl ++ ql), (k :: p = pl ++ pl), (k :: p = []), (k :: ql = q), (k :: ql = p), (k :: ql = ql), (k :: ql = pl), (k :: ql = merge q q)
(k :: ql = merge q p), (k :: ql = merge q ql), (k :: ql = merge q pl), (k :: ql = merge p q), (k :: ql = merge p p), (k :: ql = merge p ql), (k :: ql = merge p pl), (k :: ql = merge ql q), (k :: ql = merge ql p), (k :: ql = merge ql ql)
(k :: ql = merge ql pl), (k :: ql = merge pl q), (k :: ql = merge pl p), (k :: ql = merge pl ql), (k :: ql = merge pl pl), (k :: ql = insert a q), (k :: ql = insert a p), (k :: ql = insert a ql), (k :: ql = insert a pl), (k :: ql = insert k q)
(k :: ql = insert k p), (k :: ql = insert k ql), (k :: ql = insert k pl), (k :: ql = maybe_swap q), (k :: ql = maybe_swap p), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap pl), (k :: ql = q ++ q), (k :: ql = q ++ p), (k :: ql = q ++ ql)
(k :: ql = q ++ pl), (k :: ql = p ++ q), (k :: ql = p ++ p), (k :: ql = p ++ ql), (k :: ql = p ++ pl), (k :: ql = ql ++ q), (k :: ql = ql ++ p), (k :: ql = ql ++ ql), (k :: ql = ql ++ pl), (k :: ql = pl ++ q)
(k :: ql = pl ++ p), (k :: ql = pl ++ ql), (k :: ql = pl ++ pl), (k :: ql = []), (k :: pl = q), (k :: pl = p), (k :: pl = ql), (k :: pl = pl), (k :: pl = merge q q), (k :: pl = merge q p)
(k :: pl = merge q ql), (k :: pl = merge q pl), (k :: pl = merge p q), (k :: pl = merge p p), (k :: pl = merge p ql), (k :: pl = merge p pl), (k :: pl = merge ql q), (k :: pl = merge ql p), (k :: pl = merge ql ql), (k :: pl = merge ql pl)
(k :: pl = merge pl q), (k :: pl = merge pl p), (k :: pl = merge pl ql), (k :: pl = merge pl pl), (k :: pl = insert a q), (k :: pl = insert a p), (k :: pl = insert a ql), (k :: pl = insert a pl), (k :: pl = insert k q), (k :: pl = insert k p)
(k :: pl = insert k ql), (k :: pl = insert k pl), (k :: pl = maybe_swap q), (k :: pl = maybe_swap p), (k :: pl = maybe_swap ql), (k :: pl = maybe_swap pl), (k :: pl = q ++ q), (k :: pl = q ++ p), (k :: pl = q ++ ql), (k :: pl = q ++ pl)
(k :: pl = p ++ q), (k :: pl = p ++ p), (k :: pl = p ++ ql), (k :: pl = p ++ pl), (k :: pl = ql ++ q), (k :: pl = ql ++ p), (k :: pl = ql ++ ql), (k :: pl = ql ++ pl), (k :: pl = pl ++ q), (k :: pl = pl ++ p)
(k :: pl = pl ++ ql), (k :: pl = pl ++ pl), (k :: pl = []), (merge q q = q), (merge q q = p), (merge q q = ql), (merge q q = pl), (merge q q = insert a q), (merge q q = insert a p), (merge q q = insert a ql)
(merge q q = insert a pl), (merge q q = insert k q), (merge q q = insert k p), (merge q q = insert k ql), (merge q q = insert k pl), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = maybe_swap ql), (merge q q = maybe_swap pl), (merge q q = q ++ q)
(merge q q = q ++ p), (merge q q = q ++ ql), (merge q q = q ++ pl), (merge q q = p ++ q), (merge q q = p ++ p), (merge q q = p ++ ql), (merge q q = p ++ pl), (merge q q = ql ++ q), (merge q q = ql ++ p), (merge q q = ql ++ ql)
(merge q q = ql ++ pl), (merge q q = pl ++ q), (merge q q = pl ++ p), (merge q q = pl ++ ql), (merge q q = pl ++ pl), (merge q p = q), (merge q p = p), (merge q p = ql), (merge q p = pl), (merge q p = insert a q)
(merge q p = insert a p), (merge q p = insert a ql), (merge q p = insert a pl), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert k ql), (merge q p = insert k pl), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = maybe_swap ql)
(merge q p = maybe_swap pl), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = q ++ ql), (merge q p = q ++ pl), (merge q p = p ++ q), (merge q p = p ++ p), (merge q p = p ++ ql), (merge q p = p ++ pl), (merge q p = ql ++ q)
(merge q p = ql ++ p), (merge q p = ql ++ ql), (merge q p = ql ++ pl), (merge q p = pl ++ q), (merge q p = pl ++ p), (merge q p = pl ++ ql), (merge q p = pl ++ pl), (merge q ql = q), (merge q ql = p), (merge q ql = ql)
(merge q ql = pl), (merge q ql = insert a q), (merge q ql = insert a p), (merge q ql = insert a ql), (merge q ql = insert a pl), (merge q ql = insert k q), (merge q ql = insert k p), (merge q ql = insert k ql), (merge q ql = insert k pl), (merge q ql = maybe_swap q)
(merge q ql = maybe_swap p), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap pl), (merge q ql = q ++ q), (merge q ql = q ++ p), (merge q ql = q ++ ql), (merge q ql = q ++ pl), (merge q ql = p ++ q), (merge q ql = p ++ p), (merge q ql = p ++ ql)
(merge q ql = p ++ pl), (merge q ql = ql ++ q), (merge q ql = ql ++ p), (merge q ql = ql ++ ql), (merge q ql = ql ++ pl), (merge q ql = pl ++ q), (merge q ql = pl ++ p), (merge q ql = pl ++ ql), (merge q ql = pl ++ pl), (merge q pl = q)
(merge q pl = p), (merge q pl = ql), (merge q pl = pl), (merge q pl = insert a q), (merge q pl = insert a p), (merge q pl = insert a ql), (merge q pl = insert a pl), (merge q pl = insert k q), (merge q pl = insert k p), (merge q pl = insert k ql)
(merge q pl = insert k pl), (merge q pl = maybe_swap q), (merge q pl = maybe_swap p), (merge q pl = maybe_swap ql), (merge q pl = maybe_swap pl), (merge q pl = q ++ q), (merge q pl = q ++ p), (merge q pl = q ++ ql), (merge q pl = q ++ pl), (merge q pl = p ++ q)
(merge q pl = p ++ p), (merge q pl = p ++ ql), (merge q pl = p ++ pl), (merge q pl = ql ++ q), (merge q pl = ql ++ p), (merge q pl = ql ++ ql), (merge q pl = ql ++ pl), (merge q pl = pl ++ q), (merge q pl = pl ++ p), (merge q pl = pl ++ ql)
(merge q pl = pl ++ pl), (merge p q = q), (merge p q = p), (merge p q = ql), (merge p q = pl), (merge p q = insert a q), (merge p q = insert a p), (merge p q = insert a ql), (merge p q = insert a pl), (merge p q = insert k q)
(merge p q = insert k p), (merge p q = insert k ql), (merge p q = insert k pl), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = maybe_swap ql), (merge p q = maybe_swap pl), (merge p q = q ++ q), (merge p q = q ++ p), (merge p q = q ++ ql)
(merge p q = q ++ pl), (merge p q = p ++ q), (merge p q = p ++ p), (merge p q = p ++ ql), (merge p q = p ++ pl), (merge p q = ql ++ q), (merge p q = ql ++ p), (merge p q = ql ++ ql), (merge p q = ql ++ pl), (merge p q = pl ++ q)
(merge p q = pl ++ p), (merge p q = pl ++ ql), (merge p q = pl ++ pl), (merge p p = q), (merge p p = p), (merge p p = ql), (merge p p = pl), (merge p p = insert a q), (merge p p = insert a p), (merge p p = insert a ql)
(merge p p = insert a pl), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert k ql), (merge p p = insert k pl), (merge p p = maybe_swap q), (merge p p = maybe_swap p), (merge p p = maybe_swap ql), (merge p p = maybe_swap pl), (merge p p = q ++ q)
(merge p p = q ++ p), (merge p p = q ++ ql), (merge p p = q ++ pl), (merge p p = p ++ q), (merge p p = p ++ p), (merge p p = p ++ ql), (merge p p = p ++ pl), (merge p p = ql ++ q), (merge p p = ql ++ p), (merge p p = ql ++ ql)
(merge p p = ql ++ pl), (merge p p = pl ++ q), (merge p p = pl ++ p), (merge p p = pl ++ ql), (merge p p = pl ++ pl), (merge p ql = q), (merge p ql = p), (merge p ql = ql), (merge p ql = pl), (merge p ql = insert a q)
(merge p ql = insert a p), (merge p ql = insert a ql), (merge p ql = insert a pl), (merge p ql = insert k q), (merge p ql = insert k p), (merge p ql = insert k ql), (merge p ql = insert k pl), (merge p ql = maybe_swap q), (merge p ql = maybe_swap p), (merge p ql = maybe_swap ql)
(merge p ql = maybe_swap pl), (merge p ql = q ++ q), (merge p ql = q ++ p), (merge p ql = q ++ ql), (merge p ql = q ++ pl), (merge p ql = p ++ q), (merge p ql = p ++ p), (merge p ql = p ++ ql), (merge p ql = p ++ pl), (merge p ql = ql ++ q)
(merge p ql = ql ++ p), (merge p ql = ql ++ ql), (merge p ql = ql ++ pl), (merge p ql = pl ++ q), (merge p ql = pl ++ p), (merge p ql = pl ++ ql), (merge p ql = pl ++ pl), (merge p pl = q), (merge p pl = p), (merge p pl = ql)
(merge p pl = pl), (merge p pl = insert a q), (merge p pl = insert a p), (merge p pl = insert a ql), (merge p pl = insert a pl), (merge p pl = insert k q), (merge p pl = insert k p), (merge p pl = insert k ql), (merge p pl = insert k pl), (merge p pl = maybe_swap q)
(merge p pl = maybe_swap p), (merge p pl = maybe_swap ql), (merge p pl = maybe_swap pl), (merge p pl = q ++ q), (merge p pl = q ++ p), (merge p pl = q ++ ql), (merge p pl = q ++ pl), (merge p pl = p ++ q), (merge p pl = p ++ p), (merge p pl = p ++ ql)
(merge p pl = p ++ pl), (merge p pl = ql ++ q), (merge p pl = ql ++ p), (merge p pl = ql ++ ql), (merge p pl = ql ++ pl), (merge p pl = pl ++ q), (merge p pl = pl ++ p), (merge p pl = pl ++ ql), (merge p pl = pl ++ pl), (merge ql q = q)
(merge ql q = p), (merge ql q = ql), (merge ql q = pl), (merge ql q = insert a q), (merge ql q = insert a p), (merge ql q = insert a ql), (merge ql q = insert a pl), (merge ql q = insert k q), (merge ql q = insert k p), (merge ql q = insert k ql)
(merge ql q = insert k pl), (merge ql q = maybe_swap q), (merge ql q = maybe_swap p), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap pl), (merge ql q = q ++ q), (merge ql q = q ++ p), (merge ql q = q ++ ql), (merge ql q = q ++ pl), (merge ql q = p ++ q)
(merge ql q = p ++ p), (merge ql q = p ++ ql), (merge ql q = p ++ pl), (merge ql q = ql ++ q), (merge ql q = ql ++ p), (merge ql q = ql ++ ql), (merge ql q = ql ++ pl), (merge ql q = pl ++ q), (merge ql q = pl ++ p), (merge ql q = pl ++ ql)
(merge ql q = pl ++ pl), (merge ql p = q), (merge ql p = p), (merge ql p = ql), (merge ql p = pl), (merge ql p = insert a q), (merge ql p = insert a p), (merge ql p = insert a ql), (merge ql p = insert a pl), (merge ql p = insert k q)
(merge ql p = insert k p), (merge ql p = insert k ql), (merge ql p = insert k pl), (merge ql p = maybe_swap q), (merge ql p = maybe_swap p), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap pl), (merge ql p = q ++ q), (merge ql p = q ++ p), (merge ql p = q ++ ql)
(merge ql p = q ++ pl), (merge ql p = p ++ q), (merge ql p = p ++ p), (merge ql p = p ++ ql), (merge ql p = p ++ pl), (merge ql p = ql ++ q), (merge ql p = ql ++ p), (merge ql p = ql ++ ql), (merge ql p = ql ++ pl), (merge ql p = pl ++ q)
(merge ql p = pl ++ p), (merge ql p = pl ++ ql), (merge ql p = pl ++ pl), (merge ql ql = q), (merge ql ql = p), (merge ql ql = ql), (merge ql ql = pl), (merge ql ql = insert a q), (merge ql ql = insert a p), (merge ql ql = insert a ql)
(merge ql ql = insert a pl), (merge ql ql = insert k q), (merge ql ql = insert k p), (merge ql ql = insert k ql), (merge ql ql = insert k pl), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap p), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap pl), (merge ql ql = q ++ q)
(merge ql ql = q ++ p), (merge ql ql = q ++ ql), (merge ql ql = q ++ pl), (merge ql ql = p ++ q), (merge ql ql = p ++ p), (merge ql ql = p ++ ql), (merge ql ql = p ++ pl), (merge ql ql = ql ++ q), (merge ql ql = ql ++ p), (merge ql ql = ql ++ ql)
(merge ql ql = ql ++ pl), (merge ql ql = pl ++ q), (merge ql ql = pl ++ p), (merge ql ql = pl ++ ql), (merge ql ql = pl ++ pl), (merge ql pl = q), (merge ql pl = p), (merge ql pl = ql), (merge ql pl = pl), (merge ql pl = insert a q)
(merge ql pl = insert a p), (merge ql pl = insert a ql), (merge ql pl = insert a pl), (merge ql pl = insert k q), (merge ql pl = insert k p), (merge ql pl = insert k ql), (merge ql pl = insert k pl), (merge ql pl = maybe_swap q), (merge ql pl = maybe_swap p), (merge ql pl = maybe_swap ql)
(merge ql pl = maybe_swap pl), (merge ql pl = q ++ q), (merge ql pl = q ++ p), (merge ql pl = q ++ ql), (merge ql pl = q ++ pl), (merge ql pl = p ++ q), (merge ql pl = p ++ p), (merge ql pl = p ++ ql), (merge ql pl = p ++ pl), (merge ql pl = ql ++ q)
(merge ql pl = ql ++ p), (merge ql pl = ql ++ ql), (merge ql pl = ql ++ pl), (merge ql pl = pl ++ q), (merge ql pl = pl ++ p), (merge ql pl = pl ++ ql), (merge ql pl = pl ++ pl), (merge pl q = q), (merge pl q = p), (merge pl q = ql)
(merge pl q = pl), (merge pl q = insert a q), (merge pl q = insert a p), (merge pl q = insert a ql), (merge pl q = insert a pl), (merge pl q = insert k q), (merge pl q = insert k p), (merge pl q = insert k ql), (merge pl q = insert k pl), (merge pl q = maybe_swap q)
(merge pl q = maybe_swap p), (merge pl q = maybe_swap ql), (merge pl q = maybe_swap pl), (merge pl q = q ++ q), (merge pl q = q ++ p), (merge pl q = q ++ ql), (merge pl q = q ++ pl), (merge pl q = p ++ q), (merge pl q = p ++ p), (merge pl q = p ++ ql)
(merge pl q = p ++ pl), (merge pl q = ql ++ q), (merge pl q = ql ++ p), (merge pl q = ql ++ ql), (merge pl q = ql ++ pl), (merge pl q = pl ++ q), (merge pl q = pl ++ p), (merge pl q = pl ++ ql), (merge pl q = pl ++ pl), (merge pl p = q)
(merge pl p = p), (merge pl p = ql), (merge pl p = pl), (merge pl p = insert a q), (merge pl p = insert a p), (merge pl p = insert a ql), (merge pl p = insert a pl), (merge pl p = insert k q), (merge pl p = insert k p), (merge pl p = insert k ql)
(merge pl p = insert k pl), (merge pl p = maybe_swap q), (merge pl p = maybe_swap p), (merge pl p = maybe_swap ql), (merge pl p = maybe_swap pl), (merge pl p = q ++ q), (merge pl p = q ++ p), (merge pl p = q ++ ql), (merge pl p = q ++ pl), (merge pl p = p ++ q)
(merge pl p = p ++ p), (merge pl p = p ++ ql), (merge pl p = p ++ pl), (merge pl p = ql ++ q), (merge pl p = ql ++ p), (merge pl p = ql ++ ql), (merge pl p = ql ++ pl), (merge pl p = pl ++ q), (merge pl p = pl ++ p), (merge pl p = pl ++ ql)
(merge pl p = pl ++ pl), (merge pl ql = q), (merge pl ql = p), (merge pl ql = ql), (merge pl ql = pl), (merge pl ql = insert a q), (merge pl ql = insert a p), (merge pl ql = insert a ql), (merge pl ql = insert a pl), (merge pl ql = insert k q)
(merge pl ql = insert k p), (merge pl ql = insert k ql), (merge pl ql = insert k pl), (merge pl ql = maybe_swap q), (merge pl ql = maybe_swap p), (merge pl ql = maybe_swap ql), (merge pl ql = maybe_swap pl), (merge pl ql = q ++ q), (merge pl ql = q ++ p), (merge pl ql = q ++ ql)
(merge pl ql = q ++ pl), (merge pl ql = p ++ q), (merge pl ql = p ++ p), (merge pl ql = p ++ ql), (merge pl ql = p ++ pl), (merge pl ql = ql ++ q), (merge pl ql = ql ++ p), (merge pl ql = ql ++ ql), (merge pl ql = ql ++ pl), (merge pl ql = pl ++ q)
(merge pl ql = pl ++ p), (merge pl ql = pl ++ ql), (merge pl ql = pl ++ pl), (merge pl pl = q), (merge pl pl = p), (merge pl pl = ql), (merge pl pl = pl), (merge pl pl = insert a q), (merge pl pl = insert a p), (merge pl pl = insert a ql)
(merge pl pl = insert a pl), (merge pl pl = insert k q), (merge pl pl = insert k p), (merge pl pl = insert k ql), (merge pl pl = insert k pl), (merge pl pl = maybe_swap q), (merge pl pl = maybe_swap p), (merge pl pl = maybe_swap ql), (merge pl pl = maybe_swap pl), (merge pl pl = q ++ q)
(merge pl pl = q ++ p), (merge pl pl = q ++ ql), (merge pl pl = q ++ pl), (merge pl pl = p ++ q), (merge pl pl = p ++ p), (merge pl pl = p ++ ql), (merge pl pl = p ++ pl), (merge pl pl = ql ++ q), (merge pl pl = ql ++ p), (merge pl pl = ql ++ ql)
(merge pl pl = ql ++ pl), (merge pl pl = pl ++ q), (merge pl pl = pl ++ p), (merge pl pl = pl ++ ql), (merge pl pl = pl ++ pl), (insert a q = q), (insert a q = p), (insert a q = ql), (insert a q = pl), (insert a q = q ++ q)
(insert a q = q ++ p), (insert a q = q ++ ql), (insert a q = q ++ pl), (insert a q = p ++ q), (insert a q = p ++ p), (insert a q = p ++ ql), (insert a q = p ++ pl), (insert a q = ql ++ q), (insert a q = ql ++ p), (insert a q = ql ++ ql)
(insert a q = ql ++ pl), (insert a q = pl ++ q), (insert a q = pl ++ p), (insert a q = pl ++ ql), (insert a q = pl ++ pl), (insert a p = q), (insert a p = p), (insert a p = ql), (insert a p = pl), (insert a p = q ++ q)
(insert a p = q ++ p), (insert a p = q ++ ql), (insert a p = q ++ pl), (insert a p = p ++ q), (insert a p = p ++ p), (insert a p = p ++ ql), (insert a p = p ++ pl), (insert a p = ql ++ q), (insert a p = ql ++ p), (insert a p = ql ++ ql)
(insert a p = ql ++ pl), (insert a p = pl ++ q), (insert a p = pl ++ p), (insert a p = pl ++ ql), (insert a p = pl ++ pl), (insert a ql = q), (insert a ql = p), (insert a ql = ql), (insert a ql = pl), (insert a ql = q ++ q)
(insert a ql = q ++ p), (insert a ql = q ++ ql), (insert a ql = q ++ pl), (insert a ql = p ++ q), (insert a ql = p ++ p), (insert a ql = p ++ ql), (insert a ql = p ++ pl), (insert a ql = ql ++ q), (insert a ql = ql ++ p), (insert a ql = ql ++ ql)
(insert a ql = ql ++ pl), (insert a ql = pl ++ q), (insert a ql = pl ++ p), (insert a ql = pl ++ ql), (insert a ql = pl ++ pl), (insert a pl = q), (insert a pl = p), (insert a pl = ql), (insert a pl = pl), (insert a pl = q ++ q)
(insert a pl = q ++ p), (insert a pl = q ++ ql), (insert a pl = q ++ pl), (insert a pl = p ++ q), (insert a pl = p ++ p), (insert a pl = p ++ ql), (insert a pl = p ++ pl), (insert a pl = ql ++ q), (insert a pl = ql ++ p), (insert a pl = ql ++ ql)
(insert a pl = ql ++ pl), (insert a pl = pl ++ q), (insert a pl = pl ++ p), (insert a pl = pl ++ ql), (insert a pl = pl ++ pl), (insert k q = q), (insert k q = p), (insert k q = ql), (insert k q = pl), (insert k q = q ++ q)
(insert k q = q ++ p), (insert k q = q ++ ql), (insert k q = q ++ pl), (insert k q = p ++ q), (insert k q = p ++ p), (insert k q = p ++ ql), (insert k q = p ++ pl), (insert k q = ql ++ q), (insert k q = ql ++ p), (insert k q = ql ++ ql)
(insert k q = ql ++ pl), (insert k q = pl ++ q), (insert k q = pl ++ p), (insert k q = pl ++ ql), (insert k q = pl ++ pl), (insert k p = q), (insert k p = p), (insert k p = ql), (insert k p = pl), (insert k p = q ++ q)
(insert k p = q ++ p), (insert k p = q ++ ql), (insert k p = q ++ pl), (insert k p = p ++ q), (insert k p = p ++ p), (insert k p = p ++ ql), (insert k p = p ++ pl), (insert k p = ql ++ q), (insert k p = ql ++ p), (insert k p = ql ++ ql)
(insert k p = ql ++ pl), (insert k p = pl ++ q), (insert k p = pl ++ p), (insert k p = pl ++ ql), (insert k p = pl ++ pl), (insert k ql = q), (insert k ql = p), (insert k ql = ql), (insert k ql = pl), (insert k ql = q ++ q)
(insert k ql = q ++ p), (insert k ql = q ++ ql), (insert k ql = q ++ pl), (insert k ql = p ++ q), (insert k ql = p ++ p), (insert k ql = p ++ ql), (insert k ql = p ++ pl), (insert k ql = ql ++ q), (insert k ql = ql ++ p), (insert k ql = ql ++ ql)
(insert k ql = ql ++ pl), (insert k ql = pl ++ q), (insert k ql = pl ++ p), (insert k ql = pl ++ ql), (insert k ql = pl ++ pl), (insert k pl = q), (insert k pl = p), (insert k pl = ql), (insert k pl = pl), (insert k pl = q ++ q)
(insert k pl = q ++ p), (insert k pl = q ++ ql), (insert k pl = q ++ pl), (insert k pl = p ++ q), (insert k pl = p ++ p), (insert k pl = p ++ ql), (insert k pl = p ++ pl), (insert k pl = ql ++ q), (insert k pl = ql ++ p), (insert k pl = ql ++ ql)
(insert k pl = ql ++ pl), (insert k pl = pl ++ q), (insert k pl = pl ++ p), (insert k pl = pl ++ ql), (insert k pl = pl ++ pl), (maybe_swap q = q), (maybe_swap q = p), (maybe_swap q = ql), (maybe_swap q = pl), (maybe_swap q = insert a q)
(maybe_swap q = insert a p), (maybe_swap q = insert a ql), (maybe_swap q = insert a pl), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert k ql), (maybe_swap q = insert k pl), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = q ++ ql)
(maybe_swap q = q ++ pl), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ pl), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ p), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ pl), (maybe_swap q = pl ++ q)
(maybe_swap q = pl ++ p), (maybe_swap q = pl ++ ql), (maybe_swap q = pl ++ pl), (maybe_swap p = q), (maybe_swap p = p), (maybe_swap p = ql), (maybe_swap p = pl), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = insert a ql)
(maybe_swap p = insert a pl), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert k ql), (maybe_swap p = insert k pl), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ pl), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ p), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ pl), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ p), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ pl), (maybe_swap p = pl ++ q), (maybe_swap p = pl ++ p), (maybe_swap p = pl ++ ql)
(maybe_swap p = pl ++ pl), (maybe_swap ql = q), (maybe_swap ql = p), (maybe_swap ql = ql), (maybe_swap ql = pl), (maybe_swap ql = insert a q), (maybe_swap ql = insert a p), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a pl), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k p), (maybe_swap ql = insert k ql), (maybe_swap ql = insert k pl), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ p), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ pl), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ p), (maybe_swap ql = p ++ ql)
(maybe_swap ql = p ++ pl), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ p), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ pl), (maybe_swap ql = pl ++ q), (maybe_swap ql = pl ++ p), (maybe_swap ql = pl ++ ql), (maybe_swap ql = pl ++ pl), (maybe_swap pl = q)
(maybe_swap pl = p), (maybe_swap pl = ql), (maybe_swap pl = pl), (maybe_swap pl = insert a q), (maybe_swap pl = insert a p), (maybe_swap pl = insert a ql), (maybe_swap pl = insert a pl), (maybe_swap pl = insert k q), (maybe_swap pl = insert k p), (maybe_swap pl = insert k ql)
(maybe_swap pl = insert k pl), (maybe_swap pl = q ++ q), (maybe_swap pl = q ++ p), (maybe_swap pl = q ++ ql), (maybe_swap pl = q ++ pl), (maybe_swap pl = p ++ q), (maybe_swap pl = p ++ p), (maybe_swap pl = p ++ ql), (maybe_swap pl = p ++ pl), (maybe_swap pl = ql ++ q)
(maybe_swap pl = ql ++ p), (maybe_swap pl = ql ++ ql), (maybe_swap pl = ql ++ pl), (maybe_swap pl = pl ++ q), (maybe_swap pl = pl ++ p), (maybe_swap pl = pl ++ ql), (maybe_swap pl = pl ++ pl), (q ++ q = q), (q ++ q = p), (q ++ q = ql)
(q ++ q = pl), (q ++ p = q), (q ++ p = p), (q ++ p = ql), (q ++ p = pl), (q ++ ql = q), (q ++ ql = p), (q ++ ql = ql), (q ++ ql = pl), (q ++ pl = q)
(q ++ pl = p), (q ++ pl = ql), (q ++ pl = pl), (p ++ q = q), (p ++ q = p), (p ++ q = ql), (p ++ q = pl), (p ++ p = q), (p ++ p = p), (p ++ p = ql)
(p ++ p = pl), (p ++ ql = q), (p ++ ql = p), (p ++ ql = ql), (p ++ ql = pl), (p ++ pl = q), (p ++ pl = p), (p ++ pl = ql), (p ++ pl = pl), (ql ++ q = q)
(ql ++ q = p), (ql ++ q = ql), (ql ++ q = pl), (ql ++ p = q), (ql ++ p = p), (ql ++ p = ql), (ql ++ p = pl), (ql ++ ql = q), (ql ++ ql = p), (ql ++ ql = ql)
(ql ++ ql = pl), (ql ++ pl = q), (ql ++ pl = p), (ql ++ pl = ql), (ql ++ pl = pl), (pl ++ q = q), (pl ++ q = p), (pl ++ q = ql), (pl ++ q = pl), (pl ++ p = q)
(pl ++ p = p), (pl ++ p = ql), (pl ++ p = pl), (pl ++ ql = q), (pl ++ ql = p), (pl ++ ql = ql), (pl ++ ql = pl), (pl ++ pl = q), (pl ++ pl = p), (pl ++ pl = ql)
(pl ++ pl = pl), ([] = q), ([] = p), ([] = ql), ([] = pl), ([] = merge q q), ([] = merge q p), ([] = merge q ql), ([] = merge q pl), ([] = merge p q)
([] = merge p p), ([] = merge p ql), ([] = merge p pl), ([] = merge ql q), ([] = merge ql p), ([] = merge ql ql), ([] = merge ql pl), ([] = merge pl q), ([] = merge pl p), ([] = merge pl ql)
([] = merge pl pl), ([] = insert a q), ([] = insert a p), ([] = insert a ql), ([] = insert a pl), ([] = insert k q), ([] = insert k p), ([] = insert k ql), ([] = insert k pl), ([] = maybe_swap q)
([] = maybe_swap p), ([] = maybe_swap ql), ([] = maybe_swap pl), ([] = q ++ q), ([] = q ++ p), ([] = q ++ ql), ([] = q ++ pl), ([] = p ++ q), ([] = p ++ p), ([] = p ++ ql)
([] = p ++ pl), ([] = ql ++ q), ([] = ql ++ p), ([] = ql ++ ql), ([] = ql ++ pl), ([] = pl ++ q), ([] = pl ++ p), ([] = pl ++ ql), ([] = pl ++ pl), (None = Some a)
(None = Some k), ((a, q) = select a q), ((a, q) = select a p), ((a, q) = select a ql), ((a, q) = select a pl), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select k ql), ((a, q) = select k pl), ((a, p) = select a q)
((a, p) = select a p), ((a, p) = select a ql), ((a, p) = select a pl), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select k ql), ((a, p) = select k pl), ((a, ql) = select a q), ((a, ql) = select a p), ((a, ql) = select a ql)
((a, ql) = select a pl), ((a, ql) = select k q), ((a, ql) = select k p), ((a, ql) = select k ql), ((a, ql) = select k pl), ((a, pl) = select a q), ((a, pl) = select a p), ((a, pl) = select a ql), ((a, pl) = select a pl), ((a, pl) = select k q)
((a, pl) = select k p), ((a, pl) = select k ql), ((a, pl) = select k pl), ((k, q) = select a q), ((k, q) = select a p), ((k, q) = select a ql), ((k, q) = select a pl), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select k ql)
((k, q) = select k pl), ((k, p) = select a q), ((k, p) = select a p), ((k, p) = select a ql), ((k, p) = select a pl), ((k, p) = select k q), ((k, p) = select k p), ((k, p) = select k ql), ((k, p) = select k pl), ((k, ql) = select a q)
((k, ql) = select a p), ((k, ql) = select a ql), ((k, ql) = select a pl), ((k, ql) = select k q), ((k, ql) = select k p), ((k, ql) = select k ql), ((k, ql) = select k pl), ((k, pl) = select a q), ((k, pl) = select a p), ((k, pl) = select a ql)
((k, pl) = select a pl), ((k, pl) = select k q), ((k, pl) = select k p), ((k, pl) = select k ql), ((k, pl) = select k pl), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (k >=? k)), ((a >? k) = (a >=? a))
((a >? k) = (a >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (k >=? k)), ((k >? a) = (a >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (k >=? k)), ((k >? k) = (a >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (k >=? a))
((k >? k) = (k >=? k)), (length q = a), (length q = k), (length p = a), (length p = k), (length ql = a), (length ql = k), (length pl = a), (length pl = k)

Label: 3 (3)
(Abs ql ql), (Abs ql q), (Abs ql p), (Abs ql gv0), (Abs ql pl), (Abs q ql), (Abs q q), (Abs q p), (Abs q gv0), (Abs q pl)
(Abs p ql), (Abs p q), (Abs p p), (Abs p gv0), (Abs p pl), (Abs gv0 ql), (Abs gv0 q), (Abs gv0 p), (Abs gv0 gv0), (Abs gv0 pl)
(Abs pl ql), (Abs pl q), (Abs pl p), (Abs pl gv0), (Abs pl pl), (priq ql), (priq q), (priq p), (priq gv0), (priq pl)
(Permutation ql ql), (Permutation ql q), (Permutation ql p), (Permutation ql gv0), (Permutation ql pl), (Permutation q ql), (Permutation q q), (Permutation q p), (Permutation q gv0), (Permutation q pl)
(Permutation p ql), (Permutation p q), (Permutation p p), (Permutation p gv0), (Permutation p pl), (Permutation gv0 ql), (Permutation gv0 q), (Permutation gv0 p), (Permutation gv0 gv0), (Permutation gv0 pl)
(Permutation pl ql), (Permutation pl q), (Permutation pl p), (Permutation pl gv0), (Permutation pl pl), (In k ql), (In k q), (In k p), (In k gv0), (In k pl)
(In a ql), (In a q), (In a p), (In a gv0), (In a pl), (k < k), (k < a), (a < k), (a < a), (k <= k)
(k <= a), (a <= k), (a <= a), (k = k), (k = a), (a = k), (a = a), (ql = ql), (ql = q), (ql = p)
(ql = gv0), (ql = pl), (q = ql), (q = q), (q = p), (q = gv0), (q = pl), (p = ql), (p = q), (p = p)
(p = gv0), (p = pl), (gv0 = ql), (gv0 = q), (gv0 = p), (gv0 = gv0), (gv0 = pl), (pl = ql), (pl = q), (pl = p)
(pl = gv0), (pl = pl), (false = (k >? k)), (false = (k >? a)), (false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a))
(true = (k >? k)), (true = (k >? a)), (true = (a >? k)), (true = (a >? a)), (true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs ql (k :: ql)), (Abs ql (k :: q))
(Abs ql (k :: p)), (Abs ql (k :: gv0)), (Abs ql (k :: pl)), (Abs ql (a :: ql)), (Abs ql (a :: q)), (Abs ql (a :: p)), (Abs ql (a :: gv0)), (Abs ql (a :: pl)), (Abs ql (merge ql ql)), (Abs ql (merge ql q))
(Abs ql (merge ql p)), (Abs ql (merge ql gv0)), (Abs ql (merge ql pl)), (Abs ql (merge q ql)), (Abs ql (merge q q)), (Abs ql (merge q p)), (Abs ql (merge q gv0)), (Abs ql (merge q pl)), (Abs ql (merge p ql)), (Abs ql (merge p q))
(Abs ql (merge p p)), (Abs ql (merge p gv0)), (Abs ql (merge p pl)), (Abs ql (merge gv0 ql)), (Abs ql (merge gv0 q)), (Abs ql (merge gv0 p)), (Abs ql (merge gv0 gv0)), (Abs ql (merge gv0 pl)), (Abs ql (merge pl ql)), (Abs ql (merge pl q))
(Abs ql (merge pl p)), (Abs ql (merge pl gv0)), (Abs ql (merge pl pl)), (Abs ql (insert k ql)), (Abs ql (insert k q)), (Abs ql (insert k p)), (Abs ql (insert k gv0)), (Abs ql (insert k pl)), (Abs ql (insert a ql)), (Abs ql (insert a q))
(Abs ql (insert a p)), (Abs ql (insert a gv0)), (Abs ql (insert a pl)), (Abs ql (maybe_swap ql)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap p)), (Abs ql (maybe_swap gv0)), (Abs ql (maybe_swap pl)), (Abs ql (ql ++ ql)), (Abs ql (ql ++ q))
(Abs ql (ql ++ p)), (Abs ql (ql ++ gv0)), (Abs ql (ql ++ pl)), (Abs ql (q ++ ql)), (Abs ql (q ++ q)), (Abs ql (q ++ p)), (Abs ql (q ++ gv0)), (Abs ql (q ++ pl)), (Abs ql (p ++ ql)), (Abs ql (p ++ q))
(Abs ql (p ++ p)), (Abs ql (p ++ gv0)), (Abs ql (p ++ pl)), (Abs ql (gv0 ++ ql)), (Abs ql (gv0 ++ q)), (Abs ql (gv0 ++ p)), (Abs ql (gv0 ++ gv0)), (Abs ql (gv0 ++ pl)), (Abs ql (pl ++ ql)), (Abs ql (pl ++ q))
(Abs ql (pl ++ p)), (Abs ql (pl ++ gv0)), (Abs ql (pl ++ pl)), (Abs ql []), (Abs q (k :: ql)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (k :: gv0)), (Abs q (k :: pl)), (Abs q (a :: ql))
(Abs q (a :: q)), (Abs q (a :: p)), (Abs q (a :: gv0)), (Abs q (a :: pl)), (Abs q (merge ql ql)), (Abs q (merge ql q)), (Abs q (merge ql p)), (Abs q (merge ql gv0)), (Abs q (merge ql pl)), (Abs q (merge q ql))
(Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge q gv0)), (Abs q (merge q pl)), (Abs q (merge p ql)), (Abs q (merge p q)), (Abs q (merge p p)), (Abs q (merge p gv0)), (Abs q (merge p pl)), (Abs q (merge gv0 ql))
(Abs q (merge gv0 q)), (Abs q (merge gv0 p)), (Abs q (merge gv0 gv0)), (Abs q (merge gv0 pl)), (Abs q (merge pl ql)), (Abs q (merge pl q)), (Abs q (merge pl p)), (Abs q (merge pl gv0)), (Abs q (merge pl pl)), (Abs q (insert k ql))
(Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert k gv0)), (Abs q (insert k pl)), (Abs q (insert a ql)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (insert a gv0)), (Abs q (insert a pl)), (Abs q (maybe_swap ql))
(Abs q (maybe_swap q)), (Abs q (maybe_swap p)), (Abs q (maybe_swap gv0)), (Abs q (maybe_swap pl)), (Abs q (ql ++ ql)), (Abs q (ql ++ q)), (Abs q (ql ++ p)), (Abs q (ql ++ gv0)), (Abs q (ql ++ pl)), (Abs q (q ++ ql))
(Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (q ++ gv0)), (Abs q (q ++ pl)), (Abs q (p ++ ql)), (Abs q (p ++ q)), (Abs q (p ++ p)), (Abs q (p ++ gv0)), (Abs q (p ++ pl)), (Abs q (gv0 ++ ql))
(Abs q (gv0 ++ q)), (Abs q (gv0 ++ p)), (Abs q (gv0 ++ gv0)), (Abs q (gv0 ++ pl)), (Abs q (pl ++ ql)), (Abs q (pl ++ q)), (Abs q (pl ++ p)), (Abs q (pl ++ gv0)), (Abs q (pl ++ pl)), (Abs q [])
(Abs p (k :: ql)), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (k :: gv0)), (Abs p (k :: pl)), (Abs p (a :: ql)), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (a :: gv0)), (Abs p (a :: pl))
(Abs p (merge ql ql)), (Abs p (merge ql q)), (Abs p (merge ql p)), (Abs p (merge ql gv0)), (Abs p (merge ql pl)), (Abs p (merge q ql)), (Abs p (merge q q)), (Abs p (merge q p)), (Abs p (merge q gv0)), (Abs p (merge q pl))
(Abs p (merge p ql)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (merge p gv0)), (Abs p (merge p pl)), (Abs p (merge gv0 ql)), (Abs p (merge gv0 q)), (Abs p (merge gv0 p)), (Abs p (merge gv0 gv0)), (Abs p (merge gv0 pl))
(Abs p (merge pl ql)), (Abs p (merge pl q)), (Abs p (merge pl p)), (Abs p (merge pl gv0)), (Abs p (merge pl pl)), (Abs p (insert k ql)), (Abs p (insert k q)), (Abs p (insert k p)), (Abs p (insert k gv0)), (Abs p (insert k pl))
(Abs p (insert a ql)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (insert a gv0)), (Abs p (insert a pl)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (maybe_swap gv0)), (Abs p (maybe_swap pl))
(Abs p (ql ++ ql)), (Abs p (ql ++ q)), (Abs p (ql ++ p)), (Abs p (ql ++ gv0)), (Abs p (ql ++ pl)), (Abs p (q ++ ql)), (Abs p (q ++ q)), (Abs p (q ++ p)), (Abs p (q ++ gv0)), (Abs p (q ++ pl))
(Abs p (p ++ ql)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p (p ++ gv0)), (Abs p (p ++ pl)), (Abs p (gv0 ++ ql)), (Abs p (gv0 ++ q)), (Abs p (gv0 ++ p)), (Abs p (gv0 ++ gv0)), (Abs p (gv0 ++ pl))
(Abs p (pl ++ ql)), (Abs p (pl ++ q)), (Abs p (pl ++ p)), (Abs p (pl ++ gv0)), (Abs p (pl ++ pl)), (Abs p []), (Abs gv0 (k :: ql)), (Abs gv0 (k :: q)), (Abs gv0 (k :: p)), (Abs gv0 (k :: gv0))
(Abs gv0 (k :: pl)), (Abs gv0 (a :: ql)), (Abs gv0 (a :: q)), (Abs gv0 (a :: p)), (Abs gv0 (a :: gv0)), (Abs gv0 (a :: pl)), (Abs gv0 (merge ql ql)), (Abs gv0 (merge ql q)), (Abs gv0 (merge ql p)), (Abs gv0 (merge ql gv0))
(Abs gv0 (merge ql pl)), (Abs gv0 (merge q ql)), (Abs gv0 (merge q q)), (Abs gv0 (merge q p)), (Abs gv0 (merge q gv0)), (Abs gv0 (merge q pl)), (Abs gv0 (merge p ql)), (Abs gv0 (merge p q)), (Abs gv0 (merge p p)), (Abs gv0 (merge p gv0))
(Abs gv0 (merge p pl)), (Abs gv0 (merge gv0 ql)), (Abs gv0 (merge gv0 q)), (Abs gv0 (merge gv0 p)), (Abs gv0 (merge gv0 gv0)), (Abs gv0 (merge gv0 pl)), (Abs gv0 (merge pl ql)), (Abs gv0 (merge pl q)), (Abs gv0 (merge pl p)), (Abs gv0 (merge pl gv0))
(Abs gv0 (merge pl pl)), (Abs gv0 (insert k ql)), (Abs gv0 (insert k q)), (Abs gv0 (insert k p)), (Abs gv0 (insert k gv0)), (Abs gv0 (insert k pl)), (Abs gv0 (insert a ql)), (Abs gv0 (insert a q)), (Abs gv0 (insert a p)), (Abs gv0 (insert a gv0))
(Abs gv0 (insert a pl)), (Abs gv0 (maybe_swap ql)), (Abs gv0 (maybe_swap q)), (Abs gv0 (maybe_swap p)), (Abs gv0 (maybe_swap gv0)), (Abs gv0 (maybe_swap pl)), (Abs gv0 (ql ++ ql)), (Abs gv0 (ql ++ q)), (Abs gv0 (ql ++ p)), (Abs gv0 (ql ++ gv0))
(Abs gv0 (ql ++ pl)), (Abs gv0 (q ++ ql)), (Abs gv0 (q ++ q)), (Abs gv0 (q ++ p)), (Abs gv0 (q ++ gv0)), (Abs gv0 (q ++ pl)), (Abs gv0 (p ++ ql)), (Abs gv0 (p ++ q)), (Abs gv0 (p ++ p)), (Abs gv0 (p ++ gv0))
(Abs gv0 (p ++ pl)), (Abs gv0 (gv0 ++ ql)), (Abs gv0 (gv0 ++ q)), (Abs gv0 (gv0 ++ p)), (Abs gv0 (gv0 ++ gv0)), (Abs gv0 (gv0 ++ pl)), (Abs gv0 (pl ++ ql)), (Abs gv0 (pl ++ q)), (Abs gv0 (pl ++ p)), (Abs gv0 (pl ++ gv0))
(Abs gv0 (pl ++ pl)), (Abs gv0 []), (Abs pl (k :: ql)), (Abs pl (k :: q)), (Abs pl (k :: p)), (Abs pl (k :: gv0)), (Abs pl (k :: pl)), (Abs pl (a :: ql)), (Abs pl (a :: q)), (Abs pl (a :: p))
(Abs pl (a :: gv0)), (Abs pl (a :: pl)), (Abs pl (merge ql ql)), (Abs pl (merge ql q)), (Abs pl (merge ql p)), (Abs pl (merge ql gv0)), (Abs pl (merge ql pl)), (Abs pl (merge q ql)), (Abs pl (merge q q)), (Abs pl (merge q p))
(Abs pl (merge q gv0)), (Abs pl (merge q pl)), (Abs pl (merge p ql)), (Abs pl (merge p q)), (Abs pl (merge p p)), (Abs pl (merge p gv0)), (Abs pl (merge p pl)), (Abs pl (merge gv0 ql)), (Abs pl (merge gv0 q)), (Abs pl (merge gv0 p))
(Abs pl (merge gv0 gv0)), (Abs pl (merge gv0 pl)), (Abs pl (merge pl ql)), (Abs pl (merge pl q)), (Abs pl (merge pl p)), (Abs pl (merge pl gv0)), (Abs pl (merge pl pl)), (Abs pl (insert k ql)), (Abs pl (insert k q)), (Abs pl (insert k p))
(Abs pl (insert k gv0)), (Abs pl (insert k pl)), (Abs pl (insert a ql)), (Abs pl (insert a q)), (Abs pl (insert a p)), (Abs pl (insert a gv0)), (Abs pl (insert a pl)), (Abs pl (maybe_swap ql)), (Abs pl (maybe_swap q)), (Abs pl (maybe_swap p))
(Abs pl (maybe_swap gv0)), (Abs pl (maybe_swap pl)), (Abs pl (ql ++ ql)), (Abs pl (ql ++ q)), (Abs pl (ql ++ p)), (Abs pl (ql ++ gv0)), (Abs pl (ql ++ pl)), (Abs pl (q ++ ql)), (Abs pl (q ++ q)), (Abs pl (q ++ p))
(Abs pl (q ++ gv0)), (Abs pl (q ++ pl)), (Abs pl (p ++ ql)), (Abs pl (p ++ q)), (Abs pl (p ++ p)), (Abs pl (p ++ gv0)), (Abs pl (p ++ pl)), (Abs pl (gv0 ++ ql)), (Abs pl (gv0 ++ q)), (Abs pl (gv0 ++ p))
(Abs pl (gv0 ++ gv0)), (Abs pl (gv0 ++ pl)), (Abs pl (pl ++ ql)), (Abs pl (pl ++ q)), (Abs pl (pl ++ p)), (Abs pl (pl ++ gv0)), (Abs pl (pl ++ pl)), (Abs pl []), (Abs (k :: ql) ql), (Abs (k :: ql) q)
(Abs (k :: ql) p), (Abs (k :: ql) gv0), (Abs (k :: ql) pl), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (k :: gv0)), (Abs (k :: ql) (k :: pl)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: p))
(Abs (k :: ql) (a :: gv0)), (Abs (k :: ql) (a :: pl)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge ql gv0)), (Abs (k :: ql) (merge ql pl)), (Abs (k :: ql) (merge q ql)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q p))
(Abs (k :: ql) (merge q gv0)), (Abs (k :: ql) (merge q pl)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (merge p gv0)), (Abs (k :: ql) (merge p pl)), (Abs (k :: ql) (merge gv0 ql)), (Abs (k :: ql) (merge gv0 q)), (Abs (k :: ql) (merge gv0 p))
(Abs (k :: ql) (merge gv0 gv0)), (Abs (k :: ql) (merge gv0 pl)), (Abs (k :: ql) (merge pl ql)), (Abs (k :: ql) (merge pl q)), (Abs (k :: ql) (merge pl p)), (Abs (k :: ql) (merge pl gv0)), (Abs (k :: ql) (merge pl pl)), (Abs (k :: ql) (insert k ql)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k p))
(Abs (k :: ql) (insert k gv0)), (Abs (k :: ql) (insert k pl)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (insert a gv0)), (Abs (k :: ql) (insert a pl)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap p))
(Abs (k :: ql) (maybe_swap gv0)), (Abs (k :: ql) (maybe_swap pl)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (ql ++ gv0)), (Abs (k :: ql) (ql ++ pl)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ p))
(Abs (k :: ql) (q ++ gv0)), (Abs (k :: ql) (q ++ pl)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ q)), (Abs (k :: ql) (p ++ p)), (Abs (k :: ql) (p ++ gv0)), (Abs (k :: ql) (p ++ pl)), (Abs (k :: ql) (gv0 ++ ql)), (Abs (k :: ql) (gv0 ++ q)), (Abs (k :: ql) (gv0 ++ p))
(Abs (k :: ql) (gv0 ++ gv0)), (Abs (k :: ql) (gv0 ++ pl)), (Abs (k :: ql) (pl ++ ql)), (Abs (k :: ql) (pl ++ q)), (Abs (k :: ql) (pl ++ p)), (Abs (k :: ql) (pl ++ gv0)), (Abs (k :: ql) (pl ++ pl)), (Abs (k :: ql) []), (Abs (k :: q) ql), (Abs (k :: q) q)
(Abs (k :: q) p), (Abs (k :: q) gv0), (Abs (k :: q) pl), (Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: gv0)), (Abs (k :: q) (k :: pl)), (Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p))
(Abs (k :: q) (a :: gv0)), (Abs (k :: q) (a :: pl)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge ql gv0)), (Abs (k :: q) (merge ql pl)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q p))
(Abs (k :: q) (merge q gv0)), (Abs (k :: q) (merge q pl)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p gv0)), (Abs (k :: q) (merge p pl)), (Abs (k :: q) (merge gv0 ql)), (Abs (k :: q) (merge gv0 q)), (Abs (k :: q) (merge gv0 p))
(Abs (k :: q) (merge gv0 gv0)), (Abs (k :: q) (merge gv0 pl)), (Abs (k :: q) (merge pl ql)), (Abs (k :: q) (merge pl q)), (Abs (k :: q) (merge pl p)), (Abs (k :: q) (merge pl gv0)), (Abs (k :: q) (merge pl pl)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p))
(Abs (k :: q) (insert k gv0)), (Abs (k :: q) (insert k pl)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a gv0)), (Abs (k :: q) (insert a pl)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap q)), (Abs (k :: q) (maybe_swap p))
(Abs (k :: q) (maybe_swap gv0)), (Abs (k :: q) (maybe_swap pl)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (ql ++ gv0)), (Abs (k :: q) (ql ++ pl)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ p))
(Abs (k :: q) (q ++ gv0)), (Abs (k :: q) (q ++ pl)), (Abs (k :: q) (p ++ ql)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ gv0)), (Abs (k :: q) (p ++ pl)), (Abs (k :: q) (gv0 ++ ql)), (Abs (k :: q) (gv0 ++ q)), (Abs (k :: q) (gv0 ++ p))
(Abs (k :: q) (gv0 ++ gv0)), (Abs (k :: q) (gv0 ++ pl)), (Abs (k :: q) (pl ++ ql)), (Abs (k :: q) (pl ++ q)), (Abs (k :: q) (pl ++ p)), (Abs (k :: q) (pl ++ gv0)), (Abs (k :: q) (pl ++ pl)), (Abs (k :: q) []), (Abs (k :: p) ql), (Abs (k :: p) q)
(Abs (k :: p) p), (Abs (k :: p) gv0), (Abs (k :: p) pl), (Abs (k :: p) (k :: ql)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: gv0)), (Abs (k :: p) (k :: pl)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p))
(Abs (k :: p) (a :: gv0)), (Abs (k :: p) (a :: pl)), (Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql q)), (Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge ql gv0)), (Abs (k :: p) (merge ql pl)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q p))
(Abs (k :: p) (merge q gv0)), (Abs (k :: p) (merge q pl)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p gv0)), (Abs (k :: p) (merge p pl)), (Abs (k :: p) (merge gv0 ql)), (Abs (k :: p) (merge gv0 q)), (Abs (k :: p) (merge gv0 p))
(Abs (k :: p) (merge gv0 gv0)), (Abs (k :: p) (merge gv0 pl)), (Abs (k :: p) (merge pl ql)), (Abs (k :: p) (merge pl q)), (Abs (k :: p) (merge pl p)), (Abs (k :: p) (merge pl gv0)), (Abs (k :: p) (merge pl pl)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p))
(Abs (k :: p) (insert k gv0)), (Abs (k :: p) (insert k pl)), (Abs (k :: p) (insert a ql)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a gv0)), (Abs (k :: p) (insert a pl)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p))
(Abs (k :: p) (maybe_swap gv0)), (Abs (k :: p) (maybe_swap pl)), (Abs (k :: p) (ql ++ ql)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ p)), (Abs (k :: p) (ql ++ gv0)), (Abs (k :: p) (ql ++ pl)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ p))
(Abs (k :: p) (q ++ gv0)), (Abs (k :: p) (q ++ pl)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ gv0)), (Abs (k :: p) (p ++ pl)), (Abs (k :: p) (gv0 ++ ql)), (Abs (k :: p) (gv0 ++ q)), (Abs (k :: p) (gv0 ++ p))
(Abs (k :: p) (gv0 ++ gv0)), (Abs (k :: p) (gv0 ++ pl)), (Abs (k :: p) (pl ++ ql)), (Abs (k :: p) (pl ++ q)), (Abs (k :: p) (pl ++ p)), (Abs (k :: p) (pl ++ gv0)), (Abs (k :: p) (pl ++ pl)), (Abs (k :: p) []), (Abs (k :: gv0) ql), (Abs (k :: gv0) q)
(Abs (k :: gv0) p), (Abs (k :: gv0) gv0), (Abs (k :: gv0) pl), (Abs (k :: gv0) (k :: ql)), (Abs (k :: gv0) (k :: q)), (Abs (k :: gv0) (k :: p)), (Abs (k :: gv0) (k :: pl)), (Abs (k :: gv0) (a :: ql)), (Abs (k :: gv0) (a :: q)), (Abs (k :: gv0) (a :: p))
(Abs (k :: gv0) (a :: gv0)), (Abs (k :: gv0) (a :: pl)), (Abs (k :: gv0) (merge ql ql)), (Abs (k :: gv0) (merge ql q)), (Abs (k :: gv0) (merge ql p)), (Abs (k :: gv0) (merge ql gv0)), (Abs (k :: gv0) (merge ql pl)), (Abs (k :: gv0) (merge q ql)), (Abs (k :: gv0) (merge q q)), (Abs (k :: gv0) (merge q p))
(Abs (k :: gv0) (merge q gv0)), (Abs (k :: gv0) (merge q pl)), (Abs (k :: gv0) (merge p ql)), (Abs (k :: gv0) (merge p q)), (Abs (k :: gv0) (merge p p)), (Abs (k :: gv0) (merge p gv0)), (Abs (k :: gv0) (merge p pl)), (Abs (k :: gv0) (merge gv0 ql)), (Abs (k :: gv0) (merge gv0 q)), (Abs (k :: gv0) (merge gv0 p))
(Abs (k :: gv0) (merge gv0 gv0)), (Abs (k :: gv0) (merge gv0 pl)), (Abs (k :: gv0) (merge pl ql)), (Abs (k :: gv0) (merge pl q)), (Abs (k :: gv0) (merge pl p)), (Abs (k :: gv0) (merge pl gv0)), (Abs (k :: gv0) (merge pl pl)), (Abs (k :: gv0) (insert k ql)), (Abs (k :: gv0) (insert k q)), (Abs (k :: gv0) (insert k p))
(Abs (k :: gv0) (insert k gv0)), (Abs (k :: gv0) (insert k pl)), (Abs (k :: gv0) (insert a ql)), (Abs (k :: gv0) (insert a q)), (Abs (k :: gv0) (insert a p)), (Abs (k :: gv0) (insert a gv0)), (Abs (k :: gv0) (insert a pl)), (Abs (k :: gv0) (maybe_swap ql)), (Abs (k :: gv0) (maybe_swap q)), (Abs (k :: gv0) (maybe_swap p))
(Abs (k :: gv0) (maybe_swap gv0)), (Abs (k :: gv0) (maybe_swap pl)), (Abs (k :: gv0) (ql ++ ql)), (Abs (k :: gv0) (ql ++ q)), (Abs (k :: gv0) (ql ++ p)), (Abs (k :: gv0) (ql ++ gv0)), (Abs (k :: gv0) (ql ++ pl)), (Abs (k :: gv0) (q ++ ql)), (Abs (k :: gv0) (q ++ q)), (Abs (k :: gv0) (q ++ p))
(Abs (k :: gv0) (q ++ gv0)), (Abs (k :: gv0) (q ++ pl)), (Abs (k :: gv0) (p ++ ql)), (Abs (k :: gv0) (p ++ q)), (Abs (k :: gv0) (p ++ p)), (Abs (k :: gv0) (p ++ gv0)), (Abs (k :: gv0) (p ++ pl)), (Abs (k :: gv0) (gv0 ++ ql)), (Abs (k :: gv0) (gv0 ++ q)), (Abs (k :: gv0) (gv0 ++ p))
(Abs (k :: gv0) (gv0 ++ gv0)), (Abs (k :: gv0) (gv0 ++ pl)), (Abs (k :: gv0) (pl ++ ql)), (Abs (k :: gv0) (pl ++ q)), (Abs (k :: gv0) (pl ++ p)), (Abs (k :: gv0) (pl ++ gv0)), (Abs (k :: gv0) (pl ++ pl)), (Abs (k :: gv0) []), (Abs (k :: pl) ql), (Abs (k :: pl) q)
(Abs (k :: pl) p), (Abs (k :: pl) gv0), (Abs (k :: pl) pl), (Abs (k :: pl) (k :: ql)), (Abs (k :: pl) (k :: q)), (Abs (k :: pl) (k :: p)), (Abs (k :: pl) (k :: gv0)), (Abs (k :: pl) (a :: ql)), (Abs (k :: pl) (a :: q)), (Abs (k :: pl) (a :: p))
(Abs (k :: pl) (a :: gv0)), (Abs (k :: pl) (a :: pl)), (Abs (k :: pl) (merge ql ql)), (Abs (k :: pl) (merge ql q)), (Abs (k :: pl) (merge ql p)), (Abs (k :: pl) (merge ql gv0)), (Abs (k :: pl) (merge ql pl)), (Abs (k :: pl) (merge q ql)), (Abs (k :: pl) (merge q q)), (Abs (k :: pl) (merge q p))
(Abs (k :: pl) (merge q gv0)), (Abs (k :: pl) (merge q pl)), (Abs (k :: pl) (merge p ql)), (Abs (k :: pl) (merge p q)), (Abs (k :: pl) (merge p p)), (Abs (k :: pl) (merge p gv0)), (Abs (k :: pl) (merge p pl)), (Abs (k :: pl) (merge gv0 ql)), (Abs (k :: pl) (merge gv0 q)), (Abs (k :: pl) (merge gv0 p))
(Abs (k :: pl) (merge gv0 gv0)), (Abs (k :: pl) (merge gv0 pl)), (Abs (k :: pl) (merge pl ql)), (Abs (k :: pl) (merge pl q)), (Abs (k :: pl) (merge pl p)), (Abs (k :: pl) (merge pl gv0)), (Abs (k :: pl) (merge pl pl)), (Abs (k :: pl) (insert k ql)), (Abs (k :: pl) (insert k q)), (Abs (k :: pl) (insert k p))
(Abs (k :: pl) (insert k gv0)), (Abs (k :: pl) (insert k pl)), (Abs (k :: pl) (insert a ql)), (Abs (k :: pl) (insert a q)), (Abs (k :: pl) (insert a p)), (Abs (k :: pl) (insert a gv0)), (Abs (k :: pl) (insert a pl)), (Abs (k :: pl) (maybe_swap ql)), (Abs (k :: pl) (maybe_swap q)), (Abs (k :: pl) (maybe_swap p))
(Abs (k :: pl) (maybe_swap gv0)), (Abs (k :: pl) (maybe_swap pl)), (Abs (k :: pl) (ql ++ ql)), (Abs (k :: pl) (ql ++ q)), (Abs (k :: pl) (ql ++ p)), (Abs (k :: pl) (ql ++ gv0)), (Abs (k :: pl) (ql ++ pl)), (Abs (k :: pl) (q ++ ql)), (Abs (k :: pl) (q ++ q)), (Abs (k :: pl) (q ++ p))
(Abs (k :: pl) (q ++ gv0)), (Abs (k :: pl) (q ++ pl)), (Abs (k :: pl) (p ++ ql)), (Abs (k :: pl) (p ++ q)), (Abs (k :: pl) (p ++ p)), (Abs (k :: pl) (p ++ gv0)), (Abs (k :: pl) (p ++ pl)), (Abs (k :: pl) (gv0 ++ ql)), (Abs (k :: pl) (gv0 ++ q)), (Abs (k :: pl) (gv0 ++ p))
(Abs (k :: pl) (gv0 ++ gv0)), (Abs (k :: pl) (gv0 ++ pl)), (Abs (k :: pl) (pl ++ ql)), (Abs (k :: pl) (pl ++ q)), (Abs (k :: pl) (pl ++ p)), (Abs (k :: pl) (pl ++ gv0)), (Abs (k :: pl) (pl ++ pl)), (Abs (k :: pl) []), (Abs (a :: ql) ql), (Abs (a :: ql) q)
(Abs (a :: ql) p), (Abs (a :: ql) gv0), (Abs (a :: ql) pl), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: q)), (Abs (a :: ql) (k :: p)), (Abs (a :: ql) (k :: gv0)), (Abs (a :: ql) (k :: pl)), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p))
(Abs (a :: ql) (a :: gv0)), (Abs (a :: ql) (a :: pl)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge ql gv0)), (Abs (a :: ql) (merge ql pl)), (Abs (a :: ql) (merge q ql)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q p))
(Abs (a :: ql) (merge q gv0)), (Abs (a :: ql) (merge q pl)), (Abs (a :: ql) (merge p ql)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (merge p gv0)), (Abs (a :: ql) (merge p pl)), (Abs (a :: ql) (merge gv0 ql)), (Abs (a :: ql) (merge gv0 q)), (Abs (a :: ql) (merge gv0 p))
(Abs (a :: ql) (merge gv0 gv0)), (Abs (a :: ql) (merge gv0 pl)), (Abs (a :: ql) (merge pl ql)), (Abs (a :: ql) (merge pl q)), (Abs (a :: ql) (merge pl p)), (Abs (a :: ql) (merge pl gv0)), (Abs (a :: ql) (merge pl pl)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k p))
(Abs (a :: ql) (insert k gv0)), (Abs (a :: ql) (insert k pl)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a q)), (Abs (a :: ql) (insert a p)), (Abs (a :: ql) (insert a gv0)), (Abs (a :: ql) (insert a pl)), (Abs (a :: ql) (maybe_swap ql)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap p))
(Abs (a :: ql) (maybe_swap gv0)), (Abs (a :: ql) (maybe_swap pl)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ q)), (Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (ql ++ gv0)), (Abs (a :: ql) (ql ++ pl)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ p))
(Abs (a :: ql) (q ++ gv0)), (Abs (a :: ql) (q ++ pl)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) (p ++ gv0)), (Abs (a :: ql) (p ++ pl)), (Abs (a :: ql) (gv0 ++ ql)), (Abs (a :: ql) (gv0 ++ q)), (Abs (a :: ql) (gv0 ++ p))
(Abs (a :: ql) (gv0 ++ gv0)), (Abs (a :: ql) (gv0 ++ pl)), (Abs (a :: ql) (pl ++ ql)), (Abs (a :: ql) (pl ++ q)), (Abs (a :: ql) (pl ++ p)), (Abs (a :: ql) (pl ++ gv0)), (Abs (a :: ql) (pl ++ pl)), (Abs (a :: ql) []), (Abs (a :: q) ql), (Abs (a :: q) q)
(Abs (a :: q) p), (Abs (a :: q) gv0), (Abs (a :: q) pl), (Abs (a :: q) (k :: ql)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: gv0)), (Abs (a :: q) (k :: pl)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: p))
(Abs (a :: q) (a :: gv0)), (Abs (a :: q) (a :: pl)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql q)), (Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge ql gv0)), (Abs (a :: q) (merge ql pl)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q p))
(Abs (a :: q) (merge q gv0)), (Abs (a :: q) (merge q pl)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p gv0)), (Abs (a :: q) (merge p pl)), (Abs (a :: q) (merge gv0 ql)), (Abs (a :: q) (merge gv0 q)), (Abs (a :: q) (merge gv0 p))
(Abs (a :: q) (merge gv0 gv0)), (Abs (a :: q) (merge gv0 pl)), (Abs (a :: q) (merge pl ql)), (Abs (a :: q) (merge pl q)), (Abs (a :: q) (merge pl p)), (Abs (a :: q) (merge pl gv0)), (Abs (a :: q) (merge pl pl)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p))
(Abs (a :: q) (insert k gv0)), (Abs (a :: q) (insert k pl)), (Abs (a :: q) (insert a ql)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (insert a gv0)), (Abs (a :: q) (insert a pl)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p))
(Abs (a :: q) (maybe_swap gv0)), (Abs (a :: q) (maybe_swap pl)), (Abs (a :: q) (ql ++ ql)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (ql ++ gv0)), (Abs (a :: q) (ql ++ pl)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ p))
(Abs (a :: q) (q ++ gv0)), (Abs (a :: q) (q ++ pl)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ gv0)), (Abs (a :: q) (p ++ pl)), (Abs (a :: q) (gv0 ++ ql)), (Abs (a :: q) (gv0 ++ q)), (Abs (a :: q) (gv0 ++ p))
(Abs (a :: q) (gv0 ++ gv0)), (Abs (a :: q) (gv0 ++ pl)), (Abs (a :: q) (pl ++ ql)), (Abs (a :: q) (pl ++ q)), (Abs (a :: q) (pl ++ p)), (Abs (a :: q) (pl ++ gv0)), (Abs (a :: q) (pl ++ pl)), (Abs (a :: q) []), (Abs (a :: p) ql), (Abs (a :: p) q)
(Abs (a :: p) p), (Abs (a :: p) gv0), (Abs (a :: p) pl), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: gv0)), (Abs (a :: p) (k :: pl)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: q))
(Abs (a :: p) (a :: gv0)), (Abs (a :: p) (a :: pl)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge ql gv0)), (Abs (a :: p) (merge ql pl)), (Abs (a :: p) (merge q ql)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q p))
(Abs (a :: p) (merge q gv0)), (Abs (a :: p) (merge q pl)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p gv0)), (Abs (a :: p) (merge p pl)), (Abs (a :: p) (merge gv0 ql)), (Abs (a :: p) (merge gv0 q)), (Abs (a :: p) (merge gv0 p))
(Abs (a :: p) (merge gv0 gv0)), (Abs (a :: p) (merge gv0 pl)), (Abs (a :: p) (merge pl ql)), (Abs (a :: p) (merge pl q)), (Abs (a :: p) (merge pl p)), (Abs (a :: p) (merge pl gv0)), (Abs (a :: p) (merge pl pl)), (Abs (a :: p) (insert k ql)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p))
(Abs (a :: p) (insert k gv0)), (Abs (a :: p) (insert k pl)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a gv0)), (Abs (a :: p) (insert a pl)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p))
(Abs (a :: p) (maybe_swap gv0)), (Abs (a :: p) (maybe_swap pl)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (ql ++ gv0)), (Abs (a :: p) (ql ++ pl)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ p))
(Abs (a :: p) (q ++ gv0)), (Abs (a :: p) (q ++ pl)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ gv0)), (Abs (a :: p) (p ++ pl)), (Abs (a :: p) (gv0 ++ ql)), (Abs (a :: p) (gv0 ++ q)), (Abs (a :: p) (gv0 ++ p))
(Abs (a :: p) (gv0 ++ gv0)), (Abs (a :: p) (gv0 ++ pl)), (Abs (a :: p) (pl ++ ql)), (Abs (a :: p) (pl ++ q)), (Abs (a :: p) (pl ++ p)), (Abs (a :: p) (pl ++ gv0)), (Abs (a :: p) (pl ++ pl)), (Abs (a :: p) []), (Abs (a :: gv0) ql), (Abs (a :: gv0) q)
(Abs (a :: gv0) p), (Abs (a :: gv0) gv0), (Abs (a :: gv0) pl), (Abs (a :: gv0) (k :: ql)), (Abs (a :: gv0) (k :: q)), (Abs (a :: gv0) (k :: p)), (Abs (a :: gv0) (k :: gv0)), (Abs (a :: gv0) (k :: pl)), (Abs (a :: gv0) (a :: ql)), (Abs (a :: gv0) (a :: q))
(Abs (a :: gv0) (a :: p)), (Abs (a :: gv0) (a :: pl)), (Abs (a :: gv0) (merge ql ql)), (Abs (a :: gv0) (merge ql q)), (Abs (a :: gv0) (merge ql p)), (Abs (a :: gv0) (merge ql gv0)), (Abs (a :: gv0) (merge ql pl)), (Abs (a :: gv0) (merge q ql)), (Abs (a :: gv0) (merge q q)), (Abs (a :: gv0) (merge q p))
(Abs (a :: gv0) (merge q gv0)), (Abs (a :: gv0) (merge q pl)), (Abs (a :: gv0) (merge p ql)), (Abs (a :: gv0) (merge p q)), (Abs (a :: gv0) (merge p p)), (Abs (a :: gv0) (merge p gv0)), (Abs (a :: gv0) (merge p pl)), (Abs (a :: gv0) (merge gv0 ql)), (Abs (a :: gv0) (merge gv0 q)), (Abs (a :: gv0) (merge gv0 p))
(Abs (a :: gv0) (merge gv0 gv0)), (Abs (a :: gv0) (merge gv0 pl)), (Abs (a :: gv0) (merge pl ql)), (Abs (a :: gv0) (merge pl q)), (Abs (a :: gv0) (merge pl p)), (Abs (a :: gv0) (merge pl gv0)), (Abs (a :: gv0) (merge pl pl)), (Abs (a :: gv0) (insert k ql)), (Abs (a :: gv0) (insert k q)), (Abs (a :: gv0) (insert k p))
(Abs (a :: gv0) (insert k gv0)), (Abs (a :: gv0) (insert k pl)), (Abs (a :: gv0) (insert a ql)), (Abs (a :: gv0) (insert a q)), (Abs (a :: gv0) (insert a p)), (Abs (a :: gv0) (insert a gv0)), (Abs (a :: gv0) (insert a pl)), (Abs (a :: gv0) (maybe_swap ql)), (Abs (a :: gv0) (maybe_swap q)), (Abs (a :: gv0) (maybe_swap p))
(Abs (a :: gv0) (maybe_swap gv0)), (Abs (a :: gv0) (maybe_swap pl)), (Abs (a :: gv0) (ql ++ ql)), (Abs (a :: gv0) (ql ++ q)), (Abs (a :: gv0) (ql ++ p)), (Abs (a :: gv0) (ql ++ gv0)), (Abs (a :: gv0) (ql ++ pl)), (Abs (a :: gv0) (q ++ ql)), (Abs (a :: gv0) (q ++ q)), (Abs (a :: gv0) (q ++ p))
(Abs (a :: gv0) (q ++ gv0)), (Abs (a :: gv0) (q ++ pl)), (Abs (a :: gv0) (p ++ ql)), (Abs (a :: gv0) (p ++ q)), (Abs (a :: gv0) (p ++ p)), (Abs (a :: gv0) (p ++ gv0)), (Abs (a :: gv0) (p ++ pl)), (Abs (a :: gv0) (gv0 ++ ql)), (Abs (a :: gv0) (gv0 ++ q)), (Abs (a :: gv0) (gv0 ++ p))
(Abs (a :: gv0) (gv0 ++ gv0)), (Abs (a :: gv0) (gv0 ++ pl)), (Abs (a :: gv0) (pl ++ ql)), (Abs (a :: gv0) (pl ++ q)), (Abs (a :: gv0) (pl ++ p)), (Abs (a :: gv0) (pl ++ gv0)), (Abs (a :: gv0) (pl ++ pl)), (Abs (a :: gv0) []), (Abs (a :: pl) ql), (Abs (a :: pl) q)
(Abs (a :: pl) p), (Abs (a :: pl) gv0), (Abs (a :: pl) pl), (Abs (a :: pl) (k :: ql)), (Abs (a :: pl) (k :: q)), (Abs (a :: pl) (k :: p)), (Abs (a :: pl) (k :: gv0)), (Abs (a :: pl) (k :: pl)), (Abs (a :: pl) (a :: ql)), (Abs (a :: pl) (a :: q))
(Abs (a :: pl) (a :: p)), (Abs (a :: pl) (a :: gv0)), (Abs (a :: pl) (merge ql ql)), (Abs (a :: pl) (merge ql q)), (Abs (a :: pl) (merge ql p)), (Abs (a :: pl) (merge ql gv0)), (Abs (a :: pl) (merge ql pl)), (Abs (a :: pl) (merge q ql)), (Abs (a :: pl) (merge q q)), (Abs (a :: pl) (merge q p))
(Abs (a :: pl) (merge q gv0)), (Abs (a :: pl) (merge q pl)), (Abs (a :: pl) (merge p ql)), (Abs (a :: pl) (merge p q)), (Abs (a :: pl) (merge p p)), (Abs (a :: pl) (merge p gv0)), (Abs (a :: pl) (merge p pl)), (Abs (a :: pl) (merge gv0 ql)), (Abs (a :: pl) (merge gv0 q)), (Abs (a :: pl) (merge gv0 p))
(Abs (a :: pl) (merge gv0 gv0)), (Abs (a :: pl) (merge gv0 pl)), (Abs (a :: pl) (merge pl ql)), (Abs (a :: pl) (merge pl q)), (Abs (a :: pl) (merge pl p)), (Abs (a :: pl) (merge pl gv0)), (Abs (a :: pl) (merge pl pl)), (Abs (a :: pl) (insert k ql)), (Abs (a :: pl) (insert k q)), (Abs (a :: pl) (insert k p))
(Abs (a :: pl) (insert k gv0)), (Abs (a :: pl) (insert k pl)), (Abs (a :: pl) (insert a ql)), (Abs (a :: pl) (insert a q)), (Abs (a :: pl) (insert a p)), (Abs (a :: pl) (insert a gv0)), (Abs (a :: pl) (insert a pl)), (Abs (a :: pl) (maybe_swap ql)), (Abs (a :: pl) (maybe_swap q)), (Abs (a :: pl) (maybe_swap p))
(Abs (a :: pl) (maybe_swap gv0)), (Abs (a :: pl) (maybe_swap pl)), (Abs (a :: pl) (ql ++ ql)), (Abs (a :: pl) (ql ++ q)), (Abs (a :: pl) (ql ++ p)), (Abs (a :: pl) (ql ++ gv0)), (Abs (a :: pl) (ql ++ pl)), (Abs (a :: pl) (q ++ ql)), (Abs (a :: pl) (q ++ q)), (Abs (a :: pl) (q ++ p))
(Abs (a :: pl) (q ++ gv0)), (Abs (a :: pl) (q ++ pl)), (Abs (a :: pl) (p ++ ql)), (Abs (a :: pl) (p ++ q)), (Abs (a :: pl) (p ++ p)), (Abs (a :: pl) (p ++ gv0)), (Abs (a :: pl) (p ++ pl)), (Abs (a :: pl) (gv0 ++ ql)), (Abs (a :: pl) (gv0 ++ q)), (Abs (a :: pl) (gv0 ++ p))
(Abs (a :: pl) (gv0 ++ gv0)), (Abs (a :: pl) (gv0 ++ pl)), (Abs (a :: pl) (pl ++ ql)), (Abs (a :: pl) (pl ++ q)), (Abs (a :: pl) (pl ++ p)), (Abs (a :: pl) (pl ++ gv0)), (Abs (a :: pl) (pl ++ pl)), (Abs (a :: pl) []), (Abs (merge ql ql) ql), (Abs (merge ql ql) q)
(Abs (merge ql ql) p), (Abs (merge ql ql) gv0), (Abs (merge ql ql) pl), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (k :: gv0)), (Abs (merge ql ql) (k :: pl)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: q))
(Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (a :: gv0)), (Abs (merge ql ql) (a :: pl)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p)), (Abs (merge ql ql) (merge ql gv0)), (Abs (merge ql ql) (merge ql pl)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q p))
(Abs (merge ql ql) (merge q gv0)), (Abs (merge ql ql) (merge q pl)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (merge p gv0)), (Abs (merge ql ql) (merge p pl)), (Abs (merge ql ql) (merge gv0 ql)), (Abs (merge ql ql) (merge gv0 q)), (Abs (merge ql ql) (merge gv0 p))
(Abs (merge ql ql) (merge gv0 gv0)), (Abs (merge ql ql) (merge gv0 pl)), (Abs (merge ql ql) (merge pl ql)), (Abs (merge ql ql) (merge pl q)), (Abs (merge ql ql) (merge pl p)), (Abs (merge ql ql) (merge pl gv0)), (Abs (merge ql ql) (merge pl pl)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k q)), (Abs (merge ql ql) (insert k p))
(Abs (merge ql ql) (insert k gv0)), (Abs (merge ql ql) (insert k pl)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (insert a gv0)), (Abs (merge ql ql) (insert a pl)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap p))
(Abs (merge ql ql) (maybe_swap gv0)), (Abs (merge ql ql) (maybe_swap pl)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (ql ++ gv0)), (Abs (merge ql ql) (ql ++ pl)), (Abs (merge ql ql) (q ++ ql)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ p))
(Abs (merge ql ql) (q ++ gv0)), (Abs (merge ql ql) (q ++ pl)), (Abs (merge ql ql) (p ++ ql)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) (p ++ gv0)), (Abs (merge ql ql) (p ++ pl)), (Abs (merge ql ql) (gv0 ++ ql)), (Abs (merge ql ql) (gv0 ++ q)), (Abs (merge ql ql) (gv0 ++ p))
(Abs (merge ql ql) (gv0 ++ gv0)), (Abs (merge ql ql) (gv0 ++ pl)), (Abs (merge ql ql) (pl ++ ql)), (Abs (merge ql ql) (pl ++ q)), (Abs (merge ql ql) (pl ++ p)), (Abs (merge ql ql) (pl ++ gv0)), (Abs (merge ql ql) (pl ++ pl)), (Abs (merge ql ql) []), (Abs (merge ql q) ql), (Abs (merge ql q) q)
(Abs (merge ql q) p), (Abs (merge ql q) gv0), (Abs (merge ql q) pl), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (k :: gv0)), (Abs (merge ql q) (k :: pl)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: q))
(Abs (merge ql q) (a :: p)), (Abs (merge ql q) (a :: gv0)), (Abs (merge ql q) (a :: pl)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge ql gv0)), (Abs (merge ql q) (merge ql pl)), (Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q p))
(Abs (merge ql q) (merge q gv0)), (Abs (merge ql q) (merge q pl)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (merge p gv0)), (Abs (merge ql q) (merge p pl)), (Abs (merge ql q) (merge gv0 ql)), (Abs (merge ql q) (merge gv0 q)), (Abs (merge ql q) (merge gv0 p))
(Abs (merge ql q) (merge gv0 gv0)), (Abs (merge ql q) (merge gv0 pl)), (Abs (merge ql q) (merge pl ql)), (Abs (merge ql q) (merge pl q)), (Abs (merge ql q) (merge pl p)), (Abs (merge ql q) (merge pl gv0)), (Abs (merge ql q) (merge pl pl)), (Abs (merge ql q) (insert k ql)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k p))
(Abs (merge ql q) (insert k gv0)), (Abs (merge ql q) (insert k pl)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (insert a gv0)), (Abs (merge ql q) (insert a pl)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap p))
(Abs (merge ql q) (maybe_swap gv0)), (Abs (merge ql q) (maybe_swap pl)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (ql ++ gv0)), (Abs (merge ql q) (ql ++ pl)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ p))
(Abs (merge ql q) (q ++ gv0)), (Abs (merge ql q) (q ++ pl)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ q)), (Abs (merge ql q) (p ++ p)), (Abs (merge ql q) (p ++ gv0)), (Abs (merge ql q) (p ++ pl)), (Abs (merge ql q) (gv0 ++ ql)), (Abs (merge ql q) (gv0 ++ q)), (Abs (merge ql q) (gv0 ++ p))
(Abs (merge ql q) (gv0 ++ gv0)), (Abs (merge ql q) (gv0 ++ pl)), (Abs (merge ql q) (pl ++ ql)), (Abs (merge ql q) (pl ++ q)), (Abs (merge ql q) (pl ++ p)), (Abs (merge ql q) (pl ++ gv0)), (Abs (merge ql q) (pl ++ pl)), (Abs (merge ql q) []), (Abs (merge ql p) ql), (Abs (merge ql p) q)
(Abs (merge ql p) p), (Abs (merge ql p) gv0), (Abs (merge ql p) pl), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (k :: gv0)), (Abs (merge ql p) (k :: pl)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: q))
(Abs (merge ql p) (a :: p)), (Abs (merge ql p) (a :: gv0)), (Abs (merge ql p) (a :: pl)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql gv0)), (Abs (merge ql p) (merge ql pl)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q p))
(Abs (merge ql p) (merge q gv0)), (Abs (merge ql p) (merge q pl)), (Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p p)), (Abs (merge ql p) (merge p gv0)), (Abs (merge ql p) (merge p pl)), (Abs (merge ql p) (merge gv0 ql)), (Abs (merge ql p) (merge gv0 q)), (Abs (merge ql p) (merge gv0 p))
(Abs (merge ql p) (merge gv0 gv0)), (Abs (merge ql p) (merge gv0 pl)), (Abs (merge ql p) (merge pl ql)), (Abs (merge ql p) (merge pl q)), (Abs (merge ql p) (merge pl p)), (Abs (merge ql p) (merge pl gv0)), (Abs (merge ql p) (merge pl pl)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k p))
(Abs (merge ql p) (insert k gv0)), (Abs (merge ql p) (insert k pl)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a q)), (Abs (merge ql p) (insert a p)), (Abs (merge ql p) (insert a gv0)), (Abs (merge ql p) (insert a pl)), (Abs (merge ql p) (maybe_swap ql)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap p))
(Abs (merge ql p) (maybe_swap gv0)), (Abs (merge ql p) (maybe_swap pl)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ q)), (Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (ql ++ gv0)), (Abs (merge ql p) (ql ++ pl)), (Abs (merge ql p) (q ++ ql)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ p))
(Abs (merge ql p) (q ++ gv0)), (Abs (merge ql p) (q ++ pl)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) (p ++ gv0)), (Abs (merge ql p) (p ++ pl)), (Abs (merge ql p) (gv0 ++ ql)), (Abs (merge ql p) (gv0 ++ q)), (Abs (merge ql p) (gv0 ++ p))
(Abs (merge ql p) (gv0 ++ gv0)), (Abs (merge ql p) (gv0 ++ pl)), (Abs (merge ql p) (pl ++ ql)), (Abs (merge ql p) (pl ++ q)), (Abs (merge ql p) (pl ++ p)), (Abs (merge ql p) (pl ++ gv0)), (Abs (merge ql p) (pl ++ pl)), (Abs (merge ql p) []), (Abs (merge ql gv0) ql), (Abs (merge ql gv0) q)
(Abs (merge ql gv0) p), (Abs (merge ql gv0) gv0), (Abs (merge ql gv0) pl), (Abs (merge ql gv0) (k :: ql)), (Abs (merge ql gv0) (k :: q)), (Abs (merge ql gv0) (k :: p)), (Abs (merge ql gv0) (k :: gv0)), (Abs (merge ql gv0) (k :: pl)), (Abs (merge ql gv0) (a :: ql)), (Abs (merge ql gv0) (a :: q))
(Abs (merge ql gv0) (a :: p)), (Abs (merge ql gv0) (a :: gv0)), (Abs (merge ql gv0) (a :: pl)), (Abs (merge ql gv0) (merge ql ql)), (Abs (merge ql gv0) (merge ql q)), (Abs (merge ql gv0) (merge ql p)), (Abs (merge ql gv0) (merge ql pl)), (Abs (merge ql gv0) (merge q ql)), (Abs (merge ql gv0) (merge q q)), (Abs (merge ql gv0) (merge q p))
(Abs (merge ql gv0) (merge q gv0)), (Abs (merge ql gv0) (merge q pl)), (Abs (merge ql gv0) (merge p ql)), (Abs (merge ql gv0) (merge p q)), (Abs (merge ql gv0) (merge p p)), (Abs (merge ql gv0) (merge p gv0)), (Abs (merge ql gv0) (merge p pl)), (Abs (merge ql gv0) (merge gv0 ql)), (Abs (merge ql gv0) (merge gv0 q)), (Abs (merge ql gv0) (merge gv0 p))
(Abs (merge ql gv0) (merge gv0 gv0)), (Abs (merge ql gv0) (merge gv0 pl)), (Abs (merge ql gv0) (merge pl ql)), (Abs (merge ql gv0) (merge pl q)), (Abs (merge ql gv0) (merge pl p)), (Abs (merge ql gv0) (merge pl gv0)), (Abs (merge ql gv0) (merge pl pl)), (Abs (merge ql gv0) (insert k ql)), (Abs (merge ql gv0) (insert k q)), (Abs (merge ql gv0) (insert k p))
(Abs (merge ql gv0) (insert k gv0)), (Abs (merge ql gv0) (insert k pl)), (Abs (merge ql gv0) (insert a ql)), (Abs (merge ql gv0) (insert a q)), (Abs (merge ql gv0) (insert a p)), (Abs (merge ql gv0) (insert a gv0)), (Abs (merge ql gv0) (insert a pl)), (Abs (merge ql gv0) (maybe_swap ql)), (Abs (merge ql gv0) (maybe_swap q)), (Abs (merge ql gv0) (maybe_swap p))
(Abs (merge ql gv0) (maybe_swap gv0)), (Abs (merge ql gv0) (maybe_swap pl)), (Abs (merge ql gv0) (ql ++ ql)), (Abs (merge ql gv0) (ql ++ q)), (Abs (merge ql gv0) (ql ++ p)), (Abs (merge ql gv0) (ql ++ gv0)), (Abs (merge ql gv0) (ql ++ pl)), (Abs (merge ql gv0) (q ++ ql)), (Abs (merge ql gv0) (q ++ q)), (Abs (merge ql gv0) (q ++ p))
(Abs (merge ql gv0) (q ++ gv0)), (Abs (merge ql gv0) (q ++ pl)), (Abs (merge ql gv0) (p ++ ql)), (Abs (merge ql gv0) (p ++ q)), (Abs (merge ql gv0) (p ++ p)), (Abs (merge ql gv0) (p ++ gv0)), (Abs (merge ql gv0) (p ++ pl)), (Abs (merge ql gv0) (gv0 ++ ql)), (Abs (merge ql gv0) (gv0 ++ q)), (Abs (merge ql gv0) (gv0 ++ p))
(Abs (merge ql gv0) (gv0 ++ gv0)), (Abs (merge ql gv0) (gv0 ++ pl)), (Abs (merge ql gv0) (pl ++ ql)), (Abs (merge ql gv0) (pl ++ q)), (Abs (merge ql gv0) (pl ++ p)), (Abs (merge ql gv0) (pl ++ gv0)), (Abs (merge ql gv0) (pl ++ pl)), (Abs (merge ql gv0) []), (Abs (merge ql pl) ql), (Abs (merge ql pl) q)
(Abs (merge ql pl) p), (Abs (merge ql pl) gv0), (Abs (merge ql pl) pl), (Abs (merge ql pl) (k :: ql)), (Abs (merge ql pl) (k :: q)), (Abs (merge ql pl) (k :: p)), (Abs (merge ql pl) (k :: gv0)), (Abs (merge ql pl) (k :: pl)), (Abs (merge ql pl) (a :: ql)), (Abs (merge ql pl) (a :: q))
(Abs (merge ql pl) (a :: p)), (Abs (merge ql pl) (a :: gv0)), (Abs (merge ql pl) (a :: pl)), (Abs (merge ql pl) (merge ql ql)), (Abs (merge ql pl) (merge ql q)), (Abs (merge ql pl) (merge ql p)), (Abs (merge ql pl) (merge ql gv0)), (Abs (merge ql pl) (merge q ql)), (Abs (merge ql pl) (merge q q)), (Abs (merge ql pl) (merge q p))
(Abs (merge ql pl) (merge q gv0)), (Abs (merge ql pl) (merge q pl)), (Abs (merge ql pl) (merge p ql)), (Abs (merge ql pl) (merge p q)), (Abs (merge ql pl) (merge p p)), (Abs (merge ql pl) (merge p gv0)), (Abs (merge ql pl) (merge p pl)), (Abs (merge ql pl) (merge gv0 ql)), (Abs (merge ql pl) (merge gv0 q)), (Abs (merge ql pl) (merge gv0 p))
(Abs (merge ql pl) (merge gv0 gv0)), (Abs (merge ql pl) (merge gv0 pl)), (Abs (merge ql pl) (merge pl ql)), (Abs (merge ql pl) (merge pl q)), (Abs (merge ql pl) (merge pl p)), (Abs (merge ql pl) (merge pl gv0)), (Abs (merge ql pl) (merge pl pl)), (Abs (merge ql pl) (insert k ql)), (Abs (merge ql pl) (insert k q)), (Abs (merge ql pl) (insert k p))
(Abs (merge ql pl) (insert k gv0)), (Abs (merge ql pl) (insert k pl)), (Abs (merge ql pl) (insert a ql)), (Abs (merge ql pl) (insert a q)), (Abs (merge ql pl) (insert a p)), (Abs (merge ql pl) (insert a gv0)), (Abs (merge ql pl) (insert a pl)), (Abs (merge ql pl) (maybe_swap ql)), (Abs (merge ql pl) (maybe_swap q)), (Abs (merge ql pl) (maybe_swap p))
(Abs (merge ql pl) (maybe_swap gv0)), (Abs (merge ql pl) (maybe_swap pl)), (Abs (merge ql pl) (ql ++ ql)), (Abs (merge ql pl) (ql ++ q)), (Abs (merge ql pl) (ql ++ p)), (Abs (merge ql pl) (ql ++ gv0)), (Abs (merge ql pl) (ql ++ pl)), (Abs (merge ql pl) (q ++ ql)), (Abs (merge ql pl) (q ++ q)), (Abs (merge ql pl) (q ++ p))
(Abs (merge ql pl) (q ++ gv0)), (Abs (merge ql pl) (q ++ pl)), (Abs (merge ql pl) (p ++ ql)), (Abs (merge ql pl) (p ++ q)), (Abs (merge ql pl) (p ++ p)), (Abs (merge ql pl) (p ++ gv0)), (Abs (merge ql pl) (p ++ pl)), (Abs (merge ql pl) (gv0 ++ ql)), (Abs (merge ql pl) (gv0 ++ q)), (Abs (merge ql pl) (gv0 ++ p))
(Abs (merge ql pl) (gv0 ++ gv0)), (Abs (merge ql pl) (gv0 ++ pl)), (Abs (merge ql pl) (pl ++ ql)), (Abs (merge ql pl) (pl ++ q)), (Abs (merge ql pl) (pl ++ p)), (Abs (merge ql pl) (pl ++ gv0)), (Abs (merge ql pl) (pl ++ pl)), (Abs (merge ql pl) []), (Abs (merge q ql) ql), (Abs (merge q ql) q)
(Abs (merge q ql) p), (Abs (merge q ql) gv0), (Abs (merge q ql) pl), (Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: p)), (Abs (merge q ql) (k :: gv0)), (Abs (merge q ql) (k :: pl)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: q))
(Abs (merge q ql) (a :: p)), (Abs (merge q ql) (a :: gv0)), (Abs (merge q ql) (a :: pl)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql q)), (Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge ql gv0)), (Abs (merge q ql) (merge ql pl)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p))
(Abs (merge q ql) (merge q gv0)), (Abs (merge q ql) (merge q pl)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (merge p gv0)), (Abs (merge q ql) (merge p pl)), (Abs (merge q ql) (merge gv0 ql)), (Abs (merge q ql) (merge gv0 q)), (Abs (merge q ql) (merge gv0 p))
(Abs (merge q ql) (merge gv0 gv0)), (Abs (merge q ql) (merge gv0 pl)), (Abs (merge q ql) (merge pl ql)), (Abs (merge q ql) (merge pl q)), (Abs (merge q ql) (merge pl p)), (Abs (merge q ql) (merge pl gv0)), (Abs (merge q ql) (merge pl pl)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k p))
(Abs (merge q ql) (insert k gv0)), (Abs (merge q ql) (insert k pl)), (Abs (merge q ql) (insert a ql)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (insert a gv0)), (Abs (merge q ql) (insert a pl)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap p))
(Abs (merge q ql) (maybe_swap gv0)), (Abs (merge q ql) (maybe_swap pl)), (Abs (merge q ql) (ql ++ ql)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (ql ++ gv0)), (Abs (merge q ql) (ql ++ pl)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ q)), (Abs (merge q ql) (q ++ p))
(Abs (merge q ql) (q ++ gv0)), (Abs (merge q ql) (q ++ pl)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) (p ++ gv0)), (Abs (merge q ql) (p ++ pl)), (Abs (merge q ql) (gv0 ++ ql)), (Abs (merge q ql) (gv0 ++ q)), (Abs (merge q ql) (gv0 ++ p))
(Abs (merge q ql) (gv0 ++ gv0)), (Abs (merge q ql) (gv0 ++ pl)), (Abs (merge q ql) (pl ++ ql)), (Abs (merge q ql) (pl ++ q)), (Abs (merge q ql) (pl ++ p)), (Abs (merge q ql) (pl ++ gv0)), (Abs (merge q ql) (pl ++ pl)), (Abs (merge q ql) []), (Abs (merge q q) ql), (Abs (merge q q) q)
(Abs (merge q q) p), (Abs (merge q q) gv0), (Abs (merge q q) pl), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: gv0)), (Abs (merge q q) (k :: pl)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: q))
(Abs (merge q q) (a :: p)), (Abs (merge q q) (a :: gv0)), (Abs (merge q q) (a :: pl)), (Abs (merge q q) (merge ql ql)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge ql gv0)), (Abs (merge q q) (merge ql pl)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q p))
(Abs (merge q q) (merge q gv0)), (Abs (merge q q) (merge q pl)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p gv0)), (Abs (merge q q) (merge p pl)), (Abs (merge q q) (merge gv0 ql)), (Abs (merge q q) (merge gv0 q)), (Abs (merge q q) (merge gv0 p))
(Abs (merge q q) (merge gv0 gv0)), (Abs (merge q q) (merge gv0 pl)), (Abs (merge q q) (merge pl ql)), (Abs (merge q q) (merge pl q)), (Abs (merge q q) (merge pl p)), (Abs (merge q q) (merge pl gv0)), (Abs (merge q q) (merge pl pl)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k q)), (Abs (merge q q) (insert k p))
(Abs (merge q q) (insert k gv0)), (Abs (merge q q) (insert k pl)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a gv0)), (Abs (merge q q) (insert a pl)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p))
(Abs (merge q q) (maybe_swap gv0)), (Abs (merge q q) (maybe_swap pl)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (ql ++ gv0)), (Abs (merge q q) (ql ++ pl)), (Abs (merge q q) (q ++ ql)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ p))
(Abs (merge q q) (q ++ gv0)), (Abs (merge q q) (q ++ pl)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ gv0)), (Abs (merge q q) (p ++ pl)), (Abs (merge q q) (gv0 ++ ql)), (Abs (merge q q) (gv0 ++ q)), (Abs (merge q q) (gv0 ++ p))
(Abs (merge q q) (gv0 ++ gv0)), (Abs (merge q q) (gv0 ++ pl)), (Abs (merge q q) (pl ++ ql)), (Abs (merge q q) (pl ++ q)), (Abs (merge q q) (pl ++ p)), (Abs (merge q q) (pl ++ gv0)), (Abs (merge q q) (pl ++ pl)), (Abs (merge q q) []), (Abs (merge q p) ql), (Abs (merge q p) q)
(Abs (merge q p) p), (Abs (merge q p) gv0), (Abs (merge q p) pl), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: gv0)), (Abs (merge q p) (k :: pl)), (Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: q))
(Abs (merge q p) (a :: p)), (Abs (merge q p) (a :: gv0)), (Abs (merge q p) (a :: pl)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge ql gv0)), (Abs (merge q p) (merge ql pl)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q q))
(Abs (merge q p) (merge q gv0)), (Abs (merge q p) (merge q pl)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p p)), (Abs (merge q p) (merge p gv0)), (Abs (merge q p) (merge p pl)), (Abs (merge q p) (merge gv0 ql)), (Abs (merge q p) (merge gv0 q)), (Abs (merge q p) (merge gv0 p))
(Abs (merge q p) (merge gv0 gv0)), (Abs (merge q p) (merge gv0 pl)), (Abs (merge q p) (merge pl ql)), (Abs (merge q p) (merge pl q)), (Abs (merge q p) (merge pl p)), (Abs (merge q p) (merge pl gv0)), (Abs (merge q p) (merge pl pl)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p))
(Abs (merge q p) (insert k gv0)), (Abs (merge q p) (insert k pl)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a gv0)), (Abs (merge q p) (insert a pl)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap p))
(Abs (merge q p) (maybe_swap gv0)), (Abs (merge q p) (maybe_swap pl)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (ql ++ gv0)), (Abs (merge q p) (ql ++ pl)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ p))
(Abs (merge q p) (q ++ gv0)), (Abs (merge q p) (q ++ pl)), (Abs (merge q p) (p ++ ql)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ gv0)), (Abs (merge q p) (p ++ pl)), (Abs (merge q p) (gv0 ++ ql)), (Abs (merge q p) (gv0 ++ q)), (Abs (merge q p) (gv0 ++ p))
(Abs (merge q p) (gv0 ++ gv0)), (Abs (merge q p) (gv0 ++ pl)), (Abs (merge q p) (pl ++ ql)), (Abs (merge q p) (pl ++ q)), (Abs (merge q p) (pl ++ p)), (Abs (merge q p) (pl ++ gv0)), (Abs (merge q p) (pl ++ pl)), (Abs (merge q p) []), (Abs (merge q gv0) ql), (Abs (merge q gv0) q)
(Abs (merge q gv0) p), (Abs (merge q gv0) gv0), (Abs (merge q gv0) pl), (Abs (merge q gv0) (k :: ql)), (Abs (merge q gv0) (k :: q)), (Abs (merge q gv0) (k :: p)), (Abs (merge q gv0) (k :: gv0)), (Abs (merge q gv0) (k :: pl)), (Abs (merge q gv0) (a :: ql)), (Abs (merge q gv0) (a :: q))
(Abs (merge q gv0) (a :: p)), (Abs (merge q gv0) (a :: gv0)), (Abs (merge q gv0) (a :: pl)), (Abs (merge q gv0) (merge ql ql)), (Abs (merge q gv0) (merge ql q)), (Abs (merge q gv0) (merge ql p)), (Abs (merge q gv0) (merge ql gv0)), (Abs (merge q gv0) (merge ql pl)), (Abs (merge q gv0) (merge q ql)), (Abs (merge q gv0) (merge q q))
(Abs (merge q gv0) (merge q p)), (Abs (merge q gv0) (merge q pl)), (Abs (merge q gv0) (merge p ql)), (Abs (merge q gv0) (merge p q)), (Abs (merge q gv0) (merge p p)), (Abs (merge q gv0) (merge p gv0)), (Abs (merge q gv0) (merge p pl)), (Abs (merge q gv0) (merge gv0 ql)), (Abs (merge q gv0) (merge gv0 q)), (Abs (merge q gv0) (merge gv0 p))
(Abs (merge q gv0) (merge gv0 gv0)), (Abs (merge q gv0) (merge gv0 pl)), (Abs (merge q gv0) (merge pl ql)), (Abs (merge q gv0) (merge pl q)), (Abs (merge q gv0) (merge pl p)), (Abs (merge q gv0) (merge pl gv0)), (Abs (merge q gv0) (merge pl pl)), (Abs (merge q gv0) (insert k ql)), (Abs (merge q gv0) (insert k q)), (Abs (merge q gv0) (insert k p))
(Abs (merge q gv0) (insert k gv0)), (Abs (merge q gv0) (insert k pl)), (Abs (merge q gv0) (insert a ql)), (Abs (merge q gv0) (insert a q)), (Abs (merge q gv0) (insert a p)), (Abs (merge q gv0) (insert a gv0)), (Abs (merge q gv0) (insert a pl)), (Abs (merge q gv0) (maybe_swap ql)), (Abs (merge q gv0) (maybe_swap q)), (Abs (merge q gv0) (maybe_swap p))
(Abs (merge q gv0) (maybe_swap gv0)), (Abs (merge q gv0) (maybe_swap pl)), (Abs (merge q gv0) (ql ++ ql)), (Abs (merge q gv0) (ql ++ q)), (Abs (merge q gv0) (ql ++ p)), (Abs (merge q gv0) (ql ++ gv0)), (Abs (merge q gv0) (ql ++ pl)), (Abs (merge q gv0) (q ++ ql)), (Abs (merge q gv0) (q ++ q)), (Abs (merge q gv0) (q ++ p))
(Abs (merge q gv0) (q ++ gv0)), (Abs (merge q gv0) (q ++ pl)), (Abs (merge q gv0) (p ++ ql)), (Abs (merge q gv0) (p ++ q)), (Abs (merge q gv0) (p ++ p)), (Abs (merge q gv0) (p ++ gv0)), (Abs (merge q gv0) (p ++ pl)), (Abs (merge q gv0) (gv0 ++ ql)), (Abs (merge q gv0) (gv0 ++ q)), (Abs (merge q gv0) (gv0 ++ p))
(Abs (merge q gv0) (gv0 ++ gv0)), (Abs (merge q gv0) (gv0 ++ pl)), (Abs (merge q gv0) (pl ++ ql)), (Abs (merge q gv0) (pl ++ q)), (Abs (merge q gv0) (pl ++ p)), (Abs (merge q gv0) (pl ++ gv0)), (Abs (merge q gv0) (pl ++ pl)), (Abs (merge q gv0) []), (Abs (merge q pl) ql), (Abs (merge q pl) q)
(Abs (merge q pl) p), (Abs (merge q pl) gv0), (Abs (merge q pl) pl), (Abs (merge q pl) (k :: ql)), (Abs (merge q pl) (k :: q)), (Abs (merge q pl) (k :: p)), (Abs (merge q pl) (k :: gv0)), (Abs (merge q pl) (k :: pl)), (Abs (merge q pl) (a :: ql)), (Abs (merge q pl) (a :: q))
(Abs (merge q pl) (a :: p)), (Abs (merge q pl) (a :: gv0)), (Abs (merge q pl) (a :: pl)), (Abs (merge q pl) (merge ql ql)), (Abs (merge q pl) (merge ql q)), (Abs (merge q pl) (merge ql p)), (Abs (merge q pl) (merge ql gv0)), (Abs (merge q pl) (merge ql pl)), (Abs (merge q pl) (merge q ql)), (Abs (merge q pl) (merge q q))
(Abs (merge q pl) (merge q p)), (Abs (merge q pl) (merge q gv0)), (Abs (merge q pl) (merge p ql)), (Abs (merge q pl) (merge p q)), (Abs (merge q pl) (merge p p)), (Abs (merge q pl) (merge p gv0)), (Abs (merge q pl) (merge p pl)), (Abs (merge q pl) (merge gv0 ql)), (Abs (merge q pl) (merge gv0 q)), (Abs (merge q pl) (merge gv0 p))
(Abs (merge q pl) (merge gv0 gv0)), (Abs (merge q pl) (merge gv0 pl)), (Abs (merge q pl) (merge pl ql)), (Abs (merge q pl) (merge pl q)), (Abs (merge q pl) (merge pl p)), (Abs (merge q pl) (merge pl gv0)), (Abs (merge q pl) (merge pl pl)), (Abs (merge q pl) (insert k ql)), (Abs (merge q pl) (insert k q)), (Abs (merge q pl) (insert k p))
(Abs (merge q pl) (insert k gv0)), (Abs (merge q pl) (insert k pl)), (Abs (merge q pl) (insert a ql)), (Abs (merge q pl) (insert a q)), (Abs (merge q pl) (insert a p)), (Abs (merge q pl) (insert a gv0)), (Abs (merge q pl) (insert a pl)), (Abs (merge q pl) (maybe_swap ql)), (Abs (merge q pl) (maybe_swap q)), (Abs (merge q pl) (maybe_swap p))
(Abs (merge q pl) (maybe_swap gv0)), (Abs (merge q pl) (maybe_swap pl)), (Abs (merge q pl) (ql ++ ql)), (Abs (merge q pl) (ql ++ q)), (Abs (merge q pl) (ql ++ p)), (Abs (merge q pl) (ql ++ gv0)), (Abs (merge q pl) (ql ++ pl)), (Abs (merge q pl) (q ++ ql)), (Abs (merge q pl) (q ++ q)), (Abs (merge q pl) (q ++ p))
(Abs (merge q pl) (q ++ gv0)), (Abs (merge q pl) (q ++ pl)), (Abs (merge q pl) (p ++ ql)), (Abs (merge q pl) (p ++ q)), (Abs (merge q pl) (p ++ p)), (Abs (merge q pl) (p ++ gv0)), (Abs (merge q pl) (p ++ pl)), (Abs (merge q pl) (gv0 ++ ql)), (Abs (merge q pl) (gv0 ++ q)), (Abs (merge q pl) (gv0 ++ p))
(Abs (merge q pl) (gv0 ++ gv0)), (Abs (merge q pl) (gv0 ++ pl)), (Abs (merge q pl) (pl ++ ql)), (Abs (merge q pl) (pl ++ q)), (Abs (merge q pl) (pl ++ p)), (Abs (merge q pl) (pl ++ gv0)), (Abs (merge q pl) (pl ++ pl)), (Abs (merge q pl) []), (Abs (merge p ql) ql), (Abs (merge p ql) q)
(Abs (merge p ql) p), (Abs (merge p ql) gv0), (Abs (merge p ql) pl), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (k :: gv0)), (Abs (merge p ql) (k :: pl)), (Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: q))
(Abs (merge p ql) (a :: p)), (Abs (merge p ql) (a :: gv0)), (Abs (merge p ql) (a :: pl)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge ql gv0)), (Abs (merge p ql) (merge ql pl)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q q))
(Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge q gv0)), (Abs (merge p ql) (merge q pl)), (Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (merge p gv0)), (Abs (merge p ql) (merge p pl)), (Abs (merge p ql) (merge gv0 ql)), (Abs (merge p ql) (merge gv0 q)), (Abs (merge p ql) (merge gv0 p))
(Abs (merge p ql) (merge gv0 gv0)), (Abs (merge p ql) (merge gv0 pl)), (Abs (merge p ql) (merge pl ql)), (Abs (merge p ql) (merge pl q)), (Abs (merge p ql) (merge pl p)), (Abs (merge p ql) (merge pl gv0)), (Abs (merge p ql) (merge pl pl)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k p))
(Abs (merge p ql) (insert k gv0)), (Abs (merge p ql) (insert k pl)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (insert a gv0)), (Abs (merge p ql) (insert a pl)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap q)), (Abs (merge p ql) (maybe_swap p))
(Abs (merge p ql) (maybe_swap gv0)), (Abs (merge p ql) (maybe_swap pl)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (ql ++ gv0)), (Abs (merge p ql) (ql ++ pl)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ p))
(Abs (merge p ql) (q ++ gv0)), (Abs (merge p ql) (q ++ pl)), (Abs (merge p ql) (p ++ ql)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) (p ++ gv0)), (Abs (merge p ql) (p ++ pl)), (Abs (merge p ql) (gv0 ++ ql)), (Abs (merge p ql) (gv0 ++ q)), (Abs (merge p ql) (gv0 ++ p))
(Abs (merge p ql) (gv0 ++ gv0)), (Abs (merge p ql) (gv0 ++ pl)), (Abs (merge p ql) (pl ++ ql)), (Abs (merge p ql) (pl ++ q)), (Abs (merge p ql) (pl ++ p)), (Abs (merge p ql) (pl ++ gv0)), (Abs (merge p ql) (pl ++ pl)), (Abs (merge p ql) []), (Abs (merge p q) ql), (Abs (merge p q) q)
(Abs (merge p q) p), (Abs (merge p q) gv0), (Abs (merge p q) pl), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: gv0)), (Abs (merge p q) (k :: pl)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: q))
(Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: gv0)), (Abs (merge p q) (a :: pl)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge ql gv0)), (Abs (merge p q) (merge ql pl)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q q))
(Abs (merge p q) (merge q p)), (Abs (merge p q) (merge q gv0)), (Abs (merge p q) (merge q pl)), (Abs (merge p q) (merge p ql)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p gv0)), (Abs (merge p q) (merge p pl)), (Abs (merge p q) (merge gv0 ql)), (Abs (merge p q) (merge gv0 q)), (Abs (merge p q) (merge gv0 p))
(Abs (merge p q) (merge gv0 gv0)), (Abs (merge p q) (merge gv0 pl)), (Abs (merge p q) (merge pl ql)), (Abs (merge p q) (merge pl q)), (Abs (merge p q) (merge pl p)), (Abs (merge p q) (merge pl gv0)), (Abs (merge p q) (merge pl pl)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p))
(Abs (merge p q) (insert k gv0)), (Abs (merge p q) (insert k pl)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a gv0)), (Abs (merge p q) (insert a pl)), (Abs (merge p q) (maybe_swap ql)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p))
(Abs (merge p q) (maybe_swap gv0)), (Abs (merge p q) (maybe_swap pl)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ q)), (Abs (merge p q) (ql ++ p)), (Abs (merge p q) (ql ++ gv0)), (Abs (merge p q) (ql ++ pl)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ p))
(Abs (merge p q) (q ++ gv0)), (Abs (merge p q) (q ++ pl)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ gv0)), (Abs (merge p q) (p ++ pl)), (Abs (merge p q) (gv0 ++ ql)), (Abs (merge p q) (gv0 ++ q)), (Abs (merge p q) (gv0 ++ p))
(Abs (merge p q) (gv0 ++ gv0)), (Abs (merge p q) (gv0 ++ pl)), (Abs (merge p q) (pl ++ ql)), (Abs (merge p q) (pl ++ q)), (Abs (merge p q) (pl ++ p)), (Abs (merge p q) (pl ++ gv0)), (Abs (merge p q) (pl ++ pl)), (Abs (merge p q) []), (Abs (merge p p) ql), (Abs (merge p p) q)
(Abs (merge p p) p), (Abs (merge p p) gv0), (Abs (merge p p) pl), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: gv0)), (Abs (merge p p) (k :: pl)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: q))
(Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: gv0)), (Abs (merge p p) (a :: pl)), (Abs (merge p p) (merge ql ql)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge ql gv0)), (Abs (merge p p) (merge ql pl)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q q))
(Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q gv0)), (Abs (merge p p) (merge q pl)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p gv0)), (Abs (merge p p) (merge p pl)), (Abs (merge p p) (merge gv0 ql)), (Abs (merge p p) (merge gv0 q)), (Abs (merge p p) (merge gv0 p))
(Abs (merge p p) (merge gv0 gv0)), (Abs (merge p p) (merge gv0 pl)), (Abs (merge p p) (merge pl ql)), (Abs (merge p p) (merge pl q)), (Abs (merge p p) (merge pl p)), (Abs (merge p p) (merge pl gv0)), (Abs (merge p p) (merge pl pl)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k p))
(Abs (merge p p) (insert k gv0)), (Abs (merge p p) (insert k pl)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (insert a gv0)), (Abs (merge p p) (insert a pl)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p))
(Abs (merge p p) (maybe_swap gv0)), (Abs (merge p p) (maybe_swap pl)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (ql ++ gv0)), (Abs (merge p p) (ql ++ pl)), (Abs (merge p p) (q ++ ql)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ p))
(Abs (merge p p) (q ++ gv0)), (Abs (merge p p) (q ++ pl)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ gv0)), (Abs (merge p p) (p ++ pl)), (Abs (merge p p) (gv0 ++ ql)), (Abs (merge p p) (gv0 ++ q)), (Abs (merge p p) (gv0 ++ p))
(Abs (merge p p) (gv0 ++ gv0)), (Abs (merge p p) (gv0 ++ pl)), (Abs (merge p p) (pl ++ ql)), (Abs (merge p p) (pl ++ q)), (Abs (merge p p) (pl ++ p)), (Abs (merge p p) (pl ++ gv0)), (Abs (merge p p) (pl ++ pl)), (Abs (merge p p) []), (Abs (merge p gv0) ql), (Abs (merge p gv0) q)
(Abs (merge p gv0) p), (Abs (merge p gv0) gv0), (Abs (merge p gv0) pl), (Abs (merge p gv0) (k :: ql)), (Abs (merge p gv0) (k :: q)), (Abs (merge p gv0) (k :: p)), (Abs (merge p gv0) (k :: gv0)), (Abs (merge p gv0) (k :: pl)), (Abs (merge p gv0) (a :: ql)), (Abs (merge p gv0) (a :: q))
(Abs (merge p gv0) (a :: p)), (Abs (merge p gv0) (a :: gv0)), (Abs (merge p gv0) (a :: pl)), (Abs (merge p gv0) (merge ql ql)), (Abs (merge p gv0) (merge ql q)), (Abs (merge p gv0) (merge ql p)), (Abs (merge p gv0) (merge ql gv0)), (Abs (merge p gv0) (merge ql pl)), (Abs (merge p gv0) (merge q ql)), (Abs (merge p gv0) (merge q q))
(Abs (merge p gv0) (merge q p)), (Abs (merge p gv0) (merge q gv0)), (Abs (merge p gv0) (merge q pl)), (Abs (merge p gv0) (merge p ql)), (Abs (merge p gv0) (merge p q)), (Abs (merge p gv0) (merge p p)), (Abs (merge p gv0) (merge p pl)), (Abs (merge p gv0) (merge gv0 ql)), (Abs (merge p gv0) (merge gv0 q)), (Abs (merge p gv0) (merge gv0 p))
(Abs (merge p gv0) (merge gv0 gv0)), (Abs (merge p gv0) (merge gv0 pl)), (Abs (merge p gv0) (merge pl ql)), (Abs (merge p gv0) (merge pl q)), (Abs (merge p gv0) (merge pl p)), (Abs (merge p gv0) (merge pl gv0)), (Abs (merge p gv0) (merge pl pl)), (Abs (merge p gv0) (insert k ql)), (Abs (merge p gv0) (insert k q)), (Abs (merge p gv0) (insert k p))
(Abs (merge p gv0) (insert k gv0)), (Abs (merge p gv0) (insert k pl)), (Abs (merge p gv0) (insert a ql)), (Abs (merge p gv0) (insert a q)), (Abs (merge p gv0) (insert a p)), (Abs (merge p gv0) (insert a gv0)), (Abs (merge p gv0) (insert a pl)), (Abs (merge p gv0) (maybe_swap ql)), (Abs (merge p gv0) (maybe_swap q)), (Abs (merge p gv0) (maybe_swap p))
(Abs (merge p gv0) (maybe_swap gv0)), (Abs (merge p gv0) (maybe_swap pl)), (Abs (merge p gv0) (ql ++ ql)), (Abs (merge p gv0) (ql ++ q)), (Abs (merge p gv0) (ql ++ p)), (Abs (merge p gv0) (ql ++ gv0)), (Abs (merge p gv0) (ql ++ pl)), (Abs (merge p gv0) (q ++ ql)), (Abs (merge p gv0) (q ++ q)), (Abs (merge p gv0) (q ++ p))
(Abs (merge p gv0) (q ++ gv0)), (Abs (merge p gv0) (q ++ pl)), (Abs (merge p gv0) (p ++ ql)), (Abs (merge p gv0) (p ++ q)), (Abs (merge p gv0) (p ++ p)), (Abs (merge p gv0) (p ++ gv0)), (Abs (merge p gv0) (p ++ pl)), (Abs (merge p gv0) (gv0 ++ ql)), (Abs (merge p gv0) (gv0 ++ q)), (Abs (merge p gv0) (gv0 ++ p))
(Abs (merge p gv0) (gv0 ++ gv0)), (Abs (merge p gv0) (gv0 ++ pl)), (Abs (merge p gv0) (pl ++ ql)), (Abs (merge p gv0) (pl ++ q)), (Abs (merge p gv0) (pl ++ p)), (Abs (merge p gv0) (pl ++ gv0)), (Abs (merge p gv0) (pl ++ pl)), (Abs (merge p gv0) []), (Abs (merge p pl) ql), (Abs (merge p pl) q)
(Abs (merge p pl) p), (Abs (merge p pl) gv0), (Abs (merge p pl) pl), (Abs (merge p pl) (k :: ql)), (Abs (merge p pl) (k :: q)), (Abs (merge p pl) (k :: p)), (Abs (merge p pl) (k :: gv0)), (Abs (merge p pl) (k :: pl)), (Abs (merge p pl) (a :: ql)), (Abs (merge p pl) (a :: q))
(Abs (merge p pl) (a :: p)), (Abs (merge p pl) (a :: gv0)), (Abs (merge p pl) (a :: pl)), (Abs (merge p pl) (merge ql ql)), (Abs (merge p pl) (merge ql q)), (Abs (merge p pl) (merge ql p)), (Abs (merge p pl) (merge ql gv0)), (Abs (merge p pl) (merge ql pl)), (Abs (merge p pl) (merge q ql)), (Abs (merge p pl) (merge q q))
(Abs (merge p pl) (merge q p)), (Abs (merge p pl) (merge q gv0)), (Abs (merge p pl) (merge q pl)), (Abs (merge p pl) (merge p ql)), (Abs (merge p pl) (merge p q)), (Abs (merge p pl) (merge p p)), (Abs (merge p pl) (merge p gv0)), (Abs (merge p pl) (merge gv0 ql)), (Abs (merge p pl) (merge gv0 q)), (Abs (merge p pl) (merge gv0 p))
(Abs (merge p pl) (merge gv0 gv0)), (Abs (merge p pl) (merge gv0 pl)), (Abs (merge p pl) (merge pl ql)), (Abs (merge p pl) (merge pl q)), (Abs (merge p pl) (merge pl p)), (Abs (merge p pl) (merge pl gv0)), (Abs (merge p pl) (merge pl pl)), (Abs (merge p pl) (insert k ql)), (Abs (merge p pl) (insert k q)), (Abs (merge p pl) (insert k p))
(Abs (merge p pl) (insert k gv0)), (Abs (merge p pl) (insert k pl)), (Abs (merge p pl) (insert a ql)), (Abs (merge p pl) (insert a q)), (Abs (merge p pl) (insert a p)), (Abs (merge p pl) (insert a gv0)), (Abs (merge p pl) (insert a pl)), (Abs (merge p pl) (maybe_swap ql)), (Abs (merge p pl) (maybe_swap q)), (Abs (merge p pl) (maybe_swap p))
(Abs (merge p pl) (maybe_swap gv0)), (Abs (merge p pl) (maybe_swap pl)), (Abs (merge p pl) (ql ++ ql)), (Abs (merge p pl) (ql ++ q)), (Abs (merge p pl) (ql ++ p)), (Abs (merge p pl) (ql ++ gv0)), (Abs (merge p pl) (ql ++ pl)), (Abs (merge p pl) (q ++ ql)), (Abs (merge p pl) (q ++ q)), (Abs (merge p pl) (q ++ p))
(Abs (merge p pl) (q ++ gv0)), (Abs (merge p pl) (q ++ pl)), (Abs (merge p pl) (p ++ ql)), (Abs (merge p pl) (p ++ q)), (Abs (merge p pl) (p ++ p)), (Abs (merge p pl) (p ++ gv0)), (Abs (merge p pl) (p ++ pl)), (Abs (merge p pl) (gv0 ++ ql)), (Abs (merge p pl) (gv0 ++ q)), (Abs (merge p pl) (gv0 ++ p))
(Abs (merge p pl) (gv0 ++ gv0)), (Abs (merge p pl) (gv0 ++ pl)), (Abs (merge p pl) (pl ++ ql)), (Abs (merge p pl) (pl ++ q)), (Abs (merge p pl) (pl ++ p)), (Abs (merge p pl) (pl ++ gv0)), (Abs (merge p pl) (pl ++ pl)), (Abs (merge p pl) []), (Abs (merge gv0 ql) ql), (Abs (merge gv0 ql) q)
(Abs (merge gv0 ql) p), (Abs (merge gv0 ql) gv0), (Abs (merge gv0 ql) pl), (Abs (merge gv0 ql) (k :: ql)), (Abs (merge gv0 ql) (k :: q)), (Abs (merge gv0 ql) (k :: p)), (Abs (merge gv0 ql) (k :: gv0)), (Abs (merge gv0 ql) (k :: pl)), (Abs (merge gv0 ql) (a :: ql)), (Abs (merge gv0 ql) (a :: q))
(Abs (merge gv0 ql) (a :: p)), (Abs (merge gv0 ql) (a :: gv0)), (Abs (merge gv0 ql) (a :: pl)), (Abs (merge gv0 ql) (merge ql ql)), (Abs (merge gv0 ql) (merge ql q)), (Abs (merge gv0 ql) (merge ql p)), (Abs (merge gv0 ql) (merge ql gv0)), (Abs (merge gv0 ql) (merge ql pl)), (Abs (merge gv0 ql) (merge q ql)), (Abs (merge gv0 ql) (merge q q))
(Abs (merge gv0 ql) (merge q p)), (Abs (merge gv0 ql) (merge q gv0)), (Abs (merge gv0 ql) (merge q pl)), (Abs (merge gv0 ql) (merge p ql)), (Abs (merge gv0 ql) (merge p q)), (Abs (merge gv0 ql) (merge p p)), (Abs (merge gv0 ql) (merge p gv0)), (Abs (merge gv0 ql) (merge p pl)), (Abs (merge gv0 ql) (merge gv0 q)), (Abs (merge gv0 ql) (merge gv0 p))
(Abs (merge gv0 ql) (merge gv0 gv0)), (Abs (merge gv0 ql) (merge gv0 pl)), (Abs (merge gv0 ql) (merge pl ql)), (Abs (merge gv0 ql) (merge pl q)), (Abs (merge gv0 ql) (merge pl p)), (Abs (merge gv0 ql) (merge pl gv0)), (Abs (merge gv0 ql) (merge pl pl)), (Abs (merge gv0 ql) (insert k ql)), (Abs (merge gv0 ql) (insert k q)), (Abs (merge gv0 ql) (insert k p))
(Abs (merge gv0 ql) (insert k gv0)), (Abs (merge gv0 ql) (insert k pl)), (Abs (merge gv0 ql) (insert a ql)), (Abs (merge gv0 ql) (insert a q)), (Abs (merge gv0 ql) (insert a p)), (Abs (merge gv0 ql) (insert a gv0)), (Abs (merge gv0 ql) (insert a pl)), (Abs (merge gv0 ql) (maybe_swap ql)), (Abs (merge gv0 ql) (maybe_swap q)), (Abs (merge gv0 ql) (maybe_swap p))
(Abs (merge gv0 ql) (maybe_swap gv0)), (Abs (merge gv0 ql) (maybe_swap pl)), (Abs (merge gv0 ql) (ql ++ ql)), (Abs (merge gv0 ql) (ql ++ q)), (Abs (merge gv0 ql) (ql ++ p)), (Abs (merge gv0 ql) (ql ++ gv0)), (Abs (merge gv0 ql) (ql ++ pl)), (Abs (merge gv0 ql) (q ++ ql)), (Abs (merge gv0 ql) (q ++ q)), (Abs (merge gv0 ql) (q ++ p))
(Abs (merge gv0 ql) (q ++ gv0)), (Abs (merge gv0 ql) (q ++ pl)), (Abs (merge gv0 ql) (p ++ ql)), (Abs (merge gv0 ql) (p ++ q)), (Abs (merge gv0 ql) (p ++ p)), (Abs (merge gv0 ql) (p ++ gv0)), (Abs (merge gv0 ql) (p ++ pl)), (Abs (merge gv0 ql) (gv0 ++ ql)), (Abs (merge gv0 ql) (gv0 ++ q)), (Abs (merge gv0 ql) (gv0 ++ p))
(Abs (merge gv0 ql) (gv0 ++ gv0)), (Abs (merge gv0 ql) (gv0 ++ pl)), (Abs (merge gv0 ql) (pl ++ ql)), (Abs (merge gv0 ql) (pl ++ q)), (Abs (merge gv0 ql) (pl ++ p)), (Abs (merge gv0 ql) (pl ++ gv0)), (Abs (merge gv0 ql) (pl ++ pl)), (Abs (merge gv0 ql) []), (Abs (merge gv0 q) ql), (Abs (merge gv0 q) q)
(Abs (merge gv0 q) p), (Abs (merge gv0 q) gv0), (Abs (merge gv0 q) pl), (Abs (merge gv0 q) (k :: ql)), (Abs (merge gv0 q) (k :: q)), (Abs (merge gv0 q) (k :: p)), (Abs (merge gv0 q) (k :: gv0)), (Abs (merge gv0 q) (k :: pl)), (Abs (merge gv0 q) (a :: ql)), (Abs (merge gv0 q) (a :: q))
(Abs (merge gv0 q) (a :: p)), (Abs (merge gv0 q) (a :: gv0)), (Abs (merge gv0 q) (a :: pl)), (Abs (merge gv0 q) (merge ql ql)), (Abs (merge gv0 q) (merge ql q)), (Abs (merge gv0 q) (merge ql p)), (Abs (merge gv0 q) (merge ql gv0)), (Abs (merge gv0 q) (merge ql pl)), (Abs (merge gv0 q) (merge q ql)), (Abs (merge gv0 q) (merge q q))
(Abs (merge gv0 q) (merge q p)), (Abs (merge gv0 q) (merge q gv0)), (Abs (merge gv0 q) (merge q pl)), (Abs (merge gv0 q) (merge p ql)), (Abs (merge gv0 q) (merge p q)), (Abs (merge gv0 q) (merge p p)), (Abs (merge gv0 q) (merge p gv0)), (Abs (merge gv0 q) (merge p pl)), (Abs (merge gv0 q) (merge gv0 ql)), (Abs (merge gv0 q) (merge gv0 p))
(Abs (merge gv0 q) (merge gv0 gv0)), (Abs (merge gv0 q) (merge gv0 pl)), (Abs (merge gv0 q) (merge pl ql)), (Abs (merge gv0 q) (merge pl q)), (Abs (merge gv0 q) (merge pl p)), (Abs (merge gv0 q) (merge pl gv0)), (Abs (merge gv0 q) (merge pl pl)), (Abs (merge gv0 q) (insert k ql)), (Abs (merge gv0 q) (insert k q)), (Abs (merge gv0 q) (insert k p))
(Abs (merge gv0 q) (insert k gv0)), (Abs (merge gv0 q) (insert k pl)), (Abs (merge gv0 q) (insert a ql)), (Abs (merge gv0 q) (insert a q)), (Abs (merge gv0 q) (insert a p)), (Abs (merge gv0 q) (insert a gv0)), (Abs (merge gv0 q) (insert a pl)), (Abs (merge gv0 q) (maybe_swap ql)), (Abs (merge gv0 q) (maybe_swap q)), (Abs (merge gv0 q) (maybe_swap p))
(Abs (merge gv0 q) (maybe_swap gv0)), (Abs (merge gv0 q) (maybe_swap pl)), (Abs (merge gv0 q) (ql ++ ql)), (Abs (merge gv0 q) (ql ++ q)), (Abs (merge gv0 q) (ql ++ p)), (Abs (merge gv0 q) (ql ++ gv0)), (Abs (merge gv0 q) (ql ++ pl)), (Abs (merge gv0 q) (q ++ ql)), (Abs (merge gv0 q) (q ++ q)), (Abs (merge gv0 q) (q ++ p))
(Abs (merge gv0 q) (q ++ gv0)), (Abs (merge gv0 q) (q ++ pl)), (Abs (merge gv0 q) (p ++ ql)), (Abs (merge gv0 q) (p ++ q)), (Abs (merge gv0 q) (p ++ p)), (Abs (merge gv0 q) (p ++ gv0)), (Abs (merge gv0 q) (p ++ pl)), (Abs (merge gv0 q) (gv0 ++ ql)), (Abs (merge gv0 q) (gv0 ++ q)), (Abs (merge gv0 q) (gv0 ++ p))
(Abs (merge gv0 q) (gv0 ++ gv0)), (Abs (merge gv0 q) (gv0 ++ pl)), (Abs (merge gv0 q) (pl ++ ql)), (Abs (merge gv0 q) (pl ++ q)), (Abs (merge gv0 q) (pl ++ p)), (Abs (merge gv0 q) (pl ++ gv0)), (Abs (merge gv0 q) (pl ++ pl)), (Abs (merge gv0 q) []), (Abs (merge gv0 p) ql), (Abs (merge gv0 p) q)
(Abs (merge gv0 p) p), (Abs (merge gv0 p) gv0), (Abs (merge gv0 p) pl), (Abs (merge gv0 p) (k :: ql)), (Abs (merge gv0 p) (k :: q)), (Abs (merge gv0 p) (k :: p)), (Abs (merge gv0 p) (k :: gv0)), (Abs (merge gv0 p) (k :: pl)), (Abs (merge gv0 p) (a :: ql)), (Abs (merge gv0 p) (a :: q))
(Abs (merge gv0 p) (a :: p)), (Abs (merge gv0 p) (a :: gv0)), (Abs (merge gv0 p) (a :: pl)), (Abs (merge gv0 p) (merge ql ql)), (Abs (merge gv0 p) (merge ql q)), (Abs (merge gv0 p) (merge ql p)), (Abs (merge gv0 p) (merge ql gv0)), (Abs (merge gv0 p) (merge ql pl)), (Abs (merge gv0 p) (merge q ql)), (Abs (merge gv0 p) (merge q q))
(Abs (merge gv0 p) (merge q p)), (Abs (merge gv0 p) (merge q gv0)), (Abs (merge gv0 p) (merge q pl)), (Abs (merge gv0 p) (merge p ql)), (Abs (merge gv0 p) (merge p q)), (Abs (merge gv0 p) (merge p p)), (Abs (merge gv0 p) (merge p gv0)), (Abs (merge gv0 p) (merge p pl)), (Abs (merge gv0 p) (merge gv0 ql)), (Abs (merge gv0 p) (merge gv0 q))
(Abs (merge gv0 p) (merge gv0 gv0)), (Abs (merge gv0 p) (merge gv0 pl)), (Abs (merge gv0 p) (merge pl ql)), (Abs (merge gv0 p) (merge pl q)), (Abs (merge gv0 p) (merge pl p)), (Abs (merge gv0 p) (merge pl gv0)), (Abs (merge gv0 p) (merge pl pl)), (Abs (merge gv0 p) (insert k ql)), (Abs (merge gv0 p) (insert k q)), (Abs (merge gv0 p) (insert k p))
(Abs (merge gv0 p) (insert k gv0)), (Abs (merge gv0 p) (insert k pl)), (Abs (merge gv0 p) (insert a ql)), (Abs (merge gv0 p) (insert a q)), (Abs (merge gv0 p) (insert a p)), (Abs (merge gv0 p) (insert a gv0)), (Abs (merge gv0 p) (insert a pl)), (Abs (merge gv0 p) (maybe_swap ql)), (Abs (merge gv0 p) (maybe_swap q)), (Abs (merge gv0 p) (maybe_swap p))
(Abs (merge gv0 p) (maybe_swap gv0)), (Abs (merge gv0 p) (maybe_swap pl)), (Abs (merge gv0 p) (ql ++ ql)), (Abs (merge gv0 p) (ql ++ q)), (Abs (merge gv0 p) (ql ++ p)), (Abs (merge gv0 p) (ql ++ gv0)), (Abs (merge gv0 p) (ql ++ pl)), (Abs (merge gv0 p) (q ++ ql)), (Abs (merge gv0 p) (q ++ q)), (Abs (merge gv0 p) (q ++ p))
(Abs (merge gv0 p) (q ++ gv0)), (Abs (merge gv0 p) (q ++ pl)), (Abs (merge gv0 p) (p ++ ql)), (Abs (merge gv0 p) (p ++ q)), (Abs (merge gv0 p) (p ++ p)), (Abs (merge gv0 p) (p ++ gv0)), (Abs (merge gv0 p) (p ++ pl)), (Abs (merge gv0 p) (gv0 ++ ql)), (Abs (merge gv0 p) (gv0 ++ q)), (Abs (merge gv0 p) (gv0 ++ p))
(Abs (merge gv0 p) (gv0 ++ gv0)), (Abs (merge gv0 p) (gv0 ++ pl)), (Abs (merge gv0 p) (pl ++ ql)), (Abs (merge gv0 p) (pl ++ q)), (Abs (merge gv0 p) (pl ++ p)), (Abs (merge gv0 p) (pl ++ gv0)), (Abs (merge gv0 p) (pl ++ pl)), (Abs (merge gv0 p) []), (Abs (merge gv0 gv0) ql), (Abs (merge gv0 gv0) q)
(Abs (merge gv0 gv0) p), (Abs (merge gv0 gv0) gv0), (Abs (merge gv0 gv0) pl), (Abs (merge gv0 gv0) (k :: ql)), (Abs (merge gv0 gv0) (k :: q)), (Abs (merge gv0 gv0) (k :: p)), (Abs (merge gv0 gv0) (k :: gv0)), (Abs (merge gv0 gv0) (k :: pl)), (Abs (merge gv0 gv0) (a :: ql)), (Abs (merge gv0 gv0) (a :: q))
(Abs (merge gv0 gv0) (a :: p)), (Abs (merge gv0 gv0) (a :: gv0)), (Abs (merge gv0 gv0) (a :: pl)), (Abs (merge gv0 gv0) (merge ql ql)), (Abs (merge gv0 gv0) (merge ql q)), (Abs (merge gv0 gv0) (merge ql p)), (Abs (merge gv0 gv0) (merge ql gv0)), (Abs (merge gv0 gv0) (merge ql pl)), (Abs (merge gv0 gv0) (merge q ql)), (Abs (merge gv0 gv0) (merge q q))
(Abs (merge gv0 gv0) (merge q p)), (Abs (merge gv0 gv0) (merge q gv0)), (Abs (merge gv0 gv0) (merge q pl)), (Abs (merge gv0 gv0) (merge p ql)), (Abs (merge gv0 gv0) (merge p q)), (Abs (merge gv0 gv0) (merge p p)), (Abs (merge gv0 gv0) (merge p gv0)), (Abs (merge gv0 gv0) (merge p pl)), (Abs (merge gv0 gv0) (merge gv0 ql)), (Abs (merge gv0 gv0) (merge gv0 q))
(Abs (merge gv0 gv0) (merge gv0 p)), (Abs (merge gv0 gv0) (merge gv0 pl)), (Abs (merge gv0 gv0) (merge pl ql)), (Abs (merge gv0 gv0) (merge pl q)), (Abs (merge gv0 gv0) (merge pl p)), (Abs (merge gv0 gv0) (merge pl gv0)), (Abs (merge gv0 gv0) (merge pl pl)), (Abs (merge gv0 gv0) (insert k ql)), (Abs (merge gv0 gv0) (insert k q)), (Abs (merge gv0 gv0) (insert k p))
(Abs (merge gv0 gv0) (insert k gv0)), (Abs (merge gv0 gv0) (insert k pl)), (Abs (merge gv0 gv0) (insert a ql)), (Abs (merge gv0 gv0) (insert a q)), (Abs (merge gv0 gv0) (insert a p)), (Abs (merge gv0 gv0) (insert a gv0)), (Abs (merge gv0 gv0) (insert a pl)), (Abs (merge gv0 gv0) (maybe_swap ql)), (Abs (merge gv0 gv0) (maybe_swap q)), (Abs (merge gv0 gv0) (maybe_swap p))
(Abs (merge gv0 gv0) (maybe_swap gv0)), (Abs (merge gv0 gv0) (maybe_swap pl)), (Abs (merge gv0 gv0) (ql ++ ql)), (Abs (merge gv0 gv0) (ql ++ q)), (Abs (merge gv0 gv0) (ql ++ p)), (Abs (merge gv0 gv0) (ql ++ gv0)), (Abs (merge gv0 gv0) (ql ++ pl)), (Abs (merge gv0 gv0) (q ++ ql)), (Abs (merge gv0 gv0) (q ++ q)), (Abs (merge gv0 gv0) (q ++ p))
(Abs (merge gv0 gv0) (q ++ gv0)), (Abs (merge gv0 gv0) (q ++ pl)), (Abs (merge gv0 gv0) (p ++ ql)), (Abs (merge gv0 gv0) (p ++ q)), (Abs (merge gv0 gv0) (p ++ p)), (Abs (merge gv0 gv0) (p ++ gv0)), (Abs (merge gv0 gv0) (p ++ pl)), (Abs (merge gv0 gv0) (gv0 ++ ql)), (Abs (merge gv0 gv0) (gv0 ++ q)), (Abs (merge gv0 gv0) (gv0 ++ p))
(Abs (merge gv0 gv0) (gv0 ++ gv0)), (Abs (merge gv0 gv0) (gv0 ++ pl)), (Abs (merge gv0 gv0) (pl ++ ql)), (Abs (merge gv0 gv0) (pl ++ q)), (Abs (merge gv0 gv0) (pl ++ p)), (Abs (merge gv0 gv0) (pl ++ gv0)), (Abs (merge gv0 gv0) (pl ++ pl)), (Abs (merge gv0 gv0) []), (Abs (merge gv0 pl) ql), (Abs (merge gv0 pl) q)
(Abs (merge gv0 pl) p), (Abs (merge gv0 pl) gv0), (Abs (merge gv0 pl) pl), (Abs (merge gv0 pl) (k :: ql)), (Abs (merge gv0 pl) (k :: q)), (Abs (merge gv0 pl) (k :: p)), (Abs (merge gv0 pl) (k :: gv0)), (Abs (merge gv0 pl) (k :: pl)), (Abs (merge gv0 pl) (a :: ql)), (Abs (merge gv0 pl) (a :: q))
(Abs (merge gv0 pl) (a :: p)), (Abs (merge gv0 pl) (a :: gv0)), (Abs (merge gv0 pl) (a :: pl)), (Abs (merge gv0 pl) (merge ql ql)), (Abs (merge gv0 pl) (merge ql q)), (Abs (merge gv0 pl) (merge ql p)), (Abs (merge gv0 pl) (merge ql gv0)), (Abs (merge gv0 pl) (merge ql pl)), (Abs (merge gv0 pl) (merge q ql)), (Abs (merge gv0 pl) (merge q q))
(Abs (merge gv0 pl) (merge q p)), (Abs (merge gv0 pl) (merge q gv0)), (Abs (merge gv0 pl) (merge q pl)), (Abs (merge gv0 pl) (merge p ql)), (Abs (merge gv0 pl) (merge p q)), (Abs (merge gv0 pl) (merge p p)), (Abs (merge gv0 pl) (merge p gv0)), (Abs (merge gv0 pl) (merge p pl)), (Abs (merge gv0 pl) (merge gv0 ql)), (Abs (merge gv0 pl) (merge gv0 q))
(Abs (merge gv0 pl) (merge gv0 p)), (Abs (merge gv0 pl) (merge gv0 gv0)), (Abs (merge gv0 pl) (merge pl ql)), (Abs (merge gv0 pl) (merge pl q)), (Abs (merge gv0 pl) (merge pl p)), (Abs (merge gv0 pl) (merge pl gv0)), (Abs (merge gv0 pl) (merge pl pl)), (Abs (merge gv0 pl) (insert k ql)), (Abs (merge gv0 pl) (insert k q)), (Abs (merge gv0 pl) (insert k p))
(Abs (merge gv0 pl) (insert k gv0)), (Abs (merge gv0 pl) (insert k pl)), (Abs (merge gv0 pl) (insert a ql)), (Abs (merge gv0 pl) (insert a q)), (Abs (merge gv0 pl) (insert a p)), (Abs (merge gv0 pl) (insert a gv0)), (Abs (merge gv0 pl) (insert a pl)), (Abs (merge gv0 pl) (maybe_swap ql)), (Abs (merge gv0 pl) (maybe_swap q)), (Abs (merge gv0 pl) (maybe_swap p))
(Abs (merge gv0 pl) (maybe_swap gv0)), (Abs (merge gv0 pl) (maybe_swap pl)), (Abs (merge gv0 pl) (ql ++ ql)), (Abs (merge gv0 pl) (ql ++ q)), (Abs (merge gv0 pl) (ql ++ p)), (Abs (merge gv0 pl) (ql ++ gv0)), (Abs (merge gv0 pl) (ql ++ pl)), (Abs (merge gv0 pl) (q ++ ql)), (Abs (merge gv0 pl) (q ++ q)), (Abs (merge gv0 pl) (q ++ p))
(Abs (merge gv0 pl) (q ++ gv0)), (Abs (merge gv0 pl) (q ++ pl)), (Abs (merge gv0 pl) (p ++ ql)), (Abs (merge gv0 pl) (p ++ q)), (Abs (merge gv0 pl) (p ++ p)), (Abs (merge gv0 pl) (p ++ gv0)), (Abs (merge gv0 pl) (p ++ pl)), (Abs (merge gv0 pl) (gv0 ++ ql)), (Abs (merge gv0 pl) (gv0 ++ q)), (Abs (merge gv0 pl) (gv0 ++ p))
(Abs (merge gv0 pl) (gv0 ++ gv0)), (Abs (merge gv0 pl) (gv0 ++ pl)), (Abs (merge gv0 pl) (pl ++ ql)), (Abs (merge gv0 pl) (pl ++ q)), (Abs (merge gv0 pl) (pl ++ p)), (Abs (merge gv0 pl) (pl ++ gv0)), (Abs (merge gv0 pl) (pl ++ pl)), (Abs (merge gv0 pl) []), (Abs (merge pl ql) ql), (Abs (merge pl ql) q)
(Abs (merge pl ql) p), (Abs (merge pl ql) gv0), (Abs (merge pl ql) pl), (Abs (merge pl ql) (k :: ql)), (Abs (merge pl ql) (k :: q)), (Abs (merge pl ql) (k :: p)), (Abs (merge pl ql) (k :: gv0)), (Abs (merge pl ql) (k :: pl)), (Abs (merge pl ql) (a :: ql)), (Abs (merge pl ql) (a :: q))
(Abs (merge pl ql) (a :: p)), (Abs (merge pl ql) (a :: gv0)), (Abs (merge pl ql) (a :: pl)), (Abs (merge pl ql) (merge ql ql)), (Abs (merge pl ql) (merge ql q)), (Abs (merge pl ql) (merge ql p)), (Abs (merge pl ql) (merge ql gv0)), (Abs (merge pl ql) (merge ql pl)), (Abs (merge pl ql) (merge q ql)), (Abs (merge pl ql) (merge q q))
(Abs (merge pl ql) (merge q p)), (Abs (merge pl ql) (merge q gv0)), (Abs (merge pl ql) (merge q pl)), (Abs (merge pl ql) (merge p ql)), (Abs (merge pl ql) (merge p q)), (Abs (merge pl ql) (merge p p)), (Abs (merge pl ql) (merge p gv0)), (Abs (merge pl ql) (merge p pl)), (Abs (merge pl ql) (merge gv0 ql)), (Abs (merge pl ql) (merge gv0 q))
(Abs (merge pl ql) (merge gv0 p)), (Abs (merge pl ql) (merge gv0 gv0)), (Abs (merge pl ql) (merge gv0 pl)), (Abs (merge pl ql) (merge pl q)), (Abs (merge pl ql) (merge pl p)), (Abs (merge pl ql) (merge pl gv0)), (Abs (merge pl ql) (merge pl pl)), (Abs (merge pl ql) (insert k ql)), (Abs (merge pl ql) (insert k q)), (Abs (merge pl ql) (insert k p))
(Abs (merge pl ql) (insert k gv0)), (Abs (merge pl ql) (insert k pl)), (Abs (merge pl ql) (insert a ql)), (Abs (merge pl ql) (insert a q)), (Abs (merge pl ql) (insert a p)), (Abs (merge pl ql) (insert a gv0)), (Abs (merge pl ql) (insert a pl)), (Abs (merge pl ql) (maybe_swap ql)), (Abs (merge pl ql) (maybe_swap q)), (Abs (merge pl ql) (maybe_swap p))
(Abs (merge pl ql) (maybe_swap gv0)), (Abs (merge pl ql) (maybe_swap pl)), (Abs (merge pl ql) (ql ++ ql)), (Abs (merge pl ql) (ql ++ q)), (Abs (merge pl ql) (ql ++ p)), (Abs (merge pl ql) (ql ++ gv0)), (Abs (merge pl ql) (ql ++ pl)), (Abs (merge pl ql) (q ++ ql)), (Abs (merge pl ql) (q ++ q)), (Abs (merge pl ql) (q ++ p))
(Abs (merge pl ql) (q ++ gv0)), (Abs (merge pl ql) (q ++ pl)), (Abs (merge pl ql) (p ++ ql)), (Abs (merge pl ql) (p ++ q)), (Abs (merge pl ql) (p ++ p)), (Abs (merge pl ql) (p ++ gv0)), (Abs (merge pl ql) (p ++ pl)), (Abs (merge pl ql) (gv0 ++ ql)), (Abs (merge pl ql) (gv0 ++ q)), (Abs (merge pl ql) (gv0 ++ p))
(Abs (merge pl ql) (gv0 ++ gv0)), (Abs (merge pl ql) (gv0 ++ pl)), (Abs (merge pl ql) (pl ++ ql)), (Abs (merge pl ql) (pl ++ q)), (Abs (merge pl ql) (pl ++ p)), (Abs (merge pl ql) (pl ++ gv0)), (Abs (merge pl ql) (pl ++ pl)), (Abs (merge pl ql) []), (Abs (merge pl q) ql), (Abs (merge pl q) q)
(Abs (merge pl q) p), (Abs (merge pl q) gv0), (Abs (merge pl q) pl), (Abs (merge pl q) (k :: ql)), (Abs (merge pl q) (k :: q)), (Abs (merge pl q) (k :: p)), (Abs (merge pl q) (k :: gv0)), (Abs (merge pl q) (k :: pl)), (Abs (merge pl q) (a :: ql)), (Abs (merge pl q) (a :: q))
(Abs (merge pl q) (a :: p)), (Abs (merge pl q) (a :: gv0)), (Abs (merge pl q) (a :: pl)), (Abs (merge pl q) (merge ql ql)), (Abs (merge pl q) (merge ql q)), (Abs (merge pl q) (merge ql p)), (Abs (merge pl q) (merge ql gv0)), (Abs (merge pl q) (merge ql pl)), (Abs (merge pl q) (merge q ql)), (Abs (merge pl q) (merge q q))
(Abs (merge pl q) (merge q p)), (Abs (merge pl q) (merge q gv0)), (Abs (merge pl q) (merge q pl)), (Abs (merge pl q) (merge p ql)), (Abs (merge pl q) (merge p q)), (Abs (merge pl q) (merge p p)), (Abs (merge pl q) (merge p gv0)), (Abs (merge pl q) (merge p pl)), (Abs (merge pl q) (merge gv0 ql)), (Abs (merge pl q) (merge gv0 q))
(Abs (merge pl q) (merge gv0 p)), (Abs (merge pl q) (merge gv0 gv0)), (Abs (merge pl q) (merge gv0 pl)), (Abs (merge pl q) (merge pl ql)), (Abs (merge pl q) (merge pl p)), (Abs (merge pl q) (merge pl gv0)), (Abs (merge pl q) (merge pl pl)), (Abs (merge pl q) (insert k ql)), (Abs (merge pl q) (insert k q)), (Abs (merge pl q) (insert k p))
(Abs (merge pl q) (insert k gv0)), (Abs (merge pl q) (insert k pl)), (Abs (merge pl q) (insert a ql)), (Abs (merge pl q) (insert a q)), (Abs (merge pl q) (insert a p)), (Abs (merge pl q) (insert a gv0)), (Abs (merge pl q) (insert a pl)), (Abs (merge pl q) (maybe_swap ql)), (Abs (merge pl q) (maybe_swap q)), (Abs (merge pl q) (maybe_swap p))
(Abs (merge pl q) (maybe_swap gv0)), (Abs (merge pl q) (maybe_swap pl)), (Abs (merge pl q) (ql ++ ql)), (Abs (merge pl q) (ql ++ q)), (Abs (merge pl q) (ql ++ p)), (Abs (merge pl q) (ql ++ gv0)), (Abs (merge pl q) (ql ++ pl)), (Abs (merge pl q) (q ++ ql)), (Abs (merge pl q) (q ++ q)), (Abs (merge pl q) (q ++ p))
(Abs (merge pl q) (q ++ gv0)), (Abs (merge pl q) (q ++ pl)), (Abs (merge pl q) (p ++ ql)), (Abs (merge pl q) (p ++ q)), (Abs (merge pl q) (p ++ p)), (Abs (merge pl q) (p ++ gv0)), (Abs (merge pl q) (p ++ pl)), (Abs (merge pl q) (gv0 ++ ql)), (Abs (merge pl q) (gv0 ++ q)), (Abs (merge pl q) (gv0 ++ p))
(Abs (merge pl q) (gv0 ++ gv0)), (Abs (merge pl q) (gv0 ++ pl)), (Abs (merge pl q) (pl ++ ql)), (Abs (merge pl q) (pl ++ q)), (Abs (merge pl q) (pl ++ p)), (Abs (merge pl q) (pl ++ gv0)), (Abs (merge pl q) (pl ++ pl)), (Abs (merge pl q) []), (Abs (merge pl p) ql), (Abs (merge pl p) q)
(Abs (merge pl p) p), (Abs (merge pl p) gv0), (Abs (merge pl p) pl), (Abs (merge pl p) (k :: ql)), (Abs (merge pl p) (k :: q)), (Abs (merge pl p) (k :: p)), (Abs (merge pl p) (k :: gv0)), (Abs (merge pl p) (k :: pl)), (Abs (merge pl p) (a :: ql)), (Abs (merge pl p) (a :: q))
(Abs (merge pl p) (a :: p)), (Abs (merge pl p) (a :: gv0)), (Abs (merge pl p) (a :: pl)), (Abs (merge pl p) (merge ql ql)), (Abs (merge pl p) (merge ql q)), (Abs (merge pl p) (merge ql p)), (Abs (merge pl p) (merge ql gv0)), (Abs (merge pl p) (merge ql pl)), (Abs (merge pl p) (merge q ql)), (Abs (merge pl p) (merge q q))
(Abs (merge pl p) (merge q p)), (Abs (merge pl p) (merge q gv0)), (Abs (merge pl p) (merge q pl)), (Abs (merge pl p) (merge p ql)), (Abs (merge pl p) (merge p q)), (Abs (merge pl p) (merge p p)), (Abs (merge pl p) (merge p gv0)), (Abs (merge pl p) (merge p pl)), (Abs (merge pl p) (merge gv0 ql)), (Abs (merge pl p) (merge gv0 q))
(Abs (merge pl p) (merge gv0 p)), (Abs (merge pl p) (merge gv0 gv0)), (Abs (merge pl p) (merge gv0 pl)), (Abs (merge pl p) (merge pl ql)), (Abs (merge pl p) (merge pl q)), (Abs (merge pl p) (merge pl gv0)), (Abs (merge pl p) (merge pl pl)), (Abs (merge pl p) (insert k ql)), (Abs (merge pl p) (insert k q)), (Abs (merge pl p) (insert k p))
(Abs (merge pl p) (insert k gv0)), (Abs (merge pl p) (insert k pl)), (Abs (merge pl p) (insert a ql)), (Abs (merge pl p) (insert a q)), (Abs (merge pl p) (insert a p)), (Abs (merge pl p) (insert a gv0)), (Abs (merge pl p) (insert a pl)), (Abs (merge pl p) (maybe_swap ql)), (Abs (merge pl p) (maybe_swap q)), (Abs (merge pl p) (maybe_swap p))
(Abs (merge pl p) (maybe_swap gv0)), (Abs (merge pl p) (maybe_swap pl)), (Abs (merge pl p) (ql ++ ql)), (Abs (merge pl p) (ql ++ q)), (Abs (merge pl p) (ql ++ p)), (Abs (merge pl p) (ql ++ gv0)), (Abs (merge pl p) (ql ++ pl)), (Abs (merge pl p) (q ++ ql)), (Abs (merge pl p) (q ++ q)), (Abs (merge pl p) (q ++ p))
(Abs (merge pl p) (q ++ gv0)), (Abs (merge pl p) (q ++ pl)), (Abs (merge pl p) (p ++ ql)), (Abs (merge pl p) (p ++ q)), (Abs (merge pl p) (p ++ p)), (Abs (merge pl p) (p ++ gv0)), (Abs (merge pl p) (p ++ pl)), (Abs (merge pl p) (gv0 ++ ql)), (Abs (merge pl p) (gv0 ++ q)), (Abs (merge pl p) (gv0 ++ p))
(Abs (merge pl p) (gv0 ++ gv0)), (Abs (merge pl p) (gv0 ++ pl)), (Abs (merge pl p) (pl ++ ql)), (Abs (merge pl p) (pl ++ q)), (Abs (merge pl p) (pl ++ p)), (Abs (merge pl p) (pl ++ gv0)), (Abs (merge pl p) (pl ++ pl)), (Abs (merge pl p) []), (Abs (merge pl gv0) ql), (Abs (merge pl gv0) q)
(Abs (merge pl gv0) p), (Abs (merge pl gv0) gv0), (Abs (merge pl gv0) pl), (Abs (merge pl gv0) (k :: ql)), (Abs (merge pl gv0) (k :: q)), (Abs (merge pl gv0) (k :: p)), (Abs (merge pl gv0) (k :: gv0)), (Abs (merge pl gv0) (k :: pl)), (Abs (merge pl gv0) (a :: ql)), (Abs (merge pl gv0) (a :: q))
(Abs (merge pl gv0) (a :: p)), (Abs (merge pl gv0) (a :: gv0)), (Abs (merge pl gv0) (a :: pl)), (Abs (merge pl gv0) (merge ql ql)), (Abs (merge pl gv0) (merge ql q)), (Abs (merge pl gv0) (merge ql p)), (Abs (merge pl gv0) (merge ql gv0)), (Abs (merge pl gv0) (merge ql pl)), (Abs (merge pl gv0) (merge q ql)), (Abs (merge pl gv0) (merge q q))
(Abs (merge pl gv0) (merge q p)), (Abs (merge pl gv0) (merge q gv0)), (Abs (merge pl gv0) (merge q pl)), (Abs (merge pl gv0) (merge p ql)), (Abs (merge pl gv0) (merge p q)), (Abs (merge pl gv0) (merge p p)), (Abs (merge pl gv0) (merge p gv0)), (Abs (merge pl gv0) (merge p pl)), (Abs (merge pl gv0) (merge gv0 ql)), (Abs (merge pl gv0) (merge gv0 q))
(Abs (merge pl gv0) (merge gv0 p)), (Abs (merge pl gv0) (merge gv0 gv0)), (Abs (merge pl gv0) (merge gv0 pl)), (Abs (merge pl gv0) (merge pl ql)), (Abs (merge pl gv0) (merge pl q)), (Abs (merge pl gv0) (merge pl p)), (Abs (merge pl gv0) (merge pl pl)), (Abs (merge pl gv0) (insert k ql)), (Abs (merge pl gv0) (insert k q)), (Abs (merge pl gv0) (insert k p))
(Abs (merge pl gv0) (insert k gv0)), (Abs (merge pl gv0) (insert k pl)), (Abs (merge pl gv0) (insert a ql)), (Abs (merge pl gv0) (insert a q)), (Abs (merge pl gv0) (insert a p)), (Abs (merge pl gv0) (insert a gv0)), (Abs (merge pl gv0) (insert a pl)), (Abs (merge pl gv0) (maybe_swap ql)), (Abs (merge pl gv0) (maybe_swap q)), (Abs (merge pl gv0) (maybe_swap p))
(Abs (merge pl gv0) (maybe_swap gv0)), (Abs (merge pl gv0) (maybe_swap pl)), (Abs (merge pl gv0) (ql ++ ql)), (Abs (merge pl gv0) (ql ++ q)), (Abs (merge pl gv0) (ql ++ p)), (Abs (merge pl gv0) (ql ++ gv0)), (Abs (merge pl gv0) (ql ++ pl)), (Abs (merge pl gv0) (q ++ ql)), (Abs (merge pl gv0) (q ++ q)), (Abs (merge pl gv0) (q ++ p))
(Abs (merge pl gv0) (q ++ gv0)), (Abs (merge pl gv0) (q ++ pl)), (Abs (merge pl gv0) (p ++ ql)), (Abs (merge pl gv0) (p ++ q)), (Abs (merge pl gv0) (p ++ p)), (Abs (merge pl gv0) (p ++ gv0)), (Abs (merge pl gv0) (p ++ pl)), (Abs (merge pl gv0) (gv0 ++ ql)), (Abs (merge pl gv0) (gv0 ++ q)), (Abs (merge pl gv0) (gv0 ++ p))
(Abs (merge pl gv0) (gv0 ++ gv0)), (Abs (merge pl gv0) (gv0 ++ pl)), (Abs (merge pl gv0) (pl ++ ql)), (Abs (merge pl gv0) (pl ++ q)), (Abs (merge pl gv0) (pl ++ p)), (Abs (merge pl gv0) (pl ++ gv0)), (Abs (merge pl gv0) (pl ++ pl)), (Abs (merge pl gv0) []), (Abs (merge pl pl) ql), (Abs (merge pl pl) q)
(Abs (merge pl pl) p), (Abs (merge pl pl) gv0), (Abs (merge pl pl) pl), (Abs (merge pl pl) (k :: ql)), (Abs (merge pl pl) (k :: q)), (Abs (merge pl pl) (k :: p)), (Abs (merge pl pl) (k :: gv0)), (Abs (merge pl pl) (k :: pl)), (Abs (merge pl pl) (a :: ql)), (Abs (merge pl pl) (a :: q))
(Abs (merge pl pl) (a :: p)), (Abs (merge pl pl) (a :: gv0)), (Abs (merge pl pl) (a :: pl)), (Abs (merge pl pl) (merge ql ql)), (Abs (merge pl pl) (merge ql q)), (Abs (merge pl pl) (merge ql p)), (Abs (merge pl pl) (merge ql gv0)), (Abs (merge pl pl) (merge ql pl)), (Abs (merge pl pl) (merge q ql)), (Abs (merge pl pl) (merge q q))
(Abs (merge pl pl) (merge q p)), (Abs (merge pl pl) (merge q gv0)), (Abs (merge pl pl) (merge q pl)), (Abs (merge pl pl) (merge p ql)), (Abs (merge pl pl) (merge p q)), (Abs (merge pl pl) (merge p p)), (Abs (merge pl pl) (merge p gv0)), (Abs (merge pl pl) (merge p pl)), (Abs (merge pl pl) (merge gv0 ql)), (Abs (merge pl pl) (merge gv0 q))
(Abs (merge pl pl) (merge gv0 p)), (Abs (merge pl pl) (merge gv0 gv0)), (Abs (merge pl pl) (merge gv0 pl)), (Abs (merge pl pl) (merge pl ql)), (Abs (merge pl pl) (merge pl q)), (Abs (merge pl pl) (merge pl p)), (Abs (merge pl pl) (merge pl gv0)), (Abs (merge pl pl) (insert k ql)), (Abs (merge pl pl) (insert k q)), (Abs (merge pl pl) (insert k p))
(Abs (merge pl pl) (insert k gv0)), (Abs (merge pl pl) (insert k pl)), (Abs (merge pl pl) (insert a ql)), (Abs (merge pl pl) (insert a q)), (Abs (merge pl pl) (insert a p)), (Abs (merge pl pl) (insert a gv0)), (Abs (merge pl pl) (insert a pl)), (Abs (merge pl pl) (maybe_swap ql)), (Abs (merge pl pl) (maybe_swap q)), (Abs (merge pl pl) (maybe_swap p))
(Abs (merge pl pl) (maybe_swap gv0)), (Abs (merge pl pl) (maybe_swap pl)), (Abs (merge pl pl) (ql ++ ql)), (Abs (merge pl pl) (ql ++ q)), (Abs (merge pl pl) (ql ++ p)), (Abs (merge pl pl) (ql ++ gv0)), (Abs (merge pl pl) (ql ++ pl)), (Abs (merge pl pl) (q ++ ql)), (Abs (merge pl pl) (q ++ q)), (Abs (merge pl pl) (q ++ p))
(Abs (merge pl pl) (q ++ gv0)), (Abs (merge pl pl) (q ++ pl)), (Abs (merge pl pl) (p ++ ql)), (Abs (merge pl pl) (p ++ q)), (Abs (merge pl pl) (p ++ p)), (Abs (merge pl pl) (p ++ gv0)), (Abs (merge pl pl) (p ++ pl)), (Abs (merge pl pl) (gv0 ++ ql)), (Abs (merge pl pl) (gv0 ++ q)), (Abs (merge pl pl) (gv0 ++ p))
(Abs (merge pl pl) (gv0 ++ gv0)), (Abs (merge pl pl) (gv0 ++ pl)), (Abs (merge pl pl) (pl ++ ql)), (Abs (merge pl pl) (pl ++ q)), (Abs (merge pl pl) (pl ++ p)), (Abs (merge pl pl) (pl ++ gv0)), (Abs (merge pl pl) (pl ++ pl)), (Abs (merge pl pl) []), (Abs (insert k ql) ql), (Abs (insert k ql) q)
(Abs (insert k ql) p), (Abs (insert k ql) gv0), (Abs (insert k ql) pl), (Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: p)), (Abs (insert k ql) (k :: gv0)), (Abs (insert k ql) (k :: pl)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: q))
(Abs (insert k ql) (a :: p)), (Abs (insert k ql) (a :: gv0)), (Abs (insert k ql) (a :: pl)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge ql gv0)), (Abs (insert k ql) (merge ql pl)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q q))
(Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge q gv0)), (Abs (insert k ql) (merge q pl)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (merge p gv0)), (Abs (insert k ql) (merge p pl)), (Abs (insert k ql) (merge gv0 ql)), (Abs (insert k ql) (merge gv0 q))
(Abs (insert k ql) (merge gv0 p)), (Abs (insert k ql) (merge gv0 gv0)), (Abs (insert k ql) (merge gv0 pl)), (Abs (insert k ql) (merge pl ql)), (Abs (insert k ql) (merge pl q)), (Abs (insert k ql) (merge pl p)), (Abs (insert k ql) (merge pl gv0)), (Abs (insert k ql) (merge pl pl)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p))
(Abs (insert k ql) (insert k gv0)), (Abs (insert k ql) (insert k pl)), (Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a p)), (Abs (insert k ql) (insert a gv0)), (Abs (insert k ql) (insert a pl)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap p))
(Abs (insert k ql) (maybe_swap gv0)), (Abs (insert k ql) (maybe_swap pl)), (Abs (insert k ql) (ql ++ ql)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (ql ++ gv0)), (Abs (insert k ql) (ql ++ pl)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ q)), (Abs (insert k ql) (q ++ p))
(Abs (insert k ql) (q ++ gv0)), (Abs (insert k ql) (q ++ pl)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) (p ++ gv0)), (Abs (insert k ql) (p ++ pl)), (Abs (insert k ql) (gv0 ++ ql)), (Abs (insert k ql) (gv0 ++ q)), (Abs (insert k ql) (gv0 ++ p))
(Abs (insert k ql) (gv0 ++ gv0)), (Abs (insert k ql) (gv0 ++ pl)), (Abs (insert k ql) (pl ++ ql)), (Abs (insert k ql) (pl ++ q)), (Abs (insert k ql) (pl ++ p)), (Abs (insert k ql) (pl ++ gv0)), (Abs (insert k ql) (pl ++ pl)), (Abs (insert k ql) []), (Abs (insert k q) ql), (Abs (insert k q) q)
(Abs (insert k q) p), (Abs (insert k q) gv0), (Abs (insert k q) pl), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: gv0)), (Abs (insert k q) (k :: pl)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: q))
(Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: gv0)), (Abs (insert k q) (a :: pl)), (Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql p)), (Abs (insert k q) (merge ql gv0)), (Abs (insert k q) (merge ql pl)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q q))
(Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q gv0)), (Abs (insert k q) (merge q pl)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (merge p gv0)), (Abs (insert k q) (merge p pl)), (Abs (insert k q) (merge gv0 ql)), (Abs (insert k q) (merge gv0 q))
(Abs (insert k q) (merge gv0 p)), (Abs (insert k q) (merge gv0 gv0)), (Abs (insert k q) (merge gv0 pl)), (Abs (insert k q) (merge pl ql)), (Abs (insert k q) (merge pl q)), (Abs (insert k q) (merge pl p)), (Abs (insert k q) (merge pl gv0)), (Abs (insert k q) (merge pl pl)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k p))
(Abs (insert k q) (insert k gv0)), (Abs (insert k q) (insert k pl)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a gv0)), (Abs (insert k q) (insert a pl)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p))
(Abs (insert k q) (maybe_swap gv0)), (Abs (insert k q) (maybe_swap pl)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (ql ++ gv0)), (Abs (insert k q) (ql ++ pl)), (Abs (insert k q) (q ++ ql)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ p))
(Abs (insert k q) (q ++ gv0)), (Abs (insert k q) (q ++ pl)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ gv0)), (Abs (insert k q) (p ++ pl)), (Abs (insert k q) (gv0 ++ ql)), (Abs (insert k q) (gv0 ++ q)), (Abs (insert k q) (gv0 ++ p))
(Abs (insert k q) (gv0 ++ gv0)), (Abs (insert k q) (gv0 ++ pl)), (Abs (insert k q) (pl ++ ql)), (Abs (insert k q) (pl ++ q)), (Abs (insert k q) (pl ++ p)), (Abs (insert k q) (pl ++ gv0)), (Abs (insert k q) (pl ++ pl)), (Abs (insert k q) []), (Abs (insert k p) ql), (Abs (insert k p) q)
(Abs (insert k p) p), (Abs (insert k p) gv0), (Abs (insert k p) pl), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: gv0)), (Abs (insert k p) (k :: pl)), (Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: q))
(Abs (insert k p) (a :: p)), (Abs (insert k p) (a :: gv0)), (Abs (insert k p) (a :: pl)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge ql gv0)), (Abs (insert k p) (merge ql pl)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q q))
(Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q gv0)), (Abs (insert k p) (merge q pl)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p gv0)), (Abs (insert k p) (merge p pl)), (Abs (insert k p) (merge gv0 ql)), (Abs (insert k p) (merge gv0 q))
(Abs (insert k p) (merge gv0 p)), (Abs (insert k p) (merge gv0 gv0)), (Abs (insert k p) (merge gv0 pl)), (Abs (insert k p) (merge pl ql)), (Abs (insert k p) (merge pl q)), (Abs (insert k p) (merge pl p)), (Abs (insert k p) (merge pl gv0)), (Abs (insert k p) (merge pl pl)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k q))
(Abs (insert k p) (insert k gv0)), (Abs (insert k p) (insert k pl)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a gv0)), (Abs (insert k p) (insert a pl)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap p))
(Abs (insert k p) (maybe_swap gv0)), (Abs (insert k p) (maybe_swap pl)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (ql ++ gv0)), (Abs (insert k p) (ql ++ pl)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ p))
(Abs (insert k p) (q ++ gv0)), (Abs (insert k p) (q ++ pl)), (Abs (insert k p) (p ++ ql)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ gv0)), (Abs (insert k p) (p ++ pl)), (Abs (insert k p) (gv0 ++ ql)), (Abs (insert k p) (gv0 ++ q)), (Abs (insert k p) (gv0 ++ p))
(Abs (insert k p) (gv0 ++ gv0)), (Abs (insert k p) (gv0 ++ pl)), (Abs (insert k p) (pl ++ ql)), (Abs (insert k p) (pl ++ q)), (Abs (insert k p) (pl ++ p)), (Abs (insert k p) (pl ++ gv0)), (Abs (insert k p) (pl ++ pl)), (Abs (insert k p) []), (Abs (insert k gv0) ql), (Abs (insert k gv0) q)
(Abs (insert k gv0) p), (Abs (insert k gv0) gv0), (Abs (insert k gv0) pl), (Abs (insert k gv0) (k :: ql)), (Abs (insert k gv0) (k :: q)), (Abs (insert k gv0) (k :: p)), (Abs (insert k gv0) (k :: gv0)), (Abs (insert k gv0) (k :: pl)), (Abs (insert k gv0) (a :: ql)), (Abs (insert k gv0) (a :: q))
(Abs (insert k gv0) (a :: p)), (Abs (insert k gv0) (a :: gv0)), (Abs (insert k gv0) (a :: pl)), (Abs (insert k gv0) (merge ql ql)), (Abs (insert k gv0) (merge ql q)), (Abs (insert k gv0) (merge ql p)), (Abs (insert k gv0) (merge ql gv0)), (Abs (insert k gv0) (merge ql pl)), (Abs (insert k gv0) (merge q ql)), (Abs (insert k gv0) (merge q q))
(Abs (insert k gv0) (merge q p)), (Abs (insert k gv0) (merge q gv0)), (Abs (insert k gv0) (merge q pl)), (Abs (insert k gv0) (merge p ql)), (Abs (insert k gv0) (merge p q)), (Abs (insert k gv0) (merge p p)), (Abs (insert k gv0) (merge p gv0)), (Abs (insert k gv0) (merge p pl)), (Abs (insert k gv0) (merge gv0 ql)), (Abs (insert k gv0) (merge gv0 q))
(Abs (insert k gv0) (merge gv0 p)), (Abs (insert k gv0) (merge gv0 gv0)), (Abs (insert k gv0) (merge gv0 pl)), (Abs (insert k gv0) (merge pl ql)), (Abs (insert k gv0) (merge pl q)), (Abs (insert k gv0) (merge pl p)), (Abs (insert k gv0) (merge pl gv0)), (Abs (insert k gv0) (merge pl pl)), (Abs (insert k gv0) (insert k ql)), (Abs (insert k gv0) (insert k q))
(Abs (insert k gv0) (insert k p)), (Abs (insert k gv0) (insert k pl)), (Abs (insert k gv0) (insert a ql)), (Abs (insert k gv0) (insert a q)), (Abs (insert k gv0) (insert a p)), (Abs (insert k gv0) (insert a gv0)), (Abs (insert k gv0) (insert a pl)), (Abs (insert k gv0) (maybe_swap ql)), (Abs (insert k gv0) (maybe_swap q)), (Abs (insert k gv0) (maybe_swap p))
(Abs (insert k gv0) (maybe_swap gv0)), (Abs (insert k gv0) (maybe_swap pl)), (Abs (insert k gv0) (ql ++ ql)), (Abs (insert k gv0) (ql ++ q)), (Abs (insert k gv0) (ql ++ p)), (Abs (insert k gv0) (ql ++ gv0)), (Abs (insert k gv0) (ql ++ pl)), (Abs (insert k gv0) (q ++ ql)), (Abs (insert k gv0) (q ++ q)), (Abs (insert k gv0) (q ++ p))
(Abs (insert k gv0) (q ++ gv0)), (Abs (insert k gv0) (q ++ pl)), (Abs (insert k gv0) (p ++ ql)), (Abs (insert k gv0) (p ++ q)), (Abs (insert k gv0) (p ++ p)), (Abs (insert k gv0) (p ++ gv0)), (Abs (insert k gv0) (p ++ pl)), (Abs (insert k gv0) (gv0 ++ ql)), (Abs (insert k gv0) (gv0 ++ q)), (Abs (insert k gv0) (gv0 ++ p))
(Abs (insert k gv0) (gv0 ++ gv0)), (Abs (insert k gv0) (gv0 ++ pl)), (Abs (insert k gv0) (pl ++ ql)), (Abs (insert k gv0) (pl ++ q)), (Abs (insert k gv0) (pl ++ p)), (Abs (insert k gv0) (pl ++ gv0)), (Abs (insert k gv0) (pl ++ pl)), (Abs (insert k gv0) []), (Abs (insert k pl) ql), (Abs (insert k pl) q)
(Abs (insert k pl) p), (Abs (insert k pl) gv0), (Abs (insert k pl) pl), (Abs (insert k pl) (k :: ql)), (Abs (insert k pl) (k :: q)), (Abs (insert k pl) (k :: p)), (Abs (insert k pl) (k :: gv0)), (Abs (insert k pl) (k :: pl)), (Abs (insert k pl) (a :: ql)), (Abs (insert k pl) (a :: q))
(Abs (insert k pl) (a :: p)), (Abs (insert k pl) (a :: gv0)), (Abs (insert k pl) (a :: pl)), (Abs (insert k pl) (merge ql ql)), (Abs (insert k pl) (merge ql q)), (Abs (insert k pl) (merge ql p)), (Abs (insert k pl) (merge ql gv0)), (Abs (insert k pl) (merge ql pl)), (Abs (insert k pl) (merge q ql)), (Abs (insert k pl) (merge q q))
(Abs (insert k pl) (merge q p)), (Abs (insert k pl) (merge q gv0)), (Abs (insert k pl) (merge q pl)), (Abs (insert k pl) (merge p ql)), (Abs (insert k pl) (merge p q)), (Abs (insert k pl) (merge p p)), (Abs (insert k pl) (merge p gv0)), (Abs (insert k pl) (merge p pl)), (Abs (insert k pl) (merge gv0 ql)), (Abs (insert k pl) (merge gv0 q))
(Abs (insert k pl) (merge gv0 p)), (Abs (insert k pl) (merge gv0 gv0)), (Abs (insert k pl) (merge gv0 pl)), (Abs (insert k pl) (merge pl ql)), (Abs (insert k pl) (merge pl q)), (Abs (insert k pl) (merge pl p)), (Abs (insert k pl) (merge pl gv0)), (Abs (insert k pl) (merge pl pl)), (Abs (insert k pl) (insert k ql)), (Abs (insert k pl) (insert k q))
(Abs (insert k pl) (insert k p)), (Abs (insert k pl) (insert k gv0)), (Abs (insert k pl) (insert a ql)), (Abs (insert k pl) (insert a q)), (Abs (insert k pl) (insert a p)), (Abs (insert k pl) (insert a gv0)), (Abs (insert k pl) (insert a pl)), (Abs (insert k pl) (maybe_swap ql)), (Abs (insert k pl) (maybe_swap q)), (Abs (insert k pl) (maybe_swap p))
(Abs (insert k pl) (maybe_swap gv0)), (Abs (insert k pl) (maybe_swap pl)), (Abs (insert k pl) (ql ++ ql)), (Abs (insert k pl) (ql ++ q)), (Abs (insert k pl) (ql ++ p)), (Abs (insert k pl) (ql ++ gv0)), (Abs (insert k pl) (ql ++ pl)), (Abs (insert k pl) (q ++ ql)), (Abs (insert k pl) (q ++ q)), (Abs (insert k pl) (q ++ p))
(Abs (insert k pl) (q ++ gv0)), (Abs (insert k pl) (q ++ pl)), (Abs (insert k pl) (p ++ ql)), (Abs (insert k pl) (p ++ q)), (Abs (insert k pl) (p ++ p)), (Abs (insert k pl) (p ++ gv0)), (Abs (insert k pl) (p ++ pl)), (Abs (insert k pl) (gv0 ++ ql)), (Abs (insert k pl) (gv0 ++ q)), (Abs (insert k pl) (gv0 ++ p))
(Abs (insert k pl) (gv0 ++ gv0)), (Abs (insert k pl) (gv0 ++ pl)), (Abs (insert k pl) (pl ++ ql)), (Abs (insert k pl) (pl ++ q)), (Abs (insert k pl) (pl ++ p)), (Abs (insert k pl) (pl ++ gv0)), (Abs (insert k pl) (pl ++ pl)), (Abs (insert k pl) []), (Abs (insert a ql) ql), (Abs (insert a ql) q)
(Abs (insert a ql) p), (Abs (insert a ql) gv0), (Abs (insert a ql) pl), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (k :: gv0)), (Abs (insert a ql) (k :: pl)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: q))
(Abs (insert a ql) (a :: p)), (Abs (insert a ql) (a :: gv0)), (Abs (insert a ql) (a :: pl)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge ql gv0)), (Abs (insert a ql) (merge ql pl)), (Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q q))
(Abs (insert a ql) (merge q p)), (Abs (insert a ql) (merge q gv0)), (Abs (insert a ql) (merge q pl)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (merge p gv0)), (Abs (insert a ql) (merge p pl)), (Abs (insert a ql) (merge gv0 ql)), (Abs (insert a ql) (merge gv0 q))
(Abs (insert a ql) (merge gv0 p)), (Abs (insert a ql) (merge gv0 gv0)), (Abs (insert a ql) (merge gv0 pl)), (Abs (insert a ql) (merge pl ql)), (Abs (insert a ql) (merge pl q)), (Abs (insert a ql) (merge pl p)), (Abs (insert a ql) (merge pl gv0)), (Abs (insert a ql) (merge pl pl)), (Abs (insert a ql) (insert k ql)), (Abs (insert a ql) (insert k q))
(Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert k gv0)), (Abs (insert a ql) (insert k pl)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (insert a gv0)), (Abs (insert a ql) (insert a pl)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap p))
(Abs (insert a ql) (maybe_swap gv0)), (Abs (insert a ql) (maybe_swap pl)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (ql ++ gv0)), (Abs (insert a ql) (ql ++ pl)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ p))
(Abs (insert a ql) (q ++ gv0)), (Abs (insert a ql) (q ++ pl)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ q)), (Abs (insert a ql) (p ++ p)), (Abs (insert a ql) (p ++ gv0)), (Abs (insert a ql) (p ++ pl)), (Abs (insert a ql) (gv0 ++ ql)), (Abs (insert a ql) (gv0 ++ q)), (Abs (insert a ql) (gv0 ++ p))
(Abs (insert a ql) (gv0 ++ gv0)), (Abs (insert a ql) (gv0 ++ pl)), (Abs (insert a ql) (pl ++ ql)), (Abs (insert a ql) (pl ++ q)), (Abs (insert a ql) (pl ++ p)), (Abs (insert a ql) (pl ++ gv0)), (Abs (insert a ql) (pl ++ pl)), (Abs (insert a ql) []), (Abs (insert a q) ql), (Abs (insert a q) q)
(Abs (insert a q) p), (Abs (insert a q) gv0), (Abs (insert a q) pl), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: gv0)), (Abs (insert a q) (k :: pl)), (Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: q))
(Abs (insert a q) (a :: p)), (Abs (insert a q) (a :: gv0)), (Abs (insert a q) (a :: pl)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge ql gv0)), (Abs (insert a q) (merge ql pl)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q q))
(Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q gv0)), (Abs (insert a q) (merge q pl)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p gv0)), (Abs (insert a q) (merge p pl)), (Abs (insert a q) (merge gv0 ql)), (Abs (insert a q) (merge gv0 q))
(Abs (insert a q) (merge gv0 p)), (Abs (insert a q) (merge gv0 gv0)), (Abs (insert a q) (merge gv0 pl)), (Abs (insert a q) (merge pl ql)), (Abs (insert a q) (merge pl q)), (Abs (insert a q) (merge pl p)), (Abs (insert a q) (merge pl gv0)), (Abs (insert a q) (merge pl pl)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k q))
(Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k gv0)), (Abs (insert a q) (insert k pl)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a gv0)), (Abs (insert a q) (insert a pl)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap p))
(Abs (insert a q) (maybe_swap gv0)), (Abs (insert a q) (maybe_swap pl)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (ql ++ gv0)), (Abs (insert a q) (ql ++ pl)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ p))
(Abs (insert a q) (q ++ gv0)), (Abs (insert a q) (q ++ pl)), (Abs (insert a q) (p ++ ql)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ gv0)), (Abs (insert a q) (p ++ pl)), (Abs (insert a q) (gv0 ++ ql)), (Abs (insert a q) (gv0 ++ q)), (Abs (insert a q) (gv0 ++ p))
(Abs (insert a q) (gv0 ++ gv0)), (Abs (insert a q) (gv0 ++ pl)), (Abs (insert a q) (pl ++ ql)), (Abs (insert a q) (pl ++ q)), (Abs (insert a q) (pl ++ p)), (Abs (insert a q) (pl ++ gv0)), (Abs (insert a q) (pl ++ pl)), (Abs (insert a q) []), (Abs (insert a p) ql), (Abs (insert a p) q)
(Abs (insert a p) p), (Abs (insert a p) gv0), (Abs (insert a p) pl), (Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (k :: gv0)), (Abs (insert a p) (k :: pl)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: q))
(Abs (insert a p) (a :: p)), (Abs (insert a p) (a :: gv0)), (Abs (insert a p) (a :: pl)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge ql gv0)), (Abs (insert a p) (merge ql pl)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q q))
(Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q gv0)), (Abs (insert a p) (merge q pl)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p gv0)), (Abs (insert a p) (merge p pl)), (Abs (insert a p) (merge gv0 ql)), (Abs (insert a p) (merge gv0 q))
(Abs (insert a p) (merge gv0 p)), (Abs (insert a p) (merge gv0 gv0)), (Abs (insert a p) (merge gv0 pl)), (Abs (insert a p) (merge pl ql)), (Abs (insert a p) (merge pl q)), (Abs (insert a p) (merge pl p)), (Abs (insert a p) (merge pl gv0)), (Abs (insert a p) (merge pl pl)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k q))
(Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k gv0)), (Abs (insert a p) (insert k pl)), (Abs (insert a p) (insert a ql)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a gv0)), (Abs (insert a p) (insert a pl)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p))
(Abs (insert a p) (maybe_swap gv0)), (Abs (insert a p) (maybe_swap pl)), (Abs (insert a p) (ql ++ ql)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (ql ++ gv0)), (Abs (insert a p) (ql ++ pl)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ p))
(Abs (insert a p) (q ++ gv0)), (Abs (insert a p) (q ++ pl)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ gv0)), (Abs (insert a p) (p ++ pl)), (Abs (insert a p) (gv0 ++ ql)), (Abs (insert a p) (gv0 ++ q)), (Abs (insert a p) (gv0 ++ p))
(Abs (insert a p) (gv0 ++ gv0)), (Abs (insert a p) (gv0 ++ pl)), (Abs (insert a p) (pl ++ ql)), (Abs (insert a p) (pl ++ q)), (Abs (insert a p) (pl ++ p)), (Abs (insert a p) (pl ++ gv0)), (Abs (insert a p) (pl ++ pl)), (Abs (insert a p) []), (Abs (insert a gv0) ql), (Abs (insert a gv0) q)
(Abs (insert a gv0) p), (Abs (insert a gv0) gv0), (Abs (insert a gv0) pl), (Abs (insert a gv0) (k :: ql)), (Abs (insert a gv0) (k :: q)), (Abs (insert a gv0) (k :: p)), (Abs (insert a gv0) (k :: gv0)), (Abs (insert a gv0) (k :: pl)), (Abs (insert a gv0) (a :: ql)), (Abs (insert a gv0) (a :: q))
(Abs (insert a gv0) (a :: p)), (Abs (insert a gv0) (a :: gv0)), (Abs (insert a gv0) (a :: pl)), (Abs (insert a gv0) (merge ql ql)), (Abs (insert a gv0) (merge ql q)), (Abs (insert a gv0) (merge ql p)), (Abs (insert a gv0) (merge ql gv0)), (Abs (insert a gv0) (merge ql pl)), (Abs (insert a gv0) (merge q ql)), (Abs (insert a gv0) (merge q q))
(Abs (insert a gv0) (merge q p)), (Abs (insert a gv0) (merge q gv0)), (Abs (insert a gv0) (merge q pl)), (Abs (insert a gv0) (merge p ql)), (Abs (insert a gv0) (merge p q)), (Abs (insert a gv0) (merge p p)), (Abs (insert a gv0) (merge p gv0)), (Abs (insert a gv0) (merge p pl)), (Abs (insert a gv0) (merge gv0 ql)), (Abs (insert a gv0) (merge gv0 q))
(Abs (insert a gv0) (merge gv0 p)), (Abs (insert a gv0) (merge gv0 gv0)), (Abs (insert a gv0) (merge gv0 pl)), (Abs (insert a gv0) (merge pl ql)), (Abs (insert a gv0) (merge pl q)), (Abs (insert a gv0) (merge pl p)), (Abs (insert a gv0) (merge pl gv0)), (Abs (insert a gv0) (merge pl pl)), (Abs (insert a gv0) (insert k ql)), (Abs (insert a gv0) (insert k q))
(Abs (insert a gv0) (insert k p)), (Abs (insert a gv0) (insert k gv0)), (Abs (insert a gv0) (insert k pl)), (Abs (insert a gv0) (insert a ql)), (Abs (insert a gv0) (insert a q)), (Abs (insert a gv0) (insert a p)), (Abs (insert a gv0) (insert a pl)), (Abs (insert a gv0) (maybe_swap ql)), (Abs (insert a gv0) (maybe_swap q)), (Abs (insert a gv0) (maybe_swap p))
(Abs (insert a gv0) (maybe_swap gv0)), (Abs (insert a gv0) (maybe_swap pl)), (Abs (insert a gv0) (ql ++ ql)), (Abs (insert a gv0) (ql ++ q)), (Abs (insert a gv0) (ql ++ p)), (Abs (insert a gv0) (ql ++ gv0)), (Abs (insert a gv0) (ql ++ pl)), (Abs (insert a gv0) (q ++ ql)), (Abs (insert a gv0) (q ++ q)), (Abs (insert a gv0) (q ++ p))
(Abs (insert a gv0) (q ++ gv0)), (Abs (insert a gv0) (q ++ pl)), (Abs (insert a gv0) (p ++ ql)), (Abs (insert a gv0) (p ++ q)), (Abs (insert a gv0) (p ++ p)), (Abs (insert a gv0) (p ++ gv0)), (Abs (insert a gv0) (p ++ pl)), (Abs (insert a gv0) (gv0 ++ ql)), (Abs (insert a gv0) (gv0 ++ q)), (Abs (insert a gv0) (gv0 ++ p))
(Abs (insert a gv0) (gv0 ++ gv0)), (Abs (insert a gv0) (gv0 ++ pl)), (Abs (insert a gv0) (pl ++ ql)), (Abs (insert a gv0) (pl ++ q)), (Abs (insert a gv0) (pl ++ p)), (Abs (insert a gv0) (pl ++ gv0)), (Abs (insert a gv0) (pl ++ pl)), (Abs (insert a gv0) []), (Abs (insert a pl) ql), (Abs (insert a pl) q)
(Abs (insert a pl) p), (Abs (insert a pl) gv0), (Abs (insert a pl) pl), (Abs (insert a pl) (k :: ql)), (Abs (insert a pl) (k :: q)), (Abs (insert a pl) (k :: p)), (Abs (insert a pl) (k :: gv0)), (Abs (insert a pl) (k :: pl)), (Abs (insert a pl) (a :: ql)), (Abs (insert a pl) (a :: q))
(Abs (insert a pl) (a :: p)), (Abs (insert a pl) (a :: gv0)), (Abs (insert a pl) (a :: pl)), (Abs (insert a pl) (merge ql ql)), (Abs (insert a pl) (merge ql q)), (Abs (insert a pl) (merge ql p)), (Abs (insert a pl) (merge ql gv0)), (Abs (insert a pl) (merge ql pl)), (Abs (insert a pl) (merge q ql)), (Abs (insert a pl) (merge q q))
(Abs (insert a pl) (merge q p)), (Abs (insert a pl) (merge q gv0)), (Abs (insert a pl) (merge q pl)), (Abs (insert a pl) (merge p ql)), (Abs (insert a pl) (merge p q)), (Abs (insert a pl) (merge p p)), (Abs (insert a pl) (merge p gv0)), (Abs (insert a pl) (merge p pl)), (Abs (insert a pl) (merge gv0 ql)), (Abs (insert a pl) (merge gv0 q))
(Abs (insert a pl) (merge gv0 p)), (Abs (insert a pl) (merge gv0 gv0)), (Abs (insert a pl) (merge gv0 pl)), (Abs (insert a pl) (merge pl ql)), (Abs (insert a pl) (merge pl q)), (Abs (insert a pl) (merge pl p)), (Abs (insert a pl) (merge pl gv0)), (Abs (insert a pl) (merge pl pl)), (Abs (insert a pl) (insert k ql)), (Abs (insert a pl) (insert k q))
(Abs (insert a pl) (insert k p)), (Abs (insert a pl) (insert k gv0)), (Abs (insert a pl) (insert k pl)), (Abs (insert a pl) (insert a ql)), (Abs (insert a pl) (insert a q)), (Abs (insert a pl) (insert a p)), (Abs (insert a pl) (insert a gv0)), (Abs (insert a pl) (maybe_swap ql)), (Abs (insert a pl) (maybe_swap q)), (Abs (insert a pl) (maybe_swap p))
(Abs (insert a pl) (maybe_swap gv0)), (Abs (insert a pl) (maybe_swap pl)), (Abs (insert a pl) (ql ++ ql)), (Abs (insert a pl) (ql ++ q)), (Abs (insert a pl) (ql ++ p)), (Abs (insert a pl) (ql ++ gv0)), (Abs (insert a pl) (ql ++ pl)), (Abs (insert a pl) (q ++ ql)), (Abs (insert a pl) (q ++ q)), (Abs (insert a pl) (q ++ p))
(Abs (insert a pl) (q ++ gv0)), (Abs (insert a pl) (q ++ pl)), (Abs (insert a pl) (p ++ ql)), (Abs (insert a pl) (p ++ q)), (Abs (insert a pl) (p ++ p)), (Abs (insert a pl) (p ++ gv0)), (Abs (insert a pl) (p ++ pl)), (Abs (insert a pl) (gv0 ++ ql)), (Abs (insert a pl) (gv0 ++ q)), (Abs (insert a pl) (gv0 ++ p))
(Abs (insert a pl) (gv0 ++ gv0)), (Abs (insert a pl) (gv0 ++ pl)), (Abs (insert a pl) (pl ++ ql)), (Abs (insert a pl) (pl ++ q)), (Abs (insert a pl) (pl ++ p)), (Abs (insert a pl) (pl ++ gv0)), (Abs (insert a pl) (pl ++ pl)), (Abs (insert a pl) []), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) q)
(Abs (maybe_swap ql) p), (Abs (maybe_swap ql) gv0), (Abs (maybe_swap ql) pl), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (k :: gv0)), (Abs (maybe_swap ql) (k :: pl)), (Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: q))
(Abs (maybe_swap ql) (a :: p)), (Abs (maybe_swap ql) (a :: gv0)), (Abs (maybe_swap ql) (a :: pl)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge ql gv0)), (Abs (maybe_swap ql) (merge ql pl)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q q))
(Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge q gv0)), (Abs (maybe_swap ql) (merge q pl)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (merge p gv0)), (Abs (maybe_swap ql) (merge p pl)), (Abs (maybe_swap ql) (merge gv0 ql)), (Abs (maybe_swap ql) (merge gv0 q))
(Abs (maybe_swap ql) (merge gv0 p)), (Abs (maybe_swap ql) (merge gv0 gv0)), (Abs (maybe_swap ql) (merge gv0 pl)), (Abs (maybe_swap ql) (merge pl ql)), (Abs (maybe_swap ql) (merge pl q)), (Abs (maybe_swap ql) (merge pl p)), (Abs (maybe_swap ql) (merge pl gv0)), (Abs (maybe_swap ql) (merge pl pl)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k q))
(Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert k gv0)), (Abs (maybe_swap ql) (insert k pl)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (insert a gv0)), (Abs (maybe_swap ql) (insert a pl)), (Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p))
(Abs (maybe_swap ql) (maybe_swap gv0)), (Abs (maybe_swap ql) (maybe_swap pl)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (ql ++ gv0)), (Abs (maybe_swap ql) (ql ++ pl)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ p))
(Abs (maybe_swap ql) (q ++ gv0)), (Abs (maybe_swap ql) (q ++ pl)), (Abs (maybe_swap ql) (p ++ ql)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) (p ++ gv0)), (Abs (maybe_swap ql) (p ++ pl)), (Abs (maybe_swap ql) (gv0 ++ ql)), (Abs (maybe_swap ql) (gv0 ++ q)), (Abs (maybe_swap ql) (gv0 ++ p))
(Abs (maybe_swap ql) (gv0 ++ gv0)), (Abs (maybe_swap ql) (gv0 ++ pl)), (Abs (maybe_swap ql) (pl ++ ql)), (Abs (maybe_swap ql) (pl ++ q)), (Abs (maybe_swap ql) (pl ++ p)), (Abs (maybe_swap ql) (pl ++ gv0)), (Abs (maybe_swap ql) (pl ++ pl)), (Abs (maybe_swap ql) []), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) q)
(Abs (maybe_swap q) p), (Abs (maybe_swap q) gv0), (Abs (maybe_swap q) pl), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: gv0)), (Abs (maybe_swap q) (k :: pl)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: q))
(Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: gv0)), (Abs (maybe_swap q) (a :: pl)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge ql gv0)), (Abs (maybe_swap q) (merge ql pl)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q q))
(Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q gv0)), (Abs (maybe_swap q) (merge q pl)), (Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p)), (Abs (maybe_swap q) (merge p gv0)), (Abs (maybe_swap q) (merge p pl)), (Abs (maybe_swap q) (merge gv0 ql)), (Abs (maybe_swap q) (merge gv0 q))
(Abs (maybe_swap q) (merge gv0 p)), (Abs (maybe_swap q) (merge gv0 gv0)), (Abs (maybe_swap q) (merge gv0 pl)), (Abs (maybe_swap q) (merge pl ql)), (Abs (maybe_swap q) (merge pl q)), (Abs (maybe_swap q) (merge pl p)), (Abs (maybe_swap q) (merge pl gv0)), (Abs (maybe_swap q) (merge pl pl)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k q))
(Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert k gv0)), (Abs (maybe_swap q) (insert k pl)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a gv0)), (Abs (maybe_swap q) (insert a pl)), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap q) (maybe_swap p))
(Abs (maybe_swap q) (maybe_swap gv0)), (Abs (maybe_swap q) (maybe_swap pl)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ q)), (Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (ql ++ gv0)), (Abs (maybe_swap q) (ql ++ pl)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ p))
(Abs (maybe_swap q) (q ++ gv0)), (Abs (maybe_swap q) (q ++ pl)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ gv0)), (Abs (maybe_swap q) (p ++ pl)), (Abs (maybe_swap q) (gv0 ++ ql)), (Abs (maybe_swap q) (gv0 ++ q)), (Abs (maybe_swap q) (gv0 ++ p))
(Abs (maybe_swap q) (gv0 ++ gv0)), (Abs (maybe_swap q) (gv0 ++ pl)), (Abs (maybe_swap q) (pl ++ ql)), (Abs (maybe_swap q) (pl ++ q)), (Abs (maybe_swap q) (pl ++ p)), (Abs (maybe_swap q) (pl ++ gv0)), (Abs (maybe_swap q) (pl ++ pl)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) ql), (Abs (maybe_swap p) q)
(Abs (maybe_swap p) p), (Abs (maybe_swap p) gv0), (Abs (maybe_swap p) pl), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: gv0)), (Abs (maybe_swap p) (k :: pl)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: q))
(Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: gv0)), (Abs (maybe_swap p) (a :: pl)), (Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql p)), (Abs (maybe_swap p) (merge ql gv0)), (Abs (maybe_swap p) (merge ql pl)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q q))
(Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q gv0)), (Abs (maybe_swap p) (merge q pl)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p gv0)), (Abs (maybe_swap p) (merge p pl)), (Abs (maybe_swap p) (merge gv0 ql)), (Abs (maybe_swap p) (merge gv0 q))
(Abs (maybe_swap p) (merge gv0 p)), (Abs (maybe_swap p) (merge gv0 gv0)), (Abs (maybe_swap p) (merge gv0 pl)), (Abs (maybe_swap p) (merge pl ql)), (Abs (maybe_swap p) (merge pl q)), (Abs (maybe_swap p) (merge pl p)), (Abs (maybe_swap p) (merge pl gv0)), (Abs (maybe_swap p) (merge pl pl)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k q))
(Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k gv0)), (Abs (maybe_swap p) (insert k pl)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a gv0)), (Abs (maybe_swap p) (insert a pl)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap q))
(Abs (maybe_swap p) (maybe_swap gv0)), (Abs (maybe_swap p) (maybe_swap pl)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (ql ++ gv0)), (Abs (maybe_swap p) (ql ++ pl)), (Abs (maybe_swap p) (q ++ ql)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ p))
(Abs (maybe_swap p) (q ++ gv0)), (Abs (maybe_swap p) (q ++ pl)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ gv0)), (Abs (maybe_swap p) (p ++ pl)), (Abs (maybe_swap p) (gv0 ++ ql)), (Abs (maybe_swap p) (gv0 ++ q)), (Abs (maybe_swap p) (gv0 ++ p))
(Abs (maybe_swap p) (gv0 ++ gv0)), (Abs (maybe_swap p) (gv0 ++ pl)), (Abs (maybe_swap p) (pl ++ ql)), (Abs (maybe_swap p) (pl ++ q)), (Abs (maybe_swap p) (pl ++ p)), (Abs (maybe_swap p) (pl ++ gv0)), (Abs (maybe_swap p) (pl ++ pl)), (Abs (maybe_swap p) []), (Abs (maybe_swap gv0) ql), (Abs (maybe_swap gv0) q)
(Abs (maybe_swap gv0) p), (Abs (maybe_swap gv0) gv0), (Abs (maybe_swap gv0) pl), (Abs (maybe_swap gv0) (k :: ql)), (Abs (maybe_swap gv0) (k :: q)), (Abs (maybe_swap gv0) (k :: p)), (Abs (maybe_swap gv0) (k :: gv0)), (Abs (maybe_swap gv0) (k :: pl)), (Abs (maybe_swap gv0) (a :: ql)), (Abs (maybe_swap gv0) (a :: q))
(Abs (maybe_swap gv0) (a :: p)), (Abs (maybe_swap gv0) (a :: gv0)), (Abs (maybe_swap gv0) (a :: pl)), (Abs (maybe_swap gv0) (merge ql ql)), (Abs (maybe_swap gv0) (merge ql q)), (Abs (maybe_swap gv0) (merge ql p)), (Abs (maybe_swap gv0) (merge ql gv0)), (Abs (maybe_swap gv0) (merge ql pl)), (Abs (maybe_swap gv0) (merge q ql)), (Abs (maybe_swap gv0) (merge q q))
(Abs (maybe_swap gv0) (merge q p)), (Abs (maybe_swap gv0) (merge q gv0)), (Abs (maybe_swap gv0) (merge q pl)), (Abs (maybe_swap gv0) (merge p ql)), (Abs (maybe_swap gv0) (merge p q)), (Abs (maybe_swap gv0) (merge p p)), (Abs (maybe_swap gv0) (merge p gv0)), (Abs (maybe_swap gv0) (merge p pl)), (Abs (maybe_swap gv0) (merge gv0 ql)), (Abs (maybe_swap gv0) (merge gv0 q))
(Abs (maybe_swap gv0) (merge gv0 p)), (Abs (maybe_swap gv0) (merge gv0 gv0)), (Abs (maybe_swap gv0) (merge gv0 pl)), (Abs (maybe_swap gv0) (merge pl ql)), (Abs (maybe_swap gv0) (merge pl q)), (Abs (maybe_swap gv0) (merge pl p)), (Abs (maybe_swap gv0) (merge pl gv0)), (Abs (maybe_swap gv0) (merge pl pl)), (Abs (maybe_swap gv0) (insert k ql)), (Abs (maybe_swap gv0) (insert k q))
(Abs (maybe_swap gv0) (insert k p)), (Abs (maybe_swap gv0) (insert k gv0)), (Abs (maybe_swap gv0) (insert k pl)), (Abs (maybe_swap gv0) (insert a ql)), (Abs (maybe_swap gv0) (insert a q)), (Abs (maybe_swap gv0) (insert a p)), (Abs (maybe_swap gv0) (insert a gv0)), (Abs (maybe_swap gv0) (insert a pl)), (Abs (maybe_swap gv0) (maybe_swap ql)), (Abs (maybe_swap gv0) (maybe_swap q))
(Abs (maybe_swap gv0) (maybe_swap p)), (Abs (maybe_swap gv0) (maybe_swap pl)), (Abs (maybe_swap gv0) (ql ++ ql)), (Abs (maybe_swap gv0) (ql ++ q)), (Abs (maybe_swap gv0) (ql ++ p)), (Abs (maybe_swap gv0) (ql ++ gv0)), (Abs (maybe_swap gv0) (ql ++ pl)), (Abs (maybe_swap gv0) (q ++ ql)), (Abs (maybe_swap gv0) (q ++ q)), (Abs (maybe_swap gv0) (q ++ p))
(Abs (maybe_swap gv0) (q ++ gv0)), (Abs (maybe_swap gv0) (q ++ pl)), (Abs (maybe_swap gv0) (p ++ ql)), (Abs (maybe_swap gv0) (p ++ q)), (Abs (maybe_swap gv0) (p ++ p)), (Abs (maybe_swap gv0) (p ++ gv0)), (Abs (maybe_swap gv0) (p ++ pl)), (Abs (maybe_swap gv0) (gv0 ++ ql)), (Abs (maybe_swap gv0) (gv0 ++ q)), (Abs (maybe_swap gv0) (gv0 ++ p))
(Abs (maybe_swap gv0) (gv0 ++ gv0)), (Abs (maybe_swap gv0) (gv0 ++ pl)), (Abs (maybe_swap gv0) (pl ++ ql)), (Abs (maybe_swap gv0) (pl ++ q)), (Abs (maybe_swap gv0) (pl ++ p)), (Abs (maybe_swap gv0) (pl ++ gv0)), (Abs (maybe_swap gv0) (pl ++ pl)), (Abs (maybe_swap gv0) []), (Abs (maybe_swap pl) ql), (Abs (maybe_swap pl) q)
(Abs (maybe_swap pl) p), (Abs (maybe_swap pl) gv0), (Abs (maybe_swap pl) pl), (Abs (maybe_swap pl) (k :: ql)), (Abs (maybe_swap pl) (k :: q)), (Abs (maybe_swap pl) (k :: p)), (Abs (maybe_swap pl) (k :: gv0)), (Abs (maybe_swap pl) (k :: pl)), (Abs (maybe_swap pl) (a :: ql)), (Abs (maybe_swap pl) (a :: q))
(Abs (maybe_swap pl) (a :: p)), (Abs (maybe_swap pl) (a :: gv0)), (Abs (maybe_swap pl) (a :: pl)), (Abs (maybe_swap pl) (merge ql ql)), (Abs (maybe_swap pl) (merge ql q)), (Abs (maybe_swap pl) (merge ql p)), (Abs (maybe_swap pl) (merge ql gv0)), (Abs (maybe_swap pl) (merge ql pl)), (Abs (maybe_swap pl) (merge q ql)), (Abs (maybe_swap pl) (merge q q))
(Abs (maybe_swap pl) (merge q p)), (Abs (maybe_swap pl) (merge q gv0)), (Abs (maybe_swap pl) (merge q pl)), (Abs (maybe_swap pl) (merge p ql)), (Abs (maybe_swap pl) (merge p q)), (Abs (maybe_swap pl) (merge p p)), (Abs (maybe_swap pl) (merge p gv0)), (Abs (maybe_swap pl) (merge p pl)), (Abs (maybe_swap pl) (merge gv0 ql)), (Abs (maybe_swap pl) (merge gv0 q))
(Abs (maybe_swap pl) (merge gv0 p)), (Abs (maybe_swap pl) (merge gv0 gv0)), (Abs (maybe_swap pl) (merge gv0 pl)), (Abs (maybe_swap pl) (merge pl ql)), (Abs (maybe_swap pl) (merge pl q)), (Abs (maybe_swap pl) (merge pl p)), (Abs (maybe_swap pl) (merge pl gv0)), (Abs (maybe_swap pl) (merge pl pl)), (Abs (maybe_swap pl) (insert k ql)), (Abs (maybe_swap pl) (insert k q))
(Abs (maybe_swap pl) (insert k p)), (Abs (maybe_swap pl) (insert k gv0)), (Abs (maybe_swap pl) (insert k pl)), (Abs (maybe_swap pl) (insert a ql)), (Abs (maybe_swap pl) (insert a q)), (Abs (maybe_swap pl) (insert a p)), (Abs (maybe_swap pl) (insert a gv0)), (Abs (maybe_swap pl) (insert a pl)), (Abs (maybe_swap pl) (maybe_swap ql)), (Abs (maybe_swap pl) (maybe_swap q))
(Abs (maybe_swap pl) (maybe_swap p)), (Abs (maybe_swap pl) (maybe_swap gv0)), (Abs (maybe_swap pl) (ql ++ ql)), (Abs (maybe_swap pl) (ql ++ q)), (Abs (maybe_swap pl) (ql ++ p)), (Abs (maybe_swap pl) (ql ++ gv0)), (Abs (maybe_swap pl) (ql ++ pl)), (Abs (maybe_swap pl) (q ++ ql)), (Abs (maybe_swap pl) (q ++ q)), (Abs (maybe_swap pl) (q ++ p))
(Abs (maybe_swap pl) (q ++ gv0)), (Abs (maybe_swap pl) (q ++ pl)), (Abs (maybe_swap pl) (p ++ ql)), (Abs (maybe_swap pl) (p ++ q)), (Abs (maybe_swap pl) (p ++ p)), (Abs (maybe_swap pl) (p ++ gv0)), (Abs (maybe_swap pl) (p ++ pl)), (Abs (maybe_swap pl) (gv0 ++ ql)), (Abs (maybe_swap pl) (gv0 ++ q)), (Abs (maybe_swap pl) (gv0 ++ p))
(Abs (maybe_swap pl) (gv0 ++ gv0)), (Abs (maybe_swap pl) (gv0 ++ pl)), (Abs (maybe_swap pl) (pl ++ ql)), (Abs (maybe_swap pl) (pl ++ q)), (Abs (maybe_swap pl) (pl ++ p)), (Abs (maybe_swap pl) (pl ++ gv0)), (Abs (maybe_swap pl) (pl ++ pl)), (Abs (maybe_swap pl) []), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) q)
(Abs (ql ++ ql) p), (Abs (ql ++ ql) gv0), (Abs (ql ++ ql) pl), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (k :: gv0)), (Abs (ql ++ ql) (k :: pl)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: q))
(Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (a :: gv0)), (Abs (ql ++ ql) (a :: pl)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge ql gv0)), (Abs (ql ++ ql) (merge ql pl)), (Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q q))
(Abs (ql ++ ql) (merge q p)), (Abs (ql ++ ql) (merge q gv0)), (Abs (ql ++ ql) (merge q pl)), (Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (merge p gv0)), (Abs (ql ++ ql) (merge p pl)), (Abs (ql ++ ql) (merge gv0 ql)), (Abs (ql ++ ql) (merge gv0 q))
(Abs (ql ++ ql) (merge gv0 p)), (Abs (ql ++ ql) (merge gv0 gv0)), (Abs (ql ++ ql) (merge gv0 pl)), (Abs (ql ++ ql) (merge pl ql)), (Abs (ql ++ ql) (merge pl q)), (Abs (ql ++ ql) (merge pl p)), (Abs (ql ++ ql) (merge pl gv0)), (Abs (ql ++ ql) (merge pl pl)), (Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k q))
(Abs (ql ++ ql) (insert k p)), (Abs (ql ++ ql) (insert k gv0)), (Abs (ql ++ ql) (insert k pl)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (insert a gv0)), (Abs (ql ++ ql) (insert a pl)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap q))
(Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (maybe_swap gv0)), (Abs (ql ++ ql) (maybe_swap pl)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (ql ++ gv0)), (Abs (ql ++ ql) (ql ++ pl)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ p))
(Abs (ql ++ ql) (q ++ gv0)), (Abs (ql ++ ql) (q ++ pl)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) (p ++ gv0)), (Abs (ql ++ ql) (p ++ pl)), (Abs (ql ++ ql) (gv0 ++ ql)), (Abs (ql ++ ql) (gv0 ++ q)), (Abs (ql ++ ql) (gv0 ++ p))
(Abs (ql ++ ql) (gv0 ++ gv0)), (Abs (ql ++ ql) (gv0 ++ pl)), (Abs (ql ++ ql) (pl ++ ql)), (Abs (ql ++ ql) (pl ++ q)), (Abs (ql ++ ql) (pl ++ p)), (Abs (ql ++ ql) (pl ++ gv0)), (Abs (ql ++ ql) (pl ++ pl)), (Abs (ql ++ ql) []), (Abs (ql ++ q) ql), (Abs (ql ++ q) q)
(Abs (ql ++ q) p), (Abs (ql ++ q) gv0), (Abs (ql ++ q) pl), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (k :: gv0)), (Abs (ql ++ q) (k :: pl)), (Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: q))
(Abs (ql ++ q) (a :: p)), (Abs (ql ++ q) (a :: gv0)), (Abs (ql ++ q) (a :: pl)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge ql gv0)), (Abs (ql ++ q) (merge ql pl)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q q))
(Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge q gv0)), (Abs (ql ++ q) (merge q pl)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (merge p gv0)), (Abs (ql ++ q) (merge p pl)), (Abs (ql ++ q) (merge gv0 ql)), (Abs (ql ++ q) (merge gv0 q))
(Abs (ql ++ q) (merge gv0 p)), (Abs (ql ++ q) (merge gv0 gv0)), (Abs (ql ++ q) (merge gv0 pl)), (Abs (ql ++ q) (merge pl ql)), (Abs (ql ++ q) (merge pl q)), (Abs (ql ++ q) (merge pl p)), (Abs (ql ++ q) (merge pl gv0)), (Abs (ql ++ q) (merge pl pl)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k q))
(Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert k gv0)), (Abs (ql ++ q) (insert k pl)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (insert a gv0)), (Abs (ql ++ q) (insert a pl)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap q))
(Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (maybe_swap gv0)), (Abs (ql ++ q) (maybe_swap pl)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (ql ++ gv0)), (Abs (ql ++ q) (ql ++ pl)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ p))
(Abs (ql ++ q) (q ++ gv0)), (Abs (ql ++ q) (q ++ pl)), (Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ p)), (Abs (ql ++ q) (p ++ gv0)), (Abs (ql ++ q) (p ++ pl)), (Abs (ql ++ q) (gv0 ++ ql)), (Abs (ql ++ q) (gv0 ++ q)), (Abs (ql ++ q) (gv0 ++ p))
(Abs (ql ++ q) (gv0 ++ gv0)), (Abs (ql ++ q) (gv0 ++ pl)), (Abs (ql ++ q) (pl ++ ql)), (Abs (ql ++ q) (pl ++ q)), (Abs (ql ++ q) (pl ++ p)), (Abs (ql ++ q) (pl ++ gv0)), (Abs (ql ++ q) (pl ++ pl)), (Abs (ql ++ q) []), (Abs (ql ++ p) ql), (Abs (ql ++ p) q)
(Abs (ql ++ p) p), (Abs (ql ++ p) gv0), (Abs (ql ++ p) pl), (Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: p)), (Abs (ql ++ p) (k :: gv0)), (Abs (ql ++ p) (k :: pl)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: q))
(Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (a :: gv0)), (Abs (ql ++ p) (a :: pl)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge ql gv0)), (Abs (ql ++ p) (merge ql pl)), (Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q q))
(Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge q gv0)), (Abs (ql ++ p) (merge q pl)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (merge p gv0)), (Abs (ql ++ p) (merge p pl)), (Abs (ql ++ p) (merge gv0 ql)), (Abs (ql ++ p) (merge gv0 q))
(Abs (ql ++ p) (merge gv0 p)), (Abs (ql ++ p) (merge gv0 gv0)), (Abs (ql ++ p) (merge gv0 pl)), (Abs (ql ++ p) (merge pl ql)), (Abs (ql ++ p) (merge pl q)), (Abs (ql ++ p) (merge pl p)), (Abs (ql ++ p) (merge pl gv0)), (Abs (ql ++ p) (merge pl pl)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k q))
(Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert k gv0)), (Abs (ql ++ p) (insert k pl)), (Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a p)), (Abs (ql ++ p) (insert a gv0)), (Abs (ql ++ p) (insert a pl)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap q))
(Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (maybe_swap gv0)), (Abs (ql ++ p) (maybe_swap pl)), (Abs (ql ++ p) (ql ++ ql)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ gv0)), (Abs (ql ++ p) (ql ++ pl)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ p))
(Abs (ql ++ p) (q ++ gv0)), (Abs (ql ++ p) (q ++ pl)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) (p ++ gv0)), (Abs (ql ++ p) (p ++ pl)), (Abs (ql ++ p) (gv0 ++ ql)), (Abs (ql ++ p) (gv0 ++ q)), (Abs (ql ++ p) (gv0 ++ p))
(Abs (ql ++ p) (gv0 ++ gv0)), (Abs (ql ++ p) (gv0 ++ pl)), (Abs (ql ++ p) (pl ++ ql)), (Abs (ql ++ p) (pl ++ q)), (Abs (ql ++ p) (pl ++ p)), (Abs (ql ++ p) (pl ++ gv0)), (Abs (ql ++ p) (pl ++ pl)), (Abs (ql ++ p) []), (Abs (ql ++ gv0) ql), (Abs (ql ++ gv0) q)
(Abs (ql ++ gv0) p), (Abs (ql ++ gv0) gv0), (Abs (ql ++ gv0) pl), (Abs (ql ++ gv0) (k :: ql)), (Abs (ql ++ gv0) (k :: q)), (Abs (ql ++ gv0) (k :: p)), (Abs (ql ++ gv0) (k :: gv0)), (Abs (ql ++ gv0) (k :: pl)), (Abs (ql ++ gv0) (a :: ql)), (Abs (ql ++ gv0) (a :: q))
(Abs (ql ++ gv0) (a :: p)), (Abs (ql ++ gv0) (a :: gv0)), (Abs (ql ++ gv0) (a :: pl)), (Abs (ql ++ gv0) (merge ql ql)), (Abs (ql ++ gv0) (merge ql q)), (Abs (ql ++ gv0) (merge ql p)), (Abs (ql ++ gv0) (merge ql gv0)), (Abs (ql ++ gv0) (merge ql pl)), (Abs (ql ++ gv0) (merge q ql)), (Abs (ql ++ gv0) (merge q q))
(Abs (ql ++ gv0) (merge q p)), (Abs (ql ++ gv0) (merge q gv0)), (Abs (ql ++ gv0) (merge q pl)), (Abs (ql ++ gv0) (merge p ql)), (Abs (ql ++ gv0) (merge p q)), (Abs (ql ++ gv0) (merge p p)), (Abs (ql ++ gv0) (merge p gv0)), (Abs (ql ++ gv0) (merge p pl)), (Abs (ql ++ gv0) (merge gv0 ql)), (Abs (ql ++ gv0) (merge gv0 q))
(Abs (ql ++ gv0) (merge gv0 p)), (Abs (ql ++ gv0) (merge gv0 gv0)), (Abs (ql ++ gv0) (merge gv0 pl)), (Abs (ql ++ gv0) (merge pl ql)), (Abs (ql ++ gv0) (merge pl q)), (Abs (ql ++ gv0) (merge pl p)), (Abs (ql ++ gv0) (merge pl gv0)), (Abs (ql ++ gv0) (merge pl pl)), (Abs (ql ++ gv0) (insert k ql)), (Abs (ql ++ gv0) (insert k q))
(Abs (ql ++ gv0) (insert k p)), (Abs (ql ++ gv0) (insert k gv0)), (Abs (ql ++ gv0) (insert k pl)), (Abs (ql ++ gv0) (insert a ql)), (Abs (ql ++ gv0) (insert a q)), (Abs (ql ++ gv0) (insert a p)), (Abs (ql ++ gv0) (insert a gv0)), (Abs (ql ++ gv0) (insert a pl)), (Abs (ql ++ gv0) (maybe_swap ql)), (Abs (ql ++ gv0) (maybe_swap q))
(Abs (ql ++ gv0) (maybe_swap p)), (Abs (ql ++ gv0) (maybe_swap gv0)), (Abs (ql ++ gv0) (maybe_swap pl)), (Abs (ql ++ gv0) (ql ++ ql)), (Abs (ql ++ gv0) (ql ++ q)), (Abs (ql ++ gv0) (ql ++ p)), (Abs (ql ++ gv0) (ql ++ pl)), (Abs (ql ++ gv0) (q ++ ql)), (Abs (ql ++ gv0) (q ++ q)), (Abs (ql ++ gv0) (q ++ p))
(Abs (ql ++ gv0) (q ++ gv0)), (Abs (ql ++ gv0) (q ++ pl)), (Abs (ql ++ gv0) (p ++ ql)), (Abs (ql ++ gv0) (p ++ q)), (Abs (ql ++ gv0) (p ++ p)), (Abs (ql ++ gv0) (p ++ gv0)), (Abs (ql ++ gv0) (p ++ pl)), (Abs (ql ++ gv0) (gv0 ++ ql)), (Abs (ql ++ gv0) (gv0 ++ q)), (Abs (ql ++ gv0) (gv0 ++ p))
(Abs (ql ++ gv0) (gv0 ++ gv0)), (Abs (ql ++ gv0) (gv0 ++ pl)), (Abs (ql ++ gv0) (pl ++ ql)), (Abs (ql ++ gv0) (pl ++ q)), (Abs (ql ++ gv0) (pl ++ p)), (Abs (ql ++ gv0) (pl ++ gv0)), (Abs (ql ++ gv0) (pl ++ pl)), (Abs (ql ++ gv0) []), (Abs (ql ++ pl) ql), (Abs (ql ++ pl) q)
(Abs (ql ++ pl) p), (Abs (ql ++ pl) gv0), (Abs (ql ++ pl) pl), (Abs (ql ++ pl) (k :: ql)), (Abs (ql ++ pl) (k :: q)), (Abs (ql ++ pl) (k :: p)), (Abs (ql ++ pl) (k :: gv0)), (Abs (ql ++ pl) (k :: pl)), (Abs (ql ++ pl) (a :: ql)), (Abs (ql ++ pl) (a :: q))
(Abs (ql ++ pl) (a :: p)), (Abs (ql ++ pl) (a :: gv0)), (Abs (ql ++ pl) (a :: pl)), (Abs (ql ++ pl) (merge ql ql)), (Abs (ql ++ pl) (merge ql q)), (Abs (ql ++ pl) (merge ql p)), (Abs (ql ++ pl) (merge ql gv0)), (Abs (ql ++ pl) (merge ql pl)), (Abs (ql ++ pl) (merge q ql)), (Abs (ql ++ pl) (merge q q))
(Abs (ql ++ pl) (merge q p)), (Abs (ql ++ pl) (merge q gv0)), (Abs (ql ++ pl) (merge q pl)), (Abs (ql ++ pl) (merge p ql)), (Abs (ql ++ pl) (merge p q)), (Abs (ql ++ pl) (merge p p)), (Abs (ql ++ pl) (merge p gv0)), (Abs (ql ++ pl) (merge p pl)), (Abs (ql ++ pl) (merge gv0 ql)), (Abs (ql ++ pl) (merge gv0 q))
(Abs (ql ++ pl) (merge gv0 p)), (Abs (ql ++ pl) (merge gv0 gv0)), (Abs (ql ++ pl) (merge gv0 pl)), (Abs (ql ++ pl) (merge pl ql)), (Abs (ql ++ pl) (merge pl q)), (Abs (ql ++ pl) (merge pl p)), (Abs (ql ++ pl) (merge pl gv0)), (Abs (ql ++ pl) (merge pl pl)), (Abs (ql ++ pl) (insert k ql)), (Abs (ql ++ pl) (insert k q))
(Abs (ql ++ pl) (insert k p)), (Abs (ql ++ pl) (insert k gv0)), (Abs (ql ++ pl) (insert k pl)), (Abs (ql ++ pl) (insert a ql)), (Abs (ql ++ pl) (insert a q)), (Abs (ql ++ pl) (insert a p)), (Abs (ql ++ pl) (insert a gv0)), (Abs (ql ++ pl) (insert a pl)), (Abs (ql ++ pl) (maybe_swap ql)), (Abs (ql ++ pl) (maybe_swap q))
(Abs (ql ++ pl) (maybe_swap p)), (Abs (ql ++ pl) (maybe_swap gv0)), (Abs (ql ++ pl) (maybe_swap pl)), (Abs (ql ++ pl) (ql ++ ql)), (Abs (ql ++ pl) (ql ++ q)), (Abs (ql ++ pl) (ql ++ p)), (Abs (ql ++ pl) (ql ++ gv0)), (Abs (ql ++ pl) (q ++ ql)), (Abs (ql ++ pl) (q ++ q)), (Abs (ql ++ pl) (q ++ p))
(Abs (ql ++ pl) (q ++ gv0)), (Abs (ql ++ pl) (q ++ pl)), (Abs (ql ++ pl) (p ++ ql)), (Abs (ql ++ pl) (p ++ q)), (Abs (ql ++ pl) (p ++ p)), (Abs (ql ++ pl) (p ++ gv0)), (Abs (ql ++ pl) (p ++ pl)), (Abs (ql ++ pl) (gv0 ++ ql)), (Abs (ql ++ pl) (gv0 ++ q)), (Abs (ql ++ pl) (gv0 ++ p))
(Abs (ql ++ pl) (gv0 ++ gv0)), (Abs (ql ++ pl) (gv0 ++ pl)), (Abs (ql ++ pl) (pl ++ ql)), (Abs (ql ++ pl) (pl ++ q)), (Abs (ql ++ pl) (pl ++ p)), (Abs (ql ++ pl) (pl ++ gv0)), (Abs (ql ++ pl) (pl ++ pl)), (Abs (ql ++ pl) []), (Abs (q ++ ql) ql), (Abs (q ++ ql) q)
(Abs (q ++ ql) p), (Abs (q ++ ql) gv0), (Abs (q ++ ql) pl), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (k :: gv0)), (Abs (q ++ ql) (k :: pl)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: q))
(Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (a :: gv0)), (Abs (q ++ ql) (a :: pl)), (Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql p)), (Abs (q ++ ql) (merge ql gv0)), (Abs (q ++ ql) (merge ql pl)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q q))
(Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge q gv0)), (Abs (q ++ ql) (merge q pl)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (merge p gv0)), (Abs (q ++ ql) (merge p pl)), (Abs (q ++ ql) (merge gv0 ql)), (Abs (q ++ ql) (merge gv0 q))
(Abs (q ++ ql) (merge gv0 p)), (Abs (q ++ ql) (merge gv0 gv0)), (Abs (q ++ ql) (merge gv0 pl)), (Abs (q ++ ql) (merge pl ql)), (Abs (q ++ ql) (merge pl q)), (Abs (q ++ ql) (merge pl p)), (Abs (q ++ ql) (merge pl gv0)), (Abs (q ++ ql) (merge pl pl)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k q))
(Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert k gv0)), (Abs (q ++ ql) (insert k pl)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (insert a gv0)), (Abs (q ++ ql) (insert a pl)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap q))
(Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (maybe_swap gv0)), (Abs (q ++ ql) (maybe_swap pl)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (ql ++ gv0)), (Abs (q ++ ql) (ql ++ pl)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p))
(Abs (q ++ ql) (q ++ gv0)), (Abs (q ++ ql) (q ++ pl)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) (p ++ gv0)), (Abs (q ++ ql) (p ++ pl)), (Abs (q ++ ql) (gv0 ++ ql)), (Abs (q ++ ql) (gv0 ++ q)), (Abs (q ++ ql) (gv0 ++ p))
(Abs (q ++ ql) (gv0 ++ gv0)), (Abs (q ++ ql) (gv0 ++ pl)), (Abs (q ++ ql) (pl ++ ql)), (Abs (q ++ ql) (pl ++ q)), (Abs (q ++ ql) (pl ++ p)), (Abs (q ++ ql) (pl ++ gv0)), (Abs (q ++ ql) (pl ++ pl)), (Abs (q ++ ql) []), (Abs (q ++ q) ql), (Abs (q ++ q) q)
(Abs (q ++ q) p), (Abs (q ++ q) gv0), (Abs (q ++ q) pl), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: gv0)), (Abs (q ++ q) (k :: pl)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: q))
(Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: gv0)), (Abs (q ++ q) (a :: pl)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge ql gv0)), (Abs (q ++ q) (merge ql pl)), (Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q q))
(Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge q gv0)), (Abs (q ++ q) (merge q pl)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p gv0)), (Abs (q ++ q) (merge p pl)), (Abs (q ++ q) (merge gv0 ql)), (Abs (q ++ q) (merge gv0 q))
(Abs (q ++ q) (merge gv0 p)), (Abs (q ++ q) (merge gv0 gv0)), (Abs (q ++ q) (merge gv0 pl)), (Abs (q ++ q) (merge pl ql)), (Abs (q ++ q) (merge pl q)), (Abs (q ++ q) (merge pl p)), (Abs (q ++ q) (merge pl gv0)), (Abs (q ++ q) (merge pl pl)), (Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k q))
(Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert k gv0)), (Abs (q ++ q) (insert k pl)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a gv0)), (Abs (q ++ q) (insert a pl)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap q))
(Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap gv0)), (Abs (q ++ q) (maybe_swap pl)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (ql ++ gv0)), (Abs (q ++ q) (ql ++ pl)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ p))
(Abs (q ++ q) (q ++ gv0)), (Abs (q ++ q) (q ++ pl)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ gv0)), (Abs (q ++ q) (p ++ pl)), (Abs (q ++ q) (gv0 ++ ql)), (Abs (q ++ q) (gv0 ++ q)), (Abs (q ++ q) (gv0 ++ p))
(Abs (q ++ q) (gv0 ++ gv0)), (Abs (q ++ q) (gv0 ++ pl)), (Abs (q ++ q) (pl ++ ql)), (Abs (q ++ q) (pl ++ q)), (Abs (q ++ q) (pl ++ p)), (Abs (q ++ q) (pl ++ gv0)), (Abs (q ++ q) (pl ++ pl)), (Abs (q ++ q) []), (Abs (q ++ p) ql), (Abs (q ++ p) q)
(Abs (q ++ p) p), (Abs (q ++ p) gv0), (Abs (q ++ p) pl), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: gv0)), (Abs (q ++ p) (k :: pl)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: q))
(Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: gv0)), (Abs (q ++ p) (a :: pl)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge ql gv0)), (Abs (q ++ p) (merge ql pl)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q q))
(Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q gv0)), (Abs (q ++ p) (merge q pl)), (Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p)), (Abs (q ++ p) (merge p gv0)), (Abs (q ++ p) (merge p pl)), (Abs (q ++ p) (merge gv0 ql)), (Abs (q ++ p) (merge gv0 q))
(Abs (q ++ p) (merge gv0 p)), (Abs (q ++ p) (merge gv0 gv0)), (Abs (q ++ p) (merge gv0 pl)), (Abs (q ++ p) (merge pl ql)), (Abs (q ++ p) (merge pl q)), (Abs (q ++ p) (merge pl p)), (Abs (q ++ p) (merge pl gv0)), (Abs (q ++ p) (merge pl pl)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k q))
(Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert k gv0)), (Abs (q ++ p) (insert k pl)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a gv0)), (Abs (q ++ p) (insert a pl)), (Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap q))
(Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (maybe_swap gv0)), (Abs (q ++ p) (maybe_swap pl)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ q)), (Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (ql ++ gv0)), (Abs (q ++ p) (ql ++ pl)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ q))
(Abs (q ++ p) (q ++ gv0)), (Abs (q ++ p) (q ++ pl)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ gv0)), (Abs (q ++ p) (p ++ pl)), (Abs (q ++ p) (gv0 ++ ql)), (Abs (q ++ p) (gv0 ++ q)), (Abs (q ++ p) (gv0 ++ p))
(Abs (q ++ p) (gv0 ++ gv0)), (Abs (q ++ p) (gv0 ++ pl)), (Abs (q ++ p) (pl ++ ql)), (Abs (q ++ p) (pl ++ q)), (Abs (q ++ p) (pl ++ p)), (Abs (q ++ p) (pl ++ gv0)), (Abs (q ++ p) (pl ++ pl)), (Abs (q ++ p) []), (Abs (q ++ gv0) ql), (Abs (q ++ gv0) q)
(Abs (q ++ gv0) p), (Abs (q ++ gv0) gv0), (Abs (q ++ gv0) pl), (Abs (q ++ gv0) (k :: ql)), (Abs (q ++ gv0) (k :: q)), (Abs (q ++ gv0) (k :: p)), (Abs (q ++ gv0) (k :: gv0)), (Abs (q ++ gv0) (k :: pl)), (Abs (q ++ gv0) (a :: ql)), (Abs (q ++ gv0) (a :: q))
(Abs (q ++ gv0) (a :: p)), (Abs (q ++ gv0) (a :: gv0)), (Abs (q ++ gv0) (a :: pl)), (Abs (q ++ gv0) (merge ql ql)), (Abs (q ++ gv0) (merge ql q)), (Abs (q ++ gv0) (merge ql p)), (Abs (q ++ gv0) (merge ql gv0)), (Abs (q ++ gv0) (merge ql pl)), (Abs (q ++ gv0) (merge q ql)), (Abs (q ++ gv0) (merge q q))
(Abs (q ++ gv0) (merge q p)), (Abs (q ++ gv0) (merge q gv0)), (Abs (q ++ gv0) (merge q pl)), (Abs (q ++ gv0) (merge p ql)), (Abs (q ++ gv0) (merge p q)), (Abs (q ++ gv0) (merge p p)), (Abs (q ++ gv0) (merge p gv0)), (Abs (q ++ gv0) (merge p pl)), (Abs (q ++ gv0) (merge gv0 ql)), (Abs (q ++ gv0) (merge gv0 q))
(Abs (q ++ gv0) (merge gv0 p)), (Abs (q ++ gv0) (merge gv0 gv0)), (Abs (q ++ gv0) (merge gv0 pl)), (Abs (q ++ gv0) (merge pl ql)), (Abs (q ++ gv0) (merge pl q)), (Abs (q ++ gv0) (merge pl p)), (Abs (q ++ gv0) (merge pl gv0)), (Abs (q ++ gv0) (merge pl pl)), (Abs (q ++ gv0) (insert k ql)), (Abs (q ++ gv0) (insert k q))
(Abs (q ++ gv0) (insert k p)), (Abs (q ++ gv0) (insert k gv0)), (Abs (q ++ gv0) (insert k pl)), (Abs (q ++ gv0) (insert a ql)), (Abs (q ++ gv0) (insert a q)), (Abs (q ++ gv0) (insert a p)), (Abs (q ++ gv0) (insert a gv0)), (Abs (q ++ gv0) (insert a pl)), (Abs (q ++ gv0) (maybe_swap ql)), (Abs (q ++ gv0) (maybe_swap q))
(Abs (q ++ gv0) (maybe_swap p)), (Abs (q ++ gv0) (maybe_swap gv0)), (Abs (q ++ gv0) (maybe_swap pl)), (Abs (q ++ gv0) (ql ++ ql)), (Abs (q ++ gv0) (ql ++ q)), (Abs (q ++ gv0) (ql ++ p)), (Abs (q ++ gv0) (ql ++ gv0)), (Abs (q ++ gv0) (ql ++ pl)), (Abs (q ++ gv0) (q ++ ql)), (Abs (q ++ gv0) (q ++ q))
(Abs (q ++ gv0) (q ++ p)), (Abs (q ++ gv0) (q ++ pl)), (Abs (q ++ gv0) (p ++ ql)), (Abs (q ++ gv0) (p ++ q)), (Abs (q ++ gv0) (p ++ p)), (Abs (q ++ gv0) (p ++ gv0)), (Abs (q ++ gv0) (p ++ pl)), (Abs (q ++ gv0) (gv0 ++ ql)), (Abs (q ++ gv0) (gv0 ++ q)), (Abs (q ++ gv0) (gv0 ++ p))
(Abs (q ++ gv0) (gv0 ++ gv0)), (Abs (q ++ gv0) (gv0 ++ pl)), (Abs (q ++ gv0) (pl ++ ql)), (Abs (q ++ gv0) (pl ++ q)), (Abs (q ++ gv0) (pl ++ p)), (Abs (q ++ gv0) (pl ++ gv0)), (Abs (q ++ gv0) (pl ++ pl)), (Abs (q ++ gv0) []), (Abs (q ++ pl) ql), (Abs (q ++ pl) q)
(Abs (q ++ pl) p), (Abs (q ++ pl) gv0), (Abs (q ++ pl) pl), (Abs (q ++ pl) (k :: ql)), (Abs (q ++ pl) (k :: q)), (Abs (q ++ pl) (k :: p)), (Abs (q ++ pl) (k :: gv0)), (Abs (q ++ pl) (k :: pl)), (Abs (q ++ pl) (a :: ql)), (Abs (q ++ pl) (a :: q))
(Abs (q ++ pl) (a :: p)), (Abs (q ++ pl) (a :: gv0)), (Abs (q ++ pl) (a :: pl)), (Abs (q ++ pl) (merge ql ql)), (Abs (q ++ pl) (merge ql q)), (Abs (q ++ pl) (merge ql p)), (Abs (q ++ pl) (merge ql gv0)), (Abs (q ++ pl) (merge ql pl)), (Abs (q ++ pl) (merge q ql)), (Abs (q ++ pl) (merge q q))
(Abs (q ++ pl) (merge q p)), (Abs (q ++ pl) (merge q gv0)), (Abs (q ++ pl) (merge q pl)), (Abs (q ++ pl) (merge p ql)), (Abs (q ++ pl) (merge p q)), (Abs (q ++ pl) (merge p p)), (Abs (q ++ pl) (merge p gv0)), (Abs (q ++ pl) (merge p pl)), (Abs (q ++ pl) (merge gv0 ql)), (Abs (q ++ pl) (merge gv0 q))
(Abs (q ++ pl) (merge gv0 p)), (Abs (q ++ pl) (merge gv0 gv0)), (Abs (q ++ pl) (merge gv0 pl)), (Abs (q ++ pl) (merge pl ql)), (Abs (q ++ pl) (merge pl q)), (Abs (q ++ pl) (merge pl p)), (Abs (q ++ pl) (merge pl gv0)), (Abs (q ++ pl) (merge pl pl)), (Abs (q ++ pl) (insert k ql)), (Abs (q ++ pl) (insert k q))
(Abs (q ++ pl) (insert k p)), (Abs (q ++ pl) (insert k gv0)), (Abs (q ++ pl) (insert k pl)), (Abs (q ++ pl) (insert a ql)), (Abs (q ++ pl) (insert a q)), (Abs (q ++ pl) (insert a p)), (Abs (q ++ pl) (insert a gv0)), (Abs (q ++ pl) (insert a pl)), (Abs (q ++ pl) (maybe_swap ql)), (Abs (q ++ pl) (maybe_swap q))
(Abs (q ++ pl) (maybe_swap p)), (Abs (q ++ pl) (maybe_swap gv0)), (Abs (q ++ pl) (maybe_swap pl)), (Abs (q ++ pl) (ql ++ ql)), (Abs (q ++ pl) (ql ++ q)), (Abs (q ++ pl) (ql ++ p)), (Abs (q ++ pl) (ql ++ gv0)), (Abs (q ++ pl) (ql ++ pl)), (Abs (q ++ pl) (q ++ ql)), (Abs (q ++ pl) (q ++ q))
(Abs (q ++ pl) (q ++ p)), (Abs (q ++ pl) (q ++ gv0)), (Abs (q ++ pl) (p ++ ql)), (Abs (q ++ pl) (p ++ q)), (Abs (q ++ pl) (p ++ p)), (Abs (q ++ pl) (p ++ gv0)), (Abs (q ++ pl) (p ++ pl)), (Abs (q ++ pl) (gv0 ++ ql)), (Abs (q ++ pl) (gv0 ++ q)), (Abs (q ++ pl) (gv0 ++ p))
(Abs (q ++ pl) (gv0 ++ gv0)), (Abs (q ++ pl) (gv0 ++ pl)), (Abs (q ++ pl) (pl ++ ql)), (Abs (q ++ pl) (pl ++ q)), (Abs (q ++ pl) (pl ++ p)), (Abs (q ++ pl) (pl ++ gv0)), (Abs (q ++ pl) (pl ++ pl)), (Abs (q ++ pl) []), (Abs (p ++ ql) ql), (Abs (p ++ ql) q)
(Abs (p ++ ql) p), (Abs (p ++ ql) gv0), (Abs (p ++ ql) pl), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (k :: gv0)), (Abs (p ++ ql) (k :: pl)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: q))
(Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (a :: gv0)), (Abs (p ++ ql) (a :: pl)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge ql gv0)), (Abs (p ++ ql) (merge ql pl)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q q))
(Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge q gv0)), (Abs (p ++ ql) (merge q pl)), (Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p p)), (Abs (p ++ ql) (merge p gv0)), (Abs (p ++ ql) (merge p pl)), (Abs (p ++ ql) (merge gv0 ql)), (Abs (p ++ ql) (merge gv0 q))
(Abs (p ++ ql) (merge gv0 p)), (Abs (p ++ ql) (merge gv0 gv0)), (Abs (p ++ ql) (merge gv0 pl)), (Abs (p ++ ql) (merge pl ql)), (Abs (p ++ ql) (merge pl q)), (Abs (p ++ ql) (merge pl p)), (Abs (p ++ ql) (merge pl gv0)), (Abs (p ++ ql) (merge pl pl)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k q))
(Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert k gv0)), (Abs (p ++ ql) (insert k pl)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (insert a gv0)), (Abs (p ++ ql) (insert a pl)), (Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap q))
(Abs (p ++ ql) (maybe_swap p)), (Abs (p ++ ql) (maybe_swap gv0)), (Abs (p ++ ql) (maybe_swap pl)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ q)), (Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (ql ++ gv0)), (Abs (p ++ ql) (ql ++ pl)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ q))
(Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (q ++ gv0)), (Abs (p ++ ql) (q ++ pl)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) (p ++ gv0)), (Abs (p ++ ql) (p ++ pl)), (Abs (p ++ ql) (gv0 ++ ql)), (Abs (p ++ ql) (gv0 ++ q)), (Abs (p ++ ql) (gv0 ++ p))
(Abs (p ++ ql) (gv0 ++ gv0)), (Abs (p ++ ql) (gv0 ++ pl)), (Abs (p ++ ql) (pl ++ ql)), (Abs (p ++ ql) (pl ++ q)), (Abs (p ++ ql) (pl ++ p)), (Abs (p ++ ql) (pl ++ gv0)), (Abs (p ++ ql) (pl ++ pl)), (Abs (p ++ ql) []), (Abs (p ++ q) ql), (Abs (p ++ q) q)
(Abs (p ++ q) p), (Abs (p ++ q) gv0), (Abs (p ++ q) pl), (Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (k :: gv0)), (Abs (p ++ q) (k :: pl)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: q))
(Abs (p ++ q) (a :: p)), (Abs (p ++ q) (a :: gv0)), (Abs (p ++ q) (a :: pl)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge ql gv0)), (Abs (p ++ q) (merge ql pl)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q q))
(Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q gv0)), (Abs (p ++ q) (merge q pl)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p gv0)), (Abs (p ++ q) (merge p pl)), (Abs (p ++ q) (merge gv0 ql)), (Abs (p ++ q) (merge gv0 q))
(Abs (p ++ q) (merge gv0 p)), (Abs (p ++ q) (merge gv0 gv0)), (Abs (p ++ q) (merge gv0 pl)), (Abs (p ++ q) (merge pl ql)), (Abs (p ++ q) (merge pl q)), (Abs (p ++ q) (merge pl p)), (Abs (p ++ q) (merge pl gv0)), (Abs (p ++ q) (merge pl pl)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k q))
(Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k gv0)), (Abs (p ++ q) (insert k pl)), (Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p)), (Abs (p ++ q) (insert a gv0)), (Abs (p ++ q) (insert a pl)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap q))
(Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap gv0)), (Abs (p ++ q) (maybe_swap pl)), (Abs (p ++ q) (ql ++ ql)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (ql ++ gv0)), (Abs (p ++ q) (ql ++ pl)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ q))
(Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ gv0)), (Abs (p ++ q) (q ++ pl)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ gv0)), (Abs (p ++ q) (p ++ pl)), (Abs (p ++ q) (gv0 ++ ql)), (Abs (p ++ q) (gv0 ++ q)), (Abs (p ++ q) (gv0 ++ p))
(Abs (p ++ q) (gv0 ++ gv0)), (Abs (p ++ q) (gv0 ++ pl)), (Abs (p ++ q) (pl ++ ql)), (Abs (p ++ q) (pl ++ q)), (Abs (p ++ q) (pl ++ p)), (Abs (p ++ q) (pl ++ gv0)), (Abs (p ++ q) (pl ++ pl)), (Abs (p ++ q) []), (Abs (p ++ p) ql), (Abs (p ++ p) q)
(Abs (p ++ p) p), (Abs (p ++ p) gv0), (Abs (p ++ p) pl), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: gv0)), (Abs (p ++ p) (k :: pl)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: q))
(Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: gv0)), (Abs (p ++ p) (a :: pl)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge ql gv0)), (Abs (p ++ p) (merge ql pl)), (Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q q))
(Abs (p ++ p) (merge q p)), (Abs (p ++ p) (merge q gv0)), (Abs (p ++ p) (merge q pl)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (merge p gv0)), (Abs (p ++ p) (merge p pl)), (Abs (p ++ p) (merge gv0 ql)), (Abs (p ++ p) (merge gv0 q))
(Abs (p ++ p) (merge gv0 p)), (Abs (p ++ p) (merge gv0 gv0)), (Abs (p ++ p) (merge gv0 pl)), (Abs (p ++ p) (merge pl ql)), (Abs (p ++ p) (merge pl q)), (Abs (p ++ p) (merge pl p)), (Abs (p ++ p) (merge pl gv0)), (Abs (p ++ p) (merge pl pl)), (Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k q))
(Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert k gv0)), (Abs (p ++ p) (insert k pl)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a gv0)), (Abs (p ++ p) (insert a pl)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap q))
(Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap gv0)), (Abs (p ++ p) (maybe_swap pl)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (ql ++ gv0)), (Abs (p ++ p) (ql ++ pl)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ q))
(Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (q ++ gv0)), (Abs (p ++ p) (q ++ pl)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ gv0)), (Abs (p ++ p) (p ++ pl)), (Abs (p ++ p) (gv0 ++ ql)), (Abs (p ++ p) (gv0 ++ q)), (Abs (p ++ p) (gv0 ++ p))
(Abs (p ++ p) (gv0 ++ gv0)), (Abs (p ++ p) (gv0 ++ pl)), (Abs (p ++ p) (pl ++ ql)), (Abs (p ++ p) (pl ++ q)), (Abs (p ++ p) (pl ++ p)), (Abs (p ++ p) (pl ++ gv0)), (Abs (p ++ p) (pl ++ pl)), (Abs (p ++ p) []), (Abs (p ++ gv0) ql), (Abs (p ++ gv0) q)
(Abs (p ++ gv0) p), (Abs (p ++ gv0) gv0), (Abs (p ++ gv0) pl), (Abs (p ++ gv0) (k :: ql)), (Abs (p ++ gv0) (k :: q)), (Abs (p ++ gv0) (k :: p)), (Abs (p ++ gv0) (k :: gv0)), (Abs (p ++ gv0) (k :: pl)), (Abs (p ++ gv0) (a :: ql)), (Abs (p ++ gv0) (a :: q))
(Abs (p ++ gv0) (a :: p)), (Abs (p ++ gv0) (a :: gv0)), (Abs (p ++ gv0) (a :: pl)), (Abs (p ++ gv0) (merge ql ql)), (Abs (p ++ gv0) (merge ql q)), (Abs (p ++ gv0) (merge ql p)), (Abs (p ++ gv0) (merge ql gv0)), (Abs (p ++ gv0) (merge ql pl)), (Abs (p ++ gv0) (merge q ql)), (Abs (p ++ gv0) (merge q q))
(Abs (p ++ gv0) (merge q p)), (Abs (p ++ gv0) (merge q gv0)), (Abs (p ++ gv0) (merge q pl)), (Abs (p ++ gv0) (merge p ql)), (Abs (p ++ gv0) (merge p q)), (Abs (p ++ gv0) (merge p p)), (Abs (p ++ gv0) (merge p gv0)), (Abs (p ++ gv0) (merge p pl)), (Abs (p ++ gv0) (merge gv0 ql)), (Abs (p ++ gv0) (merge gv0 q))
(Abs (p ++ gv0) (merge gv0 p)), (Abs (p ++ gv0) (merge gv0 gv0)), (Abs (p ++ gv0) (merge gv0 pl)), (Abs (p ++ gv0) (merge pl ql)), (Abs (p ++ gv0) (merge pl q)), (Abs (p ++ gv0) (merge pl p)), (Abs (p ++ gv0) (merge pl gv0)), (Abs (p ++ gv0) (merge pl pl)), (Abs (p ++ gv0) (insert k ql)), (Abs (p ++ gv0) (insert k q))
(Abs (p ++ gv0) (insert k p)), (Abs (p ++ gv0) (insert k gv0)), (Abs (p ++ gv0) (insert k pl)), (Abs (p ++ gv0) (insert a ql)), (Abs (p ++ gv0) (insert a q)), (Abs (p ++ gv0) (insert a p)), (Abs (p ++ gv0) (insert a gv0)), (Abs (p ++ gv0) (insert a pl)), (Abs (p ++ gv0) (maybe_swap ql)), (Abs (p ++ gv0) (maybe_swap q))
(Abs (p ++ gv0) (maybe_swap p)), (Abs (p ++ gv0) (maybe_swap gv0)), (Abs (p ++ gv0) (maybe_swap pl)), (Abs (p ++ gv0) (ql ++ ql)), (Abs (p ++ gv0) (ql ++ q)), (Abs (p ++ gv0) (ql ++ p)), (Abs (p ++ gv0) (ql ++ gv0)), (Abs (p ++ gv0) (ql ++ pl)), (Abs (p ++ gv0) (q ++ ql)), (Abs (p ++ gv0) (q ++ q))
(Abs (p ++ gv0) (q ++ p)), (Abs (p ++ gv0) (q ++ gv0)), (Abs (p ++ gv0) (q ++ pl)), (Abs (p ++ gv0) (p ++ ql)), (Abs (p ++ gv0) (p ++ q)), (Abs (p ++ gv0) (p ++ p)), (Abs (p ++ gv0) (p ++ pl)), (Abs (p ++ gv0) (gv0 ++ ql)), (Abs (p ++ gv0) (gv0 ++ q)), (Abs (p ++ gv0) (gv0 ++ p))
(Abs (p ++ gv0) (gv0 ++ gv0)), (Abs (p ++ gv0) (gv0 ++ pl)), (Abs (p ++ gv0) (pl ++ ql)), (Abs (p ++ gv0) (pl ++ q)), (Abs (p ++ gv0) (pl ++ p)), (Abs (p ++ gv0) (pl ++ gv0)), (Abs (p ++ gv0) (pl ++ pl)), (Abs (p ++ gv0) []), (Abs (p ++ pl) ql), (Abs (p ++ pl) q)
(Abs (p ++ pl) p), (Abs (p ++ pl) gv0), (Abs (p ++ pl) pl), (Abs (p ++ pl) (k :: ql)), (Abs (p ++ pl) (k :: q)), (Abs (p ++ pl) (k :: p)), (Abs (p ++ pl) (k :: gv0)), (Abs (p ++ pl) (k :: pl)), (Abs (p ++ pl) (a :: ql)), (Abs (p ++ pl) (a :: q))
(Abs (p ++ pl) (a :: p)), (Abs (p ++ pl) (a :: gv0)), (Abs (p ++ pl) (a :: pl)), (Abs (p ++ pl) (merge ql ql)), (Abs (p ++ pl) (merge ql q)), (Abs (p ++ pl) (merge ql p)), (Abs (p ++ pl) (merge ql gv0)), (Abs (p ++ pl) (merge ql pl)), (Abs (p ++ pl) (merge q ql)), (Abs (p ++ pl) (merge q q))
(Abs (p ++ pl) (merge q p)), (Abs (p ++ pl) (merge q gv0)), (Abs (p ++ pl) (merge q pl)), (Abs (p ++ pl) (merge p ql)), (Abs (p ++ pl) (merge p q)), (Abs (p ++ pl) (merge p p)), (Abs (p ++ pl) (merge p gv0)), (Abs (p ++ pl) (merge p pl)), (Abs (p ++ pl) (merge gv0 ql)), (Abs (p ++ pl) (merge gv0 q))
(Abs (p ++ pl) (merge gv0 p)), (Abs (p ++ pl) (merge gv0 gv0)), (Abs (p ++ pl) (merge gv0 pl)), (Abs (p ++ pl) (merge pl ql)), (Abs (p ++ pl) (merge pl q)), (Abs (p ++ pl) (merge pl p)), (Abs (p ++ pl) (merge pl gv0)), (Abs (p ++ pl) (merge pl pl)), (Abs (p ++ pl) (insert k ql)), (Abs (p ++ pl) (insert k q))
(Abs (p ++ pl) (insert k p)), (Abs (p ++ pl) (insert k gv0)), (Abs (p ++ pl) (insert k pl)), (Abs (p ++ pl) (insert a ql)), (Abs (p ++ pl) (insert a q)), (Abs (p ++ pl) (insert a p)), (Abs (p ++ pl) (insert a gv0)), (Abs (p ++ pl) (insert a pl)), (Abs (p ++ pl) (maybe_swap ql)), (Abs (p ++ pl) (maybe_swap q))
(Abs (p ++ pl) (maybe_swap p)), (Abs (p ++ pl) (maybe_swap gv0)), (Abs (p ++ pl) (maybe_swap pl)), (Abs (p ++ pl) (ql ++ ql)), (Abs (p ++ pl) (ql ++ q)), (Abs (p ++ pl) (ql ++ p)), (Abs (p ++ pl) (ql ++ gv0)), (Abs (p ++ pl) (ql ++ pl)), (Abs (p ++ pl) (q ++ ql)), (Abs (p ++ pl) (q ++ q))
(Abs (p ++ pl) (q ++ p)), (Abs (p ++ pl) (q ++ gv0)), (Abs (p ++ pl) (q ++ pl)), (Abs (p ++ pl) (p ++ ql)), (Abs (p ++ pl) (p ++ q)), (Abs (p ++ pl) (p ++ p)), (Abs (p ++ pl) (p ++ gv0)), (Abs (p ++ pl) (gv0 ++ ql)), (Abs (p ++ pl) (gv0 ++ q)), (Abs (p ++ pl) (gv0 ++ p))
(Abs (p ++ pl) (gv0 ++ gv0)), (Abs (p ++ pl) (gv0 ++ pl)), (Abs (p ++ pl) (pl ++ ql)), (Abs (p ++ pl) (pl ++ q)), (Abs (p ++ pl) (pl ++ p)), (Abs (p ++ pl) (pl ++ gv0)), (Abs (p ++ pl) (pl ++ pl)), (Abs (p ++ pl) []), (Abs (gv0 ++ ql) ql), (Abs (gv0 ++ ql) q)
(Abs (gv0 ++ ql) p), (Abs (gv0 ++ ql) gv0), (Abs (gv0 ++ ql) pl), (Abs (gv0 ++ ql) (k :: ql)), (Abs (gv0 ++ ql) (k :: q)), (Abs (gv0 ++ ql) (k :: p)), (Abs (gv0 ++ ql) (k :: gv0)), (Abs (gv0 ++ ql) (k :: pl)), (Abs (gv0 ++ ql) (a :: ql)), (Abs (gv0 ++ ql) (a :: q))
(Abs (gv0 ++ ql) (a :: p)), (Abs (gv0 ++ ql) (a :: gv0)), (Abs (gv0 ++ ql) (a :: pl)), (Abs (gv0 ++ ql) (merge ql ql)), (Abs (gv0 ++ ql) (merge ql q)), (Abs (gv0 ++ ql) (merge ql p)), (Abs (gv0 ++ ql) (merge ql gv0)), (Abs (gv0 ++ ql) (merge ql pl)), (Abs (gv0 ++ ql) (merge q ql)), (Abs (gv0 ++ ql) (merge q q))
(Abs (gv0 ++ ql) (merge q p)), (Abs (gv0 ++ ql) (merge q gv0)), (Abs (gv0 ++ ql) (merge q pl)), (Abs (gv0 ++ ql) (merge p ql)), (Abs (gv0 ++ ql) (merge p q)), (Abs (gv0 ++ ql) (merge p p)), (Abs (gv0 ++ ql) (merge p gv0)), (Abs (gv0 ++ ql) (merge p pl)), (Abs (gv0 ++ ql) (merge gv0 ql)), (Abs (gv0 ++ ql) (merge gv0 q))
(Abs (gv0 ++ ql) (merge gv0 p)), (Abs (gv0 ++ ql) (merge gv0 gv0)), (Abs (gv0 ++ ql) (merge gv0 pl)), (Abs (gv0 ++ ql) (merge pl ql)), (Abs (gv0 ++ ql) (merge pl q)), (Abs (gv0 ++ ql) (merge pl p)), (Abs (gv0 ++ ql) (merge pl gv0)), (Abs (gv0 ++ ql) (merge pl pl)), (Abs (gv0 ++ ql) (insert k ql)), (Abs (gv0 ++ ql) (insert k q))
(Abs (gv0 ++ ql) (insert k p)), (Abs (gv0 ++ ql) (insert k gv0)), (Abs (gv0 ++ ql) (insert k pl)), (Abs (gv0 ++ ql) (insert a ql)), (Abs (gv0 ++ ql) (insert a q)), (Abs (gv0 ++ ql) (insert a p)), (Abs (gv0 ++ ql) (insert a gv0)), (Abs (gv0 ++ ql) (insert a pl)), (Abs (gv0 ++ ql) (maybe_swap ql)), (Abs (gv0 ++ ql) (maybe_swap q))
(Abs (gv0 ++ ql) (maybe_swap p)), (Abs (gv0 ++ ql) (maybe_swap gv0)), (Abs (gv0 ++ ql) (maybe_swap pl)), (Abs (gv0 ++ ql) (ql ++ ql)), (Abs (gv0 ++ ql) (ql ++ q)), (Abs (gv0 ++ ql) (ql ++ p)), (Abs (gv0 ++ ql) (ql ++ gv0)), (Abs (gv0 ++ ql) (ql ++ pl)), (Abs (gv0 ++ ql) (q ++ ql)), (Abs (gv0 ++ ql) (q ++ q))
(Abs (gv0 ++ ql) (q ++ p)), (Abs (gv0 ++ ql) (q ++ gv0)), (Abs (gv0 ++ ql) (q ++ pl)), (Abs (gv0 ++ ql) (p ++ ql)), (Abs (gv0 ++ ql) (p ++ q)), (Abs (gv0 ++ ql) (p ++ p)), (Abs (gv0 ++ ql) (p ++ gv0)), (Abs (gv0 ++ ql) (p ++ pl)), (Abs (gv0 ++ ql) (gv0 ++ q)), (Abs (gv0 ++ ql) (gv0 ++ p))
(Abs (gv0 ++ ql) (gv0 ++ gv0)), (Abs (gv0 ++ ql) (gv0 ++ pl)), (Abs (gv0 ++ ql) (pl ++ ql)), (Abs (gv0 ++ ql) (pl ++ q)), (Abs (gv0 ++ ql) (pl ++ p)), (Abs (gv0 ++ ql) (pl ++ gv0)), (Abs (gv0 ++ ql) (pl ++ pl)), (Abs (gv0 ++ ql) []), (Abs (gv0 ++ q) ql), (Abs (gv0 ++ q) q)
(Abs (gv0 ++ q) p), (Abs (gv0 ++ q) gv0), (Abs (gv0 ++ q) pl), (Abs (gv0 ++ q) (k :: ql)), (Abs (gv0 ++ q) (k :: q)), (Abs (gv0 ++ q) (k :: p)), (Abs (gv0 ++ q) (k :: gv0)), (Abs (gv0 ++ q) (k :: pl)), (Abs (gv0 ++ q) (a :: ql)), (Abs (gv0 ++ q) (a :: q))
(Abs (gv0 ++ q) (a :: p)), (Abs (gv0 ++ q) (a :: gv0)), (Abs (gv0 ++ q) (a :: pl)), (Abs (gv0 ++ q) (merge ql ql)), (Abs (gv0 ++ q) (merge ql q)), (Abs (gv0 ++ q) (merge ql p)), (Abs (gv0 ++ q) (merge ql gv0)), (Abs (gv0 ++ q) (merge ql pl)), (Abs (gv0 ++ q) (merge q ql)), (Abs (gv0 ++ q) (merge q q))
(Abs (gv0 ++ q) (merge q p)), (Abs (gv0 ++ q) (merge q gv0)), (Abs (gv0 ++ q) (merge q pl)), (Abs (gv0 ++ q) (merge p ql)), (Abs (gv0 ++ q) (merge p q)), (Abs (gv0 ++ q) (merge p p)), (Abs (gv0 ++ q) (merge p gv0)), (Abs (gv0 ++ q) (merge p pl)), (Abs (gv0 ++ q) (merge gv0 ql)), (Abs (gv0 ++ q) (merge gv0 q))
(Abs (gv0 ++ q) (merge gv0 p)), (Abs (gv0 ++ q) (merge gv0 gv0)), (Abs (gv0 ++ q) (merge gv0 pl)), (Abs (gv0 ++ q) (merge pl ql)), (Abs (gv0 ++ q) (merge pl q)), (Abs (gv0 ++ q) (merge pl p)), (Abs (gv0 ++ q) (merge pl gv0)), (Abs (gv0 ++ q) (merge pl pl)), (Abs (gv0 ++ q) (insert k ql)), (Abs (gv0 ++ q) (insert k q))
(Abs (gv0 ++ q) (insert k p)), (Abs (gv0 ++ q) (insert k gv0)), (Abs (gv0 ++ q) (insert k pl)), (Abs (gv0 ++ q) (insert a ql)), (Abs (gv0 ++ q) (insert a q)), (Abs (gv0 ++ q) (insert a p)), (Abs (gv0 ++ q) (insert a gv0)), (Abs (gv0 ++ q) (insert a pl)), (Abs (gv0 ++ q) (maybe_swap ql)), (Abs (gv0 ++ q) (maybe_swap q))
(Abs (gv0 ++ q) (maybe_swap p)), (Abs (gv0 ++ q) (maybe_swap gv0)), (Abs (gv0 ++ q) (maybe_swap pl)), (Abs (gv0 ++ q) (ql ++ ql)), (Abs (gv0 ++ q) (ql ++ q)), (Abs (gv0 ++ q) (ql ++ p)), (Abs (gv0 ++ q) (ql ++ gv0)), (Abs (gv0 ++ q) (ql ++ pl)), (Abs (gv0 ++ q) (q ++ ql)), (Abs (gv0 ++ q) (q ++ q))
(Abs (gv0 ++ q) (q ++ p)), (Abs (gv0 ++ q) (q ++ gv0)), (Abs (gv0 ++ q) (q ++ pl)), (Abs (gv0 ++ q) (p ++ ql)), (Abs (gv0 ++ q) (p ++ q)), (Abs (gv0 ++ q) (p ++ p)), (Abs (gv0 ++ q) (p ++ gv0)), (Abs (gv0 ++ q) (p ++ pl)), (Abs (gv0 ++ q) (gv0 ++ ql)), (Abs (gv0 ++ q) (gv0 ++ p))
(Abs (gv0 ++ q) (gv0 ++ gv0)), (Abs (gv0 ++ q) (gv0 ++ pl)), (Abs (gv0 ++ q) (pl ++ ql)), (Abs (gv0 ++ q) (pl ++ q)), (Abs (gv0 ++ q) (pl ++ p)), (Abs (gv0 ++ q) (pl ++ gv0)), (Abs (gv0 ++ q) (pl ++ pl)), (Abs (gv0 ++ q) []), (Abs (gv0 ++ p) ql), (Abs (gv0 ++ p) q)
(Abs (gv0 ++ p) p), (Abs (gv0 ++ p) gv0), (Abs (gv0 ++ p) pl), (Abs (gv0 ++ p) (k :: ql)), (Abs (gv0 ++ p) (k :: q)), (Abs (gv0 ++ p) (k :: p)), (Abs (gv0 ++ p) (k :: gv0)), (Abs (gv0 ++ p) (k :: pl)), (Abs (gv0 ++ p) (a :: ql)), (Abs (gv0 ++ p) (a :: q))
(Abs (gv0 ++ p) (a :: p)), (Abs (gv0 ++ p) (a :: gv0)), (Abs (gv0 ++ p) (a :: pl)), (Abs (gv0 ++ p) (merge ql ql)), (Abs (gv0 ++ p) (merge ql q)), (Abs (gv0 ++ p) (merge ql p)), (Abs (gv0 ++ p) (merge ql gv0)), (Abs (gv0 ++ p) (merge ql pl)), (Abs (gv0 ++ p) (merge q ql)), (Abs (gv0 ++ p) (merge q q))
(Abs (gv0 ++ p) (merge q p)), (Abs (gv0 ++ p) (merge q gv0)), (Abs (gv0 ++ p) (merge q pl)), (Abs (gv0 ++ p) (merge p ql)), (Abs (gv0 ++ p) (merge p q)), (Abs (gv0 ++ p) (merge p p)), (Abs (gv0 ++ p) (merge p gv0)), (Abs (gv0 ++ p) (merge p pl)), (Abs (gv0 ++ p) (merge gv0 ql)), (Abs (gv0 ++ p) (merge gv0 q))
(Abs (gv0 ++ p) (merge gv0 p)), (Abs (gv0 ++ p) (merge gv0 gv0)), (Abs (gv0 ++ p) (merge gv0 pl)), (Abs (gv0 ++ p) (merge pl ql)), (Abs (gv0 ++ p) (merge pl q)), (Abs (gv0 ++ p) (merge pl p)), (Abs (gv0 ++ p) (merge pl gv0)), (Abs (gv0 ++ p) (merge pl pl)), (Abs (gv0 ++ p) (insert k ql)), (Abs (gv0 ++ p) (insert k q))
(Abs (gv0 ++ p) (insert k p)), (Abs (gv0 ++ p) (insert k gv0)), (Abs (gv0 ++ p) (insert k pl)), (Abs (gv0 ++ p) (insert a ql)), (Abs (gv0 ++ p) (insert a q)), (Abs (gv0 ++ p) (insert a p)), (Abs (gv0 ++ p) (insert a gv0)), (Abs (gv0 ++ p) (insert a pl)), (Abs (gv0 ++ p) (maybe_swap ql)), (Abs (gv0 ++ p) (maybe_swap q))
(Abs (gv0 ++ p) (maybe_swap p)), (Abs (gv0 ++ p) (maybe_swap gv0)), (Abs (gv0 ++ p) (maybe_swap pl)), (Abs (gv0 ++ p) (ql ++ ql)), (Abs (gv0 ++ p) (ql ++ q)), (Abs (gv0 ++ p) (ql ++ p)), (Abs (gv0 ++ p) (ql ++ gv0)), (Abs (gv0 ++ p) (ql ++ pl)), (Abs (gv0 ++ p) (q ++ ql)), (Abs (gv0 ++ p) (q ++ q))
(Abs (gv0 ++ p) (q ++ p)), (Abs (gv0 ++ p) (q ++ gv0)), (Abs (gv0 ++ p) (q ++ pl)), (Abs (gv0 ++ p) (p ++ ql)), (Abs (gv0 ++ p) (p ++ q)), (Abs (gv0 ++ p) (p ++ p)), (Abs (gv0 ++ p) (p ++ gv0)), (Abs (gv0 ++ p) (p ++ pl)), (Abs (gv0 ++ p) (gv0 ++ ql)), (Abs (gv0 ++ p) (gv0 ++ q))
(Abs (gv0 ++ p) (gv0 ++ gv0)), (Abs (gv0 ++ p) (gv0 ++ pl)), (Abs (gv0 ++ p) (pl ++ ql)), (Abs (gv0 ++ p) (pl ++ q)), (Abs (gv0 ++ p) (pl ++ p)), (Abs (gv0 ++ p) (pl ++ gv0)), (Abs (gv0 ++ p) (pl ++ pl)), (Abs (gv0 ++ p) []), (Abs (gv0 ++ gv0) ql), (Abs (gv0 ++ gv0) q)
(Abs (gv0 ++ gv0) p), (Abs (gv0 ++ gv0) gv0), (Abs (gv0 ++ gv0) pl), (Abs (gv0 ++ gv0) (k :: ql)), (Abs (gv0 ++ gv0) (k :: q)), (Abs (gv0 ++ gv0) (k :: p)), (Abs (gv0 ++ gv0) (k :: gv0)), (Abs (gv0 ++ gv0) (k :: pl)), (Abs (gv0 ++ gv0) (a :: ql)), (Abs (gv0 ++ gv0) (a :: q))
(Abs (gv0 ++ gv0) (a :: p)), (Abs (gv0 ++ gv0) (a :: gv0)), (Abs (gv0 ++ gv0) (a :: pl)), (Abs (gv0 ++ gv0) (merge ql ql)), (Abs (gv0 ++ gv0) (merge ql q)), (Abs (gv0 ++ gv0) (merge ql p)), (Abs (gv0 ++ gv0) (merge ql gv0)), (Abs (gv0 ++ gv0) (merge ql pl)), (Abs (gv0 ++ gv0) (merge q ql)), (Abs (gv0 ++ gv0) (merge q q))
(Abs (gv0 ++ gv0) (merge q p)), (Abs (gv0 ++ gv0) (merge q gv0)), (Abs (gv0 ++ gv0) (merge q pl)), (Abs (gv0 ++ gv0) (merge p ql)), (Abs (gv0 ++ gv0) (merge p q)), (Abs (gv0 ++ gv0) (merge p p)), (Abs (gv0 ++ gv0) (merge p gv0)), (Abs (gv0 ++ gv0) (merge p pl)), (Abs (gv0 ++ gv0) (merge gv0 ql)), (Abs (gv0 ++ gv0) (merge gv0 q))
(Abs (gv0 ++ gv0) (merge gv0 p)), (Abs (gv0 ++ gv0) (merge gv0 gv0)), (Abs (gv0 ++ gv0) (merge gv0 pl)), (Abs (gv0 ++ gv0) (merge pl ql)), (Abs (gv0 ++ gv0) (merge pl q)), (Abs (gv0 ++ gv0) (merge pl p)), (Abs (gv0 ++ gv0) (merge pl gv0)), (Abs (gv0 ++ gv0) (merge pl pl)), (Abs (gv0 ++ gv0) (insert k ql)), (Abs (gv0 ++ gv0) (insert k q))
(Abs (gv0 ++ gv0) (insert k p)), (Abs (gv0 ++ gv0) (insert k gv0)), (Abs (gv0 ++ gv0) (insert k pl)), (Abs (gv0 ++ gv0) (insert a ql)), (Abs (gv0 ++ gv0) (insert a q)), (Abs (gv0 ++ gv0) (insert a p)), (Abs (gv0 ++ gv0) (insert a gv0)), (Abs (gv0 ++ gv0) (insert a pl)), (Abs (gv0 ++ gv0) (maybe_swap ql)), (Abs (gv0 ++ gv0) (maybe_swap q))
(Abs (gv0 ++ gv0) (maybe_swap p)), (Abs (gv0 ++ gv0) (maybe_swap gv0)), (Abs (gv0 ++ gv0) (maybe_swap pl)), (Abs (gv0 ++ gv0) (ql ++ ql)), (Abs (gv0 ++ gv0) (ql ++ q)), (Abs (gv0 ++ gv0) (ql ++ p)), (Abs (gv0 ++ gv0) (ql ++ gv0)), (Abs (gv0 ++ gv0) (ql ++ pl)), (Abs (gv0 ++ gv0) (q ++ ql)), (Abs (gv0 ++ gv0) (q ++ q))
(Abs (gv0 ++ gv0) (q ++ p)), (Abs (gv0 ++ gv0) (q ++ gv0)), (Abs (gv0 ++ gv0) (q ++ pl)), (Abs (gv0 ++ gv0) (p ++ ql)), (Abs (gv0 ++ gv0) (p ++ q)), (Abs (gv0 ++ gv0) (p ++ p)), (Abs (gv0 ++ gv0) (p ++ gv0)), (Abs (gv0 ++ gv0) (p ++ pl)), (Abs (gv0 ++ gv0) (gv0 ++ ql)), (Abs (gv0 ++ gv0) (gv0 ++ q))
(Abs (gv0 ++ gv0) (gv0 ++ p)), (Abs (gv0 ++ gv0) (gv0 ++ pl)), (Abs (gv0 ++ gv0) (pl ++ ql)), (Abs (gv0 ++ gv0) (pl ++ q)), (Abs (gv0 ++ gv0) (pl ++ p)), (Abs (gv0 ++ gv0) (pl ++ gv0)), (Abs (gv0 ++ gv0) (pl ++ pl)), (Abs (gv0 ++ gv0) []), (Abs (gv0 ++ pl) ql), (Abs (gv0 ++ pl) q)
(Abs (gv0 ++ pl) p), (Abs (gv0 ++ pl) gv0), (Abs (gv0 ++ pl) pl), (Abs (gv0 ++ pl) (k :: ql)), (Abs (gv0 ++ pl) (k :: q)), (Abs (gv0 ++ pl) (k :: p)), (Abs (gv0 ++ pl) (k :: gv0)), (Abs (gv0 ++ pl) (k :: pl)), (Abs (gv0 ++ pl) (a :: ql)), (Abs (gv0 ++ pl) (a :: q))
(Abs (gv0 ++ pl) (a :: p)), (Abs (gv0 ++ pl) (a :: gv0)), (Abs (gv0 ++ pl) (a :: pl)), (Abs (gv0 ++ pl) (merge ql ql)), (Abs (gv0 ++ pl) (merge ql q)), (Abs (gv0 ++ pl) (merge ql p)), (Abs (gv0 ++ pl) (merge ql gv0)), (Abs (gv0 ++ pl) (merge ql pl)), (Abs (gv0 ++ pl) (merge q ql)), (Abs (gv0 ++ pl) (merge q q))
(Abs (gv0 ++ pl) (merge q p)), (Abs (gv0 ++ pl) (merge q gv0)), (Abs (gv0 ++ pl) (merge q pl)), (Abs (gv0 ++ pl) (merge p ql)), (Abs (gv0 ++ pl) (merge p q)), (Abs (gv0 ++ pl) (merge p p)), (Abs (gv0 ++ pl) (merge p gv0)), (Abs (gv0 ++ pl) (merge p pl)), (Abs (gv0 ++ pl) (merge gv0 ql)), (Abs (gv0 ++ pl) (merge gv0 q))
(Abs (gv0 ++ pl) (merge gv0 p)), (Abs (gv0 ++ pl) (merge gv0 gv0)), (Abs (gv0 ++ pl) (merge gv0 pl)), (Abs (gv0 ++ pl) (merge pl ql)), (Abs (gv0 ++ pl) (merge pl q)), (Abs (gv0 ++ pl) (merge pl p)), (Abs (gv0 ++ pl) (merge pl gv0)), (Abs (gv0 ++ pl) (merge pl pl)), (Abs (gv0 ++ pl) (insert k ql)), (Abs (gv0 ++ pl) (insert k q))
(Abs (gv0 ++ pl) (insert k p)), (Abs (gv0 ++ pl) (insert k gv0)), (Abs (gv0 ++ pl) (insert k pl)), (Abs (gv0 ++ pl) (insert a ql)), (Abs (gv0 ++ pl) (insert a q)), (Abs (gv0 ++ pl) (insert a p)), (Abs (gv0 ++ pl) (insert a gv0)), (Abs (gv0 ++ pl) (insert a pl)), (Abs (gv0 ++ pl) (maybe_swap ql)), (Abs (gv0 ++ pl) (maybe_swap q))
(Abs (gv0 ++ pl) (maybe_swap p)), (Abs (gv0 ++ pl) (maybe_swap gv0)), (Abs (gv0 ++ pl) (maybe_swap pl)), (Abs (gv0 ++ pl) (ql ++ ql)), (Abs (gv0 ++ pl) (ql ++ q)), (Abs (gv0 ++ pl) (ql ++ p)), (Abs (gv0 ++ pl) (ql ++ gv0)), (Abs (gv0 ++ pl) (ql ++ pl)), (Abs (gv0 ++ pl) (q ++ ql)), (Abs (gv0 ++ pl) (q ++ q))
(Abs (gv0 ++ pl) (q ++ p)), (Abs (gv0 ++ pl) (q ++ gv0)), (Abs (gv0 ++ pl) (q ++ pl)), (Abs (gv0 ++ pl) (p ++ ql)), (Abs (gv0 ++ pl) (p ++ q)), (Abs (gv0 ++ pl) (p ++ p)), (Abs (gv0 ++ pl) (p ++ gv0)), (Abs (gv0 ++ pl) (p ++ pl)), (Abs (gv0 ++ pl) (gv0 ++ ql)), (Abs (gv0 ++ pl) (gv0 ++ q))
(Abs (gv0 ++ pl) (gv0 ++ p)), (Abs (gv0 ++ pl) (gv0 ++ gv0)), (Abs (gv0 ++ pl) (pl ++ ql)), (Abs (gv0 ++ pl) (pl ++ q)), (Abs (gv0 ++ pl) (pl ++ p)), (Abs (gv0 ++ pl) (pl ++ gv0)), (Abs (gv0 ++ pl) (pl ++ pl)), (Abs (gv0 ++ pl) []), (Abs (pl ++ ql) ql), (Abs (pl ++ ql) q)
(Abs (pl ++ ql) p), (Abs (pl ++ ql) gv0), (Abs (pl ++ ql) pl), (Abs (pl ++ ql) (k :: ql)), (Abs (pl ++ ql) (k :: q)), (Abs (pl ++ ql) (k :: p)), (Abs (pl ++ ql) (k :: gv0)), (Abs (pl ++ ql) (k :: pl)), (Abs (pl ++ ql) (a :: ql)), (Abs (pl ++ ql) (a :: q))
(Abs (pl ++ ql) (a :: p)), (Abs (pl ++ ql) (a :: gv0)), (Abs (pl ++ ql) (a :: pl)), (Abs (pl ++ ql) (merge ql ql)), (Abs (pl ++ ql) (merge ql q)), (Abs (pl ++ ql) (merge ql p)), (Abs (pl ++ ql) (merge ql gv0)), (Abs (pl ++ ql) (merge ql pl)), (Abs (pl ++ ql) (merge q ql)), (Abs (pl ++ ql) (merge q q))
(Abs (pl ++ ql) (merge q p)), (Abs (pl ++ ql) (merge q gv0)), (Abs (pl ++ ql) (merge q pl)), (Abs (pl ++ ql) (merge p ql)), (Abs (pl ++ ql) (merge p q)), (Abs (pl ++ ql) (merge p p)), (Abs (pl ++ ql) (merge p gv0)), (Abs (pl ++ ql) (merge p pl)), (Abs (pl ++ ql) (merge gv0 ql)), (Abs (pl ++ ql) (merge gv0 q))
(Abs (pl ++ ql) (merge gv0 p)), (Abs (pl ++ ql) (merge gv0 gv0)), (Abs (pl ++ ql) (merge gv0 pl)), (Abs (pl ++ ql) (merge pl ql)), (Abs (pl ++ ql) (merge pl q)), (Abs (pl ++ ql) (merge pl p)), (Abs (pl ++ ql) (merge pl gv0)), (Abs (pl ++ ql) (merge pl pl)), (Abs (pl ++ ql) (insert k ql)), (Abs (pl ++ ql) (insert k q))
(Abs (pl ++ ql) (insert k p)), (Abs (pl ++ ql) (insert k gv0)), (Abs (pl ++ ql) (insert k pl)), (Abs (pl ++ ql) (insert a ql)), (Abs (pl ++ ql) (insert a q)), (Abs (pl ++ ql) (insert a p)), (Abs (pl ++ ql) (insert a gv0)), (Abs (pl ++ ql) (insert a pl)), (Abs (pl ++ ql) (maybe_swap ql)), (Abs (pl ++ ql) (maybe_swap q))
(Abs (pl ++ ql) (maybe_swap p)), (Abs (pl ++ ql) (maybe_swap gv0)), (Abs (pl ++ ql) (maybe_swap pl)), (Abs (pl ++ ql) (ql ++ ql)), (Abs (pl ++ ql) (ql ++ q)), (Abs (pl ++ ql) (ql ++ p)), (Abs (pl ++ ql) (ql ++ gv0)), (Abs (pl ++ ql) (ql ++ pl)), (Abs (pl ++ ql) (q ++ ql)), (Abs (pl ++ ql) (q ++ q))
(Abs (pl ++ ql) (q ++ p)), (Abs (pl ++ ql) (q ++ gv0)), (Abs (pl ++ ql) (q ++ pl)), (Abs (pl ++ ql) (p ++ ql)), (Abs (pl ++ ql) (p ++ q)), (Abs (pl ++ ql) (p ++ p)), (Abs (pl ++ ql) (p ++ gv0)), (Abs (pl ++ ql) (p ++ pl)), (Abs (pl ++ ql) (gv0 ++ ql)), (Abs (pl ++ ql) (gv0 ++ q))
(Abs (pl ++ ql) (gv0 ++ p)), (Abs (pl ++ ql) (gv0 ++ gv0)), (Abs (pl ++ ql) (gv0 ++ pl)), (Abs (pl ++ ql) (pl ++ q)), (Abs (pl ++ ql) (pl ++ p)), (Abs (pl ++ ql) (pl ++ gv0)), (Abs (pl ++ ql) (pl ++ pl)), (Abs (pl ++ ql) []), (Abs (pl ++ q) ql), (Abs (pl ++ q) q)
(Abs (pl ++ q) p), (Abs (pl ++ q) gv0), (Abs (pl ++ q) pl), (Abs (pl ++ q) (k :: ql)), (Abs (pl ++ q) (k :: q)), (Abs (pl ++ q) (k :: p)), (Abs (pl ++ q) (k :: gv0)), (Abs (pl ++ q) (k :: pl)), (Abs (pl ++ q) (a :: ql)), (Abs (pl ++ q) (a :: q))
(Abs (pl ++ q) (a :: p)), (Abs (pl ++ q) (a :: gv0)), (Abs (pl ++ q) (a :: pl)), (Abs (pl ++ q) (merge ql ql)), (Abs (pl ++ q) (merge ql q)), (Abs (pl ++ q) (merge ql p)), (Abs (pl ++ q) (merge ql gv0)), (Abs (pl ++ q) (merge ql pl)), (Abs (pl ++ q) (merge q ql)), (Abs (pl ++ q) (merge q q))
(Abs (pl ++ q) (merge q p)), (Abs (pl ++ q) (merge q gv0)), (Abs (pl ++ q) (merge q pl)), (Abs (pl ++ q) (merge p ql)), (Abs (pl ++ q) (merge p q)), (Abs (pl ++ q) (merge p p)), (Abs (pl ++ q) (merge p gv0)), (Abs (pl ++ q) (merge p pl)), (Abs (pl ++ q) (merge gv0 ql)), (Abs (pl ++ q) (merge gv0 q))
(Abs (pl ++ q) (merge gv0 p)), (Abs (pl ++ q) (merge gv0 gv0)), (Abs (pl ++ q) (merge gv0 pl)), (Abs (pl ++ q) (merge pl ql)), (Abs (pl ++ q) (merge pl q)), (Abs (pl ++ q) (merge pl p)), (Abs (pl ++ q) (merge pl gv0)), (Abs (pl ++ q) (merge pl pl)), (Abs (pl ++ q) (insert k ql)), (Abs (pl ++ q) (insert k q))
(Abs (pl ++ q) (insert k p)), (Abs (pl ++ q) (insert k gv0)), (Abs (pl ++ q) (insert k pl)), (Abs (pl ++ q) (insert a ql)), (Abs (pl ++ q) (insert a q)), (Abs (pl ++ q) (insert a p)), (Abs (pl ++ q) (insert a gv0)), (Abs (pl ++ q) (insert a pl)), (Abs (pl ++ q) (maybe_swap ql)), (Abs (pl ++ q) (maybe_swap q))
(Abs (pl ++ q) (maybe_swap p)), (Abs (pl ++ q) (maybe_swap gv0)), (Abs (pl ++ q) (maybe_swap pl)), (Abs (pl ++ q) (ql ++ ql)), (Abs (pl ++ q) (ql ++ q)), (Abs (pl ++ q) (ql ++ p)), (Abs (pl ++ q) (ql ++ gv0)), (Abs (pl ++ q) (ql ++ pl)), (Abs (pl ++ q) (q ++ ql)), (Abs (pl ++ q) (q ++ q))
(Abs (pl ++ q) (q ++ p)), (Abs (pl ++ q) (q ++ gv0)), (Abs (pl ++ q) (q ++ pl)), (Abs (pl ++ q) (p ++ ql)), (Abs (pl ++ q) (p ++ q)), (Abs (pl ++ q) (p ++ p)), (Abs (pl ++ q) (p ++ gv0)), (Abs (pl ++ q) (p ++ pl)), (Abs (pl ++ q) (gv0 ++ ql)), (Abs (pl ++ q) (gv0 ++ q))
(Abs (pl ++ q) (gv0 ++ p)), (Abs (pl ++ q) (gv0 ++ gv0)), (Abs (pl ++ q) (gv0 ++ pl)), (Abs (pl ++ q) (pl ++ ql)), (Abs (pl ++ q) (pl ++ p)), (Abs (pl ++ q) (pl ++ gv0)), (Abs (pl ++ q) (pl ++ pl)), (Abs (pl ++ q) []), (Abs (pl ++ p) ql), (Abs (pl ++ p) q)
(Abs (pl ++ p) p), (Abs (pl ++ p) gv0), (Abs (pl ++ p) pl), (Abs (pl ++ p) (k :: ql)), (Abs (pl ++ p) (k :: q)), (Abs (pl ++ p) (k :: p)), (Abs (pl ++ p) (k :: gv0)), (Abs (pl ++ p) (k :: pl)), (Abs (pl ++ p) (a :: ql)), (Abs (pl ++ p) (a :: q))
(Abs (pl ++ p) (a :: p)), (Abs (pl ++ p) (a :: gv0)), (Abs (pl ++ p) (a :: pl)), (Abs (pl ++ p) (merge ql ql)), (Abs (pl ++ p) (merge ql q)), (Abs (pl ++ p) (merge ql p)), (Abs (pl ++ p) (merge ql gv0)), (Abs (pl ++ p) (merge ql pl)), (Abs (pl ++ p) (merge q ql)), (Abs (pl ++ p) (merge q q))
(Abs (pl ++ p) (merge q p)), (Abs (pl ++ p) (merge q gv0)), (Abs (pl ++ p) (merge q pl)), (Abs (pl ++ p) (merge p ql)), (Abs (pl ++ p) (merge p q)), (Abs (pl ++ p) (merge p p)), (Abs (pl ++ p) (merge p gv0)), (Abs (pl ++ p) (merge p pl)), (Abs (pl ++ p) (merge gv0 ql)), (Abs (pl ++ p) (merge gv0 q))
(Abs (pl ++ p) (merge gv0 p)), (Abs (pl ++ p) (merge gv0 gv0)), (Abs (pl ++ p) (merge gv0 pl)), (Abs (pl ++ p) (merge pl ql)), (Abs (pl ++ p) (merge pl q)), (Abs (pl ++ p) (merge pl p)), (Abs (pl ++ p) (merge pl gv0)), (Abs (pl ++ p) (merge pl pl)), (Abs (pl ++ p) (insert k ql)), (Abs (pl ++ p) (insert k q))
(Abs (pl ++ p) (insert k p)), (Abs (pl ++ p) (insert k gv0)), (Abs (pl ++ p) (insert k pl)), (Abs (pl ++ p) (insert a ql)), (Abs (pl ++ p) (insert a q)), (Abs (pl ++ p) (insert a p)), (Abs (pl ++ p) (insert a gv0)), (Abs (pl ++ p) (insert a pl)), (Abs (pl ++ p) (maybe_swap ql)), (Abs (pl ++ p) (maybe_swap q))
(Abs (pl ++ p) (maybe_swap p)), (Abs (pl ++ p) (maybe_swap gv0)), (Abs (pl ++ p) (maybe_swap pl)), (Abs (pl ++ p) (ql ++ ql)), (Abs (pl ++ p) (ql ++ q)), (Abs (pl ++ p) (ql ++ p)), (Abs (pl ++ p) (ql ++ gv0)), (Abs (pl ++ p) (ql ++ pl)), (Abs (pl ++ p) (q ++ ql)), (Abs (pl ++ p) (q ++ q))
(Abs (pl ++ p) (q ++ p)), (Abs (pl ++ p) (q ++ gv0)), (Abs (pl ++ p) (q ++ pl)), (Abs (pl ++ p) (p ++ ql)), (Abs (pl ++ p) (p ++ q)), (Abs (pl ++ p) (p ++ p)), (Abs (pl ++ p) (p ++ gv0)), (Abs (pl ++ p) (p ++ pl)), (Abs (pl ++ p) (gv0 ++ ql)), (Abs (pl ++ p) (gv0 ++ q))
(Abs (pl ++ p) (gv0 ++ p)), (Abs (pl ++ p) (gv0 ++ gv0)), (Abs (pl ++ p) (gv0 ++ pl)), (Abs (pl ++ p) (pl ++ ql)), (Abs (pl ++ p) (pl ++ q)), (Abs (pl ++ p) (pl ++ gv0)), (Abs (pl ++ p) (pl ++ pl)), (Abs (pl ++ p) []), (Abs (pl ++ gv0) ql), (Abs (pl ++ gv0) q)
(Abs (pl ++ gv0) p), (Abs (pl ++ gv0) gv0), (Abs (pl ++ gv0) pl), (Abs (pl ++ gv0) (k :: ql)), (Abs (pl ++ gv0) (k :: q)), (Abs (pl ++ gv0) (k :: p)), (Abs (pl ++ gv0) (k :: gv0)), (Abs (pl ++ gv0) (k :: pl)), (Abs (pl ++ gv0) (a :: ql)), (Abs (pl ++ gv0) (a :: q))
(Abs (pl ++ gv0) (a :: p)), (Abs (pl ++ gv0) (a :: gv0)), (Abs (pl ++ gv0) (a :: pl)), (Abs (pl ++ gv0) (merge ql ql)), (Abs (pl ++ gv0) (merge ql q)), (Abs (pl ++ gv0) (merge ql p)), (Abs (pl ++ gv0) (merge ql gv0)), (Abs (pl ++ gv0) (merge ql pl)), (Abs (pl ++ gv0) (merge q ql)), (Abs (pl ++ gv0) (merge q q))
(Abs (pl ++ gv0) (merge q p)), (Abs (pl ++ gv0) (merge q gv0)), (Abs (pl ++ gv0) (merge q pl)), (Abs (pl ++ gv0) (merge p ql)), (Abs (pl ++ gv0) (merge p q)), (Abs (pl ++ gv0) (merge p p)), (Abs (pl ++ gv0) (merge p gv0)), (Abs (pl ++ gv0) (merge p pl)), (Abs (pl ++ gv0) (merge gv0 ql)), (Abs (pl ++ gv0) (merge gv0 q))
(Abs (pl ++ gv0) (merge gv0 p)), (Abs (pl ++ gv0) (merge gv0 gv0)), (Abs (pl ++ gv0) (merge gv0 pl)), (Abs (pl ++ gv0) (merge pl ql)), (Abs (pl ++ gv0) (merge pl q)), (Abs (pl ++ gv0) (merge pl p)), (Abs (pl ++ gv0) (merge pl gv0)), (Abs (pl ++ gv0) (merge pl pl)), (Abs (pl ++ gv0) (insert k ql)), (Abs (pl ++ gv0) (insert k q))
(Abs (pl ++ gv0) (insert k p)), (Abs (pl ++ gv0) (insert k gv0)), (Abs (pl ++ gv0) (insert k pl)), (Abs (pl ++ gv0) (insert a ql)), (Abs (pl ++ gv0) (insert a q)), (Abs (pl ++ gv0) (insert a p)), (Abs (pl ++ gv0) (insert a gv0)), (Abs (pl ++ gv0) (insert a pl)), (Abs (pl ++ gv0) (maybe_swap ql)), (Abs (pl ++ gv0) (maybe_swap q))
(Abs (pl ++ gv0) (maybe_swap p)), (Abs (pl ++ gv0) (maybe_swap gv0)), (Abs (pl ++ gv0) (maybe_swap pl)), (Abs (pl ++ gv0) (ql ++ ql)), (Abs (pl ++ gv0) (ql ++ q)), (Abs (pl ++ gv0) (ql ++ p)), (Abs (pl ++ gv0) (ql ++ gv0)), (Abs (pl ++ gv0) (ql ++ pl)), (Abs (pl ++ gv0) (q ++ ql)), (Abs (pl ++ gv0) (q ++ q))
(Abs (pl ++ gv0) (q ++ p)), (Abs (pl ++ gv0) (q ++ gv0)), (Abs (pl ++ gv0) (q ++ pl)), (Abs (pl ++ gv0) (p ++ ql)), (Abs (pl ++ gv0) (p ++ q)), (Abs (pl ++ gv0) (p ++ p)), (Abs (pl ++ gv0) (p ++ gv0)), (Abs (pl ++ gv0) (p ++ pl)), (Abs (pl ++ gv0) (gv0 ++ ql)), (Abs (pl ++ gv0) (gv0 ++ q))
(Abs (pl ++ gv0) (gv0 ++ p)), (Abs (pl ++ gv0) (gv0 ++ gv0)), (Abs (pl ++ gv0) (gv0 ++ pl)), (Abs (pl ++ gv0) (pl ++ ql)), (Abs (pl ++ gv0) (pl ++ q)), (Abs (pl ++ gv0) (pl ++ p)), (Abs (pl ++ gv0) (pl ++ pl)), (Abs (pl ++ gv0) []), (Abs (pl ++ pl) ql), (Abs (pl ++ pl) q)
(Abs (pl ++ pl) p), (Abs (pl ++ pl) gv0), (Abs (pl ++ pl) pl), (Abs (pl ++ pl) (k :: ql)), (Abs (pl ++ pl) (k :: q)), (Abs (pl ++ pl) (k :: p)), (Abs (pl ++ pl) (k :: gv0)), (Abs (pl ++ pl) (k :: pl)), (Abs (pl ++ pl) (a :: ql)), (Abs (pl ++ pl) (a :: q))
(Abs (pl ++ pl) (a :: p)), (Abs (pl ++ pl) (a :: gv0)), (Abs (pl ++ pl) (a :: pl)), (Abs (pl ++ pl) (merge ql ql)), (Abs (pl ++ pl) (merge ql q)), (Abs (pl ++ pl) (merge ql p)), (Abs (pl ++ pl) (merge ql gv0)), (Abs (pl ++ pl) (merge ql pl)), (Abs (pl ++ pl) (merge q ql)), (Abs (pl ++ pl) (merge q q))
(Abs (pl ++ pl) (merge q p)), (Abs (pl ++ pl) (merge q gv0)), (Abs (pl ++ pl) (merge q pl)), (Abs (pl ++ pl) (merge p ql)), (Abs (pl ++ pl) (merge p q)), (Abs (pl ++ pl) (merge p p)), (Abs (pl ++ pl) (merge p gv0)), (Abs (pl ++ pl) (merge p pl)), (Abs (pl ++ pl) (merge gv0 ql)), (Abs (pl ++ pl) (merge gv0 q))
(Abs (pl ++ pl) (merge gv0 p)), (Abs (pl ++ pl) (merge gv0 gv0)), (Abs (pl ++ pl) (merge gv0 pl)), (Abs (pl ++ pl) (merge pl ql)), (Abs (pl ++ pl) (merge pl q)), (Abs (pl ++ pl) (merge pl p)), (Abs (pl ++ pl) (merge pl gv0)), (Abs (pl ++ pl) (merge pl pl)), (Abs (pl ++ pl) (insert k ql)), (Abs (pl ++ pl) (insert k q))
(Abs (pl ++ pl) (insert k p)), (Abs (pl ++ pl) (insert k gv0)), (Abs (pl ++ pl) (insert k pl)), (Abs (pl ++ pl) (insert a ql)), (Abs (pl ++ pl) (insert a q)), (Abs (pl ++ pl) (insert a p)), (Abs (pl ++ pl) (insert a gv0)), (Abs (pl ++ pl) (insert a pl)), (Abs (pl ++ pl) (maybe_swap ql)), (Abs (pl ++ pl) (maybe_swap q))
(Abs (pl ++ pl) (maybe_swap p)), (Abs (pl ++ pl) (maybe_swap gv0)), (Abs (pl ++ pl) (maybe_swap pl)), (Abs (pl ++ pl) (ql ++ ql)), (Abs (pl ++ pl) (ql ++ q)), (Abs (pl ++ pl) (ql ++ p)), (Abs (pl ++ pl) (ql ++ gv0)), (Abs (pl ++ pl) (ql ++ pl)), (Abs (pl ++ pl) (q ++ ql)), (Abs (pl ++ pl) (q ++ q))
(Abs (pl ++ pl) (q ++ p)), (Abs (pl ++ pl) (q ++ gv0)), (Abs (pl ++ pl) (q ++ pl)), (Abs (pl ++ pl) (p ++ ql)), (Abs (pl ++ pl) (p ++ q)), (Abs (pl ++ pl) (p ++ p)), (Abs (pl ++ pl) (p ++ gv0)), (Abs (pl ++ pl) (p ++ pl)), (Abs (pl ++ pl) (gv0 ++ ql)), (Abs (pl ++ pl) (gv0 ++ q))
(Abs (pl ++ pl) (gv0 ++ p)), (Abs (pl ++ pl) (gv0 ++ gv0)), (Abs (pl ++ pl) (gv0 ++ pl)), (Abs (pl ++ pl) (pl ++ ql)), (Abs (pl ++ pl) (pl ++ q)), (Abs (pl ++ pl) (pl ++ p)), (Abs (pl ++ pl) (pl ++ gv0)), (Abs (pl ++ pl) []), (Abs [] ql), (Abs [] q)
(Abs [] p), (Abs [] gv0), (Abs [] pl), (Abs [] (k :: ql)), (Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (k :: gv0)), (Abs [] (k :: pl)), (Abs [] (a :: ql)), (Abs [] (a :: q))
(Abs [] (a :: p)), (Abs [] (a :: gv0)), (Abs [] (a :: pl)), (Abs [] (merge ql ql)), (Abs [] (merge ql q)), (Abs [] (merge ql p)), (Abs [] (merge ql gv0)), (Abs [] (merge ql pl)), (Abs [] (merge q ql)), (Abs [] (merge q q))
(Abs [] (merge q p)), (Abs [] (merge q gv0)), (Abs [] (merge q pl)), (Abs [] (merge p ql)), (Abs [] (merge p q)), (Abs [] (merge p p)), (Abs [] (merge p gv0)), (Abs [] (merge p pl)), (Abs [] (merge gv0 ql)), (Abs [] (merge gv0 q))
(Abs [] (merge gv0 p)), (Abs [] (merge gv0 gv0)), (Abs [] (merge gv0 pl)), (Abs [] (merge pl ql)), (Abs [] (merge pl q)), (Abs [] (merge pl p)), (Abs [] (merge pl gv0)), (Abs [] (merge pl pl)), (Abs [] (insert k ql)), (Abs [] (insert k q))
(Abs [] (insert k p)), (Abs [] (insert k gv0)), (Abs [] (insert k pl)), (Abs [] (insert a ql)), (Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (insert a gv0)), (Abs [] (insert a pl)), (Abs [] (maybe_swap ql)), (Abs [] (maybe_swap q))
(Abs [] (maybe_swap p)), (Abs [] (maybe_swap gv0)), (Abs [] (maybe_swap pl)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ q)), (Abs [] (ql ++ p)), (Abs [] (ql ++ gv0)), (Abs [] (ql ++ pl)), (Abs [] (q ++ ql)), (Abs [] (q ++ q))
(Abs [] (q ++ p)), (Abs [] (q ++ gv0)), (Abs [] (q ++ pl)), (Abs [] (p ++ ql)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (Abs [] (p ++ gv0)), (Abs [] (p ++ pl)), (Abs [] (gv0 ++ ql)), (Abs [] (gv0 ++ q))
(Abs [] (gv0 ++ p)), (Abs [] (gv0 ++ gv0)), (Abs [] (gv0 ++ pl)), (Abs [] (pl ++ ql)), (Abs [] (pl ++ q)), (Abs [] (pl ++ p)), (Abs [] (pl ++ gv0)), (Abs [] (pl ++ pl)), (priq (k :: ql)), (priq (k :: q))
(priq (k :: p)), (priq (k :: gv0)), (priq (k :: pl)), (priq (a :: ql)), (priq (a :: q)), (priq (a :: p)), (priq (a :: gv0)), (priq (a :: pl)), (priq (merge ql ql)), (priq (merge ql q))
(priq (merge ql p)), (priq (merge ql gv0)), (priq (merge ql pl)), (priq (merge q ql)), (priq (merge q q)), (priq (merge q p)), (priq (merge q gv0)), (priq (merge q pl)), (priq (merge p ql)), (priq (merge p q))
(priq (merge p p)), (priq (merge p gv0)), (priq (merge p pl)), (priq (merge gv0 ql)), (priq (merge gv0 q)), (priq (merge gv0 p)), (priq (merge gv0 gv0)), (priq (merge gv0 pl)), (priq (merge pl ql)), (priq (merge pl q))
(priq (merge pl p)), (priq (merge pl gv0)), (priq (merge pl pl)), (priq (insert k ql)), (priq (insert k q)), (priq (insert k p)), (priq (insert k gv0)), (priq (insert k pl)), (priq (insert a ql)), (priq (insert a q))
(priq (insert a p)), (priq (insert a gv0)), (priq (insert a pl)), (priq (maybe_swap ql)), (priq (maybe_swap q)), (priq (maybe_swap p)), (priq (maybe_swap gv0)), (priq (maybe_swap pl)), (priq (ql ++ ql)), (priq (ql ++ q))
(priq (ql ++ p)), (priq (ql ++ gv0)), (priq (ql ++ pl)), (priq (q ++ ql)), (priq (q ++ q)), (priq (q ++ p)), (priq (q ++ gv0)), (priq (q ++ pl)), (priq (p ++ ql)), (priq (p ++ q))
(priq (p ++ p)), (priq (p ++ gv0)), (priq (p ++ pl)), (priq (gv0 ++ ql)), (priq (gv0 ++ q)), (priq (gv0 ++ p)), (priq (gv0 ++ gv0)), (priq (gv0 ++ pl)), (priq (pl ++ ql)), (priq (pl ++ q))
(priq (pl ++ p)), (priq (pl ++ gv0)), (priq (pl ++ pl)), (priq []), (Permutation ql (k :: ql)), (Permutation ql (k :: q)), (Permutation ql (k :: p)), (Permutation ql (k :: gv0)), (Permutation ql (k :: pl)), (Permutation ql (a :: ql))
(Permutation ql (a :: q)), (Permutation ql (a :: p)), (Permutation ql (a :: gv0)), (Permutation ql (a :: pl)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql q)), (Permutation ql (merge ql p)), (Permutation ql (merge ql gv0)), (Permutation ql (merge ql pl)), (Permutation ql (merge q ql))
(Permutation ql (merge q q)), (Permutation ql (merge q p)), (Permutation ql (merge q gv0)), (Permutation ql (merge q pl)), (Permutation ql (merge p ql)), (Permutation ql (merge p q)), (Permutation ql (merge p p)), (Permutation ql (merge p gv0)), (Permutation ql (merge p pl)), (Permutation ql (merge gv0 ql))
(Permutation ql (merge gv0 q)), (Permutation ql (merge gv0 p)), (Permutation ql (merge gv0 gv0)), (Permutation ql (merge gv0 pl)), (Permutation ql (merge pl ql)), (Permutation ql (merge pl q)), (Permutation ql (merge pl p)), (Permutation ql (merge pl gv0)), (Permutation ql (merge pl pl)), (Permutation ql (insert k ql))
(Permutation ql (insert k q)), (Permutation ql (insert k p)), (Permutation ql (insert k gv0)), (Permutation ql (insert k pl)), (Permutation ql (insert a ql)), (Permutation ql (insert a q)), (Permutation ql (insert a p)), (Permutation ql (insert a gv0)), (Permutation ql (insert a pl)), (Permutation ql (maybe_swap ql))
(Permutation ql (maybe_swap q)), (Permutation ql (maybe_swap p)), (Permutation ql (maybe_swap gv0)), (Permutation ql (maybe_swap pl)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ p)), (Permutation ql (ql ++ gv0)), (Permutation ql (ql ++ pl)), (Permutation ql (q ++ ql))
(Permutation ql (q ++ q)), (Permutation ql (q ++ p)), (Permutation ql (q ++ gv0)), (Permutation ql (q ++ pl)), (Permutation ql (p ++ ql)), (Permutation ql (p ++ q)), (Permutation ql (p ++ p)), (Permutation ql (p ++ gv0)), (Permutation ql (p ++ pl)), (Permutation ql (gv0 ++ ql))
(Permutation ql (gv0 ++ q)), (Permutation ql (gv0 ++ p)), (Permutation ql (gv0 ++ gv0)), (Permutation ql (gv0 ++ pl)), (Permutation ql (pl ++ ql)), (Permutation ql (pl ++ q)), (Permutation ql (pl ++ p)), (Permutation ql (pl ++ gv0)), (Permutation ql (pl ++ pl)), (Permutation ql [])
(Permutation q (k :: ql)), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (k :: gv0)), (Permutation q (k :: pl)), (Permutation q (a :: ql)), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (a :: gv0)), (Permutation q (a :: pl))
(Permutation q (merge ql ql)), (Permutation q (merge ql q)), (Permutation q (merge ql p)), (Permutation q (merge ql gv0)), (Permutation q (merge ql pl)), (Permutation q (merge q ql)), (Permutation q (merge q q)), (Permutation q (merge q p)), (Permutation q (merge q gv0)), (Permutation q (merge q pl))
(Permutation q (merge p ql)), (Permutation q (merge p q)), (Permutation q (merge p p)), (Permutation q (merge p gv0)), (Permutation q (merge p pl)), (Permutation q (merge gv0 ql)), (Permutation q (merge gv0 q)), (Permutation q (merge gv0 p)), (Permutation q (merge gv0 gv0)), (Permutation q (merge gv0 pl))
(Permutation q (merge pl ql)), (Permutation q (merge pl q)), (Permutation q (merge pl p)), (Permutation q (merge pl gv0)), (Permutation q (merge pl pl)), (Permutation q (insert k ql)), (Permutation q (insert k q)), (Permutation q (insert k p)), (Permutation q (insert k gv0)), (Permutation q (insert k pl))
(Permutation q (insert a ql)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (insert a gv0)), (Permutation q (insert a pl)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (maybe_swap gv0)), (Permutation q (maybe_swap pl))
(Permutation q (ql ++ ql)), (Permutation q (ql ++ q)), (Permutation q (ql ++ p)), (Permutation q (ql ++ gv0)), (Permutation q (ql ++ pl)), (Permutation q (q ++ ql)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (q ++ gv0)), (Permutation q (q ++ pl))
(Permutation q (p ++ ql)), (Permutation q (p ++ q)), (Permutation q (p ++ p)), (Permutation q (p ++ gv0)), (Permutation q (p ++ pl)), (Permutation q (gv0 ++ ql)), (Permutation q (gv0 ++ q)), (Permutation q (gv0 ++ p)), (Permutation q (gv0 ++ gv0)), (Permutation q (gv0 ++ pl))
(Permutation q (pl ++ ql)), (Permutation q (pl ++ q)), (Permutation q (pl ++ p)), (Permutation q (pl ++ gv0)), (Permutation q (pl ++ pl)), (Permutation q []), (Permutation p (k :: ql)), (Permutation p (k :: q)), (Permutation p (k :: p)), (Permutation p (k :: gv0))
(Permutation p (k :: pl)), (Permutation p (a :: ql)), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (a :: gv0)), (Permutation p (a :: pl)), (Permutation p (merge ql ql)), (Permutation p (merge ql q)), (Permutation p (merge ql p)), (Permutation p (merge ql gv0))
(Permutation p (merge ql pl)), (Permutation p (merge q ql)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge q gv0)), (Permutation p (merge q pl)), (Permutation p (merge p ql)), (Permutation p (merge p q)), (Permutation p (merge p p)), (Permutation p (merge p gv0))
(Permutation p (merge p pl)), (Permutation p (merge gv0 ql)), (Permutation p (merge gv0 q)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 gv0)), (Permutation p (merge gv0 pl)), (Permutation p (merge pl ql)), (Permutation p (merge pl q)), (Permutation p (merge pl p)), (Permutation p (merge pl gv0))
(Permutation p (merge pl pl)), (Permutation p (insert k ql)), (Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert k gv0)), (Permutation p (insert k pl)), (Permutation p (insert a ql)), (Permutation p (insert a q)), (Permutation p (insert a p)), (Permutation p (insert a gv0))
(Permutation p (insert a pl)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap gv0)), (Permutation p (maybe_swap pl)), (Permutation p (ql ++ ql)), (Permutation p (ql ++ q)), (Permutation p (ql ++ p)), (Permutation p (ql ++ gv0))
(Permutation p (ql ++ pl)), (Permutation p (q ++ ql)), (Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (q ++ gv0)), (Permutation p (q ++ pl)), (Permutation p (p ++ ql)), (Permutation p (p ++ q)), (Permutation p (p ++ p)), (Permutation p (p ++ gv0))
(Permutation p (p ++ pl)), (Permutation p (gv0 ++ ql)), (Permutation p (gv0 ++ q)), (Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ gv0)), (Permutation p (gv0 ++ pl)), (Permutation p (pl ++ ql)), (Permutation p (pl ++ q)), (Permutation p (pl ++ p)), (Permutation p (pl ++ gv0))
(Permutation p (pl ++ pl)), (Permutation p []), (Permutation gv0 (k :: ql)), (Permutation gv0 (k :: q)), (Permutation gv0 (k :: p)), (Permutation gv0 (k :: gv0)), (Permutation gv0 (k :: pl)), (Permutation gv0 (a :: ql)), (Permutation gv0 (a :: q)), (Permutation gv0 (a :: p))
(Permutation gv0 (a :: gv0)), (Permutation gv0 (a :: pl)), (Permutation gv0 (merge ql ql)), (Permutation gv0 (merge ql q)), (Permutation gv0 (merge ql p)), (Permutation gv0 (merge ql gv0)), (Permutation gv0 (merge ql pl)), (Permutation gv0 (merge q ql)), (Permutation gv0 (merge q q)), (Permutation gv0 (merge q p))
(Permutation gv0 (merge q gv0)), (Permutation gv0 (merge q pl)), (Permutation gv0 (merge p ql)), (Permutation gv0 (merge p q)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p gv0)), (Permutation gv0 (merge p pl)), (Permutation gv0 (merge gv0 ql)), (Permutation gv0 (merge gv0 q)), (Permutation gv0 (merge gv0 p))
(Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (merge gv0 pl)), (Permutation gv0 (merge pl ql)), (Permutation gv0 (merge pl q)), (Permutation gv0 (merge pl p)), (Permutation gv0 (merge pl gv0)), (Permutation gv0 (merge pl pl)), (Permutation gv0 (insert k ql)), (Permutation gv0 (insert k q)), (Permutation gv0 (insert k p))
(Permutation gv0 (insert k gv0)), (Permutation gv0 (insert k pl)), (Permutation gv0 (insert a ql)), (Permutation gv0 (insert a q)), (Permutation gv0 (insert a p)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (insert a pl)), (Permutation gv0 (maybe_swap ql)), (Permutation gv0 (maybe_swap q)), (Permutation gv0 (maybe_swap p))
(Permutation gv0 (maybe_swap gv0)), (Permutation gv0 (maybe_swap pl)), (Permutation gv0 (ql ++ ql)), (Permutation gv0 (ql ++ q)), (Permutation gv0 (ql ++ p)), (Permutation gv0 (ql ++ gv0)), (Permutation gv0 (ql ++ pl)), (Permutation gv0 (q ++ ql)), (Permutation gv0 (q ++ q)), (Permutation gv0 (q ++ p))
(Permutation gv0 (q ++ gv0)), (Permutation gv0 (q ++ pl)), (Permutation gv0 (p ++ ql)), (Permutation gv0 (p ++ q)), (Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (p ++ pl)), (Permutation gv0 (gv0 ++ ql)), (Permutation gv0 (gv0 ++ q)), (Permutation gv0 (gv0 ++ p))
(Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 (gv0 ++ pl)), (Permutation gv0 (pl ++ ql)), (Permutation gv0 (pl ++ q)), (Permutation gv0 (pl ++ p)), (Permutation gv0 (pl ++ gv0)), (Permutation gv0 (pl ++ pl)), (Permutation gv0 []), (Permutation pl (k :: ql)), (Permutation pl (k :: q))
(Permutation pl (k :: p)), (Permutation pl (k :: gv0)), (Permutation pl (k :: pl)), (Permutation pl (a :: ql)), (Permutation pl (a :: q)), (Permutation pl (a :: p)), (Permutation pl (a :: gv0)), (Permutation pl (a :: pl)), (Permutation pl (merge ql ql)), (Permutation pl (merge ql q))
(Permutation pl (merge ql p)), (Permutation pl (merge ql gv0)), (Permutation pl (merge ql pl)), (Permutation pl (merge q ql)), (Permutation pl (merge q q)), (Permutation pl (merge q p)), (Permutation pl (merge q gv0)), (Permutation pl (merge q pl)), (Permutation pl (merge p ql)), (Permutation pl (merge p q))
(Permutation pl (merge p p)), (Permutation pl (merge p gv0)), (Permutation pl (merge p pl)), (Permutation pl (merge gv0 ql)), (Permutation pl (merge gv0 q)), (Permutation pl (merge gv0 p)), (Permutation pl (merge gv0 gv0)), (Permutation pl (merge gv0 pl)), (Permutation pl (merge pl ql)), (Permutation pl (merge pl q))
(Permutation pl (merge pl p)), (Permutation pl (merge pl gv0)), (Permutation pl (merge pl pl)), (Permutation pl (insert k ql)), (Permutation pl (insert k q)), (Permutation pl (insert k p)), (Permutation pl (insert k gv0)), (Permutation pl (insert k pl)), (Permutation pl (insert a ql)), (Permutation pl (insert a q))
(Permutation pl (insert a p)), (Permutation pl (insert a gv0)), (Permutation pl (insert a pl)), (Permutation pl (maybe_swap ql)), (Permutation pl (maybe_swap q)), (Permutation pl (maybe_swap p)), (Permutation pl (maybe_swap gv0)), (Permutation pl (maybe_swap pl)), (Permutation pl (ql ++ ql)), (Permutation pl (ql ++ q))
(Permutation pl (ql ++ p)), (Permutation pl (ql ++ gv0)), (Permutation pl (ql ++ pl)), (Permutation pl (q ++ ql)), (Permutation pl (q ++ q)), (Permutation pl (q ++ p)), (Permutation pl (q ++ gv0)), (Permutation pl (q ++ pl)), (Permutation pl (p ++ ql)), (Permutation pl (p ++ q))
(Permutation pl (p ++ p)), (Permutation pl (p ++ gv0)), (Permutation pl (p ++ pl)), (Permutation pl (gv0 ++ ql)), (Permutation pl (gv0 ++ q)), (Permutation pl (gv0 ++ p)), (Permutation pl (gv0 ++ gv0)), (Permutation pl (gv0 ++ pl)), (Permutation pl (pl ++ ql)), (Permutation pl (pl ++ q))
(Permutation pl (pl ++ p)), (Permutation pl (pl ++ gv0)), (Permutation pl (pl ++ pl)), (Permutation pl []), (Permutation (k :: ql) ql), (Permutation (k :: ql) q), (Permutation (k :: ql) p), (Permutation (k :: ql) gv0), (Permutation (k :: ql) pl), (Permutation (k :: ql) (k :: q))
(Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (k :: gv0)), (Permutation (k :: ql) (k :: pl)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (a :: gv0)), (Permutation (k :: ql) (a :: pl)), (Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql q))
(Permutation (k :: ql) (merge ql p)), (Permutation (k :: ql) (merge ql gv0)), (Permutation (k :: ql) (merge ql pl)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge q gv0)), (Permutation (k :: ql) (merge q pl)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p q))
(Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (merge p gv0)), (Permutation (k :: ql) (merge p pl)), (Permutation (k :: ql) (merge gv0 ql)), (Permutation (k :: ql) (merge gv0 q)), (Permutation (k :: ql) (merge gv0 p)), (Permutation (k :: ql) (merge gv0 gv0)), (Permutation (k :: ql) (merge gv0 pl)), (Permutation (k :: ql) (merge pl ql)), (Permutation (k :: ql) (merge pl q))
(Permutation (k :: ql) (merge pl p)), (Permutation (k :: ql) (merge pl gv0)), (Permutation (k :: ql) (merge pl pl)), (Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert k gv0)), (Permutation (k :: ql) (insert k pl)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a q))
(Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (insert a gv0)), (Permutation (k :: ql) (insert a pl)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (maybe_swap gv0)), (Permutation (k :: ql) (maybe_swap pl)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ q))
(Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (ql ++ gv0)), (Permutation (k :: ql) (ql ++ pl)), (Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ p)), (Permutation (k :: ql) (q ++ gv0)), (Permutation (k :: ql) (q ++ pl)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ q))
(Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) (p ++ gv0)), (Permutation (k :: ql) (p ++ pl)), (Permutation (k :: ql) (gv0 ++ ql)), (Permutation (k :: ql) (gv0 ++ q)), (Permutation (k :: ql) (gv0 ++ p)), (Permutation (k :: ql) (gv0 ++ gv0)), (Permutation (k :: ql) (gv0 ++ pl)), (Permutation (k :: ql) (pl ++ ql)), (Permutation (k :: ql) (pl ++ q))
(Permutation (k :: ql) (pl ++ p)), (Permutation (k :: ql) (pl ++ gv0)), (Permutation (k :: ql) (pl ++ pl)), (Permutation (k :: ql) []), (Permutation (k :: q) ql), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) gv0), (Permutation (k :: q) pl), (Permutation (k :: q) (k :: ql))
(Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: gv0)), (Permutation (k :: q) (k :: pl)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: gv0)), (Permutation (k :: q) (a :: pl)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql q))
(Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge ql gv0)), (Permutation (k :: q) (merge ql pl)), (Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge q gv0)), (Permutation (k :: q) (merge q pl)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p q))
(Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p gv0)), (Permutation (k :: q) (merge p pl)), (Permutation (k :: q) (merge gv0 ql)), (Permutation (k :: q) (merge gv0 q)), (Permutation (k :: q) (merge gv0 p)), (Permutation (k :: q) (merge gv0 gv0)), (Permutation (k :: q) (merge gv0 pl)), (Permutation (k :: q) (merge pl ql)), (Permutation (k :: q) (merge pl q))
(Permutation (k :: q) (merge pl p)), (Permutation (k :: q) (merge pl gv0)), (Permutation (k :: q) (merge pl pl)), (Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert k gv0)), (Permutation (k :: q) (insert k pl)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a q))
(Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a gv0)), (Permutation (k :: q) (insert a pl)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap gv0)), (Permutation (k :: q) (maybe_swap pl)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ q))
(Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (ql ++ gv0)), (Permutation (k :: q) (ql ++ pl)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (q ++ gv0)), (Permutation (k :: q) (q ++ pl)), (Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ q))
(Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ gv0)), (Permutation (k :: q) (p ++ pl)), (Permutation (k :: q) (gv0 ++ ql)), (Permutation (k :: q) (gv0 ++ q)), (Permutation (k :: q) (gv0 ++ p)), (Permutation (k :: q) (gv0 ++ gv0)), (Permutation (k :: q) (gv0 ++ pl)), (Permutation (k :: q) (pl ++ ql)), (Permutation (k :: q) (pl ++ q))
(Permutation (k :: q) (pl ++ p)), (Permutation (k :: q) (pl ++ gv0)), (Permutation (k :: q) (pl ++ pl)), (Permutation (k :: q) []), (Permutation (k :: p) ql), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) gv0), (Permutation (k :: p) pl), (Permutation (k :: p) (k :: ql))
(Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: gv0)), (Permutation (k :: p) (k :: pl)), (Permutation (k :: p) (a :: ql)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: gv0)), (Permutation (k :: p) (a :: pl)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql q))
(Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge ql gv0)), (Permutation (k :: p) (merge ql pl)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q gv0)), (Permutation (k :: p) (merge q pl)), (Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p q))
(Permutation (k :: p) (merge p p)), (Permutation (k :: p) (merge p gv0)), (Permutation (k :: p) (merge p pl)), (Permutation (k :: p) (merge gv0 ql)), (Permutation (k :: p) (merge gv0 q)), (Permutation (k :: p) (merge gv0 p)), (Permutation (k :: p) (merge gv0 gv0)), (Permutation (k :: p) (merge gv0 pl)), (Permutation (k :: p) (merge pl ql)), (Permutation (k :: p) (merge pl q))
(Permutation (k :: p) (merge pl p)), (Permutation (k :: p) (merge pl gv0)), (Permutation (k :: p) (merge pl pl)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k gv0)), (Permutation (k :: p) (insert k pl)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a q))
(Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a gv0)), (Permutation (k :: p) (insert a pl)), (Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (maybe_swap gv0)), (Permutation (k :: p) (maybe_swap pl)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ q))
(Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (ql ++ gv0)), (Permutation (k :: p) (ql ++ pl)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ gv0)), (Permutation (k :: p) (q ++ pl)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ q))
(Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ gv0)), (Permutation (k :: p) (p ++ pl)), (Permutation (k :: p) (gv0 ++ ql)), (Permutation (k :: p) (gv0 ++ q)), (Permutation (k :: p) (gv0 ++ p)), (Permutation (k :: p) (gv0 ++ gv0)), (Permutation (k :: p) (gv0 ++ pl)), (Permutation (k :: p) (pl ++ ql)), (Permutation (k :: p) (pl ++ q))
(Permutation (k :: p) (pl ++ p)), (Permutation (k :: p) (pl ++ gv0)), (Permutation (k :: p) (pl ++ pl)), (Permutation (k :: p) []), (Permutation (k :: gv0) ql), (Permutation (k :: gv0) q), (Permutation (k :: gv0) p), (Permutation (k :: gv0) gv0), (Permutation (k :: gv0) pl), (Permutation (k :: gv0) (k :: ql))
(Permutation (k :: gv0) (k :: q)), (Permutation (k :: gv0) (k :: p)), (Permutation (k :: gv0) (k :: pl)), (Permutation (k :: gv0) (a :: ql)), (Permutation (k :: gv0) (a :: q)), (Permutation (k :: gv0) (a :: p)), (Permutation (k :: gv0) (a :: gv0)), (Permutation (k :: gv0) (a :: pl)), (Permutation (k :: gv0) (merge ql ql)), (Permutation (k :: gv0) (merge ql q))
(Permutation (k :: gv0) (merge ql p)), (Permutation (k :: gv0) (merge ql gv0)), (Permutation (k :: gv0) (merge ql pl)), (Permutation (k :: gv0) (merge q ql)), (Permutation (k :: gv0) (merge q q)), (Permutation (k :: gv0) (merge q p)), (Permutation (k :: gv0) (merge q gv0)), (Permutation (k :: gv0) (merge q pl)), (Permutation (k :: gv0) (merge p ql)), (Permutation (k :: gv0) (merge p q))
(Permutation (k :: gv0) (merge p p)), (Permutation (k :: gv0) (merge p gv0)), (Permutation (k :: gv0) (merge p pl)), (Permutation (k :: gv0) (merge gv0 ql)), (Permutation (k :: gv0) (merge gv0 q)), (Permutation (k :: gv0) (merge gv0 p)), (Permutation (k :: gv0) (merge gv0 gv0)), (Permutation (k :: gv0) (merge gv0 pl)), (Permutation (k :: gv0) (merge pl ql)), (Permutation (k :: gv0) (merge pl q))
(Permutation (k :: gv0) (merge pl p)), (Permutation (k :: gv0) (merge pl gv0)), (Permutation (k :: gv0) (merge pl pl)), (Permutation (k :: gv0) (insert k ql)), (Permutation (k :: gv0) (insert k q)), (Permutation (k :: gv0) (insert k p)), (Permutation (k :: gv0) (insert k gv0)), (Permutation (k :: gv0) (insert k pl)), (Permutation (k :: gv0) (insert a ql)), (Permutation (k :: gv0) (insert a q))
(Permutation (k :: gv0) (insert a p)), (Permutation (k :: gv0) (insert a gv0)), (Permutation (k :: gv0) (insert a pl)), (Permutation (k :: gv0) (maybe_swap ql)), (Permutation (k :: gv0) (maybe_swap q)), (Permutation (k :: gv0) (maybe_swap p)), (Permutation (k :: gv0) (maybe_swap gv0)), (Permutation (k :: gv0) (maybe_swap pl)), (Permutation (k :: gv0) (ql ++ ql)), (Permutation (k :: gv0) (ql ++ q))
(Permutation (k :: gv0) (ql ++ p)), (Permutation (k :: gv0) (ql ++ gv0)), (Permutation (k :: gv0) (ql ++ pl)), (Permutation (k :: gv0) (q ++ ql)), (Permutation (k :: gv0) (q ++ q)), (Permutation (k :: gv0) (q ++ p)), (Permutation (k :: gv0) (q ++ gv0)), (Permutation (k :: gv0) (q ++ pl)), (Permutation (k :: gv0) (p ++ ql)), (Permutation (k :: gv0) (p ++ q))
(Permutation (k :: gv0) (p ++ p)), (Permutation (k :: gv0) (p ++ gv0)), (Permutation (k :: gv0) (p ++ pl)), (Permutation (k :: gv0) (gv0 ++ ql)), (Permutation (k :: gv0) (gv0 ++ q)), (Permutation (k :: gv0) (gv0 ++ p)), (Permutation (k :: gv0) (gv0 ++ gv0)), (Permutation (k :: gv0) (gv0 ++ pl)), (Permutation (k :: gv0) (pl ++ ql)), (Permutation (k :: gv0) (pl ++ q))
(Permutation (k :: gv0) (pl ++ p)), (Permutation (k :: gv0) (pl ++ gv0)), (Permutation (k :: gv0) (pl ++ pl)), (Permutation (k :: gv0) []), (Permutation (k :: pl) ql), (Permutation (k :: pl) q), (Permutation (k :: pl) p), (Permutation (k :: pl) gv0), (Permutation (k :: pl) pl), (Permutation (k :: pl) (k :: ql))
(Permutation (k :: pl) (k :: q)), (Permutation (k :: pl) (k :: p)), (Permutation (k :: pl) (k :: gv0)), (Permutation (k :: pl) (a :: ql)), (Permutation (k :: pl) (a :: q)), (Permutation (k :: pl) (a :: p)), (Permutation (k :: pl) (a :: gv0)), (Permutation (k :: pl) (a :: pl)), (Permutation (k :: pl) (merge ql ql)), (Permutation (k :: pl) (merge ql q))
(Permutation (k :: pl) (merge ql p)), (Permutation (k :: pl) (merge ql gv0)), (Permutation (k :: pl) (merge ql pl)), (Permutation (k :: pl) (merge q ql)), (Permutation (k :: pl) (merge q q)), (Permutation (k :: pl) (merge q p)), (Permutation (k :: pl) (merge q gv0)), (Permutation (k :: pl) (merge q pl)), (Permutation (k :: pl) (merge p ql)), (Permutation (k :: pl) (merge p q))
(Permutation (k :: pl) (merge p p)), (Permutation (k :: pl) (merge p gv0)), (Permutation (k :: pl) (merge p pl)), (Permutation (k :: pl) (merge gv0 ql)), (Permutation (k :: pl) (merge gv0 q)), (Permutation (k :: pl) (merge gv0 p)), (Permutation (k :: pl) (merge gv0 gv0)), (Permutation (k :: pl) (merge gv0 pl)), (Permutation (k :: pl) (merge pl ql)), (Permutation (k :: pl) (merge pl q))
(Permutation (k :: pl) (merge pl p)), (Permutation (k :: pl) (merge pl gv0)), (Permutation (k :: pl) (merge pl pl)), (Permutation (k :: pl) (insert k ql)), (Permutation (k :: pl) (insert k q)), (Permutation (k :: pl) (insert k p)), (Permutation (k :: pl) (insert k gv0)), (Permutation (k :: pl) (insert k pl)), (Permutation (k :: pl) (insert a ql)), (Permutation (k :: pl) (insert a q))
(Permutation (k :: pl) (insert a p)), (Permutation (k :: pl) (insert a gv0)), (Permutation (k :: pl) (insert a pl)), (Permutation (k :: pl) (maybe_swap ql)), (Permutation (k :: pl) (maybe_swap q)), (Permutation (k :: pl) (maybe_swap p)), (Permutation (k :: pl) (maybe_swap gv0)), (Permutation (k :: pl) (maybe_swap pl)), (Permutation (k :: pl) (ql ++ ql)), (Permutation (k :: pl) (ql ++ q))
(Permutation (k :: pl) (ql ++ p)), (Permutation (k :: pl) (ql ++ gv0)), (Permutation (k :: pl) (ql ++ pl)), (Permutation (k :: pl) (q ++ ql)), (Permutation (k :: pl) (q ++ q)), (Permutation (k :: pl) (q ++ p)), (Permutation (k :: pl) (q ++ gv0)), (Permutation (k :: pl) (q ++ pl)), (Permutation (k :: pl) (p ++ ql)), (Permutation (k :: pl) (p ++ q))
(Permutation (k :: pl) (p ++ p)), (Permutation (k :: pl) (p ++ gv0)), (Permutation (k :: pl) (p ++ pl)), (Permutation (k :: pl) (gv0 ++ ql)), (Permutation (k :: pl) (gv0 ++ q)), (Permutation (k :: pl) (gv0 ++ p)), (Permutation (k :: pl) (gv0 ++ gv0)), (Permutation (k :: pl) (gv0 ++ pl)), (Permutation (k :: pl) (pl ++ ql)), (Permutation (k :: pl) (pl ++ q))
(Permutation (k :: pl) (pl ++ p)), (Permutation (k :: pl) (pl ++ gv0)), (Permutation (k :: pl) (pl ++ pl)), (Permutation (k :: pl) []), (Permutation (a :: ql) ql), (Permutation (a :: ql) q), (Permutation (a :: ql) p), (Permutation (a :: ql) gv0), (Permutation (a :: ql) pl), (Permutation (a :: ql) (k :: ql))
(Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (k :: gv0)), (Permutation (a :: ql) (k :: pl)), (Permutation (a :: ql) (a :: q)), (Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (a :: gv0)), (Permutation (a :: ql) (a :: pl)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql q))
(Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge ql gv0)), (Permutation (a :: ql) (merge ql pl)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge q gv0)), (Permutation (a :: ql) (merge q pl)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p q))
(Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (merge p gv0)), (Permutation (a :: ql) (merge p pl)), (Permutation (a :: ql) (merge gv0 ql)), (Permutation (a :: ql) (merge gv0 q)), (Permutation (a :: ql) (merge gv0 p)), (Permutation (a :: ql) (merge gv0 gv0)), (Permutation (a :: ql) (merge gv0 pl)), (Permutation (a :: ql) (merge pl ql)), (Permutation (a :: ql) (merge pl q))
(Permutation (a :: ql) (merge pl p)), (Permutation (a :: ql) (merge pl gv0)), (Permutation (a :: ql) (merge pl pl)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert k gv0)), (Permutation (a :: ql) (insert k pl)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a q))
(Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (insert a gv0)), (Permutation (a :: ql) (insert a pl)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (maybe_swap gv0)), (Permutation (a :: ql) (maybe_swap pl)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ q))
(Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (ql ++ gv0)), (Permutation (a :: ql) (ql ++ pl)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (q ++ gv0)), (Permutation (a :: ql) (q ++ pl)), (Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ q))
(Permutation (a :: ql) (p ++ p)), (Permutation (a :: ql) (p ++ gv0)), (Permutation (a :: ql) (p ++ pl)), (Permutation (a :: ql) (gv0 ++ ql)), (Permutation (a :: ql) (gv0 ++ q)), (Permutation (a :: ql) (gv0 ++ p)), (Permutation (a :: ql) (gv0 ++ gv0)), (Permutation (a :: ql) (gv0 ++ pl)), (Permutation (a :: ql) (pl ++ ql)), (Permutation (a :: ql) (pl ++ q))
(Permutation (a :: ql) (pl ++ p)), (Permutation (a :: ql) (pl ++ gv0)), (Permutation (a :: ql) (pl ++ pl)), (Permutation (a :: ql) []), (Permutation (a :: q) ql), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) gv0), (Permutation (a :: q) pl), (Permutation (a :: q) (k :: ql))
(Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: gv0)), (Permutation (a :: q) (k :: pl)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: gv0)), (Permutation (a :: q) (a :: pl)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql q))
(Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge ql gv0)), (Permutation (a :: q) (merge ql pl)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q gv0)), (Permutation (a :: q) (merge q pl)), (Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p q))
(Permutation (a :: q) (merge p p)), (Permutation (a :: q) (merge p gv0)), (Permutation (a :: q) (merge p pl)), (Permutation (a :: q) (merge gv0 ql)), (Permutation (a :: q) (merge gv0 q)), (Permutation (a :: q) (merge gv0 p)), (Permutation (a :: q) (merge gv0 gv0)), (Permutation (a :: q) (merge gv0 pl)), (Permutation (a :: q) (merge pl ql)), (Permutation (a :: q) (merge pl q))
(Permutation (a :: q) (merge pl p)), (Permutation (a :: q) (merge pl gv0)), (Permutation (a :: q) (merge pl pl)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k gv0)), (Permutation (a :: q) (insert k pl)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a q))
(Permutation (a :: q) (insert a p)), (Permutation (a :: q) (insert a gv0)), (Permutation (a :: q) (insert a pl)), (Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p)), (Permutation (a :: q) (maybe_swap gv0)), (Permutation (a :: q) (maybe_swap pl)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ q))
(Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (ql ++ gv0)), (Permutation (a :: q) (ql ++ pl)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ gv0)), (Permutation (a :: q) (q ++ pl)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ q))
(Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ gv0)), (Permutation (a :: q) (p ++ pl)), (Permutation (a :: q) (gv0 ++ ql)), (Permutation (a :: q) (gv0 ++ q)), (Permutation (a :: q) (gv0 ++ p)), (Permutation (a :: q) (gv0 ++ gv0)), (Permutation (a :: q) (gv0 ++ pl)), (Permutation (a :: q) (pl ++ ql)), (Permutation (a :: q) (pl ++ q))
(Permutation (a :: q) (pl ++ p)), (Permutation (a :: q) (pl ++ gv0)), (Permutation (a :: q) (pl ++ pl)), (Permutation (a :: q) []), (Permutation (a :: p) ql), (Permutation (a :: p) q), (Permutation (a :: p) p), (Permutation (a :: p) gv0), (Permutation (a :: p) pl), (Permutation (a :: p) (k :: ql))
(Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: gv0)), (Permutation (a :: p) (k :: pl)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: gv0)), (Permutation (a :: p) (a :: pl)), (Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql q))
(Permutation (a :: p) (merge ql p)), (Permutation (a :: p) (merge ql gv0)), (Permutation (a :: p) (merge ql pl)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q gv0)), (Permutation (a :: p) (merge q pl)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p q))
(Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p gv0)), (Permutation (a :: p) (merge p pl)), (Permutation (a :: p) (merge gv0 ql)), (Permutation (a :: p) (merge gv0 q)), (Permutation (a :: p) (merge gv0 p)), (Permutation (a :: p) (merge gv0 gv0)), (Permutation (a :: p) (merge gv0 pl)), (Permutation (a :: p) (merge pl ql)), (Permutation (a :: p) (merge pl q))
(Permutation (a :: p) (merge pl p)), (Permutation (a :: p) (merge pl gv0)), (Permutation (a :: p) (merge pl pl)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k gv0)), (Permutation (a :: p) (insert k pl)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a q))
(Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a gv0)), (Permutation (a :: p) (insert a pl)), (Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (maybe_swap gv0)), (Permutation (a :: p) (maybe_swap pl)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ q))
(Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (ql ++ gv0)), (Permutation (a :: p) (ql ++ pl)), (Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (q ++ gv0)), (Permutation (a :: p) (q ++ pl)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ q))
(Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ gv0)), (Permutation (a :: p) (p ++ pl)), (Permutation (a :: p) (gv0 ++ ql)), (Permutation (a :: p) (gv0 ++ q)), (Permutation (a :: p) (gv0 ++ p)), (Permutation (a :: p) (gv0 ++ gv0)), (Permutation (a :: p) (gv0 ++ pl)), (Permutation (a :: p) (pl ++ ql)), (Permutation (a :: p) (pl ++ q))
(Permutation (a :: p) (pl ++ p)), (Permutation (a :: p) (pl ++ gv0)), (Permutation (a :: p) (pl ++ pl)), (Permutation (a :: p) []), (Permutation (a :: gv0) ql), (Permutation (a :: gv0) q), (Permutation (a :: gv0) p), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) pl), (Permutation (a :: gv0) (k :: ql))
(Permutation (a :: gv0) (k :: q)), (Permutation (a :: gv0) (k :: p)), (Permutation (a :: gv0) (k :: gv0)), (Permutation (a :: gv0) (k :: pl)), (Permutation (a :: gv0) (a :: ql)), (Permutation (a :: gv0) (a :: q)), (Permutation (a :: gv0) (a :: p)), (Permutation (a :: gv0) (a :: pl)), (Permutation (a :: gv0) (merge ql ql)), (Permutation (a :: gv0) (merge ql q))
(Permutation (a :: gv0) (merge ql p)), (Permutation (a :: gv0) (merge ql gv0)), (Permutation (a :: gv0) (merge ql pl)), (Permutation (a :: gv0) (merge q ql)), (Permutation (a :: gv0) (merge q q)), (Permutation (a :: gv0) (merge q p)), (Permutation (a :: gv0) (merge q gv0)), (Permutation (a :: gv0) (merge q pl)), (Permutation (a :: gv0) (merge p ql)), (Permutation (a :: gv0) (merge p q))
(Permutation (a :: gv0) (merge p p)), (Permutation (a :: gv0) (merge p gv0)), (Permutation (a :: gv0) (merge p pl)), (Permutation (a :: gv0) (merge gv0 ql)), (Permutation (a :: gv0) (merge gv0 q)), (Permutation (a :: gv0) (merge gv0 p)), (Permutation (a :: gv0) (merge gv0 gv0)), (Permutation (a :: gv0) (merge gv0 pl)), (Permutation (a :: gv0) (merge pl ql)), (Permutation (a :: gv0) (merge pl q))
(Permutation (a :: gv0) (merge pl p)), (Permutation (a :: gv0) (merge pl gv0)), (Permutation (a :: gv0) (merge pl pl)), (Permutation (a :: gv0) (insert k ql)), (Permutation (a :: gv0) (insert k q)), (Permutation (a :: gv0) (insert k p)), (Permutation (a :: gv0) (insert k gv0)), (Permutation (a :: gv0) (insert k pl)), (Permutation (a :: gv0) (insert a ql)), (Permutation (a :: gv0) (insert a q))
(Permutation (a :: gv0) (insert a p)), (Permutation (a :: gv0) (insert a gv0)), (Permutation (a :: gv0) (insert a pl)), (Permutation (a :: gv0) (maybe_swap ql)), (Permutation (a :: gv0) (maybe_swap q)), (Permutation (a :: gv0) (maybe_swap p)), (Permutation (a :: gv0) (maybe_swap gv0)), (Permutation (a :: gv0) (maybe_swap pl)), (Permutation (a :: gv0) (ql ++ ql)), (Permutation (a :: gv0) (ql ++ q))
(Permutation (a :: gv0) (ql ++ p)), (Permutation (a :: gv0) (ql ++ gv0)), (Permutation (a :: gv0) (ql ++ pl)), (Permutation (a :: gv0) (q ++ ql)), (Permutation (a :: gv0) (q ++ q)), (Permutation (a :: gv0) (q ++ p)), (Permutation (a :: gv0) (q ++ gv0)), (Permutation (a :: gv0) (q ++ pl)), (Permutation (a :: gv0) (p ++ ql)), (Permutation (a :: gv0) (p ++ q))
(Permutation (a :: gv0) (p ++ p)), (Permutation (a :: gv0) (p ++ gv0)), (Permutation (a :: gv0) (p ++ pl)), (Permutation (a :: gv0) (gv0 ++ ql)), (Permutation (a :: gv0) (gv0 ++ q)), (Permutation (a :: gv0) (gv0 ++ p)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ pl)), (Permutation (a :: gv0) (pl ++ ql)), (Permutation (a :: gv0) (pl ++ q))
(Permutation (a :: gv0) (pl ++ p)), (Permutation (a :: gv0) (pl ++ gv0)), (Permutation (a :: gv0) (pl ++ pl)), (Permutation (a :: gv0) []), (Permutation (a :: pl) ql), (Permutation (a :: pl) q), (Permutation (a :: pl) p), (Permutation (a :: pl) gv0), (Permutation (a :: pl) pl), (Permutation (a :: pl) (k :: ql))
(Permutation (a :: pl) (k :: q)), (Permutation (a :: pl) (k :: p)), (Permutation (a :: pl) (k :: gv0)), (Permutation (a :: pl) (k :: pl)), (Permutation (a :: pl) (a :: ql)), (Permutation (a :: pl) (a :: q)), (Permutation (a :: pl) (a :: p)), (Permutation (a :: pl) (a :: gv0)), (Permutation (a :: pl) (merge ql ql)), (Permutation (a :: pl) (merge ql q))
(Permutation (a :: pl) (merge ql p)), (Permutation (a :: pl) (merge ql gv0)), (Permutation (a :: pl) (merge ql pl)), (Permutation (a :: pl) (merge q ql)), (Permutation (a :: pl) (merge q q)), (Permutation (a :: pl) (merge q p)), (Permutation (a :: pl) (merge q gv0)), (Permutation (a :: pl) (merge q pl)), (Permutation (a :: pl) (merge p ql)), (Permutation (a :: pl) (merge p q))
(Permutation (a :: pl) (merge p p)), (Permutation (a :: pl) (merge p gv0)), (Permutation (a :: pl) (merge p pl)), (Permutation (a :: pl) (merge gv0 ql)), (Permutation (a :: pl) (merge gv0 q)), (Permutation (a :: pl) (merge gv0 p)), (Permutation (a :: pl) (merge gv0 gv0)), (Permutation (a :: pl) (merge gv0 pl)), (Permutation (a :: pl) (merge pl ql)), (Permutation (a :: pl) (merge pl q))
(Permutation (a :: pl) (merge pl p)), (Permutation (a :: pl) (merge pl gv0)), (Permutation (a :: pl) (merge pl pl)), (Permutation (a :: pl) (insert k ql)), (Permutation (a :: pl) (insert k q)), (Permutation (a :: pl) (insert k p)), (Permutation (a :: pl) (insert k gv0)), (Permutation (a :: pl) (insert k pl)), (Permutation (a :: pl) (insert a ql)), (Permutation (a :: pl) (insert a q))
(Permutation (a :: pl) (insert a p)), (Permutation (a :: pl) (insert a gv0)), (Permutation (a :: pl) (insert a pl)), (Permutation (a :: pl) (maybe_swap ql)), (Permutation (a :: pl) (maybe_swap q)), (Permutation (a :: pl) (maybe_swap p)), (Permutation (a :: pl) (maybe_swap gv0)), (Permutation (a :: pl) (maybe_swap pl)), (Permutation (a :: pl) (ql ++ ql)), (Permutation (a :: pl) (ql ++ q))
(Permutation (a :: pl) (ql ++ p)), (Permutation (a :: pl) (ql ++ gv0)), (Permutation (a :: pl) (ql ++ pl)), (Permutation (a :: pl) (q ++ ql)), (Permutation (a :: pl) (q ++ q)), (Permutation (a :: pl) (q ++ p)), (Permutation (a :: pl) (q ++ gv0)), (Permutation (a :: pl) (q ++ pl)), (Permutation (a :: pl) (p ++ ql)), (Permutation (a :: pl) (p ++ q))
(Permutation (a :: pl) (p ++ p)), (Permutation (a :: pl) (p ++ gv0)), (Permutation (a :: pl) (p ++ pl)), (Permutation (a :: pl) (gv0 ++ ql)), (Permutation (a :: pl) (gv0 ++ q)), (Permutation (a :: pl) (gv0 ++ p)), (Permutation (a :: pl) (gv0 ++ gv0)), (Permutation (a :: pl) (gv0 ++ pl)), (Permutation (a :: pl) (pl ++ ql)), (Permutation (a :: pl) (pl ++ q))
(Permutation (a :: pl) (pl ++ p)), (Permutation (a :: pl) (pl ++ gv0)), (Permutation (a :: pl) (pl ++ pl)), (Permutation (a :: pl) []), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) q), (Permutation (merge ql ql) p), (Permutation (merge ql ql) gv0), (Permutation (merge ql ql) pl), (Permutation (merge ql ql) (k :: ql))
(Permutation (merge ql ql) (k :: q)), (Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (k :: gv0)), (Permutation (merge ql ql) (k :: pl)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (a :: gv0)), (Permutation (merge ql ql) (a :: pl)), (Permutation (merge ql ql) (merge ql q))
(Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge ql gv0)), (Permutation (merge ql ql) (merge ql pl)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge q gv0)), (Permutation (merge ql ql) (merge q pl)), (Permutation (merge ql ql) (merge p ql)), (Permutation (merge ql ql) (merge p q))
(Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (merge p gv0)), (Permutation (merge ql ql) (merge p pl)), (Permutation (merge ql ql) (merge gv0 ql)), (Permutation (merge ql ql) (merge gv0 q)), (Permutation (merge ql ql) (merge gv0 p)), (Permutation (merge ql ql) (merge gv0 gv0)), (Permutation (merge ql ql) (merge gv0 pl)), (Permutation (merge ql ql) (merge pl ql)), (Permutation (merge ql ql) (merge pl q))
(Permutation (merge ql ql) (merge pl p)), (Permutation (merge ql ql) (merge pl gv0)), (Permutation (merge ql ql) (merge pl pl)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert k gv0)), (Permutation (merge ql ql) (insert k pl)), (Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a q))
(Permutation (merge ql ql) (insert a p)), (Permutation (merge ql ql) (insert a gv0)), (Permutation (merge ql ql) (insert a pl)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (maybe_swap gv0)), (Permutation (merge ql ql) (maybe_swap pl)), (Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ q))
(Permutation (merge ql ql) (ql ++ p)), (Permutation (merge ql ql) (ql ++ gv0)), (Permutation (merge ql ql) (ql ++ pl)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (q ++ gv0)), (Permutation (merge ql ql) (q ++ pl)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ q))
(Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) (p ++ gv0)), (Permutation (merge ql ql) (p ++ pl)), (Permutation (merge ql ql) (gv0 ++ ql)), (Permutation (merge ql ql) (gv0 ++ q)), (Permutation (merge ql ql) (gv0 ++ p)), (Permutation (merge ql ql) (gv0 ++ gv0)), (Permutation (merge ql ql) (gv0 ++ pl)), (Permutation (merge ql ql) (pl ++ ql)), (Permutation (merge ql ql) (pl ++ q))
(Permutation (merge ql ql) (pl ++ p)), (Permutation (merge ql ql) (pl ++ gv0)), (Permutation (merge ql ql) (pl ++ pl)), (Permutation (merge ql ql) []), (Permutation (merge ql q) ql), (Permutation (merge ql q) q), (Permutation (merge ql q) p), (Permutation (merge ql q) gv0), (Permutation (merge ql q) pl), (Permutation (merge ql q) (k :: ql))
(Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (k :: gv0)), (Permutation (merge ql q) (k :: pl)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (a :: gv0)), (Permutation (merge ql q) (a :: pl)), (Permutation (merge ql q) (merge ql ql))
(Permutation (merge ql q) (merge ql p)), (Permutation (merge ql q) (merge ql gv0)), (Permutation (merge ql q) (merge ql pl)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge q gv0)), (Permutation (merge ql q) (merge q pl)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p q))
(Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (merge p gv0)), (Permutation (merge ql q) (merge p pl)), (Permutation (merge ql q) (merge gv0 ql)), (Permutation (merge ql q) (merge gv0 q)), (Permutation (merge ql q) (merge gv0 p)), (Permutation (merge ql q) (merge gv0 gv0)), (Permutation (merge ql q) (merge gv0 pl)), (Permutation (merge ql q) (merge pl ql)), (Permutation (merge ql q) (merge pl q))
(Permutation (merge ql q) (merge pl p)), (Permutation (merge ql q) (merge pl gv0)), (Permutation (merge ql q) (merge pl pl)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert k gv0)), (Permutation (merge ql q) (insert k pl)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a q))
(Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (insert a gv0)), (Permutation (merge ql q) (insert a pl)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (maybe_swap gv0)), (Permutation (merge ql q) (maybe_swap pl)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ q))
(Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (ql ++ gv0)), (Permutation (merge ql q) (ql ++ pl)), (Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ p)), (Permutation (merge ql q) (q ++ gv0)), (Permutation (merge ql q) (q ++ pl)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ q))
(Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) (p ++ gv0)), (Permutation (merge ql q) (p ++ pl)), (Permutation (merge ql q) (gv0 ++ ql)), (Permutation (merge ql q) (gv0 ++ q)), (Permutation (merge ql q) (gv0 ++ p)), (Permutation (merge ql q) (gv0 ++ gv0)), (Permutation (merge ql q) (gv0 ++ pl)), (Permutation (merge ql q) (pl ++ ql)), (Permutation (merge ql q) (pl ++ q))
(Permutation (merge ql q) (pl ++ p)), (Permutation (merge ql q) (pl ++ gv0)), (Permutation (merge ql q) (pl ++ pl)), (Permutation (merge ql q) []), (Permutation (merge ql p) ql), (Permutation (merge ql p) q), (Permutation (merge ql p) p), (Permutation (merge ql p) gv0), (Permutation (merge ql p) pl), (Permutation (merge ql p) (k :: ql))
(Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (k :: gv0)), (Permutation (merge ql p) (k :: pl)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: q)), (Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (a :: gv0)), (Permutation (merge ql p) (a :: pl)), (Permutation (merge ql p) (merge ql ql))
(Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql gv0)), (Permutation (merge ql p) (merge ql pl)), (Permutation (merge ql p) (merge q ql)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge q gv0)), (Permutation (merge ql p) (merge q pl)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p q))
(Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (merge p gv0)), (Permutation (merge ql p) (merge p pl)), (Permutation (merge ql p) (merge gv0 ql)), (Permutation (merge ql p) (merge gv0 q)), (Permutation (merge ql p) (merge gv0 p)), (Permutation (merge ql p) (merge gv0 gv0)), (Permutation (merge ql p) (merge gv0 pl)), (Permutation (merge ql p) (merge pl ql)), (Permutation (merge ql p) (merge pl q))
(Permutation (merge ql p) (merge pl p)), (Permutation (merge ql p) (merge pl gv0)), (Permutation (merge ql p) (merge pl pl)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert k gv0)), (Permutation (merge ql p) (insert k pl)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a q))
(Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (insert a gv0)), (Permutation (merge ql p) (insert a pl)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (maybe_swap gv0)), (Permutation (merge ql p) (maybe_swap pl)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ q))
(Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (ql ++ gv0)), (Permutation (merge ql p) (ql ++ pl)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (q ++ gv0)), (Permutation (merge ql p) (q ++ pl)), (Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ q))
(Permutation (merge ql p) (p ++ p)), (Permutation (merge ql p) (p ++ gv0)), (Permutation (merge ql p) (p ++ pl)), (Permutation (merge ql p) (gv0 ++ ql)), (Permutation (merge ql p) (gv0 ++ q)), (Permutation (merge ql p) (gv0 ++ p)), (Permutation (merge ql p) (gv0 ++ gv0)), (Permutation (merge ql p) (gv0 ++ pl)), (Permutation (merge ql p) (pl ++ ql)), (Permutation (merge ql p) (pl ++ q))
(Permutation (merge ql p) (pl ++ p)), (Permutation (merge ql p) (pl ++ gv0)), (Permutation (merge ql p) (pl ++ pl)), (Permutation (merge ql p) []), (Permutation (merge ql gv0) ql), (Permutation (merge ql gv0) q), (Permutation (merge ql gv0) p), (Permutation (merge ql gv0) gv0), (Permutation (merge ql gv0) pl), (Permutation (merge ql gv0) (k :: ql))
(Permutation (merge ql gv0) (k :: q)), (Permutation (merge ql gv0) (k :: p)), (Permutation (merge ql gv0) (k :: gv0)), (Permutation (merge ql gv0) (k :: pl)), (Permutation (merge ql gv0) (a :: ql)), (Permutation (merge ql gv0) (a :: q)), (Permutation (merge ql gv0) (a :: p)), (Permutation (merge ql gv0) (a :: gv0)), (Permutation (merge ql gv0) (a :: pl)), (Permutation (merge ql gv0) (merge ql ql))
(Permutation (merge ql gv0) (merge ql q)), (Permutation (merge ql gv0) (merge ql p)), (Permutation (merge ql gv0) (merge ql pl)), (Permutation (merge ql gv0) (merge q ql)), (Permutation (merge ql gv0) (merge q q)), (Permutation (merge ql gv0) (merge q p)), (Permutation (merge ql gv0) (merge q gv0)), (Permutation (merge ql gv0) (merge q pl)), (Permutation (merge ql gv0) (merge p ql)), (Permutation (merge ql gv0) (merge p q))
(Permutation (merge ql gv0) (merge p p)), (Permutation (merge ql gv0) (merge p gv0)), (Permutation (merge ql gv0) (merge p pl)), (Permutation (merge ql gv0) (merge gv0 ql)), (Permutation (merge ql gv0) (merge gv0 q)), (Permutation (merge ql gv0) (merge gv0 p)), (Permutation (merge ql gv0) (merge gv0 gv0)), (Permutation (merge ql gv0) (merge gv0 pl)), (Permutation (merge ql gv0) (merge pl ql)), (Permutation (merge ql gv0) (merge pl q))
(Permutation (merge ql gv0) (merge pl p)), (Permutation (merge ql gv0) (merge pl gv0)), (Permutation (merge ql gv0) (merge pl pl)), (Permutation (merge ql gv0) (insert k ql)), (Permutation (merge ql gv0) (insert k q)), (Permutation (merge ql gv0) (insert k p)), (Permutation (merge ql gv0) (insert k gv0)), (Permutation (merge ql gv0) (insert k pl)), (Permutation (merge ql gv0) (insert a ql)), (Permutation (merge ql gv0) (insert a q))
(Permutation (merge ql gv0) (insert a p)), (Permutation (merge ql gv0) (insert a gv0)), (Permutation (merge ql gv0) (insert a pl)), (Permutation (merge ql gv0) (maybe_swap ql)), (Permutation (merge ql gv0) (maybe_swap q)), (Permutation (merge ql gv0) (maybe_swap p)), (Permutation (merge ql gv0) (maybe_swap gv0)), (Permutation (merge ql gv0) (maybe_swap pl)), (Permutation (merge ql gv0) (ql ++ ql)), (Permutation (merge ql gv0) (ql ++ q))
(Permutation (merge ql gv0) (ql ++ p)), (Permutation (merge ql gv0) (ql ++ gv0)), (Permutation (merge ql gv0) (ql ++ pl)), (Permutation (merge ql gv0) (q ++ ql)), (Permutation (merge ql gv0) (q ++ q)), (Permutation (merge ql gv0) (q ++ p)), (Permutation (merge ql gv0) (q ++ gv0)), (Permutation (merge ql gv0) (q ++ pl)), (Permutation (merge ql gv0) (p ++ ql)), (Permutation (merge ql gv0) (p ++ q))
(Permutation (merge ql gv0) (p ++ p)), (Permutation (merge ql gv0) (p ++ gv0)), (Permutation (merge ql gv0) (p ++ pl)), (Permutation (merge ql gv0) (gv0 ++ ql)), (Permutation (merge ql gv0) (gv0 ++ q)), (Permutation (merge ql gv0) (gv0 ++ p)), (Permutation (merge ql gv0) (gv0 ++ gv0)), (Permutation (merge ql gv0) (gv0 ++ pl)), (Permutation (merge ql gv0) (pl ++ ql)), (Permutation (merge ql gv0) (pl ++ q))
(Permutation (merge ql gv0) (pl ++ p)), (Permutation (merge ql gv0) (pl ++ gv0)), (Permutation (merge ql gv0) (pl ++ pl)), (Permutation (merge ql gv0) []), (Permutation (merge ql pl) ql), (Permutation (merge ql pl) q), (Permutation (merge ql pl) p), (Permutation (merge ql pl) gv0), (Permutation (merge ql pl) pl), (Permutation (merge ql pl) (k :: ql))
(Permutation (merge ql pl) (k :: q)), (Permutation (merge ql pl) (k :: p)), (Permutation (merge ql pl) (k :: gv0)), (Permutation (merge ql pl) (k :: pl)), (Permutation (merge ql pl) (a :: ql)), (Permutation (merge ql pl) (a :: q)), (Permutation (merge ql pl) (a :: p)), (Permutation (merge ql pl) (a :: gv0)), (Permutation (merge ql pl) (a :: pl)), (Permutation (merge ql pl) (merge ql ql))
(Permutation (merge ql pl) (merge ql q)), (Permutation (merge ql pl) (merge ql p)), (Permutation (merge ql pl) (merge ql gv0)), (Permutation (merge ql pl) (merge q ql)), (Permutation (merge ql pl) (merge q q)), (Permutation (merge ql pl) (merge q p)), (Permutation (merge ql pl) (merge q gv0)), (Permutation (merge ql pl) (merge q pl)), (Permutation (merge ql pl) (merge p ql)), (Permutation (merge ql pl) (merge p q))
(Permutation (merge ql pl) (merge p p)), (Permutation (merge ql pl) (merge p gv0)), (Permutation (merge ql pl) (merge p pl)), (Permutation (merge ql pl) (merge gv0 ql)), (Permutation (merge ql pl) (merge gv0 q)), (Permutation (merge ql pl) (merge gv0 p)), (Permutation (merge ql pl) (merge gv0 gv0)), (Permutation (merge ql pl) (merge gv0 pl)), (Permutation (merge ql pl) (merge pl ql)), (Permutation (merge ql pl) (merge pl q))
(Permutation (merge ql pl) (merge pl p)), (Permutation (merge ql pl) (merge pl gv0)), (Permutation (merge ql pl) (merge pl pl)), (Permutation (merge ql pl) (insert k ql)), (Permutation (merge ql pl) (insert k q)), (Permutation (merge ql pl) (insert k p)), (Permutation (merge ql pl) (insert k gv0)), (Permutation (merge ql pl) (insert k pl)), (Permutation (merge ql pl) (insert a ql)), (Permutation (merge ql pl) (insert a q))
(Permutation (merge ql pl) (insert a p)), (Permutation (merge ql pl) (insert a gv0)), (Permutation (merge ql pl) (insert a pl)), (Permutation (merge ql pl) (maybe_swap ql)), (Permutation (merge ql pl) (maybe_swap q)), (Permutation (merge ql pl) (maybe_swap p)), (Permutation (merge ql pl) (maybe_swap gv0)), (Permutation (merge ql pl) (maybe_swap pl)), (Permutation (merge ql pl) (ql ++ ql)), (Permutation (merge ql pl) (ql ++ q))
(Permutation (merge ql pl) (ql ++ p)), (Permutation (merge ql pl) (ql ++ gv0)), (Permutation (merge ql pl) (ql ++ pl)), (Permutation (merge ql pl) (q ++ ql)), (Permutation (merge ql pl) (q ++ q)), (Permutation (merge ql pl) (q ++ p)), (Permutation (merge ql pl) (q ++ gv0)), (Permutation (merge ql pl) (q ++ pl)), (Permutation (merge ql pl) (p ++ ql)), (Permutation (merge ql pl) (p ++ q))
(Permutation (merge ql pl) (p ++ p)), (Permutation (merge ql pl) (p ++ gv0)), (Permutation (merge ql pl) (p ++ pl)), (Permutation (merge ql pl) (gv0 ++ ql)), (Permutation (merge ql pl) (gv0 ++ q)), (Permutation (merge ql pl) (gv0 ++ p)), (Permutation (merge ql pl) (gv0 ++ gv0)), (Permutation (merge ql pl) (gv0 ++ pl)), (Permutation (merge ql pl) (pl ++ ql)), (Permutation (merge ql pl) (pl ++ q))
(Permutation (merge ql pl) (pl ++ p)), (Permutation (merge ql pl) (pl ++ gv0)), (Permutation (merge ql pl) (pl ++ pl)), (Permutation (merge ql pl) []), (Permutation (merge q ql) ql), (Permutation (merge q ql) q), (Permutation (merge q ql) p), (Permutation (merge q ql) gv0), (Permutation (merge q ql) pl), (Permutation (merge q ql) (k :: ql))
(Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (k :: gv0)), (Permutation (merge q ql) (k :: pl)), (Permutation (merge q ql) (a :: ql)), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (a :: gv0)), (Permutation (merge q ql) (a :: pl)), (Permutation (merge q ql) (merge ql ql))
(Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge ql gv0)), (Permutation (merge q ql) (merge ql pl)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge q gv0)), (Permutation (merge q ql) (merge q pl)), (Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p q))
(Permutation (merge q ql) (merge p p)), (Permutation (merge q ql) (merge p gv0)), (Permutation (merge q ql) (merge p pl)), (Permutation (merge q ql) (merge gv0 ql)), (Permutation (merge q ql) (merge gv0 q)), (Permutation (merge q ql) (merge gv0 p)), (Permutation (merge q ql) (merge gv0 gv0)), (Permutation (merge q ql) (merge gv0 pl)), (Permutation (merge q ql) (merge pl ql)), (Permutation (merge q ql) (merge pl q))
(Permutation (merge q ql) (merge pl p)), (Permutation (merge q ql) (merge pl gv0)), (Permutation (merge q ql) (merge pl pl)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert k gv0)), (Permutation (merge q ql) (insert k pl)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a q))
(Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (insert a gv0)), (Permutation (merge q ql) (insert a pl)), (Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap p)), (Permutation (merge q ql) (maybe_swap gv0)), (Permutation (merge q ql) (maybe_swap pl)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ q))
(Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (ql ++ gv0)), (Permutation (merge q ql) (ql ++ pl)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (q ++ gv0)), (Permutation (merge q ql) (q ++ pl)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ q))
(Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) (p ++ gv0)), (Permutation (merge q ql) (p ++ pl)), (Permutation (merge q ql) (gv0 ++ ql)), (Permutation (merge q ql) (gv0 ++ q)), (Permutation (merge q ql) (gv0 ++ p)), (Permutation (merge q ql) (gv0 ++ gv0)), (Permutation (merge q ql) (gv0 ++ pl)), (Permutation (merge q ql) (pl ++ ql)), (Permutation (merge q ql) (pl ++ q))
(Permutation (merge q ql) (pl ++ p)), (Permutation (merge q ql) (pl ++ gv0)), (Permutation (merge q ql) (pl ++ pl)), (Permutation (merge q ql) []), (Permutation (merge q q) ql), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) gv0), (Permutation (merge q q) pl), (Permutation (merge q q) (k :: ql))
(Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: gv0)), (Permutation (merge q q) (k :: pl)), (Permutation (merge q q) (a :: ql)), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (a :: gv0)), (Permutation (merge q q) (a :: pl)), (Permutation (merge q q) (merge ql ql))
(Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge ql gv0)), (Permutation (merge q q) (merge ql pl)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q gv0)), (Permutation (merge q q) (merge q pl)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p q))
(Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p gv0)), (Permutation (merge q q) (merge p pl)), (Permutation (merge q q) (merge gv0 ql)), (Permutation (merge q q) (merge gv0 q)), (Permutation (merge q q) (merge gv0 p)), (Permutation (merge q q) (merge gv0 gv0)), (Permutation (merge q q) (merge gv0 pl)), (Permutation (merge q q) (merge pl ql)), (Permutation (merge q q) (merge pl q))
(Permutation (merge q q) (merge pl p)), (Permutation (merge q q) (merge pl gv0)), (Permutation (merge q q) (merge pl pl)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k gv0)), (Permutation (merge q q) (insert k pl)), (Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a q))
(Permutation (merge q q) (insert a p)), (Permutation (merge q q) (insert a gv0)), (Permutation (merge q q) (insert a pl)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (maybe_swap gv0)), (Permutation (merge q q) (maybe_swap pl)), (Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ q))
(Permutation (merge q q) (ql ++ p)), (Permutation (merge q q) (ql ++ gv0)), (Permutation (merge q q) (ql ++ pl)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ gv0)), (Permutation (merge q q) (q ++ pl)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ q))
(Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ gv0)), (Permutation (merge q q) (p ++ pl)), (Permutation (merge q q) (gv0 ++ ql)), (Permutation (merge q q) (gv0 ++ q)), (Permutation (merge q q) (gv0 ++ p)), (Permutation (merge q q) (gv0 ++ gv0)), (Permutation (merge q q) (gv0 ++ pl)), (Permutation (merge q q) (pl ++ ql)), (Permutation (merge q q) (pl ++ q))
(Permutation (merge q q) (pl ++ p)), (Permutation (merge q q) (pl ++ gv0)), (Permutation (merge q q) (pl ++ pl)), (Permutation (merge q q) []), (Permutation (merge q p) ql), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) gv0), (Permutation (merge q p) pl), (Permutation (merge q p) (k :: ql))
(Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: gv0)), (Permutation (merge q p) (k :: pl)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: gv0)), (Permutation (merge q p) (a :: pl)), (Permutation (merge q p) (merge ql ql))
(Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge ql gv0)), (Permutation (merge q p) (merge ql pl)), (Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q gv0)), (Permutation (merge q p) (merge q pl)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p q))
(Permutation (merge q p) (merge p p)), (Permutation (merge q p) (merge p gv0)), (Permutation (merge q p) (merge p pl)), (Permutation (merge q p) (merge gv0 ql)), (Permutation (merge q p) (merge gv0 q)), (Permutation (merge q p) (merge gv0 p)), (Permutation (merge q p) (merge gv0 gv0)), (Permutation (merge q p) (merge gv0 pl)), (Permutation (merge q p) (merge pl ql)), (Permutation (merge q p) (merge pl q))
(Permutation (merge q p) (merge pl p)), (Permutation (merge q p) (merge pl gv0)), (Permutation (merge q p) (merge pl pl)), (Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert k gv0)), (Permutation (merge q p) (insert k pl)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a q))
(Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a gv0)), (Permutation (merge q p) (insert a pl)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap gv0)), (Permutation (merge q p) (maybe_swap pl)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ q))
(Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (ql ++ gv0)), (Permutation (merge q p) (ql ++ pl)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (q ++ gv0)), (Permutation (merge q p) (q ++ pl)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ q))
(Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ gv0)), (Permutation (merge q p) (p ++ pl)), (Permutation (merge q p) (gv0 ++ ql)), (Permutation (merge q p) (gv0 ++ q)), (Permutation (merge q p) (gv0 ++ p)), (Permutation (merge q p) (gv0 ++ gv0)), (Permutation (merge q p) (gv0 ++ pl)), (Permutation (merge q p) (pl ++ ql)), (Permutation (merge q p) (pl ++ q))
(Permutation (merge q p) (pl ++ p)), (Permutation (merge q p) (pl ++ gv0)), (Permutation (merge q p) (pl ++ pl)), (Permutation (merge q p) []), (Permutation (merge q gv0) ql), (Permutation (merge q gv0) q), (Permutation (merge q gv0) p), (Permutation (merge q gv0) gv0), (Permutation (merge q gv0) pl), (Permutation (merge q gv0) (k :: ql))
(Permutation (merge q gv0) (k :: q)), (Permutation (merge q gv0) (k :: p)), (Permutation (merge q gv0) (k :: gv0)), (Permutation (merge q gv0) (k :: pl)), (Permutation (merge q gv0) (a :: ql)), (Permutation (merge q gv0) (a :: q)), (Permutation (merge q gv0) (a :: p)), (Permutation (merge q gv0) (a :: gv0)), (Permutation (merge q gv0) (a :: pl)), (Permutation (merge q gv0) (merge ql ql))
(Permutation (merge q gv0) (merge ql q)), (Permutation (merge q gv0) (merge ql p)), (Permutation (merge q gv0) (merge ql gv0)), (Permutation (merge q gv0) (merge ql pl)), (Permutation (merge q gv0) (merge q ql)), (Permutation (merge q gv0) (merge q q)), (Permutation (merge q gv0) (merge q p)), (Permutation (merge q gv0) (merge q pl)), (Permutation (merge q gv0) (merge p ql)), (Permutation (merge q gv0) (merge p q))
(Permutation (merge q gv0) (merge p p)), (Permutation (merge q gv0) (merge p gv0)), (Permutation (merge q gv0) (merge p pl)), (Permutation (merge q gv0) (merge gv0 ql)), (Permutation (merge q gv0) (merge gv0 q)), (Permutation (merge q gv0) (merge gv0 p)), (Permutation (merge q gv0) (merge gv0 gv0)), (Permutation (merge q gv0) (merge gv0 pl)), (Permutation (merge q gv0) (merge pl ql)), (Permutation (merge q gv0) (merge pl q))
(Permutation (merge q gv0) (merge pl p)), (Permutation (merge q gv0) (merge pl gv0)), (Permutation (merge q gv0) (merge pl pl)), (Permutation (merge q gv0) (insert k ql)), (Permutation (merge q gv0) (insert k q)), (Permutation (merge q gv0) (insert k p)), (Permutation (merge q gv0) (insert k gv0)), (Permutation (merge q gv0) (insert k pl)), (Permutation (merge q gv0) (insert a ql)), (Permutation (merge q gv0) (insert a q))
(Permutation (merge q gv0) (insert a p)), (Permutation (merge q gv0) (insert a gv0)), (Permutation (merge q gv0) (insert a pl)), (Permutation (merge q gv0) (maybe_swap ql)), (Permutation (merge q gv0) (maybe_swap q)), (Permutation (merge q gv0) (maybe_swap p)), (Permutation (merge q gv0) (maybe_swap gv0)), (Permutation (merge q gv0) (maybe_swap pl)), (Permutation (merge q gv0) (ql ++ ql)), (Permutation (merge q gv0) (ql ++ q))
(Permutation (merge q gv0) (ql ++ p)), (Permutation (merge q gv0) (ql ++ gv0)), (Permutation (merge q gv0) (ql ++ pl)), (Permutation (merge q gv0) (q ++ ql)), (Permutation (merge q gv0) (q ++ q)), (Permutation (merge q gv0) (q ++ p)), (Permutation (merge q gv0) (q ++ gv0)), (Permutation (merge q gv0) (q ++ pl)), (Permutation (merge q gv0) (p ++ ql)), (Permutation (merge q gv0) (p ++ q))
(Permutation (merge q gv0) (p ++ p)), (Permutation (merge q gv0) (p ++ gv0)), (Permutation (merge q gv0) (p ++ pl)), (Permutation (merge q gv0) (gv0 ++ ql)), (Permutation (merge q gv0) (gv0 ++ q)), (Permutation (merge q gv0) (gv0 ++ p)), (Permutation (merge q gv0) (gv0 ++ gv0)), (Permutation (merge q gv0) (gv0 ++ pl)), (Permutation (merge q gv0) (pl ++ ql)), (Permutation (merge q gv0) (pl ++ q))
(Permutation (merge q gv0) (pl ++ p)), (Permutation (merge q gv0) (pl ++ gv0)), (Permutation (merge q gv0) (pl ++ pl)), (Permutation (merge q gv0) []), (Permutation (merge q pl) ql), (Permutation (merge q pl) q), (Permutation (merge q pl) p), (Permutation (merge q pl) gv0), (Permutation (merge q pl) pl), (Permutation (merge q pl) (k :: ql))
(Permutation (merge q pl) (k :: q)), (Permutation (merge q pl) (k :: p)), (Permutation (merge q pl) (k :: gv0)), (Permutation (merge q pl) (k :: pl)), (Permutation (merge q pl) (a :: ql)), (Permutation (merge q pl) (a :: q)), (Permutation (merge q pl) (a :: p)), (Permutation (merge q pl) (a :: gv0)), (Permutation (merge q pl) (a :: pl)), (Permutation (merge q pl) (merge ql ql))
(Permutation (merge q pl) (merge ql q)), (Permutation (merge q pl) (merge ql p)), (Permutation (merge q pl) (merge ql gv0)), (Permutation (merge q pl) (merge ql pl)), (Permutation (merge q pl) (merge q ql)), (Permutation (merge q pl) (merge q q)), (Permutation (merge q pl) (merge q p)), (Permutation (merge q pl) (merge q gv0)), (Permutation (merge q pl) (merge p ql)), (Permutation (merge q pl) (merge p q))
(Permutation (merge q pl) (merge p p)), (Permutation (merge q pl) (merge p gv0)), (Permutation (merge q pl) (merge p pl)), (Permutation (merge q pl) (merge gv0 ql)), (Permutation (merge q pl) (merge gv0 q)), (Permutation (merge q pl) (merge gv0 p)), (Permutation (merge q pl) (merge gv0 gv0)), (Permutation (merge q pl) (merge gv0 pl)), (Permutation (merge q pl) (merge pl ql)), (Permutation (merge q pl) (merge pl q))
(Permutation (merge q pl) (merge pl p)), (Permutation (merge q pl) (merge pl gv0)), (Permutation (merge q pl) (merge pl pl)), (Permutation (merge q pl) (insert k ql)), (Permutation (merge q pl) (insert k q)), (Permutation (merge q pl) (insert k p)), (Permutation (merge q pl) (insert k gv0)), (Permutation (merge q pl) (insert k pl)), (Permutation (merge q pl) (insert a ql)), (Permutation (merge q pl) (insert a q))
(Permutation (merge q pl) (insert a p)), (Permutation (merge q pl) (insert a gv0)), (Permutation (merge q pl) (insert a pl)), (Permutation (merge q pl) (maybe_swap ql)), (Permutation (merge q pl) (maybe_swap q)), (Permutation (merge q pl) (maybe_swap p)), (Permutation (merge q pl) (maybe_swap gv0)), (Permutation (merge q pl) (maybe_swap pl)), (Permutation (merge q pl) (ql ++ ql)), (Permutation (merge q pl) (ql ++ q))
(Permutation (merge q pl) (ql ++ p)), (Permutation (merge q pl) (ql ++ gv0)), (Permutation (merge q pl) (ql ++ pl)), (Permutation (merge q pl) (q ++ ql)), (Permutation (merge q pl) (q ++ q)), (Permutation (merge q pl) (q ++ p)), (Permutation (merge q pl) (q ++ gv0)), (Permutation (merge q pl) (q ++ pl)), (Permutation (merge q pl) (p ++ ql)), (Permutation (merge q pl) (p ++ q))
(Permutation (merge q pl) (p ++ p)), (Permutation (merge q pl) (p ++ gv0)), (Permutation (merge q pl) (p ++ pl)), (Permutation (merge q pl) (gv0 ++ ql)), (Permutation (merge q pl) (gv0 ++ q)), (Permutation (merge q pl) (gv0 ++ p)), (Permutation (merge q pl) (gv0 ++ gv0)), (Permutation (merge q pl) (gv0 ++ pl)), (Permutation (merge q pl) (pl ++ ql)), (Permutation (merge q pl) (pl ++ q))
(Permutation (merge q pl) (pl ++ p)), (Permutation (merge q pl) (pl ++ gv0)), (Permutation (merge q pl) (pl ++ pl)), (Permutation (merge q pl) []), (Permutation (merge p ql) ql), (Permutation (merge p ql) q), (Permutation (merge p ql) p), (Permutation (merge p ql) gv0), (Permutation (merge p ql) pl), (Permutation (merge p ql) (k :: ql))
(Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (k :: gv0)), (Permutation (merge p ql) (k :: pl)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (a :: gv0)), (Permutation (merge p ql) (a :: pl)), (Permutation (merge p ql) (merge ql ql))
(Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge ql gv0)), (Permutation (merge p ql) (merge ql pl)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q q)), (Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge q gv0)), (Permutation (merge p ql) (merge q pl)), (Permutation (merge p ql) (merge p q))
(Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (merge p gv0)), (Permutation (merge p ql) (merge p pl)), (Permutation (merge p ql) (merge gv0 ql)), (Permutation (merge p ql) (merge gv0 q)), (Permutation (merge p ql) (merge gv0 p)), (Permutation (merge p ql) (merge gv0 gv0)), (Permutation (merge p ql) (merge gv0 pl)), (Permutation (merge p ql) (merge pl ql)), (Permutation (merge p ql) (merge pl q))
(Permutation (merge p ql) (merge pl p)), (Permutation (merge p ql) (merge pl gv0)), (Permutation (merge p ql) (merge pl pl)), (Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k p)), (Permutation (merge p ql) (insert k gv0)), (Permutation (merge p ql) (insert k pl)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a q))
(Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (insert a gv0)), (Permutation (merge p ql) (insert a pl)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (maybe_swap gv0)), (Permutation (merge p ql) (maybe_swap pl)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ q))
(Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (ql ++ gv0)), (Permutation (merge p ql) (ql ++ pl)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (q ++ gv0)), (Permutation (merge p ql) (q ++ pl)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ q))
(Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) (p ++ gv0)), (Permutation (merge p ql) (p ++ pl)), (Permutation (merge p ql) (gv0 ++ ql)), (Permutation (merge p ql) (gv0 ++ q)), (Permutation (merge p ql) (gv0 ++ p)), (Permutation (merge p ql) (gv0 ++ gv0)), (Permutation (merge p ql) (gv0 ++ pl)), (Permutation (merge p ql) (pl ++ ql)), (Permutation (merge p ql) (pl ++ q))
(Permutation (merge p ql) (pl ++ p)), (Permutation (merge p ql) (pl ++ gv0)), (Permutation (merge p ql) (pl ++ pl)), (Permutation (merge p ql) []), (Permutation (merge p q) ql), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) gv0), (Permutation (merge p q) pl), (Permutation (merge p q) (k :: ql))
(Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: gv0)), (Permutation (merge p q) (k :: pl)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: gv0)), (Permutation (merge p q) (a :: pl)), (Permutation (merge p q) (merge ql ql))
(Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge ql gv0)), (Permutation (merge p q) (merge ql pl)), (Permutation (merge p q) (merge q ql)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge q gv0)), (Permutation (merge p q) (merge q pl)), (Permutation (merge p q) (merge p ql))
(Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p gv0)), (Permutation (merge p q) (merge p pl)), (Permutation (merge p q) (merge gv0 ql)), (Permutation (merge p q) (merge gv0 q)), (Permutation (merge p q) (merge gv0 p)), (Permutation (merge p q) (merge gv0 gv0)), (Permutation (merge p q) (merge gv0 pl)), (Permutation (merge p q) (merge pl ql)), (Permutation (merge p q) (merge pl q))
(Permutation (merge p q) (merge pl p)), (Permutation (merge p q) (merge pl gv0)), (Permutation (merge p q) (merge pl pl)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k gv0)), (Permutation (merge p q) (insert k pl)), (Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a q))
(Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a gv0)), (Permutation (merge p q) (insert a pl)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap gv0)), (Permutation (merge p q) (maybe_swap pl)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ q))
(Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (ql ++ gv0)), (Permutation (merge p q) (ql ++ pl)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ gv0)), (Permutation (merge p q) (q ++ pl)), (Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ q))
(Permutation (merge p q) (p ++ p)), (Permutation (merge p q) (p ++ gv0)), (Permutation (merge p q) (p ++ pl)), (Permutation (merge p q) (gv0 ++ ql)), (Permutation (merge p q) (gv0 ++ q)), (Permutation (merge p q) (gv0 ++ p)), (Permutation (merge p q) (gv0 ++ gv0)), (Permutation (merge p q) (gv0 ++ pl)), (Permutation (merge p q) (pl ++ ql)), (Permutation (merge p q) (pl ++ q))
(Permutation (merge p q) (pl ++ p)), (Permutation (merge p q) (pl ++ gv0)), (Permutation (merge p q) (pl ++ pl)), (Permutation (merge p q) []), (Permutation (merge p p) ql), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) gv0), (Permutation (merge p p) pl), (Permutation (merge p p) (k :: ql))
(Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: gv0)), (Permutation (merge p p) (k :: pl)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: gv0)), (Permutation (merge p p) (a :: pl)), (Permutation (merge p p) (merge ql ql))
(Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge ql gv0)), (Permutation (merge p p) (merge ql pl)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q gv0)), (Permutation (merge p p) (merge q pl)), (Permutation (merge p p) (merge p ql))
(Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p gv0)), (Permutation (merge p p) (merge p pl)), (Permutation (merge p p) (merge gv0 ql)), (Permutation (merge p p) (merge gv0 q)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (merge gv0 pl)), (Permutation (merge p p) (merge pl ql)), (Permutation (merge p p) (merge pl q))
(Permutation (merge p p) (merge pl p)), (Permutation (merge p p) (merge pl gv0)), (Permutation (merge p p) (merge pl pl)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k gv0)), (Permutation (merge p p) (insert k pl)), (Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a q))
(Permutation (merge p p) (insert a p)), (Permutation (merge p p) (insert a gv0)), (Permutation (merge p p) (insert a pl)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap gv0)), (Permutation (merge p p) (maybe_swap pl)), (Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ q))
(Permutation (merge p p) (ql ++ p)), (Permutation (merge p p) (ql ++ gv0)), (Permutation (merge p p) (ql ++ pl)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ gv0)), (Permutation (merge p p) (q ++ pl)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ q))
(Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (p ++ pl)), (Permutation (merge p p) (gv0 ++ ql)), (Permutation (merge p p) (gv0 ++ q)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) (gv0 ++ pl)), (Permutation (merge p p) (pl ++ ql)), (Permutation (merge p p) (pl ++ q))
(Permutation (merge p p) (pl ++ p)), (Permutation (merge p p) (pl ++ gv0)), (Permutation (merge p p) (pl ++ pl)), (Permutation (merge p p) []), (Permutation (merge p gv0) ql), (Permutation (merge p gv0) q), (Permutation (merge p gv0) p), (Permutation (merge p gv0) gv0), (Permutation (merge p gv0) pl), (Permutation (merge p gv0) (k :: ql))
(Permutation (merge p gv0) (k :: q)), (Permutation (merge p gv0) (k :: p)), (Permutation (merge p gv0) (k :: gv0)), (Permutation (merge p gv0) (k :: pl)), (Permutation (merge p gv0) (a :: ql)), (Permutation (merge p gv0) (a :: q)), (Permutation (merge p gv0) (a :: p)), (Permutation (merge p gv0) (a :: gv0)), (Permutation (merge p gv0) (a :: pl)), (Permutation (merge p gv0) (merge ql ql))
(Permutation (merge p gv0) (merge ql q)), (Permutation (merge p gv0) (merge ql p)), (Permutation (merge p gv0) (merge ql gv0)), (Permutation (merge p gv0) (merge ql pl)), (Permutation (merge p gv0) (merge q ql)), (Permutation (merge p gv0) (merge q q)), (Permutation (merge p gv0) (merge q p)), (Permutation (merge p gv0) (merge q gv0)), (Permutation (merge p gv0) (merge q pl)), (Permutation (merge p gv0) (merge p ql))
(Permutation (merge p gv0) (merge p q)), (Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge p pl)), (Permutation (merge p gv0) (merge gv0 ql)), (Permutation (merge p gv0) (merge gv0 q)), (Permutation (merge p gv0) (merge gv0 p)), (Permutation (merge p gv0) (merge gv0 gv0)), (Permutation (merge p gv0) (merge gv0 pl)), (Permutation (merge p gv0) (merge pl ql)), (Permutation (merge p gv0) (merge pl q))
(Permutation (merge p gv0) (merge pl p)), (Permutation (merge p gv0) (merge pl gv0)), (Permutation (merge p gv0) (merge pl pl)), (Permutation (merge p gv0) (insert k ql)), (Permutation (merge p gv0) (insert k q)), (Permutation (merge p gv0) (insert k p)), (Permutation (merge p gv0) (insert k gv0)), (Permutation (merge p gv0) (insert k pl)), (Permutation (merge p gv0) (insert a ql)), (Permutation (merge p gv0) (insert a q))
(Permutation (merge p gv0) (insert a p)), (Permutation (merge p gv0) (insert a gv0)), (Permutation (merge p gv0) (insert a pl)), (Permutation (merge p gv0) (maybe_swap ql)), (Permutation (merge p gv0) (maybe_swap q)), (Permutation (merge p gv0) (maybe_swap p)), (Permutation (merge p gv0) (maybe_swap gv0)), (Permutation (merge p gv0) (maybe_swap pl)), (Permutation (merge p gv0) (ql ++ ql)), (Permutation (merge p gv0) (ql ++ q))
(Permutation (merge p gv0) (ql ++ p)), (Permutation (merge p gv0) (ql ++ gv0)), (Permutation (merge p gv0) (ql ++ pl)), (Permutation (merge p gv0) (q ++ ql)), (Permutation (merge p gv0) (q ++ q)), (Permutation (merge p gv0) (q ++ p)), (Permutation (merge p gv0) (q ++ gv0)), (Permutation (merge p gv0) (q ++ pl)), (Permutation (merge p gv0) (p ++ ql)), (Permutation (merge p gv0) (p ++ q))
(Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ gv0)), (Permutation (merge p gv0) (p ++ pl)), (Permutation (merge p gv0) (gv0 ++ ql)), (Permutation (merge p gv0) (gv0 ++ q)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) (gv0 ++ pl)), (Permutation (merge p gv0) (pl ++ ql)), (Permutation (merge p gv0) (pl ++ q))
(Permutation (merge p gv0) (pl ++ p)), (Permutation (merge p gv0) (pl ++ gv0)), (Permutation (merge p gv0) (pl ++ pl)), (Permutation (merge p gv0) []), (Permutation (merge p pl) ql), (Permutation (merge p pl) q), (Permutation (merge p pl) p), (Permutation (merge p pl) gv0), (Permutation (merge p pl) pl), (Permutation (merge p pl) (k :: ql))
(Permutation (merge p pl) (k :: q)), (Permutation (merge p pl) (k :: p)), (Permutation (merge p pl) (k :: gv0)), (Permutation (merge p pl) (k :: pl)), (Permutation (merge p pl) (a :: ql)), (Permutation (merge p pl) (a :: q)), (Permutation (merge p pl) (a :: p)), (Permutation (merge p pl) (a :: gv0)), (Permutation (merge p pl) (a :: pl)), (Permutation (merge p pl) (merge ql ql))
(Permutation (merge p pl) (merge ql q)), (Permutation (merge p pl) (merge ql p)), (Permutation (merge p pl) (merge ql gv0)), (Permutation (merge p pl) (merge ql pl)), (Permutation (merge p pl) (merge q ql)), (Permutation (merge p pl) (merge q q)), (Permutation (merge p pl) (merge q p)), (Permutation (merge p pl) (merge q gv0)), (Permutation (merge p pl) (merge q pl)), (Permutation (merge p pl) (merge p ql))
(Permutation (merge p pl) (merge p q)), (Permutation (merge p pl) (merge p p)), (Permutation (merge p pl) (merge p gv0)), (Permutation (merge p pl) (merge gv0 ql)), (Permutation (merge p pl) (merge gv0 q)), (Permutation (merge p pl) (merge gv0 p)), (Permutation (merge p pl) (merge gv0 gv0)), (Permutation (merge p pl) (merge gv0 pl)), (Permutation (merge p pl) (merge pl ql)), (Permutation (merge p pl) (merge pl q))
(Permutation (merge p pl) (merge pl p)), (Permutation (merge p pl) (merge pl gv0)), (Permutation (merge p pl) (merge pl pl)), (Permutation (merge p pl) (insert k ql)), (Permutation (merge p pl) (insert k q)), (Permutation (merge p pl) (insert k p)), (Permutation (merge p pl) (insert k gv0)), (Permutation (merge p pl) (insert k pl)), (Permutation (merge p pl) (insert a ql)), (Permutation (merge p pl) (insert a q))
(Permutation (merge p pl) (insert a p)), (Permutation (merge p pl) (insert a gv0)), (Permutation (merge p pl) (insert a pl)), (Permutation (merge p pl) (maybe_swap ql)), (Permutation (merge p pl) (maybe_swap q)), (Permutation (merge p pl) (maybe_swap p)), (Permutation (merge p pl) (maybe_swap gv0)), (Permutation (merge p pl) (maybe_swap pl)), (Permutation (merge p pl) (ql ++ ql)), (Permutation (merge p pl) (ql ++ q))
(Permutation (merge p pl) (ql ++ p)), (Permutation (merge p pl) (ql ++ gv0)), (Permutation (merge p pl) (ql ++ pl)), (Permutation (merge p pl) (q ++ ql)), (Permutation (merge p pl) (q ++ q)), (Permutation (merge p pl) (q ++ p)), (Permutation (merge p pl) (q ++ gv0)), (Permutation (merge p pl) (q ++ pl)), (Permutation (merge p pl) (p ++ ql)), (Permutation (merge p pl) (p ++ q))
(Permutation (merge p pl) (p ++ p)), (Permutation (merge p pl) (p ++ gv0)), (Permutation (merge p pl) (p ++ pl)), (Permutation (merge p pl) (gv0 ++ ql)), (Permutation (merge p pl) (gv0 ++ q)), (Permutation (merge p pl) (gv0 ++ p)), (Permutation (merge p pl) (gv0 ++ gv0)), (Permutation (merge p pl) (gv0 ++ pl)), (Permutation (merge p pl) (pl ++ ql)), (Permutation (merge p pl) (pl ++ q))
(Permutation (merge p pl) (pl ++ p)), (Permutation (merge p pl) (pl ++ gv0)), (Permutation (merge p pl) (pl ++ pl)), (Permutation (merge p pl) []), (Permutation (merge gv0 ql) ql), (Permutation (merge gv0 ql) q), (Permutation (merge gv0 ql) p), (Permutation (merge gv0 ql) gv0), (Permutation (merge gv0 ql) pl), (Permutation (merge gv0 ql) (k :: ql))
(Permutation (merge gv0 ql) (k :: q)), (Permutation (merge gv0 ql) (k :: p)), (Permutation (merge gv0 ql) (k :: gv0)), (Permutation (merge gv0 ql) (k :: pl)), (Permutation (merge gv0 ql) (a :: ql)), (Permutation (merge gv0 ql) (a :: q)), (Permutation (merge gv0 ql) (a :: p)), (Permutation (merge gv0 ql) (a :: gv0)), (Permutation (merge gv0 ql) (a :: pl)), (Permutation (merge gv0 ql) (merge ql ql))
(Permutation (merge gv0 ql) (merge ql q)), (Permutation (merge gv0 ql) (merge ql p)), (Permutation (merge gv0 ql) (merge ql gv0)), (Permutation (merge gv0 ql) (merge ql pl)), (Permutation (merge gv0 ql) (merge q ql)), (Permutation (merge gv0 ql) (merge q q)), (Permutation (merge gv0 ql) (merge q p)), (Permutation (merge gv0 ql) (merge q gv0)), (Permutation (merge gv0 ql) (merge q pl)), (Permutation (merge gv0 ql) (merge p ql))
(Permutation (merge gv0 ql) (merge p q)), (Permutation (merge gv0 ql) (merge p p)), (Permutation (merge gv0 ql) (merge p gv0)), (Permutation (merge gv0 ql) (merge p pl)), (Permutation (merge gv0 ql) (merge gv0 q)), (Permutation (merge gv0 ql) (merge gv0 p)), (Permutation (merge gv0 ql) (merge gv0 gv0)), (Permutation (merge gv0 ql) (merge gv0 pl)), (Permutation (merge gv0 ql) (merge pl ql)), (Permutation (merge gv0 ql) (merge pl q))
(Permutation (merge gv0 ql) (merge pl p)), (Permutation (merge gv0 ql) (merge pl gv0)), (Permutation (merge gv0 ql) (merge pl pl)), (Permutation (merge gv0 ql) (insert k ql)), (Permutation (merge gv0 ql) (insert k q)), (Permutation (merge gv0 ql) (insert k p)), (Permutation (merge gv0 ql) (insert k gv0)), (Permutation (merge gv0 ql) (insert k pl)), (Permutation (merge gv0 ql) (insert a ql)), (Permutation (merge gv0 ql) (insert a q))
(Permutation (merge gv0 ql) (insert a p)), (Permutation (merge gv0 ql) (insert a gv0)), (Permutation (merge gv0 ql) (insert a pl)), (Permutation (merge gv0 ql) (maybe_swap ql)), (Permutation (merge gv0 ql) (maybe_swap q)), (Permutation (merge gv0 ql) (maybe_swap p)), (Permutation (merge gv0 ql) (maybe_swap gv0)), (Permutation (merge gv0 ql) (maybe_swap pl)), (Permutation (merge gv0 ql) (ql ++ ql)), (Permutation (merge gv0 ql) (ql ++ q))
(Permutation (merge gv0 ql) (ql ++ p)), (Permutation (merge gv0 ql) (ql ++ gv0)), (Permutation (merge gv0 ql) (ql ++ pl)), (Permutation (merge gv0 ql) (q ++ ql)), (Permutation (merge gv0 ql) (q ++ q)), (Permutation (merge gv0 ql) (q ++ p)), (Permutation (merge gv0 ql) (q ++ gv0)), (Permutation (merge gv0 ql) (q ++ pl)), (Permutation (merge gv0 ql) (p ++ ql)), (Permutation (merge gv0 ql) (p ++ q))
(Permutation (merge gv0 ql) (p ++ p)), (Permutation (merge gv0 ql) (p ++ gv0)), (Permutation (merge gv0 ql) (p ++ pl)), (Permutation (merge gv0 ql) (gv0 ++ ql)), (Permutation (merge gv0 ql) (gv0 ++ q)), (Permutation (merge gv0 ql) (gv0 ++ p)), (Permutation (merge gv0 ql) (gv0 ++ gv0)), (Permutation (merge gv0 ql) (gv0 ++ pl)), (Permutation (merge gv0 ql) (pl ++ ql)), (Permutation (merge gv0 ql) (pl ++ q))
(Permutation (merge gv0 ql) (pl ++ p)), (Permutation (merge gv0 ql) (pl ++ gv0)), (Permutation (merge gv0 ql) (pl ++ pl)), (Permutation (merge gv0 ql) []), (Permutation (merge gv0 q) ql), (Permutation (merge gv0 q) q), (Permutation (merge gv0 q) p), (Permutation (merge gv0 q) gv0), (Permutation (merge gv0 q) pl), (Permutation (merge gv0 q) (k :: ql))
(Permutation (merge gv0 q) (k :: q)), (Permutation (merge gv0 q) (k :: p)), (Permutation (merge gv0 q) (k :: gv0)), (Permutation (merge gv0 q) (k :: pl)), (Permutation (merge gv0 q) (a :: ql)), (Permutation (merge gv0 q) (a :: q)), (Permutation (merge gv0 q) (a :: p)), (Permutation (merge gv0 q) (a :: gv0)), (Permutation (merge gv0 q) (a :: pl)), (Permutation (merge gv0 q) (merge ql ql))
(Permutation (merge gv0 q) (merge ql q)), (Permutation (merge gv0 q) (merge ql p)), (Permutation (merge gv0 q) (merge ql gv0)), (Permutation (merge gv0 q) (merge ql pl)), (Permutation (merge gv0 q) (merge q ql)), (Permutation (merge gv0 q) (merge q q)), (Permutation (merge gv0 q) (merge q p)), (Permutation (merge gv0 q) (merge q gv0)), (Permutation (merge gv0 q) (merge q pl)), (Permutation (merge gv0 q) (merge p ql))
(Permutation (merge gv0 q) (merge p q)), (Permutation (merge gv0 q) (merge p p)), (Permutation (merge gv0 q) (merge p gv0)), (Permutation (merge gv0 q) (merge p pl)), (Permutation (merge gv0 q) (merge gv0 ql)), (Permutation (merge gv0 q) (merge gv0 p)), (Permutation (merge gv0 q) (merge gv0 gv0)), (Permutation (merge gv0 q) (merge gv0 pl)), (Permutation (merge gv0 q) (merge pl ql)), (Permutation (merge gv0 q) (merge pl q))
(Permutation (merge gv0 q) (merge pl p)), (Permutation (merge gv0 q) (merge pl gv0)), (Permutation (merge gv0 q) (merge pl pl)), (Permutation (merge gv0 q) (insert k ql)), (Permutation (merge gv0 q) (insert k q)), (Permutation (merge gv0 q) (insert k p)), (Permutation (merge gv0 q) (insert k gv0)), (Permutation (merge gv0 q) (insert k pl)), (Permutation (merge gv0 q) (insert a ql)), (Permutation (merge gv0 q) (insert a q))
(Permutation (merge gv0 q) (insert a p)), (Permutation (merge gv0 q) (insert a gv0)), (Permutation (merge gv0 q) (insert a pl)), (Permutation (merge gv0 q) (maybe_swap ql)), (Permutation (merge gv0 q) (maybe_swap q)), (Permutation (merge gv0 q) (maybe_swap p)), (Permutation (merge gv0 q) (maybe_swap gv0)), (Permutation (merge gv0 q) (maybe_swap pl)), (Permutation (merge gv0 q) (ql ++ ql)), (Permutation (merge gv0 q) (ql ++ q))
(Permutation (merge gv0 q) (ql ++ p)), (Permutation (merge gv0 q) (ql ++ gv0)), (Permutation (merge gv0 q) (ql ++ pl)), (Permutation (merge gv0 q) (q ++ ql)), (Permutation (merge gv0 q) (q ++ q)), (Permutation (merge gv0 q) (q ++ p)), (Permutation (merge gv0 q) (q ++ gv0)), (Permutation (merge gv0 q) (q ++ pl)), (Permutation (merge gv0 q) (p ++ ql)), (Permutation (merge gv0 q) (p ++ q))
(Permutation (merge gv0 q) (p ++ p)), (Permutation (merge gv0 q) (p ++ gv0)), (Permutation (merge gv0 q) (p ++ pl)), (Permutation (merge gv0 q) (gv0 ++ ql)), (Permutation (merge gv0 q) (gv0 ++ q)), (Permutation (merge gv0 q) (gv0 ++ p)), (Permutation (merge gv0 q) (gv0 ++ gv0)), (Permutation (merge gv0 q) (gv0 ++ pl)), (Permutation (merge gv0 q) (pl ++ ql)), (Permutation (merge gv0 q) (pl ++ q))
(Permutation (merge gv0 q) (pl ++ p)), (Permutation (merge gv0 q) (pl ++ gv0)), (Permutation (merge gv0 q) (pl ++ pl)), (Permutation (merge gv0 q) []), (Permutation (merge gv0 p) ql), (Permutation (merge gv0 p) q), (Permutation (merge gv0 p) p), (Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) pl), (Permutation (merge gv0 p) (k :: ql))
(Permutation (merge gv0 p) (k :: q)), (Permutation (merge gv0 p) (k :: p)), (Permutation (merge gv0 p) (k :: gv0)), (Permutation (merge gv0 p) (k :: pl)), (Permutation (merge gv0 p) (a :: ql)), (Permutation (merge gv0 p) (a :: q)), (Permutation (merge gv0 p) (a :: p)), (Permutation (merge gv0 p) (a :: gv0)), (Permutation (merge gv0 p) (a :: pl)), (Permutation (merge gv0 p) (merge ql ql))
(Permutation (merge gv0 p) (merge ql q)), (Permutation (merge gv0 p) (merge ql p)), (Permutation (merge gv0 p) (merge ql gv0)), (Permutation (merge gv0 p) (merge ql pl)), (Permutation (merge gv0 p) (merge q ql)), (Permutation (merge gv0 p) (merge q q)), (Permutation (merge gv0 p) (merge q p)), (Permutation (merge gv0 p) (merge q gv0)), (Permutation (merge gv0 p) (merge q pl)), (Permutation (merge gv0 p) (merge p ql))
(Permutation (merge gv0 p) (merge p q)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p gv0)), (Permutation (merge gv0 p) (merge p pl)), (Permutation (merge gv0 p) (merge gv0 ql)), (Permutation (merge gv0 p) (merge gv0 q)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (merge gv0 pl)), (Permutation (merge gv0 p) (merge pl ql)), (Permutation (merge gv0 p) (merge pl q))
(Permutation (merge gv0 p) (merge pl p)), (Permutation (merge gv0 p) (merge pl gv0)), (Permutation (merge gv0 p) (merge pl pl)), (Permutation (merge gv0 p) (insert k ql)), (Permutation (merge gv0 p) (insert k q)), (Permutation (merge gv0 p) (insert k p)), (Permutation (merge gv0 p) (insert k gv0)), (Permutation (merge gv0 p) (insert k pl)), (Permutation (merge gv0 p) (insert a ql)), (Permutation (merge gv0 p) (insert a q))
(Permutation (merge gv0 p) (insert a p)), (Permutation (merge gv0 p) (insert a gv0)), (Permutation (merge gv0 p) (insert a pl)), (Permutation (merge gv0 p) (maybe_swap ql)), (Permutation (merge gv0 p) (maybe_swap q)), (Permutation (merge gv0 p) (maybe_swap p)), (Permutation (merge gv0 p) (maybe_swap gv0)), (Permutation (merge gv0 p) (maybe_swap pl)), (Permutation (merge gv0 p) (ql ++ ql)), (Permutation (merge gv0 p) (ql ++ q))
(Permutation (merge gv0 p) (ql ++ p)), (Permutation (merge gv0 p) (ql ++ gv0)), (Permutation (merge gv0 p) (ql ++ pl)), (Permutation (merge gv0 p) (q ++ ql)), (Permutation (merge gv0 p) (q ++ q)), (Permutation (merge gv0 p) (q ++ p)), (Permutation (merge gv0 p) (q ++ gv0)), (Permutation (merge gv0 p) (q ++ pl)), (Permutation (merge gv0 p) (p ++ ql)), (Permutation (merge gv0 p) (p ++ q))
(Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (p ++ pl)), (Permutation (merge gv0 p) (gv0 ++ ql)), (Permutation (merge gv0 p) (gv0 ++ q)), (Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) (gv0 ++ pl)), (Permutation (merge gv0 p) (pl ++ ql)), (Permutation (merge gv0 p) (pl ++ q))
(Permutation (merge gv0 p) (pl ++ p)), (Permutation (merge gv0 p) (pl ++ gv0)), (Permutation (merge gv0 p) (pl ++ pl)), (Permutation (merge gv0 p) []), (Permutation (merge gv0 gv0) ql), (Permutation (merge gv0 gv0) q), (Permutation (merge gv0 gv0) p), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) pl), (Permutation (merge gv0 gv0) (k :: ql))
(Permutation (merge gv0 gv0) (k :: q)), (Permutation (merge gv0 gv0) (k :: p)), (Permutation (merge gv0 gv0) (k :: gv0)), (Permutation (merge gv0 gv0) (k :: pl)), (Permutation (merge gv0 gv0) (a :: ql)), (Permutation (merge gv0 gv0) (a :: q)), (Permutation (merge gv0 gv0) (a :: p)), (Permutation (merge gv0 gv0) (a :: gv0)), (Permutation (merge gv0 gv0) (a :: pl)), (Permutation (merge gv0 gv0) (merge ql ql))
(Permutation (merge gv0 gv0) (merge ql q)), (Permutation (merge gv0 gv0) (merge ql p)), (Permutation (merge gv0 gv0) (merge ql gv0)), (Permutation (merge gv0 gv0) (merge ql pl)), (Permutation (merge gv0 gv0) (merge q ql)), (Permutation (merge gv0 gv0) (merge q q)), (Permutation (merge gv0 gv0) (merge q p)), (Permutation (merge gv0 gv0) (merge q gv0)), (Permutation (merge gv0 gv0) (merge q pl)), (Permutation (merge gv0 gv0) (merge p ql))
(Permutation (merge gv0 gv0) (merge p q)), (Permutation (merge gv0 gv0) (merge p p)), (Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge p pl)), (Permutation (merge gv0 gv0) (merge gv0 ql)), (Permutation (merge gv0 gv0) (merge gv0 q)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (merge gv0 pl)), (Permutation (merge gv0 gv0) (merge pl ql)), (Permutation (merge gv0 gv0) (merge pl q))
(Permutation (merge gv0 gv0) (merge pl p)), (Permutation (merge gv0 gv0) (merge pl gv0)), (Permutation (merge gv0 gv0) (merge pl pl)), (Permutation (merge gv0 gv0) (insert k ql)), (Permutation (merge gv0 gv0) (insert k q)), (Permutation (merge gv0 gv0) (insert k p)), (Permutation (merge gv0 gv0) (insert k gv0)), (Permutation (merge gv0 gv0) (insert k pl)), (Permutation (merge gv0 gv0) (insert a ql)), (Permutation (merge gv0 gv0) (insert a q))
(Permutation (merge gv0 gv0) (insert a p)), (Permutation (merge gv0 gv0) (insert a gv0)), (Permutation (merge gv0 gv0) (insert a pl)), (Permutation (merge gv0 gv0) (maybe_swap ql)), (Permutation (merge gv0 gv0) (maybe_swap q)), (Permutation (merge gv0 gv0) (maybe_swap p)), (Permutation (merge gv0 gv0) (maybe_swap gv0)), (Permutation (merge gv0 gv0) (maybe_swap pl)), (Permutation (merge gv0 gv0) (ql ++ ql)), (Permutation (merge gv0 gv0) (ql ++ q))
(Permutation (merge gv0 gv0) (ql ++ p)), (Permutation (merge gv0 gv0) (ql ++ gv0)), (Permutation (merge gv0 gv0) (ql ++ pl)), (Permutation (merge gv0 gv0) (q ++ ql)), (Permutation (merge gv0 gv0) (q ++ q)), (Permutation (merge gv0 gv0) (q ++ p)), (Permutation (merge gv0 gv0) (q ++ gv0)), (Permutation (merge gv0 gv0) (q ++ pl)), (Permutation (merge gv0 gv0) (p ++ ql)), (Permutation (merge gv0 gv0) (p ++ q))
(Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ gv0)), (Permutation (merge gv0 gv0) (p ++ pl)), (Permutation (merge gv0 gv0) (gv0 ++ ql)), (Permutation (merge gv0 gv0) (gv0 ++ q)), (Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ pl)), (Permutation (merge gv0 gv0) (pl ++ ql)), (Permutation (merge gv0 gv0) (pl ++ q))
(Permutation (merge gv0 gv0) (pl ++ p)), (Permutation (merge gv0 gv0) (pl ++ gv0)), (Permutation (merge gv0 gv0) (pl ++ pl)), (Permutation (merge gv0 gv0) []), (Permutation (merge gv0 pl) ql), (Permutation (merge gv0 pl) q), (Permutation (merge gv0 pl) p), (Permutation (merge gv0 pl) gv0), (Permutation (merge gv0 pl) pl), (Permutation (merge gv0 pl) (k :: ql))
(Permutation (merge gv0 pl) (k :: q)), (Permutation (merge gv0 pl) (k :: p)), (Permutation (merge gv0 pl) (k :: gv0)), (Permutation (merge gv0 pl) (k :: pl)), (Permutation (merge gv0 pl) (a :: ql)), (Permutation (merge gv0 pl) (a :: q)), (Permutation (merge gv0 pl) (a :: p)), (Permutation (merge gv0 pl) (a :: gv0)), (Permutation (merge gv0 pl) (a :: pl)), (Permutation (merge gv0 pl) (merge ql ql))
(Permutation (merge gv0 pl) (merge ql q)), (Permutation (merge gv0 pl) (merge ql p)), (Permutation (merge gv0 pl) (merge ql gv0)), (Permutation (merge gv0 pl) (merge ql pl)), (Permutation (merge gv0 pl) (merge q ql)), (Permutation (merge gv0 pl) (merge q q)), (Permutation (merge gv0 pl) (merge q p)), (Permutation (merge gv0 pl) (merge q gv0)), (Permutation (merge gv0 pl) (merge q pl)), (Permutation (merge gv0 pl) (merge p ql))
(Permutation (merge gv0 pl) (merge p q)), (Permutation (merge gv0 pl) (merge p p)), (Permutation (merge gv0 pl) (merge p gv0)), (Permutation (merge gv0 pl) (merge p pl)), (Permutation (merge gv0 pl) (merge gv0 ql)), (Permutation (merge gv0 pl) (merge gv0 q)), (Permutation (merge gv0 pl) (merge gv0 p)), (Permutation (merge gv0 pl) (merge gv0 gv0)), (Permutation (merge gv0 pl) (merge pl ql)), (Permutation (merge gv0 pl) (merge pl q))
(Permutation (merge gv0 pl) (merge pl p)), (Permutation (merge gv0 pl) (merge pl gv0)), (Permutation (merge gv0 pl) (merge pl pl)), (Permutation (merge gv0 pl) (insert k ql)), (Permutation (merge gv0 pl) (insert k q)), (Permutation (merge gv0 pl) (insert k p)), (Permutation (merge gv0 pl) (insert k gv0)), (Permutation (merge gv0 pl) (insert k pl)), (Permutation (merge gv0 pl) (insert a ql)), (Permutation (merge gv0 pl) (insert a q))
(Permutation (merge gv0 pl) (insert a p)), (Permutation (merge gv0 pl) (insert a gv0)), (Permutation (merge gv0 pl) (insert a pl)), (Permutation (merge gv0 pl) (maybe_swap ql)), (Permutation (merge gv0 pl) (maybe_swap q)), (Permutation (merge gv0 pl) (maybe_swap p)), (Permutation (merge gv0 pl) (maybe_swap gv0)), (Permutation (merge gv0 pl) (maybe_swap pl)), (Permutation (merge gv0 pl) (ql ++ ql)), (Permutation (merge gv0 pl) (ql ++ q))
(Permutation (merge gv0 pl) (ql ++ p)), (Permutation (merge gv0 pl) (ql ++ gv0)), (Permutation (merge gv0 pl) (ql ++ pl)), (Permutation (merge gv0 pl) (q ++ ql)), (Permutation (merge gv0 pl) (q ++ q)), (Permutation (merge gv0 pl) (q ++ p)), (Permutation (merge gv0 pl) (q ++ gv0)), (Permutation (merge gv0 pl) (q ++ pl)), (Permutation (merge gv0 pl) (p ++ ql)), (Permutation (merge gv0 pl) (p ++ q))
(Permutation (merge gv0 pl) (p ++ p)), (Permutation (merge gv0 pl) (p ++ gv0)), (Permutation (merge gv0 pl) (p ++ pl)), (Permutation (merge gv0 pl) (gv0 ++ ql)), (Permutation (merge gv0 pl) (gv0 ++ q)), (Permutation (merge gv0 pl) (gv0 ++ p)), (Permutation (merge gv0 pl) (gv0 ++ gv0)), (Permutation (merge gv0 pl) (gv0 ++ pl)), (Permutation (merge gv0 pl) (pl ++ ql)), (Permutation (merge gv0 pl) (pl ++ q))
(Permutation (merge gv0 pl) (pl ++ p)), (Permutation (merge gv0 pl) (pl ++ gv0)), (Permutation (merge gv0 pl) (pl ++ pl)), (Permutation (merge gv0 pl) []), (Permutation (merge pl ql) ql), (Permutation (merge pl ql) q), (Permutation (merge pl ql) p), (Permutation (merge pl ql) gv0), (Permutation (merge pl ql) pl), (Permutation (merge pl ql) (k :: ql))
(Permutation (merge pl ql) (k :: q)), (Permutation (merge pl ql) (k :: p)), (Permutation (merge pl ql) (k :: gv0)), (Permutation (merge pl ql) (k :: pl)), (Permutation (merge pl ql) (a :: ql)), (Permutation (merge pl ql) (a :: q)), (Permutation (merge pl ql) (a :: p)), (Permutation (merge pl ql) (a :: gv0)), (Permutation (merge pl ql) (a :: pl)), (Permutation (merge pl ql) (merge ql ql))
(Permutation (merge pl ql) (merge ql q)), (Permutation (merge pl ql) (merge ql p)), (Permutation (merge pl ql) (merge ql gv0)), (Permutation (merge pl ql) (merge ql pl)), (Permutation (merge pl ql) (merge q ql)), (Permutation (merge pl ql) (merge q q)), (Permutation (merge pl ql) (merge q p)), (Permutation (merge pl ql) (merge q gv0)), (Permutation (merge pl ql) (merge q pl)), (Permutation (merge pl ql) (merge p ql))
(Permutation (merge pl ql) (merge p q)), (Permutation (merge pl ql) (merge p p)), (Permutation (merge pl ql) (merge p gv0)), (Permutation (merge pl ql) (merge p pl)), (Permutation (merge pl ql) (merge gv0 ql)), (Permutation (merge pl ql) (merge gv0 q)), (Permutation (merge pl ql) (merge gv0 p)), (Permutation (merge pl ql) (merge gv0 gv0)), (Permutation (merge pl ql) (merge gv0 pl)), (Permutation (merge pl ql) (merge pl q))
(Permutation (merge pl ql) (merge pl p)), (Permutation (merge pl ql) (merge pl gv0)), (Permutation (merge pl ql) (merge pl pl)), (Permutation (merge pl ql) (insert k ql)), (Permutation (merge pl ql) (insert k q)), (Permutation (merge pl ql) (insert k p)), (Permutation (merge pl ql) (insert k gv0)), (Permutation (merge pl ql) (insert k pl)), (Permutation (merge pl ql) (insert a ql)), (Permutation (merge pl ql) (insert a q))
(Permutation (merge pl ql) (insert a p)), (Permutation (merge pl ql) (insert a gv0)), (Permutation (merge pl ql) (insert a pl)), (Permutation (merge pl ql) (maybe_swap ql)), (Permutation (merge pl ql) (maybe_swap q)), (Permutation (merge pl ql) (maybe_swap p)), (Permutation (merge pl ql) (maybe_swap gv0)), (Permutation (merge pl ql) (maybe_swap pl)), (Permutation (merge pl ql) (ql ++ ql)), (Permutation (merge pl ql) (ql ++ q))
(Permutation (merge pl ql) (ql ++ p)), (Permutation (merge pl ql) (ql ++ gv0)), (Permutation (merge pl ql) (ql ++ pl)), (Permutation (merge pl ql) (q ++ ql)), (Permutation (merge pl ql) (q ++ q)), (Permutation (merge pl ql) (q ++ p)), (Permutation (merge pl ql) (q ++ gv0)), (Permutation (merge pl ql) (q ++ pl)), (Permutation (merge pl ql) (p ++ ql)), (Permutation (merge pl ql) (p ++ q))
(Permutation (merge pl ql) (p ++ p)), (Permutation (merge pl ql) (p ++ gv0)), (Permutation (merge pl ql) (p ++ pl)), (Permutation (merge pl ql) (gv0 ++ ql)), (Permutation (merge pl ql) (gv0 ++ q)), (Permutation (merge pl ql) (gv0 ++ p)), (Permutation (merge pl ql) (gv0 ++ gv0)), (Permutation (merge pl ql) (gv0 ++ pl)), (Permutation (merge pl ql) (pl ++ ql)), (Permutation (merge pl ql) (pl ++ q))
(Permutation (merge pl ql) (pl ++ p)), (Permutation (merge pl ql) (pl ++ gv0)), (Permutation (merge pl ql) (pl ++ pl)), (Permutation (merge pl ql) []), (Permutation (merge pl q) ql), (Permutation (merge pl q) q), (Permutation (merge pl q) p), (Permutation (merge pl q) gv0), (Permutation (merge pl q) pl), (Permutation (merge pl q) (k :: ql))
(Permutation (merge pl q) (k :: q)), (Permutation (merge pl q) (k :: p)), (Permutation (merge pl q) (k :: gv0)), (Permutation (merge pl q) (k :: pl)), (Permutation (merge pl q) (a :: ql)), (Permutation (merge pl q) (a :: q)), (Permutation (merge pl q) (a :: p)), (Permutation (merge pl q) (a :: gv0)), (Permutation (merge pl q) (a :: pl)), (Permutation (merge pl q) (merge ql ql))
(Permutation (merge pl q) (merge ql q)), (Permutation (merge pl q) (merge ql p)), (Permutation (merge pl q) (merge ql gv0)), (Permutation (merge pl q) (merge ql pl)), (Permutation (merge pl q) (merge q ql)), (Permutation (merge pl q) (merge q q)), (Permutation (merge pl q) (merge q p)), (Permutation (merge pl q) (merge q gv0)), (Permutation (merge pl q) (merge q pl)), (Permutation (merge pl q) (merge p ql))
(Permutation (merge pl q) (merge p q)), (Permutation (merge pl q) (merge p p)), (Permutation (merge pl q) (merge p gv0)), (Permutation (merge pl q) (merge p pl)), (Permutation (merge pl q) (merge gv0 ql)), (Permutation (merge pl q) (merge gv0 q)), (Permutation (merge pl q) (merge gv0 p)), (Permutation (merge pl q) (merge gv0 gv0)), (Permutation (merge pl q) (merge gv0 pl)), (Permutation (merge pl q) (merge pl ql))
(Permutation (merge pl q) (merge pl p)), (Permutation (merge pl q) (merge pl gv0)), (Permutation (merge pl q) (merge pl pl)), (Permutation (merge pl q) (insert k ql)), (Permutation (merge pl q) (insert k q)), (Permutation (merge pl q) (insert k p)), (Permutation (merge pl q) (insert k gv0)), (Permutation (merge pl q) (insert k pl)), (Permutation (merge pl q) (insert a ql)), (Permutation (merge pl q) (insert a q))
(Permutation (merge pl q) (insert a p)), (Permutation (merge pl q) (insert a gv0)), (Permutation (merge pl q) (insert a pl)), (Permutation (merge pl q) (maybe_swap ql)), (Permutation (merge pl q) (maybe_swap q)), (Permutation (merge pl q) (maybe_swap p)), (Permutation (merge pl q) (maybe_swap gv0)), (Permutation (merge pl q) (maybe_swap pl)), (Permutation (merge pl q) (ql ++ ql)), (Permutation (merge pl q) (ql ++ q))
(Permutation (merge pl q) (ql ++ p)), (Permutation (merge pl q) (ql ++ gv0)), (Permutation (merge pl q) (ql ++ pl)), (Permutation (merge pl q) (q ++ ql)), (Permutation (merge pl q) (q ++ q)), (Permutation (merge pl q) (q ++ p)), (Permutation (merge pl q) (q ++ gv0)), (Permutation (merge pl q) (q ++ pl)), (Permutation (merge pl q) (p ++ ql)), (Permutation (merge pl q) (p ++ q))
(Permutation (merge pl q) (p ++ p)), (Permutation (merge pl q) (p ++ gv0)), (Permutation (merge pl q) (p ++ pl)), (Permutation (merge pl q) (gv0 ++ ql)), (Permutation (merge pl q) (gv0 ++ q)), (Permutation (merge pl q) (gv0 ++ p)), (Permutation (merge pl q) (gv0 ++ gv0)), (Permutation (merge pl q) (gv0 ++ pl)), (Permutation (merge pl q) (pl ++ ql)), (Permutation (merge pl q) (pl ++ q))
(Permutation (merge pl q) (pl ++ p)), (Permutation (merge pl q) (pl ++ gv0)), (Permutation (merge pl q) (pl ++ pl)), (Permutation (merge pl q) []), (Permutation (merge pl p) ql), (Permutation (merge pl p) q), (Permutation (merge pl p) p), (Permutation (merge pl p) gv0), (Permutation (merge pl p) pl), (Permutation (merge pl p) (k :: ql))
(Permutation (merge pl p) (k :: q)), (Permutation (merge pl p) (k :: p)), (Permutation (merge pl p) (k :: gv0)), (Permutation (merge pl p) (k :: pl)), (Permutation (merge pl p) (a :: ql)), (Permutation (merge pl p) (a :: q)), (Permutation (merge pl p) (a :: p)), (Permutation (merge pl p) (a :: gv0)), (Permutation (merge pl p) (a :: pl)), (Permutation (merge pl p) (merge ql ql))
(Permutation (merge pl p) (merge ql q)), (Permutation (merge pl p) (merge ql p)), (Permutation (merge pl p) (merge ql gv0)), (Permutation (merge pl p) (merge ql pl)), (Permutation (merge pl p) (merge q ql)), (Permutation (merge pl p) (merge q q)), (Permutation (merge pl p) (merge q p)), (Permutation (merge pl p) (merge q gv0)), (Permutation (merge pl p) (merge q pl)), (Permutation (merge pl p) (merge p ql))
(Permutation (merge pl p) (merge p q)), (Permutation (merge pl p) (merge p p)), (Permutation (merge pl p) (merge p gv0)), (Permutation (merge pl p) (merge p pl)), (Permutation (merge pl p) (merge gv0 ql)), (Permutation (merge pl p) (merge gv0 q)), (Permutation (merge pl p) (merge gv0 p)), (Permutation (merge pl p) (merge gv0 gv0)), (Permutation (merge pl p) (merge gv0 pl)), (Permutation (merge pl p) (merge pl ql))
(Permutation (merge pl p) (merge pl q)), (Permutation (merge pl p) (merge pl gv0)), (Permutation (merge pl p) (merge pl pl)), (Permutation (merge pl p) (insert k ql)), (Permutation (merge pl p) (insert k q)), (Permutation (merge pl p) (insert k p)), (Permutation (merge pl p) (insert k gv0)), (Permutation (merge pl p) (insert k pl)), (Permutation (merge pl p) (insert a ql)), (Permutation (merge pl p) (insert a q))
(Permutation (merge pl p) (insert a p)), (Permutation (merge pl p) (insert a gv0)), (Permutation (merge pl p) (insert a pl)), (Permutation (merge pl p) (maybe_swap ql)), (Permutation (merge pl p) (maybe_swap q)), (Permutation (merge pl p) (maybe_swap p)), (Permutation (merge pl p) (maybe_swap gv0)), (Permutation (merge pl p) (maybe_swap pl)), (Permutation (merge pl p) (ql ++ ql)), (Permutation (merge pl p) (ql ++ q))
(Permutation (merge pl p) (ql ++ p)), (Permutation (merge pl p) (ql ++ gv0)), (Permutation (merge pl p) (ql ++ pl)), (Permutation (merge pl p) (q ++ ql)), (Permutation (merge pl p) (q ++ q)), (Permutation (merge pl p) (q ++ p)), (Permutation (merge pl p) (q ++ gv0)), (Permutation (merge pl p) (q ++ pl)), (Permutation (merge pl p) (p ++ ql)), (Permutation (merge pl p) (p ++ q))
(Permutation (merge pl p) (p ++ p)), (Permutation (merge pl p) (p ++ gv0)), (Permutation (merge pl p) (p ++ pl)), (Permutation (merge pl p) (gv0 ++ ql)), (Permutation (merge pl p) (gv0 ++ q)), (Permutation (merge pl p) (gv0 ++ p)), (Permutation (merge pl p) (gv0 ++ gv0)), (Permutation (merge pl p) (gv0 ++ pl)), (Permutation (merge pl p) (pl ++ ql)), (Permutation (merge pl p) (pl ++ q))
(Permutation (merge pl p) (pl ++ p)), (Permutation (merge pl p) (pl ++ gv0)), (Permutation (merge pl p) (pl ++ pl)), (Permutation (merge pl p) []), (Permutation (merge pl gv0) ql), (Permutation (merge pl gv0) q), (Permutation (merge pl gv0) p), (Permutation (merge pl gv0) gv0), (Permutation (merge pl gv0) pl), (Permutation (merge pl gv0) (k :: ql))
(Permutation (merge pl gv0) (k :: q)), (Permutation (merge pl gv0) (k :: p)), (Permutation (merge pl gv0) (k :: gv0)), (Permutation (merge pl gv0) (k :: pl)), (Permutation (merge pl gv0) (a :: ql)), (Permutation (merge pl gv0) (a :: q)), (Permutation (merge pl gv0) (a :: p)), (Permutation (merge pl gv0) (a :: gv0)), (Permutation (merge pl gv0) (a :: pl)), (Permutation (merge pl gv0) (merge ql ql))
(Permutation (merge pl gv0) (merge ql q)), (Permutation (merge pl gv0) (merge ql p)), (Permutation (merge pl gv0) (merge ql gv0)), (Permutation (merge pl gv0) (merge ql pl)), (Permutation (merge pl gv0) (merge q ql)), (Permutation (merge pl gv0) (merge q q)), (Permutation (merge pl gv0) (merge q p)), (Permutation (merge pl gv0) (merge q gv0)), (Permutation (merge pl gv0) (merge q pl)), (Permutation (merge pl gv0) (merge p ql))
(Permutation (merge pl gv0) (merge p q)), (Permutation (merge pl gv0) (merge p p)), (Permutation (merge pl gv0) (merge p gv0)), (Permutation (merge pl gv0) (merge p pl)), (Permutation (merge pl gv0) (merge gv0 ql)), (Permutation (merge pl gv0) (merge gv0 q)), (Permutation (merge pl gv0) (merge gv0 p)), (Permutation (merge pl gv0) (merge gv0 gv0)), (Permutation (merge pl gv0) (merge gv0 pl)), (Permutation (merge pl gv0) (merge pl ql))
(Permutation (merge pl gv0) (merge pl q)), (Permutation (merge pl gv0) (merge pl p)), (Permutation (merge pl gv0) (merge pl pl)), (Permutation (merge pl gv0) (insert k ql)), (Permutation (merge pl gv0) (insert k q)), (Permutation (merge pl gv0) (insert k p)), (Permutation (merge pl gv0) (insert k gv0)), (Permutation (merge pl gv0) (insert k pl)), (Permutation (merge pl gv0) (insert a ql)), (Permutation (merge pl gv0) (insert a q))
(Permutation (merge pl gv0) (insert a p)), (Permutation (merge pl gv0) (insert a gv0)), (Permutation (merge pl gv0) (insert a pl)), (Permutation (merge pl gv0) (maybe_swap ql)), (Permutation (merge pl gv0) (maybe_swap q)), (Permutation (merge pl gv0) (maybe_swap p)), (Permutation (merge pl gv0) (maybe_swap gv0)), (Permutation (merge pl gv0) (maybe_swap pl)), (Permutation (merge pl gv0) (ql ++ ql)), (Permutation (merge pl gv0) (ql ++ q))
(Permutation (merge pl gv0) (ql ++ p)), (Permutation (merge pl gv0) (ql ++ gv0)), (Permutation (merge pl gv0) (ql ++ pl)), (Permutation (merge pl gv0) (q ++ ql)), (Permutation (merge pl gv0) (q ++ q)), (Permutation (merge pl gv0) (q ++ p)), (Permutation (merge pl gv0) (q ++ gv0)), (Permutation (merge pl gv0) (q ++ pl)), (Permutation (merge pl gv0) (p ++ ql)), (Permutation (merge pl gv0) (p ++ q))
(Permutation (merge pl gv0) (p ++ p)), (Permutation (merge pl gv0) (p ++ gv0)), (Permutation (merge pl gv0) (p ++ pl)), (Permutation (merge pl gv0) (gv0 ++ ql)), (Permutation (merge pl gv0) (gv0 ++ q)), (Permutation (merge pl gv0) (gv0 ++ p)), (Permutation (merge pl gv0) (gv0 ++ gv0)), (Permutation (merge pl gv0) (gv0 ++ pl)), (Permutation (merge pl gv0) (pl ++ ql)), (Permutation (merge pl gv0) (pl ++ q))
(Permutation (merge pl gv0) (pl ++ p)), (Permutation (merge pl gv0) (pl ++ gv0)), (Permutation (merge pl gv0) (pl ++ pl)), (Permutation (merge pl gv0) []), (Permutation (merge pl pl) ql), (Permutation (merge pl pl) q), (Permutation (merge pl pl) p), (Permutation (merge pl pl) gv0), (Permutation (merge pl pl) pl), (Permutation (merge pl pl) (k :: ql))
(Permutation (merge pl pl) (k :: q)), (Permutation (merge pl pl) (k :: p)), (Permutation (merge pl pl) (k :: gv0)), (Permutation (merge pl pl) (k :: pl)), (Permutation (merge pl pl) (a :: ql)), (Permutation (merge pl pl) (a :: q)), (Permutation (merge pl pl) (a :: p)), (Permutation (merge pl pl) (a :: gv0)), (Permutation (merge pl pl) (a :: pl)), (Permutation (merge pl pl) (merge ql ql))
(Permutation (merge pl pl) (merge ql q)), (Permutation (merge pl pl) (merge ql p)), (Permutation (merge pl pl) (merge ql gv0)), (Permutation (merge pl pl) (merge ql pl)), (Permutation (merge pl pl) (merge q ql)), (Permutation (merge pl pl) (merge q q)), (Permutation (merge pl pl) (merge q p)), (Permutation (merge pl pl) (merge q gv0)), (Permutation (merge pl pl) (merge q pl)), (Permutation (merge pl pl) (merge p ql))
(Permutation (merge pl pl) (merge p q)), (Permutation (merge pl pl) (merge p p)), (Permutation (merge pl pl) (merge p gv0)), (Permutation (merge pl pl) (merge p pl)), (Permutation (merge pl pl) (merge gv0 ql)), (Permutation (merge pl pl) (merge gv0 q)), (Permutation (merge pl pl) (merge gv0 p)), (Permutation (merge pl pl) (merge gv0 gv0)), (Permutation (merge pl pl) (merge gv0 pl)), (Permutation (merge pl pl) (merge pl ql))
(Permutation (merge pl pl) (merge pl q)), (Permutation (merge pl pl) (merge pl p)), (Permutation (merge pl pl) (merge pl gv0)), (Permutation (merge pl pl) (insert k ql)), (Permutation (merge pl pl) (insert k q)), (Permutation (merge pl pl) (insert k p)), (Permutation (merge pl pl) (insert k gv0)), (Permutation (merge pl pl) (insert k pl)), (Permutation (merge pl pl) (insert a ql)), (Permutation (merge pl pl) (insert a q))
(Permutation (merge pl pl) (insert a p)), (Permutation (merge pl pl) (insert a gv0)), (Permutation (merge pl pl) (insert a pl)), (Permutation (merge pl pl) (maybe_swap ql)), (Permutation (merge pl pl) (maybe_swap q)), (Permutation (merge pl pl) (maybe_swap p)), (Permutation (merge pl pl) (maybe_swap gv0)), (Permutation (merge pl pl) (maybe_swap pl)), (Permutation (merge pl pl) (ql ++ ql)), (Permutation (merge pl pl) (ql ++ q))
(Permutation (merge pl pl) (ql ++ p)), (Permutation (merge pl pl) (ql ++ gv0)), (Permutation (merge pl pl) (ql ++ pl)), (Permutation (merge pl pl) (q ++ ql)), (Permutation (merge pl pl) (q ++ q)), (Permutation (merge pl pl) (q ++ p)), (Permutation (merge pl pl) (q ++ gv0)), (Permutation (merge pl pl) (q ++ pl)), (Permutation (merge pl pl) (p ++ ql)), (Permutation (merge pl pl) (p ++ q))
(Permutation (merge pl pl) (p ++ p)), (Permutation (merge pl pl) (p ++ gv0)), (Permutation (merge pl pl) (p ++ pl)), (Permutation (merge pl pl) (gv0 ++ ql)), (Permutation (merge pl pl) (gv0 ++ q)), (Permutation (merge pl pl) (gv0 ++ p)), (Permutation (merge pl pl) (gv0 ++ gv0)), (Permutation (merge pl pl) (gv0 ++ pl)), (Permutation (merge pl pl) (pl ++ ql)), (Permutation (merge pl pl) (pl ++ q))
(Permutation (merge pl pl) (pl ++ p)), (Permutation (merge pl pl) (pl ++ gv0)), (Permutation (merge pl pl) (pl ++ pl)), (Permutation (merge pl pl) []), (Permutation (insert k ql) ql), (Permutation (insert k ql) q), (Permutation (insert k ql) p), (Permutation (insert k ql) gv0), (Permutation (insert k ql) pl), (Permutation (insert k ql) (k :: ql))
(Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (k :: gv0)), (Permutation (insert k ql) (k :: pl)), (Permutation (insert k ql) (a :: ql)), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (a :: gv0)), (Permutation (insert k ql) (a :: pl)), (Permutation (insert k ql) (merge ql ql))
(Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge ql gv0)), (Permutation (insert k ql) (merge ql pl)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge q gv0)), (Permutation (insert k ql) (merge q pl)), (Permutation (insert k ql) (merge p ql))
(Permutation (insert k ql) (merge p q)), (Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (merge p gv0)), (Permutation (insert k ql) (merge p pl)), (Permutation (insert k ql) (merge gv0 ql)), (Permutation (insert k ql) (merge gv0 q)), (Permutation (insert k ql) (merge gv0 p)), (Permutation (insert k ql) (merge gv0 gv0)), (Permutation (insert k ql) (merge gv0 pl)), (Permutation (insert k ql) (merge pl ql))
(Permutation (insert k ql) (merge pl q)), (Permutation (insert k ql) (merge pl p)), (Permutation (insert k ql) (merge pl gv0)), (Permutation (insert k ql) (merge pl pl)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert k gv0)), (Permutation (insert k ql) (insert k pl)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a q))
(Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (insert a gv0)), (Permutation (insert k ql) (insert a pl)), (Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap p)), (Permutation (insert k ql) (maybe_swap gv0)), (Permutation (insert k ql) (maybe_swap pl)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ q))
(Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (ql ++ gv0)), (Permutation (insert k ql) (ql ++ pl)), (Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (q ++ gv0)), (Permutation (insert k ql) (q ++ pl)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ q))
(Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) (p ++ gv0)), (Permutation (insert k ql) (p ++ pl)), (Permutation (insert k ql) (gv0 ++ ql)), (Permutation (insert k ql) (gv0 ++ q)), (Permutation (insert k ql) (gv0 ++ p)), (Permutation (insert k ql) (gv0 ++ gv0)), (Permutation (insert k ql) (gv0 ++ pl)), (Permutation (insert k ql) (pl ++ ql)), (Permutation (insert k ql) (pl ++ q))
(Permutation (insert k ql) (pl ++ p)), (Permutation (insert k ql) (pl ++ gv0)), (Permutation (insert k ql) (pl ++ pl)), (Permutation (insert k ql) []), (Permutation (insert k q) ql), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) gv0), (Permutation (insert k q) pl), (Permutation (insert k q) (k :: ql))
(Permutation (insert k q) (k :: q)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: gv0)), (Permutation (insert k q) (k :: pl)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: gv0)), (Permutation (insert k q) (a :: pl)), (Permutation (insert k q) (merge ql ql))
(Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge ql gv0)), (Permutation (insert k q) (merge ql pl)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q gv0)), (Permutation (insert k q) (merge q pl)), (Permutation (insert k q) (merge p ql))
(Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (merge p gv0)), (Permutation (insert k q) (merge p pl)), (Permutation (insert k q) (merge gv0 ql)), (Permutation (insert k q) (merge gv0 q)), (Permutation (insert k q) (merge gv0 p)), (Permutation (insert k q) (merge gv0 gv0)), (Permutation (insert k q) (merge gv0 pl)), (Permutation (insert k q) (merge pl ql))
(Permutation (insert k q) (merge pl q)), (Permutation (insert k q) (merge pl p)), (Permutation (insert k q) (merge pl gv0)), (Permutation (insert k q) (merge pl pl)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k gv0)), (Permutation (insert k q) (insert k pl)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a gv0)), (Permutation (insert k q) (insert a pl)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap gv0)), (Permutation (insert k q) (maybe_swap pl)), (Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ q))
(Permutation (insert k q) (ql ++ p)), (Permutation (insert k q) (ql ++ gv0)), (Permutation (insert k q) (ql ++ pl)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (q ++ gv0)), (Permutation (insert k q) (q ++ pl)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ q))
(Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ gv0)), (Permutation (insert k q) (p ++ pl)), (Permutation (insert k q) (gv0 ++ ql)), (Permutation (insert k q) (gv0 ++ q)), (Permutation (insert k q) (gv0 ++ p)), (Permutation (insert k q) (gv0 ++ gv0)), (Permutation (insert k q) (gv0 ++ pl)), (Permutation (insert k q) (pl ++ ql)), (Permutation (insert k q) (pl ++ q))
(Permutation (insert k q) (pl ++ p)), (Permutation (insert k q) (pl ++ gv0)), (Permutation (insert k q) (pl ++ pl)), (Permutation (insert k q) []), (Permutation (insert k p) ql), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) gv0), (Permutation (insert k p) pl), (Permutation (insert k p) (k :: ql))
(Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: gv0)), (Permutation (insert k p) (k :: pl)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: gv0)), (Permutation (insert k p) (a :: pl)), (Permutation (insert k p) (merge ql ql))
(Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge ql gv0)), (Permutation (insert k p) (merge ql pl)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q gv0)), (Permutation (insert k p) (merge q pl)), (Permutation (insert k p) (merge p ql))
(Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p gv0)), (Permutation (insert k p) (merge p pl)), (Permutation (insert k p) (merge gv0 ql)), (Permutation (insert k p) (merge gv0 q)), (Permutation (insert k p) (merge gv0 p)), (Permutation (insert k p) (merge gv0 gv0)), (Permutation (insert k p) (merge gv0 pl)), (Permutation (insert k p) (merge pl ql))
(Permutation (insert k p) (merge pl q)), (Permutation (insert k p) (merge pl p)), (Permutation (insert k p) (merge pl gv0)), (Permutation (insert k p) (merge pl pl)), (Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k gv0)), (Permutation (insert k p) (insert k pl)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a q))
(Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a gv0)), (Permutation (insert k p) (insert a pl)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap gv0)), (Permutation (insert k p) (maybe_swap pl)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ q))
(Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (ql ++ gv0)), (Permutation (insert k p) (ql ++ pl)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ gv0)), (Permutation (insert k p) (q ++ pl)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ q))
(Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ gv0)), (Permutation (insert k p) (p ++ pl)), (Permutation (insert k p) (gv0 ++ ql)), (Permutation (insert k p) (gv0 ++ q)), (Permutation (insert k p) (gv0 ++ p)), (Permutation (insert k p) (gv0 ++ gv0)), (Permutation (insert k p) (gv0 ++ pl)), (Permutation (insert k p) (pl ++ ql)), (Permutation (insert k p) (pl ++ q))
(Permutation (insert k p) (pl ++ p)), (Permutation (insert k p) (pl ++ gv0)), (Permutation (insert k p) (pl ++ pl)), (Permutation (insert k p) []), (Permutation (insert k gv0) ql), (Permutation (insert k gv0) q), (Permutation (insert k gv0) p), (Permutation (insert k gv0) gv0), (Permutation (insert k gv0) pl), (Permutation (insert k gv0) (k :: ql))
(Permutation (insert k gv0) (k :: q)), (Permutation (insert k gv0) (k :: p)), (Permutation (insert k gv0) (k :: gv0)), (Permutation (insert k gv0) (k :: pl)), (Permutation (insert k gv0) (a :: ql)), (Permutation (insert k gv0) (a :: q)), (Permutation (insert k gv0) (a :: p)), (Permutation (insert k gv0) (a :: gv0)), (Permutation (insert k gv0) (a :: pl)), (Permutation (insert k gv0) (merge ql ql))
(Permutation (insert k gv0) (merge ql q)), (Permutation (insert k gv0) (merge ql p)), (Permutation (insert k gv0) (merge ql gv0)), (Permutation (insert k gv0) (merge ql pl)), (Permutation (insert k gv0) (merge q ql)), (Permutation (insert k gv0) (merge q q)), (Permutation (insert k gv0) (merge q p)), (Permutation (insert k gv0) (merge q gv0)), (Permutation (insert k gv0) (merge q pl)), (Permutation (insert k gv0) (merge p ql))
(Permutation (insert k gv0) (merge p q)), (Permutation (insert k gv0) (merge p p)), (Permutation (insert k gv0) (merge p gv0)), (Permutation (insert k gv0) (merge p pl)), (Permutation (insert k gv0) (merge gv0 ql)), (Permutation (insert k gv0) (merge gv0 q)), (Permutation (insert k gv0) (merge gv0 p)), (Permutation (insert k gv0) (merge gv0 gv0)), (Permutation (insert k gv0) (merge gv0 pl)), (Permutation (insert k gv0) (merge pl ql))
(Permutation (insert k gv0) (merge pl q)), (Permutation (insert k gv0) (merge pl p)), (Permutation (insert k gv0) (merge pl gv0)), (Permutation (insert k gv0) (merge pl pl)), (Permutation (insert k gv0) (insert k ql)), (Permutation (insert k gv0) (insert k q)), (Permutation (insert k gv0) (insert k p)), (Permutation (insert k gv0) (insert k pl)), (Permutation (insert k gv0) (insert a ql)), (Permutation (insert k gv0) (insert a q))
(Permutation (insert k gv0) (insert a p)), (Permutation (insert k gv0) (insert a gv0)), (Permutation (insert k gv0) (insert a pl)), (Permutation (insert k gv0) (maybe_swap ql)), (Permutation (insert k gv0) (maybe_swap q)), (Permutation (insert k gv0) (maybe_swap p)), (Permutation (insert k gv0) (maybe_swap gv0)), (Permutation (insert k gv0) (maybe_swap pl)), (Permutation (insert k gv0) (ql ++ ql)), (Permutation (insert k gv0) (ql ++ q))
(Permutation (insert k gv0) (ql ++ p)), (Permutation (insert k gv0) (ql ++ gv0)), (Permutation (insert k gv0) (ql ++ pl)), (Permutation (insert k gv0) (q ++ ql)), (Permutation (insert k gv0) (q ++ q)), (Permutation (insert k gv0) (q ++ p)), (Permutation (insert k gv0) (q ++ gv0)), (Permutation (insert k gv0) (q ++ pl)), (Permutation (insert k gv0) (p ++ ql)), (Permutation (insert k gv0) (p ++ q))
(Permutation (insert k gv0) (p ++ p)), (Permutation (insert k gv0) (p ++ gv0)), (Permutation (insert k gv0) (p ++ pl)), (Permutation (insert k gv0) (gv0 ++ ql)), (Permutation (insert k gv0) (gv0 ++ q)), (Permutation (insert k gv0) (gv0 ++ p)), (Permutation (insert k gv0) (gv0 ++ gv0)), (Permutation (insert k gv0) (gv0 ++ pl)), (Permutation (insert k gv0) (pl ++ ql)), (Permutation (insert k gv0) (pl ++ q))
(Permutation (insert k gv0) (pl ++ p)), (Permutation (insert k gv0) (pl ++ gv0)), (Permutation (insert k gv0) (pl ++ pl)), (Permutation (insert k gv0) []), (Permutation (insert k pl) ql), (Permutation (insert k pl) q), (Permutation (insert k pl) p), (Permutation (insert k pl) gv0), (Permutation (insert k pl) pl), (Permutation (insert k pl) (k :: ql))
(Permutation (insert k pl) (k :: q)), (Permutation (insert k pl) (k :: p)), (Permutation (insert k pl) (k :: gv0)), (Permutation (insert k pl) (k :: pl)), (Permutation (insert k pl) (a :: ql)), (Permutation (insert k pl) (a :: q)), (Permutation (insert k pl) (a :: p)), (Permutation (insert k pl) (a :: gv0)), (Permutation (insert k pl) (a :: pl)), (Permutation (insert k pl) (merge ql ql))
(Permutation (insert k pl) (merge ql q)), (Permutation (insert k pl) (merge ql p)), (Permutation (insert k pl) (merge ql gv0)), (Permutation (insert k pl) (merge ql pl)), (Permutation (insert k pl) (merge q ql)), (Permutation (insert k pl) (merge q q)), (Permutation (insert k pl) (merge q p)), (Permutation (insert k pl) (merge q gv0)), (Permutation (insert k pl) (merge q pl)), (Permutation (insert k pl) (merge p ql))
(Permutation (insert k pl) (merge p q)), (Permutation (insert k pl) (merge p p)), (Permutation (insert k pl) (merge p gv0)), (Permutation (insert k pl) (merge p pl)), (Permutation (insert k pl) (merge gv0 ql)), (Permutation (insert k pl) (merge gv0 q)), (Permutation (insert k pl) (merge gv0 p)), (Permutation (insert k pl) (merge gv0 gv0)), (Permutation (insert k pl) (merge gv0 pl)), (Permutation (insert k pl) (merge pl ql))
(Permutation (insert k pl) (merge pl q)), (Permutation (insert k pl) (merge pl p)), (Permutation (insert k pl) (merge pl gv0)), (Permutation (insert k pl) (merge pl pl)), (Permutation (insert k pl) (insert k ql)), (Permutation (insert k pl) (insert k q)), (Permutation (insert k pl) (insert k p)), (Permutation (insert k pl) (insert k gv0)), (Permutation (insert k pl) (insert a ql)), (Permutation (insert k pl) (insert a q))
(Permutation (insert k pl) (insert a p)), (Permutation (insert k pl) (insert a gv0)), (Permutation (insert k pl) (insert a pl)), (Permutation (insert k pl) (maybe_swap ql)), (Permutation (insert k pl) (maybe_swap q)), (Permutation (insert k pl) (maybe_swap p)), (Permutation (insert k pl) (maybe_swap gv0)), (Permutation (insert k pl) (maybe_swap pl)), (Permutation (insert k pl) (ql ++ ql)), (Permutation (insert k pl) (ql ++ q))
(Permutation (insert k pl) (ql ++ p)), (Permutation (insert k pl) (ql ++ gv0)), (Permutation (insert k pl) (ql ++ pl)), (Permutation (insert k pl) (q ++ ql)), (Permutation (insert k pl) (q ++ q)), (Permutation (insert k pl) (q ++ p)), (Permutation (insert k pl) (q ++ gv0)), (Permutation (insert k pl) (q ++ pl)), (Permutation (insert k pl) (p ++ ql)), (Permutation (insert k pl) (p ++ q))
(Permutation (insert k pl) (p ++ p)), (Permutation (insert k pl) (p ++ gv0)), (Permutation (insert k pl) (p ++ pl)), (Permutation (insert k pl) (gv0 ++ ql)), (Permutation (insert k pl) (gv0 ++ q)), (Permutation (insert k pl) (gv0 ++ p)), (Permutation (insert k pl) (gv0 ++ gv0)), (Permutation (insert k pl) (gv0 ++ pl)), (Permutation (insert k pl) (pl ++ ql)), (Permutation (insert k pl) (pl ++ q))
(Permutation (insert k pl) (pl ++ p)), (Permutation (insert k pl) (pl ++ gv0)), (Permutation (insert k pl) (pl ++ pl)), (Permutation (insert k pl) []), (Permutation (insert a ql) ql), (Permutation (insert a ql) q), (Permutation (insert a ql) p), (Permutation (insert a ql) gv0), (Permutation (insert a ql) pl), (Permutation (insert a ql) (k :: ql))
(Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (k :: gv0)), (Permutation (insert a ql) (k :: pl)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (a :: gv0)), (Permutation (insert a ql) (a :: pl)), (Permutation (insert a ql) (merge ql ql))
(Permutation (insert a ql) (merge ql q)), (Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge ql gv0)), (Permutation (insert a ql) (merge ql pl)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge q gv0)), (Permutation (insert a ql) (merge q pl)), (Permutation (insert a ql) (merge p ql))
(Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (merge p gv0)), (Permutation (insert a ql) (merge p pl)), (Permutation (insert a ql) (merge gv0 ql)), (Permutation (insert a ql) (merge gv0 q)), (Permutation (insert a ql) (merge gv0 p)), (Permutation (insert a ql) (merge gv0 gv0)), (Permutation (insert a ql) (merge gv0 pl)), (Permutation (insert a ql) (merge pl ql))
(Permutation (insert a ql) (merge pl q)), (Permutation (insert a ql) (merge pl p)), (Permutation (insert a ql) (merge pl gv0)), (Permutation (insert a ql) (merge pl pl)), (Permutation (insert a ql) (insert k ql)), (Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert k gv0)), (Permutation (insert a ql) (insert k pl)), (Permutation (insert a ql) (insert a q))
(Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (insert a gv0)), (Permutation (insert a ql) (insert a pl)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (maybe_swap gv0)), (Permutation (insert a ql) (maybe_swap pl)), (Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ q))
(Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (ql ++ gv0)), (Permutation (insert a ql) (ql ++ pl)), (Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ p)), (Permutation (insert a ql) (q ++ gv0)), (Permutation (insert a ql) (q ++ pl)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ q))
(Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) (p ++ gv0)), (Permutation (insert a ql) (p ++ pl)), (Permutation (insert a ql) (gv0 ++ ql)), (Permutation (insert a ql) (gv0 ++ q)), (Permutation (insert a ql) (gv0 ++ p)), (Permutation (insert a ql) (gv0 ++ gv0)), (Permutation (insert a ql) (gv0 ++ pl)), (Permutation (insert a ql) (pl ++ ql)), (Permutation (insert a ql) (pl ++ q))
(Permutation (insert a ql) (pl ++ p)), (Permutation (insert a ql) (pl ++ gv0)), (Permutation (insert a ql) (pl ++ pl)), (Permutation (insert a ql) []), (Permutation (insert a q) ql), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) gv0), (Permutation (insert a q) pl), (Permutation (insert a q) (k :: ql))
(Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: gv0)), (Permutation (insert a q) (k :: pl)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: gv0)), (Permutation (insert a q) (a :: pl)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge ql gv0)), (Permutation (insert a q) (merge ql pl)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q gv0)), (Permutation (insert a q) (merge q pl)), (Permutation (insert a q) (merge p ql))
(Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p gv0)), (Permutation (insert a q) (merge p pl)), (Permutation (insert a q) (merge gv0 ql)), (Permutation (insert a q) (merge gv0 q)), (Permutation (insert a q) (merge gv0 p)), (Permutation (insert a q) (merge gv0 gv0)), (Permutation (insert a q) (merge gv0 pl)), (Permutation (insert a q) (merge pl ql))
(Permutation (insert a q) (merge pl q)), (Permutation (insert a q) (merge pl p)), (Permutation (insert a q) (merge pl gv0)), (Permutation (insert a q) (merge pl pl)), (Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert k gv0)), (Permutation (insert a q) (insert k pl)), (Permutation (insert a q) (insert a ql))
(Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a gv0)), (Permutation (insert a q) (insert a pl)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap gv0)), (Permutation (insert a q) (maybe_swap pl)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ q))
(Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (ql ++ gv0)), (Permutation (insert a q) (ql ++ pl)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ gv0)), (Permutation (insert a q) (q ++ pl)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ q))
(Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ gv0)), (Permutation (insert a q) (p ++ pl)), (Permutation (insert a q) (gv0 ++ ql)), (Permutation (insert a q) (gv0 ++ q)), (Permutation (insert a q) (gv0 ++ p)), (Permutation (insert a q) (gv0 ++ gv0)), (Permutation (insert a q) (gv0 ++ pl)), (Permutation (insert a q) (pl ++ ql)), (Permutation (insert a q) (pl ++ q))
(Permutation (insert a q) (pl ++ p)), (Permutation (insert a q) (pl ++ gv0)), (Permutation (insert a q) (pl ++ pl)), (Permutation (insert a q) []), (Permutation (insert a p) ql), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) gv0), (Permutation (insert a p) pl), (Permutation (insert a p) (k :: ql))
(Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: gv0)), (Permutation (insert a p) (k :: pl)), (Permutation (insert a p) (a :: ql)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (a :: gv0)), (Permutation (insert a p) (a :: pl)), (Permutation (insert a p) (merge ql ql))
(Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge ql gv0)), (Permutation (insert a p) (merge ql pl)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q gv0)), (Permutation (insert a p) (merge q pl)), (Permutation (insert a p) (merge p ql))
(Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p gv0)), (Permutation (insert a p) (merge p pl)), (Permutation (insert a p) (merge gv0 ql)), (Permutation (insert a p) (merge gv0 q)), (Permutation (insert a p) (merge gv0 p)), (Permutation (insert a p) (merge gv0 gv0)), (Permutation (insert a p) (merge gv0 pl)), (Permutation (insert a p) (merge pl ql))
(Permutation (insert a p) (merge pl q)), (Permutation (insert a p) (merge pl p)), (Permutation (insert a p) (merge pl gv0)), (Permutation (insert a p) (merge pl pl)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k gv0)), (Permutation (insert a p) (insert k pl)), (Permutation (insert a p) (insert a ql))
(Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a gv0)), (Permutation (insert a p) (insert a pl)), (Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (maybe_swap gv0)), (Permutation (insert a p) (maybe_swap pl)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ q))
(Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (ql ++ gv0)), (Permutation (insert a p) (ql ++ pl)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ gv0)), (Permutation (insert a p) (q ++ pl)), (Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ q))
(Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ gv0)), (Permutation (insert a p) (p ++ pl)), (Permutation (insert a p) (gv0 ++ ql)), (Permutation (insert a p) (gv0 ++ q)), (Permutation (insert a p) (gv0 ++ p)), (Permutation (insert a p) (gv0 ++ gv0)), (Permutation (insert a p) (gv0 ++ pl)), (Permutation (insert a p) (pl ++ ql)), (Permutation (insert a p) (pl ++ q))
(Permutation (insert a p) (pl ++ p)), (Permutation (insert a p) (pl ++ gv0)), (Permutation (insert a p) (pl ++ pl)), (Permutation (insert a p) []), (Permutation (insert a gv0) ql), (Permutation (insert a gv0) q), (Permutation (insert a gv0) p), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) pl), (Permutation (insert a gv0) (k :: ql))
(Permutation (insert a gv0) (k :: q)), (Permutation (insert a gv0) (k :: p)), (Permutation (insert a gv0) (k :: gv0)), (Permutation (insert a gv0) (k :: pl)), (Permutation (insert a gv0) (a :: ql)), (Permutation (insert a gv0) (a :: q)), (Permutation (insert a gv0) (a :: p)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (a :: pl)), (Permutation (insert a gv0) (merge ql ql))
(Permutation (insert a gv0) (merge ql q)), (Permutation (insert a gv0) (merge ql p)), (Permutation (insert a gv0) (merge ql gv0)), (Permutation (insert a gv0) (merge ql pl)), (Permutation (insert a gv0) (merge q ql)), (Permutation (insert a gv0) (merge q q)), (Permutation (insert a gv0) (merge q p)), (Permutation (insert a gv0) (merge q gv0)), (Permutation (insert a gv0) (merge q pl)), (Permutation (insert a gv0) (merge p ql))
(Permutation (insert a gv0) (merge p q)), (Permutation (insert a gv0) (merge p p)), (Permutation (insert a gv0) (merge p gv0)), (Permutation (insert a gv0) (merge p pl)), (Permutation (insert a gv0) (merge gv0 ql)), (Permutation (insert a gv0) (merge gv0 q)), (Permutation (insert a gv0) (merge gv0 p)), (Permutation (insert a gv0) (merge gv0 gv0)), (Permutation (insert a gv0) (merge gv0 pl)), (Permutation (insert a gv0) (merge pl ql))
(Permutation (insert a gv0) (merge pl q)), (Permutation (insert a gv0) (merge pl p)), (Permutation (insert a gv0) (merge pl gv0)), (Permutation (insert a gv0) (merge pl pl)), (Permutation (insert a gv0) (insert k ql)), (Permutation (insert a gv0) (insert k q)), (Permutation (insert a gv0) (insert k p)), (Permutation (insert a gv0) (insert k gv0)), (Permutation (insert a gv0) (insert k pl)), (Permutation (insert a gv0) (insert a ql))
(Permutation (insert a gv0) (insert a q)), (Permutation (insert a gv0) (insert a p)), (Permutation (insert a gv0) (insert a pl)), (Permutation (insert a gv0) (maybe_swap ql)), (Permutation (insert a gv0) (maybe_swap q)), (Permutation (insert a gv0) (maybe_swap p)), (Permutation (insert a gv0) (maybe_swap gv0)), (Permutation (insert a gv0) (maybe_swap pl)), (Permutation (insert a gv0) (ql ++ ql)), (Permutation (insert a gv0) (ql ++ q))
(Permutation (insert a gv0) (ql ++ p)), (Permutation (insert a gv0) (ql ++ gv0)), (Permutation (insert a gv0) (ql ++ pl)), (Permutation (insert a gv0) (q ++ ql)), (Permutation (insert a gv0) (q ++ q)), (Permutation (insert a gv0) (q ++ p)), (Permutation (insert a gv0) (q ++ gv0)), (Permutation (insert a gv0) (q ++ pl)), (Permutation (insert a gv0) (p ++ ql)), (Permutation (insert a gv0) (p ++ q))
(Permutation (insert a gv0) (p ++ p)), (Permutation (insert a gv0) (p ++ gv0)), (Permutation (insert a gv0) (p ++ pl)), (Permutation (insert a gv0) (gv0 ++ ql)), (Permutation (insert a gv0) (gv0 ++ q)), (Permutation (insert a gv0) (gv0 ++ p)), (Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) (gv0 ++ pl)), (Permutation (insert a gv0) (pl ++ ql)), (Permutation (insert a gv0) (pl ++ q))
(Permutation (insert a gv0) (pl ++ p)), (Permutation (insert a gv0) (pl ++ gv0)), (Permutation (insert a gv0) (pl ++ pl)), (Permutation (insert a gv0) []), (Permutation (insert a pl) ql), (Permutation (insert a pl) q), (Permutation (insert a pl) p), (Permutation (insert a pl) gv0), (Permutation (insert a pl) pl), (Permutation (insert a pl) (k :: ql))
(Permutation (insert a pl) (k :: q)), (Permutation (insert a pl) (k :: p)), (Permutation (insert a pl) (k :: gv0)), (Permutation (insert a pl) (k :: pl)), (Permutation (insert a pl) (a :: ql)), (Permutation (insert a pl) (a :: q)), (Permutation (insert a pl) (a :: p)), (Permutation (insert a pl) (a :: gv0)), (Permutation (insert a pl) (a :: pl)), (Permutation (insert a pl) (merge ql ql))
(Permutation (insert a pl) (merge ql q)), (Permutation (insert a pl) (merge ql p)), (Permutation (insert a pl) (merge ql gv0)), (Permutation (insert a pl) (merge ql pl)), (Permutation (insert a pl) (merge q ql)), (Permutation (insert a pl) (merge q q)), (Permutation (insert a pl) (merge q p)), (Permutation (insert a pl) (merge q gv0)), (Permutation (insert a pl) (merge q pl)), (Permutation (insert a pl) (merge p ql))
(Permutation (insert a pl) (merge p q)), (Permutation (insert a pl) (merge p p)), (Permutation (insert a pl) (merge p gv0)), (Permutation (insert a pl) (merge p pl)), (Permutation (insert a pl) (merge gv0 ql)), (Permutation (insert a pl) (merge gv0 q)), (Permutation (insert a pl) (merge gv0 p)), (Permutation (insert a pl) (merge gv0 gv0)), (Permutation (insert a pl) (merge gv0 pl)), (Permutation (insert a pl) (merge pl ql))
(Permutation (insert a pl) (merge pl q)), (Permutation (insert a pl) (merge pl p)), (Permutation (insert a pl) (merge pl gv0)), (Permutation (insert a pl) (merge pl pl)), (Permutation (insert a pl) (insert k ql)), (Permutation (insert a pl) (insert k q)), (Permutation (insert a pl) (insert k p)), (Permutation (insert a pl) (insert k gv0)), (Permutation (insert a pl) (insert k pl)), (Permutation (insert a pl) (insert a ql))
(Permutation (insert a pl) (insert a q)), (Permutation (insert a pl) (insert a p)), (Permutation (insert a pl) (insert a gv0)), (Permutation (insert a pl) (maybe_swap ql)), (Permutation (insert a pl) (maybe_swap q)), (Permutation (insert a pl) (maybe_swap p)), (Permutation (insert a pl) (maybe_swap gv0)), (Permutation (insert a pl) (maybe_swap pl)), (Permutation (insert a pl) (ql ++ ql)), (Permutation (insert a pl) (ql ++ q))
(Permutation (insert a pl) (ql ++ p)), (Permutation (insert a pl) (ql ++ gv0)), (Permutation (insert a pl) (ql ++ pl)), (Permutation (insert a pl) (q ++ ql)), (Permutation (insert a pl) (q ++ q)), (Permutation (insert a pl) (q ++ p)), (Permutation (insert a pl) (q ++ gv0)), (Permutation (insert a pl) (q ++ pl)), (Permutation (insert a pl) (p ++ ql)), (Permutation (insert a pl) (p ++ q))
(Permutation (insert a pl) (p ++ p)), (Permutation (insert a pl) (p ++ gv0)), (Permutation (insert a pl) (p ++ pl)), (Permutation (insert a pl) (gv0 ++ ql)), (Permutation (insert a pl) (gv0 ++ q)), (Permutation (insert a pl) (gv0 ++ p)), (Permutation (insert a pl) (gv0 ++ gv0)), (Permutation (insert a pl) (gv0 ++ pl)), (Permutation (insert a pl) (pl ++ ql)), (Permutation (insert a pl) (pl ++ q))
(Permutation (insert a pl) (pl ++ p)), (Permutation (insert a pl) (pl ++ gv0)), (Permutation (insert a pl) (pl ++ pl)), (Permutation (insert a pl) []), (Permutation (maybe_swap ql) ql), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) gv0), (Permutation (maybe_swap ql) pl), (Permutation (maybe_swap ql) (k :: ql))
(Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (k :: gv0)), (Permutation (maybe_swap ql) (k :: pl)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (a :: gv0)), (Permutation (maybe_swap ql) (a :: pl)), (Permutation (maybe_swap ql) (merge ql ql))
(Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge ql gv0)), (Permutation (maybe_swap ql) (merge ql pl)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q q)), (Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge q gv0)), (Permutation (maybe_swap ql) (merge q pl)), (Permutation (maybe_swap ql) (merge p ql))
(Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (merge p gv0)), (Permutation (maybe_swap ql) (merge p pl)), (Permutation (maybe_swap ql) (merge gv0 ql)), (Permutation (maybe_swap ql) (merge gv0 q)), (Permutation (maybe_swap ql) (merge gv0 p)), (Permutation (maybe_swap ql) (merge gv0 gv0)), (Permutation (maybe_swap ql) (merge gv0 pl)), (Permutation (maybe_swap ql) (merge pl ql))
(Permutation (maybe_swap ql) (merge pl q)), (Permutation (maybe_swap ql) (merge pl p)), (Permutation (maybe_swap ql) (merge pl gv0)), (Permutation (maybe_swap ql) (merge pl pl)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k q)), (Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert k gv0)), (Permutation (maybe_swap ql) (insert k pl)), (Permutation (maybe_swap ql) (insert a ql))
(Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (insert a gv0)), (Permutation (maybe_swap ql) (insert a pl)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (maybe_swap gv0)), (Permutation (maybe_swap ql) (maybe_swap pl)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ q))
(Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (ql ++ gv0)), (Permutation (maybe_swap ql) (ql ++ pl)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (q ++ gv0)), (Permutation (maybe_swap ql) (q ++ pl)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ q))
(Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) (p ++ gv0)), (Permutation (maybe_swap ql) (p ++ pl)), (Permutation (maybe_swap ql) (gv0 ++ ql)), (Permutation (maybe_swap ql) (gv0 ++ q)), (Permutation (maybe_swap ql) (gv0 ++ p)), (Permutation (maybe_swap ql) (gv0 ++ gv0)), (Permutation (maybe_swap ql) (gv0 ++ pl)), (Permutation (maybe_swap ql) (pl ++ ql)), (Permutation (maybe_swap ql) (pl ++ q))
(Permutation (maybe_swap ql) (pl ++ p)), (Permutation (maybe_swap ql) (pl ++ gv0)), (Permutation (maybe_swap ql) (pl ++ pl)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) gv0), (Permutation (maybe_swap q) pl), (Permutation (maybe_swap q) (k :: ql))
(Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: gv0)), (Permutation (maybe_swap q) (k :: pl)), (Permutation (maybe_swap q) (a :: ql)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: gv0)), (Permutation (maybe_swap q) (a :: pl)), (Permutation (maybe_swap q) (merge ql ql))
(Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge ql gv0)), (Permutation (maybe_swap q) (merge ql pl)), (Permutation (maybe_swap q) (merge q ql)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q gv0)), (Permutation (maybe_swap q) (merge q pl)), (Permutation (maybe_swap q) (merge p ql))
(Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p gv0)), (Permutation (maybe_swap q) (merge p pl)), (Permutation (maybe_swap q) (merge gv0 ql)), (Permutation (maybe_swap q) (merge gv0 q)), (Permutation (maybe_swap q) (merge gv0 p)), (Permutation (maybe_swap q) (merge gv0 gv0)), (Permutation (maybe_swap q) (merge gv0 pl)), (Permutation (maybe_swap q) (merge pl ql))
(Permutation (maybe_swap q) (merge pl q)), (Permutation (maybe_swap q) (merge pl p)), (Permutation (maybe_swap q) (merge pl gv0)), (Permutation (maybe_swap q) (merge pl pl)), (Permutation (maybe_swap q) (insert k ql)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert k gv0)), (Permutation (maybe_swap q) (insert k pl)), (Permutation (maybe_swap q) (insert a ql))
(Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a gv0)), (Permutation (maybe_swap q) (insert a pl)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap gv0)), (Permutation (maybe_swap q) (maybe_swap pl)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ q))
(Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (ql ++ gv0)), (Permutation (maybe_swap q) (ql ++ pl)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ gv0)), (Permutation (maybe_swap q) (q ++ pl)), (Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ q))
(Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) (p ++ gv0)), (Permutation (maybe_swap q) (p ++ pl)), (Permutation (maybe_swap q) (gv0 ++ ql)), (Permutation (maybe_swap q) (gv0 ++ q)), (Permutation (maybe_swap q) (gv0 ++ p)), (Permutation (maybe_swap q) (gv0 ++ gv0)), (Permutation (maybe_swap q) (gv0 ++ pl)), (Permutation (maybe_swap q) (pl ++ ql)), (Permutation (maybe_swap q) (pl ++ q))
(Permutation (maybe_swap q) (pl ++ p)), (Permutation (maybe_swap q) (pl ++ gv0)), (Permutation (maybe_swap q) (pl ++ pl)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) gv0), (Permutation (maybe_swap p) pl), (Permutation (maybe_swap p) (k :: ql))
(Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: gv0)), (Permutation (maybe_swap p) (k :: pl)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: gv0)), (Permutation (maybe_swap p) (a :: pl)), (Permutation (maybe_swap p) (merge ql ql))
(Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge ql gv0)), (Permutation (maybe_swap p) (merge ql pl)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q gv0)), (Permutation (maybe_swap p) (merge q pl)), (Permutation (maybe_swap p) (merge p ql))
(Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p gv0)), (Permutation (maybe_swap p) (merge p pl)), (Permutation (maybe_swap p) (merge gv0 ql)), (Permutation (maybe_swap p) (merge gv0 q)), (Permutation (maybe_swap p) (merge gv0 p)), (Permutation (maybe_swap p) (merge gv0 gv0)), (Permutation (maybe_swap p) (merge gv0 pl)), (Permutation (maybe_swap p) (merge pl ql))
(Permutation (maybe_swap p) (merge pl q)), (Permutation (maybe_swap p) (merge pl p)), (Permutation (maybe_swap p) (merge pl gv0)), (Permutation (maybe_swap p) (merge pl pl)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k gv0)), (Permutation (maybe_swap p) (insert k pl)), (Permutation (maybe_swap p) (insert a ql))
(Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a gv0)), (Permutation (maybe_swap p) (insert a pl)), (Permutation (maybe_swap p) (maybe_swap ql)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap gv0)), (Permutation (maybe_swap p) (maybe_swap pl)), (Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ q))
(Permutation (maybe_swap p) (ql ++ p)), (Permutation (maybe_swap p) (ql ++ gv0)), (Permutation (maybe_swap p) (ql ++ pl)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ gv0)), (Permutation (maybe_swap p) (q ++ pl)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ q))
(Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ gv0)), (Permutation (maybe_swap p) (p ++ pl)), (Permutation (maybe_swap p) (gv0 ++ ql)), (Permutation (maybe_swap p) (gv0 ++ q)), (Permutation (maybe_swap p) (gv0 ++ p)), (Permutation (maybe_swap p) (gv0 ++ gv0)), (Permutation (maybe_swap p) (gv0 ++ pl)), (Permutation (maybe_swap p) (pl ++ ql)), (Permutation (maybe_swap p) (pl ++ q))
(Permutation (maybe_swap p) (pl ++ p)), (Permutation (maybe_swap p) (pl ++ gv0)), (Permutation (maybe_swap p) (pl ++ pl)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap gv0) ql), (Permutation (maybe_swap gv0) q), (Permutation (maybe_swap gv0) p), (Permutation (maybe_swap gv0) gv0), (Permutation (maybe_swap gv0) pl), (Permutation (maybe_swap gv0) (k :: ql))
(Permutation (maybe_swap gv0) (k :: q)), (Permutation (maybe_swap gv0) (k :: p)), (Permutation (maybe_swap gv0) (k :: gv0)), (Permutation (maybe_swap gv0) (k :: pl)), (Permutation (maybe_swap gv0) (a :: ql)), (Permutation (maybe_swap gv0) (a :: q)), (Permutation (maybe_swap gv0) (a :: p)), (Permutation (maybe_swap gv0) (a :: gv0)), (Permutation (maybe_swap gv0) (a :: pl)), (Permutation (maybe_swap gv0) (merge ql ql))
(Permutation (maybe_swap gv0) (merge ql q)), (Permutation (maybe_swap gv0) (merge ql p)), (Permutation (maybe_swap gv0) (merge ql gv0)), (Permutation (maybe_swap gv0) (merge ql pl)), (Permutation (maybe_swap gv0) (merge q ql)), (Permutation (maybe_swap gv0) (merge q q)), (Permutation (maybe_swap gv0) (merge q p)), (Permutation (maybe_swap gv0) (merge q gv0)), (Permutation (maybe_swap gv0) (merge q pl)), (Permutation (maybe_swap gv0) (merge p ql))
(Permutation (maybe_swap gv0) (merge p q)), (Permutation (maybe_swap gv0) (merge p p)), (Permutation (maybe_swap gv0) (merge p gv0)), (Permutation (maybe_swap gv0) (merge p pl)), (Permutation (maybe_swap gv0) (merge gv0 ql)), (Permutation (maybe_swap gv0) (merge gv0 q)), (Permutation (maybe_swap gv0) (merge gv0 p)), (Permutation (maybe_swap gv0) (merge gv0 gv0)), (Permutation (maybe_swap gv0) (merge gv0 pl)), (Permutation (maybe_swap gv0) (merge pl ql))
(Permutation (maybe_swap gv0) (merge pl q)), (Permutation (maybe_swap gv0) (merge pl p)), (Permutation (maybe_swap gv0) (merge pl gv0)), (Permutation (maybe_swap gv0) (merge pl pl)), (Permutation (maybe_swap gv0) (insert k ql)), (Permutation (maybe_swap gv0) (insert k q)), (Permutation (maybe_swap gv0) (insert k p)), (Permutation (maybe_swap gv0) (insert k gv0)), (Permutation (maybe_swap gv0) (insert k pl)), (Permutation (maybe_swap gv0) (insert a ql))
(Permutation (maybe_swap gv0) (insert a q)), (Permutation (maybe_swap gv0) (insert a p)), (Permutation (maybe_swap gv0) (insert a gv0)), (Permutation (maybe_swap gv0) (insert a pl)), (Permutation (maybe_swap gv0) (maybe_swap ql)), (Permutation (maybe_swap gv0) (maybe_swap q)), (Permutation (maybe_swap gv0) (maybe_swap p)), (Permutation (maybe_swap gv0) (maybe_swap pl)), (Permutation (maybe_swap gv0) (ql ++ ql)), (Permutation (maybe_swap gv0) (ql ++ q))
(Permutation (maybe_swap gv0) (ql ++ p)), (Permutation (maybe_swap gv0) (ql ++ gv0)), (Permutation (maybe_swap gv0) (ql ++ pl)), (Permutation (maybe_swap gv0) (q ++ ql)), (Permutation (maybe_swap gv0) (q ++ q)), (Permutation (maybe_swap gv0) (q ++ p)), (Permutation (maybe_swap gv0) (q ++ gv0)), (Permutation (maybe_swap gv0) (q ++ pl)), (Permutation (maybe_swap gv0) (p ++ ql)), (Permutation (maybe_swap gv0) (p ++ q))
(Permutation (maybe_swap gv0) (p ++ p)), (Permutation (maybe_swap gv0) (p ++ gv0)), (Permutation (maybe_swap gv0) (p ++ pl)), (Permutation (maybe_swap gv0) (gv0 ++ ql)), (Permutation (maybe_swap gv0) (gv0 ++ q)), (Permutation (maybe_swap gv0) (gv0 ++ p)), (Permutation (maybe_swap gv0) (gv0 ++ gv0)), (Permutation (maybe_swap gv0) (gv0 ++ pl)), (Permutation (maybe_swap gv0) (pl ++ ql)), (Permutation (maybe_swap gv0) (pl ++ q))
(Permutation (maybe_swap gv0) (pl ++ p)), (Permutation (maybe_swap gv0) (pl ++ gv0)), (Permutation (maybe_swap gv0) (pl ++ pl)), (Permutation (maybe_swap gv0) []), (Permutation (maybe_swap pl) ql), (Permutation (maybe_swap pl) q), (Permutation (maybe_swap pl) p), (Permutation (maybe_swap pl) gv0), (Permutation (maybe_swap pl) pl), (Permutation (maybe_swap pl) (k :: ql))
(Permutation (maybe_swap pl) (k :: q)), (Permutation (maybe_swap pl) (k :: p)), (Permutation (maybe_swap pl) (k :: gv0)), (Permutation (maybe_swap pl) (k :: pl)), (Permutation (maybe_swap pl) (a :: ql)), (Permutation (maybe_swap pl) (a :: q)), (Permutation (maybe_swap pl) (a :: p)), (Permutation (maybe_swap pl) (a :: gv0)), (Permutation (maybe_swap pl) (a :: pl)), (Permutation (maybe_swap pl) (merge ql ql))
(Permutation (maybe_swap pl) (merge ql q)), (Permutation (maybe_swap pl) (merge ql p)), (Permutation (maybe_swap pl) (merge ql gv0)), (Permutation (maybe_swap pl) (merge ql pl)), (Permutation (maybe_swap pl) (merge q ql)), (Permutation (maybe_swap pl) (merge q q)), (Permutation (maybe_swap pl) (merge q p)), (Permutation (maybe_swap pl) (merge q gv0)), (Permutation (maybe_swap pl) (merge q pl)), (Permutation (maybe_swap pl) (merge p ql))
(Permutation (maybe_swap pl) (merge p q)), (Permutation (maybe_swap pl) (merge p p)), (Permutation (maybe_swap pl) (merge p gv0)), (Permutation (maybe_swap pl) (merge p pl)), (Permutation (maybe_swap pl) (merge gv0 ql)), (Permutation (maybe_swap pl) (merge gv0 q)), (Permutation (maybe_swap pl) (merge gv0 p)), (Permutation (maybe_swap pl) (merge gv0 gv0)), (Permutation (maybe_swap pl) (merge gv0 pl)), (Permutation (maybe_swap pl) (merge pl ql))
(Permutation (maybe_swap pl) (merge pl q)), (Permutation (maybe_swap pl) (merge pl p)), (Permutation (maybe_swap pl) (merge pl gv0)), (Permutation (maybe_swap pl) (merge pl pl)), (Permutation (maybe_swap pl) (insert k ql)), (Permutation (maybe_swap pl) (insert k q)), (Permutation (maybe_swap pl) (insert k p)), (Permutation (maybe_swap pl) (insert k gv0)), (Permutation (maybe_swap pl) (insert k pl)), (Permutation (maybe_swap pl) (insert a ql))
(Permutation (maybe_swap pl) (insert a q)), (Permutation (maybe_swap pl) (insert a p)), (Permutation (maybe_swap pl) (insert a gv0)), (Permutation (maybe_swap pl) (insert a pl)), (Permutation (maybe_swap pl) (maybe_swap ql)), (Permutation (maybe_swap pl) (maybe_swap q)), (Permutation (maybe_swap pl) (maybe_swap p)), (Permutation (maybe_swap pl) (maybe_swap gv0)), (Permutation (maybe_swap pl) (ql ++ ql)), (Permutation (maybe_swap pl) (ql ++ q))
(Permutation (maybe_swap pl) (ql ++ p)), (Permutation (maybe_swap pl) (ql ++ gv0)), (Permutation (maybe_swap pl) (ql ++ pl)), (Permutation (maybe_swap pl) (q ++ ql)), (Permutation (maybe_swap pl) (q ++ q)), (Permutation (maybe_swap pl) (q ++ p)), (Permutation (maybe_swap pl) (q ++ gv0)), (Permutation (maybe_swap pl) (q ++ pl)), (Permutation (maybe_swap pl) (p ++ ql)), (Permutation (maybe_swap pl) (p ++ q))
(Permutation (maybe_swap pl) (p ++ p)), (Permutation (maybe_swap pl) (p ++ gv0)), (Permutation (maybe_swap pl) (p ++ pl)), (Permutation (maybe_swap pl) (gv0 ++ ql)), (Permutation (maybe_swap pl) (gv0 ++ q)), (Permutation (maybe_swap pl) (gv0 ++ p)), (Permutation (maybe_swap pl) (gv0 ++ gv0)), (Permutation (maybe_swap pl) (gv0 ++ pl)), (Permutation (maybe_swap pl) (pl ++ ql)), (Permutation (maybe_swap pl) (pl ++ q))
(Permutation (maybe_swap pl) (pl ++ p)), (Permutation (maybe_swap pl) (pl ++ gv0)), (Permutation (maybe_swap pl) (pl ++ pl)), (Permutation (maybe_swap pl) []), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) q), (Permutation (ql ++ ql) p), (Permutation (ql ++ ql) gv0), (Permutation (ql ++ ql) pl), (Permutation (ql ++ ql) (k :: ql))
(Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (k :: gv0)), (Permutation (ql ++ ql) (k :: pl)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (a :: gv0)), (Permutation (ql ++ ql) (a :: pl)), (Permutation (ql ++ ql) (merge ql ql))
(Permutation (ql ++ ql) (merge ql q)), (Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge ql gv0)), (Permutation (ql ++ ql) (merge ql pl)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge q gv0)), (Permutation (ql ++ ql) (merge q pl)), (Permutation (ql ++ ql) (merge p ql))
(Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (merge p gv0)), (Permutation (ql ++ ql) (merge p pl)), (Permutation (ql ++ ql) (merge gv0 ql)), (Permutation (ql ++ ql) (merge gv0 q)), (Permutation (ql ++ ql) (merge gv0 p)), (Permutation (ql ++ ql) (merge gv0 gv0)), (Permutation (ql ++ ql) (merge gv0 pl)), (Permutation (ql ++ ql) (merge pl ql))
(Permutation (ql ++ ql) (merge pl q)), (Permutation (ql ++ ql) (merge pl p)), (Permutation (ql ++ ql) (merge pl gv0)), (Permutation (ql ++ ql) (merge pl pl)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert k gv0)), (Permutation (ql ++ ql) (insert k pl)), (Permutation (ql ++ ql) (insert a ql))
(Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (insert a gv0)), (Permutation (ql ++ ql) (insert a pl)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (maybe_swap gv0)), (Permutation (ql ++ ql) (maybe_swap pl)), (Permutation (ql ++ ql) (ql ++ q))
(Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (ql ++ gv0)), (Permutation (ql ++ ql) (ql ++ pl)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ q)), (Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (q ++ gv0)), (Permutation (ql ++ ql) (q ++ pl)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ q))
(Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) (p ++ gv0)), (Permutation (ql ++ ql) (p ++ pl)), (Permutation (ql ++ ql) (gv0 ++ ql)), (Permutation (ql ++ ql) (gv0 ++ q)), (Permutation (ql ++ ql) (gv0 ++ p)), (Permutation (ql ++ ql) (gv0 ++ gv0)), (Permutation (ql ++ ql) (gv0 ++ pl)), (Permutation (ql ++ ql) (pl ++ ql)), (Permutation (ql ++ ql) (pl ++ q))
(Permutation (ql ++ ql) (pl ++ p)), (Permutation (ql ++ ql) (pl ++ gv0)), (Permutation (ql ++ ql) (pl ++ pl)), (Permutation (ql ++ ql) []), (Permutation (ql ++ q) ql), (Permutation (ql ++ q) q), (Permutation (ql ++ q) p), (Permutation (ql ++ q) gv0), (Permutation (ql ++ q) pl), (Permutation (ql ++ q) (k :: ql))
(Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (k :: gv0)), (Permutation (ql ++ q) (k :: pl)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (a :: gv0)), (Permutation (ql ++ q) (a :: pl)), (Permutation (ql ++ q) (merge ql ql))
(Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge ql gv0)), (Permutation (ql ++ q) (merge ql pl)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q q)), (Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge q gv0)), (Permutation (ql ++ q) (merge q pl)), (Permutation (ql ++ q) (merge p ql))
(Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (merge p gv0)), (Permutation (ql ++ q) (merge p pl)), (Permutation (ql ++ q) (merge gv0 ql)), (Permutation (ql ++ q) (merge gv0 q)), (Permutation (ql ++ q) (merge gv0 p)), (Permutation (ql ++ q) (merge gv0 gv0)), (Permutation (ql ++ q) (merge gv0 pl)), (Permutation (ql ++ q) (merge pl ql))
(Permutation (ql ++ q) (merge pl q)), (Permutation (ql ++ q) (merge pl p)), (Permutation (ql ++ q) (merge pl gv0)), (Permutation (ql ++ q) (merge pl pl)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k q)), (Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert k gv0)), (Permutation (ql ++ q) (insert k pl)), (Permutation (ql ++ q) (insert a ql))
(Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (insert a gv0)), (Permutation (ql ++ q) (insert a pl)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (maybe_swap gv0)), (Permutation (ql ++ q) (maybe_swap pl)), (Permutation (ql ++ q) (ql ++ ql))
(Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (ql ++ gv0)), (Permutation (ql ++ q) (ql ++ pl)), (Permutation (ql ++ q) (q ++ ql)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (q ++ gv0)), (Permutation (ql ++ q) (q ++ pl)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ q))
(Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) (p ++ gv0)), (Permutation (ql ++ q) (p ++ pl)), (Permutation (ql ++ q) (gv0 ++ ql)), (Permutation (ql ++ q) (gv0 ++ q)), (Permutation (ql ++ q) (gv0 ++ p)), (Permutation (ql ++ q) (gv0 ++ gv0)), (Permutation (ql ++ q) (gv0 ++ pl)), (Permutation (ql ++ q) (pl ++ ql)), (Permutation (ql ++ q) (pl ++ q))
(Permutation (ql ++ q) (pl ++ p)), (Permutation (ql ++ q) (pl ++ gv0)), (Permutation (ql ++ q) (pl ++ pl)), (Permutation (ql ++ q) []), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) q), (Permutation (ql ++ p) p), (Permutation (ql ++ p) gv0), (Permutation (ql ++ p) pl), (Permutation (ql ++ p) (k :: ql))
(Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (k :: gv0)), (Permutation (ql ++ p) (k :: pl)), (Permutation (ql ++ p) (a :: ql)), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (a :: gv0)), (Permutation (ql ++ p) (a :: pl)), (Permutation (ql ++ p) (merge ql ql))
(Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge ql gv0)), (Permutation (ql ++ p) (merge ql pl)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge q gv0)), (Permutation (ql ++ p) (merge q pl)), (Permutation (ql ++ p) (merge p ql))
(Permutation (ql ++ p) (merge p q)), (Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (merge p gv0)), (Permutation (ql ++ p) (merge p pl)), (Permutation (ql ++ p) (merge gv0 ql)), (Permutation (ql ++ p) (merge gv0 q)), (Permutation (ql ++ p) (merge gv0 p)), (Permutation (ql ++ p) (merge gv0 gv0)), (Permutation (ql ++ p) (merge gv0 pl)), (Permutation (ql ++ p) (merge pl ql))
(Permutation (ql ++ p) (merge pl q)), (Permutation (ql ++ p) (merge pl p)), (Permutation (ql ++ p) (merge pl gv0)), (Permutation (ql ++ p) (merge pl pl)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert k gv0)), (Permutation (ql ++ p) (insert k pl)), (Permutation (ql ++ p) (insert a ql))
(Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (insert a gv0)), (Permutation (ql ++ p) (insert a pl)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap q)), (Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (maybe_swap gv0)), (Permutation (ql ++ p) (maybe_swap pl)), (Permutation (ql ++ p) (ql ++ ql))
(Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ gv0)), (Permutation (ql ++ p) (ql ++ pl)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (q ++ gv0)), (Permutation (ql ++ p) (q ++ pl)), (Permutation (ql ++ p) (p ++ ql)), (Permutation (ql ++ p) (p ++ q))
(Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) (p ++ gv0)), (Permutation (ql ++ p) (p ++ pl)), (Permutation (ql ++ p) (gv0 ++ ql)), (Permutation (ql ++ p) (gv0 ++ q)), (Permutation (ql ++ p) (gv0 ++ p)), (Permutation (ql ++ p) (gv0 ++ gv0)), (Permutation (ql ++ p) (gv0 ++ pl)), (Permutation (ql ++ p) (pl ++ ql)), (Permutation (ql ++ p) (pl ++ q))
(Permutation (ql ++ p) (pl ++ p)), (Permutation (ql ++ p) (pl ++ gv0)), (Permutation (ql ++ p) (pl ++ pl)), (Permutation (ql ++ p) []), (Permutation (ql ++ gv0) ql), (Permutation (ql ++ gv0) q), (Permutation (ql ++ gv0) p), (Permutation (ql ++ gv0) gv0), (Permutation (ql ++ gv0) pl), (Permutation (ql ++ gv0) (k :: ql))
(Permutation (ql ++ gv0) (k :: q)), (Permutation (ql ++ gv0) (k :: p)), (Permutation (ql ++ gv0) (k :: gv0)), (Permutation (ql ++ gv0) (k :: pl)), (Permutation (ql ++ gv0) (a :: ql)), (Permutation (ql ++ gv0) (a :: q)), (Permutation (ql ++ gv0) (a :: p)), (Permutation (ql ++ gv0) (a :: gv0)), (Permutation (ql ++ gv0) (a :: pl)), (Permutation (ql ++ gv0) (merge ql ql))
(Permutation (ql ++ gv0) (merge ql q)), (Permutation (ql ++ gv0) (merge ql p)), (Permutation (ql ++ gv0) (merge ql gv0)), (Permutation (ql ++ gv0) (merge ql pl)), (Permutation (ql ++ gv0) (merge q ql)), (Permutation (ql ++ gv0) (merge q q)), (Permutation (ql ++ gv0) (merge q p)), (Permutation (ql ++ gv0) (merge q gv0)), (Permutation (ql ++ gv0) (merge q pl)), (Permutation (ql ++ gv0) (merge p ql))
(Permutation (ql ++ gv0) (merge p q)), (Permutation (ql ++ gv0) (merge p p)), (Permutation (ql ++ gv0) (merge p gv0)), (Permutation (ql ++ gv0) (merge p pl)), (Permutation (ql ++ gv0) (merge gv0 ql)), (Permutation (ql ++ gv0) (merge gv0 q)), (Permutation (ql ++ gv0) (merge gv0 p)), (Permutation (ql ++ gv0) (merge gv0 gv0)), (Permutation (ql ++ gv0) (merge gv0 pl)), (Permutation (ql ++ gv0) (merge pl ql))
(Permutation (ql ++ gv0) (merge pl q)), (Permutation (ql ++ gv0) (merge pl p)), (Permutation (ql ++ gv0) (merge pl gv0)), (Permutation (ql ++ gv0) (merge pl pl)), (Permutation (ql ++ gv0) (insert k ql)), (Permutation (ql ++ gv0) (insert k q)), (Permutation (ql ++ gv0) (insert k p)), (Permutation (ql ++ gv0) (insert k gv0)), (Permutation (ql ++ gv0) (insert k pl)), (Permutation (ql ++ gv0) (insert a ql))
(Permutation (ql ++ gv0) (insert a q)), (Permutation (ql ++ gv0) (insert a p)), (Permutation (ql ++ gv0) (insert a gv0)), (Permutation (ql ++ gv0) (insert a pl)), (Permutation (ql ++ gv0) (maybe_swap ql)), (Permutation (ql ++ gv0) (maybe_swap q)), (Permutation (ql ++ gv0) (maybe_swap p)), (Permutation (ql ++ gv0) (maybe_swap gv0)), (Permutation (ql ++ gv0) (maybe_swap pl)), (Permutation (ql ++ gv0) (ql ++ ql))
(Permutation (ql ++ gv0) (ql ++ q)), (Permutation (ql ++ gv0) (ql ++ p)), (Permutation (ql ++ gv0) (ql ++ pl)), (Permutation (ql ++ gv0) (q ++ ql)), (Permutation (ql ++ gv0) (q ++ q)), (Permutation (ql ++ gv0) (q ++ p)), (Permutation (ql ++ gv0) (q ++ gv0)), (Permutation (ql ++ gv0) (q ++ pl)), (Permutation (ql ++ gv0) (p ++ ql)), (Permutation (ql ++ gv0) (p ++ q))
(Permutation (ql ++ gv0) (p ++ p)), (Permutation (ql ++ gv0) (p ++ gv0)), (Permutation (ql ++ gv0) (p ++ pl)), (Permutation (ql ++ gv0) (gv0 ++ ql)), (Permutation (ql ++ gv0) (gv0 ++ q)), (Permutation (ql ++ gv0) (gv0 ++ p)), (Permutation (ql ++ gv0) (gv0 ++ gv0)), (Permutation (ql ++ gv0) (gv0 ++ pl)), (Permutation (ql ++ gv0) (pl ++ ql)), (Permutation (ql ++ gv0) (pl ++ q))
(Permutation (ql ++ gv0) (pl ++ p)), (Permutation (ql ++ gv0) (pl ++ gv0)), (Permutation (ql ++ gv0) (pl ++ pl)), (Permutation (ql ++ gv0) []), (Permutation (ql ++ pl) ql), (Permutation (ql ++ pl) q), (Permutation (ql ++ pl) p), (Permutation (ql ++ pl) gv0), (Permutation (ql ++ pl) pl), (Permutation (ql ++ pl) (k :: ql))
(Permutation (ql ++ pl) (k :: q)), (Permutation (ql ++ pl) (k :: p)), (Permutation (ql ++ pl) (k :: gv0)), (Permutation (ql ++ pl) (k :: pl)), (Permutation (ql ++ pl) (a :: ql)), (Permutation (ql ++ pl) (a :: q)), (Permutation (ql ++ pl) (a :: p)), (Permutation (ql ++ pl) (a :: gv0)), (Permutation (ql ++ pl) (a :: pl)), (Permutation (ql ++ pl) (merge ql ql))
(Permutation (ql ++ pl) (merge ql q)), (Permutation (ql ++ pl) (merge ql p)), (Permutation (ql ++ pl) (merge ql gv0)), (Permutation (ql ++ pl) (merge ql pl)), (Permutation (ql ++ pl) (merge q ql)), (Permutation (ql ++ pl) (merge q q)), (Permutation (ql ++ pl) (merge q p)), (Permutation (ql ++ pl) (merge q gv0)), (Permutation (ql ++ pl) (merge q pl)), (Permutation (ql ++ pl) (merge p ql))
(Permutation (ql ++ pl) (merge p q)), (Permutation (ql ++ pl) (merge p p)), (Permutation (ql ++ pl) (merge p gv0)), (Permutation (ql ++ pl) (merge p pl)), (Permutation (ql ++ pl) (merge gv0 ql)), (Permutation (ql ++ pl) (merge gv0 q)), (Permutation (ql ++ pl) (merge gv0 p)), (Permutation (ql ++ pl) (merge gv0 gv0)), (Permutation (ql ++ pl) (merge gv0 pl)), (Permutation (ql ++ pl) (merge pl ql))
(Permutation (ql ++ pl) (merge pl q)), (Permutation (ql ++ pl) (merge pl p)), (Permutation (ql ++ pl) (merge pl gv0)), (Permutation (ql ++ pl) (merge pl pl)), (Permutation (ql ++ pl) (insert k ql)), (Permutation (ql ++ pl) (insert k q)), (Permutation (ql ++ pl) (insert k p)), (Permutation (ql ++ pl) (insert k gv0)), (Permutation (ql ++ pl) (insert k pl)), (Permutation (ql ++ pl) (insert a ql))
(Permutation (ql ++ pl) (insert a q)), (Permutation (ql ++ pl) (insert a p)), (Permutation (ql ++ pl) (insert a gv0)), (Permutation (ql ++ pl) (insert a pl)), (Permutation (ql ++ pl) (maybe_swap ql)), (Permutation (ql ++ pl) (maybe_swap q)), (Permutation (ql ++ pl) (maybe_swap p)), (Permutation (ql ++ pl) (maybe_swap gv0)), (Permutation (ql ++ pl) (maybe_swap pl)), (Permutation (ql ++ pl) (ql ++ ql))
(Permutation (ql ++ pl) (ql ++ q)), (Permutation (ql ++ pl) (ql ++ p)), (Permutation (ql ++ pl) (ql ++ gv0)), (Permutation (ql ++ pl) (q ++ ql)), (Permutation (ql ++ pl) (q ++ q)), (Permutation (ql ++ pl) (q ++ p)), (Permutation (ql ++ pl) (q ++ gv0)), (Permutation (ql ++ pl) (q ++ pl)), (Permutation (ql ++ pl) (p ++ ql)), (Permutation (ql ++ pl) (p ++ q))
(Permutation (ql ++ pl) (p ++ p)), (Permutation (ql ++ pl) (p ++ gv0)), (Permutation (ql ++ pl) (p ++ pl)), (Permutation (ql ++ pl) (gv0 ++ ql)), (Permutation (ql ++ pl) (gv0 ++ q)), (Permutation (ql ++ pl) (gv0 ++ p)), (Permutation (ql ++ pl) (gv0 ++ gv0)), (Permutation (ql ++ pl) (gv0 ++ pl)), (Permutation (ql ++ pl) (pl ++ ql)), (Permutation (ql ++ pl) (pl ++ q))
(Permutation (ql ++ pl) (pl ++ p)), (Permutation (ql ++ pl) (pl ++ gv0)), (Permutation (ql ++ pl) (pl ++ pl)), (Permutation (ql ++ pl) []), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) q), (Permutation (q ++ ql) p), (Permutation (q ++ ql) gv0), (Permutation (q ++ ql) pl), (Permutation (q ++ ql) (k :: ql))
(Permutation (q ++ ql) (k :: q)), (Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (k :: gv0)), (Permutation (q ++ ql) (k :: pl)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (a :: gv0)), (Permutation (q ++ ql) (a :: pl)), (Permutation (q ++ ql) (merge ql ql))
(Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge ql gv0)), (Permutation (q ++ ql) (merge ql pl)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge q gv0)), (Permutation (q ++ ql) (merge q pl)), (Permutation (q ++ ql) (merge p ql))
(Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (merge p gv0)), (Permutation (q ++ ql) (merge p pl)), (Permutation (q ++ ql) (merge gv0 ql)), (Permutation (q ++ ql) (merge gv0 q)), (Permutation (q ++ ql) (merge gv0 p)), (Permutation (q ++ ql) (merge gv0 gv0)), (Permutation (q ++ ql) (merge gv0 pl)), (Permutation (q ++ ql) (merge pl ql))
(Permutation (q ++ ql) (merge pl q)), (Permutation (q ++ ql) (merge pl p)), (Permutation (q ++ ql) (merge pl gv0)), (Permutation (q ++ ql) (merge pl pl)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert k gv0)), (Permutation (q ++ ql) (insert k pl)), (Permutation (q ++ ql) (insert a ql))
(Permutation (q ++ ql) (insert a q)), (Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (insert a gv0)), (Permutation (q ++ ql) (insert a pl)), (Permutation (q ++ ql) (maybe_swap ql)), (Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (maybe_swap gv0)), (Permutation (q ++ ql) (maybe_swap pl)), (Permutation (q ++ ql) (ql ++ ql))
(Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ p)), (Permutation (q ++ ql) (ql ++ gv0)), (Permutation (q ++ ql) (ql ++ pl)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (q ++ gv0)), (Permutation (q ++ ql) (q ++ pl)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ q))
(Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) (p ++ gv0)), (Permutation (q ++ ql) (p ++ pl)), (Permutation (q ++ ql) (gv0 ++ ql)), (Permutation (q ++ ql) (gv0 ++ q)), (Permutation (q ++ ql) (gv0 ++ p)), (Permutation (q ++ ql) (gv0 ++ gv0)), (Permutation (q ++ ql) (gv0 ++ pl)), (Permutation (q ++ ql) (pl ++ ql)), (Permutation (q ++ ql) (pl ++ q))
(Permutation (q ++ ql) (pl ++ p)), (Permutation (q ++ ql) (pl ++ gv0)), (Permutation (q ++ ql) (pl ++ pl)), (Permutation (q ++ ql) []), (Permutation (q ++ q) ql), (Permutation (q ++ q) q), (Permutation (q ++ q) p), (Permutation (q ++ q) gv0), (Permutation (q ++ q) pl), (Permutation (q ++ q) (k :: ql))
(Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: gv0)), (Permutation (q ++ q) (k :: pl)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: gv0)), (Permutation (q ++ q) (a :: pl)), (Permutation (q ++ q) (merge ql ql))
(Permutation (q ++ q) (merge ql q)), (Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge ql gv0)), (Permutation (q ++ q) (merge ql pl)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q gv0)), (Permutation (q ++ q) (merge q pl)), (Permutation (q ++ q) (merge p ql))
(Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p gv0)), (Permutation (q ++ q) (merge p pl)), (Permutation (q ++ q) (merge gv0 ql)), (Permutation (q ++ q) (merge gv0 q)), (Permutation (q ++ q) (merge gv0 p)), (Permutation (q ++ q) (merge gv0 gv0)), (Permutation (q ++ q) (merge gv0 pl)), (Permutation (q ++ q) (merge pl ql))
(Permutation (q ++ q) (merge pl q)), (Permutation (q ++ q) (merge pl p)), (Permutation (q ++ q) (merge pl gv0)), (Permutation (q ++ q) (merge pl pl)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k gv0)), (Permutation (q ++ q) (insert k pl)), (Permutation (q ++ q) (insert a ql))
(Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a gv0)), (Permutation (q ++ q) (insert a pl)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap gv0)), (Permutation (q ++ q) (maybe_swap pl)), (Permutation (q ++ q) (ql ++ ql))
(Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (ql ++ gv0)), (Permutation (q ++ q) (ql ++ pl)), (Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (q ++ gv0)), (Permutation (q ++ q) (q ++ pl)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ q))
(Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ gv0)), (Permutation (q ++ q) (p ++ pl)), (Permutation (q ++ q) (gv0 ++ ql)), (Permutation (q ++ q) (gv0 ++ q)), (Permutation (q ++ q) (gv0 ++ p)), (Permutation (q ++ q) (gv0 ++ gv0)), (Permutation (q ++ q) (gv0 ++ pl)), (Permutation (q ++ q) (pl ++ ql)), (Permutation (q ++ q) (pl ++ q))
(Permutation (q ++ q) (pl ++ p)), (Permutation (q ++ q) (pl ++ gv0)), (Permutation (q ++ q) (pl ++ pl)), (Permutation (q ++ q) []), (Permutation (q ++ p) ql), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) gv0), (Permutation (q ++ p) pl), (Permutation (q ++ p) (k :: ql))
(Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: gv0)), (Permutation (q ++ p) (k :: pl)), (Permutation (q ++ p) (a :: ql)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: gv0)), (Permutation (q ++ p) (a :: pl)), (Permutation (q ++ p) (merge ql ql))
(Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge ql gv0)), (Permutation (q ++ p) (merge ql pl)), (Permutation (q ++ p) (merge q ql)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q gv0)), (Permutation (q ++ p) (merge q pl)), (Permutation (q ++ p) (merge p ql))
(Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p gv0)), (Permutation (q ++ p) (merge p pl)), (Permutation (q ++ p) (merge gv0 ql)), (Permutation (q ++ p) (merge gv0 q)), (Permutation (q ++ p) (merge gv0 p)), (Permutation (q ++ p) (merge gv0 gv0)), (Permutation (q ++ p) (merge gv0 pl)), (Permutation (q ++ p) (merge pl ql))
(Permutation (q ++ p) (merge pl q)), (Permutation (q ++ p) (merge pl p)), (Permutation (q ++ p) (merge pl gv0)), (Permutation (q ++ p) (merge pl pl)), (Permutation (q ++ p) (insert k ql)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert k gv0)), (Permutation (q ++ p) (insert k pl)), (Permutation (q ++ p) (insert a ql))
(Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a gv0)), (Permutation (q ++ p) (insert a pl)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap gv0)), (Permutation (q ++ p) (maybe_swap pl)), (Permutation (q ++ p) (ql ++ ql))
(Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (ql ++ gv0)), (Permutation (q ++ p) (ql ++ pl)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ gv0)), (Permutation (q ++ p) (q ++ pl)), (Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ q))
(Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) (p ++ gv0)), (Permutation (q ++ p) (p ++ pl)), (Permutation (q ++ p) (gv0 ++ ql)), (Permutation (q ++ p) (gv0 ++ q)), (Permutation (q ++ p) (gv0 ++ p)), (Permutation (q ++ p) (gv0 ++ gv0)), (Permutation (q ++ p) (gv0 ++ pl)), (Permutation (q ++ p) (pl ++ ql)), (Permutation (q ++ p) (pl ++ q))
(Permutation (q ++ p) (pl ++ p)), (Permutation (q ++ p) (pl ++ gv0)), (Permutation (q ++ p) (pl ++ pl)), (Permutation (q ++ p) []), (Permutation (q ++ gv0) ql), (Permutation (q ++ gv0) q), (Permutation (q ++ gv0) p), (Permutation (q ++ gv0) gv0), (Permutation (q ++ gv0) pl), (Permutation (q ++ gv0) (k :: ql))
(Permutation (q ++ gv0) (k :: q)), (Permutation (q ++ gv0) (k :: p)), (Permutation (q ++ gv0) (k :: gv0)), (Permutation (q ++ gv0) (k :: pl)), (Permutation (q ++ gv0) (a :: ql)), (Permutation (q ++ gv0) (a :: q)), (Permutation (q ++ gv0) (a :: p)), (Permutation (q ++ gv0) (a :: gv0)), (Permutation (q ++ gv0) (a :: pl)), (Permutation (q ++ gv0) (merge ql ql))
(Permutation (q ++ gv0) (merge ql q)), (Permutation (q ++ gv0) (merge ql p)), (Permutation (q ++ gv0) (merge ql gv0)), (Permutation (q ++ gv0) (merge ql pl)), (Permutation (q ++ gv0) (merge q ql)), (Permutation (q ++ gv0) (merge q q)), (Permutation (q ++ gv0) (merge q p)), (Permutation (q ++ gv0) (merge q gv0)), (Permutation (q ++ gv0) (merge q pl)), (Permutation (q ++ gv0) (merge p ql))
(Permutation (q ++ gv0) (merge p q)), (Permutation (q ++ gv0) (merge p p)), (Permutation (q ++ gv0) (merge p gv0)), (Permutation (q ++ gv0) (merge p pl)), (Permutation (q ++ gv0) (merge gv0 ql)), (Permutation (q ++ gv0) (merge gv0 q)), (Permutation (q ++ gv0) (merge gv0 p)), (Permutation (q ++ gv0) (merge gv0 gv0)), (Permutation (q ++ gv0) (merge gv0 pl)), (Permutation (q ++ gv0) (merge pl ql))
(Permutation (q ++ gv0) (merge pl q)), (Permutation (q ++ gv0) (merge pl p)), (Permutation (q ++ gv0) (merge pl gv0)), (Permutation (q ++ gv0) (merge pl pl)), (Permutation (q ++ gv0) (insert k ql)), (Permutation (q ++ gv0) (insert k q)), (Permutation (q ++ gv0) (insert k p)), (Permutation (q ++ gv0) (insert k gv0)), (Permutation (q ++ gv0) (insert k pl)), (Permutation (q ++ gv0) (insert a ql))
(Permutation (q ++ gv0) (insert a q)), (Permutation (q ++ gv0) (insert a p)), (Permutation (q ++ gv0) (insert a gv0)), (Permutation (q ++ gv0) (insert a pl)), (Permutation (q ++ gv0) (maybe_swap ql)), (Permutation (q ++ gv0) (maybe_swap q)), (Permutation (q ++ gv0) (maybe_swap p)), (Permutation (q ++ gv0) (maybe_swap gv0)), (Permutation (q ++ gv0) (maybe_swap pl)), (Permutation (q ++ gv0) (ql ++ ql))
(Permutation (q ++ gv0) (ql ++ q)), (Permutation (q ++ gv0) (ql ++ p)), (Permutation (q ++ gv0) (ql ++ gv0)), (Permutation (q ++ gv0) (ql ++ pl)), (Permutation (q ++ gv0) (q ++ ql)), (Permutation (q ++ gv0) (q ++ q)), (Permutation (q ++ gv0) (q ++ p)), (Permutation (q ++ gv0) (q ++ pl)), (Permutation (q ++ gv0) (p ++ ql)), (Permutation (q ++ gv0) (p ++ q))
(Permutation (q ++ gv0) (p ++ p)), (Permutation (q ++ gv0) (p ++ gv0)), (Permutation (q ++ gv0) (p ++ pl)), (Permutation (q ++ gv0) (gv0 ++ ql)), (Permutation (q ++ gv0) (gv0 ++ q)), (Permutation (q ++ gv0) (gv0 ++ p)), (Permutation (q ++ gv0) (gv0 ++ gv0)), (Permutation (q ++ gv0) (gv0 ++ pl)), (Permutation (q ++ gv0) (pl ++ ql)), (Permutation (q ++ gv0) (pl ++ q))
(Permutation (q ++ gv0) (pl ++ p)), (Permutation (q ++ gv0) (pl ++ gv0)), (Permutation (q ++ gv0) (pl ++ pl)), (Permutation (q ++ gv0) []), (Permutation (q ++ pl) ql), (Permutation (q ++ pl) q), (Permutation (q ++ pl) p), (Permutation (q ++ pl) gv0), (Permutation (q ++ pl) pl), (Permutation (q ++ pl) (k :: ql))
(Permutation (q ++ pl) (k :: q)), (Permutation (q ++ pl) (k :: p)), (Permutation (q ++ pl) (k :: gv0)), (Permutation (q ++ pl) (k :: pl)), (Permutation (q ++ pl) (a :: ql)), (Permutation (q ++ pl) (a :: q)), (Permutation (q ++ pl) (a :: p)), (Permutation (q ++ pl) (a :: gv0)), (Permutation (q ++ pl) (a :: pl)), (Permutation (q ++ pl) (merge ql ql))
(Permutation (q ++ pl) (merge ql q)), (Permutation (q ++ pl) (merge ql p)), (Permutation (q ++ pl) (merge ql gv0)), (Permutation (q ++ pl) (merge ql pl)), (Permutation (q ++ pl) (merge q ql)), (Permutation (q ++ pl) (merge q q)), (Permutation (q ++ pl) (merge q p)), (Permutation (q ++ pl) (merge q gv0)), (Permutation (q ++ pl) (merge q pl)), (Permutation (q ++ pl) (merge p ql))
(Permutation (q ++ pl) (merge p q)), (Permutation (q ++ pl) (merge p p)), (Permutation (q ++ pl) (merge p gv0)), (Permutation (q ++ pl) (merge p pl)), (Permutation (q ++ pl) (merge gv0 ql)), (Permutation (q ++ pl) (merge gv0 q)), (Permutation (q ++ pl) (merge gv0 p)), (Permutation (q ++ pl) (merge gv0 gv0)), (Permutation (q ++ pl) (merge gv0 pl)), (Permutation (q ++ pl) (merge pl ql))
(Permutation (q ++ pl) (merge pl q)), (Permutation (q ++ pl) (merge pl p)), (Permutation (q ++ pl) (merge pl gv0)), (Permutation (q ++ pl) (merge pl pl)), (Permutation (q ++ pl) (insert k ql)), (Permutation (q ++ pl) (insert k q)), (Permutation (q ++ pl) (insert k p)), (Permutation (q ++ pl) (insert k gv0)), (Permutation (q ++ pl) (insert k pl)), (Permutation (q ++ pl) (insert a ql))
(Permutation (q ++ pl) (insert a q)), (Permutation (q ++ pl) (insert a p)), (Permutation (q ++ pl) (insert a gv0)), (Permutation (q ++ pl) (insert a pl)), (Permutation (q ++ pl) (maybe_swap ql)), (Permutation (q ++ pl) (maybe_swap q)), (Permutation (q ++ pl) (maybe_swap p)), (Permutation (q ++ pl) (maybe_swap gv0)), (Permutation (q ++ pl) (maybe_swap pl)), (Permutation (q ++ pl) (ql ++ ql))
(Permutation (q ++ pl) (ql ++ q)), (Permutation (q ++ pl) (ql ++ p)), (Permutation (q ++ pl) (ql ++ gv0)), (Permutation (q ++ pl) (ql ++ pl)), (Permutation (q ++ pl) (q ++ ql)), (Permutation (q ++ pl) (q ++ q)), (Permutation (q ++ pl) (q ++ p)), (Permutation (q ++ pl) (q ++ gv0)), (Permutation (q ++ pl) (p ++ ql)), (Permutation (q ++ pl) (p ++ q))
(Permutation (q ++ pl) (p ++ p)), (Permutation (q ++ pl) (p ++ gv0)), (Permutation (q ++ pl) (p ++ pl)), (Permutation (q ++ pl) (gv0 ++ ql)), (Permutation (q ++ pl) (gv0 ++ q)), (Permutation (q ++ pl) (gv0 ++ p)), (Permutation (q ++ pl) (gv0 ++ gv0)), (Permutation (q ++ pl) (gv0 ++ pl)), (Permutation (q ++ pl) (pl ++ ql)), (Permutation (q ++ pl) (pl ++ q))
(Permutation (q ++ pl) (pl ++ p)), (Permutation (q ++ pl) (pl ++ gv0)), (Permutation (q ++ pl) (pl ++ pl)), (Permutation (q ++ pl) []), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) q), (Permutation (p ++ ql) p), (Permutation (p ++ ql) gv0), (Permutation (p ++ ql) pl), (Permutation (p ++ ql) (k :: ql))
(Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (k :: gv0)), (Permutation (p ++ ql) (k :: pl)), (Permutation (p ++ ql) (a :: ql)), (Permutation (p ++ ql) (a :: q)), (Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (a :: gv0)), (Permutation (p ++ ql) (a :: pl)), (Permutation (p ++ ql) (merge ql ql))
(Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge ql gv0)), (Permutation (p ++ ql) (merge ql pl)), (Permutation (p ++ ql) (merge q ql)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge q gv0)), (Permutation (p ++ ql) (merge q pl)), (Permutation (p ++ ql) (merge p ql))
(Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (merge p gv0)), (Permutation (p ++ ql) (merge p pl)), (Permutation (p ++ ql) (merge gv0 ql)), (Permutation (p ++ ql) (merge gv0 q)), (Permutation (p ++ ql) (merge gv0 p)), (Permutation (p ++ ql) (merge gv0 gv0)), (Permutation (p ++ ql) (merge gv0 pl)), (Permutation (p ++ ql) (merge pl ql))
(Permutation (p ++ ql) (merge pl q)), (Permutation (p ++ ql) (merge pl p)), (Permutation (p ++ ql) (merge pl gv0)), (Permutation (p ++ ql) (merge pl pl)), (Permutation (p ++ ql) (insert k ql)), (Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert k gv0)), (Permutation (p ++ ql) (insert k pl)), (Permutation (p ++ ql) (insert a ql))
(Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (insert a gv0)), (Permutation (p ++ ql) (insert a pl)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (maybe_swap gv0)), (Permutation (p ++ ql) (maybe_swap pl)), (Permutation (p ++ ql) (ql ++ ql))
(Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (ql ++ gv0)), (Permutation (p ++ ql) (ql ++ pl)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (q ++ gv0)), (Permutation (p ++ ql) (q ++ pl)), (Permutation (p ++ ql) (p ++ q))
(Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) (p ++ gv0)), (Permutation (p ++ ql) (p ++ pl)), (Permutation (p ++ ql) (gv0 ++ ql)), (Permutation (p ++ ql) (gv0 ++ q)), (Permutation (p ++ ql) (gv0 ++ p)), (Permutation (p ++ ql) (gv0 ++ gv0)), (Permutation (p ++ ql) (gv0 ++ pl)), (Permutation (p ++ ql) (pl ++ ql)), (Permutation (p ++ ql) (pl ++ q))
(Permutation (p ++ ql) (pl ++ p)), (Permutation (p ++ ql) (pl ++ gv0)), (Permutation (p ++ ql) (pl ++ pl)), (Permutation (p ++ ql) []), (Permutation (p ++ q) ql), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) gv0), (Permutation (p ++ q) pl), (Permutation (p ++ q) (k :: ql))
(Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: gv0)), (Permutation (p ++ q) (k :: pl)), (Permutation (p ++ q) (a :: ql)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (a :: gv0)), (Permutation (p ++ q) (a :: pl)), (Permutation (p ++ q) (merge ql ql))
(Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge ql gv0)), (Permutation (p ++ q) (merge ql pl)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q gv0)), (Permutation (p ++ q) (merge q pl)), (Permutation (p ++ q) (merge p ql))
(Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p gv0)), (Permutation (p ++ q) (merge p pl)), (Permutation (p ++ q) (merge gv0 ql)), (Permutation (p ++ q) (merge gv0 q)), (Permutation (p ++ q) (merge gv0 p)), (Permutation (p ++ q) (merge gv0 gv0)), (Permutation (p ++ q) (merge gv0 pl)), (Permutation (p ++ q) (merge pl ql))
(Permutation (p ++ q) (merge pl q)), (Permutation (p ++ q) (merge pl p)), (Permutation (p ++ q) (merge pl gv0)), (Permutation (p ++ q) (merge pl pl)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k gv0)), (Permutation (p ++ q) (insert k pl)), (Permutation (p ++ q) (insert a ql))
(Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a gv0)), (Permutation (p ++ q) (insert a pl)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap gv0)), (Permutation (p ++ q) (maybe_swap pl)), (Permutation (p ++ q) (ql ++ ql))
(Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (ql ++ gv0)), (Permutation (p ++ q) (ql ++ pl)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ gv0)), (Permutation (p ++ q) (q ++ pl)), (Permutation (p ++ q) (p ++ ql))
(Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ gv0)), (Permutation (p ++ q) (p ++ pl)), (Permutation (p ++ q) (gv0 ++ ql)), (Permutation (p ++ q) (gv0 ++ q)), (Permutation (p ++ q) (gv0 ++ p)), (Permutation (p ++ q) (gv0 ++ gv0)), (Permutation (p ++ q) (gv0 ++ pl)), (Permutation (p ++ q) (pl ++ ql)), (Permutation (p ++ q) (pl ++ q))
(Permutation (p ++ q) (pl ++ p)), (Permutation (p ++ q) (pl ++ gv0)), (Permutation (p ++ q) (pl ++ pl)), (Permutation (p ++ q) []), (Permutation (p ++ p) ql), (Permutation (p ++ p) q), (Permutation (p ++ p) p), (Permutation (p ++ p) gv0), (Permutation (p ++ p) pl), (Permutation (p ++ p) (k :: ql))
(Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: gv0)), (Permutation (p ++ p) (k :: pl)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: gv0)), (Permutation (p ++ p) (a :: pl)), (Permutation (p ++ p) (merge ql ql))
(Permutation (p ++ p) (merge ql q)), (Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge ql gv0)), (Permutation (p ++ p) (merge ql pl)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q gv0)), (Permutation (p ++ p) (merge q pl)), (Permutation (p ++ p) (merge p ql))
(Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge p pl)), (Permutation (p ++ p) (merge gv0 ql)), (Permutation (p ++ p) (merge gv0 q)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (merge gv0 pl)), (Permutation (p ++ p) (merge pl ql))
(Permutation (p ++ p) (merge pl q)), (Permutation (p ++ p) (merge pl p)), (Permutation (p ++ p) (merge pl gv0)), (Permutation (p ++ p) (merge pl pl)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k gv0)), (Permutation (p ++ p) (insert k pl)), (Permutation (p ++ p) (insert a ql))
(Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a gv0)), (Permutation (p ++ p) (insert a pl)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap gv0)), (Permutation (p ++ p) (maybe_swap pl)), (Permutation (p ++ p) (ql ++ ql))
(Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (ql ++ gv0)), (Permutation (p ++ p) (ql ++ pl)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (q ++ gv0)), (Permutation (p ++ p) (q ++ pl)), (Permutation (p ++ p) (p ++ ql))
(Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (p ++ pl)), (Permutation (p ++ p) (gv0 ++ ql)), (Permutation (p ++ p) (gv0 ++ q)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) (gv0 ++ pl)), (Permutation (p ++ p) (pl ++ ql)), (Permutation (p ++ p) (pl ++ q))
(Permutation (p ++ p) (pl ++ p)), (Permutation (p ++ p) (pl ++ gv0)), (Permutation (p ++ p) (pl ++ pl)), (Permutation (p ++ p) []), (Permutation (p ++ gv0) ql), (Permutation (p ++ gv0) q), (Permutation (p ++ gv0) p), (Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) pl), (Permutation (p ++ gv0) (k :: ql))
(Permutation (p ++ gv0) (k :: q)), (Permutation (p ++ gv0) (k :: p)), (Permutation (p ++ gv0) (k :: gv0)), (Permutation (p ++ gv0) (k :: pl)), (Permutation (p ++ gv0) (a :: ql)), (Permutation (p ++ gv0) (a :: q)), (Permutation (p ++ gv0) (a :: p)), (Permutation (p ++ gv0) (a :: gv0)), (Permutation (p ++ gv0) (a :: pl)), (Permutation (p ++ gv0) (merge ql ql))
(Permutation (p ++ gv0) (merge ql q)), (Permutation (p ++ gv0) (merge ql p)), (Permutation (p ++ gv0) (merge ql gv0)), (Permutation (p ++ gv0) (merge ql pl)), (Permutation (p ++ gv0) (merge q ql)), (Permutation (p ++ gv0) (merge q q)), (Permutation (p ++ gv0) (merge q p)), (Permutation (p ++ gv0) (merge q gv0)), (Permutation (p ++ gv0) (merge q pl)), (Permutation (p ++ gv0) (merge p ql))
(Permutation (p ++ gv0) (merge p q)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge p pl)), (Permutation (p ++ gv0) (merge gv0 ql)), (Permutation (p ++ gv0) (merge gv0 q)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 gv0)), (Permutation (p ++ gv0) (merge gv0 pl)), (Permutation (p ++ gv0) (merge pl ql))
(Permutation (p ++ gv0) (merge pl q)), (Permutation (p ++ gv0) (merge pl p)), (Permutation (p ++ gv0) (merge pl gv0)), (Permutation (p ++ gv0) (merge pl pl)), (Permutation (p ++ gv0) (insert k ql)), (Permutation (p ++ gv0) (insert k q)), (Permutation (p ++ gv0) (insert k p)), (Permutation (p ++ gv0) (insert k gv0)), (Permutation (p ++ gv0) (insert k pl)), (Permutation (p ++ gv0) (insert a ql))
(Permutation (p ++ gv0) (insert a q)), (Permutation (p ++ gv0) (insert a p)), (Permutation (p ++ gv0) (insert a gv0)), (Permutation (p ++ gv0) (insert a pl)), (Permutation (p ++ gv0) (maybe_swap ql)), (Permutation (p ++ gv0) (maybe_swap q)), (Permutation (p ++ gv0) (maybe_swap p)), (Permutation (p ++ gv0) (maybe_swap gv0)), (Permutation (p ++ gv0) (maybe_swap pl)), (Permutation (p ++ gv0) (ql ++ ql))
(Permutation (p ++ gv0) (ql ++ q)), (Permutation (p ++ gv0) (ql ++ p)), (Permutation (p ++ gv0) (ql ++ gv0)), (Permutation (p ++ gv0) (ql ++ pl)), (Permutation (p ++ gv0) (q ++ ql)), (Permutation (p ++ gv0) (q ++ q)), (Permutation (p ++ gv0) (q ++ p)), (Permutation (p ++ gv0) (q ++ gv0)), (Permutation (p ++ gv0) (q ++ pl)), (Permutation (p ++ gv0) (p ++ ql))
(Permutation (p ++ gv0) (p ++ q)), (Permutation (p ++ gv0) (p ++ p)), (Permutation (p ++ gv0) (p ++ pl)), (Permutation (p ++ gv0) (gv0 ++ ql)), (Permutation (p ++ gv0) (gv0 ++ q)), (Permutation (p ++ gv0) (gv0 ++ p)), (Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) (gv0 ++ pl)), (Permutation (p ++ gv0) (pl ++ ql)), (Permutation (p ++ gv0) (pl ++ q))
(Permutation (p ++ gv0) (pl ++ p)), (Permutation (p ++ gv0) (pl ++ gv0)), (Permutation (p ++ gv0) (pl ++ pl)), (Permutation (p ++ gv0) []), (Permutation (p ++ pl) ql), (Permutation (p ++ pl) q), (Permutation (p ++ pl) p), (Permutation (p ++ pl) gv0), (Permutation (p ++ pl) pl), (Permutation (p ++ pl) (k :: ql))
(Permutation (p ++ pl) (k :: q)), (Permutation (p ++ pl) (k :: p)), (Permutation (p ++ pl) (k :: gv0)), (Permutation (p ++ pl) (k :: pl)), (Permutation (p ++ pl) (a :: ql)), (Permutation (p ++ pl) (a :: q)), (Permutation (p ++ pl) (a :: p)), (Permutation (p ++ pl) (a :: gv0)), (Permutation (p ++ pl) (a :: pl)), (Permutation (p ++ pl) (merge ql ql))
(Permutation (p ++ pl) (merge ql q)), (Permutation (p ++ pl) (merge ql p)), (Permutation (p ++ pl) (merge ql gv0)), (Permutation (p ++ pl) (merge ql pl)), (Permutation (p ++ pl) (merge q ql)), (Permutation (p ++ pl) (merge q q)), (Permutation (p ++ pl) (merge q p)), (Permutation (p ++ pl) (merge q gv0)), (Permutation (p ++ pl) (merge q pl)), (Permutation (p ++ pl) (merge p ql))
(Permutation (p ++ pl) (merge p q)), (Permutation (p ++ pl) (merge p p)), (Permutation (p ++ pl) (merge p gv0)), (Permutation (p ++ pl) (merge p pl)), (Permutation (p ++ pl) (merge gv0 ql)), (Permutation (p ++ pl) (merge gv0 q)), (Permutation (p ++ pl) (merge gv0 p)), (Permutation (p ++ pl) (merge gv0 gv0)), (Permutation (p ++ pl) (merge gv0 pl)), (Permutation (p ++ pl) (merge pl ql))
(Permutation (p ++ pl) (merge pl q)), (Permutation (p ++ pl) (merge pl p)), (Permutation (p ++ pl) (merge pl gv0)), (Permutation (p ++ pl) (merge pl pl)), (Permutation (p ++ pl) (insert k ql)), (Permutation (p ++ pl) (insert k q)), (Permutation (p ++ pl) (insert k p)), (Permutation (p ++ pl) (insert k gv0)), (Permutation (p ++ pl) (insert k pl)), (Permutation (p ++ pl) (insert a ql))
(Permutation (p ++ pl) (insert a q)), (Permutation (p ++ pl) (insert a p)), (Permutation (p ++ pl) (insert a gv0)), (Permutation (p ++ pl) (insert a pl)), (Permutation (p ++ pl) (maybe_swap ql)), (Permutation (p ++ pl) (maybe_swap q)), (Permutation (p ++ pl) (maybe_swap p)), (Permutation (p ++ pl) (maybe_swap gv0)), (Permutation (p ++ pl) (maybe_swap pl)), (Permutation (p ++ pl) (ql ++ ql))
(Permutation (p ++ pl) (ql ++ q)), (Permutation (p ++ pl) (ql ++ p)), (Permutation (p ++ pl) (ql ++ gv0)), (Permutation (p ++ pl) (ql ++ pl)), (Permutation (p ++ pl) (q ++ ql)), (Permutation (p ++ pl) (q ++ q)), (Permutation (p ++ pl) (q ++ p)), (Permutation (p ++ pl) (q ++ gv0)), (Permutation (p ++ pl) (q ++ pl)), (Permutation (p ++ pl) (p ++ ql))
(Permutation (p ++ pl) (p ++ q)), (Permutation (p ++ pl) (p ++ p)), (Permutation (p ++ pl) (p ++ gv0)), (Permutation (p ++ pl) (gv0 ++ ql)), (Permutation (p ++ pl) (gv0 ++ q)), (Permutation (p ++ pl) (gv0 ++ p)), (Permutation (p ++ pl) (gv0 ++ gv0)), (Permutation (p ++ pl) (gv0 ++ pl)), (Permutation (p ++ pl) (pl ++ ql)), (Permutation (p ++ pl) (pl ++ q))
(Permutation (p ++ pl) (pl ++ p)), (Permutation (p ++ pl) (pl ++ gv0)), (Permutation (p ++ pl) (pl ++ pl)), (Permutation (p ++ pl) []), (Permutation (gv0 ++ ql) ql), (Permutation (gv0 ++ ql) q), (Permutation (gv0 ++ ql) p), (Permutation (gv0 ++ ql) gv0), (Permutation (gv0 ++ ql) pl), (Permutation (gv0 ++ ql) (k :: ql))
(Permutation (gv0 ++ ql) (k :: q)), (Permutation (gv0 ++ ql) (k :: p)), (Permutation (gv0 ++ ql) (k :: gv0)), (Permutation (gv0 ++ ql) (k :: pl)), (Permutation (gv0 ++ ql) (a :: ql)), (Permutation (gv0 ++ ql) (a :: q)), (Permutation (gv0 ++ ql) (a :: p)), (Permutation (gv0 ++ ql) (a :: gv0)), (Permutation (gv0 ++ ql) (a :: pl)), (Permutation (gv0 ++ ql) (merge ql ql))
(Permutation (gv0 ++ ql) (merge ql q)), (Permutation (gv0 ++ ql) (merge ql p)), (Permutation (gv0 ++ ql) (merge ql gv0)), (Permutation (gv0 ++ ql) (merge ql pl)), (Permutation (gv0 ++ ql) (merge q ql)), (Permutation (gv0 ++ ql) (merge q q)), (Permutation (gv0 ++ ql) (merge q p)), (Permutation (gv0 ++ ql) (merge q gv0)), (Permutation (gv0 ++ ql) (merge q pl)), (Permutation (gv0 ++ ql) (merge p ql))
(Permutation (gv0 ++ ql) (merge p q)), (Permutation (gv0 ++ ql) (merge p p)), (Permutation (gv0 ++ ql) (merge p gv0)), (Permutation (gv0 ++ ql) (merge p pl)), (Permutation (gv0 ++ ql) (merge gv0 ql)), (Permutation (gv0 ++ ql) (merge gv0 q)), (Permutation (gv0 ++ ql) (merge gv0 p)), (Permutation (gv0 ++ ql) (merge gv0 gv0)), (Permutation (gv0 ++ ql) (merge gv0 pl)), (Permutation (gv0 ++ ql) (merge pl ql))
(Permutation (gv0 ++ ql) (merge pl q)), (Permutation (gv0 ++ ql) (merge pl p)), (Permutation (gv0 ++ ql) (merge pl gv0)), (Permutation (gv0 ++ ql) (merge pl pl)), (Permutation (gv0 ++ ql) (insert k ql)), (Permutation (gv0 ++ ql) (insert k q)), (Permutation (gv0 ++ ql) (insert k p)), (Permutation (gv0 ++ ql) (insert k gv0)), (Permutation (gv0 ++ ql) (insert k pl)), (Permutation (gv0 ++ ql) (insert a ql))
(Permutation (gv0 ++ ql) (insert a q)), (Permutation (gv0 ++ ql) (insert a p)), (Permutation (gv0 ++ ql) (insert a gv0)), (Permutation (gv0 ++ ql) (insert a pl)), (Permutation (gv0 ++ ql) (maybe_swap ql)), (Permutation (gv0 ++ ql) (maybe_swap q)), (Permutation (gv0 ++ ql) (maybe_swap p)), (Permutation (gv0 ++ ql) (maybe_swap gv0)), (Permutation (gv0 ++ ql) (maybe_swap pl)), (Permutation (gv0 ++ ql) (ql ++ ql))
(Permutation (gv0 ++ ql) (ql ++ q)), (Permutation (gv0 ++ ql) (ql ++ p)), (Permutation (gv0 ++ ql) (ql ++ gv0)), (Permutation (gv0 ++ ql) (ql ++ pl)), (Permutation (gv0 ++ ql) (q ++ ql)), (Permutation (gv0 ++ ql) (q ++ q)), (Permutation (gv0 ++ ql) (q ++ p)), (Permutation (gv0 ++ ql) (q ++ gv0)), (Permutation (gv0 ++ ql) (q ++ pl)), (Permutation (gv0 ++ ql) (p ++ ql))
(Permutation (gv0 ++ ql) (p ++ q)), (Permutation (gv0 ++ ql) (p ++ p)), (Permutation (gv0 ++ ql) (p ++ gv0)), (Permutation (gv0 ++ ql) (p ++ pl)), (Permutation (gv0 ++ ql) (gv0 ++ q)), (Permutation (gv0 ++ ql) (gv0 ++ p)), (Permutation (gv0 ++ ql) (gv0 ++ gv0)), (Permutation (gv0 ++ ql) (gv0 ++ pl)), (Permutation (gv0 ++ ql) (pl ++ ql)), (Permutation (gv0 ++ ql) (pl ++ q))
(Permutation (gv0 ++ ql) (pl ++ p)), (Permutation (gv0 ++ ql) (pl ++ gv0)), (Permutation (gv0 ++ ql) (pl ++ pl)), (Permutation (gv0 ++ ql) []), (Permutation (gv0 ++ q) ql), (Permutation (gv0 ++ q) q), (Permutation (gv0 ++ q) p), (Permutation (gv0 ++ q) gv0), (Permutation (gv0 ++ q) pl), (Permutation (gv0 ++ q) (k :: ql))
(Permutation (gv0 ++ q) (k :: q)), (Permutation (gv0 ++ q) (k :: p)), (Permutation (gv0 ++ q) (k :: gv0)), (Permutation (gv0 ++ q) (k :: pl)), (Permutation (gv0 ++ q) (a :: ql)), (Permutation (gv0 ++ q) (a :: q)), (Permutation (gv0 ++ q) (a :: p)), (Permutation (gv0 ++ q) (a :: gv0)), (Permutation (gv0 ++ q) (a :: pl)), (Permutation (gv0 ++ q) (merge ql ql))
(Permutation (gv0 ++ q) (merge ql q)), (Permutation (gv0 ++ q) (merge ql p)), (Permutation (gv0 ++ q) (merge ql gv0)), (Permutation (gv0 ++ q) (merge ql pl)), (Permutation (gv0 ++ q) (merge q ql)), (Permutation (gv0 ++ q) (merge q q)), (Permutation (gv0 ++ q) (merge q p)), (Permutation (gv0 ++ q) (merge q gv0)), (Permutation (gv0 ++ q) (merge q pl)), (Permutation (gv0 ++ q) (merge p ql))
(Permutation (gv0 ++ q) (merge p q)), (Permutation (gv0 ++ q) (merge p p)), (Permutation (gv0 ++ q) (merge p gv0)), (Permutation (gv0 ++ q) (merge p pl)), (Permutation (gv0 ++ q) (merge gv0 ql)), (Permutation (gv0 ++ q) (merge gv0 q)), (Permutation (gv0 ++ q) (merge gv0 p)), (Permutation (gv0 ++ q) (merge gv0 gv0)), (Permutation (gv0 ++ q) (merge gv0 pl)), (Permutation (gv0 ++ q) (merge pl ql))
(Permutation (gv0 ++ q) (merge pl q)), (Permutation (gv0 ++ q) (merge pl p)), (Permutation (gv0 ++ q) (merge pl gv0)), (Permutation (gv0 ++ q) (merge pl pl)), (Permutation (gv0 ++ q) (insert k ql)), (Permutation (gv0 ++ q) (insert k q)), (Permutation (gv0 ++ q) (insert k p)), (Permutation (gv0 ++ q) (insert k gv0)), (Permutation (gv0 ++ q) (insert k pl)), (Permutation (gv0 ++ q) (insert a ql))
(Permutation (gv0 ++ q) (insert a q)), (Permutation (gv0 ++ q) (insert a p)), (Permutation (gv0 ++ q) (insert a gv0)), (Permutation (gv0 ++ q) (insert a pl)), (Permutation (gv0 ++ q) (maybe_swap ql)), (Permutation (gv0 ++ q) (maybe_swap q)), (Permutation (gv0 ++ q) (maybe_swap p)), (Permutation (gv0 ++ q) (maybe_swap gv0)), (Permutation (gv0 ++ q) (maybe_swap pl)), (Permutation (gv0 ++ q) (ql ++ ql))
(Permutation (gv0 ++ q) (ql ++ q)), (Permutation (gv0 ++ q) (ql ++ p)), (Permutation (gv0 ++ q) (ql ++ gv0)), (Permutation (gv0 ++ q) (ql ++ pl)), (Permutation (gv0 ++ q) (q ++ ql)), (Permutation (gv0 ++ q) (q ++ q)), (Permutation (gv0 ++ q) (q ++ p)), (Permutation (gv0 ++ q) (q ++ gv0)), (Permutation (gv0 ++ q) (q ++ pl)), (Permutation (gv0 ++ q) (p ++ ql))
(Permutation (gv0 ++ q) (p ++ q)), (Permutation (gv0 ++ q) (p ++ p)), (Permutation (gv0 ++ q) (p ++ gv0)), (Permutation (gv0 ++ q) (p ++ pl)), (Permutation (gv0 ++ q) (gv0 ++ ql)), (Permutation (gv0 ++ q) (gv0 ++ p)), (Permutation (gv0 ++ q) (gv0 ++ gv0)), (Permutation (gv0 ++ q) (gv0 ++ pl)), (Permutation (gv0 ++ q) (pl ++ ql)), (Permutation (gv0 ++ q) (pl ++ q))
(Permutation (gv0 ++ q) (pl ++ p)), (Permutation (gv0 ++ q) (pl ++ gv0)), (Permutation (gv0 ++ q) (pl ++ pl)), (Permutation (gv0 ++ q) []), (Permutation (gv0 ++ p) ql), (Permutation (gv0 ++ p) q), (Permutation (gv0 ++ p) p), (Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) pl), (Permutation (gv0 ++ p) (k :: ql))
(Permutation (gv0 ++ p) (k :: q)), (Permutation (gv0 ++ p) (k :: p)), (Permutation (gv0 ++ p) (k :: gv0)), (Permutation (gv0 ++ p) (k :: pl)), (Permutation (gv0 ++ p) (a :: ql)), (Permutation (gv0 ++ p) (a :: q)), (Permutation (gv0 ++ p) (a :: p)), (Permutation (gv0 ++ p) (a :: gv0)), (Permutation (gv0 ++ p) (a :: pl)), (Permutation (gv0 ++ p) (merge ql ql))
(Permutation (gv0 ++ p) (merge ql q)), (Permutation (gv0 ++ p) (merge ql p)), (Permutation (gv0 ++ p) (merge ql gv0)), (Permutation (gv0 ++ p) (merge ql pl)), (Permutation (gv0 ++ p) (merge q ql)), (Permutation (gv0 ++ p) (merge q q)), (Permutation (gv0 ++ p) (merge q p)), (Permutation (gv0 ++ p) (merge q gv0)), (Permutation (gv0 ++ p) (merge q pl)), (Permutation (gv0 ++ p) (merge p ql))
(Permutation (gv0 ++ p) (merge p q)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge p pl)), (Permutation (gv0 ++ p) (merge gv0 ql)), (Permutation (gv0 ++ p) (merge gv0 q)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 gv0)), (Permutation (gv0 ++ p) (merge gv0 pl)), (Permutation (gv0 ++ p) (merge pl ql))
(Permutation (gv0 ++ p) (merge pl q)), (Permutation (gv0 ++ p) (merge pl p)), (Permutation (gv0 ++ p) (merge pl gv0)), (Permutation (gv0 ++ p) (merge pl pl)), (Permutation (gv0 ++ p) (insert k ql)), (Permutation (gv0 ++ p) (insert k q)), (Permutation (gv0 ++ p) (insert k p)), (Permutation (gv0 ++ p) (insert k gv0)), (Permutation (gv0 ++ p) (insert k pl)), (Permutation (gv0 ++ p) (insert a ql))
(Permutation (gv0 ++ p) (insert a q)), (Permutation (gv0 ++ p) (insert a p)), (Permutation (gv0 ++ p) (insert a gv0)), (Permutation (gv0 ++ p) (insert a pl)), (Permutation (gv0 ++ p) (maybe_swap ql)), (Permutation (gv0 ++ p) (maybe_swap q)), (Permutation (gv0 ++ p) (maybe_swap p)), (Permutation (gv0 ++ p) (maybe_swap gv0)), (Permutation (gv0 ++ p) (maybe_swap pl)), (Permutation (gv0 ++ p) (ql ++ ql))
(Permutation (gv0 ++ p) (ql ++ q)), (Permutation (gv0 ++ p) (ql ++ p)), (Permutation (gv0 ++ p) (ql ++ gv0)), (Permutation (gv0 ++ p) (ql ++ pl)), (Permutation (gv0 ++ p) (q ++ ql)), (Permutation (gv0 ++ p) (q ++ q)), (Permutation (gv0 ++ p) (q ++ p)), (Permutation (gv0 ++ p) (q ++ gv0)), (Permutation (gv0 ++ p) (q ++ pl)), (Permutation (gv0 ++ p) (p ++ ql))
(Permutation (gv0 ++ p) (p ++ q)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (p ++ pl)), (Permutation (gv0 ++ p) (gv0 ++ ql)), (Permutation (gv0 ++ p) (gv0 ++ q)), (Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ pl)), (Permutation (gv0 ++ p) (pl ++ ql)), (Permutation (gv0 ++ p) (pl ++ q))
(Permutation (gv0 ++ p) (pl ++ p)), (Permutation (gv0 ++ p) (pl ++ gv0)), (Permutation (gv0 ++ p) (pl ++ pl)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ gv0) ql), (Permutation (gv0 ++ gv0) q), (Permutation (gv0 ++ gv0) p), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) pl), (Permutation (gv0 ++ gv0) (k :: ql))
(Permutation (gv0 ++ gv0) (k :: q)), (Permutation (gv0 ++ gv0) (k :: p)), (Permutation (gv0 ++ gv0) (k :: gv0)), (Permutation (gv0 ++ gv0) (k :: pl)), (Permutation (gv0 ++ gv0) (a :: ql)), (Permutation (gv0 ++ gv0) (a :: q)), (Permutation (gv0 ++ gv0) (a :: p)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (a :: pl)), (Permutation (gv0 ++ gv0) (merge ql ql))
(Permutation (gv0 ++ gv0) (merge ql q)), (Permutation (gv0 ++ gv0) (merge ql p)), (Permutation (gv0 ++ gv0) (merge ql gv0)), (Permutation (gv0 ++ gv0) (merge ql pl)), (Permutation (gv0 ++ gv0) (merge q ql)), (Permutation (gv0 ++ gv0) (merge q q)), (Permutation (gv0 ++ gv0) (merge q p)), (Permutation (gv0 ++ gv0) (merge q gv0)), (Permutation (gv0 ++ gv0) (merge q pl)), (Permutation (gv0 ++ gv0) (merge p ql))
(Permutation (gv0 ++ gv0) (merge p q)), (Permutation (gv0 ++ gv0) (merge p p)), (Permutation (gv0 ++ gv0) (merge p gv0)), (Permutation (gv0 ++ gv0) (merge p pl)), (Permutation (gv0 ++ gv0) (merge gv0 ql)), (Permutation (gv0 ++ gv0) (merge gv0 q)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (merge gv0 pl)), (Permutation (gv0 ++ gv0) (merge pl ql))
(Permutation (gv0 ++ gv0) (merge pl q)), (Permutation (gv0 ++ gv0) (merge pl p)), (Permutation (gv0 ++ gv0) (merge pl gv0)), (Permutation (gv0 ++ gv0) (merge pl pl)), (Permutation (gv0 ++ gv0) (insert k ql)), (Permutation (gv0 ++ gv0) (insert k q)), (Permutation (gv0 ++ gv0) (insert k p)), (Permutation (gv0 ++ gv0) (insert k gv0)), (Permutation (gv0 ++ gv0) (insert k pl)), (Permutation (gv0 ++ gv0) (insert a ql))
(Permutation (gv0 ++ gv0) (insert a q)), (Permutation (gv0 ++ gv0) (insert a p)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (insert a pl)), (Permutation (gv0 ++ gv0) (maybe_swap ql)), (Permutation (gv0 ++ gv0) (maybe_swap q)), (Permutation (gv0 ++ gv0) (maybe_swap p)), (Permutation (gv0 ++ gv0) (maybe_swap gv0)), (Permutation (gv0 ++ gv0) (maybe_swap pl)), (Permutation (gv0 ++ gv0) (ql ++ ql))
(Permutation (gv0 ++ gv0) (ql ++ q)), (Permutation (gv0 ++ gv0) (ql ++ p)), (Permutation (gv0 ++ gv0) (ql ++ gv0)), (Permutation (gv0 ++ gv0) (ql ++ pl)), (Permutation (gv0 ++ gv0) (q ++ ql)), (Permutation (gv0 ++ gv0) (q ++ q)), (Permutation (gv0 ++ gv0) (q ++ p)), (Permutation (gv0 ++ gv0) (q ++ gv0)), (Permutation (gv0 ++ gv0) (q ++ pl)), (Permutation (gv0 ++ gv0) (p ++ ql))
(Permutation (gv0 ++ gv0) (p ++ q)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (p ++ pl)), (Permutation (gv0 ++ gv0) (gv0 ++ ql)), (Permutation (gv0 ++ gv0) (gv0 ++ q)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) (gv0 ++ pl)), (Permutation (gv0 ++ gv0) (pl ++ ql)), (Permutation (gv0 ++ gv0) (pl ++ q))
(Permutation (gv0 ++ gv0) (pl ++ p)), (Permutation (gv0 ++ gv0) (pl ++ gv0)), (Permutation (gv0 ++ gv0) (pl ++ pl)), (Permutation (gv0 ++ gv0) []), (Permutation (gv0 ++ pl) ql), (Permutation (gv0 ++ pl) q), (Permutation (gv0 ++ pl) p), (Permutation (gv0 ++ pl) gv0), (Permutation (gv0 ++ pl) pl), (Permutation (gv0 ++ pl) (k :: ql))
(Permutation (gv0 ++ pl) (k :: q)), (Permutation (gv0 ++ pl) (k :: p)), (Permutation (gv0 ++ pl) (k :: gv0)), (Permutation (gv0 ++ pl) (k :: pl)), (Permutation (gv0 ++ pl) (a :: ql)), (Permutation (gv0 ++ pl) (a :: q)), (Permutation (gv0 ++ pl) (a :: p)), (Permutation (gv0 ++ pl) (a :: gv0)), (Permutation (gv0 ++ pl) (a :: pl)), (Permutation (gv0 ++ pl) (merge ql ql))
(Permutation (gv0 ++ pl) (merge ql q)), (Permutation (gv0 ++ pl) (merge ql p)), (Permutation (gv0 ++ pl) (merge ql gv0)), (Permutation (gv0 ++ pl) (merge ql pl)), (Permutation (gv0 ++ pl) (merge q ql)), (Permutation (gv0 ++ pl) (merge q q)), (Permutation (gv0 ++ pl) (merge q p)), (Permutation (gv0 ++ pl) (merge q gv0)), (Permutation (gv0 ++ pl) (merge q pl)), (Permutation (gv0 ++ pl) (merge p ql))
(Permutation (gv0 ++ pl) (merge p q)), (Permutation (gv0 ++ pl) (merge p p)), (Permutation (gv0 ++ pl) (merge p gv0)), (Permutation (gv0 ++ pl) (merge p pl)), (Permutation (gv0 ++ pl) (merge gv0 ql)), (Permutation (gv0 ++ pl) (merge gv0 q)), (Permutation (gv0 ++ pl) (merge gv0 p)), (Permutation (gv0 ++ pl) (merge gv0 gv0)), (Permutation (gv0 ++ pl) (merge gv0 pl)), (Permutation (gv0 ++ pl) (merge pl ql))
(Permutation (gv0 ++ pl) (merge pl q)), (Permutation (gv0 ++ pl) (merge pl p)), (Permutation (gv0 ++ pl) (merge pl gv0)), (Permutation (gv0 ++ pl) (merge pl pl)), (Permutation (gv0 ++ pl) (insert k ql)), (Permutation (gv0 ++ pl) (insert k q)), (Permutation (gv0 ++ pl) (insert k p)), (Permutation (gv0 ++ pl) (insert k gv0)), (Permutation (gv0 ++ pl) (insert k pl)), (Permutation (gv0 ++ pl) (insert a ql))
(Permutation (gv0 ++ pl) (insert a q)), (Permutation (gv0 ++ pl) (insert a p)), (Permutation (gv0 ++ pl) (insert a gv0)), (Permutation (gv0 ++ pl) (insert a pl)), (Permutation (gv0 ++ pl) (maybe_swap ql)), (Permutation (gv0 ++ pl) (maybe_swap q)), (Permutation (gv0 ++ pl) (maybe_swap p)), (Permutation (gv0 ++ pl) (maybe_swap gv0)), (Permutation (gv0 ++ pl) (maybe_swap pl)), (Permutation (gv0 ++ pl) (ql ++ ql))
(Permutation (gv0 ++ pl) (ql ++ q)), (Permutation (gv0 ++ pl) (ql ++ p)), (Permutation (gv0 ++ pl) (ql ++ gv0)), (Permutation (gv0 ++ pl) (ql ++ pl)), (Permutation (gv0 ++ pl) (q ++ ql)), (Permutation (gv0 ++ pl) (q ++ q)), (Permutation (gv0 ++ pl) (q ++ p)), (Permutation (gv0 ++ pl) (q ++ gv0)), (Permutation (gv0 ++ pl) (q ++ pl)), (Permutation (gv0 ++ pl) (p ++ ql))
(Permutation (gv0 ++ pl) (p ++ q)), (Permutation (gv0 ++ pl) (p ++ p)), (Permutation (gv0 ++ pl) (p ++ gv0)), (Permutation (gv0 ++ pl) (p ++ pl)), (Permutation (gv0 ++ pl) (gv0 ++ ql)), (Permutation (gv0 ++ pl) (gv0 ++ q)), (Permutation (gv0 ++ pl) (gv0 ++ p)), (Permutation (gv0 ++ pl) (gv0 ++ gv0)), (Permutation (gv0 ++ pl) (pl ++ ql)), (Permutation (gv0 ++ pl) (pl ++ q))
(Permutation (gv0 ++ pl) (pl ++ p)), (Permutation (gv0 ++ pl) (pl ++ gv0)), (Permutation (gv0 ++ pl) (pl ++ pl)), (Permutation (gv0 ++ pl) []), (Permutation (pl ++ ql) ql), (Permutation (pl ++ ql) q), (Permutation (pl ++ ql) p), (Permutation (pl ++ ql) gv0), (Permutation (pl ++ ql) pl), (Permutation (pl ++ ql) (k :: ql))
(Permutation (pl ++ ql) (k :: q)), (Permutation (pl ++ ql) (k :: p)), (Permutation (pl ++ ql) (k :: gv0)), (Permutation (pl ++ ql) (k :: pl)), (Permutation (pl ++ ql) (a :: ql)), (Permutation (pl ++ ql) (a :: q)), (Permutation (pl ++ ql) (a :: p)), (Permutation (pl ++ ql) (a :: gv0)), (Permutation (pl ++ ql) (a :: pl)), (Permutation (pl ++ ql) (merge ql ql))
(Permutation (pl ++ ql) (merge ql q)), (Permutation (pl ++ ql) (merge ql p)), (Permutation (pl ++ ql) (merge ql gv0)), (Permutation (pl ++ ql) (merge ql pl)), (Permutation (pl ++ ql) (merge q ql)), (Permutation (pl ++ ql) (merge q q)), (Permutation (pl ++ ql) (merge q p)), (Permutation (pl ++ ql) (merge q gv0)), (Permutation (pl ++ ql) (merge q pl)), (Permutation (pl ++ ql) (merge p ql))
(Permutation (pl ++ ql) (merge p q)), (Permutation (pl ++ ql) (merge p p)), (Permutation (pl ++ ql) (merge p gv0)), (Permutation (pl ++ ql) (merge p pl)), (Permutation (pl ++ ql) (merge gv0 ql)), (Permutation (pl ++ ql) (merge gv0 q)), (Permutation (pl ++ ql) (merge gv0 p)), (Permutation (pl ++ ql) (merge gv0 gv0)), (Permutation (pl ++ ql) (merge gv0 pl)), (Permutation (pl ++ ql) (merge pl ql))
(Permutation (pl ++ ql) (merge pl q)), (Permutation (pl ++ ql) (merge pl p)), (Permutation (pl ++ ql) (merge pl gv0)), (Permutation (pl ++ ql) (merge pl pl)), (Permutation (pl ++ ql) (insert k ql)), (Permutation (pl ++ ql) (insert k q)), (Permutation (pl ++ ql) (insert k p)), (Permutation (pl ++ ql) (insert k gv0)), (Permutation (pl ++ ql) (insert k pl)), (Permutation (pl ++ ql) (insert a ql))
(Permutation (pl ++ ql) (insert a q)), (Permutation (pl ++ ql) (insert a p)), (Permutation (pl ++ ql) (insert a gv0)), (Permutation (pl ++ ql) (insert a pl)), (Permutation (pl ++ ql) (maybe_swap ql)), (Permutation (pl ++ ql) (maybe_swap q)), (Permutation (pl ++ ql) (maybe_swap p)), (Permutation (pl ++ ql) (maybe_swap gv0)), (Permutation (pl ++ ql) (maybe_swap pl)), (Permutation (pl ++ ql) (ql ++ ql))
(Permutation (pl ++ ql) (ql ++ q)), (Permutation (pl ++ ql) (ql ++ p)), (Permutation (pl ++ ql) (ql ++ gv0)), (Permutation (pl ++ ql) (ql ++ pl)), (Permutation (pl ++ ql) (q ++ ql)), (Permutation (pl ++ ql) (q ++ q)), (Permutation (pl ++ ql) (q ++ p)), (Permutation (pl ++ ql) (q ++ gv0)), (Permutation (pl ++ ql) (q ++ pl)), (Permutation (pl ++ ql) (p ++ ql))
(Permutation (pl ++ ql) (p ++ q)), (Permutation (pl ++ ql) (p ++ p)), (Permutation (pl ++ ql) (p ++ gv0)), (Permutation (pl ++ ql) (p ++ pl)), (Permutation (pl ++ ql) (gv0 ++ ql)), (Permutation (pl ++ ql) (gv0 ++ q)), (Permutation (pl ++ ql) (gv0 ++ p)), (Permutation (pl ++ ql) (gv0 ++ gv0)), (Permutation (pl ++ ql) (gv0 ++ pl)), (Permutation (pl ++ ql) (pl ++ q))
(Permutation (pl ++ ql) (pl ++ p)), (Permutation (pl ++ ql) (pl ++ gv0)), (Permutation (pl ++ ql) (pl ++ pl)), (Permutation (pl ++ ql) []), (Permutation (pl ++ q) ql), (Permutation (pl ++ q) q), (Permutation (pl ++ q) p), (Permutation (pl ++ q) gv0), (Permutation (pl ++ q) pl), (Permutation (pl ++ q) (k :: ql))
(Permutation (pl ++ q) (k :: q)), (Permutation (pl ++ q) (k :: p)), (Permutation (pl ++ q) (k :: gv0)), (Permutation (pl ++ q) (k :: pl)), (Permutation (pl ++ q) (a :: ql)), (Permutation (pl ++ q) (a :: q)), (Permutation (pl ++ q) (a :: p)), (Permutation (pl ++ q) (a :: gv0)), (Permutation (pl ++ q) (a :: pl)), (Permutation (pl ++ q) (merge ql ql))
(Permutation (pl ++ q) (merge ql q)), (Permutation (pl ++ q) (merge ql p)), (Permutation (pl ++ q) (merge ql gv0)), (Permutation (pl ++ q) (merge ql pl)), (Permutation (pl ++ q) (merge q ql)), (Permutation (pl ++ q) (merge q q)), (Permutation (pl ++ q) (merge q p)), (Permutation (pl ++ q) (merge q gv0)), (Permutation (pl ++ q) (merge q pl)), (Permutation (pl ++ q) (merge p ql))
(Permutation (pl ++ q) (merge p q)), (Permutation (pl ++ q) (merge p p)), (Permutation (pl ++ q) (merge p gv0)), (Permutation (pl ++ q) (merge p pl)), (Permutation (pl ++ q) (merge gv0 ql)), (Permutation (pl ++ q) (merge gv0 q)), (Permutation (pl ++ q) (merge gv0 p)), (Permutation (pl ++ q) (merge gv0 gv0)), (Permutation (pl ++ q) (merge gv0 pl)), (Permutation (pl ++ q) (merge pl ql))
(Permutation (pl ++ q) (merge pl q)), (Permutation (pl ++ q) (merge pl p)), (Permutation (pl ++ q) (merge pl gv0)), (Permutation (pl ++ q) (merge pl pl)), (Permutation (pl ++ q) (insert k ql)), (Permutation (pl ++ q) (insert k q)), (Permutation (pl ++ q) (insert k p)), (Permutation (pl ++ q) (insert k gv0)), (Permutation (pl ++ q) (insert k pl)), (Permutation (pl ++ q) (insert a ql))
(Permutation (pl ++ q) (insert a q)), (Permutation (pl ++ q) (insert a p)), (Permutation (pl ++ q) (insert a gv0)), (Permutation (pl ++ q) (insert a pl)), (Permutation (pl ++ q) (maybe_swap ql)), (Permutation (pl ++ q) (maybe_swap q)), (Permutation (pl ++ q) (maybe_swap p)), (Permutation (pl ++ q) (maybe_swap gv0)), (Permutation (pl ++ q) (maybe_swap pl)), (Permutation (pl ++ q) (ql ++ ql))
(Permutation (pl ++ q) (ql ++ q)), (Permutation (pl ++ q) (ql ++ p)), (Permutation (pl ++ q) (ql ++ gv0)), (Permutation (pl ++ q) (ql ++ pl)), (Permutation (pl ++ q) (q ++ ql)), (Permutation (pl ++ q) (q ++ q)), (Permutation (pl ++ q) (q ++ p)), (Permutation (pl ++ q) (q ++ gv0)), (Permutation (pl ++ q) (q ++ pl)), (Permutation (pl ++ q) (p ++ ql))
(Permutation (pl ++ q) (p ++ q)), (Permutation (pl ++ q) (p ++ p)), (Permutation (pl ++ q) (p ++ gv0)), (Permutation (pl ++ q) (p ++ pl)), (Permutation (pl ++ q) (gv0 ++ ql)), (Permutation (pl ++ q) (gv0 ++ q)), (Permutation (pl ++ q) (gv0 ++ p)), (Permutation (pl ++ q) (gv0 ++ gv0)), (Permutation (pl ++ q) (gv0 ++ pl)), (Permutation (pl ++ q) (pl ++ ql))
(Permutation (pl ++ q) (pl ++ p)), (Permutation (pl ++ q) (pl ++ gv0)), (Permutation (pl ++ q) (pl ++ pl)), (Permutation (pl ++ q) []), (Permutation (pl ++ p) ql), (Permutation (pl ++ p) q), (Permutation (pl ++ p) p), (Permutation (pl ++ p) gv0), (Permutation (pl ++ p) pl), (Permutation (pl ++ p) (k :: ql))
(Permutation (pl ++ p) (k :: q)), (Permutation (pl ++ p) (k :: p)), (Permutation (pl ++ p) (k :: gv0)), (Permutation (pl ++ p) (k :: pl)), (Permutation (pl ++ p) (a :: ql)), (Permutation (pl ++ p) (a :: q)), (Permutation (pl ++ p) (a :: p)), (Permutation (pl ++ p) (a :: gv0)), (Permutation (pl ++ p) (a :: pl)), (Permutation (pl ++ p) (merge ql ql))
(Permutation (pl ++ p) (merge ql q)), (Permutation (pl ++ p) (merge ql p)), (Permutation (pl ++ p) (merge ql gv0)), (Permutation (pl ++ p) (merge ql pl)), (Permutation (pl ++ p) (merge q ql)), (Permutation (pl ++ p) (merge q q)), (Permutation (pl ++ p) (merge q p)), (Permutation (pl ++ p) (merge q gv0)), (Permutation (pl ++ p) (merge q pl)), (Permutation (pl ++ p) (merge p ql))
(Permutation (pl ++ p) (merge p q)), (Permutation (pl ++ p) (merge p p)), (Permutation (pl ++ p) (merge p gv0)), (Permutation (pl ++ p) (merge p pl)), (Permutation (pl ++ p) (merge gv0 ql)), (Permutation (pl ++ p) (merge gv0 q)), (Permutation (pl ++ p) (merge gv0 p)), (Permutation (pl ++ p) (merge gv0 gv0)), (Permutation (pl ++ p) (merge gv0 pl)), (Permutation (pl ++ p) (merge pl ql))
(Permutation (pl ++ p) (merge pl q)), (Permutation (pl ++ p) (merge pl p)), (Permutation (pl ++ p) (merge pl gv0)), (Permutation (pl ++ p) (merge pl pl)), (Permutation (pl ++ p) (insert k ql)), (Permutation (pl ++ p) (insert k q)), (Permutation (pl ++ p) (insert k p)), (Permutation (pl ++ p) (insert k gv0)), (Permutation (pl ++ p) (insert k pl)), (Permutation (pl ++ p) (insert a ql))
(Permutation (pl ++ p) (insert a q)), (Permutation (pl ++ p) (insert a p)), (Permutation (pl ++ p) (insert a gv0)), (Permutation (pl ++ p) (insert a pl)), (Permutation (pl ++ p) (maybe_swap ql)), (Permutation (pl ++ p) (maybe_swap q)), (Permutation (pl ++ p) (maybe_swap p)), (Permutation (pl ++ p) (maybe_swap gv0)), (Permutation (pl ++ p) (maybe_swap pl)), (Permutation (pl ++ p) (ql ++ ql))
(Permutation (pl ++ p) (ql ++ q)), (Permutation (pl ++ p) (ql ++ p)), (Permutation (pl ++ p) (ql ++ gv0)), (Permutation (pl ++ p) (ql ++ pl)), (Permutation (pl ++ p) (q ++ ql)), (Permutation (pl ++ p) (q ++ q)), (Permutation (pl ++ p) (q ++ p)), (Permutation (pl ++ p) (q ++ gv0)), (Permutation (pl ++ p) (q ++ pl)), (Permutation (pl ++ p) (p ++ ql))
(Permutation (pl ++ p) (p ++ q)), (Permutation (pl ++ p) (p ++ p)), (Permutation (pl ++ p) (p ++ gv0)), (Permutation (pl ++ p) (p ++ pl)), (Permutation (pl ++ p) (gv0 ++ ql)), (Permutation (pl ++ p) (gv0 ++ q)), (Permutation (pl ++ p) (gv0 ++ p)), (Permutation (pl ++ p) (gv0 ++ gv0)), (Permutation (pl ++ p) (gv0 ++ pl)), (Permutation (pl ++ p) (pl ++ ql))
(Permutation (pl ++ p) (pl ++ q)), (Permutation (pl ++ p) (pl ++ gv0)), (Permutation (pl ++ p) (pl ++ pl)), (Permutation (pl ++ p) []), (Permutation (pl ++ gv0) ql), (Permutation (pl ++ gv0) q), (Permutation (pl ++ gv0) p), (Permutation (pl ++ gv0) gv0), (Permutation (pl ++ gv0) pl), (Permutation (pl ++ gv0) (k :: ql))
(Permutation (pl ++ gv0) (k :: q)), (Permutation (pl ++ gv0) (k :: p)), (Permutation (pl ++ gv0) (k :: gv0)), (Permutation (pl ++ gv0) (k :: pl)), (Permutation (pl ++ gv0) (a :: ql)), (Permutation (pl ++ gv0) (a :: q)), (Permutation (pl ++ gv0) (a :: p)), (Permutation (pl ++ gv0) (a :: gv0)), (Permutation (pl ++ gv0) (a :: pl)), (Permutation (pl ++ gv0) (merge ql ql))
(Permutation (pl ++ gv0) (merge ql q)), (Permutation (pl ++ gv0) (merge ql p)), (Permutation (pl ++ gv0) (merge ql gv0)), (Permutation (pl ++ gv0) (merge ql pl)), (Permutation (pl ++ gv0) (merge q ql)), (Permutation (pl ++ gv0) (merge q q)), (Permutation (pl ++ gv0) (merge q p)), (Permutation (pl ++ gv0) (merge q gv0)), (Permutation (pl ++ gv0) (merge q pl)), (Permutation (pl ++ gv0) (merge p ql))
(Permutation (pl ++ gv0) (merge p q)), (Permutation (pl ++ gv0) (merge p p)), (Permutation (pl ++ gv0) (merge p gv0)), (Permutation (pl ++ gv0) (merge p pl)), (Permutation (pl ++ gv0) (merge gv0 ql)), (Permutation (pl ++ gv0) (merge gv0 q)), (Permutation (pl ++ gv0) (merge gv0 p)), (Permutation (pl ++ gv0) (merge gv0 gv0)), (Permutation (pl ++ gv0) (merge gv0 pl)), (Permutation (pl ++ gv0) (merge pl ql))
(Permutation (pl ++ gv0) (merge pl q)), (Permutation (pl ++ gv0) (merge pl p)), (Permutation (pl ++ gv0) (merge pl gv0)), (Permutation (pl ++ gv0) (merge pl pl)), (Permutation (pl ++ gv0) (insert k ql)), (Permutation (pl ++ gv0) (insert k q)), (Permutation (pl ++ gv0) (insert k p)), (Permutation (pl ++ gv0) (insert k gv0)), (Permutation (pl ++ gv0) (insert k pl)), (Permutation (pl ++ gv0) (insert a ql))
(Permutation (pl ++ gv0) (insert a q)), (Permutation (pl ++ gv0) (insert a p)), (Permutation (pl ++ gv0) (insert a gv0)), (Permutation (pl ++ gv0) (insert a pl)), (Permutation (pl ++ gv0) (maybe_swap ql)), (Permutation (pl ++ gv0) (maybe_swap q)), (Permutation (pl ++ gv0) (maybe_swap p)), (Permutation (pl ++ gv0) (maybe_swap gv0)), (Permutation (pl ++ gv0) (maybe_swap pl)), (Permutation (pl ++ gv0) (ql ++ ql))
(Permutation (pl ++ gv0) (ql ++ q)), (Permutation (pl ++ gv0) (ql ++ p)), (Permutation (pl ++ gv0) (ql ++ gv0)), (Permutation (pl ++ gv0) (ql ++ pl)), (Permutation (pl ++ gv0) (q ++ ql)), (Permutation (pl ++ gv0) (q ++ q)), (Permutation (pl ++ gv0) (q ++ p)), (Permutation (pl ++ gv0) (q ++ gv0)), (Permutation (pl ++ gv0) (q ++ pl)), (Permutation (pl ++ gv0) (p ++ ql))
(Permutation (pl ++ gv0) (p ++ q)), (Permutation (pl ++ gv0) (p ++ p)), (Permutation (pl ++ gv0) (p ++ gv0)), (Permutation (pl ++ gv0) (p ++ pl)), (Permutation (pl ++ gv0) (gv0 ++ ql)), (Permutation (pl ++ gv0) (gv0 ++ q)), (Permutation (pl ++ gv0) (gv0 ++ p)), (Permutation (pl ++ gv0) (gv0 ++ gv0)), (Permutation (pl ++ gv0) (gv0 ++ pl)), (Permutation (pl ++ gv0) (pl ++ ql))
(Permutation (pl ++ gv0) (pl ++ q)), (Permutation (pl ++ gv0) (pl ++ p)), (Permutation (pl ++ gv0) (pl ++ pl)), (Permutation (pl ++ gv0) []), (Permutation (pl ++ pl) ql), (Permutation (pl ++ pl) q), (Permutation (pl ++ pl) p), (Permutation (pl ++ pl) gv0), (Permutation (pl ++ pl) pl), (Permutation (pl ++ pl) (k :: ql))
(Permutation (pl ++ pl) (k :: q)), (Permutation (pl ++ pl) (k :: p)), (Permutation (pl ++ pl) (k :: gv0)), (Permutation (pl ++ pl) (k :: pl)), (Permutation (pl ++ pl) (a :: ql)), (Permutation (pl ++ pl) (a :: q)), (Permutation (pl ++ pl) (a :: p)), (Permutation (pl ++ pl) (a :: gv0)), (Permutation (pl ++ pl) (a :: pl)), (Permutation (pl ++ pl) (merge ql ql))
(Permutation (pl ++ pl) (merge ql q)), (Permutation (pl ++ pl) (merge ql p)), (Permutation (pl ++ pl) (merge ql gv0)), (Permutation (pl ++ pl) (merge ql pl)), (Permutation (pl ++ pl) (merge q ql)), (Permutation (pl ++ pl) (merge q q)), (Permutation (pl ++ pl) (merge q p)), (Permutation (pl ++ pl) (merge q gv0)), (Permutation (pl ++ pl) (merge q pl)), (Permutation (pl ++ pl) (merge p ql))
(Permutation (pl ++ pl) (merge p q)), (Permutation (pl ++ pl) (merge p p)), (Permutation (pl ++ pl) (merge p gv0)), (Permutation (pl ++ pl) (merge p pl)), (Permutation (pl ++ pl) (merge gv0 ql)), (Permutation (pl ++ pl) (merge gv0 q)), (Permutation (pl ++ pl) (merge gv0 p)), (Permutation (pl ++ pl) (merge gv0 gv0)), (Permutation (pl ++ pl) (merge gv0 pl)), (Permutation (pl ++ pl) (merge pl ql))
(Permutation (pl ++ pl) (merge pl q)), (Permutation (pl ++ pl) (merge pl p)), (Permutation (pl ++ pl) (merge pl gv0)), (Permutation (pl ++ pl) (merge pl pl)), (Permutation (pl ++ pl) (insert k ql)), (Permutation (pl ++ pl) (insert k q)), (Permutation (pl ++ pl) (insert k p)), (Permutation (pl ++ pl) (insert k gv0)), (Permutation (pl ++ pl) (insert k pl)), (Permutation (pl ++ pl) (insert a ql))
(Permutation (pl ++ pl) (insert a q)), (Permutation (pl ++ pl) (insert a p)), (Permutation (pl ++ pl) (insert a gv0)), (Permutation (pl ++ pl) (insert a pl)), (Permutation (pl ++ pl) (maybe_swap ql)), (Permutation (pl ++ pl) (maybe_swap q)), (Permutation (pl ++ pl) (maybe_swap p)), (Permutation (pl ++ pl) (maybe_swap gv0)), (Permutation (pl ++ pl) (maybe_swap pl)), (Permutation (pl ++ pl) (ql ++ ql))
(Permutation (pl ++ pl) (ql ++ q)), (Permutation (pl ++ pl) (ql ++ p)), (Permutation (pl ++ pl) (ql ++ gv0)), (Permutation (pl ++ pl) (ql ++ pl)), (Permutation (pl ++ pl) (q ++ ql)), (Permutation (pl ++ pl) (q ++ q)), (Permutation (pl ++ pl) (q ++ p)), (Permutation (pl ++ pl) (q ++ gv0)), (Permutation (pl ++ pl) (q ++ pl)), (Permutation (pl ++ pl) (p ++ ql))
(Permutation (pl ++ pl) (p ++ q)), (Permutation (pl ++ pl) (p ++ p)), (Permutation (pl ++ pl) (p ++ gv0)), (Permutation (pl ++ pl) (p ++ pl)), (Permutation (pl ++ pl) (gv0 ++ ql)), (Permutation (pl ++ pl) (gv0 ++ q)), (Permutation (pl ++ pl) (gv0 ++ p)), (Permutation (pl ++ pl) (gv0 ++ gv0)), (Permutation (pl ++ pl) (gv0 ++ pl)), (Permutation (pl ++ pl) (pl ++ ql))
(Permutation (pl ++ pl) (pl ++ q)), (Permutation (pl ++ pl) (pl ++ p)), (Permutation (pl ++ pl) (pl ++ gv0)), (Permutation (pl ++ pl) []), (Permutation [] ql), (Permutation [] q), (Permutation [] p), (Permutation [] gv0), (Permutation [] pl), (Permutation [] (k :: ql))
(Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (k :: gv0)), (Permutation [] (k :: pl)), (Permutation [] (a :: ql)), (Permutation [] (a :: q)), (Permutation [] (a :: p)), (Permutation [] (a :: gv0)), (Permutation [] (a :: pl)), (Permutation [] (merge ql ql))
(Permutation [] (merge ql q)), (Permutation [] (merge ql p)), (Permutation [] (merge ql gv0)), (Permutation [] (merge ql pl)), (Permutation [] (merge q ql)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge q gv0)), (Permutation [] (merge q pl)), (Permutation [] (merge p ql))
(Permutation [] (merge p q)), (Permutation [] (merge p p)), (Permutation [] (merge p gv0)), (Permutation [] (merge p pl)), (Permutation [] (merge gv0 ql)), (Permutation [] (merge gv0 q)), (Permutation [] (merge gv0 p)), (Permutation [] (merge gv0 gv0)), (Permutation [] (merge gv0 pl)), (Permutation [] (merge pl ql))
(Permutation [] (merge pl q)), (Permutation [] (merge pl p)), (Permutation [] (merge pl gv0)), (Permutation [] (merge pl pl)), (Permutation [] (insert k ql)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert k gv0)), (Permutation [] (insert k pl)), (Permutation [] (insert a ql))
(Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (insert a gv0)), (Permutation [] (insert a pl)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap gv0)), (Permutation [] (maybe_swap pl)), (Permutation [] (ql ++ ql))
(Permutation [] (ql ++ q)), (Permutation [] (ql ++ p)), (Permutation [] (ql ++ gv0)), (Permutation [] (ql ++ pl)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (q ++ gv0)), (Permutation [] (q ++ pl)), (Permutation [] (p ++ ql))
(Permutation [] (p ++ q)), (Permutation [] (p ++ p)), (Permutation [] (p ++ gv0)), (Permutation [] (p ++ pl)), (Permutation [] (gv0 ++ ql)), (Permutation [] (gv0 ++ q)), (Permutation [] (gv0 ++ p)), (Permutation [] (gv0 ++ gv0)), (Permutation [] (gv0 ++ pl)), (Permutation [] (pl ++ ql))
(Permutation [] (pl ++ q)), (Permutation [] (pl ++ p)), (Permutation [] (pl ++ gv0)), (Permutation [] (pl ++ pl)), (In k (k :: ql)), (In k (k :: q)), (In k (k :: p)), (In k (k :: gv0)), (In k (k :: pl)), (In k (a :: ql))
(In k (a :: q)), (In k (a :: p)), (In k (a :: gv0)), (In k (a :: pl)), (In k (merge ql ql)), (In k (merge ql q)), (In k (merge ql p)), (In k (merge ql gv0)), (In k (merge ql pl)), (In k (merge q ql))
(In k (merge q q)), (In k (merge q p)), (In k (merge q gv0)), (In k (merge q pl)), (In k (merge p ql)), (In k (merge p q)), (In k (merge p p)), (In k (merge p gv0)), (In k (merge p pl)), (In k (merge gv0 ql))
(In k (merge gv0 q)), (In k (merge gv0 p)), (In k (merge gv0 gv0)), (In k (merge gv0 pl)), (In k (merge pl ql)), (In k (merge pl q)), (In k (merge pl p)), (In k (merge pl gv0)), (In k (merge pl pl)), (In k (insert k ql))
(In k (insert k q)), (In k (insert k p)), (In k (insert k gv0)), (In k (insert k pl)), (In k (insert a ql)), (In k (insert a q)), (In k (insert a p)), (In k (insert a gv0)), (In k (insert a pl)), (In k (maybe_swap ql))
(In k (maybe_swap q)), (In k (maybe_swap p)), (In k (maybe_swap gv0)), (In k (maybe_swap pl)), (In k (ql ++ ql)), (In k (ql ++ q)), (In k (ql ++ p)), (In k (ql ++ gv0)), (In k (ql ++ pl)), (In k (q ++ ql))
(In k (q ++ q)), (In k (q ++ p)), (In k (q ++ gv0)), (In k (q ++ pl)), (In k (p ++ ql)), (In k (p ++ q)), (In k (p ++ p)), (In k (p ++ gv0)), (In k (p ++ pl)), (In k (gv0 ++ ql))
(In k (gv0 ++ q)), (In k (gv0 ++ p)), (In k (gv0 ++ gv0)), (In k (gv0 ++ pl)), (In k (pl ++ ql)), (In k (pl ++ q)), (In k (pl ++ p)), (In k (pl ++ gv0)), (In k (pl ++ pl)), (In a (k :: ql))
(In a (k :: q)), (In a (k :: p)), (In a (k :: gv0)), (In a (k :: pl)), (In a (a :: ql)), (In a (a :: q)), (In a (a :: p)), (In a (a :: gv0)), (In a (a :: pl)), (In a (merge ql ql))
(In a (merge ql q)), (In a (merge ql p)), (In a (merge ql gv0)), (In a (merge ql pl)), (In a (merge q ql)), (In a (merge q q)), (In a (merge q p)), (In a (merge q gv0)), (In a (merge q pl)), (In a (merge p ql))
(In a (merge p q)), (In a (merge p p)), (In a (merge p gv0)), (In a (merge p pl)), (In a (merge gv0 ql)), (In a (merge gv0 q)), (In a (merge gv0 p)), (In a (merge gv0 gv0)), (In a (merge gv0 pl)), (In a (merge pl ql))
(In a (merge pl q)), (In a (merge pl p)), (In a (merge pl gv0)), (In a (merge pl pl)), (In a (insert k ql)), (In a (insert k q)), (In a (insert k p)), (In a (insert k gv0)), (In a (insert k pl)), (In a (insert a ql))
(In a (insert a q)), (In a (insert a p)), (In a (insert a gv0)), (In a (insert a pl)), (In a (maybe_swap ql)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (maybe_swap gv0)), (In a (maybe_swap pl)), (In a (ql ++ ql))
(In a (ql ++ q)), (In a (ql ++ p)), (In a (ql ++ gv0)), (In a (ql ++ pl)), (In a (q ++ ql)), (In a (q ++ q)), (In a (q ++ p)), (In a (q ++ gv0)), (In a (q ++ pl)), (In a (p ++ ql))
(In a (p ++ q)), (In a (p ++ p)), (In a (p ++ gv0)), (In a (p ++ pl)), (In a (gv0 ++ ql)), (In a (gv0 ++ q)), (In a (gv0 ++ p)), (In a (gv0 ++ gv0)), (In a (gv0 ++ pl)), (In a (pl ++ ql))
(In a (pl ++ q)), (In a (pl ++ p)), (In a (pl ++ gv0)), (In a (pl ++ pl)), (In (length ql) ql), (In (length ql) q), (In (length ql) p), (In (length ql) gv0), (In (length ql) pl), (In (length ql) (k :: ql))
(In (length ql) (k :: q)), (In (length ql) (k :: p)), (In (length ql) (k :: gv0)), (In (length ql) (k :: pl)), (In (length ql) (a :: ql)), (In (length ql) (a :: q)), (In (length ql) (a :: p)), (In (length ql) (a :: gv0)), (In (length ql) (a :: pl)), (In (length ql) (merge ql ql))
(In (length ql) (merge ql q)), (In (length ql) (merge ql p)), (In (length ql) (merge ql gv0)), (In (length ql) (merge ql pl)), (In (length ql) (merge q ql)), (In (length ql) (merge q q)), (In (length ql) (merge q p)), (In (length ql) (merge q gv0)), (In (length ql) (merge q pl)), (In (length ql) (merge p ql))
(In (length ql) (merge p q)), (In (length ql) (merge p p)), (In (length ql) (merge p gv0)), (In (length ql) (merge p pl)), (In (length ql) (merge gv0 ql)), (In (length ql) (merge gv0 q)), (In (length ql) (merge gv0 p)), (In (length ql) (merge gv0 gv0)), (In (length ql) (merge gv0 pl)), (In (length ql) (merge pl ql))
(In (length ql) (merge pl q)), (In (length ql) (merge pl p)), (In (length ql) (merge pl gv0)), (In (length ql) (merge pl pl)), (In (length ql) (insert k ql)), (In (length ql) (insert k q)), (In (length ql) (insert k p)), (In (length ql) (insert k gv0)), (In (length ql) (insert k pl)), (In (length ql) (insert a ql))
(In (length ql) (insert a q)), (In (length ql) (insert a p)), (In (length ql) (insert a gv0)), (In (length ql) (insert a pl)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap p)), (In (length ql) (maybe_swap gv0)), (In (length ql) (maybe_swap pl)), (In (length ql) (ql ++ ql))
(In (length ql) (ql ++ q)), (In (length ql) (ql ++ p)), (In (length ql) (ql ++ gv0)), (In (length ql) (ql ++ pl)), (In (length ql) (q ++ ql)), (In (length ql) (q ++ q)), (In (length ql) (q ++ p)), (In (length ql) (q ++ gv0)), (In (length ql) (q ++ pl)), (In (length ql) (p ++ ql))
(In (length ql) (p ++ q)), (In (length ql) (p ++ p)), (In (length ql) (p ++ gv0)), (In (length ql) (p ++ pl)), (In (length ql) (gv0 ++ ql)), (In (length ql) (gv0 ++ q)), (In (length ql) (gv0 ++ p)), (In (length ql) (gv0 ++ gv0)), (In (length ql) (gv0 ++ pl)), (In (length ql) (pl ++ ql))
(In (length ql) (pl ++ q)), (In (length ql) (pl ++ p)), (In (length ql) (pl ++ gv0)), (In (length ql) (pl ++ pl)), (In (length q) ql), (In (length q) q), (In (length q) p), (In (length q) gv0), (In (length q) pl), (In (length q) (k :: ql))
(In (length q) (k :: q)), (In (length q) (k :: p)), (In (length q) (k :: gv0)), (In (length q) (k :: pl)), (In (length q) (a :: ql)), (In (length q) (a :: q)), (In (length q) (a :: p)), (In (length q) (a :: gv0)), (In (length q) (a :: pl)), (In (length q) (merge ql ql))
(In (length q) (merge ql q)), (In (length q) (merge ql p)), (In (length q) (merge ql gv0)), (In (length q) (merge ql pl)), (In (length q) (merge q ql)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge q gv0)), (In (length q) (merge q pl)), (In (length q) (merge p ql))
(In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (merge p gv0)), (In (length q) (merge p pl)), (In (length q) (merge gv0 ql)), (In (length q) (merge gv0 q)), (In (length q) (merge gv0 p)), (In (length q) (merge gv0 gv0)), (In (length q) (merge gv0 pl)), (In (length q) (merge pl ql))
(In (length q) (merge pl q)), (In (length q) (merge pl p)), (In (length q) (merge pl gv0)), (In (length q) (merge pl pl)), (In (length q) (insert k ql)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert k gv0)), (In (length q) (insert k pl)), (In (length q) (insert a ql))
(In (length q) (insert a q)), (In (length q) (insert a p)), (In (length q) (insert a gv0)), (In (length q) (insert a pl)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap gv0)), (In (length q) (maybe_swap pl)), (In (length q) (ql ++ ql))
(In (length q) (ql ++ q)), (In (length q) (ql ++ p)), (In (length q) (ql ++ gv0)), (In (length q) (ql ++ pl)), (In (length q) (q ++ ql)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (q ++ gv0)), (In (length q) (q ++ pl)), (In (length q) (p ++ ql))
(In (length q) (p ++ q)), (In (length q) (p ++ p)), (In (length q) (p ++ gv0)), (In (length q) (p ++ pl)), (In (length q) (gv0 ++ ql)), (In (length q) (gv0 ++ q)), (In (length q) (gv0 ++ p)), (In (length q) (gv0 ++ gv0)), (In (length q) (gv0 ++ pl)), (In (length q) (pl ++ ql))
(In (length q) (pl ++ q)), (In (length q) (pl ++ p)), (In (length q) (pl ++ gv0)), (In (length q) (pl ++ pl)), (In (length p) ql), (In (length p) q), (In (length p) p), (In (length p) gv0), (In (length p) pl), (In (length p) (k :: ql))
(In (length p) (k :: q)), (In (length p) (k :: p)), (In (length p) (k :: gv0)), (In (length p) (k :: pl)), (In (length p) (a :: ql)), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (a :: gv0)), (In (length p) (a :: pl)), (In (length p) (merge ql ql))
(In (length p) (merge ql q)), (In (length p) (merge ql p)), (In (length p) (merge ql gv0)), (In (length p) (merge ql pl)), (In (length p) (merge q ql)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge q gv0)), (In (length p) (merge q pl)), (In (length p) (merge p ql))
(In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (merge p gv0)), (In (length p) (merge p pl)), (In (length p) (merge gv0 ql)), (In (length p) (merge gv0 q)), (In (length p) (merge gv0 p)), (In (length p) (merge gv0 gv0)), (In (length p) (merge gv0 pl)), (In (length p) (merge pl ql))
(In (length p) (merge pl q)), (In (length p) (merge pl p)), (In (length p) (merge pl gv0)), (In (length p) (merge pl pl)), (In (length p) (insert k ql)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert k gv0)), (In (length p) (insert k pl)), (In (length p) (insert a ql))
(In (length p) (insert a q)), (In (length p) (insert a p)), (In (length p) (insert a gv0)), (In (length p) (insert a pl)), (In (length p) (maybe_swap ql)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (maybe_swap gv0)), (In (length p) (maybe_swap pl)), (In (length p) (ql ++ ql))
(In (length p) (ql ++ q)), (In (length p) (ql ++ p)), (In (length p) (ql ++ gv0)), (In (length p) (ql ++ pl)), (In (length p) (q ++ ql)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (q ++ gv0)), (In (length p) (q ++ pl)), (In (length p) (p ++ ql))
(In (length p) (p ++ q)), (In (length p) (p ++ p)), (In (length p) (p ++ gv0)), (In (length p) (p ++ pl)), (In (length p) (gv0 ++ ql)), (In (length p) (gv0 ++ q)), (In (length p) (gv0 ++ p)), (In (length p) (gv0 ++ gv0)), (In (length p) (gv0 ++ pl)), (In (length p) (pl ++ ql))
(In (length p) (pl ++ q)), (In (length p) (pl ++ p)), (In (length p) (pl ++ gv0)), (In (length p) (pl ++ pl)), (In (length gv0) ql), (In (length gv0) q), (In (length gv0) p), (In (length gv0) gv0), (In (length gv0) pl), (In (length gv0) (k :: ql))
(In (length gv0) (k :: q)), (In (length gv0) (k :: p)), (In (length gv0) (k :: gv0)), (In (length gv0) (k :: pl)), (In (length gv0) (a :: ql)), (In (length gv0) (a :: q)), (In (length gv0) (a :: p)), (In (length gv0) (a :: gv0)), (In (length gv0) (a :: pl)), (In (length gv0) (merge ql ql))
(In (length gv0) (merge ql q)), (In (length gv0) (merge ql p)), (In (length gv0) (merge ql gv0)), (In (length gv0) (merge ql pl)), (In (length gv0) (merge q ql)), (In (length gv0) (merge q q)), (In (length gv0) (merge q p)), (In (length gv0) (merge q gv0)), (In (length gv0) (merge q pl)), (In (length gv0) (merge p ql))
(In (length gv0) (merge p q)), (In (length gv0) (merge p p)), (In (length gv0) (merge p gv0)), (In (length gv0) (merge p pl)), (In (length gv0) (merge gv0 ql)), (In (length gv0) (merge gv0 q)), (In (length gv0) (merge gv0 p)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (merge gv0 pl)), (In (length gv0) (merge pl ql))
(In (length gv0) (merge pl q)), (In (length gv0) (merge pl p)), (In (length gv0) (merge pl gv0)), (In (length gv0) (merge pl pl)), (In (length gv0) (insert k ql)), (In (length gv0) (insert k q)), (In (length gv0) (insert k p)), (In (length gv0) (insert k gv0)), (In (length gv0) (insert k pl)), (In (length gv0) (insert a ql))
(In (length gv0) (insert a q)), (In (length gv0) (insert a p)), (In (length gv0) (insert a gv0)), (In (length gv0) (insert a pl)), (In (length gv0) (maybe_swap ql)), (In (length gv0) (maybe_swap q)), (In (length gv0) (maybe_swap p)), (In (length gv0) (maybe_swap gv0)), (In (length gv0) (maybe_swap pl)), (In (length gv0) (ql ++ ql))
(In (length gv0) (ql ++ q)), (In (length gv0) (ql ++ p)), (In (length gv0) (ql ++ gv0)), (In (length gv0) (ql ++ pl)), (In (length gv0) (q ++ ql)), (In (length gv0) (q ++ q)), (In (length gv0) (q ++ p)), (In (length gv0) (q ++ gv0)), (In (length gv0) (q ++ pl)), (In (length gv0) (p ++ ql))
(In (length gv0) (p ++ q)), (In (length gv0) (p ++ p)), (In (length gv0) (p ++ gv0)), (In (length gv0) (p ++ pl)), (In (length gv0) (gv0 ++ ql)), (In (length gv0) (gv0 ++ q)), (In (length gv0) (gv0 ++ p)), (In (length gv0) (gv0 ++ gv0)), (In (length gv0) (gv0 ++ pl)), (In (length gv0) (pl ++ ql))
(In (length gv0) (pl ++ q)), (In (length gv0) (pl ++ p)), (In (length gv0) (pl ++ gv0)), (In (length gv0) (pl ++ pl)), (In (length pl) ql), (In (length pl) q), (In (length pl) p), (In (length pl) gv0), (In (length pl) pl), (In (length pl) (k :: ql))
(In (length pl) (k :: q)), (In (length pl) (k :: p)), (In (length pl) (k :: gv0)), (In (length pl) (k :: pl)), (In (length pl) (a :: ql)), (In (length pl) (a :: q)), (In (length pl) (a :: p)), (In (length pl) (a :: gv0)), (In (length pl) (a :: pl)), (In (length pl) (merge ql ql))
(In (length pl) (merge ql q)), (In (length pl) (merge ql p)), (In (length pl) (merge ql gv0)), (In (length pl) (merge ql pl)), (In (length pl) (merge q ql)), (In (length pl) (merge q q)), (In (length pl) (merge q p)), (In (length pl) (merge q gv0)), (In (length pl) (merge q pl)), (In (length pl) (merge p ql))
(In (length pl) (merge p q)), (In (length pl) (merge p p)), (In (length pl) (merge p gv0)), (In (length pl) (merge p pl)), (In (length pl) (merge gv0 ql)), (In (length pl) (merge gv0 q)), (In (length pl) (merge gv0 p)), (In (length pl) (merge gv0 gv0)), (In (length pl) (merge gv0 pl)), (In (length pl) (merge pl ql))
(In (length pl) (merge pl q)), (In (length pl) (merge pl p)), (In (length pl) (merge pl gv0)), (In (length pl) (merge pl pl)), (In (length pl) (insert k ql)), (In (length pl) (insert k q)), (In (length pl) (insert k p)), (In (length pl) (insert k gv0)), (In (length pl) (insert k pl)), (In (length pl) (insert a ql))
(In (length pl) (insert a q)), (In (length pl) (insert a p)), (In (length pl) (insert a gv0)), (In (length pl) (insert a pl)), (In (length pl) (maybe_swap ql)), (In (length pl) (maybe_swap q)), (In (length pl) (maybe_swap p)), (In (length pl) (maybe_swap gv0)), (In (length pl) (maybe_swap pl)), (In (length pl) (ql ++ ql))
(In (length pl) (ql ++ q)), (In (length pl) (ql ++ p)), (In (length pl) (ql ++ gv0)), (In (length pl) (ql ++ pl)), (In (length pl) (q ++ ql)), (In (length pl) (q ++ q)), (In (length pl) (q ++ p)), (In (length pl) (q ++ gv0)), (In (length pl) (q ++ pl)), (In (length pl) (p ++ ql))
(In (length pl) (p ++ q)), (In (length pl) (p ++ p)), (In (length pl) (p ++ gv0)), (In (length pl) (p ++ pl)), (In (length pl) (gv0 ++ ql)), (In (length pl) (gv0 ++ q)), (In (length pl) (gv0 ++ p)), (In (length pl) (gv0 ++ gv0)), (In (length pl) (gv0 ++ pl)), (In (length pl) (pl ++ ql))
(In (length pl) (pl ++ q)), (In (length pl) (pl ++ p)), (In (length pl) (pl ++ gv0)), (In (length pl) (pl ++ pl)), (k < length ql), (k < length q), (k < length p), (k < length gv0), (k < length pl), (a < length ql)
(a < length q), (a < length p), (a < length gv0), (a < length pl), (length ql < k), (length ql < a), (length ql < length q), (length ql < length p), (length ql < length gv0), (length ql < length pl)
(length q < k), (length q < a), (length q < length ql), (length q < length p), (length q < length gv0), (length q < length pl), (length p < k), (length p < a), (length p < length ql), (length p < length q)
(length p < length gv0), (length p < length pl), (length gv0 < k), (length gv0 < a), (length gv0 < length ql), (length gv0 < length q), (length gv0 < length p), (length gv0 < length pl), (length pl < k), (length pl < a)
(length pl < length ql), (length pl < length q), (length pl < length p), (length pl < length gv0), (k <= length ql), (k <= length q), (k <= length p), (k <= length gv0), (k <= length pl), (a <= length ql)
(a <= length q), (a <= length p), (a <= length gv0), (a <= length pl), (length ql <= k), (length ql <= a), (length ql <= length q), (length ql <= length p), (length ql <= length gv0), (length ql <= length pl)
(length q <= k), (length q <= a), (length q <= length ql), (length q <= length p), (length q <= length gv0), (length q <= length pl), (length p <= k), (length p <= a), (length p <= length ql), (length p <= length q)
(length p <= length gv0), (length p <= length pl), (length gv0 <= k), (length gv0 <= a), (length gv0 <= length ql), (length gv0 <= length q), (length gv0 <= length p), (length gv0 <= length pl), (length pl <= k), (length pl <= a)
(length pl <= length ql), (length pl <= length q), (length pl <= length p), (length pl <= length gv0), (~ Abs ql ql), (~ Abs ql q), (~ Abs ql p), (~ Abs ql gv0), (~ Abs ql pl), (~ Abs q ql)
(~ Abs q q), (~ Abs q p), (~ Abs q gv0), (~ Abs q pl), (~ Abs p ql), (~ Abs p q), (~ Abs p p), (~ Abs p gv0), (~ Abs p pl), (~ Abs gv0 ql)
(~ Abs gv0 q), (~ Abs gv0 p), (~ Abs gv0 gv0), (~ Abs gv0 pl), (~ Abs pl ql), (~ Abs pl q), (~ Abs pl p), (~ Abs pl gv0), (~ Abs pl pl), (~ priq ql)
(~ priq q), (~ priq p), (~ priq gv0), (~ priq pl), (~ Permutation ql ql), (~ Permutation ql q), (~ Permutation ql p), (~ Permutation ql gv0), (~ Permutation ql pl), (~ Permutation q ql)
(~ Permutation q q), (~ Permutation q p), (~ Permutation q gv0), (~ Permutation q pl), (~ Permutation p ql), (~ Permutation p q), (~ Permutation p p), (~ Permutation p gv0), (~ Permutation p pl), (~ Permutation gv0 ql)
(~ Permutation gv0 q), (~ Permutation gv0 p), (~ Permutation gv0 gv0), (~ Permutation gv0 pl), (~ Permutation pl ql), (~ Permutation pl q), (~ Permutation pl p), (~ Permutation pl gv0), (~ Permutation pl pl), (~ In k ql)
(~ In k q), (~ In k p), (~ In k gv0), (~ In k pl), (~ In a ql), (~ In a q), (~ In a p), (~ In a gv0), (~ In a pl), (~ k < k)
(~ k < a), (~ a < k), (~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (k <> k), (k <> a), (a <> k)
(a <> a), (ql <> ql), (ql <> q), (ql <> p), (ql <> gv0), (ql <> pl), (q <> ql), (q <> q), (q <> p), (q <> gv0)
(q <> pl), (p <> ql), (p <> q), (p <> p), (p <> gv0), (p <> pl), (gv0 <> ql), (gv0 <> q), (gv0 <> p), (gv0 <> gv0)
(gv0 <> pl), (pl <> ql), (pl <> q), (pl <> p), (pl <> gv0), (pl <> pl), (None = Some ql), (None = Some q), (None = Some p), (None = Some gv0)
(None = Some pl), (k :: ql = ql), (k :: ql = q), (k :: ql = p), (k :: ql = gv0), (k :: ql = pl), (k :: ql = merge ql ql), (k :: ql = merge ql q), (k :: ql = merge ql p), (k :: ql = merge ql gv0)
(k :: ql = merge ql pl), (k :: ql = merge q ql), (k :: ql = merge q q), (k :: ql = merge q p), (k :: ql = merge q gv0), (k :: ql = merge q pl), (k :: ql = merge p ql), (k :: ql = merge p q), (k :: ql = merge p p), (k :: ql = merge p gv0)
(k :: ql = merge p pl), (k :: ql = merge gv0 ql), (k :: ql = merge gv0 q), (k :: ql = merge gv0 p), (k :: ql = merge gv0 gv0), (k :: ql = merge gv0 pl), (k :: ql = merge pl ql), (k :: ql = merge pl q), (k :: ql = merge pl p), (k :: ql = merge pl gv0)
(k :: ql = merge pl pl), (k :: ql = insert k ql), (k :: ql = insert k q), (k :: ql = insert k p), (k :: ql = insert k gv0), (k :: ql = insert k pl), (k :: ql = insert a ql), (k :: ql = insert a q), (k :: ql = insert a p), (k :: ql = insert a gv0)
(k :: ql = insert a pl), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap q), (k :: ql = maybe_swap p), (k :: ql = maybe_swap gv0), (k :: ql = maybe_swap pl), (k :: ql = ql ++ ql), (k :: ql = ql ++ q), (k :: ql = ql ++ p), (k :: ql = ql ++ gv0)
(k :: ql = ql ++ pl), (k :: ql = q ++ ql), (k :: ql = q ++ q), (k :: ql = q ++ p), (k :: ql = q ++ gv0), (k :: ql = q ++ pl), (k :: ql = p ++ ql), (k :: ql = p ++ q), (k :: ql = p ++ p), (k :: ql = p ++ gv0)
(k :: ql = p ++ pl), (k :: ql = gv0 ++ ql), (k :: ql = gv0 ++ q), (k :: ql = gv0 ++ p), (k :: ql = gv0 ++ gv0), (k :: ql = gv0 ++ pl), (k :: ql = pl ++ ql), (k :: ql = pl ++ q), (k :: ql = pl ++ p), (k :: ql = pl ++ gv0)
(k :: ql = pl ++ pl), (k :: ql = []), (k :: q = ql), (k :: q = q), (k :: q = p), (k :: q = gv0), (k :: q = pl), (k :: q = merge ql ql), (k :: q = merge ql q), (k :: q = merge ql p)
(k :: q = merge ql gv0), (k :: q = merge ql pl), (k :: q = merge q ql), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge q gv0), (k :: q = merge q pl), (k :: q = merge p ql), (k :: q = merge p q), (k :: q = merge p p)
(k :: q = merge p gv0), (k :: q = merge p pl), (k :: q = merge gv0 ql), (k :: q = merge gv0 q), (k :: q = merge gv0 p), (k :: q = merge gv0 gv0), (k :: q = merge gv0 pl), (k :: q = merge pl ql), (k :: q = merge pl q), (k :: q = merge pl p)
(k :: q = merge pl gv0), (k :: q = merge pl pl), (k :: q = insert k ql), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert k gv0), (k :: q = insert k pl), (k :: q = insert a ql), (k :: q = insert a q), (k :: q = insert a p)
(k :: q = insert a gv0), (k :: q = insert a pl), (k :: q = maybe_swap ql), (k :: q = maybe_swap q), (k :: q = maybe_swap p), (k :: q = maybe_swap gv0), (k :: q = maybe_swap pl), (k :: q = ql ++ ql), (k :: q = ql ++ q), (k :: q = ql ++ p)
(k :: q = ql ++ gv0), (k :: q = ql ++ pl), (k :: q = q ++ ql), (k :: q = q ++ q), (k :: q = q ++ p), (k :: q = q ++ gv0), (k :: q = q ++ pl), (k :: q = p ++ ql), (k :: q = p ++ q), (k :: q = p ++ p)
(k :: q = p ++ gv0), (k :: q = p ++ pl), (k :: q = gv0 ++ ql), (k :: q = gv0 ++ q), (k :: q = gv0 ++ p), (k :: q = gv0 ++ gv0), (k :: q = gv0 ++ pl), (k :: q = pl ++ ql), (k :: q = pl ++ q), (k :: q = pl ++ p)
(k :: q = pl ++ gv0), (k :: q = pl ++ pl), (k :: q = []), (k :: p = ql), (k :: p = q), (k :: p = p), (k :: p = gv0), (k :: p = pl), (k :: p = merge ql ql), (k :: p = merge ql q)
(k :: p = merge ql p), (k :: p = merge ql gv0), (k :: p = merge ql pl), (k :: p = merge q ql), (k :: p = merge q q), (k :: p = merge q p), (k :: p = merge q gv0), (k :: p = merge q pl), (k :: p = merge p ql), (k :: p = merge p q)
(k :: p = merge p p), (k :: p = merge p gv0), (k :: p = merge p pl), (k :: p = merge gv0 ql), (k :: p = merge gv0 q), (k :: p = merge gv0 p), (k :: p = merge gv0 gv0), (k :: p = merge gv0 pl), (k :: p = merge pl ql), (k :: p = merge pl q)
(k :: p = merge pl p), (k :: p = merge pl gv0), (k :: p = merge pl pl), (k :: p = insert k ql), (k :: p = insert k q), (k :: p = insert k p), (k :: p = insert k gv0), (k :: p = insert k pl), (k :: p = insert a ql), (k :: p = insert a q)
(k :: p = insert a p), (k :: p = insert a gv0), (k :: p = insert a pl), (k :: p = maybe_swap ql), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = maybe_swap gv0), (k :: p = maybe_swap pl), (k :: p = ql ++ ql), (k :: p = ql ++ q)
(k :: p = ql ++ p), (k :: p = ql ++ gv0), (k :: p = ql ++ pl), (k :: p = q ++ ql), (k :: p = q ++ q), (k :: p = q ++ p), (k :: p = q ++ gv0), (k :: p = q ++ pl), (k :: p = p ++ ql), (k :: p = p ++ q)
(k :: p = p ++ p), (k :: p = p ++ gv0), (k :: p = p ++ pl), (k :: p = gv0 ++ ql), (k :: p = gv0 ++ q), (k :: p = gv0 ++ p), (k :: p = gv0 ++ gv0), (k :: p = gv0 ++ pl), (k :: p = pl ++ ql), (k :: p = pl ++ q)
(k :: p = pl ++ p), (k :: p = pl ++ gv0), (k :: p = pl ++ pl), (k :: p = []), (k :: gv0 = ql), (k :: gv0 = q), (k :: gv0 = p), (k :: gv0 = gv0), (k :: gv0 = pl), (k :: gv0 = merge ql ql)
(k :: gv0 = merge ql q), (k :: gv0 = merge ql p), (k :: gv0 = merge ql gv0), (k :: gv0 = merge ql pl), (k :: gv0 = merge q ql), (k :: gv0 = merge q q), (k :: gv0 = merge q p), (k :: gv0 = merge q gv0), (k :: gv0 = merge q pl), (k :: gv0 = merge p ql)
(k :: gv0 = merge p q), (k :: gv0 = merge p p), (k :: gv0 = merge p gv0), (k :: gv0 = merge p pl), (k :: gv0 = merge gv0 ql), (k :: gv0 = merge gv0 q), (k :: gv0 = merge gv0 p), (k :: gv0 = merge gv0 gv0), (k :: gv0 = merge gv0 pl), (k :: gv0 = merge pl ql)
(k :: gv0 = merge pl q), (k :: gv0 = merge pl p), (k :: gv0 = merge pl gv0), (k :: gv0 = merge pl pl), (k :: gv0 = insert k ql), (k :: gv0 = insert k q), (k :: gv0 = insert k p), (k :: gv0 = insert k gv0), (k :: gv0 = insert k pl), (k :: gv0 = insert a ql)
(k :: gv0 = insert a q), (k :: gv0 = insert a p), (k :: gv0 = insert a gv0), (k :: gv0 = insert a pl), (k :: gv0 = maybe_swap ql), (k :: gv0 = maybe_swap q), (k :: gv0 = maybe_swap p), (k :: gv0 = maybe_swap gv0), (k :: gv0 = maybe_swap pl), (k :: gv0 = ql ++ ql)
(k :: gv0 = ql ++ q), (k :: gv0 = ql ++ p), (k :: gv0 = ql ++ gv0), (k :: gv0 = ql ++ pl), (k :: gv0 = q ++ ql), (k :: gv0 = q ++ q), (k :: gv0 = q ++ p), (k :: gv0 = q ++ gv0), (k :: gv0 = q ++ pl), (k :: gv0 = p ++ ql)
(k :: gv0 = p ++ q), (k :: gv0 = p ++ p), (k :: gv0 = p ++ gv0), (k :: gv0 = p ++ pl), (k :: gv0 = gv0 ++ ql), (k :: gv0 = gv0 ++ q), (k :: gv0 = gv0 ++ p), (k :: gv0 = gv0 ++ gv0), (k :: gv0 = gv0 ++ pl), (k :: gv0 = pl ++ ql)
(k :: gv0 = pl ++ q), (k :: gv0 = pl ++ p), (k :: gv0 = pl ++ gv0), (k :: gv0 = pl ++ pl), (k :: gv0 = []), (k :: pl = ql), (k :: pl = q), (k :: pl = p), (k :: pl = gv0), (k :: pl = pl)
(k :: pl = merge ql ql), (k :: pl = merge ql q), (k :: pl = merge ql p), (k :: pl = merge ql gv0), (k :: pl = merge ql pl), (k :: pl = merge q ql), (k :: pl = merge q q), (k :: pl = merge q p), (k :: pl = merge q gv0), (k :: pl = merge q pl)
(k :: pl = merge p ql), (k :: pl = merge p q), (k :: pl = merge p p), (k :: pl = merge p gv0), (k :: pl = merge p pl), (k :: pl = merge gv0 ql), (k :: pl = merge gv0 q), (k :: pl = merge gv0 p), (k :: pl = merge gv0 gv0), (k :: pl = merge gv0 pl)
(k :: pl = merge pl ql), (k :: pl = merge pl q), (k :: pl = merge pl p), (k :: pl = merge pl gv0), (k :: pl = merge pl pl), (k :: pl = insert k ql), (k :: pl = insert k q), (k :: pl = insert k p), (k :: pl = insert k gv0), (k :: pl = insert k pl)
(k :: pl = insert a ql), (k :: pl = insert a q), (k :: pl = insert a p), (k :: pl = insert a gv0), (k :: pl = insert a pl), (k :: pl = maybe_swap ql), (k :: pl = maybe_swap q), (k :: pl = maybe_swap p), (k :: pl = maybe_swap gv0), (k :: pl = maybe_swap pl)
(k :: pl = ql ++ ql), (k :: pl = ql ++ q), (k :: pl = ql ++ p), (k :: pl = ql ++ gv0), (k :: pl = ql ++ pl), (k :: pl = q ++ ql), (k :: pl = q ++ q), (k :: pl = q ++ p), (k :: pl = q ++ gv0), (k :: pl = q ++ pl)
(k :: pl = p ++ ql), (k :: pl = p ++ q), (k :: pl = p ++ p), (k :: pl = p ++ gv0), (k :: pl = p ++ pl), (k :: pl = gv0 ++ ql), (k :: pl = gv0 ++ q), (k :: pl = gv0 ++ p), (k :: pl = gv0 ++ gv0), (k :: pl = gv0 ++ pl)
(k :: pl = pl ++ ql), (k :: pl = pl ++ q), (k :: pl = pl ++ p), (k :: pl = pl ++ gv0), (k :: pl = pl ++ pl), (k :: pl = []), (a :: ql = ql), (a :: ql = q), (a :: ql = p), (a :: ql = gv0)
(a :: ql = pl), (a :: ql = merge ql ql), (a :: ql = merge ql q), (a :: ql = merge ql p), (a :: ql = merge ql gv0), (a :: ql = merge ql pl), (a :: ql = merge q ql), (a :: ql = merge q q), (a :: ql = merge q p), (a :: ql = merge q gv0)
(a :: ql = merge q pl), (a :: ql = merge p ql), (a :: ql = merge p q), (a :: ql = merge p p), (a :: ql = merge p gv0), (a :: ql = merge p pl), (a :: ql = merge gv0 ql), (a :: ql = merge gv0 q), (a :: ql = merge gv0 p), (a :: ql = merge gv0 gv0)
(a :: ql = merge gv0 pl), (a :: ql = merge pl ql), (a :: ql = merge pl q), (a :: ql = merge pl p), (a :: ql = merge pl gv0), (a :: ql = merge pl pl), (a :: ql = insert k ql), (a :: ql = insert k q), (a :: ql = insert k p), (a :: ql = insert k gv0)
(a :: ql = insert k pl), (a :: ql = insert a ql), (a :: ql = insert a q), (a :: ql = insert a p), (a :: ql = insert a gv0), (a :: ql = insert a pl), (a :: ql = maybe_swap ql), (a :: ql = maybe_swap q), (a :: ql = maybe_swap p), (a :: ql = maybe_swap gv0)
(a :: ql = maybe_swap pl), (a :: ql = ql ++ ql), (a :: ql = ql ++ q), (a :: ql = ql ++ p), (a :: ql = ql ++ gv0), (a :: ql = ql ++ pl), (a :: ql = q ++ ql), (a :: ql = q ++ q), (a :: ql = q ++ p), (a :: ql = q ++ gv0)
(a :: ql = q ++ pl), (a :: ql = p ++ ql), (a :: ql = p ++ q), (a :: ql = p ++ p), (a :: ql = p ++ gv0), (a :: ql = p ++ pl), (a :: ql = gv0 ++ ql), (a :: ql = gv0 ++ q), (a :: ql = gv0 ++ p), (a :: ql = gv0 ++ gv0)
(a :: ql = gv0 ++ pl), (a :: ql = pl ++ ql), (a :: ql = pl ++ q), (a :: ql = pl ++ p), (a :: ql = pl ++ gv0), (a :: ql = pl ++ pl), (a :: ql = []), (a :: q = ql), (a :: q = q), (a :: q = p)
(a :: q = gv0), (a :: q = pl), (a :: q = merge ql ql), (a :: q = merge ql q), (a :: q = merge ql p), (a :: q = merge ql gv0), (a :: q = merge ql pl), (a :: q = merge q ql), (a :: q = merge q q), (a :: q = merge q p)
(a :: q = merge q gv0), (a :: q = merge q pl), (a :: q = merge p ql), (a :: q = merge p q), (a :: q = merge p p), (a :: q = merge p gv0), (a :: q = merge p pl), (a :: q = merge gv0 ql), (a :: q = merge gv0 q), (a :: q = merge gv0 p)
(a :: q = merge gv0 gv0), (a :: q = merge gv0 pl), (a :: q = merge pl ql), (a :: q = merge pl q), (a :: q = merge pl p), (a :: q = merge pl gv0), (a :: q = merge pl pl), (a :: q = insert k ql), (a :: q = insert k q), (a :: q = insert k p)
(a :: q = insert k gv0), (a :: q = insert k pl), (a :: q = insert a ql), (a :: q = insert a q), (a :: q = insert a p), (a :: q = insert a gv0), (a :: q = insert a pl), (a :: q = maybe_swap ql), (a :: q = maybe_swap q), (a :: q = maybe_swap p)
(a :: q = maybe_swap gv0), (a :: q = maybe_swap pl), (a :: q = ql ++ ql), (a :: q = ql ++ q), (a :: q = ql ++ p), (a :: q = ql ++ gv0), (a :: q = ql ++ pl), (a :: q = q ++ ql), (a :: q = q ++ q), (a :: q = q ++ p)
(a :: q = q ++ gv0), (a :: q = q ++ pl), (a :: q = p ++ ql), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = p ++ gv0), (a :: q = p ++ pl), (a :: q = gv0 ++ ql), (a :: q = gv0 ++ q), (a :: q = gv0 ++ p)
(a :: q = gv0 ++ gv0), (a :: q = gv0 ++ pl), (a :: q = pl ++ ql), (a :: q = pl ++ q), (a :: q = pl ++ p), (a :: q = pl ++ gv0), (a :: q = pl ++ pl), (a :: q = []), (a :: p = ql), (a :: p = q)
(a :: p = p), (a :: p = gv0), (a :: p = pl), (a :: p = merge ql ql), (a :: p = merge ql q), (a :: p = merge ql p), (a :: p = merge ql gv0), (a :: p = merge ql pl), (a :: p = merge q ql), (a :: p = merge q q)
(a :: p = merge q p), (a :: p = merge q gv0), (a :: p = merge q pl), (a :: p = merge p ql), (a :: p = merge p q), (a :: p = merge p p), (a :: p = merge p gv0), (a :: p = merge p pl), (a :: p = merge gv0 ql), (a :: p = merge gv0 q)
(a :: p = merge gv0 p), (a :: p = merge gv0 gv0), (a :: p = merge gv0 pl), (a :: p = merge pl ql), (a :: p = merge pl q), (a :: p = merge pl p), (a :: p = merge pl gv0), (a :: p = merge pl pl), (a :: p = insert k ql), (a :: p = insert k q)
(a :: p = insert k p), (a :: p = insert k gv0), (a :: p = insert k pl), (a :: p = insert a ql), (a :: p = insert a q), (a :: p = insert a p), (a :: p = insert a gv0), (a :: p = insert a pl), (a :: p = maybe_swap ql), (a :: p = maybe_swap q)
(a :: p = maybe_swap p), (a :: p = maybe_swap gv0), (a :: p = maybe_swap pl), (a :: p = ql ++ ql), (a :: p = ql ++ q), (a :: p = ql ++ p), (a :: p = ql ++ gv0), (a :: p = ql ++ pl), (a :: p = q ++ ql), (a :: p = q ++ q)
(a :: p = q ++ p), (a :: p = q ++ gv0), (a :: p = q ++ pl), (a :: p = p ++ ql), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = p ++ gv0), (a :: p = p ++ pl), (a :: p = gv0 ++ ql), (a :: p = gv0 ++ q)
(a :: p = gv0 ++ p), (a :: p = gv0 ++ gv0), (a :: p = gv0 ++ pl), (a :: p = pl ++ ql), (a :: p = pl ++ q), (a :: p = pl ++ p), (a :: p = pl ++ gv0), (a :: p = pl ++ pl), (a :: p = []), (a :: gv0 = ql)
(a :: gv0 = q), (a :: gv0 = p), (a :: gv0 = gv0), (a :: gv0 = pl), (a :: gv0 = merge ql ql), (a :: gv0 = merge ql q), (a :: gv0 = merge ql p), (a :: gv0 = merge ql gv0), (a :: gv0 = merge ql pl), (a :: gv0 = merge q ql)
(a :: gv0 = merge q q), (a :: gv0 = merge q p), (a :: gv0 = merge q gv0), (a :: gv0 = merge q pl), (a :: gv0 = merge p ql), (a :: gv0 = merge p q), (a :: gv0 = merge p p), (a :: gv0 = merge p gv0), (a :: gv0 = merge p pl), (a :: gv0 = merge gv0 ql)
(a :: gv0 = merge gv0 q), (a :: gv0 = merge gv0 p), (a :: gv0 = merge gv0 gv0), (a :: gv0 = merge gv0 pl), (a :: gv0 = merge pl ql), (a :: gv0 = merge pl q), (a :: gv0 = merge pl p), (a :: gv0 = merge pl gv0), (a :: gv0 = merge pl pl), (a :: gv0 = insert k ql)
(a :: gv0 = insert k q), (a :: gv0 = insert k p), (a :: gv0 = insert k gv0), (a :: gv0 = insert k pl), (a :: gv0 = insert a ql), (a :: gv0 = insert a q), (a :: gv0 = insert a p), (a :: gv0 = insert a gv0), (a :: gv0 = insert a pl), (a :: gv0 = maybe_swap ql)
(a :: gv0 = maybe_swap q), (a :: gv0 = maybe_swap p), (a :: gv0 = maybe_swap gv0), (a :: gv0 = maybe_swap pl), (a :: gv0 = ql ++ ql), (a :: gv0 = ql ++ q), (a :: gv0 = ql ++ p), (a :: gv0 = ql ++ gv0), (a :: gv0 = ql ++ pl), (a :: gv0 = q ++ ql)
(a :: gv0 = q ++ q), (a :: gv0 = q ++ p), (a :: gv0 = q ++ gv0), (a :: gv0 = q ++ pl), (a :: gv0 = p ++ ql), (a :: gv0 = p ++ q), (a :: gv0 = p ++ p), (a :: gv0 = p ++ gv0), (a :: gv0 = p ++ pl), (a :: gv0 = gv0 ++ ql)
(a :: gv0 = gv0 ++ q), (a :: gv0 = gv0 ++ p), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = gv0 ++ pl), (a :: gv0 = pl ++ ql), (a :: gv0 = pl ++ q), (a :: gv0 = pl ++ p), (a :: gv0 = pl ++ gv0), (a :: gv0 = pl ++ pl), (a :: gv0 = [])
(a :: pl = ql), (a :: pl = q), (a :: pl = p), (a :: pl = gv0), (a :: pl = pl), (a :: pl = merge ql ql), (a :: pl = merge ql q), (a :: pl = merge ql p), (a :: pl = merge ql gv0), (a :: pl = merge ql pl)
(a :: pl = merge q ql), (a :: pl = merge q q), (a :: pl = merge q p), (a :: pl = merge q gv0), (a :: pl = merge q pl), (a :: pl = merge p ql), (a :: pl = merge p q), (a :: pl = merge p p), (a :: pl = merge p gv0), (a :: pl = merge p pl)
(a :: pl = merge gv0 ql), (a :: pl = merge gv0 q), (a :: pl = merge gv0 p), (a :: pl = merge gv0 gv0), (a :: pl = merge gv0 pl), (a :: pl = merge pl ql), (a :: pl = merge pl q), (a :: pl = merge pl p), (a :: pl = merge pl gv0), (a :: pl = merge pl pl)
(a :: pl = insert k ql), (a :: pl = insert k q), (a :: pl = insert k p), (a :: pl = insert k gv0), (a :: pl = insert k pl), (a :: pl = insert a ql), (a :: pl = insert a q), (a :: pl = insert a p), (a :: pl = insert a gv0), (a :: pl = insert a pl)
(a :: pl = maybe_swap ql), (a :: pl = maybe_swap q), (a :: pl = maybe_swap p), (a :: pl = maybe_swap gv0), (a :: pl = maybe_swap pl), (a :: pl = ql ++ ql), (a :: pl = ql ++ q), (a :: pl = ql ++ p), (a :: pl = ql ++ gv0), (a :: pl = ql ++ pl)
(a :: pl = q ++ ql), (a :: pl = q ++ q), (a :: pl = q ++ p), (a :: pl = q ++ gv0), (a :: pl = q ++ pl), (a :: pl = p ++ ql), (a :: pl = p ++ q), (a :: pl = p ++ p), (a :: pl = p ++ gv0), (a :: pl = p ++ pl)
(a :: pl = gv0 ++ ql), (a :: pl = gv0 ++ q), (a :: pl = gv0 ++ p), (a :: pl = gv0 ++ gv0), (a :: pl = gv0 ++ pl), (a :: pl = pl ++ ql), (a :: pl = pl ++ q), (a :: pl = pl ++ p), (a :: pl = pl ++ gv0), (a :: pl = pl ++ pl)
(a :: pl = []), (merge ql ql = ql), (merge ql ql = q), (merge ql ql = p), (merge ql ql = gv0), (merge ql ql = pl), (merge ql ql = insert k ql), (merge ql ql = insert k q), (merge ql ql = insert k p), (merge ql ql = insert k gv0)
(merge ql ql = insert k pl), (merge ql ql = insert a ql), (merge ql ql = insert a q), (merge ql ql = insert a p), (merge ql ql = insert a gv0), (merge ql ql = insert a pl), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap p), (merge ql ql = maybe_swap gv0)
(merge ql ql = maybe_swap pl), (merge ql ql = ql ++ ql), (merge ql ql = ql ++ q), (merge ql ql = ql ++ p), (merge ql ql = ql ++ gv0), (merge ql ql = ql ++ pl), (merge ql ql = q ++ ql), (merge ql ql = q ++ q), (merge ql ql = q ++ p), (merge ql ql = q ++ gv0)
(merge ql ql = q ++ pl), (merge ql ql = p ++ ql), (merge ql ql = p ++ q), (merge ql ql = p ++ p), (merge ql ql = p ++ gv0), (merge ql ql = p ++ pl), (merge ql ql = gv0 ++ ql), (merge ql ql = gv0 ++ q), (merge ql ql = gv0 ++ p), (merge ql ql = gv0 ++ gv0)
(merge ql ql = gv0 ++ pl), (merge ql ql = pl ++ ql), (merge ql ql = pl ++ q), (merge ql ql = pl ++ p), (merge ql ql = pl ++ gv0), (merge ql ql = pl ++ pl), (merge ql q = ql), (merge ql q = q), (merge ql q = p), (merge ql q = gv0)
(merge ql q = pl), (merge ql q = insert k ql), (merge ql q = insert k q), (merge ql q = insert k p), (merge ql q = insert k gv0), (merge ql q = insert k pl), (merge ql q = insert a ql), (merge ql q = insert a q), (merge ql q = insert a p), (merge ql q = insert a gv0)
(merge ql q = insert a pl), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap q), (merge ql q = maybe_swap p), (merge ql q = maybe_swap gv0), (merge ql q = maybe_swap pl), (merge ql q = ql ++ ql), (merge ql q = ql ++ q), (merge ql q = ql ++ p), (merge ql q = ql ++ gv0)
(merge ql q = ql ++ pl), (merge ql q = q ++ ql), (merge ql q = q ++ q), (merge ql q = q ++ p), (merge ql q = q ++ gv0), (merge ql q = q ++ pl), (merge ql q = p ++ ql), (merge ql q = p ++ q), (merge ql q = p ++ p), (merge ql q = p ++ gv0)
(merge ql q = p ++ pl), (merge ql q = gv0 ++ ql), (merge ql q = gv0 ++ q), (merge ql q = gv0 ++ p), (merge ql q = gv0 ++ gv0), (merge ql q = gv0 ++ pl), (merge ql q = pl ++ ql), (merge ql q = pl ++ q), (merge ql q = pl ++ p), (merge ql q = pl ++ gv0)
(merge ql q = pl ++ pl), (merge ql p = ql), (merge ql p = q), (merge ql p = p), (merge ql p = gv0), (merge ql p = pl), (merge ql p = insert k ql), (merge ql p = insert k q), (merge ql p = insert k p), (merge ql p = insert k gv0)
(merge ql p = insert k pl), (merge ql p = insert a ql), (merge ql p = insert a q), (merge ql p = insert a p), (merge ql p = insert a gv0), (merge ql p = insert a pl), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap q), (merge ql p = maybe_swap p), (merge ql p = maybe_swap gv0)
(merge ql p = maybe_swap pl), (merge ql p = ql ++ ql), (merge ql p = ql ++ q), (merge ql p = ql ++ p), (merge ql p = ql ++ gv0), (merge ql p = ql ++ pl), (merge ql p = q ++ ql), (merge ql p = q ++ q), (merge ql p = q ++ p), (merge ql p = q ++ gv0)
(merge ql p = q ++ pl), (merge ql p = p ++ ql), (merge ql p = p ++ q), (merge ql p = p ++ p), (merge ql p = p ++ gv0), (merge ql p = p ++ pl), (merge ql p = gv0 ++ ql), (merge ql p = gv0 ++ q), (merge ql p = gv0 ++ p), (merge ql p = gv0 ++ gv0)
(merge ql p = gv0 ++ pl), (merge ql p = pl ++ ql), (merge ql p = pl ++ q), (merge ql p = pl ++ p), (merge ql p = pl ++ gv0), (merge ql p = pl ++ pl), (merge ql gv0 = ql), (merge ql gv0 = q), (merge ql gv0 = p), (merge ql gv0 = gv0)
(merge ql gv0 = pl), (merge ql gv0 = insert k ql), (merge ql gv0 = insert k q), (merge ql gv0 = insert k p), (merge ql gv0 = insert k gv0), (merge ql gv0 = insert k pl), (merge ql gv0 = insert a ql), (merge ql gv0 = insert a q), (merge ql gv0 = insert a p), (merge ql gv0 = insert a gv0)
(merge ql gv0 = insert a pl), (merge ql gv0 = maybe_swap ql), (merge ql gv0 = maybe_swap q), (merge ql gv0 = maybe_swap p), (merge ql gv0 = maybe_swap gv0), (merge ql gv0 = maybe_swap pl), (merge ql gv0 = ql ++ ql), (merge ql gv0 = ql ++ q), (merge ql gv0 = ql ++ p), (merge ql gv0 = ql ++ gv0)
(merge ql gv0 = ql ++ pl), (merge ql gv0 = q ++ ql), (merge ql gv0 = q ++ q), (merge ql gv0 = q ++ p), (merge ql gv0 = q ++ gv0), (merge ql gv0 = q ++ pl), (merge ql gv0 = p ++ ql), (merge ql gv0 = p ++ q), (merge ql gv0 = p ++ p), (merge ql gv0 = p ++ gv0)
(merge ql gv0 = p ++ pl), (merge ql gv0 = gv0 ++ ql), (merge ql gv0 = gv0 ++ q), (merge ql gv0 = gv0 ++ p), (merge ql gv0 = gv0 ++ gv0), (merge ql gv0 = gv0 ++ pl), (merge ql gv0 = pl ++ ql), (merge ql gv0 = pl ++ q), (merge ql gv0 = pl ++ p), (merge ql gv0 = pl ++ gv0)
(merge ql gv0 = pl ++ pl), (merge ql pl = ql), (merge ql pl = q), (merge ql pl = p), (merge ql pl = gv0), (merge ql pl = pl), (merge ql pl = insert k ql), (merge ql pl = insert k q), (merge ql pl = insert k p), (merge ql pl = insert k gv0)
(merge ql pl = insert k pl), (merge ql pl = insert a ql), (merge ql pl = insert a q), (merge ql pl = insert a p), (merge ql pl = insert a gv0), (merge ql pl = insert a pl), (merge ql pl = maybe_swap ql), (merge ql pl = maybe_swap q), (merge ql pl = maybe_swap p), (merge ql pl = maybe_swap gv0)
(merge ql pl = maybe_swap pl), (merge ql pl = ql ++ ql), (merge ql pl = ql ++ q), (merge ql pl = ql ++ p), (merge ql pl = ql ++ gv0), (merge ql pl = ql ++ pl), (merge ql pl = q ++ ql), (merge ql pl = q ++ q), (merge ql pl = q ++ p), (merge ql pl = q ++ gv0)
(merge ql pl = q ++ pl), (merge ql pl = p ++ ql), (merge ql pl = p ++ q), (merge ql pl = p ++ p), (merge ql pl = p ++ gv0), (merge ql pl = p ++ pl), (merge ql pl = gv0 ++ ql), (merge ql pl = gv0 ++ q), (merge ql pl = gv0 ++ p), (merge ql pl = gv0 ++ gv0)
(merge ql pl = gv0 ++ pl), (merge ql pl = pl ++ ql), (merge ql pl = pl ++ q), (merge ql pl = pl ++ p), (merge ql pl = pl ++ gv0), (merge ql pl = pl ++ pl), (merge q ql = ql), (merge q ql = q), (merge q ql = p), (merge q ql = gv0)
(merge q ql = pl), (merge q ql = insert k ql), (merge q ql = insert k q), (merge q ql = insert k p), (merge q ql = insert k gv0), (merge q ql = insert k pl), (merge q ql = insert a ql), (merge q ql = insert a q), (merge q ql = insert a p), (merge q ql = insert a gv0)
(merge q ql = insert a pl), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap q), (merge q ql = maybe_swap p), (merge q ql = maybe_swap gv0), (merge q ql = maybe_swap pl), (merge q ql = ql ++ ql), (merge q ql = ql ++ q), (merge q ql = ql ++ p), (merge q ql = ql ++ gv0)
(merge q ql = ql ++ pl), (merge q ql = q ++ ql), (merge q ql = q ++ q), (merge q ql = q ++ p), (merge q ql = q ++ gv0), (merge q ql = q ++ pl), (merge q ql = p ++ ql), (merge q ql = p ++ q), (merge q ql = p ++ p), (merge q ql = p ++ gv0)
(merge q ql = p ++ pl), (merge q ql = gv0 ++ ql), (merge q ql = gv0 ++ q), (merge q ql = gv0 ++ p), (merge q ql = gv0 ++ gv0), (merge q ql = gv0 ++ pl), (merge q ql = pl ++ ql), (merge q ql = pl ++ q), (merge q ql = pl ++ p), (merge q ql = pl ++ gv0)
(merge q ql = pl ++ pl), (merge q q = ql), (merge q q = q), (merge q q = p), (merge q q = gv0), (merge q q = pl), (merge q q = insert k ql), (merge q q = insert k q), (merge q q = insert k p), (merge q q = insert k gv0)
(merge q q = insert k pl), (merge q q = insert a ql), (merge q q = insert a q), (merge q q = insert a p), (merge q q = insert a gv0), (merge q q = insert a pl), (merge q q = maybe_swap ql), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = maybe_swap gv0)
(merge q q = maybe_swap pl), (merge q q = ql ++ ql), (merge q q = ql ++ q), (merge q q = ql ++ p), (merge q q = ql ++ gv0), (merge q q = ql ++ pl), (merge q q = q ++ ql), (merge q q = q ++ q), (merge q q = q ++ p), (merge q q = q ++ gv0)
(merge q q = q ++ pl), (merge q q = p ++ ql), (merge q q = p ++ q), (merge q q = p ++ p), (merge q q = p ++ gv0), (merge q q = p ++ pl), (merge q q = gv0 ++ ql), (merge q q = gv0 ++ q), (merge q q = gv0 ++ p), (merge q q = gv0 ++ gv0)
(merge q q = gv0 ++ pl), (merge q q = pl ++ ql), (merge q q = pl ++ q), (merge q q = pl ++ p), (merge q q = pl ++ gv0), (merge q q = pl ++ pl), (merge q p = ql), (merge q p = q), (merge q p = p), (merge q p = gv0)
(merge q p = pl), (merge q p = insert k ql), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert k gv0), (merge q p = insert k pl), (merge q p = insert a ql), (merge q p = insert a q), (merge q p = insert a p), (merge q p = insert a gv0)
(merge q p = insert a pl), (merge q p = maybe_swap ql), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = maybe_swap gv0), (merge q p = maybe_swap pl), (merge q p = ql ++ ql), (merge q p = ql ++ q), (merge q p = ql ++ p), (merge q p = ql ++ gv0)
(merge q p = ql ++ pl), (merge q p = q ++ ql), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = q ++ gv0), (merge q p = q ++ pl), (merge q p = p ++ ql), (merge q p = p ++ q), (merge q p = p ++ p), (merge q p = p ++ gv0)
(merge q p = p ++ pl), (merge q p = gv0 ++ ql), (merge q p = gv0 ++ q), (merge q p = gv0 ++ p), (merge q p = gv0 ++ gv0), (merge q p = gv0 ++ pl), (merge q p = pl ++ ql), (merge q p = pl ++ q), (merge q p = pl ++ p), (merge q p = pl ++ gv0)
(merge q p = pl ++ pl), (merge q gv0 = ql), (merge q gv0 = q), (merge q gv0 = p), (merge q gv0 = gv0), (merge q gv0 = pl), (merge q gv0 = insert k ql), (merge q gv0 = insert k q), (merge q gv0 = insert k p), (merge q gv0 = insert k gv0)
(merge q gv0 = insert k pl), (merge q gv0 = insert a ql), (merge q gv0 = insert a q), (merge q gv0 = insert a p), (merge q gv0 = insert a gv0), (merge q gv0 = insert a pl), (merge q gv0 = maybe_swap ql), (merge q gv0 = maybe_swap q), (merge q gv0 = maybe_swap p), (merge q gv0 = maybe_swap gv0)
(merge q gv0 = maybe_swap pl), (merge q gv0 = ql ++ ql), (merge q gv0 = ql ++ q), (merge q gv0 = ql ++ p), (merge q gv0 = ql ++ gv0), (merge q gv0 = ql ++ pl), (merge q gv0 = q ++ ql), (merge q gv0 = q ++ q), (merge q gv0 = q ++ p), (merge q gv0 = q ++ gv0)
(merge q gv0 = q ++ pl), (merge q gv0 = p ++ ql), (merge q gv0 = p ++ q), (merge q gv0 = p ++ p), (merge q gv0 = p ++ gv0), (merge q gv0 = p ++ pl), (merge q gv0 = gv0 ++ ql), (merge q gv0 = gv0 ++ q), (merge q gv0 = gv0 ++ p), (merge q gv0 = gv0 ++ gv0)
(merge q gv0 = gv0 ++ pl), (merge q gv0 = pl ++ ql), (merge q gv0 = pl ++ q), (merge q gv0 = pl ++ p), (merge q gv0 = pl ++ gv0), (merge q gv0 = pl ++ pl), (merge q pl = ql), (merge q pl = q), (merge q pl = p), (merge q pl = gv0)
(merge q pl = pl), (merge q pl = insert k ql), (merge q pl = insert k q), (merge q pl = insert k p), (merge q pl = insert k gv0), (merge q pl = insert k pl), (merge q pl = insert a ql), (merge q pl = insert a q), (merge q pl = insert a p), (merge q pl = insert a gv0)
(merge q pl = insert a pl), (merge q pl = maybe_swap ql), (merge q pl = maybe_swap q), (merge q pl = maybe_swap p), (merge q pl = maybe_swap gv0), (merge q pl = maybe_swap pl), (merge q pl = ql ++ ql), (merge q pl = ql ++ q), (merge q pl = ql ++ p), (merge q pl = ql ++ gv0)
(merge q pl = ql ++ pl), (merge q pl = q ++ ql), (merge q pl = q ++ q), (merge q pl = q ++ p), (merge q pl = q ++ gv0), (merge q pl = q ++ pl), (merge q pl = p ++ ql), (merge q pl = p ++ q), (merge q pl = p ++ p), (merge q pl = p ++ gv0)
(merge q pl = p ++ pl), (merge q pl = gv0 ++ ql), (merge q pl = gv0 ++ q), (merge q pl = gv0 ++ p), (merge q pl = gv0 ++ gv0), (merge q pl = gv0 ++ pl), (merge q pl = pl ++ ql), (merge q pl = pl ++ q), (merge q pl = pl ++ p), (merge q pl = pl ++ gv0)
(merge q pl = pl ++ pl), (merge p ql = ql), (merge p ql = q), (merge p ql = p), (merge p ql = gv0), (merge p ql = pl), (merge p ql = insert k ql), (merge p ql = insert k q), (merge p ql = insert k p), (merge p ql = insert k gv0)
(merge p ql = insert k pl), (merge p ql = insert a ql), (merge p ql = insert a q), (merge p ql = insert a p), (merge p ql = insert a gv0), (merge p ql = insert a pl), (merge p ql = maybe_swap ql), (merge p ql = maybe_swap q), (merge p ql = maybe_swap p), (merge p ql = maybe_swap gv0)
(merge p ql = maybe_swap pl), (merge p ql = ql ++ ql), (merge p ql = ql ++ q), (merge p ql = ql ++ p), (merge p ql = ql ++ gv0), (merge p ql = ql ++ pl), (merge p ql = q ++ ql), (merge p ql = q ++ q), (merge p ql = q ++ p), (merge p ql = q ++ gv0)
(merge p ql = q ++ pl), (merge p ql = p ++ ql), (merge p ql = p ++ q), (merge p ql = p ++ p), (merge p ql = p ++ gv0), (merge p ql = p ++ pl), (merge p ql = gv0 ++ ql), (merge p ql = gv0 ++ q), (merge p ql = gv0 ++ p), (merge p ql = gv0 ++ gv0)
(merge p ql = gv0 ++ pl), (merge p ql = pl ++ ql), (merge p ql = pl ++ q), (merge p ql = pl ++ p), (merge p ql = pl ++ gv0), (merge p ql = pl ++ pl), (merge p q = ql), (merge p q = q), (merge p q = p), (merge p q = gv0)
(merge p q = pl), (merge p q = insert k ql), (merge p q = insert k q), (merge p q = insert k p), (merge p q = insert k gv0), (merge p q = insert k pl), (merge p q = insert a ql), (merge p q = insert a q), (merge p q = insert a p), (merge p q = insert a gv0)
(merge p q = insert a pl), (merge p q = maybe_swap ql), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = maybe_swap gv0), (merge p q = maybe_swap pl), (merge p q = ql ++ ql), (merge p q = ql ++ q), (merge p q = ql ++ p), (merge p q = ql ++ gv0)
(merge p q = ql ++ pl), (merge p q = q ++ ql), (merge p q = q ++ q), (merge p q = q ++ p), (merge p q = q ++ gv0), (merge p q = q ++ pl), (merge p q = p ++ ql), (merge p q = p ++ q), (merge p q = p ++ p), (merge p q = p ++ gv0)
(merge p q = p ++ pl), (merge p q = gv0 ++ ql), (merge p q = gv0 ++ q), (merge p q = gv0 ++ p), (merge p q = gv0 ++ gv0), (merge p q = gv0 ++ pl), (merge p q = pl ++ ql), (merge p q = pl ++ q), (merge p q = pl ++ p), (merge p q = pl ++ gv0)
(merge p q = pl ++ pl), (merge p p = ql), (merge p p = q), (merge p p = p), (merge p p = gv0), (merge p p = pl), (merge p p = insert k ql), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert k gv0)
(merge p p = insert k pl), (merge p p = insert a ql), (merge p p = insert a q), (merge p p = insert a p), (merge p p = insert a gv0), (merge p p = insert a pl), (merge p p = maybe_swap ql), (merge p p = maybe_swap q), (merge p p = maybe_swap p), (merge p p = maybe_swap gv0)
(merge p p = maybe_swap pl), (merge p p = ql ++ ql), (merge p p = ql ++ q), (merge p p = ql ++ p), (merge p p = ql ++ gv0), (merge p p = ql ++ pl), (merge p p = q ++ ql), (merge p p = q ++ q), (merge p p = q ++ p), (merge p p = q ++ gv0)
(merge p p = q ++ pl), (merge p p = p ++ ql), (merge p p = p ++ q), (merge p p = p ++ p), (merge p p = p ++ gv0), (merge p p = p ++ pl), (merge p p = gv0 ++ ql), (merge p p = gv0 ++ q), (merge p p = gv0 ++ p), (merge p p = gv0 ++ gv0)
(merge p p = gv0 ++ pl), (merge p p = pl ++ ql), (merge p p = pl ++ q), (merge p p = pl ++ p), (merge p p = pl ++ gv0), (merge p p = pl ++ pl), (merge p gv0 = ql), (merge p gv0 = q), (merge p gv0 = p), (merge p gv0 = gv0)
(merge p gv0 = pl), (merge p gv0 = insert k ql), (merge p gv0 = insert k q), (merge p gv0 = insert k p), (merge p gv0 = insert k gv0), (merge p gv0 = insert k pl), (merge p gv0 = insert a ql), (merge p gv0 = insert a q), (merge p gv0 = insert a p), (merge p gv0 = insert a gv0)
(merge p gv0 = insert a pl), (merge p gv0 = maybe_swap ql), (merge p gv0 = maybe_swap q), (merge p gv0 = maybe_swap p), (merge p gv0 = maybe_swap gv0), (merge p gv0 = maybe_swap pl), (merge p gv0 = ql ++ ql), (merge p gv0 = ql ++ q), (merge p gv0 = ql ++ p), (merge p gv0 = ql ++ gv0)
(merge p gv0 = ql ++ pl), (merge p gv0 = q ++ ql), (merge p gv0 = q ++ q), (merge p gv0 = q ++ p), (merge p gv0 = q ++ gv0), (merge p gv0 = q ++ pl), (merge p gv0 = p ++ ql), (merge p gv0 = p ++ q), (merge p gv0 = p ++ p), (merge p gv0 = p ++ gv0)
(merge p gv0 = p ++ pl), (merge p gv0 = gv0 ++ ql), (merge p gv0 = gv0 ++ q), (merge p gv0 = gv0 ++ p), (merge p gv0 = gv0 ++ gv0), (merge p gv0 = gv0 ++ pl), (merge p gv0 = pl ++ ql), (merge p gv0 = pl ++ q), (merge p gv0 = pl ++ p), (merge p gv0 = pl ++ gv0)
(merge p gv0 = pl ++ pl), (merge p pl = ql), (merge p pl = q), (merge p pl = p), (merge p pl = gv0), (merge p pl = pl), (merge p pl = insert k ql), (merge p pl = insert k q), (merge p pl = insert k p), (merge p pl = insert k gv0)
(merge p pl = insert k pl), (merge p pl = insert a ql), (merge p pl = insert a q), (merge p pl = insert a p), (merge p pl = insert a gv0), (merge p pl = insert a pl), (merge p pl = maybe_swap ql), (merge p pl = maybe_swap q), (merge p pl = maybe_swap p), (merge p pl = maybe_swap gv0)
(merge p pl = maybe_swap pl), (merge p pl = ql ++ ql), (merge p pl = ql ++ q), (merge p pl = ql ++ p), (merge p pl = ql ++ gv0), (merge p pl = ql ++ pl), (merge p pl = q ++ ql), (merge p pl = q ++ q), (merge p pl = q ++ p), (merge p pl = q ++ gv0)
(merge p pl = q ++ pl), (merge p pl = p ++ ql), (merge p pl = p ++ q), (merge p pl = p ++ p), (merge p pl = p ++ gv0), (merge p pl = p ++ pl), (merge p pl = gv0 ++ ql), (merge p pl = gv0 ++ q), (merge p pl = gv0 ++ p), (merge p pl = gv0 ++ gv0)
(merge p pl = gv0 ++ pl), (merge p pl = pl ++ ql), (merge p pl = pl ++ q), (merge p pl = pl ++ p), (merge p pl = pl ++ gv0), (merge p pl = pl ++ pl), (merge gv0 ql = ql), (merge gv0 ql = q), (merge gv0 ql = p), (merge gv0 ql = gv0)
(merge gv0 ql = pl), (merge gv0 ql = insert k ql), (merge gv0 ql = insert k q), (merge gv0 ql = insert k p), (merge gv0 ql = insert k gv0), (merge gv0 ql = insert k pl), (merge gv0 ql = insert a ql), (merge gv0 ql = insert a q), (merge gv0 ql = insert a p), (merge gv0 ql = insert a gv0)
(merge gv0 ql = insert a pl), (merge gv0 ql = maybe_swap ql), (merge gv0 ql = maybe_swap q), (merge gv0 ql = maybe_swap p), (merge gv0 ql = maybe_swap gv0), (merge gv0 ql = maybe_swap pl), (merge gv0 ql = ql ++ ql), (merge gv0 ql = ql ++ q), (merge gv0 ql = ql ++ p), (merge gv0 ql = ql ++ gv0)
(merge gv0 ql = ql ++ pl), (merge gv0 ql = q ++ ql), (merge gv0 ql = q ++ q), (merge gv0 ql = q ++ p), (merge gv0 ql = q ++ gv0), (merge gv0 ql = q ++ pl), (merge gv0 ql = p ++ ql), (merge gv0 ql = p ++ q), (merge gv0 ql = p ++ p), (merge gv0 ql = p ++ gv0)
(merge gv0 ql = p ++ pl), (merge gv0 ql = gv0 ++ ql), (merge gv0 ql = gv0 ++ q), (merge gv0 ql = gv0 ++ p), (merge gv0 ql = gv0 ++ gv0), (merge gv0 ql = gv0 ++ pl), (merge gv0 ql = pl ++ ql), (merge gv0 ql = pl ++ q), (merge gv0 ql = pl ++ p), (merge gv0 ql = pl ++ gv0)
(merge gv0 ql = pl ++ pl), (merge gv0 q = ql), (merge gv0 q = q), (merge gv0 q = p), (merge gv0 q = gv0), (merge gv0 q = pl), (merge gv0 q = insert k ql), (merge gv0 q = insert k q), (merge gv0 q = insert k p), (merge gv0 q = insert k gv0)
(merge gv0 q = insert k pl), (merge gv0 q = insert a ql), (merge gv0 q = insert a q), (merge gv0 q = insert a p), (merge gv0 q = insert a gv0), (merge gv0 q = insert a pl), (merge gv0 q = maybe_swap ql), (merge gv0 q = maybe_swap q), (merge gv0 q = maybe_swap p), (merge gv0 q = maybe_swap gv0)
(merge gv0 q = maybe_swap pl), (merge gv0 q = ql ++ ql), (merge gv0 q = ql ++ q), (merge gv0 q = ql ++ p), (merge gv0 q = ql ++ gv0), (merge gv0 q = ql ++ pl), (merge gv0 q = q ++ ql), (merge gv0 q = q ++ q), (merge gv0 q = q ++ p), (merge gv0 q = q ++ gv0)
(merge gv0 q = q ++ pl), (merge gv0 q = p ++ ql), (merge gv0 q = p ++ q), (merge gv0 q = p ++ p), (merge gv0 q = p ++ gv0), (merge gv0 q = p ++ pl), (merge gv0 q = gv0 ++ ql), (merge gv0 q = gv0 ++ q), (merge gv0 q = gv0 ++ p), (merge gv0 q = gv0 ++ gv0)
(merge gv0 q = gv0 ++ pl), (merge gv0 q = pl ++ ql), (merge gv0 q = pl ++ q), (merge gv0 q = pl ++ p), (merge gv0 q = pl ++ gv0), (merge gv0 q = pl ++ pl), (merge gv0 p = ql), (merge gv0 p = q), (merge gv0 p = p), (merge gv0 p = gv0)
(merge gv0 p = pl), (merge gv0 p = insert k ql), (merge gv0 p = insert k q), (merge gv0 p = insert k p), (merge gv0 p = insert k gv0), (merge gv0 p = insert k pl), (merge gv0 p = insert a ql), (merge gv0 p = insert a q), (merge gv0 p = insert a p), (merge gv0 p = insert a gv0)
(merge gv0 p = insert a pl), (merge gv0 p = maybe_swap ql), (merge gv0 p = maybe_swap q), (merge gv0 p = maybe_swap p), (merge gv0 p = maybe_swap gv0), (merge gv0 p = maybe_swap pl), (merge gv0 p = ql ++ ql), (merge gv0 p = ql ++ q), (merge gv0 p = ql ++ p), (merge gv0 p = ql ++ gv0)
(merge gv0 p = ql ++ pl), (merge gv0 p = q ++ ql), (merge gv0 p = q ++ q), (merge gv0 p = q ++ p), (merge gv0 p = q ++ gv0), (merge gv0 p = q ++ pl), (merge gv0 p = p ++ ql), (merge gv0 p = p ++ q), (merge gv0 p = p ++ p), (merge gv0 p = p ++ gv0)
(merge gv0 p = p ++ pl), (merge gv0 p = gv0 ++ ql), (merge gv0 p = gv0 ++ q), (merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ gv0), (merge gv0 p = gv0 ++ pl), (merge gv0 p = pl ++ ql), (merge gv0 p = pl ++ q), (merge gv0 p = pl ++ p), (merge gv0 p = pl ++ gv0)
(merge gv0 p = pl ++ pl), (merge gv0 gv0 = ql), (merge gv0 gv0 = q), (merge gv0 gv0 = p), (merge gv0 gv0 = gv0), (merge gv0 gv0 = pl), (merge gv0 gv0 = insert k ql), (merge gv0 gv0 = insert k q), (merge gv0 gv0 = insert k p), (merge gv0 gv0 = insert k gv0)
(merge gv0 gv0 = insert k pl), (merge gv0 gv0 = insert a ql), (merge gv0 gv0 = insert a q), (merge gv0 gv0 = insert a p), (merge gv0 gv0 = insert a gv0), (merge gv0 gv0 = insert a pl), (merge gv0 gv0 = maybe_swap ql), (merge gv0 gv0 = maybe_swap q), (merge gv0 gv0 = maybe_swap p), (merge gv0 gv0 = maybe_swap gv0)
(merge gv0 gv0 = maybe_swap pl), (merge gv0 gv0 = ql ++ ql), (merge gv0 gv0 = ql ++ q), (merge gv0 gv0 = ql ++ p), (merge gv0 gv0 = ql ++ gv0), (merge gv0 gv0 = ql ++ pl), (merge gv0 gv0 = q ++ ql), (merge gv0 gv0 = q ++ q), (merge gv0 gv0 = q ++ p), (merge gv0 gv0 = q ++ gv0)
(merge gv0 gv0 = q ++ pl), (merge gv0 gv0 = p ++ ql), (merge gv0 gv0 = p ++ q), (merge gv0 gv0 = p ++ p), (merge gv0 gv0 = p ++ gv0), (merge gv0 gv0 = p ++ pl), (merge gv0 gv0 = gv0 ++ ql), (merge gv0 gv0 = gv0 ++ q), (merge gv0 gv0 = gv0 ++ p), (merge gv0 gv0 = gv0 ++ gv0)
(merge gv0 gv0 = gv0 ++ pl), (merge gv0 gv0 = pl ++ ql), (merge gv0 gv0 = pl ++ q), (merge gv0 gv0 = pl ++ p), (merge gv0 gv0 = pl ++ gv0), (merge gv0 gv0 = pl ++ pl), (merge gv0 pl = ql), (merge gv0 pl = q), (merge gv0 pl = p), (merge gv0 pl = gv0)
(merge gv0 pl = pl), (merge gv0 pl = insert k ql), (merge gv0 pl = insert k q), (merge gv0 pl = insert k p), (merge gv0 pl = insert k gv0), (merge gv0 pl = insert k pl), (merge gv0 pl = insert a ql), (merge gv0 pl = insert a q), (merge gv0 pl = insert a p), (merge gv0 pl = insert a gv0)
(merge gv0 pl = insert a pl), (merge gv0 pl = maybe_swap ql), (merge gv0 pl = maybe_swap q), (merge gv0 pl = maybe_swap p), (merge gv0 pl = maybe_swap gv0), (merge gv0 pl = maybe_swap pl), (merge gv0 pl = ql ++ ql), (merge gv0 pl = ql ++ q), (merge gv0 pl = ql ++ p), (merge gv0 pl = ql ++ gv0)
(merge gv0 pl = ql ++ pl), (merge gv0 pl = q ++ ql), (merge gv0 pl = q ++ q), (merge gv0 pl = q ++ p), (merge gv0 pl = q ++ gv0), (merge gv0 pl = q ++ pl), (merge gv0 pl = p ++ ql), (merge gv0 pl = p ++ q), (merge gv0 pl = p ++ p), (merge gv0 pl = p ++ gv0)
(merge gv0 pl = p ++ pl), (merge gv0 pl = gv0 ++ ql), (merge gv0 pl = gv0 ++ q), (merge gv0 pl = gv0 ++ p), (merge gv0 pl = gv0 ++ gv0), (merge gv0 pl = gv0 ++ pl), (merge gv0 pl = pl ++ ql), (merge gv0 pl = pl ++ q), (merge gv0 pl = pl ++ p), (merge gv0 pl = pl ++ gv0)
(merge gv0 pl = pl ++ pl), (merge pl ql = ql), (merge pl ql = q), (merge pl ql = p), (merge pl ql = gv0), (merge pl ql = pl), (merge pl ql = insert k ql), (merge pl ql = insert k q), (merge pl ql = insert k p), (merge pl ql = insert k gv0)
(merge pl ql = insert k pl), (merge pl ql = insert a ql), (merge pl ql = insert a q), (merge pl ql = insert a p), (merge pl ql = insert a gv0), (merge pl ql = insert a pl), (merge pl ql = maybe_swap ql), (merge pl ql = maybe_swap q), (merge pl ql = maybe_swap p), (merge pl ql = maybe_swap gv0)
(merge pl ql = maybe_swap pl), (merge pl ql = ql ++ ql), (merge pl ql = ql ++ q), (merge pl ql = ql ++ p), (merge pl ql = ql ++ gv0), (merge pl ql = ql ++ pl), (merge pl ql = q ++ ql), (merge pl ql = q ++ q), (merge pl ql = q ++ p), (merge pl ql = q ++ gv0)
(merge pl ql = q ++ pl), (merge pl ql = p ++ ql), (merge pl ql = p ++ q), (merge pl ql = p ++ p), (merge pl ql = p ++ gv0), (merge pl ql = p ++ pl), (merge pl ql = gv0 ++ ql), (merge pl ql = gv0 ++ q), (merge pl ql = gv0 ++ p), (merge pl ql = gv0 ++ gv0)
(merge pl ql = gv0 ++ pl), (merge pl ql = pl ++ ql), (merge pl ql = pl ++ q), (merge pl ql = pl ++ p), (merge pl ql = pl ++ gv0), (merge pl ql = pl ++ pl), (merge pl q = ql), (merge pl q = q), (merge pl q = p), (merge pl q = gv0)
(merge pl q = pl), (merge pl q = insert k ql), (merge pl q = insert k q), (merge pl q = insert k p), (merge pl q = insert k gv0), (merge pl q = insert k pl), (merge pl q = insert a ql), (merge pl q = insert a q), (merge pl q = insert a p), (merge pl q = insert a gv0)
(merge pl q = insert a pl), (merge pl q = maybe_swap ql), (merge pl q = maybe_swap q), (merge pl q = maybe_swap p), (merge pl q = maybe_swap gv0), (merge pl q = maybe_swap pl), (merge pl q = ql ++ ql), (merge pl q = ql ++ q), (merge pl q = ql ++ p), (merge pl q = ql ++ gv0)
(merge pl q = ql ++ pl), (merge pl q = q ++ ql), (merge pl q = q ++ q), (merge pl q = q ++ p), (merge pl q = q ++ gv0), (merge pl q = q ++ pl), (merge pl q = p ++ ql), (merge pl q = p ++ q), (merge pl q = p ++ p), (merge pl q = p ++ gv0)
(merge pl q = p ++ pl), (merge pl q = gv0 ++ ql), (merge pl q = gv0 ++ q), (merge pl q = gv0 ++ p), (merge pl q = gv0 ++ gv0), (merge pl q = gv0 ++ pl), (merge pl q = pl ++ ql), (merge pl q = pl ++ q), (merge pl q = pl ++ p), (merge pl q = pl ++ gv0)
(merge pl q = pl ++ pl), (merge pl p = ql), (merge pl p = q), (merge pl p = p), (merge pl p = gv0), (merge pl p = pl), (merge pl p = insert k ql), (merge pl p = insert k q), (merge pl p = insert k p), (merge pl p = insert k gv0)
(merge pl p = insert k pl), (merge pl p = insert a ql), (merge pl p = insert a q), (merge pl p = insert a p), (merge pl p = insert a gv0), (merge pl p = insert a pl), (merge pl p = maybe_swap ql), (merge pl p = maybe_swap q), (merge pl p = maybe_swap p), (merge pl p = maybe_swap gv0)
(merge pl p = maybe_swap pl), (merge pl p = ql ++ ql), (merge pl p = ql ++ q), (merge pl p = ql ++ p), (merge pl p = ql ++ gv0), (merge pl p = ql ++ pl), (merge pl p = q ++ ql), (merge pl p = q ++ q), (merge pl p = q ++ p), (merge pl p = q ++ gv0)
(merge pl p = q ++ pl), (merge pl p = p ++ ql), (merge pl p = p ++ q), (merge pl p = p ++ p), (merge pl p = p ++ gv0), (merge pl p = p ++ pl), (merge pl p = gv0 ++ ql), (merge pl p = gv0 ++ q), (merge pl p = gv0 ++ p), (merge pl p = gv0 ++ gv0)
(merge pl p = gv0 ++ pl), (merge pl p = pl ++ ql), (merge pl p = pl ++ q), (merge pl p = pl ++ p), (merge pl p = pl ++ gv0), (merge pl p = pl ++ pl), (merge pl gv0 = ql), (merge pl gv0 = q), (merge pl gv0 = p), (merge pl gv0 = gv0)
(merge pl gv0 = pl), (merge pl gv0 = insert k ql), (merge pl gv0 = insert k q), (merge pl gv0 = insert k p), (merge pl gv0 = insert k gv0), (merge pl gv0 = insert k pl), (merge pl gv0 = insert a ql), (merge pl gv0 = insert a q), (merge pl gv0 = insert a p), (merge pl gv0 = insert a gv0)
(merge pl gv0 = insert a pl), (merge pl gv0 = maybe_swap ql), (merge pl gv0 = maybe_swap q), (merge pl gv0 = maybe_swap p), (merge pl gv0 = maybe_swap gv0), (merge pl gv0 = maybe_swap pl), (merge pl gv0 = ql ++ ql), (merge pl gv0 = ql ++ q), (merge pl gv0 = ql ++ p), (merge pl gv0 = ql ++ gv0)
(merge pl gv0 = ql ++ pl), (merge pl gv0 = q ++ ql), (merge pl gv0 = q ++ q), (merge pl gv0 = q ++ p), (merge pl gv0 = q ++ gv0), (merge pl gv0 = q ++ pl), (merge pl gv0 = p ++ ql), (merge pl gv0 = p ++ q), (merge pl gv0 = p ++ p), (merge pl gv0 = p ++ gv0)
(merge pl gv0 = p ++ pl), (merge pl gv0 = gv0 ++ ql), (merge pl gv0 = gv0 ++ q), (merge pl gv0 = gv0 ++ p), (merge pl gv0 = gv0 ++ gv0), (merge pl gv0 = gv0 ++ pl), (merge pl gv0 = pl ++ ql), (merge pl gv0 = pl ++ q), (merge pl gv0 = pl ++ p), (merge pl gv0 = pl ++ gv0)
(merge pl gv0 = pl ++ pl), (merge pl pl = ql), (merge pl pl = q), (merge pl pl = p), (merge pl pl = gv0), (merge pl pl = pl), (merge pl pl = insert k ql), (merge pl pl = insert k q), (merge pl pl = insert k p), (merge pl pl = insert k gv0)
(merge pl pl = insert k pl), (merge pl pl = insert a ql), (merge pl pl = insert a q), (merge pl pl = insert a p), (merge pl pl = insert a gv0), (merge pl pl = insert a pl), (merge pl pl = maybe_swap ql), (merge pl pl = maybe_swap q), (merge pl pl = maybe_swap p), (merge pl pl = maybe_swap gv0)
(merge pl pl = maybe_swap pl), (merge pl pl = ql ++ ql), (merge pl pl = ql ++ q), (merge pl pl = ql ++ p), (merge pl pl = ql ++ gv0), (merge pl pl = ql ++ pl), (merge pl pl = q ++ ql), (merge pl pl = q ++ q), (merge pl pl = q ++ p), (merge pl pl = q ++ gv0)
(merge pl pl = q ++ pl), (merge pl pl = p ++ ql), (merge pl pl = p ++ q), (merge pl pl = p ++ p), (merge pl pl = p ++ gv0), (merge pl pl = p ++ pl), (merge pl pl = gv0 ++ ql), (merge pl pl = gv0 ++ q), (merge pl pl = gv0 ++ p), (merge pl pl = gv0 ++ gv0)
(merge pl pl = gv0 ++ pl), (merge pl pl = pl ++ ql), (merge pl pl = pl ++ q), (merge pl pl = pl ++ p), (merge pl pl = pl ++ gv0), (merge pl pl = pl ++ pl), (insert k ql = ql), (insert k ql = q), (insert k ql = p), (insert k ql = gv0)
(insert k ql = pl), (insert k ql = ql ++ ql), (insert k ql = ql ++ q), (insert k ql = ql ++ p), (insert k ql = ql ++ gv0), (insert k ql = ql ++ pl), (insert k ql = q ++ ql), (insert k ql = q ++ q), (insert k ql = q ++ p), (insert k ql = q ++ gv0)
(insert k ql = q ++ pl), (insert k ql = p ++ ql), (insert k ql = p ++ q), (insert k ql = p ++ p), (insert k ql = p ++ gv0), (insert k ql = p ++ pl), (insert k ql = gv0 ++ ql), (insert k ql = gv0 ++ q), (insert k ql = gv0 ++ p), (insert k ql = gv0 ++ gv0)
(insert k ql = gv0 ++ pl), (insert k ql = pl ++ ql), (insert k ql = pl ++ q), (insert k ql = pl ++ p), (insert k ql = pl ++ gv0), (insert k ql = pl ++ pl), (insert k q = ql), (insert k q = q), (insert k q = p), (insert k q = gv0)
(insert k q = pl), (insert k q = ql ++ ql), (insert k q = ql ++ q), (insert k q = ql ++ p), (insert k q = ql ++ gv0), (insert k q = ql ++ pl), (insert k q = q ++ ql), (insert k q = q ++ q), (insert k q = q ++ p), (insert k q = q ++ gv0)
(insert k q = q ++ pl), (insert k q = p ++ ql), (insert k q = p ++ q), (insert k q = p ++ p), (insert k q = p ++ gv0), (insert k q = p ++ pl), (insert k q = gv0 ++ ql), (insert k q = gv0 ++ q), (insert k q = gv0 ++ p), (insert k q = gv0 ++ gv0)
(insert k q = gv0 ++ pl), (insert k q = pl ++ ql), (insert k q = pl ++ q), (insert k q = pl ++ p), (insert k q = pl ++ gv0), (insert k q = pl ++ pl), (insert k p = ql), (insert k p = q), (insert k p = p), (insert k p = gv0)
(insert k p = pl), (insert k p = ql ++ ql), (insert k p = ql ++ q), (insert k p = ql ++ p), (insert k p = ql ++ gv0), (insert k p = ql ++ pl), (insert k p = q ++ ql), (insert k p = q ++ q), (insert k p = q ++ p), (insert k p = q ++ gv0)
(insert k p = q ++ pl), (insert k p = p ++ ql), (insert k p = p ++ q), (insert k p = p ++ p), (insert k p = p ++ gv0), (insert k p = p ++ pl), (insert k p = gv0 ++ ql), (insert k p = gv0 ++ q), (insert k p = gv0 ++ p), (insert k p = gv0 ++ gv0)
(insert k p = gv0 ++ pl), (insert k p = pl ++ ql), (insert k p = pl ++ q), (insert k p = pl ++ p), (insert k p = pl ++ gv0), (insert k p = pl ++ pl), (insert k gv0 = ql), (insert k gv0 = q), (insert k gv0 = p), (insert k gv0 = gv0)
(insert k gv0 = pl), (insert k gv0 = ql ++ ql), (insert k gv0 = ql ++ q), (insert k gv0 = ql ++ p), (insert k gv0 = ql ++ gv0), (insert k gv0 = ql ++ pl), (insert k gv0 = q ++ ql), (insert k gv0 = q ++ q), (insert k gv0 = q ++ p), (insert k gv0 = q ++ gv0)
(insert k gv0 = q ++ pl), (insert k gv0 = p ++ ql), (insert k gv0 = p ++ q), (insert k gv0 = p ++ p), (insert k gv0 = p ++ gv0), (insert k gv0 = p ++ pl), (insert k gv0 = gv0 ++ ql), (insert k gv0 = gv0 ++ q), (insert k gv0 = gv0 ++ p), (insert k gv0 = gv0 ++ gv0)
(insert k gv0 = gv0 ++ pl), (insert k gv0 = pl ++ ql), (insert k gv0 = pl ++ q), (insert k gv0 = pl ++ p), (insert k gv0 = pl ++ gv0), (insert k gv0 = pl ++ pl), (insert k pl = ql), (insert k pl = q), (insert k pl = p), (insert k pl = gv0)
(insert k pl = pl), (insert k pl = ql ++ ql), (insert k pl = ql ++ q), (insert k pl = ql ++ p), (insert k pl = ql ++ gv0), (insert k pl = ql ++ pl), (insert k pl = q ++ ql), (insert k pl = q ++ q), (insert k pl = q ++ p), (insert k pl = q ++ gv0)
(insert k pl = q ++ pl), (insert k pl = p ++ ql), (insert k pl = p ++ q), (insert k pl = p ++ p), (insert k pl = p ++ gv0), (insert k pl = p ++ pl), (insert k pl = gv0 ++ ql), (insert k pl = gv0 ++ q), (insert k pl = gv0 ++ p), (insert k pl = gv0 ++ gv0)
(insert k pl = gv0 ++ pl), (insert k pl = pl ++ ql), (insert k pl = pl ++ q), (insert k pl = pl ++ p), (insert k pl = pl ++ gv0), (insert k pl = pl ++ pl), (insert a ql = ql), (insert a ql = q), (insert a ql = p), (insert a ql = gv0)
(insert a ql = pl), (insert a ql = ql ++ ql), (insert a ql = ql ++ q), (insert a ql = ql ++ p), (insert a ql = ql ++ gv0), (insert a ql = ql ++ pl), (insert a ql = q ++ ql), (insert a ql = q ++ q), (insert a ql = q ++ p), (insert a ql = q ++ gv0)
(insert a ql = q ++ pl), (insert a ql = p ++ ql), (insert a ql = p ++ q), (insert a ql = p ++ p), (insert a ql = p ++ gv0), (insert a ql = p ++ pl), (insert a ql = gv0 ++ ql), (insert a ql = gv0 ++ q), (insert a ql = gv0 ++ p), (insert a ql = gv0 ++ gv0)
(insert a ql = gv0 ++ pl), (insert a ql = pl ++ ql), (insert a ql = pl ++ q), (insert a ql = pl ++ p), (insert a ql = pl ++ gv0), (insert a ql = pl ++ pl), (insert a q = ql), (insert a q = q), (insert a q = p), (insert a q = gv0)
(insert a q = pl), (insert a q = ql ++ ql), (insert a q = ql ++ q), (insert a q = ql ++ p), (insert a q = ql ++ gv0), (insert a q = ql ++ pl), (insert a q = q ++ ql), (insert a q = q ++ q), (insert a q = q ++ p), (insert a q = q ++ gv0)
(insert a q = q ++ pl), (insert a q = p ++ ql), (insert a q = p ++ q), (insert a q = p ++ p), (insert a q = p ++ gv0), (insert a q = p ++ pl), (insert a q = gv0 ++ ql), (insert a q = gv0 ++ q), (insert a q = gv0 ++ p), (insert a q = gv0 ++ gv0)
(insert a q = gv0 ++ pl), (insert a q = pl ++ ql), (insert a q = pl ++ q), (insert a q = pl ++ p), (insert a q = pl ++ gv0), (insert a q = pl ++ pl), (insert a p = ql), (insert a p = q), (insert a p = p), (insert a p = gv0)
(insert a p = pl), (insert a p = ql ++ ql), (insert a p = ql ++ q), (insert a p = ql ++ p), (insert a p = ql ++ gv0), (insert a p = ql ++ pl), (insert a p = q ++ ql), (insert a p = q ++ q), (insert a p = q ++ p), (insert a p = q ++ gv0)
(insert a p = q ++ pl), (insert a p = p ++ ql), (insert a p = p ++ q), (insert a p = p ++ p), (insert a p = p ++ gv0), (insert a p = p ++ pl), (insert a p = gv0 ++ ql), (insert a p = gv0 ++ q), (insert a p = gv0 ++ p), (insert a p = gv0 ++ gv0)
(insert a p = gv0 ++ pl), (insert a p = pl ++ ql), (insert a p = pl ++ q), (insert a p = pl ++ p), (insert a p = pl ++ gv0), (insert a p = pl ++ pl), (insert a gv0 = ql), (insert a gv0 = q), (insert a gv0 = p), (insert a gv0 = gv0)
(insert a gv0 = pl), (insert a gv0 = ql ++ ql), (insert a gv0 = ql ++ q), (insert a gv0 = ql ++ p), (insert a gv0 = ql ++ gv0), (insert a gv0 = ql ++ pl), (insert a gv0 = q ++ ql), (insert a gv0 = q ++ q), (insert a gv0 = q ++ p), (insert a gv0 = q ++ gv0)
(insert a gv0 = q ++ pl), (insert a gv0 = p ++ ql), (insert a gv0 = p ++ q), (insert a gv0 = p ++ p), (insert a gv0 = p ++ gv0), (insert a gv0 = p ++ pl), (insert a gv0 = gv0 ++ ql), (insert a gv0 = gv0 ++ q), (insert a gv0 = gv0 ++ p), (insert a gv0 = gv0 ++ gv0)
(insert a gv0 = gv0 ++ pl), (insert a gv0 = pl ++ ql), (insert a gv0 = pl ++ q), (insert a gv0 = pl ++ p), (insert a gv0 = pl ++ gv0), (insert a gv0 = pl ++ pl), (insert a pl = ql), (insert a pl = q), (insert a pl = p), (insert a pl = gv0)
(insert a pl = pl), (insert a pl = ql ++ ql), (insert a pl = ql ++ q), (insert a pl = ql ++ p), (insert a pl = ql ++ gv0), (insert a pl = ql ++ pl), (insert a pl = q ++ ql), (insert a pl = q ++ q), (insert a pl = q ++ p), (insert a pl = q ++ gv0)
(insert a pl = q ++ pl), (insert a pl = p ++ ql), (insert a pl = p ++ q), (insert a pl = p ++ p), (insert a pl = p ++ gv0), (insert a pl = p ++ pl), (insert a pl = gv0 ++ ql), (insert a pl = gv0 ++ q), (insert a pl = gv0 ++ p), (insert a pl = gv0 ++ gv0)
(insert a pl = gv0 ++ pl), (insert a pl = pl ++ ql), (insert a pl = pl ++ q), (insert a pl = pl ++ p), (insert a pl = pl ++ gv0), (insert a pl = pl ++ pl), (maybe_swap ql = ql), (maybe_swap ql = q), (maybe_swap ql = p), (maybe_swap ql = gv0)
(maybe_swap ql = pl), (maybe_swap ql = insert k ql), (maybe_swap ql = insert k q), (maybe_swap ql = insert k p), (maybe_swap ql = insert k gv0), (maybe_swap ql = insert k pl), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a q), (maybe_swap ql = insert a p), (maybe_swap ql = insert a gv0)
(maybe_swap ql = insert a pl), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ p), (maybe_swap ql = ql ++ gv0), (maybe_swap ql = ql ++ pl), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ p), (maybe_swap ql = q ++ gv0)
(maybe_swap ql = q ++ pl), (maybe_swap ql = p ++ ql), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ p), (maybe_swap ql = p ++ gv0), (maybe_swap ql = p ++ pl), (maybe_swap ql = gv0 ++ ql), (maybe_swap ql = gv0 ++ q), (maybe_swap ql = gv0 ++ p), (maybe_swap ql = gv0 ++ gv0)
(maybe_swap ql = gv0 ++ pl), (maybe_swap ql = pl ++ ql), (maybe_swap ql = pl ++ q), (maybe_swap ql = pl ++ p), (maybe_swap ql = pl ++ gv0), (maybe_swap ql = pl ++ pl), (maybe_swap q = ql), (maybe_swap q = q), (maybe_swap q = p), (maybe_swap q = gv0)
(maybe_swap q = pl), (maybe_swap q = insert k ql), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert k gv0), (maybe_swap q = insert k pl), (maybe_swap q = insert a ql), (maybe_swap q = insert a q), (maybe_swap q = insert a p), (maybe_swap q = insert a gv0)
(maybe_swap q = insert a pl), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ p), (maybe_swap q = ql ++ gv0), (maybe_swap q = ql ++ pl), (maybe_swap q = q ++ ql), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = q ++ gv0)
(maybe_swap q = q ++ pl), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap q = p ++ gv0), (maybe_swap q = p ++ pl), (maybe_swap q = gv0 ++ ql), (maybe_swap q = gv0 ++ q), (maybe_swap q = gv0 ++ p), (maybe_swap q = gv0 ++ gv0)
(maybe_swap q = gv0 ++ pl), (maybe_swap q = pl ++ ql), (maybe_swap q = pl ++ q), (maybe_swap q = pl ++ p), (maybe_swap q = pl ++ gv0), (maybe_swap q = pl ++ pl), (maybe_swap p = ql), (maybe_swap p = q), (maybe_swap p = p), (maybe_swap p = gv0)
(maybe_swap p = pl), (maybe_swap p = insert k ql), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert k gv0), (maybe_swap p = insert k pl), (maybe_swap p = insert a ql), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = insert a gv0)
(maybe_swap p = insert a pl), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ p), (maybe_swap p = ql ++ gv0), (maybe_swap p = ql ++ pl), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = q ++ gv0)
(maybe_swap p = q ++ pl), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ q), (maybe_swap p = p ++ p), (maybe_swap p = p ++ gv0), (maybe_swap p = p ++ pl), (maybe_swap p = gv0 ++ ql), (maybe_swap p = gv0 ++ q), (maybe_swap p = gv0 ++ p), (maybe_swap p = gv0 ++ gv0)
(maybe_swap p = gv0 ++ pl), (maybe_swap p = pl ++ ql), (maybe_swap p = pl ++ q), (maybe_swap p = pl ++ p), (maybe_swap p = pl ++ gv0), (maybe_swap p = pl ++ pl), (maybe_swap gv0 = ql), (maybe_swap gv0 = q), (maybe_swap gv0 = p), (maybe_swap gv0 = gv0)
(maybe_swap gv0 = pl), (maybe_swap gv0 = insert k ql), (maybe_swap gv0 = insert k q), (maybe_swap gv0 = insert k p), (maybe_swap gv0 = insert k gv0), (maybe_swap gv0 = insert k pl), (maybe_swap gv0 = insert a ql), (maybe_swap gv0 = insert a q), (maybe_swap gv0 = insert a p), (maybe_swap gv0 = insert a gv0)
(maybe_swap gv0 = insert a pl), (maybe_swap gv0 = ql ++ ql), (maybe_swap gv0 = ql ++ q), (maybe_swap gv0 = ql ++ p), (maybe_swap gv0 = ql ++ gv0), (maybe_swap gv0 = ql ++ pl), (maybe_swap gv0 = q ++ ql), (maybe_swap gv0 = q ++ q), (maybe_swap gv0 = q ++ p), (maybe_swap gv0 = q ++ gv0)
(maybe_swap gv0 = q ++ pl), (maybe_swap gv0 = p ++ ql), (maybe_swap gv0 = p ++ q), (maybe_swap gv0 = p ++ p), (maybe_swap gv0 = p ++ gv0), (maybe_swap gv0 = p ++ pl), (maybe_swap gv0 = gv0 ++ ql), (maybe_swap gv0 = gv0 ++ q), (maybe_swap gv0 = gv0 ++ p), (maybe_swap gv0 = gv0 ++ gv0)
(maybe_swap gv0 = gv0 ++ pl), (maybe_swap gv0 = pl ++ ql), (maybe_swap gv0 = pl ++ q), (maybe_swap gv0 = pl ++ p), (maybe_swap gv0 = pl ++ gv0), (maybe_swap gv0 = pl ++ pl), (maybe_swap pl = ql), (maybe_swap pl = q), (maybe_swap pl = p), (maybe_swap pl = gv0)
(maybe_swap pl = pl), (maybe_swap pl = insert k ql), (maybe_swap pl = insert k q), (maybe_swap pl = insert k p), (maybe_swap pl = insert k gv0), (maybe_swap pl = insert k pl), (maybe_swap pl = insert a ql), (maybe_swap pl = insert a q), (maybe_swap pl = insert a p), (maybe_swap pl = insert a gv0)
(maybe_swap pl = insert a pl), (maybe_swap pl = ql ++ ql), (maybe_swap pl = ql ++ q), (maybe_swap pl = ql ++ p), (maybe_swap pl = ql ++ gv0), (maybe_swap pl = ql ++ pl), (maybe_swap pl = q ++ ql), (maybe_swap pl = q ++ q), (maybe_swap pl = q ++ p), (maybe_swap pl = q ++ gv0)
(maybe_swap pl = q ++ pl), (maybe_swap pl = p ++ ql), (maybe_swap pl = p ++ q), (maybe_swap pl = p ++ p), (maybe_swap pl = p ++ gv0), (maybe_swap pl = p ++ pl), (maybe_swap pl = gv0 ++ ql), (maybe_swap pl = gv0 ++ q), (maybe_swap pl = gv0 ++ p), (maybe_swap pl = gv0 ++ gv0)
(maybe_swap pl = gv0 ++ pl), (maybe_swap pl = pl ++ ql), (maybe_swap pl = pl ++ q), (maybe_swap pl = pl ++ p), (maybe_swap pl = pl ++ gv0), (maybe_swap pl = pl ++ pl), (ql ++ ql = ql), (ql ++ ql = q), (ql ++ ql = p), (ql ++ ql = gv0)
(ql ++ ql = pl), (ql ++ q = ql), (ql ++ q = q), (ql ++ q = p), (ql ++ q = gv0), (ql ++ q = pl), (ql ++ p = ql), (ql ++ p = q), (ql ++ p = p), (ql ++ p = gv0)
(ql ++ p = pl), (ql ++ gv0 = ql), (ql ++ gv0 = q), (ql ++ gv0 = p), (ql ++ gv0 = gv0), (ql ++ gv0 = pl), (ql ++ pl = ql), (ql ++ pl = q), (ql ++ pl = p), (ql ++ pl = gv0)
(ql ++ pl = pl), (q ++ ql = ql), (q ++ ql = q), (q ++ ql = p), (q ++ ql = gv0), (q ++ ql = pl), (q ++ q = ql), (q ++ q = q), (q ++ q = p), (q ++ q = gv0)
(q ++ q = pl), (q ++ p = ql), (q ++ p = q), (q ++ p = p), (q ++ p = gv0), (q ++ p = pl), (q ++ gv0 = ql), (q ++ gv0 = q), (q ++ gv0 = p), (q ++ gv0 = gv0)
(q ++ gv0 = pl), (q ++ pl = ql), (q ++ pl = q), (q ++ pl = p), (q ++ pl = gv0), (q ++ pl = pl), (p ++ ql = ql), (p ++ ql = q), (p ++ ql = p), (p ++ ql = gv0)
(p ++ ql = pl), (p ++ q = ql), (p ++ q = q), (p ++ q = p), (p ++ q = gv0), (p ++ q = pl), (p ++ p = ql), (p ++ p = q), (p ++ p = p), (p ++ p = gv0)
(p ++ p = pl), (p ++ gv0 = ql), (p ++ gv0 = q), (p ++ gv0 = p), (p ++ gv0 = gv0), (p ++ gv0 = pl), (p ++ pl = ql), (p ++ pl = q), (p ++ pl = p), (p ++ pl = gv0)
(p ++ pl = pl), (gv0 ++ ql = ql), (gv0 ++ ql = q), (gv0 ++ ql = p), (gv0 ++ ql = gv0), (gv0 ++ ql = pl), (gv0 ++ q = ql), (gv0 ++ q = q), (gv0 ++ q = p), (gv0 ++ q = gv0)
(gv0 ++ q = pl), (gv0 ++ p = ql), (gv0 ++ p = q), (gv0 ++ p = p), (gv0 ++ p = gv0), (gv0 ++ p = pl), (gv0 ++ gv0 = ql), (gv0 ++ gv0 = q), (gv0 ++ gv0 = p), (gv0 ++ gv0 = gv0)
(gv0 ++ gv0 = pl), (gv0 ++ pl = ql), (gv0 ++ pl = q), (gv0 ++ pl = p), (gv0 ++ pl = gv0), (gv0 ++ pl = pl), (pl ++ ql = ql), (pl ++ ql = q), (pl ++ ql = p), (pl ++ ql = gv0)
(pl ++ ql = pl), (pl ++ q = ql), (pl ++ q = q), (pl ++ q = p), (pl ++ q = gv0), (pl ++ q = pl), (pl ++ p = ql), (pl ++ p = q), (pl ++ p = p), (pl ++ p = gv0)
(pl ++ p = pl), (pl ++ gv0 = ql), (pl ++ gv0 = q), (pl ++ gv0 = p), (pl ++ gv0 = gv0), (pl ++ gv0 = pl), (pl ++ pl = ql), (pl ++ pl = q), (pl ++ pl = p), (pl ++ pl = gv0)
(pl ++ pl = pl), ([] = ql), ([] = q), ([] = p), ([] = gv0), ([] = pl), ([] = merge ql ql), ([] = merge ql q), ([] = merge ql p), ([] = merge ql gv0)
([] = merge ql pl), ([] = merge q ql), ([] = merge q q), ([] = merge q p), ([] = merge q gv0), ([] = merge q pl), ([] = merge p ql), ([] = merge p q), ([] = merge p p), ([] = merge p gv0)
([] = merge p pl), ([] = merge gv0 ql), ([] = merge gv0 q), ([] = merge gv0 p), ([] = merge gv0 gv0), ([] = merge gv0 pl), ([] = merge pl ql), ([] = merge pl q), ([] = merge pl p), ([] = merge pl gv0)
([] = merge pl pl), ([] = insert k ql), ([] = insert k q), ([] = insert k p), ([] = insert k gv0), ([] = insert k pl), ([] = insert a ql), ([] = insert a q), ([] = insert a p), ([] = insert a gv0)
([] = insert a pl), ([] = maybe_swap ql), ([] = maybe_swap q), ([] = maybe_swap p), ([] = maybe_swap gv0), ([] = maybe_swap pl), ([] = ql ++ ql), ([] = ql ++ q), ([] = ql ++ p), ([] = ql ++ gv0)
([] = ql ++ pl), ([] = q ++ ql), ([] = q ++ q), ([] = q ++ p), ([] = q ++ gv0), ([] = q ++ pl), ([] = p ++ ql), ([] = p ++ q), ([] = p ++ p), ([] = p ++ gv0)
([] = p ++ pl), ([] = gv0 ++ ql), ([] = gv0 ++ q), ([] = gv0 ++ p), ([] = gv0 ++ gv0), ([] = gv0 ++ pl), ([] = pl ++ ql), ([] = pl ++ q), ([] = pl ++ p), ([] = pl ++ gv0)
([] = pl ++ pl), (None = Some k), (None = Some a), ((k, ql) = select k ql), ((k, ql) = select k q), ((k, ql) = select k p), ((k, ql) = select k gv0), ((k, ql) = select k pl), ((k, ql) = select a ql), ((k, ql) = select a q)
((k, ql) = select a p), ((k, ql) = select a gv0), ((k, ql) = select a pl), ((k, q) = select k ql), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select k gv0), ((k, q) = select k pl), ((k, q) = select a ql), ((k, q) = select a q)
((k, q) = select a p), ((k, q) = select a gv0), ((k, q) = select a pl), ((k, p) = select k ql), ((k, p) = select k q), ((k, p) = select k p), ((k, p) = select k gv0), ((k, p) = select k pl), ((k, p) = select a ql), ((k, p) = select a q)
((k, p) = select a p), ((k, p) = select a gv0), ((k, p) = select a pl), ((k, gv0) = select k ql), ((k, gv0) = select k q), ((k, gv0) = select k p), ((k, gv0) = select k gv0), ((k, gv0) = select k pl), ((k, gv0) = select a ql), ((k, gv0) = select a q)
((k, gv0) = select a p), ((k, gv0) = select a gv0), ((k, gv0) = select a pl), ((k, pl) = select k ql), ((k, pl) = select k q), ((k, pl) = select k p), ((k, pl) = select k gv0), ((k, pl) = select k pl), ((k, pl) = select a ql), ((k, pl) = select a q)
((k, pl) = select a p), ((k, pl) = select a gv0), ((k, pl) = select a pl), ((a, ql) = select k ql), ((a, ql) = select k q), ((a, ql) = select k p), ((a, ql) = select k gv0), ((a, ql) = select k pl), ((a, ql) = select a ql), ((a, ql) = select a q)
((a, ql) = select a p), ((a, ql) = select a gv0), ((a, ql) = select a pl), ((a, q) = select k ql), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select k gv0), ((a, q) = select k pl), ((a, q) = select a ql), ((a, q) = select a q)
((a, q) = select a p), ((a, q) = select a gv0), ((a, q) = select a pl), ((a, p) = select k ql), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select k gv0), ((a, p) = select k pl), ((a, p) = select a ql), ((a, p) = select a q)
((a, p) = select a p), ((a, p) = select a gv0), ((a, p) = select a pl), ((a, gv0) = select k ql), ((a, gv0) = select k q), ((a, gv0) = select k p), ((a, gv0) = select k gv0), ((a, gv0) = select k pl), ((a, gv0) = select a ql), ((a, gv0) = select a q)
((a, gv0) = select a p), ((a, gv0) = select a gv0), ((a, gv0) = select a pl), ((a, pl) = select k ql), ((a, pl) = select k q), ((a, pl) = select k p), ((a, pl) = select k gv0), ((a, pl) = select k pl), ((a, pl) = select a ql), ((a, pl) = select a q)
((a, pl) = select a p), ((a, pl) = select a gv0), ((a, pl) = select a pl), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (a >=? a)), ((k >? a) = (k >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (a >=? k))
((k >? a) = (a >=? a)), ((a >? k) = (k >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (a >=? a)), (length ql = k)
(length ql = a), (length q = k), (length q = a), (length p = k), (length p = a), (length gv0 = k), (length gv0 = a), (length pl = k), (length pl = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 239.656 seconds


Label: 0 (0)
(Abs q ql), (Abs ql q), (Permutation q ql), (Permutation ql q), (Abs q (maybe_swap ql)), (Abs ql (maybe_swap q)), (Abs (maybe_swap q) ql), (Abs (maybe_swap ql) q), (Permutation q (maybe_swap ql)), (Permutation ql (maybe_swap q))
(Permutation (maybe_swap q) ql), (Permutation (maybe_swap ql) q), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap ql) (maybe_swap q)), (length ql <= length q), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge ql q)), (Abs (merge q p) (merge p ql))

Label: 1 (1)
(Abs pl (insert a p)), (Abs (insert a p) pl), (Abs pl (a :: p)), (Abs (a :: p) pl), (Permutation pl (insert a p)), (Permutation (insert a p) pl), (Abs (insert a p) (maybe_swap pl)), (Abs (maybe_swap pl) (insert a p)), (Permutation pl (a :: p)), (Permutation (a :: p) pl)
(Abs (a :: p) (maybe_swap pl)), (Abs (maybe_swap pl) (a :: p)), (Permutation (insert a p) (maybe_swap pl)), (Permutation (maybe_swap pl) (insert a p)), (Permutation (a :: p) (maybe_swap pl)), (Permutation (maybe_swap pl) (a :: p))

Label: 2 (2)
(Abs (insert a p) (insert k q)), (Abs (insert k q) (insert a p)), (Abs (a :: p) (insert k q)), (Abs (k :: q) (insert a p)), (Abs (insert a p) (k :: q)), (Abs (insert k q) (a :: p)), (Permutation (insert a p) (insert k q)), (Permutation (insert k q) (insert a p)), (Abs (a :: p) (k :: q)), (Abs (k :: q) (a :: p))
(Permutation (a :: p) (insert k q)), (Permutation (k :: q) (insert a p)), (Permutation (insert a p) (k :: q)), (Permutation (insert k q) (a :: p)), (Permutation (a :: p) (k :: q)), (Permutation (k :: q) (a :: p)), ((k, q) = select a p)

Label: 3 (3)
(Abs gv0 pl), (Abs pl gv0), (In k gv0), (In a gv0), (Permutation gv0 pl), (Permutation pl gv0), (Abs gv0 (maybe_swap pl)), (Abs pl (maybe_swap gv0)), (Abs (maybe_swap gv0) pl), (Abs (maybe_swap pl) gv0)
(gv0 = pl), (pl = gv0), (Abs gv0 (merge q pl)), (Abs gv0 (merge p pl)), (Abs gv0 (merge pl q)), (Abs gv0 (merge pl p)), (Abs gv0 (insert k q)), (Abs gv0 (insert k p)), (Abs gv0 (insert a q)), (Abs gv0 (insert a p))


------------------------------ ALL RESULTS ------------------------------
1. (Abs q ql ->  Abs (a :: p) pl -> select a p = (k, q) -> Permutation pl (k :: ql))

2. (select a p = (k, q) -> Abs (insert k q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert k q) (insert a p) -> Permutation pl (k :: ql))

3. (select a p = (k, q) -> Abs (insert a p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert a p) (insert k q) -> Permutation pl (k :: ql))

4. (select a p = (k, q) -> Abs (k :: q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (k :: q) (insert a p) -> Permutation pl (k :: ql))

5. (select a p = (k, q) -> Abs (a :: p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (a :: p) (insert k q) -> Permutation pl (k :: ql))

6. (select a p = (k, q) -> Abs (insert k q) (a :: p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert k q) (a :: p) -> Permutation pl (k :: ql))

7. (select a p = (k, q) -> Abs (insert a p) (k :: q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert a p) (k :: q) -> Permutation pl (k :: ql))

8. (select a p = (k, q) -> Permutation (insert k q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql ->  Permutation (insert k q) (insert a p) -> Permutation pl (k :: ql))

9. (select a p = (k, q) -> Permutation (insert a p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql ->  Permutation (insert a p) (insert k q) -> Permutation pl (k :: ql))

10. (select a p = (k, q) -> Abs (k :: q) (a :: p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (k :: q) (a :: p) -> Permutation pl (k :: ql))

11. (select a p = (k, q) -> Abs (a :: p) (k :: q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (a :: p) (k :: q) -> Permutation pl (k :: ql))

12. (select a p = (k, q) -> Permutation (k :: q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (k :: q) (insert a p) -> Permutation pl (k :: ql))

13. (select a p = (k, q) -> Permutation (a :: p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (a :: p) (insert k q) -> Permutation pl (k :: ql))

14. (select a p = (k, q) -> Permutation (insert k q) (a :: p))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (insert k q) (a :: p) -> Permutation pl (k :: ql))

15. (select a p = (k, q) -> Permutation (insert a p) (k :: q))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (insert a p) (k :: q) -> Permutation pl (k :: ql))

16. (select a p = (k, q) -> Permutation (k :: q) (a :: p))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (k :: q) (a :: p) -> Permutation pl (k :: ql))

17. (select a p = (k, q) -> Permutation (a :: p) (k :: q))
(Abs (a :: p) pl ->  Abs q ql -> Permutation (a :: p) (k :: q) -> Permutation pl (k :: ql))

18. (Abs (a :: p) pl -> Abs (maybe_swap pl) (insert a p))
(Abs q ql ->  Abs (maybe_swap pl) (insert a p) ->  select a p = (k, q) -> Permutation pl (k :: ql))

19. (Abs (a :: p) pl -> Abs (insert a p) (maybe_swap pl))
(Abs q ql ->  Abs (insert a p) (maybe_swap pl) ->  select a p = (k, q) -> Permutation pl (k :: ql))

20. (Abs (a :: p) pl -> Abs (a :: p) (maybe_swap pl))
(Abs q ql ->  Abs (a :: p) (maybe_swap pl) ->  select a p = (k, q) -> Permutation pl (k :: ql))

21. (Abs (a :: p) pl -> Abs (maybe_swap pl) (a :: p))
(Abs q ql ->  Abs (maybe_swap pl) (a :: p) ->  select a p = (k, q) -> Permutation pl (k :: ql))

22. (Abs (a :: p) pl -> Permutation (maybe_swap pl) (insert a p))
(Abs q ql ->  Permutation (maybe_swap pl) (insert a p) ->  select a p = (k, q) -> Permutation pl (k :: ql))

23. (Abs (a :: p) pl -> Permutation (insert a p) (maybe_swap pl))
(Abs q ql ->  Permutation (insert a p) (maybe_swap pl) ->  select a p = (k, q) -> Permutation pl (k :: ql))

24. (Abs q ql -> Abs (maybe_swap ql) q)
(Abs (a :: p) pl ->  Abs (maybe_swap ql) q -> select a p = (k, q) -> Permutation pl (k :: ql))

25. (Abs q ql -> Abs (maybe_swap q) ql)
(Abs (a :: p) pl ->  Abs (maybe_swap q) ql -> select a p = (k, q) -> Permutation pl (k :: ql))

26. (Abs q ql -> Abs ql (maybe_swap q))
(Abs (a :: p) pl ->  Abs ql (maybe_swap q) -> select a p = (k, q) -> Permutation pl (k :: ql))

27. (Abs q ql -> Abs q (maybe_swap ql))
(Abs (a :: p) pl ->  Abs q (maybe_swap ql) -> select a p = (k, q) -> Permutation pl (k :: ql))

28. (Abs (a :: p) pl -> Permutation (a :: p) (maybe_swap pl))
(Abs q ql ->  Permutation (a :: p) (maybe_swap pl) ->  select a p = (k, q) -> Permutation pl (k :: ql))

29. (Abs (a :: p) pl -> Permutation (maybe_swap pl) (a :: p))
(Abs q ql ->  Permutation (maybe_swap pl) (a :: p) ->  select a p = (k, q) -> Permutation pl (k :: ql))

30. (Abs q ql -> Abs (maybe_swap ql) (maybe_swap q))
(Abs (a :: p) pl ->  Abs (maybe_swap ql) (maybe_swap q) ->  select a p = (k, q) -> Permutation pl (k :: ql))

31. (Abs q ql -> Abs (maybe_swap q) (maybe_swap ql))
(Abs (a :: p) pl ->  Abs (maybe_swap q) (maybe_swap ql) ->  select a p = (k, q) -> Permutation pl (k :: ql))

32. (Abs q ql -> Permutation (maybe_swap ql) q)
(Abs (a :: p) pl ->  Permutation (maybe_swap ql) q ->  select a p = (k, q) -> Permutation pl (k :: ql))

33. (Abs q ql -> Permutation (maybe_swap q) ql)
(Abs (a :: p) pl ->  Permutation (maybe_swap q) ql ->  select a p = (k, q) -> Permutation pl (k :: ql))

34. (Abs q ql -> Permutation ql (maybe_swap q))
(Abs (a :: p) pl ->  Permutation ql (maybe_swap q) ->  select a p = (k, q) -> Permutation pl (k :: ql))

35. (Abs q ql -> Permutation q (maybe_swap ql))
(Abs (a :: p) pl ->  Permutation q (maybe_swap ql) ->  select a p = (k, q) -> Permutation pl (k :: ql))

36. (Abs q ql -> Permutation (maybe_swap ql) (maybe_swap q))
(Abs (a :: p) pl ->  Permutation (maybe_swap ql) (maybe_swap q) ->  select a p = (k, q) -> Permutation pl (k :: ql))

37. (Abs q ql -> Permutation (maybe_swap q) (maybe_swap ql))
(Abs (a :: p) pl ->  Permutation (maybe_swap q) (maybe_swap ql) ->  select a p = (k, q) -> Permutation pl (k :: ql))

38. (Abs q ql -> Abs (merge q q) (merge ql q))
(Abs (a :: p) pl ->  Abs (merge q q) (merge ql q) ->  select a p = (k, q) -> Permutation pl (k :: ql))

39. (Abs q ql -> Abs (merge q p) (merge p ql))
(Abs (a :: p) pl ->  Abs (merge q p) (merge p ql) ->  select a p = (k, q) -> Permutation pl (k :: ql))

40. (Abs q ql -> Abs (merge q q) (merge q ql))
(Abs (a :: p) pl ->  Abs (merge q q) (merge q ql) ->  select a p = (k, q) -> Permutation pl (k :: ql))

41. (Abs q ql -> length ql <= length q)
(Abs (a :: p) pl ->  select a p = (k, q) -> length ql <= length q -> Permutation pl (k :: ql))

42. (Abs (a :: p) pl ->  Abs q ql -> In k gv0 -> select a p = (k, q) -> Permutation pl gv0)

43. (Abs (a :: p) pl ->  Abs q ql -> In a gv0 -> select a p = (k, q) -> Permutation pl gv0)

44. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (maybe_swap pl) -> select a p = (k, q) -> Permutation pl gv0)

45. (Abs (a :: p) pl ->  Abs q ql ->  Abs pl (maybe_swap gv0) -> select a p = (k, q) -> Permutation pl gv0)

46. (Abs (maybe_swap gv0) pl ->  Abs (a :: p) pl -> Abs q ql -> select a p = (k, q) -> Permutation pl gv0)

47. (Abs (maybe_swap pl) gv0 ->  Abs (a :: p) pl -> Abs q ql -> select a p = (k, q) -> Permutation pl gv0)

48. (Abs (a :: p) pl ->  Abs q ql -> gv0 = pl -> select a p = (k, q) -> Permutation pl gv0)

49. (Abs (a :: p) pl ->  Abs q ql -> pl = gv0 -> select a p = (k, q) -> Permutation pl gv0)

50. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (merge q pl) -> select a p = (k, q) -> Permutation pl gv0)

51. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (merge p pl) -> select a p = (k, q) -> Permutation pl gv0)

52. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (merge pl q) -> select a p = (k, q) -> Permutation pl gv0)

53. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (merge pl p) -> select a p = (k, q) -> Permutation pl gv0)

54. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (insert k q) -> select a p = (k, q) -> Permutation pl gv0)

55. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (insert k p) -> select a p = (k, q) -> Permutation pl gv0)

56. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (insert a q) -> select a p = (k, q) -> Permutation pl gv0)

57. (Abs (a :: p) pl ->  Abs q ql ->  Abs gv0 (insert a p) -> select a p = (k, q) -> Permutation pl gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 322.776 seconds

Number of Result Pairs Returned: 57

1. (Abs q ql ->  Abs (a :: p) pl -> select a p = (k, q) -> Permutation pl (k :: ql))

2. (select a p = (k, q) -> Abs (insert k q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert k q) (insert a p) -> Permutation pl (k :: ql))

3. (select a p = (k, q) -> Abs (insert a p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (insert a p) (insert k q) -> Permutation pl (k :: ql))

4. (select a p = (k, q) -> Abs (k :: q) (insert a p))
(Abs (a :: p) pl ->  Abs q ql -> Abs (k :: q) (insert a p) -> Permutation pl (k :: ql))

5. (select a p = (k, q) -> Abs (a :: p) (insert k q))
(Abs (a :: p) pl ->  Abs q ql -> Abs (a :: p) (insert k q) -> Permutation pl (k :: ql))
