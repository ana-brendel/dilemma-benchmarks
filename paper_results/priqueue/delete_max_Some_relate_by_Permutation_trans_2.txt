Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (q : list nat) (k : nat) (pl ql : list nat),
 priq p ->
 Abs p pl ->
 delete_max p = Some (k, q) ->
 Abs q ql -> Permutation pl (k :: ql) /\ Forall (ge k) ql)
 -- (Abs q ql)
 -- (priq (a :: p))
 -- (Abs (a :: p) pl)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) (k :: ql))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.545 seconds

gv1 : (list nat) = (k :: ql)
gv0 : (list nat) = (a :: p)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 50.995 seconds

Label: Generalization #0
Assumptions: 
 -- (Abs q ql)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) (k :: ql))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (Abs q ql)
 -- (a :: p = gv0)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation gv0 (k :: ql))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (Abs q ql)
 -- (k :: ql = gv1)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) gv1)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 51.143 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
select : (nat -> list nat -> nat * list nat)
insert : (nat -> list nat -> list nat)
delete_max : (list nat -> option (nat * list nat))
merge : (list nat -> list nat -> list nat)
priq : (list nat -> Prop)
Abs : (list nat -> list nat -> Prop)

Label: 0 (0)
Abducted Assumption: (Abs q ql)
Positive Examples: 381
Negative Examples: 82

Label: 1 (1)
Abducted Assumption: (select a p = (k, q))
Positive Examples: 92
Negative Examples: 368

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 13
Negative Examples: 37

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 16
Negative Examples: 32


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 54.466 seconds


Label: 0 (0)
(Abs q q), (Abs q ql), (Abs q p), (Abs ql q), (Abs ql ql), (Abs ql p), (Abs p q), (Abs p ql), (Abs p p), (priq q)
(priq ql), (priq p), (Permutation q q), (Permutation q ql), (Permutation q p), (Permutation ql q), (Permutation ql ql), (Permutation ql p), (Permutation p q), (Permutation p ql)
(Permutation p p), (In k q), (In k ql), (In k p), (In a q), (In a ql), (In a p), (k < k), (k < a), (a < k)
(a < a), (k <= k), (k <= a), (a <= k), (a <= a), (q = q), (q = ql), (q = p), (ql = q), (ql = ql)
(ql = p), (p = q), (p = ql), (p = p), (k = k), (k = a), (a = k), (a = a), (false = (k >? k)), (false = (k >? a))
(false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a)), (true = (k >? k)), (true = (k >? a)), (true = (a >? k)), (true = (a >? a))
(true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs q (k :: q)), (Abs q (k :: ql)), (Abs q (k :: p)), (Abs q (a :: q)), (Abs q (a :: ql)), (Abs q (a :: p))
(Abs q (merge q q)), (Abs q (merge q ql)), (Abs q (merge q p)), (Abs q (merge ql q)), (Abs q (merge ql ql)), (Abs q (merge ql p)), (Abs q (merge p q)), (Abs q (merge p ql)), (Abs q (merge p p)), (Abs q (insert k q))
(Abs q (insert k ql)), (Abs q (insert k p)), (Abs q (insert a q)), (Abs q (insert a ql)), (Abs q (insert a p)), (Abs q (maybe_swap q)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap p)), (Abs q (q ++ q)), (Abs q (q ++ ql))
(Abs q (q ++ p)), (Abs q (ql ++ q)), (Abs q (ql ++ ql)), (Abs q (ql ++ p)), (Abs q (p ++ q)), (Abs q (p ++ ql)), (Abs q (p ++ p)), (Abs q []), (Abs ql (k :: q)), (Abs ql (k :: ql))
(Abs ql (k :: p)), (Abs ql (a :: q)), (Abs ql (a :: ql)), (Abs ql (a :: p)), (Abs ql (merge q q)), (Abs ql (merge q ql)), (Abs ql (merge q p)), (Abs ql (merge ql q)), (Abs ql (merge ql ql)), (Abs ql (merge ql p))
(Abs ql (merge p q)), (Abs ql (merge p ql)), (Abs ql (merge p p)), (Abs ql (insert k q)), (Abs ql (insert k ql)), (Abs ql (insert k p)), (Abs ql (insert a q)), (Abs ql (insert a ql)), (Abs ql (insert a p)), (Abs ql (maybe_swap q))
(Abs ql (maybe_swap ql)), (Abs ql (maybe_swap p)), (Abs ql (q ++ q)), (Abs ql (q ++ ql)), (Abs ql (q ++ p)), (Abs ql (ql ++ q)), (Abs ql (ql ++ ql)), (Abs ql (ql ++ p)), (Abs ql (p ++ q)), (Abs ql (p ++ ql))
(Abs ql (p ++ p)), (Abs ql []), (Abs p (k :: q)), (Abs p (k :: ql)), (Abs p (k :: p)), (Abs p (a :: q)), (Abs p (a :: ql)), (Abs p (a :: p)), (Abs p (merge q q)), (Abs p (merge q ql))
(Abs p (merge q p)), (Abs p (merge ql q)), (Abs p (merge ql ql)), (Abs p (merge ql p)), (Abs p (merge p q)), (Abs p (merge p ql)), (Abs p (merge p p)), (Abs p (insert k q)), (Abs p (insert k ql)), (Abs p (insert k p))
(Abs p (insert a q)), (Abs p (insert a ql)), (Abs p (insert a p)), (Abs p (maybe_swap q)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap p)), (Abs p (q ++ q)), (Abs p (q ++ ql)), (Abs p (q ++ p)), (Abs p (ql ++ q))
(Abs p (ql ++ ql)), (Abs p (ql ++ p)), (Abs p (p ++ q)), (Abs p (p ++ ql)), (Abs p (p ++ p)), (Abs p []), (Abs (k :: q) q), (Abs (k :: q) ql), (Abs (k :: q) p), (Abs (k :: q) (k :: ql))
(Abs (k :: q) (k :: p)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: p)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql p))
(Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ p)), (Abs (k :: q) []), (Abs (k :: ql) q), (Abs (k :: ql) ql), (Abs (k :: ql) p), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: p))
(Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q ql)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (insert k q))
(Abs (k :: ql) (insert k ql)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ ql))
(Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (p ++ q)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ p)), (Abs (k :: ql) []), (Abs (k :: p) q), (Abs (k :: p) ql)
(Abs (k :: p) p), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a p)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ p)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ ql)), (Abs (k :: p) (ql ++ p))
(Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) []), (Abs (a :: q) q), (Abs (a :: q) ql), (Abs (a :: q) p), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: ql)), (Abs (a :: q) (k :: p))
(Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: p)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge ql q)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p ql))
(Abs (a :: q) (merge p p)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a ql)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap p))
(Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ p)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ ql)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) [])
(Abs (a :: ql) q), (Abs (a :: ql) ql), (Abs (a :: ql) p), (Abs (a :: ql) (k :: q)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: p)), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q ql))
(Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p ql)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k p))
(Abs (a :: ql) (insert a q)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a p)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap ql)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) []), (Abs (a :: p) q), (Abs (a :: p) ql), (Abs (a :: p) p), (Abs (a :: p) (k :: q))
(Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q ql)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql p))
(Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k ql)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (maybe_swap q))
(Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ ql))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) []), (Abs (merge q q) q), (Abs (merge q q) ql), (Abs (merge q q) p), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: ql))
(Abs (merge q q) (a :: p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q p)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql ql)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ p)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) []), (Abs (merge q ql) q), (Abs (merge q ql) ql)
(Abs (merge q ql) p), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: p)), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a p)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (q ++ q)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ ql)), (Abs (merge q ql) (ql ++ p))
(Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) []), (Abs (merge q p) q), (Abs (merge q p) ql), (Abs (merge q p) p), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: p))
(Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: p)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p ql))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap p))
(Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ ql)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) [])
(Abs (merge ql q) q), (Abs (merge ql q) ql), (Abs (merge ql q) p), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (merge q q))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k ql)), (Abs (merge ql q) (insert k p))
(Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (ql ++ q))
(Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (p ++ q)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ p)), (Abs (merge ql q) []), (Abs (merge ql ql) q), (Abs (merge ql ql) ql), (Abs (merge ql ql) p), (Abs (merge ql ql) (k :: q))
(Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (insert k q)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (maybe_swap q))
(Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ ql)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ ql))
(Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) []), (Abs (merge ql p) q), (Abs (merge ql p) ql), (Abs (merge ql p) p), (Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: ql))
(Abs (merge ql p) (a :: p)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p p)), (Abs (merge ql p) (insert k q))
(Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert a q)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a p)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap ql)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ ql))
(Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (ql ++ q)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) []), (Abs (merge p q) q), (Abs (merge p q) ql)
(Abs (merge p q) p), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q p))
(Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge p ql)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a ql))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap ql)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (ql ++ q)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ p))
(Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) []), (Abs (merge p ql) q), (Abs (merge p ql) ql), (Abs (merge p ql) p), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: p))
(Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: p)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge p q))
(Abs (merge p ql) (merge p p)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (maybe_swap q)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap p))
(Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ ql)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) [])
(Abs (merge p p) q), (Abs (merge p p) ql), (Abs (merge p p) p), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (merge q q))
(Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql ql)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k p))
(Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ ql)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (ql ++ q))
(Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) []), (Abs (insert k q) q), (Abs (insert k q) ql), (Abs (insert k q) p), (Abs (insert k q) (k :: q))
(Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql ql))
(Abs (insert k q) (merge ql p)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k p)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (maybe_swap q))
(Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ ql)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ ql))
(Abs (insert k q) (p ++ p)), (Abs (insert k q) []), (Abs (insert k ql) q), (Abs (insert k ql) ql), (Abs (insert k ql) p), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: p)), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: ql))
(Abs (insert k ql) (a :: p)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p p))
(Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a p)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (q ++ q)), (Abs (insert k ql) (q ++ ql))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ ql)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) []), (Abs (insert k p) q), (Abs (insert k p) ql)
(Abs (insert k p) p), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: p)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q p))
(Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a ql))
(Abs (insert k p) (insert a p)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ p))
(Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ ql)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) []), (Abs (insert a q) q), (Abs (insert a q) ql), (Abs (insert a q) p), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: p))
(Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: p)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge p q))
(Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap p))
(Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ ql)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) [])
(Abs (insert a ql) q), (Abs (insert a ql) ql), (Abs (insert a ql) p), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (merge q q))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q p)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (ql ++ q))
(Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (p ++ q)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ p)), (Abs (insert a ql) []), (Abs (insert a p) q), (Abs (insert a p) ql), (Abs (insert a p) p), (Abs (insert a p) (k :: q))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql ql))
(Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql)), (Abs (insert a p) (maybe_swap q))
(Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ p)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ ql)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ ql))
(Abs (insert a p) (p ++ p)), (Abs (insert a p) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) p), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: ql))
(Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ ql))
(Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (ql ++ q)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) ql)
(Abs (maybe_swap ql) p), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: p)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q p))
(Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert a q))
(Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ p))
(Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ ql)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) ql), (Abs (maybe_swap p) p), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: p))
(Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql p)), (Abs (maybe_swap p) (merge p q))
(Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql))
(Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ ql)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) [])
(Abs (q ++ q) q), (Abs (q ++ q) ql), (Abs (q ++ q) p), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (merge q q))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k ql))
(Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (ql ++ q))
(Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) []), (Abs (q ++ ql) q), (Abs (q ++ ql) ql), (Abs (q ++ ql) p), (Abs (q ++ ql) (k :: q))
(Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql ql))
(Abs (q ++ ql) (merge ql p)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a p))
(Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ ql))
(Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) []), (Abs (q ++ p) q), (Abs (q ++ p) ql), (Abs (q ++ p) p), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: ql))
(Abs (q ++ p) (a :: p)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (q ++ q))
(Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (ql ++ q)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) []), (Abs (ql ++ q) q), (Abs (ql ++ q) ql)
(Abs (ql ++ q) p), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: p)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q p))
(Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert a q))
(Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ p))
(Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ p)), (Abs (ql ++ q) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) p), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: p))
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q p)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge p q))
(Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k p)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap ql))
(Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) ql), (Abs (ql ++ p) p), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: p)), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (merge q q))
(Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k ql))
(Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a p)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ p))
(Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) []), (Abs (p ++ q) q), (Abs (p ++ q) ql), (Abs (p ++ q) p), (Abs (p ++ q) (k :: q))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql ql))
(Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ ql)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (p ++ ql))
(Abs (p ++ q) (p ++ p)), (Abs (p ++ q) []), (Abs (p ++ ql) q), (Abs (p ++ ql) ql), (Abs (p ++ ql) p), (Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: ql))
(Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap p)), (Abs (p ++ ql) (q ++ q))
(Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (ql ++ q)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) []), (Abs (p ++ p) q), (Abs (p ++ p) ql)
(Abs (p ++ p) p), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert a q))
(Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ ql))
(Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) []), (Abs [] q), (Abs [] ql), (Abs [] p), (Abs [] (k :: q)), (Abs [] (k :: ql)), (Abs [] (k :: p))
(Abs [] (a :: q)), (Abs [] (a :: ql)), (Abs [] (a :: p)), (Abs [] (merge q q)), (Abs [] (merge q ql)), (Abs [] (merge q p)), (Abs [] (merge ql q)), (Abs [] (merge ql ql)), (Abs [] (merge ql p)), (Abs [] (merge p q))
(Abs [] (merge p ql)), (Abs [] (merge p p)), (Abs [] (insert k q)), (Abs [] (insert k ql)), (Abs [] (insert k p)), (Abs [] (insert a q)), (Abs [] (insert a ql)), (Abs [] (insert a p)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap ql))
(Abs [] (maybe_swap p)), (Abs [] (q ++ q)), (Abs [] (q ++ ql)), (Abs [] (q ++ p)), (Abs [] (ql ++ q)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ p)), (Abs [] (p ++ q)), (Abs [] (p ++ ql)), (Abs [] (p ++ p))
(priq (k :: q)), (priq (k :: ql)), (priq (k :: p)), (priq (a :: q)), (priq (a :: ql)), (priq (a :: p)), (priq (merge q q)), (priq (merge q ql)), (priq (merge q p)), (priq (merge ql q))
(priq (merge ql ql)), (priq (merge ql p)), (priq (merge p q)), (priq (merge p ql)), (priq (merge p p)), (priq (insert k q)), (priq (insert k ql)), (priq (insert k p)), (priq (insert a q)), (priq (insert a ql))
(priq (insert a p)), (priq (maybe_swap q)), (priq (maybe_swap ql)), (priq (maybe_swap p)), (priq (q ++ q)), (priq (q ++ ql)), (priq (q ++ p)), (priq (ql ++ q)), (priq (ql ++ ql)), (priq (ql ++ p))
(priq (p ++ q)), (priq (p ++ ql)), (priq (p ++ p)), (priq []), (Permutation q (k :: q)), (Permutation q (k :: ql)), (Permutation q (k :: p)), (Permutation q (a :: q)), (Permutation q (a :: ql)), (Permutation q (a :: p))
(Permutation q (merge q q)), (Permutation q (merge q ql)), (Permutation q (merge q p)), (Permutation q (merge ql q)), (Permutation q (merge ql ql)), (Permutation q (merge ql p)), (Permutation q (merge p q)), (Permutation q (merge p ql)), (Permutation q (merge p p)), (Permutation q (insert k q))
(Permutation q (insert k ql)), (Permutation q (insert k p)), (Permutation q (insert a q)), (Permutation q (insert a ql)), (Permutation q (insert a p)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap p)), (Permutation q (q ++ q)), (Permutation q (q ++ ql))
(Permutation q (q ++ p)), (Permutation q (ql ++ q)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ p)), (Permutation q (p ++ q)), (Permutation q (p ++ ql)), (Permutation q (p ++ p)), (Permutation q []), (Permutation ql (k :: q)), (Permutation ql (k :: ql))
(Permutation ql (k :: p)), (Permutation ql (a :: q)), (Permutation ql (a :: ql)), (Permutation ql (a :: p)), (Permutation ql (merge q q)), (Permutation ql (merge q ql)), (Permutation ql (merge q p)), (Permutation ql (merge ql q)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql p))
(Permutation ql (merge p q)), (Permutation ql (merge p ql)), (Permutation ql (merge p p)), (Permutation ql (insert k q)), (Permutation ql (insert k ql)), (Permutation ql (insert k p)), (Permutation ql (insert a q)), (Permutation ql (insert a ql)), (Permutation ql (insert a p)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap p)), (Permutation ql (q ++ q)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ p)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ p)), (Permutation ql (p ++ q)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ p)), (Permutation ql []), (Permutation p (k :: q)), (Permutation p (k :: ql)), (Permutation p (k :: p)), (Permutation p (a :: q)), (Permutation p (a :: ql)), (Permutation p (a :: p)), (Permutation p (merge q q)), (Permutation p (merge q ql))
(Permutation p (merge q p)), (Permutation p (merge ql q)), (Permutation p (merge ql ql)), (Permutation p (merge ql p)), (Permutation p (merge p q)), (Permutation p (merge p ql)), (Permutation p (merge p p)), (Permutation p (insert k q)), (Permutation p (insert k ql)), (Permutation p (insert k p))
(Permutation p (insert a q)), (Permutation p (insert a ql)), (Permutation p (insert a p)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap p)), (Permutation p (q ++ q)), (Permutation p (q ++ ql)), (Permutation p (q ++ p)), (Permutation p (ql ++ q))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ p)), (Permutation p (p ++ q)), (Permutation p (p ++ ql)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (k :: q) q), (Permutation (k :: q) ql), (Permutation (k :: q) p), (Permutation (k :: q) (k :: ql))
(Permutation (k :: q) (k :: p)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql p))
(Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (maybe_swap q))
(Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ ql))
(Permutation (k :: q) (p ++ p)), (Permutation (k :: q) []), (Permutation (k :: ql) q), (Permutation (k :: ql) ql), (Permutation (k :: ql) p), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: p))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql p)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (insert k q))
(Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ ql))
(Permutation (k :: ql) (q ++ p)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) []), (Permutation (k :: p) q), (Permutation (k :: p) ql)
(Permutation (k :: p) p), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: ql)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge ql q))
(Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p p)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a ql))
(Permutation (k :: p) (insert a p)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ p))
(Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) []), (Permutation (a :: q) q), (Permutation (a :: q) ql), (Permutation (a :: q) p), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: p))
(Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p ql))
(Permutation (a :: q) (merge p p)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) [])
(Permutation (a :: ql) q), (Permutation (a :: ql) ql), (Permutation (a :: ql) p), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (a :: q)), (Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q ql))
(Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k p))
(Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (ql ++ q))
(Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ p)), (Permutation (a :: ql) []), (Permutation (a :: p) q), (Permutation (a :: p) ql), (Permutation (a :: p) p), (Permutation (a :: p) (k :: q))
(Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (maybe_swap q))
(Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ ql))
(Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge q q) q), (Permutation (merge q q) ql), (Permutation (merge q q) p), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: ql))
(Permutation (merge q q) (a :: p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (insert k q))
(Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ ql))
(Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ p)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) []), (Permutation (merge q ql) q), (Permutation (merge q ql) ql)
(Permutation (merge q ql) p), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: ql)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge ql q))
(Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p p)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a ql))
(Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap p)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ p))
(Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) []), (Permutation (merge q p) q), (Permutation (merge q p) ql), (Permutation (merge q p) p), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: p))
(Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p ql))
(Permutation (merge q p) (merge p p)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap p))
(Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) [])
(Permutation (merge ql q) q), (Permutation (merge ql q) ql), (Permutation (merge ql q) p), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: ql)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (merge q q))
(Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql p)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k p))
(Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ p)), (Permutation (merge ql q) (ql ++ q))
(Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) p), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p))
(Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p ql)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a p)), (Permutation (merge ql ql) (maybe_swap q))
(Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ p)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ ql))
(Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) []), (Permutation (merge ql p) q), (Permutation (merge ql p) ql), (Permutation (merge ql p) p), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (a :: q)), (Permutation (merge ql p) (a :: ql))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q ql)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (insert k q))
(Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ ql))
(Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ p)), (Permutation (merge ql p) []), (Permutation (merge p q) q), (Permutation (merge p q) ql)
(Permutation (merge p q) p), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q ql)), (Permutation (merge p q) (merge q p))
(Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a ql))
(Permutation (merge p q) (insert a p)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ p))
(Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ p)), (Permutation (merge p q) []), (Permutation (merge p ql) q), (Permutation (merge p ql) ql), (Permutation (merge p ql) p), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: p))
(Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (merge q q)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge p q))
(Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k p)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap p))
(Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) [])
(Permutation (merge p p) q), (Permutation (merge p p) ql), (Permutation (merge p p) p), (Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (merge q q))
(Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k p))
(Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a p)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (ql ++ q))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ p)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (insert k q) q), (Permutation (insert k q) ql), (Permutation (insert k q) p), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql ql))
(Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p ql)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert a q)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (maybe_swap q))
(Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ p)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ ql))
(Permutation (insert k q) (p ++ p)), (Permutation (insert k q) []), (Permutation (insert k ql) q), (Permutation (insert k ql) ql), (Permutation (insert k ql) p), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge p q)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p p))
(Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap p)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ ql))
(Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) []), (Permutation (insert k p) q), (Permutation (insert k p) ql)
(Permutation (insert k p) p), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q p))
(Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql ql)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a ql))
(Permutation (insert k p) (insert a p)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ p))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) []), (Permutation (insert a q) q), (Permutation (insert a q) ql), (Permutation (insert a q) p), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: p))
(Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql ql)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge p q))
(Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap p))
(Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) [])
(Permutation (insert a ql) q), (Permutation (insert a ql) ql), (Permutation (insert a ql) p), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: ql)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (merge q q))
(Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge ql q)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k ql))
(Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ p)), (Permutation (insert a ql) (ql ++ q))
(Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) []), (Permutation (insert a p) q), (Permutation (insert a p) ql), (Permutation (insert a p) p), (Permutation (insert a p) (k :: q))
(Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: ql)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql ql))
(Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (maybe_swap q))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ ql))
(Permutation (insert a p) (p ++ p)), (Permutation (insert a p) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: ql))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q ql)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p p))
(Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k ql)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ ql))
(Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (merge q q)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q p))
(Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql ql)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (insert k q)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert a q))
(Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ p))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: p))
(Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge p q))
(Permutation (maybe_swap p) (merge p ql)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ p)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) [])
(Permutation (q ++ q) q), (Permutation (q ++ q) ql), (Permutation (q ++ q) p), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: ql)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (merge q q))
(Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge ql q)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k ql))
(Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a ql)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (ql ++ q))
(Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) p), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql ql))
(Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p ql)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert a q)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a p))
(Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap ql)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ p)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ ql))
(Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) []), (Permutation (q ++ p) q), (Permutation (q ++ p) ql), (Permutation (q ++ p) p), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: ql))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q ql)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p p))
(Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k ql)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (q ++ q))
(Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) p), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (merge q q)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q p))
(Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql ql)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (insert k q)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert a q))
(Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ ql)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ p))
(Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) []), (Permutation (ql ++ ql) q), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) p), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: ql)), (Permutation (ql ++ ql) (k :: p))
(Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge ql q)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge p q))
(Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a ql)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap ql))
(Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (q ++ q)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) [])
(Permutation (ql ++ p) q), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) p), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: ql)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (merge q q))
(Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge p q)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k ql))
(Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (maybe_swap q)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ p))
(Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ ql)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) []), (Permutation (p ++ q) q), (Permutation (p ++ q) ql), (Permutation (p ++ q) p), (Permutation (p ++ q) (k :: q))
(Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: ql)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql ql))
(Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a p))
(Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (p ++ ql))
(Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) p), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (a :: q)), (Permutation (p ++ ql) (a :: ql))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q ql)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p p))
(Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k ql)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (q ++ q))
(Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (p ++ q)), (Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) []), (Permutation (p ++ p) q), (Permutation (p ++ p) ql)
(Permutation (p ++ p) p), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: ql)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q p))
(Permutation (p ++ p) (merge ql q)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert a q))
(Permutation (p ++ p) (insert a ql)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ ql))
(Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) []), (Permutation [] q), (Permutation [] ql), (Permutation [] p), (Permutation [] (k :: q)), (Permutation [] (k :: ql)), (Permutation [] (k :: p))
(Permutation [] (a :: q)), (Permutation [] (a :: ql)), (Permutation [] (a :: p)), (Permutation [] (merge q q)), (Permutation [] (merge q ql)), (Permutation [] (merge q p)), (Permutation [] (merge ql q)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql p)), (Permutation [] (merge p q))
(Permutation [] (merge p ql)), (Permutation [] (merge p p)), (Permutation [] (insert k q)), (Permutation [] (insert k ql)), (Permutation [] (insert k p)), (Permutation [] (insert a q)), (Permutation [] (insert a ql)), (Permutation [] (insert a p)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap ql))
(Permutation [] (maybe_swap p)), (Permutation [] (q ++ q)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ p)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ p)), (Permutation [] (p ++ q)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ p))
(In k (k :: q)), (In k (k :: ql)), (In k (k :: p)), (In k (a :: q)), (In k (a :: ql)), (In k (a :: p)), (In k (merge q q)), (In k (merge q ql)), (In k (merge q p)), (In k (merge ql q))
(In k (merge ql ql)), (In k (merge ql p)), (In k (merge p q)), (In k (merge p ql)), (In k (merge p p)), (In k (insert k q)), (In k (insert k ql)), (In k (insert k p)), (In k (insert a q)), (In k (insert a ql))
(In k (insert a p)), (In k (maybe_swap q)), (In k (maybe_swap ql)), (In k (maybe_swap p)), (In k (q ++ q)), (In k (q ++ ql)), (In k (q ++ p)), (In k (ql ++ q)), (In k (ql ++ ql)), (In k (ql ++ p))
(In k (p ++ q)), (In k (p ++ ql)), (In k (p ++ p)), (In a (k :: q)), (In a (k :: ql)), (In a (k :: p)), (In a (a :: q)), (In a (a :: ql)), (In a (a :: p)), (In a (merge q q))
(In a (merge q ql)), (In a (merge q p)), (In a (merge ql q)), (In a (merge ql ql)), (In a (merge ql p)), (In a (merge p q)), (In a (merge p ql)), (In a (merge p p)), (In a (insert k q)), (In a (insert k ql))
(In a (insert k p)), (In a (insert a q)), (In a (insert a ql)), (In a (insert a p)), (In a (maybe_swap q)), (In a (maybe_swap ql)), (In a (maybe_swap p)), (In a (q ++ q)), (In a (q ++ ql)), (In a (q ++ p))
(In a (ql ++ q)), (In a (ql ++ ql)), (In a (ql ++ p)), (In a (p ++ q)), (In a (p ++ ql)), (In a (p ++ p)), (In (length q) q), (In (length q) ql), (In (length q) p), (In (length q) (k :: q))
(In (length q) (k :: ql)), (In (length q) (k :: p)), (In (length q) (a :: q)), (In (length q) (a :: ql)), (In (length q) (a :: p)), (In (length q) (merge q q)), (In (length q) (merge q ql)), (In (length q) (merge q p)), (In (length q) (merge ql q)), (In (length q) (merge ql ql))
(In (length q) (merge ql p)), (In (length q) (merge p q)), (In (length q) (merge p ql)), (In (length q) (merge p p)), (In (length q) (insert k q)), (In (length q) (insert k ql)), (In (length q) (insert k p)), (In (length q) (insert a q)), (In (length q) (insert a ql)), (In (length q) (insert a p))
(In (length q) (maybe_swap q)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap p)), (In (length q) (q ++ q)), (In (length q) (q ++ ql)), (In (length q) (q ++ p)), (In (length q) (ql ++ q)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ p)), (In (length q) (p ++ q))
(In (length q) (p ++ ql)), (In (length q) (p ++ p)), (In (length ql) q), (In (length ql) ql), (In (length ql) p), (In (length ql) (k :: q)), (In (length ql) (k :: ql)), (In (length ql) (k :: p)), (In (length ql) (a :: q)), (In (length ql) (a :: ql))
(In (length ql) (a :: p)), (In (length ql) (merge q q)), (In (length ql) (merge q ql)), (In (length ql) (merge q p)), (In (length ql) (merge ql q)), (In (length ql) (merge ql ql)), (In (length ql) (merge ql p)), (In (length ql) (merge p q)), (In (length ql) (merge p ql)), (In (length ql) (merge p p))
(In (length ql) (insert k q)), (In (length ql) (insert k ql)), (In (length ql) (insert k p)), (In (length ql) (insert a q)), (In (length ql) (insert a ql)), (In (length ql) (insert a p)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap p)), (In (length ql) (q ++ q))
(In (length ql) (q ++ ql)), (In (length ql) (q ++ p)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ p)), (In (length ql) (p ++ q)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ p)), (In (length p) q), (In (length p) ql)
(In (length p) p), (In (length p) (k :: q)), (In (length p) (k :: ql)), (In (length p) (k :: p)), (In (length p) (a :: q)), (In (length p) (a :: ql)), (In (length p) (a :: p)), (In (length p) (merge q q)), (In (length p) (merge q ql)), (In (length p) (merge q p))
(In (length p) (merge ql q)), (In (length p) (merge ql ql)), (In (length p) (merge ql p)), (In (length p) (merge p q)), (In (length p) (merge p ql)), (In (length p) (merge p p)), (In (length p) (insert k q)), (In (length p) (insert k ql)), (In (length p) (insert k p)), (In (length p) (insert a q))
(In (length p) (insert a ql)), (In (length p) (insert a p)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap ql)), (In (length p) (maybe_swap p)), (In (length p) (q ++ q)), (In (length p) (q ++ ql)), (In (length p) (q ++ p)), (In (length p) (ql ++ q)), (In (length p) (ql ++ ql))
(In (length p) (ql ++ p)), (In (length p) (p ++ q)), (In (length p) (p ++ ql)), (In (length p) (p ++ p)), (k < length q), (k < length ql), (k < length p), (a < length q), (a < length ql), (a < length p)
(length q < k), (length q < a), (length q < length ql), (length q < length p), (length ql < k), (length ql < a), (length ql < length q), (length ql < length p), (length p < k), (length p < a)
(length p < length q), (length p < length ql), (k <= length q), (k <= length ql), (k <= length p), (a <= length q), (a <= length ql), (a <= length p), (length q <= k), (length q <= a)
(length q <= length ql), (length q <= length p), (length ql <= k), (length ql <= a), (length ql <= length q), (length ql <= length p), (length p <= k), (length p <= a), (length p <= length q), (length p <= length ql)
(~ Abs q q), (~ Abs q ql), (~ Abs q p), (~ Abs ql q), (~ Abs ql ql), (~ Abs ql p), (~ Abs p q), (~ Abs p ql), (~ Abs p p), (~ priq q)
(~ priq ql), (~ priq p), (~ Permutation q q), (~ Permutation q ql), (~ Permutation q p), (~ Permutation ql q), (~ Permutation ql ql), (~ Permutation ql p), (~ Permutation p q), (~ Permutation p ql)
(~ Permutation p p), (~ In k q), (~ In k ql), (~ In k p), (~ In a q), (~ In a ql), (~ In a p), (~ k < k), (~ k < a), (~ a < k)
(~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (q <> q), (q <> ql), (q <> p), (ql <> q), (ql <> ql)
(ql <> p), (p <> q), (p <> ql), (p <> p), (k <> k), (k <> a), (a <> k), (a <> a), (None = Some q), (None = Some ql)
(None = Some p), (k :: q = q), (k :: q = ql), (k :: q = p), (k :: q = merge q q), (k :: q = merge q ql), (k :: q = merge q p), (k :: q = merge ql q), (k :: q = merge ql ql), (k :: q = merge ql p)
(k :: q = merge p q), (k :: q = merge p ql), (k :: q = merge p p), (k :: q = insert k q), (k :: q = insert k ql), (k :: q = insert k p), (k :: q = insert a q), (k :: q = insert a ql), (k :: q = insert a p), (k :: q = maybe_swap q)
(k :: q = maybe_swap ql), (k :: q = maybe_swap p), (k :: q = q ++ q), (k :: q = q ++ ql), (k :: q = q ++ p), (k :: q = ql ++ q), (k :: q = ql ++ ql), (k :: q = ql ++ p), (k :: q = p ++ q), (k :: q = p ++ ql)
(k :: q = p ++ p), (k :: q = []), (k :: ql = q), (k :: ql = ql), (k :: ql = p), (k :: ql = merge q q), (k :: ql = merge q ql), (k :: ql = merge q p), (k :: ql = merge ql q), (k :: ql = merge ql ql)
(k :: ql = merge ql p), (k :: ql = merge p q), (k :: ql = merge p ql), (k :: ql = merge p p), (k :: ql = insert k q), (k :: ql = insert k ql), (k :: ql = insert k p), (k :: ql = insert a q), (k :: ql = insert a ql), (k :: ql = insert a p)
(k :: ql = maybe_swap q), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap p), (k :: ql = q ++ q), (k :: ql = q ++ ql), (k :: ql = q ++ p), (k :: ql = ql ++ q), (k :: ql = ql ++ ql), (k :: ql = ql ++ p), (k :: ql = p ++ q)
(k :: ql = p ++ ql), (k :: ql = p ++ p), (k :: ql = []), (k :: p = q), (k :: p = ql), (k :: p = p), (k :: p = merge q q), (k :: p = merge q ql), (k :: p = merge q p), (k :: p = merge ql q)
(k :: p = merge ql ql), (k :: p = merge ql p), (k :: p = merge p q), (k :: p = merge p ql), (k :: p = merge p p), (k :: p = insert k q), (k :: p = insert k ql), (k :: p = insert k p), (k :: p = insert a q), (k :: p = insert a ql)
(k :: p = insert a p), (k :: p = maybe_swap q), (k :: p = maybe_swap ql), (k :: p = maybe_swap p), (k :: p = q ++ q), (k :: p = q ++ ql), (k :: p = q ++ p), (k :: p = ql ++ q), (k :: p = ql ++ ql), (k :: p = ql ++ p)
(k :: p = p ++ q), (k :: p = p ++ ql), (k :: p = p ++ p), (k :: p = []), (a :: q = q), (a :: q = ql), (a :: q = p), (a :: q = merge q q), (a :: q = merge q ql), (a :: q = merge q p)
(a :: q = merge ql q), (a :: q = merge ql ql), (a :: q = merge ql p), (a :: q = merge p q), (a :: q = merge p ql), (a :: q = merge p p), (a :: q = insert k q), (a :: q = insert k ql), (a :: q = insert k p), (a :: q = insert a q)
(a :: q = insert a ql), (a :: q = insert a p), (a :: q = maybe_swap q), (a :: q = maybe_swap ql), (a :: q = maybe_swap p), (a :: q = q ++ q), (a :: q = q ++ ql), (a :: q = q ++ p), (a :: q = ql ++ q), (a :: q = ql ++ ql)
(a :: q = ql ++ p), (a :: q = p ++ q), (a :: q = p ++ ql), (a :: q = p ++ p), (a :: q = []), (a :: ql = q), (a :: ql = ql), (a :: ql = p), (a :: ql = merge q q), (a :: ql = merge q ql)
(a :: ql = merge q p), (a :: ql = merge ql q), (a :: ql = merge ql ql), (a :: ql = merge ql p), (a :: ql = merge p q), (a :: ql = merge p ql), (a :: ql = merge p p), (a :: ql = insert k q), (a :: ql = insert k ql), (a :: ql = insert k p)
(a :: ql = insert a q), (a :: ql = insert a ql), (a :: ql = insert a p), (a :: ql = maybe_swap q), (a :: ql = maybe_swap ql), (a :: ql = maybe_swap p), (a :: ql = q ++ q), (a :: ql = q ++ ql), (a :: ql = q ++ p), (a :: ql = ql ++ q)
(a :: ql = ql ++ ql), (a :: ql = ql ++ p), (a :: ql = p ++ q), (a :: ql = p ++ ql), (a :: ql = p ++ p), (a :: ql = []), (a :: p = q), (a :: p = ql), (a :: p = p), (a :: p = merge q q)
(a :: p = merge q ql), (a :: p = merge q p), (a :: p = merge ql q), (a :: p = merge ql ql), (a :: p = merge ql p), (a :: p = merge p q), (a :: p = merge p ql), (a :: p = merge p p), (a :: p = insert k q), (a :: p = insert k ql)
(a :: p = insert k p), (a :: p = insert a q), (a :: p = insert a ql), (a :: p = insert a p), (a :: p = maybe_swap q), (a :: p = maybe_swap ql), (a :: p = maybe_swap p), (a :: p = q ++ q), (a :: p = q ++ ql), (a :: p = q ++ p)
(a :: p = ql ++ q), (a :: p = ql ++ ql), (a :: p = ql ++ p), (a :: p = p ++ q), (a :: p = p ++ ql), (a :: p = p ++ p), (a :: p = []), (merge q q = q), (merge q q = ql), (merge q q = p)
(merge q q = insert k q), (merge q q = insert k ql), (merge q q = insert k p), (merge q q = insert a q), (merge q q = insert a ql), (merge q q = insert a p), (merge q q = maybe_swap q), (merge q q = maybe_swap ql), (merge q q = maybe_swap p), (merge q q = q ++ q)
(merge q q = q ++ ql), (merge q q = q ++ p), (merge q q = ql ++ q), (merge q q = ql ++ ql), (merge q q = ql ++ p), (merge q q = p ++ q), (merge q q = p ++ ql), (merge q q = p ++ p), (merge q ql = q), (merge q ql = ql)
(merge q ql = p), (merge q ql = insert k q), (merge q ql = insert k ql), (merge q ql = insert k p), (merge q ql = insert a q), (merge q ql = insert a ql), (merge q ql = insert a p), (merge q ql = maybe_swap q), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap p)
(merge q ql = q ++ q), (merge q ql = q ++ ql), (merge q ql = q ++ p), (merge q ql = ql ++ q), (merge q ql = ql ++ ql), (merge q ql = ql ++ p), (merge q ql = p ++ q), (merge q ql = p ++ ql), (merge q ql = p ++ p), (merge q p = q)
(merge q p = ql), (merge q p = p), (merge q p = insert k q), (merge q p = insert k ql), (merge q p = insert k p), (merge q p = insert a q), (merge q p = insert a ql), (merge q p = insert a p), (merge q p = maybe_swap q), (merge q p = maybe_swap ql)
(merge q p = maybe_swap p), (merge q p = q ++ q), (merge q p = q ++ ql), (merge q p = q ++ p), (merge q p = ql ++ q), (merge q p = ql ++ ql), (merge q p = ql ++ p), (merge q p = p ++ q), (merge q p = p ++ ql), (merge q p = p ++ p)
(merge ql q = q), (merge ql q = ql), (merge ql q = p), (merge ql q = insert k q), (merge ql q = insert k ql), (merge ql q = insert k p), (merge ql q = insert a q), (merge ql q = insert a ql), (merge ql q = insert a p), (merge ql q = maybe_swap q)
(merge ql q = maybe_swap ql), (merge ql q = maybe_swap p), (merge ql q = q ++ q), (merge ql q = q ++ ql), (merge ql q = q ++ p), (merge ql q = ql ++ q), (merge ql q = ql ++ ql), (merge ql q = ql ++ p), (merge ql q = p ++ q), (merge ql q = p ++ ql)
(merge ql q = p ++ p), (merge ql ql = q), (merge ql ql = ql), (merge ql ql = p), (merge ql ql = insert k q), (merge ql ql = insert k ql), (merge ql ql = insert k p), (merge ql ql = insert a q), (merge ql ql = insert a ql), (merge ql ql = insert a p)
(merge ql ql = maybe_swap q), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap p), (merge ql ql = q ++ q), (merge ql ql = q ++ ql), (merge ql ql = q ++ p), (merge ql ql = ql ++ q), (merge ql ql = ql ++ ql), (merge ql ql = ql ++ p), (merge ql ql = p ++ q)
(merge ql ql = p ++ ql), (merge ql ql = p ++ p), (merge ql p = q), (merge ql p = ql), (merge ql p = p), (merge ql p = insert k q), (merge ql p = insert k ql), (merge ql p = insert k p), (merge ql p = insert a q), (merge ql p = insert a ql)
(merge ql p = insert a p), (merge ql p = maybe_swap q), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap p), (merge ql p = q ++ q), (merge ql p = q ++ ql), (merge ql p = q ++ p), (merge ql p = ql ++ q), (merge ql p = ql ++ ql), (merge ql p = ql ++ p)
(merge ql p = p ++ q), (merge ql p = p ++ ql), (merge ql p = p ++ p), (merge p q = q), (merge p q = ql), (merge p q = p), (merge p q = insert k q), (merge p q = insert k ql), (merge p q = insert k p), (merge p q = insert a q)
(merge p q = insert a ql), (merge p q = insert a p), (merge p q = maybe_swap q), (merge p q = maybe_swap ql), (merge p q = maybe_swap p), (merge p q = q ++ q), (merge p q = q ++ ql), (merge p q = q ++ p), (merge p q = ql ++ q), (merge p q = ql ++ ql)
(merge p q = ql ++ p), (merge p q = p ++ q), (merge p q = p ++ ql), (merge p q = p ++ p), (merge p ql = q), (merge p ql = ql), (merge p ql = p), (merge p ql = insert k q), (merge p ql = insert k ql), (merge p ql = insert k p)
(merge p ql = insert a q), (merge p ql = insert a ql), (merge p ql = insert a p), (merge p ql = maybe_swap q), (merge p ql = maybe_swap ql), (merge p ql = maybe_swap p), (merge p ql = q ++ q), (merge p ql = q ++ ql), (merge p ql = q ++ p), (merge p ql = ql ++ q)
(merge p ql = ql ++ ql), (merge p ql = ql ++ p), (merge p ql = p ++ q), (merge p ql = p ++ ql), (merge p ql = p ++ p), (merge p p = q), (merge p p = ql), (merge p p = p), (merge p p = insert k q), (merge p p = insert k ql)
(merge p p = insert k p), (merge p p = insert a q), (merge p p = insert a ql), (merge p p = insert a p), (merge p p = maybe_swap q), (merge p p = maybe_swap ql), (merge p p = maybe_swap p), (merge p p = q ++ q), (merge p p = q ++ ql), (merge p p = q ++ p)
(merge p p = ql ++ q), (merge p p = ql ++ ql), (merge p p = ql ++ p), (merge p p = p ++ q), (merge p p = p ++ ql), (merge p p = p ++ p), (insert k q = q), (insert k q = ql), (insert k q = p), (insert k q = q ++ q)
(insert k q = q ++ ql), (insert k q = q ++ p), (insert k q = ql ++ q), (insert k q = ql ++ ql), (insert k q = ql ++ p), (insert k q = p ++ q), (insert k q = p ++ ql), (insert k q = p ++ p), (insert k ql = q), (insert k ql = ql)
(insert k ql = p), (insert k ql = q ++ q), (insert k ql = q ++ ql), (insert k ql = q ++ p), (insert k ql = ql ++ q), (insert k ql = ql ++ ql), (insert k ql = ql ++ p), (insert k ql = p ++ q), (insert k ql = p ++ ql), (insert k ql = p ++ p)
(insert k p = q), (insert k p = ql), (insert k p = p), (insert k p = q ++ q), (insert k p = q ++ ql), (insert k p = q ++ p), (insert k p = ql ++ q), (insert k p = ql ++ ql), (insert k p = ql ++ p), (insert k p = p ++ q)
(insert k p = p ++ ql), (insert k p = p ++ p), (insert a q = q), (insert a q = ql), (insert a q = p), (insert a q = q ++ q), (insert a q = q ++ ql), (insert a q = q ++ p), (insert a q = ql ++ q), (insert a q = ql ++ ql)
(insert a q = ql ++ p), (insert a q = p ++ q), (insert a q = p ++ ql), (insert a q = p ++ p), (insert a ql = q), (insert a ql = ql), (insert a ql = p), (insert a ql = q ++ q), (insert a ql = q ++ ql), (insert a ql = q ++ p)
(insert a ql = ql ++ q), (insert a ql = ql ++ ql), (insert a ql = ql ++ p), (insert a ql = p ++ q), (insert a ql = p ++ ql), (insert a ql = p ++ p), (insert a p = q), (insert a p = ql), (insert a p = p), (insert a p = q ++ q)
(insert a p = q ++ ql), (insert a p = q ++ p), (insert a p = ql ++ q), (insert a p = ql ++ ql), (insert a p = ql ++ p), (insert a p = p ++ q), (insert a p = p ++ ql), (insert a p = p ++ p), (maybe_swap q = q), (maybe_swap q = ql)
(maybe_swap q = p), (maybe_swap q = insert k q), (maybe_swap q = insert k ql), (maybe_swap q = insert k p), (maybe_swap q = insert a q), (maybe_swap q = insert a ql), (maybe_swap q = insert a p), (maybe_swap q = q ++ q), (maybe_swap q = q ++ ql), (maybe_swap q = q ++ p)
(maybe_swap q = ql ++ q), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ p), (maybe_swap q = p ++ q), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ p), (maybe_swap ql = q), (maybe_swap ql = ql), (maybe_swap ql = p), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k ql), (maybe_swap ql = insert k p), (maybe_swap ql = insert a q), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a p), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ p), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ ql)
(maybe_swap ql = ql ++ p), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ ql), (maybe_swap ql = p ++ p), (maybe_swap p = q), (maybe_swap p = ql), (maybe_swap p = p), (maybe_swap p = insert k q), (maybe_swap p = insert k ql), (maybe_swap p = insert k p)
(maybe_swap p = insert a q), (maybe_swap p = insert a ql), (maybe_swap p = insert a p), (maybe_swap p = q ++ q), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ p), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ p), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ ql), (maybe_swap p = p ++ p), (q ++ q = q), (q ++ q = ql), (q ++ q = p), (q ++ ql = q), (q ++ ql = ql), (q ++ ql = p), (q ++ p = q), (q ++ p = ql)
(q ++ p = p), (ql ++ q = q), (ql ++ q = ql), (ql ++ q = p), (ql ++ ql = q), (ql ++ ql = ql), (ql ++ ql = p), (ql ++ p = q), (ql ++ p = ql), (ql ++ p = p)
(p ++ q = q), (p ++ q = ql), (p ++ q = p), (p ++ ql = q), (p ++ ql = ql), (p ++ ql = p), (p ++ p = q), (p ++ p = ql), (p ++ p = p), ([] = q)
([] = ql), ([] = p), ([] = merge q q), ([] = merge q ql), ([] = merge q p), ([] = merge ql q), ([] = merge ql ql), ([] = merge ql p), ([] = merge p q), ([] = merge p ql)
([] = merge p p), ([] = insert k q), ([] = insert k ql), ([] = insert k p), ([] = insert a q), ([] = insert a ql), ([] = insert a p), ([] = maybe_swap q), ([] = maybe_swap ql), ([] = maybe_swap p)
([] = q ++ q), ([] = q ++ ql), ([] = q ++ p), ([] = ql ++ q), ([] = ql ++ ql), ([] = ql ++ p), ([] = p ++ q), ([] = p ++ ql), ([] = p ++ p), (None = Some k)
(None = Some a), ((k, q) = select k q), ((k, q) = select k ql), ((k, q) = select k p), ((k, q) = select a q), ((k, q) = select a ql), ((k, q) = select a p), ((k, ql) = select k q), ((k, ql) = select k ql), ((k, ql) = select k p)
((k, ql) = select a q), ((k, ql) = select a ql), ((k, ql) = select a p), ((k, p) = select k q), ((k, p) = select k ql), ((k, p) = select k p), ((k, p) = select a q), ((k, p) = select a ql), ((k, p) = select a p), ((a, q) = select k q)
((a, q) = select k ql), ((a, q) = select k p), ((a, q) = select a q), ((a, q) = select a ql), ((a, q) = select a p), ((a, ql) = select k q), ((a, ql) = select k ql), ((a, ql) = select k p), ((a, ql) = select a q), ((a, ql) = select a ql)
((a, ql) = select a p), ((a, p) = select k q), ((a, p) = select k ql), ((a, p) = select k p), ((a, p) = select a q), ((a, p) = select a ql), ((a, p) = select a p), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k))
((k >? k) = (a >=? a)), ((k >? a) = (k >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (a >=? a)), ((a >? k) = (k >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k))
((a >? a) = (k >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (a >=? a)), (length q = k), (length q = a), (length ql = k), (length ql = a), (length p = k), (length p = a)

Label: 1 (1)
(Abs q q), (Abs q ql), (Abs q p), (Abs ql q), (Abs ql ql), (Abs ql p), (Abs p q), (Abs p ql), (Abs p p), (priq q)
(priq ql), (priq p), (Permutation q q), (Permutation q ql), (Permutation q p), (Permutation ql q), (Permutation ql ql), (Permutation ql p), (Permutation p q), (Permutation p ql)
(Permutation p p), (In k q), (In k ql), (In k p), (In a q), (In a ql), (In a p), (k < k), (k < a), (a < k)
(a < a), (k <= k), (k <= a), (a <= k), (a <= a), (q = q), (q = ql), (q = p), (ql = q), (ql = ql)
(ql = p), (p = q), (p = ql), (p = p), (k = k), (k = a), (a = k), (a = a), (false = (k >? k)), (false = (k >? a))
(false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a)), (true = (k >? k)), (true = (k >? a)), (true = (a >? k)), (true = (a >? a))
(true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs q (k :: q)), (Abs q (k :: ql)), (Abs q (k :: p)), (Abs q (a :: q)), (Abs q (a :: ql)), (Abs q (a :: p))
(Abs q (merge q q)), (Abs q (merge q ql)), (Abs q (merge q p)), (Abs q (merge ql q)), (Abs q (merge ql ql)), (Abs q (merge ql p)), (Abs q (merge p q)), (Abs q (merge p ql)), (Abs q (merge p p)), (Abs q (insert k q))
(Abs q (insert k ql)), (Abs q (insert k p)), (Abs q (insert a q)), (Abs q (insert a ql)), (Abs q (insert a p)), (Abs q (maybe_swap q)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap p)), (Abs q (q ++ q)), (Abs q (q ++ ql))
(Abs q (q ++ p)), (Abs q (ql ++ q)), (Abs q (ql ++ ql)), (Abs q (ql ++ p)), (Abs q (p ++ q)), (Abs q (p ++ ql)), (Abs q (p ++ p)), (Abs q []), (Abs ql (k :: q)), (Abs ql (k :: ql))
(Abs ql (k :: p)), (Abs ql (a :: q)), (Abs ql (a :: ql)), (Abs ql (a :: p)), (Abs ql (merge q q)), (Abs ql (merge q ql)), (Abs ql (merge q p)), (Abs ql (merge ql q)), (Abs ql (merge ql ql)), (Abs ql (merge ql p))
(Abs ql (merge p q)), (Abs ql (merge p ql)), (Abs ql (merge p p)), (Abs ql (insert k q)), (Abs ql (insert k ql)), (Abs ql (insert k p)), (Abs ql (insert a q)), (Abs ql (insert a ql)), (Abs ql (insert a p)), (Abs ql (maybe_swap q))
(Abs ql (maybe_swap ql)), (Abs ql (maybe_swap p)), (Abs ql (q ++ q)), (Abs ql (q ++ ql)), (Abs ql (q ++ p)), (Abs ql (ql ++ q)), (Abs ql (ql ++ ql)), (Abs ql (ql ++ p)), (Abs ql (p ++ q)), (Abs ql (p ++ ql))
(Abs ql (p ++ p)), (Abs ql []), (Abs p (k :: q)), (Abs p (k :: ql)), (Abs p (k :: p)), (Abs p (a :: q)), (Abs p (a :: ql)), (Abs p (a :: p)), (Abs p (merge q q)), (Abs p (merge q ql))
(Abs p (merge q p)), (Abs p (merge ql q)), (Abs p (merge ql ql)), (Abs p (merge ql p)), (Abs p (merge p q)), (Abs p (merge p ql)), (Abs p (merge p p)), (Abs p (insert k q)), (Abs p (insert k ql)), (Abs p (insert k p))
(Abs p (insert a q)), (Abs p (insert a ql)), (Abs p (insert a p)), (Abs p (maybe_swap q)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap p)), (Abs p (q ++ q)), (Abs p (q ++ ql)), (Abs p (q ++ p)), (Abs p (ql ++ q))
(Abs p (ql ++ ql)), (Abs p (ql ++ p)), (Abs p (p ++ q)), (Abs p (p ++ ql)), (Abs p (p ++ p)), (Abs p []), (Abs (k :: q) q), (Abs (k :: q) ql), (Abs (k :: q) p), (Abs (k :: q) (k :: ql))
(Abs (k :: q) (k :: p)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: p)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql p))
(Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ p)), (Abs (k :: q) []), (Abs (k :: ql) q), (Abs (k :: ql) ql), (Abs (k :: ql) p), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: p))
(Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q ql)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (insert k q))
(Abs (k :: ql) (insert k ql)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ ql))
(Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (p ++ q)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ p)), (Abs (k :: ql) []), (Abs (k :: p) q), (Abs (k :: p) ql)
(Abs (k :: p) p), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a p)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ p)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ ql)), (Abs (k :: p) (ql ++ p))
(Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) []), (Abs (a :: q) q), (Abs (a :: q) ql), (Abs (a :: q) p), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: ql)), (Abs (a :: q) (k :: p))
(Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: p)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge ql q)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p ql))
(Abs (a :: q) (merge p p)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a ql)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap p))
(Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ p)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ ql)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) [])
(Abs (a :: ql) q), (Abs (a :: ql) ql), (Abs (a :: ql) p), (Abs (a :: ql) (k :: q)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: p)), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q ql))
(Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p ql)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k p))
(Abs (a :: ql) (insert a q)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a p)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap ql)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) []), (Abs (a :: p) q), (Abs (a :: p) ql), (Abs (a :: p) p), (Abs (a :: p) (k :: q))
(Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q ql)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql p))
(Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k ql)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (maybe_swap q))
(Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ ql))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) []), (Abs (merge q q) q), (Abs (merge q q) ql), (Abs (merge q q) p), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: ql))
(Abs (merge q q) (a :: p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q p)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql ql)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ p)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) []), (Abs (merge q ql) q), (Abs (merge q ql) ql)
(Abs (merge q ql) p), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: p)), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a p)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (q ++ q)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ ql)), (Abs (merge q ql) (ql ++ p))
(Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) []), (Abs (merge q p) q), (Abs (merge q p) ql), (Abs (merge q p) p), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: p))
(Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: p)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p ql))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap p))
(Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ ql)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) [])
(Abs (merge ql q) q), (Abs (merge ql q) ql), (Abs (merge ql q) p), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (merge q q))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k ql)), (Abs (merge ql q) (insert k p))
(Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (ql ++ q))
(Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (p ++ q)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ p)), (Abs (merge ql q) []), (Abs (merge ql ql) q), (Abs (merge ql ql) ql), (Abs (merge ql ql) p), (Abs (merge ql ql) (k :: q))
(Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (insert k q)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (maybe_swap q))
(Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ ql)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ ql))
(Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) []), (Abs (merge ql p) q), (Abs (merge ql p) ql), (Abs (merge ql p) p), (Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: ql))
(Abs (merge ql p) (a :: p)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p p)), (Abs (merge ql p) (insert k q))
(Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert a q)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a p)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap ql)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ ql))
(Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (ql ++ q)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) []), (Abs (merge p q) q), (Abs (merge p q) ql)
(Abs (merge p q) p), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q p))
(Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge p ql)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a ql))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap ql)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (ql ++ q)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ p))
(Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) []), (Abs (merge p ql) q), (Abs (merge p ql) ql), (Abs (merge p ql) p), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: p))
(Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: p)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge p q))
(Abs (merge p ql) (merge p p)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (maybe_swap q)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap p))
(Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ ql)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) [])
(Abs (merge p p) q), (Abs (merge p p) ql), (Abs (merge p p) p), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (merge q q))
(Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql ql)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k p))
(Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ ql)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (ql ++ q))
(Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) []), (Abs (insert k q) q), (Abs (insert k q) ql), (Abs (insert k q) p), (Abs (insert k q) (k :: q))
(Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql ql))
(Abs (insert k q) (merge ql p)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k p)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (maybe_swap q))
(Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ ql)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ ql))
(Abs (insert k q) (p ++ p)), (Abs (insert k q) []), (Abs (insert k ql) q), (Abs (insert k ql) ql), (Abs (insert k ql) p), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: p)), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: ql))
(Abs (insert k ql) (a :: p)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p p))
(Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a p)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (q ++ q)), (Abs (insert k ql) (q ++ ql))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ ql)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) []), (Abs (insert k p) q), (Abs (insert k p) ql)
(Abs (insert k p) p), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: p)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q p))
(Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a ql))
(Abs (insert k p) (insert a p)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ p))
(Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ ql)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) []), (Abs (insert a q) q), (Abs (insert a q) ql), (Abs (insert a q) p), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: p))
(Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: p)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge p q))
(Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap p))
(Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ ql)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) [])
(Abs (insert a ql) q), (Abs (insert a ql) ql), (Abs (insert a ql) p), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (merge q q))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q p)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (ql ++ q))
(Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (p ++ q)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ p)), (Abs (insert a ql) []), (Abs (insert a p) q), (Abs (insert a p) ql), (Abs (insert a p) p), (Abs (insert a p) (k :: q))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql ql))
(Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql)), (Abs (insert a p) (maybe_swap q))
(Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ p)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ ql)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ ql))
(Abs (insert a p) (p ++ p)), (Abs (insert a p) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) p), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: ql))
(Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ ql))
(Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (ql ++ q)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) ql)
(Abs (maybe_swap ql) p), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: p)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q p))
(Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert a q))
(Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ p))
(Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ ql)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) ql), (Abs (maybe_swap p) p), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: p))
(Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql p)), (Abs (maybe_swap p) (merge p q))
(Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql))
(Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ ql)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) [])
(Abs (q ++ q) q), (Abs (q ++ q) ql), (Abs (q ++ q) p), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (merge q q))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k ql))
(Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (ql ++ q))
(Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) []), (Abs (q ++ ql) q), (Abs (q ++ ql) ql), (Abs (q ++ ql) p), (Abs (q ++ ql) (k :: q))
(Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql ql))
(Abs (q ++ ql) (merge ql p)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a p))
(Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ ql))
(Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) []), (Abs (q ++ p) q), (Abs (q ++ p) ql), (Abs (q ++ p) p), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: ql))
(Abs (q ++ p) (a :: p)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (q ++ q))
(Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (ql ++ q)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) []), (Abs (ql ++ q) q), (Abs (ql ++ q) ql)
(Abs (ql ++ q) p), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: p)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q p))
(Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert a q))
(Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ p))
(Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ p)), (Abs (ql ++ q) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) p), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: p))
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q p)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge p q))
(Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k p)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap ql))
(Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) ql), (Abs (ql ++ p) p), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: p)), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (merge q q))
(Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k ql))
(Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a p)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ p))
(Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) []), (Abs (p ++ q) q), (Abs (p ++ q) ql), (Abs (p ++ q) p), (Abs (p ++ q) (k :: q))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql ql))
(Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ ql)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (p ++ ql))
(Abs (p ++ q) (p ++ p)), (Abs (p ++ q) []), (Abs (p ++ ql) q), (Abs (p ++ ql) ql), (Abs (p ++ ql) p), (Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: ql))
(Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap p)), (Abs (p ++ ql) (q ++ q))
(Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (ql ++ q)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) []), (Abs (p ++ p) q), (Abs (p ++ p) ql)
(Abs (p ++ p) p), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert a q))
(Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ ql))
(Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) []), (Abs [] q), (Abs [] ql), (Abs [] p), (Abs [] (k :: q)), (Abs [] (k :: ql)), (Abs [] (k :: p))
(Abs [] (a :: q)), (Abs [] (a :: ql)), (Abs [] (a :: p)), (Abs [] (merge q q)), (Abs [] (merge q ql)), (Abs [] (merge q p)), (Abs [] (merge ql q)), (Abs [] (merge ql ql)), (Abs [] (merge ql p)), (Abs [] (merge p q))
(Abs [] (merge p ql)), (Abs [] (merge p p)), (Abs [] (insert k q)), (Abs [] (insert k ql)), (Abs [] (insert k p)), (Abs [] (insert a q)), (Abs [] (insert a ql)), (Abs [] (insert a p)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap ql))
(Abs [] (maybe_swap p)), (Abs [] (q ++ q)), (Abs [] (q ++ ql)), (Abs [] (q ++ p)), (Abs [] (ql ++ q)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ p)), (Abs [] (p ++ q)), (Abs [] (p ++ ql)), (Abs [] (p ++ p))
(priq (k :: q)), (priq (k :: ql)), (priq (k :: p)), (priq (a :: q)), (priq (a :: ql)), (priq (a :: p)), (priq (merge q q)), (priq (merge q ql)), (priq (merge q p)), (priq (merge ql q))
(priq (merge ql ql)), (priq (merge ql p)), (priq (merge p q)), (priq (merge p ql)), (priq (merge p p)), (priq (insert k q)), (priq (insert k ql)), (priq (insert k p)), (priq (insert a q)), (priq (insert a ql))
(priq (insert a p)), (priq (maybe_swap q)), (priq (maybe_swap ql)), (priq (maybe_swap p)), (priq (q ++ q)), (priq (q ++ ql)), (priq (q ++ p)), (priq (ql ++ q)), (priq (ql ++ ql)), (priq (ql ++ p))
(priq (p ++ q)), (priq (p ++ ql)), (priq (p ++ p)), (priq []), (Permutation q (k :: q)), (Permutation q (k :: ql)), (Permutation q (k :: p)), (Permutation q (a :: q)), (Permutation q (a :: ql)), (Permutation q (a :: p))
(Permutation q (merge q q)), (Permutation q (merge q ql)), (Permutation q (merge q p)), (Permutation q (merge ql q)), (Permutation q (merge ql ql)), (Permutation q (merge ql p)), (Permutation q (merge p q)), (Permutation q (merge p ql)), (Permutation q (merge p p)), (Permutation q (insert k q))
(Permutation q (insert k ql)), (Permutation q (insert k p)), (Permutation q (insert a q)), (Permutation q (insert a ql)), (Permutation q (insert a p)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap p)), (Permutation q (q ++ q)), (Permutation q (q ++ ql))
(Permutation q (q ++ p)), (Permutation q (ql ++ q)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ p)), (Permutation q (p ++ q)), (Permutation q (p ++ ql)), (Permutation q (p ++ p)), (Permutation q []), (Permutation ql (k :: q)), (Permutation ql (k :: ql))
(Permutation ql (k :: p)), (Permutation ql (a :: q)), (Permutation ql (a :: ql)), (Permutation ql (a :: p)), (Permutation ql (merge q q)), (Permutation ql (merge q ql)), (Permutation ql (merge q p)), (Permutation ql (merge ql q)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql p))
(Permutation ql (merge p q)), (Permutation ql (merge p ql)), (Permutation ql (merge p p)), (Permutation ql (insert k q)), (Permutation ql (insert k ql)), (Permutation ql (insert k p)), (Permutation ql (insert a q)), (Permutation ql (insert a ql)), (Permutation ql (insert a p)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap p)), (Permutation ql (q ++ q)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ p)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ p)), (Permutation ql (p ++ q)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ p)), (Permutation ql []), (Permutation p (k :: q)), (Permutation p (k :: ql)), (Permutation p (k :: p)), (Permutation p (a :: q)), (Permutation p (a :: ql)), (Permutation p (a :: p)), (Permutation p (merge q q)), (Permutation p (merge q ql))
(Permutation p (merge q p)), (Permutation p (merge ql q)), (Permutation p (merge ql ql)), (Permutation p (merge ql p)), (Permutation p (merge p q)), (Permutation p (merge p ql)), (Permutation p (merge p p)), (Permutation p (insert k q)), (Permutation p (insert k ql)), (Permutation p (insert k p))
(Permutation p (insert a q)), (Permutation p (insert a ql)), (Permutation p (insert a p)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap p)), (Permutation p (q ++ q)), (Permutation p (q ++ ql)), (Permutation p (q ++ p)), (Permutation p (ql ++ q))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ p)), (Permutation p (p ++ q)), (Permutation p (p ++ ql)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (k :: q) q), (Permutation (k :: q) ql), (Permutation (k :: q) p), (Permutation (k :: q) (k :: ql))
(Permutation (k :: q) (k :: p)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql p))
(Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (maybe_swap q))
(Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ ql))
(Permutation (k :: q) (p ++ p)), (Permutation (k :: q) []), (Permutation (k :: ql) q), (Permutation (k :: ql) ql), (Permutation (k :: ql) p), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: p))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql p)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (insert k q))
(Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ ql))
(Permutation (k :: ql) (q ++ p)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) []), (Permutation (k :: p) q), (Permutation (k :: p) ql)
(Permutation (k :: p) p), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: ql)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge ql q))
(Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p p)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a ql))
(Permutation (k :: p) (insert a p)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ p))
(Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) []), (Permutation (a :: q) q), (Permutation (a :: q) ql), (Permutation (a :: q) p), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: p))
(Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p ql))
(Permutation (a :: q) (merge p p)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) [])
(Permutation (a :: ql) q), (Permutation (a :: ql) ql), (Permutation (a :: ql) p), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (a :: q)), (Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q ql))
(Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k p))
(Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (ql ++ q))
(Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ p)), (Permutation (a :: ql) []), (Permutation (a :: p) q), (Permutation (a :: p) ql), (Permutation (a :: p) p), (Permutation (a :: p) (k :: q))
(Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (maybe_swap q))
(Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ ql))
(Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge q q) q), (Permutation (merge q q) ql), (Permutation (merge q q) p), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: ql))
(Permutation (merge q q) (a :: p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (insert k q))
(Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ ql))
(Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ p)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) []), (Permutation (merge q ql) q), (Permutation (merge q ql) ql)
(Permutation (merge q ql) p), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: ql)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge ql q))
(Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p p)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a ql))
(Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap p)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ p))
(Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) []), (Permutation (merge q p) q), (Permutation (merge q p) ql), (Permutation (merge q p) p), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: p))
(Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p ql))
(Permutation (merge q p) (merge p p)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap p))
(Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) [])
(Permutation (merge ql q) q), (Permutation (merge ql q) ql), (Permutation (merge ql q) p), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: ql)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (merge q q))
(Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql p)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k p))
(Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ p)), (Permutation (merge ql q) (ql ++ q))
(Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) p), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p))
(Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p ql)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a p)), (Permutation (merge ql ql) (maybe_swap q))
(Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ p)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ ql))
(Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) []), (Permutation (merge ql p) q), (Permutation (merge ql p) ql), (Permutation (merge ql p) p), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (a :: q)), (Permutation (merge ql p) (a :: ql))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q ql)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (insert k q))
(Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ ql))
(Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ p)), (Permutation (merge ql p) []), (Permutation (merge p q) q), (Permutation (merge p q) ql)
(Permutation (merge p q) p), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q ql)), (Permutation (merge p q) (merge q p))
(Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a ql))
(Permutation (merge p q) (insert a p)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ p))
(Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ p)), (Permutation (merge p q) []), (Permutation (merge p ql) q), (Permutation (merge p ql) ql), (Permutation (merge p ql) p), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: p))
(Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (merge q q)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge p q))
(Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k p)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap p))
(Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) [])
(Permutation (merge p p) q), (Permutation (merge p p) ql), (Permutation (merge p p) p), (Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (merge q q))
(Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k p))
(Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a p)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (ql ++ q))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ p)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (insert k q) q), (Permutation (insert k q) ql), (Permutation (insert k q) p), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql ql))
(Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p ql)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert a q)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (maybe_swap q))
(Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ p)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ ql))
(Permutation (insert k q) (p ++ p)), (Permutation (insert k q) []), (Permutation (insert k ql) q), (Permutation (insert k ql) ql), (Permutation (insert k ql) p), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge p q)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p p))
(Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap p)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ ql))
(Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) []), (Permutation (insert k p) q), (Permutation (insert k p) ql)
(Permutation (insert k p) p), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q p))
(Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql ql)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a ql))
(Permutation (insert k p) (insert a p)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ p))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) []), (Permutation (insert a q) q), (Permutation (insert a q) ql), (Permutation (insert a q) p), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: p))
(Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql ql)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge p q))
(Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap p))
(Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) [])
(Permutation (insert a ql) q), (Permutation (insert a ql) ql), (Permutation (insert a ql) p), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: ql)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (merge q q))
(Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge ql q)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k ql))
(Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ p)), (Permutation (insert a ql) (ql ++ q))
(Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) []), (Permutation (insert a p) q), (Permutation (insert a p) ql), (Permutation (insert a p) p), (Permutation (insert a p) (k :: q))
(Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: ql)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql ql))
(Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (maybe_swap q))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ ql))
(Permutation (insert a p) (p ++ p)), (Permutation (insert a p) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: ql))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q ql)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p p))
(Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k ql)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ ql))
(Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (merge q q)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q p))
(Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql ql)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (insert k q)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert a q))
(Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ p))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: p))
(Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge p q))
(Permutation (maybe_swap p) (merge p ql)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ p)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) [])
(Permutation (q ++ q) q), (Permutation (q ++ q) ql), (Permutation (q ++ q) p), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: ql)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (merge q q))
(Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge ql q)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k ql))
(Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a ql)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (ql ++ q))
(Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) p), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql ql))
(Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p ql)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert a q)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a p))
(Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap ql)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ p)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ ql))
(Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) []), (Permutation (q ++ p) q), (Permutation (q ++ p) ql), (Permutation (q ++ p) p), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: ql))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q ql)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p p))
(Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k ql)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (q ++ q))
(Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) p), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (merge q q)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q p))
(Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql ql)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (insert k q)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert a q))
(Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ ql)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ p))
(Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) []), (Permutation (ql ++ ql) q), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) p), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: ql)), (Permutation (ql ++ ql) (k :: p))
(Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge ql q)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge p q))
(Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a ql)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap ql))
(Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (q ++ q)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) [])
(Permutation (ql ++ p) q), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) p), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: ql)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (merge q q))
(Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge p q)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k ql))
(Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (maybe_swap q)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ p))
(Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ ql)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) []), (Permutation (p ++ q) q), (Permutation (p ++ q) ql), (Permutation (p ++ q) p), (Permutation (p ++ q) (k :: q))
(Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: ql)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql ql))
(Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a p))
(Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (p ++ ql))
(Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) p), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (a :: q)), (Permutation (p ++ ql) (a :: ql))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q ql)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p p))
(Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k ql)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (q ++ q))
(Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (p ++ q)), (Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) []), (Permutation (p ++ p) q), (Permutation (p ++ p) ql)
(Permutation (p ++ p) p), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: ql)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q p))
(Permutation (p ++ p) (merge ql q)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert a q))
(Permutation (p ++ p) (insert a ql)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ ql))
(Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) []), (Permutation [] q), (Permutation [] ql), (Permutation [] p), (Permutation [] (k :: q)), (Permutation [] (k :: ql)), (Permutation [] (k :: p))
(Permutation [] (a :: q)), (Permutation [] (a :: ql)), (Permutation [] (a :: p)), (Permutation [] (merge q q)), (Permutation [] (merge q ql)), (Permutation [] (merge q p)), (Permutation [] (merge ql q)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql p)), (Permutation [] (merge p q))
(Permutation [] (merge p ql)), (Permutation [] (merge p p)), (Permutation [] (insert k q)), (Permutation [] (insert k ql)), (Permutation [] (insert k p)), (Permutation [] (insert a q)), (Permutation [] (insert a ql)), (Permutation [] (insert a p)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap ql))
(Permutation [] (maybe_swap p)), (Permutation [] (q ++ q)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ p)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ p)), (Permutation [] (p ++ q)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ p))
(In k (k :: q)), (In k (k :: ql)), (In k (k :: p)), (In k (a :: q)), (In k (a :: ql)), (In k (a :: p)), (In k (merge q q)), (In k (merge q ql)), (In k (merge q p)), (In k (merge ql q))
(In k (merge ql ql)), (In k (merge ql p)), (In k (merge p q)), (In k (merge p ql)), (In k (merge p p)), (In k (insert k q)), (In k (insert k ql)), (In k (insert k p)), (In k (insert a q)), (In k (insert a ql))
(In k (insert a p)), (In k (maybe_swap q)), (In k (maybe_swap ql)), (In k (maybe_swap p)), (In k (q ++ q)), (In k (q ++ ql)), (In k (q ++ p)), (In k (ql ++ q)), (In k (ql ++ ql)), (In k (ql ++ p))
(In k (p ++ q)), (In k (p ++ ql)), (In k (p ++ p)), (In a (k :: q)), (In a (k :: ql)), (In a (k :: p)), (In a (a :: q)), (In a (a :: ql)), (In a (a :: p)), (In a (merge q q))
(In a (merge q ql)), (In a (merge q p)), (In a (merge ql q)), (In a (merge ql ql)), (In a (merge ql p)), (In a (merge p q)), (In a (merge p ql)), (In a (merge p p)), (In a (insert k q)), (In a (insert k ql))
(In a (insert k p)), (In a (insert a q)), (In a (insert a ql)), (In a (insert a p)), (In a (maybe_swap q)), (In a (maybe_swap ql)), (In a (maybe_swap p)), (In a (q ++ q)), (In a (q ++ ql)), (In a (q ++ p))
(In a (ql ++ q)), (In a (ql ++ ql)), (In a (ql ++ p)), (In a (p ++ q)), (In a (p ++ ql)), (In a (p ++ p)), (In (length q) q), (In (length q) ql), (In (length q) p), (In (length q) (k :: q))
(In (length q) (k :: ql)), (In (length q) (k :: p)), (In (length q) (a :: q)), (In (length q) (a :: ql)), (In (length q) (a :: p)), (In (length q) (merge q q)), (In (length q) (merge q ql)), (In (length q) (merge q p)), (In (length q) (merge ql q)), (In (length q) (merge ql ql))
(In (length q) (merge ql p)), (In (length q) (merge p q)), (In (length q) (merge p ql)), (In (length q) (merge p p)), (In (length q) (insert k q)), (In (length q) (insert k ql)), (In (length q) (insert k p)), (In (length q) (insert a q)), (In (length q) (insert a ql)), (In (length q) (insert a p))
(In (length q) (maybe_swap q)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap p)), (In (length q) (q ++ q)), (In (length q) (q ++ ql)), (In (length q) (q ++ p)), (In (length q) (ql ++ q)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ p)), (In (length q) (p ++ q))
(In (length q) (p ++ ql)), (In (length q) (p ++ p)), (In (length ql) q), (In (length ql) ql), (In (length ql) p), (In (length ql) (k :: q)), (In (length ql) (k :: ql)), (In (length ql) (k :: p)), (In (length ql) (a :: q)), (In (length ql) (a :: ql))
(In (length ql) (a :: p)), (In (length ql) (merge q q)), (In (length ql) (merge q ql)), (In (length ql) (merge q p)), (In (length ql) (merge ql q)), (In (length ql) (merge ql ql)), (In (length ql) (merge ql p)), (In (length ql) (merge p q)), (In (length ql) (merge p ql)), (In (length ql) (merge p p))
(In (length ql) (insert k q)), (In (length ql) (insert k ql)), (In (length ql) (insert k p)), (In (length ql) (insert a q)), (In (length ql) (insert a ql)), (In (length ql) (insert a p)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap p)), (In (length ql) (q ++ q))
(In (length ql) (q ++ ql)), (In (length ql) (q ++ p)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ p)), (In (length ql) (p ++ q)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ p)), (In (length p) q), (In (length p) ql)
(In (length p) p), (In (length p) (k :: q)), (In (length p) (k :: ql)), (In (length p) (k :: p)), (In (length p) (a :: q)), (In (length p) (a :: ql)), (In (length p) (a :: p)), (In (length p) (merge q q)), (In (length p) (merge q ql)), (In (length p) (merge q p))
(In (length p) (merge ql q)), (In (length p) (merge ql ql)), (In (length p) (merge ql p)), (In (length p) (merge p q)), (In (length p) (merge p ql)), (In (length p) (merge p p)), (In (length p) (insert k q)), (In (length p) (insert k ql)), (In (length p) (insert k p)), (In (length p) (insert a q))
(In (length p) (insert a ql)), (In (length p) (insert a p)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap ql)), (In (length p) (maybe_swap p)), (In (length p) (q ++ q)), (In (length p) (q ++ ql)), (In (length p) (q ++ p)), (In (length p) (ql ++ q)), (In (length p) (ql ++ ql))
(In (length p) (ql ++ p)), (In (length p) (p ++ q)), (In (length p) (p ++ ql)), (In (length p) (p ++ p)), (k < length q), (k < length ql), (k < length p), (a < length q), (a < length ql), (a < length p)
(length q < k), (length q < a), (length q < length ql), (length q < length p), (length ql < k), (length ql < a), (length ql < length q), (length ql < length p), (length p < k), (length p < a)
(length p < length q), (length p < length ql), (k <= length q), (k <= length ql), (k <= length p), (a <= length q), (a <= length ql), (a <= length p), (length q <= k), (length q <= a)
(length q <= length ql), (length q <= length p), (length ql <= k), (length ql <= a), (length ql <= length q), (length ql <= length p), (length p <= k), (length p <= a), (length p <= length q), (length p <= length ql)
(~ Abs q q), (~ Abs q ql), (~ Abs q p), (~ Abs ql q), (~ Abs ql ql), (~ Abs ql p), (~ Abs p q), (~ Abs p ql), (~ Abs p p), (~ priq q)
(~ priq ql), (~ priq p), (~ Permutation q q), (~ Permutation q ql), (~ Permutation q p), (~ Permutation ql q), (~ Permutation ql ql), (~ Permutation ql p), (~ Permutation p q), (~ Permutation p ql)
(~ Permutation p p), (~ In k q), (~ In k ql), (~ In k p), (~ In a q), (~ In a ql), (~ In a p), (~ k < k), (~ k < a), (~ a < k)
(~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (q <> q), (q <> ql), (q <> p), (ql <> q), (ql <> ql)
(ql <> p), (p <> q), (p <> ql), (p <> p), (k <> k), (k <> a), (a <> k), (a <> a), (None = Some q), (None = Some ql)
(None = Some p), (k :: q = q), (k :: q = ql), (k :: q = p), (k :: q = merge q q), (k :: q = merge q ql), (k :: q = merge q p), (k :: q = merge ql q), (k :: q = merge ql ql), (k :: q = merge ql p)
(k :: q = merge p q), (k :: q = merge p ql), (k :: q = merge p p), (k :: q = insert k q), (k :: q = insert k ql), (k :: q = insert k p), (k :: q = insert a q), (k :: q = insert a ql), (k :: q = insert a p), (k :: q = maybe_swap q)
(k :: q = maybe_swap ql), (k :: q = maybe_swap p), (k :: q = q ++ q), (k :: q = q ++ ql), (k :: q = q ++ p), (k :: q = ql ++ q), (k :: q = ql ++ ql), (k :: q = ql ++ p), (k :: q = p ++ q), (k :: q = p ++ ql)
(k :: q = p ++ p), (k :: q = []), (k :: ql = q), (k :: ql = ql), (k :: ql = p), (k :: ql = merge q q), (k :: ql = merge q ql), (k :: ql = merge q p), (k :: ql = merge ql q), (k :: ql = merge ql ql)
(k :: ql = merge ql p), (k :: ql = merge p q), (k :: ql = merge p ql), (k :: ql = merge p p), (k :: ql = insert k q), (k :: ql = insert k ql), (k :: ql = insert k p), (k :: ql = insert a q), (k :: ql = insert a ql), (k :: ql = insert a p)
(k :: ql = maybe_swap q), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap p), (k :: ql = q ++ q), (k :: ql = q ++ ql), (k :: ql = q ++ p), (k :: ql = ql ++ q), (k :: ql = ql ++ ql), (k :: ql = ql ++ p), (k :: ql = p ++ q)
(k :: ql = p ++ ql), (k :: ql = p ++ p), (k :: ql = []), (k :: p = q), (k :: p = ql), (k :: p = p), (k :: p = merge q q), (k :: p = merge q ql), (k :: p = merge q p), (k :: p = merge ql q)
(k :: p = merge ql ql), (k :: p = merge ql p), (k :: p = merge p q), (k :: p = merge p ql), (k :: p = merge p p), (k :: p = insert k q), (k :: p = insert k ql), (k :: p = insert k p), (k :: p = insert a q), (k :: p = insert a ql)
(k :: p = insert a p), (k :: p = maybe_swap q), (k :: p = maybe_swap ql), (k :: p = maybe_swap p), (k :: p = q ++ q), (k :: p = q ++ ql), (k :: p = q ++ p), (k :: p = ql ++ q), (k :: p = ql ++ ql), (k :: p = ql ++ p)
(k :: p = p ++ q), (k :: p = p ++ ql), (k :: p = p ++ p), (k :: p = []), (a :: q = q), (a :: q = ql), (a :: q = p), (a :: q = merge q q), (a :: q = merge q ql), (a :: q = merge q p)
(a :: q = merge ql q), (a :: q = merge ql ql), (a :: q = merge ql p), (a :: q = merge p q), (a :: q = merge p ql), (a :: q = merge p p), (a :: q = insert k q), (a :: q = insert k ql), (a :: q = insert k p), (a :: q = insert a q)
(a :: q = insert a ql), (a :: q = insert a p), (a :: q = maybe_swap q), (a :: q = maybe_swap ql), (a :: q = maybe_swap p), (a :: q = q ++ q), (a :: q = q ++ ql), (a :: q = q ++ p), (a :: q = ql ++ q), (a :: q = ql ++ ql)
(a :: q = ql ++ p), (a :: q = p ++ q), (a :: q = p ++ ql), (a :: q = p ++ p), (a :: q = []), (a :: ql = q), (a :: ql = ql), (a :: ql = p), (a :: ql = merge q q), (a :: ql = merge q ql)
(a :: ql = merge q p), (a :: ql = merge ql q), (a :: ql = merge ql ql), (a :: ql = merge ql p), (a :: ql = merge p q), (a :: ql = merge p ql), (a :: ql = merge p p), (a :: ql = insert k q), (a :: ql = insert k ql), (a :: ql = insert k p)
(a :: ql = insert a q), (a :: ql = insert a ql), (a :: ql = insert a p), (a :: ql = maybe_swap q), (a :: ql = maybe_swap ql), (a :: ql = maybe_swap p), (a :: ql = q ++ q), (a :: ql = q ++ ql), (a :: ql = q ++ p), (a :: ql = ql ++ q)
(a :: ql = ql ++ ql), (a :: ql = ql ++ p), (a :: ql = p ++ q), (a :: ql = p ++ ql), (a :: ql = p ++ p), (a :: ql = []), (a :: p = q), (a :: p = ql), (a :: p = p), (a :: p = merge q q)
(a :: p = merge q ql), (a :: p = merge q p), (a :: p = merge ql q), (a :: p = merge ql ql), (a :: p = merge ql p), (a :: p = merge p q), (a :: p = merge p ql), (a :: p = merge p p), (a :: p = insert k q), (a :: p = insert k ql)
(a :: p = insert k p), (a :: p = insert a q), (a :: p = insert a ql), (a :: p = insert a p), (a :: p = maybe_swap q), (a :: p = maybe_swap ql), (a :: p = maybe_swap p), (a :: p = q ++ q), (a :: p = q ++ ql), (a :: p = q ++ p)
(a :: p = ql ++ q), (a :: p = ql ++ ql), (a :: p = ql ++ p), (a :: p = p ++ q), (a :: p = p ++ ql), (a :: p = p ++ p), (a :: p = []), (merge q q = q), (merge q q = ql), (merge q q = p)
(merge q q = insert k q), (merge q q = insert k ql), (merge q q = insert k p), (merge q q = insert a q), (merge q q = insert a ql), (merge q q = insert a p), (merge q q = maybe_swap q), (merge q q = maybe_swap ql), (merge q q = maybe_swap p), (merge q q = q ++ q)
(merge q q = q ++ ql), (merge q q = q ++ p), (merge q q = ql ++ q), (merge q q = ql ++ ql), (merge q q = ql ++ p), (merge q q = p ++ q), (merge q q = p ++ ql), (merge q q = p ++ p), (merge q ql = q), (merge q ql = ql)
(merge q ql = p), (merge q ql = insert k q), (merge q ql = insert k ql), (merge q ql = insert k p), (merge q ql = insert a q), (merge q ql = insert a ql), (merge q ql = insert a p), (merge q ql = maybe_swap q), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap p)
(merge q ql = q ++ q), (merge q ql = q ++ ql), (merge q ql = q ++ p), (merge q ql = ql ++ q), (merge q ql = ql ++ ql), (merge q ql = ql ++ p), (merge q ql = p ++ q), (merge q ql = p ++ ql), (merge q ql = p ++ p), (merge q p = q)
(merge q p = ql), (merge q p = p), (merge q p = insert k q), (merge q p = insert k ql), (merge q p = insert k p), (merge q p = insert a q), (merge q p = insert a ql), (merge q p = insert a p), (merge q p = maybe_swap q), (merge q p = maybe_swap ql)
(merge q p = maybe_swap p), (merge q p = q ++ q), (merge q p = q ++ ql), (merge q p = q ++ p), (merge q p = ql ++ q), (merge q p = ql ++ ql), (merge q p = ql ++ p), (merge q p = p ++ q), (merge q p = p ++ ql), (merge q p = p ++ p)
(merge ql q = q), (merge ql q = ql), (merge ql q = p), (merge ql q = insert k q), (merge ql q = insert k ql), (merge ql q = insert k p), (merge ql q = insert a q), (merge ql q = insert a ql), (merge ql q = insert a p), (merge ql q = maybe_swap q)
(merge ql q = maybe_swap ql), (merge ql q = maybe_swap p), (merge ql q = q ++ q), (merge ql q = q ++ ql), (merge ql q = q ++ p), (merge ql q = ql ++ q), (merge ql q = ql ++ ql), (merge ql q = ql ++ p), (merge ql q = p ++ q), (merge ql q = p ++ ql)
(merge ql q = p ++ p), (merge ql ql = q), (merge ql ql = ql), (merge ql ql = p), (merge ql ql = insert k q), (merge ql ql = insert k ql), (merge ql ql = insert k p), (merge ql ql = insert a q), (merge ql ql = insert a ql), (merge ql ql = insert a p)
(merge ql ql = maybe_swap q), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap p), (merge ql ql = q ++ q), (merge ql ql = q ++ ql), (merge ql ql = q ++ p), (merge ql ql = ql ++ q), (merge ql ql = ql ++ ql), (merge ql ql = ql ++ p), (merge ql ql = p ++ q)
(merge ql ql = p ++ ql), (merge ql ql = p ++ p), (merge ql p = q), (merge ql p = ql), (merge ql p = p), (merge ql p = insert k q), (merge ql p = insert k ql), (merge ql p = insert k p), (merge ql p = insert a q), (merge ql p = insert a ql)
(merge ql p = insert a p), (merge ql p = maybe_swap q), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap p), (merge ql p = q ++ q), (merge ql p = q ++ ql), (merge ql p = q ++ p), (merge ql p = ql ++ q), (merge ql p = ql ++ ql), (merge ql p = ql ++ p)
(merge ql p = p ++ q), (merge ql p = p ++ ql), (merge ql p = p ++ p), (merge p q = q), (merge p q = ql), (merge p q = p), (merge p q = insert k q), (merge p q = insert k ql), (merge p q = insert k p), (merge p q = insert a q)
(merge p q = insert a ql), (merge p q = insert a p), (merge p q = maybe_swap q), (merge p q = maybe_swap ql), (merge p q = maybe_swap p), (merge p q = q ++ q), (merge p q = q ++ ql), (merge p q = q ++ p), (merge p q = ql ++ q), (merge p q = ql ++ ql)
(merge p q = ql ++ p), (merge p q = p ++ q), (merge p q = p ++ ql), (merge p q = p ++ p), (merge p ql = q), (merge p ql = ql), (merge p ql = p), (merge p ql = insert k q), (merge p ql = insert k ql), (merge p ql = insert k p)
(merge p ql = insert a q), (merge p ql = insert a ql), (merge p ql = insert a p), (merge p ql = maybe_swap q), (merge p ql = maybe_swap ql), (merge p ql = maybe_swap p), (merge p ql = q ++ q), (merge p ql = q ++ ql), (merge p ql = q ++ p), (merge p ql = ql ++ q)
(merge p ql = ql ++ ql), (merge p ql = ql ++ p), (merge p ql = p ++ q), (merge p ql = p ++ ql), (merge p ql = p ++ p), (merge p p = q), (merge p p = ql), (merge p p = p), (merge p p = insert k q), (merge p p = insert k ql)
(merge p p = insert k p), (merge p p = insert a q), (merge p p = insert a ql), (merge p p = insert a p), (merge p p = maybe_swap q), (merge p p = maybe_swap ql), (merge p p = maybe_swap p), (merge p p = q ++ q), (merge p p = q ++ ql), (merge p p = q ++ p)
(merge p p = ql ++ q), (merge p p = ql ++ ql), (merge p p = ql ++ p), (merge p p = p ++ q), (merge p p = p ++ ql), (merge p p = p ++ p), (insert k q = q), (insert k q = ql), (insert k q = p), (insert k q = q ++ q)
(insert k q = q ++ ql), (insert k q = q ++ p), (insert k q = ql ++ q), (insert k q = ql ++ ql), (insert k q = ql ++ p), (insert k q = p ++ q), (insert k q = p ++ ql), (insert k q = p ++ p), (insert k ql = q), (insert k ql = ql)
(insert k ql = p), (insert k ql = q ++ q), (insert k ql = q ++ ql), (insert k ql = q ++ p), (insert k ql = ql ++ q), (insert k ql = ql ++ ql), (insert k ql = ql ++ p), (insert k ql = p ++ q), (insert k ql = p ++ ql), (insert k ql = p ++ p)
(insert k p = q), (insert k p = ql), (insert k p = p), (insert k p = q ++ q), (insert k p = q ++ ql), (insert k p = q ++ p), (insert k p = ql ++ q), (insert k p = ql ++ ql), (insert k p = ql ++ p), (insert k p = p ++ q)
(insert k p = p ++ ql), (insert k p = p ++ p), (insert a q = q), (insert a q = ql), (insert a q = p), (insert a q = q ++ q), (insert a q = q ++ ql), (insert a q = q ++ p), (insert a q = ql ++ q), (insert a q = ql ++ ql)
(insert a q = ql ++ p), (insert a q = p ++ q), (insert a q = p ++ ql), (insert a q = p ++ p), (insert a ql = q), (insert a ql = ql), (insert a ql = p), (insert a ql = q ++ q), (insert a ql = q ++ ql), (insert a ql = q ++ p)
(insert a ql = ql ++ q), (insert a ql = ql ++ ql), (insert a ql = ql ++ p), (insert a ql = p ++ q), (insert a ql = p ++ ql), (insert a ql = p ++ p), (insert a p = q), (insert a p = ql), (insert a p = p), (insert a p = q ++ q)
(insert a p = q ++ ql), (insert a p = q ++ p), (insert a p = ql ++ q), (insert a p = ql ++ ql), (insert a p = ql ++ p), (insert a p = p ++ q), (insert a p = p ++ ql), (insert a p = p ++ p), (maybe_swap q = q), (maybe_swap q = ql)
(maybe_swap q = p), (maybe_swap q = insert k q), (maybe_swap q = insert k ql), (maybe_swap q = insert k p), (maybe_swap q = insert a q), (maybe_swap q = insert a ql), (maybe_swap q = insert a p), (maybe_swap q = q ++ q), (maybe_swap q = q ++ ql), (maybe_swap q = q ++ p)
(maybe_swap q = ql ++ q), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ p), (maybe_swap q = p ++ q), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ p), (maybe_swap ql = q), (maybe_swap ql = ql), (maybe_swap ql = p), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k ql), (maybe_swap ql = insert k p), (maybe_swap ql = insert a q), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a p), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ p), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ ql)
(maybe_swap ql = ql ++ p), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ ql), (maybe_swap ql = p ++ p), (maybe_swap p = q), (maybe_swap p = ql), (maybe_swap p = p), (maybe_swap p = insert k q), (maybe_swap p = insert k ql), (maybe_swap p = insert k p)
(maybe_swap p = insert a q), (maybe_swap p = insert a ql), (maybe_swap p = insert a p), (maybe_swap p = q ++ q), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ p), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ p), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ ql), (maybe_swap p = p ++ p), (q ++ q = q), (q ++ q = ql), (q ++ q = p), (q ++ ql = q), (q ++ ql = ql), (q ++ ql = p), (q ++ p = q), (q ++ p = ql)
(q ++ p = p), (ql ++ q = q), (ql ++ q = ql), (ql ++ q = p), (ql ++ ql = q), (ql ++ ql = ql), (ql ++ ql = p), (ql ++ p = q), (ql ++ p = ql), (ql ++ p = p)
(p ++ q = q), (p ++ q = ql), (p ++ q = p), (p ++ ql = q), (p ++ ql = ql), (p ++ ql = p), (p ++ p = q), (p ++ p = ql), (p ++ p = p), ([] = q)
([] = ql), ([] = p), ([] = merge q q), ([] = merge q ql), ([] = merge q p), ([] = merge ql q), ([] = merge ql ql), ([] = merge ql p), ([] = merge p q), ([] = merge p ql)
([] = merge p p), ([] = insert k q), ([] = insert k ql), ([] = insert k p), ([] = insert a q), ([] = insert a ql), ([] = insert a p), ([] = maybe_swap q), ([] = maybe_swap ql), ([] = maybe_swap p)
([] = q ++ q), ([] = q ++ ql), ([] = q ++ p), ([] = ql ++ q), ([] = ql ++ ql), ([] = ql ++ p), ([] = p ++ q), ([] = p ++ ql), ([] = p ++ p), (None = Some k)
(None = Some a), ((k, q) = select k q), ((k, q) = select k ql), ((k, q) = select k p), ((k, q) = select a q), ((k, q) = select a ql), ((k, q) = select a p), ((k, ql) = select k q), ((k, ql) = select k ql), ((k, ql) = select k p)
((k, ql) = select a q), ((k, ql) = select a ql), ((k, ql) = select a p), ((k, p) = select k q), ((k, p) = select k ql), ((k, p) = select k p), ((k, p) = select a q), ((k, p) = select a ql), ((k, p) = select a p), ((a, q) = select k q)
((a, q) = select k ql), ((a, q) = select k p), ((a, q) = select a q), ((a, q) = select a ql), ((a, q) = select a p), ((a, ql) = select k q), ((a, ql) = select k ql), ((a, ql) = select k p), ((a, ql) = select a q), ((a, ql) = select a ql)
((a, ql) = select a p), ((a, p) = select k q), ((a, p) = select k ql), ((a, p) = select k p), ((a, p) = select a q), ((a, p) = select a ql), ((a, p) = select a p), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k))
((k >? k) = (a >=? a)), ((k >? a) = (k >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (a >=? a)), ((a >? k) = (k >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k))
((a >? a) = (k >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (a >=? a)), (length q = k), (length q = a), (length ql = k), (length ql = a), (length p = k), (length p = a)

Label: 2 (2)
(Abs q q), (Abs q p), (Abs q ql), (Abs q gv0), (Abs p q), (Abs p p), (Abs p ql), (Abs p gv0), (Abs ql q), (Abs ql p)
(Abs ql ql), (Abs ql gv0), (Abs gv0 q), (Abs gv0 p), (Abs gv0 ql), (Abs gv0 gv0), (priq q), (priq p), (priq ql), (priq gv0)
(Permutation q q), (Permutation q p), (Permutation q ql), (Permutation q gv0), (Permutation p q), (Permutation p p), (Permutation p ql), (Permutation p gv0), (Permutation ql q), (Permutation ql p)
(Permutation ql ql), (Permutation ql gv0), (Permutation gv0 q), (Permutation gv0 p), (Permutation gv0 ql), (Permutation gv0 gv0), (In a q), (In a p), (In a ql), (In a gv0)
(In k q), (In k p), (In k ql), (In k gv0), (a < a), (a < k), (k < a), (k < k), (a <= a), (a <= k)
(k <= a), (k <= k), (a = a), (a = k), (k = a), (k = k), (q = q), (q = p), (q = ql), (q = gv0)
(p = q), (p = p), (p = ql), (p = gv0), (ql = q), (ql = p), (ql = ql), (ql = gv0), (gv0 = q), (gv0 = p)
(gv0 = ql), (gv0 = gv0), (false = (a >? a)), (false = (a >? k)), (false = (k >? a)), (false = (k >? k)), (false = (a >=? a)), (false = (a >=? k)), (false = (k >=? a)), (false = (k >=? k))
(true = (a >? a)), (true = (a >? k)), (true = (k >? a)), (true = (k >? k)), (true = (a >=? a)), (true = (a >=? k)), (true = (k >=? a)), (true = (k >=? k)), (Abs q (a :: q)), (Abs q (a :: p))
(Abs q (a :: ql)), (Abs q (a :: gv0)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (k :: ql)), (Abs q (k :: gv0)), (Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge q ql)), (Abs q (merge q gv0))
(Abs q (merge p q)), (Abs q (merge p p)), (Abs q (merge p ql)), (Abs q (merge p gv0)), (Abs q (merge ql q)), (Abs q (merge ql p)), (Abs q (merge ql ql)), (Abs q (merge ql gv0)), (Abs q (merge gv0 q)), (Abs q (merge gv0 p))
(Abs q (merge gv0 ql)), (Abs q (merge gv0 gv0)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (insert a ql)), (Abs q (insert a gv0)), (Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert k ql)), (Abs q (insert k gv0))
(Abs q (maybe_swap q)), (Abs q (maybe_swap p)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap gv0)), (Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (q ++ ql)), (Abs q (q ++ gv0)), (Abs q (p ++ q)), (Abs q (p ++ p))
(Abs q (p ++ ql)), (Abs q (p ++ gv0)), (Abs q (ql ++ q)), (Abs q (ql ++ p)), (Abs q (ql ++ ql)), (Abs q (ql ++ gv0)), (Abs q (gv0 ++ q)), (Abs q (gv0 ++ p)), (Abs q (gv0 ++ ql)), (Abs q (gv0 ++ gv0))
(Abs q []), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (a :: ql)), (Abs p (a :: gv0)), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (k :: ql)), (Abs p (k :: gv0)), (Abs p (merge q q))
(Abs p (merge q p)), (Abs p (merge q ql)), (Abs p (merge q gv0)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (merge p ql)), (Abs p (merge p gv0)), (Abs p (merge ql q)), (Abs p (merge ql p)), (Abs p (merge ql ql))
(Abs p (merge ql gv0)), (Abs p (merge gv0 q)), (Abs p (merge gv0 p)), (Abs p (merge gv0 ql)), (Abs p (merge gv0 gv0)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (insert a ql)), (Abs p (insert a gv0)), (Abs p (insert k q))
(Abs p (insert k p)), (Abs p (insert k ql)), (Abs p (insert k gv0)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (maybe_swap ql)), (Abs p (maybe_swap gv0)), (Abs p (q ++ q)), (Abs p (q ++ p)), (Abs p (q ++ ql))
(Abs p (q ++ gv0)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p (p ++ ql)), (Abs p (p ++ gv0)), (Abs p (ql ++ q)), (Abs p (ql ++ p)), (Abs p (ql ++ ql)), (Abs p (ql ++ gv0)), (Abs p (gv0 ++ q))
(Abs p (gv0 ++ p)), (Abs p (gv0 ++ ql)), (Abs p (gv0 ++ gv0)), (Abs p []), (Abs ql (a :: q)), (Abs ql (a :: p)), (Abs ql (a :: ql)), (Abs ql (a :: gv0)), (Abs ql (k :: q)), (Abs ql (k :: p))
(Abs ql (k :: ql)), (Abs ql (k :: gv0)), (Abs ql (merge q q)), (Abs ql (merge q p)), (Abs ql (merge q ql)), (Abs ql (merge q gv0)), (Abs ql (merge p q)), (Abs ql (merge p p)), (Abs ql (merge p ql)), (Abs ql (merge p gv0))
(Abs ql (merge ql q)), (Abs ql (merge ql p)), (Abs ql (merge ql ql)), (Abs ql (merge ql gv0)), (Abs ql (merge gv0 q)), (Abs ql (merge gv0 p)), (Abs ql (merge gv0 ql)), (Abs ql (merge gv0 gv0)), (Abs ql (insert a q)), (Abs ql (insert a p))
(Abs ql (insert a ql)), (Abs ql (insert a gv0)), (Abs ql (insert k q)), (Abs ql (insert k p)), (Abs ql (insert k ql)), (Abs ql (insert k gv0)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap p)), (Abs ql (maybe_swap ql)), (Abs ql (maybe_swap gv0))
(Abs ql (q ++ q)), (Abs ql (q ++ p)), (Abs ql (q ++ ql)), (Abs ql (q ++ gv0)), (Abs ql (p ++ q)), (Abs ql (p ++ p)), (Abs ql (p ++ ql)), (Abs ql (p ++ gv0)), (Abs ql (ql ++ q)), (Abs ql (ql ++ p))
(Abs ql (ql ++ ql)), (Abs ql (ql ++ gv0)), (Abs ql (gv0 ++ q)), (Abs ql (gv0 ++ p)), (Abs ql (gv0 ++ ql)), (Abs ql (gv0 ++ gv0)), (Abs ql []), (Abs gv0 (a :: q)), (Abs gv0 (a :: p)), (Abs gv0 (a :: ql))
(Abs gv0 (a :: gv0)), (Abs gv0 (k :: q)), (Abs gv0 (k :: p)), (Abs gv0 (k :: ql)), (Abs gv0 (k :: gv0)), (Abs gv0 (merge q q)), (Abs gv0 (merge q p)), (Abs gv0 (merge q ql)), (Abs gv0 (merge q gv0)), (Abs gv0 (merge p q))
(Abs gv0 (merge p p)), (Abs gv0 (merge p ql)), (Abs gv0 (merge p gv0)), (Abs gv0 (merge ql q)), (Abs gv0 (merge ql p)), (Abs gv0 (merge ql ql)), (Abs gv0 (merge ql gv0)), (Abs gv0 (merge gv0 q)), (Abs gv0 (merge gv0 p)), (Abs gv0 (merge gv0 ql))
(Abs gv0 (merge gv0 gv0)), (Abs gv0 (insert a q)), (Abs gv0 (insert a p)), (Abs gv0 (insert a ql)), (Abs gv0 (insert a gv0)), (Abs gv0 (insert k q)), (Abs gv0 (insert k p)), (Abs gv0 (insert k ql)), (Abs gv0 (insert k gv0)), (Abs gv0 (maybe_swap q))
(Abs gv0 (maybe_swap p)), (Abs gv0 (maybe_swap ql)), (Abs gv0 (maybe_swap gv0)), (Abs gv0 (q ++ q)), (Abs gv0 (q ++ p)), (Abs gv0 (q ++ ql)), (Abs gv0 (q ++ gv0)), (Abs gv0 (p ++ q)), (Abs gv0 (p ++ p)), (Abs gv0 (p ++ ql))
(Abs gv0 (p ++ gv0)), (Abs gv0 (ql ++ q)), (Abs gv0 (ql ++ p)), (Abs gv0 (ql ++ ql)), (Abs gv0 (ql ++ gv0)), (Abs gv0 (gv0 ++ q)), (Abs gv0 (gv0 ++ p)), (Abs gv0 (gv0 ++ ql)), (Abs gv0 (gv0 ++ gv0)), (Abs gv0 [])
(Abs (a :: q) q), (Abs (a :: q) p), (Abs (a :: q) ql), (Abs (a :: q) gv0), (Abs (a :: q) (a :: p)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: gv0)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: ql))
(Abs (a :: q) (k :: gv0)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q gv0)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p gv0)), (Abs (a :: q) (merge ql q))
(Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql gv0)), (Abs (a :: q) (merge gv0 q)), (Abs (a :: q) (merge gv0 p)), (Abs (a :: q) (merge gv0 ql)), (Abs (a :: q) (merge gv0 gv0)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (insert a ql))
(Abs (a :: q) (insert a gv0)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k gv0)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap gv0)), (Abs (a :: q) (q ++ q))
(Abs (a :: q) (q ++ p)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ gv0)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ gv0)), (Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (ql ++ ql))
(Abs (a :: q) (ql ++ gv0)), (Abs (a :: q) (gv0 ++ q)), (Abs (a :: q) (gv0 ++ p)), (Abs (a :: q) (gv0 ++ ql)), (Abs (a :: q) (gv0 ++ gv0)), (Abs (a :: q) []), (Abs (a :: p) q), (Abs (a :: p) p), (Abs (a :: p) ql), (Abs (a :: p) gv0)
(Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: gv0)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: gv0)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge q ql))
(Abs (a :: p) (merge q gv0)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p gv0)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql gv0)), (Abs (a :: p) (merge gv0 q))
(Abs (a :: p) (merge gv0 p)), (Abs (a :: p) (merge gv0 ql)), (Abs (a :: p) (merge gv0 gv0)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a gv0)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert k ql))
(Abs (a :: p) (insert k gv0)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap gv0)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ gv0)), (Abs (a :: p) (p ++ q))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ gv0)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ gv0)), (Abs (a :: p) (gv0 ++ q)), (Abs (a :: p) (gv0 ++ p)), (Abs (a :: p) (gv0 ++ ql))
(Abs (a :: p) (gv0 ++ gv0)), (Abs (a :: p) []), (Abs (a :: ql) q), (Abs (a :: ql) p), (Abs (a :: ql) ql), (Abs (a :: ql) gv0), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (a :: gv0)), (Abs (a :: ql) (k :: q))
(Abs (a :: ql) (k :: p)), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: gv0)), (Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge q ql)), (Abs (a :: ql) (merge q gv0)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p p)), (Abs (a :: ql) (merge p ql))
(Abs (a :: ql) (merge p gv0)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql gv0)), (Abs (a :: ql) (merge gv0 q)), (Abs (a :: ql) (merge gv0 p)), (Abs (a :: ql) (merge gv0 ql)), (Abs (a :: ql) (merge gv0 gv0)), (Abs (a :: ql) (insert a q))
(Abs (a :: ql) (insert a p)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a gv0)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k p)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k gv0)), (Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (maybe_swap ql))
(Abs (a :: ql) (maybe_swap gv0)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ gv0)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ gv0)), (Abs (a :: ql) (ql ++ q))
(Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ gv0)), (Abs (a :: ql) (gv0 ++ q)), (Abs (a :: ql) (gv0 ++ p)), (Abs (a :: ql) (gv0 ++ ql)), (Abs (a :: ql) (gv0 ++ gv0)), (Abs (a :: ql) []), (Abs (a :: gv0) q), (Abs (a :: gv0) p)
(Abs (a :: gv0) ql), (Abs (a :: gv0) gv0), (Abs (a :: gv0) (a :: q)), (Abs (a :: gv0) (a :: p)), (Abs (a :: gv0) (a :: ql)), (Abs (a :: gv0) (k :: q)), (Abs (a :: gv0) (k :: p)), (Abs (a :: gv0) (k :: ql)), (Abs (a :: gv0) (k :: gv0)), (Abs (a :: gv0) (merge q q))
(Abs (a :: gv0) (merge q p)), (Abs (a :: gv0) (merge q ql)), (Abs (a :: gv0) (merge q gv0)), (Abs (a :: gv0) (merge p q)), (Abs (a :: gv0) (merge p p)), (Abs (a :: gv0) (merge p ql)), (Abs (a :: gv0) (merge p gv0)), (Abs (a :: gv0) (merge ql q)), (Abs (a :: gv0) (merge ql p)), (Abs (a :: gv0) (merge ql ql))
(Abs (a :: gv0) (merge ql gv0)), (Abs (a :: gv0) (merge gv0 q)), (Abs (a :: gv0) (merge gv0 p)), (Abs (a :: gv0) (merge gv0 ql)), (Abs (a :: gv0) (merge gv0 gv0)), (Abs (a :: gv0) (insert a q)), (Abs (a :: gv0) (insert a p)), (Abs (a :: gv0) (insert a ql)), (Abs (a :: gv0) (insert a gv0)), (Abs (a :: gv0) (insert k q))
(Abs (a :: gv0) (insert k p)), (Abs (a :: gv0) (insert k ql)), (Abs (a :: gv0) (insert k gv0)), (Abs (a :: gv0) (maybe_swap q)), (Abs (a :: gv0) (maybe_swap p)), (Abs (a :: gv0) (maybe_swap ql)), (Abs (a :: gv0) (maybe_swap gv0)), (Abs (a :: gv0) (q ++ q)), (Abs (a :: gv0) (q ++ p)), (Abs (a :: gv0) (q ++ ql))
(Abs (a :: gv0) (q ++ gv0)), (Abs (a :: gv0) (p ++ q)), (Abs (a :: gv0) (p ++ p)), (Abs (a :: gv0) (p ++ ql)), (Abs (a :: gv0) (p ++ gv0)), (Abs (a :: gv0) (ql ++ q)), (Abs (a :: gv0) (ql ++ p)), (Abs (a :: gv0) (ql ++ ql)), (Abs (a :: gv0) (ql ++ gv0)), (Abs (a :: gv0) (gv0 ++ q))
(Abs (a :: gv0) (gv0 ++ p)), (Abs (a :: gv0) (gv0 ++ ql)), (Abs (a :: gv0) (gv0 ++ gv0)), (Abs (a :: gv0) []), (Abs (k :: q) q), (Abs (k :: q) p), (Abs (k :: q) ql), (Abs (k :: q) gv0), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p))
(Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: gv0)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: gv0)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q gv0)), (Abs (k :: q) (merge p q))
(Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p ql)), (Abs (k :: q) (merge p gv0)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql gv0)), (Abs (k :: q) (merge gv0 q)), (Abs (k :: q) (merge gv0 p)), (Abs (k :: q) (merge gv0 ql))
(Abs (k :: q) (merge gv0 gv0)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a gv0)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k gv0)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap gv0)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (q ++ ql)), (Abs (k :: q) (q ++ gv0)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ ql))
(Abs (k :: q) (p ++ gv0)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ gv0)), (Abs (k :: q) (gv0 ++ q)), (Abs (k :: q) (gv0 ++ p)), (Abs (k :: q) (gv0 ++ ql)), (Abs (k :: q) (gv0 ++ gv0)), (Abs (k :: q) [])
(Abs (k :: p) q), (Abs (k :: p) p), (Abs (k :: p) ql), (Abs (k :: p) gv0), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: gv0)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: ql))
(Abs (k :: p) (k :: gv0)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q gv0)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p gv0)), (Abs (k :: p) (merge ql q))
(Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge ql ql)), (Abs (k :: p) (merge ql gv0)), (Abs (k :: p) (merge gv0 q)), (Abs (k :: p) (merge gv0 p)), (Abs (k :: p) (merge gv0 ql)), (Abs (k :: p) (merge gv0 gv0)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a gv0)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k gv0)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap gv0)), (Abs (k :: p) (q ++ q))
(Abs (k :: p) (q ++ p)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ gv0)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ ql)), (Abs (k :: p) (p ++ gv0)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ p)), (Abs (k :: p) (ql ++ ql))
(Abs (k :: p) (ql ++ gv0)), (Abs (k :: p) (gv0 ++ q)), (Abs (k :: p) (gv0 ++ p)), (Abs (k :: p) (gv0 ++ ql)), (Abs (k :: p) (gv0 ++ gv0)), (Abs (k :: p) []), (Abs (k :: ql) q), (Abs (k :: ql) p), (Abs (k :: ql) ql), (Abs (k :: ql) gv0)
(Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: p)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: gv0)), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (k :: gv0)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge q ql))
(Abs (k :: ql) (merge q gv0)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p gv0)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql gv0)), (Abs (k :: ql) (merge gv0 q))
(Abs (k :: ql) (merge gv0 p)), (Abs (k :: ql) (merge gv0 ql)), (Abs (k :: ql) (merge gv0 gv0)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a gv0)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert k ql))
(Abs (k :: ql) (insert k gv0)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap gv0)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ gv0)), (Abs (k :: ql) (p ++ q))
(Abs (k :: ql) (p ++ p)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ gv0)), (Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (ql ++ ql)), (Abs (k :: ql) (ql ++ gv0)), (Abs (k :: ql) (gv0 ++ q)), (Abs (k :: ql) (gv0 ++ p)), (Abs (k :: ql) (gv0 ++ ql))
(Abs (k :: ql) (gv0 ++ gv0)), (Abs (k :: ql) []), (Abs (k :: gv0) q), (Abs (k :: gv0) p), (Abs (k :: gv0) ql), (Abs (k :: gv0) gv0), (Abs (k :: gv0) (a :: q)), (Abs (k :: gv0) (a :: p)), (Abs (k :: gv0) (a :: ql)), (Abs (k :: gv0) (a :: gv0))
(Abs (k :: gv0) (k :: q)), (Abs (k :: gv0) (k :: p)), (Abs (k :: gv0) (k :: ql)), (Abs (k :: gv0) (merge q q)), (Abs (k :: gv0) (merge q p)), (Abs (k :: gv0) (merge q ql)), (Abs (k :: gv0) (merge q gv0)), (Abs (k :: gv0) (merge p q)), (Abs (k :: gv0) (merge p p)), (Abs (k :: gv0) (merge p ql))
(Abs (k :: gv0) (merge p gv0)), (Abs (k :: gv0) (merge ql q)), (Abs (k :: gv0) (merge ql p)), (Abs (k :: gv0) (merge ql ql)), (Abs (k :: gv0) (merge ql gv0)), (Abs (k :: gv0) (merge gv0 q)), (Abs (k :: gv0) (merge gv0 p)), (Abs (k :: gv0) (merge gv0 ql)), (Abs (k :: gv0) (merge gv0 gv0)), (Abs (k :: gv0) (insert a q))
(Abs (k :: gv0) (insert a p)), (Abs (k :: gv0) (insert a ql)), (Abs (k :: gv0) (insert a gv0)), (Abs (k :: gv0) (insert k q)), (Abs (k :: gv0) (insert k p)), (Abs (k :: gv0) (insert k ql)), (Abs (k :: gv0) (insert k gv0)), (Abs (k :: gv0) (maybe_swap q)), (Abs (k :: gv0) (maybe_swap p)), (Abs (k :: gv0) (maybe_swap ql))
(Abs (k :: gv0) (maybe_swap gv0)), (Abs (k :: gv0) (q ++ q)), (Abs (k :: gv0) (q ++ p)), (Abs (k :: gv0) (q ++ ql)), (Abs (k :: gv0) (q ++ gv0)), (Abs (k :: gv0) (p ++ q)), (Abs (k :: gv0) (p ++ p)), (Abs (k :: gv0) (p ++ ql)), (Abs (k :: gv0) (p ++ gv0)), (Abs (k :: gv0) (ql ++ q))
(Abs (k :: gv0) (ql ++ p)), (Abs (k :: gv0) (ql ++ ql)), (Abs (k :: gv0) (ql ++ gv0)), (Abs (k :: gv0) (gv0 ++ q)), (Abs (k :: gv0) (gv0 ++ p)), (Abs (k :: gv0) (gv0 ++ ql)), (Abs (k :: gv0) (gv0 ++ gv0)), (Abs (k :: gv0) []), (Abs (merge q q) q), (Abs (merge q q) p)
(Abs (merge q q) ql), (Abs (merge q q) gv0), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: p)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: gv0)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: gv0))
(Abs (merge q q) (merge q p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q gv0)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p gv0)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge ql ql))
(Abs (merge q q) (merge ql gv0)), (Abs (merge q q) (merge gv0 q)), (Abs (merge q q) (merge gv0 p)), (Abs (merge q q) (merge gv0 ql)), (Abs (merge q q) (merge gv0 gv0)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a ql)), (Abs (merge q q) (insert a gv0)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k p)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k gv0)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap gv0)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (q ++ ql))
(Abs (merge q q) (q ++ gv0)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ ql)), (Abs (merge q q) (p ++ gv0)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ p)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ gv0)), (Abs (merge q q) (gv0 ++ q))
(Abs (merge q q) (gv0 ++ p)), (Abs (merge q q) (gv0 ++ ql)), (Abs (merge q q) (gv0 ++ gv0)), (Abs (merge q q) []), (Abs (merge q p) q), (Abs (merge q p) p), (Abs (merge q p) ql), (Abs (merge q p) gv0), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: p))
(Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: gv0)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: gv0)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q gv0)), (Abs (merge q p) (merge p q))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p gv0)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql gv0)), (Abs (merge q p) (merge gv0 q)), (Abs (merge q p) (merge gv0 p)), (Abs (merge q p) (merge gv0 ql))
(Abs (merge q p) (merge gv0 gv0)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a gv0)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k gv0)), (Abs (merge q p) (maybe_swap q))
(Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap gv0)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ gv0)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ ql))
(Abs (merge q p) (p ++ gv0)), (Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (ql ++ ql)), (Abs (merge q p) (ql ++ gv0)), (Abs (merge q p) (gv0 ++ q)), (Abs (merge q p) (gv0 ++ p)), (Abs (merge q p) (gv0 ++ ql)), (Abs (merge q p) (gv0 ++ gv0)), (Abs (merge q p) [])
(Abs (merge q ql) q), (Abs (merge q ql) p), (Abs (merge q ql) ql), (Abs (merge q ql) gv0), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: gv0)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: p))
(Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: gv0)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge q gv0)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p gv0)), (Abs (merge q ql) (merge ql q))
(Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql gv0)), (Abs (merge q ql) (merge gv0 q)), (Abs (merge q ql) (merge gv0 p)), (Abs (merge q ql) (merge gv0 ql)), (Abs (merge q ql) (merge gv0 gv0)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (insert a ql))
(Abs (merge q ql) (insert a gv0)), (Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert k ql)), (Abs (merge q ql) (insert k gv0)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap gv0)), (Abs (merge q ql) (q ++ q))
(Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ gv0)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ gv0)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (ql ++ ql))
(Abs (merge q ql) (ql ++ gv0)), (Abs (merge q ql) (gv0 ++ q)), (Abs (merge q ql) (gv0 ++ p)), (Abs (merge q ql) (gv0 ++ ql)), (Abs (merge q ql) (gv0 ++ gv0)), (Abs (merge q ql) []), (Abs (merge q gv0) q), (Abs (merge q gv0) p), (Abs (merge q gv0) ql), (Abs (merge q gv0) gv0)
(Abs (merge q gv0) (a :: q)), (Abs (merge q gv0) (a :: p)), (Abs (merge q gv0) (a :: ql)), (Abs (merge q gv0) (a :: gv0)), (Abs (merge q gv0) (k :: q)), (Abs (merge q gv0) (k :: p)), (Abs (merge q gv0) (k :: ql)), (Abs (merge q gv0) (k :: gv0)), (Abs (merge q gv0) (merge q q)), (Abs (merge q gv0) (merge q p))
(Abs (merge q gv0) (merge q ql)), (Abs (merge q gv0) (merge p q)), (Abs (merge q gv0) (merge p p)), (Abs (merge q gv0) (merge p ql)), (Abs (merge q gv0) (merge p gv0)), (Abs (merge q gv0) (merge ql q)), (Abs (merge q gv0) (merge ql p)), (Abs (merge q gv0) (merge ql ql)), (Abs (merge q gv0) (merge ql gv0)), (Abs (merge q gv0) (merge gv0 q))
(Abs (merge q gv0) (merge gv0 p)), (Abs (merge q gv0) (merge gv0 ql)), (Abs (merge q gv0) (merge gv0 gv0)), (Abs (merge q gv0) (insert a q)), (Abs (merge q gv0) (insert a p)), (Abs (merge q gv0) (insert a ql)), (Abs (merge q gv0) (insert a gv0)), (Abs (merge q gv0) (insert k q)), (Abs (merge q gv0) (insert k p)), (Abs (merge q gv0) (insert k ql))
(Abs (merge q gv0) (insert k gv0)), (Abs (merge q gv0) (maybe_swap q)), (Abs (merge q gv0) (maybe_swap p)), (Abs (merge q gv0) (maybe_swap ql)), (Abs (merge q gv0) (maybe_swap gv0)), (Abs (merge q gv0) (q ++ q)), (Abs (merge q gv0) (q ++ p)), (Abs (merge q gv0) (q ++ ql)), (Abs (merge q gv0) (q ++ gv0)), (Abs (merge q gv0) (p ++ q))
(Abs (merge q gv0) (p ++ p)), (Abs (merge q gv0) (p ++ ql)), (Abs (merge q gv0) (p ++ gv0)), (Abs (merge q gv0) (ql ++ q)), (Abs (merge q gv0) (ql ++ p)), (Abs (merge q gv0) (ql ++ ql)), (Abs (merge q gv0) (ql ++ gv0)), (Abs (merge q gv0) (gv0 ++ q)), (Abs (merge q gv0) (gv0 ++ p)), (Abs (merge q gv0) (gv0 ++ ql))
(Abs (merge q gv0) (gv0 ++ gv0)), (Abs (merge q gv0) []), (Abs (merge p q) q), (Abs (merge p q) p), (Abs (merge p q) ql), (Abs (merge p q) gv0), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: gv0))
(Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: gv0)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q gv0)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p ql))
(Abs (merge p q) (merge p gv0)), (Abs (merge p q) (merge ql q)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql gv0)), (Abs (merge p q) (merge gv0 q)), (Abs (merge p q) (merge gv0 p)), (Abs (merge p q) (merge gv0 ql)), (Abs (merge p q) (merge gv0 gv0)), (Abs (merge p q) (insert a q))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a gv0)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k gv0)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (maybe_swap ql))
(Abs (merge p q) (maybe_swap gv0)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (q ++ ql)), (Abs (merge p q) (q ++ gv0)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ gv0)), (Abs (merge p q) (ql ++ q))
(Abs (merge p q) (ql ++ p)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ gv0)), (Abs (merge p q) (gv0 ++ q)), (Abs (merge p q) (gv0 ++ p)), (Abs (merge p q) (gv0 ++ ql)), (Abs (merge p q) (gv0 ++ gv0)), (Abs (merge p q) []), (Abs (merge p p) q), (Abs (merge p p) p)
(Abs (merge p p) ql), (Abs (merge p p) gv0), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: gv0)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: gv0))
(Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q gv0)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p gv0)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge ql ql))
(Abs (merge p p) (merge ql gv0)), (Abs (merge p p) (merge gv0 q)), (Abs (merge p p) (merge gv0 p)), (Abs (merge p p) (merge gv0 ql)), (Abs (merge p p) (merge gv0 gv0)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (insert a ql)), (Abs (merge p p) (insert a gv0)), (Abs (merge p p) (insert k q))
(Abs (merge p p) (insert k p)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k gv0)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap gv0)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (q ++ ql))
(Abs (merge p p) (q ++ gv0)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ ql)), (Abs (merge p p) (p ++ gv0)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ p)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ gv0)), (Abs (merge p p) (gv0 ++ q))
(Abs (merge p p) (gv0 ++ p)), (Abs (merge p p) (gv0 ++ ql)), (Abs (merge p p) (gv0 ++ gv0)), (Abs (merge p p) []), (Abs (merge p ql) q), (Abs (merge p ql) p), (Abs (merge p ql) ql), (Abs (merge p ql) gv0), (Abs (merge p ql) (a :: q)), (Abs (merge p ql) (a :: p))
(Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: gv0)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: gv0)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q p)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q gv0))
(Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (merge p gv0)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql gv0)), (Abs (merge p ql) (merge gv0 q)), (Abs (merge p ql) (merge gv0 p)), (Abs (merge p ql) (merge gv0 ql))
(Abs (merge p ql) (merge gv0 gv0)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a gv0)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k gv0)), (Abs (merge p ql) (maybe_swap q))
(Abs (merge p ql) (maybe_swap p)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap gv0)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ gv0)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) (p ++ ql))
(Abs (merge p ql) (p ++ gv0)), (Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (ql ++ ql)), (Abs (merge p ql) (ql ++ gv0)), (Abs (merge p ql) (gv0 ++ q)), (Abs (merge p ql) (gv0 ++ p)), (Abs (merge p ql) (gv0 ++ ql)), (Abs (merge p ql) (gv0 ++ gv0)), (Abs (merge p ql) [])
(Abs (merge p gv0) q), (Abs (merge p gv0) p), (Abs (merge p gv0) ql), (Abs (merge p gv0) gv0), (Abs (merge p gv0) (a :: q)), (Abs (merge p gv0) (a :: p)), (Abs (merge p gv0) (a :: ql)), (Abs (merge p gv0) (a :: gv0)), (Abs (merge p gv0) (k :: q)), (Abs (merge p gv0) (k :: p))
(Abs (merge p gv0) (k :: ql)), (Abs (merge p gv0) (k :: gv0)), (Abs (merge p gv0) (merge q q)), (Abs (merge p gv0) (merge q p)), (Abs (merge p gv0) (merge q ql)), (Abs (merge p gv0) (merge q gv0)), (Abs (merge p gv0) (merge p q)), (Abs (merge p gv0) (merge p p)), (Abs (merge p gv0) (merge p ql)), (Abs (merge p gv0) (merge ql q))
(Abs (merge p gv0) (merge ql p)), (Abs (merge p gv0) (merge ql ql)), (Abs (merge p gv0) (merge ql gv0)), (Abs (merge p gv0) (merge gv0 q)), (Abs (merge p gv0) (merge gv0 p)), (Abs (merge p gv0) (merge gv0 ql)), (Abs (merge p gv0) (merge gv0 gv0)), (Abs (merge p gv0) (insert a q)), (Abs (merge p gv0) (insert a p)), (Abs (merge p gv0) (insert a ql))
(Abs (merge p gv0) (insert a gv0)), (Abs (merge p gv0) (insert k q)), (Abs (merge p gv0) (insert k p)), (Abs (merge p gv0) (insert k ql)), (Abs (merge p gv0) (insert k gv0)), (Abs (merge p gv0) (maybe_swap q)), (Abs (merge p gv0) (maybe_swap p)), (Abs (merge p gv0) (maybe_swap ql)), (Abs (merge p gv0) (maybe_swap gv0)), (Abs (merge p gv0) (q ++ q))
(Abs (merge p gv0) (q ++ p)), (Abs (merge p gv0) (q ++ ql)), (Abs (merge p gv0) (q ++ gv0)), (Abs (merge p gv0) (p ++ q)), (Abs (merge p gv0) (p ++ p)), (Abs (merge p gv0) (p ++ ql)), (Abs (merge p gv0) (p ++ gv0)), (Abs (merge p gv0) (ql ++ q)), (Abs (merge p gv0) (ql ++ p)), (Abs (merge p gv0) (ql ++ ql))
(Abs (merge p gv0) (ql ++ gv0)), (Abs (merge p gv0) (gv0 ++ q)), (Abs (merge p gv0) (gv0 ++ p)), (Abs (merge p gv0) (gv0 ++ ql)), (Abs (merge p gv0) (gv0 ++ gv0)), (Abs (merge p gv0) []), (Abs (merge ql q) q), (Abs (merge ql q) p), (Abs (merge ql q) ql), (Abs (merge ql q) gv0)
(Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: gv0)), (Abs (merge ql q) (k :: q)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: gv0)), (Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q p))
(Abs (merge ql q) (merge q ql)), (Abs (merge ql q) (merge q gv0)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p p)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p gv0)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql gv0)), (Abs (merge ql q) (merge gv0 q))
(Abs (merge ql q) (merge gv0 p)), (Abs (merge ql q) (merge gv0 ql)), (Abs (merge ql q) (merge gv0 gv0)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a gv0)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k p)), (Abs (merge ql q) (insert k ql))
(Abs (merge ql q) (insert k gv0)), (Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (maybe_swap ql)), (Abs (merge ql q) (maybe_swap gv0)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ gv0)), (Abs (merge ql q) (p ++ q))
(Abs (merge ql q) (p ++ p)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ gv0)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ gv0)), (Abs (merge ql q) (gv0 ++ q)), (Abs (merge ql q) (gv0 ++ p)), (Abs (merge ql q) (gv0 ++ ql))
(Abs (merge ql q) (gv0 ++ gv0)), (Abs (merge ql q) []), (Abs (merge ql p) q), (Abs (merge ql p) p), (Abs (merge ql p) ql), (Abs (merge ql p) gv0), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: p)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: gv0))
(Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: gv0)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q gv0)), (Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p p))
(Abs (merge ql p) (merge p ql)), (Abs (merge ql p) (merge p gv0)), (Abs (merge ql p) (merge ql q)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql gv0)), (Abs (merge ql p) (merge gv0 q)), (Abs (merge ql p) (merge gv0 p)), (Abs (merge ql p) (merge gv0 ql)), (Abs (merge ql p) (merge gv0 gv0)), (Abs (merge ql p) (insert a q))
(Abs (merge ql p) (insert a p)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a gv0)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k gv0)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (maybe_swap ql))
(Abs (merge ql p) (maybe_swap gv0)), (Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (q ++ ql)), (Abs (merge ql p) (q ++ gv0)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ p)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ gv0)), (Abs (merge ql p) (ql ++ q))
(Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ gv0)), (Abs (merge ql p) (gv0 ++ q)), (Abs (merge ql p) (gv0 ++ p)), (Abs (merge ql p) (gv0 ++ ql)), (Abs (merge ql p) (gv0 ++ gv0)), (Abs (merge ql p) []), (Abs (merge ql ql) q), (Abs (merge ql ql) p)
(Abs (merge ql ql) ql), (Abs (merge ql ql) gv0), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: p)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: gv0)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: gv0))
(Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q gv0)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p gv0)), (Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql p))
(Abs (merge ql ql) (merge ql gv0)), (Abs (merge ql ql) (merge gv0 q)), (Abs (merge ql ql) (merge gv0 p)), (Abs (merge ql ql) (merge gv0 ql)), (Abs (merge ql ql) (merge gv0 gv0)), (Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (insert a ql)), (Abs (merge ql ql) (insert a gv0)), (Abs (merge ql ql) (insert k q))
(Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k gv0)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap gv0)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (q ++ ql))
(Abs (merge ql ql) (q ++ gv0)), (Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) (p ++ ql)), (Abs (merge ql ql) (p ++ gv0)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ gv0)), (Abs (merge ql ql) (gv0 ++ q))
(Abs (merge ql ql) (gv0 ++ p)), (Abs (merge ql ql) (gv0 ++ ql)), (Abs (merge ql ql) (gv0 ++ gv0)), (Abs (merge ql ql) []), (Abs (merge ql gv0) q), (Abs (merge ql gv0) p), (Abs (merge ql gv0) ql), (Abs (merge ql gv0) gv0), (Abs (merge ql gv0) (a :: q)), (Abs (merge ql gv0) (a :: p))
(Abs (merge ql gv0) (a :: ql)), (Abs (merge ql gv0) (a :: gv0)), (Abs (merge ql gv0) (k :: q)), (Abs (merge ql gv0) (k :: p)), (Abs (merge ql gv0) (k :: ql)), (Abs (merge ql gv0) (k :: gv0)), (Abs (merge ql gv0) (merge q q)), (Abs (merge ql gv0) (merge q p)), (Abs (merge ql gv0) (merge q ql)), (Abs (merge ql gv0) (merge q gv0))
(Abs (merge ql gv0) (merge p q)), (Abs (merge ql gv0) (merge p p)), (Abs (merge ql gv0) (merge p ql)), (Abs (merge ql gv0) (merge p gv0)), (Abs (merge ql gv0) (merge ql q)), (Abs (merge ql gv0) (merge ql p)), (Abs (merge ql gv0) (merge ql ql)), (Abs (merge ql gv0) (merge gv0 q)), (Abs (merge ql gv0) (merge gv0 p)), (Abs (merge ql gv0) (merge gv0 ql))
(Abs (merge ql gv0) (merge gv0 gv0)), (Abs (merge ql gv0) (insert a q)), (Abs (merge ql gv0) (insert a p)), (Abs (merge ql gv0) (insert a ql)), (Abs (merge ql gv0) (insert a gv0)), (Abs (merge ql gv0) (insert k q)), (Abs (merge ql gv0) (insert k p)), (Abs (merge ql gv0) (insert k ql)), (Abs (merge ql gv0) (insert k gv0)), (Abs (merge ql gv0) (maybe_swap q))
(Abs (merge ql gv0) (maybe_swap p)), (Abs (merge ql gv0) (maybe_swap ql)), (Abs (merge ql gv0) (maybe_swap gv0)), (Abs (merge ql gv0) (q ++ q)), (Abs (merge ql gv0) (q ++ p)), (Abs (merge ql gv0) (q ++ ql)), (Abs (merge ql gv0) (q ++ gv0)), (Abs (merge ql gv0) (p ++ q)), (Abs (merge ql gv0) (p ++ p)), (Abs (merge ql gv0) (p ++ ql))
(Abs (merge ql gv0) (p ++ gv0)), (Abs (merge ql gv0) (ql ++ q)), (Abs (merge ql gv0) (ql ++ p)), (Abs (merge ql gv0) (ql ++ ql)), (Abs (merge ql gv0) (ql ++ gv0)), (Abs (merge ql gv0) (gv0 ++ q)), (Abs (merge ql gv0) (gv0 ++ p)), (Abs (merge ql gv0) (gv0 ++ ql)), (Abs (merge ql gv0) (gv0 ++ gv0)), (Abs (merge ql gv0) [])
(Abs (merge gv0 q) q), (Abs (merge gv0 q) p), (Abs (merge gv0 q) ql), (Abs (merge gv0 q) gv0), (Abs (merge gv0 q) (a :: q)), (Abs (merge gv0 q) (a :: p)), (Abs (merge gv0 q) (a :: ql)), (Abs (merge gv0 q) (a :: gv0)), (Abs (merge gv0 q) (k :: q)), (Abs (merge gv0 q) (k :: p))
(Abs (merge gv0 q) (k :: ql)), (Abs (merge gv0 q) (k :: gv0)), (Abs (merge gv0 q) (merge q q)), (Abs (merge gv0 q) (merge q p)), (Abs (merge gv0 q) (merge q ql)), (Abs (merge gv0 q) (merge q gv0)), (Abs (merge gv0 q) (merge p q)), (Abs (merge gv0 q) (merge p p)), (Abs (merge gv0 q) (merge p ql)), (Abs (merge gv0 q) (merge p gv0))
(Abs (merge gv0 q) (merge ql q)), (Abs (merge gv0 q) (merge ql p)), (Abs (merge gv0 q) (merge ql ql)), (Abs (merge gv0 q) (merge ql gv0)), (Abs (merge gv0 q) (merge gv0 p)), (Abs (merge gv0 q) (merge gv0 ql)), (Abs (merge gv0 q) (merge gv0 gv0)), (Abs (merge gv0 q) (insert a q)), (Abs (merge gv0 q) (insert a p)), (Abs (merge gv0 q) (insert a ql))
(Abs (merge gv0 q) (insert a gv0)), (Abs (merge gv0 q) (insert k q)), (Abs (merge gv0 q) (insert k p)), (Abs (merge gv0 q) (insert k ql)), (Abs (merge gv0 q) (insert k gv0)), (Abs (merge gv0 q) (maybe_swap q)), (Abs (merge gv0 q) (maybe_swap p)), (Abs (merge gv0 q) (maybe_swap ql)), (Abs (merge gv0 q) (maybe_swap gv0)), (Abs (merge gv0 q) (q ++ q))
(Abs (merge gv0 q) (q ++ p)), (Abs (merge gv0 q) (q ++ ql)), (Abs (merge gv0 q) (q ++ gv0)), (Abs (merge gv0 q) (p ++ q)), (Abs (merge gv0 q) (p ++ p)), (Abs (merge gv0 q) (p ++ ql)), (Abs (merge gv0 q) (p ++ gv0)), (Abs (merge gv0 q) (ql ++ q)), (Abs (merge gv0 q) (ql ++ p)), (Abs (merge gv0 q) (ql ++ ql))
(Abs (merge gv0 q) (ql ++ gv0)), (Abs (merge gv0 q) (gv0 ++ q)), (Abs (merge gv0 q) (gv0 ++ p)), (Abs (merge gv0 q) (gv0 ++ ql)), (Abs (merge gv0 q) (gv0 ++ gv0)), (Abs (merge gv0 q) []), (Abs (merge gv0 p) q), (Abs (merge gv0 p) p), (Abs (merge gv0 p) ql), (Abs (merge gv0 p) gv0)
(Abs (merge gv0 p) (a :: q)), (Abs (merge gv0 p) (a :: p)), (Abs (merge gv0 p) (a :: ql)), (Abs (merge gv0 p) (a :: gv0)), (Abs (merge gv0 p) (k :: q)), (Abs (merge gv0 p) (k :: p)), (Abs (merge gv0 p) (k :: ql)), (Abs (merge gv0 p) (k :: gv0)), (Abs (merge gv0 p) (merge q q)), (Abs (merge gv0 p) (merge q p))
(Abs (merge gv0 p) (merge q ql)), (Abs (merge gv0 p) (merge q gv0)), (Abs (merge gv0 p) (merge p q)), (Abs (merge gv0 p) (merge p p)), (Abs (merge gv0 p) (merge p ql)), (Abs (merge gv0 p) (merge p gv0)), (Abs (merge gv0 p) (merge ql q)), (Abs (merge gv0 p) (merge ql p)), (Abs (merge gv0 p) (merge ql ql)), (Abs (merge gv0 p) (merge ql gv0))
(Abs (merge gv0 p) (merge gv0 q)), (Abs (merge gv0 p) (merge gv0 ql)), (Abs (merge gv0 p) (merge gv0 gv0)), (Abs (merge gv0 p) (insert a q)), (Abs (merge gv0 p) (insert a p)), (Abs (merge gv0 p) (insert a ql)), (Abs (merge gv0 p) (insert a gv0)), (Abs (merge gv0 p) (insert k q)), (Abs (merge gv0 p) (insert k p)), (Abs (merge gv0 p) (insert k ql))
(Abs (merge gv0 p) (insert k gv0)), (Abs (merge gv0 p) (maybe_swap q)), (Abs (merge gv0 p) (maybe_swap p)), (Abs (merge gv0 p) (maybe_swap ql)), (Abs (merge gv0 p) (maybe_swap gv0)), (Abs (merge gv0 p) (q ++ q)), (Abs (merge gv0 p) (q ++ p)), (Abs (merge gv0 p) (q ++ ql)), (Abs (merge gv0 p) (q ++ gv0)), (Abs (merge gv0 p) (p ++ q))
(Abs (merge gv0 p) (p ++ p)), (Abs (merge gv0 p) (p ++ ql)), (Abs (merge gv0 p) (p ++ gv0)), (Abs (merge gv0 p) (ql ++ q)), (Abs (merge gv0 p) (ql ++ p)), (Abs (merge gv0 p) (ql ++ ql)), (Abs (merge gv0 p) (ql ++ gv0)), (Abs (merge gv0 p) (gv0 ++ q)), (Abs (merge gv0 p) (gv0 ++ p)), (Abs (merge gv0 p) (gv0 ++ ql))
(Abs (merge gv0 p) (gv0 ++ gv0)), (Abs (merge gv0 p) []), (Abs (merge gv0 ql) q), (Abs (merge gv0 ql) p), (Abs (merge gv0 ql) ql), (Abs (merge gv0 ql) gv0), (Abs (merge gv0 ql) (a :: q)), (Abs (merge gv0 ql) (a :: p)), (Abs (merge gv0 ql) (a :: ql)), (Abs (merge gv0 ql) (a :: gv0))
(Abs (merge gv0 ql) (k :: q)), (Abs (merge gv0 ql) (k :: p)), (Abs (merge gv0 ql) (k :: ql)), (Abs (merge gv0 ql) (k :: gv0)), (Abs (merge gv0 ql) (merge q q)), (Abs (merge gv0 ql) (merge q p)), (Abs (merge gv0 ql) (merge q ql)), (Abs (merge gv0 ql) (merge q gv0)), (Abs (merge gv0 ql) (merge p q)), (Abs (merge gv0 ql) (merge p p))
(Abs (merge gv0 ql) (merge p ql)), (Abs (merge gv0 ql) (merge p gv0)), (Abs (merge gv0 ql) (merge ql q)), (Abs (merge gv0 ql) (merge ql p)), (Abs (merge gv0 ql) (merge ql ql)), (Abs (merge gv0 ql) (merge ql gv0)), (Abs (merge gv0 ql) (merge gv0 q)), (Abs (merge gv0 ql) (merge gv0 p)), (Abs (merge gv0 ql) (merge gv0 gv0)), (Abs (merge gv0 ql) (insert a q))
(Abs (merge gv0 ql) (insert a p)), (Abs (merge gv0 ql) (insert a ql)), (Abs (merge gv0 ql) (insert a gv0)), (Abs (merge gv0 ql) (insert k q)), (Abs (merge gv0 ql) (insert k p)), (Abs (merge gv0 ql) (insert k ql)), (Abs (merge gv0 ql) (insert k gv0)), (Abs (merge gv0 ql) (maybe_swap q)), (Abs (merge gv0 ql) (maybe_swap p)), (Abs (merge gv0 ql) (maybe_swap ql))
(Abs (merge gv0 ql) (maybe_swap gv0)), (Abs (merge gv0 ql) (q ++ q)), (Abs (merge gv0 ql) (q ++ p)), (Abs (merge gv0 ql) (q ++ ql)), (Abs (merge gv0 ql) (q ++ gv0)), (Abs (merge gv0 ql) (p ++ q)), (Abs (merge gv0 ql) (p ++ p)), (Abs (merge gv0 ql) (p ++ ql)), (Abs (merge gv0 ql) (p ++ gv0)), (Abs (merge gv0 ql) (ql ++ q))
(Abs (merge gv0 ql) (ql ++ p)), (Abs (merge gv0 ql) (ql ++ ql)), (Abs (merge gv0 ql) (ql ++ gv0)), (Abs (merge gv0 ql) (gv0 ++ q)), (Abs (merge gv0 ql) (gv0 ++ p)), (Abs (merge gv0 ql) (gv0 ++ ql)), (Abs (merge gv0 ql) (gv0 ++ gv0)), (Abs (merge gv0 ql) []), (Abs (merge gv0 gv0) q), (Abs (merge gv0 gv0) p)
(Abs (merge gv0 gv0) ql), (Abs (merge gv0 gv0) gv0), (Abs (merge gv0 gv0) (a :: q)), (Abs (merge gv0 gv0) (a :: p)), (Abs (merge gv0 gv0) (a :: ql)), (Abs (merge gv0 gv0) (a :: gv0)), (Abs (merge gv0 gv0) (k :: q)), (Abs (merge gv0 gv0) (k :: p)), (Abs (merge gv0 gv0) (k :: ql)), (Abs (merge gv0 gv0) (k :: gv0))
(Abs (merge gv0 gv0) (merge q q)), (Abs (merge gv0 gv0) (merge q p)), (Abs (merge gv0 gv0) (merge q ql)), (Abs (merge gv0 gv0) (merge q gv0)), (Abs (merge gv0 gv0) (merge p q)), (Abs (merge gv0 gv0) (merge p p)), (Abs (merge gv0 gv0) (merge p ql)), (Abs (merge gv0 gv0) (merge p gv0)), (Abs (merge gv0 gv0) (merge ql q)), (Abs (merge gv0 gv0) (merge ql p))
(Abs (merge gv0 gv0) (merge ql ql)), (Abs (merge gv0 gv0) (merge ql gv0)), (Abs (merge gv0 gv0) (merge gv0 q)), (Abs (merge gv0 gv0) (merge gv0 p)), (Abs (merge gv0 gv0) (merge gv0 ql)), (Abs (merge gv0 gv0) (insert a q)), (Abs (merge gv0 gv0) (insert a p)), (Abs (merge gv0 gv0) (insert a ql)), (Abs (merge gv0 gv0) (insert a gv0)), (Abs (merge gv0 gv0) (insert k q))
(Abs (merge gv0 gv0) (insert k p)), (Abs (merge gv0 gv0) (insert k ql)), (Abs (merge gv0 gv0) (insert k gv0)), (Abs (merge gv0 gv0) (maybe_swap q)), (Abs (merge gv0 gv0) (maybe_swap p)), (Abs (merge gv0 gv0) (maybe_swap ql)), (Abs (merge gv0 gv0) (maybe_swap gv0)), (Abs (merge gv0 gv0) (q ++ q)), (Abs (merge gv0 gv0) (q ++ p)), (Abs (merge gv0 gv0) (q ++ ql))
(Abs (merge gv0 gv0) (q ++ gv0)), (Abs (merge gv0 gv0) (p ++ q)), (Abs (merge gv0 gv0) (p ++ p)), (Abs (merge gv0 gv0) (p ++ ql)), (Abs (merge gv0 gv0) (p ++ gv0)), (Abs (merge gv0 gv0) (ql ++ q)), (Abs (merge gv0 gv0) (ql ++ p)), (Abs (merge gv0 gv0) (ql ++ ql)), (Abs (merge gv0 gv0) (ql ++ gv0)), (Abs (merge gv0 gv0) (gv0 ++ q))
(Abs (merge gv0 gv0) (gv0 ++ p)), (Abs (merge gv0 gv0) (gv0 ++ ql)), (Abs (merge gv0 gv0) (gv0 ++ gv0)), (Abs (merge gv0 gv0) []), (Abs (insert a q) q), (Abs (insert a q) p), (Abs (insert a q) ql), (Abs (insert a q) gv0), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: p))
(Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: gv0)), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: gv0)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q gv0))
(Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p gv0)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql p)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql gv0)), (Abs (insert a q) (merge gv0 q)), (Abs (insert a q) (merge gv0 p))
(Abs (insert a q) (merge gv0 ql)), (Abs (insert a q) (merge gv0 gv0)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a gv0)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k gv0)), (Abs (insert a q) (maybe_swap q))
(Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (maybe_swap ql)), (Abs (insert a q) (maybe_swap gv0)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ gv0)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ ql))
(Abs (insert a q) (p ++ gv0)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ gv0)), (Abs (insert a q) (gv0 ++ q)), (Abs (insert a q) (gv0 ++ p)), (Abs (insert a q) (gv0 ++ ql)), (Abs (insert a q) (gv0 ++ gv0)), (Abs (insert a q) [])
(Abs (insert a p) q), (Abs (insert a p) p), (Abs (insert a p) ql), (Abs (insert a p) gv0), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: gv0)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p))
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: gv0)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q gv0)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p gv0))
(Abs (insert a p) (merge ql q)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql gv0)), (Abs (insert a p) (merge gv0 q)), (Abs (insert a p) (merge gv0 p)), (Abs (insert a p) (merge gv0 ql)), (Abs (insert a p) (merge gv0 gv0)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a ql))
(Abs (insert a p) (insert a gv0)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k gv0)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap gv0)), (Abs (insert a p) (q ++ q))
(Abs (insert a p) (q ++ p)), (Abs (insert a p) (q ++ ql)), (Abs (insert a p) (q ++ gv0)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ gv0)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (ql ++ ql))
(Abs (insert a p) (ql ++ gv0)), (Abs (insert a p) (gv0 ++ q)), (Abs (insert a p) (gv0 ++ p)), (Abs (insert a p) (gv0 ++ ql)), (Abs (insert a p) (gv0 ++ gv0)), (Abs (insert a p) []), (Abs (insert a ql) q), (Abs (insert a ql) p), (Abs (insert a ql) ql), (Abs (insert a ql) gv0)
(Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: p)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: gv0)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: gv0)), (Abs (insert a ql) (merge q q)), (Abs (insert a ql) (merge q p))
(Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q gv0)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p gv0)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql gv0))
(Abs (insert a ql) (merge gv0 q)), (Abs (insert a ql) (merge gv0 p)), (Abs (insert a ql) (merge gv0 ql)), (Abs (insert a ql) (merge gv0 gv0)), (Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (insert a gv0)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k p)), (Abs (insert a ql) (insert k ql))
(Abs (insert a ql) (insert k gv0)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap gv0)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ gv0)), (Abs (insert a ql) (p ++ q))
(Abs (insert a ql) (p ++ p)), (Abs (insert a ql) (p ++ ql)), (Abs (insert a ql) (p ++ gv0)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ gv0)), (Abs (insert a ql) (gv0 ++ q)), (Abs (insert a ql) (gv0 ++ p)), (Abs (insert a ql) (gv0 ++ ql))
(Abs (insert a ql) (gv0 ++ gv0)), (Abs (insert a ql) []), (Abs (insert a gv0) q), (Abs (insert a gv0) p), (Abs (insert a gv0) ql), (Abs (insert a gv0) gv0), (Abs (insert a gv0) (a :: q)), (Abs (insert a gv0) (a :: p)), (Abs (insert a gv0) (a :: ql)), (Abs (insert a gv0) (a :: gv0))
(Abs (insert a gv0) (k :: q)), (Abs (insert a gv0) (k :: p)), (Abs (insert a gv0) (k :: ql)), (Abs (insert a gv0) (k :: gv0)), (Abs (insert a gv0) (merge q q)), (Abs (insert a gv0) (merge q p)), (Abs (insert a gv0) (merge q ql)), (Abs (insert a gv0) (merge q gv0)), (Abs (insert a gv0) (merge p q)), (Abs (insert a gv0) (merge p p))
(Abs (insert a gv0) (merge p ql)), (Abs (insert a gv0) (merge p gv0)), (Abs (insert a gv0) (merge ql q)), (Abs (insert a gv0) (merge ql p)), (Abs (insert a gv0) (merge ql ql)), (Abs (insert a gv0) (merge ql gv0)), (Abs (insert a gv0) (merge gv0 q)), (Abs (insert a gv0) (merge gv0 p)), (Abs (insert a gv0) (merge gv0 ql)), (Abs (insert a gv0) (merge gv0 gv0))
(Abs (insert a gv0) (insert a q)), (Abs (insert a gv0) (insert a p)), (Abs (insert a gv0) (insert a ql)), (Abs (insert a gv0) (insert k q)), (Abs (insert a gv0) (insert k p)), (Abs (insert a gv0) (insert k ql)), (Abs (insert a gv0) (insert k gv0)), (Abs (insert a gv0) (maybe_swap q)), (Abs (insert a gv0) (maybe_swap p)), (Abs (insert a gv0) (maybe_swap ql))
(Abs (insert a gv0) (maybe_swap gv0)), (Abs (insert a gv0) (q ++ q)), (Abs (insert a gv0) (q ++ p)), (Abs (insert a gv0) (q ++ ql)), (Abs (insert a gv0) (q ++ gv0)), (Abs (insert a gv0) (p ++ q)), (Abs (insert a gv0) (p ++ p)), (Abs (insert a gv0) (p ++ ql)), (Abs (insert a gv0) (p ++ gv0)), (Abs (insert a gv0) (ql ++ q))
(Abs (insert a gv0) (ql ++ p)), (Abs (insert a gv0) (ql ++ ql)), (Abs (insert a gv0) (ql ++ gv0)), (Abs (insert a gv0) (gv0 ++ q)), (Abs (insert a gv0) (gv0 ++ p)), (Abs (insert a gv0) (gv0 ++ ql)), (Abs (insert a gv0) (gv0 ++ gv0)), (Abs (insert a gv0) []), (Abs (insert k q) q), (Abs (insert k q) p)
(Abs (insert k q) ql), (Abs (insert k q) gv0), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: gv0)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: gv0))
(Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q gv0)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p gv0)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql p))
(Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql gv0)), (Abs (insert k q) (merge gv0 q)), (Abs (insert k q) (merge gv0 p)), (Abs (insert k q) (merge gv0 ql)), (Abs (insert k q) (merge gv0 gv0)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a gv0))
(Abs (insert k q) (insert k p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k gv0)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap gv0)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (q ++ ql))
(Abs (insert k q) (q ++ gv0)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ gv0)), (Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (ql ++ ql)), (Abs (insert k q) (ql ++ gv0)), (Abs (insert k q) (gv0 ++ q))
(Abs (insert k q) (gv0 ++ p)), (Abs (insert k q) (gv0 ++ ql)), (Abs (insert k q) (gv0 ++ gv0)), (Abs (insert k q) []), (Abs (insert k p) q), (Abs (insert k p) p), (Abs (insert k p) ql), (Abs (insert k p) gv0), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: p))
(Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: gv0)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: gv0)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q gv0))
(Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p gv0)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql gv0)), (Abs (insert k p) (merge gv0 q)), (Abs (insert k p) (merge gv0 p))
(Abs (insert k p) (merge gv0 ql)), (Abs (insert k p) (merge gv0 gv0)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a gv0)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k gv0)), (Abs (insert k p) (maybe_swap q))
(Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap gv0)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ gv0)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ ql))
(Abs (insert k p) (p ++ gv0)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ gv0)), (Abs (insert k p) (gv0 ++ q)), (Abs (insert k p) (gv0 ++ p)), (Abs (insert k p) (gv0 ++ ql)), (Abs (insert k p) (gv0 ++ gv0)), (Abs (insert k p) [])
(Abs (insert k ql) q), (Abs (insert k ql) p), (Abs (insert k ql) ql), (Abs (insert k ql) gv0), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: p)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: gv0)), (Abs (insert k ql) (k :: q)), (Abs (insert k ql) (k :: p))
(Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: gv0)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q gv0)), (Abs (insert k ql) (merge p q)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p gv0))
(Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql p)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql gv0)), (Abs (insert k ql) (merge gv0 q)), (Abs (insert k ql) (merge gv0 p)), (Abs (insert k ql) (merge gv0 ql)), (Abs (insert k ql) (merge gv0 gv0)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a p))
(Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a gv0)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert k gv0)), (Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (maybe_swap ql)), (Abs (insert k ql) (maybe_swap gv0)), (Abs (insert k ql) (q ++ q))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ gv0)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ gv0)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (ql ++ ql))
(Abs (insert k ql) (ql ++ gv0)), (Abs (insert k ql) (gv0 ++ q)), (Abs (insert k ql) (gv0 ++ p)), (Abs (insert k ql) (gv0 ++ ql)), (Abs (insert k ql) (gv0 ++ gv0)), (Abs (insert k ql) []), (Abs (insert k gv0) q), (Abs (insert k gv0) p), (Abs (insert k gv0) ql), (Abs (insert k gv0) gv0)
(Abs (insert k gv0) (a :: q)), (Abs (insert k gv0) (a :: p)), (Abs (insert k gv0) (a :: ql)), (Abs (insert k gv0) (a :: gv0)), (Abs (insert k gv0) (k :: q)), (Abs (insert k gv0) (k :: p)), (Abs (insert k gv0) (k :: ql)), (Abs (insert k gv0) (k :: gv0)), (Abs (insert k gv0) (merge q q)), (Abs (insert k gv0) (merge q p))
(Abs (insert k gv0) (merge q ql)), (Abs (insert k gv0) (merge q gv0)), (Abs (insert k gv0) (merge p q)), (Abs (insert k gv0) (merge p p)), (Abs (insert k gv0) (merge p ql)), (Abs (insert k gv0) (merge p gv0)), (Abs (insert k gv0) (merge ql q)), (Abs (insert k gv0) (merge ql p)), (Abs (insert k gv0) (merge ql ql)), (Abs (insert k gv0) (merge ql gv0))
(Abs (insert k gv0) (merge gv0 q)), (Abs (insert k gv0) (merge gv0 p)), (Abs (insert k gv0) (merge gv0 ql)), (Abs (insert k gv0) (merge gv0 gv0)), (Abs (insert k gv0) (insert a q)), (Abs (insert k gv0) (insert a p)), (Abs (insert k gv0) (insert a ql)), (Abs (insert k gv0) (insert a gv0)), (Abs (insert k gv0) (insert k q)), (Abs (insert k gv0) (insert k p))
(Abs (insert k gv0) (insert k ql)), (Abs (insert k gv0) (maybe_swap q)), (Abs (insert k gv0) (maybe_swap p)), (Abs (insert k gv0) (maybe_swap ql)), (Abs (insert k gv0) (maybe_swap gv0)), (Abs (insert k gv0) (q ++ q)), (Abs (insert k gv0) (q ++ p)), (Abs (insert k gv0) (q ++ ql)), (Abs (insert k gv0) (q ++ gv0)), (Abs (insert k gv0) (p ++ q))
(Abs (insert k gv0) (p ++ p)), (Abs (insert k gv0) (p ++ ql)), (Abs (insert k gv0) (p ++ gv0)), (Abs (insert k gv0) (ql ++ q)), (Abs (insert k gv0) (ql ++ p)), (Abs (insert k gv0) (ql ++ ql)), (Abs (insert k gv0) (ql ++ gv0)), (Abs (insert k gv0) (gv0 ++ q)), (Abs (insert k gv0) (gv0 ++ p)), (Abs (insert k gv0) (gv0 ++ ql))
(Abs (insert k gv0) (gv0 ++ gv0)), (Abs (insert k gv0) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) p), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) gv0), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: gv0))
(Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: gv0)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q gv0)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p gv0)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql gv0)), (Abs (maybe_swap q) (merge gv0 q)), (Abs (maybe_swap q) (merge gv0 p)), (Abs (maybe_swap q) (merge gv0 ql)), (Abs (maybe_swap q) (merge gv0 gv0))
(Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a gv0)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k gv0)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (maybe_swap ql))
(Abs (maybe_swap q) (maybe_swap gv0)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ gv0)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ ql)), (Abs (maybe_swap q) (p ++ gv0)), (Abs (maybe_swap q) (ql ++ q))
(Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ gv0)), (Abs (maybe_swap q) (gv0 ++ q)), (Abs (maybe_swap q) (gv0 ++ p)), (Abs (maybe_swap q) (gv0 ++ ql)), (Abs (maybe_swap q) (gv0 ++ gv0)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) p)
(Abs (maybe_swap p) ql), (Abs (maybe_swap p) gv0), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: gv0)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: gv0))
(Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q gv0)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p gv0)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql p))
(Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql gv0)), (Abs (maybe_swap p) (merge gv0 q)), (Abs (maybe_swap p) (merge gv0 p)), (Abs (maybe_swap p) (merge gv0 ql)), (Abs (maybe_swap p) (merge gv0 gv0)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a gv0))
(Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k gv0)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap gv0)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (q ++ ql))
(Abs (maybe_swap p) (q ++ gv0)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ gv0)), (Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (ql ++ ql)), (Abs (maybe_swap p) (ql ++ gv0)), (Abs (maybe_swap p) (gv0 ++ q))
(Abs (maybe_swap p) (gv0 ++ p)), (Abs (maybe_swap p) (gv0 ++ ql)), (Abs (maybe_swap p) (gv0 ++ gv0)), (Abs (maybe_swap p) []), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) p), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) gv0), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: p))
(Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: gv0)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: p)), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: gv0)), (Abs (maybe_swap ql) (merge q q)), (Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q gv0))
(Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p p)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p gv0)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql gv0)), (Abs (maybe_swap ql) (merge gv0 q)), (Abs (maybe_swap ql) (merge gv0 p))
(Abs (maybe_swap ql) (merge gv0 ql)), (Abs (maybe_swap ql) (merge gv0 gv0)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a gv0)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k gv0))
(Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (maybe_swap gv0)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ gv0)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) (p ++ ql))
(Abs (maybe_swap ql) (p ++ gv0)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ gv0)), (Abs (maybe_swap ql) (gv0 ++ q)), (Abs (maybe_swap ql) (gv0 ++ p)), (Abs (maybe_swap ql) (gv0 ++ ql)), (Abs (maybe_swap ql) (gv0 ++ gv0)), (Abs (maybe_swap ql) [])
(Abs (maybe_swap gv0) q), (Abs (maybe_swap gv0) p), (Abs (maybe_swap gv0) ql), (Abs (maybe_swap gv0) gv0), (Abs (maybe_swap gv0) (a :: q)), (Abs (maybe_swap gv0) (a :: p)), (Abs (maybe_swap gv0) (a :: ql)), (Abs (maybe_swap gv0) (a :: gv0)), (Abs (maybe_swap gv0) (k :: q)), (Abs (maybe_swap gv0) (k :: p))
(Abs (maybe_swap gv0) (k :: ql)), (Abs (maybe_swap gv0) (k :: gv0)), (Abs (maybe_swap gv0) (merge q q)), (Abs (maybe_swap gv0) (merge q p)), (Abs (maybe_swap gv0) (merge q ql)), (Abs (maybe_swap gv0) (merge q gv0)), (Abs (maybe_swap gv0) (merge p q)), (Abs (maybe_swap gv0) (merge p p)), (Abs (maybe_swap gv0) (merge p ql)), (Abs (maybe_swap gv0) (merge p gv0))
(Abs (maybe_swap gv0) (merge ql q)), (Abs (maybe_swap gv0) (merge ql p)), (Abs (maybe_swap gv0) (merge ql ql)), (Abs (maybe_swap gv0) (merge ql gv0)), (Abs (maybe_swap gv0) (merge gv0 q)), (Abs (maybe_swap gv0) (merge gv0 p)), (Abs (maybe_swap gv0) (merge gv0 ql)), (Abs (maybe_swap gv0) (merge gv0 gv0)), (Abs (maybe_swap gv0) (insert a q)), (Abs (maybe_swap gv0) (insert a p))
(Abs (maybe_swap gv0) (insert a ql)), (Abs (maybe_swap gv0) (insert a gv0)), (Abs (maybe_swap gv0) (insert k q)), (Abs (maybe_swap gv0) (insert k p)), (Abs (maybe_swap gv0) (insert k ql)), (Abs (maybe_swap gv0) (insert k gv0)), (Abs (maybe_swap gv0) (maybe_swap q)), (Abs (maybe_swap gv0) (maybe_swap p)), (Abs (maybe_swap gv0) (maybe_swap ql)), (Abs (maybe_swap gv0) (q ++ q))
(Abs (maybe_swap gv0) (q ++ p)), (Abs (maybe_swap gv0) (q ++ ql)), (Abs (maybe_swap gv0) (q ++ gv0)), (Abs (maybe_swap gv0) (p ++ q)), (Abs (maybe_swap gv0) (p ++ p)), (Abs (maybe_swap gv0) (p ++ ql)), (Abs (maybe_swap gv0) (p ++ gv0)), (Abs (maybe_swap gv0) (ql ++ q)), (Abs (maybe_swap gv0) (ql ++ p)), (Abs (maybe_swap gv0) (ql ++ ql))
(Abs (maybe_swap gv0) (ql ++ gv0)), (Abs (maybe_swap gv0) (gv0 ++ q)), (Abs (maybe_swap gv0) (gv0 ++ p)), (Abs (maybe_swap gv0) (gv0 ++ ql)), (Abs (maybe_swap gv0) (gv0 ++ gv0)), (Abs (maybe_swap gv0) []), (Abs (q ++ q) q), (Abs (q ++ q) p), (Abs (q ++ q) ql), (Abs (q ++ q) gv0)
(Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: gv0)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: gv0)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q p))
(Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q gv0)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p gv0)), (Abs (q ++ q) (merge ql q)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql gv0))
(Abs (q ++ q) (merge gv0 q)), (Abs (q ++ q) (merge gv0 p)), (Abs (q ++ q) (merge gv0 ql)), (Abs (q ++ q) (merge gv0 gv0)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a gv0)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k p))
(Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k gv0)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap gv0)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ gv0)), (Abs (q ++ q) (p ++ q))
(Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ gv0)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ p)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ gv0)), (Abs (q ++ q) (gv0 ++ q)), (Abs (q ++ q) (gv0 ++ p)), (Abs (q ++ q) (gv0 ++ ql))
(Abs (q ++ q) (gv0 ++ gv0)), (Abs (q ++ q) []), (Abs (q ++ p) q), (Abs (q ++ p) p), (Abs (q ++ p) ql), (Abs (q ++ p) gv0), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: gv0))
(Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: gv0)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q gv0)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p gv0)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql gv0)), (Abs (q ++ p) (merge gv0 q)), (Abs (q ++ p) (merge gv0 p)), (Abs (q ++ p) (merge gv0 ql)), (Abs (q ++ p) (merge gv0 gv0))
(Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a gv0)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k gv0)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap p))
(Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap gv0)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ gv0)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ ql)), (Abs (q ++ p) (p ++ gv0)), (Abs (q ++ p) (ql ++ q))
(Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ gv0)), (Abs (q ++ p) (gv0 ++ q)), (Abs (q ++ p) (gv0 ++ p)), (Abs (q ++ p) (gv0 ++ ql)), (Abs (q ++ p) (gv0 ++ gv0)), (Abs (q ++ p) []), (Abs (q ++ ql) q), (Abs (q ++ ql) p)
(Abs (q ++ ql) ql), (Abs (q ++ ql) gv0), (Abs (q ++ ql) (a :: q)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: gv0)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: gv0))
(Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q p)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q gv0)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p gv0)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql p))
(Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql gv0)), (Abs (q ++ ql) (merge gv0 q)), (Abs (q ++ ql) (merge gv0 p)), (Abs (q ++ ql) (merge gv0 ql)), (Abs (q ++ ql) (merge gv0 gv0)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a gv0))
(Abs (q ++ ql) (insert k q)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k gv0)), (Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap p)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap gv0)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ p))
(Abs (q ++ ql) (q ++ gv0)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ gv0)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ gv0)), (Abs (q ++ ql) (gv0 ++ q))
(Abs (q ++ ql) (gv0 ++ p)), (Abs (q ++ ql) (gv0 ++ ql)), (Abs (q ++ ql) (gv0 ++ gv0)), (Abs (q ++ ql) []), (Abs (q ++ gv0) q), (Abs (q ++ gv0) p), (Abs (q ++ gv0) ql), (Abs (q ++ gv0) gv0), (Abs (q ++ gv0) (a :: q)), (Abs (q ++ gv0) (a :: p))
(Abs (q ++ gv0) (a :: ql)), (Abs (q ++ gv0) (a :: gv0)), (Abs (q ++ gv0) (k :: q)), (Abs (q ++ gv0) (k :: p)), (Abs (q ++ gv0) (k :: ql)), (Abs (q ++ gv0) (k :: gv0)), (Abs (q ++ gv0) (merge q q)), (Abs (q ++ gv0) (merge q p)), (Abs (q ++ gv0) (merge q ql)), (Abs (q ++ gv0) (merge q gv0))
(Abs (q ++ gv0) (merge p q)), (Abs (q ++ gv0) (merge p p)), (Abs (q ++ gv0) (merge p ql)), (Abs (q ++ gv0) (merge p gv0)), (Abs (q ++ gv0) (merge ql q)), (Abs (q ++ gv0) (merge ql p)), (Abs (q ++ gv0) (merge ql ql)), (Abs (q ++ gv0) (merge ql gv0)), (Abs (q ++ gv0) (merge gv0 q)), (Abs (q ++ gv0) (merge gv0 p))
(Abs (q ++ gv0) (merge gv0 ql)), (Abs (q ++ gv0) (merge gv0 gv0)), (Abs (q ++ gv0) (insert a q)), (Abs (q ++ gv0) (insert a p)), (Abs (q ++ gv0) (insert a ql)), (Abs (q ++ gv0) (insert a gv0)), (Abs (q ++ gv0) (insert k q)), (Abs (q ++ gv0) (insert k p)), (Abs (q ++ gv0) (insert k ql)), (Abs (q ++ gv0) (insert k gv0))
(Abs (q ++ gv0) (maybe_swap q)), (Abs (q ++ gv0) (maybe_swap p)), (Abs (q ++ gv0) (maybe_swap ql)), (Abs (q ++ gv0) (maybe_swap gv0)), (Abs (q ++ gv0) (q ++ q)), (Abs (q ++ gv0) (q ++ p)), (Abs (q ++ gv0) (q ++ ql)), (Abs (q ++ gv0) (p ++ q)), (Abs (q ++ gv0) (p ++ p)), (Abs (q ++ gv0) (p ++ ql))
(Abs (q ++ gv0) (p ++ gv0)), (Abs (q ++ gv0) (ql ++ q)), (Abs (q ++ gv0) (ql ++ p)), (Abs (q ++ gv0) (ql ++ ql)), (Abs (q ++ gv0) (ql ++ gv0)), (Abs (q ++ gv0) (gv0 ++ q)), (Abs (q ++ gv0) (gv0 ++ p)), (Abs (q ++ gv0) (gv0 ++ ql)), (Abs (q ++ gv0) (gv0 ++ gv0)), (Abs (q ++ gv0) [])
(Abs (p ++ q) q), (Abs (p ++ q) p), (Abs (p ++ q) ql), (Abs (p ++ q) gv0), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: gv0)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p))
(Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: gv0)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q gv0)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p gv0))
(Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql p)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql gv0)), (Abs (p ++ q) (merge gv0 q)), (Abs (p ++ q) (merge gv0 p)), (Abs (p ++ q) (merge gv0 ql)), (Abs (p ++ q) (merge gv0 gv0)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a gv0)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k gv0)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap gv0))
(Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ gv0)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ gv0)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (ql ++ ql))
(Abs (p ++ q) (ql ++ gv0)), (Abs (p ++ q) (gv0 ++ q)), (Abs (p ++ q) (gv0 ++ p)), (Abs (p ++ q) (gv0 ++ ql)), (Abs (p ++ q) (gv0 ++ gv0)), (Abs (p ++ q) []), (Abs (p ++ p) q), (Abs (p ++ p) p), (Abs (p ++ p) ql), (Abs (p ++ p) gv0)
(Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: gv0)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: gv0)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q gv0)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p gv0)), (Abs (p ++ p) (merge ql q)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql gv0))
(Abs (p ++ p) (merge gv0 q)), (Abs (p ++ p) (merge gv0 p)), (Abs (p ++ p) (merge gv0 ql)), (Abs (p ++ p) (merge gv0 gv0)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a gv0)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k p))
(Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k gv0)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap gv0)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ gv0))
(Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ gv0)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ p)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ gv0)), (Abs (p ++ p) (gv0 ++ q)), (Abs (p ++ p) (gv0 ++ p)), (Abs (p ++ p) (gv0 ++ ql))
(Abs (p ++ p) (gv0 ++ gv0)), (Abs (p ++ p) []), (Abs (p ++ ql) q), (Abs (p ++ ql) p), (Abs (p ++ ql) ql), (Abs (p ++ ql) gv0), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: p)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: gv0))
(Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: gv0)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q gv0)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p p))
(Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p gv0)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql gv0)), (Abs (p ++ ql) (merge gv0 q)), (Abs (p ++ ql) (merge gv0 p)), (Abs (p ++ ql) (merge gv0 ql)), (Abs (p ++ ql) (merge gv0 gv0))
(Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a gv0)), (Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k p)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k gv0)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap p))
(Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap gv0)), (Abs (p ++ ql) (q ++ q)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ gv0)), (Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) (p ++ gv0)), (Abs (p ++ ql) (ql ++ q))
(Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ gv0)), (Abs (p ++ ql) (gv0 ++ q)), (Abs (p ++ ql) (gv0 ++ p)), (Abs (p ++ ql) (gv0 ++ ql)), (Abs (p ++ ql) (gv0 ++ gv0)), (Abs (p ++ ql) []), (Abs (p ++ gv0) q), (Abs (p ++ gv0) p)
(Abs (p ++ gv0) ql), (Abs (p ++ gv0) gv0), (Abs (p ++ gv0) (a :: q)), (Abs (p ++ gv0) (a :: p)), (Abs (p ++ gv0) (a :: ql)), (Abs (p ++ gv0) (a :: gv0)), (Abs (p ++ gv0) (k :: q)), (Abs (p ++ gv0) (k :: p)), (Abs (p ++ gv0) (k :: ql)), (Abs (p ++ gv0) (k :: gv0))
(Abs (p ++ gv0) (merge q q)), (Abs (p ++ gv0) (merge q p)), (Abs (p ++ gv0) (merge q ql)), (Abs (p ++ gv0) (merge q gv0)), (Abs (p ++ gv0) (merge p q)), (Abs (p ++ gv0) (merge p p)), (Abs (p ++ gv0) (merge p ql)), (Abs (p ++ gv0) (merge p gv0)), (Abs (p ++ gv0) (merge ql q)), (Abs (p ++ gv0) (merge ql p))
(Abs (p ++ gv0) (merge ql ql)), (Abs (p ++ gv0) (merge ql gv0)), (Abs (p ++ gv0) (merge gv0 q)), (Abs (p ++ gv0) (merge gv0 p)), (Abs (p ++ gv0) (merge gv0 ql)), (Abs (p ++ gv0) (merge gv0 gv0)), (Abs (p ++ gv0) (insert a q)), (Abs (p ++ gv0) (insert a p)), (Abs (p ++ gv0) (insert a ql)), (Abs (p ++ gv0) (insert a gv0))
(Abs (p ++ gv0) (insert k q)), (Abs (p ++ gv0) (insert k p)), (Abs (p ++ gv0) (insert k ql)), (Abs (p ++ gv0) (insert k gv0)), (Abs (p ++ gv0) (maybe_swap q)), (Abs (p ++ gv0) (maybe_swap p)), (Abs (p ++ gv0) (maybe_swap ql)), (Abs (p ++ gv0) (maybe_swap gv0)), (Abs (p ++ gv0) (q ++ q)), (Abs (p ++ gv0) (q ++ p))
(Abs (p ++ gv0) (q ++ ql)), (Abs (p ++ gv0) (q ++ gv0)), (Abs (p ++ gv0) (p ++ q)), (Abs (p ++ gv0) (p ++ p)), (Abs (p ++ gv0) (p ++ ql)), (Abs (p ++ gv0) (ql ++ q)), (Abs (p ++ gv0) (ql ++ p)), (Abs (p ++ gv0) (ql ++ ql)), (Abs (p ++ gv0) (ql ++ gv0)), (Abs (p ++ gv0) (gv0 ++ q))
(Abs (p ++ gv0) (gv0 ++ p)), (Abs (p ++ gv0) (gv0 ++ ql)), (Abs (p ++ gv0) (gv0 ++ gv0)), (Abs (p ++ gv0) []), (Abs (ql ++ q) q), (Abs (ql ++ q) p), (Abs (ql ++ q) ql), (Abs (ql ++ q) gv0), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: p))
(Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: gv0)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: p)), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: gv0)), (Abs (ql ++ q) (merge q q)), (Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q gv0))
(Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p p)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p gv0)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql gv0)), (Abs (ql ++ q) (merge gv0 q)), (Abs (ql ++ q) (merge gv0 p))
(Abs (ql ++ q) (merge gv0 ql)), (Abs (ql ++ q) (merge gv0 gv0)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a gv0)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k gv0))
(Abs (ql ++ q) (maybe_swap q)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap gv0)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ gv0)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ p))
(Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ gv0)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ gv0)), (Abs (ql ++ q) (gv0 ++ q)), (Abs (ql ++ q) (gv0 ++ p)), (Abs (ql ++ q) (gv0 ++ ql)), (Abs (ql ++ q) (gv0 ++ gv0)), (Abs (ql ++ q) [])
(Abs (ql ++ p) q), (Abs (ql ++ p) p), (Abs (ql ++ p) ql), (Abs (ql ++ p) gv0), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: gv0)), (Abs (ql ++ p) (k :: q)), (Abs (ql ++ p) (k :: p))
(Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: gv0)), (Abs (ql ++ p) (merge q q)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q gv0)), (Abs (ql ++ p) (merge p q)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p gv0))
(Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql p)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql gv0)), (Abs (ql ++ p) (merge gv0 q)), (Abs (ql ++ p) (merge gv0 p)), (Abs (ql ++ p) (merge gv0 ql)), (Abs (ql ++ p) (merge gv0 gv0)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a p))
(Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a gv0)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k gv0)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap gv0))
(Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ p)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ gv0)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ gv0)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ ql))
(Abs (ql ++ p) (ql ++ gv0)), (Abs (ql ++ p) (gv0 ++ q)), (Abs (ql ++ p) (gv0 ++ p)), (Abs (ql ++ p) (gv0 ++ ql)), (Abs (ql ++ p) (gv0 ++ gv0)), (Abs (ql ++ p) []), (Abs (ql ++ ql) q), (Abs (ql ++ ql) p), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) gv0)
(Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: gv0)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: gv0)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q p))
(Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q gv0)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p gv0)), (Abs (ql ++ ql) (merge ql q)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql gv0))
(Abs (ql ++ ql) (merge gv0 q)), (Abs (ql ++ ql) (merge gv0 p)), (Abs (ql ++ ql) (merge gv0 ql)), (Abs (ql ++ ql) (merge gv0 gv0)), (Abs (ql ++ ql) (insert a q)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a gv0)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k p))
(Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k gv0)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap gv0)), (Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (q ++ ql)), (Abs (ql ++ ql) (q ++ gv0))
(Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ gv0)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (ql ++ gv0)), (Abs (ql ++ ql) (gv0 ++ q)), (Abs (ql ++ ql) (gv0 ++ p)), (Abs (ql ++ ql) (gv0 ++ ql))
(Abs (ql ++ ql) (gv0 ++ gv0)), (Abs (ql ++ ql) []), (Abs (ql ++ gv0) q), (Abs (ql ++ gv0) p), (Abs (ql ++ gv0) ql), (Abs (ql ++ gv0) gv0), (Abs (ql ++ gv0) (a :: q)), (Abs (ql ++ gv0) (a :: p)), (Abs (ql ++ gv0) (a :: ql)), (Abs (ql ++ gv0) (a :: gv0))
(Abs (ql ++ gv0) (k :: q)), (Abs (ql ++ gv0) (k :: p)), (Abs (ql ++ gv0) (k :: ql)), (Abs (ql ++ gv0) (k :: gv0)), (Abs (ql ++ gv0) (merge q q)), (Abs (ql ++ gv0) (merge q p)), (Abs (ql ++ gv0) (merge q ql)), (Abs (ql ++ gv0) (merge q gv0)), (Abs (ql ++ gv0) (merge p q)), (Abs (ql ++ gv0) (merge p p))
(Abs (ql ++ gv0) (merge p ql)), (Abs (ql ++ gv0) (merge p gv0)), (Abs (ql ++ gv0) (merge ql q)), (Abs (ql ++ gv0) (merge ql p)), (Abs (ql ++ gv0) (merge ql ql)), (Abs (ql ++ gv0) (merge ql gv0)), (Abs (ql ++ gv0) (merge gv0 q)), (Abs (ql ++ gv0) (merge gv0 p)), (Abs (ql ++ gv0) (merge gv0 ql)), (Abs (ql ++ gv0) (merge gv0 gv0))
(Abs (ql ++ gv0) (insert a q)), (Abs (ql ++ gv0) (insert a p)), (Abs (ql ++ gv0) (insert a ql)), (Abs (ql ++ gv0) (insert a gv0)), (Abs (ql ++ gv0) (insert k q)), (Abs (ql ++ gv0) (insert k p)), (Abs (ql ++ gv0) (insert k ql)), (Abs (ql ++ gv0) (insert k gv0)), (Abs (ql ++ gv0) (maybe_swap q)), (Abs (ql ++ gv0) (maybe_swap p))
(Abs (ql ++ gv0) (maybe_swap ql)), (Abs (ql ++ gv0) (maybe_swap gv0)), (Abs (ql ++ gv0) (q ++ q)), (Abs (ql ++ gv0) (q ++ p)), (Abs (ql ++ gv0) (q ++ ql)), (Abs (ql ++ gv0) (q ++ gv0)), (Abs (ql ++ gv0) (p ++ q)), (Abs (ql ++ gv0) (p ++ p)), (Abs (ql ++ gv0) (p ++ ql)), (Abs (ql ++ gv0) (p ++ gv0))
(Abs (ql ++ gv0) (ql ++ q)), (Abs (ql ++ gv0) (ql ++ p)), (Abs (ql ++ gv0) (ql ++ ql)), (Abs (ql ++ gv0) (gv0 ++ q)), (Abs (ql ++ gv0) (gv0 ++ p)), (Abs (ql ++ gv0) (gv0 ++ ql)), (Abs (ql ++ gv0) (gv0 ++ gv0)), (Abs (ql ++ gv0) []), (Abs (gv0 ++ q) q), (Abs (gv0 ++ q) p)
(Abs (gv0 ++ q) ql), (Abs (gv0 ++ q) gv0), (Abs (gv0 ++ q) (a :: q)), (Abs (gv0 ++ q) (a :: p)), (Abs (gv0 ++ q) (a :: ql)), (Abs (gv0 ++ q) (a :: gv0)), (Abs (gv0 ++ q) (k :: q)), (Abs (gv0 ++ q) (k :: p)), (Abs (gv0 ++ q) (k :: ql)), (Abs (gv0 ++ q) (k :: gv0))
(Abs (gv0 ++ q) (merge q q)), (Abs (gv0 ++ q) (merge q p)), (Abs (gv0 ++ q) (merge q ql)), (Abs (gv0 ++ q) (merge q gv0)), (Abs (gv0 ++ q) (merge p q)), (Abs (gv0 ++ q) (merge p p)), (Abs (gv0 ++ q) (merge p ql)), (Abs (gv0 ++ q) (merge p gv0)), (Abs (gv0 ++ q) (merge ql q)), (Abs (gv0 ++ q) (merge ql p))
(Abs (gv0 ++ q) (merge ql ql)), (Abs (gv0 ++ q) (merge ql gv0)), (Abs (gv0 ++ q) (merge gv0 q)), (Abs (gv0 ++ q) (merge gv0 p)), (Abs (gv0 ++ q) (merge gv0 ql)), (Abs (gv0 ++ q) (merge gv0 gv0)), (Abs (gv0 ++ q) (insert a q)), (Abs (gv0 ++ q) (insert a p)), (Abs (gv0 ++ q) (insert a ql)), (Abs (gv0 ++ q) (insert a gv0))
(Abs (gv0 ++ q) (insert k q)), (Abs (gv0 ++ q) (insert k p)), (Abs (gv0 ++ q) (insert k ql)), (Abs (gv0 ++ q) (insert k gv0)), (Abs (gv0 ++ q) (maybe_swap q)), (Abs (gv0 ++ q) (maybe_swap p)), (Abs (gv0 ++ q) (maybe_swap ql)), (Abs (gv0 ++ q) (maybe_swap gv0)), (Abs (gv0 ++ q) (q ++ q)), (Abs (gv0 ++ q) (q ++ p))
(Abs (gv0 ++ q) (q ++ ql)), (Abs (gv0 ++ q) (q ++ gv0)), (Abs (gv0 ++ q) (p ++ q)), (Abs (gv0 ++ q) (p ++ p)), (Abs (gv0 ++ q) (p ++ ql)), (Abs (gv0 ++ q) (p ++ gv0)), (Abs (gv0 ++ q) (ql ++ q)), (Abs (gv0 ++ q) (ql ++ p)), (Abs (gv0 ++ q) (ql ++ ql)), (Abs (gv0 ++ q) (ql ++ gv0))
(Abs (gv0 ++ q) (gv0 ++ p)), (Abs (gv0 ++ q) (gv0 ++ ql)), (Abs (gv0 ++ q) (gv0 ++ gv0)), (Abs (gv0 ++ q) []), (Abs (gv0 ++ p) q), (Abs (gv0 ++ p) p), (Abs (gv0 ++ p) ql), (Abs (gv0 ++ p) gv0), (Abs (gv0 ++ p) (a :: q)), (Abs (gv0 ++ p) (a :: p))
(Abs (gv0 ++ p) (a :: ql)), (Abs (gv0 ++ p) (a :: gv0)), (Abs (gv0 ++ p) (k :: q)), (Abs (gv0 ++ p) (k :: p)), (Abs (gv0 ++ p) (k :: ql)), (Abs (gv0 ++ p) (k :: gv0)), (Abs (gv0 ++ p) (merge q q)), (Abs (gv0 ++ p) (merge q p)), (Abs (gv0 ++ p) (merge q ql)), (Abs (gv0 ++ p) (merge q gv0))
(Abs (gv0 ++ p) (merge p q)), (Abs (gv0 ++ p) (merge p p)), (Abs (gv0 ++ p) (merge p ql)), (Abs (gv0 ++ p) (merge p gv0)), (Abs (gv0 ++ p) (merge ql q)), (Abs (gv0 ++ p) (merge ql p)), (Abs (gv0 ++ p) (merge ql ql)), (Abs (gv0 ++ p) (merge ql gv0)), (Abs (gv0 ++ p) (merge gv0 q)), (Abs (gv0 ++ p) (merge gv0 p))
(Abs (gv0 ++ p) (merge gv0 ql)), (Abs (gv0 ++ p) (merge gv0 gv0)), (Abs (gv0 ++ p) (insert a q)), (Abs (gv0 ++ p) (insert a p)), (Abs (gv0 ++ p) (insert a ql)), (Abs (gv0 ++ p) (insert a gv0)), (Abs (gv0 ++ p) (insert k q)), (Abs (gv0 ++ p) (insert k p)), (Abs (gv0 ++ p) (insert k ql)), (Abs (gv0 ++ p) (insert k gv0))
(Abs (gv0 ++ p) (maybe_swap q)), (Abs (gv0 ++ p) (maybe_swap p)), (Abs (gv0 ++ p) (maybe_swap ql)), (Abs (gv0 ++ p) (maybe_swap gv0)), (Abs (gv0 ++ p) (q ++ q)), (Abs (gv0 ++ p) (q ++ p)), (Abs (gv0 ++ p) (q ++ ql)), (Abs (gv0 ++ p) (q ++ gv0)), (Abs (gv0 ++ p) (p ++ q)), (Abs (gv0 ++ p) (p ++ p))
(Abs (gv0 ++ p) (p ++ ql)), (Abs (gv0 ++ p) (p ++ gv0)), (Abs (gv0 ++ p) (ql ++ q)), (Abs (gv0 ++ p) (ql ++ p)), (Abs (gv0 ++ p) (ql ++ ql)), (Abs (gv0 ++ p) (ql ++ gv0)), (Abs (gv0 ++ p) (gv0 ++ q)), (Abs (gv0 ++ p) (gv0 ++ ql)), (Abs (gv0 ++ p) (gv0 ++ gv0)), (Abs (gv0 ++ p) [])
(Abs (gv0 ++ ql) q), (Abs (gv0 ++ ql) p), (Abs (gv0 ++ ql) ql), (Abs (gv0 ++ ql) gv0), (Abs (gv0 ++ ql) (a :: q)), (Abs (gv0 ++ ql) (a :: p)), (Abs (gv0 ++ ql) (a :: ql)), (Abs (gv0 ++ ql) (a :: gv0)), (Abs (gv0 ++ ql) (k :: q)), (Abs (gv0 ++ ql) (k :: p))
(Abs (gv0 ++ ql) (k :: ql)), (Abs (gv0 ++ ql) (k :: gv0)), (Abs (gv0 ++ ql) (merge q q)), (Abs (gv0 ++ ql) (merge q p)), (Abs (gv0 ++ ql) (merge q ql)), (Abs (gv0 ++ ql) (merge q gv0)), (Abs (gv0 ++ ql) (merge p q)), (Abs (gv0 ++ ql) (merge p p)), (Abs (gv0 ++ ql) (merge p ql)), (Abs (gv0 ++ ql) (merge p gv0))
(Abs (gv0 ++ ql) (merge ql q)), (Abs (gv0 ++ ql) (merge ql p)), (Abs (gv0 ++ ql) (merge ql ql)), (Abs (gv0 ++ ql) (merge ql gv0)), (Abs (gv0 ++ ql) (merge gv0 q)), (Abs (gv0 ++ ql) (merge gv0 p)), (Abs (gv0 ++ ql) (merge gv0 ql)), (Abs (gv0 ++ ql) (merge gv0 gv0)), (Abs (gv0 ++ ql) (insert a q)), (Abs (gv0 ++ ql) (insert a p))
(Abs (gv0 ++ ql) (insert a ql)), (Abs (gv0 ++ ql) (insert a gv0)), (Abs (gv0 ++ ql) (insert k q)), (Abs (gv0 ++ ql) (insert k p)), (Abs (gv0 ++ ql) (insert k ql)), (Abs (gv0 ++ ql) (insert k gv0)), (Abs (gv0 ++ ql) (maybe_swap q)), (Abs (gv0 ++ ql) (maybe_swap p)), (Abs (gv0 ++ ql) (maybe_swap ql)), (Abs (gv0 ++ ql) (maybe_swap gv0))
(Abs (gv0 ++ ql) (q ++ q)), (Abs (gv0 ++ ql) (q ++ p)), (Abs (gv0 ++ ql) (q ++ ql)), (Abs (gv0 ++ ql) (q ++ gv0)), (Abs (gv0 ++ ql) (p ++ q)), (Abs (gv0 ++ ql) (p ++ p)), (Abs (gv0 ++ ql) (p ++ ql)), (Abs (gv0 ++ ql) (p ++ gv0)), (Abs (gv0 ++ ql) (ql ++ q)), (Abs (gv0 ++ ql) (ql ++ p))
(Abs (gv0 ++ ql) (ql ++ ql)), (Abs (gv0 ++ ql) (ql ++ gv0)), (Abs (gv0 ++ ql) (gv0 ++ q)), (Abs (gv0 ++ ql) (gv0 ++ p)), (Abs (gv0 ++ ql) (gv0 ++ gv0)), (Abs (gv0 ++ ql) []), (Abs (gv0 ++ gv0) q), (Abs (gv0 ++ gv0) p), (Abs (gv0 ++ gv0) ql), (Abs (gv0 ++ gv0) gv0)
(Abs (gv0 ++ gv0) (a :: q)), (Abs (gv0 ++ gv0) (a :: p)), (Abs (gv0 ++ gv0) (a :: ql)), (Abs (gv0 ++ gv0) (a :: gv0)), (Abs (gv0 ++ gv0) (k :: q)), (Abs (gv0 ++ gv0) (k :: p)), (Abs (gv0 ++ gv0) (k :: ql)), (Abs (gv0 ++ gv0) (k :: gv0)), (Abs (gv0 ++ gv0) (merge q q)), (Abs (gv0 ++ gv0) (merge q p))
(Abs (gv0 ++ gv0) (merge q ql)), (Abs (gv0 ++ gv0) (merge q gv0)), (Abs (gv0 ++ gv0) (merge p q)), (Abs (gv0 ++ gv0) (merge p p)), (Abs (gv0 ++ gv0) (merge p ql)), (Abs (gv0 ++ gv0) (merge p gv0)), (Abs (gv0 ++ gv0) (merge ql q)), (Abs (gv0 ++ gv0) (merge ql p)), (Abs (gv0 ++ gv0) (merge ql ql)), (Abs (gv0 ++ gv0) (merge ql gv0))
(Abs (gv0 ++ gv0) (merge gv0 q)), (Abs (gv0 ++ gv0) (merge gv0 p)), (Abs (gv0 ++ gv0) (merge gv0 ql)), (Abs (gv0 ++ gv0) (merge gv0 gv0)), (Abs (gv0 ++ gv0) (insert a q)), (Abs (gv0 ++ gv0) (insert a p)), (Abs (gv0 ++ gv0) (insert a ql)), (Abs (gv0 ++ gv0) (insert a gv0)), (Abs (gv0 ++ gv0) (insert k q)), (Abs (gv0 ++ gv0) (insert k p))
(Abs (gv0 ++ gv0) (insert k ql)), (Abs (gv0 ++ gv0) (insert k gv0)), (Abs (gv0 ++ gv0) (maybe_swap q)), (Abs (gv0 ++ gv0) (maybe_swap p)), (Abs (gv0 ++ gv0) (maybe_swap ql)), (Abs (gv0 ++ gv0) (maybe_swap gv0)), (Abs (gv0 ++ gv0) (q ++ q)), (Abs (gv0 ++ gv0) (q ++ p)), (Abs (gv0 ++ gv0) (q ++ ql)), (Abs (gv0 ++ gv0) (q ++ gv0))
(Abs (gv0 ++ gv0) (p ++ q)), (Abs (gv0 ++ gv0) (p ++ p)), (Abs (gv0 ++ gv0) (p ++ ql)), (Abs (gv0 ++ gv0) (p ++ gv0)), (Abs (gv0 ++ gv0) (ql ++ q)), (Abs (gv0 ++ gv0) (ql ++ p)), (Abs (gv0 ++ gv0) (ql ++ ql)), (Abs (gv0 ++ gv0) (ql ++ gv0)), (Abs (gv0 ++ gv0) (gv0 ++ q)), (Abs (gv0 ++ gv0) (gv0 ++ p))
(Abs (gv0 ++ gv0) (gv0 ++ ql)), (Abs (gv0 ++ gv0) []), (Abs [] q), (Abs [] p), (Abs [] ql), (Abs [] gv0), (Abs [] (a :: q)), (Abs [] (a :: p)), (Abs [] (a :: ql)), (Abs [] (a :: gv0))
(Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (k :: ql)), (Abs [] (k :: gv0)), (Abs [] (merge q q)), (Abs [] (merge q p)), (Abs [] (merge q ql)), (Abs [] (merge q gv0)), (Abs [] (merge p q)), (Abs [] (merge p p))
(Abs [] (merge p ql)), (Abs [] (merge p gv0)), (Abs [] (merge ql q)), (Abs [] (merge ql p)), (Abs [] (merge ql ql)), (Abs [] (merge ql gv0)), (Abs [] (merge gv0 q)), (Abs [] (merge gv0 p)), (Abs [] (merge gv0 ql)), (Abs [] (merge gv0 gv0))
(Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (insert a ql)), (Abs [] (insert a gv0)), (Abs [] (insert k q)), (Abs [] (insert k p)), (Abs [] (insert k ql)), (Abs [] (insert k gv0)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap p))
(Abs [] (maybe_swap ql)), (Abs [] (maybe_swap gv0)), (Abs [] (q ++ q)), (Abs [] (q ++ p)), (Abs [] (q ++ ql)), (Abs [] (q ++ gv0)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (Abs [] (p ++ ql)), (Abs [] (p ++ gv0))
(Abs [] (ql ++ q)), (Abs [] (ql ++ p)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ gv0)), (Abs [] (gv0 ++ q)), (Abs [] (gv0 ++ p)), (Abs [] (gv0 ++ ql)), (Abs [] (gv0 ++ gv0)), (priq (a :: q)), (priq (a :: p))
(priq (a :: ql)), (priq (a :: gv0)), (priq (k :: q)), (priq (k :: p)), (priq (k :: ql)), (priq (k :: gv0)), (priq (merge q q)), (priq (merge q p)), (priq (merge q ql)), (priq (merge q gv0))
(priq (merge p q)), (priq (merge p p)), (priq (merge p ql)), (priq (merge p gv0)), (priq (merge ql q)), (priq (merge ql p)), (priq (merge ql ql)), (priq (merge ql gv0)), (priq (merge gv0 q)), (priq (merge gv0 p))
(priq (merge gv0 ql)), (priq (merge gv0 gv0)), (priq (insert a q)), (priq (insert a p)), (priq (insert a ql)), (priq (insert a gv0)), (priq (insert k q)), (priq (insert k p)), (priq (insert k ql)), (priq (insert k gv0))
(priq (maybe_swap q)), (priq (maybe_swap p)), (priq (maybe_swap ql)), (priq (maybe_swap gv0)), (priq (q ++ q)), (priq (q ++ p)), (priq (q ++ ql)), (priq (q ++ gv0)), (priq (p ++ q)), (priq (p ++ p))
(priq (p ++ ql)), (priq (p ++ gv0)), (priq (ql ++ q)), (priq (ql ++ p)), (priq (ql ++ ql)), (priq (ql ++ gv0)), (priq (gv0 ++ q)), (priq (gv0 ++ p)), (priq (gv0 ++ ql)), (priq (gv0 ++ gv0))
(priq []), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (a :: ql)), (Permutation q (a :: gv0)), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (k :: ql)), (Permutation q (k :: gv0)), (Permutation q (merge q q))
(Permutation q (merge q p)), (Permutation q (merge q ql)), (Permutation q (merge q gv0)), (Permutation q (merge p q)), (Permutation q (merge p p)), (Permutation q (merge p ql)), (Permutation q (merge p gv0)), (Permutation q (merge ql q)), (Permutation q (merge ql p)), (Permutation q (merge ql ql))
(Permutation q (merge ql gv0)), (Permutation q (merge gv0 q)), (Permutation q (merge gv0 p)), (Permutation q (merge gv0 ql)), (Permutation q (merge gv0 gv0)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (insert a ql)), (Permutation q (insert a gv0)), (Permutation q (insert k q))
(Permutation q (insert k p)), (Permutation q (insert k ql)), (Permutation q (insert k gv0)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap gv0)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (q ++ ql))
(Permutation q (q ++ gv0)), (Permutation q (p ++ q)), (Permutation q (p ++ p)), (Permutation q (p ++ ql)), (Permutation q (p ++ gv0)), (Permutation q (ql ++ q)), (Permutation q (ql ++ p)), (Permutation q (ql ++ ql)), (Permutation q (ql ++ gv0)), (Permutation q (gv0 ++ q))
(Permutation q (gv0 ++ p)), (Permutation q (gv0 ++ ql)), (Permutation q (gv0 ++ gv0)), (Permutation q []), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (a :: ql)), (Permutation p (a :: gv0)), (Permutation p (k :: q)), (Permutation p (k :: p))
(Permutation p (k :: ql)), (Permutation p (k :: gv0)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge q ql)), (Permutation p (merge q gv0)), (Permutation p (merge p q)), (Permutation p (merge p p)), (Permutation p (merge p ql)), (Permutation p (merge p gv0))
(Permutation p (merge ql q)), (Permutation p (merge ql p)), (Permutation p (merge ql ql)), (Permutation p (merge ql gv0)), (Permutation p (merge gv0 q)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 ql)), (Permutation p (merge gv0 gv0)), (Permutation p (insert a q)), (Permutation p (insert a p))
(Permutation p (insert a ql)), (Permutation p (insert a gv0)), (Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert k ql)), (Permutation p (insert k gv0)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap gv0))
(Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (q ++ ql)), (Permutation p (q ++ gv0)), (Permutation p (p ++ q)), (Permutation p (p ++ p)), (Permutation p (p ++ ql)), (Permutation p (p ++ gv0)), (Permutation p (ql ++ q)), (Permutation p (ql ++ p))
(Permutation p (ql ++ ql)), (Permutation p (ql ++ gv0)), (Permutation p (gv0 ++ q)), (Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ ql)), (Permutation p (gv0 ++ gv0)), (Permutation p []), (Permutation ql (a :: q)), (Permutation ql (a :: p)), (Permutation ql (a :: ql))
(Permutation ql (a :: gv0)), (Permutation ql (k :: q)), (Permutation ql (k :: p)), (Permutation ql (k :: ql)), (Permutation ql (k :: gv0)), (Permutation ql (merge q q)), (Permutation ql (merge q p)), (Permutation ql (merge q ql)), (Permutation ql (merge q gv0)), (Permutation ql (merge p q))
(Permutation ql (merge p p)), (Permutation ql (merge p ql)), (Permutation ql (merge p gv0)), (Permutation ql (merge ql q)), (Permutation ql (merge ql p)), (Permutation ql (merge ql ql)), (Permutation ql (merge ql gv0)), (Permutation ql (merge gv0 q)), (Permutation ql (merge gv0 p)), (Permutation ql (merge gv0 ql))
(Permutation ql (merge gv0 gv0)), (Permutation ql (insert a q)), (Permutation ql (insert a p)), (Permutation ql (insert a ql)), (Permutation ql (insert a gv0)), (Permutation ql (insert k q)), (Permutation ql (insert k p)), (Permutation ql (insert k ql)), (Permutation ql (insert k gv0)), (Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap p)), (Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap gv0)), (Permutation ql (q ++ q)), (Permutation ql (q ++ p)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ gv0)), (Permutation ql (p ++ q)), (Permutation ql (p ++ p)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ gv0)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ p)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ gv0)), (Permutation ql (gv0 ++ q)), (Permutation ql (gv0 ++ p)), (Permutation ql (gv0 ++ ql)), (Permutation ql (gv0 ++ gv0)), (Permutation ql [])
(Permutation gv0 (a :: q)), (Permutation gv0 (a :: p)), (Permutation gv0 (a :: ql)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (k :: q)), (Permutation gv0 (k :: p)), (Permutation gv0 (k :: ql)), (Permutation gv0 (k :: gv0)), (Permutation gv0 (merge q q)), (Permutation gv0 (merge q p))
(Permutation gv0 (merge q ql)), (Permutation gv0 (merge q gv0)), (Permutation gv0 (merge p q)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p ql)), (Permutation gv0 (merge p gv0)), (Permutation gv0 (merge ql q)), (Permutation gv0 (merge ql p)), (Permutation gv0 (merge ql ql)), (Permutation gv0 (merge ql gv0))
(Permutation gv0 (merge gv0 q)), (Permutation gv0 (merge gv0 p)), (Permutation gv0 (merge gv0 ql)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (insert a q)), (Permutation gv0 (insert a p)), (Permutation gv0 (insert a ql)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (insert k q)), (Permutation gv0 (insert k p))
(Permutation gv0 (insert k ql)), (Permutation gv0 (insert k gv0)), (Permutation gv0 (maybe_swap q)), (Permutation gv0 (maybe_swap p)), (Permutation gv0 (maybe_swap ql)), (Permutation gv0 (maybe_swap gv0)), (Permutation gv0 (q ++ q)), (Permutation gv0 (q ++ p)), (Permutation gv0 (q ++ ql)), (Permutation gv0 (q ++ gv0))
(Permutation gv0 (p ++ q)), (Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ ql)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (ql ++ q)), (Permutation gv0 (ql ++ p)), (Permutation gv0 (ql ++ ql)), (Permutation gv0 (ql ++ gv0)), (Permutation gv0 (gv0 ++ q)), (Permutation gv0 (gv0 ++ p))
(Permutation gv0 (gv0 ++ ql)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) ql), (Permutation (a :: q) gv0), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: gv0))
(Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: gv0)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q gv0)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p gv0)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql gv0)), (Permutation (a :: q) (merge gv0 q)), (Permutation (a :: q) (merge gv0 p)), (Permutation (a :: q) (merge gv0 ql)), (Permutation (a :: q) (merge gv0 gv0))
(Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a gv0)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k gv0)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap gv0)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ gv0)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ gv0))
(Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ gv0)), (Permutation (a :: q) (gv0 ++ q)), (Permutation (a :: q) (gv0 ++ p)), (Permutation (a :: q) (gv0 ++ ql)), (Permutation (a :: q) (gv0 ++ gv0)), (Permutation (a :: q) []), (Permutation (a :: p) q)
(Permutation (a :: p) p), (Permutation (a :: p) ql), (Permutation (a :: p) gv0), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: gv0)), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: ql)), (Permutation (a :: p) (k :: gv0))
(Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q gv0)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p gv0)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql gv0)), (Permutation (a :: p) (merge gv0 q)), (Permutation (a :: p) (merge gv0 p)), (Permutation (a :: p) (merge gv0 ql)), (Permutation (a :: p) (merge gv0 gv0)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a gv0))
(Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k gv0)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap gv0)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p))
(Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ gv0)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ gv0)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ gv0))
(Permutation (a :: p) (gv0 ++ q)), (Permutation (a :: p) (gv0 ++ p)), (Permutation (a :: p) (gv0 ++ ql)), (Permutation (a :: p) (gv0 ++ gv0)), (Permutation (a :: p) []), (Permutation (a :: ql) q), (Permutation (a :: ql) p), (Permutation (a :: ql) ql), (Permutation (a :: ql) gv0), (Permutation (a :: ql) (a :: q))
(Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (a :: gv0)), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: gv0)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q gv0))
(Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p gv0)), (Permutation (a :: ql) (merge ql q)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql gv0)), (Permutation (a :: ql) (merge gv0 q)), (Permutation (a :: ql) (merge gv0 p))
(Permutation (a :: ql) (merge gv0 ql)), (Permutation (a :: ql) (merge gv0 gv0)), (Permutation (a :: ql) (insert a q)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a gv0)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k gv0))
(Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap gv0)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ gv0)), (Permutation (a :: ql) (p ++ q)), (Permutation (a :: ql) (p ++ p))
(Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ gv0)), (Permutation (a :: ql) (ql ++ q)), (Permutation (a :: ql) (ql ++ p)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ gv0)), (Permutation (a :: ql) (gv0 ++ q)), (Permutation (a :: ql) (gv0 ++ p)), (Permutation (a :: ql) (gv0 ++ ql)), (Permutation (a :: ql) (gv0 ++ gv0))
(Permutation (a :: ql) []), (Permutation (a :: gv0) q), (Permutation (a :: gv0) p), (Permutation (a :: gv0) ql), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a :: q)), (Permutation (a :: gv0) (a :: p)), (Permutation (a :: gv0) (a :: ql)), (Permutation (a :: gv0) (k :: q)), (Permutation (a :: gv0) (k :: p))
(Permutation (a :: gv0) (k :: ql)), (Permutation (a :: gv0) (k :: gv0)), (Permutation (a :: gv0) (merge q q)), (Permutation (a :: gv0) (merge q p)), (Permutation (a :: gv0) (merge q ql)), (Permutation (a :: gv0) (merge q gv0)), (Permutation (a :: gv0) (merge p q)), (Permutation (a :: gv0) (merge p p)), (Permutation (a :: gv0) (merge p ql)), (Permutation (a :: gv0) (merge p gv0))
(Permutation (a :: gv0) (merge ql q)), (Permutation (a :: gv0) (merge ql p)), (Permutation (a :: gv0) (merge ql ql)), (Permutation (a :: gv0) (merge ql gv0)), (Permutation (a :: gv0) (merge gv0 q)), (Permutation (a :: gv0) (merge gv0 p)), (Permutation (a :: gv0) (merge gv0 ql)), (Permutation (a :: gv0) (merge gv0 gv0)), (Permutation (a :: gv0) (insert a q)), (Permutation (a :: gv0) (insert a p))
(Permutation (a :: gv0) (insert a ql)), (Permutation (a :: gv0) (insert a gv0)), (Permutation (a :: gv0) (insert k q)), (Permutation (a :: gv0) (insert k p)), (Permutation (a :: gv0) (insert k ql)), (Permutation (a :: gv0) (insert k gv0)), (Permutation (a :: gv0) (maybe_swap q)), (Permutation (a :: gv0) (maybe_swap p)), (Permutation (a :: gv0) (maybe_swap ql)), (Permutation (a :: gv0) (maybe_swap gv0))
(Permutation (a :: gv0) (q ++ q)), (Permutation (a :: gv0) (q ++ p)), (Permutation (a :: gv0) (q ++ ql)), (Permutation (a :: gv0) (q ++ gv0)), (Permutation (a :: gv0) (p ++ q)), (Permutation (a :: gv0) (p ++ p)), (Permutation (a :: gv0) (p ++ ql)), (Permutation (a :: gv0) (p ++ gv0)), (Permutation (a :: gv0) (ql ++ q)), (Permutation (a :: gv0) (ql ++ p))
(Permutation (a :: gv0) (ql ++ ql)), (Permutation (a :: gv0) (ql ++ gv0)), (Permutation (a :: gv0) (gv0 ++ q)), (Permutation (a :: gv0) (gv0 ++ p)), (Permutation (a :: gv0) (gv0 ++ ql)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) ql)
(Permutation (k :: q) gv0), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: gv0)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: ql)), (Permutation (k :: q) (k :: gv0)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p))
(Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q gv0)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p gv0)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql gv0))
(Permutation (k :: q) (merge gv0 q)), (Permutation (k :: q) (merge gv0 p)), (Permutation (k :: q) (merge gv0 ql)), (Permutation (k :: q) (merge gv0 gv0)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a gv0)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p))
(Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k gv0)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap gv0)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ gv0))
(Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ gv0)), (Permutation (k :: q) (ql ++ q)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ gv0)), (Permutation (k :: q) (gv0 ++ q)), (Permutation (k :: q) (gv0 ++ p))
(Permutation (k :: q) (gv0 ++ ql)), (Permutation (k :: q) (gv0 ++ gv0)), (Permutation (k :: q) []), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) ql), (Permutation (k :: p) gv0), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: ql))
(Permutation (k :: p) (a :: gv0)), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (k :: gv0)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q gv0)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p p))
(Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p gv0)), (Permutation (k :: p) (merge ql q)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql gv0)), (Permutation (k :: p) (merge gv0 q)), (Permutation (k :: p) (merge gv0 p)), (Permutation (k :: p) (merge gv0 ql)), (Permutation (k :: p) (merge gv0 gv0))
(Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a gv0)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k gv0)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p))
(Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap gv0)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ gv0)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ gv0))
(Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ gv0)), (Permutation (k :: p) (gv0 ++ q)), (Permutation (k :: p) (gv0 ++ p)), (Permutation (k :: p) (gv0 ++ ql)), (Permutation (k :: p) (gv0 ++ gv0)), (Permutation (k :: p) []), (Permutation (k :: ql) q)
(Permutation (k :: ql) p), (Permutation (k :: ql) ql), (Permutation (k :: ql) gv0), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: gv0)), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: p)), (Permutation (k :: ql) (k :: gv0))
(Permutation (k :: ql) (merge q q)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q gv0)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p p)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p gv0)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql p))
(Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql gv0)), (Permutation (k :: ql) (merge gv0 q)), (Permutation (k :: ql) (merge gv0 p)), (Permutation (k :: ql) (merge gv0 ql)), (Permutation (k :: ql) (merge gv0 gv0)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a gv0))
(Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k gv0)), (Permutation (k :: ql) (maybe_swap q)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap gv0)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ p))
(Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ gv0)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ gv0)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ gv0))
(Permutation (k :: ql) (gv0 ++ q)), (Permutation (k :: ql) (gv0 ++ p)), (Permutation (k :: ql) (gv0 ++ ql)), (Permutation (k :: ql) (gv0 ++ gv0)), (Permutation (k :: ql) []), (Permutation (k :: gv0) q), (Permutation (k :: gv0) p), (Permutation (k :: gv0) ql), (Permutation (k :: gv0) gv0), (Permutation (k :: gv0) (a :: q))
(Permutation (k :: gv0) (a :: p)), (Permutation (k :: gv0) (a :: ql)), (Permutation (k :: gv0) (a :: gv0)), (Permutation (k :: gv0) (k :: q)), (Permutation (k :: gv0) (k :: p)), (Permutation (k :: gv0) (k :: ql)), (Permutation (k :: gv0) (merge q q)), (Permutation (k :: gv0) (merge q p)), (Permutation (k :: gv0) (merge q ql)), (Permutation (k :: gv0) (merge q gv0))
(Permutation (k :: gv0) (merge p q)), (Permutation (k :: gv0) (merge p p)), (Permutation (k :: gv0) (merge p ql)), (Permutation (k :: gv0) (merge p gv0)), (Permutation (k :: gv0) (merge ql q)), (Permutation (k :: gv0) (merge ql p)), (Permutation (k :: gv0) (merge ql ql)), (Permutation (k :: gv0) (merge ql gv0)), (Permutation (k :: gv0) (merge gv0 q)), (Permutation (k :: gv0) (merge gv0 p))
(Permutation (k :: gv0) (merge gv0 ql)), (Permutation (k :: gv0) (merge gv0 gv0)), (Permutation (k :: gv0) (insert a q)), (Permutation (k :: gv0) (insert a p)), (Permutation (k :: gv0) (insert a ql)), (Permutation (k :: gv0) (insert a gv0)), (Permutation (k :: gv0) (insert k q)), (Permutation (k :: gv0) (insert k p)), (Permutation (k :: gv0) (insert k ql)), (Permutation (k :: gv0) (insert k gv0))
(Permutation (k :: gv0) (maybe_swap q)), (Permutation (k :: gv0) (maybe_swap p)), (Permutation (k :: gv0) (maybe_swap ql)), (Permutation (k :: gv0) (maybe_swap gv0)), (Permutation (k :: gv0) (q ++ q)), (Permutation (k :: gv0) (q ++ p)), (Permutation (k :: gv0) (q ++ ql)), (Permutation (k :: gv0) (q ++ gv0)), (Permutation (k :: gv0) (p ++ q)), (Permutation (k :: gv0) (p ++ p))
(Permutation (k :: gv0) (p ++ ql)), (Permutation (k :: gv0) (p ++ gv0)), (Permutation (k :: gv0) (ql ++ q)), (Permutation (k :: gv0) (ql ++ p)), (Permutation (k :: gv0) (ql ++ ql)), (Permutation (k :: gv0) (ql ++ gv0)), (Permutation (k :: gv0) (gv0 ++ q)), (Permutation (k :: gv0) (gv0 ++ p)), (Permutation (k :: gv0) (gv0 ++ ql)), (Permutation (k :: gv0) (gv0 ++ gv0))
(Permutation (k :: gv0) []), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) ql), (Permutation (merge q q) gv0), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (a :: ql)), (Permutation (merge q q) (a :: gv0)), (Permutation (merge q q) (k :: q))
(Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: gv0)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q gv0)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p gv0))
(Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql gv0)), (Permutation (merge q q) (merge gv0 q)), (Permutation (merge q q) (merge gv0 p)), (Permutation (merge q q) (merge gv0 ql)), (Permutation (merge q q) (merge gv0 gv0)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a p))
(Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a gv0)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k gv0)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap gv0))
(Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ gv0)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ gv0)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ p))
(Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ gv0)), (Permutation (merge q q) (gv0 ++ q)), (Permutation (merge q q) (gv0 ++ p)), (Permutation (merge q q) (gv0 ++ ql)), (Permutation (merge q q) (gv0 ++ gv0)), (Permutation (merge q q) []), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) ql)
(Permutation (merge q p) gv0), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: gv0)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: gv0)), (Permutation (merge q p) (merge q q))
(Permutation (merge q p) (merge q ql)), (Permutation (merge q p) (merge q gv0)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p p)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p gv0)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql gv0))
(Permutation (merge q p) (merge gv0 q)), (Permutation (merge q p) (merge gv0 p)), (Permutation (merge q p) (merge gv0 ql)), (Permutation (merge q p) (merge gv0 gv0)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a gv0)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p))
(Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k gv0)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap gv0)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ gv0))
(Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ gv0)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ gv0)), (Permutation (merge q p) (gv0 ++ q)), (Permutation (merge q p) (gv0 ++ p))
(Permutation (merge q p) (gv0 ++ ql)), (Permutation (merge q p) (gv0 ++ gv0)), (Permutation (merge q p) []), (Permutation (merge q ql) q), (Permutation (merge q ql) p), (Permutation (merge q ql) ql), (Permutation (merge q ql) gv0), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (a :: ql))
(Permutation (merge q ql) (a :: gv0)), (Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (k :: ql)), (Permutation (merge q ql) (k :: gv0)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge q gv0)), (Permutation (merge q ql) (merge p q)), (Permutation (merge q ql) (merge p p))
(Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p gv0)), (Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql gv0)), (Permutation (merge q ql) (merge gv0 q)), (Permutation (merge q ql) (merge gv0 p)), (Permutation (merge q ql) (merge gv0 ql)), (Permutation (merge q ql) (merge gv0 gv0))
(Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a p)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a gv0)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k gv0)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap p))
(Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap gv0)), (Permutation (merge q ql) (q ++ q)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ gv0)), (Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ p)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ gv0))
(Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ gv0)), (Permutation (merge q ql) (gv0 ++ q)), (Permutation (merge q ql) (gv0 ++ p)), (Permutation (merge q ql) (gv0 ++ ql)), (Permutation (merge q ql) (gv0 ++ gv0)), (Permutation (merge q ql) []), (Permutation (merge q gv0) q)
(Permutation (merge q gv0) p), (Permutation (merge q gv0) ql), (Permutation (merge q gv0) gv0), (Permutation (merge q gv0) (a :: q)), (Permutation (merge q gv0) (a :: p)), (Permutation (merge q gv0) (a :: ql)), (Permutation (merge q gv0) (a :: gv0)), (Permutation (merge q gv0) (k :: q)), (Permutation (merge q gv0) (k :: p)), (Permutation (merge q gv0) (k :: ql))
(Permutation (merge q gv0) (k :: gv0)), (Permutation (merge q gv0) (merge q q)), (Permutation (merge q gv0) (merge q p)), (Permutation (merge q gv0) (merge q ql)), (Permutation (merge q gv0) (merge p q)), (Permutation (merge q gv0) (merge p p)), (Permutation (merge q gv0) (merge p ql)), (Permutation (merge q gv0) (merge p gv0)), (Permutation (merge q gv0) (merge ql q)), (Permutation (merge q gv0) (merge ql p))
(Permutation (merge q gv0) (merge ql ql)), (Permutation (merge q gv0) (merge ql gv0)), (Permutation (merge q gv0) (merge gv0 q)), (Permutation (merge q gv0) (merge gv0 p)), (Permutation (merge q gv0) (merge gv0 ql)), (Permutation (merge q gv0) (merge gv0 gv0)), (Permutation (merge q gv0) (insert a q)), (Permutation (merge q gv0) (insert a p)), (Permutation (merge q gv0) (insert a ql)), (Permutation (merge q gv0) (insert a gv0))
(Permutation (merge q gv0) (insert k q)), (Permutation (merge q gv0) (insert k p)), (Permutation (merge q gv0) (insert k ql)), (Permutation (merge q gv0) (insert k gv0)), (Permutation (merge q gv0) (maybe_swap q)), (Permutation (merge q gv0) (maybe_swap p)), (Permutation (merge q gv0) (maybe_swap ql)), (Permutation (merge q gv0) (maybe_swap gv0)), (Permutation (merge q gv0) (q ++ q)), (Permutation (merge q gv0) (q ++ p))
(Permutation (merge q gv0) (q ++ ql)), (Permutation (merge q gv0) (q ++ gv0)), (Permutation (merge q gv0) (p ++ q)), (Permutation (merge q gv0) (p ++ p)), (Permutation (merge q gv0) (p ++ ql)), (Permutation (merge q gv0) (p ++ gv0)), (Permutation (merge q gv0) (ql ++ q)), (Permutation (merge q gv0) (ql ++ p)), (Permutation (merge q gv0) (ql ++ ql)), (Permutation (merge q gv0) (ql ++ gv0))
(Permutation (merge q gv0) (gv0 ++ q)), (Permutation (merge q gv0) (gv0 ++ p)), (Permutation (merge q gv0) (gv0 ++ ql)), (Permutation (merge q gv0) (gv0 ++ gv0)), (Permutation (merge q gv0) []), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) ql), (Permutation (merge p q) gv0), (Permutation (merge p q) (a :: q))
(Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: gv0)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: gv0)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge q ql))
(Permutation (merge p q) (merge q gv0)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p gv0)), (Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql gv0)), (Permutation (merge p q) (merge gv0 q)), (Permutation (merge p q) (merge gv0 p))
(Permutation (merge p q) (merge gv0 ql)), (Permutation (merge p q) (merge gv0 gv0)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a gv0)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k gv0))
(Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap gv0)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ gv0)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ p))
(Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ gv0)), (Permutation (merge p q) (ql ++ q)), (Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ gv0)), (Permutation (merge p q) (gv0 ++ q)), (Permutation (merge p q) (gv0 ++ p)), (Permutation (merge p q) (gv0 ++ ql)), (Permutation (merge p q) (gv0 ++ gv0))
(Permutation (merge p q) []), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) ql), (Permutation (merge p p) gv0), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: ql)), (Permutation (merge p p) (a :: gv0)), (Permutation (merge p p) (k :: q))
(Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: gv0)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q gv0)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (merge p gv0))
(Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql gv0)), (Permutation (merge p p) (merge gv0 q)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 ql)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a p))
(Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a gv0)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k gv0)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap gv0))
(Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ gv0)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (ql ++ q)), (Permutation (merge p p) (ql ++ p))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ gv0)), (Permutation (merge p p) (gv0 ++ q)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ ql)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) []), (Permutation (merge p ql) q), (Permutation (merge p ql) p), (Permutation (merge p ql) ql)
(Permutation (merge p ql) gv0), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: gv0)), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: gv0)), (Permutation (merge p ql) (merge q q))
(Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge q ql)), (Permutation (merge p ql) (merge q gv0)), (Permutation (merge p ql) (merge p q)), (Permutation (merge p ql) (merge p p)), (Permutation (merge p ql) (merge p gv0)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql gv0))
(Permutation (merge p ql) (merge gv0 q)), (Permutation (merge p ql) (merge gv0 p)), (Permutation (merge p ql) (merge gv0 ql)), (Permutation (merge p ql) (merge gv0 gv0)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a gv0)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k p))
(Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k gv0)), (Permutation (merge p ql) (maybe_swap q)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap gv0)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ p)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ gv0))
(Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ gv0)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ gv0)), (Permutation (merge p ql) (gv0 ++ q)), (Permutation (merge p ql) (gv0 ++ p))
(Permutation (merge p ql) (gv0 ++ ql)), (Permutation (merge p ql) (gv0 ++ gv0)), (Permutation (merge p ql) []), (Permutation (merge p gv0) q), (Permutation (merge p gv0) p), (Permutation (merge p gv0) ql), (Permutation (merge p gv0) gv0), (Permutation (merge p gv0) (a :: q)), (Permutation (merge p gv0) (a :: p)), (Permutation (merge p gv0) (a :: ql))
(Permutation (merge p gv0) (a :: gv0)), (Permutation (merge p gv0) (k :: q)), (Permutation (merge p gv0) (k :: p)), (Permutation (merge p gv0) (k :: ql)), (Permutation (merge p gv0) (k :: gv0)), (Permutation (merge p gv0) (merge q q)), (Permutation (merge p gv0) (merge q p)), (Permutation (merge p gv0) (merge q ql)), (Permutation (merge p gv0) (merge q gv0)), (Permutation (merge p gv0) (merge p q))
(Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge p ql)), (Permutation (merge p gv0) (merge ql q)), (Permutation (merge p gv0) (merge ql p)), (Permutation (merge p gv0) (merge ql ql)), (Permutation (merge p gv0) (merge ql gv0)), (Permutation (merge p gv0) (merge gv0 q)), (Permutation (merge p gv0) (merge gv0 p)), (Permutation (merge p gv0) (merge gv0 ql)), (Permutation (merge p gv0) (merge gv0 gv0))
(Permutation (merge p gv0) (insert a q)), (Permutation (merge p gv0) (insert a p)), (Permutation (merge p gv0) (insert a ql)), (Permutation (merge p gv0) (insert a gv0)), (Permutation (merge p gv0) (insert k q)), (Permutation (merge p gv0) (insert k p)), (Permutation (merge p gv0) (insert k ql)), (Permutation (merge p gv0) (insert k gv0)), (Permutation (merge p gv0) (maybe_swap q)), (Permutation (merge p gv0) (maybe_swap p))
(Permutation (merge p gv0) (maybe_swap ql)), (Permutation (merge p gv0) (maybe_swap gv0)), (Permutation (merge p gv0) (q ++ q)), (Permutation (merge p gv0) (q ++ p)), (Permutation (merge p gv0) (q ++ ql)), (Permutation (merge p gv0) (q ++ gv0)), (Permutation (merge p gv0) (p ++ q)), (Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ ql)), (Permutation (merge p gv0) (p ++ gv0))
(Permutation (merge p gv0) (ql ++ q)), (Permutation (merge p gv0) (ql ++ p)), (Permutation (merge p gv0) (ql ++ ql)), (Permutation (merge p gv0) (ql ++ gv0)), (Permutation (merge p gv0) (gv0 ++ q)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ ql)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) []), (Permutation (merge ql q) q)
(Permutation (merge ql q) p), (Permutation (merge ql q) ql), (Permutation (merge ql q) gv0), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: gv0)), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (k :: ql))
(Permutation (merge ql q) (k :: gv0)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q gv0)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p gv0)), (Permutation (merge ql q) (merge ql p))
(Permutation (merge ql q) (merge ql ql)), (Permutation (merge ql q) (merge ql gv0)), (Permutation (merge ql q) (merge gv0 q)), (Permutation (merge ql q) (merge gv0 p)), (Permutation (merge ql q) (merge gv0 ql)), (Permutation (merge ql q) (merge gv0 gv0)), (Permutation (merge ql q) (insert a q)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a gv0))
(Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k gv0)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap gv0)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ p))
(Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ gv0)), (Permutation (merge ql q) (p ++ q)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ gv0)), (Permutation (merge ql q) (ql ++ q)), (Permutation (merge ql q) (ql ++ p)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ gv0))
(Permutation (merge ql q) (gv0 ++ q)), (Permutation (merge ql q) (gv0 ++ p)), (Permutation (merge ql q) (gv0 ++ ql)), (Permutation (merge ql q) (gv0 ++ gv0)), (Permutation (merge ql q) []), (Permutation (merge ql p) q), (Permutation (merge ql p) p), (Permutation (merge ql p) ql), (Permutation (merge ql p) gv0), (Permutation (merge ql p) (a :: q))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: gv0)), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: gv0)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge q ql))
(Permutation (merge ql p) (merge q gv0)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p gv0)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge ql gv0)), (Permutation (merge ql p) (merge gv0 q)), (Permutation (merge ql p) (merge gv0 p))
(Permutation (merge ql p) (merge gv0 ql)), (Permutation (merge ql p) (merge gv0 gv0)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a gv0)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k p)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k gv0))
(Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap gv0)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ gv0)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ p))
(Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ gv0)), (Permutation (merge ql p) (ql ++ q)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ gv0)), (Permutation (merge ql p) (gv0 ++ q)), (Permutation (merge ql p) (gv0 ++ p)), (Permutation (merge ql p) (gv0 ++ ql)), (Permutation (merge ql p) (gv0 ++ gv0))
(Permutation (merge ql p) []), (Permutation (merge ql ql) q), (Permutation (merge ql ql) p), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) gv0), (Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (a :: ql)), (Permutation (merge ql ql) (a :: gv0)), (Permutation (merge ql ql) (k :: q))
(Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: gv0)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q p)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q gv0)), (Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (merge p ql))
(Permutation (merge ql ql) (merge p gv0)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge ql gv0)), (Permutation (merge ql ql) (merge gv0 q)), (Permutation (merge ql ql) (merge gv0 p)), (Permutation (merge ql ql) (merge gv0 ql)), (Permutation (merge ql ql) (merge gv0 gv0)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a p))
(Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a gv0)), (Permutation (merge ql ql) (insert k q)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k gv0)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap p)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap gv0))
(Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ gv0)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ gv0)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ p))
(Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ gv0)), (Permutation (merge ql ql) (gv0 ++ q)), (Permutation (merge ql ql) (gv0 ++ p)), (Permutation (merge ql ql) (gv0 ++ ql)), (Permutation (merge ql ql) (gv0 ++ gv0)), (Permutation (merge ql ql) []), (Permutation (merge ql gv0) q), (Permutation (merge ql gv0) p), (Permutation (merge ql gv0) ql)
(Permutation (merge ql gv0) gv0), (Permutation (merge ql gv0) (a :: q)), (Permutation (merge ql gv0) (a :: p)), (Permutation (merge ql gv0) (a :: ql)), (Permutation (merge ql gv0) (a :: gv0)), (Permutation (merge ql gv0) (k :: q)), (Permutation (merge ql gv0) (k :: p)), (Permutation (merge ql gv0) (k :: ql)), (Permutation (merge ql gv0) (k :: gv0)), (Permutation (merge ql gv0) (merge q q))
(Permutation (merge ql gv0) (merge q p)), (Permutation (merge ql gv0) (merge q ql)), (Permutation (merge ql gv0) (merge q gv0)), (Permutation (merge ql gv0) (merge p q)), (Permutation (merge ql gv0) (merge p p)), (Permutation (merge ql gv0) (merge p ql)), (Permutation (merge ql gv0) (merge p gv0)), (Permutation (merge ql gv0) (merge ql q)), (Permutation (merge ql gv0) (merge ql p)), (Permutation (merge ql gv0) (merge ql ql))
(Permutation (merge ql gv0) (merge gv0 q)), (Permutation (merge ql gv0) (merge gv0 p)), (Permutation (merge ql gv0) (merge gv0 ql)), (Permutation (merge ql gv0) (merge gv0 gv0)), (Permutation (merge ql gv0) (insert a q)), (Permutation (merge ql gv0) (insert a p)), (Permutation (merge ql gv0) (insert a ql)), (Permutation (merge ql gv0) (insert a gv0)), (Permutation (merge ql gv0) (insert k q)), (Permutation (merge ql gv0) (insert k p))
(Permutation (merge ql gv0) (insert k ql)), (Permutation (merge ql gv0) (insert k gv0)), (Permutation (merge ql gv0) (maybe_swap q)), (Permutation (merge ql gv0) (maybe_swap p)), (Permutation (merge ql gv0) (maybe_swap ql)), (Permutation (merge ql gv0) (maybe_swap gv0)), (Permutation (merge ql gv0) (q ++ q)), (Permutation (merge ql gv0) (q ++ p)), (Permutation (merge ql gv0) (q ++ ql)), (Permutation (merge ql gv0) (q ++ gv0))
(Permutation (merge ql gv0) (p ++ q)), (Permutation (merge ql gv0) (p ++ p)), (Permutation (merge ql gv0) (p ++ ql)), (Permutation (merge ql gv0) (p ++ gv0)), (Permutation (merge ql gv0) (ql ++ q)), (Permutation (merge ql gv0) (ql ++ p)), (Permutation (merge ql gv0) (ql ++ ql)), (Permutation (merge ql gv0) (ql ++ gv0)), (Permutation (merge ql gv0) (gv0 ++ q)), (Permutation (merge ql gv0) (gv0 ++ p))
(Permutation (merge ql gv0) (gv0 ++ ql)), (Permutation (merge ql gv0) (gv0 ++ gv0)), (Permutation (merge ql gv0) []), (Permutation (merge gv0 q) q), (Permutation (merge gv0 q) p), (Permutation (merge gv0 q) ql), (Permutation (merge gv0 q) gv0), (Permutation (merge gv0 q) (a :: q)), (Permutation (merge gv0 q) (a :: p)), (Permutation (merge gv0 q) (a :: ql))
(Permutation (merge gv0 q) (a :: gv0)), (Permutation (merge gv0 q) (k :: q)), (Permutation (merge gv0 q) (k :: p)), (Permutation (merge gv0 q) (k :: ql)), (Permutation (merge gv0 q) (k :: gv0)), (Permutation (merge gv0 q) (merge q q)), (Permutation (merge gv0 q) (merge q p)), (Permutation (merge gv0 q) (merge q ql)), (Permutation (merge gv0 q) (merge q gv0)), (Permutation (merge gv0 q) (merge p q))
(Permutation (merge gv0 q) (merge p p)), (Permutation (merge gv0 q) (merge p ql)), (Permutation (merge gv0 q) (merge p gv0)), (Permutation (merge gv0 q) (merge ql q)), (Permutation (merge gv0 q) (merge ql p)), (Permutation (merge gv0 q) (merge ql ql)), (Permutation (merge gv0 q) (merge ql gv0)), (Permutation (merge gv0 q) (merge gv0 p)), (Permutation (merge gv0 q) (merge gv0 ql)), (Permutation (merge gv0 q) (merge gv0 gv0))
(Permutation (merge gv0 q) (insert a q)), (Permutation (merge gv0 q) (insert a p)), (Permutation (merge gv0 q) (insert a ql)), (Permutation (merge gv0 q) (insert a gv0)), (Permutation (merge gv0 q) (insert k q)), (Permutation (merge gv0 q) (insert k p)), (Permutation (merge gv0 q) (insert k ql)), (Permutation (merge gv0 q) (insert k gv0)), (Permutation (merge gv0 q) (maybe_swap q)), (Permutation (merge gv0 q) (maybe_swap p))
(Permutation (merge gv0 q) (maybe_swap ql)), (Permutation (merge gv0 q) (maybe_swap gv0)), (Permutation (merge gv0 q) (q ++ q)), (Permutation (merge gv0 q) (q ++ p)), (Permutation (merge gv0 q) (q ++ ql)), (Permutation (merge gv0 q) (q ++ gv0)), (Permutation (merge gv0 q) (p ++ q)), (Permutation (merge gv0 q) (p ++ p)), (Permutation (merge gv0 q) (p ++ ql)), (Permutation (merge gv0 q) (p ++ gv0))
(Permutation (merge gv0 q) (ql ++ q)), (Permutation (merge gv0 q) (ql ++ p)), (Permutation (merge gv0 q) (ql ++ ql)), (Permutation (merge gv0 q) (ql ++ gv0)), (Permutation (merge gv0 q) (gv0 ++ q)), (Permutation (merge gv0 q) (gv0 ++ p)), (Permutation (merge gv0 q) (gv0 ++ ql)), (Permutation (merge gv0 q) (gv0 ++ gv0)), (Permutation (merge gv0 q) []), (Permutation (merge gv0 p) q)
(Permutation (merge gv0 p) p), (Permutation (merge gv0 p) ql), (Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) (a :: q)), (Permutation (merge gv0 p) (a :: p)), (Permutation (merge gv0 p) (a :: ql)), (Permutation (merge gv0 p) (a :: gv0)), (Permutation (merge gv0 p) (k :: q)), (Permutation (merge gv0 p) (k :: p)), (Permutation (merge gv0 p) (k :: ql))
(Permutation (merge gv0 p) (k :: gv0)), (Permutation (merge gv0 p) (merge q q)), (Permutation (merge gv0 p) (merge q p)), (Permutation (merge gv0 p) (merge q ql)), (Permutation (merge gv0 p) (merge q gv0)), (Permutation (merge gv0 p) (merge p q)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p ql)), (Permutation (merge gv0 p) (merge p gv0)), (Permutation (merge gv0 p) (merge ql q))
(Permutation (merge gv0 p) (merge ql p)), (Permutation (merge gv0 p) (merge ql ql)), (Permutation (merge gv0 p) (merge ql gv0)), (Permutation (merge gv0 p) (merge gv0 q)), (Permutation (merge gv0 p) (merge gv0 ql)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (insert a q)), (Permutation (merge gv0 p) (insert a p)), (Permutation (merge gv0 p) (insert a ql)), (Permutation (merge gv0 p) (insert a gv0))
(Permutation (merge gv0 p) (insert k q)), (Permutation (merge gv0 p) (insert k p)), (Permutation (merge gv0 p) (insert k ql)), (Permutation (merge gv0 p) (insert k gv0)), (Permutation (merge gv0 p) (maybe_swap q)), (Permutation (merge gv0 p) (maybe_swap p)), (Permutation (merge gv0 p) (maybe_swap ql)), (Permutation (merge gv0 p) (maybe_swap gv0)), (Permutation (merge gv0 p) (q ++ q)), (Permutation (merge gv0 p) (q ++ p))
(Permutation (merge gv0 p) (q ++ ql)), (Permutation (merge gv0 p) (q ++ gv0)), (Permutation (merge gv0 p) (p ++ q)), (Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ ql)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (ql ++ q)), (Permutation (merge gv0 p) (ql ++ p)), (Permutation (merge gv0 p) (ql ++ ql)), (Permutation (merge gv0 p) (ql ++ gv0))
(Permutation (merge gv0 p) (gv0 ++ q)), (Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ ql)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) []), (Permutation (merge gv0 ql) q), (Permutation (merge gv0 ql) p), (Permutation (merge gv0 ql) ql), (Permutation (merge gv0 ql) gv0), (Permutation (merge gv0 ql) (a :: q))
(Permutation (merge gv0 ql) (a :: p)), (Permutation (merge gv0 ql) (a :: ql)), (Permutation (merge gv0 ql) (a :: gv0)), (Permutation (merge gv0 ql) (k :: q)), (Permutation (merge gv0 ql) (k :: p)), (Permutation (merge gv0 ql) (k :: ql)), (Permutation (merge gv0 ql) (k :: gv0)), (Permutation (merge gv0 ql) (merge q q)), (Permutation (merge gv0 ql) (merge q p)), (Permutation (merge gv0 ql) (merge q ql))
(Permutation (merge gv0 ql) (merge q gv0)), (Permutation (merge gv0 ql) (merge p q)), (Permutation (merge gv0 ql) (merge p p)), (Permutation (merge gv0 ql) (merge p ql)), (Permutation (merge gv0 ql) (merge p gv0)), (Permutation (merge gv0 ql) (merge ql q)), (Permutation (merge gv0 ql) (merge ql p)), (Permutation (merge gv0 ql) (merge ql ql)), (Permutation (merge gv0 ql) (merge ql gv0)), (Permutation (merge gv0 ql) (merge gv0 q))
(Permutation (merge gv0 ql) (merge gv0 p)), (Permutation (merge gv0 ql) (merge gv0 gv0)), (Permutation (merge gv0 ql) (insert a q)), (Permutation (merge gv0 ql) (insert a p)), (Permutation (merge gv0 ql) (insert a ql)), (Permutation (merge gv0 ql) (insert a gv0)), (Permutation (merge gv0 ql) (insert k q)), (Permutation (merge gv0 ql) (insert k p)), (Permutation (merge gv0 ql) (insert k ql)), (Permutation (merge gv0 ql) (insert k gv0))
(Permutation (merge gv0 ql) (maybe_swap q)), (Permutation (merge gv0 ql) (maybe_swap p)), (Permutation (merge gv0 ql) (maybe_swap ql)), (Permutation (merge gv0 ql) (maybe_swap gv0)), (Permutation (merge gv0 ql) (q ++ q)), (Permutation (merge gv0 ql) (q ++ p)), (Permutation (merge gv0 ql) (q ++ ql)), (Permutation (merge gv0 ql) (q ++ gv0)), (Permutation (merge gv0 ql) (p ++ q)), (Permutation (merge gv0 ql) (p ++ p))
(Permutation (merge gv0 ql) (p ++ ql)), (Permutation (merge gv0 ql) (p ++ gv0)), (Permutation (merge gv0 ql) (ql ++ q)), (Permutation (merge gv0 ql) (ql ++ p)), (Permutation (merge gv0 ql) (ql ++ ql)), (Permutation (merge gv0 ql) (ql ++ gv0)), (Permutation (merge gv0 ql) (gv0 ++ q)), (Permutation (merge gv0 ql) (gv0 ++ p)), (Permutation (merge gv0 ql) (gv0 ++ ql)), (Permutation (merge gv0 ql) (gv0 ++ gv0))
(Permutation (merge gv0 ql) []), (Permutation (merge gv0 gv0) q), (Permutation (merge gv0 gv0) p), (Permutation (merge gv0 gv0) ql), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (a :: q)), (Permutation (merge gv0 gv0) (a :: p)), (Permutation (merge gv0 gv0) (a :: ql)), (Permutation (merge gv0 gv0) (a :: gv0)), (Permutation (merge gv0 gv0) (k :: q))
(Permutation (merge gv0 gv0) (k :: p)), (Permutation (merge gv0 gv0) (k :: ql)), (Permutation (merge gv0 gv0) (k :: gv0)), (Permutation (merge gv0 gv0) (merge q q)), (Permutation (merge gv0 gv0) (merge q p)), (Permutation (merge gv0 gv0) (merge q ql)), (Permutation (merge gv0 gv0) (merge q gv0)), (Permutation (merge gv0 gv0) (merge p q)), (Permutation (merge gv0 gv0) (merge p p)), (Permutation (merge gv0 gv0) (merge p ql))
(Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge ql q)), (Permutation (merge gv0 gv0) (merge ql p)), (Permutation (merge gv0 gv0) (merge ql ql)), (Permutation (merge gv0 gv0) (merge ql gv0)), (Permutation (merge gv0 gv0) (merge gv0 q)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (merge gv0 ql)), (Permutation (merge gv0 gv0) (insert a q)), (Permutation (merge gv0 gv0) (insert a p))
(Permutation (merge gv0 gv0) (insert a ql)), (Permutation (merge gv0 gv0) (insert a gv0)), (Permutation (merge gv0 gv0) (insert k q)), (Permutation (merge gv0 gv0) (insert k p)), (Permutation (merge gv0 gv0) (insert k ql)), (Permutation (merge gv0 gv0) (insert k gv0)), (Permutation (merge gv0 gv0) (maybe_swap q)), (Permutation (merge gv0 gv0) (maybe_swap p)), (Permutation (merge gv0 gv0) (maybe_swap ql)), (Permutation (merge gv0 gv0) (maybe_swap gv0))
(Permutation (merge gv0 gv0) (q ++ q)), (Permutation (merge gv0 gv0) (q ++ p)), (Permutation (merge gv0 gv0) (q ++ ql)), (Permutation (merge gv0 gv0) (q ++ gv0)), (Permutation (merge gv0 gv0) (p ++ q)), (Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ ql)), (Permutation (merge gv0 gv0) (p ++ gv0)), (Permutation (merge gv0 gv0) (ql ++ q)), (Permutation (merge gv0 gv0) (ql ++ p))
(Permutation (merge gv0 gv0) (ql ++ ql)), (Permutation (merge gv0 gv0) (ql ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ q)), (Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ ql)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) ql)
(Permutation (insert a q) gv0), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: gv0)), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: gv0)), (Permutation (insert a q) (merge q q))
(Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q gv0)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p gv0)), (Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql gv0)), (Permutation (insert a q) (merge gv0 q)), (Permutation (insert a q) (merge gv0 p)), (Permutation (insert a q) (merge gv0 ql)), (Permutation (insert a q) (merge gv0 gv0)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a ql)), (Permutation (insert a q) (insert a gv0)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p))
(Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k gv0)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap gv0)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ gv0))
(Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ gv0)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ p)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ gv0)), (Permutation (insert a q) (gv0 ++ q)), (Permutation (insert a q) (gv0 ++ p))
(Permutation (insert a q) (gv0 ++ ql)), (Permutation (insert a q) (gv0 ++ gv0)), (Permutation (insert a q) []), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) ql), (Permutation (insert a p) gv0), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (a :: ql))
(Permutation (insert a p) (a :: gv0)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: gv0)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q gv0)), (Permutation (insert a p) (merge p q))
(Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p gv0)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge ql ql)), (Permutation (insert a p) (merge ql gv0)), (Permutation (insert a p) (merge gv0 q)), (Permutation (insert a p) (merge gv0 p)), (Permutation (insert a p) (merge gv0 ql))
(Permutation (insert a p) (merge gv0 gv0)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (insert a gv0)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k gv0)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p))
(Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap gv0)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ gv0)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ gv0))
(Permutation (insert a p) (ql ++ q)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ gv0)), (Permutation (insert a p) (gv0 ++ q)), (Permutation (insert a p) (gv0 ++ p)), (Permutation (insert a p) (gv0 ++ ql)), (Permutation (insert a p) (gv0 ++ gv0)), (Permutation (insert a p) []), (Permutation (insert a ql) q)
(Permutation (insert a ql) p), (Permutation (insert a ql) ql), (Permutation (insert a ql) gv0), (Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (a :: ql)), (Permutation (insert a ql) (a :: gv0)), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (k :: ql))
(Permutation (insert a ql) (k :: gv0)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q gv0)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p gv0)), (Permutation (insert a ql) (merge ql q))
(Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql gv0)), (Permutation (insert a ql) (merge gv0 q)), (Permutation (insert a ql) (merge gv0 p)), (Permutation (insert a ql) (merge gv0 ql)), (Permutation (insert a ql) (merge gv0 gv0)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (insert a gv0))
(Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert k ql)), (Permutation (insert a ql) (insert k gv0)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap p)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap gv0)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ p))
(Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ gv0)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ gv0)), (Permutation (insert a ql) (ql ++ q)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ gv0))
(Permutation (insert a ql) (gv0 ++ q)), (Permutation (insert a ql) (gv0 ++ p)), (Permutation (insert a ql) (gv0 ++ ql)), (Permutation (insert a ql) (gv0 ++ gv0)), (Permutation (insert a ql) []), (Permutation (insert a gv0) q), (Permutation (insert a gv0) p), (Permutation (insert a gv0) ql), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a :: q))
(Permutation (insert a gv0) (a :: p)), (Permutation (insert a gv0) (a :: ql)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (k :: q)), (Permutation (insert a gv0) (k :: p)), (Permutation (insert a gv0) (k :: ql)), (Permutation (insert a gv0) (k :: gv0)), (Permutation (insert a gv0) (merge q q)), (Permutation (insert a gv0) (merge q p)), (Permutation (insert a gv0) (merge q ql))
(Permutation (insert a gv0) (merge q gv0)), (Permutation (insert a gv0) (merge p q)), (Permutation (insert a gv0) (merge p p)), (Permutation (insert a gv0) (merge p ql)), (Permutation (insert a gv0) (merge p gv0)), (Permutation (insert a gv0) (merge ql q)), (Permutation (insert a gv0) (merge ql p)), (Permutation (insert a gv0) (merge ql ql)), (Permutation (insert a gv0) (merge ql gv0)), (Permutation (insert a gv0) (merge gv0 q))
(Permutation (insert a gv0) (merge gv0 p)), (Permutation (insert a gv0) (merge gv0 ql)), (Permutation (insert a gv0) (merge gv0 gv0)), (Permutation (insert a gv0) (insert a q)), (Permutation (insert a gv0) (insert a p)), (Permutation (insert a gv0) (insert a ql)), (Permutation (insert a gv0) (insert k q)), (Permutation (insert a gv0) (insert k p)), (Permutation (insert a gv0) (insert k ql)), (Permutation (insert a gv0) (insert k gv0))
(Permutation (insert a gv0) (maybe_swap q)), (Permutation (insert a gv0) (maybe_swap p)), (Permutation (insert a gv0) (maybe_swap ql)), (Permutation (insert a gv0) (maybe_swap gv0)), (Permutation (insert a gv0) (q ++ q)), (Permutation (insert a gv0) (q ++ p)), (Permutation (insert a gv0) (q ++ ql)), (Permutation (insert a gv0) (q ++ gv0)), (Permutation (insert a gv0) (p ++ q)), (Permutation (insert a gv0) (p ++ p))
(Permutation (insert a gv0) (p ++ ql)), (Permutation (insert a gv0) (p ++ gv0)), (Permutation (insert a gv0) (ql ++ q)), (Permutation (insert a gv0) (ql ++ p)), (Permutation (insert a gv0) (ql ++ ql)), (Permutation (insert a gv0) (ql ++ gv0)), (Permutation (insert a gv0) (gv0 ++ q)), (Permutation (insert a gv0) (gv0 ++ p)), (Permutation (insert a gv0) (gv0 ++ ql)), (Permutation (insert a gv0) (gv0 ++ gv0))
(Permutation (insert a gv0) []), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) ql), (Permutation (insert k q) gv0), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: gv0)), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: gv0)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q ql)), (Permutation (insert k q) (merge q gv0)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (merge p ql))
(Permutation (insert k q) (merge p gv0)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge ql ql)), (Permutation (insert k q) (merge ql gv0)), (Permutation (insert k q) (merge gv0 q)), (Permutation (insert k q) (merge gv0 p)), (Permutation (insert k q) (merge gv0 ql)), (Permutation (insert k q) (merge gv0 gv0)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a gv0)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k gv0)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap gv0))
(Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ gv0)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ gv0)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ p))
(Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ gv0)), (Permutation (insert k q) (gv0 ++ q)), (Permutation (insert k q) (gv0 ++ p)), (Permutation (insert k q) (gv0 ++ ql)), (Permutation (insert k q) (gv0 ++ gv0)), (Permutation (insert k q) []), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) ql)
(Permutation (insert k p) gv0), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: gv0)), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: ql)), (Permutation (insert k p) (k :: gv0)), (Permutation (insert k p) (merge q q))
(Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q gv0)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p ql)), (Permutation (insert k p) (merge p gv0)), (Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge ql ql))
(Permutation (insert k p) (merge ql gv0)), (Permutation (insert k p) (merge gv0 q)), (Permutation (insert k p) (merge gv0 p)), (Permutation (insert k p) (merge gv0 ql)), (Permutation (insert k p) (merge gv0 gv0)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a gv0)), (Permutation (insert k p) (insert k q))
(Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k gv0)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap gv0)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ gv0))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ gv0)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ gv0)), (Permutation (insert k p) (gv0 ++ q)), (Permutation (insert k p) (gv0 ++ p))
(Permutation (insert k p) (gv0 ++ ql)), (Permutation (insert k p) (gv0 ++ gv0)), (Permutation (insert k p) []), (Permutation (insert k ql) q), (Permutation (insert k ql) p), (Permutation (insert k ql) ql), (Permutation (insert k ql) gv0), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (a :: ql))
(Permutation (insert k ql) (a :: gv0)), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: gv0)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q gv0)), (Permutation (insert k ql) (merge p q))
(Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p gv0)), (Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge ql ql)), (Permutation (insert k ql) (merge ql gv0)), (Permutation (insert k ql) (merge gv0 q)), (Permutation (insert k ql) (merge gv0 p)), (Permutation (insert k ql) (merge gv0 ql))
(Permutation (insert k ql) (merge gv0 gv0)), (Permutation (insert k ql) (insert a q)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a gv0)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert k gv0)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap p))
(Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap gv0)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ gv0)), (Permutation (insert k ql) (p ++ q)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ gv0))
(Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ p)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ gv0)), (Permutation (insert k ql) (gv0 ++ q)), (Permutation (insert k ql) (gv0 ++ p)), (Permutation (insert k ql) (gv0 ++ ql)), (Permutation (insert k ql) (gv0 ++ gv0)), (Permutation (insert k ql) []), (Permutation (insert k gv0) q)
(Permutation (insert k gv0) p), (Permutation (insert k gv0) ql), (Permutation (insert k gv0) gv0), (Permutation (insert k gv0) (a :: q)), (Permutation (insert k gv0) (a :: p)), (Permutation (insert k gv0) (a :: ql)), (Permutation (insert k gv0) (a :: gv0)), (Permutation (insert k gv0) (k :: q)), (Permutation (insert k gv0) (k :: p)), (Permutation (insert k gv0) (k :: ql))
(Permutation (insert k gv0) (k :: gv0)), (Permutation (insert k gv0) (merge q q)), (Permutation (insert k gv0) (merge q p)), (Permutation (insert k gv0) (merge q ql)), (Permutation (insert k gv0) (merge q gv0)), (Permutation (insert k gv0) (merge p q)), (Permutation (insert k gv0) (merge p p)), (Permutation (insert k gv0) (merge p ql)), (Permutation (insert k gv0) (merge p gv0)), (Permutation (insert k gv0) (merge ql q))
(Permutation (insert k gv0) (merge ql p)), (Permutation (insert k gv0) (merge ql ql)), (Permutation (insert k gv0) (merge ql gv0)), (Permutation (insert k gv0) (merge gv0 q)), (Permutation (insert k gv0) (merge gv0 p)), (Permutation (insert k gv0) (merge gv0 ql)), (Permutation (insert k gv0) (merge gv0 gv0)), (Permutation (insert k gv0) (insert a q)), (Permutation (insert k gv0) (insert a p)), (Permutation (insert k gv0) (insert a ql))
(Permutation (insert k gv0) (insert a gv0)), (Permutation (insert k gv0) (insert k q)), (Permutation (insert k gv0) (insert k p)), (Permutation (insert k gv0) (insert k ql)), (Permutation (insert k gv0) (maybe_swap q)), (Permutation (insert k gv0) (maybe_swap p)), (Permutation (insert k gv0) (maybe_swap ql)), (Permutation (insert k gv0) (maybe_swap gv0)), (Permutation (insert k gv0) (q ++ q)), (Permutation (insert k gv0) (q ++ p))
(Permutation (insert k gv0) (q ++ ql)), (Permutation (insert k gv0) (q ++ gv0)), (Permutation (insert k gv0) (p ++ q)), (Permutation (insert k gv0) (p ++ p)), (Permutation (insert k gv0) (p ++ ql)), (Permutation (insert k gv0) (p ++ gv0)), (Permutation (insert k gv0) (ql ++ q)), (Permutation (insert k gv0) (ql ++ p)), (Permutation (insert k gv0) (ql ++ ql)), (Permutation (insert k gv0) (ql ++ gv0))
(Permutation (insert k gv0) (gv0 ++ q)), (Permutation (insert k gv0) (gv0 ++ p)), (Permutation (insert k gv0) (gv0 ++ ql)), (Permutation (insert k gv0) (gv0 ++ gv0)), (Permutation (insert k gv0) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) gv0), (Permutation (maybe_swap q) (a :: q))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: ql)), (Permutation (maybe_swap q) (a :: gv0)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: gv0)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q ql))
(Permutation (maybe_swap q) (merge q gv0)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p gv0)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql gv0)), (Permutation (maybe_swap q) (merge gv0 q))
(Permutation (maybe_swap q) (merge gv0 p)), (Permutation (maybe_swap q) (merge gv0 ql)), (Permutation (maybe_swap q) (merge gv0 gv0)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a gv0)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert k ql))
(Permutation (maybe_swap q) (insert k gv0)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap gv0)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ gv0)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ p))
(Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ gv0)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ gv0)), (Permutation (maybe_swap q) (gv0 ++ q)), (Permutation (maybe_swap q) (gv0 ++ p)), (Permutation (maybe_swap q) (gv0 ++ ql)), (Permutation (maybe_swap q) (gv0 ++ gv0))
(Permutation (maybe_swap q) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) gv0), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: gv0)), (Permutation (maybe_swap p) (k :: q))
(Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: gv0)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q ql)), (Permutation (maybe_swap p) (merge q gv0)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p ql))
(Permutation (maybe_swap p) (merge p gv0)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql gv0)), (Permutation (maybe_swap p) (merge gv0 q)), (Permutation (maybe_swap p) (merge gv0 p)), (Permutation (maybe_swap p) (merge gv0 ql)), (Permutation (maybe_swap p) (merge gv0 gv0)), (Permutation (maybe_swap p) (insert a q))
(Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a gv0)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k gv0)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap ql)), (Permutation (maybe_swap p) (maybe_swap gv0))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ gv0)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ gv0)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ p))
(Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ gv0)), (Permutation (maybe_swap p) (gv0 ++ q)), (Permutation (maybe_swap p) (gv0 ++ p)), (Permutation (maybe_swap p) (gv0 ++ ql)), (Permutation (maybe_swap p) (gv0 ++ gv0)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) ql)
(Permutation (maybe_swap ql) gv0), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: gv0)), (Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (k :: ql)), (Permutation (maybe_swap ql) (k :: gv0)), (Permutation (maybe_swap ql) (merge q q))
(Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q gv0)), (Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (merge p ql)), (Permutation (maybe_swap ql) (merge p gv0)), (Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge ql ql))
(Permutation (maybe_swap ql) (merge ql gv0)), (Permutation (maybe_swap ql) (merge gv0 q)), (Permutation (maybe_swap ql) (merge gv0 p)), (Permutation (maybe_swap ql) (merge gv0 ql)), (Permutation (maybe_swap ql) (merge gv0 gv0)), (Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a gv0)), (Permutation (maybe_swap ql) (insert k q))
(Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k gv0)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (maybe_swap gv0)), (Permutation (maybe_swap ql) (q ++ q)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ gv0))
(Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ p)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ gv0)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ gv0)), (Permutation (maybe_swap ql) (gv0 ++ q)), (Permutation (maybe_swap ql) (gv0 ++ p))
(Permutation (maybe_swap ql) (gv0 ++ ql)), (Permutation (maybe_swap ql) (gv0 ++ gv0)), (Permutation (maybe_swap ql) []), (Permutation (maybe_swap gv0) q), (Permutation (maybe_swap gv0) p), (Permutation (maybe_swap gv0) ql), (Permutation (maybe_swap gv0) gv0), (Permutation (maybe_swap gv0) (a :: q)), (Permutation (maybe_swap gv0) (a :: p)), (Permutation (maybe_swap gv0) (a :: ql))
(Permutation (maybe_swap gv0) (a :: gv0)), (Permutation (maybe_swap gv0) (k :: q)), (Permutation (maybe_swap gv0) (k :: p)), (Permutation (maybe_swap gv0) (k :: ql)), (Permutation (maybe_swap gv0) (k :: gv0)), (Permutation (maybe_swap gv0) (merge q q)), (Permutation (maybe_swap gv0) (merge q p)), (Permutation (maybe_swap gv0) (merge q ql)), (Permutation (maybe_swap gv0) (merge q gv0)), (Permutation (maybe_swap gv0) (merge p q))
(Permutation (maybe_swap gv0) (merge p p)), (Permutation (maybe_swap gv0) (merge p ql)), (Permutation (maybe_swap gv0) (merge p gv0)), (Permutation (maybe_swap gv0) (merge ql q)), (Permutation (maybe_swap gv0) (merge ql p)), (Permutation (maybe_swap gv0) (merge ql ql)), (Permutation (maybe_swap gv0) (merge ql gv0)), (Permutation (maybe_swap gv0) (merge gv0 q)), (Permutation (maybe_swap gv0) (merge gv0 p)), (Permutation (maybe_swap gv0) (merge gv0 ql))
(Permutation (maybe_swap gv0) (merge gv0 gv0)), (Permutation (maybe_swap gv0) (insert a q)), (Permutation (maybe_swap gv0) (insert a p)), (Permutation (maybe_swap gv0) (insert a ql)), (Permutation (maybe_swap gv0) (insert a gv0)), (Permutation (maybe_swap gv0) (insert k q)), (Permutation (maybe_swap gv0) (insert k p)), (Permutation (maybe_swap gv0) (insert k ql)), (Permutation (maybe_swap gv0) (insert k gv0)), (Permutation (maybe_swap gv0) (maybe_swap q))
(Permutation (maybe_swap gv0) (maybe_swap p)), (Permutation (maybe_swap gv0) (maybe_swap ql)), (Permutation (maybe_swap gv0) (q ++ q)), (Permutation (maybe_swap gv0) (q ++ p)), (Permutation (maybe_swap gv0) (q ++ ql)), (Permutation (maybe_swap gv0) (q ++ gv0)), (Permutation (maybe_swap gv0) (p ++ q)), (Permutation (maybe_swap gv0) (p ++ p)), (Permutation (maybe_swap gv0) (p ++ ql)), (Permutation (maybe_swap gv0) (p ++ gv0))
(Permutation (maybe_swap gv0) (ql ++ q)), (Permutation (maybe_swap gv0) (ql ++ p)), (Permutation (maybe_swap gv0) (ql ++ ql)), (Permutation (maybe_swap gv0) (ql ++ gv0)), (Permutation (maybe_swap gv0) (gv0 ++ q)), (Permutation (maybe_swap gv0) (gv0 ++ p)), (Permutation (maybe_swap gv0) (gv0 ++ ql)), (Permutation (maybe_swap gv0) (gv0 ++ gv0)), (Permutation (maybe_swap gv0) []), (Permutation (q ++ q) q)
(Permutation (q ++ q) p), (Permutation (q ++ q) ql), (Permutation (q ++ q) gv0), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: gv0)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: ql))
(Permutation (q ++ q) (k :: gv0)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q gv0)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p gv0)), (Permutation (q ++ q) (merge ql q))
(Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql gv0)), (Permutation (q ++ q) (merge gv0 q)), (Permutation (q ++ q) (merge gv0 p)), (Permutation (q ++ q) (merge gv0 ql)), (Permutation (q ++ q) (merge gv0 gv0)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a ql))
(Permutation (q ++ q) (insert a gv0)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k gv0)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap gv0)), (Permutation (q ++ q) (q ++ p))
(Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ gv0)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ gv0)), (Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (ql ++ ql)), (Permutation (q ++ q) (ql ++ gv0))
(Permutation (q ++ q) (gv0 ++ q)), (Permutation (q ++ q) (gv0 ++ p)), (Permutation (q ++ q) (gv0 ++ ql)), (Permutation (q ++ q) (gv0 ++ gv0)), (Permutation (q ++ q) []), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) ql), (Permutation (q ++ p) gv0), (Permutation (q ++ p) (a :: q))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: ql)), (Permutation (q ++ p) (a :: gv0)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: gv0)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q ql))
(Permutation (q ++ p) (merge q gv0)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p gv0)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql gv0)), (Permutation (q ++ p) (merge gv0 q))
(Permutation (q ++ p) (merge gv0 p)), (Permutation (q ++ p) (merge gv0 ql)), (Permutation (q ++ p) (merge gv0 gv0)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a gv0)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert k ql))
(Permutation (q ++ p) (insert k gv0)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap gv0)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ gv0)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ p))
(Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ gv0)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ gv0)), (Permutation (q ++ p) (gv0 ++ q)), (Permutation (q ++ p) (gv0 ++ p)), (Permutation (q ++ p) (gv0 ++ ql)), (Permutation (q ++ p) (gv0 ++ gv0))
(Permutation (q ++ p) []), (Permutation (q ++ ql) q), (Permutation (q ++ ql) p), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) gv0), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: gv0)), (Permutation (q ++ ql) (k :: q))
(Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: gv0)), (Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge q ql)), (Permutation (q ++ ql) (merge q gv0)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (merge p ql))
(Permutation (q ++ ql) (merge p gv0)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge ql ql)), (Permutation (q ++ ql) (merge ql gv0)), (Permutation (q ++ ql) (merge gv0 q)), (Permutation (q ++ ql) (merge gv0 p)), (Permutation (q ++ ql) (merge gv0 ql)), (Permutation (q ++ ql) (merge gv0 gv0)), (Permutation (q ++ ql) (insert a q))
(Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a gv0)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k gv0)), (Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (maybe_swap ql))
(Permutation (q ++ ql) (maybe_swap gv0)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ p)), (Permutation (q ++ ql) (q ++ gv0)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ gv0)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ p))
(Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ gv0)), (Permutation (q ++ ql) (gv0 ++ q)), (Permutation (q ++ ql) (gv0 ++ p)), (Permutation (q ++ ql) (gv0 ++ ql)), (Permutation (q ++ ql) (gv0 ++ gv0)), (Permutation (q ++ ql) []), (Permutation (q ++ gv0) q), (Permutation (q ++ gv0) p), (Permutation (q ++ gv0) ql)
(Permutation (q ++ gv0) gv0), (Permutation (q ++ gv0) (a :: q)), (Permutation (q ++ gv0) (a :: p)), (Permutation (q ++ gv0) (a :: ql)), (Permutation (q ++ gv0) (a :: gv0)), (Permutation (q ++ gv0) (k :: q)), (Permutation (q ++ gv0) (k :: p)), (Permutation (q ++ gv0) (k :: ql)), (Permutation (q ++ gv0) (k :: gv0)), (Permutation (q ++ gv0) (merge q q))
(Permutation (q ++ gv0) (merge q p)), (Permutation (q ++ gv0) (merge q ql)), (Permutation (q ++ gv0) (merge q gv0)), (Permutation (q ++ gv0) (merge p q)), (Permutation (q ++ gv0) (merge p p)), (Permutation (q ++ gv0) (merge p ql)), (Permutation (q ++ gv0) (merge p gv0)), (Permutation (q ++ gv0) (merge ql q)), (Permutation (q ++ gv0) (merge ql p)), (Permutation (q ++ gv0) (merge ql ql))
(Permutation (q ++ gv0) (merge ql gv0)), (Permutation (q ++ gv0) (merge gv0 q)), (Permutation (q ++ gv0) (merge gv0 p)), (Permutation (q ++ gv0) (merge gv0 ql)), (Permutation (q ++ gv0) (merge gv0 gv0)), (Permutation (q ++ gv0) (insert a q)), (Permutation (q ++ gv0) (insert a p)), (Permutation (q ++ gv0) (insert a ql)), (Permutation (q ++ gv0) (insert a gv0)), (Permutation (q ++ gv0) (insert k q))
(Permutation (q ++ gv0) (insert k p)), (Permutation (q ++ gv0) (insert k ql)), (Permutation (q ++ gv0) (insert k gv0)), (Permutation (q ++ gv0) (maybe_swap q)), (Permutation (q ++ gv0) (maybe_swap p)), (Permutation (q ++ gv0) (maybe_swap ql)), (Permutation (q ++ gv0) (maybe_swap gv0)), (Permutation (q ++ gv0) (q ++ q)), (Permutation (q ++ gv0) (q ++ p)), (Permutation (q ++ gv0) (q ++ ql))
(Permutation (q ++ gv0) (p ++ q)), (Permutation (q ++ gv0) (p ++ p)), (Permutation (q ++ gv0) (p ++ ql)), (Permutation (q ++ gv0) (p ++ gv0)), (Permutation (q ++ gv0) (ql ++ q)), (Permutation (q ++ gv0) (ql ++ p)), (Permutation (q ++ gv0) (ql ++ ql)), (Permutation (q ++ gv0) (ql ++ gv0)), (Permutation (q ++ gv0) (gv0 ++ q)), (Permutation (q ++ gv0) (gv0 ++ p))
(Permutation (q ++ gv0) (gv0 ++ ql)), (Permutation (q ++ gv0) (gv0 ++ gv0)), (Permutation (q ++ gv0) []), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) ql), (Permutation (p ++ q) gv0), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (a :: ql))
(Permutation (p ++ q) (a :: gv0)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: gv0)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q gv0)), (Permutation (p ++ q) (merge p q))
(Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p gv0)), (Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge ql ql)), (Permutation (p ++ q) (merge ql gv0)), (Permutation (p ++ q) (merge gv0 q)), (Permutation (p ++ q) (merge gv0 p)), (Permutation (p ++ q) (merge gv0 ql))
(Permutation (p ++ q) (merge gv0 gv0)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a ql)), (Permutation (p ++ q) (insert a gv0)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k gv0)), (Permutation (p ++ q) (maybe_swap q))
(Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap gv0)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ gv0)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ ql)), (Permutation (p ++ q) (p ++ gv0))
(Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ gv0)), (Permutation (p ++ q) (gv0 ++ q)), (Permutation (p ++ q) (gv0 ++ p)), (Permutation (p ++ q) (gv0 ++ ql)), (Permutation (p ++ q) (gv0 ++ gv0)), (Permutation (p ++ q) []), (Permutation (p ++ p) q)
(Permutation (p ++ p) p), (Permutation (p ++ p) ql), (Permutation (p ++ p) gv0), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: gv0)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: ql))
(Permutation (p ++ p) (k :: gv0)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q gv0)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge ql q))
(Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql gv0)), (Permutation (p ++ p) (merge gv0 q)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 ql)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a ql))
(Permutation (p ++ p) (insert a gv0)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k gv0)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap gv0)), (Permutation (p ++ p) (q ++ q))
(Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ gv0)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (ql ++ ql)), (Permutation (p ++ p) (ql ++ gv0))
(Permutation (p ++ p) (gv0 ++ q)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ ql)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) []), (Permutation (p ++ ql) q), (Permutation (p ++ ql) p), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) gv0), (Permutation (p ++ ql) (a :: q))
(Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (a :: ql)), (Permutation (p ++ ql) (a :: gv0)), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: gv0)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge q ql))
(Permutation (p ++ ql) (merge q gv0)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p gv0)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql gv0)), (Permutation (p ++ ql) (merge gv0 q))
(Permutation (p ++ ql) (merge gv0 p)), (Permutation (p ++ ql) (merge gv0 ql)), (Permutation (p ++ ql) (merge gv0 gv0)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a gv0)), (Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert k ql))
(Permutation (p ++ ql) (insert k gv0)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap gv0)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ gv0)), (Permutation (p ++ ql) (p ++ q))
(Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) (p ++ gv0)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ gv0)), (Permutation (p ++ ql) (gv0 ++ q)), (Permutation (p ++ ql) (gv0 ++ p)), (Permutation (p ++ ql) (gv0 ++ ql)), (Permutation (p ++ ql) (gv0 ++ gv0))
(Permutation (p ++ ql) []), (Permutation (p ++ gv0) q), (Permutation (p ++ gv0) p), (Permutation (p ++ gv0) ql), (Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) (a :: q)), (Permutation (p ++ gv0) (a :: p)), (Permutation (p ++ gv0) (a :: ql)), (Permutation (p ++ gv0) (a :: gv0)), (Permutation (p ++ gv0) (k :: q))
(Permutation (p ++ gv0) (k :: p)), (Permutation (p ++ gv0) (k :: ql)), (Permutation (p ++ gv0) (k :: gv0)), (Permutation (p ++ gv0) (merge q q)), (Permutation (p ++ gv0) (merge q p)), (Permutation (p ++ gv0) (merge q ql)), (Permutation (p ++ gv0) (merge q gv0)), (Permutation (p ++ gv0) (merge p q)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p ql))
(Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge ql q)), (Permutation (p ++ gv0) (merge ql p)), (Permutation (p ++ gv0) (merge ql ql)), (Permutation (p ++ gv0) (merge ql gv0)), (Permutation (p ++ gv0) (merge gv0 q)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 ql)), (Permutation (p ++ gv0) (merge gv0 gv0)), (Permutation (p ++ gv0) (insert a q))
(Permutation (p ++ gv0) (insert a p)), (Permutation (p ++ gv0) (insert a ql)), (Permutation (p ++ gv0) (insert a gv0)), (Permutation (p ++ gv0) (insert k q)), (Permutation (p ++ gv0) (insert k p)), (Permutation (p ++ gv0) (insert k ql)), (Permutation (p ++ gv0) (insert k gv0)), (Permutation (p ++ gv0) (maybe_swap q)), (Permutation (p ++ gv0) (maybe_swap p)), (Permutation (p ++ gv0) (maybe_swap ql))
(Permutation (p ++ gv0) (maybe_swap gv0)), (Permutation (p ++ gv0) (q ++ q)), (Permutation (p ++ gv0) (q ++ p)), (Permutation (p ++ gv0) (q ++ ql)), (Permutation (p ++ gv0) (q ++ gv0)), (Permutation (p ++ gv0) (p ++ q)), (Permutation (p ++ gv0) (p ++ p)), (Permutation (p ++ gv0) (p ++ ql)), (Permutation (p ++ gv0) (ql ++ q)), (Permutation (p ++ gv0) (ql ++ p))
(Permutation (p ++ gv0) (ql ++ ql)), (Permutation (p ++ gv0) (ql ++ gv0)), (Permutation (p ++ gv0) (gv0 ++ q)), (Permutation (p ++ gv0) (gv0 ++ p)), (Permutation (p ++ gv0) (gv0 ++ ql)), (Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) []), (Permutation (ql ++ q) q), (Permutation (ql ++ q) p), (Permutation (ql ++ q) ql)
(Permutation (ql ++ q) gv0), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: gv0)), (Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (k :: ql)), (Permutation (ql ++ q) (k :: gv0)), (Permutation (ql ++ q) (merge q q))
(Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q gv0)), (Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (merge p ql)), (Permutation (ql ++ q) (merge p gv0)), (Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge ql ql))
(Permutation (ql ++ q) (merge ql gv0)), (Permutation (ql ++ q) (merge gv0 q)), (Permutation (ql ++ q) (merge gv0 p)), (Permutation (ql ++ q) (merge gv0 ql)), (Permutation (ql ++ q) (merge gv0 gv0)), (Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a gv0)), (Permutation (ql ++ q) (insert k q))
(Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k gv0)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap gv0)), (Permutation (ql ++ q) (q ++ q)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (q ++ ql))
(Permutation (ql ++ q) (q ++ gv0)), (Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ p)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ gv0)), (Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ gv0)), (Permutation (ql ++ q) (gv0 ++ q)), (Permutation (ql ++ q) (gv0 ++ p))
(Permutation (ql ++ q) (gv0 ++ ql)), (Permutation (ql ++ q) (gv0 ++ gv0)), (Permutation (ql ++ q) []), (Permutation (ql ++ p) q), (Permutation (ql ++ p) p), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) gv0), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (a :: ql))
(Permutation (ql ++ p) (a :: gv0)), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: gv0)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q gv0)), (Permutation (ql ++ p) (merge p q))
(Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p gv0)), (Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge ql ql)), (Permutation (ql ++ p) (merge ql gv0)), (Permutation (ql ++ p) (merge gv0 q)), (Permutation (ql ++ p) (merge gv0 p)), (Permutation (ql ++ p) (merge gv0 ql))
(Permutation (ql ++ p) (merge gv0 gv0)), (Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (insert a ql)), (Permutation (ql ++ p) (insert a gv0)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k gv0)), (Permutation (ql ++ p) (maybe_swap q))
(Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap gv0)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ gv0)), (Permutation (ql ++ p) (p ++ q)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) (p ++ ql))
(Permutation (ql ++ p) (p ++ gv0)), (Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (ql ++ gv0)), (Permutation (ql ++ p) (gv0 ++ q)), (Permutation (ql ++ p) (gv0 ++ p)), (Permutation (ql ++ p) (gv0 ++ ql)), (Permutation (ql ++ p) (gv0 ++ gv0)), (Permutation (ql ++ p) []), (Permutation (ql ++ ql) q)
(Permutation (ql ++ ql) p), (Permutation (ql ++ ql) ql), (Permutation (ql ++ ql) gv0), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: gv0)), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (k :: ql))
(Permutation (ql ++ ql) (k :: gv0)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q gv0)), (Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p gv0)), (Permutation (ql ++ ql) (merge ql q))
(Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql gv0)), (Permutation (ql ++ ql) (merge gv0 q)), (Permutation (ql ++ ql) (merge gv0 p)), (Permutation (ql ++ ql) (merge gv0 ql)), (Permutation (ql ++ ql) (merge gv0 gv0)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (insert a ql))
(Permutation (ql ++ ql) (insert a gv0)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k gv0)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap gv0)), (Permutation (ql ++ ql) (q ++ q))
(Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ gv0)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ gv0)), (Permutation (ql ++ ql) (ql ++ q)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (ql ++ gv0))
(Permutation (ql ++ ql) (gv0 ++ q)), (Permutation (ql ++ ql) (gv0 ++ p)), (Permutation (ql ++ ql) (gv0 ++ ql)), (Permutation (ql ++ ql) (gv0 ++ gv0)), (Permutation (ql ++ ql) []), (Permutation (ql ++ gv0) q), (Permutation (ql ++ gv0) p), (Permutation (ql ++ gv0) ql), (Permutation (ql ++ gv0) gv0), (Permutation (ql ++ gv0) (a :: q))
(Permutation (ql ++ gv0) (a :: p)), (Permutation (ql ++ gv0) (a :: ql)), (Permutation (ql ++ gv0) (a :: gv0)), (Permutation (ql ++ gv0) (k :: q)), (Permutation (ql ++ gv0) (k :: p)), (Permutation (ql ++ gv0) (k :: ql)), (Permutation (ql ++ gv0) (k :: gv0)), (Permutation (ql ++ gv0) (merge q q)), (Permutation (ql ++ gv0) (merge q p)), (Permutation (ql ++ gv0) (merge q ql))
(Permutation (ql ++ gv0) (merge q gv0)), (Permutation (ql ++ gv0) (merge p q)), (Permutation (ql ++ gv0) (merge p p)), (Permutation (ql ++ gv0) (merge p ql)), (Permutation (ql ++ gv0) (merge p gv0)), (Permutation (ql ++ gv0) (merge ql q)), (Permutation (ql ++ gv0) (merge ql p)), (Permutation (ql ++ gv0) (merge ql ql)), (Permutation (ql ++ gv0) (merge ql gv0)), (Permutation (ql ++ gv0) (merge gv0 q))
(Permutation (ql ++ gv0) (merge gv0 p)), (Permutation (ql ++ gv0) (merge gv0 ql)), (Permutation (ql ++ gv0) (merge gv0 gv0)), (Permutation (ql ++ gv0) (insert a q)), (Permutation (ql ++ gv0) (insert a p)), (Permutation (ql ++ gv0) (insert a ql)), (Permutation (ql ++ gv0) (insert a gv0)), (Permutation (ql ++ gv0) (insert k q)), (Permutation (ql ++ gv0) (insert k p)), (Permutation (ql ++ gv0) (insert k ql))
(Permutation (ql ++ gv0) (insert k gv0)), (Permutation (ql ++ gv0) (maybe_swap q)), (Permutation (ql ++ gv0) (maybe_swap p)), (Permutation (ql ++ gv0) (maybe_swap ql)), (Permutation (ql ++ gv0) (maybe_swap gv0)), (Permutation (ql ++ gv0) (q ++ q)), (Permutation (ql ++ gv0) (q ++ p)), (Permutation (ql ++ gv0) (q ++ ql)), (Permutation (ql ++ gv0) (q ++ gv0)), (Permutation (ql ++ gv0) (p ++ q))
(Permutation (ql ++ gv0) (p ++ p)), (Permutation (ql ++ gv0) (p ++ ql)), (Permutation (ql ++ gv0) (p ++ gv0)), (Permutation (ql ++ gv0) (ql ++ q)), (Permutation (ql ++ gv0) (ql ++ p)), (Permutation (ql ++ gv0) (ql ++ ql)), (Permutation (ql ++ gv0) (gv0 ++ q)), (Permutation (ql ++ gv0) (gv0 ++ p)), (Permutation (ql ++ gv0) (gv0 ++ ql)), (Permutation (ql ++ gv0) (gv0 ++ gv0))
(Permutation (ql ++ gv0) []), (Permutation (gv0 ++ q) q), (Permutation (gv0 ++ q) p), (Permutation (gv0 ++ q) ql), (Permutation (gv0 ++ q) gv0), (Permutation (gv0 ++ q) (a :: q)), (Permutation (gv0 ++ q) (a :: p)), (Permutation (gv0 ++ q) (a :: ql)), (Permutation (gv0 ++ q) (a :: gv0)), (Permutation (gv0 ++ q) (k :: q))
(Permutation (gv0 ++ q) (k :: p)), (Permutation (gv0 ++ q) (k :: ql)), (Permutation (gv0 ++ q) (k :: gv0)), (Permutation (gv0 ++ q) (merge q q)), (Permutation (gv0 ++ q) (merge q p)), (Permutation (gv0 ++ q) (merge q ql)), (Permutation (gv0 ++ q) (merge q gv0)), (Permutation (gv0 ++ q) (merge p q)), (Permutation (gv0 ++ q) (merge p p)), (Permutation (gv0 ++ q) (merge p ql))
(Permutation (gv0 ++ q) (merge p gv0)), (Permutation (gv0 ++ q) (merge ql q)), (Permutation (gv0 ++ q) (merge ql p)), (Permutation (gv0 ++ q) (merge ql ql)), (Permutation (gv0 ++ q) (merge ql gv0)), (Permutation (gv0 ++ q) (merge gv0 q)), (Permutation (gv0 ++ q) (merge gv0 p)), (Permutation (gv0 ++ q) (merge gv0 ql)), (Permutation (gv0 ++ q) (merge gv0 gv0)), (Permutation (gv0 ++ q) (insert a q))
(Permutation (gv0 ++ q) (insert a p)), (Permutation (gv0 ++ q) (insert a ql)), (Permutation (gv0 ++ q) (insert a gv0)), (Permutation (gv0 ++ q) (insert k q)), (Permutation (gv0 ++ q) (insert k p)), (Permutation (gv0 ++ q) (insert k ql)), (Permutation (gv0 ++ q) (insert k gv0)), (Permutation (gv0 ++ q) (maybe_swap q)), (Permutation (gv0 ++ q) (maybe_swap p)), (Permutation (gv0 ++ q) (maybe_swap ql))
(Permutation (gv0 ++ q) (maybe_swap gv0)), (Permutation (gv0 ++ q) (q ++ q)), (Permutation (gv0 ++ q) (q ++ p)), (Permutation (gv0 ++ q) (q ++ ql)), (Permutation (gv0 ++ q) (q ++ gv0)), (Permutation (gv0 ++ q) (p ++ q)), (Permutation (gv0 ++ q) (p ++ p)), (Permutation (gv0 ++ q) (p ++ ql)), (Permutation (gv0 ++ q) (p ++ gv0)), (Permutation (gv0 ++ q) (ql ++ q))
(Permutation (gv0 ++ q) (ql ++ p)), (Permutation (gv0 ++ q) (ql ++ ql)), (Permutation (gv0 ++ q) (ql ++ gv0)), (Permutation (gv0 ++ q) (gv0 ++ p)), (Permutation (gv0 ++ q) (gv0 ++ ql)), (Permutation (gv0 ++ q) (gv0 ++ gv0)), (Permutation (gv0 ++ q) []), (Permutation (gv0 ++ p) q), (Permutation (gv0 ++ p) p), (Permutation (gv0 ++ p) ql)
(Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) (a :: q)), (Permutation (gv0 ++ p) (a :: p)), (Permutation (gv0 ++ p) (a :: ql)), (Permutation (gv0 ++ p) (a :: gv0)), (Permutation (gv0 ++ p) (k :: q)), (Permutation (gv0 ++ p) (k :: p)), (Permutation (gv0 ++ p) (k :: ql)), (Permutation (gv0 ++ p) (k :: gv0)), (Permutation (gv0 ++ p) (merge q q))
(Permutation (gv0 ++ p) (merge q p)), (Permutation (gv0 ++ p) (merge q ql)), (Permutation (gv0 ++ p) (merge q gv0)), (Permutation (gv0 ++ p) (merge p q)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p ql)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge ql q)), (Permutation (gv0 ++ p) (merge ql p)), (Permutation (gv0 ++ p) (merge ql ql))
(Permutation (gv0 ++ p) (merge ql gv0)), (Permutation (gv0 ++ p) (merge gv0 q)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 ql)), (Permutation (gv0 ++ p) (merge gv0 gv0)), (Permutation (gv0 ++ p) (insert a q)), (Permutation (gv0 ++ p) (insert a p)), (Permutation (gv0 ++ p) (insert a ql)), (Permutation (gv0 ++ p) (insert a gv0)), (Permutation (gv0 ++ p) (insert k q))
(Permutation (gv0 ++ p) (insert k p)), (Permutation (gv0 ++ p) (insert k ql)), (Permutation (gv0 ++ p) (insert k gv0)), (Permutation (gv0 ++ p) (maybe_swap q)), (Permutation (gv0 ++ p) (maybe_swap p)), (Permutation (gv0 ++ p) (maybe_swap ql)), (Permutation (gv0 ++ p) (maybe_swap gv0)), (Permutation (gv0 ++ p) (q ++ q)), (Permutation (gv0 ++ p) (q ++ p)), (Permutation (gv0 ++ p) (q ++ ql))
(Permutation (gv0 ++ p) (q ++ gv0)), (Permutation (gv0 ++ p) (p ++ q)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ ql)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (ql ++ q)), (Permutation (gv0 ++ p) (ql ++ p)), (Permutation (gv0 ++ p) (ql ++ ql)), (Permutation (gv0 ++ p) (ql ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ q))
(Permutation (gv0 ++ p) (gv0 ++ ql)), (Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ ql) q), (Permutation (gv0 ++ ql) p), (Permutation (gv0 ++ ql) ql), (Permutation (gv0 ++ ql) gv0), (Permutation (gv0 ++ ql) (a :: q)), (Permutation (gv0 ++ ql) (a :: p)), (Permutation (gv0 ++ ql) (a :: ql))
(Permutation (gv0 ++ ql) (a :: gv0)), (Permutation (gv0 ++ ql) (k :: q)), (Permutation (gv0 ++ ql) (k :: p)), (Permutation (gv0 ++ ql) (k :: ql)), (Permutation (gv0 ++ ql) (k :: gv0)), (Permutation (gv0 ++ ql) (merge q q)), (Permutation (gv0 ++ ql) (merge q p)), (Permutation (gv0 ++ ql) (merge q ql)), (Permutation (gv0 ++ ql) (merge q gv0)), (Permutation (gv0 ++ ql) (merge p q))
(Permutation (gv0 ++ ql) (merge p p)), (Permutation (gv0 ++ ql) (merge p ql)), (Permutation (gv0 ++ ql) (merge p gv0)), (Permutation (gv0 ++ ql) (merge ql q)), (Permutation (gv0 ++ ql) (merge ql p)), (Permutation (gv0 ++ ql) (merge ql ql)), (Permutation (gv0 ++ ql) (merge ql gv0)), (Permutation (gv0 ++ ql) (merge gv0 q)), (Permutation (gv0 ++ ql) (merge gv0 p)), (Permutation (gv0 ++ ql) (merge gv0 ql))
(Permutation (gv0 ++ ql) (merge gv0 gv0)), (Permutation (gv0 ++ ql) (insert a q)), (Permutation (gv0 ++ ql) (insert a p)), (Permutation (gv0 ++ ql) (insert a ql)), (Permutation (gv0 ++ ql) (insert a gv0)), (Permutation (gv0 ++ ql) (insert k q)), (Permutation (gv0 ++ ql) (insert k p)), (Permutation (gv0 ++ ql) (insert k ql)), (Permutation (gv0 ++ ql) (insert k gv0)), (Permutation (gv0 ++ ql) (maybe_swap q))
(Permutation (gv0 ++ ql) (maybe_swap p)), (Permutation (gv0 ++ ql) (maybe_swap ql)), (Permutation (gv0 ++ ql) (maybe_swap gv0)), (Permutation (gv0 ++ ql) (q ++ q)), (Permutation (gv0 ++ ql) (q ++ p)), (Permutation (gv0 ++ ql) (q ++ ql)), (Permutation (gv0 ++ ql) (q ++ gv0)), (Permutation (gv0 ++ ql) (p ++ q)), (Permutation (gv0 ++ ql) (p ++ p)), (Permutation (gv0 ++ ql) (p ++ ql))
(Permutation (gv0 ++ ql) (p ++ gv0)), (Permutation (gv0 ++ ql) (ql ++ q)), (Permutation (gv0 ++ ql) (ql ++ p)), (Permutation (gv0 ++ ql) (ql ++ ql)), (Permutation (gv0 ++ ql) (ql ++ gv0)), (Permutation (gv0 ++ ql) (gv0 ++ q)), (Permutation (gv0 ++ ql) (gv0 ++ p)), (Permutation (gv0 ++ ql) (gv0 ++ gv0)), (Permutation (gv0 ++ ql) []), (Permutation (gv0 ++ gv0) q)
(Permutation (gv0 ++ gv0) p), (Permutation (gv0 ++ gv0) ql), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: q)), (Permutation (gv0 ++ gv0) (a :: p)), (Permutation (gv0 ++ gv0) (a :: ql)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (k :: q)), (Permutation (gv0 ++ gv0) (k :: p)), (Permutation (gv0 ++ gv0) (k :: ql))
(Permutation (gv0 ++ gv0) (k :: gv0)), (Permutation (gv0 ++ gv0) (merge q q)), (Permutation (gv0 ++ gv0) (merge q p)), (Permutation (gv0 ++ gv0) (merge q ql)), (Permutation (gv0 ++ gv0) (merge q gv0)), (Permutation (gv0 ++ gv0) (merge p q)), (Permutation (gv0 ++ gv0) (merge p p)), (Permutation (gv0 ++ gv0) (merge p ql)), (Permutation (gv0 ++ gv0) (merge p gv0)), (Permutation (gv0 ++ gv0) (merge ql q))
(Permutation (gv0 ++ gv0) (merge ql p)), (Permutation (gv0 ++ gv0) (merge ql ql)), (Permutation (gv0 ++ gv0) (merge ql gv0)), (Permutation (gv0 ++ gv0) (merge gv0 q)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 ql)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (insert a q)), (Permutation (gv0 ++ gv0) (insert a p)), (Permutation (gv0 ++ gv0) (insert a ql))
(Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (insert k q)), (Permutation (gv0 ++ gv0) (insert k p)), (Permutation (gv0 ++ gv0) (insert k ql)), (Permutation (gv0 ++ gv0) (insert k gv0)), (Permutation (gv0 ++ gv0) (maybe_swap q)), (Permutation (gv0 ++ gv0) (maybe_swap p)), (Permutation (gv0 ++ gv0) (maybe_swap ql)), (Permutation (gv0 ++ gv0) (maybe_swap gv0)), (Permutation (gv0 ++ gv0) (q ++ q))
(Permutation (gv0 ++ gv0) (q ++ p)), (Permutation (gv0 ++ gv0) (q ++ ql)), (Permutation (gv0 ++ gv0) (q ++ gv0)), (Permutation (gv0 ++ gv0) (p ++ q)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ ql)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (ql ++ q)), (Permutation (gv0 ++ gv0) (ql ++ p)), (Permutation (gv0 ++ gv0) (ql ++ ql))
(Permutation (gv0 ++ gv0) (ql ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ q)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) (gv0 ++ ql)), (Permutation (gv0 ++ gv0) []), (Permutation [] q), (Permutation [] p), (Permutation [] ql), (Permutation [] gv0), (Permutation [] (a :: q))
(Permutation [] (a :: p)), (Permutation [] (a :: ql)), (Permutation [] (a :: gv0)), (Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (k :: ql)), (Permutation [] (k :: gv0)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge q ql))
(Permutation [] (merge q gv0)), (Permutation [] (merge p q)), (Permutation [] (merge p p)), (Permutation [] (merge p ql)), (Permutation [] (merge p gv0)), (Permutation [] (merge ql q)), (Permutation [] (merge ql p)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql gv0)), (Permutation [] (merge gv0 q))
(Permutation [] (merge gv0 p)), (Permutation [] (merge gv0 ql)), (Permutation [] (merge gv0 gv0)), (Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (insert a ql)), (Permutation [] (insert a gv0)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert k ql))
(Permutation [] (insert k gv0)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap gv0)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (q ++ ql)), (Permutation [] (q ++ gv0)), (Permutation [] (p ++ q))
(Permutation [] (p ++ p)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ gv0)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ p)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ gv0)), (Permutation [] (gv0 ++ q)), (Permutation [] (gv0 ++ p)), (Permutation [] (gv0 ++ ql))
(Permutation [] (gv0 ++ gv0)), (In a (a :: q)), (In a (a :: p)), (In a (a :: ql)), (In a (a :: gv0)), (In a (k :: q)), (In a (k :: p)), (In a (k :: ql)), (In a (k :: gv0)), (In a (merge q q))
(In a (merge q p)), (In a (merge q ql)), (In a (merge q gv0)), (In a (merge p q)), (In a (merge p p)), (In a (merge p ql)), (In a (merge p gv0)), (In a (merge ql q)), (In a (merge ql p)), (In a (merge ql ql))
(In a (merge ql gv0)), (In a (merge gv0 q)), (In a (merge gv0 p)), (In a (merge gv0 ql)), (In a (merge gv0 gv0)), (In a (insert a q)), (In a (insert a p)), (In a (insert a ql)), (In a (insert a gv0)), (In a (insert k q))
(In a (insert k p)), (In a (insert k ql)), (In a (insert k gv0)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (maybe_swap ql)), (In a (maybe_swap gv0)), (In a (q ++ q)), (In a (q ++ p)), (In a (q ++ ql))
(In a (q ++ gv0)), (In a (p ++ q)), (In a (p ++ p)), (In a (p ++ ql)), (In a (p ++ gv0)), (In a (ql ++ q)), (In a (ql ++ p)), (In a (ql ++ ql)), (In a (ql ++ gv0)), (In a (gv0 ++ q))
(In a (gv0 ++ p)), (In a (gv0 ++ ql)), (In a (gv0 ++ gv0)), (In k (a :: q)), (In k (a :: p)), (In k (a :: ql)), (In k (a :: gv0)), (In k (k :: q)), (In k (k :: p)), (In k (k :: ql))
(In k (k :: gv0)), (In k (merge q q)), (In k (merge q p)), (In k (merge q ql)), (In k (merge q gv0)), (In k (merge p q)), (In k (merge p p)), (In k (merge p ql)), (In k (merge p gv0)), (In k (merge ql q))
(In k (merge ql p)), (In k (merge ql ql)), (In k (merge ql gv0)), (In k (merge gv0 q)), (In k (merge gv0 p)), (In k (merge gv0 ql)), (In k (merge gv0 gv0)), (In k (insert a q)), (In k (insert a p)), (In k (insert a ql))
(In k (insert a gv0)), (In k (insert k q)), (In k (insert k p)), (In k (insert k ql)), (In k (insert k gv0)), (In k (maybe_swap q)), (In k (maybe_swap p)), (In k (maybe_swap ql)), (In k (maybe_swap gv0)), (In k (q ++ q))
(In k (q ++ p)), (In k (q ++ ql)), (In k (q ++ gv0)), (In k (p ++ q)), (In k (p ++ p)), (In k (p ++ ql)), (In k (p ++ gv0)), (In k (ql ++ q)), (In k (ql ++ p)), (In k (ql ++ ql))
(In k (ql ++ gv0)), (In k (gv0 ++ q)), (In k (gv0 ++ p)), (In k (gv0 ++ ql)), (In k (gv0 ++ gv0)), (In (length q) q), (In (length q) p), (In (length q) ql), (In (length q) gv0), (In (length q) (a :: q))
(In (length q) (a :: p)), (In (length q) (a :: ql)), (In (length q) (a :: gv0)), (In (length q) (k :: q)), (In (length q) (k :: p)), (In (length q) (k :: ql)), (In (length q) (k :: gv0)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge q ql))
(In (length q) (merge q gv0)), (In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (merge p ql)), (In (length q) (merge p gv0)), (In (length q) (merge ql q)), (In (length q) (merge ql p)), (In (length q) (merge ql ql)), (In (length q) (merge ql gv0)), (In (length q) (merge gv0 q))
(In (length q) (merge gv0 p)), (In (length q) (merge gv0 ql)), (In (length q) (merge gv0 gv0)), (In (length q) (insert a q)), (In (length q) (insert a p)), (In (length q) (insert a ql)), (In (length q) (insert a gv0)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert k ql))
(In (length q) (insert k gv0)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap gv0)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (q ++ ql)), (In (length q) (q ++ gv0)), (In (length q) (p ++ q))
(In (length q) (p ++ p)), (In (length q) (p ++ ql)), (In (length q) (p ++ gv0)), (In (length q) (ql ++ q)), (In (length q) (ql ++ p)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ gv0)), (In (length q) (gv0 ++ q)), (In (length q) (gv0 ++ p)), (In (length q) (gv0 ++ ql))
(In (length q) (gv0 ++ gv0)), (In (length p) q), (In (length p) p), (In (length p) ql), (In (length p) gv0), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (a :: ql)), (In (length p) (a :: gv0)), (In (length p) (k :: q))
(In (length p) (k :: p)), (In (length p) (k :: ql)), (In (length p) (k :: gv0)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge q ql)), (In (length p) (merge q gv0)), (In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (merge p ql))
(In (length p) (merge p gv0)), (In (length p) (merge ql q)), (In (length p) (merge ql p)), (In (length p) (merge ql ql)), (In (length p) (merge ql gv0)), (In (length p) (merge gv0 q)), (In (length p) (merge gv0 p)), (In (length p) (merge gv0 ql)), (In (length p) (merge gv0 gv0)), (In (length p) (insert a q))
(In (length p) (insert a p)), (In (length p) (insert a ql)), (In (length p) (insert a gv0)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert k ql)), (In (length p) (insert k gv0)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (maybe_swap ql))
(In (length p) (maybe_swap gv0)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (q ++ ql)), (In (length p) (q ++ gv0)), (In (length p) (p ++ q)), (In (length p) (p ++ p)), (In (length p) (p ++ ql)), (In (length p) (p ++ gv0)), (In (length p) (ql ++ q))
(In (length p) (ql ++ p)), (In (length p) (ql ++ ql)), (In (length p) (ql ++ gv0)), (In (length p) (gv0 ++ q)), (In (length p) (gv0 ++ p)), (In (length p) (gv0 ++ ql)), (In (length p) (gv0 ++ gv0)), (In (length ql) q), (In (length ql) p), (In (length ql) ql)
(In (length ql) gv0), (In (length ql) (a :: q)), (In (length ql) (a :: p)), (In (length ql) (a :: ql)), (In (length ql) (a :: gv0)), (In (length ql) (k :: q)), (In (length ql) (k :: p)), (In (length ql) (k :: ql)), (In (length ql) (k :: gv0)), (In (length ql) (merge q q))
(In (length ql) (merge q p)), (In (length ql) (merge q ql)), (In (length ql) (merge q gv0)), (In (length ql) (merge p q)), (In (length ql) (merge p p)), (In (length ql) (merge p ql)), (In (length ql) (merge p gv0)), (In (length ql) (merge ql q)), (In (length ql) (merge ql p)), (In (length ql) (merge ql ql))
(In (length ql) (merge ql gv0)), (In (length ql) (merge gv0 q)), (In (length ql) (merge gv0 p)), (In (length ql) (merge gv0 ql)), (In (length ql) (merge gv0 gv0)), (In (length ql) (insert a q)), (In (length ql) (insert a p)), (In (length ql) (insert a ql)), (In (length ql) (insert a gv0)), (In (length ql) (insert k q))
(In (length ql) (insert k p)), (In (length ql) (insert k ql)), (In (length ql) (insert k gv0)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap p)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap gv0)), (In (length ql) (q ++ q)), (In (length ql) (q ++ p)), (In (length ql) (q ++ ql))
(In (length ql) (q ++ gv0)), (In (length ql) (p ++ q)), (In (length ql) (p ++ p)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ gv0)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ p)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ gv0)), (In (length ql) (gv0 ++ q))
(In (length ql) (gv0 ++ p)), (In (length ql) (gv0 ++ ql)), (In (length ql) (gv0 ++ gv0)), (In (length gv0) q), (In (length gv0) p), (In (length gv0) ql), (In (length gv0) gv0), (In (length gv0) (a :: q)), (In (length gv0) (a :: p)), (In (length gv0) (a :: ql))
(In (length gv0) (a :: gv0)), (In (length gv0) (k :: q)), (In (length gv0) (k :: p)), (In (length gv0) (k :: ql)), (In (length gv0) (k :: gv0)), (In (length gv0) (merge q q)), (In (length gv0) (merge q p)), (In (length gv0) (merge q ql)), (In (length gv0) (merge q gv0)), (In (length gv0) (merge p q))
(In (length gv0) (merge p p)), (In (length gv0) (merge p ql)), (In (length gv0) (merge p gv0)), (In (length gv0) (merge ql q)), (In (length gv0) (merge ql p)), (In (length gv0) (merge ql ql)), (In (length gv0) (merge ql gv0)), (In (length gv0) (merge gv0 q)), (In (length gv0) (merge gv0 p)), (In (length gv0) (merge gv0 ql))
(In (length gv0) (merge gv0 gv0)), (In (length gv0) (insert a q)), (In (length gv0) (insert a p)), (In (length gv0) (insert a ql)), (In (length gv0) (insert a gv0)), (In (length gv0) (insert k q)), (In (length gv0) (insert k p)), (In (length gv0) (insert k ql)), (In (length gv0) (insert k gv0)), (In (length gv0) (maybe_swap q))
(In (length gv0) (maybe_swap p)), (In (length gv0) (maybe_swap ql)), (In (length gv0) (maybe_swap gv0)), (In (length gv0) (q ++ q)), (In (length gv0) (q ++ p)), (In (length gv0) (q ++ ql)), (In (length gv0) (q ++ gv0)), (In (length gv0) (p ++ q)), (In (length gv0) (p ++ p)), (In (length gv0) (p ++ ql))
(In (length gv0) (p ++ gv0)), (In (length gv0) (ql ++ q)), (In (length gv0) (ql ++ p)), (In (length gv0) (ql ++ ql)), (In (length gv0) (ql ++ gv0)), (In (length gv0) (gv0 ++ q)), (In (length gv0) (gv0 ++ p)), (In (length gv0) (gv0 ++ ql)), (In (length gv0) (gv0 ++ gv0)), (a < length q)
(a < length p), (a < length ql), (a < length gv0), (k < length q), (k < length p), (k < length ql), (k < length gv0), (length q < a), (length q < k), (length q < length p)
(length q < length ql), (length q < length gv0), (length p < a), (length p < k), (length p < length q), (length p < length ql), (length p < length gv0), (length ql < a), (length ql < k), (length ql < length q)
(length ql < length p), (length ql < length gv0), (length gv0 < a), (length gv0 < k), (length gv0 < length q), (length gv0 < length p), (length gv0 < length ql), (a <= length q), (a <= length p), (a <= length ql)
(a <= length gv0), (k <= length q), (k <= length p), (k <= length ql), (k <= length gv0), (length q <= a), (length q <= k), (length q <= length p), (length q <= length ql), (length q <= length gv0)
(length p <= a), (length p <= k), (length p <= length q), (length p <= length ql), (length p <= length gv0), (length ql <= a), (length ql <= k), (length ql <= length q), (length ql <= length p), (length ql <= length gv0)
(length gv0 <= a), (length gv0 <= k), (length gv0 <= length q), (length gv0 <= length p), (length gv0 <= length ql), (~ Abs q q), (~ Abs q p), (~ Abs q ql), (~ Abs q gv0), (~ Abs p q)
(~ Abs p p), (~ Abs p ql), (~ Abs p gv0), (~ Abs ql q), (~ Abs ql p), (~ Abs ql ql), (~ Abs ql gv0), (~ Abs gv0 q), (~ Abs gv0 p), (~ Abs gv0 ql)
(~ Abs gv0 gv0), (~ priq q), (~ priq p), (~ priq ql), (~ priq gv0), (~ Permutation q q), (~ Permutation q p), (~ Permutation q ql), (~ Permutation q gv0), (~ Permutation p q)
(~ Permutation p p), (~ Permutation p ql), (~ Permutation p gv0), (~ Permutation ql q), (~ Permutation ql p), (~ Permutation ql ql), (~ Permutation ql gv0), (~ Permutation gv0 q), (~ Permutation gv0 p), (~ Permutation gv0 ql)
(~ Permutation gv0 gv0), (~ In a q), (~ In a p), (~ In a ql), (~ In a gv0), (~ In k q), (~ In k p), (~ In k ql), (~ In k gv0), (~ a < a)
(~ a < k), (~ k < a), (~ k < k), (~ a <= a), (~ a <= k), (~ k <= a), (~ k <= k), (a <> a), (a <> k), (k <> a)
(k <> k), (q <> q), (q <> p), (q <> ql), (q <> gv0), (p <> q), (p <> p), (p <> ql), (p <> gv0), (ql <> q)
(ql <> p), (ql <> ql), (ql <> gv0), (gv0 <> q), (gv0 <> p), (gv0 <> ql), (gv0 <> gv0), (None = Some q), (None = Some p), (None = Some ql)
(None = Some gv0), (a :: q = q), (a :: q = p), (a :: q = ql), (a :: q = gv0), (a :: q = merge q q), (a :: q = merge q p), (a :: q = merge q ql), (a :: q = merge q gv0), (a :: q = merge p q)
(a :: q = merge p p), (a :: q = merge p ql), (a :: q = merge p gv0), (a :: q = merge ql q), (a :: q = merge ql p), (a :: q = merge ql ql), (a :: q = merge ql gv0), (a :: q = merge gv0 q), (a :: q = merge gv0 p), (a :: q = merge gv0 ql)
(a :: q = merge gv0 gv0), (a :: q = insert a q), (a :: q = insert a p), (a :: q = insert a ql), (a :: q = insert a gv0), (a :: q = insert k q), (a :: q = insert k p), (a :: q = insert k ql), (a :: q = insert k gv0), (a :: q = maybe_swap q)
(a :: q = maybe_swap p), (a :: q = maybe_swap ql), (a :: q = maybe_swap gv0), (a :: q = q ++ q), (a :: q = q ++ p), (a :: q = q ++ ql), (a :: q = q ++ gv0), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = p ++ ql)
(a :: q = p ++ gv0), (a :: q = ql ++ q), (a :: q = ql ++ p), (a :: q = ql ++ ql), (a :: q = ql ++ gv0), (a :: q = gv0 ++ q), (a :: q = gv0 ++ p), (a :: q = gv0 ++ ql), (a :: q = gv0 ++ gv0), (a :: q = [])
(a :: p = q), (a :: p = p), (a :: p = ql), (a :: p = gv0), (a :: p = merge q q), (a :: p = merge q p), (a :: p = merge q ql), (a :: p = merge q gv0), (a :: p = merge p q), (a :: p = merge p p)
(a :: p = merge p ql), (a :: p = merge p gv0), (a :: p = merge ql q), (a :: p = merge ql p), (a :: p = merge ql ql), (a :: p = merge ql gv0), (a :: p = merge gv0 q), (a :: p = merge gv0 p), (a :: p = merge gv0 ql), (a :: p = merge gv0 gv0)
(a :: p = insert a q), (a :: p = insert a p), (a :: p = insert a ql), (a :: p = insert a gv0), (a :: p = insert k q), (a :: p = insert k p), (a :: p = insert k ql), (a :: p = insert k gv0), (a :: p = maybe_swap q), (a :: p = maybe_swap p)
(a :: p = maybe_swap ql), (a :: p = maybe_swap gv0), (a :: p = q ++ q), (a :: p = q ++ p), (a :: p = q ++ ql), (a :: p = q ++ gv0), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = p ++ ql), (a :: p = p ++ gv0)
(a :: p = ql ++ q), (a :: p = ql ++ p), (a :: p = ql ++ ql), (a :: p = ql ++ gv0), (a :: p = gv0 ++ q), (a :: p = gv0 ++ p), (a :: p = gv0 ++ ql), (a :: p = gv0 ++ gv0), (a :: p = []), (a :: ql = q)
(a :: ql = p), (a :: ql = ql), (a :: ql = gv0), (a :: ql = merge q q), (a :: ql = merge q p), (a :: ql = merge q ql), (a :: ql = merge q gv0), (a :: ql = merge p q), (a :: ql = merge p p), (a :: ql = merge p ql)
(a :: ql = merge p gv0), (a :: ql = merge ql q), (a :: ql = merge ql p), (a :: ql = merge ql ql), (a :: ql = merge ql gv0), (a :: ql = merge gv0 q), (a :: ql = merge gv0 p), (a :: ql = merge gv0 ql), (a :: ql = merge gv0 gv0), (a :: ql = insert a q)
(a :: ql = insert a p), (a :: ql = insert a ql), (a :: ql = insert a gv0), (a :: ql = insert k q), (a :: ql = insert k p), (a :: ql = insert k ql), (a :: ql = insert k gv0), (a :: ql = maybe_swap q), (a :: ql = maybe_swap p), (a :: ql = maybe_swap ql)
(a :: ql = maybe_swap gv0), (a :: ql = q ++ q), (a :: ql = q ++ p), (a :: ql = q ++ ql), (a :: ql = q ++ gv0), (a :: ql = p ++ q), (a :: ql = p ++ p), (a :: ql = p ++ ql), (a :: ql = p ++ gv0), (a :: ql = ql ++ q)
(a :: ql = ql ++ p), (a :: ql = ql ++ ql), (a :: ql = ql ++ gv0), (a :: ql = gv0 ++ q), (a :: ql = gv0 ++ p), (a :: ql = gv0 ++ ql), (a :: ql = gv0 ++ gv0), (a :: ql = []), (a :: gv0 = q), (a :: gv0 = p)
(a :: gv0 = ql), (a :: gv0 = gv0), (a :: gv0 = merge q q), (a :: gv0 = merge q p), (a :: gv0 = merge q ql), (a :: gv0 = merge q gv0), (a :: gv0 = merge p q), (a :: gv0 = merge p p), (a :: gv0 = merge p ql), (a :: gv0 = merge p gv0)
(a :: gv0 = merge ql q), (a :: gv0 = merge ql p), (a :: gv0 = merge ql ql), (a :: gv0 = merge ql gv0), (a :: gv0 = merge gv0 q), (a :: gv0 = merge gv0 p), (a :: gv0 = merge gv0 ql), (a :: gv0 = merge gv0 gv0), (a :: gv0 = insert a q), (a :: gv0 = insert a p)
(a :: gv0 = insert a ql), (a :: gv0 = insert a gv0), (a :: gv0 = insert k q), (a :: gv0 = insert k p), (a :: gv0 = insert k ql), (a :: gv0 = insert k gv0), (a :: gv0 = maybe_swap q), (a :: gv0 = maybe_swap p), (a :: gv0 = maybe_swap ql), (a :: gv0 = maybe_swap gv0)
(a :: gv0 = q ++ q), (a :: gv0 = q ++ p), (a :: gv0 = q ++ ql), (a :: gv0 = q ++ gv0), (a :: gv0 = p ++ q), (a :: gv0 = p ++ p), (a :: gv0 = p ++ ql), (a :: gv0 = p ++ gv0), (a :: gv0 = ql ++ q), (a :: gv0 = ql ++ p)
(a :: gv0 = ql ++ ql), (a :: gv0 = ql ++ gv0), (a :: gv0 = gv0 ++ q), (a :: gv0 = gv0 ++ p), (a :: gv0 = gv0 ++ ql), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (k :: q = q), (k :: q = p), (k :: q = ql)
(k :: q = gv0), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge q ql), (k :: q = merge q gv0), (k :: q = merge p q), (k :: q = merge p p), (k :: q = merge p ql), (k :: q = merge p gv0), (k :: q = merge ql q)
(k :: q = merge ql p), (k :: q = merge ql ql), (k :: q = merge ql gv0), (k :: q = merge gv0 q), (k :: q = merge gv0 p), (k :: q = merge gv0 ql), (k :: q = merge gv0 gv0), (k :: q = insert a q), (k :: q = insert a p), (k :: q = insert a ql)
(k :: q = insert a gv0), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert k ql), (k :: q = insert k gv0), (k :: q = maybe_swap q), (k :: q = maybe_swap p), (k :: q = maybe_swap ql), (k :: q = maybe_swap gv0), (k :: q = q ++ q)
(k :: q = q ++ p), (k :: q = q ++ ql), (k :: q = q ++ gv0), (k :: q = p ++ q), (k :: q = p ++ p), (k :: q = p ++ ql), (k :: q = p ++ gv0), (k :: q = ql ++ q), (k :: q = ql ++ p), (k :: q = ql ++ ql)
(k :: q = ql ++ gv0), (k :: q = gv0 ++ q), (k :: q = gv0 ++ p), (k :: q = gv0 ++ ql), (k :: q = gv0 ++ gv0), (k :: q = []), (k :: p = q), (k :: p = p), (k :: p = ql), (k :: p = gv0)
(k :: p = merge q q), (k :: p = merge q p), (k :: p = merge q ql), (k :: p = merge q gv0), (k :: p = merge p q), (k :: p = merge p p), (k :: p = merge p ql), (k :: p = merge p gv0), (k :: p = merge ql q), (k :: p = merge ql p)
(k :: p = merge ql ql), (k :: p = merge ql gv0), (k :: p = merge gv0 q), (k :: p = merge gv0 p), (k :: p = merge gv0 ql), (k :: p = merge gv0 gv0), (k :: p = insert a q), (k :: p = insert a p), (k :: p = insert a ql), (k :: p = insert a gv0)
(k :: p = insert k q), (k :: p = insert k p), (k :: p = insert k ql), (k :: p = insert k gv0), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = maybe_swap ql), (k :: p = maybe_swap gv0), (k :: p = q ++ q), (k :: p = q ++ p)
(k :: p = q ++ ql), (k :: p = q ++ gv0), (k :: p = p ++ q), (k :: p = p ++ p), (k :: p = p ++ ql), (k :: p = p ++ gv0), (k :: p = ql ++ q), (k :: p = ql ++ p), (k :: p = ql ++ ql), (k :: p = ql ++ gv0)
(k :: p = gv0 ++ q), (k :: p = gv0 ++ p), (k :: p = gv0 ++ ql), (k :: p = gv0 ++ gv0), (k :: p = []), (k :: ql = q), (k :: ql = p), (k :: ql = ql), (k :: ql = gv0), (k :: ql = merge q q)
(k :: ql = merge q p), (k :: ql = merge q ql), (k :: ql = merge q gv0), (k :: ql = merge p q), (k :: ql = merge p p), (k :: ql = merge p ql), (k :: ql = merge p gv0), (k :: ql = merge ql q), (k :: ql = merge ql p), (k :: ql = merge ql ql)
(k :: ql = merge ql gv0), (k :: ql = merge gv0 q), (k :: ql = merge gv0 p), (k :: ql = merge gv0 ql), (k :: ql = merge gv0 gv0), (k :: ql = insert a q), (k :: ql = insert a p), (k :: ql = insert a ql), (k :: ql = insert a gv0), (k :: ql = insert k q)
(k :: ql = insert k p), (k :: ql = insert k ql), (k :: ql = insert k gv0), (k :: ql = maybe_swap q), (k :: ql = maybe_swap p), (k :: ql = maybe_swap ql), (k :: ql = maybe_swap gv0), (k :: ql = q ++ q), (k :: ql = q ++ p), (k :: ql = q ++ ql)
(k :: ql = q ++ gv0), (k :: ql = p ++ q), (k :: ql = p ++ p), (k :: ql = p ++ ql), (k :: ql = p ++ gv0), (k :: ql = ql ++ q), (k :: ql = ql ++ p), (k :: ql = ql ++ ql), (k :: ql = ql ++ gv0), (k :: ql = gv0 ++ q)
(k :: ql = gv0 ++ p), (k :: ql = gv0 ++ ql), (k :: ql = gv0 ++ gv0), (k :: ql = []), (k :: gv0 = q), (k :: gv0 = p), (k :: gv0 = ql), (k :: gv0 = gv0), (k :: gv0 = merge q q), (k :: gv0 = merge q p)
(k :: gv0 = merge q ql), (k :: gv0 = merge q gv0), (k :: gv0 = merge p q), (k :: gv0 = merge p p), (k :: gv0 = merge p ql), (k :: gv0 = merge p gv0), (k :: gv0 = merge ql q), (k :: gv0 = merge ql p), (k :: gv0 = merge ql ql), (k :: gv0 = merge ql gv0)
(k :: gv0 = merge gv0 q), (k :: gv0 = merge gv0 p), (k :: gv0 = merge gv0 ql), (k :: gv0 = merge gv0 gv0), (k :: gv0 = insert a q), (k :: gv0 = insert a p), (k :: gv0 = insert a ql), (k :: gv0 = insert a gv0), (k :: gv0 = insert k q), (k :: gv0 = insert k p)
(k :: gv0 = insert k ql), (k :: gv0 = insert k gv0), (k :: gv0 = maybe_swap q), (k :: gv0 = maybe_swap p), (k :: gv0 = maybe_swap ql), (k :: gv0 = maybe_swap gv0), (k :: gv0 = q ++ q), (k :: gv0 = q ++ p), (k :: gv0 = q ++ ql), (k :: gv0 = q ++ gv0)
(k :: gv0 = p ++ q), (k :: gv0 = p ++ p), (k :: gv0 = p ++ ql), (k :: gv0 = p ++ gv0), (k :: gv0 = ql ++ q), (k :: gv0 = ql ++ p), (k :: gv0 = ql ++ ql), (k :: gv0 = ql ++ gv0), (k :: gv0 = gv0 ++ q), (k :: gv0 = gv0 ++ p)
(k :: gv0 = gv0 ++ ql), (k :: gv0 = gv0 ++ gv0), (k :: gv0 = []), (merge q q = q), (merge q q = p), (merge q q = ql), (merge q q = gv0), (merge q q = insert a q), (merge q q = insert a p), (merge q q = insert a ql)
(merge q q = insert a gv0), (merge q q = insert k q), (merge q q = insert k p), (merge q q = insert k ql), (merge q q = insert k gv0), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = maybe_swap ql), (merge q q = maybe_swap gv0), (merge q q = q ++ q)
(merge q q = q ++ p), (merge q q = q ++ ql), (merge q q = q ++ gv0), (merge q q = p ++ q), (merge q q = p ++ p), (merge q q = p ++ ql), (merge q q = p ++ gv0), (merge q q = ql ++ q), (merge q q = ql ++ p), (merge q q = ql ++ ql)
(merge q q = ql ++ gv0), (merge q q = gv0 ++ q), (merge q q = gv0 ++ p), (merge q q = gv0 ++ ql), (merge q q = gv0 ++ gv0), (merge q p = q), (merge q p = p), (merge q p = ql), (merge q p = gv0), (merge q p = insert a q)
(merge q p = insert a p), (merge q p = insert a ql), (merge q p = insert a gv0), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert k ql), (merge q p = insert k gv0), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = maybe_swap ql)
(merge q p = maybe_swap gv0), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = q ++ ql), (merge q p = q ++ gv0), (merge q p = p ++ q), (merge q p = p ++ p), (merge q p = p ++ ql), (merge q p = p ++ gv0), (merge q p = ql ++ q)
(merge q p = ql ++ p), (merge q p = ql ++ ql), (merge q p = ql ++ gv0), (merge q p = gv0 ++ q), (merge q p = gv0 ++ p), (merge q p = gv0 ++ ql), (merge q p = gv0 ++ gv0), (merge q ql = q), (merge q ql = p), (merge q ql = ql)
(merge q ql = gv0), (merge q ql = insert a q), (merge q ql = insert a p), (merge q ql = insert a ql), (merge q ql = insert a gv0), (merge q ql = insert k q), (merge q ql = insert k p), (merge q ql = insert k ql), (merge q ql = insert k gv0), (merge q ql = maybe_swap q)
(merge q ql = maybe_swap p), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap gv0), (merge q ql = q ++ q), (merge q ql = q ++ p), (merge q ql = q ++ ql), (merge q ql = q ++ gv0), (merge q ql = p ++ q), (merge q ql = p ++ p), (merge q ql = p ++ ql)
(merge q ql = p ++ gv0), (merge q ql = ql ++ q), (merge q ql = ql ++ p), (merge q ql = ql ++ ql), (merge q ql = ql ++ gv0), (merge q ql = gv0 ++ q), (merge q ql = gv0 ++ p), (merge q ql = gv0 ++ ql), (merge q ql = gv0 ++ gv0), (merge q gv0 = q)
(merge q gv0 = p), (merge q gv0 = ql), (merge q gv0 = gv0), (merge q gv0 = insert a q), (merge q gv0 = insert a p), (merge q gv0 = insert a ql), (merge q gv0 = insert a gv0), (merge q gv0 = insert k q), (merge q gv0 = insert k p), (merge q gv0 = insert k ql)
(merge q gv0 = insert k gv0), (merge q gv0 = maybe_swap q), (merge q gv0 = maybe_swap p), (merge q gv0 = maybe_swap ql), (merge q gv0 = maybe_swap gv0), (merge q gv0 = q ++ q), (merge q gv0 = q ++ p), (merge q gv0 = q ++ ql), (merge q gv0 = q ++ gv0), (merge q gv0 = p ++ q)
(merge q gv0 = p ++ p), (merge q gv0 = p ++ ql), (merge q gv0 = p ++ gv0), (merge q gv0 = ql ++ q), (merge q gv0 = ql ++ p), (merge q gv0 = ql ++ ql), (merge q gv0 = ql ++ gv0), (merge q gv0 = gv0 ++ q), (merge q gv0 = gv0 ++ p), (merge q gv0 = gv0 ++ ql)
(merge q gv0 = gv0 ++ gv0), (merge p q = q), (merge p q = p), (merge p q = ql), (merge p q = gv0), (merge p q = insert a q), (merge p q = insert a p), (merge p q = insert a ql), (merge p q = insert a gv0), (merge p q = insert k q)
(merge p q = insert k p), (merge p q = insert k ql), (merge p q = insert k gv0), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = maybe_swap ql), (merge p q = maybe_swap gv0), (merge p q = q ++ q), (merge p q = q ++ p), (merge p q = q ++ ql)
(merge p q = q ++ gv0), (merge p q = p ++ q), (merge p q = p ++ p), (merge p q = p ++ ql), (merge p q = p ++ gv0), (merge p q = ql ++ q), (merge p q = ql ++ p), (merge p q = ql ++ ql), (merge p q = ql ++ gv0), (merge p q = gv0 ++ q)
(merge p q = gv0 ++ p), (merge p q = gv0 ++ ql), (merge p q = gv0 ++ gv0), (merge p p = q), (merge p p = p), (merge p p = ql), (merge p p = gv0), (merge p p = insert a q), (merge p p = insert a p), (merge p p = insert a ql)
(merge p p = insert a gv0), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert k ql), (merge p p = insert k gv0), (merge p p = maybe_swap q), (merge p p = maybe_swap p), (merge p p = maybe_swap ql), (merge p p = maybe_swap gv0), (merge p p = q ++ q)
(merge p p = q ++ p), (merge p p = q ++ ql), (merge p p = q ++ gv0), (merge p p = p ++ q), (merge p p = p ++ p), (merge p p = p ++ ql), (merge p p = p ++ gv0), (merge p p = ql ++ q), (merge p p = ql ++ p), (merge p p = ql ++ ql)
(merge p p = ql ++ gv0), (merge p p = gv0 ++ q), (merge p p = gv0 ++ p), (merge p p = gv0 ++ ql), (merge p p = gv0 ++ gv0), (merge p ql = q), (merge p ql = p), (merge p ql = ql), (merge p ql = gv0), (merge p ql = insert a q)
(merge p ql = insert a p), (merge p ql = insert a ql), (merge p ql = insert a gv0), (merge p ql = insert k q), (merge p ql = insert k p), (merge p ql = insert k ql), (merge p ql = insert k gv0), (merge p ql = maybe_swap q), (merge p ql = maybe_swap p), (merge p ql = maybe_swap ql)
(merge p ql = maybe_swap gv0), (merge p ql = q ++ q), (merge p ql = q ++ p), (merge p ql = q ++ ql), (merge p ql = q ++ gv0), (merge p ql = p ++ q), (merge p ql = p ++ p), (merge p ql = p ++ ql), (merge p ql = p ++ gv0), (merge p ql = ql ++ q)
(merge p ql = ql ++ p), (merge p ql = ql ++ ql), (merge p ql = ql ++ gv0), (merge p ql = gv0 ++ q), (merge p ql = gv0 ++ p), (merge p ql = gv0 ++ ql), (merge p ql = gv0 ++ gv0), (merge p gv0 = q), (merge p gv0 = p), (merge p gv0 = ql)
(merge p gv0 = gv0), (merge p gv0 = insert a q), (merge p gv0 = insert a p), (merge p gv0 = insert a ql), (merge p gv0 = insert a gv0), (merge p gv0 = insert k q), (merge p gv0 = insert k p), (merge p gv0 = insert k ql), (merge p gv0 = insert k gv0), (merge p gv0 = maybe_swap q)
(merge p gv0 = maybe_swap p), (merge p gv0 = maybe_swap ql), (merge p gv0 = maybe_swap gv0), (merge p gv0 = q ++ q), (merge p gv0 = q ++ p), (merge p gv0 = q ++ ql), (merge p gv0 = q ++ gv0), (merge p gv0 = p ++ q), (merge p gv0 = p ++ p), (merge p gv0 = p ++ ql)
(merge p gv0 = p ++ gv0), (merge p gv0 = ql ++ q), (merge p gv0 = ql ++ p), (merge p gv0 = ql ++ ql), (merge p gv0 = ql ++ gv0), (merge p gv0 = gv0 ++ q), (merge p gv0 = gv0 ++ p), (merge p gv0 = gv0 ++ ql), (merge p gv0 = gv0 ++ gv0), (merge ql q = q)
(merge ql q = p), (merge ql q = ql), (merge ql q = gv0), (merge ql q = insert a q), (merge ql q = insert a p), (merge ql q = insert a ql), (merge ql q = insert a gv0), (merge ql q = insert k q), (merge ql q = insert k p), (merge ql q = insert k ql)
(merge ql q = insert k gv0), (merge ql q = maybe_swap q), (merge ql q = maybe_swap p), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap gv0), (merge ql q = q ++ q), (merge ql q = q ++ p), (merge ql q = q ++ ql), (merge ql q = q ++ gv0), (merge ql q = p ++ q)
(merge ql q = p ++ p), (merge ql q = p ++ ql), (merge ql q = p ++ gv0), (merge ql q = ql ++ q), (merge ql q = ql ++ p), (merge ql q = ql ++ ql), (merge ql q = ql ++ gv0), (merge ql q = gv0 ++ q), (merge ql q = gv0 ++ p), (merge ql q = gv0 ++ ql)
(merge ql q = gv0 ++ gv0), (merge ql p = q), (merge ql p = p), (merge ql p = ql), (merge ql p = gv0), (merge ql p = insert a q), (merge ql p = insert a p), (merge ql p = insert a ql), (merge ql p = insert a gv0), (merge ql p = insert k q)
(merge ql p = insert k p), (merge ql p = insert k ql), (merge ql p = insert k gv0), (merge ql p = maybe_swap q), (merge ql p = maybe_swap p), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap gv0), (merge ql p = q ++ q), (merge ql p = q ++ p), (merge ql p = q ++ ql)
(merge ql p = q ++ gv0), (merge ql p = p ++ q), (merge ql p = p ++ p), (merge ql p = p ++ ql), (merge ql p = p ++ gv0), (merge ql p = ql ++ q), (merge ql p = ql ++ p), (merge ql p = ql ++ ql), (merge ql p = ql ++ gv0), (merge ql p = gv0 ++ q)
(merge ql p = gv0 ++ p), (merge ql p = gv0 ++ ql), (merge ql p = gv0 ++ gv0), (merge ql ql = q), (merge ql ql = p), (merge ql ql = ql), (merge ql ql = gv0), (merge ql ql = insert a q), (merge ql ql = insert a p), (merge ql ql = insert a ql)
(merge ql ql = insert a gv0), (merge ql ql = insert k q), (merge ql ql = insert k p), (merge ql ql = insert k ql), (merge ql ql = insert k gv0), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap p), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap gv0), (merge ql ql = q ++ q)
(merge ql ql = q ++ p), (merge ql ql = q ++ ql), (merge ql ql = q ++ gv0), (merge ql ql = p ++ q), (merge ql ql = p ++ p), (merge ql ql = p ++ ql), (merge ql ql = p ++ gv0), (merge ql ql = ql ++ q), (merge ql ql = ql ++ p), (merge ql ql = ql ++ ql)
(merge ql ql = ql ++ gv0), (merge ql ql = gv0 ++ q), (merge ql ql = gv0 ++ p), (merge ql ql = gv0 ++ ql), (merge ql ql = gv0 ++ gv0), (merge ql gv0 = q), (merge ql gv0 = p), (merge ql gv0 = ql), (merge ql gv0 = gv0), (merge ql gv0 = insert a q)
(merge ql gv0 = insert a p), (merge ql gv0 = insert a ql), (merge ql gv0 = insert a gv0), (merge ql gv0 = insert k q), (merge ql gv0 = insert k p), (merge ql gv0 = insert k ql), (merge ql gv0 = insert k gv0), (merge ql gv0 = maybe_swap q), (merge ql gv0 = maybe_swap p), (merge ql gv0 = maybe_swap ql)
(merge ql gv0 = maybe_swap gv0), (merge ql gv0 = q ++ q), (merge ql gv0 = q ++ p), (merge ql gv0 = q ++ ql), (merge ql gv0 = q ++ gv0), (merge ql gv0 = p ++ q), (merge ql gv0 = p ++ p), (merge ql gv0 = p ++ ql), (merge ql gv0 = p ++ gv0), (merge ql gv0 = ql ++ q)
(merge ql gv0 = ql ++ p), (merge ql gv0 = ql ++ ql), (merge ql gv0 = ql ++ gv0), (merge ql gv0 = gv0 ++ q), (merge ql gv0 = gv0 ++ p), (merge ql gv0 = gv0 ++ ql), (merge ql gv0 = gv0 ++ gv0), (merge gv0 q = q), (merge gv0 q = p), (merge gv0 q = ql)
(merge gv0 q = gv0), (merge gv0 q = insert a q), (merge gv0 q = insert a p), (merge gv0 q = insert a ql), (merge gv0 q = insert a gv0), (merge gv0 q = insert k q), (merge gv0 q = insert k p), (merge gv0 q = insert k ql), (merge gv0 q = insert k gv0), (merge gv0 q = maybe_swap q)
(merge gv0 q = maybe_swap p), (merge gv0 q = maybe_swap ql), (merge gv0 q = maybe_swap gv0), (merge gv0 q = q ++ q), (merge gv0 q = q ++ p), (merge gv0 q = q ++ ql), (merge gv0 q = q ++ gv0), (merge gv0 q = p ++ q), (merge gv0 q = p ++ p), (merge gv0 q = p ++ ql)
(merge gv0 q = p ++ gv0), (merge gv0 q = ql ++ q), (merge gv0 q = ql ++ p), (merge gv0 q = ql ++ ql), (merge gv0 q = ql ++ gv0), (merge gv0 q = gv0 ++ q), (merge gv0 q = gv0 ++ p), (merge gv0 q = gv0 ++ ql), (merge gv0 q = gv0 ++ gv0), (merge gv0 p = q)
(merge gv0 p = p), (merge gv0 p = ql), (merge gv0 p = gv0), (merge gv0 p = insert a q), (merge gv0 p = insert a p), (merge gv0 p = insert a ql), (merge gv0 p = insert a gv0), (merge gv0 p = insert k q), (merge gv0 p = insert k p), (merge gv0 p = insert k ql)
(merge gv0 p = insert k gv0), (merge gv0 p = maybe_swap q), (merge gv0 p = maybe_swap p), (merge gv0 p = maybe_swap ql), (merge gv0 p = maybe_swap gv0), (merge gv0 p = q ++ q), (merge gv0 p = q ++ p), (merge gv0 p = q ++ ql), (merge gv0 p = q ++ gv0), (merge gv0 p = p ++ q)
(merge gv0 p = p ++ p), (merge gv0 p = p ++ ql), (merge gv0 p = p ++ gv0), (merge gv0 p = ql ++ q), (merge gv0 p = ql ++ p), (merge gv0 p = ql ++ ql), (merge gv0 p = ql ++ gv0), (merge gv0 p = gv0 ++ q), (merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ ql)
(merge gv0 p = gv0 ++ gv0), (merge gv0 ql = q), (merge gv0 ql = p), (merge gv0 ql = ql), (merge gv0 ql = gv0), (merge gv0 ql = insert a q), (merge gv0 ql = insert a p), (merge gv0 ql = insert a ql), (merge gv0 ql = insert a gv0), (merge gv0 ql = insert k q)
(merge gv0 ql = insert k p), (merge gv0 ql = insert k ql), (merge gv0 ql = insert k gv0), (merge gv0 ql = maybe_swap q), (merge gv0 ql = maybe_swap p), (merge gv0 ql = maybe_swap ql), (merge gv0 ql = maybe_swap gv0), (merge gv0 ql = q ++ q), (merge gv0 ql = q ++ p), (merge gv0 ql = q ++ ql)
(merge gv0 ql = q ++ gv0), (merge gv0 ql = p ++ q), (merge gv0 ql = p ++ p), (merge gv0 ql = p ++ ql), (merge gv0 ql = p ++ gv0), (merge gv0 ql = ql ++ q), (merge gv0 ql = ql ++ p), (merge gv0 ql = ql ++ ql), (merge gv0 ql = ql ++ gv0), (merge gv0 ql = gv0 ++ q)
(merge gv0 ql = gv0 ++ p), (merge gv0 ql = gv0 ++ ql), (merge gv0 ql = gv0 ++ gv0), (merge gv0 gv0 = q), (merge gv0 gv0 = p), (merge gv0 gv0 = ql), (merge gv0 gv0 = gv0), (merge gv0 gv0 = insert a q), (merge gv0 gv0 = insert a p), (merge gv0 gv0 = insert a ql)
(merge gv0 gv0 = insert a gv0), (merge gv0 gv0 = insert k q), (merge gv0 gv0 = insert k p), (merge gv0 gv0 = insert k ql), (merge gv0 gv0 = insert k gv0), (merge gv0 gv0 = maybe_swap q), (merge gv0 gv0 = maybe_swap p), (merge gv0 gv0 = maybe_swap ql), (merge gv0 gv0 = maybe_swap gv0), (merge gv0 gv0 = q ++ q)
(merge gv0 gv0 = q ++ p), (merge gv0 gv0 = q ++ ql), (merge gv0 gv0 = q ++ gv0), (merge gv0 gv0 = p ++ q), (merge gv0 gv0 = p ++ p), (merge gv0 gv0 = p ++ ql), (merge gv0 gv0 = p ++ gv0), (merge gv0 gv0 = ql ++ q), (merge gv0 gv0 = ql ++ p), (merge gv0 gv0 = ql ++ ql)
(merge gv0 gv0 = ql ++ gv0), (merge gv0 gv0 = gv0 ++ q), (merge gv0 gv0 = gv0 ++ p), (merge gv0 gv0 = gv0 ++ ql), (merge gv0 gv0 = gv0 ++ gv0), (insert a q = q), (insert a q = p), (insert a q = ql), (insert a q = gv0), (insert a q = q ++ q)
(insert a q = q ++ p), (insert a q = q ++ ql), (insert a q = q ++ gv0), (insert a q = p ++ q), (insert a q = p ++ p), (insert a q = p ++ ql), (insert a q = p ++ gv0), (insert a q = ql ++ q), (insert a q = ql ++ p), (insert a q = ql ++ ql)
(insert a q = ql ++ gv0), (insert a q = gv0 ++ q), (insert a q = gv0 ++ p), (insert a q = gv0 ++ ql), (insert a q = gv0 ++ gv0), (insert a p = q), (insert a p = p), (insert a p = ql), (insert a p = gv0), (insert a p = q ++ q)
(insert a p = q ++ p), (insert a p = q ++ ql), (insert a p = q ++ gv0), (insert a p = p ++ q), (insert a p = p ++ p), (insert a p = p ++ ql), (insert a p = p ++ gv0), (insert a p = ql ++ q), (insert a p = ql ++ p), (insert a p = ql ++ ql)
(insert a p = ql ++ gv0), (insert a p = gv0 ++ q), (insert a p = gv0 ++ p), (insert a p = gv0 ++ ql), (insert a p = gv0 ++ gv0), (insert a ql = q), (insert a ql = p), (insert a ql = ql), (insert a ql = gv0), (insert a ql = q ++ q)
(insert a ql = q ++ p), (insert a ql = q ++ ql), (insert a ql = q ++ gv0), (insert a ql = p ++ q), (insert a ql = p ++ p), (insert a ql = p ++ ql), (insert a ql = p ++ gv0), (insert a ql = ql ++ q), (insert a ql = ql ++ p), (insert a ql = ql ++ ql)
(insert a ql = ql ++ gv0), (insert a ql = gv0 ++ q), (insert a ql = gv0 ++ p), (insert a ql = gv0 ++ ql), (insert a ql = gv0 ++ gv0), (insert a gv0 = q), (insert a gv0 = p), (insert a gv0 = ql), (insert a gv0 = gv0), (insert a gv0 = q ++ q)
(insert a gv0 = q ++ p), (insert a gv0 = q ++ ql), (insert a gv0 = q ++ gv0), (insert a gv0 = p ++ q), (insert a gv0 = p ++ p), (insert a gv0 = p ++ ql), (insert a gv0 = p ++ gv0), (insert a gv0 = ql ++ q), (insert a gv0 = ql ++ p), (insert a gv0 = ql ++ ql)
(insert a gv0 = ql ++ gv0), (insert a gv0 = gv0 ++ q), (insert a gv0 = gv0 ++ p), (insert a gv0 = gv0 ++ ql), (insert a gv0 = gv0 ++ gv0), (insert k q = q), (insert k q = p), (insert k q = ql), (insert k q = gv0), (insert k q = q ++ q)
(insert k q = q ++ p), (insert k q = q ++ ql), (insert k q = q ++ gv0), (insert k q = p ++ q), (insert k q = p ++ p), (insert k q = p ++ ql), (insert k q = p ++ gv0), (insert k q = ql ++ q), (insert k q = ql ++ p), (insert k q = ql ++ ql)
(insert k q = ql ++ gv0), (insert k q = gv0 ++ q), (insert k q = gv0 ++ p), (insert k q = gv0 ++ ql), (insert k q = gv0 ++ gv0), (insert k p = q), (insert k p = p), (insert k p = ql), (insert k p = gv0), (insert k p = q ++ q)
(insert k p = q ++ p), (insert k p = q ++ ql), (insert k p = q ++ gv0), (insert k p = p ++ q), (insert k p = p ++ p), (insert k p = p ++ ql), (insert k p = p ++ gv0), (insert k p = ql ++ q), (insert k p = ql ++ p), (insert k p = ql ++ ql)
(insert k p = ql ++ gv0), (insert k p = gv0 ++ q), (insert k p = gv0 ++ p), (insert k p = gv0 ++ ql), (insert k p = gv0 ++ gv0), (insert k ql = q), (insert k ql = p), (insert k ql = ql), (insert k ql = gv0), (insert k ql = q ++ q)
(insert k ql = q ++ p), (insert k ql = q ++ ql), (insert k ql = q ++ gv0), (insert k ql = p ++ q), (insert k ql = p ++ p), (insert k ql = p ++ ql), (insert k ql = p ++ gv0), (insert k ql = ql ++ q), (insert k ql = ql ++ p), (insert k ql = ql ++ ql)
(insert k ql = ql ++ gv0), (insert k ql = gv0 ++ q), (insert k ql = gv0 ++ p), (insert k ql = gv0 ++ ql), (insert k ql = gv0 ++ gv0), (insert k gv0 = q), (insert k gv0 = p), (insert k gv0 = ql), (insert k gv0 = gv0), (insert k gv0 = q ++ q)
(insert k gv0 = q ++ p), (insert k gv0 = q ++ ql), (insert k gv0 = q ++ gv0), (insert k gv0 = p ++ q), (insert k gv0 = p ++ p), (insert k gv0 = p ++ ql), (insert k gv0 = p ++ gv0), (insert k gv0 = ql ++ q), (insert k gv0 = ql ++ p), (insert k gv0 = ql ++ ql)
(insert k gv0 = ql ++ gv0), (insert k gv0 = gv0 ++ q), (insert k gv0 = gv0 ++ p), (insert k gv0 = gv0 ++ ql), (insert k gv0 = gv0 ++ gv0), (maybe_swap q = q), (maybe_swap q = p), (maybe_swap q = ql), (maybe_swap q = gv0), (maybe_swap q = insert a q)
(maybe_swap q = insert a p), (maybe_swap q = insert a ql), (maybe_swap q = insert a gv0), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert k ql), (maybe_swap q = insert k gv0), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = q ++ ql)
(maybe_swap q = q ++ gv0), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ gv0), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ p), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ gv0), (maybe_swap q = gv0 ++ q)
(maybe_swap q = gv0 ++ p), (maybe_swap q = gv0 ++ ql), (maybe_swap q = gv0 ++ gv0), (maybe_swap p = q), (maybe_swap p = p), (maybe_swap p = ql), (maybe_swap p = gv0), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = insert a ql)
(maybe_swap p = insert a gv0), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert k ql), (maybe_swap p = insert k gv0), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ gv0), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ p), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ gv0), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ p), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ gv0), (maybe_swap p = gv0 ++ q), (maybe_swap p = gv0 ++ p), (maybe_swap p = gv0 ++ ql)
(maybe_swap p = gv0 ++ gv0), (maybe_swap ql = q), (maybe_swap ql = p), (maybe_swap ql = ql), (maybe_swap ql = gv0), (maybe_swap ql = insert a q), (maybe_swap ql = insert a p), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a gv0), (maybe_swap ql = insert k q)
(maybe_swap ql = insert k p), (maybe_swap ql = insert k ql), (maybe_swap ql = insert k gv0), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ p), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ gv0), (maybe_swap ql = p ++ q), (maybe_swap ql = p ++ p), (maybe_swap ql = p ++ ql)
(maybe_swap ql = p ++ gv0), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ p), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ gv0), (maybe_swap ql = gv0 ++ q), (maybe_swap ql = gv0 ++ p), (maybe_swap ql = gv0 ++ ql), (maybe_swap ql = gv0 ++ gv0), (maybe_swap gv0 = q)
(maybe_swap gv0 = p), (maybe_swap gv0 = ql), (maybe_swap gv0 = gv0), (maybe_swap gv0 = insert a q), (maybe_swap gv0 = insert a p), (maybe_swap gv0 = insert a ql), (maybe_swap gv0 = insert a gv0), (maybe_swap gv0 = insert k q), (maybe_swap gv0 = insert k p), (maybe_swap gv0 = insert k ql)
(maybe_swap gv0 = insert k gv0), (maybe_swap gv0 = q ++ q), (maybe_swap gv0 = q ++ p), (maybe_swap gv0 = q ++ ql), (maybe_swap gv0 = q ++ gv0), (maybe_swap gv0 = p ++ q), (maybe_swap gv0 = p ++ p), (maybe_swap gv0 = p ++ ql), (maybe_swap gv0 = p ++ gv0), (maybe_swap gv0 = ql ++ q)
(maybe_swap gv0 = ql ++ p), (maybe_swap gv0 = ql ++ ql), (maybe_swap gv0 = ql ++ gv0), (maybe_swap gv0 = gv0 ++ q), (maybe_swap gv0 = gv0 ++ p), (maybe_swap gv0 = gv0 ++ ql), (maybe_swap gv0 = gv0 ++ gv0), (q ++ q = q), (q ++ q = p), (q ++ q = ql)
(q ++ q = gv0), (q ++ p = q), (q ++ p = p), (q ++ p = ql), (q ++ p = gv0), (q ++ ql = q), (q ++ ql = p), (q ++ ql = ql), (q ++ ql = gv0), (q ++ gv0 = q)
(q ++ gv0 = p), (q ++ gv0 = ql), (q ++ gv0 = gv0), (p ++ q = q), (p ++ q = p), (p ++ q = ql), (p ++ q = gv0), (p ++ p = q), (p ++ p = p), (p ++ p = ql)
(p ++ p = gv0), (p ++ ql = q), (p ++ ql = p), (p ++ ql = ql), (p ++ ql = gv0), (p ++ gv0 = q), (p ++ gv0 = p), (p ++ gv0 = ql), (p ++ gv0 = gv0), (ql ++ q = q)
(ql ++ q = p), (ql ++ q = ql), (ql ++ q = gv0), (ql ++ p = q), (ql ++ p = p), (ql ++ p = ql), (ql ++ p = gv0), (ql ++ ql = q), (ql ++ ql = p), (ql ++ ql = ql)
(ql ++ ql = gv0), (ql ++ gv0 = q), (ql ++ gv0 = p), (ql ++ gv0 = ql), (ql ++ gv0 = gv0), (gv0 ++ q = q), (gv0 ++ q = p), (gv0 ++ q = ql), (gv0 ++ q = gv0), (gv0 ++ p = q)
(gv0 ++ p = p), (gv0 ++ p = ql), (gv0 ++ p = gv0), (gv0 ++ ql = q), (gv0 ++ ql = p), (gv0 ++ ql = ql), (gv0 ++ ql = gv0), (gv0 ++ gv0 = q), (gv0 ++ gv0 = p), (gv0 ++ gv0 = ql)
(gv0 ++ gv0 = gv0), ([] = q), ([] = p), ([] = ql), ([] = gv0), ([] = merge q q), ([] = merge q p), ([] = merge q ql), ([] = merge q gv0), ([] = merge p q)
([] = merge p p), ([] = merge p ql), ([] = merge p gv0), ([] = merge ql q), ([] = merge ql p), ([] = merge ql ql), ([] = merge ql gv0), ([] = merge gv0 q), ([] = merge gv0 p), ([] = merge gv0 ql)
([] = merge gv0 gv0), ([] = insert a q), ([] = insert a p), ([] = insert a ql), ([] = insert a gv0), ([] = insert k q), ([] = insert k p), ([] = insert k ql), ([] = insert k gv0), ([] = maybe_swap q)
([] = maybe_swap p), ([] = maybe_swap ql), ([] = maybe_swap gv0), ([] = q ++ q), ([] = q ++ p), ([] = q ++ ql), ([] = q ++ gv0), ([] = p ++ q), ([] = p ++ p), ([] = p ++ ql)
([] = p ++ gv0), ([] = ql ++ q), ([] = ql ++ p), ([] = ql ++ ql), ([] = ql ++ gv0), ([] = gv0 ++ q), ([] = gv0 ++ p), ([] = gv0 ++ ql), ([] = gv0 ++ gv0), (None = Some a)
(None = Some k), ((a, q) = select a q), ((a, q) = select a p), ((a, q) = select a ql), ((a, q) = select a gv0), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select k ql), ((a, q) = select k gv0), ((a, p) = select a q)
((a, p) = select a p), ((a, p) = select a ql), ((a, p) = select a gv0), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select k ql), ((a, p) = select k gv0), ((a, ql) = select a q), ((a, ql) = select a p), ((a, ql) = select a ql)
((a, ql) = select a gv0), ((a, ql) = select k q), ((a, ql) = select k p), ((a, ql) = select k ql), ((a, ql) = select k gv0), ((a, gv0) = select a q), ((a, gv0) = select a p), ((a, gv0) = select a ql), ((a, gv0) = select a gv0), ((a, gv0) = select k q)
((a, gv0) = select k p), ((a, gv0) = select k ql), ((a, gv0) = select k gv0), ((k, q) = select a q), ((k, q) = select a p), ((k, q) = select a ql), ((k, q) = select a gv0), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select k ql)
((k, q) = select k gv0), ((k, p) = select a q), ((k, p) = select a p), ((k, p) = select a ql), ((k, p) = select a gv0), ((k, p) = select k q), ((k, p) = select k p), ((k, p) = select k ql), ((k, p) = select k gv0), ((k, ql) = select a q)
((k, ql) = select a p), ((k, ql) = select a ql), ((k, ql) = select a gv0), ((k, ql) = select k q), ((k, ql) = select k p), ((k, ql) = select k ql), ((k, ql) = select k gv0), ((k, gv0) = select a q), ((k, gv0) = select a p), ((k, gv0) = select a ql)
((k, gv0) = select a gv0), ((k, gv0) = select k q), ((k, gv0) = select k p), ((k, gv0) = select k ql), ((k, gv0) = select k gv0), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (k >=? k)), ((a >? k) = (a >=? a))
((a >? k) = (a >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (k >=? k)), ((k >? a) = (a >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (k >=? k)), ((k >? k) = (a >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (k >=? a))
((k >? k) = (k >=? k)), (length q = a), (length q = k), (length p = a), (length p = k), (length ql = a), (length ql = k), (length gv0 = a), (length gv0 = k)

Label: 3 (3)
(Abs ql ql), (Abs ql q), (Abs ql gv1), (Abs ql p), (Abs q ql), (Abs q q), (Abs q gv1), (Abs q p), (Abs gv1 ql), (Abs gv1 q)
(Abs gv1 gv1), (Abs gv1 p), (Abs p ql), (Abs p q), (Abs p gv1), (Abs p p), (priq ql), (priq q), (priq gv1), (priq p)
(Permutation ql ql), (Permutation ql q), (Permutation ql gv1), (Permutation ql p), (Permutation q ql), (Permutation q q), (Permutation q gv1), (Permutation q p), (Permutation gv1 ql), (Permutation gv1 q)
(Permutation gv1 gv1), (Permutation gv1 p), (Permutation p ql), (Permutation p q), (Permutation p gv1), (Permutation p p), (In k ql), (In k q), (In k gv1), (In k p)
(In a ql), (In a q), (In a gv1), (In a p), (k < k), (k < a), (a < k), (a < a), (k <= k), (k <= a)
(a <= k), (a <= a), (ql = ql), (ql = q), (ql = gv1), (ql = p), (q = ql), (q = q), (q = gv1), (q = p)
(gv1 = ql), (gv1 = q), (gv1 = gv1), (gv1 = p), (p = ql), (p = q), (p = gv1), (p = p), (k = k), (k = a)
(a = k), (a = a), (false = (k >? k)), (false = (k >? a)), (false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a))
(true = (k >? k)), (true = (k >? a)), (true = (a >? k)), (true = (a >? a)), (true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs ql (k :: ql)), (Abs ql (k :: q))
(Abs ql (k :: gv1)), (Abs ql (k :: p)), (Abs ql (a :: ql)), (Abs ql (a :: q)), (Abs ql (a :: gv1)), (Abs ql (a :: p)), (Abs ql (merge ql ql)), (Abs ql (merge ql q)), (Abs ql (merge ql gv1)), (Abs ql (merge ql p))
(Abs ql (merge q ql)), (Abs ql (merge q q)), (Abs ql (merge q gv1)), (Abs ql (merge q p)), (Abs ql (merge gv1 ql)), (Abs ql (merge gv1 q)), (Abs ql (merge gv1 gv1)), (Abs ql (merge gv1 p)), (Abs ql (merge p ql)), (Abs ql (merge p q))
(Abs ql (merge p gv1)), (Abs ql (merge p p)), (Abs ql (insert k ql)), (Abs ql (insert k q)), (Abs ql (insert k gv1)), (Abs ql (insert k p)), (Abs ql (insert a ql)), (Abs ql (insert a q)), (Abs ql (insert a gv1)), (Abs ql (insert a p))
(Abs ql (maybe_swap ql)), (Abs ql (maybe_swap q)), (Abs ql (maybe_swap gv1)), (Abs ql (maybe_swap p)), (Abs ql (ql ++ ql)), (Abs ql (ql ++ q)), (Abs ql (ql ++ gv1)), (Abs ql (ql ++ p)), (Abs ql (q ++ ql)), (Abs ql (q ++ q))
(Abs ql (q ++ gv1)), (Abs ql (q ++ p)), (Abs ql (gv1 ++ ql)), (Abs ql (gv1 ++ q)), (Abs ql (gv1 ++ gv1)), (Abs ql (gv1 ++ p)), (Abs ql (p ++ ql)), (Abs ql (p ++ q)), (Abs ql (p ++ gv1)), (Abs ql (p ++ p))
(Abs ql []), (Abs q (k :: ql)), (Abs q (k :: q)), (Abs q (k :: gv1)), (Abs q (k :: p)), (Abs q (a :: ql)), (Abs q (a :: q)), (Abs q (a :: gv1)), (Abs q (a :: p)), (Abs q (merge ql ql))
(Abs q (merge ql q)), (Abs q (merge ql gv1)), (Abs q (merge ql p)), (Abs q (merge q ql)), (Abs q (merge q q)), (Abs q (merge q gv1)), (Abs q (merge q p)), (Abs q (merge gv1 ql)), (Abs q (merge gv1 q)), (Abs q (merge gv1 gv1))
(Abs q (merge gv1 p)), (Abs q (merge p ql)), (Abs q (merge p q)), (Abs q (merge p gv1)), (Abs q (merge p p)), (Abs q (insert k ql)), (Abs q (insert k q)), (Abs q (insert k gv1)), (Abs q (insert k p)), (Abs q (insert a ql))
(Abs q (insert a q)), (Abs q (insert a gv1)), (Abs q (insert a p)), (Abs q (maybe_swap ql)), (Abs q (maybe_swap q)), (Abs q (maybe_swap gv1)), (Abs q (maybe_swap p)), (Abs q (ql ++ ql)), (Abs q (ql ++ q)), (Abs q (ql ++ gv1))
(Abs q (ql ++ p)), (Abs q (q ++ ql)), (Abs q (q ++ q)), (Abs q (q ++ gv1)), (Abs q (q ++ p)), (Abs q (gv1 ++ ql)), (Abs q (gv1 ++ q)), (Abs q (gv1 ++ gv1)), (Abs q (gv1 ++ p)), (Abs q (p ++ ql))
(Abs q (p ++ q)), (Abs q (p ++ gv1)), (Abs q (p ++ p)), (Abs q []), (Abs gv1 (k :: ql)), (Abs gv1 (k :: q)), (Abs gv1 (k :: gv1)), (Abs gv1 (k :: p)), (Abs gv1 (a :: ql)), (Abs gv1 (a :: q))
(Abs gv1 (a :: gv1)), (Abs gv1 (a :: p)), (Abs gv1 (merge ql ql)), (Abs gv1 (merge ql q)), (Abs gv1 (merge ql gv1)), (Abs gv1 (merge ql p)), (Abs gv1 (merge q ql)), (Abs gv1 (merge q q)), (Abs gv1 (merge q gv1)), (Abs gv1 (merge q p))
(Abs gv1 (merge gv1 ql)), (Abs gv1 (merge gv1 q)), (Abs gv1 (merge gv1 gv1)), (Abs gv1 (merge gv1 p)), (Abs gv1 (merge p ql)), (Abs gv1 (merge p q)), (Abs gv1 (merge p gv1)), (Abs gv1 (merge p p)), (Abs gv1 (insert k ql)), (Abs gv1 (insert k q))
(Abs gv1 (insert k gv1)), (Abs gv1 (insert k p)), (Abs gv1 (insert a ql)), (Abs gv1 (insert a q)), (Abs gv1 (insert a gv1)), (Abs gv1 (insert a p)), (Abs gv1 (maybe_swap ql)), (Abs gv1 (maybe_swap q)), (Abs gv1 (maybe_swap gv1)), (Abs gv1 (maybe_swap p))
(Abs gv1 (ql ++ ql)), (Abs gv1 (ql ++ q)), (Abs gv1 (ql ++ gv1)), (Abs gv1 (ql ++ p)), (Abs gv1 (q ++ ql)), (Abs gv1 (q ++ q)), (Abs gv1 (q ++ gv1)), (Abs gv1 (q ++ p)), (Abs gv1 (gv1 ++ ql)), (Abs gv1 (gv1 ++ q))
(Abs gv1 (gv1 ++ gv1)), (Abs gv1 (gv1 ++ p)), (Abs gv1 (p ++ ql)), (Abs gv1 (p ++ q)), (Abs gv1 (p ++ gv1)), (Abs gv1 (p ++ p)), (Abs gv1 []), (Abs p (k :: ql)), (Abs p (k :: q)), (Abs p (k :: gv1))
(Abs p (k :: p)), (Abs p (a :: ql)), (Abs p (a :: q)), (Abs p (a :: gv1)), (Abs p (a :: p)), (Abs p (merge ql ql)), (Abs p (merge ql q)), (Abs p (merge ql gv1)), (Abs p (merge ql p)), (Abs p (merge q ql))
(Abs p (merge q q)), (Abs p (merge q gv1)), (Abs p (merge q p)), (Abs p (merge gv1 ql)), (Abs p (merge gv1 q)), (Abs p (merge gv1 gv1)), (Abs p (merge gv1 p)), (Abs p (merge p ql)), (Abs p (merge p q)), (Abs p (merge p gv1))
(Abs p (merge p p)), (Abs p (insert k ql)), (Abs p (insert k q)), (Abs p (insert k gv1)), (Abs p (insert k p)), (Abs p (insert a ql)), (Abs p (insert a q)), (Abs p (insert a gv1)), (Abs p (insert a p)), (Abs p (maybe_swap ql))
(Abs p (maybe_swap q)), (Abs p (maybe_swap gv1)), (Abs p (maybe_swap p)), (Abs p (ql ++ ql)), (Abs p (ql ++ q)), (Abs p (ql ++ gv1)), (Abs p (ql ++ p)), (Abs p (q ++ ql)), (Abs p (q ++ q)), (Abs p (q ++ gv1))
(Abs p (q ++ p)), (Abs p (gv1 ++ ql)), (Abs p (gv1 ++ q)), (Abs p (gv1 ++ gv1)), (Abs p (gv1 ++ p)), (Abs p (p ++ ql)), (Abs p (p ++ q)), (Abs p (p ++ gv1)), (Abs p (p ++ p)), (Abs p [])
(Abs (k :: ql) ql), (Abs (k :: ql) q), (Abs (k :: ql) gv1), (Abs (k :: ql) p), (Abs (k :: ql) (k :: q)), (Abs (k :: ql) (k :: gv1)), (Abs (k :: ql) (k :: p)), (Abs (k :: ql) (a :: ql)), (Abs (k :: ql) (a :: q)), (Abs (k :: ql) (a :: gv1))
(Abs (k :: ql) (a :: p)), (Abs (k :: ql) (merge ql ql)), (Abs (k :: ql) (merge ql q)), (Abs (k :: ql) (merge ql gv1)), (Abs (k :: ql) (merge ql p)), (Abs (k :: ql) (merge q ql)), (Abs (k :: ql) (merge q q)), (Abs (k :: ql) (merge q gv1)), (Abs (k :: ql) (merge q p)), (Abs (k :: ql) (merge gv1 ql))
(Abs (k :: ql) (merge gv1 q)), (Abs (k :: ql) (merge gv1 gv1)), (Abs (k :: ql) (merge gv1 p)), (Abs (k :: ql) (merge p ql)), (Abs (k :: ql) (merge p q)), (Abs (k :: ql) (merge p gv1)), (Abs (k :: ql) (merge p p)), (Abs (k :: ql) (insert k ql)), (Abs (k :: ql) (insert k q)), (Abs (k :: ql) (insert k gv1))
(Abs (k :: ql) (insert k p)), (Abs (k :: ql) (insert a ql)), (Abs (k :: ql) (insert a q)), (Abs (k :: ql) (insert a gv1)), (Abs (k :: ql) (insert a p)), (Abs (k :: ql) (maybe_swap ql)), (Abs (k :: ql) (maybe_swap q)), (Abs (k :: ql) (maybe_swap gv1)), (Abs (k :: ql) (maybe_swap p)), (Abs (k :: ql) (ql ++ ql))
(Abs (k :: ql) (ql ++ q)), (Abs (k :: ql) (ql ++ gv1)), (Abs (k :: ql) (ql ++ p)), (Abs (k :: ql) (q ++ ql)), (Abs (k :: ql) (q ++ q)), (Abs (k :: ql) (q ++ gv1)), (Abs (k :: ql) (q ++ p)), (Abs (k :: ql) (gv1 ++ ql)), (Abs (k :: ql) (gv1 ++ q)), (Abs (k :: ql) (gv1 ++ gv1))
(Abs (k :: ql) (gv1 ++ p)), (Abs (k :: ql) (p ++ ql)), (Abs (k :: ql) (p ++ q)), (Abs (k :: ql) (p ++ gv1)), (Abs (k :: ql) (p ++ p)), (Abs (k :: ql) []), (Abs (k :: q) ql), (Abs (k :: q) q), (Abs (k :: q) gv1), (Abs (k :: q) p)
(Abs (k :: q) (k :: ql)), (Abs (k :: q) (k :: gv1)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (a :: ql)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: gv1)), (Abs (k :: q) (a :: p)), (Abs (k :: q) (merge ql ql)), (Abs (k :: q) (merge ql q)), (Abs (k :: q) (merge ql gv1))
(Abs (k :: q) (merge ql p)), (Abs (k :: q) (merge q ql)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q gv1)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge gv1 ql)), (Abs (k :: q) (merge gv1 q)), (Abs (k :: q) (merge gv1 gv1)), (Abs (k :: q) (merge gv1 p)), (Abs (k :: q) (merge p ql))
(Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p gv1)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (insert k ql)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k gv1)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert a ql)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a gv1))
(Abs (k :: q) (insert a p)), (Abs (k :: q) (maybe_swap ql)), (Abs (k :: q) (maybe_swap q)), (Abs (k :: q) (maybe_swap gv1)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (ql ++ ql)), (Abs (k :: q) (ql ++ q)), (Abs (k :: q) (ql ++ gv1)), (Abs (k :: q) (ql ++ p)), (Abs (k :: q) (q ++ ql))
(Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ gv1)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (gv1 ++ ql)), (Abs (k :: q) (gv1 ++ q)), (Abs (k :: q) (gv1 ++ gv1)), (Abs (k :: q) (gv1 ++ p)), (Abs (k :: q) (p ++ ql)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ gv1))
(Abs (k :: q) (p ++ p)), (Abs (k :: q) []), (Abs (k :: gv1) ql), (Abs (k :: gv1) q), (Abs (k :: gv1) gv1), (Abs (k :: gv1) p), (Abs (k :: gv1) (k :: ql)), (Abs (k :: gv1) (k :: q)), (Abs (k :: gv1) (k :: p)), (Abs (k :: gv1) (a :: ql))
(Abs (k :: gv1) (a :: q)), (Abs (k :: gv1) (a :: gv1)), (Abs (k :: gv1) (a :: p)), (Abs (k :: gv1) (merge ql ql)), (Abs (k :: gv1) (merge ql q)), (Abs (k :: gv1) (merge ql gv1)), (Abs (k :: gv1) (merge ql p)), (Abs (k :: gv1) (merge q ql)), (Abs (k :: gv1) (merge q q)), (Abs (k :: gv1) (merge q gv1))
(Abs (k :: gv1) (merge q p)), (Abs (k :: gv1) (merge gv1 ql)), (Abs (k :: gv1) (merge gv1 q)), (Abs (k :: gv1) (merge gv1 gv1)), (Abs (k :: gv1) (merge gv1 p)), (Abs (k :: gv1) (merge p ql)), (Abs (k :: gv1) (merge p q)), (Abs (k :: gv1) (merge p gv1)), (Abs (k :: gv1) (merge p p)), (Abs (k :: gv1) (insert k ql))
(Abs (k :: gv1) (insert k q)), (Abs (k :: gv1) (insert k gv1)), (Abs (k :: gv1) (insert k p)), (Abs (k :: gv1) (insert a ql)), (Abs (k :: gv1) (insert a q)), (Abs (k :: gv1) (insert a gv1)), (Abs (k :: gv1) (insert a p)), (Abs (k :: gv1) (maybe_swap ql)), (Abs (k :: gv1) (maybe_swap q)), (Abs (k :: gv1) (maybe_swap gv1))
(Abs (k :: gv1) (maybe_swap p)), (Abs (k :: gv1) (ql ++ ql)), (Abs (k :: gv1) (ql ++ q)), (Abs (k :: gv1) (ql ++ gv1)), (Abs (k :: gv1) (ql ++ p)), (Abs (k :: gv1) (q ++ ql)), (Abs (k :: gv1) (q ++ q)), (Abs (k :: gv1) (q ++ gv1)), (Abs (k :: gv1) (q ++ p)), (Abs (k :: gv1) (gv1 ++ ql))
(Abs (k :: gv1) (gv1 ++ q)), (Abs (k :: gv1) (gv1 ++ gv1)), (Abs (k :: gv1) (gv1 ++ p)), (Abs (k :: gv1) (p ++ ql)), (Abs (k :: gv1) (p ++ q)), (Abs (k :: gv1) (p ++ gv1)), (Abs (k :: gv1) (p ++ p)), (Abs (k :: gv1) []), (Abs (k :: p) ql), (Abs (k :: p) q)
(Abs (k :: p) gv1), (Abs (k :: p) p), (Abs (k :: p) (k :: ql)), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: gv1)), (Abs (k :: p) (a :: ql)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: gv1)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (merge ql ql))
(Abs (k :: p) (merge ql q)), (Abs (k :: p) (merge ql gv1)), (Abs (k :: p) (merge ql p)), (Abs (k :: p) (merge q ql)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q gv1)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge gv1 ql)), (Abs (k :: p) (merge gv1 q)), (Abs (k :: p) (merge gv1 gv1))
(Abs (k :: p) (merge gv1 p)), (Abs (k :: p) (merge p ql)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p gv1)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (insert k ql)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k gv1)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert a ql))
(Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a gv1)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (maybe_swap ql)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap gv1)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (ql ++ ql)), (Abs (k :: p) (ql ++ q)), (Abs (k :: p) (ql ++ gv1))
(Abs (k :: p) (ql ++ p)), (Abs (k :: p) (q ++ ql)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ gv1)), (Abs (k :: p) (q ++ p)), (Abs (k :: p) (gv1 ++ ql)), (Abs (k :: p) (gv1 ++ q)), (Abs (k :: p) (gv1 ++ gv1)), (Abs (k :: p) (gv1 ++ p)), (Abs (k :: p) (p ++ ql))
(Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ gv1)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) []), (Abs (a :: ql) ql), (Abs (a :: ql) q), (Abs (a :: ql) gv1), (Abs (a :: ql) p), (Abs (a :: ql) (k :: ql)), (Abs (a :: ql) (k :: q))
(Abs (a :: ql) (k :: gv1)), (Abs (a :: ql) (k :: p)), (Abs (a :: ql) (a :: q)), (Abs (a :: ql) (a :: gv1)), (Abs (a :: ql) (a :: p)), (Abs (a :: ql) (merge ql ql)), (Abs (a :: ql) (merge ql q)), (Abs (a :: ql) (merge ql gv1)), (Abs (a :: ql) (merge ql p)), (Abs (a :: ql) (merge q ql))
(Abs (a :: ql) (merge q q)), (Abs (a :: ql) (merge q gv1)), (Abs (a :: ql) (merge q p)), (Abs (a :: ql) (merge gv1 ql)), (Abs (a :: ql) (merge gv1 q)), (Abs (a :: ql) (merge gv1 gv1)), (Abs (a :: ql) (merge gv1 p)), (Abs (a :: ql) (merge p ql)), (Abs (a :: ql) (merge p q)), (Abs (a :: ql) (merge p gv1))
(Abs (a :: ql) (merge p p)), (Abs (a :: ql) (insert k ql)), (Abs (a :: ql) (insert k q)), (Abs (a :: ql) (insert k gv1)), (Abs (a :: ql) (insert k p)), (Abs (a :: ql) (insert a ql)), (Abs (a :: ql) (insert a q)), (Abs (a :: ql) (insert a gv1)), (Abs (a :: ql) (insert a p)), (Abs (a :: ql) (maybe_swap ql))
(Abs (a :: ql) (maybe_swap q)), (Abs (a :: ql) (maybe_swap gv1)), (Abs (a :: ql) (maybe_swap p)), (Abs (a :: ql) (ql ++ ql)), (Abs (a :: ql) (ql ++ q)), (Abs (a :: ql) (ql ++ gv1)), (Abs (a :: ql) (ql ++ p)), (Abs (a :: ql) (q ++ ql)), (Abs (a :: ql) (q ++ q)), (Abs (a :: ql) (q ++ gv1))
(Abs (a :: ql) (q ++ p)), (Abs (a :: ql) (gv1 ++ ql)), (Abs (a :: ql) (gv1 ++ q)), (Abs (a :: ql) (gv1 ++ gv1)), (Abs (a :: ql) (gv1 ++ p)), (Abs (a :: ql) (p ++ ql)), (Abs (a :: ql) (p ++ q)), (Abs (a :: ql) (p ++ gv1)), (Abs (a :: ql) (p ++ p)), (Abs (a :: ql) [])
(Abs (a :: q) ql), (Abs (a :: q) q), (Abs (a :: q) gv1), (Abs (a :: q) p), (Abs (a :: q) (k :: ql)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: gv1)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (a :: ql)), (Abs (a :: q) (a :: gv1))
(Abs (a :: q) (a :: p)), (Abs (a :: q) (merge ql ql)), (Abs (a :: q) (merge ql q)), (Abs (a :: q) (merge ql gv1)), (Abs (a :: q) (merge ql p)), (Abs (a :: q) (merge q ql)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q gv1)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge gv1 ql))
(Abs (a :: q) (merge gv1 q)), (Abs (a :: q) (merge gv1 gv1)), (Abs (a :: q) (merge gv1 p)), (Abs (a :: q) (merge p ql)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p gv1)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (insert k ql)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k gv1))
(Abs (a :: q) (insert k p)), (Abs (a :: q) (insert a ql)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a gv1)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (maybe_swap ql)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap gv1)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (ql ++ ql))
(Abs (a :: q) (ql ++ q)), (Abs (a :: q) (ql ++ gv1)), (Abs (a :: q) (ql ++ p)), (Abs (a :: q) (q ++ ql)), (Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ gv1)), (Abs (a :: q) (q ++ p)), (Abs (a :: q) (gv1 ++ ql)), (Abs (a :: q) (gv1 ++ q)), (Abs (a :: q) (gv1 ++ gv1))
(Abs (a :: q) (gv1 ++ p)), (Abs (a :: q) (p ++ ql)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ gv1)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) []), (Abs (a :: gv1) ql), (Abs (a :: gv1) q), (Abs (a :: gv1) gv1), (Abs (a :: gv1) p)
(Abs (a :: gv1) (k :: ql)), (Abs (a :: gv1) (k :: q)), (Abs (a :: gv1) (k :: gv1)), (Abs (a :: gv1) (k :: p)), (Abs (a :: gv1) (a :: ql)), (Abs (a :: gv1) (a :: q)), (Abs (a :: gv1) (a :: p)), (Abs (a :: gv1) (merge ql ql)), (Abs (a :: gv1) (merge ql q)), (Abs (a :: gv1) (merge ql gv1))
(Abs (a :: gv1) (merge ql p)), (Abs (a :: gv1) (merge q ql)), (Abs (a :: gv1) (merge q q)), (Abs (a :: gv1) (merge q gv1)), (Abs (a :: gv1) (merge q p)), (Abs (a :: gv1) (merge gv1 ql)), (Abs (a :: gv1) (merge gv1 q)), (Abs (a :: gv1) (merge gv1 gv1)), (Abs (a :: gv1) (merge gv1 p)), (Abs (a :: gv1) (merge p ql))
(Abs (a :: gv1) (merge p q)), (Abs (a :: gv1) (merge p gv1)), (Abs (a :: gv1) (merge p p)), (Abs (a :: gv1) (insert k ql)), (Abs (a :: gv1) (insert k q)), (Abs (a :: gv1) (insert k gv1)), (Abs (a :: gv1) (insert k p)), (Abs (a :: gv1) (insert a ql)), (Abs (a :: gv1) (insert a q)), (Abs (a :: gv1) (insert a gv1))
(Abs (a :: gv1) (insert a p)), (Abs (a :: gv1) (maybe_swap ql)), (Abs (a :: gv1) (maybe_swap q)), (Abs (a :: gv1) (maybe_swap gv1)), (Abs (a :: gv1) (maybe_swap p)), (Abs (a :: gv1) (ql ++ ql)), (Abs (a :: gv1) (ql ++ q)), (Abs (a :: gv1) (ql ++ gv1)), (Abs (a :: gv1) (ql ++ p)), (Abs (a :: gv1) (q ++ ql))
(Abs (a :: gv1) (q ++ q)), (Abs (a :: gv1) (q ++ gv1)), (Abs (a :: gv1) (q ++ p)), (Abs (a :: gv1) (gv1 ++ ql)), (Abs (a :: gv1) (gv1 ++ q)), (Abs (a :: gv1) (gv1 ++ gv1)), (Abs (a :: gv1) (gv1 ++ p)), (Abs (a :: gv1) (p ++ ql)), (Abs (a :: gv1) (p ++ q)), (Abs (a :: gv1) (p ++ gv1))
(Abs (a :: gv1) (p ++ p)), (Abs (a :: gv1) []), (Abs (a :: p) ql), (Abs (a :: p) q), (Abs (a :: p) gv1), (Abs (a :: p) p), (Abs (a :: p) (k :: ql)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: gv1)), (Abs (a :: p) (k :: p))
(Abs (a :: p) (a :: ql)), (Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: gv1)), (Abs (a :: p) (merge ql ql)), (Abs (a :: p) (merge ql q)), (Abs (a :: p) (merge ql gv1)), (Abs (a :: p) (merge ql p)), (Abs (a :: p) (merge q ql)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q gv1))
(Abs (a :: p) (merge q p)), (Abs (a :: p) (merge gv1 ql)), (Abs (a :: p) (merge gv1 q)), (Abs (a :: p) (merge gv1 gv1)), (Abs (a :: p) (merge gv1 p)), (Abs (a :: p) (merge p ql)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p gv1)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (insert k ql))
(Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k gv1)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert a ql)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a gv1)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (maybe_swap ql)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap gv1))
(Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (ql ++ ql)), (Abs (a :: p) (ql ++ q)), (Abs (a :: p) (ql ++ gv1)), (Abs (a :: p) (ql ++ p)), (Abs (a :: p) (q ++ ql)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ gv1)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (gv1 ++ ql))
(Abs (a :: p) (gv1 ++ q)), (Abs (a :: p) (gv1 ++ gv1)), (Abs (a :: p) (gv1 ++ p)), (Abs (a :: p) (p ++ ql)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ gv1)), (Abs (a :: p) (p ++ p)), (Abs (a :: p) []), (Abs (merge ql ql) ql), (Abs (merge ql ql) q)
(Abs (merge ql ql) gv1), (Abs (merge ql ql) p), (Abs (merge ql ql) (k :: ql)), (Abs (merge ql ql) (k :: q)), (Abs (merge ql ql) (k :: gv1)), (Abs (merge ql ql) (k :: p)), (Abs (merge ql ql) (a :: ql)), (Abs (merge ql ql) (a :: q)), (Abs (merge ql ql) (a :: gv1)), (Abs (merge ql ql) (a :: p))
(Abs (merge ql ql) (merge ql q)), (Abs (merge ql ql) (merge ql gv1)), (Abs (merge ql ql) (merge ql p)), (Abs (merge ql ql) (merge q ql)), (Abs (merge ql ql) (merge q q)), (Abs (merge ql ql) (merge q gv1)), (Abs (merge ql ql) (merge q p)), (Abs (merge ql ql) (merge gv1 ql)), (Abs (merge ql ql) (merge gv1 q)), (Abs (merge ql ql) (merge gv1 gv1))
(Abs (merge ql ql) (merge gv1 p)), (Abs (merge ql ql) (merge p ql)), (Abs (merge ql ql) (merge p q)), (Abs (merge ql ql) (merge p gv1)), (Abs (merge ql ql) (merge p p)), (Abs (merge ql ql) (insert k ql)), (Abs (merge ql ql) (insert k q)), (Abs (merge ql ql) (insert k gv1)), (Abs (merge ql ql) (insert k p)), (Abs (merge ql ql) (insert a ql))
(Abs (merge ql ql) (insert a q)), (Abs (merge ql ql) (insert a gv1)), (Abs (merge ql ql) (insert a p)), (Abs (merge ql ql) (maybe_swap ql)), (Abs (merge ql ql) (maybe_swap q)), (Abs (merge ql ql) (maybe_swap gv1)), (Abs (merge ql ql) (maybe_swap p)), (Abs (merge ql ql) (ql ++ ql)), (Abs (merge ql ql) (ql ++ q)), (Abs (merge ql ql) (ql ++ gv1))
(Abs (merge ql ql) (ql ++ p)), (Abs (merge ql ql) (q ++ ql)), (Abs (merge ql ql) (q ++ q)), (Abs (merge ql ql) (q ++ gv1)), (Abs (merge ql ql) (q ++ p)), (Abs (merge ql ql) (gv1 ++ ql)), (Abs (merge ql ql) (gv1 ++ q)), (Abs (merge ql ql) (gv1 ++ gv1)), (Abs (merge ql ql) (gv1 ++ p)), (Abs (merge ql ql) (p ++ ql))
(Abs (merge ql ql) (p ++ q)), (Abs (merge ql ql) (p ++ gv1)), (Abs (merge ql ql) (p ++ p)), (Abs (merge ql ql) []), (Abs (merge ql q) ql), (Abs (merge ql q) q), (Abs (merge ql q) gv1), (Abs (merge ql q) p), (Abs (merge ql q) (k :: ql)), (Abs (merge ql q) (k :: q))
(Abs (merge ql q) (k :: gv1)), (Abs (merge ql q) (k :: p)), (Abs (merge ql q) (a :: ql)), (Abs (merge ql q) (a :: q)), (Abs (merge ql q) (a :: gv1)), (Abs (merge ql q) (a :: p)), (Abs (merge ql q) (merge ql ql)), (Abs (merge ql q) (merge ql gv1)), (Abs (merge ql q) (merge ql p)), (Abs (merge ql q) (merge q ql))
(Abs (merge ql q) (merge q q)), (Abs (merge ql q) (merge q gv1)), (Abs (merge ql q) (merge q p)), (Abs (merge ql q) (merge gv1 ql)), (Abs (merge ql q) (merge gv1 q)), (Abs (merge ql q) (merge gv1 gv1)), (Abs (merge ql q) (merge gv1 p)), (Abs (merge ql q) (merge p ql)), (Abs (merge ql q) (merge p q)), (Abs (merge ql q) (merge p gv1))
(Abs (merge ql q) (merge p p)), (Abs (merge ql q) (insert k ql)), (Abs (merge ql q) (insert k q)), (Abs (merge ql q) (insert k gv1)), (Abs (merge ql q) (insert k p)), (Abs (merge ql q) (insert a ql)), (Abs (merge ql q) (insert a q)), (Abs (merge ql q) (insert a gv1)), (Abs (merge ql q) (insert a p)), (Abs (merge ql q) (maybe_swap ql))
(Abs (merge ql q) (maybe_swap q)), (Abs (merge ql q) (maybe_swap gv1)), (Abs (merge ql q) (maybe_swap p)), (Abs (merge ql q) (ql ++ ql)), (Abs (merge ql q) (ql ++ q)), (Abs (merge ql q) (ql ++ gv1)), (Abs (merge ql q) (ql ++ p)), (Abs (merge ql q) (q ++ ql)), (Abs (merge ql q) (q ++ q)), (Abs (merge ql q) (q ++ gv1))
(Abs (merge ql q) (q ++ p)), (Abs (merge ql q) (gv1 ++ ql)), (Abs (merge ql q) (gv1 ++ q)), (Abs (merge ql q) (gv1 ++ gv1)), (Abs (merge ql q) (gv1 ++ p)), (Abs (merge ql q) (p ++ ql)), (Abs (merge ql q) (p ++ q)), (Abs (merge ql q) (p ++ gv1)), (Abs (merge ql q) (p ++ p)), (Abs (merge ql q) [])
(Abs (merge ql gv1) ql), (Abs (merge ql gv1) q), (Abs (merge ql gv1) gv1), (Abs (merge ql gv1) p), (Abs (merge ql gv1) (k :: ql)), (Abs (merge ql gv1) (k :: q)), (Abs (merge ql gv1) (k :: gv1)), (Abs (merge ql gv1) (k :: p)), (Abs (merge ql gv1) (a :: ql)), (Abs (merge ql gv1) (a :: q))
(Abs (merge ql gv1) (a :: gv1)), (Abs (merge ql gv1) (a :: p)), (Abs (merge ql gv1) (merge ql ql)), (Abs (merge ql gv1) (merge ql q)), (Abs (merge ql gv1) (merge ql p)), (Abs (merge ql gv1) (merge q ql)), (Abs (merge ql gv1) (merge q q)), (Abs (merge ql gv1) (merge q gv1)), (Abs (merge ql gv1) (merge q p)), (Abs (merge ql gv1) (merge gv1 ql))
(Abs (merge ql gv1) (merge gv1 q)), (Abs (merge ql gv1) (merge gv1 gv1)), (Abs (merge ql gv1) (merge gv1 p)), (Abs (merge ql gv1) (merge p ql)), (Abs (merge ql gv1) (merge p q)), (Abs (merge ql gv1) (merge p gv1)), (Abs (merge ql gv1) (merge p p)), (Abs (merge ql gv1) (insert k ql)), (Abs (merge ql gv1) (insert k q)), (Abs (merge ql gv1) (insert k gv1))
(Abs (merge ql gv1) (insert k p)), (Abs (merge ql gv1) (insert a ql)), (Abs (merge ql gv1) (insert a q)), (Abs (merge ql gv1) (insert a gv1)), (Abs (merge ql gv1) (insert a p)), (Abs (merge ql gv1) (maybe_swap ql)), (Abs (merge ql gv1) (maybe_swap q)), (Abs (merge ql gv1) (maybe_swap gv1)), (Abs (merge ql gv1) (maybe_swap p)), (Abs (merge ql gv1) (ql ++ ql))
(Abs (merge ql gv1) (ql ++ q)), (Abs (merge ql gv1) (ql ++ gv1)), (Abs (merge ql gv1) (ql ++ p)), (Abs (merge ql gv1) (q ++ ql)), (Abs (merge ql gv1) (q ++ q)), (Abs (merge ql gv1) (q ++ gv1)), (Abs (merge ql gv1) (q ++ p)), (Abs (merge ql gv1) (gv1 ++ ql)), (Abs (merge ql gv1) (gv1 ++ q)), (Abs (merge ql gv1) (gv1 ++ gv1))
(Abs (merge ql gv1) (gv1 ++ p)), (Abs (merge ql gv1) (p ++ ql)), (Abs (merge ql gv1) (p ++ q)), (Abs (merge ql gv1) (p ++ gv1)), (Abs (merge ql gv1) (p ++ p)), (Abs (merge ql gv1) []), (Abs (merge ql p) ql), (Abs (merge ql p) q), (Abs (merge ql p) gv1), (Abs (merge ql p) p)
(Abs (merge ql p) (k :: ql)), (Abs (merge ql p) (k :: q)), (Abs (merge ql p) (k :: gv1)), (Abs (merge ql p) (k :: p)), (Abs (merge ql p) (a :: ql)), (Abs (merge ql p) (a :: q)), (Abs (merge ql p) (a :: gv1)), (Abs (merge ql p) (a :: p)), (Abs (merge ql p) (merge ql ql)), (Abs (merge ql p) (merge ql q))
(Abs (merge ql p) (merge ql gv1)), (Abs (merge ql p) (merge q ql)), (Abs (merge ql p) (merge q q)), (Abs (merge ql p) (merge q gv1)), (Abs (merge ql p) (merge q p)), (Abs (merge ql p) (merge gv1 ql)), (Abs (merge ql p) (merge gv1 q)), (Abs (merge ql p) (merge gv1 gv1)), (Abs (merge ql p) (merge gv1 p)), (Abs (merge ql p) (merge p ql))
(Abs (merge ql p) (merge p q)), (Abs (merge ql p) (merge p gv1)), (Abs (merge ql p) (merge p p)), (Abs (merge ql p) (insert k ql)), (Abs (merge ql p) (insert k q)), (Abs (merge ql p) (insert k gv1)), (Abs (merge ql p) (insert k p)), (Abs (merge ql p) (insert a ql)), (Abs (merge ql p) (insert a q)), (Abs (merge ql p) (insert a gv1))
(Abs (merge ql p) (insert a p)), (Abs (merge ql p) (maybe_swap ql)), (Abs (merge ql p) (maybe_swap q)), (Abs (merge ql p) (maybe_swap gv1)), (Abs (merge ql p) (maybe_swap p)), (Abs (merge ql p) (ql ++ ql)), (Abs (merge ql p) (ql ++ q)), (Abs (merge ql p) (ql ++ gv1)), (Abs (merge ql p) (ql ++ p)), (Abs (merge ql p) (q ++ ql))
(Abs (merge ql p) (q ++ q)), (Abs (merge ql p) (q ++ gv1)), (Abs (merge ql p) (q ++ p)), (Abs (merge ql p) (gv1 ++ ql)), (Abs (merge ql p) (gv1 ++ q)), (Abs (merge ql p) (gv1 ++ gv1)), (Abs (merge ql p) (gv1 ++ p)), (Abs (merge ql p) (p ++ ql)), (Abs (merge ql p) (p ++ q)), (Abs (merge ql p) (p ++ gv1))
(Abs (merge ql p) (p ++ p)), (Abs (merge ql p) []), (Abs (merge q ql) ql), (Abs (merge q ql) q), (Abs (merge q ql) gv1), (Abs (merge q ql) p), (Abs (merge q ql) (k :: ql)), (Abs (merge q ql) (k :: q)), (Abs (merge q ql) (k :: gv1)), (Abs (merge q ql) (k :: p))
(Abs (merge q ql) (a :: ql)), (Abs (merge q ql) (a :: q)), (Abs (merge q ql) (a :: gv1)), (Abs (merge q ql) (a :: p)), (Abs (merge q ql) (merge ql ql)), (Abs (merge q ql) (merge ql q)), (Abs (merge q ql) (merge ql gv1)), (Abs (merge q ql) (merge ql p)), (Abs (merge q ql) (merge q q)), (Abs (merge q ql) (merge q gv1))
(Abs (merge q ql) (merge q p)), (Abs (merge q ql) (merge gv1 ql)), (Abs (merge q ql) (merge gv1 q)), (Abs (merge q ql) (merge gv1 gv1)), (Abs (merge q ql) (merge gv1 p)), (Abs (merge q ql) (merge p ql)), (Abs (merge q ql) (merge p q)), (Abs (merge q ql) (merge p gv1)), (Abs (merge q ql) (merge p p)), (Abs (merge q ql) (insert k ql))
(Abs (merge q ql) (insert k q)), (Abs (merge q ql) (insert k gv1)), (Abs (merge q ql) (insert k p)), (Abs (merge q ql) (insert a ql)), (Abs (merge q ql) (insert a q)), (Abs (merge q ql) (insert a gv1)), (Abs (merge q ql) (insert a p)), (Abs (merge q ql) (maybe_swap ql)), (Abs (merge q ql) (maybe_swap q)), (Abs (merge q ql) (maybe_swap gv1))
(Abs (merge q ql) (maybe_swap p)), (Abs (merge q ql) (ql ++ ql)), (Abs (merge q ql) (ql ++ q)), (Abs (merge q ql) (ql ++ gv1)), (Abs (merge q ql) (ql ++ p)), (Abs (merge q ql) (q ++ ql)), (Abs (merge q ql) (q ++ q)), (Abs (merge q ql) (q ++ gv1)), (Abs (merge q ql) (q ++ p)), (Abs (merge q ql) (gv1 ++ ql))
(Abs (merge q ql) (gv1 ++ q)), (Abs (merge q ql) (gv1 ++ gv1)), (Abs (merge q ql) (gv1 ++ p)), (Abs (merge q ql) (p ++ ql)), (Abs (merge q ql) (p ++ q)), (Abs (merge q ql) (p ++ gv1)), (Abs (merge q ql) (p ++ p)), (Abs (merge q ql) []), (Abs (merge q q) ql), (Abs (merge q q) q)
(Abs (merge q q) gv1), (Abs (merge q q) p), (Abs (merge q q) (k :: ql)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: gv1)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (a :: ql)), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: gv1)), (Abs (merge q q) (a :: p))
(Abs (merge q q) (merge ql ql)), (Abs (merge q q) (merge ql q)), (Abs (merge q q) (merge ql gv1)), (Abs (merge q q) (merge ql p)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge q gv1)), (Abs (merge q q) (merge q p)), (Abs (merge q q) (merge gv1 ql)), (Abs (merge q q) (merge gv1 q)), (Abs (merge q q) (merge gv1 gv1))
(Abs (merge q q) (merge gv1 p)), (Abs (merge q q) (merge p ql)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p gv1)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (insert k ql)), (Abs (merge q q) (insert k q)), (Abs (merge q q) (insert k gv1)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert a ql))
(Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a gv1)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (maybe_swap ql)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap gv1)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (ql ++ ql)), (Abs (merge q q) (ql ++ q)), (Abs (merge q q) (ql ++ gv1))
(Abs (merge q q) (ql ++ p)), (Abs (merge q q) (q ++ ql)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ gv1)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (gv1 ++ ql)), (Abs (merge q q) (gv1 ++ q)), (Abs (merge q q) (gv1 ++ gv1)), (Abs (merge q q) (gv1 ++ p)), (Abs (merge q q) (p ++ ql))
(Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ gv1)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) []), (Abs (merge q gv1) ql), (Abs (merge q gv1) q), (Abs (merge q gv1) gv1), (Abs (merge q gv1) p), (Abs (merge q gv1) (k :: ql)), (Abs (merge q gv1) (k :: q))
(Abs (merge q gv1) (k :: gv1)), (Abs (merge q gv1) (k :: p)), (Abs (merge q gv1) (a :: ql)), (Abs (merge q gv1) (a :: q)), (Abs (merge q gv1) (a :: gv1)), (Abs (merge q gv1) (a :: p)), (Abs (merge q gv1) (merge ql ql)), (Abs (merge q gv1) (merge ql q)), (Abs (merge q gv1) (merge ql gv1)), (Abs (merge q gv1) (merge ql p))
(Abs (merge q gv1) (merge q ql)), (Abs (merge q gv1) (merge q q)), (Abs (merge q gv1) (merge q p)), (Abs (merge q gv1) (merge gv1 ql)), (Abs (merge q gv1) (merge gv1 q)), (Abs (merge q gv1) (merge gv1 gv1)), (Abs (merge q gv1) (merge gv1 p)), (Abs (merge q gv1) (merge p ql)), (Abs (merge q gv1) (merge p q)), (Abs (merge q gv1) (merge p gv1))
(Abs (merge q gv1) (merge p p)), (Abs (merge q gv1) (insert k ql)), (Abs (merge q gv1) (insert k q)), (Abs (merge q gv1) (insert k gv1)), (Abs (merge q gv1) (insert k p)), (Abs (merge q gv1) (insert a ql)), (Abs (merge q gv1) (insert a q)), (Abs (merge q gv1) (insert a gv1)), (Abs (merge q gv1) (insert a p)), (Abs (merge q gv1) (maybe_swap ql))
(Abs (merge q gv1) (maybe_swap q)), (Abs (merge q gv1) (maybe_swap gv1)), (Abs (merge q gv1) (maybe_swap p)), (Abs (merge q gv1) (ql ++ ql)), (Abs (merge q gv1) (ql ++ q)), (Abs (merge q gv1) (ql ++ gv1)), (Abs (merge q gv1) (ql ++ p)), (Abs (merge q gv1) (q ++ ql)), (Abs (merge q gv1) (q ++ q)), (Abs (merge q gv1) (q ++ gv1))
(Abs (merge q gv1) (q ++ p)), (Abs (merge q gv1) (gv1 ++ ql)), (Abs (merge q gv1) (gv1 ++ q)), (Abs (merge q gv1) (gv1 ++ gv1)), (Abs (merge q gv1) (gv1 ++ p)), (Abs (merge q gv1) (p ++ ql)), (Abs (merge q gv1) (p ++ q)), (Abs (merge q gv1) (p ++ gv1)), (Abs (merge q gv1) (p ++ p)), (Abs (merge q gv1) [])
(Abs (merge q p) ql), (Abs (merge q p) q), (Abs (merge q p) gv1), (Abs (merge q p) p), (Abs (merge q p) (k :: ql)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: gv1)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (a :: ql)), (Abs (merge q p) (a :: q))
(Abs (merge q p) (a :: gv1)), (Abs (merge q p) (a :: p)), (Abs (merge q p) (merge ql ql)), (Abs (merge q p) (merge ql q)), (Abs (merge q p) (merge ql gv1)), (Abs (merge q p) (merge ql p)), (Abs (merge q p) (merge q ql)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q gv1)), (Abs (merge q p) (merge gv1 ql))
(Abs (merge q p) (merge gv1 q)), (Abs (merge q p) (merge gv1 gv1)), (Abs (merge q p) (merge gv1 p)), (Abs (merge q p) (merge p ql)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p gv1)), (Abs (merge q p) (merge p p)), (Abs (merge q p) (insert k ql)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k gv1))
(Abs (merge q p) (insert k p)), (Abs (merge q p) (insert a ql)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a gv1)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (maybe_swap ql)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap gv1)), (Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (ql ++ ql))
(Abs (merge q p) (ql ++ q)), (Abs (merge q p) (ql ++ gv1)), (Abs (merge q p) (ql ++ p)), (Abs (merge q p) (q ++ ql)), (Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ gv1)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (gv1 ++ ql)), (Abs (merge q p) (gv1 ++ q)), (Abs (merge q p) (gv1 ++ gv1))
(Abs (merge q p) (gv1 ++ p)), (Abs (merge q p) (p ++ ql)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ gv1)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) []), (Abs (merge gv1 ql) ql), (Abs (merge gv1 ql) q), (Abs (merge gv1 ql) gv1), (Abs (merge gv1 ql) p)
(Abs (merge gv1 ql) (k :: ql)), (Abs (merge gv1 ql) (k :: q)), (Abs (merge gv1 ql) (k :: gv1)), (Abs (merge gv1 ql) (k :: p)), (Abs (merge gv1 ql) (a :: ql)), (Abs (merge gv1 ql) (a :: q)), (Abs (merge gv1 ql) (a :: gv1)), (Abs (merge gv1 ql) (a :: p)), (Abs (merge gv1 ql) (merge ql ql)), (Abs (merge gv1 ql) (merge ql q))
(Abs (merge gv1 ql) (merge ql gv1)), (Abs (merge gv1 ql) (merge ql p)), (Abs (merge gv1 ql) (merge q ql)), (Abs (merge gv1 ql) (merge q q)), (Abs (merge gv1 ql) (merge q gv1)), (Abs (merge gv1 ql) (merge q p)), (Abs (merge gv1 ql) (merge gv1 q)), (Abs (merge gv1 ql) (merge gv1 gv1)), (Abs (merge gv1 ql) (merge gv1 p)), (Abs (merge gv1 ql) (merge p ql))
(Abs (merge gv1 ql) (merge p q)), (Abs (merge gv1 ql) (merge p gv1)), (Abs (merge gv1 ql) (merge p p)), (Abs (merge gv1 ql) (insert k ql)), (Abs (merge gv1 ql) (insert k q)), (Abs (merge gv1 ql) (insert k gv1)), (Abs (merge gv1 ql) (insert k p)), (Abs (merge gv1 ql) (insert a ql)), (Abs (merge gv1 ql) (insert a q)), (Abs (merge gv1 ql) (insert a gv1))
(Abs (merge gv1 ql) (insert a p)), (Abs (merge gv1 ql) (maybe_swap ql)), (Abs (merge gv1 ql) (maybe_swap q)), (Abs (merge gv1 ql) (maybe_swap gv1)), (Abs (merge gv1 ql) (maybe_swap p)), (Abs (merge gv1 ql) (ql ++ ql)), (Abs (merge gv1 ql) (ql ++ q)), (Abs (merge gv1 ql) (ql ++ gv1)), (Abs (merge gv1 ql) (ql ++ p)), (Abs (merge gv1 ql) (q ++ ql))
(Abs (merge gv1 ql) (q ++ q)), (Abs (merge gv1 ql) (q ++ gv1)), (Abs (merge gv1 ql) (q ++ p)), (Abs (merge gv1 ql) (gv1 ++ ql)), (Abs (merge gv1 ql) (gv1 ++ q)), (Abs (merge gv1 ql) (gv1 ++ gv1)), (Abs (merge gv1 ql) (gv1 ++ p)), (Abs (merge gv1 ql) (p ++ ql)), (Abs (merge gv1 ql) (p ++ q)), (Abs (merge gv1 ql) (p ++ gv1))
(Abs (merge gv1 ql) (p ++ p)), (Abs (merge gv1 ql) []), (Abs (merge gv1 q) ql), (Abs (merge gv1 q) q), (Abs (merge gv1 q) gv1), (Abs (merge gv1 q) p), (Abs (merge gv1 q) (k :: ql)), (Abs (merge gv1 q) (k :: q)), (Abs (merge gv1 q) (k :: gv1)), (Abs (merge gv1 q) (k :: p))
(Abs (merge gv1 q) (a :: ql)), (Abs (merge gv1 q) (a :: q)), (Abs (merge gv1 q) (a :: gv1)), (Abs (merge gv1 q) (a :: p)), (Abs (merge gv1 q) (merge ql ql)), (Abs (merge gv1 q) (merge ql q)), (Abs (merge gv1 q) (merge ql gv1)), (Abs (merge gv1 q) (merge ql p)), (Abs (merge gv1 q) (merge q ql)), (Abs (merge gv1 q) (merge q q))
(Abs (merge gv1 q) (merge q gv1)), (Abs (merge gv1 q) (merge q p)), (Abs (merge gv1 q) (merge gv1 ql)), (Abs (merge gv1 q) (merge gv1 gv1)), (Abs (merge gv1 q) (merge gv1 p)), (Abs (merge gv1 q) (merge p ql)), (Abs (merge gv1 q) (merge p q)), (Abs (merge gv1 q) (merge p gv1)), (Abs (merge gv1 q) (merge p p)), (Abs (merge gv1 q) (insert k ql))
(Abs (merge gv1 q) (insert k q)), (Abs (merge gv1 q) (insert k gv1)), (Abs (merge gv1 q) (insert k p)), (Abs (merge gv1 q) (insert a ql)), (Abs (merge gv1 q) (insert a q)), (Abs (merge gv1 q) (insert a gv1)), (Abs (merge gv1 q) (insert a p)), (Abs (merge gv1 q) (maybe_swap ql)), (Abs (merge gv1 q) (maybe_swap q)), (Abs (merge gv1 q) (maybe_swap gv1))
(Abs (merge gv1 q) (maybe_swap p)), (Abs (merge gv1 q) (ql ++ ql)), (Abs (merge gv1 q) (ql ++ q)), (Abs (merge gv1 q) (ql ++ gv1)), (Abs (merge gv1 q) (ql ++ p)), (Abs (merge gv1 q) (q ++ ql)), (Abs (merge gv1 q) (q ++ q)), (Abs (merge gv1 q) (q ++ gv1)), (Abs (merge gv1 q) (q ++ p)), (Abs (merge gv1 q) (gv1 ++ ql))
(Abs (merge gv1 q) (gv1 ++ q)), (Abs (merge gv1 q) (gv1 ++ gv1)), (Abs (merge gv1 q) (gv1 ++ p)), (Abs (merge gv1 q) (p ++ ql)), (Abs (merge gv1 q) (p ++ q)), (Abs (merge gv1 q) (p ++ gv1)), (Abs (merge gv1 q) (p ++ p)), (Abs (merge gv1 q) []), (Abs (merge gv1 gv1) ql), (Abs (merge gv1 gv1) q)
(Abs (merge gv1 gv1) gv1), (Abs (merge gv1 gv1) p), (Abs (merge gv1 gv1) (k :: ql)), (Abs (merge gv1 gv1) (k :: q)), (Abs (merge gv1 gv1) (k :: gv1)), (Abs (merge gv1 gv1) (k :: p)), (Abs (merge gv1 gv1) (a :: ql)), (Abs (merge gv1 gv1) (a :: q)), (Abs (merge gv1 gv1) (a :: gv1)), (Abs (merge gv1 gv1) (a :: p))
(Abs (merge gv1 gv1) (merge ql ql)), (Abs (merge gv1 gv1) (merge ql q)), (Abs (merge gv1 gv1) (merge ql gv1)), (Abs (merge gv1 gv1) (merge ql p)), (Abs (merge gv1 gv1) (merge q ql)), (Abs (merge gv1 gv1) (merge q q)), (Abs (merge gv1 gv1) (merge q gv1)), (Abs (merge gv1 gv1) (merge q p)), (Abs (merge gv1 gv1) (merge gv1 ql)), (Abs (merge gv1 gv1) (merge gv1 q))
(Abs (merge gv1 gv1) (merge gv1 p)), (Abs (merge gv1 gv1) (merge p ql)), (Abs (merge gv1 gv1) (merge p q)), (Abs (merge gv1 gv1) (merge p gv1)), (Abs (merge gv1 gv1) (merge p p)), (Abs (merge gv1 gv1) (insert k ql)), (Abs (merge gv1 gv1) (insert k q)), (Abs (merge gv1 gv1) (insert k gv1)), (Abs (merge gv1 gv1) (insert k p)), (Abs (merge gv1 gv1) (insert a ql))
(Abs (merge gv1 gv1) (insert a q)), (Abs (merge gv1 gv1) (insert a gv1)), (Abs (merge gv1 gv1) (insert a p)), (Abs (merge gv1 gv1) (maybe_swap ql)), (Abs (merge gv1 gv1) (maybe_swap q)), (Abs (merge gv1 gv1) (maybe_swap gv1)), (Abs (merge gv1 gv1) (maybe_swap p)), (Abs (merge gv1 gv1) (ql ++ ql)), (Abs (merge gv1 gv1) (ql ++ q)), (Abs (merge gv1 gv1) (ql ++ gv1))
(Abs (merge gv1 gv1) (ql ++ p)), (Abs (merge gv1 gv1) (q ++ ql)), (Abs (merge gv1 gv1) (q ++ q)), (Abs (merge gv1 gv1) (q ++ gv1)), (Abs (merge gv1 gv1) (q ++ p)), (Abs (merge gv1 gv1) (gv1 ++ ql)), (Abs (merge gv1 gv1) (gv1 ++ q)), (Abs (merge gv1 gv1) (gv1 ++ gv1)), (Abs (merge gv1 gv1) (gv1 ++ p)), (Abs (merge gv1 gv1) (p ++ ql))
(Abs (merge gv1 gv1) (p ++ q)), (Abs (merge gv1 gv1) (p ++ gv1)), (Abs (merge gv1 gv1) (p ++ p)), (Abs (merge gv1 gv1) []), (Abs (merge gv1 p) ql), (Abs (merge gv1 p) q), (Abs (merge gv1 p) gv1), (Abs (merge gv1 p) p), (Abs (merge gv1 p) (k :: ql)), (Abs (merge gv1 p) (k :: q))
(Abs (merge gv1 p) (k :: gv1)), (Abs (merge gv1 p) (k :: p)), (Abs (merge gv1 p) (a :: ql)), (Abs (merge gv1 p) (a :: q)), (Abs (merge gv1 p) (a :: gv1)), (Abs (merge gv1 p) (a :: p)), (Abs (merge gv1 p) (merge ql ql)), (Abs (merge gv1 p) (merge ql q)), (Abs (merge gv1 p) (merge ql gv1)), (Abs (merge gv1 p) (merge ql p))
(Abs (merge gv1 p) (merge q ql)), (Abs (merge gv1 p) (merge q q)), (Abs (merge gv1 p) (merge q gv1)), (Abs (merge gv1 p) (merge q p)), (Abs (merge gv1 p) (merge gv1 ql)), (Abs (merge gv1 p) (merge gv1 q)), (Abs (merge gv1 p) (merge gv1 gv1)), (Abs (merge gv1 p) (merge p ql)), (Abs (merge gv1 p) (merge p q)), (Abs (merge gv1 p) (merge p gv1))
(Abs (merge gv1 p) (merge p p)), (Abs (merge gv1 p) (insert k ql)), (Abs (merge gv1 p) (insert k q)), (Abs (merge gv1 p) (insert k gv1)), (Abs (merge gv1 p) (insert k p)), (Abs (merge gv1 p) (insert a ql)), (Abs (merge gv1 p) (insert a q)), (Abs (merge gv1 p) (insert a gv1)), (Abs (merge gv1 p) (insert a p)), (Abs (merge gv1 p) (maybe_swap ql))
(Abs (merge gv1 p) (maybe_swap q)), (Abs (merge gv1 p) (maybe_swap gv1)), (Abs (merge gv1 p) (maybe_swap p)), (Abs (merge gv1 p) (ql ++ ql)), (Abs (merge gv1 p) (ql ++ q)), (Abs (merge gv1 p) (ql ++ gv1)), (Abs (merge gv1 p) (ql ++ p)), (Abs (merge gv1 p) (q ++ ql)), (Abs (merge gv1 p) (q ++ q)), (Abs (merge gv1 p) (q ++ gv1))
(Abs (merge gv1 p) (q ++ p)), (Abs (merge gv1 p) (gv1 ++ ql)), (Abs (merge gv1 p) (gv1 ++ q)), (Abs (merge gv1 p) (gv1 ++ gv1)), (Abs (merge gv1 p) (gv1 ++ p)), (Abs (merge gv1 p) (p ++ ql)), (Abs (merge gv1 p) (p ++ q)), (Abs (merge gv1 p) (p ++ gv1)), (Abs (merge gv1 p) (p ++ p)), (Abs (merge gv1 p) [])
(Abs (merge p ql) ql), (Abs (merge p ql) q), (Abs (merge p ql) gv1), (Abs (merge p ql) p), (Abs (merge p ql) (k :: ql)), (Abs (merge p ql) (k :: q)), (Abs (merge p ql) (k :: gv1)), (Abs (merge p ql) (k :: p)), (Abs (merge p ql) (a :: ql)), (Abs (merge p ql) (a :: q))
(Abs (merge p ql) (a :: gv1)), (Abs (merge p ql) (a :: p)), (Abs (merge p ql) (merge ql ql)), (Abs (merge p ql) (merge ql q)), (Abs (merge p ql) (merge ql gv1)), (Abs (merge p ql) (merge ql p)), (Abs (merge p ql) (merge q ql)), (Abs (merge p ql) (merge q q)), (Abs (merge p ql) (merge q gv1)), (Abs (merge p ql) (merge q p))
(Abs (merge p ql) (merge gv1 ql)), (Abs (merge p ql) (merge gv1 q)), (Abs (merge p ql) (merge gv1 gv1)), (Abs (merge p ql) (merge gv1 p)), (Abs (merge p ql) (merge p q)), (Abs (merge p ql) (merge p gv1)), (Abs (merge p ql) (merge p p)), (Abs (merge p ql) (insert k ql)), (Abs (merge p ql) (insert k q)), (Abs (merge p ql) (insert k gv1))
(Abs (merge p ql) (insert k p)), (Abs (merge p ql) (insert a ql)), (Abs (merge p ql) (insert a q)), (Abs (merge p ql) (insert a gv1)), (Abs (merge p ql) (insert a p)), (Abs (merge p ql) (maybe_swap ql)), (Abs (merge p ql) (maybe_swap q)), (Abs (merge p ql) (maybe_swap gv1)), (Abs (merge p ql) (maybe_swap p)), (Abs (merge p ql) (ql ++ ql))
(Abs (merge p ql) (ql ++ q)), (Abs (merge p ql) (ql ++ gv1)), (Abs (merge p ql) (ql ++ p)), (Abs (merge p ql) (q ++ ql)), (Abs (merge p ql) (q ++ q)), (Abs (merge p ql) (q ++ gv1)), (Abs (merge p ql) (q ++ p)), (Abs (merge p ql) (gv1 ++ ql)), (Abs (merge p ql) (gv1 ++ q)), (Abs (merge p ql) (gv1 ++ gv1))
(Abs (merge p ql) (gv1 ++ p)), (Abs (merge p ql) (p ++ ql)), (Abs (merge p ql) (p ++ q)), (Abs (merge p ql) (p ++ gv1)), (Abs (merge p ql) (p ++ p)), (Abs (merge p ql) []), (Abs (merge p q) ql), (Abs (merge p q) q), (Abs (merge p q) gv1), (Abs (merge p q) p)
(Abs (merge p q) (k :: ql)), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: gv1)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (a :: ql)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: gv1)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (merge ql ql)), (Abs (merge p q) (merge ql q))
(Abs (merge p q) (merge ql gv1)), (Abs (merge p q) (merge ql p)), (Abs (merge p q) (merge q ql)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q gv1)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge gv1 ql)), (Abs (merge p q) (merge gv1 q)), (Abs (merge p q) (merge gv1 gv1)), (Abs (merge p q) (merge gv1 p))
(Abs (merge p q) (merge p ql)), (Abs (merge p q) (merge p gv1)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (insert k ql)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k gv1)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert a ql)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a gv1))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (maybe_swap ql)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap gv1)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (ql ++ ql)), (Abs (merge p q) (ql ++ q)), (Abs (merge p q) (ql ++ gv1)), (Abs (merge p q) (ql ++ p)), (Abs (merge p q) (q ++ ql))
(Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ gv1)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (gv1 ++ ql)), (Abs (merge p q) (gv1 ++ q)), (Abs (merge p q) (gv1 ++ gv1)), (Abs (merge p q) (gv1 ++ p)), (Abs (merge p q) (p ++ ql)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ gv1))
(Abs (merge p q) (p ++ p)), (Abs (merge p q) []), (Abs (merge p gv1) ql), (Abs (merge p gv1) q), (Abs (merge p gv1) gv1), (Abs (merge p gv1) p), (Abs (merge p gv1) (k :: ql)), (Abs (merge p gv1) (k :: q)), (Abs (merge p gv1) (k :: gv1)), (Abs (merge p gv1) (k :: p))
(Abs (merge p gv1) (a :: ql)), (Abs (merge p gv1) (a :: q)), (Abs (merge p gv1) (a :: gv1)), (Abs (merge p gv1) (a :: p)), (Abs (merge p gv1) (merge ql ql)), (Abs (merge p gv1) (merge ql q)), (Abs (merge p gv1) (merge ql gv1)), (Abs (merge p gv1) (merge ql p)), (Abs (merge p gv1) (merge q ql)), (Abs (merge p gv1) (merge q q))
(Abs (merge p gv1) (merge q gv1)), (Abs (merge p gv1) (merge q p)), (Abs (merge p gv1) (merge gv1 ql)), (Abs (merge p gv1) (merge gv1 q)), (Abs (merge p gv1) (merge gv1 gv1)), (Abs (merge p gv1) (merge gv1 p)), (Abs (merge p gv1) (merge p ql)), (Abs (merge p gv1) (merge p q)), (Abs (merge p gv1) (merge p p)), (Abs (merge p gv1) (insert k ql))
(Abs (merge p gv1) (insert k q)), (Abs (merge p gv1) (insert k gv1)), (Abs (merge p gv1) (insert k p)), (Abs (merge p gv1) (insert a ql)), (Abs (merge p gv1) (insert a q)), (Abs (merge p gv1) (insert a gv1)), (Abs (merge p gv1) (insert a p)), (Abs (merge p gv1) (maybe_swap ql)), (Abs (merge p gv1) (maybe_swap q)), (Abs (merge p gv1) (maybe_swap gv1))
(Abs (merge p gv1) (maybe_swap p)), (Abs (merge p gv1) (ql ++ ql)), (Abs (merge p gv1) (ql ++ q)), (Abs (merge p gv1) (ql ++ gv1)), (Abs (merge p gv1) (ql ++ p)), (Abs (merge p gv1) (q ++ ql)), (Abs (merge p gv1) (q ++ q)), (Abs (merge p gv1) (q ++ gv1)), (Abs (merge p gv1) (q ++ p)), (Abs (merge p gv1) (gv1 ++ ql))
(Abs (merge p gv1) (gv1 ++ q)), (Abs (merge p gv1) (gv1 ++ gv1)), (Abs (merge p gv1) (gv1 ++ p)), (Abs (merge p gv1) (p ++ ql)), (Abs (merge p gv1) (p ++ q)), (Abs (merge p gv1) (p ++ gv1)), (Abs (merge p gv1) (p ++ p)), (Abs (merge p gv1) []), (Abs (merge p p) ql), (Abs (merge p p) q)
(Abs (merge p p) gv1), (Abs (merge p p) p), (Abs (merge p p) (k :: ql)), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: gv1)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (a :: ql)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: gv1)), (Abs (merge p p) (a :: p))
(Abs (merge p p) (merge ql ql)), (Abs (merge p p) (merge ql q)), (Abs (merge p p) (merge ql gv1)), (Abs (merge p p) (merge ql p)), (Abs (merge p p) (merge q ql)), (Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q gv1)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge gv1 ql)), (Abs (merge p p) (merge gv1 q))
(Abs (merge p p) (merge gv1 gv1)), (Abs (merge p p) (merge gv1 p)), (Abs (merge p p) (merge p ql)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p gv1)), (Abs (merge p p) (insert k ql)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k gv1)), (Abs (merge p p) (insert k p)), (Abs (merge p p) (insert a ql))
(Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a gv1)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (maybe_swap ql)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap gv1)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (ql ++ ql)), (Abs (merge p p) (ql ++ q)), (Abs (merge p p) (ql ++ gv1))
(Abs (merge p p) (ql ++ p)), (Abs (merge p p) (q ++ ql)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ gv1)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (gv1 ++ ql)), (Abs (merge p p) (gv1 ++ q)), (Abs (merge p p) (gv1 ++ gv1)), (Abs (merge p p) (gv1 ++ p)), (Abs (merge p p) (p ++ ql))
(Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ gv1)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) []), (Abs (insert k ql) ql), (Abs (insert k ql) q), (Abs (insert k ql) gv1), (Abs (insert k ql) p), (Abs (insert k ql) (k :: ql)), (Abs (insert k ql) (k :: q))
(Abs (insert k ql) (k :: gv1)), (Abs (insert k ql) (k :: p)), (Abs (insert k ql) (a :: ql)), (Abs (insert k ql) (a :: q)), (Abs (insert k ql) (a :: gv1)), (Abs (insert k ql) (a :: p)), (Abs (insert k ql) (merge ql ql)), (Abs (insert k ql) (merge ql q)), (Abs (insert k ql) (merge ql gv1)), (Abs (insert k ql) (merge ql p))
(Abs (insert k ql) (merge q ql)), (Abs (insert k ql) (merge q q)), (Abs (insert k ql) (merge q gv1)), (Abs (insert k ql) (merge q p)), (Abs (insert k ql) (merge gv1 ql)), (Abs (insert k ql) (merge gv1 q)), (Abs (insert k ql) (merge gv1 gv1)), (Abs (insert k ql) (merge gv1 p)), (Abs (insert k ql) (merge p ql)), (Abs (insert k ql) (merge p q))
(Abs (insert k ql) (merge p gv1)), (Abs (insert k ql) (merge p p)), (Abs (insert k ql) (insert k q)), (Abs (insert k ql) (insert k gv1)), (Abs (insert k ql) (insert k p)), (Abs (insert k ql) (insert a ql)), (Abs (insert k ql) (insert a q)), (Abs (insert k ql) (insert a gv1)), (Abs (insert k ql) (insert a p)), (Abs (insert k ql) (maybe_swap ql))
(Abs (insert k ql) (maybe_swap q)), (Abs (insert k ql) (maybe_swap gv1)), (Abs (insert k ql) (maybe_swap p)), (Abs (insert k ql) (ql ++ ql)), (Abs (insert k ql) (ql ++ q)), (Abs (insert k ql) (ql ++ gv1)), (Abs (insert k ql) (ql ++ p)), (Abs (insert k ql) (q ++ ql)), (Abs (insert k ql) (q ++ q)), (Abs (insert k ql) (q ++ gv1))
(Abs (insert k ql) (q ++ p)), (Abs (insert k ql) (gv1 ++ ql)), (Abs (insert k ql) (gv1 ++ q)), (Abs (insert k ql) (gv1 ++ gv1)), (Abs (insert k ql) (gv1 ++ p)), (Abs (insert k ql) (p ++ ql)), (Abs (insert k ql) (p ++ q)), (Abs (insert k ql) (p ++ gv1)), (Abs (insert k ql) (p ++ p)), (Abs (insert k ql) [])
(Abs (insert k q) ql), (Abs (insert k q) q), (Abs (insert k q) gv1), (Abs (insert k q) p), (Abs (insert k q) (k :: ql)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: gv1)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (a :: ql)), (Abs (insert k q) (a :: q))
(Abs (insert k q) (a :: gv1)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (merge ql ql)), (Abs (insert k q) (merge ql q)), (Abs (insert k q) (merge ql gv1)), (Abs (insert k q) (merge ql p)), (Abs (insert k q) (merge q ql)), (Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q gv1)), (Abs (insert k q) (merge q p))
(Abs (insert k q) (merge gv1 ql)), (Abs (insert k q) (merge gv1 q)), (Abs (insert k q) (merge gv1 gv1)), (Abs (insert k q) (merge gv1 p)), (Abs (insert k q) (merge p ql)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p gv1)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (insert k ql)), (Abs (insert k q) (insert k gv1))
(Abs (insert k q) (insert k p)), (Abs (insert k q) (insert a ql)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a gv1)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (maybe_swap ql)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap gv1)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (ql ++ ql))
(Abs (insert k q) (ql ++ q)), (Abs (insert k q) (ql ++ gv1)), (Abs (insert k q) (ql ++ p)), (Abs (insert k q) (q ++ ql)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ gv1)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (gv1 ++ ql)), (Abs (insert k q) (gv1 ++ q)), (Abs (insert k q) (gv1 ++ gv1))
(Abs (insert k q) (gv1 ++ p)), (Abs (insert k q) (p ++ ql)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ gv1)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) []), (Abs (insert k gv1) ql), (Abs (insert k gv1) q), (Abs (insert k gv1) gv1), (Abs (insert k gv1) p)
(Abs (insert k gv1) (k :: ql)), (Abs (insert k gv1) (k :: q)), (Abs (insert k gv1) (k :: gv1)), (Abs (insert k gv1) (k :: p)), (Abs (insert k gv1) (a :: ql)), (Abs (insert k gv1) (a :: q)), (Abs (insert k gv1) (a :: gv1)), (Abs (insert k gv1) (a :: p)), (Abs (insert k gv1) (merge ql ql)), (Abs (insert k gv1) (merge ql q))
(Abs (insert k gv1) (merge ql gv1)), (Abs (insert k gv1) (merge ql p)), (Abs (insert k gv1) (merge q ql)), (Abs (insert k gv1) (merge q q)), (Abs (insert k gv1) (merge q gv1)), (Abs (insert k gv1) (merge q p)), (Abs (insert k gv1) (merge gv1 ql)), (Abs (insert k gv1) (merge gv1 q)), (Abs (insert k gv1) (merge gv1 gv1)), (Abs (insert k gv1) (merge gv1 p))
(Abs (insert k gv1) (merge p ql)), (Abs (insert k gv1) (merge p q)), (Abs (insert k gv1) (merge p gv1)), (Abs (insert k gv1) (merge p p)), (Abs (insert k gv1) (insert k ql)), (Abs (insert k gv1) (insert k q)), (Abs (insert k gv1) (insert k p)), (Abs (insert k gv1) (insert a ql)), (Abs (insert k gv1) (insert a q)), (Abs (insert k gv1) (insert a gv1))
(Abs (insert k gv1) (insert a p)), (Abs (insert k gv1) (maybe_swap ql)), (Abs (insert k gv1) (maybe_swap q)), (Abs (insert k gv1) (maybe_swap gv1)), (Abs (insert k gv1) (maybe_swap p)), (Abs (insert k gv1) (ql ++ ql)), (Abs (insert k gv1) (ql ++ q)), (Abs (insert k gv1) (ql ++ gv1)), (Abs (insert k gv1) (ql ++ p)), (Abs (insert k gv1) (q ++ ql))
(Abs (insert k gv1) (q ++ q)), (Abs (insert k gv1) (q ++ gv1)), (Abs (insert k gv1) (q ++ p)), (Abs (insert k gv1) (gv1 ++ ql)), (Abs (insert k gv1) (gv1 ++ q)), (Abs (insert k gv1) (gv1 ++ gv1)), (Abs (insert k gv1) (gv1 ++ p)), (Abs (insert k gv1) (p ++ ql)), (Abs (insert k gv1) (p ++ q)), (Abs (insert k gv1) (p ++ gv1))
(Abs (insert k gv1) (p ++ p)), (Abs (insert k gv1) []), (Abs (insert k p) ql), (Abs (insert k p) q), (Abs (insert k p) gv1), (Abs (insert k p) p), (Abs (insert k p) (k :: ql)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: gv1)), (Abs (insert k p) (k :: p))
(Abs (insert k p) (a :: ql)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: gv1)), (Abs (insert k p) (a :: p)), (Abs (insert k p) (merge ql ql)), (Abs (insert k p) (merge ql q)), (Abs (insert k p) (merge ql gv1)), (Abs (insert k p) (merge ql p)), (Abs (insert k p) (merge q ql)), (Abs (insert k p) (merge q q))
(Abs (insert k p) (merge q gv1)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge gv1 ql)), (Abs (insert k p) (merge gv1 q)), (Abs (insert k p) (merge gv1 gv1)), (Abs (insert k p) (merge gv1 p)), (Abs (insert k p) (merge p ql)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p gv1)), (Abs (insert k p) (merge p p))
(Abs (insert k p) (insert k ql)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k gv1)), (Abs (insert k p) (insert a ql)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a gv1)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (maybe_swap ql)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap gv1))
(Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (ql ++ ql)), (Abs (insert k p) (ql ++ q)), (Abs (insert k p) (ql ++ gv1)), (Abs (insert k p) (ql ++ p)), (Abs (insert k p) (q ++ ql)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ gv1)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (gv1 ++ ql))
(Abs (insert k p) (gv1 ++ q)), (Abs (insert k p) (gv1 ++ gv1)), (Abs (insert k p) (gv1 ++ p)), (Abs (insert k p) (p ++ ql)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ gv1)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) []), (Abs (insert a ql) ql), (Abs (insert a ql) q)
(Abs (insert a ql) gv1), (Abs (insert a ql) p), (Abs (insert a ql) (k :: ql)), (Abs (insert a ql) (k :: q)), (Abs (insert a ql) (k :: gv1)), (Abs (insert a ql) (k :: p)), (Abs (insert a ql) (a :: ql)), (Abs (insert a ql) (a :: q)), (Abs (insert a ql) (a :: gv1)), (Abs (insert a ql) (a :: p))
(Abs (insert a ql) (merge ql ql)), (Abs (insert a ql) (merge ql q)), (Abs (insert a ql) (merge ql gv1)), (Abs (insert a ql) (merge ql p)), (Abs (insert a ql) (merge q ql)), (Abs (insert a ql) (merge q q)), (Abs (insert a ql) (merge q gv1)), (Abs (insert a ql) (merge q p)), (Abs (insert a ql) (merge gv1 ql)), (Abs (insert a ql) (merge gv1 q))
(Abs (insert a ql) (merge gv1 gv1)), (Abs (insert a ql) (merge gv1 p)), (Abs (insert a ql) (merge p ql)), (Abs (insert a ql) (merge p q)), (Abs (insert a ql) (merge p gv1)), (Abs (insert a ql) (merge p p)), (Abs (insert a ql) (insert k ql)), (Abs (insert a ql) (insert k q)), (Abs (insert a ql) (insert k gv1)), (Abs (insert a ql) (insert k p))
(Abs (insert a ql) (insert a q)), (Abs (insert a ql) (insert a gv1)), (Abs (insert a ql) (insert a p)), (Abs (insert a ql) (maybe_swap ql)), (Abs (insert a ql) (maybe_swap q)), (Abs (insert a ql) (maybe_swap gv1)), (Abs (insert a ql) (maybe_swap p)), (Abs (insert a ql) (ql ++ ql)), (Abs (insert a ql) (ql ++ q)), (Abs (insert a ql) (ql ++ gv1))
(Abs (insert a ql) (ql ++ p)), (Abs (insert a ql) (q ++ ql)), (Abs (insert a ql) (q ++ q)), (Abs (insert a ql) (q ++ gv1)), (Abs (insert a ql) (q ++ p)), (Abs (insert a ql) (gv1 ++ ql)), (Abs (insert a ql) (gv1 ++ q)), (Abs (insert a ql) (gv1 ++ gv1)), (Abs (insert a ql) (gv1 ++ p)), (Abs (insert a ql) (p ++ ql))
(Abs (insert a ql) (p ++ q)), (Abs (insert a ql) (p ++ gv1)), (Abs (insert a ql) (p ++ p)), (Abs (insert a ql) []), (Abs (insert a q) ql), (Abs (insert a q) q), (Abs (insert a q) gv1), (Abs (insert a q) p), (Abs (insert a q) (k :: ql)), (Abs (insert a q) (k :: q))
(Abs (insert a q) (k :: gv1)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (a :: ql)), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: gv1)), (Abs (insert a q) (a :: p)), (Abs (insert a q) (merge ql ql)), (Abs (insert a q) (merge ql q)), (Abs (insert a q) (merge ql gv1)), (Abs (insert a q) (merge ql p))
(Abs (insert a q) (merge q ql)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q gv1)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge gv1 ql)), (Abs (insert a q) (merge gv1 q)), (Abs (insert a q) (merge gv1 gv1)), (Abs (insert a q) (merge gv1 p)), (Abs (insert a q) (merge p ql)), (Abs (insert a q) (merge p q))
(Abs (insert a q) (merge p gv1)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (insert k ql)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k gv1)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert a ql)), (Abs (insert a q) (insert a gv1)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (maybe_swap ql))
(Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap gv1)), (Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (ql ++ ql)), (Abs (insert a q) (ql ++ q)), (Abs (insert a q) (ql ++ gv1)), (Abs (insert a q) (ql ++ p)), (Abs (insert a q) (q ++ ql)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ gv1))
(Abs (insert a q) (q ++ p)), (Abs (insert a q) (gv1 ++ ql)), (Abs (insert a q) (gv1 ++ q)), (Abs (insert a q) (gv1 ++ gv1)), (Abs (insert a q) (gv1 ++ p)), (Abs (insert a q) (p ++ ql)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ gv1)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) [])
(Abs (insert a gv1) ql), (Abs (insert a gv1) q), (Abs (insert a gv1) gv1), (Abs (insert a gv1) p), (Abs (insert a gv1) (k :: ql)), (Abs (insert a gv1) (k :: q)), (Abs (insert a gv1) (k :: gv1)), (Abs (insert a gv1) (k :: p)), (Abs (insert a gv1) (a :: ql)), (Abs (insert a gv1) (a :: q))
(Abs (insert a gv1) (a :: gv1)), (Abs (insert a gv1) (a :: p)), (Abs (insert a gv1) (merge ql ql)), (Abs (insert a gv1) (merge ql q)), (Abs (insert a gv1) (merge ql gv1)), (Abs (insert a gv1) (merge ql p)), (Abs (insert a gv1) (merge q ql)), (Abs (insert a gv1) (merge q q)), (Abs (insert a gv1) (merge q gv1)), (Abs (insert a gv1) (merge q p))
(Abs (insert a gv1) (merge gv1 ql)), (Abs (insert a gv1) (merge gv1 q)), (Abs (insert a gv1) (merge gv1 gv1)), (Abs (insert a gv1) (merge gv1 p)), (Abs (insert a gv1) (merge p ql)), (Abs (insert a gv1) (merge p q)), (Abs (insert a gv1) (merge p gv1)), (Abs (insert a gv1) (merge p p)), (Abs (insert a gv1) (insert k ql)), (Abs (insert a gv1) (insert k q))
(Abs (insert a gv1) (insert k gv1)), (Abs (insert a gv1) (insert k p)), (Abs (insert a gv1) (insert a ql)), (Abs (insert a gv1) (insert a q)), (Abs (insert a gv1) (insert a p)), (Abs (insert a gv1) (maybe_swap ql)), (Abs (insert a gv1) (maybe_swap q)), (Abs (insert a gv1) (maybe_swap gv1)), (Abs (insert a gv1) (maybe_swap p)), (Abs (insert a gv1) (ql ++ ql))
(Abs (insert a gv1) (ql ++ q)), (Abs (insert a gv1) (ql ++ gv1)), (Abs (insert a gv1) (ql ++ p)), (Abs (insert a gv1) (q ++ ql)), (Abs (insert a gv1) (q ++ q)), (Abs (insert a gv1) (q ++ gv1)), (Abs (insert a gv1) (q ++ p)), (Abs (insert a gv1) (gv1 ++ ql)), (Abs (insert a gv1) (gv1 ++ q)), (Abs (insert a gv1) (gv1 ++ gv1))
(Abs (insert a gv1) (gv1 ++ p)), (Abs (insert a gv1) (p ++ ql)), (Abs (insert a gv1) (p ++ q)), (Abs (insert a gv1) (p ++ gv1)), (Abs (insert a gv1) (p ++ p)), (Abs (insert a gv1) []), (Abs (insert a p) ql), (Abs (insert a p) q), (Abs (insert a p) gv1), (Abs (insert a p) p)
(Abs (insert a p) (k :: ql)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: gv1)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (a :: ql)), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: gv1)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (merge ql ql)), (Abs (insert a p) (merge ql q))
(Abs (insert a p) (merge ql gv1)), (Abs (insert a p) (merge ql p)), (Abs (insert a p) (merge q ql)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q gv1)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge gv1 ql)), (Abs (insert a p) (merge gv1 q)), (Abs (insert a p) (merge gv1 gv1)), (Abs (insert a p) (merge gv1 p))
(Abs (insert a p) (merge p ql)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p gv1)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (insert k ql)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k gv1)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert a ql)), (Abs (insert a p) (insert a q))
(Abs (insert a p) (insert a gv1)), (Abs (insert a p) (maybe_swap ql)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap gv1)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (ql ++ ql)), (Abs (insert a p) (ql ++ q)), (Abs (insert a p) (ql ++ gv1)), (Abs (insert a p) (ql ++ p)), (Abs (insert a p) (q ++ ql))
(Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ gv1)), (Abs (insert a p) (q ++ p)), (Abs (insert a p) (gv1 ++ ql)), (Abs (insert a p) (gv1 ++ q)), (Abs (insert a p) (gv1 ++ gv1)), (Abs (insert a p) (gv1 ++ p)), (Abs (insert a p) (p ++ ql)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ gv1))
(Abs (insert a p) (p ++ p)), (Abs (insert a p) []), (Abs (maybe_swap ql) ql), (Abs (maybe_swap ql) q), (Abs (maybe_swap ql) gv1), (Abs (maybe_swap ql) p), (Abs (maybe_swap ql) (k :: ql)), (Abs (maybe_swap ql) (k :: q)), (Abs (maybe_swap ql) (k :: gv1)), (Abs (maybe_swap ql) (k :: p))
(Abs (maybe_swap ql) (a :: ql)), (Abs (maybe_swap ql) (a :: q)), (Abs (maybe_swap ql) (a :: gv1)), (Abs (maybe_swap ql) (a :: p)), (Abs (maybe_swap ql) (merge ql ql)), (Abs (maybe_swap ql) (merge ql q)), (Abs (maybe_swap ql) (merge ql gv1)), (Abs (maybe_swap ql) (merge ql p)), (Abs (maybe_swap ql) (merge q ql)), (Abs (maybe_swap ql) (merge q q))
(Abs (maybe_swap ql) (merge q gv1)), (Abs (maybe_swap ql) (merge q p)), (Abs (maybe_swap ql) (merge gv1 ql)), (Abs (maybe_swap ql) (merge gv1 q)), (Abs (maybe_swap ql) (merge gv1 gv1)), (Abs (maybe_swap ql) (merge gv1 p)), (Abs (maybe_swap ql) (merge p ql)), (Abs (maybe_swap ql) (merge p q)), (Abs (maybe_swap ql) (merge p gv1)), (Abs (maybe_swap ql) (merge p p))
(Abs (maybe_swap ql) (insert k ql)), (Abs (maybe_swap ql) (insert k q)), (Abs (maybe_swap ql) (insert k gv1)), (Abs (maybe_swap ql) (insert k p)), (Abs (maybe_swap ql) (insert a ql)), (Abs (maybe_swap ql) (insert a q)), (Abs (maybe_swap ql) (insert a gv1)), (Abs (maybe_swap ql) (insert a p)), (Abs (maybe_swap ql) (maybe_swap q)), (Abs (maybe_swap ql) (maybe_swap gv1))
(Abs (maybe_swap ql) (maybe_swap p)), (Abs (maybe_swap ql) (ql ++ ql)), (Abs (maybe_swap ql) (ql ++ q)), (Abs (maybe_swap ql) (ql ++ gv1)), (Abs (maybe_swap ql) (ql ++ p)), (Abs (maybe_swap ql) (q ++ ql)), (Abs (maybe_swap ql) (q ++ q)), (Abs (maybe_swap ql) (q ++ gv1)), (Abs (maybe_swap ql) (q ++ p)), (Abs (maybe_swap ql) (gv1 ++ ql))
(Abs (maybe_swap ql) (gv1 ++ q)), (Abs (maybe_swap ql) (gv1 ++ gv1)), (Abs (maybe_swap ql) (gv1 ++ p)), (Abs (maybe_swap ql) (p ++ ql)), (Abs (maybe_swap ql) (p ++ q)), (Abs (maybe_swap ql) (p ++ gv1)), (Abs (maybe_swap ql) (p ++ p)), (Abs (maybe_swap ql) []), (Abs (maybe_swap q) ql), (Abs (maybe_swap q) q)
(Abs (maybe_swap q) gv1), (Abs (maybe_swap q) p), (Abs (maybe_swap q) (k :: ql)), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: gv1)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (a :: ql)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: gv1)), (Abs (maybe_swap q) (a :: p))
(Abs (maybe_swap q) (merge ql ql)), (Abs (maybe_swap q) (merge ql q)), (Abs (maybe_swap q) (merge ql gv1)), (Abs (maybe_swap q) (merge ql p)), (Abs (maybe_swap q) (merge q ql)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q gv1)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge gv1 ql)), (Abs (maybe_swap q) (merge gv1 q))
(Abs (maybe_swap q) (merge gv1 gv1)), (Abs (maybe_swap q) (merge gv1 p)), (Abs (maybe_swap q) (merge p ql)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p gv1)), (Abs (maybe_swap q) (merge p p)), (Abs (maybe_swap q) (insert k ql)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k gv1)), (Abs (maybe_swap q) (insert k p))
(Abs (maybe_swap q) (insert a ql)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a gv1)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap q) (maybe_swap gv1)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (ql ++ ql)), (Abs (maybe_swap q) (ql ++ q)), (Abs (maybe_swap q) (ql ++ gv1))
(Abs (maybe_swap q) (ql ++ p)), (Abs (maybe_swap q) (q ++ ql)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ gv1)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (gv1 ++ ql)), (Abs (maybe_swap q) (gv1 ++ q)), (Abs (maybe_swap q) (gv1 ++ gv1)), (Abs (maybe_swap q) (gv1 ++ p)), (Abs (maybe_swap q) (p ++ ql))
(Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ gv1)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) []), (Abs (maybe_swap gv1) ql), (Abs (maybe_swap gv1) q), (Abs (maybe_swap gv1) gv1), (Abs (maybe_swap gv1) p), (Abs (maybe_swap gv1) (k :: ql)), (Abs (maybe_swap gv1) (k :: q))
(Abs (maybe_swap gv1) (k :: gv1)), (Abs (maybe_swap gv1) (k :: p)), (Abs (maybe_swap gv1) (a :: ql)), (Abs (maybe_swap gv1) (a :: q)), (Abs (maybe_swap gv1) (a :: gv1)), (Abs (maybe_swap gv1) (a :: p)), (Abs (maybe_swap gv1) (merge ql ql)), (Abs (maybe_swap gv1) (merge ql q)), (Abs (maybe_swap gv1) (merge ql gv1)), (Abs (maybe_swap gv1) (merge ql p))
(Abs (maybe_swap gv1) (merge q ql)), (Abs (maybe_swap gv1) (merge q q)), (Abs (maybe_swap gv1) (merge q gv1)), (Abs (maybe_swap gv1) (merge q p)), (Abs (maybe_swap gv1) (merge gv1 ql)), (Abs (maybe_swap gv1) (merge gv1 q)), (Abs (maybe_swap gv1) (merge gv1 gv1)), (Abs (maybe_swap gv1) (merge gv1 p)), (Abs (maybe_swap gv1) (merge p ql)), (Abs (maybe_swap gv1) (merge p q))
(Abs (maybe_swap gv1) (merge p gv1)), (Abs (maybe_swap gv1) (merge p p)), (Abs (maybe_swap gv1) (insert k ql)), (Abs (maybe_swap gv1) (insert k q)), (Abs (maybe_swap gv1) (insert k gv1)), (Abs (maybe_swap gv1) (insert k p)), (Abs (maybe_swap gv1) (insert a ql)), (Abs (maybe_swap gv1) (insert a q)), (Abs (maybe_swap gv1) (insert a gv1)), (Abs (maybe_swap gv1) (insert a p))
(Abs (maybe_swap gv1) (maybe_swap ql)), (Abs (maybe_swap gv1) (maybe_swap q)), (Abs (maybe_swap gv1) (maybe_swap p)), (Abs (maybe_swap gv1) (ql ++ ql)), (Abs (maybe_swap gv1) (ql ++ q)), (Abs (maybe_swap gv1) (ql ++ gv1)), (Abs (maybe_swap gv1) (ql ++ p)), (Abs (maybe_swap gv1) (q ++ ql)), (Abs (maybe_swap gv1) (q ++ q)), (Abs (maybe_swap gv1) (q ++ gv1))
(Abs (maybe_swap gv1) (q ++ p)), (Abs (maybe_swap gv1) (gv1 ++ ql)), (Abs (maybe_swap gv1) (gv1 ++ q)), (Abs (maybe_swap gv1) (gv1 ++ gv1)), (Abs (maybe_swap gv1) (gv1 ++ p)), (Abs (maybe_swap gv1) (p ++ ql)), (Abs (maybe_swap gv1) (p ++ q)), (Abs (maybe_swap gv1) (p ++ gv1)), (Abs (maybe_swap gv1) (p ++ p)), (Abs (maybe_swap gv1) [])
(Abs (maybe_swap p) ql), (Abs (maybe_swap p) q), (Abs (maybe_swap p) gv1), (Abs (maybe_swap p) p), (Abs (maybe_swap p) (k :: ql)), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: gv1)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (a :: ql)), (Abs (maybe_swap p) (a :: q))
(Abs (maybe_swap p) (a :: gv1)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (merge ql ql)), (Abs (maybe_swap p) (merge ql q)), (Abs (maybe_swap p) (merge ql gv1)), (Abs (maybe_swap p) (merge ql p)), (Abs (maybe_swap p) (merge q ql)), (Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q gv1)), (Abs (maybe_swap p) (merge q p))
(Abs (maybe_swap p) (merge gv1 ql)), (Abs (maybe_swap p) (merge gv1 q)), (Abs (maybe_swap p) (merge gv1 gv1)), (Abs (maybe_swap p) (merge gv1 p)), (Abs (maybe_swap p) (merge p ql)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p gv1)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (insert k ql)), (Abs (maybe_swap p) (insert k q))
(Abs (maybe_swap p) (insert k gv1)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert a ql)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a gv1)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (maybe_swap ql)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap gv1)), (Abs (maybe_swap p) (ql ++ ql))
(Abs (maybe_swap p) (ql ++ q)), (Abs (maybe_swap p) (ql ++ gv1)), (Abs (maybe_swap p) (ql ++ p)), (Abs (maybe_swap p) (q ++ ql)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ gv1)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (gv1 ++ ql)), (Abs (maybe_swap p) (gv1 ++ q)), (Abs (maybe_swap p) (gv1 ++ gv1))
(Abs (maybe_swap p) (gv1 ++ p)), (Abs (maybe_swap p) (p ++ ql)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ gv1)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) []), (Abs (ql ++ ql) ql), (Abs (ql ++ ql) q), (Abs (ql ++ ql) gv1), (Abs (ql ++ ql) p)
(Abs (ql ++ ql) (k :: ql)), (Abs (ql ++ ql) (k :: q)), (Abs (ql ++ ql) (k :: gv1)), (Abs (ql ++ ql) (k :: p)), (Abs (ql ++ ql) (a :: ql)), (Abs (ql ++ ql) (a :: q)), (Abs (ql ++ ql) (a :: gv1)), (Abs (ql ++ ql) (a :: p)), (Abs (ql ++ ql) (merge ql ql)), (Abs (ql ++ ql) (merge ql q))
(Abs (ql ++ ql) (merge ql gv1)), (Abs (ql ++ ql) (merge ql p)), (Abs (ql ++ ql) (merge q ql)), (Abs (ql ++ ql) (merge q q)), (Abs (ql ++ ql) (merge q gv1)), (Abs (ql ++ ql) (merge q p)), (Abs (ql ++ ql) (merge gv1 ql)), (Abs (ql ++ ql) (merge gv1 q)), (Abs (ql ++ ql) (merge gv1 gv1)), (Abs (ql ++ ql) (merge gv1 p))
(Abs (ql ++ ql) (merge p ql)), (Abs (ql ++ ql) (merge p q)), (Abs (ql ++ ql) (merge p gv1)), (Abs (ql ++ ql) (merge p p)), (Abs (ql ++ ql) (insert k ql)), (Abs (ql ++ ql) (insert k q)), (Abs (ql ++ ql) (insert k gv1)), (Abs (ql ++ ql) (insert k p)), (Abs (ql ++ ql) (insert a ql)), (Abs (ql ++ ql) (insert a q))
(Abs (ql ++ ql) (insert a gv1)), (Abs (ql ++ ql) (insert a p)), (Abs (ql ++ ql) (maybe_swap ql)), (Abs (ql ++ ql) (maybe_swap q)), (Abs (ql ++ ql) (maybe_swap gv1)), (Abs (ql ++ ql) (maybe_swap p)), (Abs (ql ++ ql) (ql ++ q)), (Abs (ql ++ ql) (ql ++ gv1)), (Abs (ql ++ ql) (ql ++ p)), (Abs (ql ++ ql) (q ++ ql))
(Abs (ql ++ ql) (q ++ q)), (Abs (ql ++ ql) (q ++ gv1)), (Abs (ql ++ ql) (q ++ p)), (Abs (ql ++ ql) (gv1 ++ ql)), (Abs (ql ++ ql) (gv1 ++ q)), (Abs (ql ++ ql) (gv1 ++ gv1)), (Abs (ql ++ ql) (gv1 ++ p)), (Abs (ql ++ ql) (p ++ ql)), (Abs (ql ++ ql) (p ++ q)), (Abs (ql ++ ql) (p ++ gv1))
(Abs (ql ++ ql) (p ++ p)), (Abs (ql ++ ql) []), (Abs (ql ++ q) ql), (Abs (ql ++ q) q), (Abs (ql ++ q) gv1), (Abs (ql ++ q) p), (Abs (ql ++ q) (k :: ql)), (Abs (ql ++ q) (k :: q)), (Abs (ql ++ q) (k :: gv1)), (Abs (ql ++ q) (k :: p))
(Abs (ql ++ q) (a :: ql)), (Abs (ql ++ q) (a :: q)), (Abs (ql ++ q) (a :: gv1)), (Abs (ql ++ q) (a :: p)), (Abs (ql ++ q) (merge ql ql)), (Abs (ql ++ q) (merge ql q)), (Abs (ql ++ q) (merge ql gv1)), (Abs (ql ++ q) (merge ql p)), (Abs (ql ++ q) (merge q ql)), (Abs (ql ++ q) (merge q q))
(Abs (ql ++ q) (merge q gv1)), (Abs (ql ++ q) (merge q p)), (Abs (ql ++ q) (merge gv1 ql)), (Abs (ql ++ q) (merge gv1 q)), (Abs (ql ++ q) (merge gv1 gv1)), (Abs (ql ++ q) (merge gv1 p)), (Abs (ql ++ q) (merge p ql)), (Abs (ql ++ q) (merge p q)), (Abs (ql ++ q) (merge p gv1)), (Abs (ql ++ q) (merge p p))
(Abs (ql ++ q) (insert k ql)), (Abs (ql ++ q) (insert k q)), (Abs (ql ++ q) (insert k gv1)), (Abs (ql ++ q) (insert k p)), (Abs (ql ++ q) (insert a ql)), (Abs (ql ++ q) (insert a q)), (Abs (ql ++ q) (insert a gv1)), (Abs (ql ++ q) (insert a p)), (Abs (ql ++ q) (maybe_swap ql)), (Abs (ql ++ q) (maybe_swap q))
(Abs (ql ++ q) (maybe_swap gv1)), (Abs (ql ++ q) (maybe_swap p)), (Abs (ql ++ q) (ql ++ ql)), (Abs (ql ++ q) (ql ++ gv1)), (Abs (ql ++ q) (ql ++ p)), (Abs (ql ++ q) (q ++ ql)), (Abs (ql ++ q) (q ++ q)), (Abs (ql ++ q) (q ++ gv1)), (Abs (ql ++ q) (q ++ p)), (Abs (ql ++ q) (gv1 ++ ql))
(Abs (ql ++ q) (gv1 ++ q)), (Abs (ql ++ q) (gv1 ++ gv1)), (Abs (ql ++ q) (gv1 ++ p)), (Abs (ql ++ q) (p ++ ql)), (Abs (ql ++ q) (p ++ q)), (Abs (ql ++ q) (p ++ gv1)), (Abs (ql ++ q) (p ++ p)), (Abs (ql ++ q) []), (Abs (ql ++ gv1) ql), (Abs (ql ++ gv1) q)
(Abs (ql ++ gv1) gv1), (Abs (ql ++ gv1) p), (Abs (ql ++ gv1) (k :: ql)), (Abs (ql ++ gv1) (k :: q)), (Abs (ql ++ gv1) (k :: gv1)), (Abs (ql ++ gv1) (k :: p)), (Abs (ql ++ gv1) (a :: ql)), (Abs (ql ++ gv1) (a :: q)), (Abs (ql ++ gv1) (a :: gv1)), (Abs (ql ++ gv1) (a :: p))
(Abs (ql ++ gv1) (merge ql ql)), (Abs (ql ++ gv1) (merge ql q)), (Abs (ql ++ gv1) (merge ql gv1)), (Abs (ql ++ gv1) (merge ql p)), (Abs (ql ++ gv1) (merge q ql)), (Abs (ql ++ gv1) (merge q q)), (Abs (ql ++ gv1) (merge q gv1)), (Abs (ql ++ gv1) (merge q p)), (Abs (ql ++ gv1) (merge gv1 ql)), (Abs (ql ++ gv1) (merge gv1 q))
(Abs (ql ++ gv1) (merge gv1 gv1)), (Abs (ql ++ gv1) (merge gv1 p)), (Abs (ql ++ gv1) (merge p ql)), (Abs (ql ++ gv1) (merge p q)), (Abs (ql ++ gv1) (merge p gv1)), (Abs (ql ++ gv1) (merge p p)), (Abs (ql ++ gv1) (insert k ql)), (Abs (ql ++ gv1) (insert k q)), (Abs (ql ++ gv1) (insert k gv1)), (Abs (ql ++ gv1) (insert k p))
(Abs (ql ++ gv1) (insert a ql)), (Abs (ql ++ gv1) (insert a q)), (Abs (ql ++ gv1) (insert a gv1)), (Abs (ql ++ gv1) (insert a p)), (Abs (ql ++ gv1) (maybe_swap ql)), (Abs (ql ++ gv1) (maybe_swap q)), (Abs (ql ++ gv1) (maybe_swap gv1)), (Abs (ql ++ gv1) (maybe_swap p)), (Abs (ql ++ gv1) (ql ++ ql)), (Abs (ql ++ gv1) (ql ++ q))
(Abs (ql ++ gv1) (ql ++ p)), (Abs (ql ++ gv1) (q ++ ql)), (Abs (ql ++ gv1) (q ++ q)), (Abs (ql ++ gv1) (q ++ gv1)), (Abs (ql ++ gv1) (q ++ p)), (Abs (ql ++ gv1) (gv1 ++ ql)), (Abs (ql ++ gv1) (gv1 ++ q)), (Abs (ql ++ gv1) (gv1 ++ gv1)), (Abs (ql ++ gv1) (gv1 ++ p)), (Abs (ql ++ gv1) (p ++ ql))
(Abs (ql ++ gv1) (p ++ q)), (Abs (ql ++ gv1) (p ++ gv1)), (Abs (ql ++ gv1) (p ++ p)), (Abs (ql ++ gv1) []), (Abs (ql ++ p) ql), (Abs (ql ++ p) q), (Abs (ql ++ p) gv1), (Abs (ql ++ p) p), (Abs (ql ++ p) (k :: ql)), (Abs (ql ++ p) (k :: q))
(Abs (ql ++ p) (k :: gv1)), (Abs (ql ++ p) (k :: p)), (Abs (ql ++ p) (a :: ql)), (Abs (ql ++ p) (a :: q)), (Abs (ql ++ p) (a :: gv1)), (Abs (ql ++ p) (a :: p)), (Abs (ql ++ p) (merge ql ql)), (Abs (ql ++ p) (merge ql q)), (Abs (ql ++ p) (merge ql gv1)), (Abs (ql ++ p) (merge ql p))
(Abs (ql ++ p) (merge q ql)), (Abs (ql ++ p) (merge q q)), (Abs (ql ++ p) (merge q gv1)), (Abs (ql ++ p) (merge q p)), (Abs (ql ++ p) (merge gv1 ql)), (Abs (ql ++ p) (merge gv1 q)), (Abs (ql ++ p) (merge gv1 gv1)), (Abs (ql ++ p) (merge gv1 p)), (Abs (ql ++ p) (merge p ql)), (Abs (ql ++ p) (merge p q))
(Abs (ql ++ p) (merge p gv1)), (Abs (ql ++ p) (merge p p)), (Abs (ql ++ p) (insert k ql)), (Abs (ql ++ p) (insert k q)), (Abs (ql ++ p) (insert k gv1)), (Abs (ql ++ p) (insert k p)), (Abs (ql ++ p) (insert a ql)), (Abs (ql ++ p) (insert a q)), (Abs (ql ++ p) (insert a gv1)), (Abs (ql ++ p) (insert a p))
(Abs (ql ++ p) (maybe_swap ql)), (Abs (ql ++ p) (maybe_swap q)), (Abs (ql ++ p) (maybe_swap gv1)), (Abs (ql ++ p) (maybe_swap p)), (Abs (ql ++ p) (ql ++ ql)), (Abs (ql ++ p) (ql ++ q)), (Abs (ql ++ p) (ql ++ gv1)), (Abs (ql ++ p) (q ++ ql)), (Abs (ql ++ p) (q ++ q)), (Abs (ql ++ p) (q ++ gv1))
(Abs (ql ++ p) (q ++ p)), (Abs (ql ++ p) (gv1 ++ ql)), (Abs (ql ++ p) (gv1 ++ q)), (Abs (ql ++ p) (gv1 ++ gv1)), (Abs (ql ++ p) (gv1 ++ p)), (Abs (ql ++ p) (p ++ ql)), (Abs (ql ++ p) (p ++ q)), (Abs (ql ++ p) (p ++ gv1)), (Abs (ql ++ p) (p ++ p)), (Abs (ql ++ p) [])
(Abs (q ++ ql) ql), (Abs (q ++ ql) q), (Abs (q ++ ql) gv1), (Abs (q ++ ql) p), (Abs (q ++ ql) (k :: ql)), (Abs (q ++ ql) (k :: q)), (Abs (q ++ ql) (k :: gv1)), (Abs (q ++ ql) (k :: p)), (Abs (q ++ ql) (a :: ql)), (Abs (q ++ ql) (a :: q))
(Abs (q ++ ql) (a :: gv1)), (Abs (q ++ ql) (a :: p)), (Abs (q ++ ql) (merge ql ql)), (Abs (q ++ ql) (merge ql q)), (Abs (q ++ ql) (merge ql gv1)), (Abs (q ++ ql) (merge ql p)), (Abs (q ++ ql) (merge q ql)), (Abs (q ++ ql) (merge q q)), (Abs (q ++ ql) (merge q gv1)), (Abs (q ++ ql) (merge q p))
(Abs (q ++ ql) (merge gv1 ql)), (Abs (q ++ ql) (merge gv1 q)), (Abs (q ++ ql) (merge gv1 gv1)), (Abs (q ++ ql) (merge gv1 p)), (Abs (q ++ ql) (merge p ql)), (Abs (q ++ ql) (merge p q)), (Abs (q ++ ql) (merge p gv1)), (Abs (q ++ ql) (merge p p)), (Abs (q ++ ql) (insert k ql)), (Abs (q ++ ql) (insert k q))
(Abs (q ++ ql) (insert k gv1)), (Abs (q ++ ql) (insert k p)), (Abs (q ++ ql) (insert a ql)), (Abs (q ++ ql) (insert a q)), (Abs (q ++ ql) (insert a gv1)), (Abs (q ++ ql) (insert a p)), (Abs (q ++ ql) (maybe_swap ql)), (Abs (q ++ ql) (maybe_swap q)), (Abs (q ++ ql) (maybe_swap gv1)), (Abs (q ++ ql) (maybe_swap p))
(Abs (q ++ ql) (ql ++ ql)), (Abs (q ++ ql) (ql ++ q)), (Abs (q ++ ql) (ql ++ gv1)), (Abs (q ++ ql) (ql ++ p)), (Abs (q ++ ql) (q ++ q)), (Abs (q ++ ql) (q ++ gv1)), (Abs (q ++ ql) (q ++ p)), (Abs (q ++ ql) (gv1 ++ ql)), (Abs (q ++ ql) (gv1 ++ q)), (Abs (q ++ ql) (gv1 ++ gv1))
(Abs (q ++ ql) (gv1 ++ p)), (Abs (q ++ ql) (p ++ ql)), (Abs (q ++ ql) (p ++ q)), (Abs (q ++ ql) (p ++ gv1)), (Abs (q ++ ql) (p ++ p)), (Abs (q ++ ql) []), (Abs (q ++ q) ql), (Abs (q ++ q) q), (Abs (q ++ q) gv1), (Abs (q ++ q) p)
(Abs (q ++ q) (k :: ql)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: gv1)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (a :: ql)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: gv1)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (merge ql ql)), (Abs (q ++ q) (merge ql q))
(Abs (q ++ q) (merge ql gv1)), (Abs (q ++ q) (merge ql p)), (Abs (q ++ q) (merge q ql)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q gv1)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge gv1 ql)), (Abs (q ++ q) (merge gv1 q)), (Abs (q ++ q) (merge gv1 gv1)), (Abs (q ++ q) (merge gv1 p))
(Abs (q ++ q) (merge p ql)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p gv1)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (insert k ql)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k gv1)), (Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert a ql)), (Abs (q ++ q) (insert a q))
(Abs (q ++ q) (insert a gv1)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (maybe_swap ql)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap gv1)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (ql ++ ql)), (Abs (q ++ q) (ql ++ q)), (Abs (q ++ q) (ql ++ gv1)), (Abs (q ++ q) (ql ++ p))
(Abs (q ++ q) (q ++ ql)), (Abs (q ++ q) (q ++ gv1)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (gv1 ++ ql)), (Abs (q ++ q) (gv1 ++ q)), (Abs (q ++ q) (gv1 ++ gv1)), (Abs (q ++ q) (gv1 ++ p)), (Abs (q ++ q) (p ++ ql)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ gv1))
(Abs (q ++ q) (p ++ p)), (Abs (q ++ q) []), (Abs (q ++ gv1) ql), (Abs (q ++ gv1) q), (Abs (q ++ gv1) gv1), (Abs (q ++ gv1) p), (Abs (q ++ gv1) (k :: ql)), (Abs (q ++ gv1) (k :: q)), (Abs (q ++ gv1) (k :: gv1)), (Abs (q ++ gv1) (k :: p))
(Abs (q ++ gv1) (a :: ql)), (Abs (q ++ gv1) (a :: q)), (Abs (q ++ gv1) (a :: gv1)), (Abs (q ++ gv1) (a :: p)), (Abs (q ++ gv1) (merge ql ql)), (Abs (q ++ gv1) (merge ql q)), (Abs (q ++ gv1) (merge ql gv1)), (Abs (q ++ gv1) (merge ql p)), (Abs (q ++ gv1) (merge q ql)), (Abs (q ++ gv1) (merge q q))
(Abs (q ++ gv1) (merge q gv1)), (Abs (q ++ gv1) (merge q p)), (Abs (q ++ gv1) (merge gv1 ql)), (Abs (q ++ gv1) (merge gv1 q)), (Abs (q ++ gv1) (merge gv1 gv1)), (Abs (q ++ gv1) (merge gv1 p)), (Abs (q ++ gv1) (merge p ql)), (Abs (q ++ gv1) (merge p q)), (Abs (q ++ gv1) (merge p gv1)), (Abs (q ++ gv1) (merge p p))
(Abs (q ++ gv1) (insert k ql)), (Abs (q ++ gv1) (insert k q)), (Abs (q ++ gv1) (insert k gv1)), (Abs (q ++ gv1) (insert k p)), (Abs (q ++ gv1) (insert a ql)), (Abs (q ++ gv1) (insert a q)), (Abs (q ++ gv1) (insert a gv1)), (Abs (q ++ gv1) (insert a p)), (Abs (q ++ gv1) (maybe_swap ql)), (Abs (q ++ gv1) (maybe_swap q))
(Abs (q ++ gv1) (maybe_swap gv1)), (Abs (q ++ gv1) (maybe_swap p)), (Abs (q ++ gv1) (ql ++ ql)), (Abs (q ++ gv1) (ql ++ q)), (Abs (q ++ gv1) (ql ++ gv1)), (Abs (q ++ gv1) (ql ++ p)), (Abs (q ++ gv1) (q ++ ql)), (Abs (q ++ gv1) (q ++ q)), (Abs (q ++ gv1) (q ++ p)), (Abs (q ++ gv1) (gv1 ++ ql))
(Abs (q ++ gv1) (gv1 ++ q)), (Abs (q ++ gv1) (gv1 ++ gv1)), (Abs (q ++ gv1) (gv1 ++ p)), (Abs (q ++ gv1) (p ++ ql)), (Abs (q ++ gv1) (p ++ q)), (Abs (q ++ gv1) (p ++ gv1)), (Abs (q ++ gv1) (p ++ p)), (Abs (q ++ gv1) []), (Abs (q ++ p) ql), (Abs (q ++ p) q)
(Abs (q ++ p) gv1), (Abs (q ++ p) p), (Abs (q ++ p) (k :: ql)), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: gv1)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (a :: ql)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: gv1)), (Abs (q ++ p) (a :: p))
(Abs (q ++ p) (merge ql ql)), (Abs (q ++ p) (merge ql q)), (Abs (q ++ p) (merge ql gv1)), (Abs (q ++ p) (merge ql p)), (Abs (q ++ p) (merge q ql)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q gv1)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge gv1 ql)), (Abs (q ++ p) (merge gv1 q))
(Abs (q ++ p) (merge gv1 gv1)), (Abs (q ++ p) (merge gv1 p)), (Abs (q ++ p) (merge p ql)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p gv1)), (Abs (q ++ p) (merge p p)), (Abs (q ++ p) (insert k ql)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k gv1)), (Abs (q ++ p) (insert k p))
(Abs (q ++ p) (insert a ql)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a gv1)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (maybe_swap ql)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap gv1)), (Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (ql ++ ql)), (Abs (q ++ p) (ql ++ q))
(Abs (q ++ p) (ql ++ gv1)), (Abs (q ++ p) (ql ++ p)), (Abs (q ++ p) (q ++ ql)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ gv1)), (Abs (q ++ p) (gv1 ++ ql)), (Abs (q ++ p) (gv1 ++ q)), (Abs (q ++ p) (gv1 ++ gv1)), (Abs (q ++ p) (gv1 ++ p)), (Abs (q ++ p) (p ++ ql))
(Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ gv1)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) []), (Abs (gv1 ++ ql) ql), (Abs (gv1 ++ ql) q), (Abs (gv1 ++ ql) gv1), (Abs (gv1 ++ ql) p), (Abs (gv1 ++ ql) (k :: ql)), (Abs (gv1 ++ ql) (k :: q))
(Abs (gv1 ++ ql) (k :: gv1)), (Abs (gv1 ++ ql) (k :: p)), (Abs (gv1 ++ ql) (a :: ql)), (Abs (gv1 ++ ql) (a :: q)), (Abs (gv1 ++ ql) (a :: gv1)), (Abs (gv1 ++ ql) (a :: p)), (Abs (gv1 ++ ql) (merge ql ql)), (Abs (gv1 ++ ql) (merge ql q)), (Abs (gv1 ++ ql) (merge ql gv1)), (Abs (gv1 ++ ql) (merge ql p))
(Abs (gv1 ++ ql) (merge q ql)), (Abs (gv1 ++ ql) (merge q q)), (Abs (gv1 ++ ql) (merge q gv1)), (Abs (gv1 ++ ql) (merge q p)), (Abs (gv1 ++ ql) (merge gv1 ql)), (Abs (gv1 ++ ql) (merge gv1 q)), (Abs (gv1 ++ ql) (merge gv1 gv1)), (Abs (gv1 ++ ql) (merge gv1 p)), (Abs (gv1 ++ ql) (merge p ql)), (Abs (gv1 ++ ql) (merge p q))
(Abs (gv1 ++ ql) (merge p gv1)), (Abs (gv1 ++ ql) (merge p p)), (Abs (gv1 ++ ql) (insert k ql)), (Abs (gv1 ++ ql) (insert k q)), (Abs (gv1 ++ ql) (insert k gv1)), (Abs (gv1 ++ ql) (insert k p)), (Abs (gv1 ++ ql) (insert a ql)), (Abs (gv1 ++ ql) (insert a q)), (Abs (gv1 ++ ql) (insert a gv1)), (Abs (gv1 ++ ql) (insert a p))
(Abs (gv1 ++ ql) (maybe_swap ql)), (Abs (gv1 ++ ql) (maybe_swap q)), (Abs (gv1 ++ ql) (maybe_swap gv1)), (Abs (gv1 ++ ql) (maybe_swap p)), (Abs (gv1 ++ ql) (ql ++ ql)), (Abs (gv1 ++ ql) (ql ++ q)), (Abs (gv1 ++ ql) (ql ++ gv1)), (Abs (gv1 ++ ql) (ql ++ p)), (Abs (gv1 ++ ql) (q ++ ql)), (Abs (gv1 ++ ql) (q ++ q))
(Abs (gv1 ++ ql) (q ++ gv1)), (Abs (gv1 ++ ql) (q ++ p)), (Abs (gv1 ++ ql) (gv1 ++ q)), (Abs (gv1 ++ ql) (gv1 ++ gv1)), (Abs (gv1 ++ ql) (gv1 ++ p)), (Abs (gv1 ++ ql) (p ++ ql)), (Abs (gv1 ++ ql) (p ++ q)), (Abs (gv1 ++ ql) (p ++ gv1)), (Abs (gv1 ++ ql) (p ++ p)), (Abs (gv1 ++ ql) [])
(Abs (gv1 ++ q) ql), (Abs (gv1 ++ q) q), (Abs (gv1 ++ q) gv1), (Abs (gv1 ++ q) p), (Abs (gv1 ++ q) (k :: ql)), (Abs (gv1 ++ q) (k :: q)), (Abs (gv1 ++ q) (k :: gv1)), (Abs (gv1 ++ q) (k :: p)), (Abs (gv1 ++ q) (a :: ql)), (Abs (gv1 ++ q) (a :: q))
(Abs (gv1 ++ q) (a :: gv1)), (Abs (gv1 ++ q) (a :: p)), (Abs (gv1 ++ q) (merge ql ql)), (Abs (gv1 ++ q) (merge ql q)), (Abs (gv1 ++ q) (merge ql gv1)), (Abs (gv1 ++ q) (merge ql p)), (Abs (gv1 ++ q) (merge q ql)), (Abs (gv1 ++ q) (merge q q)), (Abs (gv1 ++ q) (merge q gv1)), (Abs (gv1 ++ q) (merge q p))
(Abs (gv1 ++ q) (merge gv1 ql)), (Abs (gv1 ++ q) (merge gv1 q)), (Abs (gv1 ++ q) (merge gv1 gv1)), (Abs (gv1 ++ q) (merge gv1 p)), (Abs (gv1 ++ q) (merge p ql)), (Abs (gv1 ++ q) (merge p q)), (Abs (gv1 ++ q) (merge p gv1)), (Abs (gv1 ++ q) (merge p p)), (Abs (gv1 ++ q) (insert k ql)), (Abs (gv1 ++ q) (insert k q))
(Abs (gv1 ++ q) (insert k gv1)), (Abs (gv1 ++ q) (insert k p)), (Abs (gv1 ++ q) (insert a ql)), (Abs (gv1 ++ q) (insert a q)), (Abs (gv1 ++ q) (insert a gv1)), (Abs (gv1 ++ q) (insert a p)), (Abs (gv1 ++ q) (maybe_swap ql)), (Abs (gv1 ++ q) (maybe_swap q)), (Abs (gv1 ++ q) (maybe_swap gv1)), (Abs (gv1 ++ q) (maybe_swap p))
(Abs (gv1 ++ q) (ql ++ ql)), (Abs (gv1 ++ q) (ql ++ q)), (Abs (gv1 ++ q) (ql ++ gv1)), (Abs (gv1 ++ q) (ql ++ p)), (Abs (gv1 ++ q) (q ++ ql)), (Abs (gv1 ++ q) (q ++ q)), (Abs (gv1 ++ q) (q ++ gv1)), (Abs (gv1 ++ q) (q ++ p)), (Abs (gv1 ++ q) (gv1 ++ ql)), (Abs (gv1 ++ q) (gv1 ++ gv1))
(Abs (gv1 ++ q) (gv1 ++ p)), (Abs (gv1 ++ q) (p ++ ql)), (Abs (gv1 ++ q) (p ++ q)), (Abs (gv1 ++ q) (p ++ gv1)), (Abs (gv1 ++ q) (p ++ p)), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) ql), (Abs (gv1 ++ gv1) q), (Abs (gv1 ++ gv1) gv1), (Abs (gv1 ++ gv1) p)
(Abs (gv1 ++ gv1) (k :: ql)), (Abs (gv1 ++ gv1) (k :: q)), (Abs (gv1 ++ gv1) (k :: gv1)), (Abs (gv1 ++ gv1) (k :: p)), (Abs (gv1 ++ gv1) (a :: ql)), (Abs (gv1 ++ gv1) (a :: q)), (Abs (gv1 ++ gv1) (a :: gv1)), (Abs (gv1 ++ gv1) (a :: p)), (Abs (gv1 ++ gv1) (merge ql ql)), (Abs (gv1 ++ gv1) (merge ql q))
(Abs (gv1 ++ gv1) (merge ql gv1)), (Abs (gv1 ++ gv1) (merge ql p)), (Abs (gv1 ++ gv1) (merge q ql)), (Abs (gv1 ++ gv1) (merge q q)), (Abs (gv1 ++ gv1) (merge q gv1)), (Abs (gv1 ++ gv1) (merge q p)), (Abs (gv1 ++ gv1) (merge gv1 ql)), (Abs (gv1 ++ gv1) (merge gv1 q)), (Abs (gv1 ++ gv1) (merge gv1 gv1)), (Abs (gv1 ++ gv1) (merge gv1 p))
(Abs (gv1 ++ gv1) (merge p ql)), (Abs (gv1 ++ gv1) (merge p q)), (Abs (gv1 ++ gv1) (merge p gv1)), (Abs (gv1 ++ gv1) (merge p p)), (Abs (gv1 ++ gv1) (insert k ql)), (Abs (gv1 ++ gv1) (insert k q)), (Abs (gv1 ++ gv1) (insert k gv1)), (Abs (gv1 ++ gv1) (insert k p)), (Abs (gv1 ++ gv1) (insert a ql)), (Abs (gv1 ++ gv1) (insert a q))
(Abs (gv1 ++ gv1) (insert a gv1)), (Abs (gv1 ++ gv1) (insert a p)), (Abs (gv1 ++ gv1) (maybe_swap ql)), (Abs (gv1 ++ gv1) (maybe_swap q)), (Abs (gv1 ++ gv1) (maybe_swap gv1)), (Abs (gv1 ++ gv1) (maybe_swap p)), (Abs (gv1 ++ gv1) (ql ++ ql)), (Abs (gv1 ++ gv1) (ql ++ q)), (Abs (gv1 ++ gv1) (ql ++ gv1)), (Abs (gv1 ++ gv1) (ql ++ p))
(Abs (gv1 ++ gv1) (q ++ ql)), (Abs (gv1 ++ gv1) (q ++ q)), (Abs (gv1 ++ gv1) (q ++ gv1)), (Abs (gv1 ++ gv1) (q ++ p)), (Abs (gv1 ++ gv1) (gv1 ++ ql)), (Abs (gv1 ++ gv1) (gv1 ++ q)), (Abs (gv1 ++ gv1) (gv1 ++ p)), (Abs (gv1 ++ gv1) (p ++ ql)), (Abs (gv1 ++ gv1) (p ++ q)), (Abs (gv1 ++ gv1) (p ++ gv1))
(Abs (gv1 ++ gv1) (p ++ p)), (Abs (gv1 ++ gv1) []), (Abs (gv1 ++ p) ql), (Abs (gv1 ++ p) q), (Abs (gv1 ++ p) gv1), (Abs (gv1 ++ p) p), (Abs (gv1 ++ p) (k :: ql)), (Abs (gv1 ++ p) (k :: q)), (Abs (gv1 ++ p) (k :: gv1)), (Abs (gv1 ++ p) (k :: p))
(Abs (gv1 ++ p) (a :: ql)), (Abs (gv1 ++ p) (a :: q)), (Abs (gv1 ++ p) (a :: gv1)), (Abs (gv1 ++ p) (a :: p)), (Abs (gv1 ++ p) (merge ql ql)), (Abs (gv1 ++ p) (merge ql q)), (Abs (gv1 ++ p) (merge ql gv1)), (Abs (gv1 ++ p) (merge ql p)), (Abs (gv1 ++ p) (merge q ql)), (Abs (gv1 ++ p) (merge q q))
(Abs (gv1 ++ p) (merge q gv1)), (Abs (gv1 ++ p) (merge q p)), (Abs (gv1 ++ p) (merge gv1 ql)), (Abs (gv1 ++ p) (merge gv1 q)), (Abs (gv1 ++ p) (merge gv1 gv1)), (Abs (gv1 ++ p) (merge gv1 p)), (Abs (gv1 ++ p) (merge p ql)), (Abs (gv1 ++ p) (merge p q)), (Abs (gv1 ++ p) (merge p gv1)), (Abs (gv1 ++ p) (merge p p))
(Abs (gv1 ++ p) (insert k ql)), (Abs (gv1 ++ p) (insert k q)), (Abs (gv1 ++ p) (insert k gv1)), (Abs (gv1 ++ p) (insert k p)), (Abs (gv1 ++ p) (insert a ql)), (Abs (gv1 ++ p) (insert a q)), (Abs (gv1 ++ p) (insert a gv1)), (Abs (gv1 ++ p) (insert a p)), (Abs (gv1 ++ p) (maybe_swap ql)), (Abs (gv1 ++ p) (maybe_swap q))
(Abs (gv1 ++ p) (maybe_swap gv1)), (Abs (gv1 ++ p) (maybe_swap p)), (Abs (gv1 ++ p) (ql ++ ql)), (Abs (gv1 ++ p) (ql ++ q)), (Abs (gv1 ++ p) (ql ++ gv1)), (Abs (gv1 ++ p) (ql ++ p)), (Abs (gv1 ++ p) (q ++ ql)), (Abs (gv1 ++ p) (q ++ q)), (Abs (gv1 ++ p) (q ++ gv1)), (Abs (gv1 ++ p) (q ++ p))
(Abs (gv1 ++ p) (gv1 ++ ql)), (Abs (gv1 ++ p) (gv1 ++ q)), (Abs (gv1 ++ p) (gv1 ++ gv1)), (Abs (gv1 ++ p) (p ++ ql)), (Abs (gv1 ++ p) (p ++ q)), (Abs (gv1 ++ p) (p ++ gv1)), (Abs (gv1 ++ p) (p ++ p)), (Abs (gv1 ++ p) []), (Abs (p ++ ql) ql), (Abs (p ++ ql) q)
(Abs (p ++ ql) gv1), (Abs (p ++ ql) p), (Abs (p ++ ql) (k :: ql)), (Abs (p ++ ql) (k :: q)), (Abs (p ++ ql) (k :: gv1)), (Abs (p ++ ql) (k :: p)), (Abs (p ++ ql) (a :: ql)), (Abs (p ++ ql) (a :: q)), (Abs (p ++ ql) (a :: gv1)), (Abs (p ++ ql) (a :: p))
(Abs (p ++ ql) (merge ql ql)), (Abs (p ++ ql) (merge ql q)), (Abs (p ++ ql) (merge ql gv1)), (Abs (p ++ ql) (merge ql p)), (Abs (p ++ ql) (merge q ql)), (Abs (p ++ ql) (merge q q)), (Abs (p ++ ql) (merge q gv1)), (Abs (p ++ ql) (merge q p)), (Abs (p ++ ql) (merge gv1 ql)), (Abs (p ++ ql) (merge gv1 q))
(Abs (p ++ ql) (merge gv1 gv1)), (Abs (p ++ ql) (merge gv1 p)), (Abs (p ++ ql) (merge p ql)), (Abs (p ++ ql) (merge p q)), (Abs (p ++ ql) (merge p gv1)), (Abs (p ++ ql) (merge p p)), (Abs (p ++ ql) (insert k ql)), (Abs (p ++ ql) (insert k q)), (Abs (p ++ ql) (insert k gv1)), (Abs (p ++ ql) (insert k p))
(Abs (p ++ ql) (insert a ql)), (Abs (p ++ ql) (insert a q)), (Abs (p ++ ql) (insert a gv1)), (Abs (p ++ ql) (insert a p)), (Abs (p ++ ql) (maybe_swap ql)), (Abs (p ++ ql) (maybe_swap q)), (Abs (p ++ ql) (maybe_swap gv1)), (Abs (p ++ ql) (maybe_swap p)), (Abs (p ++ ql) (ql ++ ql)), (Abs (p ++ ql) (ql ++ q))
(Abs (p ++ ql) (ql ++ gv1)), (Abs (p ++ ql) (ql ++ p)), (Abs (p ++ ql) (q ++ ql)), (Abs (p ++ ql) (q ++ q)), (Abs (p ++ ql) (q ++ gv1)), (Abs (p ++ ql) (q ++ p)), (Abs (p ++ ql) (gv1 ++ ql)), (Abs (p ++ ql) (gv1 ++ q)), (Abs (p ++ ql) (gv1 ++ gv1)), (Abs (p ++ ql) (gv1 ++ p))
(Abs (p ++ ql) (p ++ q)), (Abs (p ++ ql) (p ++ gv1)), (Abs (p ++ ql) (p ++ p)), (Abs (p ++ ql) []), (Abs (p ++ q) ql), (Abs (p ++ q) q), (Abs (p ++ q) gv1), (Abs (p ++ q) p), (Abs (p ++ q) (k :: ql)), (Abs (p ++ q) (k :: q))
(Abs (p ++ q) (k :: gv1)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (a :: ql)), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: gv1)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (merge ql ql)), (Abs (p ++ q) (merge ql q)), (Abs (p ++ q) (merge ql gv1)), (Abs (p ++ q) (merge ql p))
(Abs (p ++ q) (merge q ql)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q gv1)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge gv1 ql)), (Abs (p ++ q) (merge gv1 q)), (Abs (p ++ q) (merge gv1 gv1)), (Abs (p ++ q) (merge gv1 p)), (Abs (p ++ q) (merge p ql)), (Abs (p ++ q) (merge p q))
(Abs (p ++ q) (merge p gv1)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (insert k ql)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k gv1)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert a ql)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a gv1)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (maybe_swap ql)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap gv1)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (ql ++ ql)), (Abs (p ++ q) (ql ++ q)), (Abs (p ++ q) (ql ++ gv1)), (Abs (p ++ q) (ql ++ p)), (Abs (p ++ q) (q ++ ql)), (Abs (p ++ q) (q ++ q))
(Abs (p ++ q) (q ++ gv1)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (gv1 ++ ql)), (Abs (p ++ q) (gv1 ++ q)), (Abs (p ++ q) (gv1 ++ gv1)), (Abs (p ++ q) (gv1 ++ p)), (Abs (p ++ q) (p ++ ql)), (Abs (p ++ q) (p ++ gv1)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) [])
(Abs (p ++ gv1) ql), (Abs (p ++ gv1) q), (Abs (p ++ gv1) gv1), (Abs (p ++ gv1) p), (Abs (p ++ gv1) (k :: ql)), (Abs (p ++ gv1) (k :: q)), (Abs (p ++ gv1) (k :: gv1)), (Abs (p ++ gv1) (k :: p)), (Abs (p ++ gv1) (a :: ql)), (Abs (p ++ gv1) (a :: q))
(Abs (p ++ gv1) (a :: gv1)), (Abs (p ++ gv1) (a :: p)), (Abs (p ++ gv1) (merge ql ql)), (Abs (p ++ gv1) (merge ql q)), (Abs (p ++ gv1) (merge ql gv1)), (Abs (p ++ gv1) (merge ql p)), (Abs (p ++ gv1) (merge q ql)), (Abs (p ++ gv1) (merge q q)), (Abs (p ++ gv1) (merge q gv1)), (Abs (p ++ gv1) (merge q p))
(Abs (p ++ gv1) (merge gv1 ql)), (Abs (p ++ gv1) (merge gv1 q)), (Abs (p ++ gv1) (merge gv1 gv1)), (Abs (p ++ gv1) (merge gv1 p)), (Abs (p ++ gv1) (merge p ql)), (Abs (p ++ gv1) (merge p q)), (Abs (p ++ gv1) (merge p gv1)), (Abs (p ++ gv1) (merge p p)), (Abs (p ++ gv1) (insert k ql)), (Abs (p ++ gv1) (insert k q))
(Abs (p ++ gv1) (insert k gv1)), (Abs (p ++ gv1) (insert k p)), (Abs (p ++ gv1) (insert a ql)), (Abs (p ++ gv1) (insert a q)), (Abs (p ++ gv1) (insert a gv1)), (Abs (p ++ gv1) (insert a p)), (Abs (p ++ gv1) (maybe_swap ql)), (Abs (p ++ gv1) (maybe_swap q)), (Abs (p ++ gv1) (maybe_swap gv1)), (Abs (p ++ gv1) (maybe_swap p))
(Abs (p ++ gv1) (ql ++ ql)), (Abs (p ++ gv1) (ql ++ q)), (Abs (p ++ gv1) (ql ++ gv1)), (Abs (p ++ gv1) (ql ++ p)), (Abs (p ++ gv1) (q ++ ql)), (Abs (p ++ gv1) (q ++ q)), (Abs (p ++ gv1) (q ++ gv1)), (Abs (p ++ gv1) (q ++ p)), (Abs (p ++ gv1) (gv1 ++ ql)), (Abs (p ++ gv1) (gv1 ++ q))
(Abs (p ++ gv1) (gv1 ++ gv1)), (Abs (p ++ gv1) (gv1 ++ p)), (Abs (p ++ gv1) (p ++ ql)), (Abs (p ++ gv1) (p ++ q)), (Abs (p ++ gv1) (p ++ p)), (Abs (p ++ gv1) []), (Abs (p ++ p) ql), (Abs (p ++ p) q), (Abs (p ++ p) gv1), (Abs (p ++ p) p)
(Abs (p ++ p) (k :: ql)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: gv1)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (a :: ql)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: gv1)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (merge ql ql)), (Abs (p ++ p) (merge ql q))
(Abs (p ++ p) (merge ql gv1)), (Abs (p ++ p) (merge ql p)), (Abs (p ++ p) (merge q ql)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q gv1)), (Abs (p ++ p) (merge q p)), (Abs (p ++ p) (merge gv1 ql)), (Abs (p ++ p) (merge gv1 q)), (Abs (p ++ p) (merge gv1 gv1)), (Abs (p ++ p) (merge gv1 p))
(Abs (p ++ p) (merge p ql)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p gv1)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (insert k ql)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k gv1)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert a ql)), (Abs (p ++ p) (insert a q))
(Abs (p ++ p) (insert a gv1)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (maybe_swap ql)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap gv1)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (ql ++ ql)), (Abs (p ++ p) (ql ++ q)), (Abs (p ++ p) (ql ++ gv1)), (Abs (p ++ p) (ql ++ p))
(Abs (p ++ p) (q ++ ql)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ gv1)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (gv1 ++ ql)), (Abs (p ++ p) (gv1 ++ q)), (Abs (p ++ p) (gv1 ++ gv1)), (Abs (p ++ p) (gv1 ++ p)), (Abs (p ++ p) (p ++ ql)), (Abs (p ++ p) (p ++ q))
(Abs (p ++ p) (p ++ gv1)), (Abs (p ++ p) []), (Abs [] ql), (Abs [] q), (Abs [] gv1), (Abs [] p), (Abs [] (k :: ql)), (Abs [] (k :: q)), (Abs [] (k :: gv1)), (Abs [] (k :: p))
(Abs [] (a :: ql)), (Abs [] (a :: q)), (Abs [] (a :: gv1)), (Abs [] (a :: p)), (Abs [] (merge ql ql)), (Abs [] (merge ql q)), (Abs [] (merge ql gv1)), (Abs [] (merge ql p)), (Abs [] (merge q ql)), (Abs [] (merge q q))
(Abs [] (merge q gv1)), (Abs [] (merge q p)), (Abs [] (merge gv1 ql)), (Abs [] (merge gv1 q)), (Abs [] (merge gv1 gv1)), (Abs [] (merge gv1 p)), (Abs [] (merge p ql)), (Abs [] (merge p q)), (Abs [] (merge p gv1)), (Abs [] (merge p p))
(Abs [] (insert k ql)), (Abs [] (insert k q)), (Abs [] (insert k gv1)), (Abs [] (insert k p)), (Abs [] (insert a ql)), (Abs [] (insert a q)), (Abs [] (insert a gv1)), (Abs [] (insert a p)), (Abs [] (maybe_swap ql)), (Abs [] (maybe_swap q))
(Abs [] (maybe_swap gv1)), (Abs [] (maybe_swap p)), (Abs [] (ql ++ ql)), (Abs [] (ql ++ q)), (Abs [] (ql ++ gv1)), (Abs [] (ql ++ p)), (Abs [] (q ++ ql)), (Abs [] (q ++ q)), (Abs [] (q ++ gv1)), (Abs [] (q ++ p))
(Abs [] (gv1 ++ ql)), (Abs [] (gv1 ++ q)), (Abs [] (gv1 ++ gv1)), (Abs [] (gv1 ++ p)), (Abs [] (p ++ ql)), (Abs [] (p ++ q)), (Abs [] (p ++ gv1)), (Abs [] (p ++ p)), (priq (k :: ql)), (priq (k :: q))
(priq (k :: gv1)), (priq (k :: p)), (priq (a :: ql)), (priq (a :: q)), (priq (a :: gv1)), (priq (a :: p)), (priq (merge ql ql)), (priq (merge ql q)), (priq (merge ql gv1)), (priq (merge ql p))
(priq (merge q ql)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge q p)), (priq (merge gv1 ql)), (priq (merge gv1 q)), (priq (merge gv1 gv1)), (priq (merge gv1 p)), (priq (merge p ql)), (priq (merge p q))
(priq (merge p gv1)), (priq (merge p p)), (priq (insert k ql)), (priq (insert k q)), (priq (insert k gv1)), (priq (insert k p)), (priq (insert a ql)), (priq (insert a q)), (priq (insert a gv1)), (priq (insert a p))
(priq (maybe_swap ql)), (priq (maybe_swap q)), (priq (maybe_swap gv1)), (priq (maybe_swap p)), (priq (ql ++ ql)), (priq (ql ++ q)), (priq (ql ++ gv1)), (priq (ql ++ p)), (priq (q ++ ql)), (priq (q ++ q))
(priq (q ++ gv1)), (priq (q ++ p)), (priq (gv1 ++ ql)), (priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priq (gv1 ++ p)), (priq (p ++ ql)), (priq (p ++ q)), (priq (p ++ gv1)), (priq (p ++ p))
(priq []), (Permutation ql (k :: ql)), (Permutation ql (k :: q)), (Permutation ql (k :: gv1)), (Permutation ql (k :: p)), (Permutation ql (a :: ql)), (Permutation ql (a :: q)), (Permutation ql (a :: gv1)), (Permutation ql (a :: p)), (Permutation ql (merge ql ql))
(Permutation ql (merge ql q)), (Permutation ql (merge ql gv1)), (Permutation ql (merge ql p)), (Permutation ql (merge q ql)), (Permutation ql (merge q q)), (Permutation ql (merge q gv1)), (Permutation ql (merge q p)), (Permutation ql (merge gv1 ql)), (Permutation ql (merge gv1 q)), (Permutation ql (merge gv1 gv1))
(Permutation ql (merge gv1 p)), (Permutation ql (merge p ql)), (Permutation ql (merge p q)), (Permutation ql (merge p gv1)), (Permutation ql (merge p p)), (Permutation ql (insert k ql)), (Permutation ql (insert k q)), (Permutation ql (insert k gv1)), (Permutation ql (insert k p)), (Permutation ql (insert a ql))
(Permutation ql (insert a q)), (Permutation ql (insert a gv1)), (Permutation ql (insert a p)), (Permutation ql (maybe_swap ql)), (Permutation ql (maybe_swap q)), (Permutation ql (maybe_swap gv1)), (Permutation ql (maybe_swap p)), (Permutation ql (ql ++ ql)), (Permutation ql (ql ++ q)), (Permutation ql (ql ++ gv1))
(Permutation ql (ql ++ p)), (Permutation ql (q ++ ql)), (Permutation ql (q ++ q)), (Permutation ql (q ++ gv1)), (Permutation ql (q ++ p)), (Permutation ql (gv1 ++ ql)), (Permutation ql (gv1 ++ q)), (Permutation ql (gv1 ++ gv1)), (Permutation ql (gv1 ++ p)), (Permutation ql (p ++ ql))
(Permutation ql (p ++ q)), (Permutation ql (p ++ gv1)), (Permutation ql (p ++ p)), (Permutation ql []), (Permutation q (k :: ql)), (Permutation q (k :: q)), (Permutation q (k :: gv1)), (Permutation q (k :: p)), (Permutation q (a :: ql)), (Permutation q (a :: q))
(Permutation q (a :: gv1)), (Permutation q (a :: p)), (Permutation q (merge ql ql)), (Permutation q (merge ql q)), (Permutation q (merge ql gv1)), (Permutation q (merge ql p)), (Permutation q (merge q ql)), (Permutation q (merge q q)), (Permutation q (merge q gv1)), (Permutation q (merge q p))
(Permutation q (merge gv1 ql)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (merge gv1 p)), (Permutation q (merge p ql)), (Permutation q (merge p q)), (Permutation q (merge p gv1)), (Permutation q (merge p p)), (Permutation q (insert k ql)), (Permutation q (insert k q))
(Permutation q (insert k gv1)), (Permutation q (insert k p)), (Permutation q (insert a ql)), (Permutation q (insert a q)), (Permutation q (insert a gv1)), (Permutation q (insert a p)), (Permutation q (maybe_swap ql)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap gv1)), (Permutation q (maybe_swap p))
(Permutation q (ql ++ ql)), (Permutation q (ql ++ q)), (Permutation q (ql ++ gv1)), (Permutation q (ql ++ p)), (Permutation q (q ++ ql)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1)), (Permutation q (q ++ p)), (Permutation q (gv1 ++ ql)), (Permutation q (gv1 ++ q))
(Permutation q (gv1 ++ gv1)), (Permutation q (gv1 ++ p)), (Permutation q (p ++ ql)), (Permutation q (p ++ q)), (Permutation q (p ++ gv1)), (Permutation q (p ++ p)), (Permutation q []), (Permutation gv1 (k :: ql)), (Permutation gv1 (k :: q)), (Permutation gv1 (k :: gv1))
(Permutation gv1 (k :: p)), (Permutation gv1 (a :: ql)), (Permutation gv1 (a :: q)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (a :: p)), (Permutation gv1 (merge ql ql)), (Permutation gv1 (merge ql q)), (Permutation gv1 (merge ql gv1)), (Permutation gv1 (merge ql p)), (Permutation gv1 (merge q ql))
(Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge q p)), (Permutation gv1 (merge gv1 ql)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (merge gv1 p)), (Permutation gv1 (merge p ql)), (Permutation gv1 (merge p q)), (Permutation gv1 (merge p gv1))
(Permutation gv1 (merge p p)), (Permutation gv1 (insert k ql)), (Permutation gv1 (insert k q)), (Permutation gv1 (insert k gv1)), (Permutation gv1 (insert k p)), (Permutation gv1 (insert a ql)), (Permutation gv1 (insert a q)), (Permutation gv1 (insert a gv1)), (Permutation gv1 (insert a p)), (Permutation gv1 (maybe_swap ql))
(Permutation gv1 (maybe_swap q)), (Permutation gv1 (maybe_swap gv1)), (Permutation gv1 (maybe_swap p)), (Permutation gv1 (ql ++ ql)), (Permutation gv1 (ql ++ q)), (Permutation gv1 (ql ++ gv1)), (Permutation gv1 (ql ++ p)), (Permutation gv1 (q ++ ql)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1))
(Permutation gv1 (q ++ p)), (Permutation gv1 (gv1 ++ ql)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ p)), (Permutation gv1 (p ++ ql)), (Permutation gv1 (p ++ q)), (Permutation gv1 (p ++ gv1)), (Permutation gv1 (p ++ p)), (Permutation gv1 [])
(Permutation p (k :: ql)), (Permutation p (k :: q)), (Permutation p (k :: gv1)), (Permutation p (k :: p)), (Permutation p (a :: ql)), (Permutation p (a :: q)), (Permutation p (a :: gv1)), (Permutation p (a :: p)), (Permutation p (merge ql ql)), (Permutation p (merge ql q))
(Permutation p (merge ql gv1)), (Permutation p (merge ql p)), (Permutation p (merge q ql)), (Permutation p (merge q q)), (Permutation p (merge q gv1)), (Permutation p (merge q p)), (Permutation p (merge gv1 ql)), (Permutation p (merge gv1 q)), (Permutation p (merge gv1 gv1)), (Permutation p (merge gv1 p))
(Permutation p (merge p ql)), (Permutation p (merge p q)), (Permutation p (merge p gv1)), (Permutation p (merge p p)), (Permutation p (insert k ql)), (Permutation p (insert k q)), (Permutation p (insert k gv1)), (Permutation p (insert k p)), (Permutation p (insert a ql)), (Permutation p (insert a q))
(Permutation p (insert a gv1)), (Permutation p (insert a p)), (Permutation p (maybe_swap ql)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap gv1)), (Permutation p (maybe_swap p)), (Permutation p (ql ++ ql)), (Permutation p (ql ++ q)), (Permutation p (ql ++ gv1)), (Permutation p (ql ++ p))
(Permutation p (q ++ ql)), (Permutation p (q ++ q)), (Permutation p (q ++ gv1)), (Permutation p (q ++ p)), (Permutation p (gv1 ++ ql)), (Permutation p (gv1 ++ q)), (Permutation p (gv1 ++ gv1)), (Permutation p (gv1 ++ p)), (Permutation p (p ++ ql)), (Permutation p (p ++ q))
(Permutation p (p ++ gv1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (k :: ql) ql), (Permutation (k :: ql) q), (Permutation (k :: ql) gv1), (Permutation (k :: ql) p), (Permutation (k :: ql) (k :: q)), (Permutation (k :: ql) (k :: gv1)), (Permutation (k :: ql) (k :: p))
(Permutation (k :: ql) (a :: ql)), (Permutation (k :: ql) (a :: q)), (Permutation (k :: ql) (a :: gv1)), (Permutation (k :: ql) (a :: p)), (Permutation (k :: ql) (merge ql ql)), (Permutation (k :: ql) (merge ql q)), (Permutation (k :: ql) (merge ql gv1)), (Permutation (k :: ql) (merge ql p)), (Permutation (k :: ql) (merge q ql)), (Permutation (k :: ql) (merge q q))
(Permutation (k :: ql) (merge q gv1)), (Permutation (k :: ql) (merge q p)), (Permutation (k :: ql) (merge gv1 ql)), (Permutation (k :: ql) (merge gv1 q)), (Permutation (k :: ql) (merge gv1 gv1)), (Permutation (k :: ql) (merge gv1 p)), (Permutation (k :: ql) (merge p ql)), (Permutation (k :: ql) (merge p q)), (Permutation (k :: ql) (merge p gv1)), (Permutation (k :: ql) (merge p p))
(Permutation (k :: ql) (insert k ql)), (Permutation (k :: ql) (insert k q)), (Permutation (k :: ql) (insert k gv1)), (Permutation (k :: ql) (insert k p)), (Permutation (k :: ql) (insert a ql)), (Permutation (k :: ql) (insert a q)), (Permutation (k :: ql) (insert a gv1)), (Permutation (k :: ql) (insert a p)), (Permutation (k :: ql) (maybe_swap ql)), (Permutation (k :: ql) (maybe_swap q))
(Permutation (k :: ql) (maybe_swap gv1)), (Permutation (k :: ql) (maybe_swap p)), (Permutation (k :: ql) (ql ++ ql)), (Permutation (k :: ql) (ql ++ q)), (Permutation (k :: ql) (ql ++ gv1)), (Permutation (k :: ql) (ql ++ p)), (Permutation (k :: ql) (q ++ ql)), (Permutation (k :: ql) (q ++ q)), (Permutation (k :: ql) (q ++ gv1)), (Permutation (k :: ql) (q ++ p))
(Permutation (k :: ql) (gv1 ++ ql)), (Permutation (k :: ql) (gv1 ++ q)), (Permutation (k :: ql) (gv1 ++ gv1)), (Permutation (k :: ql) (gv1 ++ p)), (Permutation (k :: ql) (p ++ ql)), (Permutation (k :: ql) (p ++ q)), (Permutation (k :: ql) (p ++ gv1)), (Permutation (k :: ql) (p ++ p)), (Permutation (k :: ql) []), (Permutation (k :: q) ql)
(Permutation (k :: q) q), (Permutation (k :: q) gv1), (Permutation (k :: q) p), (Permutation (k :: q) (k :: ql)), (Permutation (k :: q) (k :: gv1)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (a :: ql)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: gv1)), (Permutation (k :: q) (a :: p))
(Permutation (k :: q) (merge ql ql)), (Permutation (k :: q) (merge ql q)), (Permutation (k :: q) (merge ql gv1)), (Permutation (k :: q) (merge ql p)), (Permutation (k :: q) (merge q ql)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q gv1)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge gv1 ql)), (Permutation (k :: q) (merge gv1 q))
(Permutation (k :: q) (merge gv1 gv1)), (Permutation (k :: q) (merge gv1 p)), (Permutation (k :: q) (merge p ql)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p gv1)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (insert k ql)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k gv1)), (Permutation (k :: q) (insert k p))
(Permutation (k :: q) (insert a ql)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a gv1)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (maybe_swap ql)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap gv1)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (ql ++ ql)), (Permutation (k :: q) (ql ++ q))
(Permutation (k :: q) (ql ++ gv1)), (Permutation (k :: q) (ql ++ p)), (Permutation (k :: q) (q ++ ql)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ gv1)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (gv1 ++ ql)), (Permutation (k :: q) (gv1 ++ q)), (Permutation (k :: q) (gv1 ++ gv1)), (Permutation (k :: q) (gv1 ++ p))
(Permutation (k :: q) (p ++ ql)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ gv1)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) []), (Permutation (k :: gv1) ql), (Permutation (k :: gv1) q), (Permutation (k :: gv1) gv1), (Permutation (k :: gv1) p), (Permutation (k :: gv1) (k :: ql))
(Permutation (k :: gv1) (k :: q)), (Permutation (k :: gv1) (k :: p)), (Permutation (k :: gv1) (a :: ql)), (Permutation (k :: gv1) (a :: q)), (Permutation (k :: gv1) (a :: gv1)), (Permutation (k :: gv1) (a :: p)), (Permutation (k :: gv1) (merge ql ql)), (Permutation (k :: gv1) (merge ql q)), (Permutation (k :: gv1) (merge ql gv1)), (Permutation (k :: gv1) (merge ql p))
(Permutation (k :: gv1) (merge q ql)), (Permutation (k :: gv1) (merge q q)), (Permutation (k :: gv1) (merge q gv1)), (Permutation (k :: gv1) (merge q p)), (Permutation (k :: gv1) (merge gv1 ql)), (Permutation (k :: gv1) (merge gv1 q)), (Permutation (k :: gv1) (merge gv1 gv1)), (Permutation (k :: gv1) (merge gv1 p)), (Permutation (k :: gv1) (merge p ql)), (Permutation (k :: gv1) (merge p q))
(Permutation (k :: gv1) (merge p gv1)), (Permutation (k :: gv1) (merge p p)), (Permutation (k :: gv1) (insert k ql)), (Permutation (k :: gv1) (insert k q)), (Permutation (k :: gv1) (insert k gv1)), (Permutation (k :: gv1) (insert k p)), (Permutation (k :: gv1) (insert a ql)), (Permutation (k :: gv1) (insert a q)), (Permutation (k :: gv1) (insert a gv1)), (Permutation (k :: gv1) (insert a p))
(Permutation (k :: gv1) (maybe_swap ql)), (Permutation (k :: gv1) (maybe_swap q)), (Permutation (k :: gv1) (maybe_swap gv1)), (Permutation (k :: gv1) (maybe_swap p)), (Permutation (k :: gv1) (ql ++ ql)), (Permutation (k :: gv1) (ql ++ q)), (Permutation (k :: gv1) (ql ++ gv1)), (Permutation (k :: gv1) (ql ++ p)), (Permutation (k :: gv1) (q ++ ql)), (Permutation (k :: gv1) (q ++ q))
(Permutation (k :: gv1) (q ++ gv1)), (Permutation (k :: gv1) (q ++ p)), (Permutation (k :: gv1) (gv1 ++ ql)), (Permutation (k :: gv1) (gv1 ++ q)), (Permutation (k :: gv1) (gv1 ++ gv1)), (Permutation (k :: gv1) (gv1 ++ p)), (Permutation (k :: gv1) (p ++ ql)), (Permutation (k :: gv1) (p ++ q)), (Permutation (k :: gv1) (p ++ gv1)), (Permutation (k :: gv1) (p ++ p))
(Permutation (k :: gv1) []), (Permutation (k :: p) ql), (Permutation (k :: p) q), (Permutation (k :: p) gv1), (Permutation (k :: p) p), (Permutation (k :: p) (k :: ql)), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: gv1)), (Permutation (k :: p) (a :: ql)), (Permutation (k :: p) (a :: q))
(Permutation (k :: p) (a :: gv1)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (merge ql ql)), (Permutation (k :: p) (merge ql q)), (Permutation (k :: p) (merge ql gv1)), (Permutation (k :: p) (merge ql p)), (Permutation (k :: p) (merge q ql)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q gv1)), (Permutation (k :: p) (merge q p))
(Permutation (k :: p) (merge gv1 ql)), (Permutation (k :: p) (merge gv1 q)), (Permutation (k :: p) (merge gv1 gv1)), (Permutation (k :: p) (merge gv1 p)), (Permutation (k :: p) (merge p ql)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p gv1)), (Permutation (k :: p) (merge p p)), (Permutation (k :: p) (insert k ql)), (Permutation (k :: p) (insert k q))
(Permutation (k :: p) (insert k gv1)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert a ql)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a gv1)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (maybe_swap ql)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap gv1)), (Permutation (k :: p) (maybe_swap p))
(Permutation (k :: p) (ql ++ ql)), (Permutation (k :: p) (ql ++ q)), (Permutation (k :: p) (ql ++ gv1)), (Permutation (k :: p) (ql ++ p)), (Permutation (k :: p) (q ++ ql)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ gv1)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (gv1 ++ ql)), (Permutation (k :: p) (gv1 ++ q))
(Permutation (k :: p) (gv1 ++ gv1)), (Permutation (k :: p) (gv1 ++ p)), (Permutation (k :: p) (p ++ ql)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ gv1)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) []), (Permutation (a :: ql) ql), (Permutation (a :: ql) q), (Permutation (a :: ql) gv1)
(Permutation (a :: ql) p), (Permutation (a :: ql) (k :: ql)), (Permutation (a :: ql) (k :: q)), (Permutation (a :: ql) (k :: gv1)), (Permutation (a :: ql) (k :: p)), (Permutation (a :: ql) (a :: q)), (Permutation (a :: ql) (a :: gv1)), (Permutation (a :: ql) (a :: p)), (Permutation (a :: ql) (merge ql ql)), (Permutation (a :: ql) (merge ql q))
(Permutation (a :: ql) (merge ql gv1)), (Permutation (a :: ql) (merge ql p)), (Permutation (a :: ql) (merge q ql)), (Permutation (a :: ql) (merge q q)), (Permutation (a :: ql) (merge q gv1)), (Permutation (a :: ql) (merge q p)), (Permutation (a :: ql) (merge gv1 ql)), (Permutation (a :: ql) (merge gv1 q)), (Permutation (a :: ql) (merge gv1 gv1)), (Permutation (a :: ql) (merge gv1 p))
(Permutation (a :: ql) (merge p ql)), (Permutation (a :: ql) (merge p q)), (Permutation (a :: ql) (merge p gv1)), (Permutation (a :: ql) (merge p p)), (Permutation (a :: ql) (insert k ql)), (Permutation (a :: ql) (insert k q)), (Permutation (a :: ql) (insert k gv1)), (Permutation (a :: ql) (insert k p)), (Permutation (a :: ql) (insert a ql)), (Permutation (a :: ql) (insert a q))
(Permutation (a :: ql) (insert a gv1)), (Permutation (a :: ql) (insert a p)), (Permutation (a :: ql) (maybe_swap ql)), (Permutation (a :: ql) (maybe_swap q)), (Permutation (a :: ql) (maybe_swap gv1)), (Permutation (a :: ql) (maybe_swap p)), (Permutation (a :: ql) (ql ++ ql)), (Permutation (a :: ql) (ql ++ q)), (Permutation (a :: ql) (ql ++ gv1)), (Permutation (a :: ql) (ql ++ p))
(Permutation (a :: ql) (q ++ ql)), (Permutation (a :: ql) (q ++ q)), (Permutation (a :: ql) (q ++ gv1)), (Permutation (a :: ql) (q ++ p)), (Permutation (a :: ql) (gv1 ++ ql)), (Permutation (a :: ql) (gv1 ++ q)), (Permutation (a :: ql) (gv1 ++ gv1)), (Permutation (a :: ql) (gv1 ++ p)), (Permutation (a :: ql) (p ++ ql)), (Permutation (a :: ql) (p ++ q))
(Permutation (a :: ql) (p ++ gv1)), (Permutation (a :: ql) (p ++ p)), (Permutation (a :: ql) []), (Permutation (a :: q) ql), (Permutation (a :: q) q), (Permutation (a :: q) gv1), (Permutation (a :: q) p), (Permutation (a :: q) (k :: ql)), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: gv1))
(Permutation (a :: q) (k :: p)), (Permutation (a :: q) (a :: ql)), (Permutation (a :: q) (a :: gv1)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (merge ql ql)), (Permutation (a :: q) (merge ql q)), (Permutation (a :: q) (merge ql gv1)), (Permutation (a :: q) (merge ql p)), (Permutation (a :: q) (merge q ql)), (Permutation (a :: q) (merge q q))
(Permutation (a :: q) (merge q gv1)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge gv1 ql)), (Permutation (a :: q) (merge gv1 q)), (Permutation (a :: q) (merge gv1 gv1)), (Permutation (a :: q) (merge gv1 p)), (Permutation (a :: q) (merge p ql)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p gv1)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (insert k ql)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k gv1)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert a ql)), (Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a gv1)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (maybe_swap ql)), (Permutation (a :: q) (maybe_swap q))
(Permutation (a :: q) (maybe_swap gv1)), (Permutation (a :: q) (maybe_swap p)), (Permutation (a :: q) (ql ++ ql)), (Permutation (a :: q) (ql ++ q)), (Permutation (a :: q) (ql ++ gv1)), (Permutation (a :: q) (ql ++ p)), (Permutation (a :: q) (q ++ ql)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ gv1)), (Permutation (a :: q) (q ++ p))
(Permutation (a :: q) (gv1 ++ ql)), (Permutation (a :: q) (gv1 ++ q)), (Permutation (a :: q) (gv1 ++ gv1)), (Permutation (a :: q) (gv1 ++ p)), (Permutation (a :: q) (p ++ ql)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ gv1)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) []), (Permutation (a :: gv1) ql)
(Permutation (a :: gv1) q), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) p), (Permutation (a :: gv1) (k :: ql)), (Permutation (a :: gv1) (k :: q)), (Permutation (a :: gv1) (k :: gv1)), (Permutation (a :: gv1) (k :: p)), (Permutation (a :: gv1) (a :: ql)), (Permutation (a :: gv1) (a :: q)), (Permutation (a :: gv1) (a :: p))
(Permutation (a :: gv1) (merge ql ql)), (Permutation (a :: gv1) (merge ql q)), (Permutation (a :: gv1) (merge ql gv1)), (Permutation (a :: gv1) (merge ql p)), (Permutation (a :: gv1) (merge q ql)), (Permutation (a :: gv1) (merge q q)), (Permutation (a :: gv1) (merge q gv1)), (Permutation (a :: gv1) (merge q p)), (Permutation (a :: gv1) (merge gv1 ql)), (Permutation (a :: gv1) (merge gv1 q))
(Permutation (a :: gv1) (merge gv1 gv1)), (Permutation (a :: gv1) (merge gv1 p)), (Permutation (a :: gv1) (merge p ql)), (Permutation (a :: gv1) (merge p q)), (Permutation (a :: gv1) (merge p gv1)), (Permutation (a :: gv1) (merge p p)), (Permutation (a :: gv1) (insert k ql)), (Permutation (a :: gv1) (insert k q)), (Permutation (a :: gv1) (insert k gv1)), (Permutation (a :: gv1) (insert k p))
(Permutation (a :: gv1) (insert a ql)), (Permutation (a :: gv1) (insert a q)), (Permutation (a :: gv1) (insert a gv1)), (Permutation (a :: gv1) (insert a p)), (Permutation (a :: gv1) (maybe_swap ql)), (Permutation (a :: gv1) (maybe_swap q)), (Permutation (a :: gv1) (maybe_swap gv1)), (Permutation (a :: gv1) (maybe_swap p)), (Permutation (a :: gv1) (ql ++ ql)), (Permutation (a :: gv1) (ql ++ q))
(Permutation (a :: gv1) (ql ++ gv1)), (Permutation (a :: gv1) (ql ++ p)), (Permutation (a :: gv1) (q ++ ql)), (Permutation (a :: gv1) (q ++ q)), (Permutation (a :: gv1) (q ++ gv1)), (Permutation (a :: gv1) (q ++ p)), (Permutation (a :: gv1) (gv1 ++ ql)), (Permutation (a :: gv1) (gv1 ++ q)), (Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ p))
(Permutation (a :: gv1) (p ++ ql)), (Permutation (a :: gv1) (p ++ q)), (Permutation (a :: gv1) (p ++ gv1)), (Permutation (a :: gv1) (p ++ p)), (Permutation (a :: gv1) []), (Permutation (a :: p) ql), (Permutation (a :: p) q), (Permutation (a :: p) gv1), (Permutation (a :: p) p), (Permutation (a :: p) (k :: ql))
(Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: gv1)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (a :: ql)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: gv1)), (Permutation (a :: p) (merge ql ql)), (Permutation (a :: p) (merge ql q)), (Permutation (a :: p) (merge ql gv1)), (Permutation (a :: p) (merge ql p))
(Permutation (a :: p) (merge q ql)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q gv1)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge gv1 ql)), (Permutation (a :: p) (merge gv1 q)), (Permutation (a :: p) (merge gv1 gv1)), (Permutation (a :: p) (merge gv1 p)), (Permutation (a :: p) (merge p ql)), (Permutation (a :: p) (merge p q))
(Permutation (a :: p) (merge p gv1)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (insert k ql)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k gv1)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert a ql)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a gv1)), (Permutation (a :: p) (insert a p))
(Permutation (a :: p) (maybe_swap ql)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap gv1)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (ql ++ ql)), (Permutation (a :: p) (ql ++ q)), (Permutation (a :: p) (ql ++ gv1)), (Permutation (a :: p) (ql ++ p)), (Permutation (a :: p) (q ++ ql)), (Permutation (a :: p) (q ++ q))
(Permutation (a :: p) (q ++ gv1)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (gv1 ++ ql)), (Permutation (a :: p) (gv1 ++ q)), (Permutation (a :: p) (gv1 ++ gv1)), (Permutation (a :: p) (gv1 ++ p)), (Permutation (a :: p) (p ++ ql)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ gv1)), (Permutation (a :: p) (p ++ p))
(Permutation (a :: p) []), (Permutation (merge ql ql) ql), (Permutation (merge ql ql) q), (Permutation (merge ql ql) gv1), (Permutation (merge ql ql) p), (Permutation (merge ql ql) (k :: ql)), (Permutation (merge ql ql) (k :: q)), (Permutation (merge ql ql) (k :: gv1)), (Permutation (merge ql ql) (k :: p)), (Permutation (merge ql ql) (a :: ql))
(Permutation (merge ql ql) (a :: q)), (Permutation (merge ql ql) (a :: gv1)), (Permutation (merge ql ql) (a :: p)), (Permutation (merge ql ql) (merge ql q)), (Permutation (merge ql ql) (merge ql gv1)), (Permutation (merge ql ql) (merge ql p)), (Permutation (merge ql ql) (merge q ql)), (Permutation (merge ql ql) (merge q q)), (Permutation (merge ql ql) (merge q gv1)), (Permutation (merge ql ql) (merge q p))
(Permutation (merge ql ql) (merge gv1 ql)), (Permutation (merge ql ql) (merge gv1 q)), (Permutation (merge ql ql) (merge gv1 gv1)), (Permutation (merge ql ql) (merge gv1 p)), (Permutation (merge ql ql) (merge p ql)), (Permutation (merge ql ql) (merge p q)), (Permutation (merge ql ql) (merge p gv1)), (Permutation (merge ql ql) (merge p p)), (Permutation (merge ql ql) (insert k ql)), (Permutation (merge ql ql) (insert k q))
(Permutation (merge ql ql) (insert k gv1)), (Permutation (merge ql ql) (insert k p)), (Permutation (merge ql ql) (insert a ql)), (Permutation (merge ql ql) (insert a q)), (Permutation (merge ql ql) (insert a gv1)), (Permutation (merge ql ql) (insert a p)), (Permutation (merge ql ql) (maybe_swap ql)), (Permutation (merge ql ql) (maybe_swap q)), (Permutation (merge ql ql) (maybe_swap gv1)), (Permutation (merge ql ql) (maybe_swap p))
(Permutation (merge ql ql) (ql ++ ql)), (Permutation (merge ql ql) (ql ++ q)), (Permutation (merge ql ql) (ql ++ gv1)), (Permutation (merge ql ql) (ql ++ p)), (Permutation (merge ql ql) (q ++ ql)), (Permutation (merge ql ql) (q ++ q)), (Permutation (merge ql ql) (q ++ gv1)), (Permutation (merge ql ql) (q ++ p)), (Permutation (merge ql ql) (gv1 ++ ql)), (Permutation (merge ql ql) (gv1 ++ q))
(Permutation (merge ql ql) (gv1 ++ gv1)), (Permutation (merge ql ql) (gv1 ++ p)), (Permutation (merge ql ql) (p ++ ql)), (Permutation (merge ql ql) (p ++ q)), (Permutation (merge ql ql) (p ++ gv1)), (Permutation (merge ql ql) (p ++ p)), (Permutation (merge ql ql) []), (Permutation (merge ql q) ql), (Permutation (merge ql q) q), (Permutation (merge ql q) gv1)
(Permutation (merge ql q) p), (Permutation (merge ql q) (k :: ql)), (Permutation (merge ql q) (k :: q)), (Permutation (merge ql q) (k :: gv1)), (Permutation (merge ql q) (k :: p)), (Permutation (merge ql q) (a :: ql)), (Permutation (merge ql q) (a :: q)), (Permutation (merge ql q) (a :: gv1)), (Permutation (merge ql q) (a :: p)), (Permutation (merge ql q) (merge ql ql))
(Permutation (merge ql q) (merge ql gv1)), (Permutation (merge ql q) (merge ql p)), (Permutation (merge ql q) (merge q ql)), (Permutation (merge ql q) (merge q q)), (Permutation (merge ql q) (merge q gv1)), (Permutation (merge ql q) (merge q p)), (Permutation (merge ql q) (merge gv1 ql)), (Permutation (merge ql q) (merge gv1 q)), (Permutation (merge ql q) (merge gv1 gv1)), (Permutation (merge ql q) (merge gv1 p))
(Permutation (merge ql q) (merge p ql)), (Permutation (merge ql q) (merge p q)), (Permutation (merge ql q) (merge p gv1)), (Permutation (merge ql q) (merge p p)), (Permutation (merge ql q) (insert k ql)), (Permutation (merge ql q) (insert k q)), (Permutation (merge ql q) (insert k gv1)), (Permutation (merge ql q) (insert k p)), (Permutation (merge ql q) (insert a ql)), (Permutation (merge ql q) (insert a q))
(Permutation (merge ql q) (insert a gv1)), (Permutation (merge ql q) (insert a p)), (Permutation (merge ql q) (maybe_swap ql)), (Permutation (merge ql q) (maybe_swap q)), (Permutation (merge ql q) (maybe_swap gv1)), (Permutation (merge ql q) (maybe_swap p)), (Permutation (merge ql q) (ql ++ ql)), (Permutation (merge ql q) (ql ++ q)), (Permutation (merge ql q) (ql ++ gv1)), (Permutation (merge ql q) (ql ++ p))
(Permutation (merge ql q) (q ++ ql)), (Permutation (merge ql q) (q ++ q)), (Permutation (merge ql q) (q ++ gv1)), (Permutation (merge ql q) (q ++ p)), (Permutation (merge ql q) (gv1 ++ ql)), (Permutation (merge ql q) (gv1 ++ q)), (Permutation (merge ql q) (gv1 ++ gv1)), (Permutation (merge ql q) (gv1 ++ p)), (Permutation (merge ql q) (p ++ ql)), (Permutation (merge ql q) (p ++ q))
(Permutation (merge ql q) (p ++ gv1)), (Permutation (merge ql q) (p ++ p)), (Permutation (merge ql q) []), (Permutation (merge ql gv1) ql), (Permutation (merge ql gv1) q), (Permutation (merge ql gv1) gv1), (Permutation (merge ql gv1) p), (Permutation (merge ql gv1) (k :: ql)), (Permutation (merge ql gv1) (k :: q)), (Permutation (merge ql gv1) (k :: gv1))
(Permutation (merge ql gv1) (k :: p)), (Permutation (merge ql gv1) (a :: ql)), (Permutation (merge ql gv1) (a :: q)), (Permutation (merge ql gv1) (a :: gv1)), (Permutation (merge ql gv1) (a :: p)), (Permutation (merge ql gv1) (merge ql ql)), (Permutation (merge ql gv1) (merge ql q)), (Permutation (merge ql gv1) (merge ql p)), (Permutation (merge ql gv1) (merge q ql)), (Permutation (merge ql gv1) (merge q q))
(Permutation (merge ql gv1) (merge q gv1)), (Permutation (merge ql gv1) (merge q p)), (Permutation (merge ql gv1) (merge gv1 ql)), (Permutation (merge ql gv1) (merge gv1 q)), (Permutation (merge ql gv1) (merge gv1 gv1)), (Permutation (merge ql gv1) (merge gv1 p)), (Permutation (merge ql gv1) (merge p ql)), (Permutation (merge ql gv1) (merge p q)), (Permutation (merge ql gv1) (merge p gv1)), (Permutation (merge ql gv1) (merge p p))
(Permutation (merge ql gv1) (insert k ql)), (Permutation (merge ql gv1) (insert k q)), (Permutation (merge ql gv1) (insert k gv1)), (Permutation (merge ql gv1) (insert k p)), (Permutation (merge ql gv1) (insert a ql)), (Permutation (merge ql gv1) (insert a q)), (Permutation (merge ql gv1) (insert a gv1)), (Permutation (merge ql gv1) (insert a p)), (Permutation (merge ql gv1) (maybe_swap ql)), (Permutation (merge ql gv1) (maybe_swap q))
(Permutation (merge ql gv1) (maybe_swap gv1)), (Permutation (merge ql gv1) (maybe_swap p)), (Permutation (merge ql gv1) (ql ++ ql)), (Permutation (merge ql gv1) (ql ++ q)), (Permutation (merge ql gv1) (ql ++ gv1)), (Permutation (merge ql gv1) (ql ++ p)), (Permutation (merge ql gv1) (q ++ ql)), (Permutation (merge ql gv1) (q ++ q)), (Permutation (merge ql gv1) (q ++ gv1)), (Permutation (merge ql gv1) (q ++ p))
(Permutation (merge ql gv1) (gv1 ++ ql)), (Permutation (merge ql gv1) (gv1 ++ q)), (Permutation (merge ql gv1) (gv1 ++ gv1)), (Permutation (merge ql gv1) (gv1 ++ p)), (Permutation (merge ql gv1) (p ++ ql)), (Permutation (merge ql gv1) (p ++ q)), (Permutation (merge ql gv1) (p ++ gv1)), (Permutation (merge ql gv1) (p ++ p)), (Permutation (merge ql gv1) []), (Permutation (merge ql p) ql)
(Permutation (merge ql p) q), (Permutation (merge ql p) gv1), (Permutation (merge ql p) p), (Permutation (merge ql p) (k :: ql)), (Permutation (merge ql p) (k :: q)), (Permutation (merge ql p) (k :: gv1)), (Permutation (merge ql p) (k :: p)), (Permutation (merge ql p) (a :: ql)), (Permutation (merge ql p) (a :: q)), (Permutation (merge ql p) (a :: gv1))
(Permutation (merge ql p) (a :: p)), (Permutation (merge ql p) (merge ql ql)), (Permutation (merge ql p) (merge ql q)), (Permutation (merge ql p) (merge ql gv1)), (Permutation (merge ql p) (merge q ql)), (Permutation (merge ql p) (merge q q)), (Permutation (merge ql p) (merge q gv1)), (Permutation (merge ql p) (merge q p)), (Permutation (merge ql p) (merge gv1 ql)), (Permutation (merge ql p) (merge gv1 q))
(Permutation (merge ql p) (merge gv1 gv1)), (Permutation (merge ql p) (merge gv1 p)), (Permutation (merge ql p) (merge p ql)), (Permutation (merge ql p) (merge p q)), (Permutation (merge ql p) (merge p gv1)), (Permutation (merge ql p) (merge p p)), (Permutation (merge ql p) (insert k ql)), (Permutation (merge ql p) (insert k q)), (Permutation (merge ql p) (insert k gv1)), (Permutation (merge ql p) (insert k p))
(Permutation (merge ql p) (insert a ql)), (Permutation (merge ql p) (insert a q)), (Permutation (merge ql p) (insert a gv1)), (Permutation (merge ql p) (insert a p)), (Permutation (merge ql p) (maybe_swap ql)), (Permutation (merge ql p) (maybe_swap q)), (Permutation (merge ql p) (maybe_swap gv1)), (Permutation (merge ql p) (maybe_swap p)), (Permutation (merge ql p) (ql ++ ql)), (Permutation (merge ql p) (ql ++ q))
(Permutation (merge ql p) (ql ++ gv1)), (Permutation (merge ql p) (ql ++ p)), (Permutation (merge ql p) (q ++ ql)), (Permutation (merge ql p) (q ++ q)), (Permutation (merge ql p) (q ++ gv1)), (Permutation (merge ql p) (q ++ p)), (Permutation (merge ql p) (gv1 ++ ql)), (Permutation (merge ql p) (gv1 ++ q)), (Permutation (merge ql p) (gv1 ++ gv1)), (Permutation (merge ql p) (gv1 ++ p))
(Permutation (merge ql p) (p ++ ql)), (Permutation (merge ql p) (p ++ q)), (Permutation (merge ql p) (p ++ gv1)), (Permutation (merge ql p) (p ++ p)), (Permutation (merge ql p) []), (Permutation (merge q ql) ql), (Permutation (merge q ql) q), (Permutation (merge q ql) gv1), (Permutation (merge q ql) p), (Permutation (merge q ql) (k :: ql))
(Permutation (merge q ql) (k :: q)), (Permutation (merge q ql) (k :: gv1)), (Permutation (merge q ql) (k :: p)), (Permutation (merge q ql) (a :: ql)), (Permutation (merge q ql) (a :: q)), (Permutation (merge q ql) (a :: gv1)), (Permutation (merge q ql) (a :: p)), (Permutation (merge q ql) (merge ql ql)), (Permutation (merge q ql) (merge ql q)), (Permutation (merge q ql) (merge ql gv1))
(Permutation (merge q ql) (merge ql p)), (Permutation (merge q ql) (merge q q)), (Permutation (merge q ql) (merge q gv1)), (Permutation (merge q ql) (merge q p)), (Permutation (merge q ql) (merge gv1 ql)), (Permutation (merge q ql) (merge gv1 q)), (Permutation (merge q ql) (merge gv1 gv1)), (Permutation (merge q ql) (merge gv1 p)), (Permutation (merge q ql) (merge p ql)), (Permutation (merge q ql) (merge p q))
(Permutation (merge q ql) (merge p gv1)), (Permutation (merge q ql) (merge p p)), (Permutation (merge q ql) (insert k ql)), (Permutation (merge q ql) (insert k q)), (Permutation (merge q ql) (insert k gv1)), (Permutation (merge q ql) (insert k p)), (Permutation (merge q ql) (insert a ql)), (Permutation (merge q ql) (insert a q)), (Permutation (merge q ql) (insert a gv1)), (Permutation (merge q ql) (insert a p))
(Permutation (merge q ql) (maybe_swap ql)), (Permutation (merge q ql) (maybe_swap q)), (Permutation (merge q ql) (maybe_swap gv1)), (Permutation (merge q ql) (maybe_swap p)), (Permutation (merge q ql) (ql ++ ql)), (Permutation (merge q ql) (ql ++ q)), (Permutation (merge q ql) (ql ++ gv1)), (Permutation (merge q ql) (ql ++ p)), (Permutation (merge q ql) (q ++ ql)), (Permutation (merge q ql) (q ++ q))
(Permutation (merge q ql) (q ++ gv1)), (Permutation (merge q ql) (q ++ p)), (Permutation (merge q ql) (gv1 ++ ql)), (Permutation (merge q ql) (gv1 ++ q)), (Permutation (merge q ql) (gv1 ++ gv1)), (Permutation (merge q ql) (gv1 ++ p)), (Permutation (merge q ql) (p ++ ql)), (Permutation (merge q ql) (p ++ q)), (Permutation (merge q ql) (p ++ gv1)), (Permutation (merge q ql) (p ++ p))
(Permutation (merge q ql) []), (Permutation (merge q q) ql), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) p), (Permutation (merge q q) (k :: ql)), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: gv1)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (a :: ql))
(Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: gv1)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (merge ql ql)), (Permutation (merge q q) (merge ql q)), (Permutation (merge q q) (merge ql gv1)), (Permutation (merge q q) (merge ql p)), (Permutation (merge q q) (merge q ql)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge q p))
(Permutation (merge q q) (merge gv1 ql)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (merge gv1 p)), (Permutation (merge q q) (merge p ql)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p gv1)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (insert k ql)), (Permutation (merge q q) (insert k q))
(Permutation (merge q q) (insert k gv1)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert a ql)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a gv1)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (maybe_swap ql)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap gv1)), (Permutation (merge q q) (maybe_swap p))
(Permutation (merge q q) (ql ++ ql)), (Permutation (merge q q) (ql ++ q)), (Permutation (merge q q) (ql ++ gv1)), (Permutation (merge q q) (ql ++ p)), (Permutation (merge q q) (q ++ ql)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (gv1 ++ ql)), (Permutation (merge q q) (gv1 ++ q))
(Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) (gv1 ++ p)), (Permutation (merge q q) (p ++ ql)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ gv1)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) []), (Permutation (merge q gv1) ql), (Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1)
(Permutation (merge q gv1) p), (Permutation (merge q gv1) (k :: ql)), (Permutation (merge q gv1) (k :: q)), (Permutation (merge q gv1) (k :: gv1)), (Permutation (merge q gv1) (k :: p)), (Permutation (merge q gv1) (a :: ql)), (Permutation (merge q gv1) (a :: q)), (Permutation (merge q gv1) (a :: gv1)), (Permutation (merge q gv1) (a :: p)), (Permutation (merge q gv1) (merge ql ql))
(Permutation (merge q gv1) (merge ql q)), (Permutation (merge q gv1) (merge ql gv1)), (Permutation (merge q gv1) (merge ql p)), (Permutation (merge q gv1) (merge q ql)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge q p)), (Permutation (merge q gv1) (merge gv1 ql)), (Permutation (merge q gv1) (merge gv1 q)), (Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (merge gv1 p))
(Permutation (merge q gv1) (merge p ql)), (Permutation (merge q gv1) (merge p q)), (Permutation (merge q gv1) (merge p gv1)), (Permutation (merge q gv1) (merge p p)), (Permutation (merge q gv1) (insert k ql)), (Permutation (merge q gv1) (insert k q)), (Permutation (merge q gv1) (insert k gv1)), (Permutation (merge q gv1) (insert k p)), (Permutation (merge q gv1) (insert a ql)), (Permutation (merge q gv1) (insert a q))
(Permutation (merge q gv1) (insert a gv1)), (Permutation (merge q gv1) (insert a p)), (Permutation (merge q gv1) (maybe_swap ql)), (Permutation (merge q gv1) (maybe_swap q)), (Permutation (merge q gv1) (maybe_swap gv1)), (Permutation (merge q gv1) (maybe_swap p)), (Permutation (merge q gv1) (ql ++ ql)), (Permutation (merge q gv1) (ql ++ q)), (Permutation (merge q gv1) (ql ++ gv1)), (Permutation (merge q gv1) (ql ++ p))
(Permutation (merge q gv1) (q ++ ql)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (q ++ p)), (Permutation (merge q gv1) (gv1 ++ ql)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) (gv1 ++ p)), (Permutation (merge q gv1) (p ++ ql)), (Permutation (merge q gv1) (p ++ q))
(Permutation (merge q gv1) (p ++ gv1)), (Permutation (merge q gv1) (p ++ p)), (Permutation (merge q gv1) []), (Permutation (merge q p) ql), (Permutation (merge q p) q), (Permutation (merge q p) gv1), (Permutation (merge q p) p), (Permutation (merge q p) (k :: ql)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: gv1))
(Permutation (merge q p) (k :: p)), (Permutation (merge q p) (a :: ql)), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: gv1)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (merge ql ql)), (Permutation (merge q p) (merge ql q)), (Permutation (merge q p) (merge ql gv1)), (Permutation (merge q p) (merge ql p)), (Permutation (merge q p) (merge q ql))
(Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q gv1)), (Permutation (merge q p) (merge gv1 ql)), (Permutation (merge q p) (merge gv1 q)), (Permutation (merge q p) (merge gv1 gv1)), (Permutation (merge q p) (merge gv1 p)), (Permutation (merge q p) (merge p ql)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p gv1)), (Permutation (merge q p) (merge p p))
(Permutation (merge q p) (insert k ql)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k gv1)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert a ql)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a gv1)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (maybe_swap ql)), (Permutation (merge q p) (maybe_swap q))
(Permutation (merge q p) (maybe_swap gv1)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (ql ++ ql)), (Permutation (merge q p) (ql ++ q)), (Permutation (merge q p) (ql ++ gv1)), (Permutation (merge q p) (ql ++ p)), (Permutation (merge q p) (q ++ ql)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ gv1)), (Permutation (merge q p) (q ++ p))
(Permutation (merge q p) (gv1 ++ ql)), (Permutation (merge q p) (gv1 ++ q)), (Permutation (merge q p) (gv1 ++ gv1)), (Permutation (merge q p) (gv1 ++ p)), (Permutation (merge q p) (p ++ ql)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ gv1)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) []), (Permutation (merge gv1 ql) ql)
(Permutation (merge gv1 ql) q), (Permutation (merge gv1 ql) gv1), (Permutation (merge gv1 ql) p), (Permutation (merge gv1 ql) (k :: ql)), (Permutation (merge gv1 ql) (k :: q)), (Permutation (merge gv1 ql) (k :: gv1)), (Permutation (merge gv1 ql) (k :: p)), (Permutation (merge gv1 ql) (a :: ql)), (Permutation (merge gv1 ql) (a :: q)), (Permutation (merge gv1 ql) (a :: gv1))
(Permutation (merge gv1 ql) (a :: p)), (Permutation (merge gv1 ql) (merge ql ql)), (Permutation (merge gv1 ql) (merge ql q)), (Permutation (merge gv1 ql) (merge ql gv1)), (Permutation (merge gv1 ql) (merge ql p)), (Permutation (merge gv1 ql) (merge q ql)), (Permutation (merge gv1 ql) (merge q q)), (Permutation (merge gv1 ql) (merge q gv1)), (Permutation (merge gv1 ql) (merge q p)), (Permutation (merge gv1 ql) (merge gv1 q))
(Permutation (merge gv1 ql) (merge gv1 gv1)), (Permutation (merge gv1 ql) (merge gv1 p)), (Permutation (merge gv1 ql) (merge p ql)), (Permutation (merge gv1 ql) (merge p q)), (Permutation (merge gv1 ql) (merge p gv1)), (Permutation (merge gv1 ql) (merge p p)), (Permutation (merge gv1 ql) (insert k ql)), (Permutation (merge gv1 ql) (insert k q)), (Permutation (merge gv1 ql) (insert k gv1)), (Permutation (merge gv1 ql) (insert k p))
(Permutation (merge gv1 ql) (insert a ql)), (Permutation (merge gv1 ql) (insert a q)), (Permutation (merge gv1 ql) (insert a gv1)), (Permutation (merge gv1 ql) (insert a p)), (Permutation (merge gv1 ql) (maybe_swap ql)), (Permutation (merge gv1 ql) (maybe_swap q)), (Permutation (merge gv1 ql) (maybe_swap gv1)), (Permutation (merge gv1 ql) (maybe_swap p)), (Permutation (merge gv1 ql) (ql ++ ql)), (Permutation (merge gv1 ql) (ql ++ q))
(Permutation (merge gv1 ql) (ql ++ gv1)), (Permutation (merge gv1 ql) (ql ++ p)), (Permutation (merge gv1 ql) (q ++ ql)), (Permutation (merge gv1 ql) (q ++ q)), (Permutation (merge gv1 ql) (q ++ gv1)), (Permutation (merge gv1 ql) (q ++ p)), (Permutation (merge gv1 ql) (gv1 ++ ql)), (Permutation (merge gv1 ql) (gv1 ++ q)), (Permutation (merge gv1 ql) (gv1 ++ gv1)), (Permutation (merge gv1 ql) (gv1 ++ p))
(Permutation (merge gv1 ql) (p ++ ql)), (Permutation (merge gv1 ql) (p ++ q)), (Permutation (merge gv1 ql) (p ++ gv1)), (Permutation (merge gv1 ql) (p ++ p)), (Permutation (merge gv1 ql) []), (Permutation (merge gv1 q) ql), (Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) p), (Permutation (merge gv1 q) (k :: ql))
(Permutation (merge gv1 q) (k :: q)), (Permutation (merge gv1 q) (k :: gv1)), (Permutation (merge gv1 q) (k :: p)), (Permutation (merge gv1 q) (a :: ql)), (Permutation (merge gv1 q) (a :: q)), (Permutation (merge gv1 q) (a :: gv1)), (Permutation (merge gv1 q) (a :: p)), (Permutation (merge gv1 q) (merge ql ql)), (Permutation (merge gv1 q) (merge ql q)), (Permutation (merge gv1 q) (merge ql gv1))
(Permutation (merge gv1 q) (merge ql p)), (Permutation (merge gv1 q) (merge q ql)), (Permutation (merge gv1 q) (merge q q)), (Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge q p)), (Permutation (merge gv1 q) (merge gv1 ql)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (merge gv1 p)), (Permutation (merge gv1 q) (merge p ql)), (Permutation (merge gv1 q) (merge p q))
(Permutation (merge gv1 q) (merge p gv1)), (Permutation (merge gv1 q) (merge p p)), (Permutation (merge gv1 q) (insert k ql)), (Permutation (merge gv1 q) (insert k q)), (Permutation (merge gv1 q) (insert k gv1)), (Permutation (merge gv1 q) (insert k p)), (Permutation (merge gv1 q) (insert a ql)), (Permutation (merge gv1 q) (insert a q)), (Permutation (merge gv1 q) (insert a gv1)), (Permutation (merge gv1 q) (insert a p))
(Permutation (merge gv1 q) (maybe_swap ql)), (Permutation (merge gv1 q) (maybe_swap q)), (Permutation (merge gv1 q) (maybe_swap gv1)), (Permutation (merge gv1 q) (maybe_swap p)), (Permutation (merge gv1 q) (ql ++ ql)), (Permutation (merge gv1 q) (ql ++ q)), (Permutation (merge gv1 q) (ql ++ gv1)), (Permutation (merge gv1 q) (ql ++ p)), (Permutation (merge gv1 q) (q ++ ql)), (Permutation (merge gv1 q) (q ++ q))
(Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (q ++ p)), (Permutation (merge gv1 q) (gv1 ++ ql)), (Permutation (merge gv1 q) (gv1 ++ q)), (Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ p)), (Permutation (merge gv1 q) (p ++ ql)), (Permutation (merge gv1 q) (p ++ q)), (Permutation (merge gv1 q) (p ++ gv1)), (Permutation (merge gv1 q) (p ++ p))
(Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) ql), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) p), (Permutation (merge gv1 gv1) (k :: ql)), (Permutation (merge gv1 gv1) (k :: q)), (Permutation (merge gv1 gv1) (k :: gv1)), (Permutation (merge gv1 gv1) (k :: p)), (Permutation (merge gv1 gv1) (a :: ql))
(Permutation (merge gv1 gv1) (a :: q)), (Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (a :: p)), (Permutation (merge gv1 gv1) (merge ql ql)), (Permutation (merge gv1 gv1) (merge ql q)), (Permutation (merge gv1 gv1) (merge ql gv1)), (Permutation (merge gv1 gv1) (merge ql p)), (Permutation (merge gv1 gv1) (merge q ql)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1))
(Permutation (merge gv1 gv1) (merge q p)), (Permutation (merge gv1 gv1) (merge gv1 ql)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (merge gv1 p)), (Permutation (merge gv1 gv1) (merge p ql)), (Permutation (merge gv1 gv1) (merge p q)), (Permutation (merge gv1 gv1) (merge p gv1)), (Permutation (merge gv1 gv1) (merge p p)), (Permutation (merge gv1 gv1) (insert k ql)), (Permutation (merge gv1 gv1) (insert k q))
(Permutation (merge gv1 gv1) (insert k gv1)), (Permutation (merge gv1 gv1) (insert k p)), (Permutation (merge gv1 gv1) (insert a ql)), (Permutation (merge gv1 gv1) (insert a q)), (Permutation (merge gv1 gv1) (insert a gv1)), (Permutation (merge gv1 gv1) (insert a p)), (Permutation (merge gv1 gv1) (maybe_swap ql)), (Permutation (merge gv1 gv1) (maybe_swap q)), (Permutation (merge gv1 gv1) (maybe_swap gv1)), (Permutation (merge gv1 gv1) (maybe_swap p))
(Permutation (merge gv1 gv1) (ql ++ ql)), (Permutation (merge gv1 gv1) (ql ++ q)), (Permutation (merge gv1 gv1) (ql ++ gv1)), (Permutation (merge gv1 gv1) (ql ++ p)), (Permutation (merge gv1 gv1) (q ++ ql)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1)), (Permutation (merge gv1 gv1) (q ++ p)), (Permutation (merge gv1 gv1) (gv1 ++ ql)), (Permutation (merge gv1 gv1) (gv1 ++ q))
(Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ p)), (Permutation (merge gv1 gv1) (p ++ ql)), (Permutation (merge gv1 gv1) (p ++ q)), (Permutation (merge gv1 gv1) (p ++ gv1)), (Permutation (merge gv1 gv1) (p ++ p)), (Permutation (merge gv1 gv1) []), (Permutation (merge gv1 p) ql), (Permutation (merge gv1 p) q), (Permutation (merge gv1 p) gv1)
(Permutation (merge gv1 p) p), (Permutation (merge gv1 p) (k :: ql)), (Permutation (merge gv1 p) (k :: q)), (Permutation (merge gv1 p) (k :: gv1)), (Permutation (merge gv1 p) (k :: p)), (Permutation (merge gv1 p) (a :: ql)), (Permutation (merge gv1 p) (a :: q)), (Permutation (merge gv1 p) (a :: gv1)), (Permutation (merge gv1 p) (a :: p)), (Permutation (merge gv1 p) (merge ql ql))
(Permutation (merge gv1 p) (merge ql q)), (Permutation (merge gv1 p) (merge ql gv1)), (Permutation (merge gv1 p) (merge ql p)), (Permutation (merge gv1 p) (merge q ql)), (Permutation (merge gv1 p) (merge q q)), (Permutation (merge gv1 p) (merge q gv1)), (Permutation (merge gv1 p) (merge q p)), (Permutation (merge gv1 p) (merge gv1 ql)), (Permutation (merge gv1 p) (merge gv1 q)), (Permutation (merge gv1 p) (merge gv1 gv1))
(Permutation (merge gv1 p) (merge p ql)), (Permutation (merge gv1 p) (merge p q)), (Permutation (merge gv1 p) (merge p gv1)), (Permutation (merge gv1 p) (merge p p)), (Permutation (merge gv1 p) (insert k ql)), (Permutation (merge gv1 p) (insert k q)), (Permutation (merge gv1 p) (insert k gv1)), (Permutation (merge gv1 p) (insert k p)), (Permutation (merge gv1 p) (insert a ql)), (Permutation (merge gv1 p) (insert a q))
(Permutation (merge gv1 p) (insert a gv1)), (Permutation (merge gv1 p) (insert a p)), (Permutation (merge gv1 p) (maybe_swap ql)), (Permutation (merge gv1 p) (maybe_swap q)), (Permutation (merge gv1 p) (maybe_swap gv1)), (Permutation (merge gv1 p) (maybe_swap p)), (Permutation (merge gv1 p) (ql ++ ql)), (Permutation (merge gv1 p) (ql ++ q)), (Permutation (merge gv1 p) (ql ++ gv1)), (Permutation (merge gv1 p) (ql ++ p))
(Permutation (merge gv1 p) (q ++ ql)), (Permutation (merge gv1 p) (q ++ q)), (Permutation (merge gv1 p) (q ++ gv1)), (Permutation (merge gv1 p) (q ++ p)), (Permutation (merge gv1 p) (gv1 ++ ql)), (Permutation (merge gv1 p) (gv1 ++ q)), (Permutation (merge gv1 p) (gv1 ++ gv1)), (Permutation (merge gv1 p) (gv1 ++ p)), (Permutation (merge gv1 p) (p ++ ql)), (Permutation (merge gv1 p) (p ++ q))
(Permutation (merge gv1 p) (p ++ gv1)), (Permutation (merge gv1 p) (p ++ p)), (Permutation (merge gv1 p) []), (Permutation (merge p ql) ql), (Permutation (merge p ql) q), (Permutation (merge p ql) gv1), (Permutation (merge p ql) p), (Permutation (merge p ql) (k :: ql)), (Permutation (merge p ql) (k :: q)), (Permutation (merge p ql) (k :: gv1))
(Permutation (merge p ql) (k :: p)), (Permutation (merge p ql) (a :: ql)), (Permutation (merge p ql) (a :: q)), (Permutation (merge p ql) (a :: gv1)), (Permutation (merge p ql) (a :: p)), (Permutation (merge p ql) (merge ql ql)), (Permutation (merge p ql) (merge ql q)), (Permutation (merge p ql) (merge ql gv1)), (Permutation (merge p ql) (merge ql p)), (Permutation (merge p ql) (merge q ql))
(Permutation (merge p ql) (merge q q)), (Permutation (merge p ql) (merge q gv1)), (Permutation (merge p ql) (merge q p)), (Permutation (merge p ql) (merge gv1 ql)), (Permutation (merge p ql) (merge gv1 q)), (Permutation (merge p ql) (merge gv1 gv1)), (Permutation (merge p ql) (merge gv1 p)), (Permutation (merge p ql) (merge p q)), (Permutation (merge p ql) (merge p gv1)), (Permutation (merge p ql) (merge p p))
(Permutation (merge p ql) (insert k ql)), (Permutation (merge p ql) (insert k q)), (Permutation (merge p ql) (insert k gv1)), (Permutation (merge p ql) (insert k p)), (Permutation (merge p ql) (insert a ql)), (Permutation (merge p ql) (insert a q)), (Permutation (merge p ql) (insert a gv1)), (Permutation (merge p ql) (insert a p)), (Permutation (merge p ql) (maybe_swap ql)), (Permutation (merge p ql) (maybe_swap q))
(Permutation (merge p ql) (maybe_swap gv1)), (Permutation (merge p ql) (maybe_swap p)), (Permutation (merge p ql) (ql ++ ql)), (Permutation (merge p ql) (ql ++ q)), (Permutation (merge p ql) (ql ++ gv1)), (Permutation (merge p ql) (ql ++ p)), (Permutation (merge p ql) (q ++ ql)), (Permutation (merge p ql) (q ++ q)), (Permutation (merge p ql) (q ++ gv1)), (Permutation (merge p ql) (q ++ p))
(Permutation (merge p ql) (gv1 ++ ql)), (Permutation (merge p ql) (gv1 ++ q)), (Permutation (merge p ql) (gv1 ++ gv1)), (Permutation (merge p ql) (gv1 ++ p)), (Permutation (merge p ql) (p ++ ql)), (Permutation (merge p ql) (p ++ q)), (Permutation (merge p ql) (p ++ gv1)), (Permutation (merge p ql) (p ++ p)), (Permutation (merge p ql) []), (Permutation (merge p q) ql)
(Permutation (merge p q) q), (Permutation (merge p q) gv1), (Permutation (merge p q) p), (Permutation (merge p q) (k :: ql)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: gv1)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (a :: ql)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: gv1))
(Permutation (merge p q) (a :: p)), (Permutation (merge p q) (merge ql ql)), (Permutation (merge p q) (merge ql q)), (Permutation (merge p q) (merge ql gv1)), (Permutation (merge p q) (merge ql p)), (Permutation (merge p q) (merge q ql)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q gv1)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge gv1 ql))
(Permutation (merge p q) (merge gv1 q)), (Permutation (merge p q) (merge gv1 gv1)), (Permutation (merge p q) (merge gv1 p)), (Permutation (merge p q) (merge p ql)), (Permutation (merge p q) (merge p gv1)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (insert k ql)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k gv1)), (Permutation (merge p q) (insert k p))
(Permutation (merge p q) (insert a ql)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a gv1)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (maybe_swap ql)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap gv1)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (ql ++ ql)), (Permutation (merge p q) (ql ++ q))
(Permutation (merge p q) (ql ++ gv1)), (Permutation (merge p q) (ql ++ p)), (Permutation (merge p q) (q ++ ql)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ gv1)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (gv1 ++ ql)), (Permutation (merge p q) (gv1 ++ q)), (Permutation (merge p q) (gv1 ++ gv1)), (Permutation (merge p q) (gv1 ++ p))
(Permutation (merge p q) (p ++ ql)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ gv1)), (Permutation (merge p q) (p ++ p)), (Permutation (merge p q) []), (Permutation (merge p gv1) ql), (Permutation (merge p gv1) q), (Permutation (merge p gv1) gv1), (Permutation (merge p gv1) p), (Permutation (merge p gv1) (k :: ql))
(Permutation (merge p gv1) (k :: q)), (Permutation (merge p gv1) (k :: gv1)), (Permutation (merge p gv1) (k :: p)), (Permutation (merge p gv1) (a :: ql)), (Permutation (merge p gv1) (a :: q)), (Permutation (merge p gv1) (a :: gv1)), (Permutation (merge p gv1) (a :: p)), (Permutation (merge p gv1) (merge ql ql)), (Permutation (merge p gv1) (merge ql q)), (Permutation (merge p gv1) (merge ql gv1))
(Permutation (merge p gv1) (merge ql p)), (Permutation (merge p gv1) (merge q ql)), (Permutation (merge p gv1) (merge q q)), (Permutation (merge p gv1) (merge q gv1)), (Permutation (merge p gv1) (merge q p)), (Permutation (merge p gv1) (merge gv1 ql)), (Permutation (merge p gv1) (merge gv1 q)), (Permutation (merge p gv1) (merge gv1 gv1)), (Permutation (merge p gv1) (merge gv1 p)), (Permutation (merge p gv1) (merge p ql))
(Permutation (merge p gv1) (merge p q)), (Permutation (merge p gv1) (merge p p)), (Permutation (merge p gv1) (insert k ql)), (Permutation (merge p gv1) (insert k q)), (Permutation (merge p gv1) (insert k gv1)), (Permutation (merge p gv1) (insert k p)), (Permutation (merge p gv1) (insert a ql)), (Permutation (merge p gv1) (insert a q)), (Permutation (merge p gv1) (insert a gv1)), (Permutation (merge p gv1) (insert a p))
(Permutation (merge p gv1) (maybe_swap ql)), (Permutation (merge p gv1) (maybe_swap q)), (Permutation (merge p gv1) (maybe_swap gv1)), (Permutation (merge p gv1) (maybe_swap p)), (Permutation (merge p gv1) (ql ++ ql)), (Permutation (merge p gv1) (ql ++ q)), (Permutation (merge p gv1) (ql ++ gv1)), (Permutation (merge p gv1) (ql ++ p)), (Permutation (merge p gv1) (q ++ ql)), (Permutation (merge p gv1) (q ++ q))
(Permutation (merge p gv1) (q ++ gv1)), (Permutation (merge p gv1) (q ++ p)), (Permutation (merge p gv1) (gv1 ++ ql)), (Permutation (merge p gv1) (gv1 ++ q)), (Permutation (merge p gv1) (gv1 ++ gv1)), (Permutation (merge p gv1) (gv1 ++ p)), (Permutation (merge p gv1) (p ++ ql)), (Permutation (merge p gv1) (p ++ q)), (Permutation (merge p gv1) (p ++ gv1)), (Permutation (merge p gv1) (p ++ p))
(Permutation (merge p gv1) []), (Permutation (merge p p) ql), (Permutation (merge p p) q), (Permutation (merge p p) gv1), (Permutation (merge p p) p), (Permutation (merge p p) (k :: ql)), (Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: gv1)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (a :: ql))
(Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: gv1)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (merge ql ql)), (Permutation (merge p p) (merge ql q)), (Permutation (merge p p) (merge ql gv1)), (Permutation (merge p p) (merge ql p)), (Permutation (merge p p) (merge q ql)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q gv1))
(Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge gv1 ql)), (Permutation (merge p p) (merge gv1 q)), (Permutation (merge p p) (merge gv1 gv1)), (Permutation (merge p p) (merge gv1 p)), (Permutation (merge p p) (merge p ql)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p gv1)), (Permutation (merge p p) (insert k ql)), (Permutation (merge p p) (insert k q))
(Permutation (merge p p) (insert k gv1)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert a ql)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a gv1)), (Permutation (merge p p) (insert a p)), (Permutation (merge p p) (maybe_swap ql)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap gv1)), (Permutation (merge p p) (maybe_swap p))
(Permutation (merge p p) (ql ++ ql)), (Permutation (merge p p) (ql ++ q)), (Permutation (merge p p) (ql ++ gv1)), (Permutation (merge p p) (ql ++ p)), (Permutation (merge p p) (q ++ ql)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ gv1)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (gv1 ++ ql)), (Permutation (merge p p) (gv1 ++ q))
(Permutation (merge p p) (gv1 ++ gv1)), (Permutation (merge p p) (gv1 ++ p)), (Permutation (merge p p) (p ++ ql)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ gv1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (insert k ql) ql), (Permutation (insert k ql) q), (Permutation (insert k ql) gv1)
(Permutation (insert k ql) p), (Permutation (insert k ql) (k :: ql)), (Permutation (insert k ql) (k :: q)), (Permutation (insert k ql) (k :: gv1)), (Permutation (insert k ql) (k :: p)), (Permutation (insert k ql) (a :: ql)), (Permutation (insert k ql) (a :: q)), (Permutation (insert k ql) (a :: gv1)), (Permutation (insert k ql) (a :: p)), (Permutation (insert k ql) (merge ql ql))
(Permutation (insert k ql) (merge ql q)), (Permutation (insert k ql) (merge ql gv1)), (Permutation (insert k ql) (merge ql p)), (Permutation (insert k ql) (merge q ql)), (Permutation (insert k ql) (merge q q)), (Permutation (insert k ql) (merge q gv1)), (Permutation (insert k ql) (merge q p)), (Permutation (insert k ql) (merge gv1 ql)), (Permutation (insert k ql) (merge gv1 q)), (Permutation (insert k ql) (merge gv1 gv1))
(Permutation (insert k ql) (merge gv1 p)), (Permutation (insert k ql) (merge p ql)), (Permutation (insert k ql) (merge p q)), (Permutation (insert k ql) (merge p gv1)), (Permutation (insert k ql) (merge p p)), (Permutation (insert k ql) (insert k q)), (Permutation (insert k ql) (insert k gv1)), (Permutation (insert k ql) (insert k p)), (Permutation (insert k ql) (insert a ql)), (Permutation (insert k ql) (insert a q))
(Permutation (insert k ql) (insert a gv1)), (Permutation (insert k ql) (insert a p)), (Permutation (insert k ql) (maybe_swap ql)), (Permutation (insert k ql) (maybe_swap q)), (Permutation (insert k ql) (maybe_swap gv1)), (Permutation (insert k ql) (maybe_swap p)), (Permutation (insert k ql) (ql ++ ql)), (Permutation (insert k ql) (ql ++ q)), (Permutation (insert k ql) (ql ++ gv1)), (Permutation (insert k ql) (ql ++ p))
(Permutation (insert k ql) (q ++ ql)), (Permutation (insert k ql) (q ++ q)), (Permutation (insert k ql) (q ++ gv1)), (Permutation (insert k ql) (q ++ p)), (Permutation (insert k ql) (gv1 ++ ql)), (Permutation (insert k ql) (gv1 ++ q)), (Permutation (insert k ql) (gv1 ++ gv1)), (Permutation (insert k ql) (gv1 ++ p)), (Permutation (insert k ql) (p ++ ql)), (Permutation (insert k ql) (p ++ q))
(Permutation (insert k ql) (p ++ gv1)), (Permutation (insert k ql) (p ++ p)), (Permutation (insert k ql) []), (Permutation (insert k q) ql), (Permutation (insert k q) q), (Permutation (insert k q) gv1), (Permutation (insert k q) p), (Permutation (insert k q) (k :: ql)), (Permutation (insert k q) (k :: q)), (Permutation (insert k q) (k :: gv1))
(Permutation (insert k q) (k :: p)), (Permutation (insert k q) (a :: ql)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: gv1)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (merge ql ql)), (Permutation (insert k q) (merge ql q)), (Permutation (insert k q) (merge ql gv1)), (Permutation (insert k q) (merge ql p)), (Permutation (insert k q) (merge q ql))
(Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q gv1)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge gv1 ql)), (Permutation (insert k q) (merge gv1 q)), (Permutation (insert k q) (merge gv1 gv1)), (Permutation (insert k q) (merge gv1 p)), (Permutation (insert k q) (merge p ql)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p gv1))
(Permutation (insert k q) (merge p p)), (Permutation (insert k q) (insert k ql)), (Permutation (insert k q) (insert k gv1)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert a ql)), (Permutation (insert k q) (insert a q)), (Permutation (insert k q) (insert a gv1)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (maybe_swap ql)), (Permutation (insert k q) (maybe_swap q))
(Permutation (insert k q) (maybe_swap gv1)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (ql ++ ql)), (Permutation (insert k q) (ql ++ q)), (Permutation (insert k q) (ql ++ gv1)), (Permutation (insert k q) (ql ++ p)), (Permutation (insert k q) (q ++ ql)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ gv1)), (Permutation (insert k q) (q ++ p))
(Permutation (insert k q) (gv1 ++ ql)), (Permutation (insert k q) (gv1 ++ q)), (Permutation (insert k q) (gv1 ++ gv1)), (Permutation (insert k q) (gv1 ++ p)), (Permutation (insert k q) (p ++ ql)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ gv1)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) []), (Permutation (insert k gv1) ql)
(Permutation (insert k gv1) q), (Permutation (insert k gv1) gv1), (Permutation (insert k gv1) p), (Permutation (insert k gv1) (k :: ql)), (Permutation (insert k gv1) (k :: q)), (Permutation (insert k gv1) (k :: gv1)), (Permutation (insert k gv1) (k :: p)), (Permutation (insert k gv1) (a :: ql)), (Permutation (insert k gv1) (a :: q)), (Permutation (insert k gv1) (a :: gv1))
(Permutation (insert k gv1) (a :: p)), (Permutation (insert k gv1) (merge ql ql)), (Permutation (insert k gv1) (merge ql q)), (Permutation (insert k gv1) (merge ql gv1)), (Permutation (insert k gv1) (merge ql p)), (Permutation (insert k gv1) (merge q ql)), (Permutation (insert k gv1) (merge q q)), (Permutation (insert k gv1) (merge q gv1)), (Permutation (insert k gv1) (merge q p)), (Permutation (insert k gv1) (merge gv1 ql))
(Permutation (insert k gv1) (merge gv1 q)), (Permutation (insert k gv1) (merge gv1 gv1)), (Permutation (insert k gv1) (merge gv1 p)), (Permutation (insert k gv1) (merge p ql)), (Permutation (insert k gv1) (merge p q)), (Permutation (insert k gv1) (merge p gv1)), (Permutation (insert k gv1) (merge p p)), (Permutation (insert k gv1) (insert k ql)), (Permutation (insert k gv1) (insert k q)), (Permutation (insert k gv1) (insert k p))
(Permutation (insert k gv1) (insert a ql)), (Permutation (insert k gv1) (insert a q)), (Permutation (insert k gv1) (insert a gv1)), (Permutation (insert k gv1) (insert a p)), (Permutation (insert k gv1) (maybe_swap ql)), (Permutation (insert k gv1) (maybe_swap q)), (Permutation (insert k gv1) (maybe_swap gv1)), (Permutation (insert k gv1) (maybe_swap p)), (Permutation (insert k gv1) (ql ++ ql)), (Permutation (insert k gv1) (ql ++ q))
(Permutation (insert k gv1) (ql ++ gv1)), (Permutation (insert k gv1) (ql ++ p)), (Permutation (insert k gv1) (q ++ ql)), (Permutation (insert k gv1) (q ++ q)), (Permutation (insert k gv1) (q ++ gv1)), (Permutation (insert k gv1) (q ++ p)), (Permutation (insert k gv1) (gv1 ++ ql)), (Permutation (insert k gv1) (gv1 ++ q)), (Permutation (insert k gv1) (gv1 ++ gv1)), (Permutation (insert k gv1) (gv1 ++ p))
(Permutation (insert k gv1) (p ++ ql)), (Permutation (insert k gv1) (p ++ q)), (Permutation (insert k gv1) (p ++ gv1)), (Permutation (insert k gv1) (p ++ p)), (Permutation (insert k gv1) []), (Permutation (insert k p) ql), (Permutation (insert k p) q), (Permutation (insert k p) gv1), (Permutation (insert k p) p), (Permutation (insert k p) (k :: ql))
(Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: gv1)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (a :: ql)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: gv1)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (merge ql ql)), (Permutation (insert k p) (merge ql q)), (Permutation (insert k p) (merge ql gv1))
(Permutation (insert k p) (merge ql p)), (Permutation (insert k p) (merge q ql)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q gv1)), (Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge gv1 ql)), (Permutation (insert k p) (merge gv1 q)), (Permutation (insert k p) (merge gv1 gv1)), (Permutation (insert k p) (merge gv1 p)), (Permutation (insert k p) (merge p ql))
(Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p gv1)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (insert k ql)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k gv1)), (Permutation (insert k p) (insert a ql)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a gv1)), (Permutation (insert k p) (insert a p))
(Permutation (insert k p) (maybe_swap ql)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap gv1)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (ql ++ ql)), (Permutation (insert k p) (ql ++ q)), (Permutation (insert k p) (ql ++ gv1)), (Permutation (insert k p) (ql ++ p)), (Permutation (insert k p) (q ++ ql)), (Permutation (insert k p) (q ++ q))
(Permutation (insert k p) (q ++ gv1)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (gv1 ++ ql)), (Permutation (insert k p) (gv1 ++ q)), (Permutation (insert k p) (gv1 ++ gv1)), (Permutation (insert k p) (gv1 ++ p)), (Permutation (insert k p) (p ++ ql)), (Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ gv1)), (Permutation (insert k p) (p ++ p))
(Permutation (insert k p) []), (Permutation (insert a ql) ql), (Permutation (insert a ql) q), (Permutation (insert a ql) gv1), (Permutation (insert a ql) p), (Permutation (insert a ql) (k :: ql)), (Permutation (insert a ql) (k :: q)), (Permutation (insert a ql) (k :: gv1)), (Permutation (insert a ql) (k :: p)), (Permutation (insert a ql) (a :: ql))
(Permutation (insert a ql) (a :: q)), (Permutation (insert a ql) (a :: gv1)), (Permutation (insert a ql) (a :: p)), (Permutation (insert a ql) (merge ql ql)), (Permutation (insert a ql) (merge ql q)), (Permutation (insert a ql) (merge ql gv1)), (Permutation (insert a ql) (merge ql p)), (Permutation (insert a ql) (merge q ql)), (Permutation (insert a ql) (merge q q)), (Permutation (insert a ql) (merge q gv1))
(Permutation (insert a ql) (merge q p)), (Permutation (insert a ql) (merge gv1 ql)), (Permutation (insert a ql) (merge gv1 q)), (Permutation (insert a ql) (merge gv1 gv1)), (Permutation (insert a ql) (merge gv1 p)), (Permutation (insert a ql) (merge p ql)), (Permutation (insert a ql) (merge p q)), (Permutation (insert a ql) (merge p gv1)), (Permutation (insert a ql) (merge p p)), (Permutation (insert a ql) (insert k ql))
(Permutation (insert a ql) (insert k q)), (Permutation (insert a ql) (insert k gv1)), (Permutation (insert a ql) (insert k p)), (Permutation (insert a ql) (insert a q)), (Permutation (insert a ql) (insert a gv1)), (Permutation (insert a ql) (insert a p)), (Permutation (insert a ql) (maybe_swap ql)), (Permutation (insert a ql) (maybe_swap q)), (Permutation (insert a ql) (maybe_swap gv1)), (Permutation (insert a ql) (maybe_swap p))
(Permutation (insert a ql) (ql ++ ql)), (Permutation (insert a ql) (ql ++ q)), (Permutation (insert a ql) (ql ++ gv1)), (Permutation (insert a ql) (ql ++ p)), (Permutation (insert a ql) (q ++ ql)), (Permutation (insert a ql) (q ++ q)), (Permutation (insert a ql) (q ++ gv1)), (Permutation (insert a ql) (q ++ p)), (Permutation (insert a ql) (gv1 ++ ql)), (Permutation (insert a ql) (gv1 ++ q))
(Permutation (insert a ql) (gv1 ++ gv1)), (Permutation (insert a ql) (gv1 ++ p)), (Permutation (insert a ql) (p ++ ql)), (Permutation (insert a ql) (p ++ q)), (Permutation (insert a ql) (p ++ gv1)), (Permutation (insert a ql) (p ++ p)), (Permutation (insert a ql) []), (Permutation (insert a q) ql), (Permutation (insert a q) q), (Permutation (insert a q) gv1)
(Permutation (insert a q) p), (Permutation (insert a q) (k :: ql)), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: gv1)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (a :: ql)), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: gv1)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (merge ql ql))
(Permutation (insert a q) (merge ql q)), (Permutation (insert a q) (merge ql gv1)), (Permutation (insert a q) (merge ql p)), (Permutation (insert a q) (merge q ql)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q gv1)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge gv1 ql)), (Permutation (insert a q) (merge gv1 q)), (Permutation (insert a q) (merge gv1 gv1))
(Permutation (insert a q) (merge gv1 p)), (Permutation (insert a q) (merge p ql)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p gv1)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (insert k ql)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k gv1)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert a ql))
(Permutation (insert a q) (insert a gv1)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (maybe_swap ql)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap gv1)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (ql ++ ql)), (Permutation (insert a q) (ql ++ q)), (Permutation (insert a q) (ql ++ gv1)), (Permutation (insert a q) (ql ++ p))
(Permutation (insert a q) (q ++ ql)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ gv1)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (gv1 ++ ql)), (Permutation (insert a q) (gv1 ++ q)), (Permutation (insert a q) (gv1 ++ gv1)), (Permutation (insert a q) (gv1 ++ p)), (Permutation (insert a q) (p ++ ql)), (Permutation (insert a q) (p ++ q))
(Permutation (insert a q) (p ++ gv1)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) []), (Permutation (insert a gv1) ql), (Permutation (insert a gv1) q), (Permutation (insert a gv1) gv1), (Permutation (insert a gv1) p), (Permutation (insert a gv1) (k :: ql)), (Permutation (insert a gv1) (k :: q)), (Permutation (insert a gv1) (k :: gv1))
(Permutation (insert a gv1) (k :: p)), (Permutation (insert a gv1) (a :: ql)), (Permutation (insert a gv1) (a :: q)), (Permutation (insert a gv1) (a :: gv1)), (Permutation (insert a gv1) (a :: p)), (Permutation (insert a gv1) (merge ql ql)), (Permutation (insert a gv1) (merge ql q)), (Permutation (insert a gv1) (merge ql gv1)), (Permutation (insert a gv1) (merge ql p)), (Permutation (insert a gv1) (merge q ql))
(Permutation (insert a gv1) (merge q q)), (Permutation (insert a gv1) (merge q gv1)), (Permutation (insert a gv1) (merge q p)), (Permutation (insert a gv1) (merge gv1 ql)), (Permutation (insert a gv1) (merge gv1 q)), (Permutation (insert a gv1) (merge gv1 gv1)), (Permutation (insert a gv1) (merge gv1 p)), (Permutation (insert a gv1) (merge p ql)), (Permutation (insert a gv1) (merge p q)), (Permutation (insert a gv1) (merge p gv1))
(Permutation (insert a gv1) (merge p p)), (Permutation (insert a gv1) (insert k ql)), (Permutation (insert a gv1) (insert k q)), (Permutation (insert a gv1) (insert k gv1)), (Permutation (insert a gv1) (insert k p)), (Permutation (insert a gv1) (insert a ql)), (Permutation (insert a gv1) (insert a q)), (Permutation (insert a gv1) (insert a p)), (Permutation (insert a gv1) (maybe_swap ql)), (Permutation (insert a gv1) (maybe_swap q))
(Permutation (insert a gv1) (maybe_swap gv1)), (Permutation (insert a gv1) (maybe_swap p)), (Permutation (insert a gv1) (ql ++ ql)), (Permutation (insert a gv1) (ql ++ q)), (Permutation (insert a gv1) (ql ++ gv1)), (Permutation (insert a gv1) (ql ++ p)), (Permutation (insert a gv1) (q ++ ql)), (Permutation (insert a gv1) (q ++ q)), (Permutation (insert a gv1) (q ++ gv1)), (Permutation (insert a gv1) (q ++ p))
(Permutation (insert a gv1) (gv1 ++ ql)), (Permutation (insert a gv1) (gv1 ++ q)), (Permutation (insert a gv1) (gv1 ++ gv1)), (Permutation (insert a gv1) (gv1 ++ p)), (Permutation (insert a gv1) (p ++ ql)), (Permutation (insert a gv1) (p ++ q)), (Permutation (insert a gv1) (p ++ gv1)), (Permutation (insert a gv1) (p ++ p)), (Permutation (insert a gv1) []), (Permutation (insert a p) ql)
(Permutation (insert a p) q), (Permutation (insert a p) gv1), (Permutation (insert a p) p), (Permutation (insert a p) (k :: ql)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: gv1)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (a :: ql)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: gv1))
(Permutation (insert a p) (a :: p)), (Permutation (insert a p) (merge ql ql)), (Permutation (insert a p) (merge ql q)), (Permutation (insert a p) (merge ql gv1)), (Permutation (insert a p) (merge ql p)), (Permutation (insert a p) (merge q ql)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q gv1)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge gv1 ql))
(Permutation (insert a p) (merge gv1 q)), (Permutation (insert a p) (merge gv1 gv1)), (Permutation (insert a p) (merge gv1 p)), (Permutation (insert a p) (merge p ql)), (Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p gv1)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (insert k ql)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k gv1))
(Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert a ql)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a gv1)), (Permutation (insert a p) (maybe_swap ql)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap gv1)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (ql ++ ql)), (Permutation (insert a p) (ql ++ q))
(Permutation (insert a p) (ql ++ gv1)), (Permutation (insert a p) (ql ++ p)), (Permutation (insert a p) (q ++ ql)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ gv1)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (gv1 ++ ql)), (Permutation (insert a p) (gv1 ++ q)), (Permutation (insert a p) (gv1 ++ gv1)), (Permutation (insert a p) (gv1 ++ p))
(Permutation (insert a p) (p ++ ql)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ gv1)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) []), (Permutation (maybe_swap ql) ql), (Permutation (maybe_swap ql) q), (Permutation (maybe_swap ql) gv1), (Permutation (maybe_swap ql) p), (Permutation (maybe_swap ql) (k :: ql))
(Permutation (maybe_swap ql) (k :: q)), (Permutation (maybe_swap ql) (k :: gv1)), (Permutation (maybe_swap ql) (k :: p)), (Permutation (maybe_swap ql) (a :: ql)), (Permutation (maybe_swap ql) (a :: q)), (Permutation (maybe_swap ql) (a :: gv1)), (Permutation (maybe_swap ql) (a :: p)), (Permutation (maybe_swap ql) (merge ql ql)), (Permutation (maybe_swap ql) (merge ql q)), (Permutation (maybe_swap ql) (merge ql gv1))
(Permutation (maybe_swap ql) (merge ql p)), (Permutation (maybe_swap ql) (merge q ql)), (Permutation (maybe_swap ql) (merge q q)), (Permutation (maybe_swap ql) (merge q gv1)), (Permutation (maybe_swap ql) (merge q p)), (Permutation (maybe_swap ql) (merge gv1 ql)), (Permutation (maybe_swap ql) (merge gv1 q)), (Permutation (maybe_swap ql) (merge gv1 gv1)), (Permutation (maybe_swap ql) (merge gv1 p)), (Permutation (maybe_swap ql) (merge p ql))
(Permutation (maybe_swap ql) (merge p q)), (Permutation (maybe_swap ql) (merge p gv1)), (Permutation (maybe_swap ql) (merge p p)), (Permutation (maybe_swap ql) (insert k ql)), (Permutation (maybe_swap ql) (insert k q)), (Permutation (maybe_swap ql) (insert k gv1)), (Permutation (maybe_swap ql) (insert k p)), (Permutation (maybe_swap ql) (insert a ql)), (Permutation (maybe_swap ql) (insert a q)), (Permutation (maybe_swap ql) (insert a gv1))
(Permutation (maybe_swap ql) (insert a p)), (Permutation (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap ql) (maybe_swap gv1)), (Permutation (maybe_swap ql) (maybe_swap p)), (Permutation (maybe_swap ql) (ql ++ ql)), (Permutation (maybe_swap ql) (ql ++ q)), (Permutation (maybe_swap ql) (ql ++ gv1)), (Permutation (maybe_swap ql) (ql ++ p)), (Permutation (maybe_swap ql) (q ++ ql)), (Permutation (maybe_swap ql) (q ++ q))
(Permutation (maybe_swap ql) (q ++ gv1)), (Permutation (maybe_swap ql) (q ++ p)), (Permutation (maybe_swap ql) (gv1 ++ ql)), (Permutation (maybe_swap ql) (gv1 ++ q)), (Permutation (maybe_swap ql) (gv1 ++ gv1)), (Permutation (maybe_swap ql) (gv1 ++ p)), (Permutation (maybe_swap ql) (p ++ ql)), (Permutation (maybe_swap ql) (p ++ q)), (Permutation (maybe_swap ql) (p ++ gv1)), (Permutation (maybe_swap ql) (p ++ p))
(Permutation (maybe_swap ql) []), (Permutation (maybe_swap q) ql), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) gv1), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) (k :: ql)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: gv1)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (a :: ql))
(Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: gv1)), (Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (merge ql ql)), (Permutation (maybe_swap q) (merge ql q)), (Permutation (maybe_swap q) (merge ql gv1)), (Permutation (maybe_swap q) (merge ql p)), (Permutation (maybe_swap q) (merge q ql)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q gv1))
(Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge gv1 ql)), (Permutation (maybe_swap q) (merge gv1 q)), (Permutation (maybe_swap q) (merge gv1 gv1)), (Permutation (maybe_swap q) (merge gv1 p)), (Permutation (maybe_swap q) (merge p ql)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p gv1)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (insert k ql))
(Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k gv1)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert a ql)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a gv1)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap q) (maybe_swap gv1)), (Permutation (maybe_swap q) (maybe_swap p))
(Permutation (maybe_swap q) (ql ++ ql)), (Permutation (maybe_swap q) (ql ++ q)), (Permutation (maybe_swap q) (ql ++ gv1)), (Permutation (maybe_swap q) (ql ++ p)), (Permutation (maybe_swap q) (q ++ ql)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ gv1)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (gv1 ++ ql)), (Permutation (maybe_swap q) (gv1 ++ q))
(Permutation (maybe_swap q) (gv1 ++ gv1)), (Permutation (maybe_swap q) (gv1 ++ p)), (Permutation (maybe_swap q) (p ++ ql)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ gv1)), (Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap gv1) ql), (Permutation (maybe_swap gv1) q), (Permutation (maybe_swap gv1) gv1)
(Permutation (maybe_swap gv1) p), (Permutation (maybe_swap gv1) (k :: ql)), (Permutation (maybe_swap gv1) (k :: q)), (Permutation (maybe_swap gv1) (k :: gv1)), (Permutation (maybe_swap gv1) (k :: p)), (Permutation (maybe_swap gv1) (a :: ql)), (Permutation (maybe_swap gv1) (a :: q)), (Permutation (maybe_swap gv1) (a :: gv1)), (Permutation (maybe_swap gv1) (a :: p)), (Permutation (maybe_swap gv1) (merge ql ql))
(Permutation (maybe_swap gv1) (merge ql q)), (Permutation (maybe_swap gv1) (merge ql gv1)), (Permutation (maybe_swap gv1) (merge ql p)), (Permutation (maybe_swap gv1) (merge q ql)), (Permutation (maybe_swap gv1) (merge q q)), (Permutation (maybe_swap gv1) (merge q gv1)), (Permutation (maybe_swap gv1) (merge q p)), (Permutation (maybe_swap gv1) (merge gv1 ql)), (Permutation (maybe_swap gv1) (merge gv1 q)), (Permutation (maybe_swap gv1) (merge gv1 gv1))
(Permutation (maybe_swap gv1) (merge gv1 p)), (Permutation (maybe_swap gv1) (merge p ql)), (Permutation (maybe_swap gv1) (merge p q)), (Permutation (maybe_swap gv1) (merge p gv1)), (Permutation (maybe_swap gv1) (merge p p)), (Permutation (maybe_swap gv1) (insert k ql)), (Permutation (maybe_swap gv1) (insert k q)), (Permutation (maybe_swap gv1) (insert k gv1)), (Permutation (maybe_swap gv1) (insert k p)), (Permutation (maybe_swap gv1) (insert a ql))
(Permutation (maybe_swap gv1) (insert a q)), (Permutation (maybe_swap gv1) (insert a gv1)), (Permutation (maybe_swap gv1) (insert a p)), (Permutation (maybe_swap gv1) (maybe_swap ql)), (Permutation (maybe_swap gv1) (maybe_swap q)), (Permutation (maybe_swap gv1) (maybe_swap p)), (Permutation (maybe_swap gv1) (ql ++ ql)), (Permutation (maybe_swap gv1) (ql ++ q)), (Permutation (maybe_swap gv1) (ql ++ gv1)), (Permutation (maybe_swap gv1) (ql ++ p))
(Permutation (maybe_swap gv1) (q ++ ql)), (Permutation (maybe_swap gv1) (q ++ q)), (Permutation (maybe_swap gv1) (q ++ gv1)), (Permutation (maybe_swap gv1) (q ++ p)), (Permutation (maybe_swap gv1) (gv1 ++ ql)), (Permutation (maybe_swap gv1) (gv1 ++ q)), (Permutation (maybe_swap gv1) (gv1 ++ gv1)), (Permutation (maybe_swap gv1) (gv1 ++ p)), (Permutation (maybe_swap gv1) (p ++ ql)), (Permutation (maybe_swap gv1) (p ++ q))
(Permutation (maybe_swap gv1) (p ++ gv1)), (Permutation (maybe_swap gv1) (p ++ p)), (Permutation (maybe_swap gv1) []), (Permutation (maybe_swap p) ql), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) gv1), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) (k :: ql)), (Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: gv1))
(Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (a :: ql)), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: gv1)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (merge ql ql)), (Permutation (maybe_swap p) (merge ql q)), (Permutation (maybe_swap p) (merge ql gv1)), (Permutation (maybe_swap p) (merge ql p)), (Permutation (maybe_swap p) (merge q ql))
(Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q gv1)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge gv1 ql)), (Permutation (maybe_swap p) (merge gv1 q)), (Permutation (maybe_swap p) (merge gv1 gv1)), (Permutation (maybe_swap p) (merge gv1 p)), (Permutation (maybe_swap p) (merge p ql)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p gv1))
(Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (insert k ql)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k gv1)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert a ql)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a gv1)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (maybe_swap ql))
(Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap gv1)), (Permutation (maybe_swap p) (ql ++ ql)), (Permutation (maybe_swap p) (ql ++ q)), (Permutation (maybe_swap p) (ql ++ gv1)), (Permutation (maybe_swap p) (ql ++ p)), (Permutation (maybe_swap p) (q ++ ql)), (Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ gv1)), (Permutation (maybe_swap p) (q ++ p))
(Permutation (maybe_swap p) (gv1 ++ ql)), (Permutation (maybe_swap p) (gv1 ++ q)), (Permutation (maybe_swap p) (gv1 ++ gv1)), (Permutation (maybe_swap p) (gv1 ++ p)), (Permutation (maybe_swap p) (p ++ ql)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ gv1)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) []), (Permutation (ql ++ ql) ql)
(Permutation (ql ++ ql) q), (Permutation (ql ++ ql) gv1), (Permutation (ql ++ ql) p), (Permutation (ql ++ ql) (k :: ql)), (Permutation (ql ++ ql) (k :: q)), (Permutation (ql ++ ql) (k :: gv1)), (Permutation (ql ++ ql) (k :: p)), (Permutation (ql ++ ql) (a :: ql)), (Permutation (ql ++ ql) (a :: q)), (Permutation (ql ++ ql) (a :: gv1))
(Permutation (ql ++ ql) (a :: p)), (Permutation (ql ++ ql) (merge ql ql)), (Permutation (ql ++ ql) (merge ql q)), (Permutation (ql ++ ql) (merge ql gv1)), (Permutation (ql ++ ql) (merge ql p)), (Permutation (ql ++ ql) (merge q ql)), (Permutation (ql ++ ql) (merge q q)), (Permutation (ql ++ ql) (merge q gv1)), (Permutation (ql ++ ql) (merge q p)), (Permutation (ql ++ ql) (merge gv1 ql))
(Permutation (ql ++ ql) (merge gv1 q)), (Permutation (ql ++ ql) (merge gv1 gv1)), (Permutation (ql ++ ql) (merge gv1 p)), (Permutation (ql ++ ql) (merge p ql)), (Permutation (ql ++ ql) (merge p q)), (Permutation (ql ++ ql) (merge p gv1)), (Permutation (ql ++ ql) (merge p p)), (Permutation (ql ++ ql) (insert k ql)), (Permutation (ql ++ ql) (insert k q)), (Permutation (ql ++ ql) (insert k gv1))
(Permutation (ql ++ ql) (insert k p)), (Permutation (ql ++ ql) (insert a ql)), (Permutation (ql ++ ql) (insert a q)), (Permutation (ql ++ ql) (insert a gv1)), (Permutation (ql ++ ql) (insert a p)), (Permutation (ql ++ ql) (maybe_swap ql)), (Permutation (ql ++ ql) (maybe_swap q)), (Permutation (ql ++ ql) (maybe_swap gv1)), (Permutation (ql ++ ql) (maybe_swap p)), (Permutation (ql ++ ql) (ql ++ q))
(Permutation (ql ++ ql) (ql ++ gv1)), (Permutation (ql ++ ql) (ql ++ p)), (Permutation (ql ++ ql) (q ++ ql)), (Permutation (ql ++ ql) (q ++ q)), (Permutation (ql ++ ql) (q ++ gv1)), (Permutation (ql ++ ql) (q ++ p)), (Permutation (ql ++ ql) (gv1 ++ ql)), (Permutation (ql ++ ql) (gv1 ++ q)), (Permutation (ql ++ ql) (gv1 ++ gv1)), (Permutation (ql ++ ql) (gv1 ++ p))
(Permutation (ql ++ ql) (p ++ ql)), (Permutation (ql ++ ql) (p ++ q)), (Permutation (ql ++ ql) (p ++ gv1)), (Permutation (ql ++ ql) (p ++ p)), (Permutation (ql ++ ql) []), (Permutation (ql ++ q) ql), (Permutation (ql ++ q) q), (Permutation (ql ++ q) gv1), (Permutation (ql ++ q) p), (Permutation (ql ++ q) (k :: ql))
(Permutation (ql ++ q) (k :: q)), (Permutation (ql ++ q) (k :: gv1)), (Permutation (ql ++ q) (k :: p)), (Permutation (ql ++ q) (a :: ql)), (Permutation (ql ++ q) (a :: q)), (Permutation (ql ++ q) (a :: gv1)), (Permutation (ql ++ q) (a :: p)), (Permutation (ql ++ q) (merge ql ql)), (Permutation (ql ++ q) (merge ql q)), (Permutation (ql ++ q) (merge ql gv1))
(Permutation (ql ++ q) (merge ql p)), (Permutation (ql ++ q) (merge q ql)), (Permutation (ql ++ q) (merge q q)), (Permutation (ql ++ q) (merge q gv1)), (Permutation (ql ++ q) (merge q p)), (Permutation (ql ++ q) (merge gv1 ql)), (Permutation (ql ++ q) (merge gv1 q)), (Permutation (ql ++ q) (merge gv1 gv1)), (Permutation (ql ++ q) (merge gv1 p)), (Permutation (ql ++ q) (merge p ql))
(Permutation (ql ++ q) (merge p q)), (Permutation (ql ++ q) (merge p gv1)), (Permutation (ql ++ q) (merge p p)), (Permutation (ql ++ q) (insert k ql)), (Permutation (ql ++ q) (insert k q)), (Permutation (ql ++ q) (insert k gv1)), (Permutation (ql ++ q) (insert k p)), (Permutation (ql ++ q) (insert a ql)), (Permutation (ql ++ q) (insert a q)), (Permutation (ql ++ q) (insert a gv1))
(Permutation (ql ++ q) (insert a p)), (Permutation (ql ++ q) (maybe_swap ql)), (Permutation (ql ++ q) (maybe_swap q)), (Permutation (ql ++ q) (maybe_swap gv1)), (Permutation (ql ++ q) (maybe_swap p)), (Permutation (ql ++ q) (ql ++ ql)), (Permutation (ql ++ q) (ql ++ gv1)), (Permutation (ql ++ q) (ql ++ p)), (Permutation (ql ++ q) (q ++ ql)), (Permutation (ql ++ q) (q ++ q))
(Permutation (ql ++ q) (q ++ gv1)), (Permutation (ql ++ q) (q ++ p)), (Permutation (ql ++ q) (gv1 ++ ql)), (Permutation (ql ++ q) (gv1 ++ q)), (Permutation (ql ++ q) (gv1 ++ gv1)), (Permutation (ql ++ q) (gv1 ++ p)), (Permutation (ql ++ q) (p ++ ql)), (Permutation (ql ++ q) (p ++ q)), (Permutation (ql ++ q) (p ++ gv1)), (Permutation (ql ++ q) (p ++ p))
(Permutation (ql ++ q) []), (Permutation (ql ++ gv1) ql), (Permutation (ql ++ gv1) q), (Permutation (ql ++ gv1) gv1), (Permutation (ql ++ gv1) p), (Permutation (ql ++ gv1) (k :: ql)), (Permutation (ql ++ gv1) (k :: q)), (Permutation (ql ++ gv1) (k :: gv1)), (Permutation (ql ++ gv1) (k :: p)), (Permutation (ql ++ gv1) (a :: ql))
(Permutation (ql ++ gv1) (a :: q)), (Permutation (ql ++ gv1) (a :: gv1)), (Permutation (ql ++ gv1) (a :: p)), (Permutation (ql ++ gv1) (merge ql ql)), (Permutation (ql ++ gv1) (merge ql q)), (Permutation (ql ++ gv1) (merge ql gv1)), (Permutation (ql ++ gv1) (merge ql p)), (Permutation (ql ++ gv1) (merge q ql)), (Permutation (ql ++ gv1) (merge q q)), (Permutation (ql ++ gv1) (merge q gv1))
(Permutation (ql ++ gv1) (merge q p)), (Permutation (ql ++ gv1) (merge gv1 ql)), (Permutation (ql ++ gv1) (merge gv1 q)), (Permutation (ql ++ gv1) (merge gv1 gv1)), (Permutation (ql ++ gv1) (merge gv1 p)), (Permutation (ql ++ gv1) (merge p ql)), (Permutation (ql ++ gv1) (merge p q)), (Permutation (ql ++ gv1) (merge p gv1)), (Permutation (ql ++ gv1) (merge p p)), (Permutation (ql ++ gv1) (insert k ql))
(Permutation (ql ++ gv1) (insert k q)), (Permutation (ql ++ gv1) (insert k gv1)), (Permutation (ql ++ gv1) (insert k p)), (Permutation (ql ++ gv1) (insert a ql)), (Permutation (ql ++ gv1) (insert a q)), (Permutation (ql ++ gv1) (insert a gv1)), (Permutation (ql ++ gv1) (insert a p)), (Permutation (ql ++ gv1) (maybe_swap ql)), (Permutation (ql ++ gv1) (maybe_swap q)), (Permutation (ql ++ gv1) (maybe_swap gv1))
(Permutation (ql ++ gv1) (maybe_swap p)), (Permutation (ql ++ gv1) (ql ++ ql)), (Permutation (ql ++ gv1) (ql ++ q)), (Permutation (ql ++ gv1) (ql ++ p)), (Permutation (ql ++ gv1) (q ++ ql)), (Permutation (ql ++ gv1) (q ++ q)), (Permutation (ql ++ gv1) (q ++ gv1)), (Permutation (ql ++ gv1) (q ++ p)), (Permutation (ql ++ gv1) (gv1 ++ ql)), (Permutation (ql ++ gv1) (gv1 ++ q))
(Permutation (ql ++ gv1) (gv1 ++ gv1)), (Permutation (ql ++ gv1) (gv1 ++ p)), (Permutation (ql ++ gv1) (p ++ ql)), (Permutation (ql ++ gv1) (p ++ q)), (Permutation (ql ++ gv1) (p ++ gv1)), (Permutation (ql ++ gv1) (p ++ p)), (Permutation (ql ++ gv1) []), (Permutation (ql ++ p) ql), (Permutation (ql ++ p) q), (Permutation (ql ++ p) gv1)
(Permutation (ql ++ p) p), (Permutation (ql ++ p) (k :: ql)), (Permutation (ql ++ p) (k :: q)), (Permutation (ql ++ p) (k :: gv1)), (Permutation (ql ++ p) (k :: p)), (Permutation (ql ++ p) (a :: ql)), (Permutation (ql ++ p) (a :: q)), (Permutation (ql ++ p) (a :: gv1)), (Permutation (ql ++ p) (a :: p)), (Permutation (ql ++ p) (merge ql ql))
(Permutation (ql ++ p) (merge ql q)), (Permutation (ql ++ p) (merge ql gv1)), (Permutation (ql ++ p) (merge ql p)), (Permutation (ql ++ p) (merge q ql)), (Permutation (ql ++ p) (merge q q)), (Permutation (ql ++ p) (merge q gv1)), (Permutation (ql ++ p) (merge q p)), (Permutation (ql ++ p) (merge gv1 ql)), (Permutation (ql ++ p) (merge gv1 q)), (Permutation (ql ++ p) (merge gv1 gv1))
(Permutation (ql ++ p) (merge gv1 p)), (Permutation (ql ++ p) (merge p ql)), (Permutation (ql ++ p) (merge p q)), (Permutation (ql ++ p) (merge p gv1)), (Permutation (ql ++ p) (merge p p)), (Permutation (ql ++ p) (insert k ql)), (Permutation (ql ++ p) (insert k q)), (Permutation (ql ++ p) (insert k gv1)), (Permutation (ql ++ p) (insert k p)), (Permutation (ql ++ p) (insert a ql))
(Permutation (ql ++ p) (insert a q)), (Permutation (ql ++ p) (insert a gv1)), (Permutation (ql ++ p) (insert a p)), (Permutation (ql ++ p) (maybe_swap ql)), (Permutation (ql ++ p) (maybe_swap q)), (Permutation (ql ++ p) (maybe_swap gv1)), (Permutation (ql ++ p) (maybe_swap p)), (Permutation (ql ++ p) (ql ++ ql)), (Permutation (ql ++ p) (ql ++ q)), (Permutation (ql ++ p) (ql ++ gv1))
(Permutation (ql ++ p) (q ++ ql)), (Permutation (ql ++ p) (q ++ q)), (Permutation (ql ++ p) (q ++ gv1)), (Permutation (ql ++ p) (q ++ p)), (Permutation (ql ++ p) (gv1 ++ ql)), (Permutation (ql ++ p) (gv1 ++ q)), (Permutation (ql ++ p) (gv1 ++ gv1)), (Permutation (ql ++ p) (gv1 ++ p)), (Permutation (ql ++ p) (p ++ ql)), (Permutation (ql ++ p) (p ++ q))
(Permutation (ql ++ p) (p ++ gv1)), (Permutation (ql ++ p) (p ++ p)), (Permutation (ql ++ p) []), (Permutation (q ++ ql) ql), (Permutation (q ++ ql) q), (Permutation (q ++ ql) gv1), (Permutation (q ++ ql) p), (Permutation (q ++ ql) (k :: ql)), (Permutation (q ++ ql) (k :: q)), (Permutation (q ++ ql) (k :: gv1))
(Permutation (q ++ ql) (k :: p)), (Permutation (q ++ ql) (a :: ql)), (Permutation (q ++ ql) (a :: q)), (Permutation (q ++ ql) (a :: gv1)), (Permutation (q ++ ql) (a :: p)), (Permutation (q ++ ql) (merge ql ql)), (Permutation (q ++ ql) (merge ql q)), (Permutation (q ++ ql) (merge ql gv1)), (Permutation (q ++ ql) (merge ql p)), (Permutation (q ++ ql) (merge q ql))
(Permutation (q ++ ql) (merge q q)), (Permutation (q ++ ql) (merge q gv1)), (Permutation (q ++ ql) (merge q p)), (Permutation (q ++ ql) (merge gv1 ql)), (Permutation (q ++ ql) (merge gv1 q)), (Permutation (q ++ ql) (merge gv1 gv1)), (Permutation (q ++ ql) (merge gv1 p)), (Permutation (q ++ ql) (merge p ql)), (Permutation (q ++ ql) (merge p q)), (Permutation (q ++ ql) (merge p gv1))
(Permutation (q ++ ql) (merge p p)), (Permutation (q ++ ql) (insert k ql)), (Permutation (q ++ ql) (insert k q)), (Permutation (q ++ ql) (insert k gv1)), (Permutation (q ++ ql) (insert k p)), (Permutation (q ++ ql) (insert a ql)), (Permutation (q ++ ql) (insert a q)), (Permutation (q ++ ql) (insert a gv1)), (Permutation (q ++ ql) (insert a p)), (Permutation (q ++ ql) (maybe_swap ql))
(Permutation (q ++ ql) (maybe_swap q)), (Permutation (q ++ ql) (maybe_swap gv1)), (Permutation (q ++ ql) (maybe_swap p)), (Permutation (q ++ ql) (ql ++ ql)), (Permutation (q ++ ql) (ql ++ q)), (Permutation (q ++ ql) (ql ++ gv1)), (Permutation (q ++ ql) (ql ++ p)), (Permutation (q ++ ql) (q ++ q)), (Permutation (q ++ ql) (q ++ gv1)), (Permutation (q ++ ql) (q ++ p))
(Permutation (q ++ ql) (gv1 ++ ql)), (Permutation (q ++ ql) (gv1 ++ q)), (Permutation (q ++ ql) (gv1 ++ gv1)), (Permutation (q ++ ql) (gv1 ++ p)), (Permutation (q ++ ql) (p ++ ql)), (Permutation (q ++ ql) (p ++ q)), (Permutation (q ++ ql) (p ++ gv1)), (Permutation (q ++ ql) (p ++ p)), (Permutation (q ++ ql) []), (Permutation (q ++ q) ql)
(Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) p), (Permutation (q ++ q) (k :: ql)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: gv1)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (a :: ql)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: gv1))
(Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (merge ql ql)), (Permutation (q ++ q) (merge ql q)), (Permutation (q ++ q) (merge ql gv1)), (Permutation (q ++ q) (merge ql p)), (Permutation (q ++ q) (merge q ql)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge gv1 ql))
(Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (merge gv1 p)), (Permutation (q ++ q) (merge p ql)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p gv1)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (insert k ql)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k gv1))
(Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert a ql)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a gv1)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (maybe_swap ql)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap gv1)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (ql ++ ql))
(Permutation (q ++ q) (ql ++ q)), (Permutation (q ++ q) (ql ++ gv1)), (Permutation (q ++ q) (ql ++ p)), (Permutation (q ++ q) (q ++ ql)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (gv1 ++ ql)), (Permutation (q ++ q) (gv1 ++ q)), (Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) (gv1 ++ p))
(Permutation (q ++ q) (p ++ ql)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ gv1)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) ql), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) p), (Permutation (q ++ gv1) (k :: ql))
(Permutation (q ++ gv1) (k :: q)), (Permutation (q ++ gv1) (k :: gv1)), (Permutation (q ++ gv1) (k :: p)), (Permutation (q ++ gv1) (a :: ql)), (Permutation (q ++ gv1) (a :: q)), (Permutation (q ++ gv1) (a :: gv1)), (Permutation (q ++ gv1) (a :: p)), (Permutation (q ++ gv1) (merge ql ql)), (Permutation (q ++ gv1) (merge ql q)), (Permutation (q ++ gv1) (merge ql gv1))
(Permutation (q ++ gv1) (merge ql p)), (Permutation (q ++ gv1) (merge q ql)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge q p)), (Permutation (q ++ gv1) (merge gv1 ql)), (Permutation (q ++ gv1) (merge gv1 q)), (Permutation (q ++ gv1) (merge gv1 gv1)), (Permutation (q ++ gv1) (merge gv1 p)), (Permutation (q ++ gv1) (merge p ql))
(Permutation (q ++ gv1) (merge p q)), (Permutation (q ++ gv1) (merge p gv1)), (Permutation (q ++ gv1) (merge p p)), (Permutation (q ++ gv1) (insert k ql)), (Permutation (q ++ gv1) (insert k q)), (Permutation (q ++ gv1) (insert k gv1)), (Permutation (q ++ gv1) (insert k p)), (Permutation (q ++ gv1) (insert a ql)), (Permutation (q ++ gv1) (insert a q)), (Permutation (q ++ gv1) (insert a gv1))
(Permutation (q ++ gv1) (insert a p)), (Permutation (q ++ gv1) (maybe_swap ql)), (Permutation (q ++ gv1) (maybe_swap q)), (Permutation (q ++ gv1) (maybe_swap gv1)), (Permutation (q ++ gv1) (maybe_swap p)), (Permutation (q ++ gv1) (ql ++ ql)), (Permutation (q ++ gv1) (ql ++ q)), (Permutation (q ++ gv1) (ql ++ gv1)), (Permutation (q ++ gv1) (ql ++ p)), (Permutation (q ++ gv1) (q ++ ql))
(Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (q ++ p)), (Permutation (q ++ gv1) (gv1 ++ ql)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) (gv1 ++ p)), (Permutation (q ++ gv1) (p ++ ql)), (Permutation (q ++ gv1) (p ++ q)), (Permutation (q ++ gv1) (p ++ gv1)), (Permutation (q ++ gv1) (p ++ p))
(Permutation (q ++ gv1) []), (Permutation (q ++ p) ql), (Permutation (q ++ p) q), (Permutation (q ++ p) gv1), (Permutation (q ++ p) p), (Permutation (q ++ p) (k :: ql)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: gv1)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (a :: ql))
(Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: gv1)), (Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (merge ql ql)), (Permutation (q ++ p) (merge ql q)), (Permutation (q ++ p) (merge ql gv1)), (Permutation (q ++ p) (merge ql p)), (Permutation (q ++ p) (merge q ql)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q gv1))
(Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge gv1 ql)), (Permutation (q ++ p) (merge gv1 q)), (Permutation (q ++ p) (merge gv1 gv1)), (Permutation (q ++ p) (merge gv1 p)), (Permutation (q ++ p) (merge p ql)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p gv1)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (insert k ql))
(Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k gv1)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert a ql)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a gv1)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (maybe_swap ql)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap gv1))
(Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (ql ++ ql)), (Permutation (q ++ p) (ql ++ q)), (Permutation (q ++ p) (ql ++ gv1)), (Permutation (q ++ p) (ql ++ p)), (Permutation (q ++ p) (q ++ ql)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ gv1)), (Permutation (q ++ p) (gv1 ++ ql)), (Permutation (q ++ p) (gv1 ++ q))
(Permutation (q ++ p) (gv1 ++ gv1)), (Permutation (q ++ p) (gv1 ++ p)), (Permutation (q ++ p) (p ++ ql)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ gv1)), (Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) []), (Permutation (gv1 ++ ql) ql), (Permutation (gv1 ++ ql) q), (Permutation (gv1 ++ ql) gv1)
(Permutation (gv1 ++ ql) p), (Permutation (gv1 ++ ql) (k :: ql)), (Permutation (gv1 ++ ql) (k :: q)), (Permutation (gv1 ++ ql) (k :: gv1)), (Permutation (gv1 ++ ql) (k :: p)), (Permutation (gv1 ++ ql) (a :: ql)), (Permutation (gv1 ++ ql) (a :: q)), (Permutation (gv1 ++ ql) (a :: gv1)), (Permutation (gv1 ++ ql) (a :: p)), (Permutation (gv1 ++ ql) (merge ql ql))
(Permutation (gv1 ++ ql) (merge ql q)), (Permutation (gv1 ++ ql) (merge ql gv1)), (Permutation (gv1 ++ ql) (merge ql p)), (Permutation (gv1 ++ ql) (merge q ql)), (Permutation (gv1 ++ ql) (merge q q)), (Permutation (gv1 ++ ql) (merge q gv1)), (Permutation (gv1 ++ ql) (merge q p)), (Permutation (gv1 ++ ql) (merge gv1 ql)), (Permutation (gv1 ++ ql) (merge gv1 q)), (Permutation (gv1 ++ ql) (merge gv1 gv1))
(Permutation (gv1 ++ ql) (merge gv1 p)), (Permutation (gv1 ++ ql) (merge p ql)), (Permutation (gv1 ++ ql) (merge p q)), (Permutation (gv1 ++ ql) (merge p gv1)), (Permutation (gv1 ++ ql) (merge p p)), (Permutation (gv1 ++ ql) (insert k ql)), (Permutation (gv1 ++ ql) (insert k q)), (Permutation (gv1 ++ ql) (insert k gv1)), (Permutation (gv1 ++ ql) (insert k p)), (Permutation (gv1 ++ ql) (insert a ql))
(Permutation (gv1 ++ ql) (insert a q)), (Permutation (gv1 ++ ql) (insert a gv1)), (Permutation (gv1 ++ ql) (insert a p)), (Permutation (gv1 ++ ql) (maybe_swap ql)), (Permutation (gv1 ++ ql) (maybe_swap q)), (Permutation (gv1 ++ ql) (maybe_swap gv1)), (Permutation (gv1 ++ ql) (maybe_swap p)), (Permutation (gv1 ++ ql) (ql ++ ql)), (Permutation (gv1 ++ ql) (ql ++ q)), (Permutation (gv1 ++ ql) (ql ++ gv1))
(Permutation (gv1 ++ ql) (ql ++ p)), (Permutation (gv1 ++ ql) (q ++ ql)), (Permutation (gv1 ++ ql) (q ++ q)), (Permutation (gv1 ++ ql) (q ++ gv1)), (Permutation (gv1 ++ ql) (q ++ p)), (Permutation (gv1 ++ ql) (gv1 ++ q)), (Permutation (gv1 ++ ql) (gv1 ++ gv1)), (Permutation (gv1 ++ ql) (gv1 ++ p)), (Permutation (gv1 ++ ql) (p ++ ql)), (Permutation (gv1 ++ ql) (p ++ q))
(Permutation (gv1 ++ ql) (p ++ gv1)), (Permutation (gv1 ++ ql) (p ++ p)), (Permutation (gv1 ++ ql) []), (Permutation (gv1 ++ q) ql), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1), (Permutation (gv1 ++ q) p), (Permutation (gv1 ++ q) (k :: ql)), (Permutation (gv1 ++ q) (k :: q)), (Permutation (gv1 ++ q) (k :: gv1))
(Permutation (gv1 ++ q) (k :: p)), (Permutation (gv1 ++ q) (a :: ql)), (Permutation (gv1 ++ q) (a :: q)), (Permutation (gv1 ++ q) (a :: gv1)), (Permutation (gv1 ++ q) (a :: p)), (Permutation (gv1 ++ q) (merge ql ql)), (Permutation (gv1 ++ q) (merge ql q)), (Permutation (gv1 ++ q) (merge ql gv1)), (Permutation (gv1 ++ q) (merge ql p)), (Permutation (gv1 ++ q) (merge q ql))
(Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge q p)), (Permutation (gv1 ++ q) (merge gv1 ql)), (Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (merge gv1 p)), (Permutation (gv1 ++ q) (merge p ql)), (Permutation (gv1 ++ q) (merge p q)), (Permutation (gv1 ++ q) (merge p gv1))
(Permutation (gv1 ++ q) (merge p p)), (Permutation (gv1 ++ q) (insert k ql)), (Permutation (gv1 ++ q) (insert k q)), (Permutation (gv1 ++ q) (insert k gv1)), (Permutation (gv1 ++ q) (insert k p)), (Permutation (gv1 ++ q) (insert a ql)), (Permutation (gv1 ++ q) (insert a q)), (Permutation (gv1 ++ q) (insert a gv1)), (Permutation (gv1 ++ q) (insert a p)), (Permutation (gv1 ++ q) (maybe_swap ql))
(Permutation (gv1 ++ q) (maybe_swap q)), (Permutation (gv1 ++ q) (maybe_swap gv1)), (Permutation (gv1 ++ q) (maybe_swap p)), (Permutation (gv1 ++ q) (ql ++ ql)), (Permutation (gv1 ++ q) (ql ++ q)), (Permutation (gv1 ++ q) (ql ++ gv1)), (Permutation (gv1 ++ q) (ql ++ p)), (Permutation (gv1 ++ q) (q ++ ql)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1))
(Permutation (gv1 ++ q) (q ++ p)), (Permutation (gv1 ++ q) (gv1 ++ ql)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ p)), (Permutation (gv1 ++ q) (p ++ ql)), (Permutation (gv1 ++ q) (p ++ q)), (Permutation (gv1 ++ q) (p ++ gv1)), (Permutation (gv1 ++ q) (p ++ p)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) ql)
(Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) p), (Permutation (gv1 ++ gv1) (k :: ql)), (Permutation (gv1 ++ gv1) (k :: q)), (Permutation (gv1 ++ gv1) (k :: gv1)), (Permutation (gv1 ++ gv1) (k :: p)), (Permutation (gv1 ++ gv1) (a :: ql)), (Permutation (gv1 ++ gv1) (a :: q)), (Permutation (gv1 ++ gv1) (a :: gv1))
(Permutation (gv1 ++ gv1) (a :: p)), (Permutation (gv1 ++ gv1) (merge ql ql)), (Permutation (gv1 ++ gv1) (merge ql q)), (Permutation (gv1 ++ gv1) (merge ql gv1)), (Permutation (gv1 ++ gv1) (merge ql p)), (Permutation (gv1 ++ gv1) (merge q ql)), (Permutation (gv1 ++ gv1) (merge q q)), (Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge q p)), (Permutation (gv1 ++ gv1) (merge gv1 ql))
(Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 p)), (Permutation (gv1 ++ gv1) (merge p ql)), (Permutation (gv1 ++ gv1) (merge p q)), (Permutation (gv1 ++ gv1) (merge p gv1)), (Permutation (gv1 ++ gv1) (merge p p)), (Permutation (gv1 ++ gv1) (insert k ql)), (Permutation (gv1 ++ gv1) (insert k q)), (Permutation (gv1 ++ gv1) (insert k gv1))
(Permutation (gv1 ++ gv1) (insert k p)), (Permutation (gv1 ++ gv1) (insert a ql)), (Permutation (gv1 ++ gv1) (insert a q)), (Permutation (gv1 ++ gv1) (insert a gv1)), (Permutation (gv1 ++ gv1) (insert a p)), (Permutation (gv1 ++ gv1) (maybe_swap ql)), (Permutation (gv1 ++ gv1) (maybe_swap q)), (Permutation (gv1 ++ gv1) (maybe_swap gv1)), (Permutation (gv1 ++ gv1) (maybe_swap p)), (Permutation (gv1 ++ gv1) (ql ++ ql))
(Permutation (gv1 ++ gv1) (ql ++ q)), (Permutation (gv1 ++ gv1) (ql ++ gv1)), (Permutation (gv1 ++ gv1) (ql ++ p)), (Permutation (gv1 ++ gv1) (q ++ ql)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (q ++ p)), (Permutation (gv1 ++ gv1) (gv1 ++ ql)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) (gv1 ++ p))
(Permutation (gv1 ++ gv1) (p ++ ql)), (Permutation (gv1 ++ gv1) (p ++ q)), (Permutation (gv1 ++ gv1) (p ++ gv1)), (Permutation (gv1 ++ gv1) (p ++ p)), (Permutation (gv1 ++ gv1) []), (Permutation (gv1 ++ p) ql), (Permutation (gv1 ++ p) q), (Permutation (gv1 ++ p) gv1), (Permutation (gv1 ++ p) p), (Permutation (gv1 ++ p) (k :: ql))
(Permutation (gv1 ++ p) (k :: q)), (Permutation (gv1 ++ p) (k :: gv1)), (Permutation (gv1 ++ p) (k :: p)), (Permutation (gv1 ++ p) (a :: ql)), (Permutation (gv1 ++ p) (a :: q)), (Permutation (gv1 ++ p) (a :: gv1)), (Permutation (gv1 ++ p) (a :: p)), (Permutation (gv1 ++ p) (merge ql ql)), (Permutation (gv1 ++ p) (merge ql q)), (Permutation (gv1 ++ p) (merge ql gv1))
(Permutation (gv1 ++ p) (merge ql p)), (Permutation (gv1 ++ p) (merge q ql)), (Permutation (gv1 ++ p) (merge q q)), (Permutation (gv1 ++ p) (merge q gv1)), (Permutation (gv1 ++ p) (merge q p)), (Permutation (gv1 ++ p) (merge gv1 ql)), (Permutation (gv1 ++ p) (merge gv1 q)), (Permutation (gv1 ++ p) (merge gv1 gv1)), (Permutation (gv1 ++ p) (merge gv1 p)), (Permutation (gv1 ++ p) (merge p ql))
(Permutation (gv1 ++ p) (merge p q)), (Permutation (gv1 ++ p) (merge p gv1)), (Permutation (gv1 ++ p) (merge p p)), (Permutation (gv1 ++ p) (insert k ql)), (Permutation (gv1 ++ p) (insert k q)), (Permutation (gv1 ++ p) (insert k gv1)), (Permutation (gv1 ++ p) (insert k p)), (Permutation (gv1 ++ p) (insert a ql)), (Permutation (gv1 ++ p) (insert a q)), (Permutation (gv1 ++ p) (insert a gv1))
(Permutation (gv1 ++ p) (insert a p)), (Permutation (gv1 ++ p) (maybe_swap ql)), (Permutation (gv1 ++ p) (maybe_swap q)), (Permutation (gv1 ++ p) (maybe_swap gv1)), (Permutation (gv1 ++ p) (maybe_swap p)), (Permutation (gv1 ++ p) (ql ++ ql)), (Permutation (gv1 ++ p) (ql ++ q)), (Permutation (gv1 ++ p) (ql ++ gv1)), (Permutation (gv1 ++ p) (ql ++ p)), (Permutation (gv1 ++ p) (q ++ ql))
(Permutation (gv1 ++ p) (q ++ q)), (Permutation (gv1 ++ p) (q ++ gv1)), (Permutation (gv1 ++ p) (q ++ p)), (Permutation (gv1 ++ p) (gv1 ++ ql)), (Permutation (gv1 ++ p) (gv1 ++ q)), (Permutation (gv1 ++ p) (gv1 ++ gv1)), (Permutation (gv1 ++ p) (p ++ ql)), (Permutation (gv1 ++ p) (p ++ q)), (Permutation (gv1 ++ p) (p ++ gv1)), (Permutation (gv1 ++ p) (p ++ p))
(Permutation (gv1 ++ p) []), (Permutation (p ++ ql) ql), (Permutation (p ++ ql) q), (Permutation (p ++ ql) gv1), (Permutation (p ++ ql) p), (Permutation (p ++ ql) (k :: ql)), (Permutation (p ++ ql) (k :: q)), (Permutation (p ++ ql) (k :: gv1)), (Permutation (p ++ ql) (k :: p)), (Permutation (p ++ ql) (a :: ql))
(Permutation (p ++ ql) (a :: q)), (Permutation (p ++ ql) (a :: gv1)), (Permutation (p ++ ql) (a :: p)), (Permutation (p ++ ql) (merge ql ql)), (Permutation (p ++ ql) (merge ql q)), (Permutation (p ++ ql) (merge ql gv1)), (Permutation (p ++ ql) (merge ql p)), (Permutation (p ++ ql) (merge q ql)), (Permutation (p ++ ql) (merge q q)), (Permutation (p ++ ql) (merge q gv1))
(Permutation (p ++ ql) (merge q p)), (Permutation (p ++ ql) (merge gv1 ql)), (Permutation (p ++ ql) (merge gv1 q)), (Permutation (p ++ ql) (merge gv1 gv1)), (Permutation (p ++ ql) (merge gv1 p)), (Permutation (p ++ ql) (merge p ql)), (Permutation (p ++ ql) (merge p q)), (Permutation (p ++ ql) (merge p gv1)), (Permutation (p ++ ql) (merge p p)), (Permutation (p ++ ql) (insert k ql))
(Permutation (p ++ ql) (insert k q)), (Permutation (p ++ ql) (insert k gv1)), (Permutation (p ++ ql) (insert k p)), (Permutation (p ++ ql) (insert a ql)), (Permutation (p ++ ql) (insert a q)), (Permutation (p ++ ql) (insert a gv1)), (Permutation (p ++ ql) (insert a p)), (Permutation (p ++ ql) (maybe_swap ql)), (Permutation (p ++ ql) (maybe_swap q)), (Permutation (p ++ ql) (maybe_swap gv1))
(Permutation (p ++ ql) (maybe_swap p)), (Permutation (p ++ ql) (ql ++ ql)), (Permutation (p ++ ql) (ql ++ q)), (Permutation (p ++ ql) (ql ++ gv1)), (Permutation (p ++ ql) (ql ++ p)), (Permutation (p ++ ql) (q ++ ql)), (Permutation (p ++ ql) (q ++ q)), (Permutation (p ++ ql) (q ++ gv1)), (Permutation (p ++ ql) (q ++ p)), (Permutation (p ++ ql) (gv1 ++ ql))
(Permutation (p ++ ql) (gv1 ++ q)), (Permutation (p ++ ql) (gv1 ++ gv1)), (Permutation (p ++ ql) (gv1 ++ p)), (Permutation (p ++ ql) (p ++ q)), (Permutation (p ++ ql) (p ++ gv1)), (Permutation (p ++ ql) (p ++ p)), (Permutation (p ++ ql) []), (Permutation (p ++ q) ql), (Permutation (p ++ q) q), (Permutation (p ++ q) gv1)
(Permutation (p ++ q) p), (Permutation (p ++ q) (k :: ql)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: gv1)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (a :: ql)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: gv1)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (merge ql ql))
(Permutation (p ++ q) (merge ql q)), (Permutation (p ++ q) (merge ql gv1)), (Permutation (p ++ q) (merge ql p)), (Permutation (p ++ q) (merge q ql)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q gv1)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge gv1 ql)), (Permutation (p ++ q) (merge gv1 q)), (Permutation (p ++ q) (merge gv1 gv1))
(Permutation (p ++ q) (merge gv1 p)), (Permutation (p ++ q) (merge p ql)), (Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p gv1)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (insert k ql)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k gv1)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert a ql))
(Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a gv1)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (maybe_swap ql)), (Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap gv1)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (ql ++ ql)), (Permutation (p ++ q) (ql ++ q)), (Permutation (p ++ q) (ql ++ gv1))
(Permutation (p ++ q) (ql ++ p)), (Permutation (p ++ q) (q ++ ql)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ gv1)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (gv1 ++ ql)), (Permutation (p ++ q) (gv1 ++ q)), (Permutation (p ++ q) (gv1 ++ gv1)), (Permutation (p ++ q) (gv1 ++ p)), (Permutation (p ++ q) (p ++ ql))
(Permutation (p ++ q) (p ++ gv1)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) []), (Permutation (p ++ gv1) ql), (Permutation (p ++ gv1) q), (Permutation (p ++ gv1) gv1), (Permutation (p ++ gv1) p), (Permutation (p ++ gv1) (k :: ql)), (Permutation (p ++ gv1) (k :: q)), (Permutation (p ++ gv1) (k :: gv1))
(Permutation (p ++ gv1) (k :: p)), (Permutation (p ++ gv1) (a :: ql)), (Permutation (p ++ gv1) (a :: q)), (Permutation (p ++ gv1) (a :: gv1)), (Permutation (p ++ gv1) (a :: p)), (Permutation (p ++ gv1) (merge ql ql)), (Permutation (p ++ gv1) (merge ql q)), (Permutation (p ++ gv1) (merge ql gv1)), (Permutation (p ++ gv1) (merge ql p)), (Permutation (p ++ gv1) (merge q ql))
(Permutation (p ++ gv1) (merge q q)), (Permutation (p ++ gv1) (merge q gv1)), (Permutation (p ++ gv1) (merge q p)), (Permutation (p ++ gv1) (merge gv1 ql)), (Permutation (p ++ gv1) (merge gv1 q)), (Permutation (p ++ gv1) (merge gv1 gv1)), (Permutation (p ++ gv1) (merge gv1 p)), (Permutation (p ++ gv1) (merge p ql)), (Permutation (p ++ gv1) (merge p q)), (Permutation (p ++ gv1) (merge p gv1))
(Permutation (p ++ gv1) (merge p p)), (Permutation (p ++ gv1) (insert k ql)), (Permutation (p ++ gv1) (insert k q)), (Permutation (p ++ gv1) (insert k gv1)), (Permutation (p ++ gv1) (insert k p)), (Permutation (p ++ gv1) (insert a ql)), (Permutation (p ++ gv1) (insert a q)), (Permutation (p ++ gv1) (insert a gv1)), (Permutation (p ++ gv1) (insert a p)), (Permutation (p ++ gv1) (maybe_swap ql))
(Permutation (p ++ gv1) (maybe_swap q)), (Permutation (p ++ gv1) (maybe_swap gv1)), (Permutation (p ++ gv1) (maybe_swap p)), (Permutation (p ++ gv1) (ql ++ ql)), (Permutation (p ++ gv1) (ql ++ q)), (Permutation (p ++ gv1) (ql ++ gv1)), (Permutation (p ++ gv1) (ql ++ p)), (Permutation (p ++ gv1) (q ++ ql)), (Permutation (p ++ gv1) (q ++ q)), (Permutation (p ++ gv1) (q ++ gv1))
(Permutation (p ++ gv1) (q ++ p)), (Permutation (p ++ gv1) (gv1 ++ ql)), (Permutation (p ++ gv1) (gv1 ++ q)), (Permutation (p ++ gv1) (gv1 ++ gv1)), (Permutation (p ++ gv1) (gv1 ++ p)), (Permutation (p ++ gv1) (p ++ ql)), (Permutation (p ++ gv1) (p ++ q)), (Permutation (p ++ gv1) (p ++ p)), (Permutation (p ++ gv1) []), (Permutation (p ++ p) ql)
(Permutation (p ++ p) q), (Permutation (p ++ p) gv1), (Permutation (p ++ p) p), (Permutation (p ++ p) (k :: ql)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: gv1)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (a :: ql)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: gv1))
(Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge ql ql)), (Permutation (p ++ p) (merge ql q)), (Permutation (p ++ p) (merge ql gv1)), (Permutation (p ++ p) (merge ql p)), (Permutation (p ++ p) (merge q ql)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q gv1)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge gv1 ql))
(Permutation (p ++ p) (merge gv1 q)), (Permutation (p ++ p) (merge gv1 gv1)), (Permutation (p ++ p) (merge gv1 p)), (Permutation (p ++ p) (merge p ql)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p gv1)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (insert k ql)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k gv1))
(Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert a ql)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a gv1)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (maybe_swap ql)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap gv1)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (ql ++ ql))
(Permutation (p ++ p) (ql ++ q)), (Permutation (p ++ p) (ql ++ gv1)), (Permutation (p ++ p) (ql ++ p)), (Permutation (p ++ p) (q ++ ql)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ gv1)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (gv1 ++ ql)), (Permutation (p ++ p) (gv1 ++ q)), (Permutation (p ++ p) (gv1 ++ gv1))
(Permutation (p ++ p) (gv1 ++ p)), (Permutation (p ++ p) (p ++ ql)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ gv1)), (Permutation (p ++ p) []), (Permutation [] ql), (Permutation [] q), (Permutation [] gv1), (Permutation [] p), (Permutation [] (k :: ql))
(Permutation [] (k :: q)), (Permutation [] (k :: gv1)), (Permutation [] (k :: p)), (Permutation [] (a :: ql)), (Permutation [] (a :: q)), (Permutation [] (a :: gv1)), (Permutation [] (a :: p)), (Permutation [] (merge ql ql)), (Permutation [] (merge ql q)), (Permutation [] (merge ql gv1))
(Permutation [] (merge ql p)), (Permutation [] (merge q ql)), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge q p)), (Permutation [] (merge gv1 ql)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (merge gv1 p)), (Permutation [] (merge p ql))
(Permutation [] (merge p q)), (Permutation [] (merge p gv1)), (Permutation [] (merge p p)), (Permutation [] (insert k ql)), (Permutation [] (insert k q)), (Permutation [] (insert k gv1)), (Permutation [] (insert k p)), (Permutation [] (insert a ql)), (Permutation [] (insert a q)), (Permutation [] (insert a gv1))
(Permutation [] (insert a p)), (Permutation [] (maybe_swap ql)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap gv1)), (Permutation [] (maybe_swap p)), (Permutation [] (ql ++ ql)), (Permutation [] (ql ++ q)), (Permutation [] (ql ++ gv1)), (Permutation [] (ql ++ p)), (Permutation [] (q ++ ql))
(Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (q ++ p)), (Permutation [] (gv1 ++ ql)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (Permutation [] (gv1 ++ p)), (Permutation [] (p ++ ql)), (Permutation [] (p ++ q)), (Permutation [] (p ++ gv1))
(Permutation [] (p ++ p)), (In k (k :: ql)), (In k (k :: q)), (In k (k :: gv1)), (In k (k :: p)), (In k (a :: ql)), (In k (a :: q)), (In k (a :: gv1)), (In k (a :: p)), (In k (merge ql ql))
(In k (merge ql q)), (In k (merge ql gv1)), (In k (merge ql p)), (In k (merge q ql)), (In k (merge q q)), (In k (merge q gv1)), (In k (merge q p)), (In k (merge gv1 ql)), (In k (merge gv1 q)), (In k (merge gv1 gv1))
(In k (merge gv1 p)), (In k (merge p ql)), (In k (merge p q)), (In k (merge p gv1)), (In k (merge p p)), (In k (insert k ql)), (In k (insert k q)), (In k (insert k gv1)), (In k (insert k p)), (In k (insert a ql))
(In k (insert a q)), (In k (insert a gv1)), (In k (insert a p)), (In k (maybe_swap ql)), (In k (maybe_swap q)), (In k (maybe_swap gv1)), (In k (maybe_swap p)), (In k (ql ++ ql)), (In k (ql ++ q)), (In k (ql ++ gv1))
(In k (ql ++ p)), (In k (q ++ ql)), (In k (q ++ q)), (In k (q ++ gv1)), (In k (q ++ p)), (In k (gv1 ++ ql)), (In k (gv1 ++ q)), (In k (gv1 ++ gv1)), (In k (gv1 ++ p)), (In k (p ++ ql))
(In k (p ++ q)), (In k (p ++ gv1)), (In k (p ++ p)), (In a (k :: ql)), (In a (k :: q)), (In a (k :: gv1)), (In a (k :: p)), (In a (a :: ql)), (In a (a :: q)), (In a (a :: gv1))
(In a (a :: p)), (In a (merge ql ql)), (In a (merge ql q)), (In a (merge ql gv1)), (In a (merge ql p)), (In a (merge q ql)), (In a (merge q q)), (In a (merge q gv1)), (In a (merge q p)), (In a (merge gv1 ql))
(In a (merge gv1 q)), (In a (merge gv1 gv1)), (In a (merge gv1 p)), (In a (merge p ql)), (In a (merge p q)), (In a (merge p gv1)), (In a (merge p p)), (In a (insert k ql)), (In a (insert k q)), (In a (insert k gv1))
(In a (insert k p)), (In a (insert a ql)), (In a (insert a q)), (In a (insert a gv1)), (In a (insert a p)), (In a (maybe_swap ql)), (In a (maybe_swap q)), (In a (maybe_swap gv1)), (In a (maybe_swap p)), (In a (ql ++ ql))
(In a (ql ++ q)), (In a (ql ++ gv1)), (In a (ql ++ p)), (In a (q ++ ql)), (In a (q ++ q)), (In a (q ++ gv1)), (In a (q ++ p)), (In a (gv1 ++ ql)), (In a (gv1 ++ q)), (In a (gv1 ++ gv1))
(In a (gv1 ++ p)), (In a (p ++ ql)), (In a (p ++ q)), (In a (p ++ gv1)), (In a (p ++ p)), (In (length ql) ql), (In (length ql) q), (In (length ql) gv1), (In (length ql) p), (In (length ql) (k :: ql))
(In (length ql) (k :: q)), (In (length ql) (k :: gv1)), (In (length ql) (k :: p)), (In (length ql) (a :: ql)), (In (length ql) (a :: q)), (In (length ql) (a :: gv1)), (In (length ql) (a :: p)), (In (length ql) (merge ql ql)), (In (length ql) (merge ql q)), (In (length ql) (merge ql gv1))
(In (length ql) (merge ql p)), (In (length ql) (merge q ql)), (In (length ql) (merge q q)), (In (length ql) (merge q gv1)), (In (length ql) (merge q p)), (In (length ql) (merge gv1 ql)), (In (length ql) (merge gv1 q)), (In (length ql) (merge gv1 gv1)), (In (length ql) (merge gv1 p)), (In (length ql) (merge p ql))
(In (length ql) (merge p q)), (In (length ql) (merge p gv1)), (In (length ql) (merge p p)), (In (length ql) (insert k ql)), (In (length ql) (insert k q)), (In (length ql) (insert k gv1)), (In (length ql) (insert k p)), (In (length ql) (insert a ql)), (In (length ql) (insert a q)), (In (length ql) (insert a gv1))
(In (length ql) (insert a p)), (In (length ql) (maybe_swap ql)), (In (length ql) (maybe_swap q)), (In (length ql) (maybe_swap gv1)), (In (length ql) (maybe_swap p)), (In (length ql) (ql ++ ql)), (In (length ql) (ql ++ q)), (In (length ql) (ql ++ gv1)), (In (length ql) (ql ++ p)), (In (length ql) (q ++ ql))
(In (length ql) (q ++ q)), (In (length ql) (q ++ gv1)), (In (length ql) (q ++ p)), (In (length ql) (gv1 ++ ql)), (In (length ql) (gv1 ++ q)), (In (length ql) (gv1 ++ gv1)), (In (length ql) (gv1 ++ p)), (In (length ql) (p ++ ql)), (In (length ql) (p ++ q)), (In (length ql) (p ++ gv1))
(In (length ql) (p ++ p)), (In (length q) ql), (In (length q) q), (In (length q) gv1), (In (length q) p), (In (length q) (k :: ql)), (In (length q) (k :: q)), (In (length q) (k :: gv1)), (In (length q) (k :: p)), (In (length q) (a :: ql))
(In (length q) (a :: q)), (In (length q) (a :: gv1)), (In (length q) (a :: p)), (In (length q) (merge ql ql)), (In (length q) (merge ql q)), (In (length q) (merge ql gv1)), (In (length q) (merge ql p)), (In (length q) (merge q ql)), (In (length q) (merge q q)), (In (length q) (merge q gv1))
(In (length q) (merge q p)), (In (length q) (merge gv1 ql)), (In (length q) (merge gv1 q)), (In (length q) (merge gv1 gv1)), (In (length q) (merge gv1 p)), (In (length q) (merge p ql)), (In (length q) (merge p q)), (In (length q) (merge p gv1)), (In (length q) (merge p p)), (In (length q) (insert k ql))
(In (length q) (insert k q)), (In (length q) (insert k gv1)), (In (length q) (insert k p)), (In (length q) (insert a ql)), (In (length q) (insert a q)), (In (length q) (insert a gv1)), (In (length q) (insert a p)), (In (length q) (maybe_swap ql)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap gv1))
(In (length q) (maybe_swap p)), (In (length q) (ql ++ ql)), (In (length q) (ql ++ q)), (In (length q) (ql ++ gv1)), (In (length q) (ql ++ p)), (In (length q) (q ++ ql)), (In (length q) (q ++ q)), (In (length q) (q ++ gv1)), (In (length q) (q ++ p)), (In (length q) (gv1 ++ ql))
(In (length q) (gv1 ++ q)), (In (length q) (gv1 ++ gv1)), (In (length q) (gv1 ++ p)), (In (length q) (p ++ ql)), (In (length q) (p ++ q)), (In (length q) (p ++ gv1)), (In (length q) (p ++ p)), (In (length gv1) ql), (In (length gv1) q), (In (length gv1) gv1)
(In (length gv1) p), (In (length gv1) (k :: ql)), (In (length gv1) (k :: q)), (In (length gv1) (k :: gv1)), (In (length gv1) (k :: p)), (In (length gv1) (a :: ql)), (In (length gv1) (a :: q)), (In (length gv1) (a :: gv1)), (In (length gv1) (a :: p)), (In (length gv1) (merge ql ql))
(In (length gv1) (merge ql q)), (In (length gv1) (merge ql gv1)), (In (length gv1) (merge ql p)), (In (length gv1) (merge q ql)), (In (length gv1) (merge q q)), (In (length gv1) (merge q gv1)), (In (length gv1) (merge q p)), (In (length gv1) (merge gv1 ql)), (In (length gv1) (merge gv1 q)), (In (length gv1) (merge gv1 gv1))
(In (length gv1) (merge gv1 p)), (In (length gv1) (merge p ql)), (In (length gv1) (merge p q)), (In (length gv1) (merge p gv1)), (In (length gv1) (merge p p)), (In (length gv1) (insert k ql)), (In (length gv1) (insert k q)), (In (length gv1) (insert k gv1)), (In (length gv1) (insert k p)), (In (length gv1) (insert a ql))
(In (length gv1) (insert a q)), (In (length gv1) (insert a gv1)), (In (length gv1) (insert a p)), (In (length gv1) (maybe_swap ql)), (In (length gv1) (maybe_swap q)), (In (length gv1) (maybe_swap gv1)), (In (length gv1) (maybe_swap p)), (In (length gv1) (ql ++ ql)), (In (length gv1) (ql ++ q)), (In (length gv1) (ql ++ gv1))
(In (length gv1) (ql ++ p)), (In (length gv1) (q ++ ql)), (In (length gv1) (q ++ q)), (In (length gv1) (q ++ gv1)), (In (length gv1) (q ++ p)), (In (length gv1) (gv1 ++ ql)), (In (length gv1) (gv1 ++ q)), (In (length gv1) (gv1 ++ gv1)), (In (length gv1) (gv1 ++ p)), (In (length gv1) (p ++ ql))
(In (length gv1) (p ++ q)), (In (length gv1) (p ++ gv1)), (In (length gv1) (p ++ p)), (In (length p) ql), (In (length p) q), (In (length p) gv1), (In (length p) p), (In (length p) (k :: ql)), (In (length p) (k :: q)), (In (length p) (k :: gv1))
(In (length p) (k :: p)), (In (length p) (a :: ql)), (In (length p) (a :: q)), (In (length p) (a :: gv1)), (In (length p) (a :: p)), (In (length p) (merge ql ql)), (In (length p) (merge ql q)), (In (length p) (merge ql gv1)), (In (length p) (merge ql p)), (In (length p) (merge q ql))
(In (length p) (merge q q)), (In (length p) (merge q gv1)), (In (length p) (merge q p)), (In (length p) (merge gv1 ql)), (In (length p) (merge gv1 q)), (In (length p) (merge gv1 gv1)), (In (length p) (merge gv1 p)), (In (length p) (merge p ql)), (In (length p) (merge p q)), (In (length p) (merge p gv1))
(In (length p) (merge p p)), (In (length p) (insert k ql)), (In (length p) (insert k q)), (In (length p) (insert k gv1)), (In (length p) (insert k p)), (In (length p) (insert a ql)), (In (length p) (insert a q)), (In (length p) (insert a gv1)), (In (length p) (insert a p)), (In (length p) (maybe_swap ql))
(In (length p) (maybe_swap q)), (In (length p) (maybe_swap gv1)), (In (length p) (maybe_swap p)), (In (length p) (ql ++ ql)), (In (length p) (ql ++ q)), (In (length p) (ql ++ gv1)), (In (length p) (ql ++ p)), (In (length p) (q ++ ql)), (In (length p) (q ++ q)), (In (length p) (q ++ gv1))
(In (length p) (q ++ p)), (In (length p) (gv1 ++ ql)), (In (length p) (gv1 ++ q)), (In (length p) (gv1 ++ gv1)), (In (length p) (gv1 ++ p)), (In (length p) (p ++ ql)), (In (length p) (p ++ q)), (In (length p) (p ++ gv1)), (In (length p) (p ++ p)), (k < length ql)
(k < length q), (k < length gv1), (k < length p), (a < length ql), (a < length q), (a < length gv1), (a < length p), (length ql < k), (length ql < a), (length ql < length q)
(length ql < length gv1), (length ql < length p), (length q < k), (length q < a), (length q < length ql), (length q < length gv1), (length q < length p), (length gv1 < k), (length gv1 < a), (length gv1 < length ql)
(length gv1 < length q), (length gv1 < length p), (length p < k), (length p < a), (length p < length ql), (length p < length q), (length p < length gv1), (k <= length ql), (k <= length q), (k <= length gv1)
(k <= length p), (a <= length ql), (a <= length q), (a <= length gv1), (a <= length p), (length ql <= k), (length ql <= a), (length ql <= length q), (length ql <= length gv1), (length ql <= length p)
(length q <= k), (length q <= a), (length q <= length ql), (length q <= length gv1), (length q <= length p), (length gv1 <= k), (length gv1 <= a), (length gv1 <= length ql), (length gv1 <= length q), (length gv1 <= length p)
(length p <= k), (length p <= a), (length p <= length ql), (length p <= length q), (length p <= length gv1), (~ Abs ql ql), (~ Abs ql q), (~ Abs ql gv1), (~ Abs ql p), (~ Abs q ql)
(~ Abs q q), (~ Abs q gv1), (~ Abs q p), (~ Abs gv1 ql), (~ Abs gv1 q), (~ Abs gv1 gv1), (~ Abs gv1 p), (~ Abs p ql), (~ Abs p q), (~ Abs p gv1)
(~ Abs p p), (~ priq ql), (~ priq q), (~ priq gv1), (~ priq p), (~ Permutation ql ql), (~ Permutation ql q), (~ Permutation ql gv1), (~ Permutation ql p), (~ Permutation q ql)
(~ Permutation q q), (~ Permutation q gv1), (~ Permutation q p), (~ Permutation gv1 ql), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ Permutation gv1 p), (~ Permutation p ql), (~ Permutation p q), (~ Permutation p gv1)
(~ Permutation p p), (~ In k ql), (~ In k q), (~ In k gv1), (~ In k p), (~ In a ql), (~ In a q), (~ In a gv1), (~ In a p), (~ k < k)
(~ k < a), (~ a < k), (~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (ql <> ql), (ql <> q), (ql <> gv1)
(ql <> p), (q <> ql), (q <> q), (q <> gv1), (q <> p), (gv1 <> ql), (gv1 <> q), (gv1 <> gv1), (gv1 <> p), (p <> ql)
(p <> q), (p <> gv1), (p <> p), (k <> k), (k <> a), (a <> k), (a <> a), (None = Some ql), (None = Some q), (None = Some gv1)
(None = Some p), (k :: ql = ql), (k :: ql = q), (k :: ql = gv1), (k :: ql = p), (k :: ql = merge ql ql), (k :: ql = merge ql q), (k :: ql = merge ql gv1), (k :: ql = merge ql p), (k :: ql = merge q ql)
(k :: ql = merge q q), (k :: ql = merge q gv1), (k :: ql = merge q p), (k :: ql = merge gv1 ql), (k :: ql = merge gv1 q), (k :: ql = merge gv1 gv1), (k :: ql = merge gv1 p), (k :: ql = merge p ql), (k :: ql = merge p q), (k :: ql = merge p gv1)
(k :: ql = merge p p), (k :: ql = insert k ql), (k :: ql = insert k q), (k :: ql = insert k gv1), (k :: ql = insert k p), (k :: ql = insert a ql), (k :: ql = insert a q), (k :: ql = insert a gv1), (k :: ql = insert a p), (k :: ql = maybe_swap ql)
(k :: ql = maybe_swap q), (k :: ql = maybe_swap gv1), (k :: ql = maybe_swap p), (k :: ql = ql ++ ql), (k :: ql = ql ++ q), (k :: ql = ql ++ gv1), (k :: ql = ql ++ p), (k :: ql = q ++ ql), (k :: ql = q ++ q), (k :: ql = q ++ gv1)
(k :: ql = q ++ p), (k :: ql = gv1 ++ ql), (k :: ql = gv1 ++ q), (k :: ql = gv1 ++ gv1), (k :: ql = gv1 ++ p), (k :: ql = p ++ ql), (k :: ql = p ++ q), (k :: ql = p ++ gv1), (k :: ql = p ++ p), (k :: ql = [])
(k :: q = ql), (k :: q = q), (k :: q = gv1), (k :: q = p), (k :: q = merge ql ql), (k :: q = merge ql q), (k :: q = merge ql gv1), (k :: q = merge ql p), (k :: q = merge q ql), (k :: q = merge q q)
(k :: q = merge q gv1), (k :: q = merge q p), (k :: q = merge gv1 ql), (k :: q = merge gv1 q), (k :: q = merge gv1 gv1), (k :: q = merge gv1 p), (k :: q = merge p ql), (k :: q = merge p q), (k :: q = merge p gv1), (k :: q = merge p p)
(k :: q = insert k ql), (k :: q = insert k q), (k :: q = insert k gv1), (k :: q = insert k p), (k :: q = insert a ql), (k :: q = insert a q), (k :: q = insert a gv1), (k :: q = insert a p), (k :: q = maybe_swap ql), (k :: q = maybe_swap q)
(k :: q = maybe_swap gv1), (k :: q = maybe_swap p), (k :: q = ql ++ ql), (k :: q = ql ++ q), (k :: q = ql ++ gv1), (k :: q = ql ++ p), (k :: q = q ++ ql), (k :: q = q ++ q), (k :: q = q ++ gv1), (k :: q = q ++ p)
(k :: q = gv1 ++ ql), (k :: q = gv1 ++ q), (k :: q = gv1 ++ gv1), (k :: q = gv1 ++ p), (k :: q = p ++ ql), (k :: q = p ++ q), (k :: q = p ++ gv1), (k :: q = p ++ p), (k :: q = []), (k :: gv1 = ql)
(k :: gv1 = q), (k :: gv1 = gv1), (k :: gv1 = p), (k :: gv1 = merge ql ql), (k :: gv1 = merge ql q), (k :: gv1 = merge ql gv1), (k :: gv1 = merge ql p), (k :: gv1 = merge q ql), (k :: gv1 = merge q q), (k :: gv1 = merge q gv1)
(k :: gv1 = merge q p), (k :: gv1 = merge gv1 ql), (k :: gv1 = merge gv1 q), (k :: gv1 = merge gv1 gv1), (k :: gv1 = merge gv1 p), (k :: gv1 = merge p ql), (k :: gv1 = merge p q), (k :: gv1 = merge p gv1), (k :: gv1 = merge p p), (k :: gv1 = insert k ql)
(k :: gv1 = insert k q), (k :: gv1 = insert k gv1), (k :: gv1 = insert k p), (k :: gv1 = insert a ql), (k :: gv1 = insert a q), (k :: gv1 = insert a gv1), (k :: gv1 = insert a p), (k :: gv1 = maybe_swap ql), (k :: gv1 = maybe_swap q), (k :: gv1 = maybe_swap gv1)
(k :: gv1 = maybe_swap p), (k :: gv1 = ql ++ ql), (k :: gv1 = ql ++ q), (k :: gv1 = ql ++ gv1), (k :: gv1 = ql ++ p), (k :: gv1 = q ++ ql), (k :: gv1 = q ++ q), (k :: gv1 = q ++ gv1), (k :: gv1 = q ++ p), (k :: gv1 = gv1 ++ ql)
(k :: gv1 = gv1 ++ q), (k :: gv1 = gv1 ++ gv1), (k :: gv1 = gv1 ++ p), (k :: gv1 = p ++ ql), (k :: gv1 = p ++ q), (k :: gv1 = p ++ gv1), (k :: gv1 = p ++ p), (k :: gv1 = []), (k :: p = ql), (k :: p = q)
(k :: p = gv1), (k :: p = p), (k :: p = merge ql ql), (k :: p = merge ql q), (k :: p = merge ql gv1), (k :: p = merge ql p), (k :: p = merge q ql), (k :: p = merge q q), (k :: p = merge q gv1), (k :: p = merge q p)
(k :: p = merge gv1 ql), (k :: p = merge gv1 q), (k :: p = merge gv1 gv1), (k :: p = merge gv1 p), (k :: p = merge p ql), (k :: p = merge p q), (k :: p = merge p gv1), (k :: p = merge p p), (k :: p = insert k ql), (k :: p = insert k q)
(k :: p = insert k gv1), (k :: p = insert k p), (k :: p = insert a ql), (k :: p = insert a q), (k :: p = insert a gv1), (k :: p = insert a p), (k :: p = maybe_swap ql), (k :: p = maybe_swap q), (k :: p = maybe_swap gv1), (k :: p = maybe_swap p)
(k :: p = ql ++ ql), (k :: p = ql ++ q), (k :: p = ql ++ gv1), (k :: p = ql ++ p), (k :: p = q ++ ql), (k :: p = q ++ q), (k :: p = q ++ gv1), (k :: p = q ++ p), (k :: p = gv1 ++ ql), (k :: p = gv1 ++ q)
(k :: p = gv1 ++ gv1), (k :: p = gv1 ++ p), (k :: p = p ++ ql), (k :: p = p ++ q), (k :: p = p ++ gv1), (k :: p = p ++ p), (k :: p = []), (a :: ql = ql), (a :: ql = q), (a :: ql = gv1)
(a :: ql = p), (a :: ql = merge ql ql), (a :: ql = merge ql q), (a :: ql = merge ql gv1), (a :: ql = merge ql p), (a :: ql = merge q ql), (a :: ql = merge q q), (a :: ql = merge q gv1), (a :: ql = merge q p), (a :: ql = merge gv1 ql)
(a :: ql = merge gv1 q), (a :: ql = merge gv1 gv1), (a :: ql = merge gv1 p), (a :: ql = merge p ql), (a :: ql = merge p q), (a :: ql = merge p gv1), (a :: ql = merge p p), (a :: ql = insert k ql), (a :: ql = insert k q), (a :: ql = insert k gv1)
(a :: ql = insert k p), (a :: ql = insert a ql), (a :: ql = insert a q), (a :: ql = insert a gv1), (a :: ql = insert a p), (a :: ql = maybe_swap ql), (a :: ql = maybe_swap q), (a :: ql = maybe_swap gv1), (a :: ql = maybe_swap p), (a :: ql = ql ++ ql)
(a :: ql = ql ++ q), (a :: ql = ql ++ gv1), (a :: ql = ql ++ p), (a :: ql = q ++ ql), (a :: ql = q ++ q), (a :: ql = q ++ gv1), (a :: ql = q ++ p), (a :: ql = gv1 ++ ql), (a :: ql = gv1 ++ q), (a :: ql = gv1 ++ gv1)
(a :: ql = gv1 ++ p), (a :: ql = p ++ ql), (a :: ql = p ++ q), (a :: ql = p ++ gv1), (a :: ql = p ++ p), (a :: ql = []), (a :: q = ql), (a :: q = q), (a :: q = gv1), (a :: q = p)
(a :: q = merge ql ql), (a :: q = merge ql q), (a :: q = merge ql gv1), (a :: q = merge ql p), (a :: q = merge q ql), (a :: q = merge q q), (a :: q = merge q gv1), (a :: q = merge q p), (a :: q = merge gv1 ql), (a :: q = merge gv1 q)
(a :: q = merge gv1 gv1), (a :: q = merge gv1 p), (a :: q = merge p ql), (a :: q = merge p q), (a :: q = merge p gv1), (a :: q = merge p p), (a :: q = insert k ql), (a :: q = insert k q), (a :: q = insert k gv1), (a :: q = insert k p)
(a :: q = insert a ql), (a :: q = insert a q), (a :: q = insert a gv1), (a :: q = insert a p), (a :: q = maybe_swap ql), (a :: q = maybe_swap q), (a :: q = maybe_swap gv1), (a :: q = maybe_swap p), (a :: q = ql ++ ql), (a :: q = ql ++ q)
(a :: q = ql ++ gv1), (a :: q = ql ++ p), (a :: q = q ++ ql), (a :: q = q ++ q), (a :: q = q ++ gv1), (a :: q = q ++ p), (a :: q = gv1 ++ ql), (a :: q = gv1 ++ q), (a :: q = gv1 ++ gv1), (a :: q = gv1 ++ p)
(a :: q = p ++ ql), (a :: q = p ++ q), (a :: q = p ++ gv1), (a :: q = p ++ p), (a :: q = []), (a :: gv1 = ql), (a :: gv1 = q), (a :: gv1 = gv1), (a :: gv1 = p), (a :: gv1 = merge ql ql)
(a :: gv1 = merge ql q), (a :: gv1 = merge ql gv1), (a :: gv1 = merge ql p), (a :: gv1 = merge q ql), (a :: gv1 = merge q q), (a :: gv1 = merge q gv1), (a :: gv1 = merge q p), (a :: gv1 = merge gv1 ql), (a :: gv1 = merge gv1 q), (a :: gv1 = merge gv1 gv1)
(a :: gv1 = merge gv1 p), (a :: gv1 = merge p ql), (a :: gv1 = merge p q), (a :: gv1 = merge p gv1), (a :: gv1 = merge p p), (a :: gv1 = insert k ql), (a :: gv1 = insert k q), (a :: gv1 = insert k gv1), (a :: gv1 = insert k p), (a :: gv1 = insert a ql)
(a :: gv1 = insert a q), (a :: gv1 = insert a gv1), (a :: gv1 = insert a p), (a :: gv1 = maybe_swap ql), (a :: gv1 = maybe_swap q), (a :: gv1 = maybe_swap gv1), (a :: gv1 = maybe_swap p), (a :: gv1 = ql ++ ql), (a :: gv1 = ql ++ q), (a :: gv1 = ql ++ gv1)
(a :: gv1 = ql ++ p), (a :: gv1 = q ++ ql), (a :: gv1 = q ++ q), (a :: gv1 = q ++ gv1), (a :: gv1 = q ++ p), (a :: gv1 = gv1 ++ ql), (a :: gv1 = gv1 ++ q), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = gv1 ++ p), (a :: gv1 = p ++ ql)
(a :: gv1 = p ++ q), (a :: gv1 = p ++ gv1), (a :: gv1 = p ++ p), (a :: gv1 = []), (a :: p = ql), (a :: p = q), (a :: p = gv1), (a :: p = p), (a :: p = merge ql ql), (a :: p = merge ql q)
(a :: p = merge ql gv1), (a :: p = merge ql p), (a :: p = merge q ql), (a :: p = merge q q), (a :: p = merge q gv1), (a :: p = merge q p), (a :: p = merge gv1 ql), (a :: p = merge gv1 q), (a :: p = merge gv1 gv1), (a :: p = merge gv1 p)
(a :: p = merge p ql), (a :: p = merge p q), (a :: p = merge p gv1), (a :: p = merge p p), (a :: p = insert k ql), (a :: p = insert k q), (a :: p = insert k gv1), (a :: p = insert k p), (a :: p = insert a ql), (a :: p = insert a q)
(a :: p = insert a gv1), (a :: p = insert a p), (a :: p = maybe_swap ql), (a :: p = maybe_swap q), (a :: p = maybe_swap gv1), (a :: p = maybe_swap p), (a :: p = ql ++ ql), (a :: p = ql ++ q), (a :: p = ql ++ gv1), (a :: p = ql ++ p)
(a :: p = q ++ ql), (a :: p = q ++ q), (a :: p = q ++ gv1), (a :: p = q ++ p), (a :: p = gv1 ++ ql), (a :: p = gv1 ++ q), (a :: p = gv1 ++ gv1), (a :: p = gv1 ++ p), (a :: p = p ++ ql), (a :: p = p ++ q)
(a :: p = p ++ gv1), (a :: p = p ++ p), (a :: p = []), (merge ql ql = ql), (merge ql ql = q), (merge ql ql = gv1), (merge ql ql = p), (merge ql ql = insert k ql), (merge ql ql = insert k q), (merge ql ql = insert k gv1)
(merge ql ql = insert k p), (merge ql ql = insert a ql), (merge ql ql = insert a q), (merge ql ql = insert a gv1), (merge ql ql = insert a p), (merge ql ql = maybe_swap ql), (merge ql ql = maybe_swap q), (merge ql ql = maybe_swap gv1), (merge ql ql = maybe_swap p), (merge ql ql = ql ++ ql)
(merge ql ql = ql ++ q), (merge ql ql = ql ++ gv1), (merge ql ql = ql ++ p), (merge ql ql = q ++ ql), (merge ql ql = q ++ q), (merge ql ql = q ++ gv1), (merge ql ql = q ++ p), (merge ql ql = gv1 ++ ql), (merge ql ql = gv1 ++ q), (merge ql ql = gv1 ++ gv1)
(merge ql ql = gv1 ++ p), (merge ql ql = p ++ ql), (merge ql ql = p ++ q), (merge ql ql = p ++ gv1), (merge ql ql = p ++ p), (merge ql q = ql), (merge ql q = q), (merge ql q = gv1), (merge ql q = p), (merge ql q = insert k ql)
(merge ql q = insert k q), (merge ql q = insert k gv1), (merge ql q = insert k p), (merge ql q = insert a ql), (merge ql q = insert a q), (merge ql q = insert a gv1), (merge ql q = insert a p), (merge ql q = maybe_swap ql), (merge ql q = maybe_swap q), (merge ql q = maybe_swap gv1)
(merge ql q = maybe_swap p), (merge ql q = ql ++ ql), (merge ql q = ql ++ q), (merge ql q = ql ++ gv1), (merge ql q = ql ++ p), (merge ql q = q ++ ql), (merge ql q = q ++ q), (merge ql q = q ++ gv1), (merge ql q = q ++ p), (merge ql q = gv1 ++ ql)
(merge ql q = gv1 ++ q), (merge ql q = gv1 ++ gv1), (merge ql q = gv1 ++ p), (merge ql q = p ++ ql), (merge ql q = p ++ q), (merge ql q = p ++ gv1), (merge ql q = p ++ p), (merge ql gv1 = ql), (merge ql gv1 = q), (merge ql gv1 = gv1)
(merge ql gv1 = p), (merge ql gv1 = insert k ql), (merge ql gv1 = insert k q), (merge ql gv1 = insert k gv1), (merge ql gv1 = insert k p), (merge ql gv1 = insert a ql), (merge ql gv1 = insert a q), (merge ql gv1 = insert a gv1), (merge ql gv1 = insert a p), (merge ql gv1 = maybe_swap ql)
(merge ql gv1 = maybe_swap q), (merge ql gv1 = maybe_swap gv1), (merge ql gv1 = maybe_swap p), (merge ql gv1 = ql ++ ql), (merge ql gv1 = ql ++ q), (merge ql gv1 = ql ++ gv1), (merge ql gv1 = ql ++ p), (merge ql gv1 = q ++ ql), (merge ql gv1 = q ++ q), (merge ql gv1 = q ++ gv1)
(merge ql gv1 = q ++ p), (merge ql gv1 = gv1 ++ ql), (merge ql gv1 = gv1 ++ q), (merge ql gv1 = gv1 ++ gv1), (merge ql gv1 = gv1 ++ p), (merge ql gv1 = p ++ ql), (merge ql gv1 = p ++ q), (merge ql gv1 = p ++ gv1), (merge ql gv1 = p ++ p), (merge ql p = ql)
(merge ql p = q), (merge ql p = gv1), (merge ql p = p), (merge ql p = insert k ql), (merge ql p = insert k q), (merge ql p = insert k gv1), (merge ql p = insert k p), (merge ql p = insert a ql), (merge ql p = insert a q), (merge ql p = insert a gv1)
(merge ql p = insert a p), (merge ql p = maybe_swap ql), (merge ql p = maybe_swap q), (merge ql p = maybe_swap gv1), (merge ql p = maybe_swap p), (merge ql p = ql ++ ql), (merge ql p = ql ++ q), (merge ql p = ql ++ gv1), (merge ql p = ql ++ p), (merge ql p = q ++ ql)
(merge ql p = q ++ q), (merge ql p = q ++ gv1), (merge ql p = q ++ p), (merge ql p = gv1 ++ ql), (merge ql p = gv1 ++ q), (merge ql p = gv1 ++ gv1), (merge ql p = gv1 ++ p), (merge ql p = p ++ ql), (merge ql p = p ++ q), (merge ql p = p ++ gv1)
(merge ql p = p ++ p), (merge q ql = ql), (merge q ql = q), (merge q ql = gv1), (merge q ql = p), (merge q ql = insert k ql), (merge q ql = insert k q), (merge q ql = insert k gv1), (merge q ql = insert k p), (merge q ql = insert a ql)
(merge q ql = insert a q), (merge q ql = insert a gv1), (merge q ql = insert a p), (merge q ql = maybe_swap ql), (merge q ql = maybe_swap q), (merge q ql = maybe_swap gv1), (merge q ql = maybe_swap p), (merge q ql = ql ++ ql), (merge q ql = ql ++ q), (merge q ql = ql ++ gv1)
(merge q ql = ql ++ p), (merge q ql = q ++ ql), (merge q ql = q ++ q), (merge q ql = q ++ gv1), (merge q ql = q ++ p), (merge q ql = gv1 ++ ql), (merge q ql = gv1 ++ q), (merge q ql = gv1 ++ gv1), (merge q ql = gv1 ++ p), (merge q ql = p ++ ql)
(merge q ql = p ++ q), (merge q ql = p ++ gv1), (merge q ql = p ++ p), (merge q q = ql), (merge q q = q), (merge q q = gv1), (merge q q = p), (merge q q = insert k ql), (merge q q = insert k q), (merge q q = insert k gv1)
(merge q q = insert k p), (merge q q = insert a ql), (merge q q = insert a q), (merge q q = insert a gv1), (merge q q = insert a p), (merge q q = maybe_swap ql), (merge q q = maybe_swap q), (merge q q = maybe_swap gv1), (merge q q = maybe_swap p), (merge q q = ql ++ ql)
(merge q q = ql ++ q), (merge q q = ql ++ gv1), (merge q q = ql ++ p), (merge q q = q ++ ql), (merge q q = q ++ q), (merge q q = q ++ gv1), (merge q q = q ++ p), (merge q q = gv1 ++ ql), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1)
(merge q q = gv1 ++ p), (merge q q = p ++ ql), (merge q q = p ++ q), (merge q q = p ++ gv1), (merge q q = p ++ p), (merge q gv1 = ql), (merge q gv1 = q), (merge q gv1 = gv1), (merge q gv1 = p), (merge q gv1 = insert k ql)
(merge q gv1 = insert k q), (merge q gv1 = insert k gv1), (merge q gv1 = insert k p), (merge q gv1 = insert a ql), (merge q gv1 = insert a q), (merge q gv1 = insert a gv1), (merge q gv1 = insert a p), (merge q gv1 = maybe_swap ql), (merge q gv1 = maybe_swap q), (merge q gv1 = maybe_swap gv1)
(merge q gv1 = maybe_swap p), (merge q gv1 = ql ++ ql), (merge q gv1 = ql ++ q), (merge q gv1 = ql ++ gv1), (merge q gv1 = ql ++ p), (merge q gv1 = q ++ ql), (merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = q ++ p), (merge q gv1 = gv1 ++ ql)
(merge q gv1 = gv1 ++ q), (merge q gv1 = gv1 ++ gv1), (merge q gv1 = gv1 ++ p), (merge q gv1 = p ++ ql), (merge q gv1 = p ++ q), (merge q gv1 = p ++ gv1), (merge q gv1 = p ++ p), (merge q p = ql), (merge q p = q), (merge q p = gv1)
(merge q p = p), (merge q p = insert k ql), (merge q p = insert k q), (merge q p = insert k gv1), (merge q p = insert k p), (merge q p = insert a ql), (merge q p = insert a q), (merge q p = insert a gv1), (merge q p = insert a p), (merge q p = maybe_swap ql)
(merge q p = maybe_swap q), (merge q p = maybe_swap gv1), (merge q p = maybe_swap p), (merge q p = ql ++ ql), (merge q p = ql ++ q), (merge q p = ql ++ gv1), (merge q p = ql ++ p), (merge q p = q ++ ql), (merge q p = q ++ q), (merge q p = q ++ gv1)
(merge q p = q ++ p), (merge q p = gv1 ++ ql), (merge q p = gv1 ++ q), (merge q p = gv1 ++ gv1), (merge q p = gv1 ++ p), (merge q p = p ++ ql), (merge q p = p ++ q), (merge q p = p ++ gv1), (merge q p = p ++ p), (merge gv1 ql = ql)
(merge gv1 ql = q), (merge gv1 ql = gv1), (merge gv1 ql = p), (merge gv1 ql = insert k ql), (merge gv1 ql = insert k q), (merge gv1 ql = insert k gv1), (merge gv1 ql = insert k p), (merge gv1 ql = insert a ql), (merge gv1 ql = insert a q), (merge gv1 ql = insert a gv1)
(merge gv1 ql = insert a p), (merge gv1 ql = maybe_swap ql), (merge gv1 ql = maybe_swap q), (merge gv1 ql = maybe_swap gv1), (merge gv1 ql = maybe_swap p), (merge gv1 ql = ql ++ ql), (merge gv1 ql = ql ++ q), (merge gv1 ql = ql ++ gv1), (merge gv1 ql = ql ++ p), (merge gv1 ql = q ++ ql)
(merge gv1 ql = q ++ q), (merge gv1 ql = q ++ gv1), (merge gv1 ql = q ++ p), (merge gv1 ql = gv1 ++ ql), (merge gv1 ql = gv1 ++ q), (merge gv1 ql = gv1 ++ gv1), (merge gv1 ql = gv1 ++ p), (merge gv1 ql = p ++ ql), (merge gv1 ql = p ++ q), (merge gv1 ql = p ++ gv1)
(merge gv1 ql = p ++ p), (merge gv1 q = ql), (merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = p), (merge gv1 q = insert k ql), (merge gv1 q = insert k q), (merge gv1 q = insert k gv1), (merge gv1 q = insert k p), (merge gv1 q = insert a ql)
(merge gv1 q = insert a q), (merge gv1 q = insert a gv1), (merge gv1 q = insert a p), (merge gv1 q = maybe_swap ql), (merge gv1 q = maybe_swap q), (merge gv1 q = maybe_swap gv1), (merge gv1 q = maybe_swap p), (merge gv1 q = ql ++ ql), (merge gv1 q = ql ++ q), (merge gv1 q = ql ++ gv1)
(merge gv1 q = ql ++ p), (merge gv1 q = q ++ ql), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = q ++ p), (merge gv1 q = gv1 ++ ql), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 q = gv1 ++ p), (merge gv1 q = p ++ ql)
(merge gv1 q = p ++ q), (merge gv1 q = p ++ gv1), (merge gv1 q = p ++ p), (merge gv1 gv1 = ql), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = p), (merge gv1 gv1 = insert k ql), (merge gv1 gv1 = insert k q), (merge gv1 gv1 = insert k gv1)
(merge gv1 gv1 = insert k p), (merge gv1 gv1 = insert a ql), (merge gv1 gv1 = insert a q), (merge gv1 gv1 = insert a gv1), (merge gv1 gv1 = insert a p), (merge gv1 gv1 = maybe_swap ql), (merge gv1 gv1 = maybe_swap q), (merge gv1 gv1 = maybe_swap gv1), (merge gv1 gv1 = maybe_swap p), (merge gv1 gv1 = ql ++ ql)
(merge gv1 gv1 = ql ++ q), (merge gv1 gv1 = ql ++ gv1), (merge gv1 gv1 = ql ++ p), (merge gv1 gv1 = q ++ ql), (merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = q ++ p), (merge gv1 gv1 = gv1 ++ ql), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1)
(merge gv1 gv1 = gv1 ++ p), (merge gv1 gv1 = p ++ ql), (merge gv1 gv1 = p ++ q), (merge gv1 gv1 = p ++ gv1), (merge gv1 gv1 = p ++ p), (merge gv1 p = ql), (merge gv1 p = q), (merge gv1 p = gv1), (merge gv1 p = p), (merge gv1 p = insert k ql)
(merge gv1 p = insert k q), (merge gv1 p = insert k gv1), (merge gv1 p = insert k p), (merge gv1 p = insert a ql), (merge gv1 p = insert a q), (merge gv1 p = insert a gv1), (merge gv1 p = insert a p), (merge gv1 p = maybe_swap ql), (merge gv1 p = maybe_swap q), (merge gv1 p = maybe_swap gv1)
(merge gv1 p = maybe_swap p), (merge gv1 p = ql ++ ql), (merge gv1 p = ql ++ q), (merge gv1 p = ql ++ gv1), (merge gv1 p = ql ++ p), (merge gv1 p = q ++ ql), (merge gv1 p = q ++ q), (merge gv1 p = q ++ gv1), (merge gv1 p = q ++ p), (merge gv1 p = gv1 ++ ql)
(merge gv1 p = gv1 ++ q), (merge gv1 p = gv1 ++ gv1), (merge gv1 p = gv1 ++ p), (merge gv1 p = p ++ ql), (merge gv1 p = p ++ q), (merge gv1 p = p ++ gv1), (merge gv1 p = p ++ p), (merge p ql = ql), (merge p ql = q), (merge p ql = gv1)
(merge p ql = p), (merge p ql = insert k ql), (merge p ql = insert k q), (merge p ql = insert k gv1), (merge p ql = insert k p), (merge p ql = insert a ql), (merge p ql = insert a q), (merge p ql = insert a gv1), (merge p ql = insert a p), (merge p ql = maybe_swap ql)
(merge p ql = maybe_swap q), (merge p ql = maybe_swap gv1), (merge p ql = maybe_swap p), (merge p ql = ql ++ ql), (merge p ql = ql ++ q), (merge p ql = ql ++ gv1), (merge p ql = ql ++ p), (merge p ql = q ++ ql), (merge p ql = q ++ q), (merge p ql = q ++ gv1)
(merge p ql = q ++ p), (merge p ql = gv1 ++ ql), (merge p ql = gv1 ++ q), (merge p ql = gv1 ++ gv1), (merge p ql = gv1 ++ p), (merge p ql = p ++ ql), (merge p ql = p ++ q), (merge p ql = p ++ gv1), (merge p ql = p ++ p), (merge p q = ql)
(merge p q = q), (merge p q = gv1), (merge p q = p), (merge p q = insert k ql), (merge p q = insert k q), (merge p q = insert k gv1), (merge p q = insert k p), (merge p q = insert a ql), (merge p q = insert a q), (merge p q = insert a gv1)
(merge p q = insert a p), (merge p q = maybe_swap ql), (merge p q = maybe_swap q), (merge p q = maybe_swap gv1), (merge p q = maybe_swap p), (merge p q = ql ++ ql), (merge p q = ql ++ q), (merge p q = ql ++ gv1), (merge p q = ql ++ p), (merge p q = q ++ ql)
(merge p q = q ++ q), (merge p q = q ++ gv1), (merge p q = q ++ p), (merge p q = gv1 ++ ql), (merge p q = gv1 ++ q), (merge p q = gv1 ++ gv1), (merge p q = gv1 ++ p), (merge p q = p ++ ql), (merge p q = p ++ q), (merge p q = p ++ gv1)
(merge p q = p ++ p), (merge p gv1 = ql), (merge p gv1 = q), (merge p gv1 = gv1), (merge p gv1 = p), (merge p gv1 = insert k ql), (merge p gv1 = insert k q), (merge p gv1 = insert k gv1), (merge p gv1 = insert k p), (merge p gv1 = insert a ql)
(merge p gv1 = insert a q), (merge p gv1 = insert a gv1), (merge p gv1 = insert a p), (merge p gv1 = maybe_swap ql), (merge p gv1 = maybe_swap q), (merge p gv1 = maybe_swap gv1), (merge p gv1 = maybe_swap p), (merge p gv1 = ql ++ ql), (merge p gv1 = ql ++ q), (merge p gv1 = ql ++ gv1)
(merge p gv1 = ql ++ p), (merge p gv1 = q ++ ql), (merge p gv1 = q ++ q), (merge p gv1 = q ++ gv1), (merge p gv1 = q ++ p), (merge p gv1 = gv1 ++ ql), (merge p gv1 = gv1 ++ q), (merge p gv1 = gv1 ++ gv1), (merge p gv1 = gv1 ++ p), (merge p gv1 = p ++ ql)
(merge p gv1 = p ++ q), (merge p gv1 = p ++ gv1), (merge p gv1 = p ++ p), (merge p p = ql), (merge p p = q), (merge p p = gv1), (merge p p = p), (merge p p = insert k ql), (merge p p = insert k q), (merge p p = insert k gv1)
(merge p p = insert k p), (merge p p = insert a ql), (merge p p = insert a q), (merge p p = insert a gv1), (merge p p = insert a p), (merge p p = maybe_swap ql), (merge p p = maybe_swap q), (merge p p = maybe_swap gv1), (merge p p = maybe_swap p), (merge p p = ql ++ ql)
(merge p p = ql ++ q), (merge p p = ql ++ gv1), (merge p p = ql ++ p), (merge p p = q ++ ql), (merge p p = q ++ q), (merge p p = q ++ gv1), (merge p p = q ++ p), (merge p p = gv1 ++ ql), (merge p p = gv1 ++ q), (merge p p = gv1 ++ gv1)
(merge p p = gv1 ++ p), (merge p p = p ++ ql), (merge p p = p ++ q), (merge p p = p ++ gv1), (merge p p = p ++ p), (insert k ql = ql), (insert k ql = q), (insert k ql = gv1), (insert k ql = p), (insert k ql = ql ++ ql)
(insert k ql = ql ++ q), (insert k ql = ql ++ gv1), (insert k ql = ql ++ p), (insert k ql = q ++ ql), (insert k ql = q ++ q), (insert k ql = q ++ gv1), (insert k ql = q ++ p), (insert k ql = gv1 ++ ql), (insert k ql = gv1 ++ q), (insert k ql = gv1 ++ gv1)
(insert k ql = gv1 ++ p), (insert k ql = p ++ ql), (insert k ql = p ++ q), (insert k ql = p ++ gv1), (insert k ql = p ++ p), (insert k q = ql), (insert k q = q), (insert k q = gv1), (insert k q = p), (insert k q = ql ++ ql)
(insert k q = ql ++ q), (insert k q = ql ++ gv1), (insert k q = ql ++ p), (insert k q = q ++ ql), (insert k q = q ++ q), (insert k q = q ++ gv1), (insert k q = q ++ p), (insert k q = gv1 ++ ql), (insert k q = gv1 ++ q), (insert k q = gv1 ++ gv1)
(insert k q = gv1 ++ p), (insert k q = p ++ ql), (insert k q = p ++ q), (insert k q = p ++ gv1), (insert k q = p ++ p), (insert k gv1 = ql), (insert k gv1 = q), (insert k gv1 = gv1), (insert k gv1 = p), (insert k gv1 = ql ++ ql)
(insert k gv1 = ql ++ q), (insert k gv1 = ql ++ gv1), (insert k gv1 = ql ++ p), (insert k gv1 = q ++ ql), (insert k gv1 = q ++ q), (insert k gv1 = q ++ gv1), (insert k gv1 = q ++ p), (insert k gv1 = gv1 ++ ql), (insert k gv1 = gv1 ++ q), (insert k gv1 = gv1 ++ gv1)
(insert k gv1 = gv1 ++ p), (insert k gv1 = p ++ ql), (insert k gv1 = p ++ q), (insert k gv1 = p ++ gv1), (insert k gv1 = p ++ p), (insert k p = ql), (insert k p = q), (insert k p = gv1), (insert k p = p), (insert k p = ql ++ ql)
(insert k p = ql ++ q), (insert k p = ql ++ gv1), (insert k p = ql ++ p), (insert k p = q ++ ql), (insert k p = q ++ q), (insert k p = q ++ gv1), (insert k p = q ++ p), (insert k p = gv1 ++ ql), (insert k p = gv1 ++ q), (insert k p = gv1 ++ gv1)
(insert k p = gv1 ++ p), (insert k p = p ++ ql), (insert k p = p ++ q), (insert k p = p ++ gv1), (insert k p = p ++ p), (insert a ql = ql), (insert a ql = q), (insert a ql = gv1), (insert a ql = p), (insert a ql = ql ++ ql)
(insert a ql = ql ++ q), (insert a ql = ql ++ gv1), (insert a ql = ql ++ p), (insert a ql = q ++ ql), (insert a ql = q ++ q), (insert a ql = q ++ gv1), (insert a ql = q ++ p), (insert a ql = gv1 ++ ql), (insert a ql = gv1 ++ q), (insert a ql = gv1 ++ gv1)
(insert a ql = gv1 ++ p), (insert a ql = p ++ ql), (insert a ql = p ++ q), (insert a ql = p ++ gv1), (insert a ql = p ++ p), (insert a q = ql), (insert a q = q), (insert a q = gv1), (insert a q = p), (insert a q = ql ++ ql)
(insert a q = ql ++ q), (insert a q = ql ++ gv1), (insert a q = ql ++ p), (insert a q = q ++ ql), (insert a q = q ++ q), (insert a q = q ++ gv1), (insert a q = q ++ p), (insert a q = gv1 ++ ql), (insert a q = gv1 ++ q), (insert a q = gv1 ++ gv1)
(insert a q = gv1 ++ p), (insert a q = p ++ ql), (insert a q = p ++ q), (insert a q = p ++ gv1), (insert a q = p ++ p), (insert a gv1 = ql), (insert a gv1 = q), (insert a gv1 = gv1), (insert a gv1 = p), (insert a gv1 = ql ++ ql)
(insert a gv1 = ql ++ q), (insert a gv1 = ql ++ gv1), (insert a gv1 = ql ++ p), (insert a gv1 = q ++ ql), (insert a gv1 = q ++ q), (insert a gv1 = q ++ gv1), (insert a gv1 = q ++ p), (insert a gv1 = gv1 ++ ql), (insert a gv1 = gv1 ++ q), (insert a gv1 = gv1 ++ gv1)
(insert a gv1 = gv1 ++ p), (insert a gv1 = p ++ ql), (insert a gv1 = p ++ q), (insert a gv1 = p ++ gv1), (insert a gv1 = p ++ p), (insert a p = ql), (insert a p = q), (insert a p = gv1), (insert a p = p), (insert a p = ql ++ ql)
(insert a p = ql ++ q), (insert a p = ql ++ gv1), (insert a p = ql ++ p), (insert a p = q ++ ql), (insert a p = q ++ q), (insert a p = q ++ gv1), (insert a p = q ++ p), (insert a p = gv1 ++ ql), (insert a p = gv1 ++ q), (insert a p = gv1 ++ gv1)
(insert a p = gv1 ++ p), (insert a p = p ++ ql), (insert a p = p ++ q), (insert a p = p ++ gv1), (insert a p = p ++ p), (maybe_swap ql = ql), (maybe_swap ql = q), (maybe_swap ql = gv1), (maybe_swap ql = p), (maybe_swap ql = insert k ql)
(maybe_swap ql = insert k q), (maybe_swap ql = insert k gv1), (maybe_swap ql = insert k p), (maybe_swap ql = insert a ql), (maybe_swap ql = insert a q), (maybe_swap ql = insert a gv1), (maybe_swap ql = insert a p), (maybe_swap ql = ql ++ ql), (maybe_swap ql = ql ++ q), (maybe_swap ql = ql ++ gv1)
(maybe_swap ql = ql ++ p), (maybe_swap ql = q ++ ql), (maybe_swap ql = q ++ q), (maybe_swap ql = q ++ gv1), (maybe_swap ql = q ++ p), (maybe_swap ql = gv1 ++ ql), (maybe_swap ql = gv1 ++ q), (maybe_swap ql = gv1 ++ gv1), (maybe_swap ql = gv1 ++ p), (maybe_swap ql = p ++ ql)
(maybe_swap ql = p ++ q), (maybe_swap ql = p ++ gv1), (maybe_swap ql = p ++ p), (maybe_swap q = ql), (maybe_swap q = q), (maybe_swap q = gv1), (maybe_swap q = p), (maybe_swap q = insert k ql), (maybe_swap q = insert k q), (maybe_swap q = insert k gv1)
(maybe_swap q = insert k p), (maybe_swap q = insert a ql), (maybe_swap q = insert a q), (maybe_swap q = insert a gv1), (maybe_swap q = insert a p), (maybe_swap q = ql ++ ql), (maybe_swap q = ql ++ q), (maybe_swap q = ql ++ gv1), (maybe_swap q = ql ++ p), (maybe_swap q = q ++ ql)
(maybe_swap q = q ++ q), (maybe_swap q = q ++ gv1), (maybe_swap q = q ++ p), (maybe_swap q = gv1 ++ ql), (maybe_swap q = gv1 ++ q), (maybe_swap q = gv1 ++ gv1), (maybe_swap q = gv1 ++ p), (maybe_swap q = p ++ ql), (maybe_swap q = p ++ q), (maybe_swap q = p ++ gv1)
(maybe_swap q = p ++ p), (maybe_swap gv1 = ql), (maybe_swap gv1 = q), (maybe_swap gv1 = gv1), (maybe_swap gv1 = p), (maybe_swap gv1 = insert k ql), (maybe_swap gv1 = insert k q), (maybe_swap gv1 = insert k gv1), (maybe_swap gv1 = insert k p), (maybe_swap gv1 = insert a ql)
(maybe_swap gv1 = insert a q), (maybe_swap gv1 = insert a gv1), (maybe_swap gv1 = insert a p), (maybe_swap gv1 = ql ++ ql), (maybe_swap gv1 = ql ++ q), (maybe_swap gv1 = ql ++ gv1), (maybe_swap gv1 = ql ++ p), (maybe_swap gv1 = q ++ ql), (maybe_swap gv1 = q ++ q), (maybe_swap gv1 = q ++ gv1)
(maybe_swap gv1 = q ++ p), (maybe_swap gv1 = gv1 ++ ql), (maybe_swap gv1 = gv1 ++ q), (maybe_swap gv1 = gv1 ++ gv1), (maybe_swap gv1 = gv1 ++ p), (maybe_swap gv1 = p ++ ql), (maybe_swap gv1 = p ++ q), (maybe_swap gv1 = p ++ gv1), (maybe_swap gv1 = p ++ p), (maybe_swap p = ql)
(maybe_swap p = q), (maybe_swap p = gv1), (maybe_swap p = p), (maybe_swap p = insert k ql), (maybe_swap p = insert k q), (maybe_swap p = insert k gv1), (maybe_swap p = insert k p), (maybe_swap p = insert a ql), (maybe_swap p = insert a q), (maybe_swap p = insert a gv1)
(maybe_swap p = insert a p), (maybe_swap p = ql ++ ql), (maybe_swap p = ql ++ q), (maybe_swap p = ql ++ gv1), (maybe_swap p = ql ++ p), (maybe_swap p = q ++ ql), (maybe_swap p = q ++ q), (maybe_swap p = q ++ gv1), (maybe_swap p = q ++ p), (maybe_swap p = gv1 ++ ql)
(maybe_swap p = gv1 ++ q), (maybe_swap p = gv1 ++ gv1), (maybe_swap p = gv1 ++ p), (maybe_swap p = p ++ ql), (maybe_swap p = p ++ q), (maybe_swap p = p ++ gv1), (maybe_swap p = p ++ p), (ql ++ ql = ql), (ql ++ ql = q), (ql ++ ql = gv1)
(ql ++ ql = p), (ql ++ q = ql), (ql ++ q = q), (ql ++ q = gv1), (ql ++ q = p), (ql ++ gv1 = ql), (ql ++ gv1 = q), (ql ++ gv1 = gv1), (ql ++ gv1 = p), (ql ++ p = ql)
(ql ++ p = q), (ql ++ p = gv1), (ql ++ p = p), (q ++ ql = ql), (q ++ ql = q), (q ++ ql = gv1), (q ++ ql = p), (q ++ q = ql), (q ++ q = q), (q ++ q = gv1)
(q ++ q = p), (q ++ gv1 = ql), (q ++ gv1 = q), (q ++ gv1 = gv1), (q ++ gv1 = p), (q ++ p = ql), (q ++ p = q), (q ++ p = gv1), (q ++ p = p), (gv1 ++ ql = ql)
(gv1 ++ ql = q), (gv1 ++ ql = gv1), (gv1 ++ ql = p), (gv1 ++ q = ql), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ q = p), (gv1 ++ gv1 = ql), (gv1 ++ gv1 = q), (gv1 ++ gv1 = gv1)
(gv1 ++ gv1 = p), (gv1 ++ p = ql), (gv1 ++ p = q), (gv1 ++ p = gv1), (gv1 ++ p = p), (p ++ ql = ql), (p ++ ql = q), (p ++ ql = gv1), (p ++ ql = p), (p ++ q = ql)
(p ++ q = q), (p ++ q = gv1), (p ++ q = p), (p ++ gv1 = ql), (p ++ gv1 = q), (p ++ gv1 = gv1), (p ++ gv1 = p), (p ++ p = ql), (p ++ p = q), (p ++ p = gv1)
(p ++ p = p), ([] = ql), ([] = q), ([] = gv1), ([] = p), ([] = merge ql ql), ([] = merge ql q), ([] = merge ql gv1), ([] = merge ql p), ([] = merge q ql)
([] = merge q q), ([] = merge q gv1), ([] = merge q p), ([] = merge gv1 ql), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = merge gv1 p), ([] = merge p ql), ([] = merge p q), ([] = merge p gv1)
([] = merge p p), ([] = insert k ql), ([] = insert k q), ([] = insert k gv1), ([] = insert k p), ([] = insert a ql), ([] = insert a q), ([] = insert a gv1), ([] = insert a p), ([] = maybe_swap ql)
([] = maybe_swap q), ([] = maybe_swap gv1), ([] = maybe_swap p), ([] = ql ++ ql), ([] = ql ++ q), ([] = ql ++ gv1), ([] = ql ++ p), ([] = q ++ ql), ([] = q ++ q), ([] = q ++ gv1)
([] = q ++ p), ([] = gv1 ++ ql), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ([] = gv1 ++ p), ([] = p ++ ql), ([] = p ++ q), ([] = p ++ gv1), ([] = p ++ p), (None = Some k)
(None = Some a), ((k, ql) = select k ql), ((k, ql) = select k q), ((k, ql) = select k gv1), ((k, ql) = select k p), ((k, ql) = select a ql), ((k, ql) = select a q), ((k, ql) = select a gv1), ((k, ql) = select a p), ((k, q) = select k ql)
((k, q) = select k q), ((k, q) = select k gv1), ((k, q) = select k p), ((k, q) = select a ql), ((k, q) = select a q), ((k, q) = select a gv1), ((k, q) = select a p), ((k, gv1) = select k ql), ((k, gv1) = select k q), ((k, gv1) = select k gv1)
((k, gv1) = select k p), ((k, gv1) = select a ql), ((k, gv1) = select a q), ((k, gv1) = select a gv1), ((k, gv1) = select a p), ((k, p) = select k ql), ((k, p) = select k q), ((k, p) = select k gv1), ((k, p) = select k p), ((k, p) = select a ql)
((k, p) = select a q), ((k, p) = select a gv1), ((k, p) = select a p), ((a, ql) = select k ql), ((a, ql) = select k q), ((a, ql) = select k gv1), ((a, ql) = select k p), ((a, ql) = select a ql), ((a, ql) = select a q), ((a, ql) = select a gv1)
((a, ql) = select a p), ((a, q) = select k ql), ((a, q) = select k q), ((a, q) = select k gv1), ((a, q) = select k p), ((a, q) = select a ql), ((a, q) = select a q), ((a, q) = select a gv1), ((a, q) = select a p), ((a, gv1) = select k ql)
((a, gv1) = select k q), ((a, gv1) = select k gv1), ((a, gv1) = select k p), ((a, gv1) = select a ql), ((a, gv1) = select a q), ((a, gv1) = select a gv1), ((a, gv1) = select a p), ((a, p) = select k ql), ((a, p) = select k q), ((a, p) = select k gv1)
((a, p) = select k p), ((a, p) = select a ql), ((a, p) = select a q), ((a, p) = select a gv1), ((a, p) = select a p), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (a >=? a)), ((k >? a) = (k >=? k))
((k >? a) = (k >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (a >=? a)), ((a >? k) = (k >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (a >=? k))
((a >? a) = (a >=? a)), (length ql = k), (length ql = a), (length q = k), (length q = a), (length gv1 = k), (length gv1 = a), (length p = k), (length p = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 105.295 seconds


Label: 0 (0)
(Abs q ql), (Abs ql q), (Permutation q ql), (Permutation ql q), (Abs q (maybe_swap ql)), (Abs ql (maybe_swap q)), (Abs (maybe_swap q) ql), (Abs (maybe_swap ql) q), (Permutation q (maybe_swap ql)), (Permutation ql (maybe_swap q))
(Permutation (maybe_swap q) ql), (Permutation (maybe_swap ql) q), (Abs (maybe_swap q) (maybe_swap ql)), (Abs (maybe_swap ql) (maybe_swap q)), (Permutation (maybe_swap q) (maybe_swap ql)), (Permutation (maybe_swap ql) (maybe_swap q)), (Abs (merge q q) (merge q ql)), (Abs (merge q q) (merge ql q)), (Abs (merge q ql) (merge q q)), (Abs (merge q p) (merge ql p))

Label: 1 (1)
(Abs (insert k q) (insert a p)), (Abs (insert a p) (insert k q)), (Abs (k :: q) (insert a p)), (Abs (a :: p) (insert k q)), (Abs (insert k q) (a :: p)), (Abs (insert a p) (k :: q)), (Permutation (insert k q) (insert a p)), (Permutation (insert a p) (insert k q)), (Abs (k :: q) (a :: p)), (Abs (a :: p) (k :: q))
(Permutation (k :: q) (insert a p)), (Permutation (a :: p) (insert k q)), (Permutation (insert k q) (a :: p)), (Permutation (insert a p) (k :: q)), (Permutation (k :: q) (a :: p)), (Permutation (a :: p) (k :: q)), ((k, q) = select a p)

Label: 2 (2)
(Abs gv0 (insert a p)), (Abs gv0 (insert k q)), (Abs (insert a p) gv0), (Abs (insert k q) gv0), (Abs gv0 (insert k ql)), (Abs (insert k ql) gv0), (Abs gv0 (a :: p)), (Abs gv0 (k :: q)), (Abs (a :: p) gv0), (Abs (k :: q) gv0)
(Abs gv0 (k :: ql)), (Abs (k :: ql) gv0), (Permutation gv0 (insert a p)), (Permutation gv0 (insert k q)), (Permutation (insert a p) gv0), (Permutation (insert k q) gv0), (Permutation gv0 (insert k ql)), (Permutation (insert k ql) gv0), (Abs (insert a p) (maybe_swap gv0)), (Abs (insert k q) (maybe_swap gv0))

Label: 3 (3)
(Abs gv1 (insert k q)), (Abs gv1 (insert a p)), (Abs (insert k q) gv1), (Abs (insert a p) gv1), (Abs gv1 (insert k ql)), (Abs (insert k ql) gv1), (Abs gv1 (k :: q)), (Abs gv1 (a :: p)), (Abs (k :: q) gv1), (Abs (a :: p) gv1)
(Abs gv1 (k :: ql)), (Abs (k :: ql) gv1), (Permutation gv1 (insert k q)), (Permutation gv1 (insert a p)), (Permutation (insert k q) gv1), (Permutation (insert a p) gv1), (Permutation gv1 (insert k ql)), (Permutation (insert k ql) gv1), (Abs (insert k q) (maybe_swap gv1)), (Abs (insert a p) (maybe_swap gv1))


------------------------------ ALL RESULTS ------------------------------
1. (Abs q ql -> select a p = (k, q) -> Permutation (a :: p) (k :: ql))

2. (select a p = (k, q) -> Abs (insert k q) (insert a p))
(Abs q ql -> Abs (insert k q) (insert a p) -> Permutation (a :: p) (k :: ql))

3. (select a p = (k, q) -> Abs (insert a p) (insert k q))
(Abs q ql -> Abs (insert a p) (insert k q) -> Permutation (a :: p) (k :: ql))

4. (select a p = (k, q) -> Abs (k :: q) (insert a p))
(Abs q ql -> Abs (k :: q) (insert a p) -> Permutation (a :: p) (k :: ql))

5. (select a p = (k, q) -> Abs (a :: p) (insert k q))
(Abs q ql -> Abs (a :: p) (insert k q) -> Permutation (a :: p) (k :: ql))

6. (select a p = (k, q) -> Abs (insert k q) (a :: p))
(Abs q ql -> Abs (insert k q) (a :: p) -> Permutation (a :: p) (k :: ql))

7. (select a p = (k, q) -> Abs (insert a p) (k :: q))
(Abs q ql -> Abs (insert a p) (k :: q) -> Permutation (a :: p) (k :: ql))

8. (select a p = (k, q) -> Permutation (insert k q) (insert a p))
(Abs q ql ->  Permutation (insert k q) (insert a p) -> Permutation (a :: p) (k :: ql))

9. (select a p = (k, q) -> Permutation (insert a p) (insert k q))
(Abs q ql ->  Permutation (insert a p) (insert k q) -> Permutation (a :: p) (k :: ql))

10. (select a p = (k, q) -> Abs (k :: q) (a :: p))
(Abs q ql -> Abs (k :: q) (a :: p) -> Permutation (a :: p) (k :: ql))

11. (select a p = (k, q) -> Abs (a :: p) (k :: q))
(Abs q ql -> Abs (a :: p) (k :: q) -> Permutation (a :: p) (k :: ql))

12. (select a p = (k, q) -> Permutation (k :: q) (insert a p))
(Abs q ql ->  Permutation (k :: q) (insert a p) -> Permutation (a :: p) (k :: ql))

13. (select a p = (k, q) -> Permutation (a :: p) (insert k q))
(Abs q ql ->  Permutation (a :: p) (insert k q) -> Permutation (a :: p) (k :: ql))

14. (select a p = (k, q) -> Permutation (insert k q) (a :: p))
(Abs q ql ->  Permutation (insert k q) (a :: p) -> Permutation (a :: p) (k :: ql))

15. (select a p = (k, q) -> Permutation (insert a p) (k :: q))
(Abs q ql ->  Permutation (insert a p) (k :: q) -> Permutation (a :: p) (k :: ql))

16. (select a p = (k, q) -> Permutation (k :: q) (a :: p))
(Abs q ql -> Permutation (k :: q) (a :: p) -> Permutation (a :: p) (k :: ql))

17. (select a p = (k, q) -> Permutation (a :: p) (k :: q))
(Abs q ql -> Permutation (a :: p) (k :: q) -> Permutation (a :: p) (k :: ql))

18. (Abs q ql -> Abs (maybe_swap ql) q)
(Abs (maybe_swap ql) q ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

19. (Abs q ql -> Abs (maybe_swap q) ql)
(Abs (maybe_swap q) ql ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

20. (Abs q ql -> Abs ql (maybe_swap q))
(Abs ql (maybe_swap q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

21. (Abs q ql -> Abs q (maybe_swap ql))
(Abs q (maybe_swap ql) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

22. (Abs q ql -> Abs (maybe_swap ql) (maybe_swap q))
(Abs (maybe_swap ql) (maybe_swap q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

23. (Abs q ql -> Abs (maybe_swap q) (maybe_swap ql))
(Abs (maybe_swap q) (maybe_swap ql) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

24. (Abs q ql -> Permutation (maybe_swap ql) q)
(Permutation (maybe_swap ql) q ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

25. (Abs q ql -> Permutation (maybe_swap q) ql)
(Permutation (maybe_swap q) ql ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

26. (Abs q ql -> Permutation ql (maybe_swap q))
(Permutation ql (maybe_swap q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

27. (Abs q ql -> Permutation q (maybe_swap ql))
(Permutation q (maybe_swap ql) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

28. (Abs q ql -> Permutation (maybe_swap ql) (maybe_swap q))
(Permutation (maybe_swap ql) (maybe_swap q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

29. (Abs q ql -> Permutation (maybe_swap q) (maybe_swap ql))
(Permutation (maybe_swap q) (maybe_swap ql) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

30. (Abs q ql -> Abs (merge q p) (merge ql p))
(Abs (merge q p) (merge ql p) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

31. (Abs q ql -> Abs (merge q ql) (merge q q))
(Abs (merge q ql) (merge q q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

32. (Abs q ql -> Abs (merge q q) (merge ql q))
(Abs (merge q q) (merge ql q) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

33. (Abs q ql -> Abs (merge q q) (merge q ql))
(Abs (merge q q) (merge q ql) ->  select a p = (k, q) -> Permutation (a :: p) (k :: ql))

34. (Abs q ql ->  Abs gv0 (insert a p) -> select a p = (k, q) -> Permutation gv0 (k :: ql))

35. (Abs q ql ->  Abs gv0 (insert k q) -> select a p = (k, q) -> Permutation gv0 (k :: ql))

36. (Abs (insert a p) gv0 ->  Abs q ql -> select a p = (k, q) -> Permutation gv0 (k :: ql))

37. (Abs (insert k q) gv0 ->  Abs q ql -> select a p = (k, q) -> Permutation gv0 (k :: ql))

38. (Abs q ql ->  Abs gv1 (insert k q) -> select a p = (k, q) -> Permutation (a :: p) gv1)

39. (Abs (insert k q) gv1 ->  Abs q ql -> select a p = (k, q) -> Permutation (a :: p) gv1)

40. (Abs q ql ->  Abs gv1 (insert k ql) -> select a p = (k, q) -> Permutation (a :: p) gv1)

41. (Abs (insert k ql) gv1 ->  Abs q ql -> select a p = (k, q) -> Permutation (a :: p) gv1)

42. (Abs q ql ->  Abs gv0 (a :: p) -> select a p = (k, q) -> Permutation gv0 (k :: ql))

43. (Abs q ql ->  Abs gv0 (k :: q) -> select a p = (k, q) -> Permutation gv0 (k :: ql))

44. (Abs (a :: p) gv0 ->  Abs q ql -> select a p = (k, q) -> Permutation gv0 (k :: ql))

45. (Abs (k :: q) gv0 ->  Abs q ql -> select a p = (k, q) -> Permutation gv0 (k :: ql))

46. (Abs q ql ->  Permutation gv0 (insert a p) ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

47. (Abs q ql ->  Permutation gv0 (insert k q) ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

48. (Abs q ql ->  Permutation (insert a p) gv0 ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

49. (Abs q ql ->  Permutation (insert k q) gv0 ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

50. (Abs q ql ->  Abs (insert a p) (maybe_swap gv0) ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

51. (Abs q ql ->  Abs (insert k q) (maybe_swap gv0) ->  select a p = (k, q) -> Permutation gv0 (k :: ql))

52. (Abs q ql ->  Abs gv1 (k :: q) -> select a p = (k, q) -> Permutation (a :: p) gv1)

53. (Abs (k :: q) gv1 ->  Abs q ql -> select a p = (k, q) -> Permutation (a :: p) gv1)

54. (Abs q ql ->  Abs gv1 (k :: ql) -> select a p = (k, q) -> Permutation (a :: p) gv1)

55. (Abs (k :: ql) gv1 ->  Abs q ql -> select a p = (k, q) -> Permutation (a :: p) gv1)

56. (Abs q ql ->  Permutation gv1 (insert k q) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

57. (Abs q ql ->  Permutation (insert k q) gv1 ->  select a p = (k, q) -> Permutation (a :: p) gv1)

58. (Abs q ql ->  Permutation gv1 (insert k ql) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

59. (Abs q ql ->  Permutation (insert k ql) gv1 ->  select a p = (k, q) -> Permutation (a :: p) gv1)

60. (Abs q ql ->  Abs (insert k q) (maybe_swap gv1) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

61. (Abs q ql ->  Abs (insert a p) (maybe_swap gv1) ->  select a p = (k, q) -> Permutation (a :: p) gv1)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 184.258 seconds

Number of Result Pairs Returned: 61

1. (Abs q ql -> select a p = (k, q) -> Permutation (a :: p) (k :: ql))

2. (select a p = (k, q) -> Abs (insert k q) (insert a p))
(Abs q ql -> Abs (insert k q) (insert a p) -> Permutation (a :: p) (k :: ql))

3. (select a p = (k, q) -> Abs (insert a p) (insert k q))
(Abs q ql -> Abs (insert a p) (insert k q) -> Permutation (a :: p) (k :: ql))

4. (select a p = (k, q) -> Abs (k :: q) (insert a p))
(Abs q ql -> Abs (k :: q) (insert a p) -> Permutation (a :: p) (k :: ql))

5. (select a p = (k, q) -> Abs (a :: p) (insert k q))
(Abs q ql -> Abs (a :: p) (insert k q) -> Permutation (a :: p) (k :: ql))
