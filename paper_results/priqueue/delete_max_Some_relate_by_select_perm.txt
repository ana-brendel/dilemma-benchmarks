Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (q : list nat) (k : nat) (pl ql : list nat),
 priq p ->
 Abs p pl ->
 delete_max p = Some (k, q) ->
 Abs q ql -> Permutation pl (k :: ql) /\ Forall (ge k) ql)
 -- (Abs q ql)
 -- (priq (a :: p))
 -- (Abs (a :: p) pl)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) (k :: q))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.562 seconds

gv1 : (list nat) = (k :: q)
gv0 : (list nat) = (a :: p)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 43.337 seconds

Label: Generalization #0
Assumptions: 
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) (k :: q))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (a :: p = gv0)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation gv0 (k :: q))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (k :: q = gv1)
 -- (select a p = (k, q))

----------------------------------
Goal: (Permutation (a :: p) gv1)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 43.472 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
select : (nat -> list nat -> nat * list nat)
insert : (nat -> list nat -> list nat)
delete_max : (list nat -> option (nat * list nat))
merge : (list nat -> list nat -> list nat)
priq : (list nat -> Prop)
Abs : (list nat -> list nat -> Prop)

Label: 0 (0)
Abducted Assumption: (select a p = (k, q))
Positive Examples: 26
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 24
Negative Examples: 97

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 29
Negative Examples: 78


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 44.313 seconds


Label: 0 (0)
(Abs q q), (Abs q p), (Abs p q), (Abs p p), (priq q), (priq p), (Permutation q q), (Permutation q p), (Permutation p q), (Permutation p p)
(In k q), (In k p), (In a q), (In a p), (k < k), (k < a), (a < k), (a < a), (k <= k), (k <= a)
(a <= k), (a <= a), (q = q), (q = p), (p = q), (p = p), (k = k), (k = a), (a = k), (a = a)
(false = (k >? k)), (false = (k >? a)), (false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a)), (true = (k >? k)), (true = (k >? a))
(true = (a >? k)), (true = (a >? a)), (true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs q (k :: q)), (Abs q (k :: p)), (Abs q (a :: q)), (Abs q (a :: p))
(Abs q (merge q q)), (Abs q (merge q p)), (Abs q (merge p q)), (Abs q (merge p p)), (Abs q (insert k q)), (Abs q (insert k p)), (Abs q (insert a q)), (Abs q (insert a p)), (Abs q (maybe_swap q)), (Abs q (maybe_swap p))
(Abs q (q ++ q)), (Abs q (q ++ p)), (Abs q (p ++ q)), (Abs q (p ++ p)), (Abs q []), (Abs p (k :: q)), (Abs p (k :: p)), (Abs p (a :: q)), (Abs p (a :: p)), (Abs p (merge q q))
(Abs p (merge q p)), (Abs p (merge p q)), (Abs p (merge p p)), (Abs p (insert k q)), (Abs p (insert k p)), (Abs p (insert a q)), (Abs p (insert a p)), (Abs p (maybe_swap q)), (Abs p (maybe_swap p)), (Abs p (q ++ q))
(Abs p (q ++ p)), (Abs p (p ++ q)), (Abs p (p ++ p)), (Abs p []), (Abs (k :: q) q), (Abs (k :: q) p), (Abs (k :: q) (k :: p)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: p)), (Abs (k :: q) (merge q q))
(Abs (k :: q) (merge q p)), (Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (maybe_swap q)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (q ++ q))
(Abs (k :: q) (q ++ p)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) []), (Abs (k :: p) q), (Abs (k :: p) p), (Abs (k :: p) (k :: q)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (merge q q))
(Abs (k :: p) (merge q p)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (q ++ q))
(Abs (k :: p) (q ++ p)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) []), (Abs (a :: q) q), (Abs (a :: q) p), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (a :: p)), (Abs (a :: q) (merge q q))
(Abs (a :: q) (merge q p)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p p)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (q ++ q))
(Abs (a :: q) (q ++ p)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) []), (Abs (a :: p) q), (Abs (a :: p) p), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (a :: q)), (Abs (a :: p) (merge q q))
(Abs (a :: p) (merge q p)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (q ++ q))
(Abs (a :: p) (q ++ p)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ p)), (Abs (a :: p) []), (Abs (merge q q) q), (Abs (merge q q) p), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: p))
(Abs (merge q q) (merge q p)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (insert k q)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (q ++ q))
(Abs (merge q q) (q ++ p)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) []), (Abs (merge q p) q), (Abs (merge q p) p), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: p))
(Abs (merge q p) (merge q q)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p p)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (q ++ q))
(Abs (merge q p) (q ++ p)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) []), (Abs (merge p q) q), (Abs (merge p q) p), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: p))
(Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q p)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a p)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (q ++ q))
(Abs (merge p q) (q ++ p)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) []), (Abs (merge p p) q), (Abs (merge p p) p), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: p))
(Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k p)), (Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (q ++ q))
(Abs (merge p p) (q ++ p)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) []), (Abs (insert k q) q), (Abs (insert k q) p), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: p))
(Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (insert k p)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (q ++ q))
(Abs (insert k q) (q ++ p)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) []), (Abs (insert k p) q), (Abs (insert k p) p), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: p))
(Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (q ++ q))
(Abs (insert k p) (q ++ p)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) []), (Abs (insert a q) q), (Abs (insert a q) p), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: p))
(Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (q ++ q))
(Abs (insert a q) (q ++ p)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) []), (Abs (insert a p) q), (Abs (insert a p) p), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: p))
(Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (q ++ q))
(Abs (insert a p) (q ++ p)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) p), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: p))
(Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p p)), (Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (q ++ q))
(Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) p), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: p))
(Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (q ++ q))
(Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) []), (Abs (q ++ q) q), (Abs (q ++ q) p), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: p))
(Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap p))
(Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) []), (Abs (q ++ p) q), (Abs (q ++ p) p), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: p))
(Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p p)), (Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap p))
(Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) []), (Abs (p ++ q) q), (Abs (p ++ q) p), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: p))
(Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a p)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap p))
(Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) []), (Abs (p ++ p) q), (Abs (p ++ p) p), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: p))
(Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q p)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert a q)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap p))
(Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) []), (Abs [] q), (Abs [] p), (Abs [] (k :: q)), (Abs [] (k :: p)), (Abs [] (a :: q)), (Abs [] (a :: p))
(Abs [] (merge q q)), (Abs [] (merge q p)), (Abs [] (merge p q)), (Abs [] (merge p p)), (Abs [] (insert k q)), (Abs [] (insert k p)), (Abs [] (insert a q)), (Abs [] (insert a p)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap p))
(Abs [] (q ++ q)), (Abs [] (q ++ p)), (Abs [] (p ++ q)), (Abs [] (p ++ p)), (priq (k :: q)), (priq (k :: p)), (priq (a :: q)), (priq (a :: p)), (priq (merge q q)), (priq (merge q p))
(priq (merge p q)), (priq (merge p p)), (priq (insert k q)), (priq (insert k p)), (priq (insert a q)), (priq (insert a p)), (priq (maybe_swap q)), (priq (maybe_swap p)), (priq (q ++ q)), (priq (q ++ p))
(priq (p ++ q)), (priq (p ++ p)), (priq []), (Permutation q (k :: q)), (Permutation q (k :: p)), (Permutation q (a :: q)), (Permutation q (a :: p)), (Permutation q (merge q q)), (Permutation q (merge q p)), (Permutation q (merge p q))
(Permutation q (merge p p)), (Permutation q (insert k q)), (Permutation q (insert k p)), (Permutation q (insert a q)), (Permutation q (insert a p)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap p)), (Permutation q (q ++ q)), (Permutation q (q ++ p)), (Permutation q (p ++ q))
(Permutation q (p ++ p)), (Permutation q []), (Permutation p (k :: q)), (Permutation p (k :: p)), (Permutation p (a :: q)), (Permutation p (a :: p)), (Permutation p (merge q q)), (Permutation p (merge q p)), (Permutation p (merge p q)), (Permutation p (merge p p))
(Permutation p (insert k q)), (Permutation p (insert k p)), (Permutation p (insert a q)), (Permutation p (insert a p)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap p)), (Permutation p (q ++ q)), (Permutation p (q ++ p)), (Permutation p (p ++ q)), (Permutation p (p ++ p))
(Permutation p []), (Permutation (k :: q) q), (Permutation (k :: q) p), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p p))
(Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ p))
(Permutation (k :: q) []), (Permutation (k :: p) q), (Permutation (k :: p) p), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p p))
(Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ p))
(Permutation (k :: p) []), (Permutation (a :: q) q), (Permutation (a :: q) p), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p p))
(Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap p)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ p))
(Permutation (a :: q) []), (Permutation (a :: p) q), (Permutation (a :: p) p), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p p))
(Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ p))
(Permutation (a :: p) []), (Permutation (merge q q) q), (Permutation (merge q q) p), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: p)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p p))
(Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ p))
(Permutation (merge q q) []), (Permutation (merge q p) q), (Permutation (merge q p) p), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p p))
(Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ p))
(Permutation (merge q p) []), (Permutation (merge p q) q), (Permutation (merge p q) p), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q p)), (Permutation (merge p q) (merge p p))
(Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ p))
(Permutation (merge p q) []), (Permutation (merge p p) q), (Permutation (merge p p) p), (Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge p q))
(Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a p)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ p))
(Permutation (merge p p) []), (Permutation (insert k q) q), (Permutation (insert k q) p), (Permutation (insert k q) (k :: q)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge p q))
(Permutation (insert k q) (merge p p)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert a q)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ p))
(Permutation (insert k q) []), (Permutation (insert k p) q), (Permutation (insert k p) p), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge p q))
(Permutation (insert k p) (merge p p)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ p))
(Permutation (insert k p) []), (Permutation (insert a q) q), (Permutation (insert a q) p), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge p q))
(Permutation (insert a q) (merge p p)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ p))
(Permutation (insert a q) []), (Permutation (insert a p) q), (Permutation (insert a p) p), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge p q))
(Permutation (insert a p) (merge p p)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ p))
(Permutation (insert a p) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge p q))
(Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ p))
(Permutation (maybe_swap q) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge p q))
(Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ p))
(Permutation (maybe_swap p) []), (Permutation (q ++ q) q), (Permutation (q ++ q) p), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge p q))
(Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ p))
(Permutation (q ++ q) []), (Permutation (q ++ p) q), (Permutation (q ++ p) p), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge p q))
(Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ p))
(Permutation (q ++ p) []), (Permutation (p ++ q) q), (Permutation (p ++ q) p), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge p q))
(Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (p ++ p))
(Permutation (p ++ q) []), (Permutation (p ++ p) q), (Permutation (p ++ p) p), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge p q))
(Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert a q)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (p ++ q))
(Permutation (p ++ p) []), (Permutation [] q), (Permutation [] p), (Permutation [] (k :: q)), (Permutation [] (k :: p)), (Permutation [] (a :: q)), (Permutation [] (a :: p)), (Permutation [] (merge q q)), (Permutation [] (merge q p)), (Permutation [] (merge p q))
(Permutation [] (merge p p)), (Permutation [] (insert k q)), (Permutation [] (insert k p)), (Permutation [] (insert a q)), (Permutation [] (insert a p)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap p)), (Permutation [] (q ++ q)), (Permutation [] (q ++ p)), (Permutation [] (p ++ q))
(Permutation [] (p ++ p)), (In k (k :: q)), (In k (k :: p)), (In k (a :: q)), (In k (a :: p)), (In k (merge q q)), (In k (merge q p)), (In k (merge p q)), (In k (merge p p)), (In k (insert k q))
(In k (insert k p)), (In k (insert a q)), (In k (insert a p)), (In k (maybe_swap q)), (In k (maybe_swap p)), (In k (q ++ q)), (In k (q ++ p)), (In k (p ++ q)), (In k (p ++ p)), (In a (k :: q))
(In a (k :: p)), (In a (a :: q)), (In a (a :: p)), (In a (merge q q)), (In a (merge q p)), (In a (merge p q)), (In a (merge p p)), (In a (insert k q)), (In a (insert k p)), (In a (insert a q))
(In a (insert a p)), (In a (maybe_swap q)), (In a (maybe_swap p)), (In a (q ++ q)), (In a (q ++ p)), (In a (p ++ q)), (In a (p ++ p)), (In (length q) q), (In (length q) p), (In (length q) (k :: q))
(In (length q) (k :: p)), (In (length q) (a :: q)), (In (length q) (a :: p)), (In (length q) (merge q q)), (In (length q) (merge q p)), (In (length q) (merge p q)), (In (length q) (merge p p)), (In (length q) (insert k q)), (In (length q) (insert k p)), (In (length q) (insert a q))
(In (length q) (insert a p)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap p)), (In (length q) (q ++ q)), (In (length q) (q ++ p)), (In (length q) (p ++ q)), (In (length q) (p ++ p)), (In (length p) q), (In (length p) p), (In (length p) (k :: q))
(In (length p) (k :: p)), (In (length p) (a :: q)), (In (length p) (a :: p)), (In (length p) (merge q q)), (In (length p) (merge q p)), (In (length p) (merge p q)), (In (length p) (merge p p)), (In (length p) (insert k q)), (In (length p) (insert k p)), (In (length p) (insert a q))
(In (length p) (insert a p)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap p)), (In (length p) (q ++ q)), (In (length p) (q ++ p)), (In (length p) (p ++ q)), (In (length p) (p ++ p)), (k < length q), (k < length p), (a < length q)
(a < length p), (length q < k), (length q < a), (length q < length p), (length p < k), (length p < a), (length p < length q), (k <= length q), (k <= length p), (a <= length q)
(a <= length p), (length q <= k), (length q <= a), (length q <= length p), (length p <= k), (length p <= a), (length p <= length q), (~ Abs q q), (~ Abs q p), (~ Abs p q)
(~ Abs p p), (~ priq q), (~ priq p), (~ Permutation q q), (~ Permutation q p), (~ Permutation p q), (~ Permutation p p), (~ In k q), (~ In k p), (~ In a q)
(~ In a p), (~ k < k), (~ k < a), (~ a < k), (~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (q <> q)
(q <> p), (p <> q), (p <> p), (k <> k), (k <> a), (a <> k), (a <> a), (None = Some q), (None = Some p), (k :: q = q)
(k :: q = p), (k :: q = merge q q), (k :: q = merge q p), (k :: q = merge p q), (k :: q = merge p p), (k :: q = insert k q), (k :: q = insert k p), (k :: q = insert a q), (k :: q = insert a p), (k :: q = maybe_swap q)
(k :: q = maybe_swap p), (k :: q = q ++ q), (k :: q = q ++ p), (k :: q = p ++ q), (k :: q = p ++ p), (k :: q = []), (k :: p = q), (k :: p = p), (k :: p = merge q q), (k :: p = merge q p)
(k :: p = merge p q), (k :: p = merge p p), (k :: p = insert k q), (k :: p = insert k p), (k :: p = insert a q), (k :: p = insert a p), (k :: p = maybe_swap q), (k :: p = maybe_swap p), (k :: p = q ++ q), (k :: p = q ++ p)
(k :: p = p ++ q), (k :: p = p ++ p), (k :: p = []), (a :: q = q), (a :: q = p), (a :: q = merge q q), (a :: q = merge q p), (a :: q = merge p q), (a :: q = merge p p), (a :: q = insert k q)
(a :: q = insert k p), (a :: q = insert a q), (a :: q = insert a p), (a :: q = maybe_swap q), (a :: q = maybe_swap p), (a :: q = q ++ q), (a :: q = q ++ p), (a :: q = p ++ q), (a :: q = p ++ p), (a :: q = [])
(a :: p = q), (a :: p = p), (a :: p = merge q q), (a :: p = merge q p), (a :: p = merge p q), (a :: p = merge p p), (a :: p = insert k q), (a :: p = insert k p), (a :: p = insert a q), (a :: p = insert a p)
(a :: p = maybe_swap q), (a :: p = maybe_swap p), (a :: p = q ++ q), (a :: p = q ++ p), (a :: p = p ++ q), (a :: p = p ++ p), (a :: p = []), (merge q q = q), (merge q q = p), (merge q q = insert k q)
(merge q q = insert k p), (merge q q = insert a q), (merge q q = insert a p), (merge q q = maybe_swap q), (merge q q = maybe_swap p), (merge q q = q ++ q), (merge q q = q ++ p), (merge q q = p ++ q), (merge q q = p ++ p), (merge q p = q)
(merge q p = p), (merge q p = insert k q), (merge q p = insert k p), (merge q p = insert a q), (merge q p = insert a p), (merge q p = maybe_swap q), (merge q p = maybe_swap p), (merge q p = q ++ q), (merge q p = q ++ p), (merge q p = p ++ q)
(merge q p = p ++ p), (merge p q = q), (merge p q = p), (merge p q = insert k q), (merge p q = insert k p), (merge p q = insert a q), (merge p q = insert a p), (merge p q = maybe_swap q), (merge p q = maybe_swap p), (merge p q = q ++ q)
(merge p q = q ++ p), (merge p q = p ++ q), (merge p q = p ++ p), (merge p p = q), (merge p p = p), (merge p p = insert k q), (merge p p = insert k p), (merge p p = insert a q), (merge p p = insert a p), (merge p p = maybe_swap q)
(merge p p = maybe_swap p), (merge p p = q ++ q), (merge p p = q ++ p), (merge p p = p ++ q), (merge p p = p ++ p), (insert k q = q), (insert k q = p), (insert k q = q ++ q), (insert k q = q ++ p), (insert k q = p ++ q)
(insert k q = p ++ p), (insert k p = q), (insert k p = p), (insert k p = q ++ q), (insert k p = q ++ p), (insert k p = p ++ q), (insert k p = p ++ p), (insert a q = q), (insert a q = p), (insert a q = q ++ q)
(insert a q = q ++ p), (insert a q = p ++ q), (insert a q = p ++ p), (insert a p = q), (insert a p = p), (insert a p = q ++ q), (insert a p = q ++ p), (insert a p = p ++ q), (insert a p = p ++ p), (maybe_swap q = q)
(maybe_swap q = p), (maybe_swap q = insert k q), (maybe_swap q = insert k p), (maybe_swap q = insert a q), (maybe_swap q = insert a p), (maybe_swap q = q ++ q), (maybe_swap q = q ++ p), (maybe_swap q = p ++ q), (maybe_swap q = p ++ p), (maybe_swap p = q)
(maybe_swap p = p), (maybe_swap p = insert k q), (maybe_swap p = insert k p), (maybe_swap p = insert a q), (maybe_swap p = insert a p), (maybe_swap p = q ++ q), (maybe_swap p = q ++ p), (maybe_swap p = p ++ q), (maybe_swap p = p ++ p), (q ++ q = q)
(q ++ q = p), (q ++ p = q), (q ++ p = p), (p ++ q = q), (p ++ q = p), (p ++ p = q), (p ++ p = p), ([] = q), ([] = p), ([] = merge q q)
([] = merge q p), ([] = merge p q), ([] = merge p p), ([] = insert k q), ([] = insert k p), ([] = insert a q), ([] = insert a p), ([] = maybe_swap q), ([] = maybe_swap p), ([] = q ++ q)
([] = q ++ p), ([] = p ++ q), ([] = p ++ p), (None = Some k), (None = Some a), ((k, q) = select k q), ((k, q) = select k p), ((k, q) = select a q), ((k, q) = select a p), ((k, p) = select k q)
((k, p) = select k p), ((k, p) = select a q), ((k, p) = select a p), ((a, q) = select k q), ((a, q) = select k p), ((a, q) = select a q), ((a, q) = select a p), ((a, p) = select k q), ((a, p) = select k p), ((a, p) = select a q)
((a, p) = select a p), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k)), ((k >? k) = (a >=? a)), ((k >? a) = (k >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (a >=? a)), ((a >? k) = (k >=? k))
((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k)), ((a >? a) = (k >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (a >=? a)), (length q = k), (length q = a), (length p = k)
(length p = a)

Label: 1 (1)
(Abs p p), (Abs p q), (Abs p gv0), (Abs q p), (Abs q q), (Abs q gv0), (Abs gv0 p), (Abs gv0 q), (Abs gv0 gv0), (priq p)
(priq q), (priq gv0), (Permutation p p), (Permutation p q), (Permutation p gv0), (Permutation q p), (Permutation q q), (Permutation q gv0), (Permutation gv0 p), (Permutation gv0 q)
(Permutation gv0 gv0), (In a p), (In a q), (In a gv0), (In k p), (In k q), (In k gv0), (a < a), (a < k), (k < a)
(k < k), (a <= a), (a <= k), (k <= a), (k <= k), (a = a), (a = k), (k = a), (k = k), (p = p)
(p = q), (p = gv0), (q = p), (q = q), (q = gv0), (gv0 = p), (gv0 = q), (gv0 = gv0), (false = (a >? a)), (false = (a >? k))
(false = (k >? a)), (false = (k >? k)), (false = (a >=? a)), (false = (a >=? k)), (false = (k >=? a)), (false = (k >=? k)), (true = (a >? a)), (true = (a >? k)), (true = (k >? a)), (true = (k >? k))
(true = (a >=? a)), (true = (a >=? k)), (true = (k >=? a)), (true = (k >=? k)), (Abs p (a :: p)), (Abs p (a :: q)), (Abs p (a :: gv0)), (Abs p (k :: p)), (Abs p (k :: q)), (Abs p (k :: gv0))
(Abs p (merge p p)), (Abs p (merge p q)), (Abs p (merge p gv0)), (Abs p (merge q p)), (Abs p (merge q q)), (Abs p (merge q gv0)), (Abs p (merge gv0 p)), (Abs p (merge gv0 q)), (Abs p (merge gv0 gv0)), (Abs p (insert a p))
(Abs p (insert a q)), (Abs p (insert a gv0)), (Abs p (insert k p)), (Abs p (insert k q)), (Abs p (insert k gv0)), (Abs p (maybe_swap p)), (Abs p (maybe_swap q)), (Abs p (maybe_swap gv0)), (Abs p (p ++ p)), (Abs p (p ++ q))
(Abs p (p ++ gv0)), (Abs p (q ++ p)), (Abs p (q ++ q)), (Abs p (q ++ gv0)), (Abs p (gv0 ++ p)), (Abs p (gv0 ++ q)), (Abs p (gv0 ++ gv0)), (Abs p []), (Abs q (a :: p)), (Abs q (a :: q))
(Abs q (a :: gv0)), (Abs q (k :: p)), (Abs q (k :: q)), (Abs q (k :: gv0)), (Abs q (merge p p)), (Abs q (merge p q)), (Abs q (merge p gv0)), (Abs q (merge q p)), (Abs q (merge q q)), (Abs q (merge q gv0))
(Abs q (merge gv0 p)), (Abs q (merge gv0 q)), (Abs q (merge gv0 gv0)), (Abs q (insert a p)), (Abs q (insert a q)), (Abs q (insert a gv0)), (Abs q (insert k p)), (Abs q (insert k q)), (Abs q (insert k gv0)), (Abs q (maybe_swap p))
(Abs q (maybe_swap q)), (Abs q (maybe_swap gv0)), (Abs q (p ++ p)), (Abs q (p ++ q)), (Abs q (p ++ gv0)), (Abs q (q ++ p)), (Abs q (q ++ q)), (Abs q (q ++ gv0)), (Abs q (gv0 ++ p)), (Abs q (gv0 ++ q))
(Abs q (gv0 ++ gv0)), (Abs q []), (Abs gv0 (a :: p)), (Abs gv0 (a :: q)), (Abs gv0 (a :: gv0)), (Abs gv0 (k :: p)), (Abs gv0 (k :: q)), (Abs gv0 (k :: gv0)), (Abs gv0 (merge p p)), (Abs gv0 (merge p q))
(Abs gv0 (merge p gv0)), (Abs gv0 (merge q p)), (Abs gv0 (merge q q)), (Abs gv0 (merge q gv0)), (Abs gv0 (merge gv0 p)), (Abs gv0 (merge gv0 q)), (Abs gv0 (merge gv0 gv0)), (Abs gv0 (insert a p)), (Abs gv0 (insert a q)), (Abs gv0 (insert a gv0))
(Abs gv0 (insert k p)), (Abs gv0 (insert k q)), (Abs gv0 (insert k gv0)), (Abs gv0 (maybe_swap p)), (Abs gv0 (maybe_swap q)), (Abs gv0 (maybe_swap gv0)), (Abs gv0 (p ++ p)), (Abs gv0 (p ++ q)), (Abs gv0 (p ++ gv0)), (Abs gv0 (q ++ p))
(Abs gv0 (q ++ q)), (Abs gv0 (q ++ gv0)), (Abs gv0 (gv0 ++ p)), (Abs gv0 (gv0 ++ q)), (Abs gv0 (gv0 ++ gv0)), (Abs gv0 []), (Abs (a :: p) p), (Abs (a :: p) q), (Abs (a :: p) gv0), (Abs (a :: p) (a :: q))
(Abs (a :: p) (a :: gv0)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (k :: q)), (Abs (a :: p) (k :: gv0)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p gv0)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q gv0))
(Abs (a :: p) (merge gv0 p)), (Abs (a :: p) (merge gv0 q)), (Abs (a :: p) (merge gv0 gv0)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a gv0)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k gv0)), (Abs (a :: p) (maybe_swap p))
(Abs (a :: p) (maybe_swap q)), (Abs (a :: p) (maybe_swap gv0)), (Abs (a :: p) (p ++ p)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ gv0)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ gv0)), (Abs (a :: p) (gv0 ++ p)), (Abs (a :: p) (gv0 ++ q))
(Abs (a :: p) (gv0 ++ gv0)), (Abs (a :: p) []), (Abs (a :: q) p), (Abs (a :: q) q), (Abs (a :: q) gv0), (Abs (a :: q) (a :: p)), (Abs (a :: q) (a :: gv0)), (Abs (a :: q) (k :: p)), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: gv0))
(Abs (a :: q) (merge p p)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p gv0)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q gv0)), (Abs (a :: q) (merge gv0 p)), (Abs (a :: q) (merge gv0 q)), (Abs (a :: q) (merge gv0 gv0)), (Abs (a :: q) (insert a p))
(Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a gv0)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k gv0)), (Abs (a :: q) (maybe_swap p)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap gv0)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) (p ++ q))
(Abs (a :: q) (p ++ gv0)), (Abs (a :: q) (q ++ p)), (Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ gv0)), (Abs (a :: q) (gv0 ++ p)), (Abs (a :: q) (gv0 ++ q)), (Abs (a :: q) (gv0 ++ gv0)), (Abs (a :: q) []), (Abs (a :: gv0) p), (Abs (a :: gv0) q)
(Abs (a :: gv0) gv0), (Abs (a :: gv0) (a :: p)), (Abs (a :: gv0) (a :: q)), (Abs (a :: gv0) (k :: p)), (Abs (a :: gv0) (k :: q)), (Abs (a :: gv0) (k :: gv0)), (Abs (a :: gv0) (merge p p)), (Abs (a :: gv0) (merge p q)), (Abs (a :: gv0) (merge p gv0)), (Abs (a :: gv0) (merge q p))
(Abs (a :: gv0) (merge q q)), (Abs (a :: gv0) (merge q gv0)), (Abs (a :: gv0) (merge gv0 p)), (Abs (a :: gv0) (merge gv0 q)), (Abs (a :: gv0) (merge gv0 gv0)), (Abs (a :: gv0) (insert a p)), (Abs (a :: gv0) (insert a q)), (Abs (a :: gv0) (insert a gv0)), (Abs (a :: gv0) (insert k p)), (Abs (a :: gv0) (insert k q))
(Abs (a :: gv0) (insert k gv0)), (Abs (a :: gv0) (maybe_swap p)), (Abs (a :: gv0) (maybe_swap q)), (Abs (a :: gv0) (maybe_swap gv0)), (Abs (a :: gv0) (p ++ p)), (Abs (a :: gv0) (p ++ q)), (Abs (a :: gv0) (p ++ gv0)), (Abs (a :: gv0) (q ++ p)), (Abs (a :: gv0) (q ++ q)), (Abs (a :: gv0) (q ++ gv0))
(Abs (a :: gv0) (gv0 ++ p)), (Abs (a :: gv0) (gv0 ++ q)), (Abs (a :: gv0) (gv0 ++ gv0)), (Abs (a :: gv0) []), (Abs (k :: p) p), (Abs (k :: p) q), (Abs (k :: p) gv0), (Abs (k :: p) (a :: p)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: gv0))
(Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: gv0)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p gv0)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q gv0)), (Abs (k :: p) (merge gv0 p)), (Abs (k :: p) (merge gv0 q))
(Abs (k :: p) (merge gv0 gv0)), (Abs (k :: p) (insert a p)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a gv0)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k gv0)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap gv0))
(Abs (k :: p) (p ++ p)), (Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ gv0)), (Abs (k :: p) (q ++ p)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ gv0)), (Abs (k :: p) (gv0 ++ p)), (Abs (k :: p) (gv0 ++ q)), (Abs (k :: p) (gv0 ++ gv0)), (Abs (k :: p) [])
(Abs (k :: q) p), (Abs (k :: q) q), (Abs (k :: q) gv0), (Abs (k :: q) (a :: p)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: gv0)), (Abs (k :: q) (k :: p)), (Abs (k :: q) (k :: gv0)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (merge p q))
(Abs (k :: q) (merge p gv0)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q gv0)), (Abs (k :: q) (merge gv0 p)), (Abs (k :: q) (merge gv0 q)), (Abs (k :: q) (merge gv0 gv0)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a gv0))
(Abs (k :: q) (insert k p)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k gv0)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (maybe_swap q)), (Abs (k :: q) (maybe_swap gv0)), (Abs (k :: q) (p ++ p)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ gv0)), (Abs (k :: q) (q ++ p))
(Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ gv0)), (Abs (k :: q) (gv0 ++ p)), (Abs (k :: q) (gv0 ++ q)), (Abs (k :: q) (gv0 ++ gv0)), (Abs (k :: q) []), (Abs (k :: gv0) p), (Abs (k :: gv0) q), (Abs (k :: gv0) gv0), (Abs (k :: gv0) (a :: p))
(Abs (k :: gv0) (a :: q)), (Abs (k :: gv0) (a :: gv0)), (Abs (k :: gv0) (k :: p)), (Abs (k :: gv0) (k :: q)), (Abs (k :: gv0) (merge p p)), (Abs (k :: gv0) (merge p q)), (Abs (k :: gv0) (merge p gv0)), (Abs (k :: gv0) (merge q p)), (Abs (k :: gv0) (merge q q)), (Abs (k :: gv0) (merge q gv0))
(Abs (k :: gv0) (merge gv0 p)), (Abs (k :: gv0) (merge gv0 q)), (Abs (k :: gv0) (merge gv0 gv0)), (Abs (k :: gv0) (insert a p)), (Abs (k :: gv0) (insert a q)), (Abs (k :: gv0) (insert a gv0)), (Abs (k :: gv0) (insert k p)), (Abs (k :: gv0) (insert k q)), (Abs (k :: gv0) (insert k gv0)), (Abs (k :: gv0) (maybe_swap p))
(Abs (k :: gv0) (maybe_swap q)), (Abs (k :: gv0) (maybe_swap gv0)), (Abs (k :: gv0) (p ++ p)), (Abs (k :: gv0) (p ++ q)), (Abs (k :: gv0) (p ++ gv0)), (Abs (k :: gv0) (q ++ p)), (Abs (k :: gv0) (q ++ q)), (Abs (k :: gv0) (q ++ gv0)), (Abs (k :: gv0) (gv0 ++ p)), (Abs (k :: gv0) (gv0 ++ q))
(Abs (k :: gv0) (gv0 ++ gv0)), (Abs (k :: gv0) []), (Abs (merge p p) p), (Abs (merge p p) q), (Abs (merge p p) gv0), (Abs (merge p p) (a :: p)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: gv0)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (k :: q))
(Abs (merge p p) (k :: gv0)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p gv0)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge q q)), (Abs (merge p p) (merge q gv0)), (Abs (merge p p) (merge gv0 p)), (Abs (merge p p) (merge gv0 q)), (Abs (merge p p) (merge gv0 gv0)), (Abs (merge p p) (insert a p))
(Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a gv0)), (Abs (merge p p) (insert k p)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k gv0)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap gv0)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) (p ++ q))
(Abs (merge p p) (p ++ gv0)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ gv0)), (Abs (merge p p) (gv0 ++ p)), (Abs (merge p p) (gv0 ++ q)), (Abs (merge p p) (gv0 ++ gv0)), (Abs (merge p p) []), (Abs (merge p q) p), (Abs (merge p q) q)
(Abs (merge p q) gv0), (Abs (merge p q) (a :: p)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: gv0)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: gv0)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (merge p gv0)), (Abs (merge p q) (merge q p))
(Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q gv0)), (Abs (merge p q) (merge gv0 p)), (Abs (merge p q) (merge gv0 q)), (Abs (merge p q) (merge gv0 gv0)), (Abs (merge p q) (insert a p)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a gv0)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert k q))
(Abs (merge p q) (insert k gv0)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap gv0)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ gv0)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ gv0))
(Abs (merge p q) (gv0 ++ p)), (Abs (merge p q) (gv0 ++ q)), (Abs (merge p q) (gv0 ++ gv0)), (Abs (merge p q) []), (Abs (merge p gv0) p), (Abs (merge p gv0) q), (Abs (merge p gv0) gv0), (Abs (merge p gv0) (a :: p)), (Abs (merge p gv0) (a :: q)), (Abs (merge p gv0) (a :: gv0))
(Abs (merge p gv0) (k :: p)), (Abs (merge p gv0) (k :: q)), (Abs (merge p gv0) (k :: gv0)), (Abs (merge p gv0) (merge p p)), (Abs (merge p gv0) (merge p q)), (Abs (merge p gv0) (merge q p)), (Abs (merge p gv0) (merge q q)), (Abs (merge p gv0) (merge q gv0)), (Abs (merge p gv0) (merge gv0 p)), (Abs (merge p gv0) (merge gv0 q))
(Abs (merge p gv0) (merge gv0 gv0)), (Abs (merge p gv0) (insert a p)), (Abs (merge p gv0) (insert a q)), (Abs (merge p gv0) (insert a gv0)), (Abs (merge p gv0) (insert k p)), (Abs (merge p gv0) (insert k q)), (Abs (merge p gv0) (insert k gv0)), (Abs (merge p gv0) (maybe_swap p)), (Abs (merge p gv0) (maybe_swap q)), (Abs (merge p gv0) (maybe_swap gv0))
(Abs (merge p gv0) (p ++ p)), (Abs (merge p gv0) (p ++ q)), (Abs (merge p gv0) (p ++ gv0)), (Abs (merge p gv0) (q ++ p)), (Abs (merge p gv0) (q ++ q)), (Abs (merge p gv0) (q ++ gv0)), (Abs (merge p gv0) (gv0 ++ p)), (Abs (merge p gv0) (gv0 ++ q)), (Abs (merge p gv0) (gv0 ++ gv0)), (Abs (merge p gv0) [])
(Abs (merge q p) p), (Abs (merge q p) q), (Abs (merge q p) gv0), (Abs (merge q p) (a :: p)), (Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: gv0)), (Abs (merge q p) (k :: p)), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: gv0)), (Abs (merge q p) (merge p p))
(Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p gv0)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q gv0)), (Abs (merge q p) (merge gv0 p)), (Abs (merge q p) (merge gv0 q)), (Abs (merge q p) (merge gv0 gv0)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a gv0))
(Abs (merge q p) (insert k p)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k gv0)), (Abs (merge q p) (maybe_swap p)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap gv0)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ gv0)), (Abs (merge q p) (q ++ p))
(Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ gv0)), (Abs (merge q p) (gv0 ++ p)), (Abs (merge q p) (gv0 ++ q)), (Abs (merge q p) (gv0 ++ gv0)), (Abs (merge q p) []), (Abs (merge q q) p), (Abs (merge q q) q), (Abs (merge q q) gv0), (Abs (merge q q) (a :: p))
(Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: gv0)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: gv0)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p gv0)), (Abs (merge q q) (merge q p)), (Abs (merge q q) (merge q gv0))
(Abs (merge q q) (merge gv0 p)), (Abs (merge q q) (merge gv0 q)), (Abs (merge q q) (merge gv0 gv0)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a gv0)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert k q)), (Abs (merge q q) (insert k gv0)), (Abs (merge q q) (maybe_swap p))
(Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap gv0)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ gv0)), (Abs (merge q q) (q ++ p)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ gv0)), (Abs (merge q q) (gv0 ++ p)), (Abs (merge q q) (gv0 ++ q))
(Abs (merge q q) (gv0 ++ gv0)), (Abs (merge q q) []), (Abs (merge q gv0) p), (Abs (merge q gv0) q), (Abs (merge q gv0) gv0), (Abs (merge q gv0) (a :: p)), (Abs (merge q gv0) (a :: q)), (Abs (merge q gv0) (a :: gv0)), (Abs (merge q gv0) (k :: p)), (Abs (merge q gv0) (k :: q))
(Abs (merge q gv0) (k :: gv0)), (Abs (merge q gv0) (merge p p)), (Abs (merge q gv0) (merge p q)), (Abs (merge q gv0) (merge p gv0)), (Abs (merge q gv0) (merge q p)), (Abs (merge q gv0) (merge q q)), (Abs (merge q gv0) (merge gv0 p)), (Abs (merge q gv0) (merge gv0 q)), (Abs (merge q gv0) (merge gv0 gv0)), (Abs (merge q gv0) (insert a p))
(Abs (merge q gv0) (insert a q)), (Abs (merge q gv0) (insert a gv0)), (Abs (merge q gv0) (insert k p)), (Abs (merge q gv0) (insert k q)), (Abs (merge q gv0) (insert k gv0)), (Abs (merge q gv0) (maybe_swap p)), (Abs (merge q gv0) (maybe_swap q)), (Abs (merge q gv0) (maybe_swap gv0)), (Abs (merge q gv0) (p ++ p)), (Abs (merge q gv0) (p ++ q))
(Abs (merge q gv0) (p ++ gv0)), (Abs (merge q gv0) (q ++ p)), (Abs (merge q gv0) (q ++ q)), (Abs (merge q gv0) (q ++ gv0)), (Abs (merge q gv0) (gv0 ++ p)), (Abs (merge q gv0) (gv0 ++ q)), (Abs (merge q gv0) (gv0 ++ gv0)), (Abs (merge q gv0) []), (Abs (merge gv0 p) p), (Abs (merge gv0 p) q)
(Abs (merge gv0 p) gv0), (Abs (merge gv0 p) (a :: p)), (Abs (merge gv0 p) (a :: q)), (Abs (merge gv0 p) (a :: gv0)), (Abs (merge gv0 p) (k :: p)), (Abs (merge gv0 p) (k :: q)), (Abs (merge gv0 p) (k :: gv0)), (Abs (merge gv0 p) (merge p p)), (Abs (merge gv0 p) (merge p q)), (Abs (merge gv0 p) (merge p gv0))
(Abs (merge gv0 p) (merge q p)), (Abs (merge gv0 p) (merge q q)), (Abs (merge gv0 p) (merge q gv0)), (Abs (merge gv0 p) (merge gv0 q)), (Abs (merge gv0 p) (merge gv0 gv0)), (Abs (merge gv0 p) (insert a p)), (Abs (merge gv0 p) (insert a q)), (Abs (merge gv0 p) (insert a gv0)), (Abs (merge gv0 p) (insert k p)), (Abs (merge gv0 p) (insert k q))
(Abs (merge gv0 p) (insert k gv0)), (Abs (merge gv0 p) (maybe_swap p)), (Abs (merge gv0 p) (maybe_swap q)), (Abs (merge gv0 p) (maybe_swap gv0)), (Abs (merge gv0 p) (p ++ p)), (Abs (merge gv0 p) (p ++ q)), (Abs (merge gv0 p) (p ++ gv0)), (Abs (merge gv0 p) (q ++ p)), (Abs (merge gv0 p) (q ++ q)), (Abs (merge gv0 p) (q ++ gv0))
(Abs (merge gv0 p) (gv0 ++ p)), (Abs (merge gv0 p) (gv0 ++ q)), (Abs (merge gv0 p) (gv0 ++ gv0)), (Abs (merge gv0 p) []), (Abs (merge gv0 q) p), (Abs (merge gv0 q) q), (Abs (merge gv0 q) gv0), (Abs (merge gv0 q) (a :: p)), (Abs (merge gv0 q) (a :: q)), (Abs (merge gv0 q) (a :: gv0))
(Abs (merge gv0 q) (k :: p)), (Abs (merge gv0 q) (k :: q)), (Abs (merge gv0 q) (k :: gv0)), (Abs (merge gv0 q) (merge p p)), (Abs (merge gv0 q) (merge p q)), (Abs (merge gv0 q) (merge p gv0)), (Abs (merge gv0 q) (merge q p)), (Abs (merge gv0 q) (merge q q)), (Abs (merge gv0 q) (merge q gv0)), (Abs (merge gv0 q) (merge gv0 p))
(Abs (merge gv0 q) (merge gv0 gv0)), (Abs (merge gv0 q) (insert a p)), (Abs (merge gv0 q) (insert a q)), (Abs (merge gv0 q) (insert a gv0)), (Abs (merge gv0 q) (insert k p)), (Abs (merge gv0 q) (insert k q)), (Abs (merge gv0 q) (insert k gv0)), (Abs (merge gv0 q) (maybe_swap p)), (Abs (merge gv0 q) (maybe_swap q)), (Abs (merge gv0 q) (maybe_swap gv0))
(Abs (merge gv0 q) (p ++ p)), (Abs (merge gv0 q) (p ++ q)), (Abs (merge gv0 q) (p ++ gv0)), (Abs (merge gv0 q) (q ++ p)), (Abs (merge gv0 q) (q ++ q)), (Abs (merge gv0 q) (q ++ gv0)), (Abs (merge gv0 q) (gv0 ++ p)), (Abs (merge gv0 q) (gv0 ++ q)), (Abs (merge gv0 q) (gv0 ++ gv0)), (Abs (merge gv0 q) [])
(Abs (merge gv0 gv0) p), (Abs (merge gv0 gv0) q), (Abs (merge gv0 gv0) gv0), (Abs (merge gv0 gv0) (a :: p)), (Abs (merge gv0 gv0) (a :: q)), (Abs (merge gv0 gv0) (a :: gv0)), (Abs (merge gv0 gv0) (k :: p)), (Abs (merge gv0 gv0) (k :: q)), (Abs (merge gv0 gv0) (k :: gv0)), (Abs (merge gv0 gv0) (merge p p))
(Abs (merge gv0 gv0) (merge p q)), (Abs (merge gv0 gv0) (merge p gv0)), (Abs (merge gv0 gv0) (merge q p)), (Abs (merge gv0 gv0) (merge q q)), (Abs (merge gv0 gv0) (merge q gv0)), (Abs (merge gv0 gv0) (merge gv0 p)), (Abs (merge gv0 gv0) (merge gv0 q)), (Abs (merge gv0 gv0) (insert a p)), (Abs (merge gv0 gv0) (insert a q)), (Abs (merge gv0 gv0) (insert a gv0))
(Abs (merge gv0 gv0) (insert k p)), (Abs (merge gv0 gv0) (insert k q)), (Abs (merge gv0 gv0) (insert k gv0)), (Abs (merge gv0 gv0) (maybe_swap p)), (Abs (merge gv0 gv0) (maybe_swap q)), (Abs (merge gv0 gv0) (maybe_swap gv0)), (Abs (merge gv0 gv0) (p ++ p)), (Abs (merge gv0 gv0) (p ++ q)), (Abs (merge gv0 gv0) (p ++ gv0)), (Abs (merge gv0 gv0) (q ++ p))
(Abs (merge gv0 gv0) (q ++ q)), (Abs (merge gv0 gv0) (q ++ gv0)), (Abs (merge gv0 gv0) (gv0 ++ p)), (Abs (merge gv0 gv0) (gv0 ++ q)), (Abs (merge gv0 gv0) (gv0 ++ gv0)), (Abs (merge gv0 gv0) []), (Abs (insert a p) p), (Abs (insert a p) q), (Abs (insert a p) gv0), (Abs (insert a p) (a :: p))
(Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: gv0)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (k :: q)), (Abs (insert a p) (k :: gv0)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p gv0)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge q q))
(Abs (insert a p) (merge q gv0)), (Abs (insert a p) (merge gv0 p)), (Abs (insert a p) (merge gv0 q)), (Abs (insert a p) (merge gv0 gv0)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a gv0)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k gv0)), (Abs (insert a p) (maybe_swap p))
(Abs (insert a p) (maybe_swap q)), (Abs (insert a p) (maybe_swap gv0)), (Abs (insert a p) (p ++ p)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ gv0)), (Abs (insert a p) (q ++ p)), (Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ gv0)), (Abs (insert a p) (gv0 ++ p)), (Abs (insert a p) (gv0 ++ q))
(Abs (insert a p) (gv0 ++ gv0)), (Abs (insert a p) []), (Abs (insert a q) p), (Abs (insert a q) q), (Abs (insert a q) gv0), (Abs (insert a q) (a :: p)), (Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: gv0)), (Abs (insert a q) (k :: p)), (Abs (insert a q) (k :: q))
(Abs (insert a q) (k :: gv0)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (merge p q)), (Abs (insert a q) (merge p gv0)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q gv0)), (Abs (insert a q) (merge gv0 p)), (Abs (insert a q) (merge gv0 q)), (Abs (insert a q) (merge gv0 gv0))
(Abs (insert a q) (insert a p)), (Abs (insert a q) (insert a gv0)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k gv0)), (Abs (insert a q) (maybe_swap p)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap gv0)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) (p ++ q))
(Abs (insert a q) (p ++ gv0)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ gv0)), (Abs (insert a q) (gv0 ++ p)), (Abs (insert a q) (gv0 ++ q)), (Abs (insert a q) (gv0 ++ gv0)), (Abs (insert a q) []), (Abs (insert a gv0) p), (Abs (insert a gv0) q)
(Abs (insert a gv0) gv0), (Abs (insert a gv0) (a :: p)), (Abs (insert a gv0) (a :: q)), (Abs (insert a gv0) (a :: gv0)), (Abs (insert a gv0) (k :: p)), (Abs (insert a gv0) (k :: q)), (Abs (insert a gv0) (k :: gv0)), (Abs (insert a gv0) (merge p p)), (Abs (insert a gv0) (merge p q)), (Abs (insert a gv0) (merge p gv0))
(Abs (insert a gv0) (merge q p)), (Abs (insert a gv0) (merge q q)), (Abs (insert a gv0) (merge q gv0)), (Abs (insert a gv0) (merge gv0 p)), (Abs (insert a gv0) (merge gv0 q)), (Abs (insert a gv0) (merge gv0 gv0)), (Abs (insert a gv0) (insert a p)), (Abs (insert a gv0) (insert a q)), (Abs (insert a gv0) (insert k p)), (Abs (insert a gv0) (insert k q))
(Abs (insert a gv0) (insert k gv0)), (Abs (insert a gv0) (maybe_swap p)), (Abs (insert a gv0) (maybe_swap q)), (Abs (insert a gv0) (maybe_swap gv0)), (Abs (insert a gv0) (p ++ p)), (Abs (insert a gv0) (p ++ q)), (Abs (insert a gv0) (p ++ gv0)), (Abs (insert a gv0) (q ++ p)), (Abs (insert a gv0) (q ++ q)), (Abs (insert a gv0) (q ++ gv0))
(Abs (insert a gv0) (gv0 ++ p)), (Abs (insert a gv0) (gv0 ++ q)), (Abs (insert a gv0) (gv0 ++ gv0)), (Abs (insert a gv0) []), (Abs (insert k p) p), (Abs (insert k p) q), (Abs (insert k p) gv0), (Abs (insert k p) (a :: p)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: gv0))
(Abs (insert k p) (k :: p)), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: gv0)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p gv0)), (Abs (insert k p) (merge q p)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q gv0)), (Abs (insert k p) (merge gv0 p))
(Abs (insert k p) (merge gv0 q)), (Abs (insert k p) (merge gv0 gv0)), (Abs (insert k p) (insert a p)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a gv0)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k gv0)), (Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap gv0))
(Abs (insert k p) (p ++ p)), (Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ gv0)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ gv0)), (Abs (insert k p) (gv0 ++ p)), (Abs (insert k p) (gv0 ++ q)), (Abs (insert k p) (gv0 ++ gv0)), (Abs (insert k p) [])
(Abs (insert k q) p), (Abs (insert k q) q), (Abs (insert k q) gv0), (Abs (insert k q) (a :: p)), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: gv0)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (k :: q)), (Abs (insert k q) (k :: gv0)), (Abs (insert k q) (merge p p))
(Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p gv0)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q gv0)), (Abs (insert k q) (merge gv0 p)), (Abs (insert k q) (merge gv0 q)), (Abs (insert k q) (merge gv0 gv0)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (insert a q))
(Abs (insert k q) (insert a gv0)), (Abs (insert k q) (insert k p)), (Abs (insert k q) (insert k gv0)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (maybe_swap q)), (Abs (insert k q) (maybe_swap gv0)), (Abs (insert k q) (p ++ p)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ gv0)), (Abs (insert k q) (q ++ p))
(Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ gv0)), (Abs (insert k q) (gv0 ++ p)), (Abs (insert k q) (gv0 ++ q)), (Abs (insert k q) (gv0 ++ gv0)), (Abs (insert k q) []), (Abs (insert k gv0) p), (Abs (insert k gv0) q), (Abs (insert k gv0) gv0), (Abs (insert k gv0) (a :: p))
(Abs (insert k gv0) (a :: q)), (Abs (insert k gv0) (a :: gv0)), (Abs (insert k gv0) (k :: p)), (Abs (insert k gv0) (k :: q)), (Abs (insert k gv0) (k :: gv0)), (Abs (insert k gv0) (merge p p)), (Abs (insert k gv0) (merge p q)), (Abs (insert k gv0) (merge p gv0)), (Abs (insert k gv0) (merge q p)), (Abs (insert k gv0) (merge q q))
(Abs (insert k gv0) (merge q gv0)), (Abs (insert k gv0) (merge gv0 p)), (Abs (insert k gv0) (merge gv0 q)), (Abs (insert k gv0) (merge gv0 gv0)), (Abs (insert k gv0) (insert a p)), (Abs (insert k gv0) (insert a q)), (Abs (insert k gv0) (insert a gv0)), (Abs (insert k gv0) (insert k p)), (Abs (insert k gv0) (insert k q)), (Abs (insert k gv0) (maybe_swap p))
(Abs (insert k gv0) (maybe_swap q)), (Abs (insert k gv0) (maybe_swap gv0)), (Abs (insert k gv0) (p ++ p)), (Abs (insert k gv0) (p ++ q)), (Abs (insert k gv0) (p ++ gv0)), (Abs (insert k gv0) (q ++ p)), (Abs (insert k gv0) (q ++ q)), (Abs (insert k gv0) (q ++ gv0)), (Abs (insert k gv0) (gv0 ++ p)), (Abs (insert k gv0) (gv0 ++ q))
(Abs (insert k gv0) (gv0 ++ gv0)), (Abs (insert k gv0) []), (Abs (maybe_swap p) p), (Abs (maybe_swap p) q), (Abs (maybe_swap p) gv0), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: gv0)), (Abs (maybe_swap p) (k :: p)), (Abs (maybe_swap p) (k :: q))
(Abs (maybe_swap p) (k :: gv0)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (merge p q)), (Abs (maybe_swap p) (merge p gv0)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q gv0)), (Abs (maybe_swap p) (merge gv0 p)), (Abs (maybe_swap p) (merge gv0 q)), (Abs (maybe_swap p) (merge gv0 gv0))
(Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a gv0)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k gv0)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap gv0)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) (p ++ q))
(Abs (maybe_swap p) (p ++ gv0)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ gv0)), (Abs (maybe_swap p) (gv0 ++ p)), (Abs (maybe_swap p) (gv0 ++ q)), (Abs (maybe_swap p) (gv0 ++ gv0)), (Abs (maybe_swap p) []), (Abs (maybe_swap q) p), (Abs (maybe_swap q) q)
(Abs (maybe_swap q) gv0), (Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: gv0)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: gv0)), (Abs (maybe_swap q) (merge p p)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p gv0))
(Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q gv0)), (Abs (maybe_swap q) (merge gv0 p)), (Abs (maybe_swap q) (merge gv0 q)), (Abs (maybe_swap q) (merge gv0 gv0)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a gv0)), (Abs (maybe_swap q) (insert k p))
(Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k gv0)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (maybe_swap gv0)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ gv0)), (Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ gv0))
(Abs (maybe_swap q) (gv0 ++ p)), (Abs (maybe_swap q) (gv0 ++ q)), (Abs (maybe_swap q) (gv0 ++ gv0)), (Abs (maybe_swap q) []), (Abs (maybe_swap gv0) p), (Abs (maybe_swap gv0) q), (Abs (maybe_swap gv0) gv0), (Abs (maybe_swap gv0) (a :: p)), (Abs (maybe_swap gv0) (a :: q)), (Abs (maybe_swap gv0) (a :: gv0))
(Abs (maybe_swap gv0) (k :: p)), (Abs (maybe_swap gv0) (k :: q)), (Abs (maybe_swap gv0) (k :: gv0)), (Abs (maybe_swap gv0) (merge p p)), (Abs (maybe_swap gv0) (merge p q)), (Abs (maybe_swap gv0) (merge p gv0)), (Abs (maybe_swap gv0) (merge q p)), (Abs (maybe_swap gv0) (merge q q)), (Abs (maybe_swap gv0) (merge q gv0)), (Abs (maybe_swap gv0) (merge gv0 p))
(Abs (maybe_swap gv0) (merge gv0 q)), (Abs (maybe_swap gv0) (merge gv0 gv0)), (Abs (maybe_swap gv0) (insert a p)), (Abs (maybe_swap gv0) (insert a q)), (Abs (maybe_swap gv0) (insert a gv0)), (Abs (maybe_swap gv0) (insert k p)), (Abs (maybe_swap gv0) (insert k q)), (Abs (maybe_swap gv0) (insert k gv0)), (Abs (maybe_swap gv0) (maybe_swap p)), (Abs (maybe_swap gv0) (maybe_swap q))
(Abs (maybe_swap gv0) (p ++ p)), (Abs (maybe_swap gv0) (p ++ q)), (Abs (maybe_swap gv0) (p ++ gv0)), (Abs (maybe_swap gv0) (q ++ p)), (Abs (maybe_swap gv0) (q ++ q)), (Abs (maybe_swap gv0) (q ++ gv0)), (Abs (maybe_swap gv0) (gv0 ++ p)), (Abs (maybe_swap gv0) (gv0 ++ q)), (Abs (maybe_swap gv0) (gv0 ++ gv0)), (Abs (maybe_swap gv0) [])
(Abs (p ++ p) p), (Abs (p ++ p) q), (Abs (p ++ p) gv0), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: gv0)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: gv0)), (Abs (p ++ p) (merge p p))
(Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p gv0)), (Abs (p ++ p) (merge q p)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q gv0)), (Abs (p ++ p) (merge gv0 p)), (Abs (p ++ p) (merge gv0 q)), (Abs (p ++ p) (merge gv0 gv0)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (insert a q))
(Abs (p ++ p) (insert a gv0)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k gv0)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap gv0)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ gv0)), (Abs (p ++ p) (q ++ p))
(Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ gv0)), (Abs (p ++ p) (gv0 ++ p)), (Abs (p ++ p) (gv0 ++ q)), (Abs (p ++ p) (gv0 ++ gv0)), (Abs (p ++ p) []), (Abs (p ++ q) p), (Abs (p ++ q) q), (Abs (p ++ q) gv0), (Abs (p ++ q) (a :: p))
(Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: gv0)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (k :: q)), (Abs (p ++ q) (k :: gv0)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p gv0)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge q q))
(Abs (p ++ q) (merge q gv0)), (Abs (p ++ q) (merge gv0 p)), (Abs (p ++ q) (merge gv0 q)), (Abs (p ++ q) (merge gv0 gv0)), (Abs (p ++ q) (insert a p)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a gv0)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k gv0))
(Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap gv0)), (Abs (p ++ q) (p ++ p)), (Abs (p ++ q) (p ++ gv0)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ gv0)), (Abs (p ++ q) (gv0 ++ p)), (Abs (p ++ q) (gv0 ++ q))
(Abs (p ++ q) (gv0 ++ gv0)), (Abs (p ++ q) []), (Abs (p ++ gv0) p), (Abs (p ++ gv0) q), (Abs (p ++ gv0) gv0), (Abs (p ++ gv0) (a :: p)), (Abs (p ++ gv0) (a :: q)), (Abs (p ++ gv0) (a :: gv0)), (Abs (p ++ gv0) (k :: p)), (Abs (p ++ gv0) (k :: q))
(Abs (p ++ gv0) (k :: gv0)), (Abs (p ++ gv0) (merge p p)), (Abs (p ++ gv0) (merge p q)), (Abs (p ++ gv0) (merge p gv0)), (Abs (p ++ gv0) (merge q p)), (Abs (p ++ gv0) (merge q q)), (Abs (p ++ gv0) (merge q gv0)), (Abs (p ++ gv0) (merge gv0 p)), (Abs (p ++ gv0) (merge gv0 q)), (Abs (p ++ gv0) (merge gv0 gv0))
(Abs (p ++ gv0) (insert a p)), (Abs (p ++ gv0) (insert a q)), (Abs (p ++ gv0) (insert a gv0)), (Abs (p ++ gv0) (insert k p)), (Abs (p ++ gv0) (insert k q)), (Abs (p ++ gv0) (insert k gv0)), (Abs (p ++ gv0) (maybe_swap p)), (Abs (p ++ gv0) (maybe_swap q)), (Abs (p ++ gv0) (maybe_swap gv0)), (Abs (p ++ gv0) (p ++ p))
(Abs (p ++ gv0) (p ++ q)), (Abs (p ++ gv0) (q ++ p)), (Abs (p ++ gv0) (q ++ q)), (Abs (p ++ gv0) (q ++ gv0)), (Abs (p ++ gv0) (gv0 ++ p)), (Abs (p ++ gv0) (gv0 ++ q)), (Abs (p ++ gv0) (gv0 ++ gv0)), (Abs (p ++ gv0) []), (Abs (q ++ p) p), (Abs (q ++ p) q)
(Abs (q ++ p) gv0), (Abs (q ++ p) (a :: p)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: gv0)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: gv0)), (Abs (q ++ p) (merge p p)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p gv0))
(Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q gv0)), (Abs (q ++ p) (merge gv0 p)), (Abs (q ++ p) (merge gv0 q)), (Abs (q ++ p) (merge gv0 gv0)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a gv0)), (Abs (q ++ p) (insert k p))
(Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k gv0)), (Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap gv0)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ gv0)), (Abs (q ++ p) (q ++ q)), (Abs (q ++ p) (q ++ gv0))
(Abs (q ++ p) (gv0 ++ p)), (Abs (q ++ p) (gv0 ++ q)), (Abs (q ++ p) (gv0 ++ gv0)), (Abs (q ++ p) []), (Abs (q ++ q) p), (Abs (q ++ q) q), (Abs (q ++ q) gv0), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: gv0))
(Abs (q ++ q) (k :: p)), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: gv0)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p gv0)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge q q)), (Abs (q ++ q) (merge q gv0)), (Abs (q ++ q) (merge gv0 p))
(Abs (q ++ q) (merge gv0 q)), (Abs (q ++ q) (merge gv0 gv0)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a gv0)), (Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k gv0)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (maybe_swap q))
(Abs (q ++ q) (maybe_swap gv0)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ gv0)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (q ++ gv0)), (Abs (q ++ q) (gv0 ++ p)), (Abs (q ++ q) (gv0 ++ q)), (Abs (q ++ q) (gv0 ++ gv0)), (Abs (q ++ q) [])
(Abs (q ++ gv0) p), (Abs (q ++ gv0) q), (Abs (q ++ gv0) gv0), (Abs (q ++ gv0) (a :: p)), (Abs (q ++ gv0) (a :: q)), (Abs (q ++ gv0) (a :: gv0)), (Abs (q ++ gv0) (k :: p)), (Abs (q ++ gv0) (k :: q)), (Abs (q ++ gv0) (k :: gv0)), (Abs (q ++ gv0) (merge p p))
(Abs (q ++ gv0) (merge p q)), (Abs (q ++ gv0) (merge p gv0)), (Abs (q ++ gv0) (merge q p)), (Abs (q ++ gv0) (merge q q)), (Abs (q ++ gv0) (merge q gv0)), (Abs (q ++ gv0) (merge gv0 p)), (Abs (q ++ gv0) (merge gv0 q)), (Abs (q ++ gv0) (merge gv0 gv0)), (Abs (q ++ gv0) (insert a p)), (Abs (q ++ gv0) (insert a q))
(Abs (q ++ gv0) (insert a gv0)), (Abs (q ++ gv0) (insert k p)), (Abs (q ++ gv0) (insert k q)), (Abs (q ++ gv0) (insert k gv0)), (Abs (q ++ gv0) (maybe_swap p)), (Abs (q ++ gv0) (maybe_swap q)), (Abs (q ++ gv0) (maybe_swap gv0)), (Abs (q ++ gv0) (p ++ p)), (Abs (q ++ gv0) (p ++ q)), (Abs (q ++ gv0) (p ++ gv0))
(Abs (q ++ gv0) (q ++ p)), (Abs (q ++ gv0) (q ++ q)), (Abs (q ++ gv0) (gv0 ++ p)), (Abs (q ++ gv0) (gv0 ++ q)), (Abs (q ++ gv0) (gv0 ++ gv0)), (Abs (q ++ gv0) []), (Abs (gv0 ++ p) p), (Abs (gv0 ++ p) q), (Abs (gv0 ++ p) gv0), (Abs (gv0 ++ p) (a :: p))
(Abs (gv0 ++ p) (a :: q)), (Abs (gv0 ++ p) (a :: gv0)), (Abs (gv0 ++ p) (k :: p)), (Abs (gv0 ++ p) (k :: q)), (Abs (gv0 ++ p) (k :: gv0)), (Abs (gv0 ++ p) (merge p p)), (Abs (gv0 ++ p) (merge p q)), (Abs (gv0 ++ p) (merge p gv0)), (Abs (gv0 ++ p) (merge q p)), (Abs (gv0 ++ p) (merge q q))
(Abs (gv0 ++ p) (merge q gv0)), (Abs (gv0 ++ p) (merge gv0 p)), (Abs (gv0 ++ p) (merge gv0 q)), (Abs (gv0 ++ p) (merge gv0 gv0)), (Abs (gv0 ++ p) (insert a p)), (Abs (gv0 ++ p) (insert a q)), (Abs (gv0 ++ p) (insert a gv0)), (Abs (gv0 ++ p) (insert k p)), (Abs (gv0 ++ p) (insert k q)), (Abs (gv0 ++ p) (insert k gv0))
(Abs (gv0 ++ p) (maybe_swap p)), (Abs (gv0 ++ p) (maybe_swap q)), (Abs (gv0 ++ p) (maybe_swap gv0)), (Abs (gv0 ++ p) (p ++ p)), (Abs (gv0 ++ p) (p ++ q)), (Abs (gv0 ++ p) (p ++ gv0)), (Abs (gv0 ++ p) (q ++ p)), (Abs (gv0 ++ p) (q ++ q)), (Abs (gv0 ++ p) (q ++ gv0)), (Abs (gv0 ++ p) (gv0 ++ q))
(Abs (gv0 ++ p) (gv0 ++ gv0)), (Abs (gv0 ++ p) []), (Abs (gv0 ++ q) p), (Abs (gv0 ++ q) q), (Abs (gv0 ++ q) gv0), (Abs (gv0 ++ q) (a :: p)), (Abs (gv0 ++ q) (a :: q)), (Abs (gv0 ++ q) (a :: gv0)), (Abs (gv0 ++ q) (k :: p)), (Abs (gv0 ++ q) (k :: q))
(Abs (gv0 ++ q) (k :: gv0)), (Abs (gv0 ++ q) (merge p p)), (Abs (gv0 ++ q) (merge p q)), (Abs (gv0 ++ q) (merge p gv0)), (Abs (gv0 ++ q) (merge q p)), (Abs (gv0 ++ q) (merge q q)), (Abs (gv0 ++ q) (merge q gv0)), (Abs (gv0 ++ q) (merge gv0 p)), (Abs (gv0 ++ q) (merge gv0 q)), (Abs (gv0 ++ q) (merge gv0 gv0))
(Abs (gv0 ++ q) (insert a p)), (Abs (gv0 ++ q) (insert a q)), (Abs (gv0 ++ q) (insert a gv0)), (Abs (gv0 ++ q) (insert k p)), (Abs (gv0 ++ q) (insert k q)), (Abs (gv0 ++ q) (insert k gv0)), (Abs (gv0 ++ q) (maybe_swap p)), (Abs (gv0 ++ q) (maybe_swap q)), (Abs (gv0 ++ q) (maybe_swap gv0)), (Abs (gv0 ++ q) (p ++ p))
(Abs (gv0 ++ q) (p ++ q)), (Abs (gv0 ++ q) (p ++ gv0)), (Abs (gv0 ++ q) (q ++ p)), (Abs (gv0 ++ q) (q ++ q)), (Abs (gv0 ++ q) (q ++ gv0)), (Abs (gv0 ++ q) (gv0 ++ p)), (Abs (gv0 ++ q) (gv0 ++ gv0)), (Abs (gv0 ++ q) []), (Abs (gv0 ++ gv0) p), (Abs (gv0 ++ gv0) q)
(Abs (gv0 ++ gv0) gv0), (Abs (gv0 ++ gv0) (a :: p)), (Abs (gv0 ++ gv0) (a :: q)), (Abs (gv0 ++ gv0) (a :: gv0)), (Abs (gv0 ++ gv0) (k :: p)), (Abs (gv0 ++ gv0) (k :: q)), (Abs (gv0 ++ gv0) (k :: gv0)), (Abs (gv0 ++ gv0) (merge p p)), (Abs (gv0 ++ gv0) (merge p q)), (Abs (gv0 ++ gv0) (merge p gv0))
(Abs (gv0 ++ gv0) (merge q p)), (Abs (gv0 ++ gv0) (merge q q)), (Abs (gv0 ++ gv0) (merge q gv0)), (Abs (gv0 ++ gv0) (merge gv0 p)), (Abs (gv0 ++ gv0) (merge gv0 q)), (Abs (gv0 ++ gv0) (merge gv0 gv0)), (Abs (gv0 ++ gv0) (insert a p)), (Abs (gv0 ++ gv0) (insert a q)), (Abs (gv0 ++ gv0) (insert a gv0)), (Abs (gv0 ++ gv0) (insert k p))
(Abs (gv0 ++ gv0) (insert k q)), (Abs (gv0 ++ gv0) (insert k gv0)), (Abs (gv0 ++ gv0) (maybe_swap p)), (Abs (gv0 ++ gv0) (maybe_swap q)), (Abs (gv0 ++ gv0) (maybe_swap gv0)), (Abs (gv0 ++ gv0) (p ++ p)), (Abs (gv0 ++ gv0) (p ++ q)), (Abs (gv0 ++ gv0) (p ++ gv0)), (Abs (gv0 ++ gv0) (q ++ p)), (Abs (gv0 ++ gv0) (q ++ q))
(Abs (gv0 ++ gv0) (q ++ gv0)), (Abs (gv0 ++ gv0) (gv0 ++ p)), (Abs (gv0 ++ gv0) (gv0 ++ q)), (Abs (gv0 ++ gv0) []), (Abs [] p), (Abs [] q), (Abs [] gv0), (Abs [] (a :: p)), (Abs [] (a :: q)), (Abs [] (a :: gv0))
(Abs [] (k :: p)), (Abs [] (k :: q)), (Abs [] (k :: gv0)), (Abs [] (merge p p)), (Abs [] (merge p q)), (Abs [] (merge p gv0)), (Abs [] (merge q p)), (Abs [] (merge q q)), (Abs [] (merge q gv0)), (Abs [] (merge gv0 p))
(Abs [] (merge gv0 q)), (Abs [] (merge gv0 gv0)), (Abs [] (insert a p)), (Abs [] (insert a q)), (Abs [] (insert a gv0)), (Abs [] (insert k p)), (Abs [] (insert k q)), (Abs [] (insert k gv0)), (Abs [] (maybe_swap p)), (Abs [] (maybe_swap q))
(Abs [] (maybe_swap gv0)), (Abs [] (p ++ p)), (Abs [] (p ++ q)), (Abs [] (p ++ gv0)), (Abs [] (q ++ p)), (Abs [] (q ++ q)), (Abs [] (q ++ gv0)), (Abs [] (gv0 ++ p)), (Abs [] (gv0 ++ q)), (Abs [] (gv0 ++ gv0))
(priq (a :: p)), (priq (a :: q)), (priq (a :: gv0)), (priq (k :: p)), (priq (k :: q)), (priq (k :: gv0)), (priq (merge p p)), (priq (merge p q)), (priq (merge p gv0)), (priq (merge q p))
(priq (merge q q)), (priq (merge q gv0)), (priq (merge gv0 p)), (priq (merge gv0 q)), (priq (merge gv0 gv0)), (priq (insert a p)), (priq (insert a q)), (priq (insert a gv0)), (priq (insert k p)), (priq (insert k q))
(priq (insert k gv0)), (priq (maybe_swap p)), (priq (maybe_swap q)), (priq (maybe_swap gv0)), (priq (p ++ p)), (priq (p ++ q)), (priq (p ++ gv0)), (priq (q ++ p)), (priq (q ++ q)), (priq (q ++ gv0))
(priq (gv0 ++ p)), (priq (gv0 ++ q)), (priq (gv0 ++ gv0)), (priq []), (Permutation p (a :: p)), (Permutation p (a :: q)), (Permutation p (a :: gv0)), (Permutation p (k :: p)), (Permutation p (k :: q)), (Permutation p (k :: gv0))
(Permutation p (merge p p)), (Permutation p (merge p q)), (Permutation p (merge p gv0)), (Permutation p (merge q p)), (Permutation p (merge q q)), (Permutation p (merge q gv0)), (Permutation p (merge gv0 p)), (Permutation p (merge gv0 q)), (Permutation p (merge gv0 gv0)), (Permutation p (insert a p))
(Permutation p (insert a q)), (Permutation p (insert a gv0)), (Permutation p (insert k p)), (Permutation p (insert k q)), (Permutation p (insert k gv0)), (Permutation p (maybe_swap p)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap gv0)), (Permutation p (p ++ p)), (Permutation p (p ++ q))
(Permutation p (p ++ gv0)), (Permutation p (q ++ p)), (Permutation p (q ++ q)), (Permutation p (q ++ gv0)), (Permutation p (gv0 ++ p)), (Permutation p (gv0 ++ q)), (Permutation p (gv0 ++ gv0)), (Permutation p []), (Permutation q (a :: p)), (Permutation q (a :: q))
(Permutation q (a :: gv0)), (Permutation q (k :: p)), (Permutation q (k :: q)), (Permutation q (k :: gv0)), (Permutation q (merge p p)), (Permutation q (merge p q)), (Permutation q (merge p gv0)), (Permutation q (merge q p)), (Permutation q (merge q q)), (Permutation q (merge q gv0))
(Permutation q (merge gv0 p)), (Permutation q (merge gv0 q)), (Permutation q (merge gv0 gv0)), (Permutation q (insert a p)), (Permutation q (insert a q)), (Permutation q (insert a gv0)), (Permutation q (insert k p)), (Permutation q (insert k q)), (Permutation q (insert k gv0)), (Permutation q (maybe_swap p))
(Permutation q (maybe_swap q)), (Permutation q (maybe_swap gv0)), (Permutation q (p ++ p)), (Permutation q (p ++ q)), (Permutation q (p ++ gv0)), (Permutation q (q ++ p)), (Permutation q (q ++ q)), (Permutation q (q ++ gv0)), (Permutation q (gv0 ++ p)), (Permutation q (gv0 ++ q))
(Permutation q (gv0 ++ gv0)), (Permutation q []), (Permutation gv0 (a :: p)), (Permutation gv0 (a :: q)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (k :: p)), (Permutation gv0 (k :: q)), (Permutation gv0 (k :: gv0)), (Permutation gv0 (merge p p)), (Permutation gv0 (merge p q))
(Permutation gv0 (merge p gv0)), (Permutation gv0 (merge q p)), (Permutation gv0 (merge q q)), (Permutation gv0 (merge q gv0)), (Permutation gv0 (merge gv0 p)), (Permutation gv0 (merge gv0 q)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (insert a p)), (Permutation gv0 (insert a q)), (Permutation gv0 (insert a gv0))
(Permutation gv0 (insert k p)), (Permutation gv0 (insert k q)), (Permutation gv0 (insert k gv0)), (Permutation gv0 (maybe_swap p)), (Permutation gv0 (maybe_swap q)), (Permutation gv0 (maybe_swap gv0)), (Permutation gv0 (p ++ p)), (Permutation gv0 (p ++ q)), (Permutation gv0 (p ++ gv0)), (Permutation gv0 (q ++ p))
(Permutation gv0 (q ++ q)), (Permutation gv0 (q ++ gv0)), (Permutation gv0 (gv0 ++ p)), (Permutation gv0 (gv0 ++ q)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a :: p) p), (Permutation (a :: p) q), (Permutation (a :: p) gv0), (Permutation (a :: p) (a :: q))
(Permutation (a :: p) (a :: gv0)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (k :: q)), (Permutation (a :: p) (k :: gv0)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p gv0)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q gv0))
(Permutation (a :: p) (merge gv0 p)), (Permutation (a :: p) (merge gv0 q)), (Permutation (a :: p) (merge gv0 gv0)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a gv0)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k gv0)), (Permutation (a :: p) (maybe_swap p))
(Permutation (a :: p) (maybe_swap q)), (Permutation (a :: p) (maybe_swap gv0)), (Permutation (a :: p) (p ++ p)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ gv0)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ gv0)), (Permutation (a :: p) (gv0 ++ p)), (Permutation (a :: p) (gv0 ++ q))
(Permutation (a :: p) (gv0 ++ gv0)), (Permutation (a :: p) []), (Permutation (a :: q) p), (Permutation (a :: q) q), (Permutation (a :: q) gv0), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (a :: gv0)), (Permutation (a :: q) (k :: p)), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: gv0))
(Permutation (a :: q) (merge p p)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p gv0)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q gv0)), (Permutation (a :: q) (merge gv0 p)), (Permutation (a :: q) (merge gv0 q)), (Permutation (a :: q) (merge gv0 gv0)), (Permutation (a :: q) (insert a p))
(Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a gv0)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k gv0)), (Permutation (a :: q) (maybe_swap p)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap gv0)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) (p ++ q))
(Permutation (a :: q) (p ++ gv0)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ gv0)), (Permutation (a :: q) (gv0 ++ p)), (Permutation (a :: q) (gv0 ++ q)), (Permutation (a :: q) (gv0 ++ gv0)), (Permutation (a :: q) []), (Permutation (a :: gv0) p), (Permutation (a :: gv0) q)
(Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a :: p)), (Permutation (a :: gv0) (a :: q)), (Permutation (a :: gv0) (k :: p)), (Permutation (a :: gv0) (k :: q)), (Permutation (a :: gv0) (k :: gv0)), (Permutation (a :: gv0) (merge p p)), (Permutation (a :: gv0) (merge p q)), (Permutation (a :: gv0) (merge p gv0)), (Permutation (a :: gv0) (merge q p))
(Permutation (a :: gv0) (merge q q)), (Permutation (a :: gv0) (merge q gv0)), (Permutation (a :: gv0) (merge gv0 p)), (Permutation (a :: gv0) (merge gv0 q)), (Permutation (a :: gv0) (merge gv0 gv0)), (Permutation (a :: gv0) (insert a p)), (Permutation (a :: gv0) (insert a q)), (Permutation (a :: gv0) (insert a gv0)), (Permutation (a :: gv0) (insert k p)), (Permutation (a :: gv0) (insert k q))
(Permutation (a :: gv0) (insert k gv0)), (Permutation (a :: gv0) (maybe_swap p)), (Permutation (a :: gv0) (maybe_swap q)), (Permutation (a :: gv0) (maybe_swap gv0)), (Permutation (a :: gv0) (p ++ p)), (Permutation (a :: gv0) (p ++ q)), (Permutation (a :: gv0) (p ++ gv0)), (Permutation (a :: gv0) (q ++ p)), (Permutation (a :: gv0) (q ++ q)), (Permutation (a :: gv0) (q ++ gv0))
(Permutation (a :: gv0) (gv0 ++ p)), (Permutation (a :: gv0) (gv0 ++ q)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (k :: p) p), (Permutation (k :: p) q), (Permutation (k :: p) gv0), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: gv0))
(Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: gv0)), (Permutation (k :: p) (merge p p)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p gv0)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q gv0)), (Permutation (k :: p) (merge gv0 p)), (Permutation (k :: p) (merge gv0 q))
(Permutation (k :: p) (merge gv0 gv0)), (Permutation (k :: p) (insert a p)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a gv0)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k gv0)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap gv0))
(Permutation (k :: p) (p ++ p)), (Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ gv0)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ gv0)), (Permutation (k :: p) (gv0 ++ p)), (Permutation (k :: p) (gv0 ++ q)), (Permutation (k :: p) (gv0 ++ gv0)), (Permutation (k :: p) [])
(Permutation (k :: q) p), (Permutation (k :: q) q), (Permutation (k :: q) gv0), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: gv0)), (Permutation (k :: q) (k :: p)), (Permutation (k :: q) (k :: gv0)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (merge p q))
(Permutation (k :: q) (merge p gv0)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q gv0)), (Permutation (k :: q) (merge gv0 p)), (Permutation (k :: q) (merge gv0 q)), (Permutation (k :: q) (merge gv0 gv0)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a gv0))
(Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k gv0)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (maybe_swap q)), (Permutation (k :: q) (maybe_swap gv0)), (Permutation (k :: q) (p ++ p)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ gv0)), (Permutation (k :: q) (q ++ p))
(Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ gv0)), (Permutation (k :: q) (gv0 ++ p)), (Permutation (k :: q) (gv0 ++ q)), (Permutation (k :: q) (gv0 ++ gv0)), (Permutation (k :: q) []), (Permutation (k :: gv0) p), (Permutation (k :: gv0) q), (Permutation (k :: gv0) gv0), (Permutation (k :: gv0) (a :: p))
(Permutation (k :: gv0) (a :: q)), (Permutation (k :: gv0) (a :: gv0)), (Permutation (k :: gv0) (k :: p)), (Permutation (k :: gv0) (k :: q)), (Permutation (k :: gv0) (merge p p)), (Permutation (k :: gv0) (merge p q)), (Permutation (k :: gv0) (merge p gv0)), (Permutation (k :: gv0) (merge q p)), (Permutation (k :: gv0) (merge q q)), (Permutation (k :: gv0) (merge q gv0))
(Permutation (k :: gv0) (merge gv0 p)), (Permutation (k :: gv0) (merge gv0 q)), (Permutation (k :: gv0) (merge gv0 gv0)), (Permutation (k :: gv0) (insert a p)), (Permutation (k :: gv0) (insert a q)), (Permutation (k :: gv0) (insert a gv0)), (Permutation (k :: gv0) (insert k p)), (Permutation (k :: gv0) (insert k q)), (Permutation (k :: gv0) (insert k gv0)), (Permutation (k :: gv0) (maybe_swap p))
(Permutation (k :: gv0) (maybe_swap q)), (Permutation (k :: gv0) (maybe_swap gv0)), (Permutation (k :: gv0) (p ++ p)), (Permutation (k :: gv0) (p ++ q)), (Permutation (k :: gv0) (p ++ gv0)), (Permutation (k :: gv0) (q ++ p)), (Permutation (k :: gv0) (q ++ q)), (Permutation (k :: gv0) (q ++ gv0)), (Permutation (k :: gv0) (gv0 ++ p)), (Permutation (k :: gv0) (gv0 ++ q))
(Permutation (k :: gv0) (gv0 ++ gv0)), (Permutation (k :: gv0) []), (Permutation (merge p p) p), (Permutation (merge p p) q), (Permutation (merge p p) gv0), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: gv0)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (k :: q))
(Permutation (merge p p) (k :: gv0)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p gv0)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge q q)), (Permutation (merge p p) (merge q gv0)), (Permutation (merge p p) (merge gv0 p)), (Permutation (merge p p) (merge gv0 q)), (Permutation (merge p p) (merge gv0 gv0)), (Permutation (merge p p) (insert a p))
(Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a gv0)), (Permutation (merge p p) (insert k p)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k gv0)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap gv0)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) (p ++ q))
(Permutation (merge p p) (p ++ gv0)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ gv0)), (Permutation (merge p p) (gv0 ++ p)), (Permutation (merge p p) (gv0 ++ q)), (Permutation (merge p p) (gv0 ++ gv0)), (Permutation (merge p p) []), (Permutation (merge p q) p), (Permutation (merge p q) q)
(Permutation (merge p q) gv0), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: gv0)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: gv0)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (merge p gv0)), (Permutation (merge p q) (merge q p))
(Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q gv0)), (Permutation (merge p q) (merge gv0 p)), (Permutation (merge p q) (merge gv0 q)), (Permutation (merge p q) (merge gv0 gv0)), (Permutation (merge p q) (insert a p)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a gv0)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert k q))
(Permutation (merge p q) (insert k gv0)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap gv0)), (Permutation (merge p q) (p ++ p)), (Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ gv0)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ gv0))
(Permutation (merge p q) (gv0 ++ p)), (Permutation (merge p q) (gv0 ++ q)), (Permutation (merge p q) (gv0 ++ gv0)), (Permutation (merge p q) []), (Permutation (merge p gv0) p), (Permutation (merge p gv0) q), (Permutation (merge p gv0) gv0), (Permutation (merge p gv0) (a :: p)), (Permutation (merge p gv0) (a :: q)), (Permutation (merge p gv0) (a :: gv0))
(Permutation (merge p gv0) (k :: p)), (Permutation (merge p gv0) (k :: q)), (Permutation (merge p gv0) (k :: gv0)), (Permutation (merge p gv0) (merge p p)), (Permutation (merge p gv0) (merge p q)), (Permutation (merge p gv0) (merge q p)), (Permutation (merge p gv0) (merge q q)), (Permutation (merge p gv0) (merge q gv0)), (Permutation (merge p gv0) (merge gv0 p)), (Permutation (merge p gv0) (merge gv0 q))
(Permutation (merge p gv0) (merge gv0 gv0)), (Permutation (merge p gv0) (insert a p)), (Permutation (merge p gv0) (insert a q)), (Permutation (merge p gv0) (insert a gv0)), (Permutation (merge p gv0) (insert k p)), (Permutation (merge p gv0) (insert k q)), (Permutation (merge p gv0) (insert k gv0)), (Permutation (merge p gv0) (maybe_swap p)), (Permutation (merge p gv0) (maybe_swap q)), (Permutation (merge p gv0) (maybe_swap gv0))
(Permutation (merge p gv0) (p ++ p)), (Permutation (merge p gv0) (p ++ q)), (Permutation (merge p gv0) (p ++ gv0)), (Permutation (merge p gv0) (q ++ p)), (Permutation (merge p gv0) (q ++ q)), (Permutation (merge p gv0) (q ++ gv0)), (Permutation (merge p gv0) (gv0 ++ p)), (Permutation (merge p gv0) (gv0 ++ q)), (Permutation (merge p gv0) (gv0 ++ gv0)), (Permutation (merge p gv0) [])
(Permutation (merge q p) p), (Permutation (merge q p) q), (Permutation (merge q p) gv0), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: gv0)), (Permutation (merge q p) (k :: p)), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: gv0)), (Permutation (merge q p) (merge p p))
(Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p gv0)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q gv0)), (Permutation (merge q p) (merge gv0 p)), (Permutation (merge q p) (merge gv0 q)), (Permutation (merge q p) (merge gv0 gv0)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a gv0))
(Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k gv0)), (Permutation (merge q p) (maybe_swap p)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap gv0)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ gv0)), (Permutation (merge q p) (q ++ p))
(Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ gv0)), (Permutation (merge q p) (gv0 ++ p)), (Permutation (merge q p) (gv0 ++ q)), (Permutation (merge q p) (gv0 ++ gv0)), (Permutation (merge q p) []), (Permutation (merge q q) p), (Permutation (merge q q) q), (Permutation (merge q q) gv0), (Permutation (merge q q) (a :: p))
(Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: gv0)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: gv0)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p gv0)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge q gv0))
(Permutation (merge q q) (merge gv0 p)), (Permutation (merge q q) (merge gv0 q)), (Permutation (merge q q) (merge gv0 gv0)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a gv0)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert k q)), (Permutation (merge q q) (insert k gv0)), (Permutation (merge q q) (maybe_swap p))
(Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap gv0)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ gv0)), (Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv0)), (Permutation (merge q q) (gv0 ++ p)), (Permutation (merge q q) (gv0 ++ q))
(Permutation (merge q q) (gv0 ++ gv0)), (Permutation (merge q q) []), (Permutation (merge q gv0) p), (Permutation (merge q gv0) q), (Permutation (merge q gv0) gv0), (Permutation (merge q gv0) (a :: p)), (Permutation (merge q gv0) (a :: q)), (Permutation (merge q gv0) (a :: gv0)), (Permutation (merge q gv0) (k :: p)), (Permutation (merge q gv0) (k :: q))
(Permutation (merge q gv0) (k :: gv0)), (Permutation (merge q gv0) (merge p p)), (Permutation (merge q gv0) (merge p q)), (Permutation (merge q gv0) (merge p gv0)), (Permutation (merge q gv0) (merge q p)), (Permutation (merge q gv0) (merge q q)), (Permutation (merge q gv0) (merge gv0 p)), (Permutation (merge q gv0) (merge gv0 q)), (Permutation (merge q gv0) (merge gv0 gv0)), (Permutation (merge q gv0) (insert a p))
(Permutation (merge q gv0) (insert a q)), (Permutation (merge q gv0) (insert a gv0)), (Permutation (merge q gv0) (insert k p)), (Permutation (merge q gv0) (insert k q)), (Permutation (merge q gv0) (insert k gv0)), (Permutation (merge q gv0) (maybe_swap p)), (Permutation (merge q gv0) (maybe_swap q)), (Permutation (merge q gv0) (maybe_swap gv0)), (Permutation (merge q gv0) (p ++ p)), (Permutation (merge q gv0) (p ++ q))
(Permutation (merge q gv0) (p ++ gv0)), (Permutation (merge q gv0) (q ++ p)), (Permutation (merge q gv0) (q ++ q)), (Permutation (merge q gv0) (q ++ gv0)), (Permutation (merge q gv0) (gv0 ++ p)), (Permutation (merge q gv0) (gv0 ++ q)), (Permutation (merge q gv0) (gv0 ++ gv0)), (Permutation (merge q gv0) []), (Permutation (merge gv0 p) p), (Permutation (merge gv0 p) q)
(Permutation (merge gv0 p) gv0), (Permutation (merge gv0 p) (a :: p)), (Permutation (merge gv0 p) (a :: q)), (Permutation (merge gv0 p) (a :: gv0)), (Permutation (merge gv0 p) (k :: p)), (Permutation (merge gv0 p) (k :: q)), (Permutation (merge gv0 p) (k :: gv0)), (Permutation (merge gv0 p) (merge p p)), (Permutation (merge gv0 p) (merge p q)), (Permutation (merge gv0 p) (merge p gv0))
(Permutation (merge gv0 p) (merge q p)), (Permutation (merge gv0 p) (merge q q)), (Permutation (merge gv0 p) (merge q gv0)), (Permutation (merge gv0 p) (merge gv0 q)), (Permutation (merge gv0 p) (merge gv0 gv0)), (Permutation (merge gv0 p) (insert a p)), (Permutation (merge gv0 p) (insert a q)), (Permutation (merge gv0 p) (insert a gv0)), (Permutation (merge gv0 p) (insert k p)), (Permutation (merge gv0 p) (insert k q))
(Permutation (merge gv0 p) (insert k gv0)), (Permutation (merge gv0 p) (maybe_swap p)), (Permutation (merge gv0 p) (maybe_swap q)), (Permutation (merge gv0 p) (maybe_swap gv0)), (Permutation (merge gv0 p) (p ++ p)), (Permutation (merge gv0 p) (p ++ q)), (Permutation (merge gv0 p) (p ++ gv0)), (Permutation (merge gv0 p) (q ++ p)), (Permutation (merge gv0 p) (q ++ q)), (Permutation (merge gv0 p) (q ++ gv0))
(Permutation (merge gv0 p) (gv0 ++ p)), (Permutation (merge gv0 p) (gv0 ++ q)), (Permutation (merge gv0 p) (gv0 ++ gv0)), (Permutation (merge gv0 p) []), (Permutation (merge gv0 q) p), (Permutation (merge gv0 q) q), (Permutation (merge gv0 q) gv0), (Permutation (merge gv0 q) (a :: p)), (Permutation (merge gv0 q) (a :: q)), (Permutation (merge gv0 q) (a :: gv0))
(Permutation (merge gv0 q) (k :: p)), (Permutation (merge gv0 q) (k :: q)), (Permutation (merge gv0 q) (k :: gv0)), (Permutation (merge gv0 q) (merge p p)), (Permutation (merge gv0 q) (merge p q)), (Permutation (merge gv0 q) (merge p gv0)), (Permutation (merge gv0 q) (merge q p)), (Permutation (merge gv0 q) (merge q q)), (Permutation (merge gv0 q) (merge q gv0)), (Permutation (merge gv0 q) (merge gv0 p))
(Permutation (merge gv0 q) (merge gv0 gv0)), (Permutation (merge gv0 q) (insert a p)), (Permutation (merge gv0 q) (insert a q)), (Permutation (merge gv0 q) (insert a gv0)), (Permutation (merge gv0 q) (insert k p)), (Permutation (merge gv0 q) (insert k q)), (Permutation (merge gv0 q) (insert k gv0)), (Permutation (merge gv0 q) (maybe_swap p)), (Permutation (merge gv0 q) (maybe_swap q)), (Permutation (merge gv0 q) (maybe_swap gv0))
(Permutation (merge gv0 q) (p ++ p)), (Permutation (merge gv0 q) (p ++ q)), (Permutation (merge gv0 q) (p ++ gv0)), (Permutation (merge gv0 q) (q ++ p)), (Permutation (merge gv0 q) (q ++ q)), (Permutation (merge gv0 q) (q ++ gv0)), (Permutation (merge gv0 q) (gv0 ++ p)), (Permutation (merge gv0 q) (gv0 ++ q)), (Permutation (merge gv0 q) (gv0 ++ gv0)), (Permutation (merge gv0 q) [])
(Permutation (merge gv0 gv0) p), (Permutation (merge gv0 gv0) q), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (a :: p)), (Permutation (merge gv0 gv0) (a :: q)), (Permutation (merge gv0 gv0) (a :: gv0)), (Permutation (merge gv0 gv0) (k :: p)), (Permutation (merge gv0 gv0) (k :: q)), (Permutation (merge gv0 gv0) (k :: gv0)), (Permutation (merge gv0 gv0) (merge p p))
(Permutation (merge gv0 gv0) (merge p q)), (Permutation (merge gv0 gv0) (merge p gv0)), (Permutation (merge gv0 gv0) (merge q p)), (Permutation (merge gv0 gv0) (merge q q)), (Permutation (merge gv0 gv0) (merge q gv0)), (Permutation (merge gv0 gv0) (merge gv0 p)), (Permutation (merge gv0 gv0) (merge gv0 q)), (Permutation (merge gv0 gv0) (insert a p)), (Permutation (merge gv0 gv0) (insert a q)), (Permutation (merge gv0 gv0) (insert a gv0))
(Permutation (merge gv0 gv0) (insert k p)), (Permutation (merge gv0 gv0) (insert k q)), (Permutation (merge gv0 gv0) (insert k gv0)), (Permutation (merge gv0 gv0) (maybe_swap p)), (Permutation (merge gv0 gv0) (maybe_swap q)), (Permutation (merge gv0 gv0) (maybe_swap gv0)), (Permutation (merge gv0 gv0) (p ++ p)), (Permutation (merge gv0 gv0) (p ++ q)), (Permutation (merge gv0 gv0) (p ++ gv0)), (Permutation (merge gv0 gv0) (q ++ p))
(Permutation (merge gv0 gv0) (q ++ q)), (Permutation (merge gv0 gv0) (q ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ p)), (Permutation (merge gv0 gv0) (gv0 ++ q)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (insert a p) p), (Permutation (insert a p) q), (Permutation (insert a p) gv0), (Permutation (insert a p) (a :: p))
(Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: gv0)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (k :: q)), (Permutation (insert a p) (k :: gv0)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p gv0)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge q q))
(Permutation (insert a p) (merge q gv0)), (Permutation (insert a p) (merge gv0 p)), (Permutation (insert a p) (merge gv0 q)), (Permutation (insert a p) (merge gv0 gv0)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a gv0)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k gv0)), (Permutation (insert a p) (maybe_swap p))
(Permutation (insert a p) (maybe_swap q)), (Permutation (insert a p) (maybe_swap gv0)), (Permutation (insert a p) (p ++ p)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ gv0)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ gv0)), (Permutation (insert a p) (gv0 ++ p)), (Permutation (insert a p) (gv0 ++ q))
(Permutation (insert a p) (gv0 ++ gv0)), (Permutation (insert a p) []), (Permutation (insert a q) p), (Permutation (insert a q) q), (Permutation (insert a q) gv0), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: gv0)), (Permutation (insert a q) (k :: p)), (Permutation (insert a q) (k :: q))
(Permutation (insert a q) (k :: gv0)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (merge p q)), (Permutation (insert a q) (merge p gv0)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q gv0)), (Permutation (insert a q) (merge gv0 p)), (Permutation (insert a q) (merge gv0 q)), (Permutation (insert a q) (merge gv0 gv0))
(Permutation (insert a q) (insert a p)), (Permutation (insert a q) (insert a gv0)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k gv0)), (Permutation (insert a q) (maybe_swap p)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap gv0)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) (p ++ q))
(Permutation (insert a q) (p ++ gv0)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ gv0)), (Permutation (insert a q) (gv0 ++ p)), (Permutation (insert a q) (gv0 ++ q)), (Permutation (insert a q) (gv0 ++ gv0)), (Permutation (insert a q) []), (Permutation (insert a gv0) p), (Permutation (insert a gv0) q)
(Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a :: p)), (Permutation (insert a gv0) (a :: q)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (k :: p)), (Permutation (insert a gv0) (k :: q)), (Permutation (insert a gv0) (k :: gv0)), (Permutation (insert a gv0) (merge p p)), (Permutation (insert a gv0) (merge p q)), (Permutation (insert a gv0) (merge p gv0))
(Permutation (insert a gv0) (merge q p)), (Permutation (insert a gv0) (merge q q)), (Permutation (insert a gv0) (merge q gv0)), (Permutation (insert a gv0) (merge gv0 p)), (Permutation (insert a gv0) (merge gv0 q)), (Permutation (insert a gv0) (merge gv0 gv0)), (Permutation (insert a gv0) (insert a p)), (Permutation (insert a gv0) (insert a q)), (Permutation (insert a gv0) (insert k p)), (Permutation (insert a gv0) (insert k q))
(Permutation (insert a gv0) (insert k gv0)), (Permutation (insert a gv0) (maybe_swap p)), (Permutation (insert a gv0) (maybe_swap q)), (Permutation (insert a gv0) (maybe_swap gv0)), (Permutation (insert a gv0) (p ++ p)), (Permutation (insert a gv0) (p ++ q)), (Permutation (insert a gv0) (p ++ gv0)), (Permutation (insert a gv0) (q ++ p)), (Permutation (insert a gv0) (q ++ q)), (Permutation (insert a gv0) (q ++ gv0))
(Permutation (insert a gv0) (gv0 ++ p)), (Permutation (insert a gv0) (gv0 ++ q)), (Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) []), (Permutation (insert k p) p), (Permutation (insert k p) q), (Permutation (insert k p) gv0), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: gv0))
(Permutation (insert k p) (k :: p)), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: gv0)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p gv0)), (Permutation (insert k p) (merge q p)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q gv0)), (Permutation (insert k p) (merge gv0 p))
(Permutation (insert k p) (merge gv0 q)), (Permutation (insert k p) (merge gv0 gv0)), (Permutation (insert k p) (insert a p)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a gv0)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k gv0)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap gv0))
(Permutation (insert k p) (p ++ p)), (Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ gv0)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ gv0)), (Permutation (insert k p) (gv0 ++ p)), (Permutation (insert k p) (gv0 ++ q)), (Permutation (insert k p) (gv0 ++ gv0)), (Permutation (insert k p) [])
(Permutation (insert k q) p), (Permutation (insert k q) q), (Permutation (insert k q) gv0), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: gv0)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (k :: q)), (Permutation (insert k q) (k :: gv0)), (Permutation (insert k q) (merge p p))
(Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p gv0)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q gv0)), (Permutation (insert k q) (merge gv0 p)), (Permutation (insert k q) (merge gv0 q)), (Permutation (insert k q) (merge gv0 gv0)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (insert a q))
(Permutation (insert k q) (insert a gv0)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert k gv0)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (maybe_swap q)), (Permutation (insert k q) (maybe_swap gv0)), (Permutation (insert k q) (p ++ p)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ gv0)), (Permutation (insert k q) (q ++ p))
(Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ gv0)), (Permutation (insert k q) (gv0 ++ p)), (Permutation (insert k q) (gv0 ++ q)), (Permutation (insert k q) (gv0 ++ gv0)), (Permutation (insert k q) []), (Permutation (insert k gv0) p), (Permutation (insert k gv0) q), (Permutation (insert k gv0) gv0), (Permutation (insert k gv0) (a :: p))
(Permutation (insert k gv0) (a :: q)), (Permutation (insert k gv0) (a :: gv0)), (Permutation (insert k gv0) (k :: p)), (Permutation (insert k gv0) (k :: q)), (Permutation (insert k gv0) (k :: gv0)), (Permutation (insert k gv0) (merge p p)), (Permutation (insert k gv0) (merge p q)), (Permutation (insert k gv0) (merge p gv0)), (Permutation (insert k gv0) (merge q p)), (Permutation (insert k gv0) (merge q q))
(Permutation (insert k gv0) (merge q gv0)), (Permutation (insert k gv0) (merge gv0 p)), (Permutation (insert k gv0) (merge gv0 q)), (Permutation (insert k gv0) (merge gv0 gv0)), (Permutation (insert k gv0) (insert a p)), (Permutation (insert k gv0) (insert a q)), (Permutation (insert k gv0) (insert a gv0)), (Permutation (insert k gv0) (insert k p)), (Permutation (insert k gv0) (insert k q)), (Permutation (insert k gv0) (maybe_swap p))
(Permutation (insert k gv0) (maybe_swap q)), (Permutation (insert k gv0) (maybe_swap gv0)), (Permutation (insert k gv0) (p ++ p)), (Permutation (insert k gv0) (p ++ q)), (Permutation (insert k gv0) (p ++ gv0)), (Permutation (insert k gv0) (q ++ p)), (Permutation (insert k gv0) (q ++ q)), (Permutation (insert k gv0) (q ++ gv0)), (Permutation (insert k gv0) (gv0 ++ p)), (Permutation (insert k gv0) (gv0 ++ q))
(Permutation (insert k gv0) (gv0 ++ gv0)), (Permutation (insert k gv0) []), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) gv0), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: gv0)), (Permutation (maybe_swap p) (k :: p)), (Permutation (maybe_swap p) (k :: q))
(Permutation (maybe_swap p) (k :: gv0)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (merge p q)), (Permutation (maybe_swap p) (merge p gv0)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q gv0)), (Permutation (maybe_swap p) (merge gv0 p)), (Permutation (maybe_swap p) (merge gv0 q)), (Permutation (maybe_swap p) (merge gv0 gv0))
(Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a gv0)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k gv0)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap gv0)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) (p ++ q))
(Permutation (maybe_swap p) (p ++ gv0)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ gv0)), (Permutation (maybe_swap p) (gv0 ++ p)), (Permutation (maybe_swap p) (gv0 ++ q)), (Permutation (maybe_swap p) (gv0 ++ gv0)), (Permutation (maybe_swap p) []), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) q)
(Permutation (maybe_swap q) gv0), (Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: gv0)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: gv0)), (Permutation (maybe_swap q) (merge p p)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p gv0))
(Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q gv0)), (Permutation (maybe_swap q) (merge gv0 p)), (Permutation (maybe_swap q) (merge gv0 q)), (Permutation (maybe_swap q) (merge gv0 gv0)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a gv0)), (Permutation (maybe_swap q) (insert k p))
(Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k gv0)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (maybe_swap gv0)), (Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ gv0)), (Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ gv0))
(Permutation (maybe_swap q) (gv0 ++ p)), (Permutation (maybe_swap q) (gv0 ++ q)), (Permutation (maybe_swap q) (gv0 ++ gv0)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap gv0) p), (Permutation (maybe_swap gv0) q), (Permutation (maybe_swap gv0) gv0), (Permutation (maybe_swap gv0) (a :: p)), (Permutation (maybe_swap gv0) (a :: q)), (Permutation (maybe_swap gv0) (a :: gv0))
(Permutation (maybe_swap gv0) (k :: p)), (Permutation (maybe_swap gv0) (k :: q)), (Permutation (maybe_swap gv0) (k :: gv0)), (Permutation (maybe_swap gv0) (merge p p)), (Permutation (maybe_swap gv0) (merge p q)), (Permutation (maybe_swap gv0) (merge p gv0)), (Permutation (maybe_swap gv0) (merge q p)), (Permutation (maybe_swap gv0) (merge q q)), (Permutation (maybe_swap gv0) (merge q gv0)), (Permutation (maybe_swap gv0) (merge gv0 p))
(Permutation (maybe_swap gv0) (merge gv0 q)), (Permutation (maybe_swap gv0) (merge gv0 gv0)), (Permutation (maybe_swap gv0) (insert a p)), (Permutation (maybe_swap gv0) (insert a q)), (Permutation (maybe_swap gv0) (insert a gv0)), (Permutation (maybe_swap gv0) (insert k p)), (Permutation (maybe_swap gv0) (insert k q)), (Permutation (maybe_swap gv0) (insert k gv0)), (Permutation (maybe_swap gv0) (maybe_swap p)), (Permutation (maybe_swap gv0) (maybe_swap q))
(Permutation (maybe_swap gv0) (p ++ p)), (Permutation (maybe_swap gv0) (p ++ q)), (Permutation (maybe_swap gv0) (p ++ gv0)), (Permutation (maybe_swap gv0) (q ++ p)), (Permutation (maybe_swap gv0) (q ++ q)), (Permutation (maybe_swap gv0) (q ++ gv0)), (Permutation (maybe_swap gv0) (gv0 ++ p)), (Permutation (maybe_swap gv0) (gv0 ++ q)), (Permutation (maybe_swap gv0) (gv0 ++ gv0)), (Permutation (maybe_swap gv0) [])
(Permutation (p ++ p) p), (Permutation (p ++ p) q), (Permutation (p ++ p) gv0), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: gv0)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: gv0)), (Permutation (p ++ p) (merge p p))
(Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p gv0)), (Permutation (p ++ p) (merge q p)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q gv0)), (Permutation (p ++ p) (merge gv0 p)), (Permutation (p ++ p) (merge gv0 q)), (Permutation (p ++ p) (merge gv0 gv0)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (insert a q))
(Permutation (p ++ p) (insert a gv0)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k gv0)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap gv0)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ gv0)), (Permutation (p ++ p) (q ++ p))
(Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ gv0)), (Permutation (p ++ p) (gv0 ++ p)), (Permutation (p ++ p) (gv0 ++ q)), (Permutation (p ++ p) (gv0 ++ gv0)), (Permutation (p ++ p) []), (Permutation (p ++ q) p), (Permutation (p ++ q) q), (Permutation (p ++ q) gv0), (Permutation (p ++ q) (a :: p))
(Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: gv0)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (k :: q)), (Permutation (p ++ q) (k :: gv0)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p gv0)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge q q))
(Permutation (p ++ q) (merge q gv0)), (Permutation (p ++ q) (merge gv0 p)), (Permutation (p ++ q) (merge gv0 q)), (Permutation (p ++ q) (merge gv0 gv0)), (Permutation (p ++ q) (insert a p)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a gv0)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k gv0))
(Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap gv0)), (Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) (p ++ gv0)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ gv0)), (Permutation (p ++ q) (gv0 ++ p)), (Permutation (p ++ q) (gv0 ++ q))
(Permutation (p ++ q) (gv0 ++ gv0)), (Permutation (p ++ q) []), (Permutation (p ++ gv0) p), (Permutation (p ++ gv0) q), (Permutation (p ++ gv0) gv0), (Permutation (p ++ gv0) (a :: p)), (Permutation (p ++ gv0) (a :: q)), (Permutation (p ++ gv0) (a :: gv0)), (Permutation (p ++ gv0) (k :: p)), (Permutation (p ++ gv0) (k :: q))
(Permutation (p ++ gv0) (k :: gv0)), (Permutation (p ++ gv0) (merge p p)), (Permutation (p ++ gv0) (merge p q)), (Permutation (p ++ gv0) (merge p gv0)), (Permutation (p ++ gv0) (merge q p)), (Permutation (p ++ gv0) (merge q q)), (Permutation (p ++ gv0) (merge q gv0)), (Permutation (p ++ gv0) (merge gv0 p)), (Permutation (p ++ gv0) (merge gv0 q)), (Permutation (p ++ gv0) (merge gv0 gv0))
(Permutation (p ++ gv0) (insert a p)), (Permutation (p ++ gv0) (insert a q)), (Permutation (p ++ gv0) (insert a gv0)), (Permutation (p ++ gv0) (insert k p)), (Permutation (p ++ gv0) (insert k q)), (Permutation (p ++ gv0) (insert k gv0)), (Permutation (p ++ gv0) (maybe_swap p)), (Permutation (p ++ gv0) (maybe_swap q)), (Permutation (p ++ gv0) (maybe_swap gv0)), (Permutation (p ++ gv0) (p ++ p))
(Permutation (p ++ gv0) (p ++ q)), (Permutation (p ++ gv0) (q ++ p)), (Permutation (p ++ gv0) (q ++ q)), (Permutation (p ++ gv0) (q ++ gv0)), (Permutation (p ++ gv0) (gv0 ++ p)), (Permutation (p ++ gv0) (gv0 ++ q)), (Permutation (p ++ gv0) (gv0 ++ gv0)), (Permutation (p ++ gv0) []), (Permutation (q ++ p) p), (Permutation (q ++ p) q)
(Permutation (q ++ p) gv0), (Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: gv0)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: gv0)), (Permutation (q ++ p) (merge p p)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p gv0))
(Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q gv0)), (Permutation (q ++ p) (merge gv0 p)), (Permutation (q ++ p) (merge gv0 q)), (Permutation (q ++ p) (merge gv0 gv0)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a gv0)), (Permutation (q ++ p) (insert k p))
(Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k gv0)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap gv0)), (Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ gv0)), (Permutation (q ++ p) (q ++ q)), (Permutation (q ++ p) (q ++ gv0))
(Permutation (q ++ p) (gv0 ++ p)), (Permutation (q ++ p) (gv0 ++ q)), (Permutation (q ++ p) (gv0 ++ gv0)), (Permutation (q ++ p) []), (Permutation (q ++ q) p), (Permutation (q ++ q) q), (Permutation (q ++ q) gv0), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: gv0))
(Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: gv0)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p gv0)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge q q)), (Permutation (q ++ q) (merge q gv0)), (Permutation (q ++ q) (merge gv0 p))
(Permutation (q ++ q) (merge gv0 q)), (Permutation (q ++ q) (merge gv0 gv0)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a gv0)), (Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k gv0)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (maybe_swap q))
(Permutation (q ++ q) (maybe_swap gv0)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ gv0)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (q ++ gv0)), (Permutation (q ++ q) (gv0 ++ p)), (Permutation (q ++ q) (gv0 ++ q)), (Permutation (q ++ q) (gv0 ++ gv0)), (Permutation (q ++ q) [])
(Permutation (q ++ gv0) p), (Permutation (q ++ gv0) q), (Permutation (q ++ gv0) gv0), (Permutation (q ++ gv0) (a :: p)), (Permutation (q ++ gv0) (a :: q)), (Permutation (q ++ gv0) (a :: gv0)), (Permutation (q ++ gv0) (k :: p)), (Permutation (q ++ gv0) (k :: q)), (Permutation (q ++ gv0) (k :: gv0)), (Permutation (q ++ gv0) (merge p p))
(Permutation (q ++ gv0) (merge p q)), (Permutation (q ++ gv0) (merge p gv0)), (Permutation (q ++ gv0) (merge q p)), (Permutation (q ++ gv0) (merge q q)), (Permutation (q ++ gv0) (merge q gv0)), (Permutation (q ++ gv0) (merge gv0 p)), (Permutation (q ++ gv0) (merge gv0 q)), (Permutation (q ++ gv0) (merge gv0 gv0)), (Permutation (q ++ gv0) (insert a p)), (Permutation (q ++ gv0) (insert a q))
(Permutation (q ++ gv0) (insert a gv0)), (Permutation (q ++ gv0) (insert k p)), (Permutation (q ++ gv0) (insert k q)), (Permutation (q ++ gv0) (insert k gv0)), (Permutation (q ++ gv0) (maybe_swap p)), (Permutation (q ++ gv0) (maybe_swap q)), (Permutation (q ++ gv0) (maybe_swap gv0)), (Permutation (q ++ gv0) (p ++ p)), (Permutation (q ++ gv0) (p ++ q)), (Permutation (q ++ gv0) (p ++ gv0))
(Permutation (q ++ gv0) (q ++ p)), (Permutation (q ++ gv0) (q ++ q)), (Permutation (q ++ gv0) (gv0 ++ p)), (Permutation (q ++ gv0) (gv0 ++ q)), (Permutation (q ++ gv0) (gv0 ++ gv0)), (Permutation (q ++ gv0) []), (Permutation (gv0 ++ p) p), (Permutation (gv0 ++ p) q), (Permutation (gv0 ++ p) gv0), (Permutation (gv0 ++ p) (a :: p))
(Permutation (gv0 ++ p) (a :: q)), (Permutation (gv0 ++ p) (a :: gv0)), (Permutation (gv0 ++ p) (k :: p)), (Permutation (gv0 ++ p) (k :: q)), (Permutation (gv0 ++ p) (k :: gv0)), (Permutation (gv0 ++ p) (merge p p)), (Permutation (gv0 ++ p) (merge p q)), (Permutation (gv0 ++ p) (merge p gv0)), (Permutation (gv0 ++ p) (merge q p)), (Permutation (gv0 ++ p) (merge q q))
(Permutation (gv0 ++ p) (merge q gv0)), (Permutation (gv0 ++ p) (merge gv0 p)), (Permutation (gv0 ++ p) (merge gv0 q)), (Permutation (gv0 ++ p) (merge gv0 gv0)), (Permutation (gv0 ++ p) (insert a p)), (Permutation (gv0 ++ p) (insert a q)), (Permutation (gv0 ++ p) (insert a gv0)), (Permutation (gv0 ++ p) (insert k p)), (Permutation (gv0 ++ p) (insert k q)), (Permutation (gv0 ++ p) (insert k gv0))
(Permutation (gv0 ++ p) (maybe_swap p)), (Permutation (gv0 ++ p) (maybe_swap q)), (Permutation (gv0 ++ p) (maybe_swap gv0)), (Permutation (gv0 ++ p) (p ++ p)), (Permutation (gv0 ++ p) (p ++ q)), (Permutation (gv0 ++ p) (p ++ gv0)), (Permutation (gv0 ++ p) (q ++ p)), (Permutation (gv0 ++ p) (q ++ q)), (Permutation (gv0 ++ p) (q ++ gv0)), (Permutation (gv0 ++ p) (gv0 ++ q))
(Permutation (gv0 ++ p) (gv0 ++ gv0)), (Permutation (gv0 ++ p) []), (Permutation (gv0 ++ q) p), (Permutation (gv0 ++ q) q), (Permutation (gv0 ++ q) gv0), (Permutation (gv0 ++ q) (a :: p)), (Permutation (gv0 ++ q) (a :: q)), (Permutation (gv0 ++ q) (a :: gv0)), (Permutation (gv0 ++ q) (k :: p)), (Permutation (gv0 ++ q) (k :: q))
(Permutation (gv0 ++ q) (k :: gv0)), (Permutation (gv0 ++ q) (merge p p)), (Permutation (gv0 ++ q) (merge p q)), (Permutation (gv0 ++ q) (merge p gv0)), (Permutation (gv0 ++ q) (merge q p)), (Permutation (gv0 ++ q) (merge q q)), (Permutation (gv0 ++ q) (merge q gv0)), (Permutation (gv0 ++ q) (merge gv0 p)), (Permutation (gv0 ++ q) (merge gv0 q)), (Permutation (gv0 ++ q) (merge gv0 gv0))
(Permutation (gv0 ++ q) (insert a p)), (Permutation (gv0 ++ q) (insert a q)), (Permutation (gv0 ++ q) (insert a gv0)), (Permutation (gv0 ++ q) (insert k p)), (Permutation (gv0 ++ q) (insert k q)), (Permutation (gv0 ++ q) (insert k gv0)), (Permutation (gv0 ++ q) (maybe_swap p)), (Permutation (gv0 ++ q) (maybe_swap q)), (Permutation (gv0 ++ q) (maybe_swap gv0)), (Permutation (gv0 ++ q) (p ++ p))
(Permutation (gv0 ++ q) (p ++ q)), (Permutation (gv0 ++ q) (p ++ gv0)), (Permutation (gv0 ++ q) (q ++ p)), (Permutation (gv0 ++ q) (q ++ q)), (Permutation (gv0 ++ q) (q ++ gv0)), (Permutation (gv0 ++ q) (gv0 ++ p)), (Permutation (gv0 ++ q) (gv0 ++ gv0)), (Permutation (gv0 ++ q) []), (Permutation (gv0 ++ gv0) p), (Permutation (gv0 ++ gv0) q)
(Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: p)), (Permutation (gv0 ++ gv0) (a :: q)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (k :: p)), (Permutation (gv0 ++ gv0) (k :: q)), (Permutation (gv0 ++ gv0) (k :: gv0)), (Permutation (gv0 ++ gv0) (merge p p)), (Permutation (gv0 ++ gv0) (merge p q)), (Permutation (gv0 ++ gv0) (merge p gv0))
(Permutation (gv0 ++ gv0) (merge q p)), (Permutation (gv0 ++ gv0) (merge q q)), (Permutation (gv0 ++ gv0) (merge q gv0)), (Permutation (gv0 ++ gv0) (merge gv0 p)), (Permutation (gv0 ++ gv0) (merge gv0 q)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (insert a p)), (Permutation (gv0 ++ gv0) (insert a q)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (insert k p))
(Permutation (gv0 ++ gv0) (insert k q)), (Permutation (gv0 ++ gv0) (insert k gv0)), (Permutation (gv0 ++ gv0) (maybe_swap p)), (Permutation (gv0 ++ gv0) (maybe_swap q)), (Permutation (gv0 ++ gv0) (maybe_swap gv0)), (Permutation (gv0 ++ gv0) (p ++ p)), (Permutation (gv0 ++ gv0) (p ++ q)), (Permutation (gv0 ++ gv0) (p ++ gv0)), (Permutation (gv0 ++ gv0) (q ++ p)), (Permutation (gv0 ++ gv0) (q ++ q))
(Permutation (gv0 ++ gv0) (q ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ p)), (Permutation (gv0 ++ gv0) (gv0 ++ q)), (Permutation (gv0 ++ gv0) []), (Permutation [] p), (Permutation [] q), (Permutation [] gv0), (Permutation [] (a :: p)), (Permutation [] (a :: q)), (Permutation [] (a :: gv0))
(Permutation [] (k :: p)), (Permutation [] (k :: q)), (Permutation [] (k :: gv0)), (Permutation [] (merge p p)), (Permutation [] (merge p q)), (Permutation [] (merge p gv0)), (Permutation [] (merge q p)), (Permutation [] (merge q q)), (Permutation [] (merge q gv0)), (Permutation [] (merge gv0 p))
(Permutation [] (merge gv0 q)), (Permutation [] (merge gv0 gv0)), (Permutation [] (insert a p)), (Permutation [] (insert a q)), (Permutation [] (insert a gv0)), (Permutation [] (insert k p)), (Permutation [] (insert k q)), (Permutation [] (insert k gv0)), (Permutation [] (maybe_swap p)), (Permutation [] (maybe_swap q))
(Permutation [] (maybe_swap gv0)), (Permutation [] (p ++ p)), (Permutation [] (p ++ q)), (Permutation [] (p ++ gv0)), (Permutation [] (q ++ p)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv0)), (Permutation [] (gv0 ++ p)), (Permutation [] (gv0 ++ q)), (Permutation [] (gv0 ++ gv0))
(In a (a :: p)), (In a (a :: q)), (In a (a :: gv0)), (In a (k :: p)), (In a (k :: q)), (In a (k :: gv0)), (In a (merge p p)), (In a (merge p q)), (In a (merge p gv0)), (In a (merge q p))
(In a (merge q q)), (In a (merge q gv0)), (In a (merge gv0 p)), (In a (merge gv0 q)), (In a (merge gv0 gv0)), (In a (insert a p)), (In a (insert a q)), (In a (insert a gv0)), (In a (insert k p)), (In a (insert k q))
(In a (insert k gv0)), (In a (maybe_swap p)), (In a (maybe_swap q)), (In a (maybe_swap gv0)), (In a (p ++ p)), (In a (p ++ q)), (In a (p ++ gv0)), (In a (q ++ p)), (In a (q ++ q)), (In a (q ++ gv0))
(In a (gv0 ++ p)), (In a (gv0 ++ q)), (In a (gv0 ++ gv0)), (In k (a :: p)), (In k (a :: q)), (In k (a :: gv0)), (In k (k :: p)), (In k (k :: q)), (In k (k :: gv0)), (In k (merge p p))
(In k (merge p q)), (In k (merge p gv0)), (In k (merge q p)), (In k (merge q q)), (In k (merge q gv0)), (In k (merge gv0 p)), (In k (merge gv0 q)), (In k (merge gv0 gv0)), (In k (insert a p)), (In k (insert a q))
(In k (insert a gv0)), (In k (insert k p)), (In k (insert k q)), (In k (insert k gv0)), (In k (maybe_swap p)), (In k (maybe_swap q)), (In k (maybe_swap gv0)), (In k (p ++ p)), (In k (p ++ q)), (In k (p ++ gv0))
(In k (q ++ p)), (In k (q ++ q)), (In k (q ++ gv0)), (In k (gv0 ++ p)), (In k (gv0 ++ q)), (In k (gv0 ++ gv0)), (In (length p) p), (In (length p) q), (In (length p) gv0), (In (length p) (a :: p))
(In (length p) (a :: q)), (In (length p) (a :: gv0)), (In (length p) (k :: p)), (In (length p) (k :: q)), (In (length p) (k :: gv0)), (In (length p) (merge p p)), (In (length p) (merge p q)), (In (length p) (merge p gv0)), (In (length p) (merge q p)), (In (length p) (merge q q))
(In (length p) (merge q gv0)), (In (length p) (merge gv0 p)), (In (length p) (merge gv0 q)), (In (length p) (merge gv0 gv0)), (In (length p) (insert a p)), (In (length p) (insert a q)), (In (length p) (insert a gv0)), (In (length p) (insert k p)), (In (length p) (insert k q)), (In (length p) (insert k gv0))
(In (length p) (maybe_swap p)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap gv0)), (In (length p) (p ++ p)), (In (length p) (p ++ q)), (In (length p) (p ++ gv0)), (In (length p) (q ++ p)), (In (length p) (q ++ q)), (In (length p) (q ++ gv0)), (In (length p) (gv0 ++ p))
(In (length p) (gv0 ++ q)), (In (length p) (gv0 ++ gv0)), (In (length q) p), (In (length q) q), (In (length q) gv0), (In (length q) (a :: p)), (In (length q) (a :: q)), (In (length q) (a :: gv0)), (In (length q) (k :: p)), (In (length q) (k :: q))
(In (length q) (k :: gv0)), (In (length q) (merge p p)), (In (length q) (merge p q)), (In (length q) (merge p gv0)), (In (length q) (merge q p)), (In (length q) (merge q q)), (In (length q) (merge q gv0)), (In (length q) (merge gv0 p)), (In (length q) (merge gv0 q)), (In (length q) (merge gv0 gv0))
(In (length q) (insert a p)), (In (length q) (insert a q)), (In (length q) (insert a gv0)), (In (length q) (insert k p)), (In (length q) (insert k q)), (In (length q) (insert k gv0)), (In (length q) (maybe_swap p)), (In (length q) (maybe_swap q)), (In (length q) (maybe_swap gv0)), (In (length q) (p ++ p))
(In (length q) (p ++ q)), (In (length q) (p ++ gv0)), (In (length q) (q ++ p)), (In (length q) (q ++ q)), (In (length q) (q ++ gv0)), (In (length q) (gv0 ++ p)), (In (length q) (gv0 ++ q)), (In (length q) (gv0 ++ gv0)), (In (length gv0) p), (In (length gv0) q)
(In (length gv0) gv0), (In (length gv0) (a :: p)), (In (length gv0) (a :: q)), (In (length gv0) (a :: gv0)), (In (length gv0) (k :: p)), (In (length gv0) (k :: q)), (In (length gv0) (k :: gv0)), (In (length gv0) (merge p p)), (In (length gv0) (merge p q)), (In (length gv0) (merge p gv0))
(In (length gv0) (merge q p)), (In (length gv0) (merge q q)), (In (length gv0) (merge q gv0)), (In (length gv0) (merge gv0 p)), (In (length gv0) (merge gv0 q)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (insert a p)), (In (length gv0) (insert a q)), (In (length gv0) (insert a gv0)), (In (length gv0) (insert k p))
(In (length gv0) (insert k q)), (In (length gv0) (insert k gv0)), (In (length gv0) (maybe_swap p)), (In (length gv0) (maybe_swap q)), (In (length gv0) (maybe_swap gv0)), (In (length gv0) (p ++ p)), (In (length gv0) (p ++ q)), (In (length gv0) (p ++ gv0)), (In (length gv0) (q ++ p)), (In (length gv0) (q ++ q))
(In (length gv0) (q ++ gv0)), (In (length gv0) (gv0 ++ p)), (In (length gv0) (gv0 ++ q)), (In (length gv0) (gv0 ++ gv0)), (a < length p), (a < length q), (a < length gv0), (k < length p), (k < length q), (k < length gv0)
(length p < a), (length p < k), (length p < length q), (length p < length gv0), (length q < a), (length q < k), (length q < length p), (length q < length gv0), (length gv0 < a), (length gv0 < k)
(length gv0 < length p), (length gv0 < length q), (a <= length p), (a <= length q), (a <= length gv0), (k <= length p), (k <= length q), (k <= length gv0), (length p <= a), (length p <= k)
(length p <= length q), (length p <= length gv0), (length q <= a), (length q <= k), (length q <= length p), (length q <= length gv0), (length gv0 <= a), (length gv0 <= k), (length gv0 <= length p), (length gv0 <= length q)
(~ Abs p p), (~ Abs p q), (~ Abs p gv0), (~ Abs q p), (~ Abs q q), (~ Abs q gv0), (~ Abs gv0 p), (~ Abs gv0 q), (~ Abs gv0 gv0), (~ priq p)
(~ priq q), (~ priq gv0), (~ Permutation p p), (~ Permutation p q), (~ Permutation p gv0), (~ Permutation q p), (~ Permutation q q), (~ Permutation q gv0), (~ Permutation gv0 p), (~ Permutation gv0 q)
(~ Permutation gv0 gv0), (~ In a p), (~ In a q), (~ In a gv0), (~ In k p), (~ In k q), (~ In k gv0), (~ a < a), (~ a < k), (~ k < a)
(~ k < k), (~ a <= a), (~ a <= k), (~ k <= a), (~ k <= k), (a <> a), (a <> k), (k <> a), (k <> k), (p <> p)
(p <> q), (p <> gv0), (q <> p), (q <> q), (q <> gv0), (gv0 <> p), (gv0 <> q), (gv0 <> gv0), (None = Some p), (None = Some q)
(None = Some gv0), (a :: p = p), (a :: p = q), (a :: p = gv0), (a :: p = merge p p), (a :: p = merge p q), (a :: p = merge p gv0), (a :: p = merge q p), (a :: p = merge q q), (a :: p = merge q gv0)
(a :: p = merge gv0 p), (a :: p = merge gv0 q), (a :: p = merge gv0 gv0), (a :: p = insert a p), (a :: p = insert a q), (a :: p = insert a gv0), (a :: p = insert k p), (a :: p = insert k q), (a :: p = insert k gv0), (a :: p = maybe_swap p)
(a :: p = maybe_swap q), (a :: p = maybe_swap gv0), (a :: p = p ++ p), (a :: p = p ++ q), (a :: p = p ++ gv0), (a :: p = q ++ p), (a :: p = q ++ q), (a :: p = q ++ gv0), (a :: p = gv0 ++ p), (a :: p = gv0 ++ q)
(a :: p = gv0 ++ gv0), (a :: p = []), (a :: q = p), (a :: q = q), (a :: q = gv0), (a :: q = merge p p), (a :: q = merge p q), (a :: q = merge p gv0), (a :: q = merge q p), (a :: q = merge q q)
(a :: q = merge q gv0), (a :: q = merge gv0 p), (a :: q = merge gv0 q), (a :: q = merge gv0 gv0), (a :: q = insert a p), (a :: q = insert a q), (a :: q = insert a gv0), (a :: q = insert k p), (a :: q = insert k q), (a :: q = insert k gv0)
(a :: q = maybe_swap p), (a :: q = maybe_swap q), (a :: q = maybe_swap gv0), (a :: q = p ++ p), (a :: q = p ++ q), (a :: q = p ++ gv0), (a :: q = q ++ p), (a :: q = q ++ q), (a :: q = q ++ gv0), (a :: q = gv0 ++ p)
(a :: q = gv0 ++ q), (a :: q = gv0 ++ gv0), (a :: q = []), (a :: gv0 = p), (a :: gv0 = q), (a :: gv0 = gv0), (a :: gv0 = merge p p), (a :: gv0 = merge p q), (a :: gv0 = merge p gv0), (a :: gv0 = merge q p)
(a :: gv0 = merge q q), (a :: gv0 = merge q gv0), (a :: gv0 = merge gv0 p), (a :: gv0 = merge gv0 q), (a :: gv0 = merge gv0 gv0), (a :: gv0 = insert a p), (a :: gv0 = insert a q), (a :: gv0 = insert a gv0), (a :: gv0 = insert k p), (a :: gv0 = insert k q)
(a :: gv0 = insert k gv0), (a :: gv0 = maybe_swap p), (a :: gv0 = maybe_swap q), (a :: gv0 = maybe_swap gv0), (a :: gv0 = p ++ p), (a :: gv0 = p ++ q), (a :: gv0 = p ++ gv0), (a :: gv0 = q ++ p), (a :: gv0 = q ++ q), (a :: gv0 = q ++ gv0)
(a :: gv0 = gv0 ++ p), (a :: gv0 = gv0 ++ q), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (k :: p = p), (k :: p = q), (k :: p = gv0), (k :: p = merge p p), (k :: p = merge p q), (k :: p = merge p gv0)
(k :: p = merge q p), (k :: p = merge q q), (k :: p = merge q gv0), (k :: p = merge gv0 p), (k :: p = merge gv0 q), (k :: p = merge gv0 gv0), (k :: p = insert a p), (k :: p = insert a q), (k :: p = insert a gv0), (k :: p = insert k p)
(k :: p = insert k q), (k :: p = insert k gv0), (k :: p = maybe_swap p), (k :: p = maybe_swap q), (k :: p = maybe_swap gv0), (k :: p = p ++ p), (k :: p = p ++ q), (k :: p = p ++ gv0), (k :: p = q ++ p), (k :: p = q ++ q)
(k :: p = q ++ gv0), (k :: p = gv0 ++ p), (k :: p = gv0 ++ q), (k :: p = gv0 ++ gv0), (k :: p = []), (k :: q = p), (k :: q = q), (k :: q = gv0), (k :: q = merge p p), (k :: q = merge p q)
(k :: q = merge p gv0), (k :: q = merge q p), (k :: q = merge q q), (k :: q = merge q gv0), (k :: q = merge gv0 p), (k :: q = merge gv0 q), (k :: q = merge gv0 gv0), (k :: q = insert a p), (k :: q = insert a q), (k :: q = insert a gv0)
(k :: q = insert k p), (k :: q = insert k q), (k :: q = insert k gv0), (k :: q = maybe_swap p), (k :: q = maybe_swap q), (k :: q = maybe_swap gv0), (k :: q = p ++ p), (k :: q = p ++ q), (k :: q = p ++ gv0), (k :: q = q ++ p)
(k :: q = q ++ q), (k :: q = q ++ gv0), (k :: q = gv0 ++ p), (k :: q = gv0 ++ q), (k :: q = gv0 ++ gv0), (k :: q = []), (k :: gv0 = p), (k :: gv0 = q), (k :: gv0 = gv0), (k :: gv0 = merge p p)
(k :: gv0 = merge p q), (k :: gv0 = merge p gv0), (k :: gv0 = merge q p), (k :: gv0 = merge q q), (k :: gv0 = merge q gv0), (k :: gv0 = merge gv0 p), (k :: gv0 = merge gv0 q), (k :: gv0 = merge gv0 gv0), (k :: gv0 = insert a p), (k :: gv0 = insert a q)
(k :: gv0 = insert a gv0), (k :: gv0 = insert k p), (k :: gv0 = insert k q), (k :: gv0 = insert k gv0), (k :: gv0 = maybe_swap p), (k :: gv0 = maybe_swap q), (k :: gv0 = maybe_swap gv0), (k :: gv0 = p ++ p), (k :: gv0 = p ++ q), (k :: gv0 = p ++ gv0)
(k :: gv0 = q ++ p), (k :: gv0 = q ++ q), (k :: gv0 = q ++ gv0), (k :: gv0 = gv0 ++ p), (k :: gv0 = gv0 ++ q), (k :: gv0 = gv0 ++ gv0), (k :: gv0 = []), (merge p p = p), (merge p p = q), (merge p p = gv0)
(merge p p = insert a p), (merge p p = insert a q), (merge p p = insert a gv0), (merge p p = insert k p), (merge p p = insert k q), (merge p p = insert k gv0), (merge p p = maybe_swap p), (merge p p = maybe_swap q), (merge p p = maybe_swap gv0), (merge p p = p ++ p)
(merge p p = p ++ q), (merge p p = p ++ gv0), (merge p p = q ++ p), (merge p p = q ++ q), (merge p p = q ++ gv0), (merge p p = gv0 ++ p), (merge p p = gv0 ++ q), (merge p p = gv0 ++ gv0), (merge p q = p), (merge p q = q)
(merge p q = gv0), (merge p q = insert a p), (merge p q = insert a q), (merge p q = insert a gv0), (merge p q = insert k p), (merge p q = insert k q), (merge p q = insert k gv0), (merge p q = maybe_swap p), (merge p q = maybe_swap q), (merge p q = maybe_swap gv0)
(merge p q = p ++ p), (merge p q = p ++ q), (merge p q = p ++ gv0), (merge p q = q ++ p), (merge p q = q ++ q), (merge p q = q ++ gv0), (merge p q = gv0 ++ p), (merge p q = gv0 ++ q), (merge p q = gv0 ++ gv0), (merge p gv0 = p)
(merge p gv0 = q), (merge p gv0 = gv0), (merge p gv0 = insert a p), (merge p gv0 = insert a q), (merge p gv0 = insert a gv0), (merge p gv0 = insert k p), (merge p gv0 = insert k q), (merge p gv0 = insert k gv0), (merge p gv0 = maybe_swap p), (merge p gv0 = maybe_swap q)
(merge p gv0 = maybe_swap gv0), (merge p gv0 = p ++ p), (merge p gv0 = p ++ q), (merge p gv0 = p ++ gv0), (merge p gv0 = q ++ p), (merge p gv0 = q ++ q), (merge p gv0 = q ++ gv0), (merge p gv0 = gv0 ++ p), (merge p gv0 = gv0 ++ q), (merge p gv0 = gv0 ++ gv0)
(merge q p = p), (merge q p = q), (merge q p = gv0), (merge q p = insert a p), (merge q p = insert a q), (merge q p = insert a gv0), (merge q p = insert k p), (merge q p = insert k q), (merge q p = insert k gv0), (merge q p = maybe_swap p)
(merge q p = maybe_swap q), (merge q p = maybe_swap gv0), (merge q p = p ++ p), (merge q p = p ++ q), (merge q p = p ++ gv0), (merge q p = q ++ p), (merge q p = q ++ q), (merge q p = q ++ gv0), (merge q p = gv0 ++ p), (merge q p = gv0 ++ q)
(merge q p = gv0 ++ gv0), (merge q q = p), (merge q q = q), (merge q q = gv0), (merge q q = insert a p), (merge q q = insert a q), (merge q q = insert a gv0), (merge q q = insert k p), (merge q q = insert k q), (merge q q = insert k gv0)
(merge q q = maybe_swap p), (merge q q = maybe_swap q), (merge q q = maybe_swap gv0), (merge q q = p ++ p), (merge q q = p ++ q), (merge q q = p ++ gv0), (merge q q = q ++ p), (merge q q = q ++ q), (merge q q = q ++ gv0), (merge q q = gv0 ++ p)
(merge q q = gv0 ++ q), (merge q q = gv0 ++ gv0), (merge q gv0 = p), (merge q gv0 = q), (merge q gv0 = gv0), (merge q gv0 = insert a p), (merge q gv0 = insert a q), (merge q gv0 = insert a gv0), (merge q gv0 = insert k p), (merge q gv0 = insert k q)
(merge q gv0 = insert k gv0), (merge q gv0 = maybe_swap p), (merge q gv0 = maybe_swap q), (merge q gv0 = maybe_swap gv0), (merge q gv0 = p ++ p), (merge q gv0 = p ++ q), (merge q gv0 = p ++ gv0), (merge q gv0 = q ++ p), (merge q gv0 = q ++ q), (merge q gv0 = q ++ gv0)
(merge q gv0 = gv0 ++ p), (merge q gv0 = gv0 ++ q), (merge q gv0 = gv0 ++ gv0), (merge gv0 p = p), (merge gv0 p = q), (merge gv0 p = gv0), (merge gv0 p = insert a p), (merge gv0 p = insert a q), (merge gv0 p = insert a gv0), (merge gv0 p = insert k p)
(merge gv0 p = insert k q), (merge gv0 p = insert k gv0), (merge gv0 p = maybe_swap p), (merge gv0 p = maybe_swap q), (merge gv0 p = maybe_swap gv0), (merge gv0 p = p ++ p), (merge gv0 p = p ++ q), (merge gv0 p = p ++ gv0), (merge gv0 p = q ++ p), (merge gv0 p = q ++ q)
(merge gv0 p = q ++ gv0), (merge gv0 p = gv0 ++ p), (merge gv0 p = gv0 ++ q), (merge gv0 p = gv0 ++ gv0), (merge gv0 q = p), (merge gv0 q = q), (merge gv0 q = gv0), (merge gv0 q = insert a p), (merge gv0 q = insert a q), (merge gv0 q = insert a gv0)
(merge gv0 q = insert k p), (merge gv0 q = insert k q), (merge gv0 q = insert k gv0), (merge gv0 q = maybe_swap p), (merge gv0 q = maybe_swap q), (merge gv0 q = maybe_swap gv0), (merge gv0 q = p ++ p), (merge gv0 q = p ++ q), (merge gv0 q = p ++ gv0), (merge gv0 q = q ++ p)
(merge gv0 q = q ++ q), (merge gv0 q = q ++ gv0), (merge gv0 q = gv0 ++ p), (merge gv0 q = gv0 ++ q), (merge gv0 q = gv0 ++ gv0), (merge gv0 gv0 = p), (merge gv0 gv0 = q), (merge gv0 gv0 = gv0), (merge gv0 gv0 = insert a p), (merge gv0 gv0 = insert a q)
(merge gv0 gv0 = insert a gv0), (merge gv0 gv0 = insert k p), (merge gv0 gv0 = insert k q), (merge gv0 gv0 = insert k gv0), (merge gv0 gv0 = maybe_swap p), (merge gv0 gv0 = maybe_swap q), (merge gv0 gv0 = maybe_swap gv0), (merge gv0 gv0 = p ++ p), (merge gv0 gv0 = p ++ q), (merge gv0 gv0 = p ++ gv0)
(merge gv0 gv0 = q ++ p), (merge gv0 gv0 = q ++ q), (merge gv0 gv0 = q ++ gv0), (merge gv0 gv0 = gv0 ++ p), (merge gv0 gv0 = gv0 ++ q), (merge gv0 gv0 = gv0 ++ gv0), (insert a p = p), (insert a p = q), (insert a p = gv0), (insert a p = p ++ p)
(insert a p = p ++ q), (insert a p = p ++ gv0), (insert a p = q ++ p), (insert a p = q ++ q), (insert a p = q ++ gv0), (insert a p = gv0 ++ p), (insert a p = gv0 ++ q), (insert a p = gv0 ++ gv0), (insert a q = p), (insert a q = q)
(insert a q = gv0), (insert a q = p ++ p), (insert a q = p ++ q), (insert a q = p ++ gv0), (insert a q = q ++ p), (insert a q = q ++ q), (insert a q = q ++ gv0), (insert a q = gv0 ++ p), (insert a q = gv0 ++ q), (insert a q = gv0 ++ gv0)
(insert a gv0 = p), (insert a gv0 = q), (insert a gv0 = gv0), (insert a gv0 = p ++ p), (insert a gv0 = p ++ q), (insert a gv0 = p ++ gv0), (insert a gv0 = q ++ p), (insert a gv0 = q ++ q), (insert a gv0 = q ++ gv0), (insert a gv0 = gv0 ++ p)
(insert a gv0 = gv0 ++ q), (insert a gv0 = gv0 ++ gv0), (insert k p = p), (insert k p = q), (insert k p = gv0), (insert k p = p ++ p), (insert k p = p ++ q), (insert k p = p ++ gv0), (insert k p = q ++ p), (insert k p = q ++ q)
(insert k p = q ++ gv0), (insert k p = gv0 ++ p), (insert k p = gv0 ++ q), (insert k p = gv0 ++ gv0), (insert k q = p), (insert k q = q), (insert k q = gv0), (insert k q = p ++ p), (insert k q = p ++ q), (insert k q = p ++ gv0)
(insert k q = q ++ p), (insert k q = q ++ q), (insert k q = q ++ gv0), (insert k q = gv0 ++ p), (insert k q = gv0 ++ q), (insert k q = gv0 ++ gv0), (insert k gv0 = p), (insert k gv0 = q), (insert k gv0 = gv0), (insert k gv0 = p ++ p)
(insert k gv0 = p ++ q), (insert k gv0 = p ++ gv0), (insert k gv0 = q ++ p), (insert k gv0 = q ++ q), (insert k gv0 = q ++ gv0), (insert k gv0 = gv0 ++ p), (insert k gv0 = gv0 ++ q), (insert k gv0 = gv0 ++ gv0), (maybe_swap p = p), (maybe_swap p = q)
(maybe_swap p = gv0), (maybe_swap p = insert a p), (maybe_swap p = insert a q), (maybe_swap p = insert a gv0), (maybe_swap p = insert k p), (maybe_swap p = insert k q), (maybe_swap p = insert k gv0), (maybe_swap p = p ++ p), (maybe_swap p = p ++ q), (maybe_swap p = p ++ gv0)
(maybe_swap p = q ++ p), (maybe_swap p = q ++ q), (maybe_swap p = q ++ gv0), (maybe_swap p = gv0 ++ p), (maybe_swap p = gv0 ++ q), (maybe_swap p = gv0 ++ gv0), (maybe_swap q = p), (maybe_swap q = q), (maybe_swap q = gv0), (maybe_swap q = insert a p)
(maybe_swap q = insert a q), (maybe_swap q = insert a gv0), (maybe_swap q = insert k p), (maybe_swap q = insert k q), (maybe_swap q = insert k gv0), (maybe_swap q = p ++ p), (maybe_swap q = p ++ q), (maybe_swap q = p ++ gv0), (maybe_swap q = q ++ p), (maybe_swap q = q ++ q)
(maybe_swap q = q ++ gv0), (maybe_swap q = gv0 ++ p), (maybe_swap q = gv0 ++ q), (maybe_swap q = gv0 ++ gv0), (maybe_swap gv0 = p), (maybe_swap gv0 = q), (maybe_swap gv0 = gv0), (maybe_swap gv0 = insert a p), (maybe_swap gv0 = insert a q), (maybe_swap gv0 = insert a gv0)
(maybe_swap gv0 = insert k p), (maybe_swap gv0 = insert k q), (maybe_swap gv0 = insert k gv0), (maybe_swap gv0 = p ++ p), (maybe_swap gv0 = p ++ q), (maybe_swap gv0 = p ++ gv0), (maybe_swap gv0 = q ++ p), (maybe_swap gv0 = q ++ q), (maybe_swap gv0 = q ++ gv0), (maybe_swap gv0 = gv0 ++ p)
(maybe_swap gv0 = gv0 ++ q), (maybe_swap gv0 = gv0 ++ gv0), (p ++ p = p), (p ++ p = q), (p ++ p = gv0), (p ++ q = p), (p ++ q = q), (p ++ q = gv0), (p ++ gv0 = p), (p ++ gv0 = q)
(p ++ gv0 = gv0), (q ++ p = p), (q ++ p = q), (q ++ p = gv0), (q ++ q = p), (q ++ q = q), (q ++ q = gv0), (q ++ gv0 = p), (q ++ gv0 = q), (q ++ gv0 = gv0)
(gv0 ++ p = p), (gv0 ++ p = q), (gv0 ++ p = gv0), (gv0 ++ q = p), (gv0 ++ q = q), (gv0 ++ q = gv0), (gv0 ++ gv0 = p), (gv0 ++ gv0 = q), (gv0 ++ gv0 = gv0), ([] = p)
([] = q), ([] = gv0), ([] = merge p p), ([] = merge p q), ([] = merge p gv0), ([] = merge q p), ([] = merge q q), ([] = merge q gv0), ([] = merge gv0 p), ([] = merge gv0 q)
([] = merge gv0 gv0), ([] = insert a p), ([] = insert a q), ([] = insert a gv0), ([] = insert k p), ([] = insert k q), ([] = insert k gv0), ([] = maybe_swap p), ([] = maybe_swap q), ([] = maybe_swap gv0)
([] = p ++ p), ([] = p ++ q), ([] = p ++ gv0), ([] = q ++ p), ([] = q ++ q), ([] = q ++ gv0), ([] = gv0 ++ p), ([] = gv0 ++ q), ([] = gv0 ++ gv0), (None = Some a)
(None = Some k), ((a, p) = select a p), ((a, p) = select a q), ((a, p) = select a gv0), ((a, p) = select k p), ((a, p) = select k q), ((a, p) = select k gv0), ((a, q) = select a p), ((a, q) = select a q), ((a, q) = select a gv0)
((a, q) = select k p), ((a, q) = select k q), ((a, q) = select k gv0), ((a, gv0) = select a p), ((a, gv0) = select a q), ((a, gv0) = select a gv0), ((a, gv0) = select k p), ((a, gv0) = select k q), ((a, gv0) = select k gv0), ((k, p) = select a p)
((k, p) = select a q), ((k, p) = select a gv0), ((k, p) = select k p), ((k, p) = select k q), ((k, p) = select k gv0), ((k, q) = select a p), ((k, q) = select a q), ((k, q) = select a gv0), ((k, q) = select k p), ((k, q) = select k q)
((k, q) = select k gv0), ((k, gv0) = select a p), ((k, gv0) = select a q), ((k, gv0) = select a gv0), ((k, gv0) = select k p), ((k, gv0) = select k q), ((k, gv0) = select k gv0), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (k >=? a))
((a >? a) = (k >=? k)), ((a >? k) = (a >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (k >=? k)), ((k >? a) = (a >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (k >=? k)), ((k >? k) = (a >=? a))
((k >? k) = (a >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (k >=? k)), (length p = a), (length p = k), (length q = a), (length q = k), (length gv0 = a), (length gv0 = k)

Label: 2 (2)
(Abs q q), (Abs q gv1), (Abs q p), (Abs gv1 q), (Abs gv1 gv1), (Abs gv1 p), (Abs p q), (Abs p gv1), (Abs p p), (priq q)
(priq gv1), (priq p), (Permutation q q), (Permutation q gv1), (Permutation q p), (Permutation gv1 q), (Permutation gv1 gv1), (Permutation gv1 p), (Permutation p q), (Permutation p gv1)
(Permutation p p), (In k q), (In k gv1), (In k p), (In a q), (In a gv1), (In a p), (k < k), (k < a), (a < k)
(a < a), (k <= k), (k <= a), (a <= k), (a <= a), (q = q), (q = gv1), (q = p), (gv1 = q), (gv1 = gv1)
(gv1 = p), (p = q), (p = gv1), (p = p), (k = k), (k = a), (a = k), (a = a), (false = (k >? k)), (false = (k >? a))
(false = (a >? k)), (false = (a >? a)), (false = (k >=? k)), (false = (k >=? a)), (false = (a >=? k)), (false = (a >=? a)), (true = (k >? k)), (true = (k >? a)), (true = (a >? k)), (true = (a >? a))
(true = (k >=? k)), (true = (k >=? a)), (true = (a >=? k)), (true = (a >=? a)), (Abs q (k :: q)), (Abs q (k :: gv1)), (Abs q (k :: p)), (Abs q (a :: q)), (Abs q (a :: gv1)), (Abs q (a :: p))
(Abs q (merge q q)), (Abs q (merge q gv1)), (Abs q (merge q p)), (Abs q (merge gv1 q)), (Abs q (merge gv1 gv1)), (Abs q (merge gv1 p)), (Abs q (merge p q)), (Abs q (merge p gv1)), (Abs q (merge p p)), (Abs q (insert k q))
(Abs q (insert k gv1)), (Abs q (insert k p)), (Abs q (insert a q)), (Abs q (insert a gv1)), (Abs q (insert a p)), (Abs q (maybe_swap q)), (Abs q (maybe_swap gv1)), (Abs q (maybe_swap p)), (Abs q (q ++ q)), (Abs q (q ++ gv1))
(Abs q (q ++ p)), (Abs q (gv1 ++ q)), (Abs q (gv1 ++ gv1)), (Abs q (gv1 ++ p)), (Abs q (p ++ q)), (Abs q (p ++ gv1)), (Abs q (p ++ p)), (Abs q []), (Abs gv1 (k :: q)), (Abs gv1 (k :: gv1))
(Abs gv1 (k :: p)), (Abs gv1 (a :: q)), (Abs gv1 (a :: gv1)), (Abs gv1 (a :: p)), (Abs gv1 (merge q q)), (Abs gv1 (merge q gv1)), (Abs gv1 (merge q p)), (Abs gv1 (merge gv1 q)), (Abs gv1 (merge gv1 gv1)), (Abs gv1 (merge gv1 p))
(Abs gv1 (merge p q)), (Abs gv1 (merge p gv1)), (Abs gv1 (merge p p)), (Abs gv1 (insert k q)), (Abs gv1 (insert k gv1)), (Abs gv1 (insert k p)), (Abs gv1 (insert a q)), (Abs gv1 (insert a gv1)), (Abs gv1 (insert a p)), (Abs gv1 (maybe_swap q))
(Abs gv1 (maybe_swap gv1)), (Abs gv1 (maybe_swap p)), (Abs gv1 (q ++ q)), (Abs gv1 (q ++ gv1)), (Abs gv1 (q ++ p)), (Abs gv1 (gv1 ++ q)), (Abs gv1 (gv1 ++ gv1)), (Abs gv1 (gv1 ++ p)), (Abs gv1 (p ++ q)), (Abs gv1 (p ++ gv1))
(Abs gv1 (p ++ p)), (Abs gv1 []), (Abs p (k :: q)), (Abs p (k :: gv1)), (Abs p (k :: p)), (Abs p (a :: q)), (Abs p (a :: gv1)), (Abs p (a :: p)), (Abs p (merge q q)), (Abs p (merge q gv1))
(Abs p (merge q p)), (Abs p (merge gv1 q)), (Abs p (merge gv1 gv1)), (Abs p (merge gv1 p)), (Abs p (merge p q)), (Abs p (merge p gv1)), (Abs p (merge p p)), (Abs p (insert k q)), (Abs p (insert k gv1)), (Abs p (insert k p))
(Abs p (insert a q)), (Abs p (insert a gv1)), (Abs p (insert a p)), (Abs p (maybe_swap q)), (Abs p (maybe_swap gv1)), (Abs p (maybe_swap p)), (Abs p (q ++ q)), (Abs p (q ++ gv1)), (Abs p (q ++ p)), (Abs p (gv1 ++ q))
(Abs p (gv1 ++ gv1)), (Abs p (gv1 ++ p)), (Abs p (p ++ q)), (Abs p (p ++ gv1)), (Abs p (p ++ p)), (Abs p []), (Abs (k :: q) q), (Abs (k :: q) gv1), (Abs (k :: q) p), (Abs (k :: q) (k :: gv1))
(Abs (k :: q) (k :: p)), (Abs (k :: q) (a :: q)), (Abs (k :: q) (a :: gv1)), (Abs (k :: q) (a :: p)), (Abs (k :: q) (merge q q)), (Abs (k :: q) (merge q gv1)), (Abs (k :: q) (merge q p)), (Abs (k :: q) (merge gv1 q)), (Abs (k :: q) (merge gv1 gv1)), (Abs (k :: q) (merge gv1 p))
(Abs (k :: q) (merge p q)), (Abs (k :: q) (merge p gv1)), (Abs (k :: q) (merge p p)), (Abs (k :: q) (insert k q)), (Abs (k :: q) (insert k gv1)), (Abs (k :: q) (insert k p)), (Abs (k :: q) (insert a q)), (Abs (k :: q) (insert a gv1)), (Abs (k :: q) (insert a p)), (Abs (k :: q) (maybe_swap q))
(Abs (k :: q) (maybe_swap gv1)), (Abs (k :: q) (maybe_swap p)), (Abs (k :: q) (q ++ q)), (Abs (k :: q) (q ++ gv1)), (Abs (k :: q) (q ++ p)), (Abs (k :: q) (gv1 ++ q)), (Abs (k :: q) (gv1 ++ gv1)), (Abs (k :: q) (gv1 ++ p)), (Abs (k :: q) (p ++ q)), (Abs (k :: q) (p ++ gv1))
(Abs (k :: q) (p ++ p)), (Abs (k :: q) []), (Abs (k :: gv1) q), (Abs (k :: gv1) gv1), (Abs (k :: gv1) p), (Abs (k :: gv1) (k :: q)), (Abs (k :: gv1) (k :: p)), (Abs (k :: gv1) (a :: q)), (Abs (k :: gv1) (a :: gv1)), (Abs (k :: gv1) (a :: p))
(Abs (k :: gv1) (merge q q)), (Abs (k :: gv1) (merge q gv1)), (Abs (k :: gv1) (merge q p)), (Abs (k :: gv1) (merge gv1 q)), (Abs (k :: gv1) (merge gv1 gv1)), (Abs (k :: gv1) (merge gv1 p)), (Abs (k :: gv1) (merge p q)), (Abs (k :: gv1) (merge p gv1)), (Abs (k :: gv1) (merge p p)), (Abs (k :: gv1) (insert k q))
(Abs (k :: gv1) (insert k gv1)), (Abs (k :: gv1) (insert k p)), (Abs (k :: gv1) (insert a q)), (Abs (k :: gv1) (insert a gv1)), (Abs (k :: gv1) (insert a p)), (Abs (k :: gv1) (maybe_swap q)), (Abs (k :: gv1) (maybe_swap gv1)), (Abs (k :: gv1) (maybe_swap p)), (Abs (k :: gv1) (q ++ q)), (Abs (k :: gv1) (q ++ gv1))
(Abs (k :: gv1) (q ++ p)), (Abs (k :: gv1) (gv1 ++ q)), (Abs (k :: gv1) (gv1 ++ gv1)), (Abs (k :: gv1) (gv1 ++ p)), (Abs (k :: gv1) (p ++ q)), (Abs (k :: gv1) (p ++ gv1)), (Abs (k :: gv1) (p ++ p)), (Abs (k :: gv1) []), (Abs (k :: p) q), (Abs (k :: p) gv1)
(Abs (k :: p) p), (Abs (k :: p) (k :: q)), (Abs (k :: p) (k :: gv1)), (Abs (k :: p) (a :: q)), (Abs (k :: p) (a :: gv1)), (Abs (k :: p) (a :: p)), (Abs (k :: p) (merge q q)), (Abs (k :: p) (merge q gv1)), (Abs (k :: p) (merge q p)), (Abs (k :: p) (merge gv1 q))
(Abs (k :: p) (merge gv1 gv1)), (Abs (k :: p) (merge gv1 p)), (Abs (k :: p) (merge p q)), (Abs (k :: p) (merge p gv1)), (Abs (k :: p) (merge p p)), (Abs (k :: p) (insert k q)), (Abs (k :: p) (insert k gv1)), (Abs (k :: p) (insert k p)), (Abs (k :: p) (insert a q)), (Abs (k :: p) (insert a gv1))
(Abs (k :: p) (insert a p)), (Abs (k :: p) (maybe_swap q)), (Abs (k :: p) (maybe_swap gv1)), (Abs (k :: p) (maybe_swap p)), (Abs (k :: p) (q ++ q)), (Abs (k :: p) (q ++ gv1)), (Abs (k :: p) (q ++ p)), (Abs (k :: p) (gv1 ++ q)), (Abs (k :: p) (gv1 ++ gv1)), (Abs (k :: p) (gv1 ++ p))
(Abs (k :: p) (p ++ q)), (Abs (k :: p) (p ++ gv1)), (Abs (k :: p) (p ++ p)), (Abs (k :: p) []), (Abs (a :: q) q), (Abs (a :: q) gv1), (Abs (a :: q) p), (Abs (a :: q) (k :: q)), (Abs (a :: q) (k :: gv1)), (Abs (a :: q) (k :: p))
(Abs (a :: q) (a :: gv1)), (Abs (a :: q) (a :: p)), (Abs (a :: q) (merge q q)), (Abs (a :: q) (merge q gv1)), (Abs (a :: q) (merge q p)), (Abs (a :: q) (merge gv1 q)), (Abs (a :: q) (merge gv1 gv1)), (Abs (a :: q) (merge gv1 p)), (Abs (a :: q) (merge p q)), (Abs (a :: q) (merge p gv1))
(Abs (a :: q) (merge p p)), (Abs (a :: q) (insert k q)), (Abs (a :: q) (insert k gv1)), (Abs (a :: q) (insert k p)), (Abs (a :: q) (insert a q)), (Abs (a :: q) (insert a gv1)), (Abs (a :: q) (insert a p)), (Abs (a :: q) (maybe_swap q)), (Abs (a :: q) (maybe_swap gv1)), (Abs (a :: q) (maybe_swap p))
(Abs (a :: q) (q ++ q)), (Abs (a :: q) (q ++ gv1)), (Abs (a :: q) (q ++ p)), (Abs (a :: q) (gv1 ++ q)), (Abs (a :: q) (gv1 ++ gv1)), (Abs (a :: q) (gv1 ++ p)), (Abs (a :: q) (p ++ q)), (Abs (a :: q) (p ++ gv1)), (Abs (a :: q) (p ++ p)), (Abs (a :: q) [])
(Abs (a :: gv1) q), (Abs (a :: gv1) gv1), (Abs (a :: gv1) p), (Abs (a :: gv1) (k :: q)), (Abs (a :: gv1) (k :: gv1)), (Abs (a :: gv1) (k :: p)), (Abs (a :: gv1) (a :: q)), (Abs (a :: gv1) (a :: p)), (Abs (a :: gv1) (merge q q)), (Abs (a :: gv1) (merge q gv1))
(Abs (a :: gv1) (merge q p)), (Abs (a :: gv1) (merge gv1 q)), (Abs (a :: gv1) (merge gv1 gv1)), (Abs (a :: gv1) (merge gv1 p)), (Abs (a :: gv1) (merge p q)), (Abs (a :: gv1) (merge p gv1)), (Abs (a :: gv1) (merge p p)), (Abs (a :: gv1) (insert k q)), (Abs (a :: gv1) (insert k gv1)), (Abs (a :: gv1) (insert k p))
(Abs (a :: gv1) (insert a q)), (Abs (a :: gv1) (insert a gv1)), (Abs (a :: gv1) (insert a p)), (Abs (a :: gv1) (maybe_swap q)), (Abs (a :: gv1) (maybe_swap gv1)), (Abs (a :: gv1) (maybe_swap p)), (Abs (a :: gv1) (q ++ q)), (Abs (a :: gv1) (q ++ gv1)), (Abs (a :: gv1) (q ++ p)), (Abs (a :: gv1) (gv1 ++ q))
(Abs (a :: gv1) (gv1 ++ gv1)), (Abs (a :: gv1) (gv1 ++ p)), (Abs (a :: gv1) (p ++ q)), (Abs (a :: gv1) (p ++ gv1)), (Abs (a :: gv1) (p ++ p)), (Abs (a :: gv1) []), (Abs (a :: p) q), (Abs (a :: p) gv1), (Abs (a :: p) p), (Abs (a :: p) (k :: q))
(Abs (a :: p) (k :: gv1)), (Abs (a :: p) (k :: p)), (Abs (a :: p) (a :: q)), (Abs (a :: p) (a :: gv1)), (Abs (a :: p) (merge q q)), (Abs (a :: p) (merge q gv1)), (Abs (a :: p) (merge q p)), (Abs (a :: p) (merge gv1 q)), (Abs (a :: p) (merge gv1 gv1)), (Abs (a :: p) (merge gv1 p))
(Abs (a :: p) (merge p q)), (Abs (a :: p) (merge p gv1)), (Abs (a :: p) (merge p p)), (Abs (a :: p) (insert k q)), (Abs (a :: p) (insert k gv1)), (Abs (a :: p) (insert k p)), (Abs (a :: p) (insert a q)), (Abs (a :: p) (insert a gv1)), (Abs (a :: p) (insert a p)), (Abs (a :: p) (maybe_swap q))
(Abs (a :: p) (maybe_swap gv1)), (Abs (a :: p) (maybe_swap p)), (Abs (a :: p) (q ++ q)), (Abs (a :: p) (q ++ gv1)), (Abs (a :: p) (q ++ p)), (Abs (a :: p) (gv1 ++ q)), (Abs (a :: p) (gv1 ++ gv1)), (Abs (a :: p) (gv1 ++ p)), (Abs (a :: p) (p ++ q)), (Abs (a :: p) (p ++ gv1))
(Abs (a :: p) (p ++ p)), (Abs (a :: p) []), (Abs (merge q q) q), (Abs (merge q q) gv1), (Abs (merge q q) p), (Abs (merge q q) (k :: q)), (Abs (merge q q) (k :: gv1)), (Abs (merge q q) (k :: p)), (Abs (merge q q) (a :: q)), (Abs (merge q q) (a :: gv1))
(Abs (merge q q) (a :: p)), (Abs (merge q q) (merge q gv1)), (Abs (merge q q) (merge q p)), (Abs (merge q q) (merge gv1 q)), (Abs (merge q q) (merge gv1 gv1)), (Abs (merge q q) (merge gv1 p)), (Abs (merge q q) (merge p q)), (Abs (merge q q) (merge p gv1)), (Abs (merge q q) (merge p p)), (Abs (merge q q) (insert k q))
(Abs (merge q q) (insert k gv1)), (Abs (merge q q) (insert k p)), (Abs (merge q q) (insert a q)), (Abs (merge q q) (insert a gv1)), (Abs (merge q q) (insert a p)), (Abs (merge q q) (maybe_swap q)), (Abs (merge q q) (maybe_swap gv1)), (Abs (merge q q) (maybe_swap p)), (Abs (merge q q) (q ++ q)), (Abs (merge q q) (q ++ gv1))
(Abs (merge q q) (q ++ p)), (Abs (merge q q) (gv1 ++ q)), (Abs (merge q q) (gv1 ++ gv1)), (Abs (merge q q) (gv1 ++ p)), (Abs (merge q q) (p ++ q)), (Abs (merge q q) (p ++ gv1)), (Abs (merge q q) (p ++ p)), (Abs (merge q q) []), (Abs (merge q gv1) q), (Abs (merge q gv1) gv1)
(Abs (merge q gv1) p), (Abs (merge q gv1) (k :: q)), (Abs (merge q gv1) (k :: gv1)), (Abs (merge q gv1) (k :: p)), (Abs (merge q gv1) (a :: q)), (Abs (merge q gv1) (a :: gv1)), (Abs (merge q gv1) (a :: p)), (Abs (merge q gv1) (merge q q)), (Abs (merge q gv1) (merge q p)), (Abs (merge q gv1) (merge gv1 q))
(Abs (merge q gv1) (merge gv1 gv1)), (Abs (merge q gv1) (merge gv1 p)), (Abs (merge q gv1) (merge p q)), (Abs (merge q gv1) (merge p gv1)), (Abs (merge q gv1) (merge p p)), (Abs (merge q gv1) (insert k q)), (Abs (merge q gv1) (insert k gv1)), (Abs (merge q gv1) (insert k p)), (Abs (merge q gv1) (insert a q)), (Abs (merge q gv1) (insert a gv1))
(Abs (merge q gv1) (insert a p)), (Abs (merge q gv1) (maybe_swap q)), (Abs (merge q gv1) (maybe_swap gv1)), (Abs (merge q gv1) (maybe_swap p)), (Abs (merge q gv1) (q ++ q)), (Abs (merge q gv1) (q ++ gv1)), (Abs (merge q gv1) (q ++ p)), (Abs (merge q gv1) (gv1 ++ q)), (Abs (merge q gv1) (gv1 ++ gv1)), (Abs (merge q gv1) (gv1 ++ p))
(Abs (merge q gv1) (p ++ q)), (Abs (merge q gv1) (p ++ gv1)), (Abs (merge q gv1) (p ++ p)), (Abs (merge q gv1) []), (Abs (merge q p) q), (Abs (merge q p) gv1), (Abs (merge q p) p), (Abs (merge q p) (k :: q)), (Abs (merge q p) (k :: gv1)), (Abs (merge q p) (k :: p))
(Abs (merge q p) (a :: q)), (Abs (merge q p) (a :: gv1)), (Abs (merge q p) (a :: p)), (Abs (merge q p) (merge q q)), (Abs (merge q p) (merge q gv1)), (Abs (merge q p) (merge gv1 q)), (Abs (merge q p) (merge gv1 gv1)), (Abs (merge q p) (merge gv1 p)), (Abs (merge q p) (merge p q)), (Abs (merge q p) (merge p gv1))
(Abs (merge q p) (merge p p)), (Abs (merge q p) (insert k q)), (Abs (merge q p) (insert k gv1)), (Abs (merge q p) (insert k p)), (Abs (merge q p) (insert a q)), (Abs (merge q p) (insert a gv1)), (Abs (merge q p) (insert a p)), (Abs (merge q p) (maybe_swap q)), (Abs (merge q p) (maybe_swap gv1)), (Abs (merge q p) (maybe_swap p))
(Abs (merge q p) (q ++ q)), (Abs (merge q p) (q ++ gv1)), (Abs (merge q p) (q ++ p)), (Abs (merge q p) (gv1 ++ q)), (Abs (merge q p) (gv1 ++ gv1)), (Abs (merge q p) (gv1 ++ p)), (Abs (merge q p) (p ++ q)), (Abs (merge q p) (p ++ gv1)), (Abs (merge q p) (p ++ p)), (Abs (merge q p) [])
(Abs (merge gv1 q) q), (Abs (merge gv1 q) gv1), (Abs (merge gv1 q) p), (Abs (merge gv1 q) (k :: q)), (Abs (merge gv1 q) (k :: gv1)), (Abs (merge gv1 q) (k :: p)), (Abs (merge gv1 q) (a :: q)), (Abs (merge gv1 q) (a :: gv1)), (Abs (merge gv1 q) (a :: p)), (Abs (merge gv1 q) (merge q q))
(Abs (merge gv1 q) (merge q gv1)), (Abs (merge gv1 q) (merge q p)), (Abs (merge gv1 q) (merge gv1 gv1)), (Abs (merge gv1 q) (merge gv1 p)), (Abs (merge gv1 q) (merge p q)), (Abs (merge gv1 q) (merge p gv1)), (Abs (merge gv1 q) (merge p p)), (Abs (merge gv1 q) (insert k q)), (Abs (merge gv1 q) (insert k gv1)), (Abs (merge gv1 q) (insert k p))
(Abs (merge gv1 q) (insert a q)), (Abs (merge gv1 q) (insert a gv1)), (Abs (merge gv1 q) (insert a p)), (Abs (merge gv1 q) (maybe_swap q)), (Abs (merge gv1 q) (maybe_swap gv1)), (Abs (merge gv1 q) (maybe_swap p)), (Abs (merge gv1 q) (q ++ q)), (Abs (merge gv1 q) (q ++ gv1)), (Abs (merge gv1 q) (q ++ p)), (Abs (merge gv1 q) (gv1 ++ q))
(Abs (merge gv1 q) (gv1 ++ gv1)), (Abs (merge gv1 q) (gv1 ++ p)), (Abs (merge gv1 q) (p ++ q)), (Abs (merge gv1 q) (p ++ gv1)), (Abs (merge gv1 q) (p ++ p)), (Abs (merge gv1 q) []), (Abs (merge gv1 gv1) q), (Abs (merge gv1 gv1) gv1), (Abs (merge gv1 gv1) p), (Abs (merge gv1 gv1) (k :: q))
(Abs (merge gv1 gv1) (k :: gv1)), (Abs (merge gv1 gv1) (k :: p)), (Abs (merge gv1 gv1) (a :: q)), (Abs (merge gv1 gv1) (a :: gv1)), (Abs (merge gv1 gv1) (a :: p)), (Abs (merge gv1 gv1) (merge q q)), (Abs (merge gv1 gv1) (merge q gv1)), (Abs (merge gv1 gv1) (merge q p)), (Abs (merge gv1 gv1) (merge gv1 q)), (Abs (merge gv1 gv1) (merge gv1 p))
(Abs (merge gv1 gv1) (merge p q)), (Abs (merge gv1 gv1) (merge p gv1)), (Abs (merge gv1 gv1) (merge p p)), (Abs (merge gv1 gv1) (insert k q)), (Abs (merge gv1 gv1) (insert k gv1)), (Abs (merge gv1 gv1) (insert k p)), (Abs (merge gv1 gv1) (insert a q)), (Abs (merge gv1 gv1) (insert a gv1)), (Abs (merge gv1 gv1) (insert a p)), (Abs (merge gv1 gv1) (maybe_swap q))
(Abs (merge gv1 gv1) (maybe_swap gv1)), (Abs (merge gv1 gv1) (maybe_swap p)), (Abs (merge gv1 gv1) (q ++ q)), (Abs (merge gv1 gv1) (q ++ gv1)), (Abs (merge gv1 gv1) (q ++ p)), (Abs (merge gv1 gv1) (gv1 ++ q)), (Abs (merge gv1 gv1) (gv1 ++ gv1)), (Abs (merge gv1 gv1) (gv1 ++ p)), (Abs (merge gv1 gv1) (p ++ q)), (Abs (merge gv1 gv1) (p ++ gv1))
(Abs (merge gv1 gv1) (p ++ p)), (Abs (merge gv1 gv1) []), (Abs (merge gv1 p) q), (Abs (merge gv1 p) gv1), (Abs (merge gv1 p) p), (Abs (merge gv1 p) (k :: q)), (Abs (merge gv1 p) (k :: gv1)), (Abs (merge gv1 p) (k :: p)), (Abs (merge gv1 p) (a :: q)), (Abs (merge gv1 p) (a :: gv1))
(Abs (merge gv1 p) (a :: p)), (Abs (merge gv1 p) (merge q q)), (Abs (merge gv1 p) (merge q gv1)), (Abs (merge gv1 p) (merge q p)), (Abs (merge gv1 p) (merge gv1 q)), (Abs (merge gv1 p) (merge gv1 gv1)), (Abs (merge gv1 p) (merge p q)), (Abs (merge gv1 p) (merge p gv1)), (Abs (merge gv1 p) (merge p p)), (Abs (merge gv1 p) (insert k q))
(Abs (merge gv1 p) (insert k gv1)), (Abs (merge gv1 p) (insert k p)), (Abs (merge gv1 p) (insert a q)), (Abs (merge gv1 p) (insert a gv1)), (Abs (merge gv1 p) (insert a p)), (Abs (merge gv1 p) (maybe_swap q)), (Abs (merge gv1 p) (maybe_swap gv1)), (Abs (merge gv1 p) (maybe_swap p)), (Abs (merge gv1 p) (q ++ q)), (Abs (merge gv1 p) (q ++ gv1))
(Abs (merge gv1 p) (q ++ p)), (Abs (merge gv1 p) (gv1 ++ q)), (Abs (merge gv1 p) (gv1 ++ gv1)), (Abs (merge gv1 p) (gv1 ++ p)), (Abs (merge gv1 p) (p ++ q)), (Abs (merge gv1 p) (p ++ gv1)), (Abs (merge gv1 p) (p ++ p)), (Abs (merge gv1 p) []), (Abs (merge p q) q), (Abs (merge p q) gv1)
(Abs (merge p q) p), (Abs (merge p q) (k :: q)), (Abs (merge p q) (k :: gv1)), (Abs (merge p q) (k :: p)), (Abs (merge p q) (a :: q)), (Abs (merge p q) (a :: gv1)), (Abs (merge p q) (a :: p)), (Abs (merge p q) (merge q q)), (Abs (merge p q) (merge q gv1)), (Abs (merge p q) (merge q p))
(Abs (merge p q) (merge gv1 q)), (Abs (merge p q) (merge gv1 gv1)), (Abs (merge p q) (merge gv1 p)), (Abs (merge p q) (merge p gv1)), (Abs (merge p q) (merge p p)), (Abs (merge p q) (insert k q)), (Abs (merge p q) (insert k gv1)), (Abs (merge p q) (insert k p)), (Abs (merge p q) (insert a q)), (Abs (merge p q) (insert a gv1))
(Abs (merge p q) (insert a p)), (Abs (merge p q) (maybe_swap q)), (Abs (merge p q) (maybe_swap gv1)), (Abs (merge p q) (maybe_swap p)), (Abs (merge p q) (q ++ q)), (Abs (merge p q) (q ++ gv1)), (Abs (merge p q) (q ++ p)), (Abs (merge p q) (gv1 ++ q)), (Abs (merge p q) (gv1 ++ gv1)), (Abs (merge p q) (gv1 ++ p))
(Abs (merge p q) (p ++ q)), (Abs (merge p q) (p ++ gv1)), (Abs (merge p q) (p ++ p)), (Abs (merge p q) []), (Abs (merge p gv1) q), (Abs (merge p gv1) gv1), (Abs (merge p gv1) p), (Abs (merge p gv1) (k :: q)), (Abs (merge p gv1) (k :: gv1)), (Abs (merge p gv1) (k :: p))
(Abs (merge p gv1) (a :: q)), (Abs (merge p gv1) (a :: gv1)), (Abs (merge p gv1) (a :: p)), (Abs (merge p gv1) (merge q q)), (Abs (merge p gv1) (merge q gv1)), (Abs (merge p gv1) (merge q p)), (Abs (merge p gv1) (merge gv1 q)), (Abs (merge p gv1) (merge gv1 gv1)), (Abs (merge p gv1) (merge gv1 p)), (Abs (merge p gv1) (merge p q))
(Abs (merge p gv1) (merge p p)), (Abs (merge p gv1) (insert k q)), (Abs (merge p gv1) (insert k gv1)), (Abs (merge p gv1) (insert k p)), (Abs (merge p gv1) (insert a q)), (Abs (merge p gv1) (insert a gv1)), (Abs (merge p gv1) (insert a p)), (Abs (merge p gv1) (maybe_swap q)), (Abs (merge p gv1) (maybe_swap gv1)), (Abs (merge p gv1) (maybe_swap p))
(Abs (merge p gv1) (q ++ q)), (Abs (merge p gv1) (q ++ gv1)), (Abs (merge p gv1) (q ++ p)), (Abs (merge p gv1) (gv1 ++ q)), (Abs (merge p gv1) (gv1 ++ gv1)), (Abs (merge p gv1) (gv1 ++ p)), (Abs (merge p gv1) (p ++ q)), (Abs (merge p gv1) (p ++ gv1)), (Abs (merge p gv1) (p ++ p)), (Abs (merge p gv1) [])
(Abs (merge p p) q), (Abs (merge p p) gv1), (Abs (merge p p) p), (Abs (merge p p) (k :: q)), (Abs (merge p p) (k :: gv1)), (Abs (merge p p) (k :: p)), (Abs (merge p p) (a :: q)), (Abs (merge p p) (a :: gv1)), (Abs (merge p p) (a :: p)), (Abs (merge p p) (merge q q))
(Abs (merge p p) (merge q gv1)), (Abs (merge p p) (merge q p)), (Abs (merge p p) (merge gv1 q)), (Abs (merge p p) (merge gv1 gv1)), (Abs (merge p p) (merge gv1 p)), (Abs (merge p p) (merge p q)), (Abs (merge p p) (merge p gv1)), (Abs (merge p p) (insert k q)), (Abs (merge p p) (insert k gv1)), (Abs (merge p p) (insert k p))
(Abs (merge p p) (insert a q)), (Abs (merge p p) (insert a gv1)), (Abs (merge p p) (insert a p)), (Abs (merge p p) (maybe_swap q)), (Abs (merge p p) (maybe_swap gv1)), (Abs (merge p p) (maybe_swap p)), (Abs (merge p p) (q ++ q)), (Abs (merge p p) (q ++ gv1)), (Abs (merge p p) (q ++ p)), (Abs (merge p p) (gv1 ++ q))
(Abs (merge p p) (gv1 ++ gv1)), (Abs (merge p p) (gv1 ++ p)), (Abs (merge p p) (p ++ q)), (Abs (merge p p) (p ++ gv1)), (Abs (merge p p) (p ++ p)), (Abs (merge p p) []), (Abs (insert k q) q), (Abs (insert k q) gv1), (Abs (insert k q) p), (Abs (insert k q) (k :: q))
(Abs (insert k q) (k :: gv1)), (Abs (insert k q) (k :: p)), (Abs (insert k q) (a :: q)), (Abs (insert k q) (a :: gv1)), (Abs (insert k q) (a :: p)), (Abs (insert k q) (merge q q)), (Abs (insert k q) (merge q gv1)), (Abs (insert k q) (merge q p)), (Abs (insert k q) (merge gv1 q)), (Abs (insert k q) (merge gv1 gv1))
(Abs (insert k q) (merge gv1 p)), (Abs (insert k q) (merge p q)), (Abs (insert k q) (merge p gv1)), (Abs (insert k q) (merge p p)), (Abs (insert k q) (insert k gv1)), (Abs (insert k q) (insert k p)), (Abs (insert k q) (insert a q)), (Abs (insert k q) (insert a gv1)), (Abs (insert k q) (insert a p)), (Abs (insert k q) (maybe_swap q))
(Abs (insert k q) (maybe_swap gv1)), (Abs (insert k q) (maybe_swap p)), (Abs (insert k q) (q ++ q)), (Abs (insert k q) (q ++ gv1)), (Abs (insert k q) (q ++ p)), (Abs (insert k q) (gv1 ++ q)), (Abs (insert k q) (gv1 ++ gv1)), (Abs (insert k q) (gv1 ++ p)), (Abs (insert k q) (p ++ q)), (Abs (insert k q) (p ++ gv1))
(Abs (insert k q) (p ++ p)), (Abs (insert k q) []), (Abs (insert k gv1) q), (Abs (insert k gv1) gv1), (Abs (insert k gv1) p), (Abs (insert k gv1) (k :: q)), (Abs (insert k gv1) (k :: gv1)), (Abs (insert k gv1) (k :: p)), (Abs (insert k gv1) (a :: q)), (Abs (insert k gv1) (a :: gv1))
(Abs (insert k gv1) (a :: p)), (Abs (insert k gv1) (merge q q)), (Abs (insert k gv1) (merge q gv1)), (Abs (insert k gv1) (merge q p)), (Abs (insert k gv1) (merge gv1 q)), (Abs (insert k gv1) (merge gv1 gv1)), (Abs (insert k gv1) (merge gv1 p)), (Abs (insert k gv1) (merge p q)), (Abs (insert k gv1) (merge p gv1)), (Abs (insert k gv1) (merge p p))
(Abs (insert k gv1) (insert k q)), (Abs (insert k gv1) (insert k p)), (Abs (insert k gv1) (insert a q)), (Abs (insert k gv1) (insert a gv1)), (Abs (insert k gv1) (insert a p)), (Abs (insert k gv1) (maybe_swap q)), (Abs (insert k gv1) (maybe_swap gv1)), (Abs (insert k gv1) (maybe_swap p)), (Abs (insert k gv1) (q ++ q)), (Abs (insert k gv1) (q ++ gv1))
(Abs (insert k gv1) (q ++ p)), (Abs (insert k gv1) (gv1 ++ q)), (Abs (insert k gv1) (gv1 ++ gv1)), (Abs (insert k gv1) (gv1 ++ p)), (Abs (insert k gv1) (p ++ q)), (Abs (insert k gv1) (p ++ gv1)), (Abs (insert k gv1) (p ++ p)), (Abs (insert k gv1) []), (Abs (insert k p) q), (Abs (insert k p) gv1)
(Abs (insert k p) p), (Abs (insert k p) (k :: q)), (Abs (insert k p) (k :: gv1)), (Abs (insert k p) (k :: p)), (Abs (insert k p) (a :: q)), (Abs (insert k p) (a :: gv1)), (Abs (insert k p) (a :: p)), (Abs (insert k p) (merge q q)), (Abs (insert k p) (merge q gv1)), (Abs (insert k p) (merge q p))
(Abs (insert k p) (merge gv1 q)), (Abs (insert k p) (merge gv1 gv1)), (Abs (insert k p) (merge gv1 p)), (Abs (insert k p) (merge p q)), (Abs (insert k p) (merge p gv1)), (Abs (insert k p) (merge p p)), (Abs (insert k p) (insert k q)), (Abs (insert k p) (insert k gv1)), (Abs (insert k p) (insert a q)), (Abs (insert k p) (insert a gv1))
(Abs (insert k p) (insert a p)), (Abs (insert k p) (maybe_swap q)), (Abs (insert k p) (maybe_swap gv1)), (Abs (insert k p) (maybe_swap p)), (Abs (insert k p) (q ++ q)), (Abs (insert k p) (q ++ gv1)), (Abs (insert k p) (q ++ p)), (Abs (insert k p) (gv1 ++ q)), (Abs (insert k p) (gv1 ++ gv1)), (Abs (insert k p) (gv1 ++ p))
(Abs (insert k p) (p ++ q)), (Abs (insert k p) (p ++ gv1)), (Abs (insert k p) (p ++ p)), (Abs (insert k p) []), (Abs (insert a q) q), (Abs (insert a q) gv1), (Abs (insert a q) p), (Abs (insert a q) (k :: q)), (Abs (insert a q) (k :: gv1)), (Abs (insert a q) (k :: p))
(Abs (insert a q) (a :: q)), (Abs (insert a q) (a :: gv1)), (Abs (insert a q) (a :: p)), (Abs (insert a q) (merge q q)), (Abs (insert a q) (merge q gv1)), (Abs (insert a q) (merge q p)), (Abs (insert a q) (merge gv1 q)), (Abs (insert a q) (merge gv1 gv1)), (Abs (insert a q) (merge gv1 p)), (Abs (insert a q) (merge p q))
(Abs (insert a q) (merge p gv1)), (Abs (insert a q) (merge p p)), (Abs (insert a q) (insert k q)), (Abs (insert a q) (insert k gv1)), (Abs (insert a q) (insert k p)), (Abs (insert a q) (insert a gv1)), (Abs (insert a q) (insert a p)), (Abs (insert a q) (maybe_swap q)), (Abs (insert a q) (maybe_swap gv1)), (Abs (insert a q) (maybe_swap p))
(Abs (insert a q) (q ++ q)), (Abs (insert a q) (q ++ gv1)), (Abs (insert a q) (q ++ p)), (Abs (insert a q) (gv1 ++ q)), (Abs (insert a q) (gv1 ++ gv1)), (Abs (insert a q) (gv1 ++ p)), (Abs (insert a q) (p ++ q)), (Abs (insert a q) (p ++ gv1)), (Abs (insert a q) (p ++ p)), (Abs (insert a q) [])
(Abs (insert a gv1) q), (Abs (insert a gv1) gv1), (Abs (insert a gv1) p), (Abs (insert a gv1) (k :: q)), (Abs (insert a gv1) (k :: gv1)), (Abs (insert a gv1) (k :: p)), (Abs (insert a gv1) (a :: q)), (Abs (insert a gv1) (a :: gv1)), (Abs (insert a gv1) (a :: p)), (Abs (insert a gv1) (merge q q))
(Abs (insert a gv1) (merge q gv1)), (Abs (insert a gv1) (merge q p)), (Abs (insert a gv1) (merge gv1 q)), (Abs (insert a gv1) (merge gv1 gv1)), (Abs (insert a gv1) (merge gv1 p)), (Abs (insert a gv1) (merge p q)), (Abs (insert a gv1) (merge p gv1)), (Abs (insert a gv1) (merge p p)), (Abs (insert a gv1) (insert k q)), (Abs (insert a gv1) (insert k gv1))
(Abs (insert a gv1) (insert k p)), (Abs (insert a gv1) (insert a q)), (Abs (insert a gv1) (insert a p)), (Abs (insert a gv1) (maybe_swap q)), (Abs (insert a gv1) (maybe_swap gv1)), (Abs (insert a gv1) (maybe_swap p)), (Abs (insert a gv1) (q ++ q)), (Abs (insert a gv1) (q ++ gv1)), (Abs (insert a gv1) (q ++ p)), (Abs (insert a gv1) (gv1 ++ q))
(Abs (insert a gv1) (gv1 ++ gv1)), (Abs (insert a gv1) (gv1 ++ p)), (Abs (insert a gv1) (p ++ q)), (Abs (insert a gv1) (p ++ gv1)), (Abs (insert a gv1) (p ++ p)), (Abs (insert a gv1) []), (Abs (insert a p) q), (Abs (insert a p) gv1), (Abs (insert a p) p), (Abs (insert a p) (k :: q))
(Abs (insert a p) (k :: gv1)), (Abs (insert a p) (k :: p)), (Abs (insert a p) (a :: q)), (Abs (insert a p) (a :: gv1)), (Abs (insert a p) (a :: p)), (Abs (insert a p) (merge q q)), (Abs (insert a p) (merge q gv1)), (Abs (insert a p) (merge q p)), (Abs (insert a p) (merge gv1 q)), (Abs (insert a p) (merge gv1 gv1))
(Abs (insert a p) (merge gv1 p)), (Abs (insert a p) (merge p q)), (Abs (insert a p) (merge p gv1)), (Abs (insert a p) (merge p p)), (Abs (insert a p) (insert k q)), (Abs (insert a p) (insert k gv1)), (Abs (insert a p) (insert k p)), (Abs (insert a p) (insert a q)), (Abs (insert a p) (insert a gv1)), (Abs (insert a p) (maybe_swap q))
(Abs (insert a p) (maybe_swap gv1)), (Abs (insert a p) (maybe_swap p)), (Abs (insert a p) (q ++ q)), (Abs (insert a p) (q ++ gv1)), (Abs (insert a p) (q ++ p)), (Abs (insert a p) (gv1 ++ q)), (Abs (insert a p) (gv1 ++ gv1)), (Abs (insert a p) (gv1 ++ p)), (Abs (insert a p) (p ++ q)), (Abs (insert a p) (p ++ gv1))
(Abs (insert a p) (p ++ p)), (Abs (insert a p) []), (Abs (maybe_swap q) q), (Abs (maybe_swap q) gv1), (Abs (maybe_swap q) p), (Abs (maybe_swap q) (k :: q)), (Abs (maybe_swap q) (k :: gv1)), (Abs (maybe_swap q) (k :: p)), (Abs (maybe_swap q) (a :: q)), (Abs (maybe_swap q) (a :: gv1))
(Abs (maybe_swap q) (a :: p)), (Abs (maybe_swap q) (merge q q)), (Abs (maybe_swap q) (merge q gv1)), (Abs (maybe_swap q) (merge q p)), (Abs (maybe_swap q) (merge gv1 q)), (Abs (maybe_swap q) (merge gv1 gv1)), (Abs (maybe_swap q) (merge gv1 p)), (Abs (maybe_swap q) (merge p q)), (Abs (maybe_swap q) (merge p gv1)), (Abs (maybe_swap q) (merge p p))
(Abs (maybe_swap q) (insert k q)), (Abs (maybe_swap q) (insert k gv1)), (Abs (maybe_swap q) (insert k p)), (Abs (maybe_swap q) (insert a q)), (Abs (maybe_swap q) (insert a gv1)), (Abs (maybe_swap q) (insert a p)), (Abs (maybe_swap q) (maybe_swap gv1)), (Abs (maybe_swap q) (maybe_swap p)), (Abs (maybe_swap q) (q ++ q)), (Abs (maybe_swap q) (q ++ gv1))
(Abs (maybe_swap q) (q ++ p)), (Abs (maybe_swap q) (gv1 ++ q)), (Abs (maybe_swap q) (gv1 ++ gv1)), (Abs (maybe_swap q) (gv1 ++ p)), (Abs (maybe_swap q) (p ++ q)), (Abs (maybe_swap q) (p ++ gv1)), (Abs (maybe_swap q) (p ++ p)), (Abs (maybe_swap q) []), (Abs (maybe_swap gv1) q), (Abs (maybe_swap gv1) gv1)
(Abs (maybe_swap gv1) p), (Abs (maybe_swap gv1) (k :: q)), (Abs (maybe_swap gv1) (k :: gv1)), (Abs (maybe_swap gv1) (k :: p)), (Abs (maybe_swap gv1) (a :: q)), (Abs (maybe_swap gv1) (a :: gv1)), (Abs (maybe_swap gv1) (a :: p)), (Abs (maybe_swap gv1) (merge q q)), (Abs (maybe_swap gv1) (merge q gv1)), (Abs (maybe_swap gv1) (merge q p))
(Abs (maybe_swap gv1) (merge gv1 q)), (Abs (maybe_swap gv1) (merge gv1 gv1)), (Abs (maybe_swap gv1) (merge gv1 p)), (Abs (maybe_swap gv1) (merge p q)), (Abs (maybe_swap gv1) (merge p gv1)), (Abs (maybe_swap gv1) (merge p p)), (Abs (maybe_swap gv1) (insert k q)), (Abs (maybe_swap gv1) (insert k gv1)), (Abs (maybe_swap gv1) (insert k p)), (Abs (maybe_swap gv1) (insert a q))
(Abs (maybe_swap gv1) (insert a gv1)), (Abs (maybe_swap gv1) (insert a p)), (Abs (maybe_swap gv1) (maybe_swap q)), (Abs (maybe_swap gv1) (maybe_swap p)), (Abs (maybe_swap gv1) (q ++ q)), (Abs (maybe_swap gv1) (q ++ gv1)), (Abs (maybe_swap gv1) (q ++ p)), (Abs (maybe_swap gv1) (gv1 ++ q)), (Abs (maybe_swap gv1) (gv1 ++ gv1)), (Abs (maybe_swap gv1) (gv1 ++ p))
(Abs (maybe_swap gv1) (p ++ q)), (Abs (maybe_swap gv1) (p ++ gv1)), (Abs (maybe_swap gv1) (p ++ p)), (Abs (maybe_swap gv1) []), (Abs (maybe_swap p) q), (Abs (maybe_swap p) gv1), (Abs (maybe_swap p) p), (Abs (maybe_swap p) (k :: q)), (Abs (maybe_swap p) (k :: gv1)), (Abs (maybe_swap p) (k :: p))
(Abs (maybe_swap p) (a :: q)), (Abs (maybe_swap p) (a :: gv1)), (Abs (maybe_swap p) (a :: p)), (Abs (maybe_swap p) (merge q q)), (Abs (maybe_swap p) (merge q gv1)), (Abs (maybe_swap p) (merge q p)), (Abs (maybe_swap p) (merge gv1 q)), (Abs (maybe_swap p) (merge gv1 gv1)), (Abs (maybe_swap p) (merge gv1 p)), (Abs (maybe_swap p) (merge p q))
(Abs (maybe_swap p) (merge p gv1)), (Abs (maybe_swap p) (merge p p)), (Abs (maybe_swap p) (insert k q)), (Abs (maybe_swap p) (insert k gv1)), (Abs (maybe_swap p) (insert k p)), (Abs (maybe_swap p) (insert a q)), (Abs (maybe_swap p) (insert a gv1)), (Abs (maybe_swap p) (insert a p)), (Abs (maybe_swap p) (maybe_swap q)), (Abs (maybe_swap p) (maybe_swap gv1))
(Abs (maybe_swap p) (q ++ q)), (Abs (maybe_swap p) (q ++ gv1)), (Abs (maybe_swap p) (q ++ p)), (Abs (maybe_swap p) (gv1 ++ q)), (Abs (maybe_swap p) (gv1 ++ gv1)), (Abs (maybe_swap p) (gv1 ++ p)), (Abs (maybe_swap p) (p ++ q)), (Abs (maybe_swap p) (p ++ gv1)), (Abs (maybe_swap p) (p ++ p)), (Abs (maybe_swap p) [])
(Abs (q ++ q) q), (Abs (q ++ q) gv1), (Abs (q ++ q) p), (Abs (q ++ q) (k :: q)), (Abs (q ++ q) (k :: gv1)), (Abs (q ++ q) (k :: p)), (Abs (q ++ q) (a :: q)), (Abs (q ++ q) (a :: gv1)), (Abs (q ++ q) (a :: p)), (Abs (q ++ q) (merge q q))
(Abs (q ++ q) (merge q gv1)), (Abs (q ++ q) (merge q p)), (Abs (q ++ q) (merge gv1 q)), (Abs (q ++ q) (merge gv1 gv1)), (Abs (q ++ q) (merge gv1 p)), (Abs (q ++ q) (merge p q)), (Abs (q ++ q) (merge p gv1)), (Abs (q ++ q) (merge p p)), (Abs (q ++ q) (insert k q)), (Abs (q ++ q) (insert k gv1))
(Abs (q ++ q) (insert k p)), (Abs (q ++ q) (insert a q)), (Abs (q ++ q) (insert a gv1)), (Abs (q ++ q) (insert a p)), (Abs (q ++ q) (maybe_swap q)), (Abs (q ++ q) (maybe_swap gv1)), (Abs (q ++ q) (maybe_swap p)), (Abs (q ++ q) (q ++ gv1)), (Abs (q ++ q) (q ++ p)), (Abs (q ++ q) (gv1 ++ q))
(Abs (q ++ q) (gv1 ++ gv1)), (Abs (q ++ q) (gv1 ++ p)), (Abs (q ++ q) (p ++ q)), (Abs (q ++ q) (p ++ gv1)), (Abs (q ++ q) (p ++ p)), (Abs (q ++ q) []), (Abs (q ++ gv1) q), (Abs (q ++ gv1) gv1), (Abs (q ++ gv1) p), (Abs (q ++ gv1) (k :: q))
(Abs (q ++ gv1) (k :: gv1)), (Abs (q ++ gv1) (k :: p)), (Abs (q ++ gv1) (a :: q)), (Abs (q ++ gv1) (a :: gv1)), (Abs (q ++ gv1) (a :: p)), (Abs (q ++ gv1) (merge q q)), (Abs (q ++ gv1) (merge q gv1)), (Abs (q ++ gv1) (merge q p)), (Abs (q ++ gv1) (merge gv1 q)), (Abs (q ++ gv1) (merge gv1 gv1))
(Abs (q ++ gv1) (merge gv1 p)), (Abs (q ++ gv1) (merge p q)), (Abs (q ++ gv1) (merge p gv1)), (Abs (q ++ gv1) (merge p p)), (Abs (q ++ gv1) (insert k q)), (Abs (q ++ gv1) (insert k gv1)), (Abs (q ++ gv1) (insert k p)), (Abs (q ++ gv1) (insert a q)), (Abs (q ++ gv1) (insert a gv1)), (Abs (q ++ gv1) (insert a p))
(Abs (q ++ gv1) (maybe_swap q)), (Abs (q ++ gv1) (maybe_swap gv1)), (Abs (q ++ gv1) (maybe_swap p)), (Abs (q ++ gv1) (q ++ q)), (Abs (q ++ gv1) (q ++ p)), (Abs (q ++ gv1) (gv1 ++ q)), (Abs (q ++ gv1) (gv1 ++ gv1)), (Abs (q ++ gv1) (gv1 ++ p)), (Abs (q ++ gv1) (p ++ q)), (Abs (q ++ gv1) (p ++ gv1))
(Abs (q ++ gv1) (p ++ p)), (Abs (q ++ gv1) []), (Abs (q ++ p) q), (Abs (q ++ p) gv1), (Abs (q ++ p) p), (Abs (q ++ p) (k :: q)), (Abs (q ++ p) (k :: gv1)), (Abs (q ++ p) (k :: p)), (Abs (q ++ p) (a :: q)), (Abs (q ++ p) (a :: gv1))
(Abs (q ++ p) (a :: p)), (Abs (q ++ p) (merge q q)), (Abs (q ++ p) (merge q gv1)), (Abs (q ++ p) (merge q p)), (Abs (q ++ p) (merge gv1 q)), (Abs (q ++ p) (merge gv1 gv1)), (Abs (q ++ p) (merge gv1 p)), (Abs (q ++ p) (merge p q)), (Abs (q ++ p) (merge p gv1)), (Abs (q ++ p) (merge p p))
(Abs (q ++ p) (insert k q)), (Abs (q ++ p) (insert k gv1)), (Abs (q ++ p) (insert k p)), (Abs (q ++ p) (insert a q)), (Abs (q ++ p) (insert a gv1)), (Abs (q ++ p) (insert a p)), (Abs (q ++ p) (maybe_swap q)), (Abs (q ++ p) (maybe_swap gv1)), (Abs (q ++ p) (maybe_swap p)), (Abs (q ++ p) (q ++ q))
(Abs (q ++ p) (q ++ gv1)), (Abs (q ++ p) (gv1 ++ q)), (Abs (q ++ p) (gv1 ++ gv1)), (Abs (q ++ p) (gv1 ++ p)), (Abs (q ++ p) (p ++ q)), (Abs (q ++ p) (p ++ gv1)), (Abs (q ++ p) (p ++ p)), (Abs (q ++ p) []), (Abs (gv1 ++ q) q), (Abs (gv1 ++ q) gv1)
(Abs (gv1 ++ q) p), (Abs (gv1 ++ q) (k :: q)), (Abs (gv1 ++ q) (k :: gv1)), (Abs (gv1 ++ q) (k :: p)), (Abs (gv1 ++ q) (a :: q)), (Abs (gv1 ++ q) (a :: gv1)), (Abs (gv1 ++ q) (a :: p)), (Abs (gv1 ++ q) (merge q q)), (Abs (gv1 ++ q) (merge q gv1)), (Abs (gv1 ++ q) (merge q p))
(Abs (gv1 ++ q) (merge gv1 q)), (Abs (gv1 ++ q) (merge gv1 gv1)), (Abs (gv1 ++ q) (merge gv1 p)), (Abs (gv1 ++ q) (merge p q)), (Abs (gv1 ++ q) (merge p gv1)), (Abs (gv1 ++ q) (merge p p)), (Abs (gv1 ++ q) (insert k q)), (Abs (gv1 ++ q) (insert k gv1)), (Abs (gv1 ++ q) (insert k p)), (Abs (gv1 ++ q) (insert a q))
(Abs (gv1 ++ q) (insert a gv1)), (Abs (gv1 ++ q) (insert a p)), (Abs (gv1 ++ q) (maybe_swap q)), (Abs (gv1 ++ q) (maybe_swap gv1)), (Abs (gv1 ++ q) (maybe_swap p)), (Abs (gv1 ++ q) (q ++ q)), (Abs (gv1 ++ q) (q ++ gv1)), (Abs (gv1 ++ q) (q ++ p)), (Abs (gv1 ++ q) (gv1 ++ gv1)), (Abs (gv1 ++ q) (gv1 ++ p))
(Abs (gv1 ++ q) (p ++ q)), (Abs (gv1 ++ q) (p ++ gv1)), (Abs (gv1 ++ q) (p ++ p)), (Abs (gv1 ++ q) []), (Abs (gv1 ++ gv1) q), (Abs (gv1 ++ gv1) gv1), (Abs (gv1 ++ gv1) p), (Abs (gv1 ++ gv1) (k :: q)), (Abs (gv1 ++ gv1) (k :: gv1)), (Abs (gv1 ++ gv1) (k :: p))
(Abs (gv1 ++ gv1) (a :: q)), (Abs (gv1 ++ gv1) (a :: gv1)), (Abs (gv1 ++ gv1) (a :: p)), (Abs (gv1 ++ gv1) (merge q q)), (Abs (gv1 ++ gv1) (merge q gv1)), (Abs (gv1 ++ gv1) (merge q p)), (Abs (gv1 ++ gv1) (merge gv1 q)), (Abs (gv1 ++ gv1) (merge gv1 gv1)), (Abs (gv1 ++ gv1) (merge gv1 p)), (Abs (gv1 ++ gv1) (merge p q))
(Abs (gv1 ++ gv1) (merge p gv1)), (Abs (gv1 ++ gv1) (merge p p)), (Abs (gv1 ++ gv1) (insert k q)), (Abs (gv1 ++ gv1) (insert k gv1)), (Abs (gv1 ++ gv1) (insert k p)), (Abs (gv1 ++ gv1) (insert a q)), (Abs (gv1 ++ gv1) (insert a gv1)), (Abs (gv1 ++ gv1) (insert a p)), (Abs (gv1 ++ gv1) (maybe_swap q)), (Abs (gv1 ++ gv1) (maybe_swap gv1))
(Abs (gv1 ++ gv1) (maybe_swap p)), (Abs (gv1 ++ gv1) (q ++ q)), (Abs (gv1 ++ gv1) (q ++ gv1)), (Abs (gv1 ++ gv1) (q ++ p)), (Abs (gv1 ++ gv1) (gv1 ++ q)), (Abs (gv1 ++ gv1) (gv1 ++ p)), (Abs (gv1 ++ gv1) (p ++ q)), (Abs (gv1 ++ gv1) (p ++ gv1)), (Abs (gv1 ++ gv1) (p ++ p)), (Abs (gv1 ++ gv1) [])
(Abs (gv1 ++ p) q), (Abs (gv1 ++ p) gv1), (Abs (gv1 ++ p) p), (Abs (gv1 ++ p) (k :: q)), (Abs (gv1 ++ p) (k :: gv1)), (Abs (gv1 ++ p) (k :: p)), (Abs (gv1 ++ p) (a :: q)), (Abs (gv1 ++ p) (a :: gv1)), (Abs (gv1 ++ p) (a :: p)), (Abs (gv1 ++ p) (merge q q))
(Abs (gv1 ++ p) (merge q gv1)), (Abs (gv1 ++ p) (merge q p)), (Abs (gv1 ++ p) (merge gv1 q)), (Abs (gv1 ++ p) (merge gv1 gv1)), (Abs (gv1 ++ p) (merge gv1 p)), (Abs (gv1 ++ p) (merge p q)), (Abs (gv1 ++ p) (merge p gv1)), (Abs (gv1 ++ p) (merge p p)), (Abs (gv1 ++ p) (insert k q)), (Abs (gv1 ++ p) (insert k gv1))
(Abs (gv1 ++ p) (insert k p)), (Abs (gv1 ++ p) (insert a q)), (Abs (gv1 ++ p) (insert a gv1)), (Abs (gv1 ++ p) (insert a p)), (Abs (gv1 ++ p) (maybe_swap q)), (Abs (gv1 ++ p) (maybe_swap gv1)), (Abs (gv1 ++ p) (maybe_swap p)), (Abs (gv1 ++ p) (q ++ q)), (Abs (gv1 ++ p) (q ++ gv1)), (Abs (gv1 ++ p) (q ++ p))
(Abs (gv1 ++ p) (gv1 ++ q)), (Abs (gv1 ++ p) (gv1 ++ gv1)), (Abs (gv1 ++ p) (p ++ q)), (Abs (gv1 ++ p) (p ++ gv1)), (Abs (gv1 ++ p) (p ++ p)), (Abs (gv1 ++ p) []), (Abs (p ++ q) q), (Abs (p ++ q) gv1), (Abs (p ++ q) p), (Abs (p ++ q) (k :: q))
(Abs (p ++ q) (k :: gv1)), (Abs (p ++ q) (k :: p)), (Abs (p ++ q) (a :: q)), (Abs (p ++ q) (a :: gv1)), (Abs (p ++ q) (a :: p)), (Abs (p ++ q) (merge q q)), (Abs (p ++ q) (merge q gv1)), (Abs (p ++ q) (merge q p)), (Abs (p ++ q) (merge gv1 q)), (Abs (p ++ q) (merge gv1 gv1))
(Abs (p ++ q) (merge gv1 p)), (Abs (p ++ q) (merge p q)), (Abs (p ++ q) (merge p gv1)), (Abs (p ++ q) (merge p p)), (Abs (p ++ q) (insert k q)), (Abs (p ++ q) (insert k gv1)), (Abs (p ++ q) (insert k p)), (Abs (p ++ q) (insert a q)), (Abs (p ++ q) (insert a gv1)), (Abs (p ++ q) (insert a p))
(Abs (p ++ q) (maybe_swap q)), (Abs (p ++ q) (maybe_swap gv1)), (Abs (p ++ q) (maybe_swap p)), (Abs (p ++ q) (q ++ q)), (Abs (p ++ q) (q ++ gv1)), (Abs (p ++ q) (q ++ p)), (Abs (p ++ q) (gv1 ++ q)), (Abs (p ++ q) (gv1 ++ gv1)), (Abs (p ++ q) (gv1 ++ p)), (Abs (p ++ q) (p ++ gv1))
(Abs (p ++ q) (p ++ p)), (Abs (p ++ q) []), (Abs (p ++ gv1) q), (Abs (p ++ gv1) gv1), (Abs (p ++ gv1) p), (Abs (p ++ gv1) (k :: q)), (Abs (p ++ gv1) (k :: gv1)), (Abs (p ++ gv1) (k :: p)), (Abs (p ++ gv1) (a :: q)), (Abs (p ++ gv1) (a :: gv1))
(Abs (p ++ gv1) (a :: p)), (Abs (p ++ gv1) (merge q q)), (Abs (p ++ gv1) (merge q gv1)), (Abs (p ++ gv1) (merge q p)), (Abs (p ++ gv1) (merge gv1 q)), (Abs (p ++ gv1) (merge gv1 gv1)), (Abs (p ++ gv1) (merge gv1 p)), (Abs (p ++ gv1) (merge p q)), (Abs (p ++ gv1) (merge p gv1)), (Abs (p ++ gv1) (merge p p))
(Abs (p ++ gv1) (insert k q)), (Abs (p ++ gv1) (insert k gv1)), (Abs (p ++ gv1) (insert k p)), (Abs (p ++ gv1) (insert a q)), (Abs (p ++ gv1) (insert a gv1)), (Abs (p ++ gv1) (insert a p)), (Abs (p ++ gv1) (maybe_swap q)), (Abs (p ++ gv1) (maybe_swap gv1)), (Abs (p ++ gv1) (maybe_swap p)), (Abs (p ++ gv1) (q ++ q))
(Abs (p ++ gv1) (q ++ gv1)), (Abs (p ++ gv1) (q ++ p)), (Abs (p ++ gv1) (gv1 ++ q)), (Abs (p ++ gv1) (gv1 ++ gv1)), (Abs (p ++ gv1) (gv1 ++ p)), (Abs (p ++ gv1) (p ++ q)), (Abs (p ++ gv1) (p ++ p)), (Abs (p ++ gv1) []), (Abs (p ++ p) q), (Abs (p ++ p) gv1)
(Abs (p ++ p) p), (Abs (p ++ p) (k :: q)), (Abs (p ++ p) (k :: gv1)), (Abs (p ++ p) (k :: p)), (Abs (p ++ p) (a :: q)), (Abs (p ++ p) (a :: gv1)), (Abs (p ++ p) (a :: p)), (Abs (p ++ p) (merge q q)), (Abs (p ++ p) (merge q gv1)), (Abs (p ++ p) (merge q p))
(Abs (p ++ p) (merge gv1 q)), (Abs (p ++ p) (merge gv1 gv1)), (Abs (p ++ p) (merge gv1 p)), (Abs (p ++ p) (merge p q)), (Abs (p ++ p) (merge p gv1)), (Abs (p ++ p) (merge p p)), (Abs (p ++ p) (insert k q)), (Abs (p ++ p) (insert k gv1)), (Abs (p ++ p) (insert k p)), (Abs (p ++ p) (insert a q))
(Abs (p ++ p) (insert a gv1)), (Abs (p ++ p) (insert a p)), (Abs (p ++ p) (maybe_swap q)), (Abs (p ++ p) (maybe_swap gv1)), (Abs (p ++ p) (maybe_swap p)), (Abs (p ++ p) (q ++ q)), (Abs (p ++ p) (q ++ gv1)), (Abs (p ++ p) (q ++ p)), (Abs (p ++ p) (gv1 ++ q)), (Abs (p ++ p) (gv1 ++ gv1))
(Abs (p ++ p) (gv1 ++ p)), (Abs (p ++ p) (p ++ q)), (Abs (p ++ p) (p ++ gv1)), (Abs (p ++ p) []), (Abs [] q), (Abs [] gv1), (Abs [] p), (Abs [] (k :: q)), (Abs [] (k :: gv1)), (Abs [] (k :: p))
(Abs [] (a :: q)), (Abs [] (a :: gv1)), (Abs [] (a :: p)), (Abs [] (merge q q)), (Abs [] (merge q gv1)), (Abs [] (merge q p)), (Abs [] (merge gv1 q)), (Abs [] (merge gv1 gv1)), (Abs [] (merge gv1 p)), (Abs [] (merge p q))
(Abs [] (merge p gv1)), (Abs [] (merge p p)), (Abs [] (insert k q)), (Abs [] (insert k gv1)), (Abs [] (insert k p)), (Abs [] (insert a q)), (Abs [] (insert a gv1)), (Abs [] (insert a p)), (Abs [] (maybe_swap q)), (Abs [] (maybe_swap gv1))
(Abs [] (maybe_swap p)), (Abs [] (q ++ q)), (Abs [] (q ++ gv1)), (Abs [] (q ++ p)), (Abs [] (gv1 ++ q)), (Abs [] (gv1 ++ gv1)), (Abs [] (gv1 ++ p)), (Abs [] (p ++ q)), (Abs [] (p ++ gv1)), (Abs [] (p ++ p))
(priq (k :: q)), (priq (k :: gv1)), (priq (k :: p)), (priq (a :: q)), (priq (a :: gv1)), (priq (a :: p)), (priq (merge q q)), (priq (merge q gv1)), (priq (merge q p)), (priq (merge gv1 q))
(priq (merge gv1 gv1)), (priq (merge gv1 p)), (priq (merge p q)), (priq (merge p gv1)), (priq (merge p p)), (priq (insert k q)), (priq (insert k gv1)), (priq (insert k p)), (priq (insert a q)), (priq (insert a gv1))
(priq (insert a p)), (priq (maybe_swap q)), (priq (maybe_swap gv1)), (priq (maybe_swap p)), (priq (q ++ q)), (priq (q ++ gv1)), (priq (q ++ p)), (priq (gv1 ++ q)), (priq (gv1 ++ gv1)), (priq (gv1 ++ p))
(priq (p ++ q)), (priq (p ++ gv1)), (priq (p ++ p)), (priq []), (Permutation q (k :: q)), (Permutation q (k :: gv1)), (Permutation q (k :: p)), (Permutation q (a :: q)), (Permutation q (a :: gv1)), (Permutation q (a :: p))
(Permutation q (merge q q)), (Permutation q (merge q gv1)), (Permutation q (merge q p)), (Permutation q (merge gv1 q)), (Permutation q (merge gv1 gv1)), (Permutation q (merge gv1 p)), (Permutation q (merge p q)), (Permutation q (merge p gv1)), (Permutation q (merge p p)), (Permutation q (insert k q))
(Permutation q (insert k gv1)), (Permutation q (insert k p)), (Permutation q (insert a q)), (Permutation q (insert a gv1)), (Permutation q (insert a p)), (Permutation q (maybe_swap q)), (Permutation q (maybe_swap gv1)), (Permutation q (maybe_swap p)), (Permutation q (q ++ q)), (Permutation q (q ++ gv1))
(Permutation q (q ++ p)), (Permutation q (gv1 ++ q)), (Permutation q (gv1 ++ gv1)), (Permutation q (gv1 ++ p)), (Permutation q (p ++ q)), (Permutation q (p ++ gv1)), (Permutation q (p ++ p)), (Permutation q []), (Permutation gv1 (k :: q)), (Permutation gv1 (k :: gv1))
(Permutation gv1 (k :: p)), (Permutation gv1 (a :: q)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (a :: p)), (Permutation gv1 (merge q q)), (Permutation gv1 (merge q gv1)), (Permutation gv1 (merge q p)), (Permutation gv1 (merge gv1 q)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (merge gv1 p))
(Permutation gv1 (merge p q)), (Permutation gv1 (merge p gv1)), (Permutation gv1 (merge p p)), (Permutation gv1 (insert k q)), (Permutation gv1 (insert k gv1)), (Permutation gv1 (insert k p)), (Permutation gv1 (insert a q)), (Permutation gv1 (insert a gv1)), (Permutation gv1 (insert a p)), (Permutation gv1 (maybe_swap q))
(Permutation gv1 (maybe_swap gv1)), (Permutation gv1 (maybe_swap p)), (Permutation gv1 (q ++ q)), (Permutation gv1 (q ++ gv1)), (Permutation gv1 (q ++ p)), (Permutation gv1 (gv1 ++ q)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ p)), (Permutation gv1 (p ++ q)), (Permutation gv1 (p ++ gv1))
(Permutation gv1 (p ++ p)), (Permutation gv1 []), (Permutation p (k :: q)), (Permutation p (k :: gv1)), (Permutation p (k :: p)), (Permutation p (a :: q)), (Permutation p (a :: gv1)), (Permutation p (a :: p)), (Permutation p (merge q q)), (Permutation p (merge q gv1))
(Permutation p (merge q p)), (Permutation p (merge gv1 q)), (Permutation p (merge gv1 gv1)), (Permutation p (merge gv1 p)), (Permutation p (merge p q)), (Permutation p (merge p gv1)), (Permutation p (merge p p)), (Permutation p (insert k q)), (Permutation p (insert k gv1)), (Permutation p (insert k p))
(Permutation p (insert a q)), (Permutation p (insert a gv1)), (Permutation p (insert a p)), (Permutation p (maybe_swap q)), (Permutation p (maybe_swap gv1)), (Permutation p (maybe_swap p)), (Permutation p (q ++ q)), (Permutation p (q ++ gv1)), (Permutation p (q ++ p)), (Permutation p (gv1 ++ q))
(Permutation p (gv1 ++ gv1)), (Permutation p (gv1 ++ p)), (Permutation p (p ++ q)), (Permutation p (p ++ gv1)), (Permutation p (p ++ p)), (Permutation p []), (Permutation (k :: q) q), (Permutation (k :: q) gv1), (Permutation (k :: q) p), (Permutation (k :: q) (k :: gv1))
(Permutation (k :: q) (k :: p)), (Permutation (k :: q) (a :: q)), (Permutation (k :: q) (a :: gv1)), (Permutation (k :: q) (a :: p)), (Permutation (k :: q) (merge q q)), (Permutation (k :: q) (merge q gv1)), (Permutation (k :: q) (merge q p)), (Permutation (k :: q) (merge gv1 q)), (Permutation (k :: q) (merge gv1 gv1)), (Permutation (k :: q) (merge gv1 p))
(Permutation (k :: q) (merge p q)), (Permutation (k :: q) (merge p gv1)), (Permutation (k :: q) (merge p p)), (Permutation (k :: q) (insert k q)), (Permutation (k :: q) (insert k gv1)), (Permutation (k :: q) (insert k p)), (Permutation (k :: q) (insert a q)), (Permutation (k :: q) (insert a gv1)), (Permutation (k :: q) (insert a p)), (Permutation (k :: q) (maybe_swap q))
(Permutation (k :: q) (maybe_swap gv1)), (Permutation (k :: q) (maybe_swap p)), (Permutation (k :: q) (q ++ q)), (Permutation (k :: q) (q ++ gv1)), (Permutation (k :: q) (q ++ p)), (Permutation (k :: q) (gv1 ++ q)), (Permutation (k :: q) (gv1 ++ gv1)), (Permutation (k :: q) (gv1 ++ p)), (Permutation (k :: q) (p ++ q)), (Permutation (k :: q) (p ++ gv1))
(Permutation (k :: q) (p ++ p)), (Permutation (k :: q) []), (Permutation (k :: gv1) q), (Permutation (k :: gv1) gv1), (Permutation (k :: gv1) p), (Permutation (k :: gv1) (k :: q)), (Permutation (k :: gv1) (k :: p)), (Permutation (k :: gv1) (a :: q)), (Permutation (k :: gv1) (a :: gv1)), (Permutation (k :: gv1) (a :: p))
(Permutation (k :: gv1) (merge q q)), (Permutation (k :: gv1) (merge q gv1)), (Permutation (k :: gv1) (merge q p)), (Permutation (k :: gv1) (merge gv1 q)), (Permutation (k :: gv1) (merge gv1 gv1)), (Permutation (k :: gv1) (merge gv1 p)), (Permutation (k :: gv1) (merge p q)), (Permutation (k :: gv1) (merge p gv1)), (Permutation (k :: gv1) (merge p p)), (Permutation (k :: gv1) (insert k q))
(Permutation (k :: gv1) (insert k gv1)), (Permutation (k :: gv1) (insert k p)), (Permutation (k :: gv1) (insert a q)), (Permutation (k :: gv1) (insert a gv1)), (Permutation (k :: gv1) (insert a p)), (Permutation (k :: gv1) (maybe_swap q)), (Permutation (k :: gv1) (maybe_swap gv1)), (Permutation (k :: gv1) (maybe_swap p)), (Permutation (k :: gv1) (q ++ q)), (Permutation (k :: gv1) (q ++ gv1))
(Permutation (k :: gv1) (q ++ p)), (Permutation (k :: gv1) (gv1 ++ q)), (Permutation (k :: gv1) (gv1 ++ gv1)), (Permutation (k :: gv1) (gv1 ++ p)), (Permutation (k :: gv1) (p ++ q)), (Permutation (k :: gv1) (p ++ gv1)), (Permutation (k :: gv1) (p ++ p)), (Permutation (k :: gv1) []), (Permutation (k :: p) q), (Permutation (k :: p) gv1)
(Permutation (k :: p) p), (Permutation (k :: p) (k :: q)), (Permutation (k :: p) (k :: gv1)), (Permutation (k :: p) (a :: q)), (Permutation (k :: p) (a :: gv1)), (Permutation (k :: p) (a :: p)), (Permutation (k :: p) (merge q q)), (Permutation (k :: p) (merge q gv1)), (Permutation (k :: p) (merge q p)), (Permutation (k :: p) (merge gv1 q))
(Permutation (k :: p) (merge gv1 gv1)), (Permutation (k :: p) (merge gv1 p)), (Permutation (k :: p) (merge p q)), (Permutation (k :: p) (merge p gv1)), (Permutation (k :: p) (merge p p)), (Permutation (k :: p) (insert k q)), (Permutation (k :: p) (insert k gv1)), (Permutation (k :: p) (insert k p)), (Permutation (k :: p) (insert a q)), (Permutation (k :: p) (insert a gv1))
(Permutation (k :: p) (insert a p)), (Permutation (k :: p) (maybe_swap q)), (Permutation (k :: p) (maybe_swap gv1)), (Permutation (k :: p) (maybe_swap p)), (Permutation (k :: p) (q ++ q)), (Permutation (k :: p) (q ++ gv1)), (Permutation (k :: p) (q ++ p)), (Permutation (k :: p) (gv1 ++ q)), (Permutation (k :: p) (gv1 ++ gv1)), (Permutation (k :: p) (gv1 ++ p))
(Permutation (k :: p) (p ++ q)), (Permutation (k :: p) (p ++ gv1)), (Permutation (k :: p) (p ++ p)), (Permutation (k :: p) []), (Permutation (a :: q) q), (Permutation (a :: q) gv1), (Permutation (a :: q) p), (Permutation (a :: q) (k :: q)), (Permutation (a :: q) (k :: gv1)), (Permutation (a :: q) (k :: p))
(Permutation (a :: q) (a :: gv1)), (Permutation (a :: q) (a :: p)), (Permutation (a :: q) (merge q q)), (Permutation (a :: q) (merge q gv1)), (Permutation (a :: q) (merge q p)), (Permutation (a :: q) (merge gv1 q)), (Permutation (a :: q) (merge gv1 gv1)), (Permutation (a :: q) (merge gv1 p)), (Permutation (a :: q) (merge p q)), (Permutation (a :: q) (merge p gv1))
(Permutation (a :: q) (merge p p)), (Permutation (a :: q) (insert k q)), (Permutation (a :: q) (insert k gv1)), (Permutation (a :: q) (insert k p)), (Permutation (a :: q) (insert a q)), (Permutation (a :: q) (insert a gv1)), (Permutation (a :: q) (insert a p)), (Permutation (a :: q) (maybe_swap q)), (Permutation (a :: q) (maybe_swap gv1)), (Permutation (a :: q) (maybe_swap p))
(Permutation (a :: q) (q ++ q)), (Permutation (a :: q) (q ++ gv1)), (Permutation (a :: q) (q ++ p)), (Permutation (a :: q) (gv1 ++ q)), (Permutation (a :: q) (gv1 ++ gv1)), (Permutation (a :: q) (gv1 ++ p)), (Permutation (a :: q) (p ++ q)), (Permutation (a :: q) (p ++ gv1)), (Permutation (a :: q) (p ++ p)), (Permutation (a :: q) [])
(Permutation (a :: gv1) q), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) p), (Permutation (a :: gv1) (k :: q)), (Permutation (a :: gv1) (k :: gv1)), (Permutation (a :: gv1) (k :: p)), (Permutation (a :: gv1) (a :: q)), (Permutation (a :: gv1) (a :: p)), (Permutation (a :: gv1) (merge q q)), (Permutation (a :: gv1) (merge q gv1))
(Permutation (a :: gv1) (merge q p)), (Permutation (a :: gv1) (merge gv1 q)), (Permutation (a :: gv1) (merge gv1 gv1)), (Permutation (a :: gv1) (merge gv1 p)), (Permutation (a :: gv1) (merge p q)), (Permutation (a :: gv1) (merge p gv1)), (Permutation (a :: gv1) (merge p p)), (Permutation (a :: gv1) (insert k q)), (Permutation (a :: gv1) (insert k gv1)), (Permutation (a :: gv1) (insert k p))
(Permutation (a :: gv1) (insert a q)), (Permutation (a :: gv1) (insert a gv1)), (Permutation (a :: gv1) (insert a p)), (Permutation (a :: gv1) (maybe_swap q)), (Permutation (a :: gv1) (maybe_swap gv1)), (Permutation (a :: gv1) (maybe_swap p)), (Permutation (a :: gv1) (q ++ q)), (Permutation (a :: gv1) (q ++ gv1)), (Permutation (a :: gv1) (q ++ p)), (Permutation (a :: gv1) (gv1 ++ q))
(Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ p)), (Permutation (a :: gv1) (p ++ q)), (Permutation (a :: gv1) (p ++ gv1)), (Permutation (a :: gv1) (p ++ p)), (Permutation (a :: gv1) []), (Permutation (a :: p) q), (Permutation (a :: p) gv1), (Permutation (a :: p) p), (Permutation (a :: p) (k :: q))
(Permutation (a :: p) (k :: gv1)), (Permutation (a :: p) (k :: p)), (Permutation (a :: p) (a :: q)), (Permutation (a :: p) (a :: gv1)), (Permutation (a :: p) (merge q q)), (Permutation (a :: p) (merge q gv1)), (Permutation (a :: p) (merge q p)), (Permutation (a :: p) (merge gv1 q)), (Permutation (a :: p) (merge gv1 gv1)), (Permutation (a :: p) (merge gv1 p))
(Permutation (a :: p) (merge p q)), (Permutation (a :: p) (merge p gv1)), (Permutation (a :: p) (merge p p)), (Permutation (a :: p) (insert k q)), (Permutation (a :: p) (insert k gv1)), (Permutation (a :: p) (insert k p)), (Permutation (a :: p) (insert a q)), (Permutation (a :: p) (insert a gv1)), (Permutation (a :: p) (insert a p)), (Permutation (a :: p) (maybe_swap q))
(Permutation (a :: p) (maybe_swap gv1)), (Permutation (a :: p) (maybe_swap p)), (Permutation (a :: p) (q ++ q)), (Permutation (a :: p) (q ++ gv1)), (Permutation (a :: p) (q ++ p)), (Permutation (a :: p) (gv1 ++ q)), (Permutation (a :: p) (gv1 ++ gv1)), (Permutation (a :: p) (gv1 ++ p)), (Permutation (a :: p) (p ++ q)), (Permutation (a :: p) (p ++ gv1))
(Permutation (a :: p) (p ++ p)), (Permutation (a :: p) []), (Permutation (merge q q) q), (Permutation (merge q q) gv1), (Permutation (merge q q) p), (Permutation (merge q q) (k :: q)), (Permutation (merge q q) (k :: gv1)), (Permutation (merge q q) (k :: p)), (Permutation (merge q q) (a :: q)), (Permutation (merge q q) (a :: gv1))
(Permutation (merge q q) (a :: p)), (Permutation (merge q q) (merge q gv1)), (Permutation (merge q q) (merge q p)), (Permutation (merge q q) (merge gv1 q)), (Permutation (merge q q) (merge gv1 gv1)), (Permutation (merge q q) (merge gv1 p)), (Permutation (merge q q) (merge p q)), (Permutation (merge q q) (merge p gv1)), (Permutation (merge q q) (merge p p)), (Permutation (merge q q) (insert k q))
(Permutation (merge q q) (insert k gv1)), (Permutation (merge q q) (insert k p)), (Permutation (merge q q) (insert a q)), (Permutation (merge q q) (insert a gv1)), (Permutation (merge q q) (insert a p)), (Permutation (merge q q) (maybe_swap q)), (Permutation (merge q q) (maybe_swap gv1)), (Permutation (merge q q) (maybe_swap p)), (Permutation (merge q q) (q ++ q)), (Permutation (merge q q) (q ++ gv1))
(Permutation (merge q q) (q ++ p)), (Permutation (merge q q) (gv1 ++ q)), (Permutation (merge q q) (gv1 ++ gv1)), (Permutation (merge q q) (gv1 ++ p)), (Permutation (merge q q) (p ++ q)), (Permutation (merge q q) (p ++ gv1)), (Permutation (merge q q) (p ++ p)), (Permutation (merge q q) []), (Permutation (merge q gv1) q), (Permutation (merge q gv1) gv1)
(Permutation (merge q gv1) p), (Permutation (merge q gv1) (k :: q)), (Permutation (merge q gv1) (k :: gv1)), (Permutation (merge q gv1) (k :: p)), (Permutation (merge q gv1) (a :: q)), (Permutation (merge q gv1) (a :: gv1)), (Permutation (merge q gv1) (a :: p)), (Permutation (merge q gv1) (merge q q)), (Permutation (merge q gv1) (merge q p)), (Permutation (merge q gv1) (merge gv1 q))
(Permutation (merge q gv1) (merge gv1 gv1)), (Permutation (merge q gv1) (merge gv1 p)), (Permutation (merge q gv1) (merge p q)), (Permutation (merge q gv1) (merge p gv1)), (Permutation (merge q gv1) (merge p p)), (Permutation (merge q gv1) (insert k q)), (Permutation (merge q gv1) (insert k gv1)), (Permutation (merge q gv1) (insert k p)), (Permutation (merge q gv1) (insert a q)), (Permutation (merge q gv1) (insert a gv1))
(Permutation (merge q gv1) (insert a p)), (Permutation (merge q gv1) (maybe_swap q)), (Permutation (merge q gv1) (maybe_swap gv1)), (Permutation (merge q gv1) (maybe_swap p)), (Permutation (merge q gv1) (q ++ q)), (Permutation (merge q gv1) (q ++ gv1)), (Permutation (merge q gv1) (q ++ p)), (Permutation (merge q gv1) (gv1 ++ q)), (Permutation (merge q gv1) (gv1 ++ gv1)), (Permutation (merge q gv1) (gv1 ++ p))
(Permutation (merge q gv1) (p ++ q)), (Permutation (merge q gv1) (p ++ gv1)), (Permutation (merge q gv1) (p ++ p)), (Permutation (merge q gv1) []), (Permutation (merge q p) q), (Permutation (merge q p) gv1), (Permutation (merge q p) p), (Permutation (merge q p) (k :: q)), (Permutation (merge q p) (k :: gv1)), (Permutation (merge q p) (k :: p))
(Permutation (merge q p) (a :: q)), (Permutation (merge q p) (a :: gv1)), (Permutation (merge q p) (a :: p)), (Permutation (merge q p) (merge q q)), (Permutation (merge q p) (merge q gv1)), (Permutation (merge q p) (merge gv1 q)), (Permutation (merge q p) (merge gv1 gv1)), (Permutation (merge q p) (merge gv1 p)), (Permutation (merge q p) (merge p q)), (Permutation (merge q p) (merge p gv1))
(Permutation (merge q p) (merge p p)), (Permutation (merge q p) (insert k q)), (Permutation (merge q p) (insert k gv1)), (Permutation (merge q p) (insert k p)), (Permutation (merge q p) (insert a q)), (Permutation (merge q p) (insert a gv1)), (Permutation (merge q p) (insert a p)), (Permutation (merge q p) (maybe_swap q)), (Permutation (merge q p) (maybe_swap gv1)), (Permutation (merge q p) (maybe_swap p))
(Permutation (merge q p) (q ++ q)), (Permutation (merge q p) (q ++ gv1)), (Permutation (merge q p) (q ++ p)), (Permutation (merge q p) (gv1 ++ q)), (Permutation (merge q p) (gv1 ++ gv1)), (Permutation (merge q p) (gv1 ++ p)), (Permutation (merge q p) (p ++ q)), (Permutation (merge q p) (p ++ gv1)), (Permutation (merge q p) (p ++ p)), (Permutation (merge q p) [])
(Permutation (merge gv1 q) q), (Permutation (merge gv1 q) gv1), (Permutation (merge gv1 q) p), (Permutation (merge gv1 q) (k :: q)), (Permutation (merge gv1 q) (k :: gv1)), (Permutation (merge gv1 q) (k :: p)), (Permutation (merge gv1 q) (a :: q)), (Permutation (merge gv1 q) (a :: gv1)), (Permutation (merge gv1 q) (a :: p)), (Permutation (merge gv1 q) (merge q q))
(Permutation (merge gv1 q) (merge q gv1)), (Permutation (merge gv1 q) (merge q p)), (Permutation (merge gv1 q) (merge gv1 gv1)), (Permutation (merge gv1 q) (merge gv1 p)), (Permutation (merge gv1 q) (merge p q)), (Permutation (merge gv1 q) (merge p gv1)), (Permutation (merge gv1 q) (merge p p)), (Permutation (merge gv1 q) (insert k q)), (Permutation (merge gv1 q) (insert k gv1)), (Permutation (merge gv1 q) (insert k p))
(Permutation (merge gv1 q) (insert a q)), (Permutation (merge gv1 q) (insert a gv1)), (Permutation (merge gv1 q) (insert a p)), (Permutation (merge gv1 q) (maybe_swap q)), (Permutation (merge gv1 q) (maybe_swap gv1)), (Permutation (merge gv1 q) (maybe_swap p)), (Permutation (merge gv1 q) (q ++ q)), (Permutation (merge gv1 q) (q ++ gv1)), (Permutation (merge gv1 q) (q ++ p)), (Permutation (merge gv1 q) (gv1 ++ q))
(Permutation (merge gv1 q) (gv1 ++ gv1)), (Permutation (merge gv1 q) (gv1 ++ p)), (Permutation (merge gv1 q) (p ++ q)), (Permutation (merge gv1 q) (p ++ gv1)), (Permutation (merge gv1 q) (p ++ p)), (Permutation (merge gv1 q) []), (Permutation (merge gv1 gv1) q), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) p), (Permutation (merge gv1 gv1) (k :: q))
(Permutation (merge gv1 gv1) (k :: gv1)), (Permutation (merge gv1 gv1) (k :: p)), (Permutation (merge gv1 gv1) (a :: q)), (Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (a :: p)), (Permutation (merge gv1 gv1) (merge q q)), (Permutation (merge gv1 gv1) (merge q gv1)), (Permutation (merge gv1 gv1) (merge q p)), (Permutation (merge gv1 gv1) (merge gv1 q)), (Permutation (merge gv1 gv1) (merge gv1 p))
(Permutation (merge gv1 gv1) (merge p q)), (Permutation (merge gv1 gv1) (merge p gv1)), (Permutation (merge gv1 gv1) (merge p p)), (Permutation (merge gv1 gv1) (insert k q)), (Permutation (merge gv1 gv1) (insert k gv1)), (Permutation (merge gv1 gv1) (insert k p)), (Permutation (merge gv1 gv1) (insert a q)), (Permutation (merge gv1 gv1) (insert a gv1)), (Permutation (merge gv1 gv1) (insert a p)), (Permutation (merge gv1 gv1) (maybe_swap q))
(Permutation (merge gv1 gv1) (maybe_swap gv1)), (Permutation (merge gv1 gv1) (maybe_swap p)), (Permutation (merge gv1 gv1) (q ++ q)), (Permutation (merge gv1 gv1) (q ++ gv1)), (Permutation (merge gv1 gv1) (q ++ p)), (Permutation (merge gv1 gv1) (gv1 ++ q)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ p)), (Permutation (merge gv1 gv1) (p ++ q)), (Permutation (merge gv1 gv1) (p ++ gv1))
(Permutation (merge gv1 gv1) (p ++ p)), (Permutation (merge gv1 gv1) []), (Permutation (merge gv1 p) q), (Permutation (merge gv1 p) gv1), (Permutation (merge gv1 p) p), (Permutation (merge gv1 p) (k :: q)), (Permutation (merge gv1 p) (k :: gv1)), (Permutation (merge gv1 p) (k :: p)), (Permutation (merge gv1 p) (a :: q)), (Permutation (merge gv1 p) (a :: gv1))
(Permutation (merge gv1 p) (a :: p)), (Permutation (merge gv1 p) (merge q q)), (Permutation (merge gv1 p) (merge q gv1)), (Permutation (merge gv1 p) (merge q p)), (Permutation (merge gv1 p) (merge gv1 q)), (Permutation (merge gv1 p) (merge gv1 gv1)), (Permutation (merge gv1 p) (merge p q)), (Permutation (merge gv1 p) (merge p gv1)), (Permutation (merge gv1 p) (merge p p)), (Permutation (merge gv1 p) (insert k q))
(Permutation (merge gv1 p) (insert k gv1)), (Permutation (merge gv1 p) (insert k p)), (Permutation (merge gv1 p) (insert a q)), (Permutation (merge gv1 p) (insert a gv1)), (Permutation (merge gv1 p) (insert a p)), (Permutation (merge gv1 p) (maybe_swap q)), (Permutation (merge gv1 p) (maybe_swap gv1)), (Permutation (merge gv1 p) (maybe_swap p)), (Permutation (merge gv1 p) (q ++ q)), (Permutation (merge gv1 p) (q ++ gv1))
(Permutation (merge gv1 p) (q ++ p)), (Permutation (merge gv1 p) (gv1 ++ q)), (Permutation (merge gv1 p) (gv1 ++ gv1)), (Permutation (merge gv1 p) (gv1 ++ p)), (Permutation (merge gv1 p) (p ++ q)), (Permutation (merge gv1 p) (p ++ gv1)), (Permutation (merge gv1 p) (p ++ p)), (Permutation (merge gv1 p) []), (Permutation (merge p q) q), (Permutation (merge p q) gv1)
(Permutation (merge p q) p), (Permutation (merge p q) (k :: q)), (Permutation (merge p q) (k :: gv1)), (Permutation (merge p q) (k :: p)), (Permutation (merge p q) (a :: q)), (Permutation (merge p q) (a :: gv1)), (Permutation (merge p q) (a :: p)), (Permutation (merge p q) (merge q q)), (Permutation (merge p q) (merge q gv1)), (Permutation (merge p q) (merge q p))
(Permutation (merge p q) (merge gv1 q)), (Permutation (merge p q) (merge gv1 gv1)), (Permutation (merge p q) (merge gv1 p)), (Permutation (merge p q) (merge p gv1)), (Permutation (merge p q) (merge p p)), (Permutation (merge p q) (insert k q)), (Permutation (merge p q) (insert k gv1)), (Permutation (merge p q) (insert k p)), (Permutation (merge p q) (insert a q)), (Permutation (merge p q) (insert a gv1))
(Permutation (merge p q) (insert a p)), (Permutation (merge p q) (maybe_swap q)), (Permutation (merge p q) (maybe_swap gv1)), (Permutation (merge p q) (maybe_swap p)), (Permutation (merge p q) (q ++ q)), (Permutation (merge p q) (q ++ gv1)), (Permutation (merge p q) (q ++ p)), (Permutation (merge p q) (gv1 ++ q)), (Permutation (merge p q) (gv1 ++ gv1)), (Permutation (merge p q) (gv1 ++ p))
(Permutation (merge p q) (p ++ q)), (Permutation (merge p q) (p ++ gv1)), (Permutation (merge p q) (p ++ p)), (Permutation (merge p q) []), (Permutation (merge p gv1) q), (Permutation (merge p gv1) gv1), (Permutation (merge p gv1) p), (Permutation (merge p gv1) (k :: q)), (Permutation (merge p gv1) (k :: gv1)), (Permutation (merge p gv1) (k :: p))
(Permutation (merge p gv1) (a :: q)), (Permutation (merge p gv1) (a :: gv1)), (Permutation (merge p gv1) (a :: p)), (Permutation (merge p gv1) (merge q q)), (Permutation (merge p gv1) (merge q gv1)), (Permutation (merge p gv1) (merge q p)), (Permutation (merge p gv1) (merge gv1 q)), (Permutation (merge p gv1) (merge gv1 gv1)), (Permutation (merge p gv1) (merge gv1 p)), (Permutation (merge p gv1) (merge p q))
(Permutation (merge p gv1) (merge p p)), (Permutation (merge p gv1) (insert k q)), (Permutation (merge p gv1) (insert k gv1)), (Permutation (merge p gv1) (insert k p)), (Permutation (merge p gv1) (insert a q)), (Permutation (merge p gv1) (insert a gv1)), (Permutation (merge p gv1) (insert a p)), (Permutation (merge p gv1) (maybe_swap q)), (Permutation (merge p gv1) (maybe_swap gv1)), (Permutation (merge p gv1) (maybe_swap p))
(Permutation (merge p gv1) (q ++ q)), (Permutation (merge p gv1) (q ++ gv1)), (Permutation (merge p gv1) (q ++ p)), (Permutation (merge p gv1) (gv1 ++ q)), (Permutation (merge p gv1) (gv1 ++ gv1)), (Permutation (merge p gv1) (gv1 ++ p)), (Permutation (merge p gv1) (p ++ q)), (Permutation (merge p gv1) (p ++ gv1)), (Permutation (merge p gv1) (p ++ p)), (Permutation (merge p gv1) [])
(Permutation (merge p p) q), (Permutation (merge p p) gv1), (Permutation (merge p p) p), (Permutation (merge p p) (k :: q)), (Permutation (merge p p) (k :: gv1)), (Permutation (merge p p) (k :: p)), (Permutation (merge p p) (a :: q)), (Permutation (merge p p) (a :: gv1)), (Permutation (merge p p) (a :: p)), (Permutation (merge p p) (merge q q))
(Permutation (merge p p) (merge q gv1)), (Permutation (merge p p) (merge q p)), (Permutation (merge p p) (merge gv1 q)), (Permutation (merge p p) (merge gv1 gv1)), (Permutation (merge p p) (merge gv1 p)), (Permutation (merge p p) (merge p q)), (Permutation (merge p p) (merge p gv1)), (Permutation (merge p p) (insert k q)), (Permutation (merge p p) (insert k gv1)), (Permutation (merge p p) (insert k p))
(Permutation (merge p p) (insert a q)), (Permutation (merge p p) (insert a gv1)), (Permutation (merge p p) (insert a p)), (Permutation (merge p p) (maybe_swap q)), (Permutation (merge p p) (maybe_swap gv1)), (Permutation (merge p p) (maybe_swap p)), (Permutation (merge p p) (q ++ q)), (Permutation (merge p p) (q ++ gv1)), (Permutation (merge p p) (q ++ p)), (Permutation (merge p p) (gv1 ++ q))
(Permutation (merge p p) (gv1 ++ gv1)), (Permutation (merge p p) (gv1 ++ p)), (Permutation (merge p p) (p ++ q)), (Permutation (merge p p) (p ++ gv1)), (Permutation (merge p p) (p ++ p)), (Permutation (merge p p) []), (Permutation (insert k q) q), (Permutation (insert k q) gv1), (Permutation (insert k q) p), (Permutation (insert k q) (k :: q))
(Permutation (insert k q) (k :: gv1)), (Permutation (insert k q) (k :: p)), (Permutation (insert k q) (a :: q)), (Permutation (insert k q) (a :: gv1)), (Permutation (insert k q) (a :: p)), (Permutation (insert k q) (merge q q)), (Permutation (insert k q) (merge q gv1)), (Permutation (insert k q) (merge q p)), (Permutation (insert k q) (merge gv1 q)), (Permutation (insert k q) (merge gv1 gv1))
(Permutation (insert k q) (merge gv1 p)), (Permutation (insert k q) (merge p q)), (Permutation (insert k q) (merge p gv1)), (Permutation (insert k q) (merge p p)), (Permutation (insert k q) (insert k gv1)), (Permutation (insert k q) (insert k p)), (Permutation (insert k q) (insert a q)), (Permutation (insert k q) (insert a gv1)), (Permutation (insert k q) (insert a p)), (Permutation (insert k q) (maybe_swap q))
(Permutation (insert k q) (maybe_swap gv1)), (Permutation (insert k q) (maybe_swap p)), (Permutation (insert k q) (q ++ q)), (Permutation (insert k q) (q ++ gv1)), (Permutation (insert k q) (q ++ p)), (Permutation (insert k q) (gv1 ++ q)), (Permutation (insert k q) (gv1 ++ gv1)), (Permutation (insert k q) (gv1 ++ p)), (Permutation (insert k q) (p ++ q)), (Permutation (insert k q) (p ++ gv1))
(Permutation (insert k q) (p ++ p)), (Permutation (insert k q) []), (Permutation (insert k gv1) q), (Permutation (insert k gv1) gv1), (Permutation (insert k gv1) p), (Permutation (insert k gv1) (k :: q)), (Permutation (insert k gv1) (k :: gv1)), (Permutation (insert k gv1) (k :: p)), (Permutation (insert k gv1) (a :: q)), (Permutation (insert k gv1) (a :: gv1))
(Permutation (insert k gv1) (a :: p)), (Permutation (insert k gv1) (merge q q)), (Permutation (insert k gv1) (merge q gv1)), (Permutation (insert k gv1) (merge q p)), (Permutation (insert k gv1) (merge gv1 q)), (Permutation (insert k gv1) (merge gv1 gv1)), (Permutation (insert k gv1) (merge gv1 p)), (Permutation (insert k gv1) (merge p q)), (Permutation (insert k gv1) (merge p gv1)), (Permutation (insert k gv1) (merge p p))
(Permutation (insert k gv1) (insert k q)), (Permutation (insert k gv1) (insert k p)), (Permutation (insert k gv1) (insert a q)), (Permutation (insert k gv1) (insert a gv1)), (Permutation (insert k gv1) (insert a p)), (Permutation (insert k gv1) (maybe_swap q)), (Permutation (insert k gv1) (maybe_swap gv1)), (Permutation (insert k gv1) (maybe_swap p)), (Permutation (insert k gv1) (q ++ q)), (Permutation (insert k gv1) (q ++ gv1))
(Permutation (insert k gv1) (q ++ p)), (Permutation (insert k gv1) (gv1 ++ q)), (Permutation (insert k gv1) (gv1 ++ gv1)), (Permutation (insert k gv1) (gv1 ++ p)), (Permutation (insert k gv1) (p ++ q)), (Permutation (insert k gv1) (p ++ gv1)), (Permutation (insert k gv1) (p ++ p)), (Permutation (insert k gv1) []), (Permutation (insert k p) q), (Permutation (insert k p) gv1)
(Permutation (insert k p) p), (Permutation (insert k p) (k :: q)), (Permutation (insert k p) (k :: gv1)), (Permutation (insert k p) (k :: p)), (Permutation (insert k p) (a :: q)), (Permutation (insert k p) (a :: gv1)), (Permutation (insert k p) (a :: p)), (Permutation (insert k p) (merge q q)), (Permutation (insert k p) (merge q gv1)), (Permutation (insert k p) (merge q p))
(Permutation (insert k p) (merge gv1 q)), (Permutation (insert k p) (merge gv1 gv1)), (Permutation (insert k p) (merge gv1 p)), (Permutation (insert k p) (merge p q)), (Permutation (insert k p) (merge p gv1)), (Permutation (insert k p) (merge p p)), (Permutation (insert k p) (insert k q)), (Permutation (insert k p) (insert k gv1)), (Permutation (insert k p) (insert a q)), (Permutation (insert k p) (insert a gv1))
(Permutation (insert k p) (insert a p)), (Permutation (insert k p) (maybe_swap q)), (Permutation (insert k p) (maybe_swap gv1)), (Permutation (insert k p) (maybe_swap p)), (Permutation (insert k p) (q ++ q)), (Permutation (insert k p) (q ++ gv1)), (Permutation (insert k p) (q ++ p)), (Permutation (insert k p) (gv1 ++ q)), (Permutation (insert k p) (gv1 ++ gv1)), (Permutation (insert k p) (gv1 ++ p))
(Permutation (insert k p) (p ++ q)), (Permutation (insert k p) (p ++ gv1)), (Permutation (insert k p) (p ++ p)), (Permutation (insert k p) []), (Permutation (insert a q) q), (Permutation (insert a q) gv1), (Permutation (insert a q) p), (Permutation (insert a q) (k :: q)), (Permutation (insert a q) (k :: gv1)), (Permutation (insert a q) (k :: p))
(Permutation (insert a q) (a :: q)), (Permutation (insert a q) (a :: gv1)), (Permutation (insert a q) (a :: p)), (Permutation (insert a q) (merge q q)), (Permutation (insert a q) (merge q gv1)), (Permutation (insert a q) (merge q p)), (Permutation (insert a q) (merge gv1 q)), (Permutation (insert a q) (merge gv1 gv1)), (Permutation (insert a q) (merge gv1 p)), (Permutation (insert a q) (merge p q))
(Permutation (insert a q) (merge p gv1)), (Permutation (insert a q) (merge p p)), (Permutation (insert a q) (insert k q)), (Permutation (insert a q) (insert k gv1)), (Permutation (insert a q) (insert k p)), (Permutation (insert a q) (insert a gv1)), (Permutation (insert a q) (insert a p)), (Permutation (insert a q) (maybe_swap q)), (Permutation (insert a q) (maybe_swap gv1)), (Permutation (insert a q) (maybe_swap p))
(Permutation (insert a q) (q ++ q)), (Permutation (insert a q) (q ++ gv1)), (Permutation (insert a q) (q ++ p)), (Permutation (insert a q) (gv1 ++ q)), (Permutation (insert a q) (gv1 ++ gv1)), (Permutation (insert a q) (gv1 ++ p)), (Permutation (insert a q) (p ++ q)), (Permutation (insert a q) (p ++ gv1)), (Permutation (insert a q) (p ++ p)), (Permutation (insert a q) [])
(Permutation (insert a gv1) q), (Permutation (insert a gv1) gv1), (Permutation (insert a gv1) p), (Permutation (insert a gv1) (k :: q)), (Permutation (insert a gv1) (k :: gv1)), (Permutation (insert a gv1) (k :: p)), (Permutation (insert a gv1) (a :: q)), (Permutation (insert a gv1) (a :: gv1)), (Permutation (insert a gv1) (a :: p)), (Permutation (insert a gv1) (merge q q))
(Permutation (insert a gv1) (merge q gv1)), (Permutation (insert a gv1) (merge q p)), (Permutation (insert a gv1) (merge gv1 q)), (Permutation (insert a gv1) (merge gv1 gv1)), (Permutation (insert a gv1) (merge gv1 p)), (Permutation (insert a gv1) (merge p q)), (Permutation (insert a gv1) (merge p gv1)), (Permutation (insert a gv1) (merge p p)), (Permutation (insert a gv1) (insert k q)), (Permutation (insert a gv1) (insert k gv1))
(Permutation (insert a gv1) (insert k p)), (Permutation (insert a gv1) (insert a q)), (Permutation (insert a gv1) (insert a p)), (Permutation (insert a gv1) (maybe_swap q)), (Permutation (insert a gv1) (maybe_swap gv1)), (Permutation (insert a gv1) (maybe_swap p)), (Permutation (insert a gv1) (q ++ q)), (Permutation (insert a gv1) (q ++ gv1)), (Permutation (insert a gv1) (q ++ p)), (Permutation (insert a gv1) (gv1 ++ q))
(Permutation (insert a gv1) (gv1 ++ gv1)), (Permutation (insert a gv1) (gv1 ++ p)), (Permutation (insert a gv1) (p ++ q)), (Permutation (insert a gv1) (p ++ gv1)), (Permutation (insert a gv1) (p ++ p)), (Permutation (insert a gv1) []), (Permutation (insert a p) q), (Permutation (insert a p) gv1), (Permutation (insert a p) p), (Permutation (insert a p) (k :: q))
(Permutation (insert a p) (k :: gv1)), (Permutation (insert a p) (k :: p)), (Permutation (insert a p) (a :: q)), (Permutation (insert a p) (a :: gv1)), (Permutation (insert a p) (a :: p)), (Permutation (insert a p) (merge q q)), (Permutation (insert a p) (merge q gv1)), (Permutation (insert a p) (merge q p)), (Permutation (insert a p) (merge gv1 q)), (Permutation (insert a p) (merge gv1 gv1))
(Permutation (insert a p) (merge gv1 p)), (Permutation (insert a p) (merge p q)), (Permutation (insert a p) (merge p gv1)), (Permutation (insert a p) (merge p p)), (Permutation (insert a p) (insert k q)), (Permutation (insert a p) (insert k gv1)), (Permutation (insert a p) (insert k p)), (Permutation (insert a p) (insert a q)), (Permutation (insert a p) (insert a gv1)), (Permutation (insert a p) (maybe_swap q))
(Permutation (insert a p) (maybe_swap gv1)), (Permutation (insert a p) (maybe_swap p)), (Permutation (insert a p) (q ++ q)), (Permutation (insert a p) (q ++ gv1)), (Permutation (insert a p) (q ++ p)), (Permutation (insert a p) (gv1 ++ q)), (Permutation (insert a p) (gv1 ++ gv1)), (Permutation (insert a p) (gv1 ++ p)), (Permutation (insert a p) (p ++ q)), (Permutation (insert a p) (p ++ gv1))
(Permutation (insert a p) (p ++ p)), (Permutation (insert a p) []), (Permutation (maybe_swap q) q), (Permutation (maybe_swap q) gv1), (Permutation (maybe_swap q) p), (Permutation (maybe_swap q) (k :: q)), (Permutation (maybe_swap q) (k :: gv1)), (Permutation (maybe_swap q) (k :: p)), (Permutation (maybe_swap q) (a :: q)), (Permutation (maybe_swap q) (a :: gv1))
(Permutation (maybe_swap q) (a :: p)), (Permutation (maybe_swap q) (merge q q)), (Permutation (maybe_swap q) (merge q gv1)), (Permutation (maybe_swap q) (merge q p)), (Permutation (maybe_swap q) (merge gv1 q)), (Permutation (maybe_swap q) (merge gv1 gv1)), (Permutation (maybe_swap q) (merge gv1 p)), (Permutation (maybe_swap q) (merge p q)), (Permutation (maybe_swap q) (merge p gv1)), (Permutation (maybe_swap q) (merge p p))
(Permutation (maybe_swap q) (insert k q)), (Permutation (maybe_swap q) (insert k gv1)), (Permutation (maybe_swap q) (insert k p)), (Permutation (maybe_swap q) (insert a q)), (Permutation (maybe_swap q) (insert a gv1)), (Permutation (maybe_swap q) (insert a p)), (Permutation (maybe_swap q) (maybe_swap gv1)), (Permutation (maybe_swap q) (maybe_swap p)), (Permutation (maybe_swap q) (q ++ q)), (Permutation (maybe_swap q) (q ++ gv1))
(Permutation (maybe_swap q) (q ++ p)), (Permutation (maybe_swap q) (gv1 ++ q)), (Permutation (maybe_swap q) (gv1 ++ gv1)), (Permutation (maybe_swap q) (gv1 ++ p)), (Permutation (maybe_swap q) (p ++ q)), (Permutation (maybe_swap q) (p ++ gv1)), (Permutation (maybe_swap q) (p ++ p)), (Permutation (maybe_swap q) []), (Permutation (maybe_swap gv1) q), (Permutation (maybe_swap gv1) gv1)
(Permutation (maybe_swap gv1) p), (Permutation (maybe_swap gv1) (k :: q)), (Permutation (maybe_swap gv1) (k :: gv1)), (Permutation (maybe_swap gv1) (k :: p)), (Permutation (maybe_swap gv1) (a :: q)), (Permutation (maybe_swap gv1) (a :: gv1)), (Permutation (maybe_swap gv1) (a :: p)), (Permutation (maybe_swap gv1) (merge q q)), (Permutation (maybe_swap gv1) (merge q gv1)), (Permutation (maybe_swap gv1) (merge q p))
(Permutation (maybe_swap gv1) (merge gv1 q)), (Permutation (maybe_swap gv1) (merge gv1 gv1)), (Permutation (maybe_swap gv1) (merge gv1 p)), (Permutation (maybe_swap gv1) (merge p q)), (Permutation (maybe_swap gv1) (merge p gv1)), (Permutation (maybe_swap gv1) (merge p p)), (Permutation (maybe_swap gv1) (insert k q)), (Permutation (maybe_swap gv1) (insert k gv1)), (Permutation (maybe_swap gv1) (insert k p)), (Permutation (maybe_swap gv1) (insert a q))
(Permutation (maybe_swap gv1) (insert a gv1)), (Permutation (maybe_swap gv1) (insert a p)), (Permutation (maybe_swap gv1) (maybe_swap q)), (Permutation (maybe_swap gv1) (maybe_swap p)), (Permutation (maybe_swap gv1) (q ++ q)), (Permutation (maybe_swap gv1) (q ++ gv1)), (Permutation (maybe_swap gv1) (q ++ p)), (Permutation (maybe_swap gv1) (gv1 ++ q)), (Permutation (maybe_swap gv1) (gv1 ++ gv1)), (Permutation (maybe_swap gv1) (gv1 ++ p))
(Permutation (maybe_swap gv1) (p ++ q)), (Permutation (maybe_swap gv1) (p ++ gv1)), (Permutation (maybe_swap gv1) (p ++ p)), (Permutation (maybe_swap gv1) []), (Permutation (maybe_swap p) q), (Permutation (maybe_swap p) gv1), (Permutation (maybe_swap p) p), (Permutation (maybe_swap p) (k :: q)), (Permutation (maybe_swap p) (k :: gv1)), (Permutation (maybe_swap p) (k :: p))
(Permutation (maybe_swap p) (a :: q)), (Permutation (maybe_swap p) (a :: gv1)), (Permutation (maybe_swap p) (a :: p)), (Permutation (maybe_swap p) (merge q q)), (Permutation (maybe_swap p) (merge q gv1)), (Permutation (maybe_swap p) (merge q p)), (Permutation (maybe_swap p) (merge gv1 q)), (Permutation (maybe_swap p) (merge gv1 gv1)), (Permutation (maybe_swap p) (merge gv1 p)), (Permutation (maybe_swap p) (merge p q))
(Permutation (maybe_swap p) (merge p gv1)), (Permutation (maybe_swap p) (merge p p)), (Permutation (maybe_swap p) (insert k q)), (Permutation (maybe_swap p) (insert k gv1)), (Permutation (maybe_swap p) (insert k p)), (Permutation (maybe_swap p) (insert a q)), (Permutation (maybe_swap p) (insert a gv1)), (Permutation (maybe_swap p) (insert a p)), (Permutation (maybe_swap p) (maybe_swap q)), (Permutation (maybe_swap p) (maybe_swap gv1))
(Permutation (maybe_swap p) (q ++ q)), (Permutation (maybe_swap p) (q ++ gv1)), (Permutation (maybe_swap p) (q ++ p)), (Permutation (maybe_swap p) (gv1 ++ q)), (Permutation (maybe_swap p) (gv1 ++ gv1)), (Permutation (maybe_swap p) (gv1 ++ p)), (Permutation (maybe_swap p) (p ++ q)), (Permutation (maybe_swap p) (p ++ gv1)), (Permutation (maybe_swap p) (p ++ p)), (Permutation (maybe_swap p) [])
(Permutation (q ++ q) q), (Permutation (q ++ q) gv1), (Permutation (q ++ q) p), (Permutation (q ++ q) (k :: q)), (Permutation (q ++ q) (k :: gv1)), (Permutation (q ++ q) (k :: p)), (Permutation (q ++ q) (a :: q)), (Permutation (q ++ q) (a :: gv1)), (Permutation (q ++ q) (a :: p)), (Permutation (q ++ q) (merge q q))
(Permutation (q ++ q) (merge q gv1)), (Permutation (q ++ q) (merge q p)), (Permutation (q ++ q) (merge gv1 q)), (Permutation (q ++ q) (merge gv1 gv1)), (Permutation (q ++ q) (merge gv1 p)), (Permutation (q ++ q) (merge p q)), (Permutation (q ++ q) (merge p gv1)), (Permutation (q ++ q) (merge p p)), (Permutation (q ++ q) (insert k q)), (Permutation (q ++ q) (insert k gv1))
(Permutation (q ++ q) (insert k p)), (Permutation (q ++ q) (insert a q)), (Permutation (q ++ q) (insert a gv1)), (Permutation (q ++ q) (insert a p)), (Permutation (q ++ q) (maybe_swap q)), (Permutation (q ++ q) (maybe_swap gv1)), (Permutation (q ++ q) (maybe_swap p)), (Permutation (q ++ q) (q ++ gv1)), (Permutation (q ++ q) (q ++ p)), (Permutation (q ++ q) (gv1 ++ q))
(Permutation (q ++ q) (gv1 ++ gv1)), (Permutation (q ++ q) (gv1 ++ p)), (Permutation (q ++ q) (p ++ q)), (Permutation (q ++ q) (p ++ gv1)), (Permutation (q ++ q) (p ++ p)), (Permutation (q ++ q) []), (Permutation (q ++ gv1) q), (Permutation (q ++ gv1) gv1), (Permutation (q ++ gv1) p), (Permutation (q ++ gv1) (k :: q))
(Permutation (q ++ gv1) (k :: gv1)), (Permutation (q ++ gv1) (k :: p)), (Permutation (q ++ gv1) (a :: q)), (Permutation (q ++ gv1) (a :: gv1)), (Permutation (q ++ gv1) (a :: p)), (Permutation (q ++ gv1) (merge q q)), (Permutation (q ++ gv1) (merge q gv1)), (Permutation (q ++ gv1) (merge q p)), (Permutation (q ++ gv1) (merge gv1 q)), (Permutation (q ++ gv1) (merge gv1 gv1))
(Permutation (q ++ gv1) (merge gv1 p)), (Permutation (q ++ gv1) (merge p q)), (Permutation (q ++ gv1) (merge p gv1)), (Permutation (q ++ gv1) (merge p p)), (Permutation (q ++ gv1) (insert k q)), (Permutation (q ++ gv1) (insert k gv1)), (Permutation (q ++ gv1) (insert k p)), (Permutation (q ++ gv1) (insert a q)), (Permutation (q ++ gv1) (insert a gv1)), (Permutation (q ++ gv1) (insert a p))
(Permutation (q ++ gv1) (maybe_swap q)), (Permutation (q ++ gv1) (maybe_swap gv1)), (Permutation (q ++ gv1) (maybe_swap p)), (Permutation (q ++ gv1) (q ++ q)), (Permutation (q ++ gv1) (q ++ p)), (Permutation (q ++ gv1) (gv1 ++ q)), (Permutation (q ++ gv1) (gv1 ++ gv1)), (Permutation (q ++ gv1) (gv1 ++ p)), (Permutation (q ++ gv1) (p ++ q)), (Permutation (q ++ gv1) (p ++ gv1))
(Permutation (q ++ gv1) (p ++ p)), (Permutation (q ++ gv1) []), (Permutation (q ++ p) q), (Permutation (q ++ p) gv1), (Permutation (q ++ p) p), (Permutation (q ++ p) (k :: q)), (Permutation (q ++ p) (k :: gv1)), (Permutation (q ++ p) (k :: p)), (Permutation (q ++ p) (a :: q)), (Permutation (q ++ p) (a :: gv1))
(Permutation (q ++ p) (a :: p)), (Permutation (q ++ p) (merge q q)), (Permutation (q ++ p) (merge q gv1)), (Permutation (q ++ p) (merge q p)), (Permutation (q ++ p) (merge gv1 q)), (Permutation (q ++ p) (merge gv1 gv1)), (Permutation (q ++ p) (merge gv1 p)), (Permutation (q ++ p) (merge p q)), (Permutation (q ++ p) (merge p gv1)), (Permutation (q ++ p) (merge p p))
(Permutation (q ++ p) (insert k q)), (Permutation (q ++ p) (insert k gv1)), (Permutation (q ++ p) (insert k p)), (Permutation (q ++ p) (insert a q)), (Permutation (q ++ p) (insert a gv1)), (Permutation (q ++ p) (insert a p)), (Permutation (q ++ p) (maybe_swap q)), (Permutation (q ++ p) (maybe_swap gv1)), (Permutation (q ++ p) (maybe_swap p)), (Permutation (q ++ p) (q ++ q))
(Permutation (q ++ p) (q ++ gv1)), (Permutation (q ++ p) (gv1 ++ q)), (Permutation (q ++ p) (gv1 ++ gv1)), (Permutation (q ++ p) (gv1 ++ p)), (Permutation (q ++ p) (p ++ q)), (Permutation (q ++ p) (p ++ gv1)), (Permutation (q ++ p) (p ++ p)), (Permutation (q ++ p) []), (Permutation (gv1 ++ q) q), (Permutation (gv1 ++ q) gv1)
(Permutation (gv1 ++ q) p), (Permutation (gv1 ++ q) (k :: q)), (Permutation (gv1 ++ q) (k :: gv1)), (Permutation (gv1 ++ q) (k :: p)), (Permutation (gv1 ++ q) (a :: q)), (Permutation (gv1 ++ q) (a :: gv1)), (Permutation (gv1 ++ q) (a :: p)), (Permutation (gv1 ++ q) (merge q q)), (Permutation (gv1 ++ q) (merge q gv1)), (Permutation (gv1 ++ q) (merge q p))
(Permutation (gv1 ++ q) (merge gv1 q)), (Permutation (gv1 ++ q) (merge gv1 gv1)), (Permutation (gv1 ++ q) (merge gv1 p)), (Permutation (gv1 ++ q) (merge p q)), (Permutation (gv1 ++ q) (merge p gv1)), (Permutation (gv1 ++ q) (merge p p)), (Permutation (gv1 ++ q) (insert k q)), (Permutation (gv1 ++ q) (insert k gv1)), (Permutation (gv1 ++ q) (insert k p)), (Permutation (gv1 ++ q) (insert a q))
(Permutation (gv1 ++ q) (insert a gv1)), (Permutation (gv1 ++ q) (insert a p)), (Permutation (gv1 ++ q) (maybe_swap q)), (Permutation (gv1 ++ q) (maybe_swap gv1)), (Permutation (gv1 ++ q) (maybe_swap p)), (Permutation (gv1 ++ q) (q ++ q)), (Permutation (gv1 ++ q) (q ++ gv1)), (Permutation (gv1 ++ q) (q ++ p)), (Permutation (gv1 ++ q) (gv1 ++ gv1)), (Permutation (gv1 ++ q) (gv1 ++ p))
(Permutation (gv1 ++ q) (p ++ q)), (Permutation (gv1 ++ q) (p ++ gv1)), (Permutation (gv1 ++ q) (p ++ p)), (Permutation (gv1 ++ q) []), (Permutation (gv1 ++ gv1) q), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) p), (Permutation (gv1 ++ gv1) (k :: q)), (Permutation (gv1 ++ gv1) (k :: gv1)), (Permutation (gv1 ++ gv1) (k :: p))
(Permutation (gv1 ++ gv1) (a :: q)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (a :: p)), (Permutation (gv1 ++ gv1) (merge q q)), (Permutation (gv1 ++ gv1) (merge q gv1)), (Permutation (gv1 ++ gv1) (merge q p)), (Permutation (gv1 ++ gv1) (merge gv1 q)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 p)), (Permutation (gv1 ++ gv1) (merge p q))
(Permutation (gv1 ++ gv1) (merge p gv1)), (Permutation (gv1 ++ gv1) (merge p p)), (Permutation (gv1 ++ gv1) (insert k q)), (Permutation (gv1 ++ gv1) (insert k gv1)), (Permutation (gv1 ++ gv1) (insert k p)), (Permutation (gv1 ++ gv1) (insert a q)), (Permutation (gv1 ++ gv1) (insert a gv1)), (Permutation (gv1 ++ gv1) (insert a p)), (Permutation (gv1 ++ gv1) (maybe_swap q)), (Permutation (gv1 ++ gv1) (maybe_swap gv1))
(Permutation (gv1 ++ gv1) (maybe_swap p)), (Permutation (gv1 ++ gv1) (q ++ q)), (Permutation (gv1 ++ gv1) (q ++ gv1)), (Permutation (gv1 ++ gv1) (q ++ p)), (Permutation (gv1 ++ gv1) (gv1 ++ q)), (Permutation (gv1 ++ gv1) (gv1 ++ p)), (Permutation (gv1 ++ gv1) (p ++ q)), (Permutation (gv1 ++ gv1) (p ++ gv1)), (Permutation (gv1 ++ gv1) (p ++ p)), (Permutation (gv1 ++ gv1) [])
(Permutation (gv1 ++ p) q), (Permutation (gv1 ++ p) gv1), (Permutation (gv1 ++ p) p), (Permutation (gv1 ++ p) (k :: q)), (Permutation (gv1 ++ p) (k :: gv1)), (Permutation (gv1 ++ p) (k :: p)), (Permutation (gv1 ++ p) (a :: q)), (Permutation (gv1 ++ p) (a :: gv1)), (Permutation (gv1 ++ p) (a :: p)), (Permutation (gv1 ++ p) (merge q q))
(Permutation (gv1 ++ p) (merge q gv1)), (Permutation (gv1 ++ p) (merge q p)), (Permutation (gv1 ++ p) (merge gv1 q)), (Permutation (gv1 ++ p) (merge gv1 gv1)), (Permutation (gv1 ++ p) (merge gv1 p)), (Permutation (gv1 ++ p) (merge p q)), (Permutation (gv1 ++ p) (merge p gv1)), (Permutation (gv1 ++ p) (merge p p)), (Permutation (gv1 ++ p) (insert k q)), (Permutation (gv1 ++ p) (insert k gv1))
(Permutation (gv1 ++ p) (insert k p)), (Permutation (gv1 ++ p) (insert a q)), (Permutation (gv1 ++ p) (insert a gv1)), (Permutation (gv1 ++ p) (insert a p)), (Permutation (gv1 ++ p) (maybe_swap q)), (Permutation (gv1 ++ p) (maybe_swap gv1)), (Permutation (gv1 ++ p) (maybe_swap p)), (Permutation (gv1 ++ p) (q ++ q)), (Permutation (gv1 ++ p) (q ++ gv1)), (Permutation (gv1 ++ p) (q ++ p))
(Permutation (gv1 ++ p) (gv1 ++ q)), (Permutation (gv1 ++ p) (gv1 ++ gv1)), (Permutation (gv1 ++ p) (p ++ q)), (Permutation (gv1 ++ p) (p ++ gv1)), (Permutation (gv1 ++ p) (p ++ p)), (Permutation (gv1 ++ p) []), (Permutation (p ++ q) q), (Permutation (p ++ q) gv1), (Permutation (p ++ q) p), (Permutation (p ++ q) (k :: q))
(Permutation (p ++ q) (k :: gv1)), (Permutation (p ++ q) (k :: p)), (Permutation (p ++ q) (a :: q)), (Permutation (p ++ q) (a :: gv1)), (Permutation (p ++ q) (a :: p)), (Permutation (p ++ q) (merge q q)), (Permutation (p ++ q) (merge q gv1)), (Permutation (p ++ q) (merge q p)), (Permutation (p ++ q) (merge gv1 q)), (Permutation (p ++ q) (merge gv1 gv1))
(Permutation (p ++ q) (merge gv1 p)), (Permutation (p ++ q) (merge p q)), (Permutation (p ++ q) (merge p gv1)), (Permutation (p ++ q) (merge p p)), (Permutation (p ++ q) (insert k q)), (Permutation (p ++ q) (insert k gv1)), (Permutation (p ++ q) (insert k p)), (Permutation (p ++ q) (insert a q)), (Permutation (p ++ q) (insert a gv1)), (Permutation (p ++ q) (insert a p))
(Permutation (p ++ q) (maybe_swap q)), (Permutation (p ++ q) (maybe_swap gv1)), (Permutation (p ++ q) (maybe_swap p)), (Permutation (p ++ q) (q ++ q)), (Permutation (p ++ q) (q ++ gv1)), (Permutation (p ++ q) (q ++ p)), (Permutation (p ++ q) (gv1 ++ q)), (Permutation (p ++ q) (gv1 ++ gv1)), (Permutation (p ++ q) (gv1 ++ p)), (Permutation (p ++ q) (p ++ gv1))
(Permutation (p ++ q) (p ++ p)), (Permutation (p ++ q) []), (Permutation (p ++ gv1) q), (Permutation (p ++ gv1) gv1), (Permutation (p ++ gv1) p), (Permutation (p ++ gv1) (k :: q)), (Permutation (p ++ gv1) (k :: gv1)), (Permutation (p ++ gv1) (k :: p)), (Permutation (p ++ gv1) (a :: q)), (Permutation (p ++ gv1) (a :: gv1))
(Permutation (p ++ gv1) (a :: p)), (Permutation (p ++ gv1) (merge q q)), (Permutation (p ++ gv1) (merge q gv1)), (Permutation (p ++ gv1) (merge q p)), (Permutation (p ++ gv1) (merge gv1 q)), (Permutation (p ++ gv1) (merge gv1 gv1)), (Permutation (p ++ gv1) (merge gv1 p)), (Permutation (p ++ gv1) (merge p q)), (Permutation (p ++ gv1) (merge p gv1)), (Permutation (p ++ gv1) (merge p p))
(Permutation (p ++ gv1) (insert k q)), (Permutation (p ++ gv1) (insert k gv1)), (Permutation (p ++ gv1) (insert k p)), (Permutation (p ++ gv1) (insert a q)), (Permutation (p ++ gv1) (insert a gv1)), (Permutation (p ++ gv1) (insert a p)), (Permutation (p ++ gv1) (maybe_swap q)), (Permutation (p ++ gv1) (maybe_swap gv1)), (Permutation (p ++ gv1) (maybe_swap p)), (Permutation (p ++ gv1) (q ++ q))
(Permutation (p ++ gv1) (q ++ gv1)), (Permutation (p ++ gv1) (q ++ p)), (Permutation (p ++ gv1) (gv1 ++ q)), (Permutation (p ++ gv1) (gv1 ++ gv1)), (Permutation (p ++ gv1) (gv1 ++ p)), (Permutation (p ++ gv1) (p ++ q)), (Permutation (p ++ gv1) (p ++ p)), (Permutation (p ++ gv1) []), (Permutation (p ++ p) q), (Permutation (p ++ p) gv1)
(Permutation (p ++ p) p), (Permutation (p ++ p) (k :: q)), (Permutation (p ++ p) (k :: gv1)), (Permutation (p ++ p) (k :: p)), (Permutation (p ++ p) (a :: q)), (Permutation (p ++ p) (a :: gv1)), (Permutation (p ++ p) (a :: p)), (Permutation (p ++ p) (merge q q)), (Permutation (p ++ p) (merge q gv1)), (Permutation (p ++ p) (merge q p))
(Permutation (p ++ p) (merge gv1 q)), (Permutation (p ++ p) (merge gv1 gv1)), (Permutation (p ++ p) (merge gv1 p)), (Permutation (p ++ p) (merge p q)), (Permutation (p ++ p) (merge p gv1)), (Permutation (p ++ p) (merge p p)), (Permutation (p ++ p) (insert k q)), (Permutation (p ++ p) (insert k gv1)), (Permutation (p ++ p) (insert k p)), (Permutation (p ++ p) (insert a q))
(Permutation (p ++ p) (insert a gv1)), (Permutation (p ++ p) (insert a p)), (Permutation (p ++ p) (maybe_swap q)), (Permutation (p ++ p) (maybe_swap gv1)), (Permutation (p ++ p) (maybe_swap p)), (Permutation (p ++ p) (q ++ q)), (Permutation (p ++ p) (q ++ gv1)), (Permutation (p ++ p) (q ++ p)), (Permutation (p ++ p) (gv1 ++ q)), (Permutation (p ++ p) (gv1 ++ gv1))
(Permutation (p ++ p) (gv1 ++ p)), (Permutation (p ++ p) (p ++ q)), (Permutation (p ++ p) (p ++ gv1)), (Permutation (p ++ p) []), (Permutation [] q), (Permutation [] gv1), (Permutation [] p), (Permutation [] (k :: q)), (Permutation [] (k :: gv1)), (Permutation [] (k :: p))
(Permutation [] (a :: q)), (Permutation [] (a :: gv1)), (Permutation [] (a :: p)), (Permutation [] (merge q q)), (Permutation [] (merge q gv1)), (Permutation [] (merge q p)), (Permutation [] (merge gv1 q)), (Permutation [] (merge gv1 gv1)), (Permutation [] (merge gv1 p)), (Permutation [] (merge p q))
(Permutation [] (merge p gv1)), (Permutation [] (merge p p)), (Permutation [] (insert k q)), (Permutation [] (insert k gv1)), (Permutation [] (insert k p)), (Permutation [] (insert a q)), (Permutation [] (insert a gv1)), (Permutation [] (insert a p)), (Permutation [] (maybe_swap q)), (Permutation [] (maybe_swap gv1))
(Permutation [] (maybe_swap p)), (Permutation [] (q ++ q)), (Permutation [] (q ++ gv1)), (Permutation [] (q ++ p)), (Permutation [] (gv1 ++ q)), (Permutation [] (gv1 ++ gv1)), (Permutation [] (gv1 ++ p)), (Permutation [] (p ++ q)), (Permutation [] (p ++ gv1)), (Permutation [] (p ++ p))
(In k (k :: q)), (In k (k :: gv1)), (In k (k :: p)), (In k (a :: q)), (In k (a :: gv1)), (In k (a :: p)), (In k (merge q q)), (In k (merge q gv1)), (In k (merge q p)), (In k (merge gv1 q))
(In k (merge gv1 gv1)), (In k (merge gv1 p)), (In k (merge p q)), (In k (merge p gv1)), (In k (merge p p)), (In k (insert k q)), (In k (insert k gv1)), (In k (insert k p)), (In k (insert a q)), (In k (insert a gv1))
(In k (insert a p)), (In k (maybe_swap q)), (In k (maybe_swap gv1)), (In k (maybe_swap p)), (In k (q ++ q)), (In k (q ++ gv1)), (In k (q ++ p)), (In k (gv1 ++ q)), (In k (gv1 ++ gv1)), (In k (gv1 ++ p))
(In k (p ++ q)), (In k (p ++ gv1)), (In k (p ++ p)), (In a (k :: q)), (In a (k :: gv1)), (In a (k :: p)), (In a (a :: q)), (In a (a :: gv1)), (In a (a :: p)), (In a (merge q q))
(In a (merge q gv1)), (In a (merge q p)), (In a (merge gv1 q)), (In a (merge gv1 gv1)), (In a (merge gv1 p)), (In a (merge p q)), (In a (merge p gv1)), (In a (merge p p)), (In a (insert k q)), (In a (insert k gv1))
(In a (insert k p)), (In a (insert a q)), (In a (insert a gv1)), (In a (insert a p)), (In a (maybe_swap q)), (In a (maybe_swap gv1)), (In a (maybe_swap p)), (In a (q ++ q)), (In a (q ++ gv1)), (In a (q ++ p))
(In a (gv1 ++ q)), (In a (gv1 ++ gv1)), (In a (gv1 ++ p)), (In a (p ++ q)), (In a (p ++ gv1)), (In a (p ++ p)), (In (length q) q), (In (length q) gv1), (In (length q) p), (In (length q) (k :: q))
(In (length q) (k :: gv1)), (In (length q) (k :: p)), (In (length q) (a :: q)), (In (length q) (a :: gv1)), (In (length q) (a :: p)), (In (length q) (merge q q)), (In (length q) (merge q gv1)), (In (length q) (merge q p)), (In (length q) (merge gv1 q)), (In (length q) (merge gv1 gv1))
(In (length q) (merge gv1 p)), (In (length q) (merge p q)), (In (length q) (merge p gv1)), (In (length q) (merge p p)), (In (length q) (insert k q)), (In (length q) (insert k gv1)), (In (length q) (insert k p)), (In (length q) (insert a q)), (In (length q) (insert a gv1)), (In (length q) (insert a p))
(In (length q) (maybe_swap q)), (In (length q) (maybe_swap gv1)), (In (length q) (maybe_swap p)), (In (length q) (q ++ q)), (In (length q) (q ++ gv1)), (In (length q) (q ++ p)), (In (length q) (gv1 ++ q)), (In (length q) (gv1 ++ gv1)), (In (length q) (gv1 ++ p)), (In (length q) (p ++ q))
(In (length q) (p ++ gv1)), (In (length q) (p ++ p)), (In (length gv1) q), (In (length gv1) gv1), (In (length gv1) p), (In (length gv1) (k :: q)), (In (length gv1) (k :: gv1)), (In (length gv1) (k :: p)), (In (length gv1) (a :: q)), (In (length gv1) (a :: gv1))
(In (length gv1) (a :: p)), (In (length gv1) (merge q q)), (In (length gv1) (merge q gv1)), (In (length gv1) (merge q p)), (In (length gv1) (merge gv1 q)), (In (length gv1) (merge gv1 gv1)), (In (length gv1) (merge gv1 p)), (In (length gv1) (merge p q)), (In (length gv1) (merge p gv1)), (In (length gv1) (merge p p))
(In (length gv1) (insert k q)), (In (length gv1) (insert k gv1)), (In (length gv1) (insert k p)), (In (length gv1) (insert a q)), (In (length gv1) (insert a gv1)), (In (length gv1) (insert a p)), (In (length gv1) (maybe_swap q)), (In (length gv1) (maybe_swap gv1)), (In (length gv1) (maybe_swap p)), (In (length gv1) (q ++ q))
(In (length gv1) (q ++ gv1)), (In (length gv1) (q ++ p)), (In (length gv1) (gv1 ++ q)), (In (length gv1) (gv1 ++ gv1)), (In (length gv1) (gv1 ++ p)), (In (length gv1) (p ++ q)), (In (length gv1) (p ++ gv1)), (In (length gv1) (p ++ p)), (In (length p) q), (In (length p) gv1)
(In (length p) p), (In (length p) (k :: q)), (In (length p) (k :: gv1)), (In (length p) (k :: p)), (In (length p) (a :: q)), (In (length p) (a :: gv1)), (In (length p) (a :: p)), (In (length p) (merge q q)), (In (length p) (merge q gv1)), (In (length p) (merge q p))
(In (length p) (merge gv1 q)), (In (length p) (merge gv1 gv1)), (In (length p) (merge gv1 p)), (In (length p) (merge p q)), (In (length p) (merge p gv1)), (In (length p) (merge p p)), (In (length p) (insert k q)), (In (length p) (insert k gv1)), (In (length p) (insert k p)), (In (length p) (insert a q))
(In (length p) (insert a gv1)), (In (length p) (insert a p)), (In (length p) (maybe_swap q)), (In (length p) (maybe_swap gv1)), (In (length p) (maybe_swap p)), (In (length p) (q ++ q)), (In (length p) (q ++ gv1)), (In (length p) (q ++ p)), (In (length p) (gv1 ++ q)), (In (length p) (gv1 ++ gv1))
(In (length p) (gv1 ++ p)), (In (length p) (p ++ q)), (In (length p) (p ++ gv1)), (In (length p) (p ++ p)), (k < length q), (k < length gv1), (k < length p), (a < length q), (a < length gv1), (a < length p)
(length q < k), (length q < a), (length q < length gv1), (length q < length p), (length gv1 < k), (length gv1 < a), (length gv1 < length q), (length gv1 < length p), (length p < k), (length p < a)
(length p < length q), (length p < length gv1), (k <= length q), (k <= length gv1), (k <= length p), (a <= length q), (a <= length gv1), (a <= length p), (length q <= k), (length q <= a)
(length q <= length gv1), (length q <= length p), (length gv1 <= k), (length gv1 <= a), (length gv1 <= length q), (length gv1 <= length p), (length p <= k), (length p <= a), (length p <= length q), (length p <= length gv1)
(~ Abs q q), (~ Abs q gv1), (~ Abs q p), (~ Abs gv1 q), (~ Abs gv1 gv1), (~ Abs gv1 p), (~ Abs p q), (~ Abs p gv1), (~ Abs p p), (~ priq q)
(~ priq gv1), (~ priq p), (~ Permutation q q), (~ Permutation q gv1), (~ Permutation q p), (~ Permutation gv1 q), (~ Permutation gv1 gv1), (~ Permutation gv1 p), (~ Permutation p q), (~ Permutation p gv1)
(~ Permutation p p), (~ In k q), (~ In k gv1), (~ In k p), (~ In a q), (~ In a gv1), (~ In a p), (~ k < k), (~ k < a), (~ a < k)
(~ a < a), (~ k <= k), (~ k <= a), (~ a <= k), (~ a <= a), (q <> q), (q <> gv1), (q <> p), (gv1 <> q), (gv1 <> gv1)
(gv1 <> p), (p <> q), (p <> gv1), (p <> p), (k <> k), (k <> a), (a <> k), (a <> a), (None = Some q), (None = Some gv1)
(None = Some p), (k :: q = q), (k :: q = gv1), (k :: q = p), (k :: q = merge q q), (k :: q = merge q gv1), (k :: q = merge q p), (k :: q = merge gv1 q), (k :: q = merge gv1 gv1), (k :: q = merge gv1 p)
(k :: q = merge p q), (k :: q = merge p gv1), (k :: q = merge p p), (k :: q = insert k q), (k :: q = insert k gv1), (k :: q = insert k p), (k :: q = insert a q), (k :: q = insert a gv1), (k :: q = insert a p), (k :: q = maybe_swap q)
(k :: q = maybe_swap gv1), (k :: q = maybe_swap p), (k :: q = q ++ q), (k :: q = q ++ gv1), (k :: q = q ++ p), (k :: q = gv1 ++ q), (k :: q = gv1 ++ gv1), (k :: q = gv1 ++ p), (k :: q = p ++ q), (k :: q = p ++ gv1)
(k :: q = p ++ p), (k :: q = []), (k :: gv1 = q), (k :: gv1 = gv1), (k :: gv1 = p), (k :: gv1 = merge q q), (k :: gv1 = merge q gv1), (k :: gv1 = merge q p), (k :: gv1 = merge gv1 q), (k :: gv1 = merge gv1 gv1)
(k :: gv1 = merge gv1 p), (k :: gv1 = merge p q), (k :: gv1 = merge p gv1), (k :: gv1 = merge p p), (k :: gv1 = insert k q), (k :: gv1 = insert k gv1), (k :: gv1 = insert k p), (k :: gv1 = insert a q), (k :: gv1 = insert a gv1), (k :: gv1 = insert a p)
(k :: gv1 = maybe_swap q), (k :: gv1 = maybe_swap gv1), (k :: gv1 = maybe_swap p), (k :: gv1 = q ++ q), (k :: gv1 = q ++ gv1), (k :: gv1 = q ++ p), (k :: gv1 = gv1 ++ q), (k :: gv1 = gv1 ++ gv1), (k :: gv1 = gv1 ++ p), (k :: gv1 = p ++ q)
(k :: gv1 = p ++ gv1), (k :: gv1 = p ++ p), (k :: gv1 = []), (k :: p = q), (k :: p = gv1), (k :: p = p), (k :: p = merge q q), (k :: p = merge q gv1), (k :: p = merge q p), (k :: p = merge gv1 q)
(k :: p = merge gv1 gv1), (k :: p = merge gv1 p), (k :: p = merge p q), (k :: p = merge p gv1), (k :: p = merge p p), (k :: p = insert k q), (k :: p = insert k gv1), (k :: p = insert k p), (k :: p = insert a q), (k :: p = insert a gv1)
(k :: p = insert a p), (k :: p = maybe_swap q), (k :: p = maybe_swap gv1), (k :: p = maybe_swap p), (k :: p = q ++ q), (k :: p = q ++ gv1), (k :: p = q ++ p), (k :: p = gv1 ++ q), (k :: p = gv1 ++ gv1), (k :: p = gv1 ++ p)
(k :: p = p ++ q), (k :: p = p ++ gv1), (k :: p = p ++ p), (k :: p = []), (a :: q = q), (a :: q = gv1), (a :: q = p), (a :: q = merge q q), (a :: q = merge q gv1), (a :: q = merge q p)
(a :: q = merge gv1 q), (a :: q = merge gv1 gv1), (a :: q = merge gv1 p), (a :: q = merge p q), (a :: q = merge p gv1), (a :: q = merge p p), (a :: q = insert k q), (a :: q = insert k gv1), (a :: q = insert k p), (a :: q = insert a q)
(a :: q = insert a gv1), (a :: q = insert a p), (a :: q = maybe_swap q), (a :: q = maybe_swap gv1), (a :: q = maybe_swap p), (a :: q = q ++ q), (a :: q = q ++ gv1), (a :: q = q ++ p), (a :: q = gv1 ++ q), (a :: q = gv1 ++ gv1)
(a :: q = gv1 ++ p), (a :: q = p ++ q), (a :: q = p ++ gv1), (a :: q = p ++ p), (a :: q = []), (a :: gv1 = q), (a :: gv1 = gv1), (a :: gv1 = p), (a :: gv1 = merge q q), (a :: gv1 = merge q gv1)
(a :: gv1 = merge q p), (a :: gv1 = merge gv1 q), (a :: gv1 = merge gv1 gv1), (a :: gv1 = merge gv1 p), (a :: gv1 = merge p q), (a :: gv1 = merge p gv1), (a :: gv1 = merge p p), (a :: gv1 = insert k q), (a :: gv1 = insert k gv1), (a :: gv1 = insert k p)
(a :: gv1 = insert a q), (a :: gv1 = insert a gv1), (a :: gv1 = insert a p), (a :: gv1 = maybe_swap q), (a :: gv1 = maybe_swap gv1), (a :: gv1 = maybe_swap p), (a :: gv1 = q ++ q), (a :: gv1 = q ++ gv1), (a :: gv1 = q ++ p), (a :: gv1 = gv1 ++ q)
(a :: gv1 = gv1 ++ gv1), (a :: gv1 = gv1 ++ p), (a :: gv1 = p ++ q), (a :: gv1 = p ++ gv1), (a :: gv1 = p ++ p), (a :: gv1 = []), (a :: p = q), (a :: p = gv1), (a :: p = p), (a :: p = merge q q)
(a :: p = merge q gv1), (a :: p = merge q p), (a :: p = merge gv1 q), (a :: p = merge gv1 gv1), (a :: p = merge gv1 p), (a :: p = merge p q), (a :: p = merge p gv1), (a :: p = merge p p), (a :: p = insert k q), (a :: p = insert k gv1)
(a :: p = insert k p), (a :: p = insert a q), (a :: p = insert a gv1), (a :: p = insert a p), (a :: p = maybe_swap q), (a :: p = maybe_swap gv1), (a :: p = maybe_swap p), (a :: p = q ++ q), (a :: p = q ++ gv1), (a :: p = q ++ p)
(a :: p = gv1 ++ q), (a :: p = gv1 ++ gv1), (a :: p = gv1 ++ p), (a :: p = p ++ q), (a :: p = p ++ gv1), (a :: p = p ++ p), (a :: p = []), (merge q q = q), (merge q q = gv1), (merge q q = p)
(merge q q = insert k q), (merge q q = insert k gv1), (merge q q = insert k p), (merge q q = insert a q), (merge q q = insert a gv1), (merge q q = insert a p), (merge q q = maybe_swap q), (merge q q = maybe_swap gv1), (merge q q = maybe_swap p), (merge q q = q ++ q)
(merge q q = q ++ gv1), (merge q q = q ++ p), (merge q q = gv1 ++ q), (merge q q = gv1 ++ gv1), (merge q q = gv1 ++ p), (merge q q = p ++ q), (merge q q = p ++ gv1), (merge q q = p ++ p), (merge q gv1 = q), (merge q gv1 = gv1)
(merge q gv1 = p), (merge q gv1 = insert k q), (merge q gv1 = insert k gv1), (merge q gv1 = insert k p), (merge q gv1 = insert a q), (merge q gv1 = insert a gv1), (merge q gv1 = insert a p), (merge q gv1 = maybe_swap q), (merge q gv1 = maybe_swap gv1), (merge q gv1 = maybe_swap p)
(merge q gv1 = q ++ q), (merge q gv1 = q ++ gv1), (merge q gv1 = q ++ p), (merge q gv1 = gv1 ++ q), (merge q gv1 = gv1 ++ gv1), (merge q gv1 = gv1 ++ p), (merge q gv1 = p ++ q), (merge q gv1 = p ++ gv1), (merge q gv1 = p ++ p), (merge q p = q)
(merge q p = gv1), (merge q p = p), (merge q p = insert k q), (merge q p = insert k gv1), (merge q p = insert k p), (merge q p = insert a q), (merge q p = insert a gv1), (merge q p = insert a p), (merge q p = maybe_swap q), (merge q p = maybe_swap gv1)
(merge q p = maybe_swap p), (merge q p = q ++ q), (merge q p = q ++ gv1), (merge q p = q ++ p), (merge q p = gv1 ++ q), (merge q p = gv1 ++ gv1), (merge q p = gv1 ++ p), (merge q p = p ++ q), (merge q p = p ++ gv1), (merge q p = p ++ p)
(merge gv1 q = q), (merge gv1 q = gv1), (merge gv1 q = p), (merge gv1 q = insert k q), (merge gv1 q = insert k gv1), (merge gv1 q = insert k p), (merge gv1 q = insert a q), (merge gv1 q = insert a gv1), (merge gv1 q = insert a p), (merge gv1 q = maybe_swap q)
(merge gv1 q = maybe_swap gv1), (merge gv1 q = maybe_swap p), (merge gv1 q = q ++ q), (merge gv1 q = q ++ gv1), (merge gv1 q = q ++ p), (merge gv1 q = gv1 ++ q), (merge gv1 q = gv1 ++ gv1), (merge gv1 q = gv1 ++ p), (merge gv1 q = p ++ q), (merge gv1 q = p ++ gv1)
(merge gv1 q = p ++ p), (merge gv1 gv1 = q), (merge gv1 gv1 = gv1), (merge gv1 gv1 = p), (merge gv1 gv1 = insert k q), (merge gv1 gv1 = insert k gv1), (merge gv1 gv1 = insert k p), (merge gv1 gv1 = insert a q), (merge gv1 gv1 = insert a gv1), (merge gv1 gv1 = insert a p)
(merge gv1 gv1 = maybe_swap q), (merge gv1 gv1 = maybe_swap gv1), (merge gv1 gv1 = maybe_swap p), (merge gv1 gv1 = q ++ q), (merge gv1 gv1 = q ++ gv1), (merge gv1 gv1 = q ++ p), (merge gv1 gv1 = gv1 ++ q), (merge gv1 gv1 = gv1 ++ gv1), (merge gv1 gv1 = gv1 ++ p), (merge gv1 gv1 = p ++ q)
(merge gv1 gv1 = p ++ gv1), (merge gv1 gv1 = p ++ p), (merge gv1 p = q), (merge gv1 p = gv1), (merge gv1 p = p), (merge gv1 p = insert k q), (merge gv1 p = insert k gv1), (merge gv1 p = insert k p), (merge gv1 p = insert a q), (merge gv1 p = insert a gv1)
(merge gv1 p = insert a p), (merge gv1 p = maybe_swap q), (merge gv1 p = maybe_swap gv1), (merge gv1 p = maybe_swap p), (merge gv1 p = q ++ q), (merge gv1 p = q ++ gv1), (merge gv1 p = q ++ p), (merge gv1 p = gv1 ++ q), (merge gv1 p = gv1 ++ gv1), (merge gv1 p = gv1 ++ p)
(merge gv1 p = p ++ q), (merge gv1 p = p ++ gv1), (merge gv1 p = p ++ p), (merge p q = q), (merge p q = gv1), (merge p q = p), (merge p q = insert k q), (merge p q = insert k gv1), (merge p q = insert k p), (merge p q = insert a q)
(merge p q = insert a gv1), (merge p q = insert a p), (merge p q = maybe_swap q), (merge p q = maybe_swap gv1), (merge p q = maybe_swap p), (merge p q = q ++ q), (merge p q = q ++ gv1), (merge p q = q ++ p), (merge p q = gv1 ++ q), (merge p q = gv1 ++ gv1)
(merge p q = gv1 ++ p), (merge p q = p ++ q), (merge p q = p ++ gv1), (merge p q = p ++ p), (merge p gv1 = q), (merge p gv1 = gv1), (merge p gv1 = p), (merge p gv1 = insert k q), (merge p gv1 = insert k gv1), (merge p gv1 = insert k p)
(merge p gv1 = insert a q), (merge p gv1 = insert a gv1), (merge p gv1 = insert a p), (merge p gv1 = maybe_swap q), (merge p gv1 = maybe_swap gv1), (merge p gv1 = maybe_swap p), (merge p gv1 = q ++ q), (merge p gv1 = q ++ gv1), (merge p gv1 = q ++ p), (merge p gv1 = gv1 ++ q)
(merge p gv1 = gv1 ++ gv1), (merge p gv1 = gv1 ++ p), (merge p gv1 = p ++ q), (merge p gv1 = p ++ gv1), (merge p gv1 = p ++ p), (merge p p = q), (merge p p = gv1), (merge p p = p), (merge p p = insert k q), (merge p p = insert k gv1)
(merge p p = insert k p), (merge p p = insert a q), (merge p p = insert a gv1), (merge p p = insert a p), (merge p p = maybe_swap q), (merge p p = maybe_swap gv1), (merge p p = maybe_swap p), (merge p p = q ++ q), (merge p p = q ++ gv1), (merge p p = q ++ p)
(merge p p = gv1 ++ q), (merge p p = gv1 ++ gv1), (merge p p = gv1 ++ p), (merge p p = p ++ q), (merge p p = p ++ gv1), (merge p p = p ++ p), (insert k q = q), (insert k q = gv1), (insert k q = p), (insert k q = q ++ q)
(insert k q = q ++ gv1), (insert k q = q ++ p), (insert k q = gv1 ++ q), (insert k q = gv1 ++ gv1), (insert k q = gv1 ++ p), (insert k q = p ++ q), (insert k q = p ++ gv1), (insert k q = p ++ p), (insert k gv1 = q), (insert k gv1 = gv1)
(insert k gv1 = p), (insert k gv1 = q ++ q), (insert k gv1 = q ++ gv1), (insert k gv1 = q ++ p), (insert k gv1 = gv1 ++ q), (insert k gv1 = gv1 ++ gv1), (insert k gv1 = gv1 ++ p), (insert k gv1 = p ++ q), (insert k gv1 = p ++ gv1), (insert k gv1 = p ++ p)
(insert k p = q), (insert k p = gv1), (insert k p = p), (insert k p = q ++ q), (insert k p = q ++ gv1), (insert k p = q ++ p), (insert k p = gv1 ++ q), (insert k p = gv1 ++ gv1), (insert k p = gv1 ++ p), (insert k p = p ++ q)
(insert k p = p ++ gv1), (insert k p = p ++ p), (insert a q = q), (insert a q = gv1), (insert a q = p), (insert a q = q ++ q), (insert a q = q ++ gv1), (insert a q = q ++ p), (insert a q = gv1 ++ q), (insert a q = gv1 ++ gv1)
(insert a q = gv1 ++ p), (insert a q = p ++ q), (insert a q = p ++ gv1), (insert a q = p ++ p), (insert a gv1 = q), (insert a gv1 = gv1), (insert a gv1 = p), (insert a gv1 = q ++ q), (insert a gv1 = q ++ gv1), (insert a gv1 = q ++ p)
(insert a gv1 = gv1 ++ q), (insert a gv1 = gv1 ++ gv1), (insert a gv1 = gv1 ++ p), (insert a gv1 = p ++ q), (insert a gv1 = p ++ gv1), (insert a gv1 = p ++ p), (insert a p = q), (insert a p = gv1), (insert a p = p), (insert a p = q ++ q)
(insert a p = q ++ gv1), (insert a p = q ++ p), (insert a p = gv1 ++ q), (insert a p = gv1 ++ gv1), (insert a p = gv1 ++ p), (insert a p = p ++ q), (insert a p = p ++ gv1), (insert a p = p ++ p), (maybe_swap q = q), (maybe_swap q = gv1)
(maybe_swap q = p), (maybe_swap q = insert k q), (maybe_swap q = insert k gv1), (maybe_swap q = insert k p), (maybe_swap q = insert a q), (maybe_swap q = insert a gv1), (maybe_swap q = insert a p), (maybe_swap q = q ++ q), (maybe_swap q = q ++ gv1), (maybe_swap q = q ++ p)
(maybe_swap q = gv1 ++ q), (maybe_swap q = gv1 ++ gv1), (maybe_swap q = gv1 ++ p), (maybe_swap q = p ++ q), (maybe_swap q = p ++ gv1), (maybe_swap q = p ++ p), (maybe_swap gv1 = q), (maybe_swap gv1 = gv1), (maybe_swap gv1 = p), (maybe_swap gv1 = insert k q)
(maybe_swap gv1 = insert k gv1), (maybe_swap gv1 = insert k p), (maybe_swap gv1 = insert a q), (maybe_swap gv1 = insert a gv1), (maybe_swap gv1 = insert a p), (maybe_swap gv1 = q ++ q), (maybe_swap gv1 = q ++ gv1), (maybe_swap gv1 = q ++ p), (maybe_swap gv1 = gv1 ++ q), (maybe_swap gv1 = gv1 ++ gv1)
(maybe_swap gv1 = gv1 ++ p), (maybe_swap gv1 = p ++ q), (maybe_swap gv1 = p ++ gv1), (maybe_swap gv1 = p ++ p), (maybe_swap p = q), (maybe_swap p = gv1), (maybe_swap p = p), (maybe_swap p = insert k q), (maybe_swap p = insert k gv1), (maybe_swap p = insert k p)
(maybe_swap p = insert a q), (maybe_swap p = insert a gv1), (maybe_swap p = insert a p), (maybe_swap p = q ++ q), (maybe_swap p = q ++ gv1), (maybe_swap p = q ++ p), (maybe_swap p = gv1 ++ q), (maybe_swap p = gv1 ++ gv1), (maybe_swap p = gv1 ++ p), (maybe_swap p = p ++ q)
(maybe_swap p = p ++ gv1), (maybe_swap p = p ++ p), (q ++ q = q), (q ++ q = gv1), (q ++ q = p), (q ++ gv1 = q), (q ++ gv1 = gv1), (q ++ gv1 = p), (q ++ p = q), (q ++ p = gv1)
(q ++ p = p), (gv1 ++ q = q), (gv1 ++ q = gv1), (gv1 ++ q = p), (gv1 ++ gv1 = q), (gv1 ++ gv1 = gv1), (gv1 ++ gv1 = p), (gv1 ++ p = q), (gv1 ++ p = gv1), (gv1 ++ p = p)
(p ++ q = q), (p ++ q = gv1), (p ++ q = p), (p ++ gv1 = q), (p ++ gv1 = gv1), (p ++ gv1 = p), (p ++ p = q), (p ++ p = gv1), (p ++ p = p), ([] = q)
([] = gv1), ([] = p), ([] = merge q q), ([] = merge q gv1), ([] = merge q p), ([] = merge gv1 q), ([] = merge gv1 gv1), ([] = merge gv1 p), ([] = merge p q), ([] = merge p gv1)
([] = merge p p), ([] = insert k q), ([] = insert k gv1), ([] = insert k p), ([] = insert a q), ([] = insert a gv1), ([] = insert a p), ([] = maybe_swap q), ([] = maybe_swap gv1), ([] = maybe_swap p)
([] = q ++ q), ([] = q ++ gv1), ([] = q ++ p), ([] = gv1 ++ q), ([] = gv1 ++ gv1), ([] = gv1 ++ p), ([] = p ++ q), ([] = p ++ gv1), ([] = p ++ p), (None = Some k)
(None = Some a), ((k, q) = select k q), ((k, q) = select k gv1), ((k, q) = select k p), ((k, q) = select a q), ((k, q) = select a gv1), ((k, q) = select a p), ((k, gv1) = select k q), ((k, gv1) = select k gv1), ((k, gv1) = select k p)
((k, gv1) = select a q), ((k, gv1) = select a gv1), ((k, gv1) = select a p), ((k, p) = select k q), ((k, p) = select k gv1), ((k, p) = select k p), ((k, p) = select a q), ((k, p) = select a gv1), ((k, p) = select a p), ((a, q) = select k q)
((a, q) = select k gv1), ((a, q) = select k p), ((a, q) = select a q), ((a, q) = select a gv1), ((a, q) = select a p), ((a, gv1) = select k q), ((a, gv1) = select k gv1), ((a, gv1) = select k p), ((a, gv1) = select a q), ((a, gv1) = select a gv1)
((a, gv1) = select a p), ((a, p) = select k q), ((a, p) = select k gv1), ((a, p) = select k p), ((a, p) = select a q), ((a, p) = select a gv1), ((a, p) = select a p), ((k >? k) = (k >=? k)), ((k >? k) = (k >=? a)), ((k >? k) = (a >=? k))
((k >? k) = (a >=? a)), ((k >? a) = (k >=? k)), ((k >? a) = (k >=? a)), ((k >? a) = (a >=? k)), ((k >? a) = (a >=? a)), ((a >? k) = (k >=? k)), ((a >? k) = (k >=? a)), ((a >? k) = (a >=? k)), ((a >? k) = (a >=? a)), ((a >? a) = (k >=? k))
((a >? a) = (k >=? a)), ((a >? a) = (a >=? k)), ((a >? a) = (a >=? a)), (length q = k), (length q = a), (length gv1 = k), (length gv1 = a), (length p = k), (length p = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 61.642 seconds


Label: 0 (0)
(Abs (insert k q) (insert a p)), (Abs (insert a p) (insert k q)), (Abs (k :: q) (insert a p)), (Abs (a :: p) (insert k q)), (Abs (insert k q) (a :: p)), (Abs (insert a p) (k :: q)), (Permutation (insert k q) (insert a p)), (Permutation (insert a p) (insert k q)), (Abs (k :: q) (a :: p)), (Abs (a :: p) (k :: q))
(Permutation (k :: q) (insert a p)), (Permutation (a :: p) (insert k q)), (Permutation (insert k q) (a :: p)), (Permutation (insert a p) (k :: q)), (Permutation (k :: q) (a :: p)), (Permutation (a :: p) (k :: q)), ((k, q) = select a p)

Label: 1 (1)
(Abs gv0 (insert a p)), (Abs gv0 (insert k q)), (Abs (insert a p) gv0), (Abs (insert k q) gv0), (Abs gv0 (a :: p)), (Abs gv0 (k :: q)), (Abs (a :: p) gv0), (Abs (k :: q) gv0), (Permutation gv0 (insert a p)), (Permutation gv0 (insert k q))
(Permutation (insert a p) gv0), (Permutation (insert k q) gv0), (Abs (insert a p) (maybe_swap gv0)), (Abs (insert k q) (maybe_swap gv0)), (Abs (maybe_swap gv0) (insert a p)), (Abs (maybe_swap gv0) (insert k q)), (insert a p = gv0), (Permutation gv0 (a :: p)), (Permutation gv0 (k :: q)), (Permutation (a :: p) gv0)

Label: 2 (2)
(Abs gv1 (insert k q)), (Abs gv1 (insert a p)), (Abs (insert k q) gv1), (Abs (insert a p) gv1), (Abs gv1 (k :: q)), (Abs gv1 (a :: p)), (Abs (k :: q) gv1), (Abs (a :: p) gv1), (Permutation gv1 (insert k q)), (Permutation gv1 (insert a p))
(Permutation (insert k q) gv1), (Permutation (insert a p) gv1), (Abs (insert k q) (maybe_swap gv1)), (Abs (insert a p) (maybe_swap gv1)), (Abs (maybe_swap gv1) (insert k q)), (Abs (maybe_swap gv1) (insert a p)), (insert k q = gv1), (Permutation gv1 (k :: q)), (Permutation gv1 (a :: p)), (Permutation (k :: q) gv1)


------------------------------ ALL RESULTS ------------------------------
1. (select a p = (k, q) -> Permutation (a :: p) (k :: q))

2. (insert a p = a :: p)

3. (insert k q = k :: q)

4. (Abs gv0 (insert a p) -> select a p = (k, q) -> Permutation gv0 (k :: q))

5. (Abs (insert a p) gv0 -> select a p = (k, q) -> Permutation gv0 (k :: q))

6. (Abs gv1 (insert k q) -> select a p = (k, q) -> Permutation (a :: p) gv1)

7. (Abs (insert k q) gv1 -> select a p = (k, q) -> Permutation (a :: p) gv1)

8. (Abs gv0 (a :: p) -> select a p = (k, q) -> Permutation gv0 (k :: q))

9. (Abs (a :: p) gv0 -> select a p = (k, q) -> Permutation gv0 (k :: q))

10. (Permutation gv0 (insert a p) ->  select a p = (k, q) -> Permutation gv0 (k :: q))

11. (Permutation (insert a p) gv0 ->  select a p = (k, q) -> Permutation gv0 (k :: q))

12. (Abs (insert a p) (maybe_swap gv0) ->  select a p = (k, q) -> Permutation gv0 (k :: q))

13. (Abs (insert k q) (maybe_swap gv0) ->  select a p = (k, q) -> Permutation gv0 (k :: q))

14. (Abs (maybe_swap gv0) (insert a p) ->  select a p = (k, q) -> Permutation gv0 (k :: q))

15. (Abs (maybe_swap gv0) (insert k q) ->  select a p = (k, q) -> Permutation gv0 (k :: q))

16. (Abs gv1 (k :: q) -> select a p = (k, q) -> Permutation (a :: p) gv1)

17. (Abs (k :: q) gv1 -> select a p = (k, q) -> Permutation (a :: p) gv1)

18. (Permutation gv1 (insert k q) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

19. (Permutation (insert k q) gv1 ->  select a p = (k, q) -> Permutation (a :: p) gv1)

20. (Abs (insert k q) (maybe_swap gv1) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

21. (Abs (insert a p) (maybe_swap gv1) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

22. (Abs (maybe_swap gv1) (insert k q) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

23. (Abs (maybe_swap gv1) (insert a p) ->  select a p = (k, q) -> Permutation (a :: p) gv1)

24. (insert a p = gv0 -> select a p = (k, q) -> Permutation gv0 (k :: q))

25. (Permutation gv0 (a :: p) -> select a p = (k, q) -> Permutation gv0 (k :: q))

26. (Permutation (a :: p) gv0 -> select a p = (k, q) -> Permutation gv0 (k :: q))

27. (insert k q = gv1 -> select a p = (k, q) -> Permutation (a :: p) gv1)

28. (Permutation gv1 (k :: q) -> select a p = (k, q) -> Permutation (a :: p) gv1)

29. (Permutation (k :: q) gv1 -> select a p = (k, q) -> Permutation (a :: p) gv1)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 132.694 seconds

Number of Result Pairs Returned: 29

1. (select a p = (k, q) -> Permutation (a :: p) (k :: q))

2. (insert a p = a :: p)

3. (insert k q = k :: q)

4. (Abs gv0 (insert a p) -> select a p = (k, q) -> Permutation gv0 (k :: q))

5. (Abs (insert a p) gv0 -> select a p = (k, q) -> Permutation gv0 (k :: q))
