Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (forall (i j : nat) (bl : list nat),
 select i al = (j, bl) -> Forall (fun x : nat => j >= x) bl)
 -- (Forall (fun x : nat => j >= x) l)
 -- (a :: l = bl)
 -- (i >= a)
 -- (select i al = (j, l))

----------------------------------
Goal: (j >= a)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.399 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 36.825 seconds

Label: Generalization #0
Assumptions: 
 -- (i >= a)
 -- (select i al = (j, l))

----------------------------------
Goal: (j >= a)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 36.972 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
select : (nat -> list nat -> nat * list nat)
insert : (nat -> list nat -> list nat)
delete_max : (list nat -> option (nat * list nat))
merge : (list nat -> list nat -> list nat)
priq : (list nat -> Prop)
Abs : (list nat -> list nat -> Prop)

Label: 0 (0)
Abducted Assumption: (i >= a)
Positive Examples: 500
Negative Examples: 15

Label: 1 (1)
Abducted Assumption: (select i al = (j, l))
Positive Examples: 51
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 37.36 seconds


Label: 0 (0)
(Abs l l), (Abs l al), (Abs al l), (Abs al al), (priq l), (priq al), (Permutation l l), (Permutation l al), (Permutation al l), (Permutation al al)
(In i l), (In i al), (In a l), (In a al), (In j l), (In j al), (i < i), (i < a), (i < j), (a < i)
(a < a), (a < j), (j < i), (j < a), (j < j), (i <= i), (i <= a), (i <= j), (a <= i), (a <= a)
(a <= j), (j <= i), (j <= a), (j <= j), (l = l), (l = al), (al = l), (al = al), (i = i), (i = a)
(i = j), (a = i), (a = a), (a = j), (j = i), (j = a), (j = j), (false = (i >? i)), (false = (i >? a)), (false = (i >? j))
(false = (a >? i)), (false = (a >? a)), (false = (a >? j)), (false = (j >? i)), (false = (j >? a)), (false = (j >? j)), (false = (i >=? i)), (false = (i >=? a)), (false = (i >=? j)), (false = (a >=? i))
(false = (a >=? a)), (false = (a >=? j)), (false = (j >=? i)), (false = (j >=? a)), (false = (j >=? j)), (true = (i >? i)), (true = (i >? a)), (true = (i >? j)), (true = (a >? i)), (true = (a >? a))
(true = (a >? j)), (true = (j >? i)), (true = (j >? a)), (true = (j >? j)), (true = (i >=? i)), (true = (i >=? a)), (true = (i >=? j)), (true = (a >=? i)), (true = (a >=? a)), (true = (a >=? j))
(true = (j >=? i)), (true = (j >=? a)), (true = (j >=? j)), (Abs l (i :: l)), (Abs l (i :: al)), (Abs l (a :: l)), (Abs l (a :: al)), (Abs l (j :: l)), (Abs l (j :: al)), (Abs l (merge l l))
(Abs l (merge l al)), (Abs l (merge al l)), (Abs l (merge al al)), (Abs l (insert i l)), (Abs l (insert i al)), (Abs l (insert a l)), (Abs l (insert a al)), (Abs l (insert j l)), (Abs l (insert j al)), (Abs l (maybe_swap l))
(Abs l (maybe_swap al)), (Abs l (l ++ l)), (Abs l (l ++ al)), (Abs l (al ++ l)), (Abs l (al ++ al)), (Abs l []), (Abs al (i :: l)), (Abs al (i :: al)), (Abs al (a :: l)), (Abs al (a :: al))
(Abs al (j :: l)), (Abs al (j :: al)), (Abs al (merge l l)), (Abs al (merge l al)), (Abs al (merge al l)), (Abs al (merge al al)), (Abs al (insert i l)), (Abs al (insert i al)), (Abs al (insert a l)), (Abs al (insert a al))
(Abs al (insert j l)), (Abs al (insert j al)), (Abs al (maybe_swap l)), (Abs al (maybe_swap al)), (Abs al (l ++ l)), (Abs al (l ++ al)), (Abs al (al ++ l)), (Abs al (al ++ al)), (Abs al []), (Abs (i :: l) l)
(Abs (i :: l) al), (Abs (i :: l) (i :: al)), (Abs (i :: l) (a :: l)), (Abs (i :: l) (a :: al)), (Abs (i :: l) (j :: l)), (Abs (i :: l) (j :: al)), (Abs (i :: l) (merge l l)), (Abs (i :: l) (merge l al)), (Abs (i :: l) (merge al l)), (Abs (i :: l) (merge al al))
(Abs (i :: l) (insert i l)), (Abs (i :: l) (insert i al)), (Abs (i :: l) (insert a l)), (Abs (i :: l) (insert a al)), (Abs (i :: l) (insert j l)), (Abs (i :: l) (insert j al)), (Abs (i :: l) (maybe_swap l)), (Abs (i :: l) (maybe_swap al)), (Abs (i :: l) (l ++ l)), (Abs (i :: l) (l ++ al))
(Abs (i :: l) (al ++ l)), (Abs (i :: l) (al ++ al)), (Abs (i :: l) []), (Abs (i :: al) l), (Abs (i :: al) al), (Abs (i :: al) (i :: l)), (Abs (i :: al) (a :: l)), (Abs (i :: al) (a :: al)), (Abs (i :: al) (j :: l)), (Abs (i :: al) (j :: al))
(Abs (i :: al) (merge l l)), (Abs (i :: al) (merge l al)), (Abs (i :: al) (merge al l)), (Abs (i :: al) (merge al al)), (Abs (i :: al) (insert i l)), (Abs (i :: al) (insert i al)), (Abs (i :: al) (insert a l)), (Abs (i :: al) (insert a al)), (Abs (i :: al) (insert j l)), (Abs (i :: al) (insert j al))
(Abs (i :: al) (maybe_swap l)), (Abs (i :: al) (maybe_swap al)), (Abs (i :: al) (l ++ l)), (Abs (i :: al) (l ++ al)), (Abs (i :: al) (al ++ l)), (Abs (i :: al) (al ++ al)), (Abs (i :: al) []), (Abs (a :: l) l), (Abs (a :: l) al), (Abs (a :: l) (i :: l))
(Abs (a :: l) (i :: al)), (Abs (a :: l) (a :: al)), (Abs (a :: l) (j :: l)), (Abs (a :: l) (j :: al)), (Abs (a :: l) (merge l l)), (Abs (a :: l) (merge l al)), (Abs (a :: l) (merge al l)), (Abs (a :: l) (merge al al)), (Abs (a :: l) (insert i l)), (Abs (a :: l) (insert i al))
(Abs (a :: l) (insert a l)), (Abs (a :: l) (insert a al)), (Abs (a :: l) (insert j l)), (Abs (a :: l) (insert j al)), (Abs (a :: l) (maybe_swap l)), (Abs (a :: l) (maybe_swap al)), (Abs (a :: l) (l ++ l)), (Abs (a :: l) (l ++ al)), (Abs (a :: l) (al ++ l)), (Abs (a :: l) (al ++ al))
(Abs (a :: l) []), (Abs (a :: al) l), (Abs (a :: al) al), (Abs (a :: al) (i :: l)), (Abs (a :: al) (i :: al)), (Abs (a :: al) (a :: l)), (Abs (a :: al) (j :: l)), (Abs (a :: al) (j :: al)), (Abs (a :: al) (merge l l)), (Abs (a :: al) (merge l al))
(Abs (a :: al) (merge al l)), (Abs (a :: al) (merge al al)), (Abs (a :: al) (insert i l)), (Abs (a :: al) (insert i al)), (Abs (a :: al) (insert a l)), (Abs (a :: al) (insert a al)), (Abs (a :: al) (insert j l)), (Abs (a :: al) (insert j al)), (Abs (a :: al) (maybe_swap l)), (Abs (a :: al) (maybe_swap al))
(Abs (a :: al) (l ++ l)), (Abs (a :: al) (l ++ al)), (Abs (a :: al) (al ++ l)), (Abs (a :: al) (al ++ al)), (Abs (a :: al) []), (Abs (j :: l) l), (Abs (j :: l) al), (Abs (j :: l) (i :: l)), (Abs (j :: l) (i :: al)), (Abs (j :: l) (a :: l))
(Abs (j :: l) (a :: al)), (Abs (j :: l) (j :: al)), (Abs (j :: l) (merge l l)), (Abs (j :: l) (merge l al)), (Abs (j :: l) (merge al l)), (Abs (j :: l) (merge al al)), (Abs (j :: l) (insert i l)), (Abs (j :: l) (insert i al)), (Abs (j :: l) (insert a l)), (Abs (j :: l) (insert a al))
(Abs (j :: l) (insert j l)), (Abs (j :: l) (insert j al)), (Abs (j :: l) (maybe_swap l)), (Abs (j :: l) (maybe_swap al)), (Abs (j :: l) (l ++ l)), (Abs (j :: l) (l ++ al)), (Abs (j :: l) (al ++ l)), (Abs (j :: l) (al ++ al)), (Abs (j :: l) []), (Abs (j :: al) l)
(Abs (j :: al) al), (Abs (j :: al) (i :: l)), (Abs (j :: al) (i :: al)), (Abs (j :: al) (a :: l)), (Abs (j :: al) (a :: al)), (Abs (j :: al) (j :: l)), (Abs (j :: al) (merge l l)), (Abs (j :: al) (merge l al)), (Abs (j :: al) (merge al l)), (Abs (j :: al) (merge al al))
(Abs (j :: al) (insert i l)), (Abs (j :: al) (insert i al)), (Abs (j :: al) (insert a l)), (Abs (j :: al) (insert a al)), (Abs (j :: al) (insert j l)), (Abs (j :: al) (insert j al)), (Abs (j :: al) (maybe_swap l)), (Abs (j :: al) (maybe_swap al)), (Abs (j :: al) (l ++ l)), (Abs (j :: al) (l ++ al))
(Abs (j :: al) (al ++ l)), (Abs (j :: al) (al ++ al)), (Abs (j :: al) []), (Abs (merge l l) l), (Abs (merge l l) al), (Abs (merge l l) (i :: l)), (Abs (merge l l) (i :: al)), (Abs (merge l l) (a :: l)), (Abs (merge l l) (a :: al)), (Abs (merge l l) (j :: l))
(Abs (merge l l) (j :: al)), (Abs (merge l l) (merge l al)), (Abs (merge l l) (merge al l)), (Abs (merge l l) (merge al al)), (Abs (merge l l) (insert i l)), (Abs (merge l l) (insert i al)), (Abs (merge l l) (insert a l)), (Abs (merge l l) (insert a al)), (Abs (merge l l) (insert j l)), (Abs (merge l l) (insert j al))
(Abs (merge l l) (maybe_swap l)), (Abs (merge l l) (maybe_swap al)), (Abs (merge l l) (l ++ l)), (Abs (merge l l) (l ++ al)), (Abs (merge l l) (al ++ l)), (Abs (merge l l) (al ++ al)), (Abs (merge l l) []), (Abs (merge l al) l), (Abs (merge l al) al), (Abs (merge l al) (i :: l))
(Abs (merge l al) (i :: al)), (Abs (merge l al) (a :: l)), (Abs (merge l al) (a :: al)), (Abs (merge l al) (j :: l)), (Abs (merge l al) (j :: al)), (Abs (merge l al) (merge l l)), (Abs (merge l al) (merge al l)), (Abs (merge l al) (merge al al)), (Abs (merge l al) (insert i l)), (Abs (merge l al) (insert i al))
(Abs (merge l al) (insert a l)), (Abs (merge l al) (insert a al)), (Abs (merge l al) (insert j l)), (Abs (merge l al) (insert j al)), (Abs (merge l al) (maybe_swap l)), (Abs (merge l al) (maybe_swap al)), (Abs (merge l al) (l ++ l)), (Abs (merge l al) (l ++ al)), (Abs (merge l al) (al ++ l)), (Abs (merge l al) (al ++ al))
(Abs (merge l al) []), (Abs (merge al l) l), (Abs (merge al l) al), (Abs (merge al l) (i :: l)), (Abs (merge al l) (i :: al)), (Abs (merge al l) (a :: l)), (Abs (merge al l) (a :: al)), (Abs (merge al l) (j :: l)), (Abs (merge al l) (j :: al)), (Abs (merge al l) (merge l l))
(Abs (merge al l) (merge l al)), (Abs (merge al l) (merge al al)), (Abs (merge al l) (insert i l)), (Abs (merge al l) (insert i al)), (Abs (merge al l) (insert a l)), (Abs (merge al l) (insert a al)), (Abs (merge al l) (insert j l)), (Abs (merge al l) (insert j al)), (Abs (merge al l) (maybe_swap l)), (Abs (merge al l) (maybe_swap al))
(Abs (merge al l) (l ++ l)), (Abs (merge al l) (l ++ al)), (Abs (merge al l) (al ++ l)), (Abs (merge al l) (al ++ al)), (Abs (merge al l) []), (Abs (merge al al) l), (Abs (merge al al) al), (Abs (merge al al) (i :: l)), (Abs (merge al al) (i :: al)), (Abs (merge al al) (a :: l))
(Abs (merge al al) (a :: al)), (Abs (merge al al) (j :: l)), (Abs (merge al al) (j :: al)), (Abs (merge al al) (merge l l)), (Abs (merge al al) (merge l al)), (Abs (merge al al) (merge al l)), (Abs (merge al al) (insert i l)), (Abs (merge al al) (insert i al)), (Abs (merge al al) (insert a l)), (Abs (merge al al) (insert a al))
(Abs (merge al al) (insert j l)), (Abs (merge al al) (insert j al)), (Abs (merge al al) (maybe_swap l)), (Abs (merge al al) (maybe_swap al)), (Abs (merge al al) (l ++ l)), (Abs (merge al al) (l ++ al)), (Abs (merge al al) (al ++ l)), (Abs (merge al al) (al ++ al)), (Abs (merge al al) []), (Abs (insert i l) l)
(Abs (insert i l) al), (Abs (insert i l) (i :: l)), (Abs (insert i l) (i :: al)), (Abs (insert i l) (a :: l)), (Abs (insert i l) (a :: al)), (Abs (insert i l) (j :: l)), (Abs (insert i l) (j :: al)), (Abs (insert i l) (merge l l)), (Abs (insert i l) (merge l al)), (Abs (insert i l) (merge al l))
(Abs (insert i l) (merge al al)), (Abs (insert i l) (insert i al)), (Abs (insert i l) (insert a l)), (Abs (insert i l) (insert a al)), (Abs (insert i l) (insert j l)), (Abs (insert i l) (insert j al)), (Abs (insert i l) (maybe_swap l)), (Abs (insert i l) (maybe_swap al)), (Abs (insert i l) (l ++ l)), (Abs (insert i l) (l ++ al))
(Abs (insert i l) (al ++ l)), (Abs (insert i l) (al ++ al)), (Abs (insert i l) []), (Abs (insert i al) l), (Abs (insert i al) al), (Abs (insert i al) (i :: l)), (Abs (insert i al) (i :: al)), (Abs (insert i al) (a :: l)), (Abs (insert i al) (a :: al)), (Abs (insert i al) (j :: l))
(Abs (insert i al) (j :: al)), (Abs (insert i al) (merge l l)), (Abs (insert i al) (merge l al)), (Abs (insert i al) (merge al l)), (Abs (insert i al) (merge al al)), (Abs (insert i al) (insert i l)), (Abs (insert i al) (insert a l)), (Abs (insert i al) (insert a al)), (Abs (insert i al) (insert j l)), (Abs (insert i al) (insert j al))
(Abs (insert i al) (maybe_swap l)), (Abs (insert i al) (maybe_swap al)), (Abs (insert i al) (l ++ l)), (Abs (insert i al) (l ++ al)), (Abs (insert i al) (al ++ l)), (Abs (insert i al) (al ++ al)), (Abs (insert i al) []), (Abs (insert a l) l), (Abs (insert a l) al), (Abs (insert a l) (i :: l))
(Abs (insert a l) (i :: al)), (Abs (insert a l) (a :: l)), (Abs (insert a l) (a :: al)), (Abs (insert a l) (j :: l)), (Abs (insert a l) (j :: al)), (Abs (insert a l) (merge l l)), (Abs (insert a l) (merge l al)), (Abs (insert a l) (merge al l)), (Abs (insert a l) (merge al al)), (Abs (insert a l) (insert i l))
(Abs (insert a l) (insert i al)), (Abs (insert a l) (insert a al)), (Abs (insert a l) (insert j l)), (Abs (insert a l) (insert j al)), (Abs (insert a l) (maybe_swap l)), (Abs (insert a l) (maybe_swap al)), (Abs (insert a l) (l ++ l)), (Abs (insert a l) (l ++ al)), (Abs (insert a l) (al ++ l)), (Abs (insert a l) (al ++ al))
(Abs (insert a l) []), (Abs (insert a al) l), (Abs (insert a al) al), (Abs (insert a al) (i :: l)), (Abs (insert a al) (i :: al)), (Abs (insert a al) (a :: l)), (Abs (insert a al) (a :: al)), (Abs (insert a al) (j :: l)), (Abs (insert a al) (j :: al)), (Abs (insert a al) (merge l l))
(Abs (insert a al) (merge l al)), (Abs (insert a al) (merge al l)), (Abs (insert a al) (merge al al)), (Abs (insert a al) (insert i l)), (Abs (insert a al) (insert i al)), (Abs (insert a al) (insert a l)), (Abs (insert a al) (insert j l)), (Abs (insert a al) (insert j al)), (Abs (insert a al) (maybe_swap l)), (Abs (insert a al) (maybe_swap al))
(Abs (insert a al) (l ++ l)), (Abs (insert a al) (l ++ al)), (Abs (insert a al) (al ++ l)), (Abs (insert a al) (al ++ al)), (Abs (insert a al) []), (Abs (insert j l) l), (Abs (insert j l) al), (Abs (insert j l) (i :: l)), (Abs (insert j l) (i :: al)), (Abs (insert j l) (a :: l))
(Abs (insert j l) (a :: al)), (Abs (insert j l) (j :: l)), (Abs (insert j l) (j :: al)), (Abs (insert j l) (merge l l)), (Abs (insert j l) (merge l al)), (Abs (insert j l) (merge al l)), (Abs (insert j l) (merge al al)), (Abs (insert j l) (insert i l)), (Abs (insert j l) (insert i al)), (Abs (insert j l) (insert a l))
(Abs (insert j l) (insert a al)), (Abs (insert j l) (insert j al)), (Abs (insert j l) (maybe_swap l)), (Abs (insert j l) (maybe_swap al)), (Abs (insert j l) (l ++ l)), (Abs (insert j l) (l ++ al)), (Abs (insert j l) (al ++ l)), (Abs (insert j l) (al ++ al)), (Abs (insert j l) []), (Abs (insert j al) l)
(Abs (insert j al) al), (Abs (insert j al) (i :: l)), (Abs (insert j al) (i :: al)), (Abs (insert j al) (a :: l)), (Abs (insert j al) (a :: al)), (Abs (insert j al) (j :: l)), (Abs (insert j al) (j :: al)), (Abs (insert j al) (merge l l)), (Abs (insert j al) (merge l al)), (Abs (insert j al) (merge al l))
(Abs (insert j al) (merge al al)), (Abs (insert j al) (insert i l)), (Abs (insert j al) (insert i al)), (Abs (insert j al) (insert a l)), (Abs (insert j al) (insert a al)), (Abs (insert j al) (insert j l)), (Abs (insert j al) (maybe_swap l)), (Abs (insert j al) (maybe_swap al)), (Abs (insert j al) (l ++ l)), (Abs (insert j al) (l ++ al))
(Abs (insert j al) (al ++ l)), (Abs (insert j al) (al ++ al)), (Abs (insert j al) []), (Abs (maybe_swap l) l), (Abs (maybe_swap l) al), (Abs (maybe_swap l) (i :: l)), (Abs (maybe_swap l) (i :: al)), (Abs (maybe_swap l) (a :: l)), (Abs (maybe_swap l) (a :: al)), (Abs (maybe_swap l) (j :: l))
(Abs (maybe_swap l) (j :: al)), (Abs (maybe_swap l) (merge l l)), (Abs (maybe_swap l) (merge l al)), (Abs (maybe_swap l) (merge al l)), (Abs (maybe_swap l) (merge al al)), (Abs (maybe_swap l) (insert i l)), (Abs (maybe_swap l) (insert i al)), (Abs (maybe_swap l) (insert a l)), (Abs (maybe_swap l) (insert a al)), (Abs (maybe_swap l) (insert j l))
(Abs (maybe_swap l) (insert j al)), (Abs (maybe_swap l) (maybe_swap al)), (Abs (maybe_swap l) (l ++ l)), (Abs (maybe_swap l) (l ++ al)), (Abs (maybe_swap l) (al ++ l)), (Abs (maybe_swap l) (al ++ al)), (Abs (maybe_swap l) []), (Abs (maybe_swap al) l), (Abs (maybe_swap al) al), (Abs (maybe_swap al) (i :: l))
(Abs (maybe_swap al) (i :: al)), (Abs (maybe_swap al) (a :: l)), (Abs (maybe_swap al) (a :: al)), (Abs (maybe_swap al) (j :: l)), (Abs (maybe_swap al) (j :: al)), (Abs (maybe_swap al) (merge l l)), (Abs (maybe_swap al) (merge l al)), (Abs (maybe_swap al) (merge al l)), (Abs (maybe_swap al) (merge al al)), (Abs (maybe_swap al) (insert i l))
(Abs (maybe_swap al) (insert i al)), (Abs (maybe_swap al) (insert a l)), (Abs (maybe_swap al) (insert a al)), (Abs (maybe_swap al) (insert j l)), (Abs (maybe_swap al) (insert j al)), (Abs (maybe_swap al) (maybe_swap l)), (Abs (maybe_swap al) (l ++ l)), (Abs (maybe_swap al) (l ++ al)), (Abs (maybe_swap al) (al ++ l)), (Abs (maybe_swap al) (al ++ al))
(Abs (maybe_swap al) []), (Abs (l ++ l) l), (Abs (l ++ l) al), (Abs (l ++ l) (i :: l)), (Abs (l ++ l) (i :: al)), (Abs (l ++ l) (a :: l)), (Abs (l ++ l) (a :: al)), (Abs (l ++ l) (j :: l)), (Abs (l ++ l) (j :: al)), (Abs (l ++ l) (merge l l))
(Abs (l ++ l) (merge l al)), (Abs (l ++ l) (merge al l)), (Abs (l ++ l) (merge al al)), (Abs (l ++ l) (insert i l)), (Abs (l ++ l) (insert i al)), (Abs (l ++ l) (insert a l)), (Abs (l ++ l) (insert a al)), (Abs (l ++ l) (insert j l)), (Abs (l ++ l) (insert j al)), (Abs (l ++ l) (maybe_swap l))
(Abs (l ++ l) (maybe_swap al)), (Abs (l ++ l) (l ++ al)), (Abs (l ++ l) (al ++ l)), (Abs (l ++ l) (al ++ al)), (Abs (l ++ l) []), (Abs (l ++ al) l), (Abs (l ++ al) al), (Abs (l ++ al) (i :: l)), (Abs (l ++ al) (i :: al)), (Abs (l ++ al) (a :: l))
(Abs (l ++ al) (a :: al)), (Abs (l ++ al) (j :: l)), (Abs (l ++ al) (j :: al)), (Abs (l ++ al) (merge l l)), (Abs (l ++ al) (merge l al)), (Abs (l ++ al) (merge al l)), (Abs (l ++ al) (merge al al)), (Abs (l ++ al) (insert i l)), (Abs (l ++ al) (insert i al)), (Abs (l ++ al) (insert a l))
(Abs (l ++ al) (insert a al)), (Abs (l ++ al) (insert j l)), (Abs (l ++ al) (insert j al)), (Abs (l ++ al) (maybe_swap l)), (Abs (l ++ al) (maybe_swap al)), (Abs (l ++ al) (l ++ l)), (Abs (l ++ al) (al ++ l)), (Abs (l ++ al) (al ++ al)), (Abs (l ++ al) []), (Abs (al ++ l) l)
(Abs (al ++ l) al), (Abs (al ++ l) (i :: l)), (Abs (al ++ l) (i :: al)), (Abs (al ++ l) (a :: l)), (Abs (al ++ l) (a :: al)), (Abs (al ++ l) (j :: l)), (Abs (al ++ l) (j :: al)), (Abs (al ++ l) (merge l l)), (Abs (al ++ l) (merge l al)), (Abs (al ++ l) (merge al l))
(Abs (al ++ l) (merge al al)), (Abs (al ++ l) (insert i l)), (Abs (al ++ l) (insert i al)), (Abs (al ++ l) (insert a l)), (Abs (al ++ l) (insert a al)), (Abs (al ++ l) (insert j l)), (Abs (al ++ l) (insert j al)), (Abs (al ++ l) (maybe_swap l)), (Abs (al ++ l) (maybe_swap al)), (Abs (al ++ l) (l ++ l))
(Abs (al ++ l) (l ++ al)), (Abs (al ++ l) (al ++ al)), (Abs (al ++ l) []), (Abs (al ++ al) l), (Abs (al ++ al) al), (Abs (al ++ al) (i :: l)), (Abs (al ++ al) (i :: al)), (Abs (al ++ al) (a :: l)), (Abs (al ++ al) (a :: al)), (Abs (al ++ al) (j :: l))
(Abs (al ++ al) (j :: al)), (Abs (al ++ al) (merge l l)), (Abs (al ++ al) (merge l al)), (Abs (al ++ al) (merge al l)), (Abs (al ++ al) (merge al al)), (Abs (al ++ al) (insert i l)), (Abs (al ++ al) (insert i al)), (Abs (al ++ al) (insert a l)), (Abs (al ++ al) (insert a al)), (Abs (al ++ al) (insert j l))
(Abs (al ++ al) (insert j al)), (Abs (al ++ al) (maybe_swap l)), (Abs (al ++ al) (maybe_swap al)), (Abs (al ++ al) (l ++ l)), (Abs (al ++ al) (l ++ al)), (Abs (al ++ al) (al ++ l)), (Abs (al ++ al) []), (Abs [] l), (Abs [] al), (Abs [] (i :: l))
(Abs [] (i :: al)), (Abs [] (a :: l)), (Abs [] (a :: al)), (Abs [] (j :: l)), (Abs [] (j :: al)), (Abs [] (merge l l)), (Abs [] (merge l al)), (Abs [] (merge al l)), (Abs [] (merge al al)), (Abs [] (insert i l))
(Abs [] (insert i al)), (Abs [] (insert a l)), (Abs [] (insert a al)), (Abs [] (insert j l)), (Abs [] (insert j al)), (Abs [] (maybe_swap l)), (Abs [] (maybe_swap al)), (Abs [] (l ++ l)), (Abs [] (l ++ al)), (Abs [] (al ++ l))
(Abs [] (al ++ al)), (priq (i :: l)), (priq (i :: al)), (priq (a :: l)), (priq (a :: al)), (priq (j :: l)), (priq (j :: al)), (priq (merge l l)), (priq (merge l al)), (priq (merge al l))
(priq (merge al al)), (priq (insert i l)), (priq (insert i al)), (priq (insert a l)), (priq (insert a al)), (priq (insert j l)), (priq (insert j al)), (priq (maybe_swap l)), (priq (maybe_swap al)), (priq (l ++ l))
(priq (l ++ al)), (priq (al ++ l)), (priq (al ++ al)), (priq []), (Permutation l (i :: l)), (Permutation l (i :: al)), (Permutation l (a :: l)), (Permutation l (a :: al)), (Permutation l (j :: l)), (Permutation l (j :: al))
(Permutation l (merge l l)), (Permutation l (merge l al)), (Permutation l (merge al l)), (Permutation l (merge al al)), (Permutation l (insert i l)), (Permutation l (insert i al)), (Permutation l (insert a l)), (Permutation l (insert a al)), (Permutation l (insert j l)), (Permutation l (insert j al))
(Permutation l (maybe_swap l)), (Permutation l (maybe_swap al)), (Permutation l (l ++ l)), (Permutation l (l ++ al)), (Permutation l (al ++ l)), (Permutation l (al ++ al)), (Permutation l []), (Permutation al (i :: l)), (Permutation al (i :: al)), (Permutation al (a :: l))
(Permutation al (a :: al)), (Permutation al (j :: l)), (Permutation al (j :: al)), (Permutation al (merge l l)), (Permutation al (merge l al)), (Permutation al (merge al l)), (Permutation al (merge al al)), (Permutation al (insert i l)), (Permutation al (insert i al)), (Permutation al (insert a l))
(Permutation al (insert a al)), (Permutation al (insert j l)), (Permutation al (insert j al)), (Permutation al (maybe_swap l)), (Permutation al (maybe_swap al)), (Permutation al (l ++ l)), (Permutation al (l ++ al)), (Permutation al (al ++ l)), (Permutation al (al ++ al)), (Permutation al [])
(Permutation (i :: l) l), (Permutation (i :: l) al), (Permutation (i :: l) (i :: al)), (Permutation (i :: l) (a :: l)), (Permutation (i :: l) (a :: al)), (Permutation (i :: l) (j :: l)), (Permutation (i :: l) (j :: al)), (Permutation (i :: l) (merge l l)), (Permutation (i :: l) (merge l al)), (Permutation (i :: l) (merge al l))
(Permutation (i :: l) (merge al al)), (Permutation (i :: l) (insert i l)), (Permutation (i :: l) (insert i al)), (Permutation (i :: l) (insert a l)), (Permutation (i :: l) (insert a al)), (Permutation (i :: l) (insert j l)), (Permutation (i :: l) (insert j al)), (Permutation (i :: l) (maybe_swap l)), (Permutation (i :: l) (maybe_swap al)), (Permutation (i :: l) (l ++ l))
(Permutation (i :: l) (l ++ al)), (Permutation (i :: l) (al ++ l)), (Permutation (i :: l) (al ++ al)), (Permutation (i :: l) []), (Permutation (i :: al) l), (Permutation (i :: al) al), (Permutation (i :: al) (i :: l)), (Permutation (i :: al) (a :: l)), (Permutation (i :: al) (a :: al)), (Permutation (i :: al) (j :: l))
(Permutation (i :: al) (j :: al)), (Permutation (i :: al) (merge l l)), (Permutation (i :: al) (merge l al)), (Permutation (i :: al) (merge al l)), (Permutation (i :: al) (merge al al)), (Permutation (i :: al) (insert i l)), (Permutation (i :: al) (insert i al)), (Permutation (i :: al) (insert a l)), (Permutation (i :: al) (insert a al)), (Permutation (i :: al) (insert j l))
(Permutation (i :: al) (insert j al)), (Permutation (i :: al) (maybe_swap l)), (Permutation (i :: al) (maybe_swap al)), (Permutation (i :: al) (l ++ l)), (Permutation (i :: al) (l ++ al)), (Permutation (i :: al) (al ++ l)), (Permutation (i :: al) (al ++ al)), (Permutation (i :: al) []), (Permutation (a :: l) l), (Permutation (a :: l) al)
(Permutation (a :: l) (i :: l)), (Permutation (a :: l) (i :: al)), (Permutation (a :: l) (a :: al)), (Permutation (a :: l) (j :: l)), (Permutation (a :: l) (j :: al)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l al)), (Permutation (a :: l) (merge al l)), (Permutation (a :: l) (merge al al)), (Permutation (a :: l) (insert i l))
(Permutation (a :: l) (insert i al)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a al)), (Permutation (a :: l) (insert j l)), (Permutation (a :: l) (insert j al)), (Permutation (a :: l) (maybe_swap l)), (Permutation (a :: l) (maybe_swap al)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ al)), (Permutation (a :: l) (al ++ l))
(Permutation (a :: l) (al ++ al)), (Permutation (a :: l) []), (Permutation (a :: al) l), (Permutation (a :: al) al), (Permutation (a :: al) (i :: l)), (Permutation (a :: al) (i :: al)), (Permutation (a :: al) (a :: l)), (Permutation (a :: al) (j :: l)), (Permutation (a :: al) (j :: al)), (Permutation (a :: al) (merge l l))
(Permutation (a :: al) (merge l al)), (Permutation (a :: al) (merge al l)), (Permutation (a :: al) (merge al al)), (Permutation (a :: al) (insert i l)), (Permutation (a :: al) (insert i al)), (Permutation (a :: al) (insert a l)), (Permutation (a :: al) (insert a al)), (Permutation (a :: al) (insert j l)), (Permutation (a :: al) (insert j al)), (Permutation (a :: al) (maybe_swap l))
(Permutation (a :: al) (maybe_swap al)), (Permutation (a :: al) (l ++ l)), (Permutation (a :: al) (l ++ al)), (Permutation (a :: al) (al ++ l)), (Permutation (a :: al) (al ++ al)), (Permutation (a :: al) []), (Permutation (j :: l) l), (Permutation (j :: l) al), (Permutation (j :: l) (i :: l)), (Permutation (j :: l) (i :: al))
(Permutation (j :: l) (a :: l)), (Permutation (j :: l) (a :: al)), (Permutation (j :: l) (j :: al)), (Permutation (j :: l) (merge l l)), (Permutation (j :: l) (merge l al)), (Permutation (j :: l) (merge al l)), (Permutation (j :: l) (merge al al)), (Permutation (j :: l) (insert i l)), (Permutation (j :: l) (insert i al)), (Permutation (j :: l) (insert a l))
(Permutation (j :: l) (insert a al)), (Permutation (j :: l) (insert j l)), (Permutation (j :: l) (insert j al)), (Permutation (j :: l) (maybe_swap l)), (Permutation (j :: l) (maybe_swap al)), (Permutation (j :: l) (l ++ l)), (Permutation (j :: l) (l ++ al)), (Permutation (j :: l) (al ++ l)), (Permutation (j :: l) (al ++ al)), (Permutation (j :: l) [])
(Permutation (j :: al) l), (Permutation (j :: al) al), (Permutation (j :: al) (i :: l)), (Permutation (j :: al) (i :: al)), (Permutation (j :: al) (a :: l)), (Permutation (j :: al) (a :: al)), (Permutation (j :: al) (j :: l)), (Permutation (j :: al) (merge l l)), (Permutation (j :: al) (merge l al)), (Permutation (j :: al) (merge al l))
(Permutation (j :: al) (merge al al)), (Permutation (j :: al) (insert i l)), (Permutation (j :: al) (insert i al)), (Permutation (j :: al) (insert a l)), (Permutation (j :: al) (insert a al)), (Permutation (j :: al) (insert j l)), (Permutation (j :: al) (insert j al)), (Permutation (j :: al) (maybe_swap l)), (Permutation (j :: al) (maybe_swap al)), (Permutation (j :: al) (l ++ l))
(Permutation (j :: al) (l ++ al)), (Permutation (j :: al) (al ++ l)), (Permutation (j :: al) (al ++ al)), (Permutation (j :: al) []), (Permutation (merge l l) l), (Permutation (merge l l) al), (Permutation (merge l l) (i :: l)), (Permutation (merge l l) (i :: al)), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a :: al))
(Permutation (merge l l) (j :: l)), (Permutation (merge l l) (j :: al)), (Permutation (merge l l) (merge l al)), (Permutation (merge l l) (merge al l)), (Permutation (merge l l) (merge al al)), (Permutation (merge l l) (insert i l)), (Permutation (merge l l) (insert i al)), (Permutation (merge l l) (insert a l)), (Permutation (merge l l) (insert a al)), (Permutation (merge l l) (insert j l))
(Permutation (merge l l) (insert j al)), (Permutation (merge l l) (maybe_swap l)), (Permutation (merge l l) (maybe_swap al)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ al)), (Permutation (merge l l) (al ++ l)), (Permutation (merge l l) (al ++ al)), (Permutation (merge l l) []), (Permutation (merge l al) l), (Permutation (merge l al) al)
(Permutation (merge l al) (i :: l)), (Permutation (merge l al) (i :: al)), (Permutation (merge l al) (a :: l)), (Permutation (merge l al) (a :: al)), (Permutation (merge l al) (j :: l)), (Permutation (merge l al) (j :: al)), (Permutation (merge l al) (merge l l)), (Permutation (merge l al) (merge al l)), (Permutation (merge l al) (merge al al)), (Permutation (merge l al) (insert i l))
(Permutation (merge l al) (insert i al)), (Permutation (merge l al) (insert a l)), (Permutation (merge l al) (insert a al)), (Permutation (merge l al) (insert j l)), (Permutation (merge l al) (insert j al)), (Permutation (merge l al) (maybe_swap l)), (Permutation (merge l al) (maybe_swap al)), (Permutation (merge l al) (l ++ l)), (Permutation (merge l al) (l ++ al)), (Permutation (merge l al) (al ++ l))
(Permutation (merge l al) (al ++ al)), (Permutation (merge l al) []), (Permutation (merge al l) l), (Permutation (merge al l) al), (Permutation (merge al l) (i :: l)), (Permutation (merge al l) (i :: al)), (Permutation (merge al l) (a :: l)), (Permutation (merge al l) (a :: al)), (Permutation (merge al l) (j :: l)), (Permutation (merge al l) (j :: al))
(Permutation (merge al l) (merge l l)), (Permutation (merge al l) (merge l al)), (Permutation (merge al l) (merge al al)), (Permutation (merge al l) (insert i l)), (Permutation (merge al l) (insert i al)), (Permutation (merge al l) (insert a l)), (Permutation (merge al l) (insert a al)), (Permutation (merge al l) (insert j l)), (Permutation (merge al l) (insert j al)), (Permutation (merge al l) (maybe_swap l))
(Permutation (merge al l) (maybe_swap al)), (Permutation (merge al l) (l ++ l)), (Permutation (merge al l) (l ++ al)), (Permutation (merge al l) (al ++ l)), (Permutation (merge al l) (al ++ al)), (Permutation (merge al l) []), (Permutation (merge al al) l), (Permutation (merge al al) al), (Permutation (merge al al) (i :: l)), (Permutation (merge al al) (i :: al))
(Permutation (merge al al) (a :: l)), (Permutation (merge al al) (a :: al)), (Permutation (merge al al) (j :: l)), (Permutation (merge al al) (j :: al)), (Permutation (merge al al) (merge l l)), (Permutation (merge al al) (merge l al)), (Permutation (merge al al) (merge al l)), (Permutation (merge al al) (insert i l)), (Permutation (merge al al) (insert i al)), (Permutation (merge al al) (insert a l))
(Permutation (merge al al) (insert a al)), (Permutation (merge al al) (insert j l)), (Permutation (merge al al) (insert j al)), (Permutation (merge al al) (maybe_swap l)), (Permutation (merge al al) (maybe_swap al)), (Permutation (merge al al) (l ++ l)), (Permutation (merge al al) (l ++ al)), (Permutation (merge al al) (al ++ l)), (Permutation (merge al al) (al ++ al)), (Permutation (merge al al) [])
(Permutation (insert i l) l), (Permutation (insert i l) al), (Permutation (insert i l) (i :: l)), (Permutation (insert i l) (i :: al)), (Permutation (insert i l) (a :: l)), (Permutation (insert i l) (a :: al)), (Permutation (insert i l) (j :: l)), (Permutation (insert i l) (j :: al)), (Permutation (insert i l) (merge l l)), (Permutation (insert i l) (merge l al))
(Permutation (insert i l) (merge al l)), (Permutation (insert i l) (merge al al)), (Permutation (insert i l) (insert i al)), (Permutation (insert i l) (insert a l)), (Permutation (insert i l) (insert a al)), (Permutation (insert i l) (insert j l)), (Permutation (insert i l) (insert j al)), (Permutation (insert i l) (maybe_swap l)), (Permutation (insert i l) (maybe_swap al)), (Permutation (insert i l) (l ++ l))
(Permutation (insert i l) (l ++ al)), (Permutation (insert i l) (al ++ l)), (Permutation (insert i l) (al ++ al)), (Permutation (insert i l) []), (Permutation (insert i al) l), (Permutation (insert i al) al), (Permutation (insert i al) (i :: l)), (Permutation (insert i al) (i :: al)), (Permutation (insert i al) (a :: l)), (Permutation (insert i al) (a :: al))
(Permutation (insert i al) (j :: l)), (Permutation (insert i al) (j :: al)), (Permutation (insert i al) (merge l l)), (Permutation (insert i al) (merge l al)), (Permutation (insert i al) (merge al l)), (Permutation (insert i al) (merge al al)), (Permutation (insert i al) (insert i l)), (Permutation (insert i al) (insert a l)), (Permutation (insert i al) (insert a al)), (Permutation (insert i al) (insert j l))
(Permutation (insert i al) (insert j al)), (Permutation (insert i al) (maybe_swap l)), (Permutation (insert i al) (maybe_swap al)), (Permutation (insert i al) (l ++ l)), (Permutation (insert i al) (l ++ al)), (Permutation (insert i al) (al ++ l)), (Permutation (insert i al) (al ++ al)), (Permutation (insert i al) []), (Permutation (insert a l) l), (Permutation (insert a l) al)
(Permutation (insert a l) (i :: l)), (Permutation (insert a l) (i :: al)), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: al)), (Permutation (insert a l) (j :: l)), (Permutation (insert a l) (j :: al)), (Permutation (insert a l) (merge l l)), (Permutation (insert a l) (merge l al)), (Permutation (insert a l) (merge al l)), (Permutation (insert a l) (merge al al))
(Permutation (insert a l) (insert i l)), (Permutation (insert a l) (insert i al)), (Permutation (insert a l) (insert a al)), (Permutation (insert a l) (insert j l)), (Permutation (insert a l) (insert j al)), (Permutation (insert a l) (maybe_swap l)), (Permutation (insert a l) (maybe_swap al)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ al)), (Permutation (insert a l) (al ++ l))
(Permutation (insert a l) (al ++ al)), (Permutation (insert a l) []), (Permutation (insert a al) l), (Permutation (insert a al) al), (Permutation (insert a al) (i :: l)), (Permutation (insert a al) (i :: al)), (Permutation (insert a al) (a :: l)), (Permutation (insert a al) (a :: al)), (Permutation (insert a al) (j :: l)), (Permutation (insert a al) (j :: al))
(Permutation (insert a al) (merge l l)), (Permutation (insert a al) (merge l al)), (Permutation (insert a al) (merge al l)), (Permutation (insert a al) (merge al al)), (Permutation (insert a al) (insert i l)), (Permutation (insert a al) (insert i al)), (Permutation (insert a al) (insert a l)), (Permutation (insert a al) (insert j l)), (Permutation (insert a al) (insert j al)), (Permutation (insert a al) (maybe_swap l))
(Permutation (insert a al) (maybe_swap al)), (Permutation (insert a al) (l ++ l)), (Permutation (insert a al) (l ++ al)), (Permutation (insert a al) (al ++ l)), (Permutation (insert a al) (al ++ al)), (Permutation (insert a al) []), (Permutation (insert j l) l), (Permutation (insert j l) al), (Permutation (insert j l) (i :: l)), (Permutation (insert j l) (i :: al))
(Permutation (insert j l) (a :: l)), (Permutation (insert j l) (a :: al)), (Permutation (insert j l) (j :: l)), (Permutation (insert j l) (j :: al)), (Permutation (insert j l) (merge l l)), (Permutation (insert j l) (merge l al)), (Permutation (insert j l) (merge al l)), (Permutation (insert j l) (merge al al)), (Permutation (insert j l) (insert i l)), (Permutation (insert j l) (insert i al))
(Permutation (insert j l) (insert a l)), (Permutation (insert j l) (insert a al)), (Permutation (insert j l) (insert j al)), (Permutation (insert j l) (maybe_swap l)), (Permutation (insert j l) (maybe_swap al)), (Permutation (insert j l) (l ++ l)), (Permutation (insert j l) (l ++ al)), (Permutation (insert j l) (al ++ l)), (Permutation (insert j l) (al ++ al)), (Permutation (insert j l) [])
(Permutation (insert j al) l), (Permutation (insert j al) al), (Permutation (insert j al) (i :: l)), (Permutation (insert j al) (i :: al)), (Permutation (insert j al) (a :: l)), (Permutation (insert j al) (a :: al)), (Permutation (insert j al) (j :: l)), (Permutation (insert j al) (j :: al)), (Permutation (insert j al) (merge l l)), (Permutation (insert j al) (merge l al))
(Permutation (insert j al) (merge al l)), (Permutation (insert j al) (merge al al)), (Permutation (insert j al) (insert i l)), (Permutation (insert j al) (insert i al)), (Permutation (insert j al) (insert a l)), (Permutation (insert j al) (insert a al)), (Permutation (insert j al) (insert j l)), (Permutation (insert j al) (maybe_swap l)), (Permutation (insert j al) (maybe_swap al)), (Permutation (insert j al) (l ++ l))
(Permutation (insert j al) (l ++ al)), (Permutation (insert j al) (al ++ l)), (Permutation (insert j al) (al ++ al)), (Permutation (insert j al) []), (Permutation (maybe_swap l) l), (Permutation (maybe_swap l) al), (Permutation (maybe_swap l) (i :: l)), (Permutation (maybe_swap l) (i :: al)), (Permutation (maybe_swap l) (a :: l)), (Permutation (maybe_swap l) (a :: al))
(Permutation (maybe_swap l) (j :: l)), (Permutation (maybe_swap l) (j :: al)), (Permutation (maybe_swap l) (merge l l)), (Permutation (maybe_swap l) (merge l al)), (Permutation (maybe_swap l) (merge al l)), (Permutation (maybe_swap l) (merge al al)), (Permutation (maybe_swap l) (insert i l)), (Permutation (maybe_swap l) (insert i al)), (Permutation (maybe_swap l) (insert a l)), (Permutation (maybe_swap l) (insert a al))
(Permutation (maybe_swap l) (insert j l)), (Permutation (maybe_swap l) (insert j al)), (Permutation (maybe_swap l) (maybe_swap al)), (Permutation (maybe_swap l) (l ++ l)), (Permutation (maybe_swap l) (l ++ al)), (Permutation (maybe_swap l) (al ++ l)), (Permutation (maybe_swap l) (al ++ al)), (Permutation (maybe_swap l) []), (Permutation (maybe_swap al) l), (Permutation (maybe_swap al) al)
(Permutation (maybe_swap al) (i :: l)), (Permutation (maybe_swap al) (i :: al)), (Permutation (maybe_swap al) (a :: l)), (Permutation (maybe_swap al) (a :: al)), (Permutation (maybe_swap al) (j :: l)), (Permutation (maybe_swap al) (j :: al)), (Permutation (maybe_swap al) (merge l l)), (Permutation (maybe_swap al) (merge l al)), (Permutation (maybe_swap al) (merge al l)), (Permutation (maybe_swap al) (merge al al))
(Permutation (maybe_swap al) (insert i l)), (Permutation (maybe_swap al) (insert i al)), (Permutation (maybe_swap al) (insert a l)), (Permutation (maybe_swap al) (insert a al)), (Permutation (maybe_swap al) (insert j l)), (Permutation (maybe_swap al) (insert j al)), (Permutation (maybe_swap al) (maybe_swap l)), (Permutation (maybe_swap al) (l ++ l)), (Permutation (maybe_swap al) (l ++ al)), (Permutation (maybe_swap al) (al ++ l))
(Permutation (maybe_swap al) (al ++ al)), (Permutation (maybe_swap al) []), (Permutation (l ++ l) l), (Permutation (l ++ l) al), (Permutation (l ++ l) (i :: l)), (Permutation (l ++ l) (i :: al)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: al)), (Permutation (l ++ l) (j :: l)), (Permutation (l ++ l) (j :: al))
(Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l al)), (Permutation (l ++ l) (merge al l)), (Permutation (l ++ l) (merge al al)), (Permutation (l ++ l) (insert i l)), (Permutation (l ++ l) (insert i al)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a al)), (Permutation (l ++ l) (insert j l)), (Permutation (l ++ l) (insert j al))
(Permutation (l ++ l) (maybe_swap l)), (Permutation (l ++ l) (maybe_swap al)), (Permutation (l ++ l) (l ++ al)), (Permutation (l ++ l) (al ++ l)), (Permutation (l ++ l) (al ++ al)), (Permutation (l ++ l) []), (Permutation (l ++ al) l), (Permutation (l ++ al) al), (Permutation (l ++ al) (i :: l)), (Permutation (l ++ al) (i :: al))
(Permutation (l ++ al) (a :: l)), (Permutation (l ++ al) (a :: al)), (Permutation (l ++ al) (j :: l)), (Permutation (l ++ al) (j :: al)), (Permutation (l ++ al) (merge l l)), (Permutation (l ++ al) (merge l al)), (Permutation (l ++ al) (merge al l)), (Permutation (l ++ al) (merge al al)), (Permutation (l ++ al) (insert i l)), (Permutation (l ++ al) (insert i al))
(Permutation (l ++ al) (insert a l)), (Permutation (l ++ al) (insert a al)), (Permutation (l ++ al) (insert j l)), (Permutation (l ++ al) (insert j al)), (Permutation (l ++ al) (maybe_swap l)), (Permutation (l ++ al) (maybe_swap al)), (Permutation (l ++ al) (l ++ l)), (Permutation (l ++ al) (al ++ l)), (Permutation (l ++ al) (al ++ al)), (Permutation (l ++ al) [])
(Permutation (al ++ l) l), (Permutation (al ++ l) al), (Permutation (al ++ l) (i :: l)), (Permutation (al ++ l) (i :: al)), (Permutation (al ++ l) (a :: l)), (Permutation (al ++ l) (a :: al)), (Permutation (al ++ l) (j :: l)), (Permutation (al ++ l) (j :: al)), (Permutation (al ++ l) (merge l l)), (Permutation (al ++ l) (merge l al))
(Permutation (al ++ l) (merge al l)), (Permutation (al ++ l) (merge al al)), (Permutation (al ++ l) (insert i l)), (Permutation (al ++ l) (insert i al)), (Permutation (al ++ l) (insert a l)), (Permutation (al ++ l) (insert a al)), (Permutation (al ++ l) (insert j l)), (Permutation (al ++ l) (insert j al)), (Permutation (al ++ l) (maybe_swap l)), (Permutation (al ++ l) (maybe_swap al))
(Permutation (al ++ l) (l ++ l)), (Permutation (al ++ l) (l ++ al)), (Permutation (al ++ l) (al ++ al)), (Permutation (al ++ l) []), (Permutation (al ++ al) l), (Permutation (al ++ al) al), (Permutation (al ++ al) (i :: l)), (Permutation (al ++ al) (i :: al)), (Permutation (al ++ al) (a :: l)), (Permutation (al ++ al) (a :: al))
(Permutation (al ++ al) (j :: l)), (Permutation (al ++ al) (j :: al)), (Permutation (al ++ al) (merge l l)), (Permutation (al ++ al) (merge l al)), (Permutation (al ++ al) (merge al l)), (Permutation (al ++ al) (merge al al)), (Permutation (al ++ al) (insert i l)), (Permutation (al ++ al) (insert i al)), (Permutation (al ++ al) (insert a l)), (Permutation (al ++ al) (insert a al))
(Permutation (al ++ al) (insert j l)), (Permutation (al ++ al) (insert j al)), (Permutation (al ++ al) (maybe_swap l)), (Permutation (al ++ al) (maybe_swap al)), (Permutation (al ++ al) (l ++ l)), (Permutation (al ++ al) (l ++ al)), (Permutation (al ++ al) (al ++ l)), (Permutation (al ++ al) []), (Permutation [] l), (Permutation [] al)
(Permutation [] (i :: l)), (Permutation [] (i :: al)), (Permutation [] (a :: l)), (Permutation [] (a :: al)), (Permutation [] (j :: l)), (Permutation [] (j :: al)), (Permutation [] (merge l l)), (Permutation [] (merge l al)), (Permutation [] (merge al l)), (Permutation [] (merge al al))
(Permutation [] (insert i l)), (Permutation [] (insert i al)), (Permutation [] (insert a l)), (Permutation [] (insert a al)), (Permutation [] (insert j l)), (Permutation [] (insert j al)), (Permutation [] (maybe_swap l)), (Permutation [] (maybe_swap al)), (Permutation [] (l ++ l)), (Permutation [] (l ++ al))
(Permutation [] (al ++ l)), (Permutation [] (al ++ al)), (In i (i :: l)), (In i (i :: al)), (In i (a :: l)), (In i (a :: al)), (In i (j :: l)), (In i (j :: al)), (In i (merge l l)), (In i (merge l al))
(In i (merge al l)), (In i (merge al al)), (In i (insert i l)), (In i (insert i al)), (In i (insert a l)), (In i (insert a al)), (In i (insert j l)), (In i (insert j al)), (In i (maybe_swap l)), (In i (maybe_swap al))
(In i (l ++ l)), (In i (l ++ al)), (In i (al ++ l)), (In i (al ++ al)), (In a (i :: l)), (In a (i :: al)), (In a (a :: l)), (In a (a :: al)), (In a (j :: l)), (In a (j :: al))
(In a (merge l l)), (In a (merge l al)), (In a (merge al l)), (In a (merge al al)), (In a (insert i l)), (In a (insert i al)), (In a (insert a l)), (In a (insert a al)), (In a (insert j l)), (In a (insert j al))
(In a (maybe_swap l)), (In a (maybe_swap al)), (In a (l ++ l)), (In a (l ++ al)), (In a (al ++ l)), (In a (al ++ al)), (In j (i :: l)), (In j (i :: al)), (In j (a :: l)), (In j (a :: al))
(In j (j :: l)), (In j (j :: al)), (In j (merge l l)), (In j (merge l al)), (In j (merge al l)), (In j (merge al al)), (In j (insert i l)), (In j (insert i al)), (In j (insert a l)), (In j (insert a al))
(In j (insert j l)), (In j (insert j al)), (In j (maybe_swap l)), (In j (maybe_swap al)), (In j (l ++ l)), (In j (l ++ al)), (In j (al ++ l)), (In j (al ++ al)), (In (length l) l), (In (length l) al)
(In (length l) (i :: l)), (In (length l) (i :: al)), (In (length l) (a :: l)), (In (length l) (a :: al)), (In (length l) (j :: l)), (In (length l) (j :: al)), (In (length l) (merge l l)), (In (length l) (merge l al)), (In (length l) (merge al l)), (In (length l) (merge al al))
(In (length l) (insert i l)), (In (length l) (insert i al)), (In (length l) (insert a l)), (In (length l) (insert a al)), (In (length l) (insert j l)), (In (length l) (insert j al)), (In (length l) (maybe_swap l)), (In (length l) (maybe_swap al)), (In (length l) (l ++ l)), (In (length l) (l ++ al))
(In (length l) (al ++ l)), (In (length l) (al ++ al)), (In (length al) l), (In (length al) al), (In (length al) (i :: l)), (In (length al) (i :: al)), (In (length al) (a :: l)), (In (length al) (a :: al)), (In (length al) (j :: l)), (In (length al) (j :: al))
(In (length al) (merge l l)), (In (length al) (merge l al)), (In (length al) (merge al l)), (In (length al) (merge al al)), (In (length al) (insert i l)), (In (length al) (insert i al)), (In (length al) (insert a l)), (In (length al) (insert a al)), (In (length al) (insert j l)), (In (length al) (insert j al))
(In (length al) (maybe_swap l)), (In (length al) (maybe_swap al)), (In (length al) (l ++ l)), (In (length al) (l ++ al)), (In (length al) (al ++ l)), (In (length al) (al ++ al)), (i < length l), (i < length al), (a < length l), (a < length al)
(j < length l), (j < length al), (length l < i), (length l < a), (length l < j), (length l < length al), (length al < i), (length al < a), (length al < j), (length al < length l)
(i <= length l), (i <= length al), (a <= length l), (a <= length al), (j <= length l), (j <= length al), (length l <= i), (length l <= a), (length l <= j), (length l <= length al)
(length al <= i), (length al <= a), (length al <= j), (length al <= length l), (~ Abs l l), (~ Abs l al), (~ Abs al l), (~ Abs al al), (~ priq l), (~ priq al)
(~ Permutation l l), (~ Permutation l al), (~ Permutation al l), (~ Permutation al al), (~ In i l), (~ In i al), (~ In a l), (~ In a al), (~ In j l), (~ In j al)
(~ i < i), (~ i < a), (~ i < j), (~ a < i), (~ a < a), (~ a < j), (~ j < i), (~ j < a), (~ j < j), (~ i <= i)
(~ i <= a), (~ i <= j), (~ a <= i), (~ a <= a), (~ a <= j), (~ j <= i), (~ j <= a), (~ j <= j), (l <> l), (l <> al)
(al <> l), (al <> al), (i <> i), (i <> a), (i <> j), (a <> i), (a <> a), (a <> j), (j <> i), (j <> a)
(j <> j), (None = Some l), (None = Some al), (i :: l = l), (i :: l = al), (i :: l = merge l l), (i :: l = merge l al), (i :: l = merge al l), (i :: l = merge al al), (i :: l = insert i l)
(i :: l = insert i al), (i :: l = insert a l), (i :: l = insert a al), (i :: l = insert j l), (i :: l = insert j al), (i :: l = maybe_swap l), (i :: l = maybe_swap al), (i :: l = l ++ l), (i :: l = l ++ al), (i :: l = al ++ l)
(i :: l = al ++ al), (i :: l = []), (i :: al = l), (i :: al = al), (i :: al = merge l l), (i :: al = merge l al), (i :: al = merge al l), (i :: al = merge al al), (i :: al = insert i l), (i :: al = insert i al)
(i :: al = insert a l), (i :: al = insert a al), (i :: al = insert j l), (i :: al = insert j al), (i :: al = maybe_swap l), (i :: al = maybe_swap al), (i :: al = l ++ l), (i :: al = l ++ al), (i :: al = al ++ l), (i :: al = al ++ al)
(i :: al = []), (a :: l = l), (a :: l = al), (a :: l = merge l l), (a :: l = merge l al), (a :: l = merge al l), (a :: l = merge al al), (a :: l = insert i l), (a :: l = insert i al), (a :: l = insert a l)
(a :: l = insert a al), (a :: l = insert j l), (a :: l = insert j al), (a :: l = maybe_swap l), (a :: l = maybe_swap al), (a :: l = l ++ l), (a :: l = l ++ al), (a :: l = al ++ l), (a :: l = al ++ al), (a :: l = [])
(a :: al = l), (a :: al = al), (a :: al = merge l l), (a :: al = merge l al), (a :: al = merge al l), (a :: al = merge al al), (a :: al = insert i l), (a :: al = insert i al), (a :: al = insert a l), (a :: al = insert a al)
(a :: al = insert j l), (a :: al = insert j al), (a :: al = maybe_swap l), (a :: al = maybe_swap al), (a :: al = l ++ l), (a :: al = l ++ al), (a :: al = al ++ l), (a :: al = al ++ al), (a :: al = []), (j :: l = l)
(j :: l = al), (j :: l = merge l l), (j :: l = merge l al), (j :: l = merge al l), (j :: l = merge al al), (j :: l = insert i l), (j :: l = insert i al), (j :: l = insert a l), (j :: l = insert a al), (j :: l = insert j l)
(j :: l = insert j al), (j :: l = maybe_swap l), (j :: l = maybe_swap al), (j :: l = l ++ l), (j :: l = l ++ al), (j :: l = al ++ l), (j :: l = al ++ al), (j :: l = []), (j :: al = l), (j :: al = al)
(j :: al = merge l l), (j :: al = merge l al), (j :: al = merge al l), (j :: al = merge al al), (j :: al = insert i l), (j :: al = insert i al), (j :: al = insert a l), (j :: al = insert a al), (j :: al = insert j l), (j :: al = insert j al)
(j :: al = maybe_swap l), (j :: al = maybe_swap al), (j :: al = l ++ l), (j :: al = l ++ al), (j :: al = al ++ l), (j :: al = al ++ al), (j :: al = []), (merge l l = l), (merge l l = al), (merge l l = insert i l)
(merge l l = insert i al), (merge l l = insert a l), (merge l l = insert a al), (merge l l = insert j l), (merge l l = insert j al), (merge l l = maybe_swap l), (merge l l = maybe_swap al), (merge l l = l ++ l), (merge l l = l ++ al), (merge l l = al ++ l)
(merge l l = al ++ al), (merge l al = l), (merge l al = al), (merge l al = insert i l), (merge l al = insert i al), (merge l al = insert a l), (merge l al = insert a al), (merge l al = insert j l), (merge l al = insert j al), (merge l al = maybe_swap l)
(merge l al = maybe_swap al), (merge l al = l ++ l), (merge l al = l ++ al), (merge l al = al ++ l), (merge l al = al ++ al), (merge al l = l), (merge al l = al), (merge al l = insert i l), (merge al l = insert i al), (merge al l = insert a l)
(merge al l = insert a al), (merge al l = insert j l), (merge al l = insert j al), (merge al l = maybe_swap l), (merge al l = maybe_swap al), (merge al l = l ++ l), (merge al l = l ++ al), (merge al l = al ++ l), (merge al l = al ++ al), (merge al al = l)
(merge al al = al), (merge al al = insert i l), (merge al al = insert i al), (merge al al = insert a l), (merge al al = insert a al), (merge al al = insert j l), (merge al al = insert j al), (merge al al = maybe_swap l), (merge al al = maybe_swap al), (merge al al = l ++ l)
(merge al al = l ++ al), (merge al al = al ++ l), (merge al al = al ++ al), (insert i l = l), (insert i l = al), (insert i l = l ++ l), (insert i l = l ++ al), (insert i l = al ++ l), (insert i l = al ++ al), (insert i al = l)
(insert i al = al), (insert i al = l ++ l), (insert i al = l ++ al), (insert i al = al ++ l), (insert i al = al ++ al), (insert a l = l), (insert a l = al), (insert a l = l ++ l), (insert a l = l ++ al), (insert a l = al ++ l)
(insert a l = al ++ al), (insert a al = l), (insert a al = al), (insert a al = l ++ l), (insert a al = l ++ al), (insert a al = al ++ l), (insert a al = al ++ al), (insert j l = l), (insert j l = al), (insert j l = l ++ l)
(insert j l = l ++ al), (insert j l = al ++ l), (insert j l = al ++ al), (insert j al = l), (insert j al = al), (insert j al = l ++ l), (insert j al = l ++ al), (insert j al = al ++ l), (insert j al = al ++ al), (maybe_swap l = l)
(maybe_swap l = al), (maybe_swap l = insert i l), (maybe_swap l = insert i al), (maybe_swap l = insert a l), (maybe_swap l = insert a al), (maybe_swap l = insert j l), (maybe_swap l = insert j al), (maybe_swap l = l ++ l), (maybe_swap l = l ++ al), (maybe_swap l = al ++ l)
(maybe_swap l = al ++ al), (maybe_swap al = l), (maybe_swap al = al), (maybe_swap al = insert i l), (maybe_swap al = insert i al), (maybe_swap al = insert a l), (maybe_swap al = insert a al), (maybe_swap al = insert j l), (maybe_swap al = insert j al), (maybe_swap al = l ++ l)
(maybe_swap al = l ++ al), (maybe_swap al = al ++ l), (maybe_swap al = al ++ al), (l ++ l = l), (l ++ l = al), (l ++ al = l), (l ++ al = al), (al ++ l = l), (al ++ l = al), (al ++ al = l)
(al ++ al = al), ([] = l), ([] = al), ([] = merge l l), ([] = merge l al), ([] = merge al l), ([] = merge al al), ([] = insert i l), ([] = insert i al), ([] = insert a l)
([] = insert a al), ([] = insert j l), ([] = insert j al), ([] = maybe_swap l), ([] = maybe_swap al), ([] = l ++ l), ([] = l ++ al), ([] = al ++ l), ([] = al ++ al), (None = Some i)
(None = Some a), (None = Some j), ((i, l) = select i l), ((i, l) = select i al), ((i, l) = select a l), ((i, l) = select a al), ((i, l) = select j l), ((i, l) = select j al), ((i, al) = select i l), ((i, al) = select i al)
((i, al) = select a l), ((i, al) = select a al), ((i, al) = select j l), ((i, al) = select j al), ((a, l) = select i l), ((a, l) = select i al), ((a, l) = select a l), ((a, l) = select a al), ((a, l) = select j l), ((a, l) = select j al)
((a, al) = select i l), ((a, al) = select i al), ((a, al) = select a l), ((a, al) = select a al), ((a, al) = select j l), ((a, al) = select j al), ((j, l) = select i l), ((j, l) = select i al), ((j, l) = select a l), ((j, l) = select a al)
((j, l) = select j l), ((j, l) = select j al), ((j, al) = select i l), ((j, al) = select i al), ((j, al) = select a l), ((j, al) = select a al), ((j, al) = select j l), ((j, al) = select j al), ((i >? i) = (i >=? i)), ((i >? i) = (i >=? a))
((i >? i) = (i >=? j)), ((i >? i) = (a >=? i)), ((i >? i) = (a >=? a)), ((i >? i) = (a >=? j)), ((i >? i) = (j >=? i)), ((i >? i) = (j >=? a)), ((i >? i) = (j >=? j)), ((i >? a) = (i >=? i)), ((i >? a) = (i >=? a)), ((i >? a) = (i >=? j))
((i >? a) = (a >=? i)), ((i >? a) = (a >=? a)), ((i >? a) = (a >=? j)), ((i >? a) = (j >=? i)), ((i >? a) = (j >=? a)), ((i >? a) = (j >=? j)), ((i >? j) = (i >=? i)), ((i >? j) = (i >=? a)), ((i >? j) = (i >=? j)), ((i >? j) = (a >=? i))
((i >? j) = (a >=? a)), ((i >? j) = (a >=? j)), ((i >? j) = (j >=? i)), ((i >? j) = (j >=? a)), ((i >? j) = (j >=? j)), ((a >? i) = (i >=? i)), ((a >? i) = (i >=? a)), ((a >? i) = (i >=? j)), ((a >? i) = (a >=? i)), ((a >? i) = (a >=? a))
((a >? i) = (a >=? j)), ((a >? i) = (j >=? i)), ((a >? i) = (j >=? a)), ((a >? i) = (j >=? j)), ((a >? a) = (i >=? i)), ((a >? a) = (i >=? a)), ((a >? a) = (i >=? j)), ((a >? a) = (a >=? i)), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? j))
((a >? a) = (j >=? i)), ((a >? a) = (j >=? a)), ((a >? a) = (j >=? j)), ((a >? j) = (i >=? i)), ((a >? j) = (i >=? a)), ((a >? j) = (i >=? j)), ((a >? j) = (a >=? i)), ((a >? j) = (a >=? a)), ((a >? j) = (a >=? j)), ((a >? j) = (j >=? i))
((a >? j) = (j >=? a)), ((a >? j) = (j >=? j)), ((j >? i) = (i >=? i)), ((j >? i) = (i >=? a)), ((j >? i) = (i >=? j)), ((j >? i) = (a >=? i)), ((j >? i) = (a >=? a)), ((j >? i) = (a >=? j)), ((j >? i) = (j >=? i)), ((j >? i) = (j >=? a))
((j >? i) = (j >=? j)), ((j >? a) = (i >=? i)), ((j >? a) = (i >=? a)), ((j >? a) = (i >=? j)), ((j >? a) = (a >=? i)), ((j >? a) = (a >=? a)), ((j >? a) = (a >=? j)), ((j >? a) = (j >=? i)), ((j >? a) = (j >=? a)), ((j >? a) = (j >=? j))
((j >? j) = (i >=? i)), ((j >? j) = (i >=? a)), ((j >? j) = (i >=? j)), ((j >? j) = (a >=? i)), ((j >? j) = (a >=? a)), ((j >? j) = (a >=? j)), ((j >? j) = (j >=? i)), ((j >? j) = (j >=? a)), ((j >? j) = (j >=? j)), (length l = i)
(length l = a), (length l = j), (length al = i), (length al = a), (length al = j)

Label: 1 (1)
(Abs l l), (Abs l al), (Abs al l), (Abs al al), (priq l), (priq al), (Permutation l l), (Permutation l al), (Permutation al l), (Permutation al al)
(In i l), (In i al), (In a l), (In a al), (In j l), (In j al), (i < i), (i < a), (i < j), (a < i)
(a < a), (a < j), (j < i), (j < a), (j < j), (i <= i), (i <= a), (i <= j), (a <= i), (a <= a)
(a <= j), (j <= i), (j <= a), (j <= j), (l = l), (l = al), (al = l), (al = al), (i = i), (i = a)
(i = j), (a = i), (a = a), (a = j), (j = i), (j = a), (j = j), (false = (i >? i)), (false = (i >? a)), (false = (i >? j))
(false = (a >? i)), (false = (a >? a)), (false = (a >? j)), (false = (j >? i)), (false = (j >? a)), (false = (j >? j)), (false = (i >=? i)), (false = (i >=? a)), (false = (i >=? j)), (false = (a >=? i))
(false = (a >=? a)), (false = (a >=? j)), (false = (j >=? i)), (false = (j >=? a)), (false = (j >=? j)), (true = (i >? i)), (true = (i >? a)), (true = (i >? j)), (true = (a >? i)), (true = (a >? a))
(true = (a >? j)), (true = (j >? i)), (true = (j >? a)), (true = (j >? j)), (true = (i >=? i)), (true = (i >=? a)), (true = (i >=? j)), (true = (a >=? i)), (true = (a >=? a)), (true = (a >=? j))
(true = (j >=? i)), (true = (j >=? a)), (true = (j >=? j)), (Abs l (i :: l)), (Abs l (i :: al)), (Abs l (a :: l)), (Abs l (a :: al)), (Abs l (j :: l)), (Abs l (j :: al)), (Abs l (merge l l))
(Abs l (merge l al)), (Abs l (merge al l)), (Abs l (merge al al)), (Abs l (insert i l)), (Abs l (insert i al)), (Abs l (insert a l)), (Abs l (insert a al)), (Abs l (insert j l)), (Abs l (insert j al)), (Abs l (maybe_swap l))
(Abs l (maybe_swap al)), (Abs l (l ++ l)), (Abs l (l ++ al)), (Abs l (al ++ l)), (Abs l (al ++ al)), (Abs l []), (Abs al (i :: l)), (Abs al (i :: al)), (Abs al (a :: l)), (Abs al (a :: al))
(Abs al (j :: l)), (Abs al (j :: al)), (Abs al (merge l l)), (Abs al (merge l al)), (Abs al (merge al l)), (Abs al (merge al al)), (Abs al (insert i l)), (Abs al (insert i al)), (Abs al (insert a l)), (Abs al (insert a al))
(Abs al (insert j l)), (Abs al (insert j al)), (Abs al (maybe_swap l)), (Abs al (maybe_swap al)), (Abs al (l ++ l)), (Abs al (l ++ al)), (Abs al (al ++ l)), (Abs al (al ++ al)), (Abs al []), (Abs (i :: l) l)
(Abs (i :: l) al), (Abs (i :: l) (i :: al)), (Abs (i :: l) (a :: l)), (Abs (i :: l) (a :: al)), (Abs (i :: l) (j :: l)), (Abs (i :: l) (j :: al)), (Abs (i :: l) (merge l l)), (Abs (i :: l) (merge l al)), (Abs (i :: l) (merge al l)), (Abs (i :: l) (merge al al))
(Abs (i :: l) (insert i l)), (Abs (i :: l) (insert i al)), (Abs (i :: l) (insert a l)), (Abs (i :: l) (insert a al)), (Abs (i :: l) (insert j l)), (Abs (i :: l) (insert j al)), (Abs (i :: l) (maybe_swap l)), (Abs (i :: l) (maybe_swap al)), (Abs (i :: l) (l ++ l)), (Abs (i :: l) (l ++ al))
(Abs (i :: l) (al ++ l)), (Abs (i :: l) (al ++ al)), (Abs (i :: l) []), (Abs (i :: al) l), (Abs (i :: al) al), (Abs (i :: al) (i :: l)), (Abs (i :: al) (a :: l)), (Abs (i :: al) (a :: al)), (Abs (i :: al) (j :: l)), (Abs (i :: al) (j :: al))
(Abs (i :: al) (merge l l)), (Abs (i :: al) (merge l al)), (Abs (i :: al) (merge al l)), (Abs (i :: al) (merge al al)), (Abs (i :: al) (insert i l)), (Abs (i :: al) (insert i al)), (Abs (i :: al) (insert a l)), (Abs (i :: al) (insert a al)), (Abs (i :: al) (insert j l)), (Abs (i :: al) (insert j al))
(Abs (i :: al) (maybe_swap l)), (Abs (i :: al) (maybe_swap al)), (Abs (i :: al) (l ++ l)), (Abs (i :: al) (l ++ al)), (Abs (i :: al) (al ++ l)), (Abs (i :: al) (al ++ al)), (Abs (i :: al) []), (Abs (a :: l) l), (Abs (a :: l) al), (Abs (a :: l) (i :: l))
(Abs (a :: l) (i :: al)), (Abs (a :: l) (a :: al)), (Abs (a :: l) (j :: l)), (Abs (a :: l) (j :: al)), (Abs (a :: l) (merge l l)), (Abs (a :: l) (merge l al)), (Abs (a :: l) (merge al l)), (Abs (a :: l) (merge al al)), (Abs (a :: l) (insert i l)), (Abs (a :: l) (insert i al))
(Abs (a :: l) (insert a l)), (Abs (a :: l) (insert a al)), (Abs (a :: l) (insert j l)), (Abs (a :: l) (insert j al)), (Abs (a :: l) (maybe_swap l)), (Abs (a :: l) (maybe_swap al)), (Abs (a :: l) (l ++ l)), (Abs (a :: l) (l ++ al)), (Abs (a :: l) (al ++ l)), (Abs (a :: l) (al ++ al))
(Abs (a :: l) []), (Abs (a :: al) l), (Abs (a :: al) al), (Abs (a :: al) (i :: l)), (Abs (a :: al) (i :: al)), (Abs (a :: al) (a :: l)), (Abs (a :: al) (j :: l)), (Abs (a :: al) (j :: al)), (Abs (a :: al) (merge l l)), (Abs (a :: al) (merge l al))
(Abs (a :: al) (merge al l)), (Abs (a :: al) (merge al al)), (Abs (a :: al) (insert i l)), (Abs (a :: al) (insert i al)), (Abs (a :: al) (insert a l)), (Abs (a :: al) (insert a al)), (Abs (a :: al) (insert j l)), (Abs (a :: al) (insert j al)), (Abs (a :: al) (maybe_swap l)), (Abs (a :: al) (maybe_swap al))
(Abs (a :: al) (l ++ l)), (Abs (a :: al) (l ++ al)), (Abs (a :: al) (al ++ l)), (Abs (a :: al) (al ++ al)), (Abs (a :: al) []), (Abs (j :: l) l), (Abs (j :: l) al), (Abs (j :: l) (i :: l)), (Abs (j :: l) (i :: al)), (Abs (j :: l) (a :: l))
(Abs (j :: l) (a :: al)), (Abs (j :: l) (j :: al)), (Abs (j :: l) (merge l l)), (Abs (j :: l) (merge l al)), (Abs (j :: l) (merge al l)), (Abs (j :: l) (merge al al)), (Abs (j :: l) (insert i l)), (Abs (j :: l) (insert i al)), (Abs (j :: l) (insert a l)), (Abs (j :: l) (insert a al))
(Abs (j :: l) (insert j l)), (Abs (j :: l) (insert j al)), (Abs (j :: l) (maybe_swap l)), (Abs (j :: l) (maybe_swap al)), (Abs (j :: l) (l ++ l)), (Abs (j :: l) (l ++ al)), (Abs (j :: l) (al ++ l)), (Abs (j :: l) (al ++ al)), (Abs (j :: l) []), (Abs (j :: al) l)
(Abs (j :: al) al), (Abs (j :: al) (i :: l)), (Abs (j :: al) (i :: al)), (Abs (j :: al) (a :: l)), (Abs (j :: al) (a :: al)), (Abs (j :: al) (j :: l)), (Abs (j :: al) (merge l l)), (Abs (j :: al) (merge l al)), (Abs (j :: al) (merge al l)), (Abs (j :: al) (merge al al))
(Abs (j :: al) (insert i l)), (Abs (j :: al) (insert i al)), (Abs (j :: al) (insert a l)), (Abs (j :: al) (insert a al)), (Abs (j :: al) (insert j l)), (Abs (j :: al) (insert j al)), (Abs (j :: al) (maybe_swap l)), (Abs (j :: al) (maybe_swap al)), (Abs (j :: al) (l ++ l)), (Abs (j :: al) (l ++ al))
(Abs (j :: al) (al ++ l)), (Abs (j :: al) (al ++ al)), (Abs (j :: al) []), (Abs (merge l l) l), (Abs (merge l l) al), (Abs (merge l l) (i :: l)), (Abs (merge l l) (i :: al)), (Abs (merge l l) (a :: l)), (Abs (merge l l) (a :: al)), (Abs (merge l l) (j :: l))
(Abs (merge l l) (j :: al)), (Abs (merge l l) (merge l al)), (Abs (merge l l) (merge al l)), (Abs (merge l l) (merge al al)), (Abs (merge l l) (insert i l)), (Abs (merge l l) (insert i al)), (Abs (merge l l) (insert a l)), (Abs (merge l l) (insert a al)), (Abs (merge l l) (insert j l)), (Abs (merge l l) (insert j al))
(Abs (merge l l) (maybe_swap l)), (Abs (merge l l) (maybe_swap al)), (Abs (merge l l) (l ++ l)), (Abs (merge l l) (l ++ al)), (Abs (merge l l) (al ++ l)), (Abs (merge l l) (al ++ al)), (Abs (merge l l) []), (Abs (merge l al) l), (Abs (merge l al) al), (Abs (merge l al) (i :: l))
(Abs (merge l al) (i :: al)), (Abs (merge l al) (a :: l)), (Abs (merge l al) (a :: al)), (Abs (merge l al) (j :: l)), (Abs (merge l al) (j :: al)), (Abs (merge l al) (merge l l)), (Abs (merge l al) (merge al l)), (Abs (merge l al) (merge al al)), (Abs (merge l al) (insert i l)), (Abs (merge l al) (insert i al))
(Abs (merge l al) (insert a l)), (Abs (merge l al) (insert a al)), (Abs (merge l al) (insert j l)), (Abs (merge l al) (insert j al)), (Abs (merge l al) (maybe_swap l)), (Abs (merge l al) (maybe_swap al)), (Abs (merge l al) (l ++ l)), (Abs (merge l al) (l ++ al)), (Abs (merge l al) (al ++ l)), (Abs (merge l al) (al ++ al))
(Abs (merge l al) []), (Abs (merge al l) l), (Abs (merge al l) al), (Abs (merge al l) (i :: l)), (Abs (merge al l) (i :: al)), (Abs (merge al l) (a :: l)), (Abs (merge al l) (a :: al)), (Abs (merge al l) (j :: l)), (Abs (merge al l) (j :: al)), (Abs (merge al l) (merge l l))
(Abs (merge al l) (merge l al)), (Abs (merge al l) (merge al al)), (Abs (merge al l) (insert i l)), (Abs (merge al l) (insert i al)), (Abs (merge al l) (insert a l)), (Abs (merge al l) (insert a al)), (Abs (merge al l) (insert j l)), (Abs (merge al l) (insert j al)), (Abs (merge al l) (maybe_swap l)), (Abs (merge al l) (maybe_swap al))
(Abs (merge al l) (l ++ l)), (Abs (merge al l) (l ++ al)), (Abs (merge al l) (al ++ l)), (Abs (merge al l) (al ++ al)), (Abs (merge al l) []), (Abs (merge al al) l), (Abs (merge al al) al), (Abs (merge al al) (i :: l)), (Abs (merge al al) (i :: al)), (Abs (merge al al) (a :: l))
(Abs (merge al al) (a :: al)), (Abs (merge al al) (j :: l)), (Abs (merge al al) (j :: al)), (Abs (merge al al) (merge l l)), (Abs (merge al al) (merge l al)), (Abs (merge al al) (merge al l)), (Abs (merge al al) (insert i l)), (Abs (merge al al) (insert i al)), (Abs (merge al al) (insert a l)), (Abs (merge al al) (insert a al))
(Abs (merge al al) (insert j l)), (Abs (merge al al) (insert j al)), (Abs (merge al al) (maybe_swap l)), (Abs (merge al al) (maybe_swap al)), (Abs (merge al al) (l ++ l)), (Abs (merge al al) (l ++ al)), (Abs (merge al al) (al ++ l)), (Abs (merge al al) (al ++ al)), (Abs (merge al al) []), (Abs (insert i l) l)
(Abs (insert i l) al), (Abs (insert i l) (i :: l)), (Abs (insert i l) (i :: al)), (Abs (insert i l) (a :: l)), (Abs (insert i l) (a :: al)), (Abs (insert i l) (j :: l)), (Abs (insert i l) (j :: al)), (Abs (insert i l) (merge l l)), (Abs (insert i l) (merge l al)), (Abs (insert i l) (merge al l))
(Abs (insert i l) (merge al al)), (Abs (insert i l) (insert i al)), (Abs (insert i l) (insert a l)), (Abs (insert i l) (insert a al)), (Abs (insert i l) (insert j l)), (Abs (insert i l) (insert j al)), (Abs (insert i l) (maybe_swap l)), (Abs (insert i l) (maybe_swap al)), (Abs (insert i l) (l ++ l)), (Abs (insert i l) (l ++ al))
(Abs (insert i l) (al ++ l)), (Abs (insert i l) (al ++ al)), (Abs (insert i l) []), (Abs (insert i al) l), (Abs (insert i al) al), (Abs (insert i al) (i :: l)), (Abs (insert i al) (i :: al)), (Abs (insert i al) (a :: l)), (Abs (insert i al) (a :: al)), (Abs (insert i al) (j :: l))
(Abs (insert i al) (j :: al)), (Abs (insert i al) (merge l l)), (Abs (insert i al) (merge l al)), (Abs (insert i al) (merge al l)), (Abs (insert i al) (merge al al)), (Abs (insert i al) (insert i l)), (Abs (insert i al) (insert a l)), (Abs (insert i al) (insert a al)), (Abs (insert i al) (insert j l)), (Abs (insert i al) (insert j al))
(Abs (insert i al) (maybe_swap l)), (Abs (insert i al) (maybe_swap al)), (Abs (insert i al) (l ++ l)), (Abs (insert i al) (l ++ al)), (Abs (insert i al) (al ++ l)), (Abs (insert i al) (al ++ al)), (Abs (insert i al) []), (Abs (insert a l) l), (Abs (insert a l) al), (Abs (insert a l) (i :: l))
(Abs (insert a l) (i :: al)), (Abs (insert a l) (a :: l)), (Abs (insert a l) (a :: al)), (Abs (insert a l) (j :: l)), (Abs (insert a l) (j :: al)), (Abs (insert a l) (merge l l)), (Abs (insert a l) (merge l al)), (Abs (insert a l) (merge al l)), (Abs (insert a l) (merge al al)), (Abs (insert a l) (insert i l))
(Abs (insert a l) (insert i al)), (Abs (insert a l) (insert a al)), (Abs (insert a l) (insert j l)), (Abs (insert a l) (insert j al)), (Abs (insert a l) (maybe_swap l)), (Abs (insert a l) (maybe_swap al)), (Abs (insert a l) (l ++ l)), (Abs (insert a l) (l ++ al)), (Abs (insert a l) (al ++ l)), (Abs (insert a l) (al ++ al))
(Abs (insert a l) []), (Abs (insert a al) l), (Abs (insert a al) al), (Abs (insert a al) (i :: l)), (Abs (insert a al) (i :: al)), (Abs (insert a al) (a :: l)), (Abs (insert a al) (a :: al)), (Abs (insert a al) (j :: l)), (Abs (insert a al) (j :: al)), (Abs (insert a al) (merge l l))
(Abs (insert a al) (merge l al)), (Abs (insert a al) (merge al l)), (Abs (insert a al) (merge al al)), (Abs (insert a al) (insert i l)), (Abs (insert a al) (insert i al)), (Abs (insert a al) (insert a l)), (Abs (insert a al) (insert j l)), (Abs (insert a al) (insert j al)), (Abs (insert a al) (maybe_swap l)), (Abs (insert a al) (maybe_swap al))
(Abs (insert a al) (l ++ l)), (Abs (insert a al) (l ++ al)), (Abs (insert a al) (al ++ l)), (Abs (insert a al) (al ++ al)), (Abs (insert a al) []), (Abs (insert j l) l), (Abs (insert j l) al), (Abs (insert j l) (i :: l)), (Abs (insert j l) (i :: al)), (Abs (insert j l) (a :: l))
(Abs (insert j l) (a :: al)), (Abs (insert j l) (j :: l)), (Abs (insert j l) (j :: al)), (Abs (insert j l) (merge l l)), (Abs (insert j l) (merge l al)), (Abs (insert j l) (merge al l)), (Abs (insert j l) (merge al al)), (Abs (insert j l) (insert i l)), (Abs (insert j l) (insert i al)), (Abs (insert j l) (insert a l))
(Abs (insert j l) (insert a al)), (Abs (insert j l) (insert j al)), (Abs (insert j l) (maybe_swap l)), (Abs (insert j l) (maybe_swap al)), (Abs (insert j l) (l ++ l)), (Abs (insert j l) (l ++ al)), (Abs (insert j l) (al ++ l)), (Abs (insert j l) (al ++ al)), (Abs (insert j l) []), (Abs (insert j al) l)
(Abs (insert j al) al), (Abs (insert j al) (i :: l)), (Abs (insert j al) (i :: al)), (Abs (insert j al) (a :: l)), (Abs (insert j al) (a :: al)), (Abs (insert j al) (j :: l)), (Abs (insert j al) (j :: al)), (Abs (insert j al) (merge l l)), (Abs (insert j al) (merge l al)), (Abs (insert j al) (merge al l))
(Abs (insert j al) (merge al al)), (Abs (insert j al) (insert i l)), (Abs (insert j al) (insert i al)), (Abs (insert j al) (insert a l)), (Abs (insert j al) (insert a al)), (Abs (insert j al) (insert j l)), (Abs (insert j al) (maybe_swap l)), (Abs (insert j al) (maybe_swap al)), (Abs (insert j al) (l ++ l)), (Abs (insert j al) (l ++ al))
(Abs (insert j al) (al ++ l)), (Abs (insert j al) (al ++ al)), (Abs (insert j al) []), (Abs (maybe_swap l) l), (Abs (maybe_swap l) al), (Abs (maybe_swap l) (i :: l)), (Abs (maybe_swap l) (i :: al)), (Abs (maybe_swap l) (a :: l)), (Abs (maybe_swap l) (a :: al)), (Abs (maybe_swap l) (j :: l))
(Abs (maybe_swap l) (j :: al)), (Abs (maybe_swap l) (merge l l)), (Abs (maybe_swap l) (merge l al)), (Abs (maybe_swap l) (merge al l)), (Abs (maybe_swap l) (merge al al)), (Abs (maybe_swap l) (insert i l)), (Abs (maybe_swap l) (insert i al)), (Abs (maybe_swap l) (insert a l)), (Abs (maybe_swap l) (insert a al)), (Abs (maybe_swap l) (insert j l))
(Abs (maybe_swap l) (insert j al)), (Abs (maybe_swap l) (maybe_swap al)), (Abs (maybe_swap l) (l ++ l)), (Abs (maybe_swap l) (l ++ al)), (Abs (maybe_swap l) (al ++ l)), (Abs (maybe_swap l) (al ++ al)), (Abs (maybe_swap l) []), (Abs (maybe_swap al) l), (Abs (maybe_swap al) al), (Abs (maybe_swap al) (i :: l))
(Abs (maybe_swap al) (i :: al)), (Abs (maybe_swap al) (a :: l)), (Abs (maybe_swap al) (a :: al)), (Abs (maybe_swap al) (j :: l)), (Abs (maybe_swap al) (j :: al)), (Abs (maybe_swap al) (merge l l)), (Abs (maybe_swap al) (merge l al)), (Abs (maybe_swap al) (merge al l)), (Abs (maybe_swap al) (merge al al)), (Abs (maybe_swap al) (insert i l))
(Abs (maybe_swap al) (insert i al)), (Abs (maybe_swap al) (insert a l)), (Abs (maybe_swap al) (insert a al)), (Abs (maybe_swap al) (insert j l)), (Abs (maybe_swap al) (insert j al)), (Abs (maybe_swap al) (maybe_swap l)), (Abs (maybe_swap al) (l ++ l)), (Abs (maybe_swap al) (l ++ al)), (Abs (maybe_swap al) (al ++ l)), (Abs (maybe_swap al) (al ++ al))
(Abs (maybe_swap al) []), (Abs (l ++ l) l), (Abs (l ++ l) al), (Abs (l ++ l) (i :: l)), (Abs (l ++ l) (i :: al)), (Abs (l ++ l) (a :: l)), (Abs (l ++ l) (a :: al)), (Abs (l ++ l) (j :: l)), (Abs (l ++ l) (j :: al)), (Abs (l ++ l) (merge l l))
(Abs (l ++ l) (merge l al)), (Abs (l ++ l) (merge al l)), (Abs (l ++ l) (merge al al)), (Abs (l ++ l) (insert i l)), (Abs (l ++ l) (insert i al)), (Abs (l ++ l) (insert a l)), (Abs (l ++ l) (insert a al)), (Abs (l ++ l) (insert j l)), (Abs (l ++ l) (insert j al)), (Abs (l ++ l) (maybe_swap l))
(Abs (l ++ l) (maybe_swap al)), (Abs (l ++ l) (l ++ al)), (Abs (l ++ l) (al ++ l)), (Abs (l ++ l) (al ++ al)), (Abs (l ++ l) []), (Abs (l ++ al) l), (Abs (l ++ al) al), (Abs (l ++ al) (i :: l)), (Abs (l ++ al) (i :: al)), (Abs (l ++ al) (a :: l))
(Abs (l ++ al) (a :: al)), (Abs (l ++ al) (j :: l)), (Abs (l ++ al) (j :: al)), (Abs (l ++ al) (merge l l)), (Abs (l ++ al) (merge l al)), (Abs (l ++ al) (merge al l)), (Abs (l ++ al) (merge al al)), (Abs (l ++ al) (insert i l)), (Abs (l ++ al) (insert i al)), (Abs (l ++ al) (insert a l))
(Abs (l ++ al) (insert a al)), (Abs (l ++ al) (insert j l)), (Abs (l ++ al) (insert j al)), (Abs (l ++ al) (maybe_swap l)), (Abs (l ++ al) (maybe_swap al)), (Abs (l ++ al) (l ++ l)), (Abs (l ++ al) (al ++ l)), (Abs (l ++ al) (al ++ al)), (Abs (l ++ al) []), (Abs (al ++ l) l)
(Abs (al ++ l) al), (Abs (al ++ l) (i :: l)), (Abs (al ++ l) (i :: al)), (Abs (al ++ l) (a :: l)), (Abs (al ++ l) (a :: al)), (Abs (al ++ l) (j :: l)), (Abs (al ++ l) (j :: al)), (Abs (al ++ l) (merge l l)), (Abs (al ++ l) (merge l al)), (Abs (al ++ l) (merge al l))
(Abs (al ++ l) (merge al al)), (Abs (al ++ l) (insert i l)), (Abs (al ++ l) (insert i al)), (Abs (al ++ l) (insert a l)), (Abs (al ++ l) (insert a al)), (Abs (al ++ l) (insert j l)), (Abs (al ++ l) (insert j al)), (Abs (al ++ l) (maybe_swap l)), (Abs (al ++ l) (maybe_swap al)), (Abs (al ++ l) (l ++ l))
(Abs (al ++ l) (l ++ al)), (Abs (al ++ l) (al ++ al)), (Abs (al ++ l) []), (Abs (al ++ al) l), (Abs (al ++ al) al), (Abs (al ++ al) (i :: l)), (Abs (al ++ al) (i :: al)), (Abs (al ++ al) (a :: l)), (Abs (al ++ al) (a :: al)), (Abs (al ++ al) (j :: l))
(Abs (al ++ al) (j :: al)), (Abs (al ++ al) (merge l l)), (Abs (al ++ al) (merge l al)), (Abs (al ++ al) (merge al l)), (Abs (al ++ al) (merge al al)), (Abs (al ++ al) (insert i l)), (Abs (al ++ al) (insert i al)), (Abs (al ++ al) (insert a l)), (Abs (al ++ al) (insert a al)), (Abs (al ++ al) (insert j l))
(Abs (al ++ al) (insert j al)), (Abs (al ++ al) (maybe_swap l)), (Abs (al ++ al) (maybe_swap al)), (Abs (al ++ al) (l ++ l)), (Abs (al ++ al) (l ++ al)), (Abs (al ++ al) (al ++ l)), (Abs (al ++ al) []), (Abs [] l), (Abs [] al), (Abs [] (i :: l))
(Abs [] (i :: al)), (Abs [] (a :: l)), (Abs [] (a :: al)), (Abs [] (j :: l)), (Abs [] (j :: al)), (Abs [] (merge l l)), (Abs [] (merge l al)), (Abs [] (merge al l)), (Abs [] (merge al al)), (Abs [] (insert i l))
(Abs [] (insert i al)), (Abs [] (insert a l)), (Abs [] (insert a al)), (Abs [] (insert j l)), (Abs [] (insert j al)), (Abs [] (maybe_swap l)), (Abs [] (maybe_swap al)), (Abs [] (l ++ l)), (Abs [] (l ++ al)), (Abs [] (al ++ l))
(Abs [] (al ++ al)), (priq (i :: l)), (priq (i :: al)), (priq (a :: l)), (priq (a :: al)), (priq (j :: l)), (priq (j :: al)), (priq (merge l l)), (priq (merge l al)), (priq (merge al l))
(priq (merge al al)), (priq (insert i l)), (priq (insert i al)), (priq (insert a l)), (priq (insert a al)), (priq (insert j l)), (priq (insert j al)), (priq (maybe_swap l)), (priq (maybe_swap al)), (priq (l ++ l))
(priq (l ++ al)), (priq (al ++ l)), (priq (al ++ al)), (priq []), (Permutation l (i :: l)), (Permutation l (i :: al)), (Permutation l (a :: l)), (Permutation l (a :: al)), (Permutation l (j :: l)), (Permutation l (j :: al))
(Permutation l (merge l l)), (Permutation l (merge l al)), (Permutation l (merge al l)), (Permutation l (merge al al)), (Permutation l (insert i l)), (Permutation l (insert i al)), (Permutation l (insert a l)), (Permutation l (insert a al)), (Permutation l (insert j l)), (Permutation l (insert j al))
(Permutation l (maybe_swap l)), (Permutation l (maybe_swap al)), (Permutation l (l ++ l)), (Permutation l (l ++ al)), (Permutation l (al ++ l)), (Permutation l (al ++ al)), (Permutation l []), (Permutation al (i :: l)), (Permutation al (i :: al)), (Permutation al (a :: l))
(Permutation al (a :: al)), (Permutation al (j :: l)), (Permutation al (j :: al)), (Permutation al (merge l l)), (Permutation al (merge l al)), (Permutation al (merge al l)), (Permutation al (merge al al)), (Permutation al (insert i l)), (Permutation al (insert i al)), (Permutation al (insert a l))
(Permutation al (insert a al)), (Permutation al (insert j l)), (Permutation al (insert j al)), (Permutation al (maybe_swap l)), (Permutation al (maybe_swap al)), (Permutation al (l ++ l)), (Permutation al (l ++ al)), (Permutation al (al ++ l)), (Permutation al (al ++ al)), (Permutation al [])
(Permutation (i :: l) l), (Permutation (i :: l) al), (Permutation (i :: l) (i :: al)), (Permutation (i :: l) (a :: l)), (Permutation (i :: l) (a :: al)), (Permutation (i :: l) (j :: l)), (Permutation (i :: l) (j :: al)), (Permutation (i :: l) (merge l l)), (Permutation (i :: l) (merge l al)), (Permutation (i :: l) (merge al l))
(Permutation (i :: l) (merge al al)), (Permutation (i :: l) (insert i l)), (Permutation (i :: l) (insert i al)), (Permutation (i :: l) (insert a l)), (Permutation (i :: l) (insert a al)), (Permutation (i :: l) (insert j l)), (Permutation (i :: l) (insert j al)), (Permutation (i :: l) (maybe_swap l)), (Permutation (i :: l) (maybe_swap al)), (Permutation (i :: l) (l ++ l))
(Permutation (i :: l) (l ++ al)), (Permutation (i :: l) (al ++ l)), (Permutation (i :: l) (al ++ al)), (Permutation (i :: l) []), (Permutation (i :: al) l), (Permutation (i :: al) al), (Permutation (i :: al) (i :: l)), (Permutation (i :: al) (a :: l)), (Permutation (i :: al) (a :: al)), (Permutation (i :: al) (j :: l))
(Permutation (i :: al) (j :: al)), (Permutation (i :: al) (merge l l)), (Permutation (i :: al) (merge l al)), (Permutation (i :: al) (merge al l)), (Permutation (i :: al) (merge al al)), (Permutation (i :: al) (insert i l)), (Permutation (i :: al) (insert i al)), (Permutation (i :: al) (insert a l)), (Permutation (i :: al) (insert a al)), (Permutation (i :: al) (insert j l))
(Permutation (i :: al) (insert j al)), (Permutation (i :: al) (maybe_swap l)), (Permutation (i :: al) (maybe_swap al)), (Permutation (i :: al) (l ++ l)), (Permutation (i :: al) (l ++ al)), (Permutation (i :: al) (al ++ l)), (Permutation (i :: al) (al ++ al)), (Permutation (i :: al) []), (Permutation (a :: l) l), (Permutation (a :: l) al)
(Permutation (a :: l) (i :: l)), (Permutation (a :: l) (i :: al)), (Permutation (a :: l) (a :: al)), (Permutation (a :: l) (j :: l)), (Permutation (a :: l) (j :: al)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (merge l al)), (Permutation (a :: l) (merge al l)), (Permutation (a :: l) (merge al al)), (Permutation (a :: l) (insert i l))
(Permutation (a :: l) (insert i al)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a al)), (Permutation (a :: l) (insert j l)), (Permutation (a :: l) (insert j al)), (Permutation (a :: l) (maybe_swap l)), (Permutation (a :: l) (maybe_swap al)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ al)), (Permutation (a :: l) (al ++ l))
(Permutation (a :: l) (al ++ al)), (Permutation (a :: l) []), (Permutation (a :: al) l), (Permutation (a :: al) al), (Permutation (a :: al) (i :: l)), (Permutation (a :: al) (i :: al)), (Permutation (a :: al) (a :: l)), (Permutation (a :: al) (j :: l)), (Permutation (a :: al) (j :: al)), (Permutation (a :: al) (merge l l))
(Permutation (a :: al) (merge l al)), (Permutation (a :: al) (merge al l)), (Permutation (a :: al) (merge al al)), (Permutation (a :: al) (insert i l)), (Permutation (a :: al) (insert i al)), (Permutation (a :: al) (insert a l)), (Permutation (a :: al) (insert a al)), (Permutation (a :: al) (insert j l)), (Permutation (a :: al) (insert j al)), (Permutation (a :: al) (maybe_swap l))
(Permutation (a :: al) (maybe_swap al)), (Permutation (a :: al) (l ++ l)), (Permutation (a :: al) (l ++ al)), (Permutation (a :: al) (al ++ l)), (Permutation (a :: al) (al ++ al)), (Permutation (a :: al) []), (Permutation (j :: l) l), (Permutation (j :: l) al), (Permutation (j :: l) (i :: l)), (Permutation (j :: l) (i :: al))
(Permutation (j :: l) (a :: l)), (Permutation (j :: l) (a :: al)), (Permutation (j :: l) (j :: al)), (Permutation (j :: l) (merge l l)), (Permutation (j :: l) (merge l al)), (Permutation (j :: l) (merge al l)), (Permutation (j :: l) (merge al al)), (Permutation (j :: l) (insert i l)), (Permutation (j :: l) (insert i al)), (Permutation (j :: l) (insert a l))
(Permutation (j :: l) (insert a al)), (Permutation (j :: l) (insert j l)), (Permutation (j :: l) (insert j al)), (Permutation (j :: l) (maybe_swap l)), (Permutation (j :: l) (maybe_swap al)), (Permutation (j :: l) (l ++ l)), (Permutation (j :: l) (l ++ al)), (Permutation (j :: l) (al ++ l)), (Permutation (j :: l) (al ++ al)), (Permutation (j :: l) [])
(Permutation (j :: al) l), (Permutation (j :: al) al), (Permutation (j :: al) (i :: l)), (Permutation (j :: al) (i :: al)), (Permutation (j :: al) (a :: l)), (Permutation (j :: al) (a :: al)), (Permutation (j :: al) (j :: l)), (Permutation (j :: al) (merge l l)), (Permutation (j :: al) (merge l al)), (Permutation (j :: al) (merge al l))
(Permutation (j :: al) (merge al al)), (Permutation (j :: al) (insert i l)), (Permutation (j :: al) (insert i al)), (Permutation (j :: al) (insert a l)), (Permutation (j :: al) (insert a al)), (Permutation (j :: al) (insert j l)), (Permutation (j :: al) (insert j al)), (Permutation (j :: al) (maybe_swap l)), (Permutation (j :: al) (maybe_swap al)), (Permutation (j :: al) (l ++ l))
(Permutation (j :: al) (l ++ al)), (Permutation (j :: al) (al ++ l)), (Permutation (j :: al) (al ++ al)), (Permutation (j :: al) []), (Permutation (merge l l) l), (Permutation (merge l l) al), (Permutation (merge l l) (i :: l)), (Permutation (merge l l) (i :: al)), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a :: al))
(Permutation (merge l l) (j :: l)), (Permutation (merge l l) (j :: al)), (Permutation (merge l l) (merge l al)), (Permutation (merge l l) (merge al l)), (Permutation (merge l l) (merge al al)), (Permutation (merge l l) (insert i l)), (Permutation (merge l l) (insert i al)), (Permutation (merge l l) (insert a l)), (Permutation (merge l l) (insert a al)), (Permutation (merge l l) (insert j l))
(Permutation (merge l l) (insert j al)), (Permutation (merge l l) (maybe_swap l)), (Permutation (merge l l) (maybe_swap al)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) (l ++ al)), (Permutation (merge l l) (al ++ l)), (Permutation (merge l l) (al ++ al)), (Permutation (merge l l) []), (Permutation (merge l al) l), (Permutation (merge l al) al)
(Permutation (merge l al) (i :: l)), (Permutation (merge l al) (i :: al)), (Permutation (merge l al) (a :: l)), (Permutation (merge l al) (a :: al)), (Permutation (merge l al) (j :: l)), (Permutation (merge l al) (j :: al)), (Permutation (merge l al) (merge l l)), (Permutation (merge l al) (merge al l)), (Permutation (merge l al) (merge al al)), (Permutation (merge l al) (insert i l))
(Permutation (merge l al) (insert i al)), (Permutation (merge l al) (insert a l)), (Permutation (merge l al) (insert a al)), (Permutation (merge l al) (insert j l)), (Permutation (merge l al) (insert j al)), (Permutation (merge l al) (maybe_swap l)), (Permutation (merge l al) (maybe_swap al)), (Permutation (merge l al) (l ++ l)), (Permutation (merge l al) (l ++ al)), (Permutation (merge l al) (al ++ l))
(Permutation (merge l al) (al ++ al)), (Permutation (merge l al) []), (Permutation (merge al l) l), (Permutation (merge al l) al), (Permutation (merge al l) (i :: l)), (Permutation (merge al l) (i :: al)), (Permutation (merge al l) (a :: l)), (Permutation (merge al l) (a :: al)), (Permutation (merge al l) (j :: l)), (Permutation (merge al l) (j :: al))
(Permutation (merge al l) (merge l l)), (Permutation (merge al l) (merge l al)), (Permutation (merge al l) (merge al al)), (Permutation (merge al l) (insert i l)), (Permutation (merge al l) (insert i al)), (Permutation (merge al l) (insert a l)), (Permutation (merge al l) (insert a al)), (Permutation (merge al l) (insert j l)), (Permutation (merge al l) (insert j al)), (Permutation (merge al l) (maybe_swap l))
(Permutation (merge al l) (maybe_swap al)), (Permutation (merge al l) (l ++ l)), (Permutation (merge al l) (l ++ al)), (Permutation (merge al l) (al ++ l)), (Permutation (merge al l) (al ++ al)), (Permutation (merge al l) []), (Permutation (merge al al) l), (Permutation (merge al al) al), (Permutation (merge al al) (i :: l)), (Permutation (merge al al) (i :: al))
(Permutation (merge al al) (a :: l)), (Permutation (merge al al) (a :: al)), (Permutation (merge al al) (j :: l)), (Permutation (merge al al) (j :: al)), (Permutation (merge al al) (merge l l)), (Permutation (merge al al) (merge l al)), (Permutation (merge al al) (merge al l)), (Permutation (merge al al) (insert i l)), (Permutation (merge al al) (insert i al)), (Permutation (merge al al) (insert a l))
(Permutation (merge al al) (insert a al)), (Permutation (merge al al) (insert j l)), (Permutation (merge al al) (insert j al)), (Permutation (merge al al) (maybe_swap l)), (Permutation (merge al al) (maybe_swap al)), (Permutation (merge al al) (l ++ l)), (Permutation (merge al al) (l ++ al)), (Permutation (merge al al) (al ++ l)), (Permutation (merge al al) (al ++ al)), (Permutation (merge al al) [])
(Permutation (insert i l) l), (Permutation (insert i l) al), (Permutation (insert i l) (i :: l)), (Permutation (insert i l) (i :: al)), (Permutation (insert i l) (a :: l)), (Permutation (insert i l) (a :: al)), (Permutation (insert i l) (j :: l)), (Permutation (insert i l) (j :: al)), (Permutation (insert i l) (merge l l)), (Permutation (insert i l) (merge l al))
(Permutation (insert i l) (merge al l)), (Permutation (insert i l) (merge al al)), (Permutation (insert i l) (insert i al)), (Permutation (insert i l) (insert a l)), (Permutation (insert i l) (insert a al)), (Permutation (insert i l) (insert j l)), (Permutation (insert i l) (insert j al)), (Permutation (insert i l) (maybe_swap l)), (Permutation (insert i l) (maybe_swap al)), (Permutation (insert i l) (l ++ l))
(Permutation (insert i l) (l ++ al)), (Permutation (insert i l) (al ++ l)), (Permutation (insert i l) (al ++ al)), (Permutation (insert i l) []), (Permutation (insert i al) l), (Permutation (insert i al) al), (Permutation (insert i al) (i :: l)), (Permutation (insert i al) (i :: al)), (Permutation (insert i al) (a :: l)), (Permutation (insert i al) (a :: al))
(Permutation (insert i al) (j :: l)), (Permutation (insert i al) (j :: al)), (Permutation (insert i al) (merge l l)), (Permutation (insert i al) (merge l al)), (Permutation (insert i al) (merge al l)), (Permutation (insert i al) (merge al al)), (Permutation (insert i al) (insert i l)), (Permutation (insert i al) (insert a l)), (Permutation (insert i al) (insert a al)), (Permutation (insert i al) (insert j l))
(Permutation (insert i al) (insert j al)), (Permutation (insert i al) (maybe_swap l)), (Permutation (insert i al) (maybe_swap al)), (Permutation (insert i al) (l ++ l)), (Permutation (insert i al) (l ++ al)), (Permutation (insert i al) (al ++ l)), (Permutation (insert i al) (al ++ al)), (Permutation (insert i al) []), (Permutation (insert a l) l), (Permutation (insert a l) al)
(Permutation (insert a l) (i :: l)), (Permutation (insert a l) (i :: al)), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: al)), (Permutation (insert a l) (j :: l)), (Permutation (insert a l) (j :: al)), (Permutation (insert a l) (merge l l)), (Permutation (insert a l) (merge l al)), (Permutation (insert a l) (merge al l)), (Permutation (insert a l) (merge al al))
(Permutation (insert a l) (insert i l)), (Permutation (insert a l) (insert i al)), (Permutation (insert a l) (insert a al)), (Permutation (insert a l) (insert j l)), (Permutation (insert a l) (insert j al)), (Permutation (insert a l) (maybe_swap l)), (Permutation (insert a l) (maybe_swap al)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ al)), (Permutation (insert a l) (al ++ l))
(Permutation (insert a l) (al ++ al)), (Permutation (insert a l) []), (Permutation (insert a al) l), (Permutation (insert a al) al), (Permutation (insert a al) (i :: l)), (Permutation (insert a al) (i :: al)), (Permutation (insert a al) (a :: l)), (Permutation (insert a al) (a :: al)), (Permutation (insert a al) (j :: l)), (Permutation (insert a al) (j :: al))
(Permutation (insert a al) (merge l l)), (Permutation (insert a al) (merge l al)), (Permutation (insert a al) (merge al l)), (Permutation (insert a al) (merge al al)), (Permutation (insert a al) (insert i l)), (Permutation (insert a al) (insert i al)), (Permutation (insert a al) (insert a l)), (Permutation (insert a al) (insert j l)), (Permutation (insert a al) (insert j al)), (Permutation (insert a al) (maybe_swap l))
(Permutation (insert a al) (maybe_swap al)), (Permutation (insert a al) (l ++ l)), (Permutation (insert a al) (l ++ al)), (Permutation (insert a al) (al ++ l)), (Permutation (insert a al) (al ++ al)), (Permutation (insert a al) []), (Permutation (insert j l) l), (Permutation (insert j l) al), (Permutation (insert j l) (i :: l)), (Permutation (insert j l) (i :: al))
(Permutation (insert j l) (a :: l)), (Permutation (insert j l) (a :: al)), (Permutation (insert j l) (j :: l)), (Permutation (insert j l) (j :: al)), (Permutation (insert j l) (merge l l)), (Permutation (insert j l) (merge l al)), (Permutation (insert j l) (merge al l)), (Permutation (insert j l) (merge al al)), (Permutation (insert j l) (insert i l)), (Permutation (insert j l) (insert i al))
(Permutation (insert j l) (insert a l)), (Permutation (insert j l) (insert a al)), (Permutation (insert j l) (insert j al)), (Permutation (insert j l) (maybe_swap l)), (Permutation (insert j l) (maybe_swap al)), (Permutation (insert j l) (l ++ l)), (Permutation (insert j l) (l ++ al)), (Permutation (insert j l) (al ++ l)), (Permutation (insert j l) (al ++ al)), (Permutation (insert j l) [])
(Permutation (insert j al) l), (Permutation (insert j al) al), (Permutation (insert j al) (i :: l)), (Permutation (insert j al) (i :: al)), (Permutation (insert j al) (a :: l)), (Permutation (insert j al) (a :: al)), (Permutation (insert j al) (j :: l)), (Permutation (insert j al) (j :: al)), (Permutation (insert j al) (merge l l)), (Permutation (insert j al) (merge l al))
(Permutation (insert j al) (merge al l)), (Permutation (insert j al) (merge al al)), (Permutation (insert j al) (insert i l)), (Permutation (insert j al) (insert i al)), (Permutation (insert j al) (insert a l)), (Permutation (insert j al) (insert a al)), (Permutation (insert j al) (insert j l)), (Permutation (insert j al) (maybe_swap l)), (Permutation (insert j al) (maybe_swap al)), (Permutation (insert j al) (l ++ l))
(Permutation (insert j al) (l ++ al)), (Permutation (insert j al) (al ++ l)), (Permutation (insert j al) (al ++ al)), (Permutation (insert j al) []), (Permutation (maybe_swap l) l), (Permutation (maybe_swap l) al), (Permutation (maybe_swap l) (i :: l)), (Permutation (maybe_swap l) (i :: al)), (Permutation (maybe_swap l) (a :: l)), (Permutation (maybe_swap l) (a :: al))
(Permutation (maybe_swap l) (j :: l)), (Permutation (maybe_swap l) (j :: al)), (Permutation (maybe_swap l) (merge l l)), (Permutation (maybe_swap l) (merge l al)), (Permutation (maybe_swap l) (merge al l)), (Permutation (maybe_swap l) (merge al al)), (Permutation (maybe_swap l) (insert i l)), (Permutation (maybe_swap l) (insert i al)), (Permutation (maybe_swap l) (insert a l)), (Permutation (maybe_swap l) (insert a al))
(Permutation (maybe_swap l) (insert j l)), (Permutation (maybe_swap l) (insert j al)), (Permutation (maybe_swap l) (maybe_swap al)), (Permutation (maybe_swap l) (l ++ l)), (Permutation (maybe_swap l) (l ++ al)), (Permutation (maybe_swap l) (al ++ l)), (Permutation (maybe_swap l) (al ++ al)), (Permutation (maybe_swap l) []), (Permutation (maybe_swap al) l), (Permutation (maybe_swap al) al)
(Permutation (maybe_swap al) (i :: l)), (Permutation (maybe_swap al) (i :: al)), (Permutation (maybe_swap al) (a :: l)), (Permutation (maybe_swap al) (a :: al)), (Permutation (maybe_swap al) (j :: l)), (Permutation (maybe_swap al) (j :: al)), (Permutation (maybe_swap al) (merge l l)), (Permutation (maybe_swap al) (merge l al)), (Permutation (maybe_swap al) (merge al l)), (Permutation (maybe_swap al) (merge al al))
(Permutation (maybe_swap al) (insert i l)), (Permutation (maybe_swap al) (insert i al)), (Permutation (maybe_swap al) (insert a l)), (Permutation (maybe_swap al) (insert a al)), (Permutation (maybe_swap al) (insert j l)), (Permutation (maybe_swap al) (insert j al)), (Permutation (maybe_swap al) (maybe_swap l)), (Permutation (maybe_swap al) (l ++ l)), (Permutation (maybe_swap al) (l ++ al)), (Permutation (maybe_swap al) (al ++ l))
(Permutation (maybe_swap al) (al ++ al)), (Permutation (maybe_swap al) []), (Permutation (l ++ l) l), (Permutation (l ++ l) al), (Permutation (l ++ l) (i :: l)), (Permutation (l ++ l) (i :: al)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: al)), (Permutation (l ++ l) (j :: l)), (Permutation (l ++ l) (j :: al))
(Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) (merge l al)), (Permutation (l ++ l) (merge al l)), (Permutation (l ++ l) (merge al al)), (Permutation (l ++ l) (insert i l)), (Permutation (l ++ l) (insert i al)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a al)), (Permutation (l ++ l) (insert j l)), (Permutation (l ++ l) (insert j al))
(Permutation (l ++ l) (maybe_swap l)), (Permutation (l ++ l) (maybe_swap al)), (Permutation (l ++ l) (l ++ al)), (Permutation (l ++ l) (al ++ l)), (Permutation (l ++ l) (al ++ al)), (Permutation (l ++ l) []), (Permutation (l ++ al) l), (Permutation (l ++ al) al), (Permutation (l ++ al) (i :: l)), (Permutation (l ++ al) (i :: al))
(Permutation (l ++ al) (a :: l)), (Permutation (l ++ al) (a :: al)), (Permutation (l ++ al) (j :: l)), (Permutation (l ++ al) (j :: al)), (Permutation (l ++ al) (merge l l)), (Permutation (l ++ al) (merge l al)), (Permutation (l ++ al) (merge al l)), (Permutation (l ++ al) (merge al al)), (Permutation (l ++ al) (insert i l)), (Permutation (l ++ al) (insert i al))
(Permutation (l ++ al) (insert a l)), (Permutation (l ++ al) (insert a al)), (Permutation (l ++ al) (insert j l)), (Permutation (l ++ al) (insert j al)), (Permutation (l ++ al) (maybe_swap l)), (Permutation (l ++ al) (maybe_swap al)), (Permutation (l ++ al) (l ++ l)), (Permutation (l ++ al) (al ++ l)), (Permutation (l ++ al) (al ++ al)), (Permutation (l ++ al) [])
(Permutation (al ++ l) l), (Permutation (al ++ l) al), (Permutation (al ++ l) (i :: l)), (Permutation (al ++ l) (i :: al)), (Permutation (al ++ l) (a :: l)), (Permutation (al ++ l) (a :: al)), (Permutation (al ++ l) (j :: l)), (Permutation (al ++ l) (j :: al)), (Permutation (al ++ l) (merge l l)), (Permutation (al ++ l) (merge l al))
(Permutation (al ++ l) (merge al l)), (Permutation (al ++ l) (merge al al)), (Permutation (al ++ l) (insert i l)), (Permutation (al ++ l) (insert i al)), (Permutation (al ++ l) (insert a l)), (Permutation (al ++ l) (insert a al)), (Permutation (al ++ l) (insert j l)), (Permutation (al ++ l) (insert j al)), (Permutation (al ++ l) (maybe_swap l)), (Permutation (al ++ l) (maybe_swap al))
(Permutation (al ++ l) (l ++ l)), (Permutation (al ++ l) (l ++ al)), (Permutation (al ++ l) (al ++ al)), (Permutation (al ++ l) []), (Permutation (al ++ al) l), (Permutation (al ++ al) al), (Permutation (al ++ al) (i :: l)), (Permutation (al ++ al) (i :: al)), (Permutation (al ++ al) (a :: l)), (Permutation (al ++ al) (a :: al))
(Permutation (al ++ al) (j :: l)), (Permutation (al ++ al) (j :: al)), (Permutation (al ++ al) (merge l l)), (Permutation (al ++ al) (merge l al)), (Permutation (al ++ al) (merge al l)), (Permutation (al ++ al) (merge al al)), (Permutation (al ++ al) (insert i l)), (Permutation (al ++ al) (insert i al)), (Permutation (al ++ al) (insert a l)), (Permutation (al ++ al) (insert a al))
(Permutation (al ++ al) (insert j l)), (Permutation (al ++ al) (insert j al)), (Permutation (al ++ al) (maybe_swap l)), (Permutation (al ++ al) (maybe_swap al)), (Permutation (al ++ al) (l ++ l)), (Permutation (al ++ al) (l ++ al)), (Permutation (al ++ al) (al ++ l)), (Permutation (al ++ al) []), (Permutation [] l), (Permutation [] al)
(Permutation [] (i :: l)), (Permutation [] (i :: al)), (Permutation [] (a :: l)), (Permutation [] (a :: al)), (Permutation [] (j :: l)), (Permutation [] (j :: al)), (Permutation [] (merge l l)), (Permutation [] (merge l al)), (Permutation [] (merge al l)), (Permutation [] (merge al al))
(Permutation [] (insert i l)), (Permutation [] (insert i al)), (Permutation [] (insert a l)), (Permutation [] (insert a al)), (Permutation [] (insert j l)), (Permutation [] (insert j al)), (Permutation [] (maybe_swap l)), (Permutation [] (maybe_swap al)), (Permutation [] (l ++ l)), (Permutation [] (l ++ al))
(Permutation [] (al ++ l)), (Permutation [] (al ++ al)), (In i (i :: l)), (In i (i :: al)), (In i (a :: l)), (In i (a :: al)), (In i (j :: l)), (In i (j :: al)), (In i (merge l l)), (In i (merge l al))
(In i (merge al l)), (In i (merge al al)), (In i (insert i l)), (In i (insert i al)), (In i (insert a l)), (In i (insert a al)), (In i (insert j l)), (In i (insert j al)), (In i (maybe_swap l)), (In i (maybe_swap al))
(In i (l ++ l)), (In i (l ++ al)), (In i (al ++ l)), (In i (al ++ al)), (In a (i :: l)), (In a (i :: al)), (In a (a :: l)), (In a (a :: al)), (In a (j :: l)), (In a (j :: al))
(In a (merge l l)), (In a (merge l al)), (In a (merge al l)), (In a (merge al al)), (In a (insert i l)), (In a (insert i al)), (In a (insert a l)), (In a (insert a al)), (In a (insert j l)), (In a (insert j al))
(In a (maybe_swap l)), (In a (maybe_swap al)), (In a (l ++ l)), (In a (l ++ al)), (In a (al ++ l)), (In a (al ++ al)), (In j (i :: l)), (In j (i :: al)), (In j (a :: l)), (In j (a :: al))
(In j (j :: l)), (In j (j :: al)), (In j (merge l l)), (In j (merge l al)), (In j (merge al l)), (In j (merge al al)), (In j (insert i l)), (In j (insert i al)), (In j (insert a l)), (In j (insert a al))
(In j (insert j l)), (In j (insert j al)), (In j (maybe_swap l)), (In j (maybe_swap al)), (In j (l ++ l)), (In j (l ++ al)), (In j (al ++ l)), (In j (al ++ al)), (In (length l) l), (In (length l) al)
(In (length l) (i :: l)), (In (length l) (i :: al)), (In (length l) (a :: l)), (In (length l) (a :: al)), (In (length l) (j :: l)), (In (length l) (j :: al)), (In (length l) (merge l l)), (In (length l) (merge l al)), (In (length l) (merge al l)), (In (length l) (merge al al))
(In (length l) (insert i l)), (In (length l) (insert i al)), (In (length l) (insert a l)), (In (length l) (insert a al)), (In (length l) (insert j l)), (In (length l) (insert j al)), (In (length l) (maybe_swap l)), (In (length l) (maybe_swap al)), (In (length l) (l ++ l)), (In (length l) (l ++ al))
(In (length l) (al ++ l)), (In (length l) (al ++ al)), (In (length al) l), (In (length al) al), (In (length al) (i :: l)), (In (length al) (i :: al)), (In (length al) (a :: l)), (In (length al) (a :: al)), (In (length al) (j :: l)), (In (length al) (j :: al))
(In (length al) (merge l l)), (In (length al) (merge l al)), (In (length al) (merge al l)), (In (length al) (merge al al)), (In (length al) (insert i l)), (In (length al) (insert i al)), (In (length al) (insert a l)), (In (length al) (insert a al)), (In (length al) (insert j l)), (In (length al) (insert j al))
(In (length al) (maybe_swap l)), (In (length al) (maybe_swap al)), (In (length al) (l ++ l)), (In (length al) (l ++ al)), (In (length al) (al ++ l)), (In (length al) (al ++ al)), (i < length l), (i < length al), (a < length l), (a < length al)
(j < length l), (j < length al), (length l < i), (length l < a), (length l < j), (length l < length al), (length al < i), (length al < a), (length al < j), (length al < length l)
(i <= length l), (i <= length al), (a <= length l), (a <= length al), (j <= length l), (j <= length al), (length l <= i), (length l <= a), (length l <= j), (length l <= length al)
(length al <= i), (length al <= a), (length al <= j), (length al <= length l), (~ Abs l l), (~ Abs l al), (~ Abs al l), (~ Abs al al), (~ priq l), (~ priq al)
(~ Permutation l l), (~ Permutation l al), (~ Permutation al l), (~ Permutation al al), (~ In i l), (~ In i al), (~ In a l), (~ In a al), (~ In j l), (~ In j al)
(~ i < i), (~ i < a), (~ i < j), (~ a < i), (~ a < a), (~ a < j), (~ j < i), (~ j < a), (~ j < j), (~ i <= i)
(~ i <= a), (~ i <= j), (~ a <= i), (~ a <= a), (~ a <= j), (~ j <= i), (~ j <= a), (~ j <= j), (l <> l), (l <> al)
(al <> l), (al <> al), (i <> i), (i <> a), (i <> j), (a <> i), (a <> a), (a <> j), (j <> i), (j <> a)
(j <> j), (None = Some l), (None = Some al), (i :: l = l), (i :: l = al), (i :: l = merge l l), (i :: l = merge l al), (i :: l = merge al l), (i :: l = merge al al), (i :: l = insert i l)
(i :: l = insert i al), (i :: l = insert a l), (i :: l = insert a al), (i :: l = insert j l), (i :: l = insert j al), (i :: l = maybe_swap l), (i :: l = maybe_swap al), (i :: l = l ++ l), (i :: l = l ++ al), (i :: l = al ++ l)
(i :: l = al ++ al), (i :: l = []), (i :: al = l), (i :: al = al), (i :: al = merge l l), (i :: al = merge l al), (i :: al = merge al l), (i :: al = merge al al), (i :: al = insert i l), (i :: al = insert i al)
(i :: al = insert a l), (i :: al = insert a al), (i :: al = insert j l), (i :: al = insert j al), (i :: al = maybe_swap l), (i :: al = maybe_swap al), (i :: al = l ++ l), (i :: al = l ++ al), (i :: al = al ++ l), (i :: al = al ++ al)
(i :: al = []), (a :: l = l), (a :: l = al), (a :: l = merge l l), (a :: l = merge l al), (a :: l = merge al l), (a :: l = merge al al), (a :: l = insert i l), (a :: l = insert i al), (a :: l = insert a l)
(a :: l = insert a al), (a :: l = insert j l), (a :: l = insert j al), (a :: l = maybe_swap l), (a :: l = maybe_swap al), (a :: l = l ++ l), (a :: l = l ++ al), (a :: l = al ++ l), (a :: l = al ++ al), (a :: l = [])
(a :: al = l), (a :: al = al), (a :: al = merge l l), (a :: al = merge l al), (a :: al = merge al l), (a :: al = merge al al), (a :: al = insert i l), (a :: al = insert i al), (a :: al = insert a l), (a :: al = insert a al)
(a :: al = insert j l), (a :: al = insert j al), (a :: al = maybe_swap l), (a :: al = maybe_swap al), (a :: al = l ++ l), (a :: al = l ++ al), (a :: al = al ++ l), (a :: al = al ++ al), (a :: al = []), (j :: l = l)
(j :: l = al), (j :: l = merge l l), (j :: l = merge l al), (j :: l = merge al l), (j :: l = merge al al), (j :: l = insert i l), (j :: l = insert i al), (j :: l = insert a l), (j :: l = insert a al), (j :: l = insert j l)
(j :: l = insert j al), (j :: l = maybe_swap l), (j :: l = maybe_swap al), (j :: l = l ++ l), (j :: l = l ++ al), (j :: l = al ++ l), (j :: l = al ++ al), (j :: l = []), (j :: al = l), (j :: al = al)
(j :: al = merge l l), (j :: al = merge l al), (j :: al = merge al l), (j :: al = merge al al), (j :: al = insert i l), (j :: al = insert i al), (j :: al = insert a l), (j :: al = insert a al), (j :: al = insert j l), (j :: al = insert j al)
(j :: al = maybe_swap l), (j :: al = maybe_swap al), (j :: al = l ++ l), (j :: al = l ++ al), (j :: al = al ++ l), (j :: al = al ++ al), (j :: al = []), (merge l l = l), (merge l l = al), (merge l l = insert i l)
(merge l l = insert i al), (merge l l = insert a l), (merge l l = insert a al), (merge l l = insert j l), (merge l l = insert j al), (merge l l = maybe_swap l), (merge l l = maybe_swap al), (merge l l = l ++ l), (merge l l = l ++ al), (merge l l = al ++ l)
(merge l l = al ++ al), (merge l al = l), (merge l al = al), (merge l al = insert i l), (merge l al = insert i al), (merge l al = insert a l), (merge l al = insert a al), (merge l al = insert j l), (merge l al = insert j al), (merge l al = maybe_swap l)
(merge l al = maybe_swap al), (merge l al = l ++ l), (merge l al = l ++ al), (merge l al = al ++ l), (merge l al = al ++ al), (merge al l = l), (merge al l = al), (merge al l = insert i l), (merge al l = insert i al), (merge al l = insert a l)
(merge al l = insert a al), (merge al l = insert j l), (merge al l = insert j al), (merge al l = maybe_swap l), (merge al l = maybe_swap al), (merge al l = l ++ l), (merge al l = l ++ al), (merge al l = al ++ l), (merge al l = al ++ al), (merge al al = l)
(merge al al = al), (merge al al = insert i l), (merge al al = insert i al), (merge al al = insert a l), (merge al al = insert a al), (merge al al = insert j l), (merge al al = insert j al), (merge al al = maybe_swap l), (merge al al = maybe_swap al), (merge al al = l ++ l)
(merge al al = l ++ al), (merge al al = al ++ l), (merge al al = al ++ al), (insert i l = l), (insert i l = al), (insert i l = l ++ l), (insert i l = l ++ al), (insert i l = al ++ l), (insert i l = al ++ al), (insert i al = l)
(insert i al = al), (insert i al = l ++ l), (insert i al = l ++ al), (insert i al = al ++ l), (insert i al = al ++ al), (insert a l = l), (insert a l = al), (insert a l = l ++ l), (insert a l = l ++ al), (insert a l = al ++ l)
(insert a l = al ++ al), (insert a al = l), (insert a al = al), (insert a al = l ++ l), (insert a al = l ++ al), (insert a al = al ++ l), (insert a al = al ++ al), (insert j l = l), (insert j l = al), (insert j l = l ++ l)
(insert j l = l ++ al), (insert j l = al ++ l), (insert j l = al ++ al), (insert j al = l), (insert j al = al), (insert j al = l ++ l), (insert j al = l ++ al), (insert j al = al ++ l), (insert j al = al ++ al), (maybe_swap l = l)
(maybe_swap l = al), (maybe_swap l = insert i l), (maybe_swap l = insert i al), (maybe_swap l = insert a l), (maybe_swap l = insert a al), (maybe_swap l = insert j l), (maybe_swap l = insert j al), (maybe_swap l = l ++ l), (maybe_swap l = l ++ al), (maybe_swap l = al ++ l)
(maybe_swap l = al ++ al), (maybe_swap al = l), (maybe_swap al = al), (maybe_swap al = insert i l), (maybe_swap al = insert i al), (maybe_swap al = insert a l), (maybe_swap al = insert a al), (maybe_swap al = insert j l), (maybe_swap al = insert j al), (maybe_swap al = l ++ l)
(maybe_swap al = l ++ al), (maybe_swap al = al ++ l), (maybe_swap al = al ++ al), (l ++ l = l), (l ++ l = al), (l ++ al = l), (l ++ al = al), (al ++ l = l), (al ++ l = al), (al ++ al = l)
(al ++ al = al), ([] = l), ([] = al), ([] = merge l l), ([] = merge l al), ([] = merge al l), ([] = merge al al), ([] = insert i l), ([] = insert i al), ([] = insert a l)
([] = insert a al), ([] = insert j l), ([] = insert j al), ([] = maybe_swap l), ([] = maybe_swap al), ([] = l ++ l), ([] = l ++ al), ([] = al ++ l), ([] = al ++ al), (None = Some i)
(None = Some a), (None = Some j), ((i, l) = select i l), ((i, l) = select i al), ((i, l) = select a l), ((i, l) = select a al), ((i, l) = select j l), ((i, l) = select j al), ((i, al) = select i l), ((i, al) = select i al)
((i, al) = select a l), ((i, al) = select a al), ((i, al) = select j l), ((i, al) = select j al), ((a, l) = select i l), ((a, l) = select i al), ((a, l) = select a l), ((a, l) = select a al), ((a, l) = select j l), ((a, l) = select j al)
((a, al) = select i l), ((a, al) = select i al), ((a, al) = select a l), ((a, al) = select a al), ((a, al) = select j l), ((a, al) = select j al), ((j, l) = select i l), ((j, l) = select i al), ((j, l) = select a l), ((j, l) = select a al)
((j, l) = select j l), ((j, l) = select j al), ((j, al) = select i l), ((j, al) = select i al), ((j, al) = select a l), ((j, al) = select a al), ((j, al) = select j l), ((j, al) = select j al), ((i >? i) = (i >=? i)), ((i >? i) = (i >=? a))
((i >? i) = (i >=? j)), ((i >? i) = (a >=? i)), ((i >? i) = (a >=? a)), ((i >? i) = (a >=? j)), ((i >? i) = (j >=? i)), ((i >? i) = (j >=? a)), ((i >? i) = (j >=? j)), ((i >? a) = (i >=? i)), ((i >? a) = (i >=? a)), ((i >? a) = (i >=? j))
((i >? a) = (a >=? i)), ((i >? a) = (a >=? a)), ((i >? a) = (a >=? j)), ((i >? a) = (j >=? i)), ((i >? a) = (j >=? a)), ((i >? a) = (j >=? j)), ((i >? j) = (i >=? i)), ((i >? j) = (i >=? a)), ((i >? j) = (i >=? j)), ((i >? j) = (a >=? i))
((i >? j) = (a >=? a)), ((i >? j) = (a >=? j)), ((i >? j) = (j >=? i)), ((i >? j) = (j >=? a)), ((i >? j) = (j >=? j)), ((a >? i) = (i >=? i)), ((a >? i) = (i >=? a)), ((a >? i) = (i >=? j)), ((a >? i) = (a >=? i)), ((a >? i) = (a >=? a))
((a >? i) = (a >=? j)), ((a >? i) = (j >=? i)), ((a >? i) = (j >=? a)), ((a >? i) = (j >=? j)), ((a >? a) = (i >=? i)), ((a >? a) = (i >=? a)), ((a >? a) = (i >=? j)), ((a >? a) = (a >=? i)), ((a >? a) = (a >=? a)), ((a >? a) = (a >=? j))
((a >? a) = (j >=? i)), ((a >? a) = (j >=? a)), ((a >? a) = (j >=? j)), ((a >? j) = (i >=? i)), ((a >? j) = (i >=? a)), ((a >? j) = (i >=? j)), ((a >? j) = (a >=? i)), ((a >? j) = (a >=? a)), ((a >? j) = (a >=? j)), ((a >? j) = (j >=? i))
((a >? j) = (j >=? a)), ((a >? j) = (j >=? j)), ((j >? i) = (i >=? i)), ((j >? i) = (i >=? a)), ((j >? i) = (i >=? j)), ((j >? i) = (a >=? i)), ((j >? i) = (a >=? a)), ((j >? i) = (a >=? j)), ((j >? i) = (j >=? i)), ((j >? i) = (j >=? a))
((j >? i) = (j >=? j)), ((j >? a) = (i >=? i)), ((j >? a) = (i >=? a)), ((j >? a) = (i >=? j)), ((j >? a) = (a >=? i)), ((j >? a) = (a >=? a)), ((j >? a) = (a >=? j)), ((j >? a) = (j >=? i)), ((j >? a) = (j >=? a)), ((j >? a) = (j >=? j))
((j >? j) = (i >=? i)), ((j >? j) = (i >=? a)), ((j >? j) = (i >=? j)), ((j >? j) = (a >=? i)), ((j >? j) = (a >=? a)), ((j >? j) = (a >=? j)), ((j >? j) = (j >=? i)), ((j >? j) = (j >=? a)), ((j >? j) = (j >=? j)), (length l = i)
(length l = a), (length l = j), (length al = i), (length al = a), (length al = j)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 46.829 seconds


Label: 0 (0)
(a <= i), (~ i < a), (false = (a >? i)), (true = (i >=? a))

Label: 1 (1)
(i <= j), (~ j < i), (false = (i >? j)), (true = (j >=? i)), ((j, l) = select i al)


------------------------------ ALL RESULTS ------------------------------
1. (i >= a -> select i al = (j, l) -> j >= a)

2. (select i al = (j, l) -> i <= j)
(i >= a -> i <= j -> j >= a)

3. (select i al = (j, l) -> ~ j < i)
(i >= a -> ~ j < i -> j >= a)

4. (select i al = (j, l) -> true = (j >=? i))
(i >= a -> true = (j >=? i) -> j >= a)

5. (select i al = (j, l) -> false = (i >? j))
(i >= a -> false = (i >? j) -> j >= a)

6. (i >= a -> ~ i < a)
(~ i < a -> select i al = (j, l) -> j >= a)

7. (i >= a -> true = (i >=? a))
(true = (i >=? a) -> select i al = (j, l) -> j >= a)

8. (i >= a -> false = (a >? i))
(false = (a >? i) -> select i al = (j, l) -> j >= a)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 65.064 seconds

Number of Result Pairs Returned: 8

1. (i >= a -> select i al = (j, l) -> j >= a)

2. (select i al = (j, l) -> i <= j)
(i >= a -> i <= j -> j >= a)

3. (select i al = (j, l) -> ~ j < i)
(i >= a -> ~ j < i -> j >= a)

4. (select i al = (j, l) -> true = (j >=? i))
(i >= a -> true = (j >=? i) -> j >= a)

5. (select i al = (j, l) -> false = (i >? j))
(i >= a -> false = (i >? j) -> j >= a)
