Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (ForallT (fun (x : nat) (_ : value) => 2 < x) t)

----------------------------------
Goal: (Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t []))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.885 seconds

gv0 : (list (nat * value)) = (elements_tr t [])
gv1 : (list (nat * value)) = []


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 47.028 seconds

Label: Generalization #0
Assumptions: 
 -- (ForallT (fun (x : nat) (_ : value) => 2 < x) t)

----------------------------------
Goal: (Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t []))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (ForallT (fun (x : nat) (_ : value) => 2 < x) t)
 -- ([] = gv1)

----------------------------------
Goal: (Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (ForallT (fun (x : nat) (_ : value) => 2 < x) t)
 -- (elements_tr t [] = gv0)

----------------------------------
Goal: (Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 47.198 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
value : Set
value_rect : (forall P : value -> Type,
 (forall n : nat, P (Positive n)) ->
 (forall n : nat, P (Negative n)) -> forall v : value, P v)
value_rec : (forall P : value -> Set,
 (forall n : nat, P (Positive n)) ->
 (forall n : nat, P (Negative n)) -> forall v : value, P v)
color : Set
color_rect : (forall P : color -> Type, P Red -> P Black -> forall c : color, P c)
color_rec : (forall P : color -> Set, P Red -> P Black -> forall c : color, P c)
tree : Set
tree_rect : (forall P : tree -> Type,
 P E ->
 (forall (c : color) (t : tree),
  P t -> forall (n : nat) (v : value) (t0 : tree), P t0 -> P (T c t n v t0)) ->
 forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 P E ->
 (forall (c : color) (t : tree),
  P t -> forall (n : nat) (v : value) (t0 : tree), P t0 -> P (T c t n v t0)) ->
 forall t : tree, P t)
empty_tree : tree
lookup : (value -> nat -> tree -> value)
balance : (color -> tree -> nat -> value -> tree -> tree)
ins : (nat -> value -> tree -> tree)
make_black : (tree -> tree)
insert : (nat -> value -> tree -> tree)
elements_tr : (tree -> list (nat * value) -> list (nat * value))
elements : (tree -> list (nat * value))
ForallT : ((nat -> value -> Prop) -> tree -> Prop)
BST : (tree -> Prop)
RB : (tree -> color -> nat -> Prop)
NearlyRB : (tree -> nat -> Prop)
height : (tree -> nat)
mindepth : (tree -> nat)
Positive : (nat -> value)
Negative : (nat -> value)
Red : color
Black : color
E : tree
T : (color -> tree -> nat -> value -> tree -> tree)

Label: 0 (0)
Abducted Assumption: (ForallT (fun (x : nat) (_ : value) => 2 < x) t)
Positive Examples: 91
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 191
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 173
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 47.337 seconds


Label: 0 (0)
(BST t), (t = t), (NearlyRB t (mindepth t)), (NearlyRB t (height t)), (NearlyRB (make_black t) (mindepth t)), (NearlyRB (make_black t) (height t)), (NearlyRB empty_tree (mindepth t)), (NearlyRB empty_tree (height t)), (NearlyRB E (mindepth t)), (NearlyRB E (height t))
(RB t Red (mindepth t)), (RB t Red (height t)), (RB t Black (mindepth t)), (RB t Black (height t)), (RB (make_black t) Red (mindepth t)), (RB (make_black t) Red (height t)), (RB (make_black t) Black (mindepth t)), (RB (make_black t) Black (height t)), (RB empty_tree Red (mindepth t)), (RB empty_tree Red (height t))
(RB empty_tree Black (mindepth t)), (RB empty_tree Black (height t)), (RB E Red (mindepth t)), (RB E Red (height t)), (RB E Black (mindepth t)), (RB E Black (height t)), (BST (make_black t)), (BST empty_tree), (BST E), (mindepth t < height t)
(height t < mindepth t), (mindepth t <= height t), (height t <= mindepth t), (~ BST t), (t <> t), (None = Some t), (make_black t = t), (empty_tree = make_black t), (E = make_black t), (mindepth t = height t)

Label: 1 (1)
(BST t), (gv1 = gv1), (t = t), (NearlyRB t (mindepth t)), (NearlyRB t (height t)), (NearlyRB t (length gv1)), (NearlyRB (make_black t) (mindepth t)), (NearlyRB (make_black t) (height t)), (NearlyRB (make_black t) (length gv1)), (NearlyRB empty_tree (mindepth t))
(NearlyRB empty_tree (height t)), (NearlyRB empty_tree (length gv1)), (NearlyRB E (mindepth t)), (NearlyRB E (height t)), (NearlyRB E (length gv1)), (RB t Red (mindepth t)), (RB t Red (height t)), (RB t Red (length gv1)), (RB t Black (mindepth t)), (RB t Black (height t))
(RB t Black (length gv1)), (RB (make_black t) Red (mindepth t)), (RB (make_black t) Red (height t)), (RB (make_black t) Red (length gv1)), (RB (make_black t) Black (mindepth t)), (RB (make_black t) Black (height t)), (RB (make_black t) Black (length gv1)), (RB empty_tree Red (mindepth t)), (RB empty_tree Red (height t)), (RB empty_tree Red (length gv1))
(RB empty_tree Black (mindepth t)), (RB empty_tree Black (height t)), (RB empty_tree Black (length gv1)), (RB E Red (mindepth t)), (RB E Red (height t)), (RB E Red (length gv1)), (RB E Black (mindepth t)), (RB E Black (height t)), (RB E Black (length gv1)), (BST (make_black t))
(BST empty_tree), (BST E), (mindepth t < height t), (mindepth t < length gv1), (height t < mindepth t), (height t < length gv1), (length gv1 < mindepth t), (length gv1 < height t), (mindepth t <= height t), (mindepth t <= length gv1)
(height t <= mindepth t), (height t <= length gv1), (length gv1 <= mindepth t), (length gv1 <= height t), (~ BST t), (gv1 <> gv1), (t <> t), (None = Some t), (None = Some gv1), (mindepth t = height t)
(mindepth t = length gv1), (length gv1 = height t), (elements t = gv1), (elements t = gv1 ++ gv1), (elements_tr t gv1 = gv1), (elements_tr t gv1 = elements t), (elements_tr t gv1 = gv1 ++ gv1), (gv1 ++ gv1 = gv1), ([] = gv1), ([] = elements t)
([] = elements_tr t gv1), ([] = gv1 ++ gv1), (make_black t = t), (empty_tree = make_black t), (E = make_black t)

Label: 2 (2)
(BST t), (t = t), (gv0 = gv0), (NearlyRB t (mindepth t)), (NearlyRB t (height t)), (NearlyRB t (length gv0)), (NearlyRB (make_black t) (mindepth t)), (NearlyRB (make_black t) (height t)), (NearlyRB (make_black t) (length gv0)), (NearlyRB empty_tree (mindepth t))
(NearlyRB empty_tree (height t)), (NearlyRB empty_tree (length gv0)), (NearlyRB E (mindepth t)), (NearlyRB E (height t)), (NearlyRB E (length gv0)), (RB t Red (mindepth t)), (RB t Red (height t)), (RB t Red (length gv0)), (RB t Black (mindepth t)), (RB t Black (height t))
(RB t Black (length gv0)), (RB (make_black t) Red (mindepth t)), (RB (make_black t) Red (height t)), (RB (make_black t) Red (length gv0)), (RB (make_black t) Black (mindepth t)), (RB (make_black t) Black (height t)), (RB (make_black t) Black (length gv0)), (RB empty_tree Red (mindepth t)), (RB empty_tree Red (height t)), (RB empty_tree Red (length gv0))
(RB empty_tree Black (mindepth t)), (RB empty_tree Black (height t)), (RB empty_tree Black (length gv0)), (RB E Red (mindepth t)), (RB E Red (height t)), (RB E Red (length gv0)), (RB E Black (mindepth t)), (RB E Black (height t)), (RB E Black (length gv0)), (BST (make_black t))
(BST empty_tree), (BST E), (mindepth t < height t), (mindepth t < length gv0), (height t < mindepth t), (height t < length gv0), (length gv0 < mindepth t), (length gv0 < height t), (mindepth t <= height t), (mindepth t <= length gv0)
(height t <= mindepth t), (height t <= length gv0), (length gv0 <= mindepth t), (length gv0 <= height t), (~ BST t), (t <> t), (gv0 <> gv0), (None = Some t), (None = Some gv0), (mindepth t = height t)
(mindepth t = length gv0), (length gv0 = height t), (elements t = gv0), (elements t = gv0 ++ gv0), (elements_tr t gv0 = gv0), (elements_tr t gv0 = elements t), (elements_tr t gv0 = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0), ([] = elements t)
([] = elements_tr t gv0), ([] = gv0 ++ gv0), (make_black t = t), (empty_tree = make_black t), (E = make_black t)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 60.511 seconds


Label: 0 (0)

Label: 1 (1)
(RB E Red (length gv1)), (RB E Black (length gv1)), (RB empty_tree Red (length gv1)), (RB empty_tree Black (length gv1)), ([] = gv1), (elements_tr t gv1 = elements t), (gv1 ++ gv1 = gv1), ([] = gv1 ++ gv1)

Label: 2 (2)
(elements t = gv0), (elements_tr t gv0 = gv0 ++ gv0)


------------------------------ ALL RESULTS ------------------------------
1. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t []))

2. ([] ++ [] = [])

3. (elements t = elements_tr t [])

4. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB E Red (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

5. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB E Black (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

6. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB empty_tree Red (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

7. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB empty_tree Black (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

8. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  elements_tr t gv1 = elements t ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

9. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  gv1 ++ gv1 = gv1 ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

10. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  [] = gv1 ++ gv1 ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 89.884 seconds

Number of Result Pairs Returned: 10

1. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t []))

2. (elements t = elements_tr t [])

3. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB E Red (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

4. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB E Black (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))

5. (ForallT (fun (x : nat) (_ : value) => 2 < x) t ->  RB empty_tree Red (length gv1) ->  Forall (uncurry (fun (x : nat) (_ : value) => 2 < x)) (elements_tr t gv1))
