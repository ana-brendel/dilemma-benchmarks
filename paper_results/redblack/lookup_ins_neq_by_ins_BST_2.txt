Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (ForallT (fun (k' : nat) (_ : value) => k' < k0) l)
 -- (lookup default k' (ins k v l) = lookup default k' l)
 -- (lookup default k' (ins k v r) = lookup default k' r)
 -- (k >= k0)
 -- (k <> k')
 -- (k0 < k)
 -- (ForallT (fun (k' : nat) (_ : value) => k' > k0) r)
 -- (BST r)
 -- (BST l)

----------------------------------
Goal: (BST (ins k v r))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.883 seconds

gv0 : tree = (ins k v r)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 82.366 seconds

Label: Generalization #0
Assumptions: 
 -- (BST r)

----------------------------------
Goal: (BST (ins k v r))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (ins k v r = gv0)
 -- (BST r)

----------------------------------
Goal: (BST gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 82.531 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
value : Set
value_rect : (forall P : value -> Type,
 (forall n : nat, P (Positive n)) ->
 (forall n : nat, P (Negative n)) -> forall v : value, P v)
value_rec : (forall P : value -> Set,
 (forall n : nat, P (Positive n)) ->
 (forall n : nat, P (Negative n)) -> forall v : value, P v)
color : Set
color_rect : (forall P : color -> Type, P Red -> P Black -> forall c : color, P c)
color_rec : (forall P : color -> Set, P Red -> P Black -> forall c : color, P c)
tree : Set
tree_rect : (forall P : tree -> Type,
 P E ->
 (forall (c : color) (t : tree),
  P t -> forall (n : nat) (v : value) (t0 : tree), P t0 -> P (T c t n v t0)) ->
 forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 P E ->
 (forall (c : color) (t : tree),
  P t -> forall (n : nat) (v : value) (t0 : tree), P t0 -> P (T c t n v t0)) ->
 forall t : tree, P t)
empty_tree : tree
lookup : (value -> nat -> tree -> value)
balance : (color -> tree -> nat -> value -> tree -> tree)
ins : (nat -> value -> tree -> tree)
make_black : (tree -> tree)
insert : (nat -> value -> tree -> tree)
elements_tr : (tree -> list (nat * value) -> list (nat * value))
elements : (tree -> list (nat * value))
ForallT : ((nat -> value -> Prop) -> tree -> Prop)
BST : (tree -> Prop)
RB : (tree -> color -> nat -> Prop)
NearlyRB : (tree -> nat -> Prop)
height : (tree -> nat)
mindepth : (tree -> nat)
Positive : (nat -> value)
Negative : (nat -> value)
Red : color
Black : color
E : tree
T : (color -> tree -> nat -> value -> tree -> tree)

Label: 0 (0)
Abducted Assumption: (BST r)
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 400
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 82.685 seconds


Label: 0 (0)
(NearlyRB r k), (BST r), (k < k), (k <= k), (r = r), (v = v), (k = k), (NearlyRB r (mindepth r)), (NearlyRB r (height r)), (NearlyRB (insert k v r) k)
(NearlyRB (insert k v r) (mindepth r)), (NearlyRB (insert k v r) (height r)), (NearlyRB (make_black r) k), (NearlyRB (make_black r) (mindepth r)), (NearlyRB (make_black r) (height r)), (NearlyRB (ins k v r) k), (NearlyRB (ins k v r) (mindepth r)), (NearlyRB (ins k v r) (height r)), (NearlyRB empty_tree k), (NearlyRB empty_tree (mindepth r))
(NearlyRB empty_tree (height r)), (NearlyRB E k), (NearlyRB E (mindepth r)), (NearlyRB E (height r)), (RB r Red k), (RB r Red (mindepth r)), (RB r Red (height r)), (RB r Black k), (RB r Black (mindepth r)), (RB r Black (height r))
(RB (insert k v r) Red k), (RB (insert k v r) Red (mindepth r)), (RB (insert k v r) Red (height r)), (RB (insert k v r) Black k), (RB (insert k v r) Black (mindepth r)), (RB (insert k v r) Black (height r)), (RB (make_black r) Red k), (RB (make_black r) Red (mindepth r)), (RB (make_black r) Red (height r)), (RB (make_black r) Black k)
(RB (make_black r) Black (mindepth r)), (RB (make_black r) Black (height r)), (RB (ins k v r) Red k), (RB (ins k v r) Red (mindepth r)), (RB (ins k v r) Red (height r)), (RB (ins k v r) Black k), (RB (ins k v r) Black (mindepth r)), (RB (ins k v r) Black (height r)), (RB empty_tree Red k), (RB empty_tree Red (mindepth r))
(RB empty_tree Red (height r)), (RB empty_tree Black k), (RB empty_tree Black (mindepth r)), (RB empty_tree Black (height r)), (RB E Red k), (RB E Red (mindepth r)), (RB E Red (height r)), (RB E Black k), (RB E Black (mindepth r)), (RB E Black (height r))
(BST (insert k v r)), (BST (make_black r)), (BST (ins k v r)), (BST empty_tree), (BST E), (In (k, v) (elements r)), (k < mindepth r), (k < height r), (mindepth r < k), (mindepth r < height r)
(height r < k), (height r < mindepth r), (k <= mindepth r), (k <= height r), (mindepth r <= k), (mindepth r <= height r), (height r <= k), (height r <= mindepth r), (~ NearlyRB r k), (~ BST r)
(~ k < k), (~ k <= k), (r <> r), (v <> v), (k <> k), (None = Some r), (None = Some v), (Negative k = v), (Negative k = Positive k), (Negative k = lookup v k r)
(Positive k = v), (Positive k = lookup v k r), (lookup v k r = v), (mindepth r = k), (mindepth r = height r), (height r = k), (None = Some k), (insert k v r = r), (insert k v r = ins k v r), (make_black r = r)
(make_black r = insert k v r), (make_black r = ins k v r), (ins k v r = r), (empty_tree = insert k v r), (empty_tree = make_black r), (empty_tree = ins k v r), (E = insert k v r), (E = make_black r), (E = ins k v r)

Label: 1 (1)
(NearlyRB r k), (NearlyRB gv0 k), (BST r), (BST gv0), (k < k), (k <= k), (v = v), (k = k), (r = r), (r = gv0)
(gv0 = r), (gv0 = gv0), (NearlyRB r (mindepth r)), (NearlyRB r (mindepth gv0)), (NearlyRB r (height r)), (NearlyRB r (height gv0)), (NearlyRB gv0 (mindepth r)), (NearlyRB gv0 (mindepth gv0)), (NearlyRB gv0 (height r)), (NearlyRB gv0 (height gv0))
(NearlyRB (insert k v r) k), (NearlyRB (insert k v r) (mindepth r)), (NearlyRB (insert k v r) (mindepth gv0)), (NearlyRB (insert k v r) (height r)), (NearlyRB (insert k v r) (height gv0)), (NearlyRB (insert k v gv0) k), (NearlyRB (insert k v gv0) (mindepth r)), (NearlyRB (insert k v gv0) (mindepth gv0)), (NearlyRB (insert k v gv0) (height r)), (NearlyRB (insert k v gv0) (height gv0))
(NearlyRB (make_black r) k), (NearlyRB (make_black r) (mindepth r)), (NearlyRB (make_black r) (mindepth gv0)), (NearlyRB (make_black r) (height r)), (NearlyRB (make_black r) (height gv0)), (NearlyRB (make_black gv0) k), (NearlyRB (make_black gv0) (mindepth r)), (NearlyRB (make_black gv0) (mindepth gv0)), (NearlyRB (make_black gv0) (height r)), (NearlyRB (make_black gv0) (height gv0))
(NearlyRB (ins k v r) k), (NearlyRB (ins k v r) (mindepth r)), (NearlyRB (ins k v r) (mindepth gv0)), (NearlyRB (ins k v r) (height r)), (NearlyRB (ins k v r) (height gv0)), (NearlyRB (ins k v gv0) k), (NearlyRB (ins k v gv0) (mindepth r)), (NearlyRB (ins k v gv0) (mindepth gv0)), (NearlyRB (ins k v gv0) (height r)), (NearlyRB (ins k v gv0) (height gv0))
(NearlyRB empty_tree k), (NearlyRB empty_tree (mindepth r)), (NearlyRB empty_tree (mindepth gv0)), (NearlyRB empty_tree (height r)), (NearlyRB empty_tree (height gv0)), (NearlyRB E k), (NearlyRB E (mindepth r)), (NearlyRB E (mindepth gv0)), (NearlyRB E (height r)), (NearlyRB E (height gv0))
(RB r Red k), (RB r Red (mindepth r)), (RB r Red (mindepth gv0)), (RB r Red (height r)), (RB r Red (height gv0)), (RB r Black k), (RB r Black (mindepth r)), (RB r Black (mindepth gv0)), (RB r Black (height r)), (RB r Black (height gv0))
(RB gv0 Red k), (RB gv0 Red (mindepth r)), (RB gv0 Red (mindepth gv0)), (RB gv0 Red (height r)), (RB gv0 Red (height gv0)), (RB gv0 Black k), (RB gv0 Black (mindepth r)), (RB gv0 Black (mindepth gv0)), (RB gv0 Black (height r)), (RB gv0 Black (height gv0))
(RB (insert k v r) Red k), (RB (insert k v r) Red (mindepth r)), (RB (insert k v r) Red (mindepth gv0)), (RB (insert k v r) Red (height r)), (RB (insert k v r) Red (height gv0)), (RB (insert k v r) Black k), (RB (insert k v r) Black (mindepth r)), (RB (insert k v r) Black (mindepth gv0)), (RB (insert k v r) Black (height r)), (RB (insert k v r) Black (height gv0))
(RB (insert k v gv0) Red k), (RB (insert k v gv0) Red (mindepth r)), (RB (insert k v gv0) Red (mindepth gv0)), (RB (insert k v gv0) Red (height r)), (RB (insert k v gv0) Red (height gv0)), (RB (insert k v gv0) Black k), (RB (insert k v gv0) Black (mindepth r)), (RB (insert k v gv0) Black (mindepth gv0)), (RB (insert k v gv0) Black (height r)), (RB (insert k v gv0) Black (height gv0))
(RB (make_black r) Red k), (RB (make_black r) Red (mindepth r)), (RB (make_black r) Red (mindepth gv0)), (RB (make_black r) Red (height r)), (RB (make_black r) Red (height gv0)), (RB (make_black r) Black k), (RB (make_black r) Black (mindepth r)), (RB (make_black r) Black (mindepth gv0)), (RB (make_black r) Black (height r)), (RB (make_black r) Black (height gv0))
(RB (make_black gv0) Red k), (RB (make_black gv0) Red (mindepth r)), (RB (make_black gv0) Red (mindepth gv0)), (RB (make_black gv0) Red (height r)), (RB (make_black gv0) Red (height gv0)), (RB (make_black gv0) Black k), (RB (make_black gv0) Black (mindepth r)), (RB (make_black gv0) Black (mindepth gv0)), (RB (make_black gv0) Black (height r)), (RB (make_black gv0) Black (height gv0))
(RB (ins k v r) Red k), (RB (ins k v r) Red (mindepth r)), (RB (ins k v r) Red (mindepth gv0)), (RB (ins k v r) Red (height r)), (RB (ins k v r) Red (height gv0)), (RB (ins k v r) Black k), (RB (ins k v r) Black (mindepth r)), (RB (ins k v r) Black (mindepth gv0)), (RB (ins k v r) Black (height r)), (RB (ins k v r) Black (height gv0))
(RB (ins k v gv0) Red k), (RB (ins k v gv0) Red (mindepth r)), (RB (ins k v gv0) Red (mindepth gv0)), (RB (ins k v gv0) Red (height r)), (RB (ins k v gv0) Red (height gv0)), (RB (ins k v gv0) Black k), (RB (ins k v gv0) Black (mindepth r)), (RB (ins k v gv0) Black (mindepth gv0)), (RB (ins k v gv0) Black (height r)), (RB (ins k v gv0) Black (height gv0))
(RB empty_tree Red k), (RB empty_tree Red (mindepth r)), (RB empty_tree Red (mindepth gv0)), (RB empty_tree Red (height r)), (RB empty_tree Red (height gv0)), (RB empty_tree Black k), (RB empty_tree Black (mindepth r)), (RB empty_tree Black (mindepth gv0)), (RB empty_tree Black (height r)), (RB empty_tree Black (height gv0))
(RB E Red k), (RB E Red (mindepth r)), (RB E Red (mindepth gv0)), (RB E Red (height r)), (RB E Red (height gv0)), (RB E Black k), (RB E Black (mindepth r)), (RB E Black (mindepth gv0)), (RB E Black (height r)), (RB E Black (height gv0))
(BST (insert k v r)), (BST (insert k v gv0)), (BST (make_black r)), (BST (make_black gv0)), (BST (ins k v r)), (BST (ins k v gv0)), (BST empty_tree), (BST E), (In (k, v) (elements r)), (In (k, v) (elements gv0))
(k < mindepth r), (k < mindepth gv0), (k < height r), (k < height gv0), (mindepth r < k), (mindepth r < mindepth gv0), (mindepth r < height r), (mindepth r < height gv0), (mindepth gv0 < k), (mindepth gv0 < mindepth r)
(mindepth gv0 < height r), (mindepth gv0 < height gv0), (height r < k), (height r < mindepth r), (height r < mindepth gv0), (height r < height gv0), (height gv0 < k), (height gv0 < mindepth r), (height gv0 < mindepth gv0), (height gv0 < height r)
(k <= mindepth r), (k <= mindepth gv0), (k <= height r), (k <= height gv0), (mindepth r <= k), (mindepth r <= mindepth gv0), (mindepth r <= height r), (mindepth r <= height gv0), (mindepth gv0 <= k), (mindepth gv0 <= mindepth r)
(mindepth gv0 <= height r), (mindepth gv0 <= height gv0), (height r <= k), (height r <= mindepth r), (height r <= mindepth gv0), (height r <= height gv0), (height gv0 <= k), (height gv0 <= mindepth r), (height gv0 <= mindepth gv0), (height gv0 <= height r)
(~ NearlyRB r k), (~ NearlyRB gv0 k), (~ BST r), (~ BST gv0), (~ k < k), (~ k <= k), (v <> v), (k <> k), (r <> r), (r <> gv0)
(gv0 <> r), (gv0 <> gv0), (None = Some r), (None = Some gv0), (None = Some v), (Negative k = v), (Negative k = Positive k), (Negative k = lookup v k r), (Negative k = lookup v k gv0), (Positive k = v)
(Positive k = lookup v k r), (Positive k = lookup v k gv0), (lookup v k r = v), (lookup v k gv0 = v), (mindepth r = k), (mindepth r = height r), (mindepth r = height gv0), (mindepth gv0 = k), (mindepth gv0 = height r), (mindepth gv0 = height gv0)
(height r = k), (height gv0 = k), (None = Some k), (insert k v r = r), (insert k v r = gv0), (insert k v r = ins k v r), (insert k v r = ins k v gv0), (insert k v gv0 = r), (insert k v gv0 = gv0), (insert k v gv0 = ins k v r)
(insert k v gv0 = ins k v gv0), (make_black r = r), (make_black r = gv0), (make_black r = insert k v r), (make_black r = insert k v gv0), (make_black r = ins k v r), (make_black r = ins k v gv0), (make_black gv0 = r), (make_black gv0 = gv0), (make_black gv0 = insert k v r)
(make_black gv0 = insert k v gv0), (make_black gv0 = ins k v r), (make_black gv0 = ins k v gv0), (ins k v r = r), (ins k v r = gv0), (ins k v gv0 = r), (ins k v gv0 = gv0), (empty_tree = insert k v r), (empty_tree = insert k v gv0), (empty_tree = make_black r)
(empty_tree = make_black gv0), (empty_tree = ins k v r), (empty_tree = ins k v gv0), (E = insert k v r), (E = insert k v gv0), (E = make_black r), (E = make_black gv0), (E = ins k v r), (E = ins k v gv0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 101.311 seconds


Label: 0 (0)
(BST r), (BST (make_black r)), (BST (ins k v r)), (BST (insert k v r))

Label: 1 (1)
(BST gv0), (BST (make_black gv0)), (BST (ins k v gv0)), (BST (insert k v gv0)), (ins k v r = gv0), (make_black gv0 = insert k v r)


------------------------------ ALL RESULTS ------------------------------
1. (BST r -> BST (ins k v r))

2. (BST r -> BST (make_black r))
(BST (make_black r) -> BST (ins k v r))

3. (BST r -> BST (insert k v r))
(BST (insert k v r) -> BST (ins k v r))

4. (BST (make_black gv0) -> BST gv0)

5. (BST (ins k v gv0) -> BST gv0)

6. (BST (insert k v gv0) -> BST gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 133.259 seconds

Number of Result Pairs Returned: 6

1. (BST r -> BST (ins k v r))

2. (BST r -> BST (make_black r))
(BST (make_black r) -> BST (ins k v r))

3. (BST r -> BST (insert k v r))
(BST (insert k v r) -> BST (ins k v r))

4. (BST (make_black gv0) -> BST gv0)

5. (BST (ins k v gv0) -> BST gv0)
