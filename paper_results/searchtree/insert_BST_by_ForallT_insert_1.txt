Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (ForallT (fun (y : nat) (_ : value) => y > x) r)
 -- (ForallT (fun (y : nat) (_ : value) => y < x) l)
 -- (BST r)
 -- (BST (insert k v r))
 -- (BST l)
 -- (k < x)
 -- (BST (insert k v l))

----------------------------------
Goal: (ForallT (fun (y : nat) (_ : value) => y < x) (insert k v l))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.471 seconds

gv0 : tree = (insert k v l)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 85.39 seconds

Label: Generalization #0
Assumptions: 
 -- (ForallT (fun (y : nat) (_ : value) => y < x) l)
 -- (k < x)

----------------------------------
Goal: (ForallT (fun (y : nat) (_ : value) => y < x) (insert k v l))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (ForallT (fun (y : nat) (_ : value) => y < x) l)
 -- (insert k v l = gv0)
 -- (k < x)

----------------------------------
Goal: (ForallT (fun (y : nat) (_ : value) => y < x) gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 85.549 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
value : Set
value_rect : (forall P : value -> Type,
 P Red -> P Green -> P Blue -> forall v : value, P v)
value_rec : (forall P : value -> Set, P Red -> P Green -> P Blue -> forall v : value, P v)
tree : Set
tree_rect : (forall P : tree -> Type,
 P E ->
 (forall l : tree,
  P l -> forall (k : nat) (v : value) (r : tree), P r -> P (T l k v r)) ->
 forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 P E ->
 (forall l : tree,
  P l -> forall (k : nat) (v : value) (r : tree), P r -> P (T l k v r)) ->
 forall t : tree, P t)
empty_tree : tree
bound : (nat -> tree -> bool)
lookup : (value -> nat -> tree -> value)
insert : (nat -> value -> tree -> tree)
ForallT : ((nat -> value -> Prop) -> tree -> Prop)
BST : (tree -> Prop)
elements : (tree -> list (nat * value))
@uncurry : (forall X Y Z : Type, (X -> Y -> Z) -> X * Y -> Z)
@list_keys : (forall V : Type, list (nat * V) -> list nat)
@disjoint : (forall X : Type, list X -> list X -> Prop)
fast_elements_tr : (tree -> list (nat * value) -> list (nat * value))
fast_elements : (tree -> list (nat * value))
kvs_insert : (nat -> value -> list (nat * value) -> list (nat * value))
Red : value
Green : value
Blue : value
E : tree
T : (tree -> nat -> value -> tree -> tree)

Label: 0 (0)
Abducted Assumption: (ForallT (fun (y : nat) (_ : value) => y < x) l)
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Abducted Assumption: (k < x)
Positive Examples: 500
Negative Examples: 239

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 151
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 85.697 seconds


Label: 0 (0)
(BST l), (k < k), (k < x), (x < k), (x < x), (k <= k), (k <= x), (x <= k), (x <= x), (l = l)
(v = v), (k = k), (k = x), (x = k), (x = x), (false = bound k l), (false = bound x l), (true = bound k l), (true = bound x l), (disjoint (fast_elements l) (elements l))
(disjoint (elements l) (fast_elements l)), (BST (T l k v l)), (BST (T l x v l)), (BST (insert k v l)), (BST (insert x v l)), (BST empty_tree), (BST E), (k <=* []), (x <=* []), (sorted [])
(Permutation (fast_elements l) (elements l)), (Permutation (elements l) (fast_elements l)), (In (k, v) (fast_elements l)), (In (k, v) (elements l)), (In (x, v) (fast_elements l)), (In (x, v) (elements l)), (~ BST l), (~ k < k), (~ k < x), (~ x < k)
(~ x < x), (~ k <= k), (~ k <= x), (~ x <= k), (~ x <= x), (l <> l), (v <> v), (k <> k), (k <> x), (x <> k)
(x <> x), (lookup v k l = v), (lookup v x l = v), (Red = lookup v k l), (Red = lookup v x l), (Green = lookup v k l), (Green = lookup v x l), (Blue = lookup v k l), (Blue = lookup v x l), (fast_elements l = elements l)
(None = Some k), (None = Some x), (None = Some l), (T l k v l = l), (T l k v l = insert k v l), (T l k v l = insert x v l), (T l x v l = l), (T l x v l = insert k v l), (T l x v l = insert x v l), (insert k v l = l)
(insert x v l = l), (empty_tree = T l k v l), (empty_tree = T l x v l), (empty_tree = insert k v l), (empty_tree = insert x v l), (E = T l k v l), (E = T l x v l), (E = insert k v l), (E = insert x v l), (None = Some v)

Label: 1 (1)
(BST l), (k < k), (k < x), (x < k), (x < x), (k <= k), (k <= x), (x <= k), (x <= x), (l = l)
(v = v), (k = k), (k = x), (x = k), (x = x), (false = bound k l), (false = bound x l), (true = bound k l), (true = bound x l), (disjoint (fast_elements l) (elements l))
(disjoint (elements l) (fast_elements l)), (BST (T l k v l)), (BST (T l x v l)), (BST (insert k v l)), (BST (insert x v l)), (BST empty_tree), (BST E), (k <=* []), (x <=* []), (sorted [])
(Permutation (fast_elements l) (elements l)), (Permutation (elements l) (fast_elements l)), (In (k, v) (fast_elements l)), (In (k, v) (elements l)), (In (x, v) (fast_elements l)), (In (x, v) (elements l)), (~ BST l), (~ k < k), (~ k < x), (~ x < k)
(~ x < x), (~ k <= k), (~ k <= x), (~ x <= k), (~ x <= x), (l <> l), (v <> v), (k <> k), (k <> x), (x <> k)
(x <> x), (lookup v k l = v), (lookup v x l = v), (Red = lookup v k l), (Red = lookup v x l), (Green = lookup v k l), (Green = lookup v x l), (Blue = lookup v k l), (Blue = lookup v x l), (fast_elements l = elements l)
(None = Some k), (None = Some x), (None = Some l), (T l k v l = l), (T l k v l = insert k v l), (T l k v l = insert x v l), (T l x v l = l), (T l x v l = insert k v l), (T l x v l = insert x v l), (insert k v l = l)
(insert x v l = l), (empty_tree = T l k v l), (empty_tree = T l x v l), (empty_tree = insert k v l), (empty_tree = insert x v l), (E = T l k v l), (E = T l x v l), (E = insert k v l), (E = insert x v l), (None = Some v)

Label: 2 (2)
(BST l), (BST gv0), (k < k), (k < x), (x < k), (x < x), (k <= k), (k <= x), (x <= k), (x <= x)
(v = v), (l = l), (l = gv0), (gv0 = l), (gv0 = gv0), (k = k), (k = x), (x = k), (x = x), (false = bound k l)
(false = bound k gv0), (false = bound x l), (false = bound x gv0), (true = bound k l), (true = bound k gv0), (true = bound x l), (true = bound x gv0), (disjoint (fast_elements l) (fast_elements gv0)), (disjoint (fast_elements l) (elements l)), (disjoint (fast_elements l) (elements gv0))
(disjoint (fast_elements gv0) (fast_elements l)), (disjoint (fast_elements gv0) (elements l)), (disjoint (fast_elements gv0) (elements gv0)), (disjoint (elements l) (fast_elements l)), (disjoint (elements l) (fast_elements gv0)), (disjoint (elements l) (elements gv0)), (disjoint (elements gv0) (fast_elements l)), (disjoint (elements gv0) (fast_elements gv0)), (disjoint (elements gv0) (elements l)), (BST (T l k v l))
(BST (T l k v gv0)), (BST (T l x v l)), (BST (T l x v gv0)), (BST (T gv0 k v l)), (BST (T gv0 k v gv0)), (BST (T gv0 x v l)), (BST (T gv0 x v gv0)), (BST (insert k v l)), (BST (insert k v gv0)), (BST (insert x v l))
(BST (insert x v gv0)), (BST empty_tree), (BST E), (k <=* []), (x <=* []), (sorted []), (Permutation (fast_elements l) (fast_elements gv0)), (Permutation (fast_elements l) (elements l)), (Permutation (fast_elements l) (elements gv0)), (Permutation (fast_elements gv0) (fast_elements l))
(Permutation (fast_elements gv0) (elements l)), (Permutation (fast_elements gv0) (elements gv0)), (Permutation (elements l) (fast_elements l)), (Permutation (elements l) (fast_elements gv0)), (Permutation (elements l) (elements gv0)), (Permutation (elements gv0) (fast_elements l)), (Permutation (elements gv0) (fast_elements gv0)), (Permutation (elements gv0) (elements l)), (In (k, v) (fast_elements l)), (In (k, v) (fast_elements gv0))
(In (k, v) (elements l)), (In (k, v) (elements gv0)), (In (x, v) (fast_elements l)), (In (x, v) (fast_elements gv0)), (In (x, v) (elements l)), (In (x, v) (elements gv0)), (~ BST l), (~ BST gv0), (~ k < k), (~ k < x)
(~ x < k), (~ x < x), (~ k <= k), (~ k <= x), (~ x <= k), (~ x <= x), (v <> v), (l <> l), (l <> gv0), (gv0 <> l)
(gv0 <> gv0), (k <> k), (k <> x), (x <> k), (x <> x), (lookup v k l = v), (lookup v k gv0 = v), (lookup v x l = v), (lookup v x gv0 = v), (Red = lookup v k l)
(Red = lookup v k gv0), (Red = lookup v x l), (Red = lookup v x gv0), (Green = lookup v k l), (Green = lookup v k gv0), (Green = lookup v x l), (Green = lookup v x gv0), (Blue = lookup v k l), (Blue = lookup v k gv0), (Blue = lookup v x l)
(Blue = lookup v x gv0), (fast_elements l = elements l), (fast_elements l = elements gv0), (fast_elements gv0 = elements l), (fast_elements gv0 = elements gv0), (None = Some k), (None = Some x), (None = Some l), (None = Some gv0), (T l k v l = l)
(T l k v l = gv0), (T l k v l = insert k v l), (T l k v l = insert k v gv0), (T l k v l = insert x v l), (T l k v l = insert x v gv0), (T l k v gv0 = l), (T l k v gv0 = gv0), (T l k v gv0 = insert k v l), (T l k v gv0 = insert k v gv0), (T l k v gv0 = insert x v l)
(T l k v gv0 = insert x v gv0), (T l x v l = l), (T l x v l = gv0), (T l x v l = insert k v l), (T l x v l = insert k v gv0), (T l x v l = insert x v l), (T l x v l = insert x v gv0), (T l x v gv0 = l), (T l x v gv0 = gv0), (T l x v gv0 = insert k v l)
(T l x v gv0 = insert k v gv0), (T l x v gv0 = insert x v l), (T l x v gv0 = insert x v gv0), (T gv0 k v l = l), (T gv0 k v l = gv0), (T gv0 k v l = insert k v l), (T gv0 k v l = insert k v gv0), (T gv0 k v l = insert x v l), (T gv0 k v l = insert x v gv0), (T gv0 k v gv0 = l)
(T gv0 k v gv0 = gv0), (T gv0 k v gv0 = insert k v l), (T gv0 k v gv0 = insert k v gv0), (T gv0 k v gv0 = insert x v l), (T gv0 k v gv0 = insert x v gv0), (T gv0 x v l = l), (T gv0 x v l = gv0), (T gv0 x v l = insert k v l), (T gv0 x v l = insert k v gv0), (T gv0 x v l = insert x v l)
(T gv0 x v l = insert x v gv0), (T gv0 x v gv0 = l), (T gv0 x v gv0 = gv0), (T gv0 x v gv0 = insert k v l), (T gv0 x v gv0 = insert k v gv0), (T gv0 x v gv0 = insert x v l), (T gv0 x v gv0 = insert x v gv0), (insert k v l = l), (insert k v l = gv0), (insert k v gv0 = l)
(insert k v gv0 = gv0), (insert x v l = l), (insert x v l = gv0), (insert x v gv0 = l), (insert x v gv0 = gv0), (empty_tree = T l k v l), (empty_tree = T l k v gv0), (empty_tree = T l x v l), (empty_tree = T l x v gv0), (empty_tree = T gv0 k v l)
(empty_tree = T gv0 k v gv0), (empty_tree = T gv0 x v l), (empty_tree = T gv0 x v gv0), (empty_tree = insert k v l), (empty_tree = insert k v gv0), (empty_tree = insert x v l), (empty_tree = insert x v gv0), (E = T l k v l), (E = T l k v gv0), (E = T l x v l)
(E = T l x v gv0), (E = T gv0 k v l), (E = T gv0 k v gv0), (E = T gv0 x v l), (E = T gv0 x v gv0), (E = insert k v l), (E = insert k v gv0), (E = insert x v l), (E = insert x v gv0), (None = Some v)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 98.977 seconds


Label: 0 (0)

Label: 1 (1)
(k < x), (~ x <= k)

Label: 2 (2)
(insert k v l = gv0)






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 111.072 seconds

Number of Result Pairs Returned: 2

1. (ForallT (fun (y : nat) (_ : value) => y < x) l ->  k < x -> ForallT (fun (y : nat) (_ : value) => y < x) (insert k v l))

2. (k < x -> ~ x <= k)
(ForallT (fun (y : nat) (_ : value) => y < x) l ->  ~ x <= k -> ForallT (fun (y : nat) (_ : value) => y < x) (insert k v l))
