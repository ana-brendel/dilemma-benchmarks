Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (BST r)
 -- (sorted (list_keys (elements r)))
 -- (BST l)
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y > x)) (elements r))
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) (elements l))
 -- (sorted (list_keys (elements l)))

----------------------------------
Goal: (Forall (fun n : nat => n < x) (map fst (elements l)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 6.247 seconds

gv1 : (list (nat * value)) = (elements l)
gv0 : (list nat) = (map fst (elements l))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 84.308 seconds

Label: Generalization #0
Assumptions: 
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) (elements l))

----------------------------------
Goal: (Forall (fun n : nat => n < x) (map fst (elements l)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (map fst (elements l) = gv0)
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) (elements l))

----------------------------------
Goal: (Forall (fun n : nat => n < x) gv0)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) gv1)

----------------------------------
Goal: (Forall (fun n : nat => n < x) (map fst gv1))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (map fst gv1 = gv0)
 -- (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) gv1)

----------------------------------
Goal: (Forall (fun n : nat => n < x) gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 84.507 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
Datatypes.length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)
value : Set
value_rect : (forall P : value -> Type,
 P Red -> P Green -> P Blue -> forall v : value, P v)
value_rec : (forall P : value -> Set, P Red -> P Green -> P Blue -> forall v : value, P v)
tree : Set
tree_rect : (forall P : tree -> Type,
 P E ->
 (forall l : tree,
  P l -> forall (k : nat) (v : value) (r : tree), P r -> P (T l k v r)) ->
 forall t : tree, P t)
tree_rec : (forall P : tree -> Set,
 P E ->
 (forall l : tree,
  P l -> forall (k : nat) (v : value) (r : tree), P r -> P (T l k v r)) ->
 forall t : tree, P t)
empty_tree : tree
bound : (nat -> tree -> bool)
lookup : (value -> nat -> tree -> value)
insert : (nat -> value -> tree -> tree)
ForallT : ((nat -> value -> Prop) -> tree -> Prop)
BST : (tree -> Prop)
elements : (tree -> list (nat * value))
@uncurry : (forall X Y Z : Type, (X -> Y -> Z) -> X * Y -> Z)
@list_keys : (forall V : Type, list (nat * V) -> list nat)
@disjoint : (forall X : Type, list X -> list X -> Prop)
fast_elements_tr : (tree -> list (nat * value) -> list (nat * value))
fast_elements : (tree -> list (nat * value))
kvs_insert : (nat -> value -> list (nat * value) -> list (nat * value))
Red : value
Green : value
Blue : value
E : tree
T : (tree -> nat -> value -> tree -> tree)

Label: 0 (0)
Abducted Assumption: (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) (elements l))
Positive Examples: 309
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 241
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 366
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 84.696 seconds


Label: 0 (0)
(BST l), (x < x), (x <= x), (l = l), (x = x), (false = bound x l), (true = bound x l), (BST empty_tree), (BST E), (x <=* [])
(sorted []), (~ BST l), (~ x < x), (~ x <= x), (l <> l), (x <> x), (fast_elements l = elements l), (None = Some x), (None = Some l)

Label: 1 (1)
(disjoint gv0 gv0), (BST l), (x <=* gv0), (sorted gv0), (Permutation gv0 gv0), (In x gv0), (x < x), (x <= x), (l = l), (gv0 = gv0)
(x = x), (false = bound x l), (true = bound x l), (disjoint gv0 (x :: gv0)), (disjoint gv0 (selection_sort gv0)), (disjoint gv0 (selsort gv0 x)), (disjoint gv0 (gv0 ++ gv0)), (disjoint gv0 []), (disjoint (x :: gv0) gv0), (disjoint (x :: gv0) (selection_sort gv0))
(disjoint (x :: gv0) (selsort gv0 x)), (disjoint (x :: gv0) (gv0 ++ gv0)), (disjoint (x :: gv0) []), (disjoint (selection_sort gv0) gv0), (disjoint (selection_sort gv0) (x :: gv0)), (disjoint (selection_sort gv0) (selsort gv0 x)), (disjoint (selection_sort gv0) (gv0 ++ gv0)), (disjoint (selection_sort gv0) []), (disjoint (selsort gv0 x) gv0), (disjoint (selsort gv0 x) (x :: gv0))
(disjoint (selsort gv0 x) (selection_sort gv0)), (disjoint (selsort gv0 x) (gv0 ++ gv0)), (disjoint (selsort gv0 x) []), (disjoint (gv0 ++ gv0) gv0), (disjoint (gv0 ++ gv0) (x :: gv0)), (disjoint (gv0 ++ gv0) (selection_sort gv0)), (disjoint (gv0 ++ gv0) (selsort gv0 x)), (disjoint (gv0 ++ gv0) []), (disjoint [] gv0), (disjoint [] (x :: gv0))
(disjoint [] (selection_sort gv0)), (disjoint [] (selsort gv0 x)), (disjoint [] (gv0 ++ gv0)), (BST empty_tree), (BST E), (x <=* x :: gv0), (x <=* selection_sort gv0), (x <=* selsort gv0 x), (x <=* gv0 ++ gv0), (x <=* [])
(Datatypes.length gv0 <=* gv0), (Datatypes.length gv0 <=* x :: gv0), (Datatypes.length gv0 <=* selection_sort gv0), (Datatypes.length gv0 <=* selsort gv0 x), (Datatypes.length gv0 <=* gv0 ++ gv0), (Datatypes.length gv0 <=* []), (sorted (x :: gv0)), (sorted (selection_sort gv0)), (sorted (selsort gv0 x)), (sorted (gv0 ++ gv0))
(sorted []), (Permutation gv0 (x :: gv0)), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selsort gv0 x)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (x :: gv0) gv0), (Permutation (x :: gv0) (selection_sort gv0)), (Permutation (x :: gv0) (selsort gv0 x)), (Permutation (x :: gv0) (gv0 ++ gv0))
(Permutation (x :: gv0) []), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) (x :: gv0)), (Permutation (selection_sort gv0) (selsort gv0 x)), (Permutation (selection_sort gv0) (gv0 ++ gv0)), (Permutation (selection_sort gv0) []), (Permutation (selsort gv0 x) gv0), (Permutation (selsort gv0 x) (x :: gv0)), (Permutation (selsort gv0 x) (selection_sort gv0)), (Permutation (selsort gv0 x) (gv0 ++ gv0))
(Permutation (selsort gv0 x) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (x :: gv0)), (Permutation (gv0 ++ gv0) (selection_sort gv0)), (Permutation (gv0 ++ gv0) (selsort gv0 x)), (Permutation (gv0 ++ gv0) []), (Permutation [] gv0), (Permutation [] (x :: gv0)), (Permutation [] (selection_sort gv0)), (Permutation [] (selsort gv0 x))
(Permutation [] (gv0 ++ gv0)), (In x (x :: gv0)), (In x (selection_sort gv0)), (In x (selsort gv0 x)), (In x (gv0 ++ gv0)), (In (Datatypes.length gv0) gv0), (In (Datatypes.length gv0) (x :: gv0)), (In (Datatypes.length gv0) (selection_sort gv0)), (In (Datatypes.length gv0) (selsort gv0 x)), (In (Datatypes.length gv0) (gv0 ++ gv0))
(x < Datatypes.length gv0), (Datatypes.length gv0 < x), (x <= Datatypes.length gv0), (Datatypes.length gv0 <= x), (~ disjoint gv0 gv0), (~ BST l), (~ x <=* gv0), (~ sorted gv0), (~ Permutation gv0 gv0), (~ In x gv0)
(~ x < x), (~ x <= x), (l <> l), (gv0 <> gv0), (x <> x), (None = Some gv0), (Datatypes.length gv0 = x), (fast_elements l = elements l), (x :: gv0 = gv0), (x :: gv0 = selection_sort gv0)
(x :: gv0 = selsort gv0 x), (x :: gv0 = gv0 ++ gv0), (x :: gv0 = []), (selection_sort gv0 = gv0), (selection_sort gv0 = gv0 ++ gv0), (selsort gv0 x = gv0), (selsort gv0 x = selection_sort gv0), (selsort gv0 x = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0)
([] = selection_sort gv0), ([] = selsort gv0 x), ([] = gv0 ++ gv0), (None = Some x), ((x, gv0) = select x gv0), (None = Some l)

Label: 2 (2)
(disjoint gv1 gv1), (disjoint gv0 gv0), (x <=* gv0), (sorted gv0), (Permutation gv1 gv1), (Permutation gv0 gv0), (In x gv0), (x < x), (x <= x), (gv1 = gv1)
(gv0 = gv0), (x = x), (disjoint gv0 (x :: gv0)), (disjoint gv0 (selection_sort gv0)), (disjoint gv0 (selsort gv0 x)), (disjoint gv0 (gv0 ++ gv0)), (disjoint gv0 []), (disjoint (x :: gv0) gv0), (disjoint (x :: gv0) (selection_sort gv0)), (disjoint (x :: gv0) (selsort gv0 x))
(disjoint (x :: gv0) (gv0 ++ gv0)), (disjoint (x :: gv0) []), (disjoint (selection_sort gv0) gv0), (disjoint (selection_sort gv0) (x :: gv0)), (disjoint (selection_sort gv0) (selsort gv0 x)), (disjoint (selection_sort gv0) (gv0 ++ gv0)), (disjoint (selection_sort gv0) []), (disjoint (selsort gv0 x) gv0), (disjoint (selsort gv0 x) (x :: gv0)), (disjoint (selsort gv0 x) (selection_sort gv0))
(disjoint (selsort gv0 x) (gv0 ++ gv0)), (disjoint (selsort gv0 x) []), (disjoint (gv0 ++ gv0) gv0), (disjoint (gv0 ++ gv0) (x :: gv0)), (disjoint (gv0 ++ gv0) (selection_sort gv0)), (disjoint (gv0 ++ gv0) (selsort gv0 x)), (disjoint (gv0 ++ gv0) []), (disjoint [] gv0), (disjoint [] (x :: gv0)), (disjoint [] (selection_sort gv0))
(disjoint [] (selsort gv0 x)), (disjoint [] (gv0 ++ gv0)), (disjoint gv1 (gv1 ++ gv1)), (disjoint gv1 []), (disjoint (gv1 ++ gv1) gv1), (disjoint (gv1 ++ gv1) []), (disjoint [] gv1), (disjoint [] (gv1 ++ gv1)), (BST empty_tree), (BST E)
(x <=* x :: gv0), (x <=* selection_sort gv0), (x <=* selsort gv0 x), (x <=* gv0 ++ gv0), (x <=* []), (Datatypes.length gv1 <=* gv0), (Datatypes.length gv1 <=* x :: gv0), (Datatypes.length gv1 <=* selection_sort gv0), (Datatypes.length gv1 <=* selsort gv0 x), (Datatypes.length gv1 <=* gv0 ++ gv0)
(Datatypes.length gv1 <=* []), (Datatypes.length gv0 <=* gv0), (Datatypes.length gv0 <=* x :: gv0), (Datatypes.length gv0 <=* selection_sort gv0), (Datatypes.length gv0 <=* selsort gv0 x), (Datatypes.length gv0 <=* gv0 ++ gv0), (Datatypes.length gv0 <=* []), (sorted (x :: gv0)), (sorted (selection_sort gv0)), (sorted (selsort gv0 x))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation gv0 (x :: gv0)), (Permutation gv0 (selection_sort gv0)), (Permutation gv0 (selsort gv0 x)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (x :: gv0) gv0), (Permutation (x :: gv0) (selection_sort gv0)), (Permutation (x :: gv0) (selsort gv0 x))
(Permutation (x :: gv0) (gv0 ++ gv0)), (Permutation (x :: gv0) []), (Permutation (selection_sort gv0) gv0), (Permutation (selection_sort gv0) (x :: gv0)), (Permutation (selection_sort gv0) (selsort gv0 x)), (Permutation (selection_sort gv0) (gv0 ++ gv0)), (Permutation (selection_sort gv0) []), (Permutation (selsort gv0 x) gv0), (Permutation (selsort gv0 x) (x :: gv0)), (Permutation (selsort gv0 x) (selection_sort gv0))
(Permutation (selsort gv0 x) (gv0 ++ gv0)), (Permutation (selsort gv0 x) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (x :: gv0)), (Permutation (gv0 ++ gv0) (selection_sort gv0)), (Permutation (gv0 ++ gv0) (selsort gv0 x)), (Permutation (gv0 ++ gv0) []), (Permutation [] gv0), (Permutation [] (x :: gv0)), (Permutation [] (selection_sort gv0))
(Permutation [] (selsort gv0 x)), (Permutation [] (gv0 ++ gv0)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) []), (Permutation [] gv1), (Permutation [] (gv1 ++ gv1)), (In x (x :: gv0)), (In x (selection_sort gv0))
(In x (selsort gv0 x)), (In x (gv0 ++ gv0)), (In (Datatypes.length gv1) gv0), (In (Datatypes.length gv1) (x :: gv0)), (In (Datatypes.length gv1) (selection_sort gv0)), (In (Datatypes.length gv1) (selsort gv0 x)), (In (Datatypes.length gv1) (gv0 ++ gv0)), (In (Datatypes.length gv0) gv0), (In (Datatypes.length gv0) (x :: gv0)), (In (Datatypes.length gv0) (selection_sort gv0))
(In (Datatypes.length gv0) (selsort gv0 x)), (In (Datatypes.length gv0) (gv0 ++ gv0)), (x < Datatypes.length gv1), (x < Datatypes.length gv0), (Datatypes.length gv1 < x), (Datatypes.length gv1 < Datatypes.length gv0), (Datatypes.length gv0 < x), (Datatypes.length gv0 < Datatypes.length gv1), (x <= Datatypes.length gv1), (x <= Datatypes.length gv0)
(Datatypes.length gv1 <= x), (Datatypes.length gv1 <= Datatypes.length gv0), (Datatypes.length gv0 <= x), (Datatypes.length gv0 <= Datatypes.length gv1), (~ disjoint gv1 gv1), (~ disjoint gv0 gv0), (~ x <=* gv0), (~ sorted gv0), (~ Permutation gv1 gv1), (~ Permutation gv0 gv0)
(~ In x gv0), (~ x < x), (~ x <= x), (gv1 <> gv1), (gv0 <> gv0), (x <> x), (gv1 ++ gv1 = gv1), ([] = gv1), ([] = gv1 ++ gv1), (x :: gv0 = gv0)
(x :: gv0 = selection_sort gv0), (x :: gv0 = selsort gv0 x), (x :: gv0 = gv0 ++ gv0), (x :: gv0 = []), (selection_sort gv0 = gv0), (selection_sort gv0 = gv0 ++ gv0), (selsort gv0 x = gv0), (selsort gv0 x = selection_sort gv0), (selsort gv0 x = gv0 ++ gv0), (gv0 ++ gv0 = gv0)
([] = gv0), ([] = selection_sort gv0), ([] = selsort gv0 x), ([] = gv0 ++ gv0), (None = Some x), (None = Some gv0), (None = Some gv1), (Datatypes.length gv1 = x), (Datatypes.length gv0 = x), ((x, gv0) = select x gv0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 97.03 seconds


Label: 0 (0)

Label: 1 (1)

Label: 2 (2)






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 101.101 seconds

Number of Result Pairs Returned: 2

1. (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) gv1 ->  Forall (fun n : nat => n < x) (map fst gv1))

2. (Forall (uncurry (fun (y : nat) (_ : value) => y < x)) (elements l) ->  Forall (fun n : nat => n < x) (map fst (elements l)))
