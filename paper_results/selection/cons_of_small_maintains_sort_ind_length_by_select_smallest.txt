Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (n = length bl)
 -- (In n1 (n0 :: bl))
 -- (y <=* n0 :: bl)
 -- (select n0 bl = (n1, l))
 -- (sorted (selsort (n0 :: bl) (S n)))
 -- (forall (y : nat) (bl : list nat),
 n = length bl ->
 y <=* bl -> sorted (selsort bl n) -> sorted (y :: selsort bl n))
 -- (S n = S (length bl))

----------------------------------
Goal: (n1 <=* l)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.596 seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 32.081 seconds

Label: Generalization #0
Assumptions: 
 -- (select n0 bl = (n1, l))

----------------------------------
Goal: (n1 <=* l)
Case: Valid and Un-Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 32.22 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
select : (nat -> list nat -> nat * list nat)
selsort : (list nat -> nat -> list nat)
selection_sort : (list nat -> list nat)
le_all : (nat -> list nat -> Prop)

Label: 0 (0)
Abducted Assumption: (select n0 bl = (n1, l))
Positive Examples: 28
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 32.421 seconds


Label: 0 (0)
(n0 <=* bl), (n0 <=* l), (n1 <=* bl), (n1 <=* l), (sorted bl), (sorted l), (Permutation bl bl), (Permutation bl l), (Permutation l bl), (Permutation l l)
(In n0 bl), (In n0 l), (In n1 bl), (In n1 l), (n0 < n0), (n0 < n1), (n1 < n0), (n1 < n1), (n0 <= n0), (n0 <= n1)
(n1 <= n0), (n1 <= n1), (bl = bl), (bl = l), (l = bl), (l = l), (n0 = n0), (n0 = n1), (n1 = n0), (n1 = n1)
(n0 <=* n0 :: bl), (n0 <=* n0 :: l), (n0 <=* n1 :: bl), (n0 <=* n1 :: l), (n0 <=* selection_sort bl), (n0 <=* selection_sort l), (n0 <=* selsort bl n0), (n0 <=* selsort bl n1), (n0 <=* selsort l n0), (n0 <=* selsort l n1)
(n0 <=* bl ++ bl), (n0 <=* bl ++ l), (n0 <=* l ++ bl), (n0 <=* l ++ l), (n0 <=* []), (n1 <=* n0 :: bl), (n1 <=* n0 :: l), (n1 <=* n1 :: bl), (n1 <=* n1 :: l), (n1 <=* selection_sort bl)
(n1 <=* selection_sort l), (n1 <=* selsort bl n0), (n1 <=* selsort bl n1), (n1 <=* selsort l n0), (n1 <=* selsort l n1), (n1 <=* bl ++ bl), (n1 <=* bl ++ l), (n1 <=* l ++ bl), (n1 <=* l ++ l), (n1 <=* [])
(length bl <=* bl), (length bl <=* l), (length bl <=* n0 :: bl), (length bl <=* n0 :: l), (length bl <=* n1 :: bl), (length bl <=* n1 :: l), (length bl <=* selection_sort bl), (length bl <=* selection_sort l), (length bl <=* selsort bl n0), (length bl <=* selsort bl n1)
(length bl <=* selsort l n0), (length bl <=* selsort l n1), (length bl <=* bl ++ bl), (length bl <=* bl ++ l), (length bl <=* l ++ bl), (length bl <=* l ++ l), (length bl <=* []), (length l <=* bl), (length l <=* l), (length l <=* n0 :: bl)
(length l <=* n0 :: l), (length l <=* n1 :: bl), (length l <=* n1 :: l), (length l <=* selection_sort bl), (length l <=* selection_sort l), (length l <=* selsort bl n0), (length l <=* selsort bl n1), (length l <=* selsort l n0), (length l <=* selsort l n1), (length l <=* bl ++ bl)
(length l <=* bl ++ l), (length l <=* l ++ bl), (length l <=* l ++ l), (length l <=* []), (sorted (n0 :: bl)), (sorted (n0 :: l)), (sorted (n1 :: bl)), (sorted (n1 :: l)), (sorted (selection_sort bl)), (sorted (selection_sort l))
(sorted (selsort bl n0)), (sorted (selsort bl n1)), (sorted (selsort l n0)), (sorted (selsort l n1)), (sorted (bl ++ bl)), (sorted (bl ++ l)), (sorted (l ++ bl)), (sorted (l ++ l)), (sorted []), (Permutation bl (n0 :: bl))
(Permutation bl (n0 :: l)), (Permutation bl (n1 :: bl)), (Permutation bl (n1 :: l)), (Permutation bl (selection_sort bl)), (Permutation bl (selection_sort l)), (Permutation bl (selsort bl n0)), (Permutation bl (selsort bl n1)), (Permutation bl (selsort l n0)), (Permutation bl (selsort l n1)), (Permutation bl (bl ++ bl))
(Permutation bl (bl ++ l)), (Permutation bl (l ++ bl)), (Permutation bl (l ++ l)), (Permutation bl []), (Permutation l (n0 :: bl)), (Permutation l (n0 :: l)), (Permutation l (n1 :: bl)), (Permutation l (n1 :: l)), (Permutation l (selection_sort bl)), (Permutation l (selection_sort l))
(Permutation l (selsort bl n0)), (Permutation l (selsort bl n1)), (Permutation l (selsort l n0)), (Permutation l (selsort l n1)), (Permutation l (bl ++ bl)), (Permutation l (bl ++ l)), (Permutation l (l ++ bl)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (n0 :: bl) bl)
(Permutation (n0 :: bl) l), (Permutation (n0 :: bl) (n0 :: l)), (Permutation (n0 :: bl) (n1 :: bl)), (Permutation (n0 :: bl) (n1 :: l)), (Permutation (n0 :: bl) (selection_sort bl)), (Permutation (n0 :: bl) (selection_sort l)), (Permutation (n0 :: bl) (selsort bl n0)), (Permutation (n0 :: bl) (selsort bl n1)), (Permutation (n0 :: bl) (selsort l n0)), (Permutation (n0 :: bl) (selsort l n1))
(Permutation (n0 :: bl) (bl ++ bl)), (Permutation (n0 :: bl) (bl ++ l)), (Permutation (n0 :: bl) (l ++ bl)), (Permutation (n0 :: bl) (l ++ l)), (Permutation (n0 :: bl) []), (Permutation (n0 :: l) bl), (Permutation (n0 :: l) l), (Permutation (n0 :: l) (n0 :: bl)), (Permutation (n0 :: l) (n1 :: bl)), (Permutation (n0 :: l) (n1 :: l))
(Permutation (n0 :: l) (selection_sort bl)), (Permutation (n0 :: l) (selection_sort l)), (Permutation (n0 :: l) (selsort bl n0)), (Permutation (n0 :: l) (selsort bl n1)), (Permutation (n0 :: l) (selsort l n0)), (Permutation (n0 :: l) (selsort l n1)), (Permutation (n0 :: l) (bl ++ bl)), (Permutation (n0 :: l) (bl ++ l)), (Permutation (n0 :: l) (l ++ bl)), (Permutation (n0 :: l) (l ++ l))
(Permutation (n0 :: l) []), (Permutation (n1 :: bl) bl), (Permutation (n1 :: bl) l), (Permutation (n1 :: bl) (n0 :: bl)), (Permutation (n1 :: bl) (n0 :: l)), (Permutation (n1 :: bl) (n1 :: l)), (Permutation (n1 :: bl) (selection_sort bl)), (Permutation (n1 :: bl) (selection_sort l)), (Permutation (n1 :: bl) (selsort bl n0)), (Permutation (n1 :: bl) (selsort bl n1))
(Permutation (n1 :: bl) (selsort l n0)), (Permutation (n1 :: bl) (selsort l n1)), (Permutation (n1 :: bl) (bl ++ bl)), (Permutation (n1 :: bl) (bl ++ l)), (Permutation (n1 :: bl) (l ++ bl)), (Permutation (n1 :: bl) (l ++ l)), (Permutation (n1 :: bl) []), (Permutation (n1 :: l) bl), (Permutation (n1 :: l) l), (Permutation (n1 :: l) (n0 :: bl))
(Permutation (n1 :: l) (n0 :: l)), (Permutation (n1 :: l) (n1 :: bl)), (Permutation (n1 :: l) (selection_sort bl)), (Permutation (n1 :: l) (selection_sort l)), (Permutation (n1 :: l) (selsort bl n0)), (Permutation (n1 :: l) (selsort bl n1)), (Permutation (n1 :: l) (selsort l n0)), (Permutation (n1 :: l) (selsort l n1)), (Permutation (n1 :: l) (bl ++ bl)), (Permutation (n1 :: l) (bl ++ l))
(Permutation (n1 :: l) (l ++ bl)), (Permutation (n1 :: l) (l ++ l)), (Permutation (n1 :: l) []), (Permutation (selection_sort bl) bl), (Permutation (selection_sort bl) l), (Permutation (selection_sort bl) (n0 :: bl)), (Permutation (selection_sort bl) (n0 :: l)), (Permutation (selection_sort bl) (n1 :: bl)), (Permutation (selection_sort bl) (n1 :: l)), (Permutation (selection_sort bl) (selection_sort l))
(Permutation (selection_sort bl) (selsort bl n0)), (Permutation (selection_sort bl) (selsort bl n1)), (Permutation (selection_sort bl) (selsort l n0)), (Permutation (selection_sort bl) (selsort l n1)), (Permutation (selection_sort bl) (bl ++ bl)), (Permutation (selection_sort bl) (bl ++ l)), (Permutation (selection_sort bl) (l ++ bl)), (Permutation (selection_sort bl) (l ++ l)), (Permutation (selection_sort bl) []), (Permutation (selection_sort l) bl)
(Permutation (selection_sort l) l), (Permutation (selection_sort l) (n0 :: bl)), (Permutation (selection_sort l) (n0 :: l)), (Permutation (selection_sort l) (n1 :: bl)), (Permutation (selection_sort l) (n1 :: l)), (Permutation (selection_sort l) (selection_sort bl)), (Permutation (selection_sort l) (selsort bl n0)), (Permutation (selection_sort l) (selsort bl n1)), (Permutation (selection_sort l) (selsort l n0)), (Permutation (selection_sort l) (selsort l n1))
(Permutation (selection_sort l) (bl ++ bl)), (Permutation (selection_sort l) (bl ++ l)), (Permutation (selection_sort l) (l ++ bl)), (Permutation (selection_sort l) (l ++ l)), (Permutation (selection_sort l) []), (Permutation (selsort bl n0) bl), (Permutation (selsort bl n0) l), (Permutation (selsort bl n0) (n0 :: bl)), (Permutation (selsort bl n0) (n0 :: l)), (Permutation (selsort bl n0) (n1 :: bl))
(Permutation (selsort bl n0) (n1 :: l)), (Permutation (selsort bl n0) (selection_sort bl)), (Permutation (selsort bl n0) (selection_sort l)), (Permutation (selsort bl n0) (selsort bl n1)), (Permutation (selsort bl n0) (selsort l n0)), (Permutation (selsort bl n0) (selsort l n1)), (Permutation (selsort bl n0) (bl ++ bl)), (Permutation (selsort bl n0) (bl ++ l)), (Permutation (selsort bl n0) (l ++ bl)), (Permutation (selsort bl n0) (l ++ l))
(Permutation (selsort bl n0) []), (Permutation (selsort bl n1) bl), (Permutation (selsort bl n1) l), (Permutation (selsort bl n1) (n0 :: bl)), (Permutation (selsort bl n1) (n0 :: l)), (Permutation (selsort bl n1) (n1 :: bl)), (Permutation (selsort bl n1) (n1 :: l)), (Permutation (selsort bl n1) (selection_sort bl)), (Permutation (selsort bl n1) (selection_sort l)), (Permutation (selsort bl n1) (selsort bl n0))
(Permutation (selsort bl n1) (selsort l n0)), (Permutation (selsort bl n1) (selsort l n1)), (Permutation (selsort bl n1) (bl ++ bl)), (Permutation (selsort bl n1) (bl ++ l)), (Permutation (selsort bl n1) (l ++ bl)), (Permutation (selsort bl n1) (l ++ l)), (Permutation (selsort bl n1) []), (Permutation (selsort l n0) bl), (Permutation (selsort l n0) l), (Permutation (selsort l n0) (n0 :: bl))
(Permutation (selsort l n0) (n0 :: l)), (Permutation (selsort l n0) (n1 :: bl)), (Permutation (selsort l n0) (n1 :: l)), (Permutation (selsort l n0) (selection_sort bl)), (Permutation (selsort l n0) (selection_sort l)), (Permutation (selsort l n0) (selsort bl n0)), (Permutation (selsort l n0) (selsort bl n1)), (Permutation (selsort l n0) (selsort l n1)), (Permutation (selsort l n0) (bl ++ bl)), (Permutation (selsort l n0) (bl ++ l))
(Permutation (selsort l n0) (l ++ bl)), (Permutation (selsort l n0) (l ++ l)), (Permutation (selsort l n0) []), (Permutation (selsort l n1) bl), (Permutation (selsort l n1) l), (Permutation (selsort l n1) (n0 :: bl)), (Permutation (selsort l n1) (n0 :: l)), (Permutation (selsort l n1) (n1 :: bl)), (Permutation (selsort l n1) (n1 :: l)), (Permutation (selsort l n1) (selection_sort bl))
(Permutation (selsort l n1) (selection_sort l)), (Permutation (selsort l n1) (selsort bl n0)), (Permutation (selsort l n1) (selsort bl n1)), (Permutation (selsort l n1) (selsort l n0)), (Permutation (selsort l n1) (bl ++ bl)), (Permutation (selsort l n1) (bl ++ l)), (Permutation (selsort l n1) (l ++ bl)), (Permutation (selsort l n1) (l ++ l)), (Permutation (selsort l n1) []), (Permutation (bl ++ bl) bl)
(Permutation (bl ++ bl) l), (Permutation (bl ++ bl) (n0 :: bl)), (Permutation (bl ++ bl) (n0 :: l)), (Permutation (bl ++ bl) (n1 :: bl)), (Permutation (bl ++ bl) (n1 :: l)), (Permutation (bl ++ bl) (selection_sort bl)), (Permutation (bl ++ bl) (selection_sort l)), (Permutation (bl ++ bl) (selsort bl n0)), (Permutation (bl ++ bl) (selsort bl n1)), (Permutation (bl ++ bl) (selsort l n0))
(Permutation (bl ++ bl) (selsort l n1)), (Permutation (bl ++ bl) (bl ++ l)), (Permutation (bl ++ bl) (l ++ bl)), (Permutation (bl ++ bl) (l ++ l)), (Permutation (bl ++ bl) []), (Permutation (bl ++ l) bl), (Permutation (bl ++ l) l), (Permutation (bl ++ l) (n0 :: bl)), (Permutation (bl ++ l) (n0 :: l)), (Permutation (bl ++ l) (n1 :: bl))
(Permutation (bl ++ l) (n1 :: l)), (Permutation (bl ++ l) (selection_sort bl)), (Permutation (bl ++ l) (selection_sort l)), (Permutation (bl ++ l) (selsort bl n0)), (Permutation (bl ++ l) (selsort bl n1)), (Permutation (bl ++ l) (selsort l n0)), (Permutation (bl ++ l) (selsort l n1)), (Permutation (bl ++ l) (bl ++ bl)), (Permutation (bl ++ l) (l ++ bl)), (Permutation (bl ++ l) (l ++ l))
(Permutation (bl ++ l) []), (Permutation (l ++ bl) bl), (Permutation (l ++ bl) l), (Permutation (l ++ bl) (n0 :: bl)), (Permutation (l ++ bl) (n0 :: l)), (Permutation (l ++ bl) (n1 :: bl)), (Permutation (l ++ bl) (n1 :: l)), (Permutation (l ++ bl) (selection_sort bl)), (Permutation (l ++ bl) (selection_sort l)), (Permutation (l ++ bl) (selsort bl n0))
(Permutation (l ++ bl) (selsort bl n1)), (Permutation (l ++ bl) (selsort l n0)), (Permutation (l ++ bl) (selsort l n1)), (Permutation (l ++ bl) (bl ++ bl)), (Permutation (l ++ bl) (bl ++ l)), (Permutation (l ++ bl) (l ++ l)), (Permutation (l ++ bl) []), (Permutation (l ++ l) bl), (Permutation (l ++ l) l), (Permutation (l ++ l) (n0 :: bl))
(Permutation (l ++ l) (n0 :: l)), (Permutation (l ++ l) (n1 :: bl)), (Permutation (l ++ l) (n1 :: l)), (Permutation (l ++ l) (selection_sort bl)), (Permutation (l ++ l) (selection_sort l)), (Permutation (l ++ l) (selsort bl n0)), (Permutation (l ++ l) (selsort bl n1)), (Permutation (l ++ l) (selsort l n0)), (Permutation (l ++ l) (selsort l n1)), (Permutation (l ++ l) (bl ++ bl))
(Permutation (l ++ l) (bl ++ l)), (Permutation (l ++ l) (l ++ bl)), (Permutation (l ++ l) []), (Permutation [] bl), (Permutation [] l), (Permutation [] (n0 :: bl)), (Permutation [] (n0 :: l)), (Permutation [] (n1 :: bl)), (Permutation [] (n1 :: l)), (Permutation [] (selection_sort bl))
(Permutation [] (selection_sort l)), (Permutation [] (selsort bl n0)), (Permutation [] (selsort bl n1)), (Permutation [] (selsort l n0)), (Permutation [] (selsort l n1)), (Permutation [] (bl ++ bl)), (Permutation [] (bl ++ l)), (Permutation [] (l ++ bl)), (Permutation [] (l ++ l)), (In n0 (n0 :: bl))
(In n0 (n0 :: l)), (In n0 (n1 :: bl)), (In n0 (n1 :: l)), (In n0 (selection_sort bl)), (In n0 (selection_sort l)), (In n0 (selsort bl n0)), (In n0 (selsort bl n1)), (In n0 (selsort l n0)), (In n0 (selsort l n1)), (In n0 (bl ++ bl))
(In n0 (bl ++ l)), (In n0 (l ++ bl)), (In n0 (l ++ l)), (In n1 (n0 :: bl)), (In n1 (n0 :: l)), (In n1 (n1 :: bl)), (In n1 (n1 :: l)), (In n1 (selection_sort bl)), (In n1 (selection_sort l)), (In n1 (selsort bl n0))
(In n1 (selsort bl n1)), (In n1 (selsort l n0)), (In n1 (selsort l n1)), (In n1 (bl ++ bl)), (In n1 (bl ++ l)), (In n1 (l ++ bl)), (In n1 (l ++ l)), (In (length bl) bl), (In (length bl) l), (In (length bl) (n0 :: bl))
(In (length bl) (n0 :: l)), (In (length bl) (n1 :: bl)), (In (length bl) (n1 :: l)), (In (length bl) (selection_sort bl)), (In (length bl) (selection_sort l)), (In (length bl) (selsort bl n0)), (In (length bl) (selsort bl n1)), (In (length bl) (selsort l n0)), (In (length bl) (selsort l n1)), (In (length bl) (bl ++ bl))
(In (length bl) (bl ++ l)), (In (length bl) (l ++ bl)), (In (length bl) (l ++ l)), (In (length l) bl), (In (length l) l), (In (length l) (n0 :: bl)), (In (length l) (n0 :: l)), (In (length l) (n1 :: bl)), (In (length l) (n1 :: l)), (In (length l) (selection_sort bl))
(In (length l) (selection_sort l)), (In (length l) (selsort bl n0)), (In (length l) (selsort bl n1)), (In (length l) (selsort l n0)), (In (length l) (selsort l n1)), (In (length l) (bl ++ bl)), (In (length l) (bl ++ l)), (In (length l) (l ++ bl)), (In (length l) (l ++ l)), (n0 < length bl)
(n0 < length l), (n1 < length bl), (n1 < length l), (length bl < n0), (length bl < n1), (length bl < length l), (length l < n0), (length l < n1), (length l < length bl), (n0 <= length bl)
(n0 <= length l), (n1 <= length bl), (n1 <= length l), (length bl <= n0), (length bl <= n1), (length bl <= length l), (length l <= n0), (length l <= n1), (length l <= length bl), (~ n0 <=* bl)
(~ n0 <=* l), (~ n1 <=* bl), (~ n1 <=* l), (~ sorted bl), (~ sorted l), (~ Permutation bl bl), (~ Permutation bl l), (~ Permutation l bl), (~ Permutation l l), (~ In n0 bl)
(~ In n0 l), (~ In n1 bl), (~ In n1 l), (~ n0 < n0), (~ n0 < n1), (~ n1 < n0), (~ n1 < n1), (~ n0 <= n0), (~ n0 <= n1), (~ n1 <= n0)
(~ n1 <= n1), (bl <> bl), (bl <> l), (l <> bl), (l <> l), (n0 <> n0), (n0 <> n1), (n1 <> n0), (n1 <> n1), (None = Some bl)
(None = Some l), (n0 :: bl = bl), (n0 :: bl = l), (n0 :: bl = selection_sort bl), (n0 :: bl = selection_sort l), (n0 :: bl = selsort bl n0), (n0 :: bl = selsort bl n1), (n0 :: bl = selsort l n0), (n0 :: bl = selsort l n1), (n0 :: bl = bl ++ bl)
(n0 :: bl = bl ++ l), (n0 :: bl = l ++ bl), (n0 :: bl = l ++ l), (n0 :: bl = []), (n0 :: l = bl), (n0 :: l = l), (n0 :: l = selection_sort bl), (n0 :: l = selection_sort l), (n0 :: l = selsort bl n0), (n0 :: l = selsort bl n1)
(n0 :: l = selsort l n0), (n0 :: l = selsort l n1), (n0 :: l = bl ++ bl), (n0 :: l = bl ++ l), (n0 :: l = l ++ bl), (n0 :: l = l ++ l), (n0 :: l = []), (n1 :: bl = bl), (n1 :: bl = l), (n1 :: bl = selection_sort bl)
(n1 :: bl = selection_sort l), (n1 :: bl = selsort bl n0), (n1 :: bl = selsort bl n1), (n1 :: bl = selsort l n0), (n1 :: bl = selsort l n1), (n1 :: bl = bl ++ bl), (n1 :: bl = bl ++ l), (n1 :: bl = l ++ bl), (n1 :: bl = l ++ l), (n1 :: bl = [])
(n1 :: l = bl), (n1 :: l = l), (n1 :: l = selection_sort bl), (n1 :: l = selection_sort l), (n1 :: l = selsort bl n0), (n1 :: l = selsort bl n1), (n1 :: l = selsort l n0), (n1 :: l = selsort l n1), (n1 :: l = bl ++ bl), (n1 :: l = bl ++ l)
(n1 :: l = l ++ bl), (n1 :: l = l ++ l), (n1 :: l = []), (selection_sort bl = bl), (selection_sort bl = l), (selection_sort bl = bl ++ bl), (selection_sort bl = bl ++ l), (selection_sort bl = l ++ bl), (selection_sort bl = l ++ l), (selection_sort l = bl)
(selection_sort l = l), (selection_sort l = bl ++ bl), (selection_sort l = bl ++ l), (selection_sort l = l ++ bl), (selection_sort l = l ++ l), (selsort bl n0 = bl), (selsort bl n0 = l), (selsort bl n0 = selection_sort bl), (selsort bl n0 = selection_sort l), (selsort bl n0 = bl ++ bl)
(selsort bl n0 = bl ++ l), (selsort bl n0 = l ++ bl), (selsort bl n0 = l ++ l), (selsort bl n1 = bl), (selsort bl n1 = l), (selsort bl n1 = selection_sort bl), (selsort bl n1 = selection_sort l), (selsort bl n1 = bl ++ bl), (selsort bl n1 = bl ++ l), (selsort bl n1 = l ++ bl)
(selsort bl n1 = l ++ l), (selsort l n0 = bl), (selsort l n0 = l), (selsort l n0 = selection_sort bl), (selsort l n0 = selection_sort l), (selsort l n0 = bl ++ bl), (selsort l n0 = bl ++ l), (selsort l n0 = l ++ bl), (selsort l n0 = l ++ l), (selsort l n1 = bl)
(selsort l n1 = l), (selsort l n1 = selection_sort bl), (selsort l n1 = selection_sort l), (selsort l n1 = bl ++ bl), (selsort l n1 = bl ++ l), (selsort l n1 = l ++ bl), (selsort l n1 = l ++ l), (bl ++ bl = bl), (bl ++ bl = l), (bl ++ l = bl)
(bl ++ l = l), (l ++ bl = bl), (l ++ bl = l), (l ++ l = bl), (l ++ l = l), ([] = bl), ([] = l), ([] = selection_sort bl), ([] = selection_sort l), ([] = selsort bl n0)
([] = selsort bl n1), ([] = selsort l n0), ([] = selsort l n1), ([] = bl ++ bl), ([] = bl ++ l), ([] = l ++ bl), ([] = l ++ l), (None = Some n0), (None = Some n1), ((n0, bl) = select n0 bl)
((n0, bl) = select n0 l), ((n0, bl) = select n1 bl), ((n0, bl) = select n1 l), ((n0, l) = select n0 bl), ((n0, l) = select n0 l), ((n0, l) = select n1 bl), ((n0, l) = select n1 l), ((n1, bl) = select n0 bl), ((n1, bl) = select n0 l), ((n1, bl) = select n1 bl)
((n1, bl) = select n1 l), ((n1, l) = select n0 bl), ((n1, l) = select n0 l), ((n1, l) = select n1 bl), ((n1, l) = select n1 l), (length bl = n0), (length bl = n1), (length l = n0), (length l = n1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 38.076 seconds


Label: 0 (0)
(n1 <=* l), (n1 <=* selection_sort l), (n1 <=* selsort l n1), (n1 <=* l ++ l), (n1 <=* n0 :: l), (n1 <=* n1 :: l), (n1 <=* bl ++ l), (n1 <=* l ++ bl), ((n1, l) = select n1 l), ((n1, l) = select n0 bl)


------------------------------ ALL RESULTS ------------------------------
1. (select n0 bl = (n1, l) -> n1 <=* l)

2. (select n0 bl = (n1, l) -> n1 <=* selection_sort l)
(n1 <=* selection_sort l -> n1 <=* l)

3. (select n0 bl = (n1, l) -> n1 <=* selsort l n1)
(n1 <=* selsort l n1 -> n1 <=* l)

4. (select n0 bl = (n1, l) -> n1 <=* l ++ bl)
(n1 <=* l ++ bl -> n1 <=* l)

5. (select n0 bl = (n1, l) -> n1 <=* bl ++ l)
(n1 <=* bl ++ l -> n1 <=* l)

6. (select n0 bl = (n1, l) -> n1 <=* l ++ l)
(n1 <=* l ++ l -> n1 <=* l)

7. (select n0 bl = (n1, l) -> n1 <=* n0 :: l)
(n1 <=* n0 :: l -> n1 <=* l)

8. (select n0 bl = (n1, l) -> n1 <=* n1 :: l)
(n1 <=* n1 :: l -> n1 <=* l)

9. (select n0 bl = (n1, l) -> (n1, l) = select n1 l)
((n1, l) = select n1 l -> n1 <=* l)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 57.383 seconds

Number of Result Pairs Returned: 9

1. (select n0 bl = (n1, l) -> n1 <=* l)

2. (select n0 bl = (n1, l) -> n1 <=* selection_sort l)
(n1 <=* selection_sort l -> n1 <=* l)

3. (select n0 bl = (n1, l) -> n1 <=* selsort l n1)
(n1 <=* selsort l n1 -> n1 <=* l)

4. (select n0 bl = (n1, l) -> n1 <=* l ++ bl)
(n1 <=* l ++ bl -> n1 <=* l)

5. (select n0 bl = (n1, l) -> n1 <=* bl ++ l)
(n1 <=* bl ++ l -> n1 <=* l)
