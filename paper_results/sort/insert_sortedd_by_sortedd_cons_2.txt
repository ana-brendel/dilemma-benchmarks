Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (sortedd l -> sortedd (n :: l0))
 -- (a > a0)
 -- (sortedd (a0 :: l))
 -- (n :: l0 = insert a l)

----------------------------------
Goal: (sortedd (a0 :: n :: l0))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.598 seconds

gv1 : (list nat) = (n :: l0)
gv0 : (list nat) = (a0 :: n :: l0)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 76.215 seconds

Label: Generalization #0
Assumptions: 
 -- (a > a0)
 -- (sortedd (a0 :: l))
 -- (n :: l0 = insert a l)

----------------------------------
Goal: (sortedd (a0 :: n :: l0))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (a > a0)
 -- (sortedd (a0 :: l))
 -- (a0 :: n :: l0 = gv0)
 -- (n :: l0 = insert a l)

----------------------------------
Goal: (sortedd gv0)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (a > a0)
 -- (sortedd (a0 :: l))
 -- (gv1 = insert a l)

----------------------------------
Goal: (sortedd (a0 :: gv1))
Case: Valid and Generalized

Label: Generalization #3
Assumptions: 
 -- (a > a0)
 -- (sortedd (a0 :: l))
 -- (a0 :: gv1 = gv0)
 -- (gv1 = insert a l)

----------------------------------
Goal: (sortedd gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 76.368 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
insert : (nat -> list nat -> list nat)
sort : (list nat -> list nat)
sorted : (list nat -> Prop)
sortedd : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)

Label: 0 (0)
Abducted Assumption: (a > a0)
Positive Examples: 500
Negative Examples: 13

Label: 1 (1)
Abducted Assumption: (sortedd (a0 :: l))
Positive Examples: 500
Negative Examples: 3

Label: 2 (2)
Abducted Assumption: (n :: l0 = insert a l)
Positive Examples: 48
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 8
Negative Examples: 7

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 8
Negative Examples: 9


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 76.835 seconds


Label: 0 (0)
(sortedd l), (sortedd l0), (sorted l), (sorted l0), (Permutation l l), (Permutation l l0), (Permutation l0 l), (Permutation l0 l0), (In a l), (In a l0)
(In n l), (In n l0), (In a0 l), (In a0 l0), (a < a), (a < n), (a < a0), (n < a), (n < n), (n < a0)
(a0 < a), (a0 < n), (a0 < a0), (a <= a), (a <= n), (a <= a0), (n <= a), (n <= n), (n <= a0), (a0 <= a)
(a0 <= n), (a0 <= a0), (l = l), (l = l0), (l0 = l), (l0 = l0), (a = a), (a = n), (a = a0), (n = a)
(n = n), (n = a0), (a0 = a), (a0 = n), (a0 = a0), (sortedd (a :: l)), (sortedd (a :: l0)), (sortedd (n :: l)), (sortedd (n :: l0)), (sortedd (a0 :: l))
(sortedd (a0 :: l0)), (sortedd (sort l)), (sortedd (sort l0)), (sortedd (insert a l)), (sortedd (insert a l0)), (sortedd (insert n l)), (sortedd (insert n l0)), (sortedd (insert a0 l)), (sortedd (insert a0 l0)), (sortedd (l ++ l))
(sortedd (l ++ l0)), (sortedd (l0 ++ l)), (sortedd (l0 ++ l0)), (sortedd []), (sorted (a :: l)), (sorted (a :: l0)), (sorted (n :: l)), (sorted (n :: l0)), (sorted (a0 :: l)), (sorted (a0 :: l0))
(sorted (sort l)), (sorted (sort l0)), (sorted (insert a l)), (sorted (insert a l0)), (sorted (insert n l)), (sorted (insert n l0)), (sorted (insert a0 l)), (sorted (insert a0 l0)), (sorted (l ++ l)), (sorted (l ++ l0))
(sorted (l0 ++ l)), (sorted (l0 ++ l0)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: l0)), (Permutation l (n :: l)), (Permutation l (n :: l0)), (Permutation l (a0 :: l)), (Permutation l (a0 :: l0)), (Permutation l (sort l))
(Permutation l (sort l0)), (Permutation l (insert a l)), (Permutation l (insert a l0)), (Permutation l (insert n l)), (Permutation l (insert n l0)), (Permutation l (insert a0 l)), (Permutation l (insert a0 l0)), (Permutation l (l ++ l)), (Permutation l (l ++ l0)), (Permutation l (l0 ++ l))
(Permutation l (l0 ++ l0)), (Permutation l []), (Permutation l0 (a :: l)), (Permutation l0 (a :: l0)), (Permutation l0 (n :: l)), (Permutation l0 (n :: l0)), (Permutation l0 (a0 :: l)), (Permutation l0 (a0 :: l0)), (Permutation l0 (sort l)), (Permutation l0 (sort l0))
(Permutation l0 (insert a l)), (Permutation l0 (insert a l0)), (Permutation l0 (insert n l)), (Permutation l0 (insert n l0)), (Permutation l0 (insert a0 l)), (Permutation l0 (insert a0 l0)), (Permutation l0 (l ++ l)), (Permutation l0 (l ++ l0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l0 ++ l0))
(Permutation l0 []), (Permutation (a :: l) l), (Permutation (a :: l) l0), (Permutation (a :: l) (a :: l0)), (Permutation (a :: l) (n :: l)), (Permutation (a :: l) (n :: l0)), (Permutation (a :: l) (a0 :: l)), (Permutation (a :: l) (a0 :: l0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort l0))
(Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a l0)), (Permutation (a :: l) (insert n l)), (Permutation (a :: l) (insert n l0)), (Permutation (a :: l) (insert a0 l)), (Permutation (a :: l) (insert a0 l0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ l0)), (Permutation (a :: l) (l0 ++ l)), (Permutation (a :: l) (l0 ++ l0))
(Permutation (a :: l) []), (Permutation (a :: l0) l), (Permutation (a :: l0) l0), (Permutation (a :: l0) (a :: l)), (Permutation (a :: l0) (n :: l)), (Permutation (a :: l0) (n :: l0)), (Permutation (a :: l0) (a0 :: l)), (Permutation (a :: l0) (a0 :: l0)), (Permutation (a :: l0) (sort l)), (Permutation (a :: l0) (sort l0))
(Permutation (a :: l0) (insert a l)), (Permutation (a :: l0) (insert a l0)), (Permutation (a :: l0) (insert n l)), (Permutation (a :: l0) (insert n l0)), (Permutation (a :: l0) (insert a0 l)), (Permutation (a :: l0) (insert a0 l0)), (Permutation (a :: l0) (l ++ l)), (Permutation (a :: l0) (l ++ l0)), (Permutation (a :: l0) (l0 ++ l)), (Permutation (a :: l0) (l0 ++ l0))
(Permutation (a :: l0) []), (Permutation (n :: l) l), (Permutation (n :: l) l0), (Permutation (n :: l) (a :: l)), (Permutation (n :: l) (a :: l0)), (Permutation (n :: l) (n :: l0)), (Permutation (n :: l) (a0 :: l)), (Permutation (n :: l) (a0 :: l0)), (Permutation (n :: l) (sort l)), (Permutation (n :: l) (sort l0))
(Permutation (n :: l) (insert a l)), (Permutation (n :: l) (insert a l0)), (Permutation (n :: l) (insert n l)), (Permutation (n :: l) (insert n l0)), (Permutation (n :: l) (insert a0 l)), (Permutation (n :: l) (insert a0 l0)), (Permutation (n :: l) (l ++ l)), (Permutation (n :: l) (l ++ l0)), (Permutation (n :: l) (l0 ++ l)), (Permutation (n :: l) (l0 ++ l0))
(Permutation (n :: l) []), (Permutation (n :: l0) l), (Permutation (n :: l0) l0), (Permutation (n :: l0) (a :: l)), (Permutation (n :: l0) (a :: l0)), (Permutation (n :: l0) (n :: l)), (Permutation (n :: l0) (a0 :: l)), (Permutation (n :: l0) (a0 :: l0)), (Permutation (n :: l0) (sort l)), (Permutation (n :: l0) (sort l0))
(Permutation (n :: l0) (insert a l)), (Permutation (n :: l0) (insert a l0)), (Permutation (n :: l0) (insert n l)), (Permutation (n :: l0) (insert n l0)), (Permutation (n :: l0) (insert a0 l)), (Permutation (n :: l0) (insert a0 l0)), (Permutation (n :: l0) (l ++ l)), (Permutation (n :: l0) (l ++ l0)), (Permutation (n :: l0) (l0 ++ l)), (Permutation (n :: l0) (l0 ++ l0))
(Permutation (n :: l0) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) l0), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (a :: l0)), (Permutation (a0 :: l) (n :: l)), (Permutation (a0 :: l) (n :: l0)), (Permutation (a0 :: l) (a0 :: l0)), (Permutation (a0 :: l) (sort l)), (Permutation (a0 :: l) (sort l0))
(Permutation (a0 :: l) (insert a l)), (Permutation (a0 :: l) (insert a l0)), (Permutation (a0 :: l) (insert n l)), (Permutation (a0 :: l) (insert n l0)), (Permutation (a0 :: l) (insert a0 l)), (Permutation (a0 :: l) (insert a0 l0)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) (l ++ l0)), (Permutation (a0 :: l) (l0 ++ l)), (Permutation (a0 :: l) (l0 ++ l0))
(Permutation (a0 :: l) []), (Permutation (a0 :: l0) l), (Permutation (a0 :: l0) l0), (Permutation (a0 :: l0) (a :: l)), (Permutation (a0 :: l0) (a :: l0)), (Permutation (a0 :: l0) (n :: l)), (Permutation (a0 :: l0) (n :: l0)), (Permutation (a0 :: l0) (a0 :: l)), (Permutation (a0 :: l0) (sort l)), (Permutation (a0 :: l0) (sort l0))
(Permutation (a0 :: l0) (insert a l)), (Permutation (a0 :: l0) (insert a l0)), (Permutation (a0 :: l0) (insert n l)), (Permutation (a0 :: l0) (insert n l0)), (Permutation (a0 :: l0) (insert a0 l)), (Permutation (a0 :: l0) (insert a0 l0)), (Permutation (a0 :: l0) (l ++ l)), (Permutation (a0 :: l0) (l ++ l0)), (Permutation (a0 :: l0) (l0 ++ l)), (Permutation (a0 :: l0) (l0 ++ l0))
(Permutation (a0 :: l0) []), (Permutation (sort l) l), (Permutation (sort l) l0), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: l0)), (Permutation (sort l) (n :: l)), (Permutation (sort l) (n :: l0)), (Permutation (sort l) (a0 :: l)), (Permutation (sort l) (a0 :: l0)), (Permutation (sort l) (sort l0))
(Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a l0)), (Permutation (sort l) (insert n l)), (Permutation (sort l) (insert n l0)), (Permutation (sort l) (insert a0 l)), (Permutation (sort l) (insert a0 l0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ l0)), (Permutation (sort l) (l0 ++ l)), (Permutation (sort l) (l0 ++ l0))
(Permutation (sort l) []), (Permutation (sort l0) l), (Permutation (sort l0) l0), (Permutation (sort l0) (a :: l)), (Permutation (sort l0) (a :: l0)), (Permutation (sort l0) (n :: l)), (Permutation (sort l0) (n :: l0)), (Permutation (sort l0) (a0 :: l)), (Permutation (sort l0) (a0 :: l0)), (Permutation (sort l0) (sort l))
(Permutation (sort l0) (insert a l)), (Permutation (sort l0) (insert a l0)), (Permutation (sort l0) (insert n l)), (Permutation (sort l0) (insert n l0)), (Permutation (sort l0) (insert a0 l)), (Permutation (sort l0) (insert a0 l0)), (Permutation (sort l0) (l ++ l)), (Permutation (sort l0) (l ++ l0)), (Permutation (sort l0) (l0 ++ l)), (Permutation (sort l0) (l0 ++ l0))
(Permutation (sort l0) []), (Permutation (insert a l) l), (Permutation (insert a l) l0), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: l0)), (Permutation (insert a l) (n :: l)), (Permutation (insert a l) (n :: l0)), (Permutation (insert a l) (a0 :: l)), (Permutation (insert a l) (a0 :: l0)), (Permutation (insert a l) (sort l))
(Permutation (insert a l) (sort l0)), (Permutation (insert a l) (insert a l0)), (Permutation (insert a l) (insert n l)), (Permutation (insert a l) (insert n l0)), (Permutation (insert a l) (insert a0 l)), (Permutation (insert a l) (insert a0 l0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ l0)), (Permutation (insert a l) (l0 ++ l)), (Permutation (insert a l) (l0 ++ l0))
(Permutation (insert a l) []), (Permutation (insert a l0) l), (Permutation (insert a l0) l0), (Permutation (insert a l0) (a :: l)), (Permutation (insert a l0) (a :: l0)), (Permutation (insert a l0) (n :: l)), (Permutation (insert a l0) (n :: l0)), (Permutation (insert a l0) (a0 :: l)), (Permutation (insert a l0) (a0 :: l0)), (Permutation (insert a l0) (sort l))
(Permutation (insert a l0) (sort l0)), (Permutation (insert a l0) (insert a l)), (Permutation (insert a l0) (insert n l)), (Permutation (insert a l0) (insert n l0)), (Permutation (insert a l0) (insert a0 l)), (Permutation (insert a l0) (insert a0 l0)), (Permutation (insert a l0) (l ++ l)), (Permutation (insert a l0) (l ++ l0)), (Permutation (insert a l0) (l0 ++ l)), (Permutation (insert a l0) (l0 ++ l0))
(Permutation (insert a l0) []), (Permutation (insert n l) l), (Permutation (insert n l) l0), (Permutation (insert n l) (a :: l)), (Permutation (insert n l) (a :: l0)), (Permutation (insert n l) (n :: l)), (Permutation (insert n l) (n :: l0)), (Permutation (insert n l) (a0 :: l)), (Permutation (insert n l) (a0 :: l0)), (Permutation (insert n l) (sort l))
(Permutation (insert n l) (sort l0)), (Permutation (insert n l) (insert a l)), (Permutation (insert n l) (insert a l0)), (Permutation (insert n l) (insert n l0)), (Permutation (insert n l) (insert a0 l)), (Permutation (insert n l) (insert a0 l0)), (Permutation (insert n l) (l ++ l)), (Permutation (insert n l) (l ++ l0)), (Permutation (insert n l) (l0 ++ l)), (Permutation (insert n l) (l0 ++ l0))
(Permutation (insert n l) []), (Permutation (insert n l0) l), (Permutation (insert n l0) l0), (Permutation (insert n l0) (a :: l)), (Permutation (insert n l0) (a :: l0)), (Permutation (insert n l0) (n :: l)), (Permutation (insert n l0) (n :: l0)), (Permutation (insert n l0) (a0 :: l)), (Permutation (insert n l0) (a0 :: l0)), (Permutation (insert n l0) (sort l))
(Permutation (insert n l0) (sort l0)), (Permutation (insert n l0) (insert a l)), (Permutation (insert n l0) (insert a l0)), (Permutation (insert n l0) (insert n l)), (Permutation (insert n l0) (insert a0 l)), (Permutation (insert n l0) (insert a0 l0)), (Permutation (insert n l0) (l ++ l)), (Permutation (insert n l0) (l ++ l0)), (Permutation (insert n l0) (l0 ++ l)), (Permutation (insert n l0) (l0 ++ l0))
(Permutation (insert n l0) []), (Permutation (insert a0 l) l), (Permutation (insert a0 l) l0), (Permutation (insert a0 l) (a :: l)), (Permutation (insert a0 l) (a :: l0)), (Permutation (insert a0 l) (n :: l)), (Permutation (insert a0 l) (n :: l0)), (Permutation (insert a0 l) (a0 :: l)), (Permutation (insert a0 l) (a0 :: l0)), (Permutation (insert a0 l) (sort l))
(Permutation (insert a0 l) (sort l0)), (Permutation (insert a0 l) (insert a l)), (Permutation (insert a0 l) (insert a l0)), (Permutation (insert a0 l) (insert n l)), (Permutation (insert a0 l) (insert n l0)), (Permutation (insert a0 l) (insert a0 l0)), (Permutation (insert a0 l) (l ++ l)), (Permutation (insert a0 l) (l ++ l0)), (Permutation (insert a0 l) (l0 ++ l)), (Permutation (insert a0 l) (l0 ++ l0))
(Permutation (insert a0 l) []), (Permutation (insert a0 l0) l), (Permutation (insert a0 l0) l0), (Permutation (insert a0 l0) (a :: l)), (Permutation (insert a0 l0) (a :: l0)), (Permutation (insert a0 l0) (n :: l)), (Permutation (insert a0 l0) (n :: l0)), (Permutation (insert a0 l0) (a0 :: l)), (Permutation (insert a0 l0) (a0 :: l0)), (Permutation (insert a0 l0) (sort l))
(Permutation (insert a0 l0) (sort l0)), (Permutation (insert a0 l0) (insert a l)), (Permutation (insert a0 l0) (insert a l0)), (Permutation (insert a0 l0) (insert n l)), (Permutation (insert a0 l0) (insert n l0)), (Permutation (insert a0 l0) (insert a0 l)), (Permutation (insert a0 l0) (l ++ l)), (Permutation (insert a0 l0) (l ++ l0)), (Permutation (insert a0 l0) (l0 ++ l)), (Permutation (insert a0 l0) (l0 ++ l0))
(Permutation (insert a0 l0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) l0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: l0)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (n :: l0)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a0 :: l0)), (Permutation (l ++ l) (sort l))
(Permutation (l ++ l) (sort l0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a l0)), (Permutation (l ++ l) (insert n l)), (Permutation (l ++ l) (insert n l0)), (Permutation (l ++ l) (insert a0 l)), (Permutation (l ++ l) (insert a0 l0)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l0 ++ l0))
(Permutation (l ++ l) []), (Permutation (l ++ l0) l), (Permutation (l ++ l0) l0), (Permutation (l ++ l0) (a :: l)), (Permutation (l ++ l0) (a :: l0)), (Permutation (l ++ l0) (n :: l)), (Permutation (l ++ l0) (n :: l0)), (Permutation (l ++ l0) (a0 :: l)), (Permutation (l ++ l0) (a0 :: l0)), (Permutation (l ++ l0) (sort l))
(Permutation (l ++ l0) (sort l0)), (Permutation (l ++ l0) (insert a l)), (Permutation (l ++ l0) (insert a l0)), (Permutation (l ++ l0) (insert n l)), (Permutation (l ++ l0) (insert n l0)), (Permutation (l ++ l0) (insert a0 l)), (Permutation (l ++ l0) (insert a0 l0)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) (l0 ++ l)), (Permutation (l ++ l0) (l0 ++ l0))
(Permutation (l ++ l0) []), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) (a :: l)), (Permutation (l0 ++ l) (a :: l0)), (Permutation (l0 ++ l) (n :: l)), (Permutation (l0 ++ l) (n :: l0)), (Permutation (l0 ++ l) (a0 :: l)), (Permutation (l0 ++ l) (a0 :: l0)), (Permutation (l0 ++ l) (sort l))
(Permutation (l0 ++ l) (sort l0)), (Permutation (l0 ++ l) (insert a l)), (Permutation (l0 ++ l) (insert a l0)), (Permutation (l0 ++ l) (insert n l)), (Permutation (l0 ++ l) (insert n l0)), (Permutation (l0 ++ l) (insert a0 l)), (Permutation (l0 ++ l) (insert a0 l0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l0 ++ l0))
(Permutation (l0 ++ l) []), (Permutation (l0 ++ l0) l), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) (a :: l)), (Permutation (l0 ++ l0) (a :: l0)), (Permutation (l0 ++ l0) (n :: l)), (Permutation (l0 ++ l0) (n :: l0)), (Permutation (l0 ++ l0) (a0 :: l)), (Permutation (l0 ++ l0) (a0 :: l0)), (Permutation (l0 ++ l0) (sort l))
(Permutation (l0 ++ l0) (sort l0)), (Permutation (l0 ++ l0) (insert a l)), (Permutation (l0 ++ l0) (insert a l0)), (Permutation (l0 ++ l0) (insert n l)), (Permutation (l0 ++ l0) (insert n l0)), (Permutation (l0 ++ l0) (insert a0 l)), (Permutation (l0 ++ l0) (insert a0 l0)), (Permutation (l0 ++ l0) (l ++ l)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l0 ++ l))
(Permutation (l0 ++ l0) []), (Permutation [] l), (Permutation [] l0), (Permutation [] (a :: l)), (Permutation [] (a :: l0)), (Permutation [] (n :: l)), (Permutation [] (n :: l0)), (Permutation [] (a0 :: l)), (Permutation [] (a0 :: l0)), (Permutation [] (sort l))
(Permutation [] (sort l0)), (Permutation [] (insert a l)), (Permutation [] (insert a l0)), (Permutation [] (insert n l)), (Permutation [] (insert n l0)), (Permutation [] (insert a0 l)), (Permutation [] (insert a0 l0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ l0)), (Permutation [] (l0 ++ l))
(Permutation [] (l0 ++ l0)), (In a (a :: l)), (In a (a :: l0)), (In a (n :: l)), (In a (n :: l0)), (In a (a0 :: l)), (In a (a0 :: l0)), (In a (sort l)), (In a (sort l0)), (In a (insert a l))
(In a (insert a l0)), (In a (insert n l)), (In a (insert n l0)), (In a (insert a0 l)), (In a (insert a0 l0)), (In a (l ++ l)), (In a (l ++ l0)), (In a (l0 ++ l)), (In a (l0 ++ l0)), (In n (a :: l))
(In n (a :: l0)), (In n (n :: l)), (In n (n :: l0)), (In n (a0 :: l)), (In n (a0 :: l0)), (In n (sort l)), (In n (sort l0)), (In n (insert a l)), (In n (insert a l0)), (In n (insert n l))
(In n (insert n l0)), (In n (insert a0 l)), (In n (insert a0 l0)), (In n (l ++ l)), (In n (l ++ l0)), (In n (l0 ++ l)), (In n (l0 ++ l0)), (In a0 (a :: l)), (In a0 (a :: l0)), (In a0 (n :: l))
(In a0 (n :: l0)), (In a0 (a0 :: l)), (In a0 (a0 :: l0)), (In a0 (sort l)), (In a0 (sort l0)), (In a0 (insert a l)), (In a0 (insert a l0)), (In a0 (insert n l)), (In a0 (insert n l0)), (In a0 (insert a0 l))
(In a0 (insert a0 l0)), (In a0 (l ++ l)), (In a0 (l ++ l0)), (In a0 (l0 ++ l)), (In a0 (l0 ++ l0)), (In (length l) l), (In (length l) l0), (In (length l) (a :: l)), (In (length l) (a :: l0)), (In (length l) (n :: l))
(In (length l) (n :: l0)), (In (length l) (a0 :: l)), (In (length l) (a0 :: l0)), (In (length l) (sort l)), (In (length l) (sort l0)), (In (length l) (insert a l)), (In (length l) (insert a l0)), (In (length l) (insert n l)), (In (length l) (insert n l0)), (In (length l) (insert a0 l))
(In (length l) (insert a0 l0)), (In (length l) (l ++ l)), (In (length l) (l ++ l0)), (In (length l) (l0 ++ l)), (In (length l) (l0 ++ l0)), (In (length l0) l), (In (length l0) l0), (In (length l0) (a :: l)), (In (length l0) (a :: l0)), (In (length l0) (n :: l))
(In (length l0) (n :: l0)), (In (length l0) (a0 :: l)), (In (length l0) (a0 :: l0)), (In (length l0) (sort l)), (In (length l0) (sort l0)), (In (length l0) (insert a l)), (In (length l0) (insert a l0)), (In (length l0) (insert n l)), (In (length l0) (insert n l0)), (In (length l0) (insert a0 l))
(In (length l0) (insert a0 l0)), (In (length l0) (l ++ l)), (In (length l0) (l ++ l0)), (In (length l0) (l0 ++ l)), (In (length l0) (l0 ++ l0)), (a < length l), (a < length l0), (n < length l), (n < length l0), (a0 < length l)
(a0 < length l0), (length l < a), (length l < n), (length l < a0), (length l < length l0), (length l0 < a), (length l0 < n), (length l0 < a0), (length l0 < length l), (a <= length l)
(a <= length l0), (n <= length l), (n <= length l0), (a0 <= length l), (a0 <= length l0), (length l <= a), (length l <= n), (length l <= a0), (length l <= length l0), (length l0 <= a)
(length l0 <= n), (length l0 <= a0), (length l0 <= length l), (~ sortedd l), (~ sortedd l0), (~ sorted l), (~ sorted l0), (~ Permutation l l), (~ Permutation l l0), (~ Permutation l0 l)
(~ Permutation l0 l0), (~ In a l), (~ In a l0), (~ In n l), (~ In n l0), (~ In a0 l), (~ In a0 l0), (~ a < a), (~ a < n), (~ a < a0)
(~ n < a), (~ n < n), (~ n < a0), (~ a0 < a), (~ a0 < n), (~ a0 < a0), (~ a <= a), (~ a <= n), (~ a <= a0), (~ n <= a)
(~ n <= n), (~ n <= a0), (~ a0 <= a), (~ a0 <= n), (~ a0 <= a0), (l <> l), (l <> l0), (l0 <> l), (l0 <> l0), (a <> a)
(a <> n), (a <> a0), (n <> a), (n <> n), (n <> a0), (a0 <> a), (a0 <> n), (a0 <> a0), (None = Some l), (None = Some l0)
(a :: l = l), (a :: l = l0), (a :: l = sort l), (a :: l = sort l0), (a :: l = insert a l), (a :: l = insert a l0), (a :: l = insert n l), (a :: l = insert n l0), (a :: l = insert a0 l), (a :: l = insert a0 l0)
(a :: l = l ++ l), (a :: l = l ++ l0), (a :: l = l0 ++ l), (a :: l = l0 ++ l0), (a :: l = []), (a :: l0 = l), (a :: l0 = l0), (a :: l0 = sort l), (a :: l0 = sort l0), (a :: l0 = insert a l)
(a :: l0 = insert a l0), (a :: l0 = insert n l), (a :: l0 = insert n l0), (a :: l0 = insert a0 l), (a :: l0 = insert a0 l0), (a :: l0 = l ++ l), (a :: l0 = l ++ l0), (a :: l0 = l0 ++ l), (a :: l0 = l0 ++ l0), (a :: l0 = [])
(n :: l = l), (n :: l = l0), (n :: l = sort l), (n :: l = sort l0), (n :: l = insert a l), (n :: l = insert a l0), (n :: l = insert n l), (n :: l = insert n l0), (n :: l = insert a0 l), (n :: l = insert a0 l0)
(n :: l = l ++ l), (n :: l = l ++ l0), (n :: l = l0 ++ l), (n :: l = l0 ++ l0), (n :: l = []), (n :: l0 = l), (n :: l0 = l0), (n :: l0 = sort l), (n :: l0 = sort l0), (n :: l0 = insert a l)
(n :: l0 = insert a l0), (n :: l0 = insert n l), (n :: l0 = insert n l0), (n :: l0 = insert a0 l), (n :: l0 = insert a0 l0), (n :: l0 = l ++ l), (n :: l0 = l ++ l0), (n :: l0 = l0 ++ l), (n :: l0 = l0 ++ l0), (n :: l0 = [])
(a0 :: l = l), (a0 :: l = l0), (a0 :: l = sort l), (a0 :: l = sort l0), (a0 :: l = insert a l), (a0 :: l = insert a l0), (a0 :: l = insert n l), (a0 :: l = insert n l0), (a0 :: l = insert a0 l), (a0 :: l = insert a0 l0)
(a0 :: l = l ++ l), (a0 :: l = l ++ l0), (a0 :: l = l0 ++ l), (a0 :: l = l0 ++ l0), (a0 :: l = []), (a0 :: l0 = l), (a0 :: l0 = l0), (a0 :: l0 = sort l), (a0 :: l0 = sort l0), (a0 :: l0 = insert a l)
(a0 :: l0 = insert a l0), (a0 :: l0 = insert n l), (a0 :: l0 = insert n l0), (a0 :: l0 = insert a0 l), (a0 :: l0 = insert a0 l0), (a0 :: l0 = l ++ l), (a0 :: l0 = l ++ l0), (a0 :: l0 = l0 ++ l), (a0 :: l0 = l0 ++ l0), (a0 :: l0 = [])
(sort l = l), (sort l = l0), (sort l = insert a l), (sort l = insert a l0), (sort l = insert n l), (sort l = insert n l0), (sort l = insert a0 l), (sort l = insert a0 l0), (sort l = l ++ l), (sort l = l ++ l0)
(sort l = l0 ++ l), (sort l = l0 ++ l0), (sort l0 = l), (sort l0 = l0), (sort l0 = insert a l), (sort l0 = insert a l0), (sort l0 = insert n l), (sort l0 = insert n l0), (sort l0 = insert a0 l), (sort l0 = insert a0 l0)
(sort l0 = l ++ l), (sort l0 = l ++ l0), (sort l0 = l0 ++ l), (sort l0 = l0 ++ l0), (insert a l = l), (insert a l = l0), (insert a l = l ++ l), (insert a l = l ++ l0), (insert a l = l0 ++ l), (insert a l = l0 ++ l0)
(insert a l0 = l), (insert a l0 = l0), (insert a l0 = l ++ l), (insert a l0 = l ++ l0), (insert a l0 = l0 ++ l), (insert a l0 = l0 ++ l0), (insert n l = l), (insert n l = l0), (insert n l = l ++ l), (insert n l = l ++ l0)
(insert n l = l0 ++ l), (insert n l = l0 ++ l0), (insert n l0 = l), (insert n l0 = l0), (insert n l0 = l ++ l), (insert n l0 = l ++ l0), (insert n l0 = l0 ++ l), (insert n l0 = l0 ++ l0), (insert a0 l = l), (insert a0 l = l0)
(insert a0 l = l ++ l), (insert a0 l = l ++ l0), (insert a0 l = l0 ++ l), (insert a0 l = l0 ++ l0), (insert a0 l0 = l), (insert a0 l0 = l0), (insert a0 l0 = l ++ l), (insert a0 l0 = l ++ l0), (insert a0 l0 = l0 ++ l), (insert a0 l0 = l0 ++ l0)
(l ++ l = l), (l ++ l = l0), (l ++ l0 = l), (l ++ l0 = l0), (l0 ++ l = l), (l0 ++ l = l0), (l0 ++ l0 = l), (l0 ++ l0 = l0), ([] = l), ([] = l0)
([] = sort l), ([] = sort l0), ([] = insert a l), ([] = insert a l0), ([] = insert n l), ([] = insert n l0), ([] = insert a0 l), ([] = insert a0 l0), ([] = l ++ l), ([] = l ++ l0)
([] = l0 ++ l), ([] = l0 ++ l0), (None = Some a), (None = Some n), (None = Some a0), (length l = a), (length l = n), (length l = a0), (length l0 = a), (length l0 = n)
(length l0 = a0)

Label: 1 (1)
(sortedd l), (sortedd l0), (sorted l), (sorted l0), (Permutation l l), (Permutation l l0), (Permutation l0 l), (Permutation l0 l0), (In a l), (In a l0)
(In n l), (In n l0), (In a0 l), (In a0 l0), (a < a), (a < n), (a < a0), (n < a), (n < n), (n < a0)
(a0 < a), (a0 < n), (a0 < a0), (a <= a), (a <= n), (a <= a0), (n <= a), (n <= n), (n <= a0), (a0 <= a)
(a0 <= n), (a0 <= a0), (l = l), (l = l0), (l0 = l), (l0 = l0), (a = a), (a = n), (a = a0), (n = a)
(n = n), (n = a0), (a0 = a), (a0 = n), (a0 = a0), (sortedd (a :: l)), (sortedd (a :: l0)), (sortedd (n :: l)), (sortedd (n :: l0)), (sortedd (a0 :: l))
(sortedd (a0 :: l0)), (sortedd (sort l)), (sortedd (sort l0)), (sortedd (insert a l)), (sortedd (insert a l0)), (sortedd (insert n l)), (sortedd (insert n l0)), (sortedd (insert a0 l)), (sortedd (insert a0 l0)), (sortedd (l ++ l))
(sortedd (l ++ l0)), (sortedd (l0 ++ l)), (sortedd (l0 ++ l0)), (sortedd []), (sorted (a :: l)), (sorted (a :: l0)), (sorted (n :: l)), (sorted (n :: l0)), (sorted (a0 :: l)), (sorted (a0 :: l0))
(sorted (sort l)), (sorted (sort l0)), (sorted (insert a l)), (sorted (insert a l0)), (sorted (insert n l)), (sorted (insert n l0)), (sorted (insert a0 l)), (sorted (insert a0 l0)), (sorted (l ++ l)), (sorted (l ++ l0))
(sorted (l0 ++ l)), (sorted (l0 ++ l0)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: l0)), (Permutation l (n :: l)), (Permutation l (n :: l0)), (Permutation l (a0 :: l)), (Permutation l (a0 :: l0)), (Permutation l (sort l))
(Permutation l (sort l0)), (Permutation l (insert a l)), (Permutation l (insert a l0)), (Permutation l (insert n l)), (Permutation l (insert n l0)), (Permutation l (insert a0 l)), (Permutation l (insert a0 l0)), (Permutation l (l ++ l)), (Permutation l (l ++ l0)), (Permutation l (l0 ++ l))
(Permutation l (l0 ++ l0)), (Permutation l []), (Permutation l0 (a :: l)), (Permutation l0 (a :: l0)), (Permutation l0 (n :: l)), (Permutation l0 (n :: l0)), (Permutation l0 (a0 :: l)), (Permutation l0 (a0 :: l0)), (Permutation l0 (sort l)), (Permutation l0 (sort l0))
(Permutation l0 (insert a l)), (Permutation l0 (insert a l0)), (Permutation l0 (insert n l)), (Permutation l0 (insert n l0)), (Permutation l0 (insert a0 l)), (Permutation l0 (insert a0 l0)), (Permutation l0 (l ++ l)), (Permutation l0 (l ++ l0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l0 ++ l0))
(Permutation l0 []), (Permutation (a :: l) l), (Permutation (a :: l) l0), (Permutation (a :: l) (a :: l0)), (Permutation (a :: l) (n :: l)), (Permutation (a :: l) (n :: l0)), (Permutation (a :: l) (a0 :: l)), (Permutation (a :: l) (a0 :: l0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort l0))
(Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a l0)), (Permutation (a :: l) (insert n l)), (Permutation (a :: l) (insert n l0)), (Permutation (a :: l) (insert a0 l)), (Permutation (a :: l) (insert a0 l0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ l0)), (Permutation (a :: l) (l0 ++ l)), (Permutation (a :: l) (l0 ++ l0))
(Permutation (a :: l) []), (Permutation (a :: l0) l), (Permutation (a :: l0) l0), (Permutation (a :: l0) (a :: l)), (Permutation (a :: l0) (n :: l)), (Permutation (a :: l0) (n :: l0)), (Permutation (a :: l0) (a0 :: l)), (Permutation (a :: l0) (a0 :: l0)), (Permutation (a :: l0) (sort l)), (Permutation (a :: l0) (sort l0))
(Permutation (a :: l0) (insert a l)), (Permutation (a :: l0) (insert a l0)), (Permutation (a :: l0) (insert n l)), (Permutation (a :: l0) (insert n l0)), (Permutation (a :: l0) (insert a0 l)), (Permutation (a :: l0) (insert a0 l0)), (Permutation (a :: l0) (l ++ l)), (Permutation (a :: l0) (l ++ l0)), (Permutation (a :: l0) (l0 ++ l)), (Permutation (a :: l0) (l0 ++ l0))
(Permutation (a :: l0) []), (Permutation (n :: l) l), (Permutation (n :: l) l0), (Permutation (n :: l) (a :: l)), (Permutation (n :: l) (a :: l0)), (Permutation (n :: l) (n :: l0)), (Permutation (n :: l) (a0 :: l)), (Permutation (n :: l) (a0 :: l0)), (Permutation (n :: l) (sort l)), (Permutation (n :: l) (sort l0))
(Permutation (n :: l) (insert a l)), (Permutation (n :: l) (insert a l0)), (Permutation (n :: l) (insert n l)), (Permutation (n :: l) (insert n l0)), (Permutation (n :: l) (insert a0 l)), (Permutation (n :: l) (insert a0 l0)), (Permutation (n :: l) (l ++ l)), (Permutation (n :: l) (l ++ l0)), (Permutation (n :: l) (l0 ++ l)), (Permutation (n :: l) (l0 ++ l0))
(Permutation (n :: l) []), (Permutation (n :: l0) l), (Permutation (n :: l0) l0), (Permutation (n :: l0) (a :: l)), (Permutation (n :: l0) (a :: l0)), (Permutation (n :: l0) (n :: l)), (Permutation (n :: l0) (a0 :: l)), (Permutation (n :: l0) (a0 :: l0)), (Permutation (n :: l0) (sort l)), (Permutation (n :: l0) (sort l0))
(Permutation (n :: l0) (insert a l)), (Permutation (n :: l0) (insert a l0)), (Permutation (n :: l0) (insert n l)), (Permutation (n :: l0) (insert n l0)), (Permutation (n :: l0) (insert a0 l)), (Permutation (n :: l0) (insert a0 l0)), (Permutation (n :: l0) (l ++ l)), (Permutation (n :: l0) (l ++ l0)), (Permutation (n :: l0) (l0 ++ l)), (Permutation (n :: l0) (l0 ++ l0))
(Permutation (n :: l0) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) l0), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (a :: l0)), (Permutation (a0 :: l) (n :: l)), (Permutation (a0 :: l) (n :: l0)), (Permutation (a0 :: l) (a0 :: l0)), (Permutation (a0 :: l) (sort l)), (Permutation (a0 :: l) (sort l0))
(Permutation (a0 :: l) (insert a l)), (Permutation (a0 :: l) (insert a l0)), (Permutation (a0 :: l) (insert n l)), (Permutation (a0 :: l) (insert n l0)), (Permutation (a0 :: l) (insert a0 l)), (Permutation (a0 :: l) (insert a0 l0)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) (l ++ l0)), (Permutation (a0 :: l) (l0 ++ l)), (Permutation (a0 :: l) (l0 ++ l0))
(Permutation (a0 :: l) []), (Permutation (a0 :: l0) l), (Permutation (a0 :: l0) l0), (Permutation (a0 :: l0) (a :: l)), (Permutation (a0 :: l0) (a :: l0)), (Permutation (a0 :: l0) (n :: l)), (Permutation (a0 :: l0) (n :: l0)), (Permutation (a0 :: l0) (a0 :: l)), (Permutation (a0 :: l0) (sort l)), (Permutation (a0 :: l0) (sort l0))
(Permutation (a0 :: l0) (insert a l)), (Permutation (a0 :: l0) (insert a l0)), (Permutation (a0 :: l0) (insert n l)), (Permutation (a0 :: l0) (insert n l0)), (Permutation (a0 :: l0) (insert a0 l)), (Permutation (a0 :: l0) (insert a0 l0)), (Permutation (a0 :: l0) (l ++ l)), (Permutation (a0 :: l0) (l ++ l0)), (Permutation (a0 :: l0) (l0 ++ l)), (Permutation (a0 :: l0) (l0 ++ l0))
(Permutation (a0 :: l0) []), (Permutation (sort l) l), (Permutation (sort l) l0), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: l0)), (Permutation (sort l) (n :: l)), (Permutation (sort l) (n :: l0)), (Permutation (sort l) (a0 :: l)), (Permutation (sort l) (a0 :: l0)), (Permutation (sort l) (sort l0))
(Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a l0)), (Permutation (sort l) (insert n l)), (Permutation (sort l) (insert n l0)), (Permutation (sort l) (insert a0 l)), (Permutation (sort l) (insert a0 l0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ l0)), (Permutation (sort l) (l0 ++ l)), (Permutation (sort l) (l0 ++ l0))
(Permutation (sort l) []), (Permutation (sort l0) l), (Permutation (sort l0) l0), (Permutation (sort l0) (a :: l)), (Permutation (sort l0) (a :: l0)), (Permutation (sort l0) (n :: l)), (Permutation (sort l0) (n :: l0)), (Permutation (sort l0) (a0 :: l)), (Permutation (sort l0) (a0 :: l0)), (Permutation (sort l0) (sort l))
(Permutation (sort l0) (insert a l)), (Permutation (sort l0) (insert a l0)), (Permutation (sort l0) (insert n l)), (Permutation (sort l0) (insert n l0)), (Permutation (sort l0) (insert a0 l)), (Permutation (sort l0) (insert a0 l0)), (Permutation (sort l0) (l ++ l)), (Permutation (sort l0) (l ++ l0)), (Permutation (sort l0) (l0 ++ l)), (Permutation (sort l0) (l0 ++ l0))
(Permutation (sort l0) []), (Permutation (insert a l) l), (Permutation (insert a l) l0), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: l0)), (Permutation (insert a l) (n :: l)), (Permutation (insert a l) (n :: l0)), (Permutation (insert a l) (a0 :: l)), (Permutation (insert a l) (a0 :: l0)), (Permutation (insert a l) (sort l))
(Permutation (insert a l) (sort l0)), (Permutation (insert a l) (insert a l0)), (Permutation (insert a l) (insert n l)), (Permutation (insert a l) (insert n l0)), (Permutation (insert a l) (insert a0 l)), (Permutation (insert a l) (insert a0 l0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ l0)), (Permutation (insert a l) (l0 ++ l)), (Permutation (insert a l) (l0 ++ l0))
(Permutation (insert a l) []), (Permutation (insert a l0) l), (Permutation (insert a l0) l0), (Permutation (insert a l0) (a :: l)), (Permutation (insert a l0) (a :: l0)), (Permutation (insert a l0) (n :: l)), (Permutation (insert a l0) (n :: l0)), (Permutation (insert a l0) (a0 :: l)), (Permutation (insert a l0) (a0 :: l0)), (Permutation (insert a l0) (sort l))
(Permutation (insert a l0) (sort l0)), (Permutation (insert a l0) (insert a l)), (Permutation (insert a l0) (insert n l)), (Permutation (insert a l0) (insert n l0)), (Permutation (insert a l0) (insert a0 l)), (Permutation (insert a l0) (insert a0 l0)), (Permutation (insert a l0) (l ++ l)), (Permutation (insert a l0) (l ++ l0)), (Permutation (insert a l0) (l0 ++ l)), (Permutation (insert a l0) (l0 ++ l0))
(Permutation (insert a l0) []), (Permutation (insert n l) l), (Permutation (insert n l) l0), (Permutation (insert n l) (a :: l)), (Permutation (insert n l) (a :: l0)), (Permutation (insert n l) (n :: l)), (Permutation (insert n l) (n :: l0)), (Permutation (insert n l) (a0 :: l)), (Permutation (insert n l) (a0 :: l0)), (Permutation (insert n l) (sort l))
(Permutation (insert n l) (sort l0)), (Permutation (insert n l) (insert a l)), (Permutation (insert n l) (insert a l0)), (Permutation (insert n l) (insert n l0)), (Permutation (insert n l) (insert a0 l)), (Permutation (insert n l) (insert a0 l0)), (Permutation (insert n l) (l ++ l)), (Permutation (insert n l) (l ++ l0)), (Permutation (insert n l) (l0 ++ l)), (Permutation (insert n l) (l0 ++ l0))
(Permutation (insert n l) []), (Permutation (insert n l0) l), (Permutation (insert n l0) l0), (Permutation (insert n l0) (a :: l)), (Permutation (insert n l0) (a :: l0)), (Permutation (insert n l0) (n :: l)), (Permutation (insert n l0) (n :: l0)), (Permutation (insert n l0) (a0 :: l)), (Permutation (insert n l0) (a0 :: l0)), (Permutation (insert n l0) (sort l))
(Permutation (insert n l0) (sort l0)), (Permutation (insert n l0) (insert a l)), (Permutation (insert n l0) (insert a l0)), (Permutation (insert n l0) (insert n l)), (Permutation (insert n l0) (insert a0 l)), (Permutation (insert n l0) (insert a0 l0)), (Permutation (insert n l0) (l ++ l)), (Permutation (insert n l0) (l ++ l0)), (Permutation (insert n l0) (l0 ++ l)), (Permutation (insert n l0) (l0 ++ l0))
(Permutation (insert n l0) []), (Permutation (insert a0 l) l), (Permutation (insert a0 l) l0), (Permutation (insert a0 l) (a :: l)), (Permutation (insert a0 l) (a :: l0)), (Permutation (insert a0 l) (n :: l)), (Permutation (insert a0 l) (n :: l0)), (Permutation (insert a0 l) (a0 :: l)), (Permutation (insert a0 l) (a0 :: l0)), (Permutation (insert a0 l) (sort l))
(Permutation (insert a0 l) (sort l0)), (Permutation (insert a0 l) (insert a l)), (Permutation (insert a0 l) (insert a l0)), (Permutation (insert a0 l) (insert n l)), (Permutation (insert a0 l) (insert n l0)), (Permutation (insert a0 l) (insert a0 l0)), (Permutation (insert a0 l) (l ++ l)), (Permutation (insert a0 l) (l ++ l0)), (Permutation (insert a0 l) (l0 ++ l)), (Permutation (insert a0 l) (l0 ++ l0))
(Permutation (insert a0 l) []), (Permutation (insert a0 l0) l), (Permutation (insert a0 l0) l0), (Permutation (insert a0 l0) (a :: l)), (Permutation (insert a0 l0) (a :: l0)), (Permutation (insert a0 l0) (n :: l)), (Permutation (insert a0 l0) (n :: l0)), (Permutation (insert a0 l0) (a0 :: l)), (Permutation (insert a0 l0) (a0 :: l0)), (Permutation (insert a0 l0) (sort l))
(Permutation (insert a0 l0) (sort l0)), (Permutation (insert a0 l0) (insert a l)), (Permutation (insert a0 l0) (insert a l0)), (Permutation (insert a0 l0) (insert n l)), (Permutation (insert a0 l0) (insert n l0)), (Permutation (insert a0 l0) (insert a0 l)), (Permutation (insert a0 l0) (l ++ l)), (Permutation (insert a0 l0) (l ++ l0)), (Permutation (insert a0 l0) (l0 ++ l)), (Permutation (insert a0 l0) (l0 ++ l0))
(Permutation (insert a0 l0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) l0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: l0)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (n :: l0)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a0 :: l0)), (Permutation (l ++ l) (sort l))
(Permutation (l ++ l) (sort l0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a l0)), (Permutation (l ++ l) (insert n l)), (Permutation (l ++ l) (insert n l0)), (Permutation (l ++ l) (insert a0 l)), (Permutation (l ++ l) (insert a0 l0)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l0 ++ l0))
(Permutation (l ++ l) []), (Permutation (l ++ l0) l), (Permutation (l ++ l0) l0), (Permutation (l ++ l0) (a :: l)), (Permutation (l ++ l0) (a :: l0)), (Permutation (l ++ l0) (n :: l)), (Permutation (l ++ l0) (n :: l0)), (Permutation (l ++ l0) (a0 :: l)), (Permutation (l ++ l0) (a0 :: l0)), (Permutation (l ++ l0) (sort l))
(Permutation (l ++ l0) (sort l0)), (Permutation (l ++ l0) (insert a l)), (Permutation (l ++ l0) (insert a l0)), (Permutation (l ++ l0) (insert n l)), (Permutation (l ++ l0) (insert n l0)), (Permutation (l ++ l0) (insert a0 l)), (Permutation (l ++ l0) (insert a0 l0)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) (l0 ++ l)), (Permutation (l ++ l0) (l0 ++ l0))
(Permutation (l ++ l0) []), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) (a :: l)), (Permutation (l0 ++ l) (a :: l0)), (Permutation (l0 ++ l) (n :: l)), (Permutation (l0 ++ l) (n :: l0)), (Permutation (l0 ++ l) (a0 :: l)), (Permutation (l0 ++ l) (a0 :: l0)), (Permutation (l0 ++ l) (sort l))
(Permutation (l0 ++ l) (sort l0)), (Permutation (l0 ++ l) (insert a l)), (Permutation (l0 ++ l) (insert a l0)), (Permutation (l0 ++ l) (insert n l)), (Permutation (l0 ++ l) (insert n l0)), (Permutation (l0 ++ l) (insert a0 l)), (Permutation (l0 ++ l) (insert a0 l0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l0 ++ l0))
(Permutation (l0 ++ l) []), (Permutation (l0 ++ l0) l), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) (a :: l)), (Permutation (l0 ++ l0) (a :: l0)), (Permutation (l0 ++ l0) (n :: l)), (Permutation (l0 ++ l0) (n :: l0)), (Permutation (l0 ++ l0) (a0 :: l)), (Permutation (l0 ++ l0) (a0 :: l0)), (Permutation (l0 ++ l0) (sort l))
(Permutation (l0 ++ l0) (sort l0)), (Permutation (l0 ++ l0) (insert a l)), (Permutation (l0 ++ l0) (insert a l0)), (Permutation (l0 ++ l0) (insert n l)), (Permutation (l0 ++ l0) (insert n l0)), (Permutation (l0 ++ l0) (insert a0 l)), (Permutation (l0 ++ l0) (insert a0 l0)), (Permutation (l0 ++ l0) (l ++ l)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l0 ++ l))
(Permutation (l0 ++ l0) []), (Permutation [] l), (Permutation [] l0), (Permutation [] (a :: l)), (Permutation [] (a :: l0)), (Permutation [] (n :: l)), (Permutation [] (n :: l0)), (Permutation [] (a0 :: l)), (Permutation [] (a0 :: l0)), (Permutation [] (sort l))
(Permutation [] (sort l0)), (Permutation [] (insert a l)), (Permutation [] (insert a l0)), (Permutation [] (insert n l)), (Permutation [] (insert n l0)), (Permutation [] (insert a0 l)), (Permutation [] (insert a0 l0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ l0)), (Permutation [] (l0 ++ l))
(Permutation [] (l0 ++ l0)), (In a (a :: l)), (In a (a :: l0)), (In a (n :: l)), (In a (n :: l0)), (In a (a0 :: l)), (In a (a0 :: l0)), (In a (sort l)), (In a (sort l0)), (In a (insert a l))
(In a (insert a l0)), (In a (insert n l)), (In a (insert n l0)), (In a (insert a0 l)), (In a (insert a0 l0)), (In a (l ++ l)), (In a (l ++ l0)), (In a (l0 ++ l)), (In a (l0 ++ l0)), (In n (a :: l))
(In n (a :: l0)), (In n (n :: l)), (In n (n :: l0)), (In n (a0 :: l)), (In n (a0 :: l0)), (In n (sort l)), (In n (sort l0)), (In n (insert a l)), (In n (insert a l0)), (In n (insert n l))
(In n (insert n l0)), (In n (insert a0 l)), (In n (insert a0 l0)), (In n (l ++ l)), (In n (l ++ l0)), (In n (l0 ++ l)), (In n (l0 ++ l0)), (In a0 (a :: l)), (In a0 (a :: l0)), (In a0 (n :: l))
(In a0 (n :: l0)), (In a0 (a0 :: l)), (In a0 (a0 :: l0)), (In a0 (sort l)), (In a0 (sort l0)), (In a0 (insert a l)), (In a0 (insert a l0)), (In a0 (insert n l)), (In a0 (insert n l0)), (In a0 (insert a0 l))
(In a0 (insert a0 l0)), (In a0 (l ++ l)), (In a0 (l ++ l0)), (In a0 (l0 ++ l)), (In a0 (l0 ++ l0)), (In (length l) l), (In (length l) l0), (In (length l) (a :: l)), (In (length l) (a :: l0)), (In (length l) (n :: l))
(In (length l) (n :: l0)), (In (length l) (a0 :: l)), (In (length l) (a0 :: l0)), (In (length l) (sort l)), (In (length l) (sort l0)), (In (length l) (insert a l)), (In (length l) (insert a l0)), (In (length l) (insert n l)), (In (length l) (insert n l0)), (In (length l) (insert a0 l))
(In (length l) (insert a0 l0)), (In (length l) (l ++ l)), (In (length l) (l ++ l0)), (In (length l) (l0 ++ l)), (In (length l) (l0 ++ l0)), (In (length l0) l), (In (length l0) l0), (In (length l0) (a :: l)), (In (length l0) (a :: l0)), (In (length l0) (n :: l))
(In (length l0) (n :: l0)), (In (length l0) (a0 :: l)), (In (length l0) (a0 :: l0)), (In (length l0) (sort l)), (In (length l0) (sort l0)), (In (length l0) (insert a l)), (In (length l0) (insert a l0)), (In (length l0) (insert n l)), (In (length l0) (insert n l0)), (In (length l0) (insert a0 l))
(In (length l0) (insert a0 l0)), (In (length l0) (l ++ l)), (In (length l0) (l ++ l0)), (In (length l0) (l0 ++ l)), (In (length l0) (l0 ++ l0)), (a < length l), (a < length l0), (n < length l), (n < length l0), (a0 < length l)
(a0 < length l0), (length l < a), (length l < n), (length l < a0), (length l < length l0), (length l0 < a), (length l0 < n), (length l0 < a0), (length l0 < length l), (a <= length l)
(a <= length l0), (n <= length l), (n <= length l0), (a0 <= length l), (a0 <= length l0), (length l <= a), (length l <= n), (length l <= a0), (length l <= length l0), (length l0 <= a)
(length l0 <= n), (length l0 <= a0), (length l0 <= length l), (~ sortedd l), (~ sortedd l0), (~ sorted l), (~ sorted l0), (~ Permutation l l), (~ Permutation l l0), (~ Permutation l0 l)
(~ Permutation l0 l0), (~ In a l), (~ In a l0), (~ In n l), (~ In n l0), (~ In a0 l), (~ In a0 l0), (~ a < a), (~ a < n), (~ a < a0)
(~ n < a), (~ n < n), (~ n < a0), (~ a0 < a), (~ a0 < n), (~ a0 < a0), (~ a <= a), (~ a <= n), (~ a <= a0), (~ n <= a)
(~ n <= n), (~ n <= a0), (~ a0 <= a), (~ a0 <= n), (~ a0 <= a0), (l <> l), (l <> l0), (l0 <> l), (l0 <> l0), (a <> a)
(a <> n), (a <> a0), (n <> a), (n <> n), (n <> a0), (a0 <> a), (a0 <> n), (a0 <> a0), (None = Some l), (None = Some l0)
(a :: l = l), (a :: l = l0), (a :: l = sort l), (a :: l = sort l0), (a :: l = insert a l), (a :: l = insert a l0), (a :: l = insert n l), (a :: l = insert n l0), (a :: l = insert a0 l), (a :: l = insert a0 l0)
(a :: l = l ++ l), (a :: l = l ++ l0), (a :: l = l0 ++ l), (a :: l = l0 ++ l0), (a :: l = []), (a :: l0 = l), (a :: l0 = l0), (a :: l0 = sort l), (a :: l0 = sort l0), (a :: l0 = insert a l)
(a :: l0 = insert a l0), (a :: l0 = insert n l), (a :: l0 = insert n l0), (a :: l0 = insert a0 l), (a :: l0 = insert a0 l0), (a :: l0 = l ++ l), (a :: l0 = l ++ l0), (a :: l0 = l0 ++ l), (a :: l0 = l0 ++ l0), (a :: l0 = [])
(n :: l = l), (n :: l = l0), (n :: l = sort l), (n :: l = sort l0), (n :: l = insert a l), (n :: l = insert a l0), (n :: l = insert n l), (n :: l = insert n l0), (n :: l = insert a0 l), (n :: l = insert a0 l0)
(n :: l = l ++ l), (n :: l = l ++ l0), (n :: l = l0 ++ l), (n :: l = l0 ++ l0), (n :: l = []), (n :: l0 = l), (n :: l0 = l0), (n :: l0 = sort l), (n :: l0 = sort l0), (n :: l0 = insert a l)
(n :: l0 = insert a l0), (n :: l0 = insert n l), (n :: l0 = insert n l0), (n :: l0 = insert a0 l), (n :: l0 = insert a0 l0), (n :: l0 = l ++ l), (n :: l0 = l ++ l0), (n :: l0 = l0 ++ l), (n :: l0 = l0 ++ l0), (n :: l0 = [])
(a0 :: l = l), (a0 :: l = l0), (a0 :: l = sort l), (a0 :: l = sort l0), (a0 :: l = insert a l), (a0 :: l = insert a l0), (a0 :: l = insert n l), (a0 :: l = insert n l0), (a0 :: l = insert a0 l), (a0 :: l = insert a0 l0)
(a0 :: l = l ++ l), (a0 :: l = l ++ l0), (a0 :: l = l0 ++ l), (a0 :: l = l0 ++ l0), (a0 :: l = []), (a0 :: l0 = l), (a0 :: l0 = l0), (a0 :: l0 = sort l), (a0 :: l0 = sort l0), (a0 :: l0 = insert a l)
(a0 :: l0 = insert a l0), (a0 :: l0 = insert n l), (a0 :: l0 = insert n l0), (a0 :: l0 = insert a0 l), (a0 :: l0 = insert a0 l0), (a0 :: l0 = l ++ l), (a0 :: l0 = l ++ l0), (a0 :: l0 = l0 ++ l), (a0 :: l0 = l0 ++ l0), (a0 :: l0 = [])
(sort l = l), (sort l = l0), (sort l = insert a l), (sort l = insert a l0), (sort l = insert n l), (sort l = insert n l0), (sort l = insert a0 l), (sort l = insert a0 l0), (sort l = l ++ l), (sort l = l ++ l0)
(sort l = l0 ++ l), (sort l = l0 ++ l0), (sort l0 = l), (sort l0 = l0), (sort l0 = insert a l), (sort l0 = insert a l0), (sort l0 = insert n l), (sort l0 = insert n l0), (sort l0 = insert a0 l), (sort l0 = insert a0 l0)
(sort l0 = l ++ l), (sort l0 = l ++ l0), (sort l0 = l0 ++ l), (sort l0 = l0 ++ l0), (insert a l = l), (insert a l = l0), (insert a l = l ++ l), (insert a l = l ++ l0), (insert a l = l0 ++ l), (insert a l = l0 ++ l0)
(insert a l0 = l), (insert a l0 = l0), (insert a l0 = l ++ l), (insert a l0 = l ++ l0), (insert a l0 = l0 ++ l), (insert a l0 = l0 ++ l0), (insert n l = l), (insert n l = l0), (insert n l = l ++ l), (insert n l = l ++ l0)
(insert n l = l0 ++ l), (insert n l = l0 ++ l0), (insert n l0 = l), (insert n l0 = l0), (insert n l0 = l ++ l), (insert n l0 = l ++ l0), (insert n l0 = l0 ++ l), (insert n l0 = l0 ++ l0), (insert a0 l = l), (insert a0 l = l0)
(insert a0 l = l ++ l), (insert a0 l = l ++ l0), (insert a0 l = l0 ++ l), (insert a0 l = l0 ++ l0), (insert a0 l0 = l), (insert a0 l0 = l0), (insert a0 l0 = l ++ l), (insert a0 l0 = l ++ l0), (insert a0 l0 = l0 ++ l), (insert a0 l0 = l0 ++ l0)
(l ++ l = l), (l ++ l = l0), (l ++ l0 = l), (l ++ l0 = l0), (l0 ++ l = l), (l0 ++ l = l0), (l0 ++ l0 = l), (l0 ++ l0 = l0), ([] = l), ([] = l0)
([] = sort l), ([] = sort l0), ([] = insert a l), ([] = insert a l0), ([] = insert n l), ([] = insert n l0), ([] = insert a0 l), ([] = insert a0 l0), ([] = l ++ l), ([] = l ++ l0)
([] = l0 ++ l), ([] = l0 ++ l0), (None = Some a), (None = Some n), (None = Some a0), (length l = a), (length l = n), (length l = a0), (length l0 = a), (length l0 = n)
(length l0 = a0)

Label: 2 (2)
(sortedd l), (sortedd l0), (sorted l), (sorted l0), (Permutation l l), (Permutation l l0), (Permutation l0 l), (Permutation l0 l0), (In a l), (In a l0)
(In n l), (In n l0), (In a0 l), (In a0 l0), (a < a), (a < n), (a < a0), (n < a), (n < n), (n < a0)
(a0 < a), (a0 < n), (a0 < a0), (a <= a), (a <= n), (a <= a0), (n <= a), (n <= n), (n <= a0), (a0 <= a)
(a0 <= n), (a0 <= a0), (l = l), (l = l0), (l0 = l), (l0 = l0), (a = a), (a = n), (a = a0), (n = a)
(n = n), (n = a0), (a0 = a), (a0 = n), (a0 = a0), (sortedd (a :: l)), (sortedd (a :: l0)), (sortedd (n :: l)), (sortedd (n :: l0)), (sortedd (a0 :: l))
(sortedd (a0 :: l0)), (sortedd (sort l)), (sortedd (sort l0)), (sortedd (insert a l)), (sortedd (insert a l0)), (sortedd (insert n l)), (sortedd (insert n l0)), (sortedd (insert a0 l)), (sortedd (insert a0 l0)), (sortedd (l ++ l))
(sortedd (l ++ l0)), (sortedd (l0 ++ l)), (sortedd (l0 ++ l0)), (sortedd []), (sorted (a :: l)), (sorted (a :: l0)), (sorted (n :: l)), (sorted (n :: l0)), (sorted (a0 :: l)), (sorted (a0 :: l0))
(sorted (sort l)), (sorted (sort l0)), (sorted (insert a l)), (sorted (insert a l0)), (sorted (insert n l)), (sorted (insert n l0)), (sorted (insert a0 l)), (sorted (insert a0 l0)), (sorted (l ++ l)), (sorted (l ++ l0))
(sorted (l0 ++ l)), (sorted (l0 ++ l0)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: l0)), (Permutation l (n :: l)), (Permutation l (n :: l0)), (Permutation l (a0 :: l)), (Permutation l (a0 :: l0)), (Permutation l (sort l))
(Permutation l (sort l0)), (Permutation l (insert a l)), (Permutation l (insert a l0)), (Permutation l (insert n l)), (Permutation l (insert n l0)), (Permutation l (insert a0 l)), (Permutation l (insert a0 l0)), (Permutation l (l ++ l)), (Permutation l (l ++ l0)), (Permutation l (l0 ++ l))
(Permutation l (l0 ++ l0)), (Permutation l []), (Permutation l0 (a :: l)), (Permutation l0 (a :: l0)), (Permutation l0 (n :: l)), (Permutation l0 (n :: l0)), (Permutation l0 (a0 :: l)), (Permutation l0 (a0 :: l0)), (Permutation l0 (sort l)), (Permutation l0 (sort l0))
(Permutation l0 (insert a l)), (Permutation l0 (insert a l0)), (Permutation l0 (insert n l)), (Permutation l0 (insert n l0)), (Permutation l0 (insert a0 l)), (Permutation l0 (insert a0 l0)), (Permutation l0 (l ++ l)), (Permutation l0 (l ++ l0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l0 ++ l0))
(Permutation l0 []), (Permutation (a :: l) l), (Permutation (a :: l) l0), (Permutation (a :: l) (a :: l0)), (Permutation (a :: l) (n :: l)), (Permutation (a :: l) (n :: l0)), (Permutation (a :: l) (a0 :: l)), (Permutation (a :: l) (a0 :: l0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort l0))
(Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a l0)), (Permutation (a :: l) (insert n l)), (Permutation (a :: l) (insert n l0)), (Permutation (a :: l) (insert a0 l)), (Permutation (a :: l) (insert a0 l0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ l0)), (Permutation (a :: l) (l0 ++ l)), (Permutation (a :: l) (l0 ++ l0))
(Permutation (a :: l) []), (Permutation (a :: l0) l), (Permutation (a :: l0) l0), (Permutation (a :: l0) (a :: l)), (Permutation (a :: l0) (n :: l)), (Permutation (a :: l0) (n :: l0)), (Permutation (a :: l0) (a0 :: l)), (Permutation (a :: l0) (a0 :: l0)), (Permutation (a :: l0) (sort l)), (Permutation (a :: l0) (sort l0))
(Permutation (a :: l0) (insert a l)), (Permutation (a :: l0) (insert a l0)), (Permutation (a :: l0) (insert n l)), (Permutation (a :: l0) (insert n l0)), (Permutation (a :: l0) (insert a0 l)), (Permutation (a :: l0) (insert a0 l0)), (Permutation (a :: l0) (l ++ l)), (Permutation (a :: l0) (l ++ l0)), (Permutation (a :: l0) (l0 ++ l)), (Permutation (a :: l0) (l0 ++ l0))
(Permutation (a :: l0) []), (Permutation (n :: l) l), (Permutation (n :: l) l0), (Permutation (n :: l) (a :: l)), (Permutation (n :: l) (a :: l0)), (Permutation (n :: l) (n :: l0)), (Permutation (n :: l) (a0 :: l)), (Permutation (n :: l) (a0 :: l0)), (Permutation (n :: l) (sort l)), (Permutation (n :: l) (sort l0))
(Permutation (n :: l) (insert a l)), (Permutation (n :: l) (insert a l0)), (Permutation (n :: l) (insert n l)), (Permutation (n :: l) (insert n l0)), (Permutation (n :: l) (insert a0 l)), (Permutation (n :: l) (insert a0 l0)), (Permutation (n :: l) (l ++ l)), (Permutation (n :: l) (l ++ l0)), (Permutation (n :: l) (l0 ++ l)), (Permutation (n :: l) (l0 ++ l0))
(Permutation (n :: l) []), (Permutation (n :: l0) l), (Permutation (n :: l0) l0), (Permutation (n :: l0) (a :: l)), (Permutation (n :: l0) (a :: l0)), (Permutation (n :: l0) (n :: l)), (Permutation (n :: l0) (a0 :: l)), (Permutation (n :: l0) (a0 :: l0)), (Permutation (n :: l0) (sort l)), (Permutation (n :: l0) (sort l0))
(Permutation (n :: l0) (insert a l)), (Permutation (n :: l0) (insert a l0)), (Permutation (n :: l0) (insert n l)), (Permutation (n :: l0) (insert n l0)), (Permutation (n :: l0) (insert a0 l)), (Permutation (n :: l0) (insert a0 l0)), (Permutation (n :: l0) (l ++ l)), (Permutation (n :: l0) (l ++ l0)), (Permutation (n :: l0) (l0 ++ l)), (Permutation (n :: l0) (l0 ++ l0))
(Permutation (n :: l0) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) l0), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (a :: l0)), (Permutation (a0 :: l) (n :: l)), (Permutation (a0 :: l) (n :: l0)), (Permutation (a0 :: l) (a0 :: l0)), (Permutation (a0 :: l) (sort l)), (Permutation (a0 :: l) (sort l0))
(Permutation (a0 :: l) (insert a l)), (Permutation (a0 :: l) (insert a l0)), (Permutation (a0 :: l) (insert n l)), (Permutation (a0 :: l) (insert n l0)), (Permutation (a0 :: l) (insert a0 l)), (Permutation (a0 :: l) (insert a0 l0)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) (l ++ l0)), (Permutation (a0 :: l) (l0 ++ l)), (Permutation (a0 :: l) (l0 ++ l0))
(Permutation (a0 :: l) []), (Permutation (a0 :: l0) l), (Permutation (a0 :: l0) l0), (Permutation (a0 :: l0) (a :: l)), (Permutation (a0 :: l0) (a :: l0)), (Permutation (a0 :: l0) (n :: l)), (Permutation (a0 :: l0) (n :: l0)), (Permutation (a0 :: l0) (a0 :: l)), (Permutation (a0 :: l0) (sort l)), (Permutation (a0 :: l0) (sort l0))
(Permutation (a0 :: l0) (insert a l)), (Permutation (a0 :: l0) (insert a l0)), (Permutation (a0 :: l0) (insert n l)), (Permutation (a0 :: l0) (insert n l0)), (Permutation (a0 :: l0) (insert a0 l)), (Permutation (a0 :: l0) (insert a0 l0)), (Permutation (a0 :: l0) (l ++ l)), (Permutation (a0 :: l0) (l ++ l0)), (Permutation (a0 :: l0) (l0 ++ l)), (Permutation (a0 :: l0) (l0 ++ l0))
(Permutation (a0 :: l0) []), (Permutation (sort l) l), (Permutation (sort l) l0), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: l0)), (Permutation (sort l) (n :: l)), (Permutation (sort l) (n :: l0)), (Permutation (sort l) (a0 :: l)), (Permutation (sort l) (a0 :: l0)), (Permutation (sort l) (sort l0))
(Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a l0)), (Permutation (sort l) (insert n l)), (Permutation (sort l) (insert n l0)), (Permutation (sort l) (insert a0 l)), (Permutation (sort l) (insert a0 l0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ l0)), (Permutation (sort l) (l0 ++ l)), (Permutation (sort l) (l0 ++ l0))
(Permutation (sort l) []), (Permutation (sort l0) l), (Permutation (sort l0) l0), (Permutation (sort l0) (a :: l)), (Permutation (sort l0) (a :: l0)), (Permutation (sort l0) (n :: l)), (Permutation (sort l0) (n :: l0)), (Permutation (sort l0) (a0 :: l)), (Permutation (sort l0) (a0 :: l0)), (Permutation (sort l0) (sort l))
(Permutation (sort l0) (insert a l)), (Permutation (sort l0) (insert a l0)), (Permutation (sort l0) (insert n l)), (Permutation (sort l0) (insert n l0)), (Permutation (sort l0) (insert a0 l)), (Permutation (sort l0) (insert a0 l0)), (Permutation (sort l0) (l ++ l)), (Permutation (sort l0) (l ++ l0)), (Permutation (sort l0) (l0 ++ l)), (Permutation (sort l0) (l0 ++ l0))
(Permutation (sort l0) []), (Permutation (insert a l) l), (Permutation (insert a l) l0), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: l0)), (Permutation (insert a l) (n :: l)), (Permutation (insert a l) (n :: l0)), (Permutation (insert a l) (a0 :: l)), (Permutation (insert a l) (a0 :: l0)), (Permutation (insert a l) (sort l))
(Permutation (insert a l) (sort l0)), (Permutation (insert a l) (insert a l0)), (Permutation (insert a l) (insert n l)), (Permutation (insert a l) (insert n l0)), (Permutation (insert a l) (insert a0 l)), (Permutation (insert a l) (insert a0 l0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ l0)), (Permutation (insert a l) (l0 ++ l)), (Permutation (insert a l) (l0 ++ l0))
(Permutation (insert a l) []), (Permutation (insert a l0) l), (Permutation (insert a l0) l0), (Permutation (insert a l0) (a :: l)), (Permutation (insert a l0) (a :: l0)), (Permutation (insert a l0) (n :: l)), (Permutation (insert a l0) (n :: l0)), (Permutation (insert a l0) (a0 :: l)), (Permutation (insert a l0) (a0 :: l0)), (Permutation (insert a l0) (sort l))
(Permutation (insert a l0) (sort l0)), (Permutation (insert a l0) (insert a l)), (Permutation (insert a l0) (insert n l)), (Permutation (insert a l0) (insert n l0)), (Permutation (insert a l0) (insert a0 l)), (Permutation (insert a l0) (insert a0 l0)), (Permutation (insert a l0) (l ++ l)), (Permutation (insert a l0) (l ++ l0)), (Permutation (insert a l0) (l0 ++ l)), (Permutation (insert a l0) (l0 ++ l0))
(Permutation (insert a l0) []), (Permutation (insert n l) l), (Permutation (insert n l) l0), (Permutation (insert n l) (a :: l)), (Permutation (insert n l) (a :: l0)), (Permutation (insert n l) (n :: l)), (Permutation (insert n l) (n :: l0)), (Permutation (insert n l) (a0 :: l)), (Permutation (insert n l) (a0 :: l0)), (Permutation (insert n l) (sort l))
(Permutation (insert n l) (sort l0)), (Permutation (insert n l) (insert a l)), (Permutation (insert n l) (insert a l0)), (Permutation (insert n l) (insert n l0)), (Permutation (insert n l) (insert a0 l)), (Permutation (insert n l) (insert a0 l0)), (Permutation (insert n l) (l ++ l)), (Permutation (insert n l) (l ++ l0)), (Permutation (insert n l) (l0 ++ l)), (Permutation (insert n l) (l0 ++ l0))
(Permutation (insert n l) []), (Permutation (insert n l0) l), (Permutation (insert n l0) l0), (Permutation (insert n l0) (a :: l)), (Permutation (insert n l0) (a :: l0)), (Permutation (insert n l0) (n :: l)), (Permutation (insert n l0) (n :: l0)), (Permutation (insert n l0) (a0 :: l)), (Permutation (insert n l0) (a0 :: l0)), (Permutation (insert n l0) (sort l))
(Permutation (insert n l0) (sort l0)), (Permutation (insert n l0) (insert a l)), (Permutation (insert n l0) (insert a l0)), (Permutation (insert n l0) (insert n l)), (Permutation (insert n l0) (insert a0 l)), (Permutation (insert n l0) (insert a0 l0)), (Permutation (insert n l0) (l ++ l)), (Permutation (insert n l0) (l ++ l0)), (Permutation (insert n l0) (l0 ++ l)), (Permutation (insert n l0) (l0 ++ l0))
(Permutation (insert n l0) []), (Permutation (insert a0 l) l), (Permutation (insert a0 l) l0), (Permutation (insert a0 l) (a :: l)), (Permutation (insert a0 l) (a :: l0)), (Permutation (insert a0 l) (n :: l)), (Permutation (insert a0 l) (n :: l0)), (Permutation (insert a0 l) (a0 :: l)), (Permutation (insert a0 l) (a0 :: l0)), (Permutation (insert a0 l) (sort l))
(Permutation (insert a0 l) (sort l0)), (Permutation (insert a0 l) (insert a l)), (Permutation (insert a0 l) (insert a l0)), (Permutation (insert a0 l) (insert n l)), (Permutation (insert a0 l) (insert n l0)), (Permutation (insert a0 l) (insert a0 l0)), (Permutation (insert a0 l) (l ++ l)), (Permutation (insert a0 l) (l ++ l0)), (Permutation (insert a0 l) (l0 ++ l)), (Permutation (insert a0 l) (l0 ++ l0))
(Permutation (insert a0 l) []), (Permutation (insert a0 l0) l), (Permutation (insert a0 l0) l0), (Permutation (insert a0 l0) (a :: l)), (Permutation (insert a0 l0) (a :: l0)), (Permutation (insert a0 l0) (n :: l)), (Permutation (insert a0 l0) (n :: l0)), (Permutation (insert a0 l0) (a0 :: l)), (Permutation (insert a0 l0) (a0 :: l0)), (Permutation (insert a0 l0) (sort l))
(Permutation (insert a0 l0) (sort l0)), (Permutation (insert a0 l0) (insert a l)), (Permutation (insert a0 l0) (insert a l0)), (Permutation (insert a0 l0) (insert n l)), (Permutation (insert a0 l0) (insert n l0)), (Permutation (insert a0 l0) (insert a0 l)), (Permutation (insert a0 l0) (l ++ l)), (Permutation (insert a0 l0) (l ++ l0)), (Permutation (insert a0 l0) (l0 ++ l)), (Permutation (insert a0 l0) (l0 ++ l0))
(Permutation (insert a0 l0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) l0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: l0)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (n :: l0)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a0 :: l0)), (Permutation (l ++ l) (sort l))
(Permutation (l ++ l) (sort l0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a l0)), (Permutation (l ++ l) (insert n l)), (Permutation (l ++ l) (insert n l0)), (Permutation (l ++ l) (insert a0 l)), (Permutation (l ++ l) (insert a0 l0)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l0 ++ l0))
(Permutation (l ++ l) []), (Permutation (l ++ l0) l), (Permutation (l ++ l0) l0), (Permutation (l ++ l0) (a :: l)), (Permutation (l ++ l0) (a :: l0)), (Permutation (l ++ l0) (n :: l)), (Permutation (l ++ l0) (n :: l0)), (Permutation (l ++ l0) (a0 :: l)), (Permutation (l ++ l0) (a0 :: l0)), (Permutation (l ++ l0) (sort l))
(Permutation (l ++ l0) (sort l0)), (Permutation (l ++ l0) (insert a l)), (Permutation (l ++ l0) (insert a l0)), (Permutation (l ++ l0) (insert n l)), (Permutation (l ++ l0) (insert n l0)), (Permutation (l ++ l0) (insert a0 l)), (Permutation (l ++ l0) (insert a0 l0)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) (l0 ++ l)), (Permutation (l ++ l0) (l0 ++ l0))
(Permutation (l ++ l0) []), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) (a :: l)), (Permutation (l0 ++ l) (a :: l0)), (Permutation (l0 ++ l) (n :: l)), (Permutation (l0 ++ l) (n :: l0)), (Permutation (l0 ++ l) (a0 :: l)), (Permutation (l0 ++ l) (a0 :: l0)), (Permutation (l0 ++ l) (sort l))
(Permutation (l0 ++ l) (sort l0)), (Permutation (l0 ++ l) (insert a l)), (Permutation (l0 ++ l) (insert a l0)), (Permutation (l0 ++ l) (insert n l)), (Permutation (l0 ++ l) (insert n l0)), (Permutation (l0 ++ l) (insert a0 l)), (Permutation (l0 ++ l) (insert a0 l0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l0 ++ l0))
(Permutation (l0 ++ l) []), (Permutation (l0 ++ l0) l), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) (a :: l)), (Permutation (l0 ++ l0) (a :: l0)), (Permutation (l0 ++ l0) (n :: l)), (Permutation (l0 ++ l0) (n :: l0)), (Permutation (l0 ++ l0) (a0 :: l)), (Permutation (l0 ++ l0) (a0 :: l0)), (Permutation (l0 ++ l0) (sort l))
(Permutation (l0 ++ l0) (sort l0)), (Permutation (l0 ++ l0) (insert a l)), (Permutation (l0 ++ l0) (insert a l0)), (Permutation (l0 ++ l0) (insert n l)), (Permutation (l0 ++ l0) (insert n l0)), (Permutation (l0 ++ l0) (insert a0 l)), (Permutation (l0 ++ l0) (insert a0 l0)), (Permutation (l0 ++ l0) (l ++ l)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l0 ++ l))
(Permutation (l0 ++ l0) []), (Permutation [] l), (Permutation [] l0), (Permutation [] (a :: l)), (Permutation [] (a :: l0)), (Permutation [] (n :: l)), (Permutation [] (n :: l0)), (Permutation [] (a0 :: l)), (Permutation [] (a0 :: l0)), (Permutation [] (sort l))
(Permutation [] (sort l0)), (Permutation [] (insert a l)), (Permutation [] (insert a l0)), (Permutation [] (insert n l)), (Permutation [] (insert n l0)), (Permutation [] (insert a0 l)), (Permutation [] (insert a0 l0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ l0)), (Permutation [] (l0 ++ l))
(Permutation [] (l0 ++ l0)), (In a (a :: l)), (In a (a :: l0)), (In a (n :: l)), (In a (n :: l0)), (In a (a0 :: l)), (In a (a0 :: l0)), (In a (sort l)), (In a (sort l0)), (In a (insert a l))
(In a (insert a l0)), (In a (insert n l)), (In a (insert n l0)), (In a (insert a0 l)), (In a (insert a0 l0)), (In a (l ++ l)), (In a (l ++ l0)), (In a (l0 ++ l)), (In a (l0 ++ l0)), (In n (a :: l))
(In n (a :: l0)), (In n (n :: l)), (In n (n :: l0)), (In n (a0 :: l)), (In n (a0 :: l0)), (In n (sort l)), (In n (sort l0)), (In n (insert a l)), (In n (insert a l0)), (In n (insert n l))
(In n (insert n l0)), (In n (insert a0 l)), (In n (insert a0 l0)), (In n (l ++ l)), (In n (l ++ l0)), (In n (l0 ++ l)), (In n (l0 ++ l0)), (In a0 (a :: l)), (In a0 (a :: l0)), (In a0 (n :: l))
(In a0 (n :: l0)), (In a0 (a0 :: l)), (In a0 (a0 :: l0)), (In a0 (sort l)), (In a0 (sort l0)), (In a0 (insert a l)), (In a0 (insert a l0)), (In a0 (insert n l)), (In a0 (insert n l0)), (In a0 (insert a0 l))
(In a0 (insert a0 l0)), (In a0 (l ++ l)), (In a0 (l ++ l0)), (In a0 (l0 ++ l)), (In a0 (l0 ++ l0)), (In (length l) l), (In (length l) l0), (In (length l) (a :: l)), (In (length l) (a :: l0)), (In (length l) (n :: l))
(In (length l) (n :: l0)), (In (length l) (a0 :: l)), (In (length l) (a0 :: l0)), (In (length l) (sort l)), (In (length l) (sort l0)), (In (length l) (insert a l)), (In (length l) (insert a l0)), (In (length l) (insert n l)), (In (length l) (insert n l0)), (In (length l) (insert a0 l))
(In (length l) (insert a0 l0)), (In (length l) (l ++ l)), (In (length l) (l ++ l0)), (In (length l) (l0 ++ l)), (In (length l) (l0 ++ l0)), (In (length l0) l), (In (length l0) l0), (In (length l0) (a :: l)), (In (length l0) (a :: l0)), (In (length l0) (n :: l))
(In (length l0) (n :: l0)), (In (length l0) (a0 :: l)), (In (length l0) (a0 :: l0)), (In (length l0) (sort l)), (In (length l0) (sort l0)), (In (length l0) (insert a l)), (In (length l0) (insert a l0)), (In (length l0) (insert n l)), (In (length l0) (insert n l0)), (In (length l0) (insert a0 l))
(In (length l0) (insert a0 l0)), (In (length l0) (l ++ l)), (In (length l0) (l ++ l0)), (In (length l0) (l0 ++ l)), (In (length l0) (l0 ++ l0)), (a < length l), (a < length l0), (n < length l), (n < length l0), (a0 < length l)
(a0 < length l0), (length l < a), (length l < n), (length l < a0), (length l < length l0), (length l0 < a), (length l0 < n), (length l0 < a0), (length l0 < length l), (a <= length l)
(a <= length l0), (n <= length l), (n <= length l0), (a0 <= length l), (a0 <= length l0), (length l <= a), (length l <= n), (length l <= a0), (length l <= length l0), (length l0 <= a)
(length l0 <= n), (length l0 <= a0), (length l0 <= length l), (~ sortedd l), (~ sortedd l0), (~ sorted l), (~ sorted l0), (~ Permutation l l), (~ Permutation l l0), (~ Permutation l0 l)
(~ Permutation l0 l0), (~ In a l), (~ In a l0), (~ In n l), (~ In n l0), (~ In a0 l), (~ In a0 l0), (~ a < a), (~ a < n), (~ a < a0)
(~ n < a), (~ n < n), (~ n < a0), (~ a0 < a), (~ a0 < n), (~ a0 < a0), (~ a <= a), (~ a <= n), (~ a <= a0), (~ n <= a)
(~ n <= n), (~ n <= a0), (~ a0 <= a), (~ a0 <= n), (~ a0 <= a0), (l <> l), (l <> l0), (l0 <> l), (l0 <> l0), (a <> a)
(a <> n), (a <> a0), (n <> a), (n <> n), (n <> a0), (a0 <> a), (a0 <> n), (a0 <> a0), (None = Some l), (None = Some l0)
(a :: l = l), (a :: l = l0), (a :: l = sort l), (a :: l = sort l0), (a :: l = insert a l), (a :: l = insert a l0), (a :: l = insert n l), (a :: l = insert n l0), (a :: l = insert a0 l), (a :: l = insert a0 l0)
(a :: l = l ++ l), (a :: l = l ++ l0), (a :: l = l0 ++ l), (a :: l = l0 ++ l0), (a :: l = []), (a :: l0 = l), (a :: l0 = l0), (a :: l0 = sort l), (a :: l0 = sort l0), (a :: l0 = insert a l)
(a :: l0 = insert a l0), (a :: l0 = insert n l), (a :: l0 = insert n l0), (a :: l0 = insert a0 l), (a :: l0 = insert a0 l0), (a :: l0 = l ++ l), (a :: l0 = l ++ l0), (a :: l0 = l0 ++ l), (a :: l0 = l0 ++ l0), (a :: l0 = [])
(n :: l = l), (n :: l = l0), (n :: l = sort l), (n :: l = sort l0), (n :: l = insert a l), (n :: l = insert a l0), (n :: l = insert n l), (n :: l = insert n l0), (n :: l = insert a0 l), (n :: l = insert a0 l0)
(n :: l = l ++ l), (n :: l = l ++ l0), (n :: l = l0 ++ l), (n :: l = l0 ++ l0), (n :: l = []), (n :: l0 = l), (n :: l0 = l0), (n :: l0 = sort l), (n :: l0 = sort l0), (n :: l0 = insert a l)
(n :: l0 = insert a l0), (n :: l0 = insert n l), (n :: l0 = insert n l0), (n :: l0 = insert a0 l), (n :: l0 = insert a0 l0), (n :: l0 = l ++ l), (n :: l0 = l ++ l0), (n :: l0 = l0 ++ l), (n :: l0 = l0 ++ l0), (n :: l0 = [])
(a0 :: l = l), (a0 :: l = l0), (a0 :: l = sort l), (a0 :: l = sort l0), (a0 :: l = insert a l), (a0 :: l = insert a l0), (a0 :: l = insert n l), (a0 :: l = insert n l0), (a0 :: l = insert a0 l), (a0 :: l = insert a0 l0)
(a0 :: l = l ++ l), (a0 :: l = l ++ l0), (a0 :: l = l0 ++ l), (a0 :: l = l0 ++ l0), (a0 :: l = []), (a0 :: l0 = l), (a0 :: l0 = l0), (a0 :: l0 = sort l), (a0 :: l0 = sort l0), (a0 :: l0 = insert a l)
(a0 :: l0 = insert a l0), (a0 :: l0 = insert n l), (a0 :: l0 = insert n l0), (a0 :: l0 = insert a0 l), (a0 :: l0 = insert a0 l0), (a0 :: l0 = l ++ l), (a0 :: l0 = l ++ l0), (a0 :: l0 = l0 ++ l), (a0 :: l0 = l0 ++ l0), (a0 :: l0 = [])
(sort l = l), (sort l = l0), (sort l = insert a l), (sort l = insert a l0), (sort l = insert n l), (sort l = insert n l0), (sort l = insert a0 l), (sort l = insert a0 l0), (sort l = l ++ l), (sort l = l ++ l0)
(sort l = l0 ++ l), (sort l = l0 ++ l0), (sort l0 = l), (sort l0 = l0), (sort l0 = insert a l), (sort l0 = insert a l0), (sort l0 = insert n l), (sort l0 = insert n l0), (sort l0 = insert a0 l), (sort l0 = insert a0 l0)
(sort l0 = l ++ l), (sort l0 = l ++ l0), (sort l0 = l0 ++ l), (sort l0 = l0 ++ l0), (insert a l = l), (insert a l = l0), (insert a l = l ++ l), (insert a l = l ++ l0), (insert a l = l0 ++ l), (insert a l = l0 ++ l0)
(insert a l0 = l), (insert a l0 = l0), (insert a l0 = l ++ l), (insert a l0 = l ++ l0), (insert a l0 = l0 ++ l), (insert a l0 = l0 ++ l0), (insert n l = l), (insert n l = l0), (insert n l = l ++ l), (insert n l = l ++ l0)
(insert n l = l0 ++ l), (insert n l = l0 ++ l0), (insert n l0 = l), (insert n l0 = l0), (insert n l0 = l ++ l), (insert n l0 = l ++ l0), (insert n l0 = l0 ++ l), (insert n l0 = l0 ++ l0), (insert a0 l = l), (insert a0 l = l0)
(insert a0 l = l ++ l), (insert a0 l = l ++ l0), (insert a0 l = l0 ++ l), (insert a0 l = l0 ++ l0), (insert a0 l0 = l), (insert a0 l0 = l0), (insert a0 l0 = l ++ l), (insert a0 l0 = l ++ l0), (insert a0 l0 = l0 ++ l), (insert a0 l0 = l0 ++ l0)
(l ++ l = l), (l ++ l = l0), (l ++ l0 = l), (l ++ l0 = l0), (l0 ++ l = l), (l0 ++ l = l0), (l0 ++ l0 = l), (l0 ++ l0 = l0), ([] = l), ([] = l0)
([] = sort l), ([] = sort l0), ([] = insert a l), ([] = insert a l0), ([] = insert n l), ([] = insert n l0), ([] = insert a0 l), ([] = insert a0 l0), ([] = l ++ l), ([] = l ++ l0)
([] = l0 ++ l), ([] = l0 ++ l0), (None = Some a), (None = Some n), (None = Some a0), (length l = a), (length l = n), (length l = a0), (length l0 = a), (length l0 = n)
(length l0 = a0)

Label: 3 (3)
(sortedd l), (sortedd l0), (sortedd gv0), (sorted l), (sorted l0), (sorted gv0), (Permutation l l), (Permutation l l0), (Permutation l gv0), (Permutation l0 l)
(Permutation l0 l0), (Permutation l0 gv0), (Permutation gv0 l), (Permutation gv0 l0), (Permutation gv0 gv0), (In a0 l), (In a0 l0), (In a0 gv0), (In a l), (In a l0)
(In a gv0), (In n l), (In n l0), (In n gv0), (a0 < a0), (a0 < a), (a0 < n), (a < a0), (a < a), (a < n)
(n < a0), (n < a), (n < n), (a0 <= a0), (a0 <= a), (a0 <= n), (a <= a0), (a <= a), (a <= n), (n <= a0)
(n <= a), (n <= n), (a0 = a0), (a0 = a), (a0 = n), (a = a0), (a = a), (a = n), (n = a0), (n = a)
(n = n), (l = l), (l = l0), (l = gv0), (l0 = l), (l0 = l0), (l0 = gv0), (gv0 = l), (gv0 = l0), (gv0 = gv0)
(sortedd (a0 :: l)), (sortedd (a0 :: l0)), (sortedd (a0 :: gv0)), (sortedd (a :: l)), (sortedd (a :: l0)), (sortedd (a :: gv0)), (sortedd (n :: l)), (sortedd (n :: l0)), (sortedd (n :: gv0)), (sortedd (sort l))
(sortedd (sort l0)), (sortedd (sort gv0)), (sortedd (insert a0 l)), (sortedd (insert a0 l0)), (sortedd (insert a0 gv0)), (sortedd (insert a l)), (sortedd (insert a l0)), (sortedd (insert a gv0)), (sortedd (insert n l)), (sortedd (insert n l0))
(sortedd (insert n gv0)), (sortedd (l ++ l)), (sortedd (l ++ l0)), (sortedd (l ++ gv0)), (sortedd (l0 ++ l)), (sortedd (l0 ++ l0)), (sortedd (l0 ++ gv0)), (sortedd (gv0 ++ l)), (sortedd (gv0 ++ l0)), (sortedd (gv0 ++ gv0))
(sortedd []), (sorted (a0 :: l)), (sorted (a0 :: l0)), (sorted (a0 :: gv0)), (sorted (a :: l)), (sorted (a :: l0)), (sorted (a :: gv0)), (sorted (n :: l)), (sorted (n :: l0)), (sorted (n :: gv0))
(sorted (sort l)), (sorted (sort l0)), (sorted (sort gv0)), (sorted (insert a0 l)), (sorted (insert a0 l0)), (sorted (insert a0 gv0)), (sorted (insert a l)), (sorted (insert a l0)), (sorted (insert a gv0)), (sorted (insert n l))
(sorted (insert n l0)), (sorted (insert n gv0)), (sorted (l ++ l)), (sorted (l ++ l0)), (sorted (l ++ gv0)), (sorted (l0 ++ l)), (sorted (l0 ++ l0)), (sorted (l0 ++ gv0)), (sorted (gv0 ++ l)), (sorted (gv0 ++ l0))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation l (a0 :: l)), (Permutation l (a0 :: l0)), (Permutation l (a0 :: gv0)), (Permutation l (a :: l)), (Permutation l (a :: l0)), (Permutation l (a :: gv0)), (Permutation l (n :: l)), (Permutation l (n :: l0))
(Permutation l (n :: gv0)), (Permutation l (sort l)), (Permutation l (sort l0)), (Permutation l (sort gv0)), (Permutation l (insert a0 l)), (Permutation l (insert a0 l0)), (Permutation l (insert a0 gv0)), (Permutation l (insert a l)), (Permutation l (insert a l0)), (Permutation l (insert a gv0))
(Permutation l (insert n l)), (Permutation l (insert n l0)), (Permutation l (insert n gv0)), (Permutation l (l ++ l)), (Permutation l (l ++ l0)), (Permutation l (l ++ gv0)), (Permutation l (l0 ++ l)), (Permutation l (l0 ++ l0)), (Permutation l (l0 ++ gv0)), (Permutation l (gv0 ++ l))
(Permutation l (gv0 ++ l0)), (Permutation l (gv0 ++ gv0)), (Permutation l []), (Permutation l0 (a0 :: l)), (Permutation l0 (a0 :: l0)), (Permutation l0 (a0 :: gv0)), (Permutation l0 (a :: l)), (Permutation l0 (a :: l0)), (Permutation l0 (a :: gv0)), (Permutation l0 (n :: l))
(Permutation l0 (n :: l0)), (Permutation l0 (n :: gv0)), (Permutation l0 (sort l)), (Permutation l0 (sort l0)), (Permutation l0 (sort gv0)), (Permutation l0 (insert a0 l)), (Permutation l0 (insert a0 l0)), (Permutation l0 (insert a0 gv0)), (Permutation l0 (insert a l)), (Permutation l0 (insert a l0))
(Permutation l0 (insert a gv0)), (Permutation l0 (insert n l)), (Permutation l0 (insert n l0)), (Permutation l0 (insert n gv0)), (Permutation l0 (l ++ l)), (Permutation l0 (l ++ l0)), (Permutation l0 (l ++ gv0)), (Permutation l0 (l0 ++ l)), (Permutation l0 (l0 ++ l0)), (Permutation l0 (l0 ++ gv0))
(Permutation l0 (gv0 ++ l)), (Permutation l0 (gv0 ++ l0)), (Permutation l0 (gv0 ++ gv0)), (Permutation l0 []), (Permutation gv0 (a0 :: l)), (Permutation gv0 (a0 :: l0)), (Permutation gv0 (a0 :: gv0)), (Permutation gv0 (a :: l)), (Permutation gv0 (a :: l0)), (Permutation gv0 (a :: gv0))
(Permutation gv0 (n :: l)), (Permutation gv0 (n :: l0)), (Permutation gv0 (n :: gv0)), (Permutation gv0 (sort l)), (Permutation gv0 (sort l0)), (Permutation gv0 (sort gv0)), (Permutation gv0 (insert a0 l)), (Permutation gv0 (insert a0 l0)), (Permutation gv0 (insert a0 gv0)), (Permutation gv0 (insert a l))
(Permutation gv0 (insert a l0)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (insert n l)), (Permutation gv0 (insert n l0)), (Permutation gv0 (insert n gv0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ l0)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (l0 ++ l)), (Permutation gv0 (l0 ++ l0))
(Permutation gv0 (l0 ++ gv0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ l0)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) l0), (Permutation (a0 :: l) gv0), (Permutation (a0 :: l) (a0 :: l0)), (Permutation (a0 :: l) (a0 :: gv0))
(Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (a :: l0)), (Permutation (a0 :: l) (a :: gv0)), (Permutation (a0 :: l) (n :: l)), (Permutation (a0 :: l) (n :: l0)), (Permutation (a0 :: l) (n :: gv0)), (Permutation (a0 :: l) (sort l)), (Permutation (a0 :: l) (sort l0)), (Permutation (a0 :: l) (sort gv0)), (Permutation (a0 :: l) (insert a0 l))
(Permutation (a0 :: l) (insert a0 l0)), (Permutation (a0 :: l) (insert a0 gv0)), (Permutation (a0 :: l) (insert a l)), (Permutation (a0 :: l) (insert a l0)), (Permutation (a0 :: l) (insert a gv0)), (Permutation (a0 :: l) (insert n l)), (Permutation (a0 :: l) (insert n l0)), (Permutation (a0 :: l) (insert n gv0)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) (l ++ l0))
(Permutation (a0 :: l) (l ++ gv0)), (Permutation (a0 :: l) (l0 ++ l)), (Permutation (a0 :: l) (l0 ++ l0)), (Permutation (a0 :: l) (l0 ++ gv0)), (Permutation (a0 :: l) (gv0 ++ l)), (Permutation (a0 :: l) (gv0 ++ l0)), (Permutation (a0 :: l) (gv0 ++ gv0)), (Permutation (a0 :: l) []), (Permutation (a0 :: l0) l), (Permutation (a0 :: l0) l0)
(Permutation (a0 :: l0) gv0), (Permutation (a0 :: l0) (a0 :: l)), (Permutation (a0 :: l0) (a0 :: gv0)), (Permutation (a0 :: l0) (a :: l)), (Permutation (a0 :: l0) (a :: l0)), (Permutation (a0 :: l0) (a :: gv0)), (Permutation (a0 :: l0) (n :: l)), (Permutation (a0 :: l0) (n :: l0)), (Permutation (a0 :: l0) (n :: gv0)), (Permutation (a0 :: l0) (sort l))
(Permutation (a0 :: l0) (sort l0)), (Permutation (a0 :: l0) (sort gv0)), (Permutation (a0 :: l0) (insert a0 l)), (Permutation (a0 :: l0) (insert a0 l0)), (Permutation (a0 :: l0) (insert a0 gv0)), (Permutation (a0 :: l0) (insert a l)), (Permutation (a0 :: l0) (insert a l0)), (Permutation (a0 :: l0) (insert a gv0)), (Permutation (a0 :: l0) (insert n l)), (Permutation (a0 :: l0) (insert n l0))
(Permutation (a0 :: l0) (insert n gv0)), (Permutation (a0 :: l0) (l ++ l)), (Permutation (a0 :: l0) (l ++ l0)), (Permutation (a0 :: l0) (l ++ gv0)), (Permutation (a0 :: l0) (l0 ++ l)), (Permutation (a0 :: l0) (l0 ++ l0)), (Permutation (a0 :: l0) (l0 ++ gv0)), (Permutation (a0 :: l0) (gv0 ++ l)), (Permutation (a0 :: l0) (gv0 ++ l0)), (Permutation (a0 :: l0) (gv0 ++ gv0))
(Permutation (a0 :: l0) []), (Permutation (a0 :: gv0) l), (Permutation (a0 :: gv0) l0), (Permutation (a0 :: gv0) gv0), (Permutation (a0 :: gv0) (a0 :: l)), (Permutation (a0 :: gv0) (a0 :: l0)), (Permutation (a0 :: gv0) (a :: l)), (Permutation (a0 :: gv0) (a :: l0)), (Permutation (a0 :: gv0) (a :: gv0)), (Permutation (a0 :: gv0) (n :: l))
(Permutation (a0 :: gv0) (n :: l0)), (Permutation (a0 :: gv0) (n :: gv0)), (Permutation (a0 :: gv0) (sort l)), (Permutation (a0 :: gv0) (sort l0)), (Permutation (a0 :: gv0) (sort gv0)), (Permutation (a0 :: gv0) (insert a0 l)), (Permutation (a0 :: gv0) (insert a0 l0)), (Permutation (a0 :: gv0) (insert a0 gv0)), (Permutation (a0 :: gv0) (insert a l)), (Permutation (a0 :: gv0) (insert a l0))
(Permutation (a0 :: gv0) (insert a gv0)), (Permutation (a0 :: gv0) (insert n l)), (Permutation (a0 :: gv0) (insert n l0)), (Permutation (a0 :: gv0) (insert n gv0)), (Permutation (a0 :: gv0) (l ++ l)), (Permutation (a0 :: gv0) (l ++ l0)), (Permutation (a0 :: gv0) (l ++ gv0)), (Permutation (a0 :: gv0) (l0 ++ l)), (Permutation (a0 :: gv0) (l0 ++ l0)), (Permutation (a0 :: gv0) (l0 ++ gv0))
(Permutation (a0 :: gv0) (gv0 ++ l)), (Permutation (a0 :: gv0) (gv0 ++ l0)), (Permutation (a0 :: gv0) (gv0 ++ gv0)), (Permutation (a0 :: gv0) []), (Permutation (a :: l) l), (Permutation (a :: l) l0), (Permutation (a :: l) gv0), (Permutation (a :: l) (a0 :: l)), (Permutation (a :: l) (a0 :: l0)), (Permutation (a :: l) (a0 :: gv0))
(Permutation (a :: l) (a :: l0)), (Permutation (a :: l) (a :: gv0)), (Permutation (a :: l) (n :: l)), (Permutation (a :: l) (n :: l0)), (Permutation (a :: l) (n :: gv0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort l0)), (Permutation (a :: l) (sort gv0)), (Permutation (a :: l) (insert a0 l)), (Permutation (a :: l) (insert a0 l0))
(Permutation (a :: l) (insert a0 gv0)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a l0)), (Permutation (a :: l) (insert a gv0)), (Permutation (a :: l) (insert n l)), (Permutation (a :: l) (insert n l0)), (Permutation (a :: l) (insert n gv0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ l0)), (Permutation (a :: l) (l ++ gv0))
(Permutation (a :: l) (l0 ++ l)), (Permutation (a :: l) (l0 ++ l0)), (Permutation (a :: l) (l0 ++ gv0)), (Permutation (a :: l) (gv0 ++ l)), (Permutation (a :: l) (gv0 ++ l0)), (Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) []), (Permutation (a :: l0) l), (Permutation (a :: l0) l0), (Permutation (a :: l0) gv0)
(Permutation (a :: l0) (a0 :: l)), (Permutation (a :: l0) (a0 :: l0)), (Permutation (a :: l0) (a0 :: gv0)), (Permutation (a :: l0) (a :: l)), (Permutation (a :: l0) (a :: gv0)), (Permutation (a :: l0) (n :: l)), (Permutation (a :: l0) (n :: l0)), (Permutation (a :: l0) (n :: gv0)), (Permutation (a :: l0) (sort l)), (Permutation (a :: l0) (sort l0))
(Permutation (a :: l0) (sort gv0)), (Permutation (a :: l0) (insert a0 l)), (Permutation (a :: l0) (insert a0 l0)), (Permutation (a :: l0) (insert a0 gv0)), (Permutation (a :: l0) (insert a l)), (Permutation (a :: l0) (insert a l0)), (Permutation (a :: l0) (insert a gv0)), (Permutation (a :: l0) (insert n l)), (Permutation (a :: l0) (insert n l0)), (Permutation (a :: l0) (insert n gv0))
(Permutation (a :: l0) (l ++ l)), (Permutation (a :: l0) (l ++ l0)), (Permutation (a :: l0) (l ++ gv0)), (Permutation (a :: l0) (l0 ++ l)), (Permutation (a :: l0) (l0 ++ l0)), (Permutation (a :: l0) (l0 ++ gv0)), (Permutation (a :: l0) (gv0 ++ l)), (Permutation (a :: l0) (gv0 ++ l0)), (Permutation (a :: l0) (gv0 ++ gv0)), (Permutation (a :: l0) [])
(Permutation (a :: gv0) l), (Permutation (a :: gv0) l0), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a0 :: l)), (Permutation (a :: gv0) (a0 :: l0)), (Permutation (a :: gv0) (a0 :: gv0)), (Permutation (a :: gv0) (a :: l)), (Permutation (a :: gv0) (a :: l0)), (Permutation (a :: gv0) (n :: l)), (Permutation (a :: gv0) (n :: l0))
(Permutation (a :: gv0) (n :: gv0)), (Permutation (a :: gv0) (sort l)), (Permutation (a :: gv0) (sort l0)), (Permutation (a :: gv0) (sort gv0)), (Permutation (a :: gv0) (insert a0 l)), (Permutation (a :: gv0) (insert a0 l0)), (Permutation (a :: gv0) (insert a0 gv0)), (Permutation (a :: gv0) (insert a l)), (Permutation (a :: gv0) (insert a l0)), (Permutation (a :: gv0) (insert a gv0))
(Permutation (a :: gv0) (insert n l)), (Permutation (a :: gv0) (insert n l0)), (Permutation (a :: gv0) (insert n gv0)), (Permutation (a :: gv0) (l ++ l)), (Permutation (a :: gv0) (l ++ l0)), (Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (l0 ++ l)), (Permutation (a :: gv0) (l0 ++ l0)), (Permutation (a :: gv0) (l0 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l))
(Permutation (a :: gv0) (gv0 ++ l0)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (n :: l) l), (Permutation (n :: l) l0), (Permutation (n :: l) gv0), (Permutation (n :: l) (a0 :: l)), (Permutation (n :: l) (a0 :: l0)), (Permutation (n :: l) (a0 :: gv0)), (Permutation (n :: l) (a :: l))
(Permutation (n :: l) (a :: l0)), (Permutation (n :: l) (a :: gv0)), (Permutation (n :: l) (n :: l0)), (Permutation (n :: l) (n :: gv0)), (Permutation (n :: l) (sort l)), (Permutation (n :: l) (sort l0)), (Permutation (n :: l) (sort gv0)), (Permutation (n :: l) (insert a0 l)), (Permutation (n :: l) (insert a0 l0)), (Permutation (n :: l) (insert a0 gv0))
(Permutation (n :: l) (insert a l)), (Permutation (n :: l) (insert a l0)), (Permutation (n :: l) (insert a gv0)), (Permutation (n :: l) (insert n l)), (Permutation (n :: l) (insert n l0)), (Permutation (n :: l) (insert n gv0)), (Permutation (n :: l) (l ++ l)), (Permutation (n :: l) (l ++ l0)), (Permutation (n :: l) (l ++ gv0)), (Permutation (n :: l) (l0 ++ l))
(Permutation (n :: l) (l0 ++ l0)), (Permutation (n :: l) (l0 ++ gv0)), (Permutation (n :: l) (gv0 ++ l)), (Permutation (n :: l) (gv0 ++ l0)), (Permutation (n :: l) (gv0 ++ gv0)), (Permutation (n :: l) []), (Permutation (n :: l0) l), (Permutation (n :: l0) l0), (Permutation (n :: l0) gv0), (Permutation (n :: l0) (a0 :: l))
(Permutation (n :: l0) (a0 :: l0)), (Permutation (n :: l0) (a0 :: gv0)), (Permutation (n :: l0) (a :: l)), (Permutation (n :: l0) (a :: l0)), (Permutation (n :: l0) (a :: gv0)), (Permutation (n :: l0) (n :: l)), (Permutation (n :: l0) (n :: gv0)), (Permutation (n :: l0) (sort l)), (Permutation (n :: l0) (sort l0)), (Permutation (n :: l0) (sort gv0))
(Permutation (n :: l0) (insert a0 l)), (Permutation (n :: l0) (insert a0 l0)), (Permutation (n :: l0) (insert a0 gv0)), (Permutation (n :: l0) (insert a l)), (Permutation (n :: l0) (insert a l0)), (Permutation (n :: l0) (insert a gv0)), (Permutation (n :: l0) (insert n l)), (Permutation (n :: l0) (insert n l0)), (Permutation (n :: l0) (insert n gv0)), (Permutation (n :: l0) (l ++ l))
(Permutation (n :: l0) (l ++ l0)), (Permutation (n :: l0) (l ++ gv0)), (Permutation (n :: l0) (l0 ++ l)), (Permutation (n :: l0) (l0 ++ l0)), (Permutation (n :: l0) (l0 ++ gv0)), (Permutation (n :: l0) (gv0 ++ l)), (Permutation (n :: l0) (gv0 ++ l0)), (Permutation (n :: l0) (gv0 ++ gv0)), (Permutation (n :: l0) []), (Permutation (n :: gv0) l)
(Permutation (n :: gv0) l0), (Permutation (n :: gv0) gv0), (Permutation (n :: gv0) (a0 :: l)), (Permutation (n :: gv0) (a0 :: l0)), (Permutation (n :: gv0) (a0 :: gv0)), (Permutation (n :: gv0) (a :: l)), (Permutation (n :: gv0) (a :: l0)), (Permutation (n :: gv0) (a :: gv0)), (Permutation (n :: gv0) (n :: l)), (Permutation (n :: gv0) (n :: l0))
(Permutation (n :: gv0) (sort l)), (Permutation (n :: gv0) (sort l0)), (Permutation (n :: gv0) (sort gv0)), (Permutation (n :: gv0) (insert a0 l)), (Permutation (n :: gv0) (insert a0 l0)), (Permutation (n :: gv0) (insert a0 gv0)), (Permutation (n :: gv0) (insert a l)), (Permutation (n :: gv0) (insert a l0)), (Permutation (n :: gv0) (insert a gv0)), (Permutation (n :: gv0) (insert n l))
(Permutation (n :: gv0) (insert n l0)), (Permutation (n :: gv0) (insert n gv0)), (Permutation (n :: gv0) (l ++ l)), (Permutation (n :: gv0) (l ++ l0)), (Permutation (n :: gv0) (l ++ gv0)), (Permutation (n :: gv0) (l0 ++ l)), (Permutation (n :: gv0) (l0 ++ l0)), (Permutation (n :: gv0) (l0 ++ gv0)), (Permutation (n :: gv0) (gv0 ++ l)), (Permutation (n :: gv0) (gv0 ++ l0))
(Permutation (n :: gv0) (gv0 ++ gv0)), (Permutation (n :: gv0) []), (Permutation (sort l) l), (Permutation (sort l) l0), (Permutation (sort l) gv0), (Permutation (sort l) (a0 :: l)), (Permutation (sort l) (a0 :: l0)), (Permutation (sort l) (a0 :: gv0)), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: l0))
(Permutation (sort l) (a :: gv0)), (Permutation (sort l) (n :: l)), (Permutation (sort l) (n :: l0)), (Permutation (sort l) (n :: gv0)), (Permutation (sort l) (sort l0)), (Permutation (sort l) (sort gv0)), (Permutation (sort l) (insert a0 l)), (Permutation (sort l) (insert a0 l0)), (Permutation (sort l) (insert a0 gv0)), (Permutation (sort l) (insert a l))
(Permutation (sort l) (insert a l0)), (Permutation (sort l) (insert a gv0)), (Permutation (sort l) (insert n l)), (Permutation (sort l) (insert n l0)), (Permutation (sort l) (insert n gv0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ l0)), (Permutation (sort l) (l ++ gv0)), (Permutation (sort l) (l0 ++ l)), (Permutation (sort l) (l0 ++ l0))
(Permutation (sort l) (l0 ++ gv0)), (Permutation (sort l) (gv0 ++ l)), (Permutation (sort l) (gv0 ++ l0)), (Permutation (sort l) (gv0 ++ gv0)), (Permutation (sort l) []), (Permutation (sort l0) l), (Permutation (sort l0) l0), (Permutation (sort l0) gv0), (Permutation (sort l0) (a0 :: l)), (Permutation (sort l0) (a0 :: l0))
(Permutation (sort l0) (a0 :: gv0)), (Permutation (sort l0) (a :: l)), (Permutation (sort l0) (a :: l0)), (Permutation (sort l0) (a :: gv0)), (Permutation (sort l0) (n :: l)), (Permutation (sort l0) (n :: l0)), (Permutation (sort l0) (n :: gv0)), (Permutation (sort l0) (sort l)), (Permutation (sort l0) (sort gv0)), (Permutation (sort l0) (insert a0 l))
(Permutation (sort l0) (insert a0 l0)), (Permutation (sort l0) (insert a0 gv0)), (Permutation (sort l0) (insert a l)), (Permutation (sort l0) (insert a l0)), (Permutation (sort l0) (insert a gv0)), (Permutation (sort l0) (insert n l)), (Permutation (sort l0) (insert n l0)), (Permutation (sort l0) (insert n gv0)), (Permutation (sort l0) (l ++ l)), (Permutation (sort l0) (l ++ l0))
(Permutation (sort l0) (l ++ gv0)), (Permutation (sort l0) (l0 ++ l)), (Permutation (sort l0) (l0 ++ l0)), (Permutation (sort l0) (l0 ++ gv0)), (Permutation (sort l0) (gv0 ++ l)), (Permutation (sort l0) (gv0 ++ l0)), (Permutation (sort l0) (gv0 ++ gv0)), (Permutation (sort l0) []), (Permutation (sort gv0) l), (Permutation (sort gv0) l0)
(Permutation (sort gv0) gv0), (Permutation (sort gv0) (a0 :: l)), (Permutation (sort gv0) (a0 :: l0)), (Permutation (sort gv0) (a0 :: gv0)), (Permutation (sort gv0) (a :: l)), (Permutation (sort gv0) (a :: l0)), (Permutation (sort gv0) (a :: gv0)), (Permutation (sort gv0) (n :: l)), (Permutation (sort gv0) (n :: l0)), (Permutation (sort gv0) (n :: gv0))
(Permutation (sort gv0) (sort l)), (Permutation (sort gv0) (sort l0)), (Permutation (sort gv0) (insert a0 l)), (Permutation (sort gv0) (insert a0 l0)), (Permutation (sort gv0) (insert a0 gv0)), (Permutation (sort gv0) (insert a l)), (Permutation (sort gv0) (insert a l0)), (Permutation (sort gv0) (insert a gv0)), (Permutation (sort gv0) (insert n l)), (Permutation (sort gv0) (insert n l0))
(Permutation (sort gv0) (insert n gv0)), (Permutation (sort gv0) (l ++ l)), (Permutation (sort gv0) (l ++ l0)), (Permutation (sort gv0) (l ++ gv0)), (Permutation (sort gv0) (l0 ++ l)), (Permutation (sort gv0) (l0 ++ l0)), (Permutation (sort gv0) (l0 ++ gv0)), (Permutation (sort gv0) (gv0 ++ l)), (Permutation (sort gv0) (gv0 ++ l0)), (Permutation (sort gv0) (gv0 ++ gv0))
(Permutation (sort gv0) []), (Permutation (insert a0 l) l), (Permutation (insert a0 l) l0), (Permutation (insert a0 l) gv0), (Permutation (insert a0 l) (a0 :: l)), (Permutation (insert a0 l) (a0 :: l0)), (Permutation (insert a0 l) (a0 :: gv0)), (Permutation (insert a0 l) (a :: l)), (Permutation (insert a0 l) (a :: l0)), (Permutation (insert a0 l) (a :: gv0))
(Permutation (insert a0 l) (n :: l)), (Permutation (insert a0 l) (n :: l0)), (Permutation (insert a0 l) (n :: gv0)), (Permutation (insert a0 l) (sort l)), (Permutation (insert a0 l) (sort l0)), (Permutation (insert a0 l) (sort gv0)), (Permutation (insert a0 l) (insert a0 l0)), (Permutation (insert a0 l) (insert a0 gv0)), (Permutation (insert a0 l) (insert a l)), (Permutation (insert a0 l) (insert a l0))
(Permutation (insert a0 l) (insert a gv0)), (Permutation (insert a0 l) (insert n l)), (Permutation (insert a0 l) (insert n l0)), (Permutation (insert a0 l) (insert n gv0)), (Permutation (insert a0 l) (l ++ l)), (Permutation (insert a0 l) (l ++ l0)), (Permutation (insert a0 l) (l ++ gv0)), (Permutation (insert a0 l) (l0 ++ l)), (Permutation (insert a0 l) (l0 ++ l0)), (Permutation (insert a0 l) (l0 ++ gv0))
(Permutation (insert a0 l) (gv0 ++ l)), (Permutation (insert a0 l) (gv0 ++ l0)), (Permutation (insert a0 l) (gv0 ++ gv0)), (Permutation (insert a0 l) []), (Permutation (insert a0 l0) l), (Permutation (insert a0 l0) l0), (Permutation (insert a0 l0) gv0), (Permutation (insert a0 l0) (a0 :: l)), (Permutation (insert a0 l0) (a0 :: l0)), (Permutation (insert a0 l0) (a0 :: gv0))
(Permutation (insert a0 l0) (a :: l)), (Permutation (insert a0 l0) (a :: l0)), (Permutation (insert a0 l0) (a :: gv0)), (Permutation (insert a0 l0) (n :: l)), (Permutation (insert a0 l0) (n :: l0)), (Permutation (insert a0 l0) (n :: gv0)), (Permutation (insert a0 l0) (sort l)), (Permutation (insert a0 l0) (sort l0)), (Permutation (insert a0 l0) (sort gv0)), (Permutation (insert a0 l0) (insert a0 l))
(Permutation (insert a0 l0) (insert a0 gv0)), (Permutation (insert a0 l0) (insert a l)), (Permutation (insert a0 l0) (insert a l0)), (Permutation (insert a0 l0) (insert a gv0)), (Permutation (insert a0 l0) (insert n l)), (Permutation (insert a0 l0) (insert n l0)), (Permutation (insert a0 l0) (insert n gv0)), (Permutation (insert a0 l0) (l ++ l)), (Permutation (insert a0 l0) (l ++ l0)), (Permutation (insert a0 l0) (l ++ gv0))
(Permutation (insert a0 l0) (l0 ++ l)), (Permutation (insert a0 l0) (l0 ++ l0)), (Permutation (insert a0 l0) (l0 ++ gv0)), (Permutation (insert a0 l0) (gv0 ++ l)), (Permutation (insert a0 l0) (gv0 ++ l0)), (Permutation (insert a0 l0) (gv0 ++ gv0)), (Permutation (insert a0 l0) []), (Permutation (insert a0 gv0) l), (Permutation (insert a0 gv0) l0), (Permutation (insert a0 gv0) gv0)
(Permutation (insert a0 gv0) (a0 :: l)), (Permutation (insert a0 gv0) (a0 :: l0)), (Permutation (insert a0 gv0) (a0 :: gv0)), (Permutation (insert a0 gv0) (a :: l)), (Permutation (insert a0 gv0) (a :: l0)), (Permutation (insert a0 gv0) (a :: gv0)), (Permutation (insert a0 gv0) (n :: l)), (Permutation (insert a0 gv0) (n :: l0)), (Permutation (insert a0 gv0) (n :: gv0)), (Permutation (insert a0 gv0) (sort l))
(Permutation (insert a0 gv0) (sort l0)), (Permutation (insert a0 gv0) (sort gv0)), (Permutation (insert a0 gv0) (insert a0 l)), (Permutation (insert a0 gv0) (insert a0 l0)), (Permutation (insert a0 gv0) (insert a l)), (Permutation (insert a0 gv0) (insert a l0)), (Permutation (insert a0 gv0) (insert a gv0)), (Permutation (insert a0 gv0) (insert n l)), (Permutation (insert a0 gv0) (insert n l0)), (Permutation (insert a0 gv0) (insert n gv0))
(Permutation (insert a0 gv0) (l ++ l)), (Permutation (insert a0 gv0) (l ++ l0)), (Permutation (insert a0 gv0) (l ++ gv0)), (Permutation (insert a0 gv0) (l0 ++ l)), (Permutation (insert a0 gv0) (l0 ++ l0)), (Permutation (insert a0 gv0) (l0 ++ gv0)), (Permutation (insert a0 gv0) (gv0 ++ l)), (Permutation (insert a0 gv0) (gv0 ++ l0)), (Permutation (insert a0 gv0) (gv0 ++ gv0)), (Permutation (insert a0 gv0) [])
(Permutation (insert a l) l), (Permutation (insert a l) l0), (Permutation (insert a l) gv0), (Permutation (insert a l) (a0 :: l)), (Permutation (insert a l) (a0 :: l0)), (Permutation (insert a l) (a0 :: gv0)), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: l0)), (Permutation (insert a l) (a :: gv0)), (Permutation (insert a l) (n :: l))
(Permutation (insert a l) (n :: l0)), (Permutation (insert a l) (n :: gv0)), (Permutation (insert a l) (sort l)), (Permutation (insert a l) (sort l0)), (Permutation (insert a l) (sort gv0)), (Permutation (insert a l) (insert a0 l)), (Permutation (insert a l) (insert a0 l0)), (Permutation (insert a l) (insert a0 gv0)), (Permutation (insert a l) (insert a l0)), (Permutation (insert a l) (insert a gv0))
(Permutation (insert a l) (insert n l)), (Permutation (insert a l) (insert n l0)), (Permutation (insert a l) (insert n gv0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ l0)), (Permutation (insert a l) (l ++ gv0)), (Permutation (insert a l) (l0 ++ l)), (Permutation (insert a l) (l0 ++ l0)), (Permutation (insert a l) (l0 ++ gv0)), (Permutation (insert a l) (gv0 ++ l))
(Permutation (insert a l) (gv0 ++ l0)), (Permutation (insert a l) (gv0 ++ gv0)), (Permutation (insert a l) []), (Permutation (insert a l0) l), (Permutation (insert a l0) l0), (Permutation (insert a l0) gv0), (Permutation (insert a l0) (a0 :: l)), (Permutation (insert a l0) (a0 :: l0)), (Permutation (insert a l0) (a0 :: gv0)), (Permutation (insert a l0) (a :: l))
(Permutation (insert a l0) (a :: l0)), (Permutation (insert a l0) (a :: gv0)), (Permutation (insert a l0) (n :: l)), (Permutation (insert a l0) (n :: l0)), (Permutation (insert a l0) (n :: gv0)), (Permutation (insert a l0) (sort l)), (Permutation (insert a l0) (sort l0)), (Permutation (insert a l0) (sort gv0)), (Permutation (insert a l0) (insert a0 l)), (Permutation (insert a l0) (insert a0 l0))
(Permutation (insert a l0) (insert a0 gv0)), (Permutation (insert a l0) (insert a l)), (Permutation (insert a l0) (insert a gv0)), (Permutation (insert a l0) (insert n l)), (Permutation (insert a l0) (insert n l0)), (Permutation (insert a l0) (insert n gv0)), (Permutation (insert a l0) (l ++ l)), (Permutation (insert a l0) (l ++ l0)), (Permutation (insert a l0) (l ++ gv0)), (Permutation (insert a l0) (l0 ++ l))
(Permutation (insert a l0) (l0 ++ l0)), (Permutation (insert a l0) (l0 ++ gv0)), (Permutation (insert a l0) (gv0 ++ l)), (Permutation (insert a l0) (gv0 ++ l0)), (Permutation (insert a l0) (gv0 ++ gv0)), (Permutation (insert a l0) []), (Permutation (insert a gv0) l), (Permutation (insert a gv0) l0), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a0 :: l))
(Permutation (insert a gv0) (a0 :: l0)), (Permutation (insert a gv0) (a0 :: gv0)), (Permutation (insert a gv0) (a :: l)), (Permutation (insert a gv0) (a :: l0)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (n :: l)), (Permutation (insert a gv0) (n :: l0)), (Permutation (insert a gv0) (n :: gv0)), (Permutation (insert a gv0) (sort l)), (Permutation (insert a gv0) (sort l0))
(Permutation (insert a gv0) (sort gv0)), (Permutation (insert a gv0) (insert a0 l)), (Permutation (insert a gv0) (insert a0 l0)), (Permutation (insert a gv0) (insert a0 gv0)), (Permutation (insert a gv0) (insert a l)), (Permutation (insert a gv0) (insert a l0)), (Permutation (insert a gv0) (insert n l)), (Permutation (insert a gv0) (insert n l0)), (Permutation (insert a gv0) (insert n gv0)), (Permutation (insert a gv0) (l ++ l))
(Permutation (insert a gv0) (l ++ l0)), (Permutation (insert a gv0) (l ++ gv0)), (Permutation (insert a gv0) (l0 ++ l)), (Permutation (insert a gv0) (l0 ++ l0)), (Permutation (insert a gv0) (l0 ++ gv0)), (Permutation (insert a gv0) (gv0 ++ l)), (Permutation (insert a gv0) (gv0 ++ l0)), (Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) []), (Permutation (insert n l) l)
(Permutation (insert n l) l0), (Permutation (insert n l) gv0), (Permutation (insert n l) (a0 :: l)), (Permutation (insert n l) (a0 :: l0)), (Permutation (insert n l) (a0 :: gv0)), (Permutation (insert n l) (a :: l)), (Permutation (insert n l) (a :: l0)), (Permutation (insert n l) (a :: gv0)), (Permutation (insert n l) (n :: l)), (Permutation (insert n l) (n :: l0))
(Permutation (insert n l) (n :: gv0)), (Permutation (insert n l) (sort l)), (Permutation (insert n l) (sort l0)), (Permutation (insert n l) (sort gv0)), (Permutation (insert n l) (insert a0 l)), (Permutation (insert n l) (insert a0 l0)), (Permutation (insert n l) (insert a0 gv0)), (Permutation (insert n l) (insert a l)), (Permutation (insert n l) (insert a l0)), (Permutation (insert n l) (insert a gv0))
(Permutation (insert n l) (insert n l0)), (Permutation (insert n l) (insert n gv0)), (Permutation (insert n l) (l ++ l)), (Permutation (insert n l) (l ++ l0)), (Permutation (insert n l) (l ++ gv0)), (Permutation (insert n l) (l0 ++ l)), (Permutation (insert n l) (l0 ++ l0)), (Permutation (insert n l) (l0 ++ gv0)), (Permutation (insert n l) (gv0 ++ l)), (Permutation (insert n l) (gv0 ++ l0))
(Permutation (insert n l) (gv0 ++ gv0)), (Permutation (insert n l) []), (Permutation (insert n l0) l), (Permutation (insert n l0) l0), (Permutation (insert n l0) gv0), (Permutation (insert n l0) (a0 :: l)), (Permutation (insert n l0) (a0 :: l0)), (Permutation (insert n l0) (a0 :: gv0)), (Permutation (insert n l0) (a :: l)), (Permutation (insert n l0) (a :: l0))
(Permutation (insert n l0) (a :: gv0)), (Permutation (insert n l0) (n :: l)), (Permutation (insert n l0) (n :: l0)), (Permutation (insert n l0) (n :: gv0)), (Permutation (insert n l0) (sort l)), (Permutation (insert n l0) (sort l0)), (Permutation (insert n l0) (sort gv0)), (Permutation (insert n l0) (insert a0 l)), (Permutation (insert n l0) (insert a0 l0)), (Permutation (insert n l0) (insert a0 gv0))
(Permutation (insert n l0) (insert a l)), (Permutation (insert n l0) (insert a l0)), (Permutation (insert n l0) (insert a gv0)), (Permutation (insert n l0) (insert n l)), (Permutation (insert n l0) (insert n gv0)), (Permutation (insert n l0) (l ++ l)), (Permutation (insert n l0) (l ++ l0)), (Permutation (insert n l0) (l ++ gv0)), (Permutation (insert n l0) (l0 ++ l)), (Permutation (insert n l0) (l0 ++ l0))
(Permutation (insert n l0) (l0 ++ gv0)), (Permutation (insert n l0) (gv0 ++ l)), (Permutation (insert n l0) (gv0 ++ l0)), (Permutation (insert n l0) (gv0 ++ gv0)), (Permutation (insert n l0) []), (Permutation (insert n gv0) l), (Permutation (insert n gv0) l0), (Permutation (insert n gv0) gv0), (Permutation (insert n gv0) (a0 :: l)), (Permutation (insert n gv0) (a0 :: l0))
(Permutation (insert n gv0) (a0 :: gv0)), (Permutation (insert n gv0) (a :: l)), (Permutation (insert n gv0) (a :: l0)), (Permutation (insert n gv0) (a :: gv0)), (Permutation (insert n gv0) (n :: l)), (Permutation (insert n gv0) (n :: l0)), (Permutation (insert n gv0) (n :: gv0)), (Permutation (insert n gv0) (sort l)), (Permutation (insert n gv0) (sort l0)), (Permutation (insert n gv0) (sort gv0))
(Permutation (insert n gv0) (insert a0 l)), (Permutation (insert n gv0) (insert a0 l0)), (Permutation (insert n gv0) (insert a0 gv0)), (Permutation (insert n gv0) (insert a l)), (Permutation (insert n gv0) (insert a l0)), (Permutation (insert n gv0) (insert a gv0)), (Permutation (insert n gv0) (insert n l)), (Permutation (insert n gv0) (insert n l0)), (Permutation (insert n gv0) (l ++ l)), (Permutation (insert n gv0) (l ++ l0))
(Permutation (insert n gv0) (l ++ gv0)), (Permutation (insert n gv0) (l0 ++ l)), (Permutation (insert n gv0) (l0 ++ l0)), (Permutation (insert n gv0) (l0 ++ gv0)), (Permutation (insert n gv0) (gv0 ++ l)), (Permutation (insert n gv0) (gv0 ++ l0)), (Permutation (insert n gv0) (gv0 ++ gv0)), (Permutation (insert n gv0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) l0)
(Permutation (l ++ l) gv0), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a0 :: l0)), (Permutation (l ++ l) (a0 :: gv0)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: l0)), (Permutation (l ++ l) (a :: gv0)), (Permutation (l ++ l) (n :: l)), (Permutation (l ++ l) (n :: l0)), (Permutation (l ++ l) (n :: gv0))
(Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (sort l0)), (Permutation (l ++ l) (sort gv0)), (Permutation (l ++ l) (insert a0 l)), (Permutation (l ++ l) (insert a0 l0)), (Permutation (l ++ l) (insert a0 gv0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a l0)), (Permutation (l ++ l) (insert a gv0)), (Permutation (l ++ l) (insert n l))
(Permutation (l ++ l) (insert n l0)), (Permutation (l ++ l) (insert n gv0)), (Permutation (l ++ l) (l ++ l0)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (l0 ++ l)), (Permutation (l ++ l) (l0 ++ l0)), (Permutation (l ++ l) (l0 ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ l0)), (Permutation (l ++ l) (gv0 ++ gv0))
(Permutation (l ++ l) []), (Permutation (l ++ l0) l), (Permutation (l ++ l0) l0), (Permutation (l ++ l0) gv0), (Permutation (l ++ l0) (a0 :: l)), (Permutation (l ++ l0) (a0 :: l0)), (Permutation (l ++ l0) (a0 :: gv0)), (Permutation (l ++ l0) (a :: l)), (Permutation (l ++ l0) (a :: l0)), (Permutation (l ++ l0) (a :: gv0))
(Permutation (l ++ l0) (n :: l)), (Permutation (l ++ l0) (n :: l0)), (Permutation (l ++ l0) (n :: gv0)), (Permutation (l ++ l0) (sort l)), (Permutation (l ++ l0) (sort l0)), (Permutation (l ++ l0) (sort gv0)), (Permutation (l ++ l0) (insert a0 l)), (Permutation (l ++ l0) (insert a0 l0)), (Permutation (l ++ l0) (insert a0 gv0)), (Permutation (l ++ l0) (insert a l))
(Permutation (l ++ l0) (insert a l0)), (Permutation (l ++ l0) (insert a gv0)), (Permutation (l ++ l0) (insert n l)), (Permutation (l ++ l0) (insert n l0)), (Permutation (l ++ l0) (insert n gv0)), (Permutation (l ++ l0) (l ++ l)), (Permutation (l ++ l0) (l ++ gv0)), (Permutation (l ++ l0) (l0 ++ l)), (Permutation (l ++ l0) (l0 ++ l0)), (Permutation (l ++ l0) (l0 ++ gv0))
(Permutation (l ++ l0) (gv0 ++ l)), (Permutation (l ++ l0) (gv0 ++ l0)), (Permutation (l ++ l0) (gv0 ++ gv0)), (Permutation (l ++ l0) []), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) l0), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (a0 :: l)), (Permutation (l ++ gv0) (a0 :: l0)), (Permutation (l ++ gv0) (a0 :: gv0))
(Permutation (l ++ gv0) (a :: l)), (Permutation (l ++ gv0) (a :: l0)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (n :: l)), (Permutation (l ++ gv0) (n :: l0)), (Permutation (l ++ gv0) (n :: gv0)), (Permutation (l ++ gv0) (sort l)), (Permutation (l ++ gv0) (sort l0)), (Permutation (l ++ gv0) (sort gv0)), (Permutation (l ++ gv0) (insert a0 l))
(Permutation (l ++ gv0) (insert a0 l0)), (Permutation (l ++ gv0) (insert a0 gv0)), (Permutation (l ++ gv0) (insert a l)), (Permutation (l ++ gv0) (insert a l0)), (Permutation (l ++ gv0) (insert a gv0)), (Permutation (l ++ gv0) (insert n l)), (Permutation (l ++ gv0) (insert n l0)), (Permutation (l ++ gv0) (insert n gv0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (l ++ l0))
(Permutation (l ++ gv0) (l0 ++ l)), (Permutation (l ++ gv0) (l0 ++ l0)), (Permutation (l ++ gv0) (l0 ++ gv0)), (Permutation (l ++ gv0) (gv0 ++ l)), (Permutation (l ++ gv0) (gv0 ++ l0)), (Permutation (l ++ gv0) (gv0 ++ gv0)), (Permutation (l ++ gv0) []), (Permutation (l0 ++ l) l), (Permutation (l0 ++ l) l0), (Permutation (l0 ++ l) gv0)
(Permutation (l0 ++ l) (a0 :: l)), (Permutation (l0 ++ l) (a0 :: l0)), (Permutation (l0 ++ l) (a0 :: gv0)), (Permutation (l0 ++ l) (a :: l)), (Permutation (l0 ++ l) (a :: l0)), (Permutation (l0 ++ l) (a :: gv0)), (Permutation (l0 ++ l) (n :: l)), (Permutation (l0 ++ l) (n :: l0)), (Permutation (l0 ++ l) (n :: gv0)), (Permutation (l0 ++ l) (sort l))
(Permutation (l0 ++ l) (sort l0)), (Permutation (l0 ++ l) (sort gv0)), (Permutation (l0 ++ l) (insert a0 l)), (Permutation (l0 ++ l) (insert a0 l0)), (Permutation (l0 ++ l) (insert a0 gv0)), (Permutation (l0 ++ l) (insert a l)), (Permutation (l0 ++ l) (insert a l0)), (Permutation (l0 ++ l) (insert a gv0)), (Permutation (l0 ++ l) (insert n l)), (Permutation (l0 ++ l) (insert n l0))
(Permutation (l0 ++ l) (insert n gv0)), (Permutation (l0 ++ l) (l ++ l)), (Permutation (l0 ++ l) (l ++ l0)), (Permutation (l0 ++ l) (l ++ gv0)), (Permutation (l0 ++ l) (l0 ++ l0)), (Permutation (l0 ++ l) (l0 ++ gv0)), (Permutation (l0 ++ l) (gv0 ++ l)), (Permutation (l0 ++ l) (gv0 ++ l0)), (Permutation (l0 ++ l) (gv0 ++ gv0)), (Permutation (l0 ++ l) [])
(Permutation (l0 ++ l0) l), (Permutation (l0 ++ l0) l0), (Permutation (l0 ++ l0) gv0), (Permutation (l0 ++ l0) (a0 :: l)), (Permutation (l0 ++ l0) (a0 :: l0)), (Permutation (l0 ++ l0) (a0 :: gv0)), (Permutation (l0 ++ l0) (a :: l)), (Permutation (l0 ++ l0) (a :: l0)), (Permutation (l0 ++ l0) (a :: gv0)), (Permutation (l0 ++ l0) (n :: l))
(Permutation (l0 ++ l0) (n :: l0)), (Permutation (l0 ++ l0) (n :: gv0)), (Permutation (l0 ++ l0) (sort l)), (Permutation (l0 ++ l0) (sort l0)), (Permutation (l0 ++ l0) (sort gv0)), (Permutation (l0 ++ l0) (insert a0 l)), (Permutation (l0 ++ l0) (insert a0 l0)), (Permutation (l0 ++ l0) (insert a0 gv0)), (Permutation (l0 ++ l0) (insert a l)), (Permutation (l0 ++ l0) (insert a l0))
(Permutation (l0 ++ l0) (insert a gv0)), (Permutation (l0 ++ l0) (insert n l)), (Permutation (l0 ++ l0) (insert n l0)), (Permutation (l0 ++ l0) (insert n gv0)), (Permutation (l0 ++ l0) (l ++ l)), (Permutation (l0 ++ l0) (l ++ l0)), (Permutation (l0 ++ l0) (l ++ gv0)), (Permutation (l0 ++ l0) (l0 ++ l)), (Permutation (l0 ++ l0) (l0 ++ gv0)), (Permutation (l0 ++ l0) (gv0 ++ l))
(Permutation (l0 ++ l0) (gv0 ++ l0)), (Permutation (l0 ++ l0) (gv0 ++ gv0)), (Permutation (l0 ++ l0) []), (Permutation (l0 ++ gv0) l), (Permutation (l0 ++ gv0) l0), (Permutation (l0 ++ gv0) gv0), (Permutation (l0 ++ gv0) (a0 :: l)), (Permutation (l0 ++ gv0) (a0 :: l0)), (Permutation (l0 ++ gv0) (a0 :: gv0)), (Permutation (l0 ++ gv0) (a :: l))
(Permutation (l0 ++ gv0) (a :: l0)), (Permutation (l0 ++ gv0) (a :: gv0)), (Permutation (l0 ++ gv0) (n :: l)), (Permutation (l0 ++ gv0) (n :: l0)), (Permutation (l0 ++ gv0) (n :: gv0)), (Permutation (l0 ++ gv0) (sort l)), (Permutation (l0 ++ gv0) (sort l0)), (Permutation (l0 ++ gv0) (sort gv0)), (Permutation (l0 ++ gv0) (insert a0 l)), (Permutation (l0 ++ gv0) (insert a0 l0))
(Permutation (l0 ++ gv0) (insert a0 gv0)), (Permutation (l0 ++ gv0) (insert a l)), (Permutation (l0 ++ gv0) (insert a l0)), (Permutation (l0 ++ gv0) (insert a gv0)), (Permutation (l0 ++ gv0) (insert n l)), (Permutation (l0 ++ gv0) (insert n l0)), (Permutation (l0 ++ gv0) (insert n gv0)), (Permutation (l0 ++ gv0) (l ++ l)), (Permutation (l0 ++ gv0) (l ++ l0)), (Permutation (l0 ++ gv0) (l ++ gv0))
(Permutation (l0 ++ gv0) (l0 ++ l)), (Permutation (l0 ++ gv0) (l0 ++ l0)), (Permutation (l0 ++ gv0) (gv0 ++ l)), (Permutation (l0 ++ gv0) (gv0 ++ l0)), (Permutation (l0 ++ gv0) (gv0 ++ gv0)), (Permutation (l0 ++ gv0) []), (Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) l0), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (a0 :: l))
(Permutation (gv0 ++ l) (a0 :: l0)), (Permutation (gv0 ++ l) (a0 :: gv0)), (Permutation (gv0 ++ l) (a :: l)), (Permutation (gv0 ++ l) (a :: l0)), (Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (n :: l)), (Permutation (gv0 ++ l) (n :: l0)), (Permutation (gv0 ++ l) (n :: gv0)), (Permutation (gv0 ++ l) (sort l)), (Permutation (gv0 ++ l) (sort l0))
(Permutation (gv0 ++ l) (sort gv0)), (Permutation (gv0 ++ l) (insert a0 l)), (Permutation (gv0 ++ l) (insert a0 l0)), (Permutation (gv0 ++ l) (insert a0 gv0)), (Permutation (gv0 ++ l) (insert a l)), (Permutation (gv0 ++ l) (insert a l0)), (Permutation (gv0 ++ l) (insert a gv0)), (Permutation (gv0 ++ l) (insert n l)), (Permutation (gv0 ++ l) (insert n l0)), (Permutation (gv0 ++ l) (insert n gv0))
(Permutation (gv0 ++ l) (l ++ l)), (Permutation (gv0 ++ l) (l ++ l0)), (Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (l0 ++ l)), (Permutation (gv0 ++ l) (l0 ++ l0)), (Permutation (gv0 ++ l) (l0 ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ l0)), (Permutation (gv0 ++ l) (gv0 ++ gv0)), (Permutation (gv0 ++ l) []), (Permutation (gv0 ++ l0) l)
(Permutation (gv0 ++ l0) l0), (Permutation (gv0 ++ l0) gv0), (Permutation (gv0 ++ l0) (a0 :: l)), (Permutation (gv0 ++ l0) (a0 :: l0)), (Permutation (gv0 ++ l0) (a0 :: gv0)), (Permutation (gv0 ++ l0) (a :: l)), (Permutation (gv0 ++ l0) (a :: l0)), (Permutation (gv0 ++ l0) (a :: gv0)), (Permutation (gv0 ++ l0) (n :: l)), (Permutation (gv0 ++ l0) (n :: l0))
(Permutation (gv0 ++ l0) (n :: gv0)), (Permutation (gv0 ++ l0) (sort l)), (Permutation (gv0 ++ l0) (sort l0)), (Permutation (gv0 ++ l0) (sort gv0)), (Permutation (gv0 ++ l0) (insert a0 l)), (Permutation (gv0 ++ l0) (insert a0 l0)), (Permutation (gv0 ++ l0) (insert a0 gv0)), (Permutation (gv0 ++ l0) (insert a l)), (Permutation (gv0 ++ l0) (insert a l0)), (Permutation (gv0 ++ l0) (insert a gv0))
(Permutation (gv0 ++ l0) (insert n l)), (Permutation (gv0 ++ l0) (insert n l0)), (Permutation (gv0 ++ l0) (insert n gv0)), (Permutation (gv0 ++ l0) (l ++ l)), (Permutation (gv0 ++ l0) (l ++ l0)), (Permutation (gv0 ++ l0) (l ++ gv0)), (Permutation (gv0 ++ l0) (l0 ++ l)), (Permutation (gv0 ++ l0) (l0 ++ l0)), (Permutation (gv0 ++ l0) (l0 ++ gv0)), (Permutation (gv0 ++ l0) (gv0 ++ l))
(Permutation (gv0 ++ l0) (gv0 ++ gv0)), (Permutation (gv0 ++ l0) []), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) l0), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a0 :: l)), (Permutation (gv0 ++ gv0) (a0 :: l0)), (Permutation (gv0 ++ gv0) (a0 :: gv0)), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: l0))
(Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (n :: l)), (Permutation (gv0 ++ gv0) (n :: l0)), (Permutation (gv0 ++ gv0) (n :: gv0)), (Permutation (gv0 ++ gv0) (sort l)), (Permutation (gv0 ++ gv0) (sort l0)), (Permutation (gv0 ++ gv0) (sort gv0)), (Permutation (gv0 ++ gv0) (insert a0 l)), (Permutation (gv0 ++ gv0) (insert a0 l0)), (Permutation (gv0 ++ gv0) (insert a0 gv0))
(Permutation (gv0 ++ gv0) (insert a l)), (Permutation (gv0 ++ gv0) (insert a l0)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (insert n l)), (Permutation (gv0 ++ gv0) (insert n l0)), (Permutation (gv0 ++ gv0) (insert n gv0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ l0)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (l0 ++ l))
(Permutation (gv0 ++ gv0) (l0 ++ l0)), (Permutation (gv0 ++ gv0) (l0 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l)), (Permutation (gv0 ++ gv0) (gv0 ++ l0)), (Permutation (gv0 ++ gv0) []), (Permutation [] l), (Permutation [] l0), (Permutation [] gv0), (Permutation [] (a0 :: l)), (Permutation [] (a0 :: l0))
(Permutation [] (a0 :: gv0)), (Permutation [] (a :: l)), (Permutation [] (a :: l0)), (Permutation [] (a :: gv0)), (Permutation [] (n :: l)), (Permutation [] (n :: l0)), (Permutation [] (n :: gv0)), (Permutation [] (sort l)), (Permutation [] (sort l0)), (Permutation [] (sort gv0))
(Permutation [] (insert a0 l)), (Permutation [] (insert a0 l0)), (Permutation [] (insert a0 gv0)), (Permutation [] (insert a l)), (Permutation [] (insert a l0)), (Permutation [] (insert a gv0)), (Permutation [] (insert n l)), (Permutation [] (insert n l0)), (Permutation [] (insert n gv0)), (Permutation [] (l ++ l))
(Permutation [] (l ++ l0)), (Permutation [] (l ++ gv0)), (Permutation [] (l0 ++ l)), (Permutation [] (l0 ++ l0)), (Permutation [] (l0 ++ gv0)), (Permutation [] (gv0 ++ l)), (Permutation [] (gv0 ++ l0)), (Permutation [] (gv0 ++ gv0)), (In a0 (a0 :: l)), (In a0 (a0 :: l0))
(In a0 (a0 :: gv0)), (In a0 (a :: l)), (In a0 (a :: l0)), (In a0 (a :: gv0)), (In a0 (n :: l)), (In a0 (n :: l0)), (In a0 (n :: gv0)), (In a0 (sort l)), (In a0 (sort l0)), (In a0 (sort gv0))
(In a0 (insert a0 l)), (In a0 (insert a0 l0)), (In a0 (insert a0 gv0)), (In a0 (insert a l)), (In a0 (insert a l0)), (In a0 (insert a gv0)), (In a0 (insert n l)), (In a0 (insert n l0)), (In a0 (insert n gv0)), (In a0 (l ++ l))
(In a0 (l ++ l0)), (In a0 (l ++ gv0)), (In a0 (l0 ++ l)), (In a0 (l0 ++ l0)), (In a0 (l0 ++ gv0)), (In a0 (gv0 ++ l)), (In a0 (gv0 ++ l0)), (In a0 (gv0 ++ gv0)), (In a (a0 :: l)), (In a (a0 :: l0))
(In a (a0 :: gv0)), (In a (a :: l)), (In a (a :: l0)), (In a (a :: gv0)), (In a (n :: l)), (In a (n :: l0)), (In a (n :: gv0)), (In a (sort l)), (In a (sort l0)), (In a (sort gv0))
(In a (insert a0 l)), (In a (insert a0 l0)), (In a (insert a0 gv0)), (In a (insert a l)), (In a (insert a l0)), (In a (insert a gv0)), (In a (insert n l)), (In a (insert n l0)), (In a (insert n gv0)), (In a (l ++ l))
(In a (l ++ l0)), (In a (l ++ gv0)), (In a (l0 ++ l)), (In a (l0 ++ l0)), (In a (l0 ++ gv0)), (In a (gv0 ++ l)), (In a (gv0 ++ l0)), (In a (gv0 ++ gv0)), (In n (a0 :: l)), (In n (a0 :: l0))
(In n (a0 :: gv0)), (In n (a :: l)), (In n (a :: l0)), (In n (a :: gv0)), (In n (n :: l)), (In n (n :: l0)), (In n (n :: gv0)), (In n (sort l)), (In n (sort l0)), (In n (sort gv0))
(In n (insert a0 l)), (In n (insert a0 l0)), (In n (insert a0 gv0)), (In n (insert a l)), (In n (insert a l0)), (In n (insert a gv0)), (In n (insert n l)), (In n (insert n l0)), (In n (insert n gv0)), (In n (l ++ l))
(In n (l ++ l0)), (In n (l ++ gv0)), (In n (l0 ++ l)), (In n (l0 ++ l0)), (In n (l0 ++ gv0)), (In n (gv0 ++ l)), (In n (gv0 ++ l0)), (In n (gv0 ++ gv0)), (In (length l) l), (In (length l) l0)
(In (length l) gv0), (In (length l) (a0 :: l)), (In (length l) (a0 :: l0)), (In (length l) (a0 :: gv0)), (In (length l) (a :: l)), (In (length l) (a :: l0)), (In (length l) (a :: gv0)), (In (length l) (n :: l)), (In (length l) (n :: l0)), (In (length l) (n :: gv0))
(In (length l) (sort l)), (In (length l) (sort l0)), (In (length l) (sort gv0)), (In (length l) (insert a0 l)), (In (length l) (insert a0 l0)), (In (length l) (insert a0 gv0)), (In (length l) (insert a l)), (In (length l) (insert a l0)), (In (length l) (insert a gv0)), (In (length l) (insert n l))
(In (length l) (insert n l0)), (In (length l) (insert n gv0)), (In (length l) (l ++ l)), (In (length l) (l ++ l0)), (In (length l) (l ++ gv0)), (In (length l) (l0 ++ l)), (In (length l) (l0 ++ l0)), (In (length l) (l0 ++ gv0)), (In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ l0))
(In (length l) (gv0 ++ gv0)), (In (length l0) l), (In (length l0) l0), (In (length l0) gv0), (In (length l0) (a0 :: l)), (In (length l0) (a0 :: l0)), (In (length l0) (a0 :: gv0)), (In (length l0) (a :: l)), (In (length l0) (a :: l0)), (In (length l0) (a :: gv0))
(In (length l0) (n :: l)), (In (length l0) (n :: l0)), (In (length l0) (n :: gv0)), (In (length l0) (sort l)), (In (length l0) (sort l0)), (In (length l0) (sort gv0)), (In (length l0) (insert a0 l)), (In (length l0) (insert a0 l0)), (In (length l0) (insert a0 gv0)), (In (length l0) (insert a l))
(In (length l0) (insert a l0)), (In (length l0) (insert a gv0)), (In (length l0) (insert n l)), (In (length l0) (insert n l0)), (In (length l0) (insert n gv0)), (In (length l0) (l ++ l)), (In (length l0) (l ++ l0)), (In (length l0) (l ++ gv0)), (In (length l0) (l0 ++ l)), (In (length l0) (l0 ++ l0))
(In (length l0) (l0 ++ gv0)), (In (length l0) (gv0 ++ l)), (In (length l0) (gv0 ++ l0)), (In (length l0) (gv0 ++ gv0)), (In (length gv0) l), (In (length gv0) l0), (In (length gv0) gv0), (In (length gv0) (a0 :: l)), (In (length gv0) (a0 :: l0)), (In (length gv0) (a0 :: gv0))
(In (length gv0) (a :: l)), (In (length gv0) (a :: l0)), (In (length gv0) (a :: gv0)), (In (length gv0) (n :: l)), (In (length gv0) (n :: l0)), (In (length gv0) (n :: gv0)), (In (length gv0) (sort l)), (In (length gv0) (sort l0)), (In (length gv0) (sort gv0)), (In (length gv0) (insert a0 l))
(In (length gv0) (insert a0 l0)), (In (length gv0) (insert a0 gv0)), (In (length gv0) (insert a l)), (In (length gv0) (insert a l0)), (In (length gv0) (insert a gv0)), (In (length gv0) (insert n l)), (In (length gv0) (insert n l0)), (In (length gv0) (insert n gv0)), (In (length gv0) (l ++ l)), (In (length gv0) (l ++ l0))
(In (length gv0) (l ++ gv0)), (In (length gv0) (l0 ++ l)), (In (length gv0) (l0 ++ l0)), (In (length gv0) (l0 ++ gv0)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ l0)), (In (length gv0) (gv0 ++ gv0)), (a0 < length l), (a0 < length l0), (a0 < length gv0)
(a < length l), (a < length l0), (a < length gv0), (n < length l), (n < length l0), (n < length gv0), (length l < a0), (length l < a), (length l < n), (length l < length l0)
(length l < length gv0), (length l0 < a0), (length l0 < a), (length l0 < n), (length l0 < length l), (length l0 < length gv0), (length gv0 < a0), (length gv0 < a), (length gv0 < n), (length gv0 < length l)
(length gv0 < length l0), (a0 <= length l), (a0 <= length l0), (a0 <= length gv0), (a <= length l), (a <= length l0), (a <= length gv0), (n <= length l), (n <= length l0), (n <= length gv0)
(length l <= a0), (length l <= a), (length l <= n), (length l <= length l0), (length l <= length gv0), (length l0 <= a0), (length l0 <= a), (length l0 <= n), (length l0 <= length l), (length l0 <= length gv0)
(length gv0 <= a0), (length gv0 <= a), (length gv0 <= n), (length gv0 <= length l), (length gv0 <= length l0), (~ sortedd l), (~ sortedd l0), (~ sortedd gv0), (~ sorted l), (~ sorted l0)
(~ sorted gv0), (~ Permutation l l), (~ Permutation l l0), (~ Permutation l gv0), (~ Permutation l0 l), (~ Permutation l0 l0), (~ Permutation l0 gv0), (~ Permutation gv0 l), (~ Permutation gv0 l0), (~ Permutation gv0 gv0)
(~ In a0 l), (~ In a0 l0), (~ In a0 gv0), (~ In a l), (~ In a l0), (~ In a gv0), (~ In n l), (~ In n l0), (~ In n gv0), (~ a0 < a0)
(~ a0 < a), (~ a0 < n), (~ a < a0), (~ a < a), (~ a < n), (~ n < a0), (~ n < a), (~ n < n), (~ a0 <= a0), (~ a0 <= a)
(~ a0 <= n), (~ a <= a0), (~ a <= a), (~ a <= n), (~ n <= a0), (~ n <= a), (~ n <= n), (a0 <> a0), (a0 <> a), (a0 <> n)
(a <> a0), (a <> a), (a <> n), (n <> a0), (n <> a), (n <> n), (l <> l), (l <> l0), (l <> gv0), (l0 <> l)
(l0 <> l0), (l0 <> gv0), (gv0 <> l), (gv0 <> l0), (gv0 <> gv0), (None = Some l), (None = Some l0), (None = Some gv0), (a0 :: l = l), (a0 :: l = l0)
(a0 :: l = gv0), (a0 :: l = sort l), (a0 :: l = sort l0), (a0 :: l = sort gv0), (a0 :: l = insert a0 l), (a0 :: l = insert a0 l0), (a0 :: l = insert a0 gv0), (a0 :: l = insert a l), (a0 :: l = insert a l0), (a0 :: l = insert a gv0)
(a0 :: l = insert n l), (a0 :: l = insert n l0), (a0 :: l = insert n gv0), (a0 :: l = l ++ l), (a0 :: l = l ++ l0), (a0 :: l = l ++ gv0), (a0 :: l = l0 ++ l), (a0 :: l = l0 ++ l0), (a0 :: l = l0 ++ gv0), (a0 :: l = gv0 ++ l)
(a0 :: l = gv0 ++ l0), (a0 :: l = gv0 ++ gv0), (a0 :: l = []), (a0 :: l0 = l), (a0 :: l0 = l0), (a0 :: l0 = gv0), (a0 :: l0 = sort l), (a0 :: l0 = sort l0), (a0 :: l0 = sort gv0), (a0 :: l0 = insert a0 l)
(a0 :: l0 = insert a0 l0), (a0 :: l0 = insert a0 gv0), (a0 :: l0 = insert a l), (a0 :: l0 = insert a l0), (a0 :: l0 = insert a gv0), (a0 :: l0 = insert n l), (a0 :: l0 = insert n l0), (a0 :: l0 = insert n gv0), (a0 :: l0 = l ++ l), (a0 :: l0 = l ++ l0)
(a0 :: l0 = l ++ gv0), (a0 :: l0 = l0 ++ l), (a0 :: l0 = l0 ++ l0), (a0 :: l0 = l0 ++ gv0), (a0 :: l0 = gv0 ++ l), (a0 :: l0 = gv0 ++ l0), (a0 :: l0 = gv0 ++ gv0), (a0 :: l0 = []), (a0 :: gv0 = l), (a0 :: gv0 = l0)
(a0 :: gv0 = gv0), (a0 :: gv0 = sort l), (a0 :: gv0 = sort l0), (a0 :: gv0 = sort gv0), (a0 :: gv0 = insert a0 l), (a0 :: gv0 = insert a0 l0), (a0 :: gv0 = insert a0 gv0), (a0 :: gv0 = insert a l), (a0 :: gv0 = insert a l0), (a0 :: gv0 = insert a gv0)
(a0 :: gv0 = insert n l), (a0 :: gv0 = insert n l0), (a0 :: gv0 = insert n gv0), (a0 :: gv0 = l ++ l), (a0 :: gv0 = l ++ l0), (a0 :: gv0 = l ++ gv0), (a0 :: gv0 = l0 ++ l), (a0 :: gv0 = l0 ++ l0), (a0 :: gv0 = l0 ++ gv0), (a0 :: gv0 = gv0 ++ l)
(a0 :: gv0 = gv0 ++ l0), (a0 :: gv0 = gv0 ++ gv0), (a0 :: gv0 = []), (a :: l = l), (a :: l = l0), (a :: l = gv0), (a :: l = sort l), (a :: l = sort l0), (a :: l = sort gv0), (a :: l = insert a0 l)
(a :: l = insert a0 l0), (a :: l = insert a0 gv0), (a :: l = insert a l), (a :: l = insert a l0), (a :: l = insert a gv0), (a :: l = insert n l), (a :: l = insert n l0), (a :: l = insert n gv0), (a :: l = l ++ l), (a :: l = l ++ l0)
(a :: l = l ++ gv0), (a :: l = l0 ++ l), (a :: l = l0 ++ l0), (a :: l = l0 ++ gv0), (a :: l = gv0 ++ l), (a :: l = gv0 ++ l0), (a :: l = gv0 ++ gv0), (a :: l = []), (a :: l0 = l), (a :: l0 = l0)
(a :: l0 = gv0), (a :: l0 = sort l), (a :: l0 = sort l0), (a :: l0 = sort gv0), (a :: l0 = insert a0 l), (a :: l0 = insert a0 l0), (a :: l0 = insert a0 gv0), (a :: l0 = insert a l), (a :: l0 = insert a l0), (a :: l0 = insert a gv0)
(a :: l0 = insert n l), (a :: l0 = insert n l0), (a :: l0 = insert n gv0), (a :: l0 = l ++ l), (a :: l0 = l ++ l0), (a :: l0 = l ++ gv0), (a :: l0 = l0 ++ l), (a :: l0 = l0 ++ l0), (a :: l0 = l0 ++ gv0), (a :: l0 = gv0 ++ l)
(a :: l0 = gv0 ++ l0), (a :: l0 = gv0 ++ gv0), (a :: l0 = []), (a :: gv0 = l), (a :: gv0 = l0), (a :: gv0 = gv0), (a :: gv0 = sort l), (a :: gv0 = sort l0), (a :: gv0 = sort gv0), (a :: gv0 = insert a0 l)
(a :: gv0 = insert a0 l0), (a :: gv0 = insert a0 gv0), (a :: gv0 = insert a l), (a :: gv0 = insert a l0), (a :: gv0 = insert a gv0), (a :: gv0 = insert n l), (a :: gv0 = insert n l0), (a :: gv0 = insert n gv0), (a :: gv0 = l ++ l), (a :: gv0 = l ++ l0)
(a :: gv0 = l ++ gv0), (a :: gv0 = l0 ++ l), (a :: gv0 = l0 ++ l0), (a :: gv0 = l0 ++ gv0), (a :: gv0 = gv0 ++ l), (a :: gv0 = gv0 ++ l0), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (n :: l = l), (n :: l = l0)
(n :: l = gv0), (n :: l = sort l), (n :: l = sort l0), (n :: l = sort gv0), (n :: l = insert a0 l), (n :: l = insert a0 l0), (n :: l = insert a0 gv0), (n :: l = insert a l), (n :: l = insert a l0), (n :: l = insert a gv0)
(n :: l = insert n l), (n :: l = insert n l0), (n :: l = insert n gv0), (n :: l = l ++ l), (n :: l = l ++ l0), (n :: l = l ++ gv0), (n :: l = l0 ++ l), (n :: l = l0 ++ l0), (n :: l = l0 ++ gv0), (n :: l = gv0 ++ l)
(n :: l = gv0 ++ l0), (n :: l = gv0 ++ gv0), (n :: l = []), (n :: l0 = l), (n :: l0 = l0), (n :: l0 = gv0), (n :: l0 = sort l), (n :: l0 = sort l0), (n :: l0 = sort gv0), (n :: l0 = insert a0 l)
(n :: l0 = insert a0 l0), (n :: l0 = insert a0 gv0), (n :: l0 = insert a l), (n :: l0 = insert a l0), (n :: l0 = insert a gv0), (n :: l0 = insert n l), (n :: l0 = insert n l0), (n :: l0 = insert n gv0), (n :: l0 = l ++ l), (n :: l0 = l ++ l0)
(n :: l0 = l ++ gv0), (n :: l0 = l0 ++ l), (n :: l0 = l0 ++ l0), (n :: l0 = l0 ++ gv0), (n :: l0 = gv0 ++ l), (n :: l0 = gv0 ++ l0), (n :: l0 = gv0 ++ gv0), (n :: l0 = []), (n :: gv0 = l), (n :: gv0 = l0)
(n :: gv0 = gv0), (n :: gv0 = sort l), (n :: gv0 = sort l0), (n :: gv0 = sort gv0), (n :: gv0 = insert a0 l), (n :: gv0 = insert a0 l0), (n :: gv0 = insert a0 gv0), (n :: gv0 = insert a l), (n :: gv0 = insert a l0), (n :: gv0 = insert a gv0)
(n :: gv0 = insert n l), (n :: gv0 = insert n l0), (n :: gv0 = insert n gv0), (n :: gv0 = l ++ l), (n :: gv0 = l ++ l0), (n :: gv0 = l ++ gv0), (n :: gv0 = l0 ++ l), (n :: gv0 = l0 ++ l0), (n :: gv0 = l0 ++ gv0), (n :: gv0 = gv0 ++ l)
(n :: gv0 = gv0 ++ l0), (n :: gv0 = gv0 ++ gv0), (n :: gv0 = []), (sort l = l), (sort l = l0), (sort l = gv0), (sort l = insert a0 l), (sort l = insert a0 l0), (sort l = insert a0 gv0), (sort l = insert a l)
(sort l = insert a l0), (sort l = insert a gv0), (sort l = insert n l), (sort l = insert n l0), (sort l = insert n gv0), (sort l = l ++ l), (sort l = l ++ l0), (sort l = l ++ gv0), (sort l = l0 ++ l), (sort l = l0 ++ l0)
(sort l = l0 ++ gv0), (sort l = gv0 ++ l), (sort l = gv0 ++ l0), (sort l = gv0 ++ gv0), (sort l0 = l), (sort l0 = l0), (sort l0 = gv0), (sort l0 = insert a0 l), (sort l0 = insert a0 l0), (sort l0 = insert a0 gv0)
(sort l0 = insert a l), (sort l0 = insert a l0), (sort l0 = insert a gv0), (sort l0 = insert n l), (sort l0 = insert n l0), (sort l0 = insert n gv0), (sort l0 = l ++ l), (sort l0 = l ++ l0), (sort l0 = l ++ gv0), (sort l0 = l0 ++ l)
(sort l0 = l0 ++ l0), (sort l0 = l0 ++ gv0), (sort l0 = gv0 ++ l), (sort l0 = gv0 ++ l0), (sort l0 = gv0 ++ gv0), (sort gv0 = l), (sort gv0 = l0), (sort gv0 = gv0), (sort gv0 = insert a0 l), (sort gv0 = insert a0 l0)
(sort gv0 = insert a0 gv0), (sort gv0 = insert a l), (sort gv0 = insert a l0), (sort gv0 = insert a gv0), (sort gv0 = insert n l), (sort gv0 = insert n l0), (sort gv0 = insert n gv0), (sort gv0 = l ++ l), (sort gv0 = l ++ l0), (sort gv0 = l ++ gv0)
(sort gv0 = l0 ++ l), (sort gv0 = l0 ++ l0), (sort gv0 = l0 ++ gv0), (sort gv0 = gv0 ++ l), (sort gv0 = gv0 ++ l0), (sort gv0 = gv0 ++ gv0), (insert a0 l = l), (insert a0 l = l0), (insert a0 l = gv0), (insert a0 l = l ++ l)
(insert a0 l = l ++ l0), (insert a0 l = l ++ gv0), (insert a0 l = l0 ++ l), (insert a0 l = l0 ++ l0), (insert a0 l = l0 ++ gv0), (insert a0 l = gv0 ++ l), (insert a0 l = gv0 ++ l0), (insert a0 l = gv0 ++ gv0), (insert a0 l0 = l), (insert a0 l0 = l0)
(insert a0 l0 = gv0), (insert a0 l0 = l ++ l), (insert a0 l0 = l ++ l0), (insert a0 l0 = l ++ gv0), (insert a0 l0 = l0 ++ l), (insert a0 l0 = l0 ++ l0), (insert a0 l0 = l0 ++ gv0), (insert a0 l0 = gv0 ++ l), (insert a0 l0 = gv0 ++ l0), (insert a0 l0 = gv0 ++ gv0)
(insert a0 gv0 = l), (insert a0 gv0 = l0), (insert a0 gv0 = gv0), (insert a0 gv0 = l ++ l), (insert a0 gv0 = l ++ l0), (insert a0 gv0 = l ++ gv0), (insert a0 gv0 = l0 ++ l), (insert a0 gv0 = l0 ++ l0), (insert a0 gv0 = l0 ++ gv0), (insert a0 gv0 = gv0 ++ l)
(insert a0 gv0 = gv0 ++ l0), (insert a0 gv0 = gv0 ++ gv0), (insert a l = l), (insert a l = l0), (insert a l = gv0), (insert a l = l ++ l), (insert a l = l ++ l0), (insert a l = l ++ gv0), (insert a l = l0 ++ l), (insert a l = l0 ++ l0)
(insert a l = l0 ++ gv0), (insert a l = gv0 ++ l), (insert a l = gv0 ++ l0), (insert a l = gv0 ++ gv0), (insert a l0 = l), (insert a l0 = l0), (insert a l0 = gv0), (insert a l0 = l ++ l), (insert a l0 = l ++ l0), (insert a l0 = l ++ gv0)
(insert a l0 = l0 ++ l), (insert a l0 = l0 ++ l0), (insert a l0 = l0 ++ gv0), (insert a l0 = gv0 ++ l), (insert a l0 = gv0 ++ l0), (insert a l0 = gv0 ++ gv0), (insert a gv0 = l), (insert a gv0 = l0), (insert a gv0 = gv0), (insert a gv0 = l ++ l)
(insert a gv0 = l ++ l0), (insert a gv0 = l ++ gv0), (insert a gv0 = l0 ++ l), (insert a gv0 = l0 ++ l0), (insert a gv0 = l0 ++ gv0), (insert a gv0 = gv0 ++ l), (insert a gv0 = gv0 ++ l0), (insert a gv0 = gv0 ++ gv0), (insert n l = l), (insert n l = l0)
(insert n l = gv0), (insert n l = l ++ l), (insert n l = l ++ l0), (insert n l = l ++ gv0), (insert n l = l0 ++ l), (insert n l = l0 ++ l0), (insert n l = l0 ++ gv0), (insert n l = gv0 ++ l), (insert n l = gv0 ++ l0), (insert n l = gv0 ++ gv0)
(insert n l0 = l), (insert n l0 = l0), (insert n l0 = gv0), (insert n l0 = l ++ l), (insert n l0 = l ++ l0), (insert n l0 = l ++ gv0), (insert n l0 = l0 ++ l), (insert n l0 = l0 ++ l0), (insert n l0 = l0 ++ gv0), (insert n l0 = gv0 ++ l)
(insert n l0 = gv0 ++ l0), (insert n l0 = gv0 ++ gv0), (insert n gv0 = l), (insert n gv0 = l0), (insert n gv0 = gv0), (insert n gv0 = l ++ l), (insert n gv0 = l ++ l0), (insert n gv0 = l ++ gv0), (insert n gv0 = l0 ++ l), (insert n gv0 = l0 ++ l0)
(insert n gv0 = l0 ++ gv0), (insert n gv0 = gv0 ++ l), (insert n gv0 = gv0 ++ l0), (insert n gv0 = gv0 ++ gv0), (l ++ l = l), (l ++ l = l0), (l ++ l = gv0), (l ++ l0 = l), (l ++ l0 = l0), (l ++ l0 = gv0)
(l ++ gv0 = l), (l ++ gv0 = l0), (l ++ gv0 = gv0), (l0 ++ l = l), (l0 ++ l = l0), (l0 ++ l = gv0), (l0 ++ l0 = l), (l0 ++ l0 = l0), (l0 ++ l0 = gv0), (l0 ++ gv0 = l)
(l0 ++ gv0 = l0), (l0 ++ gv0 = gv0), (gv0 ++ l = l), (gv0 ++ l = l0), (gv0 ++ l = gv0), (gv0 ++ l0 = l), (gv0 ++ l0 = l0), (gv0 ++ l0 = gv0), (gv0 ++ gv0 = l), (gv0 ++ gv0 = l0)
(gv0 ++ gv0 = gv0), ([] = l), ([] = l0), ([] = gv0), ([] = sort l), ([] = sort l0), ([] = sort gv0), ([] = insert a0 l), ([] = insert a0 l0), ([] = insert a0 gv0)
([] = insert a l), ([] = insert a l0), ([] = insert a gv0), ([] = insert n l), ([] = insert n l0), ([] = insert n gv0), ([] = l ++ l), ([] = l ++ l0), ([] = l ++ gv0), ([] = l0 ++ l)
([] = l0 ++ l0), ([] = l0 ++ gv0), ([] = gv0 ++ l), ([] = gv0 ++ l0), ([] = gv0 ++ gv0), (None = Some a0), (None = Some a), (None = Some n), (length l = a0), (length l = a)
(length l = n), (length l0 = a0), (length l0 = a), (length l0 = n), (length gv0 = a0), (length gv0 = a), (length gv0 = n)

Label: 4 (4)
(sortedd l), (sortedd gv1), (sortedd gv0), (sorted l), (sorted gv1), (sorted gv0), (Permutation l l), (Permutation l gv1), (Permutation l gv0), (Permutation gv1 l)
(Permutation gv1 gv1), (Permutation gv1 gv0), (Permutation gv0 l), (Permutation gv0 gv1), (Permutation gv0 gv0), (In a0 l), (In a0 gv1), (In a0 gv0), (In a l), (In a gv1)
(In a gv0), (a0 < a0), (a0 < a), (a < a0), (a < a), (a0 <= a0), (a0 <= a), (a <= a0), (a <= a), (a0 = a0)
(a0 = a), (a = a0), (a = a), (l = l), (l = gv1), (l = gv0), (gv1 = l), (gv1 = gv1), (gv1 = gv0), (gv0 = l)
(gv0 = gv1), (gv0 = gv0), (sortedd (a0 :: l)), (sortedd (a0 :: gv1)), (sortedd (a0 :: gv0)), (sortedd (a :: l)), (sortedd (a :: gv1)), (sortedd (a :: gv0)), (sortedd (sort l)), (sortedd (sort gv1))
(sortedd (sort gv0)), (sortedd (insert a0 l)), (sortedd (insert a0 gv1)), (sortedd (insert a0 gv0)), (sortedd (insert a l)), (sortedd (insert a gv1)), (sortedd (insert a gv0)), (sortedd (l ++ l)), (sortedd (l ++ gv1)), (sortedd (l ++ gv0))
(sortedd (gv1 ++ l)), (sortedd (gv1 ++ gv1)), (sortedd (gv1 ++ gv0)), (sortedd (gv0 ++ l)), (sortedd (gv0 ++ gv1)), (sortedd (gv0 ++ gv0)), (sortedd []), (sorted (a0 :: l)), (sorted (a0 :: gv1)), (sorted (a0 :: gv0))
(sorted (a :: l)), (sorted (a :: gv1)), (sorted (a :: gv0)), (sorted (sort l)), (sorted (sort gv1)), (sorted (sort gv0)), (sorted (insert a0 l)), (sorted (insert a0 gv1)), (sorted (insert a0 gv0)), (sorted (insert a l))
(sorted (insert a gv1)), (sorted (insert a gv0)), (sorted (l ++ l)), (sorted (l ++ gv1)), (sorted (l ++ gv0)), (sorted (gv1 ++ l)), (sorted (gv1 ++ gv1)), (sorted (gv1 ++ gv0)), (sorted (gv0 ++ l)), (sorted (gv0 ++ gv1))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation l (a0 :: l)), (Permutation l (a0 :: gv1)), (Permutation l (a0 :: gv0)), (Permutation l (a :: l)), (Permutation l (a :: gv1)), (Permutation l (a :: gv0)), (Permutation l (sort l)), (Permutation l (sort gv1))
(Permutation l (sort gv0)), (Permutation l (insert a0 l)), (Permutation l (insert a0 gv1)), (Permutation l (insert a0 gv0)), (Permutation l (insert a l)), (Permutation l (insert a gv1)), (Permutation l (insert a gv0)), (Permutation l (l ++ l)), (Permutation l (l ++ gv1)), (Permutation l (l ++ gv0))
(Permutation l (gv1 ++ l)), (Permutation l (gv1 ++ gv1)), (Permutation l (gv1 ++ gv0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv1)), (Permutation l (gv0 ++ gv0)), (Permutation l []), (Permutation gv1 (a0 :: l)), (Permutation gv1 (a0 :: gv1)), (Permutation gv1 (a0 :: gv0))
(Permutation gv1 (a :: l)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (a :: gv0)), (Permutation gv1 (sort l)), (Permutation gv1 (sort gv1)), (Permutation gv1 (sort gv0)), (Permutation gv1 (insert a0 l)), (Permutation gv1 (insert a0 gv1)), (Permutation gv1 (insert a0 gv0)), (Permutation gv1 (insert a l))
(Permutation gv1 (insert a gv1)), (Permutation gv1 (insert a gv0)), (Permutation gv1 (l ++ l)), (Permutation gv1 (l ++ gv1)), (Permutation gv1 (l ++ gv0)), (Permutation gv1 (gv1 ++ l)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ gv0)), (Permutation gv1 (gv0 ++ l)), (Permutation gv1 (gv0 ++ gv1))
(Permutation gv1 (gv0 ++ gv0)), (Permutation gv1 []), (Permutation gv0 (a0 :: l)), (Permutation gv0 (a0 :: gv1)), (Permutation gv0 (a0 :: gv0)), (Permutation gv0 (a :: l)), (Permutation gv0 (a :: gv1)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (sort l)), (Permutation gv0 (sort gv1))
(Permutation gv0 (sort gv0)), (Permutation gv0 (insert a0 l)), (Permutation gv0 (insert a0 gv1)), (Permutation gv0 (insert a0 gv0)), (Permutation gv0 (insert a l)), (Permutation gv0 (insert a gv1)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv1)), (Permutation gv0 (l ++ gv0))
(Permutation gv0 (gv1 ++ l)), (Permutation gv0 (gv1 ++ gv1)), (Permutation gv0 (gv1 ++ gv0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ gv1)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) gv1), (Permutation (a0 :: l) gv0)
(Permutation (a0 :: l) (a0 :: gv1)), (Permutation (a0 :: l) (a0 :: gv0)), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (a :: gv1)), (Permutation (a0 :: l) (a :: gv0)), (Permutation (a0 :: l) (sort l)), (Permutation (a0 :: l) (sort gv1)), (Permutation (a0 :: l) (sort gv0)), (Permutation (a0 :: l) (insert a0 l)), (Permutation (a0 :: l) (insert a0 gv1))
(Permutation (a0 :: l) (insert a0 gv0)), (Permutation (a0 :: l) (insert a l)), (Permutation (a0 :: l) (insert a gv1)), (Permutation (a0 :: l) (insert a gv0)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) (l ++ gv1)), (Permutation (a0 :: l) (l ++ gv0)), (Permutation (a0 :: l) (gv1 ++ l)), (Permutation (a0 :: l) (gv1 ++ gv1)), (Permutation (a0 :: l) (gv1 ++ gv0))
(Permutation (a0 :: l) (gv0 ++ l)), (Permutation (a0 :: l) (gv0 ++ gv1)), (Permutation (a0 :: l) (gv0 ++ gv0)), (Permutation (a0 :: l) []), (Permutation (a0 :: gv1) l), (Permutation (a0 :: gv1) gv1), (Permutation (a0 :: gv1) gv0), (Permutation (a0 :: gv1) (a0 :: l)), (Permutation (a0 :: gv1) (a0 :: gv0)), (Permutation (a0 :: gv1) (a :: l))
(Permutation (a0 :: gv1) (a :: gv1)), (Permutation (a0 :: gv1) (a :: gv0)), (Permutation (a0 :: gv1) (sort l)), (Permutation (a0 :: gv1) (sort gv1)), (Permutation (a0 :: gv1) (sort gv0)), (Permutation (a0 :: gv1) (insert a0 l)), (Permutation (a0 :: gv1) (insert a0 gv1)), (Permutation (a0 :: gv1) (insert a0 gv0)), (Permutation (a0 :: gv1) (insert a l)), (Permutation (a0 :: gv1) (insert a gv1))
(Permutation (a0 :: gv1) (insert a gv0)), (Permutation (a0 :: gv1) (l ++ l)), (Permutation (a0 :: gv1) (l ++ gv1)), (Permutation (a0 :: gv1) (l ++ gv0)), (Permutation (a0 :: gv1) (gv1 ++ l)), (Permutation (a0 :: gv1) (gv1 ++ gv1)), (Permutation (a0 :: gv1) (gv1 ++ gv0)), (Permutation (a0 :: gv1) (gv0 ++ l)), (Permutation (a0 :: gv1) (gv0 ++ gv1)), (Permutation (a0 :: gv1) (gv0 ++ gv0))
(Permutation (a0 :: gv1) []), (Permutation (a0 :: gv0) l), (Permutation (a0 :: gv0) gv1), (Permutation (a0 :: gv0) gv0), (Permutation (a0 :: gv0) (a0 :: l)), (Permutation (a0 :: gv0) (a0 :: gv1)), (Permutation (a0 :: gv0) (a :: l)), (Permutation (a0 :: gv0) (a :: gv1)), (Permutation (a0 :: gv0) (a :: gv0)), (Permutation (a0 :: gv0) (sort l))
(Permutation (a0 :: gv0) (sort gv1)), (Permutation (a0 :: gv0) (sort gv0)), (Permutation (a0 :: gv0) (insert a0 l)), (Permutation (a0 :: gv0) (insert a0 gv1)), (Permutation (a0 :: gv0) (insert a0 gv0)), (Permutation (a0 :: gv0) (insert a l)), (Permutation (a0 :: gv0) (insert a gv1)), (Permutation (a0 :: gv0) (insert a gv0)), (Permutation (a0 :: gv0) (l ++ l)), (Permutation (a0 :: gv0) (l ++ gv1))
(Permutation (a0 :: gv0) (l ++ gv0)), (Permutation (a0 :: gv0) (gv1 ++ l)), (Permutation (a0 :: gv0) (gv1 ++ gv1)), (Permutation (a0 :: gv0) (gv1 ++ gv0)), (Permutation (a0 :: gv0) (gv0 ++ l)), (Permutation (a0 :: gv0) (gv0 ++ gv1)), (Permutation (a0 :: gv0) (gv0 ++ gv0)), (Permutation (a0 :: gv0) []), (Permutation (a :: l) l), (Permutation (a :: l) gv1)
(Permutation (a :: l) gv0), (Permutation (a :: l) (a0 :: l)), (Permutation (a :: l) (a0 :: gv1)), (Permutation (a :: l) (a0 :: gv0)), (Permutation (a :: l) (a :: gv1)), (Permutation (a :: l) (a :: gv0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort gv1)), (Permutation (a :: l) (sort gv0)), (Permutation (a :: l) (insert a0 l))
(Permutation (a :: l) (insert a0 gv1)), (Permutation (a :: l) (insert a0 gv0)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a gv1)), (Permutation (a :: l) (insert a gv0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv1)), (Permutation (a :: l) (l ++ gv0)), (Permutation (a :: l) (gv1 ++ l)), (Permutation (a :: l) (gv1 ++ gv1))
(Permutation (a :: l) (gv1 ++ gv0)), (Permutation (a :: l) (gv0 ++ l)), (Permutation (a :: l) (gv0 ++ gv1)), (Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) []), (Permutation (a :: gv1) l), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) gv0), (Permutation (a :: gv1) (a0 :: l)), (Permutation (a :: gv1) (a0 :: gv1))
(Permutation (a :: gv1) (a0 :: gv0)), (Permutation (a :: gv1) (a :: l)), (Permutation (a :: gv1) (a :: gv0)), (Permutation (a :: gv1) (sort l)), (Permutation (a :: gv1) (sort gv1)), (Permutation (a :: gv1) (sort gv0)), (Permutation (a :: gv1) (insert a0 l)), (Permutation (a :: gv1) (insert a0 gv1)), (Permutation (a :: gv1) (insert a0 gv0)), (Permutation (a :: gv1) (insert a l))
(Permutation (a :: gv1) (insert a gv1)), (Permutation (a :: gv1) (insert a gv0)), (Permutation (a :: gv1) (l ++ l)), (Permutation (a :: gv1) (l ++ gv1)), (Permutation (a :: gv1) (l ++ gv0)), (Permutation (a :: gv1) (gv1 ++ l)), (Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ gv0)), (Permutation (a :: gv1) (gv0 ++ l)), (Permutation (a :: gv1) (gv0 ++ gv1))
(Permutation (a :: gv1) (gv0 ++ gv0)), (Permutation (a :: gv1) []), (Permutation (a :: gv0) l), (Permutation (a :: gv0) gv1), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a0 :: l)), (Permutation (a :: gv0) (a0 :: gv1)), (Permutation (a :: gv0) (a0 :: gv0)), (Permutation (a :: gv0) (a :: l)), (Permutation (a :: gv0) (a :: gv1))
(Permutation (a :: gv0) (sort l)), (Permutation (a :: gv0) (sort gv1)), (Permutation (a :: gv0) (sort gv0)), (Permutation (a :: gv0) (insert a0 l)), (Permutation (a :: gv0) (insert a0 gv1)), (Permutation (a :: gv0) (insert a0 gv0)), (Permutation (a :: gv0) (insert a l)), (Permutation (a :: gv0) (insert a gv1)), (Permutation (a :: gv0) (insert a gv0)), (Permutation (a :: gv0) (l ++ l))
(Permutation (a :: gv0) (l ++ gv1)), (Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (gv1 ++ l)), (Permutation (a :: gv0) (gv1 ++ gv1)), (Permutation (a :: gv0) (gv1 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l)), (Permutation (a :: gv0) (gv0 ++ gv1)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (sort l) l)
(Permutation (sort l) gv1), (Permutation (sort l) gv0), (Permutation (sort l) (a0 :: l)), (Permutation (sort l) (a0 :: gv1)), (Permutation (sort l) (a0 :: gv0)), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: gv1)), (Permutation (sort l) (a :: gv0)), (Permutation (sort l) (sort gv1)), (Permutation (sort l) (sort gv0))
(Permutation (sort l) (insert a0 l)), (Permutation (sort l) (insert a0 gv1)), (Permutation (sort l) (insert a0 gv0)), (Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a gv1)), (Permutation (sort l) (insert a gv0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ gv1)), (Permutation (sort l) (l ++ gv0)), (Permutation (sort l) (gv1 ++ l))
(Permutation (sort l) (gv1 ++ gv1)), (Permutation (sort l) (gv1 ++ gv0)), (Permutation (sort l) (gv0 ++ l)), (Permutation (sort l) (gv0 ++ gv1)), (Permutation (sort l) (gv0 ++ gv0)), (Permutation (sort l) []), (Permutation (sort gv1) l), (Permutation (sort gv1) gv1), (Permutation (sort gv1) gv0), (Permutation (sort gv1) (a0 :: l))
(Permutation (sort gv1) (a0 :: gv1)), (Permutation (sort gv1) (a0 :: gv0)), (Permutation (sort gv1) (a :: l)), (Permutation (sort gv1) (a :: gv1)), (Permutation (sort gv1) (a :: gv0)), (Permutation (sort gv1) (sort l)), (Permutation (sort gv1) (sort gv0)), (Permutation (sort gv1) (insert a0 l)), (Permutation (sort gv1) (insert a0 gv1)), (Permutation (sort gv1) (insert a0 gv0))
(Permutation (sort gv1) (insert a l)), (Permutation (sort gv1) (insert a gv1)), (Permutation (sort gv1) (insert a gv0)), (Permutation (sort gv1) (l ++ l)), (Permutation (sort gv1) (l ++ gv1)), (Permutation (sort gv1) (l ++ gv0)), (Permutation (sort gv1) (gv1 ++ l)), (Permutation (sort gv1) (gv1 ++ gv1)), (Permutation (sort gv1) (gv1 ++ gv0)), (Permutation (sort gv1) (gv0 ++ l))
(Permutation (sort gv1) (gv0 ++ gv1)), (Permutation (sort gv1) (gv0 ++ gv0)), (Permutation (sort gv1) []), (Permutation (sort gv0) l), (Permutation (sort gv0) gv1), (Permutation (sort gv0) gv0), (Permutation (sort gv0) (a0 :: l)), (Permutation (sort gv0) (a0 :: gv1)), (Permutation (sort gv0) (a0 :: gv0)), (Permutation (sort gv0) (a :: l))
(Permutation (sort gv0) (a :: gv1)), (Permutation (sort gv0) (a :: gv0)), (Permutation (sort gv0) (sort l)), (Permutation (sort gv0) (sort gv1)), (Permutation (sort gv0) (insert a0 l)), (Permutation (sort gv0) (insert a0 gv1)), (Permutation (sort gv0) (insert a0 gv0)), (Permutation (sort gv0) (insert a l)), (Permutation (sort gv0) (insert a gv1)), (Permutation (sort gv0) (insert a gv0))
(Permutation (sort gv0) (l ++ l)), (Permutation (sort gv0) (l ++ gv1)), (Permutation (sort gv0) (l ++ gv0)), (Permutation (sort gv0) (gv1 ++ l)), (Permutation (sort gv0) (gv1 ++ gv1)), (Permutation (sort gv0) (gv1 ++ gv0)), (Permutation (sort gv0) (gv0 ++ l)), (Permutation (sort gv0) (gv0 ++ gv1)), (Permutation (sort gv0) (gv0 ++ gv0)), (Permutation (sort gv0) [])
(Permutation (insert a0 l) l), (Permutation (insert a0 l) gv1), (Permutation (insert a0 l) gv0), (Permutation (insert a0 l) (a0 :: l)), (Permutation (insert a0 l) (a0 :: gv1)), (Permutation (insert a0 l) (a0 :: gv0)), (Permutation (insert a0 l) (a :: l)), (Permutation (insert a0 l) (a :: gv1)), (Permutation (insert a0 l) (a :: gv0)), (Permutation (insert a0 l) (sort l))
(Permutation (insert a0 l) (sort gv1)), (Permutation (insert a0 l) (sort gv0)), (Permutation (insert a0 l) (insert a0 gv1)), (Permutation (insert a0 l) (insert a0 gv0)), (Permutation (insert a0 l) (insert a l)), (Permutation (insert a0 l) (insert a gv1)), (Permutation (insert a0 l) (insert a gv0)), (Permutation (insert a0 l) (l ++ l)), (Permutation (insert a0 l) (l ++ gv1)), (Permutation (insert a0 l) (l ++ gv0))
(Permutation (insert a0 l) (gv1 ++ l)), (Permutation (insert a0 l) (gv1 ++ gv1)), (Permutation (insert a0 l) (gv1 ++ gv0)), (Permutation (insert a0 l) (gv0 ++ l)), (Permutation (insert a0 l) (gv0 ++ gv1)), (Permutation (insert a0 l) (gv0 ++ gv0)), (Permutation (insert a0 l) []), (Permutation (insert a0 gv1) l), (Permutation (insert a0 gv1) gv1), (Permutation (insert a0 gv1) gv0)
(Permutation (insert a0 gv1) (a0 :: l)), (Permutation (insert a0 gv1) (a0 :: gv1)), (Permutation (insert a0 gv1) (a0 :: gv0)), (Permutation (insert a0 gv1) (a :: l)), (Permutation (insert a0 gv1) (a :: gv1)), (Permutation (insert a0 gv1) (a :: gv0)), (Permutation (insert a0 gv1) (sort l)), (Permutation (insert a0 gv1) (sort gv1)), (Permutation (insert a0 gv1) (sort gv0)), (Permutation (insert a0 gv1) (insert a0 l))
(Permutation (insert a0 gv1) (insert a0 gv0)), (Permutation (insert a0 gv1) (insert a l)), (Permutation (insert a0 gv1) (insert a gv1)), (Permutation (insert a0 gv1) (insert a gv0)), (Permutation (insert a0 gv1) (l ++ l)), (Permutation (insert a0 gv1) (l ++ gv1)), (Permutation (insert a0 gv1) (l ++ gv0)), (Permutation (insert a0 gv1) (gv1 ++ l)), (Permutation (insert a0 gv1) (gv1 ++ gv1)), (Permutation (insert a0 gv1) (gv1 ++ gv0))
(Permutation (insert a0 gv1) (gv0 ++ l)), (Permutation (insert a0 gv1) (gv0 ++ gv1)), (Permutation (insert a0 gv1) (gv0 ++ gv0)), (Permutation (insert a0 gv1) []), (Permutation (insert a0 gv0) l), (Permutation (insert a0 gv0) gv1), (Permutation (insert a0 gv0) gv0), (Permutation (insert a0 gv0) (a0 :: l)), (Permutation (insert a0 gv0) (a0 :: gv1)), (Permutation (insert a0 gv0) (a0 :: gv0))
(Permutation (insert a0 gv0) (a :: l)), (Permutation (insert a0 gv0) (a :: gv1)), (Permutation (insert a0 gv0) (a :: gv0)), (Permutation (insert a0 gv0) (sort l)), (Permutation (insert a0 gv0) (sort gv1)), (Permutation (insert a0 gv0) (sort gv0)), (Permutation (insert a0 gv0) (insert a0 l)), (Permutation (insert a0 gv0) (insert a0 gv1)), (Permutation (insert a0 gv0) (insert a l)), (Permutation (insert a0 gv0) (insert a gv1))
(Permutation (insert a0 gv0) (insert a gv0)), (Permutation (insert a0 gv0) (l ++ l)), (Permutation (insert a0 gv0) (l ++ gv1)), (Permutation (insert a0 gv0) (l ++ gv0)), (Permutation (insert a0 gv0) (gv1 ++ l)), (Permutation (insert a0 gv0) (gv1 ++ gv1)), (Permutation (insert a0 gv0) (gv1 ++ gv0)), (Permutation (insert a0 gv0) (gv0 ++ l)), (Permutation (insert a0 gv0) (gv0 ++ gv1)), (Permutation (insert a0 gv0) (gv0 ++ gv0))
(Permutation (insert a0 gv0) []), (Permutation (insert a l) l), (Permutation (insert a l) gv1), (Permutation (insert a l) gv0), (Permutation (insert a l) (a0 :: l)), (Permutation (insert a l) (a0 :: gv1)), (Permutation (insert a l) (a0 :: gv0)), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: gv1)), (Permutation (insert a l) (a :: gv0))
(Permutation (insert a l) (sort l)), (Permutation (insert a l) (sort gv1)), (Permutation (insert a l) (sort gv0)), (Permutation (insert a l) (insert a0 l)), (Permutation (insert a l) (insert a0 gv1)), (Permutation (insert a l) (insert a0 gv0)), (Permutation (insert a l) (insert a gv1)), (Permutation (insert a l) (insert a gv0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ gv1))
(Permutation (insert a l) (l ++ gv0)), (Permutation (insert a l) (gv1 ++ l)), (Permutation (insert a l) (gv1 ++ gv1)), (Permutation (insert a l) (gv1 ++ gv0)), (Permutation (insert a l) (gv0 ++ l)), (Permutation (insert a l) (gv0 ++ gv1)), (Permutation (insert a l) (gv0 ++ gv0)), (Permutation (insert a l) []), (Permutation (insert a gv1) l), (Permutation (insert a gv1) gv1)
(Permutation (insert a gv1) gv0), (Permutation (insert a gv1) (a0 :: l)), (Permutation (insert a gv1) (a0 :: gv1)), (Permutation (insert a gv1) (a0 :: gv0)), (Permutation (insert a gv1) (a :: l)), (Permutation (insert a gv1) (a :: gv1)), (Permutation (insert a gv1) (a :: gv0)), (Permutation (insert a gv1) (sort l)), (Permutation (insert a gv1) (sort gv1)), (Permutation (insert a gv1) (sort gv0))
(Permutation (insert a gv1) (insert a0 l)), (Permutation (insert a gv1) (insert a0 gv1)), (Permutation (insert a gv1) (insert a0 gv0)), (Permutation (insert a gv1) (insert a l)), (Permutation (insert a gv1) (insert a gv0)), (Permutation (insert a gv1) (l ++ l)), (Permutation (insert a gv1) (l ++ gv1)), (Permutation (insert a gv1) (l ++ gv0)), (Permutation (insert a gv1) (gv1 ++ l)), (Permutation (insert a gv1) (gv1 ++ gv1))
(Permutation (insert a gv1) (gv1 ++ gv0)), (Permutation (insert a gv1) (gv0 ++ l)), (Permutation (insert a gv1) (gv0 ++ gv1)), (Permutation (insert a gv1) (gv0 ++ gv0)), (Permutation (insert a gv1) []), (Permutation (insert a gv0) l), (Permutation (insert a gv0) gv1), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a0 :: l)), (Permutation (insert a gv0) (a0 :: gv1))
(Permutation (insert a gv0) (a0 :: gv0)), (Permutation (insert a gv0) (a :: l)), (Permutation (insert a gv0) (a :: gv1)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (sort l)), (Permutation (insert a gv0) (sort gv1)), (Permutation (insert a gv0) (sort gv0)), (Permutation (insert a gv0) (insert a0 l)), (Permutation (insert a gv0) (insert a0 gv1)), (Permutation (insert a gv0) (insert a0 gv0))
(Permutation (insert a gv0) (insert a l)), (Permutation (insert a gv0) (insert a gv1)), (Permutation (insert a gv0) (l ++ l)), (Permutation (insert a gv0) (l ++ gv1)), (Permutation (insert a gv0) (l ++ gv0)), (Permutation (insert a gv0) (gv1 ++ l)), (Permutation (insert a gv0) (gv1 ++ gv1)), (Permutation (insert a gv0) (gv1 ++ gv0)), (Permutation (insert a gv0) (gv0 ++ l)), (Permutation (insert a gv0) (gv0 ++ gv1))
(Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv1), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a0 :: gv1)), (Permutation (l ++ l) (a0 :: gv0)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv1))
(Permutation (l ++ l) (a :: gv0)), (Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (sort gv1)), (Permutation (l ++ l) (sort gv0)), (Permutation (l ++ l) (insert a0 l)), (Permutation (l ++ l) (insert a0 gv1)), (Permutation (l ++ l) (insert a0 gv0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a gv1)), (Permutation (l ++ l) (insert a gv0))
(Permutation (l ++ l) (l ++ gv1)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv1 ++ l)), (Permutation (l ++ l) (gv1 ++ gv1)), (Permutation (l ++ l) (gv1 ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv1)), (Permutation (l ++ l) (gv0 ++ gv0)), (Permutation (l ++ l) []), (Permutation (l ++ gv1) l)
(Permutation (l ++ gv1) gv1), (Permutation (l ++ gv1) gv0), (Permutation (l ++ gv1) (a0 :: l)), (Permutation (l ++ gv1) (a0 :: gv1)), (Permutation (l ++ gv1) (a0 :: gv0)), (Permutation (l ++ gv1) (a :: l)), (Permutation (l ++ gv1) (a :: gv1)), (Permutation (l ++ gv1) (a :: gv0)), (Permutation (l ++ gv1) (sort l)), (Permutation (l ++ gv1) (sort gv1))
(Permutation (l ++ gv1) (sort gv0)), (Permutation (l ++ gv1) (insert a0 l)), (Permutation (l ++ gv1) (insert a0 gv1)), (Permutation (l ++ gv1) (insert a0 gv0)), (Permutation (l ++ gv1) (insert a l)), (Permutation (l ++ gv1) (insert a gv1)), (Permutation (l ++ gv1) (insert a gv0)), (Permutation (l ++ gv1) (l ++ l)), (Permutation (l ++ gv1) (l ++ gv0)), (Permutation (l ++ gv1) (gv1 ++ l))
(Permutation (l ++ gv1) (gv1 ++ gv1)), (Permutation (l ++ gv1) (gv1 ++ gv0)), (Permutation (l ++ gv1) (gv0 ++ l)), (Permutation (l ++ gv1) (gv0 ++ gv1)), (Permutation (l ++ gv1) (gv0 ++ gv0)), (Permutation (l ++ gv1) []), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv1), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (a0 :: l))
(Permutation (l ++ gv0) (a0 :: gv1)), (Permutation (l ++ gv0) (a0 :: gv0)), (Permutation (l ++ gv0) (a :: l)), (Permutation (l ++ gv0) (a :: gv1)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (sort l)), (Permutation (l ++ gv0) (sort gv1)), (Permutation (l ++ gv0) (sort gv0)), (Permutation (l ++ gv0) (insert a0 l)), (Permutation (l ++ gv0) (insert a0 gv1))
(Permutation (l ++ gv0) (insert a0 gv0)), (Permutation (l ++ gv0) (insert a l)), (Permutation (l ++ gv0) (insert a gv1)), (Permutation (l ++ gv0) (insert a gv0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (l ++ gv1)), (Permutation (l ++ gv0) (gv1 ++ l)), (Permutation (l ++ gv0) (gv1 ++ gv1)), (Permutation (l ++ gv0) (gv1 ++ gv0)), (Permutation (l ++ gv0) (gv0 ++ l))
(Permutation (l ++ gv0) (gv0 ++ gv1)), (Permutation (l ++ gv0) (gv0 ++ gv0)), (Permutation (l ++ gv0) []), (Permutation (gv1 ++ l) l), (Permutation (gv1 ++ l) gv1), (Permutation (gv1 ++ l) gv0), (Permutation (gv1 ++ l) (a0 :: l)), (Permutation (gv1 ++ l) (a0 :: gv1)), (Permutation (gv1 ++ l) (a0 :: gv0)), (Permutation (gv1 ++ l) (a :: l))
(Permutation (gv1 ++ l) (a :: gv1)), (Permutation (gv1 ++ l) (a :: gv0)), (Permutation (gv1 ++ l) (sort l)), (Permutation (gv1 ++ l) (sort gv1)), (Permutation (gv1 ++ l) (sort gv0)), (Permutation (gv1 ++ l) (insert a0 l)), (Permutation (gv1 ++ l) (insert a0 gv1)), (Permutation (gv1 ++ l) (insert a0 gv0)), (Permutation (gv1 ++ l) (insert a l)), (Permutation (gv1 ++ l) (insert a gv1))
(Permutation (gv1 ++ l) (insert a gv0)), (Permutation (gv1 ++ l) (l ++ l)), (Permutation (gv1 ++ l) (l ++ gv1)), (Permutation (gv1 ++ l) (l ++ gv0)), (Permutation (gv1 ++ l) (gv1 ++ gv1)), (Permutation (gv1 ++ l) (gv1 ++ gv0)), (Permutation (gv1 ++ l) (gv0 ++ l)), (Permutation (gv1 ++ l) (gv0 ++ gv1)), (Permutation (gv1 ++ l) (gv0 ++ gv0)), (Permutation (gv1 ++ l) [])
(Permutation (gv1 ++ gv1) l), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) gv0), (Permutation (gv1 ++ gv1) (a0 :: l)), (Permutation (gv1 ++ gv1) (a0 :: gv1)), (Permutation (gv1 ++ gv1) (a0 :: gv0)), (Permutation (gv1 ++ gv1) (a :: l)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (a :: gv0)), (Permutation (gv1 ++ gv1) (sort l))
(Permutation (gv1 ++ gv1) (sort gv1)), (Permutation (gv1 ++ gv1) (sort gv0)), (Permutation (gv1 ++ gv1) (insert a0 l)), (Permutation (gv1 ++ gv1) (insert a0 gv1)), (Permutation (gv1 ++ gv1) (insert a0 gv0)), (Permutation (gv1 ++ gv1) (insert a l)), (Permutation (gv1 ++ gv1) (insert a gv1)), (Permutation (gv1 ++ gv1) (insert a gv0)), (Permutation (gv1 ++ gv1) (l ++ l)), (Permutation (gv1 ++ gv1) (l ++ gv1))
(Permutation (gv1 ++ gv1) (l ++ gv0)), (Permutation (gv1 ++ gv1) (gv1 ++ l)), (Permutation (gv1 ++ gv1) (gv1 ++ gv0)), (Permutation (gv1 ++ gv1) (gv0 ++ l)), (Permutation (gv1 ++ gv1) (gv0 ++ gv1)), (Permutation (gv1 ++ gv1) (gv0 ++ gv0)), (Permutation (gv1 ++ gv1) []), (Permutation (gv1 ++ gv0) l), (Permutation (gv1 ++ gv0) gv1), (Permutation (gv1 ++ gv0) gv0)
(Permutation (gv1 ++ gv0) (a0 :: l)), (Permutation (gv1 ++ gv0) (a0 :: gv1)), (Permutation (gv1 ++ gv0) (a0 :: gv0)), (Permutation (gv1 ++ gv0) (a :: l)), (Permutation (gv1 ++ gv0) (a :: gv1)), (Permutation (gv1 ++ gv0) (a :: gv0)), (Permutation (gv1 ++ gv0) (sort l)), (Permutation (gv1 ++ gv0) (sort gv1)), (Permutation (gv1 ++ gv0) (sort gv0)), (Permutation (gv1 ++ gv0) (insert a0 l))
(Permutation (gv1 ++ gv0) (insert a0 gv1)), (Permutation (gv1 ++ gv0) (insert a0 gv0)), (Permutation (gv1 ++ gv0) (insert a l)), (Permutation (gv1 ++ gv0) (insert a gv1)), (Permutation (gv1 ++ gv0) (insert a gv0)), (Permutation (gv1 ++ gv0) (l ++ l)), (Permutation (gv1 ++ gv0) (l ++ gv1)), (Permutation (gv1 ++ gv0) (l ++ gv0)), (Permutation (gv1 ++ gv0) (gv1 ++ l)), (Permutation (gv1 ++ gv0) (gv1 ++ gv1))
(Permutation (gv1 ++ gv0) (gv0 ++ l)), (Permutation (gv1 ++ gv0) (gv0 ++ gv1)), (Permutation (gv1 ++ gv0) (gv0 ++ gv0)), (Permutation (gv1 ++ gv0) []), (Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) gv1), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (a0 :: l)), (Permutation (gv0 ++ l) (a0 :: gv1)), (Permutation (gv0 ++ l) (a0 :: gv0))
(Permutation (gv0 ++ l) (a :: l)), (Permutation (gv0 ++ l) (a :: gv1)), (Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (sort l)), (Permutation (gv0 ++ l) (sort gv1)), (Permutation (gv0 ++ l) (sort gv0)), (Permutation (gv0 ++ l) (insert a0 l)), (Permutation (gv0 ++ l) (insert a0 gv1)), (Permutation (gv0 ++ l) (insert a0 gv0)), (Permutation (gv0 ++ l) (insert a l))
(Permutation (gv0 ++ l) (insert a gv1)), (Permutation (gv0 ++ l) (insert a gv0)), (Permutation (gv0 ++ l) (l ++ l)), (Permutation (gv0 ++ l) (l ++ gv1)), (Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (gv1 ++ l)), (Permutation (gv0 ++ l) (gv1 ++ gv1)), (Permutation (gv0 ++ l) (gv1 ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ gv1)), (Permutation (gv0 ++ l) (gv0 ++ gv0))
(Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv1) l), (Permutation (gv0 ++ gv1) gv1), (Permutation (gv0 ++ gv1) gv0), (Permutation (gv0 ++ gv1) (a0 :: l)), (Permutation (gv0 ++ gv1) (a0 :: gv1)), (Permutation (gv0 ++ gv1) (a0 :: gv0)), (Permutation (gv0 ++ gv1) (a :: l)), (Permutation (gv0 ++ gv1) (a :: gv1)), (Permutation (gv0 ++ gv1) (a :: gv0))
(Permutation (gv0 ++ gv1) (sort l)), (Permutation (gv0 ++ gv1) (sort gv1)), (Permutation (gv0 ++ gv1) (sort gv0)), (Permutation (gv0 ++ gv1) (insert a0 l)), (Permutation (gv0 ++ gv1) (insert a0 gv1)), (Permutation (gv0 ++ gv1) (insert a0 gv0)), (Permutation (gv0 ++ gv1) (insert a l)), (Permutation (gv0 ++ gv1) (insert a gv1)), (Permutation (gv0 ++ gv1) (insert a gv0)), (Permutation (gv0 ++ gv1) (l ++ l))
(Permutation (gv0 ++ gv1) (l ++ gv1)), (Permutation (gv0 ++ gv1) (l ++ gv0)), (Permutation (gv0 ++ gv1) (gv1 ++ l)), (Permutation (gv0 ++ gv1) (gv1 ++ gv1)), (Permutation (gv0 ++ gv1) (gv1 ++ gv0)), (Permutation (gv0 ++ gv1) (gv0 ++ l)), (Permutation (gv0 ++ gv1) (gv0 ++ gv0)), (Permutation (gv0 ++ gv1) []), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) gv1)
(Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a0 :: l)), (Permutation (gv0 ++ gv0) (a0 :: gv1)), (Permutation (gv0 ++ gv0) (a0 :: gv0)), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: gv1)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (sort l)), (Permutation (gv0 ++ gv0) (sort gv1)), (Permutation (gv0 ++ gv0) (sort gv0))
(Permutation (gv0 ++ gv0) (insert a0 l)), (Permutation (gv0 ++ gv0) (insert a0 gv1)), (Permutation (gv0 ++ gv0) (insert a0 gv0)), (Permutation (gv0 ++ gv0) (insert a l)), (Permutation (gv0 ++ gv0) (insert a gv1)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ gv1)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (gv1 ++ l))
(Permutation (gv0 ++ gv0) (gv1 ++ gv1)), (Permutation (gv0 ++ gv0) (gv1 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l)), (Permutation (gv0 ++ gv0) (gv0 ++ gv1)), (Permutation (gv0 ++ gv0) []), (Permutation [] l), (Permutation [] gv1), (Permutation [] gv0), (Permutation [] (a0 :: l)), (Permutation [] (a0 :: gv1))
(Permutation [] (a0 :: gv0)), (Permutation [] (a :: l)), (Permutation [] (a :: gv1)), (Permutation [] (a :: gv0)), (Permutation [] (sort l)), (Permutation [] (sort gv1)), (Permutation [] (sort gv0)), (Permutation [] (insert a0 l)), (Permutation [] (insert a0 gv1)), (Permutation [] (insert a0 gv0))
(Permutation [] (insert a l)), (Permutation [] (insert a gv1)), (Permutation [] (insert a gv0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv1)), (Permutation [] (l ++ gv0)), (Permutation [] (gv1 ++ l)), (Permutation [] (gv1 ++ gv1)), (Permutation [] (gv1 ++ gv0)), (Permutation [] (gv0 ++ l))
(Permutation [] (gv0 ++ gv1)), (Permutation [] (gv0 ++ gv0)), (In a0 (a0 :: l)), (In a0 (a0 :: gv1)), (In a0 (a0 :: gv0)), (In a0 (a :: l)), (In a0 (a :: gv1)), (In a0 (a :: gv0)), (In a0 (sort l)), (In a0 (sort gv1))
(In a0 (sort gv0)), (In a0 (insert a0 l)), (In a0 (insert a0 gv1)), (In a0 (insert a0 gv0)), (In a0 (insert a l)), (In a0 (insert a gv1)), (In a0 (insert a gv0)), (In a0 (l ++ l)), (In a0 (l ++ gv1)), (In a0 (l ++ gv0))
(In a0 (gv1 ++ l)), (In a0 (gv1 ++ gv1)), (In a0 (gv1 ++ gv0)), (In a0 (gv0 ++ l)), (In a0 (gv0 ++ gv1)), (In a0 (gv0 ++ gv0)), (In a (a0 :: l)), (In a (a0 :: gv1)), (In a (a0 :: gv0)), (In a (a :: l))
(In a (a :: gv1)), (In a (a :: gv0)), (In a (sort l)), (In a (sort gv1)), (In a (sort gv0)), (In a (insert a0 l)), (In a (insert a0 gv1)), (In a (insert a0 gv0)), (In a (insert a l)), (In a (insert a gv1))
(In a (insert a gv0)), (In a (l ++ l)), (In a (l ++ gv1)), (In a (l ++ gv0)), (In a (gv1 ++ l)), (In a (gv1 ++ gv1)), (In a (gv1 ++ gv0)), (In a (gv0 ++ l)), (In a (gv0 ++ gv1)), (In a (gv0 ++ gv0))
(In (length l) l), (In (length l) gv1), (In (length l) gv0), (In (length l) (a0 :: l)), (In (length l) (a0 :: gv1)), (In (length l) (a0 :: gv0)), (In (length l) (a :: l)), (In (length l) (a :: gv1)), (In (length l) (a :: gv0)), (In (length l) (sort l))
(In (length l) (sort gv1)), (In (length l) (sort gv0)), (In (length l) (insert a0 l)), (In (length l) (insert a0 gv1)), (In (length l) (insert a0 gv0)), (In (length l) (insert a l)), (In (length l) (insert a gv1)), (In (length l) (insert a gv0)), (In (length l) (l ++ l)), (In (length l) (l ++ gv1))
(In (length l) (l ++ gv0)), (In (length l) (gv1 ++ l)), (In (length l) (gv1 ++ gv1)), (In (length l) (gv1 ++ gv0)), (In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ gv1)), (In (length l) (gv0 ++ gv0)), (In (length gv1) l), (In (length gv1) gv1), (In (length gv1) gv0)
(In (length gv1) (a0 :: l)), (In (length gv1) (a0 :: gv1)), (In (length gv1) (a0 :: gv0)), (In (length gv1) (a :: l)), (In (length gv1) (a :: gv1)), (In (length gv1) (a :: gv0)), (In (length gv1) (sort l)), (In (length gv1) (sort gv1)), (In (length gv1) (sort gv0)), (In (length gv1) (insert a0 l))
(In (length gv1) (insert a0 gv1)), (In (length gv1) (insert a0 gv0)), (In (length gv1) (insert a l)), (In (length gv1) (insert a gv1)), (In (length gv1) (insert a gv0)), (In (length gv1) (l ++ l)), (In (length gv1) (l ++ gv1)), (In (length gv1) (l ++ gv0)), (In (length gv1) (gv1 ++ l)), (In (length gv1) (gv1 ++ gv1))
(In (length gv1) (gv1 ++ gv0)), (In (length gv1) (gv0 ++ l)), (In (length gv1) (gv0 ++ gv1)), (In (length gv1) (gv0 ++ gv0)), (In (length gv0) l), (In (length gv0) gv1), (In (length gv0) gv0), (In (length gv0) (a0 :: l)), (In (length gv0) (a0 :: gv1)), (In (length gv0) (a0 :: gv0))
(In (length gv0) (a :: l)), (In (length gv0) (a :: gv1)), (In (length gv0) (a :: gv0)), (In (length gv0) (sort l)), (In (length gv0) (sort gv1)), (In (length gv0) (sort gv0)), (In (length gv0) (insert a0 l)), (In (length gv0) (insert a0 gv1)), (In (length gv0) (insert a0 gv0)), (In (length gv0) (insert a l))
(In (length gv0) (insert a gv1)), (In (length gv0) (insert a gv0)), (In (length gv0) (l ++ l)), (In (length gv0) (l ++ gv1)), (In (length gv0) (l ++ gv0)), (In (length gv0) (gv1 ++ l)), (In (length gv0) (gv1 ++ gv1)), (In (length gv0) (gv1 ++ gv0)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ gv1))
(In (length gv0) (gv0 ++ gv0)), (a0 < length l), (a0 < length gv1), (a0 < length gv0), (a < length l), (a < length gv1), (a < length gv0), (length l < a0), (length l < a), (length l < length gv1)
(length l < length gv0), (length gv1 < a0), (length gv1 < a), (length gv1 < length l), (length gv1 < length gv0), (length gv0 < a0), (length gv0 < a), (length gv0 < length l), (length gv0 < length gv1), (a0 <= length l)
(a0 <= length gv1), (a0 <= length gv0), (a <= length l), (a <= length gv1), (a <= length gv0), (length l <= a0), (length l <= a), (length l <= length gv1), (length l <= length gv0), (length gv1 <= a0)
(length gv1 <= a), (length gv1 <= length l), (length gv1 <= length gv0), (length gv0 <= a0), (length gv0 <= a), (length gv0 <= length l), (length gv0 <= length gv1), (~ sortedd l), (~ sortedd gv1), (~ sortedd gv0)
(~ sorted l), (~ sorted gv1), (~ sorted gv0), (~ Permutation l l), (~ Permutation l gv1), (~ Permutation l gv0), (~ Permutation gv1 l), (~ Permutation gv1 gv1), (~ Permutation gv1 gv0), (~ Permutation gv0 l)
(~ Permutation gv0 gv1), (~ Permutation gv0 gv0), (~ In a0 l), (~ In a0 gv1), (~ In a0 gv0), (~ In a l), (~ In a gv1), (~ In a gv0), (~ a0 < a0), (~ a0 < a)
(~ a < a0), (~ a < a), (~ a0 <= a0), (~ a0 <= a), (~ a <= a0), (~ a <= a), (a0 <> a0), (a0 <> a), (a <> a0), (a <> a)
(l <> l), (l <> gv1), (l <> gv0), (gv1 <> l), (gv1 <> gv1), (gv1 <> gv0), (gv0 <> l), (gv0 <> gv1), (gv0 <> gv0), (None = Some l)
(None = Some gv1), (None = Some gv0), (a0 :: l = l), (a0 :: l = gv1), (a0 :: l = gv0), (a0 :: l = sort l), (a0 :: l = sort gv1), (a0 :: l = sort gv0), (a0 :: l = insert a0 l), (a0 :: l = insert a0 gv1)
(a0 :: l = insert a0 gv0), (a0 :: l = insert a l), (a0 :: l = insert a gv1), (a0 :: l = insert a gv0), (a0 :: l = l ++ l), (a0 :: l = l ++ gv1), (a0 :: l = l ++ gv0), (a0 :: l = gv1 ++ l), (a0 :: l = gv1 ++ gv1), (a0 :: l = gv1 ++ gv0)
(a0 :: l = gv0 ++ l), (a0 :: l = gv0 ++ gv1), (a0 :: l = gv0 ++ gv0), (a0 :: l = []), (a0 :: gv1 = l), (a0 :: gv1 = gv1), (a0 :: gv1 = gv0), (a0 :: gv1 = sort l), (a0 :: gv1 = sort gv1), (a0 :: gv1 = sort gv0)
(a0 :: gv1 = insert a0 l), (a0 :: gv1 = insert a0 gv1), (a0 :: gv1 = insert a0 gv0), (a0 :: gv1 = insert a l), (a0 :: gv1 = insert a gv1), (a0 :: gv1 = insert a gv0), (a0 :: gv1 = l ++ l), (a0 :: gv1 = l ++ gv1), (a0 :: gv1 = l ++ gv0), (a0 :: gv1 = gv1 ++ l)
(a0 :: gv1 = gv1 ++ gv1), (a0 :: gv1 = gv1 ++ gv0), (a0 :: gv1 = gv0 ++ l), (a0 :: gv1 = gv0 ++ gv1), (a0 :: gv1 = gv0 ++ gv0), (a0 :: gv1 = []), (a0 :: gv0 = l), (a0 :: gv0 = gv1), (a0 :: gv0 = gv0), (a0 :: gv0 = sort l)
(a0 :: gv0 = sort gv1), (a0 :: gv0 = sort gv0), (a0 :: gv0 = insert a0 l), (a0 :: gv0 = insert a0 gv1), (a0 :: gv0 = insert a0 gv0), (a0 :: gv0 = insert a l), (a0 :: gv0 = insert a gv1), (a0 :: gv0 = insert a gv0), (a0 :: gv0 = l ++ l), (a0 :: gv0 = l ++ gv1)
(a0 :: gv0 = l ++ gv0), (a0 :: gv0 = gv1 ++ l), (a0 :: gv0 = gv1 ++ gv1), (a0 :: gv0 = gv1 ++ gv0), (a0 :: gv0 = gv0 ++ l), (a0 :: gv0 = gv0 ++ gv1), (a0 :: gv0 = gv0 ++ gv0), (a0 :: gv0 = []), (a :: l = l), (a :: l = gv1)
(a :: l = gv0), (a :: l = sort l), (a :: l = sort gv1), (a :: l = sort gv0), (a :: l = insert a0 l), (a :: l = insert a0 gv1), (a :: l = insert a0 gv0), (a :: l = insert a l), (a :: l = insert a gv1), (a :: l = insert a gv0)
(a :: l = l ++ l), (a :: l = l ++ gv1), (a :: l = l ++ gv0), (a :: l = gv1 ++ l), (a :: l = gv1 ++ gv1), (a :: l = gv1 ++ gv0), (a :: l = gv0 ++ l), (a :: l = gv0 ++ gv1), (a :: l = gv0 ++ gv0), (a :: l = [])
(a :: gv1 = l), (a :: gv1 = gv1), (a :: gv1 = gv0), (a :: gv1 = sort l), (a :: gv1 = sort gv1), (a :: gv1 = sort gv0), (a :: gv1 = insert a0 l), (a :: gv1 = insert a0 gv1), (a :: gv1 = insert a0 gv0), (a :: gv1 = insert a l)
(a :: gv1 = insert a gv1), (a :: gv1 = insert a gv0), (a :: gv1 = l ++ l), (a :: gv1 = l ++ gv1), (a :: gv1 = l ++ gv0), (a :: gv1 = gv1 ++ l), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = gv1 ++ gv0), (a :: gv1 = gv0 ++ l), (a :: gv1 = gv0 ++ gv1)
(a :: gv1 = gv0 ++ gv0), (a :: gv1 = []), (a :: gv0 = l), (a :: gv0 = gv1), (a :: gv0 = gv0), (a :: gv0 = sort l), (a :: gv0 = sort gv1), (a :: gv0 = sort gv0), (a :: gv0 = insert a0 l), (a :: gv0 = insert a0 gv1)
(a :: gv0 = insert a0 gv0), (a :: gv0 = insert a l), (a :: gv0 = insert a gv1), (a :: gv0 = insert a gv0), (a :: gv0 = l ++ l), (a :: gv0 = l ++ gv1), (a :: gv0 = l ++ gv0), (a :: gv0 = gv1 ++ l), (a :: gv0 = gv1 ++ gv1), (a :: gv0 = gv1 ++ gv0)
(a :: gv0 = gv0 ++ l), (a :: gv0 = gv0 ++ gv1), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (sort l = l), (sort l = gv1), (sort l = gv0), (sort l = insert a0 l), (sort l = insert a0 gv1), (sort l = insert a0 gv0)
(sort l = insert a l), (sort l = insert a gv1), (sort l = insert a gv0), (sort l = l ++ l), (sort l = l ++ gv1), (sort l = l ++ gv0), (sort l = gv1 ++ l), (sort l = gv1 ++ gv1), (sort l = gv1 ++ gv0), (sort l = gv0 ++ l)
(sort l = gv0 ++ gv1), (sort l = gv0 ++ gv0), (sort gv1 = l), (sort gv1 = gv1), (sort gv1 = gv0), (sort gv1 = insert a0 l), (sort gv1 = insert a0 gv1), (sort gv1 = insert a0 gv0), (sort gv1 = insert a l), (sort gv1 = insert a gv1)
(sort gv1 = insert a gv0), (sort gv1 = l ++ l), (sort gv1 = l ++ gv1), (sort gv1 = l ++ gv0), (sort gv1 = gv1 ++ l), (sort gv1 = gv1 ++ gv1), (sort gv1 = gv1 ++ gv0), (sort gv1 = gv0 ++ l), (sort gv1 = gv0 ++ gv1), (sort gv1 = gv0 ++ gv0)
(sort gv0 = l), (sort gv0 = gv1), (sort gv0 = gv0), (sort gv0 = insert a0 l), (sort gv0 = insert a0 gv1), (sort gv0 = insert a0 gv0), (sort gv0 = insert a l), (sort gv0 = insert a gv1), (sort gv0 = insert a gv0), (sort gv0 = l ++ l)
(sort gv0 = l ++ gv1), (sort gv0 = l ++ gv0), (sort gv0 = gv1 ++ l), (sort gv0 = gv1 ++ gv1), (sort gv0 = gv1 ++ gv0), (sort gv0 = gv0 ++ l), (sort gv0 = gv0 ++ gv1), (sort gv0 = gv0 ++ gv0), (insert a0 l = l), (insert a0 l = gv1)
(insert a0 l = gv0), (insert a0 l = l ++ l), (insert a0 l = l ++ gv1), (insert a0 l = l ++ gv0), (insert a0 l = gv1 ++ l), (insert a0 l = gv1 ++ gv1), (insert a0 l = gv1 ++ gv0), (insert a0 l = gv0 ++ l), (insert a0 l = gv0 ++ gv1), (insert a0 l = gv0 ++ gv0)
(insert a0 gv1 = l), (insert a0 gv1 = gv1), (insert a0 gv1 = gv0), (insert a0 gv1 = l ++ l), (insert a0 gv1 = l ++ gv1), (insert a0 gv1 = l ++ gv0), (insert a0 gv1 = gv1 ++ l), (insert a0 gv1 = gv1 ++ gv1), (insert a0 gv1 = gv1 ++ gv0), (insert a0 gv1 = gv0 ++ l)
(insert a0 gv1 = gv0 ++ gv1), (insert a0 gv1 = gv0 ++ gv0), (insert a0 gv0 = l), (insert a0 gv0 = gv1), (insert a0 gv0 = gv0), (insert a0 gv0 = l ++ l), (insert a0 gv0 = l ++ gv1), (insert a0 gv0 = l ++ gv0), (insert a0 gv0 = gv1 ++ l), (insert a0 gv0 = gv1 ++ gv1)
(insert a0 gv0 = gv1 ++ gv0), (insert a0 gv0 = gv0 ++ l), (insert a0 gv0 = gv0 ++ gv1), (insert a0 gv0 = gv0 ++ gv0), (insert a l = l), (insert a l = gv1), (insert a l = gv0), (insert a l = l ++ l), (insert a l = l ++ gv1), (insert a l = l ++ gv0)
(insert a l = gv1 ++ l), (insert a l = gv1 ++ gv1), (insert a l = gv1 ++ gv0), (insert a l = gv0 ++ l), (insert a l = gv0 ++ gv1), (insert a l = gv0 ++ gv0), (insert a gv1 = l), (insert a gv1 = gv1), (insert a gv1 = gv0), (insert a gv1 = l ++ l)
(insert a gv1 = l ++ gv1), (insert a gv1 = l ++ gv0), (insert a gv1 = gv1 ++ l), (insert a gv1 = gv1 ++ gv1), (insert a gv1 = gv1 ++ gv0), (insert a gv1 = gv0 ++ l), (insert a gv1 = gv0 ++ gv1), (insert a gv1 = gv0 ++ gv0), (insert a gv0 = l), (insert a gv0 = gv1)
(insert a gv0 = gv0), (insert a gv0 = l ++ l), (insert a gv0 = l ++ gv1), (insert a gv0 = l ++ gv0), (insert a gv0 = gv1 ++ l), (insert a gv0 = gv1 ++ gv1), (insert a gv0 = gv1 ++ gv0), (insert a gv0 = gv0 ++ l), (insert a gv0 = gv0 ++ gv1), (insert a gv0 = gv0 ++ gv0)
(l ++ l = l), (l ++ l = gv1), (l ++ l = gv0), (l ++ gv1 = l), (l ++ gv1 = gv1), (l ++ gv1 = gv0), (l ++ gv0 = l), (l ++ gv0 = gv1), (l ++ gv0 = gv0), (gv1 ++ l = l)
(gv1 ++ l = gv1), (gv1 ++ l = gv0), (gv1 ++ gv1 = l), (gv1 ++ gv1 = gv1), (gv1 ++ gv1 = gv0), (gv1 ++ gv0 = l), (gv1 ++ gv0 = gv1), (gv1 ++ gv0 = gv0), (gv0 ++ l = l), (gv0 ++ l = gv1)
(gv0 ++ l = gv0), (gv0 ++ gv1 = l), (gv0 ++ gv1 = gv1), (gv0 ++ gv1 = gv0), (gv0 ++ gv0 = l), (gv0 ++ gv0 = gv1), (gv0 ++ gv0 = gv0), ([] = l), ([] = gv1), ([] = gv0)
([] = sort l), ([] = sort gv1), ([] = sort gv0), ([] = insert a0 l), ([] = insert a0 gv1), ([] = insert a0 gv0), ([] = insert a l), ([] = insert a gv1), ([] = insert a gv0), ([] = l ++ l)
([] = l ++ gv1), ([] = l ++ gv0), ([] = gv1 ++ l), ([] = gv1 ++ gv1), ([] = gv1 ++ gv0), ([] = gv0 ++ l), ([] = gv0 ++ gv1), ([] = gv0 ++ gv0), (None = Some a0), (None = Some a)
(length l = a0), (length l = a), (length gv1 = a0), (length gv1 = a), (length gv0 = a0), (length gv0 = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 89.788 seconds


Label: 0 (0)
(a0 < a), (a0 <= a), (~ a < a0), (~ a <= a0)

Label: 1 (1)
(sorted (a0 :: l)), (sortedd (a0 :: l))

Label: 2 (2)
(n :: l0 = insert a l)

Label: 3 (3)
(sorted gv0), (sortedd gv0), (sorted (insert a gv0)), (sorted (insert n gv0)), (sortedd (insert a gv0)), (sortedd (insert n gv0)), (sorted (insert a0 gv0)), (sortedd (insert a0 gv0)), (sorted (a0 :: gv0)), (sorted (gv0 ++ l0))
(sortedd (a0 :: gv0)), (sortedd (gv0 ++ l0)), (sort gv0 = gv0)

Label: 4 (4)
(sorted gv0), (sortedd gv0), (sorted (insert a gv0)), (sortedd (insert a gv0)), (sorted (insert a0 gv0)), (sortedd (insert a0 gv0)), (sorted (a0 :: gv0)), (sortedd (a0 :: gv0)), (sort gv0 = gv0), (insert a0 gv1 = gv0)
(a0 :: gv1 = gv0)


------------------------------ ALL RESULTS ------------------------------
1. (gv1 = insert a l -> sortedd (a0 :: l) -> a > a0 -> sortedd (a0 :: gv1))

2. (a > a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd (a0 :: n :: l0))

3. (sortedd (a0 :: l) -> sorted (a0 :: l))
(a > a0 ->  n :: l0 = insert a l -> sorted (a0 :: l) -> sortedd (a0 :: n :: l0))

4. (a > a0 -> a0 <= a)
(sortedd (a0 :: l) ->  n :: l0 = insert a l -> a0 <= a -> sortedd (a0 :: n :: l0))

5. (a > a0 -> ~ a < a0)
(~ a < a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd (a0 :: n :: l0))

6. (a > a0 -> ~ a <= a0)
(~ a <= a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd (a0 :: n :: l0))

7. (a > a0 -> sortedd (a0 :: l) -> gv1 = insert a l -> sorted gv0 -> sortedd gv0)

8. (a > a0 ->  sortedd (a0 :: l) ->  gv1 = insert a l -> sorted (insert a gv0) -> sortedd gv0)

9. (a > a0 ->  sortedd (insert a gv0) ->  sortedd (a0 :: l) -> gv1 = insert a l -> sortedd gv0)

10. (a > a0 ->  sortedd (a0 :: l) ->  gv1 = insert a l -> sorted (insert a0 gv0) -> sortedd gv0)

11. (a > a0 ->  sortedd (insert a0 gv0) ->  sortedd (a0 :: l) -> gv1 = insert a l -> sortedd gv0)

12. (a > a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sorted gv0 -> sortedd gv0)

13. (a > a0 ->  sortedd (a0 :: l) -> gv1 = insert a l -> sorted (a0 :: gv0) -> sortedd gv0)

14. (a > a0 ->  sortedd (a0 :: gv0) -> sortedd (a0 :: l) -> gv1 = insert a l -> sortedd gv0)

15. (a > a0 ->  sortedd (a0 :: l) -> sort gv0 = gv0 -> gv1 = insert a l -> sortedd gv0)

16. (a > a0 ->  sortedd (a0 :: l) ->  n :: l0 = insert a l -> sorted (insert a gv0) -> sortedd gv0)

17. (a > a0 ->  sortedd (a0 :: l) ->  n :: l0 = insert a l -> sorted (insert n gv0) -> sortedd gv0)

18. (a > a0 ->  sortedd (insert a gv0) ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd gv0)

19. (a > a0 ->  sortedd (insert n gv0) ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd gv0)

20. (a > a0 ->  sortedd (a0 :: l) ->  n :: l0 = insert a l -> sorted (insert a0 gv0) -> sortedd gv0)

21. (a > a0 ->  sortedd (insert a0 gv0) ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd gv0)

22. (a > a0 ->  sortedd (a0 :: l) -> insert a0 gv1 = gv0 -> gv1 = insert a l -> sortedd gv0)

23. (a > a0 ->  sortedd (a0 :: l) ->  n :: l0 = insert a l -> sorted (a0 :: gv0) -> sortedd gv0)

24. (a > a0 ->  sortedd (a0 :: l) ->  n :: l0 = insert a l -> sorted (gv0 ++ l0) -> sortedd gv0)

25. (a > a0 ->  sortedd (a0 :: gv0) ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd gv0)

26. (a > a0 ->  sortedd (gv0 ++ l0) ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd gv0)

27. (a > a0 ->  sortedd (a0 :: l) -> sort gv0 = gv0 -> n :: l0 = insert a l -> sortedd gv0)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 138.414 seconds

Number of Result Pairs Returned: 27

1. (gv1 = insert a l -> sortedd (a0 :: l) -> a > a0 -> sortedd (a0 :: gv1))

2. (a > a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd (a0 :: n :: l0))

3. (sortedd (a0 :: l) -> sorted (a0 :: l))
(a > a0 ->  n :: l0 = insert a l -> sorted (a0 :: l) -> sortedd (a0 :: n :: l0))

4. (a > a0 -> a0 <= a)
(sortedd (a0 :: l) ->  n :: l0 = insert a l -> a0 <= a -> sortedd (a0 :: n :: l0))

5. (a > a0 -> ~ a < a0)
(~ a < a0 ->  sortedd (a0 :: l) -> n :: l0 = insert a l -> sortedd (a0 :: n :: l0))
