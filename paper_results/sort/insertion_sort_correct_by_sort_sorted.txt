Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (sorted (sort al))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 1.95 seconds

gv0 : (list nat) = (sort al)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 18.108 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (sorted (sort al))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (sort al = gv0)

----------------------------------
Goal: (sorted gv0)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 18.241 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
insert : (nat -> list nat -> list nat)
sort : (list nat -> list nat)
sorted : (list nat -> Prop)
sortedd : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 18.379 seconds


Label: 0 (0)
(sortedd al), (sortedd gv0), (sorted al), (sorted gv0), (Permutation al al), (Permutation al gv0), (Permutation gv0 al), (Permutation gv0 gv0), (al = al), (al = gv0)
(gv0 = al), (gv0 = gv0), (sortedd (sort al)), (sortedd (sort gv0)), (sortedd (al ++ al)), (sortedd (al ++ gv0)), (sortedd (gv0 ++ al)), (sortedd (gv0 ++ gv0)), (sortedd []), (sorted (sort al))
(sorted (sort gv0)), (sorted (al ++ al)), (sorted (al ++ gv0)), (sorted (gv0 ++ al)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation al (sort al)), (Permutation al (sort gv0)), (Permutation al (al ++ al)), (Permutation al (al ++ gv0))
(Permutation al (gv0 ++ al)), (Permutation al (gv0 ++ gv0)), (Permutation al []), (Permutation gv0 (sort al)), (Permutation gv0 (sort gv0)), (Permutation gv0 (al ++ al)), (Permutation gv0 (al ++ gv0)), (Permutation gv0 (gv0 ++ al)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 [])
(Permutation (sort al) al), (Permutation (sort al) gv0), (Permutation (sort al) (sort gv0)), (Permutation (sort al) (al ++ al)), (Permutation (sort al) (al ++ gv0)), (Permutation (sort al) (gv0 ++ al)), (Permutation (sort al) (gv0 ++ gv0)), (Permutation (sort al) []), (Permutation (sort gv0) al), (Permutation (sort gv0) gv0)
(Permutation (sort gv0) (sort al)), (Permutation (sort gv0) (al ++ al)), (Permutation (sort gv0) (al ++ gv0)), (Permutation (sort gv0) (gv0 ++ al)), (Permutation (sort gv0) (gv0 ++ gv0)), (Permutation (sort gv0) []), (Permutation (al ++ al) al), (Permutation (al ++ al) gv0), (Permutation (al ++ al) (sort al)), (Permutation (al ++ al) (sort gv0))
(Permutation (al ++ al) (al ++ gv0)), (Permutation (al ++ al) (gv0 ++ al)), (Permutation (al ++ al) (gv0 ++ gv0)), (Permutation (al ++ al) []), (Permutation (al ++ gv0) al), (Permutation (al ++ gv0) gv0), (Permutation (al ++ gv0) (sort al)), (Permutation (al ++ gv0) (sort gv0)), (Permutation (al ++ gv0) (al ++ al)), (Permutation (al ++ gv0) (gv0 ++ al))
(Permutation (al ++ gv0) (gv0 ++ gv0)), (Permutation (al ++ gv0) []), (Permutation (gv0 ++ al) al), (Permutation (gv0 ++ al) gv0), (Permutation (gv0 ++ al) (sort al)), (Permutation (gv0 ++ al) (sort gv0)), (Permutation (gv0 ++ al) (al ++ al)), (Permutation (gv0 ++ al) (al ++ gv0)), (Permutation (gv0 ++ al) (gv0 ++ gv0)), (Permutation (gv0 ++ al) [])
(Permutation (gv0 ++ gv0) al), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (sort al)), (Permutation (gv0 ++ gv0) (sort gv0)), (Permutation (gv0 ++ gv0) (al ++ al)), (Permutation (gv0 ++ gv0) (al ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ al)), (Permutation (gv0 ++ gv0) []), (Permutation [] al), (Permutation [] gv0)
(Permutation [] (sort al)), (Permutation [] (sort gv0)), (Permutation [] (al ++ al)), (Permutation [] (al ++ gv0)), (Permutation [] (gv0 ++ al)), (Permutation [] (gv0 ++ gv0)), (In (length al) al), (In (length al) gv0), (In (length al) (sort al)), (In (length al) (sort gv0))
(In (length al) (al ++ al)), (In (length al) (al ++ gv0)), (In (length al) (gv0 ++ al)), (In (length al) (gv0 ++ gv0)), (In (length gv0) al), (In (length gv0) gv0), (In (length gv0) (sort al)), (In (length gv0) (sort gv0)), (In (length gv0) (al ++ al)), (In (length gv0) (al ++ gv0))
(In (length gv0) (gv0 ++ al)), (In (length gv0) (gv0 ++ gv0)), (length al < length gv0), (length gv0 < length al), (length al <= length gv0), (length gv0 <= length al), (~ sortedd al), (~ sortedd gv0), (~ sorted al), (~ sorted gv0)
(~ Permutation al al), (~ Permutation al gv0), (~ Permutation gv0 al), (~ Permutation gv0 gv0), (al <> al), (al <> gv0), (gv0 <> al), (gv0 <> gv0), (None = Some al), (None = Some gv0)
(sort al = al), (sort al = gv0), (sort al = al ++ al), (sort al = al ++ gv0), (sort al = gv0 ++ al), (sort al = gv0 ++ gv0), (sort gv0 = al), (sort gv0 = gv0), (sort gv0 = al ++ al), (sort gv0 = al ++ gv0)
(sort gv0 = gv0 ++ al), (sort gv0 = gv0 ++ gv0), (al ++ al = al), (al ++ al = gv0), (al ++ gv0 = al), (al ++ gv0 = gv0), (gv0 ++ al = al), (gv0 ++ al = gv0), (gv0 ++ gv0 = al), (gv0 ++ gv0 = gv0)
([] = al), ([] = gv0), ([] = sort al), ([] = sort gv0), ([] = al ++ al), ([] = al ++ gv0), ([] = gv0 ++ al), ([] = gv0 ++ gv0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 23.057 seconds


Label: 0 (0)
(sorted gv0), (sortedd gv0), (sort al = gv0), (sort gv0 = gv0)






------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 33.534 seconds

Number of Result Pairs Returned: 4

1. (sorted (sort al))

2. (sort (sort al) = sort al)

3. (sortedd gv0 -> sorted gv0)

4. (sort gv0 = gv0 -> sorted gv0)
