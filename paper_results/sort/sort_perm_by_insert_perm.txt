Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (Permutation l (sort l))

----------------------------------
Goal: (Permutation (a :: sort l) (insert a (sort l)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 3.416 seconds

gv1 : (list nat) = (sort l)
gv2 : (list nat) = (insert a (sort l))
gv0 : (list nat) = (a :: sort l)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 37.665 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (Permutation (a :: sort l) (insert a (sort l)))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (insert a (sort l) = gv2)

----------------------------------
Goal: (Permutation (a :: sort l) gv2)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (a :: sort l = gv0)

----------------------------------
Goal: (Permutation gv0 (insert a (sort l)))
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 

----------------------------------
Goal: (Permutation (a :: gv1) (insert a gv1))
Case: Valid and Generalized

Label: Generalization #4
Assumptions: 
 -- (sort l = gv1)
 -- (insert a gv1 = gv2)

----------------------------------
Goal: (Permutation (a :: gv1) gv2)
Case: Invalid and Generalized

Label: Generalization #5
Assumptions: 
 -- (sort l = gv1)
 -- (a :: gv1 = gv0)

----------------------------------
Goal: (Permutation gv0 (insert a gv1))
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 37.804 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
insert : (nat -> list nat -> list nat)
sort : (list nat -> list nat)
sorted : (list nat -> Prop)
sortedd : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 38.052 seconds


Label: 0 (0)
(sortedd gv2), (sortedd l), (sorted gv2), (sorted l), (Permutation gv2 gv2), (Permutation gv2 l), (Permutation l gv2), (Permutation l l), (In a gv2), (In a l)
(a < a), (a <= a), (gv2 = gv2), (gv2 = l), (l = gv2), (l = l), (a = a), (sortedd (a :: gv2)), (sortedd (a :: l)), (sortedd (sort gv2))
(sortedd (sort l)), (sortedd (insert a gv2)), (sortedd (insert a l)), (sortedd (gv2 ++ gv2)), (sortedd (gv2 ++ l)), (sortedd (l ++ gv2)), (sortedd (l ++ l)), (sortedd []), (sorted (a :: gv2)), (sorted (a :: l))
(sorted (sort gv2)), (sorted (sort l)), (sorted (insert a gv2)), (sorted (insert a l)), (sorted (gv2 ++ gv2)), (sorted (gv2 ++ l)), (sorted (l ++ gv2)), (sorted (l ++ l)), (sorted []), (Permutation gv2 (a :: gv2))
(Permutation gv2 (a :: l)), (Permutation gv2 (sort gv2)), (Permutation gv2 (sort l)), (Permutation gv2 (insert a gv2)), (Permutation gv2 (insert a l)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ l)), (Permutation gv2 (l ++ gv2)), (Permutation gv2 (l ++ l)), (Permutation gv2 [])
(Permutation l (a :: gv2)), (Permutation l (a :: l)), (Permutation l (sort gv2)), (Permutation l (sort l)), (Permutation l (insert a gv2)), (Permutation l (insert a l)), (Permutation l (gv2 ++ gv2)), (Permutation l (gv2 ++ l)), (Permutation l (l ++ gv2)), (Permutation l (l ++ l))
(Permutation l []), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) l), (Permutation (a :: gv2) (a :: l)), (Permutation (a :: gv2) (sort gv2)), (Permutation (a :: gv2) (sort l)), (Permutation (a :: gv2) (insert a gv2)), (Permutation (a :: gv2) (insert a l)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l))
(Permutation (a :: gv2) (l ++ gv2)), (Permutation (a :: gv2) (l ++ l)), (Permutation (a :: gv2) []), (Permutation (a :: l) gv2), (Permutation (a :: l) l), (Permutation (a :: l) (a :: gv2)), (Permutation (a :: l) (sort gv2)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (insert a gv2)), (Permutation (a :: l) (insert a l))
(Permutation (a :: l) (gv2 ++ gv2)), (Permutation (a :: l) (gv2 ++ l)), (Permutation (a :: l) (l ++ gv2)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (sort gv2) gv2), (Permutation (sort gv2) l), (Permutation (sort gv2) (a :: gv2)), (Permutation (sort gv2) (a :: l)), (Permutation (sort gv2) (sort l))
(Permutation (sort gv2) (insert a gv2)), (Permutation (sort gv2) (insert a l)), (Permutation (sort gv2) (gv2 ++ gv2)), (Permutation (sort gv2) (gv2 ++ l)), (Permutation (sort gv2) (l ++ gv2)), (Permutation (sort gv2) (l ++ l)), (Permutation (sort gv2) []), (Permutation (sort l) gv2), (Permutation (sort l) l), (Permutation (sort l) (a :: gv2))
(Permutation (sort l) (a :: l)), (Permutation (sort l) (sort gv2)), (Permutation (sort l) (insert a gv2)), (Permutation (sort l) (insert a l)), (Permutation (sort l) (gv2 ++ gv2)), (Permutation (sort l) (gv2 ++ l)), (Permutation (sort l) (l ++ gv2)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) []), (Permutation (insert a gv2) gv2)
(Permutation (insert a gv2) l), (Permutation (insert a gv2) (a :: gv2)), (Permutation (insert a gv2) (a :: l)), (Permutation (insert a gv2) (sort gv2)), (Permutation (insert a gv2) (sort l)), (Permutation (insert a gv2) (insert a l)), (Permutation (insert a gv2) (gv2 ++ gv2)), (Permutation (insert a gv2) (gv2 ++ l)), (Permutation (insert a gv2) (l ++ gv2)), (Permutation (insert a gv2) (l ++ l))
(Permutation (insert a gv2) []), (Permutation (insert a l) gv2), (Permutation (insert a l) l), (Permutation (insert a l) (a :: gv2)), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (sort gv2)), (Permutation (insert a l) (sort l)), (Permutation (insert a l) (insert a gv2)), (Permutation (insert a l) (gv2 ++ gv2)), (Permutation (insert a l) (gv2 ++ l))
(Permutation (insert a l) (l ++ gv2)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) l), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (a :: l)), (Permutation (gv2 ++ gv2) (sort gv2)), (Permutation (gv2 ++ gv2) (sort l)), (Permutation (gv2 ++ gv2) (insert a gv2))
(Permutation (gv2 ++ gv2) (insert a l)), (Permutation (gv2 ++ gv2) (gv2 ++ l)), (Permutation (gv2 ++ gv2) (l ++ gv2)), (Permutation (gv2 ++ gv2) (l ++ l)), (Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ l) gv2), (Permutation (gv2 ++ l) l), (Permutation (gv2 ++ l) (a :: gv2)), (Permutation (gv2 ++ l) (a :: l)), (Permutation (gv2 ++ l) (sort gv2))
(Permutation (gv2 ++ l) (sort l)), (Permutation (gv2 ++ l) (insert a gv2)), (Permutation (gv2 ++ l) (insert a l)), (Permutation (gv2 ++ l) (gv2 ++ gv2)), (Permutation (gv2 ++ l) (l ++ gv2)), (Permutation (gv2 ++ l) (l ++ l)), (Permutation (gv2 ++ l) []), (Permutation (l ++ gv2) gv2), (Permutation (l ++ gv2) l), (Permutation (l ++ gv2) (a :: gv2))
(Permutation (l ++ gv2) (a :: l)), (Permutation (l ++ gv2) (sort gv2)), (Permutation (l ++ gv2) (sort l)), (Permutation (l ++ gv2) (insert a gv2)), (Permutation (l ++ gv2) (insert a l)), (Permutation (l ++ gv2) (gv2 ++ gv2)), (Permutation (l ++ gv2) (gv2 ++ l)), (Permutation (l ++ gv2) (l ++ l)), (Permutation (l ++ gv2) []), (Permutation (l ++ l) gv2)
(Permutation (l ++ l) l), (Permutation (l ++ l) (a :: gv2)), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (sort gv2)), (Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (insert a gv2)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (gv2 ++ gv2)), (Permutation (l ++ l) (gv2 ++ l)), (Permutation (l ++ l) (l ++ gv2))
(Permutation (l ++ l) []), (Permutation [] gv2), (Permutation [] l), (Permutation [] (a :: gv2)), (Permutation [] (a :: l)), (Permutation [] (sort gv2)), (Permutation [] (sort l)), (Permutation [] (insert a gv2)), (Permutation [] (insert a l)), (Permutation [] (gv2 ++ gv2))
(Permutation [] (gv2 ++ l)), (Permutation [] (l ++ gv2)), (Permutation [] (l ++ l)), (In a (a :: gv2)), (In a (a :: l)), (In a (sort gv2)), (In a (sort l)), (In a (insert a gv2)), (In a (insert a l)), (In a (gv2 ++ gv2))
(In a (gv2 ++ l)), (In a (l ++ gv2)), (In a (l ++ l)), (In (length gv2) gv2), (In (length gv2) l), (In (length gv2) (a :: gv2)), (In (length gv2) (a :: l)), (In (length gv2) (sort gv2)), (In (length gv2) (sort l)), (In (length gv2) (insert a gv2))
(In (length gv2) (insert a l)), (In (length gv2) (gv2 ++ gv2)), (In (length gv2) (gv2 ++ l)), (In (length gv2) (l ++ gv2)), (In (length gv2) (l ++ l)), (In (length l) gv2), (In (length l) l), (In (length l) (a :: gv2)), (In (length l) (a :: l)), (In (length l) (sort gv2))
(In (length l) (sort l)), (In (length l) (insert a gv2)), (In (length l) (insert a l)), (In (length l) (gv2 ++ gv2)), (In (length l) (gv2 ++ l)), (In (length l) (l ++ gv2)), (In (length l) (l ++ l)), (a < length gv2), (a < length l), (length gv2 < a)
(length gv2 < length l), (length l < a), (length l < length gv2), (a <= length gv2), (a <= length l), (length gv2 <= a), (length gv2 <= length l), (length l <= a), (length l <= length gv2), (~ sortedd gv2)
(~ sortedd l), (~ sorted gv2), (~ sorted l), (~ Permutation gv2 gv2), (~ Permutation gv2 l), (~ Permutation l gv2), (~ Permutation l l), (~ In a gv2), (~ In a l), (~ a < a)
(~ a <= a), (gv2 <> gv2), (gv2 <> l), (l <> gv2), (l <> l), (a <> a), (None = Some gv2), (None = Some l), (a :: gv2 = gv2), (a :: gv2 = l)
(a :: gv2 = sort gv2), (a :: gv2 = sort l), (a :: gv2 = insert a gv2), (a :: gv2 = insert a l), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = gv2 ++ l), (a :: gv2 = l ++ gv2), (a :: gv2 = l ++ l), (a :: gv2 = []), (a :: l = gv2)
(a :: l = l), (a :: l = sort gv2), (a :: l = sort l), (a :: l = insert a gv2), (a :: l = insert a l), (a :: l = gv2 ++ gv2), (a :: l = gv2 ++ l), (a :: l = l ++ gv2), (a :: l = l ++ l), (a :: l = [])
(sort gv2 = gv2), (sort gv2 = l), (sort gv2 = insert a gv2), (sort gv2 = insert a l), (sort gv2 = gv2 ++ gv2), (sort gv2 = gv2 ++ l), (sort gv2 = l ++ gv2), (sort gv2 = l ++ l), (sort l = gv2), (sort l = l)
(sort l = insert a gv2), (sort l = insert a l), (sort l = gv2 ++ gv2), (sort l = gv2 ++ l), (sort l = l ++ gv2), (sort l = l ++ l), (insert a gv2 = gv2), (insert a gv2 = l), (insert a gv2 = gv2 ++ gv2), (insert a gv2 = gv2 ++ l)
(insert a gv2 = l ++ gv2), (insert a gv2 = l ++ l), (insert a l = gv2), (insert a l = l), (insert a l = gv2 ++ gv2), (insert a l = gv2 ++ l), (insert a l = l ++ gv2), (insert a l = l ++ l), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = l)
(gv2 ++ l = gv2), (gv2 ++ l = l), (l ++ gv2 = gv2), (l ++ gv2 = l), (l ++ l = gv2), (l ++ l = l), ([] = gv2), ([] = l), ([] = sort gv2), ([] = sort l)
([] = insert a gv2), ([] = insert a l), ([] = gv2 ++ gv2), ([] = gv2 ++ l), ([] = l ++ gv2), ([] = l ++ l), (None = Some a), (length gv2 = a), (length l = a)

Label: 1 (1)
(sortedd l), (sortedd gv0), (sorted l), (sorted gv0), (Permutation l l), (Permutation l gv0), (Permutation gv0 l), (Permutation gv0 gv0), (In a l), (In a gv0)
(a < a), (a <= a), (a = a), (l = l), (l = gv0), (gv0 = l), (gv0 = gv0), (sortedd (a :: l)), (sortedd (a :: gv0)), (sortedd (sort l))
(sortedd (sort gv0)), (sortedd (insert a l)), (sortedd (insert a gv0)), (sortedd (l ++ l)), (sortedd (l ++ gv0)), (sortedd (gv0 ++ l)), (sortedd (gv0 ++ gv0)), (sortedd []), (sorted (a :: l)), (sorted (a :: gv0))
(sorted (sort l)), (sorted (sort gv0)), (sorted (insert a l)), (sorted (insert a gv0)), (sorted (l ++ l)), (sorted (l ++ gv0)), (sorted (gv0 ++ l)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation l (a :: l))
(Permutation l (a :: gv0)), (Permutation l (sort l)), (Permutation l (sort gv0)), (Permutation l (insert a l)), (Permutation l (insert a gv0)), (Permutation l (l ++ l)), (Permutation l (l ++ gv0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv0)), (Permutation l [])
(Permutation gv0 (a :: l)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (sort l)), (Permutation gv0 (sort gv0)), (Permutation gv0 (insert a l)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ gv0))
(Permutation gv0 []), (Permutation (a :: l) l), (Permutation (a :: l) gv0), (Permutation (a :: l) (a :: gv0)), (Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort gv0)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a gv0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv0))
(Permutation (a :: l) (gv0 ++ l)), (Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) []), (Permutation (a :: gv0) l), (Permutation (a :: gv0) gv0), (Permutation (a :: gv0) (a :: l)), (Permutation (a :: gv0) (sort l)), (Permutation (a :: gv0) (sort gv0)), (Permutation (a :: gv0) (insert a l)), (Permutation (a :: gv0) (insert a gv0))
(Permutation (a :: gv0) (l ++ l)), (Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (sort l) l), (Permutation (sort l) gv0), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: gv0)), (Permutation (sort l) (sort gv0))
(Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a gv0)), (Permutation (sort l) (l ++ l)), (Permutation (sort l) (l ++ gv0)), (Permutation (sort l) (gv0 ++ l)), (Permutation (sort l) (gv0 ++ gv0)), (Permutation (sort l) []), (Permutation (sort gv0) l), (Permutation (sort gv0) gv0), (Permutation (sort gv0) (a :: l))
(Permutation (sort gv0) (a :: gv0)), (Permutation (sort gv0) (sort l)), (Permutation (sort gv0) (insert a l)), (Permutation (sort gv0) (insert a gv0)), (Permutation (sort gv0) (l ++ l)), (Permutation (sort gv0) (l ++ gv0)), (Permutation (sort gv0) (gv0 ++ l)), (Permutation (sort gv0) (gv0 ++ gv0)), (Permutation (sort gv0) []), (Permutation (insert a l) l)
(Permutation (insert a l) gv0), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: gv0)), (Permutation (insert a l) (sort l)), (Permutation (insert a l) (sort gv0)), (Permutation (insert a l) (insert a gv0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ gv0)), (Permutation (insert a l) (gv0 ++ l)), (Permutation (insert a l) (gv0 ++ gv0))
(Permutation (insert a l) []), (Permutation (insert a gv0) l), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a :: l)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (sort l)), (Permutation (insert a gv0) (sort gv0)), (Permutation (insert a gv0) (insert a l)), (Permutation (insert a gv0) (l ++ l)), (Permutation (insert a gv0) (l ++ gv0))
(Permutation (insert a gv0) (gv0 ++ l)), (Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv0)), (Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (sort gv0)), (Permutation (l ++ l) (insert a l))
(Permutation (l ++ l) (insert a gv0)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv0)), (Permutation (l ++ l) []), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (a :: l)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (sort l))
(Permutation (l ++ gv0) (sort gv0)), (Permutation (l ++ gv0) (insert a l)), (Permutation (l ++ gv0) (insert a gv0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (gv0 ++ l)), (Permutation (l ++ gv0) (gv0 ++ gv0)), (Permutation (l ++ gv0) []), (Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (a :: l))
(Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (sort l)), (Permutation (gv0 ++ l) (sort gv0)), (Permutation (gv0 ++ l) (insert a l)), (Permutation (gv0 ++ l) (insert a gv0)), (Permutation (gv0 ++ l) (l ++ l)), (Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ gv0)), (Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv0) l)
(Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (sort l)), (Permutation (gv0 ++ gv0) (sort gv0)), (Permutation (gv0 ++ gv0) (insert a l)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l))
(Permutation (gv0 ++ gv0) []), (Permutation [] l), (Permutation [] gv0), (Permutation [] (a :: l)), (Permutation [] (a :: gv0)), (Permutation [] (sort l)), (Permutation [] (sort gv0)), (Permutation [] (insert a l)), (Permutation [] (insert a gv0)), (Permutation [] (l ++ l))
(Permutation [] (l ++ gv0)), (Permutation [] (gv0 ++ l)), (Permutation [] (gv0 ++ gv0)), (In a (a :: l)), (In a (a :: gv0)), (In a (sort l)), (In a (sort gv0)), (In a (insert a l)), (In a (insert a gv0)), (In a (l ++ l))
(In a (l ++ gv0)), (In a (gv0 ++ l)), (In a (gv0 ++ gv0)), (In (length l) l), (In (length l) gv0), (In (length l) (a :: l)), (In (length l) (a :: gv0)), (In (length l) (sort l)), (In (length l) (sort gv0)), (In (length l) (insert a l))
(In (length l) (insert a gv0)), (In (length l) (l ++ l)), (In (length l) (l ++ gv0)), (In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ gv0)), (In (length gv0) l), (In (length gv0) gv0), (In (length gv0) (a :: l)), (In (length gv0) (a :: gv0)), (In (length gv0) (sort l))
(In (length gv0) (sort gv0)), (In (length gv0) (insert a l)), (In (length gv0) (insert a gv0)), (In (length gv0) (l ++ l)), (In (length gv0) (l ++ gv0)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ gv0)), (a < length l), (a < length gv0), (length l < a)
(length l < length gv0), (length gv0 < a), (length gv0 < length l), (a <= length l), (a <= length gv0), (length l <= a), (length l <= length gv0), (length gv0 <= a), (length gv0 <= length l), (~ sortedd l)
(~ sortedd gv0), (~ sorted l), (~ sorted gv0), (~ Permutation l l), (~ Permutation l gv0), (~ Permutation gv0 l), (~ Permutation gv0 gv0), (~ In a l), (~ In a gv0), (~ a < a)
(~ a <= a), (a <> a), (l <> l), (l <> gv0), (gv0 <> l), (gv0 <> gv0), (None = Some l), (None = Some gv0), (a :: l = l), (a :: l = gv0)
(a :: l = sort l), (a :: l = sort gv0), (a :: l = insert a l), (a :: l = insert a gv0), (a :: l = l ++ l), (a :: l = l ++ gv0), (a :: l = gv0 ++ l), (a :: l = gv0 ++ gv0), (a :: l = []), (a :: gv0 = l)
(a :: gv0 = gv0), (a :: gv0 = sort l), (a :: gv0 = sort gv0), (a :: gv0 = insert a l), (a :: gv0 = insert a gv0), (a :: gv0 = l ++ l), (a :: gv0 = l ++ gv0), (a :: gv0 = gv0 ++ l), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = [])
(sort l = l), (sort l = gv0), (sort l = insert a l), (sort l = insert a gv0), (sort l = l ++ l), (sort l = l ++ gv0), (sort l = gv0 ++ l), (sort l = gv0 ++ gv0), (sort gv0 = l), (sort gv0 = gv0)
(sort gv0 = insert a l), (sort gv0 = insert a gv0), (sort gv0 = l ++ l), (sort gv0 = l ++ gv0), (sort gv0 = gv0 ++ l), (sort gv0 = gv0 ++ gv0), (insert a l = l), (insert a l = gv0), (insert a l = l ++ l), (insert a l = l ++ gv0)
(insert a l = gv0 ++ l), (insert a l = gv0 ++ gv0), (insert a gv0 = l), (insert a gv0 = gv0), (insert a gv0 = l ++ l), (insert a gv0 = l ++ gv0), (insert a gv0 = gv0 ++ l), (insert a gv0 = gv0 ++ gv0), (l ++ l = l), (l ++ l = gv0)
(l ++ gv0 = l), (l ++ gv0 = gv0), (gv0 ++ l = l), (gv0 ++ l = gv0), (gv0 ++ gv0 = l), (gv0 ++ gv0 = gv0), ([] = l), ([] = gv0), ([] = sort l), ([] = sort gv0)
([] = insert a l), ([] = insert a gv0), ([] = l ++ l), ([] = l ++ gv0), ([] = gv0 ++ l), ([] = gv0 ++ gv0), (None = Some a), (length l = a), (length gv0 = a)

Label: 2 (2)
(sortedd l), (sortedd gv2), (sortedd gv1), (sorted l), (sorted gv2), (sorted gv1), (Permutation l l), (Permutation l gv2), (Permutation l gv1), (Permutation gv2 l)
(Permutation gv2 gv2), (Permutation gv2 gv1), (Permutation gv1 l), (Permutation gv1 gv2), (Permutation gv1 gv1), (In a l), (In a gv2), (In a gv1), (a < a), (a <= a)
(l = l), (l = gv2), (l = gv1), (gv2 = l), (gv2 = gv2), (gv2 = gv1), (gv1 = l), (gv1 = gv2), (gv1 = gv1), (a = a)
(sortedd (a :: l)), (sortedd (a :: gv2)), (sortedd (a :: gv1)), (sortedd (sort l)), (sortedd (sort gv2)), (sortedd (sort gv1)), (sortedd (insert a l)), (sortedd (insert a gv2)), (sortedd (insert a gv1)), (sortedd (l ++ l))
(sortedd (l ++ gv2)), (sortedd (l ++ gv1)), (sortedd (gv2 ++ l)), (sortedd (gv2 ++ gv2)), (sortedd (gv2 ++ gv1)), (sortedd (gv1 ++ l)), (sortedd (gv1 ++ gv2)), (sortedd (gv1 ++ gv1)), (sortedd []), (sorted (a :: l))
(sorted (a :: gv2)), (sorted (a :: gv1)), (sorted (sort l)), (sorted (sort gv2)), (sorted (sort gv1)), (sorted (insert a l)), (sorted (insert a gv2)), (sorted (insert a gv1)), (sorted (l ++ l)), (sorted (l ++ gv2))
(sorted (l ++ gv1)), (sorted (gv2 ++ l)), (sorted (gv2 ++ gv2)), (sorted (gv2 ++ gv1)), (sorted (gv1 ++ l)), (sorted (gv1 ++ gv2)), (sorted (gv1 ++ gv1)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: gv2))
(Permutation l (a :: gv1)), (Permutation l (sort l)), (Permutation l (sort gv2)), (Permutation l (sort gv1)), (Permutation l (insert a l)), (Permutation l (insert a gv2)), (Permutation l (insert a gv1)), (Permutation l (l ++ l)), (Permutation l (l ++ gv2)), (Permutation l (l ++ gv1))
(Permutation l (gv2 ++ l)), (Permutation l (gv2 ++ gv2)), (Permutation l (gv2 ++ gv1)), (Permutation l (gv1 ++ l)), (Permutation l (gv1 ++ gv2)), (Permutation l (gv1 ++ gv1)), (Permutation l []), (Permutation gv2 (a :: l)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (a :: gv1))
(Permutation gv2 (sort l)), (Permutation gv2 (sort gv2)), (Permutation gv2 (sort gv1)), (Permutation gv2 (insert a l)), (Permutation gv2 (insert a gv2)), (Permutation gv2 (insert a gv1)), (Permutation gv2 (l ++ l)), (Permutation gv2 (l ++ gv2)), (Permutation gv2 (l ++ gv1)), (Permutation gv2 (gv2 ++ l))
(Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 (gv2 ++ gv1)), (Permutation gv2 (gv1 ++ l)), (Permutation gv2 (gv1 ++ gv2)), (Permutation gv2 (gv1 ++ gv1)), (Permutation gv2 []), (Permutation gv1 (a :: l)), (Permutation gv1 (a :: gv2)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (sort l))
(Permutation gv1 (sort gv2)), (Permutation gv1 (sort gv1)), (Permutation gv1 (insert a l)), (Permutation gv1 (insert a gv2)), (Permutation gv1 (insert a gv1)), (Permutation gv1 (l ++ l)), (Permutation gv1 (l ++ gv2)), (Permutation gv1 (l ++ gv1)), (Permutation gv1 (gv2 ++ l)), (Permutation gv1 (gv2 ++ gv2))
(Permutation gv1 (gv2 ++ gv1)), (Permutation gv1 (gv1 ++ l)), (Permutation gv1 (gv1 ++ gv2)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a :: l) l), (Permutation (a :: l) gv2), (Permutation (a :: l) gv1), (Permutation (a :: l) (a :: gv2)), (Permutation (a :: l) (a :: gv1))
(Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort gv2)), (Permutation (a :: l) (sort gv1)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a gv2)), (Permutation (a :: l) (insert a gv1)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv2)), (Permutation (a :: l) (l ++ gv1)), (Permutation (a :: l) (gv2 ++ l))
(Permutation (a :: l) (gv2 ++ gv2)), (Permutation (a :: l) (gv2 ++ gv1)), (Permutation (a :: l) (gv1 ++ l)), (Permutation (a :: l) (gv1 ++ gv2)), (Permutation (a :: l) (gv1 ++ gv1)), (Permutation (a :: l) []), (Permutation (a :: gv2) l), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) gv1), (Permutation (a :: gv2) (a :: l))
(Permutation (a :: gv2) (a :: gv1)), (Permutation (a :: gv2) (sort l)), (Permutation (a :: gv2) (sort gv2)), (Permutation (a :: gv2) (sort gv1)), (Permutation (a :: gv2) (insert a l)), (Permutation (a :: gv2) (insert a gv2)), (Permutation (a :: gv2) (insert a gv1)), (Permutation (a :: gv2) (l ++ l)), (Permutation (a :: gv2) (l ++ gv2)), (Permutation (a :: gv2) (l ++ gv1))
(Permutation (a :: gv2) (gv2 ++ l)), (Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ gv1)), (Permutation (a :: gv2) (gv1 ++ l)), (Permutation (a :: gv2) (gv1 ++ gv2)), (Permutation (a :: gv2) (gv1 ++ gv1)), (Permutation (a :: gv2) []), (Permutation (a :: gv1) l), (Permutation (a :: gv1) gv2), (Permutation (a :: gv1) gv1)
(Permutation (a :: gv1) (a :: l)), (Permutation (a :: gv1) (a :: gv2)), (Permutation (a :: gv1) (sort l)), (Permutation (a :: gv1) (sort gv2)), (Permutation (a :: gv1) (sort gv1)), (Permutation (a :: gv1) (insert a l)), (Permutation (a :: gv1) (insert a gv2)), (Permutation (a :: gv1) (insert a gv1)), (Permutation (a :: gv1) (l ++ l)), (Permutation (a :: gv1) (l ++ gv2))
(Permutation (a :: gv1) (l ++ gv1)), (Permutation (a :: gv1) (gv2 ++ l)), (Permutation (a :: gv1) (gv2 ++ gv2)), (Permutation (a :: gv1) (gv2 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ l)), (Permutation (a :: gv1) (gv1 ++ gv2)), (Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) []), (Permutation (sort l) l), (Permutation (sort l) gv2)
(Permutation (sort l) gv1), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: gv2)), (Permutation (sort l) (a :: gv1)), (Permutation (sort l) (sort gv2)), (Permutation (sort l) (sort gv1)), (Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a gv2)), (Permutation (sort l) (insert a gv1)), (Permutation (sort l) (l ++ l))
(Permutation (sort l) (l ++ gv2)), (Permutation (sort l) (l ++ gv1)), (Permutation (sort l) (gv2 ++ l)), (Permutation (sort l) (gv2 ++ gv2)), (Permutation (sort l) (gv2 ++ gv1)), (Permutation (sort l) (gv1 ++ l)), (Permutation (sort l) (gv1 ++ gv2)), (Permutation (sort l) (gv1 ++ gv1)), (Permutation (sort l) []), (Permutation (sort gv2) l)
(Permutation (sort gv2) gv2), (Permutation (sort gv2) gv1), (Permutation (sort gv2) (a :: l)), (Permutation (sort gv2) (a :: gv2)), (Permutation (sort gv2) (a :: gv1)), (Permutation (sort gv2) (sort l)), (Permutation (sort gv2) (sort gv1)), (Permutation (sort gv2) (insert a l)), (Permutation (sort gv2) (insert a gv2)), (Permutation (sort gv2) (insert a gv1))
(Permutation (sort gv2) (l ++ l)), (Permutation (sort gv2) (l ++ gv2)), (Permutation (sort gv2) (l ++ gv1)), (Permutation (sort gv2) (gv2 ++ l)), (Permutation (sort gv2) (gv2 ++ gv2)), (Permutation (sort gv2) (gv2 ++ gv1)), (Permutation (sort gv2) (gv1 ++ l)), (Permutation (sort gv2) (gv1 ++ gv2)), (Permutation (sort gv2) (gv1 ++ gv1)), (Permutation (sort gv2) [])
(Permutation (sort gv1) l), (Permutation (sort gv1) gv2), (Permutation (sort gv1) gv1), (Permutation (sort gv1) (a :: l)), (Permutation (sort gv1) (a :: gv2)), (Permutation (sort gv1) (a :: gv1)), (Permutation (sort gv1) (sort l)), (Permutation (sort gv1) (sort gv2)), (Permutation (sort gv1) (insert a l)), (Permutation (sort gv1) (insert a gv2))
(Permutation (sort gv1) (insert a gv1)), (Permutation (sort gv1) (l ++ l)), (Permutation (sort gv1) (l ++ gv2)), (Permutation (sort gv1) (l ++ gv1)), (Permutation (sort gv1) (gv2 ++ l)), (Permutation (sort gv1) (gv2 ++ gv2)), (Permutation (sort gv1) (gv2 ++ gv1)), (Permutation (sort gv1) (gv1 ++ l)), (Permutation (sort gv1) (gv1 ++ gv2)), (Permutation (sort gv1) (gv1 ++ gv1))
(Permutation (sort gv1) []), (Permutation (insert a l) l), (Permutation (insert a l) gv2), (Permutation (insert a l) gv1), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: gv2)), (Permutation (insert a l) (a :: gv1)), (Permutation (insert a l) (sort l)), (Permutation (insert a l) (sort gv2)), (Permutation (insert a l) (sort gv1))
(Permutation (insert a l) (insert a gv2)), (Permutation (insert a l) (insert a gv1)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ gv2)), (Permutation (insert a l) (l ++ gv1)), (Permutation (insert a l) (gv2 ++ l)), (Permutation (insert a l) (gv2 ++ gv2)), (Permutation (insert a l) (gv2 ++ gv1)), (Permutation (insert a l) (gv1 ++ l)), (Permutation (insert a l) (gv1 ++ gv2))
(Permutation (insert a l) (gv1 ++ gv1)), (Permutation (insert a l) []), (Permutation (insert a gv2) l), (Permutation (insert a gv2) gv2), (Permutation (insert a gv2) gv1), (Permutation (insert a gv2) (a :: l)), (Permutation (insert a gv2) (a :: gv2)), (Permutation (insert a gv2) (a :: gv1)), (Permutation (insert a gv2) (sort l)), (Permutation (insert a gv2) (sort gv2))
(Permutation (insert a gv2) (sort gv1)), (Permutation (insert a gv2) (insert a l)), (Permutation (insert a gv2) (insert a gv1)), (Permutation (insert a gv2) (l ++ l)), (Permutation (insert a gv2) (l ++ gv2)), (Permutation (insert a gv2) (l ++ gv1)), (Permutation (insert a gv2) (gv2 ++ l)), (Permutation (insert a gv2) (gv2 ++ gv2)), (Permutation (insert a gv2) (gv2 ++ gv1)), (Permutation (insert a gv2) (gv1 ++ l))
(Permutation (insert a gv2) (gv1 ++ gv2)), (Permutation (insert a gv2) (gv1 ++ gv1)), (Permutation (insert a gv2) []), (Permutation (insert a gv1) l), (Permutation (insert a gv1) gv2), (Permutation (insert a gv1) gv1), (Permutation (insert a gv1) (a :: l)), (Permutation (insert a gv1) (a :: gv2)), (Permutation (insert a gv1) (a :: gv1)), (Permutation (insert a gv1) (sort l))
(Permutation (insert a gv1) (sort gv2)), (Permutation (insert a gv1) (sort gv1)), (Permutation (insert a gv1) (insert a l)), (Permutation (insert a gv1) (insert a gv2)), (Permutation (insert a gv1) (l ++ l)), (Permutation (insert a gv1) (l ++ gv2)), (Permutation (insert a gv1) (l ++ gv1)), (Permutation (insert a gv1) (gv2 ++ l)), (Permutation (insert a gv1) (gv2 ++ gv2)), (Permutation (insert a gv1) (gv2 ++ gv1))
(Permutation (insert a gv1) (gv1 ++ l)), (Permutation (insert a gv1) (gv1 ++ gv2)), (Permutation (insert a gv1) (gv1 ++ gv1)), (Permutation (insert a gv1) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv2), (Permutation (l ++ l) gv1), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv2)), (Permutation (l ++ l) (a :: gv1))
(Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (sort gv2)), (Permutation (l ++ l) (sort gv1)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a gv2)), (Permutation (l ++ l) (insert a gv1)), (Permutation (l ++ l) (l ++ gv2)), (Permutation (l ++ l) (l ++ gv1)), (Permutation (l ++ l) (gv2 ++ l)), (Permutation (l ++ l) (gv2 ++ gv2))
(Permutation (l ++ l) (gv2 ++ gv1)), (Permutation (l ++ l) (gv1 ++ l)), (Permutation (l ++ l) (gv1 ++ gv2)), (Permutation (l ++ l) (gv1 ++ gv1)), (Permutation (l ++ l) []), (Permutation (l ++ gv2) l), (Permutation (l ++ gv2) gv2), (Permutation (l ++ gv2) gv1), (Permutation (l ++ gv2) (a :: l)), (Permutation (l ++ gv2) (a :: gv2))
(Permutation (l ++ gv2) (a :: gv1)), (Permutation (l ++ gv2) (sort l)), (Permutation (l ++ gv2) (sort gv2)), (Permutation (l ++ gv2) (sort gv1)), (Permutation (l ++ gv2) (insert a l)), (Permutation (l ++ gv2) (insert a gv2)), (Permutation (l ++ gv2) (insert a gv1)), (Permutation (l ++ gv2) (l ++ l)), (Permutation (l ++ gv2) (l ++ gv1)), (Permutation (l ++ gv2) (gv2 ++ l))
(Permutation (l ++ gv2) (gv2 ++ gv2)), (Permutation (l ++ gv2) (gv2 ++ gv1)), (Permutation (l ++ gv2) (gv1 ++ l)), (Permutation (l ++ gv2) (gv1 ++ gv2)), (Permutation (l ++ gv2) (gv1 ++ gv1)), (Permutation (l ++ gv2) []), (Permutation (l ++ gv1) l), (Permutation (l ++ gv1) gv2), (Permutation (l ++ gv1) gv1), (Permutation (l ++ gv1) (a :: l))
(Permutation (l ++ gv1) (a :: gv2)), (Permutation (l ++ gv1) (a :: gv1)), (Permutation (l ++ gv1) (sort l)), (Permutation (l ++ gv1) (sort gv2)), (Permutation (l ++ gv1) (sort gv1)), (Permutation (l ++ gv1) (insert a l)), (Permutation (l ++ gv1) (insert a gv2)), (Permutation (l ++ gv1) (insert a gv1)), (Permutation (l ++ gv1) (l ++ l)), (Permutation (l ++ gv1) (l ++ gv2))
(Permutation (l ++ gv1) (gv2 ++ l)), (Permutation (l ++ gv1) (gv2 ++ gv2)), (Permutation (l ++ gv1) (gv2 ++ gv1)), (Permutation (l ++ gv1) (gv1 ++ l)), (Permutation (l ++ gv1) (gv1 ++ gv2)), (Permutation (l ++ gv1) (gv1 ++ gv1)), (Permutation (l ++ gv1) []), (Permutation (gv2 ++ l) l), (Permutation (gv2 ++ l) gv2), (Permutation (gv2 ++ l) gv1)
(Permutation (gv2 ++ l) (a :: l)), (Permutation (gv2 ++ l) (a :: gv2)), (Permutation (gv2 ++ l) (a :: gv1)), (Permutation (gv2 ++ l) (sort l)), (Permutation (gv2 ++ l) (sort gv2)), (Permutation (gv2 ++ l) (sort gv1)), (Permutation (gv2 ++ l) (insert a l)), (Permutation (gv2 ++ l) (insert a gv2)), (Permutation (gv2 ++ l) (insert a gv1)), (Permutation (gv2 ++ l) (l ++ l))
(Permutation (gv2 ++ l) (l ++ gv2)), (Permutation (gv2 ++ l) (l ++ gv1)), (Permutation (gv2 ++ l) (gv2 ++ gv2)), (Permutation (gv2 ++ l) (gv2 ++ gv1)), (Permutation (gv2 ++ l) (gv1 ++ l)), (Permutation (gv2 ++ l) (gv1 ++ gv2)), (Permutation (gv2 ++ l) (gv1 ++ gv1)), (Permutation (gv2 ++ l) []), (Permutation (gv2 ++ gv2) l), (Permutation (gv2 ++ gv2) gv2)
(Permutation (gv2 ++ gv2) gv1), (Permutation (gv2 ++ gv2) (a :: l)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (a :: gv1)), (Permutation (gv2 ++ gv2) (sort l)), (Permutation (gv2 ++ gv2) (sort gv2)), (Permutation (gv2 ++ gv2) (sort gv1)), (Permutation (gv2 ++ gv2) (insert a l)), (Permutation (gv2 ++ gv2) (insert a gv2)), (Permutation (gv2 ++ gv2) (insert a gv1))
(Permutation (gv2 ++ gv2) (l ++ l)), (Permutation (gv2 ++ gv2) (l ++ gv2)), (Permutation (gv2 ++ gv2) (l ++ gv1)), (Permutation (gv2 ++ gv2) (gv2 ++ l)), (Permutation (gv2 ++ gv2) (gv2 ++ gv1)), (Permutation (gv2 ++ gv2) (gv1 ++ l)), (Permutation (gv2 ++ gv2) (gv1 ++ gv2)), (Permutation (gv2 ++ gv2) (gv1 ++ gv1)), (Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ gv1) l)
(Permutation (gv2 ++ gv1) gv2), (Permutation (gv2 ++ gv1) gv1), (Permutation (gv2 ++ gv1) (a :: l)), (Permutation (gv2 ++ gv1) (a :: gv2)), (Permutation (gv2 ++ gv1) (a :: gv1)), (Permutation (gv2 ++ gv1) (sort l)), (Permutation (gv2 ++ gv1) (sort gv2)), (Permutation (gv2 ++ gv1) (sort gv1)), (Permutation (gv2 ++ gv1) (insert a l)), (Permutation (gv2 ++ gv1) (insert a gv2))
(Permutation (gv2 ++ gv1) (insert a gv1)), (Permutation (gv2 ++ gv1) (l ++ l)), (Permutation (gv2 ++ gv1) (l ++ gv2)), (Permutation (gv2 ++ gv1) (l ++ gv1)), (Permutation (gv2 ++ gv1) (gv2 ++ l)), (Permutation (gv2 ++ gv1) (gv2 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ l)), (Permutation (gv2 ++ gv1) (gv1 ++ gv2)), (Permutation (gv2 ++ gv1) (gv1 ++ gv1)), (Permutation (gv2 ++ gv1) [])
(Permutation (gv1 ++ l) l), (Permutation (gv1 ++ l) gv2), (Permutation (gv1 ++ l) gv1), (Permutation (gv1 ++ l) (a :: l)), (Permutation (gv1 ++ l) (a :: gv2)), (Permutation (gv1 ++ l) (a :: gv1)), (Permutation (gv1 ++ l) (sort l)), (Permutation (gv1 ++ l) (sort gv2)), (Permutation (gv1 ++ l) (sort gv1)), (Permutation (gv1 ++ l) (insert a l))
(Permutation (gv1 ++ l) (insert a gv2)), (Permutation (gv1 ++ l) (insert a gv1)), (Permutation (gv1 ++ l) (l ++ l)), (Permutation (gv1 ++ l) (l ++ gv2)), (Permutation (gv1 ++ l) (l ++ gv1)), (Permutation (gv1 ++ l) (gv2 ++ l)), (Permutation (gv1 ++ l) (gv2 ++ gv2)), (Permutation (gv1 ++ l) (gv2 ++ gv1)), (Permutation (gv1 ++ l) (gv1 ++ gv2)), (Permutation (gv1 ++ l) (gv1 ++ gv1))
(Permutation (gv1 ++ l) []), (Permutation (gv1 ++ gv2) l), (Permutation (gv1 ++ gv2) gv2), (Permutation (gv1 ++ gv2) gv1), (Permutation (gv1 ++ gv2) (a :: l)), (Permutation (gv1 ++ gv2) (a :: gv2)), (Permutation (gv1 ++ gv2) (a :: gv1)), (Permutation (gv1 ++ gv2) (sort l)), (Permutation (gv1 ++ gv2) (sort gv2)), (Permutation (gv1 ++ gv2) (sort gv1))
(Permutation (gv1 ++ gv2) (insert a l)), (Permutation (gv1 ++ gv2) (insert a gv2)), (Permutation (gv1 ++ gv2) (insert a gv1)), (Permutation (gv1 ++ gv2) (l ++ l)), (Permutation (gv1 ++ gv2) (l ++ gv2)), (Permutation (gv1 ++ gv2) (l ++ gv1)), (Permutation (gv1 ++ gv2) (gv2 ++ l)), (Permutation (gv1 ++ gv2) (gv2 ++ gv2)), (Permutation (gv1 ++ gv2) (gv2 ++ gv1)), (Permutation (gv1 ++ gv2) (gv1 ++ l))
(Permutation (gv1 ++ gv2) (gv1 ++ gv1)), (Permutation (gv1 ++ gv2) []), (Permutation (gv1 ++ gv1) l), (Permutation (gv1 ++ gv1) gv2), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (a :: l)), (Permutation (gv1 ++ gv1) (a :: gv2)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (sort l)), (Permutation (gv1 ++ gv1) (sort gv2))
(Permutation (gv1 ++ gv1) (sort gv1)), (Permutation (gv1 ++ gv1) (insert a l)), (Permutation (gv1 ++ gv1) (insert a gv2)), (Permutation (gv1 ++ gv1) (insert a gv1)), (Permutation (gv1 ++ gv1) (l ++ l)), (Permutation (gv1 ++ gv1) (l ++ gv2)), (Permutation (gv1 ++ gv1) (l ++ gv1)), (Permutation (gv1 ++ gv1) (gv2 ++ l)), (Permutation (gv1 ++ gv1) (gv2 ++ gv2)), (Permutation (gv1 ++ gv1) (gv2 ++ gv1))
(Permutation (gv1 ++ gv1) (gv1 ++ l)), (Permutation (gv1 ++ gv1) (gv1 ++ gv2)), (Permutation (gv1 ++ gv1) []), (Permutation [] l), (Permutation [] gv2), (Permutation [] gv1), (Permutation [] (a :: l)), (Permutation [] (a :: gv2)), (Permutation [] (a :: gv1)), (Permutation [] (sort l))
(Permutation [] (sort gv2)), (Permutation [] (sort gv1)), (Permutation [] (insert a l)), (Permutation [] (insert a gv2)), (Permutation [] (insert a gv1)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv2)), (Permutation [] (l ++ gv1)), (Permutation [] (gv2 ++ l)), (Permutation [] (gv2 ++ gv2))
(Permutation [] (gv2 ++ gv1)), (Permutation [] (gv1 ++ l)), (Permutation [] (gv1 ++ gv2)), (Permutation [] (gv1 ++ gv1)), (In a (a :: l)), (In a (a :: gv2)), (In a (a :: gv1)), (In a (sort l)), (In a (sort gv2)), (In a (sort gv1))
(In a (insert a l)), (In a (insert a gv2)), (In a (insert a gv1)), (In a (l ++ l)), (In a (l ++ gv2)), (In a (l ++ gv1)), (In a (gv2 ++ l)), (In a (gv2 ++ gv2)), (In a (gv2 ++ gv1)), (In a (gv1 ++ l))
(In a (gv1 ++ gv2)), (In a (gv1 ++ gv1)), (In (length l) l), (In (length l) gv2), (In (length l) gv1), (In (length l) (a :: l)), (In (length l) (a :: gv2)), (In (length l) (a :: gv1)), (In (length l) (sort l)), (In (length l) (sort gv2))
(In (length l) (sort gv1)), (In (length l) (insert a l)), (In (length l) (insert a gv2)), (In (length l) (insert a gv1)), (In (length l) (l ++ l)), (In (length l) (l ++ gv2)), (In (length l) (l ++ gv1)), (In (length l) (gv2 ++ l)), (In (length l) (gv2 ++ gv2)), (In (length l) (gv2 ++ gv1))
(In (length l) (gv1 ++ l)), (In (length l) (gv1 ++ gv2)), (In (length l) (gv1 ++ gv1)), (In (length gv2) l), (In (length gv2) gv2), (In (length gv2) gv1), (In (length gv2) (a :: l)), (In (length gv2) (a :: gv2)), (In (length gv2) (a :: gv1)), (In (length gv2) (sort l))
(In (length gv2) (sort gv2)), (In (length gv2) (sort gv1)), (In (length gv2) (insert a l)), (In (length gv2) (insert a gv2)), (In (length gv2) (insert a gv1)), (In (length gv2) (l ++ l)), (In (length gv2) (l ++ gv2)), (In (length gv2) (l ++ gv1)), (In (length gv2) (gv2 ++ l)), (In (length gv2) (gv2 ++ gv2))
(In (length gv2) (gv2 ++ gv1)), (In (length gv2) (gv1 ++ l)), (In (length gv2) (gv1 ++ gv2)), (In (length gv2) (gv1 ++ gv1)), (In (length gv1) l), (In (length gv1) gv2), (In (length gv1) gv1), (In (length gv1) (a :: l)), (In (length gv1) (a :: gv2)), (In (length gv1) (a :: gv1))
(In (length gv1) (sort l)), (In (length gv1) (sort gv2)), (In (length gv1) (sort gv1)), (In (length gv1) (insert a l)), (In (length gv1) (insert a gv2)), (In (length gv1) (insert a gv1)), (In (length gv1) (l ++ l)), (In (length gv1) (l ++ gv2)), (In (length gv1) (l ++ gv1)), (In (length gv1) (gv2 ++ l))
(In (length gv1) (gv2 ++ gv2)), (In (length gv1) (gv2 ++ gv1)), (In (length gv1) (gv1 ++ l)), (In (length gv1) (gv1 ++ gv2)), (In (length gv1) (gv1 ++ gv1)), (a < length l), (a < length gv2), (a < length gv1), (length l < a), (length l < length gv2)
(length l < length gv1), (length gv2 < a), (length gv2 < length l), (length gv2 < length gv1), (length gv1 < a), (length gv1 < length l), (length gv1 < length gv2), (a <= length l), (a <= length gv2), (a <= length gv1)
(length l <= a), (length l <= length gv2), (length l <= length gv1), (length gv2 <= a), (length gv2 <= length l), (length gv2 <= length gv1), (length gv1 <= a), (length gv1 <= length l), (length gv1 <= length gv2), (~ sortedd l)
(~ sortedd gv2), (~ sortedd gv1), (~ sorted l), (~ sorted gv2), (~ sorted gv1), (~ Permutation l l), (~ Permutation l gv2), (~ Permutation l gv1), (~ Permutation gv2 l), (~ Permutation gv2 gv2)
(~ Permutation gv2 gv1), (~ Permutation gv1 l), (~ Permutation gv1 gv2), (~ Permutation gv1 gv1), (~ In a l), (~ In a gv2), (~ In a gv1), (~ a < a), (~ a <= a), (l <> l)
(l <> gv2), (l <> gv1), (gv2 <> l), (gv2 <> gv2), (gv2 <> gv1), (gv1 <> l), (gv1 <> gv2), (gv1 <> gv1), (a <> a), (None = Some l)
(None = Some gv2), (None = Some gv1), (a :: l = l), (a :: l = gv2), (a :: l = gv1), (a :: l = sort l), (a :: l = sort gv2), (a :: l = sort gv1), (a :: l = insert a l), (a :: l = insert a gv2)
(a :: l = insert a gv1), (a :: l = l ++ l), (a :: l = l ++ gv2), (a :: l = l ++ gv1), (a :: l = gv2 ++ l), (a :: l = gv2 ++ gv2), (a :: l = gv2 ++ gv1), (a :: l = gv1 ++ l), (a :: l = gv1 ++ gv2), (a :: l = gv1 ++ gv1)
(a :: l = []), (a :: gv2 = l), (a :: gv2 = gv2), (a :: gv2 = gv1), (a :: gv2 = sort l), (a :: gv2 = sort gv2), (a :: gv2 = sort gv1), (a :: gv2 = insert a l), (a :: gv2 = insert a gv2), (a :: gv2 = insert a gv1)
(a :: gv2 = l ++ l), (a :: gv2 = l ++ gv2), (a :: gv2 = l ++ gv1), (a :: gv2 = gv2 ++ l), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = gv2 ++ gv1), (a :: gv2 = gv1 ++ l), (a :: gv2 = gv1 ++ gv2), (a :: gv2 = gv1 ++ gv1), (a :: gv2 = [])
(a :: gv1 = l), (a :: gv1 = gv2), (a :: gv1 = gv1), (a :: gv1 = sort l), (a :: gv1 = sort gv2), (a :: gv1 = sort gv1), (a :: gv1 = insert a l), (a :: gv1 = insert a gv2), (a :: gv1 = insert a gv1), (a :: gv1 = l ++ l)
(a :: gv1 = l ++ gv2), (a :: gv1 = l ++ gv1), (a :: gv1 = gv2 ++ l), (a :: gv1 = gv2 ++ gv2), (a :: gv1 = gv2 ++ gv1), (a :: gv1 = gv1 ++ l), (a :: gv1 = gv1 ++ gv2), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = []), (sort l = l)
(sort l = gv2), (sort l = gv1), (sort l = insert a l), (sort l = insert a gv2), (sort l = insert a gv1), (sort l = l ++ l), (sort l = l ++ gv2), (sort l = l ++ gv1), (sort l = gv2 ++ l), (sort l = gv2 ++ gv2)
(sort l = gv2 ++ gv1), (sort l = gv1 ++ l), (sort l = gv1 ++ gv2), (sort l = gv1 ++ gv1), (sort gv2 = l), (sort gv2 = gv2), (sort gv2 = gv1), (sort gv2 = insert a l), (sort gv2 = insert a gv2), (sort gv2 = insert a gv1)
(sort gv2 = l ++ l), (sort gv2 = l ++ gv2), (sort gv2 = l ++ gv1), (sort gv2 = gv2 ++ l), (sort gv2 = gv2 ++ gv2), (sort gv2 = gv2 ++ gv1), (sort gv2 = gv1 ++ l), (sort gv2 = gv1 ++ gv2), (sort gv2 = gv1 ++ gv1), (sort gv1 = l)
(sort gv1 = gv2), (sort gv1 = gv1), (sort gv1 = insert a l), (sort gv1 = insert a gv2), (sort gv1 = insert a gv1), (sort gv1 = l ++ l), (sort gv1 = l ++ gv2), (sort gv1 = l ++ gv1), (sort gv1 = gv2 ++ l), (sort gv1 = gv2 ++ gv2)
(sort gv1 = gv2 ++ gv1), (sort gv1 = gv1 ++ l), (sort gv1 = gv1 ++ gv2), (sort gv1 = gv1 ++ gv1), (insert a l = l), (insert a l = gv2), (insert a l = gv1), (insert a l = l ++ l), (insert a l = l ++ gv2), (insert a l = l ++ gv1)
(insert a l = gv2 ++ l), (insert a l = gv2 ++ gv2), (insert a l = gv2 ++ gv1), (insert a l = gv1 ++ l), (insert a l = gv1 ++ gv2), (insert a l = gv1 ++ gv1), (insert a gv2 = l), (insert a gv2 = gv2), (insert a gv2 = gv1), (insert a gv2 = l ++ l)
(insert a gv2 = l ++ gv2), (insert a gv2 = l ++ gv1), (insert a gv2 = gv2 ++ l), (insert a gv2 = gv2 ++ gv2), (insert a gv2 = gv2 ++ gv1), (insert a gv2 = gv1 ++ l), (insert a gv2 = gv1 ++ gv2), (insert a gv2 = gv1 ++ gv1), (insert a gv1 = l), (insert a gv1 = gv2)
(insert a gv1 = gv1), (insert a gv1 = l ++ l), (insert a gv1 = l ++ gv2), (insert a gv1 = l ++ gv1), (insert a gv1 = gv2 ++ l), (insert a gv1 = gv2 ++ gv2), (insert a gv1 = gv2 ++ gv1), (insert a gv1 = gv1 ++ l), (insert a gv1 = gv1 ++ gv2), (insert a gv1 = gv1 ++ gv1)
(l ++ l = l), (l ++ l = gv2), (l ++ l = gv1), (l ++ gv2 = l), (l ++ gv2 = gv2), (l ++ gv2 = gv1), (l ++ gv1 = l), (l ++ gv1 = gv2), (l ++ gv1 = gv1), (gv2 ++ l = l)
(gv2 ++ l = gv2), (gv2 ++ l = gv1), (gv2 ++ gv2 = l), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = gv1), (gv2 ++ gv1 = l), (gv2 ++ gv1 = gv2), (gv2 ++ gv1 = gv1), (gv1 ++ l = l), (gv1 ++ l = gv2)
(gv1 ++ l = gv1), (gv1 ++ gv2 = l), (gv1 ++ gv2 = gv2), (gv1 ++ gv2 = gv1), (gv1 ++ gv1 = l), (gv1 ++ gv1 = gv2), (gv1 ++ gv1 = gv1), ([] = l), ([] = gv2), ([] = gv1)
([] = sort l), ([] = sort gv2), ([] = sort gv1), ([] = insert a l), ([] = insert a gv2), ([] = insert a gv1), ([] = l ++ l), ([] = l ++ gv2), ([] = l ++ gv1), ([] = gv2 ++ l)
([] = gv2 ++ gv2), ([] = gv2 ++ gv1), ([] = gv1 ++ l), ([] = gv1 ++ gv2), ([] = gv1 ++ gv1), (None = Some a), (length l = a), (length gv2 = a), (length gv1 = a)

Label: 3 (3)
(sortedd l), (sortedd gv1), (sortedd gv0), (sorted l), (sorted gv1), (sorted gv0), (Permutation l l), (Permutation l gv1), (Permutation l gv0), (Permutation gv1 l)
(Permutation gv1 gv1), (Permutation gv1 gv0), (Permutation gv0 l), (Permutation gv0 gv1), (Permutation gv0 gv0), (In a l), (In a gv1), (In a gv0), (a < a), (a <= a)
(a = a), (l = l), (l = gv1), (l = gv0), (gv1 = l), (gv1 = gv1), (gv1 = gv0), (gv0 = l), (gv0 = gv1), (gv0 = gv0)
(sortedd (a :: l)), (sortedd (a :: gv1)), (sortedd (a :: gv0)), (sortedd (sort l)), (sortedd (sort gv1)), (sortedd (sort gv0)), (sortedd (insert a l)), (sortedd (insert a gv1)), (sortedd (insert a gv0)), (sortedd (l ++ l))
(sortedd (l ++ gv1)), (sortedd (l ++ gv0)), (sortedd (gv1 ++ l)), (sortedd (gv1 ++ gv1)), (sortedd (gv1 ++ gv0)), (sortedd (gv0 ++ l)), (sortedd (gv0 ++ gv1)), (sortedd (gv0 ++ gv0)), (sortedd []), (sorted (a :: l))
(sorted (a :: gv1)), (sorted (a :: gv0)), (sorted (sort l)), (sorted (sort gv1)), (sorted (sort gv0)), (sorted (insert a l)), (sorted (insert a gv1)), (sorted (insert a gv0)), (sorted (l ++ l)), (sorted (l ++ gv1))
(sorted (l ++ gv0)), (sorted (gv1 ++ l)), (sorted (gv1 ++ gv1)), (sorted (gv1 ++ gv0)), (sorted (gv0 ++ l)), (sorted (gv0 ++ gv1)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation l (a :: l)), (Permutation l (a :: gv1))
(Permutation l (a :: gv0)), (Permutation l (sort l)), (Permutation l (sort gv1)), (Permutation l (sort gv0)), (Permutation l (insert a l)), (Permutation l (insert a gv1)), (Permutation l (insert a gv0)), (Permutation l (l ++ l)), (Permutation l (l ++ gv1)), (Permutation l (l ++ gv0))
(Permutation l (gv1 ++ l)), (Permutation l (gv1 ++ gv1)), (Permutation l (gv1 ++ gv0)), (Permutation l (gv0 ++ l)), (Permutation l (gv0 ++ gv1)), (Permutation l (gv0 ++ gv0)), (Permutation l []), (Permutation gv1 (a :: l)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (a :: gv0))
(Permutation gv1 (sort l)), (Permutation gv1 (sort gv1)), (Permutation gv1 (sort gv0)), (Permutation gv1 (insert a l)), (Permutation gv1 (insert a gv1)), (Permutation gv1 (insert a gv0)), (Permutation gv1 (l ++ l)), (Permutation gv1 (l ++ gv1)), (Permutation gv1 (l ++ gv0)), (Permutation gv1 (gv1 ++ l))
(Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 (gv1 ++ gv0)), (Permutation gv1 (gv0 ++ l)), (Permutation gv1 (gv0 ++ gv1)), (Permutation gv1 (gv0 ++ gv0)), (Permutation gv1 []), (Permutation gv0 (a :: l)), (Permutation gv0 (a :: gv1)), (Permutation gv0 (a :: gv0)), (Permutation gv0 (sort l))
(Permutation gv0 (sort gv1)), (Permutation gv0 (sort gv0)), (Permutation gv0 (insert a l)), (Permutation gv0 (insert a gv1)), (Permutation gv0 (insert a gv0)), (Permutation gv0 (l ++ l)), (Permutation gv0 (l ++ gv1)), (Permutation gv0 (l ++ gv0)), (Permutation gv0 (gv1 ++ l)), (Permutation gv0 (gv1 ++ gv1))
(Permutation gv0 (gv1 ++ gv0)), (Permutation gv0 (gv0 ++ l)), (Permutation gv0 (gv0 ++ gv1)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (a :: l) l), (Permutation (a :: l) gv1), (Permutation (a :: l) gv0), (Permutation (a :: l) (a :: gv1)), (Permutation (a :: l) (a :: gv0))
(Permutation (a :: l) (sort l)), (Permutation (a :: l) (sort gv1)), (Permutation (a :: l) (sort gv0)), (Permutation (a :: l) (insert a l)), (Permutation (a :: l) (insert a gv1)), (Permutation (a :: l) (insert a gv0)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) (l ++ gv1)), (Permutation (a :: l) (l ++ gv0)), (Permutation (a :: l) (gv1 ++ l))
(Permutation (a :: l) (gv1 ++ gv1)), (Permutation (a :: l) (gv1 ++ gv0)), (Permutation (a :: l) (gv0 ++ l)), (Permutation (a :: l) (gv0 ++ gv1)), (Permutation (a :: l) (gv0 ++ gv0)), (Permutation (a :: l) []), (Permutation (a :: gv1) l), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) gv0), (Permutation (a :: gv1) (a :: l))
(Permutation (a :: gv1) (a :: gv0)), (Permutation (a :: gv1) (sort l)), (Permutation (a :: gv1) (sort gv1)), (Permutation (a :: gv1) (sort gv0)), (Permutation (a :: gv1) (insert a l)), (Permutation (a :: gv1) (insert a gv1)), (Permutation (a :: gv1) (insert a gv0)), (Permutation (a :: gv1) (l ++ l)), (Permutation (a :: gv1) (l ++ gv1)), (Permutation (a :: gv1) (l ++ gv0))
(Permutation (a :: gv1) (gv1 ++ l)), (Permutation (a :: gv1) (gv1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ gv0)), (Permutation (a :: gv1) (gv0 ++ l)), (Permutation (a :: gv1) (gv0 ++ gv1)), (Permutation (a :: gv1) (gv0 ++ gv0)), (Permutation (a :: gv1) []), (Permutation (a :: gv0) l), (Permutation (a :: gv0) gv1), (Permutation (a :: gv0) gv0)
(Permutation (a :: gv0) (a :: l)), (Permutation (a :: gv0) (a :: gv1)), (Permutation (a :: gv0) (sort l)), (Permutation (a :: gv0) (sort gv1)), (Permutation (a :: gv0) (sort gv0)), (Permutation (a :: gv0) (insert a l)), (Permutation (a :: gv0) (insert a gv1)), (Permutation (a :: gv0) (insert a gv0)), (Permutation (a :: gv0) (l ++ l)), (Permutation (a :: gv0) (l ++ gv1))
(Permutation (a :: gv0) (l ++ gv0)), (Permutation (a :: gv0) (gv1 ++ l)), (Permutation (a :: gv0) (gv1 ++ gv1)), (Permutation (a :: gv0) (gv1 ++ gv0)), (Permutation (a :: gv0) (gv0 ++ l)), (Permutation (a :: gv0) (gv0 ++ gv1)), (Permutation (a :: gv0) (gv0 ++ gv0)), (Permutation (a :: gv0) []), (Permutation (sort l) l), (Permutation (sort l) gv1)
(Permutation (sort l) gv0), (Permutation (sort l) (a :: l)), (Permutation (sort l) (a :: gv1)), (Permutation (sort l) (a :: gv0)), (Permutation (sort l) (sort gv1)), (Permutation (sort l) (sort gv0)), (Permutation (sort l) (insert a l)), (Permutation (sort l) (insert a gv1)), (Permutation (sort l) (insert a gv0)), (Permutation (sort l) (l ++ l))
(Permutation (sort l) (l ++ gv1)), (Permutation (sort l) (l ++ gv0)), (Permutation (sort l) (gv1 ++ l)), (Permutation (sort l) (gv1 ++ gv1)), (Permutation (sort l) (gv1 ++ gv0)), (Permutation (sort l) (gv0 ++ l)), (Permutation (sort l) (gv0 ++ gv1)), (Permutation (sort l) (gv0 ++ gv0)), (Permutation (sort l) []), (Permutation (sort gv1) l)
(Permutation (sort gv1) gv1), (Permutation (sort gv1) gv0), (Permutation (sort gv1) (a :: l)), (Permutation (sort gv1) (a :: gv1)), (Permutation (sort gv1) (a :: gv0)), (Permutation (sort gv1) (sort l)), (Permutation (sort gv1) (sort gv0)), (Permutation (sort gv1) (insert a l)), (Permutation (sort gv1) (insert a gv1)), (Permutation (sort gv1) (insert a gv0))
(Permutation (sort gv1) (l ++ l)), (Permutation (sort gv1) (l ++ gv1)), (Permutation (sort gv1) (l ++ gv0)), (Permutation (sort gv1) (gv1 ++ l)), (Permutation (sort gv1) (gv1 ++ gv1)), (Permutation (sort gv1) (gv1 ++ gv0)), (Permutation (sort gv1) (gv0 ++ l)), (Permutation (sort gv1) (gv0 ++ gv1)), (Permutation (sort gv1) (gv0 ++ gv0)), (Permutation (sort gv1) [])
(Permutation (sort gv0) l), (Permutation (sort gv0) gv1), (Permutation (sort gv0) gv0), (Permutation (sort gv0) (a :: l)), (Permutation (sort gv0) (a :: gv1)), (Permutation (sort gv0) (a :: gv0)), (Permutation (sort gv0) (sort l)), (Permutation (sort gv0) (sort gv1)), (Permutation (sort gv0) (insert a l)), (Permutation (sort gv0) (insert a gv1))
(Permutation (sort gv0) (insert a gv0)), (Permutation (sort gv0) (l ++ l)), (Permutation (sort gv0) (l ++ gv1)), (Permutation (sort gv0) (l ++ gv0)), (Permutation (sort gv0) (gv1 ++ l)), (Permutation (sort gv0) (gv1 ++ gv1)), (Permutation (sort gv0) (gv1 ++ gv0)), (Permutation (sort gv0) (gv0 ++ l)), (Permutation (sort gv0) (gv0 ++ gv1)), (Permutation (sort gv0) (gv0 ++ gv0))
(Permutation (sort gv0) []), (Permutation (insert a l) l), (Permutation (insert a l) gv1), (Permutation (insert a l) gv0), (Permutation (insert a l) (a :: l)), (Permutation (insert a l) (a :: gv1)), (Permutation (insert a l) (a :: gv0)), (Permutation (insert a l) (sort l)), (Permutation (insert a l) (sort gv1)), (Permutation (insert a l) (sort gv0))
(Permutation (insert a l) (insert a gv1)), (Permutation (insert a l) (insert a gv0)), (Permutation (insert a l) (l ++ l)), (Permutation (insert a l) (l ++ gv1)), (Permutation (insert a l) (l ++ gv0)), (Permutation (insert a l) (gv1 ++ l)), (Permutation (insert a l) (gv1 ++ gv1)), (Permutation (insert a l) (gv1 ++ gv0)), (Permutation (insert a l) (gv0 ++ l)), (Permutation (insert a l) (gv0 ++ gv1))
(Permutation (insert a l) (gv0 ++ gv0)), (Permutation (insert a l) []), (Permutation (insert a gv1) l), (Permutation (insert a gv1) gv1), (Permutation (insert a gv1) gv0), (Permutation (insert a gv1) (a :: l)), (Permutation (insert a gv1) (a :: gv1)), (Permutation (insert a gv1) (a :: gv0)), (Permutation (insert a gv1) (sort l)), (Permutation (insert a gv1) (sort gv1))
(Permutation (insert a gv1) (sort gv0)), (Permutation (insert a gv1) (insert a l)), (Permutation (insert a gv1) (insert a gv0)), (Permutation (insert a gv1) (l ++ l)), (Permutation (insert a gv1) (l ++ gv1)), (Permutation (insert a gv1) (l ++ gv0)), (Permutation (insert a gv1) (gv1 ++ l)), (Permutation (insert a gv1) (gv1 ++ gv1)), (Permutation (insert a gv1) (gv1 ++ gv0)), (Permutation (insert a gv1) (gv0 ++ l))
(Permutation (insert a gv1) (gv0 ++ gv1)), (Permutation (insert a gv1) (gv0 ++ gv0)), (Permutation (insert a gv1) []), (Permutation (insert a gv0) l), (Permutation (insert a gv0) gv1), (Permutation (insert a gv0) gv0), (Permutation (insert a gv0) (a :: l)), (Permutation (insert a gv0) (a :: gv1)), (Permutation (insert a gv0) (a :: gv0)), (Permutation (insert a gv0) (sort l))
(Permutation (insert a gv0) (sort gv1)), (Permutation (insert a gv0) (sort gv0)), (Permutation (insert a gv0) (insert a l)), (Permutation (insert a gv0) (insert a gv1)), (Permutation (insert a gv0) (l ++ l)), (Permutation (insert a gv0) (l ++ gv1)), (Permutation (insert a gv0) (l ++ gv0)), (Permutation (insert a gv0) (gv1 ++ l)), (Permutation (insert a gv0) (gv1 ++ gv1)), (Permutation (insert a gv0) (gv1 ++ gv0))
(Permutation (insert a gv0) (gv0 ++ l)), (Permutation (insert a gv0) (gv0 ++ gv1)), (Permutation (insert a gv0) (gv0 ++ gv0)), (Permutation (insert a gv0) []), (Permutation (l ++ l) l), (Permutation (l ++ l) gv1), (Permutation (l ++ l) gv0), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a :: gv1)), (Permutation (l ++ l) (a :: gv0))
(Permutation (l ++ l) (sort l)), (Permutation (l ++ l) (sort gv1)), (Permutation (l ++ l) (sort gv0)), (Permutation (l ++ l) (insert a l)), (Permutation (l ++ l) (insert a gv1)), (Permutation (l ++ l) (insert a gv0)), (Permutation (l ++ l) (l ++ gv1)), (Permutation (l ++ l) (l ++ gv0)), (Permutation (l ++ l) (gv1 ++ l)), (Permutation (l ++ l) (gv1 ++ gv1))
(Permutation (l ++ l) (gv1 ++ gv0)), (Permutation (l ++ l) (gv0 ++ l)), (Permutation (l ++ l) (gv0 ++ gv1)), (Permutation (l ++ l) (gv0 ++ gv0)), (Permutation (l ++ l) []), (Permutation (l ++ gv1) l), (Permutation (l ++ gv1) gv1), (Permutation (l ++ gv1) gv0), (Permutation (l ++ gv1) (a :: l)), (Permutation (l ++ gv1) (a :: gv1))
(Permutation (l ++ gv1) (a :: gv0)), (Permutation (l ++ gv1) (sort l)), (Permutation (l ++ gv1) (sort gv1)), (Permutation (l ++ gv1) (sort gv0)), (Permutation (l ++ gv1) (insert a l)), (Permutation (l ++ gv1) (insert a gv1)), (Permutation (l ++ gv1) (insert a gv0)), (Permutation (l ++ gv1) (l ++ l)), (Permutation (l ++ gv1) (l ++ gv0)), (Permutation (l ++ gv1) (gv1 ++ l))
(Permutation (l ++ gv1) (gv1 ++ gv1)), (Permutation (l ++ gv1) (gv1 ++ gv0)), (Permutation (l ++ gv1) (gv0 ++ l)), (Permutation (l ++ gv1) (gv0 ++ gv1)), (Permutation (l ++ gv1) (gv0 ++ gv0)), (Permutation (l ++ gv1) []), (Permutation (l ++ gv0) l), (Permutation (l ++ gv0) gv1), (Permutation (l ++ gv0) gv0), (Permutation (l ++ gv0) (a :: l))
(Permutation (l ++ gv0) (a :: gv1)), (Permutation (l ++ gv0) (a :: gv0)), (Permutation (l ++ gv0) (sort l)), (Permutation (l ++ gv0) (sort gv1)), (Permutation (l ++ gv0) (sort gv0)), (Permutation (l ++ gv0) (insert a l)), (Permutation (l ++ gv0) (insert a gv1)), (Permutation (l ++ gv0) (insert a gv0)), (Permutation (l ++ gv0) (l ++ l)), (Permutation (l ++ gv0) (l ++ gv1))
(Permutation (l ++ gv0) (gv1 ++ l)), (Permutation (l ++ gv0) (gv1 ++ gv1)), (Permutation (l ++ gv0) (gv1 ++ gv0)), (Permutation (l ++ gv0) (gv0 ++ l)), (Permutation (l ++ gv0) (gv0 ++ gv1)), (Permutation (l ++ gv0) (gv0 ++ gv0)), (Permutation (l ++ gv0) []), (Permutation (gv1 ++ l) l), (Permutation (gv1 ++ l) gv1), (Permutation (gv1 ++ l) gv0)
(Permutation (gv1 ++ l) (a :: l)), (Permutation (gv1 ++ l) (a :: gv1)), (Permutation (gv1 ++ l) (a :: gv0)), (Permutation (gv1 ++ l) (sort l)), (Permutation (gv1 ++ l) (sort gv1)), (Permutation (gv1 ++ l) (sort gv0)), (Permutation (gv1 ++ l) (insert a l)), (Permutation (gv1 ++ l) (insert a gv1)), (Permutation (gv1 ++ l) (insert a gv0)), (Permutation (gv1 ++ l) (l ++ l))
(Permutation (gv1 ++ l) (l ++ gv1)), (Permutation (gv1 ++ l) (l ++ gv0)), (Permutation (gv1 ++ l) (gv1 ++ gv1)), (Permutation (gv1 ++ l) (gv1 ++ gv0)), (Permutation (gv1 ++ l) (gv0 ++ l)), (Permutation (gv1 ++ l) (gv0 ++ gv1)), (Permutation (gv1 ++ l) (gv0 ++ gv0)), (Permutation (gv1 ++ l) []), (Permutation (gv1 ++ gv1) l), (Permutation (gv1 ++ gv1) gv1)
(Permutation (gv1 ++ gv1) gv0), (Permutation (gv1 ++ gv1) (a :: l)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (a :: gv0)), (Permutation (gv1 ++ gv1) (sort l)), (Permutation (gv1 ++ gv1) (sort gv1)), (Permutation (gv1 ++ gv1) (sort gv0)), (Permutation (gv1 ++ gv1) (insert a l)), (Permutation (gv1 ++ gv1) (insert a gv1)), (Permutation (gv1 ++ gv1) (insert a gv0))
(Permutation (gv1 ++ gv1) (l ++ l)), (Permutation (gv1 ++ gv1) (l ++ gv1)), (Permutation (gv1 ++ gv1) (l ++ gv0)), (Permutation (gv1 ++ gv1) (gv1 ++ l)), (Permutation (gv1 ++ gv1) (gv1 ++ gv0)), (Permutation (gv1 ++ gv1) (gv0 ++ l)), (Permutation (gv1 ++ gv1) (gv0 ++ gv1)), (Permutation (gv1 ++ gv1) (gv0 ++ gv0)), (Permutation (gv1 ++ gv1) []), (Permutation (gv1 ++ gv0) l)
(Permutation (gv1 ++ gv0) gv1), (Permutation (gv1 ++ gv0) gv0), (Permutation (gv1 ++ gv0) (a :: l)), (Permutation (gv1 ++ gv0) (a :: gv1)), (Permutation (gv1 ++ gv0) (a :: gv0)), (Permutation (gv1 ++ gv0) (sort l)), (Permutation (gv1 ++ gv0) (sort gv1)), (Permutation (gv1 ++ gv0) (sort gv0)), (Permutation (gv1 ++ gv0) (insert a l)), (Permutation (gv1 ++ gv0) (insert a gv1))
(Permutation (gv1 ++ gv0) (insert a gv0)), (Permutation (gv1 ++ gv0) (l ++ l)), (Permutation (gv1 ++ gv0) (l ++ gv1)), (Permutation (gv1 ++ gv0) (l ++ gv0)), (Permutation (gv1 ++ gv0) (gv1 ++ l)), (Permutation (gv1 ++ gv0) (gv1 ++ gv1)), (Permutation (gv1 ++ gv0) (gv0 ++ l)), (Permutation (gv1 ++ gv0) (gv0 ++ gv1)), (Permutation (gv1 ++ gv0) (gv0 ++ gv0)), (Permutation (gv1 ++ gv0) [])
(Permutation (gv0 ++ l) l), (Permutation (gv0 ++ l) gv1), (Permutation (gv0 ++ l) gv0), (Permutation (gv0 ++ l) (a :: l)), (Permutation (gv0 ++ l) (a :: gv1)), (Permutation (gv0 ++ l) (a :: gv0)), (Permutation (gv0 ++ l) (sort l)), (Permutation (gv0 ++ l) (sort gv1)), (Permutation (gv0 ++ l) (sort gv0)), (Permutation (gv0 ++ l) (insert a l))
(Permutation (gv0 ++ l) (insert a gv1)), (Permutation (gv0 ++ l) (insert a gv0)), (Permutation (gv0 ++ l) (l ++ l)), (Permutation (gv0 ++ l) (l ++ gv1)), (Permutation (gv0 ++ l) (l ++ gv0)), (Permutation (gv0 ++ l) (gv1 ++ l)), (Permutation (gv0 ++ l) (gv1 ++ gv1)), (Permutation (gv0 ++ l) (gv1 ++ gv0)), (Permutation (gv0 ++ l) (gv0 ++ gv1)), (Permutation (gv0 ++ l) (gv0 ++ gv0))
(Permutation (gv0 ++ l) []), (Permutation (gv0 ++ gv1) l), (Permutation (gv0 ++ gv1) gv1), (Permutation (gv0 ++ gv1) gv0), (Permutation (gv0 ++ gv1) (a :: l)), (Permutation (gv0 ++ gv1) (a :: gv1)), (Permutation (gv0 ++ gv1) (a :: gv0)), (Permutation (gv0 ++ gv1) (sort l)), (Permutation (gv0 ++ gv1) (sort gv1)), (Permutation (gv0 ++ gv1) (sort gv0))
(Permutation (gv0 ++ gv1) (insert a l)), (Permutation (gv0 ++ gv1) (insert a gv1)), (Permutation (gv0 ++ gv1) (insert a gv0)), (Permutation (gv0 ++ gv1) (l ++ l)), (Permutation (gv0 ++ gv1) (l ++ gv1)), (Permutation (gv0 ++ gv1) (l ++ gv0)), (Permutation (gv0 ++ gv1) (gv1 ++ l)), (Permutation (gv0 ++ gv1) (gv1 ++ gv1)), (Permutation (gv0 ++ gv1) (gv1 ++ gv0)), (Permutation (gv0 ++ gv1) (gv0 ++ l))
(Permutation (gv0 ++ gv1) (gv0 ++ gv0)), (Permutation (gv0 ++ gv1) []), (Permutation (gv0 ++ gv0) l), (Permutation (gv0 ++ gv0) gv1), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (a :: l)), (Permutation (gv0 ++ gv0) (a :: gv1)), (Permutation (gv0 ++ gv0) (a :: gv0)), (Permutation (gv0 ++ gv0) (sort l)), (Permutation (gv0 ++ gv0) (sort gv1))
(Permutation (gv0 ++ gv0) (sort gv0)), (Permutation (gv0 ++ gv0) (insert a l)), (Permutation (gv0 ++ gv0) (insert a gv1)), (Permutation (gv0 ++ gv0) (insert a gv0)), (Permutation (gv0 ++ gv0) (l ++ l)), (Permutation (gv0 ++ gv0) (l ++ gv1)), (Permutation (gv0 ++ gv0) (l ++ gv0)), (Permutation (gv0 ++ gv0) (gv1 ++ l)), (Permutation (gv0 ++ gv0) (gv1 ++ gv1)), (Permutation (gv0 ++ gv0) (gv1 ++ gv0))
(Permutation (gv0 ++ gv0) (gv0 ++ l)), (Permutation (gv0 ++ gv0) (gv0 ++ gv1)), (Permutation (gv0 ++ gv0) []), (Permutation [] l), (Permutation [] gv1), (Permutation [] gv0), (Permutation [] (a :: l)), (Permutation [] (a :: gv1)), (Permutation [] (a :: gv0)), (Permutation [] (sort l))
(Permutation [] (sort gv1)), (Permutation [] (sort gv0)), (Permutation [] (insert a l)), (Permutation [] (insert a gv1)), (Permutation [] (insert a gv0)), (Permutation [] (l ++ l)), (Permutation [] (l ++ gv1)), (Permutation [] (l ++ gv0)), (Permutation [] (gv1 ++ l)), (Permutation [] (gv1 ++ gv1))
(Permutation [] (gv1 ++ gv0)), (Permutation [] (gv0 ++ l)), (Permutation [] (gv0 ++ gv1)), (Permutation [] (gv0 ++ gv0)), (In a (a :: l)), (In a (a :: gv1)), (In a (a :: gv0)), (In a (sort l)), (In a (sort gv1)), (In a (sort gv0))
(In a (insert a l)), (In a (insert a gv1)), (In a (insert a gv0)), (In a (l ++ l)), (In a (l ++ gv1)), (In a (l ++ gv0)), (In a (gv1 ++ l)), (In a (gv1 ++ gv1)), (In a (gv1 ++ gv0)), (In a (gv0 ++ l))
(In a (gv0 ++ gv1)), (In a (gv0 ++ gv0)), (In (length l) l), (In (length l) gv1), (In (length l) gv0), (In (length l) (a :: l)), (In (length l) (a :: gv1)), (In (length l) (a :: gv0)), (In (length l) (sort l)), (In (length l) (sort gv1))
(In (length l) (sort gv0)), (In (length l) (insert a l)), (In (length l) (insert a gv1)), (In (length l) (insert a gv0)), (In (length l) (l ++ l)), (In (length l) (l ++ gv1)), (In (length l) (l ++ gv0)), (In (length l) (gv1 ++ l)), (In (length l) (gv1 ++ gv1)), (In (length l) (gv1 ++ gv0))
(In (length l) (gv0 ++ l)), (In (length l) (gv0 ++ gv1)), (In (length l) (gv0 ++ gv0)), (In (length gv1) l), (In (length gv1) gv1), (In (length gv1) gv0), (In (length gv1) (a :: l)), (In (length gv1) (a :: gv1)), (In (length gv1) (a :: gv0)), (In (length gv1) (sort l))
(In (length gv1) (sort gv1)), (In (length gv1) (sort gv0)), (In (length gv1) (insert a l)), (In (length gv1) (insert a gv1)), (In (length gv1) (insert a gv0)), (In (length gv1) (l ++ l)), (In (length gv1) (l ++ gv1)), (In (length gv1) (l ++ gv0)), (In (length gv1) (gv1 ++ l)), (In (length gv1) (gv1 ++ gv1))
(In (length gv1) (gv1 ++ gv0)), (In (length gv1) (gv0 ++ l)), (In (length gv1) (gv0 ++ gv1)), (In (length gv1) (gv0 ++ gv0)), (In (length gv0) l), (In (length gv0) gv1), (In (length gv0) gv0), (In (length gv0) (a :: l)), (In (length gv0) (a :: gv1)), (In (length gv0) (a :: gv0))
(In (length gv0) (sort l)), (In (length gv0) (sort gv1)), (In (length gv0) (sort gv0)), (In (length gv0) (insert a l)), (In (length gv0) (insert a gv1)), (In (length gv0) (insert a gv0)), (In (length gv0) (l ++ l)), (In (length gv0) (l ++ gv1)), (In (length gv0) (l ++ gv0)), (In (length gv0) (gv1 ++ l))
(In (length gv0) (gv1 ++ gv1)), (In (length gv0) (gv1 ++ gv0)), (In (length gv0) (gv0 ++ l)), (In (length gv0) (gv0 ++ gv1)), (In (length gv0) (gv0 ++ gv0)), (a < length l), (a < length gv1), (a < length gv0), (length l < a), (length l < length gv1)
(length l < length gv0), (length gv1 < a), (length gv1 < length l), (length gv1 < length gv0), (length gv0 < a), (length gv0 < length l), (length gv0 < length gv1), (a <= length l), (a <= length gv1), (a <= length gv0)
(length l <= a), (length l <= length gv1), (length l <= length gv0), (length gv1 <= a), (length gv1 <= length l), (length gv1 <= length gv0), (length gv0 <= a), (length gv0 <= length l), (length gv0 <= length gv1), (~ sortedd l)
(~ sortedd gv1), (~ sortedd gv0), (~ sorted l), (~ sorted gv1), (~ sorted gv0), (~ Permutation l l), (~ Permutation l gv1), (~ Permutation l gv0), (~ Permutation gv1 l), (~ Permutation gv1 gv1)
(~ Permutation gv1 gv0), (~ Permutation gv0 l), (~ Permutation gv0 gv1), (~ Permutation gv0 gv0), (~ In a l), (~ In a gv1), (~ In a gv0), (~ a < a), (~ a <= a), (a <> a)
(l <> l), (l <> gv1), (l <> gv0), (gv1 <> l), (gv1 <> gv1), (gv1 <> gv0), (gv0 <> l), (gv0 <> gv1), (gv0 <> gv0), (None = Some l)
(None = Some gv1), (None = Some gv0), (a :: l = l), (a :: l = gv1), (a :: l = gv0), (a :: l = sort l), (a :: l = sort gv1), (a :: l = sort gv0), (a :: l = insert a l), (a :: l = insert a gv1)
(a :: l = insert a gv0), (a :: l = l ++ l), (a :: l = l ++ gv1), (a :: l = l ++ gv0), (a :: l = gv1 ++ l), (a :: l = gv1 ++ gv1), (a :: l = gv1 ++ gv0), (a :: l = gv0 ++ l), (a :: l = gv0 ++ gv1), (a :: l = gv0 ++ gv0)
(a :: l = []), (a :: gv1 = l), (a :: gv1 = gv1), (a :: gv1 = gv0), (a :: gv1 = sort l), (a :: gv1 = sort gv1), (a :: gv1 = sort gv0), (a :: gv1 = insert a l), (a :: gv1 = insert a gv1), (a :: gv1 = insert a gv0)
(a :: gv1 = l ++ l), (a :: gv1 = l ++ gv1), (a :: gv1 = l ++ gv0), (a :: gv1 = gv1 ++ l), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = gv1 ++ gv0), (a :: gv1 = gv0 ++ l), (a :: gv1 = gv0 ++ gv1), (a :: gv1 = gv0 ++ gv0), (a :: gv1 = [])
(a :: gv0 = l), (a :: gv0 = gv1), (a :: gv0 = gv0), (a :: gv0 = sort l), (a :: gv0 = sort gv1), (a :: gv0 = sort gv0), (a :: gv0 = insert a l), (a :: gv0 = insert a gv1), (a :: gv0 = insert a gv0), (a :: gv0 = l ++ l)
(a :: gv0 = l ++ gv1), (a :: gv0 = l ++ gv0), (a :: gv0 = gv1 ++ l), (a :: gv0 = gv1 ++ gv1), (a :: gv0 = gv1 ++ gv0), (a :: gv0 = gv0 ++ l), (a :: gv0 = gv0 ++ gv1), (a :: gv0 = gv0 ++ gv0), (a :: gv0 = []), (sort l = l)
(sort l = gv1), (sort l = gv0), (sort l = insert a l), (sort l = insert a gv1), (sort l = insert a gv0), (sort l = l ++ l), (sort l = l ++ gv1), (sort l = l ++ gv0), (sort l = gv1 ++ l), (sort l = gv1 ++ gv1)
(sort l = gv1 ++ gv0), (sort l = gv0 ++ l), (sort l = gv0 ++ gv1), (sort l = gv0 ++ gv0), (sort gv1 = l), (sort gv1 = gv1), (sort gv1 = gv0), (sort gv1 = insert a l), (sort gv1 = insert a gv1), (sort gv1 = insert a gv0)
(sort gv1 = l ++ l), (sort gv1 = l ++ gv1), (sort gv1 = l ++ gv0), (sort gv1 = gv1 ++ l), (sort gv1 = gv1 ++ gv1), (sort gv1 = gv1 ++ gv0), (sort gv1 = gv0 ++ l), (sort gv1 = gv0 ++ gv1), (sort gv1 = gv0 ++ gv0), (sort gv0 = l)
(sort gv0 = gv1), (sort gv0 = gv0), (sort gv0 = insert a l), (sort gv0 = insert a gv1), (sort gv0 = insert a gv0), (sort gv0 = l ++ l), (sort gv0 = l ++ gv1), (sort gv0 = l ++ gv0), (sort gv0 = gv1 ++ l), (sort gv0 = gv1 ++ gv1)
(sort gv0 = gv1 ++ gv0), (sort gv0 = gv0 ++ l), (sort gv0 = gv0 ++ gv1), (sort gv0 = gv0 ++ gv0), (insert a l = l), (insert a l = gv1), (insert a l = gv0), (insert a l = l ++ l), (insert a l = l ++ gv1), (insert a l = l ++ gv0)
(insert a l = gv1 ++ l), (insert a l = gv1 ++ gv1), (insert a l = gv1 ++ gv0), (insert a l = gv0 ++ l), (insert a l = gv0 ++ gv1), (insert a l = gv0 ++ gv0), (insert a gv1 = l), (insert a gv1 = gv1), (insert a gv1 = gv0), (insert a gv1 = l ++ l)
(insert a gv1 = l ++ gv1), (insert a gv1 = l ++ gv0), (insert a gv1 = gv1 ++ l), (insert a gv1 = gv1 ++ gv1), (insert a gv1 = gv1 ++ gv0), (insert a gv1 = gv0 ++ l), (insert a gv1 = gv0 ++ gv1), (insert a gv1 = gv0 ++ gv0), (insert a gv0 = l), (insert a gv0 = gv1)
(insert a gv0 = gv0), (insert a gv0 = l ++ l), (insert a gv0 = l ++ gv1), (insert a gv0 = l ++ gv0), (insert a gv0 = gv1 ++ l), (insert a gv0 = gv1 ++ gv1), (insert a gv0 = gv1 ++ gv0), (insert a gv0 = gv0 ++ l), (insert a gv0 = gv0 ++ gv1), (insert a gv0 = gv0 ++ gv0)
(l ++ l = l), (l ++ l = gv1), (l ++ l = gv0), (l ++ gv1 = l), (l ++ gv1 = gv1), (l ++ gv1 = gv0), (l ++ gv0 = l), (l ++ gv0 = gv1), (l ++ gv0 = gv0), (gv1 ++ l = l)
(gv1 ++ l = gv1), (gv1 ++ l = gv0), (gv1 ++ gv1 = l), (gv1 ++ gv1 = gv1), (gv1 ++ gv1 = gv0), (gv1 ++ gv0 = l), (gv1 ++ gv0 = gv1), (gv1 ++ gv0 = gv0), (gv0 ++ l = l), (gv0 ++ l = gv1)
(gv0 ++ l = gv0), (gv0 ++ gv1 = l), (gv0 ++ gv1 = gv1), (gv0 ++ gv1 = gv0), (gv0 ++ gv0 = l), (gv0 ++ gv0 = gv1), (gv0 ++ gv0 = gv0), ([] = l), ([] = gv1), ([] = gv0)
([] = sort l), ([] = sort gv1), ([] = sort gv0), ([] = insert a l), ([] = insert a gv1), ([] = insert a gv0), ([] = l ++ l), ([] = l ++ gv1), ([] = l ++ gv0), ([] = gv1 ++ l)
([] = gv1 ++ gv1), ([] = gv1 ++ gv0), ([] = gv0 ++ l), ([] = gv0 ++ gv1), ([] = gv0 ++ gv0), (None = Some a), (length l = a), (length gv1 = a), (length gv0 = a)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 47.145 seconds


Label: 0 (0)
(Permutation gv2 (insert a l)), (Permutation (insert a l) gv2), (Permutation gv2 (a :: l)), (Permutation (a :: l) gv2), (Permutation (sort gv2) (insert a l)), (Permutation (insert a l) (sort gv2)), (Permutation (a :: l) (sort gv2)), (Permutation (sort gv2) (a :: l))

Label: 1 (1)
(Permutation gv0 (insert a l)), (Permutation (insert a l) gv0), (Permutation gv0 (a :: l)), (Permutation (a :: l) gv0), (Permutation (sort gv0) (insert a l)), (Permutation (insert a l) (sort gv0)), (Permutation (a :: l) (sort gv0)), (Permutation (sort gv0) (a :: l))

Label: 2 (2)
(Permutation gv2 (insert a gv1)), (Permutation (insert a gv1) gv2), (insert a gv1 = gv2), (Permutation gv2 (a :: gv1)), (Permutation (a :: gv1) gv2), (Permutation (sort gv2) (insert a gv1)), (Permutation (insert a gv1) (sort gv2)), (sort gv2 = insert a gv1), (Permutation (a :: gv1) (sort gv2)), (Permutation (sort gv2) (a :: gv1))

Label: 3 (3)
(Permutation gv0 (insert a gv1)), (Permutation (insert a gv1) gv0), (Permutation gv0 (a :: gv1)), (Permutation (a :: gv1) gv0), (Permutation (sort gv0) (insert a gv1)), (Permutation (insert a gv1) (sort gv0)), (a :: gv1 = gv0), (sort gv0 = insert a gv1), (Permutation (a :: gv1) (sort gv0)), (Permutation (sort gv0) (a :: gv1))


------------------------------ ALL RESULTS ------------------------------
1. (Permutation (a :: gv1) (insert a gv1))

2. (Permutation (a :: sort l) (insert a (sort l)))

3. (Permutation gv2 (insert a l) -> Permutation (a :: sort l) gv2)

4. (Permutation (insert a l) gv2 -> Permutation (a :: sort l) gv2)

5. (Permutation gv0 (insert a l) -> Permutation gv0 (insert a (sort l)))

6. (Permutation (insert a l) gv0 -> Permutation gv0 (insert a (sort l)))

7. (Permutation gv2 (insert a gv1) -> Permutation (a :: gv1) gv2)

8. (Permutation (insert a gv1) gv2 -> Permutation (a :: gv1) gv2)

9. (Permutation gv2 (a :: l) -> Permutation (a :: sort l) gv2)

10. (Permutation (a :: l) gv2 -> Permutation (a :: sort l) gv2)

11. (Permutation (sort gv2) (insert a l) -> Permutation (a :: sort l) gv2)

12. (Permutation (insert a l) (sort gv2) -> Permutation (a :: sort l) gv2)

13. (Permutation gv0 (a :: l) -> Permutation gv0 (insert a (sort l)))

14. (Permutation (a :: l) gv0 -> Permutation gv0 (insert a (sort l)))

15. (Permutation (sort gv0) (insert a l) -> Permutation gv0 (insert a (sort l)))

16. (Permutation (insert a l) (sort gv0) -> Permutation gv0 (insert a (sort l)))

17. (Permutation (sort gv2) (insert a gv1) -> Permutation (a :: gv1) gv2)

18. (Permutation (insert a gv1) (sort gv2) -> Permutation (a :: gv1) gv2)

19. (Permutation gv0 (a :: gv1) -> Permutation gv0 (insert a gv1))

20. (Permutation (a :: gv1) gv0 -> Permutation gv0 (insert a gv1))

21. (Permutation (sort gv0) (insert a gv1) -> Permutation gv0 (insert a gv1))

22. (Permutation (insert a gv1) (sort gv0) -> Permutation gv0 (insert a gv1))

23. (Permutation (a :: l) (sort gv2) -> Permutation (a :: sort l) gv2)

24. (Permutation (sort gv2) (a :: l) -> Permutation (a :: sort l) gv2)

25. (Permutation (a :: l) (sort gv0) -> Permutation gv0 (insert a (sort l)))

26. (Permutation (sort gv0) (a :: l) -> Permutation gv0 (insert a (sort l)))

27. (sort gv2 = insert a gv1 -> Permutation (a :: gv1) gv2)

28. (Permutation (a :: gv1) (sort gv2) -> Permutation (a :: gv1) gv2)

29. (Permutation (sort gv2) (a :: gv1) -> Permutation (a :: gv1) gv2)

30. (sort gv0 = insert a gv1 -> Permutation gv0 (insert a gv1))

31. (Permutation (a :: gv1) (sort gv0) -> Permutation gv0 (insert a gv1))

32. (Permutation (sort gv0) (a :: gv1) -> Permutation gv0 (insert a gv1))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 94.342 seconds

Number of Result Pairs Returned: 32

1. (Permutation (a :: gv1) (insert a gv1))

2. (Permutation (a :: sort l) (insert a (sort l)))

3. (Permutation gv2 (insert a l) -> Permutation (a :: sort l) gv2)

4. (Permutation (insert a l) gv2 -> Permutation (a :: sort l) gv2)

5. (Permutation gv0 (insert a l) -> Permutation gv0 (insert a (sort l)))
