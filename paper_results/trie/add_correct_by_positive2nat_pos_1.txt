Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (positive2nat (addc false p q) = positive2nat p + positive2nat q)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 2.045 seconds

gv1 : positive = (addc false p q)
gv4 : nat = (positive2nat p)
gv0 : nat = (positive2nat (addc false p q))
gv3 : nat = (positive2nat p + positive2nat q)
gv5 : nat = (positive2nat q)
gv2 : bool = false


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 24.268 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (positive2nat (addc false p q) = positive2nat p + positive2nat q)
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (false = gv2)

----------------------------------
Goal: (positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (positive2nat q = gv5)

----------------------------------
Goal: (positive2nat (addc false p q) = positive2nat p + gv5)
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (positive2nat p + positive2nat q = gv3)

----------------------------------
Goal: (positive2nat (addc false p q) = gv3)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (positive2nat (addc false p q) = gv0)

----------------------------------
Goal: (gv0 = positive2nat p + positive2nat q)
Case: Invalid and Generalized

Label: Generalization #5
Assumptions: 
 -- (positive2nat p = gv4)

----------------------------------
Goal: (positive2nat (addc false p q) = gv4 + positive2nat q)
Case: Invalid and Generalized

Label: Generalization #6
Assumptions: 
 -- (addc false p q = gv1)

----------------------------------
Goal: (positive2nat gv1 = positive2nat p + positive2nat q)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 24.407 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
first_le_second : (list nat -> Prop)
positive : Set
positive_rect : (forall P : positive -> Type,
 (forall p : positive, P p -> P p~1) ->
 (forall p : positive, P p -> P p~0) -> P xH -> forall p : positive, P p)
positive_rec : (forall P : positive -> Set,
 (forall p : positive, P p -> P p~1) ->
 (forall p : positive, P p -> P p~0) -> P xH -> forall p : positive, P p)
positive2nat : (positive -> nat)
succ : (positive -> positive)
of_succ_nat : (nat -> positive)
nat2positive : (nat -> positive)
print_in_binary : (positive -> list nat)
addc : (bool -> positive -> positive -> positive)
add : (positive -> positive -> positive)
comparison : Set
comparison_rect : (forall P : comparison -> Type,
 P Eq -> P Lt -> P Gt -> forall c : comparison, P c)
comparison_rec : (forall P : comparison -> Set,
 P Eq -> P Lt -> P Gt -> forall c : comparison, P c)
compare : (positive -> positive -> comparison)
LFType : Set
LFType_rect : (forall P : LFType -> Type,
 P One ->
 P Two -> P Three -> P Four -> P Five -> P Six -> forall l : LFType, P l)
LFType_rec : (forall P : LFType -> Set,
 P One ->
 P Two -> P Three -> P Four -> P Five -> P Six -> forall l : LFType, P l)
trie : Set
trie_rect : (forall P : trie -> Type,
 P Leaf ->
 (forall t : trie,
  P t -> forall (l : LFType) (t0 : trie), P t0 -> P (Node t l t0)) ->
 forall t : trie, P t)
trie_rec : (forall P : trie -> Set,
 P Leaf ->
 (forall t : trie,
  P t -> forall (l : LFType) (t0 : trie), P t0 -> P (Node t l t0)) ->
 forall t : trie, P t)
trie_table : Type
empty : (LFType -> trie_table)
look : (LFType -> positive -> trie -> LFType)
lookup : (positive -> trie_table -> LFType)
ins : (LFType -> positive -> LFType -> trie -> trie)
insert : (positive -> LFType -> trie_table -> trie_table)
xI : (positive -> positive)
xO : (positive -> positive)
xH : positive
Eq : comparison
Lt : comparison
Gt : comparison
One : LFType
Two : LFType
Three : LFType
Four : LFType
Leaf : trie
Node : (trie -> LFType -> trie -> trie)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 24.57 seconds


Label: 0 (0)
(false = gv2), (true = gv2), (q = q), (q = p), (p = q), (p = p), (gv2 = gv2), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary p))
(Permutation (print_in_binary p) (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (positive2nat q < positive2nat p), (positive2nat p < positive2nat q), (positive2nat q <= positive2nat p), (positive2nat p <= positive2nat q), (false <> gv2)
(true <> gv2), (q <> q), (q <> p), (p <> q), (p <> p), (gv2 <> gv2), (q~0 = q), (q~0 = p), (q~0 = q~1), (q~0 = p~1)
(q~0 = add q q), (q~0 = add q p), (q~0 = add p q), (q~0 = add p p), (q~0 = addc gv2 q q), (q~0 = addc gv2 q p), (q~0 = addc gv2 p q), (q~0 = addc gv2 p p), (q~0 = succ q), (q~0 = succ p)
(p~0 = q), (p~0 = p), (p~0 = q~1), (p~0 = p~1), (p~0 = add q q), (p~0 = add q p), (p~0 = add p q), (p~0 = add p p), (p~0 = addc gv2 q q), (p~0 = addc gv2 q p)
(p~0 = addc gv2 p q), (p~0 = addc gv2 p p), (p~0 = succ q), (p~0 = succ p), (q~1 = q), (q~1 = p), (q~1 = add q q), (q~1 = add q p), (q~1 = add p q), (q~1 = add p p)
(q~1 = addc gv2 q q), (q~1 = addc gv2 q p), (q~1 = addc gv2 p q), (q~1 = addc gv2 p p), (q~1 = succ q), (q~1 = succ p), (p~1 = q), (p~1 = p), (p~1 = add q q), (p~1 = add q p)
(p~1 = add p q), (p~1 = add p p), (p~1 = addc gv2 q q), (p~1 = addc gv2 q p), (p~1 = addc gv2 p q), (p~1 = addc gv2 p p), (p~1 = succ q), (p~1 = succ p), (add q q = q), (add q q = p)
(add q p = q), (add q p = p), (add p q = q), (add p q = p), (add p p = q), (add p p = p), (addc gv2 q q = q), (addc gv2 q q = p), (addc gv2 q q = add q q), (addc gv2 q q = add q p)
(addc gv2 q q = add p q), (addc gv2 q q = add p p), (addc gv2 q p = q), (addc gv2 q p = p), (addc gv2 q p = add q q), (addc gv2 q p = add q p), (addc gv2 q p = add p q), (addc gv2 q p = add p p), (addc gv2 p q = q), (addc gv2 p q = p)
(addc gv2 p q = add q q), (addc gv2 p q = add q p), (addc gv2 p q = add p q), (addc gv2 p q = add p p), (addc gv2 p p = q), (addc gv2 p p = p), (addc gv2 p p = add q q), (addc gv2 p p = add q p), (addc gv2 p p = add p q), (addc gv2 p p = add p p)
(succ q = q), (succ q = p), (succ q = add q q), (succ q = add q p), (succ q = add p q), (succ q = add p p), (succ q = addc gv2 q q), (succ q = addc gv2 q p), (succ q = addc gv2 p q), (succ q = addc gv2 p p)
(succ p = q), (succ p = p), (succ p = add q q), (succ p = add q p), (succ p = add p q), (succ p = add p p), (succ p = addc gv2 q q), (succ p = addc gv2 q p), (succ p = addc gv2 p q), (succ p = addc gv2 p p)
(xH = q~0), (xH = p~0), (xH = q~1), (xH = p~1), (xH = add q q), (xH = add q p), (xH = add p q), (xH = add p p), (xH = addc gv2 q q), (xH = addc gv2 q p)
(xH = addc gv2 p q), (xH = addc gv2 p p), (xH = succ q), (xH = succ p), (Eq = compare q q), (Eq = compare q p), (Eq = compare p q), (Eq = compare p p), (Lt = compare q q), (Lt = compare q p)
(Lt = compare p q), (Lt = compare p p), (Gt = compare q q), (Gt = compare q p), (Gt = compare p q), (Gt = compare p p), (None = Some q), (None = Some p), (None = Some gv2)

Label: 1 (1)
(gv5 < gv5), (gv5 <= gv5), (gv5 = gv5), (q = q), (q = p), (p = q), (p = p), (false = (gv5 >? gv5)), (false = (gv5 >=? gv5)), (true = (gv5 >? gv5))
(true = (gv5 >=? gv5)), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary p)), (Permutation (print_in_binary q) []), (Permutation (print_in_binary p) (print_in_binary q)), (Permutation (print_in_binary p) []), (Permutation [] (print_in_binary q)), (Permutation [] (print_in_binary p)), (In gv5 (print_in_binary q))
(In gv5 (print_in_binary p)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (gv5 < positive2nat q), (gv5 < positive2nat p), (positive2nat q < gv5), (positive2nat q < positive2nat p), (positive2nat p < gv5)
(positive2nat p < positive2nat q), (gv5 <= positive2nat q), (gv5 <= positive2nat p), (positive2nat q <= gv5), (positive2nat q <= positive2nat p), (positive2nat p <= gv5), (positive2nat p <= positive2nat q), (~ gv5 < gv5), (~ gv5 <= gv5), (gv5 <> gv5)
(q <> q), (q <> p), (p <> q), (p <> p), (q~0 = q), (q~0 = p), (q~0 = q~1), (q~0 = p~1), (q~0 = add q q), (q~0 = add q p)
(q~0 = add p q), (q~0 = add p p), (q~0 = nat2positive gv5), (q~0 = of_succ_nat gv5), (q~0 = succ q), (q~0 = succ p), (p~0 = q), (p~0 = p), (p~0 = q~1), (p~0 = p~1)
(p~0 = add q q), (p~0 = add q p), (p~0 = add p q), (p~0 = add p p), (p~0 = nat2positive gv5), (p~0 = of_succ_nat gv5), (p~0 = succ q), (p~0 = succ p), (q~1 = q), (q~1 = p)
(q~1 = add q q), (q~1 = add q p), (q~1 = add p q), (q~1 = add p p), (q~1 = nat2positive gv5), (q~1 = of_succ_nat gv5), (q~1 = succ q), (q~1 = succ p), (p~1 = q), (p~1 = p)
(p~1 = add q q), (p~1 = add q p), (p~1 = add p q), (p~1 = add p p), (p~1 = nat2positive gv5), (p~1 = of_succ_nat gv5), (p~1 = succ q), (p~1 = succ p), (add q q = q), (add q q = p)
(add q p = q), (add q p = p), (add p q = q), (add p q = p), (add p p = q), (add p p = p), (nat2positive gv5 = q), (nat2positive gv5 = p), (nat2positive gv5 = add q q), (nat2positive gv5 = add q p)
(nat2positive gv5 = add p q), (nat2positive gv5 = add p p), (of_succ_nat gv5 = q), (of_succ_nat gv5 = p), (of_succ_nat gv5 = add q q), (of_succ_nat gv5 = add q p), (of_succ_nat gv5 = add p q), (of_succ_nat gv5 = add p p), (of_succ_nat gv5 = nat2positive gv5), (succ q = q)
(succ q = p), (succ q = add q q), (succ q = add q p), (succ q = add p q), (succ q = add p p), (succ q = nat2positive gv5), (succ q = of_succ_nat gv5), (succ p = q), (succ p = p), (succ p = add q q)
(succ p = add q p), (succ p = add p q), (succ p = add p p), (succ p = nat2positive gv5), (succ p = of_succ_nat gv5), (xH = q~0), (xH = p~0), (xH = q~1), (xH = p~1), (xH = add q q)
(xH = add q p), (xH = add p q), (xH = add p p), (xH = nat2positive gv5), (xH = of_succ_nat gv5), (xH = succ q), (xH = succ p), (Eq = compare q q), (Eq = compare q p), (Eq = compare p q)
(Eq = compare p p), (Lt = compare q q), (Lt = compare q p), (Lt = compare p q), (Lt = compare p p), (Gt = compare q q), (Gt = compare q p), (Gt = compare p q), (Gt = compare p p), (None = Some q)
(None = Some p), (positive2nat q = gv5), (positive2nat p = gv5), ([] = print_in_binary q), ([] = print_in_binary p), (None = Some gv5), ((gv5 >? gv5) = (gv5 >=? gv5))

Label: 2 (2)
(gv3 < gv3), (gv3 <= gv3), (gv3 = gv3), (q = q), (q = p), (p = q), (p = p), (false = (gv3 >? gv3)), (false = (gv3 >=? gv3)), (true = (gv3 >? gv3))
(true = (gv3 >=? gv3)), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary p)), (Permutation (print_in_binary q) []), (Permutation (print_in_binary p) (print_in_binary q)), (Permutation (print_in_binary p) []), (Permutation [] (print_in_binary q)), (Permutation [] (print_in_binary p)), (In gv3 (print_in_binary q))
(In gv3 (print_in_binary p)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (gv3 < positive2nat q), (gv3 < positive2nat p), (positive2nat q < gv3), (positive2nat q < positive2nat p), (positive2nat p < gv3)
(positive2nat p < positive2nat q), (gv3 <= positive2nat q), (gv3 <= positive2nat p), (positive2nat q <= gv3), (positive2nat q <= positive2nat p), (positive2nat p <= gv3), (positive2nat p <= positive2nat q), (~ gv3 < gv3), (~ gv3 <= gv3), (gv3 <> gv3)
(q <> q), (q <> p), (p <> q), (p <> p), (q~0 = q), (q~0 = p), (q~0 = q~1), (q~0 = p~1), (q~0 = add q q), (q~0 = add q p)
(q~0 = add p q), (q~0 = add p p), (q~0 = nat2positive gv3), (q~0 = of_succ_nat gv3), (q~0 = succ q), (q~0 = succ p), (p~0 = q), (p~0 = p), (p~0 = q~1), (p~0 = p~1)
(p~0 = add q q), (p~0 = add q p), (p~0 = add p q), (p~0 = add p p), (p~0 = nat2positive gv3), (p~0 = of_succ_nat gv3), (p~0 = succ q), (p~0 = succ p), (q~1 = q), (q~1 = p)
(q~1 = add q q), (q~1 = add q p), (q~1 = add p q), (q~1 = add p p), (q~1 = nat2positive gv3), (q~1 = of_succ_nat gv3), (q~1 = succ q), (q~1 = succ p), (p~1 = q), (p~1 = p)
(p~1 = add q q), (p~1 = add q p), (p~1 = add p q), (p~1 = add p p), (p~1 = nat2positive gv3), (p~1 = of_succ_nat gv3), (p~1 = succ q), (p~1 = succ p), (add q q = q), (add q q = p)
(add q p = q), (add q p = p), (add p q = q), (add p q = p), (add p p = q), (add p p = p), (nat2positive gv3 = q), (nat2positive gv3 = p), (nat2positive gv3 = add q q), (nat2positive gv3 = add q p)
(nat2positive gv3 = add p q), (nat2positive gv3 = add p p), (of_succ_nat gv3 = q), (of_succ_nat gv3 = p), (of_succ_nat gv3 = add q q), (of_succ_nat gv3 = add q p), (of_succ_nat gv3 = add p q), (of_succ_nat gv3 = add p p), (of_succ_nat gv3 = nat2positive gv3), (succ q = q)
(succ q = p), (succ q = add q q), (succ q = add q p), (succ q = add p q), (succ q = add p p), (succ q = nat2positive gv3), (succ q = of_succ_nat gv3), (succ p = q), (succ p = p), (succ p = add q q)
(succ p = add q p), (succ p = add p q), (succ p = add p p), (succ p = nat2positive gv3), (succ p = of_succ_nat gv3), (xH = q~0), (xH = p~0), (xH = q~1), (xH = p~1), (xH = add q q)
(xH = add q p), (xH = add p q), (xH = add p p), (xH = nat2positive gv3), (xH = of_succ_nat gv3), (xH = succ q), (xH = succ p), (Eq = compare q q), (Eq = compare q p), (Eq = compare p q)
(Eq = compare p p), (Lt = compare q q), (Lt = compare q p), (Lt = compare p q), (Lt = compare p p), (Gt = compare q q), (Gt = compare q p), (Gt = compare p q), (Gt = compare p p), (None = Some q)
(None = Some p), (positive2nat q = gv3), (positive2nat p = gv3), ([] = print_in_binary q), ([] = print_in_binary p), (None = Some gv3), ((gv3 >? gv3) = (gv3 >=? gv3))

Label: 3 (3)
(gv0 < gv0), (gv0 <= gv0), (q = q), (q = p), (p = q), (p = p), (gv0 = gv0), (false = (gv0 >? gv0)), (false = (gv0 >=? gv0)), (true = (gv0 >? gv0))
(true = (gv0 >=? gv0)), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary p)), (Permutation (print_in_binary q) []), (Permutation (print_in_binary p) (print_in_binary q)), (Permutation (print_in_binary p) []), (Permutation [] (print_in_binary q)), (Permutation [] (print_in_binary p)), (In gv0 (print_in_binary q))
(In gv0 (print_in_binary p)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (gv0 < positive2nat q), (gv0 < positive2nat p), (positive2nat q < gv0), (positive2nat q < positive2nat p), (positive2nat p < gv0)
(positive2nat p < positive2nat q), (gv0 <= positive2nat q), (gv0 <= positive2nat p), (positive2nat q <= gv0), (positive2nat q <= positive2nat p), (positive2nat p <= gv0), (positive2nat p <= positive2nat q), (~ gv0 < gv0), (~ gv0 <= gv0), (q <> q)
(q <> p), (p <> q), (p <> p), (gv0 <> gv0), (q~0 = q), (q~0 = p), (q~0 = q~1), (q~0 = p~1), (q~0 = add q q), (q~0 = add q p)
(q~0 = add p q), (q~0 = add p p), (q~0 = nat2positive gv0), (q~0 = of_succ_nat gv0), (q~0 = succ q), (q~0 = succ p), (p~0 = q), (p~0 = p), (p~0 = q~1), (p~0 = p~1)
(p~0 = add q q), (p~0 = add q p), (p~0 = add p q), (p~0 = add p p), (p~0 = nat2positive gv0), (p~0 = of_succ_nat gv0), (p~0 = succ q), (p~0 = succ p), (q~1 = q), (q~1 = p)
(q~1 = add q q), (q~1 = add q p), (q~1 = add p q), (q~1 = add p p), (q~1 = nat2positive gv0), (q~1 = of_succ_nat gv0), (q~1 = succ q), (q~1 = succ p), (p~1 = q), (p~1 = p)
(p~1 = add q q), (p~1 = add q p), (p~1 = add p q), (p~1 = add p p), (p~1 = nat2positive gv0), (p~1 = of_succ_nat gv0), (p~1 = succ q), (p~1 = succ p), (add q q = q), (add q q = p)
(add q p = q), (add q p = p), (add p q = q), (add p q = p), (add p p = q), (add p p = p), (nat2positive gv0 = q), (nat2positive gv0 = p), (nat2positive gv0 = add q q), (nat2positive gv0 = add q p)
(nat2positive gv0 = add p q), (nat2positive gv0 = add p p), (of_succ_nat gv0 = q), (of_succ_nat gv0 = p), (of_succ_nat gv0 = add q q), (of_succ_nat gv0 = add q p), (of_succ_nat gv0 = add p q), (of_succ_nat gv0 = add p p), (of_succ_nat gv0 = nat2positive gv0), (succ q = q)
(succ q = p), (succ q = add q q), (succ q = add q p), (succ q = add p q), (succ q = add p p), (succ q = nat2positive gv0), (succ q = of_succ_nat gv0), (succ p = q), (succ p = p), (succ p = add q q)
(succ p = add q p), (succ p = add p q), (succ p = add p p), (succ p = nat2positive gv0), (succ p = of_succ_nat gv0), (xH = q~0), (xH = p~0), (xH = q~1), (xH = p~1), (xH = add q q)
(xH = add q p), (xH = add p q), (xH = add p p), (xH = nat2positive gv0), (xH = of_succ_nat gv0), (xH = succ q), (xH = succ p), (Eq = compare q q), (Eq = compare q p), (Eq = compare p q)
(Eq = compare p p), (Lt = compare q q), (Lt = compare q p), (Lt = compare p q), (Lt = compare p p), (Gt = compare q q), (Gt = compare q p), (Gt = compare p q), (Gt = compare p p), (None = Some q)
(None = Some p), (positive2nat q = gv0), (positive2nat p = gv0), ([] = print_in_binary q), ([] = print_in_binary p), (None = Some gv0), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 4 (4)
(gv4 < gv4), (gv4 <= gv4), (gv4 = gv4), (q = q), (q = p), (p = q), (p = p), (false = (gv4 >? gv4)), (false = (gv4 >=? gv4)), (true = (gv4 >? gv4))
(true = (gv4 >=? gv4)), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary p)), (Permutation (print_in_binary q) []), (Permutation (print_in_binary p) (print_in_binary q)), (Permutation (print_in_binary p) []), (Permutation [] (print_in_binary q)), (Permutation [] (print_in_binary p)), (In gv4 (print_in_binary q))
(In gv4 (print_in_binary p)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (gv4 < positive2nat q), (gv4 < positive2nat p), (positive2nat q < gv4), (positive2nat q < positive2nat p), (positive2nat p < gv4)
(positive2nat p < positive2nat q), (gv4 <= positive2nat q), (gv4 <= positive2nat p), (positive2nat q <= gv4), (positive2nat q <= positive2nat p), (positive2nat p <= gv4), (positive2nat p <= positive2nat q), (~ gv4 < gv4), (~ gv4 <= gv4), (gv4 <> gv4)
(q <> q), (q <> p), (p <> q), (p <> p), (q~0 = q), (q~0 = p), (q~0 = q~1), (q~0 = p~1), (q~0 = add q q), (q~0 = add q p)
(q~0 = add p q), (q~0 = add p p), (q~0 = nat2positive gv4), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~0 = succ p), (p~0 = q), (p~0 = p), (p~0 = q~1), (p~0 = p~1)
(p~0 = add q q), (p~0 = add q p), (p~0 = add p q), (p~0 = add p p), (p~0 = nat2positive gv4), (p~0 = of_succ_nat gv4), (p~0 = succ q), (p~0 = succ p), (q~1 = q), (q~1 = p)
(q~1 = add q q), (q~1 = add q p), (q~1 = add p q), (q~1 = add p p), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv4), (q~1 = succ q), (q~1 = succ p), (p~1 = q), (p~1 = p)
(p~1 = add q q), (p~1 = add q p), (p~1 = add p q), (p~1 = add p p), (p~1 = nat2positive gv4), (p~1 = of_succ_nat gv4), (p~1 = succ q), (p~1 = succ p), (add q q = q), (add q q = p)
(add q p = q), (add q p = p), (add p q = q), (add p q = p), (add p p = q), (add p p = p), (nat2positive gv4 = q), (nat2positive gv4 = p), (nat2positive gv4 = add q q), (nat2positive gv4 = add q p)
(nat2positive gv4 = add p q), (nat2positive gv4 = add p p), (of_succ_nat gv4 = q), (of_succ_nat gv4 = p), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = add q p), (of_succ_nat gv4 = add p q), (of_succ_nat gv4 = add p p), (of_succ_nat gv4 = nat2positive gv4), (succ q = q)
(succ q = p), (succ q = add q q), (succ q = add q p), (succ q = add p q), (succ q = add p p), (succ q = nat2positive gv4), (succ q = of_succ_nat gv4), (succ p = q), (succ p = p), (succ p = add q q)
(succ p = add q p), (succ p = add p q), (succ p = add p p), (succ p = nat2positive gv4), (succ p = of_succ_nat gv4), (xH = q~0), (xH = p~0), (xH = q~1), (xH = p~1), (xH = add q q)
(xH = add q p), (xH = add p q), (xH = add p p), (xH = nat2positive gv4), (xH = of_succ_nat gv4), (xH = succ q), (xH = succ p), (Eq = compare q q), (Eq = compare q p), (Eq = compare p q)
(Eq = compare p p), (Lt = compare q q), (Lt = compare q p), (Lt = compare p q), (Lt = compare p p), (Gt = compare q q), (Gt = compare q p), (Gt = compare p q), (Gt = compare p p), (None = Some q)
(None = Some p), (positive2nat q = gv4), (positive2nat p = gv4), ([] = print_in_binary q), ([] = print_in_binary p), (None = Some gv4), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 5 (5)
(q = q), (q = p), (q = gv1), (p = q), (p = p), (p = gv1), (gv1 = q), (gv1 = p), (gv1 = gv1), (first_le_second (print_in_binary q))
(first_le_second (print_in_binary p)), (first_le_second (print_in_binary gv1)), (Permutation (print_in_binary q) (print_in_binary p)), (Permutation (print_in_binary q) (print_in_binary gv1)), (Permutation (print_in_binary p) (print_in_binary q)), (Permutation (print_in_binary p) (print_in_binary gv1)), (Permutation (print_in_binary gv1) (print_in_binary q)), (Permutation (print_in_binary gv1) (print_in_binary p)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary p))
(In (positive2nat q) (print_in_binary gv1)), (In (positive2nat p) (print_in_binary q)), (In (positive2nat p) (print_in_binary p)), (In (positive2nat p) (print_in_binary gv1)), (In (positive2nat gv1) (print_in_binary q)), (In (positive2nat gv1) (print_in_binary p)), (In (positive2nat gv1) (print_in_binary gv1)), (positive2nat q < positive2nat p), (positive2nat q < positive2nat gv1), (positive2nat p < positive2nat q)
(positive2nat p < positive2nat gv1), (positive2nat gv1 < positive2nat q), (positive2nat gv1 < positive2nat p), (positive2nat q <= positive2nat p), (positive2nat q <= positive2nat gv1), (positive2nat p <= positive2nat q), (positive2nat p <= positive2nat gv1), (positive2nat gv1 <= positive2nat q), (positive2nat gv1 <= positive2nat p), (q <> q)
(q <> p), (q <> gv1), (p <> q), (p <> p), (p <> gv1), (gv1 <> q), (gv1 <> p), (gv1 <> gv1), (q~0 = q), (q~0 = p)
(q~0 = gv1), (q~0 = q~1), (q~0 = p~1), (q~0 = gv1~1), (q~0 = add q q), (q~0 = add q p), (q~0 = add q gv1), (q~0 = add p q), (q~0 = add p p), (q~0 = add p gv1)
(q~0 = add gv1 q), (q~0 = add gv1 p), (q~0 = add gv1 gv1), (q~0 = succ q), (q~0 = succ p), (q~0 = succ gv1), (p~0 = q), (p~0 = p), (p~0 = gv1), (p~0 = q~1)
(p~0 = p~1), (p~0 = gv1~1), (p~0 = add q q), (p~0 = add q p), (p~0 = add q gv1), (p~0 = add p q), (p~0 = add p p), (p~0 = add p gv1), (p~0 = add gv1 q), (p~0 = add gv1 p)
(p~0 = add gv1 gv1), (p~0 = succ q), (p~0 = succ p), (p~0 = succ gv1), (gv1~0 = q), (gv1~0 = p), (gv1~0 = gv1), (gv1~0 = q~1), (gv1~0 = p~1), (gv1~0 = gv1~1)
(gv1~0 = add q q), (gv1~0 = add q p), (gv1~0 = add q gv1), (gv1~0 = add p q), (gv1~0 = add p p), (gv1~0 = add p gv1), (gv1~0 = add gv1 q), (gv1~0 = add gv1 p), (gv1~0 = add gv1 gv1), (gv1~0 = succ q)
(gv1~0 = succ p), (gv1~0 = succ gv1), (q~1 = q), (q~1 = p), (q~1 = gv1), (q~1 = add q q), (q~1 = add q p), (q~1 = add q gv1), (q~1 = add p q), (q~1 = add p p)
(q~1 = add p gv1), (q~1 = add gv1 q), (q~1 = add gv1 p), (q~1 = add gv1 gv1), (q~1 = succ q), (q~1 = succ p), (q~1 = succ gv1), (p~1 = q), (p~1 = p), (p~1 = gv1)
(p~1 = add q q), (p~1 = add q p), (p~1 = add q gv1), (p~1 = add p q), (p~1 = add p p), (p~1 = add p gv1), (p~1 = add gv1 q), (p~1 = add gv1 p), (p~1 = add gv1 gv1), (p~1 = succ q)
(p~1 = succ p), (p~1 = succ gv1), (gv1~1 = q), (gv1~1 = p), (gv1~1 = gv1), (gv1~1 = add q q), (gv1~1 = add q p), (gv1~1 = add q gv1), (gv1~1 = add p q), (gv1~1 = add p p)
(gv1~1 = add p gv1), (gv1~1 = add gv1 q), (gv1~1 = add gv1 p), (gv1~1 = add gv1 gv1), (gv1~1 = succ q), (gv1~1 = succ p), (gv1~1 = succ gv1), (add q q = q), (add q q = p), (add q q = gv1)
(add q p = q), (add q p = p), (add q p = gv1), (add q gv1 = q), (add q gv1 = p), (add q gv1 = gv1), (add p q = q), (add p q = p), (add p q = gv1), (add p p = q)
(add p p = p), (add p p = gv1), (add p gv1 = q), (add p gv1 = p), (add p gv1 = gv1), (add gv1 q = q), (add gv1 q = p), (add gv1 q = gv1), (add gv1 p = q), (add gv1 p = p)
(add gv1 p = gv1), (add gv1 gv1 = q), (add gv1 gv1 = p), (add gv1 gv1 = gv1), (succ q = q), (succ q = p), (succ q = gv1), (succ q = add q q), (succ q = add q p), (succ q = add q gv1)
(succ q = add p q), (succ q = add p p), (succ q = add p gv1), (succ q = add gv1 q), (succ q = add gv1 p), (succ q = add gv1 gv1), (succ p = q), (succ p = p), (succ p = gv1), (succ p = add q q)
(succ p = add q p), (succ p = add q gv1), (succ p = add p q), (succ p = add p p), (succ p = add p gv1), (succ p = add gv1 q), (succ p = add gv1 p), (succ p = add gv1 gv1), (succ gv1 = q), (succ gv1 = p)
(succ gv1 = gv1), (succ gv1 = add q q), (succ gv1 = add q p), (succ gv1 = add q gv1), (succ gv1 = add p q), (succ gv1 = add p p), (succ gv1 = add p gv1), (succ gv1 = add gv1 q), (succ gv1 = add gv1 p), (succ gv1 = add gv1 gv1)
(xH = q~0), (xH = p~0), (xH = gv1~0), (xH = q~1), (xH = p~1), (xH = gv1~1), (xH = add q q), (xH = add q p), (xH = add q gv1), (xH = add p q)
(xH = add p p), (xH = add p gv1), (xH = add gv1 q), (xH = add gv1 p), (xH = add gv1 gv1), (xH = succ q), (xH = succ p), (xH = succ gv1), (Eq = compare q q), (Eq = compare q p)
(Eq = compare q gv1), (Eq = compare p q), (Eq = compare p p), (Eq = compare p gv1), (Eq = compare gv1 q), (Eq = compare gv1 p), (Eq = compare gv1 gv1), (Lt = compare q q), (Lt = compare q p), (Lt = compare q gv1)
(Lt = compare p q), (Lt = compare p p), (Lt = compare p gv1), (Lt = compare gv1 q), (Lt = compare gv1 p), (Lt = compare gv1 gv1), (Gt = compare q q), (Gt = compare q p), (Gt = compare q gv1), (Gt = compare p q)
(Gt = compare p p), (Gt = compare p gv1), (Gt = compare gv1 q), (Gt = compare gv1 p), (Gt = compare gv1 gv1), (None = Some q), (None = Some p), (None = Some gv1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 29.756 seconds


Label: 0 (0)
(false = gv2), (true <> gv2), (q~0 = addc gv2 q q), (p~0 = addc gv2 p p), (addc gv2 q q = add q q), (addc gv2 q p = add q p), (addc gv2 q p = add p q), (addc gv2 p q = add q p), (addc gv2 p q = add p q), (addc gv2 p p = add p p)

Label: 1 (1)
(positive2nat q = gv5), (succ q = of_succ_nat gv5)

Label: 2 (2)
(nat2positive gv3 = add q p), (nat2positive gv3 = add p q)

Label: 3 (3)
(nat2positive gv0 = add q p), (nat2positive gv0 = add p q)

Label: 4 (4)
(positive2nat p = gv4), (succ p = of_succ_nat gv4)

Label: 5 (5)
(add q p = gv1), (add p q = gv1)


------------------------------ ALL RESULTS ------------------------------
1. (positive2nat (addc false p q) = positive2nat p + positive2nat q)

2. (add q p = addc false p q)

3. (add p q = addc false p q)

4. (true <> gv2 -> positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

5. (succ q = of_succ_nat gv5 ->  positive2nat (addc false p q) = positive2nat p + gv5)

6. (succ p = of_succ_nat gv4 ->  positive2nat (addc false p q) = gv4 + positive2nat q)

7. (add q p = gv1 -> positive2nat gv1 = positive2nat p + positive2nat q)

8. (add p q = gv1 -> positive2nat gv1 = positive2nat p + positive2nat q)

9. (nat2positive gv3 = add q p -> positive2nat (addc false p q) = gv3)

10. (nat2positive gv3 = add p q -> positive2nat (addc false p q) = gv3)

11. (nat2positive gv0 = add q p -> gv0 = positive2nat p + positive2nat q)

12. (nat2positive gv0 = add p q -> gv0 = positive2nat p + positive2nat q)

13. (q~0 = addc gv2 q q ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

14. (p~0 = addc gv2 p p ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

15. (addc gv2 q q = add q q ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

16. (addc gv2 q p = add q p ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

17. (addc gv2 q p = add p q ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

18. (addc gv2 p q = add q p ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

19. (addc gv2 p q = add p q ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

20. (addc gv2 p p = add p p ->  positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 66.351 seconds

Number of Result Pairs Returned: 20

1. (positive2nat (addc false p q) = positive2nat p + positive2nat q)

2. (add q p = addc false p q)

3. (add p q = addc false p q)

4. (true <> gv2 -> positive2nat (addc gv2 p q) = positive2nat p + positive2nat q)

5. (succ q = of_succ_nat gv5 ->  positive2nat (addc false p q) = positive2nat p + gv5)
