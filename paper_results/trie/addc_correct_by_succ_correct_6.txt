Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) =
 S (S (positive2nat q + (positive2nat q + 0))))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 1.928 seconds

gv4 : nat = 0
gv6 : nat = (S (positive2nat q + (positive2nat q + 0)))
gv7 : nat = (positive2nat q + (positive2nat q + 0))
gv0 : nat = (positive2nat (succ q) + (positive2nat (succ q) + 0))
gv2 : positive = (succ q)
gv3 : nat = (positive2nat (succ q) + 0)
gv5 : nat = (S (S (positive2nat q + (positive2nat q + 0))))
gv1 : nat = (positive2nat (succ q))
gv8 : nat = (positive2nat q)
gv9 : nat = (positive2nat q + 0)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 79.036 seconds

Label: Generalization #0
Assumptions: 

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) =
 S (S (positive2nat q + (positive2nat q + 0))))
Case: Valid and Un-Generalized

Label: Generalization #1
Assumptions: 
 -- (positive2nat q + 0 = gv9)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) =
 S (S (positive2nat q + gv9)))
Case: Invalid and Generalized

Label: Generalization #2
Assumptions: 
 -- (positive2nat q = gv8)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) =
 S (S (gv8 + (gv8 + 0))))
Case: Invalid and Generalized

Label: Generalization #3
Assumptions: 
 -- (S (S (positive2nat q + (positive2nat q + 0))) = gv5)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) = gv5)
Case: Invalid and Generalized

Label: Generalization #4
Assumptions: 
 -- (positive2nat (succ q) = gv1)

----------------------------------
Goal: (gv1 + (gv1 + 0) = S (S (positive2nat q + (positive2nat q + 0))))
Case: Invalid and Generalized

Label: Generalization #5
Assumptions: 
 -- (positive2nat (succ q) + 0 = gv3)

----------------------------------
Goal: (positive2nat (succ q) + gv3 = S (S (positive2nat q + (positive2nat q + 0))))
Case: Invalid and Generalized

Label: Generalization #6
Assumptions: 
 -- (succ q = gv2)

----------------------------------
Goal: (positive2nat gv2 + (positive2nat gv2 + 0) =
 S (S (positive2nat q + (positive2nat q + 0))))
Case: Invalid and Generalized

Label: Generalization #7
Assumptions: 
 -- (positive2nat (succ q) + (positive2nat (succ q) + 0) = gv0)

----------------------------------
Goal: (gv0 = S (S (positive2nat q + (positive2nat q + 0))))
Case: Invalid and Generalized

Label: Generalization #8
Assumptions: 
 -- (positive2nat q + (positive2nat q + 0) = gv7)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) = S (S gv7))
Case: Invalid and Generalized

Label: Generalization #9
Assumptions: 
 -- (S (positive2nat q + (positive2nat q + 0)) = gv6)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + 0) = S gv6)
Case: Invalid and Generalized

Label: Generalization #10
Assumptions: 

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) =
 S (S (positive2nat q + (positive2nat q + gv4))))
Case: Valid and Generalized

Label: Generalization #11
Assumptions: 
 -- (0 = gv4)
 -- (positive2nat q + gv4 = gv9)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) =
 S (S (positive2nat q + gv9)))
Case: Invalid and Generalized

Label: Generalization #12
Assumptions: 
 -- (0 = gv4)
 -- (positive2nat q = gv8)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) =
 S (S (gv8 + (gv8 + gv4))))
Case: Invalid and Generalized

Label: Generalization #13
Assumptions: 
 -- (S (S (positive2nat q + (positive2nat q + gv4))) = gv5)
 -- (0 = gv4)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) = gv5)
Case: Invalid and Generalized

Label: Generalization #14
Assumptions: 
 -- (positive2nat (succ q) = gv1)
 -- (0 = gv4)

----------------------------------
Goal: (gv1 + (gv1 + gv4) = S (S (positive2nat q + (positive2nat q + gv4))))
Case: Invalid and Generalized

Label: Generalization #15
Assumptions: 
 -- (0 = gv4)
 -- (positive2nat (succ q) + gv4 = gv3)

----------------------------------
Goal: (positive2nat (succ q) + gv3 =
 S (S (positive2nat q + (positive2nat q + gv4))))
Case: Invalid and Generalized

Label: Generalization #16
Assumptions: 
 -- (0 = gv4)
 -- (succ q = gv2)

----------------------------------
Goal: (positive2nat gv2 + (positive2nat gv2 + gv4) =
 S (S (positive2nat q + (positive2nat q + gv4))))
Case: Invalid and Generalized

Label: Generalization #17
Assumptions: 
 -- (0 = gv4)
 -- (positive2nat (succ q) + (positive2nat (succ q) + gv4) = gv0)

----------------------------------
Goal: (gv0 = S (S (positive2nat q + (positive2nat q + gv4))))
Case: Invalid and Generalized

Label: Generalization #18
Assumptions: 
 -- (0 = gv4)
 -- (positive2nat q + (positive2nat q + gv4) = gv7)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) = S (S gv7))
Case: Invalid and Generalized

Label: Generalization #19
Assumptions: 
 -- (0 = gv4)
 -- (S (positive2nat q + (positive2nat q + gv4)) = gv6)

----------------------------------
Goal: (positive2nat (succ q) + (positive2nat (succ q) + gv4) = S gv6)
Case: Invalid and Generalized



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 79.179 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
map : (forall A B : Type, (A -> B) -> list A -> list B)
Permutation : (forall A : Type, list A -> list A -> Prop)
geb : (nat -> nat -> bool)
gtb : (nat -> nat -> bool)
maybe_swap : (list nat -> list nat)
first_le_second : (list nat -> Prop)
positive : Set
positive_rect : (forall P : positive -> Type,
 (forall p : positive, P p -> P p~1) ->
 (forall p : positive, P p -> P p~0) -> P xH -> forall p : positive, P p)
positive_rec : (forall P : positive -> Set,
 (forall p : positive, P p -> P p~1) ->
 (forall p : positive, P p -> P p~0) -> P xH -> forall p : positive, P p)
positive2nat : (positive -> nat)
succ : (positive -> positive)
of_succ_nat : (nat -> positive)
nat2positive : (nat -> positive)
print_in_binary : (positive -> list nat)
addc : (bool -> positive -> positive -> positive)
add : (positive -> positive -> positive)
comparison : Set
comparison_rect : (forall P : comparison -> Type,
 P Eq -> P Lt -> P Gt -> forall c : comparison, P c)
comparison_rec : (forall P : comparison -> Set,
 P Eq -> P Lt -> P Gt -> forall c : comparison, P c)
compare : (positive -> positive -> comparison)
LFType : Set
LFType_rect : (forall P : LFType -> Type,
 P One ->
 P Two -> P Three -> P Four -> P Five -> P Six -> forall l : LFType, P l)
LFType_rec : (forall P : LFType -> Set,
 P One ->
 P Two -> P Three -> P Four -> P Five -> P Six -> forall l : LFType, P l)
trie : Set
trie_rect : (forall P : trie -> Type,
 P Leaf ->
 (forall t : trie,
  P t -> forall (l : LFType) (t0 : trie), P t0 -> P (Node t l t0)) ->
 forall t : trie, P t)
trie_rec : (forall P : trie -> Set,
 P Leaf ->
 (forall t : trie,
  P t -> forall (l : LFType) (t0 : trie), P t0 -> P (Node t l t0)) ->
 forall t : trie, P t)
trie_table : Type
empty : (LFType -> trie_table)
look : (LFType -> positive -> trie -> LFType)
lookup : (positive -> trie_table -> LFType)
ins : (LFType -> positive -> LFType -> trie -> trie)
insert : (positive -> LFType -> trie_table -> trie_table)
xI : (positive -> positive)
xO : (positive -> positive)
xH : positive
Eq : comparison
Lt : comparison
Gt : comparison
One : LFType
Two : LFType
Three : LFType
Four : LFType
Leaf : trie
Node : (trie -> LFType -> trie -> trie)

Label: 0 (0)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 1 (1)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 2 (2)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 3 (3)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 4 (4)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 5 (5)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 6 (6)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 7 (7)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 8 (8)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 9 (9)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 10 (10)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 11 (11)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 12 (12)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 13 (13)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 14 (14)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 15 (15)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 16 (16)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500

Label: 17 (17)
Inferring Condition About Generalization
Positive Examples: 500
Negative Examples: 500


------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 79.409 seconds


Label: 0 (0)
(gv9 < gv9), (gv9 <= gv9), (gv9 = gv9), (q = q), (false = (gv9 >? gv9)), (false = (gv9 >=? gv9)), (true = (gv9 >? gv9)), (true = (gv9 >=? gv9)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv9 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv9 < positive2nat q), (positive2nat q < gv9), (gv9 <= positive2nat q), (positive2nat q <= gv9), (~ gv9 < gv9), (~ gv9 <= gv9), (gv9 <> gv9)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv9), (q~0 = of_succ_nat gv9), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv9)
(q~1 = of_succ_nat gv9), (q~1 = succ q), (add q q = q), (nat2positive gv9 = q), (nat2positive gv9 = add q q), (of_succ_nat gv9 = q), (of_succ_nat gv9 = add q q), (of_succ_nat gv9 = nat2positive gv9), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv9), (succ q = of_succ_nat gv9), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv9), (xH = of_succ_nat gv9), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv9), ([] = print_in_binary q), (None = Some gv9), ((gv9 >? gv9) = (gv9 >=? gv9))

Label: 1 (1)
(gv8 < gv8), (gv8 <= gv8), (gv8 = gv8), (q = q), (false = (gv8 >? gv8)), (false = (gv8 >=? gv8)), (true = (gv8 >? gv8)), (true = (gv8 >=? gv8)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv8 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv8 < positive2nat q), (positive2nat q < gv8), (gv8 <= positive2nat q), (positive2nat q <= gv8), (~ gv8 < gv8), (~ gv8 <= gv8), (gv8 <> gv8)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv8), (q~0 = of_succ_nat gv8), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv8)
(q~1 = of_succ_nat gv8), (q~1 = succ q), (add q q = q), (nat2positive gv8 = q), (nat2positive gv8 = add q q), (of_succ_nat gv8 = q), (of_succ_nat gv8 = add q q), (of_succ_nat gv8 = nat2positive gv8), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv8), (succ q = of_succ_nat gv8), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv8), (xH = of_succ_nat gv8), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv8), ([] = print_in_binary q), (None = Some gv8), ((gv8 >? gv8) = (gv8 >=? gv8))

Label: 2 (2)
(gv5 < gv5), (gv5 <= gv5), (gv5 = gv5), (q = q), (false = (gv5 >? gv5)), (false = (gv5 >=? gv5)), (true = (gv5 >? gv5)), (true = (gv5 >=? gv5)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv5 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv5 < positive2nat q), (positive2nat q < gv5), (gv5 <= positive2nat q), (positive2nat q <= gv5), (~ gv5 < gv5), (~ gv5 <= gv5), (gv5 <> gv5)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv5), (q~0 = of_succ_nat gv5), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv5)
(q~1 = of_succ_nat gv5), (q~1 = succ q), (add q q = q), (nat2positive gv5 = q), (nat2positive gv5 = add q q), (of_succ_nat gv5 = q), (of_succ_nat gv5 = add q q), (of_succ_nat gv5 = nat2positive gv5), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv5), (succ q = of_succ_nat gv5), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv5), (xH = of_succ_nat gv5), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv5), ([] = print_in_binary q), (None = Some gv5), ((gv5 >? gv5) = (gv5 >=? gv5))

Label: 3 (3)
(gv1 < gv1), (gv1 <= gv1), (q = q), (gv1 = gv1), (false = (gv1 >? gv1)), (false = (gv1 >=? gv1)), (true = (gv1 >? gv1)), (true = (gv1 >=? gv1)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv1 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv1 < positive2nat q), (positive2nat q < gv1), (gv1 <= positive2nat q), (positive2nat q <= gv1), (~ gv1 < gv1), (~ gv1 <= gv1), (q <> q)
(gv1 <> gv1), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv1), (q~0 = of_succ_nat gv1), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv1)
(q~1 = of_succ_nat gv1), (q~1 = succ q), (add q q = q), (nat2positive gv1 = q), (nat2positive gv1 = add q q), (of_succ_nat gv1 = q), (of_succ_nat gv1 = add q q), (of_succ_nat gv1 = nat2positive gv1), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv1), (succ q = of_succ_nat gv1), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv1), (xH = of_succ_nat gv1), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv1), ([] = print_in_binary q), (None = Some gv1), ((gv1 >? gv1) = (gv1 >=? gv1))

Label: 4 (4)
(gv3 < gv3), (gv3 <= gv3), (gv3 = gv3), (q = q), (false = (gv3 >? gv3)), (false = (gv3 >=? gv3)), (true = (gv3 >? gv3)), (true = (gv3 >=? gv3)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv3 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv3 < positive2nat q), (positive2nat q < gv3), (gv3 <= positive2nat q), (positive2nat q <= gv3), (~ gv3 < gv3), (~ gv3 <= gv3), (gv3 <> gv3)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv3), (q~0 = of_succ_nat gv3), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv3)
(q~1 = of_succ_nat gv3), (q~1 = succ q), (add q q = q), (nat2positive gv3 = q), (nat2positive gv3 = add q q), (of_succ_nat gv3 = q), (of_succ_nat gv3 = add q q), (of_succ_nat gv3 = nat2positive gv3), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv3), (succ q = of_succ_nat gv3), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv3), (xH = of_succ_nat gv3), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv3), ([] = print_in_binary q), (None = Some gv3), ((gv3 >? gv3) = (gv3 >=? gv3))

Label: 5 (5)
(q = q), (q = gv2), (gv2 = q), (gv2 = gv2), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary gv2)), (Permutation (print_in_binary q) (print_in_binary gv2)), (Permutation (print_in_binary gv2) (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary gv2))
(In (positive2nat gv2) (print_in_binary q)), (In (positive2nat gv2) (print_in_binary gv2)), (positive2nat q < positive2nat gv2), (positive2nat gv2 < positive2nat q), (positive2nat q <= positive2nat gv2), (positive2nat gv2 <= positive2nat q), (q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2)
(q~0 = q), (q~0 = gv2), (q~0 = q~1), (q~0 = gv2~1), (q~0 = add q q), (q~0 = add q gv2), (q~0 = add gv2 q), (q~0 = add gv2 gv2), (q~0 = succ q), (q~0 = succ gv2)
(gv2~0 = q), (gv2~0 = gv2), (gv2~0 = q~1), (gv2~0 = gv2~1), (gv2~0 = add q q), (gv2~0 = add q gv2), (gv2~0 = add gv2 q), (gv2~0 = add gv2 gv2), (gv2~0 = succ q), (gv2~0 = succ gv2)
(q~1 = q), (q~1 = gv2), (q~1 = add q q), (q~1 = add q gv2), (q~1 = add gv2 q), (q~1 = add gv2 gv2), (q~1 = succ q), (q~1 = succ gv2), (gv2~1 = q), (gv2~1 = gv2)
(gv2~1 = add q q), (gv2~1 = add q gv2), (gv2~1 = add gv2 q), (gv2~1 = add gv2 gv2), (gv2~1 = succ q), (gv2~1 = succ gv2), (add q q = q), (add q q = gv2), (add q gv2 = q), (add q gv2 = gv2)
(add gv2 q = q), (add gv2 q = gv2), (add gv2 gv2 = q), (add gv2 gv2 = gv2), (succ q = q), (succ q = gv2), (succ q = add q q), (succ q = add q gv2), (succ q = add gv2 q), (succ q = add gv2 gv2)
(succ gv2 = q), (succ gv2 = gv2), (succ gv2 = add q q), (succ gv2 = add q gv2), (succ gv2 = add gv2 q), (succ gv2 = add gv2 gv2), (xH = q~0), (xH = gv2~0), (xH = q~1), (xH = gv2~1)
(xH = add q q), (xH = add q gv2), (xH = add gv2 q), (xH = add gv2 gv2), (xH = succ q), (xH = succ gv2), (Eq = compare q q), (Eq = compare q gv2), (Eq = compare gv2 q), (Eq = compare gv2 gv2)
(Lt = compare q q), (Lt = compare q gv2), (Lt = compare gv2 q), (Lt = compare gv2 gv2), (Gt = compare q q), (Gt = compare q gv2), (Gt = compare gv2 q), (Gt = compare gv2 gv2), (None = Some q), (None = Some gv2)

Label: 6 (6)
(gv0 < gv0), (gv0 <= gv0), (q = q), (gv0 = gv0), (false = (gv0 >? gv0)), (false = (gv0 >=? gv0)), (true = (gv0 >? gv0)), (true = (gv0 >=? gv0)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv0 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv0 < positive2nat q), (positive2nat q < gv0), (gv0 <= positive2nat q), (positive2nat q <= gv0), (~ gv0 < gv0), (~ gv0 <= gv0), (q <> q)
(gv0 <> gv0), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv0), (q~0 = of_succ_nat gv0), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv0)
(q~1 = of_succ_nat gv0), (q~1 = succ q), (add q q = q), (nat2positive gv0 = q), (nat2positive gv0 = add q q), (of_succ_nat gv0 = q), (of_succ_nat gv0 = add q q), (of_succ_nat gv0 = nat2positive gv0), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv0), (succ q = of_succ_nat gv0), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv0), (xH = of_succ_nat gv0), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv0), ([] = print_in_binary q), (None = Some gv0), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 7 (7)
(gv7 < gv7), (gv7 <= gv7), (gv7 = gv7), (q = q), (false = (gv7 >? gv7)), (false = (gv7 >=? gv7)), (true = (gv7 >? gv7)), (true = (gv7 >=? gv7)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv7 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv7 < positive2nat q), (positive2nat q < gv7), (gv7 <= positive2nat q), (positive2nat q <= gv7), (~ gv7 < gv7), (~ gv7 <= gv7), (gv7 <> gv7)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv7), (q~0 = of_succ_nat gv7), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv7)
(q~1 = of_succ_nat gv7), (q~1 = succ q), (add q q = q), (nat2positive gv7 = q), (nat2positive gv7 = add q q), (of_succ_nat gv7 = q), (of_succ_nat gv7 = add q q), (of_succ_nat gv7 = nat2positive gv7), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv7), (succ q = of_succ_nat gv7), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv7), (xH = of_succ_nat gv7), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv7), ([] = print_in_binary q), (None = Some gv7), ((gv7 >? gv7) = (gv7 >=? gv7))

Label: 8 (8)
(gv6 < gv6), (gv6 <= gv6), (gv6 = gv6), (q = q), (false = (gv6 >? gv6)), (false = (gv6 >=? gv6)), (true = (gv6 >? gv6)), (true = (gv6 >=? gv6)), (first_le_second (print_in_binary q)), (Permutation (print_in_binary q) [])
(Permutation [] (print_in_binary q)), (In gv6 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv6 < positive2nat q), (positive2nat q < gv6), (gv6 <= positive2nat q), (positive2nat q <= gv6), (~ gv6 < gv6), (~ gv6 <= gv6), (gv6 <> gv6)
(q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv6), (q~0 = of_succ_nat gv6), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv6)
(q~1 = of_succ_nat gv6), (q~1 = succ q), (add q q = q), (nat2positive gv6 = q), (nat2positive gv6 = add q q), (of_succ_nat gv6 = q), (of_succ_nat gv6 = add q q), (of_succ_nat gv6 = nat2positive gv6), (succ q = q), (succ q = add q q)
(succ q = nat2positive gv6), (succ q = of_succ_nat gv6), (xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv6), (xH = of_succ_nat gv6), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv6), ([] = print_in_binary q), (None = Some gv6), ((gv6 >? gv6) = (gv6 >=? gv6))

Label: 9 (9)
(gv9 < gv9), (gv9 < gv4), (gv4 < gv9), (gv4 < gv4), (gv9 <= gv9), (gv9 <= gv4), (gv4 <= gv9), (gv4 <= gv4), (gv9 = gv9), (gv9 = gv4)
(gv4 = gv9), (gv4 = gv4), (q = q), (false = (gv9 >? gv9)), (false = (gv9 >? gv4)), (false = (gv4 >? gv9)), (false = (gv4 >? gv4)), (false = (gv9 >=? gv9)), (false = (gv9 >=? gv4)), (false = (gv4 >=? gv9))
(false = (gv4 >=? gv4)), (true = (gv9 >? gv9)), (true = (gv9 >? gv4)), (true = (gv4 >? gv9)), (true = (gv4 >? gv4)), (true = (gv9 >=? gv9)), (true = (gv9 >=? gv4)), (true = (gv4 >=? gv9)), (true = (gv4 >=? gv4)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv9 (print_in_binary q)), (In gv4 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv9 < positive2nat q), (gv4 < positive2nat q), (positive2nat q < gv9), (positive2nat q < gv4), (gv9 <= positive2nat q)
(gv4 <= positive2nat q), (positive2nat q <= gv9), (positive2nat q <= gv4), (~ gv9 < gv9), (~ gv9 < gv4), (~ gv4 < gv9), (~ gv4 < gv4), (~ gv9 <= gv9), (~ gv9 <= gv4), (~ gv4 <= gv9)
(~ gv4 <= gv4), (gv9 <> gv9), (gv9 <> gv4), (gv4 <> gv9), (gv4 <> gv4), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv9)
(q~0 = nat2positive gv4), (q~0 = of_succ_nat gv9), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv9), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv9), (q~1 = of_succ_nat gv4)
(q~1 = succ q), (add q q = q), (nat2positive gv9 = q), (nat2positive gv9 = add q q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (of_succ_nat gv9 = q), (of_succ_nat gv9 = add q q), (of_succ_nat gv9 = nat2positive gv9), (of_succ_nat gv9 = nat2positive gv4)
(of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv9), (of_succ_nat gv4 = nat2positive gv4), (succ q = q), (succ q = add q q), (succ q = nat2positive gv9), (succ q = nat2positive gv4), (succ q = of_succ_nat gv9), (succ q = of_succ_nat gv4)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv9), (xH = nat2positive gv4), (xH = of_succ_nat gv9), (xH = of_succ_nat gv4), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv9), (positive2nat q = gv4), ([] = print_in_binary q), (None = Some gv9), (None = Some gv4), ((gv9 >? gv9) = (gv9 >=? gv9)), ((gv9 >? gv9) = (gv9 >=? gv4)), ((gv9 >? gv9) = (gv4 >=? gv9))
((gv9 >? gv9) = (gv4 >=? gv4)), ((gv9 >? gv4) = (gv9 >=? gv9)), ((gv9 >? gv4) = (gv9 >=? gv4)), ((gv9 >? gv4) = (gv4 >=? gv9)), ((gv9 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv9) = (gv9 >=? gv9)), ((gv4 >? gv9) = (gv9 >=? gv4)), ((gv4 >? gv9) = (gv4 >=? gv9)), ((gv4 >? gv9) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv9 >=? gv9))
((gv4 >? gv4) = (gv9 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv9)), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 10 (10)
(gv8 < gv8), (gv8 < gv4), (gv4 < gv8), (gv4 < gv4), (gv8 <= gv8), (gv8 <= gv4), (gv4 <= gv8), (gv4 <= gv4), (gv8 = gv8), (gv8 = gv4)
(gv4 = gv8), (gv4 = gv4), (q = q), (false = (gv8 >? gv8)), (false = (gv8 >? gv4)), (false = (gv4 >? gv8)), (false = (gv4 >? gv4)), (false = (gv8 >=? gv8)), (false = (gv8 >=? gv4)), (false = (gv4 >=? gv8))
(false = (gv4 >=? gv4)), (true = (gv8 >? gv8)), (true = (gv8 >? gv4)), (true = (gv4 >? gv8)), (true = (gv4 >? gv4)), (true = (gv8 >=? gv8)), (true = (gv8 >=? gv4)), (true = (gv4 >=? gv8)), (true = (gv4 >=? gv4)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv8 (print_in_binary q)), (In gv4 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv8 < positive2nat q), (gv4 < positive2nat q), (positive2nat q < gv8), (positive2nat q < gv4), (gv8 <= positive2nat q)
(gv4 <= positive2nat q), (positive2nat q <= gv8), (positive2nat q <= gv4), (~ gv8 < gv8), (~ gv8 < gv4), (~ gv4 < gv8), (~ gv4 < gv4), (~ gv8 <= gv8), (~ gv8 <= gv4), (~ gv4 <= gv8)
(~ gv4 <= gv4), (gv8 <> gv8), (gv8 <> gv4), (gv4 <> gv8), (gv4 <> gv4), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv8)
(q~0 = nat2positive gv4), (q~0 = of_succ_nat gv8), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv8), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv8), (q~1 = of_succ_nat gv4)
(q~1 = succ q), (add q q = q), (nat2positive gv8 = q), (nat2positive gv8 = add q q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (of_succ_nat gv8 = q), (of_succ_nat gv8 = add q q), (of_succ_nat gv8 = nat2positive gv8), (of_succ_nat gv8 = nat2positive gv4)
(of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv8), (of_succ_nat gv4 = nat2positive gv4), (succ q = q), (succ q = add q q), (succ q = nat2positive gv8), (succ q = nat2positive gv4), (succ q = of_succ_nat gv8), (succ q = of_succ_nat gv4)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv8), (xH = nat2positive gv4), (xH = of_succ_nat gv8), (xH = of_succ_nat gv4), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv8), (positive2nat q = gv4), ([] = print_in_binary q), (None = Some gv8), (None = Some gv4), ((gv8 >? gv8) = (gv8 >=? gv8)), ((gv8 >? gv8) = (gv8 >=? gv4)), ((gv8 >? gv8) = (gv4 >=? gv8))
((gv8 >? gv8) = (gv4 >=? gv4)), ((gv8 >? gv4) = (gv8 >=? gv8)), ((gv8 >? gv4) = (gv8 >=? gv4)), ((gv8 >? gv4) = (gv4 >=? gv8)), ((gv8 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv8) = (gv8 >=? gv8)), ((gv4 >? gv8) = (gv8 >=? gv4)), ((gv4 >? gv8) = (gv4 >=? gv8)), ((gv4 >? gv8) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv8 >=? gv8))
((gv4 >? gv4) = (gv8 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv8)), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 11 (11)
(gv5 < gv5), (gv5 < gv4), (gv4 < gv5), (gv4 < gv4), (gv5 <= gv5), (gv5 <= gv4), (gv4 <= gv5), (gv4 <= gv4), (gv5 = gv5), (gv5 = gv4)
(gv4 = gv5), (gv4 = gv4), (q = q), (false = (gv5 >? gv5)), (false = (gv5 >? gv4)), (false = (gv4 >? gv5)), (false = (gv4 >? gv4)), (false = (gv5 >=? gv5)), (false = (gv5 >=? gv4)), (false = (gv4 >=? gv5))
(false = (gv4 >=? gv4)), (true = (gv5 >? gv5)), (true = (gv5 >? gv4)), (true = (gv4 >? gv5)), (true = (gv4 >? gv4)), (true = (gv5 >=? gv5)), (true = (gv5 >=? gv4)), (true = (gv4 >=? gv5)), (true = (gv4 >=? gv4)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv5 (print_in_binary q)), (In gv4 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv5 < positive2nat q), (gv4 < positive2nat q), (positive2nat q < gv5), (positive2nat q < gv4), (gv5 <= positive2nat q)
(gv4 <= positive2nat q), (positive2nat q <= gv5), (positive2nat q <= gv4), (~ gv5 < gv5), (~ gv5 < gv4), (~ gv4 < gv5), (~ gv4 < gv4), (~ gv5 <= gv5), (~ gv5 <= gv4), (~ gv4 <= gv5)
(~ gv4 <= gv4), (gv5 <> gv5), (gv5 <> gv4), (gv4 <> gv5), (gv4 <> gv4), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv5)
(q~0 = nat2positive gv4), (q~0 = of_succ_nat gv5), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv5), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv5), (q~1 = of_succ_nat gv4)
(q~1 = succ q), (add q q = q), (nat2positive gv5 = q), (nat2positive gv5 = add q q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (of_succ_nat gv5 = q), (of_succ_nat gv5 = add q q), (of_succ_nat gv5 = nat2positive gv5), (of_succ_nat gv5 = nat2positive gv4)
(of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv5), (of_succ_nat gv4 = nat2positive gv4), (succ q = q), (succ q = add q q), (succ q = nat2positive gv5), (succ q = nat2positive gv4), (succ q = of_succ_nat gv5), (succ q = of_succ_nat gv4)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv5), (xH = nat2positive gv4), (xH = of_succ_nat gv5), (xH = of_succ_nat gv4), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv5), (positive2nat q = gv4), ([] = print_in_binary q), (None = Some gv5), (None = Some gv4), ((gv5 >? gv5) = (gv5 >=? gv5)), ((gv5 >? gv5) = (gv5 >=? gv4)), ((gv5 >? gv5) = (gv4 >=? gv5))
((gv5 >? gv5) = (gv4 >=? gv4)), ((gv5 >? gv4) = (gv5 >=? gv5)), ((gv5 >? gv4) = (gv5 >=? gv4)), ((gv5 >? gv4) = (gv4 >=? gv5)), ((gv5 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv5) = (gv5 >=? gv5)), ((gv4 >? gv5) = (gv5 >=? gv4)), ((gv4 >? gv5) = (gv4 >=? gv5)), ((gv4 >? gv5) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv5 >=? gv5))
((gv4 >? gv4) = (gv5 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv5)), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 12 (12)
(gv4 < gv4), (gv4 < gv1), (gv1 < gv4), (gv1 < gv1), (gv4 <= gv4), (gv4 <= gv1), (gv1 <= gv4), (gv1 <= gv1), (q = q), (gv4 = gv4)
(gv4 = gv1), (gv1 = gv4), (gv1 = gv1), (false = (gv4 >? gv4)), (false = (gv4 >? gv1)), (false = (gv1 >? gv4)), (false = (gv1 >? gv1)), (false = (gv4 >=? gv4)), (false = (gv4 >=? gv1)), (false = (gv1 >=? gv4))
(false = (gv1 >=? gv1)), (true = (gv4 >? gv4)), (true = (gv4 >? gv1)), (true = (gv1 >? gv4)), (true = (gv1 >? gv1)), (true = (gv4 >=? gv4)), (true = (gv4 >=? gv1)), (true = (gv1 >=? gv4)), (true = (gv1 >=? gv1)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv4 (print_in_binary q)), (In gv1 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv4 < positive2nat q), (gv1 < positive2nat q), (positive2nat q < gv4), (positive2nat q < gv1), (gv4 <= positive2nat q)
(gv1 <= positive2nat q), (positive2nat q <= gv4), (positive2nat q <= gv1), (~ gv4 < gv4), (~ gv4 < gv1), (~ gv1 < gv4), (~ gv1 < gv1), (~ gv4 <= gv4), (~ gv4 <= gv1), (~ gv1 <= gv4)
(~ gv1 <= gv1), (q <> q), (gv4 <> gv4), (gv4 <> gv1), (gv1 <> gv4), (gv1 <> gv1), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv4)
(q~0 = nat2positive gv1), (q~0 = of_succ_nat gv4), (q~0 = of_succ_nat gv1), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv4), (q~1 = nat2positive gv1), (q~1 = of_succ_nat gv4), (q~1 = of_succ_nat gv1)
(q~1 = succ q), (add q q = q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (nat2positive gv1 = q), (nat2positive gv1 = add q q), (of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv4), (of_succ_nat gv4 = nat2positive gv1)
(of_succ_nat gv1 = q), (of_succ_nat gv1 = add q q), (of_succ_nat gv1 = nat2positive gv4), (of_succ_nat gv1 = nat2positive gv1), (succ q = q), (succ q = add q q), (succ q = nat2positive gv4), (succ q = nat2positive gv1), (succ q = of_succ_nat gv4), (succ q = of_succ_nat gv1)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv4), (xH = nat2positive gv1), (xH = of_succ_nat gv4), (xH = of_succ_nat gv1), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv4), (positive2nat q = gv1), ([] = print_in_binary q), (None = Some gv4), (None = Some gv1), ((gv4 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv1)), ((gv4 >? gv4) = (gv1 >=? gv4))
((gv4 >? gv4) = (gv1 >=? gv1)), ((gv4 >? gv1) = (gv4 >=? gv4)), ((gv4 >? gv1) = (gv4 >=? gv1)), ((gv4 >? gv1) = (gv1 >=? gv4)), ((gv4 >? gv1) = (gv1 >=? gv1)), ((gv1 >? gv4) = (gv4 >=? gv4)), ((gv1 >? gv4) = (gv4 >=? gv1)), ((gv1 >? gv4) = (gv1 >=? gv4)), ((gv1 >? gv4) = (gv1 >=? gv1)), ((gv1 >? gv1) = (gv4 >=? gv4))
((gv1 >? gv1) = (gv4 >=? gv1)), ((gv1 >? gv1) = (gv1 >=? gv4)), ((gv1 >? gv1) = (gv1 >=? gv1))

Label: 13 (13)
(gv4 < gv4), (gv4 < gv3), (gv3 < gv4), (gv3 < gv3), (gv4 <= gv4), (gv4 <= gv3), (gv3 <= gv4), (gv3 <= gv3), (gv4 = gv4), (gv4 = gv3)
(gv3 = gv4), (gv3 = gv3), (q = q), (false = (gv4 >? gv4)), (false = (gv4 >? gv3)), (false = (gv3 >? gv4)), (false = (gv3 >? gv3)), (false = (gv4 >=? gv4)), (false = (gv4 >=? gv3)), (false = (gv3 >=? gv4))
(false = (gv3 >=? gv3)), (true = (gv4 >? gv4)), (true = (gv4 >? gv3)), (true = (gv3 >? gv4)), (true = (gv3 >? gv3)), (true = (gv4 >=? gv4)), (true = (gv4 >=? gv3)), (true = (gv3 >=? gv4)), (true = (gv3 >=? gv3)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv4 (print_in_binary q)), (In gv3 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv4 < positive2nat q), (gv3 < positive2nat q), (positive2nat q < gv4), (positive2nat q < gv3), (gv4 <= positive2nat q)
(gv3 <= positive2nat q), (positive2nat q <= gv4), (positive2nat q <= gv3), (~ gv4 < gv4), (~ gv4 < gv3), (~ gv3 < gv4), (~ gv3 < gv3), (~ gv4 <= gv4), (~ gv4 <= gv3), (~ gv3 <= gv4)
(~ gv3 <= gv3), (gv4 <> gv4), (gv4 <> gv3), (gv3 <> gv4), (gv3 <> gv3), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv4)
(q~0 = nat2positive gv3), (q~0 = of_succ_nat gv4), (q~0 = of_succ_nat gv3), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv4), (q~1 = nat2positive gv3), (q~1 = of_succ_nat gv4), (q~1 = of_succ_nat gv3)
(q~1 = succ q), (add q q = q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (nat2positive gv3 = q), (nat2positive gv3 = add q q), (of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv4), (of_succ_nat gv4 = nat2positive gv3)
(of_succ_nat gv3 = q), (of_succ_nat gv3 = add q q), (of_succ_nat gv3 = nat2positive gv4), (of_succ_nat gv3 = nat2positive gv3), (succ q = q), (succ q = add q q), (succ q = nat2positive gv4), (succ q = nat2positive gv3), (succ q = of_succ_nat gv4), (succ q = of_succ_nat gv3)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv4), (xH = nat2positive gv3), (xH = of_succ_nat gv4), (xH = of_succ_nat gv3), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv4), (positive2nat q = gv3), ([] = print_in_binary q), (None = Some gv4), (None = Some gv3), ((gv4 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv3)), ((gv4 >? gv4) = (gv3 >=? gv4))
((gv4 >? gv4) = (gv3 >=? gv3)), ((gv4 >? gv3) = (gv4 >=? gv4)), ((gv4 >? gv3) = (gv4 >=? gv3)), ((gv4 >? gv3) = (gv3 >=? gv4)), ((gv4 >? gv3) = (gv3 >=? gv3)), ((gv3 >? gv4) = (gv4 >=? gv4)), ((gv3 >? gv4) = (gv4 >=? gv3)), ((gv3 >? gv4) = (gv3 >=? gv4)), ((gv3 >? gv4) = (gv3 >=? gv3)), ((gv3 >? gv3) = (gv4 >=? gv4))
((gv3 >? gv3) = (gv4 >=? gv3)), ((gv3 >? gv3) = (gv3 >=? gv4)), ((gv3 >? gv3) = (gv3 >=? gv3))

Label: 14 (14)
(gv4 < gv4), (gv4 <= gv4), (gv4 = gv4), (q = q), (q = gv2), (gv2 = q), (gv2 = gv2), (false = (gv4 >? gv4)), (false = (gv4 >=? gv4)), (true = (gv4 >? gv4))
(true = (gv4 >=? gv4)), (first_le_second (print_in_binary q)), (first_le_second (print_in_binary gv2)), (Permutation (print_in_binary q) (print_in_binary gv2)), (Permutation (print_in_binary q) []), (Permutation (print_in_binary gv2) (print_in_binary q)), (Permutation (print_in_binary gv2) []), (Permutation [] (print_in_binary q)), (Permutation [] (print_in_binary gv2)), (In gv4 (print_in_binary q))
(In gv4 (print_in_binary gv2)), (In (positive2nat q) (print_in_binary q)), (In (positive2nat q) (print_in_binary gv2)), (In (positive2nat gv2) (print_in_binary q)), (In (positive2nat gv2) (print_in_binary gv2)), (gv4 < positive2nat q), (gv4 < positive2nat gv2), (positive2nat q < gv4), (positive2nat q < positive2nat gv2), (positive2nat gv2 < gv4)
(positive2nat gv2 < positive2nat q), (gv4 <= positive2nat q), (gv4 <= positive2nat gv2), (positive2nat q <= gv4), (positive2nat q <= positive2nat gv2), (positive2nat gv2 <= gv4), (positive2nat gv2 <= positive2nat q), (~ gv4 < gv4), (~ gv4 <= gv4), (gv4 <> gv4)
(q <> q), (q <> gv2), (gv2 <> q), (gv2 <> gv2), (q~0 = q), (q~0 = gv2), (q~0 = q~1), (q~0 = gv2~1), (q~0 = add q q), (q~0 = add q gv2)
(q~0 = add gv2 q), (q~0 = add gv2 gv2), (q~0 = nat2positive gv4), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~0 = succ gv2), (gv2~0 = q), (gv2~0 = gv2), (gv2~0 = q~1), (gv2~0 = gv2~1)
(gv2~0 = add q q), (gv2~0 = add q gv2), (gv2~0 = add gv2 q), (gv2~0 = add gv2 gv2), (gv2~0 = nat2positive gv4), (gv2~0 = of_succ_nat gv4), (gv2~0 = succ q), (gv2~0 = succ gv2), (q~1 = q), (q~1 = gv2)
(q~1 = add q q), (q~1 = add q gv2), (q~1 = add gv2 q), (q~1 = add gv2 gv2), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv4), (q~1 = succ q), (q~1 = succ gv2), (gv2~1 = q), (gv2~1 = gv2)
(gv2~1 = add q q), (gv2~1 = add q gv2), (gv2~1 = add gv2 q), (gv2~1 = add gv2 gv2), (gv2~1 = nat2positive gv4), (gv2~1 = of_succ_nat gv4), (gv2~1 = succ q), (gv2~1 = succ gv2), (add q q = q), (add q q = gv2)
(add q gv2 = q), (add q gv2 = gv2), (add gv2 q = q), (add gv2 q = gv2), (add gv2 gv2 = q), (add gv2 gv2 = gv2), (nat2positive gv4 = q), (nat2positive gv4 = gv2), (nat2positive gv4 = add q q), (nat2positive gv4 = add q gv2)
(nat2positive gv4 = add gv2 q), (nat2positive gv4 = add gv2 gv2), (of_succ_nat gv4 = q), (of_succ_nat gv4 = gv2), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = add q gv2), (of_succ_nat gv4 = add gv2 q), (of_succ_nat gv4 = add gv2 gv2), (of_succ_nat gv4 = nat2positive gv4), (succ q = q)
(succ q = gv2), (succ q = add q q), (succ q = add q gv2), (succ q = add gv2 q), (succ q = add gv2 gv2), (succ q = nat2positive gv4), (succ q = of_succ_nat gv4), (succ gv2 = q), (succ gv2 = gv2), (succ gv2 = add q q)
(succ gv2 = add q gv2), (succ gv2 = add gv2 q), (succ gv2 = add gv2 gv2), (succ gv2 = nat2positive gv4), (succ gv2 = of_succ_nat gv4), (xH = q~0), (xH = gv2~0), (xH = q~1), (xH = gv2~1), (xH = add q q)
(xH = add q gv2), (xH = add gv2 q), (xH = add gv2 gv2), (xH = nat2positive gv4), (xH = of_succ_nat gv4), (xH = succ q), (xH = succ gv2), (Eq = compare q q), (Eq = compare q gv2), (Eq = compare gv2 q)
(Eq = compare gv2 gv2), (Lt = compare q q), (Lt = compare q gv2), (Lt = compare gv2 q), (Lt = compare gv2 gv2), (Gt = compare q q), (Gt = compare q gv2), (Gt = compare gv2 q), (Gt = compare gv2 gv2), (None = Some q)
(None = Some gv2), (positive2nat q = gv4), (positive2nat gv2 = gv4), ([] = print_in_binary q), ([] = print_in_binary gv2), (None = Some gv4), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 15 (15)
(gv4 < gv4), (gv4 < gv0), (gv0 < gv4), (gv0 < gv0), (gv4 <= gv4), (gv4 <= gv0), (gv0 <= gv4), (gv0 <= gv0), (q = q), (gv4 = gv4)
(gv4 = gv0), (gv0 = gv4), (gv0 = gv0), (false = (gv4 >? gv4)), (false = (gv4 >? gv0)), (false = (gv0 >? gv4)), (false = (gv0 >? gv0)), (false = (gv4 >=? gv4)), (false = (gv4 >=? gv0)), (false = (gv0 >=? gv4))
(false = (gv0 >=? gv0)), (true = (gv4 >? gv4)), (true = (gv4 >? gv0)), (true = (gv0 >? gv4)), (true = (gv0 >? gv0)), (true = (gv4 >=? gv4)), (true = (gv4 >=? gv0)), (true = (gv0 >=? gv4)), (true = (gv0 >=? gv0)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv4 (print_in_binary q)), (In gv0 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv4 < positive2nat q), (gv0 < positive2nat q), (positive2nat q < gv4), (positive2nat q < gv0), (gv4 <= positive2nat q)
(gv0 <= positive2nat q), (positive2nat q <= gv4), (positive2nat q <= gv0), (~ gv4 < gv4), (~ gv4 < gv0), (~ gv0 < gv4), (~ gv0 < gv0), (~ gv4 <= gv4), (~ gv4 <= gv0), (~ gv0 <= gv4)
(~ gv0 <= gv0), (q <> q), (gv4 <> gv4), (gv4 <> gv0), (gv0 <> gv4), (gv0 <> gv0), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv4)
(q~0 = nat2positive gv0), (q~0 = of_succ_nat gv4), (q~0 = of_succ_nat gv0), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv4), (q~1 = nat2positive gv0), (q~1 = of_succ_nat gv4), (q~1 = of_succ_nat gv0)
(q~1 = succ q), (add q q = q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (nat2positive gv0 = q), (nat2positive gv0 = add q q), (of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv4), (of_succ_nat gv4 = nat2positive gv0)
(of_succ_nat gv0 = q), (of_succ_nat gv0 = add q q), (of_succ_nat gv0 = nat2positive gv4), (of_succ_nat gv0 = nat2positive gv0), (succ q = q), (succ q = add q q), (succ q = nat2positive gv4), (succ q = nat2positive gv0), (succ q = of_succ_nat gv4), (succ q = of_succ_nat gv0)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv4), (xH = nat2positive gv0), (xH = of_succ_nat gv4), (xH = of_succ_nat gv0), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv4), (positive2nat q = gv0), ([] = print_in_binary q), (None = Some gv4), (None = Some gv0), ((gv4 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv0)), ((gv4 >? gv4) = (gv0 >=? gv4))
((gv4 >? gv4) = (gv0 >=? gv0)), ((gv4 >? gv0) = (gv4 >=? gv4)), ((gv4 >? gv0) = (gv4 >=? gv0)), ((gv4 >? gv0) = (gv0 >=? gv4)), ((gv4 >? gv0) = (gv0 >=? gv0)), ((gv0 >? gv4) = (gv4 >=? gv4)), ((gv0 >? gv4) = (gv4 >=? gv0)), ((gv0 >? gv4) = (gv0 >=? gv4)), ((gv0 >? gv4) = (gv0 >=? gv0)), ((gv0 >? gv0) = (gv4 >=? gv4))
((gv0 >? gv0) = (gv4 >=? gv0)), ((gv0 >? gv0) = (gv0 >=? gv4)), ((gv0 >? gv0) = (gv0 >=? gv0))

Label: 16 (16)
(gv7 < gv7), (gv7 < gv4), (gv4 < gv7), (gv4 < gv4), (gv7 <= gv7), (gv7 <= gv4), (gv4 <= gv7), (gv4 <= gv4), (gv7 = gv7), (gv7 = gv4)
(gv4 = gv7), (gv4 = gv4), (q = q), (false = (gv7 >? gv7)), (false = (gv7 >? gv4)), (false = (gv4 >? gv7)), (false = (gv4 >? gv4)), (false = (gv7 >=? gv7)), (false = (gv7 >=? gv4)), (false = (gv4 >=? gv7))
(false = (gv4 >=? gv4)), (true = (gv7 >? gv7)), (true = (gv7 >? gv4)), (true = (gv4 >? gv7)), (true = (gv4 >? gv4)), (true = (gv7 >=? gv7)), (true = (gv7 >=? gv4)), (true = (gv4 >=? gv7)), (true = (gv4 >=? gv4)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv7 (print_in_binary q)), (In gv4 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv7 < positive2nat q), (gv4 < positive2nat q), (positive2nat q < gv7), (positive2nat q < gv4), (gv7 <= positive2nat q)
(gv4 <= positive2nat q), (positive2nat q <= gv7), (positive2nat q <= gv4), (~ gv7 < gv7), (~ gv7 < gv4), (~ gv4 < gv7), (~ gv4 < gv4), (~ gv7 <= gv7), (~ gv7 <= gv4), (~ gv4 <= gv7)
(~ gv4 <= gv4), (gv7 <> gv7), (gv7 <> gv4), (gv4 <> gv7), (gv4 <> gv4), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv7)
(q~0 = nat2positive gv4), (q~0 = of_succ_nat gv7), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv7), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv7), (q~1 = of_succ_nat gv4)
(q~1 = succ q), (add q q = q), (nat2positive gv7 = q), (nat2positive gv7 = add q q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (of_succ_nat gv7 = q), (of_succ_nat gv7 = add q q), (of_succ_nat gv7 = nat2positive gv7), (of_succ_nat gv7 = nat2positive gv4)
(of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv7), (of_succ_nat gv4 = nat2positive gv4), (succ q = q), (succ q = add q q), (succ q = nat2positive gv7), (succ q = nat2positive gv4), (succ q = of_succ_nat gv7), (succ q = of_succ_nat gv4)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv7), (xH = nat2positive gv4), (xH = of_succ_nat gv7), (xH = of_succ_nat gv4), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv7), (positive2nat q = gv4), ([] = print_in_binary q), (None = Some gv7), (None = Some gv4), ((gv7 >? gv7) = (gv7 >=? gv7)), ((gv7 >? gv7) = (gv7 >=? gv4)), ((gv7 >? gv7) = (gv4 >=? gv7))
((gv7 >? gv7) = (gv4 >=? gv4)), ((gv7 >? gv4) = (gv7 >=? gv7)), ((gv7 >? gv4) = (gv7 >=? gv4)), ((gv7 >? gv4) = (gv4 >=? gv7)), ((gv7 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv7) = (gv7 >=? gv7)), ((gv4 >? gv7) = (gv7 >=? gv4)), ((gv4 >? gv7) = (gv4 >=? gv7)), ((gv4 >? gv7) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv7 >=? gv7))
((gv4 >? gv4) = (gv7 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv7)), ((gv4 >? gv4) = (gv4 >=? gv4))

Label: 17 (17)
(gv6 < gv6), (gv6 < gv4), (gv4 < gv6), (gv4 < gv4), (gv6 <= gv6), (gv6 <= gv4), (gv4 <= gv6), (gv4 <= gv4), (gv6 = gv6), (gv6 = gv4)
(gv4 = gv6), (gv4 = gv4), (q = q), (false = (gv6 >? gv6)), (false = (gv6 >? gv4)), (false = (gv4 >? gv6)), (false = (gv4 >? gv4)), (false = (gv6 >=? gv6)), (false = (gv6 >=? gv4)), (false = (gv4 >=? gv6))
(false = (gv4 >=? gv4)), (true = (gv6 >? gv6)), (true = (gv6 >? gv4)), (true = (gv4 >? gv6)), (true = (gv4 >? gv4)), (true = (gv6 >=? gv6)), (true = (gv6 >=? gv4)), (true = (gv4 >=? gv6)), (true = (gv4 >=? gv4)), (first_le_second (print_in_binary q))
(Permutation (print_in_binary q) []), (Permutation [] (print_in_binary q)), (In gv6 (print_in_binary q)), (In gv4 (print_in_binary q)), (In (positive2nat q) (print_in_binary q)), (gv6 < positive2nat q), (gv4 < positive2nat q), (positive2nat q < gv6), (positive2nat q < gv4), (gv6 <= positive2nat q)
(gv4 <= positive2nat q), (positive2nat q <= gv6), (positive2nat q <= gv4), (~ gv6 < gv6), (~ gv6 < gv4), (~ gv4 < gv6), (~ gv4 < gv4), (~ gv6 <= gv6), (~ gv6 <= gv4), (~ gv4 <= gv6)
(~ gv4 <= gv4), (gv6 <> gv6), (gv6 <> gv4), (gv4 <> gv6), (gv4 <> gv4), (q <> q), (q~0 = q), (q~0 = q~1), (q~0 = add q q), (q~0 = nat2positive gv6)
(q~0 = nat2positive gv4), (q~0 = of_succ_nat gv6), (q~0 = of_succ_nat gv4), (q~0 = succ q), (q~1 = q), (q~1 = add q q), (q~1 = nat2positive gv6), (q~1 = nat2positive gv4), (q~1 = of_succ_nat gv6), (q~1 = of_succ_nat gv4)
(q~1 = succ q), (add q q = q), (nat2positive gv6 = q), (nat2positive gv6 = add q q), (nat2positive gv4 = q), (nat2positive gv4 = add q q), (of_succ_nat gv6 = q), (of_succ_nat gv6 = add q q), (of_succ_nat gv6 = nat2positive gv6), (of_succ_nat gv6 = nat2positive gv4)
(of_succ_nat gv4 = q), (of_succ_nat gv4 = add q q), (of_succ_nat gv4 = nat2positive gv6), (of_succ_nat gv4 = nat2positive gv4), (succ q = q), (succ q = add q q), (succ q = nat2positive gv6), (succ q = nat2positive gv4), (succ q = of_succ_nat gv6), (succ q = of_succ_nat gv4)
(xH = q~0), (xH = q~1), (xH = add q q), (xH = nat2positive gv6), (xH = nat2positive gv4), (xH = of_succ_nat gv6), (xH = of_succ_nat gv4), (xH = succ q), (Eq = compare q q), (Lt = compare q q)
(Gt = compare q q), (None = Some q), (positive2nat q = gv6), (positive2nat q = gv4), ([] = print_in_binary q), (None = Some gv6), (None = Some gv4), ((gv6 >? gv6) = (gv6 >=? gv6)), ((gv6 >? gv6) = (gv6 >=? gv4)), ((gv6 >? gv6) = (gv4 >=? gv6))
((gv6 >? gv6) = (gv4 >=? gv4)), ((gv6 >? gv4) = (gv6 >=? gv6)), ((gv6 >? gv4) = (gv6 >=? gv4)), ((gv6 >? gv4) = (gv4 >=? gv6)), ((gv6 >? gv4) = (gv4 >=? gv4)), ((gv4 >? gv6) = (gv6 >=? gv6)), ((gv4 >? gv6) = (gv6 >=? gv4)), ((gv4 >? gv6) = (gv4 >=? gv6)), ((gv4 >? gv6) = (gv4 >=? gv4)), ((gv4 >? gv4) = (gv6 >=? gv6))
((gv4 >? gv4) = (gv6 >=? gv4)), ((gv4 >? gv4) = (gv4 >=? gv6)), ((gv4 >? gv4) = (gv4 >=? gv4))


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 108.638 seconds


Label: 0 (0)
(positive2nat q = gv9), (succ q = of_succ_nat gv9)

Label: 1 (1)
(positive2nat q = gv8), (succ q = of_succ_nat gv8)

Label: 2 (2)

Label: 3 (3)
(succ q = nat2positive gv1)

Label: 4 (4)
(succ q = nat2positive gv3)

Label: 5 (5)
(succ q = gv2), (q~1 = add q gv2), (q~1 = add gv2 q)

Label: 6 (6)

Label: 7 (7)
(q~1 = of_succ_nat gv7), (q~0 = nat2positive gv7), (nat2positive gv7 = add q q)

Label: 8 (8)
(q~1 = nat2positive gv6)

Label: 9 (9)

Label: 10 (10)
(positive2nat q = gv8), (succ q = of_succ_nat gv8)

Label: 11 (11)

Label: 12 (12)
(succ q = nat2positive gv1)

Label: 13 (13)

Label: 14 (14)
(succ q = gv2), (q~1 = add q gv2), (q~1 = add gv2 q)

Label: 15 (15)

Label: 16 (16)

Label: 17 (17)


------------------------------ ALL RESULTS ------------------------------
1. (positive2nat (succ q) + (positive2nat (succ q) + gv4) =  S (S (positive2nat q + (positive2nat q + gv4))))

2. (positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + (positive2nat q + 0))))

3. (positive2nat q = positive2nat q + 0)

4. (positive2nat q = gv9 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + gv9)))

5. (succ q = of_succ_nat gv9 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + gv9)))

6. (succ q = of_succ_nat gv8 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (gv8 + (gv8 + 0))))

7. (succ q = nat2positive gv1 ->  gv1 + (gv1 + 0) = S (S (positive2nat q + (positive2nat q + 0))))

8. (succ q = nat2positive gv3 ->  positive2nat (succ q) + gv3 = S (S (positive2nat q + (positive2nat q + 0))))

9. (q~1 = of_succ_nat gv7 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) = S (S gv7))

10. (q~0 = nat2positive gv7 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) = S (S gv7))

11. (q~1 = nat2positive gv6 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) = S gv6)

12. (succ q = of_succ_nat gv8 ->  positive2nat (succ q) + (positive2nat (succ q) + gv4) =  S (S (gv8 + (gv8 + gv4))))

13. (succ q = nat2positive gv1 ->  gv1 + (gv1 + gv4) = S (S (positive2nat q + (positive2nat q + gv4))))

14. (q~1 = add q gv2 ->  positive2nat gv2 + (positive2nat gv2 + 0) =  S (S (positive2nat q + (positive2nat q + 0))))

15. (q~1 = add gv2 q ->  positive2nat gv2 + (positive2nat gv2 + 0) =  S (S (positive2nat q + (positive2nat q + 0))))

16. (nat2positive gv7 = add q q ->  positive2nat (succ q) + (positive2nat (succ q) + 0) = S (S gv7))

17. (q~1 = add q gv2 ->  positive2nat gv2 + (positive2nat gv2 + gv4) =  S (S (positive2nat q + (positive2nat q + gv4))))

18. (q~1 = add gv2 q ->  positive2nat gv2 + (positive2nat gv2 + gv4) =  S (S (positive2nat q + (positive2nat q + gv4))))



------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 148.11 seconds

Number of Result Pairs Returned: 18

1. (positive2nat (succ q) + (positive2nat (succ q) + gv4) =  S (S (positive2nat q + (positive2nat q + gv4))))

2. (positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + (positive2nat q + 0))))

3. (positive2nat q = positive2nat q + 0)

4. (positive2nat q = gv9 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + gv9)))

5. (succ q = of_succ_nat gv9 ->  positive2nat (succ q) + (positive2nat (succ q) + 0) =  S (S (positive2nat q + gv9)))
