Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (a <=* l -> b <=* l)
 -- (b <= a)
 -- (a <=* a0 :: l)

----------------------------------
Goal: (b <= a0)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 28.307 seconds

Label: Generalization #0
Assumptions: 
 -- (b <= a)
 -- (a <=* a0 :: l)

----------------------------------
Goal: (b <= a0)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 28.803 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (b <= a)
Positive Examples:
   [a := 0; a0 := 3; b := 0; l := [2; 2]]
   [a := 0; a0 := 0; b := 0; l := [3; 2; 2]]
   [a := 1; a0 := 4; b := 1; l := [4; 3; 1]]
   [a := 0; a0 := 4; b := 0; l := [1]]
   [a := 1; a0 := 4; b := 1; l := [1; 2; 4]]
   [a := 0; a0 := 1; b := 0; l := [5; 4; 1; 4]]
   [a := 6; a0 := 6; b := 5; l := []]
   [a := 1; a0 := 1; b := 1; l := [1; 3]]
   [a := 3; a0 := 3; b := 1; l := [6]]
   [a := 2; a0 := 5; b := 0; l := [5; 6; 6]]
   etc ...

Negative Examples:
   [a := 1; a0 := 3; b := 4; l := [5; 3; 4; 6; 4]]
   [a := 0; a0 := 0; b := 1; l := [5; 2; 5; 2]]
   [a := 0; a0 := 0; b := 2; l := [3; 2]]
   [a := 0; a0 := 0; b := 4; l := [0; 4; 3; 4; 2]]
   [a := 0; a0 := 3; b := 5; l := [0; 5; 3]]
   [a := 0; a0 := 2; b := 4; l := [1; 2; 2]]
   [a := 1; a0 := 1; b := 4; l := [6; 5]]
   [a := 0; a0 := 2; b := 3; l := [4]]
   [a := 1; a0 := 4; b := 6; l := []]
   [a := 1; a0 := 2; b := 6; l := [4; 3; 1; 2; 3; 5]]
   etc ...


Label: 0 (1)
Abducted Assumption: (a <=* a0 :: l)
Positive Examples:
   [a := 0; a0 := 3; b := 0; l := [2; 2]]
   [a := 0; a0 := 0; b := 0; l := [3; 2; 2]]
   [a := 1; a0 := 4; b := 1; l := [4; 3; 1]]
   [a := 0; a0 := 4; b := 0; l := [1]]
   [a := 1; a0 := 4; b := 1; l := [1; 2; 4]]
   [a := 0; a0 := 1; b := 0; l := [5; 4; 1; 4]]
   [a := 6; a0 := 6; b := 5; l := []]
   [a := 1; a0 := 1; b := 1; l := [1; 3]]
   [a := 3; a0 := 3; b := 1; l := [6]]
   [a := 2; a0 := 5; b := 0; l := [5; 6; 6]]
   etc ...

Negative Examples:
   [a := 1; a0 := 0; b := 1; l := [0; 1; 6; 4]]
   [a := 3; a0 := 0; b := 2; l := [2; 0]]
   [a := 4; a0 := 3; b := 4; l := [6; 5; 2; 2]]
   [a := 3; a0 := 0; b := 3; l := [4; 2; 0]]
   [a := 2; a0 := 0; b := 2; l := [2; 2; 2]]
   [a := 4; a0 := 1; b := 2; l := [0; 1; 1; 3]]
   [a := 1; a0 := 0; b := 1; l := [5; 4; 0; 1]]
   [a := 5; a0 := 1; b := 4; l := [5; 5; 1]]
   [a := 4; a0 := 1; b := 4; l := [3; 0]]
   [a := 4; a0 := 2; b := 3; l := [2]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 29.381 seconds


Label: 0 (0)
(a <=* l), (a0 <=* l), (b <=* l), (sorted l), (Permutation l l), (In a l), (In a0 l), (In b l), (a < a), (a < a0)
(a0 < a), (a0 < a0), (a0 < b), (b < a), (b < a0), (b < b), (a <= a), (a <= a0), (a <= b), (a0 <= a)
(a0 <= b), (b <= a), (b <= a0), (b <= b), (l = l), (a = a), (a = a0), (a = b), (a0 = a), (a0 = a0)
(b = a), (b = a0), (b = b), (false = sorted_bool l), (true = sorted_bool l), (a <=* a :: l), (a <=* a0 :: l), (a <=* b :: l), (a <=* merge l l), (a <=* l ++ l)
(a0 <=* a :: l), (a0 <=* a0 :: l), (a0 <=* b :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (b <=* a :: l), (b <=* a0 :: l), (b <=* b :: l), (b <=* merge l l)
(b <=* []), (length l <=* l), (length l <=* a :: l), (length l <=* a0 :: l), (length l <=* b :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a :: l)), (sorted (a0 :: l))
(sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a :: l)), (Permutation l (a0 :: l)), (Permutation l (b :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a :: l) l)
(Permutation (a :: l) (b :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (b :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) [])
(Permutation (b :: l) (a :: l)), (Permutation (b :: l) (a0 :: l)), (Permutation (b :: l) (merge l l)), (Permutation (b :: l) (l ++ l)), (Permutation (b :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (b :: l)), (Permutation (merge l l) (l ++ l))
(Permutation (l ++ l) l), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (b :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a :: l)), (Permutation [] (a0 :: l)), (Permutation [] (b :: l))
(Permutation [] (l ++ l)), (In a (a :: l)), (In a (a0 :: l)), (In a (b :: l)), (In a (merge l l)), (In a (l ++ l)), (In a0 (a :: l)), (In a0 (a0 :: l)), (In a0 (b :: l)), (In a0 (merge l l))
(In b (a :: l)), (In b (a0 :: l)), (In b (b :: l)), (In b (merge l l)), (In b (l ++ l)), (In (length l) l), (In (length l) (a :: l)), (In (length l) (a0 :: l)), (In (length l) (b :: l)), (In (length l) (merge l l))
(a < length l), (a0 < length l), (b < length l), (length l < a), (length l < a0), (length l < b), (a <= length l), (a0 <= length l), (b <= length l), (length l <= a)
(length l <= b), (~ a <=* l), (~ a0 <=* l), (~ b <=* l), (~ sorted l), (~ Permutation l l), (~ In a l), (~ In a0 l), (~ In b l), (~ a < a)
(~ a < b), (~ a0 < a), (~ a0 < a0), (~ a0 < b), (~ b < a), (~ b < a0), (~ b < b), (~ a <= a), (~ a <= a0), (~ a <= b)
(~ a0 <= a0), (~ a0 <= b), (~ b <= a), (~ b <= a0), (~ b <= b), (l <> l), (a <> a), (a <> a0), (a <> b), (a0 <> a)
(a0 <> b), (b <> a), (b <> a0), (b <> b), (None = Some l), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l), (a :: l = []), (a0 :: l = l)
(a0 :: l = l ++ l), (a0 :: l = []), (b :: l = l), (b :: l = merge l l), (b :: l = l ++ l), (b :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l)
([] = l ++ l), (None = Some a), (None = Some a0), (None = Some b), ((l, l) = split l), (length l = a), (length l = a0), (length l = b)

Label: 0 (1)
(a <=* l), (a0 <=* l), (b <=* l), (sorted l), (Permutation l l), (In a l), (In a0 l), (In b l), (a < a), (a < a0)
(a0 < a), (a0 < a0), (a0 < b), (b < a), (b < a0), (b < b), (a <= a), (a <= a0), (a <= b), (a0 <= a)
(a0 <= b), (b <= a), (b <= a0), (b <= b), (l = l), (a = a), (a = a0), (a = b), (a0 = a), (a0 = a0)
(b = a), (b = a0), (b = b), (false = sorted_bool l), (true = sorted_bool l), (a <=* a :: l), (a <=* a0 :: l), (a <=* b :: l), (a <=* merge l l), (a <=* l ++ l)
(a0 <=* a :: l), (a0 <=* a0 :: l), (a0 <=* b :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (b <=* a :: l), (b <=* a0 :: l), (b <=* b :: l), (b <=* merge l l)
(b <=* []), (length l <=* l), (length l <=* a :: l), (length l <=* a0 :: l), (length l <=* b :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a :: l)), (sorted (a0 :: l))
(sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a :: l)), (Permutation l (a0 :: l)), (Permutation l (b :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a :: l) l)
(Permutation (a :: l) (b :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (b :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) [])
(Permutation (b :: l) (a :: l)), (Permutation (b :: l) (a0 :: l)), (Permutation (b :: l) (merge l l)), (Permutation (b :: l) (l ++ l)), (Permutation (b :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (b :: l)), (Permutation (merge l l) (l ++ l))
(Permutation (l ++ l) l), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (b :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a :: l)), (Permutation [] (a0 :: l)), (Permutation [] (b :: l))
(Permutation [] (l ++ l)), (In a (a :: l)), (In a (a0 :: l)), (In a (b :: l)), (In a (merge l l)), (In a (l ++ l)), (In a0 (a :: l)), (In a0 (a0 :: l)), (In a0 (b :: l)), (In a0 (merge l l))
(In b (a :: l)), (In b (a0 :: l)), (In b (b :: l)), (In b (merge l l)), (In b (l ++ l)), (In (length l) l), (In (length l) (a :: l)), (In (length l) (a0 :: l)), (In (length l) (b :: l)), (In (length l) (merge l l))
(a < length l), (a0 < length l), (b < length l), (length l < a), (length l < a0), (length l < b), (a <= length l), (a0 <= length l), (b <= length l), (length l <= a)
(length l <= b), (~ a <=* l), (~ a0 <=* l), (~ b <=* l), (~ sorted l), (~ Permutation l l), (~ In a l), (~ In a0 l), (~ In b l), (~ a < a)
(~ a < b), (~ a0 < a), (~ a0 < a0), (~ a0 < b), (~ b < a), (~ b < a0), (~ b < b), (~ a <= a), (~ a <= a0), (~ a <= b)
(~ a0 <= a0), (~ a0 <= b), (~ b <= a), (~ b <= a0), (~ b <= b), (l <> l), (a <> a), (a <> a0), (a <> b), (a0 <> a)
(a0 <> b), (b <> a), (b <> a0), (b <> b), (None = Some l), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l), (a :: l = []), (a0 :: l = l)
(a0 :: l = l ++ l), (a0 :: l = []), (b :: l = l), (b :: l = merge l l), (b :: l = l ++ l), (b :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l)
([] = l ++ l), (None = Some a), (None = Some a0), (None = Some b), ((l, l) = split l), (length l = a), (length l = a0), (length l = b)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 29.388 seconds


Label: 0 (0)
Abducted Assumption: (a <=* a0 :: l)
Positive Examples:
   [a := 0; a0 := 3; b := 0; l := [2; 2]]
   [a := 0; a0 := 0; b := 0; l := [3; 2; 2]]
   [a := 1; a0 := 4; b := 1; l := [4; 3; 1]]
   [a := 0; a0 := 4; b := 0; l := [1]]
   [a := 1; a0 := 4; b := 1; l := [1; 2; 4]]
   [a := 0; a0 := 1; b := 0; l := [5; 4; 1; 4]]
   [a := 6; a0 := 6; b := 5; l := []]
   [a := 1; a0 := 1; b := 1; l := [1; 3]]
   [a := 3; a0 := 3; b := 1; l := [6]]
   [a := 2; a0 := 5; b := 0; l := [5; 6; 6]]
   etc ...

Negative Examples:
   [a := 1; a0 := 0; b := 1; l := [0; 1; 6; 4]]
   [a := 3; a0 := 0; b := 2; l := [2; 0]]
   [a := 4; a0 := 3; b := 4; l := [6; 5; 2; 2]]
   [a := 3; a0 := 0; b := 3; l := [4; 2; 0]]
   [a := 2; a0 := 0; b := 2; l := [2; 2; 2]]
   [a := 4; a0 := 1; b := 2; l := [0; 1; 1; 3]]
   [a := 1; a0 := 0; b := 1; l := [5; 4; 0; 1]]
   [a := 5; a0 := 1; b := 4; l := [5; 5; 1]]
   [a := 4; a0 := 1; b := 4; l := [3; 0]]
   [a := 4; a0 := 2; b := 3; l := [2]]
   etc ...

(a <=* l), (a0 <=* l), (b <=* l), (sorted l), (Permutation l l), (In a l), (In a0 l), (In b l), (a < a), (a < a0)
(a0 < a), (a0 < a0), (a0 < b), (b < a), (b < a0), (b < b), (a <= a), (a <= a0), (a <= b), (a0 <= a)
(a0 <= b), (b <= a), (b <= a0), (b <= b), (l = l), (a = a), (a = a0), (a = b), (a0 = a), (a0 = a0)
(b = a), (b = a0), (b = b), (false = sorted_bool l), (true = sorted_bool l), (a <=* a :: l), (a <=* a0 :: l), (a <=* b :: l), (a <=* merge l l), (a <=* l ++ l)
(a0 <=* a :: l), (a0 <=* a0 :: l), (a0 <=* b :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (b <=* a :: l), (b <=* a0 :: l), (b <=* b :: l), (b <=* merge l l)
(b <=* []), (length l <=* l), (length l <=* a :: l), (length l <=* a0 :: l), (length l <=* b :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a :: l)), (sorted (a0 :: l))
(sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a :: l)), (Permutation l (a0 :: l)), (Permutation l (b :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a :: l) l)
(Permutation (a :: l) (b :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (b :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) [])
(Permutation (b :: l) (a :: l)), (Permutation (b :: l) (a0 :: l)), (Permutation (b :: l) (merge l l)), (Permutation (b :: l) (l ++ l)), (Permutation (b :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (b :: l)), (Permutation (merge l l) (l ++ l))
(Permutation (l ++ l) l), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (b :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a :: l)), (Permutation [] (a0 :: l)), (Permutation [] (b :: l))
(Permutation [] (l ++ l)), (In a (a :: l)), (In a (a0 :: l)), (In a (b :: l)), (In a (merge l l)), (In a (l ++ l)), (In a0 (a :: l)), (In a0 (a0 :: l)), (In a0 (b :: l)), (In a0 (merge l l))
(In b (a :: l)), (In b (a0 :: l)), (In b (b :: l)), (In b (merge l l)), (In b (l ++ l)), (In (length l) l), (In (length l) (a :: l)), (In (length l) (a0 :: l)), (In (length l) (b :: l)), (In (length l) (merge l l))
(a < length l), (a0 < length l), (b < length l), (length l < a), (length l < a0), (length l < b), (a <= length l), (a0 <= length l), (b <= length l), (length l <= a)
(length l <= b), (~ a <=* l), (~ a0 <=* l), (~ b <=* l), (~ sorted l), (~ Permutation l l), (~ In a l), (~ In a0 l), (~ In b l), (~ a < a)
(~ a < b), (~ a0 < a), (~ a0 < a0), (~ a0 < b), (~ b < a), (~ b < a0), (~ b < b), (~ a <= a), (~ a <= a0), (~ a <= b)
(~ a0 <= a0), (~ a0 <= b), (~ b <= a), (~ b <= a0), (~ b <= b), (l <> l), (a <> a), (a <> a0), (a <> b), (a0 <> a)
(a0 <> b), (b <> a), (b <> a0), (b <> b), (None = Some l), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l), (a :: l = []), (a0 :: l = l)
(a0 :: l = l ++ l), (a0 :: l = []), (b :: l = l), (b :: l = merge l l), (b :: l = l ++ l), (b :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l)
([] = l ++ l), (None = Some a), (None = Some a0), (None = Some b), ((l, l) = split l), (length l = a), (length l = a0), (length l = b)

Label: 0 (1)
Abducted Assumption: (b <= a)
Positive Examples:
   [a := 0; a0 := 3; b := 0; l := [2; 2]]
   [a := 0; a0 := 0; b := 0; l := [3; 2; 2]]
   [a := 1; a0 := 4; b := 1; l := [4; 3; 1]]
   [a := 0; a0 := 4; b := 0; l := [1]]
   [a := 1; a0 := 4; b := 1; l := [1; 2; 4]]
   [a := 0; a0 := 1; b := 0; l := [5; 4; 1; 4]]
   [a := 6; a0 := 6; b := 5; l := []]
   [a := 1; a0 := 1; b := 1; l := [1; 3]]
   [a := 3; a0 := 3; b := 1; l := [6]]
   [a := 2; a0 := 5; b := 0; l := [5; 6; 6]]
   etc ...

Negative Examples:
   [a := 1; a0 := 3; b := 4; l := [5; 3; 4; 6; 4]]
   [a := 0; a0 := 0; b := 1; l := [5; 2; 5; 2]]
   [a := 0; a0 := 0; b := 2; l := [3; 2]]
   [a := 0; a0 := 0; b := 4; l := [0; 4; 3; 4; 2]]
   [a := 0; a0 := 3; b := 5; l := [0; 5; 3]]
   [a := 0; a0 := 2; b := 4; l := [1; 2; 2]]
   [a := 1; a0 := 1; b := 4; l := [6; 5]]
   [a := 0; a0 := 2; b := 3; l := [4]]
   [a := 1; a0 := 4; b := 6; l := []]
   [a := 1; a0 := 2; b := 6; l := [4; 3; 1; 2; 3; 5]]
   etc ...

(a <=* l), (a0 <=* l), (b <=* l), (sorted l), (Permutation l l), (In a l), (In a0 l), (In b l), (a < a), (a < a0)
(a0 < a), (a0 < a0), (a0 < b), (b < a), (b < a0), (b < b), (a <= a), (a <= a0), (a <= b), (a0 <= a)
(a0 <= b), (b <= a), (b <= a0), (b <= b), (l = l), (a = a), (a = a0), (a = b), (a0 = a), (a0 = a0)
(b = a), (b = a0), (b = b), (false = sorted_bool l), (true = sorted_bool l), (a <=* a :: l), (a <=* a0 :: l), (a <=* b :: l), (a <=* merge l l), (a <=* l ++ l)
(a0 <=* a :: l), (a0 <=* a0 :: l), (a0 <=* b :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (b <=* a :: l), (b <=* a0 :: l), (b <=* b :: l), (b <=* merge l l)
(b <=* []), (length l <=* l), (length l <=* a :: l), (length l <=* a0 :: l), (length l <=* b :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a :: l)), (sorted (a0 :: l))
(sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a :: l)), (Permutation l (a0 :: l)), (Permutation l (b :: l)), (Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a :: l) l)
(Permutation (a :: l) (b :: l)), (Permutation (a :: l) (merge l l)), (Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (b :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) [])
(Permutation (b :: l) (a :: l)), (Permutation (b :: l) (a0 :: l)), (Permutation (b :: l) (merge l l)), (Permutation (b :: l) (l ++ l)), (Permutation (b :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (b :: l)), (Permutation (merge l l) (l ++ l))
(Permutation (l ++ l) l), (Permutation (l ++ l) (a :: l)), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (b :: l)), (Permutation (l ++ l) (merge l l)), (Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a :: l)), (Permutation [] (a0 :: l)), (Permutation [] (b :: l))
(Permutation [] (l ++ l)), (In a (a :: l)), (In a (a0 :: l)), (In a (b :: l)), (In a (merge l l)), (In a (l ++ l)), (In a0 (a :: l)), (In a0 (a0 :: l)), (In a0 (b :: l)), (In a0 (merge l l))
(In b (a :: l)), (In b (a0 :: l)), (In b (b :: l)), (In b (merge l l)), (In b (l ++ l)), (In (length l) l), (In (length l) (a :: l)), (In (length l) (a0 :: l)), (In (length l) (b :: l)), (In (length l) (merge l l))
(a < length l), (a0 < length l), (b < length l), (length l < a), (length l < a0), (length l < b), (a <= length l), (a0 <= length l), (b <= length l), (length l <= a)
(length l <= b), (~ a <=* l), (~ a0 <=* l), (~ b <=* l), (~ sorted l), (~ Permutation l l), (~ In a l), (~ In a0 l), (~ In b l), (~ a < a)
(~ a < b), (~ a0 < a), (~ a0 < a0), (~ a0 < b), (~ b < a), (~ b < a0), (~ b < b), (~ a <= a), (~ a <= a0), (~ a <= b)
(~ a0 <= a0), (~ a0 <= b), (~ b <= a), (~ b <= a0), (~ b <= b), (l <> l), (a <> a), (a <> a0), (a <> b), (a0 <> a)
(a0 <> b), (b <> a), (b <> a0), (b <> b), (None = Some l), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l), (a :: l = []), (a0 :: l = l)
(a0 :: l = l ++ l), (a0 :: l = []), (b :: l = l), (b :: l = merge l l), (b :: l = l ++ l), (b :: l = []), (merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l)
([] = l ++ l), (None = Some a), (None = Some a0), (None = Some b), ((l, l) = split l), (length l = a), (length l = a0), (length l = b)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 144.574 seconds


Label: 0 (0)
(a <= a0), (a <=* a0 :: l), (~ a0 < a), (~ a0 < b)

Label: 0 (1)
(b <= a), (b <=* a :: l), (~ a0 < b)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 159.717 seconds


(b <= a)
 - (b <= a)
 - (b <=* a :: l)
 - (~ a0 < b)

(a <=* a0 :: l)
 - (a <=* a0 :: l)
 - (a <= a0)
 - (~ a0 < a)
 - (~ a0 < b)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 159.718 seconds

Number of Result Pairs Returned: 3

(b <= a -> a <=* a0 :: l -> b <= a0)

(a <=* a0 :: l -> a <= a0)
(a <= a0 -> b <= a -> b <= a0)

(a <=* a0 :: l -> ~ a0 < a)
(~ a0 < a -> b <= a -> b <= a0)
