Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (a <=* l -> b <=* l)
 -- (b <= a)
 -- (a <=* a0 :: l)

----------------------------------
Goal: (a <=* l)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 21.602 seconds

Label: Generalization #0
Assumptions: 
 -- (a <=* a0 :: l)

----------------------------------
Goal: (a <=* l)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 22.069 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (a <=* a0 :: l)
Positive Examples:
   [a := 0; a0 := 6; l := [4; 6]]
   [a := 0; a0 := 6; l := [5; 0; 4; 5; 4]]
   [a := 1; a0 := 1; l := [3; 3; 4; 4]]
   [a := 0; a0 := 1; l := [1; 4; 0]]
   [a := 2; a0 := 3; l := [4; 2]]
   [a := 0; a0 := 3; l := [3; 4; 4]]
   [a := 0; a0 := 3; l := [2; 0; 1]]
   [a := 0; a0 := 4; l := [4; 1; 3; 2; 3]]
   [a := 0; a0 := 2; l := [1; 1; 4; 3]]
   [a := 0; a0 := 5; l := [2; 3; 2; 0; 2]]
   etc ...

Negative Examples:
   [a := 3; a0 := 4; l := [1; 2]]
   [a := 2; a0 := 1; l := [3; 1; 5; 5; 2]]
   [a := 5; a0 := 0; l := [0; 4; 0; 1]]
   [a := 3; a0 := 0; l := [0; 0; 2; 5]]
   [a := 5; a0 := 6; l := [1; 2; 0; 3; 6]]
   [a := 6; a0 := 2; l := [4; 3; 6]]
   [a := 1; a0 := 0; l := [5; 0]]
   [a := 2; a0 := 2; l := [2; 4; 0; 0]]
   [a := 5; a0 := 6; l := [6; 0; 6; 2; 6; 3]]
   [a := 2; a0 := 3; l := [5; 0]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 22.577 seconds


Label: 0 (0)
(a0 <=* l), (a <=* l), (sorted l), (Permutation l l), (In a0 l), (In a l), (a0 < a0), (a0 < a), (a < a0), (a < a)
(a0 <= a), (a <= a0), (a <= a), (l = l), (a0 = a0), (a0 = a), (a = a0), (a = a), (false = sorted_bool l), (true = sorted_bool l)
(a0 <=* a :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (a <=* a0 :: l), (a <=* a :: l), (a <=* merge l l), (a <=* l ++ l), (a <=* []), (length l <=* l)
(length l <=* a :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a0 :: l)), (sorted (a :: l)), (sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a0 :: l))
(Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) []), (Permutation (a :: l) l), (Permutation (a :: l) (a0 :: l))
(Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a :: l))
(Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a0 :: l)), (Permutation [] (a :: l)), (Permutation [] (merge l l)), (Permutation [] (l ++ l)), (In a0 (a0 :: l)), (In a0 (a :: l)), (In a0 (merge l l)), (In a0 (l ++ l))
(In a (a :: l)), (In a (merge l l)), (In a (l ++ l)), (In (length l) l), (In (length l) (a0 :: l)), (In (length l) (a :: l)), (In (length l) (merge l l)), (In (length l) (l ++ l)), (a0 < length l), (a < length l)
(length l < a), (a0 <= length l), (a <= length l), (length l <= a0), (length l <= a), (~ a0 <=* l), (~ a <=* l), (~ sorted l), (~ Permutation l l), (~ In a0 l)
(~ a0 < a0), (~ a0 < a), (~ a < a0), (~ a < a), (~ a0 <= a0), (~ a0 <= a), (~ a <= a0), (~ a <= a), (l <> l), (a0 <> a0)
(a <> a0), (a <> a), (None = Some l), (a0 :: l = l), (a0 :: l = merge l l), (a0 :: l = l ++ l), (a0 :: l = []), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l)
(merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l), ([] = merge l l), ([] = l ++ l), (None = Some a0), (None = Some a), ((l, l) = split l), (length l = a0)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 22.581 seconds


Label: 0 (0)
Abducted Assumption: (a <=* a0 :: l)
Positive Examples:
   [a := 0; a0 := 6; l := [4; 6]]
   [a := 0; a0 := 6; l := [5; 0; 4; 5; 4]]
   [a := 1; a0 := 1; l := [3; 3; 4; 4]]
   [a := 0; a0 := 1; l := [1; 4; 0]]
   [a := 2; a0 := 3; l := [4; 2]]
   [a := 0; a0 := 3; l := [3; 4; 4]]
   [a := 0; a0 := 3; l := [2; 0; 1]]
   [a := 0; a0 := 4; l := [4; 1; 3; 2; 3]]
   [a := 0; a0 := 2; l := [1; 1; 4; 3]]
   [a := 0; a0 := 5; l := [2; 3; 2; 0; 2]]
   etc ...

Negative Examples:
   [a := 3; a0 := 4; l := [1; 2]]
   [a := 2; a0 := 1; l := [3; 1; 5; 5; 2]]
   [a := 5; a0 := 0; l := [0; 4; 0; 1]]
   [a := 3; a0 := 0; l := [0; 0; 2; 5]]
   [a := 5; a0 := 6; l := [1; 2; 0; 3; 6]]
   [a := 6; a0 := 2; l := [4; 3; 6]]
   [a := 1; a0 := 0; l := [5; 0]]
   [a := 2; a0 := 2; l := [2; 4; 0; 0]]
   [a := 5; a0 := 6; l := [6; 0; 6; 2; 6; 3]]
   [a := 2; a0 := 3; l := [5; 0]]
   etc ...

(a0 <=* l), (a <=* l), (sorted l), (Permutation l l), (In a0 l), (In a l), (a0 < a0), (a0 < a), (a < a0), (a < a)
(a0 <= a), (a <= a0), (a <= a), (l = l), (a0 = a0), (a0 = a), (a = a0), (a = a), (false = sorted_bool l), (true = sorted_bool l)
(a0 <=* a :: l), (a0 <=* merge l l), (a0 <=* l ++ l), (a0 <=* []), (a <=* a0 :: l), (a <=* a :: l), (a <=* merge l l), (a <=* l ++ l), (a <=* []), (length l <=* l)
(length l <=* a :: l), (length l <=* merge l l), (length l <=* l ++ l), (length l <=* []), (sorted (a0 :: l)), (sorted (a :: l)), (sorted (merge l l)), (sorted (l ++ l)), (sorted []), (Permutation l (a0 :: l))
(Permutation l (merge l l)), (Permutation l (l ++ l)), (Permutation l []), (Permutation (a0 :: l) l), (Permutation (a0 :: l) (a :: l)), (Permutation (a0 :: l) (merge l l)), (Permutation (a0 :: l) (l ++ l)), (Permutation (a0 :: l) []), (Permutation (a :: l) l), (Permutation (a :: l) (a0 :: l))
(Permutation (a :: l) (l ++ l)), (Permutation (a :: l) []), (Permutation (merge l l) l), (Permutation (merge l l) (a0 :: l)), (Permutation (merge l l) (a :: l)), (Permutation (merge l l) (l ++ l)), (Permutation (merge l l) []), (Permutation (l ++ l) l), (Permutation (l ++ l) (a0 :: l)), (Permutation (l ++ l) (a :: l))
(Permutation (l ++ l) []), (Permutation [] l), (Permutation [] (a0 :: l)), (Permutation [] (a :: l)), (Permutation [] (merge l l)), (Permutation [] (l ++ l)), (In a0 (a0 :: l)), (In a0 (a :: l)), (In a0 (merge l l)), (In a0 (l ++ l))
(In a (a :: l)), (In a (merge l l)), (In a (l ++ l)), (In (length l) l), (In (length l) (a0 :: l)), (In (length l) (a :: l)), (In (length l) (merge l l)), (In (length l) (l ++ l)), (a0 < length l), (a < length l)
(length l < a), (a0 <= length l), (a <= length l), (length l <= a0), (length l <= a), (~ a0 <=* l), (~ a <=* l), (~ sorted l), (~ Permutation l l), (~ In a0 l)
(~ a0 < a0), (~ a0 < a), (~ a < a0), (~ a < a), (~ a0 <= a0), (~ a0 <= a), (~ a <= a0), (~ a <= a), (l <> l), (a0 <> a0)
(a <> a0), (a <> a), (None = Some l), (a0 :: l = l), (a0 :: l = merge l l), (a0 :: l = l ++ l), (a0 :: l = []), (a :: l = l), (a :: l = merge l l), (a :: l = l ++ l)
(merge l l = l), (merge l l = l ++ l), (l ++ l = l), ([] = l), ([] = merge l l), ([] = l ++ l), (None = Some a0), (None = Some a), ((l, l) = split l), (length l = a0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 58.91 seconds


Label: 0 (0)
(a <=* l), (a <=* merge l l), (a <=* l ++ l)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 66.687 seconds


(a <=* a0 :: l)
 - (a <=* a0 :: l)
 - (a <=* l)
 - (a <=* merge l l)
 - (a <=* l ++ l)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 66.687 seconds

Number of Result Pairs Returned: 3

(a <=* a0 :: l -> a <=* l)

(a <=* a0 :: l -> a <=* merge l l)
(a <=* merge l l -> a <=* l)

(a <=* a0 :: l -> a <=* l ++ l)
(a <=* l ++ l -> a <=* l)
