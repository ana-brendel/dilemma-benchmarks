Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (sorted (a0 :: l2))
 -- (b <=* a :: l1)
 -- (forall b : nat,
 b <=* l1 ->
 forall l2 : list nat,
 sorted (merge l1 l2) -> sorted l2 -> sorted (merge (b :: l1) l2))
 -- (sorted (merge (a :: l1) l2) ->
 sorted l2 ->
 forall b : nat, b <=* a :: l1 -> sorted (merge (b :: a :: l1) l2))

----------------------------------
Goal: (Forall (fun y : nat => a0 <= y) (a :: l1))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0.001 seconds

gv0 : (list nat) = (a :: l1)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 96.103 seconds

Label: Generalization #0
Assumptions: 
 -- (b > a0)
 -- (b <=* gv0)

----------------------------------
Goal: (Forall (fun y : nat => a0 <= y) gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (b > a0)
 -- (b <=* a :: l1)

----------------------------------
Goal: (Forall (fun y : nat => a0 <= y) (a :: l1))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 97.095 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 4; a0 := 0; b := 1; gv0 := [1]; l1 := [0; 2; 3; 2; 4]]
   [a := 4; a0 := 2; b := 3; gv0 := [4]; l1 := [3]]
   [a := 3; a0 := 1; b := 2; gv0 := []; l1 := [5; 3; 0; 2]]
   [a := 5; a0 := 1; b := 2; gv0 := [5; 2; 3; 2]; l1 := [4]]
   [a := 3; a0 := 2; b := 4; gv0 := []; l1 := [0; 0]]
   [a := 0; a0 := 0; b := 3; gv0 := [3; 3]; l1 := [3; 2]]
   [a := 0; a0 := 0; b := 2; gv0 := []; l1 := [1]]
   [a := 3; a0 := 4; b := 5; gv0 := []; l1 := [2]]
   [a := 1; a0 := 1; b := 3; gv0 := []; l1 := [1; 1; 0; 2]]
   [a := 1; a0 := 0; b := 1; gv0 := []; l1 := [3; 1]]
   etc ...

Negative Examples:
   [a := 2; a0 := 2; b := 0; gv0 := [4; 0; 1; 1]; l1 := [6; 5]]
   [a := 1; a0 := 3; b := 1; gv0 := [4; 2]; l1 := [1; 0; 5]]
   [a := 1; a0 := 2; b := 1; gv0 := [1; 1]; l1 := []]
   [a := 1; a0 := 4; b := 0; gv0 := [0]; l1 := [0; 4; 0]]
   [a := 5; a0 := 5; b := 0; gv0 := [4]; l1 := [1; 5]]
   [a := 2; a0 := 4; b := 1; gv0 := [2]; l1 := [4; 3; 2; 3]]
   [a := 3; a0 := 5; b := 1; gv0 := [2; 1; 1; 1; 1]; l1 := [5; 0; 0; 0; 0]]
   [a := 4; a0 := 4; b := 2; gv0 := [2; 4]; l1 := [1; 0; 1; 4; 0]]
   [a := 3; a0 := 3; b := 0; gv0 := [1; 0; 1]; l1 := []]
   [a := 5; a0 := 1; b := 0; gv0 := [6; 0; 6; 6; 1; 4]; l1 := []]
   etc ...


Label: 0 (1)
Abducted Assumption: (b <=* gv0)
Positive Examples:
   [a := 4; a0 := 0; b := 1; gv0 := [1]; l1 := [0; 2; 3; 2; 4]]
   [a := 4; a0 := 2; b := 3; gv0 := [4]; l1 := [3]]
   [a := 3; a0 := 1; b := 2; gv0 := []; l1 := [5; 3; 0; 2]]
   [a := 5; a0 := 1; b := 2; gv0 := [5; 2; 3; 2]; l1 := [4]]
   [a := 3; a0 := 2; b := 4; gv0 := []; l1 := [0; 0]]
   [a := 0; a0 := 0; b := 3; gv0 := [3; 3]; l1 := [3; 2]]
   [a := 0; a0 := 0; b := 2; gv0 := []; l1 := [1]]
   [a := 3; a0 := 4; b := 5; gv0 := []; l1 := [2]]
   [a := 1; a0 := 1; b := 3; gv0 := []; l1 := [1; 1; 0; 2]]
   [a := 1; a0 := 0; b := 1; gv0 := []; l1 := [3; 1]]
   etc ...

Negative Examples:
   [a := 0; a0 := 3; b := 4; gv0 := [2]; l1 := []]
   [a := 0; a0 := 4; b := 6; gv0 := [5; 1; 1]; l1 := [1; 3; 4; 0; 2; 4]]
   [a := 4; a0 := 2; b := 4; gv0 := [2; 1]; l1 := []]
   [a := 0; a0 := 3; b := 6; gv0 := [2; 5; 5; 3]; l1 := [5; 2]]
   [a := 3; a0 := 3; b := 4; gv0 := [4; 0; 3; 0]; l1 := [4; 2; 0; 3; 1]]
   [a := 1; a0 := 1; b := 5; gv0 := [0; 6]; l1 := []]
   [a := 2; a0 := 1; b := 2; gv0 := [3; 0; 0; 4; 3]; l1 := [4; 1]]
   [a := 3; a0 := 2; b := 3; gv0 := [4; 2; 1; 3]; l1 := [2; 2; 0]]
   [a := 4; a0 := 1; b := 3; gv0 := [0]; l1 := [2; 4; 4]]
   [a := 1; a0 := 1; b := 3; gv0 := [0]; l1 := [1; 3]]
   etc ...


Label: 1 (2)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 1; a0 := 0; b := 1; l1 := [1; 2]]
   [a := 1; a0 := 0; b := 1; l1 := [2; 2; 2; 1]]
   [a := 2; a0 := 0; b := 2; l1 := [3; 3; 3]]
   [a := 5; a0 := 0; b := 3; l1 := []]
   [a := 2; a0 := 0; b := 1; l1 := [4; 2; 4; 4]]
   [a := 6; a0 := 2; b := 5; l1 := [5; 5]]
   [a := 2; a0 := 0; b := 1; l1 := [1; 2; 3; 3]]
   [a := 3; a0 := 1; b := 2; l1 := [4; 4]]
   [a := 4; a0 := 0; b := 1; l1 := [5; 4; 2]]
   [a := 4; a0 := 0; b := 3; l1 := []]
   etc ...

Negative Examples:
   [a := 1; a0 := 3; b := 1; l1 := [1; 5; 1; 1; 3; 5]]
   [a := 4; a0 := 3; b := 2; l1 := [2; 2; 3; 2]]
   [a := 2; a0 := 2; b := 0; l1 := [0; 0]]
   [a := 3; a0 := 3; b := 0; l1 := [1; 6; 1; 0; 0]]
   [a := 0; a0 := 1; b := 0; l1 := [0; 2]]
   [a := 2; a0 := 4; b := 1; l1 := [4; 4; 3]]
   [a := 1; a0 := 4; b := 0; l1 := [0; 3; 0; 4]]
   [a := 3; a0 := 3; b := 1; l1 := [1; 2; 2]]
   [a := 3; a0 := 4; b := 0; l1 := [1; 2]]
   [a := 4; a0 := 5; b := 4; l1 := [5; 5; 4; 5]]
   etc ...


Label: 1 (3)
Abducted Assumption: (b <=* a :: l1)
Positive Examples:
   [a := 1; a0 := 0; b := 1; l1 := [1; 2]]
   [a := 1; a0 := 0; b := 1; l1 := [2; 2; 2; 1]]
   [a := 2; a0 := 0; b := 2; l1 := [3; 3; 3]]
   [a := 5; a0 := 0; b := 3; l1 := []]
   [a := 2; a0 := 0; b := 1; l1 := [4; 2; 4; 4]]
   [a := 6; a0 := 2; b := 5; l1 := [5; 5]]
   [a := 2; a0 := 0; b := 1; l1 := [1; 2; 3; 3]]
   [a := 3; a0 := 1; b := 2; l1 := [4; 4]]
   [a := 4; a0 := 0; b := 1; l1 := [5; 4; 2]]
   [a := 4; a0 := 0; b := 3; l1 := []]
   etc ...

Negative Examples:
   [a := 0; a0 := 1; b := 3; l1 := [1; 3; 3]]
   [a := 5; a0 := 1; b := 4; l1 := [0; 3; 4; 3; 4]]
   [a := 1; a0 := 4; b := 5; l1 := [3; 4]]
   [a := 2; a0 := 3; b := 6; l1 := [0]]
   [a := 4; a0 := 1; b := 4; l1 := [0]]
   [a := 0; a0 := 1; b := 6; l1 := [2; 3; 2; 6; 5; 2]]
   [a := 0; a0 := 1; b := 3; l1 := [3; 0]]
   [a := 6; a0 := 3; b := 5; l1 := [3; 5; 6; 6; 1]]
   [a := 5; a0 := 1; b := 4; l1 := [0; 5; 4; 3; 1]]
   [a := 3; a0 := 2; b := 4; l1 := [0; 4]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 98.549 seconds


Label: 0 (0)
(b <=* gv0), (a0 <=* gv0), (sorted gv0), (Permutation gv0 gv0), (In b gv0), (In a0 gv0), (b < b), (b < a0), (a0 < b), (a0 < a0)
(b <= b), (b <= a0), (a0 <= b), (a0 <= a0), (gv0 = gv0), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool gv0)
(true = sorted_bool gv0), (b <=* b :: gv0), (b <=* a0 :: gv0), (b <=* merge gv0 gv0), (b <=* gv0 ++ gv0), (b <=* []), (a0 <=* b :: gv0), (a0 <=* a0 :: gv0), (a0 <=* merge gv0 gv0), (a0 <=* gv0 ++ gv0)
(a0 <=* []), (length gv0 <=* gv0), (length gv0 <=* b :: gv0), (length gv0 <=* a0 :: gv0), (length gv0 <=* merge gv0 gv0), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* []), (sorted (b :: gv0)), (sorted (a0 :: gv0)), (sorted (merge gv0 gv0))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation gv0 (b :: gv0)), (Permutation gv0 (a0 :: gv0)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (b :: gv0) gv0), (Permutation (b :: gv0) (a0 :: gv0)), (Permutation (b :: gv0) (merge gv0 gv0))
(Permutation (b :: gv0) (gv0 ++ gv0)), (Permutation (b :: gv0) []), (Permutation (a0 :: gv0) gv0), (Permutation (a0 :: gv0) (b :: gv0)), (Permutation (a0 :: gv0) (merge gv0 gv0)), (Permutation (a0 :: gv0) (gv0 ++ gv0)), (Permutation (a0 :: gv0) []), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (b :: gv0)), (Permutation (merge gv0 gv0) (a0 :: gv0))
(Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (b :: gv0)), (Permutation (gv0 ++ gv0) (a0 :: gv0)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) []), (Permutation [] gv0), (Permutation [] (b :: gv0)), (Permutation [] (a0 :: gv0))
(Permutation [] (merge gv0 gv0)), (Permutation [] (gv0 ++ gv0)), (In b (b :: gv0)), (In b (a0 :: gv0)), (In b (merge gv0 gv0)), (In b (gv0 ++ gv0)), (In a0 (b :: gv0)), (In a0 (a0 :: gv0)), (In a0 (merge gv0 gv0)), (In a0 (gv0 ++ gv0))
(In (length gv0) gv0), (In (length gv0) (b :: gv0)), (In (length gv0) (a0 :: gv0)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (gv0 ++ gv0)), (b < length gv0), (a0 < length gv0), (length gv0 < b), (length gv0 < a0), (b <= length gv0)
(a0 <= length gv0), (length gv0 <= b), (length gv0 <= a0), (~ b <=* gv0), (~ a0 <=* gv0), (~ sorted gv0), (~ Permutation gv0 gv0), (~ In b gv0), (~ In a0 gv0), (~ b < b)
(~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (gv0 <> gv0), (b <> b), (b <> a0)
(a0 <> b), (a0 <> a0), (None = Some gv0), (b :: gv0 = gv0), (b :: gv0 = merge gv0 gv0), (b :: gv0 = gv0 ++ gv0), (b :: gv0 = []), (a0 :: gv0 = gv0), (a0 :: gv0 = merge gv0 gv0), (a0 :: gv0 = gv0 ++ gv0)
(a0 :: gv0 = []), (merge gv0 gv0 = gv0), (merge gv0 gv0 = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0), ([] = merge gv0 gv0), ([] = gv0 ++ gv0), (None = Some b), (None = Some a0), ((gv0, gv0) = split gv0)
(length gv0 = b), (length gv0 = a0)

Label: 0 (1)
(b <=* gv0), (a0 <=* gv0), (sorted gv0), (Permutation gv0 gv0), (In b gv0), (In a0 gv0), (b < b), (b < a0), (a0 < b), (a0 < a0)
(b <= b), (b <= a0), (a0 <= b), (a0 <= a0), (gv0 = gv0), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool gv0)
(true = sorted_bool gv0), (b <=* b :: gv0), (b <=* a0 :: gv0), (b <=* merge gv0 gv0), (b <=* gv0 ++ gv0), (b <=* []), (a0 <=* b :: gv0), (a0 <=* a0 :: gv0), (a0 <=* merge gv0 gv0), (a0 <=* gv0 ++ gv0)
(a0 <=* []), (length gv0 <=* gv0), (length gv0 <=* b :: gv0), (length gv0 <=* a0 :: gv0), (length gv0 <=* merge gv0 gv0), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* []), (sorted (b :: gv0)), (sorted (a0 :: gv0)), (sorted (merge gv0 gv0))
(sorted (gv0 ++ gv0)), (sorted []), (Permutation gv0 (b :: gv0)), (Permutation gv0 (a0 :: gv0)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (b :: gv0) gv0), (Permutation (b :: gv0) (a0 :: gv0)), (Permutation (b :: gv0) (merge gv0 gv0))
(Permutation (b :: gv0) (gv0 ++ gv0)), (Permutation (b :: gv0) []), (Permutation (a0 :: gv0) gv0), (Permutation (a0 :: gv0) (b :: gv0)), (Permutation (a0 :: gv0) (merge gv0 gv0)), (Permutation (a0 :: gv0) (gv0 ++ gv0)), (Permutation (a0 :: gv0) []), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (b :: gv0)), (Permutation (merge gv0 gv0) (a0 :: gv0))
(Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (b :: gv0)), (Permutation (gv0 ++ gv0) (a0 :: gv0)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) []), (Permutation [] gv0), (Permutation [] (b :: gv0)), (Permutation [] (a0 :: gv0))
(Permutation [] (merge gv0 gv0)), (Permutation [] (gv0 ++ gv0)), (In b (b :: gv0)), (In b (a0 :: gv0)), (In b (merge gv0 gv0)), (In b (gv0 ++ gv0)), (In a0 (b :: gv0)), (In a0 (a0 :: gv0)), (In a0 (merge gv0 gv0)), (In a0 (gv0 ++ gv0))
(In (length gv0) gv0), (In (length gv0) (b :: gv0)), (In (length gv0) (a0 :: gv0)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (gv0 ++ gv0)), (b < length gv0), (a0 < length gv0), (length gv0 < b), (length gv0 < a0), (b <= length gv0)
(a0 <= length gv0), (length gv0 <= b), (length gv0 <= a0), (~ b <=* gv0), (~ a0 <=* gv0), (~ sorted gv0), (~ Permutation gv0 gv0), (~ In b gv0), (~ In a0 gv0), (~ b < b)
(~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (gv0 <> gv0), (b <> b), (b <> a0)
(a0 <> b), (a0 <> a0), (None = Some gv0), (b :: gv0 = gv0), (b :: gv0 = merge gv0 gv0), (b :: gv0 = gv0 ++ gv0), (b :: gv0 = []), (a0 :: gv0 = gv0), (a0 :: gv0 = merge gv0 gv0), (a0 :: gv0 = gv0 ++ gv0)
(a0 :: gv0 = []), (merge gv0 gv0 = gv0), (merge gv0 gv0 = gv0 ++ gv0), (gv0 ++ gv0 = gv0), ([] = gv0), ([] = merge gv0 gv0), ([] = gv0 ++ gv0), (None = Some b), (None = Some a0), ((gv0, gv0) = split gv0)
(length gv0 = b), (length gv0 = a0)

Label: 1 (2)
(b <=* l1), (a <=* l1), (a0 <=* l1), (sorted l1), (Permutation l1 l1), (In b l1), (In a l1), (In a0 l1), (b < b), (b < a)
(b < a0), (a < b), (a < a), (a < a0), (a0 < b), (a0 < a), (a0 < a0), (b <= b), (b <= a), (b <= a0)
(a <= b), (a <= a), (a <= a0), (a0 <= b), (a0 <= a), (a0 <= a0), (l1 = l1), (b = b), (b = a), (b = a0)
(a = b), (a = a), (a = a0), (a0 = b), (a0 = a), (a0 = a0), (false = sorted_bool l1), (true = sorted_bool l1), (b <=* b :: l1), (b <=* a :: l1)
(b <=* a0 :: l1), (b <=* merge l1 l1), (b <=* l1 ++ l1), (b <=* []), (a <=* b :: l1), (a <=* a :: l1), (a <=* a0 :: l1), (a <=* merge l1 l1), (a <=* l1 ++ l1), (a <=* [])
(a0 <=* b :: l1), (a0 <=* a :: l1), (a0 <=* a0 :: l1), (a0 <=* merge l1 l1), (a0 <=* l1 ++ l1), (a0 <=* []), (length l1 <=* l1), (length l1 <=* b :: l1), (length l1 <=* a :: l1), (length l1 <=* a0 :: l1)
(length l1 <=* merge l1 l1), (length l1 <=* l1 ++ l1), (length l1 <=* []), (sorted (b :: l1)), (sorted (a :: l1)), (sorted (a0 :: l1)), (sorted (merge l1 l1)), (sorted (l1 ++ l1)), (sorted []), (Permutation l1 (b :: l1))
(Permutation l1 (a :: l1)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l1 ++ l1)), (Permutation l1 []), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) []), (Permutation (a :: l1) l1), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (a :: l1))
(Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l1 ++ l1) l1)
(Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) []), (Permutation [] l1), (Permutation [] (b :: l1)), (Permutation [] (a :: l1)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l1 l1))
(Permutation [] (l1 ++ l1)), (In b (b :: l1)), (In b (a :: l1)), (In b (a0 :: l1)), (In b (merge l1 l1)), (In b (l1 ++ l1)), (In a (b :: l1)), (In a (a :: l1)), (In a (a0 :: l1)), (In a (merge l1 l1))
(In a (l1 ++ l1)), (In a0 (b :: l1)), (In a0 (a :: l1)), (In a0 (a0 :: l1)), (In a0 (merge l1 l1)), (In a0 (l1 ++ l1)), (In (length l1) l1), (In (length l1) (b :: l1)), (In (length l1) (a :: l1)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l1 l1)), (In (length l1) (l1 ++ l1)), (b < length l1), (a < length l1), (a0 < length l1), (length l1 < b), (length l1 < a), (length l1 < a0), (b <= length l1), (a <= length l1)
(a0 <= length l1), (length l1 <= b), (length l1 <= a), (length l1 <= a0), (~ b <=* l1), (~ a <=* l1), (~ a0 <=* l1), (~ sorted l1), (~ Permutation l1 l1), (~ In b l1)
(~ In a l1), (~ In a0 l1), (~ b < b), (~ b < a), (~ b < a0), (~ a < b), (~ a < a), (~ a < a0), (~ a0 < b), (~ a0 < a)
(~ a0 < a0), (~ b <= b), (~ b <= a), (~ b <= a0), (~ a <= b), (~ a <= a), (~ a <= a0), (~ a0 <= b), (~ a0 <= a), (~ a0 <= a0)
(l1 <> l1), (b <> b), (b <> a), (b <> a0), (a <> b), (a <> a), (a <> a0), (a0 <> b), (a0 <> a), (a0 <> a0)
(None = Some l1), (b :: l1 = l1), (b :: l1 = merge l1 l1), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a :: l1 = l1), (a :: l1 = merge l1 l1), (a :: l1 = l1 ++ l1), (a :: l1 = []), (a0 :: l1 = l1)
(a0 :: l1 = merge l1 l1), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l1 l1 = l1), (merge l1 l1 = l1 ++ l1), (l1 ++ l1 = l1), ([] = l1), ([] = merge l1 l1), ([] = l1 ++ l1), (None = Some b)
(None = Some a), (None = Some a0), ((l1, l1) = split l1), (length l1 = b), (length l1 = a), (length l1 = a0)

Label: 1 (3)
(b <=* l1), (a <=* l1), (a0 <=* l1), (sorted l1), (Permutation l1 l1), (In b l1), (In a l1), (In a0 l1), (b < b), (b < a)
(b < a0), (a < b), (a < a), (a < a0), (a0 < b), (a0 < a), (a0 < a0), (b <= b), (b <= a), (b <= a0)
(a <= b), (a <= a), (a <= a0), (a0 <= b), (a0 <= a), (a0 <= a0), (l1 = l1), (b = b), (b = a), (b = a0)
(a = b), (a = a), (a = a0), (a0 = b), (a0 = a), (a0 = a0), (false = sorted_bool l1), (true = sorted_bool l1), (b <=* b :: l1), (b <=* a :: l1)
(b <=* a0 :: l1), (b <=* merge l1 l1), (b <=* l1 ++ l1), (b <=* []), (a <=* b :: l1), (a <=* a :: l1), (a <=* a0 :: l1), (a <=* merge l1 l1), (a <=* l1 ++ l1), (a <=* [])
(a0 <=* b :: l1), (a0 <=* a :: l1), (a0 <=* a0 :: l1), (a0 <=* merge l1 l1), (a0 <=* l1 ++ l1), (a0 <=* []), (length l1 <=* l1), (length l1 <=* b :: l1), (length l1 <=* a :: l1), (length l1 <=* a0 :: l1)
(length l1 <=* merge l1 l1), (length l1 <=* l1 ++ l1), (length l1 <=* []), (sorted (b :: l1)), (sorted (a :: l1)), (sorted (a0 :: l1)), (sorted (merge l1 l1)), (sorted (l1 ++ l1)), (sorted []), (Permutation l1 (b :: l1))
(Permutation l1 (a :: l1)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l1 ++ l1)), (Permutation l1 []), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) []), (Permutation (a :: l1) l1), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (a :: l1))
(Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l1 ++ l1) l1)
(Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) []), (Permutation [] l1), (Permutation [] (b :: l1)), (Permutation [] (a :: l1)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l1 l1))
(Permutation [] (l1 ++ l1)), (In b (b :: l1)), (In b (a :: l1)), (In b (a0 :: l1)), (In b (merge l1 l1)), (In b (l1 ++ l1)), (In a (b :: l1)), (In a (a :: l1)), (In a (a0 :: l1)), (In a (merge l1 l1))
(In a (l1 ++ l1)), (In a0 (b :: l1)), (In a0 (a :: l1)), (In a0 (a0 :: l1)), (In a0 (merge l1 l1)), (In a0 (l1 ++ l1)), (In (length l1) l1), (In (length l1) (b :: l1)), (In (length l1) (a :: l1)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l1 l1)), (In (length l1) (l1 ++ l1)), (b < length l1), (a < length l1), (a0 < length l1), (length l1 < b), (length l1 < a), (length l1 < a0), (b <= length l1), (a <= length l1)
(a0 <= length l1), (length l1 <= b), (length l1 <= a), (length l1 <= a0), (~ b <=* l1), (~ a <=* l1), (~ a0 <=* l1), (~ sorted l1), (~ Permutation l1 l1), (~ In b l1)
(~ In a l1), (~ In a0 l1), (~ b < b), (~ b < a), (~ b < a0), (~ a < b), (~ a < a), (~ a < a0), (~ a0 < b), (~ a0 < a)
(~ a0 < a0), (~ b <= b), (~ b <= a), (~ b <= a0), (~ a <= b), (~ a <= a), (~ a <= a0), (~ a0 <= b), (~ a0 <= a), (~ a0 <= a0)
(l1 <> l1), (b <> b), (b <> a), (b <> a0), (a <> b), (a <> a), (a <> a0), (a0 <> b), (a0 <> a), (a0 <> a0)
(None = Some l1), (b :: l1 = l1), (b :: l1 = merge l1 l1), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a :: l1 = l1), (a :: l1 = merge l1 l1), (a :: l1 = l1 ++ l1), (a :: l1 = []), (a0 :: l1 = l1)
(a0 :: l1 = merge l1 l1), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l1 l1 = l1), (merge l1 l1 = l1 ++ l1), (l1 ++ l1 = l1), ([] = l1), ([] = merge l1 l1), ([] = l1 ++ l1), (None = Some b)
(None = Some a), (None = Some a0), ((l1, l1) = split l1), (length l1 = b), (length l1 = a), (length l1 = a0)