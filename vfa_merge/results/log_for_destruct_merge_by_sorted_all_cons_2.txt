Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (sorted (a0 :: l2))
 -- (b <=* a :: l1)
 -- (forall b : nat,
 b <=* l1 ->
 forall l2 : list nat,
 sorted (merge l1 l2) -> sorted l2 -> sorted (merge (b :: l1) l2))
 -- (sorted (merge (a :: l1) l2) ->
 sorted l2 ->
 forall b : nat, b <=* a :: l1 -> sorted (merge (b :: a :: l1) l2))

----------------------------------
Goal: (sorted (a0 :: merge (b :: a :: l1) l2))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (merge (b :: a :: l1) l2)
gv3 : (list nat) = (a :: l1)
gv2 : (list nat) = (b :: a :: l1)
gv0 : (list nat) = (a0 :: merge (b :: a :: l1) l2)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 149.943 seconds

Label: Generalization #0
Assumptions: 
 -- (a0 :: merge (b :: a :: l1) l2 = gv0)
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (b <=* a :: l1)

----------------------------------
Goal: (sorted gv0)
Case: 4

Label: Generalization #1
Assumptions: 
 -- (b :: a :: l1 = gv2)
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (b <=* a :: l1)

----------------------------------
Goal: (sorted (a0 :: merge gv2 l2))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (b > a0)
 -- (sorted (merge gv3 (a0 :: l2)))
 -- (b <=* gv3)

----------------------------------
Goal: (sorted (a0 :: merge (b :: gv3) l2))
Case: 3

Label: Generalization #3
Assumptions: 
 -- (merge (b :: a :: l1) l2 = gv1)
 -- (b > a0)

----------------------------------
Goal: (sorted (a0 :: gv1))
Case: 2

Label: Generalization #4
Assumptions: 
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (b <=* a :: l1)

----------------------------------
Goal: (sorted (a0 :: merge (b :: a :: l1) l2))
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 151.57 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 1 (0)
Abducted Assumption: (b :: a :: l1 = gv2)
Positive Examples:
   [a := 2; a0 := 0; b := 2; gv2 := [2; 2]; l1 := []; l2 := [2; 2]]
   [a := 3; a0 := 0; b := 3; gv2 := [3; 3]; l1 := []; l2 := []]

Negative Examples:
   [a := 5; a0 := 0; b := 5; gv2 := [1; 5; 2; 4]; l1 := []; l2 := [2]]
   [a := 2; a0 := 0; b := 1; gv2 := [2; 0; 0]; l1 := [2]; l2 := [2]]
   [a := 2; a0 := 0; b := 2; gv2 := [1; 0; 0]; l1 := [2; 3; 3]; l2 := [1; 1]]
   [a := 3; a0 := 1; b := 3; gv2 := [0; 0]; l1 := []; l2 := []]
   [a := 1; a0 := 0; b := 1; gv2 := [4; 0]; l1 := []; l2 := []]
   [a := 2; a0 := 1; b := 2; gv2 := [0; 0; 3]; l1 := [2]; l2 := []]
   [a := 2; a0 := 0; b := 1; gv2 := [4; 1]; l1 := [3]; l2 := [4; 4]]
   [a := 6; a0 := 4; b := 5; gv2 := [3]; l1 := []; l2 := []]
   [a := 1; a0 := 0; b := 1; gv2 := [1; 2; 1; 6; 1]; l1 := [3]; l2 := [0]]
   [a := 2; a0 := 1; b := 2; gv2 := [2; 0; 0; 3]; l1 := []; l2 := [3; 3]]
   etc ...


Label: 1 (1)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 2; a0 := 0; b := 2; gv2 := [2; 2]; l1 := []; l2 := [2; 2]]
   [a := 3; a0 := 0; b := 3; gv2 := [3; 3]; l1 := []; l2 := []]

Negative Examples:
   [a := 2; a0 := 1; b := 0; gv2 := [0; 2]; l1 := []; l2 := [1]]
   [a := 0; a0 := 2; b := 0; gv2 := [0; 0]; l1 := []; l2 := [2]]


Label: 1 (2)
Abducted Assumption: (sorted (merge (a :: l1) (a0 :: l2)))
Positive Examples:
   [a := 2; a0 := 0; b := 2; gv2 := [2; 2]; l1 := []; l2 := [2; 2]]
   [a := 3; a0 := 0; b := 3; gv2 := [3; 3]; l1 := []; l2 := []]

Negative Examples:
   [a := 2; a0 := 1; b := 2; gv2 := [2; 2]; l1 := []; l2 := [3; 2; 1]]


Label: 2 (3)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 4; a0 := 1; b := 3; gv3 := []; l1 := [1; 5; 3; 5; 0]; l2 := [3]]
   [a := 0; a0 := 0; b := 2; gv3 := []; l1 := [0; 1]; l2 := [1]]
   [a := 2; a0 := 1; b := 3; gv3 := [3]; l1 := [2; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := []; l1 := [3; 1; 1]; l2 := [2; 2]]
   [a := 2; a0 := 0; b := 1; gv3 := [1]; l1 := [2; 2]; l2 := [1]]
   [a := 4; a0 := 2; b := 3; gv3 := []; l1 := [3; 3; 3; 3]; l2 := []]
   [a := 1; a0 := 0; b := 1; gv3 := []; l1 := [2]; l2 := [1; 2]]
   [a := 0; a0 := 0; b := 1; gv3 := []; l1 := []; l2 := [2]]
   [a := 0; a0 := 0; b := 2; gv3 := [2; 2]; l1 := [3; 4; 4]; l2 := [2]]
   [a := 1; a0 := 1; b := 3; gv3 := []; l1 := [0; 4; 4; 3]; l2 := [4; 4]]
   etc ...

Negative Examples:
   [a := 2; a0 := 2; b := 1; gv3 := []; l1 := [0; 1]; l2 := [2]]
   [a := 3; a0 := 1; b := 0; gv3 := []; l1 := [0; 2; 2]; l2 := []]
   [a := 1; a0 := 2; b := 0; gv3 := []; l1 := [1]; l2 := [2; 2]]
   [a := 2; a0 := 2; b := 0; gv3 := [0; 2]; l1 := [2; 1]; l2 := [3]]
   [a := 6; a0 := 6; b := 1; gv3 := []; l1 := [6; 4; 5]; l2 := []]
   [a := 1; a0 := 2; b := 0; gv3 := [0; 1]; l1 := []; l2 := []]
   [a := 2; a0 := 1; b := 0; gv3 := []; l1 := [3; 4; 2]; l2 := [2]]
   [a := 2; a0 := 4; b := 0; gv3 := []; l1 := [0; 2; 3; 1]; l2 := []]
   [a := 3; a0 := 1; b := 0; gv3 := [0]; l1 := [0; 2; 1]; l2 := []]
   [a := 0; a0 := 3; b := 2; gv3 := []; l1 := []; l2 := []]
   etc ...


Label: 2 (4)
Abducted Assumption: (sorted (merge gv3 (a0 :: l2)))
Positive Examples:
   [a := 4; a0 := 1; b := 3; gv3 := []; l1 := [1; 5; 3; 5; 0]; l2 := [3]]
   [a := 0; a0 := 0; b := 2; gv3 := []; l1 := [0; 1]; l2 := [1]]
   [a := 2; a0 := 1; b := 3; gv3 := [3]; l1 := [2; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := []; l1 := [3; 1; 1]; l2 := [2; 2]]
   [a := 2; a0 := 0; b := 1; gv3 := [1]; l1 := [2; 2]; l2 := [1]]
   [a := 4; a0 := 2; b := 3; gv3 := []; l1 := [3; 3; 3; 3]; l2 := []]
   [a := 1; a0 := 0; b := 1; gv3 := []; l1 := [2]; l2 := [1; 2]]
   [a := 0; a0 := 0; b := 1; gv3 := []; l1 := []; l2 := [2]]
   [a := 0; a0 := 0; b := 2; gv3 := [2; 2]; l1 := [3; 4; 4]; l2 := [2]]
   [a := 1; a0 := 1; b := 3; gv3 := []; l1 := [0; 4; 4; 3]; l2 := [4; 4]]
   etc ...

Negative Examples:
   [a := 3; a0 := 0; b := 4; gv3 := []; l1 := [3; 2]; l2 := [4; 0; 3; 0]]
   [a := 2; a0 := 1; b := 5; gv3 := []; l1 := [4]; l2 := [3; 2; 1]]
   [a := 3; a0 := 0; b := 3; gv3 := [3]; l1 := [1]; l2 := [2; 0; 1]]
   [a := 1; a0 := 1; b := 2; gv3 := []; l1 := [1]; l2 := [2; 2; 3; 0]]
   [a := 5; a0 := 0; b := 1; gv3 := []; l1 := [5; 5; 5; 1]; l2 := [0; 4; 3]]
   [a := 1; a0 := 0; b := 2; gv3 := [3; 2; 2]; l1 := []; l2 := [2; 1; 5; 0; 4]]
   [a := 2; a0 := 0; b := 1; gv3 := [4; 6; 4; 1; 2]; l1 := [0; 3; 6; 0; 5; 0]; l2 := [5; 0; 2]]
   [a := 3; a0 := 1; b := 3; gv3 := []; l1 := [0]; l2 := [1; 0]]
   [a := 3; a0 := 1; b := 5; gv3 := []; l1 := [2; 2]; l2 := [5; 0]]
   [a := 1; a0 := 1; b := 3; gv3 := [3; 5]; l1 := [0]; l2 := [5; 5; 3]]
   etc ...


Label: 2 (5)
Abducted Assumption: (b <=* gv3)
Positive Examples:
   [a := 4; a0 := 1; b := 3; gv3 := []; l1 := [1; 5; 3; 5; 0]; l2 := [3]]
   [a := 0; a0 := 0; b := 2; gv3 := []; l1 := [0; 1]; l2 := [1]]
   [a := 2; a0 := 1; b := 3; gv3 := [3]; l1 := [2; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := []; l1 := [3; 1; 1]; l2 := [2; 2]]
   [a := 2; a0 := 0; b := 1; gv3 := [1]; l1 := [2; 2]; l2 := [1]]
   [a := 4; a0 := 2; b := 3; gv3 := []; l1 := [3; 3; 3; 3]; l2 := []]
   [a := 1; a0 := 0; b := 1; gv3 := []; l1 := [2]; l2 := [1; 2]]
   [a := 0; a0 := 0; b := 1; gv3 := []; l1 := []; l2 := [2]]
   [a := 0; a0 := 0; b := 2; gv3 := [2; 2]; l1 := [3; 4; 4]; l2 := [2]]
   [a := 1; a0 := 1; b := 3; gv3 := []; l1 := [0; 4; 4; 3]; l2 := [4; 4]]
   etc ...

Negative Examples:
   [a := 3; a0 := 0; b := 3; gv3 := [1; 3]; l1 := []; l2 := [1]]
   [a := 1; a0 := 0; b := 3; gv3 := [0; 3; 4]; l1 := [3]; l2 := []]
   [a := 1; a0 := 0; b := 2; gv3 := [0; 2]; l1 := [1; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := [1; 1]; l1 := [2]; l2 := [0]]
   [a := 2; a0 := 2; b := 3; gv3 := [1; 3; 3]; l1 := [1; 2; 1]; l2 := []]
   [a := 3; a0 := 0; b := 1; gv3 := [0]; l1 := [3; 1; 2; 3]; l2 := [0; 4; 5]]
   [a := 5; a0 := 3; b := 4; gv3 := [3; 3]; l1 := [2]; l2 := []]
   [a := 0; a0 := 1; b := 2; gv3 := [0; 1]; l1 := [0; 1]; l2 := []]
   [a := 2; a0 := 1; b := 3; gv3 := [1; 3]; l1 := [0]; l2 := [2; 3; 3]]
   [a := 0; a0 := 0; b := 1; gv3 := [0]; l1 := [2]; l2 := []]
   etc ...


Label: 3 (6)
Abducted Assumption: n/a
Positive Examples:
   [a := 2; a0 := 1; b := 2; gv1 := [2; 2]; l1 := []; l2 := []]

Negative Examples:
   [a := 0; a0 := 0; b := 2; gv1 := [2; 0; 3]; l1 := []; l2 := [3]]


Label: 4 (7)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 2; a0 := 0; b := 2; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 2; l1 := []; l2 := [1]]
   [a := 4; a0 := 2; b := 3; l1 := []; l2 := [5; 5]]
   [a := 5; a0 := 0; b := 5; l1 := []; l2 := [4; 6]]
   [a := 4; a0 := 0; b := 2; l1 := [4]; l2 := []]
   [a := 3; a0 := 0; b := 1; l1 := []; l2 := [0; 1; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [3]; l2 := [0; 3]]
   [a := 2; a0 := 0; b := 2; l1 := []; l2 := [2]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []]
   [a := 2; a0 := 0; b := 1; l1 := [2; 2]; l2 := [1; 2]]
   etc ...

Negative Examples:
   [a := 2; a0 := 5; b := 2; l1 := []; l2 := [5]]
   [a := 0; a0 := 2; b := 0; l1 := [3]; l2 := [2; 3; 3]]
   [a := 1; a0 := 2; b := 1; l1 := [2]; l2 := [2]]
   [a := 2; a0 := 4; b := 0; l1 := [5]; l2 := [4]]
   [a := 0; a0 := 1; b := 0; l1 := [3; 3; 4]; l2 := [4; 4; 4]]
   [a := 4; a0 := 4; b := 3; l1 := []; l2 := []]
   [a := 5; a0 := 4; b := 3; l1 := []; l2 := []]
   [a := 0; a0 := 3; b := 0; l1 := [0; 1]; l2 := []]
   [a := 0; a0 := 2; b := 0; l1 := [2]; l2 := [2]]
   [a := 0; a0 := 3; b := 0; l1 := [2]; l2 := []]
   etc ...


Label: 4 (8)
Abducted Assumption: (sorted (merge (a :: l1) (a0 :: l2)))
Positive Examples:
   [a := 2; a0 := 0; b := 2; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 2; l1 := []; l2 := [1]]
   [a := 4; a0 := 2; b := 3; l1 := []; l2 := [5; 5]]
   [a := 5; a0 := 0; b := 5; l1 := []; l2 := [4; 6]]
   [a := 4; a0 := 0; b := 2; l1 := [4]; l2 := []]
   [a := 3; a0 := 0; b := 1; l1 := []; l2 := [0; 1; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [3]; l2 := [0; 3]]
   [a := 2; a0 := 0; b := 2; l1 := []; l2 := [2]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []]
   [a := 2; a0 := 0; b := 1; l1 := [2; 2]; l2 := [1; 2]]
   etc ...

Negative Examples:
   [a := 2; a0 := 0; b := 1; l1 := [1; 1; 2; 4]; l2 := [4; 0; 0]]
   [a := 2; a0 := 1; b := 2; l1 := [3]; l2 := [1; 2; 1]]
   [a := 3; a0 := 1; b := 2; l1 := []; l2 := [3; 0]]
   [a := 2; a0 := 1; b := 2; l1 := [5]; l2 := [2; 5; 3; 1]]
   [a := 1; a0 := 0; b := 1; l1 := [1; 1]; l2 := [3; 3; 1]]
   [a := 5; a0 := 3; b := 5; l1 := []; l2 := [2; 4; 2]]
   [a := 5; a0 := 0; b := 2; l1 := []; l2 := [4; 2]]
   [a := 2; a0 := 0; b := 1; l1 := []; l2 := [0; 3; 2]]
   [a := 3; a0 := 0; b := 3; l1 := [4; 4; 3; 4; 4]; l2 := [2; 5]]
   [a := 4; a0 := 1; b := 4; l1 := [4]; l2 := [4; 2]]
   etc ...


Label: 4 (9)
Abducted Assumption: (b <=* a :: l1)
Positive Examples:
   [a := 2; a0 := 0; b := 2; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 2; l1 := []; l2 := [1]]
   [a := 4; a0 := 2; b := 3; l1 := []; l2 := [5; 5]]
   [a := 5; a0 := 0; b := 5; l1 := []; l2 := [4; 6]]
   [a := 4; a0 := 0; b := 2; l1 := [4]; l2 := []]
   [a := 3; a0 := 0; b := 1; l1 := []; l2 := [0; 1; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [3]; l2 := [0; 3]]
   [a := 2; a0 := 0; b := 2; l1 := []; l2 := [2]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []]
   [a := 2; a0 := 0; b := 1; l1 := [2; 2]; l2 := [1; 2]]
   etc ...

Negative Examples:
   [a := 3; a0 := 3; b := 5; l1 := []; l2 := [5]]
   [a := 1; a0 := 1; b := 2; l1 := [3]; l2 := []]
   [a := 0; a0 := 1; b := 5; l1 := []; l2 := []]
   [a := 1; a0 := 1; b := 3; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 5; l1 := [2; 2]; l2 := []]
   [a := 1; a0 := 5; b := 6; l1 := [2; 5]; l2 := [6]]
   [a := 1; a0 := 0; b := 2; l1 := [3; 3]; l2 := [0]]
   [a := 5; a0 := 2; b := 6; l1 := []; l2 := []]
   [a := 1; a0 := 1; b := 3; l1 := [3; 3]; l2 := [4; 4]]
   [a := 0; a0 := 0; b := 1; l1 := [2]; l2 := [2]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 153.755 seconds


Label: 1 (0)
(a <=* l1), (a <=* l2), (a <=* gv2), (b <=* l1), (b <=* l2), (b <=* gv2), (a0 <=* l1), (a0 <=* l2), (a0 <=* gv2), (sorted l1)
(sorted gv2), (Permutation l1 l1), (Permutation l1 l2), (Permutation l1 gv2), (Permutation l2 l1), (Permutation l2 l2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2), (Permutation gv2 gv2)
(In a l2), (In a gv2), (In b l1), (In b l2), (In b gv2), (In a0 l1), (In a0 l2), (In a0 gv2), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l1 = l1), (l1 = l2), (l1 = gv2), (l2 = l1), (l2 = l2), (l2 = gv2)
(gv2 = l2), (gv2 = gv2), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l1), (false = sorted_bool l2), (false = sorted_bool gv2), (true = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool gv2), (a <=* a :: l1), (a <=* a :: l2), (a <=* a :: gv2), (a <=* b :: l1)
(a <=* b :: gv2), (a <=* a0 :: l1), (a <=* a0 :: l2), (a <=* a0 :: gv2), (a <=* merge l1 l1), (a <=* merge l1 l2), (a <=* merge l1 gv2), (a <=* merge l2 l1), (a <=* merge l2 l2), (a <=* merge l2 gv2)
(a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ l1), (a <=* l1 ++ l2), (a <=* l1 ++ gv2), (a <=* l2 ++ l1), (a <=* l2 ++ l2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1), (a <=* gv2 ++ l2)
(a <=* []), (b <=* a :: l1), (b <=* a :: l2), (b <=* a :: gv2), (b <=* b :: l1), (b <=* b :: l2), (b <=* b :: gv2), (b <=* a0 :: l1), (b <=* a0 :: l2), (b <=* a0 :: gv2)
(b <=* merge l1 l2), (b <=* merge l1 gv2), (b <=* merge l2 l1), (b <=* merge l2 l2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ l1), (b <=* l1 ++ l2)
(b <=* l2 ++ l1), (b <=* l2 ++ l2), (b <=* l2 ++ gv2), (b <=* gv2 ++ l1), (b <=* gv2 ++ l2), (b <=* gv2 ++ gv2), (b <=* []), (a0 <=* a :: l1), (a0 <=* a :: l2), (a0 <=* a :: gv2)
(a0 <=* b :: l2), (a0 <=* b :: gv2), (a0 <=* a0 :: l1), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 l1), (a0 <=* merge l2 l2)
(a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2), (a0 <=* merge gv2 gv2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ gv2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv2), (a0 <=* gv2 ++ l1)
(a0 <=* gv2 ++ gv2), (a0 <=* []), (length l1 <=* l1), (length l1 <=* l2), (length l1 <=* gv2), (length l1 <=* a :: l1), (length l1 <=* a :: l2), (length l1 <=* a :: gv2), (length l1 <=* b :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l1), (length l1 <=* a0 :: l2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 gv2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 gv2), (length l1 <=* merge gv2 l1)
(length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2)
(length l2 <=* l1), (length l2 <=* l2), (length l2 <=* gv2), (length l2 <=* a :: l1), (length l2 <=* a :: l2), (length l2 <=* a :: gv2), (length l2 <=* b :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: gv2), (length l2 <=* a0 :: l1)
(length l2 <=* a0 :: gv2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 gv2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2)
(length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2), (length l2 <=* gv2 ++ gv2), (length l2 <=* []), (length gv2 <=* l1)
(length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1), (length gv2 <=* a0 :: l2), (length gv2 <=* a0 :: gv2)
(length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l1 ++ l1), (length gv2 <=* l1 ++ l2)
(length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: l1)), (sorted (a :: l2)), (sorted (a :: gv2))
(sorted (b :: l2)), (sorted (b :: gv2)), (sorted (a0 :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: gv2)), (sorted (merge l1 l1)), (sorted (merge l1 l2)), (sorted (merge l1 gv2)), (sorted (merge l2 l1)), (sorted (merge l2 l2))
(sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ l1)), (sorted (l2 ++ l2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1))
(sorted (gv2 ++ gv2)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: l2)), (Permutation l1 (a :: gv2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: l2)), (Permutation l1 (b :: gv2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: l2))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ l1))
(Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (gv2 ++ l2)), (Permutation l1 (gv2 ++ gv2)), (Permutation l1 []), (Permutation l2 (a :: l1)), (Permutation l2 (a :: l2))
(Permutation l2 (b :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 l1))
(Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ gv2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv2))
(Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation l2 []), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2)), (Permutation gv2 (a0 :: l1))
(Permutation gv2 (a0 :: gv2)), (Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (l1 ++ l2)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a :: l1) l1)
(Permutation (a :: l1) gv2), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: gv2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 l1))
(Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ gv2))
(Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (gv2 ++ l2)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l1) []), (Permutation (a :: l2) l1), (Permutation (a :: l2) l2), (Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: l1))
(Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2)), (Permutation (a :: l2) (merge gv2 gv2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ gv2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ gv2))
(Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: l2) []), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2)), (Permutation (a :: gv2) (b :: l1)), (Permutation (a :: gv2) (b :: l2))
(Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2)), (Permutation (a :: gv2) (merge l2 gv2)), (Permutation (a :: gv2) (merge gv2 l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (gv2 ++ l2)), (Permutation (a :: gv2) (gv2 ++ gv2))
(Permutation (b :: l1) l1), (Permutation (b :: l1) l2), (Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: l2))
(Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2)), (Permutation (b :: l1) (merge gv2 gv2)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) (l1 ++ gv2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ gv2)), (Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l1) []), (Permutation (b :: l2) l1), (Permutation (b :: l2) l2)
(Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv2)), (Permutation (b :: l2) (merge gv2 l1)), (Permutation (b :: l2) (merge gv2 l2)), (Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ l1))
(Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: l2) []), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2), (Permutation (b :: gv2) gv2), (Permutation (b :: gv2) (a :: l1)), (Permutation (b :: gv2) (a :: l2))
(Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2)), (Permutation (b :: gv2) (merge l1 gv2)), (Permutation (b :: gv2) (merge l2 l1)), (Permutation (b :: gv2) (merge l2 l2))
(Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1)), (Permutation (b :: gv2) (l2 ++ l2)), (Permutation (b :: gv2) (l2 ++ gv2)), (Permutation (b :: gv2) (gv2 ++ l1))
(Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: l2))
(Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 gv2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 gv2)), (Permutation (a0 :: l1) (merge gv2 l1)), (Permutation (a0 :: l1) (merge gv2 l2))
(Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l1) [])
(Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: gv2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv2)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv2))
(Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 gv2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2)), (Permutation (a0 :: l2) (gv2 ++ gv2)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv2) l1), (Permutation (a0 :: gv2) l2), (Permutation (a0 :: gv2) gv2)
(Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1)), (Permutation (a0 :: gv2) (a0 :: l2)), (Permutation (a0 :: gv2) (merge l1 l1)), (Permutation (a0 :: gv2) (merge l1 l2)), (Permutation (a0 :: gv2) (merge l1 gv2))
(Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1)), (Permutation (a0 :: gv2) (l1 ++ l2)), (Permutation (a0 :: gv2) (l1 ++ gv2)), (Permutation (a0 :: gv2) (l2 ++ l1)), (Permutation (a0 :: gv2) (l2 ++ l2))
(Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: gv2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: gv2)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 gv2))
(Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2))
(Permutation (merge l1 l1) []), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) gv2), (Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (a :: l2)), (Permutation (merge l1 l2) (a :: gv2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: gv2))
(Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2))
(Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ gv2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ gv2)), (Permutation (merge l1 l2) (gv2 ++ l1)), (Permutation (merge l1 l2) (gv2 ++ l2)), (Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 l2) []), (Permutation (merge l1 gv2) l1)
(Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1)), (Permutation (merge l1 gv2) (b :: l2)), (Permutation (merge l1 gv2) (b :: gv2)), (Permutation (merge l1 gv2) (a0 :: l1)), (Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2))
(Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge gv2 l2)), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2))
(Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) []), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) gv2), (Permutation (merge l2 l1) (a :: l1))
(Permutation (merge l2 l1) (a :: gv2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: l2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 gv2))
(Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ gv2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ gv2))
(Permutation (merge l2 l1) (gv2 ++ l2)), (Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l1) []), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: l1))
(Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1))
(Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2))
(Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1)), (Permutation (merge l2 gv2) (a :: l2)), (Permutation (merge l2 gv2) (a :: gv2)), (Permutation (merge l2 gv2) (b :: l1)), (Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1))
(Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2)), (Permutation (merge l2 gv2) (merge l2 l1)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (merge gv2 l1)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1))
(Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l1)), (Permutation (merge l2 gv2) (gv2 ++ l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2)
(Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1)), (Permutation (merge gv2 l1) (b :: l2)), (Permutation (merge gv2 l1) (b :: gv2)), (Permutation (merge gv2 l1) (a0 :: l1)), (Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1))
(Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2)), (Permutation (merge gv2 l1) (merge gv2 l2)), (Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1))
(Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) []), (Permutation (merge gv2 l2) l1), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2))
(Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1)), (Permutation (merge gv2 l2) (a0 :: l2)), (Permutation (merge gv2 l2) (a0 :: gv2)), (Permutation (merge gv2 l2) (merge l1 l1)), (Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1))
(Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1)), (Permutation (merge gv2 l2) (l1 ++ l2)), (Permutation (merge gv2 l2) (l1 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l1)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1))
(Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (a :: l2)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2))
(Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (merge l1 l2)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l2 l1)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1))
(Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) [])
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: l2))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 gv2)), (Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge gv2 l2)), (Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ l2))
(Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) gv2)
(Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: gv2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: gv2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: gv2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 l2))
(Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l2))
(Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2)), (Permutation (l1 ++ l2) (gv2 ++ gv2)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) l2), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2))
(Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1)), (Permutation (l1 ++ gv2) (a0 :: l2)), (Permutation (l1 ++ gv2) (a0 :: gv2)), (Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2))
(Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ l1)), (Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2))
(Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: gv2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: gv2))
(Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: gv2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 gv2)), (Permutation (l2 ++ l1) (merge l2 l1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2))
(Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2)), (Permutation (l2 ++ l1) (gv2 ++ gv2)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ l2) l1)
(Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: gv2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv2))
(Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l1)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1))
(Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1)), (Permutation (l2 ++ gv2) (b :: l2)), (Permutation (l2 ++ gv2) (b :: gv2)), (Permutation (l2 ++ gv2) (a0 :: l1)), (Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2))
(Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l1)), (Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2))
(Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) []), (Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) l2), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1))
(Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1)), (Permutation (gv2 ++ l1) (a0 :: l2)), (Permutation (gv2 ++ l1) (a0 :: gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2))
(Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) (l1 ++ l2)), (Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) (a :: l1)), (Permutation (gv2 ++ l2) (a :: l2)), (Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1))
(Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1)), (Permutation (gv2 ++ l2) (merge l1 l2)), (Permutation (gv2 ++ l2) (merge l1 gv2)), (Permutation (gv2 ++ l2) (merge l2 l1)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2))
(Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l1)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2)
(Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (b :: l1)), (Permutation (gv2 ++ gv2) (b :: l2)), (Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1))
(Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2))
(Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation [] l1), (Permutation [] l2), (Permutation [] gv2), (Permutation [] (a :: l1)), (Permutation [] (a :: l2))
(Permutation [] (b :: l1)), (Permutation [] (b :: l2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 l1))
(Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ gv2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ gv2))
(Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: l1)), (In a (a :: l2)), (In a (a :: gv2)), (In a (b :: l1)), (In a (b :: l2)), (In a (b :: gv2)), (In a (a0 :: l1)), (In a (a0 :: l2))
(In a (merge l1 l1)), (In a (merge l1 l2)), (In a (merge l1 gv2)), (In a (merge l2 l1)), (In a (merge l2 l2)), (In a (merge l2 gv2)), (In a (merge gv2 l1)), (In a (merge gv2 l2)), (In a (merge gv2 gv2)), (In a (l1 ++ l1))
(In a (l1 ++ gv2)), (In a (l2 ++ l1)), (In a (l2 ++ l2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: l1)), (In b (a :: l2)), (In b (a :: gv2))
(In b (b :: l2)), (In b (b :: gv2)), (In b (a0 :: l1)), (In b (a0 :: l2)), (In b (a0 :: gv2)), (In b (merge l1 l1)), (In b (merge l1 l2)), (In b (merge l1 gv2)), (In b (merge l2 l1)), (In b (merge l2 l2))
(In b (merge gv2 l1)), (In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ gv2)), (In b (l2 ++ l1)), (In b (l2 ++ l2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1))
(In b (gv2 ++ gv2)), (In a0 (a :: l1)), (In a0 (a :: l2)), (In a0 (a :: gv2)), (In a0 (b :: l1)), (In a0 (b :: l2)), (In a0 (b :: gv2)), (In a0 (a0 :: l1)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv2))
(In a0 (merge l1 l2)), (In a0 (merge l1 gv2)), (In a0 (merge l2 l1)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ l2))
(In a0 (l2 ++ l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2)), (In a0 (gv2 ++ gv2)), (In (length l1) l1), (In (length l1) l2), (In (length l1) gv2), (In (length l1) (a :: l1))
(In (length l1) (a :: gv2)), (In (length l1) (b :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: gv2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 gv2))
(In (length l1) (merge l2 l2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ l2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (gv2 ++ l2)), (In (length l1) (gv2 ++ gv2)), (In (length l2) l1), (In (length l2) l2), (In (length l2) gv2), (In (length l2) (a :: l1)), (In (length l2) (a :: l2)), (In (length l2) (a :: gv2)), (In (length l2) (b :: l1))
(In (length l2) (b :: gv2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv2))
(In (length l2) (merge gv2 l2)), (In (length l2) (merge gv2 gv2)), (In (length l2) (l1 ++ l1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ gv2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2))
(In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1)), (In (length gv2) (a :: l2)), (In (length gv2) (a :: gv2)), (In (length gv2) (b :: l1)), (In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1))
(In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l2 l1)), (In (length gv2) (merge l2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2))
(In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (gv2 ++ l1)), (In (length gv2) (gv2 ++ l2)), (In (length gv2) (gv2 ++ gv2)), (a < length l1), (a < length l2)
(b < length l1), (b < length l2), (b < length gv2), (a0 < length l1), (a0 < length l2), (a0 < length gv2), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l2 < length gv2), (length gv2 < a), (length gv2 < b), (length gv2 < a0), (length gv2 < length l1), (length gv2 < length l2)
(a <= length l2), (a <= length gv2), (b <= length l1), (b <= length l2), (b <= length gv2), (a0 <= length l1), (a0 <= length l2), (a0 <= length gv2), (length l1 <= a), (length l1 <= b)
(length l1 <= length l2), (length l1 <= length gv2), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0)
(length gv2 <= length l2), (~ a <=* l1), (~ a <=* l2), (~ a <=* gv2), (~ b <=* l1), (~ b <=* l2), (~ b <=* gv2), (~ a0 <=* l1), (~ a0 <=* l2), (~ a0 <=* gv2)
(~ sorted l2), (~ sorted gv2), (~ Permutation l1 l1), (~ Permutation l1 l2), (~ Permutation l1 gv2), (~ Permutation l2 l1), (~ Permutation l2 l2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2)
(~ In a l1), (~ In a l2), (~ In a gv2), (~ In b l1), (~ In b l2), (~ In b gv2), (~ In a0 l1), (~ In a0 l2), (~ In a0 gv2), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l1 <> l1), (l1 <> l2), (l1 <> gv2), (l2 <> l1), (l2 <> l2)
(gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l1), (None = Some l2), (None = Some gv2), (a :: l1 = l1), (a :: l1 = l2), (a :: l1 = gv2), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 gv2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 gv2), (a :: l1 = merge gv2 l1), (a :: l1 = merge gv2 l2), (a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ l2)
(a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l1 = []), (a :: l2 = l1), (a :: l2 = l2), (a :: l2 = gv2), (a :: l2 = merge l1 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 gv2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 gv2), (a :: l2 = merge gv2 l1), (a :: l2 = merge gv2 l2), (a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ l2)
(a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: l2 = []), (a :: gv2 = l1), (a :: gv2 = l2), (a :: gv2 = gv2), (a :: gv2 = merge l1 l1), (a :: gv2 = merge l1 l2), (a :: gv2 = merge l1 gv2)
(a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = l1 ++ l2), (a :: gv2 = l1 ++ gv2), (a :: gv2 = l2 ++ l1), (a :: gv2 = l2 ++ l2)
(a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = l1), (b :: l1 = l2), (b :: l1 = gv2), (b :: l1 = merge l1 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 gv2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 gv2), (b :: l1 = merge gv2 l1), (b :: l1 = merge gv2 l2), (b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ l2)
(b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l1 = []), (b :: l2 = l1), (b :: l2 = l2), (b :: l2 = gv2), (b :: l2 = merge l1 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 gv2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 gv2), (b :: l2 = merge gv2 l1), (b :: l2 = merge gv2 l2), (b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ l2)
(b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: l2 = []), (b :: gv2 = l1), (b :: gv2 = l2), (b :: gv2 = gv2), (b :: gv2 = merge l1 l1), (b :: gv2 = merge l1 l2), (b :: gv2 = merge l1 gv2)
(b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1), (b :: gv2 = l1 ++ l2), (b :: gv2 = l1 ++ gv2), (b :: gv2 = l2 ++ l1), (b :: gv2 = l2 ++ l2)
(b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = l1), (a0 :: l1 = l2), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 gv2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 gv2), (a0 :: l1 = merge gv2 l1), (a0 :: l1 = merge gv2 l2), (a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ l2)
(a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l1 = []), (a0 :: l2 = l1), (a0 :: l2 = l2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 gv2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 gv2), (a0 :: l2 = merge gv2 l1), (a0 :: l2 = merge gv2 l2), (a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ l2)
(a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: l2 = []), (a0 :: gv2 = l1), (a0 :: gv2 = l2), (a0 :: gv2 = gv2), (a0 :: gv2 = merge l1 l1), (a0 :: gv2 = merge l1 l2), (a0 :: gv2 = merge l1 gv2)
(a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1), (a0 :: gv2 = l1 ++ l2), (a0 :: gv2 = l1 ++ gv2), (a0 :: gv2 = l2 ++ l1), (a0 :: gv2 = l2 ++ l2)
(a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = l1), (merge l1 l1 = l2), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ gv2)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ gv2), (merge l1 l1 = gv2 ++ l1), (merge l1 l1 = gv2 ++ l2), (merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = l1), (merge l1 l2 = l2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ l2)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1), (merge l1 gv2 = l2), (merge l1 gv2 = gv2), (merge l1 gv2 = l1 ++ l1)
(merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2), (merge l2 l1 = l1), (merge l2 l1 = l2), (merge l2 l1 = gv2)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ gv2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ gv2), (merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = l1), (merge l2 l2 = l2)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2), (merge l2 l2 = gv2 ++ gv2), (merge l2 gv2 = l1)
(merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = gv2 ++ gv2)
(merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = gv2 ++ l2)
(merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2), (merge gv2 l2 = l2 ++ gv2), (merge gv2 l2 = gv2 ++ l1)
(merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1), (merge gv2 gv2 = l2 ++ l2), (merge gv2 gv2 = l2 ++ gv2)
(merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = gv2), (l1 ++ l2 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2)
(l2 ++ l1 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = gv2), (l2 ++ l2 = l1), (l2 ++ l2 = l2), (l2 ++ l2 = gv2), (l2 ++ gv2 = l1), (l2 ++ gv2 = l2), (l2 ++ gv2 = gv2), (gv2 ++ l1 = l1)
(gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ gv2 = l2), (gv2 ++ gv2 = gv2), ([] = l1), ([] = l2), ([] = gv2)
([] = merge l1 l2), ([] = merge l1 gv2), ([] = merge l2 l1), ([] = merge l2 l2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ l1), ([] = l1 ++ l2)
([] = l2 ++ l1), ([] = l2 ++ l2), ([] = l2 ++ gv2), ([] = gv2 ++ l1), ([] = gv2 ++ l2), ([] = gv2 ++ gv2), (None = Some a), (None = Some b), (None = Some a0), ((l1, l1) = split l1)
((l1, l1) = split gv2), ((l1, l2) = split l1), ((l1, l2) = split l2), ((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split l1), ((l2, l1) = split l2), ((l2, l1) = split gv2)
((l2, l2) = split l2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2), ((l2, gv2) = split gv2), ((gv2, l1) = split l1), ((gv2, l1) = split l2), ((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2)
((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length l1 = a), (length l1 = b), (length l1 = a0), (length l2 = a), (length l2 = b), (length l2 = a0), (length gv2 = a)
(length gv2 = a0)

Label: 1 (1)
(a <=* l1), (a <=* l2), (a <=* gv2), (b <=* l1), (b <=* l2), (b <=* gv2), (a0 <=* l1), (a0 <=* l2), (a0 <=* gv2), (sorted l1)
(sorted gv2), (Permutation l1 l1), (Permutation l1 l2), (Permutation l1 gv2), (Permutation l2 l1), (Permutation l2 l2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2), (Permutation gv2 gv2)
(In a l2), (In a gv2), (In b l1), (In b l2), (In b gv2), (In a0 l1), (In a0 l2), (In a0 gv2), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l1 = l1), (l1 = l2), (l1 = gv2), (l2 = l1), (l2 = l2), (l2 = gv2)
(gv2 = l2), (gv2 = gv2), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l1), (false = sorted_bool l2), (false = sorted_bool gv2), (true = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool gv2), (a <=* a :: l1), (a <=* a :: l2), (a <=* a :: gv2), (a <=* b :: l1)
(a <=* b :: gv2), (a <=* a0 :: l1), (a <=* a0 :: l2), (a <=* a0 :: gv2), (a <=* merge l1 l1), (a <=* merge l1 l2), (a <=* merge l1 gv2), (a <=* merge l2 l1), (a <=* merge l2 l2), (a <=* merge l2 gv2)
(a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ l1), (a <=* l1 ++ l2), (a <=* l1 ++ gv2), (a <=* l2 ++ l1), (a <=* l2 ++ l2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1), (a <=* gv2 ++ l2)
(a <=* []), (b <=* a :: l1), (b <=* a :: l2), (b <=* a :: gv2), (b <=* b :: l1), (b <=* b :: l2), (b <=* b :: gv2), (b <=* a0 :: l1), (b <=* a0 :: l2), (b <=* a0 :: gv2)
(b <=* merge l1 l2), (b <=* merge l1 gv2), (b <=* merge l2 l1), (b <=* merge l2 l2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ l1), (b <=* l1 ++ l2)
(b <=* l2 ++ l1), (b <=* l2 ++ l2), (b <=* l2 ++ gv2), (b <=* gv2 ++ l1), (b <=* gv2 ++ l2), (b <=* gv2 ++ gv2), (b <=* []), (a0 <=* a :: l1), (a0 <=* a :: l2), (a0 <=* a :: gv2)
(a0 <=* b :: l2), (a0 <=* b :: gv2), (a0 <=* a0 :: l1), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 l1), (a0 <=* merge l2 l2)
(a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2), (a0 <=* merge gv2 gv2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ gv2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv2), (a0 <=* gv2 ++ l1)
(a0 <=* gv2 ++ gv2), (a0 <=* []), (length l1 <=* l1), (length l1 <=* l2), (length l1 <=* gv2), (length l1 <=* a :: l1), (length l1 <=* a :: l2), (length l1 <=* a :: gv2), (length l1 <=* b :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l1), (length l1 <=* a0 :: l2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 gv2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 gv2), (length l1 <=* merge gv2 l1)
(length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2)
(length l2 <=* l1), (length l2 <=* l2), (length l2 <=* gv2), (length l2 <=* a :: l1), (length l2 <=* a :: l2), (length l2 <=* a :: gv2), (length l2 <=* b :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: gv2), (length l2 <=* a0 :: l1)
(length l2 <=* a0 :: gv2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 gv2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2)
(length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2), (length l2 <=* gv2 ++ gv2), (length l2 <=* []), (length gv2 <=* l1)
(length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1), (length gv2 <=* a0 :: l2), (length gv2 <=* a0 :: gv2)
(length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l1 ++ l1), (length gv2 <=* l1 ++ l2)
(length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: l1)), (sorted (a :: l2)), (sorted (a :: gv2))
(sorted (b :: l2)), (sorted (b :: gv2)), (sorted (a0 :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: gv2)), (sorted (merge l1 l1)), (sorted (merge l1 l2)), (sorted (merge l1 gv2)), (sorted (merge l2 l1)), (sorted (merge l2 l2))
(sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ l1)), (sorted (l2 ++ l2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1))
(sorted (gv2 ++ gv2)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: l2)), (Permutation l1 (a :: gv2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: l2)), (Permutation l1 (b :: gv2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: l2))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ l1))
(Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (gv2 ++ l2)), (Permutation l1 (gv2 ++ gv2)), (Permutation l1 []), (Permutation l2 (a :: l1)), (Permutation l2 (a :: l2))
(Permutation l2 (b :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 l1))
(Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ gv2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv2))
(Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation l2 []), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2)), (Permutation gv2 (a0 :: l1))
(Permutation gv2 (a0 :: gv2)), (Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (l1 ++ l2)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a :: l1) l1)
(Permutation (a :: l1) gv2), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: gv2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 l1))
(Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ gv2))
(Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (gv2 ++ l2)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l1) []), (Permutation (a :: l2) l1), (Permutation (a :: l2) l2), (Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: l1))
(Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2)), (Permutation (a :: l2) (merge gv2 gv2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ gv2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ gv2))
(Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: l2) []), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2)), (Permutation (a :: gv2) (b :: l1)), (Permutation (a :: gv2) (b :: l2))
(Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2)), (Permutation (a :: gv2) (merge l2 gv2)), (Permutation (a :: gv2) (merge gv2 l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (gv2 ++ l2)), (Permutation (a :: gv2) (gv2 ++ gv2))
(Permutation (b :: l1) l1), (Permutation (b :: l1) l2), (Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: l2))
(Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2)), (Permutation (b :: l1) (merge gv2 gv2)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) (l1 ++ gv2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ gv2)), (Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l1) []), (Permutation (b :: l2) l1), (Permutation (b :: l2) l2)
(Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv2)), (Permutation (b :: l2) (merge gv2 l1)), (Permutation (b :: l2) (merge gv2 l2)), (Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ l1))
(Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: l2) []), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2), (Permutation (b :: gv2) gv2), (Permutation (b :: gv2) (a :: l1)), (Permutation (b :: gv2) (a :: l2))
(Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2)), (Permutation (b :: gv2) (merge l1 gv2)), (Permutation (b :: gv2) (merge l2 l1)), (Permutation (b :: gv2) (merge l2 l2))
(Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1)), (Permutation (b :: gv2) (l2 ++ l2)), (Permutation (b :: gv2) (l2 ++ gv2)), (Permutation (b :: gv2) (gv2 ++ l1))
(Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: l2))
(Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 gv2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 gv2)), (Permutation (a0 :: l1) (merge gv2 l1)), (Permutation (a0 :: l1) (merge gv2 l2))
(Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l1) [])
(Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: gv2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv2)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv2))
(Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 gv2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2)), (Permutation (a0 :: l2) (gv2 ++ gv2)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv2) l1), (Permutation (a0 :: gv2) l2), (Permutation (a0 :: gv2) gv2)
(Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1)), (Permutation (a0 :: gv2) (a0 :: l2)), (Permutation (a0 :: gv2) (merge l1 l1)), (Permutation (a0 :: gv2) (merge l1 l2)), (Permutation (a0 :: gv2) (merge l1 gv2))
(Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1)), (Permutation (a0 :: gv2) (l1 ++ l2)), (Permutation (a0 :: gv2) (l1 ++ gv2)), (Permutation (a0 :: gv2) (l2 ++ l1)), (Permutation (a0 :: gv2) (l2 ++ l2))
(Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: gv2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: gv2)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 gv2))
(Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2))
(Permutation (merge l1 l1) []), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) gv2), (Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (a :: l2)), (Permutation (merge l1 l2) (a :: gv2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: gv2))
(Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2))
(Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ gv2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ gv2)), (Permutation (merge l1 l2) (gv2 ++ l1)), (Permutation (merge l1 l2) (gv2 ++ l2)), (Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 l2) []), (Permutation (merge l1 gv2) l1)
(Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1)), (Permutation (merge l1 gv2) (b :: l2)), (Permutation (merge l1 gv2) (b :: gv2)), (Permutation (merge l1 gv2) (a0 :: l1)), (Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2))
(Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge gv2 l2)), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2))
(Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) []), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) gv2), (Permutation (merge l2 l1) (a :: l1))
(Permutation (merge l2 l1) (a :: gv2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: l2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 gv2))
(Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ gv2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ gv2))
(Permutation (merge l2 l1) (gv2 ++ l2)), (Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l1) []), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: l1))
(Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1))
(Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2))
(Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1)), (Permutation (merge l2 gv2) (a :: l2)), (Permutation (merge l2 gv2) (a :: gv2)), (Permutation (merge l2 gv2) (b :: l1)), (Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1))
(Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2)), (Permutation (merge l2 gv2) (merge l2 l1)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (merge gv2 l1)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1))
(Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l1)), (Permutation (merge l2 gv2) (gv2 ++ l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2)
(Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1)), (Permutation (merge gv2 l1) (b :: l2)), (Permutation (merge gv2 l1) (b :: gv2)), (Permutation (merge gv2 l1) (a0 :: l1)), (Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1))
(Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2)), (Permutation (merge gv2 l1) (merge gv2 l2)), (Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1))
(Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) []), (Permutation (merge gv2 l2) l1), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2))
(Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1)), (Permutation (merge gv2 l2) (a0 :: l2)), (Permutation (merge gv2 l2) (a0 :: gv2)), (Permutation (merge gv2 l2) (merge l1 l1)), (Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1))
(Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1)), (Permutation (merge gv2 l2) (l1 ++ l2)), (Permutation (merge gv2 l2) (l1 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l1)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1))
(Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (a :: l2)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2))
(Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (merge l1 l2)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l2 l1)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1))
(Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) [])
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: l2))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 gv2)), (Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge gv2 l2)), (Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ l2))
(Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) gv2)
(Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: gv2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: gv2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: gv2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 l2))
(Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l2))
(Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2)), (Permutation (l1 ++ l2) (gv2 ++ gv2)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) l2), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2))
(Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1)), (Permutation (l1 ++ gv2) (a0 :: l2)), (Permutation (l1 ++ gv2) (a0 :: gv2)), (Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2))
(Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ l1)), (Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2))
(Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: gv2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: gv2))
(Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: gv2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 gv2)), (Permutation (l2 ++ l1) (merge l2 l1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2))
(Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2)), (Permutation (l2 ++ l1) (gv2 ++ gv2)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ l2) l1)
(Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: gv2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv2))
(Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l1)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1))
(Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1)), (Permutation (l2 ++ gv2) (b :: l2)), (Permutation (l2 ++ gv2) (b :: gv2)), (Permutation (l2 ++ gv2) (a0 :: l1)), (Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2))
(Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l1)), (Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2))
(Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) []), (Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) l2), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1))
(Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1)), (Permutation (gv2 ++ l1) (a0 :: l2)), (Permutation (gv2 ++ l1) (a0 :: gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2))
(Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) (l1 ++ l2)), (Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) (a :: l1)), (Permutation (gv2 ++ l2) (a :: l2)), (Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1))
(Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1)), (Permutation (gv2 ++ l2) (merge l1 l2)), (Permutation (gv2 ++ l2) (merge l1 gv2)), (Permutation (gv2 ++ l2) (merge l2 l1)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2))
(Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l1)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2)
(Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (b :: l1)), (Permutation (gv2 ++ gv2) (b :: l2)), (Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1))
(Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2))
(Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation [] l1), (Permutation [] l2), (Permutation [] gv2), (Permutation [] (a :: l1)), (Permutation [] (a :: l2))
(Permutation [] (b :: l1)), (Permutation [] (b :: l2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 l1))
(Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ gv2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ gv2))
(Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: l1)), (In a (a :: l2)), (In a (a :: gv2)), (In a (b :: l1)), (In a (b :: l2)), (In a (b :: gv2)), (In a (a0 :: l1)), (In a (a0 :: l2))
(In a (merge l1 l1)), (In a (merge l1 l2)), (In a (merge l1 gv2)), (In a (merge l2 l1)), (In a (merge l2 l2)), (In a (merge l2 gv2)), (In a (merge gv2 l1)), (In a (merge gv2 l2)), (In a (merge gv2 gv2)), (In a (l1 ++ l1))
(In a (l1 ++ gv2)), (In a (l2 ++ l1)), (In a (l2 ++ l2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: l1)), (In b (a :: l2)), (In b (a :: gv2))
(In b (b :: l2)), (In b (b :: gv2)), (In b (a0 :: l1)), (In b (a0 :: l2)), (In b (a0 :: gv2)), (In b (merge l1 l1)), (In b (merge l1 l2)), (In b (merge l1 gv2)), (In b (merge l2 l1)), (In b (merge l2 l2))
(In b (merge gv2 l1)), (In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ gv2)), (In b (l2 ++ l1)), (In b (l2 ++ l2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1))
(In b (gv2 ++ gv2)), (In a0 (a :: l1)), (In a0 (a :: l2)), (In a0 (a :: gv2)), (In a0 (b :: l1)), (In a0 (b :: l2)), (In a0 (b :: gv2)), (In a0 (a0 :: l1)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv2))
(In a0 (merge l1 l2)), (In a0 (merge l1 gv2)), (In a0 (merge l2 l1)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ l2))
(In a0 (l2 ++ l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2)), (In a0 (gv2 ++ gv2)), (In (length l1) l1), (In (length l1) l2), (In (length l1) gv2), (In (length l1) (a :: l1))
(In (length l1) (a :: gv2)), (In (length l1) (b :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: gv2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 gv2))
(In (length l1) (merge l2 l2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ l2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (gv2 ++ l2)), (In (length l1) (gv2 ++ gv2)), (In (length l2) l1), (In (length l2) l2), (In (length l2) gv2), (In (length l2) (a :: l1)), (In (length l2) (a :: l2)), (In (length l2) (a :: gv2)), (In (length l2) (b :: l1))
(In (length l2) (b :: gv2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv2))
(In (length l2) (merge gv2 l2)), (In (length l2) (merge gv2 gv2)), (In (length l2) (l1 ++ l1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ gv2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2))
(In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1)), (In (length gv2) (a :: l2)), (In (length gv2) (a :: gv2)), (In (length gv2) (b :: l1)), (In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1))
(In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l2 l1)), (In (length gv2) (merge l2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2))
(In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (gv2 ++ l1)), (In (length gv2) (gv2 ++ l2)), (In (length gv2) (gv2 ++ gv2)), (a < length l1), (a < length l2)
(b < length l1), (b < length l2), (b < length gv2), (a0 < length l1), (a0 < length l2), (a0 < length gv2), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l2 < length gv2), (length gv2 < a), (length gv2 < b), (length gv2 < a0), (length gv2 < length l1), (length gv2 < length l2)
(a <= length l2), (a <= length gv2), (b <= length l1), (b <= length l2), (b <= length gv2), (a0 <= length l1), (a0 <= length l2), (a0 <= length gv2), (length l1 <= a), (length l1 <= b)
(length l1 <= length l2), (length l1 <= length gv2), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0)
(length gv2 <= length l2), (~ a <=* l1), (~ a <=* l2), (~ a <=* gv2), (~ b <=* l1), (~ b <=* l2), (~ b <=* gv2), (~ a0 <=* l1), (~ a0 <=* l2), (~ a0 <=* gv2)
(~ sorted l2), (~ sorted gv2), (~ Permutation l1 l1), (~ Permutation l1 l2), (~ Permutation l1 gv2), (~ Permutation l2 l1), (~ Permutation l2 l2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2)
(~ In a l1), (~ In a l2), (~ In a gv2), (~ In b l1), (~ In b l2), (~ In b gv2), (~ In a0 l1), (~ In a0 l2), (~ In a0 gv2), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l1 <> l1), (l1 <> l2), (l1 <> gv2), (l2 <> l1), (l2 <> l2)
(gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l1), (None = Some l2), (None = Some gv2), (a :: l1 = l1), (a :: l1 = l2), (a :: l1 = gv2), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 gv2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 gv2), (a :: l1 = merge gv2 l1), (a :: l1 = merge gv2 l2), (a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ l2)
(a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l1 = []), (a :: l2 = l1), (a :: l2 = l2), (a :: l2 = gv2), (a :: l2 = merge l1 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 gv2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 gv2), (a :: l2 = merge gv2 l1), (a :: l2 = merge gv2 l2), (a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ l2)
(a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: l2 = []), (a :: gv2 = l1), (a :: gv2 = l2), (a :: gv2 = gv2), (a :: gv2 = merge l1 l1), (a :: gv2 = merge l1 l2), (a :: gv2 = merge l1 gv2)
(a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = l1 ++ l2), (a :: gv2 = l1 ++ gv2), (a :: gv2 = l2 ++ l1), (a :: gv2 = l2 ++ l2)
(a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = l1), (b :: l1 = l2), (b :: l1 = gv2), (b :: l1 = merge l1 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 gv2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 gv2), (b :: l1 = merge gv2 l1), (b :: l1 = merge gv2 l2), (b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ l2)
(b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l1 = []), (b :: l2 = l1), (b :: l2 = l2), (b :: l2 = gv2), (b :: l2 = merge l1 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 gv2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 gv2), (b :: l2 = merge gv2 l1), (b :: l2 = merge gv2 l2), (b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ l2)
(b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: l2 = []), (b :: gv2 = l1), (b :: gv2 = l2), (b :: gv2 = gv2), (b :: gv2 = merge l1 l1), (b :: gv2 = merge l1 l2), (b :: gv2 = merge l1 gv2)
(b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1), (b :: gv2 = l1 ++ l2), (b :: gv2 = l1 ++ gv2), (b :: gv2 = l2 ++ l1), (b :: gv2 = l2 ++ l2)
(b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = l1), (a0 :: l1 = l2), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 gv2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 gv2), (a0 :: l1 = merge gv2 l1), (a0 :: l1 = merge gv2 l2), (a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ l2)
(a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l1 = []), (a0 :: l2 = l1), (a0 :: l2 = l2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 gv2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 gv2), (a0 :: l2 = merge gv2 l1), (a0 :: l2 = merge gv2 l2), (a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ l2)
(a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: l2 = []), (a0 :: gv2 = l1), (a0 :: gv2 = l2), (a0 :: gv2 = gv2), (a0 :: gv2 = merge l1 l1), (a0 :: gv2 = merge l1 l2), (a0 :: gv2 = merge l1 gv2)
(a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1), (a0 :: gv2 = l1 ++ l2), (a0 :: gv2 = l1 ++ gv2), (a0 :: gv2 = l2 ++ l1), (a0 :: gv2 = l2 ++ l2)
(a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = l1), (merge l1 l1 = l2), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ gv2)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ gv2), (merge l1 l1 = gv2 ++ l1), (merge l1 l1 = gv2 ++ l2), (merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = l1), (merge l1 l2 = l2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ l2)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1), (merge l1 gv2 = l2), (merge l1 gv2 = gv2), (merge l1 gv2 = l1 ++ l1)
(merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2), (merge l2 l1 = l1), (merge l2 l1 = l2), (merge l2 l1 = gv2)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ gv2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ gv2), (merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = l1), (merge l2 l2 = l2)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2), (merge l2 l2 = gv2 ++ gv2), (merge l2 gv2 = l1)
(merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = gv2 ++ gv2)
(merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = gv2 ++ l2)
(merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2), (merge gv2 l2 = l2 ++ gv2), (merge gv2 l2 = gv2 ++ l1)
(merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1), (merge gv2 gv2 = l2 ++ l2), (merge gv2 gv2 = l2 ++ gv2)
(merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = gv2), (l1 ++ l2 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2)
(l2 ++ l1 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = gv2), (l2 ++ l2 = l1), (l2 ++ l2 = l2), (l2 ++ l2 = gv2), (l2 ++ gv2 = l1), (l2 ++ gv2 = l2), (l2 ++ gv2 = gv2), (gv2 ++ l1 = l1)
(gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ gv2 = l2), (gv2 ++ gv2 = gv2), ([] = l1), ([] = l2), ([] = gv2)
([] = merge l1 l2), ([] = merge l1 gv2), ([] = merge l2 l1), ([] = merge l2 l2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ l1), ([] = l1 ++ l2)
([] = l2 ++ l1), ([] = l2 ++ l2), ([] = l2 ++ gv2), ([] = gv2 ++ l1), ([] = gv2 ++ l2), ([] = gv2 ++ gv2), (None = Some a), (None = Some b), (None = Some a0), ((l1, l1) = split l1)
((l1, l1) = split gv2), ((l1, l2) = split l1), ((l1, l2) = split l2), ((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split l1), ((l2, l1) = split l2), ((l2, l1) = split gv2)
((l2, l2) = split l2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2), ((l2, gv2) = split gv2), ((gv2, l1) = split l1), ((gv2, l1) = split l2), ((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2)
((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length l1 = a), (length l1 = b), (length l1 = a0), (length l2 = a), (length l2 = b), (length l2 = a0), (length gv2 = a)
(length gv2 = a0)

Label: 1 (2)
(a <=* l1), (a <=* l2), (a <=* gv2), (b <=* l1), (b <=* l2), (b <=* gv2), (a0 <=* l1), (a0 <=* l2), (a0 <=* gv2), (sorted l1)
(sorted gv2), (Permutation l1 l1), (Permutation l1 l2), (Permutation l1 gv2), (Permutation l2 l1), (Permutation l2 l2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2), (Permutation gv2 gv2)
(In a l2), (In a gv2), (In b l1), (In b l2), (In b gv2), (In a0 l1), (In a0 l2), (In a0 gv2), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l1 = l1), (l1 = l2), (l1 = gv2), (l2 = l1), (l2 = l2), (l2 = gv2)
(gv2 = l2), (gv2 = gv2), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l1), (false = sorted_bool l2), (false = sorted_bool gv2), (true = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool gv2), (a <=* a :: l1), (a <=* a :: l2), (a <=* a :: gv2), (a <=* b :: l1)
(a <=* b :: gv2), (a <=* a0 :: l1), (a <=* a0 :: l2), (a <=* a0 :: gv2), (a <=* merge l1 l1), (a <=* merge l1 l2), (a <=* merge l1 gv2), (a <=* merge l2 l1), (a <=* merge l2 l2), (a <=* merge l2 gv2)
(a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ l1), (a <=* l1 ++ l2), (a <=* l1 ++ gv2), (a <=* l2 ++ l1), (a <=* l2 ++ l2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1), (a <=* gv2 ++ l2)
(a <=* []), (b <=* a :: l1), (b <=* a :: l2), (b <=* a :: gv2), (b <=* b :: l1), (b <=* b :: l2), (b <=* b :: gv2), (b <=* a0 :: l1), (b <=* a0 :: l2), (b <=* a0 :: gv2)
(b <=* merge l1 l2), (b <=* merge l1 gv2), (b <=* merge l2 l1), (b <=* merge l2 l2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ l1), (b <=* l1 ++ l2)
(b <=* l2 ++ l1), (b <=* l2 ++ l2), (b <=* l2 ++ gv2), (b <=* gv2 ++ l1), (b <=* gv2 ++ l2), (b <=* gv2 ++ gv2), (b <=* []), (a0 <=* a :: l1), (a0 <=* a :: l2), (a0 <=* a :: gv2)
(a0 <=* b :: l2), (a0 <=* b :: gv2), (a0 <=* a0 :: l1), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 l1), (a0 <=* merge l2 l2)
(a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2), (a0 <=* merge gv2 gv2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ gv2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv2), (a0 <=* gv2 ++ l1)
(a0 <=* gv2 ++ gv2), (a0 <=* []), (length l1 <=* l1), (length l1 <=* l2), (length l1 <=* gv2), (length l1 <=* a :: l1), (length l1 <=* a :: l2), (length l1 <=* a :: gv2), (length l1 <=* b :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l1), (length l1 <=* a0 :: l2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 gv2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 gv2), (length l1 <=* merge gv2 l1)
(length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2)
(length l2 <=* l1), (length l2 <=* l2), (length l2 <=* gv2), (length l2 <=* a :: l1), (length l2 <=* a :: l2), (length l2 <=* a :: gv2), (length l2 <=* b :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: gv2), (length l2 <=* a0 :: l1)
(length l2 <=* a0 :: gv2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 gv2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2)
(length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2), (length l2 <=* gv2 ++ gv2), (length l2 <=* []), (length gv2 <=* l1)
(length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1), (length gv2 <=* a0 :: l2), (length gv2 <=* a0 :: gv2)
(length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l1 ++ l1), (length gv2 <=* l1 ++ l2)
(length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: l1)), (sorted (a :: l2)), (sorted (a :: gv2))
(sorted (b :: l2)), (sorted (b :: gv2)), (sorted (a0 :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: gv2)), (sorted (merge l1 l1)), (sorted (merge l1 l2)), (sorted (merge l1 gv2)), (sorted (merge l2 l1)), (sorted (merge l2 l2))
(sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ l1)), (sorted (l2 ++ l2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1))
(sorted (gv2 ++ gv2)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: l2)), (Permutation l1 (a :: gv2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: l2)), (Permutation l1 (b :: gv2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: l2))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ l1))
(Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (gv2 ++ l2)), (Permutation l1 (gv2 ++ gv2)), (Permutation l1 []), (Permutation l2 (a :: l1)), (Permutation l2 (a :: l2))
(Permutation l2 (b :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 l1))
(Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ gv2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv2))
(Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation l2 []), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2)), (Permutation gv2 (a0 :: l1))
(Permutation gv2 (a0 :: gv2)), (Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (l1 ++ l2)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a :: l1) l1)
(Permutation (a :: l1) gv2), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: gv2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 l1))
(Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ gv2))
(Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (gv2 ++ l2)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l1) []), (Permutation (a :: l2) l1), (Permutation (a :: l2) l2), (Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: l1))
(Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2)), (Permutation (a :: l2) (merge gv2 gv2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ gv2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ gv2))
(Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: l2) []), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2)), (Permutation (a :: gv2) (b :: l1)), (Permutation (a :: gv2) (b :: l2))
(Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2)), (Permutation (a :: gv2) (merge l2 gv2)), (Permutation (a :: gv2) (merge gv2 l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (gv2 ++ l2)), (Permutation (a :: gv2) (gv2 ++ gv2))
(Permutation (b :: l1) l1), (Permutation (b :: l1) l2), (Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: l2))
(Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2)), (Permutation (b :: l1) (merge gv2 gv2)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) (l1 ++ gv2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ gv2)), (Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l1) []), (Permutation (b :: l2) l1), (Permutation (b :: l2) l2)
(Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv2)), (Permutation (b :: l2) (merge gv2 l1)), (Permutation (b :: l2) (merge gv2 l2)), (Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ l1))
(Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: l2) []), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2), (Permutation (b :: gv2) gv2), (Permutation (b :: gv2) (a :: l1)), (Permutation (b :: gv2) (a :: l2))
(Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2)), (Permutation (b :: gv2) (merge l1 gv2)), (Permutation (b :: gv2) (merge l2 l1)), (Permutation (b :: gv2) (merge l2 l2))
(Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1)), (Permutation (b :: gv2) (l2 ++ l2)), (Permutation (b :: gv2) (l2 ++ gv2)), (Permutation (b :: gv2) (gv2 ++ l1))
(Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: l2))
(Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 gv2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 gv2)), (Permutation (a0 :: l1) (merge gv2 l1)), (Permutation (a0 :: l1) (merge gv2 l2))
(Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l1) [])
(Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: gv2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv2)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv2))
(Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 gv2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2)), (Permutation (a0 :: l2) (gv2 ++ gv2)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv2) l1), (Permutation (a0 :: gv2) l2), (Permutation (a0 :: gv2) gv2)
(Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1)), (Permutation (a0 :: gv2) (a0 :: l2)), (Permutation (a0 :: gv2) (merge l1 l1)), (Permutation (a0 :: gv2) (merge l1 l2)), (Permutation (a0 :: gv2) (merge l1 gv2))
(Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1)), (Permutation (a0 :: gv2) (l1 ++ l2)), (Permutation (a0 :: gv2) (l1 ++ gv2)), (Permutation (a0 :: gv2) (l2 ++ l1)), (Permutation (a0 :: gv2) (l2 ++ l2))
(Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: gv2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: gv2)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 gv2))
(Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2))
(Permutation (merge l1 l1) []), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) gv2), (Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (a :: l2)), (Permutation (merge l1 l2) (a :: gv2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: gv2))
(Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2))
(Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ gv2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ gv2)), (Permutation (merge l1 l2) (gv2 ++ l1)), (Permutation (merge l1 l2) (gv2 ++ l2)), (Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 l2) []), (Permutation (merge l1 gv2) l1)
(Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1)), (Permutation (merge l1 gv2) (b :: l2)), (Permutation (merge l1 gv2) (b :: gv2)), (Permutation (merge l1 gv2) (a0 :: l1)), (Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2))
(Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge gv2 l2)), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2))
(Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) []), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) gv2), (Permutation (merge l2 l1) (a :: l1))
(Permutation (merge l2 l1) (a :: gv2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: l2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 gv2))
(Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ gv2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ gv2))
(Permutation (merge l2 l1) (gv2 ++ l2)), (Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l1) []), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: l1))
(Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1))
(Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2))
(Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1)), (Permutation (merge l2 gv2) (a :: l2)), (Permutation (merge l2 gv2) (a :: gv2)), (Permutation (merge l2 gv2) (b :: l1)), (Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1))
(Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2)), (Permutation (merge l2 gv2) (merge l2 l1)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (merge gv2 l1)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1))
(Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l1)), (Permutation (merge l2 gv2) (gv2 ++ l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2)
(Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1)), (Permutation (merge gv2 l1) (b :: l2)), (Permutation (merge gv2 l1) (b :: gv2)), (Permutation (merge gv2 l1) (a0 :: l1)), (Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1))
(Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2)), (Permutation (merge gv2 l1) (merge gv2 l2)), (Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1))
(Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) []), (Permutation (merge gv2 l2) l1), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2))
(Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1)), (Permutation (merge gv2 l2) (a0 :: l2)), (Permutation (merge gv2 l2) (a0 :: gv2)), (Permutation (merge gv2 l2) (merge l1 l1)), (Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1))
(Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1)), (Permutation (merge gv2 l2) (l1 ++ l2)), (Permutation (merge gv2 l2) (l1 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l1)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1))
(Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (a :: l2)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2))
(Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (merge l1 l2)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l2 l1)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1))
(Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) [])
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: l2))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 gv2)), (Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge gv2 l2)), (Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ l2))
(Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) gv2)
(Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: gv2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: gv2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: gv2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 l2))
(Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l2))
(Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2)), (Permutation (l1 ++ l2) (gv2 ++ gv2)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) l2), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2))
(Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1)), (Permutation (l1 ++ gv2) (a0 :: l2)), (Permutation (l1 ++ gv2) (a0 :: gv2)), (Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2))
(Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ l1)), (Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2))
(Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: gv2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: gv2))
(Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: gv2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 gv2)), (Permutation (l2 ++ l1) (merge l2 l1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2))
(Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2)), (Permutation (l2 ++ l1) (gv2 ++ gv2)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ l2) l1)
(Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: gv2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv2))
(Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l1)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1))
(Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1)), (Permutation (l2 ++ gv2) (b :: l2)), (Permutation (l2 ++ gv2) (b :: gv2)), (Permutation (l2 ++ gv2) (a0 :: l1)), (Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2))
(Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l1)), (Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2))
(Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) []), (Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) l2), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1))
(Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1)), (Permutation (gv2 ++ l1) (a0 :: l2)), (Permutation (gv2 ++ l1) (a0 :: gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2))
(Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) (l1 ++ l2)), (Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) (a :: l1)), (Permutation (gv2 ++ l2) (a :: l2)), (Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1))
(Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1)), (Permutation (gv2 ++ l2) (merge l1 l2)), (Permutation (gv2 ++ l2) (merge l1 gv2)), (Permutation (gv2 ++ l2) (merge l2 l1)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2))
(Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l1)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2)
(Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (b :: l1)), (Permutation (gv2 ++ gv2) (b :: l2)), (Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1))
(Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2))
(Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation [] l1), (Permutation [] l2), (Permutation [] gv2), (Permutation [] (a :: l1)), (Permutation [] (a :: l2))
(Permutation [] (b :: l1)), (Permutation [] (b :: l2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 l1))
(Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ gv2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ gv2))
(Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: l1)), (In a (a :: l2)), (In a (a :: gv2)), (In a (b :: l1)), (In a (b :: l2)), (In a (b :: gv2)), (In a (a0 :: l1)), (In a (a0 :: l2))
(In a (merge l1 l1)), (In a (merge l1 l2)), (In a (merge l1 gv2)), (In a (merge l2 l1)), (In a (merge l2 l2)), (In a (merge l2 gv2)), (In a (merge gv2 l1)), (In a (merge gv2 l2)), (In a (merge gv2 gv2)), (In a (l1 ++ l1))
(In a (l1 ++ gv2)), (In a (l2 ++ l1)), (In a (l2 ++ l2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: l1)), (In b (a :: l2)), (In b (a :: gv2))
(In b (b :: l2)), (In b (b :: gv2)), (In b (a0 :: l1)), (In b (a0 :: l2)), (In b (a0 :: gv2)), (In b (merge l1 l1)), (In b (merge l1 l2)), (In b (merge l1 gv2)), (In b (merge l2 l1)), (In b (merge l2 l2))
(In b (merge gv2 l1)), (In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ gv2)), (In b (l2 ++ l1)), (In b (l2 ++ l2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1))
(In b (gv2 ++ gv2)), (In a0 (a :: l1)), (In a0 (a :: l2)), (In a0 (a :: gv2)), (In a0 (b :: l1)), (In a0 (b :: l2)), (In a0 (b :: gv2)), (In a0 (a0 :: l1)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv2))
(In a0 (merge l1 l2)), (In a0 (merge l1 gv2)), (In a0 (merge l2 l1)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ l2))
(In a0 (l2 ++ l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2)), (In a0 (gv2 ++ gv2)), (In (length l1) l1), (In (length l1) l2), (In (length l1) gv2), (In (length l1) (a :: l1))
(In (length l1) (a :: gv2)), (In (length l1) (b :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: gv2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 gv2))
(In (length l1) (merge l2 l2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ l2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (gv2 ++ l2)), (In (length l1) (gv2 ++ gv2)), (In (length l2) l1), (In (length l2) l2), (In (length l2) gv2), (In (length l2) (a :: l1)), (In (length l2) (a :: l2)), (In (length l2) (a :: gv2)), (In (length l2) (b :: l1))
(In (length l2) (b :: gv2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv2))
(In (length l2) (merge gv2 l2)), (In (length l2) (merge gv2 gv2)), (In (length l2) (l1 ++ l1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ gv2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2))
(In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1)), (In (length gv2) (a :: l2)), (In (length gv2) (a :: gv2)), (In (length gv2) (b :: l1)), (In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1))
(In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l2 l1)), (In (length gv2) (merge l2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2))
(In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (gv2 ++ l1)), (In (length gv2) (gv2 ++ l2)), (In (length gv2) (gv2 ++ gv2)), (a < length l1), (a < length l2)
(b < length l1), (b < length l2), (b < length gv2), (a0 < length l1), (a0 < length l2), (a0 < length gv2), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l2 < length gv2), (length gv2 < a), (length gv2 < b), (length gv2 < a0), (length gv2 < length l1), (length gv2 < length l2)
(a <= length l2), (a <= length gv2), (b <= length l1), (b <= length l2), (b <= length gv2), (a0 <= length l1), (a0 <= length l2), (a0 <= length gv2), (length l1 <= a), (length l1 <= b)
(length l1 <= length l2), (length l1 <= length gv2), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0)
(length gv2 <= length l2), (~ a <=* l1), (~ a <=* l2), (~ a <=* gv2), (~ b <=* l1), (~ b <=* l2), (~ b <=* gv2), (~ a0 <=* l1), (~ a0 <=* l2), (~ a0 <=* gv2)
(~ sorted l2), (~ sorted gv2), (~ Permutation l1 l1), (~ Permutation l1 l2), (~ Permutation l1 gv2), (~ Permutation l2 l1), (~ Permutation l2 l2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2)
(~ In a l1), (~ In a l2), (~ In a gv2), (~ In b l1), (~ In b l2), (~ In b gv2), (~ In a0 l1), (~ In a0 l2), (~ In a0 gv2), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l1 <> l1), (l1 <> l2), (l1 <> gv2), (l2 <> l1), (l2 <> l2)
(gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l1), (None = Some l2), (None = Some gv2), (a :: l1 = l1), (a :: l1 = l2), (a :: l1 = gv2), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 gv2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 gv2), (a :: l1 = merge gv2 l1), (a :: l1 = merge gv2 l2), (a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ l2)
(a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l1 = []), (a :: l2 = l1), (a :: l2 = l2), (a :: l2 = gv2), (a :: l2 = merge l1 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 gv2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 gv2), (a :: l2 = merge gv2 l1), (a :: l2 = merge gv2 l2), (a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ l2)
(a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: l2 = []), (a :: gv2 = l1), (a :: gv2 = l2), (a :: gv2 = gv2), (a :: gv2 = merge l1 l1), (a :: gv2 = merge l1 l2), (a :: gv2 = merge l1 gv2)
(a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = l1 ++ l2), (a :: gv2 = l1 ++ gv2), (a :: gv2 = l2 ++ l1), (a :: gv2 = l2 ++ l2)
(a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = l1), (b :: l1 = l2), (b :: l1 = gv2), (b :: l1 = merge l1 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 gv2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 gv2), (b :: l1 = merge gv2 l1), (b :: l1 = merge gv2 l2), (b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ l2)
(b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l1 = []), (b :: l2 = l1), (b :: l2 = l2), (b :: l2 = gv2), (b :: l2 = merge l1 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 gv2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 gv2), (b :: l2 = merge gv2 l1), (b :: l2 = merge gv2 l2), (b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ l2)
(b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: l2 = []), (b :: gv2 = l1), (b :: gv2 = l2), (b :: gv2 = gv2), (b :: gv2 = merge l1 l1), (b :: gv2 = merge l1 l2), (b :: gv2 = merge l1 gv2)
(b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1), (b :: gv2 = l1 ++ l2), (b :: gv2 = l1 ++ gv2), (b :: gv2 = l2 ++ l1), (b :: gv2 = l2 ++ l2)
(b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = l1), (a0 :: l1 = l2), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 gv2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 gv2), (a0 :: l1 = merge gv2 l1), (a0 :: l1 = merge gv2 l2), (a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ l2)
(a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l1 = []), (a0 :: l2 = l1), (a0 :: l2 = l2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 gv2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 gv2), (a0 :: l2 = merge gv2 l1), (a0 :: l2 = merge gv2 l2), (a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ l2)
(a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: l2 = []), (a0 :: gv2 = l1), (a0 :: gv2 = l2), (a0 :: gv2 = gv2), (a0 :: gv2 = merge l1 l1), (a0 :: gv2 = merge l1 l2), (a0 :: gv2 = merge l1 gv2)
(a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1), (a0 :: gv2 = l1 ++ l2), (a0 :: gv2 = l1 ++ gv2), (a0 :: gv2 = l2 ++ l1), (a0 :: gv2 = l2 ++ l2)
(a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = l1), (merge l1 l1 = l2), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ gv2)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ gv2), (merge l1 l1 = gv2 ++ l1), (merge l1 l1 = gv2 ++ l2), (merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = l1), (merge l1 l2 = l2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ l2)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1), (merge l1 gv2 = l2), (merge l1 gv2 = gv2), (merge l1 gv2 = l1 ++ l1)
(merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2), (merge l2 l1 = l1), (merge l2 l1 = l2), (merge l2 l1 = gv2)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ gv2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ gv2), (merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = l1), (merge l2 l2 = l2)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2), (merge l2 l2 = gv2 ++ gv2), (merge l2 gv2 = l1)
(merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = gv2 ++ gv2)
(merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = gv2 ++ l2)
(merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2), (merge gv2 l2 = l2 ++ gv2), (merge gv2 l2 = gv2 ++ l1)
(merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1), (merge gv2 gv2 = l2 ++ l2), (merge gv2 gv2 = l2 ++ gv2)
(merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = gv2), (l1 ++ l2 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2)
(l2 ++ l1 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = gv2), (l2 ++ l2 = l1), (l2 ++ l2 = l2), (l2 ++ l2 = gv2), (l2 ++ gv2 = l1), (l2 ++ gv2 = l2), (l2 ++ gv2 = gv2), (gv2 ++ l1 = l1)
(gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ gv2 = l2), (gv2 ++ gv2 = gv2), ([] = l1), ([] = l2), ([] = gv2)
([] = merge l1 l2), ([] = merge l1 gv2), ([] = merge l2 l1), ([] = merge l2 l2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ l1), ([] = l1 ++ l2)
([] = l2 ++ l1), ([] = l2 ++ l2), ([] = l2 ++ gv2), ([] = gv2 ++ l1), ([] = gv2 ++ l2), ([] = gv2 ++ gv2), (None = Some a), (None = Some b), (None = Some a0), ((l1, l1) = split l1)
((l1, l1) = split gv2), ((l1, l2) = split l1), ((l1, l2) = split l2), ((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split l1), ((l2, l1) = split l2), ((l2, l1) = split gv2)
((l2, l2) = split l2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2), ((l2, gv2) = split gv2), ((gv2, l1) = split l1), ((gv2, l1) = split l2), ((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2)
((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length l1 = a), (length l1 = b), (length l1 = a0), (length l2 = a), (length l2 = b), (length l2 = a0), (length gv2 = a)
(length gv2 = a0)

Label: 2 (3)
(b <=* l2), (b <=* gv3), (a0 <=* l2), (a0 <=* gv3), (sorted l2), (sorted gv3), (Permutation l2 l2), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3)
(In b gv3), (In a0 l2), (In a0 gv3), (b < b), (b < a0), (a0 < b), (a0 < a0), (b <= b), (b <= a0), (a0 <= b)
(l2 = l2), (l2 = gv3), (gv3 = l2), (gv3 = gv3), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool gv3)
(true = sorted_bool gv3), (b <=* b :: l2), (b <=* b :: gv3), (b <=* a0 :: l2), (b <=* a0 :: gv3), (b <=* merge l2 l2), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ l2)
(b <=* gv3 ++ l2), (b <=* gv3 ++ gv3), (b <=* []), (a0 <=* b :: l2), (a0 <=* b :: gv3), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv3), (a0 <=* merge l2 l2), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2)
(a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (a0 <=* []), (length l2 <=* l2), (length l2 <=* gv3), (length l2 <=* b :: l2), (length l2 <=* b :: gv3), (length l2 <=* a0 :: l2)
(length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length l2 <=* []), (length gv3 <=* l2)
(length gv3 <=* b :: l2), (length gv3 <=* b :: gv3), (length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3)
(length gv3 <=* gv3 ++ gv3), (length gv3 <=* []), (sorted (b :: l2)), (sorted (b :: gv3)), (sorted (a0 :: l2)), (sorted (a0 :: gv3)), (sorted (merge l2 l2)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3))
(sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv3)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv3))
(Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation l2 []), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3))
(Permutation gv3 (merge l2 gv3)), (Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) l2), (Permutation (b :: l2) gv3)
(Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv3)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv3)), (Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3))
(Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3)), (Permutation (b :: gv3) (merge l2 l2)), (Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2))
(Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv3)), (Permutation (a0 :: l2) (a0 :: gv3)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv3))
(Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: gv3)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2))
(Permutation (merge l2 l2) []), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2)), (Permutation (merge l2 gv3) (b :: gv3)), (Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3))
(Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) []), (Permutation (merge gv3 l2) l2), (Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3))
(Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3)), (Permutation (merge gv3 l2) (gv3 ++ l2)), (Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2))
(Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3)), (Permutation (merge gv3 gv3) (merge gv3 l2)), (Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) [])
(Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2)), (Permutation (l2 ++ l2) (merge gv3 gv3)), (Permutation (l2 ++ l2) (l2 ++ gv3))
(Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2)), (Permutation (l2 ++ gv3) (merge l2 gv3))
(Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3)), (Permutation (gv3 ++ l2) (a0 :: l2))
(Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l2))
(Permutation [] l2), (Permutation [] gv3), (Permutation [] (b :: l2)), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3))
(Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3)), (In b (b :: l2)), (In b (b :: gv3)), (In b (a0 :: l2)), (In b (a0 :: gv3)), (In b (merge l2 l2)), (In b (merge l2 gv3)), (In b (merge gv3 l2))
(In b (l2 ++ l2)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: l2)), (In a0 (b :: gv3)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv3)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) l2), (In (length l2) gv3), (In (length l2) (b :: l2)), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: l2))
(In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv3)), (In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3)
(In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3)), (In (length gv3) (merge gv3 l2)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2))
(b < length l2), (b < length gv3), (a0 < length l2), (a0 < length gv3), (length l2 < b), (length l2 < a0), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0), (length gv3 < length l2)
(b <= length gv3), (a0 <= length l2), (a0 <= length gv3), (length l2 <= b), (length l2 <= a0), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* l2)
(~ a0 <=* l2), (~ a0 <=* gv3), (~ sorted l2), (~ sorted gv3), (~ Permutation l2 l2), (~ Permutation l2 gv3), (~ Permutation gv3 l2), (~ Permutation gv3 gv3), (~ In b l2), (~ In b gv3)
(~ In a0 gv3), (~ b < b), (~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2)
(gv3 <> l2), (gv3 <> gv3), (b <> b), (b <> a0), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some gv3), (b :: l2 = l2), (b :: l2 = gv3)
(b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2), (b :: l2 = merge gv3 gv3), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: l2 = []), (b :: gv3 = l2), (b :: gv3 = gv3)
(b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2), (b :: gv3 = l2 ++ gv3), (b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = l2), (a0 :: l2 = gv3)
(a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3), (a0 :: l2 = []), (a0 :: gv3 = l2), (a0 :: gv3 = gv3)
(a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = []), (merge l2 l2 = l2), (merge l2 l2 = gv3)
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ l2 = gv3), (l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = l2), ([] = gv3), ([] = merge l2 l2)
([] = merge gv3 l2), ([] = merge gv3 gv3), ([] = l2 ++ l2), ([] = l2 ++ gv3), ([] = gv3 ++ l2), ([] = gv3 ++ gv3), (None = Some b), (None = Some a0), ((l2, l2) = split l2), ((l2, l2) = split gv3)
((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length l2 = b), (length l2 = a0), (length gv3 = b), (length gv3 = a0)

Label: 2 (4)
(b <=* l2), (b <=* gv3), (a0 <=* l2), (a0 <=* gv3), (sorted l2), (sorted gv3), (Permutation l2 l2), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3)
(In b gv3), (In a0 l2), (In a0 gv3), (b < b), (b < a0), (a0 < b), (a0 < a0), (b <= b), (b <= a0), (a0 <= b)
(l2 = l2), (l2 = gv3), (gv3 = l2), (gv3 = gv3), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool gv3)
(true = sorted_bool gv3), (b <=* b :: l2), (b <=* b :: gv3), (b <=* a0 :: l2), (b <=* a0 :: gv3), (b <=* merge l2 l2), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ l2)
(b <=* gv3 ++ l2), (b <=* gv3 ++ gv3), (b <=* []), (a0 <=* b :: l2), (a0 <=* b :: gv3), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv3), (a0 <=* merge l2 l2), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2)
(a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (a0 <=* []), (length l2 <=* l2), (length l2 <=* gv3), (length l2 <=* b :: l2), (length l2 <=* b :: gv3), (length l2 <=* a0 :: l2)
(length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length l2 <=* []), (length gv3 <=* l2)
(length gv3 <=* b :: l2), (length gv3 <=* b :: gv3), (length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3)
(length gv3 <=* gv3 ++ gv3), (length gv3 <=* []), (sorted (b :: l2)), (sorted (b :: gv3)), (sorted (a0 :: l2)), (sorted (a0 :: gv3)), (sorted (merge l2 l2)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3))
(sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv3)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv3))
(Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation l2 []), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3))
(Permutation gv3 (merge l2 gv3)), (Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) l2), (Permutation (b :: l2) gv3)
(Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv3)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv3)), (Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3))
(Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3)), (Permutation (b :: gv3) (merge l2 l2)), (Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2))
(Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv3)), (Permutation (a0 :: l2) (a0 :: gv3)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv3))
(Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: gv3)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2))
(Permutation (merge l2 l2) []), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2)), (Permutation (merge l2 gv3) (b :: gv3)), (Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3))
(Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) []), (Permutation (merge gv3 l2) l2), (Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3))
(Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3)), (Permutation (merge gv3 l2) (gv3 ++ l2)), (Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2))
(Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3)), (Permutation (merge gv3 gv3) (merge gv3 l2)), (Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) [])
(Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2)), (Permutation (l2 ++ l2) (merge gv3 gv3)), (Permutation (l2 ++ l2) (l2 ++ gv3))
(Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2)), (Permutation (l2 ++ gv3) (merge l2 gv3))
(Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3)), (Permutation (gv3 ++ l2) (a0 :: l2))
(Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l2))
(Permutation [] l2), (Permutation [] gv3), (Permutation [] (b :: l2)), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3))
(Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3)), (In b (b :: l2)), (In b (b :: gv3)), (In b (a0 :: l2)), (In b (a0 :: gv3)), (In b (merge l2 l2)), (In b (merge l2 gv3)), (In b (merge gv3 l2))
(In b (l2 ++ l2)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: l2)), (In a0 (b :: gv3)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv3)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) l2), (In (length l2) gv3), (In (length l2) (b :: l2)), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: l2))
(In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv3)), (In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3)
(In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3)), (In (length gv3) (merge gv3 l2)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2))
(b < length l2), (b < length gv3), (a0 < length l2), (a0 < length gv3), (length l2 < b), (length l2 < a0), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0), (length gv3 < length l2)
(b <= length gv3), (a0 <= length l2), (a0 <= length gv3), (length l2 <= b), (length l2 <= a0), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* l2)
(~ a0 <=* l2), (~ a0 <=* gv3), (~ sorted l2), (~ sorted gv3), (~ Permutation l2 l2), (~ Permutation l2 gv3), (~ Permutation gv3 l2), (~ Permutation gv3 gv3), (~ In b l2), (~ In b gv3)
(~ In a0 gv3), (~ b < b), (~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2)
(gv3 <> l2), (gv3 <> gv3), (b <> b), (b <> a0), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some gv3), (b :: l2 = l2), (b :: l2 = gv3)
(b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2), (b :: l2 = merge gv3 gv3), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: l2 = []), (b :: gv3 = l2), (b :: gv3 = gv3)
(b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2), (b :: gv3 = l2 ++ gv3), (b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = l2), (a0 :: l2 = gv3)
(a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3), (a0 :: l2 = []), (a0 :: gv3 = l2), (a0 :: gv3 = gv3)
(a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = []), (merge l2 l2 = l2), (merge l2 l2 = gv3)
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ l2 = gv3), (l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = l2), ([] = gv3), ([] = merge l2 l2)
([] = merge gv3 l2), ([] = merge gv3 gv3), ([] = l2 ++ l2), ([] = l2 ++ gv3), ([] = gv3 ++ l2), ([] = gv3 ++ gv3), (None = Some b), (None = Some a0), ((l2, l2) = split l2), ((l2, l2) = split gv3)
((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length l2 = b), (length l2 = a0), (length gv3 = b), (length gv3 = a0)

Label: 2 (5)
(b <=* l2), (b <=* gv3), (a0 <=* l2), (a0 <=* gv3), (sorted l2), (sorted gv3), (Permutation l2 l2), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3)
(In b gv3), (In a0 l2), (In a0 gv3), (b < b), (b < a0), (a0 < b), (a0 < a0), (b <= b), (b <= a0), (a0 <= b)
(l2 = l2), (l2 = gv3), (gv3 = l2), (gv3 = gv3), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool gv3)
(true = sorted_bool gv3), (b <=* b :: l2), (b <=* b :: gv3), (b <=* a0 :: l2), (b <=* a0 :: gv3), (b <=* merge l2 l2), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ l2)
(b <=* gv3 ++ l2), (b <=* gv3 ++ gv3), (b <=* []), (a0 <=* b :: l2), (a0 <=* b :: gv3), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv3), (a0 <=* merge l2 l2), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2)
(a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (a0 <=* []), (length l2 <=* l2), (length l2 <=* gv3), (length l2 <=* b :: l2), (length l2 <=* b :: gv3), (length l2 <=* a0 :: l2)
(length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length l2 <=* []), (length gv3 <=* l2)
(length gv3 <=* b :: l2), (length gv3 <=* b :: gv3), (length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3)
(length gv3 <=* gv3 ++ gv3), (length gv3 <=* []), (sorted (b :: l2)), (sorted (b :: gv3)), (sorted (a0 :: l2)), (sorted (a0 :: gv3)), (sorted (merge l2 l2)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3))
(sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv3)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv3))
(Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation l2 []), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3))
(Permutation gv3 (merge l2 gv3)), (Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) l2), (Permutation (b :: l2) gv3)
(Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv3)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv3)), (Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3))
(Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3)), (Permutation (b :: gv3) (merge l2 l2)), (Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2))
(Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv3)), (Permutation (a0 :: l2) (a0 :: gv3)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv3))
(Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: gv3)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2))
(Permutation (merge l2 l2) []), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2)), (Permutation (merge l2 gv3) (b :: gv3)), (Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3))
(Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) []), (Permutation (merge gv3 l2) l2), (Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3))
(Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3)), (Permutation (merge gv3 l2) (gv3 ++ l2)), (Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2))
(Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3)), (Permutation (merge gv3 gv3) (merge gv3 l2)), (Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) [])
(Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2)), (Permutation (l2 ++ l2) (merge gv3 gv3)), (Permutation (l2 ++ l2) (l2 ++ gv3))
(Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2)), (Permutation (l2 ++ gv3) (merge l2 gv3))
(Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3)), (Permutation (gv3 ++ l2) (a0 :: l2))
(Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l2))
(Permutation [] l2), (Permutation [] gv3), (Permutation [] (b :: l2)), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3))
(Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3)), (In b (b :: l2)), (In b (b :: gv3)), (In b (a0 :: l2)), (In b (a0 :: gv3)), (In b (merge l2 l2)), (In b (merge l2 gv3)), (In b (merge gv3 l2))
(In b (l2 ++ l2)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: l2)), (In a0 (b :: gv3)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv3)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) l2), (In (length l2) gv3), (In (length l2) (b :: l2)), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: l2))
(In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv3)), (In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3)
(In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3)), (In (length gv3) (merge gv3 l2)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2))
(b < length l2), (b < length gv3), (a0 < length l2), (a0 < length gv3), (length l2 < b), (length l2 < a0), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0), (length gv3 < length l2)
(b <= length gv3), (a0 <= length l2), (a0 <= length gv3), (length l2 <= b), (length l2 <= a0), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* l2)
(~ a0 <=* l2), (~ a0 <=* gv3), (~ sorted l2), (~ sorted gv3), (~ Permutation l2 l2), (~ Permutation l2 gv3), (~ Permutation gv3 l2), (~ Permutation gv3 gv3), (~ In b l2), (~ In b gv3)
(~ In a0 gv3), (~ b < b), (~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2)
(gv3 <> l2), (gv3 <> gv3), (b <> b), (b <> a0), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some gv3), (b :: l2 = l2), (b :: l2 = gv3)
(b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2), (b :: l2 = merge gv3 gv3), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: l2 = []), (b :: gv3 = l2), (b :: gv3 = gv3)
(b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2), (b :: gv3 = l2 ++ gv3), (b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = l2), (a0 :: l2 = gv3)
(a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3), (a0 :: l2 = []), (a0 :: gv3 = l2), (a0 :: gv3 = gv3)
(a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = []), (merge l2 l2 = l2), (merge l2 l2 = gv3)
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ l2 = gv3), (l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = l2), ([] = gv3), ([] = merge l2 l2)
([] = merge gv3 l2), ([] = merge gv3 gv3), ([] = l2 ++ l2), ([] = l2 ++ gv3), ([] = gv3 ++ l2), ([] = gv3 ++ gv3), (None = Some b), (None = Some a0), ((l2, l2) = split l2), ((l2, l2) = split gv3)
((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length l2 = b), (length l2 = a0), (length gv3 = b), (length gv3 = a0)

Label: 3 (6)
(a <=* l2), (a <=* l1), (a <=* gv1), (b <=* l2), (b <=* l1), (b <=* gv1), (a0 <=* l2), (a0 <=* l1), (a0 <=* gv1), (sorted l2)
(sorted gv1), (Permutation l2 l2), (Permutation l2 l1), (Permutation l2 gv1), (Permutation l1 l2), (Permutation l1 l1), (Permutation l1 gv1), (Permutation gv1 l2), (Permutation gv1 l1), (Permutation gv1 gv1)
(In a l1), (In a gv1), (In b l2), (In b l1), (In b gv1), (In a0 l2), (In a0 l1), (In a0 gv1), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l2 = gv1), (l1 = l2), (l1 = l1), (l1 = gv1)
(gv1 = l1), (gv1 = gv1), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l2), (false = sorted_bool l1), (false = sorted_bool gv1), (true = sorted_bool l2), (true = sorted_bool l1), (true = sorted_bool gv1), (a <=* a :: l2), (a <=* a :: l1), (a <=* a :: gv1), (a <=* b :: l2)
(a <=* b :: gv1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* a0 :: gv1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l2 gv1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* merge l1 gv1)
(a <=* merge gv1 l1), (a <=* merge gv1 gv1), (a <=* l2 ++ l2), (a <=* l2 ++ l1), (a <=* l2 ++ gv1), (a <=* l1 ++ l2), (a <=* l1 ++ l1), (a <=* l1 ++ gv1), (a <=* gv1 ++ l2), (a <=* gv1 ++ l1)
(a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* a :: gv1), (b <=* b :: l2), (b <=* b :: l1), (b <=* b :: gv1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* a0 :: gv1)
(b <=* merge l2 l1), (b <=* merge l2 gv1), (b <=* merge l1 l2), (b <=* merge l1 l1), (b <=* merge l1 gv1), (b <=* merge gv1 l2), (b <=* merge gv1 l1), (b <=* merge gv1 gv1), (b <=* l2 ++ l2), (b <=* l2 ++ l1)
(b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* l1 ++ gv1), (b <=* gv1 ++ l2), (b <=* gv1 ++ l1), (b <=* gv1 ++ gv1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* a :: gv1)
(a0 <=* b :: l1), (a0 <=* b :: gv1), (a0 <=* a0 :: l2), (a0 <=* a0 :: l1), (a0 <=* a0 :: gv1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l2 gv1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1)
(a0 <=* merge gv1 l2), (a0 <=* merge gv1 l1), (a0 <=* merge gv1 gv1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ gv1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ gv1), (a0 <=* gv1 ++ l2)
(a0 <=* gv1 ++ gv1), (a0 <=* []), (length l2 <=* l2), (length l2 <=* l1), (length l2 <=* gv1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* a :: gv1), (length l2 <=* b :: l2), (length l2 <=* b :: l1)
(length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* a0 :: gv1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 gv1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 gv1), (length l2 <=* merge gv1 l2)
(length l2 <=* merge gv1 gv1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ gv1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* l1 ++ gv1), (length l2 <=* gv1 ++ l2), (length l2 <=* gv1 ++ l1), (length l2 <=* gv1 ++ gv1)
(length l1 <=* l2), (length l1 <=* l1), (length l1 <=* gv1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* a :: gv1), (length l1 <=* b :: l2), (length l1 <=* b :: l1), (length l1 <=* b :: gv1), (length l1 <=* a0 :: l2)
(length l1 <=* a0 :: gv1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 gv1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 gv1), (length l1 <=* merge gv1 l2), (length l1 <=* merge gv1 l1), (length l1 <=* merge gv1 gv1)
(length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ gv1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ gv1), (length l1 <=* gv1 ++ l2), (length l1 <=* gv1 ++ l1), (length l1 <=* gv1 ++ gv1), (length l1 <=* []), (length gv1 <=* l2)
(length gv1 <=* gv1), (length gv1 <=* a :: l2), (length gv1 <=* a :: l1), (length gv1 <=* a :: gv1), (length gv1 <=* b :: l2), (length gv1 <=* b :: l1), (length gv1 <=* b :: gv1), (length gv1 <=* a0 :: l2), (length gv1 <=* a0 :: l1), (length gv1 <=* a0 :: gv1)
(length gv1 <=* merge l2 l1), (length gv1 <=* merge l2 gv1), (length gv1 <=* merge l1 l2), (length gv1 <=* merge l1 l1), (length gv1 <=* merge l1 gv1), (length gv1 <=* merge gv1 l2), (length gv1 <=* merge gv1 l1), (length gv1 <=* merge gv1 gv1), (length gv1 <=* l2 ++ l2), (length gv1 <=* l2 ++ l1)
(length gv1 <=* l1 ++ l2), (length gv1 <=* l1 ++ l1), (length gv1 <=* l1 ++ gv1), (length gv1 <=* gv1 ++ l2), (length gv1 <=* gv1 ++ l1), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* []), (sorted (a :: l2)), (sorted (a :: l1)), (sorted (a :: gv1))
(sorted (b :: l1)), (sorted (b :: gv1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (a0 :: gv1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l2 gv1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (merge gv1 l2)), (sorted (merge gv1 l1)), (sorted (merge gv1 gv1)), (sorted (l2 ++ l2)), (sorted (l2 ++ l1)), (sorted (l2 ++ gv1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted (l1 ++ gv1)), (sorted (gv1 ++ l2))
(sorted (gv1 ++ gv1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (a :: gv1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (b :: gv1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 l1)), (Permutation l2 (merge l2 gv1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (merge gv1 l1)), (Permutation l2 (merge gv1 gv1)), (Permutation l2 (l2 ++ l2))
(Permutation l2 (l2 ++ gv1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ gv1)), (Permutation l2 (gv1 ++ l2)), (Permutation l2 (gv1 ++ l1)), (Permutation l2 (gv1 ++ gv1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: gv1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: gv1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 gv1)), (Permutation l1 (merge l1 l2))
(Permutation l1 (merge l1 gv1)), (Permutation l1 (merge gv1 l2)), (Permutation l1 (merge gv1 l1)), (Permutation l1 (merge gv1 gv1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ gv1)), (Permutation l1 (l1 ++ l2)), (Permutation l1 (l1 ++ l1)), (Permutation l1 (l1 ++ gv1))
(Permutation l1 (gv1 ++ l1)), (Permutation l1 (gv1 ++ gv1)), (Permutation l1 []), (Permutation gv1 (a :: l2)), (Permutation gv1 (a :: l1)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (b :: l2)), (Permutation gv1 (b :: l1)), (Permutation gv1 (b :: gv1)), (Permutation gv1 (a0 :: l2))
(Permutation gv1 (a0 :: gv1)), (Permutation gv1 (merge l2 l2)), (Permutation gv1 (merge l2 l1)), (Permutation gv1 (merge l2 gv1)), (Permutation gv1 (merge l1 l2)), (Permutation gv1 (merge l1 l1)), (Permutation gv1 (merge l1 gv1)), (Permutation gv1 (merge gv1 l2)), (Permutation gv1 (merge gv1 l1)), (Permutation gv1 (merge gv1 gv1))
(Permutation gv1 (l2 ++ l1)), (Permutation gv1 (l2 ++ gv1)), (Permutation gv1 (l1 ++ l2)), (Permutation gv1 (l1 ++ l1)), (Permutation gv1 (l1 ++ gv1)), (Permutation gv1 (gv1 ++ l2)), (Permutation gv1 (gv1 ++ l1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a :: l2) l2)
(Permutation (a :: l2) gv1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (a :: gv1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: gv1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: gv1)), (Permutation (a :: l2) (merge l2 l2))
(Permutation (a :: l2) (merge l2 gv1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 gv1)), (Permutation (a :: l2) (merge gv1 l2)), (Permutation (a :: l2) (merge gv1 l1)), (Permutation (a :: l2) (merge gv1 gv1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ gv1))
(Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ gv1)), (Permutation (a :: l2) (gv1 ++ l2)), (Permutation (a :: l2) (gv1 ++ l1)), (Permutation (a :: l2) (gv1 ++ gv1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) gv1), (Permutation (a :: l1) (a :: l2))
(Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: gv1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: gv1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 gv1)), (Permutation (a :: l1) (merge l1 l2))
(Permutation (a :: l1) (merge l1 gv1)), (Permutation (a :: l1) (merge gv1 l2)), (Permutation (a :: l1) (merge gv1 l1)), (Permutation (a :: l1) (merge gv1 gv1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l2 ++ gv1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ gv1))
(Permutation (a :: l1) (gv1 ++ l1)), (Permutation (a :: l1) (gv1 ++ gv1)), (Permutation (a :: l1) []), (Permutation (a :: gv1) l2), (Permutation (a :: gv1) l1), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) (a :: l2)), (Permutation (a :: gv1) (a :: l1)), (Permutation (a :: gv1) (b :: l2)), (Permutation (a :: gv1) (b :: l1))
(Permutation (a :: gv1) (a0 :: l2)), (Permutation (a :: gv1) (a0 :: l1)), (Permutation (a :: gv1) (a0 :: gv1)), (Permutation (a :: gv1) (merge l2 l2)), (Permutation (a :: gv1) (merge l2 l1)), (Permutation (a :: gv1) (merge l2 gv1)), (Permutation (a :: gv1) (merge l1 l2)), (Permutation (a :: gv1) (merge l1 l1)), (Permutation (a :: gv1) (merge l1 gv1)), (Permutation (a :: gv1) (merge gv1 l2))
(Permutation (a :: gv1) (merge gv1 gv1)), (Permutation (a :: gv1) (l2 ++ l2)), (Permutation (a :: gv1) (l2 ++ l1)), (Permutation (a :: gv1) (l2 ++ gv1)), (Permutation (a :: gv1) (l1 ++ l2)), (Permutation (a :: gv1) (l1 ++ l1)), (Permutation (a :: gv1) (l1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ l2)), (Permutation (a :: gv1) (gv1 ++ l1)), (Permutation (a :: gv1) (gv1 ++ gv1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) gv1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: gv1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1))
(Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 gv1)), (Permutation (b :: l2) (merge l1 l2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 gv1)), (Permutation (b :: l2) (merge gv1 l2)), (Permutation (b :: l2) (merge gv1 l1)), (Permutation (b :: l2) (merge gv1 gv1)), (Permutation (b :: l2) (l2 ++ l2))
(Permutation (b :: l2) (l2 ++ gv1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ gv1)), (Permutation (b :: l2) (gv1 ++ l2)), (Permutation (b :: l2) (gv1 ++ l1)), (Permutation (b :: l2) (gv1 ++ gv1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1)
(Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: gv1)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv1)), (Permutation (b :: l1) (a0 :: l2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: gv1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1))
(Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 gv1)), (Permutation (b :: l1) (merge gv1 l2)), (Permutation (b :: l1) (merge gv1 l1)), (Permutation (b :: l1) (merge gv1 gv1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ gv1)), (Permutation (b :: l1) (l1 ++ l2))
(Permutation (b :: l1) (l1 ++ gv1)), (Permutation (b :: l1) (gv1 ++ l2)), (Permutation (b :: l1) (gv1 ++ l1)), (Permutation (b :: l1) (gv1 ++ gv1)), (Permutation (b :: l1) []), (Permutation (b :: gv1) l2), (Permutation (b :: gv1) l1), (Permutation (b :: gv1) gv1), (Permutation (b :: gv1) (a :: l2)), (Permutation (b :: gv1) (a :: l1))
(Permutation (b :: gv1) (b :: l2)), (Permutation (b :: gv1) (b :: l1)), (Permutation (b :: gv1) (a0 :: l2)), (Permutation (b :: gv1) (a0 :: l1)), (Permutation (b :: gv1) (a0 :: gv1)), (Permutation (b :: gv1) (merge l2 l2)), (Permutation (b :: gv1) (merge l2 l1)), (Permutation (b :: gv1) (merge l2 gv1)), (Permutation (b :: gv1) (merge l1 l2)), (Permutation (b :: gv1) (merge l1 l1))
(Permutation (b :: gv1) (merge gv1 l2)), (Permutation (b :: gv1) (merge gv1 l1)), (Permutation (b :: gv1) (merge gv1 gv1)), (Permutation (b :: gv1) (l2 ++ l2)), (Permutation (b :: gv1) (l2 ++ l1)), (Permutation (b :: gv1) (l2 ++ gv1)), (Permutation (b :: gv1) (l1 ++ l2)), (Permutation (b :: gv1) (l1 ++ l1)), (Permutation (b :: gv1) (l1 ++ gv1)), (Permutation (b :: gv1) (gv1 ++ l2))
(Permutation (b :: gv1) (gv1 ++ gv1)), (Permutation (b :: gv1) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) gv1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: gv1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1))
(Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 gv1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1)), (Permutation (a0 :: l2) (merge l1 gv1)), (Permutation (a0 :: l2) (merge gv1 l2)), (Permutation (a0 :: l2) (merge gv1 l1))
(Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ gv1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ gv1)), (Permutation (a0 :: l2) (gv1 ++ l2)), (Permutation (a0 :: l2) (gv1 ++ l1)), (Permutation (a0 :: l2) (gv1 ++ gv1)), (Permutation (a0 :: l2) [])
(Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) gv1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: gv1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: gv1)), (Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv1))
(Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 gv1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 gv1)), (Permutation (a0 :: l1) (merge gv1 l2)), (Permutation (a0 :: l1) (merge gv1 l1)), (Permutation (a0 :: l1) (merge gv1 gv1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1))
(Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ gv1)), (Permutation (a0 :: l1) (gv1 ++ l2)), (Permutation (a0 :: l1) (gv1 ++ l1)), (Permutation (a0 :: l1) (gv1 ++ gv1)), (Permutation (a0 :: l1) []), (Permutation (a0 :: gv1) l2), (Permutation (a0 :: gv1) l1), (Permutation (a0 :: gv1) gv1)
(Permutation (a0 :: gv1) (a :: l1)), (Permutation (a0 :: gv1) (a :: gv1)), (Permutation (a0 :: gv1) (b :: l2)), (Permutation (a0 :: gv1) (b :: l1)), (Permutation (a0 :: gv1) (b :: gv1)), (Permutation (a0 :: gv1) (a0 :: l2)), (Permutation (a0 :: gv1) (a0 :: l1)), (Permutation (a0 :: gv1) (merge l2 l2)), (Permutation (a0 :: gv1) (merge l2 l1)), (Permutation (a0 :: gv1) (merge l2 gv1))
(Permutation (a0 :: gv1) (merge l1 l1)), (Permutation (a0 :: gv1) (merge l1 gv1)), (Permutation (a0 :: gv1) (merge gv1 l2)), (Permutation (a0 :: gv1) (merge gv1 l1)), (Permutation (a0 :: gv1) (merge gv1 gv1)), (Permutation (a0 :: gv1) (l2 ++ l2)), (Permutation (a0 :: gv1) (l2 ++ l1)), (Permutation (a0 :: gv1) (l2 ++ gv1)), (Permutation (a0 :: gv1) (l1 ++ l2)), (Permutation (a0 :: gv1) (l1 ++ l1))
(Permutation (a0 :: gv1) (gv1 ++ l2)), (Permutation (a0 :: gv1) (gv1 ++ l1)), (Permutation (a0 :: gv1) (gv1 ++ gv1)), (Permutation (a0 :: gv1) []), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) gv1), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: gv1))
(Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (b :: gv1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: gv1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 gv1))
(Permutation (merge l2 l2) (merge gv1 l1)), (Permutation (merge l2 l2) (merge gv1 gv1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ gv1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ gv1)), (Permutation (merge l2 l2) (gv1 ++ l2)), (Permutation (merge l2 l2) (gv1 ++ l1))
(Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) gv1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (a :: gv1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: gv1))
(Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: gv1)), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l2 gv1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 gv1)), (Permutation (merge l2 l1) (merge gv1 l2)), (Permutation (merge l2 l1) (merge gv1 l1)), (Permutation (merge l2 l1) (merge gv1 gv1))
(Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ gv1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ gv1)), (Permutation (merge l2 l1) (gv1 ++ l2)), (Permutation (merge l2 l1) (gv1 ++ l1)), (Permutation (merge l2 l1) (gv1 ++ gv1)), (Permutation (merge l2 l1) []), (Permutation (merge l2 gv1) l2)
(Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (a :: l2)), (Permutation (merge l2 gv1) (a :: l1)), (Permutation (merge l2 gv1) (a :: gv1)), (Permutation (merge l2 gv1) (b :: l2)), (Permutation (merge l2 gv1) (b :: l1)), (Permutation (merge l2 gv1) (b :: gv1)), (Permutation (merge l2 gv1) (a0 :: l2)), (Permutation (merge l2 gv1) (a0 :: l1)), (Permutation (merge l2 gv1) (a0 :: gv1))
(Permutation (merge l2 gv1) (merge l2 l1)), (Permutation (merge l2 gv1) (merge l1 l2)), (Permutation (merge l2 gv1) (merge l1 l1)), (Permutation (merge l2 gv1) (merge l1 gv1)), (Permutation (merge l2 gv1) (merge gv1 l2)), (Permutation (merge l2 gv1) (merge gv1 l1)), (Permutation (merge l2 gv1) (merge gv1 gv1)), (Permutation (merge l2 gv1) (l2 ++ l2)), (Permutation (merge l2 gv1) (l2 ++ l1)), (Permutation (merge l2 gv1) (l2 ++ gv1))
(Permutation (merge l2 gv1) (l1 ++ l1)), (Permutation (merge l2 gv1) (l1 ++ gv1)), (Permutation (merge l2 gv1) (gv1 ++ l2)), (Permutation (merge l2 gv1) (gv1 ++ l1)), (Permutation (merge l2 gv1) (gv1 ++ gv1)), (Permutation (merge l2 gv1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) gv1), (Permutation (merge l1 l2) (a :: l2))
(Permutation (merge l1 l2) (a :: gv1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: gv1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (a0 :: gv1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 gv1))
(Permutation (merge l1 l2) (merge l1 gv1)), (Permutation (merge l1 l2) (merge gv1 l2)), (Permutation (merge l1 l2) (merge gv1 l1)), (Permutation (merge l1 l2) (merge gv1 gv1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ gv1)), (Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) (l1 ++ gv1))
(Permutation (merge l1 l2) (gv1 ++ l1)), (Permutation (merge l1 l2) (gv1 ++ gv1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: gv1)), (Permutation (merge l1 l1) (b :: l2))
(Permutation (merge l1 l1) (b :: gv1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: gv1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 gv1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv1)), (Permutation (merge l1 l1) (merge gv1 l2))
(Permutation (merge l1 l1) (merge gv1 gv1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ gv1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv1)), (Permutation (merge l1 l1) (gv1 ++ l2)), (Permutation (merge l1 l1) (gv1 ++ l1)), (Permutation (merge l1 l1) (gv1 ++ gv1))
(Permutation (merge l1 gv1) l2), (Permutation (merge l1 gv1) l1), (Permutation (merge l1 gv1) gv1), (Permutation (merge l1 gv1) (a :: l2)), (Permutation (merge l1 gv1) (a :: l1)), (Permutation (merge l1 gv1) (a :: gv1)), (Permutation (merge l1 gv1) (b :: l2)), (Permutation (merge l1 gv1) (b :: l1)), (Permutation (merge l1 gv1) (b :: gv1)), (Permutation (merge l1 gv1) (a0 :: l2))
(Permutation (merge l1 gv1) (a0 :: gv1)), (Permutation (merge l1 gv1) (merge l2 l2)), (Permutation (merge l1 gv1) (merge l2 l1)), (Permutation (merge l1 gv1) (merge l2 gv1)), (Permutation (merge l1 gv1) (merge l1 l2)), (Permutation (merge l1 gv1) (merge l1 l1)), (Permutation (merge l1 gv1) (merge gv1 l2)), (Permutation (merge l1 gv1) (merge gv1 l1)), (Permutation (merge l1 gv1) (merge gv1 gv1)), (Permutation (merge l1 gv1) (l2 ++ l2))
(Permutation (merge l1 gv1) (l2 ++ gv1)), (Permutation (merge l1 gv1) (l1 ++ l2)), (Permutation (merge l1 gv1) (l1 ++ l1)), (Permutation (merge l1 gv1) (l1 ++ gv1)), (Permutation (merge l1 gv1) (gv1 ++ l2)), (Permutation (merge l1 gv1) (gv1 ++ l1)), (Permutation (merge l1 gv1) (gv1 ++ gv1)), (Permutation (merge l1 gv1) []), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 l2) l1)
(Permutation (merge gv1 l2) (a :: l2)), (Permutation (merge gv1 l2) (a :: l1)), (Permutation (merge gv1 l2) (a :: gv1)), (Permutation (merge gv1 l2) (b :: l2)), (Permutation (merge gv1 l2) (b :: l1)), (Permutation (merge gv1 l2) (b :: gv1)), (Permutation (merge gv1 l2) (a0 :: l2)), (Permutation (merge gv1 l2) (a0 :: l1)), (Permutation (merge gv1 l2) (a0 :: gv1)), (Permutation (merge gv1 l2) (merge l2 l2))
(Permutation (merge gv1 l2) (merge l2 gv1)), (Permutation (merge gv1 l2) (merge l1 l2)), (Permutation (merge gv1 l2) (merge l1 l1)), (Permutation (merge gv1 l2) (merge l1 gv1)), (Permutation (merge gv1 l2) (merge gv1 l1)), (Permutation (merge gv1 l2) (merge gv1 gv1)), (Permutation (merge gv1 l2) (l2 ++ l2)), (Permutation (merge gv1 l2) (l2 ++ l1)), (Permutation (merge gv1 l2) (l2 ++ gv1)), (Permutation (merge gv1 l2) (l1 ++ l2))
(Permutation (merge gv1 l2) (l1 ++ gv1)), (Permutation (merge gv1 l2) (gv1 ++ l2)), (Permutation (merge gv1 l2) (gv1 ++ l1)), (Permutation (merge gv1 l2) (gv1 ++ gv1)), (Permutation (merge gv1 l2) []), (Permutation (merge gv1 l1) l2), (Permutation (merge gv1 l1) l1), (Permutation (merge gv1 l1) gv1), (Permutation (merge gv1 l1) (a :: l2)), (Permutation (merge gv1 l1) (a :: l1))
(Permutation (merge gv1 l1) (b :: l2)), (Permutation (merge gv1 l1) (b :: l1)), (Permutation (merge gv1 l1) (b :: gv1)), (Permutation (merge gv1 l1) (a0 :: l2)), (Permutation (merge gv1 l1) (a0 :: l1)), (Permutation (merge gv1 l1) (a0 :: gv1)), (Permutation (merge gv1 l1) (merge l2 l2)), (Permutation (merge gv1 l1) (merge l2 l1)), (Permutation (merge gv1 l1) (merge l2 gv1)), (Permutation (merge gv1 l1) (merge l1 l2))
(Permutation (merge gv1 l1) (merge l1 gv1)), (Permutation (merge gv1 l1) (merge gv1 l2)), (Permutation (merge gv1 l1) (merge gv1 gv1)), (Permutation (merge gv1 l1) (l2 ++ l2)), (Permutation (merge gv1 l1) (l2 ++ l1)), (Permutation (merge gv1 l1) (l2 ++ gv1)), (Permutation (merge gv1 l1) (l1 ++ l2)), (Permutation (merge gv1 l1) (l1 ++ l1)), (Permutation (merge gv1 l1) (l1 ++ gv1)), (Permutation (merge gv1 l1) (gv1 ++ l2))
(Permutation (merge gv1 l1) (gv1 ++ gv1)), (Permutation (merge gv1 l1) []), (Permutation (merge gv1 gv1) l2), (Permutation (merge gv1 gv1) l1), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (a :: l2)), (Permutation (merge gv1 gv1) (a :: l1)), (Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (b :: l2)), (Permutation (merge gv1 gv1) (b :: l1))
(Permutation (merge gv1 gv1) (a0 :: l2)), (Permutation (merge gv1 gv1) (a0 :: l1)), (Permutation (merge gv1 gv1) (a0 :: gv1)), (Permutation (merge gv1 gv1) (merge l2 l2)), (Permutation (merge gv1 gv1) (merge l2 l1)), (Permutation (merge gv1 gv1) (merge l2 gv1)), (Permutation (merge gv1 gv1) (merge l1 l2)), (Permutation (merge gv1 gv1) (merge l1 l1)), (Permutation (merge gv1 gv1) (merge l1 gv1)), (Permutation (merge gv1 gv1) (merge gv1 l2))
(Permutation (merge gv1 gv1) (l2 ++ l2)), (Permutation (merge gv1 gv1) (l2 ++ l1)), (Permutation (merge gv1 gv1) (l2 ++ gv1)), (Permutation (merge gv1 gv1) (l1 ++ l2)), (Permutation (merge gv1 gv1) (l1 ++ l1)), (Permutation (merge gv1 gv1) (l1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ l2)), (Permutation (merge gv1 gv1) (gv1 ++ l1)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) [])
(Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) gv1), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: gv1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: gv1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1))
(Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 gv1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (merge l1 gv1)), (Permutation (l2 ++ l2) (merge gv1 l2)), (Permutation (l2 ++ l2) (merge gv1 l1)), (Permutation (l2 ++ l2) (merge gv1 gv1)), (Permutation (l2 ++ l2) (l2 ++ l1))
(Permutation (l2 ++ l2) (l1 ++ l2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ gv1)), (Permutation (l2 ++ l2) (gv1 ++ l2)), (Permutation (l2 ++ l2) (gv1 ++ l1)), (Permutation (l2 ++ l2) (gv1 ++ gv1)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) gv1)
(Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: gv1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: gv1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (a0 :: gv1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 l1))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 gv1)), (Permutation (l2 ++ l1) (merge gv1 l2)), (Permutation (l2 ++ l1) (merge gv1 l1)), (Permutation (l2 ++ l1) (merge gv1 gv1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1))
(Permutation (l2 ++ l1) (gv1 ++ l2)), (Permutation (l2 ++ l1) (gv1 ++ l1)), (Permutation (l2 ++ l1) (gv1 ++ gv1)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ gv1) l2), (Permutation (l2 ++ gv1) l1), (Permutation (l2 ++ gv1) gv1), (Permutation (l2 ++ gv1) (a :: l2)), (Permutation (l2 ++ gv1) (a :: l1)), (Permutation (l2 ++ gv1) (a :: gv1))
(Permutation (l2 ++ gv1) (b :: l1)), (Permutation (l2 ++ gv1) (b :: gv1)), (Permutation (l2 ++ gv1) (a0 :: l2)), (Permutation (l2 ++ gv1) (a0 :: l1)), (Permutation (l2 ++ gv1) (a0 :: gv1)), (Permutation (l2 ++ gv1) (merge l2 l2)), (Permutation (l2 ++ gv1) (merge l2 l1)), (Permutation (l2 ++ gv1) (merge l2 gv1)), (Permutation (l2 ++ gv1) (merge l1 l2)), (Permutation (l2 ++ gv1) (merge l1 l1))
(Permutation (l2 ++ gv1) (merge gv1 l2)), (Permutation (l2 ++ gv1) (merge gv1 l1)), (Permutation (l2 ++ gv1) (merge gv1 gv1)), (Permutation (l2 ++ gv1) (l2 ++ l2)), (Permutation (l2 ++ gv1) (l2 ++ l1)), (Permutation (l2 ++ gv1) (l1 ++ l2)), (Permutation (l2 ++ gv1) (l1 ++ l1)), (Permutation (l2 ++ gv1) (l1 ++ gv1)), (Permutation (l2 ++ gv1) (gv1 ++ l2)), (Permutation (l2 ++ gv1) (gv1 ++ l1))
(Permutation (l2 ++ gv1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) gv1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1)), (Permutation (l1 ++ l2) (a :: gv1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: gv1))
(Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: gv1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 gv1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 gv1)), (Permutation (l1 ++ l2) (merge gv1 l2)), (Permutation (l1 ++ l2) (merge gv1 l1))
(Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ gv1)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv1)), (Permutation (l1 ++ l2) (gv1 ++ l2)), (Permutation (l1 ++ l2) (gv1 ++ l1)), (Permutation (l1 ++ l2) (gv1 ++ gv1)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ l1) l2)
(Permutation (l1 ++ l1) gv1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: gv1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: gv1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: gv1))
(Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 gv1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 gv1)), (Permutation (l1 ++ l1) (merge gv1 l2)), (Permutation (l1 ++ l1) (merge gv1 l1)), (Permutation (l1 ++ l1) (merge gv1 gv1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1))
(Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) (l1 ++ gv1)), (Permutation (l1 ++ l1) (gv1 ++ l2)), (Permutation (l1 ++ l1) (gv1 ++ l1)), (Permutation (l1 ++ l1) (gv1 ++ gv1)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ gv1) l2), (Permutation (l1 ++ gv1) l1), (Permutation (l1 ++ gv1) gv1), (Permutation (l1 ++ gv1) (a :: l2))
(Permutation (l1 ++ gv1) (a :: gv1)), (Permutation (l1 ++ gv1) (b :: l2)), (Permutation (l1 ++ gv1) (b :: l1)), (Permutation (l1 ++ gv1) (b :: gv1)), (Permutation (l1 ++ gv1) (a0 :: l2)), (Permutation (l1 ++ gv1) (a0 :: l1)), (Permutation (l1 ++ gv1) (a0 :: gv1)), (Permutation (l1 ++ gv1) (merge l2 l2)), (Permutation (l1 ++ gv1) (merge l2 l1)), (Permutation (l1 ++ gv1) (merge l2 gv1))
(Permutation (l1 ++ gv1) (merge l1 l1)), (Permutation (l1 ++ gv1) (merge l1 gv1)), (Permutation (l1 ++ gv1) (merge gv1 l2)), (Permutation (l1 ++ gv1) (merge gv1 l1)), (Permutation (l1 ++ gv1) (merge gv1 gv1)), (Permutation (l1 ++ gv1) (l2 ++ l2)), (Permutation (l1 ++ gv1) (l2 ++ l1)), (Permutation (l1 ++ gv1) (l2 ++ gv1)), (Permutation (l1 ++ gv1) (l1 ++ l2)), (Permutation (l1 ++ gv1) (l1 ++ l1))
(Permutation (l1 ++ gv1) (gv1 ++ l1)), (Permutation (l1 ++ gv1) (gv1 ++ gv1)), (Permutation (l1 ++ gv1) []), (Permutation (gv1 ++ l2) l2), (Permutation (gv1 ++ l2) l1), (Permutation (gv1 ++ l2) gv1), (Permutation (gv1 ++ l2) (a :: l2)), (Permutation (gv1 ++ l2) (a :: l1)), (Permutation (gv1 ++ l2) (a :: gv1)), (Permutation (gv1 ++ l2) (b :: l2))
(Permutation (gv1 ++ l2) (b :: gv1)), (Permutation (gv1 ++ l2) (a0 :: l2)), (Permutation (gv1 ++ l2) (a0 :: l1)), (Permutation (gv1 ++ l2) (a0 :: gv1)), (Permutation (gv1 ++ l2) (merge l2 l2)), (Permutation (gv1 ++ l2) (merge l2 l1)), (Permutation (gv1 ++ l2) (merge l2 gv1)), (Permutation (gv1 ++ l2) (merge l1 l2)), (Permutation (gv1 ++ l2) (merge l1 l1)), (Permutation (gv1 ++ l2) (merge l1 gv1))
(Permutation (gv1 ++ l2) (merge gv1 l1)), (Permutation (gv1 ++ l2) (merge gv1 gv1)), (Permutation (gv1 ++ l2) (l2 ++ l2)), (Permutation (gv1 ++ l2) (l2 ++ l1)), (Permutation (gv1 ++ l2) (l2 ++ gv1)), (Permutation (gv1 ++ l2) (l1 ++ l2)), (Permutation (gv1 ++ l2) (l1 ++ l1)), (Permutation (gv1 ++ l2) (l1 ++ gv1)), (Permutation (gv1 ++ l2) (gv1 ++ l1)), (Permutation (gv1 ++ l2) (gv1 ++ gv1))
(Permutation (gv1 ++ l1) l2), (Permutation (gv1 ++ l1) l1), (Permutation (gv1 ++ l1) gv1), (Permutation (gv1 ++ l1) (a :: l2)), (Permutation (gv1 ++ l1) (a :: l1)), (Permutation (gv1 ++ l1) (a :: gv1)), (Permutation (gv1 ++ l1) (b :: l2)), (Permutation (gv1 ++ l1) (b :: l1)), (Permutation (gv1 ++ l1) (b :: gv1)), (Permutation (gv1 ++ l1) (a0 :: l2))
(Permutation (gv1 ++ l1) (a0 :: gv1)), (Permutation (gv1 ++ l1) (merge l2 l2)), (Permutation (gv1 ++ l1) (merge l2 l1)), (Permutation (gv1 ++ l1) (merge l2 gv1)), (Permutation (gv1 ++ l1) (merge l1 l2)), (Permutation (gv1 ++ l1) (merge l1 l1)), (Permutation (gv1 ++ l1) (merge l1 gv1)), (Permutation (gv1 ++ l1) (merge gv1 l2)), (Permutation (gv1 ++ l1) (merge gv1 l1)), (Permutation (gv1 ++ l1) (merge gv1 gv1))
(Permutation (gv1 ++ l1) (l2 ++ l1)), (Permutation (gv1 ++ l1) (l2 ++ gv1)), (Permutation (gv1 ++ l1) (l1 ++ l2)), (Permutation (gv1 ++ l1) (l1 ++ l1)), (Permutation (gv1 ++ l1) (l1 ++ gv1)), (Permutation (gv1 ++ l1) (gv1 ++ l2)), (Permutation (gv1 ++ l1) (gv1 ++ gv1)), (Permutation (gv1 ++ l1) []), (Permutation (gv1 ++ gv1) l2), (Permutation (gv1 ++ gv1) l1)
(Permutation (gv1 ++ gv1) (a :: l2)), (Permutation (gv1 ++ gv1) (a :: l1)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (b :: l2)), (Permutation (gv1 ++ gv1) (b :: l1)), (Permutation (gv1 ++ gv1) (b :: gv1)), (Permutation (gv1 ++ gv1) (a0 :: l2)), (Permutation (gv1 ++ gv1) (a0 :: l1)), (Permutation (gv1 ++ gv1) (a0 :: gv1)), (Permutation (gv1 ++ gv1) (merge l2 l2))
(Permutation (gv1 ++ gv1) (merge l2 gv1)), (Permutation (gv1 ++ gv1) (merge l1 l2)), (Permutation (gv1 ++ gv1) (merge l1 l1)), (Permutation (gv1 ++ gv1) (merge l1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 l2)), (Permutation (gv1 ++ gv1) (merge gv1 l1)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (l2 ++ l2)), (Permutation (gv1 ++ gv1) (l2 ++ l1)), (Permutation (gv1 ++ gv1) (l2 ++ gv1))
(Permutation (gv1 ++ gv1) (l1 ++ l1)), (Permutation (gv1 ++ gv1) (l1 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ l2)), (Permutation (gv1 ++ gv1) (gv1 ++ l1)), (Permutation (gv1 ++ gv1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] gv1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1))
(Permutation [] (b :: l2)), (Permutation [] (b :: l1)), (Permutation [] (b :: gv1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: gv1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l2 gv1)), (Permutation [] (merge l1 l2))
(Permutation [] (merge l1 gv1)), (Permutation [] (merge gv1 l2)), (Permutation [] (merge gv1 l1)), (Permutation [] (merge gv1 gv1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ gv1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ gv1))
(Permutation [] (gv1 ++ l1)), (Permutation [] (gv1 ++ gv1)), (In a (a :: l2)), (In a (a :: l1)), (In a (a :: gv1)), (In a (b :: l2)), (In a (b :: l1)), (In a (b :: gv1)), (In a (a0 :: l2)), (In a (a0 :: l1))
(In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l2 gv1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (merge l1 gv1)), (In a (merge gv1 l2)), (In a (merge gv1 l1)), (In a (merge gv1 gv1)), (In a (l2 ++ l2))
(In a (l2 ++ gv1)), (In a (l1 ++ l2)), (In a (l1 ++ l1)), (In a (l1 ++ gv1)), (In a (gv1 ++ l2)), (In a (gv1 ++ l1)), (In a (gv1 ++ gv1)), (In b (a :: l2)), (In b (a :: l1)), (In b (a :: gv1))
(In b (b :: l1)), (In b (b :: gv1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (a0 :: gv1)), (In b (merge l2 l2)), (In b (merge l2 l1)), (In b (merge l2 gv1)), (In b (merge l1 l2)), (In b (merge l1 l1))
(In b (merge gv1 l2)), (In b (merge gv1 l1)), (In b (merge gv1 gv1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l2 ++ gv1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In b (l1 ++ gv1)), (In b (gv1 ++ l2))
(In b (gv1 ++ gv1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (a :: gv1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (b :: gv1)), (In a0 (a0 :: l2)), (In a0 (a0 :: l1)), (In a0 (a0 :: gv1))
(In a0 (merge l2 l1)), (In a0 (merge l2 gv1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (merge l1 gv1)), (In a0 (merge gv1 l2)), (In a0 (merge gv1 l1)), (In a0 (merge gv1 gv1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1))
(In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ gv1)), (In a0 (gv1 ++ l2)), (In a0 (gv1 ++ l1)), (In a0 (gv1 ++ gv1)), (In (length l2) l2), (In (length l2) l1), (In (length l2) gv1), (In (length l2) (a :: l2))
(In (length l2) (a :: gv1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (b :: gv1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: gv1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 gv1))
(In (length l2) (merge l1 l1)), (In (length l2) (merge l1 gv1)), (In (length l2) (merge gv1 l2)), (In (length l2) (merge gv1 l1)), (In (length l2) (merge gv1 gv1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ gv1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1))
(In (length l2) (gv1 ++ l2)), (In (length l2) (gv1 ++ l1)), (In (length l2) (gv1 ++ gv1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) gv1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (a :: gv1)), (In (length l1) (b :: l2))
(In (length l1) (b :: gv1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: gv1)), (In (length l1) (merge l2 l2)), (In (length l1) (merge l2 l1)), (In (length l1) (merge l2 gv1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 gv1))
(In (length l1) (merge gv1 l1)), (In (length l1) (merge gv1 gv1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ gv1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ gv1)), (In (length l1) (gv1 ++ l2)), (In (length l1) (gv1 ++ l1))
(In (length gv1) l2), (In (length gv1) l1), (In (length gv1) gv1), (In (length gv1) (a :: l2)), (In (length gv1) (a :: l1)), (In (length gv1) (a :: gv1)), (In (length gv1) (b :: l2)), (In (length gv1) (b :: l1)), (In (length gv1) (b :: gv1)), (In (length gv1) (a0 :: l2))
(In (length gv1) (a0 :: gv1)), (In (length gv1) (merge l2 l2)), (In (length gv1) (merge l2 l1)), (In (length gv1) (merge l2 gv1)), (In (length gv1) (merge l1 l2)), (In (length gv1) (merge l1 l1)), (In (length gv1) (merge l1 gv1)), (In (length gv1) (merge gv1 l2)), (In (length gv1) (merge gv1 l1)), (In (length gv1) (merge gv1 gv1))
(In (length gv1) (l2 ++ l1)), (In (length gv1) (l2 ++ gv1)), (In (length gv1) (l1 ++ l2)), (In (length gv1) (l1 ++ l1)), (In (length gv1) (l1 ++ gv1)), (In (length gv1) (gv1 ++ l2)), (In (length gv1) (gv1 ++ l1)), (In (length gv1) (gv1 ++ gv1)), (a < length l2), (a < length l1)
(b < length l2), (b < length l1), (b < length gv1), (a0 < length l2), (a0 < length l1), (a0 < length gv1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1)
(length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2), (length l1 < length gv1), (length gv1 < a), (length gv1 < b), (length gv1 < a0), (length gv1 < length l2), (length gv1 < length l1)
(a <= length l1), (a <= length gv1), (b <= length l2), (b <= length l1), (b <= length gv1), (a0 <= length l2), (a0 <= length l1), (a0 <= length gv1), (length l2 <= a), (length l2 <= b)
(length l2 <= length l1), (length l2 <= length gv1), (length l1 <= a), (length l1 <= b), (length l1 <= a0), (length l1 <= length l2), (length l1 <= length gv1), (length gv1 <= a), (length gv1 <= b), (length gv1 <= a0)
(length gv1 <= length l1), (~ a <=* l2), (~ a <=* l1), (~ a <=* gv1), (~ b <=* l2), (~ b <=* l1), (~ b <=* gv1), (~ a0 <=* l2), (~ a0 <=* l1), (~ a0 <=* gv1)
(~ sorted l1), (~ sorted gv1), (~ Permutation l2 l2), (~ Permutation l2 l1), (~ Permutation l2 gv1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ Permutation l1 gv1), (~ Permutation gv1 l2), (~ Permutation gv1 l1)
(~ In a l2), (~ In a l1), (~ In a gv1), (~ In b l2), (~ In b l1), (~ In b gv1), (~ In a0 l2), (~ In a0 l1), (~ In a0 gv1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l2 <> gv1), (l1 <> l2), (l1 <> l1)
(gv1 <> l2), (gv1 <> l1), (gv1 <> gv1), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l2), (None = Some l1), (None = Some gv1), (a :: l2 = l2), (a :: l2 = l1), (a :: l2 = gv1), (a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l2 gv1)
(a :: l2 = merge l1 l1), (a :: l2 = merge l1 gv1), (a :: l2 = merge gv1 l2), (a :: l2 = merge gv1 l1), (a :: l2 = merge gv1 gv1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ gv1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1)
(a :: l2 = gv1 ++ l2), (a :: l2 = gv1 ++ l1), (a :: l2 = gv1 ++ gv1), (a :: l2 = []), (a :: l1 = l2), (a :: l1 = l1), (a :: l1 = gv1), (a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l2 gv1)
(a :: l1 = merge l1 l1), (a :: l1 = merge l1 gv1), (a :: l1 = merge gv1 l2), (a :: l1 = merge gv1 l1), (a :: l1 = merge gv1 gv1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ gv1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1)
(a :: l1 = gv1 ++ l2), (a :: l1 = gv1 ++ l1), (a :: l1 = gv1 ++ gv1), (a :: l1 = []), (a :: gv1 = l2), (a :: gv1 = l1), (a :: gv1 = gv1), (a :: gv1 = merge l2 l2), (a :: gv1 = merge l2 l1), (a :: gv1 = merge l2 gv1)
(a :: gv1 = merge l1 l1), (a :: gv1 = merge l1 gv1), (a :: gv1 = merge gv1 l2), (a :: gv1 = merge gv1 l1), (a :: gv1 = merge gv1 gv1), (a :: gv1 = l2 ++ l2), (a :: gv1 = l2 ++ l1), (a :: gv1 = l2 ++ gv1), (a :: gv1 = l1 ++ l2), (a :: gv1 = l1 ++ l1)
(a :: gv1 = gv1 ++ l2), (a :: gv1 = gv1 ++ l1), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = []), (b :: l2 = l2), (b :: l2 = l1), (b :: l2 = gv1), (b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l2 gv1)
(b :: l2 = merge l1 l1), (b :: l2 = merge l1 gv1), (b :: l2 = merge gv1 l2), (b :: l2 = merge gv1 l1), (b :: l2 = merge gv1 gv1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ gv1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1)
(b :: l2 = gv1 ++ l2), (b :: l2 = gv1 ++ l1), (b :: l2 = gv1 ++ gv1), (b :: l2 = []), (b :: l1 = l2), (b :: l1 = l1), (b :: l1 = gv1), (b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l2 gv1)
(b :: l1 = merge l1 l1), (b :: l1 = merge l1 gv1), (b :: l1 = merge gv1 l2), (b :: l1 = merge gv1 l1), (b :: l1 = merge gv1 gv1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ gv1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1)
(b :: l1 = gv1 ++ l2), (b :: l1 = gv1 ++ l1), (b :: l1 = gv1 ++ gv1), (b :: l1 = []), (b :: gv1 = l2), (b :: gv1 = l1), (b :: gv1 = gv1), (b :: gv1 = merge l2 l2), (b :: gv1 = merge l2 l1), (b :: gv1 = merge l2 gv1)
(b :: gv1 = merge l1 l1), (b :: gv1 = merge l1 gv1), (b :: gv1 = merge gv1 l2), (b :: gv1 = merge gv1 l1), (b :: gv1 = merge gv1 gv1), (b :: gv1 = l2 ++ l2), (b :: gv1 = l2 ++ l1), (b :: gv1 = l2 ++ gv1), (b :: gv1 = l1 ++ l2), (b :: gv1 = l1 ++ l1)
(b :: gv1 = gv1 ++ l2), (b :: gv1 = gv1 ++ l1), (b :: gv1 = gv1 ++ gv1), (b :: gv1 = []), (a0 :: l2 = l2), (a0 :: l2 = l1), (a0 :: l2 = gv1), (a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l2 gv1)
(a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 gv1), (a0 :: l2 = merge gv1 l2), (a0 :: l2 = merge gv1 l1), (a0 :: l2 = merge gv1 gv1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ gv1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1)
(a0 :: l2 = gv1 ++ l2), (a0 :: l2 = gv1 ++ l1), (a0 :: l2 = gv1 ++ gv1), (a0 :: l2 = []), (a0 :: l1 = l2), (a0 :: l1 = l1), (a0 :: l1 = gv1), (a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l2 gv1)
(a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 gv1), (a0 :: l1 = merge gv1 l2), (a0 :: l1 = merge gv1 l1), (a0 :: l1 = merge gv1 gv1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ gv1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1)
(a0 :: l1 = gv1 ++ l2), (a0 :: l1 = gv1 ++ l1), (a0 :: l1 = gv1 ++ gv1), (a0 :: l1 = []), (a0 :: gv1 = l2), (a0 :: gv1 = l1), (a0 :: gv1 = gv1), (a0 :: gv1 = merge l2 l2), (a0 :: gv1 = merge l2 l1), (a0 :: gv1 = merge l2 gv1)
(a0 :: gv1 = merge l1 l1), (a0 :: gv1 = merge l1 gv1), (a0 :: gv1 = merge gv1 l2), (a0 :: gv1 = merge gv1 l1), (a0 :: gv1 = merge gv1 gv1), (a0 :: gv1 = l2 ++ l2), (a0 :: gv1 = l2 ++ l1), (a0 :: gv1 = l2 ++ gv1), (a0 :: gv1 = l1 ++ l2), (a0 :: gv1 = l1 ++ l1)
(a0 :: gv1 = gv1 ++ l2), (a0 :: gv1 = gv1 ++ l1), (a0 :: gv1 = gv1 ++ gv1), (a0 :: gv1 = []), (merge l2 l2 = l2), (merge l2 l2 = l1), (merge l2 l2 = gv1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ gv1)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ gv1), (merge l2 l2 = gv1 ++ l2), (merge l2 l2 = gv1 ++ l1), (merge l2 l2 = gv1 ++ gv1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = gv1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1), (merge l2 l1 = l1 ++ gv1), (merge l2 l1 = gv1 ++ l2), (merge l2 l1 = gv1 ++ l1), (merge l2 l1 = gv1 ++ gv1), (merge l2 gv1 = l2), (merge l2 gv1 = l1), (merge l2 gv1 = gv1), (merge l2 gv1 = l2 ++ l2)
(merge l2 gv1 = l2 ++ gv1), (merge l2 gv1 = l1 ++ l2), (merge l2 gv1 = l1 ++ l1), (merge l2 gv1 = l1 ++ gv1), (merge l2 gv1 = gv1 ++ l2), (merge l2 gv1 = gv1 ++ l1), (merge l2 gv1 = gv1 ++ gv1), (merge l1 l2 = l2), (merge l1 l2 = l1), (merge l1 l2 = gv1)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ gv1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ gv1), (merge l1 l2 = gv1 ++ l2), (merge l1 l2 = gv1 ++ l1), (merge l1 l2 = gv1 ++ gv1), (merge l1 l1 = l2), (merge l1 l1 = l1)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l2 ++ gv1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ gv1), (merge l1 l1 = gv1 ++ l2), (merge l1 l1 = gv1 ++ l1), (merge l1 l1 = gv1 ++ gv1), (merge l1 gv1 = l2)
(merge l1 gv1 = gv1), (merge l1 gv1 = l2 ++ l2), (merge l1 gv1 = l2 ++ l1), (merge l1 gv1 = l2 ++ gv1), (merge l1 gv1 = l1 ++ l2), (merge l1 gv1 = l1 ++ l1), (merge l1 gv1 = l1 ++ gv1), (merge l1 gv1 = gv1 ++ l2), (merge l1 gv1 = gv1 ++ l1), (merge l1 gv1 = gv1 ++ gv1)
(merge gv1 l2 = l1), (merge gv1 l2 = gv1), (merge gv1 l2 = l2 ++ l2), (merge gv1 l2 = l2 ++ l1), (merge gv1 l2 = l2 ++ gv1), (merge gv1 l2 = l1 ++ l2), (merge gv1 l2 = l1 ++ l1), (merge gv1 l2 = l1 ++ gv1), (merge gv1 l2 = gv1 ++ l2), (merge gv1 l2 = gv1 ++ l1)
(merge gv1 l1 = l2), (merge gv1 l1 = l1), (merge gv1 l1 = gv1), (merge gv1 l1 = l2 ++ l2), (merge gv1 l1 = l2 ++ l1), (merge gv1 l1 = l2 ++ gv1), (merge gv1 l1 = l1 ++ l2), (merge gv1 l1 = l1 ++ l1), (merge gv1 l1 = l1 ++ gv1), (merge gv1 l1 = gv1 ++ l2)
(merge gv1 l1 = gv1 ++ gv1), (merge gv1 gv1 = l2), (merge gv1 gv1 = l1), (merge gv1 gv1 = gv1), (merge gv1 gv1 = l2 ++ l2), (merge gv1 gv1 = l2 ++ l1), (merge gv1 gv1 = l2 ++ gv1), (merge gv1 gv1 = l1 ++ l2), (merge gv1 gv1 = l1 ++ l1), (merge gv1 gv1 = l1 ++ gv1)
(merge gv1 gv1 = gv1 ++ l1), (merge gv1 gv1 = gv1 ++ gv1), (l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l2 = gv1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l2 ++ l1 = gv1), (l2 ++ gv1 = l2), (l2 ++ gv1 = l1)
(l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l2 = gv1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), (l1 ++ l1 = gv1), (l1 ++ gv1 = l2), (l1 ++ gv1 = l1), (l1 ++ gv1 = gv1), (gv1 ++ l2 = l2)
(gv1 ++ l2 = gv1), (gv1 ++ l1 = l2), (gv1 ++ l1 = l1), (gv1 ++ l1 = gv1), (gv1 ++ gv1 = l2), (gv1 ++ gv1 = l1), (gv1 ++ gv1 = gv1), ([] = l2), ([] = l1), ([] = gv1)
([] = merge l2 l1), ([] = merge l2 gv1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = merge l1 gv1), ([] = merge gv1 l2), ([] = merge gv1 l1), ([] = merge gv1 gv1), ([] = l2 ++ l2), ([] = l2 ++ l1)
([] = l1 ++ l2), ([] = l1 ++ l1), ([] = l1 ++ gv1), ([] = gv1 ++ l2), ([] = gv1 ++ l1), ([] = gv1 ++ gv1), (None = Some a), (None = Some b), (None = Some a0), ((l2, l2) = split l2)
((l2, l2) = split gv1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l2, l1) = split gv1), ((l2, gv1) = split l2), ((l2, gv1) = split l1), ((l2, gv1) = split gv1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l2) = split gv1)
((l1, l1) = split l1), ((l1, l1) = split gv1), ((l1, gv1) = split l2), ((l1, gv1) = split l1), ((l1, gv1) = split gv1), ((gv1, l2) = split l2), ((gv1, l2) = split l1), ((gv1, l2) = split gv1), ((gv1, l1) = split l2), ((gv1, l1) = split l1)
((gv1, gv1) = split l2), ((gv1, gv1) = split l1), ((gv1, gv1) = split gv1), (length l2 = a), (length l2 = b), (length l2 = a0), (length l1 = a), (length l1 = b), (length l1 = a0), (length gv1 = a)
(length gv1 = a0)

Label: 4 (7)
(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0)

Label: 4 (8)
(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0)

Label: 4 (9)
(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 155.251 seconds


Label: 3 (0)
Abducted Assumption: n/a
Positive Examples:
   [a := 2; a0 := 1; b := 2; gv1 := [2; 2]; l1 := []; l2 := []]

Negative Examples:
   [a := 0; a0 := 0; b := 2; gv1 := [2; 0; 3]; l1 := []; l2 := [3]]

(a <=* l2), (a <=* l1), (a <=* gv1), (b <=* l2), (b <=* l1), (b <=* gv1), (a0 <=* l2), (a0 <=* l1), (a0 <=* gv1), (sorted l2)
(sorted gv1), (Permutation l2 l2), (Permutation l2 l1), (Permutation l2 gv1), (Permutation l1 l2), (Permutation l1 l1), (Permutation l1 gv1), (Permutation gv1 l2), (Permutation gv1 l1), (Permutation gv1 gv1)
(In a l1), (In a gv1), (In b l2), (In b l1), (In b gv1), (In a0 l2), (In a0 l1), (In a0 gv1), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l2 = gv1), (l1 = l2), (l1 = l1), (l1 = gv1)
(gv1 = l1), (gv1 = gv1), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l2), (false = sorted_bool l1), (false = sorted_bool gv1), (true = sorted_bool l2), (true = sorted_bool l1), (true = sorted_bool gv1), (a <=* a :: l2), (a <=* a :: l1), (a <=* a :: gv1), (a <=* b :: l2)
(a <=* b :: gv1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* a0 :: gv1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l2 gv1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* merge l1 gv1)
(a <=* merge gv1 l1), (a <=* merge gv1 gv1), (a <=* l2 ++ l2), (a <=* l2 ++ l1), (a <=* l2 ++ gv1), (a <=* l1 ++ l2), (a <=* l1 ++ l1), (a <=* l1 ++ gv1), (a <=* gv1 ++ l2), (a <=* gv1 ++ l1)
(a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* a :: gv1), (b <=* b :: l2), (b <=* b :: l1), (b <=* b :: gv1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* a0 :: gv1)
(b <=* merge l2 l1), (b <=* merge l2 gv1), (b <=* merge l1 l2), (b <=* merge l1 l1), (b <=* merge l1 gv1), (b <=* merge gv1 l2), (b <=* merge gv1 l1), (b <=* merge gv1 gv1), (b <=* l2 ++ l2), (b <=* l2 ++ l1)
(b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* l1 ++ gv1), (b <=* gv1 ++ l2), (b <=* gv1 ++ l1), (b <=* gv1 ++ gv1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* a :: gv1)
(a0 <=* b :: l1), (a0 <=* b :: gv1), (a0 <=* a0 :: l2), (a0 <=* a0 :: l1), (a0 <=* a0 :: gv1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l2 gv1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1)
(a0 <=* merge gv1 l2), (a0 <=* merge gv1 l1), (a0 <=* merge gv1 gv1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ gv1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ gv1), (a0 <=* gv1 ++ l2)
(a0 <=* gv1 ++ gv1), (a0 <=* []), (length l2 <=* l2), (length l2 <=* l1), (length l2 <=* gv1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* a :: gv1), (length l2 <=* b :: l2), (length l2 <=* b :: l1)
(length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* a0 :: gv1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 gv1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 gv1), (length l2 <=* merge gv1 l2)
(length l2 <=* merge gv1 gv1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ gv1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* l1 ++ gv1), (length l2 <=* gv1 ++ l2), (length l2 <=* gv1 ++ l1), (length l2 <=* gv1 ++ gv1)
(length l1 <=* l2), (length l1 <=* l1), (length l1 <=* gv1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* a :: gv1), (length l1 <=* b :: l2), (length l1 <=* b :: l1), (length l1 <=* b :: gv1), (length l1 <=* a0 :: l2)
(length l1 <=* a0 :: gv1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 gv1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 gv1), (length l1 <=* merge gv1 l2), (length l1 <=* merge gv1 l1), (length l1 <=* merge gv1 gv1)
(length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ gv1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ gv1), (length l1 <=* gv1 ++ l2), (length l1 <=* gv1 ++ l1), (length l1 <=* gv1 ++ gv1), (length l1 <=* []), (length gv1 <=* l2)
(length gv1 <=* gv1), (length gv1 <=* a :: l2), (length gv1 <=* a :: l1), (length gv1 <=* a :: gv1), (length gv1 <=* b :: l2), (length gv1 <=* b :: l1), (length gv1 <=* b :: gv1), (length gv1 <=* a0 :: l2), (length gv1 <=* a0 :: l1), (length gv1 <=* a0 :: gv1)
(length gv1 <=* merge l2 l1), (length gv1 <=* merge l2 gv1), (length gv1 <=* merge l1 l2), (length gv1 <=* merge l1 l1), (length gv1 <=* merge l1 gv1), (length gv1 <=* merge gv1 l2), (length gv1 <=* merge gv1 l1), (length gv1 <=* merge gv1 gv1), (length gv1 <=* l2 ++ l2), (length gv1 <=* l2 ++ l1)
(length gv1 <=* l1 ++ l2), (length gv1 <=* l1 ++ l1), (length gv1 <=* l1 ++ gv1), (length gv1 <=* gv1 ++ l2), (length gv1 <=* gv1 ++ l1), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* []), (sorted (a :: l2)), (sorted (a :: l1)), (sorted (a :: gv1))
(sorted (b :: l1)), (sorted (b :: gv1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (a0 :: gv1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l2 gv1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (merge gv1 l2)), (sorted (merge gv1 l1)), (sorted (merge gv1 gv1)), (sorted (l2 ++ l2)), (sorted (l2 ++ l1)), (sorted (l2 ++ gv1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted (l1 ++ gv1)), (sorted (gv1 ++ l2))
(sorted (gv1 ++ gv1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (a :: gv1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (b :: gv1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 l1)), (Permutation l2 (merge l2 gv1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (merge gv1 l1)), (Permutation l2 (merge gv1 gv1)), (Permutation l2 (l2 ++ l2))
(Permutation l2 (l2 ++ gv1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ gv1)), (Permutation l2 (gv1 ++ l2)), (Permutation l2 (gv1 ++ l1)), (Permutation l2 (gv1 ++ gv1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: gv1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: gv1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 gv1)), (Permutation l1 (merge l1 l2))
(Permutation l1 (merge l1 gv1)), (Permutation l1 (merge gv1 l2)), (Permutation l1 (merge gv1 l1)), (Permutation l1 (merge gv1 gv1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ gv1)), (Permutation l1 (l1 ++ l2)), (Permutation l1 (l1 ++ l1)), (Permutation l1 (l1 ++ gv1))
(Permutation l1 (gv1 ++ l1)), (Permutation l1 (gv1 ++ gv1)), (Permutation l1 []), (Permutation gv1 (a :: l2)), (Permutation gv1 (a :: l1)), (Permutation gv1 (a :: gv1)), (Permutation gv1 (b :: l2)), (Permutation gv1 (b :: l1)), (Permutation gv1 (b :: gv1)), (Permutation gv1 (a0 :: l2))
(Permutation gv1 (a0 :: gv1)), (Permutation gv1 (merge l2 l2)), (Permutation gv1 (merge l2 l1)), (Permutation gv1 (merge l2 gv1)), (Permutation gv1 (merge l1 l2)), (Permutation gv1 (merge l1 l1)), (Permutation gv1 (merge l1 gv1)), (Permutation gv1 (merge gv1 l2)), (Permutation gv1 (merge gv1 l1)), (Permutation gv1 (merge gv1 gv1))
(Permutation gv1 (l2 ++ l1)), (Permutation gv1 (l2 ++ gv1)), (Permutation gv1 (l1 ++ l2)), (Permutation gv1 (l1 ++ l1)), (Permutation gv1 (l1 ++ gv1)), (Permutation gv1 (gv1 ++ l2)), (Permutation gv1 (gv1 ++ l1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (a :: l2) l2)
(Permutation (a :: l2) gv1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (a :: gv1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: gv1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: gv1)), (Permutation (a :: l2) (merge l2 l2))
(Permutation (a :: l2) (merge l2 gv1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 gv1)), (Permutation (a :: l2) (merge gv1 l2)), (Permutation (a :: l2) (merge gv1 l1)), (Permutation (a :: l2) (merge gv1 gv1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ gv1))
(Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ gv1)), (Permutation (a :: l2) (gv1 ++ l2)), (Permutation (a :: l2) (gv1 ++ l1)), (Permutation (a :: l2) (gv1 ++ gv1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) gv1), (Permutation (a :: l1) (a :: l2))
(Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: gv1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: gv1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 gv1)), (Permutation (a :: l1) (merge l1 l2))
(Permutation (a :: l1) (merge l1 gv1)), (Permutation (a :: l1) (merge gv1 l2)), (Permutation (a :: l1) (merge gv1 l1)), (Permutation (a :: l1) (merge gv1 gv1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l2 ++ gv1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ gv1))
(Permutation (a :: l1) (gv1 ++ l1)), (Permutation (a :: l1) (gv1 ++ gv1)), (Permutation (a :: l1) []), (Permutation (a :: gv1) l2), (Permutation (a :: gv1) l1), (Permutation (a :: gv1) gv1), (Permutation (a :: gv1) (a :: l2)), (Permutation (a :: gv1) (a :: l1)), (Permutation (a :: gv1) (b :: l2)), (Permutation (a :: gv1) (b :: l1))
(Permutation (a :: gv1) (a0 :: l2)), (Permutation (a :: gv1) (a0 :: l1)), (Permutation (a :: gv1) (a0 :: gv1)), (Permutation (a :: gv1) (merge l2 l2)), (Permutation (a :: gv1) (merge l2 l1)), (Permutation (a :: gv1) (merge l2 gv1)), (Permutation (a :: gv1) (merge l1 l2)), (Permutation (a :: gv1) (merge l1 l1)), (Permutation (a :: gv1) (merge l1 gv1)), (Permutation (a :: gv1) (merge gv1 l2))
(Permutation (a :: gv1) (merge gv1 gv1)), (Permutation (a :: gv1) (l2 ++ l2)), (Permutation (a :: gv1) (l2 ++ l1)), (Permutation (a :: gv1) (l2 ++ gv1)), (Permutation (a :: gv1) (l1 ++ l2)), (Permutation (a :: gv1) (l1 ++ l1)), (Permutation (a :: gv1) (l1 ++ gv1)), (Permutation (a :: gv1) (gv1 ++ l2)), (Permutation (a :: gv1) (gv1 ++ l1)), (Permutation (a :: gv1) (gv1 ++ gv1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) gv1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: gv1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1))
(Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 gv1)), (Permutation (b :: l2) (merge l1 l2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 gv1)), (Permutation (b :: l2) (merge gv1 l2)), (Permutation (b :: l2) (merge gv1 l1)), (Permutation (b :: l2) (merge gv1 gv1)), (Permutation (b :: l2) (l2 ++ l2))
(Permutation (b :: l2) (l2 ++ gv1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ gv1)), (Permutation (b :: l2) (gv1 ++ l2)), (Permutation (b :: l2) (gv1 ++ l1)), (Permutation (b :: l2) (gv1 ++ gv1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1)
(Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: gv1)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv1)), (Permutation (b :: l1) (a0 :: l2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: gv1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1))
(Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 gv1)), (Permutation (b :: l1) (merge gv1 l2)), (Permutation (b :: l1) (merge gv1 l1)), (Permutation (b :: l1) (merge gv1 gv1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ gv1)), (Permutation (b :: l1) (l1 ++ l2))
(Permutation (b :: l1) (l1 ++ gv1)), (Permutation (b :: l1) (gv1 ++ l2)), (Permutation (b :: l1) (gv1 ++ l1)), (Permutation (b :: l1) (gv1 ++ gv1)), (Permutation (b :: l1) []), (Permutation (b :: gv1) l2), (Permutation (b :: gv1) l1), (Permutation (b :: gv1) gv1), (Permutation (b :: gv1) (a :: l2)), (Permutation (b :: gv1) (a :: l1))
(Permutation (b :: gv1) (b :: l2)), (Permutation (b :: gv1) (b :: l1)), (Permutation (b :: gv1) (a0 :: l2)), (Permutation (b :: gv1) (a0 :: l1)), (Permutation (b :: gv1) (a0 :: gv1)), (Permutation (b :: gv1) (merge l2 l2)), (Permutation (b :: gv1) (merge l2 l1)), (Permutation (b :: gv1) (merge l2 gv1)), (Permutation (b :: gv1) (merge l1 l2)), (Permutation (b :: gv1) (merge l1 l1))
(Permutation (b :: gv1) (merge gv1 l2)), (Permutation (b :: gv1) (merge gv1 l1)), (Permutation (b :: gv1) (merge gv1 gv1)), (Permutation (b :: gv1) (l2 ++ l2)), (Permutation (b :: gv1) (l2 ++ l1)), (Permutation (b :: gv1) (l2 ++ gv1)), (Permutation (b :: gv1) (l1 ++ l2)), (Permutation (b :: gv1) (l1 ++ l1)), (Permutation (b :: gv1) (l1 ++ gv1)), (Permutation (b :: gv1) (gv1 ++ l2))
(Permutation (b :: gv1) (gv1 ++ gv1)), (Permutation (b :: gv1) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) gv1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: gv1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1))
(Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 gv1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1)), (Permutation (a0 :: l2) (merge l1 gv1)), (Permutation (a0 :: l2) (merge gv1 l2)), (Permutation (a0 :: l2) (merge gv1 l1))
(Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ gv1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ gv1)), (Permutation (a0 :: l2) (gv1 ++ l2)), (Permutation (a0 :: l2) (gv1 ++ l1)), (Permutation (a0 :: l2) (gv1 ++ gv1)), (Permutation (a0 :: l2) [])
(Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) gv1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: gv1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: gv1)), (Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv1))
(Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 gv1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 gv1)), (Permutation (a0 :: l1) (merge gv1 l2)), (Permutation (a0 :: l1) (merge gv1 l1)), (Permutation (a0 :: l1) (merge gv1 gv1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1))
(Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ gv1)), (Permutation (a0 :: l1) (gv1 ++ l2)), (Permutation (a0 :: l1) (gv1 ++ l1)), (Permutation (a0 :: l1) (gv1 ++ gv1)), (Permutation (a0 :: l1) []), (Permutation (a0 :: gv1) l2), (Permutation (a0 :: gv1) l1), (Permutation (a0 :: gv1) gv1)
(Permutation (a0 :: gv1) (a :: l1)), (Permutation (a0 :: gv1) (a :: gv1)), (Permutation (a0 :: gv1) (b :: l2)), (Permutation (a0 :: gv1) (b :: l1)), (Permutation (a0 :: gv1) (b :: gv1)), (Permutation (a0 :: gv1) (a0 :: l2)), (Permutation (a0 :: gv1) (a0 :: l1)), (Permutation (a0 :: gv1) (merge l2 l2)), (Permutation (a0 :: gv1) (merge l2 l1)), (Permutation (a0 :: gv1) (merge l2 gv1))
(Permutation (a0 :: gv1) (merge l1 l1)), (Permutation (a0 :: gv1) (merge l1 gv1)), (Permutation (a0 :: gv1) (merge gv1 l2)), (Permutation (a0 :: gv1) (merge gv1 l1)), (Permutation (a0 :: gv1) (merge gv1 gv1)), (Permutation (a0 :: gv1) (l2 ++ l2)), (Permutation (a0 :: gv1) (l2 ++ l1)), (Permutation (a0 :: gv1) (l2 ++ gv1)), (Permutation (a0 :: gv1) (l1 ++ l2)), (Permutation (a0 :: gv1) (l1 ++ l1))
(Permutation (a0 :: gv1) (gv1 ++ l2)), (Permutation (a0 :: gv1) (gv1 ++ l1)), (Permutation (a0 :: gv1) (gv1 ++ gv1)), (Permutation (a0 :: gv1) []), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) gv1), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: gv1))
(Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (b :: gv1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: gv1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 gv1))
(Permutation (merge l2 l2) (merge gv1 l1)), (Permutation (merge l2 l2) (merge gv1 gv1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ gv1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ gv1)), (Permutation (merge l2 l2) (gv1 ++ l2)), (Permutation (merge l2 l2) (gv1 ++ l1))
(Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) gv1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (a :: gv1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: gv1))
(Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: gv1)), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l2 gv1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 gv1)), (Permutation (merge l2 l1) (merge gv1 l2)), (Permutation (merge l2 l1) (merge gv1 l1)), (Permutation (merge l2 l1) (merge gv1 gv1))
(Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ gv1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ gv1)), (Permutation (merge l2 l1) (gv1 ++ l2)), (Permutation (merge l2 l1) (gv1 ++ l1)), (Permutation (merge l2 l1) (gv1 ++ gv1)), (Permutation (merge l2 l1) []), (Permutation (merge l2 gv1) l2)
(Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (a :: l2)), (Permutation (merge l2 gv1) (a :: l1)), (Permutation (merge l2 gv1) (a :: gv1)), (Permutation (merge l2 gv1) (b :: l2)), (Permutation (merge l2 gv1) (b :: l1)), (Permutation (merge l2 gv1) (b :: gv1)), (Permutation (merge l2 gv1) (a0 :: l2)), (Permutation (merge l2 gv1) (a0 :: l1)), (Permutation (merge l2 gv1) (a0 :: gv1))
(Permutation (merge l2 gv1) (merge l2 l1)), (Permutation (merge l2 gv1) (merge l1 l2)), (Permutation (merge l2 gv1) (merge l1 l1)), (Permutation (merge l2 gv1) (merge l1 gv1)), (Permutation (merge l2 gv1) (merge gv1 l2)), (Permutation (merge l2 gv1) (merge gv1 l1)), (Permutation (merge l2 gv1) (merge gv1 gv1)), (Permutation (merge l2 gv1) (l2 ++ l2)), (Permutation (merge l2 gv1) (l2 ++ l1)), (Permutation (merge l2 gv1) (l2 ++ gv1))
(Permutation (merge l2 gv1) (l1 ++ l1)), (Permutation (merge l2 gv1) (l1 ++ gv1)), (Permutation (merge l2 gv1) (gv1 ++ l2)), (Permutation (merge l2 gv1) (gv1 ++ l1)), (Permutation (merge l2 gv1) (gv1 ++ gv1)), (Permutation (merge l2 gv1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) gv1), (Permutation (merge l1 l2) (a :: l2))
(Permutation (merge l1 l2) (a :: gv1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: gv1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (a0 :: gv1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 gv1))
(Permutation (merge l1 l2) (merge l1 gv1)), (Permutation (merge l1 l2) (merge gv1 l2)), (Permutation (merge l1 l2) (merge gv1 l1)), (Permutation (merge l1 l2) (merge gv1 gv1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ gv1)), (Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) (l1 ++ gv1))
(Permutation (merge l1 l2) (gv1 ++ l1)), (Permutation (merge l1 l2) (gv1 ++ gv1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: gv1)), (Permutation (merge l1 l1) (b :: l2))
(Permutation (merge l1 l1) (b :: gv1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: gv1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 gv1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv1)), (Permutation (merge l1 l1) (merge gv1 l2))
(Permutation (merge l1 l1) (merge gv1 gv1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ gv1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ gv1)), (Permutation (merge l1 l1) (gv1 ++ l2)), (Permutation (merge l1 l1) (gv1 ++ l1)), (Permutation (merge l1 l1) (gv1 ++ gv1))
(Permutation (merge l1 gv1) l2), (Permutation (merge l1 gv1) l1), (Permutation (merge l1 gv1) gv1), (Permutation (merge l1 gv1) (a :: l2)), (Permutation (merge l1 gv1) (a :: l1)), (Permutation (merge l1 gv1) (a :: gv1)), (Permutation (merge l1 gv1) (b :: l2)), (Permutation (merge l1 gv1) (b :: l1)), (Permutation (merge l1 gv1) (b :: gv1)), (Permutation (merge l1 gv1) (a0 :: l2))
(Permutation (merge l1 gv1) (a0 :: gv1)), (Permutation (merge l1 gv1) (merge l2 l2)), (Permutation (merge l1 gv1) (merge l2 l1)), (Permutation (merge l1 gv1) (merge l2 gv1)), (Permutation (merge l1 gv1) (merge l1 l2)), (Permutation (merge l1 gv1) (merge l1 l1)), (Permutation (merge l1 gv1) (merge gv1 l2)), (Permutation (merge l1 gv1) (merge gv1 l1)), (Permutation (merge l1 gv1) (merge gv1 gv1)), (Permutation (merge l1 gv1) (l2 ++ l2))
(Permutation (merge l1 gv1) (l2 ++ gv1)), (Permutation (merge l1 gv1) (l1 ++ l2)), (Permutation (merge l1 gv1) (l1 ++ l1)), (Permutation (merge l1 gv1) (l1 ++ gv1)), (Permutation (merge l1 gv1) (gv1 ++ l2)), (Permutation (merge l1 gv1) (gv1 ++ l1)), (Permutation (merge l1 gv1) (gv1 ++ gv1)), (Permutation (merge l1 gv1) []), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 l2) l1)
(Permutation (merge gv1 l2) (a :: l2)), (Permutation (merge gv1 l2) (a :: l1)), (Permutation (merge gv1 l2) (a :: gv1)), (Permutation (merge gv1 l2) (b :: l2)), (Permutation (merge gv1 l2) (b :: l1)), (Permutation (merge gv1 l2) (b :: gv1)), (Permutation (merge gv1 l2) (a0 :: l2)), (Permutation (merge gv1 l2) (a0 :: l1)), (Permutation (merge gv1 l2) (a0 :: gv1)), (Permutation (merge gv1 l2) (merge l2 l2))
(Permutation (merge gv1 l2) (merge l2 gv1)), (Permutation (merge gv1 l2) (merge l1 l2)), (Permutation (merge gv1 l2) (merge l1 l1)), (Permutation (merge gv1 l2) (merge l1 gv1)), (Permutation (merge gv1 l2) (merge gv1 l1)), (Permutation (merge gv1 l2) (merge gv1 gv1)), (Permutation (merge gv1 l2) (l2 ++ l2)), (Permutation (merge gv1 l2) (l2 ++ l1)), (Permutation (merge gv1 l2) (l2 ++ gv1)), (Permutation (merge gv1 l2) (l1 ++ l2))
(Permutation (merge gv1 l2) (l1 ++ gv1)), (Permutation (merge gv1 l2) (gv1 ++ l2)), (Permutation (merge gv1 l2) (gv1 ++ l1)), (Permutation (merge gv1 l2) (gv1 ++ gv1)), (Permutation (merge gv1 l2) []), (Permutation (merge gv1 l1) l2), (Permutation (merge gv1 l1) l1), (Permutation (merge gv1 l1) gv1), (Permutation (merge gv1 l1) (a :: l2)), (Permutation (merge gv1 l1) (a :: l1))
(Permutation (merge gv1 l1) (b :: l2)), (Permutation (merge gv1 l1) (b :: l1)), (Permutation (merge gv1 l1) (b :: gv1)), (Permutation (merge gv1 l1) (a0 :: l2)), (Permutation (merge gv1 l1) (a0 :: l1)), (Permutation (merge gv1 l1) (a0 :: gv1)), (Permutation (merge gv1 l1) (merge l2 l2)), (Permutation (merge gv1 l1) (merge l2 l1)), (Permutation (merge gv1 l1) (merge l2 gv1)), (Permutation (merge gv1 l1) (merge l1 l2))
(Permutation (merge gv1 l1) (merge l1 gv1)), (Permutation (merge gv1 l1) (merge gv1 l2)), (Permutation (merge gv1 l1) (merge gv1 gv1)), (Permutation (merge gv1 l1) (l2 ++ l2)), (Permutation (merge gv1 l1) (l2 ++ l1)), (Permutation (merge gv1 l1) (l2 ++ gv1)), (Permutation (merge gv1 l1) (l1 ++ l2)), (Permutation (merge gv1 l1) (l1 ++ l1)), (Permutation (merge gv1 l1) (l1 ++ gv1)), (Permutation (merge gv1 l1) (gv1 ++ l2))
(Permutation (merge gv1 l1) (gv1 ++ gv1)), (Permutation (merge gv1 l1) []), (Permutation (merge gv1 gv1) l2), (Permutation (merge gv1 gv1) l1), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (a :: l2)), (Permutation (merge gv1 gv1) (a :: l1)), (Permutation (merge gv1 gv1) (a :: gv1)), (Permutation (merge gv1 gv1) (b :: l2)), (Permutation (merge gv1 gv1) (b :: l1))
(Permutation (merge gv1 gv1) (a0 :: l2)), (Permutation (merge gv1 gv1) (a0 :: l1)), (Permutation (merge gv1 gv1) (a0 :: gv1)), (Permutation (merge gv1 gv1) (merge l2 l2)), (Permutation (merge gv1 gv1) (merge l2 l1)), (Permutation (merge gv1 gv1) (merge l2 gv1)), (Permutation (merge gv1 gv1) (merge l1 l2)), (Permutation (merge gv1 gv1) (merge l1 l1)), (Permutation (merge gv1 gv1) (merge l1 gv1)), (Permutation (merge gv1 gv1) (merge gv1 l2))
(Permutation (merge gv1 gv1) (l2 ++ l2)), (Permutation (merge gv1 gv1) (l2 ++ l1)), (Permutation (merge gv1 gv1) (l2 ++ gv1)), (Permutation (merge gv1 gv1) (l1 ++ l2)), (Permutation (merge gv1 gv1) (l1 ++ l1)), (Permutation (merge gv1 gv1) (l1 ++ gv1)), (Permutation (merge gv1 gv1) (gv1 ++ l2)), (Permutation (merge gv1 gv1) (gv1 ++ l1)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) [])
(Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) gv1), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: gv1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: gv1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1))
(Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 gv1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (merge l1 gv1)), (Permutation (l2 ++ l2) (merge gv1 l2)), (Permutation (l2 ++ l2) (merge gv1 l1)), (Permutation (l2 ++ l2) (merge gv1 gv1)), (Permutation (l2 ++ l2) (l2 ++ l1))
(Permutation (l2 ++ l2) (l1 ++ l2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ gv1)), (Permutation (l2 ++ l2) (gv1 ++ l2)), (Permutation (l2 ++ l2) (gv1 ++ l1)), (Permutation (l2 ++ l2) (gv1 ++ gv1)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) gv1)
(Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: gv1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: gv1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (a0 :: gv1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 l1))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 gv1)), (Permutation (l2 ++ l1) (merge gv1 l2)), (Permutation (l2 ++ l1) (merge gv1 l1)), (Permutation (l2 ++ l1) (merge gv1 gv1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1))
(Permutation (l2 ++ l1) (gv1 ++ l2)), (Permutation (l2 ++ l1) (gv1 ++ l1)), (Permutation (l2 ++ l1) (gv1 ++ gv1)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ gv1) l2), (Permutation (l2 ++ gv1) l1), (Permutation (l2 ++ gv1) gv1), (Permutation (l2 ++ gv1) (a :: l2)), (Permutation (l2 ++ gv1) (a :: l1)), (Permutation (l2 ++ gv1) (a :: gv1))
(Permutation (l2 ++ gv1) (b :: l1)), (Permutation (l2 ++ gv1) (b :: gv1)), (Permutation (l2 ++ gv1) (a0 :: l2)), (Permutation (l2 ++ gv1) (a0 :: l1)), (Permutation (l2 ++ gv1) (a0 :: gv1)), (Permutation (l2 ++ gv1) (merge l2 l2)), (Permutation (l2 ++ gv1) (merge l2 l1)), (Permutation (l2 ++ gv1) (merge l2 gv1)), (Permutation (l2 ++ gv1) (merge l1 l2)), (Permutation (l2 ++ gv1) (merge l1 l1))
(Permutation (l2 ++ gv1) (merge gv1 l2)), (Permutation (l2 ++ gv1) (merge gv1 l1)), (Permutation (l2 ++ gv1) (merge gv1 gv1)), (Permutation (l2 ++ gv1) (l2 ++ l2)), (Permutation (l2 ++ gv1) (l2 ++ l1)), (Permutation (l2 ++ gv1) (l1 ++ l2)), (Permutation (l2 ++ gv1) (l1 ++ l1)), (Permutation (l2 ++ gv1) (l1 ++ gv1)), (Permutation (l2 ++ gv1) (gv1 ++ l2)), (Permutation (l2 ++ gv1) (gv1 ++ l1))
(Permutation (l2 ++ gv1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) gv1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1)), (Permutation (l1 ++ l2) (a :: gv1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: gv1))
(Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: gv1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 gv1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 gv1)), (Permutation (l1 ++ l2) (merge gv1 l2)), (Permutation (l1 ++ l2) (merge gv1 l1))
(Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ gv1)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv1)), (Permutation (l1 ++ l2) (gv1 ++ l2)), (Permutation (l1 ++ l2) (gv1 ++ l1)), (Permutation (l1 ++ l2) (gv1 ++ gv1)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ l1) l2)
(Permutation (l1 ++ l1) gv1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: gv1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: gv1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: gv1))
(Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 gv1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 gv1)), (Permutation (l1 ++ l1) (merge gv1 l2)), (Permutation (l1 ++ l1) (merge gv1 l1)), (Permutation (l1 ++ l1) (merge gv1 gv1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1))
(Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) (l1 ++ gv1)), (Permutation (l1 ++ l1) (gv1 ++ l2)), (Permutation (l1 ++ l1) (gv1 ++ l1)), (Permutation (l1 ++ l1) (gv1 ++ gv1)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ gv1) l2), (Permutation (l1 ++ gv1) l1), (Permutation (l1 ++ gv1) gv1), (Permutation (l1 ++ gv1) (a :: l2))
(Permutation (l1 ++ gv1) (a :: gv1)), (Permutation (l1 ++ gv1) (b :: l2)), (Permutation (l1 ++ gv1) (b :: l1)), (Permutation (l1 ++ gv1) (b :: gv1)), (Permutation (l1 ++ gv1) (a0 :: l2)), (Permutation (l1 ++ gv1) (a0 :: l1)), (Permutation (l1 ++ gv1) (a0 :: gv1)), (Permutation (l1 ++ gv1) (merge l2 l2)), (Permutation (l1 ++ gv1) (merge l2 l1)), (Permutation (l1 ++ gv1) (merge l2 gv1))
(Permutation (l1 ++ gv1) (merge l1 l1)), (Permutation (l1 ++ gv1) (merge l1 gv1)), (Permutation (l1 ++ gv1) (merge gv1 l2)), (Permutation (l1 ++ gv1) (merge gv1 l1)), (Permutation (l1 ++ gv1) (merge gv1 gv1)), (Permutation (l1 ++ gv1) (l2 ++ l2)), (Permutation (l1 ++ gv1) (l2 ++ l1)), (Permutation (l1 ++ gv1) (l2 ++ gv1)), (Permutation (l1 ++ gv1) (l1 ++ l2)), (Permutation (l1 ++ gv1) (l1 ++ l1))
(Permutation (l1 ++ gv1) (gv1 ++ l1)), (Permutation (l1 ++ gv1) (gv1 ++ gv1)), (Permutation (l1 ++ gv1) []), (Permutation (gv1 ++ l2) l2), (Permutation (gv1 ++ l2) l1), (Permutation (gv1 ++ l2) gv1), (Permutation (gv1 ++ l2) (a :: l2)), (Permutation (gv1 ++ l2) (a :: l1)), (Permutation (gv1 ++ l2) (a :: gv1)), (Permutation (gv1 ++ l2) (b :: l2))
(Permutation (gv1 ++ l2) (b :: gv1)), (Permutation (gv1 ++ l2) (a0 :: l2)), (Permutation (gv1 ++ l2) (a0 :: l1)), (Permutation (gv1 ++ l2) (a0 :: gv1)), (Permutation (gv1 ++ l2) (merge l2 l2)), (Permutation (gv1 ++ l2) (merge l2 l1)), (Permutation (gv1 ++ l2) (merge l2 gv1)), (Permutation (gv1 ++ l2) (merge l1 l2)), (Permutation (gv1 ++ l2) (merge l1 l1)), (Permutation (gv1 ++ l2) (merge l1 gv1))
(Permutation (gv1 ++ l2) (merge gv1 l1)), (Permutation (gv1 ++ l2) (merge gv1 gv1)), (Permutation (gv1 ++ l2) (l2 ++ l2)), (Permutation (gv1 ++ l2) (l2 ++ l1)), (Permutation (gv1 ++ l2) (l2 ++ gv1)), (Permutation (gv1 ++ l2) (l1 ++ l2)), (Permutation (gv1 ++ l2) (l1 ++ l1)), (Permutation (gv1 ++ l2) (l1 ++ gv1)), (Permutation (gv1 ++ l2) (gv1 ++ l1)), (Permutation (gv1 ++ l2) (gv1 ++ gv1))
(Permutation (gv1 ++ l1) l2), (Permutation (gv1 ++ l1) l1), (Permutation (gv1 ++ l1) gv1), (Permutation (gv1 ++ l1) (a :: l2)), (Permutation (gv1 ++ l1) (a :: l1)), (Permutation (gv1 ++ l1) (a :: gv1)), (Permutation (gv1 ++ l1) (b :: l2)), (Permutation (gv1 ++ l1) (b :: l1)), (Permutation (gv1 ++ l1) (b :: gv1)), (Permutation (gv1 ++ l1) (a0 :: l2))
(Permutation (gv1 ++ l1) (a0 :: gv1)), (Permutation (gv1 ++ l1) (merge l2 l2)), (Permutation (gv1 ++ l1) (merge l2 l1)), (Permutation (gv1 ++ l1) (merge l2 gv1)), (Permutation (gv1 ++ l1) (merge l1 l2)), (Permutation (gv1 ++ l1) (merge l1 l1)), (Permutation (gv1 ++ l1) (merge l1 gv1)), (Permutation (gv1 ++ l1) (merge gv1 l2)), (Permutation (gv1 ++ l1) (merge gv1 l1)), (Permutation (gv1 ++ l1) (merge gv1 gv1))
(Permutation (gv1 ++ l1) (l2 ++ l1)), (Permutation (gv1 ++ l1) (l2 ++ gv1)), (Permutation (gv1 ++ l1) (l1 ++ l2)), (Permutation (gv1 ++ l1) (l1 ++ l1)), (Permutation (gv1 ++ l1) (l1 ++ gv1)), (Permutation (gv1 ++ l1) (gv1 ++ l2)), (Permutation (gv1 ++ l1) (gv1 ++ gv1)), (Permutation (gv1 ++ l1) []), (Permutation (gv1 ++ gv1) l2), (Permutation (gv1 ++ gv1) l1)
(Permutation (gv1 ++ gv1) (a :: l2)), (Permutation (gv1 ++ gv1) (a :: l1)), (Permutation (gv1 ++ gv1) (a :: gv1)), (Permutation (gv1 ++ gv1) (b :: l2)), (Permutation (gv1 ++ gv1) (b :: l1)), (Permutation (gv1 ++ gv1) (b :: gv1)), (Permutation (gv1 ++ gv1) (a0 :: l2)), (Permutation (gv1 ++ gv1) (a0 :: l1)), (Permutation (gv1 ++ gv1) (a0 :: gv1)), (Permutation (gv1 ++ gv1) (merge l2 l2))
(Permutation (gv1 ++ gv1) (merge l2 gv1)), (Permutation (gv1 ++ gv1) (merge l1 l2)), (Permutation (gv1 ++ gv1) (merge l1 l1)), (Permutation (gv1 ++ gv1) (merge l1 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 l2)), (Permutation (gv1 ++ gv1) (merge gv1 l1)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (l2 ++ l2)), (Permutation (gv1 ++ gv1) (l2 ++ l1)), (Permutation (gv1 ++ gv1) (l2 ++ gv1))
(Permutation (gv1 ++ gv1) (l1 ++ l1)), (Permutation (gv1 ++ gv1) (l1 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ l2)), (Permutation (gv1 ++ gv1) (gv1 ++ l1)), (Permutation (gv1 ++ gv1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] gv1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1))
(Permutation [] (b :: l2)), (Permutation [] (b :: l1)), (Permutation [] (b :: gv1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: gv1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l2 gv1)), (Permutation [] (merge l1 l2))
(Permutation [] (merge l1 gv1)), (Permutation [] (merge gv1 l2)), (Permutation [] (merge gv1 l1)), (Permutation [] (merge gv1 gv1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ gv1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ gv1))
(Permutation [] (gv1 ++ l1)), (Permutation [] (gv1 ++ gv1)), (In a (a :: l2)), (In a (a :: l1)), (In a (a :: gv1)), (In a (b :: l2)), (In a (b :: l1)), (In a (b :: gv1)), (In a (a0 :: l2)), (In a (a0 :: l1))
(In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l2 gv1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (merge l1 gv1)), (In a (merge gv1 l2)), (In a (merge gv1 l1)), (In a (merge gv1 gv1)), (In a (l2 ++ l2))
(In a (l2 ++ gv1)), (In a (l1 ++ l2)), (In a (l1 ++ l1)), (In a (l1 ++ gv1)), (In a (gv1 ++ l2)), (In a (gv1 ++ l1)), (In a (gv1 ++ gv1)), (In b (a :: l2)), (In b (a :: l1)), (In b (a :: gv1))
(In b (b :: l1)), (In b (b :: gv1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (a0 :: gv1)), (In b (merge l2 l2)), (In b (merge l2 l1)), (In b (merge l2 gv1)), (In b (merge l1 l2)), (In b (merge l1 l1))
(In b (merge gv1 l2)), (In b (merge gv1 l1)), (In b (merge gv1 gv1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l2 ++ gv1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In b (l1 ++ gv1)), (In b (gv1 ++ l2))
(In b (gv1 ++ gv1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (a :: gv1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (b :: gv1)), (In a0 (a0 :: l2)), (In a0 (a0 :: l1)), (In a0 (a0 :: gv1))
(In a0 (merge l2 l1)), (In a0 (merge l2 gv1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (merge l1 gv1)), (In a0 (merge gv1 l2)), (In a0 (merge gv1 l1)), (In a0 (merge gv1 gv1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1))
(In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ gv1)), (In a0 (gv1 ++ l2)), (In a0 (gv1 ++ l1)), (In a0 (gv1 ++ gv1)), (In (length l2) l2), (In (length l2) l1), (In (length l2) gv1), (In (length l2) (a :: l2))
(In (length l2) (a :: gv1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (b :: gv1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: gv1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 gv1))
(In (length l2) (merge l1 l1)), (In (length l2) (merge l1 gv1)), (In (length l2) (merge gv1 l2)), (In (length l2) (merge gv1 l1)), (In (length l2) (merge gv1 gv1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ gv1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1))
(In (length l2) (gv1 ++ l2)), (In (length l2) (gv1 ++ l1)), (In (length l2) (gv1 ++ gv1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) gv1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (a :: gv1)), (In (length l1) (b :: l2))
(In (length l1) (b :: gv1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: gv1)), (In (length l1) (merge l2 l2)), (In (length l1) (merge l2 l1)), (In (length l1) (merge l2 gv1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 gv1))
(In (length l1) (merge gv1 l1)), (In (length l1) (merge gv1 gv1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ gv1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ gv1)), (In (length l1) (gv1 ++ l2)), (In (length l1) (gv1 ++ l1))
(In (length gv1) l2), (In (length gv1) l1), (In (length gv1) gv1), (In (length gv1) (a :: l2)), (In (length gv1) (a :: l1)), (In (length gv1) (a :: gv1)), (In (length gv1) (b :: l2)), (In (length gv1) (b :: l1)), (In (length gv1) (b :: gv1)), (In (length gv1) (a0 :: l2))
(In (length gv1) (a0 :: gv1)), (In (length gv1) (merge l2 l2)), (In (length gv1) (merge l2 l1)), (In (length gv1) (merge l2 gv1)), (In (length gv1) (merge l1 l2)), (In (length gv1) (merge l1 l1)), (In (length gv1) (merge l1 gv1)), (In (length gv1) (merge gv1 l2)), (In (length gv1) (merge gv1 l1)), (In (length gv1) (merge gv1 gv1))
(In (length gv1) (l2 ++ l1)), (In (length gv1) (l2 ++ gv1)), (In (length gv1) (l1 ++ l2)), (In (length gv1) (l1 ++ l1)), (In (length gv1) (l1 ++ gv1)), (In (length gv1) (gv1 ++ l2)), (In (length gv1) (gv1 ++ l1)), (In (length gv1) (gv1 ++ gv1)), (a < length l2), (a < length l1)
(b < length l2), (b < length l1), (b < length gv1), (a0 < length l2), (a0 < length l1), (a0 < length gv1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1)
(length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2), (length l1 < length gv1), (length gv1 < a), (length gv1 < b), (length gv1 < a0), (length gv1 < length l2), (length gv1 < length l1)
(a <= length l1), (a <= length gv1), (b <= length l2), (b <= length l1), (b <= length gv1), (a0 <= length l2), (a0 <= length l1), (a0 <= length gv1), (length l2 <= a), (length l2 <= b)
(length l2 <= length l1), (length l2 <= length gv1), (length l1 <= a), (length l1 <= b), (length l1 <= a0), (length l1 <= length l2), (length l1 <= length gv1), (length gv1 <= a), (length gv1 <= b), (length gv1 <= a0)
(length gv1 <= length l1), (~ a <=* l2), (~ a <=* l1), (~ a <=* gv1), (~ b <=* l2), (~ b <=* l1), (~ b <=* gv1), (~ a0 <=* l2), (~ a0 <=* l1), (~ a0 <=* gv1)
(~ sorted l1), (~ sorted gv1), (~ Permutation l2 l2), (~ Permutation l2 l1), (~ Permutation l2 gv1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ Permutation l1 gv1), (~ Permutation gv1 l2), (~ Permutation gv1 l1)
(~ In a l2), (~ In a l1), (~ In a gv1), (~ In b l2), (~ In b l1), (~ In b gv1), (~ In a0 l2), (~ In a0 l1), (~ In a0 gv1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l2 <> gv1), (l1 <> l2), (l1 <> l1)
(gv1 <> l2), (gv1 <> l1), (gv1 <> gv1), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l2), (None = Some l1), (None = Some gv1), (a :: l2 = l2), (a :: l2 = l1), (a :: l2 = gv1), (a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l2 gv1)
(a :: l2 = merge l1 l1), (a :: l2 = merge l1 gv1), (a :: l2 = merge gv1 l2), (a :: l2 = merge gv1 l1), (a :: l2 = merge gv1 gv1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ gv1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1)
(a :: l2 = gv1 ++ l2), (a :: l2 = gv1 ++ l1), (a :: l2 = gv1 ++ gv1), (a :: l2 = []), (a :: l1 = l2), (a :: l1 = l1), (a :: l1 = gv1), (a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l2 gv1)
(a :: l1 = merge l1 l1), (a :: l1 = merge l1 gv1), (a :: l1 = merge gv1 l2), (a :: l1 = merge gv1 l1), (a :: l1 = merge gv1 gv1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ gv1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1)
(a :: l1 = gv1 ++ l2), (a :: l1 = gv1 ++ l1), (a :: l1 = gv1 ++ gv1), (a :: l1 = []), (a :: gv1 = l2), (a :: gv1 = l1), (a :: gv1 = gv1), (a :: gv1 = merge l2 l2), (a :: gv1 = merge l2 l1), (a :: gv1 = merge l2 gv1)
(a :: gv1 = merge l1 l1), (a :: gv1 = merge l1 gv1), (a :: gv1 = merge gv1 l2), (a :: gv1 = merge gv1 l1), (a :: gv1 = merge gv1 gv1), (a :: gv1 = l2 ++ l2), (a :: gv1 = l2 ++ l1), (a :: gv1 = l2 ++ gv1), (a :: gv1 = l1 ++ l2), (a :: gv1 = l1 ++ l1)
(a :: gv1 = gv1 ++ l2), (a :: gv1 = gv1 ++ l1), (a :: gv1 = gv1 ++ gv1), (a :: gv1 = []), (b :: l2 = l2), (b :: l2 = l1), (b :: l2 = gv1), (b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l2 gv1)
(b :: l2 = merge l1 l1), (b :: l2 = merge l1 gv1), (b :: l2 = merge gv1 l2), (b :: l2 = merge gv1 l1), (b :: l2 = merge gv1 gv1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ gv1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1)
(b :: l2 = gv1 ++ l2), (b :: l2 = gv1 ++ l1), (b :: l2 = gv1 ++ gv1), (b :: l2 = []), (b :: l1 = l2), (b :: l1 = l1), (b :: l1 = gv1), (b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l2 gv1)
(b :: l1 = merge l1 l1), (b :: l1 = merge l1 gv1), (b :: l1 = merge gv1 l2), (b :: l1 = merge gv1 l1), (b :: l1 = merge gv1 gv1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ gv1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1)
(b :: l1 = gv1 ++ l2), (b :: l1 = gv1 ++ l1), (b :: l1 = gv1 ++ gv1), (b :: l1 = []), (b :: gv1 = l2), (b :: gv1 = l1), (b :: gv1 = gv1), (b :: gv1 = merge l2 l2), (b :: gv1 = merge l2 l1), (b :: gv1 = merge l2 gv1)
(b :: gv1 = merge l1 l1), (b :: gv1 = merge l1 gv1), (b :: gv1 = merge gv1 l2), (b :: gv1 = merge gv1 l1), (b :: gv1 = merge gv1 gv1), (b :: gv1 = l2 ++ l2), (b :: gv1 = l2 ++ l1), (b :: gv1 = l2 ++ gv1), (b :: gv1 = l1 ++ l2), (b :: gv1 = l1 ++ l1)
(b :: gv1 = gv1 ++ l2), (b :: gv1 = gv1 ++ l1), (b :: gv1 = gv1 ++ gv1), (b :: gv1 = []), (a0 :: l2 = l2), (a0 :: l2 = l1), (a0 :: l2 = gv1), (a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l2 gv1)
(a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 gv1), (a0 :: l2 = merge gv1 l2), (a0 :: l2 = merge gv1 l1), (a0 :: l2 = merge gv1 gv1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ gv1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1)
(a0 :: l2 = gv1 ++ l2), (a0 :: l2 = gv1 ++ l1), (a0 :: l2 = gv1 ++ gv1), (a0 :: l2 = []), (a0 :: l1 = l2), (a0 :: l1 = l1), (a0 :: l1 = gv1), (a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l2 gv1)
(a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 gv1), (a0 :: l1 = merge gv1 l2), (a0 :: l1 = merge gv1 l1), (a0 :: l1 = merge gv1 gv1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ gv1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1)
(a0 :: l1 = gv1 ++ l2), (a0 :: l1 = gv1 ++ l1), (a0 :: l1 = gv1 ++ gv1), (a0 :: l1 = []), (a0 :: gv1 = l2), (a0 :: gv1 = l1), (a0 :: gv1 = gv1), (a0 :: gv1 = merge l2 l2), (a0 :: gv1 = merge l2 l1), (a0 :: gv1 = merge l2 gv1)
(a0 :: gv1 = merge l1 l1), (a0 :: gv1 = merge l1 gv1), (a0 :: gv1 = merge gv1 l2), (a0 :: gv1 = merge gv1 l1), (a0 :: gv1 = merge gv1 gv1), (a0 :: gv1 = l2 ++ l2), (a0 :: gv1 = l2 ++ l1), (a0 :: gv1 = l2 ++ gv1), (a0 :: gv1 = l1 ++ l2), (a0 :: gv1 = l1 ++ l1)
(a0 :: gv1 = gv1 ++ l2), (a0 :: gv1 = gv1 ++ l1), (a0 :: gv1 = gv1 ++ gv1), (a0 :: gv1 = []), (merge l2 l2 = l2), (merge l2 l2 = l1), (merge l2 l2 = gv1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ gv1)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ gv1), (merge l2 l2 = gv1 ++ l2), (merge l2 l2 = gv1 ++ l1), (merge l2 l2 = gv1 ++ gv1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = gv1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1), (merge l2 l1 = l1 ++ gv1), (merge l2 l1 = gv1 ++ l2), (merge l2 l1 = gv1 ++ l1), (merge l2 l1 = gv1 ++ gv1), (merge l2 gv1 = l2), (merge l2 gv1 = l1), (merge l2 gv1 = gv1), (merge l2 gv1 = l2 ++ l2)
(merge l2 gv1 = l2 ++ gv1), (merge l2 gv1 = l1 ++ l2), (merge l2 gv1 = l1 ++ l1), (merge l2 gv1 = l1 ++ gv1), (merge l2 gv1 = gv1 ++ l2), (merge l2 gv1 = gv1 ++ l1), (merge l2 gv1 = gv1 ++ gv1), (merge l1 l2 = l2), (merge l1 l2 = l1), (merge l1 l2 = gv1)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ gv1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ gv1), (merge l1 l2 = gv1 ++ l2), (merge l1 l2 = gv1 ++ l1), (merge l1 l2 = gv1 ++ gv1), (merge l1 l1 = l2), (merge l1 l1 = l1)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l2 ++ gv1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ gv1), (merge l1 l1 = gv1 ++ l2), (merge l1 l1 = gv1 ++ l1), (merge l1 l1 = gv1 ++ gv1), (merge l1 gv1 = l2)
(merge l1 gv1 = gv1), (merge l1 gv1 = l2 ++ l2), (merge l1 gv1 = l2 ++ l1), (merge l1 gv1 = l2 ++ gv1), (merge l1 gv1 = l1 ++ l2), (merge l1 gv1 = l1 ++ l1), (merge l1 gv1 = l1 ++ gv1), (merge l1 gv1 = gv1 ++ l2), (merge l1 gv1 = gv1 ++ l1), (merge l1 gv1 = gv1 ++ gv1)
(merge gv1 l2 = l1), (merge gv1 l2 = gv1), (merge gv1 l2 = l2 ++ l2), (merge gv1 l2 = l2 ++ l1), (merge gv1 l2 = l2 ++ gv1), (merge gv1 l2 = l1 ++ l2), (merge gv1 l2 = l1 ++ l1), (merge gv1 l2 = l1 ++ gv1), (merge gv1 l2 = gv1 ++ l2), (merge gv1 l2 = gv1 ++ l1)
(merge gv1 l1 = l2), (merge gv1 l1 = l1), (merge gv1 l1 = gv1), (merge gv1 l1 = l2 ++ l2), (merge gv1 l1 = l2 ++ l1), (merge gv1 l1 = l2 ++ gv1), (merge gv1 l1 = l1 ++ l2), (merge gv1 l1 = l1 ++ l1), (merge gv1 l1 = l1 ++ gv1), (merge gv1 l1 = gv1 ++ l2)
(merge gv1 l1 = gv1 ++ gv1), (merge gv1 gv1 = l2), (merge gv1 gv1 = l1), (merge gv1 gv1 = gv1), (merge gv1 gv1 = l2 ++ l2), (merge gv1 gv1 = l2 ++ l1), (merge gv1 gv1 = l2 ++ gv1), (merge gv1 gv1 = l1 ++ l2), (merge gv1 gv1 = l1 ++ l1), (merge gv1 gv1 = l1 ++ gv1)
(merge gv1 gv1 = gv1 ++ l1), (merge gv1 gv1 = gv1 ++ gv1), (l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l2 = gv1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l2 ++ l1 = gv1), (l2 ++ gv1 = l2), (l2 ++ gv1 = l1)
(l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l2 = gv1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), (l1 ++ l1 = gv1), (l1 ++ gv1 = l2), (l1 ++ gv1 = l1), (l1 ++ gv1 = gv1), (gv1 ++ l2 = l2)
(gv1 ++ l2 = gv1), (gv1 ++ l1 = l2), (gv1 ++ l1 = l1), (gv1 ++ l1 = gv1), (gv1 ++ gv1 = l2), (gv1 ++ gv1 = l1), (gv1 ++ gv1 = gv1), ([] = l2), ([] = l1), ([] = gv1)
([] = merge l2 l1), ([] = merge l2 gv1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = merge l1 gv1), ([] = merge gv1 l2), ([] = merge gv1 l1), ([] = merge gv1 gv1), ([] = l2 ++ l2), ([] = l2 ++ l1)
([] = l1 ++ l2), ([] = l1 ++ l1), ([] = l1 ++ gv1), ([] = gv1 ++ l2), ([] = gv1 ++ l1), ([] = gv1 ++ gv1), (None = Some a), (None = Some b), (None = Some a0), ((l2, l2) = split l2)
((l2, l2) = split gv1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l2, l1) = split gv1), ((l2, gv1) = split l2), ((l2, gv1) = split l1), ((l2, gv1) = split gv1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l2) = split gv1)
((l1, l1) = split l1), ((l1, l1) = split gv1), ((l1, gv1) = split l2), ((l1, gv1) = split l1), ((l1, gv1) = split gv1), ((gv1, l2) = split l2), ((gv1, l2) = split l1), ((gv1, l2) = split gv1), ((gv1, l1) = split l2), ((gv1, l1) = split l1)
((gv1, gv1) = split l2), ((gv1, gv1) = split l1), ((gv1, gv1) = split gv1), (length l2 = a), (length l2 = b), (length l2 = a0), (length l1 = a), (length l1 = b), (length l1 = a0), (length gv1 = a)
(length gv1 = a0)

Label: 4 (1)
Abducted Assumption: (sorted (merge (a :: l1) (a0 :: l2)))
Positive Examples:
   [a := 3; a0 := 1; b := 3; l1 := []; l2 := []; gv2 := [3; 3]]
   [a := 4; a0 := 1; b := 3; l1 := []; l2 := []; gv2 := [3; 4]]
   [a := 4; a0 := 1; b := 3; l1 := []; l2 := [4]; gv2 := [3; 4]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []; gv2 := [4; 5]]
   [a := 3; a0 := 0; b := 3; l1 := []; l2 := []; gv2 := [3; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [2; 2]; l2 := [0]; gv2 := [1; 2; 2; 2]]
   [a := 2; a0 := 0; b := 1; l1 := []; l2 := [1; 2]; gv2 := [1; 2]]
   [a := 1; a0 := 0; b := 1; l1 := []; l2 := [0; 0; 2]; gv2 := [1; 1]]
   [a := 1; a0 := 0; b := 1; l1 := []; l2 := [3]; gv2 := [1; 1]]
   [a := 2; a0 := 0; b := 1; l1 := [2]; l2 := [0; 0]; gv2 := [1; 2; 2]]
   etc ...

Negative Examples:
   [a := 4; a0 := 1; b := 2; l1 := []; l2 := [5; 0]; gv2 := [2; 4]]
   [a := 3; a0 := 1; b := 3; l1 := []; l2 := [0; 1; 0]; gv2 := [3; 3]]
   [a := 3; a0 := 1; b := 2; l1 := []; l2 := [0]; gv2 := [2; 3]]
   [a := 3; a0 := 1; b := 2; l1 := []; l2 := [3; 0]; gv2 := [2; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [4; 4]; l2 := [3; 0; 1]; gv2 := [1; 2; 4; 4]]
   [a := 4; a0 := 1; b := 2; l1 := [2; 2; 4]; l2 := [2; 4]; gv2 := [2; 4; 2; 2; 4]]
   [a := 2; a0 := 0; b := 1; l1 := [2; 1]; l2 := [0]; gv2 := [1; 2; 2; 1]]
   [a := 4; a0 := 1; b := 2; l1 := [3]; l2 := [4; 4]; gv2 := [2; 4; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [2]; l2 := [3; 3; 0; 4]; gv2 := [1; 2; 2]]
   [a := 4; a0 := 1; b := 2; l1 := [3]; l2 := [2; 0; 3]; gv2 := [2; 4; 3]]
   etc ...

(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0), (a <=* gv2), (b <=* gv2), (a0 <=* gv2), (sorted gv2), (Permutation l1 gv2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2)
(In a gv2), (In b gv2), (In a0 gv2), (l1 = gv2), (l2 = gv2), (gv2 = l1), (gv2 = l2), (gv2 = gv2), (false = sorted_bool gv2), (true = sorted_bool gv2)
(a <=* b :: gv2), (a <=* a0 :: gv2), (a <=* merge l1 gv2), (a <=* merge l2 gv2), (a <=* merge gv2 l1), (a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ gv2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1)
(a <=* gv2 ++ gv2), (b <=* a :: gv2), (b <=* b :: gv2), (b <=* a0 :: gv2), (b <=* merge l1 gv2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ gv2)
(b <=* gv2 ++ l1), (b <=* gv2 ++ l2), (b <=* gv2 ++ gv2), (a0 <=* a :: gv2), (a0 <=* b :: gv2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 gv2), (a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2)
(a0 <=* l1 ++ gv2), (a0 <=* l2 ++ gv2), (a0 <=* gv2 ++ l1), (a0 <=* gv2 ++ l2), (a0 <=* gv2 ++ gv2), (length l1 <=* gv2), (length l1 <=* a :: gv2), (length l1 <=* b :: gv2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 gv2)
(length l1 <=* merge gv2 l1), (length l1 <=* merge gv2 l2), (length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2), (length l2 <=* gv2), (length l2 <=* a :: gv2)
(length l2 <=* a0 :: gv2), (length l2 <=* merge l1 gv2), (length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2)
(length gv2 <=* l1), (length gv2 <=* l2), (length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1)
(length gv2 <=* a0 :: gv2), (length gv2 <=* merge l1 l1), (length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2)
(length gv2 <=* l1 ++ l2), (length gv2 <=* l1 ++ gv2), (length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: gv2))
(sorted (a0 :: gv2)), (sorted (merge l1 gv2)), (sorted (merge l2 gv2)), (sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1)), (sorted (gv2 ++ l2))
(Permutation l1 (a :: gv2)), (Permutation l1 (b :: gv2)), (Permutation l1 (a0 :: gv2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ gv2))
(Permutation l1 (gv2 ++ l2)), (Permutation l1 (gv2 ++ gv2)), (Permutation l2 (a :: gv2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2))
(Permutation l2 (l2 ++ gv2)), (Permutation l2 (gv2 ++ l1)), (Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2))
(Permutation gv2 (a0 :: l2)), (Permutation gv2 (a0 :: gv2)), (Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2))
(Permutation gv2 (l1 ++ l1)), (Permutation gv2 (l1 ++ l2)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 [])
(Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (b :: gv2)), (Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ gv2)), (Permutation (a :: l1) (l2 ++ gv2))
(Permutation (a :: l1) (gv2 ++ l2)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: gv2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2))
(Permutation (a :: l2) (l1 ++ gv2)), (Permutation (a :: l2) (l2 ++ gv2)), (Permutation (a :: l2) (gv2 ++ l1)), (Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2))
(Permutation (a :: gv2) (b :: l2)), (Permutation (a :: gv2) (b :: gv2)), (Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2))
(Permutation (a :: gv2) (merge gv2 l1)), (Permutation (a :: gv2) (merge gv2 l2)), (Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1))
(Permutation (a :: gv2) (gv2 ++ gv2)), (Permutation (a :: gv2) []), (Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: gv2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2))
(Permutation (b :: l1) (l1 ++ gv2)), (Permutation (b :: l1) (l2 ++ gv2)), (Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l2) gv2), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 gv2))
(Permutation (b :: l2) (merge gv2 l1)), (Permutation (b :: l2) (merge gv2 l2)), (Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2)
(Permutation (b :: gv2) (a :: l1)), (Permutation (b :: gv2) (a :: l2)), (Permutation (b :: gv2) (a :: gv2)), (Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2))
(Permutation (b :: gv2) (merge l2 l1)), (Permutation (b :: gv2) (merge l2 l2)), (Permutation (b :: gv2) (merge l2 gv2)), (Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1))
(Permutation (b :: gv2) (l2 ++ gv2)), (Permutation (b :: gv2) (gv2 ++ l1)), (Permutation (b :: gv2) (gv2 ++ l2)), (Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: gv2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 gv2))
(Permutation (a0 :: l1) (merge gv2 l1)), (Permutation (a0 :: l1) (merge gv2 l2)), (Permutation (a0 :: l1) (merge gv2 gv2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: gv2))
(Permutation (a0 :: l2) (a0 :: gv2)), (Permutation (a0 :: l2) (merge l1 gv2)), (Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ gv2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2))
(Permutation (a0 :: gv2) l1), (Permutation (a0 :: gv2) l2), (Permutation (a0 :: gv2) gv2), (Permutation (a0 :: gv2) (a :: l1)), (Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1))
(Permutation (a0 :: gv2) (merge l1 l1)), (Permutation (a0 :: gv2) (merge l1 l2)), (Permutation (a0 :: gv2) (merge l1 gv2)), (Permutation (a0 :: gv2) (merge l2 l1)), (Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1))
(Permutation (a0 :: gv2) (l1 ++ gv2)), (Permutation (a0 :: gv2) (l2 ++ l1)), (Permutation (a0 :: gv2) (l2 ++ l2)), (Permutation (a0 :: gv2) (l2 ++ gv2)), (Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (a0 :: gv2)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (merge l2 gv2)), (Permutation (merge l1 l1) (merge gv2 l1)), (Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2))
(Permutation (merge l1 l2) gv2), (Permutation (merge l1 l2) (a :: gv2)), (Permutation (merge l1 l2) (b :: gv2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2)), (Permutation (merge l1 l2) (l1 ++ gv2))
(Permutation (merge l1 l2) (gv2 ++ l1)), (Permutation (merge l1 l2) (gv2 ++ l2)), (Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) l1), (Permutation (merge l1 gv2) l2), (Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1))
(Permutation (merge l1 gv2) (b :: gv2)), (Permutation (merge l1 gv2) (a0 :: l1)), (Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2)), (Permutation (merge l1 gv2) (merge l1 l1)), (Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1))
(Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2)), (Permutation (merge l1 gv2) (l2 ++ l1)), (Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2))
(Permutation (merge l2 l1) gv2), (Permutation (merge l2 l1) (a :: gv2)), (Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 gv2)), (Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ gv2))
(Permutation (merge l2 l1) (gv2 ++ l1)), (Permutation (merge l2 l1) (gv2 ++ l2)), (Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1))
(Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (l1 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1))
(Permutation (merge l2 gv2) (a :: gv2)), (Permutation (merge l2 gv2) (b :: l1)), (Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1)), (Permutation (merge l2 gv2) (a0 :: l2)), (Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2))
(Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (merge gv2 l1)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1)), (Permutation (merge l2 gv2) (l1 ++ l2)), (Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2))
(Permutation (merge l2 gv2) (gv2 ++ l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2), (Permutation (merge gv2 l1) gv2), (Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1))
(Permutation (merge gv2 l1) (b :: gv2)), (Permutation (merge gv2 l1) (a0 :: l1)), (Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1)), (Permutation (merge gv2 l1) (merge l1 l2)), (Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2))
(Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1)), (Permutation (merge gv2 l1) (l2 ++ l2)), (Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2))
(Permutation (merge gv2 l2) l1), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2)), (Permutation (merge gv2 l2) (a :: gv2)), (Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1))
(Permutation (merge gv2 l2) (a0 :: gv2)), (Permutation (merge gv2 l2) (merge l1 l1)), (Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1)), (Permutation (merge gv2 l2) (merge l2 l2)), (Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1))
(Permutation (merge gv2 l2) (l1 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l1)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1)), (Permutation (merge gv2 l2) (gv2 ++ l2)), (Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2)
(Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (a :: l2)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2)), (Permutation (merge gv2 gv2) (b :: gv2)), (Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1))
(Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l2 l1)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1)), (Permutation (merge gv2 gv2) (merge gv2 l2)), (Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1))
(Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: gv2)), (Permutation (l1 ++ l1) (merge l1 gv2))
(Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge gv2 l2)), (Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ gv2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l2) gv2), (Permutation (l1 ++ l2) (a :: gv2))
(Permutation (l1 ++ l2) (a0 :: gv2)), (Permutation (l1 ++ l2) (merge l1 gv2)), (Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ gv2)), (Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2))
(Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) l2), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2)), (Permutation (l1 ++ gv2) (b :: l1)), (Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1))
(Permutation (l1 ++ gv2) (a0 :: gv2)), (Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2)), (Permutation (l1 ++ gv2) (merge l2 gv2)), (Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2))
(Permutation (l1 ++ gv2) (l1 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ l1)), (Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2)), (Permutation (l1 ++ gv2) (gv2 ++ gv2)), (Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: gv2))
(Permutation (l2 ++ l1) (a0 :: gv2)), (Permutation (l2 ++ l1) (merge l1 gv2)), (Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2)), (Permutation (l2 ++ l1) (merge gv2 gv2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2))
(Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) (a :: gv2)), (Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: gv2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ gv2))
(Permutation (l2 ++ l2) (gv2 ++ l1)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1)), (Permutation (l2 ++ gv2) (a :: l2)), (Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1))
(Permutation (l2 ++ gv2) (b :: gv2)), (Permutation (l2 ++ gv2) (a0 :: l1)), (Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2)), (Permutation (l2 ++ gv2) (merge l2 l1)), (Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2))
(Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ l1)), (Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2))
(Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) l2), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1)), (Permutation (gv2 ++ l1) (b :: l2)), (Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1))
(Permutation (gv2 ++ l1) (a0 :: gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2)), (Permutation (gv2 ++ l1) (merge gv2 l1)), (Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2))
(Permutation (gv2 ++ l1) (l1 ++ l2)), (Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2)), (Permutation (gv2 ++ l1) []), (Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2)
(Permutation (gv2 ++ l2) (a :: l1)), (Permutation (gv2 ++ l2) (a :: l2)), (Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1)), (Permutation (gv2 ++ l2) (a0 :: l2)), (Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1))
(Permutation (gv2 ++ l2) (merge l1 gv2)), (Permutation (gv2 ++ l2) (merge l2 l1)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2)), (Permutation (gv2 ++ l2) (l1 ++ l1)), (Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2))
(Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2))
(Permutation (gv2 ++ gv2) (b :: l1)), (Permutation (gv2 ++ gv2) (b :: l2)), (Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1)), (Permutation (gv2 ++ gv2) (merge l1 l2)), (Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1))
(Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2)), (Permutation (gv2 ++ gv2) (l2 ++ l1)), (Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2))
(Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation [] gv2), (Permutation [] (a :: gv2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2))
(Permutation [] (l1 ++ gv2)), (Permutation [] (l2 ++ gv2)), (Permutation [] (gv2 ++ l1)), (Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: gv2)), (In a (b :: gv2)), (In a (a0 :: gv2)), (In a (merge l1 gv2)), (In a (merge l2 gv2))
(In a (merge gv2 l2)), (In a (merge gv2 gv2)), (In a (l1 ++ gv2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: gv2)), (In b (b :: gv2)), (In b (a0 :: gv2))
(In b (merge l2 gv2)), (In b (merge gv2 l1)), (In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ gv2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1)), (In b (gv2 ++ l2)), (In b (gv2 ++ gv2)), (In a0 (a :: gv2))
(In a0 (a0 :: gv2)), (In a0 (merge l1 gv2)), (In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ gv2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2))
(In (length l1) gv2), (In (length l1) (a :: gv2)), (In (length l1) (b :: gv2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 gv2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ gv2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (gv2 ++ l2)), (In (length l1) (gv2 ++ gv2)), (In (length l2) gv2), (In (length l2) (a :: gv2)), (In (length l2) (b :: gv2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 gv2)), (In (length l2) (merge gv2 l1))
(In (length l2) (merge gv2 gv2)), (In (length l2) (l1 ++ gv2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2)), (In (length l2) (gv2 ++ gv2)), (In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1))
(In (length gv2) (a :: gv2)), (In (length gv2) (b :: l1)), (In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1)), (In (length gv2) (a0 :: l2)), (In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2))
(In (length gv2) (merge l2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (l1 ++ l1)), (In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2))
(In (length gv2) (gv2 ++ l1)), (In (length gv2) (gv2 ++ l2)), (In (length gv2) (gv2 ++ gv2)), (a < length gv2), (b < length gv2), (a0 < length gv2), (length l1 < length gv2), (length l2 < length gv2), (length gv2 < a), (length gv2 < b)
(length gv2 < length l1), (length gv2 < length l2), (a <= length gv2), (b <= length gv2), (a0 <= length gv2), (length l1 <= length gv2), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0)
(length gv2 <= length l2), (~ a <=* gv2), (~ b <=* gv2), (~ a0 <=* gv2), (~ sorted gv2), (~ Permutation l1 gv2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2), (~ Permutation gv2 gv2)
(~ In b gv2), (~ In a0 gv2), (l1 <> gv2), (l2 <> gv2), (gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (None = Some gv2), (a :: l1 = gv2), (a :: l1 = merge l1 gv2)
(a :: l1 = merge gv2 l1), (a :: l1 = merge gv2 l2), (a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ gv2), (a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l2 = gv2), (a :: l2 = merge l1 gv2)
(a :: l2 = merge gv2 l1), (a :: l2 = merge gv2 l2), (a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ gv2), (a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: gv2 = l1), (a :: gv2 = l2)
(a :: gv2 = merge l1 l1), (a :: gv2 = merge l1 l2), (a :: gv2 = merge l1 gv2), (a :: gv2 = merge l2 l1), (a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1)
(a :: gv2 = l1 ++ gv2), (a :: gv2 = l2 ++ l1), (a :: gv2 = l2 ++ l2), (a :: gv2 = l2 ++ gv2), (a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = gv2), (b :: l1 = merge l1 gv2)
(b :: l1 = merge gv2 l1), (b :: l1 = merge gv2 l2), (b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ gv2), (b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l2 = gv2), (b :: l2 = merge l1 gv2)
(b :: l2 = merge gv2 l1), (b :: l2 = merge gv2 l2), (b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ gv2), (b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: gv2 = l1), (b :: gv2 = l2)
(b :: gv2 = merge l1 l1), (b :: gv2 = merge l1 l2), (b :: gv2 = merge l1 gv2), (b :: gv2 = merge l2 l1), (b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1)
(b :: gv2 = l1 ++ gv2), (b :: gv2 = l2 ++ l1), (b :: gv2 = l2 ++ l2), (b :: gv2 = l2 ++ gv2), (b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 gv2)
(a0 :: l1 = merge gv2 l1), (a0 :: l1 = merge gv2 l2), (a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ gv2), (a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 gv2)
(a0 :: l2 = merge gv2 l1), (a0 :: l2 = merge gv2 l2), (a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ gv2), (a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: gv2 = l1), (a0 :: gv2 = l2)
(a0 :: gv2 = merge l1 l1), (a0 :: gv2 = merge l1 l2), (a0 :: gv2 = merge l1 gv2), (a0 :: gv2 = merge l2 l1), (a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1)
(a0 :: gv2 = l1 ++ gv2), (a0 :: gv2 = l2 ++ l1), (a0 :: gv2 = l2 ++ l2), (a0 :: gv2 = l2 ++ gv2), (a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ gv2)
(merge l1 l1 = gv2 ++ l1), (merge l1 l1 = gv2 ++ l2), (merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ gv2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1)
(merge l1 gv2 = gv2), (merge l1 gv2 = l1 ++ l1), (merge l1 gv2 = l1 ++ l2), (merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2)
(merge l2 l1 = l1 ++ gv2), (merge l2 l1 = l2 ++ gv2), (merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = gv2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2)
(merge l2 gv2 = l1), (merge l2 gv2 = l2), (merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1)
(merge l2 gv2 = gv2 ++ gv2), (merge gv2 l1 = l1), (merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2)
(merge gv2 l1 = gv2 ++ l2), (merge gv2 l1 = gv2 ++ gv2), (merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2)
(merge gv2 l2 = gv2 ++ l1), (merge gv2 l2 = gv2 ++ l2), (merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1)
(merge gv2 gv2 = l2 ++ gv2), (merge gv2 gv2 = gv2 ++ l1), (merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = gv2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2), (l1 ++ gv2 = gv2), (l2 ++ l1 = gv2)
(l2 ++ gv2 = l1), (l2 ++ gv2 = l2), (l2 ++ gv2 = gv2), (gv2 ++ l1 = l1), (gv2 ++ l1 = l2), (gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1)
(gv2 ++ gv2 = gv2), ([] = gv2), ([] = merge l1 gv2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ gv2), ([] = l2 ++ gv2), ([] = gv2 ++ l1)
([] = gv2 ++ gv2), ((l1, l1) = split gv2), ((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split gv2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2)
((gv2, l1) = split l1), ((gv2, l1) = split l2), ((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2), ((gv2, l2) = split gv2), ((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length gv2 = a)
(length gv2 = a0)

Label: 4 (2)
Abducted Assumption: (b <=* a :: l1)
Positive Examples:
   [a := 2; a0 := 0; b := 2; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 2; l1 := []; l2 := [1]]
   [a := 4; a0 := 2; b := 3; l1 := []; l2 := [5; 5]]
   [a := 5; a0 := 0; b := 5; l1 := []; l2 := [4; 6]]
   [a := 4; a0 := 0; b := 2; l1 := [4]; l2 := []]
   [a := 3; a0 := 0; b := 1; l1 := []; l2 := [0; 1; 3]]
   [a := 2; a0 := 0; b := 1; l1 := [3]; l2 := [0; 3]]
   [a := 2; a0 := 0; b := 2; l1 := []; l2 := [2]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []]
   [a := 2; a0 := 0; b := 1; l1 := [2; 2]; l2 := [1; 2]]
   etc ...

Negative Examples:
   [a := 3; a0 := 3; b := 5; l1 := []; l2 := [5]]
   [a := 1; a0 := 1; b := 2; l1 := [3]; l2 := []]
   [a := 0; a0 := 1; b := 5; l1 := []; l2 := []]
   [a := 1; a0 := 1; b := 3; l1 := [2]; l2 := []]
   [a := 2; a0 := 1; b := 5; l1 := [2; 2]; l2 := []]
   [a := 1; a0 := 5; b := 6; l1 := [2; 5]; l2 := [6]]
   [a := 1; a0 := 0; b := 2; l1 := [3; 3]; l2 := [0]]
   [a := 5; a0 := 2; b := 6; l1 := []; l2 := []]
   [a := 1; a0 := 1; b := 3; l1 := [3; 3]; l2 := [4; 4]]
   [a := 0; a0 := 0; b := 1; l1 := [2]; l2 := [2]]
   etc ...

(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0)

Label: 1 (3)
Abducted Assumption: (b :: a :: l1 = gv2)
Positive Examples:
   [a := 2; a0 := 0; b := 2; gv2 := [2; 2]; l1 := []; l2 := [2; 2]]
   [a := 3; a0 := 0; b := 3; gv2 := [3; 3]; l1 := []; l2 := []]

Negative Examples:
   [a := 5; a0 := 0; b := 5; gv2 := [1; 5; 2; 4]; l1 := []; l2 := [2]]
   [a := 2; a0 := 0; b := 1; gv2 := [2; 0; 0]; l1 := [2]; l2 := [2]]
   [a := 2; a0 := 0; b := 2; gv2 := [1; 0; 0]; l1 := [2; 3; 3]; l2 := [1; 1]]
   [a := 3; a0 := 1; b := 3; gv2 := [0; 0]; l1 := []; l2 := []]
   [a := 1; a0 := 0; b := 1; gv2 := [4; 0]; l1 := []; l2 := []]
   [a := 2; a0 := 1; b := 2; gv2 := [0; 0; 3]; l1 := [2]; l2 := []]
   [a := 2; a0 := 0; b := 1; gv2 := [4; 1]; l1 := [3]; l2 := [4; 4]]
   [a := 6; a0 := 4; b := 5; gv2 := [3]; l1 := []; l2 := []]
   [a := 1; a0 := 0; b := 1; gv2 := [1; 2; 1; 6; 1]; l1 := [3]; l2 := [0]]
   [a := 2; a0 := 1; b := 2; gv2 := [2; 0; 0; 3]; l1 := []; l2 := [3; 3]]
   etc ...

(a <=* l1), (a <=* l2), (a <=* gv2), (b <=* l1), (b <=* l2), (b <=* gv2), (a0 <=* l1), (a0 <=* l2), (a0 <=* gv2), (sorted l1)
(sorted gv2), (Permutation l1 l1), (Permutation l1 l2), (Permutation l1 gv2), (Permutation l2 l1), (Permutation l2 l2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2), (Permutation gv2 gv2)
(In a l2), (In a gv2), (In b l1), (In b l2), (In b gv2), (In a0 l1), (In a0 l2), (In a0 gv2), (a < a), (a < b)
(b < a), (b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a)
(b <= a0), (a0 <= a), (a0 <= b), (a0 <= a0), (l1 = l1), (l1 = l2), (l1 = gv2), (l2 = l1), (l2 = l2), (l2 = gv2)
(gv2 = l2), (gv2 = gv2), (a = a), (a = b), (a = a0), (b = a), (b = b), (b = a0), (a0 = a), (a0 = b)
(false = sorted_bool l1), (false = sorted_bool l2), (false = sorted_bool gv2), (true = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool gv2), (a <=* a :: l1), (a <=* a :: l2), (a <=* a :: gv2), (a <=* b :: l1)
(a <=* b :: gv2), (a <=* a0 :: l1), (a <=* a0 :: l2), (a <=* a0 :: gv2), (a <=* merge l1 l1), (a <=* merge l1 l2), (a <=* merge l1 gv2), (a <=* merge l2 l1), (a <=* merge l2 l2), (a <=* merge l2 gv2)
(a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ l1), (a <=* l1 ++ l2), (a <=* l1 ++ gv2), (a <=* l2 ++ l1), (a <=* l2 ++ l2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1), (a <=* gv2 ++ l2)
(a <=* []), (b <=* a :: l1), (b <=* a :: l2), (b <=* a :: gv2), (b <=* b :: l1), (b <=* b :: l2), (b <=* b :: gv2), (b <=* a0 :: l1), (b <=* a0 :: l2), (b <=* a0 :: gv2)
(b <=* merge l1 l2), (b <=* merge l1 gv2), (b <=* merge l2 l1), (b <=* merge l2 l2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ l1), (b <=* l1 ++ l2)
(b <=* l2 ++ l1), (b <=* l2 ++ l2), (b <=* l2 ++ gv2), (b <=* gv2 ++ l1), (b <=* gv2 ++ l2), (b <=* gv2 ++ gv2), (b <=* []), (a0 <=* a :: l1), (a0 <=* a :: l2), (a0 <=* a :: gv2)
(a0 <=* b :: l2), (a0 <=* b :: gv2), (a0 <=* a0 :: l1), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 l1), (a0 <=* merge l2 l2)
(a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2), (a0 <=* merge gv2 gv2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ gv2), (a0 <=* l2 ++ l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv2), (a0 <=* gv2 ++ l1)
(a0 <=* gv2 ++ gv2), (a0 <=* []), (length l1 <=* l1), (length l1 <=* l2), (length l1 <=* gv2), (length l1 <=* a :: l1), (length l1 <=* a :: l2), (length l1 <=* a :: gv2), (length l1 <=* b :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l1), (length l1 <=* a0 :: l2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 gv2), (length l1 <=* merge l2 l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 gv2), (length l1 <=* merge gv2 l1)
(length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2)
(length l2 <=* l1), (length l2 <=* l2), (length l2 <=* gv2), (length l2 <=* a :: l1), (length l2 <=* a :: l2), (length l2 <=* a :: gv2), (length l2 <=* b :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: gv2), (length l2 <=* a0 :: l1)
(length l2 <=* a0 :: gv2), (length l2 <=* merge l1 l1), (length l2 <=* merge l1 l2), (length l2 <=* merge l1 gv2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2)
(length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2), (length l2 <=* gv2 ++ gv2), (length l2 <=* []), (length gv2 <=* l1)
(length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1), (length gv2 <=* a0 :: l2), (length gv2 <=* a0 :: gv2)
(length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l1 ++ l1), (length gv2 <=* l1 ++ l2)
(length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: l1)), (sorted (a :: l2)), (sorted (a :: gv2))
(sorted (b :: l2)), (sorted (b :: gv2)), (sorted (a0 :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: gv2)), (sorted (merge l1 l1)), (sorted (merge l1 l2)), (sorted (merge l1 gv2)), (sorted (merge l2 l1)), (sorted (merge l2 l2))
(sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ l1)), (sorted (l2 ++ l2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1))
(sorted (gv2 ++ gv2)), (sorted []), (Permutation l1 (a :: l1)), (Permutation l1 (a :: l2)), (Permutation l1 (a :: gv2)), (Permutation l1 (b :: l1)), (Permutation l1 (b :: l2)), (Permutation l1 (b :: gv2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: l2))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ l1))
(Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (gv2 ++ l2)), (Permutation l1 (gv2 ++ gv2)), (Permutation l1 []), (Permutation l2 (a :: l1)), (Permutation l2 (a :: l2))
(Permutation l2 (b :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 l1))
(Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ gv2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv2))
(Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation l2 []), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2)), (Permutation gv2 (a0 :: l1))
(Permutation gv2 (a0 :: gv2)), (Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge gv2 gv2))
(Permutation gv2 (l1 ++ l2)), (Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a :: l1) l1)
(Permutation (a :: l1) gv2), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (a :: gv2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: gv2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 l1))
(Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ gv2))
(Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (gv2 ++ l2)), (Permutation (a :: l1) (gv2 ++ gv2)), (Permutation (a :: l1) []), (Permutation (a :: l2) l1), (Permutation (a :: l2) l2), (Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: l1))
(Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2)), (Permutation (a :: l2) (merge gv2 gv2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ gv2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ gv2))
(Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: l2) []), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2)), (Permutation (a :: gv2) (b :: l1)), (Permutation (a :: gv2) (b :: l2))
(Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2)), (Permutation (a :: gv2) (merge l2 gv2)), (Permutation (a :: gv2) (merge gv2 l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (gv2 ++ l2)), (Permutation (a :: gv2) (gv2 ++ gv2))
(Permutation (b :: l1) l1), (Permutation (b :: l1) l2), (Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: l2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (a0 :: l2))
(Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2)), (Permutation (b :: l1) (merge gv2 gv2)), (Permutation (b :: l1) (l1 ++ l1))
(Permutation (b :: l1) (l1 ++ gv2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ gv2)), (Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l1) []), (Permutation (b :: l2) l1), (Permutation (b :: l2) l2)
(Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv2)), (Permutation (b :: l2) (merge gv2 l1)), (Permutation (b :: l2) (merge gv2 l2)), (Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ l1))
(Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: l2) []), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2), (Permutation (b :: gv2) gv2), (Permutation (b :: gv2) (a :: l1)), (Permutation (b :: gv2) (a :: l2))
(Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2)), (Permutation (b :: gv2) (merge l1 gv2)), (Permutation (b :: gv2) (merge l2 l1)), (Permutation (b :: gv2) (merge l2 l2))
(Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1)), (Permutation (b :: gv2) (l2 ++ l2)), (Permutation (b :: gv2) (l2 ++ gv2)), (Permutation (b :: gv2) (gv2 ++ l1))
(Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: l1)), (Permutation (a0 :: l1) (b :: l2))
(Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 gv2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 gv2)), (Permutation (a0 :: l1) (merge gv2 l1)), (Permutation (a0 :: l1) (merge gv2 l2))
(Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l1) [])
(Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: gv2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv2)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (a0 :: gv2))
(Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 gv2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2)), (Permutation (a0 :: l2) (gv2 ++ gv2)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv2) l1), (Permutation (a0 :: gv2) l2), (Permutation (a0 :: gv2) gv2)
(Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1)), (Permutation (a0 :: gv2) (a0 :: l2)), (Permutation (a0 :: gv2) (merge l1 l1)), (Permutation (a0 :: gv2) (merge l1 l2)), (Permutation (a0 :: gv2) (merge l1 gv2))
(Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1)), (Permutation (a0 :: gv2) (l1 ++ l2)), (Permutation (a0 :: gv2) (l1 ++ gv2)), (Permutation (a0 :: gv2) (l2 ++ l1)), (Permutation (a0 :: gv2) (l2 ++ l2))
(Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: gv2))
(Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: gv2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: gv2)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 gv2))
(Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2))
(Permutation (merge l1 l1) []), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) gv2), (Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (a :: l2)), (Permutation (merge l1 l2) (a :: gv2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: gv2))
(Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2))
(Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l1 ++ gv2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ gv2)), (Permutation (merge l1 l2) (gv2 ++ l1)), (Permutation (merge l1 l2) (gv2 ++ l2)), (Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 l2) []), (Permutation (merge l1 gv2) l1)
(Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1)), (Permutation (merge l1 gv2) (b :: l2)), (Permutation (merge l1 gv2) (b :: gv2)), (Permutation (merge l1 gv2) (a0 :: l1)), (Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2))
(Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge gv2 l2)), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (l1 ++ l1)), (Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2))
(Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) []), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) gv2), (Permutation (merge l2 l1) (a :: l1))
(Permutation (merge l2 l1) (a :: gv2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: l2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 gv2))
(Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ gv2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ gv2))
(Permutation (merge l2 l1) (gv2 ++ l2)), (Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l1) []), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: l1))
(Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1))
(Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2))
(Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1)), (Permutation (merge l2 gv2) (a :: l2)), (Permutation (merge l2 gv2) (a :: gv2)), (Permutation (merge l2 gv2) (b :: l1)), (Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1))
(Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2)), (Permutation (merge l2 gv2) (merge l2 l1)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (merge gv2 l1)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1))
(Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l1)), (Permutation (merge l2 gv2) (gv2 ++ l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2)
(Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1)), (Permutation (merge gv2 l1) (b :: l2)), (Permutation (merge gv2 l1) (b :: gv2)), (Permutation (merge gv2 l1) (a0 :: l1)), (Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1))
(Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2)), (Permutation (merge gv2 l1) (merge gv2 l2)), (Permutation (merge gv2 l1) (merge gv2 gv2)), (Permutation (merge gv2 l1) (l1 ++ l1)), (Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1))
(Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) []), (Permutation (merge gv2 l2) l1), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2))
(Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1)), (Permutation (merge gv2 l2) (a0 :: l2)), (Permutation (merge gv2 l2) (a0 :: gv2)), (Permutation (merge gv2 l2) (merge l1 l1)), (Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1))
(Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1)), (Permutation (merge gv2 l2) (l1 ++ l2)), (Permutation (merge gv2 l2) (l1 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l1)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1))
(Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a :: l1)), (Permutation (merge gv2 gv2) (a :: l2)), (Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2))
(Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (merge l1 l2)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l2 l1)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1))
(Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l1)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) [])
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: l2))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 gv2)), (Permutation (l1 ++ l1) (merge gv2 l1)), (Permutation (l1 ++ l1) (merge gv2 l2)), (Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ l2))
(Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) gv2)
(Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: gv2)), (Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (b :: l2)), (Permutation (l1 ++ l2) (b :: gv2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: gv2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 l2))
(Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l2))
(Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2)), (Permutation (l1 ++ l2) (gv2 ++ gv2)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ gv2) l1), (Permutation (l1 ++ gv2) l2), (Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2))
(Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1)), (Permutation (l1 ++ gv2) (a0 :: l2)), (Permutation (l1 ++ gv2) (a0 :: gv2)), (Permutation (l1 ++ gv2) (merge l1 l1)), (Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2))
(Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ l1)), (Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2))
(Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: gv2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: gv2))
(Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: gv2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 gv2)), (Permutation (l2 ++ l1) (merge l2 l1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2))
(Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2)), (Permutation (l2 ++ l1) (gv2 ++ gv2)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ l2) l1)
(Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) (a :: l1)), (Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a :: gv2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv2))
(Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l1)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1))
(Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1)), (Permutation (l2 ++ gv2) (b :: l2)), (Permutation (l2 ++ gv2) (b :: gv2)), (Permutation (l2 ++ gv2) (a0 :: l1)), (Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2))
(Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l1)), (Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2))
(Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) []), (Permutation (gv2 ++ l1) l1), (Permutation (gv2 ++ l1) l2), (Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1))
(Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1)), (Permutation (gv2 ++ l1) (a0 :: l2)), (Permutation (gv2 ++ l1) (a0 :: gv2)), (Permutation (gv2 ++ l1) (merge l1 l1)), (Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2))
(Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) (l1 ++ l2)), (Permutation (gv2 ++ l1) (l1 ++ gv2)), (Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) (a :: l1)), (Permutation (gv2 ++ l2) (a :: l2)), (Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1))
(Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1)), (Permutation (gv2 ++ l2) (merge l1 l2)), (Permutation (gv2 ++ l2) (merge l1 gv2)), (Permutation (gv2 ++ l2) (merge l2 l1)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2))
(Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l1)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2)
(Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (b :: l1)), (Permutation (gv2 ++ gv2) (b :: l2)), (Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1))
(Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l1)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2))
(Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation [] l1), (Permutation [] l2), (Permutation [] gv2), (Permutation [] (a :: l1)), (Permutation [] (a :: l2))
(Permutation [] (b :: l1)), (Permutation [] (b :: l2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 l1))
(Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l1 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ gv2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ gv2))
(Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: l1)), (In a (a :: l2)), (In a (a :: gv2)), (In a (b :: l1)), (In a (b :: l2)), (In a (b :: gv2)), (In a (a0 :: l1)), (In a (a0 :: l2))
(In a (merge l1 l1)), (In a (merge l1 l2)), (In a (merge l1 gv2)), (In a (merge l2 l1)), (In a (merge l2 l2)), (In a (merge l2 gv2)), (In a (merge gv2 l1)), (In a (merge gv2 l2)), (In a (merge gv2 gv2)), (In a (l1 ++ l1))
(In a (l1 ++ gv2)), (In a (l2 ++ l1)), (In a (l2 ++ l2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: l1)), (In b (a :: l2)), (In b (a :: gv2))
(In b (b :: l2)), (In b (b :: gv2)), (In b (a0 :: l1)), (In b (a0 :: l2)), (In b (a0 :: gv2)), (In b (merge l1 l1)), (In b (merge l1 l2)), (In b (merge l1 gv2)), (In b (merge l2 l1)), (In b (merge l2 l2))
(In b (merge gv2 l1)), (In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ gv2)), (In b (l2 ++ l1)), (In b (l2 ++ l2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1))
(In b (gv2 ++ gv2)), (In a0 (a :: l1)), (In a0 (a :: l2)), (In a0 (a :: gv2)), (In a0 (b :: l1)), (In a0 (b :: l2)), (In a0 (b :: gv2)), (In a0 (a0 :: l1)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv2))
(In a0 (merge l1 l2)), (In a0 (merge l1 gv2)), (In a0 (merge l2 l1)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ l2))
(In a0 (l2 ++ l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2)), (In a0 (gv2 ++ gv2)), (In (length l1) l1), (In (length l1) l2), (In (length l1) gv2), (In (length l1) (a :: l1))
(In (length l1) (a :: gv2)), (In (length l1) (b :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: gv2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 gv2))
(In (length l1) (merge l2 l2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l2 ++ l2))
(In (length l1) (gv2 ++ l1)), (In (length l1) (gv2 ++ l2)), (In (length l1) (gv2 ++ gv2)), (In (length l2) l1), (In (length l2) l2), (In (length l2) gv2), (In (length l2) (a :: l1)), (In (length l2) (a :: l2)), (In (length l2) (a :: gv2)), (In (length l2) (b :: l1))
(In (length l2) (b :: gv2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv2))
(In (length l2) (merge gv2 l2)), (In (length l2) (merge gv2 gv2)), (In (length l2) (l1 ++ l1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ gv2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2))
(In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1)), (In (length gv2) (a :: l2)), (In (length gv2) (a :: gv2)), (In (length gv2) (b :: l1)), (In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1))
(In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l2 l1)), (In (length gv2) (merge l2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2))
(In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (gv2 ++ l1)), (In (length gv2) (gv2 ++ l2)), (In (length gv2) (gv2 ++ gv2)), (a < length l1), (a < length l2)
(b < length l1), (b < length l2), (b < length gv2), (a0 < length l1), (a0 < length l2), (a0 < length gv2), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l2 < length gv2), (length gv2 < a), (length gv2 < b), (length gv2 < a0), (length gv2 < length l1), (length gv2 < length l2)
(a <= length l2), (a <= length gv2), (b <= length l1), (b <= length l2), (b <= length gv2), (a0 <= length l1), (a0 <= length l2), (a0 <= length gv2), (length l1 <= a), (length l1 <= b)
(length l1 <= length l2), (length l1 <= length gv2), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0)
(length gv2 <= length l2), (~ a <=* l1), (~ a <=* l2), (~ a <=* gv2), (~ b <=* l1), (~ b <=* l2), (~ b <=* gv2), (~ a0 <=* l1), (~ a0 <=* l2), (~ a0 <=* gv2)
(~ sorted l2), (~ sorted gv2), (~ Permutation l1 l1), (~ Permutation l1 l2), (~ Permutation l1 gv2), (~ Permutation l2 l1), (~ Permutation l2 l2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2)
(~ In a l1), (~ In a l2), (~ In a gv2), (~ In b l1), (~ In b l2), (~ In b gv2), (~ In a0 l1), (~ In a0 l2), (~ In a0 gv2), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l1 <> l1), (l1 <> l2), (l1 <> gv2), (l2 <> l1), (l2 <> l2)
(gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (a <> a), (a <> b), (a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a)
(a0 <> a0), (None = Some l1), (None = Some l2), (None = Some gv2), (a :: l1 = l1), (a :: l1 = l2), (a :: l1 = gv2), (a :: l1 = merge l1 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 gv2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 gv2), (a :: l1 = merge gv2 l1), (a :: l1 = merge gv2 l2), (a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ l1), (a :: l1 = l2 ++ l2)
(a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l1 = []), (a :: l2 = l1), (a :: l2 = l2), (a :: l2 = gv2), (a :: l2 = merge l1 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 gv2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 gv2), (a :: l2 = merge gv2 l1), (a :: l2 = merge gv2 l2), (a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ l1), (a :: l2 = l2 ++ l2)
(a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: l2 = []), (a :: gv2 = l1), (a :: gv2 = l2), (a :: gv2 = gv2), (a :: gv2 = merge l1 l1), (a :: gv2 = merge l1 l2), (a :: gv2 = merge l1 gv2)
(a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = l1 ++ l2), (a :: gv2 = l1 ++ gv2), (a :: gv2 = l2 ++ l1), (a :: gv2 = l2 ++ l2)
(a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = l1), (b :: l1 = l2), (b :: l1 = gv2), (b :: l1 = merge l1 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 gv2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 gv2), (b :: l1 = merge gv2 l1), (b :: l1 = merge gv2 l2), (b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ l1), (b :: l1 = l2 ++ l2)
(b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l1 = []), (b :: l2 = l1), (b :: l2 = l2), (b :: l2 = gv2), (b :: l2 = merge l1 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 gv2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 gv2), (b :: l2 = merge gv2 l1), (b :: l2 = merge gv2 l2), (b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ l1), (b :: l2 = l2 ++ l2)
(b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: l2 = []), (b :: gv2 = l1), (b :: gv2 = l2), (b :: gv2 = gv2), (b :: gv2 = merge l1 l1), (b :: gv2 = merge l1 l2), (b :: gv2 = merge l1 gv2)
(b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1), (b :: gv2 = l1 ++ l2), (b :: gv2 = l1 ++ gv2), (b :: gv2 = l2 ++ l1), (b :: gv2 = l2 ++ l2)
(b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = l1), (a0 :: l1 = l2), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 gv2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 gv2), (a0 :: l1 = merge gv2 l1), (a0 :: l1 = merge gv2 l2), (a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l2 ++ l2)
(a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l1 = []), (a0 :: l2 = l1), (a0 :: l2 = l2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 gv2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 gv2), (a0 :: l2 = merge gv2 l1), (a0 :: l2 = merge gv2 l2), (a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l2 ++ l2)
(a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: l2 = []), (a0 :: gv2 = l1), (a0 :: gv2 = l2), (a0 :: gv2 = gv2), (a0 :: gv2 = merge l1 l1), (a0 :: gv2 = merge l1 l2), (a0 :: gv2 = merge l1 gv2)
(a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1), (a0 :: gv2 = l1 ++ l2), (a0 :: gv2 = l1 ++ gv2), (a0 :: gv2 = l2 ++ l1), (a0 :: gv2 = l2 ++ l2)
(a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = l1), (merge l1 l1 = l2), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ l2), (merge l1 l1 = l1 ++ gv2)
(merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ gv2), (merge l1 l1 = gv2 ++ l1), (merge l1 l1 = gv2 ++ l2), (merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = l1), (merge l1 l2 = l2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ l2)
(merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1), (merge l1 gv2 = l2), (merge l1 gv2 = gv2), (merge l1 gv2 = l1 ++ l1)
(merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2), (merge l2 l1 = l1), (merge l2 l1 = l2), (merge l2 l1 = gv2)
(merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ gv2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ gv2), (merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = l1), (merge l2 l2 = l2)
(merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2), (merge l2 l2 = gv2 ++ gv2), (merge l2 gv2 = l1)
(merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = gv2 ++ gv2)
(merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = gv2 ++ l2)
(merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2), (merge gv2 l2 = l2 ++ gv2), (merge gv2 l2 = gv2 ++ l1)
(merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1), (merge gv2 gv2 = l2 ++ l2), (merge gv2 gv2 = l2 ++ gv2)
(merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = gv2), (l1 ++ l2 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2)
(l2 ++ l1 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = gv2), (l2 ++ l2 = l1), (l2 ++ l2 = l2), (l2 ++ l2 = gv2), (l2 ++ gv2 = l1), (l2 ++ gv2 = l2), (l2 ++ gv2 = gv2), (gv2 ++ l1 = l1)
(gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ gv2 = l2), (gv2 ++ gv2 = gv2), ([] = l1), ([] = l2), ([] = gv2)
([] = merge l1 l2), ([] = merge l1 gv2), ([] = merge l2 l1), ([] = merge l2 l2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ l1), ([] = l1 ++ l2)
([] = l2 ++ l1), ([] = l2 ++ l2), ([] = l2 ++ gv2), ([] = gv2 ++ l1), ([] = gv2 ++ l2), ([] = gv2 ++ gv2), (None = Some a), (None = Some b), (None = Some a0), ((l1, l1) = split l1)
((l1, l1) = split gv2), ((l1, l2) = split l1), ((l1, l2) = split l2), ((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split l1), ((l2, l1) = split l2), ((l2, l1) = split gv2)
((l2, l2) = split l2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2), ((l2, gv2) = split gv2), ((gv2, l1) = split l1), ((gv2, l1) = split l2), ((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2)
((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length l1 = a), (length l1 = b), (length l1 = a0), (length l2 = a), (length l2 = b), (length l2 = a0), (length gv2 = a)
(length gv2 = a0)

Label: 2 (4)
Abducted Assumption: (b <=* gv3)
Positive Examples:
   [a := 4; a0 := 1; b := 3; gv3 := []; l1 := [1; 5; 3; 5; 0]; l2 := [3]]
   [a := 0; a0 := 0; b := 2; gv3 := []; l1 := [0; 1]; l2 := [1]]
   [a := 2; a0 := 1; b := 3; gv3 := [3]; l1 := [2; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := []; l1 := [3; 1; 1]; l2 := [2; 2]]
   [a := 2; a0 := 0; b := 1; gv3 := [1]; l1 := [2; 2]; l2 := [1]]
   [a := 4; a0 := 2; b := 3; gv3 := []; l1 := [3; 3; 3; 3]; l2 := []]
   [a := 1; a0 := 0; b := 1; gv3 := []; l1 := [2]; l2 := [1; 2]]
   [a := 0; a0 := 0; b := 1; gv3 := []; l1 := []; l2 := [2]]
   [a := 0; a0 := 0; b := 2; gv3 := [2; 2]; l1 := [3; 4; 4]; l2 := [2]]
   [a := 1; a0 := 1; b := 3; gv3 := []; l1 := [0; 4; 4; 3]; l2 := [4; 4]]
   etc ...

Negative Examples:
   [a := 3; a0 := 0; b := 3; gv3 := [1; 3]; l1 := []; l2 := [1]]
   [a := 1; a0 := 0; b := 3; gv3 := [0; 3; 4]; l1 := [3]; l2 := []]
   [a := 1; a0 := 0; b := 2; gv3 := [0; 2]; l1 := [1; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := [1; 1]; l1 := [2]; l2 := [0]]
   [a := 2; a0 := 2; b := 3; gv3 := [1; 3; 3]; l1 := [1; 2; 1]; l2 := []]
   [a := 3; a0 := 0; b := 1; gv3 := [0]; l1 := [3; 1; 2; 3]; l2 := [0; 4; 5]]
   [a := 5; a0 := 3; b := 4; gv3 := [3; 3]; l1 := [2]; l2 := []]
   [a := 0; a0 := 1; b := 2; gv3 := [0; 1]; l1 := [0; 1]; l2 := []]
   [a := 2; a0 := 1; b := 3; gv3 := [1; 3]; l1 := [0]; l2 := [2; 3; 3]]
   [a := 0; a0 := 0; b := 1; gv3 := [0]; l1 := [2]; l2 := []]
   etc ...

(b <=* l2), (b <=* gv3), (a0 <=* l2), (a0 <=* gv3), (sorted l2), (sorted gv3), (Permutation l2 l2), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3)
(In b gv3), (In a0 l2), (In a0 gv3), (b < b), (b < a0), (a0 < b), (a0 < a0), (b <= b), (b <= a0), (a0 <= b)
(l2 = l2), (l2 = gv3), (gv3 = l2), (gv3 = gv3), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool gv3)
(true = sorted_bool gv3), (b <=* b :: l2), (b <=* b :: gv3), (b <=* a0 :: l2), (b <=* a0 :: gv3), (b <=* merge l2 l2), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ l2)
(b <=* gv3 ++ l2), (b <=* gv3 ++ gv3), (b <=* []), (a0 <=* b :: l2), (a0 <=* b :: gv3), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv3), (a0 <=* merge l2 l2), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2)
(a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (a0 <=* []), (length l2 <=* l2), (length l2 <=* gv3), (length l2 <=* b :: l2), (length l2 <=* b :: gv3), (length l2 <=* a0 :: l2)
(length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length l2 <=* []), (length gv3 <=* l2)
(length gv3 <=* b :: l2), (length gv3 <=* b :: gv3), (length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3)
(length gv3 <=* gv3 ++ gv3), (length gv3 <=* []), (sorted (b :: l2)), (sorted (b :: gv3)), (sorted (a0 :: l2)), (sorted (a0 :: gv3)), (sorted (merge l2 l2)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3))
(sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv3)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv3))
(Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation l2 []), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3))
(Permutation gv3 (merge l2 gv3)), (Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) l2), (Permutation (b :: l2) gv3)
(Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv3)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv3)), (Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3))
(Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3)), (Permutation (b :: gv3) (merge l2 l2)), (Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2))
(Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv3)), (Permutation (a0 :: l2) (a0 :: gv3)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv3))
(Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: gv3)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2))
(Permutation (merge l2 l2) []), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2)), (Permutation (merge l2 gv3) (b :: gv3)), (Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3))
(Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) []), (Permutation (merge gv3 l2) l2), (Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3))
(Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3)), (Permutation (merge gv3 l2) (gv3 ++ l2)), (Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2))
(Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3)), (Permutation (merge gv3 gv3) (merge gv3 l2)), (Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) [])
(Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2)), (Permutation (l2 ++ l2) (merge gv3 gv3)), (Permutation (l2 ++ l2) (l2 ++ gv3))
(Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2)), (Permutation (l2 ++ gv3) (merge l2 gv3))
(Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3)), (Permutation (gv3 ++ l2) (a0 :: l2))
(Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l2))
(Permutation [] l2), (Permutation [] gv3), (Permutation [] (b :: l2)), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3))
(Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3)), (In b (b :: l2)), (In b (b :: gv3)), (In b (a0 :: l2)), (In b (a0 :: gv3)), (In b (merge l2 l2)), (In b (merge l2 gv3)), (In b (merge gv3 l2))
(In b (l2 ++ l2)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: l2)), (In a0 (b :: gv3)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv3)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) l2), (In (length l2) gv3), (In (length l2) (b :: l2)), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: l2))
(In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv3)), (In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3)
(In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3)), (In (length gv3) (merge gv3 l2)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2))
(b < length l2), (b < length gv3), (a0 < length l2), (a0 < length gv3), (length l2 < b), (length l2 < a0), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0), (length gv3 < length l2)
(b <= length gv3), (a0 <= length l2), (a0 <= length gv3), (length l2 <= b), (length l2 <= a0), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* l2)
(~ a0 <=* l2), (~ a0 <=* gv3), (~ sorted l2), (~ sorted gv3), (~ Permutation l2 l2), (~ Permutation l2 gv3), (~ Permutation gv3 l2), (~ Permutation gv3 gv3), (~ In b l2), (~ In b gv3)
(~ In a0 gv3), (~ b < b), (~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2)
(gv3 <> l2), (gv3 <> gv3), (b <> b), (b <> a0), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some gv3), (b :: l2 = l2), (b :: l2 = gv3)
(b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2), (b :: l2 = merge gv3 gv3), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: l2 = []), (b :: gv3 = l2), (b :: gv3 = gv3)
(b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2), (b :: gv3 = l2 ++ gv3), (b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = l2), (a0 :: l2 = gv3)
(a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3), (a0 :: l2 = []), (a0 :: gv3 = l2), (a0 :: gv3 = gv3)
(a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = []), (merge l2 l2 = l2), (merge l2 l2 = gv3)
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ l2 = gv3), (l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = l2), ([] = gv3), ([] = merge l2 l2)
([] = merge gv3 l2), ([] = merge gv3 gv3), ([] = l2 ++ l2), ([] = l2 ++ gv3), ([] = gv3 ++ l2), ([] = gv3 ++ gv3), (None = Some b), (None = Some a0), ((l2, l2) = split l2), ((l2, l2) = split gv3)
((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length l2 = b), (length l2 = a0), (length gv3 = b), (length gv3 = a0)

Label: 4 (5)
Abducted Assumption: (b > a0)
Positive Examples:
   [a := 6; a0 := 1; b := 2; l1 := []; l2 := [1]; gv2 := [2; 6]; gv3 := []]
   [a := 3; a0 := 1; b := 3; l1 := []; l2 := []; gv2 := [3; 3]; gv3 := [3]]
   [a := 4; a0 := 1; b := 3; l1 := []; l2 := []; gv2 := [3; 4]; gv3 := [4]]
   [a := 4; a0 := 1; b := 3; l1 := []; l2 := [4]; gv2 := [3; 4]; gv3 := [4]]
   [a := 5; a0 := 1; b := 4; l1 := []; l2 := []; gv2 := [4; 5]; gv3 := [5]]
   [a := 3; a0 := 0; b := 3; l1 := []; l2 := []; gv2 := [3; 3]; gv3 := [3]]
   [a := 2; a0 := 0; b := 1; l1 := []; l2 := [2]; gv2 := [1; 2]; gv3 := []]
   [a := 2; a0 := 0; b := 1; l1 := [1]; l2 := [2; 2]; gv2 := [1; 2; 1]; gv3 := [2]]
   [a := 2; a0 := 0; b := 1; l1 := [2; 1; 2]; l2 := []; gv2 := [1; 2; 2; 1; 2]; gv3 := []]
   [a := 1; a0 := 0; b := 1; l1 := []; l2 := [0; 0; 0]; gv2 := [1; 1]; gv3 := []]
   etc ...

Negative Examples:
   [a := 1; a0 := 2; b := 1; l1 := []; l2 := []; gv2 := [1; 1]; gv3 := [1; 1]]
   [a := 3; a0 := 2; b := 0; l1 := []; l2 := [3]; gv2 := [0; 3]; gv3 := [3]]
   [a := 4; a0 := 5; b := 0; l1 := []; l2 := []; gv2 := [0; 4]; gv3 := [4]]
   [a := 4; a0 := 2; b := 0; l1 := []; l2 := []; gv2 := [0; 4]; gv3 := [4]]
   [a := 1; a0 := 5; b := 4; l1 := [2; 5]; l2 := []; gv2 := [4; 1; 2; 5]; gv3 := [6; 6]]
   [a := 1; a0 := 3; b := 2; l1 := [3]; l2 := []; gv2 := [2; 1; 3]; gv3 := [3]]
   [a := 0; a0 := 2; b := 1; l1 := [0; 2]; l2 := [2]; gv2 := [1; 0; 0; 2]; gv3 := []]
   [a := 0; a0 := 2; b := 0; l1 := [2; 4; 0; 3]; l2 := [4; 4]; gv2 := [0; 0; 2; 4; 0; 3]; gv3 := []]
   [a := 0; a0 := 3; b := 1; l1 := [2; 2]; l2 := []; gv2 := [1; 0; 2; 2]; gv3 := []]
   [a := 0; a0 := 2; b := 0; l1 := [0; 0]; l2 := []; gv2 := [0; 0; 0; 0]; gv3 := [1; 1]]
   etc ...

(a <=* l2), (a <=* l1), (b <=* l2), (b <=* l1), (a0 <=* l2), (a0 <=* l1), (sorted l2), (sorted l1), (Permutation l2 l2), (Permutation l2 l1)
(Permutation l1 l1), (In a l2), (In a l1), (In b l2), (In b l1), (In a0 l2), (In a0 l1), (a < a), (a < b), (a < a0)
(b < b), (b < a0), (a0 < a), (a0 < b), (a0 < a0), (a <= a), (a <= b), (a <= a0), (b <= a), (b <= b)
(a0 <= a), (a0 <= b), (a0 <= a0), (l2 = l2), (l2 = l1), (l1 = l2), (l1 = l1), (a = a), (a = b), (a = a0)
(b = b), (b = a0), (a0 = a), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool l1), (true = sorted_bool l2), (true = sorted_bool l1), (a <=* a :: l2)
(a <=* b :: l2), (a <=* b :: l1), (a <=* a0 :: l2), (a <=* a0 :: l1), (a <=* merge l2 l2), (a <=* merge l2 l1), (a <=* merge l1 l2), (a <=* merge l1 l1), (a <=* l2 ++ l2), (a <=* l2 ++ l1)
(a <=* l1 ++ l1), (a <=* []), (b <=* a :: l2), (b <=* a :: l1), (b <=* b :: l2), (b <=* b :: l1), (b <=* a0 :: l2), (b <=* a0 :: l1), (b <=* merge l2 l2), (b <=* merge l2 l1)
(b <=* merge l1 l1), (b <=* l2 ++ l2), (b <=* l2 ++ l1), (b <=* l1 ++ l2), (b <=* l1 ++ l1), (b <=* []), (a0 <=* a :: l2), (a0 <=* a :: l1), (a0 <=* b :: l2), (a0 <=* b :: l1)
(a0 <=* a0 :: l1), (a0 <=* merge l2 l2), (a0 <=* merge l2 l1), (a0 <=* merge l1 l2), (a0 <=* merge l1 l1), (a0 <=* l2 ++ l2), (a0 <=* l2 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l1 ++ l1), (a0 <=* [])
(length l2 <=* l1), (length l2 <=* a :: l2), (length l2 <=* a :: l1), (length l2 <=* b :: l2), (length l2 <=* b :: l1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l1 l2)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l1 ++ l1), (length l2 <=* []), (length l1 <=* l2), (length l1 <=* l1), (length l1 <=* a :: l2), (length l1 <=* a :: l1), (length l1 <=* b :: l2)
(length l1 <=* a0 :: l2), (length l1 <=* a0 :: l1), (length l1 <=* merge l2 l2), (length l1 <=* merge l2 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l1 l1), (length l1 <=* l2 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l1 ++ l1)
(sorted (a :: l2)), (sorted (a :: l1)), (sorted (b :: l2)), (sorted (b :: l1)), (sorted (a0 :: l2)), (sorted (a0 :: l1)), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l1 l2)), (sorted (merge l1 l1))
(sorted (l2 ++ l1)), (sorted (l1 ++ l2)), (sorted (l1 ++ l1)), (sorted []), (Permutation l2 (a :: l2)), (Permutation l2 (a :: l1)), (Permutation l2 (b :: l2)), (Permutation l2 (b :: l1)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: l1))
(Permutation l2 (merge l2 l1)), (Permutation l2 (merge l1 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 []), (Permutation l1 (a :: l2)), (Permutation l1 (a :: l1))
(Permutation l1 (b :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2))
(Permutation l1 []), (Permutation (a :: l2) l2), (Permutation (a :: l2) l1), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2)), (Permutation (a :: l2) (b :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (merge l2 l1))
(Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l1 ++ l2)), (Permutation (a :: l2) (l1 ++ l1)), (Permutation (a :: l2) []), (Permutation (a :: l1) l2), (Permutation (a :: l1) l1), (Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2))
(Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (l2 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l1 ++ l1))
(Permutation (b :: l2) l2), (Permutation (b :: l2) l1), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: l1)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 l1)), (Permutation (b :: l2) (merge l1 l2))
(Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ l1)), (Permutation (b :: l2) (l1 ++ l2)), (Permutation (b :: l2) (l1 ++ l1)), (Permutation (b :: l2) []), (Permutation (b :: l1) l2), (Permutation (b :: l1) l1), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (b :: l1) (a0 :: l1)), (Permutation (b :: l1) (merge l2 l2)), (Permutation (b :: l1) (merge l2 l1)), (Permutation (b :: l1) (merge l1 l2)), (Permutation (b :: l1) (merge l1 l1)), (Permutation (b :: l1) (l2 ++ l2)), (Permutation (b :: l1) (l2 ++ l1)), (Permutation (b :: l1) (l1 ++ l2)), (Permutation (b :: l1) (l1 ++ l1)), (Permutation (b :: l1) [])
(Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) (a :: l2)), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: l1)), (Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l1 l1))
(Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) []), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (b :: l2)), (Permutation (a0 :: l1) (b :: l1))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (merge l2 l1)), (Permutation (a0 :: l1) (merge l1 l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (a :: l2)), (Permutation (merge l2 l2) (a :: l1)), (Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l2))
(Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (b :: l2)), (Permutation (merge l2 l1) (b :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1)
(Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (b :: l2)), (Permutation (merge l1 l2) (b :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1))
(Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (b :: l2)), (Permutation (merge l1 l1) (b :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (a0 :: l1))
(Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (l2 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (a :: l2))
(Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2))
(Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (b :: l2)), (Permutation (l2 ++ l1) (b :: l1)), (Permutation (l2 ++ l1) (a0 :: l2)), (Permutation (l2 ++ l1) (a0 :: l1)), (Permutation (l2 ++ l1) (merge l2 l2))
(Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a :: l1))
(Permutation (l1 ++ l2) (b :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l2 l1)), (Permutation (l1 ++ l2) (merge l1 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l1 ++ l1))
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) l1), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (b :: l2)), (Permutation (l1 ++ l1) (b :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (merge l2 l1))
(Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation [] l2), (Permutation [] l1), (Permutation [] (a :: l2)), (Permutation [] (a :: l1)), (Permutation [] (b :: l2))
(Permutation [] (a0 :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l1 l1)), (Permutation [] (l2 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (Permutation [] (l1 ++ l1))
(In a (a :: l1)), (In a (b :: l2)), (In a (b :: l1)), (In a (a0 :: l2)), (In a (a0 :: l1)), (In a (merge l2 l2)), (In a (merge l2 l1)), (In a (merge l1 l2)), (In a (merge l1 l1)), (In a (l2 ++ l2))
(In a (l1 ++ l2)), (In a (l1 ++ l1)), (In b (a :: l2)), (In b (a :: l1)), (In b (b :: l2)), (In b (b :: l1)), (In b (a0 :: l2)), (In b (a0 :: l1)), (In b (merge l2 l2)), (In b (merge l2 l1))
(In b (merge l1 l1)), (In b (l2 ++ l2)), (In b (l2 ++ l1)), (In b (l1 ++ l2)), (In b (l1 ++ l1)), (In a0 (a :: l2)), (In a0 (a :: l1)), (In a0 (b :: l2)), (In a0 (b :: l1)), (In a0 (a0 :: l2))
(In a0 (merge l2 l2)), (In a0 (merge l2 l1)), (In a0 (merge l1 l2)), (In a0 (merge l1 l1)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l1 ++ l1)), (In (length l2) l2), (In (length l2) l1)
(In (length l2) (a :: l1)), (In (length l2) (b :: l2)), (In (length l2) (b :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l1 l1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l1 ++ l2)), (In (length l2) (l1 ++ l1)), (In (length l1) l2), (In (length l1) l1), (In (length l1) (a :: l2)), (In (length l1) (a :: l1)), (In (length l1) (b :: l2)), (In (length l1) (b :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (a0 :: l1))
(In (length l1) (merge l2 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l1 l1)), (In (length l1) (l2 ++ l2)), (In (length l1) (l2 ++ l1)), (In (length l1) (l1 ++ l2)), (In (length l1) (l1 ++ l1)), (a < length l2), (a < length l1), (b < length l2)
(a0 < length l2), (a0 < length l1), (length l2 < a), (length l2 < b), (length l2 < a0), (length l2 < length l1), (length l1 < a), (length l1 < b), (length l1 < a0), (length l1 < length l2)
(a <= length l1), (b <= length l2), (b <= length l1), (a0 <= length l2), (a0 <= length l1), (length l2 <= a), (length l2 <= b), (length l2 <= a0), (length l2 <= length l1), (length l1 <= a)
(length l1 <= a0), (length l1 <= length l2), (~ a <=* l2), (~ a <=* l1), (~ b <=* l2), (~ b <=* l1), (~ a0 <=* l2), (~ a0 <=* l1), (~ sorted l2), (~ sorted l1)
(~ Permutation l2 l1), (~ Permutation l1 l2), (~ Permutation l1 l1), (~ In a l2), (~ In a l1), (~ In b l2), (~ In b l1), (~ In a0 l2), (~ In a0 l1), (~ a < a)
(~ a < a0), (~ b < a), (~ b < b), (~ b < a0), (~ a0 < a), (~ a0 < b), (~ a0 < a0), (~ a <= a), (~ a <= b), (~ a <= a0)
(~ b <= b), (~ b <= a0), (~ a0 <= a), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2), (l2 <> l1), (l1 <> l2), (l1 <> l1), (a <> a)
(a <> a0), (b <> a), (b <> b), (b <> a0), (a0 <> a), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some l1), (a :: l2 = l2)
(a :: l2 = merge l2 l2), (a :: l2 = merge l2 l1), (a :: l2 = merge l1 l2), (a :: l2 = merge l1 l1), (a :: l2 = l2 ++ l2), (a :: l2 = l2 ++ l1), (a :: l2 = l1 ++ l2), (a :: l2 = l1 ++ l1), (a :: l2 = []), (a :: l1 = l2)
(a :: l1 = merge l2 l2), (a :: l1 = merge l2 l1), (a :: l1 = merge l1 l2), (a :: l1 = merge l1 l1), (a :: l1 = l2 ++ l2), (a :: l1 = l2 ++ l1), (a :: l1 = l1 ++ l2), (a :: l1 = l1 ++ l1), (a :: l1 = []), (b :: l2 = l2)
(b :: l2 = merge l2 l2), (b :: l2 = merge l2 l1), (b :: l2 = merge l1 l2), (b :: l2 = merge l1 l1), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ l1), (b :: l2 = l1 ++ l2), (b :: l2 = l1 ++ l1), (b :: l2 = []), (b :: l1 = l2)
(b :: l1 = merge l2 l2), (b :: l1 = merge l2 l1), (b :: l1 = merge l1 l2), (b :: l1 = merge l1 l1), (b :: l1 = l2 ++ l2), (b :: l1 = l2 ++ l1), (b :: l1 = l1 ++ l2), (b :: l1 = l1 ++ l1), (b :: l1 = []), (a0 :: l2 = l2)
(a0 :: l2 = merge l2 l2), (a0 :: l2 = merge l2 l1), (a0 :: l2 = merge l1 l2), (a0 :: l2 = merge l1 l1), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ l1), (a0 :: l2 = l1 ++ l2), (a0 :: l2 = l1 ++ l1), (a0 :: l2 = []), (a0 :: l1 = l2)
(a0 :: l1 = merge l2 l2), (a0 :: l1 = merge l2 l1), (a0 :: l1 = merge l1 l2), (a0 :: l1 = merge l1 l1), (a0 :: l1 = l2 ++ l2), (a0 :: l1 = l2 ++ l1), (a0 :: l1 = l1 ++ l2), (a0 :: l1 = l1 ++ l1), (a0 :: l1 = []), (merge l2 l2 = l2)
(merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l2 ++ l1), (merge l2 l1 = l1 ++ l2), (merge l2 l1 = l1 ++ l1)
(merge l1 l2 = l1), (merge l1 l2 = l2 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l1), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2)
(l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l2), (l2 ++ l1 = l1), (l1 ++ l2 = l2), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (l1 ++ l1 = l1), ([] = l2), ([] = l1)
([] = merge l2 l1), ([] = merge l1 l2), ([] = merge l1 l1), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ([] = l1 ++ l1), (None = Some a), (None = Some b), (None = Some a0)
((l2, l2) = split l1), ((l2, l1) = split l2), ((l2, l1) = split l1), ((l1, l2) = split l2), ((l1, l2) = split l1), ((l1, l1) = split l2), ((l1, l1) = split l1), (length l2 = a), (length l2 = b), (length l2 = a0)
(length l1 = b), (length l1 = a0), (b <=* gv3), (a0 <=* gv3), (sorted gv3), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3), (In b gv3), (In a0 gv3)
(gv3 = l2), (gv3 = gv3), (false = sorted_bool gv3), (true = sorted_bool gv3), (b <=* b :: gv3), (b <=* a0 :: gv3), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ gv3)
(b <=* gv3 ++ gv3), (a0 <=* b :: gv3), (a0 <=* a0 :: gv3), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2), (a0 <=* merge gv3 gv3), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (length l2 <=* gv3)
(length l2 <=* a0 :: gv3), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length gv3 <=* l2), (length gv3 <=* gv3), (length gv3 <=* b :: l2)
(length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3), (length gv3 <=* gv3 ++ l2), (length gv3 <=* gv3 ++ gv3)
(sorted (b :: gv3)), (sorted (a0 :: gv3)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3)), (sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: gv3))
(Permutation l2 (merge gv3 l2)), (Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3)), (Permutation gv3 (merge l2 l2))
(Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) gv3), (Permutation (b :: l2) (b :: gv3)), (Permutation (b :: l2) (a0 :: gv3))
(Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3)), (Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3))
(Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2)), (Permutation (b :: gv3) (l2 ++ gv3)), (Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: gv3))
(Permutation (a0 :: l2) (merge l2 gv3)), (Permutation (a0 :: l2) (merge gv3 l2)), (Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) gv3)
(Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2)), (Permutation (merge l2 l2) (gv3 ++ gv3)), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2))
(Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3)), (Permutation (merge l2 gv3) (l2 ++ l2)), (Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) [])
(Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3)), (Permutation (merge gv3 l2) (merge l2 l2)), (Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3))
(Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2)), (Permutation (merge gv3 gv3) (b :: gv3)), (Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3))
(Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) []), (Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2))
(Permutation (l2 ++ l2) (l2 ++ gv3)), (Permutation (l2 ++ l2) (gv3 ++ l2)), (Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2))
(Permutation (l2 ++ gv3) (merge gv3 l2)), (Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3))
(Permutation (gv3 ++ l2) (a0 :: gv3)), (Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2)
(Permutation (gv3 ++ gv3) (b :: l2)), (Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3))
(Permutation (gv3 ++ gv3) []), (Permutation [] gv3), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3)), (Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3))
(In b (a0 :: gv3)), (In b (merge l2 gv3)), (In b (merge gv3 l2)), (In b (merge gv3 gv3)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: gv3)), (In a0 (a0 :: gv3)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) gv3), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: gv3)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3))
(In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3), (In (length gv3) (b :: l2)), (In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3))
(In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2)), (In (length gv3) (gv3 ++ gv3)), (b < length gv3), (a0 < length gv3), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0)
(b <= length gv3), (a0 <= length gv3), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* gv3), (~ a0 <=* gv3), (~ sorted gv3), (~ Permutation l2 gv3)
(~ Permutation gv3 gv3), (~ In b gv3), (~ In a0 gv3), (l2 <> gv3), (gv3 <> l2), (gv3 <> gv3), (None = Some gv3), (b :: l2 = gv3), (b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2)
(b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: gv3 = l2), (b :: gv3 = gv3), (b :: gv3 = merge l2 l2), (b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2)
(b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = gv3), (a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3)
(a0 :: gv3 = gv3), (a0 :: gv3 = merge l2 l2), (a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = [])
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = gv3), ([] = merge l2 gv3), ([] = merge gv3 l2), ([] = merge gv3 gv3)
([] = gv3 ++ l2), ([] = gv3 ++ gv3), ((l2, l2) = split gv3), ((l2, gv3) = split l2), ((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length gv3 = b)
(a <=* gv2), (b <=* gv2), (a0 <=* gv2), (sorted gv2), (Permutation l1 gv2), (Permutation l2 gv2), (Permutation gv2 l1), (Permutation gv2 l2), (Permutation gv2 gv2), (In a gv2)
(In a0 gv2), (l1 = gv2), (l2 = gv2), (gv2 = l1), (gv2 = l2), (gv2 = gv2), (false = sorted_bool gv2), (true = sorted_bool gv2), (a <=* a :: gv2), (a <=* b :: gv2)
(a <=* merge l1 gv2), (a <=* merge l2 gv2), (a <=* merge gv2 l1), (a <=* merge gv2 l2), (a <=* merge gv2 gv2), (a <=* l1 ++ gv2), (a <=* l2 ++ gv2), (a <=* gv2 ++ l1), (a <=* gv2 ++ l2), (a <=* gv2 ++ gv2)
(b <=* b :: gv2), (b <=* a0 :: gv2), (b <=* merge l1 gv2), (b <=* merge l2 gv2), (b <=* merge gv2 l1), (b <=* merge gv2 l2), (b <=* merge gv2 gv2), (b <=* l1 ++ gv2), (b <=* l2 ++ gv2), (b <=* gv2 ++ l1)
(b <=* gv2 ++ gv2), (a0 <=* a :: gv2), (a0 <=* b :: gv2), (a0 <=* a0 :: gv2), (a0 <=* merge l1 gv2), (a0 <=* merge l2 gv2), (a0 <=* merge gv2 l1), (a0 <=* merge gv2 l2), (a0 <=* merge gv2 gv2), (a0 <=* l1 ++ gv2)
(a0 <=* gv2 ++ l1), (a0 <=* gv2 ++ l2), (a0 <=* gv2 ++ gv2), (length l1 <=* gv2), (length l1 <=* a :: gv2), (length l1 <=* b :: gv2), (length l1 <=* a0 :: gv2), (length l1 <=* merge l1 gv2), (length l1 <=* merge l2 gv2), (length l1 <=* merge gv2 l1)
(length l1 <=* merge gv2 gv2), (length l1 <=* l1 ++ gv2), (length l1 <=* l2 ++ gv2), (length l1 <=* gv2 ++ l1), (length l1 <=* gv2 ++ l2), (length l1 <=* gv2 ++ gv2), (length l2 <=* gv2), (length l2 <=* a :: gv2), (length l2 <=* b :: gv2), (length l2 <=* a0 :: gv2)
(length l2 <=* merge l2 gv2), (length l2 <=* merge gv2 l1), (length l2 <=* merge gv2 l2), (length l2 <=* merge gv2 gv2), (length l2 <=* l1 ++ gv2), (length l2 <=* l2 ++ gv2), (length l2 <=* gv2 ++ l1), (length l2 <=* gv2 ++ l2), (length l2 <=* gv2 ++ gv2), (length gv2 <=* l1)
(length gv2 <=* gv2), (length gv2 <=* a :: l1), (length gv2 <=* a :: l2), (length gv2 <=* a :: gv2), (length gv2 <=* b :: l1), (length gv2 <=* b :: l2), (length gv2 <=* b :: gv2), (length gv2 <=* a0 :: l1), (length gv2 <=* a0 :: l2), (length gv2 <=* a0 :: gv2)
(length gv2 <=* merge l1 l2), (length gv2 <=* merge l1 gv2), (length gv2 <=* merge l2 l1), (length gv2 <=* merge l2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge gv2 l1), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* l1 ++ l1), (length gv2 <=* l1 ++ l2)
(length gv2 <=* l2 ++ l1), (length gv2 <=* l2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* gv2 ++ l1), (length gv2 <=* gv2 ++ l2), (length gv2 <=* gv2 ++ gv2), (length gv2 <=* []), (sorted (a :: gv2)), (sorted (b :: gv2)), (sorted (a0 :: gv2))
(sorted (merge l2 gv2)), (sorted (merge gv2 l1)), (sorted (merge gv2 l2)), (sorted (merge gv2 gv2)), (sorted (l1 ++ gv2)), (sorted (l2 ++ gv2)), (sorted (gv2 ++ l1)), (sorted (gv2 ++ l2)), (sorted (gv2 ++ gv2)), (Permutation l1 (a :: gv2))
(Permutation l1 (a0 :: gv2)), (Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l2 gv2)), (Permutation l1 (merge gv2 l1)), (Permutation l1 (merge gv2 l2)), (Permutation l1 (merge gv2 gv2)), (Permutation l1 (l1 ++ gv2)), (Permutation l1 (l2 ++ gv2)), (Permutation l1 (gv2 ++ l1)), (Permutation l1 (gv2 ++ l2))
(Permutation l2 (a :: gv2)), (Permutation l2 (b :: gv2)), (Permutation l2 (a0 :: gv2)), (Permutation l2 (merge l1 gv2)), (Permutation l2 (merge l2 gv2)), (Permutation l2 (merge gv2 l1)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (l1 ++ gv2)), (Permutation l2 (l2 ++ gv2))
(Permutation l2 (gv2 ++ l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation gv2 (a :: l1)), (Permutation gv2 (a :: l2)), (Permutation gv2 (a :: gv2)), (Permutation gv2 (b :: l1)), (Permutation gv2 (b :: l2)), (Permutation gv2 (b :: gv2)), (Permutation gv2 (a0 :: l1)), (Permutation gv2 (a0 :: l2))
(Permutation gv2 (merge l1 l1)), (Permutation gv2 (merge l1 l2)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l2 l1)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (l1 ++ l1))
(Permutation gv2 (l1 ++ gv2)), (Permutation gv2 (l2 ++ l1)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (gv2 ++ l1)), (Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (gv2 ++ gv2)), (Permutation gv2 []), (Permutation (a :: l1) gv2), (Permutation (a :: l1) (a :: gv2))
(Permutation (a :: l1) (a0 :: gv2)), (Permutation (a :: l1) (merge l1 gv2)), (Permutation (a :: l1) (merge l2 gv2)), (Permutation (a :: l1) (merge gv2 l1)), (Permutation (a :: l1) (merge gv2 l2)), (Permutation (a :: l1) (merge gv2 gv2)), (Permutation (a :: l1) (l1 ++ gv2)), (Permutation (a :: l1) (l2 ++ gv2)), (Permutation (a :: l1) (gv2 ++ l1)), (Permutation (a :: l1) (gv2 ++ l2))
(Permutation (a :: l2) gv2), (Permutation (a :: l2) (a :: gv2)), (Permutation (a :: l2) (b :: gv2)), (Permutation (a :: l2) (a0 :: gv2)), (Permutation (a :: l2) (merge l1 gv2)), (Permutation (a :: l2) (merge l2 gv2)), (Permutation (a :: l2) (merge gv2 l1)), (Permutation (a :: l2) (merge gv2 l2)), (Permutation (a :: l2) (merge gv2 gv2)), (Permutation (a :: l2) (l1 ++ gv2))
(Permutation (a :: l2) (gv2 ++ l1)), (Permutation (a :: l2) (gv2 ++ l2)), (Permutation (a :: l2) (gv2 ++ gv2)), (Permutation (a :: gv2) l1), (Permutation (a :: gv2) l2), (Permutation (a :: gv2) gv2), (Permutation (a :: gv2) (a :: l1)), (Permutation (a :: gv2) (a :: l2)), (Permutation (a :: gv2) (b :: l1)), (Permutation (a :: gv2) (b :: l2))
(Permutation (a :: gv2) (a0 :: l1)), (Permutation (a :: gv2) (a0 :: l2)), (Permutation (a :: gv2) (a0 :: gv2)), (Permutation (a :: gv2) (merge l1 l1)), (Permutation (a :: gv2) (merge l1 l2)), (Permutation (a :: gv2) (merge l1 gv2)), (Permutation (a :: gv2) (merge l2 l1)), (Permutation (a :: gv2) (merge l2 l2)), (Permutation (a :: gv2) (merge l2 gv2)), (Permutation (a :: gv2) (merge gv2 l1))
(Permutation (a :: gv2) (merge gv2 gv2)), (Permutation (a :: gv2) (l1 ++ l1)), (Permutation (a :: gv2) (l1 ++ l2)), (Permutation (a :: gv2) (l1 ++ gv2)), (Permutation (a :: gv2) (l2 ++ l1)), (Permutation (a :: gv2) (l2 ++ l2)), (Permutation (a :: gv2) (l2 ++ gv2)), (Permutation (a :: gv2) (gv2 ++ l1)), (Permutation (a :: gv2) (gv2 ++ l2)), (Permutation (a :: gv2) (gv2 ++ gv2))
(Permutation (b :: l1) gv2), (Permutation (b :: l1) (a :: gv2)), (Permutation (b :: l1) (b :: gv2)), (Permutation (b :: l1) (a0 :: gv2)), (Permutation (b :: l1) (merge l1 gv2)), (Permutation (b :: l1) (merge l2 gv2)), (Permutation (b :: l1) (merge gv2 l1)), (Permutation (b :: l1) (merge gv2 l2)), (Permutation (b :: l1) (merge gv2 gv2)), (Permutation (b :: l1) (l1 ++ gv2))
(Permutation (b :: l1) (gv2 ++ l1)), (Permutation (b :: l1) (gv2 ++ l2)), (Permutation (b :: l1) (gv2 ++ gv2)), (Permutation (b :: l2) gv2), (Permutation (b :: l2) (a :: gv2)), (Permutation (b :: l2) (b :: gv2)), (Permutation (b :: l2) (a0 :: gv2)), (Permutation (b :: l2) (merge l1 gv2)), (Permutation (b :: l2) (merge l2 gv2)), (Permutation (b :: l2) (merge gv2 l1))
(Permutation (b :: l2) (merge gv2 gv2)), (Permutation (b :: l2) (l1 ++ gv2)), (Permutation (b :: l2) (l2 ++ gv2)), (Permutation (b :: l2) (gv2 ++ l1)), (Permutation (b :: l2) (gv2 ++ l2)), (Permutation (b :: l2) (gv2 ++ gv2)), (Permutation (b :: gv2) l1), (Permutation (b :: gv2) l2), (Permutation (b :: gv2) gv2), (Permutation (b :: gv2) (a :: l1))
(Permutation (b :: gv2) (a :: gv2)), (Permutation (b :: gv2) (b :: l1)), (Permutation (b :: gv2) (b :: l2)), (Permutation (b :: gv2) (a0 :: l1)), (Permutation (b :: gv2) (a0 :: l2)), (Permutation (b :: gv2) (a0 :: gv2)), (Permutation (b :: gv2) (merge l1 l1)), (Permutation (b :: gv2) (merge l1 l2)), (Permutation (b :: gv2) (merge l1 gv2)), (Permutation (b :: gv2) (merge l2 l1))
(Permutation (b :: gv2) (merge l2 gv2)), (Permutation (b :: gv2) (merge gv2 l1)), (Permutation (b :: gv2) (merge gv2 l2)), (Permutation (b :: gv2) (merge gv2 gv2)), (Permutation (b :: gv2) (l1 ++ l1)), (Permutation (b :: gv2) (l1 ++ l2)), (Permutation (b :: gv2) (l1 ++ gv2)), (Permutation (b :: gv2) (l2 ++ l1)), (Permutation (b :: gv2) (l2 ++ l2)), (Permutation (b :: gv2) (l2 ++ gv2))
(Permutation (b :: gv2) (gv2 ++ l2)), (Permutation (b :: gv2) (gv2 ++ gv2)), (Permutation (b :: gv2) []), (Permutation (a0 :: l1) gv2), (Permutation (a0 :: l1) (a :: gv2)), (Permutation (a0 :: l1) (b :: gv2)), (Permutation (a0 :: l1) (a0 :: gv2)), (Permutation (a0 :: l1) (merge l1 gv2)), (Permutation (a0 :: l1) (merge l2 gv2)), (Permutation (a0 :: l1) (merge gv2 l1))
(Permutation (a0 :: l1) (merge gv2 gv2)), (Permutation (a0 :: l1) (l1 ++ gv2)), (Permutation (a0 :: l1) (l2 ++ gv2)), (Permutation (a0 :: l1) (gv2 ++ l1)), (Permutation (a0 :: l1) (gv2 ++ l2)), (Permutation (a0 :: l1) (gv2 ++ gv2)), (Permutation (a0 :: l2) gv2), (Permutation (a0 :: l2) (a :: gv2)), (Permutation (a0 :: l2) (b :: gv2)), (Permutation (a0 :: l2) (a0 :: gv2))
(Permutation (a0 :: l2) (merge l2 gv2)), (Permutation (a0 :: l2) (merge gv2 l1)), (Permutation (a0 :: l2) (merge gv2 l2)), (Permutation (a0 :: l2) (merge gv2 gv2)), (Permutation (a0 :: l2) (l1 ++ gv2)), (Permutation (a0 :: l2) (l2 ++ gv2)), (Permutation (a0 :: l2) (gv2 ++ l1)), (Permutation (a0 :: l2) (gv2 ++ l2)), (Permutation (a0 :: l2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) l1)
(Permutation (a0 :: gv2) gv2), (Permutation (a0 :: gv2) (a :: l1)), (Permutation (a0 :: gv2) (a :: l2)), (Permutation (a0 :: gv2) (a :: gv2)), (Permutation (a0 :: gv2) (b :: l1)), (Permutation (a0 :: gv2) (b :: l2)), (Permutation (a0 :: gv2) (b :: gv2)), (Permutation (a0 :: gv2) (a0 :: l1)), (Permutation (a0 :: gv2) (a0 :: l2)), (Permutation (a0 :: gv2) (merge l1 l1))
(Permutation (a0 :: gv2) (merge l1 gv2)), (Permutation (a0 :: gv2) (merge l2 l1)), (Permutation (a0 :: gv2) (merge l2 l2)), (Permutation (a0 :: gv2) (merge l2 gv2)), (Permutation (a0 :: gv2) (merge gv2 l1)), (Permutation (a0 :: gv2) (merge gv2 l2)), (Permutation (a0 :: gv2) (merge gv2 gv2)), (Permutation (a0 :: gv2) (l1 ++ l1)), (Permutation (a0 :: gv2) (l1 ++ l2)), (Permutation (a0 :: gv2) (l1 ++ gv2))
(Permutation (a0 :: gv2) (l2 ++ l2)), (Permutation (a0 :: gv2) (l2 ++ gv2)), (Permutation (a0 :: gv2) (gv2 ++ l1)), (Permutation (a0 :: gv2) (gv2 ++ l2)), (Permutation (a0 :: gv2) (gv2 ++ gv2)), (Permutation (a0 :: gv2) []), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) (a :: gv2)), (Permutation (merge l1 l1) (b :: gv2)), (Permutation (merge l1 l1) (a0 :: gv2))
(Permutation (merge l1 l1) (merge l2 gv2)), (Permutation (merge l1 l1) (merge gv2 l1)), (Permutation (merge l1 l1) (merge gv2 l2)), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (l1 ++ gv2)), (Permutation (merge l1 l1) (l2 ++ gv2)), (Permutation (merge l1 l1) (gv2 ++ l1)), (Permutation (merge l1 l1) (gv2 ++ l2)), (Permutation (merge l1 l1) (gv2 ++ gv2)), (Permutation (merge l1 l2) gv2)
(Permutation (merge l1 l2) (b :: gv2)), (Permutation (merge l1 l2) (a0 :: gv2)), (Permutation (merge l1 l2) (merge l1 gv2)), (Permutation (merge l1 l2) (merge l2 gv2)), (Permutation (merge l1 l2) (merge gv2 l1)), (Permutation (merge l1 l2) (merge gv2 l2)), (Permutation (merge l1 l2) (merge gv2 gv2)), (Permutation (merge l1 l2) (l1 ++ gv2)), (Permutation (merge l1 l2) (l2 ++ gv2)), (Permutation (merge l1 l2) (gv2 ++ l1))
(Permutation (merge l1 l2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) l1), (Permutation (merge l1 gv2) l2), (Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) (a :: l1)), (Permutation (merge l1 gv2) (a :: l2)), (Permutation (merge l1 gv2) (a :: gv2)), (Permutation (merge l1 gv2) (b :: l1)), (Permutation (merge l1 gv2) (b :: l2)), (Permutation (merge l1 gv2) (b :: gv2))
(Permutation (merge l1 gv2) (a0 :: l2)), (Permutation (merge l1 gv2) (a0 :: gv2)), (Permutation (merge l1 gv2) (merge l1 l1)), (Permutation (merge l1 gv2) (merge l1 l2)), (Permutation (merge l1 gv2) (merge l2 l1)), (Permutation (merge l1 gv2) (merge l2 l2)), (Permutation (merge l1 gv2) (merge l2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge gv2 l2)), (Permutation (merge l1 gv2) (merge gv2 gv2))
(Permutation (merge l1 gv2) (l1 ++ l2)), (Permutation (merge l1 gv2) (l1 ++ gv2)), (Permutation (merge l1 gv2) (l2 ++ l1)), (Permutation (merge l1 gv2) (l2 ++ l2)), (Permutation (merge l1 gv2) (l2 ++ gv2)), (Permutation (merge l1 gv2) (gv2 ++ l1)), (Permutation (merge l1 gv2) (gv2 ++ l2)), (Permutation (merge l1 gv2) (gv2 ++ gv2)), (Permutation (merge l1 gv2) []), (Permutation (merge l2 l1) gv2)
(Permutation (merge l2 l1) (b :: gv2)), (Permutation (merge l2 l1) (a0 :: gv2)), (Permutation (merge l2 l1) (merge l1 gv2)), (Permutation (merge l2 l1) (merge l2 gv2)), (Permutation (merge l2 l1) (merge gv2 l1)), (Permutation (merge l2 l1) (merge gv2 l2)), (Permutation (merge l2 l1) (merge gv2 gv2)), (Permutation (merge l2 l1) (l1 ++ gv2)), (Permutation (merge l2 l1) (l2 ++ gv2)), (Permutation (merge l2 l1) (gv2 ++ l1))
(Permutation (merge l2 l1) (gv2 ++ gv2)), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) (a :: gv2)), (Permutation (merge l2 l2) (b :: gv2)), (Permutation (merge l2 l2) (a0 :: gv2)), (Permutation (merge l2 l2) (merge l1 gv2)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (merge gv2 l1)), (Permutation (merge l2 l2) (merge gv2 l2)), (Permutation (merge l2 l2) (merge gv2 gv2))
(Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l1)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) l1), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) (a :: l1)), (Permutation (merge l2 gv2) (a :: l2)), (Permutation (merge l2 gv2) (a :: gv2))
(Permutation (merge l2 gv2) (b :: l2)), (Permutation (merge l2 gv2) (b :: gv2)), (Permutation (merge l2 gv2) (a0 :: l1)), (Permutation (merge l2 gv2) (a0 :: l2)), (Permutation (merge l2 gv2) (a0 :: gv2)), (Permutation (merge l2 gv2) (merge l1 l1)), (Permutation (merge l2 gv2) (merge l1 l2)), (Permutation (merge l2 gv2) (merge l1 gv2)), (Permutation (merge l2 gv2) (merge l2 l1)), (Permutation (merge l2 gv2) (merge l2 l2))
(Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (l1 ++ l1)), (Permutation (merge l2 gv2) (l1 ++ l2)), (Permutation (merge l2 gv2) (l1 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l1)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l1)), (Permutation (merge l2 gv2) (gv2 ++ l2))
(Permutation (merge l2 gv2) []), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) l2), (Permutation (merge gv2 l1) gv2), (Permutation (merge gv2 l1) (a :: l1)), (Permutation (merge gv2 l1) (a :: l2)), (Permutation (merge gv2 l1) (a :: gv2)), (Permutation (merge gv2 l1) (b :: l1)), (Permutation (merge gv2 l1) (b :: l2)), (Permutation (merge gv2 l1) (b :: gv2))
(Permutation (merge gv2 l1) (a0 :: l2)), (Permutation (merge gv2 l1) (a0 :: gv2)), (Permutation (merge gv2 l1) (merge l1 l1)), (Permutation (merge gv2 l1) (merge l1 l2)), (Permutation (merge gv2 l1) (merge l1 gv2)), (Permutation (merge gv2 l1) (merge l2 l1)), (Permutation (merge gv2 l1) (merge l2 l2)), (Permutation (merge gv2 l1) (merge l2 gv2)), (Permutation (merge gv2 l1) (merge gv2 l2)), (Permutation (merge gv2 l1) (merge gv2 gv2))
(Permutation (merge gv2 l1) (l1 ++ l2)), (Permutation (merge gv2 l1) (l1 ++ gv2)), (Permutation (merge gv2 l1) (l2 ++ l1)), (Permutation (merge gv2 l1) (l2 ++ l2)), (Permutation (merge gv2 l1) (l2 ++ gv2)), (Permutation (merge gv2 l1) (gv2 ++ l1)), (Permutation (merge gv2 l1) (gv2 ++ l2)), (Permutation (merge gv2 l1) (gv2 ++ gv2)), (Permutation (merge gv2 l1) []), (Permutation (merge gv2 l2) l1)
(Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) (a :: l1)), (Permutation (merge gv2 l2) (a :: l2)), (Permutation (merge gv2 l2) (a :: gv2)), (Permutation (merge gv2 l2) (b :: l1)), (Permutation (merge gv2 l2) (b :: l2)), (Permutation (merge gv2 l2) (b :: gv2)), (Permutation (merge gv2 l2) (a0 :: l1)), (Permutation (merge gv2 l2) (a0 :: l2)), (Permutation (merge gv2 l2) (a0 :: gv2))
(Permutation (merge gv2 l2) (merge l1 l2)), (Permutation (merge gv2 l2) (merge l1 gv2)), (Permutation (merge gv2 l2) (merge l2 l1)), (Permutation (merge gv2 l2) (merge l2 l2)), (Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge gv2 l1)), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (l1 ++ l1)), (Permutation (merge gv2 l2) (l1 ++ l2)), (Permutation (merge gv2 l2) (l1 ++ gv2))
(Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l1)), (Permutation (merge gv2 l2) (gv2 ++ l2)), (Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) []), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) (a :: l1))
(Permutation (merge gv2 gv2) (a :: gv2)), (Permutation (merge gv2 gv2) (b :: l1)), (Permutation (merge gv2 gv2) (b :: l2)), (Permutation (merge gv2 gv2) (b :: gv2)), (Permutation (merge gv2 gv2) (a0 :: l1)), (Permutation (merge gv2 gv2) (a0 :: l2)), (Permutation (merge gv2 gv2) (a0 :: gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 gv2) (merge l1 l2)), (Permutation (merge gv2 gv2) (merge l1 gv2))
(Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge gv2 l1)), (Permutation (merge gv2 gv2) (merge gv2 l2)), (Permutation (merge gv2 gv2) (l1 ++ l1)), (Permutation (merge gv2 gv2) (l1 ++ l2)), (Permutation (merge gv2 gv2) (l1 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l1)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2))
(Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) []), (Permutation (l1 ++ l1) gv2), (Permutation (l1 ++ l1) (a :: gv2)), (Permutation (l1 ++ l1) (b :: gv2)), (Permutation (l1 ++ l1) (a0 :: gv2)), (Permutation (l1 ++ l1) (merge l1 gv2)), (Permutation (l1 ++ l1) (merge l2 gv2)), (Permutation (l1 ++ l1) (merge gv2 l1))
(Permutation (l1 ++ l1) (merge gv2 gv2)), (Permutation (l1 ++ l1) (l1 ++ gv2)), (Permutation (l1 ++ l1) (l2 ++ gv2)), (Permutation (l1 ++ l1) (gv2 ++ l1)), (Permutation (l1 ++ l1) (gv2 ++ l2)), (Permutation (l1 ++ l1) (gv2 ++ gv2)), (Permutation (l1 ++ l2) gv2), (Permutation (l1 ++ l2) (a :: gv2)), (Permutation (l1 ++ l2) (b :: gv2)), (Permutation (l1 ++ l2) (a0 :: gv2))
(Permutation (l1 ++ l2) (merge l2 gv2)), (Permutation (l1 ++ l2) (merge gv2 l1)), (Permutation (l1 ++ l2) (merge gv2 l2)), (Permutation (l1 ++ l2) (merge gv2 gv2)), (Permutation (l1 ++ l2) (l1 ++ gv2)), (Permutation (l1 ++ l2) (l2 ++ gv2)), (Permutation (l1 ++ l2) (gv2 ++ l1)), (Permutation (l1 ++ l2) (gv2 ++ l2)), (Permutation (l1 ++ l2) (gv2 ++ gv2)), (Permutation (l1 ++ gv2) l1)
(Permutation (l1 ++ gv2) gv2), (Permutation (l1 ++ gv2) (a :: l1)), (Permutation (l1 ++ gv2) (a :: l2)), (Permutation (l1 ++ gv2) (a :: gv2)), (Permutation (l1 ++ gv2) (b :: l1)), (Permutation (l1 ++ gv2) (b :: l2)), (Permutation (l1 ++ gv2) (b :: gv2)), (Permutation (l1 ++ gv2) (a0 :: l1)), (Permutation (l1 ++ gv2) (a0 :: l2)), (Permutation (l1 ++ gv2) (a0 :: gv2))
(Permutation (l1 ++ gv2) (merge l1 l2)), (Permutation (l1 ++ gv2) (merge l1 gv2)), (Permutation (l1 ++ gv2) (merge l2 l1)), (Permutation (l1 ++ gv2) (merge l2 l2)), (Permutation (l1 ++ gv2) (merge l2 gv2)), (Permutation (l1 ++ gv2) (merge gv2 l1)), (Permutation (l1 ++ gv2) (merge gv2 l2)), (Permutation (l1 ++ gv2) (merge gv2 gv2)), (Permutation (l1 ++ gv2) (l1 ++ l1)), (Permutation (l1 ++ gv2) (l1 ++ l2))
(Permutation (l1 ++ gv2) (l2 ++ l2)), (Permutation (l1 ++ gv2) (l2 ++ gv2)), (Permutation (l1 ++ gv2) (gv2 ++ l1)), (Permutation (l1 ++ gv2) (gv2 ++ l2)), (Permutation (l1 ++ gv2) (gv2 ++ gv2)), (Permutation (l1 ++ gv2) []), (Permutation (l2 ++ l1) gv2), (Permutation (l2 ++ l1) (a :: gv2)), (Permutation (l2 ++ l1) (b :: gv2)), (Permutation (l2 ++ l1) (a0 :: gv2))
(Permutation (l2 ++ l1) (merge l2 gv2)), (Permutation (l2 ++ l1) (merge gv2 l1)), (Permutation (l2 ++ l1) (merge gv2 l2)), (Permutation (l2 ++ l1) (merge gv2 gv2)), (Permutation (l2 ++ l1) (l1 ++ gv2)), (Permutation (l2 ++ l1) (l2 ++ gv2)), (Permutation (l2 ++ l1) (gv2 ++ l1)), (Permutation (l2 ++ l1) (gv2 ++ l2)), (Permutation (l2 ++ l1) (gv2 ++ gv2)), (Permutation (l2 ++ l2) gv2)
(Permutation (l2 ++ l2) (b :: gv2)), (Permutation (l2 ++ l2) (a0 :: gv2)), (Permutation (l2 ++ l2) (merge l1 gv2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l1)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (l1 ++ gv2)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l1))
(Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) l1), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) (a :: l1)), (Permutation (l2 ++ gv2) (a :: l2)), (Permutation (l2 ++ gv2) (a :: gv2)), (Permutation (l2 ++ gv2) (b :: l1)), (Permutation (l2 ++ gv2) (b :: l2)), (Permutation (l2 ++ gv2) (b :: gv2))
(Permutation (l2 ++ gv2) (a0 :: l2)), (Permutation (l2 ++ gv2) (a0 :: gv2)), (Permutation (l2 ++ gv2) (merge l1 l1)), (Permutation (l2 ++ gv2) (merge l1 l2)), (Permutation (l2 ++ gv2) (merge l1 gv2)), (Permutation (l2 ++ gv2) (merge l2 l1)), (Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l1)), (Permutation (l2 ++ gv2) (merge gv2 l2))
(Permutation (l2 ++ gv2) (l1 ++ l1)), (Permutation (l2 ++ gv2) (l1 ++ l2)), (Permutation (l2 ++ gv2) (l1 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l1)), (Permutation (l2 ++ gv2) (l2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ l1)), (Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) []), (Permutation (gv2 ++ l1) l1)
(Permutation (gv2 ++ l1) gv2), (Permutation (gv2 ++ l1) (a :: l1)), (Permutation (gv2 ++ l1) (a :: l2)), (Permutation (gv2 ++ l1) (a :: gv2)), (Permutation (gv2 ++ l1) (b :: l1)), (Permutation (gv2 ++ l1) (b :: l2)), (Permutation (gv2 ++ l1) (b :: gv2)), (Permutation (gv2 ++ l1) (a0 :: l1)), (Permutation (gv2 ++ l1) (a0 :: l2)), (Permutation (gv2 ++ l1) (a0 :: gv2))
(Permutation (gv2 ++ l1) (merge l1 l2)), (Permutation (gv2 ++ l1) (merge l1 gv2)), (Permutation (gv2 ++ l1) (merge l2 l1)), (Permutation (gv2 ++ l1) (merge l2 l2)), (Permutation (gv2 ++ l1) (merge l2 gv2)), (Permutation (gv2 ++ l1) (merge gv2 l1)), (Permutation (gv2 ++ l1) (merge gv2 l2)), (Permutation (gv2 ++ l1) (merge gv2 gv2)), (Permutation (gv2 ++ l1) (l1 ++ l1)), (Permutation (gv2 ++ l1) (l1 ++ l2))
(Permutation (gv2 ++ l1) (l2 ++ l1)), (Permutation (gv2 ++ l1) (l2 ++ l2)), (Permutation (gv2 ++ l1) (l2 ++ gv2)), (Permutation (gv2 ++ l1) (gv2 ++ l2)), (Permutation (gv2 ++ l1) (gv2 ++ gv2)), (Permutation (gv2 ++ l1) []), (Permutation (gv2 ++ l2) l1), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) (a :: l1))
(Permutation (gv2 ++ l2) (a :: gv2)), (Permutation (gv2 ++ l2) (b :: l1)), (Permutation (gv2 ++ l2) (b :: l2)), (Permutation (gv2 ++ l2) (b :: gv2)), (Permutation (gv2 ++ l2) (a0 :: l1)), (Permutation (gv2 ++ l2) (a0 :: l2)), (Permutation (gv2 ++ l2) (a0 :: gv2)), (Permutation (gv2 ++ l2) (merge l1 l1)), (Permutation (gv2 ++ l2) (merge l1 l2)), (Permutation (gv2 ++ l2) (merge l1 gv2))
(Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l1)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge gv2 gv2)), (Permutation (gv2 ++ l2) (l1 ++ l1)), (Permutation (gv2 ++ l2) (l1 ++ l2)), (Permutation (gv2 ++ l2) (l1 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l1)), (Permutation (gv2 ++ l2) (l2 ++ l2))
(Permutation (gv2 ++ l2) (gv2 ++ l1)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) []), (Permutation (gv2 ++ gv2) l1), (Permutation (gv2 ++ gv2) l2), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) (a :: l1)), (Permutation (gv2 ++ gv2) (a :: l2)), (Permutation (gv2 ++ gv2) (a :: gv2)), (Permutation (gv2 ++ gv2) (b :: l1))
(Permutation (gv2 ++ gv2) (b :: gv2)), (Permutation (gv2 ++ gv2) (a0 :: l1)), (Permutation (gv2 ++ gv2) (a0 :: l2)), (Permutation (gv2 ++ gv2) (a0 :: gv2)), (Permutation (gv2 ++ gv2) (merge l1 l1)), (Permutation (gv2 ++ gv2) (merge l1 l2)), (Permutation (gv2 ++ gv2) (merge l1 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l1)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2))
(Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (l1 ++ l1)), (Permutation (gv2 ++ gv2) (l1 ++ l2)), (Permutation (gv2 ++ gv2) (l1 ++ gv2)), (Permutation (gv2 ++ gv2) (l2 ++ l1)), (Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (gv2 ++ l1)), (Permutation (gv2 ++ gv2) (gv2 ++ l2))
(Permutation [] gv2), (Permutation [] (a :: gv2)), (Permutation [] (b :: gv2)), (Permutation [] (a0 :: gv2)), (Permutation [] (merge l1 gv2)), (Permutation [] (merge l2 gv2)), (Permutation [] (merge gv2 l1)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge gv2 gv2)), (Permutation [] (l1 ++ gv2))
(Permutation [] (gv2 ++ l1)), (Permutation [] (gv2 ++ l2)), (Permutation [] (gv2 ++ gv2)), (In a (a :: gv2)), (In a (b :: gv2)), (In a (a0 :: gv2)), (In a (merge l1 gv2)), (In a (merge l2 gv2)), (In a (merge gv2 l1)), (In a (merge gv2 l2))
(In a (l1 ++ gv2)), (In a (l2 ++ gv2)), (In a (gv2 ++ l1)), (In a (gv2 ++ l2)), (In a (gv2 ++ gv2)), (In b (a :: gv2)), (In b (b :: gv2)), (In b (a0 :: gv2)), (In b (merge l1 gv2)), (In b (merge l2 gv2))
(In b (merge gv2 l2)), (In b (merge gv2 gv2)), (In b (l1 ++ gv2)), (In b (l2 ++ gv2)), (In b (gv2 ++ l1)), (In b (gv2 ++ l2)), (In b (gv2 ++ gv2)), (In a0 (a :: gv2)), (In a0 (b :: gv2)), (In a0 (a0 :: gv2))
(In a0 (merge l2 gv2)), (In a0 (merge gv2 l1)), (In a0 (merge gv2 l2)), (In a0 (merge gv2 gv2)), (In a0 (l1 ++ gv2)), (In a0 (l2 ++ gv2)), (In a0 (gv2 ++ l1)), (In a0 (gv2 ++ l2)), (In a0 (gv2 ++ gv2)), (In (length l1) gv2)
(In (length l1) (b :: gv2)), (In (length l1) (a0 :: gv2)), (In (length l1) (merge l1 gv2)), (In (length l1) (merge l2 gv2)), (In (length l1) (merge gv2 l1)), (In (length l1) (merge gv2 l2)), (In (length l1) (merge gv2 gv2)), (In (length l1) (l1 ++ gv2)), (In (length l1) (l2 ++ gv2)), (In (length l1) (gv2 ++ l1))
(In (length l1) (gv2 ++ gv2)), (In (length l2) gv2), (In (length l2) (a :: gv2)), (In (length l2) (b :: gv2)), (In (length l2) (a0 :: gv2)), (In (length l2) (merge l1 gv2)), (In (length l2) (merge l2 gv2)), (In (length l2) (merge gv2 l1)), (In (length l2) (merge gv2 l2)), (In (length l2) (merge gv2 gv2))
(In (length l2) (l2 ++ gv2)), (In (length l2) (gv2 ++ l1)), (In (length l2) (gv2 ++ l2)), (In (length l2) (gv2 ++ gv2)), (In (length gv2) l1), (In (length gv2) l2), (In (length gv2) gv2), (In (length gv2) (a :: l1)), (In (length gv2) (a :: l2)), (In (length gv2) (a :: gv2))
(In (length gv2) (b :: l2)), (In (length gv2) (b :: gv2)), (In (length gv2) (a0 :: l1)), (In (length gv2) (a0 :: l2)), (In (length gv2) (a0 :: gv2)), (In (length gv2) (merge l1 l1)), (In (length gv2) (merge l1 l2)), (In (length gv2) (merge l1 gv2)), (In (length gv2) (merge l2 l1)), (In (length gv2) (merge l2 l2))
(In (length gv2) (merge gv2 l1)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (l1 ++ l1)), (In (length gv2) (l1 ++ l2)), (In (length gv2) (l1 ++ gv2)), (In (length gv2) (l2 ++ l1)), (In (length gv2) (l2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (gv2 ++ l1))
(In (length gv2) (gv2 ++ gv2)), (a < length gv2), (b < length gv2), (a0 < length gv2), (length l1 < length gv2), (length l2 < length gv2), (length gv2 < a), (length gv2 < b), (length gv2 < a0), (length gv2 < length l1)
(a <= length gv2), (b <= length gv2), (a0 <= length gv2), (length l1 <= length gv2), (length l2 <= length gv2), (length gv2 <= a), (length gv2 <= b), (length gv2 <= a0), (length gv2 <= length l1), (length gv2 <= length l2)
(~ b <=* gv2), (~ a0 <=* gv2), (~ sorted gv2), (~ Permutation l1 gv2), (~ Permutation l2 gv2), (~ Permutation gv2 l1), (~ Permutation gv2 l2), (~ Permutation gv2 gv2), (~ In a gv2), (~ In b gv2)
(l1 <> gv2), (l2 <> gv2), (gv2 <> l1), (gv2 <> l2), (gv2 <> gv2), (None = Some gv2), (a :: l1 = gv2), (a :: l1 = merge l1 gv2), (a :: l1 = merge l2 gv2), (a :: l1 = merge gv2 l1)
(a :: l1 = merge gv2 gv2), (a :: l1 = l1 ++ gv2), (a :: l1 = l2 ++ gv2), (a :: l1 = gv2 ++ l1), (a :: l1 = gv2 ++ l2), (a :: l1 = gv2 ++ gv2), (a :: l2 = gv2), (a :: l2 = merge l1 gv2), (a :: l2 = merge l2 gv2), (a :: l2 = merge gv2 l1)
(a :: l2 = merge gv2 gv2), (a :: l2 = l1 ++ gv2), (a :: l2 = l2 ++ gv2), (a :: l2 = gv2 ++ l1), (a :: l2 = gv2 ++ l2), (a :: l2 = gv2 ++ gv2), (a :: gv2 = l1), (a :: gv2 = l2), (a :: gv2 = gv2), (a :: gv2 = merge l1 l1)
(a :: gv2 = merge l1 gv2), (a :: gv2 = merge l2 l1), (a :: gv2 = merge l2 l2), (a :: gv2 = merge l2 gv2), (a :: gv2 = merge gv2 l1), (a :: gv2 = merge gv2 l2), (a :: gv2 = merge gv2 gv2), (a :: gv2 = l1 ++ l1), (a :: gv2 = l1 ++ l2), (a :: gv2 = l1 ++ gv2)
(a :: gv2 = l2 ++ l2), (a :: gv2 = l2 ++ gv2), (a :: gv2 = gv2 ++ l1), (a :: gv2 = gv2 ++ l2), (a :: gv2 = gv2 ++ gv2), (a :: gv2 = []), (b :: l1 = gv2), (b :: l1 = merge l1 gv2), (b :: l1 = merge l2 gv2), (b :: l1 = merge gv2 l1)
(b :: l1 = merge gv2 gv2), (b :: l1 = l1 ++ gv2), (b :: l1 = l2 ++ gv2), (b :: l1 = gv2 ++ l1), (b :: l1 = gv2 ++ l2), (b :: l1 = gv2 ++ gv2), (b :: l2 = gv2), (b :: l2 = merge l1 gv2), (b :: l2 = merge l2 gv2), (b :: l2 = merge gv2 l1)
(b :: l2 = merge gv2 gv2), (b :: l2 = l1 ++ gv2), (b :: l2 = l2 ++ gv2), (b :: l2 = gv2 ++ l1), (b :: l2 = gv2 ++ l2), (b :: l2 = gv2 ++ gv2), (b :: gv2 = l1), (b :: gv2 = l2), (b :: gv2 = gv2), (b :: gv2 = merge l1 l1)
(b :: gv2 = merge l1 gv2), (b :: gv2 = merge l2 l1), (b :: gv2 = merge l2 l2), (b :: gv2 = merge l2 gv2), (b :: gv2 = merge gv2 l1), (b :: gv2 = merge gv2 l2), (b :: gv2 = merge gv2 gv2), (b :: gv2 = l1 ++ l1), (b :: gv2 = l1 ++ l2), (b :: gv2 = l1 ++ gv2)
(b :: gv2 = l2 ++ l2), (b :: gv2 = l2 ++ gv2), (b :: gv2 = gv2 ++ l1), (b :: gv2 = gv2 ++ l2), (b :: gv2 = gv2 ++ gv2), (b :: gv2 = []), (a0 :: l1 = gv2), (a0 :: l1 = merge l1 gv2), (a0 :: l1 = merge l2 gv2), (a0 :: l1 = merge gv2 l1)
(a0 :: l1 = merge gv2 gv2), (a0 :: l1 = l1 ++ gv2), (a0 :: l1 = l2 ++ gv2), (a0 :: l1 = gv2 ++ l1), (a0 :: l1 = gv2 ++ l2), (a0 :: l1 = gv2 ++ gv2), (a0 :: l2 = gv2), (a0 :: l2 = merge l1 gv2), (a0 :: l2 = merge l2 gv2), (a0 :: l2 = merge gv2 l1)
(a0 :: l2 = merge gv2 gv2), (a0 :: l2 = l1 ++ gv2), (a0 :: l2 = l2 ++ gv2), (a0 :: l2 = gv2 ++ l1), (a0 :: l2 = gv2 ++ l2), (a0 :: l2 = gv2 ++ gv2), (a0 :: gv2 = l1), (a0 :: gv2 = l2), (a0 :: gv2 = gv2), (a0 :: gv2 = merge l1 l1)
(a0 :: gv2 = merge l1 gv2), (a0 :: gv2 = merge l2 l1), (a0 :: gv2 = merge l2 l2), (a0 :: gv2 = merge l2 gv2), (a0 :: gv2 = merge gv2 l1), (a0 :: gv2 = merge gv2 l2), (a0 :: gv2 = merge gv2 gv2), (a0 :: gv2 = l1 ++ l1), (a0 :: gv2 = l1 ++ l2), (a0 :: gv2 = l1 ++ gv2)
(a0 :: gv2 = l2 ++ l2), (a0 :: gv2 = l2 ++ gv2), (a0 :: gv2 = gv2 ++ l1), (a0 :: gv2 = gv2 ++ l2), (a0 :: gv2 = gv2 ++ gv2), (a0 :: gv2 = []), (merge l1 l1 = gv2), (merge l1 l1 = l1 ++ gv2), (merge l1 l1 = l2 ++ gv2), (merge l1 l1 = gv2 ++ l1)
(merge l1 l1 = gv2 ++ gv2), (merge l1 l2 = gv2), (merge l1 l2 = l1 ++ gv2), (merge l1 l2 = l2 ++ gv2), (merge l1 l2 = gv2 ++ l1), (merge l1 l2 = gv2 ++ l2), (merge l1 l2 = gv2 ++ gv2), (merge l1 gv2 = l1), (merge l1 gv2 = l2), (merge l1 gv2 = gv2)
(merge l1 gv2 = l1 ++ l2), (merge l1 gv2 = l1 ++ gv2), (merge l1 gv2 = l2 ++ l1), (merge l1 gv2 = l2 ++ l2), (merge l1 gv2 = l2 ++ gv2), (merge l1 gv2 = gv2 ++ l1), (merge l1 gv2 = gv2 ++ l2), (merge l1 gv2 = gv2 ++ gv2), (merge l2 l1 = gv2), (merge l2 l1 = l1 ++ gv2)
(merge l2 l1 = gv2 ++ l1), (merge l2 l1 = gv2 ++ l2), (merge l2 l1 = gv2 ++ gv2), (merge l2 l2 = gv2), (merge l2 l2 = l1 ++ gv2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = gv2 ++ l1), (merge l2 l2 = gv2 ++ l2), (merge l2 l2 = gv2 ++ gv2), (merge l2 gv2 = l1)
(merge l2 gv2 = gv2), (merge l2 gv2 = l1 ++ l1), (merge l2 gv2 = l1 ++ l2), (merge l2 gv2 = l1 ++ gv2), (merge l2 gv2 = l2 ++ l1), (merge l2 gv2 = l2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = gv2 ++ l1), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = gv2 ++ gv2)
(merge gv2 l1 = l2), (merge gv2 l1 = gv2), (merge gv2 l1 = l1 ++ l1), (merge gv2 l1 = l1 ++ l2), (merge gv2 l1 = l1 ++ gv2), (merge gv2 l1 = l2 ++ l1), (merge gv2 l1 = l2 ++ l2), (merge gv2 l1 = l2 ++ gv2), (merge gv2 l1 = gv2 ++ l1), (merge gv2 l1 = gv2 ++ l2)
(merge gv2 l2 = l1), (merge gv2 l2 = l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l1 ++ l1), (merge gv2 l2 = l1 ++ l2), (merge gv2 l2 = l1 ++ gv2), (merge gv2 l2 = l2 ++ l1), (merge gv2 l2 = l2 ++ l2), (merge gv2 l2 = l2 ++ gv2), (merge gv2 l2 = gv2 ++ l1)
(merge gv2 l2 = gv2 ++ gv2), (merge gv2 gv2 = l1), (merge gv2 gv2 = l2), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1 ++ l1), (merge gv2 gv2 = l1 ++ l2), (merge gv2 gv2 = l1 ++ gv2), (merge gv2 gv2 = l2 ++ l1), (merge gv2 gv2 = l2 ++ l2), (merge gv2 gv2 = l2 ++ gv2)
(merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = gv2 ++ gv2), (l1 ++ l1 = gv2), (l1 ++ l2 = gv2), (l1 ++ gv2 = l1), (l1 ++ gv2 = l2), (l1 ++ gv2 = gv2), (l2 ++ l1 = gv2), (l2 ++ l2 = gv2), (l2 ++ gv2 = l1)
(l2 ++ gv2 = gv2), (gv2 ++ l1 = l1), (gv2 ++ l1 = l2), (gv2 ++ l1 = gv2), (gv2 ++ l2 = l1), (gv2 ++ l2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ gv2 = l1), (gv2 ++ gv2 = l2), (gv2 ++ gv2 = gv2)
([] = merge l1 gv2), ([] = merge l2 gv2), ([] = merge gv2 l1), ([] = merge gv2 l2), ([] = merge gv2 gv2), ([] = l1 ++ gv2), ([] = l2 ++ gv2), ([] = gv2 ++ l1), ([] = gv2 ++ l2), ([] = gv2 ++ gv2)
((l1, l2) = split gv2), ((l1, gv2) = split l1), ((l1, gv2) = split l2), ((l1, gv2) = split gv2), ((l2, l1) = split gv2), ((l2, l2) = split gv2), ((l2, gv2) = split l1), ((l2, gv2) = split l2), ((l2, gv2) = split gv2), ((gv2, l1) = split l1)
((gv2, l1) = split gv2), ((gv2, l2) = split l1), ((gv2, l2) = split l2), ((gv2, l2) = split gv2), ((gv2, gv2) = split l1), ((gv2, gv2) = split l2), ((gv2, gv2) = split gv2), (length gv2 = a), (length gv2 = b), (length gv2 = a0)

Label: 2 (6)
Abducted Assumption: (sorted (merge gv3 (a0 :: l2)))
Positive Examples:
   [a := 4; a0 := 1; b := 3; gv3 := []; l1 := [1; 5; 3; 5; 0]; l2 := [3]]
   [a := 0; a0 := 0; b := 2; gv3 := []; l1 := [0; 1]; l2 := [1]]
   [a := 2; a0 := 1; b := 3; gv3 := [3]; l1 := [2; 1]; l2 := []]
   [a := 2; a0 := 0; b := 2; gv3 := []; l1 := [3; 1; 1]; l2 := [2; 2]]
   [a := 2; a0 := 0; b := 1; gv3 := [1]; l1 := [2; 2]; l2 := [1]]
   [a := 4; a0 := 2; b := 3; gv3 := []; l1 := [3; 3; 3; 3]; l2 := []]
   [a := 1; a0 := 0; b := 1; gv3 := []; l1 := [2]; l2 := [1; 2]]
   [a := 0; a0 := 0; b := 1; gv3 := []; l1 := []; l2 := [2]]
   [a := 0; a0 := 0; b := 2; gv3 := [2; 2]; l1 := [3; 4; 4]; l2 := [2]]
   [a := 1; a0 := 1; b := 3; gv3 := []; l1 := [0; 4; 4; 3]; l2 := [4; 4]]
   etc ...

Negative Examples:
   [a := 3; a0 := 0; b := 4; gv3 := []; l1 := [3; 2]; l2 := [4; 0; 3; 0]]
   [a := 2; a0 := 1; b := 5; gv3 := []; l1 := [4]; l2 := [3; 2; 1]]
   [a := 3; a0 := 0; b := 3; gv3 := [3]; l1 := [1]; l2 := [2; 0; 1]]
   [a := 1; a0 := 1; b := 2; gv3 := []; l1 := [1]; l2 := [2; 2; 3; 0]]
   [a := 5; a0 := 0; b := 1; gv3 := []; l1 := [5; 5; 5; 1]; l2 := [0; 4; 3]]
   [a := 1; a0 := 0; b := 2; gv3 := [3; 2; 2]; l1 := []; l2 := [2; 1; 5; 0; 4]]
   [a := 2; a0 := 0; b := 1; gv3 := [4; 6; 4; 1; 2]; l1 := [0; 3; 6; 0; 5; 0]; l2 := [5; 0; 2]]
   [a := 3; a0 := 1; b := 3; gv3 := []; l1 := [0]; l2 := [1; 0]]
   [a := 3; a0 := 1; b := 5; gv3 := []; l1 := [2; 2]; l2 := [5; 0]]
   [a := 1; a0 := 1; b := 3; gv3 := [3; 5]; l1 := [0]; l2 := [5; 5; 3]]
   etc ...

(b <=* l2), (b <=* gv3), (a0 <=* l2), (a0 <=* gv3), (sorted l2), (sorted gv3), (Permutation l2 l2), (Permutation l2 gv3), (Permutation gv3 l2), (Permutation gv3 gv3)
(In b gv3), (In a0 l2), (In a0 gv3), (b < b), (b < a0), (a0 < b), (a0 < a0), (b <= b), (b <= a0), (a0 <= b)
(l2 = l2), (l2 = gv3), (gv3 = l2), (gv3 = gv3), (b = b), (b = a0), (a0 = b), (a0 = a0), (false = sorted_bool l2), (false = sorted_bool gv3)
(true = sorted_bool gv3), (b <=* b :: l2), (b <=* b :: gv3), (b <=* a0 :: l2), (b <=* a0 :: gv3), (b <=* merge l2 l2), (b <=* merge l2 gv3), (b <=* merge gv3 l2), (b <=* merge gv3 gv3), (b <=* l2 ++ l2)
(b <=* gv3 ++ l2), (b <=* gv3 ++ gv3), (b <=* []), (a0 <=* b :: l2), (a0 <=* b :: gv3), (a0 <=* a0 :: l2), (a0 <=* a0 :: gv3), (a0 <=* merge l2 l2), (a0 <=* merge l2 gv3), (a0 <=* merge gv3 l2)
(a0 <=* l2 ++ l2), (a0 <=* l2 ++ gv3), (a0 <=* gv3 ++ l2), (a0 <=* gv3 ++ gv3), (a0 <=* []), (length l2 <=* l2), (length l2 <=* gv3), (length l2 <=* b :: l2), (length l2 <=* b :: gv3), (length l2 <=* a0 :: l2)
(length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv3), (length l2 <=* merge gv3 l2), (length l2 <=* merge gv3 gv3), (length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv3), (length l2 <=* gv3 ++ l2), (length l2 <=* gv3 ++ gv3), (length l2 <=* []), (length gv3 <=* l2)
(length gv3 <=* b :: l2), (length gv3 <=* b :: gv3), (length gv3 <=* a0 :: l2), (length gv3 <=* a0 :: gv3), (length gv3 <=* merge l2 l2), (length gv3 <=* merge l2 gv3), (length gv3 <=* merge gv3 l2), (length gv3 <=* merge gv3 gv3), (length gv3 <=* l2 ++ l2), (length gv3 <=* l2 ++ gv3)
(length gv3 <=* gv3 ++ gv3), (length gv3 <=* []), (sorted (b :: l2)), (sorted (b :: gv3)), (sorted (a0 :: l2)), (sorted (a0 :: gv3)), (sorted (merge l2 l2)), (sorted (merge l2 gv3)), (sorted (merge gv3 l2)), (sorted (merge gv3 gv3))
(sorted (l2 ++ gv3)), (sorted (gv3 ++ l2)), (sorted (gv3 ++ gv3)), (sorted []), (Permutation l2 (b :: l2)), (Permutation l2 (b :: gv3)), (Permutation l2 (a0 :: l2)), (Permutation l2 (a0 :: gv3)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv3))
(Permutation l2 (merge gv3 gv3)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l2 ++ gv3)), (Permutation l2 (gv3 ++ l2)), (Permutation l2 (gv3 ++ gv3)), (Permutation l2 []), (Permutation gv3 (b :: l2)), (Permutation gv3 (b :: gv3)), (Permutation gv3 (a0 :: l2)), (Permutation gv3 (a0 :: gv3))
(Permutation gv3 (merge l2 gv3)), (Permutation gv3 (merge gv3 l2)), (Permutation gv3 (merge gv3 gv3)), (Permutation gv3 (l2 ++ l2)), (Permutation gv3 (l2 ++ gv3)), (Permutation gv3 (gv3 ++ l2)), (Permutation gv3 (gv3 ++ gv3)), (Permutation gv3 []), (Permutation (b :: l2) l2), (Permutation (b :: l2) gv3)
(Permutation (b :: l2) (a0 :: l2)), (Permutation (b :: l2) (a0 :: gv3)), (Permutation (b :: l2) (merge l2 l2)), (Permutation (b :: l2) (merge l2 gv3)), (Permutation (b :: l2) (merge gv3 l2)), (Permutation (b :: l2) (merge gv3 gv3)), (Permutation (b :: l2) (l2 ++ l2)), (Permutation (b :: l2) (l2 ++ gv3)), (Permutation (b :: l2) (gv3 ++ l2)), (Permutation (b :: l2) (gv3 ++ gv3))
(Permutation (b :: gv3) l2), (Permutation (b :: gv3) gv3), (Permutation (b :: gv3) (b :: l2)), (Permutation (b :: gv3) (a0 :: l2)), (Permutation (b :: gv3) (a0 :: gv3)), (Permutation (b :: gv3) (merge l2 l2)), (Permutation (b :: gv3) (merge l2 gv3)), (Permutation (b :: gv3) (merge gv3 l2)), (Permutation (b :: gv3) (merge gv3 gv3)), (Permutation (b :: gv3) (l2 ++ l2))
(Permutation (b :: gv3) (gv3 ++ l2)), (Permutation (b :: gv3) (gv3 ++ gv3)), (Permutation (b :: gv3) []), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) gv3), (Permutation (a0 :: l2) (b :: l2)), (Permutation (a0 :: l2) (b :: gv3)), (Permutation (a0 :: l2) (a0 :: gv3)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (merge l2 gv3))
(Permutation (a0 :: l2) (merge gv3 gv3)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) (l2 ++ gv3)), (Permutation (a0 :: l2) (gv3 ++ l2)), (Permutation (a0 :: l2) (gv3 ++ gv3)), (Permutation (a0 :: l2) []), (Permutation (a0 :: gv3) l2), (Permutation (a0 :: gv3) gv3), (Permutation (a0 :: gv3) (b :: l2)), (Permutation (a0 :: gv3) (b :: gv3))
(Permutation (a0 :: gv3) (merge l2 l2)), (Permutation (a0 :: gv3) (merge l2 gv3)), (Permutation (a0 :: gv3) (merge gv3 l2)), (Permutation (a0 :: gv3) (merge gv3 gv3)), (Permutation (a0 :: gv3) (l2 ++ l2)), (Permutation (a0 :: gv3) (l2 ++ gv3)), (Permutation (a0 :: gv3) (gv3 ++ l2)), (Permutation (a0 :: gv3) (gv3 ++ gv3)), (Permutation (a0 :: gv3) []), (Permutation (merge l2 l2) l2)
(Permutation (merge l2 l2) (b :: l2)), (Permutation (merge l2 l2) (b :: gv3)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (a0 :: gv3)), (Permutation (merge l2 l2) (merge l2 gv3)), (Permutation (merge l2 l2) (merge gv3 l2)), (Permutation (merge l2 l2) (merge gv3 gv3)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv3)), (Permutation (merge l2 l2) (gv3 ++ l2))
(Permutation (merge l2 l2) []), (Permutation (merge l2 gv3) l2), (Permutation (merge l2 gv3) gv3), (Permutation (merge l2 gv3) (b :: l2)), (Permutation (merge l2 gv3) (b :: gv3)), (Permutation (merge l2 gv3) (a0 :: l2)), (Permutation (merge l2 gv3) (a0 :: gv3)), (Permutation (merge l2 gv3) (merge l2 l2)), (Permutation (merge l2 gv3) (merge gv3 l2)), (Permutation (merge l2 gv3) (merge gv3 gv3))
(Permutation (merge l2 gv3) (l2 ++ gv3)), (Permutation (merge l2 gv3) (gv3 ++ l2)), (Permutation (merge l2 gv3) (gv3 ++ gv3)), (Permutation (merge l2 gv3) []), (Permutation (merge gv3 l2) l2), (Permutation (merge gv3 l2) gv3), (Permutation (merge gv3 l2) (b :: l2)), (Permutation (merge gv3 l2) (b :: gv3)), (Permutation (merge gv3 l2) (a0 :: l2)), (Permutation (merge gv3 l2) (a0 :: gv3))
(Permutation (merge gv3 l2) (merge l2 gv3)), (Permutation (merge gv3 l2) (merge gv3 gv3)), (Permutation (merge gv3 l2) (l2 ++ l2)), (Permutation (merge gv3 l2) (l2 ++ gv3)), (Permutation (merge gv3 l2) (gv3 ++ l2)), (Permutation (merge gv3 l2) (gv3 ++ gv3)), (Permutation (merge gv3 l2) []), (Permutation (merge gv3 gv3) l2), (Permutation (merge gv3 gv3) gv3), (Permutation (merge gv3 gv3) (b :: l2))
(Permutation (merge gv3 gv3) (a0 :: l2)), (Permutation (merge gv3 gv3) (a0 :: gv3)), (Permutation (merge gv3 gv3) (merge l2 l2)), (Permutation (merge gv3 gv3) (merge l2 gv3)), (Permutation (merge gv3 gv3) (merge gv3 l2)), (Permutation (merge gv3 gv3) (l2 ++ l2)), (Permutation (merge gv3 gv3) (l2 ++ gv3)), (Permutation (merge gv3 gv3) (gv3 ++ l2)), (Permutation (merge gv3 gv3) (gv3 ++ gv3)), (Permutation (merge gv3 gv3) [])
(Permutation (l2 ++ l2) gv3), (Permutation (l2 ++ l2) (b :: l2)), (Permutation (l2 ++ l2) (b :: gv3)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (a0 :: gv3)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv3)), (Permutation (l2 ++ l2) (merge gv3 l2)), (Permutation (l2 ++ l2) (merge gv3 gv3)), (Permutation (l2 ++ l2) (l2 ++ gv3))
(Permutation (l2 ++ l2) (gv3 ++ gv3)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv3) l2), (Permutation (l2 ++ gv3) gv3), (Permutation (l2 ++ gv3) (b :: l2)), (Permutation (l2 ++ gv3) (b :: gv3)), (Permutation (l2 ++ gv3) (a0 :: l2)), (Permutation (l2 ++ gv3) (a0 :: gv3)), (Permutation (l2 ++ gv3) (merge l2 l2)), (Permutation (l2 ++ gv3) (merge l2 gv3))
(Permutation (l2 ++ gv3) (merge gv3 gv3)), (Permutation (l2 ++ gv3) (l2 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ l2)), (Permutation (l2 ++ gv3) (gv3 ++ gv3)), (Permutation (l2 ++ gv3) []), (Permutation (gv3 ++ l2) l2), (Permutation (gv3 ++ l2) gv3), (Permutation (gv3 ++ l2) (b :: l2)), (Permutation (gv3 ++ l2) (b :: gv3)), (Permutation (gv3 ++ l2) (a0 :: l2))
(Permutation (gv3 ++ l2) (merge l2 l2)), (Permutation (gv3 ++ l2) (merge l2 gv3)), (Permutation (gv3 ++ l2) (merge gv3 l2)), (Permutation (gv3 ++ l2) (merge gv3 gv3)), (Permutation (gv3 ++ l2) (l2 ++ l2)), (Permutation (gv3 ++ l2) (l2 ++ gv3)), (Permutation (gv3 ++ l2) (gv3 ++ gv3)), (Permutation (gv3 ++ l2) []), (Permutation (gv3 ++ gv3) l2), (Permutation (gv3 ++ gv3) gv3)
(Permutation (gv3 ++ gv3) (b :: gv3)), (Permutation (gv3 ++ gv3) (a0 :: l2)), (Permutation (gv3 ++ gv3) (a0 :: gv3)), (Permutation (gv3 ++ gv3) (merge l2 l2)), (Permutation (gv3 ++ gv3) (merge l2 gv3)), (Permutation (gv3 ++ gv3) (merge gv3 l2)), (Permutation (gv3 ++ gv3) (merge gv3 gv3)), (Permutation (gv3 ++ gv3) (l2 ++ l2)), (Permutation (gv3 ++ gv3) (l2 ++ gv3)), (Permutation (gv3 ++ gv3) (gv3 ++ l2))
(Permutation [] l2), (Permutation [] gv3), (Permutation [] (b :: l2)), (Permutation [] (b :: gv3)), (Permutation [] (a0 :: l2)), (Permutation [] (a0 :: gv3)), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv3)), (Permutation [] (merge gv3 l2)), (Permutation [] (merge gv3 gv3))
(Permutation [] (l2 ++ gv3)), (Permutation [] (gv3 ++ l2)), (Permutation [] (gv3 ++ gv3)), (In b (b :: l2)), (In b (b :: gv3)), (In b (a0 :: l2)), (In b (a0 :: gv3)), (In b (merge l2 l2)), (In b (merge l2 gv3)), (In b (merge gv3 l2))
(In b (l2 ++ l2)), (In b (l2 ++ gv3)), (In b (gv3 ++ l2)), (In b (gv3 ++ gv3)), (In a0 (b :: l2)), (In a0 (b :: gv3)), (In a0 (a0 :: l2)), (In a0 (a0 :: gv3)), (In a0 (merge l2 l2)), (In a0 (merge l2 gv3))
(In a0 (merge gv3 gv3)), (In a0 (l2 ++ l2)), (In a0 (l2 ++ gv3)), (In a0 (gv3 ++ l2)), (In a0 (gv3 ++ gv3)), (In (length l2) l2), (In (length l2) gv3), (In (length l2) (b :: l2)), (In (length l2) (b :: gv3)), (In (length l2) (a0 :: l2))
(In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv3)), (In (length l2) (merge gv3 l2)), (In (length l2) (merge gv3 gv3)), (In (length l2) (l2 ++ l2)), (In (length l2) (l2 ++ gv3)), (In (length l2) (gv3 ++ l2)), (In (length l2) (gv3 ++ gv3)), (In (length gv3) l2), (In (length gv3) gv3)
(In (length gv3) (b :: gv3)), (In (length gv3) (a0 :: l2)), (In (length gv3) (a0 :: gv3)), (In (length gv3) (merge l2 l2)), (In (length gv3) (merge l2 gv3)), (In (length gv3) (merge gv3 l2)), (In (length gv3) (merge gv3 gv3)), (In (length gv3) (l2 ++ l2)), (In (length gv3) (l2 ++ gv3)), (In (length gv3) (gv3 ++ l2))
(b < length l2), (b < length gv3), (a0 < length l2), (a0 < length gv3), (length l2 < b), (length l2 < a0), (length l2 < length gv3), (length gv3 < b), (length gv3 < a0), (length gv3 < length l2)
(b <= length gv3), (a0 <= length l2), (a0 <= length gv3), (length l2 <= b), (length l2 <= a0), (length l2 <= length gv3), (length gv3 <= b), (length gv3 <= a0), (length gv3 <= length l2), (~ b <=* l2)
(~ a0 <=* l2), (~ a0 <=* gv3), (~ sorted l2), (~ sorted gv3), (~ Permutation l2 l2), (~ Permutation l2 gv3), (~ Permutation gv3 l2), (~ Permutation gv3 gv3), (~ In b l2), (~ In b gv3)
(~ In a0 gv3), (~ b < b), (~ b < a0), (~ a0 < b), (~ a0 < a0), (~ b <= b), (~ b <= a0), (~ a0 <= b), (~ a0 <= a0), (l2 <> l2)
(gv3 <> l2), (gv3 <> gv3), (b <> b), (b <> a0), (a0 <> b), (a0 <> a0), (None = Some l2), (None = Some gv3), (b :: l2 = l2), (b :: l2 = gv3)
(b :: l2 = merge l2 gv3), (b :: l2 = merge gv3 l2), (b :: l2 = merge gv3 gv3), (b :: l2 = l2 ++ l2), (b :: l2 = l2 ++ gv3), (b :: l2 = gv3 ++ l2), (b :: l2 = gv3 ++ gv3), (b :: l2 = []), (b :: gv3 = l2), (b :: gv3 = gv3)
(b :: gv3 = merge l2 gv3), (b :: gv3 = merge gv3 l2), (b :: gv3 = merge gv3 gv3), (b :: gv3 = l2 ++ l2), (b :: gv3 = l2 ++ gv3), (b :: gv3 = gv3 ++ l2), (b :: gv3 = gv3 ++ gv3), (b :: gv3 = []), (a0 :: l2 = l2), (a0 :: l2 = gv3)
(a0 :: l2 = merge l2 gv3), (a0 :: l2 = merge gv3 l2), (a0 :: l2 = merge gv3 gv3), (a0 :: l2 = l2 ++ l2), (a0 :: l2 = l2 ++ gv3), (a0 :: l2 = gv3 ++ l2), (a0 :: l2 = gv3 ++ gv3), (a0 :: l2 = []), (a0 :: gv3 = l2), (a0 :: gv3 = gv3)
(a0 :: gv3 = merge l2 gv3), (a0 :: gv3 = merge gv3 l2), (a0 :: gv3 = merge gv3 gv3), (a0 :: gv3 = l2 ++ l2), (a0 :: gv3 = l2 ++ gv3), (a0 :: gv3 = gv3 ++ l2), (a0 :: gv3 = gv3 ++ gv3), (a0 :: gv3 = []), (merge l2 l2 = l2), (merge l2 l2 = gv3)
(merge l2 l2 = l2 ++ gv3), (merge l2 l2 = gv3 ++ l2), (merge l2 l2 = gv3 ++ gv3), (merge l2 gv3 = l2), (merge l2 gv3 = gv3), (merge l2 gv3 = l2 ++ l2), (merge l2 gv3 = l2 ++ gv3), (merge l2 gv3 = gv3 ++ l2), (merge l2 gv3 = gv3 ++ gv3), (merge gv3 l2 = l2)
(merge gv3 l2 = l2 ++ l2), (merge gv3 l2 = l2 ++ gv3), (merge gv3 l2 = gv3 ++ l2), (merge gv3 l2 = gv3 ++ gv3), (merge gv3 gv3 = l2), (merge gv3 gv3 = gv3), (merge gv3 gv3 = l2 ++ l2), (merge gv3 gv3 = l2 ++ gv3), (merge gv3 gv3 = gv3 ++ l2), (merge gv3 gv3 = gv3 ++ gv3)
(l2 ++ l2 = gv3), (l2 ++ gv3 = l2), (l2 ++ gv3 = gv3), (gv3 ++ l2 = l2), (gv3 ++ l2 = gv3), (gv3 ++ gv3 = l2), (gv3 ++ gv3 = gv3), ([] = l2), ([] = gv3), ([] = merge l2 l2)
([] = merge gv3 l2), ([] = merge gv3 gv3), ([] = l2 ++ l2), ([] = l2 ++ gv3), ([] = gv3 ++ l2), ([] = gv3 ++ gv3), (None = Some b), (None = Some a0), ((l2, l2) = split l2), ((l2, l2) = split gv3)
((l2, gv3) = split gv3), ((gv3, l2) = split l2), ((gv3, l2) = split gv3), ((gv3, gv3) = split l2), ((gv3, gv3) = split gv3), (length l2 = b), (length l2 = a0), (length gv3 = b), (length gv3 = a0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 2901.921 seconds


Label: 3 (0)
(b <=* gv1), (sorted gv1), (Permutation l2 l1), (Permutation l1 l2), (a0 < a), (b <= a), (l2 = l1), (l1 = l2), (a = b), (b = a)
(b <=* a :: l2), (b <=* a :: l1), (b <=* a :: gv1), (b <=* b :: gv1), (b <=* merge l2 gv1), (b <=* merge l1 gv1), (b <=* merge gv1 l2), (b <=* merge gv1 l1), (b <=* merge gv1 gv1), (b <=* l2 ++ gv1)
(b <=* gv1 ++ l2), (b <=* gv1 ++ l1), (b <=* gv1 ++ gv1), (length l2 <=* gv1), (length l2 <=* a :: l2), (length l2 <=* a :: gv1), (length l2 <=* b :: gv1), (length l2 <=* a0 :: l2), (length l2 <=* a0 :: l1), (length l2 <=* a0 :: gv1)
(length l2 <=* merge l1 gv1), (length l2 <=* merge gv1 l2), (length l2 <=* merge gv1 l1), (length l2 <=* merge gv1 gv1), (length l2 <=* l2 ++ gv1), (length l2 <=* l1 ++ gv1), (length l2 <=* gv1 ++ l2), (length l2 <=* gv1 ++ l1), (length l2 <=* gv1 ++ gv1), (length gv1 <=* gv1)
(length gv1 <=* a :: l1), (length gv1 <=* b :: l2), (length gv1 <=* b :: l1), (length gv1 <=* b :: gv1), (length gv1 <=* merge l2 gv1), (length gv1 <=* merge l1 gv1), (length gv1 <=* merge gv1 l2), (length gv1 <=* merge gv1 l1), (length gv1 <=* merge gv1 gv1), (length gv1 <=* l2 ++ gv1)
(length gv1 <=* gv1 ++ l2), (length gv1 <=* gv1 ++ l1), (length gv1 <=* gv1 ++ gv1), (sorted (a :: gv1)), (sorted (b :: gv1)), (sorted (a0 :: gv1)), (sorted (merge l2 gv1)), (sorted (merge l1 gv1)), (sorted (merge gv1 l2)), (sorted (merge gv1 l1))
(sorted (l2 ++ gv1)), (sorted (l1 ++ gv1)), (sorted (gv1 ++ l2)), (sorted (gv1 ++ l1)), (sorted (gv1 ++ gv1)), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l1 l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 [])
(Permutation l1 (merge l2 l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l1 ++ l2)), (Permutation gv1 (merge l2 gv1)), (Permutation gv1 (merge gv1 l2)), (Permutation gv1 (l2 ++ gv1)), (Permutation gv1 (gv1 ++ l2)), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (b :: l2))
(Permutation (a :: l1) (a :: l2)), (Permutation (a :: l1) (b :: l2)), (Permutation (a :: l1) (b :: l1)), (Permutation (a :: gv1) (b :: gv1)), (Permutation (b :: l2) (a :: l2)), (Permutation (b :: l2) (a :: l1)), (Permutation (b :: l2) (b :: l1)), (Permutation (b :: l1) (a :: l2)), (Permutation (b :: l1) (a :: l1)), (Permutation (b :: l1) (b :: l2))
(Permutation (a0 :: l2) (a0 :: l1)), (Permutation (a0 :: l1) (a0 :: l2)), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l1 ++ l1))
(Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) []), (Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (merge l1 gv1)), (Permutation (merge l2 gv1) (merge gv1 l1)), (Permutation (merge l2 gv1) (l1 ++ gv1))
(Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) (l1 ++ l1)), (Permutation (merge l1 l2) []), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l1 l2))
(Permutation (merge l1 l1) (l2 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 gv1) (merge l2 gv1)), (Permutation (merge l1 gv1) (merge gv1 l2)), (Permutation (merge l1 gv1) (l2 ++ gv1)), (Permutation (merge l1 gv1) (gv1 ++ l2)), (Permutation (merge gv1 l2) gv1), (Permutation (merge gv1 l2) (merge l1 gv1)), (Permutation (merge gv1 l2) (merge gv1 l1)), (Permutation (merge gv1 l2) (l1 ++ gv1))
(Permutation (merge gv1 l1) (merge l2 gv1)), (Permutation (merge gv1 l1) (merge gv1 l2)), (Permutation (merge gv1 l1) (l2 ++ gv1)), (Permutation (merge gv1 l1) (gv1 ++ l2)), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (l2 ++ l1))
(Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ gv1) gv1), (Permutation (l2 ++ gv1) (merge l1 gv1))
(Permutation (l2 ++ gv1) (l1 ++ gv1)), (Permutation (l2 ++ gv1) (gv1 ++ l1)), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) []), (Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) (merge l2 l2))
(Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) (l2 ++ l1)), (Permutation (l1 ++ l1) (l1 ++ l2)), (Permutation (l1 ++ gv1) (merge l2 gv1)), (Permutation (l1 ++ gv1) (merge gv1 l2)), (Permutation (l1 ++ gv1) (l2 ++ gv1)), (Permutation (l1 ++ gv1) (gv1 ++ l2)), (Permutation (gv1 ++ l2) gv1), (Permutation (gv1 ++ l2) (merge l1 gv1))
(Permutation (gv1 ++ l2) (l1 ++ gv1)), (Permutation (gv1 ++ l2) (gv1 ++ l1)), (Permutation (gv1 ++ l1) (merge l2 gv1)), (Permutation (gv1 ++ l1) (merge gv1 l2)), (Permutation (gv1 ++ l1) (l2 ++ gv1)), (Permutation (gv1 ++ l1) (gv1 ++ l2)), (Permutation [] l2), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l1 l2))
(Permutation [] (l2 ++ l1)), (Permutation [] (l1 ++ l2)), (In a (b :: l2)), (In a (b :: l1)), (In b (a :: l2)), (In b (a :: l1)), (In (length gv1) (a :: l1)), (In (length gv1) (b :: l1)), (length l2 < a), (length l2 < a0)
(length l2 <= a), (length l2 <= a0), (length l2 <= length l1), (length gv1 <= a), (length gv1 <= b), (~ In a0 gv1), (~ a < b), (~ a <= a0), (a <> a0), (a0 <> a)
(merge l2 l2 = l1), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l1 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l1 = l1 ++ l1), (merge l2 gv1 = gv1), (merge l2 gv1 = l2 ++ gv1), (merge l2 gv1 = l1 ++ gv1), (merge l2 gv1 = gv1 ++ l1)
(merge l1 l2 = l1 ++ l1), (merge l1 l1 = l2), (merge l1 l1 = l2 ++ l2), (merge l1 l1 = l2 ++ l1), (merge l1 l1 = l1 ++ l2), (merge l1 gv1 = l2 ++ gv1), (merge l1 gv1 = gv1 ++ l2), (merge gv1 l2 = gv1), (merge gv1 l2 = l2 ++ gv1), (merge gv1 l2 = l1 ++ gv1)
(merge gv1 l1 = l2 ++ gv1), (merge gv1 l1 = gv1 ++ l2), (merge gv1 gv1 = gv1 ++ gv1), (l2 ++ l2 = l2), (l2 ++ l2 = l1), (l2 ++ l1 = l1), (l2 ++ gv1 = gv1), (l1 ++ l2 = l1), (l1 ++ l1 = l2), (gv1 ++ l2 = gv1)
([] = merge l2 l2), ([] = merge l2 l1), ([] = merge l1 l2), ([] = l2 ++ l2), ([] = l2 ++ l1), ([] = l1 ++ l2), ((l2, l2) = split l2), ((l2, l2) = split l1), ((l2, l1) = split l1), ((l1, l2) = split l2)
((l1, l1) = split l2), (length gv1 = a), (length gv1 = b)

Label: 4 (1)

Label: 1 (2)

Label: 4 (3)
(b <= a), (~ a < b)

Label: 1 (4)
(sorted (a :: gv2)), (sorted (b :: gv2))

Label: 2 (5)
(b <=* gv3), (b <=* b :: gv3), (b <=* merge gv3 gv3), (b <=* gv3 ++ gv3), (sorted (b :: gv3))

Label: 4 (6)
(a0 < b), (a0 <= b), (a0 <=* b :: l2), (~ b < a0), (~ b <= a0), (a0 <=* b :: gv3)

Label: 2 (7)
(a0 < b), (a0 <= b), (a0 <=* b :: l2), (~ b < a0), (~ b <= a0), (a0 <=* b :: gv3)

Label: 1 (8)
(a0 < b), (a0 <= b), (a0 <=* b :: l2), (~ b < a0), (~ b <= a0), (a0 <=* b :: gv3)

Label: 2 (9)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 3016.805 seconds


(sorted (merge gv3 (a0 :: l2)))
 - (sorted (merge gv3 (a0 :: l2)))

(b > a0)
 - (b > a0)
 - (a0 <= b)
 - (a0 <=* b :: l2)
 - (~ b < a0)
 - (~ b <= a0)
 - (a0 <=* b :: gv3)

(b :: a :: l1 = gv2)
 - (b :: a :: l1 = gv2)
 - (sorted (a :: gv2))
 - (sorted (b :: gv2))

(b <=* gv3)
 - (b <=* gv3)
 - (b <=* b :: gv3)
 - (b <=* merge gv3 gv3)
 - (b <=* gv3 ++ gv3)
 - (sorted (b :: gv3))

(b <=* a :: l1)
 - (b <=* a :: l1)
 - (b <= a)
 - (~ a < b)

(sorted (merge (a :: l1) (a0 :: l2)))
 - (sorted (merge (a :: l1) (a0 :: l2)))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 3016.806 seconds

Number of Result Pairs Returned: 13

(b > a0 ->
 sorted (merge gv3 (a0 :: l2)) ->
 b <=* gv3 -> sorted (a0 :: merge (b :: gv3) l2))

(b > a0 -> a0 <= b)
(a0 <= b ->
 sorted (merge gv3 (a0 :: l2)) ->
 b <=* gv3 -> sorted (a0 :: merge (b :: gv3) l2))

(b > a0 -> ~ b < a0)
(~ b < a0 ->
 sorted (merge gv3 (a0 :: l2)) ->
 b <=* gv3 -> sorted (a0 :: merge (b :: gv3) l2))

(b > a0 -> ~ b <= a0)
(~ b <= a0 ->
 sorted (merge gv3 (a0 :: l2)) ->
 b <=* gv3 -> sorted (a0 :: merge (b :: gv3) l2))

(b <=* gv3 -> b <=* b :: gv3)
(b <=* b :: gv3 ->
 b > a0 ->
 sorted (merge gv3 (a0 :: l2)) -> sorted (a0 :: merge (b :: gv3) l2))

(b <=* gv3 -> b <=* merge gv3 gv3)
(b <=* merge gv3 gv3 ->
 b > a0 ->
 sorted (merge gv3 (a0 :: l2)) -> sorted (a0 :: merge (b :: gv3) l2))

(b <=* gv3 -> b <=* gv3 ++ gv3)
(b <=* gv3 ++ gv3 ->
 b > a0 ->
 sorted (merge gv3 (a0 :: l2)) -> sorted (a0 :: merge (b :: gv3) l2))

(b > a0 ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 b <=* a :: l1 -> sorted (a0 :: merge (b :: a :: l1) l2))

(b > a0 -> a0 <= b)
(a0 <= b ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 b <=* a :: l1 -> sorted (a0 :: merge (b :: a :: l1) l2))

(b > a0 -> ~ b < a0)
(~ b < a0 ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 b <=* a :: l1 -> sorted (a0 :: merge (b :: a :: l1) l2))

(b > a0 -> ~ b <= a0)
(~ b <= a0 ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 b <=* a :: l1 -> sorted (a0 :: merge (b :: a :: l1) l2))

(b <=* a :: l1 -> b <= a)
(b <= a ->
 b > a0 ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 sorted (a0 :: merge (b :: a :: l1) l2))

(b <=* a :: l1 -> ~ a < b)
(~ a < b ->
 b > a0 ->
 sorted (merge (a :: l1) (a0 :: l2)) ->
 sorted (a0 :: merge (b :: a :: l1) l2))
