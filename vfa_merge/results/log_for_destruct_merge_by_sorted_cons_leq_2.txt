Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (b > a0)
 -- (sorted (merge (a :: l1) (a0 :: l2)))
 -- (sorted (a0 :: l2))
 -- (b <=* a :: l1)
 -- (forall b : nat,
 b <=* l1 ->
 forall l2 : list nat,
 sorted (merge l1 l2) -> sorted l2 -> sorted (merge (b :: l1) l2))
 -- (sorted (merge (a :: l1) l2) ->
 sorted l2 ->
 forall b : nat, b <=* a :: l1 -> sorted (merge (b :: a :: l1) l2))

----------------------------------
Goal: (a0 <=* l2)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 32.177 seconds

Label: Generalization #0
Assumptions: 
 -- (sorted (merge (a :: l1) (a0 :: l2)))

----------------------------------
Goal: (a0 <=* l2)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 32.603 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2_principle : Prop
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (sorted (merge (a :: l1) (a0 :: l2)))
Positive Examples:
   [a := 1; a0 := 4; l1 := [1]; l2 := [4; 4]]
   [a := 1; a0 := 4; l1 := [5]; l2 := []]
   [a := 3; a0 := 1; l1 := []; l2 := [1]]
   [a := 0; a0 := 6; l1 := [5]; l2 := [6]]
   [a := 0; a0 := 0; l1 := []; l2 := [0; 2]]
   [a := 0; a0 := 2; l1 := [0; 1]; l2 := [2]]
   [a := 0; a0 := 1; l1 := [1; 5]; l2 := []]
   [a := 1; a0 := 1; l1 := [2; 4]; l2 := [3; 3]]
   [a := 0; a0 := 3; l1 := [4]; l2 := [3]]
   [a := 2; a0 := 1; l1 := [3; 3]; l2 := [3; 3; 3]]
   etc ...

Negative Examples:
   [a := 1; a0 := 5; l1 := [3; 4; 3; 6; 3; 4]; l2 := [2]]
   [a := 4; a0 := 2; l1 := []; l2 := [0; 1; 2; 4]]
   [a := 1; a0 := 2; l1 := [0; 0; 3; 4; 4]; l2 := [5; 6; 1; 1; 6]]
   [a := 3; a0 := 3; l1 := [0; 5]; l2 := [2; 2; 1]]
   [a := 2; a0 := 2; l1 := [2]; l2 := [0; 1; 3]]
   [a := 3; a0 := 5; l1 := [5; 4; 0]; l2 := [0; 3; 4; 3]]
   [a := 1; a0 := 3; l1 := [3; 2; 3]; l2 := [5; 4; 2; 2; 1; 2]]
   [a := 2; a0 := 2; l1 := [1; 1]; l2 := [1]]
   [a := 3; a0 := 1; l1 := [3; 4; 3; 0]; l2 := [0; 4; 2; 4]]
   [a := 0; a0 := 2; l1 := [3; 0]; l2 := [0]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 33.155 seconds


Label: 0 (0)
(false = sorted_bool l1), (false = sorted_bool l2), (true = sorted_bool l1), (true = sorted_bool l2), (a <=* l1), (a <=* l2), (a <=* a :: l1), (a <=* a :: l2), (a <=* a0 :: l1), (a <=* a0 :: l2)
(a <=* merge l1 l2), (a <=* merge l2 l1), (a <=* merge l2 l2), (a <=* l1 ++ l1), (a <=* l1 ++ l2), (a <=* l2 ++ l1), (a <=* l2 ++ l2), (a <=* []), (a0 <=* l1), (a0 <=* l2)
(a0 <=* a :: l2), (a0 <=* a0 :: l1), (a0 <=* a0 :: l2), (a0 <=* merge l1 l1), (a0 <=* merge l1 l2), (a0 <=* merge l2 l1), (a0 <=* merge l2 l2), (a0 <=* l1 ++ l1), (a0 <=* l1 ++ l2), (a0 <=* l2 ++ l1)
(a0 <=* []), (length l1 <=* l1), (length l1 <=* l2), (length l1 <=* a :: l1), (length l1 <=* a :: l2), (length l1 <=* a0 :: l1), (length l1 <=* a0 :: l2), (length l1 <=* merge l1 l1), (length l1 <=* merge l1 l2), (length l1 <=* merge l2 l1)
(length l1 <=* l1 ++ l1), (length l1 <=* l1 ++ l2), (length l1 <=* l2 ++ l1), (length l1 <=* l2 ++ l2), (length l1 <=* []), (length l2 <=* l1), (length l2 <=* l2), (length l2 <=* a :: l1), (length l2 <=* a :: l2), (length l2 <=* a0 :: l1)
(length l2 <=* merge l1 l1), (length l2 <=* merge l1 l2), (length l2 <=* merge l2 l1), (length l2 <=* merge l2 l2), (length l2 <=* l1 ++ l1), (length l2 <=* l1 ++ l2), (length l2 <=* l2 ++ l1), (length l2 <=* l2 ++ l2), (length l2 <=* []), (sorted l1)
(sorted (a :: l1)), (sorted (a :: l2)), (sorted (a0 :: l1)), (sorted (a0 :: l2)), (sorted (merge l1 l1)), (sorted (merge l1 l2)), (sorted (merge l2 l1)), (sorted (merge l2 l2)), (sorted (l1 ++ l1)), (sorted (l1 ++ l2))
(sorted (l2 ++ l2)), (sorted []), (Permutation l1 l2), (Permutation l1 (a :: l1)), (Permutation l1 (a :: l2)), (Permutation l1 (a0 :: l1)), (Permutation l1 (a0 :: l2)), (Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 l2)), (Permutation l1 (merge l2 l1))
(Permutation l1 (l1 ++ l1)), (Permutation l1 (l1 ++ l2)), (Permutation l1 (l2 ++ l1)), (Permutation l1 (l2 ++ l2)), (Permutation l1 []), (Permutation l2 l1), (Permutation l2 (a :: l1)), (Permutation l2 (a :: l2)), (Permutation l2 (a0 :: l1)), (Permutation l2 (a0 :: l2))
(Permutation l2 (merge l1 l2)), (Permutation l2 (merge l2 l1)), (Permutation l2 (merge l2 l2)), (Permutation l2 (l1 ++ l1)), (Permutation l2 (l1 ++ l2)), (Permutation l2 (l2 ++ l1)), (Permutation l2 (l2 ++ l2)), (Permutation l2 []), (Permutation (a :: l1) l1), (Permutation (a :: l1) l2)
(Permutation (a :: l1) (a0 :: l1)), (Permutation (a :: l1) (a0 :: l2)), (Permutation (a :: l1) (merge l1 l1)), (Permutation (a :: l1) (merge l1 l2)), (Permutation (a :: l1) (merge l2 l1)), (Permutation (a :: l1) (merge l2 l2)), (Permutation (a :: l1) (l1 ++ l1)), (Permutation (a :: l1) (l1 ++ l2)), (Permutation (a :: l1) (l2 ++ l1)), (Permutation (a :: l1) (l2 ++ l2))
(Permutation (a :: l2) l1), (Permutation (a :: l2) l2), (Permutation (a :: l2) (a :: l1)), (Permutation (a :: l2) (a0 :: l1)), (Permutation (a :: l2) (a0 :: l2)), (Permutation (a :: l2) (merge l1 l1)), (Permutation (a :: l2) (merge l1 l2)), (Permutation (a :: l2) (merge l2 l1)), (Permutation (a :: l2) (merge l2 l2)), (Permutation (a :: l2) (l1 ++ l1))
(Permutation (a :: l2) (l2 ++ l1)), (Permutation (a :: l2) (l2 ++ l2)), (Permutation (a :: l2) []), (Permutation (a0 :: l1) l1), (Permutation (a0 :: l1) l2), (Permutation (a0 :: l1) (a :: l1)), (Permutation (a0 :: l1) (a :: l2)), (Permutation (a0 :: l1) (a0 :: l2)), (Permutation (a0 :: l1) (merge l1 l1)), (Permutation (a0 :: l1) (merge l1 l2))
(Permutation (a0 :: l1) (merge l2 l2)), (Permutation (a0 :: l1) (l1 ++ l1)), (Permutation (a0 :: l1) (l1 ++ l2)), (Permutation (a0 :: l1) (l2 ++ l1)), (Permutation (a0 :: l1) (l2 ++ l2)), (Permutation (a0 :: l1) []), (Permutation (a0 :: l2) l1), (Permutation (a0 :: l2) l2), (Permutation (a0 :: l2) (a :: l1)), (Permutation (a0 :: l2) (a :: l2))
(Permutation (a0 :: l2) (merge l1 l1)), (Permutation (a0 :: l2) (merge l1 l2)), (Permutation (a0 :: l2) (merge l2 l1)), (Permutation (a0 :: l2) (merge l2 l2)), (Permutation (a0 :: l2) (l1 ++ l1)), (Permutation (a0 :: l2) (l1 ++ l2)), (Permutation (a0 :: l2) (l2 ++ l1)), (Permutation (a0 :: l2) (l2 ++ l2)), (Permutation (a0 :: l2) []), (Permutation (merge l1 l1) l1)
(Permutation (merge l1 l1) (a :: l1)), (Permutation (merge l1 l1) (a :: l2)), (Permutation (merge l1 l1) (a0 :: l1)), (Permutation (merge l1 l1) (a0 :: l2)), (Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l2 l1)), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (l1 ++ l1)), (Permutation (merge l1 l1) (l1 ++ l2)), (Permutation (merge l1 l1) (l2 ++ l1))
(Permutation (merge l1 l1) []), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) (a :: l1)), (Permutation (merge l1 l2) (a :: l2)), (Permutation (merge l1 l2) (a0 :: l1)), (Permutation (merge l1 l2) (a0 :: l2)), (Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l2 l1)), (Permutation (merge l1 l2) (merge l2 l2))
(Permutation (merge l1 l2) (l1 ++ l2)), (Permutation (merge l1 l2) (l2 ++ l1)), (Permutation (merge l1 l2) (l2 ++ l2)), (Permutation (merge l1 l2) []), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) (a :: l1)), (Permutation (merge l2 l1) (a :: l2)), (Permutation (merge l2 l1) (a0 :: l1)), (Permutation (merge l2 l1) (a0 :: l2))
(Permutation (merge l2 l1) (merge l1 l2)), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (l1 ++ l1)), (Permutation (merge l2 l1) (l1 ++ l2)), (Permutation (merge l2 l1) (l2 ++ l1)), (Permutation (merge l2 l1) (l2 ++ l2)), (Permutation (merge l2 l1) []), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) (a :: l1))
(Permutation (merge l2 l2) (a0 :: l1)), (Permutation (merge l2 l2) (a0 :: l2)), (Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 l2)), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (l1 ++ l1)), (Permutation (merge l2 l2) (l1 ++ l2)), (Permutation (merge l2 l2) (l2 ++ l1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) [])
(Permutation (l1 ++ l1) l2), (Permutation (l1 ++ l1) (a :: l1)), (Permutation (l1 ++ l1) (a :: l2)), (Permutation (l1 ++ l1) (a0 :: l1)), (Permutation (l1 ++ l1) (a0 :: l2)), (Permutation (l1 ++ l1) (merge l1 l1)), (Permutation (l1 ++ l1) (merge l1 l2)), (Permutation (l1 ++ l1) (merge l2 l1)), (Permutation (l1 ++ l1) (merge l2 l2)), (Permutation (l1 ++ l1) (l1 ++ l2))
(Permutation (l1 ++ l1) (l2 ++ l2)), (Permutation (l1 ++ l1) []), (Permutation (l1 ++ l2) l1), (Permutation (l1 ++ l2) l2), (Permutation (l1 ++ l2) (a :: l1)), (Permutation (l1 ++ l2) (a :: l2)), (Permutation (l1 ++ l2) (a0 :: l1)), (Permutation (l1 ++ l2) (a0 :: l2)), (Permutation (l1 ++ l2) (merge l1 l1)), (Permutation (l1 ++ l2) (merge l1 l2))
(Permutation (l1 ++ l2) (merge l2 l2)), (Permutation (l1 ++ l2) (l1 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l1)), (Permutation (l1 ++ l2) (l2 ++ l2)), (Permutation (l1 ++ l2) []), (Permutation (l2 ++ l1) l1), (Permutation (l2 ++ l1) l2), (Permutation (l2 ++ l1) (a :: l1)), (Permutation (l2 ++ l1) (a :: l2)), (Permutation (l2 ++ l1) (a0 :: l1))
(Permutation (l2 ++ l1) (merge l1 l1)), (Permutation (l2 ++ l1) (merge l1 l2)), (Permutation (l2 ++ l1) (merge l2 l1)), (Permutation (l2 ++ l1) (merge l2 l2)), (Permutation (l2 ++ l1) (l1 ++ l1)), (Permutation (l2 ++ l1) (l1 ++ l2)), (Permutation (l2 ++ l1) (l2 ++ l2)), (Permutation (l2 ++ l1) []), (Permutation (l2 ++ l2) l1), (Permutation (l2 ++ l2) l2)
(Permutation (l2 ++ l2) (a :: l2)), (Permutation (l2 ++ l2) (a0 :: l1)), (Permutation (l2 ++ l2) (a0 :: l2)), (Permutation (l2 ++ l2) (merge l1 l1)), (Permutation (l2 ++ l2) (merge l1 l2)), (Permutation (l2 ++ l2) (merge l2 l1)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (l1 ++ l1)), (Permutation (l2 ++ l2) (l1 ++ l2)), (Permutation (l2 ++ l2) (l2 ++ l1))
(Permutation [] l1), (Permutation [] l2), (Permutation [] (a :: l1)), (Permutation [] (a :: l2)), (Permutation [] (a0 :: l1)), (Permutation [] (a0 :: l2)), (Permutation [] (merge l1 l1)), (Permutation [] (merge l1 l2)), (Permutation [] (merge l2 l1)), (Permutation [] (merge l2 l2))
(Permutation [] (l1 ++ l2)), (Permutation [] (l2 ++ l1)), (Permutation [] (l2 ++ l2)), (In a l1), (In a l2), (In a (a :: l1)), (In a (a :: l2)), (In a (a0 :: l1)), (In a (a0 :: l2)), (In a (merge l1 l1))
(In a (merge l2 l1)), (In a (merge l2 l2)), (In a (l1 ++ l1)), (In a (l1 ++ l2)), (In a (l2 ++ l1)), (In a (l2 ++ l2)), (In a0 l1), (In a0 l2), (In a0 (a :: l1)), (In a0 (a :: l2))
(In a0 (a0 :: l2)), (In a0 (merge l1 l1)), (In a0 (merge l1 l2)), (In a0 (merge l2 l1)), (In a0 (merge l2 l2)), (In a0 (l1 ++ l1)), (In a0 (l1 ++ l2)), (In a0 (l2 ++ l1)), (In a0 (l2 ++ l2)), (In (length l1) l1)
(In (length l1) (a :: l1)), (In (length l1) (a :: l2)), (In (length l1) (a0 :: l1)), (In (length l1) (a0 :: l2)), (In (length l1) (merge l1 l1)), (In (length l1) (merge l1 l2)), (In (length l1) (merge l2 l1)), (In (length l1) (merge l2 l2)), (In (length l1) (l1 ++ l1)), (In (length l1) (l1 ++ l2))
(In (length l1) (l2 ++ l2)), (In (length l2) l1), (In (length l2) l2), (In (length l2) (a :: l1)), (In (length l2) (a :: l2)), (In (length l2) (a0 :: l1)), (In (length l2) (a0 :: l2)), (In (length l2) (merge l1 l1)), (In (length l2) (merge l1 l2)), (In (length l2) (merge l2 l1))
(In (length l2) (l1 ++ l1)), (In (length l2) (l1 ++ l2)), (In (length l2) (l2 ++ l1)), (In (length l2) (l2 ++ l2)), (a < a0), (a < length l1), (a < length l2), (a0 < a), (a0 < length l1), (a0 < length l2)
(length l1 < a0), (length l1 < length l2), (length l2 < a), (length l2 < a0), (length l2 < length l1), (a <= a0), (a <= length l1), (a <= length l2), (a0 <= a), (a0 <= length l1)
(length l1 <= a), (length l1 <= a0), (length l1 <= length l2), (length l2 <= a), (length l2 <= a0), (length l2 <= length l1), (merge l1 l1 = l1), (merge l1 l1 = l2), (merge l1 l1 = l1 ++ l1), (merge l1 l1 = l1 ++ l2)
(merge l1 l1 = l2 ++ l2), (merge l1 l2 = l1), (merge l1 l2 = l2), (merge l1 l2 = l1 ++ l1), (merge l1 l2 = l1 ++ l2), (merge l1 l2 = l2 ++ l1), (merge l1 l2 = l2 ++ l2), (merge l2 l1 = l1), (merge l2 l1 = l2), (merge l2 l1 = l1 ++ l1)
(merge l2 l1 = l2 ++ l1), (merge l2 l1 = l2 ++ l2), (merge l2 l2 = l1), (merge l2 l2 = l2), (merge l2 l2 = l1 ++ l1), (merge l2 l2 = l1 ++ l2), (merge l2 l2 = l2 ++ l1), (merge l2 l2 = l2 ++ l2), (l1 ++ l1 = l1), (l1 ++ l1 = l2)
(l1 ++ l2 = l2), (l2 ++ l1 = l1), (l2 ++ l1 = l2), (l2 ++ l2 = l1), (l2 ++ l2 = l2), (length l1 = a), (length l1 = a0), (length l2 = a), (length l2 = a0)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 141.985 seconds


Label: 0 (0)
(a0 <=* a0 :: l2), (a0 <=* merge l2 l2), (a0 <=* l2 ++ l2), (sorted (a0 :: l2))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 153.138 seconds

Number of Lemmas Returned: 3

(sorted (a0 :: l2) -> a0 <=* l2)
(sorted (merge (a :: l1) (a0 :: l2)) -> a0 <=* l2)
(sorted (merge (a :: l1) (a0 :: l2)) -> sorted (a0 :: l2))