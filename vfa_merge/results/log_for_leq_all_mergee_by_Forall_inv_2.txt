Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (b <=* a :: m)
 -- (a0 > a)
 -- (b <=* l -> b <=* merge l (a :: m))
 -- (b <=* a0 :: l)
 -- (b <=* m -> forall l : list nat, b <=* l -> b <=* merge l m)

----------------------------------
Goal: (b <= a)


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds



------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 46.478 seconds

Label: Generalization #0
Assumptions: 
 -- (b <=* a :: m)

----------------------------------
Goal: (b <= a)
Case: 3



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 47.195 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (b <=* a :: m)
Positive Examples:
   [a := 2; b := 0; m := [4; 0; 0]]
   [a := 1; b := 1; m := [6; 6; 6]]
   [a := 3; b := 0; m := [4; 4; 4; 1]]
   [a := 1; b := 0; m := [1; 3; 1]]
   [a := 3; b := 1; m := [3; 4; 3; 2]]
   [a := 6; b := 0; m := [1; 2; 3; 0; 6]]
   [a := 1; b := 1; m := [1; 4]]
   [a := 6; b := 1; m := [2; 5; 1]]
   [a := 1; b := 1; m := [4; 4; 5; 3]]
   [a := 2; b := 1; m := [2; 2; 4; 4]]
   etc ...

Negative Examples:
   [a := 0; b := 4; m := [3; 1]]
   [a := 1; b := 2; m := [3; 1; 4; 4]]
   [a := 3; b := 4; m := [2; 2]]
   [a := 3; b := 4; m := [4; 2; 2; 5; 5]]
   [a := 0; b := 6; m := [0; 6]]
   [a := 0; b := 1; m := [3; 1; 0; 6; 6; 0]]
   [a := 1; b := 4; m := [3; 4]]
   [a := 1; b := 3; m := [3; 0; 1]]
   [a := 5; b := 6; m := [3; 0; 6]]
   [a := 0; b := 5; m := [2; 5]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 47.971 seconds


Label: 0 (0)
(a <=* m), (b <=* m), (sorted m), (Permutation m m), (In a m), (In b m), (a < a), (a < b), (b < a), (b < b)
(a <= a), (a <= b), (b <= a), (b <= b), (m = m), (a = a), (a = b), (b = a), (b = b), (false = sorted_bool m)
(true = sorted_bool m), (a <=* a :: m), (a <=* b :: m), (a <=* merge m m), (a <=* m ++ m), (a <=* []), (b <=* a :: m), (b <=* b :: m), (b <=* merge m m), (b <=* m ++ m)
(b <=* []), (length m <=* m), (length m <=* a :: m), (length m <=* b :: m), (length m <=* merge m m), (length m <=* m ++ m), (length m <=* []), (sorted (a :: m)), (sorted (b :: m)), (sorted (merge m m))
(sorted (m ++ m)), (sorted []), (Permutation m (a :: m)), (Permutation m (b :: m)), (Permutation m (merge m m)), (Permutation m (m ++ m)), (Permutation m []), (Permutation (a :: m) m), (Permutation (a :: m) (b :: m)), (Permutation (a :: m) (merge m m))
(Permutation (a :: m) (m ++ m)), (Permutation (a :: m) []), (Permutation (b :: m) m), (Permutation (b :: m) (a :: m)), (Permutation (b :: m) (merge m m)), (Permutation (b :: m) (m ++ m)), (Permutation (b :: m) []), (Permutation (merge m m) m), (Permutation (merge m m) (a :: m)), (Permutation (merge m m) (b :: m))
(Permutation (merge m m) (m ++ m)), (Permutation (merge m m) []), (Permutation (m ++ m) m), (Permutation (m ++ m) (a :: m)), (Permutation (m ++ m) (b :: m)), (Permutation (m ++ m) (merge m m)), (Permutation (m ++ m) []), (Permutation [] m), (Permutation [] (a :: m)), (Permutation [] (b :: m))
(Permutation [] (merge m m)), (Permutation [] (m ++ m)), (In a (a :: m)), (In a (b :: m)), (In a (merge m m)), (In a (m ++ m)), (In b (a :: m)), (In b (b :: m)), (In b (merge m m)), (In b (m ++ m))
(In (length m) m), (In (length m) (a :: m)), (In (length m) (b :: m)), (In (length m) (merge m m)), (In (length m) (m ++ m)), (a < length m), (b < length m), (length m < a), (length m < b), (a <= length m)
(b <= length m), (length m <= a), (length m <= b), (~ a <=* m), (~ b <=* m), (~ sorted m), (~ Permutation m m), (~ In a m), (~ In b m), (~ a < a)
(~ a < b), (~ b < a), (~ b < b), (~ a <= a), (~ a <= b), (~ b <= a), (~ b <= b), (m <> m), (a <> a), (a <> b)
(b <> a), (b <> b), (None = Some m), (a :: m = m), (a :: m = merge m m), (a :: m = m ++ m), (a :: m = []), (b :: m = m), (b :: m = merge m m), (b :: m = m ++ m)
(b :: m = []), (merge m m = m), (merge m m = m ++ m), (m ++ m = m), ([] = m), ([] = merge m m), ([] = m ++ m), (None = Some a), (None = Some b), ((m, m) = split m)
(length m = a), (length m = b)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 111.006 seconds


Label: 0 (0)
(b <= a), (b <=* a :: m), (~ a < b)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 123.511 seconds


(b <=* a :: m)
 - (b <=* a :: m)
 - (b <= a)
 - (~ a < b)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 123.511 seconds

Number of Result Pairs Returned: 2

(b <=* a :: m -> b <= a)

(b <=* a :: m -> ~ a < b)
(~ a < b -> b <= a)
