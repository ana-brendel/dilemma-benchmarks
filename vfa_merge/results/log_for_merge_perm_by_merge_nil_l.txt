Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 

----------------------------------
Goal: (Permutation ([] ++ l2) (merge [] l2))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = []
gv2 : (list nat) = (merge [] l2)
gv0 : (list nat) = ([] ++ l2)


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 57.871 seconds

Label: Generalization #0
Assumptions: 
 -- ([] ++ l2 = gv0)

----------------------------------
Goal: (Permutation gv0 (merge [] l2))
Case: 3

Label: Generalization #1
Assumptions: 
 -- (merge [] l2 = gv2)

----------------------------------
Goal: (Permutation ([] ++ l2) gv2)
Case: 3

Label: Generalization #2
Assumptions: 
 -- ([] = gv1)

----------------------------------
Goal: (Permutation (gv1 ++ l2) (merge gv1 l2))
Case: 1

Label: Generalization #3
Assumptions: 

----------------------------------
Goal: (Permutation ([] ++ l2) (merge [] l2))
Case: 1



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 59.226 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: ([] ++ l2 = gv0)
Positive Examples:
   [gv0 := [0; 0]; l2 := [0; 0]]
   [gv0 := [1; 2]; l2 := [1; 2]]
   [gv0 := [6]; l2 := [6]]
   [gv0 := [1; 1]; l2 := [1; 1]]
   [gv0 := [1; 4]; l2 := [1; 4]]
   [gv0 := [3; 3]; l2 := [3; 3]]
   [gv0 := [3; 0; 1]; l2 := [3; 0; 1]]
   [gv0 := [2; 1]; l2 := [2; 1]]
   [gv0 := [0; 1]; l2 := [0; 1]]
   [gv0 := [5]; l2 := [5]]
   etc ...

Negative Examples:
   [gv0 := [6]; l2 := [3; 4; 0; 6; 6; 2]]
   [gv0 := [2; 1; 5]; l2 := [2; 1]]
   [gv0 := [0; 2; 4; 4]; l2 := [0]]
   [gv0 := [2; 1; 5; 1; 1]; l2 := [0; 1; 0]]
   [gv0 := [5; 1; 1; 0]; l2 := [2; 0]]
   [gv0 := [1; 1; 0]; l2 := [4; 4; 4; 4]]
   [gv0 := [6; 3; 6]; l2 := [3]]
   [gv0 := [0; 3; 2; 2; 0]; l2 := [1]]
   [gv0 := [3; 2; 1]; l2 := [3; 0]]
   [gv0 := [2; 5]; l2 := [2; 2; 1; 2; 4; 0]]
   etc ...


Label: 1 (1)
Abducted Assumption: (merge [] l2 = gv2)
Positive Examples:
   [gv2 := [6]; l2 := [6]]
   [gv2 := [5; 4]; l2 := [5; 4]]
   [gv2 := [1; 2]; l2 := [1; 2]]
   [gv2 := [1; 0]; l2 := [1; 0]]
   [gv2 := [5]; l2 := [5]]
   [gv2 := [4]; l2 := [4]]
   [gv2 := [0; 1]; l2 := [0; 1]]
   [gv2 := [3]; l2 := [3]]
   [gv2 := [2]; l2 := [2]]
   [gv2 := [1; 1]; l2 := [1; 1]]
   etc ...

Negative Examples:
   [gv2 := [3; 2; 2; 4]; l2 := [4; 0; 0]]
   [gv2 := [0; 6; 5; 5; 4; 0]; l2 := [6]]
   [gv2 := [0; 1; 5]; l2 := [2; 0; 5; 2; 2]]
   [gv2 := [2; 3; 2]; l2 := [3]]
   [gv2 := [2; 0]; l2 := [1; 1]]
   [gv2 := [5; 6; 5; 4]; l2 := [1; 3; 5]]
   [gv2 := []; l2 := [2; 2; 2; 0; 3]]
   [gv2 := [4; 5; 3; 4; 0]; l2 := [5]]
   [gv2 := [0; 3; 1]; l2 := [3; 2]]
   [gv2 := []; l2 := [6; 4; 1]]
   etc ...


Label: 2 (2)
Abducted Assumption: ([] = gv1)
Positive Examples:
   [gv1 := []; l2 := [1; 4; 5; 0]]
   [gv1 := []; l2 := [1; 2; 0; 0]]
   [gv1 := []; l2 := [0; 4; 3]]
   [gv1 := []; l2 := [2; 6; 5; 2]]
   [gv1 := []; l2 := [5; 2; 5; 0; 3]]
   [gv1 := []; l2 := [0; 4; 5]]
   [gv1 := []; l2 := [4; 3; 6]]
   [gv1 := []; l2 := [4; 3; 2]]
   [gv1 := []; l2 := [2; 1; 3; 1]]
   [gv1 := []; l2 := [5; 5; 5]]
   etc ...

Negative Examples:
   [gv1 := [0; 4]; l2 := [0]]
   [gv1 := [5; 4; 6; 4]; l2 := [3; 1; 0]]
   [gv1 := [1; 0; 4; 0]; l2 := [3; 2; 0; 0]]
   [gv1 := [4; 3; 6]; l2 := [4]]
   [gv1 := [0; 0; 0]; l2 := [4; 4; 1]]
   [gv1 := [6; 3; 5]; l2 := [5; 4; 6; 1; 0]]
   [gv1 := [3; 2]; l2 := [5; 4; 1; 0]]
   [gv1 := [0; 0; 1; 2]; l2 := []]
   [gv1 := [4; 3; 5; 0]; l2 := [5]]
   [gv1 := [2]; l2 := [0; 3; 0; 1]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 60.652 seconds


Label: 0 (0)
(sorted l2), (sorted gv0), (Permutation l2 l2), (Permutation l2 gv0), (Permutation gv0 l2), (Permutation gv0 gv0), (l2 = l2), (l2 = gv0), (gv0 = l2), (gv0 = gv0)
(false = sorted_bool l2), (false = sorted_bool gv0), (true = sorted_bool l2), (true = sorted_bool gv0), (length l2 <=* l2), (length l2 <=* gv0), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv0), (length l2 <=* merge gv0 l2), (length l2 <=* merge gv0 gv0)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv0), (length l2 <=* gv0 ++ l2), (length l2 <=* gv0 ++ gv0), (length l2 <=* []), (length gv0 <=* l2), (length gv0 <=* gv0), (length gv0 <=* merge l2 l2), (length gv0 <=* merge l2 gv0), (length gv0 <=* merge gv0 l2)
(length gv0 <=* merge gv0 gv0), (length gv0 <=* l2 ++ l2), (length gv0 <=* l2 ++ gv0), (length gv0 <=* gv0 ++ l2), (length gv0 <=* gv0 ++ gv0), (length gv0 <=* []), (sorted (merge l2 l2)), (sorted (merge l2 gv0)), (sorted (merge gv0 l2)), (sorted (merge gv0 gv0))
(sorted (l2 ++ l2)), (sorted (l2 ++ gv0)), (sorted (gv0 ++ l2)), (sorted (gv0 ++ gv0)), (sorted []), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv0)), (Permutation l2 (merge gv0 l2)), (Permutation l2 (merge gv0 gv0)), (Permutation l2 (l2 ++ l2))
(Permutation l2 (l2 ++ gv0)), (Permutation l2 (gv0 ++ l2)), (Permutation l2 (gv0 ++ gv0)), (Permutation l2 []), (Permutation gv0 (merge l2 l2)), (Permutation gv0 (merge l2 gv0)), (Permutation gv0 (merge gv0 l2)), (Permutation gv0 (merge gv0 gv0)), (Permutation gv0 (l2 ++ l2)), (Permutation gv0 (l2 ++ gv0))
(Permutation gv0 (gv0 ++ l2)), (Permutation gv0 (gv0 ++ gv0)), (Permutation gv0 []), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv0), (Permutation (merge l2 l2) (merge l2 gv0)), (Permutation (merge l2 l2) (merge gv0 l2)), (Permutation (merge l2 l2) (merge gv0 gv0)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv0))
(Permutation (merge l2 l2) (gv0 ++ l2)), (Permutation (merge l2 l2) (gv0 ++ gv0)), (Permutation (merge l2 l2) []), (Permutation (merge l2 gv0) l2), (Permutation (merge l2 gv0) gv0), (Permutation (merge l2 gv0) (merge l2 l2)), (Permutation (merge l2 gv0) (merge gv0 l2)), (Permutation (merge l2 gv0) (merge gv0 gv0)), (Permutation (merge l2 gv0) (l2 ++ l2)), (Permutation (merge l2 gv0) (l2 ++ gv0))
(Permutation (merge l2 gv0) (gv0 ++ l2)), (Permutation (merge l2 gv0) (gv0 ++ gv0)), (Permutation (merge l2 gv0) []), (Permutation (merge gv0 l2) l2), (Permutation (merge gv0 l2) gv0), (Permutation (merge gv0 l2) (merge l2 l2)), (Permutation (merge gv0 l2) (merge l2 gv0)), (Permutation (merge gv0 l2) (merge gv0 gv0)), (Permutation (merge gv0 l2) (l2 ++ l2)), (Permutation (merge gv0 l2) (l2 ++ gv0))
(Permutation (merge gv0 l2) (gv0 ++ l2)), (Permutation (merge gv0 l2) (gv0 ++ gv0)), (Permutation (merge gv0 l2) []), (Permutation (merge gv0 gv0) l2), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (merge l2 l2)), (Permutation (merge gv0 gv0) (merge l2 gv0)), (Permutation (merge gv0 gv0) (merge gv0 l2)), (Permutation (merge gv0 gv0) (l2 ++ l2)), (Permutation (merge gv0 gv0) (l2 ++ gv0))
(Permutation (merge gv0 gv0) (gv0 ++ l2)), (Permutation (merge gv0 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) gv0), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv0)), (Permutation (l2 ++ l2) (merge gv0 l2)), (Permutation (l2 ++ l2) (merge gv0 gv0)), (Permutation (l2 ++ l2) (l2 ++ gv0))
(Permutation (l2 ++ l2) (gv0 ++ l2)), (Permutation (l2 ++ l2) (gv0 ++ gv0)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv0) l2), (Permutation (l2 ++ gv0) gv0), (Permutation (l2 ++ gv0) (merge l2 l2)), (Permutation (l2 ++ gv0) (merge l2 gv0)), (Permutation (l2 ++ gv0) (merge gv0 l2)), (Permutation (l2 ++ gv0) (merge gv0 gv0)), (Permutation (l2 ++ gv0) (l2 ++ l2))
(Permutation (l2 ++ gv0) (gv0 ++ l2)), (Permutation (l2 ++ gv0) (gv0 ++ gv0)), (Permutation (l2 ++ gv0) []), (Permutation (gv0 ++ l2) l2), (Permutation (gv0 ++ l2) gv0), (Permutation (gv0 ++ l2) (merge l2 l2)), (Permutation (gv0 ++ l2) (merge l2 gv0)), (Permutation (gv0 ++ l2) (merge gv0 l2)), (Permutation (gv0 ++ l2) (merge gv0 gv0)), (Permutation (gv0 ++ l2) (l2 ++ l2))
(Permutation (gv0 ++ l2) (l2 ++ gv0)), (Permutation (gv0 ++ l2) (gv0 ++ gv0)), (Permutation (gv0 ++ l2) []), (Permutation (gv0 ++ gv0) l2), (Permutation (gv0 ++ gv0) gv0), (Permutation (gv0 ++ gv0) (merge l2 l2)), (Permutation (gv0 ++ gv0) (merge l2 gv0)), (Permutation (gv0 ++ gv0) (merge gv0 l2)), (Permutation (gv0 ++ gv0) (merge gv0 gv0)), (Permutation (gv0 ++ gv0) (l2 ++ l2))
(Permutation (gv0 ++ gv0) (l2 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l2)), (Permutation (gv0 ++ gv0) []), (Permutation [] l2), (Permutation [] gv0), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv0)), (Permutation [] (merge gv0 l2)), (Permutation [] (merge gv0 gv0)), (Permutation [] (l2 ++ l2))
(Permutation [] (l2 ++ gv0)), (Permutation [] (gv0 ++ l2)), (Permutation [] (gv0 ++ gv0)), (In (length l2) l2), (In (length l2) gv0), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv0)), (In (length l2) (merge gv0 l2)), (In (length l2) (merge gv0 gv0)), (In (length l2) (l2 ++ l2))
(In (length l2) (l2 ++ gv0)), (In (length l2) (gv0 ++ l2)), (In (length l2) (gv0 ++ gv0)), (In (length gv0) l2), (In (length gv0) gv0), (In (length gv0) (merge l2 l2)), (In (length gv0) (merge l2 gv0)), (In (length gv0) (merge gv0 l2)), (In (length gv0) (merge gv0 gv0)), (In (length gv0) (l2 ++ l2))
(In (length gv0) (l2 ++ gv0)), (In (length gv0) (gv0 ++ l2)), (In (length gv0) (gv0 ++ gv0)), (length l2 < length gv0), (length gv0 < length l2), (length l2 <= length gv0), (length gv0 <= length l2), (~ sorted l2), (~ sorted gv0), (~ Permutation l2 l2)
(~ Permutation l2 gv0), (~ Permutation gv0 l2), (~ Permutation gv0 gv0), (l2 <> l2), (l2 <> gv0), (gv0 <> l2), (gv0 <> gv0), (None = Some l2), (None = Some gv0), (merge l2 l2 = l2)
(merge l2 l2 = gv0), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv0), (merge l2 l2 = gv0 ++ l2), (merge l2 l2 = gv0 ++ gv0), (merge l2 gv0 = l2), (merge l2 gv0 = gv0), (merge l2 gv0 = l2 ++ l2), (merge l2 gv0 = l2 ++ gv0), (merge l2 gv0 = gv0 ++ l2)
(merge l2 gv0 = gv0 ++ gv0), (merge gv0 l2 = l2), (merge gv0 l2 = gv0), (merge gv0 l2 = l2 ++ l2), (merge gv0 l2 = l2 ++ gv0), (merge gv0 l2 = gv0 ++ l2), (merge gv0 l2 = gv0 ++ gv0), (merge gv0 gv0 = l2), (merge gv0 gv0 = gv0), (merge gv0 gv0 = l2 ++ l2)
(merge gv0 gv0 = l2 ++ gv0), (merge gv0 gv0 = gv0 ++ l2), (merge gv0 gv0 = gv0 ++ gv0), (l2 ++ l2 = l2), (l2 ++ l2 = gv0), (l2 ++ gv0 = l2), (l2 ++ gv0 = gv0), (gv0 ++ l2 = l2), (gv0 ++ l2 = gv0), (gv0 ++ gv0 = l2)
(gv0 ++ gv0 = gv0), ([] = l2), ([] = gv0), ([] = merge l2 l2), ([] = merge l2 gv0), ([] = merge gv0 l2), ([] = merge gv0 gv0), ([] = l2 ++ l2), ([] = l2 ++ gv0), ([] = gv0 ++ l2)
([] = gv0 ++ gv0), ((l2, l2) = split l2), ((l2, l2) = split gv0), ((l2, gv0) = split l2), ((l2, gv0) = split gv0), ((gv0, l2) = split l2), ((gv0, l2) = split gv0), ((gv0, gv0) = split l2), ((gv0, gv0) = split gv0)

Label: 1 (1)
(sorted gv2), (sorted l2), (Permutation gv2 gv2), (Permutation gv2 l2), (Permutation l2 gv2), (Permutation l2 l2), (gv2 = gv2), (gv2 = l2), (l2 = gv2), (l2 = l2)
(false = sorted_bool gv2), (false = sorted_bool l2), (true = sorted_bool gv2), (true = sorted_bool l2), (length gv2 <=* gv2), (length gv2 <=* l2), (length gv2 <=* merge gv2 gv2), (length gv2 <=* merge gv2 l2), (length gv2 <=* merge l2 gv2), (length gv2 <=* merge l2 l2)
(length gv2 <=* gv2 ++ gv2), (length gv2 <=* gv2 ++ l2), (length gv2 <=* l2 ++ gv2), (length gv2 <=* l2 ++ l2), (length gv2 <=* []), (length l2 <=* gv2), (length l2 <=* l2), (length l2 <=* merge gv2 gv2), (length l2 <=* merge gv2 l2), (length l2 <=* merge l2 gv2)
(length l2 <=* merge l2 l2), (length l2 <=* gv2 ++ gv2), (length l2 <=* gv2 ++ l2), (length l2 <=* l2 ++ gv2), (length l2 <=* l2 ++ l2), (length l2 <=* []), (sorted (merge gv2 gv2)), (sorted (merge gv2 l2)), (sorted (merge l2 gv2)), (sorted (merge l2 l2))
(sorted (gv2 ++ gv2)), (sorted (gv2 ++ l2)), (sorted (l2 ++ gv2)), (sorted (l2 ++ l2)), (sorted []), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (merge gv2 l2)), (Permutation gv2 (merge l2 gv2)), (Permutation gv2 (merge l2 l2)), (Permutation gv2 (gv2 ++ gv2))
(Permutation gv2 (gv2 ++ l2)), (Permutation gv2 (l2 ++ gv2)), (Permutation gv2 (l2 ++ l2)), (Permutation gv2 []), (Permutation l2 (merge gv2 gv2)), (Permutation l2 (merge gv2 l2)), (Permutation l2 (merge l2 gv2)), (Permutation l2 (merge l2 l2)), (Permutation l2 (gv2 ++ gv2)), (Permutation l2 (gv2 ++ l2))
(Permutation l2 (l2 ++ gv2)), (Permutation l2 (l2 ++ l2)), (Permutation l2 []), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) l2), (Permutation (merge gv2 gv2) (merge gv2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (gv2 ++ gv2)), (Permutation (merge gv2 gv2) (gv2 ++ l2))
(Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l2)), (Permutation (merge gv2 gv2) []), (Permutation (merge gv2 l2) gv2), (Permutation (merge gv2 l2) l2), (Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (merge l2 gv2)), (Permutation (merge gv2 l2) (merge l2 l2)), (Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) (gv2 ++ l2))
(Permutation (merge gv2 l2) (l2 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge gv2 l2) []), (Permutation (merge l2 gv2) gv2), (Permutation (merge l2 gv2) l2), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (merge gv2 l2)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) (gv2 ++ l2))
(Permutation (merge l2 gv2) (l2 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 gv2) []), (Permutation (merge l2 l2) gv2), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (merge gv2 l2)), (Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (gv2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l2))
(Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) []), (Permutation (gv2 ++ gv2) gv2), (Permutation (gv2 ++ gv2) l2), (Permutation (gv2 ++ gv2) (merge gv2 gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (gv2 ++ l2))
(Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (l2 ++ l2)), (Permutation (gv2 ++ gv2) []), (Permutation (gv2 ++ l2) gv2), (Permutation (gv2 ++ l2) l2), (Permutation (gv2 ++ l2) (merge gv2 gv2)), (Permutation (gv2 ++ l2) (merge gv2 l2)), (Permutation (gv2 ++ l2) (merge l2 gv2)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) (l2 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (gv2 ++ l2) []), (Permutation (l2 ++ gv2) gv2), (Permutation (l2 ++ gv2) l2), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (merge gv2 l2)), (Permutation (l2 ++ gv2) (merge l2 gv2)), (Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2))
(Permutation (l2 ++ gv2) (gv2 ++ l2)), (Permutation (l2 ++ gv2) (l2 ++ l2)), (Permutation (l2 ++ gv2) []), (Permutation (l2 ++ l2) gv2), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l2)), (Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (gv2 ++ gv2))
(Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (l2 ++ gv2)), (Permutation (l2 ++ l2) []), (Permutation [] gv2), (Permutation [] l2), (Permutation [] (merge gv2 gv2)), (Permutation [] (merge gv2 l2)), (Permutation [] (merge l2 gv2)), (Permutation [] (merge l2 l2)), (Permutation [] (gv2 ++ gv2))
(Permutation [] (gv2 ++ l2)), (Permutation [] (l2 ++ gv2)), (Permutation [] (l2 ++ l2)), (In (length gv2) gv2), (In (length gv2) l2), (In (length gv2) (merge gv2 gv2)), (In (length gv2) (merge gv2 l2)), (In (length gv2) (merge l2 gv2)), (In (length gv2) (merge l2 l2)), (In (length gv2) (gv2 ++ gv2))
(In (length gv2) (gv2 ++ l2)), (In (length gv2) (l2 ++ gv2)), (In (length gv2) (l2 ++ l2)), (In (length l2) gv2), (In (length l2) l2), (In (length l2) (merge gv2 gv2)), (In (length l2) (merge gv2 l2)), (In (length l2) (merge l2 gv2)), (In (length l2) (merge l2 l2)), (In (length l2) (gv2 ++ gv2))
(In (length l2) (gv2 ++ l2)), (In (length l2) (l2 ++ gv2)), (In (length l2) (l2 ++ l2)), (length gv2 < length l2), (length l2 < length gv2), (length gv2 <= length l2), (length l2 <= length gv2), (~ sorted gv2), (~ sorted l2), (~ Permutation gv2 gv2)
(~ Permutation gv2 l2), (~ Permutation l2 gv2), (~ Permutation l2 l2), (gv2 <> gv2), (gv2 <> l2), (l2 <> gv2), (l2 <> l2), (None = Some gv2), (None = Some l2), (merge gv2 gv2 = gv2)
(merge gv2 gv2 = l2), (merge gv2 gv2 = gv2 ++ gv2), (merge gv2 gv2 = gv2 ++ l2), (merge gv2 gv2 = l2 ++ gv2), (merge gv2 gv2 = l2 ++ l2), (merge gv2 l2 = gv2), (merge gv2 l2 = l2), (merge gv2 l2 = gv2 ++ gv2), (merge gv2 l2 = gv2 ++ l2), (merge gv2 l2 = l2 ++ gv2)
(merge gv2 l2 = l2 ++ l2), (merge l2 gv2 = gv2), (merge l2 gv2 = l2), (merge l2 gv2 = gv2 ++ gv2), (merge l2 gv2 = gv2 ++ l2), (merge l2 gv2 = l2 ++ gv2), (merge l2 gv2 = l2 ++ l2), (merge l2 l2 = gv2), (merge l2 l2 = l2), (merge l2 l2 = gv2 ++ gv2)
(merge l2 l2 = gv2 ++ l2), (merge l2 l2 = l2 ++ gv2), (merge l2 l2 = l2 ++ l2), (gv2 ++ gv2 = gv2), (gv2 ++ gv2 = l2), (gv2 ++ l2 = gv2), (gv2 ++ l2 = l2), (l2 ++ gv2 = gv2), (l2 ++ gv2 = l2), (l2 ++ l2 = gv2)
(l2 ++ l2 = l2), ([] = gv2), ([] = l2), ([] = merge gv2 gv2), ([] = merge gv2 l2), ([] = merge l2 gv2), ([] = merge l2 l2), ([] = gv2 ++ gv2), ([] = gv2 ++ l2), ([] = l2 ++ gv2)
([] = l2 ++ l2), ((gv2, gv2) = split gv2), ((gv2, gv2) = split l2), ((gv2, l2) = split gv2), ((gv2, l2) = split l2), ((l2, gv2) = split gv2), ((l2, gv2) = split l2), ((l2, l2) = split gv2), ((l2, l2) = split l2)

Label: 2 (2)
(sorted l2), (sorted gv1), (Permutation l2 l2), (Permutation l2 gv1), (Permutation gv1 l2), (Permutation gv1 gv1), (l2 = l2), (l2 = gv1), (gv1 = l2), (gv1 = gv1)
(false = sorted_bool l2), (false = sorted_bool gv1), (true = sorted_bool l2), (true = sorted_bool gv1), (length l2 <=* l2), (length l2 <=* gv1), (length l2 <=* merge l2 l2), (length l2 <=* merge l2 gv1), (length l2 <=* merge gv1 l2), (length l2 <=* merge gv1 gv1)
(length l2 <=* l2 ++ l2), (length l2 <=* l2 ++ gv1), (length l2 <=* gv1 ++ l2), (length l2 <=* gv1 ++ gv1), (length l2 <=* []), (length gv1 <=* l2), (length gv1 <=* gv1), (length gv1 <=* merge l2 l2), (length gv1 <=* merge l2 gv1), (length gv1 <=* merge gv1 l2)
(length gv1 <=* merge gv1 gv1), (length gv1 <=* l2 ++ l2), (length gv1 <=* l2 ++ gv1), (length gv1 <=* gv1 ++ l2), (length gv1 <=* gv1 ++ gv1), (length gv1 <=* []), (sorted (merge l2 l2)), (sorted (merge l2 gv1)), (sorted (merge gv1 l2)), (sorted (merge gv1 gv1))
(sorted (l2 ++ l2)), (sorted (l2 ++ gv1)), (sorted (gv1 ++ l2)), (sorted (gv1 ++ gv1)), (sorted []), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (merge gv1 gv1)), (Permutation l2 (l2 ++ l2))
(Permutation l2 (l2 ++ gv1)), (Permutation l2 (gv1 ++ l2)), (Permutation l2 (gv1 ++ gv1)), (Permutation l2 []), (Permutation gv1 (merge l2 l2)), (Permutation gv1 (merge l2 gv1)), (Permutation gv1 (merge gv1 l2)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (l2 ++ l2)), (Permutation gv1 (l2 ++ gv1))
(Permutation gv1 (gv1 ++ l2)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv1), (Permutation (merge l2 l2) (merge l2 gv1)), (Permutation (merge l2 l2) (merge gv1 l2)), (Permutation (merge l2 l2) (merge gv1 gv1)), (Permutation (merge l2 l2) (l2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv1))
(Permutation (merge l2 l2) (gv1 ++ l2)), (Permutation (merge l2 l2) (gv1 ++ gv1)), (Permutation (merge l2 l2) []), (Permutation (merge l2 gv1) l2), (Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (merge l2 l2)), (Permutation (merge l2 gv1) (merge gv1 l2)), (Permutation (merge l2 gv1) (merge gv1 gv1)), (Permutation (merge l2 gv1) (l2 ++ l2)), (Permutation (merge l2 gv1) (l2 ++ gv1))
(Permutation (merge l2 gv1) (gv1 ++ l2)), (Permutation (merge l2 gv1) (gv1 ++ gv1)), (Permutation (merge l2 gv1) []), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 l2) gv1), (Permutation (merge gv1 l2) (merge l2 l2)), (Permutation (merge gv1 l2) (merge l2 gv1)), (Permutation (merge gv1 l2) (merge gv1 gv1)), (Permutation (merge gv1 l2) (l2 ++ l2)), (Permutation (merge gv1 l2) (l2 ++ gv1))
(Permutation (merge gv1 l2) (gv1 ++ l2)), (Permutation (merge gv1 l2) (gv1 ++ gv1)), (Permutation (merge gv1 l2) []), (Permutation (merge gv1 gv1) l2), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge l2 l2)), (Permutation (merge gv1 gv1) (merge l2 gv1)), (Permutation (merge gv1 gv1) (merge gv1 l2)), (Permutation (merge gv1 gv1) (l2 ++ l2)), (Permutation (merge gv1 gv1) (l2 ++ gv1))
(Permutation (merge gv1 gv1) (gv1 ++ l2)), (Permutation (merge gv1 gv1) (gv1 ++ gv1)), (Permutation (merge gv1 gv1) []), (Permutation (l2 ++ l2) l2), (Permutation (l2 ++ l2) gv1), (Permutation (l2 ++ l2) (merge l2 l2)), (Permutation (l2 ++ l2) (merge l2 gv1)), (Permutation (l2 ++ l2) (merge gv1 l2)), (Permutation (l2 ++ l2) (merge gv1 gv1)), (Permutation (l2 ++ l2) (l2 ++ gv1))
(Permutation (l2 ++ l2) (gv1 ++ l2)), (Permutation (l2 ++ l2) (gv1 ++ gv1)), (Permutation (l2 ++ l2) []), (Permutation (l2 ++ gv1) l2), (Permutation (l2 ++ gv1) gv1), (Permutation (l2 ++ gv1) (merge l2 l2)), (Permutation (l2 ++ gv1) (merge l2 gv1)), (Permutation (l2 ++ gv1) (merge gv1 l2)), (Permutation (l2 ++ gv1) (merge gv1 gv1)), (Permutation (l2 ++ gv1) (l2 ++ l2))
(Permutation (l2 ++ gv1) (gv1 ++ l2)), (Permutation (l2 ++ gv1) (gv1 ++ gv1)), (Permutation (l2 ++ gv1) []), (Permutation (gv1 ++ l2) l2), (Permutation (gv1 ++ l2) gv1), (Permutation (gv1 ++ l2) (merge l2 l2)), (Permutation (gv1 ++ l2) (merge l2 gv1)), (Permutation (gv1 ++ l2) (merge gv1 l2)), (Permutation (gv1 ++ l2) (merge gv1 gv1)), (Permutation (gv1 ++ l2) (l2 ++ l2))
(Permutation (gv1 ++ l2) (l2 ++ gv1)), (Permutation (gv1 ++ l2) (gv1 ++ gv1)), (Permutation (gv1 ++ l2) []), (Permutation (gv1 ++ gv1) l2), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) (merge l2 l2)), (Permutation (gv1 ++ gv1) (merge l2 gv1)), (Permutation (gv1 ++ gv1) (merge gv1 l2)), (Permutation (gv1 ++ gv1) (merge gv1 gv1)), (Permutation (gv1 ++ gv1) (l2 ++ l2))
(Permutation (gv1 ++ gv1) (l2 ++ gv1)), (Permutation (gv1 ++ gv1) (gv1 ++ l2)), (Permutation (gv1 ++ gv1) []), (Permutation [] l2), (Permutation [] gv1), (Permutation [] (merge l2 l2)), (Permutation [] (merge l2 gv1)), (Permutation [] (merge gv1 l2)), (Permutation [] (merge gv1 gv1)), (Permutation [] (l2 ++ l2))
(Permutation [] (l2 ++ gv1)), (Permutation [] (gv1 ++ l2)), (Permutation [] (gv1 ++ gv1)), (In (length l2) l2), (In (length l2) gv1), (In (length l2) (merge l2 l2)), (In (length l2) (merge l2 gv1)), (In (length l2) (merge gv1 l2)), (In (length l2) (merge gv1 gv1)), (In (length l2) (l2 ++ l2))
(In (length l2) (l2 ++ gv1)), (In (length l2) (gv1 ++ l2)), (In (length l2) (gv1 ++ gv1)), (In (length gv1) l2), (In (length gv1) gv1), (In (length gv1) (merge l2 l2)), (In (length gv1) (merge l2 gv1)), (In (length gv1) (merge gv1 l2)), (In (length gv1) (merge gv1 gv1)), (In (length gv1) (l2 ++ l2))
(In (length gv1) (l2 ++ gv1)), (In (length gv1) (gv1 ++ l2)), (In (length gv1) (gv1 ++ gv1)), (length l2 < length gv1), (length gv1 < length l2), (length l2 <= length gv1), (length gv1 <= length l2), (~ sorted l2), (~ sorted gv1), (~ Permutation l2 l2)
(~ Permutation l2 gv1), (~ Permutation gv1 l2), (~ Permutation gv1 gv1), (l2 <> l2), (l2 <> gv1), (gv1 <> l2), (gv1 <> gv1), (None = Some l2), (None = Some gv1), (merge l2 l2 = l2)
(merge l2 l2 = gv1), (merge l2 l2 = l2 ++ l2), (merge l2 l2 = l2 ++ gv1), (merge l2 l2 = gv1 ++ l2), (merge l2 l2 = gv1 ++ gv1), (merge l2 gv1 = l2), (merge l2 gv1 = gv1), (merge l2 gv1 = l2 ++ l2), (merge l2 gv1 = l2 ++ gv1), (merge l2 gv1 = gv1 ++ l2)
(merge l2 gv1 = gv1 ++ gv1), (merge gv1 l2 = l2), (merge gv1 l2 = gv1), (merge gv1 l2 = l2 ++ l2), (merge gv1 l2 = l2 ++ gv1), (merge gv1 l2 = gv1 ++ l2), (merge gv1 l2 = gv1 ++ gv1), (merge gv1 gv1 = l2), (merge gv1 gv1 = gv1), (merge gv1 gv1 = l2 ++ l2)
(merge gv1 gv1 = l2 ++ gv1), (merge gv1 gv1 = gv1 ++ l2), (merge gv1 gv1 = gv1 ++ gv1), (l2 ++ l2 = l2), (l2 ++ l2 = gv1), (l2 ++ gv1 = l2), (l2 ++ gv1 = gv1), (gv1 ++ l2 = l2), (gv1 ++ l2 = gv1), (gv1 ++ gv1 = l2)
(gv1 ++ gv1 = gv1), ([] = l2), ([] = gv1), ([] = merge l2 l2), ([] = merge l2 gv1), ([] = merge gv1 l2), ([] = merge gv1 gv1), ([] = l2 ++ l2), ([] = l2 ++ gv1), ([] = gv1 ++ l2)
([] = gv1 ++ gv1), ((l2, l2) = split l2), ((l2, l2) = split gv1), ((l2, gv1) = split l2), ((l2, gv1) = split gv1), ((gv1, l2) = split l2), ((gv1, l2) = split gv1), ((gv1, gv1) = split l2), ((gv1, gv1) = split gv1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 342.599 seconds


Label: 0 (0)
(Permutation l2 gv0), (Permutation gv0 l2), (l2 = gv0), (gv0 = l2), (Permutation (merge l2 l2) (merge l2 gv0)), (Permutation (merge l2 l2) (merge gv0 l2)), (Permutation (merge l2 l2) (merge gv0 gv0)), (Permutation (merge l2 l2) (l2 ++ gv0)), (Permutation (merge l2 l2) (gv0 ++ l2)), (Permutation (merge l2 l2) (gv0 ++ gv0))
(Permutation (merge l2 gv0) (merge l2 l2)), (Permutation (merge l2 gv0) (merge gv0 gv0)), (Permutation (merge l2 gv0) (l2 ++ l2)), (Permutation (merge l2 gv0) (gv0 ++ gv0)), (Permutation (merge gv0 l2) (merge l2 l2)), (Permutation (merge gv0 l2) (merge gv0 gv0)), (Permutation (merge gv0 l2) (l2 ++ l2)), (Permutation (merge gv0 l2) (gv0 ++ gv0)), (Permutation (merge gv0 gv0) (merge l2 l2)), (Permutation (merge gv0 gv0) (merge l2 gv0))
(Permutation (merge gv0 gv0) (merge gv0 l2)), (Permutation (merge gv0 gv0) (l2 ++ l2)), (Permutation (merge gv0 gv0) (l2 ++ gv0)), (Permutation (merge gv0 gv0) (gv0 ++ l2)), (Permutation (l2 ++ l2) (merge l2 gv0)), (Permutation (l2 ++ l2) (merge gv0 l2)), (Permutation (l2 ++ l2) (merge gv0 gv0)), (Permutation (l2 ++ l2) (l2 ++ gv0)), (Permutation (l2 ++ l2) (gv0 ++ l2)), (Permutation (l2 ++ l2) (gv0 ++ gv0))
(Permutation (l2 ++ gv0) (merge l2 l2)), (Permutation (l2 ++ gv0) (merge gv0 gv0)), (Permutation (l2 ++ gv0) (l2 ++ l2)), (Permutation (l2 ++ gv0) (gv0 ++ gv0)), (Permutation (gv0 ++ l2) (merge l2 l2)), (Permutation (gv0 ++ l2) (merge gv0 gv0)), (Permutation (gv0 ++ l2) (l2 ++ l2)), (Permutation (gv0 ++ l2) (gv0 ++ gv0)), (Permutation (gv0 ++ gv0) (merge l2 l2)), (Permutation (gv0 ++ gv0) (merge l2 gv0))
(Permutation (gv0 ++ gv0) (merge gv0 l2)), (Permutation (gv0 ++ gv0) (l2 ++ l2)), (Permutation (gv0 ++ gv0) (l2 ++ gv0)), (Permutation (gv0 ++ gv0) (gv0 ++ l2))

Label: 1 (1)
(Permutation gv2 l2), (Permutation l2 gv2), (gv2 = l2), (l2 = gv2), (Permutation (merge gv2 gv2) (merge gv2 l2)), (Permutation (merge gv2 gv2) (merge l2 gv2)), (Permutation (merge gv2 gv2) (merge l2 l2)), (Permutation (merge gv2 gv2) (gv2 ++ l2)), (Permutation (merge gv2 gv2) (l2 ++ gv2)), (Permutation (merge gv2 gv2) (l2 ++ l2))
(Permutation (merge gv2 l2) (merge gv2 gv2)), (Permutation (merge gv2 l2) (merge l2 l2)), (Permutation (merge gv2 l2) (gv2 ++ gv2)), (Permutation (merge gv2 l2) (l2 ++ l2)), (Permutation (merge l2 gv2) (merge gv2 gv2)), (Permutation (merge l2 gv2) (merge l2 l2)), (Permutation (merge l2 gv2) (gv2 ++ gv2)), (Permutation (merge l2 gv2) (l2 ++ l2)), (Permutation (merge l2 l2) (merge gv2 gv2)), (Permutation (merge l2 l2) (merge gv2 l2))
(Permutation (merge l2 l2) (merge l2 gv2)), (Permutation (merge l2 l2) (gv2 ++ gv2)), (Permutation (merge l2 l2) (gv2 ++ l2)), (Permutation (merge l2 l2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (merge gv2 l2)), (Permutation (gv2 ++ gv2) (merge l2 gv2)), (Permutation (gv2 ++ gv2) (merge l2 l2)), (Permutation (gv2 ++ gv2) (gv2 ++ l2)), (Permutation (gv2 ++ gv2) (l2 ++ gv2)), (Permutation (gv2 ++ gv2) (l2 ++ l2))
(Permutation (gv2 ++ l2) (merge gv2 gv2)), (Permutation (gv2 ++ l2) (merge l2 l2)), (Permutation (gv2 ++ l2) (gv2 ++ gv2)), (Permutation (gv2 ++ l2) (l2 ++ l2)), (Permutation (l2 ++ gv2) (merge gv2 gv2)), (Permutation (l2 ++ gv2) (merge l2 l2)), (Permutation (l2 ++ gv2) (gv2 ++ gv2)), (Permutation (l2 ++ gv2) (l2 ++ l2)), (Permutation (l2 ++ l2) (merge gv2 gv2)), (Permutation (l2 ++ l2) (merge gv2 l2))
(Permutation (l2 ++ l2) (merge l2 gv2)), (Permutation (l2 ++ l2) (gv2 ++ gv2)), (Permutation (l2 ++ l2) (gv2 ++ l2)), (Permutation (l2 ++ l2) (l2 ++ gv2))

Label: 2 (2)
(Permutation l2 (merge l2 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (l2 ++ gv1)), (Permutation l2 (gv1 ++ l2)), (Permutation gv1 (merge gv1 gv1)), (Permutation gv1 (gv1 ++ gv1)), (Permutation gv1 []), (Permutation (merge l2 gv1) l2), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 gv1) gv1)
(Permutation (merge gv1 gv1) []), (Permutation (l2 ++ gv1) l2), (Permutation (gv1 ++ l2) l2), (Permutation (gv1 ++ gv1) gv1), (Permutation (gv1 ++ gv1) []), (Permutation [] gv1), (Permutation [] (merge gv1 gv1)), (Permutation [] (gv1 ++ gv1)), (merge l2 gv1 = l2), (merge gv1 l2 = l2)
(merge gv1 gv1 = gv1), (l2 ++ gv1 = l2), (gv1 ++ l2 = l2), (gv1 ++ gv1 = gv1), ([] = gv1), ([] = merge gv1 gv1), ([] = gv1 ++ gv1), ((gv1, gv1) = split gv1)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 1002.766 seconds


(merge [] l2 = gv2)
 - (merge [] l2 = gv2)
 - (Permutation gv2 l2)
 - (Permutation l2 gv2)
 - (gv2 = l2)
 - (l2 = gv2)
 - (Permutation (merge gv2 gv2) (merge gv2 l2))
 - (Permutation (merge gv2 gv2) (merge l2 gv2))
 - (Permutation (merge gv2 gv2) (merge l2 l2))
 - (Permutation (merge gv2 gv2) (gv2 ++ l2))
 - (Permutation (merge gv2 gv2) (l2 ++ gv2))
 - (Permutation (merge gv2 gv2) (l2 ++ l2))
 - (Permutation (merge gv2 l2) (merge gv2 gv2))
 - (Permutation (merge gv2 l2) (merge l2 l2))
 - (Permutation (merge gv2 l2) (gv2 ++ gv2))
 - (Permutation (merge gv2 l2) (l2 ++ l2))
 - (Permutation (merge l2 gv2) (merge gv2 gv2))
 - (Permutation (merge l2 gv2) (merge l2 l2))
 - (Permutation (merge l2 gv2) (gv2 ++ gv2))
 - (Permutation (merge l2 gv2) (l2 ++ l2))
 - (Permutation (merge l2 l2) (merge gv2 gv2))
 - (Permutation (merge l2 l2) (merge gv2 l2))
 - (Permutation (merge l2 l2) (merge l2 gv2))
 - (Permutation (merge l2 l2) (gv2 ++ gv2))
 - (Permutation (merge l2 l2) (gv2 ++ l2))
 - (Permutation (merge l2 l2) (l2 ++ gv2))
 - (Permutation (gv2 ++ gv2) (merge gv2 l2))
 - (Permutation (gv2 ++ gv2) (merge l2 gv2))
 - (Permutation (gv2 ++ gv2) (merge l2 l2))
 - (Permutation (gv2 ++ gv2) (gv2 ++ l2))
 - (Permutation (gv2 ++ gv2) (l2 ++ gv2))
 - (Permutation (gv2 ++ gv2) (l2 ++ l2))
 - (Permutation (gv2 ++ l2) (merge gv2 gv2))
 - (Permutation (gv2 ++ l2) (merge l2 l2))
 - (Permutation (gv2 ++ l2) (gv2 ++ gv2))
 - (Permutation (gv2 ++ l2) (l2 ++ l2))
 - (Permutation (l2 ++ gv2) (merge gv2 gv2))
 - (Permutation (l2 ++ gv2) (merge l2 l2))
 - (Permutation (l2 ++ gv2) (gv2 ++ gv2))
 - (Permutation (l2 ++ gv2) (l2 ++ l2))
 - (Permutation (l2 ++ l2) (merge gv2 gv2))
 - (Permutation (l2 ++ l2) (merge gv2 l2))
 - (Permutation (l2 ++ l2) (merge l2 gv2))
 - (Permutation (l2 ++ l2) (gv2 ++ gv2))
 - (Permutation (l2 ++ l2) (gv2 ++ l2))
 - (Permutation (l2 ++ l2) (l2 ++ gv2))

([] = gv1)
 - ([] = gv1)
 - (Permutation l2 (merge l2 gv1))
 - (Permutation l2 (merge gv1 l2))
 - (Permutation l2 (l2 ++ gv1))
 - (Permutation l2 (gv1 ++ l2))
 - (Permutation gv1 (merge gv1 gv1))
 - (Permutation gv1 (gv1 ++ gv1))
 - (Permutation gv1 [])
 - (Permutation (merge l2 gv1) l2)
 - (Permutation (merge gv1 l2) l2)
 - (Permutation (merge gv1 gv1) gv1)
 - (Permutation (merge gv1 gv1) [])
 - (Permutation (l2 ++ gv1) l2)
 - (Permutation (gv1 ++ l2) l2)
 - (Permutation (gv1 ++ gv1) gv1)
 - (Permutation (gv1 ++ gv1) [])
 - (Permutation [] gv1)
 - (Permutation [] (merge gv1 gv1))
 - (Permutation [] (gv1 ++ gv1))
 - (merge l2 gv1 = l2)
 - (merge gv1 l2 = l2)
 - (merge gv1 gv1 = gv1)
 - (l2 ++ gv1 = l2)
 - (gv1 ++ l2 = l2)
 - (gv1 ++ gv1 = gv1)
 - ([] = merge gv1 gv1)
 - ([] = gv1 ++ gv1)
 - ((gv1, gv1) = split gv1)

([] ++ l2 = gv0)
 - ([] ++ l2 = gv0)
 - (Permutation l2 gv0)
 - (Permutation gv0 l2)
 - (Permutation (merge l2 l2) (merge l2 gv0))
 - (Permutation (merge l2 l2) (merge gv0 l2))
 - (Permutation (merge l2 l2) (merge gv0 gv0))
 - (Permutation (merge l2 l2) (l2 ++ gv0))
 - (Permutation (merge l2 l2) (gv0 ++ l2))
 - (Permutation (merge l2 l2) (gv0 ++ gv0))
 - (Permutation (merge l2 gv0) (merge l2 l2))
 - (Permutation (merge l2 gv0) (merge gv0 gv0))
 - (Permutation (merge l2 gv0) (l2 ++ l2))
 - (Permutation (merge l2 gv0) (gv0 ++ gv0))
 - (Permutation (merge gv0 l2) (merge l2 l2))
 - (Permutation (merge gv0 l2) (merge gv0 gv0))
 - (Permutation (merge gv0 l2) (l2 ++ l2))
 - (Permutation (merge gv0 l2) (gv0 ++ gv0))
 - (Permutation (merge gv0 gv0) (merge l2 l2))
 - (Permutation (merge gv0 gv0) (merge l2 gv0))
 - (Permutation (merge gv0 gv0) (merge gv0 l2))
 - (Permutation (merge gv0 gv0) (l2 ++ l2))
 - (Permutation (merge gv0 gv0) (l2 ++ gv0))
 - (Permutation (merge gv0 gv0) (gv0 ++ l2))
 - (Permutation (l2 ++ l2) (merge l2 gv0))
 - (Permutation (l2 ++ l2) (merge gv0 l2))
 - (Permutation (l2 ++ l2) (merge gv0 gv0))
 - (Permutation (l2 ++ l2) (l2 ++ gv0))
 - (Permutation (l2 ++ l2) (gv0 ++ l2))
 - (Permutation (l2 ++ l2) (gv0 ++ gv0))
 - (Permutation (l2 ++ gv0) (merge l2 l2))
 - (Permutation (l2 ++ gv0) (merge gv0 gv0))
 - (Permutation (l2 ++ gv0) (l2 ++ l2))
 - (Permutation (l2 ++ gv0) (gv0 ++ gv0))
 - (Permutation (gv0 ++ l2) (merge l2 l2))
 - (Permutation (gv0 ++ l2) (merge gv0 gv0))
 - (Permutation (gv0 ++ l2) (l2 ++ l2))
 - (Permutation (gv0 ++ l2) (gv0 ++ gv0))
 - (Permutation (gv0 ++ gv0) (merge l2 l2))
 - (Permutation (gv0 ++ gv0) (merge l2 gv0))
 - (Permutation (gv0 ++ gv0) (merge gv0 l2))
 - (Permutation (gv0 ++ gv0) (l2 ++ l2))
 - (Permutation (gv0 ++ gv0) (l2 ++ gv0))
 - (Permutation (gv0 ++ gv0) (gv0 ++ l2))


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 1002.769 seconds

Number of Result Pairs Returned: 114

([] ++ l2 = gv0 -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation l2 gv0)
(Permutation l2 gv0 -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation gv0 l2)
(Permutation gv0 l2 -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (merge l2 gv0))
(Permutation (merge l2 l2) (merge l2 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (merge gv0 l2))
(Permutation (merge l2 l2) (merge gv0 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (merge gv0 gv0))
(Permutation (merge l2 l2) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (l2 ++ gv0))
(Permutation (merge l2 l2) (l2 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (gv0 ++ l2))
(Permutation (merge l2 l2) (gv0 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 l2) (gv0 ++ gv0))
(Permutation (merge l2 l2) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 gv0) (merge l2 l2))
(Permutation (merge l2 gv0) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 gv0) (merge gv0 gv0))
(Permutation (merge l2 gv0) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 gv0) (l2 ++ l2))
(Permutation (merge l2 gv0) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge l2 gv0) (gv0 ++ gv0))
(Permutation (merge l2 gv0) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 l2) (merge l2 l2))
(Permutation (merge gv0 l2) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 l2) (merge gv0 gv0))
(Permutation (merge gv0 l2) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 l2) (l2 ++ l2))
(Permutation (merge gv0 l2) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 l2) (gv0 ++ gv0))
(Permutation (merge gv0 l2) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (merge l2 l2))
(Permutation (merge gv0 gv0) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (merge l2 gv0))
(Permutation (merge gv0 gv0) (merge l2 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (merge gv0 l2))
(Permutation (merge gv0 gv0) (merge gv0 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (l2 ++ l2))
(Permutation (merge gv0 gv0) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (l2 ++ gv0))
(Permutation (merge gv0 gv0) (l2 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (merge gv0 gv0) (gv0 ++ l2))
(Permutation (merge gv0 gv0) (gv0 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (merge l2 gv0))
(Permutation (l2 ++ l2) (merge l2 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (merge gv0 l2))
(Permutation (l2 ++ l2) (merge gv0 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (merge gv0 gv0))
(Permutation (l2 ++ l2) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (l2 ++ gv0))
(Permutation (l2 ++ l2) (l2 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (gv0 ++ l2))
(Permutation (l2 ++ l2) (gv0 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ l2) (gv0 ++ gv0))
(Permutation (l2 ++ l2) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ gv0) (merge l2 l2))
(Permutation (l2 ++ gv0) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ gv0) (merge gv0 gv0))
(Permutation (l2 ++ gv0) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ gv0) (l2 ++ l2))
(Permutation (l2 ++ gv0) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (l2 ++ gv0) (gv0 ++ gv0))
(Permutation (l2 ++ gv0) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ l2) (merge l2 l2))
(Permutation (gv0 ++ l2) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ l2) (merge gv0 gv0))
(Permutation (gv0 ++ l2) (merge gv0 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ l2) (l2 ++ l2))
(Permutation (gv0 ++ l2) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ l2) (gv0 ++ gv0))
(Permutation (gv0 ++ l2) (gv0 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (merge l2 l2))
(Permutation (gv0 ++ gv0) (merge l2 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (merge l2 gv0))
(Permutation (gv0 ++ gv0) (merge l2 gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (merge gv0 l2))
(Permutation (gv0 ++ gv0) (merge gv0 l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (l2 ++ l2))
(Permutation (gv0 ++ gv0) (l2 ++ l2) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (l2 ++ gv0))
(Permutation (gv0 ++ gv0) (l2 ++ gv0) -> Permutation gv0 (merge [] l2))

([] ++ l2 = gv0 -> Permutation (gv0 ++ gv0) (gv0 ++ l2))
(Permutation (gv0 ++ gv0) (gv0 ++ l2) -> Permutation gv0 (merge [] l2))

(merge [] l2 = gv2 -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> gv2 = l2)
(gv2 = l2 -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> l2 = gv2)
(l2 = gv2 -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (merge gv2 l2))
(Permutation (merge gv2 gv2) (merge gv2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (merge l2 gv2))
(Permutation (merge gv2 gv2) (merge l2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (merge l2 l2))
(Permutation (merge gv2 gv2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (gv2 ++ l2))
(Permutation (merge gv2 gv2) (gv2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (l2 ++ gv2))
(Permutation (merge gv2 gv2) (l2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 gv2) (l2 ++ l2))
(Permutation (merge gv2 gv2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 l2) (merge gv2 gv2))
(Permutation (merge gv2 l2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 l2) (merge l2 l2))
(Permutation (merge gv2 l2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 l2) (gv2 ++ gv2))
(Permutation (merge gv2 l2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge gv2 l2) (l2 ++ l2))
(Permutation (merge gv2 l2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 gv2) (merge gv2 gv2))
(Permutation (merge l2 gv2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 gv2) (merge l2 l2))
(Permutation (merge l2 gv2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 gv2) (gv2 ++ gv2))
(Permutation (merge l2 gv2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 gv2) (l2 ++ l2))
(Permutation (merge l2 gv2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (merge gv2 gv2))
(Permutation (merge l2 l2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (merge gv2 l2))
(Permutation (merge l2 l2) (merge gv2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (merge l2 gv2))
(Permutation (merge l2 l2) (merge l2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (gv2 ++ gv2))
(Permutation (merge l2 l2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (gv2 ++ l2))
(Permutation (merge l2 l2) (gv2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (merge l2 l2) (l2 ++ gv2))
(Permutation (merge l2 l2) (l2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (merge gv2 l2))
(Permutation (gv2 ++ gv2) (merge gv2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (merge l2 gv2))
(Permutation (gv2 ++ gv2) (merge l2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (merge l2 l2))
(Permutation (gv2 ++ gv2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (gv2 ++ l2))
(Permutation (gv2 ++ gv2) (gv2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (l2 ++ gv2))
(Permutation (gv2 ++ gv2) (l2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ gv2) (l2 ++ l2))
(Permutation (gv2 ++ gv2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ l2) (merge gv2 gv2))
(Permutation (gv2 ++ l2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ l2) (merge l2 l2))
(Permutation (gv2 ++ l2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ l2) (gv2 ++ gv2))
(Permutation (gv2 ++ l2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (gv2 ++ l2) (l2 ++ l2))
(Permutation (gv2 ++ l2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ gv2) (merge gv2 gv2))
(Permutation (l2 ++ gv2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ gv2) (merge l2 l2))
(Permutation (l2 ++ gv2) (merge l2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ gv2) (gv2 ++ gv2))
(Permutation (l2 ++ gv2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ gv2) (l2 ++ l2))
(Permutation (l2 ++ gv2) (l2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (merge gv2 gv2))
(Permutation (l2 ++ l2) (merge gv2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (merge gv2 l2))
(Permutation (l2 ++ l2) (merge gv2 l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (merge l2 gv2))
(Permutation (l2 ++ l2) (merge l2 gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (gv2 ++ gv2))
(Permutation (l2 ++ l2) (gv2 ++ gv2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (gv2 ++ l2))
(Permutation (l2 ++ l2) (gv2 ++ l2) -> Permutation ([] ++ l2) gv2)

(merge [] l2 = gv2 -> Permutation (l2 ++ l2) (l2 ++ gv2))
(Permutation (l2 ++ l2) (l2 ++ gv2) -> Permutation ([] ++ l2) gv2)

([] = gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation l2 (merge l2 gv1))
(Permutation l2 (merge l2 gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation l2 (merge gv1 l2))
(Permutation l2 (merge gv1 l2) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation l2 (l2 ++ gv1))
(Permutation l2 (l2 ++ gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation l2 (gv1 ++ l2))
(Permutation l2 (gv1 ++ l2) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation gv1 (merge gv1 gv1))
(Permutation gv1 (merge gv1 gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation gv1 (gv1 ++ gv1))
(Permutation gv1 (gv1 ++ gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation gv1 [])
(Permutation gv1 [] -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (merge l2 gv1) l2)
(Permutation (merge l2 gv1) l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (merge gv1 l2) l2)
(Permutation (merge gv1 l2) l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (merge gv1 gv1) gv1)
(Permutation (merge gv1 gv1) gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (merge gv1 gv1) [])
(Permutation (merge gv1 gv1) [] -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (l2 ++ gv1) l2)
(Permutation (l2 ++ gv1) l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (gv1 ++ l2) l2)
(Permutation (gv1 ++ l2) l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (gv1 ++ gv1) gv1)
(Permutation (gv1 ++ gv1) gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation (gv1 ++ gv1) [])
(Permutation (gv1 ++ gv1) [] -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation [] gv1)
(Permutation [] gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation [] (merge gv1 gv1))
(Permutation [] (merge gv1 gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> Permutation [] (gv1 ++ gv1))
(Permutation [] (gv1 ++ gv1) -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> merge l2 gv1 = l2)
(merge l2 gv1 = l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> merge gv1 l2 = l2)
(merge gv1 l2 = l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> merge gv1 gv1 = gv1)
(merge gv1 gv1 = gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> l2 ++ gv1 = l2)
(l2 ++ gv1 = l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> gv1 ++ l2 = l2)
(gv1 ++ l2 = l2 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> gv1 ++ gv1 = gv1)
(gv1 ++ gv1 = gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> [] = merge gv1 gv1)
([] = merge gv1 gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> [] = gv1 ++ gv1)
([] = gv1 ++ gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))

([] = gv1 -> (gv1, gv1) = split gv1)
((gv1, gv1) = split gv1 -> Permutation (gv1 ++ l2) (merge gv1 l2))
