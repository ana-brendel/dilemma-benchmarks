Lemma Synthesis Execution Log and Results
--------------------------------------------------------------------
--------------------------------------------------------------------

Label: Initial State
Assumptions: 
 -- (l0 = _x)
 -- (sorted (mergesort l1))
 -- (sorted (mergesort l2))
 -- (split l0 = (l1, l2))

----------------------------------
Goal: (sorted (merge (mergesort l1) (mergesort l2)))


------------------------------ GENERALIZED VARIABLES ------------------------------
Time Elapsed From Start: 0. seconds

gv1 : (list nat) = (mergesort l1)
gv2 : (list nat) = (mergesort l2)
gv0 : (list nat) = (merge (mergesort l1) (mergesort l2))


------------------------------ GENERALIZATIONS ------------------------------
  NOTE: The assumptions have been restricted to be only the necessary assumptions.
Time Elapsed From Start: 70.639 seconds

Label: Generalization #0
Assumptions: 
 -- (merge (mergesort l1) (mergesort l2) = gv0)

----------------------------------
Goal: (sorted gv0)
Case: 3

Label: Generalization #1
Assumptions: 
 -- (sorted gv2)

----------------------------------
Goal: (sorted (merge (mergesort l1) gv2))
Case: 3

Label: Generalization #2
Assumptions: 
 -- (sorted gv1)

----------------------------------
Goal: (sorted (merge gv1 (mergesort l2)))
Case: 3

Label: Generalization #3
Assumptions: 
 -- (l0 = _x)

----------------------------------
Goal: (sorted (merge (mergesort l1) (mergesort l2)))
Case: 1



------------------------------ SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 71.505 seconds

 -- functions to consider -- 
@eq : (forall A : Type, A -> A -> Prop)
not : (Prop -> Prop)
@fst : (forall A B : Type, A * B -> A)
@snd : (forall A B : Type, A * B -> B)
length : (forall A : Type, list A -> nat)
app : (forall A : Type, list A -> list A -> list A)
le : (nat -> nat -> Prop)
lt : (nat -> nat -> Prop)
In : (forall A : Type, A -> list A -> Prop)
existsb : (forall A : Type, (A -> bool) -> list A -> bool)
forallb : (forall A : Type, (A -> bool) -> list A -> bool)
Forall : (forall A : Type, (A -> Prop) -> list A -> Prop)
nodup : (forall A : Type, (forall x y : A, {x = y} + {x <> y}) -> list A -> list A)
Permutation : (forall A : Type, list A -> list A -> Prop)
sorted : (list nat -> Prop)
is_a_sorting_algorithm : ((list nat -> list nat) -> Prop)
@split : (forall X : Type, list X -> list X * list X)
merge : (list nat -> list nat -> list nat)
le_all : (nat -> list nat -> Prop)
list_ind2 : (forall (A : Type) (P : list A -> Prop),
 P [] ->
 (forall a : A, P [a]) ->
 (forall (a b : A) (l : list A), P l -> P (a :: b :: l)) ->
 forall l : list A, P l)
sorted_bool : (list nat -> bool)

Label: 0 (0)
Abducted Assumption: (merge (mergesort l1) (mergesort l2) = gv0)
Positive Examples:
   [gv0 := [0; 0]; l1 := [0]; l2 := [0]]
   [gv0 := [0; 1]; l1 := []; l2 := [1; 0]]
   [gv0 := [0; 0]; l1 := [0; 0]; l2 := []]
   [gv0 := [2; 2]; l1 := [2; 2]; l2 := []]
   [gv0 := [0; 1]; l1 := [0]; l2 := [1]]
   [gv0 := [2; 2]; l1 := []; l2 := [2; 2]]
   [gv0 := [1; 2]; l1 := []; l2 := [1; 2]]
   [gv0 := [1; 2]; l1 := [2; 1]; l2 := []]
   [gv0 := [0; 2]; l1 := [0]; l2 := [2]]
   [gv0 := [0; 2]; l1 := []; l2 := [0; 2]]
   etc ...

Negative Examples:
   [gv0 := [3; 0; 1]; l1 := [3; 0; 2]; l2 := [4; 2; 1]]
   [gv0 := [2; 0]; l1 := []; l2 := [1]]
   [gv0 := [3; 0]; l1 := []; l2 := [0; 1]]
   [gv0 := [5; 2; 0]; l1 := [0; 6; 2]; l2 := [5; 2; 0; 5]]
   [gv0 := [4; 4; 3; 0; 0]; l1 := [4; 4; 4; 1]; l2 := [1; 4; 5; 4]]
   [gv0 := [4; 2]; l1 := []; l2 := []]
   [gv0 := [6; 3]; l1 := [2; 0; 3; 1; 5; 6]; l2 := [2; 6]]
   [gv0 := [3; 1; 2; 5]; l1 := [4; 5; 0; 5; 4]; l2 := [5; 2]]
   [gv0 := [2; 4; 2]; l1 := [4; 0; 3; 1]; l2 := [2; 1; 2; 0]]
   [gv0 := [0; 2; 0]; l1 := []; l2 := [3; 2]]
   etc ...


Label: 1 (1)
Abducted Assumption: (sorted gv2)
Positive Examples:
   [gv2 := [4]; l1 := [2]; l2 := [4; 4; 1; 1]]
   [gv2 := [1]; l1 := [2]; l2 := [2; 2]]
   [gv2 := []; l1 := [5; 0]; l2 := [3; 3; 3]]
   [gv2 := [0; 3; 3]; l1 := [2; 2; 5; 5; 4; 3]; l2 := [2; 5]]
   [gv2 := [4]; l1 := [5; 5; 0]; l2 := [0; 5; 1; 0]]
   [gv2 := []; l1 := [0]; l2 := [3; 0; 3]]
   [gv2 := [3; 3]; l1 := []; l2 := [1]]
   [gv2 := []; l1 := [3; 1; 4]; l2 := [2; 3; 4]]
   [gv2 := [0; 1]; l1 := [3; 3]; l2 := [0; 2; 2]]
   [gv2 := []; l1 := [0; 1]; l2 := [0; 0]]
   etc ...

Negative Examples:
   [gv2 := [5; 1; 4; 4; 0]; l1 := [0; 0]; l2 := [1; 6; 6]]
   [gv2 := [4; 0; 0; 0]; l1 := [2; 3; 3; 1]; l2 := []]
   [gv2 := [2; 0; 1]; l1 := []; l2 := []]
   [gv2 := [3; 0]; l1 := []; l2 := [0; 4; 3; 0]]
   [gv2 := [1; 1; 0; 5]; l1 := [4]; l2 := [1; 4]]
   [gv2 := [1; 3; 6; 4; 5]; l1 := [1]; l2 := [5; 6; 3; 4; 1]]
   [gv2 := [2; 2; 2; 1]; l1 := [4; 4; 3; 4; 4]; l2 := [4; 0; 2; 0; 0]]
   [gv2 := [1; 2; 1]; l1 := [4]; l2 := [1]]
   [gv2 := [0; 6; 6; 1]; l1 := [0; 0]; l2 := []]
   [gv2 := [0; 2; 0]; l1 := [1]; l2 := []]
   etc ...


Label: 2 (2)
Abducted Assumption: (sorted gv1)
Positive Examples:
   [gv1 := [0; 3]; l1 := [2; 0; 1]; l2 := []]
   [gv1 := [3]; l1 := [4; 6; 5]; l2 := [2; 5; 5; 2]]
   [gv1 := [3]; l1 := [3; 4]; l2 := [5; 3; 2; 4; 4]]
   [gv1 := [0; 0]; l1 := [2; 3; 0]; l2 := []]
   [gv1 := []; l1 := [1; 3; 2]; l2 := [1; 4]]
   [gv1 := [0]; l1 := [1; 3; 2]; l2 := [0; 0; 1]]
   [gv1 := []; l1 := []; l2 := [2; 3; 0]]
   [gv1 := [4]; l1 := [2]; l2 := [4]]
   [gv1 := [0]; l1 := [0; 4]; l2 := [1; 0; 3; 0]]
   [gv1 := [1]; l1 := [0; 1]; l2 := [0]]
   etc ...

Negative Examples:
   [gv1 := [1; 4; 2; 1]; l1 := [3; 1; 1; 3]; l2 := [1; 0]]
   [gv1 := [1; 0]; l1 := [0; 0]; l2 := [2; 2]]
   [gv1 := [3; 2; 5; 3]; l1 := [5; 0; 0; 0; 1]; l2 := [3; 1; 1; 5; 2]]
   [gv1 := [6; 0; 0]; l1 := []; l2 := [1]]
   [gv1 := [1; 5; 3; 4; 0]; l1 := [0; 3; 4]; l2 := [3; 4; 1]]
   [gv1 := [4; 3; 1; 4]; l1 := []; l2 := [2]]
   [gv1 := [1; 4; 2; 5; 1; 1]; l1 := [1; 4; 5; 2; 3; 4]; l2 := [1; 6; 6; 5; 3]]
   [gv1 := [6; 5; 0; 4; 2]; l1 := [1; 6; 1; 4]; l2 := [1; 1; 3; 1; 1]]
   [gv1 := [4; 3]; l1 := [1; 2]; l2 := [1]]
   [gv1 := [4; 4; 3; 2]; l1 := []; l2 := [6]]
   etc ...



------------------------------ TERMS CONSIDERED IN SYNTHESIS ------------------------------
Time Elapsed From Start: 73.083 seconds


Label: 0 (0)
(sorted l2), (sorted l1), (sorted gv0), (l2 = l2), (l2 = l1), (l2 = gv0), (l1 = l2), (l1 = l1), (l1 = gv0), (gv0 = l2)
(gv0 = gv0), (false = sorted_bool l2), (false = sorted_bool l1), (false = sorted_bool gv0), (true = sorted_bool l2), (true = sorted_bool l1), (true = sorted_bool gv0), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l2 gv0))
(sorted (merge l1 l1)), (sorted (merge l1 gv0)), (sorted (merge gv0 l2)), (sorted (merge gv0 l1)), (sorted (merge gv0 gv0)), (Permutation l2 l1), (Permutation l2 gv0), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 l1)), (Permutation l2 (merge l2 gv0))
(Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 gv0)), (Permutation l2 (merge gv0 l2)), (Permutation l2 (merge gv0 l1)), (Permutation l2 (merge gv0 gv0)), (Permutation l1 l2), (Permutation l1 gv0), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 gv0))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 gv0)), (Permutation l1 (merge gv0 l2)), (Permutation l1 (merge gv0 l1)), (Permutation l1 (merge gv0 gv0)), (Permutation gv0 l2), (Permutation gv0 l1), (Permutation gv0 (merge l2 l2)), (Permutation gv0 (merge l2 l1)), (Permutation gv0 (merge l2 gv0))
(Permutation gv0 (merge l1 l1)), (Permutation gv0 (merge l1 gv0)), (Permutation gv0 (merge gv0 l2)), (Permutation gv0 (merge gv0 l1)), (Permutation gv0 (merge gv0 gv0)), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) gv0), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv0))
(Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 gv0)), (Permutation (merge l2 l2) (merge gv0 l2)), (Permutation (merge l2 l2) (merge gv0 l1)), (Permutation (merge l2 l2) (merge gv0 gv0)), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) gv0), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l2 gv0))
(Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 gv0)), (Permutation (merge l2 l1) (merge gv0 l2)), (Permutation (merge l2 l1) (merge gv0 l1)), (Permutation (merge l2 l1) (merge gv0 gv0)), (Permutation (merge l2 gv0) l2), (Permutation (merge l2 gv0) l1), (Permutation (merge l2 gv0) gv0), (Permutation (merge l2 gv0) (merge l2 l2)), (Permutation (merge l2 gv0) (merge l2 l1))
(Permutation (merge l2 gv0) (merge l1 l1)), (Permutation (merge l2 gv0) (merge l1 gv0)), (Permutation (merge l2 gv0) (merge gv0 l2)), (Permutation (merge l2 gv0) (merge gv0 l1)), (Permutation (merge l2 gv0) (merge gv0 gv0)), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) gv0), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1))
(Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv0)), (Permutation (merge l1 l2) (merge gv0 l2)), (Permutation (merge l1 l2) (merge gv0 l1)), (Permutation (merge l1 l2) (merge gv0 gv0)), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv0), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 l1))
(Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv0)), (Permutation (merge l1 l1) (merge gv0 l2)), (Permutation (merge l1 l1) (merge gv0 l1)), (Permutation (merge l1 l1) (merge gv0 gv0)), (Permutation (merge l1 gv0) l2), (Permutation (merge l1 gv0) l1), (Permutation (merge l1 gv0) gv0), (Permutation (merge l1 gv0) (merge l2 l2)), (Permutation (merge l1 gv0) (merge l2 l1))
(Permutation (merge l1 gv0) (merge l1 l2)), (Permutation (merge l1 gv0) (merge l1 l1)), (Permutation (merge l1 gv0) (merge gv0 l2)), (Permutation (merge l1 gv0) (merge gv0 l1)), (Permutation (merge l1 gv0) (merge gv0 gv0)), (Permutation (merge gv0 l2) l2), (Permutation (merge gv0 l2) l1), (Permutation (merge gv0 l2) gv0), (Permutation (merge gv0 l2) (merge l2 l2)), (Permutation (merge gv0 l2) (merge l2 l1))
(Permutation (merge gv0 l2) (merge l1 l2)), (Permutation (merge gv0 l2) (merge l1 l1)), (Permutation (merge gv0 l2) (merge l1 gv0)), (Permutation (merge gv0 l2) (merge gv0 l1)), (Permutation (merge gv0 l2) (merge gv0 gv0)), (Permutation (merge gv0 l1) l2), (Permutation (merge gv0 l1) l1), (Permutation (merge gv0 l1) gv0), (Permutation (merge gv0 l1) (merge l2 l2)), (Permutation (merge gv0 l1) (merge l2 l1))
(Permutation (merge gv0 l1) (merge l1 l2)), (Permutation (merge gv0 l1) (merge l1 l1)), (Permutation (merge gv0 l1) (merge l1 gv0)), (Permutation (merge gv0 l1) (merge gv0 l2)), (Permutation (merge gv0 l1) (merge gv0 gv0)), (Permutation (merge gv0 gv0) l2), (Permutation (merge gv0 gv0) l1), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (merge l2 l2)), (Permutation (merge gv0 gv0) (merge l2 l1))
(Permutation (merge gv0 gv0) (merge l1 l2)), (Permutation (merge gv0 gv0) (merge l1 l1)), (Permutation (merge gv0 gv0) (merge l1 gv0)), (Permutation (merge gv0 gv0) (merge gv0 l2)), (Permutation (merge gv0 gv0) (merge gv0 l1)), (~ sorted l2), (~ sorted l1), (~ sorted gv0), (l2 <> l2), (l2 <> l1)
(l1 <> l2), (l1 <> l1), (l1 <> gv0), (gv0 <> l2), (gv0 <> l1), (gv0 <> gv0), (None = Some l2), (None = Some l1), (None = Some gv0), (merge l2 l2 = l2)
(merge l2 l2 = gv0), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = gv0), (merge l2 gv0 = l2), (merge l2 gv0 = l1), (merge l2 gv0 = gv0), (merge l1 l2 = l2), (merge l1 l2 = l1), (merge l1 l2 = gv0)
(merge l1 l1 = l1), (merge l1 l1 = gv0), (merge l1 gv0 = l2), (merge l1 gv0 = l1), (merge l1 gv0 = gv0), (merge gv0 l2 = l2), (merge gv0 l2 = l1), (merge gv0 l2 = gv0), (merge gv0 l1 = l2), (merge gv0 l1 = l1)
(merge gv0 gv0 = l2), (merge gv0 gv0 = l1), (merge gv0 gv0 = gv0)

Label: 1 (1)
(sorted gv2), (sorted l1), (gv2 = gv2), (gv2 = l1), (l1 = gv2), (l1 = l1), (false = sorted_bool gv2), (false = sorted_bool l1), (true = sorted_bool gv2), (true = sorted_bool l1)
(sorted (merge gv2 l1)), (sorted (merge l1 gv2)), (sorted (merge l1 l1)), (Permutation gv2 l1), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l1 l1)), (Permutation l1 gv2), (Permutation l1 (merge gv2 gv2))
(Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l1 l1)), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) (merge gv2 l1)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 l1) gv2), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) (merge gv2 gv2))
(Permutation (merge gv2 l1) (merge l1 l1)), (Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) l1), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge l1 l1)), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (merge gv2 l1))
(~ sorted gv2), (~ sorted l1), (gv2 <> gv2), (gv2 <> l1), (l1 <> gv2), (l1 <> l1), (None = Some gv2), (None = Some l1), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1)
(merge gv2 l1 = l1), (merge l1 gv2 = gv2), (merge l1 gv2 = l1), (merge l1 l1 = gv2), (merge l1 l1 = l1)

Label: 2 (2)
(sorted l2), (sorted gv1), (l2 = l2), (l2 = gv1), (gv1 = l2), (gv1 = gv1), (false = sorted_bool l2), (false = sorted_bool gv1), (true = sorted_bool l2), (true = sorted_bool gv1)
(sorted (merge l2 gv1)), (sorted (merge gv1 l2)), (sorted (merge gv1 gv1)), (Permutation l2 gv1), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (merge gv1 gv1)), (Permutation gv1 l2), (Permutation gv1 (merge l2 l2))
(Permutation gv1 (merge gv1 l2)), (Permutation gv1 (merge gv1 gv1)), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv1), (Permutation (merge l2 l2) (merge l2 gv1)), (Permutation (merge l2 l2) (merge gv1 l2)), (Permutation (merge l2 l2) (merge gv1 gv1)), (Permutation (merge l2 gv1) l2), (Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (merge l2 l2))
(Permutation (merge l2 gv1) (merge gv1 gv1)), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 l2) gv1), (Permutation (merge gv1 l2) (merge l2 l2)), (Permutation (merge gv1 l2) (merge l2 gv1)), (Permutation (merge gv1 l2) (merge gv1 gv1)), (Permutation (merge gv1 gv1) l2), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge l2 l2)), (Permutation (merge gv1 gv1) (merge l2 gv1))
(~ sorted l2), (~ sorted gv1), (l2 <> l2), (l2 <> gv1), (gv1 <> l2), (gv1 <> gv1), (None = Some l2), (None = Some gv1), (merge l2 l2 = l2), (merge l2 l2 = gv1)
(merge l2 gv1 = gv1), (merge gv1 l2 = l2), (merge gv1 l2 = gv1), (merge gv1 gv1 = l2), (merge gv1 gv1 = gv1)


------------------------------ COMBINED SYNTHESIS PROBLEMS ------------------------------
Time Elapsed From Start: 73.088 seconds


Label: 0 (0)
Abducted Assumption: (merge (mergesort l1) (mergesort l2) = gv0)
Positive Examples:
   [gv0 := [0; 0]; l1 := [0]; l2 := [0]]
   [gv0 := [0; 1]; l1 := []; l2 := [1; 0]]
   [gv0 := [0; 0]; l1 := [0; 0]; l2 := []]
   [gv0 := [2; 2]; l1 := [2; 2]; l2 := []]
   [gv0 := [0; 1]; l1 := [0]; l2 := [1]]
   [gv0 := [2; 2]; l1 := []; l2 := [2; 2]]
   [gv0 := [1; 2]; l1 := []; l2 := [1; 2]]
   [gv0 := [1; 2]; l1 := [2; 1]; l2 := []]
   [gv0 := [0; 2]; l1 := [0]; l2 := [2]]
   [gv0 := [0; 2]; l1 := []; l2 := [0; 2]]
   etc ...

Negative Examples:
   [gv0 := [3; 0; 1]; l1 := [3; 0; 2]; l2 := [4; 2; 1]]
   [gv0 := [2; 0]; l1 := []; l2 := [1]]
   [gv0 := [3; 0]; l1 := []; l2 := [0; 1]]
   [gv0 := [5; 2; 0]; l1 := [0; 6; 2]; l2 := [5; 2; 0; 5]]
   [gv0 := [4; 4; 3; 0; 0]; l1 := [4; 4; 4; 1]; l2 := [1; 4; 5; 4]]
   [gv0 := [4; 2]; l1 := []; l2 := []]
   [gv0 := [6; 3]; l1 := [2; 0; 3; 1; 5; 6]; l2 := [2; 6]]
   [gv0 := [3; 1; 2; 5]; l1 := [4; 5; 0; 5; 4]; l2 := [5; 2]]
   [gv0 := [2; 4; 2]; l1 := [4; 0; 3; 1]; l2 := [2; 1; 2; 0]]
   [gv0 := [0; 2; 0]; l1 := []; l2 := [3; 2]]
   etc ...

(sorted l2), (sorted l1), (sorted gv0), (l2 = l2), (l2 = l1), (l2 = gv0), (l1 = l2), (l1 = l1), (l1 = gv0), (gv0 = l2)
(gv0 = gv0), (false = sorted_bool l2), (false = sorted_bool l1), (false = sorted_bool gv0), (true = sorted_bool l2), (true = sorted_bool l1), (true = sorted_bool gv0), (sorted (merge l2 l2)), (sorted (merge l2 l1)), (sorted (merge l2 gv0))
(sorted (merge l1 l1)), (sorted (merge l1 gv0)), (sorted (merge gv0 l2)), (sorted (merge gv0 l1)), (sorted (merge gv0 gv0)), (Permutation l2 l1), (Permutation l2 gv0), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 l1)), (Permutation l2 (merge l2 gv0))
(Permutation l2 (merge l1 l1)), (Permutation l2 (merge l1 gv0)), (Permutation l2 (merge gv0 l2)), (Permutation l2 (merge gv0 l1)), (Permutation l2 (merge gv0 gv0)), (Permutation l1 l2), (Permutation l1 gv0), (Permutation l1 (merge l2 l2)), (Permutation l1 (merge l2 l1)), (Permutation l1 (merge l2 gv0))
(Permutation l1 (merge l1 l1)), (Permutation l1 (merge l1 gv0)), (Permutation l1 (merge gv0 l2)), (Permutation l1 (merge gv0 l1)), (Permutation l1 (merge gv0 gv0)), (Permutation gv0 l2), (Permutation gv0 l1), (Permutation gv0 (merge l2 l2)), (Permutation gv0 (merge l2 l1)), (Permutation gv0 (merge l2 gv0))
(Permutation gv0 (merge l1 l1)), (Permutation gv0 (merge l1 gv0)), (Permutation gv0 (merge gv0 l2)), (Permutation gv0 (merge gv0 l1)), (Permutation gv0 (merge gv0 gv0)), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) l1), (Permutation (merge l2 l2) gv0), (Permutation (merge l2 l2) (merge l2 l1)), (Permutation (merge l2 l2) (merge l2 gv0))
(Permutation (merge l2 l2) (merge l1 l1)), (Permutation (merge l2 l2) (merge l1 gv0)), (Permutation (merge l2 l2) (merge gv0 l2)), (Permutation (merge l2 l2) (merge gv0 l1)), (Permutation (merge l2 l2) (merge gv0 gv0)), (Permutation (merge l2 l1) l2), (Permutation (merge l2 l1) l1), (Permutation (merge l2 l1) gv0), (Permutation (merge l2 l1) (merge l2 l2)), (Permutation (merge l2 l1) (merge l2 gv0))
(Permutation (merge l2 l1) (merge l1 l1)), (Permutation (merge l2 l1) (merge l1 gv0)), (Permutation (merge l2 l1) (merge gv0 l2)), (Permutation (merge l2 l1) (merge gv0 l1)), (Permutation (merge l2 l1) (merge gv0 gv0)), (Permutation (merge l2 gv0) l2), (Permutation (merge l2 gv0) l1), (Permutation (merge l2 gv0) gv0), (Permutation (merge l2 gv0) (merge l2 l2)), (Permutation (merge l2 gv0) (merge l2 l1))
(Permutation (merge l2 gv0) (merge l1 l1)), (Permutation (merge l2 gv0) (merge l1 gv0)), (Permutation (merge l2 gv0) (merge gv0 l2)), (Permutation (merge l2 gv0) (merge gv0 l1)), (Permutation (merge l2 gv0) (merge gv0 gv0)), (Permutation (merge l1 l2) l2), (Permutation (merge l1 l2) l1), (Permutation (merge l1 l2) gv0), (Permutation (merge l1 l2) (merge l2 l2)), (Permutation (merge l1 l2) (merge l2 l1))
(Permutation (merge l1 l2) (merge l1 l1)), (Permutation (merge l1 l2) (merge l1 gv0)), (Permutation (merge l1 l2) (merge gv0 l2)), (Permutation (merge l1 l2) (merge gv0 l1)), (Permutation (merge l1 l2) (merge gv0 gv0)), (Permutation (merge l1 l1) l2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) gv0), (Permutation (merge l1 l1) (merge l2 l2)), (Permutation (merge l1 l1) (merge l2 l1))
(Permutation (merge l1 l1) (merge l1 l2)), (Permutation (merge l1 l1) (merge l1 gv0)), (Permutation (merge l1 l1) (merge gv0 l2)), (Permutation (merge l1 l1) (merge gv0 l1)), (Permutation (merge l1 l1) (merge gv0 gv0)), (Permutation (merge l1 gv0) l2), (Permutation (merge l1 gv0) l1), (Permutation (merge l1 gv0) gv0), (Permutation (merge l1 gv0) (merge l2 l2)), (Permutation (merge l1 gv0) (merge l2 l1))
(Permutation (merge l1 gv0) (merge l1 l2)), (Permutation (merge l1 gv0) (merge l1 l1)), (Permutation (merge l1 gv0) (merge gv0 l2)), (Permutation (merge l1 gv0) (merge gv0 l1)), (Permutation (merge l1 gv0) (merge gv0 gv0)), (Permutation (merge gv0 l2) l2), (Permutation (merge gv0 l2) l1), (Permutation (merge gv0 l2) gv0), (Permutation (merge gv0 l2) (merge l2 l2)), (Permutation (merge gv0 l2) (merge l2 l1))
(Permutation (merge gv0 l2) (merge l1 l2)), (Permutation (merge gv0 l2) (merge l1 l1)), (Permutation (merge gv0 l2) (merge l1 gv0)), (Permutation (merge gv0 l2) (merge gv0 l1)), (Permutation (merge gv0 l2) (merge gv0 gv0)), (Permutation (merge gv0 l1) l2), (Permutation (merge gv0 l1) l1), (Permutation (merge gv0 l1) gv0), (Permutation (merge gv0 l1) (merge l2 l2)), (Permutation (merge gv0 l1) (merge l2 l1))
(Permutation (merge gv0 l1) (merge l1 l2)), (Permutation (merge gv0 l1) (merge l1 l1)), (Permutation (merge gv0 l1) (merge l1 gv0)), (Permutation (merge gv0 l1) (merge gv0 l2)), (Permutation (merge gv0 l1) (merge gv0 gv0)), (Permutation (merge gv0 gv0) l2), (Permutation (merge gv0 gv0) l1), (Permutation (merge gv0 gv0) gv0), (Permutation (merge gv0 gv0) (merge l2 l2)), (Permutation (merge gv0 gv0) (merge l2 l1))
(Permutation (merge gv0 gv0) (merge l1 l2)), (Permutation (merge gv0 gv0) (merge l1 l1)), (Permutation (merge gv0 gv0) (merge l1 gv0)), (Permutation (merge gv0 gv0) (merge gv0 l2)), (Permutation (merge gv0 gv0) (merge gv0 l1)), (~ sorted l2), (~ sorted l1), (~ sorted gv0), (l2 <> l2), (l2 <> l1)
(l1 <> l2), (l1 <> l1), (l1 <> gv0), (gv0 <> l2), (gv0 <> l1), (gv0 <> gv0), (None = Some l2), (None = Some l1), (None = Some gv0), (merge l2 l2 = l2)
(merge l2 l2 = gv0), (merge l2 l1 = l2), (merge l2 l1 = l1), (merge l2 l1 = gv0), (merge l2 gv0 = l2), (merge l2 gv0 = l1), (merge l2 gv0 = gv0), (merge l1 l2 = l2), (merge l1 l2 = l1), (merge l1 l2 = gv0)
(merge l1 l1 = l1), (merge l1 l1 = gv0), (merge l1 gv0 = l2), (merge l1 gv0 = l1), (merge l1 gv0 = gv0), (merge gv0 l2 = l2), (merge gv0 l2 = l1), (merge gv0 l2 = gv0), (merge gv0 l1 = l2), (merge gv0 l1 = l1)
(merge gv0 gv0 = l2), (merge gv0 gv0 = l1), (merge gv0 gv0 = gv0)

Label: 1 (1)
Abducted Assumption: (sorted gv2)
Positive Examples:
   [gv2 := [4]; l1 := [2]; l2 := [4; 4; 1; 1]]
   [gv2 := [1]; l1 := [2]; l2 := [2; 2]]
   [gv2 := []; l1 := [5; 0]; l2 := [3; 3; 3]]
   [gv2 := [0; 3; 3]; l1 := [2; 2; 5; 5; 4; 3]; l2 := [2; 5]]
   [gv2 := [4]; l1 := [5; 5; 0]; l2 := [0; 5; 1; 0]]
   [gv2 := []; l1 := [0]; l2 := [3; 0; 3]]
   [gv2 := [3; 3]; l1 := []; l2 := [1]]
   [gv2 := []; l1 := [3; 1; 4]; l2 := [2; 3; 4]]
   [gv2 := [0; 1]; l1 := [3; 3]; l2 := [0; 2; 2]]
   [gv2 := []; l1 := [0; 1]; l2 := [0; 0]]
   etc ...

Negative Examples:
   [gv2 := [5; 1; 4; 4; 0]; l1 := [0; 0]; l2 := [1; 6; 6]]
   [gv2 := [4; 0; 0; 0]; l1 := [2; 3; 3; 1]; l2 := []]
   [gv2 := [2; 0; 1]; l1 := []; l2 := []]
   [gv2 := [3; 0]; l1 := []; l2 := [0; 4; 3; 0]]
   [gv2 := [1; 1; 0; 5]; l1 := [4]; l2 := [1; 4]]
   [gv2 := [1; 3; 6; 4; 5]; l1 := [1]; l2 := [5; 6; 3; 4; 1]]
   [gv2 := [2; 2; 2; 1]; l1 := [4; 4; 3; 4; 4]; l2 := [4; 0; 2; 0; 0]]
   [gv2 := [1; 2; 1]; l1 := [4]; l2 := [1]]
   [gv2 := [0; 6; 6; 1]; l1 := [0; 0]; l2 := []]
   [gv2 := [0; 2; 0]; l1 := [1]; l2 := []]
   etc ...

(sorted gv2), (sorted l1), (gv2 = gv2), (gv2 = l1), (l1 = gv2), (l1 = l1), (false = sorted_bool gv2), (false = sorted_bool l1), (true = sorted_bool gv2), (true = sorted_bool l1)
(sorted (merge gv2 l1)), (sorted (merge l1 gv2)), (sorted (merge l1 l1)), (Permutation gv2 l1), (Permutation gv2 (merge gv2 gv2)), (Permutation gv2 (merge gv2 l1)), (Permutation gv2 (merge l1 gv2)), (Permutation gv2 (merge l1 l1)), (Permutation l1 gv2), (Permutation l1 (merge gv2 gv2))
(Permutation l1 (merge l1 gv2)), (Permutation l1 (merge l1 l1)), (Permutation (merge gv2 gv2) gv2), (Permutation (merge gv2 gv2) l1), (Permutation (merge gv2 gv2) (merge gv2 l1)), (Permutation (merge gv2 gv2) (merge l1 gv2)), (Permutation (merge gv2 gv2) (merge l1 l1)), (Permutation (merge gv2 l1) gv2), (Permutation (merge gv2 l1) l1), (Permutation (merge gv2 l1) (merge gv2 gv2))
(Permutation (merge gv2 l1) (merge l1 l1)), (Permutation (merge l1 gv2) gv2), (Permutation (merge l1 gv2) l1), (Permutation (merge l1 gv2) (merge gv2 gv2)), (Permutation (merge l1 gv2) (merge gv2 l1)), (Permutation (merge l1 gv2) (merge l1 l1)), (Permutation (merge l1 l1) gv2), (Permutation (merge l1 l1) l1), (Permutation (merge l1 l1) (merge gv2 gv2)), (Permutation (merge l1 l1) (merge gv2 l1))
(~ sorted gv2), (~ sorted l1), (gv2 <> gv2), (gv2 <> l1), (l1 <> gv2), (l1 <> l1), (None = Some gv2), (None = Some l1), (merge gv2 gv2 = gv2), (merge gv2 gv2 = l1)
(merge gv2 l1 = l1), (merge l1 gv2 = gv2), (merge l1 gv2 = l1), (merge l1 l1 = gv2), (merge l1 l1 = l1)

Label: 2 (2)
Abducted Assumption: (sorted gv1)
Positive Examples:
   [gv1 := [0; 3]; l1 := [2; 0; 1]; l2 := []]
   [gv1 := [3]; l1 := [4; 6; 5]; l2 := [2; 5; 5; 2]]
   [gv1 := [3]; l1 := [3; 4]; l2 := [5; 3; 2; 4; 4]]
   [gv1 := [0; 0]; l1 := [2; 3; 0]; l2 := []]
   [gv1 := []; l1 := [1; 3; 2]; l2 := [1; 4]]
   [gv1 := [0]; l1 := [1; 3; 2]; l2 := [0; 0; 1]]
   [gv1 := []; l1 := []; l2 := [2; 3; 0]]
   [gv1 := [4]; l1 := [2]; l2 := [4]]
   [gv1 := [0]; l1 := [0; 4]; l2 := [1; 0; 3; 0]]
   [gv1 := [1]; l1 := [0; 1]; l2 := [0]]
   etc ...

Negative Examples:
   [gv1 := [1; 4; 2; 1]; l1 := [3; 1; 1; 3]; l2 := [1; 0]]
   [gv1 := [1; 0]; l1 := [0; 0]; l2 := [2; 2]]
   [gv1 := [3; 2; 5; 3]; l1 := [5; 0; 0; 0; 1]; l2 := [3; 1; 1; 5; 2]]
   [gv1 := [6; 0; 0]; l1 := []; l2 := [1]]
   [gv1 := [1; 5; 3; 4; 0]; l1 := [0; 3; 4]; l2 := [3; 4; 1]]
   [gv1 := [4; 3; 1; 4]; l1 := []; l2 := [2]]
   [gv1 := [1; 4; 2; 5; 1; 1]; l1 := [1; 4; 5; 2; 3; 4]; l2 := [1; 6; 6; 5; 3]]
   [gv1 := [6; 5; 0; 4; 2]; l1 := [1; 6; 1; 4]; l2 := [1; 1; 3; 1; 1]]
   [gv1 := [4; 3]; l1 := [1; 2]; l2 := [1]]
   [gv1 := [4; 4; 3; 2]; l1 := []; l2 := [6]]
   etc ...

(sorted l2), (sorted gv1), (l2 = l2), (l2 = gv1), (gv1 = l2), (gv1 = gv1), (false = sorted_bool l2), (false = sorted_bool gv1), (true = sorted_bool l2), (true = sorted_bool gv1)
(sorted (merge l2 gv1)), (sorted (merge gv1 l2)), (sorted (merge gv1 gv1)), (Permutation l2 gv1), (Permutation l2 (merge l2 l2)), (Permutation l2 (merge l2 gv1)), (Permutation l2 (merge gv1 l2)), (Permutation l2 (merge gv1 gv1)), (Permutation gv1 l2), (Permutation gv1 (merge l2 l2))
(Permutation gv1 (merge gv1 l2)), (Permutation gv1 (merge gv1 gv1)), (Permutation (merge l2 l2) l2), (Permutation (merge l2 l2) gv1), (Permutation (merge l2 l2) (merge l2 gv1)), (Permutation (merge l2 l2) (merge gv1 l2)), (Permutation (merge l2 l2) (merge gv1 gv1)), (Permutation (merge l2 gv1) l2), (Permutation (merge l2 gv1) gv1), (Permutation (merge l2 gv1) (merge l2 l2))
(Permutation (merge l2 gv1) (merge gv1 gv1)), (Permutation (merge gv1 l2) l2), (Permutation (merge gv1 l2) gv1), (Permutation (merge gv1 l2) (merge l2 l2)), (Permutation (merge gv1 l2) (merge l2 gv1)), (Permutation (merge gv1 l2) (merge gv1 gv1)), (Permutation (merge gv1 gv1) l2), (Permutation (merge gv1 gv1) gv1), (Permutation (merge gv1 gv1) (merge l2 l2)), (Permutation (merge gv1 gv1) (merge l2 gv1))
(~ sorted l2), (~ sorted gv1), (l2 <> l2), (l2 <> gv1), (gv1 <> l2), (gv1 <> gv1), (None = Some l2), (None = Some gv1), (merge l2 l2 = l2), (merge l2 l2 = gv1)
(merge l2 gv1 = gv1), (merge gv1 l2 = l2), (merge gv1 l2 = gv1), (merge gv1 gv1 = l2), (merge gv1 gv1 = gv1)


------------------------------ SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 157.68 seconds


Label: 0 (0)
(sorted gv0), (true = sorted_bool gv0), (Permutation gv0 (merge l2 l1)), (Permutation (merge l2 l1) gv0)

Label: 1 (1)

Label: 2 (2)


------------------------------ PROCESSED SYNTHESIS RESULTS ------------------------------
Time Elapsed From Start: 173.665 seconds


(sorted gv2)
 - (sorted gv2)

(sorted gv1)
 - (sorted gv1)

(merge (mergesort l1) (mergesort l2) = gv0)
 - (merge (mergesort l1) (mergesort l2) = gv0)
 - (sorted gv0)
 - (true = sorted_bool gv0)
 - (Permutation gv0 (merge l2 l1))
 - (Permutation (merge l2 l1) gv0)


------------------------------ FINAL RESULTS ------------------------------
Time Elapsed From Start: 173.666 seconds

Number of Result Pairs Returned: 3

(merge (mergesort l1) (mergesort l2) = gv0 -> true = sorted_bool gv0)
(true = sorted_bool gv0 -> sorted gv0)

(sorted gv2 -> sorted (merge (mergesort l1) gv2))

(sorted gv1 -> sorted (merge gv1 (mergesort l2)))
